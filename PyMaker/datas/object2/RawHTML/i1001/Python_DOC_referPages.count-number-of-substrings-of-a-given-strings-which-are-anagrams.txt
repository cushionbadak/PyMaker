<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30270880/can-this-python-code-be-more-efficient">Can this python code be more efficient?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I need to find anagrams of all substrings of a given string. I found all possible substrings for the given string using the following code:</p>
<pre><code>def anagrams(string):
    # abba
    subs = [string[i:j+1] for i in range(len(string)) for j in range(i, len(string))]
    # ['a', 'ab', 'abb', 'abba', 'b', 'bb', 'bba', 'b', 'ba', 'a']
</code></pre>
<p>I want to find substrings of equal length from this list and if they are anagrams. Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>If two strings are anagrams they must have the same length, you can just test them directly with a simple nested <code>for</code> loop.</p>
<p>To check if two strings are anagrams, <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> comes in handy: it counts the occurrences of every distinct element in an iterable, so two strings <code>si</code> and <code>sj</code> are anagrams if and only if <code>Counter(si) == Counter(sj)</code>.</p>
<pre><code>from collections import Counter

def anagrams(string):
    subs = [string[i:j+1] for i in range(len(string)) for j in range(i, len(string))]
    counters = list(map(Counter, subs))
    total = 0

    for i, ci in enumerate(counters):
        for j, cj in enumerate(counters):
            if i != j and ci == cj:
                total += 1

    return total
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As in @MarcoBonelli answer you could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a> to create a representation of a string that will be equal if and only if the strings are anagrams of each other, for example:</p>
<pre><code>'bba' -&gt; ('b', 2), ('a', 1)
'abb' -&gt; ('b', 2), ('a', 1)
</code></pre>
<p>Instead of doing a nested for loop and check every pair, you could use a dictionary to group strings with the same Counter representation and use a single loop:</p>
<pre><code>from collections import Counter


def anagrams(string):
    subs = [string[i:j+1] for i in range(len(string)) for j in range(i, len(string))]

    anagrams = {}
    for si in subs:
        key = frozenset(Counter(si).items())
        anagrams.setdefault(key, []).append(si)

    # only want the groups with more than one element
    return list(value for value in anagrams.values() if len(value) &gt; 1)


result = anagrams('abba')
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['abb', 'bba'], ['b', 'b'], ['ab', 'ba'], ['a', 'a']]
</code></pre>
<p>In the output the sub-list corresponds to the groups of strings that are anagrams of each other. To use the Counter in a dictionary you have to convert the items to a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">frozenset</a>. Finally this approach complexity is <em>O(n)</em> where <em>n</em> is the number of substrings.</p>
</div>
<span class="comment-copy">And what is the given string?</span>
<span class="comment-copy">What part of this are you having trouble with? Finding substrings of the same length, or testing whether two strings are anagrams of each other?</span>
<span class="comment-copy">@yatu It's apparently <code>abba</code>.</span>
<span class="comment-copy">@Barmar apparently, both.</span>
<span class="comment-copy">Could yo be more specific about the expected output? You want to output the substrings of the input string that are anagrams of each other?</span>
<span class="comment-copy">If I am not mistaken anagrams can have any order of the letters for instance 'abc' is an anagram of 'acb'</span>
<span class="comment-copy">@DanielMesejo whoops, totally right. Fixed it.</span>
