<div class="post-text" itemprop="text">
<p>I'm using the list.count() method to check if a relationship has an element.</p>
<p>While it works pretty well in a test code, it doesnt anymore when the counted class inherits the flask_login UserMixin class.</p>
<p>Why , and how to fix it ?</p>
<pre><code>class Element(UserMixin):
    id=1
    name="default"
    def __init__(self, name):
        name=name

elementsList=[]


elt1=Element(name="1")
elt2=Element(name="2")
elt3=Element(name="3")

elementsList.append(elt1)
elementsList.append(elt2)


print("Counting Element2 should return 1: ", elementsList.count(elt2)) # returns 2
print("Counting Element3 should return 0: ", elementsList.count(elt3)) # returns 2
</code></pre>
<p>I should get the number of elements in the list (1 or 0 ).</p>
<p>Instead I get the whole list length (2, even if I append more integers).</p>
<p>It is as if it was counting class occurrences in the list, not the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all lets understand how <code>list.count</code> works. From the cpython source code the <code>list.count</code> has the following definition.</p>
<pre><code>static PyObject *
list_count(PyListObject *self, PyObject *value)
{
    Py_ssize_t count = 0;
    Py_ssize_t i;

    for (i = 0; i &lt; Py_SIZE(self); i++) {
        int cmp = PyObject_RichCompareBool(self-&gt;ob_item[i], value, Py_EQ);
        if (cmp &gt; 0)
            count++;
        else if (cmp &lt; 0)
            return NULL;
    }
    return PyLong_FromSsize_t(count);
}
</code></pre>
<p>So when you perform <code>some_list.count(some_element)</code>, <a href="https://stackoverflow.com/questions/44812468/what-is-the-time-complexity-of-python-lists-count-function/44813154#44813154">Python will iterate over every object in the list, and perform a rich comparison</a>(ie, <code>PyObject_RichCompareBool</code>). </p>
<p>From the <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompare" rel="nofollow noreferrer">C-API</a> documentation the rich comparison(ie, <code>PyObject_RichCompareBool(PyObject *o1, PyObject *o2, int opid)</code>) will 
Compare the values of <code>o1</code> and <code>o2</code> using the operation specified by <code>opid</code>, which must be one of <code>Py_LT</code>, <code>Py_LE</code>, <code>Py_EQ</code>, <code>Py_NE</code>, <code>Py_GT</code>, or <code>Py_GE</code>, corresponding to <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>&gt;</code>, or <code>&gt;=</code> respectively. Returns <code>-1</code> on error, <code>0</code> if the result is false, <code>1</code> otherwise.</p>
<p>So if the value is <code>1</code>(ie, <code>true</code>) a counter will be incremented. After the iteration the counter will be return back to the caller.</p>
<p><code>list_count</code> in CPython roughly equivalent to the following in python layer,</p>
<pre><code>def list_count(list_, item_to_count):
   counter = 0
   for iterm in list_:
      if item == item_to_count:
          counter += 1
   return counter
</code></pre>
<p>Now lets get back to your question.</p>
<blockquote>
<p>While it works pretty well in a test code, it doesnt anymore when the
  counted class inherits the flask_login UserMixin class.</p>
</blockquote>
<p><strong><em>Lets take a sample class(Without inheriting from <code>UserMixin</code>)</em></strong></p>
<pre><code>class Person
   def __init__(self, name):
       self.name = name

p1 = Person("Person1")
p2 = Person("Person2")
p3 = Person("Person3")

print([p1, p2, p3].count(p1))
</code></pre>
<p>This will print <code>1</code> as we expected. But how does python perform the comparison here???. By default python will compare the <code>id</code>(ie, memory address of the object) of <code>p1</code> with ids of <code>p1</code>, <code>p2</code>, <code>p3</code>. Since each new object have different ids , count method will return <code>1</code>.</p>
<p>Ok, So what if we want to count the person as one if there names are equal???</p>
<p>Let take the same example.</p>
<pre><code>p1 = Person("Person1")
p2 = Person("Person1")

print([p1, p2].count(p1)) # I want this to be return 2
</code></pre>
<p>But This still return <code>1</code> as python still comparing with its object ids. So how can I customize this?. You can override <code>__eq__</code> of the object.  ie,</p>
<pre><code>class Person(object):
   def __init__(self, name):
       self.name = name

   def __eq__(self, other):
       if isinstance(other, self.__class__):
           return self.name == other.name
       return NotImplemented

p1 = Person("Person1")
p2 = Person("Person1")

print([p1, p2].count(p1))
</code></pre>
<p>Wow now it return <code>2</code> as expected.</p>
<p><strong><em>Now lets consider the class which inherit from   <code>UserMixin</code>.</em></strong></p>
<pre><code>class Element(UserMixin):
    id=1
    def __init__(self, name):
        self.name=name

elementsList=[]
elt1=Element(name="1")
elt2=Element(name="2")
elt3=Element(name="3")
elementsList.append(elt1)
elementsList.append(elt2)
print(elementsList.count(elt2)) 
</code></pre>
<p>This will print <code>2</code>. Why?. If the comparison was performed based on <code>ids</code> it would have been <code>1</code>. So there will be an  <code>__eq__</code> implemented somewhere. So if you look at the <code>UserMixin</code> class implementation it implement <a href="https://github.com/maxcountryman/flask-login/blob/848088a9fc6e8c9c418e8820e072cde6ac81dc00/flask_login/mixins.py#L41" rel="nofollow noreferrer"><code>__eq__</code></a> method.</p>
<pre><code>def __eq__(self, other):
    '''
    Checks the equality of two `UserMixin` objects using `get_id`.
    '''
    if isinstance(other, UserMixin):
        return self.get_id() == other.get_id()
    return NotImplemented

def get_id(self):
    try:
        return text_type(self.id)
    except AttributeError:
        raise NotImplementedError('No `id` attribute - override `get_id`')
</code></pre>
<p>As you can see the comparison is performed based on its <code>id</code> attribute. In this case <code>Element</code> class set the <code>id</code> attribute on the class level hence it will be same for all instances.</p>
<blockquote>
<p>How to fix this,</p>
</blockquote>
<p>From the logical perspective every object will have unique ids. Hence <code>id</code> should be a instance level attribute. See one example from the <code>flask-login</code> code base itself.</p>
<pre><code>class User(UserMixin):
    def __init__(self, name, id, active=True):
        self.id = id
        self.name = name
        self.active = active

    def get_id(self):
        return self.id

    @property
    def is_active(self):
        return self.active
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This 'id' issue is the key point. </p>
<p>Back to the sqlalchemy context, the list holds objects with an id as primarykey ... set to 'None' at first for all objects.</p>
<p>And it will be updated only after a session.add() and session.commit(), the final fix. </p>
<p>Thanks.</p>
</div>
