<div class="post-text" itemprop="text">
<p>I don't have much experience with Python. I'm trying to code in a functional style like I'm used to from Java and JavaScript e.g.</p>
<pre><code>var result = getHeroes('Jedi')
  .map(hero =&gt; { hero: hero, movies: getMovies(hero) })
  .filter(x =&gt; x.movies.contains('A New Hope'));
</code></pre>
<p>I'm trying to do something similar in Python but I can't get the same chaining style. I had to break it down to two statements, which I don't like:</p>
<pre><code>tmp = ((hero, get_movies(hero)) for hero in get_heroes('jedi'))
result = ((hero, movies) for (hero, movies) in tmp if movies.contains('A New Hope')
</code></pre>
<p>I have two questions:</p>
<ol>
<li>Is there a way in Python to approach the first style?</li>
<li>What is the idiomatic way of doing this in Python?</li>
</ol>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>As someone who adores functional programming, <em>don't write in functional style in Python</em>.</p>
<p>This hard and fast rule is a little ham-handed, and there are certainly ways to do what you're trying to do using typical functional tools like <code>map</code>, <code>filter</code>, and <code>reduce</code> (called <code>functools.reduce</code> in Python), but it's likely that your functional code will look uglier than sin, in which case there's no reason to prefer it over something imperative and pretty.</p>
<pre><code>result = []
for hero in get_heros("Jedi"):
    movies = get_movies(hero)
    for movie in movies:
        if "A New Hope" in movies:
            result.append((hero, movies))
</code></pre>
<p>This could be done with a list comprehension, but is probably less readable.</p>
<pre><code>result = [(hero, movies) for hero in get_heros("Jedi")
          for movies in [get_movies(hero)] if "A New Hope" in movies]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generator expressions <em>are</em> the Pythonic approach, but a functional solution is possible via a combination of <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a>:</p>
<pre><code>mapper = map(lambda x: (x, get_movies(x)), get_heroes('jedi'))
result = filter(lambda x: x[1].contains('A New Hope'), mapper)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IMO they way of doing that in a functional style in python (not pythonic actually), using <code>map</code> and <code>filter</code>:</p>
<pre><code>result = filter (
    lambda x: x[1].contains('A New Hope'),
    map(
        lambda x: (hero, get_movies(hero)),
        get_heroes('jedi')
    )
)
</code></pre>
<p>The pythonic way (not very functional) would be to use a generator expresion:</p>
<pre><code>result = ((hero, get_movies(hero)) for hero in get_heroes("jedi") if "A new hope" in get_movies(hero))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are willing to use third-party libraries, I would suggest <code>fn.py</code> with its syntactic sugar for compositions</p>
<pre><code>from fn import F

result = (
    F(map, lambda hero: dict(hero=hero, movies=getMovies(hero))) &gt;&gt;
    (filter, lambda x: 'A New Hope' in x['movies']) &gt;&gt; 
    list
)(getHeroes('Jedi'))
</code></pre>
<p>You can remove the last element in the composition, if you don't want a list, though stateful iterators/generators are not very functional. <code>F</code>-objects wrap callables and make partial application and composition easier. A chain of <code>F</code>-expressions is a new function that can be used multiple times. This is closer to functional programming in the classical sense: programs are compositions:</p>
<pre><code>program = (
    F(map, lambda hero: dict(hero=hero, movies=getMovies(hero))) &gt;&gt;
    (filter, lambda x: 'A New Hope' in x['movies']) &gt;&gt; 
    list
)

result = program(getHeroes('Jedi'))
# or even
result = (F(getHeroes) &gt;&gt; program)('Jedi')
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/1017621/why-isnt-python-very-good-for-functional-programming">Why isn't Python very good for functional programming?</a></span>
<span class="comment-copy">That javascript doesnÂ´t look very functional actually.</span>
<span class="comment-copy">well, you can do functional, but chances are your collaborators are going to hate you for that mostly (: if you also work with a functional person, go for it by all means (:</span>
<span class="comment-copy">@JoeyMallone neither are JavaScript/Java, but the OP wants to write that way</span>
<span class="comment-copy">Your nested <code>for</code>-loop example is anything, but Pythonic. What is wrong with generator expressions and comprehensions?</span>
<span class="comment-copy">@EliKorvigo nothing when those expressions can be concise, but the sort of nested comprehension needed for this logic is cumbersome. Actually my logic is wrong -- he wants <code>(hero, movies) if "A New Hope" in movies</code>.</span>
<span class="comment-copy">I agree with @AdamSmith here: a nested list comprehension gains nothing in legibility over the explicit nested loops</span>
<span class="comment-copy">@AdamSmith I think the second way is what I wanted, thank you</span>
<span class="comment-copy">@AdamSmith I personnaly would have used a list comp within the for loop, ie <code>for hero in get_heroes("Jedi"): results.extend([movie for movie in get_movies(hero) if "A New Hope" in movies])</code></span>
<span class="comment-copy">generators and generator expressions (including list comprehensions etc) actually ARE typical of functional programming -  FWIW, list comprehensions come from Haskell.</span>
<span class="comment-copy">This is a sincere approach to what could be pythonic and functional actually. I think it would "look" better if you name the function you are building and then apply it separately to the data.</span>
<span class="comment-copy">@Netwave nice suggestion, updated.</span>
