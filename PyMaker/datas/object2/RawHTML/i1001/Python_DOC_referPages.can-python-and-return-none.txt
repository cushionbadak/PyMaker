<div class="post-text" itemprop="text">
<p>I am looking at some code which apparently runs, as nobody has complained about it, but am well confused by what they have written:</p>
<pre><code>if a and b is not None:
    # do something
</code></pre>
<p>I have always thought of the 'and' operator as something which returns True or False, now am starting to doubt myself.. What else would it return, a number..  It is probably not pythonic, but am I missing something - how can someone write something like that?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">[Python 3]: Operator precedence</a> (<strong>emphasis</strong> is mine):</p>
<blockquote>
<p>The following table summarizes the operator precedence in Python, <strong>from lowest precedence (least binding) to highest precedence (most binding)</strong>.</p>
<pre><code>...
and                                                 Boolean AND
not x                                               Boolean NOT
in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==        Comparisons, including membership tests and identity tests
...
</code></pre>
</blockquote>
<p>The fact that <strong><em>is not</em></strong> comes <strong>after</strong> <strong><em>and</em></strong>, means that it will be evaluated <strong>before</strong> <strong><em>and</em></strong> (both might not be evaluated at all, due to <em>lazy evaluation</em> - thanks @NickA for the comment), so the expression is equivalent to (adding parentheses for clarity):</p>
<pre><code>if a and (b is not None):
</code></pre>
<p>Also, according to <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">[Python 3]: Truth Value Testing</a>:</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an <a href="https://docs.python.org/3/reference/compound_stmts.html#if" rel="nofollow noreferrer">if</a> or <a href="https://docs.python.org/3/reference/compound_stmts.html#while" rel="nofollow noreferrer">while</a> condition or as operand of the Boolean operations below.</p>
</blockquote>
<p>your <strong><em>if</em></strong> statement is perfectly <em>OK</em> (produces a <em>bool</em>).</p>
<p>Examples (using <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">[Python 3]: class <strong>bool</strong>(<em>[x]</em>)</a>):</p>
<blockquote>
<pre><code>&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(100)
True
&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool([0])
True
&gt;&gt;&gt; bool(None)
False
&gt;&gt;&gt; bool({})
False
&gt;&gt;&gt; bool({1: 1})
True
&gt;&gt;&gt; bool(None is not None)
False
&gt;&gt;&gt; bool(1 is not None)
True
&gt;&gt;&gt; bool(2 and 1 is not None)
True
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It means if <code>a is Truthy</code> and <code>b is not None</code> and not what you thought it meant i.e. <code>a and b is Truthy</code></p>
<pre><code>a = 999
b = None

if a and b is not None:
    print("a is True but b is None")
else:
    print("a is True and b is not None")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code above means: </p>
<p>If <code>a</code> (is truthy), AND <code>b</code> isn't <code>None</code>, then <code>#do something</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this code, you evaluate <code>b is not None</code> first, which is a boolean.</p>
<p>And then <code>a</code> is implicitly converted into a boolean 
(For a <code>list</code>/<code>dict</code>, <code>False</code> if it is empty. For a number, <code>False</code> if it is 0)</p>
<p>then <code>and</code> is evaluated which always return a boolean.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is most certainly valid. </p>
<p>When we take a variable which has been assigned a value and perform the <strong>AND</strong> operation with another variable with a null (in python - None), the <strong>AND</strong> operation results in a <strong>None</strong>. Hence, the check can be made. To make my point clear, please refer below. </p>
<pre><code>a=2;c=None; b=11
if a and c is not None:
    print("T")
else:
    print("F")
</code></pre>
<p>and</p>
<pre><code>print(a and c)
</code></pre>
<p>results in <strong>None</strong></p>
<p>and </p>
<pre><code>print(a and b)
</code></pre>
<p>results in Non-null value - in our case <strong>11</strong></p>
</div>
<span class="comment-copy">Empty list evaluates to <code>False</code> doesn't it? It's not a <code>NoneType</code> I thought?</span>
<span class="comment-copy">I'm looking at the answers.. Somehow I read it  <code>if (a and b) is not None:</code> and imagined brackets which possibly are not there.</span>
<span class="comment-copy">@cardamom Correct, they are not there</span>
<span class="comment-copy">Thanks, those two links are very helpful. I wish people could just put in brackets though. That 'Operator precedence' table is worse than what we had to learn in arithmetic in school. I notice that PyCharm does not object if you do put in the (redundant) brackets, so it can't be bad style, not sure if it is good or bad.</span>
<span class="comment-copy">You're welcome. Well the operators precedence are in a table for every language (including the arithmetic), I'm not sure whether there is a user friendlier manner that they could be expressed as. I didn't see notes in the <i>PEP8</i> that would forbid redundant parentheses, but I think that it would make sense to have them where things are unclear.</span>
<span class="comment-copy">Minor titbit, <code>a is True</code> ==&gt; <code>a</code> is truthy</span>
<span class="comment-copy">@NickA Ha, yess</span>
<span class="comment-copy">The output of your last statement there was interesting.. I really thought that 'and' returned only True or False but looks like it works a bit differently, you just don't normally notice as it is in an 'if' statement.</span>
