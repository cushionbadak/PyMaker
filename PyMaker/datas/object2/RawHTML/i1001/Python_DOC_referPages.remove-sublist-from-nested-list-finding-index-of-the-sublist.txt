<div class="post-text" itemprop="text">
<p>I have a nested list like this:</p>
<pre><code>lists = [[['L', 5], ['B', 20], ['A', 10]], 
        [['B', 200], ['J', 90]], 
        [['L', 5], ['L', 6]], 
        [['A', 10], ['L', 12], ['A', 11], ['A', 15]]]
</code></pre>
<p>How can I remove sublists that have string which is not A,B,L(remove the whole sublist not only the list that not A,B,L)
How can I find the index of sublist that invalid items belong to (in this case is 1)(need the index for further task)</p>
<p>This is what I have tried, it can find invalid item but I do not know to find index of the sublist</p>
<pre><code>for j in range (len(lists)):
    for i in range (len(lists[j])):
        if lists[j][i][0] != 'L' and lists[j][i][0] != 'A' and lists[j][i][0] != 'B':
            return False
return True 
</code></pre>
<p>I want the result to be like this:</p>
<pre><code>lists = [[['L', 5], ['B', 20], ['A', 10]],  
        [['L', 5], ['L', 6]], 
        [['A', 10], ['L', 12], ['A', 11], ['A', 15]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can efficiently modify <code>lists</code> inplace using the reverse-delete idiom:</p>
<pre><code>keep = ('A', 'B', 'L')
for i in reversed(range(len(lists))):
    if any(l[0] not in keep for l in lists[i]):  
        del lists[i]

print(lists)
# [[['L', 5], ['B', 20], ['A', 10]],
#  [['L', 5], ['L', 6]],
#  [['A', 10], ['L', 12], ['A', 11], ['A', 15]]]
</code></pre>
<p><code>any</code> returns True if any of the sublists' first element is not in <code>keep</code>.</p>
<hr/>
<p>Alternatively, you can create a new list with a list comprehension:</p>
<pre><code>[l for l in lists if not any(l_[0] not in keep for l_ in l)]
# [[['L', 5], ['B', 20], ['A', 10]],
#  [['L', 5], ['L', 6]],
#  [['A', 10], ['L', 12], ['A', 11], ['A', 15]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/questions/54107494/remove-sublist-from-nested-list-finding-index-of-the-sublist/54107553#54107553">@coldspeed</a> suggests, using a set to check if the letters exists allows optimal O(1) lookups. </p>
<p>If you don't want to use any builtin functions like <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a>, first make a function that checks if the first letter of each sublists inner list exists:</p>
<pre><code>valid = {"A", "B", "L"}

def check_valid(sublst):
    for fst, *_ in sublst: 
        if fst not in valid:
            return False
    return True
</code></pre>
<p>Or without tuple unpacking if you prefer:</p>
<pre><code>def check_valid(sublst):
    for lst in sublst:
        if lst[0] not in valid:
            return False
    return True
</code></pre>
<p>Then you can reconstruct a new list with the incorrect lists filtered out:</p>
<pre><code>result = []
for sublst in lists:
    if check_valid(sublst):
        result.append(sublst)

print(result)
# [[['L', 5], ['B', 20], ['A', 10]], [['L', 5], ['L', 6]], [['A', 10], ['L', 12], ['A', 11], ['A', 15]]]
</code></pre>
<p>Or as a list comprehension:</p>
<pre><code>result = [sublst for sublst in lists if check_valid(sublst)]
print(result)
# [[['L', 5], ['B', 20], ['A', 10]], [['L', 5], ['L', 6]], [['A', 10], ['L', 12], ['A', 11], ['A', 15]]]
</code></pre>
<p><strong>Note:</strong> It is always better to use builtin functions for convenience, since it saves you having to reinvent the wheel and usually leads to shorter, more concise code. </p>
</div>
<span class="comment-copy">Thanks for your reply, but I cannot use built in function like set and reverse-delete. Can you please suggest another way to do this? Thanks</span>
<span class="comment-copy">@KiềuTrinhĐỗ There's nothing "builtin" about reverse delete. It is a loop, iterating in reverse. That's all. I have edited, can you look please?</span>
