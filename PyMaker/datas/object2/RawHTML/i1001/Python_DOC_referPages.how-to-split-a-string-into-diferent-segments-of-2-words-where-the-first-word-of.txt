<div class="post-text" itemprop="text">
<p>I am trying to figure out how to split a string into segments of 2 words where the first word of the second segment repeats the last word of the first. (in Python 2)For example, "hi i am a human named joe norman" should slit into "hi i", "i am", "am joe", "joe norman". I have the following code:</p>
<pre><code>txt = raw_input("")

newtxt = txt.split(" ")
</code></pre>
<p>the problem with this is that it splits txt by each space, not every other. I would like to use no libraries. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>:</p>
<pre><code>t = "hi i am a human named joe norman"
words = t.split()

result = list(zip(words, words[1:]))

for first, second in result:
    print("{} {}".format(first, second))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>hi i
i am
am a
a human
human named
named joe
joe norman
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Option with listcomp:</p>
<pre><code>s = "hi i am a human named joe norman"
s = s.split()

l = [f'{i} {s[num + 1]}' for num, i in enumerate(s)
    if num + 1 &lt; len(s)]

print(l) #['hi i', 'i am', 'am a', 'a human', 'human named', 'named joe', 'joe norman']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>for completeness, a few more options:</p>
<p>the first version is loosely based on <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools.pairwise</code></a>:</p>
<pre><code>def pairs1(words):
    w2 = iter(words)
    next(w2, None)
    return zip(words, w2)
</code></pre>
<p>it's nice because the slice (<code>words[1:]</code>) in Daniel's code above creates a copy of the <code>words</code> list which could be big, while all that is needed is an iterator at a "different" position</p>
<p>an another version using <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a>:</p>
<pre><code>def pairs2(words):
    for i in range(1, len(words)):
        yield (words[i-1], words[i])
</code></pre>
<p>which is similar to Mykola's but feels nicer to me.  Of course either could be rewritten to use list comprehensions, e.g:</p>
<pre><code>l = [f'{words[i-1]} {words[i]}' for i in range(1, len(words))]
</code></pre>
<p>is equivalent to:</p>
<pre><code>l = [f'{w} {x}' for w, x in pairs2(words)]
</code></pre>
</div>
<span class="comment-copy">Correct your example bud.</span>
