<div class="post-text" itemprop="text">
<p>I'm trying to determine how to use <code>re.sub</code> to replace the content of a capture group, but unfortunately, my brain is too small to understand <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">the API documentation for the <code>re.sub</code> function</a>.</p>
<p>So far I've managed to successfully isolate the string that I would like to replace using the <code>re.search</code> function, but the process of using the <code>re.sub</code> function's API properly escapes the past, present, and future capabilities of my fatally, and tragically flawed brain.</p>
<p>I'm able to select the string that I would like to replace using the <code>re.search</code> module:</p>
<pre><code>import re

RE_SELECT_CURSOR = re.compile(r'.*\(.*after:\s*(?:"*)([A-Za-z0-9\+\/\=]+)(?:"*)\s*\).*', flags=re.MULTILINE)

query = """
{{
    users(id: "{}") {{
        things(first: {}, after: null){{
            pageInfo {{
                startCursor endCursor hasNextPage
            }}
            edges {{
                node {{
                    id
                }}
            }}
        }}
    }}
}}
"""

#: Identifying the string that I would like to replace (i.e. the "cursor").
matches = re.search(RE_SELECT_CURSOR, query)
if matches:
    cursor = matches.group(1)
    print(cursor)
</code></pre>
<p>However, once I attempt to replace <code>null</code> with<code>hello</code>, my naïveté becomes readily apparent.</p>
<pre><code>#: Trying to replace the "cursor".
result = re.sub(RE_SELECT_CURSOR, "hello", query)
print(result)
</code></pre>
<p>This results in the following:</p>
<pre><code>{{
    users(id: "{}") {{
hello
            pageInfo {{
                startCursor endCursor hasNextPage
            }}
            edges {{
                node {{
                    id
                }}
            }}
        }}
    }}
}}
</code></pre>
<p>I have tried other approaches, but, none of them have worked - the proper usage of <code>re.sub</code> is painfully obvious, but, after reviewing dozens of examples, my brain simply doesn't have the processing power available to understand this.</p>
<p>One such approach was as follows, but, this is laughably incorrect, and I know that I should be embarrassed by my "attempt".</p>
<pre><code>RE_REPLACE_GROUP = '.*\(.*after:\s*(?:"*)("hello")(?:"*)\s*\).*'
result = re.sub(RE_SELECT_CURSOR, RE_REPLACE_GROUP, query)
</code></pre>
<p>Another approach was as follows, but it's also laughably incorrect.</p>
<pre><code>import re

RE_SELECT_CURSOR = re.compile(r'.*\(.*after:\s*(?:"*)([A-Za-z0-9\+\/\=]+)(?:"*)\s*\).*', flags=re.MULTILINE)

query = """
{{
    organization(id: "{}") {{
        assets(first: {}, after: null){{
            pageInfo {{
                startCursor endCursor hasNextPage
            }}
            edges {{
                node {{
                    id
                }}
            }}
        }}
    }}
}}
"""

#: Identifying the string that I would like to replace (i.e. the "cursor").
matches = re.search(RE_SELECT_CURSOR, query)
if matches:
    cursor = matches.group(1)
    query = query.replace("after: {}".format(cursor), "after: {}".format("hello"))
    print(query)
</code></pre>
<p>This resulted in the following:</p>
<pre><code>{{
    organization(id: "{}") {{
        assets(first: {}, after: hello){{
            pageInfo {{
                startCursor endCursor hasNextPage
            }}
            edges {{
                node {{
                    id
                }}
            }}
        }}
    }}
}}
</code></pre>
<p>The result is technically correct, but, it wouldn't tolerate spaces in the wrong place.</p>
<p>Any how I can replace <code>null</code> with <code>hello</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>When using <code>group(1)</code> you extract the group you're interested in, but when using <code>sub</code>, the match is <em>fully</em> replaced by the replacement. And since the start &amp; end of expression is used to match the context, when subbing, the whole match is replaced by <code>hello</code>; not just the group you're interested in.</p>
<p>One way is to create 3 groups, and on match replace the groups by original groups <code>\1</code> and <code>\3</code> and change the central one by <code>hello</code>, like this:</p>
<pre><code>import re

RE_SELECT_CURSOR = re.compile(r'(\(.*after:\s*"*)([A-Za-z0-9\+\/\=]+)("*\s*\))')  # you don't need MULTILINE flag or leading/trailing .* patterns

query = """
{{
    users(id: "{}") {{
        things(first: {}, after: null){{
            pageInfo {{
                startCursor endCursor hasNextPage
            }}
            edges {{
                node {{
                    id
                }}
            }}
        }}
    }}
}}
"""


result = re.sub(RE_SELECT_CURSOR, r"\1hello\3", query)
print(result)
</code></pre>
<p>prints:</p>
<pre><code>{{
    users(id: "{}") {{
        things(first: {}, after: hello){{
            pageInfo {{
                startCursor endCursor hasNextPage
            }}
            edges {{
                node {{
                    id
                }}
            }}
        }}
    }}
}}
</code></pre>
</div>
<span class="comment-copy">You will need to replace everything else you match with itself , or use lookbehind / lookahead. Usually it's easier to capture everything before and after your target, and replace the match with the before stuff, the new value and the after stuff.</span>
<span class="comment-copy">I'm not sure if I can add code to comments, but, I've updated my post with an attempt to replace <code>null</code> with <code>hello</code> in the original post - it's laughably incorrect, but, it's an attempt, at least.</span>
<span class="comment-copy">the group isn't the same thing as the match. When subbing, the whole match is replaced by hello; not just the group</span>
<span class="comment-copy">Ah, that's where my understanding was painfully, and fatally flawed...I'll have to do some research to see if I'll be able to use <code>re.sub</code> here...</span>
<span class="comment-copy">Awesome, thanks! In this case what are <code>\1</code> and <code>\3</code>? I thought that these were capture groups initially, but I only have 1 capture group in my regular expression.</span>
<span class="comment-copy">I have added 2 extra capture groups</span>
