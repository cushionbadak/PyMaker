<div class="post-text" itemprop="text">
<p>Suppose I have the following module:</p>
<p><strong>blah.py</strong></p>
<pre><code>a = 1
someDict = {'a' : 1, 'b': 2, 'c' : 3}
</code></pre>
<p>In the next python session I get the following:</p>
<pre><code>&gt;&gt;&gt; from blah import a, someDict
&gt;&gt;&gt; a
1
&gt;&gt;&gt; someDict
{'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; a = 100
&gt;&gt;&gt; someDict['a'] = 100
&gt;&gt;&gt; del a, someDict
&gt;&gt;&gt; from blah import a, someDict
&gt;&gt;&gt; a
1
&gt;&gt;&gt; someDict['a']
100
&gt;&gt;&gt; import blah
&gt;&gt;&gt; blah.someDict['a']
100
</code></pre>
<p>It appears that when I modify an object that I imported from another module, and then re-import that object, it recovers its original value expressed in the module. But this doesn't apply to values in a dictionary. If I want to recover the original value of <code>someDict</code> after making any modification, I have to close the current python session and open a new one. I find that this is even true if I merely called a function that modifies the dict elements.</p>
<p>Why does this happen? And is there some way I can re-import the dictionary with its original value without starting a new python session?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you denamespaced the <code>dict</code> (with <code>from x import y</code> syntax), you need to do this as a two-step process (three including the necessary imports):</p>
<ol>
<li>Do <code>import importlib, blah</code> to gain access to <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">the <code>reload</code> function</a>, and the actual module to call it on</li>
<li>Run <code>importlib.reload(blah)</code> to throw away the module cache of <code>blah</code>, and reread it afresh from disk (the fresh version is stored in the cache, so future <code>import</code>s related to <code>blah</code> see the new version)</li>
<li>Run <code>from blah import a, someDict</code> again to pull the refreshed contents of <code>blah</code></li>
</ol>
<p>The reason you didn't see a problem with <code>a</code> is that after doing <code>from blah import a</code>, <code>a</code> wasn't special; <code>__main__.a</code> was just another alias to <code>blah.a</code>, but since <code>a = 100</code> <em>rebinds</em> <code>a</code> to a completely new <code>int</code> anyway (and since <code>int</code>s are immutable, even <code>a += 100</code> would actually perform a rebinding), you never changed <code>blah.a</code> (you'd have to explicitly do <code>import blah</code>, <code>blah.a = 100</code> to have that happen).</p>
<p><code>someDict</code> was a problem because, like <code>a</code>, <code>__main__.someDict</code> and <code>blah.someDict</code> end up as aliases of the same <code>dict</code>, and you <em>mutate</em> that <code>dict</code>, you're not rebinding <code>__main__.someDict</code> itself. If you want to avoid mutating <code>blah</code>'s values in the first place, make sure the first modification to <code>someDict</code> rebinds it to a fresh <code>dict</code>, rather than modifying the one it's sharing with <code>blah</code>, e.g. instead of:</p>
<pre><code>someDict['a'] = 100
</code></pre>
<p>do:</p>
<pre><code>someDict = {**someDict, 'a': 100}
</code></pre>
<p>to make a fresh <code>dict</code> with a copy of <code>blah.someDict</code>, but with the value of <code>'a'</code> in it replaced with a new value.</p>
</div>
<span class="comment-copy">This is the standard Python difference between <i>rebinding</i> (which you do to <code>a</code>) and <i>mutating</i> (which you do to <code>someDict</code>.</span>
<span class="comment-copy">"It appears that when I modify an object that I imported from another module, and then re-import that object, it recovers its original value expressed in the module" - no, it doesn't. <code>a = 100</code> doesn't modify any objects.</span>
<span class="comment-copy">You only ever modify the <i>dict object</i>, you <i>cannot modify an <code>int</code> object</i>. You are merely assigning another value to the name <code>a</code> in the current module's namespace. That isn't mutation. Read the following: <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a></span>
<span class="comment-copy">I find it potentially confusing to refer mention immutability in this context; the issue is about rebinding, which you could just as easily do to a mutable object (eg if OP had done <code>someDict = {}</code>.</span>
<span class="comment-copy">@DanielRoseman: Yeah. I debated whether to keep that bit in there. I decided to leave it because there are cases where the mutability matters, e.g. <code>x = SOMETHING</code>, <code>y = x</code>, <code>y += z</code> only mutates <code>x</code> if <code>SOMETHING</code> is a mutable type like <code>list</code>, but not for immutable types like <code>int</code>. Admittedly a bit of a tangent from the OP's specific problem. I decided to rephrase to point out that a += 100 would still have rebound due to immutability, but only as a parenthetical, with the rebinding itself being the actual cause.</span>
<span class="comment-copy">Thanks! Both the proactive and post hoc measures worked for me. And I found the explanation very helpful, including the part about immutable types.</span>
