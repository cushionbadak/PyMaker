<div class="post-text" itemprop="text">
<p>I have to generate all the possible binary representations of a given string, where some characters are "?" and others are 1 or 0.</p>
<p>I'm trying to do a recursive search but I encounter some weird problems I can't figure out.</p>
<pre><code>userInput = list(input())
anslist = []
def fill(inp):
    #print(inp)
    if inp.count("?") == 0:
        print(inp, "WAS ADDED")
        anslist.append(inp)
        return


    for a in range(0, len(userInput)):
        if inp[a] == "?":
            inp[a] = 1
            fill(inp)
            inp[a] = 0
            fill(inp)
            return
print(anslist)   
</code></pre>
<p>For the input ?01?1 I should be getting:
00101, 00111, 10101 and 10111
but I get 
10111
10101
00101 printed out. In addition, anslist isn't working properly. I just can't seem to figure this out.</p>
</div>
<div class="post-text" itemprop="text">
<p>a <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a> is a <em>mutable</em> type, that means that you only have <strong>one</strong> list on which all modifications are made. This causes your first call <code>fill(inp)</code> to also fill the remaining '?' in <code>inp</code>, thus only giving you one result with the second option for the first ? (first ?=1: two results, first ?=0: one result because the last result of the first ? is still saved in the list)</p>
<p>To resolve this problem, use <code>list.copy()</code>. This will pass a copy of the list to <code>fill()</code> and thus cause the original list to be left as it is.</p>
<p>Your complete code with <code>.copy()</code> and other minor modifications:</p>
<pre><code>anslist = []
def fill(inp):
    if inp.count("?") == 0:
        print(inp, "WAS ADDED")
        anslist.append(inp)
        return

    for a in range(len(inp)):  # range(0, x) is equivalent to range(x); try to limit global variables
        if inp[a] == "?":
            inp[a] = 1
            fill(inp.copy())  # list is mutable
            inp[a] = 0
            fill(inp.copy())  # see above
            return
user_input = list(input())
fill(user_input)
print(anslist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's example solution without using builtin tools. Here we use recursion, when we occur '?' during iterating over our input we replace it with '0' and '1' and add result of <code>fill()</code> of what's after current index.</p>
<pre><code>userInput = input()

def fill(inp):
    ret = []
    for idx, i in enumerate(inp):
        if i == '?':
            for rest in fill(inp[idx+1:]):
                ret.append(inp[:idx] + '0' + rest)
                ret.append(inp[:idx] + '1' + rest)
            break
    else:
        return [inp]
    return ret

print(fill(userInput))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>?01?1 -&gt; ['00101', '10101', '00111', '10111']
???   -&gt; ['000', '100', '010', '110', '001', '101', '011', '111']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
import re

inp = "?01?1"
for combination in itertools.product("01", repeat=inp.count("?")):
    i_combination = iter(combination)
    print(re.sub("\?",lambda m: next(i_combination),inp))
</code></pre>
<p>this just uses the builtin <code>itertools.product</code> to create all possible strings of "01" of length N(however many question-marks there are in the string)</p>
<p>then it converts each one of those into an iterator where each item is consumed as soon as it is seen, </p>
<p>then we use <code>re.sub</code> to substitute our products into our original strings, in place of our question-marks</p>
<p>here it is in a repl <a href="https://repl.it/@JoranBeasley/AssuredAncientOpengroup" rel="nofollow noreferrer">https://repl.it/@JoranBeasley/AssuredAncientOpengroup</a></p>
<p>I see in a comment here you dont want to use builtins ... so nevermind then i guess</p>
<p>if you do not want to use builtin itertools.product .. .simply write your own</p>
<pre><code>def my_product(s,r):
  if r &lt; 1:
    yield ""
  for i in range(r):
    for c in s:
      for partial in  my_product(s,r-1):
        yield c+partial
</code></pre>
<p>same with built in iter</p>
<pre><code>def my_iter(s):
    for c in s:
        yield c
</code></pre>
<p>and lastly we need to write our own custom subber</p>
<pre><code>def my_substitute(s,replacement):
    iter_replacement = my_iter(replacement)
    while s.count("?"):
         s = s.replace("?",next(iter_replacement))
    return s
</code></pre>
<p>now we tie it all together in the same way</p>
<pre><code>inp = "?01?1"
for combination in my_product("01", inp.count("?")):
    print(my_substitute(inp,combination))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution that avoids using a global or a library:</p>
<pre><code>def fill(digits):

    if not digits:
        return []

    first, *rest = digits

    strings = fill(rest) if rest else ['']

    if first == '?':
        return ['0' + string for string in strings] + ['1' + string for string in strings]

    return [first + string for string in strings]

userInput = input()

print(fill(userInput))
</code></pre>
<p>Tries to <em>spell things out</em> rather than make the most efficient array operations, which is left as an exercise for the OP.</p>
<p><strong>OUTPUT</strong></p>
<pre><code>&gt; python3 test.py
?01?1
['00101', '00111', '10101', '10111']
&gt; python3 test.py
???
['000', '001', '010', '011', '100', '101', '110', '111']
&gt; python3 test.py
?
['0', '1']
&gt; python3 test.py

[]
&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sample python code using <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a> (you can use an equivalent implementation but this is fine)</p>
<pre><code>from itertools import product

def generate_combinations(inp):
   count = 0 
   for a in range(0, len(inp)):
      if inp[a] == "?": count += 1
   combinations = []
   for comb in product(range(2), repeat=count):
      pos = 0
      cinp = inp[:]
      for a in range(len(cinp)):
         if cinp[a] == '?':
           cinp[a] = str(comb[pos])
           pos += 1
       combinations.append(cinp)
    return combinations
</code></pre>
<p>example usage:</p>
<pre><code>print(generate_combinations('?01?1'))
</code></pre>
</div>
<span class="comment-copy">use python <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow noreferrer">itertools.product</a> to generate all combinations of 1 and 0 for all ? positions and one by one assign to an array and push to anslist</span>
<span class="comment-copy">if you dont want to use itertools.product you can use nested loops (for fixed number of positions)or more generaly recursion</span>
<span class="comment-copy">I don't want to use builtin tools. Also, I can't know the amount of elements (=amount of loops) so recursion is the way to go.</span>
<span class="comment-copy">@PatrickArtner nope, I'm here to learn.</span>
<span class="comment-copy">this is quite nice :)</span>
<span class="comment-copy">Seeing how good your answer is I wanted to delete mine :D but I'm glad to hear that :)</span>
