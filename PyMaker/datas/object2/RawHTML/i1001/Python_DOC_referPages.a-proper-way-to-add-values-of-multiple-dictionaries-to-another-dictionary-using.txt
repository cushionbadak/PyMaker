<div class="post-text" itemprop="text">
<p>I want to add 3 different <code>values</code> of 3 different dictionaries to 1 "all_in_one" dictionary based on the same <code>key</code>.</p>
<p>I have 3 big dictionaries based on the same text corpora (each of the files in it contains the <code>values</code> from the same line -- multiple lines, actually -- of these files, but different columns of them). All 3 dictionaries have the same <code>key</code>.</p>
<p>They look like this:</p>
<pre><code>tokens = {"token1": 10, "token2": 56, "token3": 90, ...}

lemmas = {"token1": "lemma1", "token2": "lemma2", "token2": "lemma3", ...}

categs = {"token1": "categX", "token2": "categY", "token3": "categZ", ...}
</code></pre>
<p>I want to add these values to another dictionary to have it look like this:</p>
<pre><code>all_in_one = {"token1": [tokens[value1], lemmas[value1], categs[value1]],
              "token2": [tokens[value2], lemmas[value2], categs[value2]], ... } 
</code></pre>
<p>I have such a loop:</p>
<pre><code>all_in_one = {}

for tk, tv in tokens.items():
    for lk, lv in lemmas.items():
        for ck, cv in categs.items():
            if tk == lk == ck:
                all_in_one[tk] = [tv, lv, cv]
</code></pre>
<p>The problem is, it works (don't know if it's fine), but with small amount of files. I have 500k files. Haven't tried to run it with the final corpora, because even the first try with 100 files took a few hours and haven't finished (100 files = 6500 tokens, so I assume it's 6500^3 loops...). I've only tested it with 10 and 20 files.</p>
<p>Is it even a proper loop for doing this (adding values of 3 dics into another dic)? If yes (I doubt, based on the time needed), maybe there's a way to optimize it?</p>
</div>
<div class="post-text" itemprop="text">
<p>My answer assumes that all three dictionaries have <strong>equal and exact same keys</strong>. In that case, I don't think you need 3 for loops here. You just need a single for loop. Since the keys are the same, and you only need to club together the values of same keys, you can simply loop over any one of the dictionary's keys and do</p>
<pre><code>all_in_one = {}

for tk, tv in tokens.items():
    all_in_one[tk] = [tv, lemmas[tk], categs[tk]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since keys are identical across all dictionaries, you can use a dictionary comprehension iterating over the keys of <em>any one</em> of those dictionaries. To reduce repeated logic, you can use <code>operator.itemgetter</code>:</p>
<pre><code>from operator import itemgetter

tokens = {"token1": 10, "token2": 56, "token3": 90}
lemmas = {"token1": "lemma1", "token2": "lemma2", "token3": "lemma3"}
categs = {"token1": "categX", "token2": "catehY", "token3": "categZ"}

all_in_one = {k: list(map(itemgetter(k), (tokens, lemmas, categs))) for k in tokens}

# {'token1': [10, 'lemma1', 'categX'],
#  'token2': [56, 'lemma2', 'catehY'],
#  'token3': [90, 'lemma3', 'categZ']}
</code></pre>
<p>Other alternatives include defining a list explicitly <em>or</em> using a list comprehension:</p>
<pre><code># define list explicitly
all_in_one = {k: [tokens[k], lemmas[k], categs[k]] for k in tokens}

# use list comprehension
all_in_one = {k: [lst[k] for lst in (tokens, lemmas, categs)] for k in tokens}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the keys between all three dictionaries are not the same, you can use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> here:</p>
<pre><code>from collections import defaultdict

tokens = {"token1": 10, "token2": 56, "token3": 90}

lemmas = {"token1": "lemma1", "token2": "lemma2", "token3": "lemma3"}

categs = {"token1": "categX", "token2": "catehY", "token3": "categZ"}

result = defaultdict(list)
for d in (tokens, lemmas, categs):
    for k, v in d.items():
        result[k].append(v)

print(result)
# defaultdict(&lt;class 'list'&gt;, {'token1': [10, 'lemma1', 'categX'], 'token2': [56, 'lemma2', 'catehY'], 'token3': [90, 'lemma3', 'categZ']})
</code></pre>
<p>Additionally, You can condense the above with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> as well:</p>
<pre><code>from itertools import chain

for k, v in chain(tokens.items(), lemmas.items(), categs.items()):
    result[k].append(v)

print(result)
# defaultdict(&lt;class 'list'&gt;, {'token1': [10, 'lemma1', 'categX'], 'token2': [56, 'lemma2', 'catehY'], 'token3': [90, 'lemma3', 'categZ']})
</code></pre>
<p>You can also extract the same keys with set intersection:</p>
<pre><code>{k: [tokens.get(k), lemmas.get(k), categs.get(k)] for k in tokens.keys() &amp; lemmas.keys() &amp; categs.keys()}
</code></pre>
<p>Which also prevents <code>KeyError</code> from being raised if the dictionaries for some reason don't have the same keys. </p>
</div>
<span class="comment-copy">Is it possible and what should happen if some keys are not present in all dicts?</span>
<span class="comment-copy">@buran, OP has specified <code>All 3 dictionaries have the same key</code>, but RoadRunner's answer covers the case where this assumption is relaxed.</span>
<span class="comment-copy">In the above case they all are present in all 3 dictionaries, but your question made me think that I constructed it not properly. I think I need to rewrite it, so lemmas are the key values, and the <code>lemmas</code> dictionary should include nested dictionary of tokens for each lemma with each token occurrences... Thank you!</span>
<span class="comment-copy">@jpp, sorry, but "all dictionaries have the same keys" doesn't mean also "and only these/same keys". When I asked the question RoadRunner's answer was not present.</span>
<span class="comment-copy">@buran, Fair enough, all the answers state the underlying assumption(s), so I don't think we are losing (much) in translation.</span>
<span class="comment-copy">Thank you, this solution works very fast (as well as the below one, thank you @jpp). My loop was obviously a newbie one. Still I need to rewrite whole thing as mentioned in the comment below @buran's comment.</span>
<span class="comment-copy">You are welcome :)</span>
<span class="comment-copy">Worth pointing out this is the best answer if the keys in your dictionaries are not always equal.</span>
<span class="comment-copy">@jpp I've included a set intersection example that also works if the keys are the same. I overlooked the <i>All 3 dictionaries have the same key</i> assumption made by the OP.</span>
<span class="comment-copy">If all keys are the same, there's no need to take the intersection, just iterate over one of the dictionaries (any one would do).</span>
<span class="comment-copy">@jpp That is true, but if for some reason not all dictionaries have the same keys, using that approach will raise a <code>KeyError</code>.</span>
