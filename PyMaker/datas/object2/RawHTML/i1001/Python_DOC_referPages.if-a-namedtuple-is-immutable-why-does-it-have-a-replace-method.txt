<div class="post-text" itemprop="text">
<p>Please consider this code:</p>
<pre><code>&gt;&gt;&gt; point = namedtuple('point', ('x', 'y'))
&gt;&gt;&gt; p1 = point(3,4)
point(x=3, y=4)
&gt;&gt;&gt; id(p1)
2881782633456  # address in memory

&gt;&gt;&gt; p1._replace(x = 78)
point(x=78, y=4)
&gt;&gt;&gt; id(p1)
2881782633456  # same as before. 
</code></pre>
<p>Seems like i mutated the <code>namedtuple</code> in-place i.e. it is a mutable object. But it says everywhere that <code>tuple</code>s and <code>namedtuple</code>s are both immutable objects. I am confused. </p>
<p>Furthermore, if it is an immutable object, why does it have a <code>_replace</code> method? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>Tuple</code> is definitely immutable. If you print the p1, its same even after <code>_replace</code> function. </p>
<pre><code>&gt;&gt;&gt; point = namedtuple('point', ('x', 'y'))
&gt;&gt;&gt; p1 = point(3,4)
&gt;&gt;&gt; p1
point(x=3, y=4)   #same before _replace
&gt;&gt;&gt; p1._replace(x = 78)
point(x=78, y=4)
&gt;&gt;&gt; p1
point(x=3, y=4)  #same after _replace
</code></pre>
<p><em>why do you have _replace then?</em>
It aims to return a new instance of the named tuple replacing specified fields with new values. It does not mutate the actual tuple itself. The operation is short lived.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you didn't assign it back, so replace this line:</p>
<pre><code>p1._replace(x = 78)
</code></pre>
<p>With:</p>
<pre><code>pi = p1._replace(x = 78)
</code></pre>
<p>For it to be different.</p>
</div>
<div class="post-text" itemprop="text">
<p>The _replace method creates a new namedtuple, it doesn't mutate the original, so immutability is preserved.</p>
<p>From the <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._replace" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Return a new instance of the named tuple replacing specified fields with new values</p>
</blockquote>
</div>
<span class="comment-copy">You didn't even check to see if you'd mutated <code>p1</code>. This is the same behavior you'd see with, say, <code>str.replace</code>, which also doesn't mutate anything.</span>
<span class="comment-copy">Methods that mutate the object in-place return <code>None</code> by convention; the fact that you see a <code>point</code> returned from the method call should suggest that a new object has been created.</span>
