<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/39980323/are-dictionaries-ordered-in-python-3-6">Are dictionaries ordered in Python 3.6+?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Explaining this could be hard. I have a very long and complicated script. The final product of this script is a nested dictionary (normal dict, not <code>OrderedDict</code>).</p>
<p>What I cannot explain is that when I run the script on a local machine, the dictionary has always the same structure (keys, values and nested keys and values). When I run the same script on a server I don't get any error, but the dictionary structure changes every time (randomly). Keys are always in a different position and so nested keys and values.</p>
<p>Any ideas why this is happening?</p>
<p>Can it be a different python version? On the local machine python3.6 and on the server 3.5</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, see <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">here</a> (under <code>.values()</code>):</p>
<blockquote>
<p>Changed in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.</p>
</blockquote>
</div>
<span class="comment-copy">and potentially <a href="https://stackoverflow.com/q/30585108/1358308">stackoverflow.com/q/30585108/1358308</a> as you're using older versions of Python</span>
<span class="comment-copy">Yes, Python dictionaries before Python 3.7 are <i>inherently</i> unordered. In Python 3.6, insertion order was an implementation detail, and in 3.7+ it is part of the standard.</span>
<span class="comment-copy">thanks! I was not aware of this!</span>
