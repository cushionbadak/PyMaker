<div class="post-text" itemprop="text">
<p>I'm learning Data Structures and Algorithms with Python. For the textbook I'm using, I revisited an issue I never understood. For the following user-built Range class, why does something like [x for x in Range(0,5)] work? Essentially, why does the index move automatically? There are no calls to getitem or len.</p>
<p>I've read the Python tutorial and the class section, and haven't been able to figure this out.</p>
<pre><code>class Range:
  """A class that mimic's the built-in range class."""

  def __init__(self, start, stop=None, step=1):
    """Initialize a Range instance.

    Semantics is similar to built-in range class.
    """
    if step == 0:
      raise ValueError('step cannot be 0')

    if stop is None:                  # special case of range(n)
      start, stop = 0, start          # should be treated as if range(0,n)

    # calculate the effective length once
    self._length = max(0, (stop - start + step - 1) // step)

    # need knowledge of start and step (but not stop) to support __getitem__
    self._start = start
    self._step = step

  def __len__(self):
    """Return number of entries in the range."""
    return self._length

  def __getitem__(self, k):
    """Return entry at index k (using standard interpretation if negative)."""
    if k &lt; 0:
      k += len(self)                  # attempt to convert negative index

    if not 0 &lt;= k &lt; self._length:
      raise IndexError('index out of range')

    return self._start + k * self._step
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because the Range class is implementing all that is necessary to be a valid <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a>, namely the <code>__len__</code> and <code>__getitem__</code> methods. This allows it to be used as an iterable automatically as described in <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p>Iterables can be used in a for loop and in many other places where a
  sequence is needed (zip(), map(), â€¦). When an iterable object is
  passed as an argument to the built-in function iter(), it returns an
  iterator for the object. This iterator is good for one pass over the
  set of values. When using iterables, it is usually not necessary to
  call iter() or deal with iterator objects yourself. The for statement
  does that automatically for you, creating a temporary unnamed variable
  to hold the iterator for the duration of the loop. See also iterator,
  sequence, and generator.</p>
</blockquote>
</div>
<span class="comment-copy">A note: While <code>__getitem__</code> is enough, for efficiency's sake, implementing <code>__iter__</code> as well, as a generator function, is usually a good idea; all the bounds checking and repeated recalculation involved in <code>__getitem__</code> makes it much slower than any reasonably implemented <code>__iter__</code>. In local tests, a <code>while</code> loop based generator <code>__iter__</code> cut runtime by roughly two-thirds for larger ranges, and by half even for small ranges. Mind you, actual <code>range</code> takes one tenth the time of even the <code>__iter__</code> based reimplementation, so use the included batteries when it's not a class exercise. :-)</span>
<span class="comment-copy">Actually, <code>__getitem__</code> alone is enough to be iterable; it will call <code>__getitem__</code> with <code>0</code>, the <code>1</code>, then <code>2</code>, etc., until <code>__getitem__</code> raises <code>IndexError</code> (which it suppresses, silently ending iteration; any other exception bubbles normally). <code>__len__</code> is not required, nor is it used even if it exists. As your own link notes, iterables are "objects of any classes you define with an <code>__iter__()</code> method or with a <code>__getitem__()</code> method that implements Sequence semantics." (where Sequence semantics just means indexed from 0 on up, raising <code>IndexError</code> on out of bounds access).</span>
<span class="comment-copy">@shadowranger what time zone are you on?</span>
<span class="comment-copy">@roganjosh: UTC-5. But I post at random hours as a way to mind cleanse when I'm having trouble focusing on real work. :-)</span>
