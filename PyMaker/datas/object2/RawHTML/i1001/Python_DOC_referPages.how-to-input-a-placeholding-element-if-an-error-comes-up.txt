<div class="post-text" itemprop="text">
<p>Today, I came across the <code>dict</code> method <code>get</code> which, given a key in the dictionary, returns the associated value.</p>
<p>For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do <code>dict[key]</code>, and it returns the same thing:</p>
<pre><code>dictionary = {"Name": "Harry", "Age": 17}
dictionary["Name"]
dictionary.get("Name")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It allows you to provide a default value if the key is missing:</p>
<pre><code>dictionary.get("bogus", default_value)
</code></pre>
<p>returns <code>default_value</code> (whatever you choose it to be), whereas</p>
<pre><code>dictionary["bogus"]
</code></pre>
<p>would raise a <code>KeyError</code>.  </p>
<p>If omitted, <code>default_value</code> is <code>None</code>, such that</p>
<pre><code>dictionary.get("bogus")  # &lt;-- No default specified -- defaults to None
</code></pre>
<p>returns <code>None</code> just like </p>
<pre><code>dictionary.get("bogus", None)
</code></pre>
<p>would. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>What is the <code>dict.get()</code> method?</strong></p>
</blockquote>
<p>As already mentioned the <code>get</code> method contains an additional parameter which indicates the missing value. <a href="https://docs.python.org/3/library/stdtypes.html#dict.get">From the documentation</a></p>
<blockquote>
<pre><code>get(key[, default])
</code></pre>
<p>Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a <code>KeyError</code>.</p>
</blockquote>
<p>An example can be </p>
<pre><code>&gt;&gt;&gt; d = {1:2,2:3}
&gt;&gt;&gt; d[1]
2
&gt;&gt;&gt; d.get(1)
2
&gt;&gt;&gt; d.get(3)
&gt;&gt;&gt; repr(d.get(3))
'None'
&gt;&gt;&gt; d.get(3,1)
1
</code></pre>
<blockquote>
<p><strong>Are there speed improvements anywhere?</strong></p>
</blockquote>
<p>As mentioned <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips">here</a>,</p>
<blockquote>
<p>It seems that all three approaches now exhibit similar performance (within about 10% of each other), more or less independent of the properties of the list of words.</p>
</blockquote>
<p>Earlier <code>get</code> was considerably slower, However now the speed is almost comparable along with the additional advantage of returning the default value. But to clear all our queries, we can test on a fairly large list (Note that the test includes looking up all the valid keys only)</p>
<pre><code>def getway(d):
    for i in range(100):
        s = d.get(i)

def lookup(d):
    for i in range(100):
        s = d[i]
</code></pre>
<p>Now timing these two functions using <a href="https://docs.python.org/3/library/timeit.html"><code>timeit</code></a></p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; print(timeit.timeit("getway({i:i for i in range(100)})","from __main__ import getway"))
20.2124660015
&gt;&gt;&gt; print(timeit.timeit("lookup({i:i for i in range(100)})","from __main__ import lookup"))
16.16223979
</code></pre>
<p>As we can see the lookup is faster than the get as there is no function lookup. This can be seen through <a href="https://docs.python.org/3/library/dis.html"><code>dis</code></a></p>
<pre><code>&gt;&gt;&gt; def lookup(d,val):
...     return d[val]
... 
&gt;&gt;&gt; def getway(d,val):
...     return d.get(val)
... 
&gt;&gt;&gt; dis.dis(getway)
  2           0 LOAD_FAST                0 (d)
              3 LOAD_ATTR                0 (get)
              6 LOAD_FAST                1 (val)
              9 CALL_FUNCTION            1
             12 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(lookup)
  2           0 LOAD_FAST                0 (d)
              3 LOAD_FAST                1 (val)
              6 BINARY_SUBSCR       
              7 RETURN_VALUE  
</code></pre>
<blockquote>
<p><strong>Where will it be useful?</strong></p>
</blockquote>
<p>It will be useful whenever you want to provide a default value whenever you are looking up a dictionary. This reduces</p>
<pre><code> if key in dic:
      val = key[dic]
 else:
      val = def_val
</code></pre>
<p>To a single line, <code>val = dic.get(key,def_val)</code></p>
<blockquote>
<p><strong>Where will it be NOT useful?</strong></p>
</blockquote>
<p>Whenever you want to return a <code>KeyError</code> stating that the particular key is not available. Returning a default value also carries the risk that a particular default value may be a key too! </p>
<blockquote>
<p><strong>Is it possible to have <code>get</code> like feature in <code>dict['key']</code>?</strong></p>
</blockquote>
<p>Yes! We need to implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__missing__"><code>__missing__</code></a> in a dict subclass.</p>
<p>A sample program can be</p>
<pre><code>class MyDict(dict):
    def __missing__(self, key):
        return None
</code></pre>
<p>A small demonstration can be</p>
<pre><code>&gt;&gt;&gt; my_d = MyDict({1:2,2:3})
&gt;&gt;&gt; my_d[1]
2
&gt;&gt;&gt; my_d[3]
&gt;&gt;&gt; repr(my_d[3])
'None'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>get</code> takes a second optional value.  If the specified key does not exist in your dictionary, then this value will be returned.</p>
<pre><code>dictionary = {"Name": "Harry", "Age": 17}
dictionary.get('Year', 'No available data')
&gt;&gt; 'No available data'
</code></pre>
<p>If you do not give the second parameter, <code>None</code> will be returned.</p>
<p>If you use indexing as in <code>dictionary['Year']</code>, nonexistent keys will raise <code>KeyError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I will give a practical example in scraping web data using python, a lot of the times you will get keys with no values, in those cases you will get errors if you use dictionary['key'], whereas dictionary.get('key', 'return_otherwise') has no problems.</p>
<p>Similarly, I would use ''.join(list) as opposed to list[0] if you try to capture a single value from a list.</p>
<p>hope it helps.</p>
<p>[Edit] Here is a practical example:</p>
<p>Say, you are calling an API, which returns a JOSN file you need to parse. The first JSON looks like following:</p>
<pre><code>{"bids":{"id":16210506,"submitdate":"2011-10-16 15:53:25","submitdate_f":"10\/16\/2011 at 21:53 CEST","submitdate_f2":"p\u0159ed 2 lety","submitdate_ts":1318794805,"users_id":"2674360","project_id":"1250499"}}
</code></pre>
<p>The second JOSN is like this:</p>
<pre><code>{"bids":{"id":16210506,"submitdate":"2011-10-16 15:53:25","submitdate_f":"10\/16\/2011 at 21:53 CEST","submitdate_f2":"p\u0159ed 2 lety","users_id":"2674360","project_id":"1250499"}}
</code></pre>
<p>Note that the second JSON is missing the "submitdate_ts" key, which is pretty normal in any data structure.</p>
<p>So when you try to access the value of that key in a loop, can you call it with the following:</p>
<pre><code>for item in API_call:
    submitdate_ts = item["bids"]["submitdate_ts"]
</code></pre>
<p>You could, but it will give you a traceback error for the second JSON line, because the key simply doesn't exist.</p>
<p>The appropriate way of coding this, could be the following:</p>
<pre><code>for item in API_call:
    submitdate_ts = item.get("bids", {'x': None}).get("submitdate_ts")
</code></pre>
<p>{'x': None} is there to avoid the second level getting an error. Of course you can build in more fault tolerance into the code if you are doing scraping. Like first specifying a if condition</p>
</div>
<div class="post-text" itemprop="text">
<p>The purpose is that you can give a default value if the key is not found, which is very useful</p>
<pre><code>dictionary.get("Name",'harry')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>For what purpose is this function useful?</p>
</blockquote>
<p>One particular usage is counting with dictionary. Let's assume you want to count a number of occurrences of each element in a given list. The common way to do so is to make a dictionary where keys are elements and values are the number of occurrences.</p>
<pre><code>fruits = ['apple', 'banana', 'peach', 'apple', 'pear']
d = {}
for fruit in fruits:
    if fruit not in d:
        d[fruit] = 0
    d[fruit] += 1
</code></pre>
<p>Using the .get() method you can make this code more compact and clear:</p>
<pre><code>for fruit in fruits:
      d[fruit] = d.get(fruit, 0) + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why dict.get(key) instead of dict[key]?</p>
</blockquote>
<h3>0. Summary</h3>
<p>Comparing to <code>dict[key]</code>, <code>dict.get</code> provides a fallback value when looking up for a key.</p>
<h3>1. Definition</h3>
<p>get(key[, default])   <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">4. Built-in Types â€” Python 3.6.4rc1 documentation</a> </p>
<p>Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.</p>
<pre><code>d = {"Name": "Harry", "Age": 17}
In [4]: d['gender']
KeyError: 'gender'
In [5]: d.get('gender', 'Not specified, please add it')
Out[5]: 'Not specified, please add it'
</code></pre>
<h3>2. Problem it solves.</h3>
<p>If without <code>default value</code>, you have to write cumbersome codes to handle such an exception.</p>
<pre><code>def get_harry_info(key):
    try:
        return "{}".format(d[key])
    except KeyError:
        return 'Not specified, please add it'
In [9]: get_harry_info('Name')
Out[9]: 'Harry'
In [10]: get_harry_info('Gender')
Out[10]: 'Not specified, please add it'
</code></pre>
<p>As a convenient solution, <code>dict.get</code> introduces an optional default value avoiding above unwiedly codes.</p>
<h3>3. Conclusion</h3>
<p><code>dict.get</code> has an additional default value option to deal with exception if key is absent from the dictionary</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on usage should use this <code>get</code> method.</p>
<p><strong>Example1</strong></p>
<pre><code>In [14]: user_dict = {'type': False}

In [15]: user_dict.get('type', '')

Out[15]: False

In [16]: user_dict.get('type') or ''

Out[16]: ''
</code></pre>
<p><strong>Example2</strong></p>
<pre><code>In [17]: user_dict = {'type': "lead"}

In [18]: user_dict.get('type') or ''

Out[18]: 'lead'

In [19]: user_dict.get('type', '')

Out[19]: 'lead'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p><code>dict.get</code> will default return nothing if the key doesn't exist, but if you put second argument of it, it will return that if the key does not exist.</p></li>
<li><p>OTOH <code>dict[key]</code> will raise <code>KeyError</code> if key does not exist.</p></li>
</ul>
<p>Here is an example (read comments):</p>
<pre><code>&gt;&gt;&gt; d={'a':[1,2,3],'b':[4,5,6]} # Create a dictionary
&gt;&gt;&gt; d['c'] # Hoops, error key does not exist
Traceback (most recent call last):
  File "&lt;pyshell#7&gt;", line 1, in &lt;module&gt;
    d['c']
KeyError: 'c'
&gt;&gt;&gt; d.get('c') # no error because of `get`, so nothing returned
&gt;&gt;&gt; print(d.get('c')) # i print it, oh `None` is the output
None
&gt;&gt;&gt; d.get('c',100) # Okay now i set second argument's value to `100`, hoopa output is `100`
100
&gt;&gt;&gt; d['a'] # Works, key exist
[1, 2, 3]
&gt;&gt;&gt; d.get('a') # work too, key exist
[1, 2, 3]
</code></pre>
</div>
<span class="comment-copy"><code>dictionary["foo"]</code> and <code>dictionary.get("foo")</code> behave differently, though.</span>
<span class="comment-copy"><code>dictionary.get("sex")</code>  is same as  writing <code>dictionary["sex"] or None</code>  so it implicitly handles KeyError exception</span>
<span class="comment-copy">@yosemite_k I may be missing some context here, but <code>dictionary['non-existent key'] or None</code> should and does still raise a <code>KeyError</code> for me (up to v3.6). Can you explain what you mean?</span>
<span class="comment-copy">@nivk  dictionary['non-existent key'] raises error, and that error should be explicitly handled. if instead you use dictionary.get() (which literally functions as  dictionary['non-existent key'] or None ) that exception is implicitly handled.</span>
<span class="comment-copy">Which is actually the same as <code>dictionary.get("bogus")</code>. I'm sure you're aware of that but it might be interesting to other readers :)</span>
<span class="comment-copy">@John No, the value will be returned, but it will not modify the <code>dict</code>. Note that if you are using this functionality a lot, a <code>collections.defaultdict</code> might be more appropriate.</span>
<span class="comment-copy">@John: What you describe is what <code>setdefault</code> does (a very similar method that behaves just like <code>get</code> but also saves the value).</span>
<span class="comment-copy">@MustafaS: If <code>"bogus"</code> is a key in <code>dictionary</code> and <code>dictionary.get("bogus")</code> returns a value which evaluates to False in a boolean context (i.e. a Falsey value), such as 0 or an empty string, <code>''</code>, then <code>dictionary.get("bogus") or my_default</code> would evaluate to <code>my_default</code> whereas <code>dictionary.get("bogus", my_default)</code> would return the Falsey value. So no, <code>dictionary.get("bogus") or my_default</code> is not equivalent to <code>dictionary.get("bogus", my_default)</code>. Which to use depends on the behavior you desire.</span>
<span class="comment-copy">@MustafaS: For example, suppose <code>x = {'a':0}</code>. Then <code>x.get('a', 'foo')</code> returns <code>0</code> but <code>x.get('a') or 'foo'</code> returns <code>'foo'</code>.</span>
<span class="comment-copy"><a href="https://repl.it/Gz4w/latest" rel="nofollow noreferrer">Playground link with these code</a></span>
<span class="comment-copy">One more good test would be <code>if k in dict and dict[k]:</code> vs <code>if dict.get(k):</code>. This covers the situation when we need to check if key exists, and if 'yes' - what value?, something like: <code>dict = {1: '', 2: 'some value'}</code>.</span>
<span class="comment-copy">Please remember that default value gets evaluated regardless of the value being in dictionary, so instead of  <code>dictionary.get(value, long_function())</code> one might consider using <code>dictionary.get(value) or long_function()</code></span>
<span class="comment-copy">Ah @Kresimir, true. I did get that question in one of the interviews which I faced (I did not know about it when I had originally posted this answer). Thanks for reminding me about it.</span>
<span class="comment-copy">A good answer, posted before any of the others, which would have been upvoted more, and probably accepted, if you had posted some code examples (+1 from me, though)</span>
<span class="comment-copy">@Mawg I recently had a scraping project for my research. It was calling an API and parsing JSON files basically. I had my RA do it. One of the key issues he had was calling the key directly, when many keys are actually missing. I will post an example in the text above.</span>
<span class="comment-copy">thanks for tackling the multi-dimensional aspect of this! Sounds like you can even just do {} instead of {'x': None}</span>
<span class="comment-copy">so much JOSN, who knew?!</span>
