<div class="post-text" itemprop="text">
<p>The above part of the code is good, but the second part im trying to create a new txt file with information about files that are created in the first part, for each file separately ,for example in this txt file will be written: INPUT FILE1 SIZE IS 42, OUTPUT FILE1 SIZE IS 324, than the second file: INPUT FILE2 SIZE IS 62, OUTPUT FILE1 SIZE IS 543...etc etc</p>
<pre><code>import pandas as pd
import glob
import os

files = glob.glob('*.csv')
for file in files:
    df = pd.read_csv(file, header= None)
    df1 = df.iloc[:, :4].agg(['sum','max','std'])
    df1.columns = range(1, len(df1.columns) + 1)
    s = df1.stack()
    L = ['{} of the {}. column is {}'.format(a, b, c) for (a, b), c in s.items()]
    output_file_name = "output_" + file
    pd.Series(L).to_csv(output_file_name ,index=False) 

#this part is good


for file in files:
    with open(file + "stats.txt", 'a+') as f:
        f.write(' input file size is {}'.format(os.path.getsize(file)))
        f.write('output file size is {}'.format(os.path.getsize(output_file_name)))
    f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow noreferrer"><code>os.path.splitext</code></a> for remove extension of original files, also <code>f.close()</code> is not necessary, because <code>with</code> automatically close the file:</p>
<pre><code>import glob, os
import pandas as pd

files = glob.glob('*.csv')

#loop by all files
for file in files:
    if not file.startswith(('output_','file_size_')):
        #for write to parameter w
        with open(os.path.splitext(file)[0] + "stats.txt", 'w') as f:
            output_file_name = "output_" + file
            #add both format
            infile = 'SIZE OF INPUT FILE {} IS {}, '.format(file, os.path.getsize(file))
            outfile = 'SIZE OF INPUT FILE {} IS {}'.format(output_file_name, 
                                                           os.path.getsize(output_file_name))

            f.write(infile)
            f.write(outfile)
</code></pre>
<p>EDIT:</p>
<p>Solution need <code>sum</code> of input and output files to variables:</p>
<pre><code>import glob, os
import pandas as pd

files = glob.glob('*.csv')

input_all, output_all = 0, 0
#loop by all files
for file in files:
    if not (file.startswith('output_') or file.endswith('stats.txt')):
        with open(os.path.splitext(file)[0] + "stats.txt", 'w') as f:
            output_file_name = "output_" + file
            #add both format
            i = os.path.getsize(file)
            o = os.path.getsize(output_file_name)
            input_all += i
            output_all += o
            infile = 'SIZE OF INPUT FILE {} IS {}, '.format(file, i)
            outfile = 'SIZE OF INPUT FILE {} IS {}'.format(output_file_name, o)

            f.write(infile)
            f.write(outfile)


with open("final_stats.txt", 'w') as f:
    instring = 'SIZE OF ALL INPUT FILES IS {}, '.format(input_all)
    outstring = 'SIZE OF ALL OUTPUT FILES IS {}, '.format(output_all)
    both = 'SIZE OF ALL  FILES IS {}'.format(input_all + output_all)
    f.write(instring)
    f.write(outstring)
    f.write(both)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better approach would be to put the output files in a different directory from the input, to prevent confusion.</p>
<pre><code>data/
- input
- output
- stats
</code></pre>
<p>You also need to do it in 1 loop, instead of looping over the files twice.</p>
<p>using <code>pathlib.Path</code> and f-strings (python 3.6+) this becomes:</p>
<pre><code>from pathlib import Path

DATA_DIR = Path("&lt;data&gt;") # fill in the correct path
INPUT_DIR = DATA_DIR / "input"
OUTPUT_DIR = DATA_DIR / "output"
STATS_DIR = DATA_DIR / "stats"

for file in INPUT_DIR.glob("*.csv"):
    df = pd.read_csv(file, header= None)
    df1 = df.iloc[:, :4].agg(['sum','max','std'])
    df1.columns = range(1, len(df1.columns) + 1)
    s = df1.stack()
    L = [f'{a} of the {b}. column is {c}' for (a, b), c in s.items()]

    output_file = OUTPUT_DIR / ("output_" + file.name)
    pd.Series(L).to_csv(output_file ,index=False) 

    size_input = file.stat().st_size
    size_output = output_file.stat().st_size

    stats_file = STATS_DIR / file.with_suffix("stats.txt").name

    message = f"""input file size is {size_input}
    output file size is {size_output}"""

    stats_file.write_text(message)
</code></pre>
</div>
<span class="comment-copy">It was very usefull, regards !!</span>
<span class="comment-copy">@EdvinŠimić - I think yes, writing by python should be fster like pandas to_csv.</span>
<span class="comment-copy">Great, how could i now create a single txt file that will contain statstics of: SUM SIZE OF ALL INPUT FILES IS ... , SUM OF ALL OUTPUT FILES IS...SUM OF ALL FILES IS....thank you.</span>
<span class="comment-copy">@EdvinŠimić - Check edited answer.</span>
