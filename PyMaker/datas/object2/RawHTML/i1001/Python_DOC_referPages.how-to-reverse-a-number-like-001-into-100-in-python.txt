<div class="post-text" itemprop="text">
<p>Sample Input:    001</p>
<p>Sample Output:   100</p>
<p>I'm Trying something like this but it shouldn't work,can anyone help me.</p>
<pre><code> x = int(input())

 s = str(x)

 s1 = s[::-1]

 print(s1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do this: </p>
<pre><code>x = input() # Type 001
output = x[::-1] # You obtain what you want: 100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By casting the input to an int in your first line with the call to <code>int()</code> you are removing the information that there were two leading zeros (in your example). This means that in the second line, calling <code>str()</code> is just producing <code>'1'</code> instead of <code>'001'</code> because that information was destroyed in the casting process.</p>
<p>The solution is to not cast the input, and instead keep it as a string, removing the call to <code>int()</code></p>
<pre><code>s=input()
s1=s[::-1]
print(s1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The string representation of an integer doesn't include left-side zero-fill by default. But you can achieve this via <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow noreferrer"><code>str.zfill</code></a>:</p>
<pre><code>x = int(input())  # 1
s = str(x).zfill(3)
s1 = s[::-1]

print(s1)  # 100
</code></pre>
<p>Alternatively, you can require the input to have the prerequisite zero-fill:</p>
<pre><code>x = input()  # 001
s1 = x[::-1]

print(s1)    # 100
</code></pre>
</div>
<span class="comment-copy">Don't use <code>int()</code>; just skip that, as you will lose information about the padded zeroes.</span>
