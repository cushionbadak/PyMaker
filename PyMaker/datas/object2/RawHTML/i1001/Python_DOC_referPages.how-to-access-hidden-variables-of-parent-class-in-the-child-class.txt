<div class="post-text" itemprop="text">
<p>In other languages, a general guideline that helps produce better code is always make everything as hidden as possible. If in doubt about whether a variable should be private or protected, it's better to go with private.</p>
<p>Does the same hold true for Python? Should I use two leading underscores on everything at first, and only make them less hidden (only one underscore) as I need them?</p>
<p>If the convention is to use only one underscore, I'd also like to know the rationale.</p>
<p>Here's a comment I left on <a href="https://stackoverflow.com/questions/7456807/python-name-mangling-when-in-doubt-do-what/7456958#7456958">JBernardo's answer</a>. It explains why I asked this question and also why I'd like to know why Python is different from the other languages:</p>
<blockquote>
<p>I come from languages that train you to think everything should be only as public as needed and no more. The reasoning is that this will reduce dependencies and make the code safer to alter. The Python way of doing things in reverse -- starting from public and going towards hidden -- is odd to me.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>When in doubt, leave it "public" - I mean, do not add anything to obscure the name of your attribute. If you have a class with some internal value, do not bother about it. Instead of writing:</p>
<pre><code>class Stack(object):

    def __init__(self):
        self.__storage = [] # Too uptight

    def push(self, value):
        self.__storage.append(value)
</code></pre>
<p>write this by default:</p>
<pre><code>class Stack(object):

    def __init__(self):
        self.storage = [] # No mangling

    def push(self, value):
        self.storage.append(value)
</code></pre>
<p>This is for sure a controversial way of doing things. Python newbies just hate it and even some old Python guys despise this default - but it is the default anyway, so I really recommend you to follow it, even if you feel uncomfortable.</p>
<p>If you <em>really</em> want to send the message "Can't touch this!" to your users, the usual way is to precede the variable with <em>one</em> underscore. This is just a convention, but people understand it and take double care when dealing with such stuff:</p>
<pre><code>class Stack(object):

    def __init__(self):
        self._storage = [] # This is ok but pythonistas use it to be relaxed about it

    def push(self, value):
        self._storage.append(value)
</code></pre>
<p>This can be useful, too, for avoiding conflict between property names and attribute names:</p>
<pre><code> class Person(object):
     def __init__(self, name, age):
         self.name = name
         self._age = age if age &gt;= 0 else 0

     @property
     def age(self):
         return self._age

     @age.setter
     def age(self, age):
         if age &gt;= 0:
             self._age = age
         else:
             self._age  = 0
</code></pre>
<p>What about the double underscore? Well, the double underscore magic is used mainly <a href="https://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private/70900#70900">to avoid accidental overloading of methods and name conflicts with superclasses' attributes</a>. It can be quite useful if you write a class that is expected to be extended many times.</p>
<p>If you want to use it for other purposes, you can, but it is neither usual nor recommended.</p>
<p><strong>EDIT</strong>: Why is this so? Well, the usual Python style does not emphasize making things private - on the contrary! There are a lot of reasons for that - most of them controversial... Let us see some of them.</p>
<h1>Python has properties</h1>
<p>Most OO languages today use the opposite approach: what should not be used should not be visible, so attributes should be private. Theoretically, this would yield more manageable, less coupled classes, because no one would change values inside the objects recklessly.</p>
<p>However, it is not so simple. For example, Java classes do have a lot attributes <em>and</em> getters that just <em>get</em> the values <em>and</em> setters that just <em>set</em> the values. You need, let us say, seven lines of code to declare a single attribute - which a Python programmer would say is needlessly complex. Also, in practice, you just write this whole lot of code to get one public field, since you can change its value using the getters and setters.</p>
<p>So why to follow this private-by-default policy? Just make your attributes public by default. Of course, this is problematic in Java, because if you decide to add some validation to your attribute, it would require you to change all</p>
<pre><code>person.age = age;
</code></pre>
<p>in your code to, let us say,</p>
<pre><code>person.setAge(age);
</code></pre>
<p><code>setAge()</code> being:</p>
<pre><code>public void setAge(int age) {
    if (age &gt;= 0) {
        this.age = age;
    } else {
        this.age = 0;
    }
}
</code></pre>
<p>So in Java (and other languages), the default is to use getters and setters anyway, because they can be annoying to write but can spare you a lot of time if you find yourself in the situation I've described.</p>
<p>However, you do not need to do it in Python, since Python has properties. If you have this class:</p>
<pre><code> class Person(object):
     def __init__(self, name, age):
         self.name = name
         self.age = age
</code></pre>
<p>and then you decide to validate ages, you do not need to change the <code>person.age = age</code> pieces of your code. Just add a property (as shown below)</p>
<pre><code> class Person(object):
     def __init__(self, name, age):
         self.name = name
         self._age = age if age &gt;= 0 else 0

     @property
     def age(self):
         return self._age

     @age.setter
     def age(self, age):
         if age &gt;= 0:
             self._age = age
         else:
             self._age  = 0
</code></pre>
<p>If you can do it and still use  <code>person.age = age</code>, why would you add private fields and getters and setters?</p>
<p>(Also, see <a href="http://dirtsimple.org/2004/12/python-is-not-java.html" rel="nofollow noreferrer">Python is not Java</a> and <a href="http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html?page=1" rel="nofollow noreferrer">this article about the harms of using getters and setters</a>.).</p>
<h1>Everything is visible anyway - and trying to hide just complicates your work</h1>
<p>Even in languages where there are private attributes, you can access them through some kind of reflection/introspection library. And people do it a lot, in frameworks and for solving urgent needs. The problem is that introspection libraries are just a hard way of doing what you could do with public attributes.</p>
<p>Since Python is a very dynamic language, it is just counterproductive to add this burden to your classes.</p>
<h1>The problem is not being possible to see - it is being <em>required</em> to see</h1>
<p>For a Pythonista, encapsulation is not the inability of seeing the internals of classes, but the possibility of avoiding looking at it. What I mean is, encapsulation is the property of a component which allows it to be used without the user being concerned about the internal details. If you can use a component without bothering yourself about its implementation, then it is encapsulated (in the opinion of a Python programmer).</p>
<p>Now, if you wrote your class in such a way you can use it without having to think about implementation details, there is no problem if you <em>want</em> to look inside the class for some reason. The point is: your API should be good and the rest is details.</p>
<h1>Guido said so</h1>
<p>Well, this is not controversial: <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=211430" rel="nofollow noreferrer">he said so, actually</a>. (Look for "open kimono.")</p>
<h1>This is culture</h1>
<p>Yes, there are some reasons, but no critical reason. This is mostly a cultural aspect of programming in Python. Frankly, it could be the other way, too - but it is not. Also, you could just as easily ask the other way around: why do some languages use private attributes by default? For the same main reason as for the Python practice: because it is the culture of these languages, and each choice has advantages and disadvantages.</p>
<p>Since there already is this culture, you are well advised to follow it. Otherwise, you will get annoyed by Python programmers telling you to remove the <code>__</code> from your code when you ask a question in Stack Overflow :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I wouldn't say that practice produces better code. Visibility modifiers only distract you from the task at hand, and as a side effect force your interface to be used as you intended. Generally speaking, enforcing visibility prevents programmers from messing things up if they haven't read the documentation properly.</p>
<p>A far better solution is the route that Python encourages: Your classes and variables should be well documented, and their behaviour clear. The source should be available. This is far more extensible and reliable way to write code.</p>
<p>My strategy in Python is this:</p>
<ol>
<li>Just write the damn thing, make no assumptions about how your data should be protected. This assumes that you write to create the ideal interfaces for your problems.</li>
<li>Use a leading underscore for stuff that <em>probably</em> won't be used externally, and isn't part of the normal "client code" interface.</li>
<li>Use double underscore only for things that are purely convenience inside the class, or will cause considerable damage if accidentally exposed.</li>
</ol>
<p>Above all, it should be clear what everything does. Document it if someone else will be using it. Document it if you want it to be useful in a year's time.</p>
<p>As a side note, you should actually be going with <em>protected</em> in those other languages: You never know your class might be inherited later and for what it might be used. Best to only protect those variables that you are certain cannot or should not be used by foreign code.</p>
</div>
<div class="post-text" itemprop="text">
<h2>First - What is name mangling?</h2>
<p>Name mangling is invoked when you are in a class definition and use <code>__any_name</code> or <code>__any_name_</code>, that is, <strong>two</strong> (or more) leading underscores and at most one trailing underscore. </p>
<pre><code>class Demo:
    __any_name = "__any_name"
    __any_other_name_ = "__any_other_name_"
</code></pre>
<p>And now:</p>
<pre><code>&gt;&gt;&gt; [n for n in dir(Demo) if 'any' in n]
['_Demo__any_name', '_Demo__any_other_name_']
&gt;&gt;&gt; Demo._Demo__any_name
'__any_name'
&gt;&gt;&gt; Demo._Demo__any_other_name_
'__any_other_name_'
</code></pre>
<blockquote>
<h2>When in doubt, do what?</h2>
</blockquote>
<p>The ostensible use is to prevent subclassers from using an attribute that the class uses. </p>
<p>A potential value is in avoiding name collisions with subclassers who want to override behavior, so that the parent class functionality keeps working as expected. However, the <a href="https://docs.python.org/3/tutorial/classes.html#private-variables-and-class-local-references" rel="noreferrer">example</a> in the Python documentation is not Liskov substitutable, and no examples come to mind where I have found this useful. </p>
<p>The downsides are that it increases cognitive load for reading and understanding a code base, and especially so when debugging where you see the double underscore name in the source and a mangled name in the debugger.</p>
<p>My personal approach is to intentionally avoid it. I work on a very large code base. The rare uses of it stick out like a sore thumb and do not seem justified. </p>
<p>You do need to be aware of it so you know it when you see it.</p>
<h2>PEP 8</h2>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>, the Python standard library style guide, currently says (abridged):</p>
<blockquote>
<p>There is some controversy about the use of <code>__names</code>.</p>
<p>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores.</p>
<ol>
<li><p>Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name,
  you can still get name collisions.</p></li>
<li><p>Name mangling can make certain uses, such as debugging and <code>__getattr__()</code> , less convenient. However the name mangling algorithm is well documented and easy to perform manually.</p></li>
<li><p>Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers.</p></li>
</ol>
</blockquote>
<h2>How does it work?</h2>
<p>If you prepend two underscores (without ending double-underscores) in a class definition, the name will be mangled, and an underscore followed by the class name will be prepended on the object:</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     __foobar = None
...     _foobaz = None
...     __fooquux__ = None
... 
&gt;&gt;&gt; [name for name in dir(Foo) if 'foo' in name]
['_Foo__foobar', '__fooquux__', '_foobaz']
</code></pre>
<p>Note that names will only get mangled when the class definition is parsed:</p>
<pre><code>&gt;&gt;&gt; Foo.__test = None
&gt;&gt;&gt; Foo.__test
&gt;&gt;&gt; Foo._Foo__test
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'Foo' has no attribute '_Foo__test'
</code></pre>
<p>Also, those new to Python sometimes have trouble understanding what's going on when they can't manually access a name they see defined in a class definition. This is not a strong reason against it, but it's something to consider if you have a learning audience.</p>
<h1>One Underscore?</h1>
<blockquote>
<p><strong>If the convention is to use only one underscore, I'd also like to know the rationale.</strong></p>
</blockquote>
<p>When my intention is for users to keep their hands off an attribute, I tend to only use the one underscore, but that's because in my mental model, subclassers would have access to the name (which they always have, as they can easily spot the mangled name anyways). </p>
<p>If I were reviewing code that uses the <code>__</code> prefix, I would ask why they're invoking name mangling, and if they couldn't do just as well with a single underscore, keeping in mind that if subclassers choose the same names for the class and class attribute there will be a name collision in spite of this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't start with private data and make it public as necessary. Rather, you should start by figuring out the interface of your object. I.e. you should start by figuring out what the world sees (the public stuff) and then figure out what private stuff is necessary for that to happen.</p>
<p>Other language make difficult to make private that which once was public. I.e. I'll break lots of code if I make my variable private or protected. But with properties in python this isn't the case. Rather, I can maintain the same interface even with rearranging the internal data.</p>
<p>The difference between _ and __ is that python actually makes an attempt to enforce the latter. Of course, it doesn't try really hard but it does make it difficult. Having _ merely tells other programmers what the intention is, they are free to ignore at their peril. But ignoring that rule is sometimes helpful. Examples include debugging, temporary hacks, and working with third party code that wasn't intended to be used the way you use it. </p>
</div>
<div class="post-text" itemprop="text">
<p>There are already a lot of good answers to this, but I'm going to offer another one. This is also partially a response to people who keep saying that double underscore isn't private (it really is).</p>
<p>If you look at Java/C#, both of them have private/protected/public. All of these are <strong>compile-time constructs</strong>. They are only enforced at the time of compilation. If you were to use reflection in Java/C#, you could easily access private method.</p>
<p>Now every time you call a function in Python, you are inherently using reflection. These pieces of code are the same in Python.</p>
<pre><code>lst = []
lst.append(1)
getattr(lst, 'append')(1)
</code></pre>
<p>The "dot" syntax is only syntactic sugar for the latter piece of code. Mostly because using getattr is already ugly with only one function call. It just gets worse from there.</p>
<p>So with that, there <em>can't</em> be a Java/C# version of private, as Python doesn't compile the code. Java and C# can't check if a function is private or public at runtime, as that information is gone (and it has no knowledge of where the function is being called from).</p>
<p>Now with that information, the name mangling of the double underscore makes the most sense for achieving "private-ness". Now when a function is called from the 'self' instance and it notices that it starts with '__', it just performs the name mangling right there. It's just more syntactic sugar. That syntactic sugar allows the equivalent of 'private' in a language that only uses reflection for data member access.</p>
<p>Disclaimer: I have never heard anybody from the Python development say anything like this. The real reason for the lack of "private" is cultural, but you'll also notice that most scripting/interpreted languages have no private. A strictly enforceable private is not practical at anything except for compile time.</p>
</div>
<div class="post-text" itemprop="text">
<p>First: Why do you want to hide your data? Why is that so important?</p>
<p>Most of the time you don't really want to do it but you do because others are doing.</p>
<p>If you really really really don't want people using something, add <strong>one</strong> underscore in front of it. That's it... Pythonistas know that things with one underscore is not guaranteed to work every time and may change without you knowing.</p>
<p>That's the way we live and we're okay with that.</p>
<p>Using two underscores will make your class so bad to subclass that even you will not want to work that way.</p>
</div>
<div class="post-text" itemprop="text">
<p>The chosen answer does a good job of explaining how properties remove the need for <em>private attributes</em>, but I would also add that functions at the module level remove the need for <em>private methods</em>.</p>
<p>If you turn a method into a function at the module level, you remove the opportunity for subclasses to override it. Moving some functionality to the module level is more Pythonic than trying to hide methods with name mangling.</p>
</div>
<div class="post-text" itemprop="text">
<p>At first glance it should be the same as for other languages (under "other" I mean Java or C++), but it isn't.</p>
<p>In Java you made private all variables that shouldn't be accessible outside.  In the same time in Python you can't achieve this since there is no "privateness" (as one of Python principles says - "We're all adults").  So double underscore means only "Guys, do not use this field directly".  The same meaning has singe underscore, which in the same time doesn't cause any headache when you have to inherit from considered class (just an example of possible problem caused by double underscore).</p>
<p>So, I'd recommend you to use single underscore by default for "private" members.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following code snippet will explain all different cases :</p>
<ul>
<li>two leading underscores (__a)</li>
<li>single leading underscore (_a) </li>
<li><p>no underscore (a) </p>
<pre><code>class Test:

def __init__(self):
    self.__a = 'test1'
    self._a = 'test2'
    self.a = 'test3'

def change_value(self,value):
    self.__a = value
    return self.__a
</code></pre></li>
</ul>
<p>printing all valid attributes of Test Object</p>
<pre><code>testObj1 = Test()
valid_attributes = dir(testObj1)
print valid_attributes

['_Test__a', '__doc__', '__init__', '__module__', '_a', 'a', 
'change_value']
</code></pre>
<p>Here, you can see that name of __a has been changed to _Test__a to prevent this variable to be overridden by any of the subclass. This concept is known as "Name Mangling" in python.
You can access this like this :</p>
<pre><code>testObj2 = Test()
print testObj2._Test__a

test1
</code></pre>
<p>Similarly, in case of _a, the variable is just to notify the developer that it should be used as internal variable of that class, the python interpreter  won't do anything even if you access it, but it is not a good practise. </p>
<pre><code>testObj3 = Test()
print testObj3._a

test2
</code></pre>
<p>a variable can be accesses from anywhere it's like a public class variable.</p>
<pre><code>testObj4 = Test()
print testObj4.a

test3
</code></pre>
<p>Hope the answer helped you :)</p>
</div>
<span class="comment-copy">You omitted the reason double underscore is bad for subclassing... this would improve your answer.</span>
<span class="comment-copy">Given that the double underscores are really just to prevent name collisions with subclassers (as a way of saying, "hands off," to subclassers), I don't see how name mangling creates a problem.</span>
<span class="comment-copy">Use double underscore for "private" and single underscore for "protected". Usually, people just use single underscore for everything (double underscore will help enforce privateness, which is usually against Python style).</span>
<span class="comment-copy">But doesn't that make two underscores similar to private and one underscore similar to protected? Why not just start from "private"?</span>
<span class="comment-copy">@Paul No, it doesn't. There is no private in Python and you shouldn't try to achieve it.</span>
<span class="comment-copy">@Roman Conceptually speaking... Notice the quotes around 'private'.</span>
