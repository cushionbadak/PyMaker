<div class="post-text" itemprop="text">
<p>I wrote a Python package <code>pack</code> that can perform a set of related tasks, <code>taskA</code>, <code>taskB</code>, ..., <code>taskZ</code>. Each of them has its own module file, e.g. <code>taskN.py</code>.</p>
<p>Now say in <code>taskN.py</code> I import a third party package <code>evilpack</code>. It Works On My Machineâ„¢, but a coworker of mine (a) can't install <code>evilpack</code>, but (b) does not even need that module <code>taskN</code>.</p>
<p>My goal is to structure my package so that we can choose at import time whether we want to load the module <code>taskN</code> or ignore it.</p>
<p>What's the most elegant way to solve this? I'm sensing it has something to do with the directories' <code>__init__.py</code> files.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to solve this problem:</p>
<p>Identify all of the modules that may have unfulfilled dependencies.</p>
<p>In the main module that does the importing, surround each such import with a <code>try...except</code> clause:</p>
<pre><code>try:
    import packN
except ImportError as details:
    print ("Could not import packN because of this error:", details)
    print ("Functionality xxxx will not be available")
    packN = None
</code></pre>
<p>If your colleague's code doesn't call a function that relies on <code>packN</code> then all will be well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I can only point you in the correct direction via <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">setupscript</a> because I do not have access to your data/package details.  </p>
<p>To simply put, you will have to locate your <code>taskN.py</code>'s <code>setup.py</code> script, and specifically remove the module from inside the script.</p>
</div>
<span class="comment-copy">using <code>__all__</code> in your code to exposure code / module to specific person will help you <a href="https://stackoverflow.com/questions/44834/can-someone-explain-all-in-python">link</a></span>
<span class="comment-copy">I'd prefer to avoid a <code>from pack import *</code> statement, and instead ideally have a <code>import pack</code> for both me and my coworker. Would that still work in that case?</span>
<span class="comment-copy">What is your criteria for exclusion? The code handling the imports must be able to know what to read from your coworker's system to exclude</span>
<span class="comment-copy">@ycx I'm not sure what you mean by "criteria for exclusion", but I want to exclude exactly one pre-specified module within my package, and I am looking for a way to specify before/while importing whether or not to exclude that module - via some flag or option.</span>
<span class="comment-copy">you can chose from requirment.txt file which package to  chose when building a package . dintinguish there which package are necessary for whole package(core component) and which are others then from there making the whole module like that</span>
<span class="comment-copy">Thanks, I've tried it and it works exactly as advertised :) One more question if you don't mind: If I have like ten successive statements of the form of <code>from .subpack.taskN import TaskN</code>, with TaskM, TaskN, etc., is there a way to write a loop? I wouldn't know how to do a relative import by picking modules as a string, i.e. from a list of strings.</span>
<span class="comment-copy">@AlexanderEngelhardt I've never tried importing in a loop but that is because I have never worked with 10 like-named imports that differ only in the digit in the name. You <i>could</i> call <code>__import__()</code> in a loop because that accepts the name of the imported module as a string. But if it's only 10 and not 300 I would do it the long way.</span>
