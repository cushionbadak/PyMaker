<div class="post-text" itemprop="text">
<p>I'm trying to put some info into the database</p>
<pre><code>import sqlite3
conn = sqlite3.connect("tutorial.db")
c=conn.cursor()
def create_table():
    c.execute("CREATE TABLE IF NOT EXISTS stuffPlot(unix REAL,datestamp Text,keyword TEXT,value REAL)")
def data_entry(x,y,z,w):
    c.execute("INSERT INTO stuffPlot VALUES({},{},{},{})".format(x,y,z,w))
    conn.commit()
    c.close()
    conn.close()
x=int(input("enter a number"))
y=str(input("enter a str"))
z=int(input("enter a number"))
w=str(input("enter a str"))
create_table()
data_entry(x,y,w,z)
</code></pre>
<p>I want to write to the database, but it creates the following database
error:</p>
<blockquote>
<blockquote>
<blockquote>
<p>data_entry(x,y,w,z)
          Traceback (most recent call last):
            File "", line 1, in 
            File "", line 2, in data_entry
          sqlite3.OperationalError: no such column: name </p>
</blockquote>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Your strings are missing quotes so they're treated as column names, try this:</p>
<pre><code>c.execute("INSERT INTO stuffPlot VALUES({},'{}','{}',{})".format(x,y,z,w))
</code></pre>
<p><strong>Edit</strong></p>
<p>Instead of the line above (which is vulnerable to SQL Injection) you should do it like this:</p>
<pre><code>c.execute("INSERT INTO stuffPlot VALUES(?,?,?,?)", (x,y,z,w))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hey your last line is calling this:</p>
<pre><code>data_entry(x,y,w,z)
</code></pre>
<p>Its x,y,w,z, but in your function definition you are receiving this:</p>
<pre><code>def data_entry(x,y,z,w): #sequence is x,y,z,w
</code></pre>
<p>So that created a bit confusion on what variable is what.
And also your strings will need to be enclosed inside single quotes as @scope mentioned. </p>
<p>So here's a working code</p>
<pre><code>import sqlite3
conn = sqlite3.connect("tutorial.db")
c=conn.cursor()
def create_table():
    c.execute("CREATE TABLE IF NOT EXISTS stuffPlot(unix REAL,datestamp Text,keyword TEXT,value REAL)")
def data_entry(x,y,z,w):
    c.execute("INSERT INTO stuffPlot VALUES({},'{}',{},'{}');".format(x,y,z,w)) 
    #fixed the quotes above
    conn.commit()
    c.close()
    conn.close()
x=int(input("enter a number"))
y=str(input("enter a str"))
z=int(input("enter a number"))
w=str(input("enter a str"))
create_table()
data_entry(x,y,z,w) #fixed x,y,w,z to x,y,z,w
</code></pre>
<p>If you have any doubt please comment.</p>
</div>
<span class="comment-copy">thank you very much</span>
<span class="comment-copy">@scope is that correct? will they actually be treated as column names? they are given as values, is not true they will treated as a wrong type?</span>
<span class="comment-copy">apparently they will... look at the error message from op's question, I guess when you combine an insert with a select you can refer to selected column names like that</span>
<span class="comment-copy">May I kindly ask not to encourage the use of string interpolation methods to put parameters into a query string? :) This makes the code vulnerable to SQL injection attacks and leads to issues as experienced by the OP. Every DB-API 2.0 compliant driver allows for parametrized queries with safe, internal substitution methods that not only protect from SQL injection, but also make the use of quote characters around parameters unnecessary. See <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute" rel="nofollow noreferrer"><code>sqlite3.Cursor.execute</code></a> for a reference.</span>
<span class="comment-copy">@shmee Good point. Even if one just started learning, security still oblige :)</span>
