<div class="post-text" itemprop="text">
<p>I'm trying to catch mysql/sqlalchemy OperationalErrors and replace handle access denied (1045) differently from connection refused (2003)</p>
<pre><code>sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (1045, "Access denied for user … (Background on this error at: http://sqlalche.me/e/e3q8)
sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, "Can't connect to MySQL server on 'localhost' ([Errno 111] Connection refused)") (Background on this error at: http://sqlalche.me/e/e3q8)
</code></pre>
<p>I just can't seem to find any documentation on how to tell these apart programmatically. I dived into the sources and thought I could check the value of err.orig.original_exception.errno but that was not the case.</p>
<p>Edit: err.orig doesn't seem to be defined for access denied which might be a bug.</p>
<pre><code>try:
  engine.scalar(select([1]))
except sqlalchemy.exc.OperationalError as err:
  if err_______:
    print("Access Denied")
  elifif err_______:
    print("Connection Refused")
  else:
    raise
</code></pre>
<p>This issue really bugs me and even the bounty is running out with no news. I'm starting to believe it must be a bug  in sqlalchemy but the sqlalchemy documentation is not very descriptive in that regard and I'm new to sqlalchemy and python in general so it's really hard for me to tell. I couldn't find support on irc either, where do I go from here?</p>
</div>
<div class="post-text" itemprop="text">
<p>After some more research, I found the mysql error code to be in <code>err.orig.args[0]</code>. So the Answer is:</p>
<pre><code>try:
  engine.scalar(select([1]))
except sqlalchemy.exc.OperationalError as err:
  if err.orig.args[0]==1045:
    print("Access Denied")
  elif err.orig.args[0]==2003:
    print("Connection Refused")
  else:
    raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>err.args[0]</code></p>
<pre><code>try:
  engine.scalar(select([1]))
except sqlalchemy.exc.OperationalError as err:
  if err.args[0] == 1045:
    print("Access Denied")
  elif err.args[0] == 2003:
    print("Connection Refused")
  else:
    raise
</code></pre>
<p>This should be what you're looking for. Refer to the <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">documentation</a> for more reading</p>
<p><strong>Edit</strong></p>
<p>Take a look at the API, as <a href="https://docs.sqlalchemy.org/en/latest/core/exceptions.html#sqlalchemy.exc.OperationalError" rel="nofollow noreferrer">OperationalError</a> wraps <a href="https://docs.sqlalchemy.org/en/latest/core/exceptions.html#sqlalchemy.exc.DBAPIError" rel="nofollow noreferrer">DBAPIError</a> and that has a <code>code</code> argument. Most likely just replace <code>args[0]</code> with <code>code</code> in my example. Like so:</p>
<pre><code>try:
  engine.scalar(select([1]))
except sqlalchemy.exc.OperationalError as err:
  if err.code == 1045:
    print("Access Denied")
  elif err.code == 2003:
    print("Connection Refused")
  else:
    raise
</code></pre>
</div>
<span class="comment-copy">Similar question from 2016 without an answer: <a href="https://stackoverflow.com/q/39106138/3080094">stackoverflow.com/q/39106138/3080094</a></span>
<span class="comment-copy">How could I not find that, thank you so much!</span>
<span class="comment-copy">have you tried <code>e.errno</code>? Reading this: <a href="https://github.com/sqlalchemy/sqlalchemy/blob/6f270fb0e344016ce526e0a1ecb3e3de9ffd1e3b/lib/sqlalchemy/dialects/mysql/mysqlconnector.py#L233" rel="nofollow noreferrer">github.com/sqlalchemy/sqlalchemy/blob/…</a> I think OperationalErrors from <code>mysqlconnector.py</code> should have the property <code>errno</code> containing the error number.</span>
<span class="comment-copy">Just a small typo in your example: <code>elifif</code>.</span>
<span class="comment-copy">args[0] is a string containing the above error messages. But comparing error message strings can't be the right solution here</span>
<span class="comment-copy">@Pelipap edited.</span>
<span class="comment-copy">This is a sqlalchemy code and only means operational error, which becomes obvious when looking at err.py</span>
<span class="comment-copy">I've been at this for a while and it's much harder than it looks. I found out isinstance(err.orig.original_exception,ConnectionRefusedError) works for the connection refused case only. Otherwise orig is None apparently</span>
<span class="comment-copy">I read a lot of source and documentation, the links aren't helping. I assume that I'm supposed to be looking at err.orig and the fact that that isn't defined for permission denied might be a bug I'll have to hack around – and end up comparing error message strings. I'll investigate further tomorrow, until that, I hope someone familiar with this looks into it.</span>
