<div class="post-text" itemprop="text">
<p>I am working with an Excel file in Pandas where I am trying to deal with a 
Date column where the Date is listed in ISO 8601 format. I want to take this column and store the date and time in two different columns.The values in these two columns need to be stored in Eastern Daylight Savings. This is what they are supposed to look like</p>
<pre><code>Date                    Date (New)  Time (New)
1999-01-01T00:00:29.75  12/31/1998  6:59:58 PM
1999-01-01T00:00:30.00  12/31/1998  6:59:59 PM
1999-01-01T00:00:32.25  12/31/1998  7:00:00 PM
1999-01-01T00:00:30.50  12/31/1998  6:59:58 PM
</code></pre>
<p>I have achieved this, partially. 
I have converted the values to Eastern Daylight savings time and successfully stored the Date value correctly. However, I want the time value to be stored in the 12 hours format and not in the 24 hours format as it is being right now?</p>
<p>This is what my output looks like so far.</p>
<pre><code>Date                  Date (New)    Time (New)
1999-01-01T00:00:29.75  1998-12-31  19:00:30
1999-01-01T00:00:30.00  1998-12-31  19:00:30
1999-01-01T00:00:32.25  1998-12-31  19:00:32
1999-01-01T00:00:30.50  1998-12-31  19:00:31
</code></pre>
<p>Does anyone have any idea what i can do for this?</p>
<pre><code>from pytz import timezone

import dateutil.parser

from pytz import UTC

import datetime as dt

df3['Day']=pd.to_datetime(df['Date'], format='%Y-%m-%d %H:%M:    %S.%f',errors='coerce').dt.tz_localize('UTC')

df3['Day']= df3['Day'].dt.tz_convert('US/Eastern')
df3['Date(New)'], df3['Time(New)'] = zip(*[(d.date(), d.time()) for d in  df3['Day']])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can set the time format used for outputting - the time value itself is (and should be) stored as <code>datetime.time()</code> - if you want a specific string representation you can create a string-type column in the format you want:</p>
<pre><code>from pytz import timezone 
import pandas as pd
import datetime as dt

df= pd.DataFrame([{"Date":dt.datetime.now()}]) 

df['Day']=pd.to_datetime( df['Date'], format='%Y-%m-%d %H:%M:    %S.%f',
                          errors='coerce').dt.tz_localize('UTC')

df['Day']= df['Day'].dt.tz_convert('US/Eastern')
df['Date(New)'], df['Time(New)'] = zip(*[(d.date(), d.time()) for d in  df['Day']]) 

# create strings with specific formatting
df['Date(asstring)'] = df['Day'].dt.strftime("%Y-%m-%d")
df['Time(asstring)'] = df["Day"].dt.strftime("%I:%M:%S %p") 

# show resulting column / cell types
print(df.dtypes)
print(df.applymap(type))
# show df
print(df)
</code></pre>
<p>Output:</p>
<pre><code># df.dtypes
Date                          datetime64[ns]
Day               datetime64[ns, US/Eastern]
Date(New)                             object
Time(New)                             object
Date(asstring)                        object
Time(asstring)                        object

# from df.applymap(type)
Date            &lt;class 'pandas._libs.tslib.Timestamp'&gt;
Day             &lt;class 'pandas._libs.tslib.Timestamp'&gt;  
Date(New)       &lt;class 'datetime.date'&gt;
Time(New)       &lt;class 'datetime.time'&gt;
Date(asstring)  &lt;class 'str'&gt;
Time(asstring)  &lt;class 'str'&gt;

# from print(df)
                        Date                              Day   Date(New)        Time(New) 
0 2019-01-04 00:40:02.802606 2019-01-03 19:40:02.802606-05:00  2019-01-03  19:40:02.802606 

Date(asstring) Time(asstring)
    2019-01-03    07:40:02 PM
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>d.time().strftime("%I:%M:%S %p")</code> which will format the date as requested.</p>
<p><a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">strftime() and strptime() Behavior</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are very close.  %H is the 24 hour format.  You should use %I instead.</p>
<p><a href="https://stackoverflow.com/questions/1759455/how-can-i-account-for-period-am-pm-with-datetime-strptime">How can I account for period (AM/PM) with datetime.strptime?</a></p>
</div>
<span class="comment-copy">why do you think that your time is "stored in the  24 hours format" ? it is stored as datetime.time ... this is just a display issue</span>
<span class="comment-copy">Patrick, I can't thank you enough. I am a a bit of a novice when it comes to handling date times. I am hoping to get better at it!! Now, just a bit more of a help, if you could!!!</span>
<span class="comment-copy">The Time(asstring) column is about 32 seconds ahead from what I would expect.  I am getting  07:00:29 PM when I should be getting 6:59:58 PM. Do you have any idea why that might be?</span>
<span class="comment-copy">@sanster9292 I used datetime.datetime.now as input - and over <i>all</i> times that I create the time is the same : <code>00:40:02.802606   19:40:02.802606-05:00   19:40:02.802606     07:40:02 PM</code> -no 30s difference between those. Does my code give you differences or does your data give you differences? 5h ago was 4 am for me .. there is weired stuff going on if you go to some special dates or curious timezones in the past ... link: <a href="https://stackoverflow.com/questions/11473721/weird-timezone-issue-with-pytz">weird-timezone-issue-with-pytz</a></span>
<span class="comment-copy">Yes I think it is just the data itself. I double and triple checked the logic. I think it also might be that i am in a weird time zone.</span>
<span class="comment-copy">That's what I said too...</span>
<span class="comment-copy">@StevenJohnson You were not quite right but on the right track. See my comment on your answer.</span>
<span class="comment-copy">this would set the output format of all datetime.time() colums?</span>
<span class="comment-copy">@PatrickArtner in this case there is only one datetime.time() column and would only work on that column.</span>
<span class="comment-copy">the dataframe is df3. d is just a variable i am using for list comprehension</span>
<span class="comment-copy">That format is correct because it determines how to read the string date in from the dataframe. It's actually when creating the new dataframe that the formatting needs to change.</span>
