<div class="post-text" itemprop="text">
<p>I've been struggling with JSON transformation using Python. I have JSON in the below format: </p>
<pre><code>{
    "Children": [{ "child": "Child 0"}],
    "Parent": "Parent 10"
},
{
    "Children": [{ "child": "Child 1"}],
    "Parent": "Parent 10"
},
{
    "Children": [{ "child": "Child 2"}],
    "Parent": "Parent 11"
},
</code></pre>
<p>But instead of having duplicated parents, I would like to merge children together to get that:</p>
<pre><code>{
    "Children": [{ "child": "Child 0"}, { "child": "Child 1"}],
    "Parent": "Parent 10"
},
{
    "Children": [{ "child": "Child 2"}],
    "Parent": "Parent 11"
},
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the itertools groupby function. Here's an example with your data grouped by Parent.</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; import pprint

&gt;&gt;&gt; data = [{
    "Children": [{ "child": "Child 0"}],
    "Parent": "Parent 10"
},
{
    "Children": [{ "child": "Child 1"}],
    "Parent": "Parent 10"
},
{
    "Children": [{ "child": "Child 2"}],
    "Parent": "Parent 11"
}]

&gt;&gt;&gt; data_grouped = {k: list(v) for k, v in groupby(data, key=lambda x: x["Parent"])}

&gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=4)
&gt;&gt;&gt; pp.pprint(data_grouped)

{   'Parent 10': [   {   'Children': [{'child': 'Child 0'}],
                         'Parent': 'Parent 10'},
                     {   'Children': [{'child': 'Child 1'}],
                         'Parent': 'Parent 10'}],
    'Parent 11': [{'Children': [{'child': 'Child 2'}], 'Parent': 'Parent 11'}]}
</code></pre>
<p>Here I've placed your example dicts inside a list and group by the Parent entry in each dict. This is all wrapped up inside a dict comprehension to give a meaningful output.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> to do this, which can be serialized at the end:</p>
<pre><code>from collections import defaultdict
from json import dumps

data = [
    {"Children": [{"child": "Child 0"}], "Parent": "Parent 10"},
    {"Children": [{"child": "Child 1"}], "Parent": "Parent 10"},
    {"Children": [{"child": "Child 2"}], "Parent": "Parent 11"},
]

d = defaultdict(list)
for dic in data:
    parent, children = dic["Parent"], dic["Children"]
    d[parent].extend(children)

result = []
for k, v in d.items():
    result.append({"Parent": k, "Children": v})

print(dumps(result))
</code></pre>
<p>Which gives a JSON array of JSON objects:</p>
<pre><code>[{"Parent": "Parent 10", "Children": [{"child": "Child 0"}, {"child": "Child 1"}]}, {"Parent": "Parent 11", "Children": [{"child": "Child 2"}]}]
</code></pre>
<p>You can also group into the data by parent key using a nested <code>defaultdict()</code>:</p>
<pre><code>d = defaultdict(lambda : defaultdict(list))
for dic in data:
    parent, children = dic["Parent"], dic["Children"]
    d[parent]["Children"].extend(children)

print(dumps(d))
</code></pre>
<p>Which gives this new structure:</p>
<pre><code>{"Parent 10": {"Children": [{"child": "Child 0"}, {"child": "Child 1"}]}, "Parent 11": {"Children": [{"child": "Child 2"}]}}
</code></pre>
<p>And will allow easy O(1) lookups for the parent. </p>
</div>
<span class="comment-copy">What have you tried, and what exactly is the problem with it? <i>"struggling"</i> suggests an attempt you could give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> of.</span>
<span class="comment-copy">First step is to read the data, parse the JSON so that you get a dictionary with Python's internal representation. Then, write code to make the transformation and format the whole as JSON again.</span>
