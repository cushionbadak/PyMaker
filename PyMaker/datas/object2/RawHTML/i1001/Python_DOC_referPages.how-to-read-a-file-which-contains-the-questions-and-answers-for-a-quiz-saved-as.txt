<div class="post-text" itemprop="text">
<p>I'm creating a quiz in Python that you can edit, but one of the sections needs the questions to be saved in a file. In this section of code, I'm trying to read the file and then put what it has read into a list so that I can pull certain questions to be displayed on certain buttons. But I keep getting errors that say the list isn't callable.</p>
<p>I've tried to use <code>strip</code> to strip the string of the quotes that appear but I get an error saying</p>
<blockquote>
<p>"list" object has no attribute "strip"</p>
</blockquote>
<p>I'm relatively new to Python so I'm struggling to find other fixes, I've tried to isolate the print in a different line then put it into the list but its ended up saying the list isn't callable again.</p>
<pre><code>textquestions=open('listofquestions','r')

allthequestions = textquestions.readlines()

forbuttons=[print(allthequestions)]

textquestions.close

q1 = forbuttons(0)

buttonq1 = tk.Button(self, text=forbuttons[q1][0])
buttonq1.pack()
</code></pre>
<p>The file has this written in it and nothing else (filler questions to get it to work first):</p>
<pre><code>["What would you wear to work?","Hoodie", "Suit", "Shorts","2"],["How would you greet a customer?","Hey", "Hi", "Hello", "0"],["How many years of experience do you have?","Loads", "None", "Some","1"],["Why do you want to work here?","It's fun", "No money", "Friend told me to","2"]
</code></pre>
<p>Yet when they are printed they seem to be printing like this:</p>
<pre><code>'["What would you wear to work?","Hoodie", "Suit", "Shorts","2"],["How would you greet a customer?","Hey", "Hi", "Hello", "0"],["How many years of experience do you have?","Loads", "None", "Some","1"],["Why do you want to work here?","It's fun", "No money", "Friend told me to","2"]'
</code></pre>
<p>And I think the quotes around all of it are stopping the list from working? Although I'm not sure, maybe the rest of the code is not right either.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error</p>
<blockquote>
<p>"list" object has no attribute "strip"</p>
</blockquote>
<p>appears, because - like the error says - you tried to call method <code>strip</code> on an object of type <code>list</code>. You meant to call <code>strip</code> on a <code>string</code> inside a list I suppose. Anyways, <code>strip</code> doesn't help you with your problem, I think.</p>
<p><strong>In general:</strong> You should probably change the way you're saving your question data.</p>
<hr/>
<p>However, that being said, you can still load the data with:</p>
<pre><code>import yaml

with open('listofquestions') as f:
    data = f.read()
    questions = yaml.safe_load('[{}]'.format(data))
</code></pre>
<p>What happens is, that the content of your file can be interpreted as a partial YAML file - the only thing missing is an opening bracket <code>[</code> and a closing bracket <code>]</code>. We can add those to the content after reading the file and parse as YAML content afterwards.</p>
<p>Improvements:</p>
<ul>
<li>Use <code>with</code> to read files: <a href="https://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for">What is the python "with" statement designed for?</a></li>
<li>Use <code>yaml</code> module to parse the file content: <a href="https://stackoverflow.com/questions/8127686/parsing-a-yaml-file-in-python-and-accessing-the-data">Parsing a YAML file in Python, and accessing the data?</a></li>
</ul>
<p>The first question is in <code>questions[0][0]</code>, the three answers in <code>questions[0][1]</code>, <code>questions[0][2]</code> and <code>questions[0][3]</code> and the correct solution in <code>questions[0][4]</code>.</p>
<p>You can access these values to build your GUI similar to this:</p>
<p><a href="https://i.stack.imgur.com/Zfpmr.png" rel="nofollow noreferrer"><img alt="screenshot" src="https://i.stack.imgur.com/Zfpmr.png"/></a></p>
<pre><code>import tkinter as tk
root = tk.Tk()
label_question = tk.Label(root, text=questions[0][0])
label_question.pack(side=tk.TOP)
button_answer_1 = tk.Button(root, text=questions[0][1])
button_answer_1.pack(side=tk.LEFT)
button_answer_2 = tk.Button(root, text=questions[0][2])
button_answer_2.pack(side=tk.LEFT)
button_answer_3 = tk.Button(root, text=questions[0][3])
button_answer_3.pack(side=tk.LEFT)
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to parse the string read from the text file so that Python sees its contents in a structured fashion.</p>
<p>One very simple way to do this is to add <code>[</code> and <code>]</code> and treat it as a <a href="http://json.org/" rel="nofollow noreferrer">JSON</a> structure:</p>
<pre><code>import json

with open('listofquestions') as textquestions:
    questions_json = '[' + textquestions.read() + ']'
    allthequestions = json.loads(questions_json)
</code></pre>
<p>Python' <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code> function</a> would work as well, but it can introduce security vulnerabilities if the input data is untrusted (it will execute arbitrary code in it).</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems with your approach, some coding errors, some conceptual.</p>
<h1>The problem with the concept:</h1>
<p>As I observed, the main issue is that you seem to think that putting some text into a file that is a comma-separated sequence of square-bracket enclosed comma-separated double-quoted text elements will create a list in your Python program when read using the file's handle with <code>readlines()</code>.</p>
<p>What's more, when you complained about the single-quote enclosed string that was printed, it seems like you expected what you read from the file to be printed as separate square-bracket enclosed elements (perhaps each on a single line?), instead of a single string.</p>
<p>First, what you have in your text read from the file are <em>not</em> Python lists.
Python source code is only interpreted as source code, with statements and data like numbers, lists, tuples, etc. because they are read by the Python interpreter.</p>
<p>When you <code>open()</code> a file and then call <code>readlines()</code> on the file handle, it is <em>not</em> the Python interpreter that reads the file. Actually, at a low level, it is the kernel that reads the file in appropriately sized chunks and puts it into memory, namely into the piece of memory your <code>allthequestions</code> variable refers to.
Think about it: if the first theory were true, then using <code>readlines()</code> on a file would actually execute anything that looked like a Python command.
Then, how would it even know what to return? The result of the last expression, perhaps? A list of all expression results in the file? A tuple of them? No matter how we look at it, it would be hard to define what even your expected behavior for <code>readlines()</code> is.
Things like this are best experimented upon in isolated, smaller examples, before putting them to use in a complete program.</p>
<p>Also, as its name suggests, <code>readlines()</code> reads text as  <em>lines</em>, not as comma-separated Python lists or any other tokens.
The result, although not a list, is an iterable collection of all lines in the file. This means that in your case - according to what you have written -, is a single line, containing:</p>
<p><code>["What would you wear to work?","Hoodie", "Suit", "Shorts","2"],["How would you greet a customer?","Hey", "Hi", "Hello", "0"],["How many years of experience do you have?","Loads", "None", "Some","1"],["Why do you want to work here?","It's fun", "No money", "Friend told me to","2"]</code></p>
<p>, including the newline at the end.</p>
<p>Inspecting this data structure, it seems like you want to parse a single sequence of sequences from a file, where each nested sequence contains text elements. The first (or in other words, 0th) element of each nested sequence is a question, whereas every other text element is a possible answer to that question.
What the number in the last element means, I could not decipher.</p>
<h2>Solutions:</h2>
<p>You could use a text parsing method called "regular expressions", but it might be too complicated for what you are trying to achieve.
Instead, what I'd suggest is to <em>choose a different data structure</em>.</p>
<p>If you'd only like to handle your data in Python, I'd suggest a method of <em>serialization</em>, like the <code>pickle</code> module.
This module allows you to write a python object to a file in such a format that it can be read back again into a variable (of course, NOT with <code>readlines()</code>, which is for reading lines, not objects).</p>
<p>To demonstrate how it works at the writing and reading end, here are some code snippets:</p>
<p>Example for the writing component:</p>
<pre><code># write_questions.py
import pickle

all_the_questions = (["What would you wear to work?","Hoodie", "Suit",     "Shorts","2"],["How would you greet a customer?","Hey", "Hi", "Hello", "0"],["How     many years of experience do you have?","Loads", "None", "Some","1"],["Why do you     want to work here?","It's fun", "No money", "Friend told me to","2"])

questions_file = open("questions.dmp", "w")
pickle.dump(all_the_questions, questions_file)

questions_file.close()
</code></pre>
<p>Example for the reading component:</p>
<pre><code># read_questions.py
import pickle

questions_file = open("questions.dmp")

all_the_questions = pickle.load(questions_file)

print(all_the_questions[0])
print(all_the_questions[1])
</code></pre>
<p>The data structure of <code>all_the_questions</code> was a tuple of lists of strings, which was dumped into the file "questions.dmp" using <code>pickle.dump()</code>.
Note that the created file, "questions.dmp" contains a special object notation that is used by <code>pickle</code> to read its contents back as a variable, and is not human-readable!</p>
<p>Once you've run the reading part, you'll see that indexing on the <code>all_the_questions</code> variable worked properly after the variable was created from the file contents using <code>pickle.load()</code> and you get something like this written to your terminal:</p>
<pre>['What would you wear to work?', 'Hoodie', 'Suit', 'Shorts', '2']
['How would you greet a customer?', 'Hey', 'Hi', 'Hello', '0']</pre>
<p>Another solution would be to use a standard textual data format, like <em>CSV</em> (comma separated values), for which there are parsers in the Python standard library.
Basically, you could store each question list as a separate line in a "questions.csv" file without delimiting it with <code>[]</code> characters, and each string could occupy a position between commas within the question line, like this:</p>
<pre>
What would you wear to work?,Hoodie, Suit, Shorts,2
How would you greet a customer?,Hey, Hi, Hello, 0
How many years of experience do you have?,Loads, None, Some,1
Why do you want to work here?,It's fun, No money, Friend told me to,2
</pre>
<p>The answer is already too long, so I leave it up to the reader interested in using CSV parsing to look up how it works. There are several resources available, just as for pickle.
The benefits are that the data, when stored in a file, will be human-readable, and handling it won't be restricted to Python programs, since CSV is a fairly often used, old format.</p>
<h2>Coding issues:</h2>
<p>The previous section already touched on the coding part with regards to <code>readlines()</code>, but there are some more problems.</p>
<p>First:</p>
<p><code>forbuttons=[print(allthequestions)]</code></p>
<p>This line prints the text representation of the collection object stored in <code>allthequestions</code>, converts the return value of <code>print</code> into a list, and binds the resulting value to <code>forbuttons</code>.
Since <code>print()</code> always returns a value of <code>None</code>, the value of <code>forbuttons</code> will be a singleton list, only containing <code>None</code>.
Printed, this would look something like this:</p>
<p><code>[None]</code></p>
<p>Next, the</p>
<p><code>textquestions.close</code></p>
<p>line does not actually <em>call</em> the <code>close()</code> function on the file handle, it only <em>evaluates the function object</em>, doing nothing.</p>
<p>Then, the original snippet tries to call the object in <code>forbuttons</code> with an argument of <code>0</code> as if it were a function. Alas, it is not, it is the list <code>[None]</code>, as explained above:</p>
<p><code>q1 = forbuttons(0)</code></p>
<p>Afterwards, you suddenly decide to treat <code>forbuttons</code> as an indexable list instead of a function, a multi-dimensional one at that!</p>
<p><code>buttonq1 = tk.Button(self, text=forbuttons[q1][0])</code></p>
<p>To be honest, I really have no idea what this would get you, so I can not propose an alternative either.
Maybe, what you wanted to do was something like:</p>
<p><code>buttonq1 = tk.Button(self, text=allthequestions[0][0])</code></p>
<p>, where the button's text would be set to the very first question, had you used e.g. pickle instead of <code>readlines()</code>.</p>
<p>Another issue I find in your data representation is that you basically use magic numbers like <code>0</code> to remember where the actual question part of a question list is.
Maybe using a dictionary where the key is the actual question string, and the value the possible answers would be better. In that case, a single question structure would look like:</p>
<pre>{ "What would you wear to work?" : ["Hoodie", "Suit", "Shorts","2"] }</pre>
<p>The naming convention is also whacky for a couple of reasons:</p>
<p>First, it is ambiuous what is what. Is a "question" a whole data structure that includes the question string as it would be stated by a human, as well as the possible answers? Or is it just the question string?</p>
<p>Second: It does not look like variables in general follow any sane naming conventions. Usual naming conventions include "camelCase", "PascalCase" (or upper camel case), "snake_case", etc.
The Python style guide, PEP-8 recommends using "snake_case" for variables and functions, "UPPER_SNAKE_CASE" for variables intended to be constant and "PascalCase" for type names.</p>
<h1>P.S.</h1>
<p>In general, one should always learn and know what each concept, function, etc. is about / does before applying them, especially together.
This requires a lot of practice and experimentation, as well as learning from documentation.</p>
<p>To be honest, the original question does not look at all like much research or work was put into it.
Dispite this, I have not disliked it, seeing that the original poster was a new contributor, and - as it seems - fairly new to programming as well.</p>
</div>
<span class="comment-copy"><code>forbuttons=[print(allthequestions)]</code> this makes no sense.</span>
<span class="comment-copy">I don't get what you are trying to achieve. Do you want a separate button for each question in the file? And where these questions should be shown when the user click on the button? On the terminal? In a popup dialog?</span>
<span class="comment-copy">Ah thank you so much, sorry for all my code being not too great and pretty confusing. Super useful!</span>
<span class="comment-copy">Thank you so much!</span>
