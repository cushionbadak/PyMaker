<div class="post-text" itemprop="text">
<p>Vanilla Python REPL:</p>
<pre><code>&gt;&gt;&gt; 'na'
'na'
&gt;&gt;&gt; for i in range(4):
...     f'{_+_}'
... else:
...     'batman'
... 
'nana'
'nananana'
'nananananananana'
'nananananananananananananananana'
'batman'
&gt;&gt;&gt; 
</code></pre>
<p>IPython REPL with same interpreter:</p>
<pre><code>&gt;&gt;&gt; 'na'
'na'
&gt;&gt;&gt; for i in range(4): 
...     f'{_+_}' 
... else: 
...     'batman' 
...
&gt;&gt;&gt; _
'na'

</code></pre>
<p>This difference is <a href="https://stackoverflow.com/a/46029260/674039">apparently related to the mode in which IPython compiles code</a>, and unrelated to the <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer">display hook</a>.  Is it possible to configure IPython to compile/exec cell blocks as a plain Python REPL does? I'd prefer if IPython would not interfere or modify such underlying runtime machinery.</p>
</div>
<div class="post-text" itemprop="text">
<p>Set the <a href="https://ipython.readthedocs.io/en/stable/config/options/terminal.html#configtrait-InteractiveShell.ast_node_interactivity" rel="nofollow noreferrer"><code>InteractiveShell.ast_node_interactivity</code></a> setting to <code>'all'</code>, either through the <code>%config</code> magic command:</p>
<pre><code>%config InteractiveShell.ast_node_interactivity='all'
</code></pre>
<p>or in your <code>ipython_config.py</code></p>
<pre><code>c.InteractiveShell.ast_node_interactivity = 'all'
</code></pre>
<p>This will cause IPython to compile everything in <code>'single'</code> mode, the mode that triggers <code>sys.displayhook</code>, instead of <code>'exec'</code> mode, which doesn't use <code>sys.displayhook</code>.</p>
<hr/>
<p>The possible settings for <code>InteractiveShell.ast_node_interactivity</code> are currently</p>
<ul>
<li><code>'all'</code>: compile everything in <code>'single'</code> mode.</li>
<li><p><code>'last'</code>: compile the last (simple or compound) statement of a cell in <code>'single'</code> mode. Differs from <code>'all'</code> in cases like</p>
<pre><code>In [7]: for i in range(5):
   ...:     i
   ...: for i in range(3):
   ...:     i
   ...:     
Out[7]: 0
Out[7]: 1
Out[7]: 2
</code></pre>
<p><code>'all'</code> would have printed the values of <code>i</code> from both loops.</p></li>
<li><p>'<code>last_expr'</code>: compile the last statement of a cell in <code>'single'</code> mode if that statement is an expression statement. This is IPython's default.</p></li>
<li><p><code>'none'</code>: compile everything in <code>'exec'</code> mode.</p></li>
<li><p><code>'last_expr_or_assign'</code>: like <code>'last_expr'</code>, but does some additional AST transformation to print the value assigned if the last statement is an assignment statement:</p>
<pre><code>In [2]: xyz = "something else"
Out[2]: "something else"
</code></pre></li>
</ul>
</div>
<span class="comment-copy">what is this sorcery?!</span>
<span class="comment-copy">Python's a snek. snek_case loves underscores. Under_scores in iPython reuse the previous output.</span>
<span class="comment-copy">Also the <code>_</code> isn't reassigned in the loop.  It's always the last <code>Out[..]</code> value (and <code>__</code> and <code>___</code> are the previous 2.</span>
<span class="comment-copy">Note that in default config (which the OP clearly isn't using, but others might) it will prefix all the echo-ed lines with <code>Out[#]:</code>, which kinda ruins the effect. Reverting to the classic Python prompt appearance is probably a good idea in that case, by adding the config file setting <code>c.TerminalInteractiveShell.prompts_class = 'IPython.terminal.prompts.ClassicPrompts'</code></span>
