<div class="post-text" itemprop="text">
<p>I am using python <strong>in</strong> operator with <strong>for</strong> loop and with <strong>if</strong> statement. My question is how is <strong>in</strong> implemented, that it behaves differently in this two cases: it iterates when using <strong>for</strong> loop and it checks if some element exists when using with <strong>if</strong> statement? Does this depend on implementation of <strong>for</strong> and <strong>if</strong>?</p>
<pre><code>    for i in x:
        #iterates

    if i in x:
        #checks weather i in x or not 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The keyword "in" in python solves different purposes based on "for" and "if". please look at <a href="https://stackoverflow.com/questions/25573715/mysterious-for-loop-in-python">this related link in stack overflow</a> for more clarity </p>
</div>
<div class="post-text" itemprop="text">
<p>The reason is that <code>for...in</code> is something different from just <code>in</code>.</p>
<p><code>for x in y</code> iterates over <code>y</code>.</p>
<p><code>if x in y</code> calls <code>y.__contains__(x)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>in</code> keyword is an operator usually:</p>
<pre><code>print(2 in [1, 2, 3])  # True
if 3 in range(7, 20):
   print('3 in range!')
</code></pre>
<p>It corresponds to the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>object.__contains__</code></a> special method. The expression <code>a in b</code> corresponds to <code>type(b).__contains__(a)</code>. Note that both <code>a</code> and <code>b</code> are names that are looked up.</p>
<p>In a <code>for</code> statement, <code>in</code> is <em>not</em> an operator. It is part of the <code>for .. in ..</code> syntax and separates the loop variable <em>name</em> from the iterable.</p>
<pre><code>for thing in range(20):
    print(thing)  # thing is something else on each step
</code></pre>
<p>Note that <code>for a in b</code> only <code>b</code> is a name that is looked up. <code>a</code> is a name to bind to, similar to an assignment statement.</p>
<hr/>
<p>Python syntax has several constructs where the leading keyword defines the meaning of following keywords. For example, the <code>as</code> keyword has a different meaning in <code>import</code> and <code>with</code>:</p>
<pre><code># as aliases ExitStack
from contextlib import ExitStack as ContextStack

# as holds the result of ContextStack().__enter__()
with ContextStack() as stack:
    ...
</code></pre>
<p>It helps to think about such keywords not by <em>implementation</em> but by <em>meaning</em>. For example, <code>a in b</code> always means that "<code>a</code> is contained by <code>b</code>".</p>
</div>
<div class="post-text" itemprop="text">
<p>Membership testing with <code>in</code> is implemented via the method <code>__contains__</code> (see <a href="https://docs.python.org/2.7/reference/expressions.html#membership-test-operations" rel="nofollow noreferrer">Documentation</a>). The different behaviour comes from the keyword before, <code>for</code> and <code>if</code> in your case.</p>
<p>Iteration with <code>for</code> is implemented such, that the method <code>next</code> is called and its return value is written to the iteration variable as long as the condition after the key word <code>for</code> is true. Membership testing in general is just a condition.</p>
<p><strong>Code</strong></p>
<pre><code>A in B
</code></pre>
<p><strong>Execution</strong></p>
<pre><code>B.__contains__(A)  # returns boolean
</code></pre>
<hr/>
<p><strong>Code</strong></p>
<pre><code>for A in B :
    # Body
</code></pre>
<p><strong>Execution</strong></p>
<pre><code>A = B.next()
if B.__contains__(A) :
    # Body

A = B.next()
if B.__contains__(A) :
    # Body

# ...

A = B.next()
if B.__contains__(A) :
    # B.next() throws "StopIteration" if there is no more element
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In many languages you'll find keywords that have multiple uses. This is simply an example of that. It's probably more helpful to think in terms of <em>statements</em> than thinking about the <code>in</code> keyword like an operator.</p>
<p>The statement  <code>x in y</code> is a boolean-valued statement taking (assuming <code>y</code> is some appropriate collection) <code>True</code> if and only if the value of <code>x</code> is in the collection <code>y</code>. It is implemented with the <code>__contains__</code> member function of <code>y</code>.</p>
<p>The statement <code>for x in y:</code> starts a loop, where each iteration <code>x</code> takes a different value from the collection <code>y</code>. This is implemented using the <code>__iter__</code> member function of <code>y</code> and <code>__next__</code> on the resulting iterator object.</p>
<p>There are other statements where the <code>in</code> keyword can appear, such as list comprehension or generator comprehension. </p>
</div>
<span class="comment-copy">Thank you guys.</span>
<span class="comment-copy">@Nane please upvote answers that help you and accept the one that answers your question best.</span>
