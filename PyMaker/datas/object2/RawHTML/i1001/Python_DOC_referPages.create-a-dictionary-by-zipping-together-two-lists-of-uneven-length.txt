<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19686533/how-to-zip-two-differently-sized-lists">How to zip two differently sized lists?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I have two lists different lengths, L1 and L2. L1 is longer than L2. I would like to get a dictionary with members of L1 as keys and members of L2 as values.</p>
<p>As soon as all the members of L2 are used up. I would like to start over and begin again with L2[0].</p>
<pre><code>L1 = ['A', 'B', 'C', 'D', 'E']    
L2 = ['1', '2', '3']    
D = dict(zip(L1, L2))    
print(D)
</code></pre>
<p>As expected, the output is this:</p>
<pre><code>{'A': '1', 'B': '2', 'C': '3'}
</code></pre>
<p>What I would like to achieve is the following:</p>
<pre><code>{'A': '1', 'B': '2', 'C': '3', 'D': '1', 'E': '2'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="noreferrer"><code>itertools.cycle</code></a> to cycle around to the beginning of <code>L2</code>:</p>
<pre><code>from itertools import cycle
dict(zip(L1, cycle(L2)))
# {'A': '1', 'B': '2', 'C': '3', 'D': '1', 'E': '2'}
</code></pre>
<hr/>
<p>In your case, concatenating <code>L2</code> with itself also works.</p>
<pre><code># dict(zip(L1, L2 * 2))
dict(zip(L1, L2 + L2))
# {'A': '1', 'B': '2', 'C': '3', 'D': '1', 'E': '2'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="noreferrer">itertools.cycle</a>:</p>
<pre><code>from itertools import cycle

L1 = ['A', 'B', 'C', 'D', 'E']
L2 = ['1', '2', '3']

result = dict(zip(L1, cycle(L2)))

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'E': '2', 'B': '2', 'A': '1', 'D': '1', 'C': '3'}
</code></pre>
<p>As an alternative you could use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer">enumerate</a> and index <code>L2</code> modulo the length of <code>L2</code>:</p>
<pre><code>result = {v: L2[i % len(L2)] for i, v in enumerate(L1)}
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>cycle</code> is fine, but I shall add this modulo based approach:</p>
<pre><code>{L1[i]: L2[i % len(L2)] for i in range(len(L1))]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="noreferrer"><code>collections.deque()</code></a> to create an circular FIFO queue:</p>
<pre><code>from collections import deque

L1 = ['A', 'B', 'C', 'D', 'E']    
L2 = deque(['1', '2', '3'])

result = {}
for letter in L1:
    number = L2.popleft()
    result[letter] = number
    L2.append(number)

print(result)
# {'A': '1', 'B': '2', 'C': '3', 'D': '1', 'E': '2'}
</code></pre>
<p>Which pops the left most item currently in <code>L2</code> and appends it to the end once the number is added to the dictionary. </p>
<p><strong>Note:</strong> Both <a href="https://docs.python.org/3/library/collections.html#collections.deque.popleft" rel="noreferrer"><code>collections.deque.popleft()</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.deque.append" rel="noreferrer"><code>collections.deque.append()</code></a> are O(1) operations, so the above is still O(N), since you need to traverse all the elements in <code>L1</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Other option <strong>without dependencies</strong> with good old <code>for</code> loop:</p>
<pre><code>D = {}
for i, e in enumerate(L1):
  D[e] = L2[i%len(L2)]

D #=&gt; {'A': '1', 'B': '2', 'C': '3', 'D': '1', 'E': '2'}
</code></pre>
<p>Or just:</p>
<pre><code>{ e: L2[i%len(L2)] for i, e in enumerate(L1) }
#=&gt; {'A': '1', 'B': '2', 'C': '3', 'D': '1', 'E': '2'}
</code></pre>
</div>
<span class="comment-copy">Curious as to the reason for the close votes. What about this question is too broad? If it is because the OP hasn't offered any solution, then I can understand OP may not have the first clue where to begin. Based on their explanation of the question, it does not seem like they could have googled for "cycle", "circular", or other similar keywords that would have led to a solution.</span>
<span class="comment-copy">Isn't that already here? <a href="https://stackoverflow.com/a/54095907/4909087">stackoverflow.com/a/54095907/4909087</a> and also in another answer.</span>
