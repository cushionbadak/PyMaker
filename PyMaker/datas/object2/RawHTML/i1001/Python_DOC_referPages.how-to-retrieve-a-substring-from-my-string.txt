<div class="post-text" itemprop="text">
<p>The string variable <code>myvar</code> can have the following values:</p>
<pre><code>261.30 (NM) / 300.76 (MI) / 483.93 (KM)
952.27 (NM) / 1,096.09 (MI) / 1,763.61 (KM)
</code></pre>
<p>I need to extract the numbers <code>483.93</code> and <code>1,763.61</code>. These numbers should be converted to float numbers or rounded up to integers.</p>
<p>This is what I tried:</p>
<pre><code>mylar = "261.30 (NM) / 300.76 (MI) / 483.93 (KM)"
int(myvar[28:-8])
</code></pre>
<p>It works in the first case (<code>261.30 (NM) / 300.76 (MI) / 483.93 (KM)</code>). But it fails in case of <code>952.27 (NM) / 1,096.09 (MI) / 1,763.61 (KM)</code>. Is there any generic solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use this regex that detects the last number in the string and places it in group1,</p>
<pre><code>([^ ]*)[^\d]*$
</code></pre>
<p><strong><a href="https://regex101.com/r/KxsJq4/1" rel="nofollow noreferrer">Demo</a></strong></p>
<p>Then with following python code, you can convert it into float or int. I am converting it to float as they are decimal values but you can easily cast them to int.</p>
<pre><code>import re

arr = ['261.30 (NM) / 300.76 (MI) / 483.93 (KM)','952.27 (NM) / 1,096.09 (MI) / 1,763.61 (KM)']

for s in arr:
 val = re.search(r'([^ ]*)[^\d]*$', s)
 floatval = float(re.sub(r',','',val.group(1)))
 print('Float value: ' + str(floatval))
 print('Int value: ' + str(int(floatval)))
</code></pre>
<p>Prints,</p>
<pre><code>Float value: 483.93
Int value: 483
Float value: 1763.61
Int value: 1763
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With single <code>re.search</code> function, without any replacement:</p>
<pre><code>import re

myvar = '952.27 (NM) / 1,096.09 (MI) / 1,763.61 (KM)'
num = re.search(r'\/\s+(\d+),?(\d+\.\d+)\s+\(KM\)', myvar)
if num:
    num = float(num.group(1) + num.group(2))

print(num)
</code></pre>
<p>The output:</p>
<pre><code>1763.61
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also achieve the same by using only <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">split()</a> </p>
<pre><code>str1="261.30 (NM) / 300.76 (MI) / 483.93 (KM)"
last_num_string=str1.split('/')[2].split('(')[0]
last_num_float=float(last_num_string)
print(last_num_float)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What I would do in this case is create a list of the values, from which I can extract any of those.</p>
<pre><code>myvar2 = myvar.replace("/", "").replace(",", "")
myvar2 = myvar2.split()
# This gives a list like this: ["261.30","(NM)","300.76","(MI)","483.93","(KM)"]
myfloat = float(myvar[4]) # This will return 483.93 on the first string and 1,763.61 on the second.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with regular expression.</p>
<pre><code>import re

target = '952.27 (NM) / 1,096.09 (MI) / 1,763.61 (KM)'

regex = r'.* \(NM\) \/ .* \(MI\) \/ (.*) \(KM\)'

res_str = re.findall(regex, target)
float_str = res_str[0].replace(',', '') 
result = float(float_str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since the values are followed by <code>(KM)</code> you could use a positive lookahead:</p>
<pre><code>\S+(?= \(KM\))
</code></pre>
<ul>
<li><code>\S+</code> Match 1+ non whitespace characters</li>
<li><code>(?= \(KM\))</code> Positive lookahead to check what is on the right is a space and (KM)</li>
</ul>
<p>For example:</p>
<pre><code>regex = r"\S+(?= \(KM\))"
strings = ["261.30 (NM) / 300.76 (MI) / 483.93 (KM)", "952.27 (NM) / 1,096.09 (MI) / 1,763.61 (KM)"]

for s in strings:
    matches = re.search(regex, s)
    if matches:
        print(float(matches.group().replace(',', '')))
</code></pre>
<p>That will give you:</p>
<pre><code>483.93
1763.61
</code></pre>
<p><a href="https://regex101.com/r/ViH3zX/1" rel="nofollow noreferrer">Regex demo</a> | <a href="https://ideone.com/9OMoA0" rel="nofollow noreferrer">Python demo</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
m="261.30 (NM) / 300.76 (MI) / 483.93 (KM)"
print(float(re.split('\/',re.sub(',','',m))[2][:-5]))
</code></pre>
</div>
<span class="comment-copy">Do you have any experience with RegEx?</span>
<span class="comment-copy">Man, their lengths are different, of course it won't work for the second case. And it has a comma even in between if you even go for int(mylar[30:-8]) and it won't convert it into string.  Simply use regex.</span>
<span class="comment-copy">Thanks for comments, guys. I have little experience with regex. I know all these issues of my original code. Maybe I did not explain very well, but my point was that the code is obviously wrong and I asked about a correct solution.</span>
<span class="comment-copy">This won't work if the value to be captured is like <code>1,222,763.61</code> as it doesn't handle multiple commas in the value, which can be the case.</span>
<span class="comment-copy">@PushpeshKumarRajwanshi: Good to know. Thanks. But in my case I will not have these big numbers.</span>
<span class="comment-copy">@ScalaBoy: That's good that you don't have values containing multiple commas. But in general I think you should go with a more generic approach which works for most cases, as your code becomes robust. Otherwise, if the code gets maintained later by someone else, then you will only come to know as a bug when the values get large enough to include multiple commas. Although I understand this may be a short lived case for you where parsing it this way is more than enough, so all good.</span>
<span class="comment-copy">In my opinion better way is use "([\.,\s\d]+)". "(.*)" is too general.</span>
