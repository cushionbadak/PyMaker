<div class="post-text" itemprop="text">
<p><strong>TO THE POINT VERSION (tldr):</strong>
Can I use id() in Python to get the location of a variable in memory, restart my computer, and then use that same id to verify if the data is still stored there? Or is id() a ‘Python-only’/session dependent value?</p>
<p>—————————————————</p>
<p><strong>DETAILED VERSION:</strong></p>
<p><em>Background:</em></p>
<p>I’m storing an integer in a variable x, then using Phthon’s id() method to get the location in memory. I’m verifying the value in that location matches what I set to x using ctypes and the id returned from id().</p>
<p>What I need to do is remove the variable from RAM (physically remove it so it no longer exists and could never be recovered). I know that makes it sound like I’m doing something sketchy, but I promise that is not the case.</p>
<p>I’ve tried:</p>
<p>del x</p>
<p>x = None</p>
<p>But when I run ctypes using the id I still get the value initially set to x.</p>
<p><em>Potential Solution:</em></p>
<p>Since messing around with the physical RAM is above my skill level, my plan is to save the value id() returns in a text file, restart my computer (theoretically clearing RAM) and then use another script to verify if x’s pre-resart location in memory holds an integer between 0-255. If it does not, then continue with the program.</p>
<p><em>Problem/Question:</em></p>
<p>Does the value I get from Python’s id() method give an absolute address in memory that I can check after restart (or using a different programming language) or is that value relative to a Python session?</p>
<p>I tried looking at CPython on GitHub, but I couldn’t find the id() method to see what is goin on under the hood.</p>
</div>
<div class="post-text" itemprop="text">
<p>The correspondence of the output of <code>id()</code> to the memory address is an <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">implementation detail</a> of CPython.  It does not apply to other python implementations (such as as Jython or Pypy) and it may not apply to future releases of CPython.  You should not depend on this behaviour.</p>
</div>
<span class="comment-copy">"Still stored there"? How can it be?</span>
<span class="comment-copy">I think you're being thrown by the python integer cache, otherwise I'm totally lost on what you're asking.</span>
<span class="comment-copy">Restarting your computer erases <b>all</b> memory contents. There is absolutely no need to go and try and erase that data from memory again after a reboot.</span>
<span class="comment-copy">Have you verified that the integer object has a reference count of 0? <code>del x</code> only removes that one reference (<code>x = None</code> after <code>del x</code> is entirely redundant, there is no point in doing that). Python objects are removed only when their reference count drops to 0. If you have a ctypes reference to the object then the reference count is <b>not yet 0</b>.</span>
<span class="comment-copy">Next, a modern OS <b>protects</b> per-process memory from other processes. Another process can't just go and read that memory. If it could, then things like encryption would be impossible. You are trying to solve a problem that doesn't exist here.</span>
