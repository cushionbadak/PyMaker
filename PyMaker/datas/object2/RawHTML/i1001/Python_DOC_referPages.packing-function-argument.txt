<div class="post-text" itemprop="text">
<p>I want to call a function sending several arguments inside a single variable. </p>
<p>In other words, I wanted to do <code>Test(some_var)</code> with the same result as <code>x1</code> in the example.</p>
<pre><code>class Test:    
    def __init__(self, one, two=None):
        self.one = one

        if two is not None:
            self.two = two


tup = 'a', 'b'
lst = ['a', 'b']

x1 = Test('a', 'b')
x2 = Test(tup)
x3 = Test(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>*</code> operator to unpack a tuple or list:</p>
<pre><code>class Test:
    def __init__(self, one, two=None):
        self.one = one
        if two is not None:
            self.two = two


tup = 'a', 'b'
lst = ['a', 'b']

x1 = Test('a', 'b')
x2 = Test(*tup) # unpack with *
x3 = Test(*lst) # unpack with *
print(vars(x1) == vars(x2) == vars(x3)) # True
</code></pre>
<p>If you have keyword arguments and a <code>dict</code>, you can also unpack the dict with two <code>*</code>s:</p>
<pre><code>class Test:
    def __init__(self, one=None, two=None):
        self.one = one
        if two is not None:
            self.two = two

kwargs = {'one': 'a', 'two': 'b'}

x1 = Test('a', 'b')
x2 = Test(**kwargs)
print(vars(x1) == vars(x2)) # True
</code></pre>
<p>See <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">here</a>.</p>
<p>The unpacking operator is very versatile and is not just for function arguments. For example:</p>
<pre><code>&gt;&gt;&gt; [*range(4), 4]
[0, 1, 2, 3, 4]
&gt;&gt;&gt; {'x': 1, **{'y': 2}}
{'x': 1, 'y': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to unpack the argument using operator <code>*</code>:</p>
<pre class="lang-python prettyprint-override"><code>Test(*tup)
</code></pre>
<p>By the way, operator <code>*</code> is used when you want to assign <strong>arguments by position</strong>. If you want to assign <strong>arguments by name</strong> you can use operator <code>**</code> in with a dictionary:</p>
<pre><code>def foo(a, b):
    print(a, b)

kwargs = {'b': 20, 'a': 0}

foo(**kwargs) # 0 20
</code></pre>
</div>
<span class="comment-copy">@bad_coder please, if this worked for you, mark it as accepted (green checkmark). Thanks in advance!</span>
<span class="comment-copy">I liked both answers but system only lets me accept one. The other answer was given first and is slightly more elaborate. I appreciate your help, thank you.</span>
<span class="comment-copy">Well, I think that actually my answer was given first (a few seconds) but you are right, @Tomothy32's answer is better than mine, at least more elaborate) so I agree with your choice. Thnx for upvoting anyway!</span>
