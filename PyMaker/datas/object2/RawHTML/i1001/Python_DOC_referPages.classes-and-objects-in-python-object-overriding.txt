<div class="post-text" itemprop="text">
<p>need a small help on this code</p>
<pre><code>class Employee:
    def __init__(self,name):
        self.name = name
    def greet(self,other):
        print ("hello, %s" %(other)) &lt;--- doubt

class CEO(Employee):
   def greet(self,other):
      print ("Get back to work, %s!" %(other))  &lt;---- doubt
c1 = CEO("Emily")
e1 = Employee("bhargav")

c1.greet(e1)
e1.greet(c1)
</code></pre>
<p>I know if i change the variables in the highlighted lines to "other.name" i'll be getting the desired output as below.</p>
<pre><code>Get back to work, bhargav!
hello, Emily
</code></pre>
<p>But if i just give "other" ill be getting the below output.</p>
<pre><code>Get back to work, &lt;__main__.Employee object at 0x0000021858C64FD0&gt;!
hello, &lt;__main__.CEO object at 0x0000021858C64F60&gt;
</code></pre>
<p>Can you guys please explain me the importance of adding ".name" in the print statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this line <code>c1.greet(e1)</code> you're passing <code>e1</code> which is <code>Employee("bhargav")</code> object of class Employee.</p>
<p>So when you print <code>"Get back to work, %s!" %(other)</code>, you're trying to print the object of Employee class and not the name attribute of that class.</p>
<p>If you want to print the <code>name</code> attribute of the object whenever you try to print the object, then You can override the <code>__str__()</code> function and provide your custom string representation for the object.</p>
<p>Something like this:</p>
<pre><code>class Employee:
    def __init__(self,name):
        self.name = name

    def __str__(self):
        return self.name

    def greet(self, other):
        print("hello, %s" % other)

class CEO(Employee):
    def __str__(self):
        return self.name

    def greet(self, other):
        print("Get back to work, %s!" % other)
</code></pre>
<p>Reference : <a href="https://www2.lib.uchicago.edu/keith/courses/python/class/5/#__str__" rel="nofollow noreferrer">https://www2.lib.uchicago.edu/keith/courses/python/class/5/#<strong>str</strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <code>c1.greet(e1)</code> and <code>e1</code> is <code>e1 = Employee("bhargav")</code>, which is an object of <strong>Employee class</strong>. </p>
<p>Hence, you are getting output as <code>Get back to work, &lt;__main__.Employee object at 0x0000021858C64FD0&gt;!</code> </p>
<p>Doing <code>print(e1.name)</code> will print <code>bhargav</code> and doing <code>print(e1)</code> will just print the Employee object along with it's memory location (<em>0x0000021858C64FD0</em>).                   </p>
<p>To achieve what you are trying to do use <code>dunder __str__</code> in Employee class like this:              </p>
<pre><code>class Employee:
    def __init__(self,name):
        self.name = name
    def __str__(self):
        return self.name
    def greet(self,other):
        print ("hello, %s" %(other)) #&lt;--- doubt

class CEO(Employee):
   def greet(self,other):
      print ("Get back to work, %s!" %(other))  #&lt;---- doubt     

c1 = CEO("Emily")
e1 = Employee("bhargav")

c1.greet(e1)
e1.greet(c1)
</code></pre>
<p>Output:         </p>
<pre><code>Get back to work, bhargav!
hello, Emily
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to return result from object of a class then you need to declare it.
Using <strong>repr</strong>(for python2) or <strong>str</strong>(for python3 and python2).</p>
<pre><code>class Employee:
    def __init__(self,name):
        self.name = name
    def greet(self,other):
        print ("hello, %s" %(other))
    def __str__(self):
        return (self.name)

class CEO(Employee):
    def greet(self,other):
        print ("Get back to work, %s!" %(other))
    def __str__(self):
        return ("self.name")
c1 = CEO("Emily")
e1 = Employee("bhargav")
c1.greet(e1)
e1.greet(c1)
</code></pre>
<p>Now this will show desired output.</p>
</div>
<span class="comment-copy">In this case <a href="https://docs.python.org/3/tutorial/classes.html#class-objects" rel="nofollow noreferrer"><code>other</code></a> is a class instance. So you should use <code>.name</code> to get  its attribute value.</span>
