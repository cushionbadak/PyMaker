<div class="post-text" itemprop="text">
<p>
1. The days enterred should be after <code>15/10/1582</code>
2. Should consider the leapyears.
3. Even when "ctrl + c" or alphabets are enterred, the source code should go on (Use try...except) </p>
<h2>3. Repeat until 0 is enterred in 'year'.</h2>
<p>THis is what I tried.....</p>
<pre><code>while True:
    year = int(input("Year: "))
    if year == 0
       break
    month = int(input("Month: ")
    day = int(input("Days: "))
</code></pre>
<p>I completely can't think of how to solve this, so I'd like to get some hints how I should deal with this problem!</p>
<hr/>
<blockquote>
<p>Year: 2019 Month: 0 Day: 12 There is only January ~ December</p>
<p>Year: 2019 Month: 1 Day: 0 Day should be at least 1</p>
<p>Year: 2019 Month: 1 Day: 32 January is upto 31</p>
<p>Year: 2020 Month: 2 Day: 30 2020 is a leapyear, but Feburary is upto
  29</p>
<p>Year: 2019 Month: 2 Day: 29 2019 is not a leapyear, so Feburary is
  upto 28</p>
<p>Year: 1582 Month:1 Day:1 1/1/1582 is before when Gregorian calender
  started</p>
<p>Year: 2019 Month: 1 Day:8 OK</p>
<p>Year: 0</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Well, the first thing to do, obviously, is to check whether your user inputs are proper numerics. As mentionned in the instructions, this can be done using exception handling (try/except blocks). Exception handling is documented so <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">first check the doc</a> and use the interactive shell to test out things until you get how ot works... Just a couple hints here: only catch the exact exceptions you expect at a given point, and have the less possible code in the <code>try</code> block so you're sure you only catch the exceptions raised by this exact piece of code. </p>
<p><em>(NB : Note that this can ALSO be done without exception handling by testing the content of the strings returned by <code>input()</code> _before_ passing them to <code>int()</code>, but you're obviously expected to use exception handling here, cf the "Use try/except" mention.)</em></p>
<p>The second thing is to validate that the individual values entered for day, month and year are in the expected range; ie there are only 12 month, so for this variable, any value lower than 1 (january) or higher than 12 (december) is invalid. </p>
<p>Note that since the number of days in a month changes from month to month and, for february, can change from year to year, you can only validate days once you know the month and the year. </p>
<p>I suggest you first make the "day" validation work without taking care of leap years, and only then take care of the leap year special case. As often, a good data structure is key to simple effective code, so read about the standard basic Python data types (lists, dicts, tuples etc) and think about which of those types you could use to map a month number to how many days it has (for a non leap year, that is). </p>
<p>There are quite a few other things to care of, but first manage to get those first two points working and the rest should not be too difficult. </p>
</div>
<span class="comment-copy"><i>Hint:</i> After getting <i>year</i>, <i>month</i>, and <i>day</i> as input, you need to call a function <code>validate_date(year, month, day)</code> that will check entered date and issue the required error messages. You need to write that function. It will have tests like: <code>if year &lt; 1582:</code> and <code>if not (1 &lt;= month &lt;= 12):</code>. After you have tried to solve the problem, come back with any difficulties you have.</span>
<span class="comment-copy">Like @BoarGules said, but you can also create a Date object and compare date as a whole rather than checking year , month and day individually.</span>
<span class="comment-copy">@ReshamWadhwa This looks like a beginner's exercise and I doubt if OP is permitted to do <code>import datetime</code>. A <code>datetime</code> object will complain about a month 0 but it won't say why; likewise 29 February 2017.</span>
<span class="comment-copy">Hello Kim and welcome to SO. While it's perfectly ok to ask for help on homework questions, the fact it is homework should be explicitely mentionned at the beginning of the question. Also, as is, your post doesn't contain all the needed information and doesn't explain what your problem is. Please edit your post so it contains an obvious mention that it is homework, a clear description of what you have to do, and a clear question about where you're stuck. Also, do do not ask for a fully coded answer - that is <b>your</b> duty -, all you should expect are useful hints.</span>
<span class="comment-copy">@brunodesthuilliers Thank you for telling me those things. I didn't know since I just joined SO. I'll edit it right away:)</span>
