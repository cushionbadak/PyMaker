<div class="post-text" itemprop="text">
<p>I have recently asked this <a href="https://stackoverflow.com/questions/53847645/importing-an-arbitrary-amount-of-python-files">question</a> about importing an arbitrary amount of modules in python. I received two good answers. Both worked when I programmed it in spyder.</p>
<p>Today I ran the script from my terminal as test, since I'm planning to move my code to my server. But this time the script crashed with this Traceback:</p>
<pre><code>File "evaluation.py", line 27, in __init__
self.solvers.append( __import__(file_name[:-3]) ) #cut away .py
ImportError: No module named 'v00'
</code></pre>
<p>The file architecture looks like this:</p>
<pre><code>-evaluation.py
-evaluation
    -v00.py
    -v01.py
</code></pre>
<p>The code in evaluation.py which causes trouble is this one:</p>
<pre><code>os.chdir('evaluation')

for file_name in glob.glob("*.py"):
    self.solvers.append( __import__(file_name[:-3]) ) #cut away .py

for idx, solver in enumerate(self.solvers):
    self.dqn.append(solver.DQNSolver() )
</code></pre>
<p>Why does this work in spyder but not in the terminal? They both use python 3.5 and I double checked that both are in the folder "evaluation" when executing the malicious line.</p>
</div>
<div class="post-text" itemprop="text">
<p>The typical way to handle this would be to turn the folder into a package by adding an empty <code>__init__.py</code> file and then import from the package with <code>import evaluation.v00</code> (or the equivalent <code>__import__</code> function call). But you may run into problems as your main script has the same name as the package. I would suggest renaming one or the other</p>
<pre><code>-evaluationscript.py
-evaluation
    -__init__.py (empty file)
    -v00.py
    -v01.py
</code></pre>
<p>And then you probably need to use <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">import_module</a> instead of <code>__import__</code> to populate <code>solvers</code> with the actual module (instead of the package).</p>
<p>I'm not familiar with spyder, but if the same code is working there, then it may be adding the evaluation folder to the search path either with the <code>PYTHONPATH</code> env var, or by modifying <code>sys.path</code>.</p>
<p>When you run a script, the path of the script is added to the default search path for module imports, but changing the folder using <code>os.chdir</code> won't affect that search path.</p>
</div>
<span class="comment-copy">What does your import statement look like? \</span>
<span class="comment-copy">@l'L'l only os and glob are imported</span>
<span class="comment-copy">thanks! spyder added probably something to the PYTHONPATH. Accessing the module by foldername.module worked.</span>
