<div class="post-text" itemprop="text">
<p>While doing this challenge on Hackerrank ( <a href="https://www.hackerrank.com/challenges/merge-the-tools/problem" rel="nofollow noreferrer">https://www.hackerrank.com/challenges/merge-the-tools/problem</a>), I came across this high-vote answer written by a user. It's nice to be compact but I find it VERY difficult to follow. </p>
<pre><code>def merge_the_tools(string, k):
    S, N = input(), int(input()) 
    for part in zip(*[iter(S)] * N):
        d = dict()
        print(''.join([ d.setdefault(c, c) for c in part if c not in d ]))
</code></pre>
<p>Here's how I coded: </p>
<pre><code>def merge_the_tools(string, k):
    # s1. cut string into list of substrings
    t=[]
    start=0
    k=int(k)
    end=k
    while(end&lt;len(string)+1):
        t.append(string[start:end])
        start+=k
        end+=k
    #test: print(t)

    #s2. strip repeating char from t_i by iterating thru
    for ti in t:
        si=""
        for char in ti:
            if char not in si:
                si+=char
        print(si)
</code></pre>
<p>By the Python standards, which answer demonstrates a better practice? I skimmed <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> and didn't find an answer to my question. </p>
</div>
<div class="post-text" itemprop="text">
<p>It all depends on your intended audience and the intended use for your code. If the code is just for you, do it how you best understand it. Compact code is often, but not always more efficient, because you have to write less and there is less to look through if there are errors. If you intend for other people to be looking at your code and learning from it, definitely go for the longer more readable code, give room for them to figure out shortcuts so they can feel accomplished and proud of their work, but back to the question. There is no right or wrong way (in reference to compact vs. readable), to do it, it all depends on situation.</p>
</div>
<span class="comment-copy">It doesn't make sense for <code>merge_the_tools</code> to take <code>string</code> and <code>k</code> arguments and ignore them, and looking at the discussions on that problem, it doesn't look like the original code actually does that.</span>
<span class="comment-copy">The <code>zip(*[iter(s)]*n)</code> pattern is <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">explicitly mentioned</a> in the <code>zip</code> docs, but I've always found it a confusing way to write things.</span>
<span class="comment-copy">@user2357112 Thanks for the input. You made a great point!</span>
<span class="comment-copy">Compact code usually is like that for better performance. It depends on the circumstances. If you want to share it you should always develop readable code not using arbitrary variables.</span>
<span class="comment-copy">@Mangohero1 compact code and performance aren't really related. Certainly not in Python. In general, go for readable code. Especially if they are equivalent. Are you under some sort of line number restriction?</span>
