<div class="post-text" itemprop="text">
<p>I am about to write a flask app for something very trivial .. and I hit a roadblock in my logging practices. </p>
<p>This is my simple flask app, I wrote this to explain the problem I ran into and have been stuck at for sometime trying to figure out what is happening with python-logging &amp; flask.</p>
<pre><code># standard
from flask import Flask
from flask_restful import Api
import logging
import json

# logging config
log_fmt = "%(asctime)s %(levelname)s %(process)d %(filename)s %(funcName)s %(message)s"
logging.basicConfig(
    filename="test.log",
    filemode="w",
    format=log_fmt,
    level=logging.DEBUG
)

# create an object of flask (flask is a web framework)
app = Flask(__name__)
api = Api(app)


# health check /
@app.route("/", methods=['GET'])
def default():
    logging.debug("/ request received")
    out_dict = {
        "hello": "world"
    }
    logging.debug("/ response" + str(out_dict))
    return json.dumps(out_dict)


# main function, entry point
if __name__ == "__main__":

    # invokes src and runs the application
    logging.debug("starting")
    # COMMENTING below - gets me the log file! Whats happening with flask &amp; logging?
    app.run(host="0.0.0.0", port=7001, debug=True)
    logging.debug("stopping")
</code></pre>
<p>Now this is the pattern I generally adopt when I need logging. But when I apply this pattern of logging along with <code>app.run(..)</code> the log-file never gets created. I am unable to figure out why this happens.</p>
<p>But on the contrary .. if I comment the <code>app.run(..)</code>, the log file gets created with corresponding debug logs I have in place.</p>
<p>I have been struggling to understand this - and I did land on the flask inbuilt log handler, but looking at its implementation it attaches to logging module itself. So the whole thing is still not making sense. Any help or direction here will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer"><code>logging.basicConfig</code></a> makes a number of assumptions which upon calling <code>app.run(...)</code> may have undone, as Flask does also make use of the logging module to set up logging output as you noted.  However, if you manually set up a file handler and attach it to the root logger like so (i.e. replace the <code># logging config</code> section with):</p>
<pre><code># logging config
log_fmt = "%(asctime)s %(levelname)s %(process)d %(filename)s %(funcName)s %(message)s"
handler = logging.FileHandler('test.log')
handler.setFormatter(logging.Formatter(log_fmt))
root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)
</code></pre>
<p>This sets up the logging handler with the formatter set to the <code>log_fmt</code> you had specified, then attaching that handler to the root logger returned by <a href="https://docs.python.org/3/library/logging.html#logging.getLogger" rel="nofollow noreferrer"><code>logging.getLogger()</code></a>.  Running the application, give it some requests and quitting, you should see appropriate entries showing up inside <code>test.log</code> in the current working directory, while some of the typical logging output produced by flask will also be shown.</p>
</div>
