<div class="post-text" itemprop="text">
<p>what i'm finding hard is that you can't nest "i for i in [list]" inside Boolean logic checks, and not wanting to list all 26 characters</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>"aabc".count('a')</code> to give you the amount of times <code>a</code> appears in <code>aabc</code>, for example. In this example, it gives <code>2</code>.</p>
<p>Building on from this, you could implement some simple code to check how many times every letter of the alphabet occurs like so:</p>
<pre><code>import string

s = 'ababac'

for letter in string.ascii_lowercase:
    print("%s appears %s times" % (letter, s.count(letter)))
</code></pre>
<p>Which produces the output:</p>
<pre><code>a appears 3 times
b appears 2 times
c appears 1 times
d appears 0 times
e appears 0 times
f appears 0 times
g appears 0 times
...
</code></pre>
<p>NB: you don't have to list all 26 characters in the alphabet because <code>string.ascii_lowercase</code> has that for you. Note there is also <code>string.ascii_uppercase</code> and so on. More information: <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer">https://docs.python.org/3/library/string.html</a></p>
<p>For more information about <code>str.count(sub[, start[, end]])</code>: <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#str.count</a></p>
<p>Also <code>collections.Counter</code> can create a dictionary for all the letters in the string. Using this, you could rewrite the above code like so:</p>
<pre><code>import string
from collections import Counter

counts=Counter('ababac')
# counts = {'a': 3, 'b': 2, 'c': 1}

for letter in string.ascii_lowercase:
    if letter in counts:
        print("%s appears %s times" % (letter, counts[letter]))
    else:
        print("%s doesn't appear" % letter)
</code></pre>
<p>Output:</p>
<pre><code>a appears 3 times
b appears 2 times
c appears 1 times
d doesn't appear
e doesn't appear
f doesn't appear
g doesn't appear
...
</code></pre>
<hr/>
<p>Edit NB:</p>
<pre><code>print("%s appears %s times" % (letter, s.count(letter)))
</code></pre>
<p>can also be written as:</p>
<pre><code>print("{} appears {} times".format(letter, s.count(letter)))
</code></pre>
<p>using the newer <code>str.format</code> interface. More information: <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#str.format</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>using <code>defualtdict</code> you can do this way .</p>
<pre><code>from collections import defaultdict
def fun():
    return 0

dic=defaultdict(fun)

string ='ababa'

for i in string:
    dic[i]+=1

for i in dic:
    print(i,dic[i])
</code></pre>
<p>output:</p>
<pre><code> a 3 
 b 2 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the each available characters count in a given string using below code</p>
<pre><code>def count_dict(mystring):
    d = {}
# count occurances of character
    for w in mystring: 
        d[w] = mystring.count(w)
# print the result
    for k in sorted(d):
        print (k + ': ' + str(d[k]))

mystring='qwertyqweryyyy'
count_dict(mystring)
</code></pre>
<p>You can find the live demo <a href="https://rextester.com/EBL1413" rel="nofollow noreferrer"><strong>here</strong></a></p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter("ababac")</code></a>?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/40985203/counting-letter-frequency-in-a-string-python">Counting Letter Frequency in a String (Python)</a></span>
<span class="comment-copy">thanks! this solves my problem, but I don't get how:   <code>("%s appears %s times" % (letter, s.count(letter)))</code>  works. where can I check about this specific string usage?</span>
<span class="comment-copy">It's called string formatting. Some more information: <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>. There are actually a newer and better ways to do this too nowadays, more information about another way: <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.format</a></span>
<span class="comment-copy">rather than doing <code>defaultdict(fun)</code> you could use a lambda method like so <code>defaultdict(lambda: 0)</code>, which means you don't need to define <code>fun</code></span>
<span class="comment-copy">@AbhinavBhandari i know, my main motive is to let the OP  to understand the code and solve it in future and also no use of any library</span>
<span class="comment-copy">Suraj, you're already linking to the demo in your answer, there is no need to attempt to edit the link into prashant's answer as well: <a href="https://stackoverflow.com/review/suggested-edits/21843571">stackoverflow.com/review/suggested-edits/21843571</a></span>
<span class="comment-copy">Understood thanks</span>
