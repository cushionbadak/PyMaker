<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/21297203/use-dict-or-vars">Use `__dict__` or `vars()`?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I find the documentation on the vars() function to be kind of cryptic: <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#vars</a></p>
<p>What is the point of having this function? Why would you not just call <code>x.__dict__</code> rather than <code>vars(x)</code> or <code>locals()</code> directly?</p>
<p>Would someone give a use case of the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>The point of having the <code>vars()</code> function is:</p>
<ul>
<li>you do not need to touch the classes <code>__dict__</code> dunder function directly from the outside</li>
</ul>
<p>It is the same with most <code>__dunders__</code>:</p>
<pre><code>next()  =&gt; __next__  
&gt;       =&gt; __ge__
&lt;       =&gt; __le__
str()   =&gt; __str__
repr()  =&gt; __repr__
</code></pre>
<p>See also: <a href="https://stackoverflow.com/questions/49696701/should-i-ever-directly-call-object">Should I ever directly call object.__str__()?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The python builtin <code>vars(object)</code> function returns the <code>__dict__</code> attribute of the object in the parentheses; if not applicable, it gives a <code>TypeError</code> exception. It should be used to view dictionaries. </p>
<p>When you run:</p>
<pre><code># Python program to illustrate 
# working of vars() method in Python 

class Example: 
def __init__(self, name1 = "Bob", num2 = 100, name3 = "Bill"): 
    self.name1 = name1 
    self.num2 = num2 
    self.name3 = name3 

exampleVariable = Example()
print(vars(exampleVariable)) 
</code></pre>
<p>The output is: </p>
<pre><code>{'num2': 100, 'name1': 'Bob', 'name3': 'Bill'}
</code></pre>
</div>
<span class="comment-copy">it's focus on more readable and clean code right ?</span>
<span class="comment-copy">@prashantrana  and encapsulation. The "normal" methods can have logic that calling the dunder directly would not have</span>
<span class="comment-copy">@PatrickArtner could you give an example of this type of logic? It seems here that vars() doesn't have any additional logic?</span>
<span class="comment-copy">@AllenWang wait for python 3.7 / 3.8  ... maybe it will have it then - maybe some other dunder gets introduced that i also checked by next() as fallback - if you cann <code>__dict__</code> directly you wont get that added functionality</span>
<span class="comment-copy">I feel that using vars(x) is more trustworthy and reliable than other solutions that can do the same thing.</span>
