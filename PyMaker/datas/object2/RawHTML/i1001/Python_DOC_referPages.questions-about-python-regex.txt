<div class="post-text" itemprop="text">
<p>Why the following pattern string results in a match of "A cat", instead of "a hat" since match is greedy by default?</p>
<pre><code>&gt;&gt;&gt; m = re.match(r'(\w+) (\w+)', "A cat jumpped over a hat")
&gt;&gt;&gt; m
&lt;_sre.SRE_Match object; span=(0, 5), match='A cat'&gt;
</code></pre>
<p>Could someone shed some light on them?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer">official document</a>:</p>
<blockquote>
<p>If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/re.html#search-vs-match" rel="nofollow noreferrer">official Python documentation on regexes</a></p>
<blockquote>
<p><code>re.match()</code> checks for a match only at the beginning of the string</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As others have alluded, <code>re.match</code> starts from the beginning of the string-to-match and only checks for what is necessary. Notice <code>match='A cat'</code> at the end of the object's string representation denotes what was matched: <code>r'(\w+) (\w+)'</code> of <code>"A cat jumpped over a hat"</code>.</p>
<p>If you were to add a <code>$</code> to the end of your pattern, indicating the string-to-match should end there, it will not result in a match. And if you were to take that same pattern and shorten it to only two words, it would match once again:</p>
<pre><code>&gt;&gt;&gt; re.match(r'(\w+) (\w+)', "A cat jumpped over a hat")
&lt;_sre.SRE_Match object; span=(0, 5), match='A cat'&gt;
&gt;&gt;&gt; re.match(r'(\w+) (\w+)$', "A cat jumpped over a hat")
&gt;&gt;&gt; re.match(r'(\w+) (\w+)$', "A cat")
&lt;_sre.SRE_Match object; span=(0, 5), match='A cat'&gt;
</code></pre>
</div>
<span class="comment-copy">The first group matches <code>A</code>, the space matches a space, the second group matches <code>cat</code> - why in the world would it look any further?  'Greediness' affects the possible length of a match, not where it starts - a non-greedy version of your regex would match <code>A c</code>.</span>
<span class="comment-copy">In Regex, <code>\w</code> matches any "word" character (letter, digit, or underscore). Effectively, your regex is saying "look for cases where a word of at least one character exists followed by a space, and then another word of at least one character". You aren't making any specific restrictions in your regex.</span>
<span class="comment-copy">Got it. perhaps it should be described as: match() is greedy but stop at first match?</span>
<span class="comment-copy">that's the point -- <b>beginning</b></span>
