<div class="post-text" itemprop="text">
<p>I have a python script where I use a listener from another library to wait and listen for an event to occur (that my script then handles). In development, I used an input() statement (inside a while True loop) at the end of my script to efficiently keep the script alive while doing nothing (other than waiting for the event). However, now that I've put this into a systemd service, the input() fails with an EOF since system services are not expected to have any console IO. What is a 'nice' or pythonic way to achieve essentially an endless loop here? I could do a <code>while True: pass</code> or <code>while True: sleep(0.1)</code> but the first burns the CPU, while the second seems hackish. </p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at official document about <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">coroutines</a>.</p>
<p>Example:</p>
<pre><code>import time, asyncio

async def run_task():
    for i in range(5):
        print('running task %d' % i)
        await awaiting_task(i)

async def awaiting_task(name):
    time.sleep(5) # wait for 5 seconds
    print('task %s finished' % str(name))

asyncio.run(run_task())
</code></pre>
<p>The <code>async</code> syntax will turn the function to a coroutine, which saves your cpu if possible, other than busy waiting.</p>
</div>
<span class="comment-copy">I think this thread might help you in your efforts <a href="https://stackoverflow.com/questions/20170251/how-to-run-the-python-program-forever" title="how to run the python program forever">stackoverflow.com/questions/20170251/â€¦</a></span>
