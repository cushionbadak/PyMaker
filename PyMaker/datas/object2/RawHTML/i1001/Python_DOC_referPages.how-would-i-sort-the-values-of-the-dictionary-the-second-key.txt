<div class="post-text" itemprop="text">
<p>I'm trying to sort the values of a dictionary in ascending order by the key, but the problem is that these values have two items in the key and I'm only trying to sort it by the second key item. If that makes any sense.</p>
<p>For example: </p>
<pre><code>{[keyitem1],[keyitem2]:[Value]}
</code></pre>
<p>I'm trying to sort it by keyitem2</p>
<p>I tried sorting it by sorting it by their keys</p>
<p>Attempt #1  </p>
<pre><code>order = dict(sorted(mylist.keys()))
</code></pre>
<p>#1 outputs a ValueError: </p>
<pre><code>ValueError: dictionary update sequence element #0 has length 54; 2 is required
</code></pre>
<p>Attempt #2    </p>
<pre><code>order = sorted(my_dict, key=operator.itemgetter(1))
</code></pre>
<p>#2 doesn't actually sort it, it's just randomised </p>
<h1>Expected output</h1>
<pre><code>my_dict = {"('first', [0.011])": [1], "('second', [0.012])": [2], "('third', [0.013])": [3], "('fourth', [0.014])": [4], }  
</code></pre>
<h1>Actual output</h1>
<pre><code>my_dict = {"('second', [0.012])": [2], "('fourth', [0.014])": [4], "('first', [0.011])": [1], "('third', [0.013])": [3]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your keys are not 2 item tuples anymore, they are strings of 2-item tuples. You would be unable to sort correctly until you are able to fix the keys. For the sake of answering the question as is:  </p>
<p>Use <a href="https://docs.python.org/3.7/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval</a> to access your tuple element for sorting logic.</p>
<pre><code>my_dict = {"('second', [0.012])": [2], "('fourth', [0.014])": [4], "('first', [0.011])": [1], "('third', [0.013])": [3]}

from ast import literal_eval
order = sorted(my_dict.items(), key = lambda x: literal_eval(x[0])[1]) #x[0] would refer to keys in the tuples created by my_dict.items()
</code></pre>
<p>However, dictionaries inherently are considered unordered in python. If you specifically want a dictionary that retains order, use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a></p>
<pre><code>from collections import OrderedDict
result = OrderedDict(order)
print(result)
#Output:
OrderedDict([("('first', [0.011])", [1]), 
             ("('second', [0.012])", [2]), 
             ("('third', [0.013])", [3]), 
             ("('fourth', [0.014])", [4])])
</code></pre>
<p>Lastly though, a recommendation. Dictionaries can accept tuples as keys just fine, so with all said done and dusted, you really should just be using tuples directly instead of having them converted to strings unnecessarily. if the 2nd element is always going to be a single value, use a tuple or the float for it directly. </p>
<pre><code>my_dict = {"('second', [0.012])": [2], "('fourth', [0.014])": [4], "('first', [0.011])": [1], "('third', [0.013])": [3]}
fixed_dict = {(literal_eval(k)[0],literal_eval(k)[1][0]):v for k,v in my_dict.items()}
print(fixed_dict)
#Output
{('second', 0.012): [2],
 ('fourth', 0.014): [4],
 ('first', 0.011): [1],
 ('third', 0.013): [3]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your entries are not in the form of <code>{[keyitem1],[keyitem2]:[Value]}</code>.  You can't do that with dictionaries.  What you have here is <code>{string: [value]}</code>.</p>
<p>Dictionaries in Python can't be sorted, as their items have no "order".  You could however store your data in a list, namely in this case a list of tuples:</p>
<pre><code>&gt;&gt;&gt; my_dict = {"('first', [0.011])": [1], "('second', [0.012])": [2], "('third', [0.013])": [3], "('fourth', [0.014])": [4]}
&gt;&gt;&gt; L = [ (my_dict[k], k) for k in my_dict ]
&gt;&gt;&gt; L
[([4], "('fourth', [0.014])"), ([3], "('third', [0.013])"), ([1], "('first', [0.011])"), ([2], "('second', [0.012])")]
</code></pre>
<p>Then you can sort the list, which will sort the items based on the first sub-item it sees in each item.  Or make a new sorted list without touching the order of the original:</p>
<pre><code>&gt;&gt;&gt; my_sorted = sorted(L)
&gt;&gt;&gt; print(my_sorted)
[([1], "('first', [0.011])"), ([2], "('second', [0.012])"), ([3], "('third', [0.013])"), ([4], "('fourth', [0.014])")]
</code></pre>
<p>You could alternatively use <code>key=</code> and <code>__getitem__</code> to do sorting by value:</p>
<pre><code>&gt;&gt;&gt; sorted(my_dict, key=my_dict.__getitem__)
["('first', [0.011])", "('second', [0.012])", "('third', [0.013])", "('fourth', [0.014])"]
</code></pre>
<p>The fact that your strings look like tuples and your numbers are single-celled lists though makes me wonder if there's something else you can simplify in what you're doing.  Perhaps what you really want are tuple entries in the form of "<code>(1, 'first', 0.011)</code>"?</p>
</div>
<span class="comment-copy">What Python version are you using?</span>
<span class="comment-copy">The <code>ValueError</code> is completely unrelated, because you are creating a new <code>dict()</code> from a (sorted) list of keys and no values. You are mixing different problems there.</span>
<span class="comment-copy">Attempt 2 definitely sorts, the results are not randomised, but your understanding of what item <code>1</code> is and what actually happens are not aligned. You are indexing into a <b>string</b>, not a tuple, your keys don't have only two elements, they have separate characters, where <code>(</code> and <code>,</code> and <code>)</code> are just some of those characters.</span>
<span class="comment-copy">How did you create those keys in the first place? You have used <code>str()</code> somewhere you shouldn't. You once did have tuples, but you no longer have tuples in your keys, only strings with a value that happens to be a Python expression, if only it where executed. You need to solve that problem first, before you can meaningfully sort anything here</span>
<span class="comment-copy">Depending on which version of Python you have, dictionaries are NOT ordered (reliably at least). As of Python 3.7, dictionaries are ordered by <i>insertion order</i>. This behavior can be obtained using <code>OrderedDict</code>'s in other versions. See <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">this</a> for more detail.</span>
