<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>import datetime

dt = 1546955400
print(datetime.datetime.fromtimestamp(dt))
</code></pre>
<p>When I run this code on my local machine, I get the correct (expected) time which is </p>
<p><code>2019-01-08 15:50:00</code>. </p>
<p>However I tried running this exact same code on a VM and the result was
 <code>2019-01-08 13:50:00</code> (two hours earlier). Why is this is happening and how can I fix it so that I always get the first one regardless of where the code is running?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>datetime.datetime.fromtimestamp()</code> returns <strong>local time</strong>. From the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Return the local date and time corresponding to the POSIX timestamp, such as is returned by <code>time.time()</code>. If optional argument <code>tz</code> is <code>None</code> or not specified, the timestamp is converted to the platformâ€™s local date and time, and the returned datetime object is naive.</p>
</blockquote>
<p>The timestamp value is an offset in seconds from <a href="https://en.wikipedia.org/wiki/Unix_time#Encoding_time_as_a_number" rel="nofollow noreferrer">the UNIX <em>epoch</em> value</a>, midnight 1 January 1970, in the UTC timezone. The local time is a system-wide configured offset from UTC, the local timezone.</p>
<p>If your VM is producing unexpected results, you need to configure the timezone of the OS.</p>
<p>Alternatively, ignore timezones and only deal with time in the UTC timezone. For timestamps, that means using the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.utcfromtimestamp()</code> function</a>.</p>
<p>Your specific timestamp is 13:50 UTC:</p>
<pre><code>&gt;&gt;&gt; dt = 1546955400
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.utcfromtimestamp(dt)
datetime.datetime(2019, 1, 8, 13, 50)
&gt;&gt;&gt; print(_)
2019-01-08 13:50:00
</code></pre>
<p>so your VM is either set to the UTC or the GMT timezone (the latter is currently at UTC+0, until the switch to the UK <a href="https://en.wikipedia.org/wiki/Daylight_saving_time" rel="nofollow noreferrer">daylight saving</a> timezone BST). Your local system is in a <a href="https://en.wikipedia.org/wiki/UTC%2B02:00" rel="nofollow noreferrer">UTC+2 timezone</a>, given your stated location from your profile that'd be <a href="https://en.wikipedia.org/wiki/Eastern_European_Time" rel="nofollow noreferrer">EEE, Easter European Time</a>.</p>
<p>Another option is to create a timezone-aware timestamp by passing in a <code>tz</code> argument. If you have a specific UTC offset, just create a <a href="https://docs.python.org/3/library/datetime.html#datetime.timezone" rel="nofollow noreferrer"><code>datetime.timezone()</code> instance</a> for that offset:</p>
<pre><code>utcplus2 = datetime.timezone(datetime.timedelta(hours=2))
datetime.datetime.fromtimestamp(dt, utcplus2)
</code></pre>
<p>However, it is usually better to store and operate on UTC <code>datetime</code> instances everywhere, and only convert to specific timezones when displaying information to users. This simplifies datetime handling as it lets you avoid a number of timezone corner cases and problems, such as mixing datetime information from different timezones and timezones with a summer and winter time distinction.</p>
</div>
<span class="comment-copy">You're seeing the <i>local</i> time based on that timestamp (which is for 13.50 UTC).</span>
<span class="comment-copy">Is there something else I can use that isnt dependent on local time?</span>
<span class="comment-copy">@ninesalt: yes, use the UTC timezone, so <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.utcfromtimestamp()</code></a>.</span>
<span class="comment-copy">Wouldn't you then have to offset the result by 2 hours to get to 15:50?</span>
<span class="comment-copy">You would use the UTC timestamp <i>everywhere</i>. Or specificy a timezone to translate the time to.</span>
<span class="comment-copy">I would use UTC everywhere however I'm scraping local websites and storing the time/date so I'd have to convert the time on the website to UTC first.</span>
