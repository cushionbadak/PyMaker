<div class="post-text" itemprop="text">
<p>i have a list o lists of integers for example such a below:</p>
<pre><code>list1 = [[1,2,3],[1,2,5,6,8],[2,4,6,9,7],[1,3],[2,4,3,6,8,2]]
</code></pre>
<p>and i want to get maximum length of consecutive even numbers in each sublist as output,
output list is:</p>
<pre><code>  olist = [1,2,3,0,3]
</code></pre>
<p>and this is my code:</p>
<pre><code>olist=[]
for ii in list1:
    if all(item % 2 == 0 for item in ii):
        olist.append(len(ii))
print (olist)
</code></pre>
<p>but this code is wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's keep this simple. You will need two loops. You will also need a counter to keep track of the current count. You can have <code>tr</code> keep track of the largest count, for simplicity.</p>
<pre><code>tr = [0] * len(lst)
for i, l in enumerate(lst):
    counter = 0
    for v in l:
        if v % 2 == 0:
            counter += 1
        else:
            tr[i] = max(counter, tr[i])
            counter = 0
    tr[i] = max(counter, tr[i])

print(tr)
# [1, 2, 3, 0, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> to group the numbers in even / odd groups then get the even group with maximum length using max:</p>
<pre><code>from itertools import groupby

def max_even(lst):
    result = []
    for e in lst:
        it = (sum(1 for _ in group) for k, group in groupby(e, lambda x: x % 2) if not k)
        m = max(it, default=0)
        result.append(m)
    return result

l = [[1,2,3],[1,2,5,6,8],[2,4,6,9,7],[1,3],[2,4,3,6,8,2]]

res = max_even(l)
print(res)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[1, 2, 3, 0, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>myList = [[1,2,3],[1,2,5,6,8],[2,4,6,9,7],[1,3],[2,4,3,6,8,2]]
outList = []
for i in myList:
    max_Length = 0
    myLength = 0
    interim_list = []
    for j in i:
        if j%2 == 0:
            myLength = myLength + 1
            if myLength &gt; max_Length:
                max_Length = myLength
        else:
            myLength = 0
    outList.append(max_Length)
outList    
    [1,2,3,0,3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd define a helper method that can handle a condition:</p>
<pre><code>def max_consecutive(array, odd_even):
  remainder = {'odd':1,'even':0}
  count, max_count = 0, 0
  for e in array:
    if e%2 == remainder[odd_even]:
      count +=1
    else:
      count = 0
    max_count = max(count, max_count)
  return max_count
</code></pre>
<p>To be used in a list comprehension:</p>
<pre><code>array = [[1,2,3],[1,2,5,6,8],[2,4,6,9,7],[1,3],[2,4,3,6,8,2]]

[max_consecutive(sub, 'even') for sub in array]
#=&gt; [1, 2, 3, 0, 3]

[max_consecutive(sub, 'odd') for sub in array]
#=&gt; [1, 1, 2, 2, 1]
</code></pre>
</div>
<span class="comment-copy">never a good idea to instantiate a <code>list</code> with name list, as it's a key word.</span>
<span class="comment-copy">Why store all intermediate values when you could just store the maximum? This seems wasteful.</span>
<span class="comment-copy">Thanks Sir. Yes, the previous code was not efficient. I did the changes now. Feedback is always appreciated.</span>
