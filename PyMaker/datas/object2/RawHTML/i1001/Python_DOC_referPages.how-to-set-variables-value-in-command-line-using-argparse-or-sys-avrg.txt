<div class="post-text" itemprop="text">
<p>I am trying to use argparse in my python code to set 5 different variables equal certain values based on command line. And if these variables are not entered, it will be set to default which was already defined in my code.
So if i run the code:</p>
<pre><code>python test.py CSV = "/Home/data/file.csv" length = 1 cluster = 7 dim = 5 
fnumber = 8
</code></pre>
<p>It will set the <code>CSV = "/Home/data/file.csv"</code>, <code>length = 1</code>, <code>cluster = 7</code>, <code>dim = 5</code> and <code>fnumber = 8</code>.</p>
<p>But if instead i run the code:</p>
<pre><code>python test.py CSV = "/Home/data/file.csv" cluster = 7 fnumber = 8
</code></pre>
<p>It will set the <code>CSV = "/Home/data/file.csv"</code>, <code>length = 4</code>, <code>cluster = 7</code>, <code>dim = 9</code> and <code>fnumber = 8</code> because the length was already pre-defined in my code to be 7 and dim was pre-defined to be 9.</p>
<p>Whatever i type in the command line should replace the already defined value in my code below</p>
<p>The difficult part is that i have to type out the string like "length = 1" in the command line instead of just the value 1. This is because i want the user-interface to be clearer as some variables can be left blank if i have to use spaces to replace those empty arguments and it will look bad. So i am required to type out the declaration of variables value in command line</p>
<pre><code>import argparse  
CSV = "Data/a1.csv"
length = 4           
cluster = 3
dim = 9
fnumber = 15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's something simple showing how it could be done with <code>argparse</code> and allow you to define the default values. To use it you will need to follow its argument-passed conventions/style, which doesn't have the spaces around the <code>=</code> and requires each argument to start with a <code>-</code> (or <code>--</code>, see the docs).</p>
<p>It's possible to get fancy and, for example, allow an argument to be specified in more than one way. For that and many other options, I suggest you consult the module's <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow noreferrer">documentation</a>.</p>
<p>Note that the values shown being passed in the <code>parse_args()</code> calsl are what might be in <code>sys.argv</code> for a command-line composed of all of them joined together and separated by spaces.</p>
<pre><code>import argparse


DEFAULT = dict(length=1, cluster=2, dim=3, fnumber=4)
parser = argparse.ArgumentParser(description='Test app')

parser.add_argument('-CSV', action="store")
parser.add_argument('-length', action="store", default=DEFAULT['length'])
parser.add_argument('-cluster', action="store", type=int, default=DEFAULT['cluster'])
parser.add_argument('-dim', action="store", type=int, default=DEFAULT['dim'])
parser.add_argument('-fnumber', action="store", type=int, default=DEFAULT['fnumber'])

args = parser.parse_args(['-CSV="/Home/data/file.csv"', '-length=1', '-cluster=7',
                          '-dim=5'])

print('args.CSV:', args.CSV)
print('args.length:', args.length)
print('args.cluster:', args.cluster)
print('args.dim:', args.dim)
print('args.fnumber:', args.fnumber)

print()
args2 = parser.parse_args(['-CSV="/Home/data/file2.csv"', '-cluster=42', '-fnumber=5'])
print('args2.CSV:', args2.CSV)
print('args2.length:', args2.length)
print('args2.cluster:', args2.cluster)
print('args2.dim:', args2.dim)
print('args2.fnumber:', args2.fnumber)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>args.CSV: "/Home/data/file.csv"
args.length: 1
args.cluster: 7
args.dim: 5
args.fnumber: 4

args2.CSV: "/Home/data/file2.csv"
args2.length: 1
args2.cluster: 42
args2.dim: 3
args2.fnumber: 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Input all the command line arguments without spaces around the equal signs (<code>length=1</code> instead of <code>length = 1</code>) since it's a command line convention anyways. Then, iterate through all the command line arguments and call the built in Python function <code>exec</code> (more information <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">here</a>) to set all the configuration variables. Note this should come after all the defaults are set.</p>
<p>Please note it is usually not advisable to use <code>exec</code> because it will run anything in the input. If you are planning to ever publish this code, you should think about creating a filter for the command line arguments. To do that, first split the string of the command line argument by the equals sign and check if the first part of the split is in your set of configurable variables and if the second part is actually a number (if that's what you want).</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def parse_assign(args, keywords):
    """Parse args for keyword assignments.

    Arguments:
        args: List of arguments in the form of repeated 'foo = bar' assignments.
        keywords: List of keywords to look for.

    Returns:
        A dict of found keywords with their values.
    """
    rv = {}
    for word in keywords:
        try:
            rv[word] = args[args.index(word) + 2]
        except (IndexError, ValueError):
            pass
    return rv
</code></pre>
<p>Explanation: if <code>word</code> is not in <code>args</code>, then <code>index</code> would generate an <code>ValueError</code> exeption. If <code>args.index(word) + 2</code> is larger than the length of <code>args</code>, you'd get an <code>IndexError</code>.</p>
<p>A test in IPython:</p>
<pre><code>In [15]: args                                                                                            
Out[15]: 
['CSV',
 '=',
 '"/Home/data/file.csv"',
 'length',
 '=',
 '1',
 'cluster',
 '=',
 '7',
 'dim',
 '=',
 '5',
 'fnumber',
 '=',
 '8']

In [16]: parse_assign(args, ['CSV', 'length', 'cluster', 'dim', 'fnumber'])                              
Out[16]: 
{'CSV': '"/Home/data/file.csv"',
 'length': '1',
 'cluster': '7',
 'dim': '5',
 'fnumber': '8'}
</code></pre>
<p>Adding the defaults makes it slightly more complicated:</p>
<pre><code>def parse_assign2(args, defaults):
    """Parse args for keyword assignments.

    Arguments:
        args: List of arguments in the form of repeated 'foo = bar' assignments.
        keywords: dict of defaults.

    Returns:
        A dict of found keywords with their values, merged with the defaults.
    """
    rv = {}
    keywords = defaults.keys()
    for word in keywords:
        try:
            rv[word] = args[args.index(word) + 2]
        except (IndexError, ValueError):
            pass
    return {**defaults, **rv}
</code></pre>
</div>
<span class="comment-copy">Thank you Sir for your help! You saved me a lot of time!! :)</span>
