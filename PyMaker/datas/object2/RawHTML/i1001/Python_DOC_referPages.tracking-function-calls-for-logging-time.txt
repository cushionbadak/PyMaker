<div class="post-text" itemprop="text">
<p>Not sure if this is possible in Python, but I'm trying to profile a large function and indicate which parts of it's processing / I/O are slow. I was attempting to write a couple of decorator functions; a top-level function to wrap the function being profiled. And decorators for some of the nested functions to report on their timing if a threshold is exceeded for the top level decorator. I'm not sure how I could share this context across decorators though.</p>
<p>Top level Decorator</p>
<pre><code>def time_stack(name, threshold=60000):
    def wrapper(f):
        def wrapped(*args, **kwargs):
            start = time_millis()
            f(*args, **kwargs)
            end = time_millis()
            if end - start &gt; threshold:
                # Log out frame timings here
        return wrapped
    return wrapper
</code></pre>
<p>For nested functions</p>
<pre><code>def time_frame(name):
    def wrapper(f):
        def wrapped(*args, **kwargs):
            start = time_millis()
            f(*args, **kwargs)
            end = time_millis()
            t = end - start
            # Somehow remember this value for the outer time_stack to use if needed
        return wrapped
    return wrapper
</code></pre>
<p>Example</p>
<pre><code>@time_frame(name="do_some_io")
def do_some_io(string):
    # do some io

@time_frame(name="do_a_transform")
def do_a_transform(result):
    # do some transforming

@time_frame(name="do_some_caching")
def do_some_caching(stuff):
    # do some caching

@time_stack(name="search", threshold=100000):
def search(string):
    result = do_some_io(string)
    transformed = do_a_transform(result)
    return do_some_caching(transformed)
</code></pre>
<p>Here, if the execution time of search exceeds 100000ms, it would print out something like</p>
<pre><code>search took 123456ms
    do_some_io: 23000ms
    do_a_transform: 13678ms
    do_some_caching: 86778ms
</code></pre>
<p>I though about passing an object down through the kwargs to keep track of the times, but then all the functions in the call stack have to have **kwargs in their signature, and if theres a way to achieve this without having to do that it would be preferable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a global stack which keeps the data of each time_frame. It will be set on time_stack before calling the function and will be reset at the end of it. You can use its data if the time has passed the threshold.
However, there should be only one time_stack. For multiple time_stack functions, there should be a stack containing stacks.
A sketch of this idea is something like:</p>
<pre><code>PROFILE_STACK = []
STACK_IS_SET = False
def time_stack(name, threshold=60000):
    def wrapper(f):
        def wrapped(*args, **kwargs):
            PROFILE_IS_SET = True
            start = time_millis()
            f(*args, **kwargs)
            end = time_millis()
            if end - start &gt; threshold:
                # use PROFILE_STACK
            PROFILE_STACK.clear()
            STACK_IS_SET = False
        return wrapped
    return wrapper
</code></pre>
<p>And</p>
<pre><code>def time_frame(name):
    def wrapper(f):
        def wrapped(*args, **kwargs):
            start = time_millis()
            f(*args, **kwargs)
            end = time_millis()
            t = end - start
            if STACK_IS_SET:
                PROFILE_STACK.append("SOMETHING")
            # Somehow remember this value for the outer time_stack to use if needed
        return wrapped
    return wrapper
</code></pre>
</div>
<span class="comment-copy">Is there a reason you're not using <a href="https://github.com/rkern/line_profiler" rel="nofollow noreferrer">line_profiler</a>?</span>
<span class="comment-copy">Have you tried using <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">cProfile</a>?</span>
<span class="comment-copy">Can either of these be utilized while the software is live, with real time function invocations made in the wild? Or do you have to provide explicit arguments to them and run them manually?</span>
