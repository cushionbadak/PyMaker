<div class="post-text" itemprop="text">
<p>So, I have a problem with my dataframe from dictionary - python actually "names" my rows and columns with numbers.
Here's my code:</p>
<pre><code>a = dict()
dfList = [x for x in df['Marka'].tolist() if str(x) != 'nan']
dfSet = set(dfList)
dfList123 = list(dfSet)
for i in range(len(dfList123)):
    number = dfList.count(dfList123[i])
    a[dfList123[i]]=number
sorted_by_value = sorted(a.items(), key=lambda kv: kv[1], reverse=True)
dataframe=pd.DataFrame.from_dict(sorted_by_value)
print(dataframe)
</code></pre>
<p>I've tried to rename columns like this:
<code>dataframe=pd.DataFrame.from_dict(sorted_by_value, orient='index', columns=['A', 'B', 'C'])</code>, but it gives me a error:</p>
<pre><code>AttributeError: 'list' object has no attribute 'values'
</code></pre>
<p>Is there any way to fix it?</p>
<p><strong>Edit:</strong>
Here's the first part of my data frame:</p>
<pre><code>                     0     1
0                   VW  1383
1                 AUDI  1053
2                VOLVO   789
3                  BMW   749
4                 OPEL   621
5        MERCEDES BENZ   593
...
</code></pre>
<p>The 1st rows and columns are exactly what I need to remove/rename</p>
</div>
<div class="post-text" itemprop="text">
<p>By sorting the <code>dict_items</code> object (<code>a.items()</code>), you have created a list. 
 You can check this with <code>type(sorted_by_value)</code>.  Then, when you try to use the <code>pd.DataFrame.from_dict()</code> method, it fails because it is expecting a dictionary, which has 'values', but instead receives a list.</p>
<p>Probably the smallest fix you can make to the code is to replace the line:</p>
<p><code>dataframe=pd.DataFrame.from_dict(sorted_by_value)</code></p>
<p>with:</p>
<p><code>dataframe = pd.DataFrame(dict(sorted_by_value), index=[0])</code>.</p>
<p>(The <code>index=[0]</code> argument is required here because <code>pd.DataFrame</code> expects a dictionary to be in the form <code>{'key1': [list1, of, values], 'key2': [list2, of, values]}</code> but instead <code>sorted_by_value</code> is converted to the form <code>{'key1': value1, 'key2': value2}</code>.)</p>
<p>Another option is to use <code>pd.DataFrame(sorted_by_value)</code> to generate a dataframe directly from the sorted items, although you may need to tweak <code>sorted_by_value</code> or the result to get the desired dataframe format.</p>
<p>Alternatively, look at <code>collections.OrderedDict</code> (the documentation for which is <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">here</a>) to avoid sorting to a list and then converting back to a dictionary.</p>
<p><strong>Edit</strong></p>
<p>Regarding naming of columns and the index, without seeing the data/desired result it's difficult to give specific advice.  The options above will allow remove the error and allow you to create a dataframe, the columns of which can then be renamed using <code>dataframe.columns = [list, of, column, headings]</code>.  For the index, look at <code>pd.DataFrame.set_index(drop=True)</code> (<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html" rel="nofollow noreferrer">docs</a>) and <code>pd.DataFrame.reset_index()</code> (<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html" rel="nofollow noreferrer">docs</a>).</p>
</div>
<div class="post-text" itemprop="text">
<h3><code>index</code> and <code>columns</code> are properties of your dataframe</h3>
<p>As long as <code>len(df.index) &gt; 0</code> and <code>len(df.columns) &gt; 0</code>, i.e. your dataframe has nonzero rows and nonzero columns, you cannot get rid of the labels from your <code>pd.DataFrame</code> object. Whether the dataframe is constructed from a dictionary, or otherwise, is irrelevant.</p>
<p>What you <em>can</em> do is remove them from a <strong>representation</strong> of your dataframe, with output either as a Python <code>str</code> object or a CSV file. Here's a minimal example:</p>
<pre><code>df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])

print(df)
#    0  1  2
# 0  1  2  3
# 1  4  5  6

# output to string without index or headers
print(df.to_string(index=False, header=False))
# 1  2  3
# 4  5  6

# output to csv without index or headers
df.to_csv('file.csv', index=False, header=False)
</code></pre>
</div>
<span class="comment-copy">Could you provide us with df sample? It would help to replicate the problem</span>
<span class="comment-copy">Sure, just added</span>
