<div class="post-text" itemprop="text">
<p>I am trying to create a window in which I can enter different values.
The window should adapt dynamically to the data frame.
This works quite well so far.
Now I want to output the input as an array.
The array can be printed in the function as well.</p>
<p>Certainly a stupid question...but how would I get access to the array outside of the function?</p>
<p>Normally, I get access to the return value as follow:</p>
<pre><code>def x(y):
    y+1
    return y

y2 = x(2)
print(y2)
--&gt; 3
</code></pre>
<p>It is the first time I am working with tkinter.
Usually, I would get the <code>Array</code> with something like this:</p>
<pre><code>ar = d.apply(self)
</code></pre>
<p>But then I got this: <code>invalid command name ".!mydialog.!frame.!entry"</code></p>
<pre><code>from tkinter import *
from tkinter import messagebox
from tkinter import simpledialog

class MyDialog(simpledialog.Dialog):
    def body(self, master):
        d2={}
        f={}
        self.entries=[]
        for i in range(len(df_data_1.columns) -1 ):
            Label(master, text=df_data_1.columns[i]).grid(row=i)
            entry = Entry(master)
            entry.grid(row=i, column=1)
            self.entries.append(entry)

    def apply(self):
        Array=[]
        i=0
        for entry in self.entries:
            value = entry.get()
            print(df_data_1.columns[i], value)
            Array = np.append(Array, value)
            i=i+1
        return Array

root = Tk()
d = MyDialog(root)
</code></pre>
<p>Can anyone help me to get the <code>Array</code> from the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>GUI programming works different than procedural programming does because it's "event-driven" which means it keeps running in an infinite loop processing user input until it ends. The <code>simpledialog.Dialog</code> has such a loop in it in it's constructor, which only returns when the dialog window is dismissed or ends. It is what calls the <code>apply()</code> method when the user clicks on the <kbd>OK</kbd> button, so that is where you have to do something to make it possible to retrieve the value later after the user event-processing loop ends.</p>
<p>To work around that and allow you to use it the way you want, I've defined a function called <code>get_array()</code> which creates the tkinter <code>root</code> window, hides it, and then invokes the dialog and waits for it to end. To make it possible to return the <code>Array</code>, I have made it an attribute of the <code>MyDialog</code> class instance so it can be accessed after the dialog itself has ended. So <code>get_array()</code> returns that as its result.</p>
<pre><code>import numpy as np
from tkinter import *
from tkinter import messagebox
from tkinter import simpledialog

class MyDialog(simpledialog.Dialog):
    def body(self, master):
        d2={}
        f={}
        self.entries=[]
        for i in range(len(df_data_1.columns)-1):
            Label(master, text=df_data_1.columns[i]).grid(row=i)
            entry = Entry(master)
            entry.grid(row=i, column=1)
            self.entries.append(entry)

    def apply(self):
        """ Copy Entry values into an np.array attribute. """

        self.Array = np.array([])  # Create empty attribute array.
        for i, entry in enumerate(self.entries):
            value = entry.get()
            print(df_data_1.columns[i], value)
            self.Array = np.append(self.Array, value)  # Update attribute.


def get_array():
    root = Tk()
    root.withdraw()
    d = MyDialog(root)
    # Return dialog "Array" attribute if it has one.
    return getattr(d, "Array", None)

if __name__ == '__main__':
    result = get_array()
    print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code </p>
<pre><code>Array=[]
...
Array = np.append(Array, value)
</code></pre>
<p>is incorrect - you are mixing numpy and normal arrays.</p>
<p>Just replace <code>Array = np.append(Array, value)</code> with <code>Array.append(value)</code>.</p>
</div>
<span class="comment-copy">I believe Array is a built in function. You may want to change that name to <code>array</code> or something else. Also from outside of the class I believe you need to do <code>d.apply()</code> and not <code>d.apply(self)</code>.</span>
<span class="comment-copy">@Mike-SMT, Array is not a built-in function. There is a standard module named <code>array</code>, and a type defined in that module named <code>array</code>, but they're both lower case.</span>
<span class="comment-copy">@Kevin hum ok. Maybe I am just thinking about VBA.</span>
<span class="comment-copy">@Mike-SMT  I tried both d.apply() and d.apply(self) i get the same error</span>
<span class="comment-copy">After some testing with your code I am getting the same error and I am unsure as to why. I believe it may have something to do with the missing <code>__init__</code> and <code>super()</code> but when I tried that it did not seam to help. Have you considered building this in your own <code>toplevel</code> window?</span>
<span class="comment-copy">Thank you so much! It works..</span>
<span class="comment-copy">@Jannes: That's good news. Note you might want to use <code>value = float(entry.get())</code> to append numeric values instead of strings to <code>self.Array</code>.</span>
<span class="comment-copy">Terminology nitpick: <code>[]</code> is not a normal array. It's a list. There are <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">arrays</a> in the Python standard library, but if your code doesn't have <code>import array</code>, you're not using them.</span>
<span class="comment-copy">I changed it. But it doesn't work. I don't think the problem is the array. It still works in the function. The way I want to retrieve the array is probably wrong.</span>
