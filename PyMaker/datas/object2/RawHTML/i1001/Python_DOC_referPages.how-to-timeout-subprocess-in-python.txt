<div class="post-text" itemprop="text">
<p>I have a simple Python threading example like below:</p>
<pre><code>class MyClass(object):
    threads = 5
    def run_in_threads(self, variable1_list, variable2):
        with concurrent.futures.ThreadPoolExecutor(max_workers=threads) as executor:
            pool = {executor.submit(self.run, variable1, variable2) for variable1 in variable1_list}
            concurrent.futures.wait(pool)

    def run(self, variable1, variable2):
        t = SingleThread(scf_file_path, variable2)
        t.start()
        t.join()

class SingleThread(threading.Thread):
    def __init__(self, variable1, variable2):
        logger.debug("Single thread init.")
        threading.Thread.__init__(self)
        self.my_variable = my_variable

    def run(self):
        logger.debug("Single thread started.")
        # command = my long methond, e.g. subprocess
        p = subprocess.Popen(command)
        p.wait()
        logger.debug("Single thread ended.")
</code></pre>
<p>Problem is that sometimes subprocess command is stuck and then the whole process is stopped (next part of the script can't be run).</p>
<p>Could you please verify this piece of code and give a hint, how to proceed with force killing thread if time reached limit e.g. 1 minute? </p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks, @shmee for your hint. Adding timeout to subprocess.wait method is the simplest solution:</p>
<pre><code>def run(self):
    logger.debug("Single thread started.")
    # command = my long methond, e.g. subprocess
    p = subprocess.Popen(command)
    p.wait(timeout=60)  # &lt;===
    logger.debug("Single thread ended.")
</code></pre>
</div>
<span class="comment-copy">Do not use <code>p.wait()</code> that blocks. Instead have a while loop that polls the subprocess and also checks for the timeout.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait" rel="nofollow noreferrer"><code>Popen.wait</code></a> takes an optional timeout parameter since Python 3.3.</span>
<span class="comment-copy">@MikkoOhtamaa good point. I think it will resolve my problem.  I'll remove p.wait and instead of it, I'll add a new "timeout" parameter to SingleThread <b>init</b>. Then in while loop in the run method, I can check if a time limit was reached. Thank you very much. And what do you think about the rest of the code? Is that more or less okay?</span>
<span class="comment-copy">@shmee, your hint is even simpler. Thanks.</span>
<span class="comment-copy">@shmee Please feel to promote to a full answer</span>
