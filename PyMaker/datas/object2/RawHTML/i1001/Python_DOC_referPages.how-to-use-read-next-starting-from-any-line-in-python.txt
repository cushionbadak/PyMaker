<div class="post-text" itemprop="text">
<p>I'm trying to start reading some file from line 3, but I can't. </p>
<p>I've tried to use <code>readlines()</code> + the index number of the line, as seen bellow:</p>
<pre><code>x = 2
f = open('urls.txt', "r+").readlines( )[x]
line = next(f)
print(line)
</code></pre>
<p>but I get this result:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 441, in &lt;module&gt;
    line = next(f)
TypeError: 'str' object is not an iterator
</code></pre>
<p>I would like to be able to set any line, as a variable, and from there, all the time that I use <code>next()</code> it goes to the next line. </p>
<p>IMPORTANT: as this is a new feature and all my code already uses <code>next(f)</code>, the solution needs to be able to work with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this (uses <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a>):</p>
<pre><code>from itertools import islice

f = open('urls.txt', 'r+')
start_at = 3
file_iterator = islice(f, start_at - 1, None)

# to demonstrate
while True:
    try:
        print(next(file_iterator), end='')
    except StopIteration:
        print('End of file!')
        break

f.close()
</code></pre>
<p><code>urls.txt</code>:</p>
<pre><code>1
2
3
4
5
</code></pre>
<p>Output:</p>
<pre><code>3
4
5
End of file!
</code></pre>
<p>This solution is better than <code>readlines</code> because it doesn't load the entire file into memory and only loads parts of it when needed. It also doesn't waste time iterating previous lines when <code>islice</code> can do that, making it much faster than @MadPhysicist's answer.</p>
<p>Also, consider using the <code>with</code> syntax to guarantee the file gets closed:</p>
<pre><code>with open('urls.txt', 'r+') as f:
    # do whatever
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>readlines</code> method returns a list of strings for the lines. So when you take <code>readlines()[2]</code> you're getting the third line, as a string. Calling <code>next</code> on that string then makes no sense, so you get an error.</p>
<p>The easiest way to do this is to <em>slice</em> the list: <code>readlines()[x:]</code> gives a list of everything from line <code>x</code> onwards. Then you can use that list however you like.</p>
<p>If you have your heart set on an iterator, you can turn a list (or pretty much anything) into an iterator with the <code>iter</code> builtin function. Then you can <code>next</code> it to your heart's content.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code will allow you to use an iterator to print the first line:</p>
<pre><code>In [1]: path = '&lt;path to text file&gt;'                                                           

In [2]: f = open(path, "r+")                                                    

In [3]: line = next(f)

In [4]: print(line)
</code></pre>
<p>This code will allow you to print the lines starting from the <em>x</em>th line:</p>
<pre><code>In [1]: path = '&lt;path to text file&gt;'

In [2]: x = 2

In [3]: f = iter(open(path, "r+").readlines()[x:])

In [4]: f = iter(f)                                                             

In [5]: line = next(f)

In [6]: print(line)
</code></pre>
<p>Edit: Edited the solution based on @Tomothy32's observation.</p>
</div>
<div class="post-text" itemprop="text">
<p>The line you printed returns a string:</p>
<pre><code>open('urls.txt', "r+").readlines()[x]
</code></pre>
<p><code>open</code> returns a file object. Its <code>readlines</code> method returns a list of strings. Indexing with <code>[x]</code> returns the third line in the file as a single string.</p>
<p>The first problem is that you open the file without closing it. The second is that your index doesn't specify a range of lines until the end. Here's an incremental improvement:</p>
<pre><code>with open('urls.txt', 'r+') as f:
    lines = f.readlines()[x:]
</code></pre>
<p>Now <code>lines</code> is a list of all the lines you want. But you first read the whole file into memory, then discarded the first two lines. Also, a list is an iterable, not an iterator, so to use <code>next</code> on it effectively, you'd need to take an extra step:</p>
<pre><code>lines = iter(lines)
</code></pre>
<p>If you want to harness the fact that the file is already a rather efficient iterator, apply <code>next</code> to it as many times as you need to discard unwanted lines:</p>
<pre><code>with open('urls.txt', 'r+') as f:
    for _ in range(x):
        next(f)
    # now use the file
    print(next(f))
</code></pre>
<p>After the <code>for</code> loop, any read operation you do on the file will start from the third line, whether it be <code>next(f)</code>, <code>f.readline()</code>, etc.</p>
<p>There are a few other ways to strip the first lines. In all cases, including the example above, <code>next(f)</code> can be replaced with <code>f.readline()</code>:</p>
<pre><code>for n, _ in enumerate(f):
    if n == x:
        break
</code></pre>
<p>or</p>
<pre><code>for _ in zip(f, range(x)): pass
</code></pre>
<p>After you run either of these loops, <code>next(f)</code> will return the <code>x</code>th line.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just call <code>next(f)</code> as many times as you need to. (There's no need to overcomplicate this with <code>itertools</code>, nor to slurp the entire file with <code>readlines</code>.)</p>
<pre><code>lines_to_skip = 3

with open('urls.txt') as f:
    for _ in range(lines_to_skip):
        next(f)

    for line in f:
        print(line.strip())
</code></pre>
<p>Output:</p>
<pre><code>% cat urls.txt
url1
url2
url3
url4
url5

% python3 test.py
url4
url5
</code></pre>
</div>
<span class="comment-copy"><code>readlines()</code> reads <i>all</i> lines from the file. There is no <code>next()</code> after it.</span>
<span class="comment-copy">Thanks. My list has 5 urls. I got this error: <code>http://www.stackoverflow.com http://www.uol.com http://www.nytimes.comTraceback (most recent call last):   File "test.py", line 454, in &lt;module&gt;     print(next(file_iterator), end='') StopIteration</code></span>
<span class="comment-copy">@rafasalo That's not really an error, it just means the end of the file has been reached. I assumed your file was longer, so I printed lines 3-7 just to demonstrate. I fixed it so it prints until the end of the file.</span>
<span class="comment-copy">@rafasalo Is it working for you now?</span>
<span class="comment-copy">I'm getting the same problem of the answer above. When I print I get all the list from the line that I've set. I would like just the next line printed, and everytime that I place <code>next()</code>, I get the next one and so on. Any idea?</span>
<span class="comment-copy">This shouldn't happen. Are you sure you are calling <code>next(file_iterator)</code> and not <code>next(f)</code>?</span>
<span class="comment-copy">Files are already iterators, so you don't need to call <code>iter</code> <i>twice</i> on it. Also, you can't slice iterators, so <code>f = iter(open(path, "r+").readlines())[x:]</code> will error out with <code>TypeError: 'list_iterator' object is not subscriptable</code>.</span>
<span class="comment-copy">@Tomothy32 My bad. Will fix the same.</span>
<span class="comment-copy">I've tried this one: <code>x = 2 with open('urls.txt', 'r+') as f:     for _ in range(x):         url = next(f)         print(url)</code>  But I'm getting the FIRST and the SECOND line, I would like just the SECOND LINE, and if I place another <code>NEXT(F)</code>, I would like just the third line. Any idea?</span>
<span class="comment-copy">@rafasalo. You didn't do what my answer suggests. The loops discard lines. <i>After</i> that, you can call <code>next</code> or whatever you want. You don't do it in the loop.</span>
<span class="comment-copy">@rafasalo. I added a note at the end to explain.</span>
<span class="comment-copy">@rafasalo, if you're going to post Python code in comments, indicate newlines clearly with <code>\n</code> or <code>;</code> and indentation levels with <code>\t</code></span>
