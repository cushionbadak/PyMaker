<div class="post-text" itemprop="text">
<p>I come from a C++ and Java enviroment and just started learning Python, hence this question. From <a href="https://www.python.org/dev/peps/pep-0020/#id3" rel="nofollow noreferrer">The Zen of Python</a> there's a quote:</p>
<blockquote>
<p>Explicit is better than implicit.</p>
</blockquote>
<p>So, is there a way to explicitly declare a static and/or non-static attributes in Python all at once?</p>
<p>For example (<strong>not fully a python code</strong>):</p>
<pre><code>class BasicClass():
    # Explicit declaration of a attribute shared through the class and instances
    x = 0

    # Explicit declaration of a attribute that I would like to be owned only by the class
    static:
        y = 10

    # Explicit declaration of a attribute that I would like to be owned by every instance individually
    non_static:
        z = 0

    def __init__(self, x, z):
        self.x = x
        self.z = z

a = BasicClass(1, 2)
b = BasicClass(3, 4)
</code></pre>
<p>Although this 'static' and 'non_static' keywords don't exist in Python, this is the behavior that I would want to achieve:</p>
<ol>
<li>The <code>x</code> attribute should be accessible through <code>BasicClass.x</code> as well as <code>a.x</code> and <code>b.x</code>. Being all distinct instances.</li>
<li>The <code>y</code> attribute, since it's "static", should be owned by (and accessed through) the <code>BasicClass</code> instance only.

<ul>
<li>It would be ok if <code>a.y</code> worked as a reference to <code>BasicClass.y</code>, for example.</li>
</ul></li>
<li>The <code>z</code> attribute, since it's "non-static", should be accessible through <code>a.z</code> and <code>b.z</code>, being both distinct instances, and must not be acessible directly through <code>BasicClass</code> since it must not have this attribute.</li>
</ol>
<p>I think the first desired behavior is what is really going on.</p>
<p>Regarding the seccond one, it's clear why a attribute like <code>y</code> is important and desired.</p>
<p>And about the tird one, I know that it's possible to declare an attribute as such along the methods of the class. But can it be declare <strong>all at once</strong>? And if not, why? Again if not, is it better this way?</p>
<p>Explicitly declaring all inside the <code>__init__(self, ...):</code> function can be a problem since I can want an attribute to don't be initialized. Or is this a bias from C++/Java?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has no concept of 'static' attributes, not in the way that C++ defines them.</p>
<p>Instead, Python attribute lookup on an instnace goes through the following steps; if a step succeeds then that determines the outcome and further steps are skipped:</p>
<ol>
<li>Check for a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">data descriptor</a> on the class (including the full MRO hierarchy). These get priority over an instance attribute. The descriptor is bound and the result of binding is returned. E.g. a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><code>property</code> object</a>.</li>
<li>If the instance has its own <code>__dict__</code> namespace, check for the attribute there</li>
<li>Check for the attribute on the class hierarchy (step 1 will have cached this if it wasn't a data descriptor). If it is a descriptor, bind it, e.g. a function is bound to produce a method at this stage.</li>
<li>If the class hierarchy has a <code>__getattr__</code> method defined it is called to see if it can provide a result.</li>
</ol>
<p>That's it; instances and classes are, at its most basic, a layered namespace. Attributes are not declared, they exist because they are simply <em>used</em>.</p>
<p>You <em>can</em> use <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hinting</a> to help tools like IDEs and static type validators check for type correctness, and you can use such hints to declare that your class will use specific instance attributes with a given type, e.g.:</p>
<pre><code>from typing import ClassVar

class BasicClass:
    x: int = 0            # instance and class attribute, with a default value for the class
    y: ClassVar[int] = 10 # explicitly a class attribute
    z: int                # instance attribute

    def __init__(self, x: int, z: int) -&gt; None:
        self.x = x
        self.z = z
</code></pre>
<p>but the Python runtime will not <em>enforce</em> any rules about what attributes can be set where. A static type checker like <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> will, however, raise an error when you run it on code that sets <code>y</code> on an instance of <code>BasicClass</code>:</p>
<pre><code>$ tail -n 2 thdemo.py  # two lines added to the above example
a = BasicClass(42, 81)
a.y = 117
$ mypy thdemo.py
thdemo.py:14: error: Cannot assign to class variable "y" via instance
</code></pre>
<p>If you are not using type hinting, then you never have to 'declare' attributes. Attributes just 'are', you use them or you don't. Python assumes we are all grown-ups that can write unit tests where deemed necessary, and is otherwise almost entirely dynamic. This gives you a great deal of flexibility and power to do things that are much harder and much more verbose in C++ or Java.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is simple, it doesnâ€™t require a static keyword. </p>
<p>Variables assigned in the class declaration are class variables or static variables, while those inside the class methods are instance variables.</p>
<pre><code>class Employee:
   empName = 'Vicky' #class variable

   def __init__(self, age, id):
        self.age = age                #instance variable
        self.id = id                  #instance variable

one = Employee(21, 1)
two = Employee(30, 2)

print(one.empName) # prints "Vicky"
print(one.age) # prints 21
</code></pre>
</div>
<span class="comment-copy">Python''s model differs materially, there is no equivalent of 'static' in C++. <b>Everything</b> in the class body definition is 'static'.</span>
<span class="comment-copy">Maybe you are actually looking for <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclasses</code></a></span>
