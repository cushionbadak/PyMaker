<div class="post-text" itemprop="text">
<p>i'm trying to figure out how to filter a tuple inside a tuple
like so:</p>
<pre><code>input&gt;&gt;&gt;filter_tree((1,2,3,4,(1,2,3)),lambda x:x%2==0)

output&gt;&gt;&gt; ((2,4,(2))
</code></pre>
<p>this is how far I got :</p>
<pre><code> def filter_tree(tree,f):
     if type(tree)!=tuple:
           return tree
     return tuple(filter(f,tuple(filter_tree(node,f) for node in tree)))  
</code></pre>
<p>it works when there are no tuple inside a tuple, and I have no idea what I need to change to make it work ( I must use only recursions).
does anyone have an idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>Only apply the filter function directly on non-tuple elements, and only perform recursion on tuple ones:</p>
<pre><code>def filter_tree(tree, f):
    # conditional iteration over all child nodes / leaves
    return tuple(elem for elem in tree if type(elem) != tuple and f(elem)) \ 
         + tuple(filter_tree(node, f) for node in tree if type(node) == tuple)

&gt;&gt;&gt; filter_tree((1,2,3,4,(1,2,3)),lambda x:x%2==0)
(2, 4, (2,))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a generator solution that also works:</p>
<pre><code>def filter_nested_tuples(iterable, f):
    """filter elements from nested tuples from function f"""
    for x in iterable:
        if isinstance(x, tuple):
            yield tuple(filter_nested_tuples(x, f))
        elif f(x):
            yield x

def is_even(x):
    """Indicates if number is even"""
    return x % 2 == 0

tup = (1,2,3,4,(1,2,3))
print(tuple(filter_nested_tuples(tup, f=is_even)))
# (2, 4, (2,))
</code></pre>
<p><strong>Note:</strong> The benefit of using <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance()</code></a> over <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code></a> is when you want to support multiple types such as <code>list</code>, <code>set</code>, then you can just pass a tuple of types: <code>isinstance(x, (list, set, tuple))</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you want.</p>
<pre><code>a = (1,2,3,(1,2,3,(1,2,3,4)))

def func(x):
    return x%2==0

def foo(v):
    ans = ()
    for x in v:
        if type(x)==tuple:
            ans += (foo(x),)
        elif func(x):
            ans += (x,)
    return ans

print(foo(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternate one-line solution that preserve's the input's recursive structure:</p>
<pre><code>def filter_tree(tree, filter_func):
    return tuple(filter_tree(element, filter_func) if isinstance(element, tuple) else element for element in tree if isinstance(element, tuple) or filter_func(element))
</code></pre>
<p><strong>TEST</strong></p>
<pre><code>&gt;&gt;&gt; print(filter_tree((0, 1, 2, (3, 4, (5, 6), 7), 8, 9, 10), lambda x: x % 2 == 0))
(0, 2, (4, (6,)), 8, 10)
&gt;&gt;&gt; 
</code></pre>
<p>Roughly equivalent to:</p>
<pre><code>def filter_tree(tree, filter_func):

    filtered_tree = tuple()

    for element in tree:

        if isinstance(element, tuple):
            filtered_tree += (filter_tree(element, filter_func),)
        elif filter_func(element):
            filtered_tree += (element,)

    return filtered_tree
</code></pre>
</div>
<span class="comment-copy">Is it guaranteed that there are no lists, sets, or other iterables in the data item? If not, does the returned item need to repeat those structures or can it use just tuples? Are lists acceptable in the returned item rather than tuples? (That last could make the problem a little easier.)</span>
<span class="comment-copy">it is guaranteed that it will accept only tuples, no lists or anything like that. and yes it must return a tuple</span>
<span class="comment-copy">I cant understand what is \  + ?</span>
<span class="comment-copy">@AlexK that was just for neatness â€“ <code>\ </code> allows you to continue a statement on a new line (see <a href="https://developer.rhino3d.com/guides/rhinopython/python-statements/" rel="nofollow noreferrer">here</a>); it is entirely optional of course</span>
<span class="comment-copy">@AlexK, I don't believe this solution works.  Given the input <code>(0, 1, 2, (3, 4, (5, 6), 7), 8, 9, 10)</code> it returns <code>(0, 2, 8, 10, (4, (6,)))</code> instead of <code>(0, 2, (4, (6,)), 8, 10)</code>. I.e. it doesn't preserve the input's recursive structure, it just collects even values recursively.</span>
<span class="comment-copy">@cdlane good catch; I've uploaded a version that satisfies this (although OP didn't explicitly state the need to preserve ordering); however the original version <b>did</b> preserve the basic <i>recursive</i> structure.</span>
<span class="comment-copy">Upvoted because it also caters for inheritance</span>
<span class="comment-copy">I don't see the advantage of using a generator.  Presumably, it's to avoid allocating structure in memory.  But when your call <code>yield tuple(filter_nested_tuples(...))</code> internally, you exhaust the sub-generator and allocate the structure.  Ditto when you call <code>tuple()</code> on the final result.  If the internal call had been a <code>yield from filter_nested_tuples(...)</code> then I could see the win, memory-wise.  It would destroy the structure, of course.  If the goal were to get out the even numbers "in order", then the generator is clearly a win.</span>
<span class="comment-copy">@cdlane as with my original solution, this <b>doesn't</b> destroy the underlying recursive structure because the generator itself is being used recursively.</span>
<span class="comment-copy">@meowgoesthedog, you misunderstand my comment.  This solution does preserve the underlying recursive structure.  But it undoes any advantage of using a generator to do so.  But it's noted feature is it uses a generator.</span>
<span class="comment-copy">this is not recursive.</span>
<span class="comment-copy">@AlexK <code>ans += (foo(x),)</code>?</span>
<span class="comment-copy">@AlexK Its recursive ans += (foo(x),) will make recursivly call for each tuple type and add it to answer. And (foo(x),) is to preserve tuple structure in your final answer.</span>
<span class="comment-copy">This is a nice approach, but you're not taking the filter function as a parameter which I think will add more complexity.</span>
<span class="comment-copy">@roganjosh updated</span>
