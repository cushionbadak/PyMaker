<div class="post-text" itemprop="text">
<p>A puzzling question arose when using thriftpy2,this is my code：</p>
<pre><code>async def callcentre(response, kwargs):
    client = await make_aio_client(
        echo_client.Dispather, '127.0.0.1', 8080
    )
    print(type(client))
    res = await client.tagsInfo(response, json.dumps(kwargs))
    return json.loads(res)
</code></pre>
<p>the type of the client is:</p>
<pre><code>&lt;class 'thriftpy2.contrib.aio.client.TAsyncClient'&gt;
</code></pre>
<p>but when I remove await：</p>
<pre><code>async def callcentre(response, kwargs):
    client =  make_aio_client(
        echo_client.Dispather, '127.0.0.1', 8080
    )
    print(type(client))
    res = await client.tagsInfo(response, json.dumps(kwargs))
    return json.loads(res)
</code></pre>
<p>the type of the client is:</p>
<pre><code>&lt;class 'generator'&gt;
</code></pre>
<p>cause I can't call rpc's service</p>
<p>Why do it return different types of objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because the <code>make_aio_client</code> is a <em>coroutine</em>, not just a regular python function. Since python 3.5 the <code>async</code> keyword indicates that function is a coroutine:</p>
<pre><code>async def make_aio_client(...):
     ...
</code></pre>
<p>Regular function call won't actually execute it, just create a coroutine for you.</p>
<pre><code>client =  make_aio_client(...
</code></pre>
<p>Roughly speaking, coroutines are just generators (functions that <code>yield</code> the result). That's why it's type is a <code>generator</code>.
You have to use the <code>await</code> keyword to schedule the execution in the <em>event loop</em>:</p>
<pre><code>client_coro =  make_aio_client(
    echo_client.Dispather, '127.0.0.1', 8080
)
client = await client_coro()
</code></pre>
<p>Read the <a href="https://docs.python.org/3/library/asyncio-task.html#coroutines" rel="nofollow noreferrer">asyncio manual</a> to learn more about coroutines and awaitables.</p>
</div>
