<div class="post-text" itemprop="text">
<p>How do I make sure that a method implementing an abstract method adheres to the python static type checks. Is there a way in pycharm to get an error if the return type is incorrect for the implemented method?</p>
<pre><code>class Dog:
    @abc.abstractmethod
    def bark(self) -&gt; str:
        raise NotImplementedError("A dog must bark")

class Chihuahua(Dog):
    def bark(self):
        return 123
</code></pre>
<p>So for the above code I would want to get some sort of a hint that there is something wrong with my chihuahua </p>
</div>
<div class="post-text" itemprop="text">
<p>No there's not a (simple) way to enforce this.</p>
<p>And actually there isn't anything wrong with your <code>Chihuahua</code> as Python's duck typing allows you to override the signature (both arguments and types) of <code>bark</code>. So <code>Chihuahua.bark</code> returning an <code>int</code> is completely valid code (although not necessarily good practice as it violates <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">the LSP</a>). Using the <code>abc</code> module doesn't change this at all as <a href="https://stackoverflow.com/questions/25183424/can-a-python-abstract-base-class-enforce-function-signatures">it doesn't enforce method signatures</a>.</p>
<p>To "enforce" the type simply carry across the type hint to the new method, which makes it explicit. It also results in PyCharm showing a warning.</p>
<pre><code>import abc

class Dog:
    @abc.abstractmethod
    def bark(self) -&gt; str:
        raise NotImplementedError("A dog must bark")

class Chihuahua(Dog):
    def bark(self) -&gt; str:
        # PyCharm warns against the return type
        return 123
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">docs.python.org/3/library/typing.html</a></span>
