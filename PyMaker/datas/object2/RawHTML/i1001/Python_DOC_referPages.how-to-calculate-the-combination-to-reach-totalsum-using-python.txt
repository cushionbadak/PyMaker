<div class="post-text" itemprop="text">
<p>Given an integer total calculate number of possible ways to represent total.
Sum required is 5 while integers can be considered as [1,2,3]</p>
<p>The 5 ways to target sum are:</p>
<pre><code>1 + 1 + 1 + 1 + 1 = 5

1 + 1 + 1 + 2 = 5

1 + 2 + 2 = 5

1 + 1 + 3 = 5

2 + 3 = 5
</code></pre>
<p>Input is 5, 3, where 3 is the range[1,2,3] to reach total 5</p>
<p>Output is 5</p>
</div>
<div class="post-text" itemprop="text">
<p>Because your question only requires the <em>number</em> of possibilities and not the possibilities themselves, this is one of the fastest ways to do it:</p>
<pre><code>def partitions(n, m):
    if n &lt;= 1:
        return 1
    if m &gt; n:
        return partitions(n, n)

    total = 0
    for i in range(1, m + 1):
        total += partitions(n - i, i)

    return total
</code></pre>
<p>Here, <code>n</code> is the number you are trying to partition and <code>m</code> is the limit on the largest number. It handles even very large numbers very quickly:</p>
<pre><code>In [1]: def partitions(n, m):
   ...:     if n &lt;= 1:
   ...:         return 1
   ...:     if m &gt; n:
   ...:         return(partitions(n, n))
   ...:
   ...:     total = 0
   ...:     for i in range(1, m + 1):
   ...:         total += partitions(n - i, i)
   ...:
   ...:     return total
   ...:

In [2]: partitions(5, 3)
Out[2]: 5

In [3]: partitions(10, 5)
Out[3]: 30

In [4]: partitions(50, 30)
Out[4]: 202139 # returned in less than a second
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think using <code>combinations()</code> will work here- the function returns combinations of the array you pass it, but does not create duplicates of any given element. You could get around this by using a variant <code>combinations_with_replacement()</code>, but even then you'll end up with an excess of invalid combinations, and for lengthy lists the runtime would become intractable. </p>
<p>Instead, consider a recursive solution like the following.</p>
<pre><code>def reps(target, nums):
     res = []
     for i, v in enumerate(nums):
         if target - v &gt; 0:
             res += [[v] + l for l in reps(target-v, nums[i:])]
         elif target - v == 0:
             res += [[v]]
     return res
</code></pre>
<p>Here I take a target sum and a list of numbers, and try subtracting out each number from the target. If the difference exactly equals 0, I add that last value to the list. If its great than zero, I keep attempting to add elements to the list by calling <code>reps()</code> with the new target value, and a subset of the original numbers which prevents permutations of the same answer. I combine all these, prepend the previously chosen value from the list, and continue in this fashion until a list of all combinations has been built.</p>
<p>The result for your example <code>target=5</code> and <code>nums=[1,2,3]</code>-</p>
<pre><code>[[1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 3], [1, 2, 2], [2, 3]]
</code></pre>
</div>
<span class="comment-copy">Check the documentation for Itertools (<a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.combinations</a>). You'll find combinations requires two arguments.</span>
<span class="comment-copy"><code>2 + 2 + 2 = 5</code> Huh?</span>
<span class="comment-copy">The error <code>TypeError: Required argument 'r' (pos 2) not found</code> can be self-understood. Where do you get stuck?</span>
<span class="comment-copy">@RoadRunner not exactly. The solution from there will not result into the expected answer. I've checked it.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/34517540/find-all-combinations-of-a-list-of-numbers-with-a-given-sum">Find all combinations of a list of numbers with a given sum</a></span>
<span class="comment-copy">What if the range isn't <code>[1, m]</code> inclusive, but rather something like <code>[1, 3, 17]</code>. The original question didn't specify the numbers are necessarily consecutive.</span>
<span class="comment-copy">@DillonDavis OP says input is 5, 3, output is 5. So that's what I assumed he needed.</span>
<span class="comment-copy">@Tomothy32 could you explain the program</span>
<span class="comment-copy">@Maws It's more of a mathematical algorithm than a program. I recommend you check out the article here. <a href="https://en.wikipedia.org/wiki/Partition_(number_theory)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Partition_(number_theory)</a></span>
<span class="comment-copy">@Tomothy32 that's because <code>range(10)</code> includes <code>0</code>, and there are infinitely many solutions with adding <code>0</code> after <code>0</code>.</span>
<span class="comment-copy">Oops, that's right, my bad!</span>
