<div class="post-text" itemprop="text">
<p>This problem came up while trying to write code for a truth-table generating function. </p>
<p>How can I generate a list of lists of all length-n permutations of True and False? In other words, given a list of elements <code>[True, False]</code>, how can I generate all permutations of all possible length-n combinations of those elements?</p>
<p>For example:</p>
<p><code>n=2</code> length-2 permutations are:</p>
<pre><code>[[True, True], [True, False], [False, True], [False, False]]
</code></pre>
<p><code>n=3</code> the length-3 permutations are: </p>
<pre><code>[[False, False, False],[False,False,True],
[False,True,False],[False,True,True],
[True,False,False],[True,False,True],[True,True,False],[True,True,True]]
</code></pre>
<p>I know there's 2^n lists in this list. I also have considered using <code>itertools.product</code>, but that only seems to give <strong>permutations of a specific combination</strong>. In this case, I think I want to generate permutations of ALL  combinations of a length-n list of true/false. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>product</code>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l=[False,True]
&gt;&gt;&gt; list(itertools.product(l,repeat=3))
[(False, False, False), (False, False, True), (False, True, False), (False, True, True), (True, False, False), (True, False, True), (True, True, False), (True, True, True)]
&gt;&gt;&gt; 
</code></pre>
<p>And do a list:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l=[False,True]
&gt;&gt;&gt; [list(i) for i in itertools.product(l,repeat=3)]
[[False, False, False], [False, False, True], [False, True, False], [False, True, True], [True, False, False], [True, False, True], [True, True, False], [True, True, True]]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's relatively easy if you consider the values to be <em>bits</em> instead. Like for the <code>n = 3</code> case, see it as a value containing three bits.</p>
<p>Loop (using integers) from <code>0</code> to <code>2‚Åø - 1</code> (inclusive) and print all bits in each value (with <code>0</code> being <code>False</code> and <code>1</code> being <code>True</code>). Then you will have all permutations.</p>
<p>Of course, it's not a very Pythonic solution, but it's generic.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not efficient solution but you can use:</p>
<pre><code>def permuteBool(n, l):
...      if n==0:
...         return l
...      return [permuteBool(n-1, l+[True])] + [permuteBool(n-1, l+[False])]
... 
&gt;&gt;&gt; permuteBool(3, [])
[[[[True, True, True], [True, True, False]], [[True, False, True], [True, False, False]]], [[[False, True, True], [False, True, False]], [[False, False, True], [False, False, False]]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> with the <code>repeat</code> argument:</p>
<pre><code>In [1]: from itertools import product

In [2]: product([True, False], repeat=2)
Out[2]: &lt;itertools.product at 0x1c7eff51b40&gt;
</code></pre>
<p>As you can see above, it returns an iterable, so wrap it in <code>list()</code>:</p>
<pre><code>In [3]: list(product([True, False], repeat=2))
Out[3]: [(True, True), (True, False), (False, True), (False, False)]

In [4]: list(product([True, False], repeat=3))
Out[4]:
[(True, True, True),
 (True, True, False),
 (True, False, True),
 (True, False, False),
 (False, True, True),
 (False, True, False),
 (False, False, True),
 (False, False, False)]

In [5]: list(product([True, False], repeat=5))
Out[5]:
[(True, True, True, True, True),
 (True, True, True, True, False),
 (True, True, True, False, True),
 (True, True, True, False, False),
 (True, True, False, True, True),
...
</code></pre>
<p>It also returns a list of tuples instead of a list of lists, but that should be fine for most use cases and can be solved very easily with a list comprehension if lists are really needed:</p>
<pre><code>[list(tup) for tup in mylist]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>And if you want list of lists, not list of tuples, start with <a href="https://stackoverflow.com/users/8708364/u9-forward">U9-Forward</a>'s <a href="https://stackoverflow.com/a/54059999/8565438">answer</a>:</p>
<pre><code>import itertools
l=[False,True]
ll=list(itertools.product(l,repeat=3))
</code></pre>
<p>and continue:</p>
<pre><code>lll=[]
for each in ll:
    lll.append([EACH for EACH in each])
</code></pre>
<p><code>lll</code> will be a list of lists, instead of tuples.</p>
<hr/>
<p>Much better way, following comments:</p>
<pre><code>[list(elem) for elem in lll]
</code></pre>
<p>Thanks to <a href="https://stackoverflow.com/users/6740022/kevin-moy">Kevin</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: Looks like I didn't check the output before posting my answer. It'll stay as it is as the right way would be a duplicate answer of the correct answer.</p>
<p>Use this simple code:</p>
<pre><code>&gt;&gt;&gt; import itertools  # library of magic
&gt;&gt;&gt; length = 3        # length of your wanted permutations
&gt;&gt;&gt; result = itertools.combinations(    # combinations based on position
...     [*[True, False] * length],      # generates the items needed
...     length                          # length of the wanted results
... )
&gt;&gt;&gt; print([list(r) for in result])
[[False, False, False], [False, False, True], [False, True, False], [False, True, True], [True, False, False], [True, False, True], [True, True, False], [True, True, True]]
</code></pre>
</div>
<span class="comment-copy">It's unclear what you are asking...</span>
<span class="comment-copy">@U9-Forward sorry,  I'm not that good at wording things. I added another example.</span>
<span class="comment-copy">There are other functions in the <code>itertools</code> module.</span>
<span class="comment-copy">Are you sure this is permutation? A permutation is "each of several possible ways in which a set or number of things can be ordered or arranged". [True, True, True] is not a rearrangament of True and False values.</span>
<span class="comment-copy">You say "Use <code>combinations</code>" (the wrong tool) and then show a code snippet using <code>product</code> (the right tool).</span>
<span class="comment-copy">@user2357112 Ah, thanks for catching my idiotic mistake, lol, :-)</span>
<span class="comment-copy">Wow, didn't even think one bit about using binary. Very interesting.</span>
<span class="comment-copy">You've one me :D (Don't like that pun? Two bad)</span>
<span class="comment-copy">That's not best way.</span>
<span class="comment-copy">please share a better one, I am also interested</span>
<span class="comment-copy">Look at mine then. It's simpler too :D</span>
<span class="comment-copy">I would think just <code>[list(elem) for elem in listTuples]</code> would convert it appropriately</span>
<span class="comment-copy">@zabop in my answer.</span>
<span class="comment-copy">Could you check syntax? Gives me syntax error.</span>
<span class="comment-copy">SyntaxError at <code>(True for _ in range(length),</code></span>
<span class="comment-copy">I've fixed it. Phew, that took a lil bit.</span>
<span class="comment-copy">Still SyntaxError, missing comma.</span>
<span class="comment-copy">This is why I'm supposed to be in bed right now :D So sleepy haha.</span>
