<div class="post-text" itemprop="text">
<p><strong>TL,DR;</strong> How can JSON containing a regex with escaped backslahes, be loaded using <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">Python's JSON decoder</a>?</p>
<p><strong>Detail;</strong> The regular expression <code>\\[0-9]\\</code> will match (for example):</p>
<pre><code>\2\
</code></pre>
<p>The same regular expression could be encoded as a JSON value:</p>
<pre><code>{
  "pattern": "\\[0-9]\\"
}
</code></pre>
<p>And in turn, the JSON value could be encoded as a string in Python (note the single quotes):</p>
<pre><code>'{"pattern": "\\[0-9]\\"}'
</code></pre>
<p>When loading the JSON in Python, a <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">JSONDecodeError</a> is raised:</p>
<pre><code>import json
json.loads('{"pattern": "\\[0-9]\\"}')
</code></pre>
<p>The problem is caused by the regular expression escaping the blackslashes:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py", line 348, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Invalid \escape: line 1 column 14 (char 13)
&gt;&gt;&gt; json.loads('{"pattern": "\\[0-9]\\"}')
</code></pre>
<p>This surprised me since each step seems reasonable (i.e. valid regex, valid JSON, and valid Python).</p>
<p>How can JSON containing a regex with escaped backslahes, be loaded using <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">Python's JSON decoder</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>What's happening is that Python is first escaping the input to <code>loads</code> as a string literal, making it <code>'{"pattern": "\[0-9]\"}'</code> (double backslash -&gt; single backslash). Then, <code>loads</code> now attempts to escape <code>\[</code>, which is invalid. To fix, escape the backslashes again. However, it's easier and more practical to specify it as a raw string:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('{"pattern": "\\[0-9]\\"}')
json.decoder.JSONDecodeError: Invalid \escape: line 1 column 14 (char 13)
&gt;&gt;&gt; json.loads(r'{"pattern": "\\[0-9]\\"}')
{'pattern': '\\[0-9]\\'} # No error
</code></pre>
<p>Note that this problem won't apply if loading from a file.</p>
<p><code>test.json</code>:</p>
<pre><code>{"pattern": "\\[0-9]\\"}
</code></pre>
<p>Python:</p>
<pre><code>import json

with open('test.json', 'r') as infile:
    json.load(infile) # no problem
</code></pre>
<p>Basically, the problem arises with the fact that you're passing in a string <em>literal</em>, but ironically, your string <em>literal</em> isn't being taken <em>literally</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>r</code> means that the string is to be treated as a raw string, which means all escape codes will be ignored:</p>
<pre><code>json.loads(r'{"pattern": "\\[0-9]\\"}')
</code></pre>
</div>
<span class="comment-copy"><code>json.loads(r'{"pattern": "\\[0-9]\\"}')</code></span>
<span class="comment-copy">What's your <i>actual</i> JSON? Your string literal isn't right but whatever you're loading ought to be.</span>
<span class="comment-copy">What is the regex error ?</span>
<span class="comment-copy">And how would this be done without using the raw syntax ?</span>
<span class="comment-copy">@sln: Escape the backslashes again: <code>'{"pattern": "\\\\[0-9]\\\\"}'</code></span>
<span class="comment-copy">@sln I mean, you could do <code>'{"pattern": "\\\\[0-9]\\\\"}'</code>, but especially if you're getting the json string from an outside source, the raw syntax is better.</span>
<span class="comment-copy">So in python single quoted string is the same as a double quoted one ? where <code>'\n'</code> is a carriage return ?</span>
<span class="comment-copy">@Jack I should have worded that better, I meant that Python processes escape sequences in the string literal. For example, replacing <code>\n</code> with newline, <code>\t</code> with tab, etc.</span>
