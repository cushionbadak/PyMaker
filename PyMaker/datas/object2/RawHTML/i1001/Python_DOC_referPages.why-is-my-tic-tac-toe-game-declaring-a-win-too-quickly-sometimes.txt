<div class="post-text" itemprop="text">
<p>I'm trying to make a tic-tac-toe game in python, but I can't get it to detect a win. This is a part of the book: Automating the Boring stuff using python.</p>
<p>Below is the code and my attempt:</p>
<pre><code>theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',
            'mid-L': ' ', 'mid-M': ' ', 'mid-R': ' ',
            'low-L': ' ', 'low-M': ' ', 'low-R': ' '}


def printBoard(board):
    print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])
    print('-+-+-')
    print(board['mid-L'] + '|' + board['mid-M'] + '|' + board['mid-R'])
    print('-+-+-')
    print(board['low-L'] + '|' + board['low-M'] + '|' + board['low-R'])

turn = 'X'

for i in range(9):
    printBoard(theBoard)
    print('Turn for ' + turn + '. Move on which space?')
    move = input()
    theBoard[move] = turn

    #X wins
    if theBoard['top-L' and 'top-M' and 'top-R'] == 'X':
        print('X Won!')
        break

    if theBoard['mid-L' and 'mid-M' and 'mid-R'] == 'X':
        print('X Won!')
        break

    if theBoard['low-L' and 'low-M' and 'low-R'] == 'X':
        print('X Won!')
        break

    if theBoard['top-L' and 'mid-L' and 'low-L'] == 'X':
        print('X Won!')
        break

    if theBoard['top-M' and 'mid-M' and 'low-M'] == 'X':
        print('X Won!')
        break

    if theBoard['top-R' and 'mid-R' and 'low-R'] == 'X':
        print('X Won!')
        break

    if theBoard['top-L' and 'mid-M' and 'low-R'] == 'X':
        print('X Won!')
        break

    if theBoard['top-R' and 'mid-M' and 'low-L'] == 'X':
        print('X Won!')
        break

    #O wins
    if theBoard['top-L' and 'top-M' and 'top-R'] == 'O':
        print('O Won!')
        break

    if theBoard['mid-L' and 'mid-M' and 'mid-R'] == 'O':
        print('O Won!')
        break

    if theBoard['low-L' and 'low-M' and 'low-R'] == 'O':
        print('O Won!')
        break

    if theBoard['top-L' and 'mid-L' and 'low-L'] == 'O':
        print('O Won!')
        break

    if theBoard['top-M' and 'mid-M' and 'low-M'] == 'O':
        print('O Won!')
        break

    if theBoard['top-R' and 'mid-R' and 'low-R'] == 'O':
        print('O Won!')
        break

    if theBoard['top-L' and 'mid-M' and 'low-R'] == 'O':
        print('O Won!')
        break

    if theBoard['top-R' and 'mid-M' and 'low-L'] == 'O':
        print('O Won!')
        break

    if turn == 'X':
        turn = 'O'

    else:
        turn = 'X'

printBoard(theBoard)
</code></pre>
<p>What happens is: When I type for example: mid-R it wil immediately say that X won. The first four 'Xwins' work great, but after that everything goes wrong as I just explained.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's just your syntax problem. No need to check for X's and O's separately, you can just check if there is a winner after one person goes and check for winner on the <code>turn</code> variable, which stores X or O anyways. Assuming you can only win immediately after your own turn. </p>
<pre><code># check winner
if theBoard['top-L'] == theBoard['top-M'] == theBoard['top-R'] == turn:
    print(turn + ' Won!')
    break
# all other scenarios here...

# switch turns at the end AFTER checking for winner
if turn == 'X':
    turn = 'O'
else:
    turn = 'X'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is that <code>if theBoard['mid-L' and 'mid-M' and 'mid-R'] == 'X':</code> is not doing what you think it's doing.  It's not checking if all three positions are 'X'.  It's just returning the right most value at all times.  See <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Boolean Operation</a> from the documentations:</p>
<blockquote>
<p>The expression <code>x and y</code> first evaluates <code>x</code>; if <code>x</code> is false, its value is
  returned; otherwise, <code>y</code> is evaluated and the resulting value is
  returned.</p>
<p>The expression <code>x or y</code> first evaluates <code>x</code>; if <code>x</code> is true, its value is
  returned; otherwise, <code>y</code> is evaluated and the resulting value is
  returned.</p>
</blockquote>
<p>Since the boolean value of non-empty string is always <code>True</code>, <code>'mid-L' and 'mid-M' and 'mid-R'</code> will always return <code>'mid-R'</code>, which gives you the condition of <code>theBoard['mid-R'] == 'X'</code> and will yield <code>True</code>, giving you the condition that X wins.</p>
<p>As for the remedy, I believe @Endyd already got you covered.</p>
<p>The most ideal case is not to hard code all the winning conditions, but it will require restructuring your code... perhaps when you have a better understanding I'd recommend you to come back and try for a more dynamic solution.  As for now, happy learning!</p>
</div>
<span class="comment-copy">This does never check if there is a winner. So your "I can't get it to stop when someone wins" cannot be true.</span>
<span class="comment-copy">Sure it's possible. You just need to add a check after each move to see if the board is in a winning position. Have you tried that yet? If so, can you show what you tried and describe exactly how it's failing?</span>
<span class="comment-copy">@glibdud I did try someting. I tried to do this:   #Xwins     if theBoard['top-L' and 'top-M' and 'top-R'] == 'X':         print('X Won!')         break.   I did this for every possibilty and for 'O', but when I type for example: 'mid-L', it immedeatly says that I won and then it ends</span>
<span class="comment-copy">There's eight cases where there is a winner: three horizontal, three vertical, and two diagonal. You will have to hard-code checking if any of those eight instances are all filled with X or all filled with O every turn (or after turn 5, since that's the earliest a player can have 3 in a row). Perhaps write a function that will check for all X/all O and pass the eight instances to it (topL, topM, topR, etc)</span>
<span class="comment-copy">@Endyd I edited my post to show my attempt. I have limited knowledge of python, so this is the best I could come up with XD</span>
<span class="comment-copy">Yesss This worked perfectly! Thank You!</span>
<span class="comment-copy">Yes that's it. I totally forgot that that's how booleans worked. As I said: I'm a beginner. Thanks!</span>
<span class="comment-copy">We're all beginners at one point, there's no shame in admitting we don't know something if we are willing to learn it.  The community is happy to help those who shows they are eager to learn and have put in the effort :)</span>
