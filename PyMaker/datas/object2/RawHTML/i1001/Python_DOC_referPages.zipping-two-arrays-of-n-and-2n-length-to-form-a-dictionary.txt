<div class="post-text" itemprop="text">
<p>I am struggling with this little thingy. Suppose:</p>
<pre><code>field_name = ['name', 'age', 'sex']
field_values = ['john', '24', 'M', 'jane', '26', 'F']
</code></pre>
<p>output something like:</p>
<pre><code>{  'name': ['john','jane'],
   'age': ['24', '26'],
   'sex': ['M', 'F']
}
</code></pre>
<p>Zipping right now:</p>
<pre><code>dict_sample_fields = dict(zip(field_name, field_value))
#output
{  'name': 'john',
   'age': '24',
   'sex': 'M'
}
</code></pre>
<p>How do I achieve a cyclic zipping on values? </p>
<p>I can achieve this long way having multi-loops. One-liner would be cool :D. </p>
</div>
<div class="post-text" itemprop="text">
<p>Quite simple really, you don't even need <code>zip</code>:</p>
<pre><code>{k: field_values[i::len(field_name)] for i, k in enumerate(field_name)}

# {'name': ['john', 'jane'], 'age': ['24', '26'], 'sex': ['M', 'F']}
</code></pre>
<p>Make use of the steps in slicing your <code>list</code>, and starting with the index of the <code>field_name</code> will do.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that your values are separated by a distance of 3 indices, you can do something like this without using any <code>zip</code> by a single for loop. Using <code>enumerate</code> gives access to index which you can leverage to access the list values. In case you want to make it more general, you can use the number of fields ('keys') as the offset. </p>
<pre><code>dict_sample_fields = {}

offset = len(field_name)

for i, key in enumerate(field_name):
    dict_sample_fields[key] = [field_values[i], field_values[i+offset]]
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'name': ['john', 'jane'], 'age': ['24', '26'], 'sex': ['M', 'F']}
</code></pre>
<p>Putting it all together </p>
<pre><code>dict_sample_fields = {key: [field_values[i], field_values[i+3]] for i, key in enumerate(field_name)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can group the values with the <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.grouper" rel="nofollow noreferrer"><code>grouper</code></a> function from <a href="https://pypi.org/project/more-itertools/" rel="nofollow noreferrer"><code>more_itertools</code></a> or with the namesake <a href="https://docs.python.org/3.7/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipe</a> in the <code>itertools</code> docs. The groups can then be transposed with <code>zip</code>.</p>
<pre><code>&gt;&gt;&gt; from more_itertools import grouper                                                                                            
&gt;&gt;&gt;                                                                                                                               
&gt;&gt;&gt; field_name = ['name', 'age', 'sex']                                                                                           
&gt;&gt;&gt; field_values = ['john', '24', 'M', 'jane', '26', 'F']                                                                         
&gt;&gt;&gt;                                                                                                                               
&gt;&gt;&gt; dict(zip(field_name, map(list, zip(*grouper(len(field_name), field_values)))))                                                              
{'age': ['24', '26'], 'name': ['john', 'jane'], 'sex': ['M', 'F']}
</code></pre>
<p>This produces no intermediate lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have control over the structure of <code>field_values</code> (which you do as I understand from your comment), you can take a step back, and <em>reformat</em> them into a nested list. It would then look like this and be much better for your task:</p>
<pre><code>field_values = [['john', '24', 'M'], ['jane', '26', 'F']]
</code></pre>
<p>Now it is just a single, readable line:</p>
<pre><code>dict_sample_fields = dict(zip(field_name, zip(*field_values)))
</code></pre>
<p>which produces:</p>
<pre><code>{'name': ('john', 'jane'), 'age': ('24', '26'), 'sex': ('M', 'F')}
</code></pre>
<hr/>
<p><em>Being able to solve whatever problem comes your way is definitely a very important asset but making sure you don't have many problems is even better.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> multiple times:</p>
<pre><code>field_name = ['name', 'age', 'sex']
field_values = ['john', '24', 'M', 'jane', '26', 'F']

values = list(zip(*zip(field_values[::3],field_values[1::3], field_values[2::3])) )

result = { key : list(value) for key, value in zip(field_name, values)}
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'sex': ['M', 'F'], 'name': ['john', 'jane'], 'age': ['24', '26']}
</code></pre>
<p>Or in one line:</p>
<pre><code>result = { key : list(value) for key, value in zip(field_name, zip(*zip(field_values[::3], field_values[1::3], field_values[2::3])))}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a long way of doing it. You can probably write a one-liner with this but would make it unreadable. The output is different but may help in your problem. 
 Hope it helps</p>
<pre><code>field_names = ['name', 'age', 'sex']
field_values = ['john', '24', 'M', 'jane', '26', 'F']

breaking_number = len(field_names)
master_dict = {}

# break list into equal parts size of field_names
chunks = [field_values[x:x+breaking_number] for x in range(0, len(field_values), breaking_number)]

for chunk in chunks:
    # zip this chunk with field_name and make one dict
    master_dict.update(list(zip(field_names, chunk)))
    print(master_dict)
</code></pre>
<p>Outputs:</p>
<pre><code>{'name': 'john', 'age': '24', 'sex': 'M'}
{'name': 'jane', 'age': '26', 'sex': 'F'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is way of doing it.</p>
<pre><code>field_name = ['name', 'age', 'sex']
field_values = ['john', '24', 'M', 'jane', '26', 'F']

dict_vals = {}

for idx, filed in enumerate(field_name):
    dict_vals[filed] = field_values[idx::len(field_name)]

print(dict_vals)   
// {'age': ['24', '26'], 'name': ['john', 'jane'], 'sex': ['M', 'F']}
</code></pre>
<p>P.S: Just to help you understand this statement<code>field_values[idx::len(field_name)]</code></p>
<p><code>L[start_index::step_number]</code> means a slice of L where the <code>start_index</code> is the index to start from and <code>step_number</code> tells the interpreter how many value index it needs to skip. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one answer making use of nested <code>zip()</code>:</p>
<pre><code>field_name = ['name', 'age', 'sex']
field_values = ['john', '24', 'M', 'jane', '26', 'F']

n = len(field_name)

result = dict(zip(field_name, map(list, zip(field_values[:n], field_values[n:]))))

print(result)
# {'name': ['john', 'jane'], 'age': ['24', '26'], 'sex': ['M', 'F']}
</code></pre>
</div>
<span class="comment-copy">the best solution to this problem might be before the posted code. Could not <code>field_values</code> be a nested list, like <code>[['john', '24', 'M'], ['jane', '26', 'F']]</code>?</span>
<span class="comment-copy">Yes, it can be. If that solves the issue. :O</span>
<span class="comment-copy">Bamm. !! I never used enumerate.</span>
<span class="comment-copy"><code>enumerate</code> is a great tool, I assure you learning about it will make your days easier.</span>
<span class="comment-copy">I missed by few seconds :) Great answer</span>
<span class="comment-copy">Never have seen this grouper before :O. Thanks alot</span>
<span class="comment-copy">zip(*field_values) This !!! :O</span>
<span class="comment-copy">Your answer is also correct using zip. Making it for arbitrary length will also refine it.</span>
