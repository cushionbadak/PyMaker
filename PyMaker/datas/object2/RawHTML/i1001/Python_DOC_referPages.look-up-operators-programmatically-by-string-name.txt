<div class="post-text" itemprop="text">
<p>Suppose I have the following code:</p>
<pre><code>def process(x, y, op):
    if op == 'eq':
        return x == y
    elif op == 'gt':
        return x &gt; y
    elif op == 'lt':
        return x &lt; y
    ... for many more operators, e.g. &gt;=, &lt;=, !=
</code></pre>
<p>How can I distill this down more programmatically? I'm thinking of creating a lookup like this:</p>
<pre><code>op_lookup = {'eq': '==', 'gt': '&gt;', 'lt': '&lt;', ...}
</code></pre>
<p>Then doing something like this:</p>
<pre><code>def process(x, y, op):
    return x op_lookup[op] y
</code></pre>
<p>Which <strong>obviously</strong> isn't valid Python...</p>
<p>Something like <code>eval</code> might work:</p>
<pre><code>def process(x, y, op):
    return eval('{} {} {}'.format(x, op_lookup[op], y))
</code></pre>
<p>Which produces this, in an example:</p>
<pre><code>&gt;&gt;&gt; process(1, 1, 'eq')
True
&gt;&gt;&gt; process(1, 1, 'lt')
False
</code></pre>
<p>Is there a better (safer?) way of accomplishing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Operators as callables are hidden in the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a> module. You can dynamically access a specific operator by its name with the <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> builtin.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import operator         
&gt;&gt;&gt; getattr(operator, 'eq')(1, 1)
True
&gt;&gt;&gt; getattr(operator, 'eq')(1, 2)
False
&gt;&gt;&gt; getattr(operator, 'lt')(1, 2)
True
&gt;&gt;&gt; getattr(operator, 'lt')(2, 1)
False
</code></pre>
<p>We can use this to rewrite your function as follows.</p>
<pre><code>import operator

def process(x, y, op):
    return getattr(operator, op)(x, y)
</code></pre>
<p>(Add sanity checks as required.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a> module is what you want:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; op_lookup = {'eq': operator.eq, 'gt': operator.gt, 'lt': operator.lt}
&gt;&gt;&gt; 
&gt;&gt;&gt; def process(x, y, op):
...     return op_lookup[op](x, y)
... 
&gt;&gt;&gt; process(1, 1, 'eq')
True
&gt;&gt;&gt; process(1, 1, 'lt')
False
</code></pre>
</div>
<span class="comment-copy">Interesting -- I didn't think about accessing attributes of a module like that. I guess everything is an object in Python... (<code>type(operator)</code>)</span>
<span class="comment-copy">@blacksite yes, Python is very consistent in this regard.</span>
