<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17474211/how-to-sort-python-list-of-strings-of-numbers">How to sort python list of strings of numbers</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I just starting out in Python after a long absence from the programming language and I am writing a program which reads from a file to retrieve values. Currently I've got the program in question to read from the file and put certain values into a tuple, however, the problem I am now facing is returning the min and max values from my list of tuples in python, the list of values I have in the tuple list is: </p>
<pre><code>tuple = ('44.0', '34.0', '17.0', '6.0','15.0') 
</code></pre>
<p>However when I use <code>max</code> to call <code>max(tuple)</code> i am greeted with <code>6.0</code> as my result rather than the correct answer of <code>44.0</code>. Likewise if I try to return the minimum value by using <code>min(tuple)</code>. I am instead given the value of <code>15.0</code> rather than the correct value of <code>6.0</code>. </p>
<p>Please, would you be able to advise how I can resolve this so that I can return the correct values? </p>
</div>
<div class="post-text" itemprop="text">
<p>Comparisons on strings are <a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="noreferrer">lexicographical</a>, by default. This means that "9" is lexicographically greater than "10", because the ASCII value of "9" (57) is greater than the ASCII value of "1" (49), and so on.</p>
<p>If you want to compare these string values by their actual numeric value, you'll have to pass a <code>key</code> argument to <a href="https://docs.python.org/3/library/functions.html#max" rel="noreferrer"><code>max</code></a>/<a href="https://docs.python.org/3/library/functions.html#min" rel="noreferrer"><code>min</code></a>:</p>
<pre><code>max(tupple, key=float)
# '44.0'

min(tupple, key=float)
# '6.0'
</code></pre>
<p>Of course, this requires all your tuple values to be string representation of floats/ints. If you have a non-numeric string ('abc', for example), this is not going to work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting '6.0' as the maximum value because you are actually comparing strings and not integers/floats.</p>
<p>String comparisons are lexicographical, and hence you get '6.0' as the maximum value.</p>
<p>You can pass a <code>key</code> parameter so that the comparisons are arithmetic and not lexicographical, like this:</p>
<pre><code>max(yourTupple, key = float)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Elements of tupple are strings, you can give key function to max and min:</p>
<pre><code> max(tupple, key=float) 44.0
 min(tupple, key=float) 6.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can either pass key to min or max as pointed by others, or you can <code>map</code> tuple to floats</p>
<pre><code>t = ('44.0', '34.0', '17.0', '6.0','15.0')
print(min(map(float,t))) #prints 6.0
print(max(map(float,t))) #prints 44.0
</code></pre>
<p>also please avoid naming variables <code>tuple</code> as this is name of built-in function, so for example <code>tuple([1,2,3])</code> is legal python syntax returning tuple <code>(1,2,3)</code>, but if you place earlier in code for example <code>tuple = (10,11,12)</code> it would produce <code>TypeError</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The values in your tuple are defined as strings. If you want them treated as float, don't use the parentheses when defining the tuple:</p>
<p>myTuple = (44.0, 34.0, 17.0, 6.0,15.0)</p>
<p>print(min(myTuple)) # 6.0</p>
<p>print(max(myTuple))  #44.0</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you are getting strange results is because the items in the variable tupple are all strings and string comparison works differently than number comparison. In string comparison, the first element in each string item is used for the first pass of the comparison. So in the case of tupple, the comparison would be between these items <code>('4', '3 ', '1', '6', '1')</code>. Taking the max of these would yield '6' which is the maximum (but represents '6.0' in the original tupple) and the minimum would be '1' (the last 1 which represents 15.0).</p>
<p>To avoid this, you should first convert the string values to floats and take the max and min as you desired...</p>
<pre><code># convert the elements of tupple to float
tupple = tuple(float(i) for i in tupple)
print(tupple)
# returns (44.0, 34.0, 17.0, 6.0, 15.0)

# take the max of tupple
max(tupple)
# returns 44.0

# take the min of tupple
min(tupple)
# returns 6.0
</code></pre>
</div>
<span class="comment-copy">The values in your list are strings, not numbers.</span>
<span class="comment-copy">The values inside your tuple are strings, when you apply max on them you get the string with the largest alphabetical order. Convert them to numbers first.</span>
<span class="comment-copy">@Rakesh The <code>lambda</code> wrapping <code>float</code> is superfluous.</span>
<span class="comment-copy">@snakecharmerb found that one too - but it is about sorting, not min/max although the solutions are similar</span>
<span class="comment-copy">@PatrickArtner I think that's a distinction without a difference.  The concept is the same regardless of whether we are sorting or finding the max/min.</span>
