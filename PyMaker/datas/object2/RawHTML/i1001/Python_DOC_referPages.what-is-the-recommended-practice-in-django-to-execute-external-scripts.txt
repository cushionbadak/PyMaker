<div class="post-text" itemprop="text">
<p>I'm planning to build a WebApp that will need to execute scripts based on the argument that an user will provide in a text-field or in the Url.</p>
<p>possible solutions that I have found:</p>
<ol>
<li><p>create a lib directory in the root directory of the project, and put the scripts there, and import it from views.</p></li>
<li><p>using subprocess module to directly run the scripts in the following way:</p>
<pre><code>subprocess.call(['python', 'somescript.py', argument_1,...])
</code></pre></li>
</ol>
<p>argument_1: should be what an end user provides.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I'm planning to build a WebApp that will need to execute scripts</p>
</blockquote>
<p>Why should it "execute scripts" ? <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Turn your "scripts" into proper modules</a>, import the relevant functions and call them. The fact that Python <em>can</em> be used as a "scripting language" doesn't mean it's not a proper programming language.</p>
</div>
<div class="post-text" itemprop="text">
<p>Approach (1) should be the default approach. Never subprocess unless you absolutely have to.</p>
<p>Disadvantages of subprocessing:</p>
<ol>
<li>Depends on the underlying OS and in your case Python (i.e. is <code>python</code> command the same as the Python that runs the original script?).</li>
<li>Potentially harder to make safe.</li>
<li>Harder to pass values, return results and report errors.</li>
<li>Eats more memory and cpu (a side effect is that you can utilize all cpu cores but since you are writing a web app it is likely you do that anyway).</li>
<li>Generally harder to code and maintain.</li>
</ol>
<p>Advantages of subprocessing:</p>
<ol>
<li>Isolates the runtime. This is useful if for example scripts are uploaded by users. You don't want them to mess with your application.</li>
<li>Related to 1: potentially easier to dynamically add scripts. Not that you should do that anyway. Also becomes harder when you have more then 1 server and you need to synchronize them.</li>
<li>Well, you can run non-python code that way. But it doesn't apply to your case.</li>
</ol>
</div>
<span class="comment-copy">The second approach leaves you at the mercy of whatever the default python interpreter on the executing machine is. Say you wrote code for python3 and the server has python2.7 set as default, your scripts will all fail in very interesting ways.</span>
<span class="comment-copy">removed irrelevant "django" and "drf" tags.</span>
<span class="comment-copy">yes I think that's what I'm going to do, Is that a standard practice in django?</span>
<span class="comment-copy">Also, do you have some tips on organizing the modules? should I have one folder, and all my modules go there?</span>
<span class="comment-copy">The "standard practice" in django is to use Python standard practices - Django is a python framework, so it's just python code in the end. And "how to organize your modules" is  way too broad a question - it really depends on what your code is doing. The only hints are the usual "high cohesion / low coupling".</span>
