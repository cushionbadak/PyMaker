<div class="post-text" itemprop="text">
<p>I have a <code>unicode</code> object which should represent a <code>json</code> but it contains the unicode <code>u</code> in it as part of the string value e.g. <code>u'{u\'name\':u\'my_name\'}'</code></p>
<p>My goal is to be able to load this into a <code>json</code> object. Just using <code>json.loads</code> fails. I know this happens because of the <code>u</code> inside the <code>string</code> which are not part of an acceptable <code>json</code> format. </p>
<p>I, then, tired sanitizing the <code>string</code> using <code>replace("u\'", "'")</code>, <code>encode('ascii', 'ignore')</code> and other methods without success.</p>
<p>What finally worked was using <code>ast.literal_eval</code> but I'm worried about using it. I found a few sources online claiming its <a href="https://stackoverflow.com/a/7689085/4890123">safe</a>. But, I also found other sources claiming it's bad practice and one should avoid it.</p>
<p>Are there other methods I'm missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>The unicode string is the result of <code>unicode</code> being called on a dictionary.  </p>
<pre><code>&gt;&gt;&gt; d = {u'name': u'myname'}
&gt;&gt;&gt; u = unicode(d) 
&gt;&gt;&gt; u  
u"{u'name': u'myname'}" 
</code></pre>
<p>If you control the code that's doing this, the best fix is to change it to call <code>json.dumps</code> instead.</p>
<pre><code>&gt;&gt;&gt; json.dumps(d)
'{"name": "myname"}'
</code></pre>
<p>If you don't control the creation of this object, you'll need to use <code>ast.literal_eval</code> to create the dictionary, as the unicode string is not valid json.                                                                                          </p>
<pre><code>&gt;&gt;&gt; json.loads(u)
Traceback (most recent call last):
...
ValueError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)


&gt;&gt;&gt; ast.literal_eval(u)
{u'name': u'myname'}
</code></pre>
<p>The <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">docs</a> confirm that ast.literal_eval is safe:</p>
<blockquote>
<p>can be used for safely evaluating strings containing Python values from untrusted sources</p>
</blockquote>
<p>You <em>could</em> use <code>eval</code> instead, but as you don't control the creation of the object you cannot be certain that it has not been crafted by a malicious user, to cause damage to your system.</p>
</div>
<span class="comment-copy"><code>ast.literal_eval</code> <i>is</i> safe.</span>
<span class="comment-copy">@dawg thanks for the quick response. Is it preferable to try and replace the <code>u</code> values etc.? Does <code>ast.literal_eval</code> have any negative downsides to it?</span>
<span class="comment-copy"><i>Does ast.literal_eval have any negative downsides to it?</i> No, not really. If it works for your data (other than the example here) - use it.</span>
<span class="comment-copy">Thanks for the assist @dawg</span>
<span class="comment-copy">@GuyGrin, I have updated my answer with 1 more method. Please check, it as it allows you to use <b>json</b> module. Note that the <b>JSON</b> (JavaScript Object Notation) suggests <code>"</code> (double quotes) to surround keys and strings. And this is a reason for <code>json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</code>. I have also suggested <b>Unsafe</b> way, just ignore that if you wish. You will need to find a way in case if your data string contains <code>u</code> as part of original data.</span>
