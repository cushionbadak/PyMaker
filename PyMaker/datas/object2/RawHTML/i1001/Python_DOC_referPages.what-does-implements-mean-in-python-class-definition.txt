<div class="post-text" itemprop="text">
<p>The bellow code sample is from a BeeWare suite example. (<a href="https://github.com/eliasdorneles/drawingapp-voc/blob/master/drawingapp/app.py" rel="nofollow noreferrer">https://github.com/eliasdorneles/drawingapp-voc/blob/master/drawingapp/app.py</a>) </p>
<p>What does the expression <code>implements=android.view.View[OnClickListener]</code> means? There should be (a list of) base class(es). Is it some incompatible special syntax of the framework or standard python I can not comprehend (and missing from the documentation)?   </p>
<p>Moreover, we are using <code>OnClickListener</code> here which is never imported. There is no wildcard imports (*) and no module prefix before the symbol like <code>android.Constants.OnClickListener</code> or someting like that. How can the Python interpreter find the <code>OnClickListener</code> value in this case?   </p>
<pre><code>import android
from android.widget import LinearLayout, TextView, Button
import android.content.Context
from android.graphics import Bitmap, Canvas, Color, Paint, Path, PorterDuff
from android.view import MotionEvent, Gravity
import android.view

class ButtonClick(implements=android.view.View[OnClickListener]):
    def __init__(self, callback, *args, **kwargs):
        self.callback = callback
</code></pre>
<p>'''</p>
</div>
<div class="post-text" itemprop="text">
<p>So, the key to the mistery here is that this is not quite Python code-  rather, it is a source file meant to be transpiled with <a href="https://pybee.org/project/projects/bridges/voc/" rel="nofollow noreferrer">VOC</a> - that will generate Java bytecode, which will be further processed to work as an Android application using the standard Android Api. </p>
<p>As a transpiler, VOC relies on syntax which are valid Python, but it  allows itself to take detours from the official language - like using keyword arguments on class definitions. That would only make sense in Python if it were inheriting a class which would implement the special method <code>__init_subclass__</code>, or use a custom metaclass to interpret these arguments - otherwise they'd have no effect. Also, VOC probably use these keywords (<code>extends</code> and <code>implements</code>) to indicate exactly these words as they are in Java class declaration syntax. </p>
<p>Also, as you put it, the name <code>OnClickListener</code> as it is in there would fail with a <code>NameError</code> in normal Python - it is likely that VOC defines additional names that behave like builtin names. In ordinary Python, if you create a function/method definition instead of a class definition, it is possible to makeuse of non-imported or undefined names as annotations. That is  <code>android.view.View[OnClickListener]</code> would follow <code>:</code> instead of <code>=</code>, in a function definition. Annotations are lazily evaluated in Python 3.7 (but not in Python 3.6), so it would not cause an error. As it is, though, it would just raise a NameError in normal Python.</p>
<p>Here is a quick start for Python android apps using VOC in PyBee <a href="https://pybee.org/project/using/android-app/" rel="nofollow noreferrer">https://pybee.org/project/using/android-app/</a> </p>
<p><strong>update</strong> answer extensively reworded after I found out about VOC, though the first findings on "this is not Python" were correct)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/reference/compound_stmts.html#class-definitions" rel="nofollow noreferrer">class definition syntax</a> lets you use <code>keyword=value</code> entries just as much as base classes. By default <code>metaclass=...</code> has meaning, and when using <a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer"><code>__init_subclass__</code></a>, other such keyword arguments are passed on to that method.  So using <code>implements=</code> in a class definition is fine from a syntax point of view.</p>
<p>Note that BeeWare <em>doesn't run Python</em> on Android, it uses a <a href="https://pybee.org/project/projects/bridges/voc/" rel="nofollow noreferrer">transpiler called VoC</a> to translate Python code to Java. The <code>implements=</code> keyword argument in classes is used to <a href="https://voc.readthedocs.io/en/latest/tutorial/tutorial-1.html#implementing-a-java-interface" rel="nofollow noreferrer">let you define Java interfaces in Python code</a>. Presumably the additional names like <code>OnClickListener</code> are available because VoC makes them available.</p>
<p>VoC translates Python bytecode to Java, so all that BeeWare compatible Python has to achieve is to be <em>correct Python syntax</em>. Runtime issues such as <code>NameError</code>s don't have to be a problem, that's something the Java translator can compensate for.</p>
</div>
<span class="comment-copy">In the readme it says that this python code is compiled to Java. So I belive that code is never supposed to be run on a standard interpreter and in fact raises an exception.</span>
<span class="comment-copy">Python's <a href="https://docs.python.org/3/reference/compound_stmts.html#class-definitions" rel="nofollow noreferrer">class definition syntax</a> lets you use <code>keyword=value</code> entries just as much as base classes. By default <code>metaclass=...</code> has meaning, and when using <a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer"><code>__init_subclass__</code></a>, other such keyword arguments are passed on to that method. Presumably the BeeWare suite is relying on that syntax.</span>
