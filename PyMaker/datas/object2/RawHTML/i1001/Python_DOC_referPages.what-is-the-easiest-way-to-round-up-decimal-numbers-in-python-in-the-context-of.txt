<div class="post-text" itemprop="text">
<p>I have a difficult time dealing with floating point numbers, and I find even the built-in decimal class in Python to be pretty confusing at times. As a solution, I wrote a method myself, which simply takes in a value, and a number of digits which should be shown after the floating point, and returns a string in a nice format. It looks like this:</p>
<pre><code>def format_to_decimal_string(value, decimal_places):
    """
    # Given the `value` and `decimal_places`, this method returns a string
      in the format of a decimal number. Eg: `format_to_decimal_string('99.99', 1)`
      returns '99.9', while `format_to_decimal_string('99.99', 0)` return '99'.

    # The arguments are validated, to make sure `value` can be turned into
      a decimal number, and `decimal_places` is an integer greater than 0.
      The `value` is first turned into a string to accomodate for edge-cases,
      such as `format_to_decimal_string(99.99, 2)`.

    # If `decimal_number` is zero, we return a formatted zero string.

    # The start index is calculated, and using that, we append numbers
      to the string. Once again, we make sure to add zeroes to the start 
      and/or the end if needed.

    # Finally, we append the minus sign if needed, and return the result.
    """

    # Validating arguments
    try:
        decimal_number = decimal.Decimal(str(value)).as_tuple()
    except:
        raise ValueError('The value is not a valid decimal number.')

    if not isinstance(decimal_places, int):
        raise ValueError('The given decimal places is not an integer.')
    if not decimal_places &gt;= 0:
        raise ValueError('The given decimal places must be greater than or equal to zero.')

    # Check if `decimal_number` is zero
    if decimal_number == 0:
        result = '0'
        if not decimal_places == 0:
            result += '.'
        for i in range(decimal_places):
            result += '0'
        return result

    # Finding the start index
    exponent_start_index = len(decimal_number.digits) + decimal_number.exponent

    # Appending the first digit
    if exponent_start_index == 0:
        result = '0'
    else:
        result = ''
        for digit in decimal_number.digits[0:exponent_start_index]:
            result += str(digit)

    # Appending the exponents
    exponent = ''
    if not decimal_places == 0:
        result += '.'
        for digit in decimal_number.digits[exponent_start_index:(decimal_places + exponent_start_index)]:
            exponent += str(digit)
        # Adding extra zeroes to make the number have a valid precision
        if decimal_places &gt; len(exponent):
            for i in range(decimal_places - len(exponent)):
                exponent += '0'

    # Combining the first digit and the exponents
    result = result + exponent

    # Appending the minus sign if needed
    if decimal_number.sign == 1:
        if not decimal.Decimal(result) == 0:
            result = '-' + result

    return result
</code></pre>
<p>Pretty self-explanatory. It accounts for zeroes as well, just to make the output look nice. However, one thing I completely forgot about was rounding up the numbers. For example, <code>format_to_decimal_string(19.2189, 3)</code> returns <code>'19.218'</code>, when I would like it to return <code>'19.219'</code>. With such a huge method, I feel like there is no easy way to add a fix to this? Should I try re-writing a new method with another angle of solution with the rounding up, or can it be incorporated into this existing method? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use the decimal module for this, you can do:</p>
<pre><code>decimal.Decimal(19.2189).quantize(decimal.Decimal(10) ** -3)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal.quantize" rel="nofollow noreferrer">quantize</a> method will round decimals to the number of decimal places in its argument (so you could pass <code>.001</code> instead of raising the decimal to -3).</p>
</div>
<div class="post-text" itemprop="text">
<h3>Using <code>round()</code></h3>
<p>You can use <code>round()</code> to accomplish this. </p>
<pre><code>&gt;&gt;&gt; round(19.2189, 3)
19.219
</code></pre>
<p>If you want to cast this number as a string:</p>
<pre><code>&gt;&gt;&gt; str(round(19.2189, 3))
'19.219'
</code></pre>
<h3>Using <code>format()</code></h3>
<p>You can also use <code>format()</code> to accomplish this:</p>
<pre><code>&gt;&gt;&gt; format(19.2189, '.3f')
'19.219'
</code></pre>
</div>
