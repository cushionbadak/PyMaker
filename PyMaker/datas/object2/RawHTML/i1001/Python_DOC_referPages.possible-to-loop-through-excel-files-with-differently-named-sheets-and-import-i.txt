<div class="post-text" itemprop="text">
<p>I do not have a reproducible example for this but asking it based on interest. </p>
<p>With a loop function in R, we are able to obtain all .csv from a directory with the below code: </p>
<pre><code>file.list &lt;- list.files(pattern='*.csv') #obtained name of all the files in directory
df.list &lt;- lapply(file.list, read.csv) #list
</code></pre>
<p>Would it be possible for us to loop through a directory with .xlsx files instead with different number of sheets? </p>
<p>For instance: A.xlsx contains 3 sheets, Jan01, Sheet2 and Sheet3; B.xlsx contains 3 sheets, Jan02, Sheet2 and Sheet3 ... and so on. The first sheet name changes.</p>
<p>Is it possible to loop through a directory and just obtain the dataframes for the first sheet in all excel files? </p>
<p>Python or R codes are welcome! </p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>another (fast) R-solution using the <code>readxl</code>-package</p>
<pre><code>l &lt;- lapply( file.list, readxl::read_excel, sheet = 1 )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>In R</strong></p>
<p>Here is an <code>R</code> solution using the package <code>openxlsx</code></p>
<pre><code># get all xlsx files in given directory
filesList &lt;- list.files("d:/Test/", pattern = '.*\\.xlsx', full.names = TRUE)

# pre-allocate list of first sheet names
firstSheetList &lt;- rep(list(NA),length(filesList))

# loop through files and get the data of first sheets
for (k in seq_along(filesList)) 
  firstSheetList[[k]] &lt;- openxlsx::read.xlsx(filesList[k], sheet = 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure, its possible using <code>pandas</code> and <code>python</code>.  </p>
<pre><code>import pandas as pd

excel_file = pd.ExcelFile('A.xlsx')
dataframes = {sheet: excel_file.parse(sheet) for sheet in excel_file.sheet_names}
</code></pre>
<p><code>dataframes</code> becomes a dictionary, with the keys being the names of the sheets, and the values becoming the dataframe containing the sheet data.  You can iterate through them like so:</p>
<pre><code>for k,v in dataframes.items():
    print('Sheetname: %s' % k)
    print(v.head())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By using <a href="http://www.pythonexcel.com/openpyxl.php" rel="nofollow noreferrer">Openpyxl</a></p>
<p><code>get_sheet_names()</code>. </p>
<p>This function returns the names of the sheets in a workbook and you can count the names to tell about total number of sheets in current workbook. The code will be:</p>
<pre><code>&gt;&gt;&gt; wb=openpyxl.load_workbook('testfile.xlsx')
&gt;&gt;&gt; wb.get_sheet_names()
['S1, 'S2', 'S3']
</code></pre>
<p>we can access any sheet at one time. Lets suppose we want to access Sheet3. Following code should be written</p>
<pre><code>&gt;&gt;&gt; import openpyxl
&gt;&gt;&gt; wb=openpyxl.load_workbook('testfile.xlsx')
&gt;&gt;&gt; wb.get_sheet_names()
['Sheet1', 'Sheet2', 'Sheet3']
&gt;&gt;&gt; sheet=wb.get_sheet_by_name('Sheet3')
</code></pre>
<p>The function <code>get_sheet_by_name('Sheet3')</code> is used to access a particular sheet. This function takes the name of sheet as argument and returns a sheet object. We store that in a variable and can use it like...</p>
<pre><code>&gt;&gt;&gt; sheet
&lt;Worksheet "Sheet3"&gt;
&gt;&gt;&gt; type(sheet)
&lt;class 'openpyxl.worksheet.worksheet.Worksheet'&gt;
&gt;&gt;&gt; sheet.title
'Sheet3'
&gt;&gt;&gt; 
</code></pre>
<p>and eventually:</p>
<pre><code>worksheet = workbook.get_sheet_by_name('Sheet3')    
for row_cells in worksheet.iter_rows():
    for cell in row_cells:
       print('%s: cell.value=%s' % (cell, cell.value) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For simplicity, lets say we had two workbooks with the first sheet in this format:</p>
<p><a href="https://i.stack.imgur.com/3SDGb.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/3SDGb.png"/></a></p>
<p>You can iterate over each <code>.xlsx</code> file in the directory with <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer"><code>glob.glob()</code></a>, and append the dataframe of the first sheet with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.ExcelFile.parse.html" rel="nofollow noreferrer"><code>pandas.ExcelFile.parse()</code></a> to a list:</p>
<pre><code>from glob import glob
import pandas as pd

sheets = []

# Go through each xlsx file
for xlsx_file in glob("*.xlsx"):

    # Convert sheet to dataframe
    xlsx = pd.ExcelFile(xlsx_file)

    # Get first sheet and append it
    sheet_1 = xlsx.parse(0)
    sheets.append(sheet_1)

print(sheets)
</code></pre>
<p>Which prints two dataframes contained in a list:</p>
<pre><code>[   x  y
0  1  2
1  1  2,    x  y
0  1  2
1  1  2]
</code></pre>
<p>You can also write the above as a <em>list comprehension</em>:</p>
<pre><code>[pd.ExcelFile(xlsx_file).parse(0) for xlsx_file in glob("*.xlsx")]
</code></pre>
<p>You could also store the dataframes into a dictionary with filenames as the key:</p>
<pre><code>{xlsx_file: pd.ExcelFile(xlsx_file).parse(0) for xlsx_file in glob("*.xlsx")}
</code></pre>
</div>
