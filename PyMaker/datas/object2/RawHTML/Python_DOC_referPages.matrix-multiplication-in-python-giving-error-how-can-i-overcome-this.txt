<div class="post-text" itemprop="text">
<p>I am trying to print the following pattern:</p>
<pre><code>3 3 3 3 3
3 2 2 2 3
3 2 1 2 3
3 2 2 2 3
3 3 3 3 3
</code></pre>
<p>My python code is:</p>
<pre><code>def pattern(n):
    d = n + (n - 1)
    l = [[0 for row in range(d)] for col in range(d)]
    for a in range(0, n):
        for i in range(a, d):
            for j in range(a, d):
                l[a][i][j].append(n)
        d -= 1
        n -= 1


print(pattern(3))
</code></pre>
<p>But I am getting the following Error:</p>
<pre><code>Traceback (most recent call last):
File "test.py", line 10, in &lt;module&gt;
  print(pattern(3))
File "test.py", line 7, in pattern
  l[a][i][j].append(n)
TypeError: 'int' object is not subscriptable
</code></pre>
<p>Can anyone guide me how to overcome this?</p>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to start from your own code even if the answer is a bit late...</p>
<p>You code tries to build an array of 0, and then writes decreasing values in sub-array. Simply you wrongly copied it. It should be:</p>
<pre><code>def pattern(n):
    d = n + (n - 1)
    l = [[0 for row in range(d)] for col in range(d)]
    for a in range(0, n):
        for i in range(a, d):
            for j in range(a, d):
                l[i][j]=n
        n -= 1
        d -= 1
    return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because it's somewhat hard to understand how your code is supposed to do what it should (sorry!), here's a pretty Pythonic way to generate a matrix like this as a generator function.</p>
<pre class="lang-py prettyprint-override"><code>def pattern(n):
    size = n * 2 - 1
    n_1 = n - 1
    for y in range(size):
        yield [max(abs(x - n_1), abs(y - n_1)) + 1 for x in range(size)]
</code></pre>
<p>The idea is that we look at the "distance" of the cell we're generating from <code>n - 1</code>, which must be the center point of the grid (which is <code>n * 2 - 1</code> items wide and tall).</p>
<p>As it's a generator function, you can get a list-of-lists out of it by calling e.g. <code>list(pattern(size))</code>.</p>
<p>Here's an example program –</p>
<pre><code>for size in range(1, 6):
    print(size)
    for row in pattern(size):
        print(row)
</code></pre>
<p>– and its output:</p>
<pre><code>1
[1]
2
[2, 2, 2]
[2, 1, 2]
[2, 2, 2]
3
[3, 3, 3, 3, 3]
[3, 2, 2, 2, 3]
[3, 2, 1, 2, 3]
[3, 2, 2, 2, 3]
[3, 3, 3, 3, 3]
4
[4, 4, 4, 4, 4, 4, 4]
[4, 3, 3, 3, 3, 3, 4]
[4, 3, 2, 2, 2, 3, 4]
[4, 3, 2, 1, 2, 3, 4]
[4, 3, 2, 2, 2, 3, 4]
[4, 3, 3, 3, 3, 3, 4]
[4, 4, 4, 4, 4, 4, 4]
5
[5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 4, 4, 4, 4, 4, 4, 4, 5]
[5, 4, 3, 3, 3, 3, 3, 4, 5]
[5, 4, 3, 2, 2, 2, 3, 4, 5]
[5, 4, 3, 2, 1, 2, 3, 4, 5]
[5, 4, 3, 2, 2, 2, 3, 4, 5]
[5, 4, 3, 3, 3, 3, 3, 4, 5]
[5, 4, 4, 4, 4, 4, 4, 4, 5]
[5, 5, 5, 5, 5, 5, 5, 5, 5]
</code></pre>
<hr/>
<p>EDIT: As requested in comments, here's a simplified version which is not a generator function and doesn't use list comprehensions:</p>
<pre class="lang-py prettyprint-override"><code>def pattern_simple(n):
    size = n * 2 - 1
    n_1 = n - 1
    rows = []
    for y in range(size):
        row = []
        for x in range(size):
            row.append(max(abs(x - n_1), abs(y - n_1)) + 1)
        rows.append(row)
    return rows
</code></pre>
</div>
<span class="comment-copy">what are you expecting <code>l[a][i][j]</code> to do?</span>
<span class="comment-copy">Look at the dimensions of <code>l</code></span>
<span class="comment-copy">@Phydeaux I am appending n value to list l using the index values.</span>
<span class="comment-copy">@MohanKumarsajjamoka you aren't appending to <code>l</code>, you are trying to append to <code>l[a][i][j]</code>. But <code>l</code> is a list of lists of integers, so <code>l[a][i][j]</code> throws an exception</span>
<span class="comment-copy">@Phydeaux Thanks for your clarification.</span>
<span class="comment-copy">Thank you very much for your answer. But here my question is why you are assigning n instead of append. I though " l " is a list here right.!</span>
<span class="comment-copy">@MohanKumarsajjamoka <code>l</code> is indeed a list, as is <code>l[i]</code>. But as <code>l</code> was built with 2 dimensions, <code>l[i][j]</code> is a scalar...</span>
<span class="comment-copy">Sorry to asking you this. I dont know about the scalar in python. May be outside of python also. Will you please explain it to me ?</span>
<span class="comment-copy">@MohanKumarsajjamoka: a scalar is a raw number and not an array, list or vector</span>
<span class="comment-copy">Thanks you man.</span>
<span class="comment-copy">Thanks @AKX. Is there any simple way, I mean that list comprehension is confusing me.</span>
<span class="comment-copy">@MohanKumarsajjamoka Sure, I added a simplified version in an edit. :)</span>
<span class="comment-copy">Thanks You very much @AKX</span>
