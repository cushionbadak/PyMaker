<div class="post-text" itemprop="text">
<p>I am still learning the concepts of OOP so please forgive me if this is a poor question:</p>
<p>If <code>__init__</code> is needed to instantiate an object in Python, why does the following work with no call to <code>__init__</code>?:</p>
<pre><code>class Person:
    #Note the lack of __init__(self):
    def run(self):
        print('I am a person')

man = Person()
man.run() #Prints 'I am a person')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow">python documentation</a>:</p>
<blockquote>
<p>The instantiation operation (“calling” a class object) creates an
  empty object. Many classes like to create objects with instances
  customized to a specific initial state. Therefore a class may define a
  special method named <strong>init</strong>(), like this...</p>
</blockquote>
<p>So <code>__init__</code> isn't needed, it is the mechanism python provides to allow you to set an initial state of your object when it is initialized.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no need to create an <code>__init__</code> function if you do not need to do any initialization other than that provided by the parent class. Note that <code>__init__</code> functions of any parent class do get called automatically:</p>
<pre><code>In [1]: class Parent(object):
   ...:     def __init__(self):
   ...:         print 'Inside __init__ of parent'

In [2]: class Person(Parent):
   ...:     def run(self):
   ...:         print 'I am a person'

In [3]: p = Person()
Inside __init__ of parent

In [4]: p.run()
I am a person
</code></pre>
<p>In modern Python, any class implicitly derives from the <code>object</code> class, which supposedly takes care of basic things like allocating memory space, even if you do not add any other properties.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__init__</code> is a <em>Constructor</em>, this is simple put a function that is called when you create an object. It is normally used to set up the object so that it is ready to be used. If no <code>__init__</code> exist the object will still be created. It simply means that the object doesn't get anything done when constructed.</p>
</div>
<span class="comment-copy">Thank you. I don't know how I missed this.  As an aside, did you read the entire tutorial, and if so would you recommend it (over books on Python such as the one I am reading now)</span>
<span class="comment-copy">@Startec I personally think reading the entire tutorial can be a little bit overwhelming (I didn't read it myself) but I do recommend you to use it as a reference book to look for concrete parts of the language you are interested in or you need to use: Concurrent programming, data structures, ... You will find yourself having read it mostly completely after having worked for a long time with python. This is just my opinion however.</span>
<span class="comment-copy">Thanks, I have just never gotten anyone's opinion on it and was / am considering reading it straight.</span>
<span class="comment-copy">@Startec <a href="http://www.itmaybeahack.com/book/python-2.6/html/index.html" rel="nofollow noreferrer">Building Skills in Python, by Steven F.Lott</a> is a <i>must</i> for me.  I already have read it, and now I'm going to read the second title <a href="http://www.itmaybeahack.com/book/oodesign-python-2.1/html/index.html" rel="nofollow noreferrer">Building Skills in Object-Oriented Design</a></span>
<span class="comment-copy">Technically speaking, Python uses a 2 stages initialisation scheme so there's no proper "constructor" - there are an allocator (<code>__new__</code>) and an initialiser (<code>__init__</code>). The initialiser will only get called if it exists, so it is possible to have the allocator doing all the initialisation stuff and no initialiser at all (FWIW that's the case for immutables types IIRC).</span>
<span class="comment-copy">@brunodesthuilliers still, the python data reference calls the <code>__init__</code> function a constructor (<a href="https://docs.python.org/3/reference/datamodel.html?highlight=__init__#object.__init__" rel="nofollow noreferrer">docs.python.org/3/reference/…</a>). All OOP languages I know of allows the constructor to "touch" the internal members of the object, meaning that the allocation of the object has already been completed. I do not think this is a special case with python.</span>
