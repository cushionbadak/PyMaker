<div class="post-text" itemprop="text">
<p>I am looking to write a text directly to my FTP site from python without storing a temp file
on disk,
something like:</p>
<pre><code>ftp = FTP('ftp.mysite.com')
ftp.login('un','pw')
ftp.cwd('/')
ftp.storbinary('STOR myfile.html', 'text to store', 'rb')
</code></pre>
<p>is this even possible?
Thank you very much.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/3/library/ftplib.html#ftplib.FTP.storbinary" rel="nofollow noreferrer">the docs</a> say:</p>
<blockquote>
<p>Store a file in binary transfer mode. <em>cmd</em> should be an appropriate <code>STOR</code> command: <code>"STOR filename"</code>. <em>file</em> is a file object (opened in binary mode) which is read until EOF using its <code>read()</code> method in blocks of size <em>blocksize</em> to provide the data to be stored…</p>
</blockquote>
<p>So, you need to give it a file-like object with an appropriate <code>read</code> method.</p>
<p>A string is not a file-like object, but an <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer"><code>io.BytesIO</code></a> is. So:</p>
<pre><code>import io
bio = io.BytesIO(b'text to store')
ftp.storbinary('STOR myfile.html', bio)
</code></pre>
<hr/>
<p>Also, notice that I didn't pass that <code>'rb'</code> argument. The third parameter to <code>storbinary</code> is <em>blocksize</em>, and <code>'rb'</code> is obviously not a valid block size.</p>
<hr/>
<p>If you need to work with Python 2.5 or earlier, see Dan Lenski's answer.</p>
<p>And if you need to work with Python 2.6-2.7, and performance of the file-like object is important (it isn't here, but there are some cases where it might be), and you only care about CPython, use his answer but with <a href="https://docs.python.org/2/library/stringio.html#module-cStringIO" rel="nofollow noreferrer"><code>cStringIO</code></a> in place of <code>StringIO</code>. (Plain <code>StringIO</code> is slow in 2.x, and <code>io.BytesIO</code> is even slower before around 3.3.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using a <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer"><code>StringIO</code> object</a>, which quacks like a file but is just a string?</p>
<pre><code>from ftplib import *
import StringIO

ftp = FTP('ftp.mysite.com')
ftp.login('un','pw')
ftp.cwd('/')
ftp.storbinary('STOR myfile.html', StringIO.StringIO('text to store'))
</code></pre>
<p>EDIT: <a href="https://stackoverflow.com/a/25735214/20789">@abarnert's answer</a> is the Python3 equivalent. Mine is the Python2 version.</p>
</div>
<span class="comment-copy">Worked for me but I had to encode the string as BytesIO requiresa bytes-like object. So: <code>bio = io.BytesIO('text to store'.encode('utf-8'))</code></span>
<span class="comment-copy">@iomihai Well, in this case, you could just use a bytes literal, instead of using a str literal and encoding it. But yeah, I'll edit the answer.</span>
<span class="comment-copy"><code>io</code> works just as well in 2.6 and 2.7 as it does in 3.x. So there's no reason to use the old version unless you need 2.5 compatibility.</span>
<span class="comment-copy">Good point! (<code>#its_still_2007_where_I_am</code>)</span>
<span class="comment-copy">Well, I held onto 1.5 compatibility until 2.4 added some feature I just couldn't live without, so I can understand that…</span>
<span class="comment-copy"><a href="https://docs.python.org/dev/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a> has been tempting me to bite the Unicode bullet and go to 3.x for a while now.</span>
<span class="comment-copy">Not that I ever want to take away anyone's motivation to upgrade, but… <code>lru_cache</code> is pure-Python, it almost works out-of-the-box with 2.6+, and there's a backport to 2.4+. But <code>yield from</code>, <code>pip</code> bootstrap, built-in <code>venv</code>, <code>tracemalloc</code>, <code>asyncio</code>, <code>selectors</code>, bug fixes and optimizations that will never be backported, saner and more detailed exception hierarchy, chained exceptions, <code>importlib</code>, C functions with actual argspecs, improved <code>inspect</code>, <code>concurrent.futures</code>, … Plus, once you bite the bullet, proper Unicode is a plus, not a stumbling block.</span>
