<div class="post-text" itemprop="text">
<p>If I try to do the following:</p>
<pre><code>things = 5
print("You have " + things + " things.")
</code></pre>
<p>I get the following error in Python 3.x:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be str, not int
</code></pre>
<p>... and a similar error in Python 2.x:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'int' objects
</code></pre>
<p>How can I get around this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that the <code>+</code> operator has (at least) two different meanings in Python: for numeric types, it means "add the numbers together":</p>
<pre><code>&gt;&gt;&gt; 1 + 2
3
&gt;&gt;&gt; 3.4 + 5.6
9.0
</code></pre>
<p>... and for sequence types, it means "concatenate the sequences":</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; 'abc' + 'def'
'abcdef'
</code></pre>
<p>As a rule, Python doesn't implicitly convert objects from one type to another<sup>1</sup> in order to make operations "make sense", because that would be confusing: for instance, you might think that <code>'3' + 5</code> should mean <code>'35'</code>, but someone else might think it should mean <code>8</code> or even <code>'8'</code>.</p>
<p>Similarly, Python won't let you concatenate two different types of sequence:</p>
<pre><code>&gt;&gt;&gt; [7, 8, 9] + 'ghi'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate list (not "str") to list
</code></pre>
<p>Because of this, you need to do the conversion explicitly, whether what you want is concatenation or addition:</p>
<pre><code>&gt;&gt;&gt; 'Total: ' + str(123)
'Total: 123'
&gt;&gt;&gt; int('456') + 789
1245
</code></pre>
<p>However, <strong>there is a better way</strong>. Depending on which version of Python you use, there are three different kinds of string formatting available<sup>2</sup>, which not only allow you to avoid multiple <code>+</code> operations:</p>
<pre><code>&gt;&gt;&gt; things = 5
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; 'You have %d things.' % things  # % interpolation
'You have 5 things.'
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; 'You have {} things.'.format(things)  # str.format()
'You have 5 things.'
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; f'You have {things} things.'  # f-string (since Python 3.6)
'You have 5 things.'
</code></pre>
<p>... but also allow you to control how values are displayed:</p>
<pre><code>&gt;&gt;&gt; value = 5
&gt;&gt;&gt; sq_root = value ** 0.5
&gt;&gt;&gt; sq_root
2.23606797749979
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; 'The square root of %d is %.2f (roughly).' % (value, sq_root)
'The square root of 5 is 2.24 (roughly).'
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; 'The square root of {v} is {sr:.2f} (roughly).'.format(v=value, sr=sq_root)
'The square root of 5 is 2.24 (roughly).'
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; f'The square root of {value} is {sq_root:.2f} (roughly).'
'The square root of 5 is 2.24 (roughly).'
</code></pre>
<p>Whether you use <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="noreferrer">% interpolation</a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a>, or <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">f-strings</a> is up to you: % interpolation has been around the longest (and is familiar to people with a background in C), <code>str.format()</code> is often more powerful, and f-strings are more powerful still (but available only in Python 3.6 and later).</p>
<p>Another alternative is to use the fact that if you give <code>print</code> multiple positional arguments, it will join their string representations together using the <code>sep</code> keyword argument (which defaults to <code>' '</code>):</p>
<pre><code>&gt;&gt;&gt; things = 5
&gt;&gt;&gt; print('you have', things, 'things.')
you have 5 things.
&gt;&gt;&gt; print('you have', things, 'things.', sep=' ... ')
you have ... 5 ... things.
</code></pre>
<p>... but that's usually not as flexible as using Python's built-in string formatting abilities.</p>
<hr/>
<p><sup>1</sup> Although it makes an exception for numeric types, where most people would agree on the 'right' thing to do:</p>
<pre><code>&gt;&gt;&gt; 1 + 2.3
3.3
&gt;&gt;&gt; 4.5 + (5.6+7j)
(10.1+7j)
</code></pre>
<p><sup>2</sup> Actually four ... but <a href="https://docs.python.org/3/library/string.html#template-strings" rel="noreferrer">template strings</a> are rarely used and somewhat awkward.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong><br/></p>
<ol>
<li><p>either: <code>print("You have " + str(things) + " things.")</code> (the old
school way)</p></li>
<li><p>or: <code>print("You have {} things.".format(things))</code> (the new pythonic
and recommended way)</p></li>
</ol>
<hr/>
<p><strong>A bit more verbal explanation:</strong><br/>
Although there is anything not covered from the excellent @Zero Piraeus answer above, <em>I will try to "minify" it a bit</em>:<br/> 
You cannot concatenate a string and a number (of any kind) in python because those objects have different definitions of the plus(+) operator which are not compatible with each other (In the str case + is used for concatenation, in the number case it is used to add two numbers together).
So in order to solve this "misunderstanding" between objects:</p>
<ol>
<li>The old school way is to cast the number to string with the
<code>str(anything)</code> method and then concatenate the result with another
string.</li>
<li>The more pythonic and recommended way is to use the <a href="https://docs.python.org/3.6/library/string.html#string.Formatter.format" rel="nofollow noreferrer">format</a> method which is very versatile (you don't have to take my word on it, read the documentation and <a href="https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3" rel="nofollow noreferrer">this</a> article)</li>
</ol>
<p>Have fun and <strong>do</strong> read the @Zero Piraeus answer it surely worth your time!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 2.x</strong></p>
<ol>
<li><code>'You have %d things.' % things</code> [<a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">1</a>]</li>
<li><code>'You have {} things.'.format(things)</code> [<a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer">2</a>]</li>
</ol>
<p><strong>Python 3.6+</strong></p>
<ol>
<li><code>'You have %d things.' % things</code> [<a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">1</a>]</li>
<li><code>'You have {} things.'.format(things)</code> [<a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer">2</a>]</li>
<li><code>f'You have {things} things.'</code> [<a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">3</a>]</li>
</ol>
<hr/>
<p>Reference</p>
<ol>
<li><a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">printf-style String Formatting</a></li>
<li><a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer">Built-in types -&gt; str.format</a></li>
<li><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">Formatted string literals</a></li>
</ol>
</div>
<span class="comment-copy">This answer is great in that it provides both background info and multiple solutions, but the actual solutions are buried in the middle of a wall of text. It would benefit from a TLDR at the beginning (as a form of <a href="https://en.wikipedia.org/wiki/Progressive_disclosure" rel="nofollow noreferrer">progressive disclosure</a>).</span>
<span class="comment-copy">@Helen this canonical Q/A is consciously written as a bait &amp; switch â€“ the question has a "gimme teh codez" style, while the answer makes a point of <i>not</i> immediately providing a "gimme teh codez" solution. I disagree that the inverted pyramid / progressive disclosure approach is a good one for beginner-level instruction; it improves the apparent productivity of bad programmers (who will indeed "dr" the "tl" remainder) at the expense of those who will later maintain their code. I'd rather help potentially great programmers than definitively awful ones, and try to contribute accordingly to SO.</span>
<span class="comment-copy">Great answer. I learn something new today.</span>
<span class="comment-copy">This answer adds nothing new.</span>
<span class="comment-copy">On the bright side, if you delete your answer now you'll get a badge for it (don't recall the name, but it's for deleting an answer with at least 3 upvotes).</span>
<span class="comment-copy">@EthanFurman I think you are looking for this :) <a href="http://stackoverflow.com/help/badges/37/disciplined">stackoverflow.com/help/badges/37/disciplined</a></span>
<span class="comment-copy">@Ethan Furman There is nothing that can really be added to that answer, I just tried to minify it a bit and please the demand for a TL;DR from Helen! The canonical is the Zero Piraeus answer by far!</span>
<span class="comment-copy">This adds nothing whatsoever to the existing answer.</span>
<span class="comment-copy">@ZeroPiraeus: No it does. Ever heard of 'readability'?</span>
<span class="comment-copy">And just because someone answered a question before me, it doesn't mean that I can approach it, with my own take (the way I think best describes the answer). If you think that's wrong, I think that'a not more wrong than downvoting someone's answer because you also have an answer for the same question.</span>
