<div class="post-text" itemprop="text">
<pre><code>exchangerates = []
newrate = float(input("Enter amount:"))
with open("ExchangeRates.txt","r") as readfile:
    for line in readfile:
        exchangerates.append(line.strip().split(","))
        for line in exchangerates:
            if line[0] == currency1 and line[1] == currency2:
                line[2] = newrate
                print("The exchange rate for",currency1,"and",currency2,"has been changed to",newrate)
        next
        return 0
</code></pre>
<p>This code works, but I need to know how to pass the information from the list created above, into the file, shown as "Exchangerates.txt". How would I do this?</p>
<p>sample input and output:</p>
<p>Enter currency 1:Yen</p>
<p>Enter currency 2:Dollar</p>
<p>Enter amount:3</p>
<p>The exchange rate for Yen and Dollar has been changed to 3.0</p>
<p>This is what happens in my code, which is expected. However it does not write to the file and the information is not changed within the file, this is my problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with simplier approach:</p>
<pre><code>f = open("ExchangeRates.txt","r")
exchangerates = f.read()
f.close()


lines = exchangerates.split("\n")

# do the stuff you want to the list with the loops in list of lines

exchangerates = "\n".join(lines)

f = open("ExchangeRates.txt","w")
f.write(exchangerates)
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A particularly easy way of doing this would be to use <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">Pickle</a>, something like this does what I think you're attempting:</p>
<pre><code>import pickle
try:
    with open("ExchangeRates.txt", "rb") as readfile:
        exchangerates = pickle.load(readfile)
except FileNotFoundError:
    exchangerates = {}

currency1 = input("Enter currency 1: ")
currency2 = input("Enter currency 2: ")
newrate = input("Enter exchange rate: ")

if currency1 in exchangerates:
    if currency2 not in exchangerates[currency1] or exchangerates[currency1][currency2] != newrate:
        exchangerates[currency1][currency2] = newrate
        print("The exchange rate for",currency1,"and",currency2,"has been changed to",newrate)
else:
    exchangerates[currency1] = {currency2: newrate}
    print("The exchange rate for",currency1,"and",currency2,"has been changed to",newrate)

with open("ExchangeRates.txt", "wb") as writefile:
    pickle.dump(exchangerates, writefile)
</code></pre>
<p>Note that this stores the exchange rates as a dictionary like: <code>{'USD': {'GBP': 1.6, 'YEN': 3}}</code>. It'd be fairly simple to have it add/check and update the inverse exchange rate too if that was desired.</p>
</div>
<span class="comment-copy">It isn't clear what you expect the output to be; can you provide some sample output?</span>
<span class="comment-copy">@MartijnPieters: Looks like OP is looking to write to the same csv file (from which it is reading) with the new exchange rate, if the current row contains the currency1 and currency2.</span>
<span class="comment-copy">Sounds like your typical <a href="http://stackoverflow.com/search?q=python+replace+csv">CSV replace job</a>, indeed.</span>
<span class="comment-copy">That is exactly what I am trying to do @shahkalpesh</span>
<span class="comment-copy">When I try to use this, there is an error as the data type string doesn't support the buffer interface @Kkelk</span>
<span class="comment-copy">@Tom1998 Ah, sorry, it seems that you need to change <code>'r'</code> and <code>'w'</code> modes to <code>'rb'</code> and <code>'wb'</code> respectively in Python 3.</span>
<span class="comment-copy">Ok thank you @Kkelk</span>
<span class="comment-copy">That still didn't work, instead it just corrupted everything originally in my file @Kkelk</span>
<span class="comment-copy">@Tom1998 Sorry, I hope you didn't lose any important data - it might be an idea to change the file name for testing. Have updated my answer to a more full solution for what I <i>think</i> you're attempting to do. Based on the comments above, though, if your original data file is a csv and you want to update that, this won't do what you're wanting it to - this is really only useful for creating and maintaining a data structure that Python can easily work with.</span>
