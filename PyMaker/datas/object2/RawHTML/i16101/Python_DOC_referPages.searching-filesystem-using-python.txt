<div class="post-text" itemprop="text">
<p>I have been coding in Python since the last 2 weeks and pretty new to it.</p>
<p>I have written a code to kind of emulate the way "find" command works in *NIX systems. My code works okay-ish for not so deep directories but if I start searching from the "root" directory, it takes too much time and processor heats up :D which on the other hand takes about 8 seconds using "find" cmd.</p>
<p>Hey I know I am kinda noob in Python now but any hint at trying to improve the search efficiency will be greatly appreciated. </p>
<p>Here's what I have written:</p>
<pre><code> #!/usr/bin/python3

import os

class srchx:
    file_names = []
    is_prohibit = False

    def show_result(self):
        if(self.is_prohibit):
            print("some directories were denied read-access")
        print("\nsearch returned {0} result(s)".format(len(self.file_names)))
        for _file in self.file_names:
            print(_file)

    def read_dir(self, cur_dir, srch_name, level):
        try:
            listing = os.listdir(cur_dir)
        except:
            self.is_prohibit = True
            return
        dir_list = []
        #print("-"*level+cur_dir)
        for entry in listing:
            if(os.path.isdir(cur_dir+"/"+entry)):
                dir_list.append(entry)
            else:
                if(srch_name == entry):
                    self.file_names.append(cur_dir+"/"+entry)
        for _dir in dir_list:
            new_dir = cur_dir + "/" + _dir
            self.read_dir(new_dir, srch_name, level+1)
        if(level == 0):
            self.show_result()

    def __init__(self, dir_name=os.getcwd()):
        srch_name = ""
        while(len(srch_name) == 0):
            srch_name = input("search for: ")
        self.read_dir(dir_name, srch_name, 0)




def main():
    srch = srchx()

if (__name__ == "__main__"):
    main()
</code></pre>
<p>Take a look at and please help me to solve this issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a built-in Directory-Browsing Framework called os.walk() but even os.walk() is slow, if you want to browse faster, you need access to the operating systems file-browser. </p>
<p><strong><a href="https://pypi.python.org/pypi/scandir" rel="nofollow">https://pypi.python.org/pypi/scandir</a></strong></p>
<p>scandir is a solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>What user1767754 said. You can't really improve the speed much using the methods you're calling. os.walk() is a bit more efficient, though. I've never used scandir (or pypi) so I can't comment.</p>
<p>BTW, that's rather good looking code for a noob, Marty! But there are a couple of issues with it.</p>
<ol>
<li><p>It's not a good idea to initialise <code>file_names</code> and <code>is_prohibit</code> like that because it makes them <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow">class variables</a>; initialise them in <code>__init__</code>. </p></li>
<li><p>You should read <code>srch_name</code> outside the class and pass it your class constructor. You do that by making it an arg of <code>__init__</code>, as described in the link above. </p></li>
</ol>
<p>It's generally good policy to handle user input in the outermost parts of your code (when practical) rather than doing it in the inner parts of your code. I like to think of my user input routines as border guards that only let good input into the inner sanctum of my code. Users are unpredictable critters and there's no telling what mischief they'll get up to. :)</p>
</div>
<span class="comment-copy">I expect scandir to be in 3.5.  os.walk may be modified to use it and run faster.  If you download scandir, you could probably do the substitution yourself.</span>
<span class="comment-copy">@user1767754 scandir does work much better. It took a while for me to understand the code though :) thank u</span>
<span class="comment-copy">There has been a proposal to python for using os.scandir() in the future implementations, as it is really fast.</span>
<span class="comment-copy">@PM 2Ring: your advices were quite valuable. I'll certainly keep them in mind next time around.</span>
