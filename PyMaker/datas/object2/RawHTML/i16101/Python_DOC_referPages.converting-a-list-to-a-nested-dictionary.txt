<div class="post-text" itemprop="text">
<p>What is the most pythonic way to convert:</p>
<pre><code>A = [a1, a2, a3, a4, a5]
</code></pre>
<p>where "A" can be a list with any number of elements to</p>
<pre><code>B = {a1: {a2: {a3: {a4: {a5: y}}}}}
</code></pre>
<p>where y is some variable.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def build_dict(A, y):
    for s in reversed(A):
        y = {s: y}
    return y

A = ['a1', 'a2', 'a3', 'a4', 'a5']
y = 'some value'
print(build_dict(A, y))
</code></pre>
<p>output:</p>
<pre><code>{'a1': {'a2': {'a3': {'a4': {'a5': 'some value'}}}}}
</code></pre>
<hr/>
<p>Alternative using <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow"><code>reduce</code></a> (<a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce</code></a> in Python 3.x):</p>
<pre><code>&gt;&gt;&gt; A = ['a1', 'a2', 'a3', 'a4', 'a5']
&gt;&gt;&gt; y = 'some value'
&gt;&gt;&gt; reduce(lambda x, s: {s: x}, reversed(A), y)
{'a1': {'a2': {'a3': {'a4': {'a5': 'some value'}}}}}
</code></pre>
</div>
<span class="comment-copy"><i>Creating</i> the nested dictionaries or simply <i>traversing</i> the existing indexable object graph?</span>
<span class="comment-copy">creating a nested dictionary</span>
<span class="comment-copy">but what do you mean by 'simply traversing the existing indexable object graph'</span>
<span class="comment-copy">Eg. reading or setting the value in an already existing nested-array/dictionary structure (such as from some deserialized JSON).</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/25326180/python-list-to-nested-keys">Python list to nested keys</a></span>
<span class="comment-copy">nice ,i was using recursion,this looks much better</span>
<span class="comment-copy">@abstract, I added an alternative that use <code>reduce</code>.</span>
