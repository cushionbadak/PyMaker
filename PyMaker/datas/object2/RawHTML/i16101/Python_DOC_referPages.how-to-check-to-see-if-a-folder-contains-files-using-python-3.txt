<div class="post-text" itemprop="text">
<p>I've searched everywhere for this answer but can't find it.</p>
<p>I'm trying to come up with a script that will search for a particular subfolder then check if it contains any files and, if so, write out the path of the folder. I've gotten the subfolder search part figured out, but the checking for files is stumping me.</p>
<p>I have found multiple suggestions for how to check if a folder is empty, and I've tried to modify the scripts to check if the folder is not empty, but I'm not getting the right results.</p>
<p>Here is the script that has come the closest:</p>
<pre><code>for dirpath, dirnames, files in os.walk('.'):
if os.listdir(dirpath)==[]:
    print(dirpath)
</code></pre>
<p>This will list all subfolders that are empty, but if I try to change it to:</p>
<pre><code>if os.listdir(dirpath)!=[]:
    print(dirpath)
</code></pre>
<p>it will list everything--not just those subfolders containing files.</p>
<p>I would really appreciate it if someone could point me in the right direction.</p>
<p>This is for Python 3.4, if that matters.</p>
<p>Thanks for any help you can give me.</p>
</div>
<div class="post-text" itemprop="text">
<p>'files' already tells you whats in the directory. Just check it:</p>
<pre><code>for dirpath, dirnames, files in os.walk('.'):
    if files:
        print(dirpath, 'has files')
    if not files:
        print(dirpath, 'is empty')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make use of the new <code>pathlib</code> library introduced in Python 3.4 to extract all non-empty subdirectories recursively, eg:</p>
<pre><code>import pathlib

root = pathlib.Path('some/path/here')
non_empty_dirs = {str(p.parent) for p in root.rglob('*') if p.is_file()}
</code></pre>
<p>Since you have to walk the tree anyway, we build a set of the parent directories where a file is present which results in a set of directories that contain files - then do as you wish with the result.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>entities = os.listdir(dirpath)
for entity in entities:
    if os.path.isfile(entity):
        print(dirpath)
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can delete the directory, you can use this:</p>
<pre><code>try:
    os.rmdir( submodule_absolute_path )
    is_empty = True

except OSError:
    is_empty = False

if is_empty:
    pass
</code></pre>
<p>The <a href="https://docs.python.org/3/library/os.html#os.rmdir" rel="nofollow noreferrer">os.rmdir</a> only removes a directory if it is empty, otherwise it throws the OSError exception.</p>
<p>You can find a discussion about this on:</p>
<ol>
<li><a href="https://bytes.com/topic/python/answers/157394-how-determine-if-folder-empty" rel="nofollow noreferrer">https://bytes.com/topic/python/answers/157394-how-determine-if-folder-empty</a></li>
</ol>
<p>For example, deleting an empty directory is fine when you are planing to do a git clone, but not if you are checking beforehand whether the directory is empty, so your program does not throw an empty directory error.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to @Jon Clements’ pathlib answer, I wanted to check if the folder is empty with pathlib but without creating a set:</p>
<pre><code>from pathlib import Path

is_empty = False if sorted(Path('some/path/here').rglob('*')) else True
</code></pre>
<p>sorted(Path(path_here).rglob('*')) return a list of sorted PosixPah items. If there is no items, it returns an empty list, which is False. So is_empty will be True if the path is empty and false if the path have something</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use this simple code:</p>
<pre><code>dir_contents = [x for x in os.listdir('.') if not x.startswith('.')]
if len(dir_contents) &gt; 0:
    print("Directory contains files")
</code></pre>
<p>It checks for files <strong>and directories</strong> in the current working directory (<code>.</code>). You can change <code>.</code> in <code>os.listdir()</code> to check any other directory.</p>
</div>
<span class="comment-copy">By "empty" do you mean "doesn't contain anything (except <code>.</code> and <code>..</code>)", or "doesn't contain anything but subdirectories", or "doesn't contain any regular files", or "doesn't contain any non-hidden regular files", or something different?</span>
<span class="comment-copy">Meanwhile, why are you using <code>os.walk</code> and then also using <code>os.listdir</code> on each <code>dirpath</code>? You already have the <code>dirnames</code> and <code>files</code>; why call a function to get the same information you already have?</span>
<span class="comment-copy">Finally, you almost never want to check <code>!= []</code> or <code>== []</code>. Just use the fact that empty sequences are falsey, while non-empty sequences are truthy: <code>if not os.listdir(dirpath):</code> would do what you want.</span>
<span class="comment-copy">By empty, I mean no regular files. My problem is that I can't search by extension because many different file types (.txt, .csv, .xls, etc.) are being used, I don't know what all types of files are stored in these subdirectories, and I don't want to miss anything that is a regular file.</span>
<span class="comment-copy">I'm not sure you know what "regular files" means. It has nothing to do with extension; a regular file is a file that's not a directory, block device, FIFO, etc. You tell that from the <code>stat</code> (or just by calling <code>os.path.isfile</code>). If that's actually what you want, just using <code>files</code> from the <code>walk</code> isn't sufficient—that excludes directories, but doesn't exclude anything else.</span>
<span class="comment-copy">I would like it to only print those paths that have files. I want to ignore those paths that have no files. If this can be tweaked to only print those paths that have files, then it would be exactly what I need.</span>
<span class="comment-copy">Duh--I just figured out to remove the "if not" line from the code and got exactly what I needed. Thank everyone so much for all of your help from this newbie to Python. :)</span>
<span class="comment-copy">LOL - it showed both because you had <code>==</code> and <code>!=</code> examples in your code. I could have been more clear.</span>
<span class="comment-copy">@RituKochhar - that edit is not correct. It rechecks the directory for each file in the directory and so for instance if <i>somedir</i> has 100 files, <i>somedir</i> would be printed 100 times. Do you have sample code that isn't working? You could post that as a new question and link to it here.</span>
<span class="comment-copy">for those who struggle: <code>dir=r'C:\Users\x\Desktop\folder name'</code> then <code>for dirpath, dirnames, files in os.walk(dir):</code> and the rest of the code</span>
