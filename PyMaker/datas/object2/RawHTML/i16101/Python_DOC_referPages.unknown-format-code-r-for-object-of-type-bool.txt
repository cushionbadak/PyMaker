<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>In [3]: print "%r"%(1==2)
False
</code></pre>
<p>This sort of works:</p>
<pre><code>In [2]: formatted_str = "{0:1.2f}".format(1==2)

In [3]: formatted_str
Out[3]: '0.00'
</code></pre>
<p>However:</p>
<pre><code>In [5]: formatted_str = "{0:r}".format(1==2)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-5-b136410cc311&gt; in &lt;module&gt;()
----&gt; 1 formatted_str = "{0:r}".format(1==2)

ValueError: Unknown format code 'r' for object of type 'bool'
</code></pre>
<p>How do you make <code>.format()</code> to print "True" or "False" for bool?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, first:</p>
<blockquote>
<p>How do you make .format() to print "True" or "False" for bool?</p>
</blockquote>
<p>Just don't specify anything. The default formatting for bool values already gives you <code>'True'</code> or <code>'False'</code>. And the same is true for <code>%</code>-formatting:</p>
<pre><code>&gt;&gt;&gt; '{0}'.format(False)
'False'
&gt;&gt;&gt; '%s' % (False,)
'False'
</code></pre>
<p>The <code>__format__</code>, <code>__str__</code>, and <code>__repr__</code> for <code>bool</code> all return the same thing—in 2.x, the <code>__unicode__</code> returns a Unicode version of the same thing too, of course. Which also means:</p>
<pre><code>&gt;&gt;&gt; format(False), format(False, ''), repr(False), str(False), unicode(False)
('False', 'False', 'False', 'False', u'False')
</code></pre>
<hr/>
<p>But more generally, if you <em>did</em> need the <code>%r</code>, how would you do that with <code>format</code>?</p>
<p>Well, there is no such <em>format spec code</em> (the thing that comes after the <code>:</code>) as <code>r</code>, but there's a <em>conversion modifier flag</em> <code>r</code> (the thing that after the <code>!</code> separator, and before the <code>:</code>, if present). So:</p>
<pre><code>'{0!r}'.format(1==2)
</code></pre>
<p>The docs for <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">Format String Syntax</a> explain in more detail:</p>
<blockquote>
<p>The conversion field causes a type coercion before formatting. Normally, the job of formatting a value is done by the <code>__format__()</code> method of the value itself. However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting. By converting the value to a string before calling <code>__format__()</code>, the normal formatting logic is bypassed.</p>
<p>Three conversion flags are currently supported: <code>'!s'</code> which calls <code>str()</code> on the value, <code>'!r'</code> which calls <code>repr()</code> and <code>'!a'</code> which calls <code>ascii()</code>.</p>
</blockquote>
<p>Note that this also means that the basic <code>'{0}'.format(1==2)</code> is not actually doing the same thing as <code>'%s' % (1=2,)</code>, because it's calling <code>__format__</code> rather than <code>__str__</code>.</p>
<p>More generally, while many of the format spec codes match format conversion type codes for <code>%</code>-formatting, it's not an exact match. Besides splitting the idea of "conversion type" into two separate things, there are also codes that do subtly or radically different things—most obviously, <code>'%%'</code> means "This isn't a format code, it's a literal <code>%</code>", while <code>':%'</code> means "Print this as a percentage". When it isn't obvious, the docs are always clear.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like this (python2.7+):</p>
<pre><code>&gt;&gt;&gt; '{!r}'.format(1 == 2)
'False'
</code></pre>
<p>Or, if you want to specify the position (or are forced to be compatible with python2.6):</p>
<pre><code>&gt;&gt;&gt; '{1!r} is not {0!r}'.format(1==2, 1==1)
'True is not False'
</code></pre>
<p>You can even use keywords as normal:</p>
<pre><code>&gt;&gt;&gt; '{foo!r} is not {0!r}'.format(1==2, foo=1==1)
'True is not False'
</code></pre>
</div>
<span class="comment-copy">This is a very good answer.  I like how you highlighted the conversion modifier flag and explained that <code>!</code> is a <i>separator</i>.  I feel like you've formalized my understanding of the format mini language better than I could have before I read this answer.  +1 from me.</span>
<span class="comment-copy">@mgilson: Have I got the right terms for all these pieces? I have no problem remembering how to use them, but remembering what to call them is another story…</span>
<span class="comment-copy">No idea :) -- they might not even have names (before now).  I use the "conversion modifier flag" so infrequently that I need to look it up every time I want it...</span>
<span class="comment-copy">@mgilson: I do forget about <code>!s</code>, because how often do you run into something whose <code>__format__('')</code> returns something different and it's not what you want? But I use <code>!r</code> all the time with exceptions, and used to use <code>!a</code> for some reason (maybe printing the offending string in <code>UnicodeError</code> exceptions before 3.3? I forget…).</span>
<span class="comment-copy">Had forgotten that <code>u'Something'</code> meant unicode. Also <code>'{0!a}'.format(1==2)</code> returns a <code>ValueError</code> in <code>2.7</code>, 'False' in <code>3.4.1</code>.</span>
