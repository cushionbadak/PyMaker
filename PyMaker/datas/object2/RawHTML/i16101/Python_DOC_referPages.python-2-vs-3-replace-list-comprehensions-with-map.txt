<div class="post-text" itemprop="text">
<p>Given the following test:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("[x + 'abc' for x in ['x', 'y', 'z']]")
&gt;&gt;&gt; timeit.timeit("map(lambda x: x + 'abc', ['x', 'y', 'z'])")
</code></pre>
<p>With Python 2.7 and 3.4 (Debian 8/testing/jessie) I get the following numbers:</p>
<pre><code>Python27 Python34
1.3s     0.5s      map()
0.6s     0.9s      list comprehension
</code></pre>
<p>Map improved significantly with Python 3, the list comprehension suffered badly.</p>
<p>Question: When porting code from Python 2 to Python 3, is it recommended to change list comprehensions to map()?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not testing correctly. In Python 3, <code>map()</code> returns an iterator, not a list. You are not actually iterating in your test, only testing the creation of the iterator.</p>
<p>You'll need to include <em>iteration</em> to see which approach is faster; you could use <code>collections.deque()</code> with a length of 0, this will iterate without producing a new list object:</p>
<pre><code>import timeit
timeit.timeit("deque([x + 'abc' for x in ['x', 'y', 'z']], maxlen=0)",
              'from collections import deque')
timeit.timeit("deque(map(lambda x: x + 'abc', ['x', 'y', 'z']), maxlen=0)",
              'from collections import deque')
</code></pre>
<p>By applying the <code>deque()</code> to both you even out the score again.</p>
<p>Now list comprehensions win on both platforms:</p>
<pre><code>Python27 Python34
1.91s     2.00s      map()
1.18s     1.85s      list comprehension
</code></pre>
<p>You should really use far larger input lists to properly test the differences; too much o</p>
<p>The reason list comprehensions slowed down on Python 3 is because they got their own proper scope, just like generator expressions and dict and set comprehensions do on both Python 2 and 3.</p>
<p>If your map function is entirely implemented in C (as opposed to a lambda, which pushes back to Python, <code>map()</code> <em>could</em> win:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit("deque([m(i) for i in ['x', 'y', 'z']], maxlen=0)",
...               "from collections import deque; from operator import methodcaller; m = methodcaller('__add__', 'abc')")
2.3514049489967874
&gt;&gt;&gt; timeit.timeit("deque(map(methodcaller('__add__', 'abc'), ['x', 'y', 'z']), maxlen=0)",
...               'from collections import deque; from operator import methodcaller')
1.7684289459939464
</code></pre>
<p>Here the <a href="https://docs.python.org/3/library/operator.html#operator.methodcaller"><code>methodcaller()</code> object</a> avoids calling back into Python code by calling the <code>str.__add__</code> method for each object used.</p>
</div>
<span class="comment-copy"><code>map</code> in 3.x doesn't build a list - so the timing here is apples and pears</span>
<span class="comment-copy">@MartijnPieters the OP here never appears to materialise their <code>map</code> in 3.x...</span>
<span class="comment-copy">another thing that will change your 'timeit' is using lambdas versus using a name function</span>
<span class="comment-copy">Thanks for the explication, very insightful!</span>
