<div class="post-text" itemprop="text">
<p>I've already seen <a href="https://stackoverflow.com/q/1912434/3127111">this question</a>, but it's from the 2009.<br/>
What's a simple modern way to handle XML files in Python 3?</p>
<p>I.e., from this TLD (adapted from <a href="http://docs.oracle.com/javaee/1.4/tutorial/doc/JSPTags6.html#wp90267" rel="nofollow noreferrer">here</a>):</p>
<pre class="lang-xml prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;taglib&gt;
  &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;
  &lt;short-name&gt;bar-baz&lt;/short-name&gt;

  &lt;tag&gt;
  &lt;name&gt;present&lt;/name&gt;
     &lt;tag-class&gt;condpkg.IfSimpleTag&lt;/tag-class&gt;
  &lt;body-content&gt;scriptless&lt;/body-content&gt;

  &lt;attribute&gt;
    &lt;name&gt;test&lt;/name&gt;
    &lt;required&gt;true&lt;/required&gt;
    &lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt;
  &lt;/attribute&gt;

  &lt;/tag&gt; 

&lt;/taglib&gt;
</code></pre>
<p>I want to parse TLD files (Java Server Pages Tag Library Descriptors), to obtain some sort of structure in Python (I have still to decide about that part).  </p>
<p>Hence, I need a push parser. But I won't do much more with it, so I'd rather prefer a simple API (I'm new to Python).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow"><code>xml.etree.ElementTree</code></a> is still there, in the standard library:</p>
<pre><code>import xml.etree.ElementTree as ET

data = """your xml here"""

tree = ET.fromstring(data)
print(tree.find('tag/name').text)  # prints "present"
</code></pre>
<hr/>
<p>If you look outside of the standard library, there is a very popular and fast <a href="http://lxml.de/" rel="nofollow"><code>lxml</code></a> module that follows the <code>ElementTree</code> interface and supports Python3:</p>
<pre><code>from lxml import etree as ET

data = """your xml here"""

tree = ET.fromstring(data)
print(tree.find('tag/name').text)  # prints "present"
</code></pre>
<p>Besides, there is <a href="http://lxml.de/objectify.html" rel="nofollow"><code>lxml.objectify</code></a> that allows you to deal with XML structure like with a Python object.</p>
</div>
<span class="comment-copy">What is your desired output? What data do you need to get from the XML?</span>
<span class="comment-copy">@alecxe I'm thinking about providing informations for an autocomplete feature of an editor, but I have yet to analyze the problem and understand that editor features; anyway I think that my effort should be data structure independent, so that, if one day I need to provide the parsed info to another piece of software, I'll just change the holding data structure, but not the parsing logic. But, as I said, everything is still at the beginning, so any suggestion is welcome.</span>
<span class="comment-copy">I was thinking more to something like providing the XML file, a callback and the parser would invoke the callback providing each node context.</span>
<span class="comment-copy">@watery hm, then I think you would find <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse" rel="nofollow noreferrer"><code>iterparse()</code></a> helpful. Take a look at the relevant threads: <a href="http://stackoverflow.com/questions/9856163/using-lxml-and-iterparse-to-parse-a-big-1gb-xml-file" title="using lxml and iterparse to parse a big 1gb xml file">stackoverflow.com/questions/9856163/…</a>, <a href="http://stackoverflow.com/questions/12792998/elementtree-iterparse-strategy" title="elementtree iterparse strategy">stackoverflow.com/questions/12792998/…</a>. Hope that helps.</span>
<span class="comment-copy">I moved away from that project pretty soon, I hadn't had a chance to give this a try.</span>
