<div class="post-text" itemprop="text">
<p>If I shuffle a small list using <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer">python's <code>random.shuffle</code></a>, I'm getting also unshuffled results. </p>
<pre><code>import random

for i in range(10):
    ori = [1, 2, 3]
    per = ori[:]
    random.shuffle(per)
    print i, per, (per == ori) or ""
</code></pre>
<p>Here is a sample output:</p>
<pre><code>0 [1, 3, 2] 
1 [1, 2, 3] True
2 [3, 1, 2] 
3 [2, 3, 1] 
4 [1, 2, 3] True
5 [2, 3, 1] 
6 [3, 2, 1] 
7 [2, 1, 3] 
8 [2, 1, 3] 
9 [2, 1, 3] 
</code></pre>
<p>I understand that this must necessarily be the case, after looking into the algorithm details <a href="https://stackoverflow.com/a/3062966/2932052">[1]</a>, <a href="https://stackoverflow.com/a/18628010/2932052">[2]</a>. But I really want get a small unsorted list (say 3 to 6 items) programmatically.</p>
<p>What do you think is the best approach to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well one way would be generate permutations of the list and then drop the first item. After that you can use <code>random.choice</code> to pick any of the permutation:</p>
<pre><code>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; data = list(permutations([1, 2, 3], 3))[1:]
&gt;&gt;&gt; for _ in range(10):
...     print choice(data)
...     
(3, 2, 1)
(3, 2, 1)
(2, 1, 3)
(1, 3, 2)
(1, 3, 2)
(1, 3, 2)
(3, 2, 1)
(2, 3, 1)
(2, 3, 1)
(2, 1, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you must exclude the original ordering, you could simply retry the shuffle until <code>per != ori</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since it's a short array do a quick shuffle manually:</p>
<pre><code>import random

for i in range(len(ori) - 1):
    j = random.randint(i + 1, len(ori) - 1)
    ori[i], ori[j] = ori[j], ori[i]
</code></pre>
<p>This way you will ensure that you won't get the original array. This is an <code>O(n)</code> solution, you should only use it on small arrays.</p>
</div>
<span class="comment-copy">Ok "reimplementing" <code>random.shuffle</code> seems to make sense in my case.</span>
<span class="comment-copy">I accept your answer, because it's more pragmatic. NPE rephrased my question, which is often a good idea, also in this case, and the discussion helped a lot for understanding. So I don't apply either of them this time, I'm still reflecting <i>my actual goals</i>. Anyway, I find this answer matches my original question best - as I understand it now ;)</span>
<span class="comment-copy">I thought so, this makes for cases of [1, 2] always [2, 1] ;) - Is this the only way? I would not ask if there were not a large amount of examples with only 4 items around... ...and if a functions has the name <i>shuffle</i> what would you expect it to do?</span>
<span class="comment-copy">Since you're asking, what the function does is perfectly in line with what <i>I</i> would expect it to do.</span>
<span class="comment-copy">Yes, the mathematical POV doesn't match the pragmatic one.</span>
<span class="comment-copy">I guess that depends on the exact use case. For example, if I take 2, 3 and 4 of hearts and shuffle them by hand, it would not surprise me if they would occasionally come out in the original order. <code>random.shuffle()</code> is basically the same deal (pardon the pun).</span>
<span class="comment-copy">@Wolf: I think it matches the pragmatic one too.  If I handed you 3 cards and asked you to shuffle them, I would expect that the original order had an equal chance to be the result as any other ordering.</span>
<span class="comment-copy">Did you try this? There's no [1, 3, 2].</span>
<span class="comment-copy">Sure, try it yourself here: <a href="http://ideone.com/C8ZC4j" rel="nofollow noreferrer">ideone.com/C8ZC4j</a></span>
<span class="comment-copy">Sorry I thought you only wanted to shuffle the array and make sure you don't get the original array. If you want to get all the possible permutations of the array you should go with <a href="http://stackoverflow.com/a/25709572/99557">Ashwini Chaudhary's answer</a></span>
