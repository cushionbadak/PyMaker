<div class="post-text" itemprop="text">
<p>I have two dictionaries, A and B, and I want to take those key:value pairs that exist in B but not A, and add them to A. I don't want the values of B with matching keys to be added to or overwritten in A.</p>
<pre><code>A = {'one':1, 'two':2}
B = {'one':1, 'two':999, 'three':3}
</code></pre>
<p>I want the resulting dictionary to look like:</p>
<pre><code>A = {'one':1, 'two':2, 'three':3}
</code></pre>
<p>I imagine the answer is something like this, but I can't get the value part right.</p>
<pre><code>A.update(dict.fromkeys(set(B).difference(A), B.values()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>dict.setdefault()</code></a>:</p>
<pre><code>A = {'one':1, 'two':2}
B = {'one':1, 'two':999, 'three':3}

for k,v in B.items():
    A.setdefault(k, v)

print(A)
</code></pre>
<pre>
{'two': 2, 'one': 1, 'three': 3}
</pre>
</div>
<div class="post-text" itemprop="text">
<p>It can be done like this:</p>
<pre><code>for key in B:
    if key not in A:
        A[key] = B[key]
</code></pre>
<p>Before you say it's not in one line, I'd say it's quite readable and does what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe a union?</p>
<pre><code>&gt;&gt;&gt; A = {'one':1, 'two':2}
&gt;&gt;&gt; B = {'one':1, 'two':999, 'three':3}
&gt;&gt;&gt; dict(B.items() + A.items())
{'one': 1, 'three': 3, 'two': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are on the right track.</p>
<p>Use {}.update() and set of the keys. With a dict comprehension:</p>
<pre><code>&gt;&gt;&gt; A = {'one':1, 'two':2}
&gt;&gt;&gt; B = {'one':1, 'two':999, 'three':3}
&gt;&gt;&gt; A.update({key:B[key] for key in set(B)-set(A)})
&gt;&gt;&gt; A
{'three': 3, 'two': 2, 'one': 1}
</code></pre>
<p>Or with <code>dict</code> and a generator expression:</p>
<pre><code>&gt;&gt;&gt; A.update(dict((key,B[key]) for key in set(B)-set(A)))
</code></pre>
</div>
<span class="comment-copy">Why are you trying to cram this into one line? Take a few and it will become much simpler.</span>
<span class="comment-copy">use the <code>set</code> class. Create a <code>set</code> that contains <code>A.keys()</code> and another one that contains <code>B.keys()</code>. The <code>set</code> should have a difference method</span>
<span class="comment-copy">@user3322273 that's exactly what the OP is already doing</span>
