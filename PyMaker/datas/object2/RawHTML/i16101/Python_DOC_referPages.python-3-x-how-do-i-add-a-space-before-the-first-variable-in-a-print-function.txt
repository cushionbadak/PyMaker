<div class="post-text" itemprop="text">
<p>I am making a Tic Tac Toe program in Python 3.4.1.
I have code as follows:</p>
<pre><code>def boardDraw():
    board = 0,0,0,\
            0,0,0,\
            0,0,0
    print(board[0] , "|" , board[1] , "|" , board[2], \
    "\n----------\n" , \
    board[3] , "|" , board[4] , "|" , board[5], \
    "\n----------\n" , \
    board[6] , "|" , board[7] , "|" , board[8])

boardDraw()
</code></pre>
<p>Output:</p>
<pre><code>0 | 0 | 0 
----------
 0 | 0 | 0 
----------
 0 | 0 | 0
</code></pre>
<p>Desired output:</p>
<pre><code> 0 | 0 | 0 
----------
 0 | 0 | 0 
----------
 0 | 0 | 0
</code></pre>
<p>Is the only way to have my desired output is inserting the following:</p>
<p><strong>print(end = " ")</strong></p>
<p>In between board and my current print statement? I would like to have it within one print, if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use <code>.format</code>?</p>
<pre><code>print ('{0:^3}|{1:^3}|{2:^3}'.format(*board))
</code></pre>
<p>Here the specifier:  <code>^3</code> means to make a field of width 3 and center the text if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is the quick and dirty method that user2864740 provided that will solve the problem. It was my first thought when I saw the code as it was:</p>
<pre><code>print(board[0] , "|" , board[1] , "|" , board[2], \
</code></pre>
<p>to:</p>
<pre><code>print("", board[0] , "|" , board[1] , "|" , board[2], \
</code></pre>
<p>I really don't recommend this way of formatting it becomes very hard to read. This can be made a bit easier to read and maintain. You can use Python's formatting and then provide the data as parameters using <code>%</code>.</p>
<p>So I'd use something like:</p>
<pre><code>boardsep = "-" * 10
boardline =  "%s | %s | %s\n%s"
print(boardline % (board[0], board[1], board[2], boardsep))
print(boardline % (board[3], board[4], board[5], boardsep))
print(boardline % (board[6], board[7], board[8], boardsep))
</code></pre>
<p>The <code>boardsep</code> is just a convenient way of taking what's in the string and duplicating it a number of times (in this case 10 times). Since the way you print the <code>boardline</code> out is the same for each line I would assign it to a variable so it can be reused. You can read these <a href="https://docs.python.org/3.1/tutorial/inputoutput.html" rel="nofollow" title="print formatting docs">print formatting docs</a> to get a better understanding of how the parameters and format string work together.</p>
<p><strong>mgilson</strong> also proposed a good solution (I upvoted it) and had me look at the OP's question again. It was for Python3 there are things you can do such as the new format method on strings, slicing and expansion. The</p>
<pre><code>boardsep = '-' * 10
boardline = '{0:^3}|{1:^3}|{2:^3}\n{sep}''
print (boardline.format(*board[0:3], sep=boardsep))
print (boardline.format(*board[3:6], sep=boardsep))
print (boardline.format(*board[6:9], sep=boardsep))
</code></pre>
<p>But you can go one further and reduce it to one complex line. If you get a thorough understanding of the basics above one could try this:</p>
<pre><code>print ((('{:^3}|{:^3}|{:^3}\n'+('-'*10)+'\n') * 3).format(*board))
</code></pre>
<p>If you were to print out the expanded format specifier that generates the board it would look like this:</p>
<blockquote>
<p>{:^3}|{:^3}|{:^3}\n----------\n{:^3}|{:^3}|{:^3}\n----------\n{:^3}|{:^3}|{:^3}\n----------\n</p>
</blockquote>
<p>Since the OP did notice the problems in the output I will provide one last edit for code that is a bit more dynamic and could be put into an expanded function to generate the boards.</p>
<pre><code>linesepchar = '-'
colsepchar = '|'
numrows = 3
numcols = 3
fieldwidth = 3
linesep = '\n{linesepchar:{linesepchar}^{linewidth}}\n'
fieldspec = '{:^{fieldwidth}}'
lineformat = (fieldspec+'{colsepchar}')*(numcols-1)+fieldspec
boardstr = (((lineformat+linesep)*(numrows-1)+lineformat).format( \
                  *board,linesepchar=linesepchar, colsepchar=colsepchar, \
                  fieldwidth=fieldwidth, linewidth=((fieldwidth+1)*numcols-1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here if you want is how I did it before to display the tic-tac-toe board:</p>
<pre><code>def __init__(self):
    self.game_list = [
        ['a', 'b', 'c'],
        ['d', 'e', 'f'],
        ['g', 'h', 'i']
    ]

def print_game_board(self):
    for list in self.game_list:
        print(" | ".join(list))
        print("--------")
</code></pre>
</div>
<span class="comment-copy">A few minutes reading up on the <a href="https://docs.python.org/3.3/library/functions.html#format" rel="nofollow noreferrer">format function</a> will help quite a bit</span>
<span class="comment-copy">From <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">the docs</a>: "All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end." Try <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">str.format()</a>.</span>
<span class="comment-copy">Cheating: <code>print("", board[0], ..)</code>. But it would be better (and easier to deal with later) if not relying on this separator auto-insertion.</span>
<span class="comment-copy">Only problem with your ending selection is it causes the first line to have two spaces, and an extra set of '-'. Thanks for your answer, I'll be doing a large amount of looking into for formatting.</span>
<span class="comment-copy">Yes you are quite correct. It does add an extra line. I was going to stop with the editing because it gives a general idea. However since you pointed out the discrepancy I did have some code I wrote earlier that almost produces nearly similar (but not quite) output. In a way I think the difference is a minor code improvement. I'll add that code as my last edit. It also wallows you to specify the rows and columns, field and col specifiers etc.</span>
