<div class="post-text" itemprop="text">
<p>CPython has a strange behaviour where it sets modules to None during shutdown. This screws up error logging during shutdown of some multithreading code I've written.</p>
<p>I can't find any documentation of this behaviour. It's mentioned in passing in <a href="http://www.python.org/dev/peps/pep-0432/" rel="nofollow noreferrer">PEP 432</a>:</p>
<blockquote>
<p>[...] significantly reducing the number of modules that will experience the "module globals set to None" behaviour that is used to deliberate break cycles and attempt to releases more external resources cleanly.</p>
</blockquote>
<p>There are <a href="https://stackoverflow.com/q/17084260/509706">SO questions about this behaviour</a> and the <a href="https://docs.python.org/2/c-api/init.html#Py_Finalize" rel="nofollow noreferrer">C API documentation mentions shutdown behaviour for embedded interpreters</a>.</p>
<p>I've also found a <a href="https://mail.python.org/pipermail/python-dev/2010-July/102175.html" rel="nofollow noreferrer">related thread on python-dev</a> and a <a href="http://bugs.python.org/issue812369" rel="nofollow noreferrer">related CPython bug</a>:</p>
<blockquote>
<p>This patch does not change the behavior of module
  objects clearing their globals dictionary as soon as
  they are deallocated.</p>
</blockquote>
<p>Where is this behaviour documented? Is it Python 2 specific?</p>
</div>
<div class="post-text" itemprop="text">
<p>The behaviour is <em>not</em> well documented, and is present in all versions of Python from about 1.5-ish <em>until <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442">Python 3.4</a></em>:</p>
<blockquote>
<p>As part of this change, module globals are no longer forcibly set to <code>None</code> during interpreter shutdown in most cases, instead relying on the normal operation of the cyclic garbage collector.</p>
</blockquote>
<p>The only documentation for the behaviour is the <a href="http://hg.python.org/cpython/file/241f9aa9fb89/Objects/moduleobject.c#l99"><code>moduleobject.c</code> source code</a>:</p>
<pre class="lang-c prettyprint-override"><code>/* To make the execution order of destructors for global
   objects a bit more predictable, we first zap all objects
   whose name starts with a single underscore, before we clear
   the entire dictionary.  We zap them by replacing them with
   None, rather than deleting them from the dictionary, to
   avoid rehashing the dictionary (to some extent). */
</code></pre>
<p>Note that setting the values to <code>None</code> is an optimisation; the alternative would be to delete names from the mapping, which would lead to different errors (<code>NameError</code> exceptions rather than <code>AttributeError</code>s when trying to use globals from a <code>__del__</code> handler).</p>
<p>As you found out on the mailinglist, the behaviour predates the cyclic garbage collector; it was <a href="http://hg.python.org/cpython/diff/8c01cfee14ba/Objects/moduleobject.c">added in 1998</a>, while the cyclic garbage collector was <a href="http://hg.python.org/cpython/rev/54bffdddc0ef">added in 2000</a>. Since function objects always reference the module <code>__dict__</code> all function objects in a module involve circular references, which is why the <code>__dict__</code> needed clearing before GC came into play.</p>
<p>It was kept in place even when cyclic GC was added, because there might be objects with <code>__del__</code> methods involved in cycles. These <a href="https://docs.python.org/2/library/gc.html#gc.garbage">aren't otherwise garbage-collectable</a>, and cleaning out the module dictionary would at least remove the module <code>__dict__</code> from such cycles. Not doing that would keep <em>all</em> referenced globals of that module alive.</p>
<p>The changes made for <a href="http://www.python.org/dev/peps/pep-0442/">PEP 442</a> now make it possible for the garbage collector to clear cyclic references with objects that provide a <code>__del__</code> finalizer, removing the need to clear the module <code>__dict__</code> <em>for most cases</em>. The code is <a href="http://hg.python.org/cpython/file/27cef7476f2b/Objects/moduleobject.c#l299">still there</a> but this is only triggered if the <code>__dict__</code> attribute is still alive even after moving the contents of <code>sys.modules</code> to weak references and starting a GC collection run when the interpreter is shutting down; the module finalizer simply decrements their reference count.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a small amount of related documentation at the <a href="https://docs.python.org/2/library/threading.html#importing-in-threaded-code" rel="nofollow noreferrer">bottom of the threading docs</a>:</p>
<blockquote>
<p>Secondly, all import attempts must be completed before the interpreter starts shutting itself down. [..] Failure to abide by this restriction will lead to intermittent exceptions and crashes during interpreter shutdown (as the late imports attempt to access machinery which is no longer in a valid state).</p>
</blockquote>
</div>
