<div class="post-text" itemprop="text">
<p>Question is - where and how to use <code>try/except</code> and <code>if/else</code> operators?</p>
<p>For example - I have function:</p>
<pre><code># copy php.cgi script
def cpcgi(src, dst):
        try:
                shutil.copy(src, dst)
                if os.path.isfile(dst + '/php.cgi'):
                        return True
        except:
                print 'Something going wrong!'
</code></pre>
<p>Function stored in separate file. 
Next, from script it calls like:</p>
<pre><code>import createvhostFuncts as fun

print 'Copying php.cgi file...'
if fun.cpcgi(vdir + 'php-cgi/php.cgi', (vdir + 'php-cgi/' + username + '/' + domain)):
        print 'Done.\n'
else:
        exit('Error! Exit now.\n')
</code></pre>
<p>But - there is lot of functions in <code>createvhostFuncts.py</code>. Thus, I have big list of <code>if/else</code> calls in script and it's looks very... Odd? Useless? </p>
<p>So - what correct way to call functions and where better use <code>try/except</code> - inside function, or in script?</p>
<p><strong>UPD</strong>:</p>
<p>For example - in BASH I can use somethig like next:</p>
<pre><code>#!/usr/bin/env bash

func(){
        echo "Ya!"
}

if func; then
        echo $?
        echo "Printed"
else
        echo $?
        echo "Can't echo!"
fi
</code></pre>
<p>And run it with next result:</p>
<pre><code>$ ./m
Ya!
0
Printed
</code></pre>
<p>Or with error:</p>
<pre><code>#!/usr/bin/env bash

func(){
        eCCCcho "Ya!"
}

if func; then
        echo $?
        echo "Printed"
else
        echo $?
        echo "Can't echo!"
fi


$ ./m
./m: line 4: eCCCcho: command not found
127
Can't echo!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python they usually don't use function return value to denote the success status (like they do in C or Go), rather the function should raise an exception if something goes wrong. </p>
<pre><code>def cpcgi(src, dst):
    shutil.copy(src, dst)
    if not os.path.isfile(dst + '/php.cgi')
        raise WhateverError("Failed to copy {0}".format(src))
</code></pre>
<p>You can intercept the exception from the calling side (within your script) or let it fall through, which in your case will cause the script termination with a stack trace. Then you don't need to wrap every single call with <code>try..except</code>.</p>
<p>(A side note) If you also don't want the stack trace to be displayed, you can use <a href="https://docs.python.org/2/library/sys.html#sys.excepthook" rel="nofollow"><code>sys.excepthook</code></a>, like this:</p>
<pre><code>def report(type, value, traceback):
    print "Error during execution {0}".format(value)

sys.excepthook = report
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It may look odd in a large file to have many try/catch blocks. It is agreed that this is acceptable and functions should throw an error instead of returning values to denote success or failure. </p>
<p>If no error is thrown you continue like normal</p>
<p>Here Is how I would be writing your code. In both cases it reaches the end of the script:</p>
<pre><code>def cpcgi(src, dst):
    shutil.copy(src, dst)
    if not os.path.isfile(dst + '/php.cgi'):
        raise FailedCopyError("Could not copy {} to {}".format(src,dst))
</code></pre>
<hr/>
<pre><code>import createvhostFuncts as fun

print 'Copying php.cgi file...'
try:
    fun.cpcgi(vdir + 'php-cgi/php.cgi', (vdir + 'php-cgi/' + username + '/' + domain)):

    # We have not encountered any errors so continue within the same code block

    a = 10
    b = 20
    c = 30

    # We encountered no errors

except FailedCopyError as e:
    # We have encountered an errof so break out of the try block.
    # We do not re-enter the try block, continue below.
    print(e) # This will print more information about the error


# We can continue here

print('The Try/Catch took care of everything')
print('Continue as if nothing happened')
d = 40
e = 50
</code></pre>
<hr/>
<p>It's definitely work reading the <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">official python documentation</a></p>
</div>
<span class="comment-copy">I'm not 100% sure I understand your question. Are you asking a general question about the appropriate use of try/except blocks in python, or are you asking how to nest tests?</span>
<span class="comment-copy">Second one - correct way to use if/else (depending on function exit status) and try/except. As @bereal mentioned - in Python exit status doesn't used usually? (I mean - in bash I can do &gt; echo 'TEST' &amp;&amp; echo 'Printed' || echo 'Can't echo!' // thus - there used process exit status 0 or 1 )</span>
