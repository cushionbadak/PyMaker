<div class="post-text" itemprop="text">
<p>I just started learning Python today and couldn't find a good example online to help me understand <code>os.execve(path, args, env)</code> properly.</p>
<p>How do I use this method (<code>os.execve</code>) to achieve the following task in Python 3.4?<br/>
Execute an external command (this command is not some windows command like mkdir, cd... It's a custom command), its location is <code>C:\blah</code> and it takes 5 command line arguments.</p>
<p>Any simpler example of using this command would be much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use subprocess:</p>
<pre><code>import subprocess
subprocess.check_call(["C:\my program.exe", "all", "my", "args"])
</code></pre>
<p>os.exec* replaces the current program with another one. It has is uses, but its usually not what you want. </p>
<p>Note that there are several variants here:</p>
<ol>
<li><code>call</code> just calls the program.</li>
<li><code>check_call</code> calls the program and throws an exception if it fails.</li>
<li><code>check_output</code> calls the program, throws an exception if it fails, and returns the output of the program. </li>
</ol>
<p>More advanced use cases can be handled by <code>subprocess.Popen</code> objects.</p>
</div>
<span class="comment-copy">The os.exec* function will stop your program from executing. Is that really what you want?</span>
<span class="comment-copy">fine how to exexute the external command without stopping my program ?</span>
<span class="comment-copy">"I just started learning Python today and couldn't find a good example online to help me understand <code>os.execve(path, args, env)</code> properly.". Python has a superb online documentation, if you can find it, you are doing something wrong... <a href="https://docs.python.org/2/library/os.html#os.execve" rel="nofollow noreferrer">Link to os.execve documentation</a></span>
<span class="comment-copy">how would this work for a command like " login -u john -ac regular -p password" where login is login.exe ,the command</span>
<span class="comment-copy"><code>subprocess.call(["login", "-u", "john", "-ac", "regular", "-p", "password"])</code>. (You may need to pass the full path to login)</span>
<span class="comment-copy">this will work with windows the same way right ?</span>
<span class="comment-copy">@DhiwakarRavikumar, yes.</span>
<span class="comment-copy">The best way to pass multiple arguments is to use <a href="https://docs.python.org/3/library/shlex.html" rel="nofollow noreferrer">shlex</a>: <code>subprocess.call(shlex.split("/path/to/cmd --with --many args -p password"))</code></span>
