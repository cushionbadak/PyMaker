<div class="post-text" itemprop="text">
<p>When I was trying to answer this question: <a href="https://stackoverflow.com/questions/25628412/regex-to-split-ages-and-values-in-python">regex to split %ages and values in python</a> I noticed that I had to re-order the groups from the result of findall. For example:</p>
<pre><code>data = """34% passed 23% failed 46% deferred"""
result = {key:value for value, key in re.findall('(\w+)%\s(\w+)', data)}
print(result)
&gt;&gt;&gt; {'failed': '23', 'passed': '34', 'deferred': '46'}
</code></pre>
<p>Here the result of the findall is:</p>
<pre><code>&gt;&gt;&gt; re.findall('(\w+)%\s(\w+)', data)
&gt;&gt;&gt; [('34', 'passed'), ('23', 'failed'), ('46', 'deferred')]
</code></pre>
<p>Is there a way to change/specify the order of the groups that makes <strong>re.findall return</strong>:</p>
<pre><code>[('passed', '34'), ('failed', '23'), ('deferred', '46')]
</code></pre>
<p>Just to clarify, the question is: </p>
<p>Is it possible to specfic the order or re-order the groups for the return of the re.findall function? </p>
<p>I used the example above to create a dictionary to provide a reason/use case for when you would want to change the order (making key as value and value as key)</p>
<p>Further clarification:</p>
<p>In order to handle groups in larger more complicated regexes, you can name groups, but those names are only accessible when you do a re.search pr re.match. From what I have read, findall has a fixed indices for groups returned in the tuple, The question is anyone know how those indices could be modified. This would help make handling of groups easier and intuitive.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take 3, based on a further clarification of the OP's intent in <a href="https://stackoverflow.com/questions/25628973/re-ordering-groups-in-regex-findalls/25629693?noredirect=1#comment40043356_25629693">this comment</a>.</p>
<p>Ashwin is correct that <code>findall</code> does not preserve named capture groups (e.g. <code>(?P&lt;name&gt;regex)</code>). <a href="https://docs.python.org/2/library/re.html#re.finditer" rel="nofollow noreferrer"><code>finditer</code></a> to the rescue! It returns the individual match objects one-by-one. Simple example:</p>
<pre><code>data = """34% passed 23% failed 46% deferred"""
for m in re.finditer('(?P&lt;percentage&gt;\w+)%\s(?P&lt;word&gt;\w+)', data):
    print( m.group('percentage'), m.group('word') )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://stackoverflow.com/questions/25628973/re-ordering-groups-in-regex-findalls/25629602?noredirect=1#comment40042973_25629602">the OP's comment on my first answer</a>: If you are simply trying to reorder a list of 2-tuples like this:</p>
<pre><code>[('34', 'passed'), ('23', 'failed'), ('46', 'deferred')]
</code></pre>
<p>... to look like this, with individual elements reversed:</p>
<pre><code>[('passed', '34'), ('failed', '23'), ('deferred', '46')]
</code></pre>
<p>There's an easy solution: use a list comprehension with the slicing syntax <code>sequence[::-1]</code> to reverse the order of the elements of the individual tuples:</p>
<pre><code>a = [('34', 'passed'), ('23', 'failed'), ('46', 'deferred')]
b = [x[::-1] for x in a]
print b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you've identified in your second example, <code>re.findall</code> returns the groups in the original order.</p>
<p>The problem is that the standard Python <strong><code>dict</code> type does not preserve the order of keys</strong> in any way. Here's the manual for Python 2.x, which makes it explicit, but it's still true in Python 3.x: <a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="nofollow">https://docs.python.org/2/library/stdtypes.html#dict.items</a></p>
<p>What you should use instead is <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict as odict

data = """34% passed 23% failed 46% deferred"""
result = odict((key,value) for value, key in re.findall('(\w+)%\s(\w+)', data))
print(result)
&gt;&gt;&gt; OrderedDict([('passed', '34'), ('failed', '23'), ('deferred', '46')])
</code></pre>
<p>Notice that you <strong>must use the pairwise constructor</strong> form (<code>dict((k,v) for k,v in ...</code>) rather than the <code>dict</code> comprehension constructor (<code>{k:v for k,v in ...}</code>). That's because the latter constructs instances of <code>dict</code>type, which cannot be converted to <code>OrderedDict</code> without losing the order of the keys... which is of course what you are trying to preserve in the first place.</p>
</div>
<span class="comment-copy">It is <b>not</b> possible to alter the order of the groups returned by <code>findall</code>, but it is easy to re-order them after the fact as I showed in my second answer: <a href="http://stackoverflow.com/a/25629693/20789">stackoverflow.com/a/25629693/20789</a></span>
<span class="comment-copy">Thats what I assumed, but could not find documentation to state that. Hence my question here.</span>
<span class="comment-copy">I know how to re-order tuples, the questions is to specific the order to re.findall.</span>
<span class="comment-copy">The order of <b>what</b> to <code>re-findall</code>? I'm showing you how to take the output of <code>re.findall</code> and alter it to have the order you said you wanted.</span>
<span class="comment-copy">In order to handle groups in larger more complicated regexes,  you can name groups, but those names are only accessible when you do a re.search pr re.match. From what I have read, findall has a fixed indices for groups returned in the tuple, The question is anyone know how those indices could be modified. This would help make handling of groups easier and intuitive.</span>
<span class="comment-copy">Ah, named groups are a separate issue (also not in your question). You are correct that <code>findall</code> returns only captured groups and ignores names; however you can simply use <a href="https://docs.python.org/2/library/re.html#re.finditer" rel="nofollow noreferrer"><code>finditer</code></a> instead to return the match objects, by which you will be able to access named groups.</span>
<span class="comment-copy">That sir, was what I was looking for. If you can add/modify your answer, I will accept it. Thanks</span>
<span class="comment-copy">I was wondering if I can specify or change the original order of the return for re.findall. The conversion to dict was just more of an example of when I want to re-order the groups.</span>
<span class="comment-copy">Your question does not make it clear at all what you are trying to reorder. Please edit it to clarify this.</span>
