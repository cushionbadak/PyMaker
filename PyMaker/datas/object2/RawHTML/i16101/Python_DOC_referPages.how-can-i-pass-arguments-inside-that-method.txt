<div class="post-text" itemprop="text">
<p>I'm using the library turtle.
It has the <a href="https://docs.python.org/3/library/turtle.html?highlight=logo#turtle.onkey" rel="nofollow">onkey</a> command, as specified:</p>
<pre><code>turtle.onkeypress(fun, key=None)
Parameters:
fun – a function with no arguments or None
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)
</code></pre>
<p>However, I need to pass an argument. Was there any way to do this?</p>
<p>My code:</p>
<p><strong>menuInitial.py</strong></p>
<pre><code>class MenuInitial(menu.Menu):
        [...]
    def itemInput(self):
        turtle.Screen().onkey(menu.Menu.itemUp(self), "Up")
        turtle.Screen().listen()
</code></pre>
<p><strong>menu.py</strong></p>
<pre><code>class Menu(drawingGeometric.rectangle):
    [...]
    def itemUp(self):
        self.turtle.left(90)
        position.position.forwardWithoutPen(self, 16)
        self.turtle.right(90)
</code></pre>
<p>As can be seen, the "MenuInitial" class is heir to the "Menu". I'm learning object orientation.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you should just do this:</p>
<pre><code>class MenuInitial(menu.Menu):
        [...]
    def itemInput(self):
        turtle.Screen().onkey(self.itemUp, "Up")
        turtle.Screen().listen()
</code></pre>
<p>Because you're passing <code>itemUp</code> as a bound instance method (<code>self.itemUp</code>) to <code>onkey</code> instead of as an unbound method (<code>menu.Menu.itemUp</code>), <code>self</code> will automatically be passed as the first argument. You can do this because <code>MenuInitial</code> is a child of <code>Menu</code>, so they share the same internal state.</p>
<p>If for some reason you <em>did</em> need to pass another argument to <code>itemUp</code>, you could use <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a>:</p>
<pre><code>from functools import partial

[...]

    def itemInput(self):
        func = partial(self.itemUp, "some_argument")
        turtle.Screen().onkey(func, "Up")
        turtle.Screen().listen()
</code></pre>
<p>Then you could have this:</p>
<pre><code>class Menu(drawingGeometric.rectangle):
    [...]
    def itemUp(self, argument):
        print(argument) # This will print "some_argument"
        self.turtle.left(90)
        position.position.forwardWithoutPen(self, 16)
        self.turtle.right(90)
</code></pre>
</div>
<span class="comment-copy">I did not know this possibility. It worked perfectly. However, <b>in another situation</b> it was not possible to pass <code>self</code>, would have any idea?</span>
