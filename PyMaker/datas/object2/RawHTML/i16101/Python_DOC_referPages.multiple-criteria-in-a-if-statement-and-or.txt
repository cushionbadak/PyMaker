<div class="post-text" itemprop="text">
<p>I want to filter the lines fits below criteria:</p>
<ol>
<li>Character ‘/’ is in the line</li>
<li>Character ‘;’ is in the line</li>
<li>Character ‘e’ is in the line</li>
<li>Character ‘k’ is not in the line</li>
<li>Character ‘@’ is not in the line</li>
<li>Length of the line does not exceed 80</li>
</ol>
<p>What I have is:</p>
<pre><code>the_list = ['C  TEE edBore 1 1/4200;',
'Cylinder SingleVerticalB HHJ e 1 1/8Cooling 1',
'EngineBore 11/1; TDT 8Length 3Width 3',
'EngineCy HEE Inline2008Bore 1',
'Height 4TheChallen TET e 1Stroke 1P 305',
'Height 8C ;0;Wall15ccG QBG ccGasEngineJ 142',
'Height EQE C ;0150ccGas2007',
'Length 10Wid ETQ Length 10Width ',
'Stro EHT oke 1 1/8Length ',
'Stroke 1 1/4HP   JII Stroke 1 1/4HP  ',
'Stroke 1Cy QTH 7Weight ; 1/2LBS',
'Weight 18LBSLength 1 DQT Length 12Width 7',
'Width 4L 233He TTE 3Height ;Weight ',
'Width ;Height 9200;Weight 4L APO .75H.P.@;5200RPM']


for a in the_list:
    if '/' in a and ';' in a and 'e' in a and '@' not in a and 'k' not in a and len(a)&lt;80:
        print a
</code></pre>
<p>the ‘if’ statement doesn’t looked smart. What is the good way to put it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="nofollow">sets</a>; test for a strict subset with <code>&lt;=</code> and use <code>set.isdisjoint()</code> to assert that no elements from a set are present:</p>
<pre><code>if {'/', ';', 'e'} &lt;= set(a) and {'@', 'k'}.isdisjoint(a) and len(a) &lt;= 80:
</code></pre>
<p>Note the <code>&lt;=</code> as well; otherwise a line of 80 character isn't valid, while your initial criteria stipulate that only lines that <em>exceed</em> 80 characters should be ignored.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; for a in the_list:
...     if {'/', ';', 'e'} &lt;= set(a) and {'@', 'k'}.isdisjoint(a) and len(a) &lt;= 80:
...         print a
... 
C  TEE edBore 1 1/4200;
EngineBore 11/1; TDT 8Length 3Width 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow"><code>any</code></a> and <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow"><code>all</code></a> keywords:</p>
<pre><code>for line in the_list:
    if all(ch in line for ch in '/;e') and \
            not any(ch in line for ch in 'k@') and \
            len(line) &lt;= 80:
        print line
</code></pre>
<p>Results in output:</p>
<pre><code>C  TEE edBore 1 1/4200;
EngineBore 11/1; TDT 8Length 3Width 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution is to use collections.Counter.</p>
<pre><code>from collections import Counter

inc = ['/', ';', 'e']
exc = ['@', 'k']

for a in the_list:
    c = Counter(a)
    if all([c[k] for k in inc]) and not any([c[k] for k in exc]) and len(a)&lt;80:
        print a
</code></pre>
<p>output:</p>
<pre><code>C  TEE edBore 1 1/4200;
EngineBore 11/1; TDT 8Length 3Width 3
</code></pre>
<p>But I don't recommend it from readability. I think to do nothing is easy to see.</p>
</div>
<span class="comment-copy">It is also invalid, <code>'#'</code> isn't tested against anything.</span>
<span class="comment-copy">thanks Mr. Pieters. let's say it's 'k' instead of '#'..</span>
<span class="comment-copy">I think that can be solved with regular expressions easily..</span>
<span class="comment-copy">@MarkK: <i>just</i> <code>'k'</code> is always true. Did you mean <code>'k' not in a</code> instead?</span>
<span class="comment-copy">Yes, I do mean "'k' not in a".</span>
<span class="comment-copy">thanks Mr. Pieters. however it pops an error 'TypeError: can only compare to a set'. is it because I am using Python 2.76?</span>
<span class="comment-copy">@MarkK: Are you sure you testing my code correctly? I ran this on Python 2.7.</span>
<span class="comment-copy">Mr. Pieters, sorry. it works fine. by the way, what's wrong with sk11's below? regex could be a way but how to put it?</span>
<span class="comment-copy">@MartijnPieters Just curious, is there any advantage of using <code>{'/', ';', 'e'} &lt;= set(a) and {'@', 'k'}.isdisjoint(a)</code> instead of <code>set('/;e') &lt;= set(a) and set('@k').isdisjoint(a)</code>? Also, the len should be <code>&lt;=</code> 80 (does not exceed 80)</span>
<span class="comment-copy">@mu無: in this case, there is no preference; either method would be about as fast as the other. In the case of a membership test (<code>something in {'a', 'b', 'c'}</code> and using Python 3.2 or newer, the set would be <a href="https://docs.python.org/3/whatsnew/3.2.html#optimizations" rel="nofollow noreferrer">converted to a <code>frozenset()</code> constant</a>, avoiding creating a new object every time. Because of <i>that</i> I prefer the literal notation.</span>
<span class="comment-copy">thanks mu 無. it's a good way for me to learn 'all' and 'any'. but the lines ever longer than the original one...</span>
<span class="comment-copy">@MarkK You can write the <code>if</code> statement in a single line (I've used 3 lines for more readability) - Just remove the \ at end of each line</span>
<span class="comment-copy">however I was imaging something like "if any('/', ';', 'e') in a or ('@', 'k') in a and len(a)&lt;80:" Does it exist?</span>
<span class="comment-copy">It's a bit shorter if you write <code>'/;e'</code> instead of <code>['/', ';', 'e']</code>. Strings can be iterated over just like lists.</span>
<span class="comment-copy">@RemcoGerlich +1. Thanks for the pro tip :)</span>
<span class="comment-copy">thanks, keimina.</span>
