<div class="post-text" itemprop="text">
<p>I have a directory with files of the following structure</p>
<pre><code>A2ML1_A8K2U0_MutationOutput.txt
A4GALT_Q9NPC4_MutationOutput.txt
A4GNT_Q9UNA3_MutationOutput.txt
...
</code></pre>
<p>The first few letters represent the gene, the next few the Uniprot Number (a unique protein identifier) and MutationOutput is self explanatory.</p>
<p>In Python, I want to execute the following line:</p>
<pre><code>f_outputfile.write(mutation_directory + SOMETHING +line[1+i]+"_MutationOutput.txt\n")
</code></pre>
<p>here, <code>line[1+i]</code> correctly identifies the Uniprot ID.</p>
<p>What I need to do is correctly identify the gene name. So somehow, I need to quickly search over that directory, find the file that has the <code>line[i+1]</code> value in it's uniprot field and then pull out the gene name.</p>
<p>I know I can list all the files in the directory, then I can do <code>str.split()</code> on each string and find it. But is there a way I can do that smarter? Should I use a dictionary? Can I just do a quick regex search? </p>
<p>The entire directory is about 8,116 files -- so not that many.</p>
<p>Thank you for your help!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What I need to do is correctly identify the gene name. So somehow, I need to quickly search over that directory, find the file that has the line[i+1] value in it's uniprot field and then pull out the gene name.</p>
</blockquote>
<p>Think about how you'd do this in the shell:</p>
<pre><code>$ ls mutation_directory/*_A8K2U0_MutationOutput.txt
mutation_directory/A2ML1_A8K2U0_MutationOutput.txt
</code></pre>
<p>Or, if you're on Windows:</p>
<pre><code>D:\Somewhere&gt; dir mutation_directory\*_A8K2U0_MutationOutput.txt
A2ML1_A8K2U0_MutationOutput.txt
</code></pre>
<p>And you can do the exact same thing in Python, with the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow"><code>glob</code></a> module:</p>
<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('mutation_directory/*_A8K2U0_MutationOutput.txt')
['mutation_directory/A2ML1_A8K2U0_MutationOutput.txt']
</code></pre>
<p>And of course you can wrap this up in a function:</p>
<pre><code>&gt;&gt;&gt; def find_gene(uniprot):
...     pattern = 'mutation_directory/*_{}_MutationOutput.txt'.format(uniprot)
...     return glob.glob(pattern)[0]
</code></pre>
<hr/>
<blockquote>
<p>But is there a way I can do that smarter? Should I use a dictionary? </p>
</blockquote>
<p>Whether that's "smarter" depends on your use pattern.</p>
<p>If you're looking up thousands of files per run, it would certainly be <em>more efficient</em> to read the directory just once and use a dictionary instead of repeatedly searching. But if you're planning on, e.g., reading in an entire file anyway, that's going to take orders of magnitude longer than looking it up, so it probably won't matter. And you know what they say about premature optimization.</p>
<p>But if you want to, you can make a dictionary keyed by the Uniprot number pretty easily:</p>
<pre><code>d = {}
for f in os.listdir('mutation_directory'):
    gene, uniprot, suffix = f.split('_')
    d[uniprot] = f
</code></pre>
<p>And then:</p>
<pre><code>&gt;&gt;&gt; d['A8K2U0']
'mutation_directory/A2ML1_A8K2U0_MutationOutput.txt'
</code></pre>
<hr/>
<blockquote>
<p>Can I just do a quick regex search?</p>
</blockquote>
<p>For your simple case, you don't need regular expressions.*</p>
<p>More importantly, what are you going to search? Either you're going to loop—in which case you might as well use <code>glob</code>—or you're going to have to build up an artificial giant string to search—in which case you're better off just building the dictionary.</p>
<hr/>
<p><sub>* In fact, at least on some platforms/implementations, <code>glob</code> is implemented by making a regular expression out of your simple wildcard pattern, but you don't have to worry about that.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use glob</p>
<pre><code>In [4]: import glob

In [5]: files = glob.glob('*_Q9UNA3_*')

In [6]: files
Out[6]: ['A4GNT_Q9UNA3_MutationOutput.txt']
</code></pre>
</div>
<span class="comment-copy">Here's a good starting point: <a href="http://stackoverflow.com/questions/3207219/how-to-list-all-files-of-a-directory-in-python" title="how to list all files of a directory in python">stackoverflow.com/questions/3207219/…</a></span>
