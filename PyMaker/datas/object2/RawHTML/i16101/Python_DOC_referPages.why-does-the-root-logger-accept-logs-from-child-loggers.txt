<div class="post-text" itemprop="text">
<p>I don't understand the interactions between the root logger and child loggers:</p>
<pre><code>import logging

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# 1. SOME LOGGER
logger = logging.getLogger( 'logger' ) 
logger.setLevel(logging.INFO)

# 2. ROOT LOGGER
rootLogger = logging.getLogger()
rootLogger.setLevel( logging.CRITICAL )
fh = logging.FileHandler('root.log')
fh.setLevel( logging.DEBUG )
fh.setFormatter(formatter)
rootLogger.addHandler(fh)

#
logger.info( 'hello' ) 
</code></pre>
<p>The last line <code>logger.info( 'hello' )</code> should be </p>
<ul>
<li>accepted by <code>logger</code> because it has <code>logger.setLevel(logging.INFO)</code> </li>
<li>rejected by the <code>rootLogger</code> because it has <code>rootLogger.setLevel( logging.CRITICAL )</code></li>
</ul>
<p>But at the end of my script, I have a file <code>root.log</code> containing <code>hello</code>. Why doesn't the <code>CRITICAL</code> level block the message for <code>rootLogger</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is happening because the <code>logger</code> object is only inheriting the <code>FileHandler</code> object you assigned to <code>rootLogger</code>, not the log-level. Your <code>Logger</code> object sets its own log-level, so the parent's log-level won't be used at all. This means that logging through <code>logger</code> will check the log-level of the <code>logger</code> itself (which is <code>INFO</code>), and then the level of the inherited <code>FileHandler</code> (which is <code>DEBUG</code>) - it doesn't check the log-level of the parent <code>rootLogger</code> object. Because both <code>logger</code> and <code>FileHandler</code> are set to <code>INFO</code> level or above, you see <code>'hello'</code> get logged.</p>
<p>If you don't want <code>logger</code> to inherit the handlers from <code>rootLogger</code>, set the <a href="https://docs.python.org/3/library/logging.html#logging.Logger.propagate" rel="nofollow"><code>propagate</code></a> attribute to '0' on the <code>logger</code> object:</p>
<pre><code>logger = logging.getLogger( 'logger' ) 
logger.setLevel(logging.INFO)
logger.propagate = 0
</code></pre>
<p>If you want the child logger to inherit the parent's log-level, set the child log-level to <code>NOTSET</code>:</p>
<pre><code>logger = logging.getLogger( 'logger' ) 
logger.setLevel(logging.NOTSET)
</code></pre>
</div>
