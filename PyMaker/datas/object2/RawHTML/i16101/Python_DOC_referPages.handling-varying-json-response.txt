<div class="post-text" itemprop="text">
<p>So I'm working with an an API that returns a JSON after I send a query to it. I wrote a wrapper class around that JSON response so I could handle any change in the JSON in one place. It also helps that I can access the values easily now.</p>
<p>Here is the wrapper I wrote:</p>
<pre><code>class WitResponse:
    def __init__(self, json_string):
        self.json_string = json_string
        self.wit_response = json.loads(json_string)

    @property
    def intent(self):
        return self.wit_response["outcomes"][0]["intent"]

    @property
    def confidence(self):
        return self.wit_response["outcomes"][0]["confidence"]

    @property
    def text(self):
        return self.wit_response["_text"] 

    @property
    def entites(self):
        return self.wit_response["outcomes"][0]["entites"]

    @property
    def msg_id(self):
        return self.wit_response["msg_id"] 

    @property
    def response(self):
        return self.json_string.translate(None,"\n")+"\n" #Saves the reply in an already easy to send format

    @property
    def target(self):
        return self.wit_response["outcomes"][0]["entities"]["target"][0]["value"]
</code></pre>
<p>An example of a very frequent key that can be found in the JSON is the <code>target</code> key (as it can be seen above). Since it doesn't always exist calling the <code>target</code> method will raise an exception. I'm looking for a solution to handle fields like that that'll be as elegant as possible. </p>
<p>At the moment I've just wrapped the the return statement in the <code>target</code> method with a try,except block and returns <code>None</code> if an exception is raised (the JSON didn't have a <code>target</code> key). </p>
<p>I've also considered using a decorator that adds the try,except block however it didn't seem to work when I added the decorator above the @property decorator: </p>
<pre><code>def None_Return_Value_Decorator(func):
    def wrapper(self):
        try:
            value = func(self)
            return value
        except:
            return None

    return wrapper
</code></pre>
<p>Are there more elegant solutions? If not, can the decorator one work (and how do I fix it if it does)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Add your decorator <em>below</em> the <code>@property</code> decorator:</p>
<pre><code>@property
@None_Return_Value_Decorator
def target(self):
    return self.wit_response["outcomes"][0]["entities"]["target"][0]["value"]
</code></pre>
<p>Now your decorator is applied first, before turning the return value of your decorator into the property getter.</p>
<p>You want to <a href="https://stackoverflow.com/questions/21553327/why-is-except-pass-a-bad-programming-practice">avoid using a except handler</a> however; try to only catch a relevant exception, such as <code>IndexError</code> and <code>KeyError</code>.</p>
<p>You can make the exceptions configurable in the decorator:</p>
<pre><code>from functools import wraps

def ignore_exception(*exceptions):
    def decorator(f):
        @wraps(f)
        def wrapper(*args, **kw):
            try:
                return f(*args, **kw)
            except exceptions:
                return None
        return wrapper
    return decorator
</code></pre>
<p>then use as:</p>
<pre><code>@property
@ignore_exception(KeyError)
def target(self):
    return self.wit_response["outcomes"][0]["entities"]["target"][0]["value"]
</code></pre>
<p>for example.</p>
</div>
<span class="comment-copy">That seems to work. Are you aware of a better way to handle this than I already have? This seems very inelegant to me.</span>
<span class="comment-copy">@Shookie: if you are using Python 3.4 you can use the new <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress()</code> context manager</a>.</span>
<span class="comment-copy">@Shookie: but using a decorator to encapsulate common handling looks fine to me; you could make the decorator accept the exception(s) to catch as an argument even.</span>
