<div class="post-text" itemprop="text">
<p>I wanted to merge 2 lists together (<code>ListA</code>, <code>ListB</code>). But the catch is, after a certain element within the <code>ListA</code>.</p>
<p>The user enters after which element <code>ListB</code> should be merged with <code>listA</code>.</p>
<p>For example;</p>
<pre><code>ListA = [2,1,0]
ListB = [4,5,6]
</code></pre>
<p>User Enters <strong>1</strong>.</p>
<p>Output:</p>
<pre><code>new_list = [2, 4, 5, 6, 1, 0]
</code></pre>
<p>Now I was thinking of using a <code>for loop</code>, but because of my limited knowledge in <code>for loops</code> I don't know how I can make the loop to stop after a certain amount of loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is actually really easy with slice assignment, as explained in the tutorial section on <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow">Lists</a>:</p>
<pre><code>ListA = [2,1,0]
ListB = [4,5,6]

# make a copy -- I'm assuming you don't want to modify ListA in the process.
new_list = ListA[:]
# insert ListB at a particular location.  I've arbitrarily chosen `1`
# basically this says to take the empty section of the list
# starting just before index 1 and ending just before index 1 and replace it
# with the contents of ListB
new_list[1:1] = ListB
# Check the output to make sure it worked.
print(new_list)  # [2, 4, 5, 6, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way you can do this without any mutating operations:</p>
<pre><code>new_list = a[:i] + b + a[i:]
</code></pre>
<p>To see it in practice:</p>
<pre><code>&gt;&gt;&gt; a = [2, 1, 0]
&gt;&gt;&gt; b = [4, 5, 6]
&gt;&gt;&gt; i = 1
&gt;&gt;&gt; new_list = a[:i] + b + a[i:]
&gt;&gt;&gt; new_list
[2, 4, 5, 6, 1, 0]
</code></pre>
<p>If you don't understand any piece, you can break it down:</p>
<pre><code>&gt;&gt;&gt; a[:i]
[2]
&gt;&gt;&gt; a[i:]
[1, 0]
&gt;&gt;&gt; # etc.
</code></pre>
<p>So, why would you want to do this without mutating operations? Lots of possible reasons:</p>
<ul>
<li>Code that doesn't mutate values is easier to reason about. It's exactly like a mathematical function; you don't have to think about the order in which things happen or the state at each step. And you can usually decompose it into simpler pieces, exactly as I did above, if you don't understand it.</li>
<li>Often you don't actually <em>want</em> to mutate anything. In this case, we don't have to make a copy of <code>a</code> in advance, because we're not going to modify it.</li>
<li>It can be more readable, or even more novice-friendly. In this case, you still have to understand slicing, but not slice assignment.</li>
<li>It's often shorter. This is a one-liner instead of a two-liner.</li>
<li>It's often more efficient. This avoids copying the entire list and then shifting most of the elements to the right.</li>
</ul>
<p>But something it's less readable, or more verbose, or less efficient. So, it's worth knowing both ways of doing things, so you can decide which is appropriate on a case by case basis.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>ListA = [2,1,0]
ListB = [4,5,6]
a=[]
def merg(i):
 for i in range(i):
  a.append(ListA[i])
 for j in ListB:
  a.append(j)
 a.append(ListA[i+1])
 return a

print merg(2)
</code></pre>
<p>DEMO:</p>
<pre><code>[2, 1, 4, 5, 6, 0]
</code></pre>
</div>
<span class="comment-copy">"because of my limited knowledge in For Loops I dont know how I can make the loop to stop after a certain amount of Loops": Not that this is the best way to solve the problem, but if you want to do it this way, the answer is <code>break</code>. For example, <code>for i, value in enumerate(ListA):</code> then <code>if i == certain_index: break</code>.</span>
<span class="comment-copy">could you explain what is happening in here</span>
<span class="comment-copy">@Ali: The official tutorial explains it nicely; I added a link to mgilson's answer.</span>
<span class="comment-copy">@abarnert -- Thanks for the link.</span>
<span class="comment-copy">so just to clear it up some more... U are saying that it takes the empty space between element 1 and element 2 and fills it up with ListB?</span>
<span class="comment-copy">@Ali: That's a pretty reasonable way to look at it. But remember your 0-based numbering. It's filling in the empty space right <i>before</i> element 1 (that is, the second element), not <i>after</i>.</span>
<span class="comment-copy">I don't think this does what he wants for any case except <code>i==1</code>. He wants all of the elements of <code>a</code> up to <code>i</code>, then all of the elements of <code>b</code>, then all of the elements of <code>a</code> after <code>i</code>. This gives him just the <code>i</code>th element first, and puts all the rest at the end.</span>
<span class="comment-copy">did you run the code ? please run it first ! i do and work well its obviously in the code !</span>
<span class="comment-copy">I just didâ€¦ and it does exactly what I said. For example, with <code>merg(2)</code>, you don't get <code>[2, 1, 4, 5, 6, 0]</code>, you get <code>[0, 4, 5, 6, 2, 1]</code>. In fact, it doesn't even give the OP's desired input for <code>merg(1)</code>. He wants <code>[2, 4, 5, 6, 1, 0]</code>, you give him <code>[1, 4, 5, 6, 2, 0]</code>.</span>
<span class="comment-copy">i read the question again you right ! i had a wrong understand of the code! i edit the code ! correctly !</span>
<span class="comment-copy">If this is not a valid answer to the question, please remove the answer.</span>
