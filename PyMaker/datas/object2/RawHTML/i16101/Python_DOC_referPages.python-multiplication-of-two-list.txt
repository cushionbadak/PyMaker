<div class="post-text" itemprop="text">
<p>I am new to Python and noticed that the following. </p>
<pre><code>&gt;&gt;&gt; 'D'*1
'D'
</code></pre>
<p>Therefore i wonder whether we can do multiplication and join the string (for choice, element can be 0 or 1 only)</p>
<pre><code>&gt;&gt;&gt; print(choice)
[1, 1, 1, 1]
&gt;&gt;&gt; print(A)
['D', 'e', '0', '}']
</code></pre>
<p>My desired output would be <code>'De0}'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can explicity zip the lists, mulitply and then join the result:</p>
<pre><code>''.join([c * i for c, i in zip(A, choice)])
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code> function</a> pairs up the characters from <code>A</code> with the integers from <code>choice</code>, the list comprehension then multiplies the character with the integer, and the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code> call</a> combines the result of that into one string.</p>
<p>If <code>choice</code> is used <strong>just</strong> used to <em>select</em> elements, you are better of using <a href="https://docs.python.org/3/library/itertools.html#itertools.compress" rel="nofollow"><code>itertools.compress()</code></a> here:</p>
<pre><code>from itertools import compress

''.join(compress(A, choice))
</code></pre>
<p><code>compress()</code> does exactly what you were intending to do: pick elements from the first iterable based on wether or not the corresponding value in the second iterable is true or false.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; choice = [1, 1, 1, 1]
&gt;&gt;&gt; A = ['D', 'e', '0', '}']
&gt;&gt;&gt; ''.join([c * i for c, i in zip(A, choice)])
'De0}'
&gt;&gt;&gt; choice = [0, 1, 0, 1]
&gt;&gt;&gt; ''.join([c * i for c, i in zip(A, choice)])
'e}'
&gt;&gt;&gt; from itertools import compress
&gt;&gt;&gt; ''.join(compress(A, choice))
'e}'
</code></pre>
<p>Using <code>itertools.compress()</code> is the <em>far faster</em> option here:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; import random
&gt;&gt;&gt; A = [chr(random.randrange(33, 127)) for _ in range(1000)]
&gt;&gt;&gt; choice = [random.randrange(2) for _ in range(1000)]
&gt;&gt;&gt; def with_mult(A, choice):
...     return ''.join([c * i for c, i in zip(A, choice)])
... 
&gt;&gt;&gt; def with_compress(A, choice):
...     return ''.join(compress(A, choice))
... 
&gt;&gt;&gt; timeit.timeit('f(A, choice)', 'from __main__ import A, choice, with_mult as f', number=10000)
1.0436905510141514
&gt;&gt;&gt; timeit.timeit('f(A, choice)', 'from __main__ import A, choice, with_compress as f', number=10000)
0.2727453340048669
</code></pre>
<p>That's a 4x speed increase.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a> with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>str.join</code></a> and <a href="https://docs.python.org/2/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>. See below for an example:</p>
<pre><code>choice = [1, 1, 1, 0]
A = ['D', 'e', '0', '}']

out = ''.join([n*c for n, c in zip(choice, A)])

print(out)
# De0
</code></pre>
<p>As the 4th element of choice is 0 the 4th element of <code>A</code> ('}') is not printed.</p>
</div>
<span class="comment-copy">What would print if <code>choice=[1,1,1,2]</code>?</span>
<span class="comment-copy">there is another issue. my scenrio is that i would like to let the user to have a checkbox. if the item is checked, then 1, 0 otherwise. Therefore only 0 or 1 in this case.</span>
<span class="comment-copy">@useR: in that case, you shouldn't really need to multiply here; just use 'compression'; pick elements or ignore them based on the truth value of the elements in <code>choice</code>.</span>
<span class="comment-copy">terribly sorry that i didnt state my problem clearly, as i would like to do random.shuffle for A first and then join the element.</span>
<span class="comment-copy">@useR: then do so? Or should <code>choice</code> be shuffled <i>along</i> with <code>A</code>? That's really a <i>separate</i> problem however. It doesn't matter if <code>A</code> is shuffled or not, because you should focus on the distinct problem you presented here: how to select items in one list based on the value of another.</span>
<span class="comment-copy">And of course we can also do it with a generator expression: <code>''.join(c * i for c, i in zip('De0}', [1, 1, 1, 0]))</code></span>
<span class="comment-copy">@PM2Ring see <a href="http://stackoverflow.com/a/9061024/3005188">stackoverflow.com/a/9061024/3005188</a> for why it's better to use a list comprehension as opposed to a generator expression when using <code>str.join</code>.</span>
<span class="comment-copy">@PM2Ring: but a generator expression <i>with a <code>str.join()</code> call</i> is slower, because the <code>str.join()</code> has to have a list object to do two scans on (one to determine the total size, one to build the actual string).</span>
<span class="comment-copy">@Ffisegydd and MartijnPieters: Ah, right. Thanks.</span>
