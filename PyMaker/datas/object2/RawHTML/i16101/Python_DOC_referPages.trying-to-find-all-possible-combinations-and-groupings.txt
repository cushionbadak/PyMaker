<div class="post-text" itemprop="text">
<p>I have been trying to work through the following problem using excel and realized this may be better suited for Python however, am not sure where to start, I have only a basic understanding of Python. how would you guys approach solving this?</p>
<p>There are 6 kinds of coffee and there are 10 kinds of flavor shots and you can put one, two or three shots in each kind of coffee. Based on this, I would like to know (and list) the unique flavor combinations and how long you could go without having the same cup of coffee. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations</code></a> you can easily get all the different possibly combinations of flavour shot:</p>
<pre><code>from itertools import combinations

shots = range(1,11)
N = 3

coms = [c for n in range(1, N+1) for c in combinations(shots, n)]
</code></pre>
<p>The length of <code>coms</code> will give you the number of combinations, which in the case of 6 flavours and one, two, or three shots is 175.</p>
<p>The number of flavour shot combinations when added to coffee is simply <code>6 * 175 = 1050</code>.</p>
<h3>EDIT</h3>
<p>Additionally (as an aside) you don't even need to do this through programming. Assuming you have n elements and you want to work out how many different ways you can pick k of them then the number is given by the <a href="http://en.wikipedia.org/wiki/Binomial_coefficient" rel="nofollow">Binomial coefficient</a> which can be easily calculated with <code>C(n, k) = n!/(k!*(n-k)!)</code>,</p>
<p>In your case you have n=10 and k=1, k=2, and k=3. Thus your solution is:</p>
<pre><code>C(10, {1, 2, 3}) = C(10, 3) + C(10, 2) + C(10, 1)
                 = 10!/(3!*(10-3)!) + 10!/(2!*(10-2)!) + 10!/(1!*(10-1)!)
                 = 175
           Total = 175 * 6 = 1050
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; flavor = ["F1","F2","F3","F4","F5","F6","F7","F8","F9","F10"]
&gt;&gt;&gt; coffee = ["C1","C2","C3","C4","C5","C6"]
&gt;&gt;&gt; from itertools import product, combinations, chain
&gt;&gt;&gt; len(list(product(coffee, chain(combinations(flavor, 1), combinations(flavor, 2), combinations(flavor, 3)))))
1050
&gt;&gt;&gt; list(product(coffee, chain(combinations(flavor, 1), combinations(flavor, 2), combinations(flavor, 3))))
[('C1', ('F1',)), ('C1', ('F2',)), ('C1', ('F3',)), ('C1', ('F4',)), ('C1', ('F5',)), ('C1', ('F6',)), ('C1', ('F7',)), ('C1', ('F8',)), ('C1', ('F9',)), ('C1', ('F10',)), ('C1', ('F1', 'F2')), ('C1', ('F1', 'F3')), ('C1', ('F1', 'F4')), ('C1', ('F1', 'F5')), ('C1', ('F1', 'F6')), ('C1', ('F1', 'F7')), ('C1', ('F1', 'F8')), ('C1', ('F1', 'F9')), ('C1', ('F1', 'F10')), ('C1', ('F2', 'F3')), ...
</code></pre>
<p>I think this is correct. We build up all the 1, 2, and 3 tuple combination of coffee flavors, and chain them together into a single iterable. Then we take the product of combining every combination of flavors with each coffee.</p>
</div>
<div class="post-text" itemprop="text">
<p>This actually sounds like a job for <a href="https://docs.python.org/2/library/itertools.html#itertool-functions" rel="nofollow">itertools.product</a>:</p>
<p>Define coffees as:</p>
<pre><code> coffee = ["C1","C2","C3","C4","C5","C6"]
</code></pre>
<p>And flavor shot as:</p>
<pre><code> flavor = ["F1","F2","F3","F4","F5","F6","F7","F8","F9","F10"]
</code></pre>
<p>One flavor shot:</p>
<pre><code> itertools.product(coffee,flavor)
</code></pre>
<p>Two flavor shot:</p>
<pre><code> [i for i in itertools.product(coffee,flavor,flavor) if i[1] != i[2]]
</code></pre>
<p>Three flavor shot:</p>
<pre><code> [i for i in itertools.product(coffee,flavor,flavor, flavor) if i[1] != i[2] and i[2] != i[3] and i[1] != i[3]]
</code></pre>
</div>
<span class="comment-copy">You only have one kind of coffee in the drink at one time?</span>
<span class="comment-copy">Correct one kind of coffee but one, two or three different flavor shots.</span>
<span class="comment-copy">Thank you for the great answers guys, was able to figure out a solution from the different methods provided.</span>
<span class="comment-copy">This solution would still show duplicates however wouldnt it?  for example both  "coffee 1 flavor1 flavor2 flavor3" and "coffee1 flavor2 flavor1 flavor3"  these would be the same drink even if the order is different.</span>
<span class="comment-copy">No this solution doesn't include the same flavours but in different "orders"</span>
<span class="comment-copy">This is only correct if (C1, F1, F1, F1) is valid. I believe itertools.combination is the way to go rather than product. Also, since we're using itertools, itertools.chain can join the 3 cases</span>
<span class="comment-copy">@JoshSmeaton, I just realized that :)  You could "clean" the duplicates with a simple list comprehension, but it's moving away from a simple solution...</span>
