<div class="post-text" itemprop="text">
<p>Let <code>exp = [1,2,3,4,5]</code></p>
<p>If I then execute <code>x in exp</code>, it will give me <code>False</code>. But if I execute :</p>
<pre><code>for x in exp:
    if x==3:
        print('True')
</code></pre>
<p>Then execute <code>x in exp</code>, it returns <code>True</code>. What's happening here? I didn't assign anything to x.  Did I?   I am really confused.</p>
<p>**EDIT:**Sorry if I didn't say this before: <code>x</code> is not defined before.</p>
<h3>Answer</h3>
<p>Thank you everyone. I understand it now. the elements of <code>exp</code> is assigned to <code>x</code> as <code>exp</code> is iterated over. And <code>x in exp</code> equals <code>True</code> in the last line of code because the last element has been assigned to <code>x</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like you stumbled about <code>in</code> being somewhat overloaded in Python.</p>
<ul>
<li>with <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="noreferrer"><code>x in exp</code></a>, you are asking "Is <code>x</code> <strong>in</strong> <code>exp</code>?"</li>
<li>with <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="noreferrer"><code>for x in exp: ...</code></a>, you tell Python "<strong>For</strong> each element <strong>in</strong> <code>exp</code>, call it <code>x</code> and do ..."</li>
</ul>
<p>The latter will assign each of the values in <code>exp</code> to <code>x</code>, one after the other, and execute the body of the loop with that value, so in the first iteration <code>x</code> is assigned <code>1</code>, in the second <code>2</code>, and in the last <code>5</code>. Also, <code>x</code> <em>keeps</em> this value after the loop!</p>
<p>Thus, before the loop, assuming that the variable <code>x</code> is defined but has some other value, <code>x in exp</code> will return <code>False</code>, and after the loop, it returns <code>True</code>, because <code>x</code> is still assigned the last value from <code>exp</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>for x in ...</code> inherently assigns values to <code>x</code>, because <code>x</code> is the loop variable in <a href="https://wiki.python.org/moin/ForLoop" rel="noreferrer">a <code>for</code> loop</a>.</p>
<p>Each iteration of the loop assigns a value into <code>x</code>; Python doesn't create a new variable scope for loops.</p>
<pre><code>for x in (1, 2, 3):
    foo(x)
</code></pre>
<p>is the equivalent of...</p>
<pre><code>x = 1
foo(x)
x = 2
foo(x)
x = 3
foo(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The syntax is similar, but they mean two different things.</p>
<p><code>x in exp</code> is a conditional expression; it searches to see if the value
of <code>x</code> appears in the list <code>exp</code>. If it's there, the expression
evaluates to <code>True</code>, otherwise, <code>False</code>. You can also use <code>not in</code>.</p>
<p><code>for x in exp</code> introduces a loop where <code>x</code> iterates over the elements of
<code>exp</code>. The loop body will be called once for each element, and within
the body, <code>x</code> will be set to each element successively.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's how looping works in Python. '<code>For var in sequence</code>' will assign to <code>var</code> as you iterate through the sequence.</p>
<p>If you were to simply print <code>x</code> for example:</p>
<pre><code>for x in [1, 2, 3, 4, 5]:
    print x
</code></pre>
<p>You would see the following:</p>
<pre><code>1
2
3
4
5
</code></pre>
<p>Perhaps what you were looking for was just the index of the value? If so, there are a couple of things you could do.</p>
<p>To iterate explicitly with the index, use <code>enumerate(sequence)</code> as such:</p>
<pre><code>for index, x in enumerate(mylist):
    if index == 3:
        do_stuff()
</code></pre>
<p>Where the first value (<code>index</code> in this case) will always be the index of the current iteration.</p>
<p>You can also iterate over the length of the object using <code>range(len(sequence))</code> which is sometimes useful if you're potentially modifying the list as you iterate. Here you're actually creating a separate list using <code>range</code>, with length equal to the <code>len</code> of the list. This will <em>not</em> assign from the list you're targeting -- rather it will assign from the list created by <code>range()</code> -- so you'd have to access it using your <code>for x in...</code> as the index of the list.</p>
<pre><code>for x in range(len(mylist)):
    if mylist[x] == 3:
        things_and_stuff()
</code></pre>
<p>As for your second line and point of confusion - 'x in exp' - you will indeed see that <code>x</code> remains assigned after the fact, and so using <code>x in exp</code> will return <code>True</code> because the last assigned value to <code>x</code> is, in fact, in <code>exp</code>.</p>
<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; for x in mylist:
...     print x
... 
1
2
3
&gt;&gt;&gt; x
3
&gt;&gt;&gt; x in mylist
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you run your first loop, a variable <code>x</code> is assigned to each value of the list as you iterate over it.</p>
<p>Let's say you start with <code>x=0</code>.</p>
<p><code>0</code> <strong>is not</strong> in <code>[1,2,3,4,5]</code>, therefore <code>x in exp = False</code>.</p>
<p>However, when you run the loop, you now have a new <code>x</code>. When the loop is complete, <code>x</code> is initialized to the final element in the list, meaning <code>x=5</code>.</p>
<p><code>5</code> <strong>is</strong> in <code>[1,2,3,4,5]</code>, therefore <code>x in exp = True</code>. </p>
</div>
<span class="comment-copy">if you execute <code>x in exp</code> first, it will give you a <code>NameError</code>, not <code>False</code>.</span>
<span class="comment-copy">Nothing is returning anything in this code</span>
<span class="comment-copy">The answer must be: <code>x</code> was bound to a value that wasn't in <code>exp</code> before. You didn't tell us about the state of <code>x</code> before you ran the <code>for</code> loop however.</span>
<span class="comment-copy">For those voting to close: there's a pretty clear question here (imho) regarding whether loops do assignments. I don't think this necessarily needs closing.</span>
<span class="comment-copy">Agreed with Amber. It's not a perfectly-written question (the red herring in the second sentence definitely isn't helping), but there's a real question here. Unless it's a dup, I don't think there's any reason to close it.</span>
<span class="comment-copy">+1, especially with links to the grammar that defines the dual uses of <code>in</code>.</span>
<span class="comment-copy">Nice answer. One minor point to make (which the OP won't even understand, but which might be useful to other readers who find this via search): A list comprehension looks a lot like a <code>for</code> loop (because it is one), but it <i>does</i> create a new variable scope (but only in 3.x—in 2.x, generator expressions create new scopes, other comprehensions don't).</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">"Conditional expression"</a> in Python means <code>eggs if spam else beans</code>, not <code>eggs in spam</code>. (There probably is an official name for the latter besides "in comparison expression", but it's not coming to me off the top of my head.)</span>
<span class="comment-copy">@abarnert "Membership test."</span>
<span class="comment-copy">@AdamSmith: Duh… Thanks for making me feel like an idiot. :)</span>
<span class="comment-copy">Sorry, I meant an expression used in a conditional context, or something. I've always been better at using the stuff than remembering what it's called.</span>
<span class="comment-copy">The last one has an even bigger problem than the ones you mentioned. In <code>[1, 2, 3, 1, 2, 3]</code>, <code>mylist.index(mylist[3])</code> isn't <code>3</code>, it's <code>0</code>. This is the source of hundreds of Stack Overflow and python-list questions…</span>
<span class="comment-copy">Yes, the last one is awful. I hesitated suggesting it, and maybe I'll just remove it altogether if the OP doesn't realize that <code>for x in sequence</code> is assigning in this way.</span>
<span class="comment-copy">In fact, yeah deleted</span>
<span class="comment-copy">Thanks. I now know why <code>x in exp = True</code>.</span>
