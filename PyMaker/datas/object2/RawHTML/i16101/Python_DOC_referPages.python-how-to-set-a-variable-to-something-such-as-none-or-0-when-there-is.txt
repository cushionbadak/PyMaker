<div class="post-text" itemprop="text">
<p>Suppose you have something such as</p>
<pre><code>a = b
</code></pre>
<p>but perhaps b does not exist.</p>
<p>can the value for a automatically be declared as "0" or.. perhaps "None" or something ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on where <code>b</code> comes from, you could do</p>
<pre><code>a = locals().get('b', 0)
</code></pre>
<p>or</p>
<pre><code>a = globals().get('b', 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a try and except clause to catch the NameError of <code>b</code> not existing. See <a href="https://docs.python.org/2/tutorial/errors.html#handling-exceptions" rel="noreferrer">Handling Exceptions</a> in the Python docs.</p>
<pre><code>try:
    a = b
except NameError:
    a = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>a =vars().get('b', None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Solution 1</h2>
<p>Note you can use static code checker that will find this bug. Examples:</p>
<ul>
<li><a href="http://www.pylint.org/" rel="nofollow">http://www.pylint.org/</a> (docs : <a href="http://docs.pylint.org/tutorial.html" rel="nofollow">http://docs.pylint.org/tutorial.html</a>)</li>
<li>Eclipse PyDev</li>
</ul>
<h2>Solution 2</h2>
<p>You can have <strong>null-coalescing operator</strong> in python with:</p>
<pre><code>a = b if b is not None else "default value"
</code></pre>
<p>If your lazy then this can be simplified to </p>
<pre><code>a = b or "some default value"
</code></pre>
<p>Example </p>
<pre><code>42    or "something"    # returns 42
0     or "something"    # returns "something"
None  or "something"    # returns "something"
False or "something"    # returns "something"
""    or "something"    # returns "something"
</code></pre>
<p>Alternative way would be to check if variable exists in context:</p>
<pre><code>if 'b' in locals():
  # local variable b exists.
if 'b' in globals():
  # local variable b exists.
</code></pre>
<p>For example this will result something like:</p>
<pre><code>a = if 'b' in locals() b else 0
a = if 'b' in globals() b else 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this: Calling b, and if there's an error (if b not exist), then b=0.</p>
<pre><code>try:
  b
except:
  b = 0
a = b
</code></pre>
</div>
<span class="comment-copy">i understand the "try" method but "try" method is probably less efficient than using an if b: statement</span>
<span class="comment-copy">but that is too much coding.. i could have just done b = 0 with an if statement</span>
<span class="comment-copy">@Margus why not? This is perfectly valid <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> syntax and is a common coding style within Python.</span>
<span class="comment-copy">@Margus Don't Mindlessly Apply Cargo Cult Rules To Every Situation</span>
<span class="comment-copy">@Ffisegydd Yes, unlike most compiled languages EAFP is perfectly viable in Python. Problem with try-catch is that you NEVER REMOVE them even if you should - in this case you should (You recommend permanent solution to temporary problem). My argument is that if he would use <b>pylint</b> or some IDE (Eclipse) that does static code analysis problem would never happen.</span>
<span class="comment-copy">I think it would be more helpful for the OP and further visitors, when you add some explaination to your intension.</span>
