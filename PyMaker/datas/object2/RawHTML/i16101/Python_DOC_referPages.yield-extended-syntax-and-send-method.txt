<div class="post-text" itemprop="text">
<p>I read about <code>yield</code> extended syntax, so that if I have:</p>
<pre><code>def numgen(N):
  for i in range(N):
    n = yield i
    if n:
      yield n
</code></pre>
<p>I can factor it:</p>
<pre><code>def numgen(N):
  n = yield from range(N)
  if n:
    yield n
</code></pre>
<p>but I have noticed that if I do, after I have coded the second generator:</p>
<pre><code>g = numgen(10)
next(g)
g.send(54)
</code></pre>
<p>I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in gensquare
AttributeError: 'range_iterator' object has no attribute 'send'
</code></pre>
<p>So, how is that? How can I send a value to my <code>numgen</code> generator object?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>range()</code> is not a generator, it doesn't have a <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow"><code>generator.send()</code> method</a>.</p>
<p>This is clearly documented in the <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow"><code>yield</code> expression documentation</a>:</p>
<blockquote>
<p>When <code>yield from &lt;expr&gt;</code> is used, it treats the supplied expression as a subiterator. All values produced by that subiterator are passed directly to the caller of the current generatorâ€™s methods. <strong>Any values passed in with <code>send()</code></strong> and any exceptions passed in with <code>throw()</code> <strong>are passed to the underlying iterator if it has the appropriate methods. If this is not the case, then <code>send()</code> will raise <code>AttributeError</code> or <code>TypeError</code></strong>, while <code>throw()</code> will just raise the passed in exception immediately.</p>
</blockquote>
<p>Emphasis mine.</p>
<p>You are trying to send a value to the <code>range()</code> iterator, but it has no <code>.send()</code> method.</p>
<p><code>range()</code> is <em>just a sequence</em>, not a generator object; you can create multiple iterators for it, you can test if a number is a member of the sequence, ask it for its length, etc.</p>
<p>Note that your 'refactoring' is not the same thing at all; in your original <code>n</code> is assigned anything you send in through <code>generator.send()</code>; in your second version <code>yield from</code> returns the <code>value</code> attribute of the <code>StopIteration</code> exception raised when the sub-iterator ends. If the sub-iterator is a generator itself, you can set that value either by manually raising <code>StopIteration(value)</code> or by using a <code>return</code> statement. <code>yield from</code> cannot return the value sent in with <code>generator.send()</code> because such values would be passed on to the sub-generator instead.</p>
<p>Again, from the documentation:</p>
<blockquote>
<p>When the underlying iterator is complete, the value attribute of the raised <code>StopIteration</code> instance becomes the value of the yield expression. It can be either set explicitly when raising <code>StopIteration</code>, or automatically when the sub-iterator is a generator (by returning a value from the sub-generator).</p>
</blockquote>
<p>So your first version is set up to receive <code>N</code> messages, yielding both the <code>i</code> <code>for</code> target and any sent value is true-thy, while the other passes on any sent messages to a degelated-to generator, then would yield just the <code>StopIteration</code> value if it is true-thy <em>once</em>, after the delegated-to iterator is done.</p>
</div>
<span class="comment-copy">I don't understand, I just tried it in python3.4 and it works, without parenthesis</span>
<span class="comment-copy">@antox: ah, yes, <code>yield from</code> calls <code>iter()</code> on the object, my mistake.</span>
<span class="comment-copy">'[...] while throw() will just raise the passed in exception immediately.' will the exception be thrown in the generator obejct? on in the place where the <code>throw()</code> was called?</span>
<span class="comment-copy">@antox: <code>.throw()</code> raises the exception where the generator is paused. In this case, at the <code>yield from</code> line.</span>
<span class="comment-copy">"Any values passed in with send() [...] are passed to the underlying iterator if it has the appropriate methods." which methods should an iterator define to get those values?</span>
