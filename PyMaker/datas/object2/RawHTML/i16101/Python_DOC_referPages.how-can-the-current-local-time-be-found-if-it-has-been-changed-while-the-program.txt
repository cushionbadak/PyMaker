<div class="post-text" itemprop="text">
<p>I am writing a program that should log the offset of the machine's local time from UTC at regular intervals, if it has changed.</p>
<p>I am aware that it is possible to find the offset at the time the program was started. This can be done by </p>
<pre><code>str(datetime.datetime.now()-datetime.datetime.utcnow())
</code></pre>
<p>or</p>
<pre><code>str(datetime.datetime.now().replace(tzinfo=timezone.utc).astimezone())
</code></pre>
<p>or other methods.</p>
<p>The problem is that the time returned by datetime.datetime.now() seems to always be in the timezone at which datetime was first imported, rather than the current timezone. That is, changing the local time on my machine is not reflected by the same change in the time given by datetime.datetime.now() .</p>
<p>As an example, </p>
<pre><code>import datetime
datetime.datetime.now() 
</code></pre>
<p>reports '2014-09-11 12:35:45.415104'.</p>
<p>I now change my timezone to UTC+4 on the machine.</p>
<pre><code>datetime.datetime.now() 
</code></pre>
<p>still reports '2014-09-11 12:35:50.407779'.</p>
<p>How can I obtain the current time on my machine using python (preferably without external libraries and in a platform-agnostic manner)?</p>
<p>I am using Python 3.4.1 on Windows 8.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>time.tzname</code> (<code>import time</code> first of course).</p>
<p>If that doesn't work, you will need to call this Windows API function: <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421(v=vs.85).aspx" rel="nofollow">GetTimeZoneInformation()</a>.  It's exposed by <a href="http://sourceforge.net/projects/pywin32/" rel="nofollow">Python for Windows Extensions</a>, or perhaps you can invoke it via <code>ctypes</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The problem is that the time returned by datetime.datetime.now() seems
  to always be in the timezone at which datetime was first imported,
  rather than the current timezone.</p>
</blockquote>
<p>Technically, the time is undefined since <code>tzinfo</code> is <code>None</code>. Or as the python documentation calls it, "naive":</p>
<blockquote>
<p>An object of type time or datetime may be naive or aware. A datetime
  object d is aware if d.tzinfo is not None and d.tzinfo.utcoffset(d)
  does not return None. If d.tzinfo is None, or if d.tzinfo is not None
  but d.tzinfo.utcoffset(d) returns None, d is naive.</p>
</blockquote>
<p>Naturally, if you want <code>now</code> to reflect a timezone, you need to pass a timezone to it.</p>
<p>The local timezone information can be retrieved from <code>time.localtime</code>, <code>time.timezone</code>, and <code>time.altzone</code>. <code>altzone</code> is the Daylight Saving version of the local time zone, and you can determine whether this is currently being used when the <code>tm_isdst</code> attribute of the local time is <code>1</code>:</p>
<pre><code>import time
local_timezone = time.altzone if time.localtime().tm_isdst == 1 else time.timezone
</code></pre>
<p>The value returned is the UTC offset in seconds. So, to get a current <code>datetime</code>, you can build a <code>timedelta</code> from this and subtract it from <code>utcnow</code>:</p>
<pre><code>import datetime
utc_offset = datetime.timedelta(seconds=local_timezone)
now = datetime.utcnow() - utc_offset
</code></pre>
<p>However, for your purposes, it seems all you need to do is monitor the result of <code>local_timezone</code> above.</p>
<p><strong>update</strong>: Apparently, on Windows, python still does not reflect timezone changes during execution, even with <code>localtime()</code>. On Unix you can call <a href="https://docs.python.org/3/library/time.html#time.tzset" rel="nofollow noreferrer">tzset</a> to ensure it is up to date (although it usually happens automatically), but this function isn't available on Windows. See <a href="https://stackoverflow.com/questions/4360981/make-python-respond-to-windows-timezone-changes">this question</a> for more.</p>
</div>
<span class="comment-copy">Always work with UTC, and only convert to a local timezone for display purposes.</span>
<span class="comment-copy">I am working in UTC as far as possible. The interest I have in local time is to ensure that changes to local timezone are noted down in the log file. Logging this is a necessary feature for the program.</span>
<span class="comment-copy">After consideration, I have flagged this question as a duplicate of the question linked by nmclean (<a href="http://stackoverflow.com/questions/4360981/make-python-respond-to-windows-timezone-changes">Make Python respond to Windows timezone changes</a>).</span>
<span class="comment-copy">Thanks for the suggestions. Unfortunately, time.tztime returns the timezone when time was imported. Changing the timezone on the machine causes no change in the value reported by time.tztime.  I forgot to mention that the program should be platform-agnostic. I have edited this into the question. As a last resort, I could look into finding an API call for each major operating system that does what I'm looking for, but this would be a complicated solution.</span>
<span class="comment-copy">There is no cross-platform solution unless you want to try spawning a new process each time to check it.  Time to get with the per-platform stuff!  Should be just one way for all Windows versions, one for Macs, and not sure about *nix...maybe the process-spawning method would be a reasonable fallback for platforms where no better method is implemented.</span>
<span class="comment-copy">Thanks for your suggestion. As per your update, local_timezone doesn't change when the time zone is changed. The linked question, however, was very helpful.</span>
