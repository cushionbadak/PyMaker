<div class="post-text" itemprop="text">
<p>I know dictionaries themselves in Python do not have order. However, I'm rather curious if when you call <code>str()</code> on a dictionary if it is always in the same order. It appears to be sorted (by key), no matter which order I add items:</p>
<pre><code>d={}
d[5]=5
d[1]=1
d["z"]="z"
d["a"]="a"
s=str(d)
print(s)
</code></pre>
<p>I know a lot of people will be tempted to say it's not sorted, but please try to prove me wrong by getting unsorted results.</p>
<p>So, are dictionaries converted to strings sorted, by default, in Python 3.4?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Note:</strong> Python 3.6 introduces a new, <a href="https://docs.python.org/3/whatsnew/3.6.html#new-dict-implementation" rel="nofollow noreferrer">order-preserving implementation</a> of <code>dict</code>, which makes the following obsolete from 3.6 onwards.</p>
</blockquote>
<hr/>
<p>Here are three iterations of your example in three different Python 3.4 interpreter sessions:</p>
<pre><code>Python 3.4.1 (default, Aug  8 2014, 15:05:42) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; d={}
&gt;&gt;&gt; d[5]=5
&gt;&gt;&gt; d[1]=1
&gt;&gt;&gt; d["z"]="z"
&gt;&gt;&gt; d["a"]="a"
&gt;&gt;&gt; s=str(d)
&gt;&gt;&gt; print(s)
{1: 1, 'z': 'z', 'a': 'a', 5: 5}
</code></pre>
<pre><code>Python 3.4.1 (default, Aug  8 2014, 15:05:42) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; d={}
&gt;&gt;&gt; d[5]=5
&gt;&gt;&gt; d[1]=1
&gt;&gt;&gt; d["z"]="z"
&gt;&gt;&gt; d["a"]="a"
&gt;&gt;&gt; s=str(d)
&gt;&gt;&gt; print(s)
{1: 1, 'a': 'a', 5: 5, 'z': 'z'}
</code></pre>
<pre><code>Python 3.4.1 (default, Aug  8 2014, 15:05:42) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; d={}
&gt;&gt;&gt; d[5]=5
&gt;&gt;&gt; d[1]=1
&gt;&gt;&gt; d["z"]="z"
&gt;&gt;&gt; d["a"]="a"
&gt;&gt;&gt; s=str(d)
&gt;&gt;&gt; print(s)
{1: 1, 5: 5, 'z': 'z', 'a': 'a'}
</code></pre>
<p>So, no, the string representation is not sorted, or even in the same order across invocations of the interpreter. In versions of Python up to and including 3.2, the order of dictionaries (and their string representations) was arbitrary but consistent - however, this changed in Python 3.3 as a result of a <a href="https://docs.python.org/3.3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">security fix</a>:</p>
<blockquote>
<p>By default, the <code>__hash__()</code> values of str, bytes and datetime objects are “salted” with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python.</p>
<p>This is intended to provide protection against a denial-of-service caused by carefully-chosen inputs that exploit the worst case performance of a dict insertion, O(n^2) complexity. See <a href="http://www.ocert.org/advisories/ocert-2011-003.html" rel="nofollow noreferrer">http://www.ocert.org/advisories/ocert-2011-003.html</a> for details.</p>
<p>Changing hash values affects the iteration order of dicts, sets and other mappings. Python has never made guarantees about this ordering (and it typically varies between 32-bit and 64-bit builds).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>No, they are not.</p>
<pre><code>import string

d = {}
for ch in string.ascii_lowercase:
    d[ch * 20] = ch
print(d)  # OR print(str(d))
</code></pre>
<p>output (will change every time you run because of hash randomization):</p>
<pre><code>{'jjjjjjjjjjjjjjjjjjjj': 'j', 'ssssssssssssssssssss': 's', 'mmmmmmmmmmmmmmmmmmmm': ...
</code></pre>
</div>
<span class="comment-copy">Interesting. However, when I do the code listed here, <a href="http://pastebin.com/Rijtr3Mx" rel="nofollow noreferrer">pastebin.com/Rijtr3Mx</a> I get the same result every time, although it's not sorted. Do you get the same result I do there with the same code?</span>
<span class="comment-copy">Nevermind the question, it turns out it stays the same until I close the interpreter and open it again.</span>
