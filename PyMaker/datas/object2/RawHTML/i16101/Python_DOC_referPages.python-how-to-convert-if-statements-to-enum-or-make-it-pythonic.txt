<div class="post-text" itemprop="text">
<p>I don't quite know how to word this question.  So here goes. I have this code which looks terrible.  <code>recommendation</code> only takes 5 cases.</p>
<pre><code>if avg_recommendation=='BUY':
    recommendation=5
if avg_recommendation=='OVERWEIGHT':
    recommendation=4
if avg_recommendation=='HOLD':
    recommendation=3
if avg_recommendation=='UNDERWEIGHT':
    recommendation=2
if avg_recommendation=='SELL':
    recommendation=1
</code></pre>
<p>And I want to make it pythonic.  How do I do it?  I've read about enum and it looks like it might be my solution.  But I am open to any solution that is elegant to look at. I'm still using python2.7 
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a dict of key, values. Where key is the incoming state, and the value is the outgoing state. <strong>This is a highly Pythonic pattern</strong> and one you will likely reuse again and again. In many cases you will want to dispatch on the input state, where you should put functions as values in the dict.</p>
<pre><code>recs = {
  'SELL':        1,
  'UNDERWEIGHT': 2,
  'HOLD':        3,
  'OVERWEIGHT':  4,
  'BUY':         5,
}

# this will fail correctly with a KeyError for non-expected states.
recommendation = recs[avg_recommendation]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a dict is a reasonable way to make this Pythonic—but so is using an enum.</p>
<p>While the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow"><code>enum</code></a> module wasn't built-in to the stdlib until Python 3.4, you can install <a href="https://pypi.python.org/pypi/enum34" rel="nofollow"><code>enum34</code></a>, a backport of that module that works on every version back to Python 2.4, or any of <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=enum&amp;submit=search" rel="nofollow">dozens of other enum packages</a> if you like them better.</p>
<p>With <code>enum34</code>:</p>
<pre><code>&gt;&gt;&gt; import enum
&gt;&gt;&gt; class Recommendation(enum.IntEnum):
...     BUY = 5
...     OVERWEIGHT = 4
...     HOLD = 3
...     UNDERWEIGHT = 2
...     SELL = 1
&gt;&gt;&gt; Recommendation.BUY
&lt;Recommendation.BUY: 5&gt;
&gt;&gt;&gt; Recommendation.BUY.value
5
&gt;&gt;&gt; Recommendation(5)
&lt;Recommendation.BUY: 5&gt;
&gt;&gt;&gt; recs = [Recommendation.BUY, Recommendation.HOLD, Recommendation.BUY]
&gt;&gt;&gt; avg_rec = sum(recs)//len(rec)
&gt;&gt;&gt; Recommendation(rec)
&lt;Recommendation.OVERWEIGHT: 4&gt;
</code></pre>
<p>(I assumed you wanted to do arithmetic on these things, given that you're using a variable named <code>avg_recommendation</code>. If not, you probably want to use <code>Enum</code>, not <code>IntEnum</code>.)</p>
<p>One advantage of this over dicts is the explicit <code>repr</code>, which makes things a lot easier to debug: you can see that you have a <code>&lt;Recommendation.OVERWEIGHT: 4&gt;</code>, not a <code>4</code> that may or may not be a recommendation.</p>
<p>Another is that you don't need to convert back and forth between the names and the values, which can be a major source of errors—especially in Python 2.x, where <code>"SELL" == 1</code> is not an error, it's just false; <code>Recommendation.SELL == 1</code> is true if you're using <code>IntEnum</code>, or an exception if you're using <code>Enum</code>, it never silently does the wrong thing.</p>
<hr/>
<p>Meanwhile, what if you have a string, like <code>'HOLD'</code>, and you want to get a <code>Recommendation.HOLD</code> out of that? Unfortunately, that's one of the features that was intentionally left out of the stdlib <code>enum</code> module to keep it simple.* (Read <a href="http://legacy.python.org/dev/peps/pep-0435/" rel="nofollow">PEP 435</a> for a full discussion of all of the possible features that were left out and why.) So, if you try it, you'll get an error:</p>
<pre><code>&gt;&gt;&gt; Recommendation('HOLD')
ValueError: HOLD is not a valid Recommendation
</code></pre>
<p>But you could use one of the many other enum modules on PyPI. In particular, <a href="https://pypi.python.org/pypi/flufl.enum/4.0.1" rel="nofollow"><code>flufl.enum</code></a>** works exactly like the stdlib in all the examples shown above, but also has a few extra features. So, if you <code>pip install flufl.enum</code>, then change the <code>import enum</code> to <code>from flufl import enum</code>, all of the above will work, and so will this:</p>
<pre><code>&gt;&gt;&gt; Recommendation('HOLD')
&lt;EnumValue: Recommendation.HOLD [value=3]&gt;
</code></pre>
<hr/>
<p><sub>* If you <em>only</em> wanted string values, and not also numbers, then this would by easy, but obviously that won't work in your case.</sub></p>
<p><sub>** <code>flufl.enum</code> was one of the major influences to the stdlib module.</sub></p>
</div>
<span class="comment-copy">I see this question is tagged as python-2.7, but FYI, <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">python3.4 has enums</a></span>
<span class="comment-copy">You can also use 3.4 enums in Python 2.7 with the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code></a> package. Or <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=enum&amp;submit=search" rel="nofollow noreferrer">dozens of other enum packages</a>.</span>
<span class="comment-copy">Can you add more color to your answer?  how do I assign <code>recommendation</code> with a dict?  I'm somewhat new to python.</span>
<span class="comment-copy">this will fail correctly with a KeyError for non-expected states? So the program will crash and you don't think it is worth mentioning a way around it?</span>
<span class="comment-copy">Padraic, this is a good response, and they could simply use <code>.get()</code> to get around the KeyError issue. Maybe the program should fail if there is a response that is not encoded. Be nice.</span>
<span class="comment-copy">@beroe, yes they could if they knew about it</span>
<span class="comment-copy">@PadraicCunningham, you guessed right.  You probably knew that I was a novice from the way I asked the question and that I didn't know about <code>.get()</code>. Although @AliAfshar answer is very nice. I ended up using your answer.  Too bad you've removed it, I think your answer along with @AliAfshar and @Abarnert would have helped others who are interested in all the different solution options.</span>
<span class="comment-copy">I'd <code>pip install enum34</code>. But python2.7 recognize <code>import enum</code> because <code>import enum34</code> returned no module named enum34.  Also, after I was able to import enum, I received error with <code>print Recommendation(avg_recommendation)</code> The error is "ValueError: HOLD is not a valid Recommendation". How do I use class Recommendation?  I'm new to python.</span>
<span class="comment-copy">@vt2424253: Ah, thanks; I forgot that <code>enum34</code> installs as <code>enum</code> if you're on 3.3 or earlier (which makes it a lot more useful). I'll edit the answer to show that. For your second part, what exactly is in <code>avg_recommendation</code>? If it's a string, you probably want a string-valued <code>Enum</code>, not an int-valued <code>Enum</code> or <code>IntEnum</code>. (I may have made some unwarranted assumptions about your code, misled by the <code>avg</code> variable name…)</span>
<span class="comment-copy">@vt2424253: Actually, rereading your question, scratch the second half of my comment, and read the edited answer. You can't do what you want cleanly with the stdlib/<code>enum34</code> version, but there are alternatives that make it easy if this is what you really need.</span>
<span class="comment-copy">@vt2424253:  <code>Recommendation['HOLD']</code> works just fine (notice the square brackets, which lookup by name, not the round brackes which look up by value).</span>
