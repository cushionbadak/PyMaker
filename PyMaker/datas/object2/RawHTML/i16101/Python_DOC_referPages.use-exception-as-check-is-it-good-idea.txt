<div class="post-text" itemprop="text">
<p>I have code:</p>
<pre><code>    print('Adding user %s...' % user)
    # my own class with method
    sysacts.useradd()

    # check if user exist after been added
    try:
            pwd.getpwnam(user)
            print('Done.')
    except KeyError as e:
            print('ERROR! %s.\nExit.' %e)
            sys.exit(1)
</code></pre>
<p>But - I don't like, that user adds without checks.
So - I think about remake it with next:</p>
<pre><code>    print('Adding user %s...' % user)

    # check if new user exist before add it
    try:
            pwd.getpwnam(user)
            print('User already present, skipping.')

    # if no user - will return KeyError: 'getpwnam(): name not found: Username'
    except KeyError as e:
            sysacts.useradd()
            print('Done.')
</code></pre>
<p>So - is it normal, to use <code>KeyError</code> as such check? 
KeyError can mean and other errors too.</p>
<p>If no - what best way here to check user?</p>
<p>For example - in <code>create directory</code> block - I made:</p>
<pre><code>    # create site files directory
    dir = virt_hosts_dir + 'vhosts/' + user + '/' + domain + '/'
    print('\nCreating new directory %s' % dir)
    # if no directory - run mkdir
    if not os.path.isdir(dir):
            try:
                    sysacts.mkdir(dir)
                    print('Done.')
            except OSError as e:
                    print('ERROR: %s' %e)
                    sys.exit(2)
    # otherwise - skip
    else:
            print('Directory %s already present, skipping.' % dir)
</code></pre>
<p>P.S. CentOS, Python 2.6</p>
</div>
<div class="post-text" itemprop="text">
<p>The general rule I operate by is:</p>
<p>Do you expect it to pass?</p>
<ul>
<li>If I expect an action will be successful most of the time, I use exceptions.</li>
<li>If I expect an action to fail most of the time, I'll intercept it with an if statement</li>
</ul>
<p>If there are things going on that could potentially break other actions because of a failure (or cause a system compromise), I always do the validation, verification, and sanity checking first.</p>
<p>But a simple one sentence answer: Using exceptions is very Pythonic, and is not at all frowned upon.  It may actually help the code read better, and as you mention there could be other exception types, trap them separately:</p>
<pre><code>try:
    …
except KeyError:
    …
except TypeError:
    …
except Exception:
    …
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions are not for checking.it should be used as last option if you are unable to deal with some run time issue. Most probably to catch any unexpected but foreseen issues while running. ex- db error, i/o device error. so we don't have any other option to deal with the abnormal situation except going in to a try catch.</p>
<p>But in your case you have to go with something like <strong>if else</strong> to handle comparisons and do selections.</p>
<p>Keep in mind, You have to maintain the code quality and performance in your coding.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python – unlike most of the rest of the world – people actually <em>encourage</em> this use of exceptions.</p>
<p>They call it the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP</a> principle, quoting American computer scientist and United States Navy rear admiral <a href="https://en.wikipedia.org/wiki/Grace_Hopper" rel="nofollow">Grace Hopper</a> who allegedly <a href="https://en.wikiquote.org/wiki/Grace_Hopper" rel="nofollow">said</a>, it's sometimes <em><strong>e</strong>asier to <strong>a</strong>sk <strong>f</strong>orgiveness than to get <strong>p</strong>ermission</em>.</p>
<p>Exceptions are implemented efficiently in Python so there are used a lot.  For example, every <code>for</code> loop in Python exits by internally throwing a <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="nofollow"><code>StopIteration</code></a> exception.</p>
</div>
<span class="comment-copy">The Python world seems acceptant of try/except if the try is expected to succeed in majority cases.  It's not so much a last resort as it is in other languages.</span>
<span class="comment-copy">Performance wise, a try/except that is rarely triggered will generally be more efficient than an if/else loop that will always be triggered regardless.</span>
<span class="comment-copy">Agreed with both of you. - Karl M.W  &amp;  iChar   There are some other logical differences also. A if else will only check for the given condition, while a try catch will work on all sort errors that are raised. So for regular checks its better to go with if else and as iChar said, for rare and unexpected and all type of errors a try/catch would be the ideal.   ----------------------------------------- some funny option- you can go with both options together, if else surrounded by try catch. so the if else will handle the check and if something went wrong the try catch will look after it.. :D</span>
