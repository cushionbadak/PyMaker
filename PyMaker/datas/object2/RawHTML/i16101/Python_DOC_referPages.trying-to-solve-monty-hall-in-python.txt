<div class="post-text" itemprop="text">
<p>I'm trying to understand this solution of the Monty Hall problem, I understand most of the code, but am stuck on two pieces. </p>
<p>Below is the code, but specifically I'm stuck on these two parts</p>
<pre><code>result[bad] = np.random.randint(0,3, bad.sum())
</code></pre>
<p>and the entire <code>switch_guess</code> function.</p>
<p>If anyone could explain in plain English for me that would be awesome.</p>
<pre><code>#Simulates picking a prize door
def simulate_prizedoor(nsim):
    return np.random.randint(0,3,(nsim))

#Simulates the doors guessed
def simulate_guesses(nsim):
    return np.zeros(nsim, dtype=np.int)

#Simulates the "game host" showing whats behind a door
def goat_door(prize_doors, guesses):
    result = np.random.randint(0,3, prize_doors.size)
    while True:
        bad = (result == prize_doors) | (result == guesses)
        if not bad.any():
            return result
    result[bad] = np.random.randint(0,3, bad.sum())

#Used to change your guess
def switch_guess(guesses, goat_doors):
    result = np.zeros(guesses.size)
    switch = {(0, 1): 2, (0, 2): 1, (1, 0): 2, (1, 2): 1, (2, 0): 1, (2, 1): 0}
    for i in [0,1,2]:
        #print "i = ", i
        for j in [0,1,2]:
            #print "j = ", j
            mask = (guesses == i) &amp; (goat_doors == j)
            #print "mask = ", mask
            if not mask.any():
                continue
            result = np.where(mask, np.ones_like(result) * switch[(i, j)], result)
    return result

#Calculates the win percentage
def win_percentage(guesses, prizedoors):
    return 100 * (guesses == prizedoors).mean()

#The code to pull everything together
nsim = 10000

#keep guesses
print "Win percentage when keeping original door"
print win_percentage(simulate_prizedoor(nsim), simulate_guesses(nsim))

#switch
pd = simulate_prizedoor(nsim)
guess = simulate_guesses(nsim)
goats = goat_door(pd, guess)
guess = switch_guess(guess, goats)
print "Win percentage when switching doors"
print win_percentage(pd, guess)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>… specifically I'm stuck on these two parts</p>
</blockquote>
<pre><code>result[bad] = np.random.randint(0,3, bad.sum())
</code></pre>
<p>Let's break this down into pieces. It may help to reduce that <code>10000</code> to something small, like <code>5</code>, so you can print out the values (either with <code>print</code> calls, or in the debugger) and see what's going on.</p>
<p>When we start this function, <code>prize_doors</code> is going to have 5 random values from <code>0</code> to <code>2</code>, like <code>2 2 0 1 2</code>, and <code>guesses</code> will have 5 values, all 0, like <code>0 0 0 0 0</code>. <code>result</code> will therefore start off with 5 random values from 0 to 2, like <code>0 2 2 0 1</code>.</p>
<p>Each first time through the loop, <code>bad</code> will be a list of 5 <code>bool</code> values, which are each <code>True</code> if the corresponding value in <code>result</code> matches the corresponding value in either <code>prize_doors</code> or <code>guesses</code>. So, in this example, <code>True True False True False</code>, because guess #1 matches <code>prize_doors</code>, and guesses #0 and #3 match <code>goats</code>.</p>
<p>Unfortunately, we're just going to go around that loop forever, because there's nothing inside the loop that modifies <code>result</code>, and therefore <code>bad</code> is going to be the same forever, and doing the same check forever is always going to return the same values.</p>
<hr/>
<p>But if you indent that <code>result[bad] = …</code> line so it's inside the loop, that changes everything. So, let's assume that's what you were supposed to do, and you just copied it wrong.</p>
<p>When treated as numbers, <code>True</code> and <code>False</code> have values <code>1</code> and <code>0</code>, respectively. So, <code>bad.sum()</code> is a count of how many matches there were in <code>bad</code>—in this case, <code>3</code>.</p>
<p>So, <code>np.random.randint(0, 3, bad.sum())</code> picks 3 random values from <code>0</code> to <code>2</code>, let's say <code>1 0 1</code>.</p>
<p>Now, <code>result[bad]</code> selects all of the elements of <code>result</code> for which the corresponding value in <code>bad</code> is True, so in this example it's <code>result[0]</code>, <code>result[1]</code>, and <code>result[3]</code>.</p>
<p>So we end up assigning that <code>1 0 1</code> to those three selected locations, so <code>result</code> is now <code>1 0 2 1 1</code>.</p>
<p>So, next time through the loop, <code>bad</code> is now <code>True False False False False</code>. We've still got at least one <code>True</code> value, so we run that <code>result[bad] =</code> line again. This time, <code>bad.sum()</code> is <code>1</code>, so we pick 1 random value, let's say <code>0</code>, and we then assign that 1 value to <code>result[0]</code>, so <code>result</code> is now <code>0 0 2 1 1</code>.</p>
<p>The next time through, <code>bad</code> is now <code>False False False False False</code>, so <code>bad.any()</code> is <code>False</code>, so we're done.</p>
<p>In other words, each time through, we take all the values that don't match either the prize door or the goat door, and pick a new door for them, until finally there are no such values.</p>
</div>
<div class="post-text" itemprop="text">
<p>It also confused me, until 5 mins ago when I finally figured it out.
Since the first question has been solved, I will only talk about the second one.</p>
<p>The intuition goes like this : given a sequence of (guesses, goatdoors),in the (i,j) loop, there are always some simulation (e.g., simulation[0] and simulation[5]) that 'hit' by the (i,j), that is the say, the 0th and 5th simulation have guess i and goatdoor j. </p>
<p>Variable <code>mask</code> record 0 and 5 in this example. Then result in 0th and 5th can be decided, because in these simulation, the only possible door to switch to is determined by i and j. So <code>np.where</code> refreshes result in these simulation, leave other simulations unchanged.</p>
<p>Intuition is above. You need to know how <code>np.where</code> work if you want to know what I'm talking about. Good luck.</p>
</div>
<span class="comment-copy">What do you not understand about that first line? Do you not know how to find the docs for <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html" rel="nofollow noreferrer"><code>np.random.randint</code></a>, not understand something in the docs, not understand why you want <code>bad.sum()</code> values, not understand what <code>result[bad]</code> selects, or something different?</span>
<span class="comment-copy">Meanwhile, as far as I can tell, this code doesn't actually work—it spins forever in that <code>goat_door</code> function. That implies that if you've copied this out of a tutorial, either you've copied it wrong, or it's a bad tutorial. While you might learn something by trying to debug this code, that's probably not a good thing to try if you're not even at a point where you can understand working code…</span>
<span class="comment-copy">It was specifically the bad.sum() and the result[bad] portion of the code. And you were correct, I miscopied that line, it should of been indented.</span>
<span class="comment-copy">Thanks! As a result of this question I decided to finally pick up <code>numpy</code> after months of "Well what would I actually use this for?" and was having trouble deciphering it as well :)</span>
<span class="comment-copy">With 5 minutes of google it is. I knew the main use of numpy is to work with large datasets that would otherwise take huge amounts of time to work with in pure python (compare <code>result[bad]</code> with <code>[el for i, el in enumerate(result) if bad[i]]</code> or even <code>[_result for _result,_bad in zip(result,bad) if _bad]</code>)</span>
<span class="comment-copy">@AdamSmith: OK, I was just worried that it may not be obvious that the code is effectively transposing time into an extra space dimension, by turning thousands of trials over a single value apiece into a single trial over thousands of values in an array. Of course you can do the same thing with lists and a chain of list comprehensions (or, maybe better, generator expressions), and, as you imply, that shows exactly why numpy is attractive. So now I just have to hope that you're not exceptionally clever, and everyone else will get it as easily as you. :)</span>
<span class="comment-copy">I, too, hope that I'm not exceptionally clever! Err...</span>
<span class="comment-copy">@John: If you haven't gone through the [official tutorial](docs.python.org/3/tutorial/) or some similar third-party tutorial, you really should. It doesn't take that long, and it will teach you all the core stuff that you should have. Jumping right into complicated numpy programming without knowing the basics… not that you can't do it if you're smart enough (and it seems like you are), just that it'll ultimately be harder and take longer that way.</span>
