<div class="post-text" itemprop="text">
<p>In python 3.4, I want to be able to do a very simple dispatch table for testing purposes.  The idea is to have a dictionary with the key being a string of the name of the function to be tested and the data item being the name of the test function.  For example:</p>
<pre><code>myTestList = (
    "myDrawFromTo",
    "myDrawLineDir"
)

myTestDict = {
    "myDrawFromTo": test_myDrawFromTo,
    "myDrawLineDir": test_myDrawLineDir
}

for myTest in myTestList:
    result = myTestDict[myTest]()
</code></pre>
<p>The idea is that I have a list of function names someplace.  In this example, I manually create a dictionary that maps those names to the names of test functions.  The test function names are a simple extension of the function name.  I'd like to compute the entire dictionary from the list of function names (here it is "myTestList").</p>
<p>Alternately, if I can do the same thing without the dictionary, that'd be fine too.  I tried just building a new string from the entries in myTestList and then using local() to set up the call, but didn't have any luck.  The dictionary idea came from docs.python.org/3/</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two parts to the problem.</p>
<p>The easy part is just prefixing <code>'text_'</code> onto each string:</p>
<pre><code>tests = {test: 'test_'+test for test in myTestDict}
</code></pre>
<p>The harder part is actually looking up the functions by name. That kind of thing is <em>usually</em> a bad idea, but you've hit on one of the cases (generating tests) where it often makes sense. You can do this by looking them up in <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow">your module's global dictionary</a>, like this:</p>
<pre><code>tests = {test: globals()['test_'+test] for test in myTestList}
</code></pre>
<hr/>
<p>There are variations on the same idea if the tests live somewhere other than the module's global scope. For example, it might be a good idea to make them all methods of a class, in which case you'd do:</p>
<pre><code>tester = TestClass()
tests = {test: getattr(tester, 'test_'+test) for test in myTestList}
</code></pre>
<p>(Although more likely that code would be inside <code>TestClass</code>, so it would be using <code>self</code> rather than <code>tester</code>.)</p>
<hr/>
<p>If you don't actually need the dict, of course, you can change the comprehension to an explicit <code>for</code> statement:</p>
<pre><code>for test in myTestList:
    globals()['test_'+test]()
</code></pre>
<hr/>
<p>One more thing: Before reinventing the wheel, have you looked at the testing frameworks <a href="https://docs.python.org/3/library/development.html" rel="nofollow">built into the stdlib</a>, or <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=test&amp;submit=search" rel="nofollow">available on PyPI</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Abarnert's answer seems to be useful but to answer your original question of how to call all test functions for a list of function names:</p>
<pre class="lang-py prettyprint-override"><code>def test_f():
    print("testing f...")

def test_g():
    print("testing g...")

myTestList = ['f', 'g']

for funcname in myTestList:
    eval('test_' + funcname + '()')
</code></pre>
</div>
<span class="comment-copy">Would making a class of your functions work for you?</span>
<span class="comment-copy">@crclayton: That's a good idea… but it doesn't really help solve the problem.</span>
<span class="comment-copy">@abamert: thank you, I think that I can make that work.  I'm actually teaching an undergraduate CS service course for primarily non-CS students (but definitely students with NO programming experience) and the suggestion has been made that we use the turtle module.  I'd like the students to build simple, but meaningful, functions and I'd like to stress writing tests at the same time.  This would be a very simple way of introducing very simple test ideas without having to dive in to a bunch of other topics.  Only about 30% of the students usually go on to enter the CS program.</span>
<span class="comment-copy">@PDXMark: I think that makes using a unit testing framework even more attractive, because then they don't have to learn about things like <code>globals</code> or <code>getattr</code> (or, worse, <code>eval</code>). They just define tests, and they magically run. A good framework will also make it easier to write tests that they might otherwise not know how to write (or might just not want to spend the time to write), like verifying that a function raises an exception, or printing out how the actual results different from the expected results.</span>
<span class="comment-copy">5gon12eder: works perfect.  That will probably be easier for my audience.</span>
<span class="comment-copy">If you don't need the dict for anything, it makes sense tojust loop over the functions explicitly like this… but using <code>eval</code> instead of <code>globals</code> is a bad idea.</span>
