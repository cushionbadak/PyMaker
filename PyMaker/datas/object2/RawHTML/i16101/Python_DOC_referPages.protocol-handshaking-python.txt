<div class="post-text" itemprop="text">
<p>For my A level computing project for year 13 im writing an email client, I need to Model how pythons SMTP protocol works and show protocol handshaking. What I want to know is that when I log into gmails mail server to send an email using smtp is there a way to print out what the line of code does. </p>
<p>So I would want to show exactly what is going on when the line is executed. </p>
<pre><code>import smtplib
server = smtplib.SMTP('smtp.gmail.com', 587)
server.login("youremailusername", "password")
msg = "\nHello!" # The /n separates the message from the headers
server.sendmail("you@gmail.com", "target@example.com", msg)
</code></pre>
<p>Cheers guys</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that by "what the line of code does" you mean "what protocol messages get sent to and received from the server", <a href="https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.set_debuglevel" rel="nofollow"><code>smtplib.SMTP.set_debuglevel(level)</code></a>:</p>
<blockquote>
<p>Set the debug output level. A true value for level results in debug messages for connection and for all messages sent to and received from the server.</p>
</blockquote>
<p>If by "what the line of code does" you want to know the Python code that's being executed, you can step into the function call in the debugger. Or just read the source. Like many modules in the stdlib, <code>smtplib</code> is designed to be useful as sample code as well as a practical module, so at the top of the docs, there's a link to <a href="http://hg.python.org/cpython/file/3.4/Lib/smtplib.py" rel="nofollow"><code>smtplib.py</code></a>.</p>
<hr/>
<blockquote>
<p>Is there a way I can write that output to a tkinter window or file? </p>
</blockquote>
<p>If you look at the source linked above, you can see that it just uses <code>print</code> calls for its debug logging. So, this gives you a few options:</p>
<ul>
<li>Fork <code>smtplib</code> and replace those <code>print</code> calls with something better.</li>
<li>Monkeypatch <code>smtplib</code> to give it a <code>print</code> function that shadows the global one. (This only works in Python 3.x; in 2.x, <code>print</code> isn't a function.)</li>
<li>Open a text file, and just assign <code>sys.stderr = my_text_file</code>. (This only works for files, not tkinter. And it also catches <em>all</em> stderr, not just the logging from <code>smtplib</code>.)</li>
<li>Create a file-like object that does whatever you want in its <code>write</code> method, and assign <code>sys.stderr</code> to that. (This works for anything you want to do, including adding to a tkinter edit window, but of course it still catches all stderr.)</li>
<li>Wrap the script from outsideâ€”e.g., with a wrapper script that uses <code>subprocess.Popen</code> to call the real script and capture its <code>stderr</code> in a pipe.</li>
</ul>
<p>Which one is appropriate depends on your needs. For your assignment, assuming nothing is writing to <code>stderr</code> but <code>smtplib</code>'s debug output during the time you're doing <code>smtplib</code> stuff, I think the file-like object idea might make sense. So:</p>
<pre><code>class MyDumbFakeStderr(object):
    def write(self, output):
        add_to_my_file_or_tkinter_thing(output)

sys.stderr = MyDumbFakeStderr()
try:
    # your smtplib code here
finally:
    sys.stderr = sys.__stderr__
</code></pre>
<p>Obviously restoring stderr is unnecessary if you're just going to quit as soon as you're done, while if you want to do it repeatedly you'll probably want to wrap it in a <code>contextlib.contextmanager</code>, etc. Also, this <code>MyDumbFakeStderr</code> is pretty dumb (hence the name); it works fine for wrapping code that does nothing but <code>print</code> whole lines to <code>stderr</code>, but for anything more complicated you might need to add your own line buffering, or make it an <code>io.TextIOBase</code>, etc. This is just an idea to get you started.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can read the function's source code.</p>
<p><a href="http://www.opensource.apple.com/source/python/python-3/python/Lib/smtplib.py" rel="nofollow">http://www.opensource.apple.com/source/python/python-3/python/Lib/smtplib.py</a> (search for sendmail)</p>
<p>You can also read a bit about SMTP: <a href="http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#SMTP_transport_example" rel="nofollow">http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#SMTP_transport_example</a></p>
<p>And try to relate the two</p>
</div>
<span class="comment-copy">This is in <a href="https://docs.python.org/32/library/smtplib.html#smtplib.SMTP.set_debuglevel" rel="nofollow noreferrer">the documentation</a>: Just call <code>SMTP.set_debuglevel(1)</code> and you will get "debug messages for connection and for all messages sent to and received from the server."</span>
<span class="comment-copy">Thanks, that has worked, it now writes what is going on to the shell. Is there a way I can write that output to a tkinter window or file?</span>
<span class="comment-copy">@user3788339: Let me edit the answer.</span>
<span class="comment-copy">As your information might help to solve the OP's issue, it would be better if you could provide more objective information. Please take a look at <a href="http://stackoverflow.com/help/how-to-answer">How do I write a good answer</a> help page, in order to improve your answer.</span>
