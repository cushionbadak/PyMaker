<div class="post-text" itemprop="text">
<p>I want to login to an external remote page , <a href="http://example.com/login" rel="nofollow">http://example.com/login</a> by django<br/>
I mean using django ,send username and password to that site , and fetch the html file of the page after login(e.g <a href="http://example.com/index" rel="nofollow">http://example.com/index</a>) , and do some jQuery to extract some wanted data from tahat page!
I searched and found (curl in php does somehow what i want ) but How should i do that in django ??</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two aspects to consider when doing tasks like these. First if you've control of the website you want to communicate with and second, if the website has an API or not. You'll need to use different libraries depending of these.</p>
<p>If the website you want to access has an API you'll be able to communicate with it directly from your program, that is calling methods and getting results in 'machine friendly' formats such as Json, XML, and so on. If the website hasn't an API you'll need to mimic user interaction and parse HTML, for these cases testing tools usually do this very well.</p>
<p>For example, You can use <a href="https://docs.djangoproject.com/en/1.6/topics/testing/tools/" rel="nofollow">the test client</a> from Django's testing tools if the site you want to access is a local Django one:</p>
<pre><code>&gt;&gt;&gt; from django.test.client import Client
&gt;&gt;&gt; c = Client()
&gt;&gt;&gt; response = c.post('/login/', {'username': 'john', 'password': 'smith'})
&gt;&gt;&gt; response.status_code
200
&gt;&gt;&gt; response = c.get('/customer/details/')
&gt;&gt;&gt; response.content
'&lt;!DOCTYPE html...'
</code></pre>
<p>Once you do the call you won't use jQuery but python. You usually will have the answer inside of response.content and you might need to parse it, assuming you're getting an html. </p>
<p>If the site you want to access is a third party one, I would use <a href="http://docs.python-requests.org/en/latest/" rel="nofollow">requests library</a> and you'll need to write something like this:</p>
<pre><code>&gt;&gt;&gt; r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.headers['content-type']
'application/json; charset=utf8'
&gt;&gt;&gt; r.encoding
'utf-8'
&gt;&gt;&gt; r.text
u'{"type":"User"...'
&gt;&gt;&gt; r.json()
{u'private_gists': 419, u'total_private_repos': 77, ...}
</code></pre>
<p>It would be much simpler, if the website you want to access has an API and you access it through REST calls, which is the request library sample above. Depending the website you want to access, you might already have a Python Library which is usually a wrapper of these API calls. </p>
</div>
<div class="post-text" itemprop="text">
<p>After lots of searching , finally found 2solutions :<br/>
1)use this amazing popular <strong>Django package</strong> :<br/>
<strong><a href="http://docs.python-requests.org/en/latest/" rel="nofollow">Django Requests Package</a></strong> 
as its <a href="http://docs.python-requests.org/en/latest/" rel="nofollow">documantation</a> says, i can do this :   </p>
<pre><code>import requests

r = requests.get('https://api.github.com', auth=('user', 'pass'))

print r.status_code
print r.headers['content-type']

# ------
# 200
# 'application/json'
</code></pre>
<p>2)the second solution is using <a href="https://docs.python.org/3/howto/urllib2.html" rel="nofollow"><strong>Python URL Libray</strong></a> :  </p>
<pre><code>import urllib2

gh_url = 'https://api.github.com'

req = urllib2.Request(gh_url)

password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
password_manager.add_password(None, gh_url, 'user', 'pass')

auth_manager = urllib2.HTTPBasicAuthHandler(password_manager)
opener = urllib2.build_opener(auth_manager)

urllib2.install_opener(opener)

handler = urllib2.urlopen(req)

print handler.getcode()
print handler.headers.getheader('content-type')

# ------
# 200
# 'application/json'
</code></pre>
</div>
<span class="comment-copy">no , i wanted to login to gmail.com!!(not my own site) i think as it said in docs :     <i>allowing you to test <b>your views</b> and interact with your Django-powered application programmatically</i>   and its not for logging in to another sites !</span>
<span class="comment-copy">The answer is still valid since it is a general answer. Same guidelines apply to (almost) any site. In particular for Gmail, i would use <a href="https://developers.google.com/gmail/api/" rel="nofollow noreferrer">Gmail Api</a> which has specific support for <a href="https://developers.google.com/api-client-library/python/" rel="nofollow noreferrer">Python</a>. Looking for the site's API was the second suggestion i gave on the answer.</span>
<span class="comment-copy">no , test client is for <b>Your Own</b> site , not another site without any api !</span>
<span class="comment-copy">You are right, sorry, i improved the answer. I hope it makes sense now.</span>
<span class="comment-copy">thanks again Roberto ! yes the answer is right ! the cool thing is you just answered exactly the same time as i found the answer :)) you can check my answer down here :D !! :))</span>
