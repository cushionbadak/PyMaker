<div class="post-text" itemprop="text">
<p>I want a for loop in Python that can modify variables in the iterator, not just handle the value of the variables. As a trivial example, the following clearly does not do what I want because b is still a string at the end.</p>
<pre><code>a = 3
b = "4"
for x in (a, b):
    x = int(x)
print("b is %s" % type(b))
</code></pre>
<p>(Result is <code>"b is a &lt;class 'str'&gt;</code>")</p>
<p>What is a good design pattern for "make changes to each variable in a long list of variables"?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: you can't do that.</p>
<pre><code>a = "3"
b = "4"
for x in (a, b):
    x = int(x)
</code></pre>
<p>Variables in Python are only tags that references values. Theres is not such thing as "tags on tags". When you write <code>x = int(x)</code> if the above code, you only change what <code>x</code> points to. Not the pointed value.</p>
<hr/>
<blockquote>
<p>What is a good design pattern for "make changes to each variable in a long list of variables"?</p>
</blockquote>
<p>I'm not sure to really understand, but if you want to do things like that, maybe you should store your values not as individual variables, but as value in a dictionary, or as instance variables of an object.</p>
<pre><code>my_vars = {'a': "3",
           'b': "4" }
for x in my_vars:
    my_vars[x] = int(my_vars[x])

print type(my_vars['b'])
</code></pre>
<hr/>
<p>Now if you're in the hackish mood:</p>
<p>As your variables are <em>globals</em> they are in fact stored as entries in a dictionary (accessible through the <a href="https://docs.python.org/2/library/functions.html#globals" rel="nofollow"><code>globals()</code></a> function). So you could change them:</p>
<pre><code>a = "3"
b = "4"
for x in ('a', 'b'):
    globals()[x] = int(globals()[x])

print type(b)
</code></pre>
<p>But, as of myself, I wouldn't call that <em>"good design pattern"</em>...</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in another answer, there's no way to update a variable indirectly. The best you can do is assign it explicitly with unpacking:</p>
<pre><code>&gt;&gt;&gt; a = 3
&gt;&gt;&gt; b = 4
&gt;&gt;&gt; a, b = [int(x) for x in a, b]
&gt;&gt;&gt; print "b is %s" % type(b)
b is &lt;type 'int'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have an actual list of variables (as opposed to a number of individual variables you want to modify), then a list comprehension will do what you want:</p>
<pre><code>&gt;&gt;&gt; my_values = [3, "4"]
&gt;&gt;&gt; my_values = [int(value) for value in my_values]
&gt;&gt;&gt; print(my_values)
[3, 4]
</code></pre>
<p>If you want to do more complicated processing, you can define a function and use that in the list comprehension:</p>
<pre><code>&gt;&gt;&gt; my_values = [3, "4"]
&gt;&gt;&gt; def number_crunching(value):
...     return float(value)**1.42
... 
&gt;&gt;&gt; my_values = [number_crunching(value) for value in my_values]
&gt;&gt;&gt; print(my_values)
[4.758961394052794, 7.160200567423779]
</code></pre>
</div>
<span class="comment-copy">One of the responders below made a point I should have made here: this is for Python 3.</span>
<span class="comment-copy">Yes, we can guess it's 3.x, not just because you're using <code>print</code> as a function, but because the output says <code>&lt;class 'str'&gt;</code> instead of <code>&lt;type 'str'&gt;</code> (and you're probably using CPython…), but in general it's worth adding the appropriate 2.7 or 3.x tag if there's any chance it might make a difference, because otherwise half the answers are going to guess wrong and give you code that doesn't work…</span>
<span class="comment-copy">Try to use <code>format</code> instead of <code>%</code>.</span>
<span class="comment-copy">b is a reference, and as such to reassign it you need to explicitly call <code>b = something</code> or access it through <code>locals()</code> or such</span>
<span class="comment-copy">@njzk2 Due to the way the generated code access local variables (<code>LOAD_FAST</code> opcode -- no dictionary look-up), it is probably not advisable to change a local variable through the <code>locals</code> dictionary. EDIT: this is in fact <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">mentioned in the doc</a>: <i>"The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter."</i></span>
<span class="comment-copy">If you want to get that hackish, as long as <code>a</code> and <code>b</code> are not equal, you can use the <code>frame</code> object to find out which names match the values and set <code>globals</code> that way. (Or inspect the frame's bytecode and/or source…) :)</span>
<span class="comment-copy">@abarnert: if they actually are equal, you probably can manage anyway, just as long as they are not equal to something you don't want to change, I guess</span>
<span class="comment-copy">@njzk2: Good point.</span>
