<div class="post-text" itemprop="text">
<p>I want to find the bitrate of an mp3 on a website without downloading the file.
Using Python3 &amp; Mutagen Ported Version</p>
<p><strong><em>Code</em></strong> </p>
<pre><code>from mutagen.id3 import ID3
audio = ID3("http://songs.djmazadownload.com/music/indian_movies/Creature%20(2014)/01%20-%20Creature%20-%20Sawan%20Aaya%20Hai%20%5BDJMaza.Info%5D.mp3")
print (audio.info.length, audio.info.bitrate)
</code></pre>
<p><strong>Error</strong></p>
<pre><code>Traceback (most recent call last):
  File "C:\Python_Mass_downloader\New folder\download.py", line 20, in &lt;module&gt;
    audio = ID3("http://songs.djmazadownload.com/music/indian_movies/Creature%20(2014)/01%20-%20Creature%20-%20Sawan%20Aaya%20Hai%20%5BDJMaza.Info%5D.mp3")
  File "C:\Python34\lib\site-packages\mutagen\id3.py", line 76, in __init__
    super(ID3, self).__init__(*args, **kwargs)
  File "C:\Python34\lib\site-packages\mutagen\_util.py", line 41, in __init__
    super(DictProxy, self).__init__(*args, **kwargs)
  File "C:\Python34\lib\site-packages\mutagen\__init__.py", line 46, in __init__
    self.load(*args, **kwargs)
  File "C:\Python34\lib\site-packages\mutagen\id3.py", line 122, in load
    self._fileobj = open(filename, 'rb')
OSError: [Errno 22] Invalid argument: 'http://songs.djmazadownload.com/music/indian_movies/Creature%20(2014)/01%20-%20Creature%20-%20Sawan%20Aaya%20Hai%20%5BDJMaza.Info%5D.mp3'
</code></pre>
<p><strong>Sample Input</strong></p>
<pre><code>http://songs.djmazadownload.com/music/indian_movies/Creature%20%282014%29/01%20-%20Creature%20-%20Sawan%20Aaya%20Hai%20%5BDJMaza.Info%5D.mp3
</code></pre>
<p>Any other ways are also welcome :)
Thank You </p>
</div>
<div class="post-text" itemprop="text">
<p>First:</p>
<blockquote>
<p>I Dont want to download the files . I just need to check from the server . I also want to Find image's (jpg,png etc) information like size , pixels . Is it posssible ? </p>
</blockquote>
<p>No, it's not possible. The only way to get that information is by parsing the file data, and you can't parse the file data unless you download the file data.</p>
<p>Of course if the server provides that information in some other way, like via a REST or RPC API, or a web page you can scrape, then you can download the information… but in that case, you're not parsing the file yourself, and you have no need for Mutagen. (And if you control the server, you can always add a web app that does the parsing on the server side and provides the information in any format you want.)</p>
<hr/>
<p>If you're just worried about saving the file to disk: Whether from the stdlib or from third-party modules, most functions in Python that want a filename cannot take a network URL. That's different from some other languages, which take URLs everywhere and try to treat http and file URLs the same way whenever possible (by downloading the file chunk by chunk into memory).</p>
<p>However, most functions that want a file <em>object</em> can take a <code>urlrequest</code> or similar object, and, if they can't, can usually take a <code>BytesIO</code>. So, you don't need to download it to a file on disk:</p>
<pre><code>import urllib.request

r = urllib.request.open(url)
spam(r)
</code></pre>
<p>The problem is, I don't think Mutagen's "simple API" functions like <code>ID3</code> can take file objects, only filenames. So, you will have to either use a different library, use lower-level functions,* or download to a temporary file.</p>
<p>But even that last one isn't so terrible:</p>
<pre><code>import tempfile
import urllib.request

r = urllib.request.open(url)
with tempfile.NamedTemporaryFile(mode='wb', delete=False) as f:
    f.write(r.read())
try:
    id3 = mutagen.id3.ID3(f.name)
finally:
    os.remove(f.name)
</code></pre>
<p>Or, if you don't care about Windows, you can simplify that to:</p>
<pre><code>r = urllib.request.open(url)
with tempfile.NamedTemporaryFile(mode='wb') as f:
    f.write(r.read())
    f.flush()
    id3 = mutagen.id3.ID3(f.name)
</code></pre>
<p><a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow"><code>NamedTemporaryFile</code></a> creates and opens a temporary file. By default, it will be deleted as soon as you close it (which happens as soon as the <code>with</code> statement ends). The problem with using it that way is that on Windows, <code>ID3</code> may not be able to open the temporary file until you close it, which means you have to pass <code>delete=False</code> to the constructor, and then explicitly <code>os.remove</code> it later. Clumsy, but the best way I know of to write it in a way that's safe and robust for all platforms. (Again, if you don't care about Windows, just use the simpler second version.)</p>
<p>If you don't understand the <code>with</code> statement, <a href="http://legacy.python.org/dev/peps/pep-0343/" rel="nofollow">PEP 343</a> probably explains it best, but oversimplifying a bit, the idea is that runs all the indented code, then automatically closes the file (even if you <code>return</code> or raise an exception in the middle of the indented code).</p>
<hr/>
<p>One of the few things you <em>can</em> get from an HTTP server is the size of a file. Servers usually send a <code>Content-Length:</code> header for every response, and if you send a <code>HEAD</code> request instead of a <code>GET</code>, you get just the headers, not all the data. So:</p>
<pre><code>&gt;&gt;&gt; req = urllib.request.Request(url, method='HEAD')
&gt;&gt;&gt; resp = urllib.request.urlopen(req)
&gt;&gt;&gt; size = int(resp.headers['Content-Length'])
6201098
</code></pre>
<hr/>
<p><sub>* In fact, I'm not even sure "use lower-level functions" is an option; I can't remember for sure, but I think being able to use open file objects or strings in place of filenames was something that MusicBrainz had to add to their fork of Mutagen because there was no way to do it.</sub></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Info = MediaInfo.parse(mp3file)
for track in Info.tracks:
    if track.track_type == 'General':
        pass
    if track.track_type == 'Audio':
        BitRate = track.bit_rate/1000 + 'Kbps'
</code></pre>
<p>Download the MediaInfo executable and add it to your Env Vars</p>
<p>Edit: Whoops ! Sorry didnt read the complete question. </p>
</div>
<span class="comment-copy">By the way, what is "Mutagen Ported Version"? Was that some fork that was created before Mutagen added 3.x support, or some new fork that fixes 3.x bugs faster than mainline by ignoring 2.x, or something like that?</span>
<span class="comment-copy">I Am New to Python SO Cant Understand Completely . :( The above method will download the file ?  what this line do ? &lt;&lt; with tempfile.NamedTemporaryFile &gt;&gt; I am getting an error here .</span>
<span class="comment-copy">@MuneebK: Well, you have to <code>import</code> any modules you use. I'll add the lines for that to my example. But yes, this will download the file to a temporary file, then delete it as soon as you're done with it.</span>
<span class="comment-copy">@abarnet , I Dont want to download the files . I just need to check from the server . I also want to Find image's (jpg,png etc) information like size , pixels . Is it posssible ? . Can you help me ?  Thank You</span>
<span class="comment-copy">@MuneebK: There's no way you can "check from the server" without downloading the files. There's no HTTP command that means "parse this file and give me the information found there", only "GET". Unless you control the server, and are willing to build a web app that you can talk to, you are going to have to download the files.</span>
<span class="comment-copy">@MuneebK: The size, yes, that's one of the few things HTTP <i>does</i> provide. You do that by sending a <code>HEAD</code> request instead of a <code>GET</code> request, and looking at the <code>Content-Length</code> header that you get back. I can edit that into the answer, but you're straying pretty far from your original question at this point; if you need further help with that part, you should probably open a new question.</span>
