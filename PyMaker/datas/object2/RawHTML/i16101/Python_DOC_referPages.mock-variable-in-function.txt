<div class="post-text" itemprop="text">
<p>For unit testing, I want to mock a variable inside a function, such as:</p>
<pre><code>def function_to_test(self):
    foo = get_complex_data_structure()  # Do not test this
    do_work(foo)  # Test this
</code></pre>
<p>I my unit test, I don't want to be dependent on what <code>get_complex_data_structure()</code> would return, and therefore want to set the value of foo manually.</p>
<p>How do I accomplish this? Is this the place for <code>@patch.object</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="noreferrer"><code>@patch()</code></a> to mock out <code>get_complex_data_structure()</code>:</p>
<pre><code>@patch('module_under_test.get_complex_data_structure')
def test_function_to_test(self, mocked_function):
    foo_mock = mocked_function.return_value
</code></pre>
<p>When the test function then calls <code>get_complex_data_structure()</code> a mock object is returned and stored in the local name <code>foo</code>; the very same object that <code>mocked_function.return_value</code> references in the above test; you can use that value to test if <code>do_work()</code> got passed the right object, for example.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that get_complex_data_structure is a function<sup>1</sup>, you can just patch it using any of the various <a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers" rel="nofollow noreferrer">mock.patch utilities</a>:</p>
<pre><code>with mock.patch.object(the_module, 'get_complex_data_structure', return_value=something)
  val = function_to_test()
  ...
</code></pre>
<p>they can be used as decorators or context managers or explicitly started and stopped using the <code>start</code> and <code>stop</code> methods.<sup>2</sup></p>
<hr/>
<p><sup><sup>1</sup>If it's not a function, you can always factor that code out into a simple utility function which returns the complex data-structure</sup>
<br/>
<sup><sup>2</sup>There are a million ways to use mocks -- It pays to read the docs to figure out all the ways that you can set the return value, etc.</sup></p>
</div>
