<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17091520/how-can-i-more-easily-suppress-previous-exceptions-when-i-raise-my-own-exception">How can I more easily suppress previous exceptions when I raise my own exception in response?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>In my code I want to catch an exception when it occurs, print some information abut the exception to the screen, and then end the script once I have done so. I tried to use something equivalent to the following code, but I don't understand why I get the traceback I do.</p>
<p>When executing:    </p>
<pre><code>try:
    1 / 0
except ZeroDivisionError:
    print("Exception: ZeroDivisionError")
    raise Exception
</code></pre>
<p>Console reads:</p>
<pre><code>Exception: ZeroDivisionError
Traceback (most recent call last):
  File "&lt;pyshell#19&gt;", line 2, in &lt;module&gt;
    1 / 0
ZeroDivisionError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;pyshell#19&gt;", line 5, in &lt;module&gt;
    raise Exception
Exception
</code></pre>
<p>I thought that if I catch the <code>ZeroDivisionError</code>, it would no longer be raised, and the only thing that would show is the <code>raise Exception</code> I do at the end, but both show in the console.</p>
<p>Why do they both show, and how do I alter the code so only the second shows, or is there a better way to achieve what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>The console shows the <em>context</em> here; when an exception is raised from an exception handler, Python attaches the active exception as the <code>__context__</code> attribute and Python shows that context later on if the new exception is not being handled. If you don't want the context to be shown, you need to supply a <em>cause</em> instead; you can supply an empty cause with with <code>raise ... from None</code>:</p>
<pre><code>try:
    1 / 0
except ZeroDivisionError:
    print("Exception: ZeroDivisionError")
    raise Exception from None
</code></pre>
<p>Quoting the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow"><code>raise</code> statement documentation</a>:</p>
<blockquote>
<p>The <code>from</code> clause is used for exception chaining: if given, the second expression must be another exception class or instance, which will then be attached to the raised exception as the <code>__cause__</code> attribute (which is writable). If the raised exception is not handled, both exceptions will be printed[...]</p>
<p>A similar mechanism works implicitly if an exception is raised inside an exception handler: the previous exception is then attached as the new exceptionâ€™s <code>__context__</code> attribute[...]</p>
</blockquote>
<p>And from the <a href="https://docs.python.org/3/library/exceptions.html#built-in-exceptions" rel="nofollow">Exceptions documentation</a>:</p>
<blockquote>
<p>When raising (or re-raising) an exception in an <code>except</code> clause <code>__context__</code> is automatically set to the last exception caught; if the new exception is not handled the traceback that is eventually displayed will include the originating exception(s) and the final exception.</p>
<p>When raising a new exception (rather than using a bare <code>raise</code> to re-raise the exception currently being handled), the implicit exception context can be supplemented with an explicit cause by using <code>from</code> with <code>raise</code>:</p>
<pre><code>raise new_exc from original_exc
</code></pre>
<p>The expression following from must be an exception or <code>None</code>. It will be set as <code>__cause__</code> on the raised exception. Setting <code>__cause__</code> also implicitly sets the <code>__suppress_context__</code> attribute to <code>True</code>, so that using <code>raise new_exc from None</code> effectively replaces the old exception with the new one for display purposes (e.g. converting <code>KeyError</code> to <code>AttributeError</code>), while leaving the old exception available in <code>__context__</code> for introspection when debugging.</p>
<p>The default traceback display code shows these chained exceptions in addition to the traceback for the exception itself. An explicitly chained exception in <code>__cause__</code> is always shown when present. An implicitly chained exception in <code>__context__</code> is shown only if <code>__cause__</code> is None and <code>__suppress_context__</code> is false.</p>
</blockquote>
</div>
<span class="comment-copy"><code>raise Exception from None</code> is giving SyntaxError in python shell. Is this natural behaviour?</span>
<span class="comment-copy">@SencerH.: this applies to Python 3 <i>only</i>. If you are seeing a syntax error you are using Python 2 instead.</span>
