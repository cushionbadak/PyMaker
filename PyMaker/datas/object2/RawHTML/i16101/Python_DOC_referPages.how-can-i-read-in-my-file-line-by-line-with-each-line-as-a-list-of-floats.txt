<div class="post-text" itemprop="text">
<p>I have a file where each line has a pair of coordinates like so:</p>
<pre><code>[-74.0104294, 40.6996416]
</code></pre>
<p>The code that I'm using to read them in is:</p>
<pre><code>with open('Manhattan_Coords.txt', 'r') as f:
    mVerts = f.read().splitlines()
</code></pre>
<p>This reads in all 78 lines into a list, but it reads them in as strings, so when I print them out it shows up as:</p>
<pre><code>['[(-74.0104294, 40.6996416]', ... , '[-74.0104294, 40.6996416]']
</code></pre>
<p>(Imagine the ... as 76 more coordinates like the first and last)</p>
<p>How can I read in each of these coordinate pairs as a list so that I am left with a list of 78 sublists with 2 floats inside each sublist?</p>
</div>
<div class="post-text" itemprop="text">
<p>For each line, you need to:</p>
<ol>
<li><strong>Read it</strong><br/>
... using a <code>for</code> loop to iterate over the file</li>
<li><strong>Strip whitespace including newlines</strong><br/>
... using <code>str.strip()</code></li>
<li><strong>Lose the first and last characters (brackets)</strong><br/>
... using <a href="https://stackoverflow.com/q/509211/1014938">string slicing</a>: <code>[1:-1]</code></li>
<li><strong>Split on the substring <code>', '</code></strong><br/>
... using <code>str.split()</code> and a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</li>
<li><strong>Convert the resulting strings into floats</strong><br/>
... using <code>float()</code></li>
<li><strong>Add each pair of floats to a list</strong><br/>
... using <code>list.append()</code></li>
</ol>
<p>That looks like this:</p>
<pre><code>m_verts = []
with open('Manhattan_Coords.txt') as f:
    for line in f:
        pair = [float(s) for s in line.strip()[1:-1].split(", ")]
        m_verts.append(pair)
</code></pre>
<p>After which, <code>m_verts</code> looks like this:</p>
<pre><code>&gt;&gt;&gt; m_verts
[[-74.0104294, 40.6996416], ... ]
</code></pre>
<p>In general, you're better off iterating over the lines of a file than reading them all into a list at once with methods like <code>splitlines()</code> ... it's more readable, and with large files much more efficient.</p>
<p>Also, notice that I've used the more pythonic <em>under_score</em> style to name <code>m_verts</code>, rather than your <em>camelCase</em> style - and that there's no need to specify <code>'r'</code> when opening a file for reading.</p>
</div>
<div class="post-text" itemprop="text">
<p>even better way than @ZeroPiraeus solution use ast.literal_eval which can evaluate any literal of python (here a list literal compound of float literal)</p>
<pre><code>import ast
m_verts = []
with open('Manhattan_Coords.txt') as f:
    for line in f:
        pair = ast.literal_eval(line)
        m_verts.append(pair)
</code></pre>
<p>but for construction of the list even better is list comprehension</p>
<pre><code>import ast
with open('Manhattan_Coords.txt') as f:
    m_verts = [ast.literal_eval(line) for line in f]
</code></pre>
</div>
<span class="comment-copy">Is it a typo that you have <code>'[(-74.0104294, 40.6996416]'</code>? ie, the extra opening parentheses?</span>
<span class="comment-copy">Worked perfectly, thank you!!</span>
<span class="comment-copy">@ZeroPiraeus In my answer I used <code>ast.literal_eval</code> you probably don't know</span>
