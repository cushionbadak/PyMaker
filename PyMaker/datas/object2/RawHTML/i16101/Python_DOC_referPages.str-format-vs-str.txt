<div class="post-text" itemprop="text">
<p>Python has at least six ways of formatting a string:</p>
<pre><code>In [1]: world = "Earth"

# method 1a
In [2]: "Hello, %s" % world
Out[2]: 'Hello, Earth'

# method 1b
In [3]: "Hello, %(planet)s" % {"planet": world}
Out[3]: 'Hello, Earth'

# method 2a
In [4]: "Hello, {0}".format(world)
Out[4]: 'Hello, Earth'

# method 2b
In [5]: "Hello, {planet}".format(planet=world)
Out[5]: 'Hello, Earth'

# method 2c
In [6]: f"Hello, {world}"
Out[6]: 'Hello, Earth'

In [7]: from string import Template

# method 3
In [8]: Template("Hello, $planet").substitute(planet=world)
Out[8]: 'Hello, Earth'
</code></pre>
<p>A brief history of the different methods:</p>
<ul>
<li><code>printf</code>-style formatting has been around since Pythons infancy</li>
<li>The <code>Template</code> class was introduced in Python 2.4</li>
<li>The <code>format</code> method was introduced in Python 2.6 </li>
<li><code>f</code>-strings were introduced in Python 3.6</li>
</ul>
<p>My questions are:</p>
<ul>
<li>Is <code>printf</code>-style formatting deprecated or going to be deprecated?</li>
<li>In the <code>Template class</code>, is the <code>substitute</code> method deprecated or going to be deprecated? (I'm not talking about <code>safe_substitute</code>, which as I understand it offers unique capabilities)</li>
</ul>
<p>Similar questions and why I think they're not duplicates:</p>
<ul>
<li><p><a href="https://stackoverflow.com/q/5082452/974555">Python string formatting: % vs. .format</a> — treats only methods 1 and 2, and asks which one is better; my question is explicitly about deprecation in the light of the Zen of Python</p></li>
<li><p><a href="https://stackoverflow.com/q/8395925/974555">String formatting options: pros and cons</a> — treats only methods 1a and 1b in the question, 1 and 2 in the answer, and also nothing about deprecation</p></li>
<li><p><a href="https://stackoverflow.com/q/11630106/974555">advanced string formatting vs template strings</a> — mostly about methods 1 and 3, and doesn't address deprecation</p></li>
<li><p><a href="https://stackoverflow.com/q/1763184/974555">String formatting expressions (Python)</a> — answer mentions that <em>the original '%' approach is planned to be deprecated</em>. But what's the difference between <em>planned to be deprecated</em>, <em>pending deprecation</em> and actual <em>deprecation</em>? And the <code>printf</code>-style method doesn't raise even a <code>PendingDeprecationWarning</code>, so is this really going to be deprecated? This post is also quite old, so the information may be outdated.</p></li>
</ul>
<h2>See also</h2>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0502/" rel="nofollow noreferrer">PEP 502: String Interpolation - Extended Discussion</a></li>
<li><a href="https://docs.python.org/2/library/string.html#string.Formatter" rel="nofollow noreferrer">String Formatter</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>While there are various indications in the docs that <code>.format</code> and f-strings are superior to <code>%</code> strings, there's no surviving plan to ever deprecate the latter.</p>
<p>In commit <a href="https://github.com/python/cpython/commit/3bbdc8e822b483fdfb66e0422e94630af10d1b80" rel="nofollow noreferrer"><em>Issue #14123: Explicitly mention that old style % string formatting has caveats but is not going away any time soon.</em></a>, inspired by issue <a href="https://bugs.python.org/issue14123" rel="nofollow noreferrer"><em>Indicate that there are no current plans to deprecate printf-style formatting</em></a>, the docs on <code>%</code>-formatting were edited to contain this phrase:</p>
<blockquote>
<p>As the new string-formatting syntax is more flexible and handles tuples and dictionaries naturally, it is recommended for new code. However, <strong>there are no current plans to deprecate printf-style formatting</strong>.</p>
</blockquote>
<p>(Emphasis mine.)</p>
<p>This phrase was removed later, in commit <a href="https://github.com/python/cpython/commit/273069cf7d79293fa0c2cca7fe6ab386a4e5c02a" rel="nofollow noreferrer"><em>Close #4966: revamp the sequence docs in order to better explain the state of modern Python</em></a>. This might seem like a sign that a plan to deprecate <code>%</code> formatting was back on the cards... but diving into the bug tracker reveals that the intent was the opposite. On the bug tracker, the author of the commit characterises the change <a href="https://bugs.python.org/issue4966" rel="nofollow noreferrer">like this</a>:</p>
<blockquote>
<ul>
<li>changed the prose that describes the relationship between printf-style formatting and the str.format method (deliberately removing the implication that the former is any real danger of disappearing - it's simply not practical for us to seriously contemplate killing it off)</li>
</ul>
</blockquote>
<p>In other words, we've had two consecutive changes to the <code>%</code>-formatting docs intended to <em>explicitly emphasise</em> that it will <em>not</em> be deprecated, let alone removed. The docs remain opinionated on the relative merits of different kinds of string formatting, but they're also clear the <code>%</code>-formatting isn't going to get deprecated or removed.</p>
<p>What's more, the <a href="https://github.com/python/cpython/pull/856/files" rel="nofollow noreferrer">most recent change to that paragraph</a>, in March 2017, changed it from this...</p>
<blockquote>
<p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the <code>str.format</code> interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p>
</blockquote>
<p>... to this:</p>
<blockquote>
<p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals, the <code>str.format</code> interface, or template strings may help avoid these errors. Each of these alternatives provides their own trade-offs and benefits of simplicity, flexibility, and/or extensibility.</p>
</blockquote>
<p>Notice the change from "helps avoid" to "may help avoid", and how the clear recommendation of <code>.format</code> and f-strings has been replaced by fluffy, equivocal prose about how each style <em>"provides their own trade-offs and benefits"</em>. That is, not only is a formal deprecation no longer on the cards, but the current docs are openly acknowledging that <code>%</code> formatting at least has some "benefits" over the other approaches.</p>
<p>I'd infer from all this that the movement to deprecate or remove <code>%</code> formatting has not only faltered, but been defeated thoroughly and permanently.</p>
</div>
<div class="post-text" itemprop="text">
<p>The new <a href="http://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>.format()</code> method</a> is meant to replace the old <code>%</code> formatting syntax. The latter has been de-emphasised, (but not officially deprecated <em>yet</em>). The method documentation states as much:</p>
<blockquote>
<p>This method of string formatting is the new standard in Python 3, and <strong>should be preferred</strong> to the <code>%</code> formatting described in <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow noreferrer"><em>String Formatting Operations</em></a> in new code.</p>
</blockquote>
<p>(Emphasis mine).</p>
<p>To maintain backwards compatibility and to make transition easier, the old format has been left in place <em>for now</em>. From the original <a href="http://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101 proposal</a>:</p>
<blockquote>
<h3>Backwards Compatibility</h3>
<p>Backwards compatibility can be maintained by leaving the existing
  mechanisms in place.  The new system does not collide with any of
  the method names of the existing string formatting techniques, so
  both systems can co-exist until it comes time to deprecate the
  older system.</p>
</blockquote>
<p>Note the <em>until it comes time to deprecate the older system</em>; it hasn't been deprecated, but the new system is to be used whenever you write <em>new code</em>.</p>
<p>The new system has as an advantage that you can <em>combine</em> the tuple and dictionary approach of the old <code>%</code> formatter:</p>
<pre><code>"{greeting}, {0}".format(world, greeting='Hello')
</code></pre>
<p>and is extensible through the <code>object.__format__()</code> hook used to handle formatting of individual values.</p>
<p>Note that the old system had <code>%</code> and the <code>Template</code> class, where the latter allows you to create subclasses that add or alter its behaviour. The new-style system has the <a href="http://docs.python.org/2/library/string.html#string.Formatter" rel="nofollow noreferrer"><code>Formatter</code> class</a> to fill the same niche.</p>
<p>Python 3 has further stepped away from deprecation, instead giving you warning in the <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><em><code>printf</code>-style String Formatting</em> section</a>:</p>
<blockquote>
<p><strong>Note</strong>: The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literals</a> or the <code>str.format()</code> interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text. </p>
</blockquote>
<p>Python 3.6 also added <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer"><em>formatted string literals</em></a>, which in-line the expressions <em>into</em> the format strings. These are the fastest method of creating strings with interpolated values, and should be used instead of <code>str.format()</code> wherever you can use a literal. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>%</code> operator for string formatting is not deprecated, and is not going to be removed - despite the other answers.<br/>
Every time the subject is raised on Python development list, there is strong controversy on which is better, but no controversy on whether to remove the classic way - it will stay. Despite being denoted on PEP 3101, Python 3.1 had come and gone, and <code>%</code> formatting is still around.</p>
<p>The statements for the keeping classic style are clear: it is simple, it is fast, it is quick to do for short things. Using the <code>.format</code> method is not always more readable - and barely anyone - even among the core developers, can use the full syntax provided by <code>.format</code> without having to look at the reference
 Even back in 2009, one had messages like this: <a href="http://mail.python.org/pipermail/python-dev/2009-October/092529.html" rel="noreferrer">http://mail.python.org/pipermail/python-dev/2009-October/092529.html</a>  - the subject had barely showed up in the lists since.</p>
<p><strong>2016 update</strong></p>
<p>In current Python development version (which will become Python 3.6) there is a third method of string interpolation, described on <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP-0498</a>. It defines a new quote prefix <code>f""</code> (besides the current <code>u""</code>, <code>b""</code> and <code>r""</code>).</p>
<p>Prefixing a string by <code>f</code> will call a method on the string object at runtime, which will automatically interpolate variables from the current scope into the string:</p>
<pre><code>&gt;&gt;&gt; value = 80
&gt;&gt;&gt; f'The value is {value}.'
'The value is 80.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Guido's latest position on this seems to be indicated here:</p>
<p><a href="http://docs.python.org/3/whatsnew/3.0.html" rel="noreferrer">What’s New In Python 3.0</a></p>
<blockquote>
<p>PEP 3101: A New Approach To String Formatting</p>
<p>A new system for built-in string formatting operations replaces 
  the % string formatting operator. (However, the % operator is still
  supported; it will be deprecated in Python 3.1 and removed from the
  language at some later time.) Read PEP 3101 for the full scoop.</p>
</blockquote>
<p>And the <a href="http://www.python.org/dev/peps/pep-3101/" rel="noreferrer">PEP3101</a> itself, which has the last modified dating back to (Fri, 30 Sep 2011), so no progress as of late on that one, I suppose.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the older Python docs and PEP 3101 there was a statement that the % operator will be deprecated and removed from the language in the future. The <a href="https://docs.python.org/3.2/tutorial/inputoutput.html#old-string-formatting" rel="nofollow noreferrer">following statement</a> was in the Python docs for Python 3.0, 3.1, and 3.2:</p>
<blockquote>
<p>Since str.format() is quite new, a lot of Python code still uses the %
  operator. However, because this old style of formatting will
  eventually be removed from the language, str.format() should generally
  be used.</p>
</blockquote>
<p>If you go to the <a href="https://docs.python.org/3.3/tutorial/inputoutput.html#old-string-formatting" rel="nofollow noreferrer">same section</a> in Python 3.3 and 3.4 docs, you will see that statement has been removed. I also cannot find any other statement anywhere else in the documentation indicating that the operator will be deprecated or removed from the language. It's also important to note that <a href="http://legacy.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP3101</a> has not been modified in over two and a half years (Fri, 30 Sep 2011).</p>
<p><strong>Update</strong></p>
<p><a href="http://legacy.python.org/dev/peps/pep-0461/" rel="nofollow noreferrer">PEP461</a> Adding % formatting to bytes and bytearray is accepted and should be part of Python 3.5 or 3.6. It's another sign that the % operator is alive and kicking.</p>
</div>
<span class="comment-copy">Do I need to point out you forgot the <a href="http://docs.python.org/2/library/string.html#string.Formatter" rel="nofollow noreferrer"><code>Formatter</code></a> class?</span>
<span class="comment-copy">The fluffy language change was added to placate the Mercurial maintainers (Mong others) that didn’t want to see Mercurial left behind with a codebase too large to eradicate the use of <code>%</code>. Now that the ‘no large scale code mods’ policy has been scrapped, their objections are fading too. In the long run, maintaining both forms with no benefits remaining for <code>%</code> <b>at some point</b> the printf syntax will be removed anyway. We just don’t know when yet, and so the language was worth toning down.</span>
<span class="comment-copy">@MartijnPieters Interesting. It sounds like you have a great deal of knowledge about this decision that I lack. For what it's worth, I think a well-referenced answer from you outlining these points (either as a new answer, or an edit to your existing one) would have value.</span>
<span class="comment-copy">And with <code>Formatter</code> you can create custom formats such as those that <code>datetime</code> objects use. Also, since <code>.format</code> is a function, you can use it to create callable lazy formatting more directly: eg, <code>fmt  = '{} - {}'.format; fmt(a, b)</code></span>
<span class="comment-copy">I don't see how <code>Template</code> is related to <code>%</code> or to the <i>old system</i>. In particular the PEP you link states <i>While there is some overlap between this proposal and <code>string.Template</code>, it is felt that each serves a distinct need, and that one does not obviate the other.</i> In your answer one may be confused that <code>Template</code> formatting, being part of the <i>old system</i>, is deprecated too.</span>
<span class="comment-copy">@Bakuriu: Right, I think I missed that part; but in my opinion the <code>Formatter</code> class can fill the same needs as <code>string.Template()</code>.</span>
<span class="comment-copy"><code>[...]should be preferred to the % formatting[...]</code> this part has been removed from the documentation. <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.format</a></span>
<span class="comment-copy">I think that this answer is currently misleading; the first passage quoted has been removed from the Python 3 docs, and it seems fairly clear to me that there's no remaining intent for a deprecation to take place. This answer still has historical value, but I'd be inclined to tweak the wording to avoid any suggestion that a deprecation is still in the cards, and to edit much of the first half of the answer to be in the past tense. I'll do so myself at some point if you don't object, but thought I'd comment first to give you a chance to make such changes yourself if you'd like to.</span>
<span class="comment-copy">It's much nicer to allow types to implement their own <code>__format__</code>. For example, <code>format(Decimal('0.1'), '.20f')</code> vs <code>'%.20f' % Decimal('0.1')</code>. The latter coerces the Decimal to a float.</span>
<span class="comment-copy">NB. I didn't argue that the old style is better in all respects - just that it is shorter and sometimes more readable (and sometimes not). Certainly the new way is much more flexible.</span>
<span class="comment-copy">Is there a equivalent for <code>f</code> in Python 3?</span>
<span class="comment-copy">The <code>f-strings</code> as used above are new feature in the language as of Python 3.6. It does not exist in previous versions and will raise a Syntax Error on those.</span>
