<div class="post-text" itemprop="text">
<p>I have written a short function in Python3 to parse HTTP headers.  I was wondering if anyone would be able to take a look at it and tell me if there is anything that I could have done differently to make the code better.  What I have currently produces the required outcome but I am not sure if there would be any situation in which this code would not produce the desired result.</p>
<p>This is what I have:</p>
<pre><code>def _parse_headers(self, headers):
  lines = headers.split("\r\n")
  info = lines[0].split(" ")

  method = None
  path = None
  protocol = None
  headers = {}

  if len(info) &gt; 0:
    method = info[0]
  if len(info) &gt; 1:
    path = info[1]
  if len(info) &gt; 2:
    protocol = info[2]

  for line in lines[1:]:
    if line:
      parts = line.split(":")
      key = None
      value = None
      if len(parts) &gt; 0:
        key = parts[0]
      if len(parts) &gt; 1:
        value = parts[1]
      if not key is None and not value is None:
        headers[key.strip().upper()] = value.strip()

  return {
    "method": method,
    "path": path,
    "protocol": protocol,
    "headers": headers
  }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As noted by André in the comments, parsing HTTP is not to be taken lightly, unless as an exercise. In real programs you should generally stick to existing, mature implementations if possible.</p>
<p>Note that beyond the overall message structure, every header has its own peculiar internal structure, and you will often need to parse that too; <a href="http://werkzeug.pocoo.org/" rel="nofollow">Werkzeug</a> can <a href="http://werkzeug.pocoo.org/docs/0.9/quickstart/#header-parsing" rel="nofollow">help there</a>.</p>
<p>The obvious specific problems with your code are:</p>
<ul>
<li>given a header <code>Host: www.example.com:80</code>, it will return <code>www.example.com</code> as its value;</li>
<li>given multiple headers with the same name, it will only return the value of the last one.</li>
</ul>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/a/5955949/2629998">This answer</a> gives a nice way of parsing the headers using methods from the standard library. Use it instead of rolling your own code.</span>
<span class="comment-copy">I can see some problems here.  This does not properly handle headers that span multiple lines, and does not properly handle headers whose values contain a <code>:</code> character.  There is also the issue of only recognizing <code>\r\n</code> line breaks, although <code>\n</code> line breaks are not strictly conformant, you should either explicitly accept or reject them.</span>
<span class="comment-copy">I agree with the other posters who recommend using an existing parsing library. But if you do want to "roll your own" you can eliminate that triple <code>if</code> construction with this hack: <code>method, path, protocol = (info + 3*[None])[:3]</code>. But it <b>is</b> a hack. :)</span>
<span class="comment-copy">I've fixed the first bullet point, but for the second one how would I tackle that?</span>
<span class="comment-copy">@TechnoCF Use data structures similar to <a href="https://docs.python.org/3/library/email.message.html#email.message.Message" rel="nofollow noreferrer">those for email headers</a>, as that’s the origin of this message format. <a href="https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.MessageClass" rel="nofollow noreferrer">See the standard <code>http.server</code>.</a></span>
