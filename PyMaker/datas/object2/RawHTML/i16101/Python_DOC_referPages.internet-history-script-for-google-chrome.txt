<div class="post-text" itemprop="text">
<p>I'm not looking for a "best" or most efficient script to do this. But I was wondering if there exists a script to pull Internet History for a day's time from, say, Google Chrome and log it to a txt file. I'd prefer if it were in Python or MATLAB. </p>
<p>If you guys have a different method using one of these languages utilizing locally stored browser history data from Google Chrome, I'd be all ears for that too.</p>
<p>I'd be super-thankful if anyone could help with this! </p>
</div>
<div class="post-text" itemprop="text">
<p>From my understanding, it seems easy to be done. I don't know if this is what you want.
Internet history from Chrome is stored at a specific path. Take Win7 for example, it's stored at win7: <code>C:\Users\[username]\AppData\Local\Google\Chrome\User Data\Default\History</code></p>
<p>In Python:</p>
<pre><code>f = open('C:\Users\[username]\AppData\Local\Google\Chrome\User Data\Default\History', 'rb')
data = f.read()
f.close()
f = open('your_expected_file_path', 'w')
f.write(repr(data))
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building on what m170897017 said:</p>
<p>That file is an sqlite3 database, so taking <code>repr()</code> of its contents won't do anything meaningful.</p>
<p>You need to open the sqlite database and run SQL against it to get the data out. In python use the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">sqlite3</a> library in the stdlib to do this.</p>
<p>Here's a related SuperUser question that shows some SQL for getting URLs and timestamps: <a href="https://superuser.com/a/694283">https://superuser.com/a/694283</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Dodged sqlite3/sqlite, I'm using the Google Chrome extension "Export History", exporting everything into a CSV file, and subsequently loading that CSV file into cells within MATLAB.</p>
<p><a href="https://chrome.google.com/webstore/detail/export-history/hcohnnbbiggngobheobhdipbgmcbelhh" rel="nofollow">Export History</a></p>
<p>My code turned out to be: </p>
<pre><code>file_o = ['history.csv'];
fid = fopen(file_o, 'rt');
fmt = [repmat('%s', 1, 6) '%*[^\n]'];
C = textscan(fid,fmt,'Delimiter',',','CollectOutput',true);
C_unpacked = C{:}; 
C_urls = C_unpacked(1:4199, 5);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another one:</p>
<pre><code>import csv, sqlite3, os
from datetime import datetime, timedelta

connection = sqlite3.connect(os.getenv("APPDATA") + "\..\Local\Google\Chrome\User Data\Default\history")
connection.text_factory = str
cur = connection.cursor()
output_file = open('chrome_history.csv', 'wb')
csv_writer = csv.writer(output_file)
headers = ('URL', 'Title', 'Visit Count', 'Date (GMT)')
csv_writer.writerow(headers)
epoch = datetime(1601, 1, 1)
for row in (cur.execute('select url, title, visit_count, last_visit_time from urls')):
    row = list(row)
    url_time = epoch + timedelta(microseconds=row[3])
    row[3] = url_time
    csv_writer.writerow(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't exactly what you are looking for. However, by using this you can manipulate the database tables to your liking</p>
<pre><code>import os
import sqlite3

def Find_path():
    User_profile = os.environ.get("USERPROFILE")
    History_path = User_profile + r"\\AppData\Local\Google\Chrome\User Data\Default\History" #Usually this is where the chrome history file is located, change it if you need to.
    return History_path

def Main():
    data_base = Find_path()            
    con = sqlite3.connect(data_base) #Connect to the database
    c = con.cursor()
    c.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name") #Change this to your prefered query
    print(c.fetchall())
if __name__ == '__main__':
    Main()
</code></pre>
</div>
<span class="comment-copy">Is this an OK download? <a href="https://pypi.python.org/pypi/pysqlite" rel="nofollow noreferrer">pysqlite 2.6.3</a> ?</span>
<span class="comment-copy">Yes that should work. But sqlite is built into python's standard library too. Try this at a python interpreter: "import sqlite3". If that works, you don't need to download a library. See the sqlite3 documentation: <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">docs.python.org/3/library/sqlite3.html</a></span>
