<div class="post-text" itemprop="text">
<p>I'm running this command:</p>
<pre><code>python manage.py test project.apps.app1.tests
</code></pre>
<p>and it causes this error:</p>
<blockquote>
<p>AttributeError: 'module' object has no attribute 'tests'</p>
</blockquote>
<p>Below is my directory structure. I've also added app1 to my installed apps config.</p>
<pre><code>Traceback (most recent call last):
    File "manage.py", line 10, in &lt;module&gt; execute_from_command_line(sys.argv)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/__init__.py", line 385, in execute_from_command_line
    utility.execute()
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/__init__.py", line 377, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/commands/test.py", line 50, in run_from_argv
    super(Command, self).run_from_argv(argv)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/base.py", line 288, in run_from_argv
    self.execute(*args, **options.__dict__)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/commands/test.py", line 71, in execute
    super(Command, self).execute(*args, **options)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/base.py", line 338, in execute
    output = self.handle(*args, **options)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/core/management/commands/test.py", line 88, in handle
    failures = test_runner.run_tests(test_labels)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/test/runner.py", line 146, in run_tests
    suite = self.build_suite(test_labels, extra_tests)
    File "/home/username/local/dev/local/lib/python2.7/site-packages/django/test/runner.py", line 66, in build_suite
    tests = self.test_loader.loadTestsFromName(label)
    File "/usr/lib/python2.7/unittest/loader.py", line 100, in loadTestsFromName
    parent, obj = obj, getattr(obj, part)
    AttributeError: 'module' object has no attribute 'tests'
</code></pre>
<p>Directory structure:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/DpRCx.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>I finally figured it out working on another problem. The problem was that my test couldn't find an import. </p>
<p>It looks like you get the above error if your test fails to import. This makes sense because the test suite can't import a broken test. At least I think this is what is going on because I fixed the import within my test file and sure enough it started working.</p>
<p>To validate your test case just try import the test case file in python console. </p>
<p>Example:</p>
<pre><code>from project.apps.app1.tests import *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<p><code>./manage.py shell</code></p>
<p>followed by </p>
<p><code>import myapp.tests</code></p>
<p>to find the nature of the import error.</p>
</div>
<div class="post-text" itemprop="text">
<p>For my case, I need to create an <strong>empty __init__.py</strong> in my <code>app/tests</code> folder</p>
</div>
<div class="post-text" itemprop="text">
<p>Steve Bradshaw's example above works for import errors (thanks Steve).</p>
<p>Other type of errors (e.g. ValueError) may also cause </p>
<pre><code>AttributeError: 'module' object has no attribute 'tests'
</code></pre>
<p>to see what these errors are</p>
<pre><code>./manage.py shell
from myapp.tests import SomeTestCase
t = SomeTestCase()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same error as Chris.  I had deleted an old model, then run tests.py, but another file (views.py) was still trying to import the deleted model.</p>
<p>When I took out the now-obsolete import statement, problem solved.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make sure that all modules that you are using in your script are not broken. By this I mean check spelling in your import statements. </p>
<pre><code># invalid import
from app.model.notification import Notification
# valid import
from app.models.notification import Notification
</code></pre>
<p>You can test yours modules by executing imports statements in djano's interactive console.</p>
<pre><code>$root@13faefes8: python manage.py shell
Type "help", "copyright", "credits" or "license" for more information (InteractiveConsole)
&gt;&gt;&gt; from app.model.notification import Notification
Traceback (most recent call last): 
   File "&lt;console&gt;", line 1, in &lt;module&gt;
ImportError: No module named model.notification
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to django document When you <a href="https://docs.djangoproject.com/en/dev/topics/testing/overview/#running-tests" rel="nofollow">run your tests</a>, the default behavior of the test utility is to find all the test cases (that is, subclasses of <a href="http://docs.python.org/3/library/unittest.html#unittest.TestCase" rel="nofollow">unittest.TestCase</a>) in any file whose name begins with test, automatically build a test suite out of those test cases, and run that suite.</p>
<p>so try this : <code>python manage.py test tests.py</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Got the same error, but checked all the reasons list here, did not fix my problem. </p>
<p>Finally figure it out that, the reason is that the name of one method that imported but not used yet is not correct. Though it is a stupid error, it happens.</p>
</div>
<div class="post-text" itemprop="text">
<p>I resolved the error "AttributeError: module 'utils' has no attribute 'name_of_my_function' " by fixing a circular import reference. My files manage.py and utils.py each had an import statement pointing at each other.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same error. It turned out to be because I named my module common.py, yet there already was some other common.py module. All I had to do was to rename my module.</p>
</div>
<span class="comment-copy">Whoo thanks, it was so impossible to find the error..</span>
<span class="comment-copy">Thanks alot ! For me a 3rd party module "springpython" was missing.</span>
<span class="comment-copy">Bad assumption in that message.</span>
<span class="comment-copy">This can also be done from the command line, eliminating the need to open a Python shell: <code>python -c "from project.apps.app1.tests import *"</code></span>
<span class="comment-copy">+1 saved me from confusing error message. The only problem with your suggestion is that you imported <b>death star</b> . OK in console for experiments, but in code, always import just the names needed.</span>
