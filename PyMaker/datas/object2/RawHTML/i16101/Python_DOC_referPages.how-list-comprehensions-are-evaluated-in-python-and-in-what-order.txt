<div class="post-text" itemprop="text">
<p>I have two list comprehensions where conditions are defined in different places.</p>
<pre><code>&gt;&gt;&gt; [ x**2 if x%2==0 else x**3 if x%3==0 else 0 for x in range(10)]
[0, 0, 4, 27, 16, 0, 36, 0, 64, 729]

&gt;&gt;&gt; [ x**2 if x%2==0 for x in range(10) ]
  File "&lt;stdin&gt;", line 1
    [ x**2 if x%2==0 for x in range(10) ]
                       ^
SyntaxError: invalid syntax
</code></pre>
<p>However if i do this:</p>
<pre><code>&gt;&gt;&gt; [ x**2 for x in range(10) if x%2==0 ]
[0, 4, 16, 36, 64]
&gt;&gt;&gt; 
</code></pre>
<p>it works.</p>
<p>Now the confusing part is how the order is evaluated. What is the difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two different concepts confused here.</p>
<p>An expression like <code>x**2 if x%2==0 else x**3</code> is a <em>conditional expression</em>. They can be chained, but the <code>else</code> is <strong>not optional</strong> - because this is a self-contained expression that evaluates to a single, specific value. The <code>else x**3</code> is required because Python has to know what the expression evaluates to whenever it is not the case that <code>x % 2 == 0</code>.</p>
<p>In a <em>list comprehension</em>, when you write things like <code>[x**2 for x in range(10) if x%2==0]</code>, the <code>if</code> clause is used to <em>filter</em> the <code>x</code> values found <code>in range(10)</code>, <code>for</code> which elements of the resulting list are computed. There is no <code>else</code> permitted here because the purpose is entirely different.</p>
<p>You can mix and match: <code>[x**2 if x%2 == 0 else x**3 for x in range(10) if x%3 == 0]</code>. Now <code>if x % 3 == 0</code> is being used to decide which <code>x</code> values to compute a result for, and <code>if x%2 == 0</code> is being used to decide <em>whether</em> to use <code>x**2</code> or <code>x**3</code> as the computed result for those <code>x</code>s.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing two completely different constructs.</p>
<p>Conditions for list comprehensions can be defined only at one plance, at the end, and they act like <em>filters</em>:</p>
<pre><code>[ ... for ... if .... ]
</code></pre>
<p>The other construct you see is python's version of the <a href="https://stackoverflow.com/a/394814/650405">ternary operator</a>. It's not a filter, it just selects one of the expressions based on the logical value of a third expression:</p>
<pre><code>... if ... else ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>from the <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">docs</a>:</p>
<blockquote>
<p>A list comprehension consists of brackets containing an expression
  followed by a for clause, then zero or more for or if clauses. The
  result will be a new list resulting from evaluating the expression in
  the context of the for and if clauses which follow it.</p>
</blockquote>
<p>so, by definition the <code>if</code> comes after the <code>for</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For example, this:</p>
<pre><code>[ x**2 if x%2==0 else x**3 if x%3==0 else 0 for x in range(10)]
</code></pre>
<p>Is the equivalent of this:</p>
<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; for x in range(10):
...     l.append(x**2 if x%2==0 else x**3 if x%3==0 else 0)
... 
&gt;&gt;&gt; l
[0, 0, 4, 27, 16, 0, 36, 0, 64, 729]
</code></pre>
<p>I.e. there is no <code>if</code> statement, but rather an <code>if</code> expression. So there's always something appended to the list on every step of the <code>for</code>.</p>
<p>However when you do this:</p>
<pre><code>[ x**2 for x in range(10) if x%2==0 ]
</code></pre>
<p>And <code>if</code> statement will be used. And not all steps will append to the list. Translated into:</p>
<pre><code>&gt;&gt;&gt; l = []
&gt;&gt;&gt; for x in range(10):
...     if x%2==0:
...             l.append(x**2)
... 
&gt;&gt;&gt; l
[0, 4, 16, 36, 64]
</code></pre>
</div>
<span class="comment-copy"><code>if</code> in the list comprehension can be placed anywhere except before the first <code>for</code>: <code>[x for x in [1,2,3] if x &lt; 2 if x &lt; 4 for j in  [x]]</code></span>
<span class="comment-copy">It's not a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow noreferrer">nested comprehension</a>.</span>
