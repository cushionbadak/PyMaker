<div class="post-text" itemprop="text">
<p>Lets say I have this function</p>
<pre><code>from datetime import date

def get_next_friday(base_date=date.today()):
   next_friday = ...
   return next_friday
</code></pre>
<p>Then I have a celery task to call this function without passing in the <code>base_date</code></p>
<pre><code>@celery_app.task
def refresh_settlement_date():
   Record.objects.update(process_date=get_next_friday())
</code></pre>
<p>In the unittest I am running the <code>refresh_settlement_date()</code> task, but it's not providing the <code>base_date</code> when it's calling the <code>get_next_friday()</code>, my question is how to mock that parameter to test the days in the future?</p>
<p>I am trying to avoid adding parameter to become <code>refresh_settlement_date(base_date)</code> as it doesn't serve real purpose but only for unittest.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow">@patch</a> <code>get_next_friday()</code> function and substitute it's return value with the one you need:</p>
<pre><code>date_in_the_future = date.today() + timedelta(50)
next_friday_in_the_future = get_next_friday(base_date=date_in_the_future)

with patch('module_under_test.get_next_friday') as mocked_function:
    mocked_function.return_value = next_friday_in_the_future

    # call refresh_settlement_date
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative approach would to be to patch the current date.</p>
<p>There is a relevant thread with multiple options:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/4481954/python-trying-to-mock-datetime-date-today-but-not-working">Python: Trying to mock datetime.date.today() but not working</a></li>
</ul>
<hr/>
<p>My favorite option is to use a third-party module called <a href="https://github.com/spulec/freezegun/" rel="nofollow noreferrer"><code>freezegun</code></a>. </p>
<p>You would need only one line to add, very clean and readable:</p>
<pre><code>@freeze_time("2014-10-14")
def test_refresh_settlement_date_in_the_future(self):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just tried this out, it seems to work:</p>
<p>first I need to copy the function:</p>
<pre><code>old_get_next_friday = get_next_friday
</code></pre>
<p>then patch it:</p>
<pre><code>with patch.object(get_next_friday) as mocked_func:
    for i in range(8):
        mocked_func.return_value = old_get_next_friday(date.today() + timedelta(days=i))
        refresh_settlement_date()
</code></pre>
</div>
<span class="comment-copy">Thanks it's very similar to my own solution</span>
<span class="comment-copy">good to know, thanks.</span>
