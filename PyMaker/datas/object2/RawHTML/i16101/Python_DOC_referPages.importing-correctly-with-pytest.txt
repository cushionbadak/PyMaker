<div class="post-text" itemprop="text">
<p>I just got set up to use pytest with Python 2.6. It has worked well so far with the exception of handling "import" statements: I can't seem to get pytest to respond to imports in the same way that my program does.</p>
<p>My directory structure is as follows:</p>
<pre><code>src/
    main.py
    util.py
    test/
        test_util.py
    geom/
        vector.py
        region.py
        test/
            test_vector.py
            test_region.py
</code></pre>
<p>To run, I call <code>python main.py</code> from src/.</p>
<p>In main.py, I import both vector and region with</p>
<pre><code>from geom.region import Region
from geom.vector import Vector
</code></pre>
<p>In vector.py, I import region with</p>
<pre><code>from geom.region import Region
</code></pre>
<p>These all work fine when I run the code in a standard run. However, when I call "py.test" from src/, it consistently exits with import errors.</p>
<hr/>
<h2>Some Problems and My Solution Attempts</h2>
<p>My first problem was that, when running "test/test_foo.py", py.test could not "import foo.py" directly. I solved this by using the "imp" tool. In "test_util.py":</p>
<pre><code>import imp
util = imp.load_source("util", "util.py")
</code></pre>
<p>This works great for many files. It also seems to imply that when pytest is running "path/test/test_foo.py" to test "path/foo.py", it is based in the directory "path".</p>
<p>However, this fails for "test_vector.py". Pytest can find and import the <code>vector</code> module, but it <strong>cannot</strong> locate any of <code>vector</code>'s imports. The following imports (from "vector.py") both fail when using pytest:</p>
<pre><code>from geom.region import *
from region import *
</code></pre>
<p>These both give errors of the form</p>
<pre><code>ImportError: No module named [geom.region / region]
</code></pre>
<p>I don't know what to do next to solve this problem; my understanding of imports in Python is limited.</p>
<p><strong>What is the proper way to handle imports when using pytest?</strong></p>
<hr/>
<h2>Edit: Extremely Hacky Solution</h2>
<p>In <code>vector.py</code>, I changed the import statement from</p>
<pre><code>from geom.region import Region
</code></pre>
<p>to simply</p>
<pre><code>from region import Region
</code></pre>
<p>This makes the import relative to the directory of "vector.py".</p>
<p>Next, in "test/test_vector.py", I add the directory of "vector.py" to the path as follows:</p>
<pre><code>import sys, os
sys.path.append(os.path.realpath(os.path.dirname(__file__)+"/.."))
</code></pre>
<p>This enables Python to find "../region.py" from "geom/test/test_vector.py".</p>
<p>This works, but it seems extremely problematic because I am adding a ton of new directories to the path. What I'm looking for is either</p>
<p>1) An import strategy that is compatible with pytest, or</p>
<p>2) An option in pytest that makes it compatible with my import strategy</p>
<p>So I am leaving this question open for answers of these kinds.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>import</em></strong> looks in the following directories to find a module:</p>
<ol>
<li>The <strong>home directory</strong> of the program. This is the directory of your root script. When you are running pytest your home directory is where it is installed (/usr/local/bin probably). No matter that you are running it from your src directory because the location of your pytest determines your home directory. That is the reason why it doesn't find the modules. </li>
<li><strong>PYTHONPATH</strong>. This is an environment variable. You can set it from the command line of your operating system. In Linux/Unix systems you can do this by executing: '<em>export PYTHONPATH=/your/custom/path</em>' If you wanted Python to find your modules from the test directory you should include the src path in this variable.</li>
<li>The <strong>standard libraries</strong> directory. This is the directory where all your libraries are installed. </li>
<li>There is a less common option using a <strong>pth</strong> file.</li>
</ol>
<p><strong><em>sys.path</em></strong> is the result of combining the <strong>home directory</strong>, <strong>PYTHONPATH</strong> and the <strong>standard libraries</strong> directory. What you are doing, modifying <strong><em>sys.path</em></strong> is correct. It is something I do regularly. You could try using <strong>PYTHONPATH</strong> if you don't like messing with <strong><em>sys.path</em></strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is that Pytest walks the filesystem to discover files that contain tests, but then needs to generate a module name that will cause <code>import</code> to load that file. (Remember, <a href="https://stackoverflow.com/a/49420164/107294">files are not modules</a>.)</p>
<p>Pytest comes up with this <a href="https://docs.pytest.org/en/latest/goodpractices.html#test-package-name" rel="noreferrer">test package name</a> by finding the first directory at or above the level of the file that does not include an <code>__init__.py</code> file and declaring that the "basedir" for the module tree containing a module generated from this file. It then adds the basedir to the front of <code>sys.path</code> and imports using the module name that will find that file relative to the basedir.</p>
<p>There are some implications of this of which you should beware:</p>
<ol>
<li><p>The basepath may not match your intended basepath in which case the module will have a name that doesn't match what you would normally use. E.g., what you think of as <code>geom.test.test_vector</code> will actually be named just <code>test_vector</code> during the Pytest run because it found no <code>__init__.py</code> in <code>src/geom/test/</code> and so added that to the path.</p></li>
<li><p>You may run into module naming collisions if two files in different directories have the same name. For example, lacking <code>__init__.py</code> files anywhere, adding <code>geom/test/test_util.py</code> will conflict with <code>test/test_util.py</code> because both are loaded as <code>import test_util.py</code>, with both <code>test/</code> and <code>geom/test/</code> in the path.</p></li>
</ol>
<p>The system you're using here, without explicit <code>__init__.py</code> modules, is having Python create <a href="https://www.python.org/dev/peps/pep-0420/" rel="noreferrer">implicit namespace packages</a> for your directories. (A package is a module with submodules.) Ideally we'd configure Pytest with a path from which it would also generate this, but it doesn't seem to know how to do that.</p>
<p>The easiest solution here is simply to add empty <code>__init__.py</code> files to all of the subdirectories under <code>src/</code>; this will cause Pytest to import everything using package/module names that start with directory names under <code>src/</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was wondering what to do about this problem too.  After reading this post, and playing around a bit, I figured out an elegant solution.  I created a file called "test_setup.py" and put the following code in it:</p>
<pre><code>import sys, os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
</code></pre>
<p>I put this file in the top-level directory (such as src).  When <code>pytest</code> is run from the top-level directory, it will run all test files including this one since the file is prefixed with "test".  There are no tests in the file, but it is still run since it begins with "test".</p>
<p>The code will append the current directory name of the test_setup.py file to the system path within the test environment.  This will be done only once, so there are not a bunch of things added to the path.</p>
<p>Then, from within any test function, you can import modules relative to that top-level folder (such as <code>import geom.region</code>) and it knows where to find it since the src directory was added to the path.</p>
<p>If you want to run a single test file (such as test_util.py) instead of all the files, you would use:</p>
<pre><code>pytest test_setup.py test\test_util.py
</code></pre>
<p>This runs both the test_setup and test_util code so that the test_setup code can still be used.</p>
</div>
<span class="comment-copy">I am still searching for that py.test compatible import strategy : /</span>
<span class="comment-copy">@Zelphir <a href="http://stackoverflow.com/a/34140498/3565696">python -m pytest tests/</a> works fine.</span>
<span class="comment-copy">@ederag If I do that, in my project python doesn't find all the other imports used by the test cases (or the imports classes / modules use in the test cases). If I change those to be absolute imports, I can run the tests using your command, but when I try to run the program it doesn't find the imports â€“ endless cycle of import statement changing and I don't know how to fix it.</span>
<span class="comment-copy">Absolute imports are recommended in your main package too. See answers to <a href="http://stackoverflow.com/q/4209641/3565696">stackoverflow.com/q/4209641/3565696</a>. But remember to add <code>__init__.py</code> files in your directories, to create a <a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="nofollow noreferrer">regular package</a>. (I never tried with a namespace package)</span>
<span class="comment-copy">Thanks! This cleared things up. Made a slight change to the solution I used though (edit shown above)</span>
<span class="comment-copy">The problem in my case was the missing <code>__init__.py</code> in the test folder. Thanks.</span>
