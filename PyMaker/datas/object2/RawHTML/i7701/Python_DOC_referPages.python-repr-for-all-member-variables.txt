<div class="post-text" itemprop="text">
<p>Implementing <code>__repr__</code> for a class <code>Foo</code> with member variables <code>x</code> and <code>y</code>, is there a way to automatically populate the string? Example that does not work:</p>
<pre><code>class Foo(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return "Foo({})".format(**self.__dict__)

&gt;&gt;&gt; foo = Foo(42, 66)
&gt;&gt;&gt; print(foo)
IndexError: tuple index out of range
</code></pre>
<p>And another:</p>
<pre><code>from pprint import pprint
class Foo(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return "Foo({})".format(pprint(self.__dict__))

&gt;&gt;&gt; foo = Foo(42, 66)
&gt;&gt;&gt; print(foo)
{'x': 42, 'y': 66}
Foo(None)
</code></pre>
<p>Yes I could define the method as </p>
<pre><code>    def __repr__(self):
        return "Foo({x={}, y={}})".format(self.x, self.x)
</code></pre>
<p>but this gets tedious when there are many member variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use this as a mixin when I want something like that:</p>
<pre><code>class SimpleRepr(object):
    """A mixin implementing a simple __repr__."""
    def __repr__(self):
        return "&lt;{klass} @{id:x} {attrs}&gt;".format(
            klass=self.__class__.__name__,
            id=id(self) &amp; 0xFFFFFF,
            attrs=" ".join("{}={!r}".format(k, v) for k, v in self.__dict__.items()),
            )
</code></pre>
<p>It gives the class name, the (shortened) id, and all of the attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you want something like this:</p>
<pre><code>    def __repr__(self):
        return "Foo({!r})".format(self.__dict__)
</code></pre>
<hr/>
<p>This will add <code>repr(self.__dict__)</code> in the string, using <code>!r</code> in a format specifier tells <code>format()</code> to call the item's <code>__repr__()</code>.</p>
<p>See the "Conversion field" here: <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">https://docs.python.org/3/library/string.html#format-string-syntax</a></p>
<hr/>
<p>Based on <a href="https://stackoverflow.com/a/44595303/4482039">Ned Batchelder's answer</a>, you can replace the line above by </p>
<pre><code>return "{}({!r})".format(self.__class__.__name__, self.__dict__)
</code></pre>
<p>for a more generic approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nice example!</p>
<p>for pretty output better to 
place simple <code>return "\n{!r}".format(self.__dict__)</code>
and in root full print <code>return "Class name: '{}' \n{!r}".format(self.__class__.__name__, self.__dict__)</code></p>
</div>
<span class="comment-copy">Nice one! Real classy.</span>
<span class="comment-copy">Awesome thanks!</span>
