<div class="post-text" itemprop="text">
<pre><code>my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</code></pre>
<p>How do I chunk/paginate this list with constraint ? lets say my page size is 3 and per page I want only numbers divisible by two. </p>
<pre><code>chunks = [[2,4,6],[8,10,12],[14]]
</code></pre>
<p>Changes:
Since it is pagination how do we produce one page/chunk per invocation. or in other words lets say I have a function called paginate which takes </p>
<pre><code>def paginate(my_list, row_len, page_number=1):
</code></pre>
<p>Where page_number is the page that you are requesting for, e.g: page_number=2. special case: If you want to get all the pages, then set page_number = 0</p>
<p>this function can be invoked like below:</p>
<pre><code>paginate(my_list, 3, 2)   # [8,10,12]
paginate(my_list, 3, 0)   # [[2,4,6],[8,10,12],[14]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a <em>generator</em> for the even  numbers, then <em>chunk</em> afterward:</p>
<pre><code># Python 2

gen = (x for x in my_list if x%2==0)
chunks = [[i for i in t if i is not None] for t in map(None, *(gen,)*3)]
print chunks
# [[2, 4, 6], [8, 10, 12], [14]]
</code></pre>
<hr/>
<p>You could avoid iterating over the entire to filter out <code>None</code> by doing the check and replacement only on the last chunk, the only possible location for a <code>None</code>:</p>
<pre><code>gen = (x for x in my_list if x%2==0)
chunks = map(None, *(gen,)*3)
if None in chunks[-1]:
    chunks[-1] = filter(None, chunks[-1])
print(chunks)
# [(2, 4, 6), (8, 10, 12), (14,)]
</code></pre>
<hr/>
<p>In Python 3, <code>map(None, ...)</code> can be replaced with <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a> which ensures the shortest chunk is appended with <code>None</code>s as opposed to <code>zip</code> that simply stops at the length of the shortest iterable:</p>
<pre><code>from itertools import zip_longest

gen = (x for x in my_list if x%2==0)
chunks = [[i for i in t if i is not None] for t in zip_longest(*(gen,)*3)]
print(chunks)
# [[2, 4, 6], [8, 10, 12], [14]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lets use a 3rd party library called <code>more-itertools</code></p>
<pre><code>import more_itertools

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

temp = [num for num in my_list if num % 2 == 0]

list(more_itertools.chunked(temp, 3))

[[2, 4, 6], [8, 10, 12], [14]]
</code></pre>
<p>Here is a <a href="https://more-itertools.readthedocs.io/en/latest/index.html" rel="nofollow noreferrer">link for more-itertools</a></p>
</div>
<span class="comment-copy">Can you be more specific, give a full working example of the output you require.</span>
<span class="comment-copy">You may want to add a link to the third-party library.</span>
<span class="comment-copy">good call on that</span>
