<div class="post-text" itemprop="text">
<p>I am having trouble grasping how to create a save file for this team roster. The issue I run into is when I try to create what to save in the txt file. Im not sure why i cant get self.player etc to be written in the code. Based on how the players information is written how should I write the txt file to be saved and loaded?</p>
<pre><code>class teamClass:

    Player = ""
    phone_number = ""
    jersey = ""

    def __init__(self, Player, phone_number, jersey):
        self.Player = Player

        self.phone_number = phone_number

        self.jersey = jersey

    def setPlayer(self, Player):
        self.Player = Player

    def setphone_number(self, phone_number):
        self.phone_number = phone_number

    def setjersey(self, jersey):
        self.jersey = jersey

    def setNewPlayer(self, Player):
        self.setPlayer(Player)

    # accessor methods

    def getPlayer(self):
        return self.Player

    def getphone_number(self):
        return self.phone_number

    def getjersey(self):
        return self.jersey

    def displayData(self):
        print("")

        print("Player Info: ")

        print("------------------------")

        print("Player:", self.Player)

        print("Phone number:", self.phone_number)

        print("Jersey:", self.jersey)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, there are quite a few problems with your code:</p>
<ul>
<li>Do not create useless class-attributes and override them using instance-attributes. Use a constructor like <code>__init__(self, name=None, phone=None, jersay=None)</code> instead.</li>
<li><a href="https://stackoverflow.com/questions/6618002/python-property-versus-getters-and-setters">Do not</a> use getters and setters like you would in Java. Python assumes that all attributes can be accessed without side-effects; if you truly need a getter/setter for an attribute, use a <code>@property</code>.</li>
<li>You do not want a <code>displayData</code>-method. Instead, <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">define</a> a <code>__str__()</code>-method and just call <code>print()</code> on the instance.</li>
</ul>
<p>Concerning your question: You can use <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a>, toml or just <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> to save your object. Here is a <a href="https://pypi.python.org/pypi/toml/0.9.2" rel="nofollow noreferrer">toml</a> library ready for use.</p>
<p>An example using json:</p>
<pre><code>import collections
import json
Player = collections.namedtuple('Player', ('name', 'phone_number', 'jersay'))

# Create a new player instance
p = Player('John Doe', '555-ACME', None)

# Save the player-data to a json-file
with open('thefile.txt', 'wt') as f:
    f.write(json.dumps(p))

# Load it back
with open('thefile.txt', 'rt') as f:
    p2 = Player(*json.loads(f.read()))

# Look, ma! They are the same
assert p == p2
</code></pre>
</div>
<span class="comment-copy">Fix your indentation, it's out of whack.</span>
<span class="comment-copy">yeah sorry it didnt copy over correctly</span>
<span class="comment-copy">You might want to share the code you've written for your save process.  This is just a class with nothing related to saving to a file.</span>
