<div class="post-text" itemprop="text">
<pre><code>N = [1, 2, 3]
print(n for n in N)
</code></pre>
<p>results:</p>
<pre><code>&lt;generator object &lt;genexpr&gt; at 0x000000000108E780&gt;
</code></pre>
<p>why this code couldn't print:</p>
<pre><code>1
2
3
</code></pre>
<p>However the code: </p>
<pre><code>sum(n for n in N) 
</code></pre>
<p>could sum up all the number in N. </p>
<p>Could you please tell me why sum() could work but print() faild?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because you passed a generator to a function and that's what <code>__repr__</code> method of this generator returns. If you want to print what it would generate, you can use:</p>
<pre><code>print(*N, sep='\n') # * will unpack the list
</code></pre>
<p>or</p>
<pre><code>print(*(n for n in N), sep='\n') # Again, unpacks values
</code></pre>
<p>or</p>
<pre><code>print('\n'.join(map(str, n for n in N)))
</code></pre>
<p>or if you like comprehensions:</p>
<pre><code>[print(n) for n in N]
</code></pre>
<p>You have to be aware that the last method constructs a list filled with <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to cast it as a list, you can try:</p>
<pre><code>print(*(n for n in N))
</code></pre>
<p>See: <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You are literally printing a generator object representation  </p>
<p>If you want on one line, try printing a list </p>
<pre><code>print([n for n in N])
</code></pre>
<p>Which is just <code>print(N)</code></p>
<p>If you want a line separated string, print that</p>
<pre><code>print("\n".join(map(str, N))) 
</code></pre>
<p>Or write a regular loop and don't micro optimize the lines of code </p>
</div>
<span class="comment-copy">You are creating a generator object and are printing the representation of that object. So that output is in fact expected. What exactly are you trying to achieve?</span>
<span class="comment-copy">The <code>print</code> function takes multiple arguments, and separates each argument with the string specified by the <code>sep</code> keyword argument. You could use <code>print(*(n for n in N), sep='\n')</code> to produce the expected output (or more simply, <code>print(*N, sep='\n')</code>).</span>
<span class="comment-copy">Don't confuse the generator <i>argument</i> with a Perl-like structure <code>print(n) for n in N</code> (which isn't, of course, valid Python).</span>
<span class="comment-copy">but the code: sum(n for n in N]) works. Could you please tell me what are the differences?</span>
<span class="comment-copy"><code>print</code> function calls <code>__str__</code> method of all arguments you pass. <code>sum</code> iterates over argument.</span>
<span class="comment-copy"><code>[print(n) for n in N]</code> returns a list of all None, though, which may be unexpected</span>
<span class="comment-copy">Thanks @cricket_007. Edited.</span>
