<div class="post-text" itemprop="text">
<p>I am new to Python and I am slowly learning via Codewars. I know this is potentially against the rules but I have an efficiency question. </p>
<p>You are given a list of integers</p>
<p>ls = [100, 76, 56, 44, 89, 73, 68, 56, 64, 123, 2333, 144, 50, 132, 123, 34, 89]</p>
<p>You must write a function choose_best_sum(t, k, ls)</p>
<p>such that you find a combination of k integers from ls such that the sum of those k intergers is as close to or equal to t. </p>
<p>My final solution passes the tests but on the more detailed testing fails perhaps because of efficiency. I am trying to understand efficiency more. Here is my code</p>
<pre><code>import itertools

def choose_best_sum(t, k, ls):
    if sum(sorted(ls)[:k]) &gt; t or len(ls) &lt; k:
       return None
    else:
       combos = itertools.permutations(ls, k)
       return max([[sum(i)] for i in set(combos) if sum(i) &lt;= t])[0]
</code></pre>
<p>Could someone highlight where the bottleneck is here (I assume on the permutations call) and how this function could be made faster?</p>
<p>EDIT:</p>
<p>The above solution profiled gave</p>
<p>1806730 function calls in 0.458 seconds</p>
<pre><code> ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.457    0.457 &lt;string&gt;:1(&lt;module&gt;)
    1    0.000    0.000    0.457    0.457 exercises.py:14(choose_best_sum)
742561    0.174    0.000    0.305    0.000 exercises.py:19(&lt;genexpr&gt;)
321601    0.121    0.000    0.425    0.000 exercises.py:20(&lt;genexpr&gt;)
    1    0.000    0.000    0.458    0.458 {built-in method builtins.exec}
    1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
    1    0.032    0.032    0.457    0.457 {built-in method builtins.max}
    1    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
742561    0.131    0.000    0.131    0.000 {built-in method builtins.sum}
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</code></pre>
<p>using the assistance I got my final solution was:</p>
<pre><code>def choose_best_sum(t, k, ls):
   ls = [i for i in ls if i &lt; t and i &lt; (t - sum(sorted(ls)[:k-1]))]
   if sum(sorted(ls)[:k]) &gt; t or len(ls) &lt; k:
      return None
   else:
      return max(s for s in (sum(i) for i in itertools.combinations(ls, k)) if s &lt;= t)
</code></pre>
<p>Ordered by: standard name</p>
<p>7090 function calls in 0.002 seconds</p>
<pre><code> ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.003    0.003 &lt;string&gt;:1(&lt;module&gt;)
 2681    0.001    0.000    0.003    0.000 exercises.py:10(&lt;genexpr&gt;)
    1    0.000    0.000    0.003    0.003 exercises.py:5(choose_best_sum)
    1    0.000    0.000    0.000    0.000 exercises.py:6(&lt;listcomp&gt;)
    1    0.000    0.000    0.003    0.003 {built-in method builtins.exec}
    1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
    1    0.000    0.000    0.003    0.003 {built-in method builtins.max}
   17    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}
 4385    0.001    0.000    0.001    0.000 {built-in method builtins.sum}
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a couple of obvious flaws in the expression</p>
<pre><code>max([[sum(i)] for i in set(combos) if sum(i) &lt;= t])[0]
</code></pre>
<ol>
<li><p>You are running <code>sum(i)</code> twice for no good reason;</p></li>
<li><p>You are packing the result into a list (<code>[sum(i)]</code>) and then unpacking it (<code>[0]</code>)</p></li>
<li><p>You are converting <code>combos</code> to a set for no reason</p></li>
</ol>
<p>Try replacing it with</p>
<pre><code>sums = [sum(c) for c in combos]
return max(s for s in sums if s &lt;= t)
</code></pre>
<p><strong>Edit:</strong> ok, a few ideas on a better algorithm:</p>
<p>D'oh! First, use <code>itertools.combinations</code> instead of <code>itertools.permutations</code>. You are just taking the sum; the order of items makes no difference. If you are running on ie k = 4, <code>combinations</code> will return 4! == 24 times fewer entries than <code>permutations</code> on the same input data.</p>
<p>Second, we want to discard as many items as possible from <code>ls</code> at the very start. Obviously we can throw out any value &gt; t; but we can get a tighter bound than that. If we add the (k - 1) smallest values, the largest allowable value must be &lt;= t - (k-1)_sum.</p>
<p>(If we were looking for an exact sum, we could run this trick in reverse - adding the (k - 1) largest values would give us a minimum allowable value - and we could repeatedly apply those two rules to discard more possibilities. That does not apply here though.)</p>
<p>Third, we could look at all combinations of (k - 1) values, then use <code>bisect.bisect_left</code> to jump directly to the best possible k'th value. There's a bit of a complication, because you have to double-check that the k'th value has not already been selected as one of the (k - 1) values - you can't do that directly using the built-in <code>itertools.combinations</code> function, but you could use a modified copy of the <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations code</a> (ie test that <code>bisect_left</code> returns an index higher than the last one currently in use).</p>
<p>Together these should speed up your code by a factor of <code>len(ls) * k * k!</code>... Good luck!</p>
<p><strong>Edit 2:</strong></p>
<p>Let this be a lesson in the dangers of over-optimization :-)</p>
<pre><code>from bisect import bisect_right

def choose_best_sum(t, k, ls):
    """
    Find the highest sum of `k` values from `ls` such that sum &lt;= `t`
    """
    # enough values passed?
    n = len(ls)
    if n &lt; k:
        return None

    # remove unusable values from consideration
    ls = sorted(ls)
    max_valid_value = t - sum(ls[:k - 1])
    first_invalid_index = bisect_right(ls, max_valid_value)
    if first_invalid_index &lt; n:
        ls = ls[:first_invalid_index]
        # enough valid values remaining?
        n = first_invalid_index   # == len(ls)
        if n &lt; k:
            return None

    # can we still exceed t?
    highest_sum = sum(ls[-k:])
    if highest_sum &lt;= t:
        return highest_sum

    # we have reduced the problem as much as possible
    #   and have not found a trivial solution;
    # we will now brute-force search combinations of (k - 1) values
    #   and binary-search for the best kth value
    best_found = 0
    # n = len(ls)      # already set above
    r = k - 1
    # itertools.combinations code copied from
    #   https://docs.python.org/3/library/itertools.html#itertools.combinations
    indices = list(range(r))
    # Inserted code - evaluate instead of yielding combo
    prefix_sum = sum(ls[i] for i in indices)          #
    kth_index = bisect_right(ls, t - prefix_sum) - 1  # location of largest possible kth value
    if kth_index &gt; indices[-1]:                       # valid with rest of combination?
        total = prefix_sum + ls[kth_index]            #
        if total &gt; best_found:                        #
            if total == t:                            #
                return t                              #
            else:                                     #
                best_found = total                    #
    x = n - r - 1    # set back by one to leave room for the kth item
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + x:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        # Inserted code - evaluate instead of yielding combo
        prefix_sum = sum(ls[i] for i in indices)          #
        kth_index = bisect_right(ls, t - prefix_sum) - 1  # location of largest possible kth value
        if kth_index &gt; indices[-1]:                       # valid with rest of combination?
            total = prefix_sum + ls[kth_index]            #
            if total &gt; best_found:                        #
                if total == t:                            #
                    return t                              #
                else:                                     #
                    best_found = total                    #
        else:
            # short-circuit! skip ahead to next level of combinations
            indices[r - 1] = n - 2

    # highest sum found is &lt; t
    return best_found
</code></pre>
</div>
<span class="comment-copy">Check out <code>cProfile</code> to figure out exactly which line is slow.</span>
<span class="comment-copy">Looks like <a href="https://www.codewars.com/kata/55e7280b40e1c4a06d0000aa" rel="nofollow noreferrer">codewars.com/kata/55e7280b40e1c4a06d0000aa</a></span>
<span class="comment-copy">The bottleneck is the algorithm that you're using, list all the permutations is slow when you have a large list. Try to use two pointers (one at the beginning and one at the end) on sorted list, which has a time complexity of O(nlogn)</span>
<span class="comment-copy">@GhostRider Yes it is codewars... except I linked to the <i>actual problem under discussion</i> rather than hand-waving at the site.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/8916539/sum-subset-with-a-fixed-subset-size">Sum-subset with a fixed subset size</a>. <a href="https://stackoverflow.com/questions/19572043/given-a-target-sum-and-a-set-of-integers-find-the-closest-subset-of-numbers-tha">Given a target sum and a set of integers, find the closest subset of numbers that add to that target</a>.</span>
<span class="comment-copy">This is a great help. I can clearly see the excessive calls I have made based on your solution.</span>
<span class="comment-copy">Although the tips in the answer are correct I'm pretty sure the detailed tests mentioned above will still fail. @GhostRider try to come up with a more efficient algorithm instead of trying every possible k-length permutation.</span>
<span class="comment-copy">Yes, the detailed tests do still fail. I will still mark it as correct as it has highlighted many flaws in my code that are easily corrected and possibly useful. I suspect there is an elegant mathematical approach to that part of the code. I will keep working on it. Thanks</span>
<span class="comment-copy">@GhostRider: added a few more ideas. Have fun :-)</span>
<span class="comment-copy">Brilliant. Just changing to combinations made a huge difference. I'm going to post the cProfile results for each modification and final result when I've got it all sorted.</span>
