<div class="post-text" itemprop="text">
<p>I would like to dynamically bind descriptors to attribute of a class. </p>
<p>For example I have this descriptor (it is just a dummy example): </p>
<pre><code>class Item(object):
    def __init__(self, filename):
        self.filename = filename

    def __get__(self, obj=None, objtype=None):
        #print '__get__(%s, %s)' % (obj, objtype)
        return open(self.filename).read()

    def __set__(self, obj, val):
        #print '__set__(%s, %s)' % (obj, val)
        open(self.filename, 'w').write(str(val))
</code></pre>
<p>In my main container, I would like to dynamically register my descriptors. </p>
<p>Everything works great if I instanciate the descriptors at the class level: </p>
<pre><code>class Container(object):
    foo = Item('foo')
    bar = Item('bar')
</code></pre>
<p>Unfortunately when I try to associate the descriptor dynamically using <code>setattr</code> I need to put a lot more complexity to my class: </p>
<pre><code>class Container(object):
    def __init__(self, data):
        for attr in data:
            super(Container, self).__setattr__(attr, Item(attr))

    def __setattr__(self, name, value):   
        #print '__setattr__(%s, %s)' % (name, value)
        attr = super(Container, self).__getattribute__(name)
        if hasattr(attr, '__set__'):
            attr.__set__(name, value)
        else:
            super(Container, self).__setattr__(name, value)        

    def __getattribute__(self, name):
        #print '__getattribute__(%s)' % (name)
        attr = super(Container, self).__getattribute__(name)
        if hasattr(attr, '__get__'):
            return attr.__get__(name)
        return attr
</code></pre>
<p>The expected output is: </p>
<pre><code>&gt;&gt;&gt; c = Container(['foo', 'bar'])  
&gt;&gt;&gt; c.foo = 2
&gt;&gt;&gt; c.foo
'2'
</code></pre>
<p>Is there a simpler solution with less kludges?</p>
</div>
<div class="post-text" itemprop="text">
<p>So, you're almost there with your <code>__init__</code> in container. The problems you have:</p>
<ol>
<li>in 99.9% cases you sould never call magic (dunder, __) functions directly. So, your <code>super(...).__setattr__</code> makes no sense, tbh. There's <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer">setattr</a> for this</li>
<li><p>Tricky part with descriptors (btw, from my experience, it's kind of "default" obstruction when people start using them). When you use descriptors in non-dynamic way with</p>
<pre><code>class Container(object):
    foo = Item('foo')
    bar = Item('bar')
</code></pre>
<p>you are setting <code>foo</code> and <code>bar</code> in scope of the class - literally as class attributes. But in your "dynamic" way you're doing it with instance. Idk if you tried to set it as class, but if this was an intention, <code>super</code> doesn't work like this. To set attach descriptor dynamically, you need to attach it to class of your instance (referred by <code>self</code> inside <code>__init__</code>). To do so, access <code>self.__class__</code> or <code>type(self)</code>. So, your code may look like</p>
<pre><code>class Container(object):
    def __init__(self, data):
        for attr in data:
            setattr(type(self), attr, Item(attr))
</code></pre></li>
</ol>
</div>
<span class="comment-copy">Please don't <a href="https://stackoverflow.com/questions/44548995/how-to-add-and-bind-descriptors-dynamically-in-python#comment76116064_44549268">"completely rewrite the question"</a>. Don't be a <a href="https://meta.stackexchange.com/questions/43478/exit-strategies-for-chameleon-questions">chameleon</a>. Major edits that invalidate existing answers are frowned upon by the community.</span>
<span class="comment-copy">@AndrasDeak What solution then? My question was unclear, I could not delete it and I could not either pursue in the same wrong direction. I asked it differently. Eventually the initial goal is the same.</span>
<span class="comment-copy">I didn't thoroughly read your question and the edits, I only saw a 4k rep user ask a question, then leave comments about "completely rewriting the question", following which one of the answers was deleted. If you believe that the original was unclear and there wasn't any point in the existing Q&amp;A pairs, that's fine. I just wanted you to be consciously aware of the issues with rewriting questions (way too many users aren't).</span>
<span class="comment-copy">I completely rewrote the question using your inputs. Could you update your answer ?</span>
<span class="comment-copy">Yup. Take a look for updated one</span>
<span class="comment-copy">I have a class that will be called multiple times, and each one should have unique properties. Is there a way I could do this without defining the class inside <code>__init__</code>?</span>
<span class="comment-copy">Please create separate question with example for your case, it's hard to answer abstract question when you expect concrete answer ;)</span>
