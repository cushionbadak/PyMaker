<div class="post-text" itemprop="text">
<p>I'm a bot developer but I'm new to Python. I've been reading for hours now, planning the design of a new bot.</p>
<p>I'd like your opinion on performance issues with running a GUI and a very fast core loop to keep a modest array of game entities updated.</p>
<p>The bot consists of a main array in an infinite loop which continually updates and also runs calculations. I know from my past bots that GUIs provide a problem with performance as they need to wait to detect events.</p>
<p>I've looked at the possibility of a second thread, but I read that tkinter doesn't like more than one thread.</p>
<p>I've checked out the idea of using .after to run the core array loop from the tkinter mainloop but my gut tells me that this would be bad practice.</p>
<p>Right now I feel all I can do is try to contain the GUI and the core array all in one loop but this has never been good for performance.</p>
<p>Are there better ways of designing the structure of this bot that I have not discovered?</p>
<p><strong>Edit</strong></p>
<p>I decided on removing the mainloop from tinker and simply using .update() to update any gui components I have, right now, this only consists of some labels which overlay the game screen.</p>
<p>Both the labels and the bot's functions run great so far.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using tkinter and <code>.after</code>, I wrote a little single-threaded program that displays 1000 ovals that move randomly across the screen, updating every 50ms, and I don't see any lag. At 10ms I think I maybe see a tiny bit of lag. </p>
<p>These are simple objects with very little math to calculate the new positions, and there's no collision detection except against the edges of the window.</p>
<p>The GUI seems responsive. I am able to type into a text window in the same GUI as fast as I can.  </p>
<p>I don't know how that compares to what you want to do. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run a CPU-intensive work in a separate Python <em>thread,</em> it will starve other threads of CPU. Python threads are only good for efficient waiting for I/O (the cause being the <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock" rel="nofollow noreferrer">Global Interpreter Lock</a>).</p>
<p>I'd either try <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a>, which may be fine depending on the amount of data you need to pass between processes, or a different language. </p>
</div>
<span class="comment-copy">what is your definition of "modest array of game entities"? 10? 100? 1000? Have you done any experiments to see how using <code>.after</code> performs? It shouldn't take but a few dozen lines of code.</span>
<span class="comment-copy">There is approximately 1,000 stored variables in the array that I'd like to be updated about every 100ms, taken from reading the game's memory.  I've not done experiments yet as admittedly, I'm new to Python. I just wanted to lean on the experience of those here, so I don't go on a tangent and down a path that I'll waste hours and hours only to find I'm using totally the wrong method of doing this.</span>
<span class="comment-copy">Thank you, that is useful.</span>
<span class="comment-copy">Thanks, I thought as much. I'll research multithreading in the meantime.</span>
