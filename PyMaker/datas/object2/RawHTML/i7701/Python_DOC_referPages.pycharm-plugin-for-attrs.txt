<div class="post-text" itemprop="text">
<p><a href="https://github.com/python-attrs/attrs" rel="noreferrer">attrs</a> is a useful package for reducing boilerplate. Example:</p>
<pre><code>class SomeClass(object):
    a_number = attr.ib(default=42)
    list2_of_numbers = attr.ib(default=attr.Factory(list))
</code></pre>
<p>PyCharm does not offer code completion for the generated <code>__init__</code> method, is there a plugin that can do this? Or some other work around?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update Aug 2018</strong> - As per <a href="https://stackoverflow.com/a/51572491/5567657">Hynek's Answer</a>, attrs support is in <a href="https://www.jetbrains.com/pycharm/whatsnew/#toc-2018-2" rel="nofollow noreferrer">PyCharm 2018.2</a>. I'm a month late to the party as I haven't been working in Python much lately...</p>
<p>My original answer is as follows, although it only applies if you are on PyCharm 2018.1 or lower...</p>
<hr/>
<p>The only workaround I'm aware of (as of PyCharm 2017.2.4) is to define a redundant <code>__init__</code> in the class declaration. PyCharm's code completion picks up this method ok, but at runtime the attrs-generated <code>__init__</code> will override it. For example (with <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a>):</p>
<pre><code>import attr
from typing import List, Optional


@attr.s
class SomeClass:

    def __init__(self, a_number: int = 42,
                 list2_of_numbers : Optional[List[int]] = None) -&gt; None:
        ...

    a_number: int = attr.ib(default=42)
    list2_of_numbers: List[int] = attr.ib(default=attr.Factory(list))
</code></pre>
<p><a href="https://i.stack.imgur.com/giLG7.png" rel="nofollow noreferrer">PyCharm code completion screen shot</a></p>
<p>I also tried using a stub file to remove the dummy <code>__init__</code> out of the class declaration, with a view to deleting the .pyi if this is ever supported, but it didn't work. </p>
<p>Of course, this kind of defeats the purpose of using attrs in the first place (i.e. reducing class declaration boilerplate, aiding maintainability etc.)</p>
<p>If you add, remove or amend an attr.ib(), you'll need to remember to manually update the <code>__init__</code> signature which is antithetical to attrs' philosophy.</p>
<p>FYI, Jonas Obrist <a href="https://twitter.com/ojiidotch/status/892289599413731328" rel="nofollow noreferrer">tweeted one of the Jetbrains Devs</a> about attrs support earlier in the year regarding the 2017.3 release, so fingers crossed...</p>
<p><strong>EDIT</strong></p>
<p>Actually, there is a <em>slightly</em> more palatable workaround. Just pass <code>init=False</code> to <code>attr.s</code> and define your <code>__init__</code> method as you normally would. You're still not leveraging the <em>full</em> magic of attrs, but hey... it's better than nothing.</p>
<p>Take care to intialize your default values in your manual <code>__init__</code> rather than the attr.ib declaration against the class. As per <a href="http://www.attrs.org/en/stable/api.html" rel="nofollow noreferrer">the docs</a>, the attr.ib's default value will only be initialised inside an attrs-generated <code>__init__</code>.</p>
<p>Aside from that, you still get your other dunder methods, validation, and all the other goodness as far as I can tell.</p>
<pre><code>import attr
from typing import List, Optional


@attr.s(init=False)
class SomeClass:

    a_number: int = attr.ib()
    list2_of_numbers: List[int] = attr.ib()

    def __init__(self, a_number: int = 42,
                 list2_of_numbers : Optional[List[int]] = None) -&gt; None:
        self.a_number: int = a_number
        self.list2_of_numbers: List[int] = list2_of_numbers or []
        # Replicate behaviour of attrs-generated __init__
        attr.validate(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Good news: PyCharm 2018.2 has added support for attrs.</p>
</div>
<div class="post-text" itemprop="text">
<p>There have been some interesting developments lately (early '18) on this front:</p>
<ul>
<li>an attrs PR to <a href="https://github.com/python-attrs/attrs/pull/238" rel="nofollow noreferrer">add PEP 484 stubs</a>, which are recognized by PyCharm (but does not add support for <code>__init__</code>, and <code>cmp</code> special methods)</li>
<li>a python typeshed PR to <a href="https://github.com/python/typeshed/pull/1838" rel="nofollow noreferrer">add those stubs to the official third-party collection</a></li>
<li>a mypy PR to <a href="https://github.com/python/mypy/pull/4397" rel="nofollow noreferrer">add support for attrs special methods</a></li>
<li><a href="https://youtrack.jetbrains.com/issue/PY-26354" rel="nofollow noreferrer">a ticket for adding this feature to PyCharm</a> (mentioned above) is getting a lot of votes (add yours!)</li>
<li><a href="https://blog.jetbrains.com/pycharm/2018/01/pycharm-2018-1-eap-2/" rel="nofollow noreferrer">PyCharm 2018.1 EAP2</a> added support for <a href="https://www.python.org/dev/peps/pep-0557/" rel="nofollow noreferrer">dataclasses</a>, which is a new module coming in the python 3.7 standard library that is heavily inspired by <code>attrs</code></li>
</ul>
<p>Expect a number of these issues to be resolved in the next few months. Hopefully all of them!</p>
</div>
<span class="comment-copy">Turn on code inspection at runtime or add type annotations.</span>
<span class="comment-copy">@jakob-bowyer How doesn code inspection at runtime help here? For me, missing pycharm code completion is why I don't use attrs.</span>
<span class="comment-copy">Because code completion is filled in the first time your code is executed.</span>
<span class="comment-copy">I created ticket for attrs support: <a href="https://youtrack.jetbrains.com/issue/PY-26354" rel="nofollow noreferrer">youtrack.jetbrains.com/issue/PY-26354</a></span>
<span class="comment-copy">Anyone interested, pls go to jetbrains ticket and click voters. :D</span>
<span class="comment-copy">attrs support included in Pycharm 2018.2, which will be released soon. :P</span>
