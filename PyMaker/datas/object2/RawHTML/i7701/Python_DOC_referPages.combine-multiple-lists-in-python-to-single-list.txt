<div class="post-text" itemprop="text">
<pre><code>def combine_lists(lt1, lt2):
    if lt1[0] and lt2[0]:
        lt = [lt1, lt2]
    elif lt1[0] and not lt2[0]:
        lt = [lt1]
    elif not lt1[0] and lt2[0]:
        lt = [lt2]
    elif not lt1[0] and not lt2[0]:
        lt = [None, None]

    return lt
</code></pre>
<p>The function above combines 2 lists into a single list. E.g. <code>lt1</code> could be somthing like <code>['a', 'b']</code></p>
<p>What is the most pythonic way to extend this from just 2 input parameters to an arbitrary number of lists as input. The output should still be a list of lists</p>
<p>--EDIT</p>
<p>The expected answer for lt1 = [1, 2, 3], lt2=[4, 5, 6] should be [[1, 2, 3], [4, 5, 6]] </p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use list comprehension here, and let it work for an <em>arbitrary</em> number of arguments using <code>*args</code>:</p>
<pre><code>def combine_lists(*args):
    return [lt if lt[0] else None for lt in args]
</code></pre>
<p>The code works as follows, by using list comprehesion, we will iterate over the <code>args</code>, a tuple of the unnamed arguments with which <code>combine_lists</code> was called. For each of these lists <code>lt</code>, we check <code>if lt[0]</code> if that is the case, then we add <code>lt</code> to the list, otherwise we add <code>None</code>.</p>
<p>Note that this program can <strong>raise an error</strong>: in case one of the <code>lt</code>s <strong>can not be indexed</strong>, or <strong>has no element at index 0</strong>. So it is quite unsafe.</p>
<p>You can - by altering the semantics slighly - prevent this from happening: if we are dealing with an empty list, then we add that list in the following example:</p>
<pre><code>def combine_lists(*args):
    return [lt if not lt or lt[0] else None for lt in args]
</code></pre>
<p>This will work given all objects are lists, tuples, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question, you want something like this:</p>
<pre><code>&gt;&gt;&gt; def combine(*args):
...     return list(args)
... 
&gt;&gt;&gt; print combine([1,2,3], ['a','b','c'], [True, False])
[[1, 2, 3], ['a', 'b', 'c'], [True, False]]
</code></pre>
<p>So, we're using <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer" title="positional arguments">positional arguments</a> from <code>args</code> (which are stored in a <code>tuple</code>) and converting them to a list. It works for any number of arguments, and it'll happily combine anything (not just lists) into a list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>    def combine_lists(lt1, lt2):
       lt = []
       lt.append(lt1)
       lt.append(lt2)
       return lt
</code></pre>
<p>You can simply do this. It will give you the list of the two lists you have.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map()</code> with multiple arguments <code>*args</code> and return a <code>map object</code> like this example:</p>
<pre><code>def combine_list(*args):
    return map(list, args)


final = list(combine(['a','b'], ['c', 'd'], ['e', 'f']))
print(final)
</code></pre>
<p>Output:</p>
<pre><code>[['a', 'b'], ['c', 'd'], ['e', 'f']]
</code></pre>
</div>
<span class="comment-copy">Can you please give example input <i>and output</i>? So what is <code>lt1</code>, <code>lt2</code>, and what should <code>lt</code> be in the end?</span>
<span class="comment-copy">Also, explain the conditions you are making. What is the goal of this function exactly? Are you simply just trying to do <code>[1, 2, 3]</code> + <code>[4, 5, 6]</code> = <code>[1, 2, 3, 4, 5, 6]</code>? or <code>[[1, 2, 3], [4, 5, 6]]</code>?</span>
<span class="comment-copy">If you're trying to check if a list is empty with <code>not lt2[0]</code> / <code>not lt1[0]</code> then you'll be up for a surprise, as this will give you an Exception. Even more so if you intend to check if the list is <code>None</code> instead of empty.</span>
<span class="comment-copy">thanks all, the expected answer for [1, 2, 3] + [4, 5, 6] should be [[1, 2, 3], [4, 5, 6]]</span>
<span class="comment-copy">What's the expected output for <code>combine([0], [1])</code>, <code>combine([], [])</code> and <code>combine([1], [0], [2])</code>?</span>
<span class="comment-copy">Hm, how about <code>[lt if not lt else lt if lt[0] else None for lt in args]</code>. As far as I can tell, OP wants <code>None</code> if the first element is falsy, but wants an empty list in case of an empty list.</span>
<span class="comment-copy">@juanpa.arrivillaga: this indeed solves the matter, given all elements are <code>lists</code>. A generic object for instance, has a truthiness that is <code>True</code>, but has no <code>object[0]</code>.</span>
<span class="comment-copy">Ah, better with the <code>or</code> for sure.</span>
<span class="comment-copy">OP stated <code>The output should still be a list of lists</code>.</span>
<span class="comment-copy">Humm ok i missed that part. i'm updating my answer so. Thanks for pointing it</span>
<span class="comment-copy">Better wait until OP specifies input values and the desired output ;)</span>
<span class="comment-copy">Pendantic note: <code>map</code> is not a generator.</span>
<span class="comment-copy">You say you can use <code>map</code> and return a generator. But that isn't what you are returning. You are returning a <code>map</code> object, which is not a generator.</span>
