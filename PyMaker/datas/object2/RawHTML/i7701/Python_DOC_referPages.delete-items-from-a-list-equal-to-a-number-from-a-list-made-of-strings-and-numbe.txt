<div class="post-text" itemprop="text">
<p>I have a list of the following structure which is simplified for the purpose of this question:</p>
<p><code>x = ["f","f","f",0,"f",0,0,0"f","f"]</code></p>
<p>Where "f" represents a file path as a string. What I wish to do is remove all elements from the list equal to zero. I have tried iterating over like so:</p>
<pre><code>for h in range(len(x)):
    if x[g] == "0":
        del x[g]
    else:
        pass
</code></pre>
<p>This has not worked as deleting from a list being iterated over does not work and it seems to be like list comprehension is the answer I am looking for but I can't seem to get the formatting down:</p>
<pre><code>x = [h for h in range(len(x)) if h != 0]
</code></pre>
<p>So my  final desired output would be:</p>
<p><code>x = ["f","f","f",f","f",f"]</code></p>
<p>How do I go about achieveing this?</p>
<p>EDIT: Patrick's answer in the comments below is exactly what I was looking and solves this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I want also note that in a case when <strong>x</strong> is a large size list you may want iterator to be returned after list filtering because using iterator on a large data set may increase your performance (See <a href="https://stackoverflow.com/questions/628903/performance-advantages-to-iterators">Performance Advantages to Iterators?</a> for more information).
In this case you can use built-in <em>filter(function, iterable)</em> function that will return iterator in a Python 3. </p>
<pre><code>x = ["f","f","f",0,"f",0,0,0,"f","f"]
for ch in filter(lambda sym: sym != 0, x):
    print(ch)
</code></pre>
<p>As a result only elements not equal to 0 will be printed.
See <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#filter</a> to get more information about the <em>filter</em> built-in. </p>
<p>Another approach is to use generator comprehension. The note here is that you will be able to iterate over the generator just once. But you will also have some benefits, each result will be evaluating and yielding on the fly so your memory will be conserved by using a generator expression instead. </p>
<p>Just use this example to use generator comprehension:</p>
<pre><code>x = ["f","f","f",0,"f",0,0,0,"f","f"]
for ch in (sym for sym in x if sym !=0):
    print(ch)
</code></pre>
<p>See more generator comprehension examples and advantages here <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0289/</a></p>
<p>Also be accurate filtering results with True value testing.</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:</p>
</blockquote>
<ul>
<li>None</li>
<li>False</li>
<li>zero of any numeric type, for example, 0, 0.0, 0j.</li>
<li>any empty sequence, for example, '', (), [].</li>
<li>any empty mapping, for example, {}.</li>
<li>instances of user-defined classes, if the class defines a <strong>bool</strong>() or <strong>len</strong>() method, when that method returns the integer zero or bool value False.</li>
</ul>
<p>So expression <code>[sym for sym in x if sym]</code> will remove all False symbols (i.e. False, '', etc.) from your results. So be accurate using True value testing (see <a href="https://docs.python.org/3.6/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">https://docs.python.org/3.6/library/stdtypes.html#truth-value-testing</a> for more information).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can replace all 0 and "0" with:</p>
<pre><code>li = ["f","f","f",0,"f",0,"0",0,"f","f"]
[y for y in l if y not in ("0",0)]

# results:
['f', 'f', 'f', 'f', 'f', 'f']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try this:</strong></p>
<pre><code>x = [h for h in x if h != 0]
</code></pre>
<hr/>
<p>Some small bits of advice:</p>
<ol>
<li>You don't have to specify <code>else: pass</code>.</li>
<li><p>You can iterate directly over a list, i.e. instead of:</p>
<pre><code>for i in range(len(x)):
    x[i]
</code></pre>
<p>you can simply use:</p>
<pre><code>for i in x:
    i
</code></pre></li>
<li><p><code>if x[g] == "0"</code> would only check if <code>x[g]</code> is equal to the string <code>"0"</code>, not the actual number. Judging by your code, you want <code>if x[g] == 0</code> instead.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I hope this piece of code will serve your purpose.</p>
<pre><code>x = [i for i in x if i]
</code></pre>
<p>It's mean get all value from x which is not 0</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you can't do this looping forwards is because you're shortening the list as you go along, but if you loop backwards you won't have this issue:</p>
<pre><code>&gt;&gt;&gt; x = ["f","f","f","0","f","0","0","0","f","f"]
&gt;&gt;&gt; for h in range(len(x)-1,-1,-1):
...     if x[h] == "0":
...         del x[h]
...
&gt;&gt;&gt; x
['f', 'f', 'f', 'f', 'f', 'f']
</code></pre>
</div>
<span class="comment-copy">Assuming there is no <code>"f"</code> that is actually <code>""</code> you can do <code>[i for i in x if i]</code></span>
<span class="comment-copy"><code>"0"</code> and <code>0</code> are not the same.</span>
<span class="comment-copy">Yep that perfectly solves it, thank you!</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1157106/remove-all-occurrences-of-a-value-from-a-python-list">Remove all occurrences of a value from a Python list</a></span>
