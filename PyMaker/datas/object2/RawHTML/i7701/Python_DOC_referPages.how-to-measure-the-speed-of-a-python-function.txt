<div class="post-text" itemprop="text">
<p>I usually write codes(functions) on www.codefights.com as a competitor.So speed is one of the important part of the code . How can i measure the speed of a certain code in python language whether it is the lambda function or a def function .</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the timeit module in pythons standard libaray:</p>
<p><a href="https://docs.python.org/2/library/timeit.html" rel="noreferrer">https://docs.python.org/2/library/timeit.html</a></p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)
0.8187260627746582
&gt;&gt;&gt; timeit.timeit('"-".join([str(n) for n in range(100)])', number=10000)
0.7288308143615723
&gt;&gt;&gt; timeit.timeit('"-".join(map(str, range(100)))', number=10000)
0.5858950614929199
</code></pre>
<p>To give the timeit module access to functions you define, you can pass a setup parameter which contains an import statement:</p>
<pre><code>def test():
    """Stupid test function"""
    L = []
    for i in range(100):
        L.append(i)

if __name__ == '__main__':
    import timeit
    print(timeit.timeit("test()", setup="from __main__ import test"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In 3 Step ;)</p>
<p><strong>Step 1:</strong> install <code>line_profiler</code></p>
<pre><code>pip install line_profiler
</code></pre>
<p><strong>Step 2:</strong> Add <code>@profile</code> to your code:</p>
<pre><code>from time import sleep

@profile
def so_slow(bar):
    sleep(5)
    return bar

if __name__ == "__main__":
    so_slow(5)
</code></pre>
<p><strong>Step 3:</strong> Test your code:</p>
<pre><code>kernprof -l -v your_code.py
</code></pre>
<p></p>
<h1>Result</h1>
<pre><code>Wrote profile results to your_code.py.lprof
Timer unit: 1e-06 s

Total time: 5.00283 s
File: your_code.py
Function: so_slow at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def so_slow(bar):
     6         1      5002830 5002830.0    100.0      sleep(5)
     7         1            2      2.0      0.0      return bar
</code></pre>
<h1>memory_profiler</h1>
<p>You can use <code>memory_profiler</code> too, Install it, add profile and call it:</p>
<pre><code>pip install memory_profiler
python -m memory_profiler your_code.py
</code></pre>
<p><br/></p>
<h1>Result:</h1>
<pre><code>Filename: your_code.py

Line #    Mem usage    Increment   Line Contents
================================================
     4   21.289 MiB    0.000 MiB   @profile
     5                             def so_slow(bar):
     6   21.289 MiB    0.000 MiB       sleep(5)
     7   21.289 MiB    0.000 MiB       return bar
</code></pre>
<h1>Update:</h1>
<p>You can use <a href="http://mg.pov.lt/objgraph/" rel="nofollow noreferrer">objgraph</a> to find <code>memory leak</code> or draw a graph of your code:</p>
<pre><code>from time import sleep

import objgraph
x = [1]

objgraph.show_backrefs([x], filename='sample-backref-graph.png')

def so_slow(bar):
    sleep(5)
    return bar

if __name__ == "__main__":
    so_slow(5)
</code></pre>
<p><br/></p>
<h1>Result:</h1>
<p><a href="https://i.stack.imgur.com/xfJiO.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/xfJiO.png"/></a></p>
<p>Reference : <a href="https://www.huyng.com/posts/python-performance-analysis" rel="nofollow noreferrer">A guide to analyzing Python performance</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use it in ipython and use the %time to see the allocation time needed for the execution of the function : </p>
<pre><code>In [1]: def function(a,b):
   ...:     return a+b
   ...: 

In [2]: %time function(1, 2)
CPU times: user 5 µs, sys: 0 ns, total: 5 µs
Wall time: 9.06 µs
Out[2]: 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For instance:</p>
<pre><code>import timeit

def a():
    return 1+1

print timeit.timeit(a, number=1000000)
</code></pre>
</div>
<span class="comment-copy">You can use datetiem for that</span>
<span class="comment-copy">Python provides the <a href="https://docs.python.org/3/library/timeit.html#module-timeit" rel="nofollow noreferrer">timeit</a> module for this.</span>
<span class="comment-copy">Tell us what your environment is. Are you using IPython or Spyder, for example? Some environments have shortcuts for this kind of thing.</span>
<span class="comment-copy">Use the <code>timeit</code> module. Or make a custom timing decorator using the <code>time</code> module.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/889900/accurate-timing-of-functions-in-python">Accurate timing of functions in python</a></span>
