<div class="post-text" itemprop="text">
<p>I'm trying to write lists of information onto a .csv file in python. So far, I've only been able to get the header to print. I want to grab 2 columns from an existing .csv file to write into the new .csv file with my data. so far, I have </p>
<pre><code>def get_id_size():
    read_file = pandas.read_csv('poem_info.csv')
    poemid = (read_file[['poemname']])
    poemsize = (read_file[['poemsize']])
    return (poemid, poemsize) #this is the columns i want in my new.csv file

    with open('poem_data.csv', 'w') as outfile:
        # write header
        outfile.write('poemid,poemsize,cli,ari\n')
</code></pre>
<p>my new data is in</p>
<pre><code>        cli = calculate_cli
        ari = calculate_ari
</code></pre>
<p>So my question would be: How can I assign poemid, poemsize, cli, and ari to a csv file? I'm very new to python and I can't figure out the syntax to do so</p>
</div>
<div class="post-text" itemprop="text">
<p>Pandas is not required but it will simplify your life. You could do the following (removing the function <code>get_id_size()</code> altogether):</p>
<pre><code>import pandas as pd

df = pd.read_csv('poem_info.csv')

# Change the column name of poemname
df.rename(columns={'poemname':'poemid'}, inplace=True)

# Add the new columns
df['cli'] = calculate_cli()
df['ari'] = calculate_ari()

# Export
df.to_csv('poem_data.csv',header=True,index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, I'm not a <code>pandas</code> guru, but you don't really need it here:</p>
<pre><code>import csv

with open('poem.csv', newline='') as inf,
     open('poem_data.csv', 'w', newline='') as outf:
    csvout = csv.writer(outf)
    csvout.writerow(['poemid', 'poemsize', 'cli', 'ari'])
    for (poemid, size, *_), c, a in zip(csv.reader(inf), cli, ari):
        csvout.writerow([poemid, size, c, a])
</code></pre>
<p>That reads from the input file (ignoring all fields past the first two; if the fields are actually index 1 and 3, you could use <code>for (_, poemid, _, size, *_), c, a in zip(...):</code> instead), pairs them up with your computed values, then writes them out. I'm sure there is a nicer way in <code>pandas</code>, but this doesn't require third party modules at all, so it may be preferable in some cases.</p>
<p>To split this up into functions, you'd need to either open the file outside the function or listify the results (so the <code>with</code> block doesn't cut off access to the file before you're done. For example:</p>
<pre><code>def get_id_size():
    with open('poem.csv', newline='') as inf:
        return [(poemid, size) for poemid, size, *_ in csv.reader(inf)]

cli = calculate_cli()
ari = calculate_ari()

with open('poem_data.csv', 'w', newline='') as outfile:
    csvout = csv.writer(outfile)
    # write header
    csvout.writerow(['poemid', 'poemsize', 'cli', 'ari'])
    for (poemid, size), c, a in zip(get_id_size(), cli, ari):
        csvout.writerow([poemid, size, c, a])
</code></pre>
<p>Note: This is Py3 code; changes would be needed for the Py2 <code>csv</code> module.</p>
</div>
<span class="comment-copy">Do you actually need <code>pandas</code>? Doesn't seem like you're using it for much of anything that the built-in <code>csv</code> module (particularly on Py3, where it's Unicode friendly) couldn't handle.</span>
<span class="comment-copy">I don't particularly need it, but I thought it would be faster if I read into the existing csv file using pandas</span>
<span class="comment-copy">Are <code>calculate_cli()</code> and <code>calculate_ari()</code> using the value from <code>poemid</code> and <code>poemsize</code>?</span>
<span class="comment-copy">This worked for me! Thanks!</span>
<span class="comment-copy">Thanks! I'm running in Py3, but when I implemented your code, I get an     "csvout.writerow(['poemid', 'poemsize', 'cli', 'ari']) io.UnsupportedOperation: not writable" error</span>
<span class="comment-copy">@emptybladder: Yeah, typo. Forgot to pass the mode when opening for write. Already fixed (just added <code>'w'</code> as second argument to <code>open</code> for <code>outf</code>. Sorry for confusion.</span>
<span class="comment-copy">(at least on Windows) you should open <code>csv.writer</code> files as binary. <code>open('poem_data.csv', 'wb', newline='')</code> EDIT: oh hmm, maybe that's just in py2</span>
<span class="comment-copy">@AdamSmith: That's only for Python 2. On Python 3, you want text mode (<code>csv</code> writes <code>str</code>, not <code>bytes</code>); the <code>newline=''</code> is what prevents line ending translation (so <code>csv</code> writes newlines appropriate to the dialect regardless of Windows vs. Linux vs. old Mac weirdness). See <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">the modern docs</a>, specifically <a href="https://docs.python.org/3/library/csv.html#id3" rel="nofollow noreferrer">the final footnote</a>.</span>
<span class="comment-copy">@ShadowRanger aye, just old crufts of long-deprecated knowledge from the days of yore cropping up in my head. Thanks for the clarification!</span>
