<div class="post-text" itemprop="text">
<p>Let's say I have two objects of a same class: objA and objB. Their relationship is the following:</p>
<pre><code>(objA == objB)    #true
(objA is objB)    #false
</code></pre>
<p>If I use both objects as keys in a Python dict, then they will be considered as the same key, and overwrite each other. Is there a way to override the dict comparator to use the <code>is</code> comparison instead of <code>==</code> so that the two objects will be seen as different keys in the dict?</p>
<p>Maybe I can override the equals method in the class or something? To be more specific, I am talking about two Tag objects from the BeautifulSoup4 library.</p>
<p>Here's a more specific example of what I am talking about:</p>
<pre><code>from bs4 import BeautifulSoup

HTML_string = "&lt;html&gt;&lt;h1&gt;some_header&lt;/h1&gt;&lt;h1&gt;some_header&lt;/h1&gt;&lt;/html&gt;"

HTML_soup = BeautifulSoup(HTML_string, 'lxml')

first_h1 = HTML_soup.find_all('h1')[0]      #first_h1 = &lt;h1&gt;some_header&lt;/h1&gt;
second_h1 = HTML_soup.find_all('h1')[1]     #second_h1 = &lt;h1&gt;some_header&lt;/h1&gt;

print(first_h1 == second_h1)        # this prints True
print(first_h1 is second_h1)        # this prints False

my_dict = {}
my_dict[first_h1] = 1
my_dict[second_h1] = 1

print(len(my_dict))                 # my dict has only 1 entry!

# I want to have 2 entries in my_dict: one for key 'first_h1', one for key 'second_h1'.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>first_h1</code> and <code>second_h1</code> are <em><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#tag" rel="nofollow noreferrer"><code>Tag</code> class</a> instances</em>. When you do <code>my_dict[first_h1]</code> or <code>my_dict[second_h1]</code>, <em>string representations</em> of the tags are used for hashing. The problem is, both of these <code>Tag</code> instances have the same string representations:</p>
<pre><code>&lt;h1&gt;some_header&lt;/h1&gt;
</code></pre>
<p>This is because <code>Tag</code> class have <code>__hash__()</code> magic method defined as follows:</p>
<pre><code>def __hash__(self):
    return str(self).__hash__()
</code></pre>
<p>One of the workarounds could be to use the <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code></a> values as hashes, but the there is a problem of redefining the <code>Tag</code> classes inside <code>BeautifulSoup</code> itself. You can workaround that problem by making your own custom "tag wrapper":</p>
<pre><code>class TagWrapper:
    def __init__(self, tag):
        self.tag = tag

    def __hash__(self):
        return id(self.tag)

    def __str__(self):
        return str(self.tag)

    def __repr__(self):
        return str(self.tag)
</code></pre>
<p>Then, you'll be able to do:</p>
<pre><code>In [1]: from bs4 import BeautifulSoup
   ...: 

In [2]: class TagWrapper:
   ...:     def __init__(self, tag):
   ...:         self.tag = tag
   ...: 
   ...:     def __hash__(self):
   ...:         return id(self.tag)
   ...: 
   ...:     def __str__(self):
   ...:         return str(self.tag)
   ...: 
   ...:     def __repr__(self):
   ...:         return str(self.tag)
   ...:     

In [3]: HTML_string = "&lt;html&gt;&lt;h1&gt;some_header&lt;/h1&gt;&lt;h1&gt;some_header&lt;/h1&gt;&lt;/html&gt;"
   ...: 
   ...: HTML_soup = BeautifulSoup(HTML_string, 'lxml')
   ...: 

In [4]: first_h1 = HTML_soup.find_all('h1')[0]      #first_h1 = &lt;h1&gt;some_header&lt;/h1&gt;
   ...: second_h1 = HTML_soup.find_all('h1')[1]     #second_h1 = &lt;h1&gt;some_header&lt;/h1&gt;
   ...: 

In [5]: my_dict = {}
   ...: my_dict[TagWrapper(first_h1)] = 1
   ...: my_dict[TagWrapper(second_h1)] = 1
   ...: 
   ...: print(my_dict)
   ...: 
{&lt;h1&gt;some_header&lt;/h1&gt;: 1, &lt;h1&gt;some_header&lt;/h1&gt;: 1}
</code></pre>
<p>It is, though, not pretty and not quite convenient to use. I would reiterate over your initial problem and check if you actually need to put tags into a dictionary.</p>
<p>You can also monkey-patch <code>bs4</code> using Python's introspection powers, like <a href="https://stackoverflow.com/a/34523645/771848">it was done here</a>, but this is going to be entering a rather dangerous territory.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you want to override the operator <code>==</code>, you can choose the option of building a new class and implement the operator <code>==</code>:</p>
<pre><code>def  __eq__(self,  obj) :
      return (self is obj) 
</code></pre>
</div>
<span class="comment-copy">Please provide expected output with example since what you are asking is not a general thing.</span>
<span class="comment-copy">Can't you override the equals method of the object itself?</span>
<span class="comment-copy">In my opinion, Instead of trying to override dict class, you can probably override the equal method of object, or even provide a wrapper for the object if neccesary.</span>
<span class="comment-copy">Try doing this inside your class: <code>def __hash__(self): return id(self)</code></span>
<span class="comment-copy"><code>my_dict{'first_h1': first_h1_value, 'second_h1': second_h1_value}</code>. Why complicate?</span>
<span class="comment-copy">You are missing a <b>eq</b> method in the wrapper class like so:     def __eq__(self, other):         return id(self.tag) But thanks anyway, I got my code working because of your answer!</span>
