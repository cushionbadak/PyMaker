<div class="post-text" itemprop="text">
<p>I have a controller action in aiohttp application.</p>
<pre><code>async def handler_message(request):

    try:
        content = await request.json()
        perform_message(x,y,z)
    except (RuntimeError):
        print("error in perform fb message")
    finally:
        return web.Response(text="Done")
</code></pre>
<p>perform_message is async function. Now, when i call action i want that my action return as soon as possible and perform_message put in event loop.</p>
<p>In this way, perform_message isn't executed</p>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_task" rel="noreferrer">create_task</a> function:</p>
<pre><code>import asyncio

async def handler_message(request):
    ...
    loop = asyncio.get_event_loop()
    loop.create_task(perform_message(x,y,z))
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other way would be to use ensure_future function:</p>
<pre><code>import asyncio

async def handler_message(request):
...
loop = asyncio.get_event_loop()
loop.ensure_future(perform_message(x,y,z))
...
</code></pre>
</div>
<span class="comment-copy">It is my understanding that the task is not actually executed until it is awaited. Is there a way to create the task, start it and await/get-the-result later?</span>
<span class="comment-copy">@Jeppe <code>create_task</code> method returns a Task object: <code>task = loop.create_task(...)</code>. You can store it somewhere and await later.</span>
<span class="comment-copy">Yes, but it is still not started until awaited, right? What if you want to create it, start it, do something else and then await it (it might possibly be done and if not, it blocks until complete)</span>
<span class="comment-copy">@Jeppe no, create_task will start it as soon as possible. I encourage you to test it (you don't have to await the result at all).</span>
<span class="comment-copy">@HossamAl-Dokkani Dude, how about you check it before commenting? It does start the task. You don't have to await it. Period.</span>
<span class="comment-copy">That would raise an <code>AttributeError: '_UnixSelectorEventLoop' object has no attribute 'ensure_future'</code>. <code>ensure_future</code> is a function the <code>asyncio</code> module, not a method of the event loop. It is also essentially the same as <code>loop.create_task</code> if you are only dealing with coroutines.</span>
