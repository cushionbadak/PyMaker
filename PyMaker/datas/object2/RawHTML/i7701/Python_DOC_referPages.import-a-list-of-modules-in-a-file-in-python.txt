<div class="post-text" itemprop="text">
<p>How do I import other files in Python?</p>
<ol>
<li>How exactly can I import a specific python file like <code>import file.py</code>?</li>
<li>How can I import a folder instead of a specific file?</li>
<li>I want to load a Python file dynamically at runtime, based on user
input.</li>
<li>I want to know how to load just one specific part from the file.</li>
</ol>
<p>For example, in <code>main.py</code> I have:</p>
<pre><code>from extra import * 
</code></pre>
<p>Although this gives me all the definitions in <code>extra.py</code>, when maybe all I want is a single definition:</p>
<pre><code>def gap():
    print
    print
</code></pre>
<p>What do I add to the <code>import</code> statement to just get <code>gap</code> from <code>extra.py</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>importlib</code> is recent addition in Python to programmatically import a module. It just a wrapper around <code>__import__</code> 
See <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="noreferrer">https://docs.python.org/3/library/importlib.html#module-importlib</a></p>
<pre><code>import importlib

moduleName = input('Enter module name:')
importlib.import_module(moduleName)
</code></pre>
<hr/>
<p><strong>Update: Answer below is outdated</strong>. Use the more recent alternative above.</p>
<ol>
<li><p>Just <code>import file</code> without the '.py' extension.</p></li>
<li><p>You can mark a folder as a package, by adding an empty file named <code>__init__.py</code>.</p></li>
<li><p>You can use the <code>__import__</code> function. It takes the module name as a string. (Again: module name without the '.py' extension.)</p>
<pre><code>pmName = input('Enter module name:')
pm = __import__(pmName)
print(dir(pm))
</code></pre>
<p>Type <code>help(__import__)</code> for more details.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<h2>There are many ways to import a python file, all with their pros and cons.</h2>
<p>Don't just hastily pick the first import strategy that works for you or else you'll have to rewrite the codebase later on when you find it doesn't meet your needs.  </p>
<p>I'll start out explaining the easiest example #1, then I'll move toward the most professional and robust example #7</p>
<p><strong>Example 1, Import a python module with python interpreter:</strong></p>
<ol>
<li><p>Put this in /home/el/foo/fox.py:</p>
<pre><code>def what_does_the_fox_say():
  print("vixens cry")
</code></pre></li>
<li><p>Get into the python interpreter: </p>
<pre><code>el@apollo:/home/el/foo$ python
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
&gt;&gt;&gt; import fox
&gt;&gt;&gt; fox.what_does_the_fox_say()
vixens cry
&gt;&gt;&gt; 
</code></pre>
<p>You imported fox through the python interpreter, invoked the python function <code>what_does_the_fox_say()</code> from within fox.py.  </p></li>
</ol>
<p><strong>Example 2, Use <code>execfile</code> or (<a href="https://stackoverflow.com/q/6357361/55075"><code>exec</code> in Python 3</a>) in a script to execute the other python file in place:</strong></p>
<ol>
<li><p>Put this in /home/el/foo2/mylib.py:</p>
<pre><code>def moobar():
  print("hi")
</code></pre></li>
<li><p>Put this in /home/el/foo2/main.py:</p>
<pre><code>execfile("/home/el/foo2/mylib.py")
moobar()
</code></pre></li>
<li><p>run the file:</p>
<pre><code>el@apollo:/home/el/foo$ python main.py
hi
</code></pre>
<p>The function moobar was imported from mylib.py and made available in main.py</p></li>
</ol>
<p><strong>Example 3, Use from ... import ... functionality:</strong></p>
<ol>
<li><p>Put this in /home/el/foo3/chekov.py:</p>
<pre><code>def question():
  print "where are the nuclear wessels?"
</code></pre></li>
<li><p>Put this in /home/el/foo3/main.py:</p>
<pre><code>from chekov import question
question()
</code></pre></li>
<li><p>Run it like this:</p>
<pre><code>el@apollo:/home/el/foo3$ python main.py 
where are the nuclear wessels?
</code></pre>
<p>If you defined other functions in chekov.py, they would not be available unless you <code>import *</code></p></li>
</ol>
<p><strong>Example 4, Import riaa.py if it's in a different file location from where it is imported</strong></p>
<ol>
<li><p>Put this in /home/el/foo4/stuff/riaa.py:</p>
<pre><code>def watchout():
  print "computers are transforming into a noose and a yoke for humans"
</code></pre></li>
<li><p>Put this in /home/el/foo4/main.py:</p>
<pre><code>import sys 
import os
sys.path.append(os.path.abspath("/home/el/foo4/stuff"))
from riaa import *
watchout()
</code></pre></li>
<li><p>Run it:</p>
<pre><code>el@apollo:/home/el/foo4$ python main.py 
computers are transforming into a noose and a yoke for humans
</code></pre>
<p>That imports everything in the foreign file from a different directory.</p></li>
</ol>
<p><strong>Example 5, use <code>os.system("python yourfile.py")</code></strong></p>
<pre><code>import os
os.system("python yourfile.py")
</code></pre>
<p><strong>Example 6, import your file via piggybacking the python startuphook:</strong></p>
<p>See: <a href="https://docs.python.org/3/library/user.html" rel="noreferrer">https://docs.python.org/3/library/user.html</a></p>
<p>Put this code into your home directory in <code>~/.pythonrc.py</code></p>
<pre><code>class secretclass:
    def secretmessage(cls, myarg):
        return myarg + " is if.. up in the sky, the sky"
    secretmessage = classmethod( secretmessage )

    def skycake(cls):
        return "cookie and sky pie people can't go up and "
    skycake = classmethod( skycake )
</code></pre>
<p>Put this code into your main.py (can be anywhere):</p>
<pre><code>import user
msg = "The only way skycake tates good" 
msg = user.secretclass.secretmessage(msg)
msg += user.secretclass.skycake()
print(msg + " have the sky pie! SKYCAKE!")
</code></pre>
<p>Run it: </p>
<pre><code>$ python main.py
The only way skycake tates good is if.. up in the sky, 
the skycookie and sky pie people can't go up and  have the sky pie! 
SKYCAKE!
</code></pre>
<p>Credit for this jist goes to: <a href="https://github.com/docwhat/homedir-examples/blob/master/python-commandline/.pythonrc.py" rel="noreferrer">https://github.com/docwhat/homedir-examples/blob/master/python-commandline/.pythonrc.py</a>  Send along your up-boats.</p>
<p><strong>Example 7, Most Robust: Import files in python with the bare import command:</strong></p>
<ol>
<li>Make a new directory <code>/home/el/foo5/</code></li>
<li>Make a new directory <code>/home/el/foo5/herp</code></li>
<li><p>Make an empty file named <code>__init__.py</code> under herp:</p>
<pre><code>el@apollo:/home/el/foo5/herp$ touch __init__.py
el@apollo:/home/el/foo5/herp$ ls
__init__.py
</code></pre></li>
<li><p>Make a new directory /home/el/foo5/herp/derp</p></li>
<li><p>Under derp, make another <code>__init__.py</code> file:</p>
<pre><code>el@apollo:/home/el/foo5/herp/derp$ touch __init__.py
el@apollo:/home/el/foo5/herp/derp$ ls
__init__.py
</code></pre></li>
<li><p>Under /home/el/foo5/herp/derp make a new file called <code>yolo.py</code> Put this in there:</p>
<pre><code>def skycake():
  print "SkyCake evolves to stay just beyond the cognitive reach of " +
  "the bulk of men. SKYCAKE!!"
</code></pre></li>
<li><p>The moment of truth, Make the new file <code>/home/el/foo5/main.py</code>, put this in there;</p>
<pre><code>from herp.derp.yolo import skycake
skycake()
</code></pre></li>
<li><p>Run it:</p>
<pre><code>el@apollo:/home/el/foo5$ python main.py
SkyCake evolves to stay just beyond the cognitive reach of the bulk 
of men. SKYCAKE!!
</code></pre>
<p>The empty <code>__init__.py</code> file communicates to the python interpreter that the developer intends this directory to be an importable package.</p></li>
</ol>
<p>If you want to see my post on how to include ALL .py files under a directory see here: <a href="https://stackoverflow.com/a/20753073/445131">https://stackoverflow.com/a/20753073/445131</a></p>
<p><strong>Bonus protip</strong></p>
<p>whether you are using Mac, Linux or Windows, you need to be using <a href="http://www.annedawson.net/Python_Editor_IDLE.htm" rel="noreferrer">python's idle editor</a> as described here.  It will unlock your python world.  <a href="http://www.youtube.com/watch?v=DkW5CSZ_VII" rel="noreferrer">http://www.youtube.com/watch?v=DkW5CSZ_VII</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To import a specific Python file at 'runtime' with a known name:</p>
<pre><code>import os
import sys
</code></pre>
<p>...</p>
<pre><code>scriptpath = "../Test/MyModule.py"

# Add the directory containing your module to the Python path (wants absolute paths)
sys.path.append(os.path.abspath(scriptpath))

# Do the import
import MyModule
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do not have many complex methods to import a python file from one folder to another. Just create a <strong>__init__.py</strong> file to declare this folder is a python package and then go to your host file where you want to import just type </p>
<p><code>from root.parent.folder.file import variable, class, whatever</code></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.tutorialspoint.com/python/python_modules.htm" rel="nofollow noreferrer">Import doc ..</a> -- Link for reference </p>
<p>The <code>__init__.py</code> files are required to make Python treat the directories as containing packages, this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.</p>
<p><code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable.</p>
<pre class="lang-python prettyprint-override"><code>mydir/spam/__init__.py
mydir/spam/module.py
import spam.module
or
from spam import module
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from file import function_name  ######## Importing specific function
function_name()                 ######## Calling function
</code></pre>
<p>and </p>
<pre><code>import file              ######## Importing whole package
file.function1_name()    ######## Calling function
file.function2_name()    ######## Calling function
</code></pre>
<p>Here are the two simple ways I have understood by now and make sure your "file.py" file which you want to import as a library is present in your current directory only.</p>
</div>
<div class="post-text" itemprop="text">
<p>the best way to import .py files is by way of <code>__init__.py</code>. the simplest thing to do, is to create an empty file named <code>__init__.py</code> in the same directory that your.py file is located.</p>
<p>this <a href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html" rel="nofollow noreferrer">post</a> by Mike Grouchy is a great explanation of <code>__init__.py</code> and its use for making, importing, and setting up python packages.</p>
</div>
<div class="post-text" itemprop="text">
<p>How I import is import the file and use shorthand of it's name.</p>
<pre><code>import DoStuff.py as DS
DS.main()
</code></pre>
<p><strong>Don't forget</strong> that your importing file <strong>MUST BE</strong> named with .py extension</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to add this note I don't very clearly elsewhere; inside a module/package, when loading from files, the module/package name must be prefixed with the <code>mymodule</code>. Imagine <code>mymodule</code> being layout like this:</p>
<pre><code>/main.py
/mymodule
    /__init__.py
    /somefile.py
    /otherstuff.py
</code></pre>
<p>When loading <code>somefile.py</code>/<code>otherstuff.py</code> from <code>__init__.py</code> the contents should look like:</p>
<pre><code>from mymodule.somefile import somefunc
from mymodule.otherstuff import otherfunc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case the <strong>module</strong> you want to import is <strong>not in a sub-directory</strong>, then try the following and run <code>app.py</code> from the deepest common parent directory:</p>
<p>Directory Structure:</p>
<pre><code>/path/to/common_dir/module/file.py
/path/to/common_dir/application/app.py
/path/to/common_dir/application/subpath/config.json
</code></pre>
<p>In <code>app.py</code>, append path of client to sys.path:</p>
<pre><code>import os, sys, inspect

sys.path.append(os.getcwd())
from module.file import MyClass
instance = MyClass()
</code></pre>
<p>Optional (If you load e.g. configs) (Inspect seems to be the most robust one for my use cases)</p>
<pre><code># Get dirname from inspect module
filename = inspect.getframeinfo(inspect.currentframe()).filename
dirname = os.path.dirname(os.path.abspath(filename))
MY_CONFIG = os.path.join(dirname, "subpath/config.json")
</code></pre>
<p>Run</p>
<pre><code>user@host:/path/to/common_dir$ python3 application/app.py
</code></pre>
<p>This solution works for me in cli, as well as PyCharm.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to import python file in another python file</p>
<p>lets say I have <strong>helper.py</strong> python file which has a display function like,</p>
<pre><code>def display():
    print("I'm working sundar gsv")
</code></pre>
<p>Now in <strong>app.py</strong>, you can use the display function,</p>
<pre><code>import helper
helper.display()
</code></pre>
<p>The output,</p>
<p><code>I'm working sundar gsv</code></p>
<p><strong>NOTE:</strong> No need to specify the .py extension.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may sound crazy but you can just create a symbolic link to the file you want to import if you're just creating a wrapper script to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways, as listed above, but I find that I <strong>just want to import he contents of a file,</strong> and don't want to have to write lines and lines and have to import <em>other</em> modules. So, I came up with a way to get the contents of a file, even with the dot syntax (<code>file.property</code>) as opposed to merging the imported file with yours.
<br/>
First of all, here is my file which I'll import, <code>data.py</code></p>
<pre><code>    testString= "A string literal to import and test with"
</code></pre>
<p><br/> <b>Note: </b>You could use the <code>.txt</code> extension instead.
<br>In <code>mainfile.py</code>, start by opening and getting the contents.</br></p>
<pre><code>    #!usr/bin/env python3
    Data=open('data.txt','r+').read()
</code></pre>
<p>Now you have the contents as a string, but trying to access <code>data.testString</code> will cause an error, as <code>data</code> is an instance of the <code>str</code> class, and even if it does have a property <code>testString</code> it will not do what you expected.<br/>
Next, create a class. For instance (pun intended), <code>ImportedFile</code></p>
<pre><code>    class ImportedFile:
</code></pre>
<p>And put this into it (with the appropriate indentation):</p>
<pre><code>    exec(data)
</code></pre>
<p><br/>
And finally, re-assign <code>data</code> like so:</p>
<pre><code>    data=ImportedFile()
</code></pre>
<p>And that's it! Just access like you would for any-other module, typing <code>print(data.testString)</code> will print to the console <code>A string literal to import and test with</code>.
<br/>If, however, you want the equivalent of <code>from mod import *</code> just drop the class, instance assignment, and de-dent the <code>exec</code>.</p>
<p>Hope this helps:)<br>
-Benji</br></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do this: <code>from filename import something</code></p>
<p>example: <code>from client import Client</code>
Note that you do not need the <code>.py .pyw .pyui</code> extension.</p>
</div>
<span class="comment-copy">See Also: <a href="http://stackoverflow.com/questions/8663076/python-best-way-to-add-to-sys-path-relative-to-the-current-running-script" title="python best way to add to sys path relative to the current running script">stackoverflow.com/questions/8663076/…</a></span>
<span class="comment-copy">If you add an <code>import filename</code> to the <b>init</b>.py then you can import the module directly as the folder name.</span>
<span class="comment-copy">from <code>help(__import__)</code>: <code>Because this function is meant for use by the Python     interpreter and not for general use it is better to use     importlib.import_module() to programmatically import a module.</code></span>
<span class="comment-copy">What if it's not a package but just a script file?</span>
<span class="comment-copy">For importing a script file in the same path (maybe it would also work for a script file in a Python search path), <code>import filenamenoext</code> works just fine for me, with Python 3.4.8.</span>
<span class="comment-copy">Is it still accurate in 2019? Is it python3 or 2?</span>
<span class="comment-copy">You should also add Example 6: using <code>__import__(py_file_name)</code>.  Amazing guide anyway</span>
<span class="comment-copy">Every time I have an import issue I end up at this question and am always able to solve my problem. If I could upvote this for each time you've helped me, I would.</span>
<span class="comment-copy">What's the big difference between all of these, and why is one better than any other? For example 5, you write "Import files in python with the bare import command," but you also use the (bare?) import command in examples 1, 3 and 4, don't you?</span>
<span class="comment-copy">Hey Eric! I think you got me wrong.. I just wanted to answer HelloGoodbyes question "what's the big difference between all of these" because I too was curious and found the blog entry (which is NOT mine btw) which I thought was helpful for him too...</span>
<span class="comment-copy">Good answer but the fact that you use a different import file as example all the times makes it cumbersome to read.</span>
<span class="comment-copy">What if I want a relative path?</span>
<span class="comment-copy">@GhostCat I have updated my response. thanks for the link "it would be preferable".</span>
<span class="comment-copy">And understand that not everyone is living in your timezone.</span>
