<div class="post-text" itemprop="text">
<p>I'm seeing some behavior that I don't understand. I thought the bytecode of a python function is what gets executed to produce a result, but here I have 2 different lambda functions, that have the same exact bytecode, but obviously do different things. How can this be?</p>
<pre><code>a = lambda x: x+4
b = lambda y: y+3
print('a = ', a.__code__.co_code)
print('b = ', b.__code__.co_code)
print(a(1), b(1))
</code></pre>
<p>Produces this output:</p>
<pre><code>a =  b'|\x00\x00d\x01\x00\x17S'
b =  b'|\x00\x00d\x01\x00\x17S'
5 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Byte-code is not the only thing in the code object. If you dissassemble the functions using <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="noreferrer"><code>dis.dis</code></a> you can see what is happening:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; a = lambda x: x + 4
&gt;&gt;&gt; b = lambda y: y + 3
&gt;&gt;&gt; dis.dis(a)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (4)
              6 BINARY_ADD
              7 RETURN_VALUE
&gt;&gt;&gt; dis.dis(b)
  1           0 LOAD_FAST                0 (y)
              3 LOAD_CONST               1 (3)
              6 BINARY_ADD
              7 RETURN_VALUE
</code></pre>
<p>What is happening is that there is also a tuple of constants assosciated with the code objects. The byte code just says to load the constant at an index from that tuple. They both have the same byte code, but load different values from the tuple. You can see it with the <code>co_consts</code> attribute:</p>
<pre><code>&gt;&gt;&gt; a.__code__.co_consts
(None, 4)
&gt;&gt;&gt; b.__code__.co_consts
(None, 3)
</code></pre>
<p>You can change this too to make a different function:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; c_code = types.CodeType(
    a.__code__.co_argcount, a.__code__.co_kwonlyargcount, a.__code__.co_nlocals,
    a.__code__.co_stacksize, a.__code__.co_flags, a.__code__.co_code, (None, 5),
    a.__code__.co_names, a.__code__.co_varnames, a.__code__.co_filename,
    a.__code__.co_name, a.__code__.co_firstlineno, a.__code__.co_lnotab,
    a.__code__.co_freevars, a.__code__.co_cellvars
)
&gt;&gt;&gt; c = types.FunctionType(c_code, globals())
&gt;&gt;&gt; a(0)
4
&gt;&gt;&gt; c(0)
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because the consts are different:</p>
<pre><code>&gt;&gt;&gt; print('a = ', a.__code__.co_consts)
a =  (None, 4)
&gt;&gt;&gt; print('a = ', b.__code__.co_consts)
a =  (None, 3)
</code></pre>
</div>
