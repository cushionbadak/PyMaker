<div class="post-text" itemprop="text">
<p>My book says - </p>
<blockquote>
<p>Strings and lists are actually similar, if you consider a string to be a “list” of single text characters.</p>
</blockquote>
<p>Suppose that I have a string namely 
<code>name=Zophie</code>.</p>
<p>Now this string should have some resemblance with a list. So I type in another code that would tell me what should the items of that list be. The code goes like - </p>
<p><code>for i in name:
  print(‘* * * ‘ + i + ‘ * * *')</code></p>
<p>The output is:</p>
<p><code>* * * Z * * *
* * * o * * *
* * * p * * *
* * * h * * *
* * * i * * *
* * * e * * *</code></p>
<p>This clearly shows that the list items of <code>name</code> are Z,o,p,h,i,e. </p>
<p>Now if I try to check wether the list has an item <code>’Zop'</code> by using:</p>
<p><code>Zop in name</code> </p>
<p>It returns True! That is, Python says that Zophie contains an item namely <code>’Zop’</code> but when I tried to list all the items using the for command, <code>Zop</code> didn’t show up. </p>
<p>What’s happening here?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two different <code>in</code>s:</p>
<ul>
<li><p><code>for i in name</code>: The word <code>in</code> is part of the <a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer"><code>for</code>-loop syntax</a>.
The statement iterates over the elements of the iterable <code>name</code>.
If <code>name</code> is a string, then it iterates over the characters of the string.</p></li>
<li><p><code>'Zop' in name</code>: The word <code>in</code> is a comparison operator. From the documentation, <a href="https://docs.python.org/2/reference/expressions.html#membership-test-operations" rel="nofollow noreferrer">5.9.1 Membership test operations</a>:</p>
<blockquote>
<p>For the string and bytes types, <code>x in y</code> is <code>True</code> if and only if <code>x</code> is a substring of <code>y</code>. An equivalent test is <code>y.find(x) != -1</code>. Empty strings are always considered to be a substring of any other string, so <code>"" in "abc"</code> will return <code>True</code>.</p>
</blockquote></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Any Python class is free to define various operations however it likes. Strings happen to implement the sequence protocol  (meaning that iteration and <code>[i]</code> item access behave the same as lists), but also implement <code>__contains__</code>, which is responsible for <code>x in y</code> checks, to look for <em>substrings</em> rather than just single characters.</p>
<p>It is <em>common</em> for <code>x in y</code> membership testing to mean "x will appear if you print all the elements of y", but there's no rule saying that that <em>has</em> to be the case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the section on <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow noreferrer">Membership test detail</a>, which is relevant to the <code>in</code> keyword. Paraphrasing from there,</p>
<blockquote>
<p>For the string and bytes types, <code>x in y</code> is <code>True</code> if and only if x is a
  substring of y. An equivalent test is <code>y.find(x) != -1</code>. Empty strings
  are always considered to be a substring of any other string, so <code>"" in "abc"</code> will return <code>True</code>.</p>
</blockquote>
<p>Although, I strongly suggest that elegant use of the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a> module can be picked over a membership test for a substring.</p>
</div>
<span class="comment-copy">I'm having a hard time understanding what you mean by "but when I tried to list all the items using the for command, Zop didn’t show up."</span>
<span class="comment-copy">@idjaw , <code>for i in name:   print(‘* * * ‘ + I + ‘ * * *’)</code> .   This should return all the items in the list and the items that were displayed on the screen were Z,o,p,h,i,e. ‘Zop’ was not there. Now if I try <code>Zop in name</code> , it should return False</span>
<span class="comment-copy">Take another example:  <code>spam=[‘asd’,’qwe’,’zxc’,’fgh’]</code> . Here (‘asd’, ‘qwe’ ) looks like a substring to me ( correct me if I am wrong ). Now if you type in ` ( ‘asd’,’qwe’) in spam ` in the IDLE, you again get <code>False</code> despite of that fact that <code>( ‘asd’,’qwe’)</code> is a substring of spam!?</span>
<span class="comment-copy">@AaryanDewan <code>spam</code> is <i>not</i> a string but a list. In this case, <code>in</code> tests membership. The tuple <code>('asd', 'qwe')</code> is <i>not</i> a member of <code>spam</code>. For example, it is a member of <code>[('asd', 'qwe'), 42, True]</code>.</span>
<span class="comment-copy">Now I get it! Could you please tell me what do you mean by membership? Does it mean that it checks wether one string is a part of a list or not?</span>
<span class="comment-copy">@AaryanDewan It checks, whether an element (that can be a string, number, boolean value, list, tuple, ..., an object of any type) belongs to a list, set, ... It is equivalent to <code>any(x is e or x == e for e in y)</code>, see the cited <a href="https://docs.python.org/2/reference/expressions.html#membership-test-operations" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">Thanks a lot Heiko!</span>
