<div class="post-text" itemprop="text">
<p>As a follow-up on an <a href="https://stackoverflow.com/questions/44457881/return-variable-as-well-as-render-template/44458270#44458270">earlier question</a>, I wonder how to use flask.g and flask.session to transfer a dictionary from one def to another. If I understand g correctly, it only temporarily stores info until a new request. since the def I want to transfer the dict object to, starts with a new request (it loads a new flask template), I guess I cannot use g. So, this leaves me to wonder whether I can use flask.session for this. If I try to save my dict as follows: session.dict, and then try to use this dict in a new def, it returns an "AttributeError: 'FileSystemSession' object has no attribute 'dict'.</p>
<p>Any idea whether the saving of a dict in a flask session is at all possible? And if so, what am I doing wrong?</p>
<p>Rgds,
Bart</p>
</div>
<div class="post-text" itemprop="text">
<p>Session in flask is a dictionary. So if you need to save anything in session you can do this:</p>
<pre><code>from flask import session
...

def foo(...):

    session['my_dict'] = my_dict


def bar(...):

    my_dict = session['my_dict']
</code></pre>
<p>Note that you need to check whether the <code>my_dict</code> is present in session before trying to use it.</p>
</div>
<span class="comment-copy">What if you write it to the sessions dictionary? <code>session['dict'] = somedict</code>? and later retrieve it with <code>session.get('dict',fallbackvalue)</code>. Mind that it is also possible that a user (deliberately) swaps the page requests when trying to find exploits.</span>
<span class="comment-copy">Hmmm, if I do that, I get a KeyError in the next def where I try to loop through session['dict'].... :(</span>
<span class="comment-copy">oh, sorry Willem, I forgot to use the "get" statement!</span>
<span class="comment-copy">mind that if <code>get(..)</code> does not find the value, it will give the <code>fallbackvalue</code>. So that means that somehow, still you cannot write to the session (or the session is not persistent).</span>
<span class="comment-copy">Thanks, I got it to work!</span>
<span class="comment-copy">@BartKoolhaas, You are welcome.</span>
<span class="comment-copy">Since <code>session</code> is Python's dictionary, it also has handy <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">methods</a> like <code>.get(key[, default_val])</code> and <code>.pop(key[, default_val])</code> that accept the second, optional (defaults to <code>None</code>) argument that serves as a default value. (Access via <code>[key]</code> rises <code>KeyError</code> if no such key is found.)</span>
