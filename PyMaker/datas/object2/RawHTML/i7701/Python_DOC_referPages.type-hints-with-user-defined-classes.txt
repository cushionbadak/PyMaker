<div class="post-text" itemprop="text">
<p>Couldn't seem to find a definitive answer. I want to do a type hint for a function and the type being some custom class that I have defined, called it <code>CustomClass()</code>.</p>
<p>And then let's say in some function, call it <code>FuncA(arg)</code>, I have one argument named <code>arg</code>. Would the correct way to type hint <code>FuncA</code> be:</p>
<p><code>def FuncA(arg: CustomClass):</code></p>
<p>Or would it be:</p>
<p><code>def FuncA(Arg:Type[CustomClass]):</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <strong>former is correct</strong>, if <code>arg</code> accepts an <strong>instance of <code>CustomClass</code></strong>:</p>
<pre><code>def FuncA(arg: CustomClass):
    #     ^ instance of CustomClass
</code></pre>
<p>In case you want the <strong>class <code>CustomClass</code> itself (or a subtype)</strong>, then you should write:</p>
<pre><code>from typing import Type  # you have to import Type

def FuncA(arg: Type[CustomClass]):
    #     ^ CustomClass (class object) itself
</code></pre>
<p>Like it is written in the documentation about <a href="https://docs.python.org/3/library/typing.html#typing.Type" rel="noreferrer"><strong>Typing</strong></a>:</p>
<blockquote>
<pre><code><b>class typing.Type(Generic[CT_co])</b></code></pre>
<p>A variable annotated with <code>C</code> may accept a value of type <code>C</code>. In
  contrast, a variable <strong>annotated with <code>Type[C]</code> may accept values that
  are classes themselves</strong> - specifically, it will accept the <strong>class
  object of <code>C</code></strong>.</p>
</blockquote>
<p>The documentation includes an example with the <code>int</code> class:</p>
<blockquote>
<pre><code>a = 3         # Has type 'int'
b = int       # Has type 'Type[int]'
c = type(a)   # Also has type 'Type[int]'
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Is <code>Type</code> from py3.6 and beyond? I just get a <code>NameError</code>.</span>
<span class="comment-copy">@Coldspeed: no, but you have to import it. Altered that in the answer.</span>
<span class="comment-copy">Note that if you have the class in the same file, it needs to exist at the time the type hint is evaluated...</span>
<span class="comment-copy">@576i: iirc, you can also use a string. So <code>def foo(bar: 'Qux')</code> is equivalent to <code>def foo(bar: Qux)</code> except that it does not require loading the type immediately.</span>
<span class="comment-copy">@willem thanks - I did not know that. What's best, pycharm autocompletion still works..</span>
