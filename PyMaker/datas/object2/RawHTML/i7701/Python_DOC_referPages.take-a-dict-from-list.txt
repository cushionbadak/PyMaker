<div class="post-text" itemprop="text">
<p>I take some lists from my database:</p>
<pre><code>print(liste)
[('VEST', 'MODEL-1', 'BEIGE', 'M'), 
 ('VEST', 'MODEL-1', 'BEIGE', 'S'), 
 ('JACKET', 'MOD-1', 'GREEN', 'S'), 
 ('JACKET', 'MOD-1', 'GREEN', 'M'), 
 ('JACKET', 'MOD-2', 'BLACK', 'L'), 
 ('JACKET', 'MOD-2', 'BLACK', 'XL')]
</code></pre>
<p>now I need to create a dict like this:</p>
<pre><code>mydict = {'VEST' : {'MODEL-1' : {'BEIGE' : ('S', 'M')}},
          'JACKET' : ({'MOD-1' : {'GREEN' : ('S', 'M')}},
                      {'MOD-2' : {'BLACK' : ('L', 'XL')}})}
</code></pre>
<p>I will use this in tkinter like json. I need to choose something like that:</p>
<pre><code>print(mydict['JACKET'][1]['MOD-2']['BLACK'][0])
L
# Or
print(mydict['VEST']['MODEL-1']['BEIGE'][0])
S
</code></pre>
<p>How can I create a dict? I'm tired of trying different ways. I will be very happy if I can get good advice</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are showing is not very consistent, but I think you may benefit from using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>In [1]: from collections import defaultdict

In [2]: liste = [('VEST', 'MODEL-1', 'BEIGE', 'M'), 
   ...:  ('VEST', 'MODEL-1', 'BEIGE', 'S'), 
   ...:  ('JACKET', 'MOD-1', 'GREEN', 'S'), 
   ...:  ('JACKET', 'MOD-1', 'GREEN', 'M'), 
   ...:  ('JACKET', 'MOD-2', 'BLACK', 'L'), 
   ...:  ('JACKET', 'MOD-2', 'BLACK', 'XL')]

In [3]: mydict = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))

In [4]: for kind, model, color, size in liste:
   ...:     mydict[kind][model][color].append(size)
   ...:     

In [5]: mydict['VEST']['MODEL-1']['BEIGE']
Out[5]: ['M', 'S']
</code></pre>
<p>The <code>defaultdict</code> constructor takes a "factory" function as argument, i.e. a callable which is called without parameters to substitute a missing value. For example, <code>defaultdict(list)</code> will have an empty list for every missing key when you try to access it.</p>
<p>In this case I created a nested <code>defaultdict</code> object, which creates another <code>defaultdict</code> for every key. The inner one also creates a <code>defaultdict</code>, which also uses <code>defaultdict</code> as factory. This reflects your data hierarchy and saves you multiple checks or exception handling for missing keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try a <code>defaultdict</code> as demonstrated by @LevLevitsky, or you could try this workable, albeit convoluted way:</p>
<pre><code>result = {}
for i in liste:
    if i[0] not in result.keys():
            result[i[0]] = {i[1]: {i[2]: tuple(i[3:4])}}
    else:
            if i[1] not in result[i[0]].keys():
                   result[i[0]][i[1]] = {i[2]: tuple(i[3:4])}
            else:
                   if i[2] not in result[i[0]][i[1]].keys():
                            result[i[0]][i[1]][i[2]] = tuple(i[3:4])
                   else:
                            result[i[0]][i[1]][i[2]]+=tuple(i[3:4])

print result #{'JACKET': {'MOD-2': {'BLACK': ('L', 'XL')}, 'MOD-1': {'GREEN': ('S', 'M')}}, 'VEST': {'MODEL-1': {'BEIGE': ('M', 'S')}}}
</code></pre>
</div>
<span class="comment-copy">Why does <code>'JACKET'</code> maps on a tuple? And aren't these two keys stored in the <i>same</i> dictionary?</span>
<span class="comment-copy">Because i have difficult products in same categories. But i must chose first categories, (Jacket or Pants) after must chose model, color, size (Jacket: Model 1: Color Beige: Size XL) Can be same Categories but Difficult model or color.</span>
<span class="comment-copy">It was very instructive. thanks so much. i will try in my code</span>
<span class="comment-copy">When checking for presence in dict, <a href="https://stackoverflow.com/q/1602934/1258041">there is no need to call <code>.keys()</code></a>. On Python 2 this may be significantly slower (not sure about Python 3).</span>
<span class="comment-copy">Yes, calling <code>.keys</code> when checking for keys  I is an antipattern. But in this instance you don't have to check the keys anyway. Use <code>.setdefault</code> if you want to stick to a plain <code>dict</code></span>
<span class="comment-copy">A long but understandable recipe for novices like myself. Thank you so much</span>
<span class="comment-copy">@scan no problem, glad to be of help :)</span>
