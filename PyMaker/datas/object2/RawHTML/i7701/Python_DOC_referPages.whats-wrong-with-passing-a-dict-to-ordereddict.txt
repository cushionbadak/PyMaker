<div class="post-text" itemprop="text">
<p>I'm reading @Martijn Pieters' response to <a href="https://stackoverflow.com/a/15711843/7954504">Converting dict to OrderedDict</a>.  The main point of his answer is that passing a regular dict to <code>OrderedDict()</code> will not retain the order as desired, because the dict that you are passing has already "lost" any semblance of order.  His solution is to pass tuples that make up the dict's key/value pairs instead.</p>
<p>However, I also noticed the following in the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Changed in version 3.6: With the acceptance of PEP 468, order is
  retained for keyword arguments passed to the OrderedDict</p>
</blockquote>
<p>Does this invalidate the issue that Martijn points out (can you now pass a dict to OrderedDict), or am I misinterpreting?</p>
<pre><code>from collections import OrderedDict

ship = {'NAME': 'Albatross',
         'HP':50,
         'BLASTERS':13,
         'THRUSTERS':18,
         'PRICE':250}
print(ship) # order lost as expected
{'BLASTERS': 13, 'HP': 50, 'NAME': 'Albatross', 'PRICE': 250, 'THRUSTERS': 18}
print(OrderedDict(ship)) # order preserved even though a dict is passed?
OrderedDict([('NAME', 'Albatross'),
             ('HP', 50),
             ('BLASTERS', 13),
             ('THRUSTERS', 18),
             ('PRICE', 250)])
</code></pre>
<p>I get this same (correct) order if I run a <code>for key in ...</code> loop over the OrderedDict as well, seeming to imply it's OK to pass the dict itself.</p>
<p><strong>Edit</strong>: this was also contributing a bit to my confusion: <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">Are dictionaries ordered in Python 3.6+?</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Order is retained for keyword arguments passed to the OrderedDict</p>
</blockquote>
<p>What this means is that the following is <em>guaranteed</em> to preserve the order:</p>
<pre><code>od = OrderedDict(a=20, b=30, c=40, d=50)
</code></pre>
<p>that is, the order in which the keyword arguments are passed is retained in <code>**kwargs</code>. This, in Python 3.6, is a <em>language feature</em>; all other implementations need to follow suit.</p>
<p>How this works is, in order for this call to be performed, a dictionary is created that holds the keyword arguments. Being a <code>dict</code>, prior to <code>3.6</code>, it lost information about the order in which these were supplied. </p>
<p>With PEP 468 getting accepted in 3.6, this is guaranteed to now use an <em>ordered mapping</em> that holds on to this information (in CPython, the "ordered mapping" happens to be a <code>dict</code> but, that's an implementation detail -- <strong>Update:</strong> A language feature as of Python 3.7.).</p>
<hr/>
<p>Using <code>OrderedDict(ship)</code>, as you currently do, also preserves the order in <code>3.6</code> because <code>dict</code> has that implementation now, not due to PEP 468. This is something you shouldn't depend on as it is considered an implementation detail of the CPython implementation; in the future this might change (and it looks like it will) but, until then, you shouldn't depend on it.</p>
<p><em>As of Python 3.7</em>, the previous is now guaranteed to preserve the order across implementations as <code>dict</code> insertion order is now a language feature. </p>
</div>
<span class="comment-copy">Order is retained for <b>keyword arguments</b> passed to the OrderedDict. Not sure where you are getting the idea you have from.</span>
<span class="comment-copy">Okay, thank you, I don't know why I was associating the dict with kwargs.  But you mention "<code>dict</code> has that feature now."  Can you elaborate?  What is the point of passing a sequence of tuples, as it rec'd in the answer to which I linked, if intended order will be preserved just by passing the dict itself?</span>
<span class="comment-copy">@BradSolomon because <code>dict</code> having that feature is an <i>implementation detail</i>, that is, you shouldn't depend on it. If you do you risk your program not behaving correctly in other Python implementations or future versions of CPython (the Python implementation most people use). The fact that <code>dict</code> is an implementation detail might be changed in the future (making it a guaranteed feature of the language) at which point you <i>can</i> depend on it.</span>
<span class="comment-copy">I suppose this is a <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="nofollow noreferrer">moot point</a> in 3.7+?  @Jim</span>
<span class="comment-copy">@BradSolomon yup. I updated the answer to address this.</span>
