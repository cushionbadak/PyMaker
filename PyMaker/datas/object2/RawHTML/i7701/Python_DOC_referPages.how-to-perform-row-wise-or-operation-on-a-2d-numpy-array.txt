<div class="post-text" itemprop="text">
<p>I have a numpy array.</p>
<pre><code>[[1, 0, 1],
  [1, 0, 0],
  [0, 0, 1]]
</code></pre>
<p>I want to perform rowise OR operation on it so that the resulting array looks like this:</p>
<p><code>[1, 0, 1]</code></p>
<p>Is there a straight forward way for doing this without implementing loops ?
I will be very grateful if someone could suggest something. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If you'd prefer to stick with bitwise or (the <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer"><code>|</code> operator</a> in Python is a bitwise or, whereas the <a href="https://docs.python.org/3/reference/expressions.html#or" rel="nofollow noreferrer"><code>or</code> operator</a> is the boolean or), you can use <a href="https://docs.scipy.org/doc/numpy-1.12.0/reference/generated/numpy.bitwise_or.html" rel="nofollow noreferrer"><code>np.bitwise_or()</code></a>. However, this only takes two arrays as input, so you can use Numpy's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.reduce.html" rel="nofollow noreferrer"><code>reduce()</code></a> capabilities to combine all the subarrays in the array. </p>
<pre><code>&gt;&gt;&gt; a = np.array([[1, 0, 1],[1, 0, 0],[0, 0, 1]])
&gt;&gt;&gt; np.bitwise_or.reduce(a, 0)
array([1, 0, 1])
</code></pre>
<p>I like how explicit this is, but the <code>a.any()</code> solution is common enough to not raise any eyebrows. The first argument for <code>reduce</code> is of course the <code>array</code> and the second is the <code>axis</code> you're reducing along. So you could also do it column-wise, if you preferred, or any other axis for that matter.</p>
<pre><code>&gt;&gt;&gt; a = np.array([[1, 0, 1],[1, 0, 0],[0, 0, 1]])
&gt;&gt;&gt; np.bitwise_or.reduce(a, 1)
array([1, 1, 1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do this by calling <a href="https://docs.scipy.org/doc/numpy-1.12.0/reference/generated/numpy.any.html" rel="nofollow noreferrer"><code>any</code></a> to generate a boolean mask and then cast to <code>int</code> to convert the <code>True</code> and <code>False</code> to <code>1</code> and <code>0</code> respectively:</p>
<pre><code>In[193]:
a.any(0).astype(int)

Out[193]: array([1, 0, 1])
</code></pre>
<p>The first param to <code>any</code> is the axis arg, here we can see the differences between axis 0 and 1:</p>
<pre><code>In[194]:
a.any(0)

Out[194]: array([ True, False,  True], dtype=bool)

In[195]:
a.any(1)

Out[195]: array([ True,  True,  True], dtype=bool)
</code></pre>
</div>
<span class="comment-copy"><code>b = a[0,:]|a[1,:]|a[2,:] where a is the numpy array</code>. This works pretty well. I am looking for something more precise and compact.</span>
<span class="comment-copy">hey thanks, @Alexander Reynolds, this is exactly what I was looking for</span>
<span class="comment-copy">Beat me to this answer by 30 seconds.  although I would use <code>np.bitwise_or.reduce(a, 0)</code> to be that much more explicit.</span>
<span class="comment-copy">@DanielF I agree, I'll add that in. Thanks!</span>
<span class="comment-copy">@deepayandas if my solution was what you were looking for, could you accept my answer? Otherwise if you're interested in any expansions I could elaborate.</span>
<span class="comment-copy">@ Alexander Reynolds accepted it. Cheers man</span>
