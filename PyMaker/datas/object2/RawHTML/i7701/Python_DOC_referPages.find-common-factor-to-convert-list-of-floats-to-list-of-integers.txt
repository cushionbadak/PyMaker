<div class="post-text" itemprop="text">
<p>I have a list of floats which comes from some other function.
What I know is that in ideal world there exist a common factor
which can be used to multiply each term to obtain list of integers.
There could be some small numerical noise (~1e-14).</p>
<p>So for example</p>
<pre><code>[2.3333333333333335, 4.666666666666667, 1.0, 1.6666666666666667]
</code></pre>
<p>here each term can by multiplied by 3 to obtain</p>
<pre><code>[7.0, 14.0, 3.0, 5.0]
</code></pre>
<p>How can I find this term? We can assume integer solution exists.</p>
<p>Any helpful comments will be appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">Fraction</a> type can convert floating points to rationals with denominators under 1000000, and then you can find the lowest common denominator.</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; a = [2.3333333333333335, 4.666666666666667, 1.0, 1.6666666666666667]
&gt;&gt;&gt; [Fraction(x).limit_denominator() for x in a]
[Fraction(7, 3), Fraction(14, 3), Fraction(1, 1), Fraction(5, 3)]
</code></pre>
<p>A straightforward way to find the least common multiple using the <a href="https://docs.python.org/3/library/math.html#math.gcd" rel="nofollow noreferrer">math.gcd</a> function:</p>
<pre><code>&gt;&gt;&gt; denoms = [3,3,1,2]
&gt;&gt;&gt; functools.reduce(lambda a,b: a*b//math.gcd(a,b), denoms)
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The brute force solution. Still looking for something more universal...</p>
<pre><code>def find_int(arr):
    test = False
    epsilon = 1e-15
    maxint = 1000
    for i in range(2, maxint, 1):
        for item in arr:
            if abs(i*item-round(i*item)) &lt; epsilon:
                test = True
            else:
                test = False
                break
        if test:
            print i
            return [int(round(i*item)) for item in arr]
    print "Could not find one"
    return arr
</code></pre>
</div>
<span class="comment-copy">And what have you tried?</span>
<span class="comment-copy">tried divide by greatest common divisor for a list. it works sometimes but often goes wild</span>
<span class="comment-copy">What is the gdc for non-integer numbers?</span>
<span class="comment-copy">The precision of <code>float</code>s will make this difficult to do in general, e.g. <code>2.333...35 * 3</code> is not <code>7</code>.</span>
<span class="comment-copy">that's the catch. the gcd works for non-integer numbers if they are integers divided by some common factor but only if they divide nicely, say 5/2 = 2.5 but not 2/3 = 0.6(6)</span>
<span class="comment-copy">You're half-way there... this doesn't guarantee a <i>common</i> factor.</span>
<span class="comment-copy">Very nice trick! But in theory, we should first guess the denominator limit (the default is 1000000).</span>
<span class="comment-copy">Works like a charm! Thanks for that.</span>
<span class="comment-copy">Beware, <code>abs(x - int(x))</code> is not a good test! Think of 0.999999999: it is <i>close</i> to 1 but <code>int(0.999999999)</code> is 0...</span>
<span class="comment-copy">Thanks for spotting that. Will change it to round()</span>
