<div class="post-text" itemprop="text">
<p>(I am aware that the title of the question might be misleading, but I could not find any other way to formulate it - feel free to edit it)</p>
<p>I have two lists, both of the same length:</p>
<pre><code>a = [1,2,3]
b = [4,5,6]
</code></pre>
<p>And I want to obtain all possible replacements of the first list with the second list.</p>
<pre><code>output[0] = [1,2,3] # no replacements
output[1] = [4,2,3] # first item was replaced
output[2] = [1,5,3] # second item was replaced
output[3] = [1,2,6] # third item was replaced
output[4] = [4,5,3] # first and second items were replaced
output[5] = [4,2,6] # first and third items were replaced
output[6] = [1,5,6] # second and third items were replaced
output[7] = [4,5,6] # all items were replaced
</code></pre>
<p>Please note that this question is NOT answered by the following questions:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/464864/how-to-get-all-possible-combinations-of-a-list-s-elements/464882#464882">How to get all possible combinations of a listâ€™s elements?</a></li>
<li><a href="https://stackoverflow.com/questions/12935194/combinations-between-two-lists">combinations between two lists?</a></li>
<li><a href="https://stackoverflow.com/questions/32438350/python-merging-two-lists-with-all-possible-permutations">Python merging two lists with all possible permutations</a></li>
<li><a href="https://stackoverflow.com/questions/798854/all-combinations-of-a-list-of-lists">All combinations of a list of lists</a></li>
</ul>
<p>A possible solution involving the previously linked answers would be to create several lists and then use the <em>itertools.product</em> method on them. For example, instead of having 2 lists of 3 elements, I could create 3 lists of 2 elements; however, that would over-complicate the code and I'd prefer to avoid that if I could.</p>
<p>Is there an easy and quick way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Creating 3 lists of two elements would not over-complicate the code at all. <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code> can "flip the axes" of multiple lists</a> trivially (making X sequences of Y elements into Y sequences of X elements), making it easy to use <code>itertools.product</code>:</p>
<pre><code>import itertools

a = [1,2,3]
b = [4,5,6]

# Unpacking result of zip(a, b) means you automatically pass
# (1, 4), (2, 5), (3, 6)
# as the arguments to itertools.product
output = list(itertools.product(*zip(a, b)))

print(*output, sep="\n")
</code></pre>
<p>Which outputs:</p>
<pre><code>(1, 2, 3)
(1, 2, 6)
(1, 5, 3)
(1, 5, 6)
(4, 2, 3)
(4, 2, 6)
(4, 5, 3)
(4, 5, 6)
</code></pre>
<p>Different ordering than your example output, but it's the same set of possible replacements.</p>
</div>
<div class="post-text" itemprop="text">
<p>Each item may independently be replaced or left alone. This can be modeled by a bit being 1 or 0. If you consider each item to be a separate bit, then iterating over all of the possibilities can be mapped to iterating over all of the combinations of <em>n</em> bits.</p>
<p>In other words, iterate from 0 to 2<sup><em>n</em></sup>-1 and look at the bit patterns.</p>
<pre><code>n = len(a)
for i in range(2**n):
    yield [a[j] if i &amp; (1 &lt;&lt; j) != 0 else b[j] for j in range(n)]
</code></pre>
<p>Breaking this down, <code>i &amp; (1 &lt;&lt; j) != 0</code> checks if the <em>j</em>th bit of <em>i</em> is set. If it is, use <code>a[j]</code>, otherwise <code>b[j]</code>.</p>
<p>Result:</p>
<pre><code>[1, 2, 3]
[4, 2, 3]
[1, 5, 3]
[4, 5, 3]
[1, 2, 6]
[4, 2, 6]
[1, 5, 6]
[4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okay this is similar to the other answers, but taking <em>a bit from both</em>. You can model your problem as finding all possible bits of a sequence of given length, and replacing only when there is 1, and otherwise not.</p>
<pre><code>from itertools import product

a = [1,2,3]
b = [4,5,6]

## All binary combinations of length of a (or b)
combinations = product([0,1], repeat=len(a))

for combination in combinations:
    y = []
    for l, i in zip(zip(a,b),combination):
         y.append(l[i])
    print y
</code></pre>
<p>All combinations of bits are:</p>
<pre><code>(0, 0, 0)
(0, 0, 1)
(0, 1, 0)
(0, 1, 1)
(1, 0, 0)
(1, 0, 1)
(1, 1, 0)
(1, 1, 1)
</code></pre>
<p>Which results in:</p>
<pre><code>[1, 2, 3]
[1, 2, 6]
[1, 5, 3]
[1, 5, 6]
[4, 2, 3]
[4, 2, 6]
[4, 5, 3]
[4, 5, 6]
</code></pre>
</div>
<span class="comment-copy">Note: If you really want <code>list</code>s, not <code>tuple</code>s for some reason, <code>output = list(map(list, itertools.product(*zip(a, b))))</code> will convert the <code>tuple</code>s back to <code>list</code>s, but it's usually not necessary.</span>
<span class="comment-copy">While this works, I see no reason at all to prefer it over getting the product of the elements directly. Computing indices then indexing is like doing <code>for i in range(len(someseq)): x = someseq[i]</code> (and never using <code>i</code> again), which is one of the most straightforward anti-patterns in Python committed by recidivist C programmers, being slower, less flexible (doesn't work with iterators), more verbose and less self documenting than <code>for usefulname in someseq:</code></span>
<span class="comment-copy">@ShadowRanger I agree, and I would also get the product directly. However I put this in, because it is easy to understand.</span>
