<div class="post-text" itemprop="text">
<p>I have a list of integers and I want to print a list containing, for example, k number of elements in the list depending on the "k" value.</p>
<p>For example, if k = 4, this means that the list I will be printing will have exactly 4 elements in the list. For k = 5, 5 elements in the list, etc.</p>
<p>Here's my code:</p>
<pre><code>listA = [9,-2,6,1,80,9,-2]

def findMinimum(l):
    if len(l) == 1:
        return l[0]

    else:
        minNumber = findMinimum(l[1:])
        minimumVal = l[0]
        if minNumber&lt;minimumVal:
            minimumVal = minNumber
        return minimumVal

def listMin(k,l):
    temp = []*k
    for i in range(len(l)-1):
        minVal = findMinimum(l)
        temp.append(minVal)

        for item in temp:
           if item in l:
              l.remove(item)
    print(temp)

listMin(4,listA)
</code></pre>
<p>The <strong>first function</strong> defined finds the <strong>minimum value</strong> in the list and returns the minimum value.</p>
<p>The <strong>second function</strong> has 2 parameters which are the k value and list. The <strong>k value is the size of the list to return</strong> which I'm having issues on. Whenever a minimum value is obtained and appended into the temp list, it <strong>removes</strong> it from <strong>list A</strong> and will then proceed on to obtain the next minimum digit in the list <code>A</code>.</p>
<p>An example of output will be when k = 4, hence the list will have four elements in it:</p>
<pre><code>[-2,-2,1,6]
</code></pre>
<p>The code I wrote gave me 6 elements in the list instead of 4:</p>
<pre><code>[-2,-2,1,6,9,9]
</code></pre>
<p>I'm guessing my mistake would be temp = []*k.</p>
</div>
<div class="post-text" itemprop="text">
<p>This line:</p>
<pre><code>for i in range(len(l)-1):
</code></pre>
<p>should be changed to:</p>
<pre><code>for i in range(k):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First. You don't need to hand-write function to find minimum in python. There's built-in <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">min</a>
Second. If you expect your program to operate on multiple values inside datastructure, in most cases operating "all at once" is a good idea.
According to your code:</p>
<ul>
<li>sort list ascending (with built-in <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">list.sort</a></li>
<li><a href="https://docs.python.org/3.7/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">slice</a> the list up to <code>k</code> values</li>
</ul>
<p>So, you can end up with</p>
<pre><code>sorted(listA)[:k]
</code></pre>
<p>To achieve same result by "one-by-one" operations you can</p>
<ul>
<li>find minimum</li>
<li>remove single element by value</li>
<li>add it to new list</li>
<li>do it <code>k</code> times</li>
</ul>
<p>Which can look like</p>
<pre><code>result = []
for _ in range(k):
    value = min(ListA)
    listA.remove(value)
    result.append(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You made the problem much more complex than it should be:</p>
<pre><code>l = [9,-2,6,1,80,9,-2]

k = 4

n = []

while k &gt; 0:
    m = min(l)
    n.append(m)
    l.remove(m)
    k -= 1

print n

&gt;&gt; [-2, -2, 1, 6]
</code></pre>
</div>
<span class="comment-copy">So, you want the <i>k</i> smallest elements?</span>
<span class="comment-copy">Hint: What is <code>k * 0</code>? What then is <code>k * []</code>? But that's not the problem, since you are <code>append</code>ing to the list anyway, so you don't have to initialize with any specific size.</span>
<span class="comment-copy">Why just not sort and slice it? <code>lowest_four = sorted(listA)[:4]</code></span>
<span class="comment-copy">@zwer This is so needlessly complex that I'm assuming it's an assignment to teach recursion.</span>
<span class="comment-copy">Your loop is wrong. Use <code>for i in range(k):</code> then it "works".</span>
<span class="comment-copy">Noted! Thanks for the help.</span>
<span class="comment-copy">interesting! But I'm not sure if I'm permitted to do so in exams. Maybe I'll get to know these in the higher level.</span>
<span class="comment-copy">I've opted for the longer method. I didn't mention it but its a must. Sorry for the misunderstanding.</span>
