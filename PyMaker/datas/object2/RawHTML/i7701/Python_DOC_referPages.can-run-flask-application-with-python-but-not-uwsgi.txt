<div class="post-text" itemprop="text">
<p>I'm trying to set up uWSGI to run a simple Flask application. I followed along with <a href="https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04" rel="nofollow noreferrer">this tutorial</a>, which worked fine, but when implementing the same concepts on my project it didn't work.</p>
<p>Here's my directory structure:</p>
<pre><code>/project
--/bin
----server.py
----wsgi.py
</code></pre>
<p>When I'm in the <code>/project</code> directory, the python command <code>python bin/wsgi.py</code> works fine. However, the uwsgi command <code>uwsgi --socket 0.0.0.0:8000 --protocol=http --wsgi-file bin/wsgi.py</code> doesn't. Here's <code>server.py</code>:</p>
<pre><code>from flask import Flask, jsonify, request

app = Flask(__name__)
# all my routes below...
</code></pre>
<p>Here's <code>wsgi.py</code>:</p>
<pre><code>import os
from server import app as application

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    application.run(debug=True)
</code></pre>
<p>And here's the error I get:</p>
<pre><code>Traceback (most recent call last):
  File "bin/wsgi.py", line 2, in &lt;module&gt;
    from server import app
ImportError: No module named server
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Why <code>python bin/mod.py</code> had worked?</p>
<p>Because Python sets <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> to include your <code>bin</code> directory, based on the directory <code>mod.py</code> (the command-line argument) was in:</p>
<blockquote>
<p>As initialized upon program startup, the first item of this list, <code>path[0]</code>, is the directory containing the script that was used to invoke the Python interpreter.</p>
</blockquote>
<p>You can check this out by adding <code>import sys</code> and <code>print(sys.path)</code> to your <code>wsgi.py</code>. The very first element would be your <code>bin</code> directory (full absolute path).</p></li>
<li><p>Why <code>uwsgi --wsgi-file bin/wsgi.py</code> hadn't worked?</p>
<p>Because interpreter didn't knew where to find <code>server.py</code>. uWSGI hadn't took the path of <code>bin/wsgi.py</code> and haven't added it tothe embedded interpreter's <code>sys.path</code> (via <code>Py_SetProgramName</code> internal API call, <code>PySys_SetPath</code> or otherwise) - it had just initialized the interpreter and loaded the file.</p>
<p>Basically, uWSGI is not a Python interpreter, it just hosts it, embedded.</p>
<blockquote>
<p>If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), path[0] is the empty string, which directs Python to search modules in the current directory first.</p>
</blockquote></li>
<li><p>Why <code>--pythonpath $(pwd)/bin</code> fixed things?</p>
<p>Because you told Python interpreter where to look for imported modules. :-)</p></li>
</ol>
</div>
<span class="comment-copy">Assuming <code>--wsgi-file bin/wsgi.py</code>, pass <code>--pythonpath=$(pwd)/bin</code> to uwsgi. Or make your app a package with <code>__init__.py</code> and use <code>from .server import ...</code> relative imports.</span>
<span class="comment-copy">Thanks @drdaeman! Adding the <code>--pythonpath</code> argument worked. Reading the documentation now to figure out how it worked!</span>
