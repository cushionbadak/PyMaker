<div class="post-text" itemprop="text">
<p>In a project I see the following use of <code>add_argument()</code>:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument("--somearg",type=make_arg_instance,help='blahblahblah')
args = parser.parse_args()
i = args.somearg.somefunction()
</code></pre>
<p>in which <code>make_arg_instance</code>is a function defined as:</p>
<pre><code>def make_arg_instance():
    somearg = SomeClassName()
    return somearg
</code></pre>
<p>It seems the argument 'somearg' is an <code>class</code> object instead of <code>int</code> and that's why later a method is called as in <code>i = args.somearg.somefunction()</code>.</p>
<p>In most tutorials that I've seen the type of argument is always <code>int</code> therefore could someone explain a bit about how to add argument of type <code>class</code> or any type other than <code>int</code>? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer">documentation for the <code>type</code> argument</a>:</p>
<blockquote>
<p>By default, <code>ArgumentParser</code> objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a <code>float</code> or <code>int</code>. The <code>type</code> keyword argument of <code>add_argument()</code> allows any necessary type-checking and type conversions to be performed. </p>
<p>[...]</p>
<p><code>type=</code> can take any callable that takes a single string argument and returns the converted value</p>
</blockquote>
<p>You can pass in <em>any callable</em>, provided it takes a single argument to be converted. <code>int()</code> is such a callable, but that doesn't mean you have to use that. If you want some <em>other</em> type or want to apply extra constraints to the allowed values, you can specify your own.</p>
</div>
<span class="comment-copy">Surely <code>make_arg_instance()</code> takes an argument, it won't be a function with 0 arguments.</span>
