<div class="post-text" itemprop="text">
<p>If I have two lists and want to iterate through subtracting one from the other how would I go about this?  I was thinking broadcasting.  Right now I have:</p>
<pre><code>array1 = [0,2,2,0]
array2 = [2,2,0,1]
</code></pre>
<p>I would like to subtract array1 from each value in array2 and make a new matrix of outputs:</p>
<pre><code>output = [2, 0, 0, 2,
          2, 0, 0, 2,
          0, -2, -2, 0,
          1, -1, -1, 1]
</code></pre>
<p>so in the end it's a 4x4 matrix.</p>
<p>Is this possible?  Is the easiest way to use broadcasting?  I was thinking of making each row value in array2 into it's own array, subtracting that from array2 using broadcasting, then summing all the array's at the end into one big array (using Numpy)... is there an easier way?</p>
<p>If I have two lists and want to iterate through subtracting one from the other how would I go about this?  I was thinking broadcasting.  Right now I have:</p>
<pre><code>array1 = [0,2,2,0]
array2 = [2,2,0,1]
</code></pre>
<p>I would like to subtract array1 from each value in array2 and make a new matrix of outputs:</p>
<pre><code>output = [2, 0, 0, 2,
          2, 0, 0, 2,
          0, -2, -2, 0,
          1, -1, -1, 1]
</code></pre>
<p>so in the end it's a 4x4 matrix.</p>
<p>Is this possible?  Is the easiest way to use broadcasting?  I was thinking of making each row value in array2 into it's own array, subtracting that from array2 using broadcasting, then summing all the array's at the end into one big array (using Numpy)... is there an easier way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Broadcasting with <code>numpy</code>:</p>
<pre><code>&gt;&gt;&gt; a1 = np.array([0,2,2,0])
&gt;&gt;&gt; a2 = np.array([2,2,0,1])
&gt;&gt;&gt; a2[:, np.newaxis] - a1
array([[ 2,  0,  0,  2],
       [ 2,  0,  0,  2],
       [ 0, -2, -2,  0],
       [ 1, -1, -1,  1]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this?</p>
<pre><code>def all_differences(x, y):
    return (a - b for a in y for b in x)

print(list(all_differences([0, 2, 2, 0], [2, 2, 0,1])))
# -&gt; [2, 0, 0, 2, 2, 0, 0, 2, 0, -2, -2, 0, 1, -1, -1, 1]
</code></pre>
<p>It just itertates over every item in the second list for every item in the first list, and gives their difference.</p>
<p>This can also be solved with <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a> and can be generalised for multiple lists:</p>
<pre><code>import itertools
import functools
import operator

difference = functools.partial(functools.reduce, operator.sub)

def all_differences(*lists):
    return map(difference, itertools.product(*reversed(lists)))

print(list(all_differences([0, 2, 2, 0], [2, 2, 0,1])))
</code></pre>
<p>Or just handling two lists:</p>
<pre><code>import itertools

def all_differences(x, y):
    return (b - a for (a, b) in itertools.product((x, y)))

print(list(all_differences([0, 2, 2, 0], [2, 2, 0,1])))
</code></pre>
</div>
<span class="comment-copy">Very nifty, thanks!  Was subtracting one row at a time then concatenating all the new values and reshaping it... this is much easier!</span>
