<div class="post-text" itemprop="text">
<p>I couldn't find any clue how to solve this problem.</p>
<p>A function from an SDK generated a dictionary like this:</p>
<pre><code>myDict = {('c3','4'):20,('1','2a'):5,('4','5'):1,('2a','c3'):8}
</code></pre>
<p>I would like to be able to order the dictionary to get:</p>
<pre><code>myDict = {('1','2a'):5, ('2a','c3'):8, ('c3','4'):20, ('4','5'):1}
</code></pre>
<p>Where the first member of the following key tuple is the same as the second member of the preceding key tuple.</p>
<p>I'm working on Mind Maps with Xmind, and this allows me to follow a chain of relations between nodes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that dictionaries are unordered so you need to use another (ordered) data structure, for example an <a href="https://docs.python.org/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>.</p>
<p>Actually making the connections isn't easy in the general case. In your case it's possible so I'll present a solution that works for your type of problem:</p>
<pre><code>inp = {('c3', '4'): 20, 
       ('1', '2a'): 5, 
       ('4', '5'): 1, 
       ('2a', 'c3'): 8}

# Collect the start and end points
starts = {}
ends = {}
for key in inp:
    start, end = key
    starts[start] = key
    ends[end] = key

print(starts)
# {'1': ('1', '2a'), '2a': ('2a', 'c3'), '4': ('4', '5'), 'c3': ('c3', '4')}
print(ends)
# {'2a': ('1', '2a'), '4': ('c3', '4'), '5': ('4', '5'), 'c3': ('2a', 'c3')}

# Find the ultimate start point - that's the tricky step in general, 
# but it's easy in your case.
startpoint = set(starts).difference(ends)
startpoint = next(iter(startpoint))   # yeah, it's a bit ugly to get the one and only item of a set...
print(startpoint)
# '1'

# Find the connections
from collections import OrderedDict

res = OrderedDict()
while startpoint in starts:
    tup = starts[startpoint]
    res[tup] = inp[tup]
    startpoint = tup[1]  # next start point

print(res)
# OrderedDict([(('1', '2a'), 5), (('2a', 'c3'), 8), (('c3', '4'), 20), (('4', '5'), 1)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>It is best to think of a dictionary as an <strong>unordered set</strong> of key: value pairs, with the requirement that the keys are unique (within one dictionary).</p>
</blockquote>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs.python.org</a>, emphasis mine</p>
<p>You can however convert your <code>dict</code> into <code>tuple</code> and have it sorted:</p>
<pre><code>my_sorted_tuple = sorted(my_dict.items())
</code></pre>
</div>
<span class="comment-copy">Dictionaries are unordered and can't be sorted.</span>
