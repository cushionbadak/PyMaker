<div class="post-text" itemprop="text">
<p>I have 3 lists</p>
<pre><code>i = ['a','b','c']
j = ['1','2','3']
l = ['01','02']
</code></pre>
<p>I want to create a dictionary looking something like this:</p>
<pre><code>D = {'a':{'1':{'01':10, '02':100}, {'2':{'01':20,'02':50}}}
</code></pre>
<p>I want to be able to loop over <code>i, j</code> and <code>l</code> and do <code>D[i][j][l]</code> to get the value associated with it.</p>
<pre><code>Ds = {}
l_ = 0
for i_ in range(len(i)):
    j_ = 0
    for j_ in range(len(j)):
        l_ = 0
        for l_ in range(len(l)): 
            Ds[i[i_]] = {j[j_]:{l[l_]:'some value'}}
</code></pre>
<p>I tried this, but this does not work. </p>
<p><strong>Extra:</strong>
I am writing a Linear program in <code>Pulp</code> and I want to create a dictionary of demand values for a particular sku <code>i</code>, in period <code>j</code> on line <code>l</code> so that I can do <code>Dijl*Xijtl = some_value</code> summed over <code>i</code>, <code>j</code> ,<code>l</code> for constraints or something like that. These demand values are constants. This could be cartesian product or comprehension. Is there a function similar to <code>LpVariable.dicts()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are using PuLP, you may want to look into pulp's makeDict().</p>
<p>Suppose you have the following:</p>
<pre><code>i = ['a', 'b']
j = ['1', '2', '3']
l = ['01', '02']
</code></pre>
<p>and that for your demand values you have:</p>
<pre><code>value_a_1_01 = 10
value_a_1_02 = 20
value_a_2_01 = 30
value_a_2_02 = 40
value_a_3_01 = 50
value_a_3_02 = 60

value_b_1_01 = 70
value_b_1_02 = 80
value_b_2_01 = 90
value_b_2_02 = 100
value_b_3_01 = 110
value_b_3_02 = 120
</code></pre>
<p>You can then create an array that contains your demand data like this:</p>
<pre><code>array = [[{'01': 10, '02': 20}, {'01': 30, '02': 40},
          {'01': 50, '02': 60}],
         [{'01': 70, '02': 80}, {'01': 90, '02': 100},
          {'01': 110, '02': 120}]]
</code></pre>
<p>and now define your dictionary:</p>
<pre><code>D = pulp.makeDict([i, j], array)
</code></pre>
<p>EDIT: Since the data set up was a bit messy before, setting up the array like this makes it much cleaner (and easier to edit):</p>
<pre><code>array = [
         [[10, 20], [30, 40], [50, 60]], 
         [[70, 80], [90, 100], [110, 120]]
        ]
</code></pre>
<p>Now the parameters for makeDict() should be:</p>
<pre><code> D = pulp.makeDict([i, j, l], array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want "Cartesian product" of lists, you can use:</p>
<pre><code>i = ['a','b','c']
j = ['1','2','3']
l = ['01','02']

Ds = {}

for i_ in i:
    item_i = {}
    for j_ in j:
        item_j = {}
        for l_ in l:
            item_j[l_] = '' # Your value                                                                                                                      
        item_i[j_] = item_j
    Ds[i_] = item_i

print Ds
# {'a': {'1': {'02': '', '01': ''}, '3': {'02': '', '01': ''}, '2': {'02': '', '01': ''}}, 'c': {'1': {'02': '', '01': ''}, '3': {'02': '', '01': ''}, '2': {'02': '', '01': ''}}, 'b': {'1': {'02': '', '01': ''}, '3': {'02': '', '01': ''}, '2': {'02': '', '01': ''}}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is a variant using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>product</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault</code></a>:</p>
<pre><code>from itertools import product

D = {}
for ii, jj, ll in product(i, j, l):
    D.setdefault(ii, {})
    D[ii].setdefault(jj, {})
    D[ii][jj][ll] = None
</code></pre>
<p>where i used <code>None</code> as placeholder for your value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way of doing this would just be to have a dictionary that is keyed by tuple values i.e </p>
<pre><code>D ={}
for i in I:
   for j in J:
      for k in K:
         D[i,j,k] = your value
</code></pre>
<p>Note in <code>pulp</code> it would be more common to donate your sets with a capital letter and iterate with the smaller letter.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this reads really nicely as a comprehension:</p>
<pre><code>D = {i_: {j_: {l_: "value" for l_ in l} for j_ in j} for i_ in i}
</code></pre>
</div>
<span class="comment-copy">You "dictionary" is not a dictionary, check please</span>
<span class="comment-copy">Are you just trying to initialize a dictionary with myriad "some value"'s or where are those numbers coming from?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/5228158/cartesian-product-of-a-dictionary-of-lists">Cartesian product of a dictionary of lists</a></span>
<span class="comment-copy">Linked wrong dupe: I meant <a href="https://stackoverflow.com/questions/24941765/python-recursively-create-arbitrarily-nested-dict-given-three-different-lists">Python - Recursively create arbitrarily nested dict given three different lists</a></span>
<span class="comment-copy">I have a data frame with i, j, l and corresponding "some value". Hope this answers your question. @Nick T</span>
<span class="comment-copy">I was looking for something similar to <code>LpVariable.dicts()</code>. This is perfect. Thank you!</span>
<span class="comment-copy">I'm going to make an edit to this because there is a much cleaner way of using makeDict().</span>
<span class="comment-copy">This is what I was looking for. Didn't know it was called Cartesian product.</span>
