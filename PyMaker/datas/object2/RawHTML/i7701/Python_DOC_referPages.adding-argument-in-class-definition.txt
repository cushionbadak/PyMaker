<div class="post-text" itemprop="text">
<p>I ran across this design pattern in Python wondering if someone can explain as I've never seen it before</p>
<pre><code>def func():
   pass

class Child(Parent, f=func):
   pass
</code></pre>
<p>Not sure what's happening here. Could this work if Parent has metaclass definition in which it changes the class constructor to allow for passing an argument through? Any help is appreciated and sorry for the vagueness</p>
</div>
<div class="post-text" itemprop="text">
<p>Extra named arguments in the class definition are passed into the class constructor methods - i.e., the metaclass <code>__new__</code>:</p>
<pre><code>In [1]: class M(type):
   ...:     def __new__(metacls, name, bases, namespace, **kwargs):
   ...:         print(f'At metaclass, {kwargs}')
   ...:         return super().__new__(metacls, name, bases, namespace)
   ...:     

In [2]: class A(metaclass=M, f="hello world"): pass
At metaclass, {'f': 'hello world'}
</code></pre>
<p>So, a custom metaclass might make use of that, even before Python 3.6. But n <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="nofollow noreferrer">Python 3.6, the <code>__init_subclass__</code> addition</a> makes it much simpler and therefore useful, to have such arguments - as no custom metaclass is needed. </p>
<p>Note that the <code>__init_subclass__</code> method in a custom class hierarchy is responsible to ultimately call <code>object.__init_subclass__</code> - which do not take any named arguments. So, if you are creating a class hierarchy that makes use of <code>__init_subclass__</code>, each such method should "consume" its specific arguments by removing them from <code>kwargs</code> before calling  <code>super().__init_subclass__</code>. The <code>__new__</code> and <code>__init__</code> methods from <code>type</code> itself (the default metaclass) simply ignore any named args.  </p>
</div>
<div class="post-text" itemprop="text">
<p>This works in Python 3.6 using <a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer"><code>__init_subclass__</code></a> on the parent.</p>
<pre><code>class Parent:
    def __init_subclass__(self, f, **kwargs):
        super().__init_subclass__(**kwargs)
        print(f)

def func():
    pass

class Child(Parent, f=func):
    pass
</code></pre>
<p>Output:</p>
<pre><code>&lt;function func at 0x7f48207cae18&gt;
</code></pre>
</div>
