<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/38149470/how-do-i-reliably-split-a-string-in-python-when-it-may-not-contain-the-pattern">How do I reliably split a string in Python, when it may not contain the pattern, or all n elements?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I've often been frustrated by the lack of flexibility in Python's iterable unpacking. Take the following example:</p>
<pre><code>a, b = "This is a string".split(" ", 1)
</code></pre>
<p>Works fine. <code>a</code> contains <code>"This"</code> and <code>b</code> contains <code>"is a string"</code>, just as expected. Now let's try this:</p>
<pre><code>a, b = "Thisisastring".split(" ", 1)
</code></pre>
<p>Now, we get a <code>ValueError</code>:</p>
<pre><code>ValueError: not enough values to unpack (expected 2, got 1)
</code></pre>
<p>Not ideal, when the desired result was <code>"Thisisastring"</code> in <code>a</code>, and <code>None</code> or, better yet, <code>""</code> in <code>b</code>.</p>
<p>There are a number of hacks to get around this. The most elegant I've seen is this:</p>
<pre><code>a, *b = mystr.split(" ", 1)
b = b[0] if b else ""
</code></pre>
<p>Not pretty, and very confusing to Python newcomers.</p>
<p>So what's the most Pythonic way to do this? Store the return value in a variable and use an if block? The <code>*varname</code> hack? Something else?</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks perfect for <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="noreferrer">str.partition</a>:</p>
<pre><code>&gt;&gt;&gt; a, _, b = "This is a string".partition(" ")
&gt;&gt;&gt; a
'This'
&gt;&gt;&gt; b
'is a string'
&gt;&gt;&gt; a, _, b = "Thisisastring".partition(" ")
&gt;&gt;&gt; a
'Thisisastring'
&gt;&gt;&gt; b
''
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about adding the default(s) at the end and throwing away the unused ones?</p>
<pre><code>&gt;&gt;&gt; a, b, *_ = "This is a string".split(" ", 1) + ['']
&gt;&gt;&gt; a, b
('This', 'is a string')

&gt;&gt;&gt; a, b, *_ = "Thisisastring".split(" ", 1) + ['']
&gt;&gt;&gt; a, b
('Thisisastring', '')

&gt;&gt;&gt; a, b, c, *_ = "Thisisastring".split(" ", 2) + [''] * 2
&gt;&gt;&gt; a, b, c
('Thisisastring', '', '')
</code></pre>
<p>Similar (works in Python 2 as well):</p>
<pre><code>&gt;&gt;&gt; a, b, c = ("Thisisastring".split(" ", 2) + [''] * 2)[:3]
&gt;&gt;&gt; a, b, c
('Thisisastring', '', '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>*varname</code> hack seems very pythonic to me:</p>
<ul>
<li><p>Similar to how function parameters are handled</p></li>
<li><p>Lets you use a one-liner or if block or nothing to correct type of the element if desired</p></li>
</ul>
<p>You could also try something like the following if you don't find that clear enough for new users</p>
<pre><code>def default(default, tuple_value):
    return tuple(map(lambda x: x if x is not None else default, tuple_value))
</code></pre>
<p>Then you can do something like</p>
<pre><code>a, *b = default("", s.split(...))
</code></pre>
<p>Then you should be able to depend on b[0] being a string.
I fully admit that the definition of default is obscure, but if you like the effect, you can refine until it meets your aesthetic.  In general this is all about what feels right for your style.</p>
</div>
<span class="comment-copy">Deconstructing a list of unknown size is always kind of sketchy unless you use a rest operator. What would <code>b</code> be if the list only contained a single element in your first example?</span>
<span class="comment-copy"><code>a, *b = mystr.split(" ", 1)</code> is Python 3 only it should be noted.</span>
<span class="comment-copy">@dawg, added python-3.x tag</span>
<span class="comment-copy">@Carcigenicate, if the list contains only a single element, I'd like <code>b</code> to be either <code>None</code> or <code>""</code> (empty string)</span>
<span class="comment-copy">@Samadi The former doesn't really solve the problem though, since you'd still need to check if <code>b</code> was <code>None</code> before you could use it. The latter would be a nice default, but how would the language decide that an empty string is the appropriate default? The only time I've ever found deconstructing lists of unknown size to be useful is when I know there's at least 1 element, and all I need to do is separate the head from the tail. In most other cases, deconstructing multiple elements causes necessary checks elsewhere. And this is experience from Clojure, not Python, so I'm making a general comm</span>
<span class="comment-copy">That's perfect! However, I'm still interested as to how you'd do it in other cases.</span>
<span class="comment-copy">That's quite a nice idea. It'd be nicer if Python discarded anything put into <code>_</code> like some other languages do, but it's still nice.</span>
<span class="comment-copy">Whether it's a string or not isn't really the issue. I still need an if statement to make sure that <code>b</code> isn't empty.</span>
<span class="comment-copy">@Samadi If you care about whether <code>b</code> is empty, then by all means use an explicit if block.  My answer is for cases where what you're going to do to <code>b</code> will work correctly on whatever default you specify</span>
<span class="comment-copy">With <code>a, *b = (1,)</code>, <code>a</code> will be set to <code>1</code> and <code>b</code> will be set to <code>()</code>. Your <code>default</code> function only deals with changing <code>None</code> values in the tuple to a default. I'm not really sure how that applies in this situation.</span>
