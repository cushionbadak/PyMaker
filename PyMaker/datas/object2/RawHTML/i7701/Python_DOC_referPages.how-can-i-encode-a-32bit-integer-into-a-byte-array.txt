<div class="post-text" itemprop="text">
<p>I'm required to send a 32bit integer over a serial connection like so: <code>0xc6bf6f34</code> should become: <code>b'\xc6\xbf\x6f\x34'</code>.</p>
<p>To that end, I created this, but, as always after such coding, I wondered if it's <em>pythonicism</em> could be improved with something in the standard libary:</p>
<pre><code>def ltonlba(value):
    ''' ltonlba : Long to Network Long Byte Array '''
    from socket import htonl
    value = htonl(value)
    ba = b''
    for i in range(4):
            ba += chr((value) &amp; 0xff)
            value &gt;&gt;= 8
    return ba
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.2+, you can use <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>int.to_bytes</code></a>:</p>
<pre><code>&gt;&gt;&gt; 0xc6bf6f34.to_bytes(4, 'little')  # 4 bytes = 32 bits
b'4o\xbf\xc6'
&gt;&gt;&gt; 0xc6bf6f34.to_bytes(4, 'little') == b'\x34\x6f\xbf\xc6'
True
</code></pre>
<p>Otherwise, you can use <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow noreferrer"><code>struct.pack</code></a> with <code>&lt;I</code> format (<code>&lt;</code>: little-endian, <code>I</code>: 4-bytes unsigned integer , see <a href="https://docs.python.org/3/library/struct.html#format-strings" rel="nofollow noreferrer">Format strings - <code>struct</code> module doc</a>):</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&lt;I', 0xc6bf6f34)
b'4o\xbf\xc6'
</code></pre>
<hr/>
<p><strong>UPDATE / NOTE</strong>: If you want to get big-endian (or network-endian), you should specify <code>'big'</code> with <code>int.to_bytes</code>:</p>
<pre><code>0xc6bf6f34.to_bytes(4, 'big')  # == b'\xc6\xbf\x6f\x34'
</code></pre>
<p>and <code>&gt;</code> or <code>!</code> with <code>struct.pack</code>:</p>
<pre><code>struct.pack('&gt;I', 0xc6bf6f34)  # == b'\xc6\xbf\x6f\x34'  big-endian
struct.pack('!I', 0xc6bf6f34)  # == b'\xc6\xbf\x6f\x34'  network (= big-endian)
</code></pre>
</div>
<span class="comment-copy">Does the <code>struct.pack()</code> solution work with Python 3.2+ as well?</span>
<span class="comment-copy">@Jamie, It works with both in Python 2.x, 3.x. I tested it in Python 2.7.13 / 3.5.3 / 3.6.1.</span>
<span class="comment-copy">@Jamie, I rolled back your change. You want little little-endian according to your question.</span>
<span class="comment-copy">@Jamie, If you specify network-endian (or big-endian) , you will get b<code>\xc6\xbf\x6f\x34</code> instead.</span>
<span class="comment-copy">You're right.  My example was wrong.</span>
