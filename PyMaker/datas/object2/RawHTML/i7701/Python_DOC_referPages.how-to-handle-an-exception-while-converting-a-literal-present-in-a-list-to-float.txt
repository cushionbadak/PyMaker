<div class="post-text" itemprop="text">
<pre><code>A=[None, '0.50', '2', '4', '6', '0', '0', '0', '0.00', '0', '0', '0', '5', '1', '5', '5', '1', '1', '0', '1', '2', '2', '2', '0 (1:1)', '0', '0', '2', '2', '0', '0', '1', '2', '0']
B=[]
for elem in A:
    if elem is not None:
        B.append(float(elem.strip("''")))
    else:
         B.append(elem )
print B
</code></pre>
<p>I have a list which has values shown above. When I am trying to add to an excel sheet using pandas, it is being added as text rather than float or int. I want to remove quotation marks so that it won't be seen as text in excel sheet, I know it can be done using split, and if I try to convert all of these to float, it throws an exception for this '0(1:1)' element saying that invalid literal for for float.How do I handle this? </p>
</div>
<div class="post-text" itemprop="text">
<p>The simpler solution is to wrap the <code>for</code> body in a <code>try-except</code> and append <code>None</code> or the original value (<code>elem</code>) if it fails for a particular iteration:</p>
<pre><code>A = [None, '0.50', '2', '4', '6', '0', '0', '0', '0.00', '0', '0', '0', '5', '1', '5', '5', '1', '1', '0', '1', '2', '2', '2', '0 (1:1)', '0', '0', '2', '2', '0', '0', '1', '2', '0']

B = []

for elem in A:
    try:
        B.append(float(elem))
    except (ValueError, TypeError) as error:
        B.append(elem)

        # Or, if you don't want to preserve the non-numeric values:

        # B.append(None)

print(B)
</code></pre>
<p>A <code>ValueError</code> will be thrown when <code>elem</code> can't be parsed as <code>float</code>, while <code>TypeError</code> will be thrown when <code>elem</code> is <code>None</code>.</p>
<p>Like that you don't need to check if <code>elem</code> is <code>None</code> using and <code>if</code> and both exceptions can be handled consistently (assuming that's what you want).</p>
<p>Note the <code>.strip("''")</code> is not needed as it is actually not doing anything. <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer">According to the docs, strip() will...</a>:</p>
<blockquote>
<p>Return a copy of the string with the leading and trailing characters removed.</p>
</blockquote>
<p>That is, it will try to remove <code>''</code> from the start and the end of your values, but none of your values start or end with two single quotes. Actually, any of them contain quotes at all, those around them are just the way to represent a string, but are not part of their value.</p>
<p>Also, <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer"><code>float()</code></a> will automatically take care of converting a string representation of a number (<code>'1'</code>) to <code>Float</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>literal_eval</code> from <code>ast</code> module and use a <code>try ... except</code> block like this example:</p>
<pre><code>from ast import literal_eval

A=[None, '0.50', '2', '4', '6', '0', '0', '0', '0.00', '0', '0', '0', '5', '1', '5', '5', '1', '1', '0', '1', '2', '2', '2', '0 (1:1)', '0', '0', '2', '2', '0', '0', '1', '2', '0']

def evaluate(a):
    for k in a:
        try:
            # Or if you want: use yield float(k)
            yield literal_eval(k)
        except ValueError:
            yield k
        except SyntaxError:
            yield k

&gt;&gt;&gt; list(evaluate(A))
[None, 0.5, 2, 4, 6, 0, 0, 0, 0.0, 0, 0, 0, 5, 1, 5, 5, 1, 1, 0, 1, 2, 2, 2, '0(1:1)', 0, 0, 2, 2, 0, 0, 1, 2, 0]
</code></pre>
</div>
<span class="comment-copy">Do you care about the item <code>0 (1:1)</code>?</span>
<span class="comment-copy">Well what do you want to do with <code>'0 (1:1)'</code>?</span>
<span class="comment-copy">You mention pandas - have you looked at <a href="https://pandas-docs.github.io/pandas-docs-travis/generated/pandas.to_numeric.html" rel="nofollow noreferrer">pandas.to_numeric</a> and specifying errors='coerce' ?</span>
<span class="comment-copy">so I am trying to parse an xml file using element tree and I am trying to append all the values to a list. That xml file has these values.So I can't avoid those values.</span>
<span class="comment-copy">I want to retain 0(1:1) in the list and I don't want them to be none.</span>
<span class="comment-copy">@user1681102 Then use the commented out code in the <code>except</code> block: <code>B.append(elem)</code></span>
<span class="comment-copy">it will be still in string format right??</span>
<span class="comment-copy">Yes, only those values that are actually numeric will be converted to <code>float</code>. The rest will be left untouched.</span>
<span class="comment-copy">I can't upvote this as long as it has a <a href="https://docs.python.org/2/howto/doanddont.html#except" rel="nofollow noreferrer">bare except</a>: "using a bare <code>except:</code> is almost never a good idea": <code>except (TypeError, ValueError):</code> is much, much better.</span>
<span class="comment-copy">I get TypeError: 'list' object is not callable</span>
<span class="comment-copy">Did you run the same example i gave in my answer ? or you've a different input ? because this example runs well without any errors.</span>
<span class="comment-copy">yes, i have ran the same example.</span>
<span class="comment-copy">Well this example should run without any erros and give the same output i gave within Python3</span>
<span class="comment-copy">I am using python2.7.10</span>
