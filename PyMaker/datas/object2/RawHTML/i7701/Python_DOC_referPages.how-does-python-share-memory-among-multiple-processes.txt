<div class="post-text" itemprop="text">
<p>I read that processes operate on seperate memory spaces (<a href="https://stackoverflow.com/a/200473/4391129">link</a>). However the multiprocessing package of python offers shared memory (multiprocessing.Value, multiprocessing.Array). </p>
<ul>
<li>Where (in which process) is this data stored? </li>
<li>Is the data accessed by reference by the child processes?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The data is allocated in a shared, anonymous memory map created through the <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow noreferrer"><code>mmap</code> module</a>. You can see the code <a href="https://github.com/python/cpython/blob/3.6/Lib/multiprocessing/sharedctypes.py" rel="nofollow noreferrer">here</a> and <a href="https://github.com/python/cpython/blob/3.6/Lib/multiprocessing/heap.py" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">it does not matter.</span>
<span class="comment-copy">Perhaps the question should be, "How does Python share memory among multiple processes?" But to your specific questions, it has to be in the heap. It is not in any process space. When Python starts each process, it has to look at the declared shared variables and create memory space and references (answer to second question) in the heap. When a process uses it, the multiprocessing module does all of the memory locking to prevent data corruption, etc. There's a lot more to it than that, but that's the basics.</span>
<span class="comment-copy">This is also different depending on platform (for example windows)</span>
<span class="comment-copy">It's not Python, it's the operating system service. e.g. <a href="http://man7.org/linux/man-pages/man7/shm_overview.7.html" rel="nofollow noreferrer">shared memory</a>.</span>
