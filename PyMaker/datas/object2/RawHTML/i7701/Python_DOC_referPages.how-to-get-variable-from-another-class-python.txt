<div class="post-text" itemprop="text">
<p>how can i get a variable from another class like that</p>
<pre><code>white=(255,255,255)
class window:
    def open(a,b,c):
        displaysurf=pygame.display.set_mode(a)
        pygame.display.set_caption(b)
        displaysurf.fill(c)
    def close():
        while True:
            for event in pygame.event.get():
                if event.type==QUIT:
                    pygame.quit()
                    sys.exit()
            pygame.display.update()
class img():
    def show(image,position):
        pygame.image.load(image)
        displaysurf.blit(image,position)
</code></pre>
<p>i want to get the <code>displaysurf</code> variable from <code>window.open()</code> function</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not possible to access a variable <em>assigned</em> in a function unless you use return. However, if the variable is <em>assigned</em> in the class instance, then you can access it with certain limitations.</p>
<p>The <code>window</code> class would therefore take the form of</p>
<pre><code>class window(object):
    # initialize class variable
    def __init__(self, a, b, c):
        self.display_surf = pygame.display.set_mode(a)
        pygame.display.set_caption(b)
        self.display_surf.fill(c)

    def close(self):
        while True:
            for event in pygame.event.get():
                if event.type==QUIT:
                    pygame.quit()
                    sys.exit()
            pygame.display.update()
</code></pre>
<p>The <code>open()</code> function is embedded in the <code>__init__()</code> function because the <code>display_surf</code> variable is only assigned with the parameter <code>a</code> and at that point it would make sense to set the other attributes as well.</p>
<p>Now to access the variable, you first have to initialize the class. You can do so during the creation of the <code>img</code> class or after. It is best to do so after for more flexibility. The <code>img</code> class would therefore need an extra parameter to access the variable.</p>
<pre><code>class img(object):
    def show(win, img, pos):
        pygame.image.load(img)
        win.display_surf.blit(img, pos)

# set up and access
win = window( # a, b, c)
img.show(win, # img, pos)
</code></pre>
<p>The reason I said limitations is because the <code>window</code> class must be initialized first before using the variable and any function that wants to use it must have it as one of the parameters.</p>
<p>If you'd rather not want to include it as a parameter for a function, you'd make the <code>win</code> variable a global variable. However, it is advised not to do so because the variable could be tampered with outside the intended course and mess up the entire program.</p>
</div>
<div class="post-text" itemprop="text">
<p>You absolutely can access variables in other classes. You just need to add the class name and function name before the variable name, with each separated by a period - example:</p>
<pre><code>CLASSNAME.FunctionName.variableName = "abc" 
</code></pre>
<p>This will allow you to access the variables from other functions without having to make them global, placed before the initialization or use return statements. Here's a basic example first:</p>
<pre><code>class CLASS1:
    def testingFunc():
        CLASS1.testingFunc.thisValue = 123

class CLASS2:
    def createValue():
        CLASS1.testingFunc()
        print(CLASS1.testingFunc.thisValue)

CLASS2.createValue()
</code></pre>
<p>Here's what your code might need to look like to make this work in your specific context:</p>
<pre><code>white=(255,255,255)
class window:
    def open(a,b,c):
        window.open.displaysurf=pygame.display.set_mode(a)
        pygame.display.set_caption(b)
        window.open.displaysurf.fill(c)

    def close():
        while True:
            for event in pygame.event.get():
                if event.type==QUIT:
                    pygame.quit()
                    sys.exit()
            pygame.display.update()

class img():
    def show(image,position):
        pygame.image.load(image)
        window.open.displaysurf.blit(image,position)        
</code></pre>
<p>You may want to write another function, inside of which you have calls to your window class and the img class, that way you don't unnecessarily create an extra instance of something. I'm not familiar with pygame, nor do I know what this code is intended to do, but I know this method works because I use it myself all the time.</p>
</div>
<span class="comment-copy">You can't. <code>displaysurf</code> only exists for the scope of the function.</span>
<span class="comment-copy">no way to call it</span>
<span class="comment-copy">Then <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-return_stmt" rel="nofollow noreferrer"><code>return</code></a> it from your <code>open()</code> method.</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/on-topic">on topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here. StackOverflow is not a design, coding, research, or tutorial service.  I suggest that you follow a tutorial on classes, especially instance and class variables.</span>
<span class="comment-copy">As @zwer said, modify <code>window.open()</code> to return displaysurf.  Of course this means wherever you want to get this value, you'll need a valid instance of <code>window</code>.</span>
