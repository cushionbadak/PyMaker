<div class="post-text" itemprop="text">
<p>Given a file object, how do I determine whether it is opened in bytes mode (<code>read</code> returns <code>bytes</code>) or in text mode (<code>read</code> returns <code>str</code>)? It should work with reading and writing.</p>
<p>In other words:</p>
<pre><code>&gt;&gt;&gt; with open('filename', 'rb') as f:
...     is_binary(f)
...
True

&gt;&gt;&gt; with open('filename', 'r') as f:
...     is_binary(f)
...
False
</code></pre>
<p>(<a href="https://stackoverflow.com/questions/22954403/how-to-determine-whether-a-stream-is-text-or-binary-in-python">Another question</a> which sounds related is not. That question is about guessing whether a file is binary or not from it's <em>contents</em>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>File objects have a <a href="https://docs.python.org/3/library/io.html#io.FileIO.mode" rel="nofollow noreferrer"><code>.mode</code> attribute</a>:</p>
<pre><code>def is_binary(f):
    return 'b' in f.mode
</code></pre>
<p>This limits the test to files; in-memory file objects like <code>TextIO</code> and <code>BytesIO</code> do not have that attribute. You could also test for the <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">appropriate abstract base classes</a>:</p>
<pre><code>import io

def is_binary(f):
    return isinstance(f, (io.RawIOBase, io.BufferedIOBase))
</code></pre>
<p>or the inverse</p>
<pre><code>def is_binary(f):
    return not isinstance(f, io.TextIOBase)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For streams opened as reading, perhaps the most reliable way to determine its mode is to actually <em>read</em> from it:</p>
<pre><code>def is_binary(f):
    return isinstance(f.read(0), bytes)
</code></pre>
<p>Through it does have a caveat that it won't work if the stream was already closed (which may raise <code>IOError</code>) it would reliably determine binary-ness of any custom file-like objects neither extending from appropriate <code>io</code> ABCs nor providing the <code>mode</code> attribute.</p>
<p>If only Python 3 support is required, it is also possible to determine text/binary mode of writable streams given the clear distinction between bytes and text:</p>
<pre><code>def is_binary(f):
    read = getattr(f, 'read', None)
    if read is not None:
        try:
            data = read(0)
        except (TypeError, ValueError):
            pass # ValueError is also a superclass of io.UnsupportedOperation
        else:
            return isinstance(data, bytes)
    try:
        # alternatively, replace with empty text literal
        # and swap the following True and False.
        f.write(b'')
    except TypeError:
        return False
    return True
</code></pre>
<p>Unless you are to frequently test if a stream is in binary mode or not (which is unnecessary since binary-ness of a stream should not change for the lifetime of the object), I suspect any performance drawbacks resulting from extensive usage of catching exceptions would be an issue (you could certainly optimize for the likelier path, though).</p>
</div>
<div class="post-text" itemprop="text">
<p>There is one library called mimetypes where guess_type returns the The return value is a tuple (type, encoding) where type is None if the type canâ€™t be guessed (missing or unknown suffix) or a string of the form 'type/subtype'</p>
<pre><code>import mimetypes
file= mimetypes.guess_type(file)
</code></pre>
</div>
<span class="comment-copy">Excellent, and also thanks for the documentation link and pointing me to the io module. I only found the definition of <a href="https://docs.python.org/3.6/glossary.html#term-file-object" rel="nofollow noreferrer">file object</a> in the glossary which is very superficial.... Also, now that I think about it, another pythonic way would probably just to try reading, and catching an exception if it fails.</span>
<span class="comment-copy">This is not about the contents of the file. This is about how the file was opened. Please do read the question carefully, they specifically mention another question where this might be an answer, but <i>this one is not that question</i>.</span>
