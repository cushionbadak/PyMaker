<div class="post-text" itemprop="text">
<p>Note: This is a hypothetical question:
So I Googled several variations of this question ("String literl", "Escape Char", "Raw String", etc), mainly only solution they said was to place a "r" before the first quote of a string. I also tried using .format() into a raw string, re/repr, and I tried .replace() the slashes, but it already converts the escape char.</p>
<pre><code>path = r"C:\Users\Chris\Documents\Python_2.7\2016\MyProgram"
os.path.exists( path ) # Return True
os.listdir( path ) # Returns list of files in directory
</code></pre>
<p>However, what if it was a pre-defined variable returned from a separate function/class (for example)?</p>
<pre><code>path = Class.Function.GetPath()
os.path.exists( path ) ## Returns False
os.listdir(path) ## Will print something like: 
## Windows Error... "C:\\Users\\Chris\\Documents\\Python_2.7\x816\\MyProgram"
</code></pre>
<p>So my question is: How do you make a pre defined variable a string literal, and get something like this path to work?</p>
<p>Update: This is all hypothetical! Just curious if there is a way to reverse escaped chars!!!</p>
<p>Example: </p>
<pre><code>s = "\x77"
print s  ## Prints "w"
len(s)  ## Returns 1

MagicFunction(s)  ## Returns "\x77" ???
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I dont quite understand your question. Is the output of <code>Class.Function.GetPath ()</code> returning a string, or the raw data? Test to make sure it's a string. If it isnt simply cast the return value as <code>str</code>.</p>
<pre><code>path = str(Class.Function.GetPath()) # Make sure the variable is a string
print os.path.exists( path ) # Check the location
print os.listdir(path)

# repr vs str
print path         # path is already an str data type.
print repr(path)   # Shows the true string value.
</code></pre>
<p>If there was a newline character the only way to display it is to cancel out the functionality by adding another backslash represented as <code>'\\n</code> instead of '\n'.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the question:</p>
<blockquote>
<pre><code>s = "\x77"
print s  ## Prints "w"
len(s)  ## Returns 1

MagicFunction(s)  ## Returns "\x77" ???
</code></pre>
</blockquote>
<p>The variable <code>s</code> stores the string "w". There are several ways to write the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">string literal</a>:</p>
<ul>
<li><code>"w"</code></li>
<li><code>"\x77"</code></li>
<li><code>"\167"</code></li>
</ul>
<p>Unicode strings add:</p>
<ul>
<li><code>"\N{LATIN SMALL LETTER W}"</code></li>
<li><code>"\u0077"</code></li>
<li><code>"\U00000077"</code></li>
</ul>
<p>The variable just contains the string with one character "w". The information, how the input was written in the input file is lost. Therefore, <code>MagicFunction</code> could only return a list all possible forms without knowing the original form.</p>
</div>
<span class="comment-copy">There is a difference between a <i>string</i> and a <i>string literal</i>...</span>
<span class="comment-copy">A raw string literal is just a different way to create a string. Like hexadecimal notation is a different way to create a number. It doesn't matter if you write <code>num = 15</code> or <code>num = 0xf</code>, the result is always the integer 15. Similarly, <code>string = r"something"</code> is still a normal string.</span>
<span class="comment-copy"><code>r"C:\Users\Chris\Documents\Python_2.7\2016\MyProgram"</code> and <code>"C:\\Users\\Chris\\Documents\\Python_2.7\\2016\\MyProgram"</code> <b>are the exact same string</b>. Literally precisely identical. No difference between how they act when used whatsoever, on account of which this question seems to be based on a misconception.</span>
<span class="comment-copy">You can test this yourself: Run <code>print repr(r"C:\Users\Chris\Documents")</code> to see how Python will represent a variable with that value at the REPL.</span>
<span class="comment-copy">...the double-backslash sequence is just how a single literal backslash is printed (when generating a Python-format representation of a string's contents), same as <code>\t</code> is the way a literal tab is printed, <code>\n</code> is the way a literal newline is printed, etc.</span>
<span class="comment-copy">The function would hypothetically return a string, and store it into a variable, then later it would be used in things like os.listdir(). But I think that part about using double backslash might be worth looking into. Thanks</span>
<span class="comment-copy">Explicitly cast it as a string just in case. When returning from a function you  never know what data type your going to get.</span>
<span class="comment-copy">Or hardcode it into the function <code>GetPath (): return str(value)</code></span>
<span class="comment-copy">Alright, that makes sense. So I guess a better question would be: What format/coding is "\x77"? Cause if we know that, then we can easily convert it back, right?</span>
<span class="comment-copy">@ChrisNguyen Maybe, it is easier to understand with numbers: <code>a = 1</code>, <code>a = 01</code>, <code>a = 000000001</code> all store the same number 1 into the variable <code>a</code>. But, the variable does not know about the leading zeros</span>
