<div class="post-text" itemprop="text">
<p>Somebody came up with the brilliant idea of putting spaces in a filename. I need to do scp from python using that filename, which is problematic because the shell parses the command, and scp has also some quircks regarding spaces. This is my test code:</p>
<pre><code>import subprocess
import shlex


def split_it(command):
    return shlex.split(command)
    #return command.split(" ")


def upload_file(localfile, host, mypath):
    command = split_it('scp {} {}:"{}"'.format(localfile, host, mypath))
    print(command)
    res = subprocess.run(command, stdout=subprocess.PIPE)
    return res.stdout.decode()


upload_file("localfile.txt", "hostname", "/some/directory/a file with spaces.txt")
</code></pre>
<p>Which gives:</p>
<pre><code>['scp', 'localfile.txt', 'hostname:/some/directory/a file with spaces.txt']
scp: ambiguous target
</code></pre>
<p>Using the naive version with <code>command.split(" ")</code>:</p>
<pre><code>['scp', 'localfile.txt', 'hostname:"/some/directory/a', 'file', 'with', 'spaces.txt"']
spaces.txt": No such file or directory
</code></pre>
<p>The right, working scp command would be:</p>
<pre><code>['scp', 'localfile.txt', 'hostname:"/some/directory/a file with spaces.txt"']
</code></pre>
<ol>
<li>Is there a ready solution for this?</li>
<li>If not, what would be the robust way of doing:</li>
</ol>
<pre><code>split_it('scp localfile.txt hostname:"/some/directory/a file with spaces.txt"')
# returns ['scp', 'localfile.txt', 'hostname:"/some/directory/a file with spaces.txt"']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<pre><code>command = split_it('scp {} {}:"{}"'.format(localfile, host, mypath))
</code></pre>
</blockquote>
<ol>
<li><p>Instead of building a command string, only to <code>split_it</code> again, directly build a list of arguments.</p></li>
<li><p>In order to add one layer of quoting to the remote file path, use <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex.quote</code></a> (or <a href="https://docs.python.org/2/library/pipes.html#pipes.quote" rel="nofollow noreferrer"><code>pipes.quote</code></a> if using older Python versions).</p></li>
</ol>
<pre><code>command = ['scp', localfile, '{}:{}'.format(host, shlex.quote(mypath))]
</code></pre>
<hr/>
<p>Sources/related posts:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/19858176/how-to-escape-spaces-in-path-during-scp-copy-in-linux">How to escape spaces in path during scp copy in linux?</a></li>
<li><a href="https://stackoverflow.com/questions/22729431/python-scp-copy-file-with-spaces-in-filename">Python scp copy file with spaces in filename</a></li>
<li><a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#popen-constructor</a></li>
</ul>
</div>
<span class="comment-copy">Related, although not directly a duplicate: <a href="https://stackoverflow.com/questions/19858176/how-to-escape-spaces-in-path-during-scp-copy-in-linux" title="how to escape spaces in path during scp copy in linux">stackoverflow.com/questions/19858176/â€¦</a></span>
<span class="comment-copy">@mkrieger1: the quoting in your link is precisely the way I create the scp command at the start. The trouble starts after that.</span>
<span class="comment-copy">Yes, as stated in the top answer there, you need to somehow double-escape the spaces. But I'm not sure if there's a good way to do that in Python.</span>
<span class="comment-copy">i.e., <code>command = ['scp', localfile, '{}:{}'.format(host, shlex.quote(mypath))]</code></span>
<span class="comment-copy">@delavnog, <b>any</b> parameter is, eventually, passed to the program you're running as an array element (remember, <code>int main(int argc, char** argv)</code> is part of calling convention for <b>any</b> case when you're calling a new executable, no matter what language it's implemented in). Why are you trying to create a string in such a format as to be correctly split into an array, instead of just specifying the array of strings you actually want in the first place?</span>
<span class="comment-copy">A beauty, works perfectly! Thanks!</span>
