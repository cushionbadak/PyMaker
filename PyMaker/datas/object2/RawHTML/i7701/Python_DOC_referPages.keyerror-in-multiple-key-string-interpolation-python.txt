<div class="post-text" itemprop="text">
<p>I am having a problem like</p>
<pre><code>In [5]: x = "this string takes two like {one} and {two}"

In [6]: y = x.format(one="one")
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
&lt;ipython-input-6-b3c89fbea4d3&gt; in &lt;module&gt;()
----&gt; 1 y = x.format(one="one")

KeyError: 'two'
</code></pre>
<p>I have a compound string with many keys that gets kept in a config file. For 8 different queries, they all use the same string, except 1 key is a different setting. I need to be able to substitute a key in that file to save the strings for later like:</p>
<pre><code>"this string takes two like one and {two}"
</code></pre>
<p>How do I substitute one key at a time using <code>format</code>? Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>If placeholders in your string don't have any format specifications, in Python 3 you can use <code>str.format_map</code> and provide a mapping, returning the field name for missing fields:</p>
<pre><code>class Default(dict):
    def __missing__(self, key):
        return '{' + key + '}'
</code></pre>
<pre><code>In [6]: x = "this string takes two like {one} and {two}"

In [7]: x.format_map(Default(one=1))
Out[7]: 'this string takes two like 1 and {two}'
</code></pre>
<p>If you do have format specifications, you'll have to subclass <code>string.Formatter</code> and override some methods, or switch to a different formatting method, like <code>string.Template</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think <a href="https://docs.python.org/2/library/string.html#string.Template" rel="nofollow noreferrer"><code>string.Template</code></a> does what you want:</p>
<pre><code>from string import Template

s = "this string takes two like $one and $two"
s = Template(s).safe_substitute(one=1)
print(s)
# this string takes two like 1 and $two

s = Template(s).safe_substitute(two=2)
print(s)
# this string takes two like 1 and 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can escape the interpolation of <code>{two}</code> by doubling the curly brackets:</p>
<pre><code>x = "this string takes two like {one} and {{two}}"
y = x.format(one=1)
z = y.format(two=2)
print(z) # this string takes two like 1 and 2
</code></pre>
<hr/>
<p>a different way to go are <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">template strings</a>:</p>
<pre><code>from string import Template

t = Template('this string takes two like $one and $two')
y = t.safe_substitute(one=1)
print(y)  # this string takes two like 1 and $two
z = Template(y).safe_substitute(two=2)
print(z) # this string takes two like 1 and 2
</code></pre>
<p>(<a href="https://stackoverflow.com/a/44576618/4954037">this answer</a> was before mine for the template strings....)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can replace <code>{two}</code> by <code>{two}</code> to enable further replacement later:</p>
<pre><code>y = x.format(one="one", two="{two}")
</code></pre>
<p>This easily extends in multiple replacement passages, but it requires that you give all keys, in each iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>All great answers, I will start using this <code>Template</code> package soon. Very disappointed in the default behavior here, not understanding why a string template requires passing all the keys each time, if there are 3 keys I can't see a logical reason you can't pass 1 or 2 (but I also don't know how compilers work)</p>
<p>Solved by using <code>%s</code> for the items I'm immediately substituting in the config file, and <code>{key}</code> for the keys I replace later upon execution of the flask server</p>
<pre><code>In [1]: issue = "Python3 string {item} are somewhat defective: %s"

In [2]: preformatted_issue = issue % 'true'

In [3]: preformatted_issue
Out[3]: 'Python3 string {item} are somewhat defective: true'

In [4]: result = preformatted_issue.format(item='templates')

In [5]: result
Out[5]: 'Python3 string templates are somewhat defective: true'
</code></pre>
</div>
<span class="comment-copy">You can at least do <code>y = x.format(one="one", two="{two}")</code> but that may not be the best way to approach it...</span>
<span class="comment-copy">How about <code>y = x.replace('{one}', 'whatever')</code> ?</span>
<span class="comment-copy">Pretty interesting approach.</span>
<span class="comment-copy">let's see that one</span>
<span class="comment-copy">It leads to problems for longer sequences substituted bit-by-bit...</span>
<span class="comment-copy">for some reason this worked in shell but blew up when I tried to run the server</span>
