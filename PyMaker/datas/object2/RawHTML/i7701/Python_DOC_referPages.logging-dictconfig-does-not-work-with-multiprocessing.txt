<div class="post-text" itemprop="text">
<p>My problem is: Python logging configuration is not working using configuration file and multiprocessing.</p>
<p>I'm using python2.7.</p>
<h1>Example</h1>
<p>Here my <strong>example.py</strong>:</p>
<pre><code>import json
import logging
import logging.config
import multiprocessing


def get_logger():
    with open("logging.conf") as fd:
        config_json_obj = json.load(fd)
    #logging.config.dictConfig(config_json_obj)
    logging.basicConfig(filename="my.log", level=logging.INFO)
    logger = logging.getLogger(__name__)
    return logger

def funSquare(num):
    logger = get_logger()
    # write logging info from process
    logger.info(num ** 2)
    return num ** 2


if __name__ == '__main__':
    logger = get_logger()

    logger.info("Start program")
    pool = multiprocessing.Pool()
    results = pool.map(funSquare, range(10))
    print(results)
</code></pre>
<p>And here my <strong>logging.conf</strong> file:</p>
<pre><code>{
  "version": 1,
  "formatters":
  {
    "simple":
    {
      "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    },
    "verbose":
    {
      "format": "%(asctime)s %(thread)s %(levelname)s %(module)s [-] %(message)s"
    }
  },
  "handlers":
  {
    "console":
    {
      "class": "logging.StreamHandler",
      "level": "DEBUG",
      "formatter": "simple",
      "stream": "ext://sys.stdout"
    },
    "file":
    {
      "class": "logging.FileHandler",
      "formatter": "verbose",
      "level": "DEBUG",
      "filename": "mylog.log"
    }
  },
  "loggers":
  {
    "Main":
    {
      "level": "INFO",
      "handlers": ["console", "file"],
      "propagate": 0
    }
  },
  "root":
  {
    "level": "DEBUG",
    "handlers": ["file"]
  }
}
</code></pre>
<p>At this point, example.py is working. You will get in my.log file logging lines from both main program and new processes.</p>
<h1>Reproduce my problem</h1>
<p>Now, if I replace lines:</p>
<pre><code>#logging.config.dictConfig(config_json_obj)
logging.basicConfig(filename="my.log", level=logging.INFO)
</code></pre>
<p>By</p>
<pre><code>logging.config.dictConfig(config_json_obj)
#logging.basicConfig(filename="my.log", level=logging.INFO)
</code></pre>
<p>In my.log file you will see logging lines only from main program, not from processes.</p>
<p>Now my questions:</p>
<ol>
<li>Why this is happening?</li>
<li>What is the solution?</li>
</ol>
<p>Thank you for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't expect writing from multiple process into a single file to work (it may work in some situations, but can't be guaranteed). The correct way is to use a multiprocessing <code>Queue</code> and have all the file writing done by a single process, as outlined in <a href="https://plumberjack.blogspot.co.uk/2010/09/using-logging-with-multiprocessing.html" rel="nofollow noreferrer">this blog post</a> from 2010 (too long to reproduce here). The important thing is that each process configures logging <em>after</em> it's created. You could adapt the linked example to use <code>dictConfig</code> rather than the programmatic configuration shown in the example, if you need to.</p>
</div>
<div class="post-text" itemprop="text">
<p>the problem is that <code>__name__</code> will evaluate <code>'__main__'</code>; you need to </p>
<ul>
<li>either: rename <code>"Main"</code> in your config file to <code>"__main__"</code> (for the name of the logger)</li>
<li>or (maybe more robust): <code>logger = logging.getLogger('Main')</code> in your main file</li>
</ul>
<p>the logger you are getting with <code>logging.getLogger(__name__)</code> is not configured otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>In logging.DictConfig, the root logger is defined by "". Thus in your dictionnary, you should use:</p>
<pre><code>"":
{
  "level": "DEBUG",
  "handlers": ["file"]
}
</code></pre>
<p>to properly set the root logger (and in the .ini file, you use "root", don't ask me why)</p>
</div>
<span class="comment-copy">hiro, thanks, your solution works for me. However, what do you think about comment from @Vinay?</span>
<span class="comment-copy">i totally agree with his comment. you will have race conditions that may cause problmes...a <code>Queue</code> is an excellent solution! there may be others. this may help <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a> (have a look at who the author is...)</span>
