<div class="post-text" itemprop="text">
<p>I have the following function defined in its own file called MTG.py.  It is supposed to take an adjacency matrix as an input, and create a graph.</p>
<pre><code>import pygraphviz as pgv
import numpy as np

def matrix_to_graph(M):
    A = pgv.AGraph()
    for i in range(0, np.shape(M)[0]):
        for j in range(0, np.shape(M)[0]):
            if i &lt; j and M[i][j] == 1:
                A.add_edge(i,j)
    A.write('M.dot')
    C = pgv.AGraph('M.dot')
    C.layout()
    C.draw('M.png')
</code></pre>
<p>When I run from the command line</p>
<pre><code>from MTG import matrix_to_graph
M = [[0, 1, 0, 1, 1], [1, 0, 1, 1, 0], [0, 1, 0, 0, 0], [1, 1, 0, 0, 1], [1, 0, 0, 1, 0]]
matrix_to_graph(M)
</code></pre>
<p>I get exactly what I want, which is the correct graph printed to M.png.</p>
<p>However, if I add to the code above (with no indent, i.e. outside the definition of the function)</p>
<pre><code>M = input("Enter an adjacency matrix:")
matrix_to_graph(M)
</code></pre>
<p>I get the error</p>
<pre><code> for i in range(0, np.shape(M)[0]):
IndexError: tuple index out of range
</code></pre>
<p>I imagine this is happening because the input function is taking in what I <em>think</em> is a matrix, but is <em>actually</em> something else.  I've tried to rectify this by using np.matrix(M), but that turns my matrix in a 1x16 vector. I am new to Python, and I'm sure there are 1000 ways to do this better, but I really want to figure out why this particular way is not working.</p>
<p>I am using PyCharm 2017.1.3 (community edition, if that matters), and Python 3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3's <code>input</code> returns a <code>str</code>, it doesn't parse it to make a Python data structure just because the contents look like a Python literal. In this case, if you want to be able to enter a <code>list</code> of <code>list</code> of <code>int</code>s literal, I'd recommend <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">using <code>ast.literal_eval</code></a> to (safely) convert from the string representing the matrix literal to the <code>list</code> itself:</p>
<pre><code>import ast

M = ast.literal_eval(input("Enter an adjacency matrix:"))
</code></pre>
<p>You're probably used to Python 2, where <code>input</code> was equivalent to doing <code>eval(input(...))</code> in Python 3, but that version of <code>input</code> was dangerous and removed for good reason; <code>ast.literal_eval</code> gets you what you need without allowing arbitrary code execution.</p>
</div>
<span class="comment-copy">I'm happy that I knew where the problem was coming from, and even happier that the fix was real easy.  Thanks.</span>
