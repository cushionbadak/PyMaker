<div class="post-text" itemprop="text">
<p>I have the following use case:</p>
<ol>
<li>Call a function which returns iterator in python</li>
<li>Check if iterator is not empty</li>
<li>If not empty, then do some operation</li>
</ol>
<p>However, the process of checking if the iterator is empty, seems to empty it. Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>To get a copy of an iterator so that you can operate on it independently of the original, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer">itertools.tee</a>.  You can test if an iterator is empty by seeing if it throws StopIteration. </p>
<p>So you could do something like:</p>
<pre><code>def isempty(it):
    try:
        itcpy = itertools.tee(it,1)[0]
        itcpy.next()
        return False
    except StopIteration:
        return True

def empty_iterator():
    if False:
        yield

it = empty_iterator()
if not isempty(it):
    # won't print
    print(len(list(it)))

it = xrange(4)
if not isempty(it):
    # will print
    print(len(list(it)))
</code></pre>
</div>
<span class="comment-copy">No, since most iterators don't know the length themselves, and an iterator can be <i>infinite</i>: for instance <code>itertools.repeat</code>.</span>
<span class="comment-copy">You don't need the length of an iterable to check if it is empty.  You just need to try to take one item out of it.  Depending on the use case, you can just use that item directly before processing the rest of the iterable, or you can use the item and the iterable to construct a <i>new</i> iterable which you can then process.</span>
<span class="comment-copy">Usually you iterate over an iterator and when it is empty there will be no iteration.</span>
<span class="comment-copy">You're describing Schr√∂dinger's iterator.  "the process of checking if the iterator is empty, seems to empty it."</span>
<span class="comment-copy">This will not work. <code>xrange</code> is not an iterator, it is an <i>iterable</i>. Try this with <code>x = xrange(4); it = iter(x)</code>. You will see that if you do <code>isempty(it)</code>, then try <code>len(list(it))</code> you will get 3. Note, since <code>xrange</code> is a sequence type, to check if it is empty, you can simply do <code>if x:</code>. Or try <code>bool(xrange(0))</code> and <code>bool(xrange(1))</code></span>
<span class="comment-copy">BTW if you don't believe me that <code>xrange</code> objects are not iterators, try <code>next(xrange(10))</code> and see what the python interpreter has to say about it.</span>
