<div class="post-text" itemprop="text">
<p>I am executing Maple from Python and would like to stop the program if it exceeds a maximum time. If its a Python function this can be done by using a timeout-decorator. But I am not sure how to do it for command line calls. Here is the pseudocode</p>
<pre><code>import os
import timeit as tt

t1 = tt.default_timer()
os.system('echo path_to_maple params')
t2 = tt.default_timer()
dt = t2 - t1
</code></pre>
<p>Just to time this program, all works fine. However the maple program takes a lot of time so I would like to define a maxtime, check whether t1 &lt; maxtime then let program execute else no. i.e. change the script to something like this:</p>
<pre><code>import sys
maxtime = 10 # seconds

t1 = tt.default_timer()
if (t1 &lt; maxtime):
   os.system('echo path_to_maple params')
    t2 = tt.default_timer()
    dt = t2 - t1
else:
    sys.exit('Timeout')
</code></pre>
<p>At the moment this is not working. Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> to spawn a child process. Make sure to handle stdout and stderr properly. Then use <a href="https://docs.python.org/3.3/library/subprocess.html#subprocess.Popen.wait" rel="nofollow noreferrer"><code>Popen.wait(timeout)</code></a> call and kill the process when <a href="https://docs.python.org/3.3/library/subprocess.html#subprocess.TimeoutExpired" rel="nofollow noreferrer"><code>TimeoutExpired</code></a> arrive.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen()</code></a> to do your bidding, if you're using Python version prior to 3.3 you'll have to do handle the timeout yourself, tho:</p>
<pre><code>import subprocess
import sys
import time

# multi-platform precision clock
get_timer = time.clock if sys.platform == "win32" else time.time

timeout = 10  # in seconds

# don't forget to set STDIN/STDERR handling if you need them...
process = subprocess.Popen(["maple", "args", "and", "such"])
current_time = get_timer()
while get_timer() &lt; current_time + timeout and process.poll() is None:
    time.sleep(0.5)  # wait half a second, you can adjust the precision
if process.poll() is None:  # timeout expired, if it's still running...
    process.terminate()  # TERMINATE IT! :D
</code></pre>
<p>In Python 3.3+ it's as easy as calling: <code>subprocess.run(["maple", "args", "and", "such"], timeout=10)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use </p>
<p><code>threading.Timer(TIME, function , args=(,))</code></p>
<p>To execute function after a delay</p>
</div>
<span class="comment-copy">there is the better way to do it. To use <code>timeout</code> command line util which already does what are you need. If you use Windows, try to find the similar utility for Windows.</span>
<span class="comment-copy">Hi! True I believe that is for Python versions &gt; 3. I am using 2.7, and thats the catch right now.</span>
<span class="comment-copy">if you want to use Python for it - see answer of Artur below - it's absolutely right :)</span>
