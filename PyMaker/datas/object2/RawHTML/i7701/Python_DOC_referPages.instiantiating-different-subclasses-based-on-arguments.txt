<div class="post-text" itemprop="text">
<p>I have a <code>RoundRobinChecker</code> and a <code>PlayoffChecker</code> class, both inheriting from <code>ViolationChecker</code>, which checks whether a given round-robin or playoff match passes the rules or not.</p>
<p>The constructor has one argument, the match: <code>ViolationChecker(match)</code>. Now, if the match is a playoff match (<code>match.playoff</code>), a <code>PlayoffChecker</code> should be instantiated, otherwise it should be a <code>RoundRobinChecker</code>. I could just do this:</p>
<pre><code>checkers = [PlayoffChecker(match) if match.playoff else RoundRobinChecker(match) for match in matches]
</code></pre>
<p>But this is kind of an unclean way of doing it. Would it be possible to just call the parent class constructor, <code>ViolationChecker(match)</code>, and this would create the instance of the corresponding subclass?</p>
<p>What design could I use here to choose the appropriate class in a transparent way?</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to make <code>ViolationChecker(match)</code> work, you can override the <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code> method</a> in your parent class like this:</p>
<pre><code>class ViolationChecker:
    def __new__(cls, match):
        if match.playoff:
            cls= PlayoffChecker
        else:
            cls= RoundRobinChecker

        inst= object.__new__(cls)
        return inst #implicit call to inst.__init__(match)
</code></pre>
<p>However, it's not obvious to someone who reads your code that <code>ViolationChecker(match)</code> returns an instance of a subclass. I recommend adding a staticmethod with a clear name to <code>ViolationChecker</code>, something like this:</p>
<pre><code>class ViolationChecker:
    @staticmethod
    def new_for_match(match):
        if match.playoff:
            cls= PlayoffChecker
        else:
            cls= RoundRobinChecker

        inst= cls(match)
        return inst
</code></pre>
<p>Now you can do <code>ViolationChecker.new_for_match(match)</code>, which conveys the intention of creating a <code>ViolationChecker</code> specifically for this <code>match</code> instance more clearly.</p>
</div>
