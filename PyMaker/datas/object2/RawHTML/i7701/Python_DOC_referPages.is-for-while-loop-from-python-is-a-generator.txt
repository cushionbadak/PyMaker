<div class="post-text" itemprop="text">
<p>In an interview , the interviewer asked me for some of generators being  used in Python. I know a generator is like a function which <code>yield</code> values instead of <code>return</code>.</p>
<p>so any one tell me is <code>for</code>/<code>while</code> loop is an example of generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: <strong>No</strong>, but there are other forms of generators.</p>
<p>A <strong><code>for</code>/<code>while</code> loop is a <em>loop structure</em></strong>: it does not emit values and thus is not a generator.</p>
<p>Nevertheless, there are <strong>other ways to construct generators</strong>.</p>
<p>You example with <strong><code>yield</code></strong> is for instance a generator:</p>
<pre><code>def some_generator(xs):
    for x in xs:
        if x:
            yield x
</code></pre>
<p>But there are also <strong><em>generator expressions</em></strong>, like:</p>
<pre><code>(x for x in xs if x)
</code></pre>
<p>Furthermore in <a class="post-tag" href="/questions/tagged/python-3.x" rel="tag" title="show questions tagged 'python-3.x'">python-3.x</a> the <strong><code>range(..)</code>, <code>map(..)</code>, <code>filter(..)</code></strong> constructs are generators as well.</p>
<p>And of course you can make an <strong><em>iterable</em></strong> (by using an <em>iterable pattern</em>):</p>
<pre><code>class some_generator(object):
    def __init__(self, xs):
        self.n = n
        self.idx = 0

    def __iter__(self):
        return self

    def __next__(self):
        return self.next()

    def next(self):
        while self.num &lt; len(self.xs) and not self.xs[self.num]:
            self.num += 1
        if self.num &lt; len(self.xs):
            res = self.xs[self.num]
            self.num += 1
            return res
        else:
            raise StopIteration()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Neither <code>while</code> nor <code>for</code> are themselves generators or iterators. They are control constructs that perform iteration. Certainly, you can use <code>for</code> or <code>while</code> to iterate over the items yielded by a generator, and you can use <code>for</code> or <code>while</code> to perform iteration inside the code of a generator. But neither of those facts make <code>for</code> or <code>while</code> generators.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first line in <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">the python wiki for generators</a>:</p>
<blockquote>
<p>Generators functions allow you to declare a function that behaves like an iterator, i.e. <strong>it can be used in a for loop.</strong></p>
</blockquote>
<p>So in the context of your interview I'd believe they were looking for you to answer about the creation of an iterable.</p>
<p>The <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">wiki for a for loop</a></p>
<blockquote>
<p>In Python this is controlled instead by <em>generating</em> the appropriate sequence.</p>
</blockquote>
<p>So you could get pedantic but generally, no, a for loop isn't a generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>for and while are loop structures, and you can use them to iterate over generators. You can take certain elements of a generator by converting it to a list.</p>
</div>
<span class="comment-copy">A loop is something that can <i>iterate over</i> a generator, it is not itself a generator. Unless of course you're talking about the <code>(x for x in y)</code> generator syntax.</span>
<span class="comment-copy">AFAIK, it is not. It is a loop structure. Mind however that there are other forms of generators.</span>
<span class="comment-copy">May be this link helps you - <a href="http://anandology.com/python-practice-book/iterators.html" rel="nofollow noreferrer">anandology.com/python-practice-book/iterators.html</a></span>
<span class="comment-copy">Python provides a bunch of iterators in module <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow noreferrer">itertools</a>.</span>
<span class="comment-copy">Thanks.. That all I was looking for.. now I got the clear idea about generators. :)</span>
<span class="comment-copy">Thanks.. That's a great help :)</span>
<span class="comment-copy">actually <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> is not (no longer?) a generator...</span>
<span class="comment-copy">@hiroprotagonist: a <code>range(..)</code> constructs a <code>&lt;type range&gt;</code> object which has an <code>__iter__</code> function.</span>
<span class="comment-copy">@hiroprotagonist: <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">this wiki</a> says that "... and in Python 3 range() is a generator."</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0255/" rel="nofollow noreferrer">'a Python generator is a kind of Python iterator, but of an especially powerful kind'</a> as stated in PEP-0255. so: you are right! sorry! i assumed (which is wrong) that generators an be consumed once only, need to contain <code>yield</code> or be a generator expression.</span>
