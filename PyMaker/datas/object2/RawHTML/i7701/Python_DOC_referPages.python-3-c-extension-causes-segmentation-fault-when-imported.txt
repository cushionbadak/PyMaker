<div class="post-text" itemprop="text">
<p>I am trying to port this <a href="https://github.com/dnet/pysecstr" rel="nofollow noreferrer">Python extension</a> to work with Python 3. Python 3 made many changes to the Python C/C++ API that necessitate modifications to legacy modules' initialization and argument passing functions. So far, I have taken the old Python 2 code:</p>
<pre><code>#include &lt;Python.h&gt;
#include &lt;openssl/crypto.h&gt;

static PyObject* SecureString_clearmem(PyObject *self, PyObject *str) {
    char *buffer;
    Py_ssize_t length;

    if (PyString_AsStringAndSize(str, &amp;buffer, &amp;length) != -1) {
        OPENSSL_cleanse(buffer, length);
    }
    return Py_BuildValue("");
}

static PyMethodDef SecureStringMethods[] = {
    {"clearmem", SecureString_clearmem, METH_O,
        PyDoc_STR("clear the memory of the string")},
    {NULL, NULL, 0, NULL},
};

PyMODINIT_FUNC initSecureString(void)
{
    (void) Py_InitModule("SecureString", SecureStringMethods);
}
</code></pre>
<p>And I have made this, following <a href="https://gist.github.com/physacco/2e1b52415f3a964ad2a542a99bebed8f" rel="nofollow noreferrer">this example</a>:</p>
<pre><code>#define PY_SSIZE_T_CLEAN

#include &lt;Python.h&gt;
#include &lt;openssl/crypto.h&gt;

static PyObject* SecureString_clearmem(PyObject *self, PyObject *args) {
    char *buffer;
    Py_ssize_t length;

    if(!PyArg_ParseTuple(args, "s#", &amp;buffer, &amp;length)) {
        return NULL;
    }
    OPENSSL_cleanse(buffer, length);
    Py_RETURN_NONE;
}

static PyMethodDef SecureStringMethods[] = {
    {"SecureString_clearmem", SecureString_clearmem, METH_VARARGS, "clear the memory of the string"},
    {NULL, NULL, 0, NULL},
};

static struct PyMethodDef SecureStringDef = {
    PyModuleDef_HEAD_INIT,
    "SecureString",
    NULL,
    -1,
    SecureStringMethods,
};

PyMODINIT_FUNC PyInit_SecureString(void) {
    Py_Initialize(); 
    return PyModule_Create(&amp;SecureStringDef);
}
</code></pre>
<p>In theory, this should follow the new Python 3 rules for module initialization, argument passing, and string size variables. It successfully compiles and installs (I am using the same setup.py distributed with the project), but when I try to import it:</p>
<pre><code>import SecureString
</code></pre>
<p>I get a segmentation fault: </p>
<pre><code>Segmentation fault: 11
</code></pre>
<p>I have tried to attach gdb to examine the C code, but gdb is not working on my computer with Python C modules. I have also tried commenting out the OpenSSL code to see if that was the source of the problem, to no avail. My Python3 installation runs other programs that don't use this library. Could someone take a look at this and suggest where I should look or what I should try next?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The segfault is most likely caused by you defining the module struct as a <code>PyMethodDef</code> instead of a <code>PyModuleDef</code>:</p>
<pre><code>static struct PyModuleDef SecureStringDef 
</code></pre>
<p>In addition to that. I'm not sure why you've called <code>Py_Initialize</code> in the initialization function. Calling it is a no-op (since you're already running in an initialized interpreter when you call it).</p>
<p>As an aside, there's no need for the gist, Python already has <a href="https://docs.python.org/3/howto/cporting.html" rel="nofollow noreferrer">information</a> on how to port from 2 to 3.</p>
</div>
<span class="comment-copy">Thanks for this tip! BTW, I added an overview/summary to my question to try and make it as clear and descriptive as possible, to help people if they look at this question later on. Is that frowned upon here?</span>
<span class="comment-copy">Your question is completely fine as-is @SquawkBirdies. On the issue, is the seg fault still appearing?</span>
<span class="comment-copy">Implemented the suggestions and the segfault went away. Preliminary testing looks to show the expected behavior. Thanks!</span>
