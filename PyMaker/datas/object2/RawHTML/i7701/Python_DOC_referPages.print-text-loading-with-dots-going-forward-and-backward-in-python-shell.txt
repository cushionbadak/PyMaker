<div class="post-text" itemprop="text">
<p>I want to print Text 'Loading...' But its dots would be moving back and forward (in <strong>shell</strong>). </p>
<p>I am creating a text game and for that it will look better.<br/>
I know writing slowly a word but dots also have to go back.  </p>
<p>I am thinking that I should forget dots to come back.And for that:  </p>
<pre><code>import sys
import time
shell = sys.stdout.shell
shell.write('Loading',"stdout")
str = '........'
for letter in str:
    sys.stdout.write(letter)
    time.sleep(0.1)
</code></pre>
<p>What do you think?<br/>
If you have that dots would be moving back and forward Then please share with me.<br/>
If you want more information I am ready to Provide to you.<br/>
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use backtracking via backspace (<code>\b</code>) in your STDOUT to go back and 'erase' written characters before writing them again to simulate animated loading, e.g.:</p>
<pre><code>import sys
import time

loading = True  # a simple var to keep the loading status
loading_speed = 4  # number of characters to print out per second
loading_string = "." * 6  # characters to print out one by one (6 dots in this example)
while loading:
    #  track both the current character and its index for easier backtracking later
    for index, char in enumerate(loading_string):
        # you can check your loading status here
        # if the loading is done set `loading` to false and break
        sys.stdout.write(char)  # write the next char to STDOUT
        sys.stdout.flush()  # flush the output
        time.sleep(1.0 / loading_speed)  # wait to match our speed
    index += 1  # lists are zero indexed, we need to increase by one for the accurate count
    # backtrack the written characters, overwrite them with space, backtrack again:
    sys.stdout.write("\b" * index + " " * index + "\b" * index)
    sys.stdout.flush()  # flush the output
</code></pre>
<p>Keep in mind that this is a blocking process so you either have to do your loading checks within the <code>for</code> loop, or run your loading in a separate thread, or run this in a separate thread - it will keep running in a blocking mode as long as its local <code>loading</code> variable is set to <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check This Module <a href="https://pypi.python.org/pypi/keyboard" rel="nofollow noreferrer"><strong>Keyboard</strong></a> with many features. Install It, perhaps with this command:  </p>
<pre><code>pip3 install keyboard
</code></pre>
<p>Then Write the following code in File <strong>textdot.py</strong>:  </p>
<pre><code>def text(text_to_print,num_of_dots,num_of_loops):
    from time import sleep
    import keyboard
    import sys
    shell = sys.stdout.shell
    shell.write(text_to_print,'stdout')
    dotes = int(num_of_dots) * '.'
    for last in range(0,num_of_loops):
        for dot in dotes:
            keyboard.write('.')
            sleep(0.1)
        for dot in dotes:
            keyboard.write('\x08')
            sleep(0.1)
</code></pre>
<p>Now Paste the file in <em>Lib</em> from your python folder.<br/>
Now you Can use it like following example:  </p>
<pre><code>import textdot
textdot.text('Loading',6,3)
</code></pre>
<p>Thanks</p>
</div>
<span class="comment-copy">shell is not a property of sys.stdout, so this can't work.  Plus, the write method of a file descriptor takes just one argument. Moreover, you're overriding the 'str' builtin, and that's a bad practice. So, please edit your code providing at least a working example (even if it doesn't do what you expect).</span>
<span class="comment-copy">the link will expire after 30 or 27 days.</span>
<span class="comment-copy">can <code>flush</code> used to only remove last specific element? I mean if I print two lines in while loop till keyboard interrupt can it be used to remove only last line from it?</span>
<span class="comment-copy">@zwer Check What is Happening In this <a href="https://ibb.co/b0fL55" rel="nofollow noreferrer">Image</a></span>
<span class="comment-copy">@mini - don't run it in mock shells, run it in a regular shell/terminal/command prompt/whatever as a script (<code>python your_script.py</code>). Debug/test environments are not designed to follow common terminal practices.</span>
<span class="comment-copy">It Worked.You Are Awesome.But I want to Run It Shell.</span>
<span class="comment-copy">@Gahan - you can blank out the whole line via <code>sys.stdout.write("\r" + " " * 80 + "\r")</code> in most terminals, assuming that the terminal width is 80 characters. You cannot (easily) backtrack multiple lines in most terminals and if you need to move all over the screen I suggest you to use the <a href="https://docs.python.org/3/library/curses.html" rel="nofollow noreferrer"><code>curses</code></a> module. Check <a href="https://stackoverflow.com/a/44467635/7553525">this answer</a> for an example.</span>
