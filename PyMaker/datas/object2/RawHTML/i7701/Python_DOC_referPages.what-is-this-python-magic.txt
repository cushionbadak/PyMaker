<div class="post-text" itemprop="text">
<p>If you do this <code>{k:v for k,v in zip(*[iter(x)]*2)}</code> where <code>x</code> is a list of whatever, you'll get a dictionary with all the odd elements as keys and even ones as their values. woah!</p>
<pre><code>&gt;&gt;&gt; x = [1, "cat", "hat", 35,2.5, True]
&gt;&gt;&gt; d = {k:v for k,v in zip(*[iter(x)]*2)}
&gt;&gt;&gt; d
{1: "cat", "hat": 35, 2.5: True}
</code></pre>
<p>I have a basic understanding of how dictionary comprehensions work, how <code>zip</code> works, how <code>*</code> extracts arguments, how <code>[iter(x)]*2</code> concatenates two copies of the list, and so I was expecting a one-to-one correspondence like <code>{1: 1, "cat": "cat" ...}</code>.</p>
<p>What's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an interesting little piece of code for sure! The main thing it utilizes that you might not expect is that <strong>objects are, in effect, passed by reference</strong> (they're actually <a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">passed by assignment</a>, but hey). <code>iter()</code> constructs an object, so "copying" it (using multiplication on a list, in this case) doesn't create a new one, but rather <strong>adds another reference to the same one</strong>. That means you have a list where <code>l[0]</code> is an iterator, and <code>l[1]</code> is the <em>same</em> iterator - accessing them both accesses the very same object.</p>
<p>Every time the next element of the iterator is accessed, it continues where it last left off. Since elements are accessed alternately between the first and second elements of the tuples that <code>zip()</code> creates, the single iterator's state is advanced across both elements in the tuple.</p>
<p>After that, the dictionary comprehension simply consumes these pair tuples as they expand to <code>k, v</code> - as they would in any other dictionary comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>This <code>iter(x)</code> creates an iterator over the iterable (list or similar) <code>x</code>.  This iterator gets copied using <code>[iter(x)]*2</code>.  Now you have a list of two times <em>the same</em> iterator.  This means, if I ask one of them for a value, the other (which is the same) gets incremented as well.</p>
<p><code>zip()</code> now gets the two iterators (which are the same) as two parameters via the <code>zip(* ... )</code> syntax.  This means, it creates a list of pairs of the two arguments it got.  It will ask the first iterator for a value (and receive <code>x[0]</code>), then it will ask the other iterator for a value (and receive <code>x[1]</code>), then it will form a pair of the two values and put that in its output.  Then it will do this repeatedly until the iterators are exhausted.  By this it will form a pair of <code>x[2]</code> and <code>x[3]</code>, then a pair of <code>x[4]</code> and <code>x[5]</code>, etc.</p>
<p>This list of pairs then is passed to the dictionary comprehension which will form the pairs into key/values of a dictionary.</p>
<p>Easier to read might be this:</p>
<pre><code>{ k: v for (k, v) in zip(x[::2], x[1::2]) }
</code></pre>
<p>But that might not be as efficient.</p>
</div>
<span class="comment-copy">This can also be done like this:      <code>dict(zip(x[0::2],x[1::2]))</code></span>
<span class="comment-copy">Can also do: <code>dict(zip(x[0::2], x[1::2]))</code></span>
