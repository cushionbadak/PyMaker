<div class="post-text" itemprop="text">
<p>Let us consider the following function:  </p>
<pre><code>$f(x)=\begin{cases} 0,&amp;  \Pr(f(x)=0)=x \\  
 1,&amp;  \Pr(f(x)=1)=1-x\end{cases}$,

where $0&lt; x&lt; 1$
</code></pre>
<p><strong>Trial:</strong><br/>
I have tried with the following code but I,m not sure whether it is correct or not. The codes are here:  </p>
<pre><code>import random
def f(x):
    b=random.randint(0,1)
    return b

x=0.3
count0=0
count1=0
for i in range(1000):
    if f(x)==0:
        count0=count0+1
    else:
        count1=count1+1
print 'pr(f(x)=0)=', count0*1.0/1000
print 'pr(f(x)=1)=', count1*1.0/1000   
</code></pre>
<p>Does my code give the correct calculation? Please help?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you mean to say "0 with the probability of <code>x</code>, and 1 with the probability of <code>1 - x</code>", <a href="https://docs.python.org/3/library/random.html#random.random" rel="nofollow noreferrer"><code>random.random</code></a> returns a random number from <code>[0, 1)</code>, so you just check if <code>x</code> is greater than that number:</p>
<pre><code>import random

def f(x):
    return x &gt;= random.random()
</code></pre>
<p>Currently, your function returns <code>0</code> and <code>1</code> with a 50/50 chance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, your code does the correct solution (based on the binomial distribution you've created calling <strong>N</strong> times <em>f(x)</em> ).</p>
<p>However, the probability of selecting 0 or 1 randomly from (0, 1) is 50/50, but,  as you surely have noticed already, you're computing the probability for a given sample (Ex. [1, 1, 1, 1, 0]), not for the whole universe of calling infinite times f(x).</p>
<p>See: <a href="https://en.wikipedia.org/wiki/Binomial_distribution" rel="nofollow noreferrer">Binomial distribution</a>.</p>
<p>You could write a more readable code if you store the results of the function in a list like this:</p>
<pre><code>intents = []
num_intents = 1000

for i in range(num_intents):
    intent.append(f(x))
</code></pre>
<p>Then:</p>
<pre><code>print('pr(f(x)=0)={}'.format(intents.count(0)/num_intents)
print('pr(f(x)=1)={}'.format(intents.count(1)/num_intents)
</code></pre>
<p>I also recommend you to explore <a href="http://www.numpy.org/" rel="nofollow noreferrer">numpy</a> and binomial distributions, <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.binomial.html" rel="nofollow noreferrer">numpy.random.binamial</a></p>
</div>
<span class="comment-copy">It depends on what you want to achieve?</span>
<span class="comment-copy">Would the typesetted math look like <a href="//i.imgur.com/zmKZMsw.png" rel="nofollow noreferrer">this</a>? So <code>0</code> with a probability of <code>x</code>, otherwise <code>1</code>?</span>
<span class="comment-copy">What is equivalent Python code for the defined function? @EmmanuelMtali</span>
<span class="comment-copy">@Artyer yes, you are right.</span>
<span class="comment-copy">Are you asking whether the result of f(x) is 0 with probability x, and otherwise 1? If you can't tell from looking at the code, you can try printing f(0) a few times, and see if it always produces 1, or printing f(1) a few times and see if it always produces 0.</span>
<span class="comment-copy">I have used random.randint(0,1) which returns $0$ or $1$ randomly @Artyer</span>
<span class="comment-copy">@MKS with an even probability of either <code>0</code> or <code>1</code>. This function takes into account <code>x</code>.</span>
<span class="comment-copy">It seems that my python code does not give the correct probability according to the function.</span>
