<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>import os
import time
import asyncio


async def run_command(*args):
    """
    Example from:
        http://asyncio.readthedocs.io/en/latest/subprocess.html
    """
    # Create subprocess
    process = await asyncio.create_subprocess_exec(
        *args,
        # stdout must a pipe to be accessible as process.stdout
        stdout=asyncio.subprocess.PIPE)

    # Wait for the subprocess to finish
    stdout, stderr = await process.communicate()

    # Result
    result = stdout.decode().strip()

    # Return stdout
    return result


def run_asyncio_commands(tasks):
    """Run tasks using asyncio and return results"""
    loop = asyncio.get_event_loop()
    commands = asyncio.gather(*tasks)  # Unpack list using *
    results = loop.run_until_complete(commands)
    loop.close()
    return results


if __name__ == '__main__':

    start = time.time()

    cmds = [
        ['du', '-sh', '/Users/fredrik/Desktop'],
        ['du', '-sh', '/Users/fredrik'],
        ['du', '-sh', '/Users/fredrik/Pictures']
    ]

    tasks = []
    for cmd in cmds:
        tasks.append(run_command(*cmd))
    results = run_asyncio_commands(tasks)
    print(results)

    end = time.time()
    print('Script ran in', str(end - start), 'seconds')
</code></pre>
<p>When I run the that code in Python 3.6.1 on my mac, I get this:</p>
<pre><code>['780K\t/Users/fredrik/Desktop', '46G\t/Users/fredrik', '52M\t/Users/fredrik/Pictures']
Script ran in 6.405519008636475 seconds
</code></pre>
<p>But when I run the same script on Windows (but with the <code>du</code> commands substituted to something which works on Windows), also with Python 3.6.1, I get this:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\iruser\Desktop\asynciotest.py", line 66, in &lt;module&gt;
    results = run_asyncio_commands(tasks)
  File "C:\Users\iruser\Desktop\asynciotest.py", line 41, in run_asyncio_commands
    results = loop.run_until_complete(commands)
  File "C:\Users\fredrik\condaenvs\dev_py36\lib\asyncio\base_events.py", line 466, in run_until_complete
    return future.result()
  File "C:\Users\iruser\Desktop\asynciotest.py", line 16, in run_command
    stdout=asyncio.subprocess.PIPE)
  File "C:\Users\fredrik\condaenvs\dev_py36\lib\asyncio\subprocess.py", line 225, in create_subprocess_exec
    stderr=stderr, **kwds)
  File "C:\Users\fredrik\condaenvs\dev_py36\lib\asyncio\base_events.py", line 1190, in subprocess_exec
    bufsize, **kwargs)
  File "C:\Users\fredrik\condaenvs\dev_py36\lib\asyncio\coroutines.py", line 210, in coro
    res = func(*args, **kw)
  File "C:\Users\fredrik\condaenvs\dev_py36\lib\asyncio\base_events.py", line 340, in _make_subprocess_transp
ort
    raise NotImplementedError
NotImplementedError
</code></pre>
<p>This is what I substitute the Unix commands with on Windows:</p>
<pre><code>cmds = [['C:/Windows/system32/HOSTNAME.EXE']]
</code></pre>
<p>Windows version info:</p>
<pre><code>Python 3.6.1 | packaged by conda-forge | (default, May 23 2017, 14:21:39) [MSC v.1900 64 bit (AMD64)] on win32
Windows 10 Pro, version 1703, OS build 15063.413
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Different event loops implemented differently. Some of them have restrictions (sometimes OS-related). By default, Windows uses <a href="https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.SelectorEventLoop" rel="noreferrer">SelectorEventLoop</a> and as you can see in <a href="https://docs.python.org/3/library/asyncio-eventloops.html#windows" rel="noreferrer">doc</a>:</p>
<blockquote>
<p>SelectorEventLoop specific limits:</p>
<ul>
<li>SelectSelector is used which only supports sockets and is limited to    512 sockets.</li>
<li>add_reader() and add_writer() only accept file descriptors of sockets</li>
<li>Pipes are not supported (ex: connect_read_pipe(), connect_write_pipe())</li>
<li>Subprocesses are not supported (ex: subprocess_exec(), subprocess_shell())</li>
</ul>
</blockquote>
<p>To run your code in Windows you can use alternative event loop available by default - <code>ProactorEventLoop</code>. </p>
<p>Replace line:</p>
<pre><code>loop = asyncio.get_event_loop()
</code></pre>
<p>with this:</p>
<pre><code>loop = asyncio.ProactorEventLoop()
asyncio.set_event_loop(loop)
</code></pre>
<p>Your code will work.</p>
</div>
<div class="post-text" itemprop="text">
<p>3.7.0 Python documentation handles this here:
<a href="https://docs.python.org/3/library/asyncio-platforms.html#asyncio-windows-subprocess" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-platforms.html#asyncio-windows-subprocess</a></p>
<p>Set the event loop policy if you are using Windows - then your code will work.</p>
<p>In your startup, change the unix-specific section:</p>
<pre><code>cmds = [
    ['du', '-sh', '/Users/fredrik/Desktop'],
    ['du', '-sh', '/Users/fredrik'],
    ['du', '-sh', '/Users/fredrik/Pictures']
]
</code></pre>
<p>to handle Windows &amp; Unix:</p>
<pre><code>if 'win32' in sys.platform:
    # Windows specific event-loop policy &amp; cmd
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    cmds = [['C:/Windows/system32/HOSTNAME.EXE']]
else:
    # Unix default event-loop policy &amp; cmds
    cmds = [
        ['du', '-sh', '/Users/fredrik/Desktop'],
        ['du', '-sh', '/Users/fredrik'],
        ['du', '-sh', '/Users/fredrik/Pictures']
    ]
</code></pre>
</div>
<span class="comment-copy">By adding: asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())</span>
