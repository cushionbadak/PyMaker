<div class="post-text" itemprop="text">
<p>I'm just starting to learn programming and decided to do some self exercise.</p>
<p>I'm having a hard time how I can identify, split the data from a string separated by comma and a space then put each of them to different variables. I had not problem if the specs given is always complete. I just used split then assign the index to variables. The problem is not all strings have complete data. I'm having a hard time</p>
<pre><code>specs1 = "100,013km, Automatic, Petrol, 2360cc"
specs2 = "Manual, Diesel, 2500cc"
specs3 = "7,480km, Automatic, Electric"
</code></pre>
<p>What I want to achieve is to have an output like:
<em>Specs is user input</em></p>
<pre><code>-------------
Enter specs: 100,013km, Automatic, Petrol, 2360cc

Odometer: 100,013km
Transmission: Automatic
Fuel Type: Petrol
Engine Size: 2360cc


-------------
Enter specs: Manual, Diesel, 2500cc

Odometer: undefined
Transmission: Manual
Fuel Type: Diesel
Engine Size: 2500cc

-------------
Enter specs: 7,480km, Automatic, Electric

Odometer: 7,480km
Transmission: Automatic
Fuel Type: Electric
Engine Size: undefined
</code></pre>
<p>Can someone help me how to solve this and also explain it. I will really appreciate it. Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>My advise to use <a href="https://docs.python.org/3/library/stdtypes.html#str.rsplit" rel="nofollow noreferrer">str.rsplit()</a> to break line on comma character.<br/> Like this: <code>s1 = specs1.rsplit(', ')</code> <br/>
Than just use simple print or foreach, according to your goals.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict

specs_dict = OrderedDict([('Odometer', 'undefined'), ('Transmission', 'undefined'), ('Engine Size', 'undefined'), ('Engine Size', 'undefined')])

for spec in specs.split(\'):
    if 'km' in spec.lower() or 'mi' in spec.lower():
        specs_dict['Odometer'] = spec.strip()
    elif 'cc' in spec.lower():
        specs_dict['Engine size'] = spec.strip()
    elif spec.lower() in ['automatic', 'manual']:
        specs_dict['Transmission'] = spec.strip()
    else:
        specs_dict['Fuel Type'] = spec.strip()

for k, v in specs_dict:
    print('{}: {}'.format(k, v))
</code></pre>
<p>Ordered dictionary retains your order.</p>
<p>Initially all specs are preset to undefined, then start setting them based on inputs from user.</p>
</div>
<div class="post-text" itemprop="text">
<p>Split input using <code>split(str=", ")</code>, then pull strings one by one from temp list and compare them with some criteria to put them at the right place in final list.  </p>
<pre><code>def func(specs_list_temp):
    if "km" in specs_list_temp[0]:
        specs_list.append(specs_list_temp[0])
        specs_list_temp.pop(0)
    else: 
        specs_list.append("undefined")
    if specs_list_temp[0] in ("Automatic", "Manual"):
        specs_list.append(specs_list_temp[0])
        specs_list_temp.pop(0)
    else: 
        specs_list.append("undefined")
    if specs_list_temp[0] in ("Petrol", "Diesel", "Electric"):
        specs_list.append(specs_list_temp[0])
        specs_list_temp.pop(0)
    else: 
        specs_list.append("undefined")
    if "cc" in specs_list_temp[0]:
        specs_list.append(specs_list_temp[0])
    else: 
        specs_list.append("undefined")

specs1 = "100,013km, Automatic, Petrol, 2360cc"
specs1_list_temp = specs1.split(str=", ")
specs1_list_temp.append("undefined")
specs1_list = func(specs1_list_temp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def to_int(s):
    """
    Convert a digit string with commas, ie "1,234,567"
      to an integer, ie 1234567
    """
    return int(s.replace(',', ''))

class Spec:
    TRANS_TYPES = {"automatic", "manual"}
    FUEL_TYPES = {"diesel", "electric", "petrol"}

    @classmethod
    def loads(cls, s, sep=", "):
        args = {}
        for arg in s.split(sep):
            arg = arg.strip().lower()
            if arg.endswith('km'):
                args['odo'] = to_int(arg[:-2].strip())
            elif arg in cls.TRANS_TYPES:
                args['trans'] = arg
            elif arg in cls.FUEL_TYPES:
                args['fuel'] = arg
            elif arg.endswith('cc'):
                args['eng'] = to_int(arg[:-2].strip())
            else:
                raise ValueError('unrecognized input ({})'.format(arg))
        return cls(**args)

    def __init__(self, odo=None, trans=None, fuel=None, eng=None):
        self.odo   = odo
        self.trans = trans
        self.fuel  = fuel
        self.eng   = eng

    def __str__(self):
        odo   = "undefined" if self.odo   is None else "{:,d} km".format(self.odo)
        trans = "undefined" if self.trans is None else self.trans.title()
        fuel  = "undefined" if self.fuel  is None else self.fuel.title()
        eng   = "undefined" if self.eng   is None else "{:d}cc".format(self.eng)
        return (
            "Odometer: {odo}\n"
            "Transmission: {trans}\n"
            "Fuel Type: {fuel}\n"
            "Engine Size: {eng}"
        ).format(odo=odo, trans=trans, fuel=fuel, eng=eng)
</code></pre>
<p>then</p>
<pre><code>def main():
    # data strings
    specs = [
        "100,013km, Automatic, Petrol, 2360cc",
        "Manual, Diesel, 2500cc",
        "7,480km, Automatic, Electric"
    ]

    for spec in specs:
        print("-------------")
        print("Enter specs:", spec)
        car = Spec.loads(spec)
        print("\n{}\n\n".format(car))

if __name__ == "__main__":
    main()
</code></pre>
<p>produces</p>
<pre><code>-------------
Enter specs: 100,013km, Automatic, Petrol, 2360cc

Odometer: 100,013 km
Transmission: Automatic
Fuel Type: Petrol
Engine Size: 2360cc


-------------
Enter specs: Manual, Diesel, 2500cc

Odometer: undefined
Transmission: Manual
Fuel Type: Diesel
Engine Size: 2500cc


-------------
Enter specs: 7,480km, Automatic, Electric

Odometer: 7,480 km
Transmission: Automatic
Fuel Type: Electric
Engine Size: undefined
</code></pre>
</div>
<span class="comment-copy">have you tried anything?</span>
<span class="comment-copy">Yes, I'm still working on this right now. I'm using split then thinking of identifying the index after that</span>
<span class="comment-copy">Does not print non-present values with "undefined"</span>
<span class="comment-copy">Added that capability now</span>
