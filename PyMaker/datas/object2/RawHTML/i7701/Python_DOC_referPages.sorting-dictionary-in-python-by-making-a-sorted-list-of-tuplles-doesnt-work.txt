<div class="post-text" itemprop="text">
<p>I've been using the solution provided in <a href="https://stackoverflow.com/questions/613183/sort-a-python-dictionary-by-value?rq=1">Sorting_Dictionary</a> to sort a dictionary according to values.I know dictionaries cannot be as such sorted but a list of sorted tupples can be obtained.</p>
<p>Complete code:</p>
<pre><code>import sys
import pprint


def helper(filename):
    Word_count={}
    f=open(filename)
    for line in f:
        words=line.split()
        for word in words:
            word=word.lower()
            Word_count.setdefault(word,0)
            Word_count[word]+=1
    f.close()
    return Word_count

def print_words(filename):
    Word_count_new=helper(filename)
    sorted_count=sorted(Word_count_new.items(),key=Word_count_new.get,reverse=True)
    for word in sorted_count:
      pprint.pprint(word)

def print_top(filename):
    word_list=[]
    Word_count=helper(filename)
    word_list=[(k,v) for k,v in Word_count.items()]
    for i in range(20):
        print word_list[i] + '\n'
###

# This basic command line argument parsing code is provided and
# calls the print_words() and print_top() functions which you must define.
def main():
  if len(sys.argv) != 3:
    print 'usage: ./wordcount.py {--count | --topcount} file'
    sys.exit(1)

  option = sys.argv[1]
  filename = sys.argv[2]
  if option == '--count':
    print_words(filename)
  elif option == '--topcount':
    print_top(filename)
  else:
    print 'unknown option: ' + option
    sys.exit(1)

if __name__ == '__main__':
  main()
</code></pre>
<p>This function produces problem:</p>
<pre><code>def print_words(filename):
    Word_count_new=helper(filename)
    sorted_count=sorted(Word_count_new.items(),key=Word_count_new.get,reverse=True)
    for word in sorted_count:
        pprint.pprint(word)
</code></pre>
<p>here helper is a method which returns a dictionary which is to be sorted. The dictionary is like this {Dad:1, Mom:2, baby:3}</p>
<p>But this doesn't produce a sorted list of tupples. Instead the output is somewhat random like this</p>
<pre><code>('he', 111)
("hot-tempered,'", 1)
('made', 29)
('wise', 2)
('whether', 11)
('wish', 21)
('scroll', 1)
('eyes;', 1)
('this,', 17)
('signed', 2)
('this.', 1)
</code></pre>
<p>How can we explain this behaviour?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code> sorted_count = sorted(Word_count_new.items(), key=lambda x: x[1], reverse=True)
</code></pre>
<p>According to the documentation for sorted (<a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#sorted</a>), the second argument is a function that creates a comparison key from <em>each list element</em>, so not the dict as a whole.</p>
<p><code>Word_count_new.items()</code> returns an iterable (in python3, list in python2) of tuples, which is what's passed to your key function. If you want your comparison key to be based of the work frequency (the second element), you want to return the second element in this function (<code>x[1]</code> where <code>x</code> is the individual tuple getting compared).</p>
<p>To also explain the random output you got, your key was <code>Word_count_new.get</code>. Since your dict does not have tuples as keys, the default value will be None.</p>
</div>
<span class="comment-copy">What is <code>helper</code> and what does its <code>get()</code> method do?</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described.</span>
<span class="comment-copy">I've updated about helper but this get() method is standard which returns the value corresponding to a key and returns default value of key is not present</span>
<span class="comment-copy">you should just use <code>sorted_count=sorted(Word_count_new.items(),key=lambda x:x[1],reverse=True)</code></span>
<span class="comment-copy">Your code, as shown, looks ok. The problem must be in in the <code>helper</code>. Did you implement it yourself? If so, show us the code. If not, what module does it come from?</span>
<span class="comment-copy">"<i>passing a tuple to this may just cause some undefined behavior</i>" - Why so?</span>
<span class="comment-copy">The behavior of passing the <code>tuple</code> is perfectly defined: <code>.get</code> will not find that tuple, and return <code>None</code>. Since <code>sorted</code> is guaranteed stable, and <code>None</code> always compares equal to <code>None</code>, everything will return in the same order that would normally result from iterating over <code>.items</code>.</span>
<span class="comment-copy">Thanks!! It worked. But the get function also creates the value as the comparison key then why doesn't it work?</span>
<span class="comment-copy">@PrabhatSharma " the get function also creates the value as the comparison key" huh? What do you mean?</span>
<span class="comment-copy">@LeoCHan actually, the default value has a default value!</span>
