<div class="post-text" itemprop="text">
<p>Suppose I have a function of the form</p>
<pre><code>def foo(times=None):
    iterator = range(times) if times else itertools.count()
    for _ in iterator:
        # do stuff
</code></pre>
<p>Is there a more Pythonic or elegant way to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>For one, if you are not using the variable, as it seems to be as you are using <code>_</code> as the name, use <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat(None)</code></a>, as it more closely resembles what you want to do, and it is very very slightly more efficient.</p>
<p>And if you are already using <code>itertools.repeat</code>, use the second <code>times</code> argument:</p>
<pre><code>def foo(*times):
    for _ in itertools.repeat(None, *times):
        # do stuff
</code></pre>
<p>If you don't want to mangle the signature, you can do it like this:</p>
<pre><code>def foo(times=None):
    for _ in itertools.repeat(*((None, times) if times is not None else (None,))):
        # do stuff
</code></pre>
<p>Which looks much less elegant, but prevents you from accidentally supplying too many args.</p>
</div>
<span class="comment-copy">Might be stating the obvious, but you <i>do</i> have a <code>break</code> condition inside your "do stuff" if you are going to possibly loop forever?</span>
<span class="comment-copy">@idjaw Yes, this is for a decorator that attempts a function <code>times</code> times before giving up (if exceptions are raised). If times is <code>None</code> the decorator just keeps on trying the function until a <code>KeyboardInterrupt</code>.</span>
<span class="comment-copy">That seems fine to me. Personally, I would probably have something other than a keyboard interrupt to "help" break out of that infinite loop. But, to me that looks fine.</span>
<span class="comment-copy">@idjaw It's kind of wasteful, though, because <code>count</code> performs all this addition for no reason. Also just generally I hate having to do an entire ternary and variable assignment for such a simple purpose.</span>
<span class="comment-copy">The latest answer posted did something interesting. I forgot about repeat. Interesting.</span>
<span class="comment-copy">This is exactly what I was looking for! A way of combining the two cases in a natural iterator. It also gets rid of the useless addition in <code>count</code>. Thanks!</span>
<span class="comment-copy">@RenéG Do note that that useless addition is very little CPU time, too little to really care.</span>
<span class="comment-copy">Wait, why did you do <code>*times</code> instead of <code>times</code>?</span>
<span class="comment-copy">@RenéG Because of the way that <code>itertools.repeat</code> is implemented, <code>itertools.repeat(None, None)</code> raises an error. Using *times means that it doesn't provide an arg if it doesn't exist.</span>
<span class="comment-copy">Why doesn't this raise <code>NoneType is not iterable</code>? The docs don't say anything about the first argument being <code>None</code></span>
