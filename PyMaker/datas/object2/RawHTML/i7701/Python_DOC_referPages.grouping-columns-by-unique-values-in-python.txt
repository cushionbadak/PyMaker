<div class="post-text" itemprop="text">
<p>I have a data set with two columns and I need to change it from this format:</p>
<pre><code>10  1 
10  5
10  3
11  5
11  4
12  6
12  2
</code></pre>
<p>to this</p>
<pre><code>10  1  5  3
11  5  4
12  6  2
</code></pre>
<p>I need every unique value in the first column to be on its own row.  </p>
<p>I am a beginner with Python and beyond reading in my text file, I'm at a loss for how to proceed. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use Pandas dataframes.</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'A':[10,10,10,11,11,12,12],'B':[1,5,3,5,4,6,2]})
print(df)
</code></pre>
<p>Output:</p>
<pre><code>    A  B
0  10  1
1  10  5
2  10  3
3  11  5
4  11  4
5  12  6
6  12  2
</code></pre>
<p>Let's use <code>groupby</code> and <code>join</code>:</p>
<pre><code>df.groupby('A')['B'].apply(lambda x:' '.join(x.astype(str)))
</code></pre>
<p>Output: </p>
<pre><code>A
10    1 5 3
11      5 4
12      6 2
Name: B, dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3.6/library/collections.html?highlight=defaultdict#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict</a> subclass:</p>
<pre><code>import collections
with open('yourfile.txt', 'r') as f:
    d = collections.defaultdict(list)
    for k,v in (l.split() for l in f.read().splitlines()):  # processing each line
        d[k].append(v)             # accumulating values for the same 1st column
    for k,v in sorted(d.items()):  # outputting grouped sequences
        print('%s  %s' % (k,'  '.join(v)))
</code></pre>
<p>The output:</p>
<pre><code>10  1  5  3
11  5  4
12  6  2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>an example using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> only; this is all in the python standard library (although the <a href="https://stackoverflow.com/a/44606480/4954037"><code>pandas</code> version</a> is way more concise!).</p>
<p>assuming the keys you want to group are adjacent this could all be done lazily (no need to have all your data in-memory at any time):</p>
<pre><code>from io import StringIO
from itertools import groupby

text = '''10  1
10  5
10  3
11  5
11  4
12  6
12  2'''

# read and group data:
with StringIO(text) as file:
    keys = []
    res = {}

    data = (line.strip().split() for line in file)

    for k, g in groupby(data, key=lambda x: x[0]):
        keys.append(k)
        res[k] = [item[1] for item in g]

print(keys)  # ['10', '11', '12']
print(res)   # {'12': ['6', '2'], '10': ['1', '5', '3'], '11': ['5', '4']}

# write grouped data:
with StringIO() as out_file:
    for key in keys:
        out_file.write('{:3s}'.format(key))
        out_file.write(' '.join(['{:3s}'.format(item) for item in res[key]]))
        out_file.write('\n')
    print(out_file.getvalue())
    # 10 1   5   3
    # 11 5   4
    # 12 6   2
</code></pre>
<p>you can then replace the <code>with StringIO(text) as file:</code> with something like <code>with open('infile.txt', 'r') as file</code> for the program to read your actual file (and similar for the output file with <code>open('outfile.txt', 'w')</code>).</p>
<p>again: of course you could directly write to the output file every time a key is found; this way you would not need to have all the data in-memory at any time:</p>
<pre><code>with StringIO(text) as file, StringIO() as out_file:

    data = (line.strip().split() for line in file)

    for k, g in groupby(data, key=lambda x: x[0]):
        out_file.write('{:3s}'.format(k))
        out_file.write(' '.join(['{:3s}'.format(item[1]) for item in g]))
        out_file.write('\n')

    print(out_file.getvalue())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>I found this solution using dictonaries:</em></strong></p>
<pre><code>with open("data.txt", encoding='utf-8') as data:
    file = data.readlines()

    dic = {}
    for line in file:
        list1 = line.split()
        try:
            dic[list1[0]] += list1[1] + ' '
        except KeyError:
            dic[list1[0]] = list1[1] + ' '

    for k,v in dic.items():
        print(k,v)
</code></pre>
<p><strong><em>OUTPUT</em></strong></p>
<blockquote>
<p>10 1 5 3 </p>
<p>11 5 4 </p>
<p>12 6 2</p>
</blockquote>
<p><strong><em>Something more functional</em></strong></p>
<pre><code>def getdata(datafile):
    with open(datafile, encoding='utf-8') as data:
        file = data.readlines()

    dic = {}
    for line in file:
        list1 = line.split()
        try:
            dic[list1[0]] += list1[1] + ' '
        except KeyError:
            dic[list1[0]] = list1[1] + ' '

    for k,v in dic.items():
        v = v.split()
        print(k, ':',v)

getdata("data.txt")
</code></pre>
<p><strong><em>OUTPUT</em></strong></p>
<blockquote>
<p>11 : ['5', '4']</p>
<p>12 : ['6', '2'] </p>
<p>10 : ['1', '5', '3']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>pandas</code> may be easier. You can use <code>read_csv</code> function to read <code>txt</code> file where data is separated by space or spaces.</p>
<pre><code>import pandas as pd

df = pd.read_csv("input.txt", header=None, delimiter="\s+")
# setting column names
df.columns = ['col1', 'col2']
df
</code></pre>
<p>This is will give output of <code>dataframe</code> as:</p>
<pre><code>    col1  col2
0    10     1
1    10     5
2    10     3
3    11     5
4    11     4
5    12     6
6    12     2
</code></pre>
<p>After reading <code>txt</code> file to <code>dataframe</code>, similar to <code>apply</code> in previous other <a href="https://stackoverflow.com/a/44606480/5916727">answer</a>, you can also use <code>aggregate</code> and <code>join</code>:</p>
<pre><code>df_combine = df.groupby('col1')['col2'].agg(lambda col: ' '.join(col.astype('str'))).reset_index()
df_combine
</code></pre>
<p>Output:</p>
<pre><code>     col1     col2
0    10       1 5 3
1    11       5 4
2    12       6 2
</code></pre>
</div>
<span class="comment-copy">what is the field delimiter in your file?</span>
<span class="comment-copy">matter of taste: i try to avoid <code>defaultdict</code> and replace it with <code>dict.setdefault</code> as in <code>d.setdefault(k, []).append(v)</code>. would you have an opinion on that?</span>
<span class="comment-copy">@hiroprotagonist, from python documentation: <code>This technique is simpler and faster than an equivalent technique using dict.setdefault():</code> <a href="https://docs.python.org/3.6/library/collections.html?highlight=defaultdict#defaultdict-examples" rel="nofollow noreferrer">docs.python.org/3.6/library/â€¦</a></span>
<span class="comment-copy">ah! learned something. thanks!</span>
<span class="comment-copy">@hiroprotagonist, you're welcome</span>
