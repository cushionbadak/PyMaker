<div class="post-text" itemprop="text">
<p>I am trying to implement a protocol described in the paper <a href="http://ieeexplore.ieee.org/document/7368584/" rel="nofollow noreferrer">Private Data Aggregation with Groups for Smart Grids in a Dynamic Setting using CRT</a> in python. </p>
<p>In order to do this, I need to calculate the following value: </p>
<p><a href="https://i.stack.imgur.com/DmAMF.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/DmAMF.png"/></a></p>
<p>I know that since python 3.6, you can calculate a SHA3 value as follows:</p>
<pre><code>import hashlib
hash_object = hashlib.sha3_512(b'value_to_encode')
hash_value = hash_object.hexdigest()
</code></pre>
<p>I was wondering you should solve this, since, as far as I know, a SHA-3 function returns a string and therefore cannot be calculated in a function with to the power of n.</p>
<p>What am I overlooking?</p>
</div>
<div class="post-text" itemprop="text">
<p>If we define a hash function $H: \{0, 1\}^* \rightarrow \{0, 1\}^n$, that is one that produces an $n$ bit output, we can always interpret the binary data $h$ that it outputs as an integer. The integer value of this digest is $\sum_{i=0}^n h_i 2^i$, in other words the digest is a base 2 representation of the integer.</p>
<p>In your case, since python has a notion of types, we need to take the binary string and convert it to an integer type. The builtin <code>int</code> function can do this for us:</p>
<blockquote>
<p>int(x=0) -&gt; integer</p>
<p>int(x, base=10) -&gt; integer</p>
<p>Convert a number or string to an integer, or return 0 if no arguments
  are given.  If x is a number, return x.__int__().  For floating point
  numbers, this truncates towards zero.</p>
<p>If x is not a number or if base is given, then x must be a string,
  bytes, or bytearray instance representing an integer literal in the
  given base.  The literal can be preceded by '+' or '-' and be surrounded
  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
  Base 0 means to interpret the base from the string as an integer literal.</p>
<p>&gt;&gt;&gt; int('0b100', base=0)</p>
<p>4</p>
</blockquote>
<p>The <code>hexdigest</code> call will return a hex string which is base 16, so you would want to do something like <code>int_value = int(hash_value, 16)</code>.</p>
</div>
<span class="comment-copy">When you pass a string data type to python's internal hash functions I would use the method: a_string_data_type.encode('utf-8'). You can have silent failure without the encoding step with some versions of python.</span>
<span class="comment-copy">@back_seat_driver: <code>b'value_to_encode'</code> is not a string type, it's a bytes object.</span>
<span class="comment-copy">The <code>.digest()</code> method will output a bytes object, so constructing the int using <a href="https://docs.python.org/3/library/stdtypes.html#additional-methods-on-integer-types" rel="nofollow noreferrer"><code>int.from_bytes(...)</code></a> is another option that is probably a bit faster. Of course string conversion to/from hex is much faster than to/from decimal, so the difference should be minimal.</span>
