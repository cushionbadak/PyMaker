<div class="post-text" itemprop="text">
<p>I have a function that requires parameter to be both Sized and Iterable at the same time.  </p>
<pre><code>def foo(items):
    print(len(items))
    for i in item:
        print(i)
</code></pre>
<p>I thought that I can use standard <code>typing</code> module from python3.5+ and write this: </p>
<pre><code>from  typing import Collection, Any

def foo(items: Collection[Any]):
    print(len(items))
    for i in item:
        print(i)



foo([1, 2, 3])
# PyCharm warns: Expected type 'Collection', got 'List[int]' instead.
</code></pre>
<p><a href="https://docs.python.org/3/library/typing.html#typing.Collection" rel="nofollow noreferrer">Collection</a> looks like what I need:  <code>class typing.Collection(Sized, Iterable[T_co], Container[T_co])</code></p>
<p><strong>Why it causes warning?</strong> </p>
<p><strong>What should i do to hint parameter as both Iterable and Sized?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/typing.html#typing.Collection" rel="nofollow noreferrer"><code>Collection</code> was only introduced in 3.6</a>; odds are, your version of PyCharm doesn't recognize it yet.</p>
<p>There is no built-in that describes a sized, iterable container in 3.5, so you can't use this annotation in 3.5, at least, not without writing your own <code>typing</code> type, which PyCharm may or may not recognize.</p>
</div>
<div class="post-text" itemprop="text">
<p>A dirty fix to make Python 3.5 happy is to use <code>Union[Sized, Iterable[Any]]</code>.</p>
<p>It is dirty, because using this type annotation says that it should be either sized OR iterable, not sized AND iterable.
The current Pycharm (2018.1) accepts this, and it runs.</p>
<hr/>
<p><strong>UPDATE:</strong>
I have found a way to use <code>Collections</code> in Python versions &lt; 3.6.
Before 3.6 <code>Sequence</code> is basically what <code>Collection</code> is in 3.6 (See <a href="https://docs.python.org/3.5/library/typing.html#typing.Sequence" rel="nofollow noreferrer">here</a> and <a href="https://docs.python.org/3.6/library/typing.html#typing.Collection" rel="nofollow noreferrer">here</a>). In 3.6 a <code>Sequence</code> is basically a reversible <code>Collection</code> (see <a href="https://docs.python.org/3.6/library/typing.html#typing.Sequence" rel="nofollow noreferrer">here</a>), and this gave me issues, because a python <code>set</code> is not a sequence (it is not reversible) so I patched it with the following import code:</p>
<pre><code>if sys.version_info &gt;= (3, 6):
    from typing import Collection
else:
    from typing import Sequence, TypeVar

    T = TypeVar('T')
    Collection = Sequence[T]
</code></pre>
</div>
<span class="comment-copy"><code>Collection</code> is indeed sized and iterable (see also <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection" rel="nofollow noreferrer">the <code>abc</code> version</a>); this could be a bug in PyCharm or whatever plugin it uses.</span>
<span class="comment-copy">Probably this. See: <a href="https://youtrack.jetbrains.com/issue/PY-24605" rel="nofollow noreferrer">youtrack.jetbrains.com/issue/PY-24605</a></span>
<span class="comment-copy">@JimFasarakisHilliard, indeed it is. I had to check youtrack first.</span>
<span class="comment-copy">Could you suggest how to join Sized and Iterable in my own Type?</span>
<span class="comment-copy">@AlexanderChzhen: Easiest way would be to borrow the code from <a href="https://github.com/python/cpython/blob/3.6/Lib/_collections_abc.py#L388" rel="nofollow noreferrer">Python 3.6's <code>collections.abc</code></a> and <a href="https://github.com/python/cpython/blob/3.6/Lib/typing.py#L1812" rel="nofollow noreferrer"><code>typing</code> module</a> (qualifying names as needed) to make your own <code>Collection</code> ABC and <code>Collection</code> typing hint class. Copying the code would rely on implementation details, so you'd want to write code that tries to get <code>typing.Collection</code>, and only falls back to defining it using implementation details if you get an <code>ImportError</code>.</span>
