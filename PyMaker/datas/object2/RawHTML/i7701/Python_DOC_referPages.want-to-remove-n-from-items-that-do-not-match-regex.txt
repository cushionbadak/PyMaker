<div class="post-text" itemprop="text">
<p>If have block of text that has a non-uniform list that, for example, looks like the following:</p>
<pre><code>1234:5678 words.words
1234:567 words
1234:5678 wordswords
targetMe
1234:678 words
targetMe
</code></pre>
<p>And I have a regex that looks something like the following, I can act upon the items that do match it (i.e., everything but the lines that starts without numbers):</p>
<pre><code>fooRegex = re.compile(r'(\d{4}:\d+\s.*')
</code></pre>
<p>How can I target the lines that don't match the regex to remove the \n? In the end, I want something that would look like the following:</p>
<pre><code>1234:5678 words.words
1234:567 words
1234:5678 wordsword,targetMe
1234:678 words,targetMe
</code></pre>
<p>Or is there a better way to go about this than regular expressions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't even need regex for this, but if you want to do it with regex - use negative lookaheads to select the new lines to remove and replace them with a comma:</p>
<pre><code>import re

data = """1234:5678 words.words
1234:567 words
1234:5678 wordswords
targetMe
1234:678 words
targetMe"""

DATA_FIXER = re.compile(r"\n(?!\d{4}:\d+)")  # you want it compiled for reuse?

data_fix = DATA_FIXER.sub(",", data)
# 1234:5678 words.words
# 1234:567 words
# 1234:5678 wordswords,targetMe
# 1234:678 words,targetMe
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regex seems fine here, however your regex is invalid, you had an extra ( at the beginning.</p>
<p>I believe this does what you're looking for:</p>
<pre><code>import re

input = """1234:5678 words.words
1234:567 words
1234:5678 wordswords
targetMe
1234:678 words
targetMe"""

fooRegex = re.compile(r'\d{4}:\d+\s.*')

output = ''.join([ '\n' + line if fooRegex.search(line) is not None else ',' + line for line in input.split('\n') ])[1:]

print(output)
</code></pre>
<p>It splits the lines into a list, and then creates a new list out of elements that are added to the list depending on the results of the regex, with '\n' or ','. It then joins the elements of the list into a string, then we chop off the first '\n' with [1:]</p>
</div>
<span class="comment-copy">Do you think <code>re.compile</code> would really make a difference in this case? <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer">"Note: The compiled versions of the most recent patterns passed to re.compile() and the module-level matching functions are cached, so programs that use only a few regular expressions at a time neednâ€™t worry about compiling regular expressions."</a></span>
<span class="comment-copy">Thanks for the help here! For learning purposes, since this is still new to me: the <code>?!</code> at the beginning of the regex makes it look for elements <i>not</i> matching the regex? And what's happening with the <code>.sub()</code> at the end?</span>
<span class="comment-copy">@DeliriousLettuce - In this particular case, no. I even answered originally without a <code>pre-compiled</code> regex, but I wanted to follow the OP's style, it would probably be easier for him to understand. In dependence of Python version and complexity of a pattern (i.e. does it depend on externals) a compile is usually not required (or beneficial), but when reusing a pattern it doesn't hurt to have it compiled as it helps with readability and maintainability.</span>
<span class="comment-copy"><a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a> can be helpful for explaining what a regular expression is doing. @zwer I tend to agree with you about compiled regexes for readability and maintainability, I just wanted to leave that there in case OP wasn't aware. Thanks for the reply!</span>
<span class="comment-copy">@MarcMonforte - <code>(?!...)</code> denotes a <a href="http://www.regular-expressions.info/lookaround.html" rel="nofollow noreferrer">negative lookahead group</a> - essentially means select the preceding pattern if this pattern doesn't follow it - in our case select the new line only if it's not followed by four digits, followed by a column, followed by one or more digits. As for <code>re.sub()</code> it stands for <code>regex substitution</code> - replace the matched pattern with a comma in the string <code>data</code>.</span>
<span class="comment-copy">This doesn't match the expected output from the description...</span>
<span class="comment-copy">Yeah I misread the question. Update applied, though I like the other guy's answer better.</span>
