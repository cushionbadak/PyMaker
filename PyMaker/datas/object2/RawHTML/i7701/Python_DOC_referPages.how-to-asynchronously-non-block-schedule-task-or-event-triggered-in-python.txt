<div class="post-text" itemprop="text">
<p>I have written a sample code of my problem. The input message are split into fixed chunks and mixed using an intentional random delay. However, <code>sleep()</code> is blocking and won't run the next task. Is this possible on a single thread or do I have to resort to multi-threading?</p>
<pre><code>from random import randint
from time import sleep

def delay_message(split_message, delay):
    #sleep(delay) #this blocks
    print("Shuffled message: {} and time: {}". format(split_message, delay)) 

def main():
    message = raw_input('Input: ')

    #padding
    difference = len(message) % 5
    message=message.ljust(len(message)+5-difference, "0")

    for i in range(0, len(message), 5):
        delay = randint(0, 5)
        split_message = message[i:i+5]
        delay_message(split_message, delay)

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sleep</code> will indeed block its running thread.</p>
<p>It is possible to make it non-blocking by using libraries like <a href="http://www.gevent.org/intro.html#example" rel="nofollow noreferrer"><code>gevent</code></a>. Gevent can also patch <code>time.sleep</code> and make it non-blocking and also has its own non-blocking sleep. It can also patch the entire python standard library to make it non-blocking - socket, time, threading etc, see <a href="http://www.gevent.org/intro.html#monkey-patching" rel="nofollow noreferrer">documentation</a>.</p>
<p>The above example can be made co-operatively concurrent with gevent like so:</p>
<pre><code>from random import randint
from gevent import sleep, spawn, joinall

def delay_message(split_message, delay):
    # Gevent's sleep yields the event loop for
    # duration of delay rather than blocking the running thread
    sleep(delay)
    print("Shuffled message: {} and time: {}". format(split_message, delay)) 

def main():
    message = raw_input('Input: ')

    #padding
    difference = len(message) % 5
    message=message.ljust(len(message)+5-difference, "0")

    greenlets = []
    # This will create len(message)/5 number of greenlets,
    # which corresponds to the concurrency level.
    # Greenlets all run under one thread so there is no CPU
    # overhead here.
    for i in range(0, len(message), 5):
        delay = randint(0, 5)
        split_message = message[i:i+5]
        greenlets.append(spawn(delay_message, split_message, delay))
    # Wait for all greenlets to complete, raise any exceptions
    joinall(greenlets, raise_error=True)

if __name__ == "__main__":
    main()
</code></pre>
<p>The constraint is that CPU bound tasks cannot be run in greenlets as they would block the event loop and all other greenlets. </p>
<p>As long as what is run in greenlets is I/O bound, like passing messages in sockets or generators, other greenlets et al, greenlets are appropriate. For CPU bound tasks, use native threads or multiple processes.</p>
<p>There are other alternatives like <code>asyncio</code> (Py3 only). Gevent is compatible with Py2 and 3 and has very high performance, backed by native code extensions.</p>
</div>
<span class="comment-copy">have a look at <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer"><code>asyncio</code></a>. if it is really just a non-blocking sleep you need, that might help.</span>
<span class="comment-copy">Thank you, that is very interesting. By CPU-bound, do you mean if delay_message was performing a heavy operation? Or could you give me an example of what you mean by so</span>
<span class="comment-copy">CPU bound task would be anything that is blocked on executing code on the CPU. Examples would be audio/video encoding and decoding, image processing and so on, basically anything that involves code running on the CPU. I/O bound tasks would be reading/writing streams over network, network request handling, disk I/O and so on. Networking can be handled by threads as well but that means a lot of CPU overhead (increased CPU usage, reduced max concurrency) for something that is not in fact limited by the CPU. For that, co-operative multitasking, aka asynchronous I/O, is a better fit.</span>
<span class="comment-copy">that makes sense thanks for that. Gevent does not have <code>usleep() or nanosleep()</code> with high degree of accuracy. Is there a way to handle this with the current method? Or could you advise another way that I could look into</span>
<span class="comment-copy"><code>sleep(0.01)</code> and similar work fine for sub-second sleeps. About as accurate as anything else timer based.</span>
