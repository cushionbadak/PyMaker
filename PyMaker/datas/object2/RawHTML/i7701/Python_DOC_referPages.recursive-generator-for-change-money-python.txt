<div class="post-text" itemprop="text">
<p>First, thanks for any help. </p>
<p>I have this recursive code for counting ways of change from a list of coins and a given amount. </p>
<p>I need to write a recursive generator code that presents the ways in every iteration. Example at the end:</p>
<p>This is the code:</p>
<pre><code>def countChange(amount, coins):
    if (amount == 0):
        return 1
    elif (amount &lt; 0 or coins == []):
        return 0
    else:
    return (countChange(amount, coins[:-1]) + countChange(amount - coins[-1], coins))
</code></pre>
<p>Now, I need to present the ways with a recursive generator. I have a part of the code that I need to write:</p>
<pre><code>def change_gen(amount, coins):
    if amount == 0:
       yield ?????
    elif not (amount &lt; 0 or coins == []):
       g = change_gen(amount, coins[:-1])
       ????? 
</code></pre>
<p>This should be the output for example:</p>
<pre><code> for e in change_gen(5,[1,2,3]):
     print(e)

 [1, 1, 1, 1, 1]
 [1, 1, 1, 2]
 [1, 2, 2]
 [1, 1, 3]
 [2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Btw this reminds me of <a href="https://projecteuler.net/problem=31" rel="nofollow noreferrer">Problem 31</a>.</p>
<p>If you are using <strong>Python 3.3+</strong> we can write <code>change_gen</code> with <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow noreferrer"><code>yield from</code></a>:</p>
<pre><code>def change_gen(amount, coins):
    if amount == 0:
        yield 1
    elif amount &lt; 0 or not coins:
        yield 0
    else:
        yield from change_gen(amount, coins[:-1])
        yield from change_gen(amount - coins[-1], coins)
</code></pre>
<p>or without <code>yield from</code></p>
<pre><code>def change_gen(amount, coins):
    if amount == 0:
        yield 1
    elif amount &lt; 0 or not coins:
        yield 0
    else:
        for element in change_gen(amount, coins[:-1]):
            yield element
        for element in change_gen(amount - coins[-1], coins):
            yield element
</code></pre>
<h1>Tests</h1>
<pre><code>import random


for _ in range(10):
    amount = random.randint(0, 900)
    coins = list({random.randint(1, 100)
                  for _ in range(random.randint(1, 10))})
    assert countChange(amount, coins) == sum(change_gen(amount, coins))
</code></pre>
<p>worked fine, so it seems to give similar output</p>
<h1>Note</h1>
<p>You should remember that for large values of <code>amount</code> and small coins we may reach recursion limit (max depth is near <code>1000</code> on my machines).</p>
<hr/>
<h1>EDIT</h1>
<p>if you want to get which coins were used we can add extra parameter for them</p>
<pre><code>def change_gen(amount, left_coins, used_coins):
    if amount == 0:
        yield used_coins
    elif amount &lt; 0 or not left_coins:
        yield
    else:
        yield from change_gen(amount, left_coins[:-1],
                              used_coins=used_coins[:])
        yield from change_gen(amount - left_coins[-1],
                              left_coins,
                              used_coins[:] + [left_coins[-1]])
</code></pre>
<p>possible problem here is that in situations when amount is negative or no coins left <code>None</code> object will be yielded, but it's ok, we can filter them from results using <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a>:</p>
<pre><code>for e in filter(None, change_gen(5, [1, 2, 3], used_coins=[])):
    print(e)
</code></pre>
<p>gives us</p>
<pre><code>[1, 1, 1, 1, 1]
[2, 1, 1, 1]
[2, 2, 1]
[3, 1, 1]
[3, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://i.stack.imgur.com/n5yXO.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/n5yXO.png"/></a></p>
<p>this is the pattern.
i asked to complete it</p>
</div>
<span class="comment-copy">hi,thank you for the respond.</span>
<span class="comment-copy">but i need to write on the pattern that i gave.</span>
<span class="comment-copy">and your code didn't work...</span>
<span class="comment-copy">&gt;&gt;&gt; for e in change_gen(5,[1,2,3]):  print(e) [1, 1, 1, 1, 1] [1, 1, 1, 2] [1, 2, 2] [1, 1, 3] [2, 3] this should be output</span>
<span class="comment-copy">@AvriFridenson: you should edit current question instead of creating another one</span>
<span class="comment-copy">where did you get this from? whoever teach you programming – he is not a good teacher at all – main thing is that code should do job and do it correctly, it is not "fill-the-gap" game</span>
