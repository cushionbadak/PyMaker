<div class="post-text" itemprop="text">
<p>From what I understand, the integer division <code>//</code> operator is guaranteed to return an integer. However, while <code>2 // 1 == 1</code>, I also get <code>2.0 // 1 == 2.0</code>. Why doesn't python produce an integer, and, is it always safe to cast the output to <code>int</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You misunderstood the operator. It is a <em>floor division</em> operator, not an integer division operator.</p>
<p>For floating point inputs, it'll still return a floored float value.</p>
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="noreferrer"><em>Binary arithmetic operations</em> section</a>:</p>
<blockquote>
<p>The <code>/</code> (division) and <code>//</code> (floor division) operators yield the quotient of their arguments. The numeric arguments are first converted to a common type. Division of integers yields a float, while floor division of integers results in an integer; the result is that of mathematical division with the ‘floor’ function applied to the result.</p>
</blockquote>
<p>The result of flooring is safe to convert to an integer.</p>
</div>
