<div class="post-text" itemprop="text">
<p>I wanted to load a module named <code>mymodule</code> in a directory up two, and down one directory in my file system. Elsewhere I have used</p>
<pre><code>import sys
sys.path.append('../mydirectory')
import mymodule # in mydirectory
</code></pre>
<p>in order to go up one, then down one directory (in a package) to grab a module, so I expected this to work:</p>
<pre><code>import sys
sys.path.append('../../mydirectory')
import mymodule
</code></pre>
<p>However, I get a <code>ModuleNotFoundError: "No module named 'mymodule'"</code>. I'm confused because I ran this in a directory down one from the directory where I had the previous (working) program. (I tried adding <code>__init__.py</code> but it didn't help.) Does anyone know why this doesn't work? Any advice?</p>
</div>
<div class="post-text" itemprop="text">
<p>this is my go-to-method for just that:</p>
<pre><code>import sys
from pathlib import Path

HERE = Path(__file__).parent

sys.path.append(str(HERE / '../../mydirectory'))
</code></pre>
<p>using <code>__file__</code> i do not rely on the current working directory as starting point for relative paths - <code>HERE</code> is the directory the current file is in.</p>
<p>of course you do not have to use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> module</a>.</p>
</div>
<span class="comment-copy">It works great, thanks! :) Still kind of curious whether I'm wrong to feel as though what I tried should "morally speaking" work.</span>
<span class="comment-copy">relative paths will be taken with respect to your current working directory <code>os.getcwd()</code>. if that path matches the path your file is in, everything works! but if you start your program with something like <code>$ python some_dir/program.py</code> then it will not...</span>
<span class="comment-copy">When I read your reply I thought it must have been the text editor I was running from (it may have been using a working directory other than the location of the file that is open in the active window as I would have assumed), but now when I run it IT DOES WORK and a print(os.getcwd()) shows the <code>__file__</code> directory...so the only question I have left now is why in the world it wasn't working before? Ah well. Your point is well taken, I will use Path. Thank you! :)</span>
