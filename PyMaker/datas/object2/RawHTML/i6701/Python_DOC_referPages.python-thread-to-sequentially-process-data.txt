<div class="post-text" itemprop="text">
<p>I want two thread, that's say <code>thread1</code> and <code>thread2</code>. <code>thread1</code> takes 'c++' as input, and output ['c', '+', '+'], put it in a list, that's say <code>res</code>;
and <code>thread2</code> takes 'python' as input, and output ['p', 'y', 't', 'h', 'o', 'n'], put it in <code>res</code>. So after processing, res will be  [['c', '+', '+'], ['p', 'y', 't', 'h', 'o', 'n']], not [['p', 'y', 't', 'h', 'o', 'n'], ['c', '+', '+']]. The logic is like the following code, but I want a thread version code.</p>
<pre><code>train_set = [
    'c++',
    'python',
]

def to_list(item):
    return list(item)

res = list(map(to_list, train_set))
print(res) # [['c', '+', '+'], ['p', 'y', 't', 'h', 'o', 'n']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably best off using <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer"><code>queue</code> object</a>, which is designed for passing messages between threads. In particular, if you call the <code>get()</code> method on the queue, but the queue is currently empty, it will wait until a message becomes available. You will need a queue for each of your two worker threads, and also a third for the original thread to get results. I'm afraid I'm not going to write your code for you! But the example on the page I linked to illustrates how to use that class. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import thread

def func(Inp, res):
    res.append(list(Inp))
    return res

train_set = ['c++', 'python']
result=[]

try:
   thread.start_new_thread(func,(train_set[0],result))
   thread.start_new_thread(func,(train_set[1],result))
except:
   print "Error: unable to start thread"

for i in range(20):
   print(result)
   pass
</code></pre>
<p>but this task could be done easily this way:</p>
<pre><code>&gt;&gt;&gt; train_set = [
...     'c++',
...     'python',
... ]
&gt;&gt;&gt; res=[list(i) for i in train_set]
&gt;&gt;&gt; res
[['c', '+', '+'], ['p', 'y', 't', 'h', 'o', 'n']]
</code></pre>
</div>
<span class="comment-copy">This could not work under python3.6?</span>
<span class="comment-copy">not problem of python version, time for execution of threads, I have edited my post, it will run 20 time and give time sufficient to execute both threads.</span>
<span class="comment-copy">@Dadep Certainly the <code>print</code> statement will not work on Python 3, so you have not tested on that version.</span>
<span class="comment-copy">Oh yes sure, sorry... but before edit the main problem was the execution ...</span>
