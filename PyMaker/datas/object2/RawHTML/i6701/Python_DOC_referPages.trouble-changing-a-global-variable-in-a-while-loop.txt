<div class="post-text" itemprop="text">
<p>I'm trying to work out the last digit of a bar code however I'm having trouble with the second and last while loops.</p>
<p>They don't assign any new values to the variables <code>total</code> or <code>mOf10</code>. It instead leaves them as 0 and I don't understand why.</p>
<pre><code>while True:

    number = input("Enter a 7 digit number please.")
    if len(number) == 7:
        try:
            number = int(number)
        except ValueError:
            print("Please enter a number")
        else:
            break
    else:
        print("Please enter a valid number.")

print(number) #DELETE THIS BIT LATER!
i = 0
total = 0

while (i &lt; 7 == True):
    global total
    f = str(number)[i]
    if int(f) % 2 == 1:
        total = total + int(f) * 3
    else:
        total = total + int(f)
    i += 1

print(total)

mOf10 = 0

while True:
    global mOf10
    if mOf10 &gt;= total:
        break
    else:
        mOf10 += 10

finalD = mOf10 - total
print(finalD)
</code></pre>
<p>It prints out what ever 7 digit number you put in however it doesn't output the total or multiple of 10 as anything. They just come out as 0.</p>
<p>My teachers only solution to this was a lot of if/else statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what exactly you are trying to do here, but I can tell you what the problem is for which the value of <code>total</code> is not changing. The problem here is in the <code>condition</code> for the <code>while</code> loop. ie, the <code>while (i &lt; 7 == True)</code>.</p>
<pre><code>&gt;&gt;&gt; i&lt;7
True 
&gt;&gt;&gt; i&lt;7 == True
False
</code></pre>
<p>As you can see, the control never enters the while loop as the condition returns <code>False</code>.</p>
<p>Instead just do <code>while(i&lt;7)</code> . That should solve it.</p>
<p>Note : the use of <code>global</code> in the code is wrong, as the scope of the <code>total</code> and <code>mOf10</code> are local itself.</p>
<p><strong>Edit :</strong>
The reason for the odd behaviour is due to comparison operators having the <strong>same precedence</strong> and due to the <strong>chaining of the operators</strong>, where in for python something like <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>.</p>
<blockquote>
<p>According to Python docs :</p>
<p>Formally, if a, b, c, …, y, z are expressions and op1, op2, …, opN are
  comparison operators, then a op1 b op2 c ... y opN z is equivalent to
  a op1 b and b op2 c and ... y opN z, except that each expression is
  evaluated at most once.</p>
</blockquote>
<p>We know here :</p>
<pre><code>&gt;&gt;&gt; i &lt; 7
True
&gt;&gt;&gt; 7 == True
False
</code></pre>
<p>And due to the chaining of operators the whole condition in turn becomes <code>i &lt; 7 and 7 == True</code> . And since <code>7==True</code> is <code>False</code>, the condition in the end evaluates to <code>False</code> .</p>
</div>
<div class="post-text" itemprop="text">
<p>Comparisons are of equal precedence..<br/></p>
<p><code>a&lt;b&lt;c</code> are evaluated as <code>a&lt;b  and   b&lt;c</code><br/></p>
<p>So in your case <code>i&lt;7==True</code> is evaluated as <code>i&lt;7 and 7==True</code> implying either <br/>
  1. <code>True and False</code>  =&gt; <code>False</code> <strong>OR</strong><br/> 
  2. <code>False and False</code> =&gt; <code>False</code><br/></p>
<p>So it is always <code>False</code></p>
<p>For reference see...
<a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#comparisons</a></p>
<p>And please do the needful for the usage of <code>global</code></p>
</div>
<span class="comment-copy">you dont need to use global inside the while loop unless its a function</span>
<span class="comment-copy"><code>total</code> here is not a Global variable. It is in same scope as main</span>
<span class="comment-copy">neither is <code>mOf10</code></span>
<span class="comment-copy">If you remove the line <code>global total</code> and <code>global mOf10</code>, this should give you desired output</span>
<span class="comment-copy">my friend <code>i&lt;7==True</code> would always be false! try <code>(i&lt;7)==True</code> or just <code>i&lt;7</code></span>
<span class="comment-copy">Even better, replace the <code>i=0, while i &lt; 7, i++</code> construct with the more pythonic <code>for i in range(7)</code>.</span>
<span class="comment-copy">Yes, that is better. Just pointing out the OP's problem here though.</span>
<span class="comment-copy">Yep, comment was aimed more at OP than you!</span>
<span class="comment-copy">yo i love you. You're much better than my actual teacher</span>
<span class="comment-copy">Glad to help, and learn something in return. I too just learnt that a quirk  like this is there. Am guessing this happens due to <b>precedence</b> playing a role. Will update the answer with deeper explanation in a while.</span>
