<div class="post-text" itemprop="text">
<p>I've the following Python 3 code:</p>
<pre><code>import random
import numpy as np
data = []
for i in range(0, 100):
    value = random.randrange(100)
    avg10 = np.average(data[:-10]['value'])
    data += [{'value': value, 'avg10': avg10}]
</code></pre>
<p>which aims to generate 100 random numbers in the list along with the average of the last 10 items.</p>
<p>Unfortunately the code fails with:</p>
<pre><code>Traceback (most recent call last):
  File "avg_test.py", line 6, in &lt;module&gt;
    avg10 = np.average(data[:-10]['value'])
TypeError: list indices must be integers or slices, not str
</code></pre>
<p>as I'm not sure how I can access 10 last value items (or less items if all 10 are not available) from the list of dictionaries and pass it into numpy's <code>average</code> function.</p>
<p>So for example I expect the output something like:</p>
<blockquote>
<p><code>[{'value': 11, 'avg10': 11}, {'value': 62, 'avg10': 36.5}, {'value': 56, 'avg10': 43}, {'value': 48, 'avg10': 44.25}, {'value': 43, 'avg10': 41.8}]</code></p>
</blockquote>
<p>and so on.</p>
<p>Where <code>avg10</code> is the average of last (at least) 10 items relatively from the current one (ideally including the current one, but doesn't have to). If there is only one previous element, then it's the average of 1 element, if two - it's average of two value items, and so on (with average of maximum last 10 items).</p>
<p>What would be the correct syntax in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>To keep your dict solution and avoid problem with the first slices you can do the following.</p>
<p>Your line:</p>
<pre><code>avg10 = np.average(data[:-10]['value']) 
</code></pre>
<p>should be:</p>
<pre><code>avg10 = np.average([data[j]['value'] if j&gt;=0 else value for j in range(i-10, i) ])
</code></pre>
<p>But this will cause your <code>mean</code> NOT BEING the average of the 10 previous results, as there is no 10 previous results available...<br/>
Note: I choose that the first value has for mean itself but the <strong>second</strong> has for mean the 10 last available ones, so the <strong>only last one</strong>. So the first two values have themself as mean. This is strange. You can decide to change this behaviour with </p>
<p><code>avg10 = np.average([data[j]['value'] if j&gt;=0 else firstAverage for j in range(i-10, i) ])</code></p>
<p>If you decide to include the value itself within the last 10 for the average (i.e. dict of {value; mean of the last 9 items and the value itself}) then there is no more exception for the first item (which has no previous item) and you can do:</p>
<pre><code>for i in range(0, 100):
    value = random.randrange(100)
    lasts = [data[j]['value'] for j in range(i-9, i) if j&gt;=0]
    lasts.append(value)
    avg10 = np.average(lasts)
    data += [{'value': value, 'avg10': avg10}]
</code></pre>
<p>In this last case you can edit your question to more precise ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the complete solution where average also takes into account the current value:</p>
<pre><code>import random
import numpy as np
data = []
for i in range(0, 200):
    value = random.randrange(100)
    avg10 = np.average([x['value'] for x in data[-min(len(data), 10):]] + [value])
    data += [{'value': value, 'avg10': avg10}]
</code></pre>
<p>Basically <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.average.html" rel="nofollow noreferrer"><code>np.average()</code></a> accepts array containing data to be averaged, so list of dictionaries needs to be converted into flat list using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>. For the range, <code>-min(len(data), 10):</code> is used to fetch the last 10 items or less depending on the current size of <code>data</code>.</p>
<hr/>
<p>To understand the above sample more easily, here is the simpler helper code:</p>
<pre><code>&gt;&gt;&gt; data = []
&gt;&gt;&gt; for i in range(0, 10):
...     index = -min(len(data), 5)
...     data += [i]
...     print(i, index, data[index:])
... 
0 0 [0]
1 -1 [1]
2 -2 [1, 2]
3 -3 [1, 2, 3]
4 -4 [1, 2, 3, 4]
5 -5 [1, 2, 3, 4, 5]
6 -5 [2, 3, 4, 5, 6]
7 -5 [3, 4, 5, 6, 7]
8 -5 [4, 5, 6, 7, 8]
9 -5 [5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think what you're trying to do could be more easily accomplished with lists.</p>
<pre><code>values = [random.randrange(100)]
avgs = values.copy()
for i in range(1, 100):
    value = random.randrange(100)
    avg10 = np.average(values[:-10] if len(values) &gt; 10 else values)

    values.append(value)
    avgs.append(avg10)
</code></pre>
<p>You'll need an explicit check to take care of the condition where <code>values</code> is smaller than 10 elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error message gives a good hint for where to look: "list indices must be integers or slices, not str". In other words, we have to look for somewhere we're using a string as an index of a list.</p>
<p><code>data</code> is a list of dicts. Therefore, <code>data[:-10]</code> is also a list of dicts, meaning <code>data[:-10]['value']</code> doesn't make sense. You want something like <code>[x['value'] for x in data[:-10]]</code> instead, iterating over the list of dicts.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
import numpy as np
data = []
for i in range(0, 100):
    values = np.random.uniform(0, 100, size=100)
    value = random.randrange(100)
    avg10 = np.average(values[max(value-9,0):value+1])
    data += [{'value': value, 'avg10': avg10}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>import random
import numpy as np

data = []
for i in range(0, 100):
    value = random.randrange(100)
    avg10 = np.average(range(value+1)[-10:]) if value !=0 else 0
    data.append({'value': value, 'avg10': avg10})
print(data)
</code></pre>
</div>
<span class="comment-copy">Did you mean <code>avg10 = np.average(value[:-10])</code>?</span>
<span class="comment-copy">If not, when you say "last 10", do you mean in total, 1000 elements (100 times 10)?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ But <code>value</code> is a single value which is stored in <code>data</code> list, so to access last 10 items, I need to access it from the list.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Last 10 items from the current state of <code>data</code> as the <i>for</i> loop is progressing.</span>
<span class="comment-copy">aaah you're right, i edited, that was for the first item. As there is no previous item at all, you have to decide what to do in that case. This is an exception.  I decided to have itself as mean.</span>
<span class="comment-copy">new edit. It was <code>j&gt;=0</code> to include <code>data[0]</code></span>
<span class="comment-copy">Yes, this is what I mean, however there is an issue for the first 10 items, as it generates the <code>RuntimeWarning: Mean of empty slice</code>. Is there any way to avoid it? And at the same time to calculate the average values correctly for the last first 10 items?</span>
<span class="comment-copy">Hmm, almost, but I think the averages aren't correctly calculated for the first items, e.g. <code>[{'value': 1, 'avg10': 49.686383642577212}, {'value': 0, 'avg10': 48.589859834652742}</code> or <code>[{'value': 52, 'avg10': 52.935084257804498}</code>, not sure why.</span>
<span class="comment-copy">What is the relationship between <code>value</code> and <code>avg10</code> exactly? You are looking for the average of the last 10 items and a random value, isn't it?</span>
<span class="comment-copy"><code>avg10</code> is the average of last 10 items (including current one) relatively to the current item</span>
<span class="comment-copy">Well, tell me something. Imagine the random value is 56. You want the average of the last 10 items before 56, right?</span>
<span class="comment-copy">Average of 10 past items ideally including (or not) the current item (56), whatever is easier. I think it's better to include the current one, as the average will be missing for the 1st item.</span>
<span class="comment-copy">Why you're doing range using random value? Averages aren't correct, e.g.: <code>[{'value': 44, 'avg10': 38.5}, {'value': 18, 'avg10': 12.5}</code>...</span>
<span class="comment-copy">please try the updated answer</span>
<span class="comment-copy">range(value+1)[-10:] will give the last 10 values. for example if the value is 10 this will give [10,9,8,7,6,5,4,3,2,1]</span>
<span class="comment-copy">Similar thing: <code>[{'value': 50, 'avg10': 45.5}, {'value': 10, 'avg10': 5.5}</code>. <code>value</code> is a single random value added to <code>data</code> dict, so for me it doesn't make sense to pass it into <code>range()</code></span>
