<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#calls</a></p>
<blockquote>
<p>The primary must evaluate to a callable object (user-defined functions, built-in functions, methods of built-in objects, <strong>class
      objects</strong>, <strong>methods of class instances</strong>, and  all objects having a
      <code>__call__()</code> method are callable). </p>
</blockquote>
<ol>
<li>Does "class objects" refer to "instances of classes" or "classes
themselves as objects"? I guess it tries to mean the latter, but 
the wording seems to mean the former. If I am correct, in C++ and
Java, objects always mean instances of some classes, and that is
probably the cause of my confusion. What are some names that
are used to refer to "instances of classes"?</li>
<li><p>Does "methods of class instances" mean "functions as attributes of
instances of some classes" or "functions as attributes of some
classes which operate on instances of the classes"? I guess it tries
to mean the latter, but the wording seems to mean the former. An
instance of a class may have an attribution which isn't an attribute
of the class and which is a function:</p>
<pre><code>class C:
    pass

c=C()
def f():
    pass

c.myfun=f
</code></pre>
<p>where <code>c.myfun</code> is a function attribute of instance <code>c</code>, not a
function attribute of class <code>C</code>.</p>
<p>What are some names commonly used to refer to the attribute of an
instance of a class, which is not an attribute of a class?</p></li>
</ol>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Class objects refer to class objects.. not instances of that class.</p>
<pre><code>&gt;&gt;&gt; C
&lt;class __main__.C at 0x01FA89D0&gt;
</code></pre>
<p>Everything in python is an object. There are first class objects (here's a great answer about this subject <a href="https://stackoverflow.com/a/245208/840582">https://stackoverflow.com/a/245208/840582</a>).</p>
<p>'Methods of class instances' refers to <strong>methods (functions) defined inside the class and bounded to an instance</strong></p>
<pre><code>class C:
    pass

    def inst_f(self):
        pass

&gt;&gt;&gt; c
&lt;__main__.C instance at 0x0293A5F8&gt;
&gt;&gt;&gt; c.inst_f
&lt;bound method C.inst_f of &lt;__main__.C instance at 0x0293A5F8&gt;&gt;
&gt;&gt;&gt; f
&lt;function f at 0x02986070&gt;
</code></pre>
<p>Class instances are objects created using that class; <code>a = C()</code> a is an instance of C. You can see that in <code>&lt;__main__.C instance at 0x0293A5F8&gt;</code></p>
<p>In general, everything you see inside a class definition code that starts with <code>self</code> is an attribute of instance of the class. These are referred as <strong>instance variables</strong>.</p>
<p>Class variables (that is, all objects actually share the same variable) are defined without <code>self.</code> prefix. So for example</p>
<pre><code>class C:
    cls_var = 'static'  # this is a class attribute

    def __init__(self, x):
        self.x = x  # this is an instance attribute 

    def inst_f(self):
        pass

a = C('this is a')
b = C('this is b')

print a.x is b.x  # False

print a.cls_var  # static

print a.cls_var is b.cls_var  # True
</code></pre>
</div>
<span class="comment-copy">Thanks. What are some names that are used to refer to "instances of classes"?  What are some names commonly used to refer to the attribute of an instance of a class, which is not an attribute of a class?</span>
<span class="comment-copy">@Tim I've updated my answer to include that</span>
