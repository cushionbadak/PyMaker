<div class="post-text" itemprop="text">
<p>This question might be fairly straightforward, if you have some experience with <code>Python Flask</code>, <code>Boto3</code>, <code>Pillow</code> (a.k.a. <code>PIL</code>).</p>
<p>I'm attempting to receive an incoming image from a client (only allowing <code>.jpg</code>, <code>.jpeg</code>, <code>.tif</code>,) and i'd like to read the dimensions of the image before uploading it to Amazon S3 using <code>Boto3</code>.</p>
<p>The code is fairly straight forward:</p>
<pre><code>file = request.files['file'] 
# produces an instance of FileStorage

asset = models.Asset(file, AssetType.profile_img, donor.id) 
# a model managed by the ORM

img = Image.open(BytesIO(file.stream.read()))
# produces a PIL Image object

size = img.size
# read the size of the Image object

asset.width = size[0]
asset.height = size[1]
# set the size to the ORM

response = s3.Object('my-bucket', asset.s3_key()).put(Body=file)
# upload to S3
</code></pre>
<p>Here's the catch, I can either (A) read the image OR (B) upload to s3, but I can't do both. Literally, commenting out one or the other produces the desired operation, but not both in combination.</p>
<p>I've narrowed it down to the upload. It's my belief that somewhere along the line, the file.strea.read() operation is causing an issue with the Boto3 upload, but I can't figure it out. Can you?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're close - changing the byte source for S3 should do it.  Roughly, something like this:</p>
<pre><code>file = request.files['file'] 
# produces an instance of FileStorage

asset = models.Asset(file, AssetType.profile_img, donor.id) 
# a model managed by the ORM

image_bytes = BytesIO(file.stream.read())
# save bytes in a buffer

img = Image.open(image_bytes)
# produces a PIL Image object

size = img.size
# read the size of the Image object

asset.width = size[0]
asset.height = size[1]
# set the size to the ORM

image_bytes.seek(0)
response = s3.Object('my-bucket', asset.s3_key()).put(Body=image_bytes)
# upload to S3
</code></pre>
<p>Note the call to <code>seek</code> and the use of BytesIO in the call to S3.  I can't overstate how useful <code>BytesIO</code> and <code>StringIO</code> are for doing this sort of thing!</p>
</div>
<span class="comment-copy">You're probably at the end of the stream.  Once that happens, from boto's perspective, there are no more bytes to send.  If the files can fit in memory, you might want to try BytesIO as an intermediary - it will let you reset the stream pointer so you can upload after doing your check.  <a href="https://docs.python.org/3/library/io.html#binary-i-o" rel="nofollow noreferrer">docs.python.org/3/library/io.html#binary-i-o</a></span>
<span class="comment-copy">@killthrush great suggestion, this is also my leading assumption. How do I fix it?</span>
