<div class="post-text" itemprop="text">
<p>Can somebody suggest a better way to execute multiple commands within JSON using Python.</p>
<p>For example how to improve the following:</p>
<p>JSON:</p>
<p>$ python -m json.tool test2.json</p>
<pre><code>{
"command": "mkdir -p /home/ec2-user/data2/opt/ODS",
"command1": "mkdir -p /home/ec2-user/data4/opt/ODS",
"command2": "mkdir -p /home/ec2-user/data5/opt/ODS"
}
</code></pre>
<p>Python:</p>
<pre><code>$ cat parse.py
   import json
   import sys
   import subprocess
   from pprint import pprint

   jdata = open(sys.argv[1])

   data = json.load(jdata)

   print "start"
   print(data)
   subprocess.call(data['command'], shell=True)
   subprocess.call(data['command1'], shell=True)
   subprocess.call(data['command2'], shell=True)
   print "end"
   jdata.close()
</code></pre>
<p>Output:</p>
<p>]$ python parse.py test2.json
start
{u'command1': u'mkdir -p /home/ec2-user/data4/opt/ODS', u'command2': u'mkdir -p /home/ec2-user/data5/opt/ODS', u'command': u'mkdir -p /home/ec2-user/data2/opt/ODS'}
end</p>
<p>TIA</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the structure and code you are looking for:</p>
<pre><code>$ python -m json.tool test2.json
[
    "mkdir -p /home/ec2-user/data2/opt/ODS",
    "mkdir -p /home/ec2-user/data4/opt/ODS",
    "mkdir -p /home/ec2-user/data5/opt/ODS"
]
</code></pre>
<p>Python:</p>
<pre><code>$ cat parse.py 
import json
import sys
import subprocess
from pprint import pprint

jdata = open(sys.argv[1])

data = json.load(jdata)

print "start"
print(data)
for command in data:
  subprocess.call(command, shell=True)
print "end"
jdata.close()
</code></pre>
<p>Output:</p>
<pre><code>$ python parse.py test2.json
start
[u'mkdir -p /home/ec2-user/data2/opt/ODS', u'mkdir -p /home/ec2-user/data4/opt/ODS', u'mkdir -p /home/ec2-user/data5/opt/ODS']
end
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your example it would be better, to use <a href="https://docs.python.org/3/library/os.html#os.makedirs" rel="nofollow noreferrer">os.makedirs</a>.</p>
<p>But if you REALLY need <code>subprocess</code> module - i suggest you to exec command with single subprocess instance. For example:</p>
<pre><code>subprocess.call('; '.join(data.values()), shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar to @Mark's answer, but keeping your original structure:</p>
<pre><code>$ cat parse.py
import json
import sys
import 
from pprint import pprint

jdata = open(sys.argv[1])

data = json.load(jdata)

print "start"
print(data)
for command in data.values():                
  subprocess.call(command, shell=True)
print "end"
jdata.close()
</code></pre>
</div>
<span class="comment-copy">Hi daimne, try using a json structure that is an array ( or list ) , not a unordered hash.  Then you can just iterate through the list in order and not pay attention to the keys ( command, command1, command2 are superfluous )</span>
<span class="comment-copy">I would suggest not doing it at all. If you are going to let your Python script execute arbitrary shell commands, just replace <code>test2.json</code> with a shell script and have Python execute it directly.</span>
<span class="comment-copy">@Chepner:  You could also accomplish the same result with a short shell script an no python code at all.</span>
<span class="comment-copy">Yes, but I can picture a reason where the shell script is just a small part of what the Python script is doing. I see no reason to package individual lines of a shell script into a JSON file, only to be unpackaged again for execution.</span>
<span class="comment-copy">Why do you iterate over keys and values if you need just values ? Dictionaries have <code>.values()</code> method for that</span>
<span class="comment-copy">@YaroslavSurzhikov You're right. Edited.</span>
<span class="comment-copy">Is the order of value retrieval from the dictionary guaranteed?  I think that the commands may not be executed in the order they were intended in the code above.</span>
<span class="comment-copy">As long as the dict is not modified, yes. If there is still concern about order use <code>.iteritems()</code>. <a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="nofollow noreferrer">Docs here</a>.</span>
