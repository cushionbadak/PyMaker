<div class="post-text" itemprop="text">
<p>I have converted a python function to a cython one. Now the function works as it is supposed to. But I am getting a lot of memory leak when the main program calls this function multiple times. I have freed the memory that I allocated dynamically, but it does not seem to work.</p>
<p>What am I doing wrong here?</p>
<pre><code>from cpython.mem cimport PyMem_Malloc, PyMem_Free

def longest_common_substring(refWord, stemWord):
cdef:
    int longest, x_longest
    int x, y, k
    Py_ssize_t lengthRefWord
    Py_ssize_t lengthStemWord
    wchar_t *referenceWord = PyUnicode_AsWideCharString(refWord, &amp;lengthRefWord)
    wchar_t *stemmableWord = PyUnicode_AsWideCharString(stemWord, &amp;lengthStemWord)
    int t1 = lengthRefWord+1
    int t2 = lengthStemWord+1
    int **m = &lt;int **&gt; PyMem_Malloc(t1 * sizeof(int *))
    wchar_t tempChar1;
    wchar_t tempChar2;
longest = 0
x_longest = 0

for k in range(t1):
   m[k] = &lt;int *&gt; PyMem_Malloc(t2 * sizeof(int))
for x in range(0, t1):
    for y in range(0, t2):
        m[x][y] = 0

for x in range(1, t1):
    for y in range(1, t2):
       tempChar1 = referenceWord[x - 1]
       tempChar2 = stemmableWord[y - 1]

       if tempChar1 == tempChar2:
           m[x][y] = m[x - 1][y - 1] + 1
           if m[x][y] &gt; longest:
               longest = m[x][y]
               x_longest = x
       else:
           m[x][y] = 0
for k in range(t1):
   PyMem_Free(m[k])
PyMem_Free(m)
return refWord[x_longest - longest: x_longest]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>PyUnicode_AsWideCharString</code> allocates memory that you have to free. <a href="https://docs.python.org/3/c-api/unicode.html" rel="nofollow noreferrer">The documentation</a> says</p>
<blockquote>
<p>Returns a buffer allocated by <code>PyMem_Alloc()</code> (use <code>PyMem_Free()</code> to free it) on success.</p>
</blockquote>
<p>You get two strings from this function but free neither of them.</p>
</div>
<span class="comment-copy">Thanks a ton. I had forgot about that.</span>
