<div class="post-text" itemprop="text">
<p><code>Python3</code></p>
<pre><code>class testObj:

def __init__(self, val1, val2):
    self.val1 = val1
    self.val2 = val2

def __repr__(self):
    return self.val1) + "," + self.val2
</code></pre>
<p>My actual code has several class variables (12) and many calculations are performed on the data that exists in my list of already-created objects. I find myself needing to add another variable to the class, <code>val3</code>, which is not known at object instantiation.</p>
<p>Is there a way to add <code>val3</code> to the <code>testObj</code> class, but not pass a value for it when the object is instantiated, and assign <code>val3</code> a value later? What is the safest way to handle this?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Can I create an object if I don't have all instance variables values available at <strong>init</strong> time?</p>
</blockquote>
<p>Yes you can. How ? As Kyle and user2357112 say this is not an advisable design, but I guess, given the code you have shown that what you may want is doing</p>
<pre><code>class testObj:
    def __init__(self, val1, val2):
        self.val1 = val1
        self.val2 = val2
    def __repr__(self):
        return self.val1 + "," + self.val2 + "," + getattr(self, 'val3', '') #&lt;----------
</code></pre>
<p>Which may be, depending on what you really want to do, one of the <em>safest</em> way of calling <code>val3</code>.</p>
<pre><code>&gt;&gt;&gt; tobj = testObj('a','b')
&gt;&gt;&gt; print(tobj)
a,b,
&gt;&gt;&gt; tobj.val3 = 'c'
&gt;&gt;&gt; print(tobj)  
a,b,c
</code></pre>
<p><hr/>
Another strategy may be to create a property atribute which actually get element from cached values, as follows</p>
<pre><code>class testObj:
    def __init__(self, val1, val2):
        self.val1 = val1
        self.val2 = val2
        self._cache = {}  #&lt;----------
    def __repr__(self):
        return self.val1 + "," + self.val2 + "," + self.val3        
    @property
    def val3(self):
        return self._cache.get('val3', '')  #&lt;----------
</code></pre>
<p>Which would lead to use it  as follows</p>
<pre><code>&gt;&gt;&gt; tobj = testObj('a','b')
&gt;&gt;&gt; print(tobj)
a,b,
&gt;&gt;&gt; tobj._cache['val3'] = 'c'
&gt;&gt;&gt; print(tobj)  
a,b,c
</code></pre>
<p><hr/>
Another strategy mentioned by Paul is</p>
<pre><code>class testObj:
    def __init__(self, val1, val2):
        self.val1 = val1
        self.val2 = val2
        self._val3 = '' #&lt;----------
    def __repr__(self):
        return self.val1 + "," + self.val2 + "," + self.val3        
    @property
    def val3(self):
        return self._val3        
    @val3.setter                 #&lt;----------
    def val3(self, value):
        self._val3 = value
</code></pre>
<p>Use case</p>
<pre><code>&gt;&gt;&gt; tobj = testObj('a','b')
&gt;&gt;&gt; print(tobj)
a,b,
&gt;&gt;&gt; tobj.val3 = 'c'
&gt;&gt;&gt; print(tobj)
a,b,c
</code></pre>
<hr/>
<p>But all the proposed ways of doing what you say involve a default value, arbitrarily <code>''</code> here.</p>
</div>
<span class="comment-copy">Yes, you can just assign it later, but this may not be an advisable design.</span>
<span class="comment-copy">I'll update the question to what is the "safest way".... thanks.</span>
<span class="comment-copy">Yup, you can do that although not the best design.  Just make sure to remove the values from your initializer method parameters if you want to set them later.</span>
<span class="comment-copy">Do you have a reasonable default value for  <code>val3</code> that you could set in <code>__init__</code>? You could then use the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code></a> decorator and its <code>.setter</code> sub decorator (not sure if thats the right term).</span>
<span class="comment-copy">The last strategy, mentioned by @paul-rooney is probably best. I'll set the <code>val3</code> value to something noticeably odd, and use <code>@property</code> and <code>.setter</code>. Thanks to both of you for the feedback.</span>
