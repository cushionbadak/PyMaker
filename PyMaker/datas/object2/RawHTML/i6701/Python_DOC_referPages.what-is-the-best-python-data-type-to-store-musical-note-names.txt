<div class="post-text" itemprop="text">
<p>What is the best python data type to store note names?</p>
<p>I want it to be iterable but some notes have alternative names. For example, C# (C sharp) is the same note as Db (D flat). If I use a list or a tuple then entering the alternative names will 'break' the iteration process and I won't be able to find a note, say 3 semitones above it by simply looking up the position 3 steps up from the initial note. (I have already worked out %12 to make it behave in a 'circular' way)</p>
<p>Ideally I would like the two alternative note names to occupy the same position in a 'list' (or whatever date type is best) and to be able to specify which name I want returned by the way I call it. Something like notes.flats for example.</p>
<p>Is there actually a data type that supports something like this or am I looking completely the wrong way? My next thought would be to make a class.</p>
</div>
<div class="post-text" itemprop="text">
<p>Separate your internal representation--what your code works with--from the external one--what the user sees. Note names are great for people, not so much for a program.</p>
<p><strong>Internal representation:</strong> There are twelve notes in an octave, so store notes as numbers 0 through 11.</p>
<p>Now you need functions to convert between internal and external representations. One to convert note names into note numbers, and another to do the reverse.</p>
<pre><code>def parse_note_name(note_name):
    ...
    return note_number

def to_note_name(note_number, symbol='#'):
    ...
    return note_name
</code></pre>
<p>Those could be the signatures for the two methods. The first parses a note name like C♯ or D♭ and returns a number between 0 and 11. The second converts a number 0-11 into a note name. Since there are multiple enharmonic names for notes, you could have a parameter like <code>symbol</code> to control whether sharps or flats are returned.</p>
<p>You could implement the name parsing by listing out all the 21 flavors of note names (seven natural, seven sharp, seven flat). A cleverer implementation would handle the letter first, then the symbol: convert the letter to a note number, then if there's a ♯ add 1; if there's a ♭ subtract 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>What about a list of lists:</p>
<pre><code>notes = [['F','F#','G','G#','A','A#','B','C','C#','D','D#','E'],['F','F#','G','G#','A','A#','B','C','C#','D','D#','E']]

print(notes[0][1], notes[1][1])
</code></pre>
<p>Will both return F#</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.tutorialspoint.com/python/python_dictionary.htm" rel="nofollow noreferrer">Dictionary</a> sounds suitable for you.</p>
<p>You can associate each element of a dictionary with a key that allows you to access it.</p>
<p>It looks like this:</p>
<pre><code>{ "C#":"Db", ... }
</code></pre>
<p>And you can iterate over the dictionary like this:</p>
<pre><code>for key in dictionary:
    print key                # will access the element to the left of :
    print dictionary[key]    # will access the element to the right of :
</code></pre>
<p>Hope that helps!</p>
</div>
<span class="comment-copy">A dict with identical notes in a list would be best, I'd reckon.</span>
<span class="comment-copy">@jan perhaps even an ordered dict because it sounds like order of the keys might matter here</span>
<span class="comment-copy">Yes, the order is rather important for this</span>
<span class="comment-copy">If I got it right, this is collections.OrederedDict right? Looking into it.</span>
<span class="comment-copy">You <i>might</i> find an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code>eration</a> useful - they support aliases for members.</span>
<span class="comment-copy">Eye-opening. This is perfect for what I'm doing!</span>
<span class="comment-copy">I like the simplicity in this. I suppose the second list was meant to have the flats in it.</span>
<span class="comment-copy">Yes, the second list can have the alternative names. Or the same names down in the scale if you want to represent a piano.</span>
