<div class="post-text" itemprop="text">
<p>So I have made some code that follows. It is suppose to let a server and a client communicate... but it doesn't work.</p>
<p>Can someone explain why, or better yet fix my code???</p>
<p>Server.</p>
<pre><code>import time
import socket
from threading import Thread

global sS
sS = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sS.bind(('', 2347))
sSconAddresses = []
sSconData = []
print(" Server : Running ... ")
sS.listen(10)

while True:
    try:
        cOn, aDr = sS.accept()
        sSconAddresses.insert(0, str(aDr))
        sSconData.insert(0, str(cOn))
        time.sleep(0.3)
    except:
        time.sleep(0.1)
        pass
def ConHandler():
    for _ in sSconData:
        PacketData = _.recv(700)
        if not PacketData:
            _.close()
        else:
            stringData = PacketData.decode('utf-8')
            print(stringData)
            sS.sendto(PacketData, _)
ConHandlerThread = Thread(target=ConHandler)
ConHandlerThread.daemon = True
ConHandlerThread.start()
</code></pre>
<p>Client.</p>
<pre><code>import threading, time
import socket, sys
import os

global cS
cS = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
cS.connect(('PRIVATE', 2347))
Server = ('PRIVATE', 2347)


while True:
    PacketData = input(" Client&gt; ")
    ByteData = PacketData.encode('utf-8')
    cS.sendto(ByteData, Server)
</code></pre>
<p>It doesn't return any errors so I am confused why it doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, in your server-side code, you're having a while True before starting your thread, so it can't work.</p>
<p>Then, if you succeed starting your thread by moving the code, its <code>for</code> will see an empty list, so it will not loop, and just exit right here.</p>
<p>Starting from your code, here's something that works:</p>
<p>The client:</p>
<pre><code>import socket


def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('127.0.0.1', 2345))
    while True:
        packetdata = input(" Client&gt; ")
        bytedata = packetdata.encode()
        client_socket.send(bytedata)
        print(client_socket.recv(700).decode())


if __name__ == '__main__':
    main()
</code></pre>
<p>The server:</p>
<pre><code>import socket
from threading import Thread
from queue import Queue


def client_handler(client_socket):
    while True:
        data = client_socket.recv(700)
        print(data)
        client_socket.send("Server {}".format(data.decode()).encode())


def conn_handler(conn_queue):
    while True:
        conn, address = conn_queue.get()
        print("Handler getting a connection from {}".format(address))
        client_thread = Thread(target=client_handler, args=(conn,))
        client_thread.daemon = True
        client_thread.start()


def main():
    print("Server: Running ...")
    conn_queue = Queue()
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('', 2345))
    server_socket.listen(10)


    con_handler_thread = Thread(target=conn_handler, args=(conn_queue,))
    con_handler_thread.daemon = True
    con_handler_thread.start()

    while True:
        conn_queue.put(server_socket.accept())


if __name__ == '__main__':
    main()
</code></pre>
<p>Note that this is suboptimal, starting one thread per client is <em>not</em> the way to go. The best way to handle this kind of situation is to keep everything in a single thread and use a <a href="https://linux.die.net/man/2/select" rel="nofollow noreferrer">select</a>-like function to know what to do. However select is a bit limited too (like 1024 connections max, hardcoded in the libc), so the way to go is to use epoll / kqueue / whatever better than poll / select, and there's a module for this: <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer">https://docs.python.org/3/library/select.html</a></p>
<p>Yet using the select module is still the old, manual, cubersome way to express your needs, you should take a look at the <a href="https://docs.python.org/3/library/asyncio-stream.html#stream-examples" rel="nofollow noreferrer">coroutine based API of asyncio</a> which enable a clear way to express the intention.</p>
<p>The asyncio equivalent may look like:</p>
<pre><code>import asyncio


async def client():
    reader, writer = await asyncio.open_connection('127.0.0.1', 8888)

    while True:
        message = input("Client&gt; ")
        writer.write(message.encode())
        data = await reader.read(100)
        print('Received: {}'.format(data.decode()))

loop = asyncio.get_event_loop()
loop.run_until_complete(client())
</code></pre>
<p>And, server side:</p>
<pre><code>import asyncio


async def handle_client(reader, writer):
    while True:
        data = await reader.read(100)
        if not data:
            return
        message = data.decode()
        addr = writer.get_extra_info('peername')
        print("Received %r from %r" % (message, addr))

        print("Send: %r" % message)
        writer.write(data)
        await writer.drain()


loop = asyncio.get_event_loop()
coro = asyncio.start_server(handle_client, '127.0.0.1', 8888)
server = loop.run_until_complete(coro)
print('Serving on {}'.format(server.sockets[0].getsockname()))
loop.run_forever()
</code></pre>
</div>
<span class="comment-copy">Thanks for the explanation.</span>
