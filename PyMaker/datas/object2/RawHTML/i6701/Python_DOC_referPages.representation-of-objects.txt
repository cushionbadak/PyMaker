<div class="post-text" itemprop="text">
<p>Sometimes we have to represent our objects of classes with it's attributes. Mostly we use</p>
<pre><code>def __str__
</code></pre>
<p>for string representation which generally return characters.
But I have a class with no attribute that has characters. I wanted to represent that with the only attribute which is a DecimalField. Please help me to get the right syntax to represent my objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__str__</code> should always return a string. What you could do is following:</p>
<pre><code>def __str__(self):
    return 'Average: {}'.format(self.average)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the value of the <code>DecimalField</code> to <code>string</code>:</p>
<pre><code>def __str__(self):
    return str(self.average)
</code></pre>
<p>or alternatively, if you have more complex values, you could use the method <code>to_eng_string</code>:</p>
<pre><code>def __str__(self):
    return self.average.to_eng_string
</code></pre>
<p>The <a href="https://docs.python.org/3/library/decimal.html#module-decimal" rel="nofollow noreferrer">documentation</a> says:</p>
<blockquote>
<p>Convert to a string, using engineering notation if an exponent is
  needed.</p>
<p>Engineering notation has an exponent which is a multiple of 3. This
  can leave up to 3 digits to the left of the decimal place and may
  require the addition of either one or two trailing zeros.</p>
<p>For example, this converts Decimal('123E+1') to Decimal('1.23E+3').</p>
</blockquote>
</div>
<span class="comment-copy">You would still use <code>__str__</code>, convert decimal to string and return that with some additional identifier i,e what's that decimal field is for: <code>return 'My Value: {}'.format(self.my_decimal_field)</code></span>
<span class="comment-copy">The attribute I wanted to represent is:     average = models.DecimalField(max_digits=4, decimal_places=2) Please can you show me how to write syntax for this.</span>
