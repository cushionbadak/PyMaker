<div class="post-text" itemprop="text">
<p>I have two processes that exist independently.  Now I'd like to pass a message from one to the other on a "best-effort" basis - if the process receiving the message isn't there, it doesn't matter, but if it is, then it should receive the message.  The message is a python dictionary.</p>
<p>It looks to me like the multiprocessing module should do what I want, but all the examples I can find either:</p>
<ul>
<li>Involve <em>three</em> processes - one for the `multiprocessing.managers.BaseManager' derivative object and two clients.</li>
<li>Involve one of the processes launching the other one.</li>
</ul>
<p>I could adopt the three-process approach, but it seems silly when I know there will only be two other processes and I just want to pass objects from one to the other.  I don't particularly feel like completely re-architecting the whole system so that one process launches the other.</p>
<p>I could also just use sockets, but then that would involve serialising the dictionary in some way and dealing with the case where the serialised dictionary is too big to be buffered in one go and so on.  I could start an HTTP server and accept a json-serialised dictionary, but this is getting silly.</p>
<p>Surely I'm missing something here.  Isn't there some easy way to add a server bit to one process, so it accepts a dictionary as a message, and a client bit to another process, so it can send a dictionary to the server?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can take a look at the multiprocessing <a href="https://docs.python.org/3.6/library/multiprocessing.html#module-multiprocessing.connection" rel="nofollow noreferrer">Listeners and Clients</a> classes. The <code>AF_UNIX</code> or <code>AF_PIPE</code> families are implemented using named pipes which are a bit more lightweight than sockets.</p>
<p>The <a href="https://docs.python.org/3.6/library/multiprocessing.html#multiprocessing.Connection" rel="nofollow noreferrer">Connection</a> objects they return will serialize the dictionary for you via the <code>send</code> and <code>recv</code> methods so you don't need to worry about it.</p>
<p>You just need to make sure the dictionary content can be <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">pickled</a>.</p>
</div>
<span class="comment-copy">The processes are on the same host.</span>
<span class="comment-copy">Any conceivable method of transferring your dictionary from one process to another will "involve serialising".</span>
<span class="comment-copy">@jasonharper: Of course it will.  Thanks for stating the utterly blindingly obvious.  What I want to avoid is re-inventing the wheel so that <i>I</i> have to choose some way of serialising it.</span>
<span class="comment-copy">Thanks!  Exactly what I was looking for.</span>
