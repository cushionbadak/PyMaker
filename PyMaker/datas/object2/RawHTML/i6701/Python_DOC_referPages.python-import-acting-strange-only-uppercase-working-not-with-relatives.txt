<div class="post-text" itemprop="text">
<p>I'm using PyCharm and Python 3 and I have the next python folder layout:</p>
<pre><code>src/
    __init__.py
    command/
        __init__.py
        simpleremote/
            __init__.py
            Command.py
            GarageDoor.py
            GarageDoorOpenCommand.py
            Light.py
            LightOffCommand.py
            LightOnCommand.py
            RemoteControlTest.py
            SimpleRemoteControl.py
</code></pre>
<p>I created packages, as you can see. The file with the main method is RemoteControlTest.py which worked perfectly with these imports:</p>
<pre><code>from pythonDesignPatterns.src.command.simpleremote.GarageDoor import GarageDoor
from pythonDesignPatterns.src.command.simpleremote.GarageDoorOpenCommand import GarageDoorOpenCommand
from pythonDesignPatterns.src.command.simpleremote.Light import Light
from pythonDesignPatterns.src.command.simpleremote.command import LightOnCommand
from pythonDesignPatterns.src.command.simpleremote.SimpleRemoteControl import SimpleRemoteControl
</code></pre>
<p>Previous to create the <strong>init</strong>.py files for the packages, I tried to use relative imports instead of the former ones, for example </p>
<pre><code>from .command import LightOnCommand
</code></pre>
<p>but it gave me an error (going to call this <strong>Case A</strong>):</p>
<pre><code>SystemError: Parent module '' not loaded, cannot perform relative import. 
</code></pre>
<p>so fiddling around I found out that this worked for the same line:</p>
<pre><code>from command.simpleremote.Command import LightOnCommand
</code></pre>
<p>and the program was executed succesfully again, but if I use the "Refactor" option from the IDE (PyCharm) and rename "Command" to "command" , writing this line:</p>
<pre><code>from command.simpleremote.command import LightOnCommand
</code></pre>
<p>it suddenly shows the error (<strong>Case B</strong>):</p>
<pre><code>ImportError: No module named 'command.simpleremote'; 'command' is not a package
</code></pre>
<p>Which is the problem in each case (A and B)? I can't understand why it would work in between each cases when importing from command.simpleremote. Why not one level further or closer? Why is it working with capital 'C' and not 'c'? Is this case-sensitive?</p>
<p>I've looked at official Python docs, (and webs for PEP302, PEP328 and PEP420) but it's too complex for me in a single night. Can anyone make understand this in a simpler way (or tell me a resource I can read about this explained simpler)?</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess that you run <code>RemoteControlTest.py</code> directly.</p>
<p><strong>Case A</strong></p>
<p>Python's importer can't go to parent if the module was run directly as script instead of acquiring it going through the package structure.</p>
<p>The Python designers presumably didn't want to let submodules be called directly as scripts so there are no really good solutions for that. Mainly you can</p>
<ol>
<li>run the script with <code>python -m command.simpleremote.RemoteControlTest</code> when <code>src</code> is either current directory or in <code>PYTHONPATH</code> or</li>
<li>use a testing framework which does the calling for you.</li>
</ol>
<p>A more detailed discussion of possible solutions can be found at <a href="https://stackoverflow.com/questions/16981921/relative-imports-in-python-3">Relative imports in Python 3</a>.</p>
<p><strong>Case B</strong></p>
<p>A consequence of the direct start is that "<code>src/command/simpleremote</code>" is in the <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">module search path</a>. "<code>src</code>" seems also to be added to the path but after "<code>src/command/simpleremote</code>".</p>
<p>Before case B on <code>from command...</code> the import mechanism didn't find matching "<code>command</code>" in "<code>src/command/simpleremote</code>" and continued looking in "<code>src</code>" where the <code>command</code> package was found -&gt; success.</p>
<p>In case B it finds<code>command.py</code> in "<code>src/command/simpleremote</code>" which isn't a package -&gt; error.</p>
</div>
<span class="comment-copy">About A: for relative imports and going through the package structure is not enough putting the <b>init</b>.py files in each folder? About B: I'm reading about the module search path link to test this point. PyCharm does a sys.path.exy¡tend which I think may be related.</span>
<span class="comment-copy">@madtyn About A: No, for a directly started script e.g. the <code>__package__</code> attribute is empty. If module was loaded through the packages, <code>__package__</code> contains the package name.</span>
<span class="comment-copy">I've been reading these days. Python docs and PEP366, which reccomends a two-line work around. I've tried with several values in <code>__package__</code> but always shows <code>Parent module 'package.value' not loaded, cannot perform relative import </code></span>
<span class="comment-copy">@madtyn I also read about it, especially <a href="https://stackoverflow.com/questions/16981921/relative-imports-in-python-3" title="relative imports in python 3">stackoverflow.com/questions/16981921/…</a> .  Unfortunately it seems that it is just not desired by Python's designers to call submodules as scripts. The only thing I found is (1) to run the script with <code>python -m command.simpleremote.RemoteControlTest</code> when <code>src</code> is either current directory or in <code>PYTHONPATH</code> or (2) to use a testing framework which does the calling for you.</span>
<span class="comment-copy">I'm afraid you're right. I'm coping with this as I find more comfortable. You may answer publicly for anyone who may read here and I will accept the answer and only change the accepted answer if I find something better in the future. Thanks.</span>
