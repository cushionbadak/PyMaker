<div class="post-text" itemprop="text">
<p>I have created a quadratic equation in Python with the aim of finding the roots of the input. I am hoping for very specific output but don't know how to convert/round floats with the way I've written my code or how to get the code to return 1e-9 for example. Any thoughts are much appreciated.</p>
<pre><code>     def find_roots(a,b,c):
        d=(b**2)-(4*a*c)
        if d &lt;0:
            print ([])
        elif d==0:
            x=(np.float128(-b+math.sqrt(d))/(2*a))
            print(x)
        else:
            x1=(np.float128(-b-math.sqrt(d))/(2*a))
            x2=(np.float128(-b+math.sqrt(d))/(2*a))
            list=[x1,x2]
            print (sorted(list, reverse=False))

     find_roots(-3,5,2)
     find_roots(0,5,4)
     find_roots(1e-8,10,1e-8)
</code></pre>
<p>I am currently getting:</p>
<pre><code>    [-0.33333333333333334, 2.0]
    [-inf, nan]
    [-999999999.99999999791, 0.0]
</code></pre>
<p>as output and would like to get:</p>
<pre><code>    [-1.0/3.0, 2.0]
    [-0.8]
    [1e-8, 10.0, 1e-8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your desired output requires three different formatting styles of your resulting numbers: fractional, decimal, and scientific (or exponential). You could pass another parameter to your function that either tells your function how to format the numbers or performs the formatting itself (the parameter in this case would be a function).</p>
<p>For example:</p>
<pre><code>def decimal_to_scientific(x):
    return &lt;the formatted x (you can find this online)&gt;

def find_roots(a, b, c, format):
    ...
    elif d == 0:
        ...
        x = format(x)
        print x
    ...

find_roots(1e-8, 10, 1e-8, decimal_to_scientific)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> find_roots(0, 5, 4)
</code></pre>
<p>That doesn't quite describe a quadratic equation. That's a linear <code>y = 5*x + 4</code> equation. It's hardly fair to call a routine that wants to divide by <code>2*a</code> when you pass in <code>a == 0</code>. Raising an exception would be correct. Perhaps numpy's permissive behavior isn't doing you any favors here.</p>
<p>Consider expressing numbers as <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">rationals</a> if that is really what you want.</p>
</div>
<span class="comment-copy">You probably want the <code>Decimal</code> module over <code>numpy</code> for more accurate floats. As to fractions like <code>-1.0/3.0</code>, that's not gonna happen unless you come up with your own float to fraction code, and output it as a string.</span>
<span class="comment-copy">And when <code>a = 0</code>, you have a zero division.</span>
<span class="comment-copy">Is there a way I could change my method of solving the quadratic equation where I avoid having a zero numerator with the input (0,5,4)? i.e. change x, x1, and x2?</span>
<span class="comment-copy">Is there a way I could change my method of solving the quadratic equation where I avoid having a zero numerator with the input (0,5,4)? i.e. change x, x1, and x2?</span>
<span class="comment-copy">Like JH pointed out, you would just add a check on these parameters in your method and preferably raise an exception of your choosing. Or I guess if you really wanted you could change any of the parameters, but that is not in the scope of what the function is supposed to do; the function finds the roots of the input parameters so why return roots of values other than the original parameters?</span>
<span class="comment-copy">Is there a way I could change my method of solving the quadratic equation where I avoid having a zero numerator with the input (0,5,4)? i.e. change x, x1, and x2?</span>
<span class="comment-copy">(background: consider y = mx + b)  When you call <code>sqrt(n)</code>, there is an expectation that <code>n</code> is non-negative (or that caller is prepared for imaginary roots). When asking for roots of a degree 2 polynomial, there is an expectation that the polynomial has that degree. If not, computing a single root of <code>-b / m</code> is much simpler, assuming non-zero <code>m</code>. You're just not enforcing the degree check, so to complain about a result of <code>-inf</code> doesn't seem reasonable.</span>
