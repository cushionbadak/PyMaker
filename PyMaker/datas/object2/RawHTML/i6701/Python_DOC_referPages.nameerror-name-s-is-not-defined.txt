<div class="post-text" itemprop="text">
<p>I am new to Python. I am trying to create a class which only allows to objects to be created. I am using a private variable instance to keep track of count .
My Code -</p>
<pre><code>class s:
    __instance=2

    if s.__instance&lt;2:
        def __init__(self,x):
            s._instance = x
            s._instance = s._instance+1
            print(s._instance)

a=s(5)
</code></pre>
<p>When i run the code i got -</p>
<pre><code>"C:\Users\PIYU\AppData\Local\Programs\Python\Python36\python.exe" 
"C:/Users/PIYU/PycharmProjects/PythonProgram/singleton.py"
  Traceback (most recent call last):
    File "C:/Users/PIYU/PycharmProjects/PythonProgram/singleton.py", line 1, in &lt;module&gt;
    class s:
    File "C:/Users/PIYU/PycharmProjects/PythonProgram/singleton.py", line 4, in s
    if s.__instance&lt;2:
    NameError: name 's' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error is because you are trying to reference <code>s</code> in it's own definition, before it is actually defined. I would try using that condition in <code>__init__</code> instead of before it.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>class</code> is an executable statement that creates a new <code>class</code> class object and bind it to the class name in the enclosing scope. Until the whole statement has been executed (IOW until the end of the <code>class</code> statement block), the class object doesn't exist and the name is not defined. </p>
<p>To make things clearer, this:</p>
<pre><code>class Foo(object):
    bar = 42
    def foo(self):
        print "foo"
</code></pre>
<p>is actually only syntactic sugar for</p>
<pre><code>def foo(self):
    print "foo"

Foo = type("Foo", (object,), {"foo": foo, "bar": 42})
del foo  # remove the name from current scope
</code></pre>
</div>
<span class="comment-copy">It's a duplicate of quite a few other questions here but I can't find one right now - if someone does please vote to close the question.</span>
<span class="comment-copy">Relevant <a href="https://docs.python.org/3/tutorial/classes.html#class-definition-syntax" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">@bruno desthuilliers With all respect I gone through all the similar questions sir. When i was unable to find an answer i asked</span>
<span class="comment-copy">@AlexanderReynolds assigning to <code>self.__instance</code> in the <code>__init__</code> will create an instance attribute, it will not assign to the class attribute.</span>
<span class="comment-copy">@shantanunandan  I'm not blaming you - the fact that I have a hard time finding a relevant duplicate (while I know tens of questions relating to the very same problem have already been posted) speaks for itself actually.</span>
<span class="comment-copy">@AlexanderReynolds for what the OP is trying to do, using a class attribute makes sense.</span>
<span class="comment-copy">I believe it is still possible to reference the class inside itself, you just have to be careful with the ordering of your statements inside the block. <a href="http://code.activestate.com/recipes/52558-the-singleton-pattern-implemented-with-python/" rel="nofollow noreferrer">E.g.</a></span>
<span class="comment-copy">@AlexanderReynolds you can reference the class from within methods. You <b>can not</b> reference it within the <code>class</code> statement block, period.</span>
<span class="comment-copy">Ah I see, the <code>class</code> block scope does not extend to methods.</span>
