<div class="post-text" itemprop="text">
<p>In the chapter on <em>Arrays</em> in the book <strong>Elements of Programming Interviews in Python</strong>, it is mentioned that <strong>Filling an array from the front is slow, so see if itâ€™s possible to write values from the back.</strong> </p>
<p>What could be the possible reason for that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python lists, at least in CPython, the standard Python implementation, <a href="https://docs.python.org/3/faq/design.html#how-are-lists-implemented" rel="nofollow noreferrer">are actually implemented from a data structure perspective as arrays, not lists</a>. </p>
<p>However, these are dynamically allocated and resized, so appending to the end of a Python-list is actually possible.  It takes a somewhat variable amount of time to do so: CPython tries to allocate additional space when items are being appended beyond what is actually necessary, such that it doesn't need to allocate more space for every append operation.  At best, appending, if space has already been allocated, is O(1), and since it is an array, indexing is also O(1).</p>
<p>What <em>will</em> take a long time, however, is adding something to the beginning of a list, as this would require shifting all the array values, and <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">is O(n), just as popping the first element is</a>.</p>
<p>Python language designers have decided to call these arrays lists instead of arrays, contradicting standard terminology, in part, I assume, because the dynamic resizing makes them different from standard, fixed-size lists.</p>
<p>Unless I'm mistaken, <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">collections.deque</a> implements a doubly-linked list, with the corresponding O(1) appends/pops on either side, and so on. </p>
</div>
<span class="comment-copy">I don't know much about this, but I'd hazard a guess saying that because arrays are stored in sequential order, adding a new element to the front means pushing all existing elements back by one. Just a guess though, as I'm not too familiar with Python.</span>
<span class="comment-copy">Because filling array from front means the existing objects need to be pushed to the back first before adding the item at index 0?</span>
<span class="comment-copy">Thanks. That could be the possible reason. Inserting from front would require shifting rest of elements.</span>
<span class="comment-copy">If this book is using the word "array", it's probably not a good Python book.</span>
<span class="comment-copy">You can use <code>collections.deque</code> to avoid this, but note that (due to poor decisions in the implementation), you lose fast random-access indexing.</span>
