<div class="post-text" itemprop="text">
<p>I am working through a problem that requires me to compare elements in a dictionary containing words as keys and lists of words as values. See example below. </p>
<pre><code>test_dict={'cubed': ['zryba', 'aszcb', 'btadc', 'melon', 'ewdgf'],
    'melon': ['jbilk', 'kcjml', 'cubed', 'nfmpo', 'ognqp'],
    'poop': ['mllm', 'nmmn', 'onno', 'qppq', 'rqqr']}
</code></pre>
<p>I would like to return a new dictionary which contains keys that match the values of other keys in the dictionary. My code below is incorrect, I think because it is only considering each key-value pair independently and comparing items within those pairs only. Is there a way to iterate across keys to get the desired result? My desired result is shown below.  </p>
<pre><code>def find_matches(dict1):
    match_dict={}
    for key, value in dict1.items():
        for word in value:
            if key == word:
                #rotate_dict[key]=word
                match_dict[key].append(word)
    return match_dict

find_matches(SO_example) #returns {}, but should return {'cubed':'melon','melon':'cubed'}
</code></pre>
<p>Thank you for your help. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try with:</p>
<pre><code>test_dict = {'bat': [['gum', 'glove', 'knee']],
 'crowd': [['big', 'nice', 'large']],
 'glove': [['mitt', 'ball', 'bat']]}

def find_matches(dict1):
    match_dict = {}
    base_keys = dict1.keys()
    for key, values in dict1.items():
        for words in values:
            for base_key in base_keys:
                if base_key in words:
                    match_dict.update({key: base_key})
    return match_dict

print(find_matches(test_dict)) #{'bat': 'glove', 'glove': 'bat'}
</code></pre>
<p>Multiple <code>for</code> is because you have a <code>[['mitt', 'ball', 'bat']]</code> bidimensional list.</p>
<p>Maybe is more clear using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a></p>
<h1>EDIT</h1>
<p>You post the antoher example dict without bidemensional values in dict, the sol is simple, delete a <code>for</code> like:</p>
<pre><code>test_dict={'cubed': ['zryba', 'aszcb', 'btadc', 'melon', 'ewdgf'],
    'melon': ['jbilk', 'kcjml', 'cubed', 'nfmpo', 'ognqp'],
    'poop': ['mllm', 'nmmn', 'onno', 'qppq', 'rqqr']}

def find_matches(dict1):
    match_dict = {}
    base_keys = dict1.keys()
    for key, values in dict1.items():
        for base_key in base_keys:
            if base_key in values:
                match_dict.update({key: base_key})
    return match_dict

print(find_matches(test_dict)) #{'cubed': 'melon', 'melon': 'cubed'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following works for me:</p>
<pre><code>test_dict={'cubed': ['melon', '2', '3', '4', '5'],
           'melon': ['2', 'poop', '4', '5', '6'],
           'poop': ['3', '4', '5', '6', 'cubed']}

d = defaultdict(str)
# iterate over keys and values
for key, values in test_dict.items():
    # iterate over values
    for val in values:
        # if val is a key
        if val in [x for x in test_dict.keys() if x != key]:
            # set dict[key] = val
            d[key] = val
print(d) 

defaultdict(&lt;class 'str'&gt;, {'melon': 'poop', 'poop': 'cubed', 'cubed': 'melon'})
</code></pre>
<p>Essentially, you check all the values against the list of keys, excluding the current key. If you want the returned dict to contain more than one value, use lists or sets:</p>
<pre><code>defaultdict(list) or defaultdict(set)
</code></pre>
<p>and append the values</p>
<pre><code>d[key].append(val) or d[key].add(val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your problem statement is correct, then your trouble lies in the fact that your <code>test_dict</code> is a dictionary mapping strings to <strong>lists of lists</strong> instead of mapping them to a list of words.</p>
<p>Your <code>find_matches</code> function iterates over the dictionary, placing the string key into <code>key</code> and the list-of-lists-of-words into <code>value</code>. </p>
<p>You then try to iterate over <code>value</code>. But of course if <code>value</code> is set to </p>
<pre><code>[['gum', 'glove', 'knee']]
</code></pre>
<p>then when you do </p>
<pre><code>    for word in value:
</code></pre>
<p>the variable <code>word</code> will take on the value <code>['gum', 'glove', 'knee']</code> and then the loop will end, because <code>value</code> only contains one element - a sublist of three words.</p>
<p>You can confirm this by printing <code>key</code> and then printing each <code>word</code> in your loop - I expect you will only see one line, with a list of words.</p>
<p>To fix this, ideally you would change the format of your dictionary. Why store a list of 1 list of words? Why not just store a list-of-words directly?</p>
<p>If that is impossible for some reason, then you will need to decide how to proceed: if there are more than one list-of-words, do you want to scan them all, or only the first such list?</p>
<pre><code># Scan the first list:
for word in value[0]:
    ...

# Scan all the lists:
for sublist in value:
    for word in sublist:
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can actually solve this problem with a dict comprehension. You just need to iterate over the names and lists in <code>test_dict</code> until you find a name which is both in the dict and a list:</p>
<pre><code>&gt;&gt;&gt; {n1:n2 for n1 in test_dict for n2 in test_dict[n1] if n2 in test_dict}
{'cubed': 'melon', 'melon': 'cubed'}
</code></pre>
</div>
<span class="comment-copy">Umm... well <code>{k:v for k, values in test_dict.items() for v in values[0] if v in test_dict}</code> should do it - but do you really have a one-element list containing a list?</span>
<span class="comment-copy">No, my test example was wrong - apologies. Please see edit above.</span>
<span class="comment-copy">I'm now confused what you want... You're using <code>.append</code> but don't have a list, but your output example cites a normal <code>dict</code>... what would the output be for the above?</span>
<span class="comment-copy">Thank you! Per my question I'm clearly a beginner, so didn't think of the nice update method you used. Appreciate your help and the edit after I fixed the example.</span>
<span class="comment-copy">I think my test example is incorrect. The output of my real result is now above.</span>
