<div class="post-text" itemprop="text">
<p>Let's say string has <code>pattern</code> like this <code>(\d+)(X|Y|Z)(!|#)?</code><br/>
<code>digits</code> appear =&gt; one of <code>X or Y or Z</code> appear =&gt; <code>! or #</code> not always appear.</p>
<p>I want to parse string and want to return list.</p>
<p>ex1) str = 238Z!32Z#11234X<br/>
I want to return [238Z!, 32Z#, 11234X]</p>
<p>ex2) str = 91X92Y93Z<br/>
I want to return [91X, 92Y, 93Z]</p>
<p>below is my code.</p>
<pre><code># your code goes here
import re

p=re.compile('^(\d+)(X|Y|Z)(!|#)?$')
L=p.findall("238Z!32Z!11234X")
print(L)
</code></pre>
<p>but I got empty list <code>[]</code>.<br/>
what's wrong with me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dont use the <code>^</code> and <code>$</code> in regex. <code>^</code> matches start of line, <code>$</code> matches end of line. That means your regex will only match string that begins and ends a line.</p>
<pre><code>import re

p=re.compile('(\d+)(X|Y|Z)(!|#)?')
L=p.findall("238Z!32Z!11234X")
print(L)
</code></pre>
<p>Output:</p>
<pre><code>[('238', 'Z', '!'), ('32', 'Z', '!'), ('11234', 'X', '')]
</code></pre>
<p>If you wish to not get a tuples, but instead whole strings that were matched, don't use capturing groups:</p>
<pre><code>p=re.compile('(?:\d+)(?:X|Y|Z)(?:!|#)?')
</code></pre>
<p>Output:</p>
<pre><code>['238Z!', '32Z!', '11234X']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should not use <code>^</code> or <code>$</code> anchors as they will require your string to match completely with one pattern.</p>
<p>Also don't use capture groups if you want to get the desired result:</p>
<pre><code>p=re.compile('\d+[XYZ][!#]?')
</code></pre>
<blockquote>
<p>['238Z!', '32Z!', '11234X']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>First, <code>^</code> and <code>$</code> are <a href="https://docs.python.org/3/howto/regex.html#more-metacharacters" rel="nofollow noreferrer">metacharacters</a> used to match the start and end of your string (not the pattern). So you have to remove them so that your regex can find all the corresponding patterns.</p>
<p>Second, the <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>findall</code></a> function will return a list of groups if your pattern contains at least one. Groups are defined by the parentheses in your pattern. You should use a <a href="https://docs.python.org/3/howto/regex.html#non-capturing-and-named-groups" rel="nofollow noreferrer">non-capturing group</a> <code>(?:...)</code>.</p>
<pre><code>import re

p = re.compile('(?:\d+)(?:X|Y|Z)(?:!|#)?')
L = p.findall("238Z!32Z!11234X")
print(L)
# ['238Z!', '32Z!', '11234X']
</code></pre>
<p>Another advice when writing a regex. If you want to match a list of characters, you do not need <code>(a|b|c)</code>, you can use <code>[abc]</code> which has the same meaning.</p>
<p>Moreover, you do not need to use parentheses if you want to quantify a single element. <code>(\d+)</code> is equivalent to <code>\d+</code>, and you will not have any group problem anymore.</p>
<p>Your regex would then become:</p>
<pre><code>\d+[XYZ][!#]?
</code></pre>
</div>
<span class="comment-copy">You should remove the <code>^</code> and <code>$</code> anchors from your regex as they will only make a match possible when the whole string matches once.</span>
<span class="comment-copy">Thank you for your quick comment.</span>
<span class="comment-copy">Not only shoupd you remove anchors if you want it work, but also you need to use non-capturing alternation group. Use <code>re.findall(r'\d+(?:X|Y|Z)[!#]?', s)</code> and if the XYZ are actual values also use a character class. <code>re.findall(r'\d+[XYZ][!#]?', s)</code>.</span>
