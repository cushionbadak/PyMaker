<div class="post-text" itemprop="text">
<p>I have a function that writes the content of list into a text file. For every element in the list, it writes the element into the text file, each having it's own new line.</p>
<pre><code>def write_file(filename):
    name_file = filename
    filename = open(name_file, 'w')

    for line in list:
        if line == len(list)-1:
            filename.write(line)
        else:
            filename.write(line+'\n')
    filename.close()
</code></pre>
<p>i tend to notice a mistake where an empty newline is generated at the final line of a text file and I'm wondering if I am writing the file correctly?</p>
<p>Let's say my list contains [1,2,3,4] and writing it to the text file would give me</p>
<pre><code>1
2
3
4
#in some cases, an empty newline is printed here at the end
</code></pre>
<p>I have no idea how to check if the write function is generating an extra line in the end due to the '\n' so I'll appreciate if anyone could give me some feedback.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of writing to the buffer so many times, do a <code>.join</code>, and write the result once:</p>
<pre><code>with open(filename, 'w') as fp:
    fp.write('\n'.join(your_list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update:</strong></p>
<p><a href="https://stackoverflow.com/questions/46320664/writing-files-in-python-the-correct-way#comment79609138_46320897">@John Coleman</a> has pointed out a misunderstanding. It seems that the last line should not have any new line character. This can be corrected by using <code>enumerate()</code> to provide a line count, checking whether it's the last line when printing, and varying the line end character accordingly:</p>
<pre><code>def write_file(filename, data):
    with open(filename, 'w') as f:
        for line_no, item in enumerate(data, 1):
            print(item, file=f, end='\n' if line_no &lt; len(data) else '')
</code></pre>
<p>This is not as elegant as using <code>\n</code>.join(data)` but it is memory efficient for large lists.</p>
<p>Alternative to <code>join()</code> is:</p>
<pre><code>def write_file(filename, data):
    with open(filename, 'w') as f:
        print(*data, file=f, sep='\n', end='')
</code></pre>
<p><strong>Original answer:</strong></p>
<p>Why not simply use <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code></a> and specify the output file?</p>
<pre><code>def write_file(filename, data):
    with open(filename, 'w') as f:
        for item in data:
            print(item, file=f)
</code></pre>
<p>Or more succinctly:</p>
<pre><code>def write_file(filename, data):
    with open(filename, 'w') as f:
        print(*data, file=f, sep='\n')
</code></pre>
<p>The former is preferred if you have a large list because the latter needs to unpack the list to pass its contents as arguments to <code>print()</code>.</p>
<p>Both options will automatically take care of the new line characters for you.</p>
<p>Opening the file in a <code>with</code> statement will also take care of closing the file for you.</p>
<p>You could also use <code>'\n'.join()</code> to join the items in the list. Again, this is feasible for smallish lists. Also, your example shows a list of integers - <code>print()</code> does not require that its arguments first be converted to strings, as does <code>join()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>def write_file(filename):
    name_file = filename
    filename = open(name_file, 'w')

    for line in list:
        if line == list[-1]:
            filename.write(line)
        else:
            filename.write(line+'\n')
    filename.close()
</code></pre>
<p>In your example <code>line == len(list)-1:</code> you are just you are comparing an int the length of the list -1 instead of the last item in the list.</p>
<p>Although this is still not perfect as you could run into issues if you have repeating items in the list such as <code>[1,2,3,5,2]</code> in this case it would be best to use a <code>join</code> or a <code>for i</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to write to a file from list of strings, you can use the following snippet:</p>
<pre><code>def write_file(filename):
    with open(filename, 'w') as f:
        f.write('\n'.join(lines))


lines = ["hi", "hello"]

write_file('test.txt')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't use <code>for line in list</code> here, <code>list</code> shouldn't be used for a list name because the word "list" is a reserved word for python. It's a keyword. You can do <code>myLst = list("abcd")</code> to obtain something like <code>myLst=["a", "b", "c", "d"]</code></p>
<p>And about the solution to your problem, I recommend you use the <code>with</code> method in case you forget to close your file. That way, you won't have to close your file. Just exiting the indent will do the work. Here is how I have solved your problem:  </p>
<pre><code>#I just made a list using list comprehension method to avoid writing so much manually.
myLst=list("List number {}".format(x) for x in range(15))
#Here is where you open the file
with open ('testfile.txt','w') as file:
    for each in myLst:
        file.write(str(each))
        if each!=myLst[len(myLst)-1]:
            file.write('\n')
        else:
            #this "continue" command tells the python script to continue on to the next loop.
            #It basically skips the current loop.
            continue
</code></pre>
<p>I hope I was helpful.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>thefile = open('test.txt', 'w')
</code></pre>
<p>I'd use a loop:</p>
<pre><code>for item in thelist:
  thefile.write("%s\n" % item)
</code></pre>
</div>
<span class="comment-copy"><code>if line == len(list)-1:</code> doesn't really make sense. It doesn't test if <code>line</code> is the last element of the list (which seems to be your intention). Instead, it tests if the list element itself is 1 less than the length of the list, which is somewhat pointless to test for.</span>
<span class="comment-copy">Also -- what is <code>list</code>? In context it seems to be a global variable containing a list, which is doubly awful -- an unnecessary global variable which uses the name of a built-in (using "list" as the name of a list is always a bad idea).</span>
<span class="comment-copy">ah yes, forgot about redirecting print stream</span>
<span class="comment-copy">@hjpotter92: <code>print()</code> also has the advantage that the arguments don't need to be converted to strings, as would <code>join()</code>. (OP example is a list of ints)</span>
<span class="comment-copy">+1, but OP doesn't want a newline character on the last line (whether that is a  good thing to want is another question). Both of your methods have a final newline. The second could be salvaged with <code>end = ''</code>.</span>
<span class="comment-copy">@JohnColeman: after rereading the question I think you might be right. The way I read it was that the OP is stating that there is an "empty newline", i.e. extra blank line at the end of the file. The OP's code belies that, so I'm not sure what to think.</span>
<span class="comment-copy"><code>if line == list[-1]:</code>  ...  but what if the list looks like <code>[1,2,4,3,4]</code>? This code would treat the first 4 differently than the 2 before it and the 3 afterwards. You seem to be aware of the issue -- so why post buggy code as an answer?</span>
<span class="comment-copy">Yeah I updated my answer to point that out. Although based on OP's list of  [1,2,3,4]  it would work. But you're right it's not ideal.</span>
<span class="comment-copy">If you wanted to salvage OP's code as much as possible, it would make more sense to either use <code>enumerate()</code> or to first loop over <code>list[:-1']</code> (and what is <code>list</code>? -- another bug which should have been caught) and then handle the last line after the main loop.</span>
