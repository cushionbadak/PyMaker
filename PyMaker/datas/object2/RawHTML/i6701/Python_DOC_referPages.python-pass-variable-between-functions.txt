<div class="post-text" itemprop="text">
<p>I have 2 functions in one script that are called from another file. I want to pass the variable 'active_vuln_type' and its contents to the second function 'Download'.</p>
<p>The file with the scripts is:-
projectfolder/vuln_backend/download.py</p>
<pre><code>import requests
import eventlet
import os
import sqlite3

#Get the active vulnerability sets
def GetActiveVulnSets() :
    active_vuln_type = con = sqlite3.connect('data/vuln_sets.db')
    cur = con.cursor()
    cur.execute('''SELECT vulntype FROM vuln_sets WHERE active=1''')
    active_vuln_type = cur.fetchall()
    print(active_vuln_type)
    return active_vuln_type


#Download the relevant collections
def Download(active_vuln_type) :

    response = requests.get('https://vulners.com/api/v3/archive/collection/?type=' + active_vuln_type)
    with open('vuln_files/' + active_vuln_type + '.zip' , 'wb') as f:
        f.write(response.content)
        f.close()
    return active_vuln_type + " - " + str(os.path.getsize('vuln_files/' + active_vuln_type + '.zip'))
</code></pre>
<p>The main file in /
projectfolder/vuln_backend.py:-</p>
<pre><code>from vuln_backend import vuln_sets, download, test

test.update_vuln_sets()
#vuln_sets.update_vuln_sets()
download.GetActiveVulnSets()
download.Download()
</code></pre>
<p>I am adapting the following script:-</p>
<pre><code>import requests
import json
import eventlet
import os

response = requests.get('https://vulners.com/api/v3/search/stats/')
objects = json.loads(response.text)

object_names = set()
for name in objects['data']['type_results']:
    object_names.add(name)

def download(name):
    response = requests.get('https://vulners.com/api/v3/archive/collection/?type=' + name)
    with open('vulners_collections/' + name + '.zip' , 'wb') as f:
        f.write(response.content)
        f.close()
    return  name + " - " + str(os.path.getsize('vulners_collections/' + name + '.zip'))

pool = eventlet.GreenPool()
for name in pool.imap(download, object_names):
    print(name)
</code></pre>
<p>So far, I have got the values from ['data']['type_results'] into a SQLite DB, and some of these are marked with a '1' in the 'active' column. The first function then returns only the ones marked as active.</p>
<p>It is the download part I am having issues getting to work correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can also use the concept of global variable here.</p>
<pre><code>import requests
import eventlet
import os
import sqlite3

#declare the global variable 
active_vuln_type = None
#Get the active vulnerability sets
def GetActiveVulnSets() :
    #make the variable global
    global active_vuln_type
    active_vuln_type = con = sqlite3.connect('data/vuln_sets.db')
    cur = con.cursor()
    cur.execute('''SELECT vulntype FROM vuln_sets WHERE active=1''')
    active_vuln_type = cur.fetchall()
    print(active_vuln_type)
    return active_vuln_type


#Download the relevant collections
def Download(active_vuln_type = active_vuln_type) :

    response = requests.get('https://vulners.com/api/v3/archive/collection/?type=' + active_vuln_type)
    with open('vuln_files/' + active_vuln_type + '.zip' , 'wb') as f:
        f.write(response.content)
        f.close()
    return active_vuln_type + " - " + str(os.path.getsize('vuln_files/' + active_vuln_type + '.zip'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what your looking for:</p>
<pre><code>active_vuln_type = download.GetActiveVulnSets()
download.Download(active_vuln_type)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from vuln_backend import vuln_sets, download, test

test.update_vuln_sets()
#vuln_sets.update_vuln_sets()
active_vuln_sets = download.GetActiveVulnSets()
download.Download(active_vuln_sets)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do this</p>
<pre><code>from vuln_backend import vuln_sets, download, test

test.update_vuln_sets()
#vuln_sets.update_vuln_sets()
active_vuln_type = download.GetActiveVulnSets()
download.Download(active_vuln_type)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably need to brush up on (or just learn) <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">how functions work in Python</a> (and most other languages). In that spirit, <em>please</em> don't just take this code and use it directly; try to understand it (especially if this is homework).</p>
<p>Specifically, you need to actually use the value that <code>return</code> gives, which is the result of the function:</p>
<pre><code>my_active_vuln_type = download.GetActiveVulnSets()
download.Download(my_active_vuln_type)
</code></pre>
<p>or just</p>
<pre><code>download.Download(download.GetActiveVulnSets())
</code></pre>
<p>However, it seems that <code>download.GetActiveVulnSets()</code> actually returns a <code>list</code>, so it seems like a loop is required:</p>
<pre><code>active_vuln_type_list = download.GetActiveVulnSets()
for my_active_vuln_type in active_vuln_type_list:
    download.Download(my_active_vuln_type)
</code></pre>
<p>However, you now have a similar problem: what do you want to do with the result of <code>download.Download</code>?</p>
<p>So really you probably want something like:</p>
<pre><code>active_vuln_type_list = download.GetActiveVulnSets()
download_results = []
for my_active_vuln_type in active_vuln_type_list:
    single_download_result = download.Download(my_active_vuln_type)
    download_results.append(single_download_result)
</code></pre>
<p>Alternately, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>active_vuln_type_list = download.GetActiveVulnSets()
download_results = [download.Download(mavt) for mavt in active_vuln_type_list]
</code></pre>
<p>Either way, you can use the list <code>download_results</code>, for something if you need to!... </p>
</div>
<span class="comment-copy">activevuln=download.GetActiveVulnSets()</span>
<span class="comment-copy">result=download.Download(activevuln)</span>
<span class="comment-copy">This seems to throw a TypeError: TypeError: Can't convert 'NoneType' object to str implicitly</span>
<span class="comment-copy">Hey iust add this below code while calling API . Download(active_vuln_type)</span>
<span class="comment-copy">Where would I add this exactly? On the main file that calls the functions?</span>
<span class="comment-copy">This works, except the download function throws an TypeError: Can't convert 'list' object to str implicitly and it I change the return to return str(active_vuln_type) this then creates one file named [('redhat',), ('openwrt',), ('kaspersky',), ('ubuntu',)].zip rather than separate files such as redhat.zip from the url listed in the Download function</span>
<span class="comment-copy">Well, then you haven't actually written your functions correctly! But see above for a fix...</span>
<span class="comment-copy">Be patient! I can only type in one box at a time, and I responded in the comments before updating the answer.</span>
<span class="comment-copy">Yeah, this just creates a load of zip files named a.zip, b.zip etc. I have edited my original question to include the script I am working from and adapting if this will help see my end goal. The script I am adapting just downloads everything from that URL but I want to be able to only download ones marked as active.</span>
