<div class="post-text" itemprop="text">
<p>I am trying to write a script that takes a dictionary whose items are lists, and write those lists to a CSV file. The code I have is as follows:</p>
<pre><code>import csv

data = {'a': [1, 2, 3, 4], 'b': [5,6,7,8]}
shape = {'a': ['round', 'square'], 'b': ['triangle', 'oval']}
size = {'a': [100, 1000], 'b': [750, 750]}

with open('test.csv', 'w+') as f_raw:
    writer = csv.writer(f_raw, delimiter=',', lineterminator='\n')
    for id in data.keys():
        line = [id, data[id], shape[id], size[id]]
        writer.writerow(line)
</code></pre>
<p>The output CSV file takes the form of </p>
<pre><code>a,"[1, 2, 3, 4]","['round', 'square']","[100, 1000]"
b,"[5, 6, 7, 8]","['triangle', 'oval']","[750, 750]"
</code></pre>
<p>All the lists are enclosed in quotation marks, making them a string. I wish for them to remain as lists so when I read them, python detects them as lists, not strings. What have I been missing that causes this issue?</p>
<p>I am using python 3.6</p>
</div>
<div class="post-text" itemprop="text">
<p><code>csv</code> module <code>writerow</code> takes a sequence as input (<code>list</code> or <code>tuple</code> are ok). For each item it converts them to their string representation, which is fine for integers &amp; floats (and strings).</p>
<p>But for lists, it's not what you're expecting.</p>
<p>Solution: just create your row by adding the lists together:</p>
<pre><code>with open('test.csv', 'w',newline="") as f_raw:
    writer = csv.writer(f_raw, delimiter=',', lineterminator='\n')
    for id in data.keys():
        line = [id] + data[id] + shape[id] + size[id]
        writer.writerow(line)
</code></pre>
<p>with your data, the file now contains:</p>
<pre><code>b,5,6,7,8,triangle,oval,750,750
a,1,2,3,4,round,square,100,1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may not directly solve your problem but if you have a list like </p>
<p><code>a = ["[1, 2, 3, 4]","['round', 'square']","[100, 1000]"]</code></p>
<p>Then following will surely be handy:</p>
<pre><code>from ast import literal_eval
&gt;&gt;&gt; a = ["[1, 2, 3, 4]","['round', 'square']","[100, 1000]"]
&gt;&gt;&gt; list(map(literal_eval, a))
[[1, 2, 3, 4], ['round', 'square'], [100, 1000]]
</code></pre>
<p>From <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval</code></a> you can always convert strings back to their original form.</p>
</div>
<span class="comment-copy">You should look into json for this use case.</span>
<span class="comment-copy">That is going to break the csv format.  It's adding the quotes because you are adding data that contains commas and the delimiter is a comma.  I agree with Chet that you might want to look into a different format for this one.  It's difficult to determine if the comma is part of the data in the column or the delimiter.</span>
<span class="comment-copy">When python reads them, they won't be recognized as <i>lists</i>. Python will read them in as <i>strings</i> anyway... It sounds like you are looking for <i>object serialization</i>. CSV is not a good format for that, unless your object is readily reconstructable from a csv (e.g. a DataFrame, a simple list of strings). You should look into JSON or <code>pickle</code>, the latter of which should support almost all Python objects, the former supports lists and dicts with number, strings, None, lists or dicts in them. It <i>looks</i> like JSON is exactly what you need, so use the <code>json</code> module.</span>
<span class="comment-copy">What will you do with the csv file after you have made it?</span>
<span class="comment-copy">Thank you for all the input! It looks like its time for me to brush up on my JSON. My intent was to read this csv file from another program and graph it.</span>
<span class="comment-copy">Thanks for your input! If the length of my lists were static this certainly will do the trick. However, the lengths of the list are dynamic (sorry, I should have specified that in the question), and I cant think of a simple way to map the length of the list to the positions of the data within output CSV file.</span>
