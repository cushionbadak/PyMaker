<div class="post-text" itemprop="text">
<p>Hi python/sqlite experts,</p>
<p>i have an quite strange behaviour I can't explain to myself. Maybe you can: 
I have an sqlite DB  with only one table:</p>
<pre><code>CREATE TABLE testme (
    id     INTEGER  PRIMARY KEY AUTOINCREMENT
                   UNIQUE
                   NOT NULL,
   dataId STRING   NOT NULL,
   Sender STRING   NOT NULL,
   Value  DECIMAL  NOT NULL,
   Date   DATETIME NOT NULL
</code></pre>
<p>);</p>
<p>with Pyhton I added some data from a csv file:</p>
<pre><code>import csv
import sys
import sqlite3 as lite

con = lite.connect('data.db3')
f = open('Export_378334000.csv', 'rt')
cur = con.cursor()
cur.execute("delete from data1")
con.commit()
cur.execute("vacuum")
con.commit()
try:
    reader = csv.reader(f, delimiter="\t")
    for row in reader:
        print ("Name: " + row[0])
        print ("Betrag: " + row[6])
        print ("Datum: " + row[9])
        print ("id: " + row[21])
        cur.execute("INSERT INTO data1 (dataid,sender,value,date) VALUES ('" + row[21] + "','" + row[0] + "','" + row[6] + "','"  + row[9] + "')")
     con.commit()

finally:
    con.commit()
    f.close()
</code></pre>
<p>After that I found a row with an string entry in the date column....:</p>
<pre><code>Name: Name 1
Betrag: Betrag
Datum: Wertstellungsdatum
id: Buchungs-ID
</code></pre>
<p>How can I proof if my entries in the date row are datetime recognized </p>
</div>
<div class="post-text" itemprop="text">
<p>As already mentioned in the comments, SQLite will accept anything into any column, regardless of its data. That's why you found a row with a string in datetime.</p>
<blockquote>
<p>How can I proof if my entries in the date row are datetime recognized</p>
</blockquote>
<p>But you can define a constraint to guarantee that only values with correct datetime format will be accepted for he column. When creating table, set checking rule:  </p>
<pre><code>d DATE CONSTRAINT date_format_check CHECK (DATE(d) IS NOT NULL)
</code></pre>
<p><strong>Example</strong></p>
<pre><code>create table test (
    test_date DATE CONSTRAINT date_format_check CHECK (date(test_date) is not NULL)
)

insert into test values ('2017-01-01');
insert into test values ('oops!');
select * from test
</code></pre>
</div>
<span class="comment-copy">Wertstellungsdatum - is it a string as you printed in the csv or just replacement for datetime?</span>
<span class="comment-copy">SQLite will accept anything into any column, regardless of its data. You can insert strings into integers, integers into datetimes, etc. Only exception is having NULL where a column is defined as NOT NULL. Additionally, sqlite for python accepts placeholders for inserting data, see <a href="https://docs.python.org/3/library/sqlite3.html#cursor-objects" rel="nofollow noreferrer">docs.python.org/3/library/sqlite3.html#cursor-objects</a></span>
<span class="comment-copy">looks to me like your input data is not what you are expecting</span>
<span class="comment-copy">Thanks for the explaination - I didn't know sqlite works this way, I thought it's like in other dbs that the column type restricts the data which can be inserted.</span>
<span class="comment-copy">I find it interesting that the <code>CONSTRAINT ... CHECK</code> doesn't allow for a <code>ON CONFLICT</code> clause, as the <code>CONSTRAINT UNIQUE</code> does.</span>
<span class="comment-copy">@MrGumble, interesting note, thanks</span>
