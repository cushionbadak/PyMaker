<div class="post-text" itemprop="text">
<p>I have to test if the method pyautogui.click() is called. This is my Player.py file:</p>
<pre><code># Player.py

import pyautogui

class Player:
    def play():
        pyautogui.click(100, 100)
</code></pre>
<p>And this is my test file:</p>
<pre><code># Test_Player.py

import unittest
from Player import Player

class Test_Player(unittest.TestCase):
    def test_play(self):
        player = Player()
        player.play()
        # assert pyautogui.click is called once
</code></pre>
<p>I tried with <code>pyautogui.click = MagicMock()</code> and also many other things but I really cannot find how to assert that pyautogui.click() is called once.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">unittest.mock.patch</a>. Patch replaces an imported module with a mock version for the duration of a test. The most important thing to understand about it is that you have to patch something <em>where it is imported</em>, not where it lives. That means you patch <code>Player.pyautogui</code>, not <code>pyautogui</code> itself. You should read <a href="https://docs.python.org/3/library/unittest.mock.html#id5" rel="nofollow noreferrer">"Where to Patch"</a> in the docs.</p>
<p>You can add the patch decorator to your test function and pass it what you want to replace with a mock. The string you pass it should be a relative path from where you're running your tests (usually the root directory of your project). I'll assume both of your files are in the same folder, and you run your tests from that folder.</p>
<p>The patch decorator will then pass your test function an instance of MagicMock as the argument after <code>self</code>. You can name it whatever you'd like. I'll call it <code>mock_pyautogui</code> in the sample below. Inside your function, you can make assertions like you normally would.</p>
<pre><code>import unittest
from Player import Player

class Test_Player(unittest.TestCase):

    @unittest.mock.patch("Player.pyautogui")
    def test_play(self, mock_pyautogui):
        player = Player()
        player.play()

        self.assertEqual(1, mock_pyautogui.click.call_count)
</code></pre>
</div>
<span class="comment-copy">I'd recommend you <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">read the docs</a>. At least give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
