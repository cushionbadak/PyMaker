<div class="post-text" itemprop="text">
<p>I want to remove duplicated in a python list in a way that allows me to alter another corresponding list in the same way. In the below example <code>original</code> is the list I want to de-duplicate. Each element in <code>key</code> that shares the same index as original corresponds to each other:</p>
<pre><code>original = [a,a,a,3,4,5,b,2,b]
key      = [h,f,g,5,e,6,u,z,t]
</code></pre>
<p>So I want to remove duplicates in <code>original</code> such that whatever element I delete from original I delete the corresponding element (of the same index) in <code>key</code>. Results I want:</p>
<pre><code>deduplicated_original = [a,3,4,5,b,2]
deduplicated_key      = [h,5,e,6,u,z]
</code></pre>
<p>I can get <code>deduplicated</code>_original using <code>list(set(original))</code> however I cannot get the corresponding <code>deduplicated_key</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3.6/library/stdtypes.html#set" rel="noreferrer">set</a> to keep track of duplicates and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a> to iterate over indexes/values of the original list:</p>
<pre><code>seen = set()
lst = []

for i, v in enumerate(original):
    if not v in seen:
        lst.append(key[i])
        seen.add(v)
print(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>maybe less elegant, less easy to follow the list revesal, index slicing  </p>
<p>the inner list comp walks the input list <code>org</code> backwards, asking if there is a prior matching element, if so record the index of this duplicate</p>
<pre><code>[len(org) - 1 - i
 for i, e in enumerate(org[::-1]) if e in org[:-i-1]]
</code></pre>
<p>then the outer list comp uses <code>.pop()</code> to modify org, ky as a side effect  </p>
<p>nested list comprehension 'dups', a 'one liner' (with line breaks):</p>
<pre><code>org = ['a','a','a',3,4,5,'b',2,'b']
ky = ['h','f','g',5,'e',6,'u','z','t']

dups = [(org.pop(di), ky.pop(di))
        for di in [len(org) - 1 - i
                   for i, e in enumerate(org[::-1]) if e in org[:-i-1]]]

org, ky, dups
Out[208]: 
(['a', 3, 4, 5, 'b', 2],
 ['h', 5, 'e', 6, 'u', 'z'],
 [('b', 't'), ('a', 'g'), ('a', 'f')])  
</code></pre>
<p>of course you don't actually have to assign the list comp result to anything to get the side effect of modifying the lists</p>
</div>
<div class="post-text" itemprop="text">
<p>You can manually get all the indices of duplicates like this:</p>
<pre><code>indices = []
existing = set()
for i, item in enumerate(original):
    if item in existing:
        indices.append(i)
    else:
        existing.add(item)
</code></pre>
<p>and then remove those indices from your <code>key</code> list, in reverse because deleting a key changes the indices of further items:</p>
<pre><code>for i in reversed(indices):
    del key[i]
</code></pre>
</div>
<span class="comment-copy">Is <code>['g', 5, 'e', 6, 't', 'z']</code> okay? removal of all but the last?</span>
<span class="comment-copy">Can you please show any attempts you've made? Where exactly are you stuck?</span>
