<div class="post-text" itemprop="text">
<p><strong>I have a data like this, and I want to add String with comma separated and sum int values.</strong></p>
<pre><code>data=[{"string": "x","int": 1},
      {"string": "y","int": 2},
      {"string": "z","int": 3}]
</code></pre>
<p>I'am expecting an output some thing like this.</p>
<p><strong>Output:</strong> </p>
<pre><code>{ "string":"x,y,z","int":"6"}
</code></pre>
<p>I tried using reduce function </p>
<pre><code>func = lambda x, y: dict((m, n + y[m]) for m, n in x.items() )
print reduce(func, data)
</code></pre>
<p>and i am getting something like this.</p>
<pre><code>{"string": "xyz", "int": "6"}
</code></pre>
<p>How to get string with comma separated.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>func = lambda x, y: dict((m, n + y[m]) for m, n in x.items() )
</code></pre>
<p>You need a custom function to replace <code>n+y[m]</code> (let's say <code>custom_add(a,b)</code>), which,</p>
<ul>
<li>if arguments are integers to return algebraic sum of them</li>
<li>if arguments are strings, to join them with ',' and return final string</li>
</ul>
<p>let's implement it.</p>
<pre><code>def custom_join(a,b):
    arr = list((a,b))
    return sum(arr) if is_int_array(arr) else ','.join(arr)
</code></pre>
<p>we have no <code>is_int_array/1</code> yet. let's do it now. </p>
<pre><code>def is_int_array(arr):
    return all(i for i in map(is_int, arr))
</code></pre>
<p>no <code>is_int/1</code>. let's do it</p>
<pre><code>def is_int(e):
    return isinstance(e, int)
</code></pre>
<p>do the same things for strings</p>
<pre><code>def is_str(e):
    return isinstance(e, str)

def is_str_array(arr):
    return all(i for i in map(is_str, arr))
</code></pre>
<p>Summing all of them - <a href="https://repl.it/LPRR" rel="nofollow noreferrer">https://repl.it/LPRR</a></p>
<p>OK, this is insane but when you try to implement <code>functional-only</code> approach, you need to be ready such situations -)))</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a> with some <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expressions</a> like this:</p>
<pre><code>res = {"string": ','.join(d['string'] for d in data), "int": sum(d['int'] for d in data)}
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; res
{'int': 6, 'string': 'x,y,z'}
</code></pre>
</div>
<span class="comment-copy">Don't use a lambda for that.</span>
<span class="comment-copy">@Goyo then? what should i do to iterate over the dictionary if i am having 50 columns to sum...</span>
<span class="comment-copy">Use a normal function <code>def func(x, y):</code>. It will give you more flexibility to do whatever is needed. Only use lambdas for very simple functions. If it is not working and you do not know how to fix it then it is not very simple.</span>
<span class="comment-copy">Thanq @marmeladze</span>
<span class="comment-copy">I have around 30 integer type keys and 20 String keys, so i want to iterate dictionary through reduce. It would be helpful if it is in lambda.</span>
