<div class="post-text" itemprop="text">
<p>There is the code:</p>
<pre><code>import numpy as np

def check(x):
    if x == None:
        print('x is None')

check(np.array([1,2]))
</code></pre>
<p><code>x</code> can be None or np.ndarray, so I want to check whether <code>x</code> is None or np.ndarray, but if I pass np.ndarray into <code>check</code>, it will raise a error,
because np.ndarray==None should use <code>np.any()</code> or <code>np.all()</code>. So what should I do?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Checking for ndarray type</h3>
<p>Preferred over <code>type(x)</code>: use <code>isinstance</code>.</p>
<p>From <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP 8</a>:</p>
<blockquote>
<p>Object type comparisons should always use <code>isinstance()</code> instead of
  comparing types directly.</p>
</blockquote>
<p>In your example: use <code>if isinstance(x, np.ndarray):</code></p>
<h3>Checking if <code>x</code> is <code>None</code></h3>
<p>Option 1: 
Use <code>elif x is None:</code>.  This explicitly checks that <code>x</code> is None.</p>
<p>Option 2: 
Use <code>elif not x:</code>.  This takes advantage of the "Falsiness" of <code>None</code>, <em>but</em> it also would evaluate to True if <code>x</code> is other "Falsey" values such as <code>np.nan</code>, 0, or an empty data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this one:</p>
<pre><code>import numpy as np

def check(x):
    if type(x) is np.ndarray:
        print('x is numpy.ndarray')
    else:
        raise ValueError("x is None")

check(np.array([1, 2]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason it raises the value error is that with a recent enough version of Numpy the <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> override of arrays does an elementwise object comparison even when comparing to None.</p>
<p>With Numpy 1.12.1:</p>
<pre><code>In [2]: if np.array([1,2,3]) == None:
   ...:     print('Equals None')
   ...: else:
   ...:     print('Does not equal None')
   ...:     
/home/user/Work/SO/bin/ipython:1: FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.
  #!/home/user/Work/SO/bin/python3
Does not equal None
</code></pre>
<p>and with Numpy 1.13.1:</p>
<pre><code>In [1]: if np.array([1,2,3]) == None:
   ...:     print('Equals None')
   ...: else:
   ...:     print('Does not equal None')
   ...:     
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-1-06133f6732e1&gt; in &lt;module&gt;()
----&gt; 1 if np.array([1,2,3]) == None:
      2     print('Equals None')
      3 else:
      4     print('Does not equal None')
      5 

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</code></pre>
<p>The error is quite self explanatory. Numpy has a different view on truthiness of an array compared to how plain Python sequences behave.</p>
<p>In order to check if an object is the <a href="https://docs.python.org/3/library/constants.html#None" rel="nofollow noreferrer">singleton value None</a>, you should use <a href="https://docs.python.org/3/reference/expressions.html#is" rel="nofollow noreferrer">identity comparison</a> as also explained <a href="https://stackoverflow.com/questions/14247373/python-none-comparison-should-i-use-is-or">here</a>:</p>
<pre><code>def check(x):
    if x is None:
        print('x is None')

    else:
        print('x is not None')
</code></pre>
</div>
<span class="comment-copy">Identity comparison: <code>if x is None:</code>. <a href="https://stackoverflow.com/questions/14247373/python-none-comparison-should-i-use-is-or">The answer to this question</a> mentions your case specifically – objects that override <code>__eq__</code> and behave surprisingly when compared to for example None.</span>
<span class="comment-copy">@IljaEverilä You should make this the answer.</span>
<span class="comment-copy">@HankGay I've tried to find a better dupe target for this, which the link from before almost is, but not quite.</span>
<span class="comment-copy">@IljaEverilä Yeah, I almost closed as a dupe, but I decided that even though the underlying issue was a dupe, this particular manifestation didn't have an obvious one I knew about. If somebody else wants to do that particular legwork, they're welcome to it. Seriously, though: you should make your comment an answer, because it's the root of the actual problem. I'll upvote you.</span>
<span class="comment-copy">Yes, you're right, however I'm just considering he wants to pass whether a numpy array or None!</span>
