<div class="post-text" itemprop="text">
<p>I have a csv file I am trying to read. The first row in the excel/csv sheet is the column headers "Jan|Feb|Mar..." etc. Then below each column header is float data. I have the following code:</p>
<pre><code>filename ='Data.csv'
with open(filename) as f:
csvreader = csv.reader(f)
header_row = next(csvreader)
Jan, Feb = [], [] .... #(and so on)
Mar = []
Apr = []
May = []
Jun = []
Jul = []
Aug = []
Sep = []    
Oct = []
Nov = []
Dec = []
for row in csvreader:
    Jan.append(float(row[1]))
    Feb.append(float(row[2]))
    Mar.append(float(row[3]))
    Apr.append(float(row[4]))
    May.append(float(row[5]))
    Jun.append(float(row[6]))
    Jul.append(float(row[7]))
    Aug.append(float(row[8]))
    Sep.append(float(row[9]))
    Oct.append(float(row[10]))
    Nov.append(float(row[11]))
    Dec.append(float(row[12]))
</code></pre>
<p>How can I condense this code so I can easily plot a bar graph with the months on the x-axis and the data on the y-axis?</p>
</div>
<div class="post-text" itemprop="text">
<p>For me, the easiest way is to use pandas library, as it provides plotting abilities straight from the dataframe.</p>
<pre><code>import pandas as pd

df = pd.read_csv('Data.csv', sep='|') # or your sep in file
...
df.plot.bar()
</code></pre>
<p>Edit:
If you have data in excel, there is no need to provide sep as it is for csv file.
To read excel file it's as simple as:</p>
<pre><code>df = pd.read_excel('Data.xlsx', sheetname='name')
df.plot.bar()
</code></pre>
<p><a href="http://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.read_excel.html" rel="nofollow noreferrer">http://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.read_excel.html</a></p>
<p>Some examples:</p>
<pre><code>df2 = pd.DataFrame(np.random.rand(10, 4), columns=['a', 'b', 'c', 'd'])
df2.plot.bar()
</code></pre>
<p>Pandas documentation of barplot:
<a href="https://pandas.pydata.org/pandas-docs/stable/visualization.html#visualization-barplot" rel="nofollow noreferrer">https://pandas.pydata.org/pandas-docs/stable/visualization.html#visualization-barplot</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Fake data / setup:</p>
<pre><code>import csv, io
from pprint import pprint
from matplotlib import pyplot as plt

s = '''a, b, c
1, 2, 3
4, 5, 6
7, 8, 9'''
csv_file = io.StringIO(s)
reader = csv.reader(csv_file)
</code></pre>
<p>csv.reader objects return rows</p>
<pre><code>header = next(reader)
data_rows = list(reader)

&gt;&gt;&gt; pprint(data_rows, width = 20)
[['1', ' 2', ' 3'],
 ['4', ' 5', ' 6'],
 ['7', ' 8', ' 9']]
&gt;&gt;&gt;
</code></pre>
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> to transpose the data into columns</p>
<pre><code>data_cols = zip(*data_rows)

&gt;&gt;&gt; pprint(list(data_cols), width = 20)
[('1', '4', '7'),
 (' 2', ' 5', ' 8'),
 (' 3', ' 6', ' 9')]
&gt;&gt;&gt; 
</code></pre>
<p>You can associate the columns with their header, again using zip, and add a legend to the plot</p>
<pre><code>for month, data in zip(header, data_cols):
    plt.plot(data, label = month)
plt.legend()
plt.show()
plt.close()
</code></pre>
<p><a href="https://i.stack.imgur.com/TOYD6.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/TOYD6.png"/></a></p>
<hr/>
<p>If you just want to get the data into a container and have the columns associated with their headers, put it in a dict:</p>
<pre><code>data = {}
for month, column in zip(header, data_cols):
    data[month] = column

&gt;&gt;&gt; data
{'a': ('1', '4', '7'), ' b': (' 2', ' 5', ' 8'), ' c': (' 3', ' 6', ' 9')}
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">For one thing, you can ask the csv reader to parse the header. DictReader <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.DictReader</a>  can help you with the other.</span>
<span class="comment-copy"><code>The best way ..</code> seems subjective, why is it better than using the <code>csv</code> module?</span>
<span class="comment-copy">Sorry, I edited the subjective part..., it's because you use one packege to read file, clean file and plot file from dataframe interface</span>
<span class="comment-copy">I am still learning Python but I am not a fan of the pandas so far. What does the "sep" command do. My file in excel and I was using the | just to show the months are in different columns.</span>
<span class="comment-copy">@Jonathon sep is used for csv, to read excel you don't need it. Instead you use pd.read_excel() - see edit</span>
<span class="comment-copy">You're right. The Pandas does seem easier in this instance. After reading in the data, how do I isolate the columns into x,y variables so I can plot them?</span>
