<div class="post-text" itemprop="text">
<p>I need execute code, only if any exceptions happened. 
I try use this code:</p>
<pre><code>args = [1, 2, 3]
# .... some code ....
exception_happened = True
try:
    out = zabbix_get(ip='127.0.0.1')
except OSError as e:
    logger.critical("Error {0}: {1}".format(e.errno, e.strerror))
except subprocess.CalledProcessError as e:
    logger.critical("Subprocess exit with 1")
else:
    exception_happened = False
finally:
    if exception_happened:
        # .... this code for execute if any exeptions happend...
</code></pre>
<p>Maybe there is a better solution for this task?</p>
</div>
<div class="post-text" itemprop="text">
<p>As I said in comment, maybe you wanna do :</p>
<pre><code>def exception_function():
    #do whatever you want
</code></pre>
<p>and then call it in the exception blocks:</p>
<pre><code>try:
    out = zabbix_get(ip='127.0.0.1')
except OSError as e:
    exception_function()
    logger.critical("Error {0}: {1}".format(e.errno, e.strerror))
except subprocess.CalledProcessError as e:
    exception_function()
    logger.critical("Subprocess exit with 1")
</code></pre>
<p>That prevent from doing a finally and another condition test.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add the <code>except Exception</code> block to catch general exceptions not previously listed:</p>
<pre><code>...
except OSError as e:
    exception_happened = True
    logger.critical("Error {0}: {1}".format(e.errno, e.strerror))
except subprocess.CalledProcessError as e:
    exception_happened = True
    logger.critical("Subprocess exit with 1")
except Exception as e:
    # any other exception will land here
    ...
</code></pre>
<p>the use of <code>finally</code> is <a href="https://docs.python.org/3/tutorial/errors.html#defining-clean-up-actions" rel="nofollow noreferrer">pretty different use case</a>.</p>
<p>[UPDATE] As pointed out in the comments, maybe this is what you are looking for:</p>
<pre><code>try:
    ...
except Exception as e:
    if isinstance(e, ValueError):
        # do something
    elif ...
</code></pre>
</div>
<span class="comment-copy">hum i don't think so, maybe having the specific function you wanna call and calling it in any exception block. That prevent from doing the <code>finally</code> + <code>if</code> condition</span>
<span class="comment-copy">This looks OK or you can run the code in the except block instead of setting the variable exception_happened = True</span>
<span class="comment-copy">I'd really recommend switching it around if done this way: set a flag if everything went OK instead, that way you can add new exceptions without having to remember to set the exception_happened-flag each time.</span>
<span class="comment-copy">The solution you have in the question will more than likely provide the cleanest solution as you'll only have the #code to execute if any exception happened called and implemented in one place</span>
<span class="comment-copy">But you need repeating it every time for all exceptions, repeating isn't good. I edited my code and delete exception_happened = True repeating.</span>
<span class="comment-copy">Yeah, your new solution is fine too, but you add a boolean, an else block and a finally block. There's less repetition, but in my exemple, at any exception you code will be launch (without testing anything) and if there's not, you can just go on, and not going by a else finally if etc :). Your choice</span>
<span class="comment-copy">It's just sample code, I have about ten different exceptions.</span>
<span class="comment-copy">Well as I said, if your purpose is to have a cleaner code, your solution is fine. There's no better way to do it.</span>
<span class="comment-copy">He's looking for something to get invoked on <i>any exception</i>. This will only get invoked if he didn't catch the exception already.</span>
<span class="comment-copy">doesn't answer the question.</span>
<span class="comment-copy">@MatsLindh then <code>except Exception</code> alone has to be used, and the outcome in <code>e</code> has to be checked for type of exception.</span>
<span class="comment-copy">still not. He doesn't want to catch any exception, he wants to check if AN exception has occured, and launch a code. His code is working, he just want to check if there's a better solution</span>
<span class="comment-copy">@Bestasttung check my update, it can be done by checking the exception type</span>
