<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35253751/python-execute-threads-by-order">Python execute threads by order</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<pre><code>from threading import Thread
Thread(target=do_something1).start()
Thread(target=do_something2).start()
</code></pre>
<p>Is there any condition indicating that thread is done? In some case I need to start one thread only when another is finished.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply use the <code>join</code> method of the thread to wait for it to complete. Then start the next thread.</p>
<pre><code>from threading import Thread
from time import sleep

def do_something1():
    sleep(1)
    return 1

def do_something2():
    sleep(1)
    return 2

t1 = Thread(target=do_something1)
t1.start()
print("wait for 1")
t1.join()
print("done 1")

t2 = Thread(target=do_something2)
t2.start()
print("wait for 2")
t2.join()
print("done 2")
</code></pre>
<p>There is also a new(ish) feature from python 3.2+ called <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a>. They allow you to execute functions in other threads (or processes) and manage the execution without resorting to low level entities such as threads. An example of this is shown below.</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor

print("use futures")
funcs = [do_something1, do_something2]
with ThreadPoolExecutor(max_workers=1) as e:

    for fn in funcs:
        ftr = e.submit(fn)
        print("submit")
        print(ftr.result())
        print("done")
</code></pre>
</div>
<span class="comment-copy">You need to join the thread, joining means waiting for it to finish. Check out the docs <a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">docs.python.org/2/library/threading.html</a></span>
<span class="comment-copy">Look at the join method. There is also the higher level module <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">'concurrent.futures'</a> which will allow you to avoid using low level components such as threads.</span>
