<div class="post-text" itemprop="text">
<p>Is it possible to disable the creation of shared objects with <code>distutils.core.Extension</code>? I want to stop the compiler before linking (i.e. <code>g++ -c ...</code>). </p>
<p>I am swigging a native file, which creates an object file and a python file. I have other code to compile that I'll later link with this object file, so I don't want this to proceed after the <code>.o</code> compilation.</p>
<pre><code>$ python setup.py build
running build
....
building 'foo' extension
swigging src/foobar.i to src/foobar.cpp
swig -python -c++ -o src/foobar.cpp src/foobar.i
</code></pre>
<p>I want to stop here, but it continues.</p>
<pre><code>creating build/temp.linux-x86_64-2.7
creating build/temp.linux-x86_64-2.7/src
gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -Isrc -I/usr/include/python2.7 -c src/foobar.cpp -o build/temp.linux-x86_64-2.7/src/foobar.o
g++ -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro build/temp.linux-x86_64-2.7/src/foobar.o -o build/lib.linux-x86_64-2.7/foobar.so
</code></pre>
<p>Do I need to use the CCompiler class directly? Or is there a way to wrangle the <code>Extension</code> class?</p>
<pre><code>23     ext_modules=[
24         # Swig
25         Extension(
26             name='foobar',
27             sources=['src/foobar.i'],
28             include_dirs=['src'],
29             swig_opts=['-c++'],
30         ),
31     ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not possible to stop the linking step without modifying the underlying <a href="https://docs.python.org/3/distutils/apiref.html#module-distutils.ccompiler" rel="nofollow noreferrer">ccompiler</a> object. One could theoretically override the <code>link_shared_object</code> function of the underlying <code>ccompiler</code> to do nothing (See the <code>build_ext</code> <a href="https://github.com/python/cpython/blob/49ce74efe845a8a91939ff3990a5f233262d3e1f/Lib/distutils/command/build_ext.py#L549" rel="nofollow noreferrer">source</a>).</p>
<p>However, to answer the original intent behind this question, the C/C++ files can be passed to the Extension with the Swig interface file without needing to compile them independently and link later. It is not necessary to separate the swig file generation and the library compilation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>from distutils.command import build_ext

def cmd_ex(command_subclass):
    orig_ext = command_subclass.build_extension

    def build_ext(self, ext):
        sources = self.swig_sources(list(ext.sources), ext)

    command_subclass.build_extension = build_ext
    return command_subclass

@cmd_ex
class build_ext_ex(build_ext):
    pass

setup(
    name = ...,
    cmdclass = {'build_ext': build_ext_ex},
    ext_modules = ...
)
</code></pre>
<p>to override the default behavior of distutils command.</p>
<p><a href="https://blog.niteo.co/setuptools-run-custom-code-in-setup-py/" rel="nofollow noreferrer">Setuptools â€“ run custom code in setup.py</a></p>
</div>
<span class="comment-copy">It appears that the <code>build_extension</code> command in distutils just does that for you, and there isn't much you can do about it without hacking the build_ext.compiler class a bit.  <a href="https://fossies.org/dox/Python-2.7.13/build__ext_8py_source.html#l00451" rel="nofollow noreferrer">fossies.org/dox/Python-2.7.13/build__ext_8py_source.html#l00451</a></span>
