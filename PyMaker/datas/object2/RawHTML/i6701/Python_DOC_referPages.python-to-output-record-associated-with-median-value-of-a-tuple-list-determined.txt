<div class="post-text" itemprop="text">
<p>So I'm using <code>numpy</code> to find the median value from a list of tuples like this: </p>
<pre><code>print(np.median( [x[1] for x in pairs]) )
</code></pre>
<p>The <code>Pairs</code> themselves come from the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">collections.namedtuple</a>, and individually they look like this: </p>
<pre><code>Pair(hash=u'0x034c9e7f28f136188ebb2a2630c26183b3df90c387490159b411cf7326764341', gas=21000)
Pair(hash=u'0xffda7269775dcd710565c5e0289a2254c195e006f34cafc80c4a3c89f479606e', gas=1000000)
Pair(hash=u'0x90ca439b7daa648fafee829d145adefa1dc17c064f43db77f573da873b641f19', gas=90000)
Pair(hash=u'0x7cba9f140ab0b3ec360e0a55c06f75b51c83b2e97662736523c26259a730007f', gas=40000)
Pair(hash=u'0x92dedff7dab405220c473aefd12e2e41d260d2dff7816c26005f78d92254aba2', gas=21000)
</code></pre>
<p>This is the method where I determine the median: </p>
<pre><code>pairs = list(_as_pairs(dict_hash_gas))
# pprint.pprint(pairs)
if pairs:
    # Avoid a ValueError from min() and max() if the list is empty.
    print(min(pairs, key=lambda pair: pair.gas))
    print(max(pairs, key=lambda pair: pair.gas))
    print(np.median( [x[1] for x in pairs]) )
</code></pre>
<p>Here is how the structure is created: </p>
<pre><code>def _as_pairs(pairs):
    for pair in pairs:
        # TODO:  Verify the dict conatains exactly one item?
        for k, v in pair.items():
            # Should the `key` string also be an integer?
            #yield Pair(key=int(k, base=16), value=int(v))
            yield Pair(hash=k, gas=int(v))
</code></pre>
<p>The full script can be sound <a href="https://gist.github.com/s-matthew-english/c7939fc2ce58730d972639040b543654" rel="nofollow noreferrer">here</a>.</p>
<p>At the moment the output is like this: </p>
<pre><code>Pair(hash=u'0xf4f034e23b4118cb4aa4e9d077f0f28d675e25e9dc2650225f32ac33e04c93aa', gas=21000)
Pair(hash=u'0x92de9056a6357752a46dff1d6ff274d204d450bbd6c51cefe757f199af105cb4', gas=4712388)
90000.0
</code></pre>
<p>The question is, how could I output the entire record, the entire <code>Pair</code>, associated with the median value, as opposed to just the median value itself? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the index of median Pair, but it needs one more lines:</p>
<p>1) If you allways have <code>len(pairs)%2 == 1</code>, the median is unique and belongs to the pairs:</p>
<pre><code>gases = np.array([pair.gas for pair in pairs])
medianGasIndex = np.where( gases == np.median(gases) )[0][0]
print(pairs[medianGasIndex])
</code></pre>
<p>2) If you may have <code>len(pairs)%2 == 0</code>, then you have to choose:</p>
<p>2.1) Either you want the median Pair that is the nearest value of the real median value (i.e. the 50 percentile, that is not contained in the dataset)  </p>
<pre><code>medianGasIndex = np.where( gases == np.percentile(gases,50,interpolation='nearest') )[0][0]
</code></pre>
<p>2.2) or you want both the right and left median values</p>
<pre><code>leftMedianGasIndex = np.where( gases == np.percentile(gases,50,interpolation='lower') )[0][0]
rightMedianGasIndex = np.where( gases == np.percentile(gases,50,interpolation='higher') )[0][0]
</code></pre>
<p>It works with this <a href="https://pastebin.com/jZKQm0um" rel="nofollow noreferrer">minimal working example</a>, just edit the way to get the median value acording to your needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>The question is ill-posed, because there is no value that is really associated to the median: it could happen that the <code>median</code> value is not present in the original array, e.g. <code>np.median([0, 1])</code> equals <code>0.5</code>.</p>
<p>Instead, what you could do is to find the value of <code>pairs</code> closest to the median, using <code>np.argmin()</code>, e.g.:</p>
<pre><code>import numpy as np

arr = np.arange(10, 20)
median_val = np.median(arr)
print(median_val)
# output: 14.5

i = np.argmin(np.abs(arr - median_val))
print(i)
# output: 4
print(arr[i])
# output: 14
</code></pre>
<p>For your code, this might be something like:</p>
<pre><code>gases_arr = np.array([pair.gas for pair in pairs])
median_val = np.median(gases_arr)
i = np.argmin(np.abs(gases_arr - median_gases))
print(i, pairs[i])
</code></pre>
<p>unless, of course, you want the value to be printed only if the <code>median</code> is actually present in the array, in which case you either check <code>pairs[i] == median_val</code> or you use <code>where</code> as outlined in some other answer.</p>
</div>
<span class="comment-copy">At first I thought you could replace <code>print(np.median( [x[1] for x in pairs]) )</code> by <code>print(np.median((pair.gas, pair) for pair in pairs)[1])</code>, but that doesn't work.</span>
<span class="comment-copy">What should happen if the median value is not in the data?</span>
<span class="comment-copy">examine the two competing potential values and choose one of them at random</span>
<span class="comment-copy">This will fail if the result of <code>np.median()</code> is not contained in the <code>pairs</code>, e.g. if include an additional <code>Pair(hash=u'0x7cba9f140agfsdsg60e0a55c06f75b51c83b2e97662736523c26259a730007f', gas=500)</code> the above code will not work.</span>
<span class="comment-copy">Thanks @norok2, I edited my answer to solve the problem you raised.</span>
