<div class="post-text" itemprop="text">
<p>i have a list of dicts in python like this:</p>
<pre><code>[
  {
    "25-34": {
      "Clicks": 10
    },
    "45-54": {
      "Clicks": 2
    },

  },
  {
    "25-34": {
      "Clicks": 20
    },
    "45-54": {
      "Clicks": 10
    },

  }   
]
</code></pre>
<p>how can i get the sum of keys in each dict of list such that i have:</p>
<pre><code>{
    "25-34": {
        "Clicks": 30
    },
    "45-54": {
        "Clicks": 12
    },

}
</code></pre>
<p>I tried using <code>Counter()</code> but it works easily when the <code>dicts</code> inside list are flat but with the nested dicts like above it gives this error:</p>
<pre><code>    /usr/lib/python2.7/collections.pyc in update(self, iterable, **kwds)
        524                     self_get = self.get
        525                     for elem, count in iterable.iteritems():
    --&gt; 526                         self[elem] = self_get(elem, 0) + count
        527                 else:
        528                     super(Counter, self).update(iterable) # fast path when counter is empty

TypeError: unsupported operand type(s) for +: 'dict' and 'dict'
</code></pre>
<p>How can i achieve the summation as i described above.</p>
<p><strong>NOTE</strong>: i have added <code>clicks</code> just for sample. nested dicts can have any no of keys,
another example to make it more clear:</p>
<pre><code>[
  {
    "25-34": {
      "Clicks": 10,
      "Visits": 1
    },
    "45-54": {
      "Clicks": 2,
      "Visits": 2
    },

  },
  {
    "25-34": {
      "Clicks": 20,
      "Visits": 3
    },
    "45-54": {
      "Clicks": 10,
      "Visits": 4
    },

  }   
]
</code></pre>
<p>output:</p>
<pre><code>{
    "25-34": {
      "Clicks": 30,
      "Visits": 4
    },
    "45-54": {
      "Clicks": 12,
      "Visits": 6
    },

  }  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From your edit, it sounds like you are just trying to sum the <em>values</em> of all the sub-dicts, by the parent dict:</p>
<pre><code>In [9]: counts = Counter()

In [10]: for dd in data:
    ...:     for k,v in dd.items():
    ...:         counts[k] += sum(v.values())
    ...:

In [11]: counts
Out[11]: Counter({'25-34': 30, '45-54': 12})
</code></pre>
<p>Fundamentally, this is an unwieldy data-structure.</p>
<p>OK, given your last update, I think the easiest thing would be to go with a <code>defaultdict</code> with a <code>Counter</code> factory:</p>
<pre><code>In [17]: from collections import Counter, defaultdict

In [18]: counts = defaultdict(Counter)

In [19]: for dd in data:
    ...:     for k, d in dd.items():
    ...:         counts[k].update(d)
    ...:

In [20]: counts
Out[20]:
defaultdict(collections.Counter,
            {'25-34': Counter({'Clicks': 30, 'Visits': 4}),
             '45-54': Counter({'Clicks': 12, 'Visits': 6})})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My variation without list comprehensions:</p>
<pre><code>def my_dict_sum(data):
"""
&gt;&gt;&gt; test_data = [{"25-34": {"Clicks": 10, "Visits": 1}, "45-54": {"Clicks": 2, "Visits": 2}, },{"25-34": {"Clicks": 20, "Visits": 3}, "45-54": {"Clicks": 10, "Visits": 4}, }]
&gt;&gt;&gt; my_dict_sum(test_data)
{'45-54': {'Clicks': 12, 'Visits': 6}, '25-34': {'Clicks': 30, 'Visits': 4}}
"""
result_key = data[0]
for x in data[1:]:
    for y in x:
        if y in result_key:
            for z in x[y]:
                if z in result_key[y]:
                    result_key[y][z] = result_key[y][z] + x[y][z]
return result_key
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> with default of <code>int</code>(which is 0):</p>
<pre><code>from collections import defaultdict
counter = defaultdict(int)

for current_dict in data:
    for key, value in current_dict.items():
        counter[key] += sum(value.values())
</code></pre>
<p>This is the most readable way to count the values in my opinion.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your first questions, here's a one-liner. It's not really pretty but it does use <code>Counter</code>:</p>
<pre><code>sum((Counter({k:v['Clicks'] for k,v in d.items()}) for d in data), Counter())
</code></pre>
<p>As an example :</p>
<pre><code>data = [
  {
    "25-34": {
      "Clicks": 10
    },
    "45-54": {
      "Clicks": 2
    },

  },
  {
    "25-34": {
      "Clicks": 20
    },
    "45-54": {
      "Clicks": 10
    },

  }   
]

from collections import Counter

c = sum((Counter({k:v['Clicks'] for k,v in d.items()}) for d in data), Counter())
print(c)
</code></pre>
<p>It outputs:</p>
<pre><code>Counter({'25-34': 30, '45-54': 12})
</code></pre>
</div>
<span class="comment-copy">Thanks, i have updated my question with another example. i need output like that</span>
<span class="comment-copy">Thanks a lot, it work great! :)</span>
<span class="comment-copy">Congrats, I also came up with <code>defaultdict(Counter)</code>, 2 minutes too late :-(</span>
<span class="comment-copy">thanks , i edited my question. nested dicts can have any no of keys</span>
<span class="comment-copy">i have added another example to make it clear</span>
<span class="comment-copy">v is not values ;)</span>
