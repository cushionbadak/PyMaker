<div class="post-text" itemprop="text">
<p>Is there any way to measure timestamp for outgoing packets sent via scapy? How to present those time stamps in normalized value such as timestamps in wireshark.</p>
<p>I can send a simple stream of packets via</p>
<pre><code>packet=IP(src="192.168.0.254", dst="192.168.0.2")/TCP(sport=35021, dport=35021)
pkt=sniff(filter="host 192.168.0.254")
</code></pre>
<p>While I am sniffing from another terminal,</p>
<pre><code>pkt=sniff(filter="host 192.168.0.254")
for p in pkt:
    print p[TCP].time
</code></pre>
<p>gives me following time values</p>
<pre><code>1505733059.335
1505733059.336
1505733059.336
1505733059.336
1505733059.337
1505733059.337
1505733059.338
1505733059.338
1505733059.338
1505733059.339
</code></pre>
<p>As far as I can say these are the values when packet was sent, right? How to change these values to normalized values such as in wireshark?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>time</code> attribute of a sniffed packed actually denotes the time the packet was received, rather than the time it was sent. In fact, even the time <em>Wireshark</em> associates with a sniffed packet is the time it was received, as <a href="https://wiki.wireshark.org/Timestamps" rel="nofollow noreferrer">detailed in the official wiki</a>.</p>
<p>There is no straight forward way of extracting the time a sniffed packet was sent. One can try measuring the network latency and extrapolating the send time based on that, but the accuracy of this approach is questionable. Another option is to extract the send time on the sending machine and transfer it somehow to the sniffing machine, either in-band if a controllable ad hoc protocol is in use or out-of-band otherwise, but both methods seem rather inelegant and are only feasible if the sending machine may be manipulated.</p>
<hr/>
<p>The values stored in the <code>time</code> attribute are equivalent to the return value of <a href="https://docs.python.org/3/library/time.html#time.time" rel="nofollow noreferrer">the <code>time.time()</code> function</a>, which is the time in seconds since the <a href="https://docs.python.org/3/library/time.html#epoch" rel="nofollow noreferrer">epoch</a>, i.e., the point where the time starts and is platform dependent.</p>
<p>These value may be converted into a more common time format (i.e. year, month, day, hour, etcâ€¦) in UTC by passing them to <a href="https://docs.python.org/3/library/time.html#time.gmtime" rel="nofollow noreferrer">the <code>time.gmtime()</code> function</a> or in local time by passing them to <a href="https://docs.python.org/3/library/time.html#time.localtime" rel="nofollow noreferrer">the <code>time.localtime()</code> function</a>. In both cases a <a href="https://docs.python.org/3/library/time.html#time.struct_time" rel="nofollow noreferrer"><code>struct_time</code> object</a> is returned, from which the components of the calendar date may be accessed as attributes. Passing on the returned <code>struct_time</code> object to <a href="https://docs.python.org/3/library/time.html#time.asctime" rel="nofollow noreferrer">the <code>time.asctime()</code> function</a> converts it to a human readable string format, though better control of the human readable output is possible via <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer">the <code>time.strftime()</code> function</a>.</p>
<pre><code>Python 3.4.3 (default, Nov 17 2016, 01:08:31) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.

&gt;&gt;&gt; import time
&gt;&gt;&gt;
&gt;&gt;&gt; timestamp = time.time()
&gt;&gt;&gt; print(timestamp)
1505806452.8678658
&gt;&gt;&gt;
&gt;&gt;&gt; local_time = time.localtime(timestamp)
&gt;&gt;&gt; print(local_time)
time.struct_time(tm_year=2017, tm_mon=9, tm_mday=19, tm_hour=10, tm_min=34, tm_sec=12, tm_wday=1, tm_yday=262, tm_isdst=1)
&gt;&gt;&gt;
&gt;&gt;&gt; human_time = time.asctime(local_time)
&gt;&gt;&gt; print(human_time)
Tue Sep 19 10:34:12 2017
&gt;&gt;&gt; 
&gt;&gt;&gt; my_human_time = time.strftime('%A, %d/%m/%y, %I:%M:%S %p', local_time)
&gt;&gt;&gt; print(my_human_time)
Tuesday, 19/09/17, 10:34:12 AM
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">This is a very broad and general question, the way you stated it. Have you searched for any tutorials? Have you written any code? Please show some effort.</span>
<span class="comment-copy">Description and code is added. I hope now you can have the complete idea. If anything else is necessary to answer the question then just let me know.</span>
