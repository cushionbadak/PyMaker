<div class="post-text" itemprop="text">
<p>I'm trying to strip the end of the strings in this column. I've seen how to rstrip a specific character, or a set number of characters at the end of a string, but how do you do it based on a pattern?</p>
<p>I'd like to remove the entire end of the strings in the <code>'team'</code> column at where we see a lowercase followed by an upper case. Then remove starting at the uppercase. I would like the below <code>'team'</code> column:</p>
<pre><code>   team                              pts/g
St. Louis RamsSt. Louis             32.875
Washington RedskinsWashington       27.6875
Minnesota VikingsMinnesota          24.9375
Indianapolis ColtsIndianapolis      26.4375
Oakland RaidersOakland              24.375
Carolina PanthersCarolina           26.3125
Jacksonville JaguarsJacksonville    24.75
Chicago BearsChicago                17.0
Green Bay PackersGreen Bay          22.3125
San Francisco 49ersSan Francisco    18.4375
Buffalo BillsBuffalo                20.0
</code></pre>
<p>to look like this:</p>
<pre><code>   team                              pts/g
St. Louis Rams                      32.875
Washington Redskins                 27.6875
Minnesota Vikings                   24.9375
Indianapolis Colts                  26.4375
Oakland Raiders                     24.375
Carolina Panthers                   26.3125
Jacksonville Jaguars                24.75
Chicago Bears                       17.0
Green Bay Packers                   22.3125
San Francisco 49ers                 18.4375
Buffalo Bills                       20.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub(pattern, repl, string)</code></a> for that.</p>
<p>Let's use this regular expression for matching:</p>
<pre><code>([a-z])[A-Z].*?(  )
</code></pre>
<p>It matches a lowercase character <code>([a-z])</code>, followed by an uppercase character <code>[A-Z]</code> and any character <code>.*?</code> until it hits two spaces <code>(  )</code>.
The lowercase character and the two spaces are in a group, so they can be re-inserted using <code>\1</code> for the first and <code>\2</code> for the second group when using <code>re.sub</code>:</p>
<pre><code>new_text = re.sub(r"([a-z])[A-Z].*?(  )", r"\1\2", text)
</code></pre>
<p>Output for your example:</p>
<pre><code>   team                              pts/g
St. Louis Rams             32.875
Washington Redskins       27.6875
Minnesota Vikings          24.9375
Indianapolis Colts      26.4375
Oakland Raiders              24.375
Carolina Panthers           26.3125
Jacksonville Jaguars    24.75
Chicago Bears                17.0
Green Bay Packers          22.3125
San Francisco 49ers    18.4375
Buffalo Bills                20.0
</code></pre>
<p>This messed the space-alignment up. Might not be relevant for you, but if you want to replace the wiped characters with space, you can pass a function instead of a replacement string to <code>re.sub</code>, which takes a <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer"><code>Match</code></a> object and returns a <code>str</code>:</p>
<pre><code>def replace_with_spaces(match):
    return match.group(1) + " "*len(match.group(2)) + match.group(3)
</code></pre>
<p>And then use it like this (notice how I put the to-be-replaced part into a regex-group too):</p>
<pre><code>new_text re.sub(r"([a-z])([A-Z].*?)(  )", replace_with_spaces, text)
</code></pre>
<p>This produces:</p>
<pre><code>   team                              pts/g
St. Louis Rams                      32.875
Washington Redskins                 27.687
Minnesota Vikings                   24.937
Indianapolis Colts                  26.437
Oakland Raiders                     24.375
Carolina Panthers                   26.312
Jacksonville Jaguars                24.75
Chicago Bears                       17.0
Green Bay Packers                   22.312
San Francisco 49ers                 18.437
Buffalo Bills                       20.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, I don't thing it's so easy : because of the spaces which may separate 2 words that should be removed.
I suggest, for your problem only, to remove the smallest ending that is also a begging.
hum... not very easy to explain.
Here is a little function and its test :</p>
<pre><code>def smart_rstrip ( s ):
    for i in xrange( 1,len( s )):
        if s.endswith( s[:i] ):
            return s[:-i]
    return s


s = ['St. Louis RamsSt. Louis', 'Washington RedskinsWashingt...]
print '\n'.join( s )
print '\n'.join( map( smart_rstrip,s ))
</code></pre>
<p>Try it, I thing you will get what you want...</p>
</div>
<span class="comment-copy">ya, alignment doesnt matter. But thanks for the eplaination too. It's very helpful in learning how it works.</span>
<span class="comment-copy">I expanded the answer to include a way to keep the alignment anyway</span>
