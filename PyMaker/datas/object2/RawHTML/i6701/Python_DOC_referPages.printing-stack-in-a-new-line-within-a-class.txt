<div class="post-text" itemprop="text">
<p>I have a linked stack class and I'm having the problem of printing the elements in the stack, with each element in a new line. The <strong>str</strong> function in the linked stack class is printing every element in a new line which is what i wanted but it even prints an extra new line at the end.</p>
<pre><code>class Node:
    def __init__(self,item,the_next = None):
        self.item = item
        self.next = the_next

    def __str__(self):
        return str(self.item)

class LinkedStack:
    def __init__(self):
        self.top = None
        self.count = 0

    def __len__(self):
        return self.count

    def is_empty(self):
        return self.count == 0

    def isFull(self):
        return False

    def reset(self):
        self.top = None
        self.count = 0

    def __str__(self):      #im having the issue here whereby it prints a newline even after printing the last element
        current = self.top
        ans = ""
        while not (current is None):
            ans += str(current)
            ans += '\n'
            current = current.next
        return ans

if __name__ == "__main__":
    L = LinkedStack()
    L.push(1)
    L.push(2)
    L.push(3)
    print(L)
</code></pre>
<p>The output i get is:</p>
<pre><code>3
2
1
#an extra newline printed here which is not wanted
</code></pre>
<p>I'm looking for a way to improvise the <strong>str</strong> function in the Linked Stack class in order to get rid of the redundant new line at the end. Any help is much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not simply trim the return value of <code>__str__</code> like so <code>return ans[:-1]</code> ? Since you always append a new line after adding an element to the string.</p>
<p>On a side note, it could be nicer to write your function like so:</p>
<pre><code>def __str__(self):
    strs = []
    cur = self.top
    while cur is not None:
        strs = [str(cur)] + strs
        cur = cur.next
    return '\n'.join(strs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could move the addition of the newline until after you get the next item, and check it is not None before you then append it.</p>
<p>A further optimisation then is to move the break condition to that point:</p>
<pre><code>while True:
    ans += str(current)
    current = current.next
    if current is None:
        break
    ans += '\n'
</code></pre>
</div>
<span class="comment-copy">As long as <code>current</code> is not <code>None</code>, the value of <code>current</code> is added to <code>ans</code>, together with the end-of-line character <code>\n</code>. If you want to avoid that let your condition <code>break</code> when the end is reached.</span>
<span class="comment-copy">Or use <code>str.strip()</code>.?</span>
<span class="comment-copy">Instead of <code>strs = [str(cur)] + strs</code>; you could use a deque for the container and add the strings with <a href="https://docs.python.org/3/library/collections.html#collections.deque.appendleft" rel="nofollow noreferrer"><code>deque.appendleft()</code></a></span>
