<div class="post-text" itemprop="text">
<p>I am learning python and doing an exercise about classes. It tells me to add nd attribute to my class and a method to my class. I always thought these were the same thing until I read the exercise. What is the difference between the two?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Terminology</h2>
<p>Mental model:</p>
<ul>
<li>A <em>variable</em> stored in an instance or class is called an <a href="https://docs.python.org/3/glossary.html#term-attribute" rel="nofollow noreferrer"><em>attribute</em></a>.</li>
<li>A <em>function</em> stored in an instance or class is called a <a href="https://docs.python.org/3/glossary.html#term-method" rel="nofollow noreferrer"><em>method</em></a>.</li>
</ul>
<p>According to Python's glossary:</p>
<blockquote>
<p><strong>attribute</strong>: A value associated with an object which is referenced by
  name using dotted expressions. For example, if an object o has an
  attribute a it would be referenced as o.a</p>
<p><strong>method:</strong> A function which is defined inside a class body. If called as
  an attribute of an instance of that class, the method will get the
  instance object as its first argument (which is usually called self).
  See function and nested scope.</p>
</blockquote>
<h2>Examples</h2>
<p>Terminology applied to actual code:</p>
<pre><code>a = 10                          # variable

def f(b):                       # function  
    return b ** 2

class C:

    c = 20                      # class attribute

    def __init__(self, d):      # "dunder" method
        self.d = d              # instance attribute

    def show(self):             # method
        print(self.c, self.d) 

e = C(30)
e.g = 40                        # another instance variable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A method is an attribute, but not all attributes are methods. For example, if we have the class</p>
<pre><code>class MyClass(object):

    class_name = 'My Class'

    def my_method(self):
        print('Hello World!')
</code></pre>
<p>This class has two attributes, <code>class_name</code> and <code>my_method</code>. But only <code>my_method</code> is a method. Methods are functions that belong to your object. There are additional hidden attributes present on all classes, but this is what your exercise is likely talking about.</p>
</div>
<div class="post-text" itemprop="text">
<p>A method is a function defined in the class. An attribute is an instance variable defined in the class. </p>
<p>Example:</p>
<pre><code>class Example(object):
    def __init__(self, name):
        self.name = name
    def hello(self):
        print 'Hi, I am ' + self.name
</code></pre>
<p>Here <code>hello</code> is a method, and <code>name</code> is an attribute. </p>
</div>
<span class="comment-copy">For a class <code>Foo</code>, you call an attribute (a class variable) as <code>Foo().bar</code>.   You call a method (a class function) as  <code>Foo().baz()</code>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/17000450/difference-between-calling-a-method-and-accessing-an-attribute">Difference between calling a method and accessing an attribute</a></span>
<span class="comment-copy">Minor fix: <code>d = C()</code> and <code>d.e = 30</code> should be un-indented.</span>
<span class="comment-copy">Did you just create and set an attribute by doing <code>e.g = 40</code> outside of the class definition? I see no attribute of class C, defined in the class definition. Is this typical/recommended?</span>
<span class="comment-copy">I think the really interesting distinction to clarify would be a method vs an attribute that happens to be a function.</span>
<span class="comment-copy">Nitpick: <i>methods belong to the class</i>.</span>
<span class="comment-copy">I'd rather not get into the weeds on something like that. For example, <code>[].sort is [].sort</code> evaluates to <code>False</code> because there is a method object for each instance.</span>
<span class="comment-copy">... generally. At least, <code>my_method</code> does. You can dynamically add methods to an instance, though.</span>
<span class="comment-copy">Sure, I did say nitpick :). But, then again, <code>x = []; x.sort is x.sort</code> <i>also evaluates to <code>False</code>.</i> Because, again, the method doesn't <i>belong</i> to the instance. It is dynamically bound to the instance <i>on each method call</i>. Rather, a new method-object is created each time you call a method! There is a method object <b>for each time you access a method</b> using <code>my_instance.my_method</code>. So, of course, <code>s = x.sort; s is s</code> evaluates to <code>True</code></span>
