<div class="post-text" itemprop="text">
<p>I'm undertaking a problem from Project Euler (#188) and I've run into a wall. The problem's specification is as follows:</p>
<p><a href="https://i.stack.imgur.com/ye3Cg.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ye3Cg.png"/></a>
My solution in python is as follows:</p>
<pre><code>Q = input()
List1 = []
List2 = []
Answers = []
for i in range(int(Q)):
    List1.append(input())
    List2.append(List1[i].split(" "))
    for j in range(int(List2[i][1])):
        List2[i][0] = int(List2[i][0]) ** int(List2[i][0])
    Answers.append(int(List2[i][0]) % int(List2[i][2]))
for k in range(len(Answers)):
    print(Answers[k])
</code></pre>
<p>It works perfectly for smaller inputs, but once exponentiation gets very large, the program works for such a long time, that I get a timeout error. Is there any way around the obvious inefficiency of python 3's exponentiation, or am I perhaps doing something else wrong? Any help is appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>The numbers involved are just too large. You are trying to brute force the problem, which won't work - some numbers involved may actually take up terabytes of space - or even so much memory that it wouldn't fit in the observable universe. Python can't help you; there is some answer involving smarter math. Try out printing some exponentiation results - for example, the powers of three. Look at the remainders. There will probably be some repetition or pattern. Follow and generalise that.</p>
</div>
<span class="comment-copy">Use the second argument to <code>pow</code>: <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#pow</a></span>
<span class="comment-copy">It isn't <i>python</i> inefficiency but algorithmic inefficiency.</span>
<span class="comment-copy">I'm pretty sure using the built in expmod defeats the point and spirit of the problem. It'd be like asking you to implement a square root approximation and you just used <code>sqrt</code>. If you're doing this for a grade, you likely won't get a lot of credit.</span>
<span class="comment-copy">It might not be enough anyway, noticing now that thereâ€™s still a loop with up to 10^18 iterations.</span>
<span class="comment-copy">You should re-consider your algorithm. This is a <i>math problem</i>. The point of Project Euler is thinking of something <i>other than a brute force solution</i></span>
<span class="comment-copy">Oops, I didn't notice the age of the question. Keeping it here for future askers.</span>
