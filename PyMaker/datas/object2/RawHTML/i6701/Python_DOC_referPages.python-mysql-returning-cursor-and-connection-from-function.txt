<div class="post-text" itemprop="text">
<p>Previously I've always used something like...</p>
<pre><code>def getConn():
    cnx = mysql.connector.connect(user='user', password='pass',
                                      host='hostIP',
                                      database='database')
    cur = cnx.cursor(buffered=True)
    return [cnx, cur]
</code></pre>
<p>To return cnx and cur objects for use. That works fine.</p>
<p>I now need to use an SSH connection to a DB.</p>
<p>The example below executes the query within the function, but won't return the cnx or cur objects for use afterwards, so I get a print of the result, followed by the error</p>
<blockquote>
<p>mysql.connector.errors.InterfaceError: 2013: Lost connection to MySQL server during query</p>
</blockquote>
<p>I appear to be having the same issue (although a different error returned) to <a href="https://stackoverflow.com/questions/16514431/why-wont-python-return-my-mysql-connector-cursor-from-a-function">Why won't Python return my mysql-connector cursor from a function?</a></p>
<p>That question deals with why - I'd like to know if there is a solution.</p>
<pre><code>def returnConnect():
    mypkey = paramiko.RSAKey.from_private_key_file('/Users/me/.ssh/id_rsa')
    sql_hostname = '127.0.0.1'

    with SSHTunnelForwarder(
        (ssh_host, ssh_port),
        ssh_username=ssh_user,
        ssh_pkey=mypkey,
        remote_bind_address=(sql_hostname, sql_port)) as tunnel:

        cnx = mysql.connector.connect(host='127.0.0.1', user=sql_username,
                passwd=sql_password, db=sql_main_database,
                port=tunnel.local_bind_port)
        cur = cnx.cursor(buffered=True)

        sql = "select * from table"
        cur.execute(sql)
        result = cur.fetchall()
        print result
        return [cnx, cur]

conn =  returnConnect()
cnx = conn[0]
cur = conn[1]
sql = "select * from table"
cur.execute(sql)
result = cur.fetchall()
cnx.close()
print result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python calls special method <code>__exit__</code> after <code>with..as</code> execution, so your connection closes after returning from the context of <code>with</code>. Assign the tunnel forvarder to a variable like follow and you`ll be able to use the connection outside the function scope</p>
<pre><code>tunnel = SSHTunnelForwarder(
        (ssh_host, ssh_port),
        ssh_username=ssh_user,
        ssh_pkey=mypkey,
        remote_bind_address=(sql_hostname, sql_port))
</code></pre>
<p>Read more about compound <code>with</code> statement <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">in the docs</a>.</p>
</div>
<span class="comment-copy">Yes - that works great. Will read up on <code>with</code> and also good practise regarding opening and closing the SSH tunnel.</span>
