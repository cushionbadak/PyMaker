<div class="post-text" itemprop="text">
<p>I have sliced the pandas dataframe.</p>
<pre><code>end_date = df[-1:]['end'] 

type(end_date) 
Out[4]: pandas.core.series.Series 

end_date 
Out[3]: 
48173   2017-09-20 04:47:59 
Name: end, dtype: datetime64[ns] 
</code></pre>
<ol>
<li>How to get rid of end_date's index value <code>48173</code> and get only <code>2017-09-20 04:47:59</code> string? I have to call REST API with <code>2017-09-20 04:47:59</code> as a parameter, so I have to get string from pandas <code>datetime64</code> series. </li>
<li>How to get rid of end_date's index value <code>48173</code> and get only datetime object [something like <code>datetime.datetime.strptime('2017-09-20 04:47:59', '%Y-%m-%d %H:%M:%S')</code>]. I need it because, later I will have to check if <code>'2017-09-20 04:47:59' &lt; datetime.datetime(2017,1,9)</code> </li>
</ol>
<p>I need to convert just a single cell value, not a whole column.
How to do these conversions?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems you need:</p>
<pre><code>import pandas as pd
data = ['2017-09-20 04:47:59','2017-10-20 04:47:59','2017-09-30 04:47:59']
df = pd.DataFrame(data,columns=['end'])
df['end'] = pd.to_datetime(df['end'])
df
</code></pre>
<p><code>df</code> will be:</p>
<pre><code>    end
0   2017-09-20 04:47:59
1   2017-10-20 04:47:59
2   2017-09-30 04:47:59
</code></pre>
<p>After that you can use below code to get rid of index and use as 'Timestamp' object:</p>
<pre><code>end_date = df['end'].iloc[-1] #get last row of column end
print(type(end_date)) # pandas.tslib.Timestamp
end_date_str = end_date.strftime('%Y-%m-%d %H:%M:%S') #convert to str
print(end_date_str) # '2017-09-30 04:47:59'
print(end_date &lt; datetime.datetime(2017,1,9)) #False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply cast the result to a string, and recover it using <code>.values[0]</code>:</p>
<pre><code>In [38]: end_date
Out[38]:
48173   2017-09-20 04:47:59
Name: end, dtype: datetime64[ns]

In [39]: end_date.astype(str).values[0]
Out[39]: '2017-09-20 04:47:59'
</code></pre>
<p>If you want a datetime object, you have to convert it to a timestamp, and then back to a <code>datetime</code> object:</p>
<pre><code>In [42]: end_date.values[0].item()
Out[42]: 1505882879000000000

In [43]: datetime.fromtimestamp(end_date.values[0].item()/10**9)
Out[43]: datetime.datetime(2017, 9, 20, 6, 47, 59)
</code></pre>
<p>Otherwise, you can <code>strptime</code> the string recovered in step 1:</p>
<pre><code>In [48]: datetime.datetime.strptime(end_date.astype(str).values[0], '%Y-%m-%d %H:%M:%S')
Out[48]: datetime.datetime(2017, 9, 20, 4, 47, 59)
</code></pre>
<p>You may wonder why there is a <strong>2 hours difference</strong> between the results. This is because the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.fromtimestamp</code></a> takes my timezone into account (currently CEST, which is UTC+2).
On the other hand, parsing a string to a <code>datetime</code> object doesn't yield any timezone information, <code>srtptime</code> naively parses the timestamp without regards for the timezone, which leads to a 2 hours discrepancy.</p>
</div>
<span class="comment-copy">Please separate your code from the execution in the interpreter, as it is unclear.</span>
<span class="comment-copy"><code>df[-1:]['a'].item()</code> or <code>df[-1:]['a'].values[0]</code>?</span>
<span class="comment-copy">This works. Thanks.</span>
<span class="comment-copy">I am confused.   <code>import pandas as pd   df = pd.DataFrame(pd.date_range('2017-01-01', periods=5, freq='T'), columns=['end'])    df[-1:]['end']   4   2017-01-01 00:04:00   Name: end, dtype: datetime64[ns]    df['end'].iloc[-1]   Timestamp('2017-01-01 00:04:00')</code>     The line before last line returns index and datetime64 but last line returns Timestamp.</span>
<span class="comment-copy">It works. Thanks.</span>
<span class="comment-copy">@user3225309 glad it helps, if it is the right solution, please mark as an accept answer :)</span>
<span class="comment-copy">end_date.astype(str).values[0] works. Thanks. But np.datetime64(datetime.datetime.utcnow()).astype(datetime) Traceback (most recent call last):   File "C:\Users\...\AppData\Local\Programs\Python\Python35\lib\site-packages\IPython\core\interactiveshell.py", line 2881, in run_code     exec(code_obj, self.user_global_ns, self.user_ns)   File "&lt;ipython-input-25-e8410bf10501&gt;", line 1, in &lt;module&gt;     np.datetime64(datetime.datetime.utcnow()).astype(datetime) TypeError: data type not understood</span>
<span class="comment-copy">datetime.datetime.strptime(end_date.astype(str).values[0], '%Y-%m-%d %H:%M:%S') works as well.</span>
<span class="comment-copy">@user3225309 what are you trying to achieve in your first comment ? Convert directly to datetime ? You can't cast directly through pandas, abd have to refer to the answer I linked. Moreover, if it solves your problem, feel free to "accept the answer"</span>
<span class="comment-copy">On link you have provided I found the following: np.datetime64(datetime.datetime.utcnow()).astype(datetime)  which doesn't work in my case.</span>
<span class="comment-copy">@user3225309 sorry, I didn't notice you were using a <code>datetime64[ns]</code> and not a <code>datetime64</code>. I updated my answer to match that.</span>
