<div class="post-text" itemprop="text">
<p>I am writing a TCP python script, and I need the first 4 bytes to be the size of the file.</p>
<p>I got the size of the file by doing </p>
<pre><code>SIZE_OF_FILE = os.path.getsize(infile.name)
</code></pre>
<p>The size is 392399 bytes.</p>
<p>When I do</p>
<pre><code>s.send(str(SIZE_OF_FILE).encode("utf-8"))
</code></pre>
<p>it sends the file, and then on my server I have</p>
<pre><code>fileSize = conn.recv(4).decode('utf-8')
</code></pre>
<p>This should read the first 4 bytes, and extract the file size information, but it returns 3923 instead of the 392399.</p>
<p>as the file size... what happened? "392399" should be able to fit into 4 bytes.</p>
<p>We are suppose to be using big endian.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>str(SIZE_OF_FILE)</code> typesets the number using decimal notation - that is, you get the string <code>"392399"</code>, which is 6 characters (and 6 bytes in UTF-8). If you send only the first 4, you are sending <code>"3923"</code>.</p>
<p>What you probably want to do is use something like <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow noreferrer"><code>struct.pack</code></a> to create a bytestring containing the binary representation of the number.</p>
<pre><code>s.send(struct.pack(format_string, SIZE_OF_FILE))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are sending the size as a string (<code>"392399"</code>), which is 6 ASCII characters and therefore 6 bytes. You want to send it as a raw integer; use <a href="https://docs.python.org/2/library/struct.html" rel="nofollow noreferrer"><code>struct.pack</code></a> to do that:</p>
<pre><code>s.send(struct.pack("&gt;i", SIZE_OF_FILE))
</code></pre>
<p>To recieve:</p>
<pre><code>fileSize = struct.unpack("&gt;i", conn.recv(4))[0]
</code></pre>
<p>The <code>&gt;</code> makes it big-endian. To make it little-endian, use <code>&lt;</code> instead. <code>i</code> is the type; in this case, a 4-byte integer. The linked documentation has a list of types, in case you want to use another one.</p>
</div>
<span class="comment-copy">yeah, but not <i>as string</i>... check <code>struct.pack</code> and <code>struct.unpack</code> functions.</span>
<span class="comment-copy"><i>"392399" should be able to fit into 4 bytes.</i> - why would it?  "392399" consists pf six characters, one character requires <i>at least</i> one byte.</span>
<span class="comment-copy">OH wait, if I send it as an integer will that work? how do I do that if encode requires a string?</span>
<span class="comment-copy">And as a side node for the receiving side: recv(4) won't necessarily return 4 bytes. Always read from sockets in a loop.</span>
<span class="comment-copy">@David Z what is format_string it says it is not defined.</span>
<span class="comment-copy">@user5428151 Indeed, I haven't defined it. You should be able to determine what <code>format_string</code> should be by reading the documentation. (I was hoping that would be clear from context.)</span>
