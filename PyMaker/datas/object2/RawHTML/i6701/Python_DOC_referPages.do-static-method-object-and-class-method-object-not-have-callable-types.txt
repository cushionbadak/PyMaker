<div class="post-text" itemprop="text">
<p>In <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python Language Reference, Chapter 3 Datamodel</a>, 
why is "instance method" listed under "callable types", while "static method object" and "class method object" are listed under "internal types"?</p>
<blockquote>
<p><strong>Callable types</strong> These are the types to which the function call operation (see section Calls) can be applied
  ...</p>
<p>Instance methods
  ...</p>
<p><strong>Internal types</strong> A few types used internally by the interpreter are exposed to the user. Their deÔ¨Ånitions may change
  with future versions of the interpreter, but they are mentioned here for completeness.
  ...</p>
<p>Static method objects
  ...</p>
<p>Class method objects
  ...</p>
</blockquote>
<p>Shouldn't static and class method objects also be callable types?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>staticmethod</code>'s and <code>classmethod</code>s are not callable, <a href="https://bugs.python.org/issue20309" rel="nofollow noreferrer">no rationale to do so was found</a>. </p>
<pre><code>&gt;&gt;&gt; def foo():
...     print("hello") 
&gt;&gt;&gt; s = staticmethod(foo)
&gt;&gt;&gt; s()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'staticmethod' object is not callable
</code></pre>
<p>They are meant to be invoked via the descriptor protocol and (usually) <em>return</em> a callable:</p>
<pre><code>&gt;&gt;&gt; s.__get__(foo)()
hello
</code></pre>
<p>this isn't the most common form, though. Usually a descriptor is invoked automatically upon attribute access, <a href="https://docs.python.org/3.6/howto/descriptor.html#invoking-descriptors" rel="nofollow noreferrer">as the descriptor how-to states</a>:</p>
<blockquote>
<p>A descriptor can be called directly by its method name. For example, <code>d.__get__(obj)</code>.</p>
<p>Alternatively, it is more common for a descriptor to be invoked automatically upon attribute access. For example, <code>obj.d</code> looks up <code>d</code> in the dictionary of <code>obj</code>. If <code>d</code> defines the method <code>__get__()</code>, then <code>d.__get__(obj)</code> is invoked according to the precedence rules listed below.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <code>staticmethod</code> objects are not callable:</p>
<pre><code>Python 3.5.3 (default, Jan 19 2017, 14:11:04) 
[GCC 6.3.0 20170118] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; staticmethod(lambda x: print(x))
&lt;staticmethod object at 0x7f8499f1ebe0&gt;
&gt;&gt;&gt; meth = staticmethod(lambda: print('static method called'))
&gt;&gt;&gt; meth()
Traceback (most recent call last):
</code></pre>
<p>However they implement the <em>descriptor</em> protocol method <code>__get__</code>. The <code>__get__</code> method then returns an actual callable object.</p>
<pre><code>File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'staticmethod' object is not callable
&gt;&gt;&gt; meth.__get__(object, object())()
static method called
</code></pre>
<p>When you store the <code>staticmethod</code> object into a <em>class</em> attribute, and then look it up, the <code>__get__</code> method is called implicitly.</p>
</div>
<span class="comment-copy">Thanks. Are ordinary methods of a class (i.e. methods of a class which are neither static or class methods) callable?</span>
<span class="comment-copy">In what cases are static and class methods not used as attributes of a class?</span>
<span class="comment-copy">Yes @Tim, they are. Functions are descriptors who's <code>__get__</code> method returns the method, when used in classes and an attribute look-up is performed the <code>function.__get__</code> is invoked and returns the method. So, both function and methods are callable. I haven't seen any cases where <code>static/class</code> methods are used outside classes, I just used that example because it is shorter :-)</span>
<span class="comment-copy">"Functions are descriptors" do you mean a function defined with <code>def</code> outside any class is a descriptor? e.g. <code>foo</code> in your example.</span>
<span class="comment-copy">@Tim A descriptor is <i>any</i> object that defines <code>__get__</code> (and possibly <code>__set__</code>). The only time <code>__get__</code> is invoked automatically is when the descriptor is the result of an attribute lookup (<code>MyClass.foo</code> or <code>MyClass().foo</code>).</span>
<span class="comment-copy">Relevant quote from the docs: <i>"Static method objects are not themselves callable, although the objects they wrap usually are."</i></span>
