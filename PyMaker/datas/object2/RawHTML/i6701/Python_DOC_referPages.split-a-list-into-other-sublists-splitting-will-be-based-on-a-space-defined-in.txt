<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6164313/make-python-sublists-from-a-list-using-a-separator">Make Python Sublists from a list using a Separator</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Let say I have this list:</p>
<pre><code>list1 = ["I", "am", "happy", " ", "and", "fine", " ", "and", "good"]
</code></pre>
<p>I want to end up with:</p>
<pre><code>sublist1 = ["I", "am", "happy"]
sublist2 = ["and", "fine"]
sublist3 = ["and", "good"]
</code></pre>
<p>So, I want to split the list into sub-lists based on the space that in there in <code>list1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.groupby</code> is the perfect weapon for this, using the <code>str.isspace</code> property to separate the groups, and filtering out the groups with space.</p>
<pre><code>import itertools

list1 = ["I", "am", "happy", " ", "and", "fine", " ", "and", "good"]

result = [list(v) for k,v in itertools.groupby(list1,key=str.isspace) if not k]


print(result)
</code></pre>
<p>result:</p>
<pre><code>[['I', 'am', 'happy'], ['and', 'fine'], ['and', 'good']]
</code></pre>
<p>if you know there are 3 variables (which is not very wise) you could unpack</p>
<pre><code>sublist1,sublist2,sublist3 = result
</code></pre>
<p>but it's better to keep the result as a list of lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this using a <em>for</em> loop, putting the resulting sublists in a dictionary (as opposed to creating variables on the fly):</p>
<pre><code>lst = ["I", "am", "happy", " ", "and", "fine", " ", "and", "good"]

count = 1
dct = {}
for x in lst:
    if x.isspace():
        count += 1
        continue
    dct.setdefault('sublist{}'.format(count), []).append(x)

print(dct)
# {'sublist2': ['and', 'fine'], 
#  'sublist3': ['and', 'good'], 
#  'sublist1': ['I', 'am', 'happy']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you can use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> module to group items according the fact they are space or not.</p>
<p>For instance, you can use <code>str.ispace</code> function as a predicate to group the items:</p>
<pre><code>list1 = ["I", "am", "happy", " ", "and", "fine", " ", "and", "good"]

for key, group in itertools.groupby(list1, key=str.isspace):
    print(key, list(group))
</code></pre>
<p>You get:</p>
<pre><code>False ['I', 'am', 'happy']
True [' ']
False ['and', 'fine']
True [' ']
False ['and', 'good']
</code></pre>
<p>Based on that, you can construct a list by excluding the groups which key is <code>True</code> (<code>isspace</code> returned <code>True</code>):</p>
<pre><code>result = [list(group)
          for key, group in itertools.groupby(list1, key=str.isspace)
          if not key]
print(result)
</code></pre>
<p>You get this list of lists:</p>
<pre><code>[['I', 'am', 'happy'], ['and', 'fine'], ['and', 'good']]
</code></pre>
<p>If you are not familiar with comprehension lists, you can use a loop:</p>
<pre><code>result = []
for key, group in itertools.groupby(list1, key=str.isspace):
    if not key:
        result.append(list(group))
</code></pre>
<p>You can unpack this result to 3 variables:</p>
<pre><code>sublist1, sublist2, sublist3 = result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is there something relevant to str.isspace but for the new line, i.e.
  instead of the space on the list it will be "\n"?</p>
</blockquote>
<p><code>str.join</code> + <code>re.split()</code> solution on extended example:</p>
<pre><code>import re
list1 = ["I", "am", "happy", " ", "and", "fine", "\n", "and", "good"]
result = [i.split(',') for i in re.split(r',?\s+,?', ','.join(list1))]

print(result)
</code></pre>
<p>The output:</p>
<pre><code>[['I', 'am', 'happy'], ['and', 'fine'], ['and', 'good']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun. If you know that the words don't have any space, you can pick a special character (e.g. '&amp;') to join and split your strings:</p>
<pre><code>&gt;&gt;&gt; l = ["I", "am", "happy", " ", "and", "fine", " ", "and", "good"]
&gt;&gt;&gt; '&amp;'.join(l)
'I&amp;am&amp;happy&amp; &amp;and&amp;fine&amp; &amp;and&amp;good'
&gt;&gt;&gt; '&amp;'.join(l).split(' ')
['I&amp;am&amp;happy&amp;', '&amp;and&amp;fine&amp;', '&amp;and&amp;good']
&gt;&gt;&gt; [[w for w in s.split('&amp;') if w] for s in '&amp;'.join(l).split(' ')]
[['I', 'am', 'happy'], ['and', 'fine'], ['and', 'good']]
</code></pre>
<p>If you want the most reliable solution, pick the <code>groupby</code> one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple answer to your problem:</p>
<pre><code>list1 = ["I", "am", "happy", " ", "and", "fine", " ", "and", "good"]

new_list = []

final_list = []

list1.append(" ") # append an empty str at the end to avoid the other condn

for line in list1:

    if (line != " "):
        new_list.append(line)      # add the element to each of your chunk   
    else: 
        final_list.append(new_list)   # append chunk
        new_list = []       # reset chunk


sublist1,sublist2, sublist3  = final_list

print sublist1,sublist2, sublist3
</code></pre>
</div>
<span class="comment-copy">Will there always be exactly 2 spaces in the list? If no, do you want to dynamically create the variables <code>sublist4</code>, <code>sublist5</code>, etc? (Please don't.) Also, have you tried to solve this problem on your own? It basically comes down to a loop, an <code>if</code> and an <code>append</code> call.</span>
<span class="comment-copy">There is certainly something to pick form <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> moduleâ€¦</span>
<span class="comment-copy">No, it is not exactly 2 spaces, as a matter of fact it something exactly like:['Kai', 'Boulder', 'Broadway', '  ', 'john', '  ', 'kabel', '  ', 'Cynthia', 'Creative', '  ', 'doc','dee','missy','great', '  ','mimmy','  ')</span>
<span class="comment-copy">@Dee.A are you getting the original list from attempting to tokenize text from somewhere? If so - it looks like you should probably address it there rather than post-process it...</span>
<span class="comment-copy">@JonClements: No it is not the case. It is apart of a project assignment</span>
<span class="comment-copy">It is very useful, is there something relevant to    str.isspace but for the new line, i.e. instead of the space on the list it will be "\n"?</span>
<span class="comment-copy">@Dee.A <code>str.isspace</code> considers <code>\n</code> to be true. Or are you saying that the grouping should be by an explicit newline character only and not strings that are all space?</span>
<span class="comment-copy">@JonClements first of all thank you,  you are very helpful, second, what I mean, the list will be something like: ['Kai', 'Boulder', 'Broadway', '\n ', 'john', ' \n', 'kabel', ' \n', 'Cynthia', 'Creative', '\n ', 'doc','dee','missy','great', ' \n','mimmy','\n '] So instead of the space, it willbe new line \n</span>
<span class="comment-copy">@Dee.A in that case you're better off using <code>''.join(your_list).splitlines()</code>... but using the groupby you'd change <code>key=str.isspace</code> to <code>key=lambda L: L == '\n'</code> but the code provided in this answer will work with newlines just fine... you only need to change it if you want strings consisting only of spaces to be valid within each group and that each group is delimited by exactly a newline character itself.</span>
<span class="comment-copy">it is very good, but what if the space turned to new line "\n", I have tried to search about defined syntax like isspace but I did not find something like that.</span>
<span class="comment-copy">@Dee.A <code>\n</code> is whitespace. It is also captured by <code>str.isspace</code>. If you want to capture a new line explicitly, you can do <code>if x == '\n': ...</code></span>
