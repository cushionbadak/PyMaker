<div class="post-text" itemprop="text">
<p>Is it possible to read values from a file with an iterator, so that the file is automatically closed at the end of the iteration?</p>
<p>Creating such an iterator using the <code>with</code> statement doesn't seem to work.</p>
<pre><code>with open('/dev/zero', 'rb') as f:                                              
    values = iter(f.read(1) for i in (1, 2, 3))                                 

values.next()             #ValueError: I/O operation on closed file                                        
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use <code>with</code> you need to do:</p>
<pre><code>def file_generator(filename):
    with open(filename,'rb') as file:
        for i in (1, 2, 3):
            yield file.read(1)

values = file_generator('/dev/zero')
next(values)
</code></pre>
<p>However if you don't reach the end of this iterator, you will never close the file, so in essence it's not very different from:</p>
<pre><code>file = open(filename,'rb')
next(file)
file.close()
</code></pre>
<p>When processing a file it's best to go through it all at once if you can, and then close it once you are done using it. Keeping a handle on an open file is usually not a reliable solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">fileinput</a> module does that for you. Opening and closing files is handled automatically.</p>
<pre><code>import fileinput

files = ['path to file']

iterator = fileinput.input(files)

for line in iterator:
    print(line)
</code></pre>
<p>You can give a list of multiple file paths to the <code>input</code> method and it will iterate over their lines like it was reading a single file.</p>
</div>
<span class="comment-copy">You'll need to create a wrapper class, implement <code>__iter__</code> and <code>__next__</code>, and call <code>f.__exit__()</code> when you raise a <code>StopIteration</code>.</span>
<span class="comment-copy">What you try to do isn't advisable because if you forget to iterate to the end or an exception happens you'll leak a file handle.All operations on a file should be done inside the <code>with</code>!</span>
<span class="comment-copy">Don't do that in production code. This can easily leak a file handle when the generator isn't exhausted or the generator isn't deleted if an exception happened. (Almost all the good points of <code>with</code> are negated if you use <code>yield</code> inside the context).</span>
<span class="comment-copy">@MSeifert I agree yes. However OP wants to have an iterator on a file, so either you keep the file open between two calls to next, or you close it and re-open it every time, but I don't see any satisfying solution. All in all, most of the time it's best to process the file all at once and then close it or implement a special handle for custom usage.</span>
<span class="comment-copy">@MSeifert as long as you make sure <code>.close()</code> is called there should be no leaks, right?</span>
<span class="comment-copy">Yeah, but the <code>with</code> is essentially useless then - because if you need to make sure you call <code>.close()</code> yourself, then what's the point of using <code>with</code>?</span>
<span class="comment-copy">Thanks. I think the standard <code>file</code> object already allows you to iterate over lines. The problem is when you want to iterate over bits of data that aren't lines or that are not sequential.</span>
