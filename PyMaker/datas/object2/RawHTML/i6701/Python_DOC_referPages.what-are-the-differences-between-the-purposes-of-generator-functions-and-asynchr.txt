<div class="post-text" itemprop="text">
<p>In Python, asynchronous generator functions are coroutines, and generator functions are also coroutines.</p>
<p>What are the differences between the purposes of generator functions and asynchronous generator functions?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The purpose of <a href="https://www.python.org/dev/peps/pep-0525/" rel="nofollow noreferrer">PEP 525 -- Asynchronous Generators</a> is pretty much similar to <a href="https://www.python.org/dev/peps/pep-0255/" rel="nofollow noreferrer">PEP 255 -- Simple Generators</a>  which introduced generators. It is mainly intented to make things <em>easier</em> to implement, only in a different domain (asynchronous one). From PEP 525:</p>
<blockquote>
<p>Essentially, the goals and rationale for PEP 255, applied to the asynchronous execution case, hold true for this proposal as well.</p>
</blockquote>
<p>In short, it makes writing objects that support the <a href="https://docs.python.org/3/reference/datamodel.html#asynchronous-iterators" rel="nofollow noreferrer">asynchronous iteration protocol</a> easy. As <em>generators</em> did for the <em>iterator protocol</em>.</p>
<p>Instead of having to define objects that implement <code>__aiter__</code> and <code>__anext__</code> you create an asynchronous generator that does this seemingly by magic. This mirrors what generators did for the iterator protocol; instead of implementing <code>__iter__</code> and <code>__next__</code> for an object, you can just create a generator. </p>
<p>This is nicely stated in the rational of PEP 525 which also includes a nice example that shows the savings you make in code written when you use async generators.</p>
<p>In addition to code length savings, async generators also perform much better: </p>
<blockquote>
<p>Performance is an additional point for this proposal: in our testing of the reference implementation, asynchronous generators are 2x faster than an equivalent implemented as an asynchronous iterator.</p>
</blockquote>
<hr/>
<p>Just to add some terminology here because it's getting difficult to keep track of terms sometimes:</p>
<ul>
<li>Generators: <code>def</code> functions that contain one or more <code>yield</code> expressions.</li>
<li>Generator-based coroutine: A generator (<code>def</code> + <code>yield</code>) that is wrapped by <a href="https://docs.python.org/3/library/types.html#types.coroutine" rel="nofollow noreferrer"><code>types.coroutine</code></a>. You need to wrap it in <code>types.coroutine</code> if you need it to be considered a coroutine object.</li>
<li>Asynchronous Generator: <code>async def</code> functions that contain a one or more <code>yield</code> expressions. These can also contain <code>await</code> expressions.</li>
<li>Coroutine: <code>async def</code> without zero or more <code>await</code>s and no <code>yield</code>s.</li>
</ul>
</div>
<span class="comment-copy">CV-voter, if the question was too broad an answer of the length that I provided wouldn't be possible. Don't vote indiscriminately.</span>
<span class="comment-copy">Thanks. In "Asynchronous Generator: async def functions that contain a yield expression",  do you mean <code>await</code> instead of <code>yield</code>?</span>
<span class="comment-copy">@Tim no no, if you only have an <code>await</code> in an <code>async def</code> you get a coroutine. The presence of <code>yield</code> in an <code>async def</code> is what makes it an asynchronous generator :-).</span>
<span class="comment-copy">What is the difference between "Asynchronous Generator", Generator-based coroutine, and generators, in terms of their purposes? (not just in terms of how they are defined which you have described)</span>
<span class="comment-copy">@Tim Generators are used as data producers (they <i>yield values</i>). Generator-based coroutines are used as consumers (you <code>.send</code> values to them or to a sub-generator they <code>yield from</code>). Asynchronous generators are asynchronous data producers (while coroutines are asynchronous data consumers).</span>
<span class="comment-copy">Thanks. I was wondering about some questions regarding producer and consumer in your last comment, <a href="https://stackoverflow.com/questions/46822070/why-are-generator-based-coroutines-consumes-asynchronous-generators-asynchronou?noredirect=1&amp;lq=1" title="why are generator based coroutines consumes asynchronous generators asynchronou">stackoverflow.com/questions/46822070/…</a>. I was also wondering  about some question regarding  the terminology "generator-based coroutine" <a href="https://stackoverflow.com/questions/46830144/are-these-two-kinds-of-generator-based-coroutines-the-same-concept?noredirect=1&amp;lq=1" title="are these two kinds of generator based coroutines the same concept">stackoverflow.com/questions/46830144/…</a></span>
