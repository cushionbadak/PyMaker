<div class="post-text" itemprop="text">
<p>Hello every one I'm trying to convert below code to python (Accessing the raspberry pi 1Mhz timer), I'm stuck when to mmap object we need to + TIMER_OFFSET (<code>timer = (long long int *)((char *)st_base + TIMER_OFFSET);</code>) when I try to do it in Python I got <code>SystemError: mmaps don't support concatenation</code>. I was looking for convert mmap object but I find nothing, Can we fight this ?  It is possible to convert whole this code to python? I mean now I have second  thoughts about it ? </p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;

#define ST_BASE (0x3F003000)
#define TIMER_OFFSET (4)

int main(int argc, char *argv[]) {
    long long int t, prev, *timer; // 64 bit timer
    int fd;
    void *st_base; // byte ptr to simplify offset math

    // get access to system core memory
    if (-1 == (fd = open("/dev/mem", O_RDONLY))) {
        fprintf(stderr, "open() failed.\n");
        return 255;
    }

    // map a specific page into process's address space
    if (MAP_FAILED == (st_base = mmap(NULL, 4096,
                        PROT_READ, MAP_SHARED, fd, ST_BASE))) {
        fprintf(stderr, "mmap() failed.\n");
        return 254;
    }

    // set up pointer, based on mapped page
    timer = (long long int *)((char *)st_base + TIMER_OFFSET); //&lt;- here is problem

    // read initial timer
    prev = *timer;
    // and wait
    sleep(1);

    while (1==1) { // forever
        // read new timer
        t = *timer;
        printf("Timer diff = %lld    \r", prev);
        fflush(stdout);
        // save current timer
        prev = t;
        // and wait
        sleep(1);
    }
    // will never get here
    return 0;
}
</code></pre>
<p>Python code (for now I skip this ifs) : </p>
<pre><code>ST_BASE = 0x3F003000
TIMER_OFFSET = 4
import struct
sizeof_long_long = struct.calcsize('q')

def timer():
    while True:
        fd = os.open("/dev/mem",os.O_RDWR | os.O_SYNC)
        stBase = mmap.mmap(fileno=fd,length=4096,offset=ST_BASE)
        timer_bytes = stBase[TIMER_OFFSET:TIMER_OFFSET + sizeof_long_long]
        #print(timer_bytes)
        timer_value, = struct.unpack('q', timer_bytes)
        print(timer_value)
        os.close(fd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Almost good  :) Just unpack_from instead off unpack</p>
<pre><code>import os, mmap, sys
import struct

ST_BASE = 0x3F003000
TIMER_OFFSET = 4
sizeof_long_long = struct.calcsize("Q")
LENGTH = TIMER_OFFSET + sizeof_long_long

def timer():
    fd = os.open("/dev/mem", os.O_RDONLY | os.O_SYNC)
    stBase = mmap.mmap(fileno=fd, length=4096, access=mmap.ACCESS_COPY, offset=ST_BASE)
    os.close(fd)

    while True:
        timer_value = struct.unpack_from("Q", stBase, TIMER_OFFSET)[0]
        print("timer_value")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>mmap</code> object in Python is rather different from pointers in C. The <code>mmap</code> object behaves rather like a <em>bytearray</em>, with some extra methods. However the bytearray interface is the most useful here. The C code adds an offset to the base address to get a pointer to the first byte of the timer value, then converts this to a pointer to a <code>long long int</code>. In Python we can do a similar thing by <em>slicing</em> a part of the bytearray, specifically <code>sizeof (long long int)</code> bytes starting from the offset, and using the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module to decode the value.</p>
<p>Thus we get something like</p>
<pre><code>import struct
sizeof_long_long = struct.calcsize('q')

...


    timer_bytes = stBase[TIMER_OFFSET:TIMER_OFFSET + sizeof_long_long]
    print(timer_bytes)

    # struct.unpack would return a tuple of one element, note the comma.
    timer_value, = struct.unpack('q', timer_bytes)
    print(timer_value)
</code></pre>
</div>
<span class="comment-copy">@AnttiHaapala Ok I add python code but there is not a lot</span>
<span class="comment-copy">Thanks. This turned from completely offtopic to rather OK. Also which python version this was?</span>
<span class="comment-copy">@AnttiHaapala 3.4.2</span>
<span class="comment-copy">Try to use the <code>os.O_RDONLY</code> only + <code>mmap(..., prot=PROT_READ)</code></span>
<span class="comment-copy">Can't use <code>prot=PROT_READ</code> because it is not definied, about <code>os.O_RDONLY</code> funny thing before I have <code>os.O_RDWR</code> and code was executing (and still is) when I change on <code>os.O_RDONLY</code> suddenlny I got <code>[Errno 13]  permission denied</code> (which is strange because I run code with "sudo" and <code>RDONLY&lt;RDWR</code>)</span>
<span class="comment-copy">something move on but all the time when I run this code it gives me same value and this should change all the time</span>
<span class="comment-copy">@BengBeng is it even near the correct value?</span>
<span class="comment-copy">@BengBeng the offset in your Python code is different from the offset in C code?!</span>
<span class="comment-copy">yea I forgot change it in both should be 3F003000 and in my code it is I will edit and put actual code</span>
<span class="comment-copy">About values python gives me all the time : 42949672970 and this c code works like timer and all the time is increasing for now it is : 7446545513</span>
