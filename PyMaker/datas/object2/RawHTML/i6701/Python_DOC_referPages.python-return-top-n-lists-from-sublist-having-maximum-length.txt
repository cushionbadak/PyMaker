<div class="post-text" itemprop="text">
<p>I have a list of lists, where each sublist is a list of objects.
The task is to return a list of top n sublists in the descending order of their length.</p>
<p>Illustration:</p>
<p><code>[[{},{},{},{}],[{},{},{}],[{},{}],[{}],[]]</code></p>
<p>For above, I want to return a list of top 3 sublists as per length, which is </p>
<p><code>[[{},{},{},{}],[{},{},{}],[{},{}]]</code></p>
<p>as the sublists have largest length 3,2,1 respectively from the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two possible options, let's say:</p>
<pre><code>l = [[{},{},{},{}],[{},{},{}],[{},{}],[{}],[]]
</code></pre>
<p>You can produce a completely new list and take the desired 3 elements:</p>
<pre><code>sorted(l, key=len, reverse=True)[:3]
</code></pre>
<p>Or, you can sort your original list and them take the first 3 elements:</p>
<pre><code>l.sort(key=len, reverse=True)
l[:3]
</code></pre>
<p>In terms of performance, the second option seems faster:</p>
<pre><code>In [1]: %timeit sorted(l, key=len, reverse=True)[:3]
1.9 µs ± 28.1 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

In [2]: %%timeit
    ...: l.sort(key=len, reverse=True)
    ...: l[:3]
    ...: 
1.22 µs ± 33.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = [[{},{},{},{}],[{},{},{}],[{},{}],[{}],[]]
&gt;&gt;&gt; sorted(a, key=len, reverse=True)
[[{}, {}, {}, {}], [{}, {}, {}], [{}, {}], [{}], []]
</code></pre>
<p>You can always choose select top <code>k</code> after splicing the result of <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> by <code>sorted(a, key=len, reverse=True)[0:k]</code>.</p>
<p>Main observation to note is argument <code>key</code>, which can also accept any crazy <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer"><code>lambda</code></a> function too.</p>
</div>
<span class="comment-copy">here the task is to return a list (not modify from question). So <code>sorted</code> would suite more.</span>
<span class="comment-copy">@Siddharth, I agree, but it seems that in terms of performance modifying the list seems is faster than making a copy of the new list.</span>
<span class="comment-copy">@ lmiguelvargasf just upvoted your answer for the same</span>
<span class="comment-copy">@Siddharth, thank you</span>
