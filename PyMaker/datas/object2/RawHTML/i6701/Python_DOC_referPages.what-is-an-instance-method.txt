<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3.3/reference/datamodel.html" rel="nofollow noreferrer">https://docs.python.org/3.3/reference/datamodel.html</a></p>
<blockquote>
<p><strong>Instance methods</strong> </p>
<p>An instance method object combines a class, a class instance and any
  callable object (normally a user-deﬁned function).</p>
</blockquote>
<p>If it is a definition, could you explain what it means?</p>
<p>If it is not a definition, what is the definition of an "instance method"?</p>
<p>Is an "instance method" the same concept of a method of a class? </p>
<p>Since someone brings up class method and static method, bound method and unbound method, let me clarify: I understand a method of a class can be an ordinary method, a class method, or a static method. I understand a method of a class accessed via the class or its instance can be bound or function. I have never heard of "an instance method". I don't know that it is even after looking at the quote, and not sure if it is related to ordinary method, a class method, or a static method, or bound method or function . I hope you understand my confusion.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your confusion comes from what exactly this definition is about. The term "instance method" is actually used to describe both the concept (a method that works on an instance - by opposition with a classmethod or staticmethod) and its technical implementation. The definition you quote is about the technical implementation.  </p>
<p>If you want to understand the context of this definition, you can read <a href="https://wiki.python.org/moin/FromFunctionToMethod" rel="nofollow noreferrer">this article in the Python wiki</a>, which explains how Python turns functions into methods at runtime.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; class Foo:
...     def im_a_method(self):
...         pass
... 
&gt;&gt;&gt; x = Foo()
&gt;&gt;&gt; x.im_a_method
&lt;bound method Foo.im_a_method of &lt;__main__.Foo object at 0x7f4f1993dd30&gt;&gt;
</code></pre>
<p>Tada! That's an instance method object. It's the thing you get when you retrieve a method of an object, before you call it.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>What is an instance method?</em></p>
<p>An <strong>instance method</strong> is a function the is <em>bound</em> to a class instance. The instance of the class is implicitly passed as the first argument to instance methods. It essentially belongs to that specific instance. An instance method is the "normal" type of method people use. This is opposed to a static method or class method created using <a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod" rel="nofollow noreferrer"><code>staticmethod</code></a> and <a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#classmethod" rel="nofollow noreferrer"><code>classmethod</code></a> respectively.</p>
<p>Here's an example of an instance method:</p>
<pre><code>&gt;&gt;&gt; class Class: 
...     def method(self): 
...        pass 

&gt;&gt;&gt; Class.method
&lt;bound method Class.method of &lt;Class object at 0x7f12781c5b70&gt;&gt;
</code></pre>
<p>It's that simple.</p>
</div>
<span class="comment-copy">What exactly are you asking? It gives a definition right there, what is 'the same concept of a method of a class'?</span>
<span class="comment-copy">Seems like you know it. Then could you explain how "combines" make it a definition?</span>
<span class="comment-copy">I guess I don't undestand how the word 'combines' makes something not a definition. it's basically a regular method - methods are associated with instances. It's to distinguish it from a class method which is associated with a class. Widely used term in most OO languages.</span>
<span class="comment-copy">What do you mean by "methods are associated with instances" ? I only know that all methods are attributes of classes in Python.</span>
<span class="comment-copy">Maybe part of the confusion arises from the fact that the quoted bit from the doc is describing the actual <i>object</i> python uses to represent an instance method, a concrete thing as opposed to an abstraction like 'instance method'.</span>
<span class="comment-copy">Thanks. I would like to know the definition.</span>
<span class="comment-copy">@Tim You copied the definition into the question, no?</span>
<span class="comment-copy">@cricket_007 if you believe it is a definition, could you explain what it means?</span>
<span class="comment-copy">@Tim: I think you may be well served by taking a break from all the books and specs you read, and writing some programs. You always seem really unfamiliar with how things work in practice, and you seem to have a lot of trouble figuring out how the information you read fits together. Writing some code could help with that.</span>
<span class="comment-copy">That said, what I've posted is about as much of a definition as instance method objects have. It's certainly possible to give more <i>description</i>, or show you the <i>implementation</i>, but a <i>definition</i>? These things aren't like iterators or abelian groups; you're not going to check whether something is an instance method object by going down a list of properties and seeing whether it fulfills them. It's like asking for a definition of "Ford Focus" - kind of a weird thing to ask, and not all that useful.</span>
<span class="comment-copy">Thanks. Could you show that what you explained is the same as "An instance method object combines a class, a class instance and any callable object (normally a user-deﬁned function)"? What methods are not instance methods?</span>
<span class="comment-copy">Class methods are not instance methods. 'static' methods are not instance methods.</span>
<span class="comment-copy">@pvg Okay, but what's your point? I said "usually" not "always".</span>
<span class="comment-copy">@ChristianDean I was replying to the question by the poster in the comment. 'What kind of methods are not instance methods'.</span>
<span class="comment-copy">Alright, sorry about that @pvg. I didn't see that. Could the down-voter please explain there reasoning? Is my wording ambiguous, are my facts incorrect.</span>
