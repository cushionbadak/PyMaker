<div class="post-text" itemprop="text">
<p>Why can't I get the definition of <code>Callable</code> from module <code>collections</code> in the following code?</p>
<p>How can I get the definition of a class in a module? Thanks.</p>
<pre><code>&gt;&gt;&gt; from collections import Callable
&gt;&gt;&gt; inspect.getsource(Callable)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.5/inspect.py", line 944, in getsource
    lines, lnum = getsourcelines(object)
  File "/usr/lib/python3.5/inspect.py", line 931, in getsourcelines
    lines, lnum = findsource(object)
  File "/usr/lib/python3.5/inspect.py", line 788, in findsource
    raise OSError('could not find class definition')
OSError: could not find class definition
&gt;&gt;&gt; inspect.getsourcelines(Callable)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.5/inspect.py", line 931, in getsourcelines
    lines, lnum = findsource(object)
  File "/usr/lib/python3.5/inspect.py", line 788, in findsource
    raise OSError('could not find class definition')
OSError: could not find class definition
&gt;&gt;&gt; inspect.getmodule(Callable)
&lt;module 'collections.abc' from '/usr/lib/python3.5/collections/abc.py'&gt;
&gt;&gt;&gt; inspect.getfile(Callable)
'/usr/lib/python3.5/collections/abc.py'
&gt;&gt;&gt; inspect.getsourcefile(Callable)
'/usr/lib/python3.5/collections/abc.py'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general, this is easily done with <a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="nofollow noreferrer"><code>inspect.getsource</code></a> which accepts a module, a class, a method, a function, a traceback, a frame,
or a code object. The source they represent should of course be written in Python else an error is raised.</p>
<p>In this specific case, you just happen to be unlucky because while <code>Callable</code> is <em>defined</em> in <code>_collections_abc</code> <a href="https://github.com/python/cpython/blob/master/Lib/_collections_abc.py#L27" rel="nofollow noreferrer">the <code>Callable.__module__</code> name is <code>callections.abc</code></a>:</p>
<pre><code>&gt;&gt;&gt; Callable.__module__
'collections.abc'
</code></pre>
<p>This throws <code>getsource</code> off because it won't look in <code>_collections_abc</code> that contains <code>Callable</code>s definition but, instead, in <code>collections.abc</code> which merely imports all definitions from <code>_collections_abc</code>:</p>
<pre><code>&gt;&gt;&gt; print(getsource(collections.abc))
from _collections_abc import *
from _collections_abc import __all__
</code></pre>
<p>Normally, <code>getsource</code> doesn't have an issue finding the source, for example, on itself:</p>
<pre><code>&gt;&gt;&gt; print(getsource(getsource))
def getsource(object):
    """Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    OSError is raised if the source code cannot be retrieved."""
    lines, lnum = getsourcelines(object)
    return ''.join(lines)
</code></pre>
<p>In this specific case, though, it does (due to <code>Callable.__module__</code> returning <code>collections.abc</code>.) You could replace <code>__module__</code> with <code>'_collections_abc'</code> for a tricky way to see the source:</p>
<pre><code>&gt;&gt;&gt; Callable.__module__ = '_collections_abc'
&gt;&gt;&gt; src = getsource(Callable)  
&gt;&gt;&gt; print(src)
class Callable(metaclass=ABCMeta):

    __slots__ = ()

    @abstractmethod
    def __call__(self, *args, **kwds):
        return False

    @classmethod
    def __subclasshook__(cls, C):
        if cls is Callable:
            return _check_methods(C, "__call__")
        return NotImplemented
</code></pre>
<p>but this doesn't make me feel very comfortable.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong><code>get_source(fullname)</code></strong>
Return the source code for the specified module.</p>
<p>So you should return the whole module, as <code>Callable</code> is defined in the module of <code>_collections_abc</code>, so your code should be this:</p>
<pre><code>import _collections_abc

import inspect

print(inspect.getsource(_collections_abc))
</code></pre>
<p>and you can see the definition of <code>Callable</code> in the print result.</p>
</div>
<span class="comment-copy">Thanks. Do <code>getsourceline</code> and <code>getsource</code> find the definition of an object <code>obj</code> via <code>obj.__module__</code>? So do they require <code>obj</code> be defined in Python, instead of binary code? Does <code>getfile</code> find the file of an object <code>obj</code> via <code>obj.__module__</code> too?</span>
<span class="comment-copy">@Tim yes, <code>getsourceline</code> and <code>getsource</code> both internally use <code>getfile</code> which grabs the <code>__module__</code> from the <code>obj</code> if that is a class (which inspect determines by using <code>inspect.isclass</code>). Built-in modules (implemented in C in the case of CPython) can't be used with <code>inspect</code>, so yes, they <i>must</i> be defined in Python.</span>
<span class="comment-copy">Thanks. Do you mean <code>inspect.getsource</code> can only apply to a module object? I saw it can apply to a function object to get the definition of a function. So why doesn't it apply to class <code>inspect.Callable</code>?</span>
<span class="comment-copy">Maybe the function you mentioned are defined as one module? Not sure of that, but the definition of getsource I pasted is from the offical documents.</span>
