<div class="post-text" itemprop="text">
<p>I'm creating a User class and inside this class I want to create a method that prompts the user for data. How can I use the <strong>init</strong> paramaters as valid values in the populate() method? </p>
<p>Here's my code:</p>
<pre><code>class User:
def __init__(self, last_name, first_name, social, rep_code, data_source):
    self.last_name = last_name
    self.first_name = first_name
    self.social = social
    self.rep_code = rep_code
    self.data_source = data_source

def populate(self):
    #prompt for user info and write to file
    this.last_name = input("Please enter user last name:\n")
    this.first_name = input("Please enter user first name:\n")
    this.social = input("Please enter user social security number:\n")
    this.rep_code = input("Please enter user rep code:\n")
    this.data_source = input("Please choose the Data Source. Enter 6 for 
        NFS, 1 for DST, 2 for DAZL:\n")
</code></pre>
<p>And I'd run this method as user1.populate()</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would put the query outside of the class:</p>
<pre><code>def query():
    attributes = {}
    #prompt for user info and write to file
    attributes['last_name'] = input("Please enter user last name:\n")
    attributes['first_name'] = input("Please enter user first name:\n")
    attributes['social'] = input("Please enter user social security number:\n")
    attributes['rep_code'] = input("Please enter user rep code:\n")
    attributes['data_source'] = input("Please choose the Data Source. Enter 6 for NFS, 1 for DST, 2 for DAZL:\n")
    return attributes
</code></pre>
<p>The class would look like this;</p>
<pre><code>class User:
    def __init__(self, last_name, first_name, social, rep_code, data_source):
        self.last_name = last_name
        self.first_name = first_name
        self.social = social
        self.rep_code = rep_code
        self.data_source = data_source
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; attrs = query()
Please enter user last name:
q
Please enter user first name:
w
Please enter user social security number:
e
Please enter user rep code:
r
Please choose the Data Source. Enter 6 for NFS, 1 for DST, 2 for DAZL:
t

&gt;&gt;&gt; me = User(**attrs)
&gt;&gt;&gt; me.data_source
't'
&gt;&gt;&gt; me.first_name
'w'
&gt;&gt;&gt; me.last_name
'q'
&gt;&gt;&gt; me.rep_code
'r'
&gt;&gt;&gt; me.social
'e'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class User:
    def __init__(self):

        #prompt for user info and write to file
        self.last_name = input("Please enter user last name:\n")
        self.first_name = input("Please enter user first name:\n")
        self.social = input("Please enter user social security number:\n")
        self.rep_code = input("Please enter user rep code:\n")
        self.data_source = input(
        '''Please choose the Data Source. Enter 6 for 
            NFS, 1 for DST, 2 for DAZL:\n''')
</code></pre>
<p>```</p>
<p>Using this, a call like <code>user = User()</code> will issue the prompts at terminal. A potentially more useful implementation would be</p>
<pre><code>class User:
    def __init__(
     self, last_name=None, first_name=None, social=None, 
     rep_code=None, data_source=None):

        self.last_name = last_name
        self.first_name = first_name
        self.social = social
        self.data_source = data_source

    def populate(self):
        #prompt for user info and write to file
        self.last_name = input("Please enter user last name:\n")
        self.first_name = input("Please enter user first name:\n")
        self.social = input("Please enter user social security number:\n")
        self.rep_code = input("Please enter user rep code:\n")
        self.data_source = input(
        '''Please choose the Data Source. Enter 6 for 
            NFS, 1 for DST, 2 for DAZL:\n''')
</code></pre>
<p>This way you can initialize a blank <code>User</code> with <code>user = User()</code> and then ask for the prompts with <code>user.populate()</code>.</p>
<p>(edited to change the first <code>__init__</code> example.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you were looking for?</p>
<pre><code>class User:
    def __init__(self, last_name, first_name, social, rep_code, data_source):
        self.last_name = last_name
        self.first_name = first_name
        self.social = social
        self.rep_code = rep_code
        self.data_source = data_source


    @staticmethod
    def create():
        last_name = input("Please enter user last name:\n")
        first_name = input("Please enter user first name:\n")
        social = input("Please enter user social security number:\n")
        rep_code = input("Please enter user rep code:\n")
        data_source = input("Please choose the Data Source. Enter 6 for NFS, 1 for DST, 2 for DAZL:\n")
        return User(last_name, first_name, social, rep_code, data_source)
</code></pre>
<p>This code allows you to call <code>User.create()</code> which will prompt the questions and <code>return</code> a <code>User</code> object. This is different from your code with <code>this</code> replaced with <code>self</code> because this doesn't require an existing <code>User</code> object but instead creates a new one.</p>
<p>Usage:</p>
<p>An example of how to do this might be something like this.</p>
<pre><code>usr = User.create()
print("First name: " + usr.first_name)
print("Last name: " + usr.last_name)
</code></pre>
</div>
<span class="comment-copy">I think you pretty much have it, aside from changing the <code>this.</code> to <code>self.</code> in <code>populate()</code>.</span>
<span class="comment-copy">Thank you, could I just have the input method inside__init__?</span>
<span class="comment-copy">What class parameters?  I only see instance attributes. <a href="https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html#a-first-look-at-classes</a>.</span>
<span class="comment-copy">It's unclear to me what you're trying to achieve. Your constructor takes last_name, first_name, etc, so what is the point of the object.populate() method? If the values are passed as constructor arguments just set them right there and then, otherwise just initialize the value and populate using user input through populate().</span>
<span class="comment-copy">Which version of Python?</span>
<span class="comment-copy">Thank you. I will try this. Why the double * before attrs ?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#keyword-arguments</a> - about the fifth paragraph down.  It <i>tells</i> the function you are supplying a dictionary for keyword arguments.</span>
<span class="comment-copy">wow so cool, ty!</span>
<span class="comment-copy">Maybe when used in a <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">function call</a> it is more appropriate to say the the dictionary is unpacked into keyword arguments for the function.</span>
