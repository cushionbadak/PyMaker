<div class="post-text" itemprop="text">
<p>In unit test I create 3 objects (articles) at the beginning. After test complete I notice that there are 3 images in <code>media_root</code> folder.</p>
<p><strong>Question</strong>: How to delete that images which was created after test finished?</p>
<p><strong>P.S.</strong> I tried to use next code but it delete <code>media_root</code> folder.</p>
<pre><code>def tearDown(self):
        rmtree(settings.MEDIA_ROOT, ignore_errors=True)
</code></pre>
<p>NOTE: Problems in methods <code>test_article_form_valid</code> and <code>test_article_crud</code>.</p>
<p><strong>tests.py:</strong></p>
<pre><code>class ArticleTestCase(TestCase):
    def setUp(self):  
        self.image = open(os.path.join(BASE_DIR, 'static/images/tests/image.jpg'), "r")

    def test_article_form_valid(self):
        data = {
            'head': 'TEXT',
        }
        files_data = {
            'image': SimpleUploadedFile(
                name=self.image.name,
                content=self.image.read(),
                content_type='image/jpeg'
            )
        }
        form = ArticleForm(data=data, files=files_data)
        self.assertTrue(form.is_valid())  &lt;-- ERROR

    def test_article_crud(self):
        response = self.client.get(reverse("article:article_create"))
        self.assertEquals(response.status_code, 200)
        response = self.client.post(
            reverse("article:article_create"),
            data={
                'head': 'TEST',
                'image': self.image
            },
            follow=True,
            format='multipart'
        )
        self.assertEqual(response.status_code, 200)
        self.assertEqual(Article.objects.all().count(), 1) &lt;-- ERROR

    def test_article_view(self):
        first_article = Article.objects.create(
            pk=150,
            head='First',
            image=SimpleUploadedFile(
                name=self.image.name,
                content=self.image.read(),
                content_type='image/jpeg'
            )
        )

        second_article = Article.objects.create(
            pk=160,
            head='Second',
            image=SimpleUploadedFile(
                name=self.image.name,
                content=self.image.read(),
                content_type='image/jpeg'
            )
        )

        third_article = Article.objects.create(
            pk=170,
            head='Third',
            image=SimpleUploadedFile(
                name=self.image.name,
                content=self.image.read(),
                content_type='image/jpeg'
            )
        )
        [***]
</code></pre>
<p><strong>ERROR</strong>:</p>
<pre><code>FAIL: test_article_crud (article.tests.ArticleTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/nurzhan/CA/article/tests.py", line 55, in test_article_crud
    self.assertEqual(Article.objects.all().count(), 1)
AssertionError: 0 != 1

======================================================================
FAIL: test_article_form_valid (article.tests.ArticleTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/nurzhan/CA/article/tests.py", line 117, in test_article_form_valid
    self.assertTrue(form.is_valid())
AssertionError: False is not true
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>tempfile</code> module in python, use it as <code>settings.MEDIA_ROOT</code> in the <code>TestCase</code> <code>setUp()</code> method,</p>
<pre><code>from django.conf import settings
import tempfile

def setUp(self):
    settings.MEDIA_ROOT = tempfile.mkdtemp()
</code></pre>
<p><s>Then, the files created in the test will be automatically removed when the test is finished.</s></p>
<p><strong>UPDATE</strong>:</p>
<p>Then, the files created in the test will not be automatically removed when the test is finished, so do not forget to delete the temporary directory after finishing the test.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found this <a href="https://dirtycoder.net/2016/02/09/testing-a-model-that-have-an-imagefield/" rel="nofollow noreferrer">article</a> and it worked to me</p>
<pre><code>MEDIA_ROOT = tempfile.mkdtemp()

@override_settings(MEDIA_ROOT=MEDIA_ROOT)
class MeuPetTest(TestCase):
    @classmethod
    def tearDownClass(cls): 
        shutil.rmtree(MEDIA_ROOT, ignore_errors=True)
        super().tearDownClass()
</code></pre>
</div>
<span class="comment-copy">But the OP wants to retain the directory, just remove the files from within it, I think.</span>
<span class="comment-copy">@SiHa absolutely right! I need delete only image files which was created in my test. Dont touch to folder. Do you have any other ideas?</span>
<span class="comment-copy">The point of testing is to mock a certain functionality without affecting the actual database and testing, isn't it? If you use <code>tempfile</code> module you don't have to create actual image objects, but create a mock for them and do your testing then after the test, the objects will automatically deleted. There doesn't even arise a question about removing the files, there are no files created, on run time they are created and destroyed.</span>
<span class="comment-copy">@zaidfazil your code raise error in other my test. I update my post with error message and some code. Can you check it pls again. Do you have ideas why I have such errors after your code?</span>
<span class="comment-copy"><b>"the files created in the test will be automatically removed when the test is finished"</b> this is not true. The docs state that <a href="https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp" rel="nofollow noreferrer">The user of mkdtemp() is responsible for deleting the temporary directory and its contents when done with it.</a></span>
