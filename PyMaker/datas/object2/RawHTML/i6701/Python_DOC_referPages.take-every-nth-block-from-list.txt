<div class="post-text" itemprop="text">
<p>Given a list:</p>
<pre><code>import string
a = list(string.ascii_lowercase)
</code></pre>
<p>What is the Pythonic way to return every <em>nth</em> block of <em>m</em> elements?  Note that this is different from just returning <a href="https://stackoverflow.com/questions/1403674/pythonic-way-to-return-list-of-every-nth-item-in-a-larger-list">every <em>nth</em> element</a>.</p>
<p>Desired result of taking every <em>1st of 3 blocks of 3 elements</em> (take 3, skip 6, take 3, skip 6...):</p>
<pre><code>['a', 'b', 'c', 'j', 'k', 'l', 's', 't', 'u']
</code></pre>
<p>I can get to this as:</p>
<pre><code>import itertools
s1 = a[::9]
s2 = a[1::9]
s3 = a[2::9]    
res = list(itertools.chain.from_iterable(zip(s1,s2, s3)))
</code></pre>
<p>Is there a cleaner way?</p>
</div>
<div class="post-text" itemprop="text">
<p>For a fixed order of select and skip, you can wrap indices taking the modulo on the total length of the window (9 here) and select only those beneath the given threshold, 3:</p>
<pre><code>lst = [x for i, x in enumerate(a) if i % 9 &lt; 3]
print(lst)
# ['a', 'b', 'c', 'j', 'k', 'l', 's', 't', 'u']
</code></pre>
<p>You can make this into a function that makes it more intuitive to use:</p>
<pre><code>def select_skip(iterable, select, skip):
    return [x for i, x in enumerate(iterable) if i % (select+skip) &lt; select]  

print(select_skip(a, select=3, skip=6))
# ['a', 'b', 'c', 'j', 'k', 'l', 's', 't', 'u']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps just writing a simple generator is the most readable </p>
<pre><code>def thinger(iterable, take=3, skip=6):
    it = iter(iterable)
    try:
        while True:
            for i in range(take):
                yield next(it)
            for i in range(skip):
                next(it)
    except StopIteration:
        return
</code></pre>
<p>This has the advantage of working even if the input is infinite, or not slicable (e.g. data coming in from a socket).  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> is a third-party library that implements <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> and other helpful tools such as <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.windowed" rel="nofollow noreferrer"><code>more_itertools.windowed</code></a>.</p>
<pre><code>&gt;  pip install more_itertools
</code></pre>
<p>Code</p>
<pre><code>import string

from more_itertools import windowed, flatten


m, n = 3, 6
list(flatten(windowed(string.ascii_lowercase, m, step=m+n)))
# ['a', 'b', 'c', 'j', 'k', 'l', 's', 't', 'u']
</code></pre>
<p><code>windowed</code> naturally steps one position per iteration.  Given a new step by advancing beyond the overlaps (<code>m</code>), the windows are appropriately determined.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it using some <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">generic "chunks" recipe</a>:</p>
<pre><code>windows = chunks(original_iter, n=3)
</code></pre>
<p>Now that you've windowed you're data as you think of it, use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">islice's second variant</a> for its' 'step' capabilities:</p>
<pre><code># flattens the list as well using chain
result = chain.from_iterable(islice(windows, 0, None, 2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension and create a function that does this for any skip, take and list values:</p>
<pre><code>import string
import itertools
a = list(string.ascii_lowercase)
def everyNthBlock(a, take, skip):
  res = [a[i:i + take] for i in range(0, len(a) ,skip + take)]
  return list(itertools.chain(*res))

print(everyNthBlock(a, 3, 6))
#^^^^ =&gt; ['a', 'b', 'c', 'j', 'k', 'l', 's', 't', 'u']
print(everyNthBlock(a, 4, 7))
#^^^^ =&gt; ['a', 'b', 'c', 'd', 'l', 'm', 'n', 'o', 'w', 'x', 'y', 'z']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using incomprehensible list comprehension :D</p>
<pre><code>m, n = 3, 3
[elem for blockstart in range(0, len(a), m*n) for elem in a[blockstart:blockstart+n]]    
#&gt; ['a', 'b', 'c', 'j', 'k', 'l', 's', 't', 'u']
</code></pre>
</div>
<span class="comment-copy">Clever idea, but it takes a couple of brain cycles to see how the 'skip' is correct (6 == 9 - 3).  Might be better to wrap this logic in a helper function or generator expression.</span>
<span class="comment-copy">@wim Yeah, should be more intuitive in a function.</span>
<span class="comment-copy">I think it may be the most approachable solution, maybe. I don't think it is the most readable in any way. Reading function names is usually nicer than reading syntax, and it is a more useful tool for a programmer in the future.</span>
<span class="comment-copy">You're relying on there to be a common multiple between the chunk and stride size. It might be cleaner to take chunks of 9, then slice them as needed.</span>
<span class="comment-copy">Maybe, I just wanted to show the general approach. It can be varied easily I think.</span>
<span class="comment-copy">This is less general, less easy to vary. That's why I commented.</span>
<span class="comment-copy">I disagree, you stated the way to change it for a slightly different use case yourself. The point here is using almost-standard functions because we rarely do anything special. No need to re-invent the wheel.</span>
<span class="comment-copy">Assume the user now wants to take 4, skip 5. Or take 3, skip 7. How do they do that?</span>
