<div class="post-text" itemprop="text">
<p>I'm currently teaching myself pandas and python for machine learning. I've done fine with text data thus far, but dealing with image data with limited knowledge of python and pandas is tripping me.</p>
<p>I have read in a .csv file into pandas dataframe, with one of its columns containing url to an image. So this is what shows when I get info from the dataframe.</p>
<pre><code>dataframe = pandas.read_csv("./sample.csv")
dataframe.info()
</code></pre>
<p><code>&lt;class 'pandas.core.frame.DataFrame'&gt;</code></p>
<p><code>RangeIndex:  5000 entries, 0 to 4999</code></p>
<p><code>Data columns (total of 5 columns):</code></p>
<p><code>name          5000 non-null object</code></p>
<p><code>...</code></p>
<p><code>image         5000 non-null object</code></p>
<p>the image column contains url to the image. The problem is, I do not know how to import the image data from this and save it as numpy array for processing.</p>
<p>Any help is appreciated. Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to download the images from the web and then, for example, rotate your images from your dataframe, and save the results you can use the following code:</p>
<pre><code>import pandas as pd
import matplotlib.pylab as plt
import numpy as np
from PIL import Image
import urllib2 as urllib
import io

df = pd.DataFrame({
"name": ["Butterfly", "Birds"],
"image": ["https://upload.wikimedia.org/wikipedia/commons/0/0c/Two-tailed_pasha_%28Charaxes_jasius_jasius%29_Greece.jpg",
                                 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bat_cave_in_El_Maviri_Sinaloa_-_Mexico.jpg']})

def rotate_image(image, theta):
    """
    3D rotation matrix around the X-axis by angle theta
    """
    rotation_matrix = np.c_[
        [1,0,0],
        [0,np.cos(theta),-np.sin(theta)],
        [0,np.sin(theta),np.cos(theta)]
    ]
    return np.einsum("ijk,lk-&gt;ijl", image, rotation_matrix)

for i, imageUrl in enumerate(df.image):
    print imageUrl
    fd = urllib.urlopen(imageUrl)
    image_file = io.BytesIO(fd.read())
    im = Image.open(image_file)
    im_rotated = rotate_image(im, np.pi)
    fig = plt.figure()
    plt.imshow(im_rotated)
    plt.axis('off')
    fig.savefig(df.name.ix[i] + ".jpg")
</code></pre>
<p>If instead you want to show the pictures you can do:</p>
<pre><code>plt.show()
</code></pre>
<p>The resulting pictures are <a href="https://www.pythonanywhere.com/user/cedriczg/files/home/cedriczg/Birds.jpg" rel="nofollow noreferrer">birds</a> and <a href="https://www.pythonanywhere.com/user/cedriczg/files/home/cedriczg/Butterfly.jpg" rel="nofollow noreferrer">butterfly</a> which can be seen here as well:
<a href="https://i.stack.imgur.com/7vIF8.jpg" rel="nofollow noreferrer"><img alt="Butterfly" src="https://i.stack.imgur.com/7vIF8.jpg"/></a>
<a href="https://i.stack.imgur.com/5fKR3.jpg" rel="nofollow noreferrer"><img alt="Birds" src="https://i.stack.imgur.com/5fKR3.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>As we don't know your csv-file, you have to tune your <code>pd.read_csv()</code> for your case.</p>
<p>Here i'm using <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer">requests</a> to download some image <strong>in-memory</strong>.</p>
<p>These are then decoded with the help of scipy (which you already should have; if not: you can use <a href="https://github.com/python-pillow/Pillow" rel="nofollow noreferrer">Pillow</a> too).</p>
<p>The decoded images are then raw numpy-arrays and shown by matplotlib.</p>
<p>Keep in mind, that we are not using temporary-files here and everything is hold in memory. Read also <a href="https://stackoverflow.com/questions/22340265/python-download-file-using-requests-directly-to-memory">this</a> (answer by jfs).</p>
<p>For people missing some required libs, one should be able to do the same with (code needs to be changed of course):</p>
<ul>
<li>requests can be replaced with <a href="https://docs.python.org/3/library/urllib.html" rel="nofollow noreferrer">urllib</a> (standard lib)

<ul>
<li>i'm not showing code, but <a href="https://stackoverflow.com/questions/3042757/downloading-a-picture-via-urllib-and-python">this SO-question should be a good start</a></li>
<li><a href="https://stackoverflow.com/questions/15352668/download-and-decompress-gzipped-file-in-memory">another relevant SO-question</a> talking about in-memory processing with urllib</li>
</ul></li>
<li>pandas can be replaced by <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> (standard lib)</li>
<li>scipy can be replaced by <a href="https://github.com/python-pillow/Pillow" rel="nofollow noreferrer">Pillow</a> (although internal storage might differ then)</li>
<li>matplotlib is just for demo-purposes (not sure if Pillow allows showing images; <strong>edit:</strong> it seems it <a href="https://stackoverflow.com/questions/28139637/how-can-i-display-an-image-using-pillow">can</a>)</li>
</ul>
<p><strike>I just selected some random images from <a href="http://www.spiegel.de/" rel="nofollow noreferrer">some german newspage</a>.</strike></p>
<p><strong>Edit:</strong> Free images from wikipedia now used!</p>
<p>Code:</p>
<pre><code>import requests                 # downloading images
import pandas as pd             # csv- / data-input
from scipy.misc import imread   # image-decoding -&gt; numpy-array
import matplotlib.pyplot as plt # only for demo / plotting

# Fake data -&gt; pandas DataFrame
urls_df = pd.DataFrame({'urls': ['https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/Rescue_exercise_RCA_2012.jpg/500px-Rescue_exercise_RCA_2012.jpg',
                                 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Clinotarsus_curtipes-Aralam-2016-10-29-001.jpg/300px-Clinotarsus_curtipes-Aralam-2016-10-29-001.jpg',
                                 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/US_Capitol_east_side.JPG/300px-US_Capitol_east_side.JPG']}) 

# Download &amp; Decode
imgs = []
for i in urls_df.urls:               # iterate over column / pandas Series
    r = requests.get(i, stream=True) # See link for stream=True!
    r.raw.decode_content = True      # Content-Encoding
    imgs.append(imread(r.raw))       # Decoding to numpy-array

# imgs: list of numpy arrays with varying shapes of form (x, y, 3)
#     as we got 3-color channels
# Beware!: downloading png's might result in a shape of (x, y, 4)
#     as some alpha-channel might be available
# For more options: https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.imread.html

# Plot
f, arr = plt.subplots(len(imgs))
for i in range(len(imgs)):
    arr[i].imshow(imgs[i])
plt.show()
</code></pre>
<p>Output:</p>
<p><a href="https://i.imgur.com/uWgHkW1.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.imgur.com/uWgHkW1.png"/></a></p>
</div>
<span class="comment-copy">can you post a snippet of the csv</span>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a code writing service. If you haven't had the opportunity, please read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.  With a little research and studying the Python documentation you should find tools to help you <i>grab</i> an image from the web with a url.  If you come up with a solution and get stuck, come back and ask.</span>
<span class="comment-copy">Which version of Python are you using? Are you using the DataFrame for other purposes or is it just an intermediate step to parse the csv file?</span>
<span class="comment-copy">Thanks johnashu and wwii! I've read through the links, and I apologize that my question was vague and information insufficient. I will try my best to better ask questions next time. Thanks for taking the time to read through my question!</span>
<span class="comment-copy">Thank you Cedirc! I used a different method but this one also worked well and seems to be a lot cleaner than my method! Have a good day. Thanks again.</span>
<span class="comment-copy">Thank you sascha! The decoding was really the part I needed help on. I am sorry the information was insufficient. I guess I'm currently at a stage where I don't know what I don't know so my questions ended up being vague. Thanks again for your help!</span>
