<div class="post-text" itemprop="text">
<p>I'm trying to figure out a way to import a .txt file ideally as dataframe(pandas) using python 3.5. I've done this a couple of time with different data. This file has couple of thousand cases/ instances, which take each 13 lines followed by a blank line:</p>
<pre><code>Cat1: text
…
Cat13: text

Cat1: text
…
Cat13: text …
</code></pre>
<p>Using the following code, I can access each line and create a new vector per instance (unfortunately as column vector instead of row vector, which could be added to a new data frame):</p>
<pre><code>import codecs
import pandas as pd
with codecs.open(‚file.txt', 'r',encoding='utf-8', errors='ignore') as f:
    lines = f.readlines()

L = list(lines[i] for i in range(14))
se = pd.Series(L[:13])
df = pd.DataFrame([], columns=('Cat1’,…,’Cat13‘))
df['new_row'] = se.values
</code></pre>
<p>I'm looking for a basic data frame (instances x 13) with 'Cat1’,…,’Cat13‘ as columns and instances as rows. </p>
<pre><code>Cat1  Cat2 ... Cat13
text  text     text
text  text     text
...
</code></pre>
<p>Is there an easy fix to this problem or even another package to load such a file?</p>
<p><strong>edit:</strong>
Wasn't really sure what I was looking for. Finally was able to sort out this problem using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a>, which was mentioned in <a href="https://stackoverflow.com/questions/3914454/python-how-to-loop-through-blocks-of-lines">this thread</a>.</p>
<pre><code>import itertools
import codecs
import pandas as pd

def group_separator(line):
    return line=='\n'

with codecs.open('file.txt', 'r',encoding='utf-8', errors='ignore') as f:
    lines = f.readlines()

cols = ('Cat1',...,'Cat13')
data = []
for (key, group) in itertools.groupby(lines, group_separator):
    if key:
        next(group).strip()
    else:
        tem_data = [i.strip() for i in group]
        tem_data = filter(lambda l: l != '', tem_data)
        tem_data = [i.split(':',1) for i in tem_data]
        tem_data = [i[1].strip() for i in tem_data]
        if len(tem_data) == 13:
            data.append(tem_data)

df = pd.DataFrame(data, columns=cols)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>given this format of the input file: </p>
<pre><code>Cat1/instance1: text …
Cat13/instance1: text

Cat1/instance2: text …
Cat13/instance2: text …
</code></pre>
<p>You can read the file as a one column dataframe as follows (ps: pandas will automatically skip empty lines): </p>
<pre><code>In [70]: df = pd.read_csv('/tmp/test.txt', header=None)

In [71]: df
Out[71]: 
                         0
0   Cat1/instance1: text …
1    Cat13/instance1: text
2   Cat1/instance2: text …
3  Cat13/instance2: text …

In [72]: 
</code></pre>
<p>The split the lines based on <code>/</code> or <code>:</code> to construct a new dataframe with three columns: </p>
<pre><code>In [72]: dff = pd.DataFrame(df[0].str.strip().str.split('/|: ').tolist())

In [73]: dff
Out[73]: 
       0          1       2
0   Cat1  instance1  text …
1  Cat13  instance1    text
2   Cat1  instance2  text …
3  Cat13  instance2  text …

In [74]: 
</code></pre>
<p>Then set the first two columns <code>[0, 1]</code>, as an index to <code>dff</code>, unstack the dataframe with first level of the index to make <code>cat1..cat13</code> as the new columns. then reset_index to remove the <code>instance1.. instance2</code> with one line: </p>
<pre><code>In [74]: dff = dff.set_index([0,1]).unstack(level=0).reset_index(drop=True)

In [75]: dff
Out[75]: 
        2        
0    Cat1   Cat13
0  text …    text
1  text …  text …

In [76]: 
</code></pre>
<p>And finally, we need to remove the uncessary level in the columns and keep only <code>cat1... cat13</code></p>
<pre><code>In [76]: dff.columns = dff.columns.levels[1].tolist()

In [77]: dff
Out[77]: 
     Cat1   Cat13
0  text …    text
1  text …  text …

In [78]: 
</code></pre>
<hr/>
<p>Without the explanations above, the overall code looks like this: </p>
<pre><code>df = pd.read_csv('/tmp/test.txt', header=None)
dff = pd.DataFrame(df[0].str.strip().str.split('/|: ').tolist())
dff = dff.set_index([0,1]).unstack(level=0).reset_index(drop=True)
dff.columns = dff.columns.levels[1].tolist() 
</code></pre>
<p>If you'd like to handle encoding <code>utf-8</code>, read the file as follows: </p>
<pre><code>df = pd.read_csv('/tmp/test.txt', header=None, encoding='utf-8')
</code></pre>
</div>
<span class="comment-copy">Can you please edit your example data to show some complete case and expected output?</span>
<span class="comment-copy">And to be more idiomatic.</span>
<span class="comment-copy">@tsc check my answer below</span>
<span class="comment-copy">Thx for your reply! I managed to load the data via: import codecs file = codecs.open('file.txt','rU','UTF-8', errors='ignore') df = pd.read_csv(file,header=None, sep='\n'). Using your code to split up the data, I got 2 columns cat1..cat13 and "text". Any input on how to aggregate the data?</span>
<span class="comment-copy">@tsc what do you mean by aggregating the data ? Can you give an example?  Also if my answer was sufficient for your intial question consider accepting it and maybe up voting ;)</span>
