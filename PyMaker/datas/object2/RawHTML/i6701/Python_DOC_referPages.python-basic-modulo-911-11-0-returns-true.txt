<div class="post-text" itemprop="text">
<p>I just started learning programming today and ran into an issue. What a way to encourage myself :)</p>
<p>But since it's so basic, maybe someone can explain me quickly what happened here</p>
<p>I have a simple if statement, given to me on a course</p>
<pre><code>divisible_by_11 = 11

is_583_divisible_by_11 = None
is_911_divisible_by_11 = None

number_583 = 583

if [number_583 % divisible_by_11 == 0]:  #that line is added by me
    is_583_divisible_by_11 = True
else:
    is_583_divisible_by_11 = False


is_911_divisible_by_11 = None
number_911 = 911

if [number_911 % divisible_by_11 == 0]:  #that line is added by me
    is_911_divisible_by_11 = True
else:
   is_911_divisible_by_11 = False

print(is_583_divisible_by_11)
print(is_911_divisible_by_11)
</code></pre>
<p>And that returned True twice, which of course it not correct.
To double check it I did</p>
<pre><code>print(number_911 / divisible_by_11)
</code></pre>
<p>And that returned correct result of </p>
<pre><code>82.81818181818181
</code></pre>
<p>In this case, why it happens that " if [number_911 % divisible_by_11 == 0] " returns true even though, in the same program we can check that and that is not correct.</p>
<p>Does it have to do with int/float ? If so how can I force that number to be treated as a float ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should not be using <code>[...]</code> brackets; that creates a <em>list object</em></p>
<pre><code>&gt;&gt;&gt; number_583 = 583
&gt;&gt;&gt; divisible_by_11 = 11
&gt;&gt;&gt; [number_583 % divisible_by_11 == 0]
[True]
&gt;&gt;&gt; type([number_583 % divisible_by_11 == 0])
&lt;class 'list'&gt;
</code></pre>
<p>Because you have a list with at least one element, that's <strong>always going to be true</strong> in a boolean context; see the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer"><em>truth value testing</em> documentation</a>.</p>
<p>This matters when the <code>==</code> operation produced a <code>False</code> result, like in your <code>911</code> test:</p>
<pre><code>&gt;&gt;&gt; number_911 = 911
&gt;&gt;&gt; [number_911 % divisible_by_11 == 0]
[False]
&gt;&gt;&gt; bool([number_911 % divisible_by_11 == 0])
True
</code></pre>
<p><code>bool()</code> returns the same result as what <code>if</code> tests for. </p>
<p>Remove those square brackets altogether:</p>
<pre><code>if number_583 % divisible_by_11 == 0:
    is_583_divisible_by_11 = True
else:
    is_583_divisible_by_11 = False
</code></pre>
<p>and</p>
<pre><code>if number_911 % divisible_by_11 == 0:
    is_911_divisible_by_11 = True
else:
   is_911_divisible_by_11 = False
</code></pre>
<p>and you can just assign the result <em>directly</em>, since <code>==</code> is already going to give you a boolean:</p>
<pre><code>is_583_divisible_by_11 = number_583 % divisible_by_11 == 0
is_911_divisible_by_11 = number_911 % divisible_by_11 == 0
</code></pre>
<p>If you do need to group expressions, you need to use <code>(...)</code> round parentheses:</p>
<pre><code>is_583_divisible_by_11 = (number_583 % divisible_by_11 == 0)
is_911_divisible_by_11 = (number_911 % divisible_by_11 == 0)
</code></pre>
<p>but they are redundant here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't put the expression in a list. A non-empty list is always <em>truthy</em> even if its contents are all <em>falsy</em>. Remove the square brackets:</p>
<pre><code>if number_583 % divisible_by_11 == 0:
   ...
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; bool([False])
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because your if statement inadvertently constructs a 1 element list:</p>
<pre><code>&gt;&gt;&gt; [number_911 % divisible_by_11 == 0]
[False]
</code></pre>
<p>A non-empty list is considered <code>True</code> for boolean purposes, e.g.</p>
<pre><code>if [False]:
    print('True')
else:
    print('False')
</code></pre>
<p>will print "True". </p>
<p>You can correct your code by simply removing the <code>[</code> and <code>]</code> to avoid creating a list.</p>
<p>As an aside it is not necessary, or desirable, to initialise your result variables. It's also possible to use no <code>if</code> statement at all. This is equivalent:</p>
<pre><code>&gt;&gt;&gt; is_583_divisible_by_11 = 583 % 11 == 0
&gt;&gt;&gt; is_583_divisible_by_11
True

&gt;&gt;&gt; is_911_divisible_by_11 = 911 % 11 == 0
&gt;&gt;&gt; is_911_divisible_by_11
False
</code></pre>
<p>Finally, there is little use in binding literal values to variables with names that simply reiterate the value, such as <code>number_911</code>. Just use the number directly.</p>
<p>It makes sense to use constants for things such as <code>G = 9.8'</code> (acceleration due to gravity), <code>PI = 3.14159</code>, <code>ROWS = 8</code>, <code>COLS = 8</code> (chess board dimensions).</p>
</div>
