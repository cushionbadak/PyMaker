<div class="post-text" itemprop="text">
<p>I kept getting the error <code>only length-1 arrays can be converted to Python scalars</code>. Most people suggest sometimes numpy is not compatible with other existing math functions. but I changed every math function to np functions. </p>
<p>The error states:</p>
<pre><code>Traceback (most recent call last):   File "/Users/jimmy/Documents/2.py", line 20, in &lt;module&gt;
    eu = mc_simulation(89,102,0.5,0.03,0.3,1000)   File "/Users/jimmy/Documents/2.py", line 12, in mc_simulation
    ST = s0 * exp((r - 0.5 * sigma ** 2) * T + sigma * a * z) TypeError: only length-1 arrays can be converted to Python scalars
</code></pre>
<p>My code:</p>
<pre><code>from numpy import *
import numpy as np
from math import exp

def mc_simulation(s0, K, T, r, sigma, no_t):

    random.seed(1000)
    z = random.standard_normal(no_t)

    ST = s0 * exp((r - 0.5 * sigma ** 2) * T + sigma * np.sqrt(T) * z)

    payoff = maximum(ST - K, 0)

    eu_call = exp(-r * T) * sum(payoff) / no_t

    return eu_call


eu = mc_simulation(89,102,0.5,0.03,0.3,1000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>math</code> here.  Use <code>numpy.exp</code>. Furthermore, consider getting into the habit of not using the * operator with imports.</p>
<pre><code>import numpy as np
np.random.seed(1000)

def mc_simulation(s0, K, T, r, sigma, no_t):
    z = np.random.standard_normal(no_t)
    ST = s0 * np.exp((r - 0.5 * sigma ** 2) * T + sigma * np.sqrt(T) * z)
    payoff = np.maximum(ST - K, 0)
    eu_call = np.exp(-r * T) * np.sum(payoff) / no_t
    return eu_call

print(mc_simulation(89,102,0.5,0.03,0.3,1000))
3.4054951916465099
</code></pre>
<p>To your comment of "why shouldn't I use the * operator": there are a ton of good discussions on why this can create trouble.  But here is what the official <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">documentation</a> has to say on that: when you use <code>from numpy import *</code>:</p>
<blockquote>
<p>This imports all names except those beginning with an underscore (_).
  In most cases Python programmers do not use this facility since it
  introduces an unknown set of names into the interpreter, possibly
  hiding some things you have already defined.</p>
</blockquote>
<p>Your own example illustrates that.  If you were to use:</p>
<pre><code>from numpy import *
from math import *
</code></pre>
<p>Both have an <code>exp</code> function that gets imported into the namespace as <code>exp</code>. Python might then have trouble knowing which <code>exp</code> you want to use and, as you saw here, they are quite different.  The same applies if you have already defined an <code>exp</code> function yourself, or any other function that shares a name with any in those two packages.</p>
<p>In general, be wary of any tutorials you run across that use <code>from x import *</code> consistently. </p>
</div>
<span class="comment-copy">Could we please get a full stack trace so we can see on which line the error is occuring?</span>
<span class="comment-copy">Please indent correctly. This is not valid Python code.</span>
<span class="comment-copy">Also, why did you do <code>from numpy import *</code> <i>and</i> <code>import numpy as np</code>?</span>
<span class="comment-copy">One more edit please, to make the last line code again. Also, format the traceback as a code block. It is very difficult to read as it is.</span>
<span class="comment-copy">code edited. thanks for your help !!</span>
<span class="comment-copy">could you care to explain why shouldn't I use the * operator. I see many programmers using it.</span>
<span class="comment-copy">@YeWang. It can very easily put a whole bunch of unexpected names in your namespace and overwrite names that are already there. It's main purpose is to make it easier to type things out quickly on the command line, but it should not be used in scripts you intend to share with others.</span>
<span class="comment-copy">@YeWang Then those programmers are following bad coding practices. It is better to keep things in their own namespace than pollute yours.</span>
