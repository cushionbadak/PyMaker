<div class="post-text" itemprop="text">
<p>From Learning Python:</p>
<blockquote>
<p>The basic format of the with statement looks like this, with an
  optional part in square brackets here:</p>
<pre><code>with expression [as variable]:
    with-block
</code></pre>
<p>The <code>expression</code> here is assumed to return an object that supports the
  context management protocol (more on this protocol in a moment).
  <strong>This object may also return a value that will be assigned to the name <code>variable</code> if the optional as clause is present.</strong></p>
<p>Note that <strong>the <code>variable</code> is not necessarily assigned the result of
  the <code>expression</code></strong>; the result of the <code>expression</code> is the object that
  supports the context protocol, and <strong>the <code>variable</code> may be assigned
  something else intended to be used inside the statement.</strong></p>
</blockquote>
<p><code>expression</code> is evaluated to a context manager object.</p>
<p>What is assigned to <code>variable</code>? The quote only says that it is not a context manager object.</p>
<p>Does the assignment to <code>variable</code> call  some method of a context manager class to produce the actual value assigned to <code>variable</code>?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Whatever is returned from <code>__enter__</code>. From the <a href="https://docs.python.org/3/library/stdtypes.html#context-manager-types" rel="nofollow noreferrer">documentation on the <code>__enter__</code> method of context managers</a>:</p>
<blockquote>
<p><code>contextmanager.__enter__()</code></p>
<p>Enter the runtime context and return either this object or another object related to the runtime context. <em>The value returned by this method is bound to the identifier in the <code>as</code> clause of <code>with</code> statements using this context manager.</em></p>
</blockquote>
<p><sub>(Emphasis mine)</sub></p>
<p>The result of calling <code>__enter__</code> could very well be a context manager, nothing in the specification forbids this. It could of course be another object related to the runtime context, as the docs state.</p>
<p>Objects that return themselves from <code>__enter__</code> can be used again and again as context managers. <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer"><code>file</code> objects</a>, for example:</p>
<pre><code>with open('test_file') as f1:   # file.__enter__ returns self
    with f1 as f2:                # use it again, get __self__ back
        print("Super context managing")
        with f2 as f3, f1 as f4:   # getting weird.
            print("This can go on since f1.__enter__ returns f1")
        print("f1.__exit__ has been called here, though :)")
        print("f1 closed: {}".format(f1.closed))
</code></pre>
<p>Not that the previous made much sense but just to make the point clear.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your object can function as a context manager if it <a href="https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers" rel="noreferrer">provides both <code>__enter__</code> and <code>__exit__</code></a>. The object returned by <code>__enter__</code> is bound to the object you specify in the <code>as</code> part of the <code>with</code> statement:</p>
<pre><code>In [1]: class Foo:
   ...:     def __enter__(self):
   ...:         return 'hello'
   ...:     def __exit__(self, *args):
   ...:         pass
   ...:

In [2]: with Foo() as a:
   ...:     print(a)
   ...:
hello
</code></pre>
</div>
