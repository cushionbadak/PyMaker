<div class="post-text" itemprop="text">
<pre><code>n = int(input("Input an integer: "))

n1 = int("%s" % n)
n2 = int("%s%s" % (n,n))
print(n1+n2)
</code></pre>
<p>In this program, why is two string required for n2? Also how having %(n,n) give a result of 55 and total of 60 if we put 5 as our n? I just didn't get the idea of having % so much. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>n = int(input("Input and integer: ")
print(n*n+n)
</code></pre>
<p>You don't want to convert the integers to a string, as it is inconvenient to convert them back and forth. Keep them as integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this code we have to write %s two times in n2 as we are computing nn so basically if n=5 then nn=55 and hence you get sum of 60</p>
</div>
<div class="post-text" itemprop="text">
<p><code>%s</code> is a python string formatting operator. You can learn more about it from <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow noreferrer">official documentation</a>. It takes a variable from the right hand side and concatenates to the string in the given location. IE: <code>'My age is %s, nice to meet you' % (20)</code> would give you <code>'My age is 20, nice to meet you'</code> as a string. You can use multiple string formatting operators for more complex formatting.</p>
<p>The code you've pasted gets an input from user, converts to integer with the following line:</p>
<pre><code>n = int(input("Input an integer: "))
</code></pre>
<p>For simplicity sake let's say user enters <code>5</code>. Next line formats it to a string (for some unnecessary reason) and converts it to an integer again. So n1 is integer 5.</p>
<pre><code>n1 = int("%s" % n) # same as int(str(5))
</code></pre>
<p>Next line formats two 5's into a string, resulting in 55 and converts it to integer.</p>
<pre><code>n2 = int("%s%s" % (n,n)) # similar to int('55')
</code></pre>
<p>So now we have two integers n1 and n2 which are 5 and 55. So summing them up gives you the result <code>60</code>.</p>
<pre><code>print(n1+n2) # print(55+5) which is 60
</code></pre>
<hr/>
<p>For future reference, <a href="https://docs.python.org/3/library/string.html#string-formatting" rel="nofollow noreferrer">format() method</a> is newer so somewhat more preferred. And the code you pasted can be written in a much more compact and simpler way, assuming you typed that as a reference I didn't fix anything.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>%</code> and <code>format</code> are string formatters for python. Take python 2.7 for example, you can use <code>%</code> like:</p>
<pre><code>n = input("Input an integer: ")
print eval('%s+%s%s' % (n,n,n))
</code></pre>
<p>or use <code>format</code> like:</p>
<pre><code>n = input("Input an integer: ")
print eval('{}+{}{}'.format(str(n),str(n),str(n)))
</code></pre>
<p>I suggest you have a read of <a href="https://pyformat.info/" rel="nofollow noreferrer">PyFormat: Using % and .format() for great good!</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If by <code>n+nn</code> you mean something like <code>n=56+5656</code>, </p>
<p>For <code>n=56</code>, just do:</p>
<pre><code>n=int(raw_input()) #or any number
print n+int(str(n)+str(n))
</code></pre>
</div>
<span class="comment-copy">I don't understand your question. Are you asking what <code>%</code> does?</span>
<span class="comment-copy">Also, the specification is not clear. If <code>n = 14</code>, what should <code>nn</code> be?</span>
<span class="comment-copy">correct. n2 = int("%s%s" % (n,n)) On this instance, I am not getting the intuition behind  % (n,n). 5 is just a made up number, it can be 14 too. I believe if its 14, nn would be 1414. Well I guess I figured it out. Int is just converting the string to number that is entered. I was just thinking way more here.</span>
<span class="comment-copy">What intuition? Again <b>what exactly is your question</b>? Be specific. But, perhaps it would help if you knew that <code>%</code> is an old-style string interpolation operator. It has been supplanted by the <code>.format</code> method, along with the new format-specificaton mini-language, and on Python 3.6, you can also use f-strings...</span>
<span class="comment-copy">I too am not getting the intuition.</span>
<span class="comment-copy">Actually they do, the question just isn't very clear. They want a number which is the result of string-concatenating the number to itself. I think.</span>
