<div class="post-text" itemprop="text">
<p>I'm wondering if this is possible in python.
I'm accessing a list in this way:</p>
<pre><code>print list[0]['name']
</code></pre>
<p>This is fine. Is there a way to use a variable? 
I mean:</p>
<pre><code>a="[0]['name']"
print list[a]
</code></pre>
<p>Thanks for your suggestions.</p>
<p>Some details:</p>
<p>I have a situation where I have something like this:</p>
<pre><code>a = [{"name":"someone", "age":23}]
print a[0]['name']
</code></pre>
<p>But since I need to pass "[0]['name']" as parameter, I'd like to understand if this is possible.
Thanks,</p>
<p>cips</p>
</div>
<div class="post-text" itemprop="text">
<p>In general it is <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">dangerous to use <code>eval</code></a> but you essentially need to convert your string to perform your indexing.</p>
<p>So first you can get your list as a <code>str</code> using <code>repr</code></p>
<pre><code>&gt;&gt;&gt; l = [{'name': 'bob'}]
&gt;&gt;&gt; repr(l)
"[{'name': 'bob'}]"
</code></pre>
<p>then if you concatenate that with your index operation</p>
<pre><code>&gt;&gt;&gt; a = "[0]['name']"
&gt;&gt;&gt; repr(l) + a
"[{'name': 'bob'}][0]['name']"
</code></pre>
<p>then <code>eval</code> the whole thing, it should do the trick</p>
<pre><code>&gt;&gt;&gt; eval(repr(l) + a)
'bob'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a simple matter of extracting the indices/keys from the string <code>"[0]['name']"</code> and then using those keys to index the list/dict structure.</p>
<pre><code>data = [{"name":"someone", "age":23}]
keys = "[0]['name']"

# split the string into a list of indices/keys
keys = keys[1:-1].split('][')
# keys = ['0', "'name'"]

# the keys are all strings, so we have to convert
# each individual key to the correct type
import ast
keys = [ast.literal_eval(key) for key in keys]
# keys = [0, 'name']

# now use the list of indices/keys we generated to get the value
value = data
for key in keys:
    value = value[key]

print(value) # output: someone
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope not to be out of context, but maybe you can use a function like this if you can
convert <code>s = "[0]['name']"</code> to <code>s = (0, 'name')</code>:</p>
<pre><code>def search_index(obj, itero):
    try:
        return search_index(obj[next(itero)], itero)
    except StopIteration:
        return obj

a = [{"name":"someone", "age":23}]
s = (0, 'name')

result = search_index(a, iter(s))
# &gt;&gt;&gt; result = 'someone'
</code></pre>
<p>If you want to convert <code>"[0]['name']"</code> to <code>(0, 'name')</code> you can try this:</p>
<pre><code>import re
reg = re.findall(r'\[(\d*?)\]|\[\'(\w*?)\'\]', "[0]['name']")
s = [int(index[0]) if not index[1] else index[1] for index in reg]
# [0, 'name']
</code></pre>
<p>It will convert the indexes to the right type, to work with either list or dicts.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding your most recent edit, you cannot pass a string that contains the index and key. However, you can use <code>eval</code> to convert the entire expression to valid Python:</p>
<pre><code>a = [{"name":"someone", "age":23}]
s = "[0]['name']"
new_s = eval("a{}".format(s))
print new_s
</code></pre>
<p>Output:</p>
<pre><code>someone
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use the function eval('a[0][name]'), it will evaluate the string inside as a python code.</p>
<p>here is the reference:
<a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#eval</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use exec command</p>
<pre><code>exec("print(list{})".format(a))
</code></pre>
<p>I hope it works</p>
</div>
<span class="comment-copy">You need to explain why you need this. Otherwise it can only be accomplished with <code>eval</code> or <code>exec</code></span>
<span class="comment-copy">Do you want to use this particular string to index your list, or could the variable have a different value? For example <code>a = [0, 'name']</code>?</span>
<span class="comment-copy">Please see my edit below.</span>
<span class="comment-copy">Please, no. Avoiding <code>eval</code> is almost <i>trivial</i> in this case; you can easily parse the string <code>"[0]['name']"</code> into a list like <code>[0, 'name']</code> and then use those values to index <code>a</code>.</span>
<span class="comment-copy">@CoryKramer Clearly that cannot be achieved.</span>
<span class="comment-copy">@CoryKramer The OP is proposing a creative, but ultimately an incompatible solution with Python syntax. This answer points the OP in the correct direction.</span>
<span class="comment-copy">Please don't advocate the use of <code>eval</code> or <code>exec</code>. It's near-trivial to solve the OP's problem <i>without</i> <code>eval</code>. <code>eval</code> opens a massive security hole in your code for no reason.</span>
<span class="comment-copy">Welcome to StackOverflow. Please read <a href="https://stackoverflow.com/questions/how-to-answer">How to Answer</a> to write better answers in the future.</span>
<span class="comment-copy">Please don't advocate the use of <code>eval</code> or <code>exec</code>. It's near-trivial to solve the OP's problem <i>without</i> <code>eval</code>. <code>eval</code> opens a massive security hole in your code for no reason.</span>
<span class="comment-copy">Please don't advocate the use of <code>eval</code> or <code>exec</code>. It's near-trivial to solve the OP's problem <i>without</i> <code>exec</code>. <code>exec</code> opens a massive security hole in your code for no reason.</span>
