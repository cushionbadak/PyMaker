<div class="post-text" itemprop="text">
<p>I have inherited some node code lately, that calls python scripts. Python scripts print() debugging statements, and also a result. Consider the following python code:</p>
<pre><code>print("Debugging statement 1")
print("Result")
print("Debugging statement 2")
</code></pre>
<p>We are using python-shell (<a href="https://github.com/extrabacon/python-shell/blob/master/index.js" rel="nofollow noreferrer">https://github.com/extrabacon/python-shell/blob/master/index.js</a>). In the node app, we have the following:</p>
<pre><code>const pyshell = new PythonShell('helloworld.py');
let output = '';
pyshell.stdout.on('data', data =&gt; { output += '' + data; });
pyshell.end(err =&gt; { if(err) throw err; console.log(output) } );
</code></pre>
<p>As expected, we are getting the following on console.log:</p>
<pre><code>Debugging statement 1
Result
Debugging statement 2
</code></pre>
<p>What we intend, though, is to segregate <code>Result</code> from this output.</p>
<p><strong>My solution:</strong></p>
<p>I have advised to put a restriction on the Python developers to assume that they will get a string called <code>CALL_TOKEN</code>, and, hence, the result can be identified by looking for a signature <code>CALL_TOKEN:Results</code>. Their output will then look like:</p>
<pre><code>Debugging statement 1
CALL_TOKEN:Result
Debugging statement 2 
</code></pre>
<p>And, hence, I can wrap my python-shell calls as:</p>
<pre><code>const pyshell = new PythonShell('helloworld.py', { args: [CALL_TOKEN] });
let output = '', result = '';
pyshell.stdout.on('data', data =&gt; {
    if(data.indexOf("CALL_TOKEN")==0)
        result = data;
    else 
        output += '' + data; 
});
pyshell.end(err =&gt; { 
    if(err) throw err; 
    console.log(result); 
    console.log(output) 
});
</code></pre>
<p>Please suggest if there is a better way than this. I am new to Python.</p>
<p><strong>UPDATE</strong> </p>
<p>We dont quite want to lose the debug messages (hence turning it off in prod etc would not work). We want the node code to simply identify the Result, and direct the reming print() to console.log()</p>
</div>
<div class="post-text" itemprop="text">
<p>You should certainly use the logging library and not print statements. Here is a short example on logging.</p>
<pre><code>import logging

logging.basicConfing(level="DEBUG")
logger = logging.getLogger(__name__)

logger.info("Result")
logger.debug("debug message")



&gt;&gt; INFO:Result
&gt;&gt; DEBUG:debug message
</code></pre>
<p>One can also set the alert level to ignore debug messages, perhaps in production.</p>
<p>There are 5 levels of logging: <code>debug, info, warning, error</code> and  <code>critical</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Coudnt find anything too convincing, hence we (Node and Python devs) have agreed upon the following:</p>
<ul>
<li>To implement, this, the following restrictions are being imposed on the python code:</li>
<li><ol>
<li>You can expect the last arguments as a result-file. Running your Python code from IDLE, this argument may be missing, but Node code will always provide this argument.</li>
</ol></li>
<li><ol start="2">
<li>You can add to node log by either print()ing or by redirecting python's logger.debug() to stdout. This will be ignored in staging / production</li>
</ol></li>
<li><ol start="3">
<li>You can add to node error log by either print(stderr) or by redirecting python's logger.error() to stderr. This will be retained in staging / production</li>
</ol></li>
<li><ol start="4">
<li>You should write to the result-file before your python code exits. An empty result file is acceptable.</li>
</ol></li>
</ul>
</div>
<span class="comment-copy">You could use the <code>logging</code> module, it allows you to group log messages by logger name, severity and other attributes. <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">docs.python.org/3/library/logging.html</a></span>
<span class="comment-copy">IMO debugging-by-printing is always a bad idea. In python you have multiple tools to achieve this differently: <code>pdb</code> (and it's forks, <code>ipdb</code>, <code>pdbpp</code>) and <code>logging</code> module.</span>
<span class="comment-copy">Thats a suggestion I can pass to the Python developers. The problem stays though ... how do I cut-out the Result from this output? One way could be that we introduce an Log level called RESULT ... but it sounds the same as what I am proposing anyways. I will wait for some more answers. Thank a lot.</span>
<span class="comment-copy">you can remove all the unwanted lines of output by filtering them, e.g., using <code>grep -v debug | grep -v info | grep -v warning | ...</code>.</span>
<span class="comment-copy">You can rewrite the code and deploy. It will take you 30 mins.</span>
