<div class="post-text" itemprop="text">
<p>This is a programming language concept question, e.g. similar to the level of Programming Language Pragmatics, by Scott.</p>
<p>In Python, the classes of some kinds of objects are defined in terms of having some methods with special names, for example,</p>
<ol>
<li>a descriptors' class is defined as a class which has a method named <code>__get__</code>, <code>__set__</code>, or <code>__delete__()</code>.</li>
<li>an iterators' class is defined as a class which has a method named <code>__next__</code>.</li>
</ol>
<p>Questions:</p>
<ol>
<li>What is the language feature in Python called in programming language design? Is it duck typing?</li>
<li>How does the language feature work underneath?</li>
<li><p>In C++, C#, and Java, is it correct that a descriptor's class and an
iterator's class would have been defined as subclasses of some
particular classes? (similarly to C# interface <code>IDisposable</code>)</p>
<p>In Python, </p>
<ul>
<li><p>Can descriptors' classes be defined as subclasses of some particular class?</p></li>
<li><p>Can iterators' classes be defined as subclasses of some particular class?</p></li>
</ul></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What is the language feature in Python called in programming language design? Is it duck typing?</p>
</blockquote>
<p>"Any object with a member with a specific name (or signature), can work here" is duck typing. I don't think there is a more specific term for "any object  with a member with a specific name (or signature), can work for this <em>language feature</em>", if that's what you were asking.</p>
<blockquote>
<p>How does the language feature work underneath?</p>
</blockquote>
<p>I don't understand the question. If a language feature means that it calls a method with a specific name, it calls a method with that name. That's it.</p>
<blockquote>
<p>In C++, C#, and Java, is it correct that a descriptor's class and an iterator's class would have been defined as subclasses of some particular classes?</p>
</blockquote>
<p>I'm not aware of anything similar to descriptor in any of these languages and I don't think it makes sense to speculate on how it would look if it did exist.</p>
<p>As for iterators, each of these languages has a foreach loop, so you can look at that:</p>
<p>In C++, the range-based <code>for</code> loop works on any type that has instance members <code>begin</code> and <code>end</code> or for which the <code>begin</code> and <code>end</code> functions exist. The returned type has to support the <code>++</code>, <code>!=</code> and <code>*</code> operators.</p>
<p>In C#, the <code>foreach</code> loop works on any type that has instance method <code>GetEnumerator()</code>, which returns a type with a <code>MoveNext()</code> method and a <code>Current</code> property. There is also the <code>IEnumerable&lt;T&gt;</code> interface, which describes the same shape. Enumerable types commonly implement this interface, but they're not required to do so.</p>
<p>In Java, the enhanced <code>for</code> loop works on any type that implements <code>Iterable</code>.</p>
<p>So, there are no subclasses anywhere (C# and Java differentiate between implementing an interface and deriving from a base class). Java requires you to implement an interface. C# uses duck typing, but also optionally allows you to implement an interface. C++ uses duck typing, there is no interface or base class at all.</p>
<p>Note that, depending on the language, the decision whether to use duck typing for a certain language feature might be complicated. As an extreme example, one feature of C# (collection initializers) requires implementing of a specific interface (<code>IEnumerable</code>) and also the presence of a method with a specific name (<code>Add</code>). So this feature is <em>partially</em> duck typed.</p>
</div>
<div class="post-text" itemprop="text">
<p>The term you are looking for is <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">The Python Data Model</a> (there's more to this than just dunder-methods and -attributes, but they are an integral part of it).</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an aspect of <strong>duck typing</strong>.</p>
<p>Python, as a dynamically-typed language, cares less about the actual types of objects than about their behaviour. As the saying goes, if it quacks like a duck, then it's probably a duck; in the case of your descriptor, Python just wants to know it defines the special methods, and if it does then it accepts that it is a descriptor.</p>
</div>
<span class="comment-copy"><i>"an iterators' class is defined as a class which has a method named <code>__next__</code>"</i> This is incorrect, or at least poorly phrased. An iterator is an <b>object</b> that has a <code>__next__</code> function. The iterator's class doesn't matter the slightest bit; this is duck-typing.</span>
