<div class="post-text" itemprop="text">
<h1>Problem</h1>
<p>I am generating all possible sequences of this form, for a given integer n:</p>
<ul>
<li>the sequence has length <code>n</code></li>
<li>the sequence must contain the numbers <code>n</code>, <code>n-1</code>, <code>n-2</code>, <code>...</code> , <code>n-k ≥ 1</code> for some <code>k &lt; n</code>. The numbers can be repeated.</li>
</ul>
<p>For example, for <code>n = 3</code>, the possible sequences are:</p>
<pre><code>1, 2, 3
1, 3, 2
2, 1, 3
2, 3, 1
3, 1, 2
3, 2, 1
2, 2, 3
2, 3, 2
3, 2, 2
2, 3, 3
3, 2, 3
3, 3, 2
3, 3, 3
</code></pre>
<p>In other words, the sequence must contain <code>n</code> and numbers counting down from <code>n</code> without any jumps, but in no particular order and with repetitions allowed.</p>
<p>Given <code>n</code>, the number of such sequences is given by the <a href="https://en.wikipedia.org/wiki/Ordered_Bell_number" rel="nofollow noreferrer">ordered Bell numbers</a> or Fubini numbers, which grow extremely fast.</p>
<p>Here is the code that I am using to generate the sequences: </p>
<pre><code>from sympy.utilities.iterables import multiset_permutations

def generate_sequences(n):
    sequences = []
    for unpermuted_seq in unpermuted_sequences(n,n):
        for permutation in multiset_permutations(unpermuted_seq):
            sequences.append(permutation)
    return sequences

def unpermuted_sequences(number,remaining_slots):
# Generates list of possible unpermuted sequences 
    if remaining_slots == 0:
        yield []
        return
    for repetitions in range(1, remaining_slots + 1):
        for sequence in unpermuted_sequences(number - 1, remaining_slots - repetitions):
            yield sequence + repetitions*[number]
</code></pre>
<h1>Questions</h1>
<p>The code posted above works as intended. My two main concerns are the following:</p>
<ol>
<li><p><strong>Storage:</strong> For my particular application, once <code>n</code> is chosen, I need to store all the sequences. I will eventually need to go through the list and remove sequences that do not satisfy a particular condition. However, even for small <code>n</code> (i.e. <code>n &gt; 8</code>), a lot of memory is required (order of GBs).</p></li>
<li><p><strong>Generation time:</strong> My code takes a long time to generate the sequences, even for small <code>n</code>.</p></li>
</ol>
<p>How can I generate the sequences in a way that optimises storage and generation time?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would certainly store those values as binary. For numbers up to 16 you could even use a nibble (4 bits - using some bit shifting) to store each value. So for <code>n=8</code> you would 'only' need 545835 * 4 bytes = ± 2MB -- for <code>n=10</code> ± 500MB.</p>
<p>For faster processing and writing to file, you can use <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow noreferrer">memory mapping</a> (calculate the required size up front, create a file of that size, and open it with memory mapping).</p>
<p>This way every value can be written directly into the mapping (i.e. the file, as if it were memory), which would also eliminate the slower <code>sequences.append(permutation)</code>. Also consider writing only the sequences you need, because if you want to remove them later you'll need to shift all other data.</p>
<p>You could also add a small header to the file with some values: <code>n</code>, <code>k</code>, <code>number of sequences</code>, in binary.</p>
</div>
<span class="comment-copy">The best option is of course to only generate the sequences that satisfy the condition, instead of generating sequences that you'll be discarding later on. Can you tell us what the condition is?</span>
<span class="comment-copy">did you look at itertools? <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a></span>
<span class="comment-copy">@m69: the condition isn't known ahead of time as it is based on later observations</span>
<span class="comment-copy">@robert king: I looked at itertools, but it doesn't seem to have multiset permutations</span>
