<div class="post-text" itemprop="text">
<p>I wish to create a function which filters a data set, and I wish to pass into that function the logic of whether to search <code>&lt;</code>, <code>&gt;</code> or <code>==</code>.  </p>
<p>Is there a preferred method for this in Python, or do I need to create 3 different unique code bases for each using <code>elif</code> for example</p>
<pre><code>if rel_operator == "gt":
    print("GT OPERATION")
elif rel_operator == "lt":
    print("LT OPERATION")
elif rel_operator == "eq":
    print("EQ OPERATION")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's built-in <code>operator</code> module:</p>
<pre><code>&lt; corresponds to operator.lt

&gt; corresponds to operator.gt 
# I was hasty in writing le in my comment

== corresponds to operator.eq
</code></pre>
<p>Following @Nick A comment you can do this:</p>
<pre><code>d = {'gt': operator.gt.__doc__,
'lt':operator.lt.__doc__,
'eq':operator.eq.__doc__}

rel_operator = 'gt'
d.get(rel_operator)

'gt(a, b) -- Same as a&gt;b.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already mentioned in the comments and the other answer you can use the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a> module which wraps the comparison operators as callables.</p>
<p>In case you want to pass in a string you could simply get the appropriate callable with <a href="https://docs.python.org/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a>:</p>
<pre><code>import operator

rel_operator = "gt"  # for example
real_rel_operator = getattr(operator, rel_operator)
</code></pre>
<p>and then call the <code>real_rel_operator</code> with the values as arguments. That works because your strings are already what the functions are called. No need to create a dictionary in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/questions/46307104/conditionally-set-a-relational-operator-in-python#comment79576054_46307104">commented by aws_apprentice</a>, pass your function </p>
<pre><code>operator.gt, operator.lt, operator.eq
</code></pre>
<p>and you can use them as your comparators.</p>
<p>Documentation: <a href="https://docs.python.org/2/library/operator.html" rel="nofollow noreferrer">https://docs.python.org/2/library/operator.html</a></p>
</div>
<span class="comment-copy">you can use <code>operator.lt, operator.le, operator.ne</code></span>
<span class="comment-copy">@aws_apprentice I believe that should be an answer</span>
<span class="comment-copy">sure one second I will update, I am usually hesitant to post short concise things such as this as an answer. well looks like someone beat me to it, haha</span>
<span class="comment-copy">Please post your answer @aws_apprentice, I shall certainly accept yours if posted.</span>
<span class="comment-copy">@SingleEntity Python supports higher-order functions, so generally, you can always pass a function. Even if the <code>operator</code> module doesn't provide what you need, you can always do something like <code>def my_binary_operator(a,b): return a*b + a/b</code> and then refer to the operations by <code>my_binary_operator</code>. Remember, <i>functions work just like any other object</i>.</span>
<span class="comment-copy">Relational operators as functions, I've never heard of this, thanks.  You were so fast in answering, I have to wait 10 minutes to accept your answer! :)</span>
<span class="comment-copy">maybe provide how this would relate to the code? otherwise I would think that you just went ahead and copy pasted a comment...</span>
<span class="comment-copy">Even better, create a dictionary mapping the names (<code>"gt"</code> etc.) to these operators to remove the if statements</span>
