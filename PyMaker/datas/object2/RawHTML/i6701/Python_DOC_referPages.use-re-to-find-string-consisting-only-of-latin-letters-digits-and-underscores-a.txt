<div class="post-text" itemprop="text">
<p>I want to use  regular expression('re') to find if variable names consist only of Latin letters, digits and underscores and they can't start with a digit.</p>
<p>I tried using </p>
<pre><code>In [3]: name='qq-q'

In [4]: re.match("[a-zA-Z_][0-9a-zA-Z_]*",name)
Out[4]: &lt;_sre.SRE_Match object; span=(0, 2), match='qq'&gt;

In [5]: name='kri[shna0'

In [6]: re.match("[a-zA-Z_][0-9a-zA-Z_]*",name)
Out[6]: &lt;_sre.SRE_Match object; span=(0, 3), match='kri'&gt;
</code></pre>
<p>Can some one explain me why above expression matches '-' and '[' in above? </p>
</div>
<div class="post-text" itemprop="text">
<p>You are almost there! In regex, the <code>*</code> matches zero or more of the given character, always matching the longest sequence. For instance <code>A*</code> will match with <code>AAAbcde</code> and the match will be <code>AAA</code>. It would also match with <code>BCDE</code> wit an empty match, but a match nonetheless. To achieve what you want you need to add <code>$</code> at the end of your pattern:</p>
<pre><code>re.match("[a-zA-Z_][0-9a-zA-Z_]*$",name)
</code></pre>
<p>This requests for the pattern to match the input until the end of the line, represented by <code>$</code></p>
<p>If you were using <code>re.search</code>, you would need to start the pattern with <code>^</code>. However it is not necessary with <code>re.match</code> since it only matches from the beginning of the string: <a href="https://docs.python.org/3/library/re.html#search-vs-match" rel="nofollow noreferrer">Python3 doc: search vs match</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You want to match the complete string to succeed. <code>[a-zA-Z_][0-9a-zA-Z_]*</code> matches <code>qq-q</code> because you should check for boundaries here. Look at <a href="https://regex101.com/r/RgVEVZ/2" rel="nofollow noreferrer">example 1</a> to see what the matching groups are. </p>
<p>You can add boundaries like in <a href="https://regex101.com/r/RgVEVZ/1" rel="nofollow noreferrer">example 2</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>To much the complete string <code>"[A-Za-z][A-Za-z\d_]*$", name)</code></p>
<p>no output for name='qq-q' and for name ='kri[shna0'</p>
<p>Edited to match underscore</p>
<p>see this <a href="https://stackoverflow.com/questions/3361449/regex-to-check-the-string-contains-only-letter-and-numbers-but-not-only-numbers">link</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure why you think it matches '-' and '['?
This is the correct behavior. re.match basically looks for the regex you specified at beginning of the string. In this case it would be kri and qq because the next char is not in your regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have troubles with regexen, you can always use plain python methods :</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.ascii_letters + string.digits + '_'
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'
&gt;&gt;&gt; allowed = set(string.ascii_letters + string.digits + '_')
&gt;&gt;&gt; allowed
{'X', 's', 'f', 'C', 'L', 'V', 'D', '0', 'H', 'N', '9', 'l', 'c', 'b', 'p', 'n', 'W', 'k', 'O', 'q', 'a', 'Q', 'J', 'r', '3', 'g', 'h', 'P', '8', 'T', '2', 'u', 'w', '5', 'R', 'Z', 'Y', 'm', 'e', '_', '1', 'j', 't', 'S', 'v', 'G', 'o', 'd', 'A', 'B', 'F', 'M', 'y', 'z', 'E', '7', 'x', 'I', '6', 'K', 'U', 'i', '4'}
&gt;&gt;&gt; name = 'qq-q'
&gt;&gt;&gt; not name[0].isdigit() and all(char in allowed for char in name)
False
&gt;&gt;&gt; name = 'Aaf0fg5f0g0e'
&gt;&gt;&gt; not name[0].isdigit() and all(char in allowed for char in name)
True
</code></pre>
</div>
<span class="comment-copy">@MaartenFabré With a usual regex yes, but in this case it would not because <code>re.match</code> only matches from the beginning of the string. It is equivalent to <code>re.search("^[a-zA-Z_][0-9a-zA-Z_]*$",name)</code></span>
<span class="comment-copy">no output if it start with digits</span>
<span class="comment-copy">you should also match for the start of the string. This pattern would match 0. It wouldn't match underscores either, but would match hyphens</span>
<span class="comment-copy">@MaartenFabré the pattern will not match for 0 as it start matching from string.</span>
<span class="comment-copy">@MaartenFabré for the underscore you are right I edited my answer thanks</span>
