<div class="post-text" itemprop="text">
<p>On Instagram/Facebook underneath a post, you'll see text like 'Person 1, Person 2 &amp; 10 others liked this post'. I was wondering how this same effect may be achieved using Django for a website?
Normally, I would use a for loop like so to loop through all of the likers names;</p>
<pre><code>{% for UserModel in post.likers.all %}
    {{ UserModel.userprofile.first_name }}
{% endfor %}
</code></pre>
<p>However, this doesn't allow me to achieve the desired effect as previously mentioned and will certainly be too long when the number of likers gets into the hundreds. Any ideas on how to do this? Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You would have to handle that logic yourself, for example in a model method (see below).</p>
<p>Basically, you want to return a different string based on how many people liked the Post. For each case, either return nothing (0 likes), a joined list of people who liked it (1 - 3 likes) or a joined list of the first three people who liked it and the remaining like count (&gt; 3 likes).</p>
<pre><code>from django.db import models


class Post(models.Model)

    # ... your model properties here

    def display_likers(self):

        # how many people liked this?
        num = self.likers.count()

        if num == 0:
            # nobody liked this. return simple string.
            return "Nobody likes this."

        elif num &lt; 4:
            # 1 to 3 people liked this. join their names and
            # return that as a string.
            likers = ', '.join(x.userprofile.first_name for x in self.likers.all())
            return '{} like this'.format(likers)

        else:
            # more than 3 people liked this. return the first 3
            # names and count the remaining likers.
            # note the indexing after all() to only get 3 entries.
            three_likers = ', '.join(
                x.userprofile.first_name for x in self.likers.all()[:3]
            )
            more_count = num - 3
            return '{} and {} others like this'.format(three_likers, more_count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Writing a model method may be your best solution as per @olieidel's answer  however if you do want to just do this in the template, use of the below snippet may help.</p>
<pre><code>{% if posts.likers.all.count &lt;= 3 %}
    {% for UserModel in post.likers.all %}
        {{ UserModel.userprofile.first_name }}
    {% endfor %}
{% if posts.likers.all.count &gt;= 3 %}
    {% for UserModel in post.likers.all |slice:":3" %}
        {{ UserModel.userprofile.first_name }}
    {% endfor %}
    &lt;p&gt; And {{ posts.likers.all.count|add:'-3' }}
{% endif %}
</code></pre>
</div>
<span class="comment-copy">You should probably write a model on Post that counts the number of likers and works out what to do depending on how many there are.</span>
<span class="comment-copy">Awesome, this works perfectly. Quick q, why does the 'x' work? To me, it seems just like an undefined variable, so how does that come about?</span>
<span class="comment-copy">Wow, glad to hear and I must say I'm slightly surprised that my code works as I didn't test it. :D The <code>x</code> you're referring to is part of a list comprehension (that part after <code>.join</code>) - check out the relevant section in the <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">Python Docs</a> to get started! :)</span>
<span class="comment-copy">Thanks! Just wondering but how can you render the expression to include other objects properties? So first_name and last_name for each of the users - the x and y example in the Python Docs didn't work for this!</span>
<span class="comment-copy">maybe better use a <code>for</code> loop for that: <code>for liker in self.likers.all():</code> and then append all likers with their relevant information to a list and then join it afterwards.</span>
