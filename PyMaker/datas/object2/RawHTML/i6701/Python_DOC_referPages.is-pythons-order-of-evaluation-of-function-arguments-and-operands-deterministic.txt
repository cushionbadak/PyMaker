<div class="post-text" itemprop="text">
<p>C doesn't <a href="http://en.cppreference.com/w/c/language/eval_order" rel="nofollow noreferrer">guarantee any evaluation order</a> so a statement like <code>f(g1()+g2(), g3(), g4())</code> might execute <code>g1()</code>, <code>g2()</code>, <code>g3()</code>, and <code>g4()</code> in any order (although <code>f()</code> would be executed after all of them)</p>
<p><strong>What about Python? My experimentation for Python 2.7 shows that it appears to be left-to-right order of evaluation but I wonder if this is specified to be the case.</strong></p>
<p>Test program:</p>
<pre><code>def somefunc(prolog, epilog):
    print prolog
    def f(a, b, *args):
        print epilog
    return f        

def f(text):
    print text
    return 1

somefunc('f1','f2')(f('hey'),f('ho'),f('hahaha'),f('tweedledee')+f('tweedledum'))
</code></pre>
<p>which prints</p>
<pre><code>f1
hey
ho
hahaha
tweedledee
tweedledum
f2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, left to right evaluation order is guaranteed, with the exception of assignments.  That's documented here (<a href="https://docs.python.org/2/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">py2</a>, <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">py3</a>):</p>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
<p>In the following lines, expressions will be evaluated in the arithmetic order of their suffixes:</p>
</blockquote>
<pre><code>expr1, expr2, expr3, expr4
(expr1, expr2, expr3, expr4)
{expr1: expr2, expr3: expr4}
expr1 + expr2 * (expr3 - expr4)
expr1(expr2, expr3, *expr4, **expr5)
expr3, expr4 = expr1, expr2
</code></pre>
<p>If the language were not making some choice about this, the evaluation of one argument could mutate another argument and result in unspecified behaviour, so all implementations of Python must follow this spec.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#evaluation-order</a>:</p>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while
  evaluating an assignment, the right-hand side is evaluated before the
  left-hand side.</p>
<p>In the following lines, expressions will be evaluated in the
  arithmetic order of their suffixes:</p>
<pre><code>expr1, expr2, expr3, expr4
(expr1, expr2, expr3, expr4)
{expr1: expr2, expr3: expr4}
expr1 + expr2 * (expr3 - expr4)
expr1(expr2, expr3, *expr4, **expr5)
expr3, expr4 = expr1, expr2
</code></pre>
</blockquote>
<p><a href="https://docs.python.org/2/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">The same is true in Python 2.</a></p>
</div>
<span class="comment-copy">@DYZ I asked about function arguments <i>and</i> operator evaluation, not just function arguments.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/40226063/set-literal-gives-different-result-from-set-function-call">careful</a> about some <a href="https://bugs.python.org/issue11205" rel="nofollow noreferrer">bugs</a> though</span>
<span class="comment-copy">I get a bad feeling about code where an argument's value is different depending upon the order it is in the argument list, so I tend to avoid situations where left-to-right order is significant.   But it's good to know what it is, and for Python it is left to right, as others have pointed out.</span>
<span class="comment-copy">Near-duplicates <a href="https://stackoverflow.com/questions/29753335/is-python-assignment-strictly-evaluated-right-to-left">Is python assignment strictly evaluated right to left? [duplicate]</a>, <a href="https://stackoverflow.com/questions/27112647/is-the-right-hand-side-of-an-assignment-always-evaluated-before-the-assignment">Is the right-hand side of an assignment always evaluated before the assignment?</a></span>
