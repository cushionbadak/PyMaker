<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9963524/what-is-a-subtraction-function-that-is-similar-to-sum-for-subtracting-items-in">What is a subtraction function that is similar to sum() for subtracting items in list?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>What I want to do is subtract all the items in that list by order:</p>
<pre><code>&gt;&gt;&gt; ListOfNumbers = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10  # should be computed
-53
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce()</code></a> function:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; lst = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; reduce(lambda x, y: x - y, lst)
-53
</code></pre>
<p>Or using <a href="https://docs.python.org/3/library/operator.html#operator.sub" rel="nofollow noreferrer"><code>operator.sub</code></a> instead of the <code>lambda</code>:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; reduce(operator.sub, lst)
-53
</code></pre>
<p>Note that in Python 2.x <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce()</code></a> is a built-in, so you don't need to import it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate through the array and subtract:</p>
<pre><code>result = ListOfNumbers[0]
for n in ListOfNumbers[1:]:
    result -= n
</code></pre>
<p>Or, as <a href="https://stackoverflow.com/users/2301450/vaultah">vaultah</a> pointed out:</p>
<pre><code>result = ListOfNumbers[0] - sum(ListOfNumbers[1:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <code>itertools.accumulate</code> and <code>operator.sub</code> functions:</p>
<pre><code>import itertools, operator

l = [1,2,3,4,5,6,7,8,9,10]
print(list(itertools.accumulate(l, operator.sub))[-1])   # -53
</code></pre>
<hr/>
<p>This not pretends to be better than posted <code>functools.reduce()</code> solution, but gives an additional feature - intermediate subtraction results for each pair (the 1st item stays as starting point):</p>
<pre><code>[1, -1, -4, -8, -13, -19, -26, -34, -43, -53]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yet another way of doing it, assuming items as input list.</p>
<pre><code>if len(items) == 0:
    print(0)
elif len(items) == 1:
    print(items[0])
else:
    print(items[0] - sum(items[1:]))
</code></pre>
</div>
<span class="comment-copy">Any reason to prefer the lambda over <code>operator.sub</code>?</span>
<span class="comment-copy">None - you can use <code>operator.sub</code>, if you wish. I guess, it can even be slightly more efficient.</span>
<span class="comment-copy">Please consider also: <a href="https://stackoverflow.com/questions/181543/what-is-the-problem-with-reduce" title="what is the problem with reduce">stackoverflow.com/questions/181543/â€¦</a></span>
<span class="comment-copy">That would give a wrong result, though.</span>
<span class="comment-copy">@vaultah, fixed.</span>
<span class="comment-copy">Okay, why not <code>ListOfNumbers[0] - sum(ListOfNumbers[1:])</code> then?</span>
<span class="comment-copy">might want to properly format this?</span>
<span class="comment-copy">formatted the code @aws_apprentice</span>
