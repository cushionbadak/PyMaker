<div class="post-text" itemprop="text">
<p>I am learning Python this semester and this is my homework.</p>
<p>Can anyone tell me why my code is wrong?</p>
<p><strong>QUESTION:</strong><br/>
You want to know your grade in Computer Science, so write a program that continuously takes grades between 0 and 100 to standard input until you input "stop", at which point it should print your average to standard output.</p>
<p><strong>MY CODE:</strong></p>
<pre><code>total=0
count=0

while True:

    grade=input("Enter Your Grades between 0 and 100 [put 'stop' when done]:")

    if grade&lt;0 or grade&gt;100:
        print("Invalid Input")
        continue

    elif grade=="stop":
        break

    else:
        count+=1
        total+=grade

print "Your Average Grade is:"+format(total/count,'.2f')
</code></pre>
<p>When I run the code, the Python keeps giving me this messages:</p>
<p><img alt="Screenshot" src="https://i.stack.imgur.com/vLMAC.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Change <code>input</code> to <code>raw_input</code></p>
<pre><code>grade = raw_input("Enter Your Grades between 0 and 100 [put 'stop' when done]:")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using Python 2.7, so use <code>raw_input</code> instead of <code>input</code>.  The latter evaluates the input, so <code>5 + 2</code> will return <code>7</code> instead of the string <code>'5 + 2'</code>.  Entering <code>stop</code> tries to evaluate <code>stop</code> as a variable, which doesn't exist.</p>
<p>Another note, <code>total</code> and <code>count</code> are both integers, so <code>total/count</code> performs integer division in Python 2 (Python 3 gives a float result).  If you want a floating point average, use <code>float(total)/count</code>.  One of the variables must be float to get a float answer.</p>
<p>You'll also find that <code>grade</code> is a string, so test for <code>'stop'</code> first, then convert it to an <code>int</code> to test the grade <code>grade = int(grade)</code>.  You might want to think about handling errors.  What if the user types <code>10a</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can evaluate first the string stop, try capture the input with <code>raw_input</code>:</p>
<pre><code>total = 0

count = 0

while True:

    grade = raw_input("Enter Your Grades between 0 and 100 [put 'stop' when done]:")

    if grade == "stop":
        break
    if grade.isdigit():
        grade = int(grade)
        if grade &lt; 0 or grade &gt; 100:
            print("Invalid Input")
            continue
        else:
            count += 1
            total += grade

if  count == 0:
    print "Empty values"
else:
    print "Your Average Grade is: %.2f" % (float(total)/count)
</code></pre>
<p>I added different conditions for correct execution, check the lines, for example <code>if grade.isdigit():</code> for verify that the input value is a numeric value, when this evaluation we can work normally with any math calculation.</p>
<p><code>count == 0:</code> for the error division by zero if the user write <code>stop</code> in first iteration.</p>
<p>In the last line you can use two different ways to print the values:</p>
<pre><code>print "Your Average Grade is: %.2f" % (float(total)/count)
</code></pre>
<p>or </p>
<pre><code>print "Your Average Grade is: {:.2f}".format(float(total)/count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're running this program in Python 2 where <code>input</code> evaluates the user input. So if you enter "stop", Python tries to find the variable <code>stop</code> which doesn't exist and raises the <code>NameError</code>.</p>
<p>There are more problems and you need to restructure the code. The first thing you should do is to change <code>input</code> to <code>raw_input</code> which just returns the user input as a string. Then you need to check if the user entered "stop" and break, otherwise convert the input string to an int and then increment the <code>count</code> and <code>total</code>.
    total = 0
    count = 0</p>
<pre><code>while True:
    grade = raw_input("Enter Your Grades between 0 and 100 [put 'stop' when done]:")
    if grade == "stop":
        break
    # Skip if the string can't be converted to an int.
    if not grade.isdigit():
        print("Invalid Input")
        continue
    # Now convert the grade to an int.
    grade = int(grade)

    if grade &lt; 0 or grade &gt; 100:
        print("Invalid Input")
        continue
    else:
        count += 1
        total += grade

# Convert total to a float for true division.
print "Your Average Grade is: {:.2f}".format(float(total)/count)
</code></pre>
</div>
<span class="comment-copy">You're missing indentation (usually 4 spaces) in the while loop as well as parenthesis around your last print function call. Are those oversights in the original?</span>
<span class="comment-copy">Is this Python 2 or 3 code? You can't use <code>print</code> without parentheses in Python 3 and in Python 2 you should use <code>raw_input</code> instead of <code>input</code>.</span>
<span class="comment-copy">You are also comparing a string (returned from input()) with ints.</span>
<span class="comment-copy">downvote ? why ? maybe is not good add much code ?</span>
<span class="comment-copy">Maybe because we forgot to convert one of the operands to a float to get true division? It's really lame to downvote without an explanation.</span>
<span class="comment-copy">Thanks for the clarification. I reinstalled the Python 3.</span>
<span class="comment-copy">Thanks for the clarification. Learned few more operations in Python 2 as well. BTW, I reinstalled Python 3.</span>
<span class="comment-copy">Ah, that's good. In Python 3 <code>input</code> works like <code>raw_input</code> (returns strings and doesn't evaluate the input (that would be insecure)), and <code>/</code>  performs "true division" (float division) so you don't have to convert one of the operands to a float and can just write <code>total/count</code>. Also, to convert strings to ints and floats we usually use a <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer"><code>try:...except ValueError:</code></a> clause to prevent errors.</span>
