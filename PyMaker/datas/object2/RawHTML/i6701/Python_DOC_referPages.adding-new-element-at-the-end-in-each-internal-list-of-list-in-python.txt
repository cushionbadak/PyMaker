<div class="post-text" itemprop="text">
<p>I have a list of list like below: </p>
<pre><code>[[1,345,0,304],[0,345,678,946,90],[0,23,3,56,3,5,9,0]]
</code></pre>
<p>Now I want to append a new number (same number) to each of internal list at the end. </p>
<p>so result should be like: </p>
<pre><code>[[1,345,0,304,90],[0,345,678,946,90,90],[0,23,3,56,3,5,9,0,90]]
</code></pre>
<p>I want to use a list comprehension as I don't want to do it the normal way by iterating over each internal list in main list and then use a temporary list to add to it. </p>
<p>Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Approaches</strong></p>
<p>Native Python (@acushner presented this first):</p>
<pre><code>lsts = [[1,345,0,304], [0,345,678,946,90], [0,23,3,56,3,5,9,0]]
[lst + [90] for lst in lsts]
</code></pre>
<p>Alternatively, with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>import itertools as it

[list(it.chain(lst, [90])) for lst in lsts]
</code></pre>
<p>For fun, a third-party library <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.padded" rel="nofollow noreferrer"><code>more-itertools</code></a> (<code>pip install more_itertools</code>):</p>
<pre><code>import more_itertools as mit

[list(mit.padded(lst, fillvalue=90, n=len(lst)+1)) for lst in lsts]
</code></pre>
<hr/>
<p><strong>Caveat</strong></p>
<p>Some answers attempt to mutate a list while iterating.  While those options give equivalent results, are possibly more memory efficient and may even be faster for larger data for this specific problem, they are arguably non-pythonic and not recommended practices.</p>
<p>From the <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">Python docs</a>:</p>
<blockquote>
<p>It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead.</p>
</blockquote>
<p>This is especially true when <a href="https://stackoverflow.com/questions/6260089/strange-result-when-removing-item-from-a-list"><em>removing</em></a> or <a href="https://stackoverflow.com/a/44633938/4531270"><em>inserting</em></a> elements from a list while iterating it.  The latter approaches adopt this convention of creating a new list.  However, for certain innocuous <a href="https://stackoverflow.com/questions/5285521/adding-data-to-a-nested-list-in-python">circumstances</a>, a compromise may be iterating over a copy of the nested list:</p>
<pre><code>lists = [[1,345,0,304], [0,345,678,946,90], [0,23,3,56,3,5,9,0]]
for lst in lists[:]:
    lst.append(90)
lists
</code></pre>
<p>Otherwise, default to @acushner's approach, which is the next performant option discussed here.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can just use list addition to accomplish this:</p>
<pre><code>[l + [90] for l in lists]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This also works</p>
<pre><code>lists = [[1,345,0,304],[0,345,678,946,90],[0,23,3,56,3,5,9,0]]
[l.append(90) for l in lists]
print(lists)
</code></pre>
<blockquote>
<p>[[1, 345, 0, 304, 90], [0, 345, 678, 946, 90, 90], [0, 23, 3, 56, 3,
  5, 9, 0, 90]]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>And another one:</p>
<pre><code>lists = [[1,345,0,304],[0,345,678,946,90],[0,23,3,56,3,5,9,0]]
for _ in map(lambda x: x.append(90), lists):
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option</p>
<pre><code>lists = [[1,345,0,304], [0,345,678,946,90], [0,23,3,56,3,5,9,0]]

for lst in lists:
    lst.append(90)

print lists
[[1, 345, 0, 304, 90],[0, 345, 678, 946, 90, 90],[0, 23, 3, 56, 3, 5, 9, 0, 90]]
</code></pre>
</div>
<span class="comment-copy">You can go a long way in improving this question by clarifying your intent. You claim that you want to append to each list using a list comprehension, but you've selected an answer which creates a copy, appending to those lists instead of the lists you mention. If that's what you want, please edit your question to make that clear.</span>
<span class="comment-copy">This is tremendously wasteful because it creates copies of the list. It doesn't, in fact, append each list. It creates brand new lists. Imagine the asymptotic case of a 1000x1000 list of lists.</span>
<span class="comment-copy">No copies are made.  New lists are created.  This is intentional and a common convention with list comprehensions in Python.  What alternative do you suggest?</span>
<span class="comment-copy">This is tremendously wasteful because it creates copies of the list. It doesn't, in fact, append each list. It creates brand new lists. Imagine the asymptotic case of a 1000x1000 list of lists.</span>
<span class="comment-copy">@AryaMcCarthy yes it's wasteful, but if you read OP's question it's what he/she wanted.</span>
<span class="comment-copy">This solution is best because it mutates the data structure rather than creating a new one. That being said, this is not how you should use list comprehensions. The question is best answered with a for-loop.</span>
<span class="comment-copy">Could you explain why list comprehensions shouldn't be used for this?</span>
<span class="comment-copy">@Serjik This is not correct. It won't work since append returns None</span>
<span class="comment-copy">@Baktaawar It absolutely works, just print the result, None is because append does not return a value</span>
<span class="comment-copy">@Arya McCarthy : as your comment the best, why any other answers get an upvote and me getting the down ???</span>
<span class="comment-copy">Consider mutating a copy of the nested list (see post for rationale).  Also for clarity, I would swap the names of <code>lst</code> and <code>lists</code>.  Otherwise, this is a good answer.</span>
<span class="comment-copy">@pylang whats wrong with this approach?</span>
<span class="comment-copy">Mutating the same list you are iterating is not a best-practice.  In this case, it is harmless since you are not removing items, but a safer habit is to iterate a copy, e.g. <code>lists[:]</code>.  There are several posts of this kind <a href="https://stackoverflow.com/questions/1637807/modifying-list-while-iterating" title="modifying list while iterating">stackoverflow.com/questions/1637807/â€¦</a>.  Just substitute <code>for lst in lists[:]:</code>.</span>
<span class="comment-copy">@pylang he is not asking to iterate a copy</span>
<span class="comment-copy">I was suggesting an idiom to improve your answer.  See the cavaet I posted for more information.  Thanks for your post.</span>
