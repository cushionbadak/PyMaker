<div class="post-text" itemprop="text">
<p>I have a top directory <code>ds237</code> which has multiple sub-directories under it as below:</p>
<p><code>
ds237/
├── dataset_description.json
├── derivatives
├── sub-01
├── sub-02
├── sub-03
├── sub-04
├── sub-05
├── sub-06
├── sub-07
├── sub-08
├── sub-09
├── sub-10
├── sub-11
├── sub-12
├── sub-13
├── sub-21
├── sub-22
├── sub-23
├── sub-24
├── sub-25
├── sub-26
├── sub-27
├── sub-28
├── sub-29
</code></p>
<p>I am trying to create multiple zip files(with proper zip names) from ds237 as per size of the zip files. 
<code>sub01-01.zip: contain sub-01 to sub-07</code>
<code>sub08-13.zip : it contains sub08 to sub-13</code></p>
<p>I have written a logic which creates a list of sub-directories <code>[sub-01,sub-02, sub-03, sub-04, sub-05]</code>. I have created the list so that the total size of the all sub directories in the list should not be &gt; 5gb.</p>
<p><strong><em>My question:</em></strong> is how can i write a function to zip these sub-dirs (which are in a list) into a destination zip file with proper name.
Basically i want to write a function as follows:</p>
<p><code>def zipit([list of subdirs], 'path/to/zipfile/sub*-*.zip'):</code></p>
<p>I linux i generally achieve this by:
'zip -r compress/sub01-08.zip ds237/sub-0[1-8]'</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at <a href="https://stackoverflow.com/a/1855118/375530">https://stackoverflow.com/a/1855118/375530</a>, you can re-use that answer's function to add a directory to a ZipFile.</p>
<pre><code>import os
import zipfile


def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file),
                       os.path.relpath(os.path.join(root, file),
                                       os.path.join(path, '..')))


def zipit(dir_list, zip_name):
    zipf = zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED)
    for dir in dir_list:
        zipdir(dir, zipf)
    zipf.close()
</code></pre>
<p>The <code>zipit</code> function should be called with your pre-chunked list and a given name. You can use string formatting if you want to use a programmatic name (e.g. <code>"path/to/zipfile/sub{}-{}.zip".format(start, end)</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> calling 'zip' and passing the paths as arguments</p>
</div>
<div class="post-text" itemprop="text">
<p>The following will give you zip file with a first folder <code>ds100</code>:</p>
<pre><code>import os
import zipfile    

def zipit(folders, zip_filename):
    zip_file = zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED)

    for folder in folders:
        for dirpath, dirnames, filenames in os.walk(folder):
            for filename in filenames:
                zip_file.write(
                    os.path.join(dirpath, filename),
                    os.path.relpath(os.path.join(dirpath, filename), os.path.join(folders[0], '../..')))

    zip_file.close()


folders = [
    "/Users/aba/ds100/sub-01",
    "/Users/aba/ds100/sub-02",
    "/Users/aba/ds100/sub-03",
    "/Users/aba/ds100/sub-04",
    "/Users/aba/ds100/sub-05"]

zipit(folders, "/Users/aba/ds100/sub01-05.zip")
</code></pre>
<p>For example <code>sub01-05.zip</code> would have a structure similar to:</p>
<pre><code>ds100
├── sub-01
|   ├── 1
|       ├── 2
|   ├── 1
|   ├── 2
├── sub-02
    ├── 1
        ├── 2
    ├── 1
    ├── 2
</code></pre>
</div>
<span class="comment-copy">the above script will create a zip file by excluding the path of directory.  Let say i zip <code>/Users/aba/ds100/sub-0[1-6]</code> into <code>sub01-06.zip</code> then when i uncompress the zip, it should generate following path <code>ds100/sub-01</code> and other directories.</span>
<span class="comment-copy">You can also change the <code>relpath</code> to go two directories up from <code>path</code>. So change <code>os.path.join(path, '..')</code> to <code>os.path.join(path, '..', '..')</code> and it should work.</span>
<span class="comment-copy">it does the job partially but when i uncompress the <code>sub01-06.zip</code> and <code>sub07-09.zip</code>, ideally it should uncompress into <code>ds100/sub-01  ds100/sub-02  ds100/sub-03  ds100/sub-04 ds100/sub-05 ds100/sub-06 ds100/sub-07 ds100/sub-08 ds100/sub-09,  However above script with chnages you suggested crates two different </code>ds100`</span>
<span class="comment-copy">Not sure what you're seeing, I ran a similar test and was able to extract both zips to fill in the <code>ds100</code> directory. There may be some configuration with your unzip tool. You can also use <code>unzip zip_file.zip -d output_directory</code> to unzip the file <code>zip_file.zip</code> to <code>output_directory</code>. This would also be an alternate to changing the code to put <code>ds100</code> in there, where you would just specify the output directory as <code>ds100</code>.</span>
<span class="comment-copy">I intend to do this in pythonic way</span>
