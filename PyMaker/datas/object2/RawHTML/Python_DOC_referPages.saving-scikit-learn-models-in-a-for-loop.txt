<div class="post-text" itemprop="text">
<p>I'm running a bunch of models with scikit-learn to solve a classification problem.</p>
<p>Here is the code that <strong>should do</strong> all the running:</p>
<pre><code>for model_name, classifier, param_grid, cv, cv_name in tqdm(zip(model_names, classifiers, param_grids, cvs, cv_names)):
    pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier)])

     train_and_score_model(model_name, pipeline, param_grid, cv=cv)
</code></pre>
<p>My question is, how can I retain the output of my <code>train_and_score_model</code> function? It returns a cv object, i.e. a model.</p>
<p>What I tried to do, but I don't think is right, is create a list <code>cv_names = ['dm_cv', 'lr_cv', 'knn_cv', 'svm_cv', 'dt_cv', 'rf_cv', 'nb_cv']</code> and set each one as the for loop runs. That is the <code>cv_name</code> iterator in the for loop head.</p>
<p>I don't think that's right though, because wouldn't I be setting a string, instead of a variable? As in, what I should really have is <code>cv_names = [dm_cv, lr_cv, knn_cv, svm_cv, dt_cv, rf_cv, nb_cv]</code>, but I don't think I can have a list like that.</p>
<p>Another way I thought of is saving each model in a dictionary, where the keys would be the elements of the list I outlined above. I don't know if I can have a model as a dictionary value though.</p>
<p>Here is the clunky, repetitive code I currently run to do what I want in the for-loop:</p>
<pre><code>pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                 ('classifier', classifier_dm)])
dm_cv = train_and_score_model('Dummy Model', pipeline, param_grid_dm)


pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier_lr)])
lr_cv = train_and_score_model('Logistic Regression', pipeline, param_grid_lr)


pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier_knn)])
knn_cv = train_and_score_model('K Nearest Neighbors', pipeline, param_grid_knn)


pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier_svm)])
svm_cv = train_and_score_model('Support Vector Machine', pipeline, param_grid_svm)


pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier_dt)])
dt_cv = train_and_score_model('Decision Tree', pipeline, param_grid_dt)


pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier_rf)])
rf_cv = train_and_score_model('Random Forest', pipeline, param_grid_rf)


pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                     ('classifier', classifier_nb)])
nb_cv = train_and_score_model('Naive Bayes', pipeline, param_grid_nb)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>You can create a dictionary with mappings of classifier names with
their information i.e. objects and paramter grids:</p>
<pre><code>models_list = {'Logistic Regression': (classifier_lr, param_grid_lr),
               'K Nearest Neighbours': (classifier_knn, param_grid_knn)}
</code></pre></li>
<li><p>Iterate through every key-value pair in the dictionary and build your pipelines:</p>
<pre><code>model_cvs = {}
for model_name, model_info in models_list.items():
    pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                       ('classifier', model_info[0])])
    model_cvs[model_name] = train_and_score_model(model_name, pipeline, model_info[1])
</code></pre></li>
</ol>
</div>
<span class="comment-copy">thanks panktijk. I'm not sure I completely understand your solution though. Wouldn't "model_cv" be overridden with each iteration of the loop?</span>
<span class="comment-copy">@GideonBlinick Right. You can save them in a list (or a dictionary if you wish). Updated the code.</span>
<span class="comment-copy">if I chose to save them in a list, I would have no convenient name for the model though right? As in no "lr_cv" to reference it. Although now that I think of it, I could probably assign each model to the proper name outside the loop, right? Just go through the list, assigning names to the proper list elements. It's annoying that you seemingly can't use a loop to do this assigning though.</span>
<span class="comment-copy">Thats why using a dictionary would make more sense. You can map your result to model name and then use the name to retrieve the corresponding model later. Updated the code.</span>
