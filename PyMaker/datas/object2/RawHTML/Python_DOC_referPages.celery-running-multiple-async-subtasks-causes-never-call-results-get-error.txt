<div class="post-text" itemprop="text">
<p>I am trying to use Celery to run multiple asynchronous jobs, and while the functions are behaving as they should, I keep getting the following error:</p>
<pre><code>RuntimeWarning: Never call result.get() within a task! See http://docs.celeryq.org/en/latest/userguide/tasks.html#task-synchronous-subtasks
</code></pre>
<p>Even though I never call results.get(). The way my program works is that Celery is subscribed to a queue, and that kicks off a managerial task. Based on the contents of the message, it will set up 1 or more subtasks and run them as an async group, then wait for them to finish:</p>
<pre><code>    job = group(tasks) if len(tasks) == 1 else group(*tasks)
    result = job.apply_async()

    # Wait for jobs to finish.
    cycles = 0
    while not result.ready() and cycles &lt; (timeout / step):
        time.sleep(step)
        cycles += 1

    if not result.successful():
        return False
    return True
</code></pre>
<p>Do any of these implicitly call <code>results.get()</code>? And is it at all viable to have 1 task trigger N many (independent) subtasks? I have looked up similar questions, but none of them seem to be doing quite the same thing as I am here.</p>
</div>
<div class="post-text" itemprop="text">
<p>So I looked around, and I think the issue is that I am applying the wrong strategy for what I want to do. I want to start N tasks, and then report if they worked or not. However, each sub-task already reports its status to the database and so waiting around to check on that is just keeping the calling worker blocked for no purpose.</p>
<p>I changed the function to this:</p>
<pre><code>    job = group(tasks) if len(tasks) == 1 else group(*tasks)
    job.apply_async()
</code></pre>
<p>And that's it. The tasks start, and the calling function exits, freeing up the worker. The subtasks run as normal and I get no error. What I was trying to do only makes sense if I am trying to make a call that depends on getting the results of each and every subtask.</p>
</div>
