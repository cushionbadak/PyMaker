<div class="post-text" itemprop="text">
<p>The following subject module contains two functions, one of which manipulates a global variable.</p>
<p><strong>mod.py:</strong></p>
<pre><code>def global_setter():
    global x
    x = 123
    print("setter x:", x)


def global_getter():
    print("getter x:", x)
</code></pre>
<p>For each function there is a test file.</p>
<p><strong>test_1.py</strong></p>
<pre><code>import pytest

import mod


def test_set_x():
    mod.global_setter()
    assert mod.x == 123
</code></pre>
<p><strong>test_2.py</strong></p>
<pre><code>import pytest

import mod


def test_get_x():
    with pytest.raises(NameError):
        mod.global_getter()
</code></pre>
<p>These tests pass if run separately</p>
<pre><code>$ pytest -s -v test_1.py
========================== test session starts ==========================
platform linux -- Python 3.6.7, pytest-4.3.1, py-1.8.0, pluggy-0.9.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /mnt/temp/test, inifile:
collected 1 item

test_1.py::test_set_x setter x: 123
PASSED
</code></pre>
<p>-</p>
<pre><code>======================= 1 passed in 0.03 seconds ========================
$ pytest -s -v test_2.py
========================== test session starts ==========================
platform linux -- Python 3.6.7, pytest-4.3.1, py-1.8.0, pluggy-0.9.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /mnt/temp/test, inifile:
collected 1 item

test_2.py::test_get_x PASSED

======================= 1 passed in 0.02 seconds ========================
</code></pre>
<p>If run together, the second test fails.</p>
<pre><code>$ pytest -s -v test_1.py test_2.py
========================== test session starts ==========================
platform linux -- Python 3.6.7, pytest-4.3.1, py-1.8.0, pluggy-0.9.0 -- /usr/bin/python3
cachedir: .pytest_cache
rootdir: /mnt/temp/test, inifile:
collected 2 items

test_1.py::test_set_x setter x: 123
PASSED
test_2.py::test_get_x getter x: 123
FAILED

=============================== FAILURES ================================
______________________________ test_get_x _______________________________

    def test_get_x():
        with pytest.raises(NameError):
&gt;           mod.global_getter()
E           Failed: DID NOT RAISE &lt;class 'NameError'&gt;

test_2.py:8: Failed
================== 1 failed, 1 passed in 0.08 seconds ===================
</code></pre>
<p>It seems that the state of the imported module bleeds between tests and test files.</p>
<p>Why does this happen, and is there a way to tell pytest to import modules independently for each test file? If so, what would be a way to accomplish it with minimal changes to the <code>test_</code> functions? The above toy example illustrates a problem that I have with a larger code base with many tests.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is expected because all the tests run via pytest are run in a single process and your first test is mutating the global state by adding <code>x</code> to the global namespace. </p>
<p>You have a couple of options. </p>
<ol>
<li>Refactor your code to not use global variables. Or at the very least, encapsulate it within a class which makes it easy to mock. </li>
<li>Use a framework like <code>pytest-xdist</code> (see <a href="https://stackoverflow.com/questions/48234032/run-py-test-test-in-different-process">Run py.test test in different process</a>) which ensures your tests are run in different processes .  </li>
<li>Add a fixture before your second test, which explicitly unsets the global variable <code>x</code>. </li>
</ol>
</div>
<span class="comment-copy">that's expected behavior of the package, you should look in to <code>monkeypatching</code> which would handle this for you gracefully</span>
