<div class="post-text" itemprop="text">
<p>First time trying to use descriptors.</p>
<p>The goal: any integer from 0 to 100 (inclusive) will be a legal value for this descriptor. Non-integers and numbers higher than 100 or lower than 0 should result in an exception being thrown, indicating that the type and/or value is wrong.</p>
<p>My code:</p>
<pre><code>class Percentage():
    def __init__(self, initial_value=None):
        self.pct_min = 0
        self.pct_max = 100
        self.value = initial_value

    def __get__(self, obj, initial_value):
        return self.value

    def __set__(self, obj, initial_value):
        if self.pct_min &lt;= int(self.value) &lt;= self.pct_max:
            return self.value
        elif self.value &lt; self.pct_min:
            raise ValueError(print("Value to low"))
        else:
            raise ValueError(print("Value to high"))


class Foo(object):
    participation = Percentage()



f1 = Foo()
f1.participation = 30

f2 = Foo()
f2.participation = 70

print(f1.participation)  # should print 30
print(f2.participation)  # should print 70
</code></pre>
<p>For this line: if self.pct_min &lt;= int(self.value) &lt;= self.pct_max:</p>
<p>I get this error:</p>
<pre><code>TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
</code></pre>
<p>I am running it through PythonTutor and it appears I am not passing in the integer, but I do not understand where I am failing.</p>
<p>I am also using this as a guide:  <a href="https://www.blog.pythonlibrary.org/2016/06/10/python-201-what-are-descriptors/" rel="nofollow noreferrer">https://www.blog.pythonlibrary.org/2016/06/10/python-201-what-are-descriptors/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't really a problem with descriptors! You've merely set the initial <code>self.value</code> attribute on the descriptor to <code>None</code>:</p>
<pre><code>def __init__(self, initial_value=None):
    # ...
    self.value = initial_value  # this is None by default!
</code></pre>
<p>You then try to convert that <code>self.value</code> attribute value, set to <code>None</code>, to an integer:</p>
<pre><code># self.value starts out as None; int(None) fails.
if self.pct_min &lt;= int(self.value) &lt;= self.pct_max:
</code></pre>
<p>You probably want to apply this to the <code>initial_value</code> argument to <code>__set__</code>!</p>
<p>Your descriptor implementation does have several more problems:</p>
<ul>
<li>The <a href="https://docs.python.org/3/reference/datamodel.html#object.__set__" rel="nofollow noreferrer"><code>__set__</code> setter method</a> should not return anything. It should set the new value for the bound object, and that's it. Python ignores anything returned by <code>__set__</code>.</li>
<li><p>You are storing the data on the descriptor instance itself. Your class has only <em>a single copy</em> of the descriptor object, so when you use the descriptor between different instances of <code>Foo()</code> you see the exact same data. You want to store the data on the object the descriptor is bound to, so in the <code>__set__</code> method, on <code>obj</code>, or at the very least, in a place that lets you associate the value with <code>obj</code>. <code>obj</code> is the specific instance of <code>Foo()</code> the descriptor is bound to. </p></li>
<li><p>The <a href="https://docs.python.org/3/reference/datamodel.html#object.__get__" rel="nofollow noreferrer"><code>__get__</code> getter method</a> doesn't take an 'initial value', it takes the object you are being bound to, and the type (class) of that object. When accessed on a class, <code>obj</code> is <code>None</code> and only the type is set.</p></li>
<li><p>Don't mix <code>print()</code> and creating an exception instance. <code>ValueError(print(...))</code> doesn't make much sense, <code>print()</code> writes to the console then returns <code>None</code>. Just use <code>ValueError(...)</code>.</p></li>
</ul>
<p>I'm making the following assumptions:</p>
<ul>
<li>You want to raise an exception when <em>setting</em> an invalid value.</li>
<li>You don't want to do any validation when <em>getting</em> the value.</li>
<li>The initial value set on the descriptor should be used when no value is present on the bound object.</li>
<li>The value itself can be stored on the instance directly.</li>
</ul>
<p>Then the following code would work:</p>
<pre><code>class Percentage:
    def __init__(self, initial_value=None):
        self.pct_min = 0
        self.pct_max = 100
        self.initial_value = initial_value

    def __get__(self, obj, owner):
        if obj is None:
            # accessed on the class, there is no value. Return the
            # descriptor itself instead.
            return self

        # get the value from the bound object, or, if it is missing, 
        # the initial_value attribute
        return getattr(obj, '_percentage_value', self.initial_value)

    def __set__(self, obj, new_value):
        # validation. Make sure it is an integer and in range
        new_value = int(new_value)
        if new_value &lt; self.pct_min:
            raise ValueError("Value to low")
        if new_value &gt; self.pct_max:
            raise ValueError("Value to high")

        # validation succeeded, set it on the instance
        obj._percentage_value = new_value
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     participation = Percentage()
...
&gt;&gt;&gt; f1 = Foo()
&gt;&gt;&gt; f1.participation is None
True
&gt;&gt;&gt; f1.participation = 110
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 24, in __set__
ValueError: Value to high
&gt;&gt;&gt; f1.participation = -10
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 22, in __set__
ValueError: Value to low
&gt;&gt;&gt; f1.participation = 75
&gt;&gt;&gt; f1.participation
75
&gt;&gt;&gt; vars(f1)
{'_percentage_value': 75}
&gt;&gt;&gt; Foo.participation  # this calls Participation().__get__(None, Foo)
&lt;__main__.Percentage object at 0x105e3a240&gt;
&gt;&gt;&gt; Foo.participation.__get__(f1, Foo)  # essentially what f1.participation does
75
</code></pre>
<p>Note that the above uses a specific attribute name on the instance to set the value. If you have multiple instances of the descriptor on the same class, that will be an issue!</p>
<p>If you want to avoid that, your options are:</p>
<ul>
<li>use some kind of mapping storage that uses some other unique identifier in the key to track what descriptor stored what value on the bound object.</li>
<li>store data on the descriptor instance, keyed by a unique identifier for the instance.</li>
<li>store the name of the attribute on the class where this descriptor is stored, on the descriptor instance itself and base your instance attribute name on that. You can do this by implementing the <a href="https://docs.python.org/3/reference/datamodel.html#object.__set_name__" rel="nofollow noreferrer"><code>descriptor.__set_name__()</code> hook method</a>, which is called by Python when a class is created that uses your descriptor. This hook requires Python 3.6 or newer. For the <code>Foo</code> class example, that'll by called with <code>Foo</code> and <code>'participation'</code>.</li>
</ul>
<p>Note that you should <em>not</em> use the attribute name (<code>participation</code> in your <code>Foo</code> example), at least not directly. Using <code>obj.participation</code> will trigger the descriptor object itself, so <code>Percentage.__get__()</code> or <code>Percencage.__set__()</code>. For a data descriptors (descriptors that implementing either a <code>__set__</code> or <code>__delete__</code> method), you could use <code>vars(obj)</code> or <code>obj.__dict__</code> directly to store attributes, however.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's not a problem with the descriptor itself. The problem is that, in the <code>__set__</code>, instead of checking the value that you get, you check the existing <code>self.value</code>. Since this is initialized to <code>None</code>, you will always fail on the first assignment.</p>
<p>There's also an (unrelated) problem with the descriptor itself. The getter and setters are supposed to read/write from the <code>obj.__dict__</code>, not from the descriptor object itself. Otherwise, all the instances will share a common value</p>
</div>
<span class="comment-copy">You initialize your <code>self.value</code> with <code>None</code> in <code>__init__</code></span>
<span class="comment-copy">Note also that both of your <code>Foo</code> instances share a <code>Foo.participation</code> attribute instead of each having their own instance attribute.</span>
<span class="comment-copy"><code>__get__</code> and <code>__set__</code> need to use their <code>obj</code> argument to keep values for <code>f1</code> and <code>f2</code> separate.</span>
<span class="comment-copy">I got it cleaned up to where it prints 70 for each instance, so I am 'violating' what @Patrick Haugh is referring to -- only I am not sure what that is.</span>
<span class="comment-copy">@Patrick Haugh, Bingo!  That was it.  Thanks.</span>
<span class="comment-copy">@Martjin Peters, I am unable to replicate your results.  1)  In PythonTutor I never see the <b>set</b> method hit.  If I pipe in 120 as a value, it returns 120 instead of the ValueError.</span>
<span class="comment-copy">Ahh...  I removed the change I made for Patrick Haugh above and now I can replicate your results.</span>
<span class="comment-copy">Ah, yes, Patrick appears to have misunderstood the why and how of descriptors and binding.</span>
