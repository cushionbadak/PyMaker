<div class="post-text" itemprop="text">
<p>So I have a dictionary which needs to be sorted by values. I sort them with below Python3 function which returns sorted data as a list of tuples.</p>
<pre><code>def sorter(data):
    return  sorted(data.items(), key=lambda kv: kv[1], reverse=True)
</code></pre>
<p>It sorts the data perfectly, but when I convert this list back to dictionary by </p>
<pre><code>dict(sorter(data))
</code></pre>
<p>It loses the order and returns a dictionary in a completely random order.
What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries in Python are implemented as hash tables, which are inherently unordered â€“ or rather, they are ordered arbitrarily and may change their order upon any modification.</p>
<p>This was <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">changed in Python 3.7</a>, where dictionaries keep their insertion order. But relying on this will make your code less portable.</p>
<p>Use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> if you want to keep the ordering on all Python versions:</p>
<pre><code>from collections import OrderedDict
OrderedDict(sorter(data))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the comments say, dictionaries aren't ordered (until Python 3.7).</p>
<p>If you need an ordered dict, use the aptly named <code>collections.OrderedDict</code>.</p>
<pre><code>import collections

def sorter(data):
    return sorted(data.items(), key=lambda kv: kv[1], reverse=True)

d = collections.OrderedDict(sorter(data))
</code></pre>
</div>
<span class="comment-copy">Which version of Python 3, specifically?</span>
<span class="comment-copy">Dictionaries are not considered ordered in Python &lt;3.7. You should use <code>collections.OrderedDict</code> instead.</span>
<span class="comment-copy">version is Python 3.3.1 I know that dictionaries are not ordered, but when I convert an ordered list of tuples to dictionary, shouldn't it take the first element in the list and put them as first key-value pair in dictionary?</span>
<span class="comment-copy">@MherHarutyunyan Before python 3.7, dicts simply didn't have a concept of "first".</span>
<span class="comment-copy">worked like a charm! Thank you.</span>
