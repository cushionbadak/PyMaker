<div class="post-text" itemprop="text">
<p>I'm trying to understand the proper way to use <code>multiprocessing.Pipe</code> to communicate two processes. I've come up with the following code, which seems to work:</p>
<pre><code>import multiprocessing

def f(parent_conn, child_conn):
    parent_conn.close()
    while True:
        cmd, data = child_conn.recv()
        if cmd == "f1":
            child_conn.send("f1!")
        elif cmd == "f2":
            child_conn.send("f2!")
        else:
            raise NotImplementedError

if __name__ == "__main__":
    parent_conn, child_conn = multiprocessing.Pipe()
    p = multiprocessing.Process(target=f, args=(parent_conn, child_conn))
    p.start()

    child_conn.close()
    parent_conn.send(("f1", None))
    parent_conn.send(("f2", None))
    print(parent_conn.recv())
    print(parent_conn.recv())
</code></pre>
<p>But it's not clear to me what <code>parent_conn</code> and <code>child_conn</code> really mean and why I have to call <code>child_conn.close()</code> and <code>parent_conn.close()</code> (assuming it's correct to close these connections in the first place). What are <code>parent_conn</code> and <code>child_conn</code> exactly? Does my code contain any error or bad practice?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What are parent_conn and child_conn exactly</p>
</blockquote>
<p>They are <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing%20pipe#multiprocessing.connection.Connection" rel="nofollow noreferrer">connection objects</a> that are attached to the different ends of the pipe.</p>
<p>The pipe is a communication channel.</p>
<p>If one process holds one of these objects and another process holds the other, then they can communicate with each other by using <code>send</code> and <code>recv</code> methods of those connection objects.</p>
<p>If some process has two ends of the pipe available, then it might want to close the one it is not going to use. It's probably a good idea to do that because then it cannot happen that two different processes would try to write into or read from the same pipe end (that may have some not so pleasant consequences as described <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing%20pipe" rel="nofollow noreferrer">here</a></p>
</div>
