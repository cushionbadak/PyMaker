<div class="post-text" itemprop="text">
<p>What I want is this behavior:</p>
<pre><code>class a:
    list = []

x = a()
y = a()

x.list.append(1)
y.list.append(2)
x.list.append(3)
y.list.append(4)

print(x.list) # prints [1, 3]
print(y.list) # prints [2, 4]
</code></pre>
<p>Of course, what really happens when I print is:</p>
<pre><code>print(x.list) # prints [1, 2, 3, 4]
print(y.list) # prints [1, 2, 3, 4]
</code></pre>
<p>Clearly they are sharing the data in class <code>a</code>. How do I get separate instances to achieve the behavior I desire?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want this:</p>
<pre><code>class a:
    def __init__(self):
        self.list = []
</code></pre>
<p>Declaring the variables inside the class declaration makes them "class" members and not instance members. Declaring them inside the <code>__init__</code> method makes sure that a new instance of the members is created alongside every new instance of the object, which is the behavior you're looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer works but a little more explanation does not hurt. </p>
<p>Class attributes do not become instance attributes when an instance is created. They become instance attributes when a value is assigned to them.</p>
<p>In the original code no value is assigned to <code>list</code> attribute after instantiation; so it remains a class attribute. Defining list inside <code>__init__</code> works because <code>__init__</code> is called after instantiation. Alternatively, this code would also produce the desired output:</p>
<pre><code>&gt;&gt;&gt; class a:
    list = []

&gt;&gt;&gt; y = a()
&gt;&gt;&gt; x = a()
&gt;&gt;&gt; x.list = []
&gt;&gt;&gt; y.list = []
&gt;&gt;&gt; x.list.append(1)
&gt;&gt;&gt; y.list.append(2)
&gt;&gt;&gt; x.list.append(3)
&gt;&gt;&gt; y.list.append(4)
&gt;&gt;&gt; print(x.list)
[1, 3]
&gt;&gt;&gt; print(y.list)
[2, 4]
</code></pre>
<p>However, the confusing scenario in the question will never happen to immutable objects such as numbers and strings, because their value cannot be changed without assignment. For example a code similar to the original with string attribute type works without any problem:</p>
<pre><code>&gt;&gt;&gt; class a:
    string = ''


&gt;&gt;&gt; x = a()
&gt;&gt;&gt; y = a()
&gt;&gt;&gt; x.string += 'x'
&gt;&gt;&gt; y.string += 'y'
&gt;&gt;&gt; x.string
'x'
&gt;&gt;&gt; y.string
'y'
</code></pre>
<p>So to summarize: <strong>class attributes become instance attributes if and only if a value is assigned to them after instantiation, being in the <code>__init__</code> method or not</strong>. This is a good thing because this way you can have static attributes if you never assign a value to an attribute after instantiation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You declared "list" as a "class level property" and not "instance level property".  In order to have properties scoped at the instance level, you need to initialize them through referencing with the "self" parameter in the <code>__init__</code> method (or elsewhere depending on the situation).</p>
<p>You don't strictly have to initialize the instance properties in the <code>__init__</code> method but it makes for easier understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although the accepted anwer is spot on, I would like to add a bit description.</p>
<p>Let's do a small exercise </p>
<p>first of all define a class as follows:</p>
<pre><code>class A:
    temp = 'Skyharbor'

    def __init__(self, x):
        self.x = x

    def change(self, y):
        self.temp = y
</code></pre>
<p>So what do we have here?</p>
<ul>
<li>We have a very simple class which has an attribute <code>temp</code> which is a string</li>
<li>An <code>__init__</code> method which sets <code>self.x</code> </li>
<li>A change method sets <code>self.temp</code></li>
</ul>
<p>Pretty straight forward so far yeah? Now let's start playing around with this class. Let's initialize  this class first:</p>
<pre><code>a = A('Tesseract')
</code></pre>
<p>Now do the following:</p>
<pre><code>&gt;&gt;&gt; print(a.temp)
Skyharbor
&gt;&gt;&gt; print(A.temp)
Skyharbor
</code></pre>
<p>Well, <code>a.temp</code> worked as expected but how the hell did <code>A.temp</code> work? Well it worked because temp is a class attribute. Everything in python is an object. Here A is also an object of class <code>type</code>. Thus the attribute temp is an attribute held by the <code>A</code> class and if you change the value of temp through <code>A</code> (and not through an instance of <code>a</code>), the changed value is going to be reflected in all the instance of <code>A</code> class.
Let's go ahead and do that:</p>
<pre><code>&gt;&gt;&gt; A.temp = 'Monuments'
&gt;&gt;&gt; print(A.temp)
Monuments
&gt;&gt;&gt; print(a.temp)
Monuments
</code></pre>
<p>Interesting isn't it? And <strong>note that <code>id(a.temp)</code> and <code>id(A.temp)</code> are still the same</strong>.</p>
<p>Any Python object is automatically given a <code>__dict__</code> attribute, which contains its list of attributes. Let's investigate what this dictionary contains for our example objects:</p>
<pre><code>&gt;&gt;&gt; print(A.__dict__)
{
    'change': &lt;function change at 0x7f5e26fee6e0&gt;,
    '__module__': '__main__',
    '__init__': &lt;function __init__ at 0x7f5e26fee668&gt;,
    'temp': 'Monuments',
    '__doc__': None
}
&gt;&gt;&gt; print(a.__dict__)
{x: 'Tesseract'}
</code></pre>
<p><strong>Note that <code>temp</code> attribute is listed among <code>A</code> class's attributes while <code>x</code> is listed for the instance.</strong></p>
<p>So how come that we get a defined value of <code>a.temp</code> if it is not even listed for the instance <code>a</code>. Well that's the magic of <code>__getattribute__()</code> method. In Python the dotted syntax automatically invokes this method so when we write <code>a.temp</code>, Python executes <code>a.__getattribute__('temp')</code>. That method performs the attribute lookup action, i.e. finds the value of the attribute by looking in different places.</p>
<p>The standard implementation of <code>__getattribute__()</code> searches first the internal dictionary (<strong>dict</strong>) of an object, then the type of the object itself. In this case <code>a.__getattribute__('temp')</code> executes first <code>a.__dict__['temp']</code> and then <code>a.__class__.__dict__['temp']</code></p>
<p>Okay now let's use our <code>change</code> method:</p>
<pre><code>&gt;&gt;&gt; a.change('Intervals')
&gt;&gt;&gt; print(a.temp)
Intervals
&gt;&gt;&gt; print(A.temp)
Monuments
</code></pre>
<p>Well now that we have used <code>self</code>, <code>print(a.temp)</code> gives us a different value from <code>print(A.temp)</code>. </p>
<p><strong>Now if we compare <code>id(a.temp)</code> and <code>id(A.temp)</code>, they will be different.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you must declare in the "constructor" if you want that the list becomes an object property and not a class property.</p>
</div>
<div class="post-text" itemprop="text">
<p>So nearly every response here seems to miss a particular point.  Class variables <strong>never</strong> become instance variables as demonstrated by the code below.  By utilizing a metaclass to intercept variable assignment at the class level, we can see that when a.myattr is reassigned, the field assignment magic method on the class is not called.  This is because the assignment <strong>creates a new instance variable</strong>.  This behavior has <strong>absolutely nothing</strong> to do with the class variable as demonstrated by the second class which has no class variables and yet still allows field assignment.</p>
<pre><code>class mymeta(type):
    def __init__(cls, name, bases, d):
        pass

    def __setattr__(cls, attr, value):
        print("setting " + attr)
        super(mymeta, cls).__setattr__(attr, value)

class myclass(object):
    __metaclass__ = mymeta
    myattr = []

a = myclass()
a.myattr = []           #NOTHING IS PRINTED
myclass.myattr = [5]    #change is printed here
b = myclass()
print(b.myattr)         #pass through lookup on the base class

class expando(object):
    pass

a = expando()
a.random = 5            #no class variable required
print(a.random)         #but it still works
</code></pre>
<p><strong>IN SHORT</strong> Class variables have NOTHING to do with instance variables.</p>
<p><strong>More clearly</strong> They just happen to be in the scope for lookups on instances. Class variables are in fact <em>instance variables</em> on the class object itself.  You can also have <em>metaclass variables</em> if you want as well because metaclasses themselves are objects too.  Everything is an object whether it is used to create other objects or not, so do not get bound up in the semantics of other languages usage of the word class.  In python, a class is really just an object that is used to determine how to create other objects and what their behaviors will be.  Metaclasses are classes that create classes, just to further illustrate this point. </p>
</div>
<div class="post-text" itemprop="text">
<p>To protect your variable shared by other instance you need to create new instance variable each time you create an instance. When you are declaring a variable inside a class it's class variable and shared by all instance. If you want to make it for instance wise need to use the <strong>init</strong> method to reinitialize the variable as  refer to the instance  </p>
<p>From <a href="https://www.programiz.com/python-programming/class" rel="nofollow noreferrer"><em>Python Objects and Class</em> by Programiz.com</a>:</p>
<blockquote>
<p><code>__init__()</code> function. This special function gets called whenever a new object of that class is instantiated.</p>
<p>This type of function is also called constructors in Object Oriented
  Programming (OOP). We normally use it to initialize all the variables.</p>
</blockquote>
<p>For example:</p>
<pre><code>class example:
    list=[] #This is class variable shared by all instance
    def __init__(self):
        self.list = [] #This is instance variable referred to specific instance
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the answers provided are misleading. A property defined inside a class becomes an instance property when the object is instantiated, <strong>regardless of how you define it</strong>. So copies of <code>a.list</code> are made, and <code>x.list</code> and <code>y.list</code> are different copies. The reason they seem to be the same is that they are both aliases to the same list. But that is a consequence of the way lists work, not of the way classes work. If you were to do the same thing with numbers instead of lists (or just using += instead of append, which would create a new list) you would see that changing <code>x.attr</code> doesn't affect changing <code>y.attr</code>.</p>
<p>Defining <code>self.list</code> inside <code>__init__</code> works, because the function is called twice, once for each time the object is instantiated, and so, two different lists are created.</p>
</div>
<span class="comment-copy">What Python tutorial are you using?  Where else did you see any code like this?</span>
<span class="comment-copy">Please, do not use <code>list</code> as an attribute name. <code>list</code> is a buil-in function to construct a new list. You should write name classes with capital letter.</span>
<span class="comment-copy">An added clarification: if you were to reassign the list property in one of the instances, it would not affect the others. So if you did something like <code>x.list = []</code>, you could then change it and not affect any others. The problem you face is that <code>x.list</code> and <code>y.list</code> are the same list, so when you call append on one, it affects the other.</span>
<span class="comment-copy">But why does this happens only for list? When i declared an integer or string outside the <b>init</b>, it was not shared among the objects? Can anyone share any doc link to this concept?</span>
<span class="comment-copy">@AmalTs It looks like you don't understand how assignment in python works. See <a href="https://www.youtube.com/watch?v=_AEJHKGk9ns" rel="nofollow noreferrer">this video</a> or <a href="http://stackoverflow.com/a/986145/5420829">this SO post</a>. The behaviour you see is caused by the fact that you are mutating lists but rebinding references to ints and strings.</span>
<span class="comment-copy">@AmalTs Note: it's considered a bad practice to use class attributes as "lazy" default values for instance attributes. Even if the attributes are of an immutable type it's better to assign them inside <code>__init__</code>.</span>
<span class="comment-copy">Nope, that's not how it works.</span>
<span class="comment-copy">@MartijnPieters: Do you have any reference for that?  The explanation in the answer seems very logical, and completely consistent with Python actually behaves.  In which way is it incorrect?</span>
<span class="comment-copy">@JanHlavacek: This answer is incorrect on several points: 1) We are talking about attributes here, not properties; those are different beasts. 2) See class instances in the <a href="http://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">data model documentation</a>; class attributes are not copied to instances when instantiating. Instead, <code>x.list</code> and <code>y.list</code> are both looked up on the instance first, then when not found there, refer to the underlying class object. Thus, they are <i>the same reference</i>, the class attribute. They are <i>not</i> multiple references to the same list.</span>
<span class="comment-copy">@MartijnPieters:  Thanks, that was exactly what I was looking for.  The key is that a class attribute will become an instance attribute when you assign to it, not when the class is instantiated.</span>
