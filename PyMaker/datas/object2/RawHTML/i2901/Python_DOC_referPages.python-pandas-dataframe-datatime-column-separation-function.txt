<div class="post-text" itemprop="text">
<p>Are there any existing libraries which are able to separate a datetime column into columns that contain only one variable of it eg year,month,day,hour,minute etc.</p>
<p>I am doing this as a preprocessing step for data I intend to try use machine learning on (Kaggle new york taxi fare).</p>
<p>This is what the datetime column looks like in the dataset:
<a href="https://i.stack.imgur.com/ED4BP.jpg" rel="nofollow noreferrer"><img alt="Datetime Data" src="https://i.stack.imgur.com/ED4BP.jpg"/></a></p>
<p>I have been able to do this using the following:</p>
<pre><code>df_raw["pickup_year"] = df_raw['pickup_datetime'].dt.year
df_raw["pickup_month"] = df_raw['pickup_datetime'].dt.month
df_raw["pickup_day"] = df_raw['pickup_datetime'].dt.day
df_raw["pickup_hour"] = df_raw['pickup_datetime'].dt.hour
df_raw["pickup_minute"] = df_raw['pickup_datetime'].dt.minute
df_raw["pickup_second"] = df_raw['pickup_datetime'].dt.second
df_raw["pickup_dayofyear"] = df_raw['pickup_datetime'].dt.dayofyear
df_raw["pickup_week"] = df_raw['pickup_datetime'].dt.week
df_raw["pickup_weekofyear"] = df_raw['pickup_datetime'].dt.weekofyear
df_raw["pickup_dayofweek"] = df_raw['pickup_datetime'].dt.dayofweek
df_raw["pickup_weekday"] = df_raw['pickup_datetime'].dt.weekday
df_raw["pickup_quarter"] = df_raw['pickup_datetime'].dt.quarter
df_raw.head()
</code></pre>
<p>But i;m thinking that surely this has been done in a library somewhere before?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can loop by list of attributes and create new columns by <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a>:</p>
<pre><code>L = ['year', 'month', 'day', 'hour', 'minute', 'second', 'dayofyear',
     'week', 'weekofyear', 'dayofweek', 'weekday', 'quarter']

for i in L:
    df[i] = getattr(df['Dates'].dt, i)
#jpp data sample
print (df)
                Dates  year  month  day  hour  minute  second  dayofyear  \
0 2017-12-11 01:00:00  2017     12   11     1       0       0        345   
1 2017-12-12 01:00:01  2017     12   12     1       0       1        346   
2 2019-05-12 15:15:00  2019      5   12    15      15       0        132   
3 2019-06-22 03:25:14  2019      6   22     3      25      14        173   
4 2020-05-11 04:40:02  2020      5   11     4      40       2        132   
5 2020-11-30 01:00:00  2020     11   30     1       0       0        335   

   week  weekofyear  dayofweek  weekday  quarter  
0    50          50          0        0        4  
1    50          50          1        1        4  
2    19          19          6        6        2  
3    25          25          5        5        2  
4    20          20          0        0        2  
5    49          49          0        0        4  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The attributes you have listed are <em>derived</em> from the integer array underlying a <code>datetime</code> series. So, while there may be Pandas-specific methods to extract multiple attributes, this may be no more efficient than using a list or dictionary mapping. Below is a solution using <code>pd.concat</code>.</p>
<p><strong>Setup</strong></p>
<pre><code>df = pd.DataFrame({'Dates': ['2017-12-11 01:00:00', '2017-12-12 01:00:01',
                             '2019-05-12 15:15:00', '2019-06-22 03:25:14',
                             '2020-05-11 04:40:02', '2020-11-30 01:00:00']})

df['Dates'] = pd.to_datetime(df['Dates'])
</code></pre>
<p><strong>Solution</strong></p>
<pre><code>L = ['year', 'month', 'day', 'hour', 'minute', 'second', 'dayofyear',
     'week', 'weekofyear', 'dayofweek', 'weekday', 'quarter']

df = df.join(pd.concat([getattr(df['Dates'].dt, i).rename(i) for i in L], axis=1))
</code></pre>
<p><strong>Result</strong></p>
<pre><code>print(df)

                Dates  year  month  day  hour  minute  second  dayofyear  \
0 2017-12-11 01:00:00  2017     12   11     1       0       0        345   
1 2017-12-12 01:00:01  2017     12   12     1       0       1        346   
2 2019-05-12 15:15:00  2019      5   12    15      15       0        132   
3 2019-06-22 03:25:14  2019      6   22     3      25      14        173   
4 2020-05-11 04:40:02  2020      5   11     4      40       2        132   
5 2020-11-30 01:00:00  2020     11   30     1       0       0        335   

   week  weekofyear  dayofweek  weekday  quarter  
0    50          50          0        0        4  
1    50          50          1        1        4  
2    19          19          6        6        2  
3    25          25          5        5        2  
4    20          20          0        0        2  
5    49          49          0        0        4  
</code></pre>
</div>
