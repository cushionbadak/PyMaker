<div class="post-text" itemprop="text">
<p>The csv file has each row in the following format:</p>
<pre><code>527131607.9 Google Maps   
</code></pre>
<p>Where there is a total of 2 columns. For this, we are only interested in the first column.
I have been using the code:</p>
<pre><code>import datetime
with open("user1_nsdate.csv",'r') as f:
    for row in f:
       for t, val in enumerate(row):
          time = datetime.datetime.fromtimestamp(t+978307200).strftime('%Y-%m-%d %H:%M:%S')

          print(time)
</code></pre>
<p>However, the output is wrong as it is not converting 
correctly:</p>
<pre><code>2001-01-01 00:00:11
2001-01-01 00:00:00
2001-01-01 00:00:01
2001-01-01 00:00:02
2001-01-01 00:00:03
2001-01-01 00:00:04
2001-01-01 00:00:05
2001-01-01 00:00:06
</code></pre>
<p>When replacing 't' with an epoch time:</p>
<pre><code>import datetime
with open("user1_nsdate.csv",'r') as f:
    for row in f:
       for t, val in enumerate(row):
          time = datetime.datetime.fromtimestamp(527131607.9 + 978307200).strftime('%Y-%m-%d %H:%M:%S')

          print(time)
</code></pre>
<p>output:</p>
<pre><code>2017-09-15 02:26:47
2017-09-15 02:26:47
2017-09-15 02:26:47
2017-09-15 02:26:47
2017-09-15 02:26:47
</code></pre>
<p>But i need it to iterate over every row in the first column of the csv file</p>
</div>
<div class="post-text" itemprop="text">
<p>Change your <code>strftime</code> to <code>.strftime("%d-%m-%y %H:%M:%S")</code></p>
<pre><code>&gt;&gt;&gt; time = datetime.fromtimestamp(527131607.9+978307200).strftime("%d-%m-%y %H:%M:%S")
&gt;&gt;&gt; print(time)
15-09-17 02:26:47
</code></pre>
<p>There's info on all the format codes here:</p>
<p><a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a></p>
<p>Updated after your comment:</p>
<p>If your file looks like this.</p>
<pre><code>527131607.9
527131127.1
525123123.9
...
</code></pre>
<p>You could do something similar to this:</p>
<pre><code>with open('test.csv', 'r') as f:
  for row in f:
    time = datetime.fromtimestamp(float(row)+978307200).strftime("%d-%m-%y %H:%M:%S")
    print(time)
</code></pre>
<p>It's a very simple file. I don't think we need to use the built in csv module.</p>
</div>
<span class="comment-copy">Remove unnecessary words from your question title!</span>
<span class="comment-copy">Thank you, how would i go about changing the code so that instead of fromtimestamp(527131607.9+978307200) the loop runs over each value in each row in place of 527131607.9? I hope that makes sense</span>
<span class="comment-copy">Updated my answer.</span>
<span class="comment-copy">Thank you so much! i have been at this all day, its a relief to finally get somewhere!</span>
<span class="comment-copy">No problem! Happy to help.</span>
