<div class="post-text" itemprop="text">
<p>I came across something like this in python and not sure how to understand this code:</p>
<pre><code>somedict['some_key'] = some_val = form.some_field.data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>x = y = z</code> is equivalent to <code>x = z; y = z</code> (yes, in that order), except that <code>z</code> is evaluated only once.</p>
<p>Or, in terms of Python “compiled” code:</p>
<pre><code>&gt;&gt;&gt; compiled_code = compile("x = y = z", filename='con', mode='single')
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compiled_code)
  1           0 LOAD_NAME                0 (z)
              2 DUP_TOP
              4 STORE_NAME               1 (x)
              6 STORE_NAME               2 (y)
              8 LOAD_CONST               0 (None)
             10 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>somedict['some_key'] = some_val = form.some_field.data</code></p>
<p>this is the same thing as:</p>
<pre><code>some_val = form.some_field.data
somedict['some_key'] = some_val
</code></pre>
<p>order normally doesn't matter because only the one on the right can be something un-assignable like a method call, lambda call, keyword, etc...</p>
<p>some places I have seen this used in practice is something like:</p>
<p><code>new, assigned, complete = all_modes = "new assigned complete".split()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>For some semantic contexts, an assignment statement embodies a value, which is the value assigned to the variable on the left of the equals sign.  In this metaphor, you can regard this as</p>
<pre><code>x = (y = z)
</code></pre>
<p>The value of <code>z</code> is assigned to <code>y</code>; this is <em>also</em> the value of the assignment.  <em>That</em> is returned as the value of the expression in parentheses, which is then assigned to <code>x</code>.</p>
<p>In practice, the compiler simply leaves the value in a register and does a second "store" operation.</p>
</div>
<span class="comment-copy">If you just add a link to <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">the ref docs</a> this would cover everything there is to cover in just a few lines.</span>
<span class="comment-copy">The left size can’t be something unassignable—but <code>spam.eggs()[23]</code> is perfectly assignable. For that matter,  consider <code>a[0][0] = b[0][0] = c</code> when <code>b[0]</code> is <code>a</code>.</span>
<span class="comment-copy">compiler? register? I don't even think about python in those terms at all... even looking at the C api... but you are right about the syntax</span>
<span class="comment-copy">@GradyPlayer Yeah, the compiler in CPython and PyPy compiles to a stack machine, so you can’t just “leave the value in a register”. You <i>can</i> <code>DUP_TOP</code> it to put another reference to the value on the stack, but that’s about as close as it gets.</span>
