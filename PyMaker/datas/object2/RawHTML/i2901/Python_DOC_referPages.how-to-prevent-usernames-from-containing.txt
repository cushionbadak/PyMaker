<div class="post-text" itemprop="text">
<p>I'm using <a href="http://django-allauth.readthedocs.io/en/latest/configuration.html" rel="nofollow noreferrer">django-allauth</a>, and for some reason the username default allows:</p>
<p>"letters, digits and @/./+/-/_."</p>
<p>How can I ensure usernames are strictly alphanumeric (without <code>@/./+/-/_.</code>)?</p>
<p>I'm already using this <code>clean_username()</code> validator which currently works:</p>
<pre><code>class UsernameMaxAdapter(DefaultAccountAdapter):

    def clean_username(self, username):
        exclude = ['@', '/', '.', '+', '-', '/', '_', ',']
        if len(username) &gt; 20:
            raise ValidationError("Username can't be over 20 characters")
        for i in exclude:
            if i in username:
                raise ValidationError("Use only alphanumeric characters")
        return DefaultAccountAdapter.clean_username(self,username) # For other default validations.
</code></pre>
<p>Edit: Just realised both the validators are not working...trying to find the problem now..</p>
</div>
<div class="post-text" itemprop="text">
<p>I think python's builtin function <a href="https://docs.python.org/3/library/stdtypes.html#str.isalnum" rel="nofollow noreferrer"><strong><code>str.isalnum()</code></strong></a> could be usefull here.
<br/></p>
<pre><code>class UsernameMaxAdapter(DefaultAccountAdapter):
    def clean_username(self, username):
        # assumes "username" is a type of "str" object
        <b>if not username.isalnum():
            raise ValidationError("Use only alphanumeric characters")</b>
        # your logic</code></pre>
<p><br/><br/>
<strong>UPDATE-1</strong><br/>
set <code>ACCOUNT_USERNAME_VALIDATORS</code> in settings.py as mentioned in <a href="http://django-allauth.readthedocs.io/en/latest/configuration.html" rel="nofollow noreferrer">documentation</a><br/></p>
<pre><code>class CustomValidator(object):

    def __call__(self, username="", *args, **kwargs):
        username = username.isalnum()
        if not username:
            raise ValidationError("Use only alphanumeric characters")
</code></pre>
<p><br/>
in your <code>settings.py</code>,</p>
<pre><code>custom_username_validators = [CustomValidator()]
ACCOUNT_USERNAME_VALIDATORS = 'path.to.settings.custom_username_validators'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a> expression to ensure that a username contains only allowed characters. For alphanumeric characters the following should do the trick:</p>
<pre><code>import re
def is_valid_username(username):
    pattern = re.compile('([a-zA-Z]+|\d+)')
    return ''.join(re.findall(pattern, username)) == username
</code></pre>
<p>Here's an example of the output:</p>
<pre><code>username_list = ["WhatAGre4tUsern4me", "548ThatISAgoodUsername005",
                 "CheckOutMy_Username", "It'sAUsern@me"]
print([is_valid_username(u) for u in username_list])
&gt;&gt;&gt; [True, True, False, False]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I haven't used <code>django</code> and certainly don't know about its authorisation mechanisms, but I know that in plain <code>python</code>, if you wanted to carry this out, you could simply sanitise input by doing:</p>
<pre><code>newUserName = ''.join(ch for ch in oldUserName if ch.isalnum())
</code></pre>
<p>Essentially, I'm looping through each character and am appending them to the 'clean' username if the character is alphanumeric.</p>
<p>In your function, if the username doesn't comply with the alphanumeric restrictions, execute the statement above (place it under the <code>if</code>).</p>
</div>
<span class="comment-copy">Is username just a normal string?</span>
<span class="comment-copy">Also, what exactly does <code>clean_username()</code> do?</span>
<span class="comment-copy">Overwrites the default <code>clean_username()</code> for customization I believe. However if you see my edit, my 2nd function with <code>exclude</code> did not work (it still created the profile while using those characters).</span>
<span class="comment-copy">Surely it didn't work because you still <code>return</code>ed the original username afterwards?</span>
<span class="comment-copy">forgot to set <code>ACCOUNT_ADAPTER = 'app.forms.UsernameMaxAdapter'</code> in my settings.py which prevented my adapter function from executing. thanks for the help it's working now.</span>
<span class="comment-copy">I used this and I don't know why but it is still creating the profile.</span>
<span class="comment-copy">forgot to set <code>ACCOUNT_ADAPTER = 'app.forms.UsernameMaxAdapter'</code> in my settings.py. works perfect now thanks!</span>
<span class="comment-copy">Wow..that's cool. Anyway I updated the answer with <code>CustomValidator</code> class.You could try that also</span>
<span class="comment-copy">I have used this in my <code>clean_username()</code> function but it is still creating the profile - not sure why.</span>
<span class="comment-copy">The initial function is now not working so I am trying to get that fixed (once that works the alphanumeric validator code should work) - but I can't put <code>break</code> below <code>if len(username) &gt; 20:</code>, it is not allowed (<code>break</code> outside loop)</span>
