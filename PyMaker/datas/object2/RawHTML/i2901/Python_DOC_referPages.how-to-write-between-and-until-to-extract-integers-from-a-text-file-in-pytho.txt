<div class="post-text" itemprop="text">
<p>I have a lot of lines like below. </p>
<pre><code>_:9:_:SER _ 9 SER S 3 0.000 66.878  
_:11:_:LEU _ 11 LEU E 8 0.000 67.168    
_:108:_:ARG _ 108 ARG   1 0.000 62.398  
</code></pre>
<p>Each item is separated by a space. Because different lines have different numbers (e.g. <code>9</code>, <code>11</code>, <code>108</code>), the subsequent values are not aligned at the same column positions. In the 3rd line, there are 3 spaces between <code>ARG</code> and <code>1</code> because this line does not have that information so a space is used to fill it.</p>
<p>I need to extract two information</p>
<p>1) the <code>9</code>, <code>11</code>, <code>108</code> values at 1st, 2nd and 3rd lines, respectively</p>
<p>2) the <code>3</code>, <code>8</code>, <code>1</code> values (before the <code>0.000</code>) at 1st, 2nd and 3rd lines, respectively</p>
<p>I want to use python to write a generalised script to extract that information, instead of a lengthy <code>if-then loop</code> to consider one-digit, two-digit and three-digit cases individually.</p>
<p>My idea is something like this:</p>
<p>1) extract the integer values between the first and the second <code>:</code></p>
<p>2) extract the integer values after the 5th space, until another space is detected after that value. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you can get each line as a string, you can do this:</p>
<pre><code>your_line = "_:108:_:ARG _ 108 ARG   1 0.000 62.398"
splitted = your_line.split()
# splitted = ['_:108:_:ARG', '_', '108', 'ARG', '1', '0.000', '62.398']
</code></pre>
<p>Essentially, it makes a list of strings from the original list, delimited by the character you put in. If you don't give <code>split()</code> an argument then it just splits the string on any whitespace.</p>
<p>Now you can easily extract the information you want:</p>
<pre><code>info1 = splitted[2]
info2 = splitted[4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are only extracting numeric fields, you can use the regular expression <code>\d+(?:\.\d+)?</code>, which reads <strong>digits, then maybe a period and more digits</strong>.</p>
<p>Then you can use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a> to grab the numeric fields as a list, and then work with them.</p>
<pre><code>&gt;&gt;&gt; fields = re.findall(r'\d+(?:\.\d*)?', lines[0])
&gt;&gt;&gt; fields
['9', '9', '3', '0.000', '66.878']
&gt;&gt;&gt; (fields[0], fields[2])
('9', '3')
</code></pre>
</div>
<span class="comment-copy">Is there a letter missing on the <code>ARG</code> line? Or does the extra space indicate that the field is missing?</span>
<span class="comment-copy">the extra space indicates that field is missing. i.e. that line does not have that property, so use a space to fill it.</span>
<span class="comment-copy">But for the 1st and 2nd lines, it needs to use <code>splitted[5]</code> instead of <code>splitted[4]</code>. How to generalised it?</span>
<span class="comment-copy">You could check whether that single-character <code>S</code> or <code>E</code> or whatever was in <code>splitted[4]</code> (i.e. check if <code>splitted[4]</code> is not an integer) and if so then use <code>splitted[5]</code> instead</span>
<span class="comment-copy">It seems to be the way, could you please show me how to do it exactly? What do you mean by <code>\d+(?:\.\d+)?</code> ?</span>
<span class="comment-copy">That is the pattern for the regular expression. You can read the documentation on Python regular expressions at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org</a>.</span>
<span class="comment-copy">This is a pattern to recognize an integer or a float. <code>\d</code> means a digit,  <code>+</code> means one or more, <code>(?: )</code> means that the contents shouldn't be captured separately, <code>\.</code> is a literal <code>.</code>, <code>*</code> means any number, and <code>?</code> means optional. So, a <b>string of digits that are optionally followed by <code>.</code> and then more digits</b>.</span>
