<div class="post-text" itemprop="text">
<p>I am getting different results for conversion of float to int in my <strong>Hill Cipher</strong> code (during decryption). </p>
<p><strong>Code</strong>: <a href="https://github.com/krshrimali/Hill-Cipher/blob/master/hill_cipher.py" rel="nofollow noreferrer">https://github.com/krshrimali/Hill-Cipher/blob/master/hill_cipher.py</a></p>
<p><strong>Issue</strong>: <a href="https://github.com/krshrimali/Hill-Cipher/issues/1" rel="nofollow noreferrer">https://github.com/krshrimali/Hill-Cipher/issues/1</a></p>
<p><strong>Code</strong>:</p>
<pre><code># create empty plain text string
plain_text = ""
# result is a matrix [[260. 574. 439.]]
# addition of 65 because inputs are uppercase letters
for i in range(dimensions):
    plain_text += chr(int(result[0][i]) % 26 + 65)
</code></pre>
<p><strong>Output</strong>: ABS</p>
<p>(the cipher text - encrypted text - was POH)</p>
<p><strong>Result Matrix</strong>: (after multiplication of inverse with cipher key matrix)</p>
<pre><code>[[ 260. 574. 539.]]
</code></pre>
<p>After conversion to int:</p>
<pre><code>[260, 573, 538]
</code></pre>
<p>Can anyone explain why this happens and give a fix on this? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're using <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a>, which truncates toward zero.</p>
<p>Math with <code>float</code> values is inherently imprecise. If you don't understand why, the classic explanation is in <a href="https://www.itu.dk/~sestoft/bachelor/IEEE754_article.pdf" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Numbers</a>. But the short version is that every conversion and every intermediate calculation gets rounded to the nearest 52-bit fraction to the actual number. And that may mean that a calculation that would yield exactly 574 if performed with real numbers actually yields a number a tiny bit more or less than 574 when performed with <code>float</code>s. And if you end up with a number a tiny bit less than 574 and truncate it toward zero with<code>int</code>, you get <code>573</code>.</p>
<p>In this case, what you want to do is use <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round</code></a> instead, which rounds to the nearest integer. As long as you can be sure that your accumulated error is never as large as 0.5, that will do what you want. And, as long as you don't pick ridiculously huge key values (which would be pointless, because you don't get any more security that way), you can be sure of that.</p>
<p>However, there are two things worth considering here.</p>
<p>From a brief scan of the <a href="https://en.wikipedia.org/wiki/Hill_cipher" rel="nofollow noreferrer">Hill cipher</a> article at Wikipedia: It designed to be performed with quick pencil-and-paper operation. First, you don't need the inverse matrix, just a matrix that's inverse mod 26, which is easier to calculate, and means you stay in smaller numbers that are less likely to have this problem. And it means you can do all the math in integers, so the problem doesn't arise in the first place: create your matrix as an array with <code>dtype=int</code>, and there will be no rounding issues. And, as a bonus, if you <em>do</em> pick ridiculously huge key values, you'll get an error instead of incorrect results. (If you want to allow such values, you'd want to store Python unlimited-size <code>int</code> values in a <code>dtype=object</code> array. But if you don't need that, it just makes things slower and more complicated.)</p>
</div>
<span class="comment-copy">Presumably you have some flat value that's just below 574.0, so if you called <code>round</code> on it you'd get <code>574</code>â€”but you're calling <code>int</code>, which truncates, so you get <code>573</code>. Just don't do that.</span>
<span class="comment-copy">Thanks for responding. It works using <code>round()</code> function.</span>
<span class="comment-copy">Thanks for your answer, @abarnert. This makes sense, I should have used <code>dtype=int</code> in the first place only. Thanks!</span>
