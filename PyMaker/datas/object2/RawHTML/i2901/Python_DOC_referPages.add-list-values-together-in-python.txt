<div class="post-text" itemprop="text">
<p>I have a list that looks like this:</p>
<pre><code>['9,7,4', '10,5,6,5,5', '10,8,5,3,0', '8,4,2']
</code></pre>
<p>How can i convert the numbers to ints and add the individual string values together?</p>
<p>So the desired out put would be</p>
<pre><code>['20','31','26','14']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>map</code> to convert the splitted (using <code>,</code> as the delimiter) string values into <code>int</code> followed by a list comprehension to get the sum</p>
<pre><code>input_list = ['9,7,4', '10,5,6,5,5', '10,8,5,3,0', '8,4,2']
output = [str(sum(map(int, x.split(',')))) for x in input_list]
print (output)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['20', '31', '26', '14']
</code></pre>
<p>I edited after seeing your desired output as strings</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[sum(map(int, group.split(','))) for group in l]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Someone mentioned <code>eval</code>, so I think you should take this a step further with a safe-eval alternative:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; [ast.literal_eval(v.replace(',', '+')) for v in lst]
&gt;&gt;&gt; [20, 31, 26, 14]
</code></pre>
<p>One thing I like about this answer is that it is purely a non-functional approach (no <code>map</code> inside a list comprehension, which is fine but I don't really believe in mixing paradigms).</p>
<p>Obviously this will only work if you have numbers separated by a single comma, without any leading or trailing characters and invalid arithmetic expressions.    </p>
<p>I leave the conversion to string as an exercise.</p>
</div>
<div class="post-text" itemprop="text">
<p>If all strings are in this format you can try to use <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> function - this will convert numbers into tuples from which you can count sum.</p>
<pre><code>&gt;&gt;&gt; l = ['9,7,4', '10,5,6,5,5', '10,8,5,3,0', '8,4,2']
&gt;&gt;&gt; sums = [sum(numbers) for numbers in map(eval, l)]
&gt;&gt;&gt; sums
[20, 31, 26, 14]
</code></pre>
<p>If you want output list to contain strings these values can be easily mapped:</p>
<pre><code>[str(value) for value in sums]
# or
map(str, sums)
</code></pre>
</div>
<span class="comment-copy">loop through the list, split the strings by commas, convert to ints (<code>int(string)</code>) and sum the resultant list.</span>
<span class="comment-copy">You should do this, if I understood: 1) iterate through the strings, 2) split the strings on commas 3) convert split strings to integers, 4) merge the result into one list. Which part do you have a question about?</span>
<span class="comment-copy">So, the true question is: how to find the sum of <code>'9,7,4'</code>? (If you can do that, you can do the rest.) <code>split</code> the string, convert each fragment to an <code>int</code>, apply  <code>sum</code>, convert back to a <code>str</code>ing.</span>
<span class="comment-copy">Hey, i updated my question. Sorry for the confusion.</span>
<span class="comment-copy">@JamesHomes: If the answers below were helpful in solving your problem, you should <a href="https://stackoverflow.com/help/someone-answers">accept</a> the answer you find the best.</span>
<span class="comment-copy">using <code>map</code>  inside a list comprehension is quite expensive. I guess you ould use vectorized functions after splitting.</span>
<span class="comment-copy"><code>[str(sum(np.array(i.split(","),dtype="i"))) for i in input_list]</code></span>
