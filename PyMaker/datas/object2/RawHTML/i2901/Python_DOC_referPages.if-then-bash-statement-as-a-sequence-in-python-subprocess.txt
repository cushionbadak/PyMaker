<div class="post-text" itemprop="text">
<p>Is there any way to execute the <code>if-then</code> bash statement as a sequence in Python subprocess?
I can execute the <code>if-then</code> statement as a string, but I want to convert it into a sequence for a safer code.</p>
<p>This is my program at the moment. It uses string as the first input of the subprocess with <code>shell=True</code> argument.
</p>
<pre><code># this example works
import subprocess
p = subprocess.Popen('if [ ! -d "dir1" ]; then mkdir dir1; fi;', shell=True)
</code></pre>
<p>I want to convert the first argument as a sequence with <code>shell=False</code> argument, but I don't know how to make the statement above as a sequence. This is what I've tried.
</p>
<pre><code># this example does not work
import subprocess
p = subprocess.Popen(['if','[ ! -d "dir1" ];','then','mkdir','dir1;','fi;'], shell=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>if</code> is a shell keyword, not an external command, so you shouldn't use a list argument; the string has to be parsed and executed by the shell. (You can use <code>shell=True</code> with a list, but it's kind of pointless, since <code>Popen</code> has to concatenate the list items into a single string anyway.)</p>
<p>However, you don't need a shell <code>if</code> statement for this particular example, as the <code>-p</code> option to <code>mkdir</code> will instruct it to only create the directory if it doesn't already exit.</p>
<pre><code>p = subprocess.Popen(["mkdir", "-p", "dir1"])
</code></pre>
<p>Further, you don't need a subprocess at <em>all</em>, because Python provides its own wrapper around the system call that creates a directory.</p>
<pre><code>try:
    os.mkdir("dir1")
except FileExistsError:
    pass
</code></pre>
<p>(Catch and ignore the exception rather than checking if the directory exists first to avoid the race condition where someone could create the directory after you check for it but before you actually try to create it.)</p>
</div>
<span class="comment-copy">Each token should be a separate list item. <code>shlex.split()</code> will do it for you. Better yet, don't do that in the shell when Python can do it perfectly well.</span>
<span class="comment-copy">Your bash code in question can be easily converted into pure Python.  There's no need to involve subprocesses.</span>
<span class="comment-copy">At least in this example, you can just use <code>['mkdir', '-p', 'dir1']</code>; there's no need for the <code>if</code> statement (which, as an example of shell syntax, would <i>require</i> <code>shell=True</code>, since <code>if</code> is not an external command).</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir" rel="nofollow noreferrer">docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir</a> looks relevant, too: <code>Path("dir1").mkdir(exist_ok = True)</code></span>
<span class="comment-copy">Nice. I haven't really looked at <code>pathlib</code> much yet.</span>
