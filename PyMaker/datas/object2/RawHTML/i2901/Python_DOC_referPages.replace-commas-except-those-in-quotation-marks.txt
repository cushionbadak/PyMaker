<div class="post-text" itemprop="text">
<pre><code>Date,Time,Ref,Sen,ATN,Flow,PCB temp,Status,Battery,BC
2015/04/23,12:30:00,779581,908043,"-15,254",49,31,0,100,
2015/04/23,12:35:00,778715,907084,"-15,259",49,31,0,100,-127
2015/04/23,12:40:00,778299,906419,"-15,239",49,32,0,100,461
(...)
</code></pre>
<p>Hi, I have an ascii file like the one above where I am trying to replace the commas for semicolon. This is the code I am using:</p>
<pre><code>filein = open('Prueba1.txt')
fileout = open('Fin.txt', 'wt')
for line in filein:
    if line.startswith('20'):
        fileout.write( line.replace(',', ';') )
filein.close()
fileout.close()
</code></pre>
<p>The problem is that now I want to maintain the commas for the 5th column and also take of the quotation marks.
Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>I cannot comment because of not having enough reputation points. </p>
<p>Have you considered saving this as a csv file. </p>
<p>after saving it as csv file:</p>
<pre><code>import pandas as pd
v = pd.read_csv("check_delete.csv")
</code></pre>
<p>output:</p>
<pre><code>      Date            Time  Ref     Sen      ATN      Flow  PCB temp    Status  Battery BC
0   2015/04/23  12:30:00    779581  908043  -15,254 49  31  0   100   NaN
1   2015/04/23  12:35:00    778715  907084  -15,259 49  31  0   100   -127.0
2   2015/04/23  12:40:00    778299  906419  -15,239 49  32  0   100    461.0
</code></pre>
<p>You can read this as a dataframe.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an answer making use of the <code>split()</code> method if you do not want to use .csv files.</p>
<p>Let's consider the line to be: </p>
<p><code>line = '2015/04/23,12:35:00,778715,907084,"-15,259",49,31,0,100,-127'</code></p>
<p>First, split the line into three parts. One before the part in the quotes, the quoted part, and the part after the part in quotes.
This can be done by <code>line.split('"')</code>.</p>
<p>This will give us a list consisting of these three parts:</p>
<p><code>alist = ['2015/04/23,12:35:00,778715,907084,', '-15,259', ',49,31,0,100,-127']</code></p>
<p>Now, split the first and last elements of the list by the comma.
And add all the elements to an empty string.
Write this string to your new file.</p>
<p>Like this:</p>
<pre><code>left_part = alist[0].split(',')
right_part = alist[2].split(',')
middle_part = alist[1]
final_list = left_part + [middle_part] + right_part
new_line = ''
for part in final_list:
    # to prevent the empty strings to be added add the if condition.
    if part:
        new_line += part + ';' 
</code></pre>
<p>The final result should look like this:</p>
<p><code>'2015/04/23;12:35:00;778715;907084;-15,259;49;31;0;100;-127;'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>A solution using the <a href="https://docs.python.org/3.7/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> Python standard library:</p>
<pre><code>import csv

with open('example.csv', newline='') as inputfile, \
     open('parsedcsv.csv', 'w',  newline='') as outpufile:

    datareader = csv.reader(inputfile, delimiter=',', quotechar='"')

    csvwriter = csv.writer(outpufile, delimiter=';',
            quotechar="'", quoting=csv.QUOTE_MINIMAL)

    csvwriter.writerows(datareader)
</code></pre>
<p>Quote from the documentation about the <a href="https://docs.python.org/3/library/csv.html#csv.QUOTE_MINIMAL" rel="nofollow noreferrer">QUOTE_MINIMAL</a> option:</p>
<blockquote>
<p>csv.QUOTE_MINIMAL: Instructs writer objects to only quote those fields
  which contain special characters such as delimiter, quotechar or any
  of the characters in lineterminator.</p>
</blockquote>
<p>The output file is:</p>
<pre><code>Date;Time;Ref;Sen;ATN;Flow;PCB temp;Status;Battery;BC
2015/04/23;12:30:00;779581;908043;-15,254;49;31;0;130;
2015/04/23;12:35:00;778715;907084;-15,259;49;31;0;100;-127
2015/04/23;12:40:00;778299;906419;-15,239;49;32;0;100;461
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Could you post what you are looking for as a result example? What do you mean by 
<code>also take of the quotation marks</code></p>
<p>This might help</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>import re

x=\
'''
015/04/23,12:30:00,779581,908043,"-15,254",49,31,0,100,
2015/04/23,12:35:00,778715,907084,"-15,259",49,31,0,100,-127
2015/04/23,12:40:00,778299,906419,"-15,239",49,32,0,100,461
'''
print re.sub(r"(\,)(?!\")", ";", x)

015/04/23;12:30:00;779581;908043,"-15;254";49;31;0;100;
2015/04/23;12:35:00;778715;907084,"-15;259";49;31;0;100;-127
2015/04/23;12:40:00;778299;906419,"-15;239";49;32;0;100;461</code></pre>
</div>
</div>
</p>
<p>Just do an regex replace each line.</p>
<p><code>\, matches the character , literally (case sensitive)</code></p>
<p><code>Negative Lookahead (?!\")</code></p>
<p><code>Assert that the Regex below does not match</code></p>
<p><code>\" matches the character " literally (case sensitive)</code></p>
</div>
<span class="comment-copy"><code>v.to_csv('new.csv',sep=';',index=False)</code> will save it as a new csv file with <code>;</code> as the delimiter.</span>
<span class="comment-copy">Thanks a lot. This panda library is amazing!</span>
<span class="comment-copy">To me, it is more of a comment rather than an answer. Also, OP does not want to replace all the <code>,</code> with <code>;</code></span>
