<div class="post-text" itemprop="text">
<p>I have a problem in which users can input spaces or nothing and still pass through the program, how do I go about preventing this? I am still a beginner at python. </p>
<pre><code>def orderFunction(): # The function which allows the customer to choose delivery or pickup
    global deliveryPickup
    deliveryPickup = input("Please input delivery or pickup: d for delivery p for pickup")
    if deliveryPickup == "d": 
        global customerName
        while True:
            try:
                customerName = (input("Please input your name"))
                if customerName == (""):
                    print("Please input a valid name")
                else:
                    break
        global customerAddress
        while True:
            try:
                customerAddress = (input("Please input your name"))
                if customerAddress == (""):
                    print("Please input a valid Address")
                else:
                    break
        global customerPhnum
        while True: 
            try: 
                customerPhnum = int(input("Please input your phone number"))
            except ValueError:
                print("Please input a valid phone number")
            else:
                break
            print("There will also be a $3 delivery surcharge")
    elif deliveryPickup == "p": 
        customerName = (input("Please input your name"))
        if customerName == (""):
            print("Please input a valid name")
            orderFunction()

    else:
        print("Please ensure that you have chosen d for Delivery or p for Pickup")
        orderFunction()

orderFunction()   
</code></pre>
<p>Here is my attempt at doing this but I get all kinds of unindent and indent errors at the moment and I think my while loops are probably wrong. </p>
<p>Essentially if I input a space or hit enter into one of the customer inputs (customerName for instance) it gets stored. This needs to prevented and I have tried to fix it by using while loops which obviously haven't worked.</p>
<p>Hopefully someone has a solution to this problem</p>
<p>Many Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>.strip()</code> removes all tabs or spaces before and after a string.
Meaning all spaces == empty string. All tabs == empty string. So all you have to check if the length of that string != 0 or the string is not empty. Just use an infinite loop to keep on forcing the right input.</p>
<p>Also as a tip, you don't have to limit yourself into one function.
Here's a working code below.</p>
<pre><code>def getNonBlankInput(message, error_message):

    x = input(message)
    while len(x.strip()) == 0:
        x = input(error_message)

    return x

def getValidIntegerInput(message, error_message):

    msg = message
    while(True):
        try: 
            x = int(input(msg))
            break
        except ValueError:
            msg = error_message

    return x


def orderFunction(): # The function which allows the customer to choose delivery or pickup
    global deliveryPickup
    global customerName
    global customerAddress
    global customerPhnum

    deliveryPickup = input("Please input delivery or pickup: d for delivery p for pickup")

    if deliveryPickup == "d": 
        customerName = getNonBlankInput("Please input your name: ", "Please input a valid name: ")
        customerAddress = getNonBlankInput("Please input your address: ", "Please input a valid address: ")
        customerPhnum = getValidIntegerInput("Please input your phone number: ", "Please input a valid phone number: ")
        print("There will also be a $3 delivery surcharge")
    elif deliveryPickup == "p": 
        customerName = getNonBlankInput("Please input your name: ", "Please input a valid name: ")
    else:
        print("Please ensure that you have chosen d for Delivery or p for Pickup")
        orderFunction()

orderFunction() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using a <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expression</a> that checks if any character between "A-Z" has been inserted, if not, give an error </p>
</div>
<div class="post-text" itemprop="text">
<p>The while loops are a decent solution, you just need to add more checks to your if statements. </p>
<p>First, you don't need a try statement on the top two loops. Don't use a try statement unless you're expecting an error, which you need to handle with an except statement, like you do in the bottom while loop.</p>
<p>Then you just need to add more conditions to your top two loops, I don't know exactly what you want to prevent, but you could try checking the length of the input, also see this answer for an interesting method: 
<a href="https://stackoverflow.com/a/2405300/8201979">https://stackoverflow.com/a/2405300/8201979</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using input right away you can make a function similar to this one that will only allow valid inputs.</p>
<p>You can use this <code>valid_input</code> function instead of <code>input</code>.</p>
<pre><code>def valid_input(text):
    not_valid = True
    res = ''
    while not_valid:
        res = input(text)
        if res.split():  # if text is empty or only spaces, this creates an empty list evaluated at False
            not_valid = False
    return res
</code></pre>
<p>here the check is pretty simple: every text made out of nothing or spaces won't be allowed and we will keep asking for the same input until a valid information is given.</p>
<p>I made this code simple just so you get a general idea. But you can change the validation test to your liking and maybe also output a warning saying why the input wasn't allowed so the person knows what to do. You can do more advanced validation with regex, and maybe you need a minimum text length etc...</p>
</div>
<div class="post-text" itemprop="text">
<p>You have indent error because you have a <code>try</code> statement without the corresponding <code>except</code>.
You need both to make it work (as you did in the Phone number section).</p>
<p>Here is a link to the try/except: <a href="https://docs.python.org/2/tutorial/errors.html" rel="nofollow noreferrer">docs</a></p>
<p>Also, you can check if a string is empty as detailed in <a href="https://stackoverflow.com/questions/9573244/most-elegant-way-to-check-if-the-string-is-empty-in-python">this</a> answer.</p>
<p>So for example you want to write:</p>
<pre><code>        try:
            customerName = input("Please input your name")
            if not customerName:
                print("Please input a valid name")
            else:
                break
        except ValueError:
                print("Please input a valid name")
</code></pre>
<p>Although the above seems a bit redundant, so you might want to raise an exception if the customer name is empty, catch the exception in the <code>except</code> block, print the warning and return error (or something else).</p>
<pre><code>        try:
            customerName = input("Please input your name")
            if not customerName:
                raise ValueError
        except ValueError:
            print("Please input a valid name")
        else:
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try adding another while true for pick and delivery option so that it can prevent taking other inputs</p>
</div>
<div class="post-text" itemprop="text">
<p>you don't need any of those try/excepts (which are broken anyway).</p>
<p>Its difficult to figure out what you're trying to do, are you trying to raise an exception if an empty string is passed, or request another input from the user? You seem to be half implementing both at the moment.</p>
<p>If its the latter, something like this would work.</p>
<pre><code>def func(fieldname):
    while True:
        val = input("Please input your {}".format(fieldname))
        if val.strip() != "":
            break
        else:
            print("Please input a valid {}".format(fieldname))
    return val

delivery_pickup = input("Please input delivery or pickup: d for delivery p for pickup")

if delivery_pickup == "d":
    customer_name = func("name")
    address = func("address")
    phone_number = func("phone number")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you are looking for is the <code>str.strip</code> method that remove trailing whitespace in strings.
Also I think try is not particularly suited for your needs here.</p>
<pre><code>customerName = input("Please input your name")
while not customerName.strip():
    customerName = input("Please input a valid name")
</code></pre>
<p>for the phone number I would not convert to integer because if the phone number starts with zeros, they will not be stored.</p>
</div>
<span class="comment-copy">Try checking out <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">string templates</a>. They're incredibly useful for getting input such as customer information.</span>
<span class="comment-copy">Do you have a way to make sure the phone number isn't a negative integer?</span>
<span class="comment-copy"><code>customerPhnum &gt; 0</code>  will do, altough i do not think that intergers are a particularly good representation for phone numbers.</span>
<span class="comment-copy">Also in Python an empty string behaves as <code>False</code> in conditions. Therefore <code>while len(x.strip()) == 0</code> can be replaced with <code>while not x.strip()</code></span>
<span class="comment-copy">okay, I sorta understand but where do I place the customerPhnum &gt; 0?</span>
<span class="comment-copy">0 is false and &gt; 0 is true in python as well. Alexis is right. In the real world phone numbers are strings since people sometimes add + or any other symbols along with their phone number.</span>
<span class="comment-copy">It would be cleaner to put your condition directly in the while rather than manually break. Note: <code>if val.strip() != ""</code> is equivalent to <code>if val.strip()</code> because empty strings behave as <code>False</code> in conditions.</span>
