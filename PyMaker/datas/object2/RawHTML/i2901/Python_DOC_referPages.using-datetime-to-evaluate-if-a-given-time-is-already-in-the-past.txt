<div class="post-text" itemprop="text">
<p>This is my current code:    </p>
<pre><code>import requests
import json

res = requests.get("http://transport.opendata.ch/v1/connections? 
from=Baldegg_kloster&amp;to=Luzern&amp;fields[]=connections/from/prognosis/departure")

parsed_json = res.json()

time_1 = parsed_json['connections'][0]['from']['prognosis']
time_2 = parsed_json['connections'][1]['from']['prognosis']
time_3 = parsed_json['connections'][2]['from']['prognosis']
</code></pre>
<p>The JSON data looks like this:</p>
<pre><code>{
    "connections": [
        {"from": {"prognosis": {"departure": "2018-08-04T14:21:00+0200"}}},
        {"from": {"prognosis": {"departure": "2018-08-04T14:53:00+0200"}}},
        {"from": {"prognosis": {"departure": "2018-08-04T15:22:00+0200"}}},
        {"from": {"prognosis": {"departure": "2018-08-04T15:53:00+0200"}}}
    ]
}
</code></pre>
<p>Time_1, 2 and 3 all contain different times where the train departs. I want to check if time_1 is already in the past, and time_2 now is the relevant time. In my opinion, using datetime.now to get the current time and then using If / elif to check if time_1 is sooner than datetime.now would be a viable option. I am new to coding, so I am unsure if this is a good way of doing it. Would this work and are there any better ways? </p>
<p>PS: I am planning to make a display that displays the time the next train leaves. Therefore, it would have to check if the time is still relevant over and over again.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code extracts all the departure time strings from the JSON data, and converts the valid time strings to datetime objects. It then prints the current time, and then a list of the departure times that are still in the future. </p>
<p>Sometimes the converted JSON has <code>None</code> for a departure time, so we need to deal with that. And we need to get the current time as a timezone-aware object. We <em>could</em> just use the UTC timezone, but it's more convenient to use the local timezone from the JSON data.</p>
<pre><code>import json
from datetime import datetime
import requests

url = "http://transport.opendata.ch/v1/connections? from=Baldegg_kloster&amp;to=Luzern&amp;fields[]=connections/from/prognosis/departure"
res = requests.get(url)
parsed_json = res.json()

# Extract all the departure time strings from the JSON data
time_strings = [d["from"]["prognosis"]["departure"]
    for d in parsed_json["connections"]]
#print(time_strings)

# The format string to parse ISO 8601 date + time strings 
iso_format = "%Y-%m-%dT%H:%M:%S%z"

# Convert the valid time strings to datetime objects 
times = [datetime.strptime(ts, iso_format) 
    for ts in time_strings if ts is not None]

# Grab the timezone info from the first time
tz = times[0].tzinfo
# The current time, using the same timezone
nowtime = datetime.now(tz)
# Get rid of the microseconds
nowtime = nowtime.replace(microsecond=0)
print('Now', nowtime)

# Print the times that are still in the future
for i, t in enumerate(times):
    if t &gt; nowtime:
        diff = t - nowtime
        print('{}.  {} departing in {}'.format(i, t, diff))
</code></pre>
<p><strong>output</strong></p>
<pre><code>Now 2018-08-04 17:17:25+02:00
1.  2018-08-04 17:22:00+02:00 departing in 0:04:35
2.  2018-08-04 17:53:00+02:00 departing in 0:35:35
3.  2018-08-04 18:22:00+02:00 departing in 1:04:35
</code></pre>
<hr/>
<p>That query URL is a bit ugly, and not convenient if you want to check on other stations. It's better to let <code>requests</code> build the query URL for you from a dictionary of parameters. And we should also check that the request was successful, which we can do with the <a href="http://docs.python-requests.org/en/master/api/#requests.Response.raise_for_status" rel="nofollow noreferrer"><code>raise_for_status</code></a> method.</p>
<p>Just replace the top section of the script with this:</p>
<pre><code>import json
from datetime import datetime
import requests

endpoint = "http://transport.opendata.ch/v1/connections"

params = {
    "from": "Baldegg_kloster",
    "to": "Luzern",
    "fields[]": "connections/from/prognosis/departure",
}

res = requests.get(endpoint, params=params)
res.raise_for_status()
parsed_json = res.json()
</code></pre>
<hr/>
<p>If you've never used <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> before, it can be a little confusing at first. Here's a brief demo of three different ways to loop over a list of items and print each item and its index number.</p>
<pre><code>things = ['zero', 'one', 'two', 'three']
for i, word in enumerate(things):
    print(i, word)

for i in range(len(things)):
    word = things[i]
    print(i, word)

i = 0
while i &lt; len(things):
    word = things[i]
    print(i, word)
    i = i + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I didn't understand your question properly. I think you are trying to compare two time. </p>
<p>First let's see the contents of <code>time_1</code>: </p>
<p><code>{'departure': '2018-08-04T15:24:00+0200'}</code></p>
<p>So add <code>departure</code> key to access time. To parse the date and time string to python understandable time we use <code>datetime.strptime()</code> method. See this <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">link</a> for further description on <code>datatime.strptime()</code></p>
<p>The modified version of your code that does time comparision:</p>
<pre><code>import requests
import json
from datetime import datetime

res = requests.get("http://transport.opendata.ch/v1/connections? from=Baldegg_kloster&amp;to=Luzern&amp;fields[]=connections/from/prognosis/departure")

parsed_json = res.json()

time_1 = parsed_json['connections'][0]['from']['prognosis']['departure']
time_2 = parsed_json['connections'][1]['from']['prognosis']['departure']
time_3 = parsed_json['connections'][2]['from']['prognosis']['departure']

mod_time_1 = datetime.strptime(time_1,'%Y-%m-%dT%H:%M:%S%z')
mod_time_2 = datetime.strptime(time_2,'%Y-%m-%dT%H:%M:%S%z')

# you need to provide datetime.now() your timezone.
timezone = mod_time_1.tzinfo
time_now = datetime.now(timezone)
print(time_now &gt; mod_time_1)
</code></pre>
</div>
<span class="comment-copy">How is the time formatted? Could you add some input examples?</span>
<span class="comment-copy">Thanks for the nice and clean answer, it really helped me a lot! However, I still have a question: What do i and t stand for in the For Loop? I changed i to a and t to b and it still worked. Now I'm confused on how the programme knows what i and t stand for.</span>
<span class="comment-copy">@DominikSidler I'm glad my answer has helped you. Please consider <a href="http://meta.stackexchange.com/a/5235">accepting</a> it. ;) In that <code>for</code> loop we use the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> function to loop over the <code>times</code> list. On each iteration of the loop <code>t</code> gets set to the next <code>datetime</code> in the list and <code>i</code> is the loop index: a counter that starts at 0.</span>
<span class="comment-copy">@DominikSidler We can use any names we like, I just used <code>i</code> for index, because that's a common practice, and I used <code>t</code> to stand for <code>time</code>. I guess I should have used a more meaningful name, like <code>departure_time</code>, but I'm lazy. ;) You may find this article helpful: <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, which was written by SO veteran Ned Batchelder.</span>
<span class="comment-copy">Thanks, but I'm still confused: How does the program know that <code>i</code> stands for Index and <code>t</code> for time? Because I thought you had to define them as you define <code>x = 25</code></span>
<span class="comment-copy">@DominikSidler Well, the program doesn't really "know" that <code>i</code> stands for Index. On each round through the <code>for</code> loop, <code>enumerate(times)</code> produces an <code>(index, value)</code> pair, (where <code>value</code> is the next item from the <code>times</code> list), and the <code>for i, t in ...</code> syntax says to assign that pair to <code>i</code> and <code>t</code>.</span>
