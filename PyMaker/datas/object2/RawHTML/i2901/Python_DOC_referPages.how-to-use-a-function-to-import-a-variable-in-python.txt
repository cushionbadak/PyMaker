<div class="post-text" itemprop="text">
<p>I want to write a function which takes the name of a variable, a file name, and a third string, and tries to import the given variable from the file and if it can not do that, it sets the variable to the third string. Let me show you. This is in my config.py:</p>
<pre><code>variable = 'value'
</code></pre>
<p>This is my function (it doesn't work):</p>
<pre><code>#!/usr/bin/python

def importvar (var, fname, notfound) :

    try:
        from fname import var

    except:
        var = notfound

    return var;

value = importvar ('variable', 'config', 'value not found')

print value     #prints 'value not found'
</code></pre>
<p>This is what I am trying to achieve:</p>
<pre><code>from config import variable

print variable     #prints 'value'
</code></pre>
<p>This question is similar to "How to use a variable name as a variable in python?", but the answers I found to those didn't seem to work for me. I don't necessarily need to store them in a variable, but I couldn't come up with anything better. I know this is a perfect example of "What you shouldn't do in python", but I still need this. Thanks for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want to do is dynamically importing a module starting from a string describing the path of the module. You can do this by using <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">import_module</a> from the <em>importlib</em> package. </p>
<pre><code>import importlib

def importvar (var, fname, notfound) :
    try:
        return getattr(importlib.import_module(fname), var)
    except:
        return notfound
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should give you the clue:</p>
<pre><code>&gt;&gt;&gt; from importlib import import_module
&gt;&gt;&gt; config = import_module('config')
&gt;&gt;&gt; print( getattr(config, 'variable') )
value
</code></pre>
<p>See the docs for <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">getattr</a>.<br/>
Basically, <code>getattr(x, 'variable')</code> is equivalent to <code>x.variable</code></p>
</div>
<div class="post-text" itemprop="text">
<p>a function for import &amp; return imported variable:</p>
<pre><code>def importvar (var, fname, notfound):
    try:
        exec('from {f} import {v}'.format(f=fname, v=var))
        return locals().get(var, notfound)
    except:
        return notfound
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want a simple import from a string, the <code>__import__</code> builtin may be good enough. It takes the module name as a string and returns it. If you also need to get an attribute from it programmatically use the builtin <code>getattr</code>, which takes the attribute name as a string.</p>
<p>If you're trying to import a package submodule, though, <code>importlib.import_module</code> is easier--you can import a name with a dot in it and get the module directly. This just calls <code>__import__</code> for you. Compare <code>__import__("logging.config").config</code> vs <code>import_module("logging.config")</code>.</p>
<p>If you're trying to import an arbitrary file not on the Python path, it gets a little more involved. The Python docs <a href="https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly" rel="nofollow noreferrer">have a recipe</a> for this.</p>
<pre><code>import importlib.util

spec = importlib.util.spec_from_file_location(module_name, file_path)
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)
</code></pre>
<p>Unlike <code>__import__</code>, this doesn't add the module to the cache, because it doesn't have a canonical import name. But you can add it yourself (using whatever name you want) if you want to import it normally later, e.g.</p>
<pre><code>import sys
sys.modules["foo_module"] = module
</code></pre>
<p>After running this, it allows you to get the same module instance again with a simple</p>
<pre><code>import foo_module
</code></pre>
</div>
<span class="comment-copy">What you want to do is using import_module <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">But really you should explain why you think you need this.</span>
<span class="comment-copy">@DanielRoseman I need to import many variables from many different files in one project, and i want do not want to type this try... else... so many times</span>
<span class="comment-copy">Great answer! Exactly what I was looking for!</span>
<span class="comment-copy">This is not enough, since the OP wants to pass the module (<code>config</code> in this case) dynamically as well.</span>
<span class="comment-copy">This doesn't handle the case where <code>variable</code> is submodule of <code>config</code>.</span>
<span class="comment-copy">return locals().get(var) is enough, you don't need to provide an 'else' because <code>try</code> stops when it cannot execute importing the variable</span>
<span class="comment-copy">@TheAdam122 Not true. <code>locals().get(value)</code> == <code>locals().get(value, None)</code></span>
<span class="comment-copy">@ppperry I know, but less typing is always better in my opinion :)</span>
