<div class="post-text" itemprop="text">
<p>It seems they canceled in Python 3 all the easy way to quickly load a script by removing <code>execfile()</code> </p>
<p>Is there an obvious alternative I'm missing?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.3/whatsnew/3.0.html?highlight=execfile#builtins" rel="noreferrer">According to the documentation</a>, instead of </p>
<pre><code>execfile("./filename") 
</code></pre>
<p>Use</p>
<pre><code>exec(open("./filename").read())
</code></pre>
<p>See:</p>
<ul>
<li><a href="http://docs.python.org/3.3/whatsnew/3.0.html?highlight=execfile#builtins" rel="noreferrer">Whatâ€™s New In Python 3.0</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You are just supposed to read the file and exec the code yourself. 2to3 current replaces</p>
<pre><code>execfile("somefile.py", global_vars, local_vars)
</code></pre>
<p>as</p>
<pre><code>with open("somefile.py") as f:
    code = compile(f.read(), "somefile.py", 'exec')
    exec(code, global_vars, local_vars)
</code></pre>
<p>(The compile call isn't strictly needed, but it associates the filename with the code object making debugging a little easier.)</p>
<p>See:</p>
<ul>
<li><a href="http://docs.python.org/release/2.7.3/library/functions.html#execfile" rel="noreferrer">http://docs.python.org/release/2.7.3/library/functions.html#execfile</a></li>
<li><a href="http://docs.python.org/release/3.2.3/library/functions.html#compile" rel="noreferrer">http://docs.python.org/release/3.2.3/library/functions.html#compile</a></li>
<li><a href="http://docs.python.org/release/3.2.3/library/functions.html#exec" rel="noreferrer">http://docs.python.org/release/3.2.3/library/functions.html#exec</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>While <code>exec(open("filename").read())</code> is often given as an alternative to <code>execfile("filename")</code>, it misses important details that <code>execfile</code> supported.</p>
<p>The following function for Python3.x is as close as I could get to having the same behavior as executing a file directly. That matches running <code>python /path/to/somefile.py</code>.</p>
<pre class="lang-py prettyprint-override"><code>def execfile(filepath, globals=None, locals=None):
    if globals is None:
        globals = {}
    globals.update({
        "__file__": filepath,
        "__name__": "__main__",
    })
    with open(filepath, 'rb') as file:
        exec(compile(file.read(), filepath, 'exec'), globals, locals)

# execute the file
execfile("/path/to/somefile.py")
</code></pre>
<p><strong>Notes:</strong></p>
<ul>
<li>Uses binary reading to avoid encoding issues</li>
<li>Guaranteed to close the file <em>(Python3.x warns about this)</em></li>
<li>Defines <code>__main__</code>, some scripts depend on this to check if they are loading as a module or not for eg. <code>if __name__ == "__main__"</code></li>
<li>Setting <code>__file__</code> is nicer for exception messages and some scripts use <code>__file__</code> to get the paths of other files relative to them.</li>
<li><p>Takes optional globals &amp; locals arguments, modifying them in-place as <code>execfile</code> does - so you can access any variables defined by reading back the variables after running.</p></li>
<li><p>Unlike Python2's <code>execfile</code> this does <strong>not</strong> modify the current namespace by default. For that you have to explicitly pass in <code>globals()</code> &amp; <code>locals()</code>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://mail.python.org/pipermail/python-dev/2014-June/134992.html" rel="noreferrer">suggested on the python-dev</a> mailinglist recently, the <a href="https://docs.python.org/3/library/runpy.html" rel="noreferrer">runpy</a> module might be a viable alternative. Quoting from that message:</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/runpy.html#runpy.run_path" rel="noreferrer">https://docs.python.org/3/library/runpy.html#runpy.run_path</a></p>
<pre><code>import runpy
file_globals = runpy.run_path("file.py")
</code></pre>
</blockquote>
<p>There are subtle differences to <code>execfile</code>:</p>
<ul>
<li><p><code>run_path</code> always creates a new namespace. It executes the code as a module, so there is no difference between globals and locals (which is why there is only a <code>init_globals</code> argument). The globals are returned.</p>
<p><code>execfile</code> executed in the current namespace or the given namespace. The semantics of <code>locals</code> and <code>globals</code>, if given, were similar to locals and globals inside a class definition.</p></li>
<li><p><code>run_path</code> can not only execute files, but also eggs and directories (refer to its documentation for details).</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could write your own function:</p>
<pre><code>def xfile(afile, globalz=None, localz=None):
    with open(afile, "r") as fh:
        exec(fh.read(), globalz, localz)
</code></pre>
<p>If you really needed to...</p>
</div>
<div class="post-text" itemprop="text">
<p>This one is better, since it takes the globals and locals from the caller:</p>
<pre><code>import sys
def execfile(filename, globals=None, locals=None):
    if globals is None:
        globals = sys._getframe(1).f_globals
    if locals is None:
        locals = sys._getframe(1).f_locals
    with open(filename, "r") as fh:
        exec(fh.read()+"\n", globals, locals)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the script you want to load is in the same directory than the one you run, maybe "import" will do the job ?</p>
<p>If you need to dynamically import code the built-in function <a href="http://docs.python.org/library/functions.html#__import__" rel="nofollow noreferrer">__ import__</a> and the module <a href="http://docs.python.org/library/imp.html" rel="nofollow noreferrer">imp</a> are worth looking at.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path = ['/path/to/script'] + sys.path
&gt;&gt;&gt; __import__('test')
&lt;module 'test' from '/path/to/script/test.pyc'&gt;
&gt;&gt;&gt; __import__('test').run()
'Hello world!'
</code></pre>
<p>test.py:</p>
<pre><code>def run():
        return "Hello world!"
</code></pre>
<p>If you're using Python 3.1 or later, you should also take a look at <a href="http://docs.python.org/release/3.1/library/importlib.html" rel="nofollow noreferrer">importlib</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's what I had (<code>file</code> is already assigned to the path to the file with the source code in both examples):</p>
<pre><code>execfile(file)
</code></pre>
<p>Here's what I replaced it with:</p>
<pre><code>exec(compile(open(file).read(), file, 'exec'))
</code></pre>
<p>My favorite part: the second version works just fine in both Python 2 and 3, meaning it's not necessary to add in version dependent logic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that the above pattern will fail if you're using PEP-263 encoding declarations
that aren't ascii or utf-8. You need to find the encoding of the data, and encode it 
correctly before handing it to exec().</p>
<pre><code>class python3Execfile(object):
    def _get_file_encoding(self, filename):
        with open(filename, 'rb') as fp:
            try:
                return tokenize.detect_encoding(fp.readline)[0]
            except SyntaxError:
                return "utf-8"

    def my_execfile(filename):
        globals['__file__'] = filename
        with open(filename, 'r', encoding=self._get_file_encoding(filename)) as fp:
            contents = fp.read()
        if not contents.endswith("\n"):
            # http://bugs.python.org/issue10204
            contents += "\n"
        exec(contents, globals, globals)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also, while not a pure Python solution, if you're using IPython (as you probably should anyway), you can do:</p>
<pre><code>%run /path/to/filename.py
</code></pre>
<p>Which is equally easy.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm just a newbie here so maybe it's pure luck if I found this :</p>
<p>After trying to run a script from the interpreter prompt &gt;&gt;&gt; with the command</p>
<pre><code>    execfile('filename.py')
</code></pre>
<p>for which I got a "NameError: name 'execfile' is not defined" I tried a very basic </p>
<pre><code>    import filename
</code></pre>
<p>it worked well :-)</p>
<p>I hope this can be helpful and thank you all for the great hints, examples and all those masterly commented pieces of code that are a great inspiration for newcomers ! </p>
<p>I use Ubuntu 16.014 LTS x64.  <em>Python 3.5.2 (default, Nov 17 2016, 17:05:23) 
[GCC 5.4.0 20160609] on linux</em></p>
</div>
<span class="comment-copy"><code>reload</code> is back, as <a href="http://docs.python.org/3/library/imp.html#imp.reload" rel="nofollow noreferrer"><code>imp.reload</code></a>, since 3.2.</span>
<span class="comment-copy">If you are using Python interactively consider using IPython: <code>%run script_name</code> works with all version of Python.</span>
<span class="comment-copy">Since 3.4 <code>imp</code> is <code>importlib</code>  (which must be imported): <code>importlib.reload(mod_name)</code> imports and executes <code>mod_name</code>.</span>
<span class="comment-copy">what's wrong with runfile("filename.py") ?</span>
<span class="comment-copy">Any idea why they would do such a thing? This is so much more verbose than before. Also, it doesn't work for me on Python3.3. I get "No such file or directory" when I exec(open('./some_file').read()). I have tried including the '.py' extension and also excluding the './' as well</span>
<span class="comment-copy">Less trivially, this doesn't provide line numbers when exceptions are raised, as did execfile().</span>
<span class="comment-copy">You'll need to <code>close</code> that file handle too. Another reason to dislike the change from python 2.</span>
<span class="comment-copy">@Rebs you don't need to close the file handle in that example, it will be done automatically (at least in regular CPython)</span>
<span class="comment-copy">@Rebs in CPython objects are garbage-collected as soon as their reference count goes to 0, only circular references may delay this (<a href="http://stackoverflow.com/questions/9449489/when-are-objects-garbage-collected-in-python" title="when are objects garbage collected in python">stackoverflow.com/questions/9449489/â€¦</a>). In that case that should happen right after read() returns. And file objects are closed on deletion (NB: I realize this link explicitly says "always close files", which is indeed good practice to follow in general)</span>
<span class="comment-copy">This works for me. However, I noticed that you've written the local and global arguments in the wrong order. It's actually: exec(object[, globals[, locals]]). Of course if you had the arguments flipped in the original, then 2to3 will produce exactly what you said. :)</span>
<span class="comment-copy">Was pleased to discover that, if you can omit global_vars and local_vars, the python3 replacement here works under python2 as well. Even though <code>exec</code> is a statement in python2, <code>exec(code)</code> works because the parens just get ignored.</span>
<span class="comment-copy">+1 for using compile. My <code>"somefile.py"</code> contained <code>inspect.getsourcefile(lambda _: None)</code> which was failing without the compile, because the <code>inspect</code> module couldn't determine where the code was coming from.</span>
<span class="comment-copy">That's... really ugly. Any idea why they got rid of execfile() in 3.x? execfile also made it easy to pass commandline args.</span>
<span class="comment-copy"><code>open("somefile.py")</code> may be incorrect if <code>somefile.py</code> uses a character encoding different from <code>locale.getpreferredencoding()</code>. <code>tokenize.open()</code> could be used instead.</span>
<span class="comment-copy">For some reason, it outputs to the screen a lot of information it was not asked to print ('<b>builtins</b>' etc in Anaconda Python 3). Is there some way to turn this off so that only the information which I output with print() gets visualized?</span>
<span class="comment-copy">Is it also possible to get all the variables in the current workspace instead of them all being stored in <code>file_globals</code>? This would save having to type the <code>file_globals['...']</code> for every variable.</span>
<span class="comment-copy">@Adriaan <code>globals().update(file_globals)</code></span>
<span class="comment-copy">-1: the exec statment doesn't work this way. Code doesn't run in any version of python.</span>
<span class="comment-copy">-1: Not reliable.  Some uses of execfile are incompatible.</span>
<span class="comment-copy">-1: The default parameter values are evaluated at function definition time, making both <code>globals</code> and <code>locals</code> point to the global namespace fo the module containing the definition of <code>execfile()</code> rather than to the global and local namespace of the caller.  The correct approach is to use <code>None</code> as default value and determine the caller's globals and locals via the introspection capabilities of the <code>inspect</code> module.</span>
<span class="comment-copy">What is "the above pattern"? Please use links when referring to other posts on StackOverflow. Relative positioning terms like "the above" don't work, as there are 3 different ways of sorting answers (by votes, by date, or by activity) and the most common one (by votes) is volatile. Over time your post and posts around yours will end up with different scores, meaning they'll be rearranged and such comparisons will be less useful.</span>
<span class="comment-copy">Very good point. And given that I wrote this answer almost six months ago, I assume by "above pattern" I meant <a href="https://stackoverflow.com/a/2849077/165082">stackoverflow.com/a/2849077/165082</a> (which unfortunately you have to click on to resolve), or better still Noam's answer:</span>
<span class="comment-copy">Generally when I want to refer to other answers to the same question from my answer, I type "Noam's Answer" (for example) and link the text to the answer I'm referring to, just for in case the answer becomes disassociated from the user in the future, IE, because the user changes their account name or the post becomes a communal wiki because too many edits have been made on it.</span>
<span class="comment-copy">How do you get the URL to a specific "answer" with in a post, excluding the poster's name of the answer?</span>
<span class="comment-copy">View the source and get the ID.  For example, your question would be <a href="http://stackoverflow.com/questions/436198/what-is-an-alternative-to-execfile-in-python-3-0/5643233?noredirect=1#comment47190856_5643233#comment-47190856" title="what is an alternative to execfile in python 3 0">stackoverflow.com/questions/436198/â€¦</a> .  I'm all for a better method, but don't see anything when I hover near the comment</span>
