<div class="post-text" itemprop="text">
<p>The following code uses the {} operator to combine two defaultdicts.</p>
<pre><code>from collections import defaultdict
aa=defaultdict(str)
bb=defaultdict(str)
aa['foo']+= '1'
bb['bar']+= '2'
cc = {**aa,**bb}
type(cc)
</code></pre>
<p>But, as we see if we run this, the <code>{}</code> operator returns a <code>dict</code> type not a <code>defaultdict</code> type. </p>
<p>Is there a way to cast a <code>dict</code> back to a defaultdict?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use unpacking directly in a call to <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>.  <code>defaultdict</code> is a subclass of <code>dict</code>, and will pass those arguments to its parent to create a dictionary as though they had been passed to <code>dict</code>.</p>
<pre><code>cc = defaultdict(str, **aa, **bb)
# defaultdict(&lt;class 'str'&gt;, {'bar': '2', 'foo': '1'})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it the long way. The benefit of this method is you don't need to re-specify the type of <code>defaultdict</code>:</p>
<pre><code>def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z

cc = merge_two_dicts(aa, bb)
</code></pre>
<p>Unpacking in a single expression works but is inefficient:</p>
<pre><code>n = 500000

d1 = defaultdict(int)
d1.update({i: i for i in range(n)})
d2 = defaultdict(int)
d2.update({i+n:i+n for i in range(n)})

%timeit defaultdict(int, {**d1, **d2})  # 150 ms per loop
%timeit merge_two_dicts(d1, d2)         # 90.9 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>defaultdict</code> constructor can take two arguments, where the first is the function to use for the default, and the second a mapping (dict). It copies the keys/values from the dict passed in.</p>
<pre><code> &gt;&gt;&gt; d = defaultdict(list, {'a': [1,2,3]})
 &gt;&gt;&gt; d['a']
 [1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">This nails it.  Thanks!</span>
<span class="comment-copy">This is the best one-line solution. But note that unpacking makes it inefficient and inputs are over-specified, i.e. requires an input [<code>defaultdict</code> type] which shouldn't be necessary.</span>
