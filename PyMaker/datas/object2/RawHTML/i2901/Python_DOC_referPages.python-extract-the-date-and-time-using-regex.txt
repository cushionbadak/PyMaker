<div class="post-text" itemprop="text">
<p>Problem Statement: </p>
<p>I need to collect the logs from a file only after a particular time which can be in the following format 'Aug 7 11:00:00.000' or 'Aug 7 11:00:00'. These logs are in a different txt file and are of the format:</p>
<pre><code>Aug  7 11:00:00 abc newsyslog[25714]: logfile turned over due to size&gt;1024K
Aug  7 11:00:00.000  abc xyz lol
</code></pre>
<p>and so on.</p>
<p>How do I extract this particular date and time using regex and then collect the logs only after a specified time ? Is there any other better way to use other than regex.</p>
<p>Right now using this:</p>
<pre><code>import re

monthnames = "(?:Jan\w*|Feb\w*|Mar\w*|Apr\w*|May|Jun\w?|Jul\w?|Aug\w*|Sep\w*|Oct\w*|Nov(?:ember)?|Dec\w*)"

pattern1 = re.compile(r"(\d{1,4}[\/\\\-]+\d{1,2}[\/\\\-]+\d{2,4})")

pattern4 = re.compile(r"(?:[\d,. \-]*[,. \-])?%s(?:[\,\.\ \-]+[\d]+[stndrh]*)+[:\d]*[\ ]?(PM)?(AM)?([\ \-\+\d]{4,7}|[UTCESTGMT\ ]{2,4})*"%monthnames, re.I)

patterns = [pattern4, pattern1]

s='Aug 7 11:00:00.000'

for pattern in patterns:
    print re.findall(pattern,s)
</code></pre>
<p>But it returns nothing, an empty list !</p>
<p>Need help !</p>
<p>P.S - I can use only traditional libraries in python, because this is an automation script for Junos</p>
</div>
<div class="post-text" itemprop="text">
<p>You definitely don't need regex for this - simple split on a whitespace and collecting the first two results should be more than enough, i.e.:</p>
<pre><code>log_lines = ["Aug  7 11:00:00 abc newsyslog[25714]: logfile turned over due to size&gt;1024K",
             "Aug  7 11:00:00.000  abc xyz lol"]  # we'll use a list as an example

for line in log_lines:
    date_string = " ".join(line.split(None, 3)[:-1])
    print(date_string)

# Aug 7 11:00:00
# Aug 7 11:00:00.000
</code></pre>
<p>Now, you can use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.datetime.strptime()</code></a> to parse it into a native date-time object, but you might be limited with the formatting (i.e. <code>%b</code> is a month abbreviation only for the current locale and not all platforms/versions support single digit dates) so, given such a simple structure you might want to rebuild your captured date-time strings before getting them to parse to maximize compatibility:</p>
<pre><code>month_abbr = {"jan": 1, "feb": 2, "mar": 3, "apr": 4, "may": 5, "jun": 6,
              "jul": 7, "aug": 8, "sep": 9, "oct": 10, "nov": 11, "dec": 12}

def parse_date(log_line):
    mon, day, tim = line.split(None, 3)[:-1]
    date_string = "{:02} {:02} ".format(month_abbr[mon.lower()], int(day)) + tim
    try:
        return datetime.datetime.strptime(date_string, "%m %d %H:%M:%S.%f")
    except ValueError as e:
        return datetime.datetime.strptime(date_string, "%m %d %H:%M:%S")

log_lines = ["Aug  7 11:00:00 abc newsyslog[25714]: logfile turned over due to size&gt;1024K",
             "Aug  7 11:00:00.000  abc xyz lol"]  # we'll use a list as an example

for line in log_lines:
    date_object = parse_date(line)
    print(date_object)

# 1900-08-07 11:00:00
# 1900-08-07 11:00:00
</code></pre>
<p>NOTE: your date-time objects will have <code>1900</code> as their year because your logs do not have the year information. The second date-time object contains its microseconds data as well, it just doesn't print out with the default representation of an <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="nofollow noreferrer"><code>datetime.datetime</code></a> object.</p>
<p>You can now compare those date-time objects to other date-time objects and filter out/print/whatever you want to do those lines that match your criteria, e.g. if you want only logs created <strong>after</strong> <code>Aug 7</code>:</p>
<pre><code>log_lines = ["Aug  7 11:00:00 abc newsyslog[25714]: logfile turned over due to size&gt;1024K",
             "Aug  7 11:00:00.000  abc xyz lol",
             "Aug  8 11:00:00 foo bar"]  # we'll use a list as an example

min_date = datetime.datetime(1900, 8, 8)  # minimum date set to Aug 8

for line in log_lines:
    if parse_date(line) &gt;= min_date:
        print(line)

# Aug  8 11:00:00 foo bar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think regex is an overkill for that, I would've extracted the date part, something like:</p>
<pre><code>' '.join(line.split()[0:3])
</code></pre>
<p>And use <a href="https://docs.python.org/3/library/datetime.html?highlight=strptime#datetime.datetime.strptime" rel="nofollow noreferrer">strptime()</a> with the longer format, catch the exception, and try with strptime for the shorter format:</p>
<pre><code>from datetime import datetime

def get_date(date_str):
    try:
        return datetime.strptime(date_str, '%b %d %H:%M:%S.%f')
    except ValueError:
        return datetime.strptime(date_str, '%b %d %H:%M:%S')
</code></pre>
</div>
<span class="comment-copy">Why not use the <code>strptime</code> function of the built-in <code>datetime</code> module?</span>
<span class="comment-copy">Can you please give an example ?</span>
<span class="comment-copy"><code>datetime.strptime('Mon, August 13, 2018', '%a, %B %d, %Y')</code> returns the <code>datetime</code> object corresponding to August 13, 2018. You can learn more by reading the <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">Once I extract the time, I need to extract only those logs that were collected after the specified time like once I extract Aug 6 12:45:30.650, suppose the date and time are parsed as Aug 6 13:45: 50.123. I need to extract logs only after this specified time. How do I do that ? Stuck for a long time now !</span>
<span class="comment-copy">@P.Saini - Check the update above.</span>
<span class="comment-copy">That works ! Thanks !</span>
<span class="comment-copy">I need to collect the logs using both date and time as parameter, this is only comparing the date</span>
<span class="comment-copy">@P.Saini - <code>datetime.datetime</code> contains a time component, too. For example, if you want to set the minimum date to 8th of August at 8:30am you can use: <code>min_date = datetime.datetime(1900, 8, 8, 8, 30)</code>. Check the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime" rel="nofollow noreferrer"><code>datetime.datetime()</code></a> signature to see all of the available components when defining it.</span>
