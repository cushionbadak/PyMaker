<div class="post-text" itemprop="text">
<p>Ruby can add methods to the Number class and other core types to get effects like this:</p>
<pre><code>1.should_equal(1)
</code></pre>
<p>But it seems like Python cannot do this. Is this true? And if so, why? Does it have something to do with the fact that <em>type</em> can't be modified?</p>
<p><em>Update: Rather than talking about different definitions of monkey patching, I would like to just focus on the example above. I have already concluded that it cannot be done as a few of you have answered. But I would like a more detailed explanation of why it cannot be done, and maybe what feature, if available in Python, would allow this.</em></p>
<p>To answer some of you: The reason I <em>might</em> want to do this is simply aesthetics/readability. </p>
<pre><code> item.price.should_equal(19.99)
</code></pre>
<p>This reads more like English and clearly indicates which is the tested value and which is the expected value, as supposed to:</p>
<pre><code>should_equal(item.price, 19.99)
</code></pre>
<p>This concept is what <a href="http://rspec.info/" rel="nofollow noreferrer">Rspec</a> and some other Ruby frameworks are based on.</p>
</div>
<div class="post-text" itemprop="text">
<p>What exactly do you mean by Monkey Patch here?  There are <a href="http://wikipedia.org/wiki/Monkey_patch" rel="noreferrer">several slightly different definitions</a>.</p>
<p>If you mean, "can you change a class's methods at runtime?", then the answer is emphatically yes:</p>
<pre><code>class Foo:
  pass # dummy class

Foo.bar = lambda self: 42

x = Foo()
print x.bar()
</code></pre>
<p>If you mean, "can you change a class's methods at runtime and <strong>make all of the instances of that class change after-the-fact</strong>?" then the answer is yes as well.  Just change the order slightly:</p>
<pre><code>class Foo:
  pass # dummy class

x = Foo()

Foo.bar = lambda self: 42

print x.bar()
</code></pre>
<p>But you can't do this for certain built-in classes, like <code>int</code> or <code>float</code>.  These classes' methods are implemented in C and there are certain abstractions sacrificed in order to make the implementation easier and more efficient.</p>
<p>I'm not really clear on <strong>why</strong> you would want to alter the behavior of the built-in numeric classes anyway.  If you need to alter their behavior, subclass them!!</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you cannot. In Python, all data (classes, methods, functions, etc) defined in C extension modules (including builtins) are immutable. This is because C modules are shared between multiple interpreters in the same process, so monkeypatching them would also affect unrelated interpreters in the same process. (Multiple interpreters in the same process are possible through the <a href="https://docs.python.org/3/c-api/init.html#sub-interpreter-support" rel="nofollow noreferrer">C API</a>, and there has been <a href="https://www.python.org/dev/peps/pep-0554/" rel="nofollow noreferrer">some effort</a> towards making them usable at Python level.)</p>
<p>However, classes defined in Python code may be monkeypatched because they are local to that interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def should_equal_def(self, value):
    if self != value:
        raise ValueError, "%r should equal %r" % (self, value)

class MyPatchedInt(int):
    should_equal=should_equal_def

class MyPatchedStr(str):
    should_equal=should_equal_def

import __builtin__
__builtin__.str = MyPatchedStr
__builtin__.int = MyPatchedInt

int(1).should_equal(1)
str("44").should_equal("44")
</code></pre>
<p>Have fun ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this, but it takes a little bit of hacking. Fortunately, there's a module now called "Forbidden Fruit" that gives you the power to patch methods of built-in types very simply. You can find it at </p>
<p><a href="http://clarete.github.io/forbiddenfruit/?goback=.gde_50788_member_228887816" rel="noreferrer">http://clarete.github.io/forbiddenfruit/?goback=.gde_50788_member_228887816</a></p>
<p>or </p>
<p><a href="https://pypi.python.org/pypi/forbiddenfruit/0.1.0" rel="noreferrer">https://pypi.python.org/pypi/forbiddenfruit/0.1.0</a></p>
<p>With the original question example, after you write the "should_equal" function, you'd just do</p>
<pre><code>from forbiddenfruit import curse
curse(int, "should_equal", should_equal)
</code></pre>
<p>and you're good to go! There's also a "reverse" function to remove a patched method. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python's core types are immutable by design, as other users have pointed out:</p>
<pre><code>&gt;&gt;&gt; int.frobnicate = lambda self: whatever()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'int'
</code></pre>
<p>You certainly <em>could</em> achieve the effect you describe by making a subclass, since user-defined types in Python are mutable by default.</p>
<pre><code>&gt;&gt;&gt; class MyInt(int):
...   def frobnicate(self):
...     print 'frobnicating %r' % self
... 
&gt;&gt;&gt; five = MyInt(5)
&gt;&gt;&gt; five.frobnicate()
frobnicating 5
&gt;&gt;&gt; five + 8
13
</code></pre>
<p>There's no need to make the <code>MyInt</code> subclass public, either; one could just as well define it inline directly in the function or method that constructs the instance.</p>
<p>There are certainly a few situations where Python programmers who are fluent in the idiom consider this sort of subclassing the right thing to do.  For instance, <code>os.stat()</code> returns a <code>tuple</code> subclass that adds named members, precisely in order to address the sort of readability concern you refer to in your example.</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; st = os.stat('.')
&gt;&gt;&gt; st
(16877, 34996226, 65024L, 69, 1000, 1000, 4096, 1223697425, 1223699268, 1223699268)
&gt;&gt;&gt; st[6]
4096
&gt;&gt;&gt; st.st_size
4096
</code></pre>
<p>That said, in the specific example you give, I don't believe that subclassing <code>float</code> in <code>item.price</code> (or elsewhere) would be very likely to be considered the Pythonic thing to do.  I <em>can</em> easily imagine somebody deciding to add a <code>price_should_equal()</code> method to <code>item</code> if that were the primary use case; if one were looking for something more general, perhaps it might make more sense to use named arguments to make the intended meaning clearer, as in</p>
<pre><code>should_equal(observed=item.price, expected=19.99)
</code></pre>
<p>or something along those lines.  It's a bit verbose, but no doubt it could be improved upon.  A possible advantage to such an approach over Ruby-style monkey-patching is that <code>should_equal()</code> could easily perform its comparison on any type, not just <code>int</code> or <code>float</code>.  But perhaps I'm getting too caught up in the details of the particular example that you happened to provide.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't patch core types in python. 
However, you could use pipe to write a more human readable code:  </p>
<pre><code>from pipe import *

@Pipe
def should_equal(obj, val):
    if obj==val: return True
    return False

class dummy: pass
item=dummy()
item.value=19.99

print item.value | should_equal(19.99)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of implementing <code>item.price.should_equal</code>, although I'd use Decimal instead of float in a real program:</p>
<pre><code>class Price(float):
    def __init__(self, val=None):
        float.__init__(self)
        if val is not None:
            self = val

    def should_equal(self, val):
        assert self == val, (self, val)

class Item(object):
    def __init__(self, name, price=None):
        self.name = name
        self.price = Price(price)

item = Item("spam", 3.99)
item.price.should_equal(3.99)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really really <em>really</em> want to do a monkey patch in Python, you can do a (sortof) hack with the "import foo as bar" technique.</p>
<p>If you have a class such as TelnetConnection, and you want to extend it, subclass it in a separate file and call it something like TelnetConnectionExtended.</p>
<p>Then, at the top of your code, where you would normally say:</p>
<pre><code>import TelnetConnection
</code></pre>
<p>change that to be:</p>
<pre><code>import TelnetConnectionExtended as TelnetConnection
</code></pre>
<p>and then everywhere in your code that you reference TelnetConnection will actually be referencing TelnetConnectionExtended.</p>
<p>Sadly, this assumes that you have access to that class, and the "as" only operates within that particular file (it's not a global-rename), but I've found it to be useful from time to time.</p>
</div>
<div class="post-text" itemprop="text">
<p>No but you have UserDict UserString and UserList which were made with exactly this in mind.</p>
<p>If you google you will find examples for other types, but this are builtin.</p>
<p>In general monkey patching is less used in Python than in Ruby.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, sadly you cannot extend types implemented in C at runtime.</p>
<p>You can subclass int, although it is non-trivial, you may have to override <code>__new__</code>.</p>
<p>You also have a syntax issue:</p>
<pre><code>1.somemethod()  # invalid
</code></pre>
<p>However</p>
<pre><code>(1).__eq__(1)  # valid
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, you can't do that in Python. I consider it to be a good thing.</p>
</div>
<div class="post-text" itemprop="text">
<p>What does <code>should_equal</code> do?  Is it a boolean returning <code>True</code> or <code>False</code>?  In that case, it's spelled:</p>
<pre><code>item.price == 19.99
</code></pre>
<p>There's no accounting for taste, but no regular python developer would say that's less readable than your version.</p>
<p>Does <code>should_equal</code> instead set some sort of validator? (why would a validator be limited to one value? Why not just set the value and not update it after that?)  If you want a validator, this could never work anyway, since you're proposing to modify either a particular integer or all integers. (A validator that requires <code>18.99</code> to equal <code>19.99</code> will always fail.) Instead, you could spell it like this:</p>
<pre><code>item.price_should_equal(19.99)
</code></pre>
<p>or this:</p>
<pre><code>item.should_equal('price', 19.99)
</code></pre>
<p>and define appropriate methods on item's class or superclasses.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems what you really wanted to write is:</p>
<pre><code>assert item.price == 19.99
</code></pre>
<p>(Of course comparing floats for equality, or using floats for prices, is <a href="http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow">a bad idea</a>, so you'd write <code>assert item.price == Decimal(19.99)</code> or whatever numeric class you were using for the price.)</p>
<p>You could also use a testing framework like <a href="http://doc.pytest.org/en/latest/example/reportingdemo.html" rel="nofollow">py.test</a> to get more info on failing asserts in your tests.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I achieve the .should_something... behavior:</p>
<pre><code>result = calculate_result('blah') # some method defined somewhere else

the(result).should.equal(42)
</code></pre>
<h2>or</h2>
<pre><code>the(result).should_NOT.equal(41)
</code></pre>
<p>I included a decorator method for extending this behavior at runtime on a stand-alone method:</p>
<pre><code>@should_expectation
def be_42(self)
    self._assert(
        action=lambda: self._value == 42,
        report=lambda: "'{0}' should equal '5'.".format(self._value)
    )

result = 42

the(result).should.be_42()
</code></pre>
<p>You have to know a bit about the internals but it works.</p>
<p>Here's the source:</p>
<p><a href="https://github.com/mdwhatcott/pyspecs" rel="nofollow">https://github.com/mdwhatcott/pyspecs</a></p>
<p>It's also on PyPI under pyspecs.</p>
</div>
<span class="comment-copy">well, to get the item.price.should_equal(19.99) working just make price a subclass of numeric type, and add the method should_equal for it. should work.</span>
<span class="comment-copy">Bla bla bla, yes you can do that in python, that's exactly what <a href="https://github.com/gabrielfalcao/sure#fluent-assertions" rel="nofollow noreferrer">"sure"</a> does. <a href="https://github.com/gabrielfalcao/sure#fluent-assertions" rel="nofollow noreferrer">https://github.com/gabrielfalcao/sure#fluent-assertions</a></span>
<span class="comment-copy">See also:  <a href="http://stackoverflow.com/questions/352537/extending-builtin-classes-in-python" title="extending builtin classes in python">stackoverflow.com/questions/352537/…</a></span>
<span class="comment-copy">While making things immutable for efficiency's sake makes good sense, it'd be nice if Python would react to attempts to change these immutable built in classes by substituting in a mutable version in that interpreter only. So the normal case would be immutable with all the performance benefits but if you want to make an exception you can. In some cases performance is not that important. I'm looking at you, datetime class and your lack of built in methods.</span>
<span class="comment-copy">Ah - the copy on write style approach.. That would be a neat way for it to behave - but mostly a specialist service for mocking/testing, and in most other cases - wouldn't subclassing make more sense?</span>
<span class="comment-copy">IE this answer - <a href="http://stackoverflow.com/a/5437199/490188">stackoverflow.com/a/5437199/490188</a></span>
<span class="comment-copy">@AlexanderLjungberg: Python has no way to locate and replace all the references to the original version of the class, and it'd break stuff like <code>id</code> and the default address-based <code>hash</code>, too.</span>
<span class="comment-copy">Why is this wrong?</span>
<span class="comment-copy">Its very wrong because it makes programmers on other projects want you DEAD. Imagine I import your big ass library and you monkeypatch int. Now what happens if int doesn't behave like I expect it to?</span>
<span class="comment-copy">@JakobBowyer I think it's very wrong only when you use <code>from HisPatch import *</code></span>
<span class="comment-copy">@Firegun The problem is, <i>any</i> import from <code>HisPatch</code> would cause that code to be executed and <i>globally</i> modify the builtin classes. <a href="http://stackoverflow.com/a/16058636/321973">Not that I didn't consider using something like this...</a></span>
<span class="comment-copy">+1 for answering the question, and because any answer that triggers a bunch of "you shouldn't" comments is likely showing good, and hard to find info</span>
<span class="comment-copy">interesting python module library</span>
<span class="comment-copy">Seems weird. Some stuff I try works just fine. Other stuff I try seems to just get ignored. Can't find any pattern, rhyme, or reason for it.</span>
<span class="comment-copy">Nice, thanks! Here's the Pipe project page on PyPI: <a href="http://pypi.python.org/pypi/pipe" rel="nofollow noreferrer">pypi.python.org/pypi/pipe</a></span>
<span class="comment-copy">Nice addition, although this is not within core python, so that has drawbacks for people who are not authorized to import custom libraries</span>
