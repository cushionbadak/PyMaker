<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3034014/how-to-apply-itertools-product-to-elements-of-a-list-of-lists">How to apply itertools.product to elements of a list of lists?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Forewarning: I'm new to Python and I'm teaching myself, so this question may just have a trivial solution--any help (and patience) is very much appreciated!</p>
<p>Okay, big picture is that I want to get the union of all possible intersections of a variable number of lists. I'm not really sure how to explain the general-case problem I'm running into, so for the sake of this question, I'll just use an example with 3 lists (but again, the actual number of lists will vary):</p>
<p>Suppose we have the following:</p>
<pre><code>&gt;&gt;&gt;from itertools import product

&gt;&gt;&gt;l1=[1,2,3]
&gt;&gt;&gt;l2=[1,4,5]
&gt;&gt;&gt;l3=[1,6,7]
&gt;&gt;&gt;
&gt;&gt;&gt;array=[l1,l2,l3]
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;list(product(array))
[([1, 2, 3],), ([1, 4, 5],), ([1, 6, 7],)]
&gt;&gt;&gt;
&gt;&gt;&gt;list(product(l1,l2,l3)
[(1, 1, 1), (1, 1, 6), (1, 1, 7), (1, 4, 1), (1, 4, 6), (1, 4, 7), (1, 5, 1), (1, 5, 6), (1, 5, 7), (2, 1, 1), (2, 1, 6), (2, 1, 7), (2, 4, 1), (2, 4, 6), (2, 4, 7), (2, 5, 1), (2, 5, 6), (2, 5, 7), (3, 1, 1), (3, 1, 6), (3, 1, 7), (3, 4, 1), (3, 4, 6), (3, 4, 7), (3, 5, 1), (3, 5, 6), (3, 5, 7)]
</code></pre>
<p>My questions are:</p>
<ol>
<li>Why doesn't <code>list(product(array)) == list(product(l1,l2,l3))</code>?</li>
<li>Using <code>array</code>, how can I get the same output as <code>list(product(l1,l2,l3))</code>?</li>
</ol>
<p>For more context:</p>
<p>Ultimately, the goal is to get the union of all possible combinations of the intersections of the lists. I.e.;</p>
<pre><code>1&gt;&gt;&gt;for x in product(l1,l2,l3):
...     newArray.append(reduce(set.intersection, [set(e) for e in array])
2&gt;&gt;&gt;u=reduce(set.union, [set(e) for e in newArray])
3&gt;&gt;&gt;u
set([1])
</code></pre>
<p>Except, because I don't know how many lists I'll have (in my code, they're being appended onto <code>array</code> by a loop), I want line <code>1</code> to be something like <code>for x in product(array):</code>, not <code>for x in product(l1,l2,l3):</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>1) Why doesn't list(product(array))=list(product(l1,l2,l3))?</p>
</blockquote>
<p>Well the <code>itertools.product()</code> takes in iterables and then produces the Cartesian product amongst them. So when you do list(product(array)) you are basically trying to take cartesian product of a single list(?) and notice the commas in the output of the same signifying cartesian product between one list and empty iterable.</p>
<blockquote>
<p>2) Using array, how can I get the same output as list(product(l1,l2,l3))?</p>
</blockquote>
<p>Notice your problem boils down to being to convert the <code>arr</code> list to <code>*args</code> while calling the function.We have the <code>*</code> operator for this, So for the answer just do:</p>
<p><code>product(*arr)</code></p>
<p>From the <a href="https://docs.python.org/2/reference/expressions.html#calls" rel="nofollow noreferrer">python documentation</a>:</p>
<blockquote>
<p>If the syntax *expression appears in the function call, expression
  must evaluate to an iterable. Elements from this iterable are treated
  as if they were additional positional arguments; if there are
  positional arguments x1, ..., xN, and expression evaluates to a
  sequence y1, ..., yM, this is equivalent to a call with M+N positional
  arguments x1, ..., xN, y1, ..., yM.</p>
</blockquote>
<p>Since you must mentioned that you are learning on your own,
this is also covered in the python tutorial, in a section titled <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking argument lists</a>.</p>
</div>
<span class="comment-copy">You just want <code>product(*array)</code> here. Do you understand the “splat syntax”, pasting an iterable into a function call as a bunch of separate arguments, or do you need a link to an explanation?</span>
<span class="comment-copy">If you're curious why <code>product(array)</code> (and even <code>product()</code>) is legal despite being useless: First, mathematically, you can write <code>product_n=1_to_1(n)</code>. More importantly, it means you can write <code>product(*rows)</code> even when <code>rows</code> is some value you were passed by a caller that may only have one row, or none, and you can likewise write <code>product(array, repeat=power)</code> even if <code>power</code> might be only 1 or 0.</span>
<span class="comment-copy">@abarnert: Thank you, <code>product(*array)</code> worked! Also, a link to an explanation on 'splat syntax' will be helpful!</span>
<span class="comment-copy">Thank you so much! I'll take a look. I really appreciate it.</span>
