<div class="post-text" itemprop="text">
<p>I have the code:</p>
<pre><code>from sklearn.feature_extraction.text import TfidfVectorizer
titles = open("user1_titles.txt",'r')
vectorizer = TfidfVectorizer(min_df=1)
X = vectorizer.fit_transform(titles)
idf = vectorizer.idf_
print(dict(zip(vectorizer.get_feature_names(), idf)), file = open("user1_tf.csv",'a'))
</code></pre>
<p>But it gives me the following output:</p>
<pre><code>{'00': 7.8987145343299883, '007': 9.6034626265684135, '01': 9.6034626265684135, '012': 9.197997518460248, '01273': 9.6034626265684135, '02': 9.6034626265684135, '020': 9.6034626265684135, '026514': 9.6034626265684135,... etc
</code></pre>
<p>I need the output to be:</p>
<pre><code>00 7.8987145343299883
007 9.6034626265684135
etc.    
</code></pre>
<p><strong>I am aiming to remove the curly brackets {} from the output and just have 2 columns of data; name and value</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>using <a href="https://docs.python.org/3/library/pprint.html#module-pprint" rel="nofollow noreferrer">pprint</a>  â€” a "Data pretty printer":</p>
<pre><code>from pprint import pprint

d = {'00': 7.8987145343299883, '007': 9.6034626265684135, '01': 9.6034626265684135, '012': 9.197997518460248, '01273': 9.6034626265684135, '02': 9.6034626265684135, '020': 9.6034626265684135, '026514': 9.6034626265684135}
pprint(d)
</code></pre>
<p>output:</p>
<pre><code>{'00': 7.898714534329988,
 '007': 9.603462626568414,
 '01': 9.603462626568414,
 '012': 9.197997518460248,
 '01273': 9.603462626568414,
 '02': 9.603462626568414,
 '020': 9.603462626568414,
 '026514': 9.603462626568414}
</code></pre>
<p>or a with a handcrafted solution using <a href="https://pyformat.info/" rel="nofollow noreferrer"><code>format</code></a>:</p>
<pre><code>for key, value in d.items():
    print( '{:&gt;6} {}'.format(key, value) )
</code></pre>
<p>result:</p>
<pre><code>026514 9.603462626568414
   012 9.197997518460248
    01 9.603462626568414
    00 7.898714534329988
   020 9.603462626568414
   007 9.603462626568414
    02 9.603462626568414
 01273 9.603462626568414
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is basically the same as Saurabh's answer but prints values.</p>
<pre><code>def splitPrint(data):
    for key,value in data.items():
        print(key, value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do this in following manner</p>
<pre><code>for key,value in (dict(zip(vectorizer.get_feature_names(), idf)), file = open("user1_tf.csv",'a')).iteritems()::
    print key,value
</code></pre>
<p>or
you can collect the output for your first statement in some variable and then print it
like:</p>
<pre><code>data = print(dict(zip(vectorizer.get_feature_names(), idf)), file = open("user1_tf.csv",'a'))
for key,value in data.iteritems():
    print key,value
</code></pre>
</div>
<span class="comment-copy">I edited my answer which was confusing. To remove the brackets you have to use the for loop and the print statement. This way you can use the <code>format</code> function and then, for example, specify also the number of digits you want, the alignment... etc</span>
<span class="comment-copy">thank you, this works! however, the output appears in 1 column in the csv file. What would i need to do to split the column into 2?</span>
<span class="comment-copy">depending on what delimiter you want to use, try with a comma <code>print( '{}, {}'.format(key, value) )</code></span>
<span class="comment-copy">perfect, thank you so much</span>
<span class="comment-copy">I believe this only prints the keys, the OP also wants values.</span>
<span class="comment-copy">yeah. My Mistake, let me correct my code.</span>
<span class="comment-copy">Thanx @teclnol for pointing out the mistake.</span>
