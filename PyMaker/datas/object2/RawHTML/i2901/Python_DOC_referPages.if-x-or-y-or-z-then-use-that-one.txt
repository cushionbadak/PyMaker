<div class="post-text" itemprop="text">
<p>Is there a way to write an <code>If</code> (or equivalent) statement that can have many arguments, and if any of those satisfy the logic, use <em>that</em> variable?</p>
<p>For instance</p>
<pre><code>if len(x) == 1 or len(y) == 1 or len(z) == 1 or ... len(zz) == 1:
    # do something with the variable that met the condition
</code></pre>
<p>So say only <code>z</code> has length <code>1</code>, could I write above idea/formula in a way that takes the first <code>True</code> answer and use that?</p>
<p>So something like </p>
<pre><code>x = "123"
y = "234"
z = "2"
xx = "1234"
yy = "12345"

if len(x) == 1 or len(y) == 1 or len(z) == 1 or len(xx) == 1 or len(yy) == 1:
    #do something with the variable that satisfies the condition, so `z` in this case.
</code></pre>
<p>Does that make any sense?  The variables' lengths could change any time, so I'd like to be able to say "If any of the conditions are met, use the variable that met the condition"...?</p>
<p>In the above, I don't know beforehand that <code>z</code>will be the only one to meet the criteria, so my <code>Then</code> statement can't be <code>z = "new value"</code> or whatever I want 
to do with it.</p>
<p>Edit: Sorry, per comments I know checking for <code>len</code> on integers isn't okay. This is solely for illustration purposes and it was the first thing I thought of to "test".  Sorry if the <code>len</code> bit is confusing.  I'm mainly just trying to see if I can use <code>If</code> statements (or related ones) where I don't know which of my many variables will meet a condition.  (I'm still new regarding python, so my sincere apologies for my lack of semantics or proper terms).  I'd like to avoid <code>elif</code> if at all possible just because it can get stringy. (But if that's the most pythonic way, then so be it!)</p>
</div>
<div class="post-text" itemprop="text">
<p>While @pault 's answer addresses your question, I think it isn't super readable.
If you have a couple of variables only, pythons mantra dictate a straightforward, explicit way:</p>
<pre><code>if len(x) == 1:
  f(x)
elif len(y) == 1:
  f(y)
elif len(z) == 1:
  f(z)
</code></pre>
<p>Otherwise, if you have a list, a for loop is readable and efficient:</p>
<pre><code>for l in ls:
    if len(l) == 1:
        f(l)
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>next</code> here to pick the first item out of a list of options that meets your criteria:</p>
<pre><code>value = next((item for item in [x, y, z] if len(item)==1), None)
if value is not None:
    ...
</code></pre>
<p>The second argument to <code>next()</code> is the default value if no values meet your criteria. </p>
</div>
<div class="post-text" itemprop="text">
<p>What you describe has a general implementation called <code>first_true</code> in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools recipes</code></a>.</p>
<pre><code>def first_true(iterable, default=False, pred=None):
    """Returns the first true value in the iterable.

    If no true value is found, returns *default*

    If *pred* is not None, returns the first item
    for which pred(item) is true.

    """
    # first_true([a,b,c], x) --&gt; a or b or c or x
    # first_true([a,b], x, f) --&gt; a if f(a) else b if f(b) else x
    return next(filter(pred, iterable), default)
</code></pre>
<h3>Example</h3>
<pre><code>value = first_true([x, y, z], pred=lambda x: len(x) == 1)

if value:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A small list comprehension would suffice:</p>
<pre><code>passed = [i for i in (x, y, z, xx, yy) if len(i) == 1]
if passed:
     # ... use the ones that passed, or 'passed[0]' for the first item
</code></pre>
</div>
<span class="comment-copy">@OlivierMelançon - Ah, good call. I just tried to think of something quick here. The actual use case is strings. (I'll edit)</span>
<span class="comment-copy">Is it guaranteed that only one value will have a length on 1? Otherwise, do you always want the first value with the condition to be used, or are there additional criteria?</span>
<span class="comment-copy">Have you tried using multiple <code>elif</code> statements?</span>
<span class="comment-copy">This is effectively the same question as <a href="//stackoverflow.com/q/2361426">Get the first item from an iterable that matches a condition</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2361426/get-the-first-item-from-an-iterable-that-matches-a-condition">Get the first item from an iterable that matches a condition</a></span>
<span class="comment-copy">＋1 for the plain old for loop</span>
<span class="comment-copy">I get the error: <code>TypeError: next() takes no keyword arguments</code> using <code>value = next((item for item in [x, y, z] if item=="no"), default=None)</code></span>
<span class="comment-copy">@BruceWayne you're right. I just double checked the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">docs</a> and the second arg is not a keyword arg. Try <code>value = next((item for item in [x, y, z] if item=="no"), None)</code> (remove the <code>default=</code>)</span>
<span class="comment-copy">This evaluate every item, OP code short-circuits.</span>
