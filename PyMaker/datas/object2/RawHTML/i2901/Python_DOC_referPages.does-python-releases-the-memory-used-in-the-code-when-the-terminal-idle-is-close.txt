<div class="post-text" itemprop="text">
<p>When a python session/terminal is closed or killed forcefully does the memory occupied by lists other data structures in the code released automatically (I mean the garbage collection)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, the Python process attached to that terminal releases all the acquired memory. This applies not only to Python, but to standalone processes in terminals (with no dependencies).</p>
<p>This is particularly important when using GPUs, since many modules (e.g. <code>tensorflow</code>/<code>Pytorch</code>) rely on full control of the GPU. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, assuming its the parent process. If you kill the parent process all memory should be release back. </p>
<p>Python's garbage collector kicks in in cases where the parent is still running but the memory requirements are changing over time. Eg: You started by reading in a large file into a list and are removing items as you process items on the list. In this scenario you should see a decrease in memory usage, but it will never  go down to what it was before the list was created (even if you <code>del</code> the entire list). This is because python tries to "think ahead" and does't release some of the memory in case your process asks for it again.</p>
<p>Another fun case is when using <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.close" rel="nofollow noreferrer">python's multiprocessing</a> lib. If you don't close the pool correctly, the memory used by the child processes may not get released.</p>
<p>I think you just cared about what would happen when you open up a REPL, ran some manipulations and killed the shell. In that case, the memory is released back.</p>
</div>
<span class="comment-copy">Yep! Just take a look at the documentation for further information. The <a href="https://docs.python.org/3/c-api/memory.html" rel="nofollow noreferrer">memory management</a> page goes in depth about each aspect of how Python interacts with memory.</span>
