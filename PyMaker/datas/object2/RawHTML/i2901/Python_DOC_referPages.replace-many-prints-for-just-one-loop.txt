<div class="post-text" itemprop="text">
<p>I'm trying to print the output of a script. But for this I must use many prints. Is there any way to have all the topics without making all the prints?</p>
<pre><code>import pandas
import mglearn
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.decomposition import LatentDirichletAllocation

dataset = pandas.read_csv('text.csv', encoding = 'utf-8')
comments = dataset['comments']
comments_list = remove_small_words.values.tolist()

vector = CountVectorizer()
X = vector.fit_transform(comments_list)

lda = LatentDirichletAllocation(n_components = 30, learning_method = "batch", max_iter = 25, random_state = 0)

document_topics = lda.fit_transform(X)
sorting = np.argsort(lda.components_, axis = 1)[:, ::-1]
feature_names = np.array(vector.get_feature_names())

topics = mglearn.tools.print_topics(topics = range(30),   feature_names = feature_names, sorting = sorting, topics_per_chunk = 5, n_words = 10)

print(topics)

print("Topic 0:")
docs = np.argsort(document_topics[:, 0])[::-1]
for i in docs[:]:
    print(" ".join(comments_list[i].encode('utf-8').split(",")[:2]) + "\n")
print()
print()
print("Topic 1:")
docs = np.argsort(document_topics[:, 1])[::-1]
for i in docs[:]:
    print(" ".join(comments_list[i].encode('utf-8').split(",")[:2]) + "\n")
print()
print()
...
print("Topic 40:")
docs = np.argsort(document_topics[:, 40])[::-1]
for i in docs[:]:
   print(" ".join(comments_list[i].encode('utf-8').split(",")[:2]) + "\n")
print()
print()
</code></pre>
<p>Instead of printing, for example, 40 times, could I just loop to print everything? To print these 40 topics, I need 240 lines of code. Imagine if I need to print 100... 
I have this output and I would like to keep it:</p>
<blockquote>
<p>Topic 0:</p>
<p>blabla</p>
<p>blabla</p>
<p>Topic 1:</p>
<p>blabla</p>
<p>blabla</p>
<p>Topic 3:</p>
<p>blabla</p>
<p>blabla</p>
<p>...</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use string formatting to determine what string to print per topic:</p>
<pre><code>for i in range(topics):
    print("Topic {}:".format(i))
</code></pre>
<p>An then, since you have <code>i</code>, you could add your other statements like so:</p>
<pre><code>for i in range(topics):
    print("Topic {}:".format(i))
    docs = np.argsort(document_topics[:, i])[::-1]
    for j in docs[:]:
       print(" ".join(comments_list[j].encode('utf-8').split(",")[:2]) + "\n")
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html</a> and <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">docs.python.org/3/library/string.html#format-string-syntax</a></span>
<span class="comment-copy">Maybe you could try using a logger (<a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">docs.python.org/3/library/logging.html</a>)?</span>
<span class="comment-copy">Maybe try something like: <code>ntopics = document_topics.size[1]</code> Then use a <code>for i in range(ntopics):</code> to factor out the all that repeated code. For example you would then just switch the index in <code>docs</code> to <code>docs = np.argsort(document_topics[:, i])[::-1]</code>  EDIT: exactly like @gigaflop 's answer below.</span>
