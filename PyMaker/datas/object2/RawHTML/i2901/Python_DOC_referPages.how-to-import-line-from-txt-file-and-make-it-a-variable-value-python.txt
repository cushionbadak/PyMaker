<div class="post-text" itemprop="text">
<p>I have a test.txt file that has right now 2 lines</p>
<pre><code>not False == True
not True == True
</code></pre>
<p>I'm trying to import that to my function so that it will display the text with an input and then actually do the Boolean calculation
and then do it again for each line.  It's working for the input on line 6 but line 7 doesn't work which I know why, I just don't know how to do what I'm trying to do...</p>
<pre><code>def calc (read):
    line = read.readline()

    if line:
        lines = line.strip()
        input(f"Does {lines}?&gt;")
        print(f"{lines}")
        return calc(boolfile)

boolfile = open("test.txt")
calc(boolfile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>f-strings can only evaluate expressions that are literally in your source code, inside the f-string.</p>
<p>If you want to evaluate a string containing the representation of an expression as if it were source code, you need to use <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a>.</p>
<p>There are a whole host of reasons why <code>eval</code> is almost always a bad idea (tl;dr: anyone who can change the input you pass to <code>eval</code> can get you to run any code they want). But if that's really what you want to do, that's the way to do it:</p>
<pre><code>if line:
    lines = line.strip()
    input(f"Does {lines}?&gt;")
    print(eval(lines))
</code></pre>
<p>If you want to do something safer, the only thing you can do is parse and interpret the code as something safer than "any Python expression". That's not as hard as it sounds (especially since, if your language is an exact subset of Python, you can just use the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code></a> module to do the parsing, and you only have to write the interpreter part), but it's not exactly a one-liner.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's seems like you are looking for <code>eval</code>.
Try this:</p>
<pre><code>def calc (read):
    line = read.readline()

    if line:
        lines = line.strip()
        input(f"Does {lines}?&gt;")
        print(eval(lines))
        return calc(boolfile)

boolfile = open("test.txt")

calc(boolfile)
</code></pre>
<p>Output:</p>
<pre><code>Does not False == True?&gt;
True
Does not True == True?&gt;
False
</code></pre>
</div>
<span class="comment-copy">What is the error? And please can you be more specific on requirements?</span>
<span class="comment-copy">Start by indenting your code properly. Then explain what "doesn't work" means.</span>
<span class="comment-copy">What's with the recursion?</span>
<span class="comment-copy">If you want to evaluate an expression in a string as if it were source code, you have to call <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> on the string. There's a whole host of reasons why that's a bad idea, but if that's really what you want to do, that's the way to do it.</span>
<span class="comment-copy">Line 7 print(f"{lines}")  just prints "not False == True"  When I'd like it to actually do print(f"{not False == True}") and Print "True"</span>
<span class="comment-copy">Thanks a ton for the help I will research your safer method and see what I can come up with.</span>
<span class="comment-copy">@Josh I actually have <a href="https://gist.github.com/abarnert/7cf3ff158f3fadc51a78c40f37385d36" rel="nofollow noreferrer">a gist lying around for a similar question, which I quickly edited to remove the ability to do arithmetic</a>. Although this might actually be a great opportunity to learn how to write a parser for a simple language, having one already built in means you can learn how to write an interpreter first, and then come back and learn parsing later.</span>
