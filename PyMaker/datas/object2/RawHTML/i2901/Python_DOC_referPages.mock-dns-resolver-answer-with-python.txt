<div class="post-text" itemprop="text">
<p>I have a method that builds a query, pass it to a <code>_make_query</code> method in charge of resolving that query (using dns resolver) and return the answer. Then, the parent method do some stuff from the answer. I'd like to unit test the parent method ; for that I guess the best way would be to mock the <code>_make_query</code> method to return different outcomes and test how the parent method respond to it.</p>
<p>However I'm having a hard time mocking the method to return the same object returned by the dns resolver.</p>
<p>Here is the <code>_make_query</code> method:</p>
<pre><code>def _make_query(self, query):

    query_resolver = resolver.Resolver()
    return query_resolver.query(query, 'SRV')
</code></pre>
<p>code of the calling method :</p>
<pre><code>def _get_all_databases(self, database_parameters):
    query = self._format_dns_query(database_parameters)
    answers = self._make_query(query)

    databases = []

    for answer in answers:
        databases.append(
            Database(
                answer.target, answer.port, answer.weight, 
                database_parameters.db_name
        ))

    return databases
</code></pre>
<p>(also private as the main method <code>get_database</code> has then to pick a database from the list returned)</p>
<p>I have a mock to return what I want from this method in my unit tests, however I don't know how to reproduce the object being returned by the <code>resolver.query()</code> method. It should return a <code>dns.resolver.Answer</code>, which in turn contains a list of <code>dns.rdtypes.IN.SRV.SRV</code> it seems. Is there a simple way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either mock the <code>__make_query()</code> method (a bit harder, since you need to manually mangle the name now to match the class-private namespace protection, see <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">What is the meaning of a single- and a double-underscore before an object name?</a>), or mock the <code>Resolver()</code> object.</p>
<p>You don't have to exactly match the instances produced here, you only need to produce <em>enough of their attributes</em> to pass muster. For the <code>SRV</code> class from the <code>dnspython</code> project, all you need is an object with <code>port</code>, <code>priority</code>, <code>target</code> and <code>weight</code> attributes, with <code>target</code> behaving like a <code>dns.name.Name</code> instance. The latter is a bit more complex, but you only need to stub out the things <em>your code needs</em>.</p>
<p>You can trivially do this with the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code> library</a>, with or without speccing out the objects precisely. For your code, all you use is 3 attributes, so your mock only ever needs to return a list with nothing more than that.</p>
<p>You can use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec" rel="nofollow noreferrer"><code>create_autospec()</code> function</a> to generate a mock object that's limited to the attributes the original class supports. This can help detect bugs where your code uses an attribute or method that the original classes would never allow. If you don't use a spec, then the default is to produce mock objects that allow <em>all</em> attributes, pretending that those attributes exist (and each such access would produce more mock objects).</p>
<p>So, if you need <code>SRV</code> instances, then I'd use:</p>
<pre><code>import unittest
from unittest import mock

from dns.name import Name
from dns.rdtypes.IN.SRV import SRV


def make_mock_srv(target, port, weight):
    mock_srv = mock.create_autospec(SRV)
    mock_name = mock.create_autospec(Name)
    instance = mock_srv.return_value
    instance.target = mock_name.return_value
    # str(answer.target) calls __str__
    instance.target.__str__ = target
    instance.port = port
    instance.weight = weight
    return instance


class TestMakeQuery(unittest.TestCase):
    @mock.patch('dns.resolver.Resolver')
    def test_make_query(self, mock_resolver):
        mock_resolver_instance = mock_resolver.return_value  # the object returned by Resolver()
        mock_resolver_instance.query.return_value = [
            make_mock_srv('foo.', 1234, 2),
            make_mock_srv('bar.', 42, 4),
        ]

        # run your test, which calls _make_query, which calls Resolver().query()
</code></pre>
</div>
<span class="comment-copy">Can I ask why you are using <code>__</code> double underscores for this method? That makes the name <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">class private</a>, i.e. protects it from accidental clashes when sub-classing. You should only use it in APIs that are intended to be sub-classed with as little friction as possible. Using it here makes mocking the method <i>harder</i>.</span>
<span class="comment-copy">Can you share the code that <b>uses</b> the results of <code>__make_query()</code>? How are those <code>SRV</code> instances used, do you call any methods on the <code>.name</code> attributes or sort those or do anything with those objects that requires specific behaviour to work?</span>
<span class="comment-copy">I want the user to only have access to a "get_database" method, so I hide the process of making query with the private method. I'll edit the main post with the method calling right now</span>
<span class="comment-copy">The user can access any of these methods anyway. Python does <b>not</b> have a privacy model like Java et al have. You misunderstood what the double-underscore does, here. It only makes your life as a developer a little harder, nothing more.</span>
<span class="comment-copy">The convention is to use a <b>single</b> underscore, that documents to anyone reading your code that the attribute or method is an implementation detail and should not be used from outside the API unless otherwise stated. Python assumes we are all adults and know what we are doing.</span>
