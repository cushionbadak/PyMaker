<div class="post-text" itemprop="text">
<p>I have a Django model that makes use of some libraries which I would like to be able to override. For instance, when testing I'd like to pass a mock instead of having my model tightly coupled. I can do this in python, but for the life of me I can't figure out how to do it with a Django model. Here's a simplified example not using Django:</p>
<pre><code>import requests

class APIClient:
  def __init__(self, **kwargs):
    self.http_lib = kwargs.get("http_lib", requests)

  def get_url(self, url):
    return self.http_lib.get(url)
</code></pre>
<p>For regular use of this class I can still use <code>requests</code> but if I want to use a different library for some reason or if I want to test certain outcomes, I can invoke the class with <code>client = APIClient(http_lib=MockRequests())</code></p>
<p>But how do I do that with a Django model? If I try to pass kwargs that aren't backed by a database field Django throws an error. Overriding <code>__init__</code> is not considered a good practice either. Is there a way in Django to set and get a value that isn't backed by a database column?</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you have a <code>settings.TEST</code> var? If so, you could make <code>http_lib</code> a function that returns the proper lib:</p>
<pre><code>from django.conf import settings

def get_http_lib(mock=None):
    if not mock:
        return requests
    return MockRequests()

class APIClient(Model):
    def __init__(self, **kwargs):
        # ...whatever...

    @property
    def some_column(self):
        http_lib = get_http_lib(settings.TEST)
        # ...etc...
</code></pre>
<p>Not ideal, but passable.</p>
<hr/>
<p>PRE-EDIT ANSWER (doesn't work):</p>
<p>What if you <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> subsequent to instantiating the <code>Model</code>?</p>
<pre><code># In model...
class APIClient(Model):
    def __init__(self, **kwargs):
        self.http_lib = requests
    # ...etc...

# In tests...
client = APIClient()
setattr(client, 'http_lib', MockRequests())
</code></pre>
</div>
<span class="comment-copy">That would work for a non-Django object, but the problem is that Django seems to expect every property to be associated with a database column. So I can't find a way to runtime dependency injection on a Django model like I do with other python classes.</span>
<span class="comment-copy">Ah, had another thought, see my edit.</span>
