<div class="post-text" itemprop="text">
<p>I have the following code which I wrote for a course which runs fine:</p>
<pre><code>def reverse_iter(iterable):
    """Return a generator that yields items from iterable in reverse order"""
    last = len(iterable) - 1
    while last &gt;= 0:
        yield iterable[last]
        last -= 1
</code></pre>
<p>The next part of the assignment is to turn this function into a class. I know this not practical but it is what is being asked. I have very limited knowledge about classes but I came up with the following code:</p>
<pre><code>class ReverseIter:
    """Class whose instances iterate the initial iterable in reverse order"""
    def __init__(self, iterable):
        self.iterable = iterable

    def iterreverse(self):
        last = len(self.iterable) - 1
        while last &gt;= 0:
            yield self.iterable[last]
            last -= 1  

nums = [1, 2, 3, 4]
it = ReverseIter(nums)
print(iter(it) is it)
print(next(it) == 4)
print(next(it))
print(next(it))
print(next(it))
print(next(it))
</code></pre>
<p>The output always reads TypeError: 'ReverseIter' object is not iterable. I hav eno idea why this is coming up. Any explanations or suggestions would be helpful. The output of the print statements above by the way should be True, True,  3, 2, 1, Stop Iteration respectively.</p>
</div>
<div class="post-text" itemprop="text">
<p>An object is an <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">iterator</a> if it has a <code>__next__</code> method, which is called to get the next item (and should raise <code>StopIteration</code> when it runs out), and <code>__iter__</code> which returns an iterator (usually just <code>self</code>)</p>
<pre><code>class ReverseIter:
    def __init__(self, sequence):
        self.sequence = sequence
        self.index = len(sequence) 
    def __iter__(self):
        return self
    def __next__(self):
        if self.index &gt; 0:
            self.index -= 1
            return self.sequence[self.index]
        else:
            raise StopIteration
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you must implement the <code>__next__</code> method, as code below.</p>
<pre><code> class ReverseIter:

     """Class whose instances iterate the initial iterable in reverse order"""

     def __init__(self, iterable):
         self.iterable = iterable

     def __iter__(self):
         last = len(self.iterable) - 1
         while last &gt;= 0:
             yield self.iterable[last]
             last -= 1 
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/19151/build-a-basic-python-iterator">Build a Basic Python Iterator</a></span>
<span class="comment-copy">A quibble:  You're assuming the <code>iterable</code> argument is a list, or at least something that can be <code>[]</code> subscripted like a list.  But there are all sorts of <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterables</a> that are not lists...  some can't be subscripted, and some can't be passed to <code>len()</code>.  A better name for that parameter would be <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a>.</span>
<span class="comment-copy">If it's an iterator, per the protocol, it <i>should</i> return self, although this isn't enforced: <a href="https://docs.python.org/3.7/library/stdtypes.html#iterator.__iter__" rel="nofollow noreferrer">docs.python.org/3.7/library/stdtypes.html#iterator.__iter__</a></span>
