<div class="post-text" itemprop="text">
<p>I've run into a fairly simple issue that I can't come up with an elegant solution for.</p>
<p>I'm creating a string using <code>str.format</code> in a function that is passed in a <code>dict</code> of substitutions to use for the format. I want to create the string and format it with the values if they're passed and leave them blank otherwise.</p>
<p>Ex</p>
<pre><code>kwargs = {"name": "mark"}
"My name is {name} and I'm really {adjective}.".format(**kwargs)
</code></pre>
<p>should return</p>
<pre><code>"My name is mark and I'm really ."
</code></pre>
<p>instead of throwing a <code>KeyError</code> (Which is what would happen if we don't do anything).</p>
<p>Embarrassingly, I can't even come up with an inelegant solution for this problem. I guess I could solve this by just not using <code>str.format</code>, but I'd rather use the built-in (which mostly does what I want) if possible.</p>
<p>Note: I don't know in advance what keys will be used. I'm trying to fail gracefully if someone includes a key but doesn't put it in the kwargs dict. If I knew with 100% accuracy what keys would be looked up, I'd just populate all of them and be done with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can follow the recommendation in <a href="http://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101</a> and use a subclass Formatter:</p>
<pre><code>import string

class BlankFormatter(string.Formatter):
    def __init__(self, default=''):
        self.default=default

    def get_value(self, key, args, kwds):
        if isinstance(key, str):
            return kwds.get(key, self.default)
        else:
            return string.Formatter.get_value(key, args, kwds)

kwargs = {"name": "mark", "adj": "mad"}     
fmt=BlankFormatter()
print fmt.format("My name is {name} and I'm really {adj}.", **kwargs)
# My name is mark and I'm really mad.
print fmt.format("My name is {name} and I'm really {adjective}.", **kwargs)
# My name is mark and I'm really .  
</code></pre>
<hr/>
<p>As of Python 3.2, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow noreferrer">.format_map</a> as an alternative:</p>
<pre><code>class Default(dict):
    def __missing__(self, key):
        return '{'+key+'}'

kwargs = {"name": "mark"}

print("My name is {name} and I'm really {adjective}.".format_map(Default(kwargs)))
</code></pre>
<p>which prints:</p>
<pre><code>My name is mark and I'm really {adjective}.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one option which uses <a href="http://docs.python.org/2/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; kwargs = {"name": "mark"}
&gt;&gt;&gt; template = "My name is {0[name]} and I'm really {0[adjective]}."
&gt;&gt;&gt; template.format(defaultdict(str, kwargs))
"My name is mark and I'm really ."
</code></pre>
<p>Note that we aren't using <code>**</code> to unpack the dictionary into keyword arguments anymore, and the format specifier uses <code>{0[name]}</code> and <code>{0[adjective]}</code>, which indicates that we should perform a key lookup on the first argument to <code>format()</code> using <code>"name"</code> and <code>"adjective"</code> respectively.  By using <code>defaultdict</code> a missing key will result in an empty string instead of raising a KeyError.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the record:</p>
<pre class="lang-py prettyprint-override"><code>s = "My name is {name} and I'm really {adjective}."
kwargs = dict((x[1], '') for x in s._formatter_parser())
# Now we have: `kwargs = {'name':'', 'adjective':''}`.
kwargs.update(name='mark')
print s.format(**kwargs)  # My name is mark and I'm really .
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Wanted to add a pretty simple solution to the substituting any default values needed.</p>
<pre><code>import string

class SafeDict(dict):
    def __init__(self, missing='#', empty='', *args, **kwargs):
        super(SafeDict, self).__init__(*args, **kwargs)
        self.missing = missing
        self.empty = empty
    def __getitem__(self, item):
        return super(SafeDict, self).__getitem__(item) or self.empty
    def __missing__(self, key):
        return self.missing

values = SafeDict(a=None, c=1})
string.Formatter().vformat('{a} {c} {d}', (), values)
# ' 1 #'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A way to avoid the key error is to include in the dict but leave it blank:</p>
<pre><code>kwargs = {"name": "mark", "adjective": ""}
"My name is {name} and I'm really {adjective}.".format(**kwargs)
</code></pre>
<p>Keyword arguments expect their to be a key in kwargs. Another way to do it would be positional arguments:</p>
<pre><code>"My name is {0} and I'm really {1}.".format("mark")
</code></pre>
<p>Prints "My name is Mark and I'm really." While </p>
<pre><code>"My name is {0} and I'm really {1}.".format("mark","black")
</code></pre>
<p>Prints "My name is Mark and I'm really black."</p>
<p>Alternatively, you can catch the ValueError. </p>
</div>
<span class="comment-copy">You can also use <code>str.format_map()</code> as described in <a href="http://stackoverflow.com/a/17215533/877069">this answer</a>.</span>
<span class="comment-copy">haha, "Embarrassingly, I can't even come up with an inelegant solution for this problem." You've just got dig deeper into inelegance!</span>
<span class="comment-copy"><b>See also:</b> <a href="https://stackoverflow.com/questions/20248355/how-to-get-python-to-gracefully-format-none-and-non-existing-fields" title="how to get python to gracefully format none and non existing fields">stackoverflow.com/questions/20248355/â€¦</a></span>
<span class="comment-copy">Hmm. This is interesting. I think I'll actually go this route. I'm still not a fan of the ugly indexing that the other answer uses. Thanks for the suggestion!</span>
<span class="comment-copy">I would also add <code>or isinstance(key, unicode)</code></span>
<span class="comment-copy">I am a bit confused. Shouldn't <code>Formatter</code> be <code>string.Formatter</code>? Can that <code>else</code> part even be reached?</span>
<span class="comment-copy">@EliasZamaria: Yes, it should have been <code>return string.Formatter</code> and that has been corrected. The <code>else</code> is reached if you use tuple indexing formatting like <code>"one {0} two {1}".format(1,2)</code> instead of keyword access. Thanks for the comment. Three year old bug fixed!</span>
<span class="comment-copy">The indexing solution isn't (aesthetically) pretty, but you're right, it works as I want.</span>
<span class="comment-copy">This is the simplest solution that I've found. It can also be a one-liner: "My name is {0[name]} and I'm really {0[adjective]}.".format(defaultdict(str, kwargs))  Beautiful!</span>
<span class="comment-copy">In my particular case, this solution won't work. I intend to populate the values that I'm going to end up using. I'm just trying to protect myself so that if I (or someone else) ends up putting in a field and forgets to put it into the dict, we don't just throw an exception and give up on the whole string.</span>
<span class="comment-copy">Well, you should be catching errors anyway. You can also do an <code>assert</code> ahead of time to make sure adjective is atleast initialized to blank in the dictionary.</span>
<span class="comment-copy">The solution above me by @Rob is the same as mine only more verbose: obviously update adjective later if the value is found</span>
<span class="comment-copy">No, I don't statically know what string will be called format on (and with what kwargs). That's the whole problem. I <i>am</i> catching the exception (which is why it doesn't crash the whole application), but I don't want to fail completely when I could get a partially-filled out string instead.</span>
