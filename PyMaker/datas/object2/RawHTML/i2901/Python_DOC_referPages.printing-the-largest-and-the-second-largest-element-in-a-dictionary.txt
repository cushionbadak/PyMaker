<div class="post-text" itemprop="text">
<p>I've written a function that takes a string as an input and hands over a dictionary that indicates the most occurring elements/characters. </p>
<h1>Part 1 - Just finding the most occurring character</h1>
<pre><code>def mostoccur(arr):

   n = len(arr)
   dict={}

   # filling the dictionary with itesm and their frequency using dict.get()

   for i in range(n):
       dict[arr[i]] = dict.get(arr[i],0) + 1


   return dict


string = "aabbccdddddddd"

# turning the string into a list, so it's iterable

ls = list(string)
ans = mostoccur(ls)
print("The dictionary of all the characters and their frequency: \n",ans)

maximum = max(ans)
print("\nThe most occuring character is:",maximum)
</code></pre>
<p>But then I got more curious, and I wanted to print the most occurring and second most occurring element in the dictionary. Thus, I've written something like this:</p>
<h1>Part 2 - Alright, now let's find the second most occurring character</h1>
<pre><code># defining a dictionary to store the most and second most occurring element

biggest = {'most-occuring':0, 'second-most-occuring':0}

# nested loops to go through all values in the dictionary

for a in ans.items():                                  # O(N)
   for b in ans.items():                               # O(N)
       if a &lt; b:                                       
           a,b = b,a
           biggest['most-occuring'] = a
           biggest['second-most-occuring']= b

                                                       # Total = O(N^2)

print(biggest)
</code></pre>
<h1>Big O</h1>
<p>I've written the Big O of each operation next to it, and when I look at it, I really don't like what I've written. I mean, O(N^2) sounds too expensive and inefficient. </p>
<p>Would you be willing to illuminate me on better ways of writing this? </p>
<blockquote>
<p>Please bear in mind that I'm not looking for a method that utilizes
  any libraries.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple algorithm that does it in <code>O(n)</code>:</p>
<pre><code>string = "aabbbccdddddddd"

def get_frequency(string):
    chars = {}
    for char in string:
        chars[char] = chars.get(char, 0) + 1 

    biggest = [None, 0]
    second = [None, 0]

    for entry in chars.items():
        char, count = entry
        if count &gt; biggest[1]:
            second = biggest
            biggest = entry
        elif count &gt; second[1]:
            second = entry

    return {
        "most-occurring": biggest[0],
        "second-most-occurring": second[0]
    }

print(get_frequency(string))
</code></pre>
<p>This prints <code>{'second-most-occurring': 'b', 'most-occurring': 'd'}</code></p>
<p>Note that I added an extra 'b' to <code>string</code> in order to make that the second most frequent letter</p>
</div>
<div class="post-text" itemprop="text">
<p>Use heapq.nlargest, like this:</p>
<pre><code>from collections import Counter
import heapq
string = "aabbccdddddddd"
counts = Counter(string)
heapq.nlargest(2, counts, key=lambda k: counts[k])
</code></pre>
<p>And using no libraries, assuming your function returns the same thing as Counter:</p>
<pre><code>keys = list(counts.keys())
keys.sort(key=lambda x: counts[x],reverse=True)
top_two = keys[:2] # just the keys
{ k : counts[k] for k in keys[:2] } # dict of top two
</code></pre>
</div>
<span class="comment-copy">Why do you think <code>if a &lt; b</code> is O(n)? I see that as O(1).</span>
<span class="comment-copy">This is <code>O(n**2)</code> because <code>a &lt; b</code> is <code>O(1)</code>.  An <code>O(n)</code> solution would be to iterate through the list once and keep track of the two highest values you've seen.  Also, see <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>collections.Counter.most_common</code></a></span>
<span class="comment-copy">My understanding is that, the 'if' is gonna happen for each cycle of the 'loop' and therefore, it is (O (f(n) x g(n)), am I wrong?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/991350/counting-repeated-characters-in-a-string-in-python">Counting repeated characters in a string in python</a> may give you another perspective on how to simplify your approach.</span>
<span class="comment-copy">@PatrickHaugh  the link you've sent, requires a library. I have to import 'Counter' from 'collections', which I was aware of before posting the question...</span>
<span class="comment-copy">You could do it more pythonic combining two lines into -&gt; second,biggest = biggest, entry</span>
<span class="comment-copy">Overall, thank you very much for the solution. I like it :)</span>
<span class="comment-copy">Hello mate, I've witnessed that removing 'None' from the array would result in an error! I don't understand why! would you illuminate me ?</span>
<span class="comment-copy">The for loop is trying to access the second element (index 1) of each array, if you remove None, you'll get an IndexError</span>
<span class="comment-copy">so why don't we still get the index error after having loop with one element and accessing index 0 ?</span>
<span class="comment-copy">No libraries, no built-in functions. Read the question carefully. I'm aware of the Counter.</span>
<span class="comment-copy">Sorry. Missed that line. Adding an edit to my answer.</span>
