<div class="post-text" itemprop="text">
<p>I want to use a decorator which is a function in a class that is in different python module.</p>
<p>Creating an instance of the class globally and using the decorator like '@global_obj.my_decor' would work.</p>
<p>But I somehow feel it doesn't look clean. Is there any other way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you simply want to avoid a global object (I probably would want to), you can always just avoid the syntactic sugar and create and object and decorate your function by hand:</p>
<pre><code>In [23]: class Foo:
    ...:     def deco(self, f):
    ...:         def wrapper(*args, **kwargs):
    ...:             print("hi")
    ...:             result = f(*args, **kwargs)
    ...:             print("I am decorated")
    ...:             return result
    ...:         return wrapper
    ...:

In [24]: def func(x, y):
    ...:     return 2*x + 3*y
    ...:
    ...:

In [25]: func = Foo().deco(func)

In [26]: func(3,2)
hi
I am decorated
Out[26]: 12
</code></pre>
<p>To me, this suggests that you might be better off without the class to begin with. But without more details, I can only guess.</p>
</div>
<span class="comment-copy">Decorate the function in that class with a <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">@staticmethod</a></span>
<span class="comment-copy">missing the <code>@staticmethod</code></span>
<span class="comment-copy">@aydow it doesn't require it. If it <i>was</i> a static-method, then you could use the <code>@Foo.static_deco</code> syntactic sugar. I'm assuming the OP actually requires a class with state. But if you are going to use a <code>@staticmethod</code>, why not just a plain decorator function?</span>
<span class="comment-copy">@juanpa.arrivillaga, thanks. I just avoided using decorator.  I am using Falcon APIs in python which supports middleware. I have put the logic(actually auth-token validation) inside middleware, so its called every time before my actual APIs are called. And its coded only at one place</span>
