<div class="post-text" itemprop="text">
<p>I have a file with several thousand records and a list of regular expressions. I’d like to take each record in the file in turn and evaluate it against my list of regular expressions to a point where a match if found.</p>
<p>I created a single threaded script and it does the job but is very slow. To make it multithreaded I made the following adjustments:</p>
<ol>
<li>Created the <code>run_target()</code> function that is be passed to the Thread constructor</li>
<li>Created 5 worker threads</li>
<li>Added the target function to the <code>check_file()</code> function.</li>
</ol>
<p>Question: <code>run_target()</code> takes 2 arguments that I pass to it with each iteration of the <code>while</code> loop in the <code>check_file()</code> function. Do I need to somehow pass the arguments to the constructor when I create worker threads or shall I leave it as default? Or, should I pass keyword arguments with default values?</p>
<p>Also, is there a better or smarter way to tackle this. Thanks in advance. </p>
<pre><code>def run_target(key, expr):
    matchStr = re.search(expr, key, re.I)
    if matchStr:
        return 1
    else:
        return 0


for i in range(number_of_threads):
    worker = Thread(target = run_target(), args = ())
    worker.daemon = True
    t.start()


def check_file():

    for key, value in data.items():
        while True:
            expr = q.get()
            result = run_target(key, expr)
            if result == 1:
                lock.acquire()
                print ‘Match found’
                lock.release()
                break
            q.task_done()
        q.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Re your first question - yes, as per <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">the threading library documentation</a> the function arguments need to be passed in <code>Thread</code> constructor. So instead of <code>worker = Thread(target = run_target(), args = ())</code> you need something like <code>worker = Thread(target = run_target, args = (key, expr))</code>. Note no braces after <code>run_target</code>.</p>
<p>The code you have posted does not seem to do what you are intending, anyway. IMO, to achieve your goals, the better strategy is to have a function that takes a regex as an argument, and do the entire processing of the file in that function. And then spawn several threads with <code>Thread(target = process_file, args = (expr,))</code> (note the comma after <code>expr</code>).</p>
<p>Note, that there is a known hurdle with threads in the most popular python distro, that make them useless on multicore CPUs - see more in <a href="https://stackoverflow.com/a/7542982/2291425">this SO answer</a>. If that is the case on your system, then using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> is a good alternative - the high level API is quite similar.</p>
<p>Happy coding :)</p>
</div>
<span class="comment-copy">I don't understand this code at all. Your loop will create threads that try to run <code>run_target</code>, but they'll all fail since you're passing an empty tuple of arguments. Then <code>check_file</code> calls <code>run_target</code> itself, completely separate from the threads. Are you wanting to make a thread-pool or something (e.g. <code>concurrent.futures.ThreadPoolExecutor</code>)? In any case, I don't expect you'll get any speedup using threads for regular expression matching, since the work is CPU bound and the GIL will prevent any real concurrency.</span>
<span class="comment-copy">Thank you Evgeney. Excellent answer. This is what I was looking for.</span>
