<div class="post-text" itemprop="text">
<p>What exactly does passing <code>threaded = True</code> to <code>app.run()</code> do?</p>
<p>My application processes input from the user, and takes a bit of time to do so. During this time, the application is unable to handle other requests. I have tested my application with <code>threaded=True</code> and it allows me to handle multiple requests concurrently.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Flask 1.0, the WSGI server included with Flask is run in threaded mode by default.</p>
<p>Prior to 1.0, or if you disable threading, the server is run in single-threaded mode, and can only handle one request at a time. Any parallel requests will have to wait until they can be handled, which can lead to issues if you <a href="https://stackoverflow.com/questions/12591760/flask-broken-pipe-with-requests">tried to contact your own server from a request</a>.</p>
<p>With <code>threaded=True</code> requests are each handled in a new thread. How many threads your server can handle concurrently depends entirely on your OS and what limits it sets on the number of threads per process. The implementation uses the <a href="https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn" rel="noreferrer"><code>SocketServer.ThreadingMixIn</code> class</a>, which sets no limits to the number of threads it can spin up.</p>
<p>Note that the Flask server is designed for <em>development only</em>. It is <strong>not</strong> a production-ready server. Don't rely on it to run your site on the wider web. Use a proper WSGI server like <a href="http://gunicorn.org/" rel="noreferrer">gunicorn</a> or <a href="http://projects.unbit.it/uwsgi/" rel="noreferrer">uWSGI</a>) instead.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How many requests will my application be able to handle concurrently with this statement?</p>
</blockquote>
<p>This depends drastically on your application.  Each new request will have a thread launched- it depends on how many threads your machine can handle.  I don't see an option to limit the number of threads (like uwsgi offers in a production deployment).</p>
<blockquote>
<p>What are the downsides to using this? If i'm not expecting more than a few requests concurrently, can I just continue to use this?</p>
</blockquote>
<p>Switching from a single thread to multi-threaded can lead to concurrency bugs... if you use this be careful about how you handle global objects (see the g object in the documentation!) and state.  </p>
</div>
<span class="comment-copy">The only people that will be using my application are a select few people in my office. Is it okay to keep it in this state?</span>
<span class="comment-copy">@Harrison: then that's fine, unless those people are liable to try and hack or DDOS your machine.</span>
<span class="comment-copy">I can fully trust them. The likelihood that multiple people will use the application at the same time is relatively slim, so I think for now I will just keep it running on the Flask server. At what point do you think it would be a good decision to deploy using gunicorn?</span>
<span class="comment-copy">@Harrison: the moment you want to open it to the wider web, or you feel you need better control over how much resources you want the server to use. A dedicated WSGI server can control the amount of concurrency, as well as use multiple processes to distribute the load.</span>
<span class="comment-copy">@Uddhav: no, that'd not be expected behaviour. Perhaps the other threads are waiting on a lock that the frozen thread holds? If you can create a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> then perhaps you can post a question about this?</span>
<span class="comment-copy">Okay, thanks. You definitely cleared this up for me. By my question asking how many requests it can handle I just was wondering like, does <code>thread = true</code> just allow a hard coded <code>x</code> amount of requests to be handled concurrently. So it's determined by my machine?</span>
<span class="comment-copy">I never use the dev server, so my answer is not definitive, however, it does not appear to have any limit set... so infinite (depending on system resources).  I run my apps using uWSGI, which DOES have a configurable thread limit.</span>
