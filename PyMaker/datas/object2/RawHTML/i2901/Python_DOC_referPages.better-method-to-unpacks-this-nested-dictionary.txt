<div class="post-text" itemprop="text">
<p>I got a nested dictionary as follows and it will return the third key while inputting the first key in the dictionary </p>
<pre><code>tree = {"Luke" : {"Darth Vader" : {"The Chancellor"}},
        "Neal" : {"Les" : {"Joseph"}},
        "George" : {"Fred" : {"Mickey"}},
        "Robert" : {"Tim" : {"Michael"}},
        "Juan" : {"Hunter" : {"Thompson"}}}



check_con = input("Enter your Name")
for fi_name,fi_second in tree.items():
    if check_con in fi_name:
        for fi_third,fi_fourth in fi_second.items():
            print(fi_fourth)
</code></pre>
<p>I feel that its bit more steps, is there any other way to do it?</p>
<p>Regard</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>dict.get</code> method with a default value of empty dict to get the top level dict and then convert its values to a iter, use <code>next</code> to get the first value</p>
<pre><code>&gt;&gt;&gt; check_con = 'Neal'
&gt;&gt;&gt; next(iter(tree.get(check_con, {}).values()), '')
{'Joseph'}
&gt;&gt;&gt; 
&gt;&gt;&gt; check_con = 'xxx'
&gt;&gt;&gt; next(iter(tree.get(check_con, {}).values()), '')
''
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use a <code>try-excep</code> expression in order to find out whether your name exist in the dictionary or not. If it exist there you can then return all the values of the respective value:</p>
<pre><code>def get_nested_item(tree, check_on):
    try:
        sub_dict = tree[check_on]
    except KeyError:
        print("No result")
        return
    else:
        return sub_dict.values()
</code></pre>
<p>Also note that about checking the existence of your name in dictionary what you're ding here is a membership checking at following line:</p>
<pre><code>if check_con in fi_name:
</code></pre>
<p>Which will not check for equality but checks if <code>check_con</code> appears within the dictionary keys. However if this is what you want you have to loop over your items and find the intended one. But also note that this may have multiple answers or in other words there may be multiple keys matching your criteria which contradicts with the whole purpose of using a dictionary.</p>
<p>Demo:</p>
<pre><code>In [11]: get_nested_item(tree, "George")
Out[11]: dict_values([{'Mickey'}])

In [12]: get_nested_item(tree, "Luke")
Out[12]: dict_values([{'The Chancellor'}])

In [13]: get_nested_item(tree, "Sarah")
No result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is a variant where i use <code>next(iter(...))</code> in order to get the 'first' element of your <code>dict</code> and <code>set</code> (note that you innermost curly brackets in your <code>tree</code> are <code>set</code>s and not <code>dict</code>s):</p>
<pre><code>def get(tree, name):

    def first(seq):
        return next(iter(seq))

    if name in tree:
        return first(first(tree[name].values()))
    else:
        return None

print(get(tree=tree, name='Juan'))  # 'Thompson'
print(get(tree=tree, name='Jan'))   # None
</code></pre>
<p>as both <code>set</code>s and <code>dict_values</code> (which is the type <code>dict(...).values()</code> returns) are not indexable (have no <code>__getitem__</code> method) i turn them into an iterator using <a href="https://docs.python.org/3/library/functions.html?highlight=iter#iter" rel="nofollow noreferrer"><code>iter</code></a> and get the first element using <a href="https://docs.python.org/3/library/functions.html?highlight=built#next" rel="nofollow noreferrer"><code>next</code></a>.</p>
</div>
<span class="comment-copy">You mean if you give "Luke" you want to return "The Chancellor" ?</span>
<span class="comment-copy">@VikasDamodar , yes</span>
<span class="comment-copy">Use <code>fi_second = tree[check_con]</code>. Or <code>fi_second = tree.get(check_con)</code> if it's not guaranteed that <code>check_con</code> exists.</span>
<span class="comment-copy">I used the dictionary to make it simple,even if its possible with a single tuple,or list is okay for me</span>
<span class="comment-copy"><code>.get(key[, default])</code> might be helpful here.</span>
<span class="comment-copy">iter and next seems reduntant as this can be achived by <code>print((tree[check_con].keys()))</code>  ,</span>
<span class="comment-copy">@Karamzov. In python2, they are redundant. You can instead use dict.keys()[0]. But on python3, they are needed to get the first element from the dict.keys().</span>
<span class="comment-copy">ok .. sunitha...</span>
<span class="comment-copy">in my dictionary format,is the last entry is a dict key or a set ?</span>
<span class="comment-copy">@Karamzov. The inner most entry in your dict is a set. You can check it up using <code>type</code> command. <code>type({"The Chancellor"})</code> would give <code>&lt;class 'set'&gt;</code></span>
<span class="comment-copy">returns empty ....</span>
<span class="comment-copy">@Karamzov What was your input?</span>
<span class="comment-copy"><a href="https://onlinegdb.com/BkZbrTLS7" rel="nofollow noreferrer">onlinegdb.com/BkZbrTLS7</a> , its empty</span>
<span class="comment-copy">good one,  i didnt get the  function part well but its returning the result</span>
<span class="comment-copy">what needs more explaining? the <code>first</code> function?</span>
<span class="comment-copy">~def first(seq):~</span>
