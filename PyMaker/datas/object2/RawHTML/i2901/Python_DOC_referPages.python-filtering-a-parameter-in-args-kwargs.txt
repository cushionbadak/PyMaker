<div class="post-text" itemprop="text">
<p>I am writing a GUI in wxPython, and am creating a custom control for displaying a terminal window, as I have not been able to find one currently in existence.</p>
<p>My control <code>TerminalCtrl</code> extends upon <code>wx.Control</code>, and my init definition starts as follows:</p>
<pre><code>def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
</code></pre>
<p>I would like to enforce the following style:</p>
<pre><code>style=wx.BORDER_NONE
</code></pre>
<p>That is, no borders will ever be allowed on this window. However, I would still like to allow <em>other</em> styles to be applied, at programmers discretion.</p>
<p>For reference, the <code>__init__</code> function for <code>wx.Control</code> is defined as follows</p>
<pre><code>__init__ (self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr)
</code></pre>
<p>What I would like to achieve is that I may filter the <code>style</code> parameter to enforce the <code>wx.BORDER_NONE</code> style. It is my understanding that this could be in either <code>*args</code> or <code>**kwargs</code>, depending on whether the parameters are passed by position or by specifically referencing the parameter name such as (<code>style=wx.BORDER_NONE</code>).</p>
<p>Is there a standard/recommended/pythonic way that I may enforce such a filter upon a parameter before passing it on to <code>wx.Control.__init__</code> and if so how may I achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The cleanest way is probably to just copy the base class's signature:</p>
<pre><code>def __init__(self, parent, id=ID_ANY, pos=DefaultPosition,
             size=DefaultSize, style=0, validator=DefaultValidator,
             name=ControlNameStr):
    style |= wx.BORDER_NONE
    super().__init__(parent, id, pos, size, style, validator, name)
</code></pre>
<hr/>
<p>This can get a bit ugly if you're doing this for a whole bunch of classes whose construction signatures all have a whole bunch of positional-or-keyword parameters. Or if you're doing it for an API that changes regularly.</p>
<p>For those cases, you can always do it dynamically, with <a href="https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object" rel="nofollow noreferrer"><code>inspect</code></a>:</p>
<pre><code>_wxControlSig = inspect.signature(wx.Control)

class TerminalCtrl(wx.Control)
    def __init__(self, *args, **kwargs):
        bound = _wxControlSig.bind(*args, **kwargs)
        bound.apply_defaults()
        bound.arguments['style'] |= wx.BORDER_NONE
        super().__init__(*bound.args, **bound.kwargs)
</code></pre>
<p>If you were doing dozens of these, you'd probably want to write a decorator to help out. And you might also want to apply <code>functools.wraps</code> or do the equivalent manually to make your signature introspectable. (And if you weren't doing dozens of these, you'd probably want to just be explicit, as in the example at the top of the answer.)</p>
<hr/>
<p>If you have something which is just a bit too repetitive and annoying to do explicitly, but not worth going crazy with the introspection, the only thing in between is something decidedly hacky, like this:</p>
<pre><code>def __init__(self, *args, **kwargs):
    if len(args) &gt; 3:
        args = list(args)
        args[3] |= WX_BORDER_NONE
    elif 'style' in kwargs:
        kwargs['style'] |= wx.BORDER_NONE
    else:
        kwargs['style'] = wx.BORDER_NONE
    super().__init__(*args, **kwargs)
</code></pre>
<p>For Python 2.x (or 3.0-3.2), where you don't have <code>signature</code>, only <code>getargspec</code> and friends, this might be tempting. But for 3.3+, the only reason to avoid <code>signature</code> would optimizing out a few nanoseconds. and when the function in question is the constructor for a widget that involves talking to the system window manager, that would be pretty silly to worry about.</p>
</div>
<span class="comment-copy">Looks like an overkill for something as simple as: <code>kwargs['syle'] = kwargs['style'] | wx.BORDER_NONE if 'style' in kwargs else wx.BORDER_NONE</code> before passing to the <code>super().__init__(..)</code>. Or may be I'm missing something</span>
<span class="comment-copy">@UltraInstinct Yes, you're missing the fact that the OP is explicitly worried about supporting calling his constructor with the style as a positional argument, in which case your code would raise a <code>TypeError</code>.</span>
<span class="comment-copy">Ahh, missed that part. I'd personally go with the first code block (copy the signature and let python do the hard work). +1</span>
<span class="comment-copy">@UltraInstinct Yeah, that's why I put that one first. I have, once or twice, run into the case where you're wrapping up a whole library full of classes or functions with a dozen+ parameters where most of the sample code passed the first half-dozen arguments by position, so you have to expect your users to do the same thing. In fact, I think it was with an ancient version of wxPython, and I ended up using the 2.3-era <code>inspect.getargspec</code> to do it. By comparison, <code>signature</code> is pretty nice, but then by comparison, red-hot needles in the eardrums are pretty nice. :)</span>
<span class="comment-copy">Great - I just copied the parameter list across. I was initially a bit hesitant to do that, I thought I would have more issues. But it does the job perfectly - thank you!</span>
