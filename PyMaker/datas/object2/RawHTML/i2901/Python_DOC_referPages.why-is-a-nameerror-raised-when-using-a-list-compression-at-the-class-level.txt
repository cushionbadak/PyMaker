<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition">Accessing class variables from a list comprehension in the class definition</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I get interesting for me trouble in my code.</p>
<pre><code>...
class Planet:
    ATMOSPHERE_GASES = {
        'N2':(67.59, 28.0134),
        'O2':(28.04, 31.9988),
        'CO2':(0.0114, 44.00995),
        'CH4':(0.00015, 16.04303),
        'Ar':(1.105, 39.948),
        'Ne':(1.003, 20.179),
        'He':(0.719, 4.0026),
        'Kr':(0.45, 83.80),
        'H2':(0.001, 2.01594),
        'Xe':(0.23, 131.30)}
    ATMOSPHERE_GASES['Other'] = tuple([100-sum([x[0] for x in ATMOSPHERE_GASES.values()]), sum([x[1] for x in ATMOSPHERE_GASES.values()])/len(ATMOSPHERE_GASES.values())])
    ATMOSPHERE_GASES_MOLAR_MASS = sum([sum(ATMOSPHERE_GASES[x]) for x in ATMOSPHERE_GASES.keys()])/100
    ...
</code></pre>
<p>ATMOSPHERE_GASES_MOLAR_MASS give error <code>NameError("name 'ATMOSPHERE_GASES' is not defined",)</code> I check indented block, tabs and some other reasons, try to rewrite this part, but nothing. But without class it works!</p>
<pre><code>Traceback (most recent call last):
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\ptvsd_launcher.py", line 111, in &lt;module&gt;
    vspd.debug(filename, port_num, debug_id, debug_options, run_as)
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\Packages\ptvsd\debugger.py", line 36, in debug
    run(address, filename, *args, **kwargs)
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\Packages\ptvsd\_main.py", line 47, in run_file
    run(argv, addr, **kwargs)
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\Packages\ptvsd\_main.py", line 98, in _run
    _pydevd.main()
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\Packages\ptvsd\pydevd\pydevd.py", line 1628, in main
    globals = debugger.run(setup['file'], None, None, is_module)
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\Packages\ptvsd\pydevd\pydevd.py", line 1035, in run
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\Microsoft\Python\Core\Packages\ptvsd\pydevd\_pydev_imps\_pydev_execfile.py", line 25, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "C:\Users\Rain0Ash\source\repos\A\A\A.py", line 57, in &lt;module&gt;
    class Planet:
  File "C:\Users\Rain0Ash\source\repos\A\A\A.py", line 70, in Planet
    ATMOSPHERE_GASES_MOLAR_MASS = sum([mult(ATMOSPHERE_GASES[x]) for x in ATMOSPHERE_GASES.keys()])/100
  File "C:\Users\Rain0Ash\source\repos\A\A\A.py", line 70, in &lt;listcomp&gt;
    ATMOSPHERE_GASES_MOLAR_MASS = sum([mult(ATMOSPHERE_GASES[x]) for x in ATMOSPHERE_GASES.keys()])/100
NameError: name 'ATMOSPHERE_GASES' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a scoping issue. Class level variables in Python can always be a little strange, but it is important to understand how it works if you use them heavily.</p>
<p>The actual issue is with the list comprehension, which tries to access <code>ATMOSPHERE_GASES</code> as a global variable. To see why, you need to understand more about classes are built by the interpreter. To find the issue, we will first need to use the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code></a>. This will allow to get the <strong>abstract syntax tree</strong>, which is a data structure. Then we will be able to convert it into a byte code object using the builtin <code>compile</code> function.</p>
<pre><code> tree = ast.parse('''
 &lt;your code here...&gt;
 ''')
 # You need a filename, so we will just use __name__ because it's not important for our purpose
 # The 'exec' is to tell the interpreter we want to execute a module, not evaluate an expression
 code = compile(tree, __name__, 'exec')
</code></pre>
<p>Then we will need to use the Python disassembly module <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a>. The function <code>dis.dis</code> will let you see what the code compiles to. It prints out a lot of code, but I will limit it to the code associated with the list comprehension (list comprehensions and generator expressions have their own code objects like functions and modules).</p>
<pre><code> &gt;&gt;&gt; dis.dis(code)
 ...
 Disassembly of &lt;code object &lt;listcomp&gt; at 0x00000290AA0D59C0, file "__main__", line 4&gt;:
  4           0 BUILD_LIST               0
              2 LOAD_FAST                0 (.0)
        &gt;&gt;    4 FOR_ITER                16 (to 22)
              6 STORE_FAST               1 (x)
              8 LOAD_GLOBAL              0 (sum)
             10 LOAD_GLOBAL              1 (ATMOSPHERE_GASES)
             12 LOAD_FAST                1 (x)
             14 BINARY_SUBSCR
             16 CALL_FUNCTION            1
             18 LIST_APPEND              2
             20 JUMP_ABSOLUTE            4
        &gt;&gt;   22 RETURN_VALUE
</code></pre>
<p>If you pay attention to the instruction at index 10, you will notice that it says <code>LOAD_GLOBAL 1 (ATMOSPHERE_GASES)</code>. This means it is looking for <code>ATMOSPHERE_GASES</code> in the global scope, not the class-level scope.</p>
<p>The reason the <code>ATMOSPHERE_GASES_MOLAR_MASS = sum(sum(tup) for tup in ATMOSPHERE_GASES.values()) / 100</code> solution works is because then you can avoid the <code>ATMOSPHERE_GASES[x]</code> logic, which is what is causing the problem.</p>
<p><strong>TL;DR</strong>: Class level variables are complicated because of how classes scope variables. The list comprehension considers <code>ATMOSPHERE_GASES</code> a global variable, and then can't find it in the module's global scope. It would most likely be best to move this computation outside of the class's definition into the global scope.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define <code>__init__</code> in your class, and then do <code>self</code>, like below:</p>
<pre><code>class Planet:
   def __init__(self):
       self.ATMOSPHERE_GASES = {
           'N2':(67.59, 28.0134),
           'O2':(28.04, 31.9988),
           'CO2':(0.0114, 44.00995),
           'CH4':(0.00015, 16.04303),
           'Ar':(1.105, 39.948),
           'Ne':(1.003, 20.179),
           'He':(0.719, 4.0026),
           'Kr':(0.45, 83.80),
           'H2':(0.001, 2.01594),
           'Xe':(0.23, 131.30)}
       self.ATMOSPHERE_GASES['Other'] = tuple([100-sum([x[0] for x in self.ATMOSPHERE_GASES.values()]), sum([x[1] for x in self.ATMOSPHERE_GASES.values()])/len(self.ATMOSPHERE_GASES.values())])
       self.ATMOSPHERE_GASES_MOLAR_MASS = sum([sum(self.ATMOSPHERE_GASES[x]) for x in self.ATMOSPHERE_GASES.keys()])/100
</code></pre>
<p>See also: <a href="https://stackoverflow.com/questions/625083/python-init-and-self-what-do-they-do">Python __init__ and self what do they do?</a></p>
</div>
<span class="comment-copy">P.S. I'm not very strong in the python, but with the usual variables it works - with the dict in this example - no.</span>
<span class="comment-copy">This does not address why the error occurs, but you can simplify the calculation: <code>ATMOSPHERE_GASES_MOLAR_MASS = sum(sum(tup) for tup in ATMOSPHERE_GASES.values()) / 100</code>.</span>
<span class="comment-copy">Thanks. And it seems fix, tomorrow I'll check.</span>
<span class="comment-copy">@Rain0Ash Ok, How about my answer?</span>
<span class="comment-copy">It works, but it need object, that doesn't suit me in this case. I use previous code, it fix this problem. And Edward Minnix gave me an explanation. But thanks.</span>
<span class="comment-copy">Thank you very much for the explanation. I understood this.</span>
<span class="comment-copy">You don't need to use <code>__init__</code> to accomplish this. Simply use <code>self.ATMOSPHERE_GASES</code></span>
<span class="comment-copy">This has the problem of recomputing this every time rather than treating them like static variables in Java (which is usually one of the motivations for using class-level variables). Also, this means you must instantiate a <code>Planet</code> object in order to use these variables instead of <code>Planet.ATMOSPHERE_GASES</code></span>
<span class="comment-copy">@smac89 you would still need to calculate this in some method. You can't compute the value in the class body itself. If you use this method, <code>__init__</code> is a fine place to use it because it is run on instance creation.</span>
<span class="comment-copy">Ofc! Yea you're right</span>
