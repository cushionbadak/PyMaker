<div class="post-text" itemprop="text">
<p>I'd like to share <strong>global states</strong> (e.g. <em>is_online</em> or <em>num_items</em>) between <code>classes</code> like <strong>services</strong> and the <strong>GUI</strong>.</p>
<p>I'd like to be able to <strong>modify states everywhere</strong>: events, service init, etc.</p>
<p>Currently I store all shared states in <code>globals.py</code>, which can be modified everywhere. To display a state in the GUI in almost live, I just check the states every x seconds and update the GUI label.</p>
<p>It <strong>feels very dirty</strong> and as I'm new to Python I'd like to know how to do it properly. </p>
<p>This question is <strong>not opinion based</strong>. There should be a <strong>convention</strong> or  <strong>best practice</strong> that I missed. The topic seems pretty common to me.</p>
<p>Any ideas? Thank you!</p>
<p><strong>app.py</strong></p>
<pre><code>from Tkinter import *
from gui import *
from item_service import *

def main():
    root = Tk()
    GUI(root)

    item_service = ItemService()
    item_service.add_item()

    root.mainloop()

main()
</code></pre>
<p><strong>globals.py</strong></p>
<pre><code>num_items = 0
</code></pre>
<p><strong>item_service.py</strong></p>
<pre><code>import globals

class ItemService(object):
    def add_item(self):
        globals.num_items += 1

    def remove_item(self):
        globals.num_items -= 1
</code></pre>
<p><strong>GUI.py</strong></p>
<pre><code>from Tkinter import *
import globals
import time
import threading
from item_service import *

class GUI(Frame):
    def __init__(self, parent, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.root = parent
        self.render()
        update_states_thread = threading.Thread(target=self.update_states).start()

    def render(self):
        self.root.title("My App")
        self.root.geometry("500x500")
        self.root.grid()

        self.label = Label(self.root)
        self.label.config(text = "Items: ?")
        self.label.grid()

        self.add_button = Button(self.root, text="+", command = self.add_item)
        self.add_button.grid()

        self.remove_button = Button(self.root, text="-", command = self.remove_item)
        self.remove_button.grid()

    def update_states(self):
        while (True):
            self.label.config(text = "Items: " + str(globals.num_items))
            time.sleep(0.25)

    def add_item(self):
        item_service = ItemService()
        item_service.add_item()

    def remove_item(self):
        item_service = ItemService()
        item_service.remove_item()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways to store data like databases, files and so on.
For example, you can simply store your "state" in a sqlite database.</p>
<pre><code>import sqlite3

# Connect to the sqlite database file
conn = sqlite3.connect('example.db')
c = conn.cursor()

# Create your table
c.execute('''CREATE TABLE states (num_items real)''')

# Update the state (update num_items to be 999)
c.execute("INSERT INTO states VALUES (999)")

# Save and close
conn.commit()
conn.close()
</code></pre>
<p>Source: <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sqlite3.html</a></p>
</div>
<span class="comment-copy">Thanks for your reply. The states like <code>is_online</code> are just temporary and should be stored only in memory to be resettet on app crash. I use sqlite for other data. :)</span>
<span class="comment-copy">I see. Then you might want to check out <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
