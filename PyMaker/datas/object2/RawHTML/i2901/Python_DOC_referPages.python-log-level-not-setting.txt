<div class="post-text" itemprop="text">
<p>In file 1:</p>
<pre><code>def get_logger():
    return logging.getLogger(_LOGGER_NAME)


def init_logger():
    message_format = logging.Formatter(fmt='%(asctime)s %(name)s &gt;&gt;&gt; %(message)s',
                                       datefmt='%Y-%m-%d %H-%M-%S')

    console_info_handler = logging.StreamHandler(sys.stdout)
    console_info_handler.setLevel(logging.INFO)
    console_info_handler.setFormatter(fmt=message_format)

    logger = logging.getLogger(_LOGGER_NAME)
    logger.addHandler(console_info_handler)
    logger.setLevel(logging.INFO)

    return logger
</code></pre>
<p>In file 2:</p>
<pre><code>if name == '__main__':
    logger = get_logger()
    logger.info(logger.level)
</code></pre>
<p>Does not print anything (imports are in place of course). And if I go:</p>
<pre><code>if __name__ == '__main__':
    logger = get_logger()
    logger.critical(logger.level)
</code></pre>
<p>The output is 0, instead of the expected 20. So it looks like the logger level isn't set at the level that I thought it was. Moreover, the level is lower than I thought it was, yet it still doesn't log on logger.info. What am I doing wrong here? Oh and bonus question (since I stole the above code and don't know any of python's logging intricacies), how does resolution of a log message happen if the logger's level and the handler's level clash?</p>
</div>
<div class="post-text" itemprop="text">
<p>File 2 only calls <code>get_logger()</code> and not <code>init_logger()</code>. Thus, setLevel is never called on the logger, so its given the default value of <code>NOTSET</code>. </p>
<p>Take a look at: <a href="https://docs.python.org/3/library/logging.html#logging.Logger.setLevel" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.html#logging.Logger.setLevel</a></p>
<p>By default, the root logger is created with level <code>WARNING</code>. This is why <code>logger.info(logger.level)</code> does nothing as <code>INFO</code> is below <code>WARNING</code>. <code>logger.critical(logger.level)</code>, on the other hand, outputs 0 as this is the numeric value of <code>NOTSET</code>. </p>
<p>To have it do what you want, just call <code>init_logger()</code> in your second file: </p>
<pre><code>if __name__ == '__main__':
    logger = init_logger()
    logger.info(logger.level)
</code></pre>
<p>To answer your bonus question: the handler gets whatever messages get through the logger.</p>
<p>If the level of the logger is <code>DEBUG</code>, and the level of the handler is <code>INFO</code>, the handler will receive all messages from the <code>DEBUG</code> Level and up, but will only output messages on the <code>INFO</code> level and up. </p>
</div>
<div class="post-text" itemprop="text">
<p>You didn't call <code>init_logger()</code> (before calling <code>logger.info()</code>) so the level of your non-default <code>_LOGGER_NAME</code> was not set.</p>
<p>Also note the typo: <code>if name == '__main__':</code> -&gt; <code>if __name__ == '__main__':</code></p>
</div>
<span class="comment-copy">What is <code>_LOGGER_NAME</code>?</span>
