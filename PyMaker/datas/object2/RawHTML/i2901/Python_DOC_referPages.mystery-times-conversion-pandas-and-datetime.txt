<div class="post-text" itemprop="text">
<p>Can anyone explain this?</p>
<pre><code>import pandas as pd
import datetime
pd.to_datetime(1532329236726000, unit="us")
</code></pre>
<p>returns <code>Timestamp('2018-07-23 07:00:36.726000')</code></p>
<pre><code>datetime.datetime(2018, 7, 23, 8, 0, 36, 726000).timestamp() * 10**6
</code></pre>
<p>returns <code>1532329236726000.0</code>.</p>
<p>So, is <code>1532329236726000</code> 2018-07-23 07:00:36 or 2018-07-23 08:00:36 ?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will depend on the timezone info of the datetime object you create. YOu are in fact creating a naive timezone object in both cases which does not have a specific timezone set</p>
<p><code>datetime.datetime()</code> objects may assume a local timezone as opposed to UTC which your <code>pd.to_datetime()</code> assumes</p>
<p><code>datetime.datetime(2018, 7, 23, 7, 0, 36, 726000).replace(tzinfo=pytz.utc).timestamp() * 10**6</code> returns the same epoch time you put into your original question</p>
<p>From the python docs</p>
<p>"A naive object does not contain enough information to unambiguously locate itself relative to other date/time objects. Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it is up to the program whether a particular number represents metres, miles, or mass. Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality."</p>
<p><a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html</a></p>
<p>You can explicitly tell both functions in your answer to use UTC with a kwarg to the constructors (and without using <code>pytz</code> as below)</p>
<p><code>datetime.datetime(2018, 7, 23, 7, 0, 36, 726000, tzinfo=datetime.timezone.utc)</code></p>
<p><code>pd.to_datetime(1532329236726000, unit="us", utc=True)</code></p>
</div>
<span class="comment-copy">I think you should try it again. I just did <code>&gt;&gt;&gt; datetime.datetime(2018, 7, 23, 8, 0, 36, 726000).timestamp() * 10**6</code> and got 1532354436726000.0</span>
<span class="comment-copy">Ok, so why does it depends on the computer then?</span>
<span class="comment-copy">It shouldn't. What version of Python are you using?</span>
<span class="comment-copy"><code>sys.version_info(major=3, minor=5, micro=2, releaselevel='final', serial=0)</code></span>
<span class="comment-copy">Can't reproduce your error.</span>
<span class="comment-copy">I suspected it might be something to do with timezone. However I still don't get it. That datetime object doesn't know about timezone. pandas.to_datetime does't know about timezone. So how does the discrepancy appear?</span>
<span class="comment-copy">Because they are both assuming different timezones. See the python docs I linked to.   The timezone in both cases isn't explicitly determined. For example on my python program, <code>pandas.to_datetime()</code> seems to give me UTC and <code>datetime.datetime()</code> seems to assume local time.</span>
<span class="comment-copy">So is there a way to explicitely tell the constructor to assume UTC on instantiation, as opposed to having to call <code>.replace</code> and use the external module <code>pytz</code>?</span>
<span class="comment-copy">Yes its a <code>tzinfo</code> kwarg of the constructor so <code>datetime.datetime(2018, 7, 23, 7, 0, 36, 726000, tzinfo=datetime.timezone.utc)</code> will work</span>
<span class="comment-copy">Probably cleaner</span>
