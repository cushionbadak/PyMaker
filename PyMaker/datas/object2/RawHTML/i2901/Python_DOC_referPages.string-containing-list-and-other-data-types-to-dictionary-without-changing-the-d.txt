<div class="post-text" itemprop="text">
<p>I have one string as below:</p>
<pre><code>key_val = "count=2, name=['hello', 'hi'], word='Dial::100', roll=12"
</code></pre>
<p>I need to get the dictionary from the string as below:</p>
<pre><code>d_key_val = {'count'=2, 'name'=['hello', 'hi'], 'word'='Dial::100', 'roll'=12}
</code></pre>
<p>I tried with the following:</p>
<pre><code>regx = r'(?P&lt;key&gt;\w+)=(?P&lt;value&gt;\[.+?\]|\d+|\S+)'
r_key_val = re_findall(regx, key_val)
for key, value in r_key_val:
        d_key_val[key] = value
</code></pre>
<p>But it is storing values as all string:</p>
<pre><code>d_key_val = {'count'='2', 'name'="['hello', 'hi']", 'word'="'Dial::100'", 'roll'='12'}
</code></pre>
<p>Is there any way or regex to store the values as same data type as it has in string?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are 100% sure that the data is "safe", you could <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> it as the parameters to <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer"><code>dict</code></a>:</p>
<pre><code>&gt;&gt;&gt; key_val = "count=2, name=['hello', 'hi'], word='Dial::100', roll=12"
&gt;&gt;&gt; eval("dict(%s)" % key_val)
{'count': 2, 'name': ['hello', 'hi'], 'roll': 12, 'word': 'Dial::100'}
</code></pre>
<p>If you are <em>not</em> sure, better don't use <code>eval</code>, though.</p>
<hr/>
<p>Alternatively, you could use your regex and use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to evaluate the <code>value</code>:</p>
<pre><code>&gt;&gt;&gt; regx = r'(?P&lt;key&gt;\w+)=(?P&lt;value&gt;\[.+?\]|\d+|\S+)'
&gt;&gt;&gt; {k: ast.literal_eval(v) for k, v in re.findall(regx, key_val)}
{'count': 2, 'name': ['hello', 'hi'], 'roll': 12, 'word': ('Dial::100',)}
</code></pre>
<p>(Note: I did not check your regex in detail.) You <em>could</em> also try to apply <code>ast.literal_eval</code> to the entire expression, instead of the less safe <code>eval</code>, but this would require some preprocessing, e.g. replacing <code>=</code> with <code>:</code> and adding quotes to the keys, that might not work well with e.g. string values containing those symbols.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>regex</code> cannot do that, but you can! You can write a function like the following that takes the <code>values</code> <code>regex</code> writes out and converts them to the appropriate type.</p>
<pre><code>def type_converter(v):
    if v[0] == '[' and v[-1] == ']':
        v = v.replace('[', '').replace(']', '')
        return [type_converter(x) for x in v.split(',')]
    try:
        v = int(v)
    except ValueError:
        try:
            v = float(v)
        except ValueError:
            pass
    finally:
        return v
</code></pre>
<p>To add this to your code, simply do:</p>
<pre><code>regx = r'(?P&lt;key&gt;\w+)=(?P&lt;value&gt;\[.+?\]|\d+|\S+)'
r_key_val = re_findall(regx, key_val)
for key, value in r_key_val:
    d_key_val[key] = type_converter(value)  # &lt;- this
</code></pre>
<hr/>
<p>Example:</p>
<pre><code>lst = ['2', '1.2' ,'foo', '[1, 2]']
print([type(type_converter(x)) for x in lst ])  
# [&lt;class 'int'&gt;, &lt;class 'float'&gt;, &lt;class 'str'&gt;, &lt;class 'list'&gt;]
</code></pre>
<p>Note that the order in which the <code>try</code>-blocks are written is very important since <code>float('1')</code> does not raise any Errors but the correct type is <code>int</code>!</p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/1814400/simple-way-to-convert-a-string-to-a-dictionary">Simple way to convert a string to a dictionary</a></span>
<span class="comment-copy">More difficult for the <code>list</code> part, though. Maybe use <code>ast.literal_eval</code> instead?</span>
<span class="comment-copy">@tobias_k I noticed that later but I updated the fuction to a recursive one to handle that. At the end of the day, <code>ast.literal_eval</code> or some fancy <code>json</code> command might be much handier.</span>
