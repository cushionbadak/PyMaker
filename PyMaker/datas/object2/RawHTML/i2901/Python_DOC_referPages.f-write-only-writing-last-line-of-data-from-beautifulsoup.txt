<div class="post-text" itemprop="text">
<p>How do you append to the file instead of overwriting it? Is there a special function that appends to the file?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open("test.txt", "a") as myfile:
    myfile.write("appended text")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to open the file in append mode, by setting "a" or "ab" as the mode. See <em><a href="https://docs.python.org/2/library/functions.html#open" rel="noreferrer">open()</a></em>.</p>
<p>When you open with "a" mode, the write position will <strong>always</strong> be at the end of the file (an append). You can open with "a+" to allow reading, seek backwards and read (but all writes will still be at the end of the file!).</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; with open('test1','wb') as f:
        f.write('test')
&gt;&gt;&gt; with open('test1','ab') as f:
        f.write('koko')
&gt;&gt;&gt; with open('test1','rb') as f:
        f.read()
'testkoko'
</code></pre>
<p><strong>Note</strong>: Using 'a' is not the same as opening with 'w' and seeking to the end of the file - consider what might happen if another program opened the file and started writing between the seek and the write. On some operating systems, opening the file with 'a' guarantees that all your following writes will be appended atomically to the end of the file (even as the file grows by other writes).</p>
<hr/>
<p>A few more details about how the "a" mode operates (<em>tested on Linux only</em>). Even if you seek back, every write will append to the end of the file:</p>
<pre><code>&gt;&gt;&gt; f = open('test','a+') # Not using 'with' just to simplify the example REPL session
&gt;&gt;&gt; f.write('hi')
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; f.read()
'hi'
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; f.write('bye') # Will still append despite the seek(0)!
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; f.read()
'hibye'
</code></pre>
<p>In fact, the <code>fopen</code> <a href="http://www.manpagez.com/man/3/fopen/" rel="noreferrer">manpage</a> states:</p>
<blockquote>
<p>Opening a file in append mode (a as the first character of mode)
  causes all subsequent write operations to this stream to occur at
  end-of-file, as if preceded the call:</p>
<pre><code>fseek(stream, 0, SEEK_END);
</code></pre>
</blockquote>
<hr/>
<h3>Old simplified answer (not using <code>with</code>):</h3>
<p>Example: (<em>in a real program <strong>use <code>with</code> to close the file</strong> - see <a href="http://docs.python.org/2/whatsnew/2.6.html#pep-343-the-with-statement" rel="noreferrer">the documentation</a></em>)</p>
<pre><code>&gt;&gt;&gt; open("test","wb").write("test")
&gt;&gt;&gt; open("test","a+b").write("koko")
&gt;&gt;&gt; open("test","rb").read()
'testkoko'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I always do this,</p>
<pre><code>f = open('filename.txt', 'a')
f.write("stuff")
f.close()
</code></pre>
<p>It's simple, but very useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably want to pass <code>"a"</code> as the mode argument.  See the docs for <a href="http://docs.python.org/library/functions.html#open" rel="noreferrer">open()</a>.</p>
<pre><code>with open("foo", "a") as f:
    f.write("cool beans...")
</code></pre>
<p>There are other permutations of the mode argument for updating (+), truncating (w) and binary (b) mode but starting with just <code>"a"</code> is your best bet.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has many variations off of the main three modes, these three modes are:</p>
<pre><code>'w'   write text
'r'   read text
'a'   append text
</code></pre>
<p>So to append to a file it's as easy as:</p>
<pre><code>f = open('filename.txt', 'a') 
f.write('whatever you want to write here (in append mode) here.')
</code></pre>
<p>Then there are the modes that just make your code fewer lines:</p>
<pre><code>'r+'  read + write text
'w+'  read + write text
'a+'  append + read text
</code></pre>
<p>Finally, there are the modes of reading/writing in binary format: </p>
<pre><code>'rb'  read binary
'wb'  write binary
'ab'  append binary
'rb+' read + write binary
'wb+' read + write binary
'ab+' append + read binary
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>when we using this line <code>open(filename, "a")</code>, that <code>a</code> indicates the appending the file, that means allow to insert extra data to the existing file.</p>
<p>You can just use this following lines to append the text in your file</p>
<pre><code>def FileSave(filename,content):
    with open(filename, "a") as myfile:
        myfile.write(content)

FileSave("test.txt","test1 \n")
FileSave("test.txt","test2 \n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want to append to a file </p>
<pre><code>with open("test.txt", "a") as myfile:
    myfile.write("append me")
</code></pre>
<p>We declared the variable <code>myfile</code> to open a file named <code>test.txt</code>. Open takes 2 arguments, the file that we want to open and a string that represents the kinds of permission or operation we want to do on the file<br/></p>
<p>here is file mode options</p>
<pre>
Mode    Description

'r' This is the default mode. It Opens file for reading.
'w' This Mode Opens file for writing. 
If file does not exist, it creates a new file.
If file exists it truncates the file.
'x' Creates a new file. If file already exists, the operation fails.
'a' Open file in append mode. 
If file does not exist, it creates a new file.
't' This is the default mode. It opens in text mode.
'b' This opens in binary mode.
'+' This will open a file for reading and writing (updating)
</pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also open the file in <code>r+</code> mode and then set the file position to the end of the file.</p>
<pre><code>import os

with open('text.txt', 'r+') as f:
    f.seek(0, os.SEEK_END)
    f.write("text to add")
</code></pre>
<p>Opening the file in <code>r+</code> mode will let you write to other file positions besides the end, while <code>a</code> and <code>a+</code> force writing to the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's my script, which basically counts the number of lines, then appends, then counts them again so you have evidence it worked. </p>
<pre><code>shortPath  = "../file_to_be_appended"
short = open(shortPath, 'r')

## this counts how many line are originally in the file:
long_path = "../file_to_be_appended_to" 
long = open(long_path, 'r')
for i,l in enumerate(long): 
    pass
print "%s has %i lines initially" %(long_path,i)
long.close()

long = open(long_path, 'a') ## now open long file to append
l = True ## will be a line
c = 0 ## count the number of lines you write
while l: 
    try: 
        l = short.next() ## when you run out of lines, this breaks and the except statement is run
        c += 1
        long.write(l)

    except: 
        l = None
        long.close()
        print "Done!, wrote %s lines" %c 

## finally, count how many lines are left. 
long = open(long_path, 'r')
for i,l in enumerate(long): 
    pass
print "%s has %i lines after appending new lines" %(long_path, i)
long.close()
</code></pre>
</div>
<span class="comment-copy"><a href="http://docs.python.org/tutorial/inputoutput.html" rel="nofollow noreferrer">This</a> from the tutorial may be useful as well.</span>
<span class="comment-copy">I noticed that many people are using the <code>with open(file, "a")</code> method. I am maybe old fashioned, but what is the advantage over <code>open(file, "a") ... file.close()</code></span>
<span class="comment-copy">bluewoodtree: The benefits are similar to that of RAII in C++. If you forget close(), it might take a while before the file is actually closed. It is easier that you might think to forget it when the code has multiple exit points, exceptions and so on.</span>
<span class="comment-copy"><code>print("appended text", file=myfile)</code> is also possible, for a more familiar api.</span>
<span class="comment-copy">@Tom: no. <code>open()</code> doesn't hardcode <code>utf-8</code>. It uses <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>locale.getpreferredencoding(False)</code></a>. Pass <code>encoding="utf-8"</code> parameter explicitly if know that the file uses utf-8 encoding.</span>
<span class="comment-copy">so i just use file.write() function and make the file a+/a+b?</span>
<span class="comment-copy">don't you need a <code>close()</code>?</span>
<span class="comment-copy">@JonasStein, you should use <code>with</code> - see <a href="http://docs.python.org/2/whatsnew/2.6.html#pep-343-the-with-statement" rel="nofollow noreferrer">docs.python.org/2/whatsnew/2.6.html#pep-343-the-with-statement</a></span>
<span class="comment-copy">use "test.txt" instead of just "test" if you are writing in to a text file on windows.</span>
<span class="comment-copy">its a little nicer and a little bit safer to write: with open('filename','a') as f: f.write('stuff')</span>
<span class="comment-copy">"a+" is more better than "a"</span>
<span class="comment-copy">It's less simple than most answers posted a couple years before this one, and it's no more useful</span>
<span class="comment-copy">@Tim Castelijns Its nice that someone posted an alternative to the with syntax that you may not always want to use if youare  using the variable across multiple locations.</span>
<span class="comment-copy">@marsh Even if you are passing the <code>f</code> variable to other functions, the same function that opens a file should close it. The <code>with</code> syntax is the preferred way to accomplish this.</span>
<span class="comment-copy"><code>file</code> shadows a built-in function.  Don't use it for variables.</span>
<span class="comment-copy">@MarkTolonen: <code>file</code> is no longer a builtin in Python 3. <a href="http://stackoverflow.com/a/11942631/4279">Even in Python 2, it is used very rarely</a>. Opening a file is a common operation. It is ok to use <code>file</code> name here on both Python 2 and 3. <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">Know when to be inconsistent.</a></span>
