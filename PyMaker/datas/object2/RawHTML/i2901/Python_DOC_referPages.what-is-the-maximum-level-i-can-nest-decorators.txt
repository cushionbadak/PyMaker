<div class="post-text" itemprop="text">
<p><strong>TLDR</strong></p>
<p><strong>How many functions can I wrap the actual decorator under? By actual decorator I mean the function that accepts the target function the as argument.</strong></p>
<p>When passing arguments to a decorator in Python we do something like the following:</p>
<pre><code>def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):

    print("I make decorators! And I accept arguments: {0}, {1}".format(decorator_arg1, decorator_arg2))

    def my_decorator(func):
        # The ability to pass arguments here is a gift from closures.
        # If you are not comfortable with closures, you can assume itâ€™s ok,
        # or read: https://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python
        print("I am the decorator. Somehow you passed me arguments: {0}, {1}".format(decorator_arg1, decorator_arg2))

        # Don't confuse decorator arguments and function arguments!
        def wrapped(function_arg1, function_arg2) :
            print("I am the wrapper around the decorated function.\n"
                  "I can access all the variables\n"
                  "\t- from the decorator: {0} {1}\n"
                  "\t- from the function call: {2} {3}\n"
                  "Then I can pass them to the decorated function"
                  .format(decorator_arg1, decorator_arg2,
                          function_arg1, function_arg2))
            return func(function_arg1, function_arg2)

        return wrapped

    return my_decorator
</code></pre>
<p>This code is taken from <a href="https://stackoverflow.com/a/1594484/7134737">this answer</a>. </p>
<p>Notice that there is a wrapper around the actual decorator that handles the arguments that are given to the actual decorator.</p>
<p>The weird part is that you can decorate the target function with wrapper rather than use the decorator like so:</p>
<pre><code>@decorator_maker_with_arguments("Leonard", "Sheldon")
    def decorated_function_with_arguments(function_arg1, function_arg2):
        print("I am the decorated function and only knows about my arguments: {0}"
               " {1}".format(function_arg1, function_arg2))

    decorated_function_with_arguments("Rajesh", "Howard")
#outputs:
#I make decorators! And I accept arguments: Leonard Sheldon
#I am the decorator. Somehow you passed me arguments: Leonard Sheldon
#I am the wrapper around the decorated function. 
#I can access all the variables 
#   - from the decorator: Leonard Sheldon 
#   - from the function call: Rajesh Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Rajesh Howard
</code></pre>
<p><strong>So my question is that how many functions can I wrap around the actual decorator?</strong></p>
<p>Take the code below as an example:</p>
<pre><code>def level0(foo):
    print("Level 0")
    def level1(foo):
        print("Level 1")
        def level2(foo):
            print("Level 2")
            def dec(some_func):
                print("Level 3")
                def wrap():
                    print("Foo is " + foo)
                    some_func()
                print("Level 3 End")
                return wrap
            return dec
        return level2
    return level1

@level0("foo")
def test():
    print("From python")
</code></pre>
<p>Calling <code>test</code> prints</p>
<pre><code>Level 0
Level 1
TypeError: level2() missing 1 required positional argument: 'foo'
</code></pre>
<p>So is there a depth limit of just 2? Or am I doing something wrong?</p>
<p>Let me know if any other details from my side is required.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def level0(foo):
    print(type(foo))
    print("Level 0")
    def level1(foo):
        print(type(foo))
        print("Level 1")
        def level2(foo):
            print("Level 2")
            def dec(some_func):
                print("Level 3")
                def wrap():
                    print("Foo is " + foo)
                    some_func()
                print("Level 3 End")
                return wrap
            return dec
        return level2
    return level1
</code></pre>
<p>Try this and you will see the difference between "foo" in level0 and level1.
Decorators are just syntactic sugar.in your case python will do</p>
<pre><code>test = level0("foo")(test)
</code></pre>
<p>however if your code change to this</p>
<pre><code>@level0
def foo():
    print("from foo")
</code></pre>
<p>python will do</p>
<pre><code>test = level0(test)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Decorator "overwrites" the function. It calls a function pointer obtained from a function call that takes as an argument the function. That function pointer is than called with the argument passed to original function.</p>
<p>What you are doing, you are creating a function which returns a decorator and then calling that function, like this:</p>
<pre><code>def this_returns_decorator(arg_passed_to_this_returns_decorator):
        def decorator(function):
                def wrapper(arg_passed_to_test):
                        function(arg_passed_to_this_returns_decorator + "|" + arg_passed_to_test)
                return wrapper
        return decorator

# next line is "equal" to @decorator
# ie. the function this_returns_decorator is called here and returns a decorator
@this_returns_decorator("arg passed to this_returns_decorator") 
def test(arg):
        print(arg)

# decorating is equal to "overwriting the function":
# test = this_returns_decorator("arg passed to this_returns_decorator")(test)

# will print "arg passed to this_returns_decorator|arg_passed_to_test"
test("arg_passed_to_test") 
</code></pre>
<p>You can't get more then two levels this way. You can create a function which will return a function which will return a decorator, and so on, but I would interpret that as function nesting, not decorator nesting.</p>
<p>As to the questions:</p>
<blockquote>
<p>What is the maximum level I can nest decorators?</p>
</blockquote>
<p>I guess this is how you nest decorators:</p>
<pre><code>def w1(f):
   def wrapper(name):
      return "w1 " + f(name)
   return wrapper

def w2(f):
   def wrapper(name):
       return "w2 " + f(name)
   return wrapper

@w2
@w1
def test(name):
        return name

print(test("name"))  # will print "w2 w1 name"
</code></pre>
<p>The python language reference only says decorators can be nested, I couldn't find any limit. For fun&amp;testing I have created the following shell script:</p>
<pre><code>#!/bin/bash
set -euo pipefail
tmp=$(mktemp)
trap 'rm $tmp' EXIT
for ((i = 10000;; i*=2)); do

        {
for i in $(seq $i); do
        printf "%s" "
def w$i(f):
        def w():
                f()
        return w
"
done
echo
for i in $(seq $i); do
        printf "%s\n" "@w$i"
done
printf "%s\n" "def test():
        print(\"test\")
print(\"Success\")
"

        } &gt;"$tmp"

        printf "Testing levels i = %d\n" $i
        ( set -x; python3 "$tmp"; )

done
</code></pre>
<p>Was able to go up to more than 400000 levels, when my pc started to lag. Probably the levels of decorators are depended on how much memory your system has and how good your python interpreter is.</p>
<p>@edit:</p>
<p>Just discovered that calling a function pointer returned by a function inside a decorator statement is not allowed. However you still can obtain a pointer to the decorator, and then overload the function.</p>
<pre><code>def level0(foo):
    print(type(foo))
    print("Level 0")
    def level1(foo):
        print(type(foo))
        print("Level 1")
        def level2(foo):
            print("Level 2")
            def dec(some_func):
                print("Level 3")
                def wrap():
                    print("Foo is " + foo)
                    some_func()
                print("Level 3 End")
                return wrap
            return dec
        return level2
    return level1

# @level0("1")("2")("3") does not work - SyntaxError
decorator = level0("1")("2")("3")
@decorator
def test():
        print(test)

test()
</code></pre>
<p>The decorator regular expression (from <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">python reference</a>) is:</p>
<pre><code>decorator               ::=  "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
</code></pre>
<p>The <code>(</code> <code>)</code> are optional and may be specified only once. Probably we could make a simple workaround to do the calls ourselves:</p>
<pre><code>def workaround(obj, arg):
        if len(arg) == 0:
                return obj
        return workaround(obj(arg[0]), arg[1:])

@workaround(level0, ["1", "2", "3"])
def test2():
        print("test2")
</code></pre>
<p>And that's still function nesting.</p>
</div>
<span class="comment-copy">I can not reproduce your example.</span>
<span class="comment-copy">@KlausD. Which example the one at the end? or the one borrowed from the other answer?</span>
<span class="comment-copy">@KlausD. Just call the <code>test()</code> fucntion.</span>
<span class="comment-copy">Why does it change to function at Level 1? I don't understand. once string then function?</span>
<span class="comment-copy">I don't understand what you mean. I am not passing a function to level1.</span>
<span class="comment-copy">@ng.newbie checkout my updated answer, python will simply run the code if you define a decorator</span>
<span class="comment-copy">When you say python will do <code>level0("foo")(test)</code> my question is that <b>why won't Python do something like</b> <code>level0("foo")('bar')('baz')(test)</code>. Why not a <b>depth of more than 2 is my question</b>. I hope you get my point.</span>
<span class="comment-copy">@ng.newbie the foo in def level0(foo): have nothing to do with def level1(foo), you are not calling a level1, you are defining level1,understand???like if you define a function def func(apple):, you don't need to define apple first, right???</span>
<span class="comment-copy">Sometimes the code is <code>@this_returns_decorator</code> and <b>sometimes it is</b> <code>@this_is_a_decorator</code>. My question is how many levels can I put before I get a decorator. I might change the subject title to better reflect my question. I hope you understand.</span>
<span class="comment-copy">The code is <code>@this_returns_decorator()</code> or <code>@this_is_a_decorator</code>. This is just normal function nesting. You can just <code>@this_returns_decorator()()()()()()()()()()()()()......</code></span>
<span class="comment-copy">Yes now I understand. Should I edit the question? Or can you add this into the answer?</span>
