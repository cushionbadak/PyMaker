<div class="post-text" itemprop="text">
<p>I'm trying to make a matrix with <code>numpy</code>, and then print it (I'm doing this because later I want to make math operations with more matrices), the error I get is :<br/></p>
<pre><code>"IndexError: arrays used as indices must be of integer (or boolean) type".
</code></pre>
<p>I tried to use the <code>np.zeros</code> array in for loop, but it didn't work (I got a similar error).</p>
<p><strong>Note:</strong> I tried using the <code>np.matrix</code> function (assigning it the <code>np.zeros</code> array for columns and rows, but it also didn't work, and then I tried a variant (is what you can see is commented, the <code>np.ndarray</code>)).</p>
<p>Code:</p>
<pre><code>import numpy

def matrixes():
    col= int(input("Enter the number of columns\n"))
    row= int(input("Enter the number of rows\n"))
    print(col,row)
    nCol=numpy.zeros(col)
    nRow=numpy.zeros(row)
    list_col=[nCol]
    list_Row=[nRow]
    print(nCol, nRow)
    #nArray=numpy.ndarray(nCol,nRow).reshape(2,2)
    for i in list_col:
        for j in list_Row:
            print("Enter value ",nCol,nRow)
            a=int(input())
            nCol[i]=a
            nRow[j]=a
    print("The matrix is: ",nCol, nRow)


#def __init__():
a = int(input("Enter an option\n"
    "1. Matrixes\n"))
if a==1:
    matrixes()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's some confusion in your code as to how your matrix should be constructed.  The reason you're getting that specific <code>IndexError</code> is because <code>i</code> and <code>j</code> inside your loop are actually arrays, which you can see if you insert <code>print</code> statements.  There are a couple of other issues with your code as is, but I'm going to offer a solution and let you debug the rest as needed.  </p>
<p>Here's the basic framework you can use to get the workflow you're looking for.  I'm inserting arbitrary values instead of <code>input()</code> statements to make the example reproducible, but it should be straightforward to replace them with <code>input()</code> as needed:</p>
<pre><code>n_col = 3
n_row = 4
arr = np.zeros((n_row, n_col), dtype=int) # &lt;-- Create the matrix here

arr
array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]])
</code></pre>
<p>Now populate the array with your nested loop:</p>
<pre><code>for i in np.arange(n_col):
    for j in np.arange(n_row):
        a = np.random.randint(5) # &lt;-- replace with input()
        arr[j, i] = a
arr
array([[0, 1, 3],
       [4, 0, 3],
       [1, 0, 1],
       [3, 4, 0]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most common option to <a href="https://docs.scipy.org/doc/numpy/user/basics.creation.html#array-creation" rel="nofollow noreferrer">construct a Numpy array</a> is (of course) <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.array.html#numpy-array" rel="nofollow noreferrer"><code>np.array</code></a>,
that is described like this</p>
<blockquote>
<p><code>numpy.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)</code><br/>
<code>Create an array.</code></p>
</blockquote>
<p>You may want to study the whole of the description, but what is most relevant is the <code>object</code> argument â€” again from the reference description</p>
<blockquote>
<p><strong>Parameters:  object</strong> : array_like</p>
<p>An array, any object exposing the array interface, an object whose
  <code>__array__</code> method returns an array, or any (nested) sequence.</p>
</blockquote>
<p>and in particular "any (nested) sequence", that, you know, can be built using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><em>list comprehension</em></a>, e.g., you can construct a list of lists like this</p>
<pre><code>&gt;&gt;&gt; [[input() for col in range(3)] for row in range(2)]
1
2
3
4
5
6
[['1', '2', '3'], ['4', '5', '6']]
&gt;&gt;&gt;
</code></pre>
<p>and pass said list to the <code>array</code> constructor (after noting that we need to convert from strings to floats, that is...)</p>
<pre><code>&gt;&gt;&gt; np.array([[float(input()) for col in range(3)] for row in range(2)])
...
array([[1., 2., 3.],                                                                                                                                   
       [4., 5., 6.]])                                                                                                                                  
&gt;&gt;&gt;
</code></pre>
<p>Having these foundations, we can write this code</p>
<pre><code>nrows = int(input('How many rows? '))
ncols = int(input('How many columns? '))
A = np.array([[float(input('Enter element for row %d and column %d: '%(row,col)))
                 for col in range(ncols)] for row in range(nrows)])
</code></pre>
<p>It is worth mentioning that, doing it this way, you produce a possibly
(no, it's not your case...) large list of lists that is going to be
garbage collected, so that, if efficiency would be a main concern,
creating an empty matrix using <code>np.empty((nrows, ncols))</code> and then
doing a loop to fill it with your values may be preferable:</p>
<pre><code>nr = int(input('How many rows? '))
nc = int(input('How many columns? '))
A = np.empty((nr, n)) # note that the argument is the tuple (nr, nc)
for r in nr:
    for c in nc:
        A(r, c) = float(input('A(%d, %d) = '%(r, c)))
</code></pre>
<p>As a side note, it may be preferable to wrap the <code>input</code> calls in both
the inner loops into a function that asks repeatedly  for your input until
it is provided with a valid number</p>
<pre><code>def real_input(prompt)
    while 1:
        str_val = input(prompt)
        try:
            num_val = real(str_val)
       except ValueError:
            # optionally print error message
            continue
       return num_val
</code></pre>
<p>so that you have not to restart the whole input procedure if you make
a mistake.</p>
</div>
<span class="comment-copy">Have you looked at <code>for i in [np.zeros(3)]: print(i)</code>?</span>
<span class="comment-copy">I think you want <code>for i in range(nCol)</code> and <code>for i in range(nCol)</code>.</span>
<span class="comment-copy">Normally we create a numpy array with a simple statement like: <code>x = np.array([[1,2,3], [4,5,6]])</code>.  That is, the starting point is a list or list of lists.  Asking a user for the values element by element is awkward - for you and your users.</span>
<span class="comment-copy">"matrixes" is correct, nevertheless I prefer the spelling "matrices"</span>
