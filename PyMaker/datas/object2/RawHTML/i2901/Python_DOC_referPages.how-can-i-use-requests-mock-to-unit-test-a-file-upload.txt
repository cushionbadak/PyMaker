<div class="post-text" itemprop="text">
<p>I'm writing a Python (3) wrapper for an API, and I'm trying to unit test a part of it that requires a file to be uploaded. I would like to verify the filename and the content are sent properly by my client.</p>
<p>I'm using Python's <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a> library, along with <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer"><code>requests</code></a> and <a href="http://requests-mock.readthedocs.io/en/latest/index.html" rel="nofollow noreferrer"><code>requests_mock</code></a> for testing this.</p>
<p>The way that I was planning to approach this problem was to have a callback function for validating the file is sent and all the headers are properly set. Here's what I have so far:</p>
<pre><code>import unittest
import requests
import requests_mock

from my_class import my_class

from my_class.API import API

class  TestAPI(unittest.TestCase):

    def setUp(self):
        self.hostname = 'https://www.example.com'

    def validate_file_upload(self, request, context, filename, content):
        # self.assertEqual(something, something_else)
        # better solution goes here

    def test_submit_file(self):
        API_ENDPOINT = self.hostname + '/api/tasks/create/file/'
        DUMMY_FILE = 'file'
        DUMMY_CONTENT = 'here is the\ncontent of our\nfile'

        s = API(self.hostname)

        with open(DUMMY_FILE, 'w+') as f:
            f.write(DUMMY_CONTENT)

        with requests_mock.Mocker() as m:
            def json_callback(request, context):
                self.validate_file_upload(request, context, DUMMY_FILE,
                    DUMMY_CONTENT)
                return {}

            m.post(API_ENDPOINT, json=json_callback)
            s.upload_file(DUMMY_FILE)
</code></pre>
<p>I have determined that, upon successful file upload, the <code>request</code> parameter to the <code>validate_file_upload</code> has a couple relevant bits of data, namely <code>request.headers</code> and <code>request.text</code>. Here is the content of both of them after the <code>validate_file_upload</code> function is called:</p>
<p><strong><code>request.headers</code></strong></p>
<pre><code>{'User-Agent': 'python-requests/2.19.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '171', 'Content-Type': 'multipart/form-data; boundary=e1a0aa05f83735e85ddca089c450a21b'}
</code></pre>
<p><strong><code>request.text</code></strong></p>
<pre><code>'--e1a0aa05f83735e85ddca089c450a21b\r\nContent-Disposition: form-data; name="file"; filename="file"\r\n\r\nhere is the\ncontent of our\nfile\r\n--e1a0aa05f83735e85ddca089c450a21b--\r\n'
</code></pre>
<hr/>
<p>Now, here's the thing. I <strong>know that I can just parse</strong> the <code>request.text</code>  string and get the data I want; it's easy enough to validate. </p>
<p>However, that sort of logic seems like it really doesn't belong in my unit testing. I can't imagine there isn't a better solution to this; either someone has implemented this functionality already in a different module or I'm overlooking something obvious.</p>
<p><strong>I shouldn't have to implement the <a href="https://stackoverflow.com/questions/8659808/how-does-http-file-upload-work">HTTP spec</a> for file uploads</strong> to unit test something as simple as a file upload, right? Is there a better way of doing this?</p>
<hr/>
<p>Here is the output of <code>dir(request)</code>:</p>
<pre><code>['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattr__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_allow_redirects', '_case_sensitive', '_cert', '_create', '_matcher', '_proxies', '_qs', '_request', '_stream', '_timeout', '_url_parts', '_url_parts_', '_verify', 'allow_redirects', 'cert', 'hostname', 'json', 'matcher', 'netloc', 'path', 'port', 'proxies', 'qs', 'query', 'scheme', 'stream', 'text', 'timeout', 'verify']
</code></pre>
<p>I have checked all of the non-underscore attributes for any other representation of the file upload data, to no avail. I've also tried searching <a href="https://stackoverflow.com/search?q=requests_mock+file+upload">StackOverflow</a> and <a href='https://www.google.com/search?q="requests+mock"+file+upload' rel="nofollow noreferrer">Google</a>, and am no closer to finding a better way of doing this. This is the only post that shows up for either of the searches.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the time being, I have decided to take this rather simple approach:</p>
<pre><code>def validate_file_upload(self, request, context, filename, content):
    self.assertTrue(filename in request.text)
    self.assertTrue(content in request.text)
</code></pre>
<p>While it is not perfect, it's significantly less logic than parsing the HTTP request and seems to do at least a basic validation that the file is being uploaded properly. As I mentioned before, I'm using the <code>requests</code> library, so I'm not too worried about messing up a file upload, and this should catch it in most cases, anyways. </p>
<p>As a precaution against incorrectly matching the name <code>file</code> against something else in the <code>request.text</code>, I have changed it to <code>rather_unique_filename</code>.</p>
</div>
