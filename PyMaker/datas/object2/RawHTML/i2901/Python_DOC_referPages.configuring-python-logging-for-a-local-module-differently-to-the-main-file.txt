<div class="post-text" itemprop="text">
<p>With a <a href="https://docs.python.org/3/library/logging.config.html#dictionary-schema-details" rel="nofollow noreferrer">Config Dict</a> I want to configure the logging in a local Python 3 module to log level <code>INFO</code> while in the main file I want to configure the log level <code>DEBUG</code>. All the configuration should be done in the main file, not in the module, so that I can change the logging without touching the module.</p>
<p>Here an example. Given the module file <strong><code>log_try_module.py</code></strong>:</p>
<pre><code>import logging
log = logging.getLogger(__name__)

def do_something():
    log.debug("This is something to DEBUG.")
    log.info("This is something to INFO.")
    log.warning("This is something to WARN.")
</code></pre>
<p>and the main file <strong><code>log_try_main.py</code></strong>:</p>
<pre><code>import logging
log = logging.getLogger(__name__)
import log_try_module

log.debug("This is mainly to DEBUG.")
log.info("This is mainly to INFO.")
log.warning("This is mainly to WARN.")

log_try_module.do_something()

logging.config.dictConfig(dict(
        version=1,
        disable_existing_loggers=False,
        handlers={
            'hr': {'class': 'logging.StreamHandler',
                  'level': logging.DEBUG},
            'hm': {'class': 'logging.StreamHandler',
                  'level': logging.INFO}
            },
        loggers={
            'log_try_module': {'handlers': ['hm'],
                               'level': logging.INFO}
            },
        root={
            'handlers': ['hr'],
            'level': logging.DEBUG,
            }
        ))
</code></pre>
<p>I am looking for an run output like this:</p>
<pre><code>$ python3 log_try_main.py
This is mainly to DEBUG.
This is mainly to INFO.
This is mainly to WARN.
This is something to INFO.
This is something to WARN.
</code></pre>
<p>Please note that <strong>there is no debug message from  <code>log_try_module</code> emitted</strong>!</p>
<p>I have experimented with passing various config dicts, but I never get the output I am looking for. What is going wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is two-fold:</p>
<ol>
<li>You use <code>getLogger(__name__)</code> in the main module <code>log_try_main.py</code>, but <code>__main__</code> evauates to the string <code>"__main__"</code> when the main module is called from Python on the command line, not to <code>"log_try_main"</code>.</li>
<li>You configure a root logger. If you add another handler to root logger, the logs logged by module will display twice.</li>
</ol>
<p>So here I write an example which I think runs as you expect:</p>
<p><code>main.py</code>:</p>
<pre><code>import logging
import logging.config
import module

logging.config.dictConfig(dict(
        version=1,
        disable_existing_loggers=False,
        handlers={
            'hr': {'class': 'logging.StreamHandler',
                  'level': logging.DEBUG},
            'hm': {'class': 'logging.StreamHandler',
                  'level': logging.INFO}
            },
        loggers={
            'module': {'handlers': ['hm'],
                               'level': logging.INFO},
            'main': {'handlers': ["hr"],
                               'level': logging.DEBUG}
            },
        ))

log = logging.getLogger("main")

log.debug("This is mainly to DEBUG.")
log.info("This is mainly to INFO.")
log.warning("This is mainly to WARN.")

module.do_something()
</code></pre>
<p><code>moduel.py</code>:</p>
<pre><code>import logging
log = logging.getLogger("module")

def do_something():
    log.debug("This is something to DEBUG.")
    log.info("This is something to INFO.")
    log.warning("This is something to WARN.")
</code></pre>
<p>Output:</p>
<pre><code>This is mainly to DEBUG.
This is mainly to INFO.
This is mainly to WARN.
This is something to INFO.
This is something to WARN.
</code></pre>
<hr/>
<p>I explicitly name the two loggers instead of using <code>__name__</code>. I think this is more controllable and does not give different results when <code>log_try_module.py</code> is run on the command line.</p>
</div>
<span class="comment-copy">Note: you can disable propagation on <code>module</code>'s logger explicitly via <a href="https://docs.python.org/3/library/logging.html#logging.Logger.propagate" rel="nofollow noreferrer"><code>log.propagate = False</code></a> which would allow you to keep using the <code>root</code> as a fallback for not explicitly defined loggers.</span>
<span class="comment-copy">I have edited my question to make clearer that I have use <code>dictConfig</code>, but your answer shows what my probelm was: Configuring a root logger and using <code>getLogger(__name__)</code> on the main module.</span>
<span class="comment-copy">Additionally I added to your answer the two problems the code in my question had. - Finally: Thanks for you answer! It helped me a lot. :-)</span>
