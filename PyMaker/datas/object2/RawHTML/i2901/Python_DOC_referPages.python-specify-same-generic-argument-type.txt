<div class="post-text" itemprop="text">
<p>I am starting to learn Python from Java. I would like to write Python code similar to this line in Java:</p>
<pre><code>public BinaryNode(T nodeData, BinaryNode&lt;T&gt; leftChild, BinaryNode&lt;T&gt; rightChild) {}
</code></pre>
<p>Here is what I have tried so far:</p>
<pre><code>from typing import TypeVar

T = TypeVar('T')
class BinaryNode:

    def __init__(self, nodeData : T, leftChild : BinaryNode = None,
             rightChild : BinaryNode = None):
          self.nodeData = nodeData
          self.leftChild = leftChild
          self.rightChild = rightChild
</code></pre>
<p>How I should specify that the BinaryNodes passed to <code>__init__</code> should have the same type parameter as the <code>nodeData</code>? Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">Duck-Typing</a>.</p>
<p><strong>You don't need to specify type. It will resolve at running time.</strong> </p>
<p>Indeed, in Python you handle objects as they come. Therefore, if you handle your <code>BinaryNodes</code> as being of the same type of <code>nodata</code> and in some cases it isn't, then an error will occur and you should handle it if it is possible. </p>
</div>
<div class="post-text" itemprop="text">
<p>Okay, I think I figured out how to handle this:</p>
<pre><code>class BinaryNode:

    def __init__(self, nodeData = None, leftChild = None,
                 rightChild = None):
        if leftChild is not None:
            try:
                assert leftChild.getData().type() is nodeData.type()
            except:
                print("Error: left child is not of proper type")
                exit()
        if rightChild is not None:
            try:
                assert rightChild.getData().type() is nodeData.type()
            except:
                print("Error: right child is not of proper type")
                exit()
        self.nodeData = nodeData
        self.leftChild = leftChild
        self.rightChild = rightChild

    def getData(self):
        return self.nodeData
</code></pre>
<p>I think this is the best way to do it, since the exceptions are handled at runtime.</p>
</div>
<span class="comment-copy">Why is this important to you? Surely, it's logically sound regardless of that specification. Any type-checker should be fine with it as well.</span>
<span class="comment-copy">A few things. You could just do an <code>if-else</code> instead of the <code>try-except</code>. Instead of printing and exiting you could just <a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer">raise</a> an exception. <code>raise TypeError('Left child is not of proper type'</code>.</span>
<span class="comment-copy">@palivek I don't think I could do an <code>if-else</code>, since <code>leftChild.getData()</code> might create an <code>AttributeError</code> if <code>leftChild</code> is not of type <code>BinaryNode</code>. Raising an exception is a good idea though.</span>
<span class="comment-copy">You could do <code>if isinstance(leftChild, BinaryNode): ...</code>.</span>
<span class="comment-copy">@palivek Ah, didn't know about that, thank you.</span>
