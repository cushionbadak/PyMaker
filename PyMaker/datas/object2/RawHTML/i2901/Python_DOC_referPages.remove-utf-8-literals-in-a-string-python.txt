<div class="post-text" itemprop="text">
<p>I'm new to python,I have a string like:</p>
<pre><code>s= 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'
</code></pre>
<p>I want to remove all the unicode literals in a string like:</p>
<pre><code>'\xc3\x82\xc2\xae'
</code></pre>
<p>I need output like:</p>
<pre><code>'HDFC FTAE Greater China'
</code></pre>
<p>Can anyone help me with this?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>If your goal is to limit the string to ASCII-compatible characters, you can encode it into ASCII and ignore unencodable characters, and then decode it again:</p>
<pre><code>x = 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'
print(x.encode("ascii", "ignore").decode("utf-8"))
</code></pre>
<p>produces <code>HDCF FTAE Greater China</code>.</p>
<p>Check out <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer">str.encode()</a> and <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">bytes.decode()</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can filter your string using the <a href="https://docs.python.org/3.6/library/string.html#string.printable" rel="nofollow noreferrer"><code>string.printable</code></a> function to check whether your characters can be printed: </p>
<pre><code>import string

s= 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'

printable = set(string.printable)
s = "".join(filter(lambda c: c in printable, s))
print(s)
</code></pre>
<p>Output:</p>
<pre><code>HDCF FTAE Greater China
</code></pre>
<p>Reference to <a href="https://stackoverflow.com/questions/8689795/how-can-i-remove-non-ascii-characters-but-leave-periods-and-spaces-using-python#8689826">this</a> question.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 2 (default string type is bytes):</p>
<pre><code>&gt;&gt;&gt; s = 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'
&gt;&gt;&gt; s.decode('ascii',errors='ignore').encode('ascii')
'HDCF FTAE Greater China'
</code></pre>
<p>On Python 3 (default string type is Unicode):</p>
<pre><code>&gt;&gt;&gt; s = 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'
&gt;&gt;&gt; s.encode('ascii',errors='ignore').decode('ascii')
'HDCF FTAE Greater China'
</code></pre>
<p>Note that the original string is a <a href="https://en.wikipedia.org/wiki/Mojibake" rel="nofollow noreferrer">mojibake</a>.  Ideally fix how the string was read, but you can undo the damage with (Python 3):</p>
<pre><code>&gt;&gt;&gt; s.encode('latin1').decode('utf8').encode('latin1').decode('utf8')
'HDCF® FTAE® Greater China'
</code></pre>
<p>The original string was double-encoded as UTF-8.  This works by converting the string directly 1:1 back to bytes<sup>1</sup>, decoding as UTF-8, then converting directly back to bytes again and decoding with UTF-8 again.</p>
<p>Here's the Python 2 version:</p>
<pre><code>&gt;&gt;&gt; s = 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'
&gt;&gt;&gt; print s.decode('utf8').encode('latin1').decode('utf8')
HDCF® FTAE® Greater China
</code></pre>
<p><sup>1</sup>This works because the <code>latin1</code> codec is a 256-byte encoding and directly maps to the first 256 Unicode codepoints.</p>
</div>
<div class="post-text" itemprop="text">
<p>May be this help,</p>
<pre><code>s = 'HDCF\xc3\x82\xc2\xae FTAE\xc3\x82\xc2\xae Greater China'
d = ''.join([i for i in s if ord(i) &lt; 127])
print(d)
# OUTPUT as: HDCF FTAE Greater China
</code></pre>
</div>
<span class="comment-copy">Python 2 and Python 3 differ in syntax for strings.  An accurate answer needs to know if <code>s</code> is a Python 2 byte string or a Python 3 Unicode string.</span>
<span class="comment-copy">It looks like your data is <a href="https://en.wikipedia.org/wiki/Mojibake" rel="nofollow noreferrer">mojibake</a>.  What you have is <code>'HDCF® FTAE® Greater China'</code> double-encoded as UTF-8.</span>
<span class="comment-copy">thanks for reply,it's showing like Error:UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 4: ordinal not in range(128)</span>
<span class="comment-copy">Works on Python 3.6 with the input you supplied</span>
<span class="comment-copy">Yeah indeed, I didn't test it with the indentation posted here. Fixed it by putting it on two separate lines</span>
<span class="comment-copy">thanks for the reply i've got that ;)</span>
<span class="comment-copy">thanks a lot @utks009 it works for me</span>
