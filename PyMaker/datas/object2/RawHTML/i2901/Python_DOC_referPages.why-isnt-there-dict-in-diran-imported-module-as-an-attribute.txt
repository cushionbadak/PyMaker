<div class="post-text" itemprop="text">
<p>In Python, we are always told that <code>dir</code> lists any attribute of its questioned object. But why isn't there <code>__dict__</code> in <code>dir("an imported module")</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot rely on <code>dir([object])</code> returning accurate results. As stated <a href="https://docs.python.org/2/library/functions.html#dir" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>If the object has a method named <code>__dir__()</code>, this method will be
  called and must return the list of attributes. This allows objects
  that implement a custom <code>__getattr__()</code> or <code>__getattribute__()</code>
  function to customize the way <code>dir()</code> reports their attributes.</p>
<p>If the object does not provide <code>__dir__()</code>, the function tries its
  best to gather information from the object’s <code>__dict__</code> attribute, if
  defined, and from its type object. The resulting list is not
  necessarily complete, and may be inaccurate when the object has a
  custom <code>__getattr__()</code>.</p>
</blockquote>
<p>So try looking into the object you are trying to get the information from and look for the attributes yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is in <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer">python documentation for the <code>dir</code> function</a>:</p>
<blockquote>
<p><strong>Note:</strong> Because <code>dir()</code> is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.</p>
</blockquote>
<p><code>__dict__</code> is a special attribute that is part of that exception.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dir()</code> doesn't just look up an object's <code>__dict__</code> (which sometimes doesn't even exist), it will use the object's heritage (its class or type, and any superclasses, or parents, of that class or type) to give you a complete picture of all available attributes.</p>
<p>An instance <code>__dict__</code> is just the 'local' set of attributes on that instance, and does not contain every attribute available on the instance. Instead, you need to look at the class and the class's inheritance tree too.</p>
<p>For more information, check out <a href="https://stackoverflow.com/questions/14361256/whats-the-biggest-difference-between-dir-and-dict-in-python">the main differences between <code>dir()</code> and <code>__dict__</code></a>.</p>
</div>
<span class="comment-copy">Why would you expect that?</span>
<span class="comment-copy">I think you're saying that you imported a module, and <code>dir(modulename)</code> doesn't include <code>__dict__</code>, but <code>modulename.__dict__</code> does seem to exist. It might make your question clearer if that was stated in your question instead of just being implicit.</span>
<span class="comment-copy">Check out <a href="https://stackoverflow.com/questions/14361256/whats-the-biggest-difference-between-dir-and-dict-in-python" title="whats the biggest difference between dir and dict in python">stackoverflow.com/questions/14361256/…</a> and look at my answer for some more information.</span>
<span class="comment-copy">@toti08, I think  it would be great, if there was a tool that you could list quickly and easily all attributes of an object. I was thinking dir() or something has got this role.</span>
<span class="comment-copy">@khelwood, you are right. your description is explicit and stated clearly the case.</span>
