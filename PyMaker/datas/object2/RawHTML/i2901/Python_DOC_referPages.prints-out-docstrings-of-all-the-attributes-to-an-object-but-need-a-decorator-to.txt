<div class="post-text" itemprop="text">
<p>Here is a rough code which prints out the docstring of each attribute to an object one after the other. I need to decorate a function which is inside a class, so that it is legible for me to distinguish between different attribute docstrings. If you have suggestions to the actual code as well to make it pythonic, please do comment as well so that it improves my thinking</p>
<pre><code>def classtype(objecttype):

    obj_string=str(objecttype).split("'")[1]
    def direct(obj):
        '''Returns a list of attributes of an object that a python beginner should know'''
        return [a for a in dir(obj) if not a.startswith('__')]

    attributes=direct(objecttype)

    def docstrings(obj_string,attribute):
        '''calls the docstring for a particular attribute'''
        string='{}.{}.__doc__'.format(obj_string,attribute)
        return eval(string)

    for attr in attributes:
        print(docstrings(obj_string,attr))

classtype(list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should definitely be using <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> lookup instead of <code>eval</code>.  It also doesn't make much sense to have inner functions if you're not passing them around.</p>
<pre><code>def classtype(obj):
    attributes = [a for a in dir(obj) if not a.startswith('__')]
    for attr in attributes:
        print(getattr(obj, attr).__doc__)  # Maybe print attr as well?
</code></pre>
<p>If the problem is that you can't see the docstrings of decorated functions, make sure that your wrapping decorators are using <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a></p>
</div>
