<div class="post-text" itemprop="text">
<p>I have 3 python classes A, B and C. A contains B object and B contains C's object. What I want is when I print A class object, it should pretty print in the below format. There can be more nesting also inside C class.</p>
<pre><code>A:
    loc : XYZ
    qual : ABC
    b :
        name : ABC
        age : 30
        c :
            address : ABC
            phn : 99009
</code></pre>
<p>Below are the classes for reference.</p>
<pre><code>class C(object):
    def __init__(self):
        self.address='ABC'
        self.phn=99009

class B(object):
    def __init__(self):
        self.name='ABC'
        self.age=30
        self.c = C()

class A(object):
    def __init__(self):
        self.loc = 'XYZ'
        self.qual = 'ABC'
        self.b = B()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following recursive funciton works from scratch using the <code>__dict__</code> attr. of the classes to get <code>key:value</code> pairs of the class' attributes. From here, we just test if the value is another class (in which case we call ourselves again), otherwise we simply print it in your desired format.</p>
<p>The only other thing to keep track of is the current indent of what level this line is currently printing at. This can be easily done with a default parameter (<code>indent</code>) that we increment before each recursion.</p>
<pre><code>def pretty_print(clas, indent=0):
    print(' ' * indent +  type(clas).__name__ +  ':')
    indent += 4
    for k,v in clas.__dict__.items():
        if '__dict__' in dir(v):
            pretty_print(v,indent)
        else:
            print(' ' * indent +  k + ': ' + str(v))
</code></pre>
<p>and it works:</p>
<pre><code>&gt;&gt;&gt; pretty_print(A())
A:
    loc: XYZ
    qual: ABC
    B:
        name: ABC
        age: 30
        C:
            address: ABC
            phn: 99009
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following works by letting your classes inherit from a common base class implementing the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a> method:</p>
<pre><code>class PrettyPrinter(object):
    def __str__(self):
        lines = [self.__class__.__name__ + ':']
        for key, val in vars(self).items():
            lines += '{}: {}'.format(key, val).split('\n')
        return '\n    '.join(lines)

class C(PrettyPrinter):
    def __init__(self):
        self.address='ABC'
        self.phn=99009

class B(PrettyPrinter):
    def __init__(self):
        self.name='ABC'
        self.age=30
        self.c = C()

class A(PrettyPrinter):
    def __init__(self):
        self.loc = 'XYZ'
        self.qual = 'ABC'
        self.b = B()

a = A()
print(a)
</code></pre>
<p>In Python 3.6 and newer, this displays like</p>
<pre><code>A:
    loc: XYZ
    qual: ABC
    b: B:
        name: ABC
        age: 30
        c: C:
            address: ABC
            phn: 99009
</code></pre>
<p>Note that all attributes are automatically printed. Their print order is determined by the <code>vars</code> function, which really looks in the <code>__dict__</code> dictionary. This dictionary has a nondeterministic order in Python 3.5 and below, and so the printout is not nearly as nice as in 3.6 and up.</p>
</div>
<span class="comment-copy">Since you mention pretty printing, and use the tag <code>pretty-print</code>, I'm assuming you're just looking to control how the <code>pprint</code> module handles your objects? The simplest thing to do is to create a custom <a href="https://docs.python.org/3/library/pprint.html#prettyprinter-objects" rel="nofollow noreferrer"><code>PrettyPrinter</code></a> subclass that overrides the methods documented there, so it handles your objects as "recursive objects" like lists and dicts. Then you just use an instance of that class in place of the <code>pprint</code> module.</span>
<span class="comment-copy">Just what I needed, ty</span>
<span class="comment-copy">@slashdottir please accept</span>
<span class="comment-copy">I'm not the question asker</span>
<span class="comment-copy">@slashdottir oh ok</span>
<span class="comment-copy">This PrettyPrinter stuff is all well and good, but most of the time all you need to do is just read the damn output. thank you for saving a headache. +1</span>
