<div class="post-text" itemprop="text">
<p>The code is:</p>
<pre><code>from pprint import pprint
d = {"b" : "Maria", "c" : "Helen", "a" : "George"}
pprint(d, width = 1)
</code></pre>
<p>The output is:</p>
<pre><code>{'a': 'George',
'b': 'Maria',
'c': 'Helen'}
</code></pre>
<p>But, the desired output is:</p>
<pre><code>{'b': 'Maria',
'c': 'Helen',
'a': 'George'}
</code></pre>
<p>Could this be done with pprint or is there another way?</p>
</div>
<div class="post-text" itemprop="text">
<p>As for Python 3.7+, <code>dict</code> preserves insertion order. For any version prior, you will need to use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> to keep keys in order.</p>
<p>Although, from the <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">doc on <code>pprint</code></a>:</p>
<blockquote>
<p>Dictionaries are sorted by key before the display is computed.</p>
</blockquote>
<p>This means <code>pprint</code> will break your desired order regardless.</p>
<h1>Use <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow noreferrer"><code>json.dumps</code></a></h1>
<p>While it is possible to subclass <a href="https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter" rel="nofollow noreferrer"><code>pprint.PrettyPrinter</code></a> not to sort keys before displaying, it is tedious and a good alternative is to use <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow noreferrer"><code>json.dumps</code></a> to pretty print your data.</p>
<h3>Code</h3>
<pre><code>import json
from collections import OrderedDict

# For Python 3.6 and prior, use an OrderedDict
d = OrderedDict(b="Maria", c="Helen", a="George")

print(json.dumps(d, indent=1))
</code></pre>
<h3>Output</h3>
<pre><code>{
 "b": "Maria",
 "c": "Helen",
 "a": "George"
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you read the source of <code>pprint.py</code> you'll find that in <code>PrettyPrinter._pprint_dict()</code>, the method responsible for formatting dicts:</p>
<pre><code>def _pprint_dict(self, object, stream, indent, allowance, context, level):
    write = stream.write
    write('{')
    if self._indent_per_level &gt; 1:
        write((self._indent_per_level - 1) * ' ')
    length = len(object)
    if length:
        items = sorted(object.items(), key=_safe_tuple)
        self._format_dict_items(items, stream, indent, allowance + 1,
                                context, level)
    write('}')

_dispatch[dict.__repr__] = _pprint_dict
</code></pre>
<p>There's this line <code>items = sorted(object.items(), key=_safe_tuple)</code>, so dict items are always sorted first before being processed for formatting, and you will have to override it yourself by copying and pasting it and removing the offending line in your own script:</p>
<pre><code>import pprint as pp
def _pprint_dict(self, object, stream, indent, allowance, context, level):
    write = stream.write
    write('{')
    if self._indent_per_level &gt; 1:
        write((self._indent_per_level - 1) * ' ')
    length = len(object)
    if length:
        self._format_dict_items(object.items(), stream, indent, allowance + 1,
                                context, level)
    write('}')
pp.PrettyPrinter._dispatch[dict.__repr__] = _pprint_dict
</code></pre>
<p>so that:</p>
<pre><code>pp.pprint({"b" : "Maria", "c" : "Helen", "a" : "George"}, width=1)
</code></pre>
<p>will output (in Python 3.6+):</p>
<pre><code>{'b': 'Maria',
 'c': 'Helen',
 'a': 'George'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use OrderedDict from the collections library of python to keep the ordering constant</p>
<pre><code>from collections import OrderedDict
from pprint import pprint
d = OrderedDict({"b" : "Maria", "c" : "Helen", "a" : "George"})
pprint(d, width = 1)
</code></pre>
<p><strong>UPDATE:</strong></p>
<p>Since output is important, you can use the following code, its a hack but you create a function to implement this feature:</p>
<pre><code>from collections import OrderedDict
d = OrderedDict({"b" : "Maria", "c" : "Helen", "a" : "George"})
print('{', end='')
total_len = len(d)
current_index = 1
for key, value in d.items():
    print('\''+key+'\': \'' + value+ '\'', end='')
    if current_index&lt;total_len:
        print(',')
    else:
        print('}')
    current_index += 1
</code></pre>
</div>
<span class="comment-copy"><code>OrderedDict</code> or use a function to sort over keys and print them individually. But as another note, why do you care if a dictionary has an order?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">docs.python.org/3/library/pprint.html</a> says, "Dictionaries are sorted by key before the display is computed." Doesn't make it sound like it's optional.</span>
<span class="comment-copy">@EdChum, @Francisco, sure, OrderedDict will display the results in ordered order. But if you pass one to pprint, it won't be "pretty": it will look like <code>OrderedDict([items go here])</code>. Doesn't look much like the desired output.</span>
<span class="comment-copy">@Kevin I just noticed that bit, you're correct this is unavoidable with <code>pprint</code> so the OP needs to consider a different metho</span>
<span class="comment-copy">You might be able to subclass <code>PrettyPrinter</code> and override <code>pformat</code> to get your desired output.  I'm not sure though</span>
<span class="comment-copy">Python 3.7 didn't work for that, but the last code is exactly what I was looking for, thank you so much.</span>
<span class="comment-copy">@MariaPantsiou You are correct, pprint sorts your keys, I'll update the answer.</span>
<span class="comment-copy">The issue I encountered when subclassing is that the private methods are called only when the standard representation exceeds the width. While you overcame the this problem by setting width=1, a general solution would require also overriding the PrettyPrinter.format method.</span>
<span class="comment-copy">The OP wants to modify the behaviour of <code>pprint</code>, this isn't about maintaining insertion order</span>
<span class="comment-copy">pprint would be printing the output as per the value saved. dict by default doesn't maintain the order or insertion hence the output is printed in that order. Hence I feel using an ordereddict would serve the purpose</span>
<span class="comment-copy">The output of this code doesn't look much like the desired output.</span>
<span class="comment-copy">It does solve the sorting problem, but the output is quite different comparing to the desired one.</span>
<span class="comment-copy">I have updated the answer to print it as per the requirement. I hope this solves your problem</span>
