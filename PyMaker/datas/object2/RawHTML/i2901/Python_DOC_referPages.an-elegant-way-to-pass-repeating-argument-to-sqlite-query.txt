<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15496051/dynamic-sql-where-clause-generation">Dynamic SQL WHERE clause generation</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/902408/how-to-use-variables-in-sql-statement-in-python">How to use variables in SQL statement in Python?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/5607737/python-sqlite3-parameterized-drop-table">Python sqlite3 parameterized drop table</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>From my <a href="https://www.python.org/" rel="nofollow noreferrer">Python</a> code (<a href="http://flask.pocoo.org/" rel="nofollow noreferrer">Flask</a> application, actually), I need to execute <a href="https://www.sqlite.org/index.html" rel="nofollow noreferrer">sqlite</a> query, of the following structure
    </p>
<pre><code>SELECT some_column FROM My_table WHERE some_column=some_value;
</code></pre>
<p>Now, <code>some_column</code> recurs twice in the query, one way to execute it is:
    </p>
<pre><code>cursor.execute('SELECT ? FROM Users WHERE ?=?;', (some_column, some_column, some_value))
</code></pre>
<p>Which is not very nice/Pythonic. Then I came up with:
    </p>
<pre><code>cursor.execute('SELECT {0} FROM Users WHERE {0}=?;'.format(some_column), (some_value,))
</code></pre>
<p>Finally, I ended up using <a href="https://pyformat.info/" rel="nofollow noreferrer"><code>.format()</code></a> all the way:
    </p>
<pre><code>cursor.execute('SELECT {0} FROM Users WHERE {0}={1};'.format(some_column, some_value), ())
</code></pre>
<hr/>
<p>I am wondering if there is prettier and/or more Pythonic way to pass recurring arguments into sqlite's <code>cursor.execute()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>First syntax is incorrect. In SQL parameterized queries can use parameters for values, not for table or column names.</p>
<p>Third form is bad because it hard codes a value in a query which is forbidden per best practices. It used to be common some times ago and was the cause for SQL injection security problems.</p>
<p>So the only possibility is second form: use string construction for table and column names, and parameters for values.</p>
<p>But anyway, your query is close to non sense: you ask the value of one single column when you fix that column value. For each selected row, the value will be <em>some_value</em>!</p>
<p>So, I assume that this was a simplified example of a more complex question, but without more context, I simply cannot imagine why you are asking this question and what is your real problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a big improvement, but since you tagged Python 3, consider the <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f-string</a>: </p>
<pre><code>f"SELECT {col} FROM Users WHERE {col}={val}"
</code></pre>
<p>As Klaus D. points out in a comment, however, it's not best practice to allow values to be format strings, as in some cases it makes your code vulnerable to SQL injection.  </p>
<p>It's a little less compact, but you can use <a href="https://stackoverflow.com/a/51313074/2799941">a mix</a> of f-string (for column names) and sqlite <code>?</code> syntax to input values (basically a mashup of your first two examples):</p>
<pre><code>params = (val,)
q = f"SELECT {col} FROM Users WHERE {col} = ?"
cursor.execute(q, params)
</code></pre>
</div>
<span class="comment-copy">If you use <code>format()</code> on SQL queries you will be vulnerable to SQL injections.</span>
<span class="comment-copy">I appreciate your explanation and pointing out incorrect syntax. Query is posted as it is though, and intended to check whether some entry (that needs to be unique) already exist in the DB, say email or login during user registration. E.g. <code>SELECT login FROM Users WHERE login='new_login';</code> will return <code>new_login</code> if it exists or <code>None</code> otherwise.</span>
<span class="comment-copy">My gratitude to you for the answer. Am I right to conclude that using any form of format strings is SQL injection insecure <b>only</b> for column values, and not column or table names?</span>
