<div class="post-text" itemprop="text">
<p>I'm working my way through the MIT Open Courseware class <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/" rel="nofollow noreferrer">Introduction to Computer Science and Programming in Python</a> and I've spent an embarrassing amount of time trying to wrap my head around the "Finger Exercise" from the textbook:  </p>
<blockquote>
<p>Write a program that examines three variables—x, y, and z—and
  prints the largest odd number among them. If none of them are odd, it should
  print a message to that effect.</p>
</blockquote>
<p>I wrote a couple of solutions that didn't quite work, missing odd numbers if there were larger even numbers.  I finally threw in the towel and searched here for solutions that others people working on this class had asked.  <a href="https://stackoverflow.com/a/19595603/4642253">This solution from AFDev</a> seemed to be the simplest to me (in the context of what the intent of the exercise was and how concise the solution was.)  I combined that with my user input to get the following:</p>
<pre><code>x=int(input('Enter your first number:'))
y=int(input('Enter your second number:'))
z=int(input('Enter your third number:'))
largest = None
if x%2:
    largest = x
if y%2:
    if y &gt; largest:
        largest = y
if z%2:
    if z &gt; largest:
        largest = z
if largest:
    print ('The largest odd number is', largest)
else:
    print ('There are no odd numbers.')
</code></pre>
<p>This works great, as long as x is an odd number. If x is zero or an even number, I get the following error:</p>
<pre><code>TypeError: '&gt;' not supported between instances of 'int' and 'NoneType'
</code></pre>
<p>The little bit of Googling I did said that Python 2.* was a little more liberal in allowing comparisons between NoneTypes and integers.  I changed the line to initialize largest = 0, but then realized that this would give invalid results if the user input a negative number.</p>
<p>I tweaked the code to the following:</p>
<pre><code>x=int(input('Enter your first number:'))
y=int(input('Enter your second number:'))
z=int(input('Enter your third number:'))

largest = None
if x%2:
    largest = x
if y%2:
    if largest == None:
        largest = y
    if y &gt; largest:
        largest = y
if z%2:
    if largest == None:
        largest = z
    if z &gt; largest:
        largest = z
if largest:
    print ('The largest odd number is', largest)
else:
    print ('There are no odd numbers.')
</code></pre>
<p>Is there a better way to initialize (for lack of a better term) "largest" so that I can compare it to an integer or is the way I'm doing it good enough?</p>
<p>I understand that there are better ways to compare the numbers to find the largest (I found <strong>max</strong> when googling.) I'm trying to baby-step my way through this stuff.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>None</code> seems fine if you're going to do it this way. (I'd say it's safer than using a large negative number.) You can get round the code duplication with <code>None</code> as e.g.</p>
<pre><code>if largest is None or y &gt; largest:
    largest = y
</code></pre>
<p>Couple of things, compare to <code>None</code> with <code>is</code>. Second, if the first part of an <code>or</code> is True, the second part won't be executed (called short-circuiting), so you won't get an error trying to compare a <code>None</code> using <code>&gt;</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or don't initialize it at all - just keep a Boolean to keep track of whether an odd number has been found yet.</p>
<pre><code>still_looking = True
if x % 2:
    largest, still_looking = x, False
if y % 2 and (still_looking or y &gt; largest):
    largest, still_looking = y, False
if z % 2 and (still_looking or z &gt; largest):
    largest, still_looking = z, False

if still_looking:
    print('There are no odd numbers.')
else:
    print('The largest odd number is', largest)
</code></pre>
<p>The repetitious code at the start then screams to be replaced with a uniform loop:</p>
<pre><code>still_looking = True
for val in x, y, z:
    if val % 2 and (still_looking or val &gt; largest):
        largest, still_looking = val, False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do:</p>
<pre><code>x=int(input('Enter your first number:'))
y=int(input('Enter your second number:'))
z=int(input('Enter your third number:'))

li=[e for e in (x,y,z) if e % 2]   # find all odd numbers from x,y,z

print('{} is largest odd number'.format(max(li)) if li else 'all input even')
</code></pre>
<p>This works because an empty container in Python is <code>False</code> and the list <code>li</code> will be empty if there are no odd numbers. You can use <code>max</code> to find the largest odd number if there are any and the Python ternary of <code>[if true clause] if [boolean test] else [what do do otherwise]</code></p>
<p>You can do the same thing this way:</p>
<pre><code>li=[e for e in (x,y,z) if e % 2]
if li:
    print ('The largest odd number is', max(li))
else:
    print ('There are no odd numbers.') 
</code></pre>
<hr/>
<p>If you don't want to use the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max function</a>, you can write your own:</p>
<pre><code>def mymax(li):
    max_=None 
    if li:
        max_=li[0]
    for e in li:
        if e&gt;max_: max_=e
    return max_     
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess using a very large negative number, to make sure you're good.
doing something like : </p>
<pre><code>largest = -float('inf')
</code></pre>
<p>and by the end checking this :</p>
<pre><code>if largest == -float('inf'):
  print("There are no odd numbers")
else:
  print(largest)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of putting:</p>
<pre><code>largest = None
</code></pre>
<p>you should put:</p>
<pre><code>largest = -1 * sys.maxsize + 1
</code></pre>
</div>
<span class="comment-copy">Initialize <code>largest</code> to a very very large negative number, for example <code>largest = -1e10</code>.</span>
<span class="comment-copy">One workaround to avoid <code>TypeError</code> in your first code is to assign a very large negative number to <code>largest</code> (like <code>largest = -999999</code>).</span>
<span class="comment-copy">By the way, zero <i>is</i> an even number!</span>
<span class="comment-copy">Initialize largest to <code>float('-inf')</code></span>
<span class="comment-copy">You might want to explain a <i>little</i> about tuple unpacking there if we are talking baby steps! Otherwise, +1</span>
<span class="comment-copy">I'm saving the second half of you comment and revisiting it in a couple of weeks, haha.</span>
<span class="comment-copy">That's a fine approach, but read through the end of the OP's post - "I understand that there are better ways to compare the numbers to find the largest (I found max when googling.) I'm trying to baby-step my way through this stuff."</span>
<span class="comment-copy">I guess baby steps are in the eye of the beholder! I find ideomatic Python usually is fairly clear even to those who are learning it vs purely procedural Python (this, new line this, new line, if x: new line, etc) gets really wordy and confusing. At least to this baby...</span>
<span class="comment-copy">I've grabbed your solution and will take a look at it in a couple of weeks.  I really appreciate everyone's help!</span>
<span class="comment-copy">There is no <code>sys.maxint</code> on Python 3.</span>
<span class="comment-copy">This won't work in Python3, and even if it did, it's ugly and a poor idea. It leads to a hidden dependency on an implementation detail.</span>
