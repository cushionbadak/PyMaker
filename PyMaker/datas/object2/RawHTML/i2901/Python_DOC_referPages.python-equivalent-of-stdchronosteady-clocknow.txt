<div class="post-text" itemprop="text">
<p>I am trying to convert a C++ code into Python.  What is the python equivalent that I can use to substitute <code>std::chrono::steady_clock::now();</code>that gives an accurate timing of the current time on linux that I can compare to other time points.</p>
<pre><code>void takeImages(steady_clock::time_point next_frame)
{

    steady_clock::time_point current_time = steady_clock::now();

    if (current_time &gt;= next_frame) {
        // do something if time right now is at or after next_frame
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is equivalent to <code>time.monotonic()</code> in Python. See <a href="https://docs.python.org/3/library/time.html#time.monotonic" rel="nofollow noreferrer">time â€” Time access and conversions</a>:</p>
<blockquote>
<p>Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid.</p>
</blockquote>
<p>Unfortunately C++ uses unusual nomenclature here. "Monotonic" is the term that other standards and languages use for this kind of clock (C11, Posix, Python, etc).</p>
</div>
<span class="comment-copy">Yeah, originally the name of this clock was <code>monotonic_clock</code>, but it <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3191.htm" rel="nofollow noreferrer">got changed during the standardization process</a>.</span>
<span class="comment-copy">What's your opinion on using monotonic versus using datetime.now() for synchronizing thread to do something at the same time.  I am trying to trigger cameras simultanously.</span>
<span class="comment-copy">@bakalolo: It depends. Generally, if you want to measure or specify an interval, and "at the same time" is just an interval of 0 seconds, then you want to use the monotonic clock because it is designed to measure intervals accurately (at the expense of not measuring civil time), and the realtime clock is designed to measure points in time accurately (at the expense of measuring intervals poorly). However, depending on the design of the system and the size of the intervals, you may be using more than one clock, and the question of "which clock" becomes less obvious.</span>
