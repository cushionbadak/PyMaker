<div class="post-text" itemprop="text">
<p>I need users to provide a list of lists of numbers as command line arguments.</p>
<p>The current solution I'm adopting is here below, the question is whether there is a more pythonic or more standard way of doing it.</p>
<p>Currently I'm accepting a comma-separated list of space-separated numbers from command line, like this:</p>
<pre><code>$ python foo.py --numbers '1 2 3, 4 5 6'
</code></pre>
<p>and internally I do</p>
<pre><code>def list_of_lists(arg):
    return map(lambda l: map(float, l), map(str.split, a.split(',')))

parser.add_argument('--numbers', type=list_of_lists)
</code></pre>
<p>to transform the string <code>"1 2 3, 4 5 6"</code> into <code>[[1,2,3],[4,5,6]]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have is fine. If I were writing it, I'd use commas and semicolons as delimiters (being strict about it: no whitespace allowed), and use a list comprehension for parsing:</p>
<pre><code>def list_of_lists(arg):
    return [float(x.split(',')) for x in arg.split(';')]
</code></pre>
<p>but that's really just cosmetic.</p>
<p>The next question is: how much verification do you want to do in <code>list_of_lists</code>? Right now, this simple version assumes that the string is in exactly the format you want. You can add more logic to catch errors, raising <code>argparse.ArgumentTypeError</code> to signal incorrect values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow noreferrer"><code>action="append"</code></a> and use <code>--numbers</code> more than once.</p>
<blockquote>
<p>This stores a list, and appends each argument value to the list. This is useful to allow an option to be specified multiple times.</p>
</blockquote>
<pre><code>import argparse

def to_list(arg):
    return [int(i) for i in arg.split(",")]

parser = argparse.ArgumentParser()
parser.add_argument("--numbers", action="append", type=to_list)
parsed = parser.parse_args("--numbers 1,2,3 --numbers 4,5,6".split())
print(parsed)
</code></pre>
<p>Output:</p>
<pre><code>Namespace(numbers=[[1, 2, 3], [4, 5, 6]])
</code></pre>
</div>
<span class="comment-copy">I'd use a format that is easily and safely (de)serializable, like JSON.</span>
<span class="comment-copy">you can use sys library. then ask the users to input the data in the following form: 1,2,3 4,5,6 7,8,9. The space separated values are combined into list as one value.</span>
<span class="comment-copy">nice, list comprehension is much nicer than those nested <code>map</code> calls I was making. commas and semicolons vs spaces and commas I have to try and see what looks nicer. thank you!</span>
<span class="comment-copy">p.s. the final list comprehension looks like this: <code>[[float(x) for x in l.split(',')] for l in arg.split(';')]</code></span>
