<div class="post-text" itemprop="text">
<p>Let's say I have a list of aliases tied to 5 digit codes available at runtime:</p>
<pre><code>aliasPairs = [(12345,'bob'),(23456,'jon'),(34567,'jack'),(45678,'jill'),(89012,'steph')]
</code></pre>
<p>I want to find a terse way to express: replace the id in the line with the matching alias, e.g. :</p>
<pre><code>line = "hey there 12345!"
line = re.sub('\d{5}', value in the aliasPairs which matches the ID, line)
print line
</code></pre>
<p>Should output:</p>
<pre><code>hey there bob!
</code></pre>
<p>How do Python pros write enumerative expressions in a terse manner?</p>
<p>Thanks and cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using a dictionary when you have a one-to-one mapping of two categories of data, such as five digit codes and aliases. Then it's easy to access any particular alias, given its code:</p>
<pre><code>import re

aliases = {
    "12345":"bob",
    "23456":"jon",
    "34567":"jack",
    "45678":"jill",
    "89012":"steph"
}

line = "hey there 12345!"
line = re.sub('\d{5}', lambda v: aliases[v.group()], line)
print(line)
</code></pre>
<p>Result:</p>
<pre><code>hey there bob!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you will be using these aliases directly in your code (not just referenced from data structures) then an <code>Enum</code> is a good way to go<sup>1</sup>:</p>
<pre><code>from enum import Enum

class Alias(Enum):
    bob = 12345
    jon = 23456
    jack = 34567
    jill = 45678
    steph = 89012
</code></pre>
<p>Then using <code>re</code> would look like:</p>
<pre><code>line = "hey there 12345!"
line = re.sub('\d{5}', lambda v: Alias(int(v.group()).name, line)
</code></pre>
<p>You could also add that behavior directly to the <code>Alias</code> <code>Enum</code> with a method:</p>
<pre><code>    @classmethod
    def sub(cls, line):
        return re.sub('\d{5}', lambda v: cls(int(v.group())).name, line)
</code></pre>
<p>and in use:</p>
<pre><code>Alias.sub("hey there 12345!")
</code></pre>
<p>Of course, <code>"bob"</code> should probably be capitalized, but who wants <code>Alias.Bob</code> all over their code?  Best to have the substitution text be separate from the Enum member name, a job more easily accomplished with <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a><sup>2</sup>:</p>
<pre><code>from aenum import Enum
import re

class Alias(Enum):
    _init_ = 'value text'
    bob = 12345, 'Bob'
    jon = 23456, 'Jon'
    jack = 34567, 'Jack'
    jill = 45678, 'Jill'
    steph = 89012, 'Steph'
    @classmethod
    def sub(cls, line):
        return re.sub('\d{5}', lambda v: cls(int(v.group())).text, line)

Alias.sub('hey there 34567!')
</code></pre>
<hr/>
<p><sup>1</sup> See <a href="http://stackoverflow.com/a/22594360/208880">this answer</a> for the standard <code>Enum</code> usage.</p>
<p><sup>2</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">So each five digit code corresponds to one alias? Consider using a dictionary.</span>
<span class="comment-copy">@Kevin that would also do, however an extensible data structure doesn't really matter too much because I will only have a max of about 10-15 aliases hard coded. I am more wondering how to do lambdas and the like in Python.</span>
<span class="comment-copy">Python doesn't have a built-in function for lookups in an association list, which is why you want a dictionary. <code>dict(aliasPairs)</code> will build the dictionary for you.</span>
<span class="comment-copy">Awesome, I absolutely love the lambda call.</span>
<span class="comment-copy">This is a really cool use of the of Enums. Question: the Alias.sub call looks kind of like a static access call to the class Alias, does the <i>init</i> get called the first time I call the Alias.sub method or upon invocation with every call to the 'class'?</span>
<span class="comment-copy">@Rice:  In <code>Enum</code> classes all the <code>Enum</code> members (aka class instances) are created when the class itself is created; both <code>__new__</code> and <code>__init__</code> are invoked at that time.   Any future operations that return an <code>Enum</code> member are returning one of the already created members.</span>
