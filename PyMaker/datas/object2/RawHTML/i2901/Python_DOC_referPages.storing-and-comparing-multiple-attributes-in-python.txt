<div class="post-text" itemprop="text">
<p>I'm trying to build a Survivor game that will allow me to compare stored characters against one another individually and as members of a tribe. I can sort of do it with one attribute, but can not figure out the best way to expand it to multiple attributes.  </p>
<p>Example:</p>
<pre><code>TribeAStr = {'John': 50, 'Tyler': 55, 'Joe': 90, 'Bob': 55}

# check who is the strongest Survivor
$ strongest = max(TribeAStr, key=TribeAStr.get)

#Remove him from TribeA
del TribeAStr[strongest]

#Check how strong the Tribe is as a whole
$ tribeastrength = sum(TribeAStr.values())
</code></pre>
<p>What I'd like to do is have each Survivor house their own attribues, and then use their names as a key that can then be pulled into similar scenarios as above. Something like this: </p>
<pre><code>class Survivor:
    def __init__(self, name, str=None, int=None, cha=None, luk=None):
        self.name = name
        self.str = strength
        self.int = intelligence
        self.cha = charisma
        self.luk = luck

TribeA = {}
John = Survivor{'John', 50, 40, 55, 20}
Bob= Survivor{'Bob', 55, 40, 80, 25}
Joe= Survivor{'Joe', 60, 10, 65, 10}
Tyler= Survivor{'Tyler', 56, 30, 15, 25}
TribeA.update('John', 'Bob', 'Joe', 'Tyler')

# check who is the strongest Survivor
$ strongest = max(Survivor, Survivor.str) for Survivor in TribeA
</code></pre>
<p>Any advice?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first problem is that you've got the syntax wrong:</p>
<pre><code>John = Survivor{'John', 50, 40, 55, 20}
</code></pre>
<p>In Python, you call a constructor like a normal function, with parentheses:</p>
<pre><code>John = Survivor('John', 50, 40, 55, 20)
</code></pre>
<hr/>
<p>Your second problem is that you can't <code>update</code> a dict with just a list of keys; you need to update it with a dict (or a list of key-value pairs). How else could it know what values you want? So:</p>
<pre><code>TribeA.update({'John': John, 'Bob': Bob, 'Joe': Joe, 'Tyler': Tyler})
</code></pre>
<p>But there's really no reason to create an empty dict just to <code>update</code> it; just create it in one go:</p>
<pre><code>TribeA = {'John': John, 'Bob': Bob, 'Joe': Joe, 'Tyler': Tyler}
</code></pre>
<p>If having to write each name twice seems repetitive, you can fix that by using a dict comprehension:</p>
<pre><code>TribeA = {survivor.name: survivor for survivor in (John, Bob, Joe, Tyler)}
</code></pre>
<p>Or, alternatively, maybe you don't want to create these variables in the first place; you can just store the objects straight in the dict:</p>
<pre><code>TribeA = {}
TribeA['John'] = Survivor('John', 50, 40, 55, 20)
# etc.
</code></pre>
<hr/>
<p>Your third problem is that you're getting the comprehension syntax wrong:</p>
<pre><code>strongest = max(Survivor, Survivor.str) for Survivor in TribeA
</code></pre>
<p>You have to put the whole comprehension inside the parentheses passed to <code>max</code>. Also, you want to sort them by strength, so you want the strength to come first, not send, in the pair. And finally, if your tribe is a dict, you can't just loop over the dict—that just gives you the keys. You need to loop over the values:</p>
<pre><code>strongest = max((survivor.str, survivor) for survivor in TribeA.values())
</code></pre>
<p>But notice that this will give you back not just the strongest survivor, but a pair of two values, the strongest survivor's strength and the survivor. You <em>could</em> just throw away the one you don't want:</p>
<pre><code>_, strongest = max((survivor.str, survivor) for survivor in TribeA.values())
</code></pre>
<p>… but it's probably better to use a key function, as explained in the <a href="https://docs.python.org/3/howto/sorting.html#sortinghowto" rel="nofollow noreferrer">Sorting HOWTO</a>:</p>
<pre><code>strongest = max(TribeA.values(), key=lambda survivor: survivor.str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>In [19]: class Survivor:
    ...:     def __init__(self, name, strength=None, intelligence=None, charisma=None, luck=None):
    ...:         self.name = name
    ...:         self.strength = strength
    ...:         self.intelligence = intelligence
    ...:         self.cha = charisma
    ...:         self.luk = luck

In [21]: TribeA = []
    ...: John = Survivor('John', 50, 40, 55, 20)
    ...: Bob= Survivor('Bob', 55, 40, 80, 25)
    ...: Joe= Survivor('Joe', 60, 10, 65, 10)
    ...: Tyler= Survivor('Tyler', 56, 30, 15, 25)
    ...: TribeA.extend([John, Bob, Joe, Tyler])

In [25]: strongest = max(TribeA, key=lambda x: x.strength)

In [26]: strongest.name
Out[26]: 'Joe'
</code></pre>
<p>To remove the strongest player from TribeA, use this:</p>
<pre><code>TribeA = list(filter(lambda x: x != strongest, TribeA))

# or going by name
# TribeA = list(filter(lambda x: x.name != strongest.name, TribeA))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define a method used determine the overall rating of a <code>Survivor</code>, presumably the <code>sum</code> of all attributes, and use it as a <code>key</code> for <code>max</code> to determine the strongest <code>Survivor</code>:</p>
<pre><code>class Survivor:
    def __init__(self, name, str=None, int=None, cha=None, luk=None):
        self.name = name
        self.str = str
        self.int = int
        self.cha = cha
        self.luk = luk

    def overall(self):
        return sum(getattr(self, attr) for attr in ('str', 'int', 'cha', 'luk'))

John = Survivor('John', 50, 40, 55, 20)
Bob= Survivor('Bob', 55, 40, 80, 25)
Joe= Survivor('Joe', 60, 10, 65, 10)
Tyler= Survivor('Tyler', 56, 30, 15, 25)
TribeA = [John, Bob, Joe, Tyler]
strongest = max(TribeA, key=Survivor.overall)
print(strongest.name)
</code></pre>
<p>This outputs:</p>
<pre><code>Bob
</code></pre>
</div>
<span class="comment-copy">As a side note: I know that <code>str</code> and <code>int</code> clearly mean strength and intelligence—but when your brain is in Python mode instead of D&amp;D mode, it reads them as the string and integer types. It's not illegal or dangerous to use <code>str</code> and <code>int</code> as attributes (unlike using them as global or local variable names), but it can still throw off a reader unless she rolls under wis on a d20, so you might want to at least consider using different names.</span>
<span class="comment-copy">One more thing: why are you allowing <code>None</code> as default values for all those initializer parameters? What would you do with a survivor that had <code>None</code> for <code>str</code>? The first time you tried to compare it with someone else's <code>str</code>, or a d100 roll, or whatever, you'd just get a <code>TypeError</code>.</span>
<span class="comment-copy">This seems to work great, thanks!  If I could bother you to answer one last question - If I wanted to remove 'Joe' from TribeA by using the variable "strongest" how would I do so? I'm trying to use:     del TribeA(strongest) however I am getting an error that the list indices must be integers, not Survivor. Thoughts?</span>
<span class="comment-copy">@rgaut88, thanks, just edited my answer.</span>
