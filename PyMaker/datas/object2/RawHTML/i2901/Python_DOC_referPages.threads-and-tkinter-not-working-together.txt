<div class="post-text" itemprop="text">
<p>Trying to practice Tkinter, Pyautogui and threading with a simple (or so I thought) auto clicker.</p>
<ul>
<li>It is supposed to open up a menu (check),  </li>
<li>then a choice of buttons (check),  </li>
<li>it opens up another window (check),  </li>
<li>and when you press <kbd>F7</kbd> it starts clicking (not working)  </li>
</ul>
<p>This works fine without Tkinter  </p>
<p>Here is code:  </p>
<pre><code>from tkinter import *
from pyautogui import *
from time import  *
from threading import Thread as th
import keyboard 

root = Tk()
key_loop = 1
k = ""
root.geometry("150x500")
def detect_key_def():
    global k
    while key_loop == 1:
        if keyboard.is_pressed('f7'):
            k = "f7"
        elif keyboard.is_pressed("f8"):
            k = "f8"
        elif keyboard.is_pressed("f9"):
            k = "f9"

detect_key = th(target=detect_key_def)
detect_key.start()
def clicker():
    clicker = Tk()
    root.geometry("300x300")

Label(clicker, text="Start - F7\n\nStop - F8").pack()
Button(clicker, text="Exit", command =clicker.destroy).pack()
if k == "f7":
    click()
    t.sleep(0.01)
elif k == "f8":
    t.sleep(0.01)
clicker.mainloop()

Button(root, text="Auto Clicker", command=clicker).pack()
root.mainloop()
</code></pre>
<p>When I run the code the <kbd>F7</kbd> starter does not work.<br/>
Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok so based on what you are trying to do with your code it is probably best to use <code>after()</code> here instead of threading. Tkinter monitors all the key presses anyway so you can just bind the <code>F7</code> button to the Toplevel window.</p>
<p>The below code will bind <code>F7</code> to the clicker toplevel window. When you click in toplevel to give it focus you can use the <code>F7</code> to start the auto clicking. I have it set to 1 clicks a second.</p>
<pre><code>import tkinter as tk
from pyautogui import click

root = tk.Tk()
key_loop = 1
root.geometry("150x500")

def click_loop(event=None):
    click()
    root.after(100, click_loop)

def clicker():
    clicker = tk.Toplevel(root)
    root.geometry("300x300")
    tk.Label(clicker, text="Start - F7\n\nStop - F8").pack()
    tk.Button(clicker, text="Exit", command =clicker.destroy).pack()
    clicker.bind("&lt;F7&gt;", click_loop)

tk.Button(root, text="Auto Clicker", command=clicker).pack()
root.mainloop()
</code></pre>
</div>
<span class="comment-copy">Pro tip. Do not import <code>*</code>. You run the risk of overriding other imports and causing issues with your code. Instead import as something like <code>import tkinter as tk</code> to prevent any issues with overriding methods from a library.</span>
<span class="comment-copy">Ok will do. Thanks</span>
<span class="comment-copy">Yea I saw that and fixed the sleep</span>
<span class="comment-copy">I think you need to use <code>after()</code> method from Tkinter to manage any timing you need to work with. Threading is an option but might be a little more advanced than you need here.</span>
<span class="comment-copy">@Mike-SMT Actually, while generally not recommended not to use <code>import *</code>, it is in this case used by example in the <a href="https://docs.python.org/3/library/tkinter.html#tkinter-modules" rel="nofollow noreferrer">documentation</a>, which is why it is so popular to do so when using <code>tkinter</code>.</span>
