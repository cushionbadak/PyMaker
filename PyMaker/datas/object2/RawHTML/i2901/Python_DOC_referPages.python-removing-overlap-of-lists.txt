<div class="post-text" itemprop="text">
<p>I'm aware variations of this question have been asked already, but none of the ones I've been able to find have addressed my specific aim.</p>
<p>I am trying to take two lists in Python with string elements and remove the overlapping sections of the two. For example:</p>
<pre><code>list1 = ["25","+","7","*","6","/","7"]
list2 = ["7","*","6"]
</code></pre>
<p>Should go to</p>
<pre><code>["25","+","/","7"]
</code></pre>
<p>I've considered a list comprehension along the lines of </p>
<pre><code>[i for i in list1 if not in list2]
</code></pre>
<p>but this would yield</p>
<pre><code>["25","+","/"]
</code></pre>
<p>as both instances of "7" would be taken out.</p>
<p>How can I achieve what I'm trying to do here? Thanks. </p>
<p>Edit - this was marked as a possible duplicate. In my example with the list comprehension, I already explained how it is a different problem to the one linked.</p>
</div>
<div class="post-text" itemprop="text">
<p>Essentially, you want a difference operation on a multi-set, i.e. a bag. <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Python implements this for the <code>collections.Counter</code> object</a>:</p>
<blockquote>
<p>Several mathematical operations are provided for combining Counter
  objects to produce multisets (counters that have counts greater than
  zero). Addition and subtraction combine counters by adding or
  subtracting the counts of corresponding elements. Intersection and
  union return the minimum and maximum of corresponding counts. Each
  operation can accept inputs with signed counts, but the output will
  exclude results with counts of zero or less.</p>
</blockquote>
<p>So, for example:</p>
<pre><code>&gt;&gt;&gt; list1 = ["25","+","7","*","6","/","7"]
&gt;&gt;&gt; list2 = ["7","*","6"]
&gt;&gt;&gt; list((Counter(list1) - Counter(list2)).elements())
['25', '+', '7', '/']
</code></pre>
<p>In Python 3.6+ this will be ordered (although this is not currently guaranteed, and should probably be considered an implementation detail). If order is important, and you are not using this version, you may have to implement an ordered counter.</p>
<p>Indeed, <a href="https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow noreferrer">the docs themselves provide just such a recipe</a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter, OrderedDict
&gt;&gt;&gt; class OrderedCounter(Counter, OrderedDict):
...     'Counter that remembers the order elements are first encountered'
...     def __repr__(self):
...         return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))
...     def __reduce__(self):
...         return self.__class__, (OrderedDict(self),)
...
&gt;&gt;&gt; list((OrderedCounter(list1) - OrderedCounter(list2)).elements())
['25', '+', '/', '7']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>remove</code> method. Probably slow. O(n^2) in worse case.</p>
<blockquote>
<p>list.remove(x)</p>
<pre><code>Remove the first item from the list whose value is x. 
It is an error if there is no such item.
</code></pre>
</blockquote>
<pre><code>for i in list2:
    list1.remove(i)

# list1 becomes
['25', '+', '/', '7']
</code></pre>
</div>
<span class="comment-copy">you can try use a counter</span>
<span class="comment-copy">is the order important?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/51518601/how-to-remove-every-occurrence-of-sub-list-from-list">How to remove every occurrence of sub-list from list</a></span>
<span class="comment-copy">@blhsing It's not - the question you linked deals with every occurrence while I showed with my example with the list comprehension that that is not what I wanted.</span>
<span class="comment-copy">This is similar to finding a substring in a larger string. I would suggest you to read about KMP (Knuth-Morris-Pratt) algorithm, it can directly be applied to your scenario.</span>
<span class="comment-copy">This solution actually does not maintain order (even with <code>OrderedCounter</code>). Try <code>list1 = ["6","/","7","6","7","6"]</code> and <code>list2 = ["7","6","7"]</code>. The output is <code>['6', '6', '/']</code> when it should be <code>['6', '/', '6']</code>.</span>
<span class="comment-copy">@blhsing I get <code>['/','6','6']</code>, i.e. maintaining order of <code>list1</code>, however, you are right, what "maintaining order" here is ambiguous. Not sure exactly what OP wants, and they haven't commented on that regard, but I see how "overlap" would imply that.</span>
<span class="comment-copy">My understanding is that the OP wants to emulate string replacement with lists, so it's like <code>'6/7676'.replace('767', '')</code>, where the result is <code>'6/6'</code>, so to speak, which is why I said the expected output in this case really should be <code>['6', '/', '6']</code>.</span>
<span class="comment-copy">@blhsing right, I understand what you are saying, but I think that it is ambiguous in that regard. In any case, if the elements will always be strings, then you'd be probably hard-pressed to beat <code>list(''.join(list1).replace(''.join(list2), ''))</code></span>
<span class="comment-copy">Yes, it's slightly ambiguous. But in this case a simple string replacement won't do because in the OP's example there is a string in the list that is more than one character long.</span>
<span class="comment-copy">I believe this will work well, although depending on the lists, it could potentially perform rather poorly.</span>
<span class="comment-copy">@juanpa.arrivillaga agree. Added a comment.</span>
<span class="comment-copy">I see this performing well if the pairs are small (better than the dict approach I'd wager). If you are working with two large lists, then the worst-case quadratic time will hit you.</span>
<span class="comment-copy">@juanpa.arrivillaga thanks for letting us know the results of your experiments.</span>
<span class="comment-copy">This solution actually does not maintain order. Try <code>list1 = ["6","/","7","6","7","6"]</code> and <code>list2 = ["7","6","7"]</code>. The output is <code>['/', '6', '6']</code> when it should be <code>['6', '/', '6']</code>.</span>
