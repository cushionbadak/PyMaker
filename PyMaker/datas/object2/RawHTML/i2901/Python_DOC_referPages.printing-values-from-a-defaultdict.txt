<div class="post-text" itemprop="text">
<p>I'm writing some code that looks like this:</p>
<pre><code>def check_states(inventory):
    inventory_list = defaultdict(list)
    for i in inventory:
        inventory_list[i['store_site']].append(i)
</code></pre>
<p>This will give me a defaultdict with a key of the <code>store_site</code> and a list of all the inventory there, which is information that has data in it in a further dictionary like received date, transferred date, serial number, state, etc.  So it is a dictionary that maps to  multiple values inside of it. So what we have is <strong>dictionary of a list of dictionaries.</strong> I want to print some, but not all of those values. So to the end of the function above I add:</p>
<pre><code>for store in inventory_list:
    print(store['serial_id'])
</code></pre>
<p>and I get</p>
<pre><code>TypeError: string indices must be integers.
</code></pre>
<p>I also have tried using <code>items()</code>:</p>
<pre><code>for store in inventory_list.items():
    print(store['serial_id'])
</code></pre>
<p>and I get</p>
<pre><code>TypeError: tuple indices must be integers, not str.
</code></pre>
<p>Can anyone help show me my error? I looked for similar questions, but most of the dictionary questions are about printing a 1:1 value, not a 1:many value.</p>
<pre><code>{'store5278': [{'abstract_state': 'GONE',
'aud_last_updated_time': '2017-03-29T08:03:20Z',
'bin_id': 9178,
'disposed_at': '2017-03-29T08:03:20Z',
'entity_type': 'parts',
'external_serial_id': '',
'id': 8336471,
'is_fake_serial_id': False,
'is_model_active': True,
'is_part_active': True,
'is_vending_bin': False,
'joint_asset_id': '_part_8336471',
'last_updated_time': '2017-03-29T08:03:20Z',
'model': 'Z-CAT6-16M-OR-UTP-AA-L-BBB',
'model_apn': 'OrangePatch16M',
'model_description': 'CAT6 Copper Patch Cord 16m PVC ORANGE ',
'model_id': 7285,
'model_mpn': '',
'po_number': '312949',
'received_at': '2017-03-23T14:38:25Z',
'room': 'PARTS',
'serial_id': '002042869',
'state': 'CONSUMED',
'state_id': '10',
'store': 'store5278',
'tracking_id': '7097553',
'transferred_at': '2017-03-29T08:03:20Z',
'type_id': 27,
'type_name': 'Cable',
'unit_cost': 0.0,
'vendor': 'Excel',
'vendor_id': 135}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your first bit of code</p>
<pre><code>for store in inventory_list:
    print(store['serial_id'])
</code></pre>
<p>is throwing an error because <code>for k in dictionary</code> iterates through the keys of a dictionary, setting each key as <code>k</code>. When you try to access <code>store[x]</code>, you're telling python to access the character in position <code>x</code> of string <code>store</code>. However, you have used a string (<code>serial_id</code>), so python is telling you that it expects an integer.</p>
<p>The second snippet</p>
<pre><code>for store in inventory_list.items():
    print(store['serial_id'])
</code></pre>
<p>makes the same error, but <code>store</code> in this case is a tuple of <code>(key, value)</code>. The more common way to use this syntax is to access both keys and values, as follows:</p>
<pre><code>inventory_list = {
    'store a': { 'apples': 10, 'bananas': 5, 'cows': 2 },
    'store b': { 'apples': 5, 'bananas': 10 } }

for store, stuff in inventory_list.items():
    print( store )
    print( stuff )
</code></pre>
<p>returns</p>
<pre><code>store a
{'apples': 10, 'bananas': 5, 'cows': 2}
store b
{'apples': 5, 'bananas': 10}
</code></pre>
<p>If you want to iterate through the data within each of the nested dictionaries, do so as if you were accessing a top-level item, i.e.</p>
<pre><code># using the same inventory list as before
for k,v in inventory_list.items():
    print("Inventory for store " + k)
    # v is a reference to a dictionary, so iterate through that
    for item, qtt in v.items():
        print("Item: " + item + "; quantity: " + str(qtt))
</code></pre>
<p>Output:</p>
<pre><code>Inventory for store store a
Item: apples; quantity: 10
Item: bananas; quantity: 5
Item: cows; quantity: 2
Inventory for store store b
Item: apples; quantity: 5
Item: bananas; quantity: 10
</code></pre>
<p>If you want to access data in the nested dictionary directly, you can do so using by key:</p>
<pre><code>for k,v in inventory_list.items():
    print(k + " has " + str(v['apples']) + ' apples in stock')
</code></pre>
<p>Output:</p>
<pre><code>store a has 10 apples in stock
store b has 5 apples in stock
</code></pre>
<p>If you have a list of dictionaries, you can iterate through it using <code>for x in list</code>, where each <code>x</code> will be dictionary:</p>
<pre><code>inventory_list = [
     { 'apples': 10, 'bananas': 5, 'cows': 2 },
     { 'apples': 5, 'bananas': 10 }]

for store in inventory_list:
    print( store )
</code></pre>
<p>Output:</p>
<pre><code>{'apples': 10, 'bananas': 5, 'cows': 2}
{'apples': 5, 'bananas': 10}
</code></pre>
<p>or access a value directly:</p>
<pre><code>for store in inventory_list:
    print( store['apples'] )
</code></pre>
<p>Output:</p>
<pre><code>10
5
</code></pre>
<p>Put all this together to access data within a dictionary of lists of dictionaries:</p>
<pre><code>dd = { 'store a': [ { 'apples': 10, 'bananas': 5, 'cows': 2 }, { 'apples': 20, 'bananas': 15, 'cows': 25 } ],
      'store b': [{ 'apples': 5, 'bananas': 10 }, {'apples': 2, 'bananas': 30, 'cows': 0}] }

for k,v in dd.items():
    print(k)
    for list_item in v: # v is the list, list_item is each dictionary
        print('apples: ' + str(list_item['apples']))
</code></pre>
<p>Output:</p>
<pre><code>store a
apples: 10
apples: 20
store b
apples: 5
apples: 2
</code></pre>
<p>If in doubt, I highly recommend adding <code>print</code> statements to your code to work out what each variable looks like (is it a string? a tuple? a dictionary? etc.). It will help you immensely with understanding and debugging your code.</p>
<p>All of this information can be gleaned from <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">reading the python documentation on dictionaries</a> and <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">lists</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the problems is not quite understanding the nature of the data being iterated over in your <code>for</code> loops. And perhaps not understanding what inside the <code>inventory</code> parameter.</p>
<pre><code>for store in inventory_list:
    ...
</code></pre>
<p><code>inventory_list</code> is a <code>dict</code>. When iterating over a <code>dict</code> as shown above one gets  a sequence of all the <code>keys</code> in the dict. In your dict those keys are "apparently" <code>strings</code>. I say that by reverse engineering the error you're showing:</p>
<pre><code>TypeError: string indices must be integers.
</code></pre>
<p>That's the error one gets when running:</p>
<pre><code>stored = "some_name"
store['serial_id']
</code></pre>
<p>So... first issue for you is to understand the data in <code>inventory</code> sequence. The elements apparently have a 'store_site', but that value there is a string, not some higher level data structure. </p>
<p>In your second example:</p>
<pre><code>for store in inventory_list.items():
   ...
</code></pre>
<p>The items() method on a <code>dict</code> generates a sequence of key/value tuples. It does not generate a sequence of keys (what I think you equate to "stores"). And that explains why <code>store['serial_id']</code> fails as it does.</p>
</div>
<span class="comment-copy">Can you provide a <b><a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></b>? For example, some specific input which we can run to verify your example?</span>
<span class="comment-copy">have you read through the documentation on <code>defaultdict</code>s? If the value in the <code>defaultdict</code> is another data structure, just iterate through that using the appropriate functions for that data structure.</span>
<span class="comment-copy">Read the documentation about <code>dict</code>s. You are not using them correctly. It is very well documented online.</span>
<span class="comment-copy">What's <code>site</code> in the last snippet?</span>
<span class="comment-copy">I <i>think</i> all you need is <code>for store in inventory_list.values(): print(store['serial_id'])</code>, but it's not exactly clear what your desired output is.</span>
<span class="comment-copy">Thanks for the details response. I've updated my original question. My issue is that it is a dictionary of a list of dictionaries. I'm having trouble getting to the values inside the last dictionary structure.</span>
<span class="comment-copy">Yes, thank you. That was my hang up, I had to iterate down further into the list. I didn't realize you could iterate over the values given by items(). Rate up, and thank you for the multiple responses.</span>
<span class="comment-copy">I've updated my original post with more information, but inventory_list is actually a dictionary of a list of dictionaries.  If it was a dictionary of a list, I could print the values in the list using .items(), I've done that before.  I don't know how to get down further into this type of data structure</span>
