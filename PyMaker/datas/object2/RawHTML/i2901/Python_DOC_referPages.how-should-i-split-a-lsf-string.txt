<div class="post-text" itemprop="text">
<p>Suppose I have following LSF:</p>
<pre><code>873411_ExtraNode -q lnx64 -P someprog:98.90:PV:DY -W 90:08 -R "rusage[mem=5000] select[(OSME==Linux) &amp;&amp; ( (OEL==EV70&amp;&amp;SFIPLATFORM&gt;=c0896)||(OEL==EG70&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS12&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS11&amp;&amp;SFIPLATFORM&gt;=d0290))]"
</code></pre>
<p>What I want is to split this in a way so that I can get a JSON or dictionary of all the switches (as keys) along with the values.The first alphanumeric word is also a value to "name" key. 
Also there should be internal split on each attribute passed to rusage.</p>
<p>I am not to able to form such a complex regex and splitting this value at every point seems a very un-pythonic way to code.</p>
<p>Expected Output:</p>
<p>lsf = </p>
<pre><code>{ "name" : "873411_ExtraNode",

 "-q" : "lnx64",
 "-P" : "someprog:98.90:PV:DY",
 "-W" : "90:08",
 "-R" : "rusage"
 "rusage" :[
   {
       "mem" : "5000",
       "OSME" : "Linux",
       "OEL" : "EV70, EG70, SHGS12, SHGS11",
       "SFIPLATFORM" : "&gt;=c0896, d0298, d0298, d0290"
   }
]
}
</code></pre>
<p>Any leads is appreciated. 
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can split your string from example with <code>shlex.split</code> (<a href="https://docs.python.org/3/library/shlex.html#shlex.split" rel="nofollow noreferrer">docs here</a>), regular expression is not necessary:</p>
<pre><code>import shlex
from pprint import pprint

s = '''873411_ExtraNode -q lnx64 -P someprog:98.90:PV:DY -W 90:08 -R "rusage[mem=5000] select[(OSME==Linux) &amp;&amp; ( (OEL==EV70&amp;&amp;SFIPLATFORM&gt;=c0896)||(OEL==EG70&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS12&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS11&amp;&amp;SFIPLATFORM&gt;=d0290))]"'''

l = shlex.split(s)
d = {switch:value for switch, value in zip(l[1::2], l[2::2])}
d['name'] = l[0]
pprint(d)
</code></pre>
<p>Prints:</p>
<pre><code>{'-P': 'someprog:98.90:PV:DY',
 '-R': 'rusage[mem=5000] select[(OSME==Linux) &amp;&amp; ( '
       '(OEL==EV70&amp;&amp;SFIPLATFORM&gt;=c0896)||(OEL==EG70&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS12&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS11&amp;&amp;SFIPLATFORM&gt;=d0290))]',
 '-W': '90:08',
 '-q': 'lnx64',
 'name': '873411_ExtraNode'}
</code></pre>
<p>EDIT:</p>
<p>To parse <code>-R</code> parameter, you can use <code>re</code>. (<a href="https://regex101.com/r/SAFlUg/1" rel="nofollow noreferrer">explanation of regex here</a>).</p>
<pre><code>import shlex
import re
from collections import defaultdict, OrderedDict
from pprint import pprint

s = '''873411_ExtraNode -q lnx64 -P someprog:98.90:PV:DY -W 90:08 -R "rusage[mem=5000] select[(OSME==Linux) &amp;&amp; ( (OEL==EV70&amp;&amp;SFIPLATFORM&gt;=c0896)||(OEL==EG70&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS12&amp;&amp;SFIPLATFORM&gt;=d0298)||(OEL==SHGS11&amp;&amp;SFIPLATFORM&gt;=d0290))]"'''

def parse_r(s):
    d = defaultdict(list)
    groups = re.finditer(r'rusage.*?(?P&lt;rusage&gt;\d+)|OSME.*?(?P&lt;osme&gt;\w+)|OEL.*?(?P&lt;oel&gt;\w+)|SFIPLATFORM.*?(?P&lt;sfiplatform&gt;[&lt;&gt;=\w]+)', s)
    for g in groups:
        for k, v in g.groupdict().items():
            if not v:
                continue
            d[k] += [v]
    return d

l = shlex.split(s)
d = OrderedDict(( (switch, value) for switch, value in zip(l[1::2], l[2::2]) ))
d['name'] = l[0]
d['-R'] = parse_r(d['-R'])
pprint(d)
</code></pre>
<p>Prints:</p>
<pre><code>OrderedDict([('-q', 'lnx64'),
             ('-P', 'someprog:98.90:PV:DY'),
             ('-W', '90:08'),
             ('-R',
              defaultdict(&lt;class 'list'&gt;,
                          {'oel': ['EV70', 'EG70', 'SHGS12', 'SHGS11'],
                           'osme': ['Linux'],
                           'rusage': ['5000'],
                           'sfiplatform': ['&gt;=c0896',
                                           '&gt;=d0298',
                                           '&gt;=d0298',
                                           '&gt;=d0290']})),
             ('name', '873411_ExtraNode')])
</code></pre>
</div>
<span class="comment-copy">Please provide expected output.</span>
<span class="comment-copy">@andrew_reece did it.</span>
<span class="comment-copy">Is <code>rusage</code> meant to be a dict key?</span>
<span class="comment-copy">yes, along with subkeys (if possible in some data structure) mem, OSME, etc.</span>
<span class="comment-copy">In that case please format your code correctly.</span>
<span class="comment-copy">that's nifty. but two things, order isn't the same also can I further break rusage data. I have update the question with expected output. Kindly check.</span>
<span class="comment-copy">@MeharCharanSahai see my updated version</span>
