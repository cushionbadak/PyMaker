<div class="post-text" itemprop="text">
<p>Here is my c++code:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;

using namespace std;

int main() {
    clock_t end;
    clock_t start = clock();
    for(int i = 0; i &lt; 1000; i++) {
        cout &lt;&lt; "Test" &lt;&lt; endl;
    }
    end = clock() - start;
    double duration = end / (double) CLOCKS_PER_SEC;
    cout &lt;&lt; "Duration: " &lt;&lt; duration &lt;&lt; endl;
    getchar();
    return 0;
} // This takes around ~ .9 secs on average
</code></pre>
<p>Here is my python code:</p>
<pre><code>import time

def foo():
    start = time.time()
    for i in range(1000):
        print('Test')
    print('Duration: {}'.format(time.time()-start))

# This takes around ~ .08 secs on average
</code></pre>
<p>why is PYTHON FASTER in this case? I'm not sure if it's because I wrote extra code or not, but it seems like a pretty basic for loop. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's not the <code>for</code> loop that's slow, but the C++ <code>iostreams</code>. And it's not even that <code>iostreams</code> is horribly slow,<sup>1</sup> but that you're doing an <code>endl</code> for every line.</p>
<p>C++ <a href="http://www.cplusplus.com/reference/ostream/endl/" rel="noreferrer"><code>endl</code></a> is not just a synonym for <code>'\n'</code>, it's an io manipulator object that, when inserted into a stream, inserts <code>'\n'</code> <em>and then asks for the stream to be flushed.</em> Flushing stdout can be very slow.</p>
<p>Python <a href="https://docs.python.org/3/library/functions.html#print" rel="noreferrer"><code>print</code></a>, on the other hand, doesn't flush unless you ask it to explicitly; otherwise, it just writes to <code>sys.stdout</code>, which is a <code>TextIOWrapper</code> that accumulates stuff in a buffer and flushes whenever it thinks is appropriate, which is pretty much the same thing C++ <code>iostreams</code> do.<sup>2</sup></p>
<p>For a fair test, compare this:</p>
<pre><code>    cout &lt;&lt; "Test\n";

    print("Test")
</code></pre>
<p>â€¦ or this:</p>
<pre><code>    cout &lt;&lt; "Test" &lt;&lt; endl;

    print("Test", flush=True)
</code></pre>
<hr/>
<p><sub>1. With some platforms/compilers/optimization flags, it <em>is</em> pretty slow. And manipulators can be especially slow. So Python might <em>still</em> beat C++ after you fix this problem. But not by an 11:1 ratio.</sub></p>
<p><sub>2. Python also has to convert your string from Unicode to <code>sys.stdout.encoding</code>. But, if you're on 3.4 or later, a Unicode string that happens to be all ASCII like <code>'test'</code> is stored as the ASCII bytes, and encoding it is a no-op.</sub></p>
</div>
<span class="comment-copy">It's not the loops, it is the content in the loops.</span>
<span class="comment-copy">Try again with <code>static const char text[] = "Test\n";</code>..., <code>cout.write(text, sizeof(text) - 1);</code>.</span>
<span class="comment-copy">The biggest potential offenders are: compiling in debug mode without optimizations and std::cout. Use fputs and make sure you compile with -O2 and without -D_DEBUG.</span>
<span class="comment-copy">I just executed your code (unmodified) on my machine and the timings I get are: <code>C++ with endl: 0.001654, C++ without endl: 0.001555, python3 without flush: 0.003866910934448242, python3 with flush: 0.005127906799316406</code>.</span>
<span class="comment-copy">@abarnert Compiler: Apple LLVM version 9.1.0 (clang-902.0.39.2), flags: -O3. stdlib: libc++</span>
<span class="comment-copy">What exactly iostreams do is implementation-dependent. Microsoft's implementation of <code>std::cout</code> is not buffered. It would write characters one by one to the underlying file with <code>fputc</code>.</span>
<span class="comment-copy">@AlexeyB: It is unbuffered to synchronize with <code>&lt;stdio.h&gt;</code>. Call <code>std::ios_base::sync_with_stdio(false)</code> and it should become buffered. While flushing every line is bad, the most likely cause of bad timing is actually not optimizing the code.</span>
