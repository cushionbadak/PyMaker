<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1109804/does-python-have-a-sorted-list">Does python have a sorted list?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>What's the good algorithm to keep the numbers sorted while it continually adds new numbers? Any built-in library in Python for it? </p>
<p>My idea is <strong>self-balanced binary searching tree</strong></p>
<pre><code>Insert: O(log(n))
Get top k numbers: O(k) do in-order travel
Get all sorted numbers: O(n) do in-order travel
</code></pre>
<p><strong>Binary Heap</strong> works too but slower</p>
<pre><code>Insert: O(log(n))
Get top k numbers: O(k*log(n)) pop out k numbers
Get all numbers: O(n*log(n)) pop out all
</code></pre>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>I've looked at <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">built-in ones</a> and it seems that there is no solution there.</p>
<p>But the <a href="https://pypi.org/project/sortedmap/" rel="nofollow noreferrer">sortedmap module</a> provides the requested functionality and is based on std::map (<a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree" rel="nofollow noreferrer">red-black tree</a>).</p>
</div>
<span class="comment-copy">Not diretly answering the question, but maybe helpful: <a href="https://pypi.org/project/sortedcontainers/0.8.5/" rel="nofollow noreferrer">pypi.org/project/sortedcontainers/0.8.5</a></span>
<span class="comment-copy">You seem to already know the algorithm (data structure) to use, so the most useful answer you're likely to get for the first part of your question is "yeah, use that". Although the structures you mentioned have different use cases - a heap is only really good at popping the first element (but if that's what you want, then... yeah, use that).</span>
<span class="comment-copy">What real problem are you going to solve?</span>
<span class="comment-copy">I want to get the top k elements that dynamically added. Ideally by python. It is for coding interview, so I want to use the best algorithm. @MBo</span>
<span class="comment-copy">So you want to keep top k elements during instant adding and sometimes retrieve them? In this case heap (for k elements!) is the best choice. Note that question was different...</span>
