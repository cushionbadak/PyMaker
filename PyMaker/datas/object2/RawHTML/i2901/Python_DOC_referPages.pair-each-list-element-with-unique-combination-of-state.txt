<div class="post-text" itemprop="text">
<p>I'm trying to learn a bit of python 3 with something that i thought was trivial, but is actually winding me up a bit..</p>
<p>i have two lists.. </p>
<pre><code>items=['a','b','c']
states=[0, 1, -1]
</code></pre>
<p>and i want to generate all unique combinations of <strong><em>state</em></strong>, that those items can have... so for this example it would start as..</p>
<pre><code> 1, 1, 1
 1, 1, 0
 1, 1,-1
 ..
</code></pre>
<p><strong><em>Note</em></strong>: The ordering matters, and 1, 0, 0, is not the same as 0, 1, 0</p>
<p>then, if we added another item, it would end up being..</p>
<pre><code> 1, 1, 1, 1
 1, 1, 1, 0
 1, 1, 1,-1
 ..
</code></pre>
<p>i am getting a bit frustrated with syntax at the moment, and am not 100% sure what is possible, but have been trying to get this working with itertools.permutations, and also the concept of a 'generator' ??</p>
<p>So, i started off trying to get the permutations of the states..</p>
<pre><code>itertools.permutations(states)
[(0, 1, -1), (0, -1, 1), (1, 0, -1), (1, -1, 0), (-1, 0, 1), (-1, 1, 0)]
</code></pre>
<p>and then join them up with the item list..</p>
<pre><code>[(x,items) for x in itertools.permutations(states)]
[((0, 1, -1), ['a', 'b', 'c']), ((0, -1, 1), ['a', 'b', 'c']), ((1, 0, -1), ['a', 'b', 'c']), ((1, -1, 0), ['a', 'b', 'c']), ((-1, 0, 1), ['a', 'b', 'c']), ((-1, 1, 0), ['a', 'b', 'c'])]
</code></pre>
<p>but all this does is randomise the state list i currently have in a list.. i.e. i have no 1,1,1, or 0,0,0</p>
<p>Can anyone offer me some pointers.. i'm sure this must have been done before!</p>
</div>
<div class="post-text" itemprop="text">
<p>You may be looking for <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>from itertools import product

[list(zip(x, item)) for x in product(states, repeat=3)]

[[(0, 'a'), (0, 'b'), (0, 'c')],
 [(0, 'a'), (0, 'b'), (1, 'c')],
 [(0, 'a'), (0, 'b'), (-1, 'c')],
 [(0, 'a'), (1, 'b'), (0, 'c')],
 [(0, 'a'), (1, 'b'), (1, 'c')],
 [(0, 'a'), (1, 'b'), (-1, 'c')],
 [(0, 'a'), (-1, 'b'), (0, 'c')],
 [(0, 'a'), (-1, 'b'), (1, 'c')],
 [(0, 'a'), (-1, 'b'), (-1, 'c')],
 [(1, 'a'), (0, 'b'), (0, 'c')],
 [(1, 'a'), (0, 'b'), (1, 'c')],
 [(1, 'a'), (0, 'b'), (-1, 'c')],
 [(1, 'a'), (1, 'b'), (0, 'c')],
 [(1, 'a'), (1, 'b'), (1, 'c')],
 [(1, 'a'), (1, 'b'), (-1, 'c')],
 [(1, 'a'), (-1, 'b'), (0, 'c')],
 [(1, 'a'), (-1, 'b'), (1, 'c')],
 [(1, 'a'), (-1, 'b'), (-1, 'c')],
 [(-1, 'a'), (0, 'b'), (0, 'c')],
 [(-1, 'a'), (0, 'b'), (1, 'c')],
 [(-1, 'a'), (0, 'b'), (-1, 'c')],
 [(-1, 'a'), (1, 'b'), (0, 'c')],
 [(-1, 'a'), (1, 'b'), (1, 'c')],
 [(-1, 'a'), (1, 'b'), (-1, 'c')],
 [(-1, 'a'), (-1, 'b'), (0, 'c')],
 [(-1, 'a'), (-1, 'b'), (1, 'c')],
 [(-1, 'a'), (-1, 'b'), (-1, 'c')]]
</code></pre>
<p>Alternately, there's also <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>combinations_with_replacement()</code></a>:</p>
<pre><code>from itertools import combinations_with_replacement

[list(zip(x, item)) for x in combinations_with_replacement(states, 3)]

[[(0, 'a'), (0, 'b'), (0, 'c')],
 [(0, 'a'), (0, 'b'), (1, 'c')],
 [(0, 'a'), (0, 'b'), (-1, 'c')],
 [(0, 'a'), (1, 'b'), (1, 'c')],
 [(0, 'a'), (1, 'b'), (-1, 'c')],
 [(0, 'a'), (-1, 'b'), (-1, 'c')],
 [(1, 'a'), (1, 'b'), (1, 'c')],
 [(1, 'a'), (1, 'b'), (-1, 'c')],
 [(1, 'a'), (-1, 'b'), (-1, 'c')],
 [(-1, 'a'), (-1, 'b'), (-1, 'c')]]
</code></pre>
</div>
<span class="comment-copy">It seems like you want <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>combinations_with_replacement</code></a>, not <code>permutations</code>. <code>(1, 1, 1)</code> is <b>not</b> a permutation of <code>(0, 1, -1)</code>.</span>
<span class="comment-copy">Your question is not clear, apparently because you are misusing terminology. You say you want "permutations" of <code>state</code> but give the example <code>1,1,1</code> which is not a permutation. A permutation is a re-arranging of part or all of a set, <i>without duplication</i> (replacement). Your example duplicated the <code>1</code> so it is not a permutation. Please re-word your question to make it clear.</span>
<span class="comment-copy">@RoryDaulton what is the correct terminology please? Combinations?!</span>
<span class="comment-copy">If you want, in your group of three items, the first to be any of your <code>state</code> items, your second to be any, and your third to be any, allowing duplication/replacement, then this is a Cartesian product. Check <a href="https://docs.python.org/3.5/library/itertools.html#itertools.product" rel="nofollow noreferrer">the product function</a> in itertools, or perhaps <a href="https://docs.python.org/3.5/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer">combinations_with_replacement</a>. If you clarify your question we can get you a good answer. Pay attention to the order of the answers--do you want both <code>1,1,0</code> and <code>0,1,1</code>?</span>
<span class="comment-copy">@RoryDaultoni have updated the query to clarify... hope that helps. Cartesian product is not what i am after.. is is definitely unique combinations... and the order certainly matters (both updated in question) - 1, 1, 0 is <i>not</i> the same as 0, 1, 1</span>
<span class="comment-copy">so, it would seem yes that the combinations_with_replacement is what i am after..  that for help in locating that... the second portion of your answer is interesting, because where is the combination of -1, 0, 0 for example?</span>
<span class="comment-copy">Ok, looks like you actually want <code>itertools.product</code> - see updated answer, is that what you have in mind?</span>
<span class="comment-copy">ahhh, excellent.. thank you, that is superb! i think my main failing here is terminology in being able to search the internet for what i <i>actually</i> was after. i am (kinda) pleased i wasn't really all that far off.. :)</span>
