<div class="post-text" itemprop="text">
<p>Imagine we have following list of strings:</p>
<pre><code>Input: ["eat", "tea", "tan", "ate", "nat", "bat"]
</code></pre>
<p>The output of our program should group each set of anagram and return them all together as a list as following:</p>
<pre><code>Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
</code></pre>
<p>My current solution finds the first set of anagrams but fails to detect the other two and instead, duplicates the first groups into the list:</p>
<pre><code>class Solution(object):
    def groupAnagrams(self, strs):
        allResults=[]
        results=[]
        temp=''
        for s in strs:  
          temp=s[1:]+s[:1]
          for i in range(0,len(strs)):
              if temp==strs[i]:
                results.append(strs[i])
          allResults.append(results)      
        return allResults 
</code></pre>
<p>and the output is:</p>
<pre><code>[["ate","eat","tea"],["ate","eat","tea"],["ate","eat","tea"],["ate","eat","tea"],["ate","eat","tea"],["ate","eat","tea"]]
</code></pre>
<p>How to fix this issue?</p>
<p><strong>EDIT:</strong>
I have fixed the duplication in appending by appending the <code>results</code> into <code>allResults</code> outside of second loop:</p>
<pre><code>class Solution(object):
def groupAnagrams(self, strs):
    allResults=[]
    results=[]
    temp=''
    for s in strs:  
      temp=s[1:]+s[:1]
      for i in range(0,len(strs)):
          if temp==strs[i]:
            results.append(strs[i])
    allResults.append(results) 
    print(results)
    return allResults  
</code></pre>
<p>Yet, it does not detect the other two sets of anagrams.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can do it using defaultdict of python in-built collections library and sorted :</p>
<pre><code>In [1]: l = ["eat", "tea", "tan", "ate", "nat", "bat"]

In [2]: from collections import defaultdict

In [3]: d = defaultdict(list)

In [4]: for x in l:
   ...:     d[str(sorted(x))].append(x)

In [5]: d.values()
Out[5]: dict_values([['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']])
</code></pre>
<p>to fix your the solution you need add the variable to check is allready added, for exanmple(and the while walk through the <code>strs</code> i use enumerate for little performance in the search of the anagrams):
<pre>
class Solution(object):
    def groupAnagrams(self, strs):
        allResults = []
        <b>added = set([])</b>
        temp=''
        for i, s in enumerate(strs):
            results = []
            <b>unique_s = "".join(sorted(s))
            if unique_s in added:
                continue
            else:
                added.add(unique_s)</b>
            for x in strs[i:]:
              if unique_s=="".join(sorted(x)):
                results.append(strs[i])
            allResults.append(results)<br/>
        print(added)<br/>
        return allResults
</pre></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.groupby</code></p>
<pre><code>&gt;&gt;&gt; lst =  ["eat", "tea", "tan", "ate", "nat", "bat"]
&gt;&gt;&gt; 
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; f = lambda w: sorted(w)
&gt;&gt;&gt; [list(v) for k,v in groupby(sorted(lst, key=f), f)]
[['bat'], ['eat', 'tea', 'ate'], ['tan', 'nat']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Using only lists, as requested in the title of the question:</h3>
<p>The second line <code>s_words</code> takes all the letters of each <code>word</code> in <code>words</code>, sorts them, and recreates a string composed of the sorted letters of the word; it creates a list of all the these sorted letters strings, in the same order as the original sequence of words --&gt; this will be used to compare the possible anagrams (the letters of anagrams produce the same string when sorted)</p>
<p>The 3rd line <code>indices</code> hold <code>True</code> or <code>False</code> values, to indicate if the corresponding word has been extracted already, and avoid duplicates.</p>
<p>The following code is a double loop that for each s_word, determines which other s_word is identical, and uses its index to retrieve the corresponding word in the original list of words; it also updates the truth value of the indices.</p>
<pre><code>words = ["eat", "tea", "tan", "ate", "nat", "bat"]
s_words = [''.join(sorted(list(word))) for word in words]
indices = [False for _ in range(len(words))]
anagrams = []
for idx, s_word in enumerate(s_words):
    if indices[idx]:
        continue
    ana = [words[idx]]
    for jdx, word in enumerate(words):
        if idx != jdx and not indices[jdx] and s_word == s_words[jdx]:
            ana.append(words[jdx])
            indices[jdx] = True
    anagrams.append(ana)

print(anagrams)
</code></pre>
<h3>output:</h3>
<pre><code>[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way you implemented your function, you are only looking at rotations of the strings (that is you shift a letter from the beginning to the end, e.g. a-t-e -&gt; t-e-a -&gt; e-a-t). What your algorithm cannot detect is single permutations were you only switch two letters (n-a-t -&gt; t-a-n). In mathematical language you only consider the even permutations of the three letter strings and not the odd permutations.</p>
<p>A modification of your code could for example be:</p>
<pre><code>def get_list_of_permutations(input_string):
  list_out = []
  if len(input_string) &gt; 1:
    first_char = input_string[0]
    remaining_string = input_string[1:]
    remaining_string_permutations = get_list_of_permutations(remaining_string)
    for i in range(len(remaining_string)+1):
      for permutation in remaining_string_permutations:
        list_out.append(permutation[0:i]+first_char+permutation[i:])
  else:
    return [input_string]
  return list_out

def groupAnagrams(strs):
  allResults=[]
  for s in strs:  
    results = []
    list_of_permutations = get_list_of_permutations(s)
    for i in range(0,len(strs)):
      if strs[i] in list_of_permutations:
        results.append(strs[i])
    if results not in allResults:
      allResults.append(results)     
  return allResults 
</code></pre>
<p>The output is</p>
<pre><code>Out[218]: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]
</code></pre>
<p><strong>Edit:</strong> modified the code to work with all lengths of strings.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.permutations</a> </p>
<pre><code>from itertools import permutations

word_list = ["eat", "tea", "tan", "ate", "nat", "bat"]
anagram_group_list = []

for word in word_list:

    if word == None:
        pass
    else:
        anagram_group_list.append([])

        for anagram in permutations(word):
            anagram = ''.join(anagram)

            try:
                idx = word_list.index(anagram)
                word_list[idx] = None 

                anagram_group_list[-1].append(anagram)

            except ValueError:
                pass # this anagram is not present in word_list

print(anagram_group_list)
# [['eat', 'ate', 'tea'], ['tan', 'nat'], ['bat']]
</code></pre>
<p>after refactoring code and stopping it from producing redundant result  your code still doesn't give expected result as logic for producing anagram is not completely correct</p>
<pre><code>def groupAnagrams(word_list):
    allResults=[]
    results=[]

    for idx,s in enumerate(word_list):
        if s == None:
            pass
        else:
            results = [s] # word s is added to anagram list

            # you were generating only 1 anagram like for tan --&gt; ant but in word_list only nat was present
            for i in range(1,len(s),1):
                temp = s[i:]+s[:i] #anagram 
                    # for s = 'tan' it generates only 'ant and 'nta'
                    # when it should generate all six tna ant nta _nat_ atn tan

                if temp in word_list:
                  results.append(temp)
                  word_list[word_list.index(temp)] = None

            allResults.append(results) 

    return allResults

print(groupAnagrams(["eat", "tea", "tan", "ate", "nat", "bat"]))
# [['eat', 'ate', 'tea'], ['tan'], ['nat'], ['bat']]
</code></pre>
</div>
<span class="comment-copy">Hints: What is the value of <code>results</code> when you enter the second iteration of the loop? What is the value of <code>allResults</code> on each iteration? (Print them and look.)</span>
<span class="comment-copy">@molbdnilo Do you mean right before <code>if temp...</code>?</span>
<span class="comment-copy">Print them after appending to <code>allResults</code>.</span>
<span class="comment-copy">@molbdnilo Understood, I know the trouble is appending at wrong loop, but as Python has no  <code>{}</code> for blocks and uses indentation instead, it is confusing me. Am I getting it correctly?</span>
<span class="comment-copy">@molbdnilo The duplication in appending has been fixed, yet, it does not detect the other two sets of anagrams. How to solve this?</span>
<span class="comment-copy">very nice, but can you modify my own code? I would like to know where in my code is wrong in order to improve my understanding from python as a new comer.</span>
<span class="comment-copy">Using <code>set</code> to find the anagrams won't work if you have duplicate letters in some words. Your code would consider 'hat' and 'that' to be anagrams.</span>
<span class="comment-copy">Indeed, this code is not incorrect</span>
<span class="comment-copy">@ThierryLathuille thank you fixed by use sorted</span>
<span class="comment-copy">@ReblochonMasque the main trouble was using set i fixed, thank you</span>
<span class="comment-copy">Could you please explain your code? Specially the second line.</span>
<span class="comment-copy">I added some explanations that, together with reading the code will help you understand how the code works.</span>
<span class="comment-copy">How to fix it then?</span>
<span class="comment-copy">please format your code and indentation properly</span>
<span class="comment-copy">The problem with your code is that is only effective to terms with length of 3.</span>
<span class="comment-copy">Can you please format your code? indentations are not proper and it is not easy to run your code.</span>
<span class="comment-copy">Should be fixed now. Apologies.</span>
