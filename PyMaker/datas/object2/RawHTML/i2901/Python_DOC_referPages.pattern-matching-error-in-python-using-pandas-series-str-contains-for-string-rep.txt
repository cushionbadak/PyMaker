<div class="post-text" itemprop="text">
<p>I am attempting to replace a string within a pandas dataframe, with a string pulled from a dictionary which contains multiple sets of parentheses. When running the script, I get an error for match groups, and the string is not replaced. I'm fairly confident that this error is caused by the parentheses.</p>
<p>To resolve, I have been attempting to use regular expression pattern matching using the str.contains() method. I have reviewed other solutions provided on stackoverflow, but haven't been successful in resolving my error. </p>
<p>Here is some script I am using for testing purposes. It's important that the parentheses are maintained in the strings (i.e. I don't to have to remove them):</p>
<pre><code>import pandas as pd
import numpy as np

dict= {'2017() (pat)':'2000',
       '2018() (pat)':'2001'}

df = pd.DataFrame({'YEAR': ['test2017end','test2018end','test2019end'],
                   'MONTH': ['Jan','Feb','Mar'],
                   'DD': ['1','12','22']})

for init, repl in dict.items():
    df.loc[df['YEAR'].str.contains(init),'YEAR'] = repl

print(df)
</code></pre>
<p>Can someone please provide guidance on using pattern matching so that the strings are properly replaced? </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Dont use variable <code>dict</code>, because python code keyword.</p>
<p>Solution is extract first integer in key of dictionary:</p>
<pre><code>import re

d= {'2017() (pat)':'2000',
       '2018() (pat)':'2001'}

df = pd.DataFrame({'YEAR': ['test2017end','test2018end','test2019end'],
                   'MONTH': ['Jan','Feb','Mar'],
                   'DD': ['1','12','22']})

for init, repl in d.items():
    i = re.findall('\d+', init)[0]
    df.loc[df['YEAR'].str.contains(i),'YEAR'] = repl

print(df)
          YEAR MONTH  DD
0         2000   Jan   1
1         2001   Feb  12
2  test2019end   Mar  22
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried methods that doesnâ€™t involve looping? Something in this direction:</p>
<pre><code>import re
import pandas as pd

dict_= {'2017() (pat)':'2000',
       '2018() (pat)':'2001'}

df = pd.DataFrame({'YEAR': ['test2017end','test2018end','test2019end'],
                   'MONTH': ['Jan','Feb','Mar'],
                   'DD': ['1','12','22']})

pat = r'(\d{4,4})'

dict_b = {re.search(pat, key).group(1):item for key, item in dict_.items()}

# Return NaN for no match
df['YEARX'] = df['YEAR'].str.extract(pat,expand=False).map(dict_b)

# Return found year for no match
df['YEARY'] = df['YEAR'].str.extract(pat,
                  expand=False).apply(lambda x: dict_b[x] if x in dict_b.keys() else x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you for the quick responses. My code was a little more complicated than I posted, and I was actually matching characters rather than numbers. I modified jerzael's response for this and the script functions correctly. Here is my test script I used:</p>
<pre><code>import pandas as pd
import numpy as np
import re

dct= {'love (one)()':'john',
       'smith (two)()':'doe',
       'ken (three)()':'yearns'}

df = pd.DataFrame({'MAN': ['test|smith (two)()end','test|love (one)()end','test|ken (three)()end'],
                   'MONTH': ['Jan','Feb','Mar'],
                   'DD': ['1','12','22']})

for init, repl in dct.items():
    i = re.findall(r'\w+', init)[0]
    df.loc[df['MAN'].str.contains(i),'MAN'] = repl

print(df)
</code></pre>
<p>For the beginners like me, the regular expression how to documentation is a must (<a href="https://docs.python.org/3/howto/regex.html#regex-howto" rel="nofollow noreferrer">https://docs.python.org/3/howto/regex.html#regex-howto</a>)</p>
<p>Cheers</p>
</div>
<span class="comment-copy">Don't name dictionaries <code>dict</code></span>
