<div class="post-text" itemprop="text">
<p>I am trying to create a series of types using <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type(name, bases, attributes)</code></a> without explicitly assigning those types to variables, and then make them available for import from other classes.</p>
<p>What I have so far is something like this</p>
<pre><code>src/
  __init__.py
  a/
    __init__.py
    a_module.py
  b/
    __init__.py
    b_module.py
</code></pre>
<p>In <code>src/a/__init__.py</code> I have</p>
<pre><code>import inspect
import sys

for c in inspect.getmembers(sys.modules['src.a.a_module'], inspect.isclass):
    type(f'{c.__name__}New, (object,), {})
</code></pre>
<p>Then I would like to import the type defined above in <code>src/b/b_module.py</code> like</p>
<pre><code>from src.a import AClassNew

a = AClassNew()
</code></pre>
<p>but this of course gives an <code>ImportError: cannot import name</code>AClassNew`.</p>
<p>I realize I can put</p>
<pre><code>AClassNew = type('AClassNew', (object,), {})
</code></pre>
<p>in <code>src/a/__init__.py</code> and everything will work, but I'd like to do this for any classes defined in <code>src/a/a_module.py</code> without defining them explicitly.</p>
<p>Is there a way to get this (or something similar) to work?</p>
</div>
<div class="post-text" itemprop="text">
<p>I got this working by just updating <code>globals()</code> in <code>src/a/__init__.py</code>.</p>
<pre><code>for c in inspect.getmembers(sys.modules['src.a.a_module'], inspect.isclass):
    new_class_name = f'{c.__name__}New'
    new_class = type(new_class_name, (object,), {})
    globals[new_class_name] = new_class
</code></pre>
<p>This adds the type with the correct name to the classes of this module and makes it available for import from other modules.</p>
</div>
