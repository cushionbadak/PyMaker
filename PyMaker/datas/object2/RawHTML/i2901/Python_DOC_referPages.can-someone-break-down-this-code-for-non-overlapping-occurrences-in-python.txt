<div class="post-text" itemprop="text">
<p>Suppose count doesn't exist.</p>
<pre><code>string = 'let it be let it'
substring = 'let it'
count = 0
sub_len = len(substring) 
for i in range(len(string)): 
    if string[i:i+sub_len] == substring:
        count += 1
print(count)
&gt;&gt;&gt; 2
</code></pre>
<p>What's confusing me exactly is this part</p>
<pre><code>for i in range(len(string)):
    if string[i:i+sub_len] == substring:
        count += 1
</code></pre>
<p>And more specifically </p>
<pre><code>    if string[i:i+sub_len] == substring:
</code></pre>
<p>I don't get how this adds to the count?</p>
<p>Could someone explain this to me, especially the part in the brackets.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a feature called <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow noreferrer"><strong>slicing</strong></a> which allow you to extract a substring from a string by specifying the start and end indicies (where the start is included and the end is excluded).</p>
<p>The syntax for this is:</p>
<pre><code>some_string[start:stop:step]
</code></pre>
<p>where all are optional.</p>
<p>So some examples from the documentation (linked above):</p>
<pre><code>&gt;&gt;&gt; word = 'Python'
&gt;&gt;&gt; word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
&gt;&gt;&gt; word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'
&gt;&gt;&gt; word[:2]   # character from the beginning to position 2 (excluded)
'Py'
&gt;&gt;&gt; word[4:]   # characters from position 4 (included) to the end
'on'
&gt;&gt;&gt; word[-2:]  # characters from the second-last (included) to the end
'on'
</code></pre>
<p>and to give one with the <code>step</code> included:</p>
<pre><code>&gt;&gt;&gt; word[::2]
'Pto'
</code></pre>
<hr/>
<p>So, to explain your code, a for-loop is used to iterate over the start indexes of the slice. Of course, these indexes range from <code>0</code> (the default to the <code>range()</code> function) to the length of the whole string.</p>
<p>In your case, since the length of <code>string</code> is <code>16</code>, the variable <code>i</code> will take the values: <code>0</code>, <code>1</code>, <code>2</code> ... <code>14</code>, <code>15</code>.</p>
<p>Then, you take the slice from the string that starts at the index <code>i</code> and ends at the index <code>i</code> + <code>sub_len</code>. Since <code>sub_len</code> is the length of the substring, this will take slices from <code>string</code> that are the same size (length) as the substring.</p>
<p>For example, the first ones are:</p>
<pre><code>'let it'
'et it '
't it b'
...
'let it'
</code></pre>
<p>Now, the equivalence comparator (<code>==</code>) is used to check whether this substring is equal to the desired substring - if it is, the count variable is incremented. </p>
</div>
<span class="comment-copy">Do you understand Python slice notation?</span>
