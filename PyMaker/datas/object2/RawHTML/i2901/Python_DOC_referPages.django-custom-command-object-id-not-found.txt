<div class="post-text" itemprop="text">
<p>SOLVED:</p>
<p>The try - catch was finding something at a later step in the process</p>
<p>I moved these steps outside of the try - catch and resolved those issues</p>
<hr/>
<p>I'm trying to build a custom Django command which can be run against individual model objects</p>
<p>When I check in shell I see the object fine</p>
<pre><code>&gt;&gt;&gt; Obj.objects.get(id=1)
&lt;Obj: the object I'm looking for&gt;
</code></pre>
<p>My custom command however looks like the below:</p>
<pre><code># app/management/update.py
class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument('--id')

    def handle(self, *args, **options):
        if options['id']:
            try:
                obj = Obj.objects.get(id=options['id'])
                # do things
            except:
                raise CommandError('no object with ID: "%s"' % options['id'])
        else:
            # do other things
</code></pre>
<p>Running this I get the error message</p>
<pre><code>&gt;&gt;&gt; python manage.py update --id 1
CommandError: no object with ID: "1"
</code></pre>
<p>Any help appreciated.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Id should be an integer, not a string. </p>
<pre><code>parser.add_argument('--id', type=int)
</code></pre>
<blockquote>
<p>By default, <code>ArgumentParser</code> objects read command-line arguments in as
  simple strings. However, quite often the command-line string should
  instead be interpreted as another type, like a <code>float</code> or <code>int</code>. The <code>type</code>
  keyword argument of <code>add_argument()</code> allows any necessary type-checking
  and type conversions to be performed.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#type</a></p>
</div>
<span class="comment-copy">In example your have <code>ID=1</code> but in command <code>ID=2</code>?</span>
<span class="comment-copy">Log the exact Exception. With your bare <code>except</code> (never do that!), you obscure what actually happens and just assume what might be the reason.</span>
<span class="comment-copy">It won't matter in the query whether you use <code>1</code> or <code>'1'</code>. Django querysets are robust that way.</span>
