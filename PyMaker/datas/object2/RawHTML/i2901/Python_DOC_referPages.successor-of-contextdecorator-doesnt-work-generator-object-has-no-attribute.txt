<div class="post-text" itemprop="text">
<p>I have a problem with inheriting from the <code>ContextDecorator</code> class. I can't understand why the method <code>session_manager()</code> works:</p>
<pre><code>@contextmanager
def session_manager():
    session = Session()
    yield session
    try:
    session.commit()
except Exception as e:
    session.rollback()
    raise e
finally:
    session.close()
</code></pre>
<p>But exactly the same code with <code>ContextDecorator</code> successor class gives an error:</p>
<pre><code>class SessionManager(ContextDecorator):
    def __init__(self):
        self.session = Session()

    def __enter__(self):
        try:
            yield self.session
            self.session.commit()
        except Exception as e:
            self.session.rollback()
            raise e

    def __exit__(self, *exc):
        self.session.close()
</code></pre>
<hr/>
<p>Exception:</p>
<pre><code>AttributeError: 'generator' object has no attribute 'add'
</code></pre>
<p>The documentation and tutorials do not have complex examples (only with 'print' statements) and they works great: <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/contextlib.html</a></p>
<p>I don't understand why method <code>session_manager()</code> works, although it returns a generator:</p>
<pre><code>yield session
</code></pre>
<p>Here I write some small and simple code:
<a href="https://gist.github.com/tranebaer/46f94263030dd8f7c1bfcf72d0e37610" rel="nofollow noreferrer">https://gist.github.com/tranebaer/46f94263030dd8f7c1bfcf72d0e37610</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/reference/datamodel.html#object.__enter__" rel="nofollow noreferrer"><code>__enter__</code></a> method is not supposed to be a generator, unless you want to treat the return value as such in the runtime context. It is called when entering the block governed by the with-statement and its return value is bound to the target(s) specified in the <a href="https://docs.python.org/3/reference/compound_stmts.html#as" rel="nofollow noreferrer"><code>as</code></a> clause, if any. So the attribute error is the result of calling the method <code>add()</code> on the generator inside the block, when you meant it to be the <code>Session</code> object. Possible cleanup and exception handling should take place in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__exit__" rel="nofollow noreferrer"><code>__exit__</code></a> method:</p>
<pre><code>from contextlib import closing, ContextDecorator, ExitStack

class SessionManager(ContextDecorator):

    def __init__(self, session_cls=Session):
        self.session = session_cls()

    def __enter__(self):
        return self.session

    def __exit__(self, type, value, tb):
        with closing(self.session), ExitStack() as stack:
            stack.callback(self.session.rollback)
            if not value:
                self.session.commit()
                # If commit raises an exception, then rollback is left
                # in the exit stack.
                stack.pop_all()
</code></pre>
<p>Note that you don't need to inherit from <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator" rel="nofollow noreferrer"><code>ContextDecorator</code></a> in order to make a context manager. Just implementing <code>__enter__</code> and <code>__exit__</code> is enough. In fact in this case it is a bit pointless, because a function decorated with <code>SessionManager</code> <a href="https://docs.python.org/3/library/contextlib.html#using-a-context-manager-as-a-function-decorator" rel="nofollow noreferrer">has no access to the <code>Session</code> object</a>.</p>
</div>
