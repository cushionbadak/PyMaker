<div class="post-text" itemprop="text">
<p>Please look at this piece of code :</p>
<pre><code>sig_array=[]
...
for i in range (0, 2):
        ....
        temp=[]
        for k in range (0, len (sig)):
            #print (k)
            temp.append(downsample(sig[k],sampl, new_freq))
        sig_array.append(temp)
</code></pre>
<p>In other words, <code>temp</code>is a list of arrays (my <code>downsample</code>function, as its name may suggest, return an array) and then the <code>temp</code> will be agregated so it would be a list of lists of arrays !</p>
<p>My questions are : How to deal with that (indexing, ...) and is there simplest way to proceed, by generating list of arrays in a loop but how to keep it in a data structure ?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding indexing, you'd just refer to elements like <code>sig_array[0]</code>, <code>sig_array[1][2]</code> or <code>sig_array[3][0][2]</code> etc. </p>
<p>Regarding any better data structures, it really just depends on your use case. As @smagnan says in the comments, are you using it for easily accessing data? Matrix processing? If so, have a look at <code>numpy ndarrays</code>. <strong>You say that you need it for big data on time series analysis. In that case, using the <code>pandas</code> module will be quite helpful (<a href="https://www.datacamp.com/community/tutorials/time-series-analysis-tutorial" rel="nofollow noreferrer">more info</a>).</strong></p>
<p>Also, as @Bazingaa says, you can make your code less verbose by using <code>list</code> comprehensions (<a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">more info</a>):</p>
<pre><code>sig_array = [ [downsample(sig[i],sampl, new_freq) for i in range (len(sig))] for _ in range(2)]
</code></pre>
<p>With <code>list</code> comprehensions, it's best to start from the outside, and from the end. The <code>for _ in range(2)</code> will run twice (I've replaced your <code>i</code> with <code>_</code> as I couldn't see you using it anywhere. If you need it, replace <code>_</code> with a relevant variable name). In each iteration, it'll <code>append</code> the inner list comprehension to the <code>sig_array</code>. Inside the inner listcomp, the result of the <code>downsample()</code> function will be appended to the temporary <code>list</code> for each iteration of the <code>for</code> loop,</p>
<p>This will have exactly the same output as your code, but is clearly <em>way</em> shorter :)</p>
</div>
<span class="comment-copy">What's the use of <code>i</code> here?</span>
<span class="comment-copy">what do you need to use that for exactly? easy data access? Matrix processing? Maybe have a look at numpy ndarrays and such</span>
<span class="comment-copy">@Bazingaa. Actually, I did not put all the code to focus on my issue but roughly, keep in mind that different values of <code>i</code> give different <code>sig</code> (not necessary of same length from one<code>i</code>to another. Hope it's clear</span>
<span class="comment-copy">Have you tried considering list comprehension? It will make your code less verbose</span>
<span class="comment-copy">What about using <code>extend</code> instead of <code>append</code> to remove the list of list problem? Something like <code>temp.extend(....)</code></span>
<span class="comment-copy">I have explained my "reasons" in comments above, could you look at it ?</span>
<span class="comment-copy">@Adi219: It would be helpful to the OP if you also explain to him <i>briefly</i> what's going on inside the list, especially the <code>_</code> which replaced <code>i</code>. I asked him about <code>i</code>. May be he needs some operation which depends on <code>i</code>. So better to explain. Also just replace <code>range (0, len (sig))</code> by <code>range(len (sig))</code></span>
<span class="comment-copy">@Bazingaa Thanks for your care. Also, taking into account my "needs" as mentioned below, would you have a data structure to advise me ?</span>
<span class="comment-copy">@MysteryGuy I've edited it to cater for your 'needs'.</span>
<span class="comment-copy">@Bazingaa Good idea, I'll edit it now :)</span>
