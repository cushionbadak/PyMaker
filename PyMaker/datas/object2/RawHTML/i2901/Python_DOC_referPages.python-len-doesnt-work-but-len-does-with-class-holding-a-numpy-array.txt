<div class="post-text" itemprop="text">
<p>Here is my minimal working example:</p>
<pre><code>class One:
    def __init__(self, arr):
        self.arr = arr

    def __len__(self):
        return np.array([len(self.arr)]).astype(np.int8)

    def size():
        return self.__len__()



class Two(One):
    def __init__(self, arr):
        super().__init__(arr)

# Create an instance of the second class
a = Two(np.array([0.4, 0.6]))
# I can call a.size()
print("a.size(): ", a.size())
# I can call a.__len__()
print("a.__len__(): ", a.__len__())
# I cannot call len(a)
print("len(a): ", len(a))
</code></pre>
<p>So basically I have class <code>One</code> that has a constructor <code>__init__</code> , a method <code>__len__</code> that should implement <code>len(One)</code> and finally another method called <code>size</code> that simply calls the <code>__len__</code> method.</p>
<p>As you can see, I can easily call <code>a.__len__()</code> and <code>a.size()</code> but I can't call <code>len(a)</code>, because I get:</p>
<pre><code>TypeError: only integer scalar arrays can be converted to a scalar index
</code></pre>
<p>I tried debugging and everything goes fine till the end, except that I just get an error..</p>
</div>
<div class="post-text" itemprop="text">
<p>As written in comments, you will find <a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow noreferrer">here</a> that:  </p>
<blockquote>
<p><code>__len__()</code> should return the length of the object, an integer &gt;= 0.</p>
</blockquote>
<p>It is not clear what you expect to be returned by <code>len()</code>, but this code works well for example:  </p>
<pre><code>class One:
    def __init__(self, arr):
        self.arr = arr

    def __len__(self):
        return len(self.arr)

    def size(self):
        return self.__len__()
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow noreferrer"><code>__len__()</code> should return a single integer</a>. what are you trying to achieve?</span>
<span class="comment-copy">Well if you want to have a look, I am working on this project on GitHub (<a href="https://github.com/MauroCE/PythonBRMLtoolbox/tree/master" rel="nofollow noreferrer">github.com/MauroCE/PythonBRMLtoolbox/tree/master</a>). Basically, I want to implement a Probability Table class. This class holds a numpy array as an attribute. All I want to do, is that if you instantiate the class <code>Array</code> as a = Array([1, 2], np.array([[0.4, 0.6],[0.3, 0.7]]))` then by calling <code>len(a)</code> you'll get the shape of <code>np.array([[0.4, 0.6],[0.3, 0.7]])</code></span>
<span class="comment-copy">Why don't you implement a <code>.shape</code> property then?</span>
<span class="comment-copy">You cannot do that. <code>len</code> enforces that it returns an <code>int</code>. If it does not return an <code>int</code>, then the interpreter calls the <code>__index__</code> method of the object (if one exists). The error you see is because numpy array <code>__index__</code> method refuses to convert a 1-element array to an integer.</span>
<span class="comment-copy">Basically I want to return <code>arr.shape</code>. But instead of returning a tuple, I want to return a numpy array</span>
<span class="comment-copy">If you want an array shape, implement your own method. Don't abuse (and violate) the <code>__len__</code> protocol.</span>
<span class="comment-copy">You can <b>not</b> use <code>len()</code> to return anything different from a positive integer. Nothing more to say...</span>
<span class="comment-copy">Makes sense, although this means I'll have to re-factor some of my code..</span>
