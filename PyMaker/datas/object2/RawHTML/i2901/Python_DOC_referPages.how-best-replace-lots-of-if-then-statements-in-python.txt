<div class="post-text" itemprop="text">
<p>I've a set of criteria that could be written as along and convoluted nest of <code>if statements</code> but I think there must be a better way.</p>
<p>Say I have the following data and I want to return the values given if the conditions are met.  How would I do this without writing <code>if then</code> statements? Or is <code>if then</code> the best approach?</p>
<pre><code>{event_type: type1, outcome: outcome1 } return red
{event_type: type1, outcome: outcome2 } return yellow
{event_type: type1, outcome: outcome3 } return blue
{event_type: type2, outcome: outcome1 } return yellow
{event_type: type2, outcome: outcome2 } return red
{event_type: type2, outcome: outcome4 } return blue
{event_type: type3, outcome: outcome5 } return yellow
{event_type: type3, outcome: outcome2 } return red
{event_type: type2, outcome: outcome1 } return blue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dict to get similar functionality to a switch statement. I believe this is what you are looking for</p>
<pre><code>def foo(event_type, outcome):
    return {
        "type1": {
            "outcome1": "red",
            "outcome2": "yellow",
        },
        "type2": {
            "outcome1": "blue",
            "outcome2": "orange",
        },
    }.get(event_type, {}).get(outcome, None)

foo("type1", "outcome1") #'red'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As suggested above, the best way is to use a dictionary. Here is one example, where the first number corresponds to event type and the second one to outcome number:</p>
<pre><code>color_event_dict = {
    (1, 1): 'red',
    (1, 2): 'yellow',
    (1, 3): 'blue',
    (2, 1): 'yellow',
    (2, 2): 'red',
    (2, 3): 'blue',
    (3, 1): 'yellow',
    (3, 2): 'red',
    (3, 3): 'blue',
}
</code></pre>
<p>One example of usage would be:</p>
<pre><code>color_event_dict[(3,1)]
#&gt; 'yellow'
</code></pre>
<p>Instead of integers and strings you can put objects in both sides of the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you to use a dictionary gathering all the possible color values depending on type/outcome keys, as follows:  </p>
<pre><code>result = {'type1' : {'outcome1': 'red', 'outcome2': 'yellow', 'outcome3': 'blue'},
          'type2' : {'outcome1': 'yellow', 'outcome2': 'red', 'outcome4': 'blue'},
          'type3' : {'outcome5': 'yellow', 'outcome2': 'red', 'outcome1': 'blue'}}

event_type ='type2'
outcome    = 'outcome4'
print(result[event_type][outcome])  # blue
</code></pre>
</div>
<span class="comment-copy">How about Dictionary? <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#dictionaries</a></span>
<span class="comment-copy">Do you mean <code>switch</code> statement ?</span>
<span class="comment-copy">If there is some relation of variables to output - maybe you can group it in some way. If not possible consider some dictionary approach - large dictionary for mapping variables to expected value.</span>
<span class="comment-copy">Could you please add some code sample which will show what you mean? From the question and the pseudo-code I do not understand your question.</span>
<span class="comment-copy">Please construct a better example; you have <code>type2/outcome1</code> twice with different return values.</span>
