<div class="post-text" itemprop="text">
<p>I'm looking for an efficient way to extract from an array in Python only significant values, for instance, only those 10 times bigger than the rest. The logic (no code) using a very simple case is something like that:</p>
<pre><code>array =  [5000, 400, 40, 10, 1, 35] # here the significant value will be 5000. 

from i=0 to len.array # to run the procedure in all the array components

    delta = array[i] / array [i+1] # to confirm that array[i] is significant or not. 

    if delta &gt;= 10 : # assuming a rule of 10X significance i.e significance = 10 times bigger than the rest of elements in the array.

    new_array = array[i] # Insert to new_array the significant value

    elif delta &lt;= 0.1 : # in this case the second element is the significant.

    new_array = array[i+1] # Insert to new_array the significant value
</code></pre>
<p>at the end new_array will be composed by the significant values, in this case new_array =[5000], but must apply to any kind of array.</p>
<p>Thanks for your help!</p>
<p><strong>UPDATE!!!</strong></p>
<p>Thanks to all for your answers!!! in particular to Copperfield who gave me a good idea about how to do it. Here is the code that's working for the purpose!</p>
<pre><code>array_o = [5000,4500,400, 4, 1, 30, 2000]

array = sorted(array_o)

new_array = []

max_array = max(array)

new_array.append(max_array)

array.remove(max_array)

    for i in range(0,len(array)):
         delta = max_array / array[i]
         if delta &lt;= 10:
              new_array.append(array[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does this answer your question?</p>
<pre><code>maxNum = max(array)
array.remove(maxNum)
SecMaxNum = max(array)

if maxNum / SecMaxNum &gt;= 10 :
    # take action accordingly 
else:
    # take action accordingly 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your pseudo code can be translate to this function</p>
<pre><code>def function(array):
    new_array = []
    for i in range(1,len(array)):
        delta = array[i-1] / array[i]
        if delta &gt;= 10:
            new_array.append( array[i-1] )
        elif delta &lt;= 0.1:
            new_array.append(  array[i] )
    return new_array
</code></pre>
<p>this give this result</p>
<pre><code>&gt;&gt;&gt; function([5000, 400, 40, 10, 1, 35])
[5000, 400, 10, 35]
&gt;&gt;&gt; 
</code></pre>
<p>Now, what you describe can be done like this in python 3.5+</p>
<pre><code>*rest, secondMax, maxNum = sorted(array)
if maxNum / secondMax &gt;= 10:
    # take action accordingly 
else:
    # take action accordingly 
</code></pre>
<p>or in previous versions</p>
<pre><code>sortedArray = sorted(array)
if sortedArray[-1] / sortedArray[-2] &gt;= 10:
    # take action accordingly 
else:
    # take action accordingly     
</code></pre>
<p>(the negative index access the element from last to first, so -1 is the last one, -2 the second last, etc )</p>
</div>
<div class="post-text" itemprop="text">
<p>I would not adopt the approach of only comparing each value to the one next to it.  If the array is unsorted then obviously that's a disaster, but even if it is sorted:</p>
<pre><code>a = [531441, 59049, 6561, 729, 81, 9, 9, 8, 6, 6, 5, 4, 4, 4, 3, 3, 1, 1, 1, 1]
</code></pre>
<p>In that example, the "rest" (i.e. majority) of the values are &lt;10, but I've managed to get up into the 6-digit range very quickly with each number <em>only</em> being 9 times the one next to it (so, your rule would not be triggered).</p>
<p>One approach to outlier detection is to subtract the median from your distribution and divide by a non-parametric statistic that reflects the spread of the distribution (below, I've chosen a denominator that would be equivalent to the standard deviation if the numbers were normally distributed).  That gives you an "atypicality" score on a standardized scale. Find the large values, and you have found your outliers (any score larger than, say, 3â€”but you may need to play around a bit to find the cutoff that works nicely for your problem).</p>
<pre><code>  import numpy
  npstd = numpy.diff(numpy.percentile(a, [16, 84]))/2.0   # non-parametric "standard deviation" equivalent
  score = (a - numpy.median(a)) / npstd
  outlier_locations, = numpy.where(score &gt; 3)  # 3, 4 or 5 might work well as cut-offs
</code></pre>
</div>
<span class="comment-copy">Does it mean that <code>new_array</code> will always contain only one value? because in your case <code>400</code> should also be added to <code>new_array</code> (from what I understand).</span>
<span class="comment-copy">Initialize <code>new_array</code> as a blank array first and then <code>append()</code> any new item that satisfies the <code>delta</code> you are looking for.</span>
<span class="comment-copy">what would you extract from <code>[5001, 5000, 400, 40, 10, 1, 35]</code>?</span>
<span class="comment-copy">so you want to extract the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">maximum</a> element as long as it is 10x bigger than the second biggest element?, well, <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a> it and check the last 2 elements</span>
<span class="comment-copy">look to me that the problem here is that you don't have a clear idea of what you want, because your pseudo code say something while you describe something different</span>
<span class="comment-copy">Something like that, but the thing is that this must apply for all kind of arrays, for that reason I tough that working with indexes will be much better. In your example, what could happen If there are 5 significant values? Thanks for your help!</span>
<span class="comment-copy">I this case I would go for sorting the list (or array) <code>arr.sort(reverse=True)</code> then I will specify a sub-list of interest by comparing the elements to the first element for further analyses.</span>
