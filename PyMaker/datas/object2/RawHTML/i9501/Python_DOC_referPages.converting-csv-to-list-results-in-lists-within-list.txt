<div class="post-text" itemprop="text">
<p>I'm trying to convert the following Unicode string to a list  [I threw two spaces in to make it fit...]:</p>
<p><code>"58478000","","NEW","2016-12-28T14:34:18","C","","","N","N","ON","2017-03-15","2022-03-15","30/360","EUR","IR","","InterestRate:IRSwap:FixedFloat","Trade","EUR-EURIBOR-Reuters","FIXED","Percent","-0.003","","","EUR","EUR","25,000,000","25,000,000","3M","1Y","3M","","","","","","","","","","","","",""</code></p>
<p>I use the following code to convert the string above, <code>abc</code>, to a list:</p>
<pre><code>csv.reader(abc, delimiter=',')
details = list(csvreader)
</code></pre>
<p>This results in this though, and I can't seem to drop the <code>['','']</code> easily...</p>
<p><code>[['58478000'], ['', ''], [''], ['', ''], ['NEW'], ['', ''],['2016-12-28T14:34:18'], ['', ''], ['C'], ['', ''], [''], ['', ''],[''], ['', ''], ['N'], ['', ''], ['N'], ['', ''], ['ON'], ['', ''],['2017-03-15'], ['', ''], ['2022-03-15'], ['', ''], [' 30/360'], ['',''], ['EUR'], ['', ''], ['IR'], ['', ''], [''], ['', ''],['InterestRate:IRSwap:FixedFloat'], ['', ''], ['Trade'], ['', ''],['EUR-EURIBOR-Reuters'], ['', ''], ['FIXED'], ['', ''], ['Percent'],['', ''], ['-0.003'], ['', ''], [''], ['', ''], [''], ['', ''],['EUR'], ['', ''], ['EUR'], ['', ''], ['25,000,000'], ['', ''],['25,000,000'], ['', ''], ['3M'], ['', ''], ['1Y'], ['', ''], ['3M'],['', ''], [''], ['', ''], [''], ['', ''], [''], ['', ''], [''], ['',''], [''], ['', ''], [''], ['', ''], [''], ['', ''], [''], ['', ''],[''], ['', ''], [''], ['', ''], [''], ['', ''], [''], ['', ''], ['']]</code></p>
<p>My goal is to put this into some sort of list, or any other collection, that makes it easier to extract the information out of that...</p>
</div>
<div class="post-text" itemprop="text">
<p>You were close. There's something about string support in the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>And while the module doesn’t directly support parsing strings, it can easily be done:</p>
</blockquote>
<pre><code>import csv
for row in csv.reader(['one,two,three']):
    print(row)
</code></pre>
<p>Note the <code>[]</code> around the string. Without those braces, <code>csv</code> module seems to returns 1 row per element, but that seem undocumented.</p>
<p>Since I didn't know about the part above from the documentation at first, my first "pragmatic" approach was to take the element inside the row using a list comprehension:</p>
<pre><code>import csv

abc = '"58478000","","NEW","2016-12-28T14:34:18","C","","","N","N","ON","2017-03-15","2022-03-15","30/360","EUR","IR","","InterestRate:IRSwap:FixedFloat","Trade","EUR-EURIBOR-Reuters","FIXED","Percent","-0.003","","","EUR","EUR","25,000,000","25,000,000","3M","1Y","3M","","","","","","","","","","","","",""'

csvreader=csv.reader(abc, delimiter=',')
details = [x[0] for x in csvreader]
print(details)
</code></pre>
<p>yields:</p>
<pre><code>['58478000', '', '', '', 'NEW', '', '2016-12-28T14:34:18', '', 'C', '', '', '', '', '', 'N', '', 'N', '', 'ON', '', '2017-03-15', '', '2022-03-15', '', '30/360', '', 'EUR', '', 'IR', '', '', '', 'InterestRate:IRSwap:FixedFloat', '', 'Trade', '', 'EUR-EURIBOR-Reuters', '', 'FIXED', '', 'Percent', '', '-0.003', '', '', '', '', '', 'EUR', '', 'EUR', '', '25,000,000', '', '25,000,000', '', '3M', '', '1Y', '', '3M', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
</code></pre>
<p>With this approach, we <em>have</em> to get rid of the empty strings (that's just a workaround), if we need them intact, we're stuck BTW:</p>
<pre><code>details = [x[0] for x in csvreader if x[0]]
</code></pre>
<p>result:</p>
<pre><code>['58478000', 'NEW', '2016-12-28T14:34:18', 'C', 'N', 'N', 'ON', '2017-03-15', '2022-03-15', '30/360', 'EUR', 'IR', 'InterestRate:IRSwap:FixedFloat', 'Trade', 'EUR-EURIBOR-Reuters', 'FIXED', 'Percent', '-0.003', 'EUR', 'EUR', '25,000,000', '25,000,000', '3M', '1Y', '3M']
</code></pre>
<p>But after having read the documentation, the correct way to do this would be:</p>
<pre><code>import csv

abc = '"58478000","","NEW","2016-12-28T14:34:18","C","","","N","N","ON","2017-03-15","2022-03-15","30/360","EUR","IR","","InterestRate:IRSwap:FixedFloat","Trade","EUR-EURIBOR-Reuters","FIXED","Percent","-0.003","","","EUR","EUR","25,000,000","25,000,000","3M","1Y","3M","","","","","","","","","","","","",""'

csvreader=csv.reader([abc], delimiter=',') # pass a list of 1 element
details = list(csvreader)[0]
print(details)
</code></pre>
<p>result (note that the number of empty strings are respected now):</p>
<pre><code>['58478000', '', 'NEW', '2016-12-28T14:34:18', 'C', '', '', 'N', 'N', 'ON', '2017-03-15', '2022-03-15', '30/360', 'EUR', 'IR', '', 'InterestRate:IRSwap:FixedFloat', 'Trade', 'EUR-EURIBOR-Reuters', 'FIXED', 'Percent', '-0.003', '', '', 'EUR', 'EUR', '25,000,000', '25,000,000', '3M', '1Y', '3M', '', '', '', '', '', '', '', '', '', '', '', '', '']
</code></pre>
<p>If we want to remove the empty string, let's do it with a list comprehension, simpler than the other one:</p>
<pre><code>csvreader=csv.reader([abc], delimiter=',')
details = [x for x in list(csvreader)[0] if x]
print(details)
</code></pre>
<p>result:</p>
<pre><code>['58478000', 'NEW', '2016-12-28T14:34:18', 'C', 'N', 'N', 'ON', '2017-03-15', '2022-03-15', '30/360', 'EUR', 'IR', 'InterestRate:IRSwap:FixedFloat', 'Trade', 'EUR-EURIBOR-Reuters', 'FIXED', 'Percent', '-0.003', 'EUR', 'EUR', '25,000,000', '25,000,000', '3M', '1Y', '3M']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once you have the CSV row, you can simply use</p>
<pre><code>result = abc.split(",") 
</code></pre>
<p>To get the list avoiding the commas as elements (your approach is using quotes as string delimiters, it seems.</p>
<p>Also, using csv library itself, <a href="https://stackoverflow.com/questions/1707558/can-python-remove-double-quotes-from-a-string-when-reading-in-text-file#1707581">this question</a> could help.</p>
<pre><code>&gt;&gt;&gt; import csv

&gt;&gt;&gt; with open(name, 'rb') as f:
...     for row in csv.reader(abc, delimiter=',', skipinitialspace=True):
...             result = row
</code></pre>
<p>And the answer there says the quotes should be treated automatically, while <a href="https://stackoverflow.com/q/15374430/236345">this answer</a> says you get the row as a list!</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you only have one string, you need to put it in an iterable, like a <code>list</code>, so the <code>csv.reader</code> will read it properly.</p>
<pre><code>import csv

abc = (u'"58478000","","NEW","2016-12-28T14:34:18","C","","","N","N","ON",'
       u'"2017-03-15","2022-03-15","30/360","EUR","IR","",'
       u'"InterestRate:IRSwap:FixedFloat","Trade","EUR-EURIBOR-Reuters","FIXED",'
       u'"Percent","-0.003","","","EUR","EUR","25,000,000","25,000,000","3M",'
       u'"1Y","3M","","","","","","","","","","","","",""')

reader = csv.reader([abc], delimiter=',')
details = next(reader)  # read and process single line that is in list [abc]
print(details)
</code></pre>
<p>Output:</p>
<p><code>['58478000', '', 'NEW', '2016-12-28T14:34:18', 'C', '', '', 'N', 'N', 'ON', '2017-03-15', '2022-03-15', '30/360', 'EUR', 'IR', '', 'InterestRate:IRSwap:FixedFloat', 'Trade', 'EUR-EURIBOR-Reuters', 'FIXED', 'Percent', '-0.003', '', '', 'EUR', 'EUR', '25,000,000', '25,000,000', '3M', '1Y', '3M', '', '', '', '', '', '', '', '', '', '', '', '', '']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If the first input is one string, you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; 
&gt;&gt;&gt; s = '"58478000","","NEW","2016-12-28T14:34:18","C","",""'
&gt;&gt;&gt; list(ast.literal_eval(s))
['58478000', '', 'NEW', '2016-12-28T14:34:18', 'C', '', '']
</code></pre>
<p>If you want to flatten your result, you can use:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; my_list = [['58478000'], ['', ''], [''], ['', ''], ['NEW'], ['', ''], ['2016-12-28T14:34:18'], ['', ''], ['C'], ['', ''], ['']]
&gt;&gt;&gt;
&gt;&gt;&gt; list(itertools.chain.from_iterable(my_list))
['58478000', '', '', '', '', '', 'NEW', '', '', '2016-12-28T14:34:18', '', '', 'C', '', '', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried string.split(',') ?    </p>
</div>
<span class="comment-copy">Hi, I'm trying this response right now.  Works great - thanks!</span>
<span class="comment-copy">in regards to your edit - i'm not sure I follow.  Does the original details = [x[0] for x in csvreader if x[0]] not work?  It seemed to for me</span>
<span class="comment-copy">It works dont worry. I m just looking for something more elegant.</span>
<span class="comment-copy">@keynesiancross check my last edit. Seems that we exploited some undocumented feature.</span>
<span class="comment-copy">and what if some elements contain commas? and passing directly <code>abc</code> is undocumented/unsupported.</span>
<span class="comment-copy">@Jean-FrançoisFabre your answer is really good. :)</span>
<span class="comment-copy">thanks. I've worked on it quite a while.</span>
<span class="comment-copy">Hi, when I try this, I get: "58478000" only</span>
<span class="comment-copy">All I can say is I don't (in either Python 2 and 3). Perhaps you left something out of the code that's in my answer. Be sure you have exactly the following line: <code>reader = csv.reader([abc], delimiter=',')</code>. The <code>[abc]</code> part is important.</span>
<span class="comment-copy">you know what, thats it.  the extra [] around the string</span>
