<div class="post-text" itemprop="text">
<p>I'm an absolute pandas/matplotlib beginner and I can't figure out this issue after quite a few searches.</p>
<p>Just learned that in order to format dates (basically space them out), I need to work an additional thing called <code>fig</code> (for figure):</p>
<pre><code>fig, tg = plt.subplots(1)
tg.plot(pandoc['date_time'], pandoc['total_goals'], kind="bar")
tg.fmt_xdata = mdates.DateFormatter('%Y-%m-%d')
fig.autofmt_xdate()
</code></pre>
<p>However, when I try to change my data <code>kind</code> to `bar, I'm getting the following error:</p>
<blockquote>
<p>AttributeError: Unknown property kind</p>
</blockquote>
<p>It worked perfectly when I simply did</p>
<pre><code>pandoc['total_goals'].plot(kind='bar')
</code></pre>
<p>But then <code>mdates.DateFormatter</code> wouldn't work.</p>
<p>I'm missing something. What is it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Pandas DataFrames, such as <code>pandoc</code>, have a <code>plot</code> method with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html" rel="nofollow noreferrer">a <code>kind</code> parameter</a>.
So it is possible to make a plot using</p>
<pre><code>pandoc.plot(x='date_time', y='total_goals', kind="bar", ax=tg)
</code></pre>
<p>Notice that <code>ax=tg</code> is used to tell <code>pandoc</code> to draw on the matplotlib Axes, <code>tg</code>.</p>
<hr/>
<p>In contrast, matplotlib Axes, such as <code>tg</code>, have a <code>plot</code> method, but <code>tg.plot</code> <a href="http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.plot" rel="nofollow noreferrer">does not have a <code>kind</code> parameter</a>. Instead, to make a bar plot with an Axes object, call its <a href="http://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.bar" rel="nofollow noreferrer"><code>tg.bar</code> method</a>.</p>
<hr/>
<p>Using the <code>pandoc.plot</code> method, you could make a bar plot using something like</p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
np.random.seed(2016)

N = 150
pandoc = pd.DataFrame({'date_time':pd.date_range('2000-1-1', periods=N, freq='M'),
                   'total_goals':np.random.randint(10, size=N)})
fig, tg = plt.subplots(1)
pandoc.plot(x='date_time', y='total_goals', kind="bar", ax=tg)

labels, skip = ['']*N, 10
labels[skip//2::skip] = pandoc['date_time'].dt.strftime('%Y-%m-%d')[skip//2::skip]
tg.set_xticklabels(labels)

fig.autofmt_xdate()
plt.show()
</code></pre>
<h2><a href="https://i.stack.imgur.com/c4mXJ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/c4mXJ.png"/></a></h2>
<p>Note that <code>tg.set_xticklabels</code> is used to set the xticklabels instead of <code>mdates.DateFormatter</code>. When making a bar plot the underlying bar plot <code>xtick</code> values are integers:</p>
<pre><code>In [21]: tg.get_xticks()
Out[26]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>You can only use <code>mdates.DateFormatter</code> when the <code>xtick</code> values are dates.
Since a bar plot has a fixed number of bars, there is no advantage to using a dynamic formatter like <a href="http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.FuncFormatter" rel="nofollow noreferrer"><code>mticker.FuncFormatter</code></a>; you are best off simply setting the <code>xticklabels</code> using the <code>Axes.set_xticklabels</code> method.</p>
<hr/>
<pre><code>labels = ['']*N
</code></pre>
<p>creates a list of <code>N</code> empty strings. For example, <code>['']*2</code> evaluates to <code>['', '']</code>.</p>
<pre><code>x, y = a, b
</code></pre>
<p>is <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">equivalent to</a></p>
<pre><code>x = a
y = b
</code></pre>
<p>So <code>labels, skip = ['']*N, 10</code> is equivalent to </p>
<pre><code>labels = ['']*N
skip = 10
</code></pre>
<hr/>
<p>Python slice notation, e.g. <code>x[start:end:step]</code> is <a href="https://stackoverflow.com/a/509295/190597">explained here</a>. For example,</p>
<pre><code>In [227]: x = list('ABCDEFGHIJK'); x
Out[227]: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']

In [228]: x[1::3]
Out[228]: ['B', 'E', 'H', 'K']    &lt;-- the first item is x[1], and then we pick up every 3rd item
</code></pre>
<p>So in the code above, <code>pandoc['date_time'].dt.strftime('%Y-%m-%d')</code> is a sequence of strings and if we call it <code>x</code>, then <code>x[skip//2::skip]</code> is a new sequence which starts with <code>x[skip//2]</code> and then steps by <code>skip</code> amount. </p>
<hr/>
<p><code>skip//2</code> divides <code>skip</code> by 2 using <a href="https://stackoverflow.com/q/183853/190597">integer-division</a>.</p>
<hr/>
<p><code>labels</code> begins as a list of <code>N</code> empty strings. With <code>skip=10</code>, the assignment</p>
<pre><code>labels[skip//2::skip] = pandoc['date_time'].dt.strftime('%Y-%m-%d')[skip//2::skip]
</code></pre>
<p>replaces every 10th element (starting at <code>skip//2</code>) with a date string from <code>pandoc['date_time'].dt.strftime('%Y-%m-%d')</code>.</p>
<hr/>
<p><code>pandoc['date_time']</code> is a time series. 
<code>pandoc['date_time'].dt.strftime('%Y-%m-%d')</code> uses the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.strftime.html" rel="nofollow noreferrer"><code>Series.dt.strftime</code> method</a> to format the dates into date-strings in <code>%Y-%m-%d</code> format.</p>
</div>
<span class="comment-copy">Thank you for the great answer. However, I'm getting the dates squished again. (Not spaced - I have over 150 bars)</span>
<span class="comment-copy">I'm assuming it's because I'm not setting the periods the way I'm reading to the DataFrame (I'm reading from an SQL query)</span>
<span class="comment-copy">Do you want to group some of the dates together (i.e. make a histogram) or do you want 150 bars? If you want 150 bars, you do want an xticklabel for each bar, or can we label, say, every 10th bar?</span>
<span class="comment-copy">I've added a bit of explanation for those two lines.</span>
<span class="comment-copy">It's easiest to see with an example. Try changing the code above to <code>labels[::skip] = pandoc['date_time'].dt.strftime('%Y-%m-%d')[::skip]</code>. You'll see the labels begin at the left edge, and there is space on the right with no label. I tried to "fix" that by shifting the labels by half the skip amount so that the labels are more centered relative to the edges of the plot.</span>
