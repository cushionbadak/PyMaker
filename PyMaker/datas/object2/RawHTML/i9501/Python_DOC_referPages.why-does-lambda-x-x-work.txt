<div class="post-text" itemprop="text">
<p>I put several <code>()</code> after a <code>lambda</code>, and Python seems to ignore them rather than throwing an error. Why?</p>
<p>My code is:</p>
<pre><code>&gt;&gt;&gt; lambda x: x ()()()()
&lt;function &lt;lambda&gt; at 0x105ca7ed8&gt;
&gt;&gt;&gt; lambda x: x (1)(2)(dfdf)()
&lt;function &lt;lambda&gt; at 0x105cae578&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your expression has no syntax errors. There may be a <em>runtime error</em> when you call the lambda, depending on <code>x</code>, but as it stands, you produced valid <code>lambda</code> objects.</p>
<p>Remember that <code>lambda</code> has the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer"><em>lowest</em> operator precedence</a>, so all of the expression after it is part of the lambda expression to be executed when you call it.</p>
<p>In other words, you defined the following functions:</p>
<pre><code> def lambda1(x):
     return x ()()()()

 def lambda2(x):
     return x (1)(2)(dfdf)()
</code></pre>
<p>and it'll depend on what <code>x</code> <em>is</em> what will happen. Pass in a function that accepts any argument and returns itself and there still won't be a problem:</p>
<pre><code>&gt;&gt;&gt; def returns_self(*args, **kwargs):
...     print(args, kwargs)
...     return returns_self
...
&gt;&gt;&gt; lambda1 = lambda x: x ()()()()
&gt;&gt;&gt; lambda1(returns_self)
() {}
() {}
() {}
() {}
&lt;function returns_self at 0x102938bf8&gt;
</code></pre>
<p>If you expected the lambda to be limited to <em>just</em> <code>x</code>, you'd need to use parentheses to override the operator precedence:</p>
<pre><code>&gt;&gt;&gt; (lambda x: x)()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: &lt;lambda&gt;() missing 1 required positional argument: 'x'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is perfectly fine. Your lambda is a function that expects as its argument a function that can be called, which returns a function that can be called, which returns a function that can be called, which returns a function that can be called. The result of that last call is returned by the lambda.</p>
<p>You'll get an error if you call the lambda with another value.</p>
<p>Maybe your confusion is because you think this means</p>
<pre><code>(lambda x: x)()()()()
</code></pre>
<p>Which will give an error, because you didn't pass an <code>x</code>.</p>
<p>But it's actually parsed like</p>
<pre><code>lambda x: (x()()()())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is dynamically typed so it assumes you know what you;re doing when you define your functions. So if you argument <code>x</code> is function which returns function which returns function etc. it will work just fine. So, there is no error here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>x ()()()</code> is a legal expression.</p>
</div>
<span class="comment-copy">It'll only be an error if you were to <i>call</i> the lambda.</span>
<span class="comment-copy">Because that is perfectly valid Python. It could work, for example, if you passed <code>class X: def __call__(self, *args, **kwargs): return self</code> and <code>dfdf</code> was in scope.</span>
<span class="comment-copy">The <code>&lt;function &lt;lambda&gt; at...</code> should be a clue that all you're getting out of that is a function, which hasn't been called.</span>
<span class="comment-copy">s/a function that can be called/a callable/g  - a function is by definition a callable (obviously &lt;g&gt;), but not all callables are functions ;)</span>
