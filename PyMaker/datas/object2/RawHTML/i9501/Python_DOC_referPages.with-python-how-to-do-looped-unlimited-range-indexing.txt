<div class="post-text" itemprop="text">
<p>Having a list or str, like this:</p>
<pre><code>value = 'Water'
</code></pre>
<p>Indexing with i=4 <code>value[4]</code> gives me 'r'.</p>
<p>How can i turn my indexing to use larger (unlimited range) values like <code>16</code> to get 'r', or <code>40</code> for 'W'?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use modulus:</p>
<pre><code>&gt;&gt;&gt; value = "Water"
&gt;&gt;&gt; value[16 % len(value)]
'a'
&gt;&gt;&gt; value[40 % len(value)]
'W'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you should use remainder operator:</p>
<pre><code>&gt;&gt;&gt; value = 'Water'
&gt;&gt;&gt; value[16%len(value)]
'a'
&gt;&gt;&gt; value[40%len(value)]
'W'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an <code>itertools</code> solution, but it's not pretty...</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; value = 'Water'
&gt;&gt;&gt; next(itertools.islice(itertools.cycle(value), 16))
'a'
&gt;&gt;&gt; next(itertools.islice(itertools.cycle(value), 40))
'W'
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> will repeat your input iterable (<code>'Water'</code> in this case) infinitely. <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> allows you to slice an iterable as if it were a <code>list</code>. Calling <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> once just returns the first value from the slice.</p>
</div>
<span class="comment-copy">What purpose does using 40 for "W" serve? What should 39 return? What is the real problem you are trying to solve? Are you trying to create a loop that simply goes back to the start of a string after reaching the end?</span>
<span class="comment-copy">@BryanOakley some function that needs rarely addressing in lower size value to avoid creating repeated version of that value. related to encryption. One-liner solution was asked in this question</span>
