<div class="post-text" itemprop="text">
<p>I have this:</p>
<pre><code>  if condition1:
    with func1() as var1:
      with func2() as var2:
        # a lot of stuff here

  else:
    with func2() as var2:
      # the exact same stuff as above 
</code></pre>
<p>Is there any way to do something like?</p>
<pre><code>  if condition1:
    with func1() as var1:
       ????

   # func2() is called anyway
   with func2() as var2:
     # a lot of stuff here
</code></pre>
<p>as opposed to this:</p>
<pre><code>  def some_stuff():
    # a lof of stuff

  if condition1:
    with func1() as var1:
      with func2() as var2:
        some_stuff()

  else:
    with func2() as var2:
      some_stuff()
</code></pre>
<p>As you can see, <code>func2()</code> is called anyway, by <code>func1()</code> only when the condtion is true.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best solution remains separating out "lots of stuff" into a separate function. However, you could handle something like this using <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a> (requires v3.3+).</p>
<pre><code>from contextlib import ExitStack

with ExitStack() as stack:
    if condition:
        var1 = stack.enter_context(func1())
    var2 = stack.enter_context(func2())

    ... # stuff

# all context managers handled by stack are exited at the end of the block
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could create a conditional context manger with dummy context manager when condition False.</p>
<p>and you can merge both your var1 and var2 context manager with a comma</p>
<pre><code>import contextlib
@contextlib.contextmanager
def dummy_context_manager():
    yield None

with func1() if condition1 else dummy_context_manager() as var1, func2() as var2:
    # do your stuff here
    some_stuff()
</code></pre>
</div>
<span class="comment-copy">Can you explain the statement "I want something like a preprocessor"?</span>
<span class="comment-copy">@BhargavRao, updated.</span>
<span class="comment-copy">Wouldn't putting <code>with func2() as var2:</code> outside the <code>if else</code> block work as intended?</span>
<span class="comment-copy">Please don't use offensive language. We expect everyone to be nice here</span>
<span class="comment-copy">what would you put inside "func1() as ..." then?</span>
