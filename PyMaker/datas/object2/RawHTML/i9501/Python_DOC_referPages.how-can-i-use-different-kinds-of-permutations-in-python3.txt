<div class="post-text" itemprop="text">
<p>The normal kind of permutation is:</p>
<pre><code>'ABC'
  ↓
'ACB'
'BAC'
'BCA'
'CAB'
'CBA'
</code></pre>
<p>But, what if I want to do this:</p>
<pre><code>'ABC'
  ↓
'AA'
'AB'
'AC'
'BA'
'BB'
'BC'
'CA'
'CB'
'CC'
</code></pre>
<p>What is this called, and how efficient would this be with arrays with hundreds of elements?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your terminology is a bit confusing: what you have are not permutations of your characters, but rather the pairing of every possible character with every possible character: a Cartesian product.</p>
<p>You can use <code>itertools.product</code> to generate these combinations, but note that this returns an iterator rather than a container. So if you need all the combinations in a list, you need to construct a <code>list</code> explicitly:</p>
<pre><code>from itertools import product
mystr = 'ABC'
prodlen = 2
products = list(product(mystr,repeat=prodlen))
</code></pre>
<p>Or, if you're only looping over these values:</p>
<pre><code>for char1,char2 in product(mystr,repeat=prodlen):
    # do something with your characters
    ...
</code></pre>
<p>Or, if you want to generate the 2-length strings, you can do this in a list comprehension:</p>
<pre><code>allpairs = [''.join(pairs) for pairs in products]
# ['AA', 'AB', 'AC', 'BA', 'BB', 'BC', 'CA', 'CB', 'CC']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nothing against itertools, but if you want a little insight on how to manually generate permutations of strings by applying modulo arithmetic to an incrementing sequence number.  Should work with a string of any length and any value of <code>n</code> where  <code>n &lt;= len(s)</code></p>
<p>The number of permutations generated is <code>len(s) ** n</code></p>
<p>For example, just call <code>printPermutations("abc", 2)</code></p>
<pre><code>def printPermutations(s, n) :
    if (not s) or (n &lt; 1):
        return
    maxpermutations = len(s) ** n
    for p in range(maxpermutations):
        perm = getSpecificPermutation(s, n, p)
        print(perm)

def getSpecificPermutation(s, n, p):
    # s is the source string
    # n is the number of characters to extract
    # p is the permutation sequence number
    result = ''
    for j in range(n):
        result = s[p % len(s)] + result
        p = p // len(s)
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As it says <a href="https://stackoverflow.com/users/5067311/andras-deak">Andras Deak</a>, using itertools <a href="https://docs.python.org/3.5/library/itertools.html#itertools.product" rel="nofollow noreferrer">product</a>:</p>
<pre><code>import itertools

for i, j in itertools.product('ABC', repeat=2):
    print(i + j)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll want to use the itertools solution. <em>But I know what it's called...</em></p>
<p><strong>Most people call it counting.</strong> You're being sneaky about it, but I think it's just counting in base <code>len(set)</code>, where <code>set</code> is your input <code>set</code> (I'm assuming it is truly a set, no repeated elements). Imagine, in your example <code>A -&gt; 0, B-&gt;1, C-&gt;2</code>. You're also asking for elements that have a certain amount of max digits. Let me show you:</p>
<pre><code>def numberToBase(n, b):
    if n == 0:
        return [0]
    digits = []
    while n:
        digits.append(int(n % b))
        n /= b
    return digits[::-1]

def count_me(set, max_digits=2):
    # Just count! From 0 to len(set) ** max_digits to be precise
    numbers = [i for i in range(len(set) ** max_digits)]

    # Convert to base len(set)
    lists_of_digits_in_base_b = [numberToBase(i, len(set)) for i in numbers]

    # Add 0s to the front (making each list of digits max_digit - 1 in length)
    prepended_with_zeros = []
    for li in lists_of_digits_in_base_b:
        prepended_with_zeros.append([0]*(max_digits - len(li)) + li)

    # Map each digit to an item in our set
    m = {index: item for index, item in enumerate(set)}
    temp = map(lambda x: [m[digit] for digit in x], prepended_with_zeros)

    # Convert to strings
    temp2 = map(lambda x: [str(i) for i in x], prepended_with_zeros)

    # Concatenate each item
    concat_strings = map(lambda a: reduce(lambda x, y: x + y, a, ""), temp)

    return concat_strings
</code></pre>
<p>Here's some outputs:</p>
<pre><code>print count_me("ABC", 2)
</code></pre>
<p>outputs:</p>
<pre><code>['AA', 'AB', 'AC', 'BA', 'BB', 'BC', 'CA', 'CB', 'CC']
</code></pre>
<p>and</p>
<pre><code>print count_me("ABCD", 2)
</code></pre>
<p>outputs:</p>
<pre><code>['AA', 'AB', 'AC', 'AD', 'BA', 'BB', 'BC', 'BD', 'CA', 'CB', 'CC', 'CD', 'DA', 'DB', 'DC', 'DD']
</code></pre>
<p>and</p>
<pre><code>print count_me("ABCD", 3)
</code></pre>
<p>outputs (a big one):</p>
<pre><code>['AAA', 'AAB', 'AAC', 'AAD', 'ABA', 'ABB', 'ABC', 'ABD', 'ACA', 'ACB', 'ACC', 'ACD', 'ADA', 'ADB', 'ADC', 'ADD', 'BAA', 'BAB', 'BAC', 'BAD', 'BBA', 'BBB', 'BBC', 'BBD', 'BCA', 'BCB', 'BCC', 'BCD', 'BDA', 'BDB', 'BDC', 'BDD', 'CAA', 'CAB', 'CAC', 'CAD', 'CBA', 'CBB', 'CBC', 'CBD', 'CCA', 'CCB', 'CCC', 'CCD', 'CDA', 'CDB', 'CDC', 'CDD', 'DAA', 'DAB', 'DAC', 'DAD', 'DBA', 'DBB', 'DBC', 'DBD', 'DCA', 'DCB', 'DCC', 'DCD', 'DDA', 'DDB', 'DDC', 'DDD']
</code></pre>
<p>P.S. <code>numberToBase</code> courtesy of <a href="https://stackoverflow.com/questions/2267362/how-to-convert-an-integer-in-any-base-to-a-string">this post</a></p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations</a> accepts an <code>n</code> input argument.</span>
<span class="comment-copy">But actually what you have there might be the <code>itertools.product</code>. Permutations don't contain a given element multiple times. You're looking at the Cartesian product.</span>
<span class="comment-copy">I also need repeated characters</span>
<span class="comment-copy">@AndrasDeak sorry, your reply didn't load</span>
<span class="comment-copy"><code>list(itertools.product('ABC',repeat=2))</code> for a list; or just iterate through this in a loop without the <code>list()</code> part. That will give you each product as a 2-tuple; you can <code>''.join()</code> that to get 2-length strings in case that's what you want.</span>
<span class="comment-copy">Great, but when I do this with my list of 183 one-two character strings, with repeat=121 I get <code>MemoryError</code>.</span>
<span class="comment-copy">just realized I don't need list()</span>
<span class="comment-copy">@epicbob57 Right, when you only want to iterate over it for manipulation, you can drop the list; that's the point of it returning an iterator:)</span>
<span class="comment-copy">what's the formula for how many elements there would be?</span>
<span class="comment-copy">I just wanted to put this out there because we are already importing from itertools. This will remove the need for a loop of any kind.  <code>products = list(map(lambda x: ''.join(x), product(mystr, repeat=2)))</code></span>
