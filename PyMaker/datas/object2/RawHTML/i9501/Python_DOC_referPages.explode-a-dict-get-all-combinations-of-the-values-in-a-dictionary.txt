<div class="post-text" itemprop="text">
<p>I want to get all combinations of the values in a dictionary as multiple dictionaries (each containing every key of the original but only one value of the original values). Say I want to parametrize a function call with:</p>
<pre><code>kwargs = {'a': [1, 2, 3], 'b': [1, 2, 3]}
</code></pre>
<p>How do I get a list of all the combinations like this:</p>
<pre><code>combinations = [{'a': 1, 'b': 1}, {'a': 1, 'b': 2}, {'a': 1, 'b': 3},
                {'a': 2, 'b': 1}, {'a': 2, 'b': 2}, {'a': 2, 'b': 3},
                {'a': 3, 'b': 1}, {'a': 3, 'b': 2}, {'a': 3, 'b': 3}]
</code></pre>
<p>There can be an arbitary amount of keys in the original <code>kwargs</code> and each value is garantueed to be an iterable but the number of values is not fixed.</p>
<p>If possible: the final <code>combinations</code> should be a generator (not a list).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can flatten the <code>kwargs</code> to something like this</p>
<pre><code>&gt;&gt;&gt; kwargs = {'a': [1, 2, 3], 'b': [1, 2, 3]}
&gt;&gt;&gt; flat = [[(k, v) for v in vs] for k, vs in kwargs.items()]
&gt;&gt;&gt; flat
[[('b', 1), ('b', 2), ('b', 3)], [('a', 1), ('a', 2), ('a', 3)]]
</code></pre>
<p>Then, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><code>itertools.product</code></a> like this</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; [dict(items) for items in product(*flat)]
[{'a': 1, 'b': 1},
 {'a': 2, 'b': 1},
 {'a': 3, 'b': 1},
 {'a': 1, 'b': 2},
 {'a': 2, 'b': 2},
 {'a': 3, 'b': 2},
 {'a': 1, 'b': 3},
 {'a': 2, 'b': 3},
 {'a': 3, 'b': 3}]
</code></pre>
<p><code>itertools.product</code> actually returns an iterator. So you can get the values on demand and build your dictionaries. Or you can use <code>map</code>, which also returns an iterator.</p>
<pre><code>&gt;&gt;&gt; for item in map(dict, product(*flat)):
...     print(item)
...
...
{'b': 1, 'a': 1}
{'b': 1, 'a': 2}
{'b': 1, 'a': 3}
{'b': 2, 'a': 1}
{'b': 2, 'a': 2}
{'b': 2, 'a': 3}
{'b': 3, 'a': 1}
{'b': 3, 'a': 2}
{'b': 3, 'a': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just another way, building the value tuples first and then combining with keys afterwards (pretty much the opposite of @thefourtheye's way :-).</p>
<pre><code>&gt;&gt;&gt; combinations = (dict(zip(kwargs, vs)) for vs in product(*kwargs.values()))
&gt;&gt;&gt; for c in combinations:
        print(c)

{'a': 1, 'b': 1}
{'a': 1, 'b': 2}
{'a': 1, 'b': 3}
{'a': 2, 'b': 1}
{'a': 2, 'b': 2}
{'a': 2, 'b': 3}
{'a': 3, 'b': 1}
{'a': 3, 'b': 2}
{'a': 3, 'b': 3}
</code></pre>
</div>
<span class="comment-copy">Wouldn't this be dependent on implementation details, as it requires the key and value iterators to have the same ordering? Dict has no ordering requirements and I don't think there's any guarantee that those iterators have to have the same order.</span>
<span class="comment-copy">@zstewart Why not just check the documentation? It says they have the same order and even gives the example <code>pairs = zip(d.values(), d.keys())</code>.</span>
<span class="comment-copy">@StefanPochmann Do you mean the <a href="https://docs.python.org/3.5/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">"Dictionary view objects" documentation</a></span>
<span class="comment-copy">@MSeifert Yes, and <a href="https://docs.python.org/2.7/library/stdtypes.html#dict.items" rel="nofollow noreferrer">docs.python.org/2.7/library/stdtypes.html#dict.items</a></span>
