<div class="post-text" itemprop="text">
<p>I just learned async with python 3.5 yesterday.</p>
<p>here is what I want to accomplish today.</p>
<pre><code>import asyncio  
import time
import requests

async def foo():
    """Some Long Running Taks"""
    requests.get("http://stackoverflow.com/questions/41301031/asyncio-on-long-running-task")
    print("foo")

async def bar():
    """Some Quick Task"""
    print("bar")

while True:
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.gather(foo(), bar()))
    loop.close()
    time.sleep(2)

#Expected output
"""
&gt;&gt;&gt;bar
&gt;&gt;&gt;bar
&gt;&gt;&gt;bar
&gt;&gt;&gt;bar
&gt;&gt;&gt;bar
&gt;&gt;&gt;foo
and so on
"""
</code></pre>
<p>Is this possible using python async/await?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a few issues in your code:  </p>
<ol>
<li><p>requests does not support asyncio, use <a href="http://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer">aiohttp</a> instead.  </p></li>
<li><p>Your couroutines will run only when the loop is running:  Call <code>loop.run_until_complete()</code> only once in your code, and schedule many (short or long) tasks using <code>await</code> (or <code>asycio.ensure_future()</code> or <code>loop.create_task()</code>).</p></li>
</ol>
<p>Here is an example doing something similar to what you were trying to do:</p>
<pre><code># make sure to run `pip install aiohttp` first!!!

import asyncio

import aiohttp


async def slow_fetch(delay):
    url = "http://httpbin.org/delay/{}".format(delay)
    print("Getting ", url)
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            text = await resp.text()
    print("Got {}, {} chars".format(url, len(text)))


async def quick_loop():
    print("enter quick_loop")
    for i in range(10):
        await asyncio.sleep(1)
        print("quick_loop", i)
    print("exit quick_loop")


loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.gather(
    slow_fetch(3),
    slow_fetch(4),
    quick_loop(),
))
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>your <code>time.sleep()</code> is blocking; you need to use <code>asyncio.sleep()</code>.</p>
<p>and why do you run your <code>loop</code> inside <code>while True</code>?</p>
<p>also note that <code>asyncio</code> will only help speedup io-bound tasks (e.g. get data from the net). it will not help you speed up cpu-bound tasks. for that you need <a href="https://docs.python.org/3/library/threading.html?highlight=threading#module-threading" rel="nofollow noreferrer">threads</a> or <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing" rel="nofollow noreferrer">multiplrocessing</a>.</p>
<p>seeing that you have updated your question, here a small update in my answer: also <code>requests</code> is blocking and does not play nice with <code>asyncio</code>. <a href="https://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer"><code>aiohttp</code></a> is similiar in its functionality but does play nice with <code>asyncio</code></p>
</div>
<span class="comment-copy"><code>run_until_complete</code> is blocking. The next iteration of your while loop won't begin until everything you gather havs completed.</span>
<span class="comment-copy">time.sleep() is just to show that this is long running task. You can replace it with any web requests.</span>
<span class="comment-copy">see edit if you understand.</span>
<span class="comment-copy">Thanks for pointingout so-documentation</span>
<span class="comment-copy">no, you can not. if your web requests can run asynchronously (e.g. from <a href="https://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer">aiohttp</a>) they will yield control back to the caller. you can not mock that with <code>time.sleep</code> (but with <code>await asyncio.sleep</code>). if you use a blocking call (e.g. <code>requests</code> which can not do async for now) then ok, that would be the same. but then there is no point to use <code>asyncio</code>.</span>
<span class="comment-copy">Ok. So it's not straight forward like node</span>
