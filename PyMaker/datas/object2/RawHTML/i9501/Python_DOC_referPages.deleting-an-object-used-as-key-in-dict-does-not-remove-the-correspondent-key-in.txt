<div class="post-text" itemprop="text">
<p>I have a dictionary that has object instance as keys:</p>
<pre><code>outputs = {instance1:instance1.id, instance2:instance2.id}
</code></pre>
<p>When I delete the object from outside the dict, the correspondent key is not deleted from the dictionary, which is not what I expected. </p>
<p>What I wanted to achieve is that when the object is deleted from outside the dict, the key also disappear from the dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>In fact your object stored in a variable and the object used as key in the dictionary are not exactly the same. They are two different references to the same object in the memory.</p>
<p>Let's take the following example:</p>
<pre><code>class Foo(object):

    def __init__(self, _repr):
        self._repr = _repr

    def __repr__(self):
        return '{}-{}'.format(self._repr, id(self))

 a = Foo('f1')
 # The count returned by getrefcount() is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount()
 print(sys.getrefcount(a) - 1) # Out: 1
 d = {a: 'value'} # Out {f1-139822435732560: 'value'}
 print(sys.getrefcount(a) - 1) # Out: 2
 a._repr = 'f2'
 print(d) # Out {f2-139822435732560: 'value'}
</code></pre>
<p>Which prouves the dict created a new reference to the main object. And because Python's main method of memory management uses reference counting : </p>
<blockquote>
<p>Python keeps a count of all the references to 
  the object, and when there are none left, the object is deleted. </p>
</blockquote>
<p>so if you delete the reference stored in the varaiable <code>del a</code>, the reference stored in the dict stayed.</p>
<pre><code>del a
print(sys.getrefcount(d.keys()[0]) - 1) # Out: 1
</code></pre>
<p>And this will make inconstancy in you dict because you have any more access to your data, I will recommend to use the variable reference to delete the data from the dict than delete the object.</p>
<pre><code>del d[a]
print(sys.getrefcount(a) - 1) # Out: 1
del a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>before deleting the object, you have to delete the key from the dictionary.</p>
<pre><code>del outputs[instance1]
</code></pre>
<p>this happens because the dict doesn't store the object as the key, but a hash that is generated from it.</p>
</div>
<span class="comment-copy">What do you mean by deleting the object? Show us the code that doesn't work.</span>
<span class="comment-copy">Thats because instance1 or instance2 are not referenced in a dictionary instead their hash is computed and stored for look up.</span>
<span class="comment-copy">The reference count for those objects cannot fall to zero, <i>because</i> you have references to them in the dictionary. If you need different behaviour, make the key a <a href="https://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer">weak reference</a>.</span>
<span class="comment-copy">Why do you need a map to look up the id of an instance? Can't you just access instance.id?</span>
<span class="comment-copy">Perhaps you want a <a href="https://docs.python.org/2/library/weakref.html#weakref.WeakKeyDictionary" rel="nofollow noreferrer">WeakKeyDictionary</a>?  You haven't defined what you mean by "deleting an object from outside the dict".</span>
