<div class="post-text" itemprop="text">
<p>Updated Question</p>
<p>I know how to use python to create a md5 hash from a file <a href="http://docs.python.org/3.5/library/hashlib.html#hash-algorithms" rel="nofollow noreferrer">http://docs.python.org/3.5/library/hashlib.html#hash-algorithms</a>. 
I also know how to read a text file line by line. 
However my files can grow large, and it is <strong>inefficient</strong> to read the file twice from beginning to end. I wonder whether it is possible to read the data only once from disc, and like in a stream/pipe, combine the 2 tasks intelligently. May be something like:</p>
<ol>
<li>Initialize md5 </li>
<li>open the file in binary mode</li>
<li>read a chunk of data (e.g. buffer_size=65536) into a buffer</li>
<li>update the md5 with the chunk just read</li>
<li>provide the buffer to another stream to continue processing the data</li>
<li>use TextIOWrapper(?) to read the data again, but this time it is text </li>
<li>read the text line by line. When the buffer is consumed, ask the underlying layer for more data, until EOF. It'll read more binary data, update md5, provide the new buffer ... and I can continue reading line by line (this is like: repeat from step 3 until EOF)</li>
<li>upon EOF, I've processed all my text line by line, and have the md5</li>
</ol>
<p>The objective is to become more efficient, by reading the (large) files from disc just once, instead of twice, by intelligently combining binary md5 calculation and text based processing on the same file.</p>
<p>I hope this explains it better. Thanks again for your help.</p>
<p>Juergen</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, just create a single <a href="https://docs.python.org/3/library/hashlib.html#hash-algorithms" rel="nofollow noreferrer"><code>hashlib.md5()</code> object</a> and update it with each chunk:</p>
<pre><code>md5sum = hashlib.md5()

buffer_size = 2048  # 2kb, adjust as needed.

with open(..., 'rb') as fileobj:
    # read a binary file in chunks
    for chunk in iter(lambda: fileobj.read(buffer_size), b''):
        # update the hash object
        md5sum.update(chunk)

# produce the final hash digest in hex.
print(md5sum.hexdigest())
</code></pre>
<p>If you need to also read the data as text, you'll have to write your own wrapper:</p>
<ul>
<li><p>either one that implements the <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow noreferrer"><code>TextIOBase</code> API</a> (implement all <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">stub methods</a> that relate to reading), and draw data from the <code>BufferedIOReader</code> object produced by the <code>open(..., 'rb')</code> call each time a line is requested. You'll have to do your own line splitting and decoding at that point.</p></li>
<li><p>or one that implements the <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase" rel="nofollow noreferrer"><code>BufferedIOBase</code> API</a> (again implement all stub methods), and pass this as the buffer to a <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer"><code>TextIOWrapper</code> class</a>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This seems to work in python 3.6</p>
<pre><code>#!/usr/bin/env python

import io
import hashlib

class MD5Pipe(io.BytesIO):
    def __init__(self, fd):
        self.fd = fd
        self.hasher = hashlib.md5()
    def readinto(self, b):
        l = self.fd.readinto(b)
        # print("readinto: ", l, len(b))
        if l &gt; 0:
            self.hasher.update(b[0:l])
        return l
    def hexdigest(self):
        return self.hasher.hexdigest()

blocksize = 65536
file = "c:/temp/PIL/VTS/VTS_123.csv"
with open(file, "rb") as fd:
    with MD5Pipe(fd) as md5:
        with io.BufferedReader(md5) as br:
            with io.TextIOWrapper(br, newline='', encoding="utf-8") as reader:
                for line in reader:
                    print("line: ", line, end="")

                print("md5: ", md5.hexdigest())
</code></pre>
</div>
<span class="comment-copy">This page I know and I've read it before. But where exactly does it describe that I want to use the very same buffer I've read for md5, for reading the text line by line in there?</span>
<span class="comment-copy">Look my problem is not md5. My problem is a) read buffers from a binary file b) do something with the buffer c) use that buffer (which is bytes not string) to read the text in there line by line. You don't have a working example by any chance?</span>
<span class="comment-copy">That is exactly my problem. I know how to create a md5 hash. But I struggle with the TextIOBase, BufferedOOBase and TextIOWrapper pieces required. You don't have an example by any chance?</span>
<span class="comment-copy">@Juergen: could you share your attempts in the question? It's much easier to help correct mistakes than to write something from scratch. I don't have much time today, it may be that I won't be able to look until tomorrow.</span>
