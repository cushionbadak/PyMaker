<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1663807/how-to-iterate-through-two-lists-in-parallel">How to iterate through two lists in parallel?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I understand that with one list argument <code>map()</code> can be replaced by a list comprehension. For example</p>
<pre><code>map(lambda x : x**2, range(5))
</code></pre>
<p>can be replaced with</p>
<pre><code>[x**2 for x in range(5)]
</code></pre>
<p>Now how would I do something similar for two parallel lists. In other words, I have a line of code with the following pattern:</p>
<pre><code>map(func, xs, ys)
</code></pre>
<p>where <code>func()</code> takes two arguments.</p>
<p>How can I do the same thing with a list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map()</code> with multiple arguments is the equivalent of using the <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip()</code> function</a> on those extra arguments. Use <code>zip()</code> in a list comprehension to do the same:</p>
<pre><code>[func(x, y) for x, y in zip(xs, ys)]
</code></pre>
<p>Generally speaking, any <code>map(func, a1, a2, .., an)</code> expression can be transformed to a list comprehension with <code>[func(*args) for args in zip(a1, a2, .., an)]</code>.</p>
</div>
<span class="comment-copy">This answer is less thorough than the old, popular, canonical duplicate.</span>
<span class="comment-copy">@TigerhawkT3: which I wasn't aware existed. Is this answer now being judged in comparison to a different question?</span>
<span class="comment-copy">You didn't think there was already a question about <code>zip</code>?</span>
<span class="comment-copy">@TigerhawkT3: no, I wasn't aware there was already a question on how to translate <code>map()</code> with multiple arguments to a list comp, no. Was I supposed to?</span>
