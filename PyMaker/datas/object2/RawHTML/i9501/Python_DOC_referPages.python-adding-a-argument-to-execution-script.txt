<div class="post-text" itemprop="text">
<p>consider I am having a following code in my bin as follows(filename: emp_dsb):</p>
<pre><code>import sys

from employee_detail_collector.EmpCollector import main

if __name__ == '__main__':
    sys.exit(main())
</code></pre>
<p>In my command line I will execute the <strong>"emp_dsb"</strong>, so that above code will execute the main function from "employee_detail_collector.EmpCollector"</p>
<p>Code in (employee_detail_collector.EmpCollector) main():</p>
<pre><code>def main():
    try:
        path = const.CONFIG_FILE
        empdsb = EmpDashboard(path)
    except SONKPIExceptions as e:
        logger.error(e.message)
    except Exception as e:
        logger.error(e)
</code></pre>
<p>Now I need to add some argument here for emp_dsb, that is like <strong>"emp_dsb create_emp</strong>" should invoke a new set of functionalities for creating a employee, which is also needs to be added in same main()</p>
<p>someone look and let me know your ideas, If not clear let me know so that i will try to make it more clear.</p>
</div>
<div class="post-text" itemprop="text">
<p>the standard way to use command line arguments is to do this:</p>
<pre><code>import sys

if __name__ == '__main__':

    print(sys.argv)
</code></pre>
<p>read up on the doc of <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv</code></a>.</p>
<p>then there are fancier ways like the built-in <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> and the 3rd party <a href="http://docopt.org/" rel="nofollow noreferrer"><code>docopt</code></a> or <a href="http://click.pocoo.org/" rel="nofollow noreferrer"><code>click</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would personally use 'argparse' module. 
<a href="https://docs.python.org/3.5/howto/argparse.html#introducing-positional-arguments" rel="nofollow noreferrer">Here is the link to a dead simple code sample</a>.</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument("echo")
args = parser.parse_args()
print(args.echo)
</code></pre>
</div>
<span class="comment-copy">google for <code>python argh</code></span>
<span class="comment-copy">hint: use <code>sys.argv</code></span>
<span class="comment-copy">This would be a better answer with @Shobeir's answer added. Though still the best answer yet.</span>
<span class="comment-copy">@EmettSpeer: i agree, a little more example code might be nice. but as i mentioned 4 libraries i did not want to present 4 examples or lead the choice of a tool in a certain direction by giving an example for one tool only... besides: the documentation is pretty good on each of those.</span>
<span class="comment-copy">You have some valid points.</span>
