<div class="post-text" itemprop="text">
<p>So I'm putting <code>.info</code> in one StringIO and <code>.error</code> in another StringIO.</p>
<p>How do I stop them from both being put into both?</p>
<p>Prelude:</p>
<pre><code>from __future__ import print_function

import logging

from io import IOBase
from sys import stdout
from platform import python_version_tuple

if python_version_tuple()[0] == '3':
    from IO import StringIO
else:
    try:
        from cStringIO import StringIO
    except ImportError:
        from StringIO import StringIO
</code></pre>
<p>Code:</p>
<pre><code># Some other file, like __init__.py
logging.basicConfig(
      format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s', level='INFO')
handler = logging.root.handlers.pop()
assert logging.root.handlers == [], "root logging handlers aren't empty"
handler.stream.close()
handler.stream = stdout
logging.root.addHandler(handler)
# Some other file, like __init__.py

log = logging.getLogger(__name__)
stderr_stream = logging.StreamHandler(StringIO())
log.addHandler(stderr_stream)
log.setLevel(logging.ERROR)
print('log.level =', {logging.INFO: 'INFO',
                      logging.ERROR: 'ERROR'}[log.level])

stdout_stream = logging.StreamHandler(StringIO())
log.addHandler(stdout_stream)
log.setLevel(logging.INFO)
print('log.level =', {logging.INFO: 'INFO',
                      logging.ERROR: 'ERROR'}[log.level])

log.info('hello')
log.error('world')
print('stderr_stream =', stderr_stream.stream.getvalue())
print('stdout_stream =', stdout_stream.stream.getvalue())
</code></pre>
<p><a href="http://ideone.com/Nj6Asz" rel="nofollow noreferrer">http://ideone.com/Nj6Asz</a> output:</p>
<pre><code>log.level = ERROR
log.level = INFO
2016-12-23 09:03:27,761 __main__     INFO     hello
2016-12-23 09:03:27,761 __main__     ERROR    world
stderr_stream = hello
world

stdout_stream = hello
world
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be achieved by using a <a href="https://docs.python.org/3/library/logging.html#filter-objects" rel="nofollow noreferrer">Filter</a>. Since the filter function is an arbitrary boolean function (which returns zero/nonzero for some reason) you can have it filtering the level for a minimum AND a maximum:</p>
<pre><code>class LevelRangeFilter:
    def __init__(self, min_level, max_level):
        self._min_level = min_level
        self._max_level = max_level

    def filter(self, record):
        if (
            (self._min_level is None or self._min_level &lt;= record.levelno)
            and
            (self._max_level is None or record.levelno &lt; self._max_level)
        ):
            return 0
        else:
            return 1
</code></pre>
<p>...</p>
<pre><code>stderr_stream.addFilter(LevelRangeFilter(logging.ERROR, None))
stdout_stream.addFilter(LevelRangeFilter(logging.INFO, logging.ERROR))
</code></pre>
</div>
<span class="comment-copy">Note that you're setting the level of the <i>logger</i> and not the individual handlers. You might want to look into that.</span>
<span class="comment-copy">@aib: But I am setting the levels of the individual handlers?</span>
<span class="comment-copy">Thanks, that works! Taking your approach, I've condensed your <code>filter</code> function and added subclassing of <code>logging.Filter</code>: <a href="http://ideone.com/IjG471" rel="nofollow noreferrer">ideone.com/IjG471</a> - You're welcome to edit to reflect this.</span>
