<div class="post-text" itemprop="text">
<p>I need to be able to pack 4 float digits into a single integer and then unpack the integer into my 4 floats.</p>
<p>The example of floats (not more than 8-digit precision):</p>
<pre><code>-0.02513393, -0.02394553, 0.04248389, 0.02388026
</code></pre>
<hr/>
<p>So, I thought that firstly I need to cast those floats to integers by multiplying each by 1000000000.</p>
<pre><code>floats = [-0.02513393, -0.02394553, 0.04248389, 0.02388026]
integers = list(map(lambda i: int(i * 1000000000), floats))
# output: [-25133930, -23945530, 42483890, 23880260]
</code></pre>
<p>And then use bitwise operations to fit four numbers into one, something like this:</p>
<pre><code>a, b, c, d = integers
packed = (a &lt;&lt; 24) | (b &lt;&lt; 16) | (c &lt;&lt; 8) | d
</code></pre>
<p>However, this doesn't seem right because the values I'm trying to pack are signed.</p>
<hr/>
<p>Could you please prompt me with the right solution for packing such signed floats into a single integer and the correct way to unpack them?</p>
<hr/>
<p>I thought of adding <code>1</code> to the end of every negative value and <code>0</code> to the end of every positive value and to restore the integers into floats I would first check if there's a <code>1</code> I'd negate the value and then divide by 1000000000. But that's not elegant at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>If, per the comments, the width of the packed data doesn't matter, your general approach is workable with some tweaks. </p>
<ul>
<li><p>First, 8 bits for each number isn't enough; you will have overlap between each one. Your floats are known to have only 8 <em>digits</em> precision, but that doesn't imply that they only have 8 significant <em>bits</em> in the binary representation. A good way to find out how wide they need to be is to consider a number you know they are all lower than (in your case, 1000000000), then the bit length of that number (30) is sufficient. So we have:</p>
<p>packed = a &lt;&lt; 90 | b &lt;&lt; 60 | c &lt;&lt; 30 | d</p></li>
<li><p>As you suspect, this still has problems with negative numbers. From the above, I can succesfully recover <code>d</code> with <code>packed &amp; 2**30-1</code> and <code>c</code> with <code>(packed &amp; 2**30-1 &lt;&lt; 30 ) &gt;&gt; 30</code>, but doing similar things for <code>a</code> and <code>b</code> gives me nonsense. So reduce it to the problem you have already solved. If you add a large enough number to each one so that they are all positive, you can treat them as unsigned - once again, you know they are less than 1000000000 , so there's the magic number. The fiddled numbers are all now less than 2000000000, so we need to adjust our field width. So we have:</p>
<p>ceiling = 1000000000
packed = (a + ceiling) &lt;&lt; 31*3 | (b + ceiling) &lt;&lt; 31*2 | (c + ceiling) &lt;&lt; 31 | d</p></li>
</ul>
<p>And we can recover <code>a</code> as <code>((packed &amp; 2**31-1&lt;&lt; 31*3) &gt;&gt; 31*3) - ceiling</code>. For sake of readability, you may want to consider writing this as a loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using NumPy, you could <em>view</em> a 4-element array of dtype <code>float16</code> as an integer array of dtype <code>int64</code>:</p>
<pre><code>In [125]: np.array([-0.02513393, -0.02394553, 0.04248389, 0.02388026], dtype=np.float16).view(np.int64)
Out[125]: array([2746396911566169711])
</code></pre>
<p>To unpack the int you could use <code>view(np.float16)</code>:</p>
<pre><code>In [126]: np.array([2746396911566169711]).view(np.float16)
Out[126]: array([-0.02513123, -0.02394104,  0.04248047,  0.02388   ], dtype=float16)
</code></pre>
<p>Note there is some loss of precision.</p>
<hr/>
<p>Using Python3.2 (or higher) and no NumPy, you could pack the floats into bytes, then use <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer"><code>int.from_bytes</code></a> to convert the bytes to an int. To unpack, use <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>int.to_bytes</code></a> and <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer"><code>struct.unpack</code></a>:</p>
<pre><code>import struct

def floats_to_int(floats):
    return int.from_bytes(struct.pack('4d', *floats), 'big')

def int_to_floats(packed):
    return struct.unpack('4d', packed.to_bytes(4*8, 'big'))

floats = [-0.02513393, -0.02394553, 0.04248389, 0.02388026]
print(floats)
packed = floats_to_int(floats)
print(packed)
result = int_to_floats(packed)
print(result)
</code></pre>
<p>prints</p>
<pre><code>[-0.02513393, -0.02394553, 0.04248389, 0.02388026]
3995686615650679380069295189325600154682811585786433559914521688689786263615
(-0.02513393, -0.02394553, 0.04248389, 0.02388026)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments, your current strategy isn't working because you've mixed up 8 <em>decimal</em> digit precision with 8 <em>bit</em> precision. </p>
<pre><code>(a &lt;&lt; 24) | (b &lt;&lt; 16) | (c &lt;&lt; 8) | d
</code></pre>
<p>would work if those variables contained 8 bit data, i.e. integers in range(256). You need around 32 bits to store float data to 8 <em>decimal</em> digit precision.</p>
<p>Note that standard Python (aka CPython) uses <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="nofollow noreferrer">IEEE 754 binary64 double precision</a> for its floats.</p>
<p>But you could approximate your float data using 32 bit single-precision floats, and pack them using the standard <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module. Here's a short demo:</p>
<pre><code>from struct import pack, unpack

# Make a list of 4 Python floats.
a = [i**0.5 for i in range(5, 9)]
print(a)

# Convert the Python floats to 32 bit floats and pack them into 16 bytes, big endian
fmt = '&gt;ffff'
b = pack(fmt, *a)
print(b, len(b))

# Unpack the bytes back into floats 
z = unpack(fmt, b)
print(z)
print([u*u for u in z])

# Pack the bytes into an int, using big-endian packing
num = int.from_bytes(b, 'big')
print(num)

# Convert the int back to bytes
newb = num.to_bytes(16, 'big')
print(newb, newb == b)    
</code></pre>
<p><strong>output</strong></p>
<pre><code>[2.23606797749979, 2.449489742783178, 2.6457513110645907, 2.8284271247461903]
b'@\x0f\x1b\xbd@\x1c\xc4q@)S\xfd@5\x04\xf3' 16
(2.2360680103302, 2.4494898319244385, 2.6457512378692627, 2.8284270763397217)
[5.00000014682206, 6.000000436701214, 6.999999612686736, 7.999999726171666]
85149038802136470295784196693032240371
b'@\x0f\x1b\xbd@\x1c\xc4q@)S\xfd@5\x04\xf3' True
</code></pre>
<p>Note that <code>.from_bytes</code> and <code>.to_bytes</code> are Python 3 features; the same operations in Python 2 are a little more verbose.</p>
</div>
<span class="comment-copy">What do you mean by packing? What would be the expected output for your case?</span>
<span class="comment-copy">@CarlesMitjans The expected input to packing function: 4 signed floats; the expected output from a packing function: single integer. The expected input to the unpacking function: single integer; the expected output of the unpacking function: 4 signed floats</span>
<span class="comment-copy">Your method is broken even if the numbers are unsigned. Consider <code>packed &amp; 0x11111111</code> gives you 285216768 rather than the expected 23880260. Your floats have no more than 8 digits precision, but that doesn't affect how many significant bits the IEE754 double has (which is how Python stores floats), and <i>certainly</i> doesn't guarantee the integer is representable in 8 bits. You can do <code>d.bit_length()</code> (comes out as 25 for all you numbers, except <code>c</code> is 26) to confirm this. Offsets at 30, 60 and 90 should work, but it looks like you want to pack them into 32 bits total ...</span>
<span class="comment-copy">@lvc well, I don't really want to pack them in exactly 32-bits, it can be 64 or anything else. What's important is being able to pack/unpack them</span>
<span class="comment-copy">Is there some special reason that you want to pack this float data into an integer? Why not just pack them into bytes? You can easily pack 32 bit floats into bytes using the <code>struct</code> module. Of course, it's easy to convert byte &lt;-&gt; integer, especially in Python 3, if you really need ints.</span>
