<div class="post-text" itemprop="text">
<p>While playing with new f-strings in the recent Python 3.6 release, I've noticed the following:</p>
<ol>
<li><p>We create a <code>foo</code> variable with value <code>bar</code>:</p>
<pre><code>&gt;&gt;&gt; foo = 'bar'
</code></pre></li>
<li><p>Then, we declare a new variable, which is our f-string, and it should take <code>foo</code> to be formatted:</p>
<pre><code>&gt;&gt;&gt; baz = f'Hanging on in {foo}'
</code></pre></li>
<li><p>Ok, all going fine and then we call <code>baz</code> to check its value:</p>
<pre><code>&gt;&gt;&gt; baz
'Hanging on in bar'
</code></pre></li>
<li><p>Let's try to change the value of <code>foo</code> and call <code>baz</code> again:</p>
<pre><code>&gt;&gt;&gt; foo = 'spam'
&gt;&gt;&gt; baz
'Hanging on in bar'
</code></pre></li>
</ol>
<p>Shouldn't it be dynamic? Why does this happen? I thought the f-string would update if the value of <code>foo</code> changed, but this didn't happened. I don't understand how this works.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>f-string</code> has <em>already</em> been evaluated when you executed:</p>
<pre><code>&gt;&gt;&gt; baz = f'Hanging on in {foo}'
</code></pre>
<p>Specifically, it looked up the value for the name <code>foo</code> and replaced it with <code>'bar'</code>, the value that was found for it. <code>baz</code> then contains the string after it has been formatted. </p>
<p><code>f-string</code>s aren't constant; meaning, they don't have a replacement field inside them waiting for evaluation <em>after</em> being evaluated. <em>They evaluate when you execute them</em>, after that, the assigned value is <em>just a normal string</em>:</p>
<pre><code>&gt;&gt;&gt; type(f'hanging on in {foo}')
&lt;class 'str'&gt;
</code></pre>
<p>For reference, see <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">the section on <em>Formatted String Literals</em></a>:</p>
<blockquote>
<p>[..] While other string literals always have a constant value, formatted strings are really <em>expressions evaluated at run time</em>. [..]</p>
</blockquote>
<p>After the expression (the look-up for the replacement field and its consequent formatting) is performed, there's nothing special about them, the expression has been evaluated to a string and assigned to <code>baz</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable and once a string is created, it can no longer be changed.</p>
<p><code>foo</code> and more importantly <code>baz</code> are both strings. That means when you create them they go into memory and can no longer be changed.</p>
<p>Once you assigned <code>foo = bar</code> you created this object and assigned it to a specific location in memory. Same thing was done with <code>baz</code>. </p>
<p>Even though <code>baz</code> was as a <a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">Format string literal</a> does not mean that it is no longer immutable since:</p>
<pre><code>In [4]: type(baz)
Out[4]: str
</code></pre>
<p>By doing so, <code>baz</code> was created as an object and assigned to your memory as <code>Hanging on in bar</code>, thus its relation to <code>foo</code> is purely during instantiation. During which <code>baz</code> seeks the object <code>foo</code> and concatenate it where appropriate.</p>
<p>Once you created <code>foo = 'spam'</code> you <strong>destroyed</strong> the original assignment of <code>foo</code> and create a new one in memory.</p>
</div>
<span class="comment-copy">How would you expect the expression <code>'Hanging on in ' + foo</code> to behave?</span>
<span class="comment-copy">Or <code>'hanging on in {}'.format(foo)</code> - they <b>don't</b> keep a reference to the interpolated value.</span>
<span class="comment-copy">As far as I understand, these fancy 'f-strings' are just some sort of syntactic sugar for <code>str.format</code>.</span>
<span class="comment-copy">@JoshLee A better question is how they expect <code>foo = f'{foo}'</code> to behave.</span>
<span class="comment-copy">What is <code>baz</code> after creation?  A regular string?  Or does it have some special <code>f</code> attributes?</span>
<span class="comment-copy">@hpaulj <code>type(baz)</code> will tell you; ordinary string.</span>
