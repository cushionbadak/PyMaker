<div class="post-text" itemprop="text">
<p>I have a simple problem / question about the below code.</p>
<pre><code>ip = '192.168.0.'
count = 0
while count &lt;= 255:
    print(count)
    count += 1
    for i in range(10):
        ipg=ip+str(count)
        t = Thread(target=conn, args=(ipg,80))
        t.start()
</code></pre>
<p>I want to execute 10 threads each time and wait for it to finish and then continue with the next 10 threads until count &lt;= 255</p>
<p>I understand my problem and why it does execute 10 threads for every count increase, but not how to solve it, any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>it can easily achieved using <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrents.futures</a> library</p>
<p>here's the example code:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor 

ip = '192.168.0.'
count = 0

THREAD_COUNT = 10

def work_done(future):
    result = future.result()
    # work with your result here


def main():
    with ThreadPoolExecutor(THREAD_COUNT) as executor:
        while count &lt;= 255:
            count += 1
            ipg=ip+str(count)
            executor.submit(conn, ipg, 80).add_done_callback(work_done)

if __name__ == '__main__':
    main()
</code></pre>
<p>here executor returns future for every task it submits.
keep in mind that if you use <code>add_done_callback()</code> finished task from thread returns to the <strong>main thread</strong> (which would block your main thread) if you really want true parallelism then you should wait for future objects separately. here's the code snippet for that.</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
from concurrent.futures._base import wait

futures = []
with ThreadPoolExecutor(THREAD_COUNT) as executor:
    while count &lt;= 255:
        count += 1
        ipg=ip+str(count)
        futures.append(executor.submit(conn, ipg, 80))
wait(futures)

for succeded, failed in futures:
    # work with your result here
</code></pre>
<p>hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two viable options: <a href="https://docs.python.org/3.5/library/queue.html#module-queue" rel="nofollow noreferrer"><code>multiprocessing</code></a> with <code>ThreadPool</code> as @martineau suggested and using <a href="https://docs.python.org/3.5/library/queue.html#module-queue" rel="nofollow noreferrer"><code>queue</code></a>. Here's an example with <code>queue</code> that executes requests concurrently in 10 different threads. Note that it doesn't do any kind of batching, as soon as a thread completes it picks up next task without caring the status of other workers:</p>
<pre><code>import queue
import threading

def conn():
    try:
        while True:
            ip, port = que.get_nowait()
            print('Connecting to {}:{}'.format(ip, port))
            que.task_done()
    except queue.Empty:
        pass

que = queue.Queue()
for i in range(256):
    que.put(('192.168.0.' + str(i), 80))

# Start workers
threads = [threading.Thread(target=conn) for _ in range(10)]
for t in threads:
    t.start()

# Wait que to empty
que.join()

# Wait workers to die
for t in threads:
    t.join()
</code></pre>
<p>Output:</p>
<pre><code>Connecting to 192.168.0.0:80
Connecting to 192.168.0.1:80
Connecting to 192.168.0.2:80
Connecting to 192.168.0.3:80
Connecting to 192.168.0.4:80
Connecting to 192.168.0.5:80
Connecting to 192.168.0.6:80
Connecting to 192.168.0.7:80
Connecting to 192.168.0.8:80
Connecting to 192.168.0.9:80
Connecting to 192.168.0.10:80
Connecting to 192.168.0.11:80
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I modified your code so that it has correct <strong>logic</strong> to do what you want. Please note that I don't run it but hope you'll get the general idea:</p>
<pre><code>import time
from threading import Thread

ip = '192.168.0.'
count = 0
while count &lt;= 255:
    print(count)
    # a list to keep your threads while they're running
    alist = []
    for i in range(10):
        # count must be increased here to count threads to 255
        count += 1
        ipg=ip+str(count)
        t = Thread(target=conn, args=(ipg,80))
        t.start()
        alist.append(t)

    # check if threads are still running
    while len(alist) &gt; 0:
        time.sleep(0.01)
        for t in alist:
            if not t.isAlive():
                # remove completed threads
                alist.remove(t)
</code></pre>
</div>
<span class="comment-copy">I guess I should add a Queue</span>
<span class="comment-copy">Consider using the largely undocumented <a href="http://stackoverflow.com/a/3386632/355230"><code>ThreadPool</code></a> class in <code>multiprocessing.pool</code> with <code>ThreadPool(processes=10)</code>. You could use <code>while not(all(a_thread.ready() for a_thread in results)): pass</code> to wait for all 10 threads to be idle each iteration. See <a href="http://stackoverflow.com/a/18283388/355230">my answer</a> to another question.</span>
<span class="comment-copy">Thanks for your answer, at the moment I'm working with a queue list but i guess the advantage with a pool is that after one process of the 10 is done it starts an other instead of waiting before all 10 have finsihed. Right ?</span>
<span class="comment-copy">True, but if you feed it 10 things at a time and then wait for them all to finish before feeding any more into it, you'll be able to accomplish what you want to do.</span>
<span class="comment-copy">In prefer this answer because ThreadPoolExecutor seems the best way to follow. Other answers where also correct. Thanks everyone !</span>
