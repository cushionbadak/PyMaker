<div class="post-text" itemprop="text">
<p>Lets say we have functions in python:</p>
<pre><code>def _abs(iterable):   #cause its normally for one element only
    return [abs(i) for i in iterable]

def A(list, foo):
    return foo(list)

list = [2,3,-5]
print( A(list,foo=sum) )

&gt;&gt; 0
</code></pre>
<p>while I may pass <code>foo=sum</code> to A, I am looking for an elegant way to pass something like <code>foo=sum(_abs)</code> to perform <code>sum(_abs(list))</code>.</p>
<p>The only way I see it now is to send a list of functions <code>[sum, _abs]</code> and apply them in order. Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Or, to compose more generally (i.e. with an arbitrary number of argument functions):</p>
<pre><code>from functools import partial, reduce

def compose(*funcs):
    return partial(reduce, lambda x, f: f(x), reversed(funcs))
</code></pre>
<p><em>(see the docs on <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>partial</code></a> and <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a> - note you don't need to import <code>reduce</code> in Python 2.x)</em></p>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; compose(sum, _abs)([2, 3, -5])
10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make an explicit compose function</p>
<pre><code>&gt;&gt;&gt; def compose(f, g):
...   return lambda x: f(g(x))
...
</code></pre>
<p>Then use it</p>
<pre><code>&gt;&gt;&gt; A(list, compose(sum, _abs))
10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def compose(funcs, funcargs):
    for func in reversed(funcs):
        funcargs = func(funcargs)
    return funcargs
</code></pre>
</div>
<span class="comment-copy">Are you asking about function <i>composition</i> (rather than nesting) <a href="http://stackoverflow.com/questions/16739290/composing-functions-in-python" title="composing functions in python">stackoverflow.com/questions/16739290/…</a></span>
<span class="comment-copy">What you are describing is <i>"function composition"</i>. If you want to do this kind of functional-style programming, consider using a library dedicated to the purpose: <a href="http://toolz.readthedocs.io/en/latest/api.html?highlight=compos#toolz.functoolz.compose" rel="nofollow noreferrer">toolz.readthedocs.io/en/latest/…</a>. Or just try <code>foo=lambda l: sum(map(abs, l))</code>.</span>
<span class="comment-copy">As a side note, it's usually recommend to return a generator instead of a list, for your <code>_abs</code> it would be: <code>return (abs(i) for  in iterable)</code></span>
<span class="comment-copy">@jonrsharpe that's an excellent solution, and exactly what I've been looking for. MarkusMeskanen why is so?</span>
<span class="comment-copy">@MarkusMeskanen or <code>map(abs, iterable)</code> if they're using 3.x.</span>
<span class="comment-copy">This applies them in the wrong (or, at least, <i>unconventional</i>) order.</span>
<span class="comment-copy">@jonrsharpe, I will modify my answer.</span>
