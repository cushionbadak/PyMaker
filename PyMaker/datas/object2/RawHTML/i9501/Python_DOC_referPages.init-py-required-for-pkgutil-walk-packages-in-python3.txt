<div class="post-text" itemprop="text">
<p>PEP420 makes <code>__init__.py</code> files optional: <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages</a></p>
<p>Though it seems without them, <code>pkgutil.walk_packages</code> does not function as desired: <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages" rel="nofollow noreferrer">https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages</a></p>
<p>Consider the following example:</p>
<pre><code>$ tree foo
foo
├── bar
│   ├── baz.py
│   └── __init__.py
├── __init__.py
└── womp.py
</code></pre>
<p>And a test script</p>
<pre><code># test.py
import pkgutil

import foo


for _, mod, _ in pkgutil.walk_packages(foo.__path__, foo.__name__ + '.'):
    print(mod)
</code></pre>
<p>In both python2 and python3 I get the following output:</p>
<pre><code>$ python2.7 test.py
foo.bar
foo.bar.baz
foo.womp
$ python3.5 test.py
foo.bar
foo.bar.baz
foo.womp
</code></pre>
<p>Removing the <code>__init__.py</code> files and only using python3, I get this:</p>
<pre><code>$ find -name '__init__.*' -delete
$ python3.5 test.py
foo.bar
</code></pre>
<p>The modules are definitely importable:</p>
<pre><code>$ python3.5 -c 'import foo.bar.baz'
$
</code></pre>
<p>Is this a bug?  Am I forced to create the <code>__init__.py</code> files to achieve what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>As a workaround (maybe this will help someone else), I'm using something like this.  It isn't perfect (broken if pwd changes or if the packages are not rooted at .) but it does do what I want to do for my simple usecase:</p>
<pre><code>def walk_modules(pkg):
    assert hasattr(pkg, '__path__'), 'This function is for packages'
    path = pkg.__name__.replace('.', '/')
    modules = []
    for root, _, filenames in os.walk(path):
        for filename in filenames:
            if filename.startswith('.') or not filename.endswith('.py'):
                continue
            path = os.path.join(root, filename)
            modules.append(os.path.splitext(path)[0].replace('/', '.'))
    for module in sorted(modules):
        yield __import__(module, fromlist=['__trash'])
</code></pre>
</div>
<span class="comment-copy">For those wondering, ~18 months after this question was first asked, <code>walk_packages</code> still does not support PEP420 native namespace packages. Had to re-add <code>__init__.py</code> files just to support my <code>walk_packages</code> usecase.</span>
