<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25076883/creating-dynamically-named-variables-in-a-function-in-python-3-understanding-e">Creating dynamically named variables in a function in python 3 / Understanding exec / eval / locals in python 3</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Why does Python's <code>eval</code> not work inside a function? The same <code>eval(compile(cmd))</code> code works in a global environment, but does not work inside the <code>foo</code> function.</p>
<p>Simple example:</p>
<pre><code>fn = '/tmp/tmp'
mode = 'single'

def foo(cmd, fn, mode):
    eval(compile(cmd, fn, mode)) # &lt;&lt;&lt; this does not work
    print 'foo: cmd=', cmd
    print 'foo: x=', x

cmd = "x = 1"
eval(compile(cmd, fn, mode)) # &lt;&lt;&lt; this works
print 'global scope: cmd=', cmd
print 'global scope: x=', x

del(x)
foo('x = 9', fn, mode)
</code></pre>
<p>This is the output and error message:</p>
<pre><code>global scope: cmd= x = 1
global scope: x= 1
foo: cmd= x = 9
foo: x=
Traceback (most recent call last):
  File "ctest.py", line 20, in &lt;module&gt;
    foo('x = 9', fn, mode)
  File "ctest.py", line 12, in foo
    print 'foo: x=', x
NameError: global name 'x' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your function, the execution does work but <code>x</code> ends up in <code>locals()</code>, and then the <code>print</code> statement tries to find <code>x</code> in <code>globals()</code> and so raises the <code>NameError</code>.</p>
<pre><code>fn = '/tmp/tmp'
mode = 'single'

def foo(cmd, fn, mode):
    eval(compile(cmd, fn, mode))
    print 'locals:', locals()
    print 'foo: cmd=', cmd
    print 'foo: x=', locals()['x']

cmd = "x = 1"
eval(compile(cmd, fn, mode))
print 'global scope: cmd=', cmd
print 'global scope: x=', x

del(x)
foo('x = 9', fn, mode)
</code></pre>
<p>Outputs:</p>
<pre><code>global scope: cmd= x = 1
global scope: x= 1
locals: {'x': 9, 'cmd': 'x = 9', 'mode': 'single', 'fn': '/tmp/tmp'}
foo: cmd= x = 9
foo: x= 9
</code></pre>
</div>
<span class="comment-copy">are you sure you do not want to assign its value to something?</span>
<span class="comment-copy">Just tried this: <code>x</code> ends up in the <code>locals</code> dict, just as it does with <code>exec</code>, but while <code>exec(cmd)</code> works within the function, <code>eval(compile(...))</code> does not.</span>
<span class="comment-copy">Also, if you put <code>eval("x")</code> instead of <code>x</code> in <code>print 'foo: x=', x</code> it works, too. Same behaviour in both, Python 2.7 and Python 3.4</span>
<span class="comment-copy">Just noticed that with <code>exec</code>, <code>x</code> does indeed end up in both <code>globals</code> and <code>locals</code>; at first I thought both would yield identical <code>globals</code> and <code>locals</code>. But, yes, why does it not look into <code>locals</code>, and why does <code>eval("x")</code> work, where <code>x</code> fails?</span>
<span class="comment-copy">I think the scope of a variable in a function is determined at definition time. Thus things like <code>a = "a"; def print_a(): print(a); a="c"</code> will throw an UnboundLocalError. <code>eval("x")</code> "creates a new complete lookup" and thus can look into the local scope.</span>
<span class="comment-copy">@syntonym That's an interesting theory that makes some sense, given your example, and would explain the behaviour. Can you provide a reference for that?</span>
<span class="comment-copy">@tobias_k I think it follows from <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">the scoping rules</a>, but I can't really pinpoint it exactly. Maybe someone with a bit more expirience or time can chip in.</span>
