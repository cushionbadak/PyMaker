<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15889131/how-to-find-the-cumulative-sum-of-numbers-in-a-list">How to find the cumulative sum of numbers in a list?</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>Given the following list:</p>
<pre><code>a=[1,2,3]
</code></pre>
<p>I'd like to generate a new list where each number is the sum of it and the values before it, like this:</p>
<pre><code>result = [1,3,6]
</code></pre>
<p>Logic: </p>
<p>1 has no preceding value, so it stays the same.</p>
<p>3 is from the first value (1) added to the value of the second number in the list (2)</p>
<p>6 is from the sum of 1 and 2 from the first two elements, plus the third value of 3.</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you'd like a numpy solution</p>
<pre><code>from numpy import cumsum
result = list(cumsum(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate</code></a> for exactly this purpose:</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; list(accumulate(a))
[1, 3, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a function for this.</p>
<pre><code>import itertools

result = list(itertools.accumlate([1, 2, 3]))
</code></pre>
<p>Python itertools solve some problems really well you should take some time and read over them.</p>
<p><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>How about an ordinary loop?</p>
<pre><code>a = [1,2,3]
result = []
s = 0
for item in a:
    s += item
    result.append(s)

print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this..</p>
<pre><code>def running_sum(a):
  tot = 0
  for item in a:
    tot += item
    yield tot

a = [1,2,3,4]
print list(running_sum(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are about a hundred different ways to do this kind of cumulative sum. Depending on what you actually want to use the result for, a less obvious or less general-purpose solution <em>might</em> be more time- or memory-efficientâ€”although the simple solution below is O(1) in terms of memory and O(N) in time.</p>
<p>The most straightforward procedural approach in virtually every imperative programming language goes something like this:</p>
<pre><code>csum=0
result=[]
for val in a:
    csum += val
    result.append(csum)
</code></pre>
<p>The Python standard library also includes a function to do just this: <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>.</p>
<pre><code>import itertools
result = list(itertools.accumulate(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Avinash Raj's code doesn't work correctly.</p>
<pre><code>a = [1,2,3]
b = [sum(a[:(i+1)]) for i, j in enumerate(a)]
print(b)
</code></pre>
<p>Edited based on @Avinash Raj</p>
</div>
<span class="comment-copy">I wounder if it is that much faster then the built in Python version.</span>
<span class="comment-copy">yep, much simpler one <code>[sum(a[:i+1]) for i,j in enumerate(a)]</code></span>
