<div class="post-text" itemprop="text">
<p>My understanding is that when Python parses the source code of a function, it compiles it to bytecode but doesn't run this bytecode before the function is called (which is why illegal variable names in functions does not throw an exception unless you call the function).</p>
<p>Default arguments are <em>not</em> instantiated during this initial setup of the function, but only when the function is called for the first time, regardless of whether the arguments are supplied or not. This same instance of the default argument is used for all future calls, which can be seen by using a mutable type as a default argument.</p>
<p>If we put the function inside of another function, however, the default argument now seems to be re-instantiated each time the outer function is called, as the following code shows:</p>
<pre><code>def f(x):
    def g(y, a=[]):
        a.append(y)
        return a

    for y in range(x, x + 2):
        print('calling g from f:', g(y))
    return g(y + 1)

for x in range(2):
    print('calling f from module scope:', f(x))
</code></pre>
<p>This prints out</p>
<pre><code>calling g from f: [0]
calling g from f: [0, 1]
calling f from module scope: [0, 1, 2]
calling g from f: [1]
calling g from f: [1, 2]
calling f from module scope: [1, 2, 3]
</code></pre>
<p>Does this mean that every time <code>f</code> is called, the bytecode of <code>g</code> is rebuild? This behavior seems unnecessary, and weird since the bytecode of <code>f</code> (which include <code>g</code>?) is only build once. Or perhaps it is only the default argument of <code>g</code> which is reinstantiated at each call to <code>f</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>First misconception: "when Python parses the source code of a function, it compiles it to bytecode but doesn't run this bytecode before the function is called (which is why illegal variable names in functions does not throw an exception unless you call the function)." To be clear, your misconception is that "illegal variable names in functions does not throw an exception unless you call the function". Unassigned names will not be caught until the function is executed.</p>
<p>Check out this simple test:</p>
<pre><code>In [1]: def g(a):
   ...:     123onetwothree = a
  File "&lt;ipython-input-5-48a83ac30c7b&gt;", line 2
    123onetwothree = a
</code></pre>
<p>Second misconception: "default arguments are <em>not</em> instantiated during this initial setup of the function, but only when the function is called for the first time...". This is incorrect. </p>
<pre><code>In [7]: def f(x=[]):
   ...:     print(x)
   ...:     x.append(1)
   ...:     print(x)
   ...:
   ...:

In [8]: f.__defaults__
Out[8]: ([],)

In [9]: f()
[]
[1]

In [10]: f.__defaults__
Out[10]: ([1],)

In [11]:
</code></pre>
<p>As for your example, every time you run <code>f</code> the default argument is reinstantiated <em>because you define <code>g</code> inside <code>f</code></em>. The best way to think of it is to think of the <code>def</code> statement as a constructor for <code>function</code> objects, and the default arguments like parameters to this constructor. Every time you run <code>def some_function</code> it is like calling the constructor all over again, and the function is <em>redefined</em> as if had written <code>g = function(a=[])</code> in the body of <code>f</code>.</p>
<p><em>In response to comment</em></p>
<pre><code>In [11]: def f(x=h()): pass
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&lt;ipython-input-11-ecbb4a9f8673&gt; in &lt;module&gt;()
----&gt; 1 def f(x=h()): pass

NameError: name 'h' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The inner function is rebuilt using existing bytecode for the inner function. It's easy to see using <code>dis</code>.</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def make_func():
...     def my_func():
...         pass
...     return my_func
&gt;&gt;&gt; dis.dis(make_func.__code__)
  3       0 LOAD_CONST               1 (&lt;code object my_func at [...]", line 3&gt;)
          3 MAKE_FUNCTION            0
          6 STORE_FAST               0 (my_func)

  5       9 LOAD_FAST                0 (my_func)
         12 RETURN_VALUE
</code></pre>
<p>Now if you do:</p>
<pre><code>&gt;&gt;&gt; f1 = make_func()
&gt;&gt;&gt; f2 = make_func()
&gt;&gt;&gt; f1 is f2
False
&gt;&gt;&gt; f1.__code__ is f2.__code__
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just look at the bytecode for <code>f</code> with <code>dis</code>: </p>
<pre><code>dis(f)
  2           0 BUILD_LIST               0
              3 LOAD_CONST               1 (&lt;code object g at 0x7febd88411e0, file "&lt;ipython-input-21-f2ef9ebb6765&gt;", line 2&gt;)
              6 LOAD_CONST               2 ('f.&lt;locals&gt;.g')
              9 MAKE_FUNCTION            1
             12 STORE_FAST               1 (g)

  6          15 SETUP_LOOP              46 (to 64)
             18 LOAD_GLOBAL              0 (range)
             21 LOAD_FAST                0 (x)
             24 LOAD_FAST                0 (x)
             27 LOAD_CONST               3 (2)
             30 BINARY_ADD
             31 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             34 GET_ITER
        &gt;&gt;   35 FOR_ITER                25 (to 63)
             38 STORE_FAST               2 (y)
</code></pre>
<p><sup>(snipped for brevity)</sup> </p>
<p>The code object loaded for <code>g</code>:</p>
<pre><code>3 LOAD_CONST               1 (&lt;code object g at 0x7febd88411e0, file "&lt;ipython-input-21-f2ef9ebb6765&gt;", line 2&gt;)
</code></pre>
<p>doesn't contain any mutable structures, it just contains the executable code  and other immutable information. You could take a peek at it too:</p>
<pre><code>dis(f.__code__.co_consts[1])
  3           0 LOAD_FAST                1 (a)
              3 LOAD_ATTR                0 (append)
              6 LOAD_FAST                0 (y)
              9 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             12 POP_TOP

  4          13 LOAD_FAST                1 (a)
             16 RETURN_VALUE
</code></pre>
<p>Every time <code>f</code> is called, <code>MAKE_FUNCTION</code> is called which re-creates the function from the byte code that already exists there.</p>
</div>
<span class="comment-copy">Your understanding is wrong. A function definition is executable code, which Python runs whenever the scope it is in is called. For a module-level function, that happens when the module is imported; for a nested function, that happens when the outer function is called. Either way, the default arguments are instantiated at that point.</span>
<span class="comment-copy">Nice, this brings back the symmetry. The inner function is to the outer function what the outer function is to the module.</span>
<span class="comment-copy">The bytecode is not rebuilt each time, the code object is reused, as stated in <a href="http://stackoverflow.com/a/7839697/2681632">this answer</a>.</span>
<span class="comment-copy">I don't buy your example. <code>123onetwothree</code> is a syntax error, meaning that bytecote cannot be produced from it. Try some syntactically legal code, e.g.  <code>b = c</code> instead, where <code>c</code> does not exist.</span>
<span class="comment-copy">For my second misconception: Try <code>def f(x=h())</code>, where <code>h</code> does not exist. Again, no exception is thrown before calling the function.</span>
<span class="comment-copy">I thought that is what you meant by <code>illegal variable names in functions does not throw an exception unless you call the function</code>.</span>
<span class="comment-copy">@jmd_dk Of course an exception is thrown before calling the function. See the edit</span>
<span class="comment-copy">@jmd_dk for your second misconception: <a href="https://docs.python.org/3/tutorial/controlflow.html#default-argument-values" rel="nofollow noreferrer">"The default values are evaluated at the point of function definition in the defining scope, ..."</a>. Note the "evaluated at the point of function definition": if that happens to be inside another function, you'll not be getting an exception for <code>def f(x=h())</code> for example until you call the outer function, or in other words evaluate its body.</span>
<span class="comment-copy">But why design the language to do this re-create though? Surely it's bad for performance?</span>
<span class="comment-copy">@jmd_dk but what if a free variable affects the what the inner function is defined? That is a common pattern with closures (e.g with function factories), and the function has to be recreated. It's <i>suppose</i> to be recreated.</span>
<span class="comment-copy">True. So basically a function is "cleaned up" when it goes out of scope, whether that scope is another function or a module, just like any other variable. That actually makes sense.</span>
<span class="comment-copy">@jmd_dk I'm not sure exactly what you mean, but a function is cleaned up like any other object: when the reference count becomes 0.</span>
<span class="comment-copy">The code object for <code>g</code> is contained inside the code of <code>f</code> (a reference that keeps it "alive"), the function that's created with <code>MAKE_FUNCTION</code> (an object of <code>type function</code> is cleared up when execution of <code>f</code> finishes as a local var.</span>
