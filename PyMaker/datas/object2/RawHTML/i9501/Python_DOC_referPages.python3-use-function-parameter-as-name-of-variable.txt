<div class="post-text" itemprop="text">
<p>I have a function that creates different forms of arrays and I don't know how to differentiate them. Is something similar to this possible?</p>
<pre><code>def array_creator(nameArray):
    nameArray = [0,1,2]

array_creator(a)
print(a)  # prints [0,1,2]
</code></pre>
<p>At the moment I always run the function and then assign manually variables to store the arrays.
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you do this by returning a value from the function and binding this value to a local name, ie:</p>
<pre><code>def array_creator():
    return [0, 1, 2]

a = array_creator()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For your example to work you need to define your variable <code>a</code> before you use it. E.g. <code>a = []</code>. However your example won't work the way you want to. The reason for this is that you assign a new object (<code>[1, 2, 3]</code>) to your <code>nameArray</code> variable in line 2. This way you lose the reference to your object <code>a</code>. However it is possible to change your object <code>a</code> from inside the function.</p>
<pre><code>def array_creator(nameArray):
    nameArray.extend([0,1,2])

a = []
array_creator(a)
print(a)  # prints [0,1,2]
</code></pre>
<p>This will work. Have a look at <a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">How to write functions with output parameters</a> for further information.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not have "output parameters", hence a plain assignment will only change the <em>binding</em> of the local variable, but will not modify any value, nor change bindings of variables outside the function.</p>
<p>However <code>list</code>s are mutable, so if you want to modify the argument just do so:</p>
<pre><code>nameArray[:] = [0,1,2]
</code></pre>
<p>This will replace the contents of <code>nameArray</code> with <code>0,1,2</code> (works if <code>nameArray</code> is a <code>list</code>).</p>
<p>An alternative is to have your function simply return the value you want to assign:</p>
<pre><code>def array_creator():
    values = [0, 1, 2]
    return values

my_arr = array_creator()
</code></pre>
<p>Finally, if the function wants to modify a <code>global</code>/<code>nonlocal</code> variable you have to declare it as such:</p>
<pre><code>a = [1,2,3]

def array_creator():
    global a
    a = [0,1,2]

print(a)   # [1,2,3]
array_creator()
print(a)   # [0,1,2]
</code></pre>
<p>Or:</p>
<pre><code>def wrapper():
    a = [1,2,3]
    def array_creator():
        nonlocal a
        a = [0,1,2]
    return a, array_creator

a, creator = wrapper()

print(a)   # [1,2,3]
creator()
print(a)   # [0,1,2]
</code></pre>
<p>Note however that it is generally <strong>bad practice</strong> to use global variables in this way, so try to avoid it.</p>
</div>
<span class="comment-copy">but why not just do <code>a = [0, 1, 2]</code>? Why confuse people by assigning to the global scope from inside a function?</span>
<span class="comment-copy">Why not just return the array, instead of using an "output-parameter"?</span>
