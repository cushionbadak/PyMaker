<div class="post-text" itemprop="text">
<p>I am new to python and I am required to create a factorial function. I have created a function that gives the factorial of a number but I want some help from stackflow community.</p>
<p>Here is my code</p>
<pre><code>a = 5
b = 1
for i in range(1,a+1):
    b = b * i
    print b
</code></pre>
<p>And this is my output:</p>
<p><a href="https://i.stack.imgur.com/7Yq1d.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/7Yq1d.png"/></a></p>
<p>I am getting 120 (factorial value) but I am also getting other values like 1, 2, 6. How can I only print factorial value and not other values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just use the <code>Math</code> library in the Python, Try this following code</p>
<pre><code>import math
math.factorial(5)
</code></pre>
<blockquote>
<p>Answer : 120</p>
</blockquote>
<p>Or, 
In your Code, you are trying to print the 'b' inside the loop, So your getting prints in every loop time, just put the <code>print b</code> in the out side of the loop</p>
<pre><code>a = 5
b = 1
for i in range(1,a+1):
    b = b * i
print b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unindent the <code>print</code> statement so that it is only executed after the loop instead of within it, for every step.</p>
<pre><code>a = 5
b = 1
for i in range(1,a+1):
    b = b * i
print b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to show you a different approach:</p>
<pre><code>def fact(n):
    return reduce(lambda accum, element: accum * element, range(1, n+1), 1)

print fact(5)  # prints 120
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to write a function then you'll want something more like this:</p>
<pre><code>def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
</code></pre>
<p>This calculates the factorial recursively. If you want an iterative function then the following will do it:</p>
<pre><code>def factorial(n):
    res = 1
    for i in range(1, n+1):
        res *= i
    return res
</code></pre>
<p>Otherwise, you could just import the math library and use math.factorial(n) if you don't need to create the function yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Factorials are best calculated with a generator function. To retrieve the last item you can use <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">deque</a>.</p>
<pre><code>def factorial(n):
    ct = 1
    factor = 1
    while ct &lt;= n:
        yield factor
        ct = ct+1
        factor = factor * ct
from collections import deque
x = deque(factorial(10), maxlen=1).pop()
x
3628800
</code></pre>
</div>
<span class="comment-copy">Just a note that you can use <code>b *= i</code> instead of <code>b = b * i</code></span>
<span class="comment-copy">a function begins with a <code>def</code> statement. What you have code that computes the factorial.</span>
<span class="comment-copy">Well I don;t get it. I mean why is the print command inside the loop causing repetition of variable "b" ? It would be great if you could explain the difference between putting the print inside loop and outside loop</span>
<span class="comment-copy">when you are using <code>print b</code> inside the loop, then it execute every time of the loop so you will get the print every time. But you want the print in the last time only(The final value only) so just put the <code>print b</code> in the outside of the loop, then that command will be executed after the Loop, so you can get the final value of the loop.</span>
<span class="comment-copy">if is it good for your knowledge, then accept my answer, Thank you</span>
<span class="comment-copy">I actually used your code, Thanks a lot. But I wanted to know the reason behind the code  and not just copy it blindly.</span>
<span class="comment-copy"><code>Math</code> is a python library (<a href="https://docs.python.org/2/library/math.html" rel="nofollow noreferrer">docs.python.org/2/library/math.html</a>). So the <code>factorial()</code> is a function of the library</span>
<span class="comment-copy">Adding a proper <code>return</code> statement to the function would be great.</span>
<span class="comment-copy">@9000 - All that would do is cause an error, because there's no function.</span>
