<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/575196/why-can-a-function-modify-some-arguments-as-perceived-by-the-caller-but-not-oth">Why can a function modify some arguments as perceived by the caller, but not others?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>So the question is pretty strange. I wrote an algorithm to move contents of any list (array) by a given number of digits to the left.</p>
<pre><code>DIGS = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]

# move functions
def move(arr):
    this = arr
    first = this[0]
    for b in range(len(this) - 1):
        this[b] = this[b + 1]
    this[-1] = first
    return this

def move_with_step(arr, step):
    this_arr = arr
    for a in range(step):
        this_arr = move(arr)
    return this_arr
</code></pre>
<p>And, obviously, when typing <code>print(move_with_step(DIGS, 5)</code> will give us the same DIGS array but twisted. It will be something like [ 5, 6, 7... 3, 4 ]. You get the idea. And in this case it works. BUT...</p>
<blockquote>
<p>The problem is: if I'd put this same call into the <code>for</code> loop like below or just one after another, it will give me wrong results which is kinda strange because it should'n modify DIGS itself and why is that happening IDK.</p>
</blockquote>
<p>So this code</p>
<pre><code>for a in range(1, 6):
    print(move_with_step(DIGS, a))
</code></pre>
<p>Returns this</p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
[3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
[6, 7, 8, 9, 0, 1, 2, 3, 4, 5]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[5, 6, 7, 8, 9, 0, 1, 2, 3, 4]
</code></pre>
<p>in the console. Which is crazy and totally wrong. Why is that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that DIGS changes at each loop. So when you do:</p>
<pre><code>for a in range(1, 6):
    print(move_with_step(DIGS, a))
</code></pre>
<p>At the end of the first loop <code>DIGS=[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</code>. So at the second loop, it will start with <code>DIGS</code> already changed.</p>
<p>One simple solution, as stated by @depperm in the comments, is to pass a copy of the list:</p>
<pre><code>for a in range(1, 6):
    print(move_with_step(DIGS[:], a))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
[2, 3, 4, 5, 6, 7, 8, 9, 0, 1]
[3, 4, 5, 6, 7, 8, 9, 0, 1, 2]
[4, 5, 6, 7, 8, 9, 0, 1, 2, 3]
[5, 6, 7, 8, 9, 0, 1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should create a copy of the DIGS list in order to keep the original values. Then, pass a proper copy to the function and it should function fine.</p>
<p>Have a look at <a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a></p>
</div>
<span class="comment-copy">make a copy of the <code>DIGS</code> before passing it into <code>move_with_steps</code>....like <code>DIGS[:]</code></span>
<span class="comment-copy">Or do <code>this_arr = arr[:]</code> inside the function</span>
<span class="comment-copy">have you considered using <code>collections.deque</code> if you feel this is a need?</span>
<span class="comment-copy">I'd argue that using <code>.copy()</code> instead of <code>[:]</code> would be more  idiomatic and make your intent clearer.</span>
<span class="comment-copy">Or just <code>list(DIGS)</code>. That might be easier to understand.</span>
<span class="comment-copy">@leaf: <code>DIGS.copy()</code> is more idiomatic, but it should be mentioned it's only available from 3.3 onward (as OP did not specify the Python version used)</span>
<span class="comment-copy">@UnholySheep No, the OP did not say his Python version, but I can assume it is Python 3.x because <a href="https://docs.python.org/3/whatsnew/3.0.html#print-is-a-function" rel="nofollow noreferrer">he is using print as a function and not a statement</a>.</span>
<span class="comment-copy">This is wrong, it has nothing to do with deep or shallow copies (both would work in this case as it is a list of integers). The parameter passed is a reference to a list, there is no copying.</span>
<span class="comment-copy">@UnholySheep I removed the deep/shallow part, now this should be correct</span>
