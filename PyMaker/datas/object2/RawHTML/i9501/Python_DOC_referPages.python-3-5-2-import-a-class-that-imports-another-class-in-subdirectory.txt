<div class="post-text" itemprop="text">
<p>I'm new to stackoverflow and Python so sorry for the mistakes.</p>
<p>I have <code>game.py</code> that is in this project directory.</p>
<p>I have two classes, CardClass &amp; CardDeckClass in the classes subdirectory.</p>
<p>CardDeckClass uses CardClass.</p>
<pre><code>/project/game.py
/project/classes/CardClass.py
/project/classes/CardDeckClass.py
</code></pre>
<p>I'm having trouble importing CardDeckClass to <code>game.py</code></p>
<p>So far I have tried this:</p>
<pre><code>*CardClass.py*
class CardClass:
    ##functionality for CardClass

*CardDeckClass.py*
from random import shuffle
from CardClass import CardClass
class CardDeckClass:
    ##functionality for CardDeckClass

*game.py*
from classes.CardDeckClass import CardDeckClass

testDeck = CardDeckClass()
print("Amount of cards in deck: ", testDeck.getCardCount())
</code></pre>
<p>The above gives me an error on the 2nd line in CardDeckClass.py: <code>from CardClass import CardClass</code></p>
<p>ImportError: No module named 'CardClass'</p>
<p>Any tips or ideas on how to solve this issue? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>While DYZ's answer works, I think it's giving you very bad advice. If you add the <code>classes</code> folder to the Python module search path, you'll now be able to find the <code>CardClass</code> and <code>CardDeckClass</code> modules in two different ways. You can either get them directly by name at the top level (with e.g. <code>import CardClass</code>), or via the <code>classes</code> package (with <code>import classes.CardClass</code>). </p>
<p>This ambiguity is bad because Python won't realize that the two different names should refer to the same thing. Instead, you'll get two copies of everything, which can be very confusing. For example, <code>isinstance(CardClass.CardClass(), classes.CardClass.CardClass)</code> would be <code>False</code>.</p>
<p>Instead, you should fix the import in <code>CardDeckClass.py</code> to import <code>CardClass</code> properly. There are two ways you can do it, and which you want is a matter of style (there isn't a single right choice). You can either use an absolute import, naming the package in addition to the module name:</p>
<pre><code>from classes.CardClass import CardClass
</code></pre>
<p>Or alternatively you can use an explicit relative import</p>
<pre><code>from .CardClass import CardClass
</code></pre>
<p>Note the dot at the start of the module name, which tells Python to start searching within the current package.</p>
<p>You may not have realized that by putting your <code>CardClass.py</code> and <code>CardDeckClass.py</code> files in a folder you were creating a package for them. In older versions of Python (before Python 3.3), you needed to add a file named <code>__init__.py</code> to a folder before it could work as a package. That's no longer necessary (for the somewhat obscure reasons it was changed, see <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">PEP 420</a> and the PEPs it refers to). Adding an <code>__init__.py</code> file is still recommended since you usually don't need your package to be a "namespace package" (if you don't know what a namespace package is, you don't need one).</p>
<p>A final suggestion: Your module naming scheme suggests that each module you're creating has only a single class in it. That's often bad style in Python. Unlike other languages such as Java, it's quite normal for Python modules to have many classes, functions, and other things in them. Splitting up your code too much makes the imports much more complicated than they need to be. In this case, the <code>CardClass</code> and <code>CardDeckClass</code> modules should almost certainly be combined, since they deal with closely related objects. It's possible that it would make most sense to combine them into your <code>game.py</code> file, though a separate <code>cards</code> module would also be fine. There's almost certainly no need for a package here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Normally subdirectory <code>classes</code> is not on the default import path. If you want your class to be imported from a non-standard subdirectory, you've got to add it to the path:</p>
<pre><code>import sys
sys.path.append("./classes")
</code></pre>
</div>
<span class="comment-copy">Thank you for taking the time to explain the concepts and conventions to a newbie of python like me. Just wondering what the difference between a module and class is then. Is a module a file that can have many classes and functions? What is usually contained in a module?</span>
<span class="comment-copy">Yes, whatever you put in one file will be in one module inside of Python. That can include many classes (declared with the <code>class</code> statement), and also top level functions (defined with <code>def</code>). You can put any sort of object you want at the top level of a module (but classes and functions are the most common). The <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Python Tutorial</a> may be a good place to look if you want to know more about Python modules.</span>
<span class="comment-copy">Thanks for the quick answer! This is exactly what was missing.</span>
<span class="comment-copy">I think this answer, while it might work, is actually quite harmful. Messing with the module search path is not a good idea for a beginner. Understanding packages and fixing the relative import is a better solution.</span>
