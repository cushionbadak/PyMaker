<div class="post-text" itemprop="text">
<p>I am working on a project which needs bit automation and web-scrapping for which I am using <strong>Selenium</strong> and <strong>BeautifulSoup (python2.7)</strong>.</p>
<p>I want to open <strong>only one instance of a web browser</strong> and login to a website, <strong>keeping that session</strong>, I am trying to open new tabs which will be independently controlled by threads, <strong>each thread controlling a tab</strong> and performing their own task. How should I do it? An example code would be nice. Well here's my code:</p>
<pre><code>def threadFunc(driver, tabId):
    if tabId == 1:
        #open a new tab and do something in it
    elif tabId == 2:
        #open another new tab with some different link and perform some task
    .... #other cases


class tabThreads(threading.Thread):

    def __init__(self, driver, tabId):
        threading.Thread.__init__(self)
        self.tabID = tabId
        self.driver = driver

    def run(self):
        print "Executing tab ", self.tabID
        threadFunc(self.driver, self.tabID)

def func():
    # Created a main window

    driver = webdriver.Firefox()
    driver.get("...someLink...")

    # This is the part where i am stuck, whether to create threads and send
    # them the same web-driver to stick with the current session by using the
    # javascript call "window.open('')" or use a separate for each tab to
    # operate on individual pages, but that will open a new browser instance
    # everytime a driver is created

    thread1 = tabThreads(driver, 1)
    thread2 = tabThreads(driver, 2)
    ...... #other threads
</code></pre>
<p>I am <strong>open to suggestions for using any other module</strong>, if needed</p>
</div>
<div class="post-text" itemprop="text">
<p>My understanding is that Selenium drivers are not thread-safe. In the WebDriver spec, the Thread Safety section is empty...which I take to mean they have not addressed the topic at all.  <a href="https://www.w3.org/TR/2012/WD-webdriver-20120710/#thread-safety" rel="nofollow noreferrer">https://www.w3.org/TR/2012/WD-webdriver-20120710/#thread-safety</a></p>
<p>So while you could share the driver reference with multiple threads and make calls to the driver from multiple threads, there is no guarantee that the driver will be able to handle multiple asynchronous calls correctly.</p>
<p>Instead, you must either synchronize calls from multiple threads to ensure one is completed before the next starts, or you should have just one thread making Selenium API calls...potentially handling commands from a queue that is filled by multiple other threads.</p>
<p>Also, see <a href="https://stackoverflow.com/questions/30808606/can-selenium-use-multi-threading-in-one-browser">Can Selenium use multi threading in one browser?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I you are using the script to automatically submit forms (simply said doing GET and POST requests), I would recommend you to look at <a href="http://docs.python-requests.org/en/master/user/quickstart/" rel="nofollow noreferrer">requests</a>. You can easily capture Post requests from your Browser (<em>Network</em> tab in Developer Pane on both Firefox and Chrome), and submit them. Something like:</p>
<pre><code>session = requests.session()
response = session.get('https://stackoverflow.com/')
soup = BeautifulSoup(response.text)
</code></pre>
<p>and even POST data like:</p>
<pre><code>postdata = {'username':'John','password':password}
response=session.post('example.com',data=postdata,allow_redirects=True)
</code></pre>
<p>It can be easily threaded, Multiple times faster than using selenium, the only problem is there is no JavaScript or Form support, so you need to do it the old fashioned way.</p>
<p>EDIT:
Also take a look at <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">ThreadPoolExecutor</a></p>
</div>
<span class="comment-copy">Can you do the same manually, handle simultaneously several browser tabs? I guess, not... <code>Selenium</code> won't be able do this also</span>
<span class="comment-copy">Related question <a href="https://stackoverflow.com/questions/28093347/is-selenium-webdriver-thread-safe" title="is selenium webdriver thread safe">stackoverflow.com/questions/28093347/…</a></span>
<span class="comment-copy">Link to official FAQ <a href="https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe" rel="nofollow noreferrer">github.com/SeleniumHQ/selenium/wiki/…</a></span>
