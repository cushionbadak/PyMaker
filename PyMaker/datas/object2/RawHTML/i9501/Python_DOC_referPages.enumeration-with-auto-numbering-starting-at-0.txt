<div class="post-text" itemprop="text">
<p>Is there a better way to create a long list of enumeration with auto-numbering starting at 0? The closest that I can find is:</p>
<pre><code>class Color(Enum):
    red, green, blue=range(3)
</code></pre>
<p>However, the above approach requires knowing the total items in the enumeration beforehand.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/enum.html#autonumber" rel="noreferrer">The documentation</a> provides a recipe for autonumbering that can easily be adapted to start from zero:</p>
<pre><code>class AutoNumber(Enum):
     def __new__(cls):
        value = len(cls.__members__)  # note no + 1
        obj = object.__new__(cls)
        obj._value_ = value
        return obj
</code></pre>
<p>Then you can create it with arbitrary members:</p>
<pre><code>class Color(AutoNumber):
    red = ()
    green = ()
    blue = ()
</code></pre>
<hr/>
<p>Alternatively, note that the <a href="https://docs.python.org/3/library/enum.html#functional-api" rel="noreferrer">functional API</a> can take an iterable of key-value pairs:</p>
<pre><code>from itertools import count

Color = Enum('Color', zip(['red', 'green', 'blue'], count()))
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count</code></a> is basically an open-ended equivalent of <code>range</code>.</p>
<hr/>
<p>However, the docs also provide the reason for members generally starting with <code>1</code>:</p>
<blockquote>
<p>The reason for defaulting to <code>1</code> as the starting number and not <code>0</code> is
  that <code>0</code> is <code>False</code> in a boolean sense, but enum members all evaluate to
  <code>True</code>.</p>
</blockquote>
<p>Starting from zero may lead to confusing behaviour later on.</p>
</div>
<span class="comment-copy">There's an <code>AutoNumber</code> in the docs: <a href="https://docs.python.org/3/library/enum.html#autonumber" rel="nofollow noreferrer">docs.python.org/3/library/enum.html#autonumber</a></span>
<span class="comment-copy">What do you gain by starting at zero when the elements are arbitrary?</span>
<span class="comment-copy">@jonrsharpe <code>AutoNumber</code> starts at 1, much like the functional API: <code>Color = Enum('Color', ['red', 'green', 'blue'])</code></span>
<span class="comment-copy">Why do you need it to start at <code>0</code>, according to the docs enum members evaluate to <code>True</code> so starting at <code>1</code> was chosen to avoid confusion with <code>0</code> being <code>False</code>.</span>
<span class="comment-copy"><code>AutoNumber</code> isn't defined by the module; it's just an example that you could easily adapt to Python 2 and starting with 0.</span>
<span class="comment-copy">your answer is close to what I am looking for, but the statement Color.red == 0 does not evaluate to True, even  I use IntEnum instead of Enum</span>
<span class="comment-copy">@cash why does that matter?</span>
<span class="comment-copy">My bad, IntEnum does the trick! Problem solved. Thanks!</span>
<span class="comment-copy">@cash no problem, but see <a href="http://stackoverflow.com/help/someone-answers">stackoverflow.com/help/someone-answers</a></span>
