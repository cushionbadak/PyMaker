<div class="post-text" itemprop="text">
<p>In <a href="https://docs.python.org/2/library/random.html" rel="nofollow noreferrer">Python 2 documentation of the <code>random.seed()</code></a> function I found a warning:</p>
<blockquote>
<p>If a hashable object is given, deterministic results are only assured
  when PYTHONHASHSEED is disabled.</p>
</blockquote>
<p>From <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer">https://docs.python.org/2/using/cmdline.html#envvar-PYTHONHASHSEED</a> I infer that the <code>-R</code> switch of the interpreter may have similar effect as <code>PYTHONHASHSEED</code>.</p>
<p>I have verified empirically, that random numbers seeded with small integers seems to be reproducible. So do hashes of small integers.</p>
<p>However, <code>int</code> is hashable. Is it stated explicitly in any trusted source, that it is safe to use it as a seed for a reproducible sequence of random numbers?</p>
<p>In contrast to <a href="https://stackoverflow.com/questions/8786084/reproducibility-of-python-pseudo-random-numbers-across-systems-and-versions">Reproducibility of python pseudo-random numbers across systems and versions?</a>,  reproducibility within same system and interpreter is enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not a complete answer but the source code for <a href="https://hg.python.org/cpython/file/2.7/Modules/_randommodule.c#l237" rel="nofollow noreferrer"><code>random_seed</code> (in C)</a> would be relevent:</p>
<pre><code>if (PyInt_Check(arg) || PyLong_Check(arg))
    n = PyNumber_Absolute(arg);
else {
    long hash = PyObject_Hash(arg);
    if (hash == -1)
        goto Done;
    n = PyLong_FromUnsignedLong((unsigned long)hash);
}
</code></pre>
<p>this would suggest that anything other then a <code>long</code> (int) directly uses the hash value as the seed, so as long as:</p>
<ol>
<li><code>hash(int)</code> gives consistent results and</li>
<li>You are using this implementation of seed (may not be the same for Jython etc.)</li>
</ol>
<p>Then I'd expect <code>seed(int)</code> to yield consistent results.</p>
<p>That said I can't speak for either of those conditions staying constant so this doesn't really give a definitive answer unless someone else can verify them.</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation confirms its safety in Python 2.6:</p>
<blockquote>
<p>If x is not None or an int or long, hash(x) is used instead. If x is an int or long, x is used directly.</p>
</blockquote>
<p>(from <a href="https://docs.python.org/2.6/library/random.html#random.seed" rel="nofollow noreferrer">https://docs.python.org/2.6/library/random.html#random.seed</a>)</p>
<p>[EDIT]</p>
<p>The documentation for 2.7 has been updated to:</p>
<blockquote>
<p>If a is not None or an int or a long, then hash(a) is used instead. Note that the hash values for some types are nondeterministic when PYTHONHASHSEED is enabled.</p>
</blockquote>
</div>
<span class="comment-copy">I would consider that a documentation flaw; it should say that ints and longs are not hashed. In any case, the Python 2 implementation is unlikely to change at this point, and the <a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow noreferrer">Python 3 documentation</a> mentions that ints (Python 2 longs) are used directly.</span>
<span class="comment-copy">That looks like the Python 3 source code. The <a href="https://hg.python.org/cpython/file/2.7/Modules/_randommodule.c#l231" rel="nofollow noreferrer">Python 2 code</a> would be more relevant.</span>
<span class="comment-copy">@user2357112 ok but other then checking if it is an <code>int</code> or <code>long</code> instead of just <code>long</code> the relevant parts are pretty much the same no?</span>
<span class="comment-copy">@TadhgMcDonald-Jensen I agree with user2357112. It is not about <code>int</code>/<code>long</code> difference. The question was about Python 2 specifically, so Python 2.7 source code seems more appropriate</span>
