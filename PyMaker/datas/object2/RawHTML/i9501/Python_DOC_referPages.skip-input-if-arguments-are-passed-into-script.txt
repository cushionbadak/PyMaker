<div class="post-text" itemprop="text">
<p>I can't quite put this all together...
At the beginning of my script I have some user input to get basic information:</p>
<pre><code>def get_provider():
    print("Operations are ... ", conversion_type )
    conversion = input('Enter conversion ')
</code></pre>
<p>This (and a few other user input sections) are what drive the rest of the script.</p>
<p>I would like to be able to just pass in the variables, and use argv to set the variables, rather that use the user input section. That is more for debugging purposes. I do not want to do-away with the user input section though. Just skip if args are passed in.</p>
<p>I think the solution revolves around argv parse and <code>if __name__ == "__main__": ...</code>, but as I said, I can't quite put it all together.</p>
<p>Here is an example of something I tried, which didn't quite work:</p>
<pre><code>def get_provider():
    print("Operations are ... ", conversion_types )
    conversion_type = input('Enter conversion ')
conversion_type = get_provider()

def main():
    conversion_type = sys.argv[0]

if __name__ == '__main__':
    main()

... the rest of the script...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at module <code>sys</code>.</p>
<pre><code>import sys

if len(sys.argv) &gt; 1:  
    # There are arguments to the script
else: 
    #Â There aren't arguments to the script
    # use input to take arguments
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick hacky way to do it (i'm writing this since you want to have quick debugging) is to check the length of <code>argv</code>. If the length is more than <code>1</code>, then you have <code>len(sys.argv) - 1</code> arguments as the first element is the file name. Let's say you have one number as your input.</p>
<p><strong>This solution will work if you use</strong> <code>python script.py</code> <strong>to run your script</strong>. Beware if you are using something more complicated.</p>
<pre><code>def get_provider():
    print("Operations are ... ", conversion_types )
    conversion_type = input('Enter conversion ')

def main():
    if len(sys.argv) == 1:
        # only your file name
        conversion_type = get_provider()
    else:
        conversion_type = sys.argv[1]

if __name__ == '__main__':
    main()

... the rest of the script...
</code></pre>
<hr/>
<p>For a more sustainable solution, please use the library <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>. This <a href="https://stackoverflow.com/questions/7427101/dead-simple-argparse-example-wanted-1-argument-3-results">answer</a> might get you started.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example of an optional positional argument using <code>argparse</code>.</p>
<p>This example will use a command line argument if given.  Otherwise it will prompt the user for input.  Either way, <code>conversion_type</code> gets populated.</p>
<pre><code>#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('conversion_type', nargs='?')
args = parser.parse_args()

if args.conversion_type:
    conversion_type = args.conversion_type
else:
    conversion_type = input('conversion_type: ')
print(conversion_type)
</code></pre>
</div>
<span class="comment-copy">you should look at the length of <code>argv</code> for a quick hacky way or best use <code>argparse</code></span>
<span class="comment-copy">couldn't you rewrite <code>get_provider</code> to take the <code>conversion</code> as an argument then get it as input from the user in the <code>main</code>?</span>
<span class="comment-copy">Ah ok. Yeah. I think I dig this solution. Is there anything wrong with doing it this way? Seems, maybe, too simple?</span>
<span class="comment-copy">There are no downsides of using module <code>sys</code> :) This is the simplest/nicest way</span>
<span class="comment-copy">This is also a good solution. But I have a question... In this case, using <code>if __name__ == '__main__':     main() </code> would this work if I import this script, and send it the variables that would have otherwise come in through cli args? If so, do I have to indent everything below <code>if __name__ == '__main__':     main()</code> or will it basically just pick up the script from there...</span>
<span class="comment-copy">It's nearly the same as the answer you accepted, except for the extra detailing.</span>
