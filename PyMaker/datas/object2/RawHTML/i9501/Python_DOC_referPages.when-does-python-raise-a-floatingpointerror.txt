<div class="post-text" itemprop="text">
<p>Python documentation says that FloatingPointError is raised when a float calculation fails. But what is exactly meant here by <em>"a float calculation"</em>?
I tried adding, multiplying and dividing with floats but never managed to raise this specific error. Instead, i got a <code>TypeError</code>:</p>
<pre><code>10/'a'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for /: 'int' and 'str'
</code></pre>
<p>Can someone help me understand when a <code>FloatingPointError</code> is raised in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is part of the <a href="https://docs.python.org/3.6/library/fpectl.html" rel="nofollow noreferrer"><code>fpectl</code></a> module. The <a href="https://docs.python.org/3.6/library/fpectl.html#fpectl.FloatingPointError" rel="nofollow noreferrer"><code>FloatingPointError</code></a> shouldn't be raised if you don't explicitly turn it on (<code>fpectl.turnon_sigfpe()</code>).</p>
<p>However mind the note:</p>
<blockquote>
<p>The <code>fpectl</code> module is not built by default, and its usage is discouraged and may be dangerous except in the hands of experts.  See also the section <code>fpectl-limitations</code> on limitations for more details.</p>
</blockquote>
<p>Update: The <code>fpectl</code> module has been <a href="https://docs.python.org/3.7/whatsnew/3.7.html#module-removals" rel="nofollow noreferrer">removed as of Python 3.7</a>.</p>
<hr/>
<p>Even with FloatingPointErrors turned on, <code>10/'a'</code> will never raise one. It will always raise a TypeError. A FloatingPointError will only be raised for operations that reach the point of actually performing floating-point math, like <code>1.0/0.0</code>. <code>10/'a'</code> doesn't get that far.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also trigger a <code>FloatingPointError</code> within <code>numpy</code>, by setting the appropriate <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.seterr.html" rel="nofollow noreferrer"><code>numpy.seterr</code></a> (or <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.errstate.html#numpy.errstate" rel="nofollow noreferrer"><code>numpy.errstate</code></a> context manager) flag.  For an example taken from the documentation:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; np.sqrt(-1)
nan
&gt;&gt;&gt; with np.errstate(invalid='raise'):
...     np.sqrt(-1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
FloatingPointError: invalid value encountered in sqrt
</code></pre>
</blockquote>
<p>Interestingly, it also raises <code>FloatingPointError</code> when all operands are integers:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; old_settings = np.seterr(all='warn', over='raise')
&gt;&gt;&gt; np.int16(32000) * np.int16(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
FloatingPointError: overflow encountered in short_scalars
</code></pre>
</blockquote>
<p>The documentation notes the conditions under which the <code>FloatingPointError</code> will be raised:</p>
<blockquote>
<p>The floating-point exceptions are defined in the IEEE 754 standard [1]:</p>
<ul>
<li>Division by zero: infinite result obtained from finite numbers.</li>
<li>Overflow: result too large to be expressed.</li>
<li>Underflow: result so close to zero that some precision was lost.</li>
<li>Invalid operation: result is not an expressible number, typically indicates that a NaN was produced.</li>
</ul>
</blockquote>
</div>
<span class="comment-copy">Just <a href="https://en.wikipedia.org/wiki/IEEE_floating_point" rel="nofollow noreferrer">read the IEEE floating-point standard</a> to understand what kind of operation fail. Something like <code>1.0/0.0</code> for example will raise an exception (divide by zero)!</span>
<span class="comment-copy">@sascha this would be a <code>ZeroDivisionError</code> error though.</span>
<span class="comment-copy">@Ev.Kounis Interesting design decision. But well, you are right!</span>
<span class="comment-copy">On a second thought, i like the question..</span>
<span class="comment-copy">@Ev.Kounis If you use <code>fpectl.turnon_sigfpe</code> to intercept floating point arithmetic "Division by Zero, Overflow, or Invalid Operation" are (or may) be turned into <code>FloatingPointError</code>.</span>
<span class="comment-copy">Thanks @Mseifert but i quite did not get it.If i have understood it correct it means that it would never be raised unless I turn it on?</span>
<span class="comment-copy">@SudeahKrishna Actually anyone could manually raise a <a href="https://docs.python.org/3/library/exceptions.html#FloatingPointError" rel="nofollow noreferrer"><code>FloatingPointError</code></a>. But the standard libraries won't raise them if python isn't compile with <code>--with-fpectl</code> and you manually set <code>fpectl.turnon_sigfpe()</code> (and even then it might not work on your computer because that module is highly OS-specific).</span>
<span class="comment-copy">How can i compile it with <code>--with-fpect1</code> as i can not even import the module <code>fpect1</code>.I tried on CentOS6 and Windows10 as well</span>
<span class="comment-copy">@SudeahKrishna I assume you can't just compile the <code>fpectl</code> module, I assume you need to build <b>Python from source</b> and use <code>./configure --with-fectl</code>.</span>
