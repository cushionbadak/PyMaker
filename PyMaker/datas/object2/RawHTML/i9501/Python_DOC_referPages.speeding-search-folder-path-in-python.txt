<div class="post-text" itemprop="text">
<p>I am using python 2.7 and trying to <strong>search folder not file</strong>. </p>
<p>We have specific project number for every project and evry documents goes to project folder under any project. So , we have to search the project folder if it is exist or valid.</p>
<p>My script can find the specific folder but it takes long time (about 11 to 13 minutes to complete the process)</p>
<p>I would like to share my script work to have some better ideas. </p>
<pre><code>import os                            

path=r"F:\Projekte"

def find_directory():
    for root, dirs, files in os.walk(path):
        for i in dirs:
            if i=="A9901001":
                print root

find_directory()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>why no just this?</p>
<pre><code>def find_directory():
    for root, dirs, files in os.walk(path):
        if "A9901001" in dirs:
            print(root, "A9901001")
</code></pre>
<p>and if you have a chace to use python3: there is <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>os.scandir</code></a> which does similar things as <code>os.walk</code> but is a lot faster on NTFS.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not execute linux <code>find</code> command or <code>tree</code> commands (<code>FIND</code> in case of windows) in python . Commands like <code>find</code> would use system indexes and probably give a faster result.</p>
<p>Something like:-
    <code>find . -type d -name "A9901001"</code></p>
<p>Python code should look something like this</p>
<pre><code>import os
paths = os.system('find . -type d -name "A9901001"')
</code></pre>
<p>Note:- Follow this solution only if you are getting some performance, since your initial approach is certainly more elegant.</p>
</div>
<span class="comment-copy">my python is linked with ArcGIS 10.4 and I am working for developing tools for ArcGIS  using its utility. Is is possible to stop looping after I have my folder?</span>
<span class="comment-copy">oh, i see. a different option would be to run the directory scans 'offline' in the background; collect the directory names in a kind of database (e.g. just a python dictionary - or sqlite or something). getting results from there should be almost instantly. you'd have to <code>walk</code> the directory tree from time to time in order to update the 'database'.</span>
<span class="comment-copy">I am using windows and I run your@hspandher suggested code. It returns me 1 . Is it possible to get full path.</span>
