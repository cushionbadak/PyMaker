<div class="post-text" itemprop="text">
<p>I have recently decided to start learning python. For most of my time I have used C++ and some things are very confusing to me.</p>
<p>Here is my code that I have problem with (full code here: <a href="http://pastebin.com/tj3qJnvM" rel="nofollow noreferrer">http://pastebin.com/tj3qJnvM</a>)</p>
<pre><code>class Display:

    def __init__(self, background):
        resolution = (800, 600)    
        screen = pygame.display.set_mode(resolution)
        background = pygame.Surface(screen.get_size())
        background.fill((255, 255, 255))
        background = background.convert()

def init(map, background):
    pygame.init()
    display = Display(background)
    map.draw(background)

def main():
    background = None
    init(map, background)
</code></pre>
<p>When I call <code>display = Display(background)</code> in <code>init</code> (line 61), it should initialize background so it can be used on the next line. Instead I get error saying that background is None.</p>
<p>If I understand it correctly it's due to the fact that background was set to None and None is not mutable so it creates local variable background in Display constructor.</p>
<p>How should I approach this situation?</p>
<p>I know it would be best to make background a member of Display class but I want to understand how to create something similar to declaring a pointer/reference in C. And then initialize it in some function. 
This would be useful to pass it then to some functions.</p>
<p>Is it possible in python or is workaround needed every time?</p>
</div>
<div class="post-text" itemprop="text">
<p>Fixed. I think you're looking for preserved state in class instance variables. Use <code>self.</code> if you want to save stuff on the class. Like most languages, variables, unless specifically defined as global, will not affect anything outside their scope. I added <code>self.</code> and removed the background variable function parameter. </p>
<pre><code>class Display:

    def __init__(self):
        resolution = (800, 600)    
        screen = pygame.display.set_mode(resolution)
        background = pygame.Surface(screen.get_size())
        background.fill((255, 255, 255))
        self.background = background.convert()

def init(map):
    pygame.init()
    display = Display()
    map.draw(display.background) 

def main():
    init(map)
</code></pre>
<p>Additionally you haven't defined <code>map</code> so you're going to have problems with <code>map.draw</code>. It only runs because <code>map</code> just happens to be a built-in Python function. </p>
<p>EDIT: nevermind, forget what I just said ^.</p>
<p>I see your full code sample defines it. </p>
</div>
<span class="comment-copy">Please put a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in the question. Also you're not using <code>self.</code> for what I assume are intended to be instance attributes; read a tutorial.</span>
<span class="comment-copy">Sorry, now example should be more readable. I want to initialize background from main inside other function so I don't want to use self in this case.</span>
<span class="comment-copy">Maybe have a read through <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">section 9, Classes</a> of the tutorial. Looks like you need to spend some more time learning how to do things the Python way. . <code>display</code> is an instance of <code>Display</code> and its attributes are accessed with <code>display.attribute</code>. - But the way you wrote your class, there aren't any instance attributes. You should also probably read through <a href="https://docs.python.org/3/references/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">naming and binding</a>.</span>
<span class="comment-copy">Because I don't want it to be attribute of display. I want background to be in main. That's why I pass it as argument to functions</span>
<span class="comment-copy"><code>return</code> in Python can send many objects so there is no need to use pointers as arguments - you can simple do <code>display, background = init()</code> and <code>return display, background</code></span>
<span class="comment-copy">For that reason I would advise against using "map" as a parameter name, but technically it shouldn't cause any problems in this very limited case (because it only exists within the scope of a function call)</span>
<span class="comment-copy">Yeah that's exactly what I did and it's working nice. It's much better approach to put background inside class. Thanks!  Edit: you forgot to put self. before other "background" :)</span>
<span class="comment-copy">No, the other <code>background</code> variable is just a local variable and does not have a <code>self.</code> in front of it. It is only set after it is returned from <code>.convert()</code>. Making it a class field is redundant as it will just be overwritten by <code>self.background = [self.]background.convert()</code> anyway.</span>
