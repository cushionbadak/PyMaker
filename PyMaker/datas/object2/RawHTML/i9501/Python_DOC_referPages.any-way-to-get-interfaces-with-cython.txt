<div class="post-text" itemprop="text">
<p>My application needs to have several Cython <code>cdef</code> classes that inherit from a single base class, but yet still implement many interfaces. These interfaces would be used to do <code>isinstance()</code> checks on the classes to make sure they conform to certain interfaces. </p>
<p>I know Cython doesn't support multiple inheritance, but is there any way at all to implement interface-like behavior. It seems like a rather glaring limitation in Cython and I'm sure I'm not the only person to encounter this problem. </p>
</div>
<div class="post-text" itemprop="text">
<p>You do it exactly as you would in pure Python when faced with a base class that you can't change but that you want to associate with an interface: you use the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abstract base classes module</a></p>
<p>There's two options to chose from:</p>
<ol>
<li>you either <code>register</code> your class as belonging to an interface ("abstract base class") like I've done for <code>InterfaceA</code>, or </li>
<li>you give your interface a <code>__subclasshook__</code> that allows it to claim any class with the right methods like I've done for <code>InterfaceB</code>.</li>
</ol>
<p>Example:</p>
<pre><code>import abc

# define the interfaces as normal (non-Cython) Python classes
class InterfaceA(metaclass=abc.ABCMeta):
    # Python3 syntax. metaclasses are slightly different in python2   
    pass

class InterfaceB(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def useful_function(self):
        raise NotImplementedError()

    @classmethod
    def __subclasshook__(cls,other_cls):
        if cls is InterfaceB:
            if any("useful_function" in B.__dict__ for B in C.__mro__):
                return True
        return NotImplemented


# our Cython class
cdef class C:
    def useful_function(self):
        return 1

c = C()

print(isinstance(c,InterfaceA)) # prints False
InterfaceA.register(C)
print(isinstance(c,InterfaceA)) # prints True
print(isinstance(c,InterfaceB)) # prints True
</code></pre>
</div>
<span class="comment-copy">Can you give an example of such interfaces in your Python code?  Normally people start with Python code and port performance critical parts to <code>cython</code>.  Or use <code>cython</code> as glue between Python code and <code>c</code> or <code>c++</code> code.</span>
<span class="comment-copy">Ah, I see, we're bailing out into pure python to do our inheritance. That works, and it's a bit more elegant than the hack I was thinking up.</span>
<span class="comment-copy">It's not quite that: <code>class C</code> is still a Cython class and doesn't inherit from classes <code>InterfaceA</code> and <code>InterfaceB</code>. However <code>InterfaceA</code> and <code>InterfaceB</code> use pure Python to modify the behaviour of <code>isinstance</code> when it's called on them.</span>
<span class="comment-copy">See also this excellent answer, which also mentions multiple inheritance: <a href="https://stackoverflow.com/a/3392406/1959808">stackoverflow.com/a/3392406/1959808</a></span>
