<div class="post-text" itemprop="text">
<p>A post by <a href="http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html" rel="nofollow noreferrer">Ned Batchelder back in <sup>1</sup>2008</a> made the claim the Python code objects are marshalled in Python bytecode files:</p>
<blockquote>
<p>[...] The entire rest of the file is just the output of <a href="https://docs.python.org/3/library/marshal.html#marshal.dump" rel="nofollow noreferrer"><code>marshal.dump()</code></a> of the code object that results from compiling the source file.</p>
</blockquote>
<p>This may apply to code objects created at the Python level, but how exactly are these code objects marshalled at the C level?</p>
<p>I've looked over the documentation for <a href="https://docs.python.org/3.5/c-api/code.html" rel="nofollow noreferrer">Python code objects(version 3.5)</a>,  and not much is said about them and certainly doesn't provide an information about how their marshalled:</p>
<blockquote>
<p>The C structure of the objects used to describe code objects. The fields of this type are subject to change at any time.</p>
</blockquote>
<p>I've also tried to take a look at the <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects/codeobject.c" rel="nofollow noreferrer">Python code object's source code</a>, but couldn't really find anything that answered my question.</p>
<p>If Python code objects are implemented using structs at the C level - which I believe they are - how then can they be marshalled into bytecode files? As far as the research I've done, C provides no built in methods for marshalling nor any third-party libraries?</p>
<p>If code objects are marshalled at the C level, how exactly is it done? If not, how <em>are</em> they encoded into the bytecode? </p>
<p><sup>1</sup><sub>I especial noted the date because perhaps this detail has changed between Python versions</sub>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>This may apply to code objects created at the Python level, but how exactly are these code objects marshalled at the C level?</p>
</blockquote>
<p>With <code>marshal.dump</code>, or perhaps one of the related interfaces like <code>marshal.dumps</code>.</p>
<p>It's not as simple as "delegate to some C standard library function"; the marshalling and unmarshalling implementation comprises an <a href="https://hg.python.org/cpython/file/3.5/Python/marshal.c" rel="nofollow noreferrer">1820-line file</a> you'd have to read if you want to see every detail. With how Python-specific its data structures and functionality are, most of the object tree traversal and serialization need to be written from scratch.</p>
</div>
<span class="comment-copy">"how exactly are these code objects marshalled at the C level?" - with <code>marshal.dump</code>, like it said. The C API for it goes by a slightly different name, but it's pretty much the same function. If you want to see the (deliberately undocumented) details of how <code>marshal.dump</code> works, you can <a href="https://hg.python.org/cpython/file/3.5/Python/marshal.c" rel="nofollow noreferrer">read the code</a>.</span>
<span class="comment-copy">@user2357112 So they basically must implement a marshalling API from scratch?</span>
<span class="comment-copy">Yup, just like they needed to do that for pickling. <code>marshal</code> is a Python-specific format for Python-specific data structures; there wasn't going to be some <code>mrshl</code> function in the C standard library that knows exactly what to do already.</span>
