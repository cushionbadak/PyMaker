<div class="post-text" itemprop="text">
<p>I have miniconda installed and running various versions of python in different environments. I've created a <em>temperature.py</em> file and saved it in a folder called python in my root directory: /Users/name</p>
<p>When I type <em>python</em> on the terminal and then run <em>import temperature.py</em> from the terminal I get this error:</p>
<p>ImportError: No module named 'temperature'</p>
<p>Where should I have saved the temperature.py file?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first place Python looks for modules to import is the working directory (i.e. the the directory of if you passed a script to python) or if you just launched python without a script, the directory you were in when you opened python. Failing to find it there, it uses the PYTHONPATH variable and if not found there either, it uses the a path specified in the installation of Python.</p>
<p>At runtime you can check with sys.path the actual paths it is looking in.</p>
<pre><code>import sys
print(sys.path)
</code></pre>
<p>And you can even modify <code>sys.path</code> if you need to. Add to the beginning as that is the place import will look first:</p>
<pre><code>import sys
sys.path.insert(0, &lt;path_of_temperature.py&gt;)
</code></pre>
<p>Source <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a></p>
<p>6.1.2. The Module Search Path</p>
<p>When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path. sys.path is initialized from these locations:</p>
<ol>
<li>The directory containing the input script (or the current directory 
when no file is specified).</li>
<li>PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).</li>
<li>The installation-dependent default.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Copy/move <code>temperature.py</code> into your current working directory.</p>
<p>You can find out this directory from the Python prompt:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>temperature.py</code> file needs to be findable by Python.  Python looks for importable packages in <code>sys.path</code>:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.path)
['', ...]
</code></pre>
<p>You can either:</p>
<p>(1) add the <code>temperature.py</code> file to a directory that is on <code>sys.path</code> (the first item is the empty string so your current working directory will always work).</p>
<p>(2) dynamically add the directory (it's customary to add at the front)</p>
<pre><code>  import sys
  sys.path.insert(0, path-to-directory-containing-temperature.py)
</code></pre>
<p>(3) Add the directory to the <code>PYTHONPATH</code> environment variable.</p>
<p>(4) Create a package and install it (in development mode if you're working on it):</p>
<pre><code>(dev) go|c:\srv\tmp\temp&gt; cat temperature.py
def get_temp():
    print 42
</code></pre>
<p>add a very minimalistic setup.py file:</p>
<pre><code>(dev) go|c:\srv\tmp\temp&gt; cat setup.py
from setuptools import setup
setup(
    name='temp',
    py_modules=['temperature']
)   
</code></pre>
<p>install in dev mode</p>
<pre><code>c:\srv\tmp\temp&gt; python setup.py develop
running develop
running egg_info
...
Creating c:\python27\lib\site-packages\temp.egg-link (link to .)
Adding temp 0.0.0 to easy-install.pth file

Installed c:\srv\tmp\temp
Processing dependencies for temp==0.0.0
Finished processing dependencies for temp==0.0.0
</code></pre>
<p>now you can import it from anywhere (note that I'm starting from an entirely different directory):</p>
<pre><code>c:\&gt; python
Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 20:32:19) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import temperature
&gt;&gt;&gt; temperature.get_temp()
42
</code></pre>
<p>When you're just starting out I would choose (1) or (3), after a while (4) will be the best option..</p>
</div>
<span class="comment-copy">browse to /Users/name directory from terminal where temperature.py is located and then initialize python interpreter by executing python. Then execute the following: <code>import temperature</code></span>
