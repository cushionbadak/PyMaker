<div class="post-text" itemprop="text">
<p>I have a couple of Python modules, something like:</p>
<p><code>prepare_data.py</code>
<code>process_data.py</code>
<code>generate_report.py</code></p>
<p>I take an Excel file, process it and then create a .pdf report. It's very linear, procedural programming. In a main <code>caller.py</code> module, I call the functions one after another:</p>
<p><code>
prepare_data.do1()
prepare_data.do2()
</code>
<code>generate_report.do3()</code></p>
<p>etc.</p>
<p>I also have a <code>Configuration.py</code> module where I store global variables and settings that are imported in <code>prepare_data.py</code>, <code>process_data.py</code>, and <code>generate_report.py</code>.</p>
<p>However, along the execution, I am creating multiple intermediate files in the same folder where the Excel file is stored. In <code>Configuration.py</code>, it is very handy to have multiple variables that are created based on the location of the source Excel file:</p>
<pre><code>excel_file = r"C:\Data\InData.xlsx"
scratch_folder = os.path.dirname(excel_file)
out_pdf = os.path.join(scratch_folder,'PdfReport.pdf')

#scratch_folder is C:\Data
</code></pre>
<p>Then in the modules that actually do the work, I would like to import the <code>Configuration.py</code> and then use the variables from this module:</p>
<p><code>...
import Configuration as cfg
create_pdf(cfg.out_pdf)
...
</code></p>
<p>However, as I call <code>caller.py</code> and supply as an argument the path to Excel file, I cannot store the path to Excel file in <code>Configuration.py</code>.</p>
<p>If I use solutions like <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer"><code>ConfigParser</code></a> or just <a href="https://stackoverflow.com/questions/8225954/python-configuration-file-any-file-format-recommendation-ini-format-still-appr">plain <code>.conf</code> file</a>, if I understand it right, I cannot take advantage of <code>os.path.join()</code> and other Python functions for constructing paths.</p>
<p>What would be an efficient way to organize the configurations in my particular case?</p>
</div>
<div class="post-text" itemprop="text">
<p>Could you create a class? </p>
<p>in Configuration.py you would just declare a variable:</p>
<pre><code>foo = None
</code></pre>
<p>In your main program you would declare a class and as soon as you have excel_file path available, create an instance:</p>
<pre><code>class ExcelFileClass(object):
    def __init__(self, ef):
        self.scratch_folder = os.path.dirname(ef)
        ...

Configuration.foo = ExcelFileClass(excel_file)
</code></pre>
<p>In every module importing Configuration you would be able to access Configuration.foo.scratch_folder and other class variables. You could also add a get method if you want to do validation, error handling or something else to your class variables.</p>
<p>Hannu</p>
</div>
<span class="comment-copy">Thanks for posting. I've decided to use the global variables from a module, like this <a href="http://stackoverflow.com/a/13034908/3346915">stackoverflow.com/a/13034908/3346915</a>. I like having a config class as you described, however having to type <code>config.cfg.folder_name</code> is painful. Is there any way to shorten this one? Obviously I cannot do <code>from Configuration import cfg</code> as this would import initially <code>None</code>.</span>
<span class="comment-copy">To keep it simple, no. You could import dynamically to unprefixed variables, but this just adds code.  If you renamed Configuration.py to C.py or something like that, C.foo would not differ too much from foo. This is how I do it anyway.</span>
<span class="comment-copy">thanks for sharing. So, if you would need to access the <code>scratch_folder</code> from some of the modules, you would call <code>C.foo.scratch_folder</code>, right?</span>
<span class="comment-copy">That would be the case.  You would just need to add the config file to your "global" variables as a prefix.   Not optimal but easy to implement and does not involve any kind of gimmickry. Easy to debug as well if things are not what they seem.</span>
<span class="comment-copy">Thanks a lot, I got you. Since no one else has come with any solution, I'd accepted yours.</span>
