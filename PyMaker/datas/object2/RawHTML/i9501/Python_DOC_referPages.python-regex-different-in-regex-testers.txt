<div class="post-text" itemprop="text">
<p>I have some confusions regarding raw string in the following code:</p>
<pre><code>import re

text2 = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
text2_re = re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
print (text2_re) #output: Today is 2012-11-27. PyCon starts 2013-3-13.

print (r'(\d+)/(\d+)/(\d+)') #output: (\d+)/(\d+)/(\d+)
</code></pre>
<p>As how I understand the raw string, without <strong>r</strong>, the <strong>\</strong> is treated as escape character; with <strong>r</strong>, the backslash <strong>\</strong> is treated as itself literally. </p>
<p>However, what I cannot understand in the above code is that: 
In the regular expression Line 5, even though there is a <strong>r</strong>, the "<strong>\d</strong>" inside is treated as <strong>one number [0-9]</strong> instead of one backslash <strong>\</strong> plus one letter <strong>d</strong>. </p>
<p>In the second print Line 8, all characters are treated as raw strings.   </p>
<p>What is the difference?   </p>
<h1><strong>Additional Edition:</strong></h1>
<p>I made the following Four variations, with or without <strong>r</strong>: </p>
<pre><code>import re

text2 = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
text2_re = re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
text2_re1 = re.sub('(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
text2_re2 = re.sub(r'(\d+)/(\d+)/(\d+)', '\3-\1-\2', text2)
text2_re3 = re.sub('(\d+)/(\d+)/(\d+)', '\3-\1-\2', text2)

print (text2_re)
print (text2_re1)
print (text2_re2)
print (text2_re3)
</code></pre>
<p>And get the following output: </p>
<p><img alt="" src="https://i.stack.imgur.com/pAG1f.png"/></p>
<p>Could you explain these Four situations specifically? </p>
</div>
<div class="post-text" itemprop="text">
<p>You're getting confused by the difference between a string and a string literal.</p>
<p>A string literal is what you put between <code>"</code> or <code>'</code> and the python interpreter parses this string and puts it into memory. If you mark your string literal as a raw string literal (using <code>r'</code>) then the python interpreter will not change the representation of that string before putting it into memory but once they've been parsed they are stored exactly the same way.</p>
<p>This means that in memory there is no such thing as a raw string. Both the following strings are stored identically in memory with no concept of whether they were raw or not.</p>
<pre><code>r'a regex digit: \d'  # a regex digit: \d
'a regex digit: \\d'  # a regex digit: \d
</code></pre>
<p>Both these strings contain <code>\d</code> and there is nothing to say that this came from a raw string. So when you pass this string to the <code>re</code> module it sees that there is a <code>\d</code> and sees it as a digit because the <code>re</code> module <em>does not know that the string came from a raw string literal</em>.</p>
<p>In your specific example, to get a literal backslash followed by a literal d you would use <code>\\d</code> like so:</p>
<pre><code>import re

text2 = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
text2_re = re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\3-\1-\2', text2)
print (text2_re) #output: Today is 11/27/2012. PyCon starts 3/13/2013.
</code></pre>
<p>Alternatively, without using raw strings:</p>
<pre><code>import re

text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
text_re = re.sub('(\\d+)/(\\d+)/(\\d+)', '\\3-\\1-\\2', text2)
print (text_re) #output: Today is 2012-11-27. PyCon starts 2013-3-13.

text2 = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
text2_re = re.sub('(\\\\d+)/(\\\\d+)/(\\\\d+)', '\\3-\\1-\\2', text2)
print (text2_re) #output: Today is 11/27/2012. PyCon starts 3/13/2013.
</code></pre>
<p>I hope that helps somewhat.</p>
<p><strong>Edit:</strong> I didn't want to complicate things but because <code>\d</code> is not a valid escape sequence python does not change it, so <code>'\d' == r'\d'</code> is true. Since <code>\\</code> <em>is</em> a valid escape sequence it gets changed to <code>\</code>, so you get the behaviour <code>'\d' == '\\d' == r'\d'</code>. Strings get confusing sometimes.</p>
<p><strong>Edit2:</strong> To answer your edit, let's look at each line specifically:</p>
<pre><code>text2_re = re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
</code></pre>
<p><code>re.sub</code> receives the two strings <code>(\d+)/(\d+)/(\d+)</code> and <code>\3-\1-\2</code>. Hopefully this behaves as you expect now.</p>
<pre><code>text2_re1 = re.sub('(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
</code></pre>
<p>Again (because <code>\d</code> is not a valid string escape it doesn't get changed, see my first edit) <code>re.sub</code> receives the two strings <code>(\d+)/(\d+)/(\d+)</code> and <code>\3-\1-\2</code>. Since <code>\d</code> doesn't get changed by the python interpreter <code>r'(\d+)/(\d+)/(\d+)' == '(\d+)/(\d+)/(\d+)'</code>. If you understand my first edit then hopefully you should understand why these two cases behave the same.</p>
<pre><code>text2_re2 = re.sub(r'(\d+)/(\d+)/(\d+)', '\3-\1-\2', text2)
</code></pre>
<p>This case is a bit different because <code>\1</code>, <code>\2</code> and <code>\3</code> are all valid escape sequences, they are replaced with the <a href="http://unicode-table.com/en/" rel="noreferrer">unicode character</a> whose decimal representation  is given by the number. That's quite complex but it basically boils down to:</p>
<pre><code>\1  # stands for the ascii start-of-heading character
\2  # stands for the ascii start-of-text character
\3  # stands for the ascii end-of-text character
</code></pre>
<p>This means that <code>re.sub</code> receives the first string as it has done in the first two examples (<code>(\d+)/(\d+)/(\d+)</code>) but the second string is actually <code>&lt;start-of-heading&gt;/&lt;start-of-text&gt;/&lt;end-of-text&gt;</code>. So <code>re.sub</code> replaces the match with that second string exactly but since none of the three (<code>\1</code>, <code>\2</code> or <code>\3</code>) are printable characters python just prints a stock place-holder character instead.</p>
<pre><code>text2_re3 = re.sub('(\d+)/(\d+)/(\d+)', '\3-\1-\2', text2)
</code></pre>
<p>This behaves like the third example because <code>r'(\d+)/(\d+)/(\d+)' == '(\d+)/(\d+)/(\d+)'</code>, as explained in the second example.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a distinction you have to make between the python interpreter and the <code>re</code> module.</p>
<p>In python, a backslash followed by a character can mean a special character if the string is not rawed. For instance, <code>\n</code> will mean a newline character, <code>\r</code> will mean a carriage return, <code>\t</code> will mean the tab character, <code>\b</code> represents a nondestructive backspace. By itself, <code>\d</code> in a python string does not mean anything special.</p>
<p>In regex however, there are a bunch of characters that would otherwise not always mean anything in python. But that's the catch, 'not always'. One of the things that can be misinterpreted is <code>\b</code> which in python is a backspace, in regex means a word boundary. What this implies is that if you pass on an unrawed <code>\b</code> to the regular expression part of a regex, this <code>\b</code> gets substituted by the backspace <em>before</em> it is passed to the regex function and it won't mean a thing there. So you have to absolutely pass the <code>b</code> with its backslash and to do that, you either escape the backslash, or raw the string.</p>
<p>Back to your question regarding <code>\d</code>, <code>\d</code> has no special meaning whatsoever in python, so it remains untouched. The same <code>\d</code> passed as a regular expression gets converted by the regex engine, which is a separate entity to the python interpreter.</p>
<hr/>
<p>Per question's edit:</p>
<pre><code>import re

text2 = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
text2_re = re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
text2_re1 = re.sub('(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text2)
text2_re2 = re.sub(r'(\d+)/(\d+)/(\d+)', '\3-\1-\2', text2)
text2_re3 = re.sub('(\d+)/(\d+)/(\d+)', '\3-\1-\2', text2)

print(text2_re)
print(text2_re1)
print(text2_re2)
print(text2_re3)
</code></pre>
<p>The first two should be straightforward. <code>re.sub</code> does its thing by matching the numbers and forward slashes and replacing them in a different order with hyphens instead. Since <code>\d</code> does not have any special meaning in python, <code>\d</code> passed on to <code>re.sub</code> whether the expression is rawed or not.</p>
<p>The third and fourth happens because you have not rawed the strings for the replace expression. <code>\1</code>, <code>\2</code> and <code>\3</code> have a special meaning in python, representing a white (or unfilled) smiley face, a black (filled) smiley face and a heart respectively (if the characters cannot be displayed, you get these 'character boxes'). So instead of replacing by the captured groups, you are replacing the strings by specific characters.</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/rjLhg.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Not all <code>\</code> will cause problems.Python has some inbuilts like <code>\b</code> etc.So now if <code>r</code> is not there,python will consider <code>\b</code> as its own rather than <code>word boundary</code> for regex.When it it used with <code>r</code> mode then <code>\b</code> is left as it is.That's in layman language.Not much into technicals.<code>\d</code> is not a special inbuilt in python ,so that will be safe even without <code>r</code> mode.</p>
<p>Here you can <a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow">see</a> the list.This is the list which python understands and will interpret.like <code>\b</code> ,<code>\n</code> and not <code>\d</code>.</p>
<p>In the first <code>print</code> the <code>\d</code> interpretation is being done by regex module not by python.In the second <code>print</code> it is being done by python.As it is in <code>r</code> mode it will put as it is.</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel like the above answers are way over complicating it.  If you're running <code>re.search()</code>, the string you send is parsed through two layers:</p>
<ol>
<li><p>Python interprets \ characters you write <a href="https://linuxconfig.org/list-of-python-escape-sequence-characters-with-examples" rel="nofollow noreferrer">through this filter</a>.</p></li>
<li><p>Then, regular expression interprets \ characters you write <a href="https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" rel="nofollow noreferrer">through its own filter</a>.</p></li>
</ol>
<p>They happen in that order.</p>
<p>The "raw" string syntax <code>r"\nlolwtfbbq"</code> is for when you want to bypass the Python interpreter, it doesn't affect <code>re</code>:</p>
<pre><code>&gt;&gt;&gt; print "\nlolwtfbbq"

lolwtfbbq
&gt;&gt;&gt; print r"\nlolwtfbbq"
\nlolwtfbbq
&gt;&gt;&gt;
</code></pre>
<p>Note that a newline is printed in the first example, but the actual characters <code>\</code> and <code>n</code> are printed in the second, because it's raw.</p>
<p>Any strings you send to <code>re</code> go through the regular expression interpreter, so to answer your specific question, <code>\d</code> means "digit 0-9" in regular expression.</p>
</div>
<span class="comment-copy">Could you also explain the additional part in the question?</span>
<span class="comment-copy">I've had a go at explaining them. This is quite complex behaviour so hopefully I haven't just confused you more.</span>
<span class="comment-copy">repl can be a string or a function; if it is a string, any backslash escapes in it are processed. That is, \n is converted to a single newline character, \r is converted to a carriage return, and so forth. <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.sub</a></span>
<span class="comment-copy">you can test you regex here (in python and others) <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a> (check the python flavor)</span>
<span class="comment-copy">What do you mean <b>interpretation is being done by regex</b> or <b>by python</b>?   What is the difference?</span>
<span class="comment-copy">@fluency_03 <code>\d</code> means nothing for <code>python</code>.Its the <code>regex</code> module which knows <code>\d</code> is <code>[0-9]</code>.On the same lines python know <code>\b</code>,<code>\n</code> so when it finds these it will interpret them.So if you want python not to interpret these you put everything in <code>r</code> mode.</span>
