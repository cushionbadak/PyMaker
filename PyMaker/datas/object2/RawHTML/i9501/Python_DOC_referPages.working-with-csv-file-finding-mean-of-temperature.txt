<div class="post-text" itemprop="text">
<p>I need some help. So I have a
<a href="http://www.sharecsv.com/s/c41191a2fed2934688d9b6febe87b838/weather_2012.csv" rel="nofollow noreferrer">large csv file</a> (+8785 rows) .</p>
<pre class="lang-none prettyprint-override"><code>Date/Time,Temp (C),Dew Point Temp (C),Rel Hum (%),Wind Spd (km/h),Visibility (km),Stn Press (kPa),Weather
2012-01-01 00:00:00,-1.8,-3.9,86,4,8.0,101.24,Fog
2012-01-01 01:00:00,-1.8,-3.7,87,4,8.0,101.24,Fog
2012-01-01 02:00:00,-1.8,-3.4,89,7,4.0,101.26,"Freezing Drizzle,Fog"
2012-01-01 03:00:00,-1.5,-3.2,88,6,4.0,101.27,"Freezing Drizzle,Fog"
2012-01-01 04:00:00,-1.5,-3.3,88,7,4.8,101.23,Fog
2012-01-01 05:00:00,-1.4,-3.3,87,9,6.4,101.27,Fog
2012-01-01 06:00:00,-1.5,-3.1,89,7,6.4,101.29,Fog
2012-01-01 07:00:00,-1.4,-3.6,85,7,8.0,101.26,Fog
2012-01-01 08:00:00,-1.4,-3.6,85,9,8.0,101.23,Fog
2012-01-01 09:00:00,-1.3,-3.1,88,15,4.0,101.2,Fog
2012-01-01 10:00:00,-1.0,-2.3,91,9,1.2,101.15,Fog
2012-01-01 11:00:00,-0.5,-2.1,89,7,4.0,100.98,Fog
2012-01-01 12:00:00,-0.2,-2.0,88,9,4.8,100.79,Fog
2012-01-01 13:00:00,0.2,-1.7,87,13,4.8,100.58,Fog
2012-01-01 14:00:00,0.8,-1.1,87,20,4.8,100.31,Fog
2012-01-01 15:00:00,1.8,-0.4,85,22,6.4,100.07,Fog
2012-01-01 16:00:00,2.6,-0.2,82,13,12.9,99.93,Mostly Cloudy
2012-01-01 17:00:00,3.0,0.0,81,13,16.1,99.81,Cloudy
2012-01-01 18:00:00,3.8,1.0,82,15,12.9,99.74,Rain
</code></pre>
<p>So, what I basically need is to get mean of every temprature. For instance (output):</p>
<pre class="lang-none prettyprint-override"><code>Weather Mean Temperature
Clear 6.825716
Cloudy 7.970544
Drizzle 7.353659
Drizzle,Fog 8.067500
Drizzle,Ice Pellets,Fog 0.400000
Drizzle,Snow 1.050000
Drizzle,Snow,Fog 0.693333
Fog 4.303333
Freezing Drizzle -5.657143
Freezing Drizzle,Fog -2.533333
Freezing Drizzle,Haze -5.433333
........
</code></pre>
<p>What I have:</p>
<pre><code>import csv
weather_file = csv.DictReader(open("weather_2012.csv", 'r'), 
                              delimiter=',', quotechar='"')

results = {}

for row in weather_file:

    weather = row["Weather"].split(" "" ")
    if not (weather in results):
        results[weather] = {
            "max": float(row["Temp (C)"])
        }
        continue

    if float(row["Temp (C)"]) &gt; results[weather]["max"]:
        results[weather]["max"] = float(row["Temp (C)"])

y=[]
print("Weather   Mean Temperature")
for month in sorted(results, key=lambda results: results):
    y.append(results[month]["max"])

    print("%s %.1f" % (weather[month], results[month]["max"]))
</code></pre>
<p>I have to find average of certain temperature and meaning of that...</p>
<p>Certain weather condition has certain Temperature. I have to define(sort) all of the Temperatures with Weather Conditions. For example:</p>
<blockquote>
<p>"Cloudy" weather condition have been more than +300. I have to find average of its Temperature and define as "Cloudy" weather.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way to do it using Pandas</p>
<pre><code>import numpy as np
import pandas as pd

d = pd.read_csv("test.csv")
means = d.groupby('Weather')['Temp (C)'].mean()
print means
</code></pre>
<p>I assume that the data is stored in <code>test.csv</code> file. </p>
<p>pandas is a data analysis library and it has three basic concepts Series, DataFrame and Panel. Here we are creating a data frame. You can consider this as column-row representation of your data. Which is exactly what a csv does. So it is very easy to work with csv with pandas. </p>
<p>To know more check this out - <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">http://pandas.pydata.org/</a></p>
<p>This specific solution can be found here - <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html" rel="nofollow noreferrer">http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way to do it:</p>
<pre><code>#!/usr/bin/env python3
import csv
from pprint import pprint

filename = 'weather_2012.csv'
condition_mean_temps = {}

# Initially associate a list of temperature values with each condition.
with open(filename, 'r', newline='') as csvfile:
    reader = csv.reader(csvfile); next(reader)  # skip header row
    # Only need second and last value from each row of csv data file.
    for _, temperature, *_, condition in reader:
        condition_mean_temps.setdefault(condition, []).append(float(temperature))

# (Re)associate the mean of the associated list of values with each condition.
condition_mean_temps = {condition: round(sum(temperatures)/len(temperatures), 2)
                            for condition, temperatures
                                in condition_mean_temps.items()}

pprint(condition_mean_temps)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>{'Clear': 6.83,
 'Cloudy': 7.97,
 'Drizzle': 7.35,
 'Drizzle,Fog': 8.07,
 'Drizzle,Ice Pellets,Fog': 0.4,
 'Drizzle,Snow': 1.05,
 'Drizzle,Snow,Fog': 0.69,
 'Fog': 4.3,
 'Freezing Drizzle': -5.66,
 'Freezing Drizzle,Fog': -2.53,
 'Freezing Drizzle,Haze': -5.43,
 'Freezing Drizzle,Snow': -5.11,
 'Freezing Fog': -7.58,
 'Freezing Rain': -3.89,
 'Freezing Rain,Fog': -2.22,
 'Freezing Rain,Haze': -4.9,
 'Freezing Rain,Ice Pellets,Fog': -2.6,
 'Freezing Rain,Snow Grains': -5.0,
 'Haze': -0.2,
 'Mainly Clear': 12.56,
 'Moderate Rain,Fog': 1.7,
 'Moderate Snow': -5.53,
 'Moderate Snow,Blowing Snow': -5.45,
 'Mostly Cloudy': 10.57,
 'Rain': 9.79,
 'Rain Showers': 13.72,
 'Rain Showers,Fog': 12.8,
 'Rain Showers,Snow Showers': 2.15,
 'Rain,Fog': 8.27,
 'Rain,Haze': 4.63,
 'Rain,Ice Pellets': 0.6,
 'Rain,Snow': 1.06,
 'Rain,Snow Grains': 1.9,
 'Rain,Snow,Fog': 0.8,
 'Rain,Snow,Ice Pellets': 1.1,
 'Snow': -4.52,
 'Snow Pellets': 0.7,
 'Snow Showers': -3.51,
 'Snow Showers,Fog': -10.68,
 'Snow,Blowing Snow': -5.41,
 'Snow,Fog': -5.08,
 'Snow,Haze': -4.02,
 'Snow,Ice Pellets': -1.88,
 'Thunderstorms': 24.15,
 'Thunderstorms,Heavy Rain Showers': 10.9,
 'Thunderstorms,Moderate Rain Showers,Fog': 19.6,
 'Thunderstorms,Rain': 20.43,
 'Thunderstorms,Rain Showers': 20.04,
 'Thunderstorms,Rain Showers,Fog': 21.6,
 'Thunderstorms,Rain,Fog': 20.6}
</code></pre>
</div>
<span class="comment-copy">Please show some rows of the CSV file</span>
<span class="comment-copy">Do you have a question? What does that code do? What did you expect it to do instead? Give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> with a specific problem.</span>
<span class="comment-copy">Suggestion;<code>pandas</code> could probably do this much easier than what you're trying to do. You just need to group by the weather, then find the averages.</span>
<span class="comment-copy">Gee, your question looks strangely similar to this one: <a href="http://stackoverflow.com/questions/41201137/finding-maximum-temperature-for-every-month-in-a-csv-file"><i>Finding maximum temperature for every month in a csv file?</i></a>—is this part of your homework?</span>
<span class="comment-copy">@martineau It may or may not be part of his homework but that user definitly seems to be using several accounts ...</span>
<span class="comment-copy">Last part could be done with a dict comprehension, maybe you could explain more about the skipping of the middle part. Otherwise good solution.</span>
<span class="comment-copy">@Jean-FrançoisFabre: Thank you. I am unsure what you mean about explaining "the skipping of the middle part", but I replaced the last portion with a dictionary comprehended as you suggested (not that it matters much).</span>
<span class="comment-copy">I mean the <code>*_</code> part to consume all items but last one in the unpacking.</span>
<span class="comment-copy">@Jean-FrançoisFabre: The asterisk is nice new syntax introduced in Python 3. Officially it's called <b>Extended Iterable Unpacking</b> (aka the "*target feature") and it is described very well in <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">PEP 3132</a>. The only written explanation I am aware of is in the documentation for <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">Assignment statements</a>—it's referred to as a "target prefixed with an asterisk".</span>
