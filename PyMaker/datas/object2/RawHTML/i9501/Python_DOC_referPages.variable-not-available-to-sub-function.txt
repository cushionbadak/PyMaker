<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5772935/why-doesnt-a-sub-function-inherit-scope-in-python">Why doesn't a sub-function inherit scope in Python?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>This script defines a variable inside <code>main()</code>, but the variable isn't available to <code>func()</code>, which runs inside <code>main()</code>. Why is that?</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3
# vars_in_func.py
# Test script for variables within a function.

def func():
  print(greeting)

def main():
  greeting = "Hello world"
  func()

main()
</code></pre>
<p>Error:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "./vars_in_func.py", line 11, in &lt;module&gt;
    main()
  File "./vars_in_func.py", line 9, in main
    func()
  File "./vars_in_func.py", line 5, in func
    print(greeting)
NameError: name 'greeting' is not defined
</code></pre>
<p>If I convert the script to Python2, the error is the same, except it says <code>global name</code> instead of <code>name</code>.</p>
<p>I assume I'm just missing a key concept. I just started learning Python after learning Bash.</p>
<p><strong>Edit</strong>: After reading the answers, I realized my mistake: I'm still thinking in terms of Bash, where functions either run in the same shell as the caller (with the same variables), or a subshell of the caller (inherited variables).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>greeting = None

def func():
    print(greeting)

def main():
   global greeting
   greeting = "Hello world"
   func()

main()
</code></pre>
<p>In your solution, greeting defined in main function is a local variable and can't be accessed outside main function. that is the reason it was giving you errors</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know much about python but in general global variables need to be defined outside the scope of main but before the function you want to use them in. If you don't want to make a variable global you need to pass the variable into the function as a parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a lot of answers about python scoping rules, and it really matters here. But as I see your question, your misunderstanding consists in something completely different: a huge difference between defining function and calling it.</p>
<p>LEGB rule is important but what really matters here that:
<strong><em>"Scopes are determined statically, they looked up dynamically!"</em></strong>. Roughly, function knows where to look for variable (when compiled), but it does not know the variables value (before you call function).</p>
<p>In your case you simply call one function into the body of another function. When you call function the caller passes control to the callee (roughly, imagine this as a jump in your source code to the beginning of the function's codeblock). So when you call <code>func</code> you jump into <code>func</code> body. This function tries to find names: <code>print</code> and <code>greeting</code> (this process is called <code>Name resolution</code>) it looks in <code>local</code> scope, then in <code>global</code> scope (the scope where it was defined, <strong>not called</strong>) and finally in <code>builtins</code>. It finds only <code>print</code> in <code>builtins</code>. Because it did not find <code>greeting</code> name, an exception <code>NameError</code> is raised (exception is raised at the point where the error is detected) in your case in the place where <code>main</code> called <code>func</code>. And when an exception is not handled at all, the interpreter terminates execution of the program, or returns to its interactive main loop. In either case, it prints a stack backtrace, except when the exception is <code>SystemExit</code>.</p>
<p>Hope it will clarify some points for you.</p>
<p>One more place to look for information: <a href="https://docs.python.org/3/reference/executionmodel.html#execution-model" rel="nofollow noreferrer">The Python Language Reference: Execution model</a></p>
<p>p.s.: the <code>global scope</code> is always <code>module</code> (file with code) where function was defined. It is very important to understand!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, functions can't access any variable outside of the function unless its a parameter or is declared <code>global</code>.</p>
<p>This should hopefully fix the issue:</p>
<pre><code>greeting = None

def func():
    print(greeting)

def main():
   global greeting # Declaring as global means func() can access it
   greeting = "Hello world"
   func()

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://stackoverflow.com/questions/291978/short-description-of-scoping-rules">this post</a>. </p>
<p>In Python, each function has its own scope, so you can not access to the variable 'greetings' outside the function 'main', since it has been defined inside this function.</p>
</div>
<span class="comment-copy">Read about <a href="http://stackoverflow.com/questions/291978/short-description-of-scoping-rules">scope rules</a></span>
<span class="comment-copy"><code>func</code> does not "run inside <code>main()</code>".  It is just called by <code>main</code>.  That doesn't mean it gets to see local variables in <code>main</code>.</span>
<span class="comment-copy">Can you clarify why you need to mark greeting as global inside of the main method? Omitting it will lead to some bad mojo.</span>
<span class="comment-copy"><code>greeting</code> is marked as global in function <code>main()</code> because it is <i>modified</i> there. It is not marked global in function <code>func()</code> because it is <i>not modified</i> there, just referenced. Clear?</span>
<span class="comment-copy">That's not quite true. A function can <i>access</i> global variables, but it cannot <i>assign</i> to them unless they are declared <code>global</code> within the function's scope.</span>
