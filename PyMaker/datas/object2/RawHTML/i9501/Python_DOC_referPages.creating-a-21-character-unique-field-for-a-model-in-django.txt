<div class="post-text" itemprop="text">
<p>I know the id is unique by itself, I want to create a unique field thats longer and less easy to guess. In short, this field will be a unique, 21 character alphanumeric string. I am doing this using this code below:</p>
<pre><code>class Organization(models.Model):
    name = models.CharField(max_length=255)
    key = models.CharField(max_length=21, unique=True, blank=True, null=True)

    def save(self, *args, **kwargs):
        if self.key == '' or self.key == None:
            key = ''
            for i in range(21):
                key += random.choice(string.lowercase + string.uppercase + string.digits)

            if Organization.objects.filter(key=key).exists():
                self.save() # Try again
            else:
                self.key = key
        super(Organization, self).save(*args, **kwargs)
</code></pre>
<p>In the <code>save</code> method, I do the following things:</p>
<ul>
<li>See if the object's key exists or not.</li>
<li>If not, I generate a 21 character key.</li>
<li>Then I check if an Organization with the key I generated exists or not.</li>
<li>If not, then the object's key is set to the generated one and saved.</li>
</ul>
<p><strong>Is this the right way to do this?</strong></p>
<p>Is there a better way with less code perhaps? Also, notice how my key field is unique, but also can be blank. Can that be an issue? So far, this has worked pretty well. Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Right now it appears that you are trying to emulate a UUID (universal unique identifier) using a <code>CharField</code>. While this approach probably won't cause too many issues (it does offer, after all, (26 + 26 + 10)**21 possible combinations), it is a pretty naive approach.</p>
<p>Why not use Django's native <a href="https://docs.djangoproject.com/en/1.10/ref/models/fields/#django.db.models.UUIDField" rel="nofollow noreferrer"><code>UUIDField</code></a>? Here is an example:</p>
<pre><code>class Organization(models.Model):
    name = models.CharField(max_length=255)
    key = models.UUIDField(default=uuid.uuid4, editable=False)
</code></pre>
<p>This will use the <a href="https://docs.python.org/3/library/uuid.html#uuid.UUID" rel="nofollow noreferrer"><code>uuid</code></a> Python module. It will generate a random UUID:</p>
<pre><code>In [1]: uuid.uuid4()
Out[1]: UUID('3be0e5db-eb0a-4f09-bda3-37006760ab38')

In [2]: uuid.uuid4()
Out[2]: UUID('8d916804-0a53-478e-8e4f-ebda5d7a69ab')
</code></pre>
<p>Obviously, these UUID's are hexadecimal and contain hyphens, but I think it's preferable to follow this convention rather than to define your own unique identifier.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can uuid4. But personally I prefer just CharField and assign the uuid4 characters to default. The reason for this is UUIDField will give lots of inconveniences while querying DB. </p>
<ul>
<li>If you want to add a row (by insert raw DB command) after generating the UUID Code in a pythonic way, it will give you some problems if you try to iterate through DJANGO-QUERIED objects. </li>
</ul>
<p>by assigning uuid code to default like below,</p>
<pre><code>from django.db import models
import uuid

class Person(models.Model):

    name = models.CharField(max_length=255)
    code = models.CharField(max_length=8, unique=True, default=uuid.uuid4)
</code></pre>
</div>
<span class="comment-copy">Not an answer, but this will be a prettier/faster implementation of the same approach: <code>key = ''.join(random.choice(...) for _ in range(21))</code></span>
<span class="comment-copy">Why not use a <a href="https://en.m.wikipedia.org/wiki/Universally_unique_identifier" rel="nofollow noreferrer">uuid</a>?</span>
