<div class="post-text" itemprop="text">
<p>While working in asyncio, I'm trying to use a list comprehension to build my task list. The basic form of the function is as follows:</p>
<pre><code>import asyncio
import urllib.request as req
@asyncio.coroutine
def coro(term):
    print(term)
    google = "https://www.google.com/search?q=" + term.replace(" ", "+") + "&amp;num=100&amp;start=0"
    request = req.Request(google, None, headers) 
    (some beautiful soup stuff)
</code></pre>
<p>My goal is to use a list of terms to create my task list:</p>
<pre><code>terms = ["pie", "chicken" ,"things" ,"stuff"]    
tasks=[
    coro("pie"),
    coro("chicken"),
    coro("things"),
    coro("stuff")]
</code></pre>
<p>My initial thought was:</p>
<pre><code>loop = asyncio.get_event_loop()
tasks = [my_coroutine(term) for term in terms]
loop.run_until_complete(asyncio.wait(tasks))
loop.close()
</code></pre>
<p>This doesn't create the task list it runs the function during the list comprehension. Is there a way to use a shortcut to create the task list wihout writing every task?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your HTTP client does not support asyncio, and you will not get the expected results.  Try this to see <code>.wait()</code> does work as you expected:</p>
<pre><code>import asyncio
import random

@asyncio.coroutine
def my_coroutine(term):
    print("start", term)
    yield from asyncio.sleep(random.uniform(1, 3))
    print("end", term)


terms = ["pie", "chicken", "things", "stuff"]
loop = asyncio.get_event_loop()
tasks = [my_coroutine(term) for term in terms]
print("Here we go!")
loop.run_until_complete(asyncio.wait(tasks))
loop.close()
</code></pre>
<p>If you use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer"><code>asyncio.gather()</code></a> you get one future encapsulating all your tasks, which can be easily canceled with <code>.cancel()</code>, here demonstrated with python 3.5+ <code>async def</code>/<code>await</code> syntax (but works the same with <code>@coroutine</code> and <code>yield from</code>):</p>
<pre><code>import asyncio

import random


async def my_coroutine(term):
    print("start", term)
    n = random.uniform(0.2, 1.5)
    await asyncio.sleep(n)
    print("end", term)
    return "Term {} slept for {:.2f} seconds".format(term, n)


async def stop_all():
    """Cancels all still running tasks after one second"""
    await asyncio.sleep(1)
    print("stopping")
    fut.cancel()
    return ":-)"


loop = asyncio.get_event_loop()
terms = ["pie", "chicken", "things", "stuff"]
tasks = (my_coroutine(term) for term in terms)
fut = asyncio.gather(stop_all(), *tasks, return_exceptions=True)

print("Here we go!")
loop.run_until_complete(fut)

for task_result in fut.result():
    if not isinstance(task_result, Exception):
        print("OK", task_result)
    else:
        print("Failed", task_result)

loop.close()
</code></pre>
<p>And finally, if you want to use an async HTTP client, try <a href="http://aiohttp.readthedocs.io/en/stable/" rel="nofollow noreferrer">aiohttp</a>.  First install it with:</p>
<pre><code>pip install aiohttp
</code></pre>
<p>then try this example, which uses <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed" rel="nofollow noreferrer"><code>asyncio.as_completed</code></a>:</p>
<pre><code>import asyncio

import aiohttp


async def fetch(session, url):
    print("Getting {}...".format(url))
    async with session.get(url) as resp:
        text = await resp.text()
    return "{}: Got {} bytes".format(url, len(text))


async def fetch_all():
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(session, "http://httpbin.org/delay/{}".format(delay))
                 for delay in (1, 1, 2, 3, 3)]
        for task in asyncio.as_completed(tasks):
            print(await task)
    return "Done."


loop = asyncio.get_event_loop()
resp = loop.run_until_complete(fetch_all())
print(resp)
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this works in python 3.5 (added the new <code>async-await</code> syntax):</p>
<pre><code>import asyncio

async def coro(term):
    for i in range(3):
        await asyncio.sleep(int(len(term)))  # just sleep
        print("cor1", i, term)

terms = ["pie", "chicken", "things", "stuff"]
tasks = [coro(term) for term in terms]

loop = asyncio.get_event_loop()
cors = asyncio.wait(tasks)
loop.run_until_complete(cors)
</code></pre>
<p>should't your version <code>yield from req.Request(google, None, headers)</code>? and (what library is that?) is this library even made for use with <code>asyncio</code>?</p>
<p>(here is the same code with the python &lt;= 3.4 syntax; the missing parts are the same as above):</p>
<pre><code>@asyncio.coroutine
def coro(term):
    for i in range(3):
        yield from asyncio.sleep(int(len(term)))  # just sleep
        print("cor1", i, term)
</code></pre>
</div>
