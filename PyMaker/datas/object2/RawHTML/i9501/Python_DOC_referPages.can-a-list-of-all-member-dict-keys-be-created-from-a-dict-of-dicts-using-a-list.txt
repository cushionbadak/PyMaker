<div class="post-text" itemprop="text">
<p>Say I have a dict of dicts:</p>
<pre><code>foo = {
    'category': {
        'key1': 'bar',
        'key2': 'bar',
        'key3': 'bar',
    },
    'category2': {
        'key4': 'bar',
        'key5': 'bar',
    },
}
</code></pre>
<p>To get a single list of all keys in the member-dicts, I have a function as follows:</p>
<pre><code>def _make_list():
    baz = list()
    for key,val in foo.items():
        baz += list(val.keys())
    return baz
</code></pre>
<p>The generated list looks like: <code>['key1', 'key2', 'key3', 'key4', 'key5', ]</code>.</p>
<p>This is simple enough, and it works, but I wonder: <strong>is there a way to accomplish this with a one-liner list comprehension</strong>? The keys of the member dicts will always be unique.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way to do it:</p>
<pre><code>&gt;&gt;&gt; [k for d in foo.values() for k in d]
['key1', 'key2', 'key3', 'key4', 'key5']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An approach would be using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a>:</p>
<pre><code>import itertools

[k for k in itertools.chain(*(d.keys() for d in foo.values()))]
</code></pre>
<p>If what you want is just a one line of code, and not necessarily a list comprehension, you can also try (mentioned by @Duncan):</p>
<pre><code>list(itertools.chain(*foo.values()))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; [k for k in itertools.chain(*(d.keys() for d in foo.values()))]
['key3', 'key2', 'key1', 'key5', 'key4']
&gt;&gt;&gt;
&gt;&gt;&gt; list(itertools.chain(*foo.values()))
['key3', 'key2', 'key1', 'key5', 'key4']
</code></pre>
</div>
<span class="comment-copy">Btw your <code>+= list(..)</code> should really be <code>.extend(...)</code></span>
<span class="comment-copy">And <code>.items()</code> is not really necessary if you are only using the values; <code>.values()</code> is enough.</span>
<span class="comment-copy">Do you really want a list of all the keys including duplicates? If not a set might be more appropriate: <code>set(itertools.chain(*foo.values()))</code> based on ettanany's answer.</span>
<span class="comment-copy">Thanks very much for your answer! I've marked it as accepted, as this is exactly what I was looking for. Would you consider explaining how it works?</span>
<span class="comment-copy"><code>[k for k in ...]</code> is generally better written as just <code>list(...)</code>, also <code>d.keys()</code> could just be <code>d</code> here and <code>(d for d in ...)</code> can also be collapsed giving <code>list(itertools.chain(*foo.values()))</code></span>
<span class="comment-copy">@Duncan I agree with you, just want to use list comprehension because the OP asked for that. I edited this answer to add your remark!</span>
<span class="comment-copy">Today I learned how to use itertools chain. I had a method for this as well but its not nearly as clean. I also used chain.fromiterable() in mine.</span>
