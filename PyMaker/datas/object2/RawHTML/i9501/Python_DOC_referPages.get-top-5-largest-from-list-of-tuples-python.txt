<div class="post-text" itemprop="text">
<p>I have a list of tuples like this (generated from a select statement with sqlite3):</p>
<pre><code>itemsAndQtyBought = [('Item no.1', 3), ('Item no.2', 0), ('Item no.3', 3), ('Item no.4', 2), ('Item no.5', 1), ('Item no.6', 9), ('Item no.7', 7)]
</code></pre>
<p>And the list carries on. It's a list of tuples and its got a product name and the quantity bought of that item. </p>
<p>I need to create anoter list of tuples of the top 5 items from that list of tuples with 5 of the items with the highest quantity bought. </p>
<p>For example with the list above it would turn out like this:</p>
<pre><code>newItemsQtyBought = [('Item no.6', 9), ('Item no.7', 7), ('Item no.3', 3), ('Item no.1', 3), ('Item no.4', 2)]
</code></pre>
<p>Is there any way to do this?</p>
<p>Thanks for any answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use sorted and slice the first 5 items:</p>
<pre><code>In [170]: sorted(itemsAndQtyBought, key=lambda t: t[1], reverse=True)[:5]
Out[170]:
[('Item no.6', 9),
 ('Item no.7', 7),
 ('Item no.1', 3),
 ('Item no.3', 3),
 ('Item no.4', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer"><code>heapq.nlargest()</code></a>:</p>
<pre><code>from heapq import nlargest
from operator import itemgetter

nlargest(5, my_list, key=itemgetter(1))
</code></pre>
<blockquote>
<p>heapq.nlargest(n, iterable[, key])</p>
<p>Return a list with the <em>n</em> largest elements from the dataset defined by
  iterable. <em>key</em>, if provided, specifies a function of one argument that
  is used to extract a comparison key from each element in the iterable:
  <code>key=str.lower</code> Equivalent to: <code>sorted(iterable, key=key, reverse=True)[:n]</code></p>
</blockquote>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; my_list = [('Item no.1', 3), ('Item no.2', 0),
...            ('Item no.3', 3), ('Item no.4', 2),
...            ('Item no.5', 1), ('Item no.6', 9),
...            ('Item no.7', 7)]
&gt;&gt;&gt;
&gt;&gt;&gt; nlargest(5, my_list, key=itemgetter(1))
[('Item no.6', 9), ('Item no.7', 7), ('Item no.1', 3), ('Item no.3', 3), ('Item no.4', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>sorted(itemsAndQtyBought, key=lambda item: item[1], reverse=True)[:5]
</code></pre>
<p>Output:</p>
<pre><code>[('Item no.6', 9), ('Item no.7', 7), ('Item no.1', 3), ('Item no.3', 3), ('Item no.4', 2)]
</code></pre>
<p>Only drawback: It sorts the whole list</p>
</div>
<div class="post-text" itemprop="text">
<p>Hope it will help you</p>
<pre><code>from operator import itemgetter

def newItem(oldItem):
        newItemQtyBought = sorted(oldItem,key=itemgetter(1))
        return newItemQtyBought[-5:]

def main():
        itemsAndQtyBought = [('Item no.1', 3), ('Item no.2', 0), ('Item no.3', 3), ('Item no.4', 2), ('Item no.5', 1), ('Item no.6', 9), ('Item no.7', 7)]
        print(newItem(itemsAndQtyBought))

if __name__=="__main__":
        main()
</code></pre>
</div>
<span class="comment-copy">Why don't you just use the select statement itself to create the list of items you actually want?</span>
<span class="comment-copy">Is it possible an item will be listed more than once?  In other words, is <code>[('apples', 3), ('apples', 2)]</code> supposed to add up to <code>('apples', 5)</code>?  If so, <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> does exactly what you want.  Also, what have you tried so far?</span>
<span class="comment-copy">You beat me to it.I deleted my answer, but I would use <code>operator.itemgetter</code> instead of a lambda for the key!</span>
<span class="comment-copy">@juanpa.arrivillaga Edited to use <code>operator.itemgetter()</code> instead of <code>lambda</code> ;)</span>
