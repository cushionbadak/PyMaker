<div class="post-text" itemprop="text">
<p>Is there a way to convert a numpy ndarray (<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html" rel="nofollow noreferrer">numpy.array</a>) to a standard-library array (<a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">array.array</a>) without reallocating the data?</p>
<p>For the record it is possible to convert an array.array to a ndarray using the buffer interface, so I hope the way round is possible:</p>
<pre><code>import numpy
import array
a_std = array.array('d', [1, 2, 3])
a_np = numpy.ndarray(shape=(3, ), buffer=a_std, dtype='d')
a_np[0] = 666.
assert a_std[0] == 666.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My best guess so far is that it is not possible: memory reallocation cannot be avoided.</p>
<p>The fastest way I have found to convert my numpy array to an array.array is to use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tobytes.html" rel="nofollow noreferrer">ndarray.tobytes()</a>:</p>
<pre><code>import numpy
import array
a_np = np.random.uniform(size=(10 * 1000 * 1000))  # 76 MiB
a_std = array.array('d', a_np.tobytes())

numpy.testing.assert_allclose(a_std, a_np)
</code></pre>
<p>Quick benchmark with other methods (using IPython):</p>
<pre><code>%timeit a_std = array.array('d', a_np.tobytes())
10 loops, best of 3: 56.8 ms per loop

%timeit a_std = array.array('d', a_np.data)
1 loop, best of 3: 946 ms per loop

%timeit a_std = array.array('d', a_np)
1 loop, best of 3: 1.17 s per loop
</code></pre>
</div>
<span class="comment-copy">try using python-c api, I know you can get the direct adress of where numpy saves the array data from c</span>
