<div class="post-text" itemprop="text">
<p>I have a legacy code from <code>python2.7</code> with in it:</p>
<pre><code>f = lambda x:x.translate(None, "1234567890_")
</code></pre>
<p>this lambda function is used to make a string like this:</p>
<pre><code>&gt;&gt; my_string = "hello_i_am_from_casablanca78"
</code></pre>
<p>to look like this:</p>
<pre><code>&gt;&gt; print f(my_string)
&gt;&gt; "helloiamfromcasablanca"
</code></pre>
<p>In <code>python3</code> this is no longer working, is there another simple way to do this?</p>
<p>Because I've tried on <code>python3</code> and I get the following error:</p>
<pre><code>'str' does not support the buffer interface
</code></pre>
<p>if I remove the encoding I get this:</p>
<pre><code>TypeError: translate() takes exactly one argument (2 given)
</code></pre>
<p>Many thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>this is one way to get <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>translate</code></a> to work in python3: you create a table using <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>mktrans</code></a> first:</p>
<pre><code>tr_tbl = str.maketrans('','' , "1234567890_")
print('hello_i_am_from_casablanca78'.translate(tr_tbl))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That lambda seems too obscure to salvage. </p>
<p>More simply you could just use:</p>
<pre><code>def f(s): 
    return ''.join(c for c in s if not c in '1234567890_'
</code></pre>
</div>
<span class="comment-copy"><code>def f(s): return ''.join(c for c in s if not c in '1234567890_')</code>?</span>
<span class="comment-copy">@JohnColeman Great ! Can you post this as answer so I can close this ? Thanks</span>
<span class="comment-copy">Just to stay coherent with the initial question based on your answer, this is what I needed: f = lambda x: x.translate(str.maketrans('','', '1234567890_'))</span>
<span class="comment-copy">correct! ...that would have been a more complete answer indeed.</span>
