<div class="post-text" itemprop="text">
<p>I have been playing around with Python objects in IDLE and observed that if a member variable of an object is changed, the memory isn't released! Here is an example:</p>
<pre><code>import weakref
import gc

class subclass():
    def __init__(self, data):
         self.data=data
    def __repr__(self):
    return self.data.__str__()

class newclass():
    def __init__(self,data):
         self.data=subclass(data)
    def test(self):
         refs=weakref.ref(self.data)()
         self.data=None
         gc.collect()
         print ("ref", refs)

a = newclass(data=3)
a.test()
print ("val", a.data)
</code></pre>
<p>The output of this code, I would expect to be: </p>
<pre><code>ref None
val None
</code></pre>
<p>It turns out that the ref, however, is still a valid reference and the output is:</p>
<pre><code>ref 3
val None
</code></pre>
<p>I would like to see that memory being released. I would like to understand how.</p>
</div>
<div class="post-text" itemprop="text">
<p>You've misunderstood something crucial, unfortunately. When you call the <code>weakref</code> object returned from <code>weakref.ref</code> <em>you get back the original object</em>. Try printing <code>type(ref)</code> and see how <code>&lt;class '__main__.subclass'&gt;</code> is returned. See the <a href="https://docs.python.org/3/library/weakref.html#weakref.ref" rel="nofollow noreferrer">docs on <code>weakref.ref</code></a>:</p>
<blockquote>
<p>The <em>original object can be retrieved by <strong>calling</strong> the reference object</em> if the referent is still alive; if the referent is no longer alive, calling the reference object will cause <code>None</code> to be returned.</p>
</blockquote>
<p><sup>(Emphasis mine)</sup></p>
<p>You called the reference object and got your class <code>subclass</code> back; a reference to it therefore still exists in <code>ref</code> not allowing it to get garbage-collected. </p>
<p><em>If you don't call it</em>, on the other hand, you'll notice how the line <code>print('ref', refs)</code> indicates that the reference is dead:</p>
<pre><code>ref &lt;weakref at 0x7f3028188a48; dead&gt;
val None
</code></pre>
<p>i.e as the sole reference to your object and due to the fact it is weak, it got collected. </p>
<p>As an aside, if you want to be portable between Python 2 and 3 you'll want your classes to subclass from <code>object</code> and not use empty parentheses <code>()</code>. If you don't care about portability, the parentheses can be dropped without change in semantics. :-)</p>
</div>
<span class="comment-copy">In python 3 subclassing from object is implicit, but I think it is a good stylistic point and it helps make your code easily portable to Python 2. And, as we all know, explicit is better than implicit :)</span>
<span class="comment-copy">@juanpa.arrivillaga I agree (even though that was actually edited in by 2ps :-)</span>
<span class="comment-copy">Thanks. Got it now!</span>
