<div class="post-text" itemprop="text">
<p>I have a list of strings: </p>
<pre><code>['TTGGGAGAA', 'TTGGGAGCA', 'TTGGGAGTA']
</code></pre>
<p>And I want to test if a string is present in this list: 
So test for example if 'GTA' (= subsequence) is present in my list </p>
<p>I tried: </p>
<pre><code>OK = subsequence in list 
if OK == True: 
    print (true)
else: pass
</code></pre>
<p>But it doesn't work. Can somebody help me? </p>
</div>
<div class="post-text" itemprop="text">
<p>This is not correct, as it will compare the entire element of the list with <code>subsequence</code>. Instead, do this,</p>
<pre><code>for word in list:
    if subsequence in word:
        OK = True
        break
</code></pre>
<p>You can compress this into one line using the <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> function. Do this using,</p>
<pre><code>OK = any(subsequence in word for word in list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for a <em>sub-sequence</em>, so</p>
<pre><code>subsequence in list
</code></pre>
<p>doesn't work because it checks against the <em>whole</em> list.</p>
<p>You should do:</p>
<pre><code>OK = any(subsequence in l for l in list)
</code></pre>
<p>Note: I don't recommend using "list" as a variable name, as it's a preserved keyword in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try with a list comprehension like this:</p>
<pre><code>a = ['TTGGGAGAA', 'TTGGGAGCA', 'TTGGGAGTA']

any(["GTA" in x for x in a])
</code></pre>
<p>This will return <code>True</code> if there is any sequence inside the array that has <code>"GTA"</code> in it.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>alist = ['TTGGGAGAA', 'TTGGGAGCA', 'TTGGGAGTA', 'TGA']

print('GTA' in alist) # False 
print('TGA' in alist) # True as TGA is a list element

# this is what you probably want
# string search instead of list search
print('GTA' in '|'.join(alist)) # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a sample code for your reference, please help to check whether it is for you.
It is the for compare one list in another list.</p>
<pre><code>listab =  ['a', 'b']
listabc = ['a', 'b', 'c']
if all(each in listabc for each in listab):
    print "It is the subsequence"
else:
    print "Not a subsequence"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to accomplish this task is by using regural expressions.</p>
<p>That way you can search within strings in the list for your pattern.</p>
<p>Below is a simple example:</p>
<pre><code>import re
pattern = re.compile('GTA')
src_list = ['TTGGGAGAA', 'TTGGGAGCA', 'TTGGGAGTA']
for element in src_list
    if re.findall(pattern, element):
        print(True)
        break
</code></pre>
<p>Note the re.compile compiles the pattern so futher searches are much faster.</p>
</div>
<span class="comment-copy">if you are looking for a subsequence I'd recommend a for loop to iterate over each word and see if the subsequence is in a word</span>
<span class="comment-copy">If you want to see if any item in your list contains the subsequence, you could use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>. For example: <code>if any(subsequence in x for x in mylist): print("found")</code></span>
<span class="comment-copy">Why would you not write <code>if subsequence in list:</code>? It's not like <code>OK</code> is a meaningful name.</span>
<span class="comment-copy">OK, that worked! but now: what if my subsequence is also a list of strings. So I am looking for a match between 2 lists. If there is some substring identical; print 'OK'</span>
<span class="comment-copy">Will you always compare the first string with the first subsequence?</span>
<span class="comment-copy">Add the comment in the question instead, or best ask a new question</span>
<span class="comment-copy">It looks like you overcomplicated the original problem, the <code>in</code> keyword is enough to answer the question and there is no need for regex.</span>
<span class="comment-copy">Also you're passing the wrong arguments to <code>re.findall</code>.</span>
<span class="comment-copy">@TrakJohnson the idea behind using regex is for the solution to scale as the list grows. khelwood, what would theright arguments to re.findall be?</span>
<span class="comment-copy">@XeroSmith You're iterating through <code>src_list</code> using the variable <code>element</code>, but you're using <code>src_list</code> instead of <code>element</code> in your call to <code>findall</code>.</span>
<span class="comment-copy">@khelwood, thanks, I see the error. I have corrected it accordingly. I still stand by the argument for a scalable solution.</span>
