<div class="post-text" itemprop="text">
<p>I am doing content linking check on user's upload zip file with Python's  zipfile and BeautifulSoup module. </p>
<p>In the zip file, there is a file "a.html" and its full path in the zip file is "content/product1/component1/a.html". File 'a.html' has a <code>&lt;a href="../../product2/component2/b.html"&gt;</code> link to another HTML file. </p>
<p>I want to know how to combine the path "content/product1/component1/a.html" with "../../product2/component2/b.html" and get the right path which is "content/product2/component2/b.html". So I can check where this file exists.</p>
<p>I tried <code>os.path.join("content/product1/component1/a.html","../../product2/component2/b.html)</code>, but I don't get "content/product2/component2/b.html". Does anyone know how to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to extract the path component from "content/product1/component1/a.html", join that to the "../../product2/component2/b.html" href, and then normalize the result.</p>
<pre><code>import os.path

src = "content/product1/component1/a.html"
srcdir = os.path.dirname(src)

href = "../../product2/component2/b.html"
url = os.path.normpath(os.path.join(srcdir, href))
print(url)
</code></pre>
<p><strong>output</strong></p>
<pre><code>content/product2/component2/b.html
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might want to try using <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a> (with <code>/</code> as the separator) and <em>then</em> use <code>os.path.join()</code> on the parts you need. </p>
</div>
<span class="comment-copy">Thanks. This works. Why I have to extract path component  from "content/product1/component1/a.html" first?</span>
<span class="comment-copy">@user7299363 Because <code>.join</code> assumes that its initial arguments are directory path components, it doesn't understand that "content/product1/component1/a.html" is a file name, and similar remarks apply to <code>.normpath</code>. So if you do <code>os.path.normpath(os.path.join(src, href))</code> you'll get "content/product1/product2/component2/b.html".</span>
<span class="comment-copy">I see now. Thanks for answer.</span>
<span class="comment-copy">I try os.path.join("content/product1/component1/a.html".split("/"), "../../product2/component2/b.html".split("/")), but I get a error message.</span>
<span class="comment-copy">Right, because "content/product1/component1/a.html".split("/") produces ['content', 'product1', 'component1', 'a.html'] and "../../product2/component2/b.html".split("/") produces ['..', '..', 'product2', 'component2', 'b.html']. If you try to join those two lists together directly, os.path.join will be confused by the ellipsis ('...'). You have to slice the list to get the only parts of the path that you need.</span>
