<div class="post-text" itemprop="text">
<p>I want to differentiate between two python strings <code>2015-07-01</code> and <code>2015-Jul-01</code></p>
<blockquote>
<p>Case 1: Digits <code>OR</code> Special characters</p>
<p>Case 2: Everything else (characters)</p>
</blockquote>
<p>I'm aware of the <code>isdigit()</code> function but it only recognized digits and not special characters.</p>
<p>By special characters I mean hyphen - or slash /</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a regular expression to check whether a string contains only digits, hyphens or slashes.</p>
<pre><code>&gt;&gt;&gt; bool(re.match('[\d/-]+$', '2015-07-01'))
True
&gt;&gt;&gt; bool(re.match('[\d/-]+$', '2015-Jul-01'))
False
</code></pre>
<p>We don't need the ^ anchor here because <code>match</code> starts from the beginning of the string.</p>
<p>Alternatively, with <code>all</code> and without a regex:</p>
<pre><code>&gt;&gt;&gt; from string import digits
&gt;&gt;&gt; allowed = set(digits).union('/-')
&gt;&gt;&gt; all(c in allowed for c in '2015-07-01')
True
&gt;&gt;&gt; all(c in allowed for c in '2015-Jul-01')
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check if the string has any letters.</p>
<pre><code>bool(re.search('[a-zA-Z]', the_string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>data</code> is a string and you want to check that there are no "letter" characters in it..</p>
<pre><code>if not any(c.isalpha() for c in data):
   print('The string contains no letters')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers address your question title much better than this. But I thought it wouldn't harm to point out that, now we know your specific case is to deal with just two date formats, that I have found the <a href="https://dateparser.readthedocs.org/en/latest/" rel="nofollow">dateparser</a> module pretty good for this rather than regex or exceptions when there can be a mix.</p>
<pre><code>import dateparser

date1 = '2015-07-01'
date2 = '2015-Jul-01'

date1out = dateparser.parse(date1)
date2out = dateparser.parse(date2)

print date1out
print date2out
print '\n'
print date1out.date()
print date2out.date()
</code></pre>
<p>Will give you</p>
<pre><code>2015-07-01 00:00:00
2015-07-01 00:00:00

2015-07-01
2015-07-01
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string
word = '2015-07-01'
invalidChars = set(string.punctuation)
if any(char in invalidChars for char in word):
    print ("Contains special characters")
else:
    print ("No special characters")
</code></pre>
<p>The above code will tell yu if the string contains special characters, but unless you are more specific about what you want the program to produce, I cannot help you further.</p>
</div>
<span class="comment-copy">define special character and non-special character</span>
<span class="comment-copy">Suggested reading: <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">What is the XY problem?</a></span>
<span class="comment-copy">hyphen <code>-</code> or slash <code>/</code></span>
<span class="comment-copy">Following on what @VincentSavard is alluding to, if you are asking because you are about to try to parse time stamps yourself, stop and go look up the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code></a> library</span>
<span class="comment-copy">@CoryKramer I've already referred <code>datetime</code>. I know it might seem like a vague question but the problem is that when you want to parse date from string you have to define a specific format with help of directives. Now the data I receive can be of both case 1 &amp; 2. So how am I suppose use the directives to serve both the cases?</span>
<span class="comment-copy">Sure it would work but if I'm not wrong the <code>dateparser</code> works on <i>hit &amp; miss</i> kind of logic which has a higher complexity which we can't afford just for two types of data. Its more useful when we are dealing with various kinds of formats.</span>
<span class="comment-copy">@Harvey For the particular case you listed it has worked fine for me as the listed behaviour is predictable. But yes, if you were dealing with multiple formats then I wouldn't trust it e.g. in cases with American and English formats with dd/mm/yyyy and mm/dd/yyyy. Don't think I've ever seen yyyy/dd/mm so the default behaviour here shouldn't ever be off? Then again, if you had more than just these two formats then the regex answers here still wouldn't allow you to specify the <code>datetime</code> format anyway without an exception?</span>
<span class="comment-copy">Indeed, the <code>dateparser</code> is more versatile but it comes at a higher complexity which isn't visible until you deal with large data.</span>
