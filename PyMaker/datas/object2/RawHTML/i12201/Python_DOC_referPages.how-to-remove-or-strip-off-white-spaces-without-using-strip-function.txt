<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function that accepts an input string consisting of alphabetic
  characters and removes all the leading whitespace of the string and
  returns it without using .strip(). For example if:</p>
<p>input_string = "    Hello  "</p>
<p>then your function should return a string such as:</p>
<p>output_string = "Hello  "</p>
</blockquote>
<p>The below is my program for removing white spaces without using strip:</p>
<pre><code>def Leading_White_Space (input_str):
    length = len(input_str)
    i = 0
    while (length):
        if(input_str[i] == " "):
            input_str.remove()
        i =+ 1
        length -= 1


#Main Program
input_str = "    Hello    "
result = Leading_White_Space (input_str)
print (result)
</code></pre>
<p>I chose the remove function as it would be easy to get rid off the white spaces before the string 'Hello'. Also the program tells to just eliminate the white spaces before the actual string. By my logic I suppose it not only eliminates the leading but trailing white spaces too. Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can loop over the characters of the string and stop when you reach a non-space one. Here is one solution :</p>
<pre><code>def Leading_White_Space(input_str):
  for i, c in enumerate(input_str):
    if c != ' ':
      return input_str[i:]
</code></pre>
<p><strong>Edit</strong> :
@PM 2Ring mentionned a good point. If you want to handle all types of types of whitespaces (<em>e.g</em>  \t,\n,\r), you need to use <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow">isspace()</a>, so a correct solution could be :</p>
<pre><code>def Leading_White_Space(input_str):
  for i, c in enumerate(input_str):
    if not c.isspace():
      return input_str[i:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another way to strip the leading whitespace, that actually strips <em>all</em> leading whitespace, not just the <code>' '</code> space char. There's no need to bother tracking the index of the characters in the string, we just need a flag to let us know when to stop checking for whitespace.</p>
<pre><code>def my_lstrip(input_str):
    leading = True
    for ch in input_str:
        if leading:
            # All the chars read so far have been whitespace
            if not ch.isspace():
                # The leading whitespace is finished
                leading = False
                # Start saving chars
                result = ch
        else:
            # We're past the whitespace, copy everything
            result += ch
    return result

# test
input_str = " \n \t Hello    "
result = my_lstrip(input_str)
print(repr(result))
</code></pre>
<p><strong>output</strong></p>
<pre><code>'Hello    '
</code></pre>
<hr/>
<p>There are various other ways to do this. Of course, in a real program you'd simply use the string <code>.lstrip</code> method, but here are a couple of cute ways to do it using an iterator:</p>
<pre><code>def my_lstrip(input_str):
    it = iter(input_str)
    for ch in it:
        if not ch.isspace():
            break
    return ch + ''.join(it)
</code></pre>
<p>and</p>
<pre><code>def my_lstrip(input_str):
    it = iter(input_str)
    ch = next(it)
    while ch.isspace():
        ch = next(it)
    return ch + ''.join(it)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>re.sub</code></p>
<pre><code>&gt;&gt;&gt; input_string = " Hello "
&gt;&gt;&gt; re.sub(r'^\s+', '', input_string)
'Hello '
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; def remove_space(s):
    ind = 0
    for i,j in enumerate(s):
        if j != ' ':
            ind = i
            break
    return s[ind:]

&gt;&gt;&gt; remove_space(input_string)
'Hello '
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to be thorough and without using other modules, we can also specify which whitespace to remove (leading, trailing, both or all), including tab and new line characters. The code I used (which is, for obvious reasons, less compact than other answers) is as follows and makes use of slicing:</p>
<pre><code>def no_ws(string,which='left'):
    """
    Which takes the value of 'left'/'right'/'both'/'all' to remove relevant 
    whitespace.
    """
    remove_chars = (' ','\n','\t')
    first_char = 0; last_char = 0

    if which in ['left','both']:
        for idx,letter in enumerate(string):
            if not first_char and letter not in remove_chars:
                first_char = idx
                break
        if which == 'left':
            return string[first_char:]

    if which in ['right','both']:
        for idx,letter in enumerate(string[::-1]):
            if not last_char and letter not in remove_chars:
                last_char = -(idx + 1)
                break
        return string[first_char:last_char+1]

    if which == 'all':
        return ''.join([s for s in string if s not in remove_chars])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow">itertools.dropwhile</a> to remove all particualar characters from the start of you string like this</p>
<pre><code>import itertools

def my_lstrip(input_str,remove=" \n\t"):
    return "".join( itertools.dropwhile(lambda x:x in remove,input_str))
</code></pre>
<p>to make it more flexible, I add an additional argument called remove, they represent the characters to remove from the string, with a default value of <code>" \n\t"</code>, then with dropwhile it will ignore all characters that are in remove, to check this I use a <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow">lambda</a> function (that is a practical form of write short anonymous functions) </p>
<p>here a few tests    </p>
<pre><code>&gt;&gt;&gt; my_lstrip(" \n \t Hello    ")
'Hello    '
&gt;&gt;&gt; my_lstrip("   Hello    ")
'Hello    '
&gt;&gt;&gt; my_lstrip(" \n \t Hello    ")
'Hello    '
&gt;&gt;&gt; my_lstrip("---   Hello    ","-")
'   Hello    '
&gt;&gt;&gt; my_lstrip("---   Hello    ","- ")
'Hello    '
&gt;&gt;&gt; my_lstrip("- - - Hello    ","- ")
'Hello    '
&gt;&gt;&gt; 
</code></pre>
<p>the previous function is equivalent to</p>
<pre><code>def my_lstrip(input_str,remove=" \n\t"):
    i=0
    for i,x in enumerate(input_str):
        if x not in remove:
            break
    return input_str[i:]
</code></pre>
</div>
<span class="comment-copy">try <code>lstrip</code> .........</span>
<span class="comment-copy">I cannot use the function strip(). Read the question please.</span>
<span class="comment-copy">Try just remove spaces untill reach an alphabet character</span>
<span class="comment-copy">Good one. I'll try that.</span>
<span class="comment-copy">@PaulRooney Not quite: it would return <code>None</code>, if it didn't die with an <code>AttributeError</code>. And if you <i>could</i> modify strings in-place it wouldn't need to return the result. But of course, then you wouldn't call it like <code>result = Leading_White_Space(input_str)</code>.</span>
<span class="comment-copy">This code doesn't strip all leading whitespace.</span>
<span class="comment-copy">Try your code on the test string in my answer. In ASCII, the standard whitespace chars are <code>'\t\n\x0b\x0c\r '</code> (see the <a href="https://docs.python.org/3/library/string.html#string.whitespace" rel="nofollow noreferrer"><code>string.whitespace</code></a> constant in the standard <code>string</code> module). In Unicode, there are a lot more whitespace chars, which the <a href="https://docs.python.org/3/library/stdtypes.html#str.isspace" rel="nofollow noreferrer"><code>.isspace</code></a> method recognises, but I guess we can ignore them for this assignment.</span>
<span class="comment-copy">You're right, thank you for correcting me :)</span>
<span class="comment-copy">I like your <code>lstrip()</code> answer as well, which technically is not <code>strip()</code>.</span>
<span class="comment-copy">Buddy I'm new to python so I'm finding it a bit hard to understand the code.</span>
<span class="comment-copy">Note that the assignment is to remove <b>all</b> leading whitespace chars, not just the space chars.</span>
