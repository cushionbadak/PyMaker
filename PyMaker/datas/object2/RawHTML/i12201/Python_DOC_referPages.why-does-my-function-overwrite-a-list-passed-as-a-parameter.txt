<div class="post-text" itemprop="text">
<p>I have created a function that takes a list as a parameter. It shuffles the list, replaces the first element and returns the new list. </p>
<pre><code>import random
firstList=["a","b","c","d","e","f","g","h","i"]

def substitution(importedList):
    random.shuffle(importedList)
    importedList[0]="WORD"
    return importedList
</code></pre>
<p>The shuffle has no impact on my question. However, I was surprised to see that the returned importedList overwrites the original firstList.</p>
<pre><code>&gt;&gt;&gt; firstList
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']

&gt;&gt;&gt; substitution(firstList)
['WORD', 'a', 'b', 'd', 'i', 'c', 'g', 'e', 'h']

&gt;&gt;&gt; firstList
['WORD', 'a', 'b', 'd', 'i', 'c', 'g', 'e', 'h']
</code></pre>
<p>I have found a workaround by copying the list within the function, but it seems inefficient. </p>
<pre><code>import random
firstList=["a","b","c","d","e","f","g","h","i"]
string="a"

def substitutionandcopy(importedList):
    copiedList=importedList[:]
    random.shuffle(copiedList)
    copiedList[0]="WORD"
    return copiedList
</code></pre>
<p>My question is why does the function replace the firstList? This would not happen if it were a string for example.</p>
<pre><code>string="a"

def substituteString(foo):
    foo='b'
    return foo
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; string
'a'

&gt;&gt;&gt; substituteString(string)
'b'

&gt;&gt;&gt; string
'a'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings, Ints, Tuples are immutable python types, so when you perform operations that change one of these types the new corresponding object is effectively created in memory each time. (Or you get an error if trying to change those in-place.)</p>
<p>Lists and dictionaries are mutable python types, so when you perform operations that change one of these types, the object stays the same, but it's parts (i.e., list elements) get changed.</p>
<p>So when you want to change a list, but want to leave the original intact you have to copy it yourself. Important thing, that there're two types of copying - <strong>shallow copy</strong> and <strong>deep copy</strong>.</p>
<p>Shallow copy can be done like so:</p>
<pre><code>list_b = list_a[:] #using slice syntax

#or

list_b = list(list_a) #instantiating a new list from iterating over the old one

#or

import copy
list_b = copy.copy(list_a) #using copy module
</code></pre>
<p>Deep copy is done in the following way:</p>
<pre><code>import copy
list_b = copy.deepcopy(list_a)
</code></pre>
<p>The difference between deep copy and shallow copy is...</p>
<p>When doing shallow copy, if mutable object contains other mutable objects, only the top one is copied. I.e. if a list contains other list, if top list is copied and then the inner list is changed in the copy, effectively the inner list will be changed both in the copy and in the original, because it's the same object in memory that is referenced in two different lists. Basicly shallow copy creates a new object with the same references stored in original object. </p>
<p>When doing deep copy, if mutable object contains other mutable objects, then inner mutable objects are copied too. I.e. as in previous example, if you change inner list in the copy, it changes only in the copy and the original is not affected. So deep copy copies everything, creates new structure in memory for everything in the object being copied, and not just references.</p>
</div>
<div class="post-text" itemprop="text">
<p>It does not replace the first list. The first list is passed by reference meaning that any mutations you perform on the list that is passed as the parameter, will also be performed on the list outside of the function, because it is the same list.</p>
<p>However, Strings and other basic types are not passed by reference and therefore any changes you make in your function scope is tot he local copy of the variable only. </p>
</div>
<div class="post-text" itemprop="text">
<p>As you found out, <code>random.shuffle</code> mutates the list in place:</p>
<blockquote>
<h2>random.shuffle(x[, random])</h2>
<p>Shuffle the sequence x in place. The optional argument random is a 0-argument function returning a random float in [0.0, 1.0); by default, this is the function random().</p>
<p>Note that for even rather small len(x), the total number of permutations of x is larger than the period of most random number generators; this implies that most permutations of a long sequence can never be generated.</p>
</blockquote>
<p>Strings are immutable in Python, all string operations return a new string instead. This is the "string" example from your question:</p>
<pre><code>string="a"

def substitute_string(foo):
    foo = 'b'
    return foo
</code></pre>
<p>It is not really akin to the code from the <code>substitution</code> list in the first code block of the question. The equivalent code using a list would be this:</p>
<pre><code>alist = [1, 2, 3]

def substitute_list(foo):
    foo = [4, 5, 6]
    return foo
</code></pre>
<p>And it works identically:</p>
<pre><code>&gt;&gt;&gt; alist
[1, 2, 3]

&gt;&gt;&gt; substitute_list(alist)
[4, 5, 6]

&gt;&gt;&gt; alist
[1, 2, 3]
</code></pre>
<p>Back to your solution, it could be:</p>
<pre><code>def substitution_and_copy(imported_list):
    imported_list = imported_list[:]
    random.shuffle(imported_list)
    imported_list[0]="WORD"
    return imported_list
</code></pre>
<p>And no, assigning a new value to the argument will not mutate the original list, the same way you don't mutate the original string when you assign a new value to <code>foo</code> (also changed camelCase to snake_case, I'm a little nazy about <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>).</p>
<p>[update]</p>
<blockquote>
<p>What you have now, however, is what he already tried. "I have found a workaround by copying the list within the function, but it seems inefficient"</p>
</blockquote>
<p>A list copy is not as inefficient as you may think, but this is not the point: as someone else pointed out, either you mutate the list in place and return nothing or return a new list - you can't have your cake and eat it.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow">docs</a> on <code>random.shuffle()</code>: <code>shuffle list x in place; return None.</code>  If you don't want that, you can use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow">random.sample()</a>:</p>
<pre><code>def substitutionandcopy(importedList):
    shuffledList = random.sample(importedList, len(importedList))
    shuffledList[0]="WORD"
    return shuffledList
</code></pre>
</div>
<span class="comment-copy">1. <code>shuffle</code> changes the original mutable list. 2. Pass a <code>copy</code> of the list instead of the original. See <a href="http://stackoverflow.com/q/2612802">How to clone or copy a list in Python?</a></span>
<span class="comment-copy">Strings are immutable, lists are mutable. Pass a copy as @BhargavRao suggested.</span>
<span class="comment-copy">It might be a taste thing, but I'd rather have the function copy the list and work on the copy rather than me have to pass in a copy. Might make the function a little more flexible with the types you could pass in. (For example, you could pass in a tuple instead of a list).</span>
<span class="comment-copy">From Bhargav's link: "When you say <code>new_list = my_list</code> you're not making a copy, you're just adding another name that points at that original list in memory". The same goes for lists passed as function arguments.</span>
<span class="comment-copy">If what you wanted was to make a copy, then making a copy explicitly clearly isn't <i>inefficient</i> -- you can't do it without doing it, so to speak :-)</span>
<span class="comment-copy">@DaveOB No problem, sometimes Python is not that straightforward. :) If you find that my answer fits your question, you might want to mark it, or other answer, that fits -see <a href="http://stackoverflow.com/help/someone-answers">stackoverflow.com/help/someone-answers</a>.</span>
<span class="comment-copy">"Passed by reference" can be misleading terminology when discussing Python's data model. Please see  <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, which was written by SO veteran Ned Batchelder.</span>
<span class="comment-copy">I think it is more correct to say that all variables in Python are references. Only some objects can be mutated "in place", so all references to that same address will reflect the change. This is not the case with strings in Python, they are immutable.</span>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/q/986006/4014959">How do I pass a variable by reference?</a></span>
<span class="comment-copy">Strings are <i>also</i> passed by reference. The thing is that if he had tried to do the same thing he did with the list with the string, namely <code>random.shuffle(foo)</code> or <code>foo[0] = "w"</code>, he would have got an error, because string is immutable. If string were mutable, it would have been possible to do the exact same thing with strings.</span>
<span class="comment-copy"><code>random.shuffle()</code> returns None.  He will find some unexpected behavior if he defines <code>some_list</code> that way.</span>
<span class="comment-copy">indeed, just spotted it.</span>
<span class="comment-copy">What you have now, however, is what he already tried.  <i>I have found a workaround by copying the list within the function, but it seems inefficient.</i></span>
<span class="comment-copy">It is not as inefficient as you may think, because in Python each list element is just a reference, it will not duplicate the space for all strings. It is more like an array of void pointers in C. Unless it is in a tight loop you can afford this most of the time even for large lists.</span>
<span class="comment-copy"><i>I</i> didn't say it was inefficient.  The OP is the one who wanted something different.</span>
