<div class="post-text" itemprop="text">
<p>I apologize for the mess that is the title.</p>
<p>I'm tackling a problem in which I want to have a module in a subdirectory from my main.py. I'd like to have any number of .py files in the subdirectory. From there, I'd like to take in user input, for example the string "foo", and then search through all the methods in this module and call it if it exists. I'm looking at some sort of frankenstein combination of either dir or the inspect module, and the getattr/hasattr methods, but haven't had any luck figuring out a way that works. </p>
<pre><code>inspect.getmembers(module_name, inspect.ismethod)
</code></pre>
<p>This returns me a large mess of pre-defined methods that I'm unsure how to sort through. If there's a better way of going about that, TYIA. Otherwise, how would I go about the situation described above?</p>
</div>
<div class="post-text" itemprop="text">
<p>For your concrete case, this should work. Loop through all files in your subdirectory, try to import them as modules and try to find and execute the function whose name you are given. </p>
<pre><code>import importlib, os

pkg = 'some_pkg'  # this must be a python package

for x in os.listdir(pkg):
    try:
        module = importlib.import_module(pkg + '.' + x.replace('.py', ''))
        fnc = getattr(module, 'foo')
        fnc()
        # break in case you want to stop at the first 'foo' fnc you find
    except:
        print('no foo here, or not a module!')
</code></pre>
</div>
<span class="comment-copy">The name of the subdirectory will be known and fix and the subdirectory will be a package?</span>
<span class="comment-copy">Yes, that is correct.</span>
<span class="comment-copy">What pre-defined methods? Are the methods you want to find among the methods that <code>getmembers()</code> returns?</span>
<span class="comment-copy">Awesome, thank you! I don't have enough rep to be able to upvote you, unfortunately. If this method is ran multiple times, is importing every time inefficient?</span>
<span class="comment-copy">@Fafnoir Thx, nevermind :) To my knowledge, <code>importlib</code> wraps the built_in <code>__import__</code>, which only does an import once. If you want the module to be recompiled and module level code to be reexecuted, call <code>importlib.reload()</code> instead. See the docs: <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">docs.python.org/3/library/importlib.html</a></span>
<span class="comment-copy">As a matter of nitpicking, don't do bare <code>except</code>s as they are harder to debug. You could filter the list of file names by suffix first, then try to import only those that actually end with <code>.py</code> and catch any <code>ImportError</code>, then retrieve the function using <code>getattr(module, 'foo', None)</code> to avoid the <code>AttributeError</code>, and if <code>fnc</code> ends up not being <code>None</code>, try to call it and catch the base <code>Exception</code>. This gives you a lot more information for the error message, you could even get specific about the error raised by the function call.</span>
<span class="comment-copy">@ThomasLotze Very true. The except block is, however, meant as a placeholder for whatever you might want to put there, as part of a lean example to show the general idea.</span>
