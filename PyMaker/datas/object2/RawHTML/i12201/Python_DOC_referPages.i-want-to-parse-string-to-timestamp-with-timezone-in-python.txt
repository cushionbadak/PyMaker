<div class="post-text" itemprop="text">
<p>I try to parse string to time-stamp with timezone format.</p>
<p>here is an example</p>
<pre><code>"2016-02-18 16:13:07+09"
</code></pre>
<p>i want to know parsing this string format to time-stamp format in <strong>python.</strong></p>
<p>how can i do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Is the  UTC offset  format in your string  +09 or +0900 ?</p>
<p>If the offset in your string is 0900 you can use the below .If your UTC offset is only +09 as you mentioned in your question , you can pad the string with 00 and get the below code to work .</p>
<p><strong>Code:</strong></p>
<pre><code>import datetime  
time="2016-02-18 16:13:07+0900"  
new_time=datetime.datetime.strptime(time,"%Y-%m-%d %H:%M:%S%z")  
print(new_time)  
new_time_python=datetime.datetime.strftime(new_time,"%m-%d-%y")  
print(new_time_python)  
</code></pre>
<h3>Output</h3>
<pre><code>2016-02-18 16:13:07+09:00  
02-18-16 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dateutil</code> might be a suitable library for your purposes:</p>
<pre><code>from dateutil.parser import parser

p = parser()
d = p.parse('2016-02-18 16:13:07+09'.decode('utf-8'))  # must be unicode string
d
&gt;&gt;&gt; datetime.datetime(2016, 2, 18, 16, 13, 7, tzinfo=tzoffset(None, 32400))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the UTC offset may be specified both as <code>+HH</code> and <code>+HHMM</code> format then you could use <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer"><code>str.ljust()</code> method</a> to normalize the input time string. Then you could <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">use <code>.strptime()</code> to parse it</a>:</p>
<pre><code>#!/usr/bin/env python3
from datetime import datetime

time_string = "2016-02-18 16:13:07+09"
dt = datetime.strptime(time_string.ljust(24, "0"), "%Y-%m-%d %H:%M:%S%z")
# -&gt;  datetime.datetime(2016, 2, 18, 16, 13, 7, 
#                       tzinfo=datetime.timezone(datetime.timedelta(0, 32400)))
</code></pre>
<p>If your Python version doesn't support <code>%z</code>,  see <a href="https://stackoverflow.com/q/1101508/4279">How to parse dates with -0400 timezone string in python?</a></p>
</div>
<span class="comment-copy">yes, but i dont know how can i try this T.T</span>
<span class="comment-copy">Try writing a simple script that parses something much simpler than what you want to parse, using time.strptime, something like "2016-02-18"</span>
<span class="comment-copy">hmm... just that's all? i need more efficient method</span>
<span class="comment-copy">Please include a code example of your trial and error in your question.</span>
<span class="comment-copy">Just that's all. what is this situation, i have to get the timestamp with timezone data from database, then i need insert another database. but when i bring that timestamp from first database, timestamp format is transformed to string format. So i need parse this string type to timestamp with timezone format</span>
