<div class="post-text" itemprop="text">
<p>As a trivial demonstration of what I mean, <code>subprocess.communicate()</code>'s <code>stdout</code> is always a <code>bytes</code> string.</p>
<p>But:</p>
<pre><code>&gt;&gt;&gt; assert stdout == bytes('{}'.format(stdin), "utf-8"), \
        "{} != {}".format(stdout, stdin)
AssertionError: b'\x00' != b'0'
</code></pre>
<p>Moreover, if I follow <a href="https://stackoverflow.com/questions/606191/convert-bytes-to-a-python-string">Convert bytes to a Python string</a>, </p>
<pre><code>&gt;&gt;&gt; assert \
    stdout.decode("utf-8") == \
    bytes('{}'.format(stdin), "utf-8").decode("utf-8"), \
    "{} != {}".format(stdout, stdin)
AssertionError: b'\x00' != b'0'
</code></pre>
<p>It's trying to convert and compare byte strings, but I can't figure out how to either</p>
<ol>
<li><p>turn them into proper bytes</p></li>
<li><p>make the strings look the same</p></li>
</ol>
<p>In this case, I happen to have the flexibility to read the <code>ord</code> of the singular char and compare <code>int:0</code> with <code>int:0</code>. What else can solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your second byte string, <code>b'0'</code>, is indeed not the same string as <code>b'\x00'</code>. The former is the <em>character</em> <code>0</code>, which is ASCII codepoint 0x30. You'll notice that:</p>
<pre><code>&gt;&gt;&gt; b'0' == b'\x30'
True
</code></pre>
<p><code>b'\x00'</code> represents the <a href="https://en.wikipedia.org/wiki/Null_character" rel="nofollow">NUL character</a>.</p>
<p>See the <a href="https://docs.python.org/3/library/stdtypes.html#binaryseq" rel="nofollow">Binary Sequence Types</a> and <a href="https://docs.python.org/3/reference/lexical_analysis.html#strings" rel="nofollow">String and Bytes literals</a> specs, which describes the <code>b''</code> syntax:</p>
<blockquote>
<p>Only ASCII characters are permitted in bytes literals (regardless of the declared source code encoding). Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence.</p>
</blockquote>
</div>
<span class="comment-copy">I'm having a hard time understanding what you're going for here. . . Maybe it's because I don't have any understanding of why <code>stdout</code> and  <code>stdin</code> should be the same?  Clearly <code>b'0'</code> (the 0 character) isn't equal to <code>b'\x00'</code> (the null terminator) in any encoding. . .</span>
<span class="comment-copy">You can also just write <code>b"\0"</code> (the octal value of 0) since that's all that's in the string here.</span>
