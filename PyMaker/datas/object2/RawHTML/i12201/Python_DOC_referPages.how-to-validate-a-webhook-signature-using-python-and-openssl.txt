<div class="post-text" itemprop="text">
<p>I am trying to validate an incoming webhook and so far the resulting hash is not matching the test hash generated by the api.</p>
<p>The docs list the following example for Ruby however I am using Python/Django so any help to 'convert' this function would be appreciated!</p>
<h1>Ruby Function</h1>
<pre><code># request_signature - the signature sent in Webhook-Signature
#      request_body - the JSON body of the webhook request
#            secret - the secret for the webhook endpoint

require "openssl"

digest = OpenSSL::Digest.new("sha256")
calculated_signature = OpenSSL::HMAC.hexdigest(digest, secret, request_body)

if calculated_signature == request_signature
  # Signature ok!
else
  # Invalid signature. Ignore the webhook and return 498 Token Invalid
end
</code></pre>
<p>This is roughly what I have put together myself so far using <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow">https://docs.python.org/3/library/hashlib.html</a>.</p>
<h1>Python Attempt</h1>
<pre><code>import hashlib

secret = "xxxxxxxxxxxxxxxxxx"
json_data = {json data}

h = hashlib.new('sha256')
h.update(secret)
h.update(str(json_data))
calculated_signature = h.hexdigest()

if calculated_signature == webhook_signature:
    do_something()
else:
    return 498
</code></pre>
<p>When I run the above the hashes never match obviously due to my incorrect Python implementation.</p>
<p>Any help/pointers would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe it should be something like this:</p>
<pre><code>import hmac
import hashlib
digester = hmac.new(secret, request_body, hashlib.sha256)
calculated_signature = digester.hexdigest()
</code></pre>
<p>A few notes:</p>
<ol>
<li>Use the actual request body.  Don't rely on <code>str(json_data)</code> equalling the request body.  This will almost certainly fail as python will print out inner strings using <code>repr</code> which will likely leave a bunch of spurious <code>u"..."</code> that aren't actually in the response.  <code>json.dumps</code> won't necessarily do better because there could be whitespace differences that are isignificant to JSON, but are very significant to the hmac signature.</li>
<li><a href="https://docs.python.org/2/library/hmac.html" rel="nofollow"><code>hmac</code></a> is your friend :-)</li>
</ol>
</div>
<span class="comment-copy">Thanks for the quick answer, ill give this a spin and let you know how I get on!</span>
<span class="comment-copy">Hi, I have just got round to testing this however it does not like the json body. It gives a "TypeError: must be string or buffer, not dict" if i dont pass it as a string which gives an incorrect hash.</span>
<span class="comment-copy">When I said the request body, I meant the <i>actual</i> request body -- Not the decoded json from the request body.  In typical circumstances your web framework will probably "hide" the body and just give you the decoded JSON (it's probably not actually hidden, just not commonly used...).  I'm not a django user, so I don't know how to access the "raw" data that you're looking for... How are you getting the request body from the request?</span>
<span class="comment-copy">That was the problem, I was passing the json data, not request.body. Works a treat now, Thanks!</span>
