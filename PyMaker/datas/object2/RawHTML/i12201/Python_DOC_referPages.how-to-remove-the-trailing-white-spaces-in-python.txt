<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function that accepts an input string consisting of alphabetic
  characters and removes all the trailing whitespace of the string and
  returns it without using any .strip() method. For example if:</p>
<p>input_string = "  Hello       "</p>
<p>then your function should return an output string such as:
       output_string = "  Hello"</p>
</blockquote>
<p>This is my code:</p>
<pre><code>def Trailing_White_Space (input_str):

    count = 0
    for i in range (len(input_str) + 1, 0):
        if (input_str[i] != ' '):
            count = i
            break
    new_s = input_str[len(input_str):count]
    return (new_s)

#Main Program
input_str = "    Hello    "
result = Trailing_White_Space (input_str)
print (result)
</code></pre>
<p>I am certain that the logic is correct. I have dry run the code with possible test cases. Still my code doesn't give any output. Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Correct the line where you assign <code>new_s</code> variable.</p>
<pre><code>new_s = input_str[:count+1]
</code></pre>
<p>Also, since you're loop needs to be decremented after every iteration. Replace <code>0</code> with <code>-1</code>.</p>
<pre><code>for i in range(len(input_str)-1, -1, -1):
</code></pre>
<p><strong>EDIT:</strong> Refer <a href="https://stackoverflow.com/a/35554537/2932244">@InbarRose's answer</a> for a much better alternative.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the main reason you're having trouble:</p>
<pre><code>input_str[len(input_str):count]
</code></pre>
<p>If the slice <em>starts</em> at <code>len(input_str)</code> then you wont get any characters out of it at all. You need to only use <code>[:count]</code>, except that you're also not getting <code>count</code> correctly.</p>
<p>In order to loop from the end you have to use the third argument for range to decrement your value, so it has to be</p>
<pre><code>for i in range(len(input_str) - 1, -1, -1):
</code></pre>
<p>You want -1, which reduces the value by one each time. You also want to start at <code>len-1</code> otherwise you get invalid indices, and if you want to end at 0 you need to pass -1, since range doesn't go to the end value.</p>
<p>Now you can get use the <code>count</code> and slice <code>input_str</code> properly:</p>
<pre><code>return input_str[:count]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you want to see a one-liner answer. This is it: </p>
<pre><code>from string import whitespace as ws
def remove_trailing_whitespace(t):
    return t[:-next(i for i, c in enumerate(t[::-1]) if c not in ws)]
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; print '"{}"'.format(remove_trailing_whitespace('  hello  '))  # spaces
"  hello"
&gt;&gt;&gt; print '"{}"'.format(remove_trailing_whitespace('  hello\n'))  # newline
"  hello"
&gt;&gt;&gt; print '"{}"'.format(remove_trailing_whitespace('  hello\t'))  # tab
"  hello"
&gt;&gt;&gt; print '"{}"'.format(remove_trailing_whitespace('  hello \t\n '))  # space, newline, tab
"  hello"
</code></pre>
<p>Bonus: all whitespace chars, not just space, and best efficiency.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>re.sub()</code></p>
<pre><code>import re

def remove(my_string):
    new_string = re.sub(r'(.*?\w)([ \t\n\r]*)', r'\1', my_string)
    return(new_string)

my_string = str(input())
modified = remove(my_string)
print(modified)
</code></pre>
<p><strong>Explanation:</strong></p>
<p><code>re</code> is a module in python for regular expressions.</p>
<p><code>re.sub(pattern, replacing_pattern, string_to_be_modified)</code> is the syntax.</p>
<p>Here, any character in the square braces (<code>\w</code> -&gt; any character, <code></code>-&gt; space, <code>\t</code> -&gt; tab, <code>\n</code> -&gt; newline, <code>\r</code> -&gt; carriage return) when encountered is replaced by <code>''</code>(Nothing). Hence you get a stripped string.</p>
<p>Find all the regex matches <a href="https://docs.python.org/3/library/re.html" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>while</code> loop:</p>
<pre><code>my_str = ' hello   '
while len(my_str) &gt; 0 and my_str[-1] == ' ':
    my_str = my_str[:-1]

print(my_str) # prints: ' hello'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>range()</code> by default goes up.  If you want it to go in reverse, you have to set the step explicitly.  Also, you don't want to start at <code>len(input_str)</code> <em>+</em> 1.  You want to start at <code>len(input_str)</code> <em>-</em> 1.  For any iterable, x, <code>x[len(x)]</code> is not defined.  <code>x[len(x) + 1]</code> is even farther off.  To get the last element, you should use <code>len(input_str) - 1</code>.  Also, if you set the second number to <code>0</code>, then the first element will not be evaluated.  The second argument to <code>range()</code> is <em>exclusive</em>, so you should go one number farther than you think you should:</p>
<pre><code>def Trailing...
    count = 0
    for i in range(len(input_str) - 1, -1, -1):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your loop is not going through. You have to specify that it is decrementing. Below is the working code.</p>
<pre><code>def Trailing_White_Space (input_str):

    count = 0
    for i in range (len(input_str)-1, 0, -1):
        if (input_str[i] != ' '):
            count = i
            break
    slice_index= (len(input_str)-count)-1
    new_s = input_str[0:-1*slice_index]
    return (new_s)

#Main Program
input_str = "    Hello    "
result = Trailing_White_Space (input_str)
print (result)
</code></pre>
</div>
<span class="comment-copy">BTW, you should accept one of the answers on your previous (related) <a href="http://stackoverflow.com/questions/35551794/how-to-remove-or-strip-off-white-spaces-without-using-strip-function">question</a>.</span>
<span class="comment-copy">Your assignment is to remove <b>all</b> the trailing whitespace, not just the <code>' '</code> space chars. You also need to remove the other whitespace chars like <code>'\n'</code>, <code>'\r'</code>, <code>'\t'</code>, etc. The clean way to handle that is to use the <code>.isspace</code> method, like I suggested on your other question.</span>
<span class="comment-copy">Thank you so much.</span>
<span class="comment-copy">Did you try using <code>re.sub( )</code>?</span>
<span class="comment-copy">@Prashanth: I don't think Karan's teacher would appreciate a regex-based answer to this assignment.</span>
<span class="comment-copy">this gives me output as '   Hell'</span>
<span class="comment-copy">I want the output as '  Hello'</span>
<span class="comment-copy">@KaranThakkar - Make it <code>new_s = input_str[:count+1]</code></span>
<span class="comment-copy">Thanks a ton man.</span>
<span class="comment-copy">Awesome analysis. Thank you so much.</span>
<span class="comment-copy">Why are we using len-1? When I run the program I get the output as "   Hell" which is incorrect.</span>
<span class="comment-copy">This is the best answer. Solves OP's issue efficiently. Added a link to your answer in mine. +1</span>
<span class="comment-copy">The <code>\s</code> is for general whitespace matching, not just the space char. See the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer"><code>re</code> docs</a> for details; also note that the behaviour is slightly different in Python 3 vs Python 2, due to Unicode issues.</span>
<span class="comment-copy">@PM2Ring Thanks for pointing it out. I've modified the answer.</span>
<span class="comment-copy">This does not strip <code>'\t'</code>, <code>'\r'</code>, etc.</span>
<span class="comment-copy">OP says "without using .strip()"</span>
