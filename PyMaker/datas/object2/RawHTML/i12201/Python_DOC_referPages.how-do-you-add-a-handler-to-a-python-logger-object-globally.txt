<div class="post-text" itemprop="text">
<p>I want to create a logger for my project which has a custom handler that works across all submodules and which logs uncaught exceptions.  Below is my proof-of-concept; note that I am using a file handler as a stand-in for what will eventually be my custom handler.</p>
<p>main.py:</p>
<pre><code>import logging
import sys
from module import divide

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

fh = logging.FileHandler("test.log")
fh.setLevel(logging.INFO)
logger.addHandler(fh)

def uncaught_error(exc_type, exc_value, exc_traceback):
    logger.error("Uncaught Exception", exc_info = (exc_type, exc_value, exc_traceback))
    sys.__excepthook__(exc_type, exc_value, exc_traceback)
    return

sys.excepthook = uncaught_error

if __name__ == '__main__':
    logger.info("first division problem")
    print(divide(5,2))
    logger.info("second division problem")
    print(divide(10,0))
    logger.info("end")
</code></pre>
<p>module.py:</p>
<pre><code>import logging

logger = logging.getLogger(__name__)

def divide(a, b):
    logger.info("dividing " + str(a) + " by " + str(b))
    return a/b
</code></pre>
<p>After I run main.py, here is the output of test.log:</p>
<pre><code>first division problem
second division problem
Uncaught Exception
Traceback (most recent call last):
  File "main.py", line 23, in &lt;module&gt;
    print(divide(10,0))
  File "/some/path/logging_test/module.py", line 7, in divide
    return a/b
ZeroDivisionError: division by zero
</code></pre>
<p>The uncaught exception in module.py was logged beautifully, but the line</p>
<pre><code>logger.info("dividing " + str(a) + " by " + str(b))
</code></pre>
<p>apparently did nothing (there was no console output either).  What is the mistake?</p>
</div>
<div class="post-text" itemprop="text">
<p>I just ran into this issue , where my root logging format wasn't being used in other sub-modules. I solved this by changing </p>
<p><code>logger = logging.getLogger(__name__)</code> </p>
<p>in the main.py module to </p>
<p><code>logger = logging.getLogger()</code></p>
<p>so that it actually gets the <code>root</code> logger and not the <code>__main__</code> logger. </p>
<p>See <a href="https://docs.python.org/2/library/logging.html#logging.getLogger" rel="nofollow">https://docs.python.org/2/library/logging.html#logging.getLogger</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I had similar problem, this is what I did to solve this :- </p>
<h1>module.py</h1>
<pre><code>import logging

def divide(a, b, logger):

    logger.info("dividing " + str(a) + " by " + str(b))
    return a/b
</code></pre>
<h1>In main.py</h1>
<p>Call divide() by passing logger as 3rd argument </p>
<pre><code>print divide(5,2, logger)
</code></pre>
<p>In your case handler is not set for module.py</p>
</div>
<div class="post-text" itemprop="text">
<p>Add your custom handler to your root logger and be done. If you change nothing else (no other defaults), logging from all your modules will be passed to that handler as long as the levels of your other loggers allow it.</p>
<p>All (other) loggers are descendants of the root logger. <a href="https://docs.python.org/2/howto/logging.html#logging-flow" rel="nofollow">This diagram</a> should help understand information flow in logging.</p>
</div>
<span class="comment-copy">It looks like you're only adding the handler for the logger in <code>main.py</code>; try using <code>BasicConfig</code> to set up logging for all modules, per the examples in <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">docs.python.org/3/howto/logging.html</a>.</span>
<span class="comment-copy">@jonrsharpe As I understand it, <code>BasicConfig</code> can only be used for built-in handlers; certainly that's OK in the proof-of-concept above, but not when I replace <code>FileHandler</code> with my own custom handler.  Unless I'm wrong?</span>
<span class="comment-copy">The problem is that module.py could actually be a dozen modules each with a dozen classes and functions - surely one does not need to refactor an entire project just to get logging to work?  Aside from that, @jonrsharpe does make a good point in the comment above: setting up the logger using BasicConfig does allow the logger to be used globally.  If that function worked correctly with custom handlers then I think I would be in good shape.</span>
<span class="comment-copy">Its about design choice, in my opinion having global logger is like having global variable, we know the side effects of using global variable. If we have lot of modules then we may not like to dump all the log in single log file</span>
