<div class="post-text" itemprop="text">
<p>I am looking to make a program that can  pick out car information from a file using module re. The user is asked questions about the car that he wants to view and if the input is not in the file I should display an error message and loop the code again if the user wants to. I am having difficulty trying to find the inputs in the file: this is the code so far:</p>
<pre><code>import re
import random


myList = ([])
car = input("What car do you want to view?");
myList.insert(1, car)

model = input("What car model is it of");
myList.insert(2, model)

fuelTy = input("What fuel type is it: diseal or petrol");
myList.insert(3, fuelTy)

engSize = input("What engine size is it : eg 2l");
myList.insert(4, engSize)

rnd = (int(random.randrange(50000000)) + 1)

with open("car.txt", "r") as carfile:
        for line in carfile:
            if all(myList.lower() in re.findall('\w+', line.lower()) for myList in carfile):
                splitted_line = line.split(':')
                print(splitted_line)

        if not myList not in carfile:
            print("We don't have the car available currently. Please contact the head office with the case number  " + str(rnd))

            Cho2 = input("Would you like to see anything yes or no").lower
            if Cho2 == "yes":
                print("OK")

            elif Cho2 == "no":
                print("End of program")
</code></pre>
<p>Text file is:
        bmw : X6 : 3.4l : Engine size 4395cc: petrol: 0-62mph in 4.8s: gear type automatic : 5 doors : economy  29mpg : top speed 155 mph
        audi : Q7 : 3.0l : Engine size 2967cc: disel: 0-62mph in 6.5s: gear type automatic : 5 doors : economy: 48mpg : top speed 145 mph
         honda : CRV : 2.0l: Engine size    1997cc: petrol : 0-62mph in 10.0s: gear type manual : 5 doors : economy 30mpg : top speed 18 mph</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if all(myList.lower() in re.findall('\w+', line.lower()) for myList in carfile):
</code></pre>
<p>In this line, you are re-defining myList to be a line in the file. But you have an outer loop (<code>for line in carfile</code>) that does the same thing.</p>
<p>Change this to eliminate the for expression, and you'll be on the right track:</p>
<pre><code>if all(myList.lower() in re.findall('\w+', line.lower())):
</code></pre>
<p>FWIW, this is going to be very hit-or-miss, because you have things like engine size that use different measures (cc vs. l) in the file.</p>
<p>Next, please be aware that you can (and probably should, as a matter of avoiding errors) use <code>.append()</code> in order to grow a list, instead of <code>.insert()</code>. The difference is that <code>append</code> does not require you to keep track of an index, which in cases like this is not benefiting you (you don't make use of the position information at any time) and is a source of error if you copy/paste a block of code to add a new field.</p>
<pre><code>myList.append(engSize)  # was myList.insert(4, engSize)
</code></pre>
<p>Also, you should probably give users the option of not entering a field, and skip searching if they don't enter it. (Just don't append the field if it's empty, perhaps?)</p>
<pre><code>engSize = input("What engine size is it : eg 2l")
if engSize: myList.append(engSize)
</code></pre>
<p><strong>EDIT</strong></p>
<p>Okay, just got done for the day, back to this program. :-)</p>
<p>There are some more problems, but let's take care of the "<code>all</code> requires an iterable<code>issue first. If you look at the docs for [</code>all`](<a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow">https://docs.python.org/3/library/functions.html#all</a>), it says</p>
<blockquote>
<p><code>all(</code><em>iterable</em><code>)</code></p>
</blockquote>
<p>So we need to restructure the test to give <code>all</code> an iterable (a list, tuple, view, or other expression that can be iterated), or we need to stop using <code>all</code>.</p>
<p>Well, we are trying to iterate over <code>myList</code>, so it <em>should</em> be possible to come up with an iterable. Let's start with that in mind:</p>
<pre><code>if all(s for s in myList):
</code></pre>
<p>In fact, we can put the <code>.lower()</code> back in - that made sense. So:</p>
<pre><code>if all(s.lower() for s in myList):
</code></pre>
<p>Now, let's treat <code>s.lower()</code> as a word (which it is) and search for it in the input line. What we are doing is converting our previous string expression, <code>s.lower()</code>, into a boolean expression: word in list, within the context of the iteration we already have. This will be a different flavor of the <code>in</code> keyword:</p>
<pre><code>if all( (EXPR) for s in myList):

if all((s.lower() in re.findall('\w+', line.lower())) for s in myList):
</code></pre>
<p>When I make this change, I can match the make of the car.</p>
<p>There are some problems with the logic, as well. You want to match the user query to a car type. If you can't match that, then you want to print a message about "We don't have the car ..." But you can't get that test (not matching) in one line. If you could get that test into one line, you could probably get the searching part into one line as well. (Not always, but it's worth looking!)</p>
<p>Instead, just keep track of whether or not you found the car:</p>
<pre><code>found_car = False
for line in carfile:
    if ...
        found_car = True
        break

if not found_car:
    print("We don't have the car ...")
</code></pre>
<p>Next, let's make the program run longer (for testing if nothing else). You are doing <code>for</code> loops, so I assume you can do a <code>while</code> loop. Let's add a loop around the whole thing to keep going until the user types <code>quit</code>:</p>
<pre><code>while True:
    make = input("What make of car do you want (or type 'quit')? ")
    if make == 'quit':
        break
    if make: 
        myList.append(make)
</code></pre>
<p>Finally, let's take a look at your regular expression. You are using <code>\w+</code>, which will match "word characters" (whatever those are) one or more times.</p>
<p>That's a good start for things like "audi" and "honda", but word characters don't include the period ('.') or the hyphen ('-'), both of which appear in your data.</p>
<p>Instead, try changing your regex to match either a word character or a dot, one or more times:</p>
<pre><code>re.findall('[\w.]+', ...)
</code></pre>
<p>Good luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have bugs!</p>
<p>First, you are initializing <code>myList = ([])</code> as a tuple containing a single empty list, so <code>append()</code> or <code>insert()</code> aren't going to work. Try <code>myList = []</code>.</p>
<p>Second, you're getting the indexes wrong in your <code>myList.insert(...)</code> statements. Just use <code>myList.append(...)</code> instead, no need to worry about indexes that way.</p>
<p>Then, try replacing (not tested...):</p>
<pre><code>if all(myList.lower() in re.findall('\w+', line.lower()) for myList in carfile):
</code></pre>
<p>... with:</p>
<pre><code>if all (item.lower() in re.findall('\w+', line.lower()) for item in myList):
</code></pre>
<p>A simple optimization which also makes the code more readable:</p>
<pre><code>line_words = set(re.findall('\w+', line.lower()))
if all(item.lower() in line_words for item in myList):
</code></pre>
</div>
<span class="comment-copy">Your file looks like a ":"-separated file. Try just <code>str.split(":")</code> to see if you can get a nice list, then look for the indices of element you want. If you have a header line you can use a <code>namedtuple</code> to store each line. Otherwise I suggest you use <a href="http://pythex.org" rel="nofollow noreferrer">pythex.org</a> and come up with the regex yourself as a practice. But I doubt you need <code>re</code> after all.</span>
<span class="comment-copy">But the code doesn't work it only prints the honda information even if you input BMW X6 so could i have some help with that.</span>
<span class="comment-copy">This is very helpful @Austin Hastings</span>
<span class="comment-copy">i will try and use it in my code and I will tell you if it works</span>
<span class="comment-copy">Traceback (most recent call last):   File "F:\car file.py", line 21, in &lt;module&gt;     if all(myList.lower() in re.findall('\w+', line.lower())): AttributeError: 'list' object has no attribute 'lower' &gt;&gt;&gt;</span>
<span class="comment-copy">This is the error i am getting so how can solve this thanks @Austin Hastings</span>
<span class="comment-copy">You are awesome bro thanks for the help</span>
<span class="comment-copy">thanks i will give it a go</span>
<span class="comment-copy">Sorry but it doesnt seem to be working</span>
