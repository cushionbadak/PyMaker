<div class="post-text" itemprop="text">
<p>So I starting to learn about classes and it is still a bit confusing of when I should make a new class instead of a function. I am making a code that gets information from a website, store the information in a database and makes a graph with this information.(I currently have a class called "Stats" that is doing this) I would like to use Tkinter to create buttons so that the person can choose what type of information he wants to see in the graphs, my question is if I should create a different class for the Tkinter and to make the graphs or if I should make them as functions from the "Stats" class. here is my code:</p>
<pre><code>from bs4 import BeautifulSoup
import urllib.request
import sqlite3
from matplotlib import pyplot as plt
from cairocffi import *
plt.style.use('ggplot')
plt.title('Online')
plt.ylabel('Number of players')

class Stats():
def __init__(self):
    self.conn = sqlite3.connect('test.db')
    self.c = self.conn.cursor()
    self.create_table()
    self.a = []
    url = "*************"
    page = urllib.request.urlopen(url)
    soup = BeautifulSoup(page.read(), 'html.parser')
    stats = soup.find_all("div", {"id":"RightArtwork"})
    number = soup.find_all("tr", {"class":"Odd"})

    for totalOnline in stats:
        divTotal = totalOnline.find_all("div")
        for totalOnline in divTotal:
            total = list(totalOnline.text)
            total[0:5] = [''.join(total[0:5])]
            total[1:19] = [''.join(total[1:19])]
            #self.number,self.name = total.split(",")
            self.number = int(total[0])
            self.name = str(total[1])
            #print(self.name)
            self.data_entry()
    self.graph()






def create_table(self):
    self.c.execute('CREATE TABLE IF NOT EXISTS testDB(name TEXT, number REAL)')

def data_entry(self):
    self.c.execute("INSERT INTO testDB(name, number) VALUES(?, ?)",
                   (self.name, self.number, ))
    self.conn.commit()

def comparison(self):
    highestNumber = self.c.execute('SELECT number FROM testDB ORDER BY number DESC LIMIT 1')
    for rows in highestNumber:
        print("The highest numbers of players online was " + str(rows[0]))

    lowestNumber = self.c.execute('SELECT number FROM testDB ORDER BY number ASC LIMIT 1')
    for rows in lowestNumber:
        print("The lowest number of players online was "+ str(rows[0]))

def graph(self):
    self.c.execute('SELECT number FROM testDB')
    values = []
    values2 = []
    i = 0
    for row in self.c.fetchall():
        floats = float(''.join(map(str,row)))
        values.append(floats)
        print(values[-1])
    while i &lt; len(values):
        i = i + 1
        values2.append(i)

    self.comparison()

    plt.plot(values2,values)
    plt.show()
    self.c.close()
    self.conn.close()



Stats()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Generally, it is a good idea to separate output from computation.
If you place the Tkinter code in a separate class:</p>
<pre><code>class GUI(tk.frame):
    def __init__(self, stats):
        ...
</code></pre>
<p>then your <code>Stats</code> class may be more reusable. You could write other scripts that
used the <code>Stats</code> class -- for example, a command-line script that uses <code>Stats</code>
without Tkinter, or a script that uses a different GUI framework, or multiple
scripts that use <code>Stats</code> in different ways.</p>
<p>If the <code>Stats</code> code were entangled with Tkinter code, then none of that would be
possible.</p>
<p>To follow the above advice, the <code>__init__</code> method should not call <code>graph</code>. Let
the GUI code do that.</p>
<hr/>
<p>Any problem that can be solved using classes can also be solved with plain
functions.  Sometimes using classes can make the code more succinct, however, by
avoiding the need to explicity pass around the state as an argument to each
function, or by taking advantage of inheritance.</p>
<p>When trying to decide when to use a class, try to imagine what the code would
look like with a class versus plain functions. Ask yourself what you are gaining
by using a class. Is there a possibility of subclassing? Is there a way to take
advantage of inheritance? Does the code become more compact / succinct by using
a class instead of plain functions? Does the class take advantage of <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow">special methods</a>? Consider Jack Diederich's advice about when
to <a href="https://www.youtube.com/watch?v=o9pEzgHorH0#t=9m26s" rel="nofollow">Stop Writing Classes</a>.</p>
<p>If you can't identify the benefit of using a class, use functions.</p>
</div>
<span class="comment-copy">A class's job is to store state. If you have state that needs to persist between calls, it should be wrapped in a class object. If you just have a <i>thing</i> that needs to be done, use a function.</span>
