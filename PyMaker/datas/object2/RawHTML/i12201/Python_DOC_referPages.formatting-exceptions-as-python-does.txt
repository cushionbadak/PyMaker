<div class="post-text" itemprop="text">
<p>If I raise an Exception in Python, here's what I get:</p>
<pre><code>raise Exception("Hello world")
Traceback (most recent call last):

  File "&lt;ipython-input-24-dd3f3f45afbe&gt;", line 1, in &lt;module&gt;
    raise Exception("Hello world")

Exception: Hello world
</code></pre>
<p>Note the last line that says <code>Exception: Hello world</code>. Given an Exception (<code>foo = Exception("Hello world")</code>), how can I produce text like this? None of the following work:</p>
<pre><code>str(foo)
Out[27]: 'Hello world'

repr(foo)
Out[28]: "Exception('Hello world',)"

"{}".format(foo)
Out[29]: 'Hello world'

"{}: {}".format(type(foo), foo)
Out[30]: "&lt;type 'exceptions.Exception'&gt;: Hello world"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your exception object is <code>exc</code>, then:</p>
<ul>
<li>The part before the colon is <code>type(exc).__name__</code>.</li>
<li>The part after the colon is <code>str(exc)</code>.</li>
</ul>
<p>So you can just do this:</p>
<pre><code>print('{}: {}'.format(type(exc).__name__, exc))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Making tdelaney's answer formal and demonstrating the difference...</p>
<h2>Strings</h2>
<pre><code>#test.py
import traceback

try :
    raise TypeError("Wrong Type baby!")

except Exception, e:
    print( "EXCEPTION FORMAT PRINT:\n{}".format( e ) )
    print( "EXCEPTION TRACE  PRINT:\n{}".format( traceback.format_exc(e) ) )
</code></pre>
<p>Resulting console output</p>
<pre><code>EXCEPTION FORMAT PRINT:
Wrong Type baby!
EXCEPTION TRACE  PRINT:
Traceback (most recent call last):
  File "/Users/me/test.py", line 4, in &lt;module&gt;
    raise TypeError("Wrong Type baby!")
TypeError: Wrong Type baby!
</code></pre>
<h2>Logging</h2>
<p>If you're in the context of logging there's also the <a href="https://docs.python.org/2/library/logging.html#logging.Logger.exception" rel="nofollow noreferrer">exception</a> method that will do the formatting for you.</p>
<pre><code># logTest.py
import logging

try :
    raise ValueError("my bad value")
except Exception , e :
    logging.exception( e )
</code></pre>
<p>with the resulting console output...</p>
<pre><code>ERROR:root:my bad value
Traceback (most recent call last):
  File "/Users/me/logTest.py", line 4, in &lt;module&gt;
    raise ValueError("my bad value")
ValueError: my bad value
</code></pre>
</div>
<span class="comment-copy">Why do you need to do this?</span>
<span class="comment-copy">Why not just <code>'Exception: {}'.format(foo)</code>?</span>
<span class="comment-copy">@cricket_007, I'm working in a context in which output written to the console likely won't be seen, so I'd like to catch exception, display it, nicely formatted, in a message box (using <a href="http://easygui.sourceforge.net/" rel="nofollow noreferrer">EasyGUI</a> in my case), and then raise it again.</span>
<span class="comment-copy">@AntonProtopopov, when used in practice the exception will have some more interesting type (say, <code>KeyError</code>), and I'd like to display that type rather than just labeling everything an exception.</span>
<span class="comment-copy">You can get the same info python prints with <code>traceback.format_exc()</code> called in the exception handler.</span>
<span class="comment-copy">Thanks. It's unfortunate that __name__ doesn't show up in <code>dir(type(foo))</code> or I might have found this.</span>
<span class="comment-copy">It is documented <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">here</a> (scroll down a bit...)</span>
