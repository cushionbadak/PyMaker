<div class="post-text" itemprop="text">
<p>I'm trying to speed up the following code. A program should find the prevalent number in a string. This is the number, which appears in a string for more than </p>
<blockquote>
<p>len(string)/2</p>
</blockquote>
<p>times. The challenge is that the input file consists of a random number of strings, each can contain several thousands numbers. I've tried the brute force approach</p>
<pre><code>for line in lst:
    nline = line.split(',')
    m = [i for i in nline if nline.count(i) &gt; len(nline)/2]
    print(m[0] if len(m) &gt; 0 else "None")
</code></pre>
<p>and it yielded about 10 seconds of runtime.</p>
<p>The fastest version runs for about 0.8 seconds</p>
<pre><code>for line in lst:
    nline = line.split(',')
    d = collections.Counter(nline)
    n = dict()
    m = [i for i, n in d.items() if n &gt; len(nline)/2]
    print(m[0] if len(m) &gt; 0 else "None")
</code></pre>
<p>Are there any ways to further increase performance?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I would use the <code>.most_common(1)</code> member function of <code>collections.Counter</code></p>
<pre><code>for line in lst:
    ...
    d = collections.Counter(nline)
    m = d.most_common(1)
    print( "None" if m is None else m[0] )
</code></pre>
<p>See: <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.Counter.most_common</a></p>
<p>Although I don't think that there will be much speed to be gained. The heavy lifting is the frequency counting of all elements in <code>nline</code>.</p>
</div>
<span class="comment-copy">Thanks for most_common, haven't figured it out. However, it's hardly gives any performance advantage. Just as you've said.</span>
