<div class="post-text" itemprop="text">
<p>To handle the errors in Python 3.5 gracefully, I am using the following code:</p>
<pre><code>    except:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        # print("Unable to write feed_item in database")
        # print(feeditem_insert_data)
        error_insert_data = (
            prog_name, 'Unable to populate item for (feed id,ref_feed_id) ('
                       + str(feed_id) +',' + str(ref_feed_id) + ') in feed_item table'
            , str(exc_type), str(exc_value), repr(traceback.format_tb(exc_traceback)), datetime.datetime.now()
        )
        cur_error_log.execute(error_insert_stmt,error_insert_data)
        continue
</code></pre>
<p>After adding this code at many places in my program, I am observing weird behavior as in program running long behaving on same data differently than program running short. I cant conclusively say this behavior showed up after adding the code above.</p>
<p>But I remember reading somewhere that if I use traceback than I have to deallocate memory manually.</p>
<p>Please advice if the module I have above is technically correct or something needs to be done to avoid issues.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main change in Python 3 regarding exceptions is that it's no longer necessary to use <code>sys.exc_info</code> in order to get the traceback. It's now available as the <code>__traceback__</code> attribute on the exception object (this is possible since all exceptions in Python 3 must inherit from the base <code>Exception</code> class, while older versions of Python 2 allowed anything to be treated as an exception).</p>
<p>So, you could replace the first two lines of your <code>except</code> code with <code>except Exception as e:</code> and then use <code>type(e)</code>, <code>e</code>, and <code>e.__traceback__</code> in the error reporting code, rather than the values you were getting from <code>sys.exc_info</code>.</p>
<p>Having the traceback as an attribute on the exception can have some adverse consequences though on memory usage. Specifically, it creates a reference cycle between the current frame of execution and the exception. The frame references the exception (if you've bound it to a local variable), the exception references the traceback through its attribute and the traceback references the frame. The cycle means that the memory can't be reclaimed immediately by the reference counting system when it goes out of scope. Instead it has to rely upon the cyclical garbage collector, which might be slow to reclaim the memory, or even never get around to it (you can turn it off completely).</p>
<p>To reduce the impact of this issue, Python will automatically delete the exception variable created by a <code>except ExceptionType as e</code> statement at the end of its block. If you create references to the exception under some other name, you may need to clean them up yourself to avoid the memory sticking around longer than you need it.</p>
<p>So, if you really are having exception related memory issues, try adding <code>del exc_value, exc_traceback</code> at the end of the <code>try</code> block, just before <code>continue</code>.  Or alternatively, switch to the <code>except Exception as e</code> syntax I described above, and <code>e</code> (or whatever name you use) will be removed from the local namespace for you automatically.</p>
</div>
<span class="comment-copy">If <code>continue</code> is part of what you are adding, it's either superfluous or will change the loop behavior. But otherwise it's impossible to diagnose what's wrong (if anything is) without the rest of the code.</span>
<span class="comment-copy">Sorry I dont understand, please help me understand. Continue is to ignore this record and jump to next one for processing - how can it be harmful or related to diagnosis.</span>
<span class="comment-copy">If you have some more code after the <code>except</code> block, then <code>continue</code> in the <code>except</code> block will change how you loop when an exception occurs: without it, the code below will be executed after the exception is handled; with it, the code below will be skipped. If you don't have any more code after the <code>except</code> block, then <code>continue</code> makes no difference and is superfluous.</span>
<span class="comment-copy">Yeah.. I do have code - that's why continue. Thanks for reply though.</span>
<span class="comment-copy">Thank you so much for the detailed reply. I think del changed the behavior. I am going to try other suggestion out as well.</span>
<span class="comment-copy">Are there any references which explain this implementation detail of removing <code>as exc</code> name from <code>except</code>? I know it works that way because I checked it in Python.</span>
<span class="comment-copy">@JCode: The behavior is documented in the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow noreferrer">language reference</a>.</span>
