<div class="post-text" itemprop="text">
<p>I'm new to Python and OOP in general (so far I've been programming mostly in C) and I have a question about functions changing value of multiple variables. I'm doing lexical and syntactic analysis of a string and created a function for getting characters one by one.
Code:</p>
<pre><code>def getchar(string, char):

    if string:
        char=string[0]
        string=string[1:]
    else:
        char=""
</code></pre>
<p>I don't mind string being destroyed. The problem is that I need to change value of both char and string which in C would be done by dereferencing &amp;. Is there some way I can achieve this in Python? Also: if the solution involves objects and classes I would be thankful if you could dumb it down a little since I have very little experience with them.</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You would not, and can not, modify the values of the parameters; strings are immutable in Python. Instead, simply return the new values and reassign them in the caller.</p>
<pre><code>def getchar(string, char):
    ...
    return string, char

...

newstring, newchar = getchar(string, char)
</code></pre>
<p>Note that generally it is a bad idea to try to program in one language as if it were another. Python is not C, and you shouldn't attempt to apply C concepts like "dereferencing" which simply have no meaning in a language without pointers.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python you can just iterate a string char by char. But you can't modify a string in place, you have to create a new string (though you can use the same name for it).</p>
<p>E.g.</p>
<pre><code>old_string = 'test'
for ch in string:
    print(ch)
</code></pre>
<p>will get you:</p>
<pre><code> t
 e
 s
 t
</code></pre>
<p>And for your example with 'hello' in comments, you could use generator:</p>
<pre><code>  #define generator function  
  def char_gen(str_in):
       for ch in str_in:
           str_in = str_in[1:]
           yield ch, str_in

  #initiate generator for your string
  hello_gen = char_gen('hello')

  #now every call to next() will get you a character and the rest of the string
  #and raise StopIteration exception, when the generator is emptied

  print(next(hello_gen))
  print(next(hello_gen))
  print(next(hello_gen))
  print(next(hello_gen))
  print(next(hello_gen))
  print(next(hello_gen))
</code></pre>
<p>Will print:</p>
<pre><code>('h', 'ello')
('e', 'llo')
('l', 'lo')
('l', 'o')
('o', '')
Traceback (most recent call last):
  File "test.py", line 13, in &lt;module&gt;
    print(next(hello_gen))
StopIteration
</code></pre>
<p>or you can use it in a loop:</p>
<pre><code>hello_gen = char_gen('hello')
for ch, st in hello_gen:
     print(ch, st)
</code></pre>
<p>will give you:</p>
<pre><code>h ello
e llo
l lo
l o
o 
Traceback (most recent call last):
  File "test.py", line 11, in &lt;module&gt;
    print(next(hello_gen))
StopIteration
</code></pre>
</div>
<span class="comment-copy">Your problem is unclear, can you clarify further by presenting an example with input/output?</span>
<span class="comment-copy">It would help to get a better overall picture of what you're trying to achieve. Modifying <code>string</code> in this way looks a bit like part of an algorithm that one would employ in a language like C; in Python, there might be a way to achieve your greater goal that doesn't even have this step. Maybe iterating over the characters would already be sufficient, but this cannot be told from your question.</span>
<span class="comment-copy">Ok, let's say i have string "hello" and I want want to get characters one by one. So each time I call getchar the values would change like this: char="h" string="ello"...char="e" string="llo" and so on. The value of a string needs to be remembered outside of this function because I'm accessing 0th position which needs to be different. I want to achieve this by dereferencing, which is appearently not possible in Python</span>
<span class="comment-copy">Well I have string that sort of looks like item1,[whitespaces] item2, [whitespaces] etc. and I'm trying to isolate each item essentialy. Tbh the solution to this problem is secondary, I'm more interested in finding out how to go about solving problems like this in python.</span>
<span class="comment-copy">It sounds like all you need is just <code>item_list = items_string.split()</code>.  (If you find yourself coding your own string-handling in Python, you probably haven't searched the <a href="https://docs.python.org/3/library/" rel="nofollow noreferrer">standard library</a> enough.)</span>
<span class="comment-copy">This is the kind of solution I was looking for! Thanks a lot! And yeah I know that C and Python are quite different, but this is literally my first program and I'm just learning the ropes. I'm sure when I finish I will have sort of clearer understanding on how Python should be used.</span>
<span class="comment-copy">I came across this solution but I have no idea how to build my solution around this since all my code would have to be in body of for and would repeat.</span>
<span class="comment-copy">@mandatory, please see answer update with generator function.</span>
