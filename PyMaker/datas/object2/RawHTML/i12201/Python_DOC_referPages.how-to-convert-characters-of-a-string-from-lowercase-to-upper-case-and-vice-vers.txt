<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function which accepts an input string and returns a string
  where the case of the characters are changed, i.e. all the uppercase
  characters are changed to lower case and all the lower case characters
  are changed to upper case. The non-alphabetic characters should not be
  changed. Do NOT use the string methods upper(), lower(), or swap().</p>
</blockquote>
<p>This is my code:</p>
<pre><code>def changing_cases (input_str):
    new_string = []
    for i in range(0, len(input_str)):
        convert = input_str[i]
        value = ord(convert)
        if (value &gt;= 65 and value &lt;= 90 ):
            value += 32
            new_string.append(chr(value))
        elif (value &gt;= 97 and value &lt;= 122):
            value -= 32
            new_string.append(chr(value))
    return (str(new_string))   

#Main Program
input_str = "Hello"
result = changing_cases (input_str)
print (result)
</code></pre>
<p>This code works as expected but there are two major problems with this. </p>
<ol>
<li>Firstly the output which it returns to the Main is a list, I want it as a string. </li>
<li>Second, how to check whether the string contains special cases and by pass it if there is a special character. Special characters are scattered all over the ASCII table.</li>
</ol>
<p>Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The string method <code>.join()</code> can help you to <strong>unite a list</strong> and return a string. But without that knowledge, you could have done this <strong>string concatenation</strong>.(For that you need to initialize <code>new_string</code> with <code>""</code>, not <code>[]</code>)</p>
<p><a href="http://www.tutorialspoint.com/python/string_join.htm" rel="nofollow">Join</a> usage:</p>
<pre><code>"".join(["h","e","l","l","o"])
# "hello"
</code></pre>
<p>To your second question. You could check if an input is <strong>from the alphabet</strong> with the <code>.isalpha()</code> method. Which returns a <strong>boolean</strong> value.</p>
<pre><code>"a".isalpha()
# True

"&amp;".isalpha()
# False
</code></pre>
<p>And a suggestion about the solution, You could import the uppercase and lowercase alphabets from the <code>string</code> module. After that, iterating over the term and swapping letters using the alphabet strings is very easy. Your solution is fine for understanding how <strong>ascii table</strong> works. But with the way I mentioned, you can avoid facing problems about special cases. It is a poor method for cryptology though. </p>
</div>
<div class="post-text" itemprop="text">
<p>Concerning the first problem. I've found it may be possible to use:</p>
<pre><code>print ','.join(result)
</code></pre>
<p>or</p>
<pre><code>print str(result).strip('[]')
</code></pre>
<p>Good luck!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def changing_cases (input_str):
    new_string = []
    for i in range(0, len(input_str)):
        convert = input_str[i]
        value = ord(convert)
        if 65 &lt;= value &lt;= 90:
            value += 32
            new_string.append(chr(value))
        elif 97 &lt;= value &lt;= 122:
            value -= 32
            new_string.append(chr(value))
        else:
            return
    return ''.join(new_string)
</code></pre>
<p>So this function will return None if there are any special characters in string and you simply add if conditon to check if result is None then you just skip this word</p>
</div>
<div class="post-text" itemprop="text">
<p>You are close:</p>
<pre><code>def changing_cases (input_str):
    new_string = []
    for i in range(0, len(input_str)):
        convert = input_str[i]
        value = ord(convert)
        if (value &gt;= 65 and value &lt;= 90 ):
            value += 32
            new_string.append(chr(value))
        elif (value &gt;= 97 and value &lt;= 122):
            value -= 32
            new_string.append(chr(value))
        else: #if special character
            new_string.append(chr(value))
    return (''.join(new_string))   

#Main Program
input_str = "Hello"
result = changing_cases (input_str)
print (result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python3, one option is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow">str.translate</a>. </p>
<p>First, use string methods - <a href="https://docs.python.org/3.1/library/string.html" rel="nofollow">string.ascii_uppercase</a> and <a href="https://docs.python.org/3.1/library/string.html" rel="nofollow">string.ascii_lowercase</a> to build strings with entire character sets 'A..Z' and 'a..z'. Use <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow">str.maketranslate</a> to make a translation table, one for upper case letters to lower case and another for lower case to upper case letters. Finally, loop through the required string, and use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow">str.translate</a> to build the converted string.</p>
<pre><code>import re
import string

test_str = r'The Tree outside is gREEN'
new_str = ''

str_lower = string.ascii_lowercase
#'abcdefghijklmnopqrstuvwxyz'

str_upper = string.ascii_uppercase
#'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

tr_to_upper = str.maketrans(str_lower, str_upper)
tr_to_lower = str.maketrans(str_upper, str_lower)

for char in test_str:
    if re.findall(r'[A-Z]', char):
        new_str = new_str + char.translate(tr_to_lower)
    elif re.findall(r'[a-z]', char):
        new_str = new_str + char.translate(tr_to_upper)
    else:
        new_str = new_str + char

print('{}'.format(new_str))
</code></pre>
<p>Output:</p>
<pre><code>tHE tREE OUTSIDE IS Green
</code></pre>
</div>
<span class="comment-copy">Hint for your first problem. Look up what <code>join</code> does.</span>
<span class="comment-copy">if you dont want to change special characters, try an else-block with simple <code>continue</code> after your elif-block and move the new_string.append() part after your if-elif-else part</span>
<span class="comment-copy">Why use ' '. before join?</span>
<span class="comment-copy">You join each element of your list to an empty string (''). It force the conversion to a string object by saying it is a string, without adding unwanted characters.</span>
