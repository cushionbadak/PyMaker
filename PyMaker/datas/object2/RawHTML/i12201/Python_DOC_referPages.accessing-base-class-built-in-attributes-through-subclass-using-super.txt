<div class="post-text" itemprop="text">
<p>I'm playing around with super() in order to get a grasp of how it can be used. So I'm trying to use it to access the <code>__name__</code> and <code>__doc__</code> attributes of a base class through it's subclass. This is what I have as an example:</p>
<pre><code>    class baseclass:
        "This is the base class"

    class subclass(baseclass):
        def print_base_name(self):
            print(super(subclass,self).__name__)

        def print_base_doc_string(self):
            print(super(subclass, self).__doc__)

    subinstance=subclass()
    subinstance.print_base_doc_string()
    subinstance.print_base_name()
</code></pre>
<p>After running the code I receive this output:</p>
<blockquote>
<p>This is the base class</p>
</blockquote>
<p>and then an error which essentially says:</p>
<blockquote>
<p>AttributeError: 'super' object has no attribute '<code>__name__</code>'</p>
</blockquote>
<p>How come the first statement successfully prints the doc string, while the second one fails to print the class name? The other thing is the fact that the error message uses <em>super</em> rather than the base class' name to refer to the object in question. I would have assumed that <code>super(subclass,self).__name__</code> would internally be replaced by the base class so essentially it would be something vaguely resembling <code>baseclass.__name__</code>. However, that's obviously not the case since the error message specifically mentioned a <em>super</em> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>What version of Python are you using? Neither of those methods work running your code in 2.7. The problem is that you're using <code>super</code> with old-style classes:</p>
<pre><code>class baseclass:
    "This is the base class"

class subclass(baseclass):

    def print_base_name(self):
        print baseclass.__name__

    def print_base_doc_name(self):
        print baseclass.__doc__
</code></pre>
</div>
<span class="comment-copy">What makes you think that a class type should have a <code>__name__</code> attribute? They don't.</span>
<span class="comment-copy">Quote from <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html</a>: "Special attributes: <b>name</b> is the class name." Also, this link gives a table with special class attributes: <a href="https://docs.python.org/3/library/stdtypes.html?highlight=__name__#special-attributes" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Except the return value of <code>super</code> is not a class, thus is not required to have a <code>__name__</code> attribute.</span>
<span class="comment-copy">But don't you find it weird that the <i>super</i> statement works for <code>__doc__</code> but not for <code>__name__</code> ?</span>
<span class="comment-copy"><code>super</code> returns a type, which doesn't have that attribute.</span>
