<div class="post-text" itemprop="text">
<p>I have a pandas dataframe containing a list of x,y coordinates and I am using scipy.spatial to find the nearest point in the dataframe given an additional point.</p>
<pre><code>import pandas as pd
import numpy as np
import scipy.spatial as spatial

stops = pd.read_csv("stops.csv")
pt = x,y
points = np.array(zip(stops['stop_lat'],stops['stop_lon']))
nn = points[spatial.KDTree(points).query(pt)[1]]
</code></pre>
<p>Now, in python 2.7 this work perfectly. In python 3.5 I get the following error:</p>
<pre><code>.../scipy/spatial/kdtree.py", line 231, in __init__
self.n, self.m = np.shape(self.data)
ValueError: not enough values to unpack (expected 2, got 0)
</code></pre>
<p>In the docs I can't find anything useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3, <code>zip()</code> returns an <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer">iterator object</a> rather than a list of tuples. <code>points</code> will therefore be a 0-dimensional <code>np.object</code> array containing a <code>zip</code> iterator, rather than a 2D array of x, y coordinates.</p>
<p>You could construct a <code>list</code> from the iterator:</p>
<pre><code>points = np.array(list(zip(stops['stop_lat'],stops['stop_lon'])))
</code></pre>
<p>However, a more elegant solution might be to avoid using <code>zip</code> altogether by indexing multiple columns of your dataframe:</p>
<pre><code>points = stops[['stop_lat','stop_lon']].values
</code></pre>
</div>
<span class="comment-copy">What does <code>points</code> look like? In Python3, <code>zip()</code> returns a <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code> iterator object</a> rather than a list of tuples, so <code>points</code> is probably a 0-d object array containing a <code>zip</code> iterator in the second case.</span>
<span class="comment-copy">Yes, this was exactly the problem. I did list(zip(...)) and now it works perfectly. Thanks</span>
