<div class="post-text" itemprop="text">
<p>In <a href="https://www.python.org/dev/peps/pep-0754/#id5" rel="nofollow">PEP 754</a>'s rejection notice, it's stated that:</p>
<blockquote>
<p>This PEP has been rejected. After sitting open for four years, it has
  failed to generate sufficient community interest.</p>
<p>Several ideas of this PEP were implemented for Python 2.6.
  float('inf') and repr(float('inf')) are now guaranteed to work on
  every supported platform with IEEE 754 semantics. However the
  eval(repr(float('inf'))) roundtrip is still not supported unless you
  define inf and nan yourself:</p>
<pre><code>&gt;&gt;&gt; inf = float('inf')
&gt;&gt;&gt; inf, 1E400
(inf, inf)
&gt;&gt;&gt; neginf = float('-inf')
&gt;&gt;&gt; neginf, -1E400
(-inf, -inf)
&gt;&gt;&gt; nan = float('nan')
&gt;&gt;&gt; nan, inf * 0.
(nan, nan)
</code></pre>
</blockquote>
<p>This would seem to say there is no native support for Inf, NaN and -Inf in Python, and the example provided is accurate! But, it is needlessly verbose:</p>
<pre><code>$ python2.7
&gt;&gt;&gt; 1e400
inf
&gt;&gt;&gt; 1e400 * 0
nan
&gt;&gt;&gt; -1e400 * 0
nan
&gt;&gt;&gt; -1e400
-inf
$ python3
&gt;&gt;&gt; 1e400
inf
&gt;&gt;&gt; 1e400 * 0
nan
&gt;&gt;&gt; -1e400 * 0
nan
&gt;&gt;&gt; -1e400
-inf
</code></pre>
<p>These are <strong>canonical</strong> representations of the number 1 * 10 ^ 400. The names <code>inf</code> and <code>nan</code> do not exist in the grammar by default, but if they are there in the representation then why aren't <code>inf</code> and <code>nan</code> keywords? </p>
<p>I am not asking why the PEP was rejected as that is opinion-based.</p>
</div>
<div class="post-text" itemprop="text">
<p>My guess is that no one wanted to clutter the namespace needlessly.</p>
<p>If you want to do math, you can still do:</p>
<pre><code>import math

print(math.inf)
print(-math.inf)
print(math.nan)
</code></pre>
<p>Output:</p>
<pre><code>inf
-inf
nan
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use</p>
<p>float('inf')</p>
<p>np.nan</p>
</div>
<span class="comment-copy">There are <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">very few keywords</a>   in Python. <code>float</code>, for example, isn't a keyword. Certainly <code>float</code> is more generally useful than <code>inf</code>. Why then <i>should</i> <code>inf</code> be a keyword?</span>
<span class="comment-copy">@Robáµ© <code>float</code> and <code>int</code> happen to be builtins that are both types and functions; they are special. Why not <code>nan</code> if it exists?</span>
<span class="comment-copy">Because people use <code>inf</code> and <code>nan</code> rarely, so they don't warrant the status of being keywords?</span>
<span class="comment-copy">@Nayuki that's a very good point, I guess Python doesn't have a overload of keywords <i>cough</i> Perl 6</span>
<span class="comment-copy">It's hard to add a keyword after the fact; someone out there may be using your proposed keyword as a variable name, and that change will break their code. Is it worth that risk to define a constant very few people will care about?</span>
<span class="comment-copy">But the output is not a printed string, it's what I showed in the question -- they're natively supported but not keywords.</span>
<span class="comment-copy">Define "natively supported". The values returned by a <code>repr</code> call don't necessarily have any special internal meaning to Python. For example, <code>"nan"</code> is created via an ordinary <a href="https://github.com/python/cpython/blob/513f40a9abfc00b7de1f36eb780c2cf47169cf2a/Python/pystrtod.c#L832" rel="nofollow noreferrer">strcopy call</a> shortly before repr finishes executing.</span>
