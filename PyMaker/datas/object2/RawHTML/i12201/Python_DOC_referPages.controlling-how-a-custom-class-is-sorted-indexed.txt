<div class="post-text" itemprop="text">
<p>I am attempting to represent a calendar in a Class-based format.</p>
<p>Currently, the data is represented in an OrderedDict of the following form:</p>
<pre><code>from collections import OrderedDict

dictionary = OrderedDict()
dictionary[date] = {'attr1': ... ,
                    'attr2': ... ,
                    ... }
</code></pre>
<p>I would ideally like to instantiate some sort of <code>EnhancedDay</code> class which represents the data in the dictionary, with a corresponding <code>EnhancedCalendar</code> class that holds a sorted container (list, OrderedDict?) of <code>EnhancedDay</code>s. Features I'm looking at:</p>
<ol>
<li>a number of <code>EnhancedDay</code> objects to be stored, <strong><em>sorted</em></strong>, as <code>EnhancedCalendar.attr</code></li>
<li>ability to retrieve / work with <code>EnhancedDay</code>s by date (i.e. I would like to use the date as a sort of 'key' so I could retrieve an <code>EnhancedDay</code> through something similar to <code>EnhancedCalendar.attr[date]</code></li>
<li>a way to append/modify attributes of <code>EnhancedDay</code> instances which are stored as part of a <code>EnhancedCalendar</code> instance so that if I were to attempt to <strong><em>add</em></strong> an <code>EnhancedDay</code> to <code>EnhancedCalendar.attr</code> where there already was an <code>EnhancedDay</code> object in <code>EnhancedCalendar.attr</code> representing that date, the <code>EnhancedDay</code> object would instead be merged "automatically."</li>
</ol>
<p>I think for #1, I basically understand the answer:</p>
<ol>
<li>I would use the <code>@total_ordering</code> decorator (<a href="https://docs.python.org/2/library/functools.html#functools.total_ordering" rel="nofollow">https://docs.python.org/2/library/functools.html#functools.total_ordering</a>), specify an <code>__eq__</code> and other comparison operator to use the <code>EnhancedDay</code>'s <code>date</code> attr, and be good-to-go.</li>
<li>No idea. There are a few posts on SO on this topic, but I haven't found any that meet my needs.</li>
<li>The best way I know would be to write a custom merging function (something akin to a custom_append). <code>EnhancedCalendar.attr[date].custom_append(EnhancedDay)</code> and have a merge occur OR if <code>attr[date]</code> doesn't exist, create <code>attr[date]</code> Again, not sure of the <strong>best/smoothest</strong> way to do this. I'd love to use <code>+=</code>.</li>
</ol>
<p>Also: what would be the best datatype to store the <code>EnhancedDay</code> instances in, in the <code>EnhancedCalendar</code> instance?</p>
<p>Alternatively, given what I'm trying to accomplish, some of my thinking might just be... off. Any help on that front would be appreciated.</p>
<p>Alternatively, this all may be way more trouble than it's worth, in which case I'm still interested in how you would theoretically accomplish these things using classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>For #2 There are a few ways to do this. One way might be to convert the date to some sort of canonical format, then use that as a string index into a dictionary. </p>
<p>For #3 take a look at <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow">https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence</a></p>
<p>It makes sure you implement the functions required for indexing and <code>+=</code> operators to work the way you want. Specifically for <code>+=</code> to work you need to override the <code>__iadd__()</code> function. 
For <code>Calendar[date]</code> to do what you want you'll need to override the <code>__getitem__()</code> and <code>__setitem__()</code> functions -- however collections.DefaultDict nearly does what you want there so I might be tempted to base EnhancedCalendar off of that. </p>
<p>I think I would use a list datatype to store the days inside the calendar, then you would index by day-1. </p>
</div>
<span class="comment-copy">Thank you :). I'm using datetime.date as the canonical format for the index -- given that, would you be able to elaborate on your last sentance? I thought about DefaultDict, but iirc it was non-trivial to have a <b><i>sorted</i></b> DefaultDict.</span>
<span class="comment-copy">I see. Does it need to be sorted? If you say EnhancedCalendar[0] it will return the first day of the calendar (unclear to me if a calendar is 1 month or 1 year or something else). If you want to use is as an iterator, then you could override <code>__iter__()</code> to iterate over them in whichever order you need.</span>
<span class="comment-copy">Oh, that's cool. I think for speed, being sorted would be best (generally I'm iterating from earliest to latest).  <code>EnhancedCalendar</code> actually stores more data than just the dates information; just to be clear I'm interpreting where you wrote <code>EnhancedCalendar[0]</code> above to be <code>EnhancedCalendar.attr[0]</code>?  The idea is that it's a specialized calendar that covers an arbitrary range of (continuous) dates.</span>
