<div class="post-text" itemprop="text">
<p>I have a data frame called <code>data</code>, which has a column <code>Dates</code> like this,</p>
<pre><code>                 Dates
0  2015-05-13 23:53:00
1  2015-05-13 23:53:00
2  2015-05-13 23:33:00
3  2015-05-13 23:30:00
4  2015-05-13 23:30:00
</code></pre>
<p>I know how to add a column to data frame, but how to divide <code>Dates</code> to </p>
<pre><code>          Day         Time
0  2015-05-13     23:53:00
1  2015-05-13     23:53:00
2  2015-05-13     23:33:00
3  2015-05-13     23:30:00
4  2015-05-13     23:30:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your series is <code>s</code>, then this will create such a DataFrame:</p>
<pre><code>pd.DataFrame({
    'date': pd.to_datetime(s).dt.date,
    'time': pd.to_datetime(s).dt.time})
</code></pre>
<p>as once you convert the series using <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html" rel="nofollow"><code>pd.to_datetime</code></a>, then the <code>dt</code> member can be used to extract the parts.</p>
<hr/>
<p><strong>Example</strong></p>
<pre><code>import pandas as pd

s = pd.Series(['2015-05-13 23:53:00', '2015-05-13 23:53:00'])
&gt;&gt;&gt; pd.DataFrame({
    'date': pd.to_datetime(s).dt.date,
    'time': pd.to_datetime(s).dt.time})
    date    time
0   2015-05-13  23:53:00
1   2015-05-13  23:53:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your <code>Dates</code> column is a string:</p>
<pre><code>data['Day'], data['Time'] = zip(*data.Dates.str.split())

&gt;&gt;&gt; data
                 Dates         Day      Time
0  2015-05-13 23:53:00  2015-05-13  23:53:00
1  2015-05-13 23:53:00  2015-05-13  23:53:00
2  2015-05-13 23:33:00  2015-05-13  23:33:00
3  2015-05-13 23:33:00  2015-05-13  23:33:00
4  2015-05-13 23:33:00  2015-05-13  23:33:00
</code></pre>
<p>If it is a timestamp:</p>
<pre><code>data['Day'], data['Time'] = zip(*[(d.date(), d.time()) for d in data.Dates])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If type of column <code>Dates</code> is string, convert it by <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html" rel="nofollow"><code>to_datetime</code></a>. Then you can use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.date.html" rel="nofollow"><code>dt.date</code></a>, <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.time.html" rel="nofollow"><code>dt.time</code></a> and last <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html" rel="nofollow"><code>drop</code></a> original column <code>Dates</code>:</p>
<pre><code>print df['Dates'].dtypes
object
print type(df.at[0, 'Dates'])
&lt;type 'str'&gt;

df['Dates'] = pd.to_datetime(df['Dates'])

print df['Dates'].dtypes
datetime64[ns]

print df
                Dates
0 2015-05-13 23:53:00
1 2015-05-13 23:53:00
2 2015-05-13 23:33:00
3 2015-05-13 23:30:00
4 2015-05-13 23:30:00

df['Date'] = df['Dates'].dt.date
df['Time'] = df['Dates'].dt.time

df = df.drop('Dates', axis=1)
print df
         Date      Time
0  2015-05-13  23:53:00
1  2015-05-13  23:53:00
2  2015-05-13  23:33:00
3  2015-05-13  23:30:00
4  2015-05-13  23:30:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>attrgetter</code></a> + <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer"><code>pd.concat</code></a> + <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html" rel="nofollow noreferrer"><code>join</code></a></h3>
<p>You can use <code>operator.attrgetter</code> with <code>pd.concat</code> to add an arbitrary number of <code>datetime</code> attributes to your dataframe as separate series:</p>
<pre><code>from operator import attrgetter

fields = ['date', 'time']
df = df.join(pd.concat(attrgetter(*fields)(df['Date'].dt), axis=1, keys=fields))

print(df)

                 Date        date      time
0 2015-05-13 23:53:00  2015-05-13  23:53:00
1 2015-01-13 15:23:00  2015-01-13  15:23:00
2 2016-01-13 03:33:00  2016-01-13  03:33:00
3 2018-02-13 20:13:25  2018-02-13  20:13:25
4 2017-05-12 06:52:00  2017-05-12  06:52:00
</code></pre>
</div>
<span class="comment-copy">What type of data is 'Dates'? What is the output of df.Dates.iat[0]?</span>
<span class="comment-copy">Can you save the time column values in 12 hours format instead of a 24 hour format???</span>
<span class="comment-copy">@sanster9292 See <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.dt.strftime.html" rel="nofollow noreferrer">this</a>.</span>
<span class="comment-copy">Ami, I am not great with this. I have data in a pandas columns that looks like this.   1999-01-01T00:00:29.75  I want to split and save it and Eastern Daylight Time. How would I handle the T in there?  This is what I am doing so far,</span>
<span class="comment-copy">df3['Day']=pd.to_datetime(df['Date'], format='%Y-%m-%d %H:%M:%S.%f',errors='coerce').dt.tz_localize('UTC')</span>
<span class="comment-copy">@sanster9292 Could you please ask this as a question? Comments are not meant for this stuff. Plenty of people will help you out.</span>
