<div class="post-text" itemprop="text">
<p>I'm trying to combine a Node.js with Python to create a socket connection.</p>
<p>The problem is that I can send data, but I can't maintain the connection.</p>
<p>This is my server in Node.js</p>
<pre><code>var net = require('net');

var HOST = '127.0.0.1';
var PORT = 1337;

net.createServer(function(sock) {

    console.log('CONNECTED: ' + sock.remoteAddress +':'+ sock.remotePort);

    sock.on('data', function(data) {

        console.log('DATA ' + sock.remoteAddress + ': ' + data);
        sock.write('You said "' + data + '"');

    });

    sock.on('close', function(data) {
        console.log('CLOSED: ' + sock.remoteAddress +' '+ sock.remotePort);
    });

}).listen(PORT, HOST);

console.log('Server listening on ' + HOST +':'+ PORT);
</code></pre>
<p>and this is my client side in Python</p>
<pre><code>import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect the socket to the port where the server is listening
server_address = ('localhost', 1337)
print &gt;&gt;sys.stderr, 'connecting to %s port %s' % server_address
sock.connect(server_address)

try:

    # Send data
    message = 'This is the message.'
    print &gt;&gt;sys.stderr, 'sending "%s"' % message
    sock.sendall(message)

finally:
    print &gt;&gt;sys.stderr, 'closing socket'
</code></pre>
<p>This works great but the client disconnects right after it has sent the data.</p>
<p>Ultimately, I want to be able to give user-input to send data, and also receive data.</p>
<p>Any suggestions on how to do this would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll approach the user input scenario. As of now, your program simply runs its course and exists.</p>
<p>You want to be able to combine two naively blocking operations, running some sort of input loop (e.g. <code>while True: data = input()</code>) but handle incoming traffic as well.</p>
<p>The basic way to do this is to have 2 threads, one for user input and the other for socket connections in similar <code>while True: data = socket.recv(buff)</code> loop, but there's another catch here as you might block on a single connection -- you'll have to dedicate a thread per connection. In order to avoid this, you could use <a href="http://man7.org/linux/man-pages/man2/select.2.html" rel="nofollow">select</a>, which maintains socket connections for you asynchronously.</p>
<p>If there's no user-input, than you can just use <code>select</code> -- that will be sufficient to handle multiple connections in a concise manner.</p>
<p>Either way, I suggest you take a look at some asynchronous event-driven frameworks that are <code>select</code> based such as <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a> and <a href="http://twisted.readthedocs.org/en/latest/core/howto/internet-overview.html" rel="nofollow">Twisted</a>.</p>
</div>
