<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3652554/calling-java-from-python">Calling Java from Python [closed]</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I need to find a way of communication between java and python program. My application is Java, and another application ( python) will request me some data and trigger some process in my Java Application. </p>
<p><strong>EDITED</strong>: My application is Java desktop application, that uses Jboss Application server.</p>
<p>For  first release, I do not have enough time to make a comprehensive way of communication. So I am planing to use <strong>subprocess.Popen</strong> for first release. I will provide them a jar. Then they can call me from pyhton. </p>
<p>Actually I was planned to make a single class that takes some arguments on main. Then according to parameters, my application can determine to call related function.
But there is a problem here. When they want to call my functions in following way. in each call, a new java process will be created and I can not keep some static variables from my application. Actually What I need is to run my application once, then access some functions from existing process.</p>
<pre><code>#!/usr/bin/env python
from subprocess import Popen, PIPE

p = Popen(['java', '-jar', 'myjarfile.jar'], stdin=PIPE, stdout=PIPE)
</code></pre>
<p>Do you think Can I implement this using <strong>subprocess.Popen</strong>. If not can you show me an easy way ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using xmlrpc -- it's pretty simple:</p>
<pre><code>import org.apache.xmlrpc.*;

public class JavaServer { 

  public Integer sum(int x, int y){
    return new Integer(x+y);
  }

  public static void main (String [] args){

    try {

      System.out.println("Attempting to start XML-RPC Server...");

      WebServer server = new WebServer(8080);
      server.addHandler("sample", new JavaServer());
      server.start();

      System.out.println("Started successfully.");
      System.out.println("Accepting requests. (Halt program to stop.)");

    } catch (Exception exception){
      System.err.println("JavaServer: " + exception);
    }
  }
}
</code></pre>
<p>(Source <a href="http://www.tutorialspoint.com/xml-rpc/xml_rpc_examples.htm" rel="nofollow">http://www.tutorialspoint.com/xml-rpc/xml_rpc_examples.htm</a>)</p>
<p>Here's some code for a python client:</p>
<pre><code>import xmlrpc.client
proxy = xmlrpc.client.ServerProxy("http://localhost:8080/")
today = proxy.today()
</code></pre>
<p>(Source: <a href="https://docs.python.org/3/library/xmlrpc.client.html" rel="nofollow">https://docs.python.org/3/library/xmlrpc.client.html</a>)</p>
<p>All you'd have to do is make your methods and stitch them together.</p>
</div>
<span class="comment-copy">Popen isn't really calling anything from python. You might as well make a shell script</span>
<span class="comment-copy">Thank you. But my application is desktop application. I edited question</span>
