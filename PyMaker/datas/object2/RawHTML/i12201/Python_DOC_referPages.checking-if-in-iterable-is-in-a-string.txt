<div class="post-text" itemprop="text">
<p>You can check if anything is part of a an iterable with "in", it works for :</p>
<p>Tuples. I.E : </p>
<pre><code>"foo" in ("foo", 1, c, etc) #Return True
</code></pre>
<p>Lists. I.E : </p>
<pre><code>"foo" in ["foo", 1, c, etc] #Return true
</code></pre>
<p>Strings. I.E : </p>
<pre><code>"a" in "ago" will #return true
</code></pre>
<p>Dict. I.E : </p>
<pre><code>"foo" in {"foo" : "bar"} #return true
</code></pre>
<p>Can I do the reverse of this by checking if multiple substrings are in a single string?  As in, something along these lines:</p>
<pre><code>x = "W", "e", "99"
z = "Welcome"
w in z
</code></pre>
<p>Ideally, I would like it to return True since one of the substrings are in in "Welcome".</p>
<p>Is there a built in function for something such as this?</p>
<p>-Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>any</code> with a generator expression:</p>
<pre><code>any(xx in z for xx in x)
</code></pre>
<p><code>any</code> will short circuit, so if the first item in the iterable is in the string, the rest won't need to be checked.</p>
</div>
<span class="comment-copy">Can you explain the syntax for this expression?  Is this expression called an 'any expression'.</span>
<span class="comment-copy">@MattRumbel: <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code> is a normal built-in function</a> that takes any iterable input. You're passing it <a href="https://docs.python.org/3/howto/functional.html#generator-expressions-and-list-comprehensions" rel="nofollow noreferrer">a generator expression</a> which is sort of like a lazy list comprehension (read link for details).</span>
<span class="comment-copy">What is the significance of using the double 'xx' rather than a single 'x'?  Both return True.</span>
<span class="comment-copy"><code>xx</code> is just another variable name I picked for the items in the <code>x</code> iterable. In real code you should use better variable names. The generator expression is a bit confusing because of the two <code>in</code>s. The first is the operator testing if <code>xx</code> is a substring of <code>z</code>. The second is part of the <code>for</code> loop. It is parsed by Python as <code>(xx in z) for xx in x</code></span>
