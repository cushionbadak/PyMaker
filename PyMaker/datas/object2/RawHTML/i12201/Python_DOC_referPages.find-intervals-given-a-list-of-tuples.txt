<div class="post-text" itemprop="text">
<p>I have the following Python list of tuples:</p>
<pre><code>a  = [(1,2,'MARCO'),(3,4,'MARCO'),(5,6,'MARCO'),(7,8,'MARCO'),(9,11,'CARLO'),(12,13,'CARLO'),(14,15,'CARLO'),(16,17,'MARCO'),(18,19,'MARCO'),(20,21,'MARCO'),(22,23,'MARCO')]
</code></pre>
<p>In each tuple the first element is the starting time, the second element the end time and the third the speaker active in that segment.
What is an efficient way to group consecutive intervals with the same speaker and having the total initial time and the total final time?</p>
<p>More specifically, the output I'd like to obtain is something like the following:</p>
<pre><code>b = [(1,8,'MARCO'),(9,15,'CARLO'),(16,23,'MARCO')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about a little handmade fun with the <a href="http://docs.python.org/3/library/itertools.html"><code>itertools</code> module</a>? This assumes that your list is ordered by rising starting "times".</p>
<pre><code>from itertools import groupby
def speaker_times(a):
    result = []
    for item in groupby(a, lambda x:x[2]):  # Group by speaker name
        values = list(item[1])              # Convert iterator to list
        result.append((min(values)[0], max(values)[1], item[0]))
    return result
</code></pre>
<p>Result:</p>
<pre><code>In [12]: speaker_times(a)
Out[12]: [(1, 8, 'MARCO'), (9, 15, 'CARLO'), (16, 23, 'MARCO')]
</code></pre>
</div>
<span class="comment-copy">Do you have access to the pandas library?</span>
<span class="comment-copy">Hello! Yes, I could install them easily! Is there a way to achieve what I want to do with Pandas?</span>
<span class="comment-copy">Can you have two speakers speaking at the same time?</span>
<span class="comment-copy">Not in this case!</span>
<span class="comment-copy">Amazing! Thank you for the help! :)</span>
<span class="comment-copy">Nice, my pandas solution is 1000 times slower!</span>
