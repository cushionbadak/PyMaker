<div class="post-text" itemprop="text">
<p>I have one file text spiltted by line, and two lists with items exctracted from the file text. the task is to create a dict of the items in the two list which occur in the same line in the file text. this is the code</p>
<pre><code>list1 = [items] ### about 114,5 kB
list2 = [items] ### about 115,5 kB
file_text = file text splitted by lines ### about 190,5 kB


dict_one =  defaultdict(set)
for line in file_text:
    for x in list1:
        for xx in list2:
            if x in line and xx in line:
                dict_one[x].add(xx)   
print (dict_one.items())
</code></pre>
<p>My problem is the over time for the iteration. Can someone suggest another way with less time for iteration. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a> can give you a NUMBER_OF_CORES times speed up</p>
<p>Part of an example code... </p>
<pre><code> from multiprocessing import Pool

 pool = Pool(NUMBER_OF_CORES)
 pool.map()

 def f(args):
     files, list1, list2 = args
     dict_one =  defaultdict(set)
     for line in file_text:
         for x in list1:
             for xx in list2:
                 if x in line and xx in line:
                     dict_one[x].add(xx) 

if __name__ == '__main__':
    p = Pool(NUMBER_OF_CORES)
    chunk_size= len(files) //NUMBER_OF_CORES
    print(p.map(f, [(files[i*chunk_size:(i+1)*chunk_size], list1, list2) for i in range(NUMBER_OF_CORES)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Currently, you are checking all the items in <code>list2</code> again and again for each value of <code>list1</code>, but whether those are in <code>line</code> is independent of whether the current value from <code>list1</code> is in <code>line</code>. By simply rearranging the loops a bit and reusing the matches for <code>list2</code> for each match from <code>list1</code> this should get a lot faster.</p>
<pre><code>for line in file_text:
    x_in_line = [x for x in list1 if x in line]
    if x_in_line:
        y_in_line = [y for y in list2 if y in line]
        for x in x_in_line:
            dict_one[x].update(y_in_line)
</code></pre>
<p>If <code>file</code>text<code>has _n_ items,</code>list1<code>_k_ items, and</code>list2` <em>j</em> items, then your algorithm would have complexity of O(n<em>k</em>j), while this one should have only O(n(k+j)).</p>
<p>Another optimization might be to split the line and turn it into a set of words, but depending on your data this might or might not work.</p>
<pre><code>    line_as_set = set(line.split())
    x_in_line = [x for x in list1 if x in line_as_set]
</code></pre>
<p>Or, since you extracted the items in <code>list1</code> and <code>list2</code> from <code>file_text</code>, you could just use the same function(s) you used for extracting the words from the file and apply it to just the current line, without using <code>list1</code> and <code>list2</code> at all.</p>
<pre><code>for line in file_text:
    x_in_line = extract_values_1(line)
    if x_in_line:
        y_in_line = extract_values_2(line)
        for x in x_in_line:
            dict_one[x].update(y_in_line)
</code></pre>
<p>If the file has very many, short lines, then this is probably faster than checking all the words in <code>list1</code> and <code>list2</code> just to find the very few that appeared in that particular line.</p>
</div>
<span class="comment-copy">Could you provide a simple example? Not the entire file, just a few lines and items. As I understand it now, you want to have one entry in the dict whenever two items from the list appear in a line together?</span>
<span class="comment-copy">It should get somewhat faster if you separately check for each line if it contains a word of <code>list1</code> or <code>list2</code>, respectively. You'll store that in two boolean numpy arrays and then perform a logical AND (<code>&amp;</code>). Depending on the real use case, this should go much faster.</span>
<span class="comment-copy">@gho, i would try Carsten's approach - it sounds promising...</span>
<span class="comment-copy">@Carsten, can you formulate it in one answer?</span>
<span class="comment-copy">Is this a pure text search? Sample data would be very helpful. Regardless, you might consider building a regex out of the two input lists. It would take a while to build, but should perform much faster.</span>
<span class="comment-copy">But this does not reduce the overall complexity of the algorithm, which in its current form is much higher than needed.</span>
<span class="comment-copy">In my case, since the items of the two lists are extracted from the file text, so x_in_line = [x for x in list1 if x in line] = x_in_line</span>
<span class="comment-copy">I mean that  both x_in_line and y_in_line are terms extracted from the same file, so your  [x for x in list1 if x in line]  = list1</span>
<span class="comment-copy">@gho Note that the list <code>x_in_line</code> will only contain those items that are in <i>the current line</i>, whereas <code>list1</code> and <code>list2</code> contain items that are found somewhere in the entire file.</span>
<span class="comment-copy">@gho So, does this work for you? Is the output not what you expected, or is it still not fast enough?</span>
<span class="comment-copy">It  is still not fast enough</span>
