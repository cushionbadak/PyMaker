<div class="post-text" itemprop="text">
<p>Should you need it, the tutorial I am following is Python Programming by Derek Banas: </p>
<p><a href="https://youtu.be/N4mEzFDjqtA?t=41m26s" rel="nofollow">https://youtu.be/N4mEzFDjqtA?t=41m26s</a></p>
<p>My source code follows:</p>
<pre><code>import sys
import os

class Animal:
    __name = ""
    __height = 0
    __weight = 0
    __sound = 0

    def __init__(self, name, height, weight, sound):
        self.__name = name
        self.__height = height
        self.__weight = weight
        self.__sound = sound

    def set_name(self, name):
        self.__name = name

    def get_name(self):
        return self.__name

    def set_height(self, height):
        self.__height = height

    def get_height(self):
        return self.__height

    def set_weight(self, weight):
        self.__weight = weight

    def get_weight(self):
        return self.__weight

    def set_sound(self, sound):
        self.__sound = sound

    def get_sound(self):
        return self.__sound

    def get_type(self):
        print("Animal")

    def toString(self):
        return "{} is {} cm tall and {} Kg and says {}".format(self.__name, 
                                                         self.__height,
                                                         self.__weight,
                                                         self.__sound)
cat = Animal('Whiskers', 33, 10, 'Meow')

print(cat.toString())

class Dog(Animal):
    __owner = ""

    def __init__(self, name, height, weight, sound, owner):
        self.__owner = owner
        super(Dog, self).__init__(name, height, weight, sound)

    def set_owner(self, owner):
        self.__owner = owner

    def get_owner(self):
        return self.__owner

    def get_type(self):
        print("Dog")

    def toString(self):
        return "{} is {} tall, weighs {} Kg, says {} and is owned by {}".format(self.__name,
                                                                                self.__height,
                                                                                self.__weight,
                                                                                self.__sound,
                                                                                self.__owner)
    def multiple_sounds(self, how_many=None):
        if how_many is None:
            print(self.get_sound())
        else:
            print(self.get_sound()*how_many)

spot = Dog("Spot",65, 34, "Bark", "Bob")
print(spot.toString())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change to this. It's to do with the variables being private.</p>
<pre><code>    def toString(self):
    return "{} is {} tall, weighs {} Kg, says {} and is owned by {}".format(self.get_name(),
                                                                            self.get_height(),
                                                                            self.get_weight(),
                                                                            self.get_sound(),
                                                                            self.get_owner())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer your question, Python has "reserved" the use of names starting with one and two underscores within a class. Specifically, per the section on <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">Private Variables</a>, </p>
<blockquote>
<p>However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. <code>_spam</code>) should be treated as a non-public part of the API</p>
</blockquote>
<p>And for two underscores:</p>
<blockquote>
<p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. </p>
</blockquote>
<p>What that means is that names like <code>_spam</code> are just named, but <em>you should leave them alone</em> unless it's your class. <strong>But,</strong> names like <code>__name</code> get special treatment from Python, and they are converted to <code>__Dog_name</code>. </p>
<p>You were trying to access <code>__name</code> from a subclass - not from within the <code>Animal</code> class that defines the <code>__name</code>. And you can't, because it's designed that way. You are forced to use the <em>accessor method,</em> <code>.get_type()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>class Dog(Animal):
        __owner = ""</p>
<pre><code>    def __init__(self, name, height, weight, sound, owner):
        super(Dog,self).__init__(name, height, weight, sound)
        self.__owner = owner

    def set_owner(self, owner):
        self.__owner = owner

    def get_owner(self):
        return self.__owner

    def get_type(self): #return super(Dog,self).get_type()
        print("Dog")

    def toString(self):
        return "{} is {} cm tall, {} kilograms weight and sounds likes {} his owner is {}".format(self.get_name(),
                                                                                        self.get_height(),
                                                                                        self.get_weight(),
                                                                                        self.get_sound(),
                                                                                        self.__owner)
</code></pre>
<p>This code works for me </p>
<p>output shown as below:</p>
<p>king is 20 cm tall, 100 kilograms weight and sounds likes groaaw
Smart is 10 cm tall, 14 kilograms weight and sounds likes lolll his owner is birl</p>
</div>
<span class="comment-copy">Why are you using leading-double-underscore names in the first place? Do you know what they do?</span>
<span class="comment-copy">Thanks for asking, based on the explanation provided below, I understand that the __ notation makes the denoted attributes private to a particular class. This is to be used if it is at some point specified in the documentation by a developer or system analyst that the attributes should be. Would you say that's an accurate assessment?</span>
<span class="comment-copy">They're not entirely private - you can still get at the attributes with a little extra work. The behavior with leading-double-underscore names is mostly intended to prevent accidental name collisions.</span>
<span class="comment-copy">because the attrib names would be the same in classes of a superclass?</span>
