<div class="post-text" itemprop="text">
<p>Python 2.7 unittest works well when run the single script file, but it failed when run the folder in Pycharm Run/Debug Configurations.</p>
<p>The unittest case:</p>
<pre><code>import unittest
import sys
import os
import time

from tests import test_config
from test_config import LOGGING_FILE_PATH, LOGGING_FILE_NAME


class LogTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        sys.modules["config"] = test_config
        from lib import log
        cls.log = log

def check_log(self, msg):
    try:
        fp = open(os.path.join(LOGGING_FILE_PATH, LOGGING_FILE_NAME))
    except IOError as e:
        raise e
    else:
        with fp:
            self.assertIn(msg, fp.read())

def tearDown(self):
    try:
        fp = open(os.path.join(LOGGING_FILE_PATH, LOGGING_FILE_NAME), 'w')
    except IOError as e:
        raise e
    else:
        with fp:
            fp.truncate()

def setUp(self):
    time.sleep(0)

@classmethod
def tearDownClass(cls):
    if os.path.isfile(os.path.join(LOGGING_FILE_PATH, LOGGING_FILE_NAME)):
        os.remove(os.path.join(LOGGING_FILE_PATH, LOGGING_FILE_NAME))

def test_log_debug(self):
    msg = 'test log debug'
    self.log.debug(msg)
    self.check_log(msg)

def test_log_info(self):
    msg = 'test log info'
    self.log.info(msg)
    self.check_log(msg)

def test_log_warning(self):
    msg = 'test log warning'
    self.log.warning(msg)
    self.check_log(msg)

def test_log_error(self):
    msg = 'test log error'
    self.log.error(msg, exc_info=False)
    self.check_log(msg)

def test_log_critical(self):
    msg = 'test log critical'
    self.log.critical(msg)
    self.check_log(msg)


if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>This works well when I set Python tests script in 'Jetbrains Pycharm Run/Debug Configurations'. All 5 tests passed.</p>
<p>But when I setup Python tests folder which contains the 'LogTestCase' script above in 'Run/Debug Configurations'. The 5 tests failed (There are all 10 tests. Another 5 are in another file).</p>
<p>Result:</p>
<pre><code>2016-02-20 23:08:59,901 - test_log.py:65:test_log_critical - CRITICAL - test log critical

2016-02-20 23:08:59,902 - log.py:136:error - ERROR - test log error

2016-02-20 23:08:59,903 - test_log.py:50:test_log_info - INFO - test log info

Error
Traceback (most recent call last):
  File "project_path/tests/test_log.py", line 66, in test_log_critical
    self.check_log(msg)
  File "project_path/tests/test_log.py", line 21, in check_log
    raise e
IOError: [Errno 2] No such file or directory: 'project_path/tests/test_log'


Failure
Expected :'test log debug'
Actual   :''
 &lt;Click to see difference&gt;

Traceback (most recent call last):
  File "project_path/tests/test_log.py", line 46, in test_log_debug
    self.check_log(msg)
  File "project_path/tests/test_log.py", line 24, in check_log
    self.assertIn(msg, fp.read())
AssertionError: 'test log debug' not found in ''


Failure
Expected :'test log error'
Actual   :''
 &lt;Click to see difference&gt;

Traceback (most recent call last):
  File "project_path/tests/test_log.py", line 61, in test_log_error
    self.check_log(msg)
  File "project_path/tests/test_log.py", line 24, in check_log
    self.assertIn(msg, fp.read())
AssertionError: 'test log error' not found in ''


Failure
Expected :'test log info'
Actual   :''
 &lt;Click to see difference&gt;

Traceback (most recent call last):
  File "project_path/tests/test_log.py", line 51, in test_log_info
    self.check_log(msg)
  File "project_path/tests/test_log.py", line 24, in check_log
    self.assertIn(msg, fp.read())
AssertionError: 'test log info' not found in ''


Failure
Expected :'test log warning'
Actual   :''
 &lt;Click to see difference&gt;

Traceback (most recent call last):
  File "project_path/tests/test_log.py", line 56, in test_log_warning
    self.check_log(msg)
  File "project_path/tests/test_log.py", line 24, in check_log
    self.assertIn(msg, fp.read())
AssertionError: 'test log warning' not found in ''

2016-02-20 23:08:59,903 - test_log.py:55:test_log_warning - WARNING - test log warning

Process finished with exit code 0
</code></pre>
<p>All above, thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>What I can guess is that in the other test you have again something like this</p>
<pre><code>@classmethod
def setUpClass(cls):
    sys.modules["config"] = test_config
    from lib import log
    cls.log = log
</code></pre>
<p>When you run the tests alone you have no problem. But when you run all of them in a test suite like pycharm do, the second one <code>from lib import log</code> have no effect (the module is already loaded): <code>log</code> module that I can guess get its configurations by <code>config</code> module still use the ones configured in the previous test.</p>
<p>My advice is to take a look to <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>mock</code></a> framework (available by pip in python 2.7) and its <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow"><code>patch</code></a> methods: by this way you can have a complete control of context where you would apply your hack changes.</p>
<p>You can also try by use <code>reload</code> to work around this but <strong>I strongly discourage you</strong> its hard to maintain test isolation if you start to use these kind of tricks and you will meet some kinds of very odds behavior. Study deeply <code>patch</code>: you will love it.</p>
<p>[<strong>EDIT</strong>]</p>
<p>Without see how <code>log</code> use <code>config</code> I cannot really answer to your question by a real fix. I can just guess that the better place to patch is <code>log</code> module, but how to do it is impossible to say. </p>
<ul>
<li>What log use from <code>config</code> module? </li>
<li>How it is imported? </li>
</ul>
<p>What you really need here is a way to configure logger in some way and set path and filename. I guess you can do it both by introduce a new function in <code>log</code> module or by patch but details are really twisted how is <code>log</code> module code. </p>
</div>
<span class="comment-copy">I think you are right. But if I use <code>mock</code>, I should <code>patch</code> the <code>config</code> module before <code>from lib import log</code>. But the <code>log</code> module has been imported in other tests.  Should I redefined a <code>log</code> func in this test and mock the true <code>log</code> module?</span>
<span class="comment-copy">@coffin5257 I edited my answer.</span>
