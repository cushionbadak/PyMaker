<div class="post-text" itemprop="text">
<p>I think I understand class inheritance in python, basically you can inherit the attributes of the parent class on the child class for re-usability and also to "add" to it to make even more complex classes. </p>
<p>Here is my question: I have a <code>Car</code> class below that has <code>(model, color, mpg)</code> as parameters, after that I created a new child class called <code>ElectricCar</code> that inherits from the parent <code>Car</code> class...and now when I call <code>ElectricCar</code> with "<code>(battery_type, model, color, mpg)</code>, I get the following error:</p>
<blockquote>
<p>TypeError: init() takes exactly 2 arguments (5 given)</p>
</blockquote>
<p>I know got to fix it. I need to add <code>self.model</code>, <code>self.color</code> and <code>self.mpg</code> to the <code>ElectricCar</code> class. But why do i have to do that? It seems this defeats the purpose of inheritance if I need to re-define again on the child class. </p>
<pre><code>class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg

my_car = Car("DeLorean", "silver", 88)

class ElectricCar(Car):
    def __init__(self,battery_type):
        self.battery_type = battery_type

my_car = ElectricCar("molten salt", "Honda","black", "33")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I need to add <code>self.model</code>, <code>self.color</code> and <code>self.mpg</code> to the <code>ElectricCar</code> class.</p>
</blockquote>
<p>You don't. Python allows you to call methods of parent classes you've replaced. You just have to call the constructor of the parent class explicitly.</p>
<p>The first argument of <code>ElectricCar.__init__</code> is the battery type. Store the rest of positional arguments in a list (<code>args</code>) and unpack them to the parent constructor:</p>
<pre><code>class ElectricCar(Car):
    def __init__(self, battery_type, *args):
        super(ElectricCar, self).__init__(*args) # super().__init__(*args) in Py3k+
        self.battery_type = battery_type
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you define the <code>__init__</code> method, you are overriding the<code>__init__</code> method of the parent class.  Such overriding is why the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">super()</a> function was created.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to pass  model, color, mpg in your ElectricCar class. Then you can call super to initialize the base class.</p>
<pre><code>class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        print model
        print color
        print  mpg

my_car = Car("DeLorean", "silver", 88)
print

class ElectricCar(Car):
    def __init__(self,battery_type, model, color, mpg):
        self.battery_type = battery_type
        print battery_type
        super(ElectricCar,self).__init__( model, color, mpg)

my_car = ElectricCar("molten salt", "Honda","black", "33")
</code></pre>
</div>
<span class="comment-copy">Thanks. It super() something people use a lot? Seems a bit cumbersome to me, might be easier to just re-initialize them again at least in simple code like this. Maybe in more complex expression it might be worth it.</span>
<span class="comment-copy">@noob2014: yeah, <code>super()</code> is simple and solves a lot of problems. It's not limited to constructors. I suggest that you read <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super" rel="nofollow noreferrer">Pythonâ€™s super() considered super!</a>. Less flexible alternative to <code>super(ElectricCar, self).__init__(*args)</code> is <code>ElectricCar.__init__(self, *args)</code>.</span>
<span class="comment-copy">@noob2014: <code>super()</code> is something people use a lot, but you could also do <code>ElectricCar.__init__(self, *args)</code>.</span>
<span class="comment-copy">Thanks for the quick reply</span>
