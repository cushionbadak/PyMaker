<div class="post-text" itemprop="text">
<p>How to idiomatically correct implement <code>clone</code> method in Python? See:</p>
<pre><code>def clone(self):
    """
    Return a clone of this class
    """
</code></pre>
<p>Reason for <code>clone</code> - to construct identical class instance from usage point of view so internal state of copy may be changed without effecting original object.</p>
<p>To be concrete: constructor may initialize private fields which are primitive types or complex types:</p>
<pre><code>def __init__(self, initial = None, width = DEFAULT_SIZE, height = DEFAULT_SIZE):
    self._width = width
    self._height = height
    self._matrix = ...complex code, list of list...
</code></pre>
<p>With primitive types - nothing hard. What to do with complex types?</p>
<p>If complex type is build-in like <code>tuple</code>, <code>set</code>, <code>dict</code> - there is <code>copy.copy</code> / <code>copy.deepcopy</code> package but I am unsure how usual it usage.</p>
<p>For complex types that foreign classes I don't know what to do.</p>
<p><strong><em>(1)</em></strong> Are any helpers to make copy easy? Or conventions so I can relay on them?</p>
<p>When I copy object I see no reason to use provided constructors, because I already have known all internal contracts and able to manipulate of internal state privately?</p>
<p><strong><em>(2)</em></strong> How I can instantiate object of same type without using constructor?</p>
<p><strong>UPDATE</strong> I am taking <em>Principles of Computing</em> Coursera class and implement class that hidden by teaching stuff (for scoring reason).</p>
<p>They use <code>clone</code> in provided "interface". I am not experienced in Python classes so ask to proper way to deal in situation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Either implement <code>__deepcopy__</code> (and/or <code>__copy__</code>) to provide direct support to <a href="https://docs.python.org/3/library/copy.html" rel="nofollow">the <code>copy</code> module</a> APIs, or register a <code>pickle</code>-ing function with <a href="https://docs.python.org/3/library/copyreg.html#module-copyreg" rel="nofollow"><code>copyreg</code></a>; <code>copy.deepcopy</code> will use <code>copyreg</code> registered method to implement deepcopying if no <code>__deepcopy__</code> is defined.</p>
<p>Note that many Python types (e.g. <code>dict</code>, <code>list</code>, etc.) also provide a method named <code>copy</code> that performs a shallow copy; it's easy to support both idioms by assigning one name to the other, e.g.:</p>
<pre><code>class Foo:
    def copy(self):
        ... do stuff to make a copy ...
        return newcopy
    __copy__ = copy  # Now works with copy.copy too
</code></pre>
</div>
<span class="comment-copy"><code>copy.deepcopy</code></span>
<span class="comment-copy">@kindall Official docs say: <code>copy.deepcopy</code> <i>letting user-defined classes override the copying operation or the set of components copied</i>. That API supposed to be implemented by class?</span>
<span class="comment-copy">"In order for a class to define its own copy implementation, it can define special methods <code>__copy__()</code> and <code>__deepcopy__()</code>."</span>
<span class="comment-copy">Yes, exactly. Implement their API so users can use the standard module to make copies.</span>
