<div class="post-text" itemprop="text">
<p>I have lambda functions as below:</p>
<pre><code>e_by_p = 20
prange_py = lambda x: (e_by_p*x-e_by_p, e_by_p*x)
</code></pre>
<p>So the outputs as below:</p>
<pre><code>prange_py(1)
# (0, 20)
prange_py(2)
# (20,40)
prange_py(3)
# (40, 60)
# goes like that
</code></pre>
<p>So I want a list to be sliced with the values this function returns. For instance, assuming I have a list as below:</p>
<pre><code>numbers = list(range(100,200))
# This is a default way to slice
numbers[0:20]
# [100, ..., 119]
# Using my function, passing &lt;x&gt; arg as 1
numbers[prange(1)[0]:prange(1)[1]]
</code></pre>
<p>However, this is not what I want to do. This is (i) too ugly, (ii) executing the same function twice. So I wonder if there is a way to <em>pass</em> a function's return which is tuple or list as a slice argument to a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a slice object using <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow"><code>slice()</code></a> and pass in the function result as arguments:</p>
<pre><code>numbers[slice(*prange_py(1))]
</code></pre>
<p>The <code>*</code> unpacks the tuple that <code>prange_py()</code> returns and passes it as arguments to the <code>slice()</code> call.</p>
</div>
<div class="post-text" itemprop="text">
<p>Construct a slice object explicitly instead of using the <code>:</code> syntax.</p>
<pre><code>numbers[slice(*prange_py(1))]
</code></pre>
<p>The tuple returned by <code>prange_py</code> is unpacked to pass two arguments to <code>slice</code>. <code>slice(a,b)</code> creates an object that can be used as an "index" equivalent to <code>numbers[a:b]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this method is very readable.</p>
<pre><code>&gt;&gt;&gt; a, b = prange_py(1);numbers[a:b]
[100,
 101,
 102,
 103,
 104,
 105,
 106,
 107,
 108,
 109,
 110,
 111,
 112,
 113,
 114,
 115,
 116,
 117,
 118,
 119]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Lst[output[0]:output[1]]</code></p>
<p>Where <code>lst</code> is the sliced And output is the tuple</p>
</div>
<span class="comment-copy">Extract <code>prange(1)</code> as a variable before the slice? Then you only call it once and it isn't ugly</span>
<span class="comment-copy">I accept this as valid answer since it is answered before the others. :) However, I have to wait for 8 mins. :(</span>
<span class="comment-copy">Accept @poke's answer. Ours are otherwise identical and I think simultaneous, but he included a link to the <code>slice</code> documentation :)</span>
<span class="comment-copy">Ah yeah, you are right this way. But let me think... :/</span>
<span class="comment-copy">Wow, late but this way seems quite interesting and readable. 0_0 | However, I will use a method here in very unreadable context in Django, seems like this: <code>entries_sorted = api_models.Entry.object.sort_by("-update_timedate").values_list("label", "value")[slice(*prange_py(page))]</code>. So it does not suit for me, but It will surely be okay for anyone else. :)</span>
<span class="comment-copy">Looking at others' answers, that might be better. Didn't know about slice objects. However my code might ve a little bit more readable.</span>
