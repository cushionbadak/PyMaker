<div class="post-text" itemprop="text">
<p>Python includes the built in max() function. However, despite it being built in it is not a keyword. That is to say, you are allowed to do <code>max=4</code>. This makes sense since the maximum of something comes up a lot. But! If you use max as a variable, then it disables use of the max function in that scope. </p>
<p>So if you do:</p>
<pre><code>max = 4
max(1, 2)
</code></pre>
<p>You will get an error of <code>int object not callable</code>. Again, makes sense. But is there any way to specify that you would like the max function? Like a <code>std.max()</code>? This goes for all other built in functions as well. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/__builtin__.html" rel="nofollow"><code>__builtin__</code> (Python 2)</a> / <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow"><code>builtins</code> (Python 3)</a> module provides another way to access all built-in/standard identifiers for cases like this:</p>
<pre><code>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt;
&gt;&gt;&gt; __builtin__.max is max
True
&gt;&gt;&gt;
&gt;&gt;&gt; max = 2
&gt;&gt;&gt; __builtin__.max([0, max])
2
</code></pre>
<pre><code>import __builtin__ as builtins

def random_integer(min, max):
    random_integer.seed = builtins.max(10101, ( # looks random enough, right?
        ((random_integer.seed * 3 - 210) % 9898989) &gt;&gt; 1) ^ 173510713571)
    return min + (random_integer.seed % (max - min + 1))

random_integer.seed = 123456789
</code></pre>
<blockquote>
<p>This module is not normally accessed explicitly by most applications, but can be useful in modules that provide objects with the same name as a built-in value, but in which the built-in of that name is also needed.</p>
</blockquote>
<p>The name change in Python 3 is part of <a href="https://www.python.org/dev/peps/pep-3100/#core-language" rel="nofollow">the "core languages" changes described in PEP 3100</a>:</p>
<blockquote>
<p>In order to get rid of the confusion between <code>__builtin__</code> and <code>__builtins__</code>, it was decided to rename <code>__builtin__</code> (the module) to <code>builtins</code>, and to leave <code>__builtins__</code> (the sandbox hook) alone.</p>
</blockquote>
</div>
<span class="comment-copy">Do not name your variables after Python builtins, period.</span>
<span class="comment-copy">@Will, I understand what you're saying but in terms of readability the names <code>min</code> and <code>max</code> are great. Thus there are times where you might create internal naming conflicts so that your API is user friendly.</span>
<span class="comment-copy">It would be better to use a more descriptive name. For instance, if you have a list called <code>things</code>, use <code>max_thing</code>.</span>
<span class="comment-copy">@NickChapman: If you had a <code>max</code> function, for example, if you were NumPy and you had <code>numpy.max</code>, it'd make sense to use the same name as a builtin. For <code>max = 4</code>? No way that's part of your API. Call it <code>max_</code> or something.</span>
<span class="comment-copy">@NickChapman Yeah, I understand. I've wanted to name variables <code>class</code> or <code>max</code> or <code>file</code> before, too, but every language has its sacrifices you have to make. I personally use OOP-conventions for all of my names (unless I'm working on other people's code), so for me, it'd be <code>maxValue</code> or <code>maxThingName</code>. It's always good to be descriptive. If it's just a throwaway variable that doesn't need to be descriptive, call it <code>m</code>? I really, really, really wouldn't name things after builtins.</span>
<span class="comment-copy">The name of the module changed between Python 2 and Python 3? Interesting.</span>
<span class="comment-copy">Then you can do <code>__builtins__.max = 2</code> and really cause trouble!</span>
