<div class="post-text" itemprop="text">
<p>I'm using Parmiko to invoke an ssh shell and I would like to direct all of the input/output to a Text widget.  I found <a href="https://stackoverflow.com/questions/3333334/stdout-to-tkinter-gui">this solution</a>:</p>
<pre><code>class IORedirector(object):
    '''A general class for redirecting I/O to this Text widget.'''
    def __init__(self,text_area):
        self.text_area = text_area

class StdoutRedirector(IORedirector):
    '''A class for redirecting stdout to this Text widget.'''
    def write(self,str):
        self.text_area.write(str,False)

# In your Tkinter Widget
sys.stdout = StdoutRedirector( self )
</code></pre>
<p>The problem is I'm not familiar with classes enough to make this work (no matter how simple it may be) and time is unfortunately not on my side.  That being said, what is the easiest way to do this without a class definition?  Could that class be converted to a general function and call it to do the redirect?</p>
<p>Thanks for any help.</p>
<p>Edit: Upon further experimenting, I altered</p>
<pre><code>self.text_area.write(str,False)
</code></pre>
<p>to</p>
<pre><code>self.text_area.insert(END,str)
</code></pre>
<p>This now works as print statements now appear in the text box.  Now my issue is when I call interactive.interactive_shell(chan), the program crashes with </p>
<pre><code>AttributeError: 'StdoutRedirector' object has no attribute 'flush'
</code></pre>
<p>Any ideas with this?</p>
<p>Edit2: I shall keep digging.  Now have found <a href="https://stackoverflow.com/questions/20525587/python-logging-in-multiprocessing-attributeerror-logger-object-has-no-attrib">this.</a> I've added a no-op for flush and consequently get:</p>
<pre><code>AttributeError: 'NoneType' object has no attribute 'settimeout'
</code></pre>
<p>I feel like this will be a gopher hole.  Any ideas from <strong>now?</strong></p>
<p>Edit 3: I will chase this to the end.  Needed a (self) parameter added like def flush(self).  </p>
<p>I'm not sure where this is going anymore so back to a simple solution of routing a Paramiko interactive shell to Text box with input and output would be great.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is a language for manipulating class instances with methods. Some of this is hidden.  For instance, <code>type(a).__add__(a,b)</code> and <code>a.__add__(b)</code> are disguides as <code>a + b</code>.  However, you cannot get far beyond the basics without understanding classes, instances, and instance methods.  And sending print output to a tk text widget is, as you discovered, beyond the basics.</p>
<p>As you also discovered, the exact requirements of a sys.stdout replacement depend on the code that uses it.  In the absence of paramiko giving you a detailed spec for what it actually requires of sys.stdout, you can either program a complete replacement or program a partial replacement as you get exceptions.</p>
<p>For example, IDLE has the following code, currently in idlelib.PyShell.</p>
<pre><code>class PseudoFile(io.TextIOBase):

    def __init__(self, shell, tags, encoding=None):
        self.shell = shell
        self.tags = tags
        self._encoding = encoding

    @property
    def encoding(self):
        return self._encoding

    @property
    def name(self):
        return '&lt;%s&gt;' % self.tags

    def isatty(self):
        return True


class PseudoOutputFile(PseudoFile):

    def writable(self):
        return True

    def write(self, s):
        if self.closed:
            raise ValueError("write to closed file")
        if type(s) is not str:
            if not isinstance(s, str):
                raise TypeError('must be str, not ' + type(s).__name__)
            # See issue #19481
            s = str.__str__(s)
        return self.shell.write(s, self.tags)
</code></pre>
<p>The shell.write method has a <code>text.insert('insert', s, tags)</code> call.  There is no flush call because the IDLE code that writes to stdout knows that write inserts text immediately and that no flush is needed.  Other unused and unneeded attributes and methods are also missing.</p>
<p>The specifications for 3.x i/o streams are in the <a href="https://docs.python.org/3/library/io.html#module-io" rel="nofollow">io module</a> doc.  You should look at classes IOBase and TextIOBase (and possibly TextIOWrapper).  For instance, the IOBase <code>flush</code> entry says "Flush the write buffers of the stream if applicable. This does nothing for read-only and non-blocking streams."  Text widget insertion is non-blocking, and no return is needed, so <code>def flush(self): pass</code> should be sufficient.</p>
</div>
<span class="comment-copy">The flush error would have been easy to explain and solve, as it is a standard io method (see my answer).  Explaining the <code>settimeout</code> exception requires the full traceback.  That attribute is not a standard part of io streams and the exception might not be related to your stdout class.</span>
<span class="comment-copy">Does Paramiko normally run in a terminal and use stdin/out/err for i/o?</span>
<span class="comment-copy">I recommend deleting 'without classes' from title and text as it is not possible and its presence can only discourage answers other answers.</span>
<span class="comment-copy">Thanks for the thorough response.  I spent the weekend reviewing classes and now feel decently comfortable with them (enough to convert my ~500 lines to using multiple classes than a bunch of global variables and plain functions.  For some reason though, the application crashes when I open the SSH interactive shell.  It uses this for the shell:      if chan in r:         try:             x = u(chan.recv(1024))             if len(x) == 0:                 break             sys.stdout.write(x)             sys.stdout.flush()  I'm not sure why the sys.stdout line (What I think is it) would crash it</span>
