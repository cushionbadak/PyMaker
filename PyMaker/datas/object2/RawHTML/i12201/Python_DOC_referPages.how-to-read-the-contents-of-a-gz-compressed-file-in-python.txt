<div class="post-text" itemprop="text">
<p>I'm writing a utility that takes a .gz archive and checks if it's contents already exist in a specified folder. If they don't, it will extract the archive there.</p>
<p>The way I planned on doing this is reading the filenames of the files in the .gz archive one by one and checking if such a file already exists in my directory. But from what I understand this isn't possible with gzip.</p>
<p>Ideally, I'm looking for something like this:</p>
<pre><code>archive = gzipfile.GzipFile(source)

    for i in archive.getmembers():
        if os.path.isfile(destination + sep + i.name) and overwrite:
        ...
</code></pre>
<p>Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>While it is true that the .gz file is simply a compressed file, the original file name can be truncated or indeed the compressed .gz file can be renamed.
<code>gunzip</code> can be told to provide the original file name using the <code>-N</code> flag and if used with the <code>-l</code> (minus lowercase L) it will tell you the original file name without uncompressing the file.<br/>
For example:</p>
<pre><code>$ gzip sometext.txt
$ mv sometext.txt.gz othertext.gz
$ gunzip -Nl othertext.gz
         compressed        uncompressed  ratio uncompressed_name
                 58                 113  76.1% sometext.txt
</code></pre>
<p>You can hack your way through this in python as well.</p>
<pre><code>from subprocess import check_output
size_name = check_output(['gunzip', '-Nlq','othertext.gz'])
size_name = size_name.strip().split("%",1)
print "original filename =",size_name[1].strip()
</code></pre>
<p>result:    </p>
<pre><code>original filename = sometext.txt
</code></pre>
<p>I do not believe that the python gzip package allows you to access the original file name.<br/>
Someone else may know different!</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>.gz</code> file is not an archive, it simply is compressed. If you have a <code>.tar.gz</code> file, you can use <a href="https://docs.python.org/3/library/tarfile.html" rel="nofollow"><code>tarfile</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import tarfile

archive = tarfile.open(source)
for i in archive.getmembers():
    ...
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/zlib.html" rel="nofollow noreferrer">docs.python.org/2/library/zlib.html</a></span>
<span class="comment-copy">GZip means that file is compressed. GZip alone has no concept of being as archive. Do you want to extract gzipped tar file? Please include details in question.</span>
<span class="comment-copy">A <code>gzip</code> file contains exactly one file, you probably mean a gzipped tarball.</span>
<span class="comment-copy">@L3viathan No, I mean a <code>gzip</code> file. Is there a way to read the uncompressed file's filename?</span>
<span class="comment-copy">Plus one, but please use <code>submodule.check_output()</code> instead of <code>os.popen()</code>.</span>
<span class="comment-copy">@Kay Fixed, I believe!</span>
<span class="comment-copy">Perfect. :) In this case it was not really needed, but it is better practice to use the subprocess function, because they are less prone to become a victim of malicious arguments. (E.g. filename: <code>"&amp; rm -rf /home/*"</code>)</span>
<span class="comment-copy">This is the correct answer. Thank you very much!</span>
<span class="comment-copy">So if I understand this correctly, my .gz file is just one file. I didn't know that, so thanks! But question still remains, how can I know the filename of the uncompressed file (preferably without uncompressing)?</span>
<span class="comment-copy">The filename of <code>foo.gz</code> is <code>foo</code>. That's all.</span>
