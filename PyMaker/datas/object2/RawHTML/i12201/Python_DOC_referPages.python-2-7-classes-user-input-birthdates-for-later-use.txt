<div class="post-text" itemprop="text">
<p>"The class should initialize with a name and a birthday, but the birthday should be None."
"There should be two methods, name and birthday"
"setBirthday sets their Birthday to a date" these are the instructions I was given, this is a small piece in the larger picture. </p>
<p>I'm trying to set the day, the month and year to be entered in by the user...this will be used later for other calculations..</p>
<p>Code:</p>
<pre><code>class person(object):
    def __init__(self, name):
        self.name = name
        self.setBirthday = None

#getName returns the name of the person         
    def getName(self):
        return self.name

#setBirthday sets their Birthday to a date
    def setBirthday(self):
        day = (raw_input('Please enter the date of the month you were born on here -&gt;'))
        return self.day
        month = (raw_input('Please enter the month of the year you were born on here -&gt;'))
        return self.month
        year = (raw_input('Please enter the year you were born on here -&gt;'))
        return self.year        

varName = person(raw_input('Please enter your name here -&gt;'))
varDate = person.setBirthday()
</code></pre>
<p>Can you point me in the right direction? This class stuff really confuses me...I need to have the user be able to input the day, month and year to be saved for later use. error is below in comments. I did remove the returns in my code.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Your class defines <code>setBirthday</code> as a method, but as soon as you instantiate the class that method disappears and <code>setBirthday</code> just points to <code>None</code>. Note that <code>birthday</code> and <code>setBirthday</code> are two unique names, and that class is already using the latter for that method.</li>
<li>You have unnecessary parentheses. Try to use only what is necessary for grouping, with the occasional extra pair when required for clarity. <code>var = (input())</code> is not such an occasion.</li>
<li>Python <em>does not require</em> getters and setters. There's no such thing as a private variable, so anyone who wants to modify something can do so to their heart's content. The only thing I'm aware of that can't be redefined is a property (a method tagged with the <code>@property</code> decorator).</li>
<li>You are confusing instance variables with global variables, and when to turn each into the other. The setters in that class should simply set instance variables, not return them to the caller (it's like this in Java as well, which is where you actually would use getters and setters.</li>
<li>When you call a class's instance methods directly, such as <code>MyClass.methodname()</code>, you need to pass it an instance of the class. This is why standard Python style (PEP-8) calls for class names to be <code>Uppercase</code> or <code>UpperCase</code> and other objects to be <code>lowercase</code> or <code>snake_case</code>. Naming the class <code>person</code> made it look like an instance of something when it's actually a class, making it all too easy to misuse it.</li>
</ol>
<p>Here is what the code should look like:</p>
<pre><code>class Person(object):
    def __init__(self, name):
        self.name = name
        self.birthday = None

    def getName(self):
        '''return the name of the person'''
        # this method should be removed. to get a person's name,
        # use "person.name" instead of "person.getName()"
        return self.name

    def setBirthday(self):
        '''set their Birthday to a date'''
        day = raw_input('Please enter the date of the month you were born on here -&gt;')
        month = raw_input('Please enter the month of the year you were born on here -&gt;')
        year = raw_input('Please enter the year you were born on here -&gt;')
        self.birthday = int(day), int(month), int(year)

person = Person(raw_input('Please enter your name here -&gt;'))
person.setBirthday()
</code></pre>
</div>
<span class="comment-copy">What is missing in your code? Please ask a concrete question.</span>
<span class="comment-copy">The problem here isn't classes at all; you can only return once from any function, but your <code>setBirthday</code> method is trying to return three times.</span>
<span class="comment-copy">The first return stops the execution of the function setBirthday, so setting the month and year is never executed. You probably don't have to return anything in that function.</span>
<span class="comment-copy">Ok I'll try that.</span>
<span class="comment-copy">"<code>setBirthday</code>"... Your professor is teaching you to write Python programs in Java, and it is doing you no favors. You've got issues with masking, code that will never execute, and so on.</span>
<span class="comment-copy">Ok that makes more sense now, like I said these class problems are hard. Definitely apppreciate your feedback. So next step is to use this info to determine how many days old the individual is. Then add in if statements for not entering in correct data for instance an integer for the day.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">here</a> for input validation and <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">here</a> for doing calculations with dates.</span>
<span class="comment-copy">Amazing resources right there. Thanks!</span>
