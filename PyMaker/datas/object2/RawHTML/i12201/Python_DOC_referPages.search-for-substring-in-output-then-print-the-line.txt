<div class="post-text" itemprop="text">
<p>I would like to list a file and then search the lines for a pattern, like I do in Bash with.</p>
<pre><code>cat /etc/passwd | grep nologin
</code></pre>
<p>I try the following:</p>
<pre><code>#!/usr/bin/python3

import subprocess

CMD=('cat', '/etc/passwd')
SEARCH="nologin"
PIPE_ERG=subprocess.Popen(CMD , stdout=subprocess.PIPE)
OUTPUT = PIPE_ERG.communicate()[0].splitlines()
for LINE in OUTPUT:
  if SEARCH in LINE:
    print(LINE)
</code></pre>
<p>If I execute the script with python3 I always get this errormessage:</p>
<pre><code>Traceback (most recent call last):
  File "./pipe2.py", line 11, in &lt;module&gt;
    if SEARCH in LINE:
TypeError: 'str' does not support the buffer interface
</code></pre>
<p>When I just print the lines without search, the script will list all my lines.</p>
<p>How do I get each line with the pattern "nologin" from the output?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like in Python 3, <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>PIPE_ERG.communicate()[0]</code></a> is not a <code>str</code>, but <code>bytes</code>, and for <code>bytes</code>, the <code>in</code> operator is not defined. You have to convert those <code>bytes</code> to <code>str</code> first. The simplest way would be just to do <code>LINE = str(LINE)</code> in the loop, or use <code>LINE.decode()</code>:</p>
<pre><code>for LINE in OUTPUT:
    LINE = LINE.decode()
    if SEARCH in LINE:
        print(LINE)
</code></pre>
<p>Or use <code>Popen</code> with <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>universal_newlines=True</code></a>:</p>
<pre><code>PIPE_ERG=subprocess.Popen(CMD , stdout=subprocess.PIPE, universal_newlines=True)
</code></pre>
<p>From the documentation:</p>
<blockquote>
<p>By default, this function will return the data as encoded bytes. The
  actual encoding of the output data may depend on the command being
  invoked, so the decoding to text will often need to be handled at the
  application level.</p>
<p>This behaviour may be overridden by setting universal_newlines to True</p>
</blockquote>
</div>
<span class="comment-copy">Works fine here.</span>
<span class="comment-copy">Later on 'cat' will be replaced by a ldbsearch-command and the result will be stored in a file, that's why I can't just open a file, but this is an easy example to explain what I need ;-)</span>
<span class="comment-copy">by the way, it works with python2 but not with python3</span>
<span class="comment-copy">Both ways work with python3</span>
