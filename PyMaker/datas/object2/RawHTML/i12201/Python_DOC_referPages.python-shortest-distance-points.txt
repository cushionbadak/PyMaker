<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function called <code>dist</code> that takes in two points (so two lists of two elements each), and computes the distance between them. Make sure this works on the example below before proceeding to the next step.<br/>
  Use <code>dist</code> in a nested loop inside <code>shortestDist</code> to compare each element of the list of points with every element in the list after it. So, basically, find the shortest distance between points in a list.</p>
</blockquote>
<p>Here's what I have so far:</p>
<pre><code>        sample= [[45, -99], [24, 83], [-48, -68], [-97, 99], [-8, -77], [-2, 50], [44, 41], [-48, -58], [-1, 53], [14, 86], [31, 94], [12, -91], [33, 50], [82, 72], [83, -90], [10, 78], [7, -22], [90, -88], [-21, 5], [6, 23]]

        def dist(p0, p1):
            return (((p0[0] - p1[0])**2) + ((p0[1] - p1[1])**2))**.5


        def shortestDist(sample):
            distances = []
            for i in range(len(sample)-1):
                for j in range(i+1, len(sample)):
                    distances += [dist(sample[i],sample[j])]
            return(min(distances))
</code></pre>
<p>That finds the distance alright between two points. I just need some help figuring out how to start writing <code>shortestDist</code> to compare all points and keep track of the shortest distance. UPDATE: The error was resolved and I'm good to go now. Thank you to everyone for their assistance!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a fully functioning example based on a list of points.</p>
<pre><code>points = [(1,5), (5,8), (8,1), (9,5)]

def euclideanDistance(coordinate1, coordinate2):
    return pow(pow(coordinate1[0] - coordinate2[0], 2) + pow(coordinate1[1] - coordinate2[1], 2), .5)

distances = []
for i in range(len(points)-1):
    for j in range(i+1, len(points)):
        distances += [euclideanDistance(points[i],points[j])]
print min(distances)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do the job</p>
<pre><code>def shortestDist(points):
        sh = float("inf")
        for i in range(1, len(points)):
                d = dist(points[i-1], points[i])
                if d &lt; sh:
                        sh = d
        return sh
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think code below would move you into right direction:</p>
<pre><code>def shortestDist(points):
    min_dist = None
    while points:
        p1, p2 = points.pop()
        dist = dist(p1, p2)
        if min_dist is None:
            min_dist = dist
        else:
            min_dist = dist  if dist &lt; min_dist else min_dist
</code></pre>
<p>Let me know if you don't understand some parts of code and i will give more explanations to it.</p>
<p>Good luck! </p>
</div>
<div class="post-text" itemprop="text">
<p>First, you might want to use tuples rather than lists. Either way will work, but given the values "x" and "y" are different, albeit both "numbers" (doubles,int...), a tuple is typically used.</p>
<p>You can pass in the points like:</p>
<pre><code>dist((0,1), (2,3))
</code></pre>
<p>And they can be accessed like you would access a list:</p>
<pre><code>p0[0] # access "x" in point 0
p0[1] # access "y" in point 0
</code></pre>
<p>As for writing <code>shortestDistance</code>, you'll want to take in a list of the tuples from above: e.g. [(0,1),(2,4),(3,2),(1,3)]</p>
<p>So something like this for the def:</p>
<pre><code>def shortestDist(listOfPoints)
</code></pre>
<p>Then for each point you can compare it to each point after it using the following, which stores it in a dictionary.</p>
<pre><code> currentIndex = 0
 pointDict = {}
 for point in listOfPoints:
    currentPoint = point
    for i in range(currentIndex,len(listOfPoints)):
        pointDict[currentPoint] = dist(currentPoint,listOfPoints[i])
</code></pre>
<p>That should get you started. It assumes that the points are not duplicated.</p>
</div>
<span class="comment-copy">Just apply this function to all pairs of points? You can do this with two nested for loops and a variable, or in a single line with <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</span>
<span class="comment-copy">I just dont know what the syntax for shortestDist should look like. Like, what exactly does the loop look like? We can't use min/itertools and stuff either. Appreicate your help!</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/5228383/how-do-i-find-the-distance-between-two-points">How do I find the distance between two points?</a></span>
<span class="comment-copy">@Vorsprung Nope, that's about the part that OP already has solved.</span>
<span class="comment-copy">ah ok <a href="http://codereview.stackexchange.com/questions/81865/travelling-salesman-using-brute-force-and-heuristics" title="travelling salesman using brute force and heuristics">codereview.stackexchange.com/questions/81865/â€¦</a></span>
<span class="comment-copy">Edited: sh = -1 was to find the maximum :p Infinity will be better here</span>
<span class="comment-copy">You're right in your own way. But see I need the def shortestDist and inside that I need def dist inside a loop. I think you guys are usin gubilt-in functions, which we cant</span>
<span class="comment-copy">I don't get your point. I'm only using your function dist in a loop.</span>
<span class="comment-copy">Never mind, I see what you mean. Can yo ucheck my updated code now and tell me what I'm messing up. ShortestDist(sample) gives me 18.7 not 3.12</span>
<span class="comment-copy">Well, in your sample I don't get where you could get 3.12. I guess the code is ok but the sample is not. Still, validate anwsers that must be</span>
<span class="comment-copy">Distance compares the distance between <i>two</i> points.</span>
<span class="comment-copy">@tobias_k thanks, yep, i've just corrected that</span>
<span class="comment-copy">.pop() only returns one element isn't it?</span>
<span class="comment-copy">So, now you are assuming that <code>points</code> is a list of pairs of points? I think OP wants the shortest distance between any combination of points.</span>
<span class="comment-copy">@tobias_k I am just trying to point OP into right direction as OP asked for ...</span>
<span class="comment-copy">I may have misunderstood the question. Anyway, hope it helps a little bit...</span>
