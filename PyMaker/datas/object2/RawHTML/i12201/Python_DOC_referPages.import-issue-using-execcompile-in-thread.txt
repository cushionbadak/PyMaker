<div class="post-text" itemprop="text">
<p>Windows 10, Python 3.5.1 x64 here.</p>
<p>This is weird... Let's say I have this script, called <code>do.py</code>. Please note the <code>import string</code> statement:</p>
<pre><code>import string

# Please note that if the print statement is OUTSIDE 'main()', it works.
# It's like if 'main()' can't see the imported symbols from 'string'
def main():
    print(string.ascii_lowercase)

main()
</code></pre>
<p>I want to run it from a "launcher script", in a subthread, like this (<code>launcher.py</code>):</p>
<pre><code>import sys
import threading

sys.argv.append('do.py')

def run(script, filename):
    exec(compile(script, filename, 'exec'))

with open(sys.argv[1], 'rb') as _:
    script = _.read()

# But this WORKS:
# exec(compile(script, sys.argv[1], 'exec'))

thread = threading.Thread(name='Runner', target=run, args=(script, sys.argv[1]))
thread.start()
thread.join()
</code></pre>
<p>It dies with the following error:</p>
<pre><code>Exception in thread Runner:
Traceback (most recent call last):
  File "C:\Program Files\Python35\lib\threading.py", line 914, in _bootstrap_inner
    self.run()
  File "C:\Program Files\Python35\lib\threading.py", line 862, in run
    self._target(*self._args, **self._kwargs)
  File "tmpgui.py", line 7, in run
    exec(compile(script, filename, 'exec'))
  File "do.py", line 6, in &lt;module&gt;
    main()
  File "do.py", line 4, in main
    print(string.ascii_lowercase)
NameError: name 'string' is not defined
</code></pre>
<p>That is, the exec'ed code is not importing <code>string</code> properly or something like that, and within <code>main()</code> the <code>string</code> module is not visible.</p>
<p>This is not the full code of my project, which is too big to post here, but the bare minimum I've created which mimics the problem.</p>
<p>Just in case someone is curious, I'm rewriting an old program of mine which imported the <code>main()</code> function of a script and ran that function with the standard output streams redirected to a <code>tkinter</code> text box. Instead of importing a function from the script, I want to load the script and run it. I don't want to use <code>subprocess</code> for a whole variety of reasons, I prefer to run the "redirected" code in a thread and communicate with the main thread which is the one handling the GUI. And that part works perfectly, the only problem I have is this and I can't understand why is happening!</p>
<p>My best bet: I should be passing something in globals or locals dictionaries to <code>exec</code>, but I'm at a lost here...</p>
<p>Thanks a lot in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>exec(thing)</code> is equivalent to <code>exec(thing, globals(), locals())</code>.</p>
<p>Thus,</p>
<ul>
<li>the local symbol table of <em>do.py</em> is the local symbol table of the <code>run</code> function</li>
<li>the global symbol table of <em>do.py</em> is the global symbol table of <em>launcher.py</em> </li>
</ul>
<p><code>import string</code> imports the module and binds it to the variable in the local space, which is the local space of the <code>run</code> function. You can verify this:</p>
<pre><code>def run(script, filename):
    try:
        exec(compile(script, filename, 'exec'))
    finally:
        assert 'string' in locals(), "won't fail because 'import' worked properly"
</code></pre>
<p><code>main</code> has a separate local scope, but it shares the global symbol table with <em>do.py</em> and, consequently, with <em>launcher.py</em>.</p>
<p>Python tried to find the variable named <code>string</code> inside both local (it's empty) and global symbol tables of <code>main</code>, but failed, and raised the <code>NameError</code>.</p>
<p>Pass one empty dictionary in a call to <code>exec</code>:</p>
<pre><code>def run(script, filename):
    exec(compile(script, filename, 'exec'), {})
</code></pre>
</div>
<span class="comment-copy">Can this be the problem?: if I don't pass any global or local dictionary to the <code>exec</code> call, that call is run in the scope of the <code>main()</code> function in the launcher, and the <code>import string</code> imports the module only in <code>locals()</code>? But then, the <code>main()</code> function in <code>do.py</code> should still be able to access that symbol, because it is defined in a 'higher' scope, am I wrong?</span>
<span class="comment-copy">Thanks, vaultah, this fixed my problem. As you can see from my <i>self comment</i>, I suspected this may be the reason, but I didn't know the solution was to pass an empty dictionary which <code>code</code> could use. Thanks A LOT!</span>
<span class="comment-copy">@RaúlNúñezdeArenasCoronado: no problem :) If you pass in one (possibly empty) dictionary, <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec</a> will use it as <i>globals</i> and <i>locals</i>. From the docs: <i>"If only globals is provided, it must be a dictionary, which will be used for both the global and the local variables. ... Remember that at module level, globals and locals are the same dictionary."</i> Technically, you can give exec any dictionary.</span>
