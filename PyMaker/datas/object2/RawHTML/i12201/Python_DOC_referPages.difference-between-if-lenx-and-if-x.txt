<div class="post-text" itemprop="text">
<p>I have following list <br/></p>
<pre><code>x = [1,2,3]

if x:
 dosomething()

if len(x)&gt;0:
  dosomething()
</code></pre>
<p>In above example which if statement will work faster ?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is (from the result) no difference <em>if</em> <code>x</code> is <code>list</code>. But the first one is a bit faster:</p>
<pre><code>%%timeit
if x:
    pass
10000000 loops, best of 3: 95 ns per loop
</code></pre>
<p>than the second one:</p>
<pre><code>%%timeit
if len(x) &gt; 0:
    pass
1000000 loops, best of 3: 276 ns per loop
</code></pre>
<p>You should use the first one with <code>if x</code> in almost all cases. Only if you want to distinguish between <code>None</code>, <code>False</code> and an empty <code>list</code> (or something similar) you might need something else.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first statement would work faster as it doesn't need to execute a function whereas in the second statement something needs to be executed before it will run which in this case <code>len(x)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Internally,</p>
<pre><code>if x:
</code></pre>
<p>will be getting the size of the list object and will check if it is a non-zero value.</p>
<p>In this case,</p>
<pre><code>if len(x) &gt; 0:
</code></pre>
<p>you are doing it explicitly.</p>
<hr/>
<p>Moreover, <a href="https://www.python.org/dev/peps/pep-0008/#id46" rel="nofollow">PEP-0008 suggests the first form</a>,</p>
<blockquote>
<p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>
<pre class="lang-none prettyprint-override"><code>Yes: if not seq:
     if seq:

No: if len(seq)
    if not len(seq)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on the answer by @thefourtheye, here's a demo/proof that <code>__len__</code> is called when you check the truth-value of a list:</p>
<pre><code>&gt;&gt;&gt; class mylist(list):
...     def __len__(self):
...         print('__len__ called')
...         return super(mylist, self).__len__()
... 
&gt;&gt;&gt; a = mylist([1, 2, 3])
&gt;&gt;&gt; if a:
...     print('doing something')
... 
__len__ called
doing something
&gt;&gt;&gt; 
&gt;&gt;&gt; if len(a) &gt; 0:
...     print('doing something')
... 
__len__ called
doing something
&gt;&gt;&gt; 
&gt;&gt;&gt; bool(a)
__len__ called
True
</code></pre>
<p>And here's a quick timing:</p>
<pre><code>In [3]: a = [1,2,3]
In [4]: timeit if a: pass
10000000 loops, best of 3: 28.2 ns per loop
In [5]: timeit if len(a) &gt; 0: pass
10000000 loops, best of 3: 62.2 ns per loop
</code></pre>
<p>So the implicit check is slightly faster (probably because there's no overhead from the global <code>len</code> function) and as already mentioned suggested by PEP-0008.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the <a href="https://docs.python.org/2/library/dis.html#dis.dis" rel="nofollow"><code>dis.dis()</code></a> for each method you'll see that the second has to perform almost twice as many steps as the first one.</p>
<pre><code>In [1]: import dis

In [2]: def f(x):
   ....:     if x: pass
   ....:     

In [3]: def g(x):
   ....:     if len(x) &gt; 0: pass
   ....:     

In [4]: dis.dis(f)
  2           0 LOAD_FAST                0 (x)
              3 POP_JUMP_IF_FALSE        9
              6 JUMP_FORWARD             0 (to 9)
        &gt;&gt;    9 LOAD_CONST               0 (None)
             12 RETURN_VALUE        

In [5]: dis.dis(g)
  2           0 LOAD_GLOBAL              0 (len)
              3 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1
              9 LOAD_CONST               1 (0)
             12 COMPARE_OP               4 (&gt;)
             15 POP_JUMP_IF_FALSE       21
             18 JUMP_FORWARD             0 (to 21)
        &gt;&gt;   21 LOAD_CONST               0 (None)
             24 RETURN_VALUE
</code></pre>
<p>Both of them need to do <code>LOAD_FAST</code>, <code>POP_JUMP_IF_FALSE</code>, <code>JUMP_FORWARD</code>, <code>LOAD_CONST</code>, and <code>RETURN_VALUE</code>. But the second method needs to additionally do 
<code>LOAD_GLOBAL</code>, <code>CALL_FUNCTION</code>, <code>LOAD_CONST</code>, and <code>COMPARE_OP</code>. Therefore, the first method will be faster.</p>
<p>In reality, however, the difference in time between the two methods will be so minuscule that unless these if statements run millions of times in your code it will not noticeably impact the performance of your program. This sounds like an example of premature optimization to me.</p>
</div>
<span class="comment-copy">Why don't you time it yourself?</span>
<span class="comment-copy">Learn the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code> module</a> from the standard library, and you'll never have to ask a "which is faster" question again.</span>
<span class="comment-copy">With the code provided above, it would be faster to just drop the <code>if</code> statement :)</span>
<span class="comment-copy">Typo: missing <code>:</code> in <code>No: if len(seq)</code></span>
<span class="comment-copy">@PM2Ring I just realized that the PEP-8 itself has that mistake</span>
<span class="comment-copy">Wow! Submit a correction. :)</span>
