<div class="post-text" itemprop="text">
<p>I'm trying to delete a big number of folders in some code I am writing in Python 2.7, the folders to be deleted are in the same folder than the code I'm running. To do this I use subprocess in the following way:</p>
<pre><code>import subprocess


def runsafe(job,args):
    jobs=[job];
    for arg in args:
        jobs.append(arg)
    proc=subprocess.Popen(jobs,stdout=subprocess.PIPE)
    return proc.stdout.readlines()


if __name__=="__main__":
    runsafe("rm",["-r","./*/"])
</code></pre>
<p>If I do this the code doesn't delete any folders. Obviously, if I write <code>rm -r ./*/</code> in my terminal all the folders inside the folder where I'm running the code are deleted. Also if I change <code>runsafe("rm",["-r","./*/"])</code> in my code for <code>runsafe("rm",["-r","./foo/"])</code> (where foo is one of the folders to be deleted) the code works fine and deletes the desired folder.</p>
<p>How can I delete all the folders at once? Why doesn't it work if I use * to indicate that I want to delete all the folders? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use <code>*</code> because <code>subprocess</code> doesn't run in a shell (e.g. Bash), and it is the shell that expands <code>*</code> into a list of files.</p>
<p>You <em>could</em> use <code>shell=True</code> to tell <code>subprocess</code> to run in a shell, but this <a href="https://stackoverflow.com/q/13491392/113632">isn't a great idea</a>, and there are better alternatives.</p>
<p>If you need to <a href="https://www.google.com/webhp#q=python%20recursive%20delete" rel="nofollow noreferrer">recursively delete a directory</a> you can use <a href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" rel="nofollow noreferrer"><code>shutil.rmtree()</code></a> and avoid starting a subprocess at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could have <code>subprocess</code> run a shell to interpret your command. The command line needs to be passed as a string, not a list:</p>
<pre><code>subprocess.Popen('rm -r *', shell=True, ...)
</code></pre>
</div>
<span class="comment-copy">But <code>shell=True</code> is discouraged, as its a security risk. Particularly when paired with an <code>rm -r</code> command, I'd be hesitant to do this.</span>
<span class="comment-copy">I'd not see much of a problem as long as the command string is created programmatically. User (or other) input would be a real problem, though, even if sanitised.</span>
<span class="comment-copy">Even if it's "created programmatically" it's more error prone, since the shell then has to parse the string, meaning whitespace and other special characters can cause problems.</span>
<span class="comment-copy"><code>shell=True</code> is conceptually similar to constructing SQL queries manually (as opposed to using prepared statements). Sure, you can do it safely, but why take the risk? It is much more dangerous than any arbitrary bug; it risks giving a user shell access to your system.</span>
<span class="comment-copy">I quite like the SQL analogy, and I completely understand your point. Mine, however, was that as long as user input doesn't get near the subprocess call, you may still be pointing a battery of interesting guns at your own foot by <code>shell=True</code>, but it's giving the user shell access no more than giving them "rm access" by calling <code>rm</code> directly.</span>
