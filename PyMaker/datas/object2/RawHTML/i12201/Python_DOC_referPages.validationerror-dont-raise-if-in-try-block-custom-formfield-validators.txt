<div class="post-text" itemprop="text">
<h1>What was done</h1>
<p>I have a form that receives a code that is given to the user so he can verify his email address. To check if the form is valid I created a custom field validator, see <code>forms.py</code></p>
<h1>Problem</h1>
<p>It looks like if <code>raise ValidationError("...")</code> would always fail in the <code>try</code>-block. Is this normal behavior or did I something wrong?</p>
<h3>forms.py</h3>
<pre><code>class SignUpVerificationForm(forms.Form):

    def is_valid_verification_code(code):
        #settings
        time_to_verify_in_minutes = 5

        try:
            tmp = SignUpUser.objects.get(signup_verification=code)
            email = tmp.signup_email
            time = tmp.signup_time
            if time &gt;= timezone.now() - datetime.timedelta(minutes=time_to_verify_in_minutes):
                try:
                    check = User.objects.get(email=email)
                    raise ValidationError("This verification code was already used.")
                except:
                    return code
            else:
                raise ValidationError("This verification code has expired.")
        except:
            raise ValidationError("Invalid verification code.")




    verification_code = forms.CharField(max_length=50,
                                        label='',
                                        validators=[is_valid_verification_code]
                                        )
</code></pre>
<h1>Edit with ugly solution</h1>
<p>I ended up with the code below. I think it's not the right way of doing this but i don't know better at the moment and it's working</p>
<pre><code>def is_valid_verification_code(code):
    #settings
    time_to_register_in_minutes = 5

    try:
        tmp = SignUpUser.objects.get(signup_verification=code)
        email = tmp.signup_email
        time = tmp.signup_time
        if time &gt;= timezone.now() - datetime.timedelta(minutes=time_to_register_in_minutes):
            try:
                user_already_active = User.objects.get(email=email)
                user_already_active = 1
            except:
                return code
        else:
            try:
                user_already_active = User.objects.get(email=email)
                user_already_active = 1
            except:
                user_already_active = 0
    except:
        raise ValidationError("Invalid verification code.")

    if user_already_active:
        raise ValidationError("This verification code was already used.")
    if not user_already_active:
        raise ValidationError("This verification code has expired.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not using <code>raise</code> the way you should be using it. The way your code is written right now, for every successful call to:</p>
<pre><code>check = User.objects.get(email=email)
</code></pre>
<p>You will 100% of the time raise an exception:</p>
<pre><code>raise ValidationError("This verification code was already used.")
</code></pre>
<p>You should be putting it in your except block.</p>
<pre><code>try:
    check = User.objects.get(email=email)
except:
    raise ValidationError("This verification code was already used.")
</code></pre>
<p>However, based on how you are calling a method called <code>get</code>. You will probably need to add some logic around to see if you in fact need to even raise your "already used" exception. Something like:</p>
<pre><code>if get:
    ValidationError("This verification code was already used.")
</code></pre>
<p><a href="https://docs.python.org/3/tutorial/errors.html#exceptions" rel="nofollow">How try/except works</a></p>
</div>
<span class="comment-copy">You always raise an Exception so the try block will always fail. Not sure if you understand <code>try/except</code>. Normally <code>User.objects.get(...)</code> should raise an Exception if it fails (because the code is already used) and delete the following line.</span>
<span class="comment-copy">I want to raise an error if a <code>User</code> can be gotten. <code>User != SignUpUser</code>. A <code>SignUpUser</code> has to verify his mail address to become a user. This form gets the verification code and should proof if the code is valid. And so also if a <code>User</code> was already activated by the given activation code.</span>
<span class="comment-copy">@rwx Then what you need to do is similar to what I suggested near the end of my answer with my condition. When you call the <code>get</code> method. I assume that if you are able to get something, then that means you should probably raise something. So, you should check to see if the <code>get</code> method returns the "thing" you are looking to conclude: "Yes, this user has been activated". Hence, why I suggested a conditional statement.</span>
<span class="comment-copy">It works with <code>if</code> as i want it; but now i have to look for some other validation to check if the object exists, because i will get an Internal Error <code>Exception Value: SignUpUser matching query does not exist</code> when i pass in a verification code that's not existing. That was the reason why i used the <code>try</code>-block Exception Value: SignUpUser matching query does not exist. SO: <a href="http://stackoverflow.com/a/640131">what is the right way to validate if an object exists in a django</a>/4946454</span>
<span class="comment-copy">This is where you need to decide how you want your exception handling to work in your code. Clearly now with an exception that the user does not exist, this means that wherever that exception is being thrown you want to catch it around a try/except either inside that method, or catch the <code>Exception Value: SignUpUser matching query does not exist.</code> in the code you posted somewhere and add the necessary logic.</span>
<span class="comment-copy">In short. This exception being thrown indicates to you that the user was not activated, so you don't actually want to err. So you need to now think of logic to work around this.</span>
