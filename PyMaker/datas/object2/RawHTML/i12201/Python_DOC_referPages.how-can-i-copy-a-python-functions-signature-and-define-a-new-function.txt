<div class="post-text" itemprop="text">
<p>I would like to copy a function's signature to define a new function that extends it. Python 3.4, if the version matters to the solution.</p>
<p>In <code>ham.py</code>:</p>
<pre><code>def spam(pork *, salt, taste=False):
    """External function I don't control."""
    return food
</code></pre>
<p>In <code>eggs.py</code>:</p>
<pre><code>import ham

def breakfast(pork, *, drama, salt, taste=False):
    """The function I want to define, done statically."""
    return eggs, ham.spam(pork=pork, salt=salt, taste=taste)
</code></pre>
<p>I would like to define <code>breakfast</code> so that if the user has a different-but-compatible version of <code>ham.py</code> installed, the <code>breakfast</code> function will include any changes to the arguments in <code>ham.spam</code>.</p>
<p>Ex:</p>
<pre><code># Probably not how you do this...
signature = inspect.Signature(breakfast)
breakfast = types.FunctionType(
    how-do-i-make-a-multi-line-code-object, 
    what-do-i-use-for-globals,
    name='breakfast', 
    argdefs=from-signature)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer your question in parts, to get the signature you can use <code>inspect.getargspec</code> or <code>inspect.getfullargspec</code> from the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow">inspect</a> module</p>
<pre><code>import inspect
fullArgSpec = inspect.getfullargspec(spam)
</code></pre>
<p>This returns</p>
<blockquote>
<p>FullArgSpec(args=['pork', 'salt', 'taste'], varargs=None, varkw=None, defaults=(False,), kwonlyargs=[], kwonlydefaults=None, annotations={})</p>
</blockquote>
<p>With this, you can build up the string of argument calls. First building up the postional args and then the keyword arguments. Crudely put, something like this</p>
<pre><code>argumentsString = ""
for argument in itertools.chain(fullArgSpec.args, fullArgSpec.kwonlyargs):
    if argument in locals():
        argumentsString += '{}={},'.format(argument,locals()[argument])
</code></pre>
<p>Note, that this can fail if any of the positional arguments are missing. If needed you should add a check to cleanlly exit at this point.</p>
<p>To second part, where you want to build the function up, I was hoping to find something like <a href="https://docs.python.org/2/library/functions.html#apply" rel="nofollow">apply</a>, but it seems to be deprecated. The reason for building the <code>argumentString</code> was to execute this using the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow">exec</a> to execute a call to <code>spam</code> with the built argument string matching a normal function call</p>
<pre><code>exec('spam({})'.format(argumentsString))
</code></pre>
<p>The string passed to exec is</p>
<blockquote>
<p>spam(pork=2,salt=3)</p>
</blockquote>
</div>
<span class="comment-copy">Does <code>breakfast</code> do anything with its arguments other than passing them straight through to <code>spam</code>?</span>
<span class="comment-copy">@jwodder no, the arguments are passed through directly.</span>
