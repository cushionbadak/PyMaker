<div class="post-text" itemprop="text">
<p>I have two lists of lists that have equivalent numbers of items. The two lists look like this:</p>
<p><code>L1 = [[1, 2], [3, 4], [5, 6, 7]]</code></p>
<p><code>L2 =[[a, b], [c, d], [e, f, g]]</code></p>
<p>I am looking to create one list that looks like this:</p>
<p><code>Lmerge = [[[a, 1], [b,2]], [[c,3], [d,4]], [[e,5], [f,6], [g,7]]]</code></p>
<p>I was attempting to use <code>map()</code> :</p>
<p><code>map(list.__add__, L1, L2)</code> but the output produces a flat list.</p>
<p>What is the best way to combine two lists of lists? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>zip</code> the lists and then <code>zip</code> the resulting tuples again...</p>
<pre><code>&gt;&gt;&gt; L1 = [[1, 2], [3, 4], [5, 6, 7]]
&gt;&gt;&gt; L2 =[['a', 'b'], ['c', 'd'], ['e', 'f', 'g']]
&gt;&gt;&gt; [list(zip(a,b)) for a,b in zip(L2, L1)]
[[('a', 1), ('b', 2)], [('c', 3), ('d', 4)], [('e', 5), ('f', 6), ('g', 7)]]
</code></pre>
<p>If you need lists all the way down, combine with `map:</p>
<pre><code>&gt;&gt;&gt; [list(map(list, zip(a,b))) for a,b in zip(L2, L1)]
[[['a', 1], ['b', 2]], [['c', 3], ['d', 4]], [['e', 5], ['f', 6], ['g', 7]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were on the right track with the <code>map</code>.</p>
<p>Here's a shorter alternative to the first version by tobias_k, <code>zip</code> together corresponding elements from both lists:</p>
<pre><code>&gt;&gt;&gt; zipped = map(zip, L2, L1)
&gt;&gt;&gt; list(map(list, zipped)) # evaluate to a list of lists
[[('a', 1), ('b', 2)], [('c', 3), ('d', 4)], [('e', 5), ('f', 6), ('g', 7)]]
</code></pre>
<p>As noted in the comments, in Python 2, the brief <code>map(zip, L2, L1)</code> is enough.</p>
<p><code>map(zip, L2, L1)</code> will work for you in Python 3 too, given that you iterate over it just once and that you don't need sequence access by index. And if you need to iterate many times, you may be interested in <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee</code></a>.</p>
<p>A shorter alternative to the second version:</p>
<pre><code>&gt;&gt;&gt; [list(map(list, x)) for x in map(zip, L2, L1)]
[[['a', 1], ['b', 2]], [['c', 3], ['d', 4]], [['e', 5], ['f', 6], ['g', 7]]]
</code></pre>
<p>Lastly, there's also this:</p>
<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; map(partial(map, list), map(zip, L2, L1))
[[['a', 1], ['b', 2]], [['c', 3], ['d', 4]], [['e', 5], ['f', 6], ['g', 7]]]
</code></pre>
</div>
<span class="comment-copy">Nice. In fact, in Python 2, the first one is equivalent to just <code>map(zip, L2, L1)</code> -- but you'd probably need at least as many characters to explain what this does. ;-)</span>
<span class="comment-copy">@tobias_k: Thanks for pointing this out. I assumed we were talking Python 3 and that OP really needs a list. But for other people, the shortest version may be suitable even if they ditched Python 2. Arguably, it may actually be the most readable, at least for people familiar with <code>map</code> and <code>zip</code>.</span>
