<div class="post-text" itemprop="text">
<p>I would like to write a simple program to cross encrypt a word. (i.e. change "A" to "Z", "B" to "Y" etc) I am new to python and can not get the loop to work. 
Here is what I have. I Realize there is probably a better way to do this. But I am attempting to do this using the most basic fundamental knowledge of the language.</p>
<pre><code>w = str.upper(input("Enter a word\n"))
l = list(w)
for i in l:
    if l[i] is "A":
        l[i] = "Z"
    elif l[i] is "B":
        l[i] = "y"
    elif l[i] is "C":
        l[i] = "X"
    elif l[i] is "D":
        l[i] = "W"
    elif l[i] is "E":
        l[i] = "V"
    elif l[i] is "F":
        l[i] = "U"
    elif l[i] is "G":
        l[i] = "T"
    elif l[i] is "H":
        l[i] = "S"
    elif l[i] is "I":
        l[i] = "R"
    elif l[i] is "J":
        l[i] = "Q"
    elif l[i] is "K":
        l[i] = "P"
    elif l[i] is "L":
        l[i] = "O"
    elif l[i] is "M":
        l[i] = "N"
    elif l[i] is "N":
        l[i] = "M"
    elif l[i] is "O":
        l[i] = "L"
    elif l[i] is "P":
        l[i] = "K"
    elif l[i] is "Q":
        l[i] = "J"
    elif l[i] is "R":
        l[i] = "I"
    elif l[i] is "S":
        l[i] = "H"
    elif l[i] is "T":
        l[i] = "G"
    elif l[i] is "U":
        l[i] = "F"
    elif l[i] is "V":
        l[i] = "E"
    elif l[i] is "W":
        l[i] = "D"
    elif l[i] is "X":
        l[i] = "C"
    elif l[i] is "Y":
        l[i] = "B"
    elif l[i] is "Z":
        l[i] = "A"
    print("".join(l))
</code></pre>
<p>I get an error saying that the list position <code>[i]</code> is invalid because it is a string. But, my intent is to use the value as a counter to go through the list objects and change the letter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can map characters to their unicode code points with the <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow">ord</a> function. For the 26 uppercase English letters these correspond to integer values between 65 and 90 inclusive. Subtracting the integer code for each character from 155 will give you the character code for its complement.</p>
<pre><code>w = input('Enter a word\n').upper()
print(''.join(map(lambda c: chr(155 - ord(c)), w)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from string import ascii_lowercase as lc,ascii_uppercase as uc,maketrans
transtab = maketrans(lc+uc,lc[::-1]+uc[::-1])
print("Hello".translate(transtab))
</code></pre>
<p>is one way (probably the preferred way)</p>
<pre><code>from string import ascii_lowercase as lc,ascii_uppercase as uc,maketrans
translator = dict((letter1,letter2) for letter1,letter2 in zip(uc,uc[::-1]))
print("".join(translator.get(c,c) for c in "HELLO")
</code></pre>
<p>is another way using a dictionary</p>
<pre><code>input_msg= "HELLO"
new_message = ""
for letter in input_msg:
    new_message += chr(ord("Z")-(ord(letter)-ord("A")))

print (new_message)
</code></pre>
<p>is another way using math...
basically there are a million ways to accomplish this</p>
<h1>with regards to your code <code>i</code> is your actual letter so change to</h1>
<pre><code>if i=='A':...
</code></pre>
<p>if you also want the index (to replace)</p>
<pre><code>for index,letter in enumerate(l):
    if letter == "A":
        l[index] = "Z"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>for i in l:</code> loops over the characters in <code>l</code>, not the numerical indices. To make your code run with minimal changes you can change the <code>for</code> loop, as shown below. You also need to move the <code>print</code> call outside the loop.</p>
<pre><code>w = str.upper(input("Enter a word\n"))
l = list(w)
for i in range(len(l)):
    if l[i] is "A":
        l[i] = "Z"
    elif l[i] is "B":
        l[i] = "Y"
    elif l[i] is "C":
        l[i] = "X"
    elif l[i] is "D":
        l[i] = "W"
    elif l[i] is "E":
        l[i] = "V"
    elif l[i] is "F":
        l[i] = "U"
    elif l[i] is "G":
        l[i] = "T"
    elif l[i] is "H":
        l[i] = "S"
    elif l[i] is "I":
        l[i] = "R"
    elif l[i] is "J":
        l[i] = "Q"
    elif l[i] is "K":
        l[i] = "P"
    elif l[i] is "L":
        l[i] = "O"
    elif l[i] is "M":
        l[i] = "N"
    elif l[i] is "N":
        l[i] = "M"
    elif l[i] is "O":
        l[i] = "L"
    elif l[i] is "P":
        l[i] = "K"
    elif l[i] is "Q":
        l[i] = "J"
    elif l[i] is "R":
        l[i] = "I"
    elif l[i] is "S":
        l[i] = "H"
    elif l[i] is "T":
        l[i] = "G"
    elif l[i] is "U":
        l[i] = "F"
    elif l[i] is "V":
        l[i] = "E"
    elif l[i] is "W":
        l[i] = "D"
    elif l[i] is "X":
        l[i] = "C"
    elif l[i] is "Y":
        l[i] = "B"
    elif l[i] is "Z":
        l[i] = "A"
print("".join(l))
</code></pre>
<p>However, there are <strong>much</strong> better ways to do this that don't require 26 <code>if</code>/<code>elif</code> statements. </p>
<p>BTW, although it works here, it's better to do <code>if l[i] == "A":</code> rather than <code>if l[i] is "A":</code>.</p>
<hr/>
<p>Here's an improved way to do this that's hopefully not <em>too</em> advanced for you. It uses extended slicing to create a reversed version of the alphabet. It uses the <code>zip</code> function to iterate over a pair of strings; <code>zip</code> can be used for any number of strings, and also for other containers like lists. And it uses a dictionary to store the translation table. This version handles both upper &amp; lower case letters.</p>
<pre><code>letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
rev_letters = letters[::-1]

# Build translation dictionary
trans = {}

# Loop over both letter strings in parallel
for u, v in zip(letters, rev_letters):
    trans[u] = v
    trans[u.lower()] = v.lower()    

words = input("Enter some words: ")
lst = []
for ch in words:
    # Get the translated version of ch if it exists, 
    # otherwise return ch
    newch = trans.get(ch, ch)
    # Add it to the list
    lst.append(newch)
print("".join(lst))    
</code></pre>
<h3>Test</h3>
<pre class="lang-none prettyprint-override"><code>Enter some words: Wizard abc
Draziw zyx
</code></pre>
</div>
<span class="comment-copy">I get an error saying that the list position [i] is invalid because it is a string. But, my intent is to use the value as a counter to go through the list objects and  change the letter.</span>
<span class="comment-copy">The method has a name: <a href="https://en.wikipedia.org/wiki/Caesar_cipher" rel="nofollow noreferrer">Caesar Cipher</a>.</span>
<span class="comment-copy">the math way is good ... :) hope there is no spaces in the input string +1</span>
<span class="comment-copy">:) Me too - figured a word means no spaces.</span>
<span class="comment-copy">Fair call, Alex. Let's hope there are no apostrophes or hyphens, either. :)</span>
<span class="comment-copy">I answered also wrt OP's code , now that he clarified the question in the comments</span>
