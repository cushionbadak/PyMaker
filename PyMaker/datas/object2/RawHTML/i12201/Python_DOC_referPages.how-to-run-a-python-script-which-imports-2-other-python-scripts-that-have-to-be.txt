<div class="post-text" itemprop="text">
<p>I have two scripts a.py and b.py.</p>
<p>a.py runs with python3 and b.py runs with python2.7. </p>
<p>Now I want to import these two scripts in a new script called c.py and run c.py. How exactly should I accomplish this. How should i tell bash which versions to use for which script. My default linux python version is 2.7. Thnaks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to import <code>a.py</code> and <code>b.py</code> into <code>c.py</code>, you must choose <em>one</em> Python version for <code>c.py</code>. This will probably have to be Python 3. So you have to port <code>b.py</code> to Python 3.</p>
<p>This has nothing to do with the shell.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot practically do that i.e by calling both the files in another file as the other two files a.py and b.py are two different versions of Python.</p>
<p>Syntax in both 2.7.x and 3.4.x are quite different this is the reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can modify <code>a.py</code> and/or <code>b.py</code> so it work in python 2 or 3 regardless by adding a <a href="https://docs.python.org/3/library/__future__.html" rel="nofollow"><code>__future__</code></a> import, of course you can't use python 3 exclusive stuff like function annotation or <code>yield from</code></p>
<p>like this</p>
<pre><code>from __future__ import print_function, division, absolute_import, unicode_literals
#everyting else
</code></pre>
<p>or just import the features that are different between version that you need like <code>print_function</code> or <code>division</code></p>
<p>With this you can open a.py in python 2 without problem.</p>
<p>Also you must have installed all the same packages in both version in case that you import something else</p>
<p>you can also add this to <code>a.py</code></p>
<pre><code>try: #python 2
    from itertools import ifilter as filter, imap as map, izip as zip
except ImportError:
    #python 3
    pass

try: #python 2
    range = xrange
except NameError:
    #python 3
    pass    
</code></pre>
<p>if you use any of those so they work the same in both python 3 and 2</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run them sequentially: </p>
<pre><code>python2.7 a.py &amp;&amp; python3.4 b.py
</code></pre>
<p>If you want to run them simultaneously:</p>
<pre><code>python2.7 a.py &amp; python3.4 b.py
</code></pre>
<p>(Assuming that <code>a.py</code> is a python 2.7 script and <code>b.py</code> a python 3.4 one)</p>
<p>And if you want a new script you could try something like: </p>
<pre><code>import subprocess
subprocess.Popen("python2.7 a.py &amp;&amp; python3.4 b.py")
</code></pre>
</div>
<span class="comment-copy">What is 2.7 specific about <code>b.py</code>? Can it be ported to Python 3?</span>
<span class="comment-copy">b.py is specific to python2.7. I import a few modules in b.py that work only with 2.7. So what I was attempting to do is to import b.py and a.py into c.py and run c.py using 2.7 and using the shebang line #!/usr/bin/python3 in a.py script. But that doesnt seem to work.</span>
<span class="comment-copy">Of course this does not work. If <code>a.py</code> is Python 3, the <i>whole</i> code must be Python 3. Port your code.</span>
<span class="comment-copy">"Now I want to import these two scripts in a new script called c.py and run c.py"</span>
<span class="comment-copy">@Tichodroma I've added this to my answer, have a look</span>
<span class="comment-copy">There is still not Python import in your answer.</span>
<span class="comment-copy">@Tichodroma not in a literal sense, but afaic that's the only way to call two existent scripts that require different python versions without having to refactor one of them.</span>
<span class="comment-copy">But calling is not the same as importing. Your answer probably does not what the question asks for.</span>
