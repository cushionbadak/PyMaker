<div class="post-text" itemprop="text">
<p>Given the example: </p>
<pre><code>&gt;&gt;&gt; class Cool: 
...    def mthd(self, val): 
...        self.val = val 
...

&gt;&gt;&gt; def x(): pass

&gt;&gt;&gt; Cool.mthd(x, 360)      # Works in 3.X only, not in 2.X 
</code></pre>
<p>2.X raises <code>**TypeError: unbound method...**</code> error, but in 3.x it works just fine. </p>
<blockquote>
<p>Why does Python 2.X restricts <strong>self</strong> argument to be only an instance type, whereas Python 3.X doesn't restrict it to any data type? 
  And why was this changed in 3.X? </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I don't know <em>why</em> it was changed (I <em>guess</em> to remove a concept that didn't add a lot of value), but the change is documented <a href="https://docs.python.org/3/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow">in the 'What’s New In Python 3.0' documentation</a>:</p>
<blockquote>
<p>The concept of “unbound methods” has been removed from the language. When referencing a method as a class attribute, you now get a plain function object.</p>
</blockquote>
<p>With this change,</p>
<pre><code>my_cool.mthd(360)
</code></pre>
<p>just becomes a (very recommended!) short hand notation for</p>
<pre><code>type(my_cool).mthd(my_cool, 360)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/735975/static-methods-in-python">Static methods in Python?</a></span>
<span class="comment-copy">I don't <i>know</i> the reason either, but the change allows one to use classes as simple namespaces which are supposedly "one honking great idea" according to <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 10 - The Zen of Python</a>.</span>
<span class="comment-copy">Also, "Simple is better than complex." And not having the concept of “unbound methods” is clearly simpler than having it. Also, less complicated. Could also be a case of "[P]racticality beats purity."</span>
<span class="comment-copy">Perhaps the idea is to make dual usages for classes' methods, one as a methods mode and the other as simple functions.</span>
