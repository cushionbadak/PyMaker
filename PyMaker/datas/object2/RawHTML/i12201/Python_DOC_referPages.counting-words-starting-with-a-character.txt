<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function that accepts a string and a character as input and
  returns the count of all the words in the string which start with the
  given character. Assume that capitalization does not matter here. You
  can assume that the input string is a sentence i.e. words are
  separated by spaces and consists of alphabetic characters.</p>
</blockquote>
<p>This is my code:</p>
<pre><code>def count_input_character (input_str, character):
    input_str = input_str.lower()
    character = character.lower()
    count = 0
    for i in range (0, len(input_str)):
        if (input_str[i] == character and input_str[i - 1] == " "):
            count += 1
    return (count)



#Main Program
input_str = input("Enter a string: ")
character = input("Enter character whose occurances are to be found in the given input string: ")
result = count_input_character(input_str, character)
#print(result)
</code></pre>
<p>The only part missing here is that how to check if the first word of the sentence is stating with the user given character. consider this output:</p>
<blockquote>
<p>Your answer is NOT CORRECT Your code was tested with different inputs. &gt; For example when your function is called as shown below:</p>
<p>count_input_character  ('the brahman the master of the universe', 't')</p>
  
  ####### Your function returns ############# 2 The returned variable type is: type 'int'
  
  ### Correct return value should be ######## 3 The returned variable type is: type 'int'
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You function misses the first <code>t</code> because in this line</p>
<pre><code>if (input_str[i] == character and input_str[i - 1] == " "):
</code></pre>
<p>when <code>i</code> is <code>0</code>, then <code>input_str[i - 1]</code> is <code>input_str[-1]</code> which Python will resolve as the <em>last</em> character of the string!</p>
<p>To fix this, you could change your condition to</p>
<pre><code>if input_str[i] == character and (i == 0 or input_str[i - 1] == " "):
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split</code></a> with a list comprehension. Or a <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expression</a> like <code>r'(?i)\b%s'</code>, with <code>(?i)</code> meaning "ignore case", <code>\b</code> is word boundary and <code>%s</code> a placeholder for the character..</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of looking for spaces, you could split <code>input_str</code> on whitespace, this would produce a list of words that you could then test against <code>character</code>. (Pseudocode below)</p>
<pre><code>function F sentence, character {
    l = &lt;sentence split by whitespace&gt; 

    count = 0
    for word in l { 
       if firstchar(word) == character { 
          count = count + 1
       }   
    }

    return count
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although it doesn't fix your specific bug, for educational purposes, please note you could rewrite your function like this using list comprehension:</p>
<pre><code>def count_input_character (input_str, character):
    return len([x for x in input_str.lower().split() if x.startswith(character.lower())])
</code></pre>
<p>or even more efficiently(thanks to tobias_k)</p>
<pre><code>def count_input_character (input_str, character):
    sum(w.startswith(character.lower()) for w in input_str.lower().split())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def c_upper(text, char):
   text = text.title() #set leading char of words to uppercase
   char = char.upper() #set given char to uppercase
   k = 0 #counter
   for i in text:
     if i.istitle() and i == char: #checking conditions for problem, where i is a char in a given string
        k = k + 1
   return k
</code></pre>
</div>
<span class="comment-copy">Use <code>split</code> to split the string into words, instead of doing it characer by character.</span>
<span class="comment-copy">try using the <code>split</code> and <code>startswith</code> functions.  They'll make your life a lot easier</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/35585830/edit">edit</a> your question and fix the indention. This is not valid Python code.</span>
<span class="comment-copy">... or <code>sum(w.startswith(character.lower()) for w in input_str.lower().split())</code></span>
<span class="comment-copy">Added it to my answer:-)</span>
<span class="comment-copy">Oh, good to remember that <code>True</code> gets coerced into a <code>1</code> in a <code>sum(...)</code>. I don't know what else I would've expected, but I've definitely written <code>sum(1 for w in blah if w.startswith(foo))</code> or similar.</span>
<span class="comment-copy">Welcome to Stack Overflow! Thanks for providing code which might help solve the problem, but generally, answers are much more helpful if they include an explanation of what the code is intended to do, and why that solves the problem.</span>
<span class="comment-copy">Thank you for comment</span>
