<div class="post-text" itemprop="text">
<p>I have a list of tuples that is created with the <code>zip</code> function. <code>zip</code> is bringing together four lists: <code>narrative</code>, <code>subject</code>, <code>activity</code>, and <code>filer</code>, each of which is just a list of 0s and 1s. Let's say those four lists look like this:</p>
<pre><code>narrative = [0, 0, 0, 0]
subject = [1, 1, 0, 1]
activity = [0, 0, 0, 1]
filer = [0, 1, 1, 0]
</code></pre>
<p>Now, I'm <code>zip</code>ing them together to get a list of boolean values indicating if any of them are <code>True</code>. </p>
<p><code>ny_nexus = [True if sum(x) &gt; 0 else False for x in zip(narrative, subject, activity, filer)]</code></p>
<p>The problem I'm having now, is getting a second list of tuples for which the names of the variables is returned if it had a 1 during the iteration. I imagine it would look something like this:</p>
<pre><code>variables = ("narrative", "subject", "activity", "filer")
reason = [", ".join([some code to filter a tuple]) for x in zip(narrative, subject, activity, filer)]
</code></pre>
<p>I just can't figure out how I'd go about this. My desired output would look like this:</p>
<pre><code>reason
# ["subject", "subject, filer", "filer", "subject, activity"]
</code></pre>
<p>I'm somewhat new to Python, so I apologize if the solution is easy. </p>
</div>
<div class="post-text" itemprop="text">
<p>Store tuples in a dictionary for a cleaner solution:</p>
<pre><code>tups = {'narrative': narrative,
        'subject': subject,
        'activity': activity,
        'filer': filer}
</code></pre>
<p>The solution:</p>
<pre><code>reason = [', '.join(k for k, b in zip(tups, x) if b) for x in zip(*tups.values())]
</code></pre>
<p>It can also be written using <a href="https://docs.python.org/3/library/itertools.html#itertools.compress" rel="nofollow"><code>itertools.compress</code></a>:</p>
<pre><code>from itertools import compress
reason = [', '.join(compress(tups, x)) for x in zip(*tups.values())]
</code></pre>
<hr/>
<p>Solutions above do not preserve the order of tuples, e.g. they can return something like</p>
<pre><code>['subject', 'filer, subject', 'filer', 'activity, subject']
</code></pre>
<p>If you need the order to be preserved, use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> as shown below:</p>
<pre><code>from collections import OrderedDict

tups = OrderedDict([
    ('narrative', narrative),
    ('subject', subject),
    ('activity', activity),
    ('filer', filer)
])

# The result is ['subject', 'subject, filer', 'filer', 'subject, activity']
</code></pre>
<p><strong><em>EDIT:</em></strong> The solution that doesn't involve dictionaries:</p>
<pre><code>from itertools import compress
reason = [', '.join(compress(variables, x))
          for x in zip(narrative, subject, activity, filer)]
</code></pre>
<p>Consider using dictionaries if the <code>zip(...)</code> call no longer fits on one line.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>zip(narrative, subject, activity, filer)</code> basically transposes the matrix (your list of lists of equal length make up the matrix).  You then enumerate through these to find the location <code>n</code> of where the flag is true and index the appropriate variable.</p>
<pre><code>narrative = [0, 0, 0, 0]
subject = [1, 1, 0, 1]
activity = [0, 0, 0, 1]
filer = [0, 1, 1, 0]
variables = ("narrative", "subject", "activity", "filer")
# ========================================================

new_list = [[variables[n] for n, flag in enumerate(indicators) if flag] 
            for indicators in zip(narrative, subject, activity, filer)]
&gt;&gt;&gt; new_list
[['subject'], ['subject', 'filer'], ['filer'], ['subject', 'activity']]
</code></pre>
<p>To see the transpose:</p>
<pre><code>&gt;&gt;&gt; [i for i in zip(narrative, subject, activity, filer)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just use the filtering aspect of the comprehension syntax to get 
your vaiable English name only if the respective flag is True:</p>
<pre><code>variables = ("narrative", "subject", "activity", "filer")
[tuple (name for flag, name in zip(x, variables) if x)  for x in zip(narrative, subject, activity, filer)]
</code></pre>
<p>That said, there is something fishy about your approach - you'd probbly be (far) better of with an object oriented approach there, instead of trying to manually coordinate independent sequences of variables for each of your subjects.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>    narrative = [0, 0, 0, 0]
    subject = [1, 1, 0, 1]
    activity = [0, 0, 0, 1]
    filer = [0, 1, 1, 0]
    variables = ("narrative", "subject", "activity", "filer")
    ny_nexus = [True if sum(x) &gt; 0 else False for x in zip(narrative, subject, activity, filer)]
    output = []
    [[output.append(variables[j]) if t==1 else None for j,t in enumerate(x)] for x in zip(narrative, subject, activity, filer)]
    print ny_nexus
    print output
</code></pre>
<p>Of course you could just do the following without using list comprehensions:</p>
<pre><code>    narrative = [0, 0, 0, 0]
    subject = [1, 1, 0, 1]
    activity = [0, 0, 0, 1]
    filer = [0, 1, 1, 0]
    variables = ("narrative", "subject", "activity", "filer")
    ny_nexus = [True if sum(x) &gt; 0 else False for x in zip(narrative, subject, activity, filer)]
    output = []
    for x in zip(narrative, subject, activity, filer):
        for j,t in enumerate(x):
            output.append(variables[j])
    print ny_nexus
    print output
</code></pre>
</div>
<span class="comment-copy">By the way, you can say <code>ny_nexus = [sum(x) &gt; 0 for x in zip...]</code></span>
<span class="comment-copy">Always appreciate more concise code. Thanks</span>
<span class="comment-copy">Even better, use the <code>any()</code> built-in function ;) <code>any([0, 0, 0]) == False</code>, <code>any([0, 1, 0]) == True</code>. So, <code>ny_nexus = [any(x) for x in zip...]</code></span>
<span class="comment-copy">Thus far, this is the only solution that is working. However, it is the one I understand the least. Can you explain what <code>compress</code> does, along with what the role <code>*</code> plays in <code>zip(*tups.values())</code> please?</span>
<span class="comment-copy">@vaultah: I don't see how a dictionary or OrderedDict makes this any cleaner. You've already got <code>compress()</code>, why not just feed it OP's <code>variables</code> tuple?</span>
<span class="comment-copy">@brittenb: If you look at the documentation for <code>compress()</code>, you will see that it does pretty much exactly what you're looking for. It selects elements of one sequence based on whether the corresponding elements of another sequence are true.</span>
<span class="comment-copy">@JohnY Yeah, I just pulled up the documentation for it and it's pretty self explanatory. Based on that it seems the right solution to this problem is <code>reason = [", ".join(compress(variables, x)) for x in zip(narrative, subject, activity, filer)]</code></span>
<span class="comment-copy">@brittenb: Exactly right. No need in this case to mess with dictionaries or the asterisk operator. (It will be handy to know about, and the <a href="https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">official tutorial</a> goes over it, but you can worry about it later.)</span>
<span class="comment-copy">This approach makes sense to me, but since <code>x</code> will always evaluate as Truthy, it returns all values in <code>variables</code>. Can you elaborate on your object-oriented approach? I'm not married to the way I'm currently doing it and am always willing to try new methods.</span>
<span class="comment-copy">This approach also makes sense to me, but it is returning <code>None</code> for all values. Any idea why?</span>
<span class="comment-copy">The results of ny_nexus in the above code are actually useless. The useful results are only in output. In fact, you could change the name of ny_nexus to tmp or something and disregard it. The above code would be required in addition to your following statement:  ny_nexus = [True if sum(x) &gt; 0 else False for x in zip(narrative, subject, activity, filer)]</span>
<span class="comment-copy">Updated answer to reflect</span>
