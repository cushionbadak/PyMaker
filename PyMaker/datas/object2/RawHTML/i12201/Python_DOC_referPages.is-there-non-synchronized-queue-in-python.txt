<div class="post-text" itemprop="text">
<p>I am practicing doing programming competitions using python(actually pypy3). For a problem I need to use a queue - I only need to put at one end and pop from the other. From what I found in the documentation it seems I have two options <code>queue.Queue</code> and <code>queue.deque</code>. I first tried the problem using queue.Queue, but my solution exceeded the time limit. Then I switched to <code>queue.deque</code> and I passed the problem(though close to the limit).</p>
<p>From the documentation it seems both containers are thread safe(well at least for some operations for deque) while for my situation I will never use more than one thread. Is there a simple non-synchronized queue built-in in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow"><code>deque</code></a> certainly does not do synchronization; the documentation just states that the appends and pops are guaranteed to be thread-safe due to them being atomic. In CPython in particular there is no locking besides the Global Interpreter Lock. If you need a <strong>d</strong>ouble-<strong>e</strong>nded <strong>que</strong>ue, or say FIFO, that is what you should use. If you need a LIFO stack, use a list. Internally the <code>deque</code> implementation uses a <a href="https://github.com/python/cpython/blob/e881d7781495e37da1db726daa6273af6afeff06/Modules/_collectionsmodule.c#L24" rel="nofollow">doubly-linked list of fixed-length blocks</a>.</p>
<p>The <a href="https://github.com/python/cpython/blob/master/Lib/queue.py#L21" rel="nofollow"><code>queue.Queue</code></a> uses a <a href="https://github.com/python/cpython/blob/master/Lib/queue.py#L199" rel="nofollow"><code>deque</code></a> internally; in addition, it uses a mutex to guard those remaining operations that are not implemented atomically by <code>deque</code>.</p>
<p>Thus your problem is not the choice of <code>deque</code>, but quite probably some other aspect of your algorithm.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use two ordinary lists (as stacks) to simulate a queue.</p>
<pre><code>class Queue:
    def __init__(self):
        self.l1 = []   # Add new items here
        self.l2 = []   # Remove items here

    # O(1) time - simple stack push
    def enqueue(self, x):
        self.l1.append(x)

    # O(1) when l2 is not empty
    # O(k) if l2 is empty, but k is bounded by the number
    # of preceding calls to enqueue. Abusing the notation a bit,
    # you can think of the average for each call in a series to be
    # (k*O(1) + O(k))/k = O(1)
    def dequeue():
        if not self.l2:
            self.l2 = self.l1[::-1] #  Copy and reverse
            self.l1 = []
        return self.l2.pop()
</code></pre>
</div>
<span class="comment-copy">Have you tried <a href="https://docs.python.org/3/library/collections.html#deque-objects" rel="nofollow noreferrer"><code>collections.deque</code></a>?</span>
<span class="comment-copy">@PM2Ring it seems this container is also synchronized: <code>Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.</code></span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/717148/queue-queue-vs-collections-deque" title="queue queue vs collections deque">stackoverflow.com/questions/717148/â€¦</a></span>
<span class="comment-copy">@PM2Ring I see so the operations do not require locking. So it seems this structure may do the trick. The question you link to does not compare colllection.deque to queue.deque. How do they compare? What is the difference?</span>
<span class="comment-copy"><code>queue.Queue</code> (aka <code>Queue.Queue</code> in Python 2) uses a <code>collections.deque</code> internally; if you don't need the special features of <code>queue.Queue</code> you should be using a plain <code>collections.deque</code>.</span>
<span class="comment-copy">There is no reason to use this when <code>collections.deque</code> exists; (also, this is an example of a deque that is not thread-safe)</span>
<span class="comment-copy">The question explicitly states that thread-safety is not an issue. This is just to point out that implementing a queue is fairly trivial.</span>
