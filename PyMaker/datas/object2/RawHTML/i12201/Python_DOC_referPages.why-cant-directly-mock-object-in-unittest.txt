<div class="post-text" itemprop="text">
<p>I'm new to python mocking.
I know we can use mock.patch to mock f1 for f2 testing. Like this:</p>
<pre><code>def f1(x):
    return x

def f2(x):
    return f1(x) + 5

class ExampleTest(unittest.TestCase):

    @mock.patch('__main__.f1')
    def test_f2(self, mock_f1):
        mock_f1.return_value = 0
        self.assertEqual(f2(5), 5)
</code></pre>
<p>But I found if I directly mock f1 in test case like below, it doesn't work. I have no idea why can't just directly mock "f1" at here?</p>
<pre><code>class ExampleTest(unittest.TestCase):

    def test_f2(self):
        f1 = mock.Mock()
        f1.return_value = 0
        self.assertEqual(f2(5), 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow"><code>patch</code></a> and <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="nofollow"><code>Mock</code></a> are in the same package they have a different duties: </p>
<ol>
<li>By <code>mock.Mock()</code> you are creating a mock object <code>f1</code> (local variable) </li>
<li>By <code>patch('__main__.f1')</code> you are patching <code>f1</code> reference in <code>__main__</code> module (the one you are running)</li>
</ol>
<p><code>patch</code> default behavior is to use mocks to replace the original reference, but you can use it also for installing stubs or fakes: the main duty is <strong>to control the context where you replace the reference</strong>.</p>
<p>Just a tip: take a look to <a href="https://docs.python.org/3/library/unittest.mock.html#id5" rel="nofollow">where to patch</a> ... it can enlightening you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure why you think that would work. All you're doing is defining a new local variable called <code>f1</code> which happens to be an instance of Mock; just as if you'd defined <code>f1 = "foo"</code> it doesn't affect the module-level name at all.</p>
</div>
<span class="comment-copy">Thanks for your explanation!</span>
<span class="comment-copy">Hi, Daniel. I used mock for f1 in interpreter, it indeed affect f2. So I though it also work for unittest... Does it mean they are in different namespace?</span>
<span class="comment-copy">No, they're in different scopes. This has nothing to do with either Mock or unittest. If you define something inside a function, it doesn't affect anything by that name outside the function (unless you used global, which you shouldn't).</span>
<span class="comment-copy">Thanks. I indeed use "global"</span>
