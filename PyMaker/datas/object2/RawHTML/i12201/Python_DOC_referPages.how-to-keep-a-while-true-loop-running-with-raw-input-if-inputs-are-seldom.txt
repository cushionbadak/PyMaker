<div class="post-text" itemprop="text">
<p>I'm currently working on a project where I need to send data via Serial persistently but need to occasionally change that data based in new inputs.  My issue is that my current loop only functions exactly when a new input is offered by raw_input().  Nothing runs again until another raw_input() is received.</p>
<p>My current (very slimmed down) loop looks like this:</p>
<pre><code>while True:
    foo = raw_input()
    print(foo)
</code></pre>
<p>I would like for the latest values to be printed (or passed to another function) constantly regardless of how often changes occur.</p>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>How will you type in your data at the same time while data is being printed?</p>
<p>However, you can use multithreading if you make sure your source of data doesn't interfere with your output of data.</p>
<pre><code>import thread

def give_output():
    while True:
        pass  # output stuff here

def get_input():
    while True:
        pass  # get input here

thread.start_new_thread(give_output, ())
thread.start_new_thread(get_input, ())
</code></pre>
<p>Your source of data could be another program. You could connect them using a file or a socket.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/select.html" rel="nofollow"><code>select</code></a> (or in Python 3.4+, <a href="https://docs.python.org/3/library/selectors.html" rel="nofollow"><code>selectors</code></a>) module can allow you to solve this without threading, while still performing periodic updates.</p>
<p>Basically, you just write the normal loop but use <code>select</code> to determine if new input is available, and if so, grab it:</p>
<pre><code>import select

while True:
    # Polls for availability of data on stdin without blocking
    if select.select((sys.stdin,), (), (), 0)[0]:
        foo = raw_input()
    print(foo)
</code></pre>
<p>As written, this would <code>print</code> far more than you probably want; you could either <code>time.sleep</code> after each <code>print</code>, or change the timeout argument to <code>select.select</code> to something other than 0; if you make it 1 for instance, then you'll update immediately when new data is available, otherwise, you'll wait a second before giving up and printing the old data again.</p>
</div>
<span class="comment-copy">Why import threading if you then don't define any threads in your code example?</span>
<span class="comment-copy">Hope that helps</span>
<span class="comment-copy">Yeah sorry. I fixed it</span>
<span class="comment-copy">I suppose it works but you were on a better track with <code>threading</code> than with the much lower level <code>thread</code>.</span>
<span class="comment-copy">My source of data is actually jstest, a joystick driver for Ubuntu which I'm pipe-lining into the python script. It only provides usable outputs when something on the joystick changes.  So your example might work exactly the way I need it to.  One thread listens for changes and updates variables whenever it gets new ones from jstest while the other thread just screams the variables to my serial connection out so my Arduino can act on the serial connection data.</span>
