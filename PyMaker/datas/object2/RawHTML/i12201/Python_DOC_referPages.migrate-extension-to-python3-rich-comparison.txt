<div class="post-text" itemprop="text">
<p>I'm trying to migrate a project to Python 3.4 and I'm having trouble understanding and implementing the Python3 rich comparison feature. The project implements a Python extension of a C library </p>
<p>I'm new to Python and it’s been about 15 years since I’ve done any C</p>
<p>I didn't write the original project and it is abandoned. It only had one commit in 2012 and it's based on another Author's work from 2006. However, the project does exactly what I want so I'm keen to revive and update it.</p>
<p>I've been able update the code to build without errors to Python 2.7 and get it running and passing the tests. I've also created a Python 3.4 branch that will now build without errors. This was done by basically looking up each error and warning thrown by the compiler and implementing the recommended fix. </p>
<p>However, when I import the library with Python 3.4 after compiling it like:</p>
<pre><code>python3 setup.py install
</code></pre>
<p>I get the following error:</p>
<pre><code>&gt;&gt;&gt; import _suffix_tree
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Type _suffix_tree.SuffixTreeNode defines tp_reserved
(formerly tp_compare) but not tp_richcompare. Comparisons may not behave as intended.
</code></pre>
<p>Looking at the extension there is indeed no tp_richcompare implemenation so I've tried to add it.
I've tried implementing several solutions I've found online but none have worked and I don't know enough about the problem to fix it without help. I've tried implementing the required rich comparison functionality without an success. An example of an attempt I've tried is:</p>
<pre><code>static PyObject* Node_richcmp(NodeObject *n1, NodeObject *n2, int op);

static PyObject* Node_richcmp(NodeObject    *n1, NodeObject *n2, int op)
{
    return (int)(n1-&gt;node - n2-&gt;node);
}

Node_richcmp,                          /* tp_richcompare */
</code></pre>
<p>However I get errors like:</p>
<pre><code>python_bindings.c:218:2: warning: initialization from incompatible pointer type [enabled by default]
  Node_richcmp,         /* tp_richcompare */
  ^
python_bindings.c:218:2: warning: (near initialization for 'NodeType.tp_richcompare') [enabled by default]
python_bindings.c: In function 'Node_richcmp':
python_bindings.c:418:5: warning: return makes pointer from integer without a cast [enabled by default]
     return (int)(n1-&gt;node - n2-&gt;node);
     ^
</code></pre>
<p>Now I'm guessing based on the error and some searching that I'm messing up an assignment of a value VS an address, but I'm not sure  if this is correct or how to go about fixing it.</p>
<p>Can anyone help me implement the required rich comparison method? </p>
<p>I've tried resources like: <a href="http://py3c.readthedocs.org/" rel="nofollow">http://py3c.readthedocs.org/</a> but I'm just not getting it.</p>
<p>The full code for the project can be found here: <a href="https://github.com/mattporritt/suffix-tree-unicode" rel="nofollow">https://github.com/mattporritt/suffix-tree-unicode</a> on the python_34 branch</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't just copy the previous implementation of <code>tp_compare</code>. <code>tp_richcompare</code> has a <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_richcompare" rel="nofollow">considerably different contract</a>. It (usually) returns <code>Py_True</code> or <code>Py_False</code> rather than <code>-1</code>, <code>0</code> or <code>1</code> and its return value should depend on the comparison that was requested (<code>op</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>In the end I went with ctypes for my solution: <a href="https://docs.python.org/3.4/library/ctypes.html" rel="nofollow">https://docs.python.org/3.4/library/ctypes.html</a>
I compiled the library as a shared object (.so) and was able to get a basic Python interface up in about 15 mins. All I needed was as an API interface to the c library, so ctypes was exactly what I needed and was easier than CFFI or the original method I was using.</p>
</div>
<span class="comment-copy">You are returning an int, but you want a python object. Using <code>PyLong_FromLong</code> may do it.</span>
<span class="comment-copy">You're correct, I  can see that tp_compare: " should return 1 if self greater than other, 0 if self is equal to other, and -1 if self less than other" and tp_richcompare:"should return the result of the comparison (usually Py_True or Py_False). If the comparison is undefined, it must return Py_NotImplemented, if another error occurred it must return NULL and set an exception condition."  So there is work to be done there, however even cooking it to return False doesn't fix:     python_bindings.c:218:2: warning: initialization from incompatible pointer type Any ideas what I'm doing wrong here?</span>
<span class="comment-copy">Even though you're guaranteed that the first parameter is "an instance of the type that is defined by PyTypeObject", the signature of your function has to be <code>PyObject *tp_richcompare(PyObject *a, PyObject *b, int op)</code>. <code>PyObject* Node_richcmp(NodeObject    *n1, NodeObject *n2, int op)</code> is more restrictive on the input arguments and thus incompatible.</span>
<span class="comment-copy">Thanks for your patience on this, but I have a feeling I'm out of my depth here.  I'm unable to get it working. I still think the comparison is the root of my issues and I'm now getting the following in Python: SystemError: error return without exception set. Which I'm guessing means exactly what it says for my comparison method.</span>
<span class="comment-copy">If you want to give up porting the old Python-C-bindings of <code>suffix-tree-unicode</code>, you can try to instead use that C library from Python through <a href="http://cffi.readthedocs.org/" rel="nofollow noreferrer">CFFI</a>. I haven't used it myself yet, but <a href="http://www.python-summit.ch/pages/program.html" rel="nofollow noreferrer">I've heard</a> it's much easier to use than directly writing glue code for the Python C API.</span>
