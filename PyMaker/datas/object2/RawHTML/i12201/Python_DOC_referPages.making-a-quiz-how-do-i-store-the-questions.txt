<div class="post-text" itemprop="text">
<p>I'm trying to make a quiz game with multiple choice (4 choices).  So far I've made a simple quiz containing just one question.  I cannot wrap my head around a good way to index the questions.  </p>
<p>The plan is to expand my quiz with at least 500 questions, and randomly pick a question from the question pool.  How should I structure it?</p>
<p>This is what I've got so far in my one-question game:</p>
<pre><code>def welcome():  #Introduction
    print "Welcome to the quiz!"
    print " "
    print " "


def question():  # Question function
    quest = { 'id' : 0, 'question' : "What is the capital of Belgium?" , 'a' : "Vienna" , 'b' : "Berlin" , 'c' : "Brussels" , 'd' : "Prague" , 'answer' : 'c'}
    print quest['question']
    print " "
    print "A:", quest['a'], 
    print "B:", quest['b'],
    print "C:", quest['c'],
    print "D:", quest['d']

    guess=raw_input("Your guess: ")
    if guess == quest['answer']:
        print " "
        print "Correct!!!"
    else:
        print " "
        print "Sorry, that was just plain wrong!"



welcome()
question()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a list-of-dictionaries that will house all this data. So you can do something like this: </p>
<pre><code>quiz_data = [
    {
        "question": "What year is it",
        "choices": {"a": "2009", "b": "2016", "c": "2010"},
        "answer": "b"
    },
    {
        "question": "Another Question",
        "choices": {"a": "choice 1", "b": "choice 2", "c": "choice 3"},
        "answer": "a"
    }
]
</code></pre>
<p>Then use <code>random.choice</code> to select a random index of your data structure. </p>
<pre><code>import random

q = random.choice(quiz_data)

print(q.get('question'))
answer = input(q.get('choices')).lower()

if answer == q.get('answer'):
    print("You got it")
else:
    print("Wrong")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Store it as a <a href="http://json.org/" rel="nofollow">JSON</a> array</p>
<pre><code>[{
    "id": 0,
    "question": "What is the capital of Belgium?",
    "a": "Vienna",
    "b": "Berlin",
    "c": "Brussels",
    "d": "Prague",
    "answer": "c"
}]
</code></pre>
<p>and load it using <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow"><code>json.load</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should create a txt file and put the questions in to that file. After then you could read that file's lines and pick a line randomly(line is the question in here) with <code>random.choice()</code> method.</p>
<p>Basically, you will write your questions in a txt file. Then read the lines and print a line(question) with <code>random.choice()</code>. </p>
<p>Make another txt file for answers, check that file when user answered a question.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would (<strong>based on your code</strong>):</p>
<ol>
<li>Use a list of questions. That list would be the pool of questions.</li>
<li>I would also discard the <code>id</code> attribute you had, I do not see the
reason of using it now.</li>
<li>I would choose a random number in the range of 0 to the length of
the list - 1, so that I can <em>index</em> the question pool for a question to ask the user.</li>
<li>Finally, I would take the answer of the user, convert it in
lowercase and then check if the answer is correct.</li>
</ol>
<p>Here is the code:</p>
<pre><code>#!/usr/bin/python

from random import randint

def welcome():  #Introduction
    print "Welcome to the quiz!"
    print " "
    print " "


def question():  # Question function
    question_pool = []
    question_pool.append({'question' : "What is the capital of Belgium?" , 'a' : "Vienna" , 'b' : "Berlin" , 'c' : "Brussels" , 'd' : "Prague" , 'answer' : 'c'})
    question_pool.append({'question' : "Does Stackoverflow help?" , 'a' : "Yes" , 'b' : "A lot" , 'c' : "Of course" , 'd' : "Hell yeah" , 'answer' : 'd'})
    random_idx = randint(0, len(question_pool) - 1)
    print question_pool[random_idx]['question']
    print " "
    print "A:", question_pool[random_idx]['a'], 
    print "B:", question_pool[random_idx]['b'],
    print "C:", question_pool[random_idx]['c'],
    print "D:", question_pool[random_idx]['d']

    guess=raw_input("Your guess: ")
    guess = guess.lower()
    if guess == question_pool[random_idx]['answer']:
        print " "
        print "Correct!!!"
    else:
        print " "
        print "Sorry, that was just plain wrong!"



welcome()
question()
</code></pre>
<p>A next step for you, would be to validate the input, for example to check that the user typed a letter, A, B, C or D.</p>
<p>Questions that helped:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/3996904/generate-random-integers-between-0-and-9">Generate random integers between 0 and 9</a></li>
<li><a href="https://stackoverflow.com/questions/6797984/how-to-convert-string-to-lowercase-in-python">How to convert string to lowercase in Python?</a></li>
</ol>
<p><sub> I am pretty sure Berlin is not the capital of Belgium :)</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>I would try importing the random function, then generating a random number between 1 and (no. of questions). Say you have 10 questions, you can type it like this;</p>
<pre><code>import random
(Number) = (random.randint(1,10))
</code></pre>
<p>then, you add all the questions one by one, each under if statements as shown;</p>
<pre><code>if (Number) == (1):
    print ("What's 1 + 1?")
    (Answer) = input()
    if (Answer) == ('2'):
        print ('Correct!')
    else:
        print ('Wrong!')

elif (Number) == (2):
    print ("What's 1 + 2?")
    (Answer) = input()
    if (Answer) == ('4'):
        print ('Correct!')
    else:
        print ('Wrong!')
</code></pre>
<p>And so on.</p>
<p>If you want to make it repeat, and ask multiple questions, start the coding with;</p>
<pre><code>while (1) == (1):
</code></pre>
<p>And then you have a working quiz program. I hope someone found this helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that quiz was made overly complicated.
This code is easier too read and shorter imo.</p>
<pre><code>    point = 0  
    print("The answer have to be in all small letters")
    def question(question,rightAnswer,rightAnswer2):
        global point
        answer = input(question)
        if answer == (rightAnswer):
            point = point + 1
            print("Right")
        elif answer == (rightAnswer2):
            point = point + 1
            print("Right")
        else:
            print("Wrong")
        if point == 1:
            print("You have",point,"point")        
        else:                                   # grammar
            print("You have",point,"points")    
        return

     question("What is 1+1? ","2","2") #question(&lt;"question"&gt;,answer,otheranswer)
     question("What is the meaning of life ","42","idk")
</code></pre>
</div>
<span class="comment-copy">Your dictionary is a good start! Now make that a list of such dictionaries. You can then use <code>random.choice</code> to choose a random question.</span>
<span class="comment-copy">I am not sure how <i>this</i> answers the question. :/</span>
<span class="comment-copy">@gsamaras  It answers "How to store the questions". Reading the documentation for <code>json</code> should be enough to implement a solution that does what the question asks for.</span>
<span class="comment-copy">Yes I know Tichodroma, but I am not sure if you give enough info for a beginner, but that's my opinion.</span>
<span class="comment-copy">Thank you, this was very helpful to me!  (I am very sure that the answer i C: Brussels ;-)</span>
<span class="comment-copy">Haha OK @Newless_Cluebie, maybe I failed the quiz :/ Glad I helped, I also see other answers here, make sure you accept the best one! :)</span>
<span class="comment-copy">while there may be better answers, yours helped me get the framework I was looking for.  As a newbie, the best option isn't always what your looking for, but at least it gets me to move on.  I will review the other questions later.  Take care, and again - thanks a lot!</span>
<span class="comment-copy">The best answer @Newless_Cluebie is the one that answers your question best, i.e. the one that helps the OP the most. you too, goodnight.</span>
