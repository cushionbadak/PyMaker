<div class="post-text" itemprop="text">
<p>I am trying to patch a class that is instantiated by the class I am trying to test, but it doesn't work. I have read the various docs but still haven't found what I am doing wrong. Here is the code snippet:</p>
<p>In <code>tests/Test.py</code>:</p>
<pre><code>from module.ClassToTest import ClassToTest

class Test(object):

    @mock.patch('module.ClassToPatch.ClassToPatch', autospec = False)
    def setUp(self, my_class_mock):
        self.instance = my_class_mock.return_value
        self.instance.my_method.return_value = "def"
        self.class_to_test = ClassToTest()

    def test(self):
        val = self.class_to_test.instance.my_method() #Returns 'abc' instead of 'def'
        self.assertEqual(val, 'def')
</code></pre>
<p>In <code>module/ClassToPatch.py</code>:</p>
<pre><code>class ClassToPatch(object):
    def __init__(self):
        pass
    def my_method(self):
        return "abc"
</code></pre>
<p>In <code>module/ClassToTest.py</code>:</p>
<pre><code>from module.ClassToPatch import ClassToPatch

class ClassToTest(object):
    def __init__:
        # Still instantiates the concrete class instead of the mock
        self.instance = ClassToPatch()
</code></pre>
<p>I know in this case I could easily inject the dependency, but this is just an example. Also, we use a single class per file policy, with the file named like the class, hence the weird import naming.</p>
</div>
<div class="post-text" itemprop="text">
<p>As norbert mentions, the fix is to change the mock line from</p>
<pre><code>@mock.patch('module.ClassToPatch.ClassToPatch', autospec = False)
</code></pre>
<p>to</p>
<pre><code>@mock.patch('module.ClassToTest.ClassToPatch', autospec = False)
</code></pre>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow">According to the docs</a>:</p>
<blockquote>
<p>The patch() decorator / context manager makes it easy to mock classes or objects in a module under test. The object you specify will be replaced with a mock (or other object) during the test and restored when the test ends.</p>
</blockquote>
<p>You are testing the <code>ClassToTest</code> module, not the <code>ClassToPatch</code> module.</p>
</div>
<span class="comment-copy">Try @mock.patch('module.ClassToTest.ClassToPatch', autospec = False)</span>
<span class="comment-copy">In the future, please make your sample code an <a href="http://stackoverflow.com/help/mcve">MCVE</a>; there were several bugs in your posted code and you can't rely on someone being familiar enough with the problem to immediately spot the issue and offer a solution.</span>
<span class="comment-copy">Ok I will take note of it</span>
<span class="comment-copy">Im stuck with a somewhat similar situation. I need to patch a class instance instantiated in a different module. Is it possible?</span>
