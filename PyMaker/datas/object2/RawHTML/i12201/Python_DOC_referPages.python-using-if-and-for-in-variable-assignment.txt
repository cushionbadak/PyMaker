<div class="post-text" itemprop="text">
<p>I see this done everywhere, but I don't get how it works. I have searched everywhere online and can't find an explanation. If an answer is already here, forgive me.</p>
<p>People often use <code>if</code> and <code>for</code> when assigning variables, as in</p>
<pre><code>x = 0 if val == "yes" else 1
</code></pre>
<p>which is equivalent to</p>
<pre><code>if val == "yes":
  x = 0
else:
  x = 1
</code></pre>
<p>I have also seen people use <code>for</code> inside of lists and other things.</p>
<pre><code>alist = [x for x in range(3)]
</code></pre>
<p>How does this work? Where can I use it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Such <code>for</code> statement is intended as syntactic sugar to a greater for. These three constructions are almost equivalent:</p>
<pre><code>mylist = []
for x in range(3):
    mylist.append(x)

mylist = list(x for x in range(3))

mylist = [x for x in range(3)]
</code></pre>
<p>However the example with <code>range(3)</code> is useless without transforming <code>x</code> somehow, like:</p>
<pre><code>mylist = [x*x for x in range(3)] # will produce [0, 1, 4]
</code></pre>
<p>Please <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">see the docs</a>. The construction inside <code>list()</code> call in my example is something different. Is called <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator comprehension</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>if</code> is a you point out just a more compact way of doing an if.</p>
<p>The compact for is called a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. The documentation describes it better than I do :)</p>
<p>As per your example <code>alist = [x for x in range(3)]</code> is the equivalent of</p>
<pre><code>alist = []
for x in range(3):
    alist.append(x)
</code></pre>
<p>The list comprehension can be mixed with conditionals, as in this example where we'd get all numbers 0-9</p>
<pre><code>alist = [x for x in range(10)]
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>if we only want every second number we can use modulo for each loop:</p>
<pre><code>alist = [x for x in range(10) if x % 2]
# [1, 3, 5, 7, 9]
</code></pre>
<p>which would be equal to</p>
<pre><code>alist = []
for x in range(10):
    if x % 2:
        alist.append(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>alist = [x for x in range(3)]
</code></pre>
<p>What you are looking at is list comprehension, which consists of the following:</p>
<ol>
<li>An Input Sequence.</li>
<li>A Variable representing members of the input sequence.</li>
<li>An Optional Predicate expression.</li>
<li>An Output Expression producing elements of the output list from members of the Input Sequence that satisfy the predicate.</li>
</ol>
<p><a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Comprehensions.html" rel="nofollow">More on this</a></p>
<p>So you can do things like this:</p>
<pre><code>a_list = [1, ‘4’, 9, ‘a’, 0, 4]

ints = [ i for i in a_list if type(e) == types.IntType ]
# print ints
# [ 1, 9, 0, 4 ]
</code></pre>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">Python documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>They're called <em>list comprehensions</em>.  Python has examples in their <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">documentation</a>.</p>
</div>
<span class="comment-copy">Please, to the person who voted to close: clarify why this question is TOO BROAD. It seems to be concrete. Perhaps lacking of research, but there's just ONE possible answer to what he is asking. Please review the VtC and, if you consider, downvote. But the VtC is grossly misplaced.</span>
<span class="comment-copy">it is hard to believe that by searching everywhere you don't find what the inline <code>for</code> means. It is a Python basics. Please have a long read to the <a href="https://docs.python.org/2/tutorial/" rel="nofollow noreferrer">docs</a>. You have 3 downvoters and, counting with me, 4 upvoters right now. Please read the docs.</span>
