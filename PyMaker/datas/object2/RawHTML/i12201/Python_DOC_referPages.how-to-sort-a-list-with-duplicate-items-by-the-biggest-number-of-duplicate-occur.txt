<div class="post-text" itemprop="text">
<p>I have a </p>
<pre><code>list1 = ["one", "two", "two", "three", "four" , "five", "five", "five", "six"]
</code></pre>
<p>and the Output should be </p>
<pre><code>list2 = ["five" , "two", "one", "three" , "six"]
</code></pre>
<ul>
<li><code>"five"</code> is the first element because in list1 has the highest number of occurrences (3)</li>
<li><code>"two</code>" is the second element because in list1 has the next highest number of occurrences (2)</li>
<li><code>"one"</code>, <code>"three</code>" and <code>"six"</code> have the same lower number of occurrences (1) so they are the last in my <code>list2</code> - It doesn't really matter what position they will be as long as they are after "five" and "two". On short, <code>list2 = ["five" , "two", "six", "three" , "one"]</code> or <code>list2 = ["five" , "two", "three", "one" , "six"]</code> or any other variations are accepted.</li>
</ul>
<p>I could solve this by creating a dictionary to store the number of occurances and then create a new list with my items ordered by the dict</p>
<pre><code>my_dict = {i:list1.count(i) for i in list1}
</code></pre>
<p>but I need something cleaner</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a list comprehension and <a href="https://docs.python.org/3/library/collections.html#counter-objects" rel="nofollow"><code>Counter</code></a>:</p>
<pre><code>from collections import Counter
print([element for element,count in Counter(list1).most_common()])
</code></pre>
<p>Outputs:</p>
<pre><code>['five', 'two', 'three', 'six', 'four', 'one']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby()</code></a> to get a list sorted by the number of occurrences:</p>
<pre><code>from itertools import groupby
from operator import itemgetter

grouped = [(uniq, len(list(dups)))
           for uniq, dups in groupby(sorted(list1))]  # group &amp; count
grouped.sort(key=itemgetter(1), reverse=True)  # sort by occurrence
list2 = list(map(itemgetter(0), grouped))
</code></pre>
<p>If duplicates are already grouped in <code>list1</code> (like in your question) then you can drop the <code>sorted()</code> call. <code>groupby()</code> may be more efficient (memory/time -wise) than <code>collections.Counter()</code> -- measure it if it is important in your case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a counter collection That is its specific purpose</p>
<p><a href="https://docs.python.org/2/library/collections.html" rel="nofollow">https://docs.python.org/2/library/collections.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a= ["one", "two", "two", "three", "four" , "five", "five", "five", "six"]
dic={}
for name in a:
    if name in dic:
        dic[name]=dic[name]+1
    else:
        dic[name]=1

keyList=[]
valueList=dic.values()
valueList.sort()
valueList.reverse()

def get_Value(dic,value):
    for name in dic:
        if dic[name] == value:
            del dic[name]
            return name


for num in valueList:
    keyList.append(get_Value(dic,num))  

print keyList
</code></pre>
</div>
<span class="comment-copy">That's exactly what I needed. @donkey-kong Thank you!</span>
