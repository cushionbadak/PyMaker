<div class="post-text" itemprop="text">
<p>I have a function I'm writing that divides two numbers. I'm to add error messages if the user attempts 0/0 or x/0 where x is any number. Entering nonzero input yields the correct answer, but if the denominator is 0, the function prints the correct statement, followed by NONE.</p>
<p>Any explanations? Here's my code:</p>
<pre><code>def divide():
    num1, num2 = prompt()
    if num1 == 0 and num2 == 0:
        print "Dividing zero by zero is undefined."
    elif num1 != 0 and num2 == 0:
        print "Cannot divide by zero."
    else:
        return float(num1) / num2
</code></pre>
<p>I've seen people have this issue when printing variables, and using return solved their issue, but here I am printing a string so I don't want to use return, right?</p>
</div>
<div class="post-text" itemprop="text">
<p>Functions in Python return <code>None</code> if there is no return statement and you only return in the <code>else</code> branch of your program.</p>
<p>Consider throwing an exception instead of using <code>print</code>. You can find more information here, including an example of division by zero: <a href="https://docs.python.org/2/tutorial/errors.html" rel="nofollow">https://docs.python.org/2/tutorial/errors.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I just want to give you a short overview about how to improve your code by using Python's built-in exceptions.</p>
<p>There are several built-in exceptions which will be raised automatically when doing faulty operations. So there is  <a href="https://docs.python.org/3/library/exceptions.html#ZeroDivisionError" rel="nofollow"><code>ZeroDivisionError</code></a> which is raised when dividing by zero. You can catch any of these exceptions by using <a href="https://docs.python.org/3.5/tutorial/errors.html#handling-exceptions" rel="nofollow"><code>try-except</code>-blocks</a>.</p>
<p>I am using those built-in exceptions in order to tell the user if his input was invalid or if he decided to divide by zero.</p>
<p>For doing this I rewrote your code as shown below:</p>
<pre><code>def prompt():
    num1 = input('Please input a number: ')
    try:
        num1 = float(num1)
    except Exception as e:
        print('Your input is invalid. Starting at first input again.')
        return prompt()

    num2 = input('Please input another number: ')
    try:
        num2 = float(num2)
    except Exception as e:
        print('Your input is invalid. Starting at first input again.')
        return prompt()

    return num1, num2 


def divide():
    num1, num2 = prompt()
    result = None
    msg = None
    try:
        result = num1 / num2
    except ZeroDivisionError as e:
        msg = str(e)
        result = None
    return msg, result

msg, result = divide()

if result:
    print('The result of you calculation is: {}'.format(result))
else:
    print('The following error occured: {}'.format(msg))
</code></pre>
<p>You can still do some further improvements or shorten my code, for sure. However, I decided to keep this code in this state since I do not want to confuse you too much at this point.</p>
</div>
<span class="comment-copy">Well, you only return in the else clause, so what would you expect to happen in the other clauses? Python functions always return something, and it's <code>None</code> if nothing explicit is returned.</span>
<span class="comment-copy">Say I attempt 1 / 0. It will display Cannot divide by zero. followed by NONE on the next line.</span>
<span class="comment-copy">Sounds like you're printing the return result of the function.  If the function returns None, then that's what's gonna print.  If you don't want this to happen, then save the result in a variable and compare it to None before deciding whether to print it.</span>
<span class="comment-copy">You could just return the strings and always print the result of this function, or go with @JohnGordon's suggestion. Both work fine.</span>
<span class="comment-copy">Your exception handling in <code>prompt()</code> is broken.  Instead of just recursively calling the function again, you need to <i>return</i> the result of the function, i.e. <code>return prompt()</code>.  Otherwise, you end up executing the rest of the function body after the recursive call exits.</span>
<span class="comment-copy">@JohnGordon: Thanks. Just fixed it. Sorry for that.</span>
