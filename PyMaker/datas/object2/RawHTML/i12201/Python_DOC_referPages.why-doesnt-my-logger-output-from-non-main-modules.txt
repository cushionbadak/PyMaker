<div class="post-text" itemprop="text">
<p>I have the following file structure:</p>
<pre><code>config.yaml
main.py
tools/
 misc_utils.py
 extractor.py
</code></pre>
<p><code>misc_utils.py</code> contains the following function to retrieve my logger:</p>
<pre><code>import logging
import logging.config

def get_logger(module_name, config=None):
    if config is not None:
        logging.config.dictConfig(config)
    return logging.getLogger(module_name)
</code></pre>
<p>In <code>main.py</code>, I call that function:</p>
<pre><code>from tools.misc_utils import get_logger
import tools.extractor
with open('config.yaml') as f:
    config = yaml.load(f)
logger = get_logger(__name__, config=config)
logger.info("this outputs ok")
</code></pre>
<p>If I call <code>extractor.py</code> from <code>main.py</code>, as the import line in <code>main.py</code> does, it doesn't output anything for some reason:</p>
<pre><code>from .misc_utils import get_logger

logger = get_logger(__name__, 'config.yaml')
logger.info("this doesn't appear in the log")
</code></pre>
<p>And finally here is <code>config.yaml</code>:</p>
<pre><code># Logging
version: 1
formatters:
    default:
        format: '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
handlers:
    console:
        class: logging.StreamHandler
        stream: ext://sys.stdout
        formatter: default
        level: DEBUG
    file:
        class: logging.FileHandler
        filename: main.log
        formatter: default
        level: DEBUG
root:
    handlers: [console, file]
    level: DEBUG
</code></pre>
<p>My question is, why is nothing outputted in extractor.py?</p>
</div>
<div class="post-text" itemprop="text">
<p>With extractor.py containing this code:</p>
<pre><code>import yaml
from .misc_utils import get_logger

with open('config.yaml') as f:
    config = yaml.load(f)

logger = get_logger(__name__, config=config)
logger.info("this doesn't appear in the log")
logger.info("this doesn't appear in the log")
</code></pre>
<p>and main.py looking like this:</p>
<pre><code>import yaml
from tools.misc_utils import get_logger

from tools import extractor

with open('config.yaml') as f:
    config = yaml.load(f)
logger = get_logger(__name__, config=config)
logger.info("this outputs ok")
</code></pre>
<p>it works for me. Here's the output:</p>
<pre><code>$ python3 main.py
2016-02-24 23:10:51,314 tools.extractor INFO     this doesn't appear in the log
2016-02-24 23:10:51,320 __main__     INFO     this outputs ok
</code></pre>
<p><strong>Alternatively</strong>, if you just want to use an existing logger in
extractor.py, i.e:</p>
<pre><code>from .misc_utils import get_logger

logger = get_logger(__name__)
logger.info("this doesn't appear in the log")
</code></pre>
<p>Then it is important that the logger was initialized before the
import. With this in main.py:</p>
<pre><code>import yaml
from tools.misc_utils import get_logger

with open('config.yaml') as f:
    config = yaml.load(f)
logger = get_logger(__name__, config=config)
logger.info("this outputs ok")

from tools import extractor
</code></pre>
<p>I get:</p>
<pre><code>python3 main.py
2016-02-24 23:59:18,350 __main__     INFO     this outputs ok
2016-02-24 23:59:18,350 tools.extractor INFO     this doesn't appear in the log
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I finally figured out what the problem was. Since <code>import tools.extractor</code> is called <em>before</em> <code>get_logger(__name__, config=config)</code>, the logger in <code>extractor.py</code> is disabled. This is mentioned under the description for the <code>disable_existing_loggers</code> argument for <a href="https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig" rel="nofollow"><code>dictConfig</code></a>, which is set to <code>True</code> by default. Setting it to <code>False</code> solves the problem.</p>
</div>
<span class="comment-copy">I call extractor from within main.py. That's when it fails. Sorry about the ambiguity.</span>
<span class="comment-copy">Okay, I edited the answer. Now extractor is imported from main.py. Does this solve your problem?</span>
<span class="comment-copy">It wasn't quite right, but you made me realize what the actual problem was. It had to do with the <code>extractor.logger</code> was initialized before I had provided the configuration. See my answer. Thanks for your help!</span>
