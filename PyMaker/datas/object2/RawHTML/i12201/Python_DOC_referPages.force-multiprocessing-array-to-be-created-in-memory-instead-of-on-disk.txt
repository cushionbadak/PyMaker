<div class="post-text" itemprop="text">
<p>I am using Python 3.4 on Linux. I want to create an array in RAM that will be shared by processes spawned by the <code>multiprocessing</code> module (i.e. shared memory). According to the documentation, this should be possible by using <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Array" rel="nofollow"><code>multiprocessing.Array</code></a>. When I use</p>
<pre><code>array = multiprocessing.Array('i', N)
</code></pre>
<p>Python creates a file in <code>/tmp</code>, zeroes it, and uses it through <code>mmap.mmap()</code> as shared memory (I have verified this by looking into <code>/usr/lib/python3.4/multiprocessing/heap.py</code>). However, I would like the array to be created truly in memory, not on disk. The reason is that in my use case, <code>N</code> is very large (more than 100 GB), I have a lot of RAM but low disk capacity. The creation of <code>multiprocessing.Array()</code> thus ends with <code>IOError: No space left on device</code> because it uses a file on disk for the shared memory rather than RAM.</p>
<p>I was able to get around this by mounting a directory via <code>tmpfs</code> and setting <code>tempfile.tempdir</code> to point to this directory. However, is there an easier way? Why is Python creating shared memory in this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is No. For the long answer, read this:</p>
<p><a href="https://stackoverflow.com/questions/1268252/python-possible-to-share-in-memory-data-between-2-separate-processes?lq=1">enter link description here</a></p>
<p>You can always use os.fork() to pass a copy of the parent's memory to the child but can't actually share the address space.</p>
</div>
