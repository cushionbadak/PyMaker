<div class="post-text" itemprop="text">
<p>Here's what I'm trying to achieve: there's a long running process, i.e. rabbitmq consumer. When it receives a specific message, it should start a parallel process that does something (whatever... print, sleep for a minute...) and finishes. In the meantime, the main process still consumes messages.</p>
<p>This scenario could be simplified to this example:</p>
<pre><code>import time

@this_should_run_in_parallel
def background_foo():
    for _ in range(3):
        print('zxc')
        time.sleep(1)

for k in range(10):
    print('abc')
    if k == 5:
        background_foo()
    time.sleep(1)

# for loop is printing abc
# but once k == 5 the parallel function also start printing
# for loop goes on
# desired output

abc
abc
abc
abc
abc
zxc
abc
zxc
abc
zxc
abc
abc
abc
</code></pre>
<p>Is this something asyncio should be used for, or should I stick to multiprocessing/threading modules?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a> can deal with that, but you have to pick the right tool depending on the nature of the task:</p>
<p><a href="https://i.stack.imgur.com/GRdCM.png" rel="nofollow noreferrer"><img alt="Asyncio flow chart" src="https://i.stack.imgur.com/GRdCM.png"/></a></p>
<p>Links:</p>
<ul>
<li><a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asycio standard library</a></li>
<li><a href="https://github.com/aio-libs" rel="nofollow noreferrer">aio-lib</a>, <a href="https://github.com/python/asyncio/wiki/ThirdParty" rel="nofollow noreferrer">third-party</a></li>
<li><a href="https://docs.python.org/dev/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">ProcessPoolExecutor</a> (+ <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="nofollow noreferrer">run_in_executor</a>)</li>
<li><a href="https://docs.python.org/dev/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow noreferrer">ThreadPoolExecutor</a> (+ <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="nofollow noreferrer">run_in_executor</a>)</li>
</ul>
</div>
<span class="comment-copy">What is problem with <code>threading</code>?</span>
<span class="comment-copy">If you want it running concurrently then threading or asyncio is what you want, given your style of choice. If you want it running in <i>parallel</i> then look at multiprocessing</span>
<span class="comment-copy">As Will said, threads will give you concurrently but only mutliprocessing will give you parallel</span>
