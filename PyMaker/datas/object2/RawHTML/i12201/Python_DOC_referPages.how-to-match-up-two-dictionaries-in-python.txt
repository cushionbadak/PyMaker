<div class="post-text" itemprop="text">
<pre><code>{u'Orange': [u'OR', u'LI', u'LE'], u'Red': [u'AP', u'ST']}
{u'Orange': [u'ORANGE', u'LIME', u'LEMON'], u'Red': [u'APPLE', u'STRAWBERRY']}
</code></pre>
<p>Beginning in Python and I am having some difficulties with dictionaries. I  have these two dictionaries here.</p>
<p>The output I want is:</p>
<pre><code>Orange: 

Category: Orange
OR - ORANGE
LI - LIME
LE - LEMON

Category: Red
AP - APPLE
ST - STRAWBERRY
</code></pre>
<p>Unsure how I would match up the two dictionaries. I could always put them into one dictionary and access every other value but I would like to keep them as two dictionaries. There will never be an instance where a two letter code does not have an associated value. The order is always set as well.</p>
<p>An idea I had is to create a third dictionary out of the two, but even then I'm unsure where to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>All you have to do is to iterate over available keys, and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> lists retrieved from both dictionaries to iterate over pairs simultaneously.</p>
<p>Basic implementation may look like this:</p>
<pre><code>d1 = {u'Orange': [u'OR', u'LI', u'LE'], u'Red': [u'AP', u'ST']}
d2 = {u'Orange': [u'ORANGE', u'LIME', u'LEMON'], u'Red': [u'APPLE', u'STRAWBERRY']}

for k in d1:
    print("Category:", k)
    for abbr, val in zip(d1[k], d2[k]):
        print(abbr, "-", val)
    print()
</code></pre>
<p>This prints on standard output following text:</p>
<pre><code>Category: Orange
OR - ORANGE
LI - LIME
LE - LEMON

Category: Red
AP - APPLE
ST - STRAWBERRY
</code></pre>
<p>Obviously you'll have to handle some exceptional cases, like missing keys in dictionaries etc.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d1 = {u'Orange': [u'OR', u'LI', u'LE'], u'Red': [u'AP', u'ST']}
d2 = {u'Orange': [u'ORANGE', u'LIME', u'LEMON'], u'Red': [u'APPLE', u'STRAWBERRY']}

for k,abbrevs in d1.items():
    print("Category:", k)
    for abb, name in zip(abbrevs, d2[k]):
        print("{} - {}".format(abbrev, name))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>dict1 = {u'Orange': [u'OR', u'LI', u'LE'], u'Red': [u'AP', u'ST']}
dict2 = {u'Orange': [u'ORANGE', u'LIME', u'LEMON'], u'Red': [u'APPLE', u'STRAWBERRY']}

for color in dict1.keys():
    print("Category: %s" % color)
    print("\n".join(" - ".join((x, y)) for x, y in zip(dict1[color], dict2[color])))
    print()
</code></pre>
<p>Don't I love list-comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on what you want to do after could use a dictionary or just a generator</p>
<pre><code>d1 = {u'Orange': [u'OR', u'LI', u'LE'], u'Red': [u'AP', u'ST']}
d2 = {u'Orange': [u'ORANGE', u'LIME', u'LEMON'], u'Red': [u'APPLE', u'STRAWBERRY']}

new_dict_generator = (zip(d1[k], d2[k]) for k in d1) #Generator
new_dict = {k:zip(d1[k], d2[k]) for k in d1} #Dictionary comprehension
</code></pre>
<p>Then you can use it like</p>
<pre><code>for pairs in new_dict_generator:
    print(pair)
</code></pre>
<p>The advantage of the generator is that you don't need to have the entire dictionary in memory, but you won't be able to access it by key:</p>
<pre><code>&gt;&gt;&gt; new_dict_generator['Orange']
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
TypeError: 'generator' object has no attribute '__getitem__'

&gt;&gt;&gt; new_dict['Orange']
[(OR, ORANGE), (LI, LIME), (LE, LEMON)]
</code></pre>
<p>Edit: If at some time both lists could have different size you may want to take a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.izip_longest" rel="nofollow">itertools.izip_longest</a></p>
</div>
<span class="comment-copy">What's with the lone <code>Orange: </code> at the start?</span>
<span class="comment-copy">Are they <i>this well matched</i>? If the lists are even in the same order like this you could <code>zip</code> them, but all of this falls apart if they aren't exactly mirrored like this (lists of different sizes, not exact same keys, lists in different order, any number of other problems).</span>
<span class="comment-copy">@Bhargav Rao The lone Orange: at the start is when I print the dictionary, I assume that is the key.</span>
<span class="comment-copy">@Two-Bit AlchemistThey should always be this well matched since the dictionaries are being created by drawing values from an excel table.</span>
<span class="comment-copy">@RottenLettuce Glad you got an acceptable answer, but worth mentioning: if you're pulling that data out yourself, it's almost always better to pull it out "correctly" (in the format you want) while you're extracting it, rather than going back and trying to fix it later. If you don't have control, that's another story.</span>
