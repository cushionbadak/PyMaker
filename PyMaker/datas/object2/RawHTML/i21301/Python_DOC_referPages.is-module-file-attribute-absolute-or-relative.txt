<div class="post-text" itemprop="text">
<p>I'm having trouble understanding <code>__file__</code>. From what I understand, <code>__file__</code> returns the absolute path from which the module was loaded. </p>
<p>I'm having problem producing this: I have a <code>abc.py</code> with one statement <code>print __file__</code>, running from <code>/d/projects/</code> <code>python abc.py</code> returns <code>abc.py</code>. running from <code>/d/</code> returns <code>projects/abc.py</code>. Any reasons why?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p><code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file. The <code>__file__</code> attribute is not present for C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.</p>
</blockquote>
<p>From the <a href="http://mail.python.org/pipermail/python-dev/2010-February/097461.html" rel="noreferrer">mailing list thread</a> linked by @kindall in a comment to the question:</p>
<blockquote>
<p>I haven't tried to repro this particular example, but the reason is
  that we don't want to have to call getpwd() on every import nor do we
  want to have some kind of in-process variable to cache the current
  directory. (getpwd() is relatively slow and can sometimes fail
  outright, and trying to cache it has a certain risk of being wrong.)</p>
<p>What we do instead, is code in site.py that walks over the elements of
  sys.path and turns them into absolute paths. However this code runs
  before '' is inserted in the front of sys.path, so that the initial
  value of sys.path is ''.</p>
</blockquote>
<p>For the rest of this, consider <code>sys.path</code> not to include <code>''</code>.</p>
<p>So, if you are outside the part of <code>sys.path</code> that contains the module, you'll get an <strong>absolute path</strong>. If you are inside the part of <code>sys.path</code> that contains the module, you'll get a <strong>relative path</strong>.</p>
<p>If you load a module in the current directory, and the current directory <strong>isn't</strong> in <code>sys.path</code>, you'll get an absolute path.</p>
<p>If you load a module in the current directory, and the current directory <strong>is</strong> in <code>sys.path</code>, you'll get a relative path.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__file__</code> is absolute <a href="https://docs.python.org/3.4/whatsnew/3.4.html#other-language-changes" rel="noreferrer">since Python 3.4</a>, except when executing a script directly using a relative path:</p>
<blockquote>
<p>Module <code>__file__</code> attributes (and related values) should now always contain absolute paths by default, with the sole exception of <code>__main__.__file__</code> when a script has been executed directly using a relative path. (Contributed by Brett Cannon in <a href="https://bugs.python.org/issue18416" rel="noreferrer">bpo-18416</a>.)</p>
</blockquote>
<p>Not sure if it resolves symlinks though.</p>
<p>Example of passing a relative path:</p>
<pre><code>$ python script.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Late simple example:</p>
<pre><code>from os import path, getcwd, chdir

def print_my_path():
    print('cwd:     {}'.format(getcwd()))
    print('__file__:{}'.format(__file__))
    print('abspath: {}'.format(path.abspath(__file__)))

print_my_path()

chdir('..')

print_my_path()
</code></pre>
<p>Under Python-2.*, the second call incorrectly determines the <code>path.abspath(__file__)</code> based on the current directory:</p>
<pre><code>cwd:     C:\codes\py
__file__:cwd_mayhem.py
abspath: C:\codes\py\cwd_mayhem.py
cwd:     C:\codes
__file__:cwd_mayhem.py
abspath: C:\codes\cwd_mayhem.py
</code></pre>
<p>As noted by @techtonik, in Python 3.4+, this will work fine since <code>__file__</code> returns an absolute path.</p>
</div>
<div class="post-text" itemprop="text">
<p>With the help of the of Guido mail provided by @kindall, we can understand the standard import process as trying to find the module in each member of <code>sys.path</code>, and file as the result of this lookup (more details in <a href="http://pymotw.com/2/sys/imports.html#import-path" rel="nofollow">PyMOTW Modules and Imports</a>.). So if the module is located in an absolute path in <code>sys.path</code> the result is absolute, but if it is located in a relative path in <code>sys.path</code> the result is relative.</p>
<p>Now the <code>site.py</code> startup file takes care of delivering only absolute path in <code>sys.path</code>, except the initial <code>''</code>, so if you don't change it by other means than setting the PYTHONPATH (whose path are also made absolute, before prefixing <code>sys.path</code>), you will get always an absolute path, but when the module is accessed through the current directory.</p>
<p>Now if you trick sys.path in a funny way you can get anything.</p>
<p>As example if you have a sample module <code>foo.py</code> in <code>/tmp/</code> with the code:</p>
<pre><code>import sys
print(sys.path)
print (__file__)
</code></pre>
<p>If you go in /tmp you get:</p>
<pre><code>&gt;&gt;&gt; import foo
['', '/tmp', '/usr/lib/python3.3', ...]
./foo.py
</code></pre>
<p>When in  in <code>/home/user</code>, if you add <code>/tmp</code> your <code>PYTHONPATH</code> you get:</p>
<pre><code>&gt;&gt;&gt; import foo
['', '/tmp', '/usr/lib/python3.3', ...]
/tmp/foo.py
</code></pre>
<p>Even if you add <code>../../tmp</code>, it will be normalized and the result is the same.</p>
<p>But if instead of using <code>PYTHONPATH</code> you use directly some funny path
you get a result as funny as the cause.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('../../tmp')
&gt;&gt;&gt; import foo
['', '/usr/lib/python3.3', .... , '../../tmp']
../../tmp/foo.py
</code></pre>
<p>Guido explains in the above cited thread, why python do not try to transform all entries in absolute paths:</p>
<blockquote>
<p>we don't want to have to call getpwd() on every import ....
  getpwd() is relatively slow and can sometimes fail outright,</p>
</blockquote>
<p>So your path is used <em>as it is</em>.</p>
</div>
<span class="comment-copy">Here's what Guido has to say about this: <a href="http://mail.python.org/pipermail/python-dev/2010-February/097461.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-dev/2010-February/097461.html</a></span>
<span class="comment-copy">Relevant: <a href="https://stackoverflow.com/q/9271464/1959808">stackoverflow.com/q/9271464/1959808</a></span>
<span class="comment-copy">so does it means that if there is a path from '' to the module, a relative path would be used, if not an absolute path would be used since the remainder of sys.path are absolute..</span>
<span class="comment-copy">If you load a module in the current directory, and the current directory <b>isn't</b> in <code>sys.path</code>, you'll get an absolute path. If you load a module in the current directory, and the current directory <b>is</b> in <code>sys.path</code>, you'll get a relative path.</span>
<span class="comment-copy">Remember, for this purpose, <code>sys.path</code> doesn't include <code>''</code>.</span>
<span class="comment-copy">got it, but @agf, if i use python /foo/abc.py from /home, I suppose the part of sys.path that contains the module is /home/foo and my current directory is /home/, why does print file gives me a relative path?</span>
<span class="comment-copy">Thanks. This is a hard fact to track down!</span>
<span class="comment-copy">This is not true for Python 3.4.0 (<code>Python 3.4.0 (default, Apr 11 2014, 13:05:11) [GCC 4.8.2] on linux</code>). And symlinks are not resolved in my trials.</span>
<span class="comment-copy">@FrozenFlame, feel free to report to <a href="https://bugs.python.org/" rel="nofollow noreferrer">bugs.python.org</a> if 3.4.1 doesn't fix it.</span>
<span class="comment-copy">Is <code>os.path.realpath(__file__)</code> the correct way to resolve symbolic links?</span>
<span class="comment-copy">@kevinarpe, <a href="https://stackoverflow.com/questions/3220755/how-to-find-the-target-files-fullabsolute-path-of-the-symbolic-link-or-soft-l" title="how to find the target files fullabsolute path of the symbolic link or soft l">stackoverflow.com/questions/3220755/â€¦</a></span>
