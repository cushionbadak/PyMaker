<div class="post-text" itemprop="text">
<p>I'm trying to replace an ad-hoc logging system with Python's logging module.  I'm using the logging system to output progress information for a long task on a single line so you can <code>tail</code> the log or watch it in a console.  I've done this by having a flag on my logging function which suppresses the newline for that log message and build the line piece by piece.</p>
<p>All the logging is done from a single thread so there's no serialisation issues.</p>
<p>Is it possible to do this with Python's logging module?  Is it a good idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's start with your last question: No, I do not believe it's a good idea. 
IMO, it hurts the readability of the logfile in the long run. </p>
<p>I suggest sticking with the <a href="http://docs.python.org/library/logging.html" rel="noreferrer">logging</a> module and using the '-f' option on your 'tail' command to watch the output from the console. You will probably end up using the <a href="http://docs.python.org/library/logging.handlers.html#filehandler" rel="noreferrer">FileHandler</a>. Notice that the default argument for 'delay' is False meaning the output won't be buffered.</p>
<p>If you <i>really</i> needed to suppress newlines, I would recommend creating your own Handler.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you wanted to do this you can change the logging handler terminator. I'm using Python 3.4. This was introduced in Python 3.2 as stated by Ninjakannon.</p>
<pre><code>handler = logging.StreamHandler()
handler.terminator = ""
</code></pre>
<p>When the StreamHandler writes it writes the terminator last.</p>
</div>
<div class="post-text" itemprop="text">
<p>The new line, <code>\n</code>, is inserted inside the <code>StreamHandler</code> class.</p>
<p>If you're really set on <em>fixing</em> this behaviour, then here's an example of how I solved this by <a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow noreferrer">monkey patching</a> the <code>emit(self, record)</code> method inside the logging.StreamHandler class.</p>
<blockquote>
<p>A monkey patch is a way to extend or modify the run-time code of dynamic languages without altering the original source code. This process has also been termed duck punching.</p>
</blockquote>
<p>Here is the custom implementation of <code>emit()</code> that omits line breaks:</p>
<pre><code>def customEmit(self, record):
    # Monkey patch Emit function to avoid new lines between records
    try:
        msg = self.format(record)
        if not hasattr(types, "UnicodeType"): #if no unicode support...
            self.stream.write(msg)
        else:
            try:
                if getattr(self.stream, 'encoding', None) is not None:
                    self.stream.write(msg.encode(self.stream.encoding))
                else:
                    self.stream.write(msg)
            except UnicodeError:
                self.stream.write(msg.encode("UTF-8"))
        self.flush()
    except (KeyboardInterrupt, SystemExit):
        raise
    except:
        self.handleError(record)
</code></pre>
<p>Then you would make a custom logging class (in this case, subclassing from <code>TimedRotatingFileHandler</code>).</p>
<pre><code>class SniffLogHandler(TimedRotatingFileHandler):
    def __init__(self, filename, when, interval, backupCount=0,
                 encoding=None, delay=0, utc=0):

        # Monkey patch 'emit' method
        setattr(StreamHandler, StreamHandler.emit.__name__, customEmit)

        TimedRotatingFileHandler.__init__(self, filename, when, interval,
                                          backupCount, encoding, delay, utc)
</code></pre>
<p>Some people might argue that this type of solution is not <em>Pythonic</em>, or whatever. It might be so, so be careful.</p>
<p>Also, be aware that this will globally patch <code>SteamHandler.emit(...)</code>, so if you are using multiple logging classes, then this patch will affect the other logging classes as well!</p>
<p>Check out these for further reading:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/5626193/what-is-monkey-patching">What is monkey-patching?</a></li>
<li><a href="https://softwareengineering.stackexchange.com/questions/144652">Is monkeypatching considered good programming practice?</a></li>
<li><a href="http://www.codinghorror.com/blog/2008/07/monkeypatching-for-humans.html" rel="nofollow noreferrer">Monkeypatching For Humans</a></li>
</ul>
<p>Hope that helps.</p>
</div>
<span class="comment-copy">If you want to log multiple things in the same line consider not using <code>logging</code> for it but use a good old file object and write to it directly (and to a different file than the logfile used for other, line-based, things).</span>
<span class="comment-copy">@ThiefMaster I'm writing to a file and stdout directly right now.  It feels like I'm rewriting logging though, so I'd rather use logging if it ends up being less effort.</span>
<span class="comment-copy">This was <a href="https://docs.python.org/3/library/logging.handlers.html#streamhandler" rel="nofollow noreferrer">introduced in Python 3.2</a>.</span>
<span class="comment-copy">Trying to do something like this within django logging, but can't get it going.</span>
