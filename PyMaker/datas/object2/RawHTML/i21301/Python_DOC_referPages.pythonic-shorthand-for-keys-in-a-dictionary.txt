<div class="post-text" itemprop="text">
<p>Simple question: Is there a shorthand for checking the existence of several keys in a dictionary?</p>
<pre><code>'foo' in dct and 'bar' in dct and 'baz' in dct
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> with a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>:</p>
<pre><code>&gt;&gt;&gt; all(x in dct for x in ('foo', 'bar', 'qux'))
False
&gt;&gt;&gt; all(x in dct for x in ('foo', 'bar', 'baz'))
True
&gt;&gt;&gt; 
</code></pre>
<p>It saves you a whopping 2 characters (but will save you a lot more if you have a longer list to check).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>all(x in dct for x in ('foo','bar','baz'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>{"foo","bar","baz"}.issubset(dct.keys())
</code></pre>
<p>For python &lt;2.7, you’ll have to replace the set literal with <code>set(["foo","bar","baz"])</code></p>
<p>If you like operators and don’t mind the performance of creating another set, you can use the <code>&lt;=</code> operator on the set and the dict’s keyset.</p>
<p>Both variations combined would look like:</p>
<pre><code>set(["foo","bar","baz"]) &lt;= set(dct)
</code></pre>
<p>Finally, if you use python 3, <code>dict.keys()</code> will return a setlike object, which means that you can call the operator without performance penalty like this:</p>
<pre><code>{"foo","bar","baz"} &lt;= dct.keys()
</code></pre>
</div>
<span class="comment-copy">Accepting this answer thanks to the inclusion of useful links. :)</span>
<span class="comment-copy">…although it repeats @unutbu’s earlier answer.</span>
<span class="comment-copy">@flying sheep: There were no answers when I started typing mine. I guess unutbu started and finished typing while I created positive and negative examples and added some linked references. [i.e. I didn't copy his homework ;-)]</span>
<span class="comment-copy">@flying sheep: I'll try to type faster in future!</span>
<span class="comment-copy">@PatrickArtner: Done!</span>
<span class="comment-copy">Very nice. Thanks!</span>
<span class="comment-copy">+1 that's sexy...</span>
<span class="comment-copy">This is a neat alternative, and demonstrates IMHO that TIMTOWTDI is inescapable; unfortunately, <code>set</code> in &lt;= 2.6 does not take <code>*args</code> - you need to pass a sequence explicitly (another set of brackets).</span>
<span class="comment-copy">This will be O(n) instead of O(1) for the others. You don't even have to be Dutch to see how horrible this will be if the dict is very large.</span>
<span class="comment-copy">Thanks for the error in the set constructor call and for mentioning the operator. I don’t think that O(n) hurts in the OP’s case, though, since he’s going away from manually checking each key :)</span>
<span class="comment-copy">Added information about Python 3. Did someone say TimtoWtdI?</span>
