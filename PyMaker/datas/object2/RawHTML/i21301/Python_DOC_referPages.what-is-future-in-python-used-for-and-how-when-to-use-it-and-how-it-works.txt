<div class="post-text" itemprop="text">
<p>People including me know there is something in Python called <code>__future__</code> and it appears in quite a few modules I read. And the dull people like me don't know why it's there, and how/when to use it , even after reading <a href="http://docs.python.org/library/__future__.html">the Python's <code>__future__</code> doc</a>. </p>
<p>So any explains with examples to demonstrate it?</p>
<p>I have got a few answers quickly, which look all correct, in terms of the basic usage.</p>
<p>However and also for further understanding how <code>__future__</code> works:</p>
<p>I just realized one key thing that was confusing me when I tried to understand it, that is, how a current python release include something that will be released in future release?
and how can a program using a new feature in a future python release be compiled successfully by the current python release?</p>
<p>So, I guess now that, the current release has already packaged some potential features that will be included in future releases - is this right? but the features are available only by <code>__future__</code>, that is because it doesn't become standard yet - am I right?</p>
</div>
<div class="post-text" itemprop="text">
<p>With <code>__future__</code> module's inclusion, you can slowly be accustomed to incompatible changes or to such ones introducing new keywords.</p>
<p>E.g., for using context managers, you had to do <code>from __future__ import with_statement</code> in 2.5, as the <code>with</code> keyword was new and shouldn't be used as variable names any longer. In order to be able to use a program which uses variables named <code>with</code>, the above import statement is needed.</p>
<p>Another example is</p>
<pre><code>from __future__ import division
print 8/7  # prints 1.1428571428571428
print 8//7 # prints 1
</code></pre>
<p>Without the <code>__future__</code> stuff, both <code>print</code> statements would print <code>1</code>.</p>
<p>The internal difference is that without that import, <code>/</code> is mapped to the <code>__div__()</code> method, while with it, <code>__truediv__()</code> is used. (In any case, <code>//</code> calls <code>__floordiv__()</code>.)</p>
<p>A propos <code>print</code>: <code>print</code> becomes a function in 3.x, losing its special property as a keyword. So it is the other way round.</p>
<pre><code>&gt;&gt;&gt; print

&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print
&lt;built-in function print&gt;
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you do</p>
<pre><code>from __future__ import whatever
</code></pre>
<p>You're not actually using an <code>import</code> statement, but a <a href="http://docs.python.org/reference/simple_stmts.html#future-statements" rel="noreferrer">future statement</a>. You're reading the wrong docs, as you're not actually importing that module.</p>
<p>Future statements are special -- they change how your Python module is parsed, which is why they <strong>must</strong> be at the top of the file. They give new -- or different -- meaning to words or symbols in your file. From the docs:</p>
<blockquote>
<p>A future statement is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python. The future statement is intended to ease migration to future versions of Python that introduce incompatible changes to the language. It allows use of the new features on a per-module basis before the release in which the feature becomes standard.</p>
</blockquote>
<p>If you actually want to import the <code>__future__</code> module, just do</p>
<pre><code>import __future__
</code></pre>
<p>and then access it as usual.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__future__</code> <strong>is a pseudo-module which programmers can use to enable new language features which are not compatible with the current interpreter</strong>. For example, the expression <code>11/4</code> currently evaluates to <code>2</code>. If the module in which it is executed had enabled true division by executing:</p>
<p><code>from __future__ import division</code></p>
<p>the expression <code>11/4</code> would evaluate to <code>2.75</code>. By importing the <code>__future__</code> module and evaluating its variables, you can see when a new feature was first added to the language and when it will become the default:</p>
<pre><code>  &gt;&gt;&gt; import __future__
  &gt;&gt;&gt; __future__.division
  _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can be used to use features which will appear in newer versions while having an older release of Python.</p>
<p>For example</p>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
</code></pre>
<p>will allow you to use <code>print</code> as a function:</p>
<pre><code>&gt;&gt;&gt; print('# of entries', len(dictionary), file=sys.stderr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or is it like saying "Since this is python v2.7, use that different 'print' function that has also been added to python v2.7, after it was added in python 3. So my 'print' will no longer be statements (eg print "message" ) but functions (eg, print("message", options). That way when my code is run in python 3, 'print' will not break."</p>
<p>In </p>
<pre><code>from __future__ import print_function
</code></pre>
<p>print_function is the module containing the new implementation of 'print' as per how it is behaving in python v3.</p>
<p>This has more explanation: <a href="http://python3porting.com/noconv.html" rel="noreferrer">http://python3porting.com/noconv.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There are some great answers already, but none of them address a complete list of what the <code>__future__</code> statement currently supports.</p>
<p>Put simply, <strong>the __future__ statement forces Python interpreters to use newer features of the language.</strong> </p>
<p>The features that it currently supports are the following:</p>
<p><code>nested_scopes</code>:</p>
<p>Prior to Python 2.1, the following code would raise a <strong>NameError</strong>:</p>
<pre><code>def f():
    ...
    def g(value):
        ...
        return g(value-1) + 1
    ...
</code></pre>
<p>The <code>from __future__ import nested_scopes</code> directive will allow for this feature to be enabled.</p>
<p><code>generators</code>:</p>
<p>Introduced generator functions such as the one below to save state between successive function calls:</p>
<pre><code>def fib():
    a, b = 0, 1
    while 1:
       yield b
       a, b = b, a+b
</code></pre>
<p><code>division</code>:</p>
<p>Classic division is used in Python 2.x versions. Meaning that some division statements return a reasonable approximation of division ("true division") and others return the floor ("floor division"). Starting in Python 3.0, true division is specified by <code>x/y</code>, whereas floor division is specified by <code>x//y</code>. </p>
<p>The <code>from __future__ import division</code> directive forces the use of Python 3.0 style division.</p>
<p><code>absolute_import</code>:</p>
<p>Allows for parenthesis to enclose multiple <code>import</code> statements. For example:</p>
<pre><code>from Tkinter import (Tk, Frame, Button, Entry, Canvas, Text,
    LEFT, DISABLED, NORMAL, RIDGE, END)
</code></pre>
<p>Instead of:</p>
<pre><code>from Tkinter import Tk, Frame, Button, Entry, Canvas, Text, \
    LEFT, DISABLED, NORMAL, RIDGE, END
</code></pre>
<p>Or:</p>
<pre><code>from Tkinter import Tk, Frame, Button, Entry, Canvas, Text
from Tkinter import LEFT, DISABLED, NORMAL, RIDGE, END
</code></pre>
<p><code>with_statement</code>:</p>
<p>Adds the statement "with" as a keyword in Python to eliminate the need for <code>try/finally</code> statements. Common uses of this are when doing file I/O such as:</p>
<pre><code>with open('workfile', 'r') as f:
     read_data = f.read()
</code></pre>
<p><code>print_function</code>:</p>
<p>Forces the use of Python 3 parenthesis-style <code>print</code> function call instead of the <code>print MESSAGE</code> style print statement.</p>
<p><code>unicode_literals</code>:</p>
<p>Introduces the literal syntax for the <code>bytes</code> object. Meaning that statements such as <code>bytes('Hello world', 'ascii')</code> can be simply expressed as <code>b'Hello world'</code>.</p>
<p><code>generator_stop</code>:</p>
<p>Replaces the use of the <code>StopIteration</code> exception used inside generator functions with the <code>RuntimeError</code> exception.</p>
<p>One other use not mentioned above is that the <code>__future__</code> statement also forces the use of Python 2.1+ interpreters since using an older version will throw a runtime exception.</p>
<p><strong>References:</strong></p>
<ul>
<li><a href="https://docs.python.org/2/library/__future__.html" rel="noreferrer">https://docs.python.org/2/library/<strong>future</strong>.html</a></li>
<li><a href="https://docs.python.org/3/library/__future__.html" rel="noreferrer">https://docs.python.org/3/library/<strong>future</strong>.html</a></li>
<li><a href="https://docs.python.org/2.2/whatsnew/node9.html" rel="noreferrer">https://docs.python.org/2.2/whatsnew/node9.html</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0255/" rel="noreferrer">https://www.python.org/dev/peps/pep-0255/</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0238/" rel="noreferrer">https://www.python.org/dev/peps/pep-0238/</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0328/" rel="noreferrer">https://www.python.org/dev/peps/pep-0328/</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3112/" rel="noreferrer">https://www.python.org/dev/peps/pep-3112/</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0479/" rel="noreferrer">https://www.python.org/dev/peps/pep-0479/</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>One of the uses which I found to be very useful is the <code>print_function</code> from <code>__future__</code> module.</p>
<p>In Python 2.7, I wanted chars from different print statements to be printed on same line without spaces.</p>
<p>It can be done using a comma(",") at the end, but it also appends an extra space.
The above statement when used as : </p>
<pre><code>from __future__ import print_function
...
print (v_num,end="")
...
</code></pre>
<p>This will print the value of <code>v_num</code> from each iteration in a single line without spaces.</p>
</div>
<div class="post-text" itemprop="text">
<p>After Python 3.0 onward, print is no longer just a statement, its a function instead. and is included in PEP 3105. </p>
<p>Also I think the Python 3.0 package has still these special functionality. Lets see its usability through a traditional "Pyramid program" in Python:</p>
<pre><code>from __future__ import print_function

class Star(object):
    def __init__(self,count):
        self.count = count

    def start(self):
        for i in range(1,self.count):
            for j in range (i): 
                print('*', end='') # PEP 3105: print As a Function 
            print()

a = Star(5)
a.start()

Output:
*
**
***
****
</code></pre>
<p>If we use normal print function, we won't be able to achieve the same output, since print() comes with a extra newline. So every time the inner for loop execute, it will print * onto the next line.</p>
</div>
<span class="comment-copy">This is the original proposal for the future statement.  I found it helpful in understanding why it's there in the first place and so when and how to use it follow naturally.  <a href="https://www.python.org/dev/peps/pep-0236/" rel="nofollow noreferrer">python.org/dev/peps/pep-0236</a></span>
<span class="comment-copy">It's basically the equivalent of <a href="https://www.youtube.com/watch?v=6XwNibBpDYU" rel="nofollow noreferrer">"I guess you're not ready for this, but your kids are gonna love it"</a>.</span>
<span class="comment-copy">A future statement is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python. The future statement is intended to ease migration to future versions of Python that introduce incompatible changes to the language. It allows use of the new features on a per-module basis before the release in which the feature becomes standard.</span>
<span class="comment-copy">don't forget <code>from __future__ import braces</code> :p</span>
<span class="comment-copy">@zoogleflatt If you are more of a tab guy, you don't know PEP 8. It is strongly recommended to <i>not</i> use tabs...</span>
<span class="comment-copy">@glglgl Well technically it just says they're preferred.  It wasn't entirely clear to me after reading why this is exactly, I'm guessing it's to have indent levels match up exactly to make code neater?</span>
<span class="comment-copy">@zoogleflatt It surely has also to do with the fact that most people use 4 spaces for 1 level of indentation, that for compatibility reasons one tab is equivalent to 8 spaces and mixing tabs and spaces is discouraged (resp., AFAIK, even disallowed in Py3)</span>
<span class="comment-copy"><a href="https://www.emacswiki.org/pics/static/TabsSpacesBoth.png" rel="nofollow noreferrer">emacswiki.org/pics/static/TabsSpacesBoth.png</a></span>
<span class="comment-copy">Technically, it is also an import statement, as the relevant name is bound to a local variable. <code>from __future__ import print_function</code> both changes the behavior of the <code>print</code> keyword and has a runtime affect equivalent to <code>print_function = __import__("__future__").print_function</code></span>
<span class="comment-copy">So, based on the release version in the variables, if your interpreter is using a later version than indicate, the <code>import __future__ xyz</code> is a no-op?</span>
<span class="comment-copy">It is somewhat analogous to a polyfill in the browser world</span>
<span class="comment-copy">On my Mac  Sierra ,Python 2.7.10 gives me 2.75 without <b>futures</b>. Why?</span>
<span class="comment-copy">I think you meant to say <code>from __future__ import print_function</code></span>
<span class="comment-copy">@gyeh Maybe this answer is just showing future Python 3 'import' code (for Python 4 future compatibility) :}</span>
<span class="comment-copy">I have updated the code above to say 'print_function' which is correct.</span>
<span class="comment-copy">put simply says it all!!</span>
<span class="comment-copy">This answer sums up everything. Thank you.</span>
