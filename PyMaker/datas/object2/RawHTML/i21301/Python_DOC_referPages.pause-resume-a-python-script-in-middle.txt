<div class="post-text" itemprop="text">
<p>Can I have a running python script(under Windows)being paused in the middle by user , and resume again when user decides ? </p>
<p>There is a main manager program which generates,loads and runs other python scripts (by calling python script.py from console).I don't have GUI and user can interact via console.I want my main program be able to respond to user pause/resume command for the running script.Should I define a thread? Whats the approach ?</p>
<p>Edit/Update :</p>
<p>Let's say I have a small python application with frontend which has various functions. I have a RUN command which runs python scripts in background .I want to implement a PAUSE feature which would pause the running python script . When the user commands RUN again then the python script should resume
running .
using raw_input() or print() forces user to issue command.But in this case, we don't know when user want to interrupt/pause/issue a command.So usual input/print is not usable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, from what I've seen in my searches on this, even with threading, <code>sys.stdin</code> is going to work against you, no matter how you get to it (<code>input()</code>, or even <code>sys.stdin.read()</code>, .<code>readline()</code>, etc.), because they block.</p>
<p>Instead, write your manager program as a socket server or something similar.</p>
<p>Write the scripts as generators, which are designed to pause execution (every time it hits a <code>yield</code>), and just call <code>next()</code> on each one in turn, repeatedly. You'll get a <code>StopIteration</code> exception when a script completes.</p>
<p>For handling the commands, write a second script that connects to the manager program's socket and sends it messages, this will be the console interface the user interacts with (later, you could even upgrade it to a GUI without altering much elsewhere).</p>
<p>The server picks these commands up before running the next iteration on the scripts, and if a script is paused by the user, the manager program simply doesn't call <code>next()</code> on that script until the user tells it to run again.</p>
<p>I haven't tested this, but I <em>think</em> it'll work better than making threads or subprocesses for the external scripts, and then trying to pause (and later kill) them.</p>
<hr/>
<p>This is really out of my depth, but perhaps running the scripts in the background and using <code>kill -stop</code> and <code>kill -cont</code> to pause and continue will work (assuming Linux)?</p>
</div>
<div class="post-text" itemprop="text">
<p>If it were unix I'd recommend signal, but here is a crude version that does what you ask.</p>
<pre><code>import time

while True:
    try:
        time.sleep(1)  # do something here
        print '.',

    except KeyboardInterrupt:
        print '\nPausing...  (Hit ENTER to continue, type quit to exit.)'
        try:
            response = raw_input()
            if response == 'quit':
                break
            print 'Resuming...'
        except KeyboardInterrupt:
            print 'Resuming...'
            continue
</code></pre>
<p>Use Ctrl+C to pause, and ENTER to resume.  Ctrl+Break can probably be used as a harsh kill, but I don't have the key on this keyboard.  </p>
<p>A more robust version could use select on a pipe/socket, or even threads.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make a simple workaround by creating a <code>PAUSEFILE</code>. Your to-be-paused script may periodically check for existence (or content) of such file.</p>
<p>User's <code>PAUSE</code> command can create (or fill with proper content) such file.</p>
<p>I have used this approach in a similar situation, where I wanted to be able to pause my Python scripts and resume them later. They contain something like</p>
<pre><code>if os.path.isfile(PAUSEFILE):
  raw_input('Remove ' + PAUSEFILE + ' and hit ENTER to continue')
</code></pre>
<p>in their main loops.</p>
<p>It is nasty and could be broken if the code really depended on it, but for the use cases, where the pause is done by users at random, I guess it will not matter.</p>
<p>The <code>PAUSE</code> command is simply <code>touch $PAUSEFILE</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't understand very well your approach but every time a user needs to press a enter to continue the script you should use:</p>
<pre><code>input() #for python 3k
raw_input() #for python 2k
</code></pre>
<p>without assigning the receiving answer to a variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried the obvious and print a prompt then read a line from stdin? That will pause your whole script.</p>
<p>What you asked in your original question isn't very clear, so if this doesn't do what you want, can you explain why?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're launching your python script from the windows command window, you can use msvcrt.kbhit() as a non-blocking key press check as implemented here:
<a href="http://code.activestate.com/recipes/197140-key-press-detection-for-windows-text-only-console-/" rel="nofollow">http://code.activestate.com/recipes/197140-key-press-detection-for-windows-text-only-console-/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I found so hacky those responses, while being interesting too.</p>
<p>The best approach is the <a href="https://stackoverflow.com/a/7184165/2480481">https://stackoverflow.com/a/7184165/2480481</a> doing it using <code>KeyboardInterrupt</code> exception.</p>
<p>As i noticed nobody mention "using a debugger", i'll do it.</p>
<p>Install pdb, Python debugger with <code>pip install pdb</code>.
Follow that to make your script pausable <a href="https://stackoverflow.com/a/39478157/2480481">https://stackoverflow.com/a/39478157/2480481</a> by Ctrl+c instead of exit it.</p>
<p>The main benefit of using a debugger (pdb) is that you can inspect the variables, values, etc. This is far way more powerfull than just pause/continue it.</p>
<p>Also, you can add Ipython interface with pdb attached to debug your app when crashes. Look at: <a href="https://stackoverflow.com/a/14881323/2480481">https://stackoverflow.com/a/14881323/2480481</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In Windows, you can suspend/resume running Python scripts .  Type resmon on CMD or via Run command (Windows+R). Locate your Python script process and right-click&gt;Suspend Process. This will unlock CPU usage but not RAM. ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>Pdb</code> module in python.
Eventhough it's a debugger, in your case it helps you pass and continue wherever you have a breakpoint in the code. </p>
<p>Also when you resume you can get a glimpse of where it is paused and what are the values of the variables etc. Which will be very helpful.</p>
<p><a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">python debugger - pdb</a></p>
</div>
<span class="comment-copy">You've asked seven questions and only accepted one answer. Please remember to accept answers to your questions by clicking the check mark next to the most helpful one. You should do that for your old, answered questions as well as this one.</span>
<span class="comment-copy">I couldn't choose only one answer.I didn't meant not appreciating people spending time helping me out..</span>
<span class="comment-copy">This isn't very clear, but you have me intrigued. Lemme see if I can figure this out: you have a console program that manages a series of external python scripts, and you want to make a set of commands that will pause and resume a script. I think the best method would be setting up those scripts as generators, so they periodically drop back to the manager program, which can then look for a user command, and then tell the script to continue, assuming the user did not pause the script.</span>
<span class="comment-copy">Not exactly, I have added a description to my question..</span>
<span class="comment-copy">logic seems fine,I'm not sure if this is feasible and fast enough.My scripts call custom library functions which I cant make them generators ,and they are very lengthy functions...</span>
<span class="comment-copy">Hmm. Then you are likely stuck with threads. Generators are the only code objects that Python can suspend execution of, leaving you with subprocesses, assuming you can pause them.</span>
<span class="comment-copy">awesome! however, i'm not using generators and <code>kill -stop job_id</code> and <code>kill -cont job_id</code> work perfectly.</span>
<span class="comment-copy">+1. Seems kinda hacky, but comes closer to the requirements than mine, I think.</span>
<span class="comment-copy">Yes, hacky but a complete solution is out of scope for a SO question I'd gather.</span>
<span class="comment-copy">if instead of time.sleep() i have a lengthy python script,I can't use this trick as everytime we resume it runs the whole script from the begining.It does not store the state on pause..</span>
<span class="comment-copy">Use subprocess to run it, then pause and resume process with <a href="http://stackoverflow.com/questions/1892356/pausing-a-process-in-windows/4229561#4229561" title="pausing a process in windows">stackoverflow.com/questions/1892356/â€¦</a></span>
<span class="comment-copy">This is not fancy but it's an easy way to perform the equivalent of a low-priority interrupt.  I would like my script to pause only at the end of a block of code inside a loop (that runs for hours) and this is an easy way to do that.</span>
<span class="comment-copy">please see my update.</span>
<span class="comment-copy">well, you said that users interact only using console, so the only way of taking input from then is from input and raw_input, and to a lower level stdin. If you created a gui app in tkinter for example you could take input from mouse gestures, keyboard presses etc.</span>
<span class="comment-copy">yes but problem is not how to get input.Is how to link the forced inputs to pause and resume.I don't ask for inputs in my code.I want code to act upon interrupts and treat them like pause and resume.</span>
<span class="comment-copy">I like this answer: simple, works.  I used this in a Python 3.5 script:      input("\n\tpaused: press Enter to continue\n")</span>
<span class="comment-copy">Please see my updarte.</span>
<span class="comment-copy"><code>kbhit()</code> is "only" present on windows. If you install it on Linux, it will crash loading <code>termios</code> from <code>_kbhit</code>. It's more usable if you use <code>timeout (0)</code> and <code>getch()</code> functions togheter to detect a keypress. I may be wrong but is what i see when playing few things. Look <a href="https://www.viget.com/articles/game-programming-in-c-with-the-ncurses-library" rel="nofollow noreferrer">viget.com/articles/â€¦</a> then <a href="https://pastebin.com/1VRdFdPQ" rel="nofollow noreferrer">pastebin.com/1VRdFdPQ</a> and finally <a href="https://pastebin.com/xyfm7LNa" rel="nofollow noreferrer">pastebin.com/xyfm7LNa</a> which is what i did finally to make it work. U can see all togheter where i found a related question to that tutorial: <a href="https://gist.github.com/reagent/9743630" rel="nofollow noreferrer">gist.github.com/reagent/9743630</a>.</span>
