<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url">What is the best regular expression to check if a string is a valid URL?</a> </p>
</blockquote>
<p>Considering a string as follows:</p>
<pre><code>string = "&lt;p&gt;Hello World&lt;/p&gt;&lt;a href="http://example.com"&gt;More Examples&lt;/a&gt;&lt;a href="http://example2.com"&gt;Even More Examples&lt;/a&gt;"
</code></pre>
<p>How could I, with Python, extract the urls, inside the anchor tag's href? Something like:</p>
<pre><code>&gt;&gt;&gt; url = getURLs(string)
&gt;&gt;&gt; url
['http://example.com', 'http://example2.com']
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

url = '&lt;p&gt;Hello World&lt;/p&gt;&lt;a href="http://example.com"&gt;More Examples&lt;/a&gt;&lt;a href="http://example2.com"&gt;Even More Examples&lt;/a&gt;'

urls = re.findall('https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', url)

&gt;&gt;&gt; print urls
['http://example.com', 'http://example2.com']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best answer is...</p>
<h3>Don't use a regex</h3>
<p>The expression in the <a href="https://stackoverflow.com/a/6883094/577088">accepted answer</a> misses many cases. Among other things, <em>URLs can have unicode characters in them</em>. The regex you want is <a href="https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url">here</a>, and after looking at it, you may conclude that you don't really want it after all. The most correct version is <em>ten-thousand characters long</em>.</p>
<p>Admittedly, if you were starting with plain, unstructured text with a bunch of URLs in it, then you might need that ten-thousand-character-long regex. But <strong>if your input is structured, use the structure</strong>. Your stated aim is to "extract the url, inside the anchor tag's href." Why use a ten-thousand-character-long regex when you can do something much simpler?</p>
<h3>Parse the HTML instead</h3>
<p>For many tasks, using <a href="https://www.crummy.com/software/BeautifulSoup/" rel="noreferrer">Beautiful Soup</a> will be far faster and easier to use:</p>
<pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup as Soup
&gt;&gt;&gt; html = Soup(s, 'html.parser')           # Soup(s, 'lxml') if lxml is installed
&gt;&gt;&gt; [a['href'] for a in html.find_all('a')]
['http://example.com', 'http://example2.com']
</code></pre>
<p>If you prefer not to use external tools, you can also directly use Python's own built-in HTML parsing library. Here's a really simple subclass of <a href="https://docs.python.org/3/library/html.parser.html" rel="noreferrer"><code>HTMLParser</code></a> that does exactly what you want:</p>
<pre><code>from html.parser import HTMLParser

class MyParser(HTMLParser):
    def __init__(self, output_list=None):
        HTMLParser.__init__(self)
        if output_list is None:
            self.output_list = []
        else:
            self.output_list = output_list
    def handle_starttag(self, tag, attrs):
        if tag == 'a':
            self.output_list.append(dict(attrs).get('href'))
</code></pre>
<p>Test:</p>
<pre><code>&gt;&gt;&gt; p = MyParser()
&gt;&gt;&gt; p.feed(s)
&gt;&gt;&gt; p.output_list
['http://example.com', 'http://example2.com']
</code></pre>
<p>You could even create a new method that accepts a string, calls <code>feed</code>, and returns <code>output_list</code>. This is a vastly more powerful and extensible way than regular expressions to extract information from html.</p>
</div>
<span class="comment-copy">Don't try to parse HTML with regexp. Look for a HTML parser, that can extract the <code>href</code> value for you.</span>
<span class="comment-copy">@Judge John Deed: <a href="http://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html" rel="nofollow noreferrer">better be lazy</a>.</span>
<span class="comment-copy">Yep, it's a dupe, but this version of the question is better written.</span>
<span class="comment-copy">See: <a href="https://stackoverflow.com/questions/9760588/how-do-you-extract-a-url-from-a-string-using-python/31952097#31952097" title="how do you extract a url from a string using python">stackoverflow.com/questions/9760588/â€¦</a></span>
<span class="comment-copy">In any sort of normal scraping where the text portion of the href is also a link rather than descriptive text, this just gives duplicates.</span>
<span class="comment-copy">This is great, thanks!</span>
<span class="comment-copy">For those modifying this regex, note that the '-' in the [$-_@.&amp;+] is acting as a range operator and not a character. This means certain chairs (e.g., ',') are represented more than once.</span>
<span class="comment-copy">This regex does not consider URL fragments (the # suffix).</span>
<span class="comment-copy">How can this be used to catch URLs without <code>http</code> ? Like <code>www.google.com</code> or <code>google.com</code></span>
<span class="comment-copy">What's all the <code>__init__</code> and <code>self</code> stuff?</span>
<span class="comment-copy">Beautiful is great is you need to parse href or src as asked in the initial question and should be the accepted answer, but beware it won't help to find URL in strings.</span>
<span class="comment-copy">This doesn't answer the question, though. The question is about the format of URLs, not how to parse HTML.</span>
<span class="comment-copy">@AlSweigart, I think it's reasonable to say that the body of the question asks about parsing HTML.</span>
<span class="comment-copy">@AlSweigart, thanks for editing the title. I was thinking about this and realized that by my own logic, I should actually edit the title. Then I saw that you had done so already!</span>
