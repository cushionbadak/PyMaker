<div class="post-text" itemprop="text">
<p>If I import a module defining a class of the same name belonging to a package, it is imported as a Class, not a Module because of the __init__.py of the parent package. See <a href="https://stackoverflow.com/questions/6945592/different-import-results-at-different-directories">different import results at different directories</a> for details. In Python shell or ipython shell, if I do</p>
<p><code>from MyPak import MyMod</code></p>
<p>MyModule is always imported as Class thus I can not reload it (reload() works only for modules). Run </p>
<p><code>from MyPak import MyMod</code></p>
<p>again does not seem to update the Class definition. Could anyone suggest a way to update the class in python shell? </p>
<p>ps. without restarting the python interpreter. </p>
<p><strong>pps</strong>. Just in case you have the code in hand and want to test it: I am actually talking about BioPython, and I am working on Bio.PDB.PDBParser. I have an ipython shell (v0.10) and edit PDBParser.py. Just got no way to reload it in ipython.</p>
<p>so here is what I did:</p>
<pre><code># start ipython v0.10
import Bio
from Bio.PDB import PDBParser
p = PDBParser()
s = p.get_structure()
# then I make changes,e.g. simply print some text, in PDBParser.py
del Bio
del PDBParser
del s
import Bio  # or reload(Bio) without deleting all the objects
from Bio.PDB import PDBParser
p = PDBParser()
s = p.get_structure() # expected output after change not seen :(
</code></pre>
<p>I could not see the printed text. The changes were not applied somehow. </p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3 only, import the <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="noreferrer"><code>reload</code></a> function:</p>
<pre><code>&gt;&gt;&gt; from importlib import reload
</code></pre>
<p>On both Python 2.x, and 3.x, you can then simply call <code>reload</code> on the module:</p>
<pre><code>&gt;&gt;&gt; import MyPak
&gt;&gt;&gt; reload(MyPak)
&gt;&gt;&gt; from MyPak import MyMod
</code></pre>
<p>However, instances of the old class will not be updated (there's simply no code that describes the update mechanism).</p>
</div>
<div class="post-text" itemprop="text">
<p>I finally found the answer:</p>
<pre><code>import MyPak
from MyPak import MyMod
</code></pre>
<p>after editing <code>MyPak/MyMod.py</code> file, to reload the class <code>MyMod</code> in the file <code>MyMod.py</code>, one needs to</p>
<pre><code>import sys
del sys.modules['MyPak.MyMod'] 
reload(MyPak)
from MyPak import MyMod
</code></pre>
<p><strong>Caveats</strong>:</p>
<ol>
<li><p>Executing <code>del MyPak</code> or <code>del MyMod</code> or <code>del MyPak.MyMod</code> does not solve the problem since it simply removes the name binding. Python only searches <code>sys.modules</code> to see whether the modules had already been imported. Check out the discussion in the post <a href="https://stackoverflow.com/questions/7121802/module-name-in-sys-modules-and-globals">module name in sys.modules and globals()</a>.</p></li>
<li><p>When reloading MyPak, python tries to execute the line <code>from MyMod import MyMod</code> in <code>MyPak/__init__.py</code>. However, it finds <code>MyPak.MyMod</code> in <code>sys.modules</code>, thus it will <strong>NOT</strong>
reload <code>MyMod</code> although <code>MyPak/MyMod.py</code> has been updated. And you will find that no new <code>MyPak/MyMod.pyc</code> is generated.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>There are thee ways to solve this:</p>
<h3>1. Use <code>import MyPak.MyMod</code> instead of <code>from MyPak import MyMod</code></h3>
<p>Then you can write:</p>
<pre><code>from importlib import reload  # If on Python 3
import MyPak.MyMod
reload(MyPak.MyMod)
</code></pre>
<p>and it works.</p>
<h3>2. Use <a href="http://ipython.readthedocs.io/en/stable/api/generated/IPython.lib.deepreload.html" rel="noreferrer">IPython.lib.deepreload</a></h3>
<pre><code>from MyPak import MyMod
from IPython.lib.deepreload import reload
reload(MyPak)  # This should also reload all submodules
</code></pre>
<h3>3. Use <a href="http://ipython.readthedocs.io/en/stable/config/extensions/autoreload.html" rel="noreferrer">autoreload</a> magic</h3>
<pre><code>%load_ext autoreload
%autoreload 2
import MyPak.MyMod  # All changes to MyPak.MyMod will be loaded automatically
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have one myfile.py file which contains one class MyClass</p>
<p>To import just do:</p>
<pre><code>from myfile import MyClass
mc = MyClass()
</code></pre>
<p>To reload:</p>
<pre><code>import sys
del sys.modules['myfile']
from myfile import MyClass
modifiedmc = MyClass()
</code></pre>
<p>This is very useful while building modules.
one can put these inside a function and just call the function</p>
<pre><code>def myreload():
   import sys
   del sys.modules['myfile']
   from myfile import MyClass
   modifiedmc = MyClass()
   global mc
   mc = modifiedmc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a magic function:</p>
<pre><code>%load_ext autoreload
%autoreload 2
from MyPak import MyMod
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It works for me using python 3.5.2:</p>
<pre><code>import importlib
importlib.reload(class)
from class import module
</code></pre>
</div>
<span class="comment-copy"><code>CTRL+C</code>, <code>$ python</code>, <code>from MyPak import MyMod</code> ;)</span>
<span class="comment-copy">Would <code>import MyPak.MyMod</code> then <code>reload(MyPak.MyMod)</code> work?</span>
<span class="comment-copy">no, <code>import MyPak.MyMod</code> still imports MyPak.MyMod as a <i>class</i>.</span>
<span class="comment-copy">What about <code>del MyMod</code>, then <code>from MyPak import MyMod</code>? Your package layout is a little unusual (with with MyPak/__init__.py importing everything) but that may work to clear the namespace and allow you to re-import it.</span>
<span class="comment-copy">@Kirk Strauser: still no luck. As a matter of fact, I have done that before. I am deeply confused.</span>
<span class="comment-copy">Just tested it. It seems this does not update MyMod, either. I actually have MyPak1.MyPak2.MyMod. But I don't think that should be the reason :(</span>
<span class="comment-copy">isn't working for me in Python 3.3.  What version are you using?</span>
<span class="comment-copy">@AllTradesJack On Python 3, you need to import reload first: <code>from importlib import reload</code>.</span>
<span class="comment-copy">@AllTradesJack <code>reload</code> was added in version 3.4.</span>
<span class="comment-copy">This does not work for classes when I tried it in python3.6.</span>
<span class="comment-copy">reload is not recognized as a command for me in 3.3.  What version are you using?</span>
<span class="comment-copy"><a href="https://docs.python.org/3.4/library/importlib.html#importlib.reload" rel="nofollow noreferrer">docs.python.org/3.4/library/importlib.html#importlib.reload</a></span>
<span class="comment-copy">Given caveat number 2, perhaps this would work: <code>import MyPak.MyMod; reload(MyPak.MyMod); import MyPak; reload(MyPak); from MyPak import MyMod</code>. Except that this approach wouldn't scale to more complex cases (in terms of readability). The suggested solution seems cleaner, as it seems to guarantee that the module is erased from the environment.</span>
<span class="comment-copy">On 3.3 do <code>from imp import reload</code> to get <code>reload()</code> into the system</span>
<span class="comment-copy">On 3.5 I did <code>import importlib</code> before <code>importlib.reload()</code>.</span>
