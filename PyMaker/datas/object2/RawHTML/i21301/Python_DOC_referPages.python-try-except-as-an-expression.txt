<div class="post-text" itemprop="text">
<p>I find myself having this sort of pattern over and over:</p>
<pre><code>variable = ""
try:
    variable = ... do some file loading stuff ...
except:
    variable = ""
</code></pre>
<p>Is there any way to condense this into a single expression? Like with if-else statements you can turn:</p>
<pre><code>variable = ""
if something:
    variable = somethingelse
else:
    variable = ""
</code></pre>
<p>into</p>
<pre><code>variable = somethingelse if something else ""
</code></pre>
<p>Is there any equivalent thing for try-catch?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since agf already provided the approach I'd recommend, here's a version of his routine with a couple of minor enhancements:</p>
<pre><code>def try_except(success, failure, *exceptions):
    try:
        return success()
    except exceptions or Exception:
        return failure() if callable(failure) else failure
</code></pre>
<p>This version:</p>
<ol>
<li><p>Lets you specify exactly which exceptions will be caught as additional optional arguments. You should always catch the minimum set of exceptions that will do the job and let exceptions you can't handle bubble up to the caller.</p></li>
<li><p>Supports the use of a plain value as well as a function for the failure value. This saves you having to use a lambda in a lot of cases. (Of course, instead of <code>lambda: ''</code> you can just use <code>str</code>.)</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>def try_except(success, failure):
    try:
        return success()
    except:
        return failure()

variable = try_except(do_some_file_loading_stuff, lambda: '')
</code></pre>
<p>I think the code is self explanatory. It returns the value returned by <code>success</code> unless there is an error, then it returns the value returned by <code>failure</code>. If <code>do_some_file_loading_stuff</code> is an expression rather than just a function call, wrap it in a <code>lambda</code> as well.</p>
<p><strong>Edit:</strong> @kindall and I improved his version a bit so it's just as fast as mine, can be called exactly the same if you want, has more features, and is the same number of lines. Use it!</p>
<pre><code>def try_except(success, failure, *exceptions):
    try:
        return success()
    except exceptions or Exception:
        return failure() if callable(failure) else failure
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a context manager that provides a little bit of a shortcut:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def catch(*exceptions, **kwargs):
    try:
        yield kwargs.get("default", None)
    except exceptions or Exception:
        pass
</code></pre>
<p>Usage:</p>
<pre><code>with catch(ZeroDivisionError, default=0) as x:
    x = 3 / 0              # error

print x                    # prints 0, the default
</code></pre>
<p>The basic idea here is that the context manager returns whatever default value you pass it, which is then assigned to the variable you specified in the <code>with</code> statement's <code>as</code> clause. Then, inside the context, you execute a statement that tries to assign to that same variable. If it raises an exception, the context manager catches and silently ignores it, but since the assignment didn't happen, the default value remains.</p>
<p>Might be particularly useful for multi-line calculations that nevertheless result in a single value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, no, there is no language construct for it and I do not know any really legible and concise idiom either. I always wanted something like that. Some time ago someone gave me reasons to Python does not have something like <code>variable = function_cal() except ""</code> but they were not very convincing and I still miss this language construct :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Obviously, the latter way of doing it is more succinct and is preferred by many programmers like you. </p>
<p>While the language itself doesn't provide a "one-line try-except-catch" for whatever the reasons, all good and necessary, I presume, you can generally accomplish this, by changing the program, a little; like for example:</p>
<pre><code>try:
    a_var = a_dict.get('abcd')
except a_dict.KeyError:
    a_var = ''
</code></pre>
<p>into:</p>
<pre><code>a_var = a_dict.get('abcd',default='')
</code></pre>
<p>and similarly for the DB queries;</p>
<pre><code>try:
    a_qs = Model.objects.get(id=42)
except Model.DoesNotExist:
    a_qs = Model.objects.create(id=42)
</code></pre>
<p>with</p>
<pre><code>a_qs = Model.objects.get_or_create(id=42,**kwargs)
</code></pre>
<p>and add similar API's to your own programs where possible. try-except is rather "cheap" in Python and is exception based programming is preferred over the "check-first" approach generally suggested in Java like languages because of the expensive nature of the exception handling. So, you should rather wrap this "catching thing" in a method/function and call that every where, like for example the dict and other constructs do.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no easy way to simplify a try/catch statement like the if/else example, but I want to point out that python's "with" statement introduced in python2.5 made a lot of interfaces to file/db io try catch statements simpler and exception safe. IO operations tend to be where a lot of try/catch statements are used.</p>
<pre><code>with open("myfile.txt", "r") as f:
   # Do stuff with f
</code></pre>
<p>instead of</p>
<pre><code>try:
   f = open("myfile.txt", "r")
   # Do stuff with f
except:
   pass
finally:
   if f: f.close
</code></pre>
</div>
<span class="comment-copy">If an exception happens inside the try block when assigning <code>variable</code> then it won't get assigned, and will already be an empty string when you hit the except block. It may not shorten your code by much, but there's no need to assign it the value it already holds...</span>
<span class="comment-copy">Yes, but then he needs to add <code>pass</code> to the except, so it's still the same number of lines. It's the pre-<code>try</code>-<code>except</code> initialization that is unecessary.</span>
<span class="comment-copy">short answer, Big NO. Take exception as serious error than looking for syntactic sugar to coat it.  Add one more thing that is finally: no if else if else sort now.</span>
<span class="comment-copy">The problem with exceptions is that they aren't serious errors. When loading files from disk, for example, the proper way of checking if a file is there before loading is to go ahead and load it, and catch the exception if it doesn't exist.</span>
<span class="comment-copy">Yeah, in Python the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> coding style is common and preferable to <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a>, so exceptions <i>definitely</i> aren't serious errors.</span>
<span class="comment-copy">I like this. What about <code>exceptions = exceptions or Exception</code> or taking a list with a default of <code>Exception</code> (or just <code>exceptions = Exception</code> without the tuple) as refinements? Or <code>return failure if callable(failure) else failure</code>? (I like one liners too, like the OP).</span>
<span class="comment-copy">Yeah, you could quite code-golf this.  :-)  I will do a bit of that...</span>
<span class="comment-copy">I see it now -- remove that line completely and just <code>except exceptions or Exception:</code> -- inline and no need for the tuple. The same number of lines as my version with two extra features! It's even backwards compatible with my version.</span>
<span class="comment-copy">Hahah! Brilliant!</span>
<span class="comment-copy">As a bonus, it moves all the extra code into the exceptional path, so the more common success path is as fast is possible.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/7108193/frequently-repeated-try-except-in-python" title="frequently repeated try except in python">stackoverflow.com/questions/7108193/â€¦</a></span>
<span class="comment-copy">hmmm I'm not familiar with the with operator. I shall have to look it up</span>
<span class="comment-copy">What is that <code>catch</code> keyword.  I'm not sure that's a real thing.</span>
<span class="comment-copy">oh  yeah, that's meant to be except, clearly the above code wasn't tested :P</span>
