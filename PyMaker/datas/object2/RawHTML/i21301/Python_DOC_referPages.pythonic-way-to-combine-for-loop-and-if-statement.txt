<div class="post-text" itemprop="text">
<p>I know how to use both for loops and if statements on separate lines, such as:</p>
<pre><code>&gt;&gt;&gt; a = [2,3,4,5,6,7,8,9,0]
... xyz = [0,12,4,6,242,7,9]
... for x in xyz:
...     if x in a:
...         print(x)
0,4,6,7,9
</code></pre>
<p>And I know I can use a list comprehension to combine these when the statements are simple, such as:</p>
<pre><code>print([x for x in xyz if x in a])
</code></pre>
<p>But what I can't find is a good example anywhere (to copy and learn from) demonstrating a complex set of commands (not just "print x") that occur following a combination of a for loop and some if statements. Something that I would expect looks like:</p>
<pre><code>for x in xyz if x not in a:
    print(x...)
</code></pre>
<p>Is this just not the way python is supposed to work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://www.python.org/dev/peps/pep-0289/" rel="noreferrer">generator expressions</a> like this:</p>
<pre><code>gen = (x for x in xyz if x not in a)

for x in gen:
    print x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="http://www.python.org/dev/peps/pep-0020/">The Zen of Python</a> (if you are wondering whether your code is "Pythonic", that's the place to go):</p>
<ul>
<li>Beautiful is better than ugly.</li>
<li>Explicit is better than implicit.</li>
<li>Simple is better than complex.</li>
<li>Flat is better than nested.</li>
<li>Readability counts.</li>
</ul>
<p>The Pythonic way of getting the <a href="http://www.python.org/doc//current/library/functions.html#sorted"><code>sorted</code></a> <a href="http://www.python.org/doc//current/library/stdtypes.html#set.intersection"><code>intersection</code></a> of two <a href="http://www.python.org/doc//current/library/stdtypes.html#set"><code>set</code></a>s is:</p>
<pre><code>&gt;&gt;&gt; sorted(set(a).intersection(xyz))
[0, 4, 6, 7, 9]
</code></pre>
<p>Or those elements that are <code>xyz</code> but not in <code>a</code>:</p>
<pre><code>&gt;&gt;&gt; sorted(set(xyz).difference(a))
[12, 242]
</code></pre>
<p>But for a more complicated loop you may want to flatten it by iterating over a well-named <a href="http://www.python.org/doc//current/tutorial/classes.html#generator-expressions">generator expression</a> and/or calling out to a well-named function. Trying to fit everything on one line is rarely "Pythonic".</p>
<hr/>
<h2>Update following additional comments on your question and the accepted answer</h2>
<p>I'm not sure what you are trying to do with <a href="http://www.python.org/doc//current/library/functions.html#enumerate"><code>enumerate</code></a>, but if <code>a</code> is a dictionary, you probably want to use the keys, like this:</p>
<pre><code>&gt;&gt;&gt; a = {
...     2: 'Turtle Doves',
...     3: 'French Hens',
...     4: 'Colly Birds',
...     5: 'Gold Rings',
...     6: 'Geese-a-Laying',
...     7: 'Swans-a-Swimming',
...     8: 'Maids-a-Milking',
...     9: 'Ladies Dancing',
...     0: 'Camel Books',
... }
&gt;&gt;&gt;
&gt;&gt;&gt; xyz = [0, 12, 4, 6, 242, 7, 9]
&gt;&gt;&gt;
&gt;&gt;&gt; known_things = sorted(set(a.iterkeys()).intersection(xyz))
&gt;&gt;&gt; unknown_things = sorted(set(xyz).difference(a.iterkeys()))
&gt;&gt;&gt;
&gt;&gt;&gt; for thing in known_things:
...     print 'I know about', a[thing]
...
I know about Camel Books
I know about Colly Birds
I know about Geese-a-Laying
I know about Swans-a-Swimming
I know about Ladies Dancing
&gt;&gt;&gt; print '...but...'
...but...
&gt;&gt;&gt;
&gt;&gt;&gt; for thing in unknown_things:
...     print "I don't know what happened on the {0}th day of Christmas".format(thing)
...
I don't know what happened on the 12th day of Christmas
I don't know what happened on the 242th day of Christmas
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally think this is the prettiest version: </p>
<pre><code>a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]
for x in filter(lambda w: w in a, xyz):
  print x
</code></pre>
<h3>Edit</h3>
<p>if you are very keen on avoiding to use lambda you can use partial function application and use the operator module (that provides functions of most operators).</p>
<p><a href="https://docs.python.org/2/library/operator.html#module-operator" rel="noreferrer">https://docs.python.org/2/library/operator.html#module-operator</a></p>
<pre><code>from operator import contains
from functools import partial
print(list(filter(partial(contains, a), xyz)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]  
set(a) &amp; set(xyz)  
set([0, 9, 4, 6, 7])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would probably use:</p>
<pre><code>for x in xyz: 
    if x not in a:
        print x...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following is a simplification/one liner from the accepted answer: </p>
<pre><code>a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]

for x in (x for x in xyz if x not in a):
    print(x)

12
242
</code></pre>
<p>Notice that the <code>generator</code> was kept <strong>inline</strong>.  This was tested on <code>python2.7</code> and <code>python3.6</code>  (notice the parens in the <code>print</code> ;) )</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://wiki.python.org/moin/Generators" rel="noreferrer">generators</a> too, if generator expressions become too involved or complex:</p>
<pre><code>def gen():
    for x in xyz:
        if x in a:
            yield x

for x in gen():
    print x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>intersection</code> or <code>intersection_update</code></p>
<ul>
<li><p><strong>intersection</strong> :</p>
<pre><code>a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]
ans = sorted(set(a).intersection(set(xyz)))
</code></pre></li>
<li><p><strong>intersection_update</strong>:</p>
<pre><code>a = [2,3,4,5,6,7,8,9,0]
xyz = [0,12,4,6,242,7,9]
b = set(a)
b.intersection_update(xyz)
</code></pre>
<p>then <code>b</code> is your answer</p></li>
</ul>
</div>
<span class="comment-copy">That's how it is... don't overcomplicate things by trying to simplify them. <i>Pythonic</i> does not mean to avoid every explicit <code>for</code> loop and <code>if</code> statement.</span>
<span class="comment-copy">You can use the list generated in your list comprehension in a for loop. That would somewhat look like your last example.</span>
<span class="comment-copy">So getting down to processing, what's the fastest way to combine a for loop with an if statement, if the if statement is excluding values that have already been matched and the list is continually growing during the for loop's iteration?</span>
<span class="comment-copy">@Chewy, proper data structures will make the code faster, not syntactic sugar. For example, <code>x in a</code> is slow if <code>a</code> is a list.</span>
<span class="comment-copy">This is Python, an interpreted language; why is anyone discussing how fast code is at all?</span>
<span class="comment-copy"><code>gen = (y for (x,y) in enumerate(xyz) if x not in a)</code> returns &gt;&gt;&gt; <code>12</code> when I type <code>for x in gen: print x</code> -- so why the unexpected behavior with enumerate?</span>
<span class="comment-copy">Possible, but not nicer than the original for and if blocks.</span>
<span class="comment-copy">@ChewyChunks. That would work but the call to enumerate is redundant.</span>
<span class="comment-copy">I really miss in python being able to say <code>for x in xyz if x:</code></span>
<span class="comment-copy"><code>for x in (x for x in xyz if x not in a):</code> works for me, but why you shouldn't just be able to do <code>for x in xyz if x not in a:</code>, I'm not sure...</span>
<span class="comment-copy">Sounds like from the comments below, I should be studying up on generators. I've never used them. Thanks. Is a generator faster than the equivalent combination of FOR and IF statements? I've also used sets, but sometimes redundant elements in a list are information I can't discard.</span>
<span class="comment-copy">@ChewyChunks: Generators are not the only way to be Pythonic!</span>
<span class="comment-copy">@Johnsyweb, if you're going to quote the Zen of Python: "There should be one-- and preferably only one --obvious way to do it."</span>
<span class="comment-copy">@Wooble: There should. I quoted that section in <a href="http://stackoverflow.com/questions/6981495/how-can-i-concatenate-a-string-and-a-number-in-python/6981521#6981521">my answer to another question</a> around the same time!</span>
<span class="comment-copy"><code>filter(a.__contains__, xyz)</code>. Usually when people use lambda, they really need something much simpler.</span>
<span class="comment-copy">I think you misunderstood something. <code>__contains__</code> is a method like any other, only it is a <i>special</i> method, meaning it can be called indirectly by an operator (<code>in</code> in this case). But it can also be called directly, it is a part of the public API. Private names are specifically defined as having at most one trailing underscore, to provide exception for special method names - and they are subject to name mangling when lexically in class scopes. See <a href="https://docs.python.org/3/reference/datamodel.html#specialnames" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#specialnames</a> and <a href="https://docs.python.org/3.6/tutorial/classes.html#private-variables" rel="nofollow noreferrer">docs.python.org/3.6/tutorial/classes.html#private-variables</a> .</span>
<span class="comment-copy">It is certainly ok, but two imports just to be able to refer to a method that's accessible using just an attribute seems weird (operators are usually used when double dispatch is essential, but <code>in</code> is singly dispatched wrt right operand). Besides, note that <code>operator</code> also exports <code>contains</code> method under the name <code>__contains__</code>, so it surely is not a private name. I think you'll just have to learn to live with the fact that not every double underscore means "keep away". :-]</span>
<span class="comment-copy">Very Zen, @lazyr, but would not help me improve a complex code block that depends on iterating through one list and ignoring matching elements in another list. Is it faster to treat the first list as a set and compare union / difference with a second, growing "ignore" list?</span>
<span class="comment-copy">Try this <code>import time   a = [2,3,4,5,6,7,8,9,0]   xyz = [0,12,4,6,242,7,9]   start = time.time()   print (set(a) &amp; set(xyz))   print time.time() - start</code></span>
<span class="comment-copy">@ChewyChunks if either of the lists change during the iteration it will probably be faster to check each element against the ignore list -- except you should make it an ignore set. Checking for membership in sets is very fast: <code>if x in ignore: ...</code>.</span>
<span class="comment-copy">@lazyr I just rewrote my code using an <b>ignore set</b> over an ignore list. Appears to process time much slower. (To be fair I was comparing using <code>if set(a) - set(ignore) == set([]):</code> so perhaps that's why it was much slower than checking membership. I'll test this again in the future on a much simpler example than what I'm writing.</span>
<span class="comment-copy">This is a bit more useful to me. I've never looked at generators. They sound scary (because I saw them in modules that were generally a pain to use).</span>
