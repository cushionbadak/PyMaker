<div class="post-text" itemprop="text">
<p>I have a python program creates tmp directories under /temp by using tempfile.mkdtemp.<br/>
Unfortunately, the python program did not delete the directory after using it. So now the disk space is low.</p>
<p>Questions:</p>
<ol>
<li>How do I delete the temp directories left under /temp manually? I
tried to delete them manually but got "permission denied" error.</li>
<li>In the python program, how to delete temp dir after using them.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>To manage resources (like files) in Python, best practice is to use the <code><a href="http://docs.python.org/2/reference/compound_stmts.html#with" rel="noreferrer">with</a></code> keyword, which automatically releases the resources (i.e., cleans up, like closing files); this is available from Python 2.5.</p>
<p>From Python 3.2, you can use <code><a href="http://docs.python.org/3.4/library/tempfile.html#tempfile.TemporaryDirectory" rel="noreferrer">tempfile.TemporaryDirectory()</a></code> instead of <code>tempfile.mkdtmp()</code> – this is usable in <code>with</code> and automatically cleans up the directory:</p>
<pre><code>from tempfile import TemporaryDirectory

with TemporaryDirectory() as temp_dir:
    # ... do something with temp_dir
# automatically cleaned up when context exited
</code></pre>
<p>If you are using an earlier version of Python (at least 2.5, so have <code>with</code>), you can use <a href="https://pypi.python.org/pypi/backports.tempfile" rel="noreferrer">backports.tempfile</a>; see <a href="https://stackoverflow.com/a/39628795">Nicholas Bishop’s answer</a> to <a href="https://stackoverflow.com/q/19296146">tempfile.TemporaryDirectory context manager in Python 2.7</a>.</p>
<p>It’s easy and instructive to roll your own class, called a
<em><a href="http://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="noreferrer">context manager</a>.</em> The return value of the <code>__enter__()</code> method is bound to the target of the <code>as</code> clause, while the <code>__exit__()</code> method is called when the context is exited – even by exception – and performs cleanup.</p>
<pre><code>import shutil
import tempfile

class TemporaryDirectory(object):
    """Context manager for tempfile.mkdtemp() so it's usable with "with" statement."""
    def __enter__(self):
        self.name = tempfile.mkdtemp()
        return self.name

    def __exit__(self, exc_type, exc_value, traceback):
        shutil.rmtree(self.name)
</code></pre>
<p>You can simplify this with the <code><a href="http://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="noreferrer">@contextlib.contextmanager</a></code> decorator, so you don’t need to write a context manager manually. The code prior to the <code>yield</code> is  executed when entering the context, the yielded value is bound to the target of the <code>as</code>, and the code after the <code>yield</code> is executed when exiting the context. This is fundamentally a <a href="https://en.wikipedia.org/wiki/Coroutine" rel="noreferrer">coroutine</a> that encapsulates the resource acquisition and release, with the <code>yield</code> yielding control to the <a href="https://docs.python.org/2/reference/compound_stmts.html#grammar-token-suite" rel="noreferrer">suite</a> (body) of the <code>with</code> clause. Note that here you <em>do</em> need to have a <code>try...finally</code> block, as <code>@contextlib.contextmanager</code> does not catch exceptions in the <code>yield</code> – this just factors the resource management into a coroutine.</p>
<pre><code>from contextlib import contextmanager
import tempfile
import shutil

@contextmanager
def TemporaryDirectory():
    name = tempfile.mkdtemp()
    try:
        yield name
    finally:
        shutil.rmtree(name)
</code></pre>
<p>As simplylizz notes, if you don’t mind the directory already being deleted (which the above code assumes does not happen), you can catch the “No such file or directory” exception as follows:</p>
<pre><code>import errno
# ...
try:
    shutil.rmtree(self.name)
except OSError as e:
    # Reraise unless ENOENT: No such file or directory
    # (ok if directory has already been deleted)
    if e.errno != errno.ENOENT:
        raise
</code></pre>
<p>You can compare with the standard implementation in <a href="https://github.com/python/cpython/blob/master/Lib/tempfile.py" rel="noreferrer"><code>tempfile.py</code></a>; even this simple class has had bugs and evolved over the years.</p>
<p>For background on <code>with</code>, see:</p>
<ul>
<li>The Python Tutorial: <a href="http://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="noreferrer">Methods of File Objects</a></li>
<li><a href="http://docs.python.org/3/reference/datamodel.html#with-statement-context-managers" rel="noreferrer">With Statement Context Managers</a></li>
<li><a href="http://www.python.org/dev/peps/pep-0343/" rel="noreferrer">PEP 343 -- The "with" Statement</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Read the <a href="http://docs.python.org/library/tempfile.html#tempfile.mkdtemp">documentation</a>, it's simple. ;) From the docs: the directory is readable, writable, and searchable only by the creating user ID.</p>
<p>To delete temp directory try something like this:</p>
<pre><code>import errno
import shutil
import tempfile

try:
    tmp_dir = tempfile.mkdtemp()  # create dir
    # ... do something
finally:
    try:
        shutil.rmtree(tmp_dir)  # delete directory
    except OSError as exc:
        if exc.errno != errno.ENOENT:  # ENOENT - no such file or directory
            raise  # re-raise exception
</code></pre>
<p>Also you can try <a href="http://pypi.python.org/pypi/tempdir">tempdir</a> package or see its sources.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the user is responsible for deleting the temporary directory and its content created by using tempfile.mkdtemp().
it will not deleted automatically just like temporary file.
There are many ways you can delete the directory</p>
<p>If the directory is empty you can use </p>
<pre><code>`os.removedirs or os.rmdir`
</code></pre>
<p>Note it can be used only if the directory is empty otherwise will raise </p>
<blockquote>
<p>OSError</p>
</blockquote>
<p>This will delete the entire directory path:</p>
<pre><code>import shutil    
shutil.rmtree('/path/to/your/dir/')
</code></pre>
<p>be careful while using this, it will delete the whole directory and files inside it. </p>
</div>
<span class="comment-copy">I don't think the OP's question was understood. The suggested code is a good example of what you should write in your program to clear out the temp dirs created. However, what if you application crashes (hard) without the chance to run that clean-up code? Then you'll have a temp dir kicking around that can only be deleted by the original process that created it (at least that what the docs seem to indicate) -- how is one supposed to clean that up?</span>
<span class="comment-copy">Did you try to use the root account/admin?</span>
<span class="comment-copy">Regarding 1 (deleting manually): it's a permissions problem: fix the permissions and delete, e.g.: <code>chmod -R +w /tmp/tmp0ytcxm9c &amp;&amp; rm -fr /tmp/tmp0ytcxm9c</code> (if this is a permission error, you need to be the user that ran the program, or root).</span>
<span class="comment-copy">You could also use <a href="https://stackoverflow.com/questions/19296146/tempfile-temporarydirectory-context-manager-in-python-2-7/39628795#39628795">backports.tempfile</a></span>
<span class="comment-copy">Thanks, your solution is clear and works fine.</span>
<span class="comment-copy">this does not seem to be working. I got "Permission denied" error when running it. Also, I have many tmp directories on disk that I want to delete. I can not manually delete them also. What is the proper way to delete trees created by mkdtemp? thanks.</span>
<span class="comment-copy">Maybe the problem in the value of umask on your system? You can see it in the umask command output, try to change it to 022 by executing: umask 022 and then try my code again.</span>
<span class="comment-copy">FWIW, your answer is nicer than the documentation.</span>
<span class="comment-copy">This is a good answer. Note, however, that the tempdir doc link is currently dead.</span>
