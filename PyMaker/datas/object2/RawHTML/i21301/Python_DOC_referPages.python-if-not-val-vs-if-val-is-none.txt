<div class="post-text" itemprop="text">
<p>I've always coded in the style of <code>if not value</code>, however, a few guides have brought to my attention that while this style works, it seems to have 2 potential problems:</p>
<ol>
<li>It's not completely readable; <code>if value is None</code> is surely more understandable.</li>
<li>This can have implications later (and cause subtle bugs), since things like <code>[]</code> and <code>0</code> will evaluate to <code>False</code> as well.</li>
</ol>
<p>I am also starting to apply this idea to other comparisons, such as:</p>
<ul>
<li><code>if not value</code> vs <code>if value is False</code></li>
<li><code>if not value</code> vs <code>if value is []</code></li>
</ul>
<p>And so goes the list...</p>
<p>The question is, how far do you go with the principle? Where to draw the line, while keeping your code safe?</p>
<p>Should I always use the <code>if value is None</code> style no matter what?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a comparison to None if that's what you want. Use "if not value" if you just want to check if the value is considered false (empty list, none, false).</p>
<p>I find "if not value" to be cleaner looking and Pythonic.</p>
<p>Also, be careful with lists. You should not use is when comparing for an empty list. If you know you're getting a list, use "if " to check if it has any contents (or len()). Try typing this into the interpreter:</p>
<pre><code>&gt;&gt;&gt; a = []
&gt;&gt;&gt; a is []
False
</code></pre>
<p>This is because the temporary list you just made has a different address in memory than the one stored at 'a'. You don't see this with None, False, or True because these are all values that are singletons (they all refer to the same section of memory) so using the 'is' keyword works.</p>
<p>You'll also find that CPython interns strings so the following works.</p>
<pre><code>&gt;&gt;&gt; 'a' is 'a'
True
</code></pre>
<p>You should <em>not</em> rely on this. It is an implementation detail and this is not specified to work with every version of Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>No. If you want to run code when the value is false but isn't <code>None</code>, this would fail horribly. </p>
<p>Use <code>is None</code> if you're checking for identity with the <code>None</code> object. Use <code>not value</code> if you just want the value to be False.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your use of the <code>is</code> operator is a little problematic. <code>if value is []</code> will always be false, for example, because no two active lists have the same identity. It works great with <code>None</code> because <code>None</code> is a singleton (all references to <code>None</code> are the same object) but for other comparisons, use <code>==</code>.</p>
<p>However, <code>if value</code> and <code>if not value</code> are perfectly readable and useful.  IMHO there's no need to be more specific, <em>unless</em> you need to treat various types of truthy or falsy values differently, as, for example, distinguishing between 0 and <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>My answer is simple, as it applies to most coding problems: Don't try to write something that just works. Try to express your intent as clearly as possible. If you want to check if a value is false, use <code>if not value</code>. If you want to check for <code>None</code>, write it down. It always depends on the situation and your judgement.</p>
<p>You should not try to find rules which can be applied without thinking. If you find those rules, it's a job for a computer. Nor for a human! ;-)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if not value:
    pass
</code></pre>
<p>is fine and "pythonic".  It does not cause subtle bugs, the rules are explicit and (I find) <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">easy to understand</a>.</p>
<p>If you need to differentiate between False and None, as you mentioned use:</p>
<pre><code>if not value is None:  # or False, or == [], etc.
    pass

# more readable
if value is not None:  # or False, or != [], etc.
    pass
</code></pre>
<p>I find the above rarely necessary though.</p>
<p>In general, it is preferred to make positive conditions, and put them first.  They are easier to understand at a glance and hold up well as complexity increases (as it always seems to).</p>
<pre><code>if value:
    pass
else:
    pass
</code></pre>
</div>
<span class="comment-copy">One of Pythons writing disciplines is <b>duck</b> typing. In case of <code>None</code>, <code>[]</code>, <code>0</code> and so on that means <code>If something looks like nothing, acts like nothing then it is nothing.</code> If you need to be more explicit about value being tested, then use <code>==</code>.</span>
<span class="comment-copy">Good catch. Just learned something new about the <code>is</code> operator. :) From a little more research I had found that <code>if not</code> is proper for things like <code>0</code> and <code>[]</code> and <code>False</code>, and as said, <code>if value is None</code> for <code>None</code>. Makes sense, as <code>if not</code> will always be boolean, but the <code>if not</code> for <code>None</code> is a different story, hence <code>if value is None</code>. :)</span>
<span class="comment-copy">That's why I had said it <i>can</i> cause subtle bugs. I'd rather not go into details, but this <a href="http://boodebr.org/main/python/tourist/none-empty-nothing" rel="nofollow noreferrer">post</a> should explain it. :)</span>
<span class="comment-copy">Apologies, but you need to determine the correct test and apply it.  The linked blog post is by someone who doesn't understand python's truth test rules and wants to use C's instead.  "Subtle" bugs are what happen when one doesn't understand the rules.</span>
<span class="comment-copy"><code>value is not None</code> tends to read better than <code>not value is None</code>, and both generate the exact same code (namely, the <code>is not</code> operator).</span>
<span class="comment-copy">Yes I agree.  Would still avoid it however.</span>
