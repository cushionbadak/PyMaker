<div class="post-text" itemprop="text">
<p>I've got list of objects. I want to find one (first or whatever) object in this list that has attribute (or method result - whatever) equal to <code>value</code>. </p>
<p>What's is the best way to find it?</p>
<p>Here's test case:</p>
<pre><code>  class Test:
      def __init__(self, value):
          self.value = value

  import random

  value = 5

  test_list = [Test(random.randint(0,100)) for x in range(1000)]

  # that I would do in Pascal, I don't believe isn't anywhere near 'Pythonic'
  for x in test_list:
      if x.value == value:
          print "i found it!"
          break
</code></pre>
<p>I think using generators and <code>reduce()</code> won't make any difference because it still would be iterating through list.</p>
<p>ps.: Equation to <code>value</code> is just an example. Of course we want to get element which meets any condition.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>next((x for x in test_list if x.value == value), None)
</code></pre>
<p>This gets the first item from the list that matches the condition, and returns <code>None</code> if no item matches. It's my preferred single-expression form.</p>
<p>However,</p>
<pre><code>for x in test_list:
    if x.value == value:
        print "i found it!"
        break
</code></pre>
<p>The naive loop-break version, is perfectly Pythonic -- it's concise, clear, and efficient. To make it match the behavior of the one-liner:</p>
<pre><code>for x in test_list:
    if x.value == value:
        print "i found it!"
        break
else:
    x = None
</code></pre>
<p>This will assign <code>None</code> to <code>x</code> if you don't <code>break</code> out of the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since it has not been mentioned just for completion.
The good ol' filter to filter your to be filtered elements.</p>
<p>Functional programming ftw.
</p>
<pre><code>####### Set Up #######
class X:

    def __init__(self, val):
        self.val = val

elem = 5

my_unfiltered_list = [X(1), X(2), X(3), X(4), X(5), X(5), X(6)]

####### Set Up #######

### Filter one liner ### filter(lambda x: condition(x), some_list)
my_filter_iter = filter(lambda x: x.val == elem, my_unfiltered_list)
### Returns a flippin' iterator at least in Python 3.5 and that's what I'm on

print(next(my_filter_iter).val)
print(next(my_filter_iter).val)
print(next(my_filter_iter).val)

### [1, 2, 3, 4, 5, 5, 6] Will Return: ###
# 5
# 5
# Traceback (most recent call last):
#   File "C:\Users\mousavin\workspace\Scripts\test.py", line 22, in &lt;module&gt;
#     print(next(my_filter_iter).value)
# StopIteration


# You can do that None stuff or whatever at this point, if you don't like exceptions.
</code></pre>
<p>I know that generally in python list comprehensions are preferred or at least
that is what I read, but I don't see the issue to be honest. Of course Python is not an FP language, but Map / Reduce / Filter are perfectly readable and are the most standard of standard use cases in functional programming. </p>
<p>So there you go. Know thy functional programming. </p>
<p>filter condition list</p>
<p>It won't get any easier than this:</p>
<pre><code>next(filter(lambda x: x.val == value,  my_unfiltered_list)) # Optionally: next(..., None) or some other default value to prevent Exceptions
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just ran into a similar problem and devised a small optimization for the case where no object in the list meets the requirement.(for my use-case this resulted in major performance improvement):</p>
<p>Along with the list test_list, I keep an additional set test_value_set which consists of values of the list that I need to filter on. So here the else part of agf's solution becomes very-fast.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also implement rich comparison via <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> method for your <code>Test</code> class and use <code>in</code> operator.
Not sure if this is the best stand-alone way, but in case if you need to compare <code>Test</code> instances based on <code>value</code> somewhere else, this could be useful.</p>
<pre><code>class Test:
    def __init__(self, value):
        self.value = value

    def __eq__(self, other):
        """To implement 'in' operator"""
        # Comparing with int (assuming "value" is int)
        if isinstance(other, int):
            return self.value == other
        # Comparing with another Test object
        elif isinstance(other, Test):
            return self.value == other.value

import random

value = 5

test_list = [Test(random.randint(0,100)) for x in range(1000)]

if value in test_list:
    print "i found it"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For below code, xGen is an anonomous generator expression, yFilt is a filter object. Note that for xGen the additional None parameter is returned rather than throwing StopIteration when the list is exhausted.</p>
<pre><code>arr =((10,0), (11,1), (12,2), (13,2), (14,3))

value = 2
xGen = (x for x in arr if x[1] == value)
yFilt = filter(lambda x: x[1] == value, arr)
print(type(xGen))
print(type(yFilt))

for i in range(1,4):
    print('xGen: pass=',i,' result=',next(xGen,None))
    print('yFilt: pass=',i,' result=',next(yFilt))
</code></pre>
<p>Output:</p>
<pre><code>&lt;class 'generator'&gt;
&lt;class 'filter'&gt;
xGen: pass= 1  result= (12, 2)
yFilt: pass= 1  result= (12, 2)
xGen: pass= 2  result= (13, 2)
yFilt: pass= 2  result= (13, 2)
xGen: pass= 3  result= None
Traceback (most recent call last):
  File "test.py", line 12, in &lt;module&gt;
    print('yFilt: pass=',i,' result=',next(yFilt))
StopIteration
</code></pre>
</div>
<span class="comment-copy">Here's a good discussion of this question: <a href="http://tomayko.com/writings/cleanest-python-find-in-list-function" rel="nofollow noreferrer">tomayko.com/writings/cleanest-python-find-in-list-function</a></span>
<span class="comment-copy">The original post is <b>ridiculously</b> out of date, but the 2nd response matches my one-line version exactly. I'm not convinced it's better than the basic loop version though.</span>
<span class="comment-copy">+1 for the reassuring "The naive loop-break version, is perfectly Pythonic".</span>
<span class="comment-copy">great solution, but how do i modify your line so that I can make x.value actually mean x.fieldMemberName where that name is stored in value?   field = "name" next((x for x in test_list if x.field == value), None)  so that in this case, i am actually checking against x.name, not x.field</span>
<span class="comment-copy">@StewartDale It's not totally clear what you're asking, but I think you mean <code>... if getattr(x, x.fieldMemberName) == value</code>. That will fetch the attribute from <code>x</code> with the name stored in <code>fieldMemberName</code>, and compare it to <code>value</code>.</span>
<span class="comment-copy">@ThatTechGuy -- The <code>else</code> clause is meant to be on the <code>for</code> loop, not the <code>if</code>. (Rejected Edit).</span>
<span class="comment-copy">@agf Wow I literally had no idea that existed.. <a href="http://book.pythontips.com/en/latest/for_-_else.html" rel="nofollow noreferrer">book.pythontips.com/en/latest/for_-_else.html</a> cool!</span>
<span class="comment-copy">I quite like the style of this but there are two potential issues. <b>1</b>: It works in Python 3 only; in Python 2, <code>filter</code> returns a list which is not compatible with <code>next</code>. <b>2</b>: it requires that there is a definite match, else you will get a <code>StopIteration</code> exception.</span>
<span class="comment-copy">1: I'm not aware of Python 2. When I started using Python, Python 3 was already available. Unfortunately I'm clueless about the specifcs of Python 2. 2. @freethebees as pointed out by agf. You can use next(..., None) or some other default value, if you are no fan of exceptions. I also added it as a comment to my code.</span>
<span class="comment-copy">I've updated the answer to reflect the comments.</span>
