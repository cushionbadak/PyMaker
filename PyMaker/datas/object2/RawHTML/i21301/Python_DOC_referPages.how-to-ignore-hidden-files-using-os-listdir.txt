<div class="post-text" itemprop="text">
<p>My python script executes an <code>os.listdir(path)</code> where the path is a queue containing archives that I need to treat one by one. </p>
<p>The problem is that I'm getting the list in an array and then I just do a simple <code>array.pop(0)</code>. It was working fine until I put the project in subversion. Now I get the <code>.svn</code> folder in my array and of course it makes my application crash.</p>
<p>So here is my question: is there an existing function that ignore hidden files when executing an <code>os.listdir()</code> and if not what would be the best way?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can write one yourself:</p>
<pre><code>def listdir_nohidden(path):
    for f in os.listdir(path):
        if not f.startswith('.'):
            yield f
</code></pre>
<p>Or you can use a <a href="http://docs.python.org/library/glob.html">glob</a>:</p>
<pre><code>def listdir_nohidden(path):
    return glob.glob(os.path.join(path, '*'))
</code></pre>
<p>Either of these will ignore all filenames beginning with <code>'.'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an old question, but seems like it is missing the obvious answer of using list comprehension, so I'm adding it here for completeness:</p>
<pre><code>[f for f in os.listdir(path) if not f.startswith('.')]
</code></pre>
<p>As a side note, the docs state <code>listdir</code> will return results in 'arbitrary order' but a common use case is to have them sorted alphabetically. If you want the directory contents alphabetically sorted without regards to capitalization, you can use:</p>
<pre><code>sorted([f for f in os.listdir('./')], key=lambda f: f.lower())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Windows, Linux and OS X:</p>
<pre><code>if os.name == 'nt':
    import win32api, win32con


def folder_is_hidden(p):
    if os.name== 'nt':
        attribute = win32api.GetFileAttributes(p)
        return attribute &amp; (win32con.FILE_ATTRIBUTE_HIDDEN | win32con.FILE_ATTRIBUTE_SYSTEM)
    else:
        return p.startswith('.') #linux-osx
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>filter( lambda f: not f.startswith('.'), os.listdir('.'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/glob.html" rel="noreferrer">glob</a>:</p>
<pre><code>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('*')
</code></pre>
<p>(<code>glob</code> claims to use <code>listdir</code> and <code>fnmatch</code> under the hood, but it also checks for a leading <code>'.'</code>, not by using <code>fnmatch</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it is too much of work to go through all of the items in a loop. I would prefer something simpler like this:</p>
<pre><code>lst = os.listdir(path)
if '.DS_Store' in lst:
    lst.remove('.DS_Store')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>filenames = (f.name for f in os.scandir() if not f.name.startswith('.'))
</code></pre>
</div>
<span class="comment-copy">the proposed function <code>listdir_nohidden</code> is not quite compatible with <code>os.listdir</code>, since the use of <code>yield</code> makes it a generator. Instead it should run through the output list from <code>os.listdir</code> and remove entries that start with '.'</span>
<span class="comment-copy">@0sh: Why does it have to remove things in-place? Just define a new function that does <code>list(listdir_nohidden(path))</code> and that new function is exactly compatible with <code>os.listdir</code>.</span>
<span class="comment-copy"><code>key=lambda f: f.lower()</code> can be written without lambda: <code>key=str.lower</code></span>
<span class="comment-copy">should also work on a Mac, hidden files start there with '.' as well.</span>
<span class="comment-copy">This is the only portable answer, great job, but the other answers provide a full wrapper for os.listdir so... <code>[f for f in os.listdir(path) if not folder_is_hidden(f)]</code></span>
