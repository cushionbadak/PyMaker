<div class="post-text" itemprop="text">
<p>I have a large number of two-membered sub-lists that are members of a list called <code>mylist</code>:</p>
<pre><code>mylist = [['AB001', 22100],
          ['AB001', 32935],
          ['XC013', 99834],
          ['VD126', 18884],
          ['AB001', 34439],
          ['XC013', 86701]]
</code></pre>
<p>I want to sort <code>mylist</code> into new sub-lists based on whether the sub-lists contain the same string as the first item. For example, this is what I am looking for my code to output:</p>
<pre><code>newlist = [['AB001', 22100], ['AB001', 32935], ['AB001', 34439]],
          [['XC013', 99834], ['XC013', 86701]],
          [['VD126', 18884]]
</code></pre>
<p>Here is how I was trying to code this:</p>
<pre><code>mylist = sorted(mylist)
newlist = []
for sublist in mylist:
    id = sublist[0]
if id == next.id:
    newlist.append(id)
print newlist
</code></pre>
<p>I was also trying to understand if <code>itertools.groupby()</code> was the correct tool for this problem. Can someone help me with this problem? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that you can't have decimal literals that start with a leading zero. I'll assume that this is actually stored in a variable so there is no leading zero.</p>
<p>You were right about this being a job for <code>groupby</code>:</p>
<pre><code>from itertools import groupby
from operator import itemgetter

mylist = [['AB001', 22100],
          ['AB001', 32935],
          ['XC013', 99834],
          ['VD126', 18884],
          ['AB001', 4439],
          ['XC013', 86701]]

print [list(value) for key, value in groupby(sorted(mylist), key=itemgetter(0))]
</code></pre>
<p>This will give you a list-of-lists, grouped by the first item in the sublist.</p>
<pre><code>[[['AB001', 4439], ['AB001', 22100], ['AB001', 32935]], 
 [['VD126', 18884]], 
 [['XC013', 86701], ['XC013', 99834]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a></h3>
<p>An <code>itertools.groupby</code> solution will incur O(<em>n</em> log <em>n</em>) cost since the input must be sorted <em>first</em>. You can a use <code>defaultdict</code> of lists for a guaranteed O(<em>n</em>) solution:</p>
<pre><code>from collections import defaultdict

dd = defaultdict(list)
for item in mylist:
    dd[item[0]].append(item)

res = list(dd.values())

print(res)

[[['AB001', 22100], ['AB001', 32935], ['AB001', 34439]],
 [['XC013', 99834], ['XC013', 86701]],
 [['VD126', 18884]]]
</code></pre>
</div>
<span class="comment-copy">Your example has 04439 integer, Python tries to interpret it like octal, but fail because of digit 9. So, you can't use your example, can you fix it :)?</span>
<span class="comment-copy">You just need to do a sort (groupby is not what you are looking for). I am not sure how this is best done in Python.</span>
<span class="comment-copy">Thanks, I updated my code to remote the zero. In actuality, my integers do not have zeros as the first digit - sorry for the typo.</span>
<span class="comment-copy">@erisco <code>groupby</code> <i>is</i> what he's looking for.. look at his example result, it's grouped, not just sorted.</span>
<span class="comment-copy">@agf, I still don't think so, because <code>sorted(mylist, key=itemgetter(0))</code> gives the same result as your example that uses <code>groupby</code>, from what I can see. Oh, wait, there are the extra square brackets that I missed. Yes, a sort then group is fine.</span>
<span class="comment-copy">To save yourself an import, could you have just used lambda instead of itemgetter?</span>
<span class="comment-copy">Yep, but it's slower, and this is what <code>itemgetter</code> is for.</span>
<span class="comment-copy">That's exactly the answer I wanted to give.</span>
<span class="comment-copy">@agf Thank you! This was precisely what I was looking for. For some reason, I am having a hard time understanding how to use <code>itertools.groupby</code>. I'm going to take some time to read the docs as this seems like a really useful function.</span>
<span class="comment-copy"><code>itertools</code> has a tool for everything. It's sometimes hard to figure out which end of the tool you're supposed to hold, though :).</span>
