<div class="post-text" itemprop="text">
<p>Trying to get to grips with regular expressions in Python, I'm trying to output some HTML highlighted in part of a URL. My input is</p>
<pre><code>images/:id/size
</code></pre>
<p>my output should be</p>
<pre><code>images/&lt;span&gt;:id&lt;/span&gt;/size
</code></pre>
<p>If I do this in Javascript</p>
<pre><code>method = 'images/:id/size';
method = method.replace(/\:([a-z]+)/, '&lt;span&gt;$1&lt;/span&gt;')
alert(method)
</code></pre>
<p>I get the desired result, but if I do this in Python</p>
<pre><code>&gt;&gt;&gt; method = 'images/:id/huge'
&gt;&gt;&gt; re.sub('\:([a-z]+)', '&lt;span&gt;$1&lt;/span&gt;', method)
'images/&lt;span&gt;$1&lt;/span&gt;/huge'
</code></pre>
<p>I don't, how do I get Python to return the correct result rather than <code>$1</code>? Is <code>re.sub</code> even the right function to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <a href="http://docs.python.org/library/re.html#regular-expression-syntax" rel="noreferrer"><code>\1</code></a> instead of <code>$1</code>:</p>
<pre><code>In [1]: import re

In [2]: method = 'images/:id/huge'

In [3]: re.sub(r'(:[a-z]+)', r'&lt;span&gt;\1&lt;/span&gt;', method)
Out[3]: 'images/&lt;span&gt;:id&lt;/span&gt;/huge'
</code></pre>
<p>Also note the use of <a href="http://docs.python.org/reference/lexical_analysis.html#string-literals" rel="noreferrer">raw strings</a> (<code>r'...'</code>) for regular expressions. It is not mandatory but removes the need to escape backslashes, arguably making the code slightly more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>\1</code> instead of <code>$1</code>.</p>
<blockquote>
<p>\number Matches the contents of the group of the same number.</p>
</blockquote>
<p><a href="http://docs.python.org/library/re.html#regular-expression-syntax" rel="noreferrer">http://docs.python.org/library/re.html#regular-expression-syntax</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For the replacement portion, Python uses <code>\1</code> the way sed and vi do, <strong>not</strong> <code>$1</code> the way Perl, Java, and Javascript (amongst others) do.  Furthermore, because <code>\1</code> interpolates in regular strings as the character U+0001, you need to use a raw string or \escape it.</p>
<pre><code>Python 3.2 (r32:88445, Jul 27 2011, 13:41:33) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; method = 'images/:id/huge'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(':([a-z]+)', r'&lt;span&gt;\1&lt;/span&gt;', method)
'images/&lt;span&gt;id&lt;/span&gt;/huge'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A backreference to the whole match value is <code>\g&lt;0&gt;</code>, see <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code> documentation</a>:</p>
<blockquote>
<p>The backreference <code>\g&lt;0&gt;</code> substitutes in the entire substring matched by the RE.</p>
</blockquote>
<p>See the <a href="https://ideone.com/TFMUlz" rel="nofollow noreferrer">Python demo</a>:</p>
<pre><code>import re
method = 'images/:id/huge'
print(re.sub(r':[a-z]+', r'&lt;span&gt;\g&lt;0&gt;&lt;/span&gt;', method))
# =&gt; images/&lt;span&gt;:id&lt;/span&gt;/huge
</code></pre>
</div>
<span class="comment-copy">For those looking for this example and wondering why it fails on your tests, make sure to add the r (character 'r') before the group string</span>
<span class="comment-copy">The <code>r</code> specifier was the issue this answer helped me with as well.</span>
<span class="comment-copy"><code>\g&lt;0&gt;</code> works when there is no matching group, i.e. for a non-grouping regex like <code>':[a-z]+'</code>. Straight from <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.sub</a></span>
<span class="comment-copy">is there a way to modify what's in \1 before the substitution?</span>
