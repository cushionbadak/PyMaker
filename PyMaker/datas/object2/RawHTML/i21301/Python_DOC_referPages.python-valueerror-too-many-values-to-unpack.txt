<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5466618/too-many-values-to-unpack-iterating-over-a-dict-key-string-value-list">'too many values to unpack', iterating over a dict. key=&gt;string, value=&gt;list</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I am getting that exception from this code:</p>
<pre><code>class Transaction:
    def __init__ (self):
        self.materials = {}

    def add_material (self, m):
        self.materials[m.type + m.purity] = m

    def serialize (self):
        ser_str = 'transaction_start\n'

        for k, m in self.materials:
            ser_str += m.serialize ()

        sert += 'transaction_end\n'
        return ser_str
</code></pre>
<p>The <code>for</code> line is the one throwing the exception. The <code>m</code>s are <code>Material</code> objects. Anybody have any ideas why?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>self.materials</code> is a <a href="http://www.python.org/doc//current/library/stdtypes.html#mapping-types-dict" rel="noreferrer"><code>dict</code></a> and by default you are iterating over just the keys (which are strings).</p>
<p>Since <code>self.materials</code> has more than two keys<a href="https://stackoverflow.com/questions/7053551/python-valueerror-too-many-values-to-unpack/7053615#comment34696354_7053615">*</a>, they can't be unpacked into the <a href="http://www.python.org/doc//current/library/functions.html#tuple" rel="noreferrer"><code>tuple</code></a> "<code>k, m</code>", hence the <a href="http://docs.python.org/2/library/exceptions.html#exceptions.ValueError" rel="noreferrer"><code>ValueError</code></a> <a href="http://docs.python.org/2/library/exceptions.html" rel="noreferrer">exception</a> is raised.</p>
<p>In Python 2.<em>x</em>, to iterate over the keys and the values (the <a href="http://www.python.org/doc//current/library/functions.html#tuple" rel="noreferrer"><code>tuple</code></a> "<code>k, m</code>"), we use <a href="http://www.python.org/doc//current/library/stdtypes.html#dict.iteritems" rel="noreferrer"><code>self.materials.iteritems()</code></a>.</p>
<p>However, since you're throwing the key away anyway, you may as well simply iterate over the dictionary's values:</p>
<pre><code>for m in self.materials.itervalues():
</code></pre>
<p>In Python 3.<em>x</em>, prefer <a href="http://docs.python.org/3/library/stdtypes.html#dict.values" rel="noreferrer"><code>dict.values()</code></a> (which returns a <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="noreferrer">dictionary view object</a>):</p>
<pre><code>for m in self.materials.values():
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for k, m in self.materials.items():
</code></pre>
<p>example:</p>
<pre><code>miles_dict = {'Monday':1, 'Tuesday':2.3, 'Wednesday':3.5, 'Thursday':0.9}
for k, v in miles_dict.items():
    print("%s: %s" % (k, v))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterating over a dictionary object itself actually gives you an iterator over its <em>keys</em>. Python is trying to unpack keys, which you get from <code>m.type + m.purity</code> into <code>(m, k)</code>.</p>
<p>My crystal ball says <code>m.type</code> and <code>m.purity</code> are both strings, so your keys are also strings. Strings are iterable, so they can be unpacked; but iterating over the string gives you an iterator over its characters. So whenever <code>m.type + m.purity</code> is more than two characters long, you have too many values to unpack. (And whenever it's shorter, you have too few values to unpack.)</p>
<p>To fix this, you can iterate explicitly over the <code>items</code> of the dict, which are the (key, value) pairs that you seem to be expecting. But if you only want the values, then just use the values.</p>
<p>(In 2.x, <code>itervalues</code>, <code>iterkeys</code>, and <code>iteritems</code> are typically a better idea; the non-<code>iter</code> versions create a new list object containing the values/keys/items. For large dictionaries and trivial tasks within the iteration, this can be a lot slower than the <code>iter</code> versions which just set up an iterator.)</p>
</div>
<span class="comment-copy">Something i didn't get here, why do you say it has more than 2 keys?</span>
<span class="comment-copy">@NunoFurtado: 2.5 years later, I can only guess my younger self's reasoning. Here goes! Were there zero or one keys in <code>self.materials</code>, I'd expect the <code>ValueError</code> message to be <code>need more than n values to unpack</code>. Were there exactly two keys, these would have been unpacked into <code>k</code> and <code>m</code> (and presumably a different error would occur on the next line). Three or more keys? <code>ValueError: too many values to unpack</code>, per the title.</span>
<span class="comment-copy">lol, hadn't even noticed the post age. i ran into a similar issue and i just don't get why that error would occur, none the less i used your solution to fix the problem</span>
<span class="comment-copy">Thanks. Your tip helped me to solve my problem, when updating a dictionary of the form { 'longkey_n' : [ 'value_1', 'value_n' ] } :-D. My program also complained about too many values...</span>
