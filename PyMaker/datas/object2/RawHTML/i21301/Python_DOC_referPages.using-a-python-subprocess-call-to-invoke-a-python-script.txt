<div class="post-text" itemprop="text">
<p>I have a Python script that needs to invoke another Python script in the same directory. I did this:</p>
<pre><code>from subprocess import call
call('somescript.py')
</code></pre>
<p>I get the following error:</p>
<pre><code>call('somescript.py')
File "/usr/lib/python2.6/subprocess.py", line 480, in call
return Popen(*popenargs, **kwargs).wait()
File "/usr/lib/python2.6/subprocess.py", line 633, in __init__
errread, errwrite)
File "/usr/lib/python2.6/subprocess.py", line 1139, in _execute_child

raise child_exception
OSError: [Errno 2] No such file or directory
</code></pre>
<p>I have the script somescript.py in the same folder though. Am I missing something here?</p>
</div>
<div class="post-text" itemprop="text">
<p>If 'somescript.py' isn't something you could normally execute directly from the command line (I.e., <code>$: somescript.py</code> works), then you can't call it directly using call.</p>
<p>Remember that the way Popen works is that the first argument is the program that it executes, and the rest are the arguments passed to that program. In this case, the program is actually <em>python</em>, not your script. So the following will work as you expect:</p>
<pre><code>subprocess.call(['python', 'somescript.py', somescript_arg1, somescript_val1,...]).
</code></pre>
<p>This correctly calls the Python interpreter and tells it to execute your script with the given arguments.</p>
<p>Note that this is different from the above suggestion:</p>
<pre><code>subprocess.call(['python somescript.py'])
</code></pre>
<p>That will try to execute the program called <em>python somscript.py</em>, which clearly doesn't exist.</p>
<pre><code>call('python somescript.py', shell=True)
</code></pre>
<p>Will also work, but using strings as input to call is not cross platform, is dangerous if you aren't the one building the string, and should generally be avoided if at all possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Windows? Unix?  </p>
<p>Unix will need a shebang and exec attribute to work:</p>
<pre><code>#!/usr/bin/env python
</code></pre>
<p>as the first line of script and:</p>
<pre><code>chmod u+x script.py
</code></pre>
<p>at command-line or </p>
<pre><code>call('python script.py'.split())
</code></pre>
<p>as mentioned previously.</p>
<p>Windows should work if you add the <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen" rel="nofollow">shell=True parameter</a> to the "call" call.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out this.</p>
<pre><code>from subprocess import call 
with open('directory_of_logfile/logfile.txt', 'w') as f:
   call(['python', 'directory_of_called_python_file/called_python_file.py'], stdout=f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.call</code> expects the same arguments as <code>subprocess.Popen</code> - that is a list of strings (the <code>argv</code> in C) rather than a single string.</p>
<p>It's quite possible that your child process attempted to run "s" with the parameters "o", "m", "e", ...</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're on Linux/Unix you could avoid call() altogether and not execute an entirely new instance of the Python executable and its environment.</p>
<pre><code>import os

cpid = os.fork()
if not cpid:
    import somescript
    os._exit(0)

os.waitpid(cpid, 0)
</code></pre>
<p>For what it's worth.</p>
</div>
<div class="post-text" itemprop="text">
<p>What's wrong with</p>
<pre><code>import sys
from os.path import dirname, abspath

local_dir = abspath(dirname(__file__))
sys.path.append(local_dir)

import somescript
</code></pre>
<p>or better still wrap the functionality in a function, e.g. baz, then do this.</p>
<pre><code>import sys
from os.path import dirname, abspath

local_dir = abspath(dirname(__file__))
sys.path.append(local_dir)

import somescript
somescript.baz()
</code></pre>
<p>There seem to be a lot of scripts starting python processes or forking, is that a requirement?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, check if <code>somescript.py</code> is executable and starts with something along the lines of <code>#!/usr/bin/python</code>.
If this is done, then you can use <code>subprocess.call('./somescript.py')</code>.</p>
<p>Or as another answer points out, you could do <code>subprocess.call(['python', 'somescript.py'])</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def main(argv):
    host = argv[0]
    type = argv[1]
    val = argv[2]

    ping = subprocess.Popen(['python ftp.py %s %s %s'%(host,type,val)],stdout = subprocess.PIPE,stderr = subprocess.PIPE,shell=True)
    out = ping.communicate()[0]
    output = str(out)
    print output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The subprocess call is a very literal-minded system call. it can be used for any generic process...hence does not know what to do with a Python script automatically.</p>
<p>Try </p>
<pre><code>call ('python somescript.py')
</code></pre>
<p>If that doesn't work, you might want to try an absolute path, and/or check permissions on your Python script...the typical fun stuff.</p>
</div>
<span class="comment-copy">Is <code>.</code> in your <code>PATH</code>? Is somescript.py executable?</span>
<span class="comment-copy">Why are you trying to execute it? why not <code>import</code> it?</span>
<span class="comment-copy">@wooble yes. It is in path and and executable too.  Yes. I could also import it. But would eitherway like to know what i am doing wrong here since i think this is supposed to work.</span>
<span class="comment-copy">I have this issue, but the path to the script is in my basrc file so I can call it from terminal as myscript (args). When I try to do the above from python, I get a not found error?</span>
<span class="comment-copy">According to the <a href="https://docs.python.org/3/library/subprocess.html#older-high-level-api" rel="nofollow noreferrer">documentation</a> in Python 3.5 on you can now use <code>run()</code> instead of <code>call()</code>.</span>
<span class="comment-copy"><code>call('python script.py')</code> won't work on non-Windows systems. It should be <code>check_call([sys.executable or 'python', '/path/to/script.py'])</code>. And you don't need the shebang and executable permissions if <code>python</code> executable is specified.</span>
<span class="comment-copy">sys.executable should be enough for all sane situations.</span>
<span class="comment-copy">Only *nix: using fork you will inherit from the parent process python interpreter (with all existing imports, ...). If you want a brand new interpretor this not a good choice. See the diff fork/exec unix system call.</span>
<span class="comment-copy"><code>subprocess</code> module uses <code>fork/exec</code> on POSIX systems and <code>CreateProcess</code> on Windows. No need to use <code>fork</code> directly if you want to run a Python script.</span>
<span class="comment-copy">Just a random pointer:  I've found it to be useful to use #!/usr/bin/env python so that if a module has been loaded, you are automatically running with the loaded python version.</span>
