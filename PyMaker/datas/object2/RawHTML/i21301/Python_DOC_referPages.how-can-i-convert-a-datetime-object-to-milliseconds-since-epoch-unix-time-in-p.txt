<div class="post-text" itemprop="text">
<p>I have a Python <code>datetime</code> object that I want to convert to unix time, or seconds/milliseconds since the 1970 epoch.</p>
<p>How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>It appears to me that the simplest way to do this is</p>
<pre><code>import datetime

epoch = datetime.datetime.utcfromtimestamp(0)

def unix_time_millis(dt):
    return (dt - epoch).total_seconds() * 1000.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.3, add new method.</p>
<pre><code>datetime.timestamp()
</code></pre>
<p><a href="https://docs.python.org/3.3/library/datetime.html#datetime.datetime.timestamp">https://docs.python.org/3.3/library/datetime.html#datetime.datetime.timestamp</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; # replace datetime.datetime.now() with your datetime object
&gt;&gt;&gt; int(datetime.datetime.now().strftime("%s")) * 1000 
1312908481000
</code></pre>
<p>Or the help of the time module (and without date formatting):</p>
<pre><code>&gt;&gt;&gt; import datetime, time
&gt;&gt;&gt; # replace datetime.datetime.now() with your datetime object
&gt;&gt;&gt; time.mktime(datetime.datetime.now().timetuple()) * 1000
1312908681000.0
</code></pre>
<p>Answered with help from: <a href="http://pleac.sourceforge.net/pleac_python/datesandtimes.html" rel="noreferrer">http://pleac.sourceforge.net/pleac_python/datesandtimes.html</a></p>
<p>Documentation:</p>
<ul>
<li><a href="http://docs.python.org/library/time.html#time.mktime" rel="noreferrer"><code>time.mktime</code></a></li>
<li><a href="http://docs.python.org/library/datetime.html#datetime.date.timetuple" rel="noreferrer"><code>datetime.timetuple</code></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Recommendedations from the <a href="https://docs.python.org/2.7/library/time.html" rel="noreferrer">Python 2.7 docs for the <code>time</code> module</a></p>
<p><a href="https://i.stack.imgur.com/qlVeq.png" rel="noreferrer"><img alt="Converting between time representations" src="https://i.stack.imgur.com/qlVeq.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use Delorean to travel in space and time!</p>
<pre><code>import datetime
import delorean
dt = datetime.datetime.utcnow()
delorean.Delorean(dt, timezone="UTC").epoch
</code></pre>
<p><a href="http://delorean.readthedocs.org/en/latest/quickstart.html" rel="nofollow">http://delorean.readthedocs.org/en/latest/quickstart.html</a>
 </p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I do it:</p>
<pre><code>from datetime import datetime
from time import mktime

dt = datetime.now()
sec_since_epoch = mktime(dt.timetuple()) + dt.microsecond/1000000.0

millis_since_epoch = sec_since_epoch * 1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import datetime
from calendar import timegm

# Note: if you pass in a naive dttm object it's assumed to already be in UTC
def unix_time(dttm=None):
    if dttm is None:
       dttm = datetime.utcnow()

    return timegm(dttm.utctimetuple())

print "Unix time now: %d" % unix_time()
print "Unix timestamp from an existing dttm: %d" % unix_time(datetime(2014, 12, 30, 12, 0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; import calendar

&gt;&gt;&gt; #your datetime object
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2013, 3, 19, 13, 0, 9, 351812)

&gt;&gt;&gt; #use datetime module's timetuple method to get a `time.struct_time` object.[1]
&gt;&gt;&gt; tt = datetime.datetime.timetuple(now)
&gt;&gt;&gt; tt
time.struct_time(tm_year=2013, tm_mon=3, tm_mday=19, tm_hour=13, tm_min=0, tm_sec=9,     tm_wday=1, tm_yday=78, tm_isdst=-1)

&gt;&gt;&gt; #If your datetime object is in utc you do this way. [2](see the first table on docs)
&gt;&gt;&gt; sec_epoch_utc = calendar.timegm(tt) * 1000
&gt;&gt;&gt; sec_epoch_utc
1363698009

&gt;&gt;&gt; #If your datetime object is in local timeformat you do this way
&gt;&gt;&gt; sec_epoch_loc = time.mktime(tt) * 1000
&gt;&gt;&gt; sec_epoch_loc
1363678209.0
</code></pre>
<p>[1] <a href="http://docs.python.org/2/library/datetime.html#datetime.date.timetuple" rel="nofollow">http://docs.python.org/2/library/datetime.html#datetime.date.timetuple</a></p>
<p>[2] <a href="http://docs.python.org/2/library/time.html" rel="nofollow">http://docs.python.org/2/library/time.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time
seconds_since_epoch = time.mktime(your_datetime.timetuple()) * 1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another form of a solution with normalization of your time object:</p>
<pre><code>def to_unix_time(timestamp):
    epoch = datetime.datetime.utcfromtimestamp(0) # start of epoch time
    my_time = datetime.datetime.strptime(timestamp, "%Y/%m/%d %H:%M:%S.%f") # plugin your time object
    delta = my_time - epoch
    return delta.total_seconds() * 1000.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A bit of pandas code:</p>
<pre><code>import pandas

def to_millis(dt):
    return int(pandas.to_datetime(dt).value / 1000000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a function I made based on the answer above</p>
<pre><code>def getDateToEpoch(myDateTime):
    res = (datetime.datetime(myDateTime.year,myDateTime.month,myDateTime.day,myDateTime.hour,myDateTime.minute,myDateTime.second) - datetime.datetime(1970,1,1)).total_seconds()
    return res
</code></pre>
<p>You can wrap the returned value like this : str(int(res)) 
To return it without a decimal value to be used as string or just int (without the str)</p>
</div>
<div class="post-text" itemprop="text">
<p>This other solution for covert datetime to unixtimestampmillis.</p>
<pre><code>private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

    public static long GetCurrentUnixTimestampMillis()
    {
        DateTime localDateTime, univDateTime;
        localDateTime = DateTime.Now;          
        univDateTime = localDateTime.ToUniversalTime();
        return (long)(univDateTime - UnixEpoch).TotalMilliseconds;
    } 
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/8777753/4279">Converting datetime.date to UTC timestamp in Python</a></span>
<span class="comment-copy">So far this is the best solution (if python version &gt;2.7). Because the implementation of <code>%s</code> is OS dependent! Thus anyone want the code works reliably regardless on which OS, should NEVER use <code>%s</code>. For 2.3 &lt; py ver &lt;2.7. One can simply build a <code>total_seconds()</code> like this: <code>delta.days*86400+delta.seconds+delta.microseconds/1e6</code></span>
<span class="comment-copy">note: <code>dt</code> must be in UTC (not local). See <a href="http://stackoverflow.com/a/8778548/4279">similar answer with Python 2.6/3 support</a></span>
<span class="comment-copy">amphibient: Reverting your edit since the docs claim utcfromtimestamp is a class method of datetime.datetime and the repl seems to agree.</span>
<span class="comment-copy">Worth mentioning that if all you want is a true unix timestamp as defined here <a href="http://en.wikipedia.org/wiki/Unix_time" rel="nofollow noreferrer">en.wikipedia.org/wiki/Unix_time</a> (and so will only be using the unix_time function from this answer) then you should wrap delta.total_seconds() with int to avoid ending up with a float</span>
<span class="comment-copy">Why oh why does <code>datetime.utcfromtimestamp(0)</code> return a datetime without tzinfo? It's right there in the method name, <b>utc</b>fromtimestamp. In order to make it non-naive I have to do something like <code>datetime.utcfromtimestamp(0).replace(tzinfo=pytz.UTC)</code>. This is necessary if <code>dt</code> is timezone aware or else you will get <code>TypeError: can't subtract offset-naive and offset-aware datetimes</code></span>
<span class="comment-copy">Note: <code>.timestamp()</code> method assumes that a naive input datetime is in the local timezone (and the local time may be ambiguous). If it is in UTC then use <a href="http://stackoverflow.com/a/8778548/4279"><code>dt.replace(tzinfo=timezone.utc).timestamp()</code> instead</a>.</span>
<span class="comment-copy">datetime.timestamp() returns epoch seconds as a float. To obtain miliseconds: int(datetime.timestamp() * 1000)</span>
<span class="comment-copy">This answer is not a copy-and-pasteable example, in the spirit of the un-human-friendly docs at <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer">docs.python.org/3/library/…</a> --this is:  <code>datetime.datetime.timestamp(datetime.datetime.now())</code></span>
<span class="comment-copy"><code>datetime.datetime.now( ).timestamp( )</code> works also</span>
<span class="comment-copy">In 3.6 (at least), datetime.timestamp() assumes a timezone naive (tzinfo=None) datetime is in UTC. So always better to have your timezone set: <code>datetime.datetime.now(pytz.timezone('Europe/Paris')).timestamp() == datetime.datetime.now(pytz.utc).timestamp() == datetime.datetime.utcnow().timestamp()</code> but not (always) equal to <code>datetime.datetime.now().timestamp()</code> (this last one is only equal to the rest if the local tz is UTC...)</span>
<span class="comment-copy">Btw, strftime("%s") returns an empty string for me. The second way works fine.</span>
<span class="comment-copy">Only has second accuracy</span>
<span class="comment-copy">'%s' is not supported by Python e.g., it might be absent on Windows. <code>.timetuple()</code> returns <code>tm_isdst=-1</code> it forces <code>mktime()</code> to guess. It may guess wrongly during DST (50% chance of an error +/- hour). Both '%s' and <code>mktime()</code> may use the wrong utc offset for dates from the past. You need a historical timezone db such as provided by <code>pytz</code> module to reliably convert local time to POSIX timestamp (unless OS already provides such db)</span>
<span class="comment-copy"><code>time.mktime(ts.timetuple())</code> where ts is python's datetime object</span>
<span class="comment-copy">@suhail: read my comment above about <code>mktime/timetuple</code>. Also <code>timetuple()</code> strips fractions of a second and the point of the question is to get the timestamp with millisecond precision.</span>
<span class="comment-copy">Why the down vote? Pls let me know.</span>
<span class="comment-copy">Only works for seconds, not milliseconds.</span>
<span class="comment-copy">@ChristopherBull Just divide the number of milliseconds by 1000 to get to seconds</span>
<span class="comment-copy">You misunderstood and got it the wrong way around. Seconds are all ready available in the above functions. You can convert it to milliseconds, but it would be the precision of a second.</span>
<span class="comment-copy">This answer uses the <code>time</code> module, but the OP asked about <code>datetime</code> module. FWIW, the simplest current epoch is <code>int(time.time())</code></span>
<span class="comment-copy">see <a href="http://stackoverflow.com/questions/6999726/how-can-i-convert-a-datetime-object-to-milliseconds-since-epoch-unix-time-in-p?answertab=votes#comment36393216_6999787">my comment about timetuple/mktime</a></span>
<span class="comment-copy">@J.F.Sebastian Thanks for the heads up! indeed there is no dst being considered. If your server is in localtime instead of UTC then it will make a difference. I haven't found (yet) any compelling reason for setting servers in anything other than UTC. My moto is "write UTC, read local-time" so you know always where you are staying...</span>
<span class="comment-copy">You can always use calendar.timegm instead of mktime to avoid the issue of mktime trying to guess the timezone.</span>
<span class="comment-copy"><code>timegm()</code> works only with utc time. It doesn't use <code>tm_isdst</code> therefore you could use <code>utcnow.timetuple()</code> instead of <code>utcnow.utctimetuple()</code>. Note: using <code>naive_local_datetime.utctimetuple()</code> would be wrong here. It doesn't translate local time to utc. Also <code>timetuple()</code> call strips fractions of a second from the result (whether it matters depends on application). Also the question asks about *milli*​seconds, not seconds</span>
<span class="comment-copy">I prefer to use utcnow() and utctimetuple() to make the code absolutely clear that you're dealing with UTC (and this way anyone reading it doesn't have to remember that timegm is UTC only). utctimetuple() doesn't imply translation on a naive dttm object (hence initing the dttm with utcnow() ). Also, question mentioned seconds or milliseconds.</span>
<span class="comment-copy">Note: should have said in last comment I read the question as implying he wanted seconds or milliseconds (probably my mistake). For millis just multiply by 1000 (as the top scoring answer suggests).</span>
<span class="comment-copy"><code>utctimetuple()</code> strips fractions of a second. Multiplying by <code>1000</code> won't get them back.</span>
<span class="comment-copy">Because of the way the OP asked this question, it's unclear exactly what he/she wanted (i.e. a true unix timestamp or a timestamp with millisecond accuracy). Regardless, both questions have already been asked and answered elsewhere. Having said that, I think the answers here are the quickest and cleanest for people to grok and do a nice job of illustrating the various solutions to the problem.</span>
<span class="comment-copy">This is wrong! The timetuple does not include millisecond, thus mktime will not return the epoch with millisecond resolution. It is useless in this case.</span>
<span class="comment-copy">@Wang - you are correct sir, this does not return millis, only seconds</span>
<span class="comment-copy">see <a href="http://stackoverflow.com/questions/6999726/how-can-i-convert-a-datetime-object-to-milliseconds-since-epoch-unix-time-in-p?answertab=votes#comment36393216_6999787">my comment about timetuple/mktime</a></span>
<span class="comment-copy">If you remove <code>* 1000</code>, though, you do get <code>seconds_since_epoch</code>. Upvoting this answer because I don't care about milliseconds right now.</span>
<span class="comment-copy">hahaha unusual but works +1</span>
<span class="comment-copy">Question is about Python language</span>
