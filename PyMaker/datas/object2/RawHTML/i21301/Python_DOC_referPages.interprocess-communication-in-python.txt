<div class="post-text" itemprop="text">
<p>What is a clean and elegant way to do interprocess communication between two different python processes?  I currently use named pipes in the OS, but it feels a bit hacky.  I rewrote my stuff with <code>dbus</code> services, which worked, but it seems when running the code remotely through an SSH session it now tries to initialise X11 which seems completely unnecessary for the things I want to do (they aren't GUI related).  So maybe <code>dbus</code> is a bit too heavyweight.  I was about to redesign again using sockets, but it seems quite low-level so I thought there might be a higher level module I could import and use which I simply don't know the name of, and I thought I should ask on SO first..</p>
<p>My requirement is to be able to run <code>python foo.py</code> and have that process just doing it's thing there, like a daemon, and be able to send messages to it with <code>python foo.py --bar</code>.  The latter call should just sends a message to the existing process and terminates, possibly with a return code <code>0</code> for success or other for failure (so some two-way communication will be required).  </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/multiprocessing.html" rel="noreferrer"><code>multiprocessing</code> library</a> provides <a href="http://docs.python.org/library/multiprocessing.html#multiprocessing-listeners-clients" rel="noreferrer">listeners and clients</a> that wrap sockets and allow you to pass arbitrary python objects.</p>
<p>Your server could listen to receive python objects:</p>
<pre><code>from multiprocessing.connection import Listener

address = ('localhost', 6000)     # family is deduced to be 'AF_INET'
listener = Listener(address, authkey='secret password')
conn = listener.accept()
print 'connection accepted from', listener.last_accepted
while True:
    msg = conn.recv()
    # do something with msg
    if msg == 'close':
        conn.close()
        break
listener.close()
</code></pre>
<p>Your client could send commands as objects:</p>
<pre><code>from multiprocessing.connection import Client

address = ('localhost', 6000)
conn = Client(address, authkey='secret password')
conn.send('close')
# can also send arbitrary objects:
# conn.send(['a', 2.5, None, int, sum])
conn.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nah, <a href="http://zeromq.org">zeromq</a> is the way to go. Delicious, isn't it?</p>
<pre><code>import argparse
import zmq

parser = argparse.ArgumentParser(description='zeromq server/client')
parser.add_argument('--bar')
args = parser.parse_args()

if args.bar:
    # client
    context = zmq.Context()
    socket = context.socket(zmq.REQ)
    socket.connect('tcp://127.0.0.1:5555')
    socket.send(args.bar)
    msg = socket.recv()
    print msg
else:
    # server
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind('tcp://127.0.0.1:5555')
    while True:
        msg = socket.recv()
        if msg == 'zeromq':
            socket.send('ah ha!')
        else:
            socket.send('...nah')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From my experience, <a href="http://rpyc.readthedocs.org/en/latest/"><code>rpyc</code></a> is by far the simplest and most elegant way to go about it.</p>
<p>(I know this is an old question, but I've just stumbled upon it..)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use sockets; local communication was strongly optimized, so you shouldn't have performance problems and it gives you the ability to distribute your application to different physical nodes if the needs should arise.</p>
<p>With regard to the "low-level" approach, you're right. But you can always use an higher-level wrapper depending on your needs. <a href="http://docs.python.org/library/xmlrpclib.html" rel="nofollow">XMLRPC</a> could be a good candidate, but it is maybe overkill for the task you're trying to perform.</p>
<p><a href="http://twistedmatrix.com/trac/" rel="nofollow">Twisted</a> offers some good protocol simple implementations, such as <a href="http://twistedmatrix.com/documents/8.2.0/api/twisted.protocols.basic.LineReceiver.html" rel="nofollow">LineReceiver</a> (for simple line based messages) or the more elegant AMP (which was, by the way, <a href="http://amp-protocol.net/" rel="nofollow">standardized and implemented in different languages</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use sockets, but use Twisted to give you some abstraction, and to make things easy. <a href="http://twistedmatrix.com/documents/current/core/examples/#auto0" rel="nofollow">Their Simple Echo Client / Server example</a> is a good place to start.</p>
<p>You would just have to combine the files and instantiate and run either the client or server depending on the passed argument(s).</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out a cross-platform library/server called RabbitMQ. Might be too heavy for two-process communication, but if you need multi-process or multi-codebase communication (with various different means, e.g. one-to-many, queues, etc), it is a good option.</p>
<p>Requirements:</p>
<pre><code>$ pip install pika
$ pip install bson # for sending binary content
$ sudo apt-get rabbitmq-server # ubuntu, see rabbitmq installation instructions for other platforms
</code></pre>
<p>Publisher (sends data):</p>
<pre><code>import pika, time, bson, os

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()
channel.exchange_declare(exchange='logs', type='fanout')

i = 0
while True:
    data = {'msg': 'Hello %s' % i, b'data': os.urandom(2), 'some': bytes(bytearray(b'\x00\x0F\x98\x24'))}
    channel.basic_publish(exchange='logs', routing_key='', body=bson.dumps(data))
    print("Sent", data)
    i = i + 1
    time.sleep(1)

connection.close()
</code></pre>
<p>Subscriber (receives data, can be multiple):</p>
<pre><code>import pika, bson

connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='logs', type='fanout')

result = channel.queue_declare(exclusive=True)
queue_name = result.method.queue

channel.queue_bind(exchange='logs', queue=queue_name)

def callback(ch, method, properties, body):
    data = bson.loads(body)
    print("Received", data)

channel.basic_consume(callback, queue=queue_name, no_ack=True)
channel.start_consuming()
</code></pre>
<p>Examples based on <a href="https://www.rabbitmq.com/tutorials/tutorial-two-python.html" rel="nofollow">https://www.rabbitmq.com/tutorials/tutorial-two-python.html</a></p>
</div>
<span class="comment-copy">In python 3 authkey should be a byte string: authkey=b'secret password'</span>
<span class="comment-copy">really a good solution, no extra libraries to install, and just works as expected. thanks!</span>
<span class="comment-copy">Worked well for me! And easy to run in the background using <code>threading.Thread</code></span>
<span class="comment-copy">Great solution.  After reading the docs, specifically the section on <a href="https://docs.python.org/3/library/multiprocessing.html#authentication-keys" rel="nofollow noreferrer">Authentication Keys</a>, it seems like the data transferred between client and server is not encrypted.  Anyone know the best way to encrypt data transmitted between client and server?</span>
<span class="comment-copy">thanks, very nice</span>
<span class="comment-copy">can this be modified to work in a multi-threaded environment?  i have several worker threads connecting now, and it seems to be causing assertion failures in the zmq c code</span>
<span class="comment-copy">You can also wrap zmq with pizco: <a href="https://pizco.readthedocs.io/en/latest/" rel="nofollow noreferrer">pizco.readthedocs.io/en/latest</a></span>
<span class="comment-copy">delicious üçïüçïüçïüçï</span>
<span class="comment-copy">Aren't sockets relatively slow for local use on Windows? (Or am I thinking of all local IPC?) So it might depend on the OPs deployment environment. And if you're using Twisted, they have <code>ProcessProtocol</code>s too, which might be worth looking at.</span>
<span class="comment-copy">ProcessProtocol solves a completely different problematic and can't be used to communicate with an already running process.</span>
<span class="comment-copy">Regarding windows, you may be right; I've only a very limited experience on windows. Regarding "all local IPC", if I'll find my references for what stated above, I'll add the link.</span>
