<div class="post-text" itemprop="text">
<p>This is my code for iterating on "<strong>ListOfDocuments</strong>" which is a list of over <strong>500,000</strong> dicts. Each of those dicts have around 30 key-value pairs that I need.</p>
<pre><code>    for document in ListOfDocuments:
        for field in document:
            if(field=="USELESS"):
                continue
            ExtraList[AllParameters[field]] = document[field]
        ExtraList[AllParameters["C_Name"]] = filename.split(".")[0]
        AppendingDataframe.loc[len(AppendingDataframe)] = ExtraList
</code></pre>
<p>What I'm trying to do is, store all possible column names in <strong>AllParameters</strong>, loop through the ListOfDocuments followed by looping through the obtained dict, followed by iterating each key-value pair and saving them in <strong>ExtraList</strong> which I append finally in the <strong>AppendingDataframe.</strong></p>
<p>This approach is extremely slow even on most powerful of the machines and I know this is not the right way to do it. Any help would be very appreciated.</p>
<p><strong>Edit:</strong>
A sample document looks like a normal key-value with over 30 keys.</p>
<p>Eg</p>
<p>{' FKey':12,'Skey':22,'NConfig':'NA','SCHEMA':'CD123...}</p>
<p>And I'd like to extract and store the individual key-value pairs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make threads. You can find out how many files you need to look through and possibly split it across 4 threads. This will make the process much faster as it will allow the documents to be read at the same time</p>
<p>You could start by making a method that accepts a list of files then loop through those. Then you could pass a few sections of the main list to the method and run them in threads. That should provide a decent increase in speed</p>
</div>
<div class="post-text" itemprop="text">
<p>You can implement this by implementing a function that processes a single entry of the list and then use multiprocessing:</p>
<pre><code>import multiprocessing as multi
from multiprocessing import Manager

manager = Manager()

data = manager.list([])

def func(a):          #Implement here the function 
    data.append(a)    #that processes one dict from the list

p = multi.Pool(processes=16)
p.map(func, ListOfDocuments)

print data
</code></pre>
</div>
<span class="comment-copy">Can you share sample input and expected output data?</span>
<span class="comment-copy">Added the sample.</span>
<span class="comment-copy">` extract and store the individual key-value pairs` - you mean create separate variable for key-value pair?</span>
<span class="comment-copy">Does just <code>df = pd.DataFrame(ListOfDocuments)</code> work here?</span>
<span class="comment-copy">Alderven - I'm planning to perform some operations on them and then store them in a file, probably in CSV format.</span>
