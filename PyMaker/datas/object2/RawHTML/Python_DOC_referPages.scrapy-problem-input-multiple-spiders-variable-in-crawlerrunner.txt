<div class="post-text" itemprop="text">
<p>I  write my scrapy spider that start with two class variable, and then want to run it from Runner. 
I did try:</p>
<pre><code>yield runner.crawl(MySpider1, variable1, variable2)
</code></pre>
<p>or</p>
<pre><code>yield runner.crawl(MySpider1, [variable1, variable2])
</code></pre>
<p>or </p>
<pre><code>yield runner.crawl(MySpider1, (variable1, variable2))
</code></pre>
<p>or </p>
<pre><code>yield runner.crawl(MySpider1(variable1, variable2))
</code></pre>
<p>but got </p>
<blockquote>
<p>missing 1 required postional argument</p>
</blockquote>
<p>here is my code:</p>
<pre><code>from twisted.internet import reactor, defer
from scrapy.crawler import CrawlerRunner
from scrapy.utils.log import configure_logging

class MySpider(scrapy.Spider):

    def _init__(self, variable1, variable2, *args, **kwargs):
        super().__init__(*arg, **kwargs)
        self.variable1 = variable1
        self.variable2 = variable2

    # below should be any normal spider's parser





class Run_Spider_From_SubClass(SpiderEmail):

    def __init__(self, *args, **kwargs):
        super().__init__(self, *args, **kwargs)

        configure_logging()
        self.runner = CrawlerRunner(get_project_settings())

    @defer.inlineCallbacks
    def crawl(self):
        for variable1, variable2 in mydict.item():
            yield self.runner.crawl(MySpider, variable1, varialbe2)  # input issue that result in missing 1 positional argument
        reactor.stop()

    def run_spider_in_loop(self):
        self.crawl()
        reactor.run()

runner = Run_Spider_From_SubClass()
runner.run_spider_in_loop()
</code></pre>
<p>what should be correct way to input spider's variable in Runnner? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to override <code>__init__</code> in <code>MySpider</code> (and notice that you have a missing <code>_</code> there anyway).</p>
<p>To pass parameters, you need to use <em>named/keyword</em> arguments, not <em>positional</em> arguments:</p>
<pre><code>yield self.runner.crawl(MySpider, variable1=variable1, variable2=variable2)
</code></pre>
<p>This will automatically make it available in your spider as a class variable: <code>self.variable1</code>.</p>
</div>
<span class="comment-copy">Thank, this is working now. I mess with super() from Run_Spider_From_SubClass.</span>
