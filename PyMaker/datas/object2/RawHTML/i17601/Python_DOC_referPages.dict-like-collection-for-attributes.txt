<div class="post-text" itemprop="text">
<p>Is there a class in Python 2.7 that behaves like:</p>
<pre><code>x = AttrDict(foo=1, bar=2)
x.foo  -&gt; 1
x.bar  -&gt; 2
</code></pre>
<p>for arbitrary attributes / constructor keywords? </p>
<ul>
<li><p>A <code>dict</code> is close, but doesn't have attribute access <strike>nor such a nice constructor syntax</strike>.</p></li>
<li><p>A named tuple comes close too, but I don't want to create a new type for each combination of attributes.</p></li>
</ul>
<p>Something like that would be handy to have sometimes. I could make one myself in a minute, but it sounds like something that might exist in Python already.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.3, the standard solution is <a href="http://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow"><code>types.SimpleNamespace</code></a>, but this is not backported to 2.7. A very similar type, <a href="http://docs.python.org/2.7/library/argparse.html#argparse.Namespace" rel="nofollow"><code>argparse.Namespace</code></a> exists in 2.7. It's a little obscure but documented and hence okay to rely on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Going along with the subclassing solution, you could do something like this:</p>
<pre><code>class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self
</code></pre>
<p>It looks a little weird, but it should work. It takes advantage of the builtin attribute location for python objects <code>__dict__</code></p>
<pre><code>&gt;&gt;&gt;x = AttrDict(foo=1, bar=2)
&gt;&gt;&gt;x.foo  
1
&gt;&gt;&gt;x.bar 
2
&gt;&gt;&gt;x.baz = 3
&gt;&gt;&gt;x.baz
3
&gt;&gt;&gt;x.missing
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'AttrDict' object has no attribute 'missing'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can subclass <code>dict</code> to do something like this:(Thanks to @delnan, two such objects are already available in standard library)</p>
<pre><code>class AttrDict(dict):
    def __getattr__(self, attr):
        return self[attr]
    def __setattr__(self, attr, val):
        self.__setitem__(attr, val)
...         
&gt;&gt;&gt; x = AttrDict(foo=1, bar=2)
&gt;&gt;&gt; x.foo
1
&gt;&gt;&gt; x.bar
2
&gt;&gt;&gt; x.spam = 'eggs'
&gt;&gt;&gt; x.spam
'eggs'
</code></pre>
</div>
<span class="comment-copy">Actually, <code>dict</code> <i>does</i> have such nice constructor syntax, try it: <code>dict(foo=1, bar=2)</code> -&gt; <code>{'foo': 1, 'bar': 2}</code>. The crux is that keys are not attributes.</span>
<span class="comment-copy">You just blew my mind. I've used dict sooo many times and have never noticed that. How embarrassing.</span>
<span class="comment-copy">It took me a while to understand that documentation :-) I think  someone reading my code, seeing argparse imported, would be rather confused. Still nice answer, I'd never found it.</span>
<span class="comment-copy">I think you have to drop the <code>**</code> in front of <code>kwargs</code> when making the super call. At least that is my solution. <i>edit</i> I'm wrong... it works.</span>
<span class="comment-copy">It should only be valid with the **, not sure what you mean...</span>
<span class="comment-copy">Sorry about that. It works without them as well: <code>.__init__(kwargs)</code>. Since <code>kwargs</code> is a dict too, that is simply using the copy-ctr. I wasn't using <code>*args</code> in my variant at all. I didn't know that dicts could be initialized with keywords. Yours is nicer without doubt.</span>
<span class="comment-copy">Why thank you, +1</span>
<span class="comment-copy">You are not <i>overriding</i> dict, you are sub-classing it.</span>
<span class="comment-copy">@SanjayT.Sharma Oops! wrong choice of words. :)</span>
<span class="comment-copy">@delnan Never heard of those, so a +1 to you.</span>
<span class="comment-copy">I'm not sure whether subclassing <code>dict</code> is the best approach though: I know OP described it as such, but inheriting the <code>dict</code> functionality means several attribute names (<code>items</code>, <code>values</code>, and other common ones) are reserved/unavailable.</span>
<span class="comment-copy">@delnan That's true, even <code>namedtuple</code> class has attributes that start with <code>_</code> to prevent such collisions.</span>
