<div class="post-text" itemprop="text">
<p>I am wondering if there is a more succinct method for doing the following:</p>
<p>When <code>h</code>, <code>t</code>, <code>r</code> are numpy arrays, I want to do the following:</p>
<pre><code>hL, tL, rL = map(lambda m: len(set(m)), [h, t, r])
</code></pre>
<p>which computes the number of non-repeated items in the individual arrays. However, the lambda expression sticks out like a sore thumb. If the non-repeated thing weren't a problem, I would have written:</p>
<pre><code>hL, tL, rL = map(len, [h, t, r])
</code></pre>
<p>Which is so much cooler. We have dispensed of the lambda expression in its entirety. Having dabbled in Haskell for a couple of months, I am really beginning to believe that Python should be able to provide a chaining operator like <code>.</code> in Haskell so that the first expression can be simply reduced to the following:</p>
<pre><code>hL, tL, rL = map(len . set, [h, t, r])
</code></pre>
<p>Which is so much better!!</p>
<p>I saw something that uses the <code>reduce</code> method for doing this, but that is simply more ugly than the previous method. I wonder if anyone has something that they know about that can solve the problem? I am aware that there are problems with non-strict evaluation that <em>may</em> make programs unstable, but when we are working on simple things like this, that should not be a concern?</p>
</div>
<div class="post-text" itemprop="text">
<p>To compute the number of unique elements in a numpy array, you can use <code>unique(x).size</code> or <code>len(unique(x))</code> (see <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html" rel="nofollow"><code>numpy.unique</code></a>).  If you really want to make the calculation of the three lengths a "one-liner", you could write:</p>
<pre><code>hL, tL, rL = [len(unique(x)) for x in h, t, r]
</code></pre>
<p>In case it matters: for moderate to large arrays, <code>unique(x)</code> can be a lot faster than <code>set(x)</code>, but for small arrays, <code>set(x)</code> is faster.  (I haven't explored the performance over a wide range of array sizes and data types, so I'll leave "large" and "small" undefined.  Test it yourself--but only if this code is a performance bottleneck.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not provide composition operator.</p>
<p>How about using <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>?</p>
<pre><code>&gt;&gt;&gt; h = [1,2,3]
&gt;&gt;&gt; t = [1,1,1,1]
&gt;&gt;&gt; r = [1,2,2,1]
&gt;&gt;&gt; hL, tL, rL = [len(set(m)) for m in h, t, r]
&gt;&gt;&gt; hL, tL, rL
(3, 1, 2)
</code></pre>
</div>
<span class="comment-copy">I really like this answer Thanks!</span>
<span class="comment-copy">actually that does look better. Thanks!</span>
