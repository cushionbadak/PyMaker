<div class="post-text" itemprop="text">
<p>I have a lot of strings: about 14,000 in a list of tuples.
alot of the strings have commas and newlines and maybe even unicode delimiters - not 100% sure. </p>
<p>I need to write the tuples to file, preferably in some format the excel or numbers can open. I tried CSV, but all the commas in the strings mess up the file.</p>
<p>How should I write my list of tuples to file, what format should the file be so that the weird content in the strings does not affect the formatting of the file</p>
</div>
<div class="post-text" itemprop="text">
<p>In python csv module you can define the <code>delimiter</code> other than a comma:</p>
<pre><code>csv.writer(file, delimiter=':')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the target is Excel then you could use an Excel file writing module such as <a href="http://xlsxwriter.readthedocs.org/" rel="nofollow">XlsxWriter</a> or <a href="https://pypi.python.org/pypi/xlwt" rel="nofollow">xlwt</a>.</p>
<p>That would avoid any issues with CSV separators.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't change anything.</p>
<p>Since "my sample of tweets covers almost every unicode char", there is no reasonable safe delimiter you can choose.</p>
<p>But CSV has ways of dealing with that: escaping special characters, quoting fields with special characters in them, or both. There are many options to choose from, which you can see in <a href="http://docs.python.org/3/library/csv.html#csv-fmt-params" rel="nofollow">Dialects and Formatting Parameters</a>.</p>
<p>However, the default dialect is specifically designed to work well with Excel. And, since your goal is to put the data into some format that Excel can open, you can just use the defaults as-is. Unless you want to make it more readable and editable in a text editor, there is no problem.</p>
</div>
<span class="comment-copy">CSV is escaping the commas and "weird content" precisely in order to keep it from getting screwed up. On importing it'll get unescaped.</span>
<span class="comment-copy">As a side note, if this is Python 2.x, the CSV module doesn't really handle Unicode; it just treats everything as "some random ASCII-compatbile 8-bit format". Fortunately, if you're using UTF-8, the characters that matter (commas, newlines, backslashes, and maybe quotes) are all ASCII-compatible, so it works. But if you have non-UTF-8 data, see the examples toward the bottom of the module docs.</span>
<span class="comment-copy">what would be the most obscure character I can use as a delimiter? My strings are words from tweets and my sample of tweets covers almost every unicode char??</span>
<span class="comment-copy">As @mhlester said the delimiter is just being escaped to keep the content safe. It actually does not matter. If you will read it back <code>csv.reader</code> your values will be same. Also keep in mind that the delimiter used for writing should be used while reading.</span>
