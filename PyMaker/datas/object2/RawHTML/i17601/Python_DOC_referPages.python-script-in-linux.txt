<div class="post-text" itemprop="text">
<p>okay so im trying to take my ssh key and push it to my root's authorized key list so this is why ive tried with many different variations. keep in mind im new to python:</p>
<pre><code>import subprocess
f = open("/Users/MacUser/server.lst", "r")
USER = "root"

def multi_com(f):

    for EACH in f:

            com_keys = subprocess.Popen('cat ~/.ssh/id_pub.rsa | ssh ' + USER + "@" + EACH + 'tee -a .ssh/authorized_keys', stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            output, errors = com_keys.communicate()
            return com_keys
            print output

multi_com(f)
</code></pre>
<p>my server.lst contains many likes and each line has a separate FQDN like this:</p>
<pre><code>abc1.domain.com
abc2.domain.com
abc3.domain.com
abc4.domain.com    
</code></pre>
<p>any help would be greatly appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, the first argument of <code>subprocess.Popen</code> should be a list of arguments, not a single string, unless (a) you're using <code>shell=True</code>, or (b) writing code that's Windows-specific. Neither of those is true in your case.</p>
<p>That being said, if you want to run that command, you <em>should</em> be using <code>shell=True</code>. Otherwise, you're just running the <code>cat</code> command with <code>|</code> as a second argument, <code>ssh</code> as the third, and so forth. And <code>cat</code> doesn't know what to do with that; it just looks for a file named <code>|</code>, and fails. If you want to use shell features like <code>|</code> pipelines, you have to use the shell.</p>
<p>While we're at it, <code>'… ssh ' + USER + "@" + EACH + 'tee -a…'</code> has no space between the hostname and the <code>tee</code>, which is unlikely to be what you want. That's one of the many reasons that <code>%</code>-formatting or the <code>format</code> function is better:</p>
<pre><code>cmdline = 'cat ~/.ssh/id_pub.rsa | ssh {}@{} tee -a .ssh/authorized_keys'.format(USER, EACH)
</code></pre>
<p>That being said, you shouldn't be using shell features you don't need. The docs have a great section on <a href="http://docs.python.org/3/library/subprocess.html#replacing-older-functions-with-the-subprocess-module" rel="nofollow">Replacing Older Functions with the <code>subprocess</code> Module</a>, and one of the first examples shows you how to replace the shell pipeline and do it all in Python.</p>
<p>For that matter, there is almost never a good reason to pipe <code>cat foo</code> to another program. Just pass it <code>foo</code> as its input. In the shell, <code>bar &lt; foo</code> is like <code>cat foo | bar</code> but a bit simpler and with less overhead; in Python, opening the file and then passing <code>stdin=foo</code> is a <em>lot</em> easier than piping <code>cat</code> to it.</p>
<p>That being said, trying to drive <code>ssh</code> as a command-line app has all kinds of fiddly issues that you don't want to deal with; it's much better to use a library like <a href="http://www.lag.net/paramiko/" rel="nofollow"><code>paramiko</code></a> or <a href="http://docs.fabfile.org/en/1.8/" rel="nofollow"><code>fabric</code></a>.</p>
<p>If, on the other hand, you really do want to use the <code>ssh</code> command-line tool and shell pipelines and so forth… bash is a much better language for that than Python.</p>
</div>
<span class="comment-copy">You could maybe try scp instead to copy the authorized key to each machine.</span>
<span class="comment-copy">Your for-loop will only run for 1 iteration because of that return-statement.  Moreover, the <code>print output</code> line will never be reached.</span>
<span class="comment-copy">i have 150 servers to do this to and there are other users with their keys stored there as well. im trying to append the file and not overwrite the file</span>
<span class="comment-copy">its also a learning experience for me as i am trying to learn python</span>
<span class="comment-copy">You showed us some code, but you didn't explain what it does, and how that differs from what you wanted it to do, which makes it pretty hard to debug.</span>
