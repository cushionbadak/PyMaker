<div class="post-text" itemprop="text">
<p>I'm trying to make an 11-bit ID field for a CAN communication channel. I think I should be able to use:</p>
<pre><code>import ctypes
class ID(ctypes.Union):
    _fields_ = [('device', ctypes.c_int, 3),  # 3 bits for device id
                ('message', ctypes.c_int, 8)]  # 8 bits for message ID
</code></pre>
<p>The issue is what happens when I try to validate that an instance of this class is what I wanted. Specifically:</p>
<pre><code>&gt;&gt;&gt; x = ID()
&gt;&gt;&gt; type(x.device)
&lt;type 'int'&gt;
</code></pre>
<p>Why is that an int and not a c_int? Likewise:</p>
<pre><code>&gt;&gt;&gt; x = ID()
&gt;&gt;&gt; x.device.bit_length()
0
</code></pre>
<p>which is precisely what I didn't want.</p>
<p>EDIT:</p>
<p>Thanks for the help! I should definitely be using a struct.</p>
<p>I'm trying to make an object that represents the identifier and data sections of a <a href="http://en.wikipedia.org/wiki/CAN_bus#Data_frame" rel="nofollow">CAN data frame</a>. The convention I'm working with further divides the identifier frame into 3- and 8-bit segments, representing the device and message ID, respectively. what I'd like is a class representing the identifier frame, in which I can assign values to members corresponding to my convention's device and message IDs, and which serializes into an 11-bit ID value.</p>
<p>Maybe I need to take another look at the C library I'm using for the CAN channel--it may be that I can use a 16-bit struct of which I only use 11 bits.</p>
</div>
<div class="post-text" itemprop="text">
<p>Inside the <code>Union</code>, the <code>device</code> member is stored using 8 bits.</p>
<p>However, <code>ctypes</code> will automatically convert back and forth to native <code>int</code> types for you, using (a good approximation of) the usual C rules for converting between types. For example, try this:</p>
<pre><code>&gt;&gt;&gt; x.device = 257
&gt;&gt;&gt; x.device
1
</code></pre>
<p>So, you don't have anything to fix here.</p>
<hr/>
<p>However, you <em>do</em> have a problem:</p>
<blockquote>
<p>I'm trying to make an 11-bit ID field for a CAN communication channel.</p>
</blockquote>
<p>A <code>Union</code> of an 8-bit int and a 3-bit int is 8 bits, just as in C. You want a <code>Struct</code>. See <a href="http://docs.python.org/3/library/ctypes.html#structures-and-unions" rel="nofollow noreferrer">Structures and unions</a> and the type references linked from there for details.</p>
<p>On top of that, while a <code>Struct</code> of a 3-bit int and an 8-bit int only has 11 bits of useful information, it will almost certainly take up at least 16 bits of memory, with 5 bits of padding.* You can only address memory a byte (8 bits) at a time. So… I'm not sure exactly what you were trying to do with this ID, but I suspect it's not going to work. If you explain <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">your actual problem</a>, ideally with some <a href="https://stackoverflow.com/help/mcve">complete sample code</a>, we can probably help.</p>
<hr/>
<p>* In fact, at least in current CPython versions, it will actually take up 32 bits of memory. See eryksun's comments for more details.</p>
</div>
<span class="comment-copy">As a side note, <code>c_int(0).bit_length()</code> isn't <code>32</code>, it's an <code>AttributeError</code>. The <code>bit_length</code> method is the number of base-2 digits (not counting leading 0s) it takes to write (the absolute value of) the number. That doesn't directly tell you anything about how much storage it's taking up. (In CPython 2.7 and 3.3, I believe every 15 bits of <code>bit_length</code> takes 16 bits of storage, plus the 40-64 bits of header… but then again, all that storage could be shared between multiple copies of the same <code>int</code>.)</span>
<span class="comment-copy">With <code>int</code> it's 4 bytes; with <code>short</code> it would be 2 bytes. A subclass of a simple type won't automatically convert to a Python integer, if for some reason you need that.</span>
<span class="comment-copy">@eryksun: No, he's using a <a href="http://docs.python.org/3/library/ctypes.html#bit-fields-in-structures-and-unions" rel="nofollow noreferrer">bit field</a> of 8 bits length, which means it's 1 byte, not 4. (Again, just like in a C <code>struct</code>.)</span>
<span class="comment-copy">I know that. I meant the total size is 4 bytes if you use <code>c_int</code> for the bitfield. It's 2 bytes with <code>c_short</code>.</span>
<span class="comment-copy">@eryksun: I'm pretty sure that depends entirely on your platform/compiler ABI, and C89 makes 1, 2, 4, or all kinds of crazy possibilities perfectly legal here. But I don't want to go digging through C89 to find out for sure.</span>
<span class="comment-copy">It's based on the <code>StgDictObject.size</code> for the type, which is 4 bytes for <code>c_int</code>. <a href="http://hg.python.org/cpython/file/c3896275c0f6/Modules/_ctypes/stgdict.c#l299" rel="nofollow noreferrer"><code>PyCStructUnionType_update_stgdict</code></a> (line 516) calls <a href="http://hg.python.org/cpython/file/c3896275c0f6/Modules/_ctypes/cfield.c#l33" rel="nofollow noreferrer"><code>PyCField_FromDesc</code></a>. IIRC, it isn't perfectly compatible with gcc on Linux when it comes to continuing a bitfield in a struct that's used as the field of another struct.</span>
