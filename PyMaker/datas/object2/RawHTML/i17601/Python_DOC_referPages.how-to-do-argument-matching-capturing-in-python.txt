<div class="post-text" itemprop="text">
<p>I am trying to understand how to mock in python external dependencies while doing mock methods argument matching and argument capture.</p>
<p>1) Argument matching:</p>
<pre><code>class ExternalDep(object):
    def do_heavy_calc(self, anInput):
        return 3

class Client(object):
    def __init__(self, aDep):
        self._dep = aDep

    def invokeMe(self, aStrVal):
        sum = self._dep.do_heavy_calc(aStrVal)
        aNewStrVal = 'new_' + aStrVal
        sum += self._dep.do_heavy_calc(aNewStrVal)

class ClientTest(unittest.TestCase):
    self.mockDep = MagicMock(name='mockExternalDep', spec_set=ExternalDep)
    ###
    self.mockDep.do_heavy_calc.return_value = 5 
    ### this will be called twice regardless of what parameters are used
    ### in mockito-python, it is possible to create two diff mocks (by param),like
    ###
    ### when(self.mockDep).do_heavy_calc('A').thenReturn(7)
    ### when(self.mockDep).do_heavy_calc('new_A').thenReturn(11)
    ###
    ### QUESTION: how could I archive the same result in MagicMock?

    def setUp(self):
        self.cut = Client(self.mockDep)

    def test_invokeMe(self):
        capturedResult = self.cut.invokeMe('A')
        self.assertEqual(capturedResult, 10, 'Unexpected sum')
        # self.assertEqual(capturedResult, 18, 'Two Stubs did not execute')
</code></pre>
<p>2) Argument Capturing
I cannot find good docs or examples on neither MagicMock or mockito-python able to accommodate the following mocking scenario:</p>
<pre><code>class ExternalDep(object):
    def save_out(self, anInput):
        return 17

class Client(object):
    def __init__(self, aDep):
        self._dep = aDep

    def create(self, aStrVal):
        aNewStrVal = 'new_' + aStrVal if aStrVal.startswith('a')
        self._dep.save_out(aNewStrVal)

class ClientTest(unittest.TestCase):
    self.mockDep = MagicMock(name='mockExternalDep', spec_set=ExternalDep)
    ###
    self.mockDep.save_out.return_value = 5 
    ### this will be called with SOME value BUT how can I capture it?
    ### mockito-python does not seem to provide an answer to this situation either
    ### (unline its Java counterpart with ArgumentCaptor capability)
    ###
    ### Looking for something conceptually like this (using MagicMock):
    ### self.mockDep.save_out.argCapture(basestring).return_value = 11
    ###
    ### QUESTION: how could I capture value of parameters with which 
    ### 'save_out' is invoked in MagicMock?

    def setUp(self):
        self.cut = Client(self.mockDep)

    def test_create(self):
        capturedResult = self.cut.create('Z')
        self.assertEqual(capturedResult, 5, 'Unexpected sum')

        ### now argument will be of different value but we cannot assert on what it is
        capturedResult = self.cut.create('a')
        self.assertEqual(capturedResult, 5, 'Unexpected sum')
</code></pre>
<p>If anyone could show me how to accomplish these two mocking scenarios (using MagicMock), I would be very grateful! (Please ask if something is unclear.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Something that might help you is to use <a href="http://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with" rel="nofollow">assert_called_with</a> with a Matcher. 
This will allow you to have a finer grain access to the arguments on your calls. i.e.:</p>
<pre><code>&gt;&gt;&gt; def compare(self, other):
...     if not type(self) == type(other):
...         return False
...     if self.a != other.a:
...         return False
...     if self.b != other.b:
...         return False
...     return True

&gt;&gt;&gt; class Matcher(object):
        def __init__(self, compare, some_obj):
            self.compare = compare
            self.some_obj = some_obj
        def __eq__(self, other):
            return self.compare(self.some_obj, other)

&gt;&gt;&gt; match_foo = Matcher(compare, Foo(1, 2))
&gt;&gt;&gt; mock.assert_called_with(match_foo)
</code></pre>
</div>
<span class="comment-copy">What do you mean by "argument matching"? How does it relate to <i>mocking</i>?</span>
<span class="comment-copy">If you don't want to write the matchers yourself, you can try a library I've released recently which has plenty of them already: <a href="https://github.com/Xion/callee" rel="nofollow noreferrer">github.com/Xion/callee</a></span>
