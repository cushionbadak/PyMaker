<div class="post-text" itemprop="text">
<p>I honestly don't know if this is good, bad, neutral, whatever.</p>
<pre><code>def foo():
    return "foo called"

def bar():
    return "BAR CALLED"

def wrap(func):
    def _(*args, **kwargs):
        try:
            func.counter += 1
        except:
            func.counter = 0
        print "The count is %d" % func.counter
        return func(*args, **kwargs)
    return _

&gt;&gt;&gt; foo = wrap(foo)
&gt;&gt;&gt; bar = wrap(bar)
&gt;&gt;&gt; foo()
'The count is 0'
'foo called'
&gt;&gt;&gt; foo()
'The count is 1'
'foo called'
&gt;&gt;&gt; bar()
'The count is 0'
'BAR CALLED'
</code></pre>
<p>So far, so good -- functions are just wrapped, no big deal. Here's the bit that I don't know whether to consider a feature or not.</p>
<pre><code>&gt;&gt;&gt; foo
&lt;function _ at 0x100499ed8&gt;
&gt;&gt;&gt; _()
The count is 2
'foo called'
&gt;&gt;&gt; bar
&lt;function _ at 0x10049f320&gt;
&gt;&gt;&gt; _()
The count is 1
'BAR CALLED'
&gt;&gt;&gt; 
</code></pre>
<p>Perhaps I know too little of the behind-the-scenes here, but Python has two wrapper functions in memory named <code>_</code>, and a user can apparently 'switch' between them by just typing the name of the function it wraps.</p>
<p>Is this a feature, and if it is, what would its primary application be? Or if it is not, is this best left forgotten about, because it's just a Bad Idea to try and featurize this behavior? My journeyman guess is that this is only doable because there are not real closures in Python (which probably puts it under <code>We're all adults here</code> and I should not ever try to actually do this), but that's an uneducated guess.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is a shortcut of the Python interpreter. The result of the last expression evaluated is assigned to <code>_</code> so that you can use it in subsequent operations.</p>
<p>Like:</p>
<pre><code>&gt;&gt;&gt; 5 + 7
12
&gt;&gt;&gt; _ * 2
24
&gt;&gt;&gt; _ + 3
27
</code></pre>
<p>Please note that this will work only in an <em>interactive</em> shell, not in a script, and only when <code>_</code> isn't already defined by you.</p>
</div>
<span class="comment-copy">As a side note, if you want to avoid the function being named <code>_</code>, use the <a href="http://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>wraps</code></a> decorator inside your decorator. Like <a href="http://pastebin.com/38pWdaQq" rel="nofollow noreferrer">this</a>. Then the name (and docstring, module, and signature annotations) of the wrapped function will be the same as the original function.</span>
<span class="comment-copy">Also, you might find something like <a href="http://pastebin.com/hNwaiCjT" rel="nofollow noreferrer">this</a> a little simpler and nicer (nicer because, e.g., you can look at the <code>count</code> attribute from outside of the function call without needing a <code>try</code>).</span>
<span class="comment-copy">oh man, that's great</span>
<span class="comment-copy">By the way, "there are not real closures in Python" is not true. The wrapped-up <code>foo</code> <i>is</i> a closure, with the original unwrapped <code>foo</code> as a closure cell (you can even inspect it as <code>foo.func_closure[0]</code>). That's how it's able to mutate the <code>func</code> variable from the <code>wrap</code> frame (even after <code>wrap</code> has returned). Which is exactly what a closure is. What Python 2.x <i>can't</i> do is rebind a name in the enclosing space, but then neither can many functional languagesâ€”and Python 3.x <i>can</i> do that, with a <code>nonlocal</code> statement.</span>
<span class="comment-copy">Perhaps I conflated closures with encapsulation (or perhaps I'm just incorrect again, again). In any event, thanks for the extra information.</span>
<span class="comment-copy">Oh ew, so I should not use <code>_</code> to name the inner function in a wrapper then, should I</span>
<span class="comment-copy">There is no problem with that, the <code>_</code> trick only works in interactive  shell and only if it was not assigned before. I would use a more meaningful name, though.</span>
<span class="comment-copy">@Stick: It doesn't matter. It's a local variable; it won't conflict. If you ever do anything with internationalization, though, <code>_</code> is often expected to be <code>gettext</code>.</span>
