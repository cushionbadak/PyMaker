<div class="post-text" itemprop="text">
<p>After <a href="https://stackoverflow.com/a/1695250/371228">this answer</a> by Alec Thomas, I am using the following to create enumerations:</p>
<pre><code>def enum(*sequential):
    enums = dict(zip(sequential, range(len(sequential))))
    return type('Enum', (), enums)
</code></pre>
<p>I would like to be able to obtain the length of one of these enums. For example, I can write</p>
<pre><code>&gt;&gt;&gt; Suit = enum('spades', 'hearts', 'diamonds', 'clubs')
&gt;&gt;&gt; Suit.spades
0
&gt;&gt;&gt; Suit.hearts
1
&gt;&gt;&gt; Suit.diamonds
2
&gt;&gt;&gt; Suit.clubs
3
</code></pre>
<p>but there’s no way to list all of the enumeration values at runtime. I’d like to be able to do something like</p>
<pre><code>&gt;&gt;&gt; [s for s in Suit]
[0, 1, 2, 3]
</code></pre>
<p>I’ve tried assigning <code>enum['__iter__']</code> within the <code>enum()</code> function, but I don’t know what kind of object I need to assign:</p>
<pre><code>def enum(*sequential):
    enums = dict(zip(sequential, range(len(sequential))))
    enums['__iter__'] = iter(range(len(sequential)))
    return type('Enum', (), enums)
</code></pre>
<p>gives</p>
<pre><code>&gt;&gt;&gt; [s for s in Suit]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'type' object is not iterable
</code></pre>
<p>How can I give an <code>enum</code> the ability to list its members? (Even just the ability for the enum to report its length would suffice, since then the members are simply the elements of <code>range(len(Suit))</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>type(…)</code> returns a <em>type</em>, i.e. something that’s actually used to create objects. Now of course you could argue if that’s a problem or not—and it’s likely not due to how Python’s typing system works (everything is an object, types are just objects of <code>type</code> objects etc.).</p>
<p>The effect however is that you can’t add special methods, like <a href="http://docs.python.org/3/reference/datamodel.html#object.__iter__"><code>__iter__</code></a> which would be needed in this case. Special methods are however looked up on the type of the object, so in this case on <code>type</code> (which is the base type of the type you’re creating). And <code>type</code>—as you would expect—is not iterable.</p>
<p>So if you want to have something iterable, you will need to create something that is not a type. You could probably come up with some fancy meta class here, but the easiest thing you can do, which also keeps your code at the same length, is really a <a href="http://docs.python.org/3/library/collections.html#collections.namedtuple">named tuple</a>. This is btw. also what the semantics in the Python 3.4 <a href="http://docs.python.org/3.4/library/enum.html"><code>enum</code> type</a> is inspired by.</p>
<pre><code>&gt;&gt;&gt; def enum(*keys):
        return namedtuple('Enum', keys)(*range(len(keys)))
&gt;&gt;&gt; Suit = enum('spades', 'hearts', 'diamonds', 'clubs')
&gt;&gt;&gt; Suit.spades
0
&gt;&gt;&gt; Suit.hearts
1
&gt;&gt;&gt; Suit.diamonds
2
&gt;&gt;&gt; Suit.clubs
3
&gt;&gt;&gt; [s for s in Suit]
[0, 1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest you to use a different implementation of your <code>enumerator</code> by using <a href="http://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow">collections.namedtuple</a></p>
<p><strong>Implementation</strong></p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; def enum(*sequential):
    enums = namedtuple('enums',sequential)(*range(len(sequential)))
    return enums
</code></pre>
<p><strong>Usage</strong></p>
<pre><code>&gt;&gt;&gt; Suit = enum('spades', 'hearts', 'diamonds', 'clubs')
&gt;&gt;&gt; Suit.spades
0
&gt;&gt;&gt; Suit.hearts
1
&gt;&gt;&gt; Suit.diamonds
2
&gt;&gt;&gt; Suit.clubs
3
&gt;&gt;&gt; [s for s in Suit]
[0, 1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems to meet your requirements:</p>
<pre><code>def enum(*sequential):
    length = len(sequential)
    pairs = zip(sequential, xrange(len(sequential)))
    Enum = type('Enum', (), dict(pairs))
    Enum.__len__ = lambda _: length
    Enum.__iter__ = lambda _: iter(range(length))
    return Enum()

Suit = enum('spades', 'hearts', 'diamonds', 'clubs')

print Suit.spades              # 0
print Suit.hearts              # 1
print Suit.diamonds            # 2
print Suit.clubs               # 3
print 'len(Suit):', len(Suit)  # len(Suit): 4
print [s for s in Suit]        # [0, 1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your variant works! with added <code>()</code> after <code>type(...)</code> to create class instance and modified <code>__iter__</code>:</p>
<pre><code>def enum(*sequential):
    enums = dict(zip(sequential, range(len(sequential))))
    enums['__iter__'] = lambda e,i=iter(range(len(sequential))): i
    return type('Enum', (object,), enums)()

&gt;&gt;&gt; suit = enum('spades', 'hearts', 'diamonds', 'clubs')
&gt;&gt;&gt; [s for s in suit]
[0, 1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">@JoelCornett You can’t patch in the <code>__iter__</code>, see my answer.</span>
<span class="comment-copy">@poke: &gt;.&lt; of course. You could instantiate and iterate, however. As in <code>list(Suit())</code>. Provided you've patched <code>__iter__</code>, that is.</span>
