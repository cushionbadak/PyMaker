<div class="post-text" itemprop="text">
<p>I created a virtualenv with the following command.</p>
<pre><code>mkvirtualenv --distribute --system-site-packages "$1"
</code></pre>
<p>After starting the virtualenv with <code>workon</code>, I type <code>ipython</code>. It prompts me </p>
<pre><code>WARNING: Attempting to work in a virtualenv. If you encounter problems, please install IPython inside the virtualenv.
</code></pre>
<p>When I try to install ipython with the virtualenv, I got the following error message:</p>
<pre><code>pip install ipython
Requirement already satisfied (use --upgrade to upgrade): ipython in /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages
Cleaning up...
</code></pre>
<p>Does anyone know how to install inside the virtualenv?</p>
</div>
<div class="post-text" itemprop="text">
<p>Create your virtualenv with <code>--no-site-packages</code> if you don't want it to be able to use external libraries:</p>
<pre><code>virtualenv --no-site-packages my-virtualenv
. my-virtualenv/bin/activate
pip install ipython
</code></pre>
<p>Otherwise, as in your example, it can see a library installed in your system Python environment as satisfying your requested dependency.</p>
</div>
<div class="post-text" itemprop="text">
<p>Avoiding Headaches and Best Practices:</p>
<ul>
<li><p>Virtual Environments are not part of your git project (they don't need to be versioned) !</p></li>
<li><p>Create a folder for your Virtual Environments. </p></li>
<li>After activating the virtual environment of your project, never  "<strong>sudo</strong> <em>pip install package</em>".</li>
<li>After finishing your work, always "<strong>deactivate</strong>" your environment.</li>
<li>Avoid renaming your project folder.</li>
</ul>
<hr/>
<p><br/>
For a better representation, here's a simulation:</p>
<h3>creating a folder for your projects/environments</h3>
<pre><code>$ mkdir venv
</code></pre>
<h3>creating environment</h3>
<pre><code>$ cd venv/ 

$ virtualenv google_drive
New python executable in google_drive/bin/python
Installing setuptools, pip...done.
</code></pre>
<h3>activating environment</h3>
<pre><code>$ source google_drive/bin/activate
</code></pre>
<h3>installing packages</h3>
<pre><code>(google_drive) $ pip install PyDrive
Downloading/unpacking PyDrive
Downloading PyDrive-1.3.1-py2-none-any.whl
...
...
...    
Successfully installed PyDrive PyYAML google-api-python-client oauth2client six uritemplate httplib2 pyasn1 rsa pyasn1-modules
Cleaning up...
</code></pre>
<h3>package available inside the environment</h3>
<pre><code>(google_drive) $ python
Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
[GCC 4.8.4] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
&gt;&gt;&gt; import pydrive.auth
&gt;&gt;&gt;  
&gt;&gt;&gt; gdrive = pydrive.auth.GoogleAuth()
&gt;&gt;&gt;
</code></pre>
<h3>deactivate environment</h3>
<pre><code>(google_drive) $ deactivate 

$ 
</code></pre>
<h3>package NOT AVAILABLE outside the environment</h3>
<pre><code>$ python
Python 2.7.6 (default, Oct 26 2016, 20:32:10) 
[GCC 4.8.4] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
&gt;&gt;&gt; import pydrive.auth
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named pydrive.auth
&gt;&gt;&gt; 
</code></pre>
<hr/>
<h3>Notes:</h3>
<h3>Why not sudo? <br/></h3>
<blockquote>
<p>Virtualenv creates a whole new environment for you, defining $PATH and some other variables and settings. When you use <strong>sudo pip install package</strong>, you are running Virtualenv as <strong>root</strong>, escaping the whole environment which was created, and then, installing  the package on global site-packages, <strong>and not inside the project folder</strong> where you have a Virtual Environment, although you have activated the environment.</p>
</blockquote>
<h3>If you rename the folder of your project...</h3>
<blockquote>
<p>...you'll have to adjust some variables from some files inside the <strong>bin</strong> directory of your project.</p>
<p>For example:</p>
<p>bin/pip, line 1 (She Bang)</p>
<p>bin/activate, line 42 (VIRTUAL_ENV)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Well i don't have an appropriate reason regarding why this behavior occurs but then i just found a small work around</p>
<blockquote>
<p>Inside the VirtualEnvironment</p>
</blockquote>
<pre><code>pip install -Iv package_name==version_number
</code></pre>
<p>now this will install the version in your virtual environment</p>
<blockquote>
<p>Additionally you can check inside the virtual environment with this</p>
</blockquote>
<pre><code>pip install yolk
yolk -l
</code></pre>
<p>This shall give you the details of all the installed packages in both the locations(system and virtualenv)</p>
<p>While some might say its not appropriate to use --system-site-packages (it may be true), but what if you have already done a lot of stuffs inside your virtualenv? Now you dont want to redo everything from the scratch.</p>
<p>You may use this as a hack and be careful from the next time :)</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3 :</p>
<pre><code>pip3 install virtualenv

python3 -m venv venv_name

source venv_name/bin/activate  #key step

pip3 install "package-name"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To use the environment virtualenv has created, you first need to <code>source env/bin/activate</code>. After that, just install packages using <code>pip install package-name</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To further clarify the other answer here:</p>
<p>Under the current version of virtualenv, the --no-site-packages flag is the default behavior, so you don't need to specify it.  However, you are overriding the default by explicitly using the --system-site-packages flag, and that's probably not what you want.  The default behavior (without specifying either flag) is to create the virtual environment such that when you are using it, any Python packages installed outside the environment are not accessible.  That's typically the right choice because it best isolates the virtual environment from your local computer environment.  Python packages installed within the environment will not affect your local computer and vice versa.</p>
<p>Secondly, to use a virtual environment after it's been created, you need to navigate into the virtual environment directory and then run:</p>
<pre><code>bin/activate
</code></pre>
<p>What this does is to configure environment variables so that Python packages and any executables in the virtual environment's bin folders will be used before those in the standard locations on your local computer.  So, for example, when you type "pip", the version of pip that is inside your virtual environment will run instead of the version of pip on your local machine.  This is desirable because pip inside the virtual environment will install packages inside the virtual environment.</p>
<p>The problem you are having is because you are running programs (like ipython) from your local machine, when you instead want to install and run copies of those programs isolated inside your virtual environment.  You set this up by creating the environment (without specifying any site-packages flags if you are using the current version), running the activate script mentioned above, then running pip to install any packages you need (which will go inside the environment).</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same issue and the <code>--no-site-packages</code> did not work for me. I discovered on this older mailing list archive that you are able to force an installation in the virtualenv using the <code>-U</code> flag for pip, eg <code>pip -U ipython</code>. You may verify this works using the bash command <code>which ipython</code> while in the virtualenv.</p>
<p>source: <a href="https://mail.python.org/pipermail/python-list/2010-March/571663.html" rel="nofollow">https://mail.python.org/pipermail/python-list/2010-March/571663.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>From documentation <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/venv.html</a>: </p>
<blockquote>
<p>The pyvenv script has been deprecated as of Python 3.6 in favor of using python3 -m venv to help prevent any potential confusion as to which Python interpreter a virtual environment will be based on.</p>
</blockquote>
<p>In order to create a virtual environment for particular project, create a file <code>/home/user/path/to/create_venv.sh</code>:</p>
<pre><code>#!/usr/bin/env bash

# define path to your project's directory
PROJECT_DIR=/home/user/path/to/Project1

# a directory with virtual environment
# will be created in your Project1 directory
# it recommended to add this path into your .gitignore
VENV_DIR="${PROJECT_DIR}"/venv

# https://docs.python.org/3/library/venv.html
python3 -m venv "${VENV_DIR}"

# activates the newly created virtual environment
. "${VENV_DIR}"/bin/activate

# prints activated version of Python
python3 -V

pip3 install --upgrade pip

# Write here all Python libraries which you want to install over pip
# An example or requirements.txt see here:
# https://docs.python.org/3/tutorial/venv.html#managing-packages-with-pip
pip3 install -r "${PROJECT_DIR}"/requirements.txt

echo "Virtual environment ${VENV_DIR} has been created"

deactivate
</code></pre>
<p>Then run this script in the console: </p>
<pre><code>$ bash /home/user/path/to/create_venv.sh
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can go to the folder where your <code>venv</code> exists and right click -&gt; <code>git bash here.</code>
Then you just right <code>python -m pip install ipython</code> and it will install inside the folder.</p>
<p>I find it even more convenient with the <code>virtualenv</code> package that creates the venv inside the project's folder. </p>
</div>
<div class="post-text" itemprop="text">
<p>Sharing what has worked for me in both Ubuntu and Windows. This is for python3. To do for python2, replace "3" with "2":</p>
<h3>Ubuntu</h3>
<pre><code>pip install virtualenv --user
virtualenv -p python3 /tmp/VIRTUAL
source /tmp/VIRTUAL/bin/activate
which python3
</code></pre>
<p>To install any package: <code>pip install package</code></p>
<p>To get out of the virtual environment: <code>deactivate</code></p>
<p>To activate again: <code>source /tmp/VIRTUAL/bin/activate</code></p>
<p><a href="https://github.com/WRI-Cities/static-GTFS-manager/wiki/Running-on-Ubuntu-OS" rel="nofollow noreferrer">Full explanation here</a>.</p>
<h3>Windows</h3>
<p>(Assuming you have MiniConda installed and are in the Start Menu &gt; Anaconda &gt; Anaconda Terminal)</p>
<pre><code>conda create -n VIRTUAL python=3  
activate VIRTUAL
</code></pre>
<p>To install any package: <code>pip install package</code> or <code>conda install package</code></p>
<p>To get out of the virtual environment: <code>deactivate</code></p>
<p>To activate again: <code>activate VIRTUAL</code></p>
<p><a href="https://github.com/WRI-Cities/static-GTFS-manager/wiki/Running-on-Windows-OS-with-Python-3" rel="nofollow noreferrer">Full explanation here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sharing a personal case if it helps. It is that a virtual environment was previously arranged. Its path can be displayed by</p>
<p><code>echo $VIRTUAL_ENV</code></p>
<p>Make sure that the it is writable to the current user. If not, using    </p>
<p><code>sudo ipython</code></p>
<p>would certainly clear off the warning message.</p>
<p>In anaconda, if $VIRTUAL_ENV is independently arranged, one can simply delete this folder or rename it, and then restart the shell. Anaconda will recover to its default setup.</p>
</div>
<span class="comment-copy">It’s likely that <code>pip</code> wasn’t installed as part of your virtual environment. As such you would need to install pip first to be able to install libraries to your venv</span>
<span class="comment-copy">Are you doing a pip install from within your virtualenv (sourcing the virtualenv and THEN installing ipython)?</span>
<span class="comment-copy">In general, <code>--system-site-packages</code> should be avoided. This flag defeats the entire point of virtualenvs (which is why <code>--no-site-packages</code> was made the default a few versions ago).</span>
<span class="comment-copy">Hi, as of now (apr 2018), we have to run <code>source bin/activate</code>. Without source nothing happens. Rest explanation is great.</span>
<span class="comment-copy">Also, just for completion, to get out of the virtual env, run <code>deactivate</code></span>
<span class="comment-copy">Or, nowadays, use <a href="https://docs.pipenv.org/" rel="nofollow noreferrer">pipenv</a> instead.  :)</span>
<span class="comment-copy">Note: people have to install <code>sudo apt-get install python3-venv</code> first. I ran your script without that and it gave a friendly error for the first commands informing me of this and then proceeded to try and install the requirements in my main python!</span>
