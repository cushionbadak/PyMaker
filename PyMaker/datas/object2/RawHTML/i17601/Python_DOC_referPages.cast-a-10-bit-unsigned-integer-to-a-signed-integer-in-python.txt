<div class="post-text" itemprop="text">
<p>I have a list of numbers in the range 0-1023. I would like to convert them to integers such that 1023 maps to -1, 1022 maps to -2 etc.. while 0, 1, 2, ....511 remain unchanged.</p>
<p>I came up with a simple:</p>
<pre><code>def convert(x):
    return (x - 2**9) % 2**10 - 2**9
</code></pre>
<p>is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Naivest possible solution:</p>
<pre><code>def convert(x):
    if x &gt;= 512:
        x -= 1024
    return x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def convert(x):
    return x - (x &gt;&gt; 9) * 1024
</code></pre>
<p>Using <a href="http://docs.python.org/3/library/ctypes.html" rel="nofollow"><code>ctypes</code></a>:</p>
<pre><code>from ctypes import c_short

def convert(x):
    return c_short(x &lt;&lt; 6).value &gt;&gt; 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> max_uint_value = 512

 def unassigned_to_int(uint):
      return uint - max_uint_value if uint &gt;= max_uint_value else uint
</code></pre>
</div>
<span class="comment-copy">In some programming languages, the <code>%</code> operator yields a negative (or zero) value for a negative left operand, so the code could perhaps be made clearer by changing <code>(x - 2**9)</code> to <code>(x + 2**9)</code>. Aside from that, this seems like a reasonable implementation.</span>
<span class="comment-copy">Alternatively, reducing three lines to one:  <code>return x if x &lt; 512 else x - 1024</code></span>
<span class="comment-copy">or <code>return x - 1024 * (x &gt;= 512)</code></span>
<span class="comment-copy">@rmartinjak, multiplying by a boolean requires Python to do an extra cast, and as a result that solution is a bit slower than the other ones. Your original solution and John1024's seem to be roughly equivalent. I haven't done any rigorous testing yet, though.</span>
<span class="comment-copy">perfect answer, I may add some explanations</span>
