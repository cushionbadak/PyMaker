<div class="post-text" itemprop="text">
<p>I am running my unit test suit with Python 3 on code that was developed under Python 2. All unit tests passed under Python 2 but not for Python 3.  It seems there is some change in the implementation of <code>re</code>, and it is a real head scratcher for me. Below is a minimal working example to replicate my problem:</p>
<pre><code>Python 2.7.6 (default, Dec 10 2013, 20:01:46) 
&gt;&gt;&gt; import re
&gt;&gt;&gt; a = re.compile('test', re.IGNORECASE)
&gt;&gt;&gt; assert a.flags == re.IGNORECASE
&gt;&gt;&gt; # No output,  i.e. assertion passed
&gt;&gt;&gt; a.flags
2
&gt;&gt;&gt; re.IGNORECASE
2
</code></pre>
<hr/>
<pre><code>Python 3.3.3 (default, Dec 10 2013, 20:13:18)
&gt;&gt;&gt; import re
&gt;&gt;&gt; a = re.compile('test', re.IGNORECASE)
&gt;&gt;&gt; assert a.flags == re.IGNORECASE
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError
&gt;&gt;&gt; a.flags
34
&gt;&gt;&gt; re.IGNORECASE
2
</code></pre>
<hr/>
<p>Clearly something is going on that I don't expect!  I am assuming that there is some set of default flags that are OR'd together to make <code>flags</code> be 34 in python3.  What I want to know is what these are so that I can make my assertion pass by comparing against the proper flags.  As a bonus, what is the purpose for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Following are the RegEx flags, in Python 3.x.</p>
<pre><code>import re
print (re.IGNORECASE)
print (re.LOCALE)
print (re.MULTILINE)
print (re.DOTALL)
print (re.UNICODE)
print (re.VERBOSE)
print (re.DEBUG)
print (re.A)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>2
4
8
16
32
64
128
256
</code></pre>
<p>From the <a href="http://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow"><code>docs</code></a>,</p>
<blockquote>
<p>Strings are immutable sequences of Unicode code points.</p>
</blockquote>
<p>So, <code>re.UNICODE</code> flag is enabled by default. Since you have enabled <code>re.IGNORECASE</code>, that is ORed with <code>re.UNICODE</code> and that gives you <code>34</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because in Python 3, strings are unicode, and so it makes sense for the <a href="http://docs.python.org/2/library/re.html#re.UNICODE" rel="nofollow"><code>UNICODE</code></a> flag to be on by default.</p>
<p>Python 3:</p>
<pre><code>&gt;&gt;&gt; a = re.compile("a")
&gt;&gt;&gt; a.flags
32
&gt;&gt;&gt; [k for k in dir(re) if getattr(re, k) == 32]
['U', 'UNICODE']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After digging through the <code>re</code> source code, I found the following in "sre_parse.py":</p>
<pre><code>def fix_flags(src, flags):
    # Check and fix flags according to the type of pattern (str or bytes)
    if isinstance(src, str):
        if not flags &amp; SRE_FLAG_ASCII:
            flags |= SRE_FLAG_UNICODE # &lt;===== LOOK AT THIS LINE!!!!!
        elif flags &amp; SRE_FLAG_UNICODE:
            raise ValueError("ASCII and UNICODE flags are incompatible")
    else:
        if flags &amp; SRE_FLAG_UNICODE:
            raise ValueError("can't use UNICODE flag with a bytes pattern")
    return flags
</code></pre>
<p>If the "UNICODE" flag is not added, it is added for you.  It's value is <code>SRE_FLAG_UNICODE == 32</code>, so <code>2 | 32 == re.IGNORECASE | re.UNICODE == 34</code>.</p>
<p>This function does not exist in python2.x's implementation.</p>
</div>
<span class="comment-copy">Thanks man, your solution was <i>way</i> easier than looking through the source code like I ended up doing.</span>
