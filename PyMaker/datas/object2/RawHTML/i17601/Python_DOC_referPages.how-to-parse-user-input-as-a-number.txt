<div class="post-text" itemprop="text">
<p>I am making a calculator program in my Python, following a tutorial. Here is my code:</p>
<pre><code>print ("This is a calculator program, press Enter to continue")
a = input()

while a == "":
    print("Enter 1 for option 1 which adds")
    print("Enter 2 for option 2 which subtracts")
    print("Enter 3 for option 3 which multiply")
    print("Enter 4 for option 4 which divides")
    print("Enter 5 for option 5 which quits",)

    Option = input("Enter an option number:")
    int(Option)

    if Option == 1:
        Number1 = input("Enter number 1")
        Number2 = input("Enter number 2")
        int(Number1,Number2)
        print(Result = Number1 + Number2)

    if Option == 2:
        Number1 = input("Enter number 1")
        Number2 = input("Enter number 2")
        int(Number1,Number2)
        print(Result = Number1 - Number2)

    if Option == 3:
        Number1 = input("Enter number 1")
        Number2 = input("Enter number 2")
        int(Number1,Number2)
        print(Result = Number1 * Number2)

    if Option == 4:
        Number1 = input("Enter number 1")
        Number2 = input("Enter number 2")
        int(Number1,Number2)
        print(Result = Number1 / Number2)

    if Option == 5:
        break
</code></pre>
<p>It is very basic, it gets up to the point of printing all the option numbers and then asks me to pick one. So I enter "1" as a string, parsing it to an integer 1. However it doesn't go straight to option 1 and instead loops again which is fine I will sort that out later. But again it doesn't go to any option when I enter 1-5. I think I typed in the wrong code to parse it or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>Result of <a href="http://docs.python.org/3/library/functions.html#input" rel="nofollow">input</a> function is a <code>string</code>, you need to convert it to <code>int</code>, using <code>int</code> type . </p>
<pre><code>&gt;&gt;&gt; foo = "3"
&gt;&gt;&gt; foo
'3'
&gt;&gt;&gt; int(foo)
3
</code></pre>
<p>Your misconception might come from that python is a dynamically typed language. But remember that despite variables themselves are untyped, variable values have types.</p>
<pre><code>&gt;&gt;&gt; type(foo)
&lt;class 'str'&gt;
&gt;&gt;&gt; type(int(foo))
&lt;class 'int'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code should look more like this:</p>
<pre><code>print("This is a calculator program. Press Enter to continue.")

while True:
    _ = input()
    print("Enter 1 for option 1 which adds")
    print("Enter 2 for option 2 which subtracts")
    print("Enter 3 for option 3 which multiply")
    print("Enter 4 for option 4 which divides")
    print("Enter 5 for option 5 which quits")

    option = int(input("Enter an option number: "))

    if option == 5:
        break
    else:
        number1 = int(input("Enter number 1: "))
        number2 = int(input("Enter number 2: "))
        if option == 1:
            result = number1 + number2
        elif option == 2:
            result = number1 - number2
        elif option == 3:
            result = number1 * number2
        elif option == 4:
            result = number1 / number2
        print(result)
</code></pre>
<p>Salient points:</p>
<ul>
<li>You aren't doing anything with <code>a</code>. So I got rid of it, and put a call to <code>input</code> that stores its result in <code>_</code>, which is the standard name for a variable whose value you don't care about. </li>
<li>You must explicitly convert <code>option</code> to an <code>int</code>. Python will not implicitly convert for you, and so <code>'1' != 1</code>. </li>
<li>You cannot convert to an <code>int</code> in-place - writing <code>int(number1)</code> does nothing. You must write <code>number1 = int(number1)</code> or similar. </li>
<li>You cannot convert multiple strings to an <code>int</code> in a single statement of the form <code>int(number1, number2)</code>. What you're actually doing here is calling <code>int(x, base)</code>, where you convert <code>x</code> into an <code>int</code>, interpreted as being in base <code>base</code>.</li>
<li>I refactored your <code>if</code> statements to be more concise</li>
<li>Variable names are typically lowercase in Python. </li>
<li>You cannot assign to a variable inside a print statement. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>that code posted contains several errors, below is the corrected code:</p>
<pre><code>print ("This is a calculator program, press Enter to continue")
a = input()

while a == "":
    print("Enter 1 for option 1 which adds")
    print("Enter 2 for option 2 which subtracts")
    print("Enter 3 for option 3 which multiply")
    print("Enter 4 for option 4 which divides")
    print("Enter 5 for option 5 which quits",)

    Option = int(input("Enter an option number:"))

    if Option == 1:
        Number1 = int(input("Enter number 1"))
        Number2 = int(input("Enter number 2"))
        # int(Number1,Number2)
        Result = Number1 + Number2

    if Option == 2:
        Number1 = int(input("Enter number 1"))
        Number2 = int(input("Enter number 2"))
        # int(Number1,Number2)
        Result = Number1 - Number2

    if Option == 3:
        Number1 = int(input("Enter number 1"))
        Number2 = int(input("Enter number 2"))
        # int(Number1,Number2)
        Result = Number1 * Number2

    if Option == 4:
        Number1 = int(input("Enter number 1"))
        Number2 = int(input("Enter number 2"))
        # int(Number1,Number2)
        Result = Number1 / Number2

    print(Result)

    if Option == 5:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>input()</code> converts the input to a <em>string</em>, so if you need to read an <code>int</code>, you have to cast it.</p>
<p>In the <code>if</code> condition, you could cast the <code>input()</code> result (a string) to <code>int</code>:</p>
<pre><code>Number1 = int(input("Enter number 1"))
</code></pre>
<p>then create a variable, let's say <code>result</code> and assign it the sum of the numbers:</p>
<pre><code>result = Number1 + Number2
</code></pre>
<p>and finally print the result</p>
<pre><code>print "Result = " + str(result)
</code></pre>
<p>The final code should look like this:</p>
<pre><code>print ("This is a calculator program, press Enter to continue")
a = input()

while a == "":
    print
    print("Enter 1 for option 1 which adds")
    print("Enter 2 for option 2 which subtracts")
    print("Enter 3 for option 3 which multiply")
    print("Enter 4 for option 4 which divides")
    print("Enter 5 for option 5 which quits",)

    Option = input("Enter an option number:")

    if Option == 1:
        Number1 = int(input("Enter number 1"))
        Number2 = int(input("Enter number 2"))
        result = Number1 + Number2
        print "Result = " + str(result) # To print you have to cast to `str`

    elif Option == 2:
        ...
    elif Option == 3:
        ...
    elif Option == 4:
        ...
    else:
        break
</code></pre>
<p><strong>Notes:</strong></p>
<ul>
<li><p>You could use an <code>if-elif-else</code> as the structure, so if <code>Option == 1</code>, the following conditions won't be checked. </p></li>
<li><p>I would also recommend you to follow <a href="http://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow">Python naming convention</a>. Your variable <code>Number1</code> should be called <code>number1</code> and so on.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I corrected your code.</p>
<pre><code>_ = input("This is a calculator program, press Enter to continue")
print ("""Enter 1 for option 1 which adds
          Enter 2 for option 2 which subtracts
          Enter 3 for option 3 which multiplies
          Enter 4 for option 4 which divides
          Enter 5 for option 5 which quits""")
while True:
    Option = input("Enter an option number: ")

    if Option == '1':
        Number1 = int(input("Enter number 1: "))
        Number2 = int(input("Enter number 2: "))
        print("The Result is {0}".format(Number1 + Number2))

    elif Option == '2':
        Number1 = int(input("Enter number 1: "))
        Number2 = int(input("Enter number 2: "))
        print("The Result is {0}".format(Number1 - Number2))

    elif Option == '3':
        Number1 = int(input("Enter number 1: "))
        Number2 = int(input("Enter number 2: "))
        print("The Result is {0}".format(Number1 * Number2))

    elif Option == '4':
        Number1 = int(input("Enter number 1: "))
        Number2 = int(input("Enter number 2: "))
        print("The Result is {0}".format(Number1 / Number2))

    else:
        break
</code></pre>
<p>Notes: </p>
<ol>
<li>Triple quote syntax is good for long multiline strings.</li>
<li>The pythonic way of formatting a printed string is the <a href="https://stackoverflow.com/questions/5082452/python-string-formatting-vs-format">str.format</a> method.</li>
</ol>
<p>Good luck learning! </p>
</div>
<span class="comment-copy">your not saving out the int function. try <code>you_var =int(Number1,Number2)</code></span>
<span class="comment-copy"><code>a = input()</code> should be inside the while loop, and also instead of <code>print(Result = Number1 + Number2)</code> you should <code>print(Number1 + Number2)</code> (similarly for the other options)</span>
<span class="comment-copy">You should <i>really</i> use a better title. Almost every beginner in Python <i>just</i> started learning, but that doesn't mean that your question would be useful to them.</span>
<span class="comment-copy">also <code>Number1 = int(input(...))</code></span>
<span class="comment-copy">I think your main problem is the comparison <code>Option = 1</code>. Option will be a <code>str</code> and 1 is an <code>int</code>. It'll always return false.</span>
<span class="comment-copy">Hey do you know where you said Option = int(input("Enter an option number:")), is it possible to do it like this Option = input("Enter an option number") /newline int(Option)? I forgot to put that in my orignal post, the one line of code.</span>
<span class="comment-copy">Hey do you know where you said Option = int(input("Enter an option number:")), is it possible to do it like this Option = input("Enter an option number") /newline int(Option)?</span>
<span class="comment-copy">@user3216729, yes but you need to do <code>Option=int(Option)</code></span>
<span class="comment-copy">ah right ty, I come from C# so thats why I would do it like that. I tend to go for 1 or 2 more lines instead of doing all in one line for me personally, jsut helps me look over it.Thanks!</span>
<span class="comment-copy">@user3216729, you could upvote or accept it if you like this answer. ;)</span>
<span class="comment-copy">C# is the only language I know so far, and in C# I would do it this way Console.Write("Enter an option number") /newline string option = Console.ReadLine() /newline optionnumber = int.Parse(option). Is an input() just the same as a Console.Write()/Console.WriteLine()? It doesnt let me upvote :/</span>
<span class="comment-copy">There is no <code>raw_input</code> in Python 3, which OP seems to be using. Python 3 <code>input</code> behaves like Python 2 <code>raw_input</code>, and there is no Python 3 equivalent of Python 2's <code>input</code>.</span>
