<div class="post-text" itemprop="text">
<p>I have a huge list of URL's from a client which I need to run through so i can get content from the pages. This content is in different tags within the page.</p>
<p>I am looking to create an automated service to do this which I can leave running to complete.
I want the automated process to load each page and get the content from particular html tags, then process some this content to ensure the html is correct.</p>
<p>If possible I want to generate one XML or JSON file, but I can settle for an XML or JSON file per page.</p>
<p>What is the best way to do this, preferably something I can run off a mac or a linux server.</p>
<p>The list of URL's are to an external site.</p>
<p>Is there something I can already use or an example somewhere which will help me.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a perfect application of <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow">BeautifulSoup</a>, IMHO.  Here is a <a href="http://www.pythonforbeginners.com/python-on-the-web/web-scraping-with-beautifulsoup/" rel="nofollow">tutorial</a> on a similar process. It is certainly a headstart.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://scrapy.org/" rel="nofollow noreferrer">Scrapy</a> is an excellent framework for spidering and scraping.</p>
<p>I think you'll find it will involve a little more learning overhead based on the Requests + Beautiful Soup or LXML tutorial mentioned by tim-cook in <a href="https://stackoverflow.com/a/21126063/263421">his answer</a>. However if you're writing a lot of scraping / parsing logic it should guide toward a pretty well-factored (readiable, maintainable) codebase.</p>
<p>So, if it's a one-off run I'd go with Beautiful Soup + Requests. If it'll be re-used, extended and maintained over time then Scrapy would be my pick.</p>
</div>
<span class="comment-copy">Python's <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow noreferrer">BeautifulSoup</a> is pretty good at parsing HTML. <a href="http://docs.python.org/3/library/urllib.request.html" rel="nofollow noreferrer">urllib.request</a> is good at fetching things. Combine the two and you've got the tools you need.</span>
