<div class="post-text" itemprop="text">
<p>These days I am learning Python's Exception handling features deeply. I encountered <code>exception SystemExit</code>. While reading about this from <a href="http://docs.python.org/2/library/exceptions.html" rel="nofollow">official Python Docs</a> I got question in mind that what exactly would have happen when I terminate Python script by pressing <kbd>Ctrl</kbd>+<kbd>c</kbd>?</p>
<p>lets take this sample code:</p>
<pre><code>def func1(a,b):
    print "func1: "+str(a/b)
    #some more functions

def func2(a,b):
    print "func2: "+str(a/b)
    #some more functions

if __name__=="__main__":
    import random

    count=0
    for i in range(1000000):
            count=count+1
            print "count: "+str(count)
            try:
                    func1(random.randint(-2,3),random.randint(-2,3))
            except KeyboardInterrupt:
                    raise
            except:
                    print "error in func1"
            try:
                    func2(random.randint(-2,3),random.randint(-2,3))
            except KeyboardInterrupt:
                    raise
            except:
                    print "error in func2"

            print "\n"
</code></pre>
<p>In this sample code I am catching <code>KeyboardInterrupt</code> so I can stop my script by pressing <kbd>Ctrl</kbd>+<kbd>c</kbd>. Should I catch <code>SystemExit</code> too to make this code more mature? if yes then why? actually this question is source of my main question which appear on title. so don't consider that I am asking two different question in one post.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You usually not need to catch <code>SystemExit</code> as it is what makes <a href="http://docs.python.org/2/library/constants.html#exit" rel="nofollow"><code>exit()</code></a> and <a href="http://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit()</code></a> functions work:</p>
<blockquote>
<p><strong>sys.exit([arg])</strong></p>
<p>Exit from Python. This is implemented by raising the <code>SystemExit</code> exception, so cleanup actions specified by <code>finally</code> clauses of <code>try</code> statements are honored, and it is possible to intercept the exit attempt at an outer level.</p>
</blockquote>
<p>Example:</p>
<pre><code>try:
    exit()
except SystemExit:
    print "caught"
</code></pre>
<p>Therefore, you usually don't want to catch all exceptions in the first place (by using an empty <code>except:</code> clause). The best approach is generally to make your exception handlers as specific as possible. It otherwise makes debugging your application exceptionally hard, as it either hides errors entirely or at least makes it hard to diagnose the details.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only exception your functions can raise is a <code>ZeroDivisionError</code>, so you should only catch that one:</p>
<pre><code>import random

if __name__ == "__main__":
    for count in range(1000000):
        print "count:", count

        try:
            func1(random.randint(-2, 3),random.randint(-2, 3))
        except ZeroDivisionError:
            print "error in func1"

        try:
            func2(random.randint(-2, 3),random.randint(-2, 3))
        except ZeroDivisionError:
            print "error in func2"

        print "\n"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your title says something different than the body of your question.</p>
<ol>
<li><p>To the title:</p>
<p>What happens internally is that python captures the <code>SIGINT</code> and raises a <code>KeyboardInterrupt</code> exception from it.</p></li>
<li><p>To the text:</p>
<p>You don't want to do <code>except:</code>.</p>
<p>Instead, you want</p>
<pre><code>if __name__=="__main__":
    try:
        import random

        count=0
        for i in range(1000000):
                count=count+1
                print "count: "+str(count)
                try:
                        func1(random.randint(-2,3),random.randint(-2,3))
                except Exception, e:
                        print "error in func1", e # or something...
                try:
                        func2(random.randint(-2,3),random.randint(-2,3))
                except Exception, e:
                        print "error in func2", e # or something...

                print "\n"
except Exception: 
    raise # any other "normal" exception.
except: # Here it is ok, as you handle most exceptions above.
    pass
</code></pre></li>
</ol>
<p>Most "normal" exception which should normally be handled derive from <code>Exception</code>. Those which have an internal meaning and should normally not be caught (except on global level) don't <a href="http://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow">derive from <code>Exception</code></a>.</p>
<p>These are <code>KeyboardInterrupt</code>, <code>SystemExit</code> and <code>GeneratorExit</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're uncertain what exceptions the code you're calling throws to indicate errors then you should (in order of preference):</p>
<ol>
<li>Find out what it is documented to throw and only catch that</li>
<li>catch <code>Exception</code>, not everything.</li>
</ol>
<p>Neither <code>KeyboardInterrupt</code> nor <code>SystemExit</code> is a subclass of <code>Exception</code>, but all of the standard Python exceptions used to indicate errors are.</p>
</div>
<span class="comment-copy">I’m not sure what your question is. You already know that <code>KeyboardInterrupt</code> is the exception being thrown when you do <code>CTRL+C</code>, so what are you asking? The only question with <code>SystemExit</code> can be simply answered with a plain “no”.</span>
<span class="comment-copy">Thank you, exact question is my title and the body part is source of my question.</span>
<span class="comment-copy">thats just a sample code, thats why I wrote <code>#some more functions</code>. so we may get more errors</span>
<span class="comment-copy">Well then you should figure out what exceptions can be raised there and only catch those. To answer your question; mature code will only catch those exceptions that can occur and will only catch them, when the program can safely recover from that state.</span>
<span class="comment-copy">my title is the question, body's text is source of my question</span>
