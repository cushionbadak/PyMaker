<div class="post-text" itemprop="text">
<p>I get on input file which contains only one class definition (class is just constants container, contains keys for json, similar file is used on Java client to decode json) looks like:</p>
<pre><code>class Constants(object):

    VERSION= 'version'
    OS = 'os'
    PROGRAM = 'program'
    # more constants .....
</code></pre>
<p>How to get dictionary of all properties defined inside Constants, how to parse file to dictionary ?
I want to compress keys and generate new .py and .java files with same constants keys but shorter keys.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Import the module
<ul>
<li>I used <a href="http://docs.python.org/2/library/imp.html#imp.load_module" rel="nofollow"><code>imp.load_module</code></a> instead of <code>__import__</code> in the following code to import abitrary file path.</li>
</ul></li>
<li>Find the class object.</li>
<li>Iterate the class attribute using <a href="http://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars</code></a>:</li>
</ol>
<hr/>
<pre><code>import imp
path = '/path/to/file'
with open(path, 'U') as f:
    mod = imp.load_module('temporary', f, path, ('.py', 'U', imp.PY_SOURCE))

builtins = vars(__builtins__)
cls = next(value for name, value in vars(mod).items() if name not in builtins)
const_dict = {name: value for name, value in vars(mod.Constants).items()
                          if not name.startswith('_')}
print(const_dict)

# =&gt; {'OS': 'os', 'VERSION': 'version', 'PROGRAM': 'program'}
</code></pre>
<p>Tested in Python on 2.7.6, 3.3.2, 3.4.0b2.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; [elem for elem in dir(Constants) if not elem.startswith("_")]
['OS', 'PROGRAM', 'VERSION']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on answer number one:</p>
<pre><code># dir(yourClass) will get you all the methods and properties of yourClass and parents wheather yourClass
# is a definition or an instance
elements = [elem for elem in dir(Constants) if not elem.startswith("_")]

# Using yourClass.__dict__.keys() will give you the same of dir if applied to a definition but only instance members 
# if applied to an instance
elements = [elem for elem in Constants.__dict__.keys() if not elem.startswith("_")]

# You can get to the values of the properties with
for el in elements:
    print Constants.__dict__[el]
    # plus whatever you want to do to those elements

# Or if you're using the __dict__ way
Constants.__dict__.items()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example of using <code>execfile</code> and python 2.6 (I work on Debian Wheezy). A shorter version to build the dictionary for python version 2.7 and higher is given too. The <code>constants.py</code> file can define several classes, all of them will be parsed.</p>
<pre><code>#!/usr/bin/env python

d = {}
const_d = {}

execfile("constants.py", d)

for k,cls in d.items():
  if k not in vars(__builtins__):
    if type(cls) is type:
      # Python version &lt; 2.7
      attributes = {}
      for name, value in vars(cls).items():
        if not name.startswith('__'):
          attributes[name] = value
      # Python version &gt;= 2.7
      #attributes = {name: value for name, value in vars(cls).items() if not name.startswith('__')}
      const_d[cls.__name__] = attributes
      pass
    pass
  pass

print(const_d)
</code></pre>
</div>
<span class="comment-copy">There are no properties defined inside Constants, those are all regular attributes.</span>
<span class="comment-copy">You'd probably be better off using the <a href="http://docs.python.org/2/library/configparser.html#module-ConfigParser" rel="nofollow noreferrer"><code>ConfigParser</code></a> module.</span>
<span class="comment-copy">I think he wants to parse the file and get this information.</span>
<span class="comment-copy">@thefourtheye: <code>How to get dictionary of all properties defined inside Constants</code>. My answer was based on this statement. Otherwise, he needs few more statements, to read all classes inside a module and then recursively determine all the properties</span>
