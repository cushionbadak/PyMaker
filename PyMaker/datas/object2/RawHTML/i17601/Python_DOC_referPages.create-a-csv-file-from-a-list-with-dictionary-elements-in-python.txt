<div class="post-text" itemprop="text">
<p>so I have a list which has 6 dicts inside and I would like to write that to a csv file.
 I have tried a lot of ways to do it but i have been unsuccessful so far. when i try to write it as a list it give me an error when i try to write it as a dict it also give me an error. can anyone point me in the write direction please.</p>
<pre><code>     r_vals=
     [{'distance':2.35, 'mpg': 3.215, 'power': 45.0},{'distance':214.3, 'mpg':   29.3,'power': 124.0},{'distance':2.35, 'mpg': 3.215, 'power': 45.0},...{'distance':0.35, 'mpg': 45.5, 'power': 156.0}]
</code></pre>
<p>or if there is easier way to get it as a dataframe I would like it to look like this</p>
<pre><code>    distance   mpg       power
    2.35       3.215     45.0
    214.3      29.3      124.0
    .
    . 
    0.35       45.5      156
</code></pre>
<p>thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you looked into Pandas? <a href="http://pandas.pydata.org/" rel="nofollow">http://pandas.pydata.org/</a></p>
<p>In pandas you can do this:</p>
<pre><code>&gt;&gt;&gt; r_vals
[{'distance': 2.35, 'power': 45.0, 'mpg': 3.215}, {'distance': 214.3, 'power': 124.0, 'mpg': 29.3}, {'distance': 2.35, 'power': 45.0, 'mpg': 3.215}, {'distance': 0.35, 'power': 156.0,'mpg': 45.5}]
&gt;&gt;&gt; df = pandas.DataFrame(r_vals)
&gt;&gt;&gt; df
   distance     mpg  power
0      2.35   3.215     45
1    214.30  29.300    124
2      2.35   3.215     45
3      0.35  45.500    156
</code></pre>
<p>and then you can do a:</p>
<pre><code>df.to_csv("path.csv",index=False)
</code></pre>
<p>and you have saved your dictionary in both a dataframe in memory and a csv.</p>
<p>If you want to use just native python, then you can do something like this:</p>
<pre><code>import csv
outfile = open("path.csv","w")
csv_writer = csv.write(outfile)
csv_writer.writerow(header)
header = r_vals[0].keys()
for row in r_vals:
  csv_writer.writerow(str([row[col_name]) for col_name in header])
outfile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"create a csv file from a list with dictionary elements in python" is exactly what <a href="http://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow"><code>csv.DictWriter</code></a> does:</p>
<pre><code>with open('output.csv', 'w') as f:
    csv.DictWriter(f, fieldnames=rvals[0].keys()).writerows(rvals)
</code></pre>
<p>(If your ultimate goal is to get some kind of data frame object, and you're just creating a CSV file because you think it's the best way to do that… then you don't have to; see Ryan G's answer for how easy <code>pandas</code> makes this.)</p>
<p>After this:</p>
<pre><code>$ cat output.csv
3.215,45.0,2.35
29.3,124.0,214.3
3.215,45.0,2.35
45.5,156.0,0.35
</code></pre>
<p>Of course you probably want it to include the headers and/or put the columns in some particular order rather than whatever order the <code>dict</code> happens to have. (You don't need to do <em>both</em>, but if you don't do either one or the other, the CSV isn't very useful, because you'll have no idea which column means what…) Here's both:</p>
<pre><code>with open('output.csv', 'w') as f:
    w = csv.DictWriter(f, fieldnames='distance mpg power'.split())
    w.writeheader()
    w.writerows(rvals)
</code></pre>
<p>Output:</p>
<pre><code>distance,mpg,power
2.35,3.215,45.0
214.3,29.3,124.0
2.35,3.215,45.0
0.35,45.5,156.0
</code></pre>
<p>If you want a variation on the default CSV dialect, see <a href="http://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters" rel="nofollow">Dialects and Formatting Parameters</a>. To get exactly your desired output, just add <code>, delimiter='\t'</code> to the <code>DictWriter</code> constructor.</p>
</div>
<div class="post-text" itemprop="text">
<p>use tabulate</p>
<pre><code>r_vals=[[2.35,3.215,45.0],[214.3,29.3,124.0],[2.35, 3.215,45.0],[0.35,45.5,156.0]]

 print tabulate.tabulate(r_vals, headers=["distance","mpg", "power"])

  distance     mpg    power
----------  ------  -------
      2.35   3.215       45
    214.3   29.3        124
      2.35   3.215       45
      0.35  45.5        156
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use string formatting to do what you want:</p>
<pre><code>with open(target, 'w') as f:
    f.write("distance\tmpg\tpower\n") # header
    for d in r_vals:
        f.write"{0[distance]:.2f}\t{0[mpg]:.3f}\t{0[power]:.1f}\n".format(d))
</code></pre>
<p>Here the format specification is <code>0</code> for the first argument to format, <code>[key]</code> to select the appropriate value, then <code>.nf</code> to give <code>n</code> decimal places. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/csv.html#csv.DictWriter" rel="nofollow">http://docs.python.org/2/library/csv.html#csv.DictWriter</a> should do that, it will also write a header row based on the column order you provide.</p>
<pre><code>with open('/home/dnfehren/windesk/test.csv','wb') as fl:
    fc = csv.DictWriter(fl, ['distance','mpg','power'])

    for rvalnum, rval in enumerate(rvals):
        if rvalnum == 0:
            fc.writeheader()
            fc.writerow(rval)
        else:
            fc.writerow(rval)
</code></pre>
</div>
<span class="comment-copy">Are you trying to get this into a CSV, and the dataframe part is just something you thought might help that goal, or are you trying to get this into a dataframe, and the CSV part is something you thought might help <i>that</i> goal?</span>
<span class="comment-copy">@roippi: For a flat list of fixed-structure dicts, I think CSV makes more sense than JSON. (It makes that fixed structure explicit, avoids repetition, gives you a more human-readable/editable file, and lets you import it into Excel.) But it was definitely worth bringing up the option to show that CSV isn't the only file format in the world; you probably shouldn't have deleted the comment…</span>
<span class="comment-copy">If his main goal is to create and work with a data frame, the first half of this answer is obviously a <i>much</i> better way to do it than creating a CSV file and trying to process it.</span>
<span class="comment-copy">But for the second half… you're going through a lot of extra work to turn each dict into a sequence so you can use <code>writer</code> instead of <code>DictWriter</code>… Also, you don't need to call <code>str</code> with either <code>writer</code> or <code>DictWriter</code>.</span>
<span class="comment-copy">@abarnert  Very good point!</span>
<span class="comment-copy">Thank you so so much Ryan G.</span>
<span class="comment-copy">i tried that i didn't work before but thanks.</span>
<span class="comment-copy">@user3225439: <i>What</i> did you try? <i>What</i> didn't work? The output in my examples all come from running this exact code against your exact <code>rvals</code> but with the <code>...</code> removed to make it a valid list.</span>
<span class="comment-copy">If you're going to suggest a third-party library, you should probably include a link, describe what it does (including what makes it better than stdlib solutions), or something.</span>
<span class="comment-copy">Why move <code>writeheader</code> into the loop (which then requires you to add <code>enumerate</code> and a check for <code>0</code>), when you can just call it before the loop (which then allows you to eliminate the loop and use <code>writerows</code> instead)?</span>
<span class="comment-copy">thanks! good point - I usually add a loop counter out of habit as there could be other things that I want to track by where they occur in a list or file</span>
