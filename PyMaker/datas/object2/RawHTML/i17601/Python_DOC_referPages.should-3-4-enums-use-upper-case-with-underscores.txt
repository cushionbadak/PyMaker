<div class="post-text" itemprop="text">
<p>As the documentation says, an enumeration is a set of symbolic names (members) bound to unique, <strong>constant</strong> values. The <a href="http://www.python.org/dev/peps/pep-0008/#constants">PEP8</a> says that constants are usually named as <code>UPPER_CASE</code>, should I use this notation in Python 3.4 <a href="http://docs.python.org/3.4/library/enum.html">enums</a>? If yes, why the examples in the docs are using <code>lower_case</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update</strong></p>
<p>The BDFL (Benevolent Dictator For Life) has spoken, and the <a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="noreferrer"><code>Enum documentation</code></a> has changed to reflect all upper-case member names.</p>
<hr/>
<p>The examples in the [previous] docs are lower-case primarily because one of the preexisting modules that Enum was based on used lower-case (or at least its author did ;).</p>
<p>My usage of enum has usually been something along the lines of:</p>
<pre><code>class SomeEnum(Enum):
    ... = 1
    ... = 2
    ... = 3
globals().update(SomeEnum.__members__)
</code></pre>
<p>which effectively puts all the members in the module namespace.</p>
<p>So I would say whichever style feels more comfortable to you -- but pick a style and be consistent.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think they're not UPPER_CASE because, well, it just looks weird when it is.  Since you can only access the enumerations through the class (e.g. <code>my_enum.VALUE</code>) it looks weird if the members are capitalized.  In C the members of the enumeration go into the module namespace, so it doesn't look weird (to me) when the members are capitalized, in usage:</p>
<pre><code>typedef enum {OFF, ON} lightswitch;
lightswitch bathroomLight = ON;
</code></pre>
<p>But in Python you access them through the enumeration class that you create, and it looks weird to go from ClassStyle names to ALL_CAPS.</p>
<pre><code>class Lightswitch(Enum):
    OFF = 0
    ON = 1

# isn't that weird?
my_light = Lightswitch.OFF
</code></pre>
<p>Bottom line, I think it's just aesthetic.  I've been wrong before, though, and I realize that this is just my opinion.</p>
</div>
<div class="post-text" itemprop="text">
<p>When in doubt about style, I usually defer to the style used in standard library code and examples from the official documentation. It keeps me from wasting time on arbitrary decisions.</p>
<p>So in this case, I recommend lower case, like variable names.</p>
</div>
<span class="comment-copy">In languages that support enumerations as first class citizens, Enumerations != Constants. Yes, the enumeration members may have constant values, but that's not the same as a variable being a constant.</span>
<span class="comment-copy">+1, I didn't think it like that. Thanks.</span>
<span class="comment-copy">FWIW, there are lots of PEP8 infractions in the standard lib ... And the whole thing is meant to be a <i>guide</i> anyway.  One of the most important parts of it is knowing when to bend/break the rules.  IMHO, this is a bit of a corner case and I wouldn't fault you for going either way.  Just be consistent.</span>
<span class="comment-copy">@mgilson One of the problems treating PEP8 merely as a guide that you might bend or break are that it means that there's a lot more room for bikeshedding on style issues. When I'm reviewing someone's code, and I come across a patch which upcases something because the author thinks that it counts as a constant while I disagree, then that turns into a whole long pointless email thread (this actually came up recently as someone upcased a global logger because Pylint complained about it). It's nice to have an authoritative, easy to apply rule to avoid this kind of bikeshedding.</span>
<span class="comment-copy">@BrianCampbell -- <a href="http://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">I'm not saying anything novel here</a>.  All I'm saying is that as far as I see it, depending on your interpretation of what is and isn't a constant, two different people could come to different judgments about what to do here.  <i>On a project basis</i>, sometimes it's necessary to adopt additional style rules.</span>
<span class="comment-copy">Mmm I don't like using enums like that but it's just my opinion. I think I'll use <code>lower_case</code>. Thanks for the answer!</span>
<span class="comment-copy">Well, it’s not weirder than, say, <code>re.IGNORECASE</code>. (I don’t find it weird at all, really, but that’s subjective.)</span>
<span class="comment-copy">@minitech  You are right; it really is subjective.  Maybe the difference is that <code>re.IGNORECASE</code> is a module level constant, and the enum's member's look more like class attributes.</span>
<span class="comment-copy">Definitely it's subjective, I like the <code>lowercase.UPPER_CAS</code>E notation. But I think I'll use <code>lower_case</code> just like in the docs. Thanks! +1</span>
<span class="comment-copy">Lightswitch.OFF is actually preffered way in Java so people comming form Java might see that as less weird that the lowercase.</span>
<span class="comment-copy">Yeah, I think the documentation should be right. Thanks for your answer! +1</span>
<span class="comment-copy">Sure. As others have said, consistency is what matters. don't forget to accept an answer ;)</span>
<span class="comment-copy">Well I'll accept this but there's no right answer, all answers are good and it depends on the programmer. Thanks.</span>
<span class="comment-copy">The BDFL (Benevolent Dictator For Life) has spoken, and the <a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="nofollow noreferrer"><code>Enum documentation</code></a> has changed to reflect all upper-case member names.</span>
