<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/613183/how-do-i-sort-a-dictionary-by-value">How do I sort a dictionary by value?</a>
<span class="question-originals-answer-count">
                    42 answers
                </span>
</li>
</ul>
</div>
<p>I have a python dict that looks like </p>
<pre><code>people {"mykey1": myCustomObject, "mykey2": myCustomObject }
</code></pre>
<p>Within myCustomObject, I have an integer ID field. So that looks like</p>
<pre><code>class myCustomObject:
    def __init__(self, myID, firstName, lastName):
        self.ID = myID
        self.FirstName = firstName
        self.LastName = lastName
</code></pre>
<p>Would it be possible to order this dictionary by the ID property within the custom object???</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>dict</code> inherently has an arbitrary order.</p>
<p>If you just want to <em>access</em> it in a specific order one time, you can just sort it. If you don't know how to sort things using anything other than the default ordering, read the <a href="http://docs.python.org/3/howto/sorting.html" rel="noreferrer">Sorting HOW TO</a>. But basically:</p>
<pre><code>for k, v in sorted(d.items(), key=lambda kv: kv[1].ID):
    print('{}: {}'.format(k, v))
</code></pre>
<p>If you actually want to <em>store</em> them in that order, you need some time that maintains order. Of course a <code>list</code> will work, but an <a href="http://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>OrderedDict</code></a> works like a <code>dict</code>, except that it maintains the order of insertion, which is more convenient for most use cases. So, if you create a new <code>OrderedDict</code> and then insert everything into it in sorted order, that would probably solve your problem:</p>
<pre><code>d1 = { your original dict }
d2 = collections.OrderedDict()
for key in sorted(d1, key=lambda k: d1[k].ID):
    d2[key] = d1[key]
</code></pre>
<p>You can simplify this down to one line if you understand comprehensions:</p>
<pre><code>d2 = OrderedDict(sorted(d1.items(), key=lambda kv: kv[1].ID))
</code></pre>
<p>Variations on similar examples are shown in the docs under <a href="http://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="noreferrer"><code>OrderedDict</code> Examples and Recipes</a>.</p>
<p>If you instead want the dictionary to <em>maintain</em> sorted order, you will need some kind of sorted dict class. The stdlib doesn't come with such a class, but there are many options available on ActiveState and PyPI. Some are implemented as an <code>OrderedDict</code> that re-sorts itself every time you update them (or, sometimes, the first time you access them after an update, which allows a long chain of updates to avoid a long chain of sorts). Others use <code>bisect</code> or a search tree (e.g., a binary red-black tree or a 10-ary B-tree) to insert elements in the right place.</p>
</div>
<span class="comment-copy"><code>dict</code> instances can <i>never</i> be ordered.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Except when they can be, by using an OrderedDict, which would be an instance of dict (check it!: <code>&gt;&gt;&gt; import collections; d = collections.OrderedDict(); isinstance(d, dict)</code> <code>True</code></span>
<span class="comment-copy">@AaronHall: It's really just an accident of implementation that <code>OrderedDict</code> is a subclass of <code>dict</code>, so you probably shouldn't rely on that; if you want to check whether it's a dict-like object, use <code>isinstance(d, MutableMapping)</code> instead. But obviously you're right that you shouldn't assume it's <i>not</i> a <code>dict</code> subclass, especially given that it happens to be one in fact, and documented as such. :)</span>
<span class="comment-copy">@abarnert I know, I'm just being "smart". :) I just implemented a non-dict-inheriting MutableMapping in response to another question (which I coincidentally asked myself here: <a href="http://stackoverflow.com/questions/21361106/how-would-i-implement-a-dict-with-abstract-base-classes-in-python/21368848#21368848" title="how would i implement a dict with abstract base classes in python">stackoverflow.com/questions/21361106/â€¦</a>)</span>
<span class="comment-copy">Excellent answer, thank you. The lambda expression definitely got me what I need.</span>
