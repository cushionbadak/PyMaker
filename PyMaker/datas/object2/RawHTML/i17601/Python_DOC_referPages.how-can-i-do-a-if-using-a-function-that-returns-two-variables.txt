<div class="post-text" itemprop="text">
<p>I mean, if I have a function like this: </p>
<pre><code>def example(foo, bar)
    ...
    return False, True
</code></pre>
<p>How can I compare the 2 returns? </p>
<pre><code>if example(foo, bar):
</code></pre>
<p>I know that I can do this: </p>
<pre><code>bool1, bool2 = example(foo,bar)
if bool1 and bool2:
    ...
</code></pre>
<p>But, can I compare the 2 of them without seting them in a variable? </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/functions.html#all" rel="nofollow">all</a>.</p>
<pre><code>if all(example(foo, bar)):
    # do something
</code></pre>
<p>If you need just one positive result you can use <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow">any</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on what you want to check. If you can send them to another function to do the checks, it will work without variables. Say if you want to check they're both True:</p>
<pre><code>if all(example()):
    ...
</code></pre>
<p>or <code>any()</code> for one of them.</p>
<p>But if you say want to compare them with each other, you'd call the function twice:</p>
<pre><code>if example()[0] == example()[1]:
</code></pre>
<p>and that's usually not desirable. So there I'd simply use the variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>simply use</p>
<pre><code>if (True, True) == example(foo, bar):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use all command:</p>
<pre><code>if all(example(foo,bar)):
    # All returned values are True
</code></pre>
</div>
<span class="comment-copy">Or <code>any</code>, depending on what they want</span>
<span class="comment-copy">Just was working on that.</span>
<span class="comment-copy">Thank you, I didn't even know that all() and any() exists</span>
<span class="comment-copy">Second example is entirely different. What if both are <code>False</code>?</span>
<span class="comment-copy">Wont this call the function twice? The comparison with one another?</span>
<span class="comment-copy">thefourtheye: of course they're entirely different, I was showing different possibilities depending on what they want. Aswin: yes that calls the function twice, and I actually said that.</span>
<span class="comment-copy">There are only three cases for two <code>bool</code>s (unless order matters); use <code>any</code>, <code>all</code> and <code>not any</code>.</span>
<span class="comment-copy">@jonrsharpe: There's also "exactly one", "both the same", and "at most one".</span>
<span class="comment-copy">No need to create another iterator on example, which already returns an iterable tuple. Also, <code>bool</code> is a built-in.</span>
<span class="comment-copy">@IceArdor: Edited bool. removed the iterator too</span>
