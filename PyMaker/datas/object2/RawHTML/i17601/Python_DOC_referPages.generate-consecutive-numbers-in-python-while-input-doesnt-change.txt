<div class="post-text" itemprop="text">
<p>i need to get consecutive numbers while an input number doesnt change. </p>
<p>so i get give(5)-&gt;1, give(5)-&gt;2, and so on, but then: give(6)-&gt;1 again, starting the count.</p>
<p>So far I solved it with an iterator function count() and a function give(num) like this:</p>
<pre><code>def count(start=1):
    n=start
    while True:
        yield n
        n +=1
def give(num):
    global last
    global a
    if num==last:
        ret=a.next()
    else:
        a=count()
        ret=a.next()
    last=num
    return ret
</code></pre>
<p>It works, but its ugly: I have two globals and have to set them before I call give(num). I'd like to be able to call give(num) without setting previously the 'a=count()' and 'last=999' variables. I'm positive there's better way to do this...</p>
<p>edit: ty all for incredibly fast and varied responses, i've got a lot to study here.. </p>
</div>
<div class="post-text" itemprop="text">
<p>The obvious thing to do is to make <code>give</code> into an object rather than a function.* Any object can be made callable by defining a <a href="http://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow"><code>__call__</code></a> method.</p>
<p>While we're at it, your code can be simplified quite a bit, so let's do that.</p>
<pre><code>class Giver(object):
    def __init__(self):
        self.last, self.a = object(), count()
    def __call__(self, num):
        if num != self.last:
            self.a = count(1)
        self.last = num
        return self.a.next()

give = Giver()
</code></pre>
<p>So:</p>
<pre><code>&gt;&gt;&gt; give(5)
1
&gt;&gt;&gt; give(5)
2
&gt;&gt;&gt; give(6)
1
&gt;&gt;&gt; give(5)
1
</code></pre>
<p>This also lets you create multiple separate givers, each with its own, separate current state, if you have any need to do that.</p>
<p>If you want to expand it with more state, the state just goes into the instance variables. For example, you can replace <code>last</code> and <code>a</code> with a dictionary mapping previously-seen values to counters:</p>
<pre><code>class Giver(object):
    def __init__(self):
        self.counters = defaultdict(count)
    def __call__(self, num):
        return next(self.counters[num])
</code></pre>
<p>And now:</p>
<pre><code>&gt;&gt;&gt; give(5)
1
&gt;&gt;&gt; give(5)
2
&gt;&gt;&gt; give(6)
1
&gt;&gt;&gt; give(5)
3
</code></pre>
<hr/>
<p>* I sort of skipped a step here. You can always remove globals by putting the variables and everything that uses them (which may just be one function) inside a function or other scope, so they end up as free variables in the function's closure. But in your case, I think this would just make your code look "uglier" (in the same sense you thought it was ugly). But remember that objects and closures are effectively equivalent in what they can do, but different in what they look like—so when one looks horribly ugly, try the other.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just keep track of the last returned value for each input. You can do this with an ordinary dict:</p>
<pre><code>_counter = {}
def give(n):
    _counter[n] = _counter.get(n, 0) + 1
    return _counter[n]
</code></pre>
<p>The standard library has a <a href="http://docs.python.org/2/library/collections.html" rel="nofollow"><code>Counter</code> class</a> that makes things a bit easier:</p>
<pre><code>import collections
_counter = collections.Counter()
def give(n):
    _counter[n] += 1
    return _counter[n]
</code></pre>
<p><code>collections.defaultdict(int)</code> works too.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this with something like this:</p>
<pre><code>def count(start=1):
    n = start
    while True:
        yield n
        n += 1

def give(num):
    if num not in give.memo:
        give.memo[num] = count()
    return next(give.memo[num])

give.memo = {}
</code></pre>
<p>Which produces:</p>
<pre><code>&gt;&gt;&gt; give(5)
1
&gt;&gt;&gt; give(5)
2
&gt;&gt;&gt; give(5)
3
&gt;&gt;&gt; give(6)
1
&gt;&gt;&gt; give(5)
4
&gt;&gt;&gt; 
</code></pre>
<p>The two key points are using a dict to keep track of multiple iterators simultaneously, and setting a variable on the function itself. You can do this because functions are themselves objects in python. This is the equivalent of a static local variable in C. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can basically get what you want via combination of <code>defaultdict</code> and <code>itertools.count</code>:</p>
<pre><code>from collections import defaultdict
from itertools import count

_counters = defaultdict(count)

next(_counters[5])
Out[116]: 0

next(_counters[5])
Out[117]: 1

next(_counters[5])
Out[118]: 2

next(_counters[5])
Out[119]: 3

next(_counters[6])
Out[120]: 0

next(_counters[6])
Out[121]: 1

next(_counters[6])
Out[122]: 2
</code></pre>
<p>If you need the counter to start at one, you can get that via <code>functools.partial</code>:</p>
<pre><code>from functools import partial

_counters = defaultdict(partial(count,1))

next(_counters[5])
Out[125]: 1

next(_counters[5])
Out[126]: 2

next(_counters[5])
Out[127]: 3

next(_counters[6])
Out[128]: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding a second answer because this is rather radically different from my first.</p>
<p>What you are basically trying to accomplish is a <em>coroutine</em> - a generator that preserves state that at arbitrary time, values can be sent into.  <a href="http://www.python.org/dev/peps/pep-0342/" rel="nofollow">PEP 342</a> gives us a way to do that with the "yield expression".  I'll jump right into how it looks:</p>
<pre><code>from collections import defaultdict
from itertools import count
from functools import partial

def gen(x):
    _counters = defaultdict(partial(count,1))
    while True:
        out = next(_counters[x])
        sent = yield out
        if sent:
            x = sent
</code></pre>
<p>If the <code>_counters</code> line is confusing, see my other answer.</p>
<p>With a coroutine, you can <em>send</em> data into the generator.  So you can do something like the following:</p>
<pre><code>g = gen(5)

next(g)
Out[159]: 1

next(g)
Out[160]: 2

g.send(6)
Out[161]: 1

next(g)
Out[162]: 2

next(g)
Out[163]: 3

next(g)
Out[164]: 4

g.send(5)
Out[165]: 3
</code></pre>
<p>Notice how the generator preserves state and can switch between counters at will.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my first answer, I suggested that one solution was to transform the closure into an object. But I skipped a step—you're using global variables, not a closure, and that's part of what you didn't like about it.</p>
<p>Here's a simple way to transform any global state into encapsulated state:</p>
<pre><code>def make_give():
    last, a = None, None
    def give(num):
        nonlocal last
        nonlocal a
        if num != last:
            a = count()
        last=num
        return a.next()
    return give
give = make_give()
</code></pre>
<p>Or, adapting my final version of <code>Giver</code>:</p>
<pre><code>def make_giver():
    counters = defaultdict(count)
    def give(self, num):
        return next(counters[num])
    return give
</code></pre>
<hr/>
<p>If you're curious how this works:</p>
<pre><code>&gt;&gt;&gt; give.__closure__
(&lt;cell at 0x10f0e2398: NoneType object at 0x10b40fc50&gt;, &lt;cell at 0x10f0e23d0: NoneType object at 0x10b40fc50&gt;)
&gt;&gt;&gt; give.__code__.co_freevars
('a', 'last')
</code></pre>
<p>Those <code>cell</code> objects are essentially references into the stack frame of the <code>make_give</code> call that created the <code>give</code> function.</p>
<hr/>
<p>This doesn't always work quite as well in Python 2.x as in 3.x. While closure cells work the same way, if you assign to a variable inside the function body and there's no <code>global</code> or <code>nonlocal</code> statement, it automatically becomes local, and Python 2 had no <code>nonlocal</code> statement. So, the second version works fine, but for the first version, you'd have to do something like <code>state = {'a': None, 'last': None}</code> and then write <code>state['a'] = count</code> instead of <code>a = count</code>.</p>
<hr/>
<p>This trick—creating a closure just to hide local variables—is very common in a few other languages, like JavaScript. In Python (partly because of the long history without the <code>nonlocal</code> statement, and partly because Python has alternatives that other languages don't), it's less common. It's usually more idiomatic to stash the state in a mutable default parameter value, or an attribute on the function—or, if there's a reasonable class to make the function a method of, as an attribute on the class instances. There are plenty of cases where a closure <em>is</em> pythonic, this just isn't usually one of them.</p>
</div>
<span class="comment-copy">As a side note, your <code>count</code> function is already in the standard library as <a href="http://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a>.</span>
<span class="comment-copy">What should happen if you call <code>give(5)</code> again after switching from <code>give(5)</code> to <code>give(6)</code>?</span>
<span class="comment-copy">@user2357112 : yes, it should go on from the last count for that value, so it adds a complication I didnt think of.</span>
<span class="comment-copy">Can you explain what you want this for? It's a very odd thing to build…</span>
<span class="comment-copy">@abarnert: ty, I know, I learnt it there. I just wanted to recode it for learning purposes.</span>
<span class="comment-copy">+1 for offering a solution for the two possible ways to interpret the request.</span>
<span class="comment-copy">@SethMMorton: Well, I originally made a guess and only offered one solution. It wasn't until he explained his use case that I realized there was a different interpretation (and that he actually wanted that different interpretation) and edited my answer. But thanks for giving me credit for a time machine when all I had was a cover-up. :)</span>
<span class="comment-copy">i like a lot that last Giver class. Its compact and educative :)</span>
<span class="comment-copy">@jose: Just keep in mind the disadvantages. A <code>defaultdict(count)</code> stores generators, while a plain <code>Counter</code>, although it requires a bit more code to write, only stores integers, effectively extracting out the function part ("add one each time") into your <code>__call__</code> method. So, a <code>Counter</code> will use a bit less memory, and run a bit faster. I think the <code>count</code> is a bit more explicit (it tells you straight out that this is not just a number that will be used somehow, it's an autoincrementing sequence of numbers) and obviously it's more concise, but there's a tradeoff.</span>
<span class="comment-copy">this code is also beautiful. no libraries, no classes, and it simply works</span>
<span class="comment-copy">+1 for using <code>partial</code> instead of <code>lambda</code> (as everyone else, including me, did…). In cases like this I find it a lot clearer.</span>
<span class="comment-copy">Although now that I look at it, <code>1</code> is already the default value for the <code>count</code> argument, so my <code>lambda</code> was unnecessary, and so is your <code>partial</code>…</span>
<span class="comment-copy">@abarnert actually 0 is the default for <code>start</code>, 1 is the default for <code>step</code> <a href="http://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow noreferrer">docs.python.org/2/library/itertools.html#itertools.count</a></span>
<span class="comment-copy">@abarnert yeah I would check your demo of your bottom <code>Giver</code> from your answer, it does start from 0 when I run it.</span>
<span class="comment-copy">I too did a <code>from itertools import *</code> in mybrain.py long ago, and occasionally have to deal with it. :)</span>
