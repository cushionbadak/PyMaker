<div class="post-text" itemprop="text">
<p>I have following code sample in python:</p>
<pre><code>def get_objects():
    print 'Called get_objects'
    return [1, 2, 3, 4, 5]       


def main():
    for i in get_objects():
        print i

main()
</code></pre>
<p>Output for this as following:</p>
<pre><code>Called get_objects
1
2
3
4
5
</code></pre>
<p>So my question is why get_objects() called only once? Why it is not fetched data every time of itteration?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because that is exactly how for-loops work in Python.  The expression on the right of the <code>in</code> operator (which must return an iterable when evaluated) is evaluated only <em>once</em>, before looping commences. Then, the for-loop loops over the iterable returned by that evaluation.</p>
<p>Below is an excerpt from the <a href="http://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow">docs</a>*:</p>
<blockquote>
<p>The for statement is used to iterate over the elements of a sequence
  (such as a string, tuple or list) or other iterable object:</p>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p><strong>The expression list is evaluated once</strong>; it should yield an iterable
  object.</p>
</blockquote>
<hr/>
<p>*Note:  I added the bold.</p>
</div>
<span class="comment-copy"><code>get_objects()</code> is called only once and then its return value (a list) is used for the loop.</span>
<span class="comment-copy">Ok I understand what code doing now. I am asking why?</span>
<span class="comment-copy">Turn the why question back on yourself - why would the for loop ever terminate if it called get_objects() every time?</span>
<span class="comment-copy">@wim Through the c++ I knew that using objects.length in for loop is not good idea. Because it is fetched every time is this behavior is not true for python for loops?</span>
<span class="comment-copy">@Phoenix: If you're used to C++, have you used the range-based for loop syntax added in C++11, <code>for (int i: get_objects())</code>? If so… Python's loop works almost exactly the same as that. If not, <a href="http://www.cprogramming.com/c++11/c++11-ranged-for-loop.html" rel="nofollow noreferrer">here's a blog post explaining them</a>.</span>
<span class="comment-copy">Can you give some documentation related source or some reference for the book.</span>
<span class="comment-copy">Through the <code>c++</code> I knew that using objects.length in for loop is not good idea. Because it is fetched every time is this behavior is not true for python for loops?</span>
<span class="comment-copy">@Phoenix - Here's a documentation link: <a href="http://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">+1 for answer. Thank you for explanation.</span>
<span class="comment-copy">@rmunn - Excellent link.  Thanks. :)</span>
