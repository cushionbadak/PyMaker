<div class="post-text" itemprop="text">
<p>I want to copy some tabular data from Excel into a python array. That is, user willselect a range in an Excel table, press "Copy" (CTRL+C) so that the range will be copied to clipboard. Then I will get this clipboard data into a python array (list). I use <code>win32clipboard</code> <code>from pywin32</code> to get clipboard data into an array:</p>
<pre><code>import win32clipboard

def getClip():
    win32clipboard.OpenClipboard()
    data = win32clipboard.GetClipboardData()
    win32clipboard.CloseClipboard()
    return data
</code></pre>
<p>I copy the following range <code>A1:B5</code> from Excel:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/2ntzp.jpg"/></p>
<p>When I use the function above, I get a string like:</p>
<pre><code>'365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
</code></pre>
<p>How to split this string into a list, so that the list will look like:</p>
<pre><code>[(365,179), (96, -90), (48, -138), (12, -174), (30, -156)]
</code></pre>
<p>I use <code>split</code> method, but it doesn't give me what I want.</p>
<pre><code>data.split("\n")

['365\t179\r', '96\t-90\r', '48\t-138\r', '12\t-174\r', '30\t-156\r', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
&gt;&gt;&gt; [map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]
[[365, 179], [96, -90], [48, -138], [12, -174], [30, -156]]
</code></pre>
<p>Using the code from my <a href="https://stackoverflow.com/a/18656542/846892">other answer</a>, you can also handle other types as well:</p>
<pre><code>from ast import literal_eval
def solve(x):
    try:
        return literal_eval(x)
    except (ValueError, SyntaxError):
        return x

s = '365\tFoo\r\nBar\t-90.01\r\n48\tspam\r\n12e10\t-174\r\n30\t-156\r\n'
print [map(solve, x.split('\t')) for x in s.rstrip().split('\r\n')]
#[[365, 'Foo'], ['Bar', -90.01], [48, 'spam'], [120000000000.0, -174], [30, -156]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thereâ€™s actually a <a href="http://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow"><code>str.splitlines</code></a> method which will split the string by line breaks, regardless of which line breaks are used. So this works on Unix systems with just an <code>\n</code>, on Windows with <code>\r\n</code> and even on old Mac systems where the line break was just an <code>\r</code>.</p>
<pre><code>&gt;&gt;&gt; s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
&gt;&gt;&gt; s.splitlines()
['365\t179', '96\t-90', '48\t-138', '12\t-174', '30\t-156']
</code></pre>
<p>Once you have this result, you can split by tabs to get the individual cells. So you essentially have to call <code>cell.split('\t')</code> on each cell. This is best done with a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [row.split('\t') for row in s.splitlines()]
[['365', '179'], ['96', '-90'], ['48', '-138'], ['12', '-174'], ['30', '-156']]
</code></pre>
<p>As an alternative, you could also use <code>map</code> to apply the splitting operation on each cell:</p>
<pre><code>&gt;&gt;&gt; list(map(lambda cell: cell.split('\t'), s.splitlines()))
[['365', '179'], ['96', '-90'], ['48', '-138'], ['12', '-174'], ['30', '-156']]
</code></pre>
<p>As the copied data in the clipboard will always have the rows separated by newlines, and the columns separated by tabs, this solution is also safe to use for any range of cells you copied.</p>
<p>If you further want to convert integers or float to its correct datatypes in Python, I guess you could add some more conversion logic by calling <code>int()</code> on all cells that only have digits in them, <code>float()</code> on all cells that have digits and the dot in them <code>.</code>, leaving the rest as strings:</p>
<pre><code>&gt;&gt;&gt; def convert (cell):
        try:
            return int(cell)
        except ValueError:
            try:
                return float(cell)
            except ValueError:
                return cell
&gt;&gt;&gt; [tuple(map(convert, row.split('\t'))) for row in s.splitlines()]
[(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
</code></pre>
<p>For a different string:</p>
<pre><code>&gt;&gt;&gt; s = 'Foo\tbar\r\n123.45\t42\r\n-85\t3.14'
&gt;&gt;&gt; [tuple(map(convert, row.split('\t'))) for row in s.splitlines()]
[('Foo', 'bar'), (123.45, 42), (-85, 3.14)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
print [tuple(map(int,item.split(","))) for item in d.replace("\t", ",").split()]
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [85]: zip(*[iter(map(int, data.split()))]*2)
Out[85]: [(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
</code></pre>
<hr/>
<p>Here is a breakdown of how it works:</p>
<p>First, split on whitespaces:</p>
<pre><code>In [86]: data.split()
Out[86]: ['365', '179', '96', '-90', '48', '-138', '12', '-174', '30', '-156']
</code></pre>
<p>Convert the strings into ints:</p>
<pre><code>In [87]: map(int, data.split())
Out[87]: [365, 179, 96, -90, 48, -138, 12, -174, 30, -156]
</code></pre>
<p>Use the <a href="http://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow">grouper recipe</a> to group every 2 items:</p>
<pre><code>In [88]: zip(*[iter(map(int, data.split()))]*2)
Out[88]: [(365, 179), (96, -90), (48, -138), (12, -174), (30, -156)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[line.split() for line in my_str.split("\n")]
</code></pre>
<p>This just breaks the data into lines and then splits it according to white space. Check it out and modify according to your data.</p>
</div>
<span class="comment-copy">What if the copied Excel range has 5 rows and 10 columns? Then the list should have 5 inner-lists, and each inner-list should have 10 items. Will your solution provide this?</span>
<span class="comment-copy">@alwbtc Yes. It will :)</span>
<span class="comment-copy">OK, but what if the range contains strings and integers together?</span>
<span class="comment-copy">Right, I should have included some strings in that range. But wouldn't a separate question be a duplicate of this one?</span>
<span class="comment-copy">@alwbtc In that case pass the inner items to <code>ast.literal_eval</code> instead of <code>map(int..</code></span>
<span class="comment-copy">What if the copied Excel range has 5 rows and 10 columns? Then the list should have 5 tuples, and each tuple should have 10 items. Will your solution provide this?</span>
<span class="comment-copy">@alwbtc: It could, but you would have to change the 2 to 10 in the grouper recipe. If you don't know how many items are supposed to be in each tuple, a solution which splits on <code>\t</code> would be better.</span>
