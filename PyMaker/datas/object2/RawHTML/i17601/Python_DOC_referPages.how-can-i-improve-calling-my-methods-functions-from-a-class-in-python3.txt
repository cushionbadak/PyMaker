<div class="post-text" itemprop="text">
<p>I've got a class called Point with many functions. I put an extract code:</p>
<pre><code>#/usr/bin/env python3
# -*- coding: utf-8 -*-


from math import sqrt, pow, hypot, atan2, cos, sin


class Point(object):
    __slots__ = ['x', 'y', 'z']

    def __init__(self, x=0, y=0, z=None):
        self.x = x
        self.y = y
        self.z = z

    def __del__(self):
        #del P destroy (delete) a point
        class_name = self.__class__.__name__
    def dist(self, P):
        if self.z is not None:
            d = sqrt(pow(self.x - P.x, 2) + pow(self.y - P.y, 2) +
            pow(self.z - P.z, 2))
            return d
        else:
            d = sqrt(pow(self.x - P.x, 2) + pow(self.y - P.y, 2))
            return d

    def pto_medio(self, P):
        Q = Point(self.x, self.y)
        if self.z is not None:
            Q = Point(self.x, self.y, self.z)
        else:
            Q = Point(self.x, self.y)
        R = (1. / 2.) * (P + Q)
        return R
    def entrada(self):
        point = raw_input('Introduce un punto:\n')
        point = point.replace('(', '')
        point = point.replace(')', '')
        l1 = point.rsplit(',')
        self.x = float(l1[0])
        self.y = float(l1[1])
        if len(l1) == 3:
            self.z = float(l1[2])
        l1 = []

    def __repr__(self):
        if self.z is not None:
            return('({}, {}, {})'.format(self.x, self.y, self.z))
        else:
            return('({}, {})'.format(self.x, self.y))
</code></pre>
<p>When I call the functions I put this code:</p>
<pre><code>def main():
    p = Point()
    q = Point()

    Point.entrada(p)
    Point.entrada(q)

    s = p + q
    r = p - q
    m = 5 * p

    print(('Distancia = {}'.format(p.dist(q))))
    print(('Punto Medio = {}'.format(p.pto_medio(q))))

    if __name__ == '__main__':
    main()
</code></pre>
<p>I put <strong>p.dist(q)</strong> and <strong>p.pto_medio(q)</strong> but I want to write <strong>dist(p, q)</strong> and <strong>pto_medio(p, q)</strong>, respectivily. I've seen several solutions about that but all solutions give me error.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know <em>why</em> you want to do this… but if you want to, it's easy.</p>
<p>In Python, an <em>unbound method</em> (that is, a method accessed as a member of the class object) can be called just like a function, by passing the <code>self</code> argument explicitly. So:</p>
<pre><code>dist = Point.dist
pto_medio = Point.pto_medio

dist(p, q)
pto_medio(p, q)
</code></pre>
<p>In other words, the unbound method is <em>the function you <code>def</code>'d in the class definition</em>, with no magic whatsoever.*</p>
<p>If you want to know how this all works under the covers, see the <a href="http://docs.python.org/3/howto/descriptor.html" rel="nofollow">Descriptor HOWTO</a> and <a href="http://stupidpythonideas.blogspot.com/2013/06/how-methods-work.html" rel="nofollow">how methods work</a>.</p>
<hr/>
<p>And there are plenty of cases where this is useful, beyond just adapting two pieces of code that were written incompatibly. For example, <code>map</code> and <code>filter</code> don't take a function, they take any callable. Sometimes it makes sense to pass them an unbound method:</p>
<pre><code>with open(path) as f:
    strippedlines = map(str.strip, f)
</code></pre>
<p>If you couldn't pass unbound methods around like functions, you'd have to write that as:**</p>
<pre><code>with open(path) as f:
    strippedlines = map(lambda line: line.strip(), f)
</code></pre>
<hr/>
<p>* In Python 2.x, this isn't true; an unbound method is instead a bound method with <code>None</code> for the bound instance, and there's special magic to make it work. But in 3.0+, unbound methods are just plain functions.</p>
<p>** Well, actually you could just use a comprehension: <code>(line.strip() for line in f)</code>. But if you wanted to use <code>map</code>, you'd have to build a wrapper.</p>
</div>
<span class="comment-copy">Define a function outside of a class: <code>def dist(p, q):</code></span>
<span class="comment-copy">Why do you want to do this? Why define something as a method if you want to call it as a function? Or, conversely, why call something as a function if you defined it as a method? If you're designing both parts of this system, there's no reason you should design them incompatibly and then try to build an adapter to wedge them together.</span>
<span class="comment-copy">Ok, I like dist = Point.dist. I'm a mathematician and for me methods and functions in Python are both functions (maths functions). And I think is clearest write dist(p,q) because it means calculate the distance between p and q points. Thanks everybody for your help.</span>
<span class="comment-copy">@Tobal: Yeah, as long as your functions and methods don't mutate state, they're basically a good match for mathematical functions. However, if they don't mutate state, they don't have to be methods in the first place. Why not just define a <code>dist(p1, p2)</code> function in the first place? It'll be in the same module (namespace) as the <code>Point</code> class, so it won't be ambiguous with any <code>dist</code> function named anywhere else.</span>
