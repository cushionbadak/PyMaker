<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3611760/scoping-in-python-for-loops">Scoping in Python 'for' loops</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I have tried this code :</p>
<pre><code>for i in range(10)
    print(line, i)

print(line, i)
</code></pre>
<p>and the program executed without error, so why is <code>i</code> declared even after the <code>for</code> statement, it must no longer exist. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, your iteration variable isn’t deleted when the loop is finished. As <a href="http://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow">the documentation puts it</a>: „Names in the target list are not deleted when the loop is finished”.</p>
<p>This has to do with variable scopes. As has been pointed out, the variable <code>i</code> exists within the scope of the function you’re in. A loop does not create an extra scope in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>The scope is within a function, not a loop.  A little different than other programming languages.</p>
</div>
<span class="comment-copy">have a look at this question <a href="http://stackoverflow.com/questions/3611760/scoping-in-python-for-loops" title="scoping in python for loops">stackoverflow.com/questions/3611760/scoping-in-python-for-loops</a></span>
<span class="comment-copy">yea sorry didn't saw it</span>
