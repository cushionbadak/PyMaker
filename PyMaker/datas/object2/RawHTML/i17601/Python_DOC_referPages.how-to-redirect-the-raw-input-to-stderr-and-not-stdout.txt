<div class="post-text" itemprop="text">
<p>I want to redirect the <code>stdout</code> to a file. But This will affect the <code>raw_input</code>.  I need to redirect the output of <code>raw_input</code> to <code>stderr</code> instead of <code>stdout</code>.  How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Redirect <code>stdout</code> to <code>stderr</code> temporarily, then restore.</p>
<pre><code>import sys

old_raw_input = raw_input
def raw_input(*args):
    old_stdout = sys.stdout
    try:
        sys.stdout = sys.stderr
        return old_raw_input(*args)
    finally:
        sys.stdout = old_stdout
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only problem with <code>raw_input</code> is that it prints the prompt to stdout. Instead of trying to intercept that, why not just print the prompt yourself, and call <code>raw_input</code> with no prompt, which prints nothing to stdout?</p>
<pre><code>def my_input(prompt=None):
    if prompt:
        sys.stderr.write(str(prompt))
    return raw_input()
</code></pre>
<p>And if you want to replace <code>raw_input</code> with this:</p>
<pre><code>import __builtin__
def raw_input(prompt=None):
    if prompt:
        sys.stderr.write(str(prompt))
    return __builtin__.raw_input()
</code></pre>
<p>(For more info, see the docs on <a href="http://docs.python.org/2/library/__builtin__.html"><code>__builtin__</code></a>, the module that <code>raw_input</code> and other <a href="http://docs.python.org/2/library/functions.html#built-in-funcs">built-in functions</a> are stored in. You usually don't have to <code>import</code> it, but there's nothing in the docs that guarantees that, so it's better to be safe…)</p>
<p>In Python 3.2+, the module is named <a href="https://docs.python.org/3/library/builtins.html"><code>builtins</code></a> instead of <code>__builtin__</code>. (Of course 3.x doesn't have <code>raw_input</code> in the first place, it's been renamed <a href="https://docs.python.org/3/library/functions.html#input"><code>input</code></a>, but the same idea could be used there.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/getpass.html" rel="nofollow noreferrer">getpass</a></p>
<pre><code>import getpass

value=getpass.getpass("Enter Name: ")
print(value)
</code></pre>
<p>This will print the content <code>value</code> to stdout and <code>Enter Name:</code> to stderr.</p>
<p>Tested and works with python 2.7 and 3.6.</p>
</div>
<span class="comment-copy">play around with <code>sys.stdout</code>, <code>sys.stderr</code> and <code>sys.stdout</code>.</span>
<span class="comment-copy">Are there any simple way to do this.</span>
<span class="comment-copy">You could easily write a context manager, so you can write <code>with swapping_stdout:</code>. And you could easily write a decorator that just wraps the function in that <code>with</code> statement. But if this is the only place you're doing it, it won't be any simpler. (See <a href="http://pastebin.com/5L9YhnHn" rel="nofollow noreferrer">here</a>.) If you want a general-purpose attr-swapping context, that's easy… but you'd have to pass it the namespace and the attr name as a string, like <code>with swapping_attr(sys, 'stdout', sys.stderr):</code>, which I don't think is an improvement. (MacroPy could make it nice, but I wouldn't use MacroPy just for this…)</span>
<span class="comment-copy">Also, a common trick for this specific case is to use <code>sys.__stdout__</code> instead of stashing <code>old_stdout</code>.</span>
<span class="comment-copy">@abarnert, Thank you for comment. I updated the answer to use <code>sys.__old_stdout__</code> (not used <code>sys.__stdout__</code> because in Python 3.x, there's already <a href="http://docs.python.org/3/library/sys.html#sys.__stdout__" rel="nofollow noreferrer"><code>sys.__stdout__</code></a> even though this is Python-2.x question)</span>
<span class="comment-copy">@falsetru: <code>sys.__stdout__</code> exists (and is documented) in at least 2.6+, not just 3.x. And it's always the original value of <code>sys.stdout</code> at the start of the program. It can be hacky/dangerous to use it this way if you have nested redirections (because instead of restoring the outer redirection you restore the original stdout), but for what the OP is looking for I think it's fine.</span>
<span class="comment-copy"><code>sys.stderr.write(str(prompt))</code> should be used instead to make it behave more like <a href="http://docs.python.org/2/library/functions.html#raw_input" rel="nofollow noreferrer"><code>raw_input</code></a>.</span>
<span class="comment-copy">@falsetru: Yeah, I think you're right about that. But for your edit, <a href="http://docs.python.org/2/library/__builtin__.html" rel="nofollow noreferrer"><code>__builtin__</code></a> is the right name; <code>__builtins__</code> is the CPython-specific name for the module-level object that's either <code>__builtin__</code> or <code>__builtin__.__dict__</code>. However, I'm not sure <code>__builtins__</code> is guaranteed to be there without an <code>import</code>, so I'll add that.</span>
<span class="comment-copy">@falsetru: Well, it exists on <code>__main__</code>, but try different kinds of modules (builtins like <code>sys</code>, C extension modules like <code>cPickle</code>, Java and .NET imports, normal Python modules like <code>pickle</code>, both kinds of packages).</span>
<span class="comment-copy">Since Python 3.2 module and namespace renamed to <a href="https://docs.python.org/3.3/library/builtins.html?highlight=builtins#module-builtins" rel="nofollow noreferrer"><code>builtins</code></a></span>
<span class="comment-copy">@GingerPlusPlus: Of course in 3.2+ there is no <code>raw_input</code> to replace either. :) But yeah, it's worth mentioning.</span>
