<div class="post-text" itemprop="text">
<p>Assume I have a list of two-element tuples and a list of (not tuple) literals e.g. integer:</p>
<pre><code>a = [('x', 'a'), ('y', 'b'), ('z', 'c')]
b = [1, 2 ,3]
</code></pre>
<p>And I want to make a list of three-element tuples so I coded like below:</p>
<pre><code>zipped = zip((t[0] for t in a), (t[1] for t in a), b)
assert zipped == [('x', 'a', 1), ('y', 'b', 2), ('z', 'c', 3)]
</code></pre>
<p>My current code works pretty well but I want to know that is there any more efficient and elegant recipe however my code have to iterate and unpack every tuples twice.
Can anyone please advise?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehension, tuple unpacking:</p>
<pre><code>&gt;&gt;&gt; a = [('x', 'a'), ('y', 'b'), ('z', 'c')]
&gt;&gt;&gt; b = [1, 2 ,3]
&gt;&gt;&gt; [(x,y,z) for (x,y), z in zip(a, b)]
[('x', 'a', 1), ('y', 'b', 2), ('z', 'c', 3)]
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; a = [('x', 'a'), ('y', 'b'), ('z', 'c')]
&gt;&gt;&gt; b = [1, 2 ,3]
&gt;&gt;&gt; [x + (y,) for x, y in zip(a, b)]
[('x', 'a', 1), ('y', 'b', 2), ('z', 'c', 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>one without using for loop,</p>
<pre><code>zip(*(zip(*a)+ [b]))
</code></pre>
</div>
<span class="comment-copy">No need to call <code>tuple</code>: <code>zip(*(zip(*a) + [b]))</code> also work. BTW, this will not work in Python 3.x becaue <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code> in Python 3.x</a> returns an iterator instead of list.</span>
<span class="comment-copy">yes, that's true. Edited. Thanks.</span>
<span class="comment-copy">Not using 3.x but I suppose you can convert iterator to list using list(). Probably zip(*(list(zip(*a))+ [b])) should work there.</span>
