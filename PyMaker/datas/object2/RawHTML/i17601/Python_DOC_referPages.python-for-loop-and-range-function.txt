<div class="post-text" itemprop="text">
<pre><code>def countMe(num):
    for i in range(0, num, 3):
        print (i)

countMe(18)

def oddsOut(num1, num2):

    for i in range(num1):
        for j in range(num2):
            print(i*j)

oddsOut(3, 8)
</code></pre>
<p>I don't understand how the range function works:</p>
<ul>
<li>in <code>countMe</code> shouldn't the code go up till 18 ;</li>
<li>why is the last number printed in <code>countMe</code> 15, and not 18 ;</li>
<li>why is that in the second function <code>oddsOut</code> the function only founts till 7 for j and not 8 even though j is 8 ; </li>
<li>why is the last number printed in <code>oddsOut</code> 14.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The stop parameter in a range does not include that number for example</p>
<pre><code>for i in range(0,5):
    print i
</code></pre>
<p>would print 0-4 but not 5.</p>
</div>
<div class="post-text" itemprop="text">
<p>well, from the help:</p>
<pre><code>&gt;&gt;&gt; help(range)
range(...)
    range([start,] stop[, step]) -&gt; list of integers

    Return a list containing an arithmetic progression of integers.
    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
    When step is given, it specifies the increment (or decrement).
    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
    These are exactly the valid indices for a list of 4 elements.
</code></pre>
<p>so the last increment is not <code>stop</code>, but the last step before <code>stop</code>.</p>
<blockquote>
<ul>
<li>in countMe shouldn't the code go up till 18 ;</li>
<li>why is the last number printed in countMe 15, and not 18 ;</li>
<li>why is that in the second function oddsOut the function only founts till 7 for j and not 8 even though j is 8 ;</li>
<li>why is the last number printed in oddsOut 14.</li>
</ul>
</blockquote>
<p>more generally speaking the answer to those questions is that in most of the languages, a range is defined as <code>[start:stop[</code>, i.e. the last value of the range is never included, and the indexes start always at <code>0</code>. The mess being that in a few languages and when working on algorithmics, ranges start at <code>1</code> and are inclusive with the last value.</p>
<p>In the end, if you want to include the last value you can do:</p>
<pre><code>def closed_range(start, stop, step=1):
    return range(start, stop+1, step)
</code></pre>
<p>or in your example:</p>
<pre><code>&gt;&gt;&gt; def countMe(num):
&gt;&gt;&gt;     for i in range(0, num+1, 3):
&gt;&gt;&gt;         print (i)
&gt;&gt;&gt; 
&gt;&gt;&gt; countMe(18)
0
3
6
9
12
15
18
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ranges in Python do <em>not</em> include the ending value. This is consistent with slices.</p>
<p>If you need a way to remember this, consider that <code>range(10)</code> has 10 elements - the numbers 0 through 9.</p>
</div>
<span class="comment-copy">The <code>stop</code> parameter (the second one) of range is exclusive not inclusive.</span>
<span class="comment-copy">Almost <i>all</i> ranges things in Python are "half-open", meaning that the start is inclusive and the stop is exclusiveâ€”the <code>range</code> function, slices, etc. This is explained in the tutorial chapter on <a href="http://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">Strings</a>, the first place slices are introduced, and should show up similarly early in any other tutorials/texts/etc.</span>
<span class="comment-copy">If you want it to include 18, maybe just change <code>num</code> to <code>num + 3</code></span>
<span class="comment-copy">The only thing in the stdlibs I know, where the end point is included is <code>random.randint</code>.</span>
<span class="comment-copy">@user3193087 actually, no. You need to change <code>num</code> to <code>num+1</code>.</span>
<span class="comment-copy"><code>stop-step</code>? So the last number yielded by <code>range (0, 100, 7)</code> would be <code>93</code>? (it is <code>98</code> actually)</span>
<span class="comment-copy">oops, correcting this :-) never happened! :-p</span>
