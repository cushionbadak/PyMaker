<div class="post-text" itemprop="text">
<p>I don't mean precision as in how many numbers are displayed after the decimal. I mean precision as in the decimal I am trying to use in this pictograph function keeps coming up one tenth shy of what it should be. I have tried using multiple different strategies including importing the decimal module. Here is the function I am trying to use.</p>
<pre><code>values = [('tens', 10), ('fives', 5), ('ones', 1), ('tenths', 0.1)]

def get_digits(num):
    num = int(num * 10)
    num = float(num) / 10

    output_dict = {}
    for place, value in values:
        output_dict[place] = int(num // value)
        num = num % value

    return output_dict
</code></pre>
<p>using <code>get_digits(277.9)</code>, yields <code>{'tens': 27, 'ones': 2, 'tenths': 8, 'fives': 1}</code></p>
<p>I need for it to say <code>{'tens': 27, 'ones': 2, 'tenths': 9, 'fives': 1}</code></p>
<p>Fixing it by adding 1 to the tenths after the dictionary is populated does not work, because not every decimal comes out imprecisely.</p>
<p><code>get_digits(277.6)</code> returns <code>{'fives': 1, 'tenths': 6, 'tens': 27, 'ones': 2}</code></p>
<p>I've been scouring the forums for an answer, but nothing quite gets it. Any assistance would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I tried to explain in comments, the problem is that you're using floating point numbers.</p>
<p>For more information on floating point, see <a href="http://en.wikipedia.org/wiki/Floating_point" rel="noreferrer">1</a>, <a href="http://docs.python.org/3/tutorial/floatingpoint.html" rel="noreferrer">2</a>.</p>
<p>The issue is that <code>277.9</code> is not <em>actually</em> stored as <code>277.9</code>, but rather something "very close":</p>
<pre><code>print('%.40f' % a)
277.8999999999999772626324556767940521240234
</code></pre>
<p>The solution isn't to use some arbitrary heuristic to tell whether the math is slightly off and try to correct for it.  We <strong><em>know</em></strong> the math is slightly off -- that's the gift and curse given to us by floating point.</p>
<p>The real solution is to use fixed point math, for example, with Python's <a href="http://docs.python.org/2/library/decimal.html" rel="noreferrer"><code>decimal</code></a> module.</p>
<hr/>
<p><em><strong>Edit</strong></em></p></div>
<span class="comment-copy">This is simply a result of using floating point numbers and the computer's inability to <i>perfectly</i> store them.  See <a href="http://en.wikipedia.org/wiki/Floating_point" rel="nofollow noreferrer">1</a>, <a href="http://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">2</a>.  If you want accuracy, use fixed point integer types.</span>
<span class="comment-copy">So, am I just dreaming in terms of being able to do what I am trying to do?</span>
<span class="comment-copy">If imprecise floats are indeed the problem, then using decimal.Decimal() should help, as they store base 10 numbers precisely.  You could also try fractions.Fraction().</span>
<span class="comment-copy">No, computers are used all the time when accuracy is important (financial, scientific, etc).  The key is just to avoid using float, and either handle it yourself (usually by multiplying any would-be decimal by a consistent power of 10 that results in a whole number) or use a library (e.g. Python's <a href="http://docs.python.org/2/library/decimal.html" rel="nofollow noreferrer"><b>decimal</b></a> library)</span>
<span class="comment-copy">Fixed point math can still have precision errors - if anything, it's more prone to errors than floating point.  Python's decimal module is good at storing base 10 numbers, because decimal's implementation is also base 10.</span>
<span class="comment-copy">I agree that fixed point can have precision errors, but unlike floating point representation, fixed point representation allows the user to specify the precision.  Moreover, this question appears especially suited for fixed point representation, since it deals in base 10 modular arithmetic.  These numbers can never be stored exactly in floating point representation but will always be stored exactly in fixed point (provided there's sufficient precision).</span>
<span class="comment-copy">Thank you. Both explanations helped me understand more.</span>
