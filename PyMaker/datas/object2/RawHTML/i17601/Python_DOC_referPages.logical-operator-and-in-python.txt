<div class="post-text" itemprop="text">
<p>Why is the self.year twice? I am having trouble to find out the logic of the line. Can some one help me with this?</p>
<pre><code>return (self.year and self.year == date.year or True)
</code></pre>
<p>I am going through <a href="http://www.openp2p.com/pub/a/python/2004/12/02/tdd_pyunit.html" rel="nofollow">http://www.openp2p.com/pub/a/python/2004/12/02/tdd_pyunit.html</a> and encountered the line ... And of course I have no problem understanding and, or, nor, xor, xnor, or any boolean expression. But I am confused by the way it has been used here..</p>
<p>:-)</p>
</div>
<div class="post-text" itemprop="text">
<p>The order of evaluation matters (see <a href="http://docs.python.org/3.3/reference/expressions.html#operator-precedence" rel="nofollow">here</a>).  The code:</p>
<pre><code>return self.year and self.year == date.year
</code></pre>
<p>could be rewritten:</p>
<pre><code>return self.year and (self.year == date.year)
</code></pre>
<p>Or, in full:</p>
<pre><code>if self.year:
    if self.year == date.year:
        return True
    else:
        return False
return False # Actually return self.year, but usually a boolean is intended in this sort of situation
</code></pre>
<p>However, the expression you posted will always evaluate to <code>True</code> because of the <code>or True</code> at the end.  Using parenthesis to show evaluation order:</p>
<pre><code>return (self.year and (self.year == date.year)) or True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>return (self.year and self.year == date.year or True)
</code></pre>
<p>In this case, first there is an existence check on <code>self.year</code> which will return (i assume) <code>None</code> (in python==False) if it does not exist. after that it is compared to <code>date.year</code></p>
<p>I think it is a bit redundant, because the comparison would return false anyway if self.year did not exist.</p>
<p>As commented by Bereal on your question, the last <code>or True</code> is weird indeed, cause that seems to cause the total expression to always return <code>True</code></p>
<p>general Note: In python boolean expressions are always evaluated 'in order of appearence'. </p>
</div>
<div class="post-text" itemprop="text">
<p>This line will always return true because you are doing an <code>or</code> with a true value.</p>
<p>Apart from that, first it checks if <code>self.year</code> is not <code>None</code> or <code>False</code>, than checks if <code>self.year</code> is equal to <code>date.year</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>return (self.year and self.year == date.year or True)
</code></pre>
<p>yes, it is required to include self.year twice. Because it will check that there is something self.year defined and if it's not defined it will give an error that there is no thing like "self.year" i.e. it's undefined. As it approves that self.year is something which is defined than it will check for it's value.</p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/release/2.5.2/lib/boolean.html" rel="nofollow noreferrer">Boolean operations</a></span>
<span class="comment-copy">I know they are but I want to know the logic of having self.year twice. @devnull</span>
<span class="comment-copy">@devnull Python 2.5 is quite old has not been actively developed for some years.  Here's the link to more recent (Py3) docs: <a href="http://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Actually I am not having trouble with and &amp; or. Have dealt with them for long time in Digital Logic. I want to know what the logic is?</span>
<span class="comment-copy">This is a bit weird, the expression seems to always return <code>True</code>.</span>
<span class="comment-copy">Thank you.. I got it now.. And of course the meaning of and , or hasn't change ever.. Right? :-)</span>
<span class="comment-copy">in order of appearence or there is any precedence ??</span>
<span class="comment-copy"><code>A and B and C</code> is equivalent to <code>(A and B) and C</code>.  'A==1 or 2' is not <code>A==(1 or 2)</code> but <code>(A==1) or 2</code>  efectively: always true unless <code>A==0</code></span>
