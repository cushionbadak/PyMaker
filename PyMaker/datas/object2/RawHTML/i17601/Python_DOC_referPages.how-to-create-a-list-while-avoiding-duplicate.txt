<div class="post-text" itemprop="text">
<p>I'm wondering what is the best way to create a list while avoiding the duplicate.</p>
<p>I have some data in mysql which fields contain product types.</p>
<p>For example:</p>
<pre><code>id ------- category

1 --------   food, drink, vege

2 --------   food, drink

3 --------   vege, baby goods

4 --------   fish
</code></pre>
<p>Output which im aiming is:</p>
<pre><code>['food','drink','vege','baby goods','fish']
</code></pre>
<p>(please note order does NOT matter for me)</p>
<p>Data set have over 40,000 records so checking it manually is certainly not an option...</p>
<p>I would appreciate if you could drop me a note or suggestion to achieve this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python sets don't allow duplicates. So, you can construct a set of unique categories, using set comprehension, like this</p>
<pre><code>unique_categories = {item.strip() for row in cur for item in row[1].split(",")}
</code></pre>
<p>For example,</p>
<pre><code>a = "food, drink, vege"
print {item.strip() for item in a.split(",")}
</code></pre>
<p><strong>Output</strong></p>
<pre><code>set(['food', 'drink', 'vege'])
</code></pre>
<p>You can iterate a set, like a list. But, if you want to convert it to a list later on, you can use <code>list</code> function like this</p>
<pre><code>unique_categories = list(unique_categories)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just change the datatype to set it will work </p>
<p>example </p>
<pre><code>x = ['food','drink','vege','baby goods','food']
</code></pre>
<p>if you want the following output</p>
<pre><code>x = ['food','drink','vege','baby goods']
</code></pre>
<p>just do it </p>
<pre><code>x = set(x)
</code></pre>
<p>Its done</p>
<p>In set there is no duplicate members.</p>
</div>
<span class="comment-copy">You say you want to create a string, but the output you gave is a list. Do you want a string or a list?</span>
<span class="comment-copy">My bad. Im trying to make a list.  I've fixed the original content. thanks!</span>
<span class="comment-copy">"Avoiding duplicates… order does not matter for me" is basically saying that you want a <code>set</code> instead of a <code>list</code>. Of course there's no way you'd know that if you didn't already know the basic collection types that come with Python. But you may want to skim over <a href="http://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Data Structures</a> in the tutorial to get an idea.</span>
<span class="comment-copy">In the future, it would be better to actually show a complete example—the SQL statement, how you retrieve the results, and what each row that you retrieve looks like in Python. That way, you don't need someone like thefourtheye to keep trying to guess until he gets it right. (Do you really want to count on everyone being as dedicated/clever/psychic as him?)</span>
<span class="comment-copy">thanks for your advise adarnert, I certainly appreciate it.</span>
<span class="comment-copy">Hi thanks for that, I've tried the code: unique_categories = {item for row in cursor.fetchall() for item in row[0]}  and it gave me an output like so,  set([' ', "'", ',', 'C', 'B', 'E', 'D', 'G', 'F', 'I', 'K', 'J', 'M', 'L', 'O', 'N', 'P', 'S', 'R', 'T', 'W', 'V', 'Y', 'a', 'c', 'b', 'e', 'd', 'g', 'f', 'i', 'h', 'k', 'm', 'l', 'o', 'n', 'q', 'p', 's', 'r', 'u', 't', 'w', 'v', 'y', 'z'])  Its really close but Im seeking the way to do it in "word block". if you know what I mean..</span>
<span class="comment-copy">What do you get when you do <code>print [row[1] for row in cur.fetchall()]</code>?</span>
<span class="comment-copy">@user3074823: That's because <code>row[0]</code> is a string, which is just a sequence of one-letter strings. In thefourtheye's answer, he's using <code>row[1].split(",")</code>, which will is a <i>list</i> of strings. The <code>split</code> is the key there. If you just want each <code>row[0]</code> itself, just do <code>{row[0] for row in cursor.fetchall()}</code>.</span>
<span class="comment-copy">@thefourtheye: As a side note, you usually don't need or want <code>for row in cur.fetchall()</code>. <code>for row in cursor</code> will do the same thing with client-side cursors, and possibly something lazier and more efficient with server-side cursors. (Occasionally you have server-side cursors and need to force everything over to the client immediately, in which case <code>fetchall</code> is necessary. And a few database libraries' <code>Cursor</code> types don't work as iterators, but I'm pretty sure none of the three major mysql ones have that problem.)</span>
<span class="comment-copy">@user3074823: If the answer solves your problem, you should <a href="http://stackoverflow.com/help/someone-answers">accept it</a>. It gives thefourtheye credit for all his work, gives you credit as a good questioner, and may make the question and answer more likely to show up in searches for similar problems.</span>
