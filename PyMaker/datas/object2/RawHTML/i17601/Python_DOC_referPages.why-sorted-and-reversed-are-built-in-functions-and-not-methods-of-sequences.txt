<div class="post-text" itemprop="text">
<p>I'm digging into Python 3.3 now and I wonder why some functions (for example, <code>sorted()</code>, <code>reversed()</code>) for managing collections/iterable are built-in but some are implemented as methods of collection objects? I can append item to list using method <code>append()</code>, but to get a length of it I should using built-in function <code>len()</code>. It seems inconsistent to me, but I think I just missing some point in new language.</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is that these decisions were made for human reasons rather than technical reasons.</p>
<p>The reasoning for <code>len()</code> versus <code>obj.length()</code> is <a href="http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm">explained by Guido van Rossum</a> (Python's Benevolent Dictator For Life):</p>
<blockquote>
<p>First of all, I chose len(x) over x.len() for HCI reasons (def <code>__len__()</code> came much later). There are two intertwined reasons actually, both HCI:</p>
<p>(a) For some operations, prefix notation just reads better than postfix — prefix (and infix!) operations have a long tradition in mathematics which likes notations where the visuals help the mathematician thinking about a problem. Compare the easy with which we rewrite a formula like x*(a+b) into x*a + x*b to the clumsiness of doing the same thing using a raw OO notation.</p>
<p>(b) When I read code that says len(x) I know that it is asking for the length of something. This tells me two things: the result is an integer, and the argument is some kind of container. To the contrary, when I read x.len(), I have to already know that x is some kind of container implementing an interface or inheriting from a class that has a standard len(). Witness the confusion we occasionally have when a class that is not implementing a mapping has a get() or keys() method, or something that isn’t a file has a write() method.</p>
</blockquote>
<p>He also explains why <code>sorted()</code> and <code>reversed()</code> aren't methods:</p>
<blockquote>
<p>Also note that many functions are defined in terms of informal interfaces; for example, reversed works on anything that supports random access to items and has a known length. In practice, implementing things like max, sum, map, any, in and others, as built-in functions and operators is actually less code than implementing them as methods for each and every type that needs to support them.</p>
</blockquote>
</div>
<span class="comment-copy"><code>sorted</code> takes any iterable as its first parameter.   Contrast with <code>sort</code> which is a list method.</span>
<span class="comment-copy">I should read FAQ first: <a href="https://docs.python.org/3/faq/design.html#why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list" rel="nofollow noreferrer">docs.python.org/3/faq/…</a> :)</span>
<span class="comment-copy">The last paragraph about <code>sorted()</code> and <code>reversed()</code> is a good point, but why they don't using something like mixins or even abstract methods for this?</span>
<span class="comment-copy">Just to clarify: I'm coming from C# where collections classes and interfacese are not built into language itself.</span>
<span class="comment-copy">@artvolk: it's a language design decision. Mixins and abstract methods work well in C# and Java but Python relies more on duck typing. If you want a new collection to behave in a certain way, you just add some methods and instances can then be used by various built-in functions.</span>
<span class="comment-copy">At least, that was the case when these design decisions were made. Now that we have ABCs, <code>reverse()</code> and <code>__reversed__()</code> in fact are mixin methods of <code>MutableSequence</code> and <code>Sequence</code>. <code>sorted</code> still has no point of customization. Maybe because if the <code>key</code> parameter is set there's basically nothing that a container can contribute to the process.</span>
