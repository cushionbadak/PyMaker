<div class="post-text" itemprop="text">
<p>Let's say I have a python test using argparse, with several arguments:</p>
<ul>
<li>IP (default: 127.0.0.1)</li>
<li>enabled_features (default: [A, B, C])</li>
</ul>
<p>Sometimes, I'd like to change the default enabled_features, let's say to [A,B,C,D]:</p>
<ul>
<li>depending on something I need the IP to find out (so it can't really be a default value in the way argparse has default values)</li>
<li>only if the user hasn't specified the "enabled_features"... that's what I have trouble to know!</li>
</ul>
<p>So is there an attribute in the argparse classes to know, after:</p>
<pre><code>opts = parser.parse_args()
</code></pre>
<p>...that an argument was actually specified by the user, i.e. that one has used something like:</p>
<pre><code>$ python my_test.py --enabled_features A B C
</code></pre>
<p>and not:</p>
<pre><code>$ python my_test.py
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>opts</code> contains all the information that <code>argparse</code> can give you.  So you have to either test for some default value (most commonly <code>None</code>), or the absence of the attribute (if <code>default=argparse.SUPPRESS</code>).</p>
<p>Another approach is to specify a reasonable <code>default</code>, and not worry whether the user specified those, or other values, in the input.  Which is more important, that the user specified the values, or the values themselves?</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like...</p>
<pre><code>myopts = vars(opts)
if opts['enabled_features'] is None:
    #Set the default parameters as you please.
</code></pre>
<p>Would allow you to see if they specified the opt in the command line (assuming you've added the argument to the parser).</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.get_default" rel="nofollow noreferrer">parser object itself</a> saves some useful information we can use to check out the defaults we assigned when adding the argument.</p>
<p>Example script <code>parser_ex.py</code>:</p>
<pre><code>import argparse

def specified_nondefault(opts, parser, arg):
  """
  Checks whether an argument was specified to be something other than the 
  default value.

  ..Note: This doesn't actually check if the argument was specified, as it
          can be 'tricked' by the user specifying the default value.

  :param argparse.Namespace opts: Parsed arguments to check.
  :param argparse.Parser parser: The parser they were parsed with.
  :param str arg: The name of the argument in question.
  :return bool: Whether the current argument value differs from the default.
  """

  if getattr(opts, arg) == parser.get_default(arg):
    return False
  return True

parser = argparse.ArgumentParser()

parser.add_argument('enabled_features', nargs='*', default=['A', 'B', 'C', 'D'])

opts = parser.parse_args()

print specified_nondefault(opts, parser, 'enabled_features')
</code></pre>
<p>In which case:</p>
<p><code>&gt;&gt; parser_ex.py 'B'
  True</code></p>
<p>Because we've done something non-default. While</p>
<p><code>&gt;&gt; parser_ex.py 'A' 'B' 'C' 'D'
  False</code></p>
<p>and </p>
<p><code>&gt;&gt; parser_ex.py
  False</code></p>
<p>Since this just has default input.</p>
<p>Note that because we're checking against an entire list, there's some somewhat undesirable behaviour that order matters and </p>
<p><code>&gt;&gt; parser_ex.py 'B' 'A' 'C'
  True</code></p>
<p>IMO, this is a problem with lumping all the features into a single argument, but you can certainly work around it one way or another if you care.</p>
<p>Then, if the user has/n't specified non-defualt <code>enabled_features</code>, you can change them based on <code>IP</code> as desired.</p>
</div>
<span class="comment-copy">I admit changing the default value implicitely is generally a bad idea, and setting the default to None makes it more explicit.  However, in many cases, the idea of changing the default value after parsing was, if not the best, the most obvious thing to do...</span>
<span class="comment-copy">Note that all the values will not necessarily have a default of None by default if you are using actions like store_true.</span>
<span class="comment-copy">The <code>store_true</code> default is <code>False</code> which is equally reasonable.  Ambiguity only  arises if the commandline can provide a value that tests the same as the default.</span>
<span class="comment-copy">Kudos for mentioning <code>argparse.SUPPRESS</code>.</span>
<span class="comment-copy">"<code>opts</code> contains all the information that <code>argparse</code> can give you". This is, very specifically, not true. It's also an un-pythonic sentiment. In python we're all consenting adults, and if you try hard enough you can dig up almost any information you want.</span>
<span class="comment-copy">Sorry, it doesn't seem to work, wherever I put it, as in our case <code>opts['enabled_features']</code> contains the default value, and not <code>None</code> if it wasn't specified by the user...</span>
<span class="comment-copy">I think he meant to say NOT setting default values in <code>add_argument('enabled_features')</code>, then you can check for it being <code>None</code> and do complicated logic depending on other arguments.</span>
<span class="comment-copy">You are testing the <code>opts</code> value against the known <code>default</code>.  You haven't found any hidden  information  that was created during <code>by </code>parse_args()`.  That method doesn't change the state of the parser.</span>
<span class="comment-copy">I edited the preface to be less provocative.</span>
<span class="comment-copy">Yes, that is exactly what I'm doing. My goal was to show where to find the default value that was created when the argument was added (rather than having to assume explicitly that it is None, as in CB's answer.) I never claimed that the information is hidden, just showed where it is stored and linked the relevant docs. I also didn't claim to change the state of the parser itself, and I'm not clear why I would want to.</span>
<span class="comment-copy">Aha, I see where I was claiming to alter the state of the parser. The code all stays the same, but the description has been appropriately changed.</span>
