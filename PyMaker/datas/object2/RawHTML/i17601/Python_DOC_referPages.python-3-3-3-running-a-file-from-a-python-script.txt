<div class="post-text" itemprop="text">
<p>I wanted to make a self-replicating program that will make a new Python file, write code to it and run it. Here's how I want the code to be:</p>
<pre><code>import os

num = 0

fileName = 'wrm' + str(num)
fileType = '.txt'

finalName = fileName + fileType
pyName = fileName + '.py'

f = open(finalName, 'w')
f.write("Whatever code I want to write")
f.close()
os.rename(finalName, pyName)

num = num + 1

# Here I need a command that runs the file, giving num as an 'argument'.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module gives you ways to run any program.</p>
<p>Your script isn't a program, it's a script, which needs to be executed by an interpreter program. In this case, you probably want it executed by the exact same interpreter program that you're currently running, which is available as <a href="http://docs.python.org/3/library/sys.html#sys.executable" rel="nofollow"><code>sys.executable</code></a>.</p>
<p>When you run <code>python</code>, it treats its first argument as the script to be run (which becomes <a href="http://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow"><code>sys.argv[0]</code></a> in that script), and any additional arguments as arguments to that script (which become <code>sys.argv[1:]</code>).</p>
<p>Command-line arguments have to be strings, so you will have to serialize any arguments you want to pass to strings, then deserialize them on the other end. For an integer, this is trivial, but for more complex types it may not be.</p>
<p>So, it will be something like this:</p>
<pre><code>output = subprocess.check_output([sys.executable, pyName, str(num)])
</code></pre>
<p>Obviously if you don't want to capture its stdout, or want to capture its stderr as well, or want to treat non-zero retcodes as something other than an exception, or want to run it in the background instead of waiting for it, etc., the exact <code>subprocess</code> function call will be different. But if you read those docs, there are nice examples of anything you might want to do.</p>
<p>And then, the script you generate will do something like this:</p>
<pre><code>import sys

num = int(sys.argv[1])
# whatever you wanted to do with num
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although comparatively less effecient and cleaner than subprocess, you can use os.system, this will replicate the shell for executing the tasks, :</p>
<pre><code>os.system("python filename" + num.py) or os.system("python filename%s.py" % num)
</code></pre>
<p>Or if its in another directory, you can navigate by,</p>
<pre><code>os.system("cd /filepath &amp;&amp; python filename" + num.py)
</code></pre>
</div>
<span class="comment-copy">You might want to start with <a href="http://docs.python.org/3.4/library/subprocess.html" rel="nofollow noreferrer">subprocess</a></span>
<span class="comment-copy">@thefourtheye do you have anything simpler? I'm not really very advanced.... I'm not quite being able to understand.</span>
<span class="comment-copy">There are probably better ways to do what you want. Instead of generating source code, why not just define a function and call it? If you want it to be in a separate process, <code>multiprocessing</code> can do exactly that. Even if it has to be source code for some reason, <code>compile</code> or <code>exec</code> might be better than creating and running a file. Even if it has to be a file, creating a module and <code>import</code>ing it to run code out of might be better. If you really need to do this, it's doable (as my answer shows), but it's probably not the right answer for your actual problem.</span>
<span class="comment-copy">For a really cool example of the kind of stuff you can do to generate runnable code on the fly instead of source code, play around with <a href="https://github.com/lihaoyi/macropy" rel="nofollow noreferrer">MacroPy</a>. Its implementation is probably a little too advanced for you, but as an example of what's possible, it's mind-boggling.</span>
