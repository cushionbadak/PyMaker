<div class="post-text" itemprop="text">
<p>In my code I am writing dict-objects on every <code>LogRecord</code>. One of the keys are called <code>my_msg</code> and I want to create a <code>StreamHandler</code> that just prints out the time and the value of the <code>my_msg</code> key.
I have tried the following but I get an error message: <code>AttributeError: type object 'LogRecord' has no attribute 'levelname'</code></p>
<pre><code>streamformatter = logging.Formatter(fmt='{}:\t{}'.format(logging.LogRecord.levelname, logging.LogRecord.message.get('my_msg'), datefmt='%H:%M:%S', style='{')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to pass <em>just the template</em> to the <code>Formatter()</code> class. The template will then be used <em>later on</em> to format your message. You also need to use named slots:</p>
<pre><code>streamformatter = logging.Formatter(fmt='{levelname}:\t{my_msg}', datefmt='%H:%M:%S', style='{')
</code></pre>
<p>You don't call <code>.format()</code> on it when creating the <code>Formatter()</code> object; at that moment there is no log message yet and no level to be filled in.</p>
<p>See the <a href="http://docs.python.org/3/library/logging.html#logrecord-attributes" rel="nofollow">logrecord attributes section</a> for what names are available by default; any <code>%</code>-style formatting in the second column of the table should be translated to new-style formats instead:</p>
<ul>
<li><code>%(asctime)s</code> becomes <code>{asctime}</code> or <code>{asctime!s}</code></li>
<li><code>%(created)f</code> becomes <code>{created:f}</code></li>
<li><code>%(lineno)d</code> becomes <code>{lineno:d}</code>.</li>
</ul>
<p>etc.</p>
</div>
<span class="comment-copy">Thanks for the heads up. It is happening to me often in these noob days that I am calling stuff before it is needed.. The question was two-fold though. Second part of the question was on how I could access  the value of a key inside the dictionary which each of logrecords is an instance of?</span>
<span class="comment-copy">You need to be more explicit there; are you creating custom <code>LogRecord</code> instances with extra attributes? If so, use the syntax above (<code>my_msg</code> is such an attribute). Are you passing in arguments to a <code>.log()</code> or <code>.info()</code> or related call? Then those are interpolated into the first argument of the call and all you need to do in the <code>LogRecord</code> format is include <code>msg</code>.</span>
