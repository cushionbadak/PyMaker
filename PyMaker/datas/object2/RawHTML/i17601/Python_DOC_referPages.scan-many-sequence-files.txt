<div class="post-text" itemprop="text">
<p>The file structure looks like this:</p>
<pre><code>folder1
    |-----name0000.jpg
    |-----name0000.tif
    |-----name0001.jpg
    |-----name0001.tif
    |-----....   
    |-----....
    |-----name2000.jpg
    |-----name2000.tif
    |-----name2004.tif
    |-----....
    |-----name2845.tif
    |-----other_file.txt
    |-----folder2
                 |-----name0000.jpg
                 |-----name0000.tif
                 |-----name0001.jpg
                 |-----name0001.tif
                 |-----....   
                 |-----....
                 |-----name2000.jpg
                 |-----name2000.tif
                 |-----other_file2.sh
</code></pre>
<p>How can I make them into groups like this?</p>
<pre><code>  ./folder1: name0000-2000.jpg, 340MB
  ./folder1: name0000-2000.tif, 1GB
  ./folder1: name2004-2845.tif, 500MB
  ./folder1: other_file.txt, 1k
  ./folder1/folder2: name0000-2000.jpg, 340MB
  ./folder1/folder2: name0000-2000.tif, 1GB
  ./folder1/folder2: other_file2.sh, 45byte
</code></pre>
<p>The total files could be tens of thousands, I want the speed . There are not only jpg and tif files, could be other formats.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/os.html#os.walk" rel="nofollow"><code>os.walk</code></a> to walk the tree. Since that doesn't give you the file sizes, you will need to call <a href="http://docs.python.org/3/library/os.html#os.stat" rel="nofollow"><code>os.stat</code></a> on each one.</p>
<p>Next, apparently you want to group by extension first, then by base filename (where two filenames go together if the only difference between them is that some numerical part is off by 1), but sort the groups by filename. Generally, the easiest way to group things is to sort them, then group by adjacency via the <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> function, and you can always sort them back afterward.</p>
<p>I'm not sure what your actual grouping key is supposed to be, because I can't think of anything sensible that would separate 2004 from 0001-2000, but not separate it from 2501. Likewise, I'm not sure what the rule is that would give you 2004-2845 despite the gaps. So I'll leave those parts to you.</p>
<p>So:</p>
<pre><code>def keyfunc(value):
    base, ext, size = value
    # FILL THIS IN

def format_group(bases):
    # FILL THIS IN

def format_size(size):
    # you can use inspectorG4dget's code here

for root, dirs, names in os.walk(path):
    sizes = (os.stat(name).st_size for name in names)
    bases, exts = zip(*map(os.path.splitext, names))
    files = zip(bases, exts, sizes)
    # now sort by ext, and then by base within each ext
    files = sorted(files, key=operator.itemgetter(1, 0))
    results = []
    for key, group in itertools.groupby(files, key=keyfunc):
        bases, exts, sizes = zip(*list(group))
        results.append((format_group(bases), sum(size))
    for base, size in sorted(results):
        print('{}: {}, {}'.format(root, base, format_size(size)))
</code></pre>
<hr/>
<p>In some cases, there is no obvious grouping key function, but there is an obvious way to tell whether two adjacent values count as being part of the same group. If so, write that as an old-style <code>cmp</code> function, like this:</p>
<pre><code>def keycmp(x, y):
    if x should be in the same group as y:
        return 0
    return -1
</code></pre>
<p>Then you can use the same <a href="http://docs.python.org/3/howto/sorting.html#the-old-way-using-the-cmp-parameter" rel="nofollow"><code>functools.cmp_to_key</code></a> function described in the Sorting HOWTO:</p>
<pre><code>for key, group in itertools.groupby(files, key=cmp_to_key(keycap)):
</code></pre>
<hr/>
<p>However you do this, it will probably turn out that the slowest part by far is calling <code>stat</code> on every file. And that's a shame, because <code>os.walk</code> may already <em>have</em> that stat information, but it never gives it to you.</p>
<p>To optimize this, you can go directly to native APIs that give you the information as efficiently as possible. Most modern *nix platforms (including OS X and non-ancient linux) have <a href="http://man7.org/linux/man-pages/man3/fts.3.html" rel="nofollow"><code>fts</code></a>, which is like a souped-up <code>os.walk</code> implemented in C, which can optionally stat all the files for you. Older *nixes should at least have <code>nftw</code> or <code>ftw</code>. Windows has <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa364418%28v=vs.85%29.aspx" rel="nofollow"><code>FindFirstFile</code></a>, which is more like a souped-up <code>os.listdir</code>—it gives you all kinds of info on each file, including sizes, very fast, but it doesn't recurse into subdirectories, so you have to do that manually.</p>
<hr/>
<p>If your comparison is supposed to make <code>key0000.jpg</code> and <code>key0001.jpg</code> the same, but not <code>key0000.jpg</code> and <code>key0002.jpg</code> or <code>key0000.jpg</code> and <code>key0001.tif</code>, obviously we need to break each name down into pieces. And the middle one needs to be converted to a number, so that <code>0009</code> and 0010` will be adjacent (because they obviously aren't as strings). I think what you want is this:*</p>
<pre><code>pattern = re.compile('(.*?)(\d+)(.*)')
def splitname(name):
    prefix, number, suffix = pattern.match(name).groups()
    return prefix, int(number, 10), suffix
</code></pre>
<p>So, for example, <code>key0000.jpg</code> will break down into <code>'key'</code>, <code>0000</code>, and <code>'.jpg'</code>. Play with this function and make sure it's doing what you actually want.</p>
<p>Next, how do we use this for a comparison function? Well, it's <em>almost</em> a normal lexicographical comparison, except that in the middle bit, if the left one is one less than the right it counts as equal. So:</p>
<pre><code>def keycmp(a, b):
    abits, bbits = splitname(a), splitname(b)
    if abits[0] &lt; bbits[0]: return -1
    elif abits[0] &gt; bbits[0]: return 1
    if abits[1]+1 &lt; bbits[1]: return -1
    elif abits[1] &gt; bbits[1]: return 1
    if abits[2] &lt; bbits[2]: return -1
    elif abits[2] &gt; bbits[2]: return 1
    else: return 0
keyfunc = functools.cmp_to_key(keycmp)
</code></pre>
<p>(We don't actually need the full -1/0/1 return from an old-style <code>cmp</code> function, just nonzero/0/nonzero… but it's just as easy, and probably more readable, to do it.)</p>
<p>Again, call <code>keycmp</code> on various pairs of filenames to make sure they're doing what you want.</p>
<p>And you will probably want some error handling in here. As it standard, <code>re.match</code> fails to match because you gave it, say, <code>'files.txt'</code>, you'll get an <code>AttributeError: 'NoneType' has no attribute 'groups'</code>. But you should be able to figure that out.</p>
<p>One last thing: I can't remember if <code>groupby</code> checks each new value against the <em>last</em> value in the group, or the <em>first</em>. If it's the latter, this <code>keyfunc</code> won't work. You could try to write a stateful comparator instead, but there's a much easier solution: <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>groupby</code></a> gives you the equivalent Python source code, and it's not that complicated, so you can just copy it and paste it into your code and change it to remember the most recent value in the group.</p>
<p>Finally, if this whole deal with iterators and groupby and so forth all sounds like Greek to you, don't try to just bang on the code until it works. <a href="http://www.dabeaz.com/generators-uk/" rel="nofollow">Generator Tricks for System Programmers</a> will teach you Greek, and all kinds of problems like this one will be easier for you for the rest of your life. (Well, until you're forced to write in another language that doesn't have generators…)</p>
<hr/>
<p>* I'm <em>pretty</em> sure you don't need <code>int(number, 10)</code>, because Python 2.7 and 3.x will not interpret <code>int('0123')</code> as octal… but since I have to look it up to be sure, making it explicit seems like a good idea for readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>The majority of the work is getting your file sizes into a human readable format. See if this works out for you</p>
<pre><code>import os

def sizify(fpath):
    bytes = os.stat(fpath).st_size
    suff = 0
    while b//1000:
        b = b//1000
        suff += 1
    return str(b) + ["B", "MB", "GB" "TB"][suff]

def humanReadable(bytes):
    suff = 0
    while b//1000:
        b = b//1000
        suff += 1
    return str(b) + ["B", "MB", "GB" "TB"][suff]    

def getRuns(fnames):
    fnames.sort()
    answer = []
    start = fnames[0]
    for mid,high in zip(fnames, fnames[1:]):
        mid = int(mid.rsplit('.')[0].lstrip('name'))
        high = int(high.rsplit('.')[0].lstrip('name'))
        if high-mid &gt; 1:
            answer.append((start, mid, 
                          sum(os.stat("name%s.jpg" %i).st_size for i in range(start, mid+1)) +
                          sum(os.stat("name%s.tiff" %i).st_size for i in range(start, mid+1))))
            start = high
    answer.append((start, mid, 
                          sum(os.stat("name%s.jpg" %i).st_size for i in range(start, mid+1)) +
                          sum(os.stat("name%s.tiff" %i).st_size for i in range(start, mid+1))))
    return answer

def main():
    for dir, dirs, files in os.walk('folder1'):
        runs = getRuns(files)
        for low,high,size in runs:
            print("%s: name%s-%s, %s" %(dir, low, high, humanReadable(size)))
</code></pre>
<p>Note that this treats 1KB = 1000B and not 1KB = 1024B<br/>
So depending on the system you're on, you might want to consider changing that.</p>
</div>
<div class="post-text" itemprop="text">
<p>@abarnert: The following code it derived from your blog: Grouping into runs of adjacent values(links: <a href="http://stupidpythonideas.blogspot.com/2014/01/grouping-into-runs-of-adjacent-values.html" rel="nofollow">http://stupidpythonideas.blogspot.com/2014/01/grouping-into-runs-of-adjacent-values.html</a>)</p>
<p>I try python2.6.6 in Win7 and python2.6.6 in CentOS 6.5, the problem is same. Because there is no itertools.cmp_to_key() in this python 2.6, I revized your code a little bit, hopefully, the problem does not come from my revise.</p>
<pre><code>def adjacent_cmp(x, y):
    if x+1 &lt; y: return -1
    elif x &gt; y: return 1
    else: return 0

def cmp_to_key(mycmp):
    'Convert a cmp= function into a key= function'
    class K:
        def __init__(self, obj, *args):
            self.obj = obj
        def __lt__(self, other):
            return mycmp(self.obj, other.obj) &lt; 0
        def __gt__(self, other):
            return mycmp(self.obj, other.obj) &gt; 0
        def __eq__(self, other):
            return mycmp(self.obj, other.obj) == 0
        def __le__(self, other):
            return mycmp(self.obj, other.obj) &lt;= 0
        def __ge__(self, other):
            return mycmp(self.obj, other.obj) &gt;= 0
        def __ne__(self, other):
            return mycmp(self.obj, other.obj) != 0
    return K

class groupby:
    # [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B
    # [list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D
    def __init__(self, iterable, key=None):
        if key is None:
            key = lambda x: x
        self.keyfunc = key
        self.it = iter(iterable)
        self.sentinel = self.tgtkey = self.currkey = self.currvalue = object()
    def __iter__(self):
        return self
    def next(self):
        while (self.currkey is self.sentinel
               or self.tgtkey is not self.sentinel
               and self.tgtkey == self.currkey):
            self.currvalue = next(self.it)    # Exit on StopIteration
            self.currkey = self.keyfunc(self.currvalue)
        self.tgtkey = self.currkey
        return (self.currkey, self._grouper(self.tgtkey))
    def _grouper(self, tgtkey):
        while tgtkey is self.sentinel or tgtkey == self.currkey:
            yield self.currvalue
            self.currvalue = next(self.it)    # Exit on StopIteration
            tgtkey, self.currkey = self.currkey, self.keyfunc(self.currvalue)

adjacent_key = cmp_to_key(adjacent_cmp)
a = [0, 1, 2]
print [list(g) for k, g in groupby(a, adjacent_key)]

[[0, 1, 2], [2]]
</code></pre>
</div>
<span class="comment-copy">It is unclear to me what you are asking. Please give more details.</span>
<span class="comment-copy">Hi, abarnert: I am really appreciate for your reply, it is very helpful, and the gap is actually a typo of my post, sorry for that, I correct it. Your code, although I do not totally understand how it works, because I am a new learner of python, I need some time to dig into your reply, which I learn a lot. Thank you very much.</span>
<span class="comment-copy">abarnert, would you mind help me finish the keycmp(), I want group them by their continuance or adjacency, I have no clue on how to judge two strings are adjacent by the numbers in the string.  should I separate the numbers out of the strings, and compare them? Is there a better way? Thanks again for the help.</span>
<span class="comment-copy">@liaozd: Yes, you probably want to separate the numbers out of the string. There are pre-made "natural comparison" libraries, but to tack on the "… and off by 1 is the same as equal" but to those libraries is probably just as hard as writing your own comparison (since you don't have to be fully general like they do). See my edited answer.</span>
<span class="comment-copy">@liaozd: I was working on a similar problem, and I decided to write it up as <a href="http://stupidpythonideas.blogspot.com/2014/01/grouping-into-runs-of-adjacent-values.html" rel="nofollow noreferrer">Grouping into runs of adjacent values</a>. It doesn't have a complete solution to your problem, but it <i>does</i> show how to write the hard part (using <code>groupby</code> to group adjacent runs), which turned out to be harder than I expected. Since people have had problems copying and pasting from my crappy blog, the useful code is also <a href="http://pastebin.com/hWQAejwH" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">abarnert: tried the link "Grouping into runs of adjacent values", it is awesome. But I think there might be a little problem, when the input is a = [0, 1, 2], the result is "[[0, 1, 2], [2]]", I don't know how to solve this problem. Btw, both links can't not be visited from China.×Comments may only be edited for 5 minutes×Comments may only be edited for 5 minutes×Comments may only be edited for 5 minutes</span>
<span class="comment-copy">I think you've solved the easy part of this—human-readable-formatting a file size—but not the hard part—grouping "adjacent" files together.</span>
<span class="comment-copy">inspectorG4dget, thank you, it helps. I need make the "adjacent" files group together. Each image file is frame in the movie, and each continue image sequence is a shot.</span>
<span class="comment-copy">Check out the edit. It should work, as long as all your files are named <code>nameNNNN.jpg</code> or <code>nameNNNN.tiff</code></span>
<span class="comment-copy">This doesn't work, <code>getRuns</code> always returns <code>[]</code>. From a quick look, there are at least three problems. First <code>high = int(mid…)</code> means the condition is never true, so everything goes into a single run. And you don't append the leftover final run anywhere at the end of the loop (which in this case is everything). And you don't update <code>start</code>, so if everything else worked, you'd get <code>0000-2000</code>, <code>0000-4000</code>, etc. (<code>fnmaes</code> is obviously a typo, but that part I'm sure the OP could fix on his own.) There might be other problems, but fixing that should be enough to get started.</span>
<span class="comment-copy">Also, the OP is trying to group <code>name0000-name2000.jpg</code> and <code>name0000-name2000.tif</code> as separate groups, but you're going to (a) add them together, and (b) lose the extension information with no way to recover it. You really are going to have to either sort by extension first, or do something ugly like keeping a dict of start values for each extension and loop over them or something.</span>
<span class="comment-copy">OK, the problem is that the pure-Python <code>groupby</code> from the docs passes <code>tgtkey</code> as an argument to <code>_grouper</code> instead of having <code>_grouper</code> use the attribute. Which seems to be nothing more than a micro-optimization (local variable lookup is faster than instance attribute lookup) that's almost never going to be relevant. And it means that we end up testing the last element of a group against the first to decide whether to finish, so if the last element was in a group of size &gt; 2 it will end up getting repeated. Let me edit the blog post; thanks for catching this.</span>
<span class="comment-copy">But again, you shouldn't be using the hacked-up <code>groupby</code>. As the blog post explains, it seemed simpler before implementing it both ways, but writing a key function that works with standard <code>groupby</code> turned out a lot simpler and cleaner. (Also, as a side note: When porting code from 3.x to 2.x, always change <code>class foo:</code> to <code>class foo(object):</code> or you get old-style classes.) Finally, posting an answer like this is really an abuse of the SO system. It would have been better to post a comment with a link to a pastebin, or a comment on my blog post, or a new question, or just about anything else.</span>
