<div class="post-text" itemprop="text">
<p>in python3.3:</p>
<pre><code>x = 1
print('global x =', x)
def f():
    exec('x=2')
    #x = 2
    print('local in f() x =', x)
    def g():
        print('local in g() x =', x)
    g()

f()
</code></pre>
<p>in python3.3 why the resuls like this:</p>
<pre><code>    global x = 1
    local in f() x = 1
    local in g() x = 1
</code></pre>
<p>anyone can tell me why exec('x=2') in not equal x=2</p>
<p>what's the difference between 'x=2' and exec('x=2')?</p>
<p>3x</p>
</div>
<div class="post-text" itemprop="text">
<p>Locals in functions are <em>highly</em> optimized and determined at compile time, stored in an array on the frame. Each local name is merely an index in the byte code, indexing into that array.</p>
<p><code>exec()</code> on the other hand tries to treat locals as a writable dictionary, but inside a function the dictionary returned by <code>locals()</code> is <em>not</em> connected to the actual locals array of a function. You cannot set locals with <code>exec()</code>.</p>
<p>Quoting the <a href="http://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals()</code> function</a> documentation:</p>
<blockquote>
<p><strong>Note</strong>: The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</p>
</blockquote>
<p>and from the <a href="http://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec()</code> function</a>:</p>
<blockquote>
<p><strong>Note</strong>: The default <em>locals</em> act as described for function <code>locals()</code> below: modifications to the default <em>locals</em> dictionary should not be attempted. Pass an explicit <em>locals</em> dictionary if you need to see effects of the code on <em>locals</em> after function <code>exec()</code> returns.</p>
</blockquote>
<p>When you add the line <code>x = 2</code> inside the function, then <code>x</code> is determined to be a local by the compiler.</p>
</div>
<span class="comment-copy">Python is interpreted language, when the 'compile time' happen? and How can I debug the array('Locals in functions are highly optimized and determined at compile time, stored in an array on the frame. ) whitch store the locals or look the detail of the array? 3x</span>
<span class="comment-copy">@hugc: Python compiles your code to bytecode, then interprets the bytecode. You can look at the bytecode generated for a callable by using the <code>dis.dis()</code> function; <code>import dis; dis.dis(f)</code> would show you the bytecode generated for <code>f</code>. You cannot inspect the locals array (that's a C-level value)); all you are given is the frame's <code>f_locals</code> attribute, which is a dictionary <i>reflecting</i> the array into a mapping.</span>
<span class="comment-copy">@hugc: see the <a href="http://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code> module</a> for what kind of introspection you can do in Python.</span>
