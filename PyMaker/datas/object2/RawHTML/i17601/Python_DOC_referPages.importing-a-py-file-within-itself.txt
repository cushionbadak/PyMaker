<div class="post-text" itemprop="text">
<p>This is test.py:</p>
<pre><code>import sys

a = 50
b = [1,2]

def change():
    print "Here 1"
    import test
    print "Here 2"
    test.a = -1
    test.b = [0,1]
    return

def main():
    print "Here 3"
    change()
    print "Here 4"
    print a, b

if 1:
    main()
</code></pre>
<p>The above python code when ran on system generates the following output:</p>
<pre><code>Here 3
Here 1
Here 3
Here 1
Here 2
Here 4
-1 [0, 1]
Here 2
Here 4
50 [1, 2]
</code></pre>
<p>What I am confused why is not there an infinite loop of "Here 1 \n Here 3" outputs. How can the print a, b outputs can be justified?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you run the file as a script, it is not considered to be the <code>test</code> module. It is considered to be the <code>__main__</code> module.</p>
<p>When execution hits <code>import test</code>, a second execution of the file starts, where the module is considered to be <code>test</code>.</p>
<p>When execution hits <code>import test</code> again, Python recognizes that it's already importing <code>test</code> and does not reexecute the module. Instead, it merely loads the half-initialized <code>test</code> module object into the current namespace and continues on. Python's optimistic assumption is that you've written the code so that the contents of <code>test</code> won't be needed until the import finishes.</p>
<p>When execution hits the assignments to <code>test.a</code> and <code>test.b</code>, that affects the <code>test</code> module, but not <code>__main__</code>, despite the fact that they came from the same file. Thus, the <code>print a, b</code> from the imported module reflects the new values, while the <code>print a, b</code> from <code>__main__</code> reflects the initial values.</p>
</div>
<div class="post-text" itemprop="text">
<p>A file can only be imported once. The 'import test' line succeeds the first time it is encountered. When it is encountered a second time, the interpreter will check that it has already been loaded. </p>
<p>When a program is initially run, it does not count as being 'imported'.</p>
</div>
<div class="post-text" itemprop="text">
<p>The general flow of this script is as follows:</p>
<ol>
<li>Main is run, so it prints 'Here 3'</li>
<li>change is called, so it prints 'Here 1'</li>
<li>When importing test, python runs the main function of test</li>
<li>When calling change the second time, python is smart enough to know that test is already imported, so it effectively skips that line.</li>
<li>The imported main finishes running</li>
<li>The original script finishes running.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/a/21326333/1222951">user2367112's excellent answer</a> explains why this happens, none of the answers here offer a workaround.</p>
<p>There are two easy ways to achieve the desired behavior.</p>
<ol>
<li>Rather than importing <code>test</code>, use <code>import __main__</code> instead. If you assign an alias with <code>import __main__ as test</code>, you won't even have to change any other code.</li>
<li>You can set <code>sys.modules['test'] = sys.modules['__main__']</code> to tell python "Hey, this module already exists". After this, <code>import test</code> will not re-import the module, thus making your code work as expected. The relevant docs on <code>sys.modules</code> can be found <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer">here</a>.</li>
</ol>
</div>
<span class="comment-copy">thanks Slater for the edit!!</span>
<span class="comment-copy">It would be good if you accepted an answer you found helpful here that lead to your solution. It will help also quickly lead readers to what was helpful if encountering the same issue.</span>
<span class="comment-copy">Well said.  My first thought was "why is he bringing <code>__main__</code> into this, things are only imported once and cached in <code>sys.modules</code>".  My second thought was... Wait a minute, he's right about the <code>__main__</code> bit (and it perfectly explains the result which is always nice).  +1 from me.</span>
<span class="comment-copy">+1 Also <code>test</code> is a builtin module in Py 2.7</span>
