<div class="post-text" itemprop="text">
<p>I want to use the join function in python (not any other function) to merge two lists into nested lists, assuming the lists are of equal length, for example:</p>
<pre><code>list1 = [1, 2, 3]

list2 = ["a", "b", "c"]
</code></pre>
<p>I want it to produce a new list like this:</p>
<pre><code>[[1,"a"], [2,"b"], [3,"c"]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you understand what <code>str.join</code> is for.</p>
<p><a href="http://docs.python.org/2.7/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a> is a string method that takes an iterable (usually a list) of strings and returns a new string object that is a concatenation of those strings separated by the string that the method was invoked on.</p>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; strs = ['a', 'b', 'c']
&gt;&gt;&gt; ''.join(strs)
'abc'
&gt;&gt;&gt; '--'.join(strs)
'a--b--c'
&gt;&gt;&gt;
</code></pre>
<p>This means that you would not use <code>str.join</code> for what you are trying to do.  Instead, you can use <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> and a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; list1 = [1, 2, 3]
&gt;&gt;&gt; list2 = ["a", "b", "c"]
&gt;&gt;&gt; [list(x) for x in zip(list1, list2)]
[[1, 'a'], [2, 'b'], [3, 'c']]
&gt;&gt;&gt;
</code></pre>
<p>Note however that, if you are on Python 2.x, you may want to use <a href="http://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow"><code>itertools.izip</code></a> instead of <code>zip</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; list1 = [1, 2, 3]
&gt;&gt;&gt; list2 = ["a", "b", "c"]
&gt;&gt;&gt; [list(x) for x in izip(list1, list2)]
[[1, 'a'], [2, 'b'], [3, 'c']]
&gt;&gt;&gt;
</code></pre>
<p>Like the Python 3.x <code>zip</code>, <code>itertools.izip</code> will return an iterator (instead of a list like the Python 2.x <code>zip</code>).  This makes it more efficient, especially when dealing with larger lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Eureka! The join function you are looking for in this context, my friend, is the following:</p>
<pre><code>def join(l1, l2):
    return [list(x) for x in zip(l1, l2)]

print join(list1, list2) 
</code></pre>
<p>:-)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list(map(list, zip(list1, list2)))
</code></pre>
</div>
<span class="comment-copy">What "join function" are you talking about? join is not a builtin function in python2. Do you mean some module's join function? Some object's join method?</span>
<span class="comment-copy">Haven't tried anything?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/7474717/how-to-zip-two-lists-of-lists-in-python">How to zip two lists of lists in Python?</a></span>
<span class="comment-copy">Title says tuple and example expects list. How's that?</span>
<span class="comment-copy">@Brad No, that problem is significantly different (more complicated).</span>
<span class="comment-copy">Can it be done using the string.join operation?</span>
<span class="comment-copy">@user3208158 - <a href="http://docs.python.org/2.7/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> is a string method that returns a string, not a list.  So no, you would not use it for this task.</span>
