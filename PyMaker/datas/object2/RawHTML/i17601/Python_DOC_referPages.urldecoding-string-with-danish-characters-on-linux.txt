<div class="post-text" itemprop="text">
<p>I have spent plenty of time as far as I am newbie in Python.<br/>
How could I ever decode such a URL:</p>
<pre><code>example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0
</code></pre>
<p>to this one in python 2.7: <code>example.com?title==правовая+защита</code> </p>
<p><code>url=urllib.unquote(url.encode("utf8"))</code> is returning something very ugly.</p>
<p>Still no solution, any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The data is UTF-8 encoded bytes escaped with URL quoting, so you want to <strong>decode</strong>:</p>
<pre><code>url = urllib.unquote(url).decode('utf8') 
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import urllib 
&gt;&gt;&gt; url='example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0'
&gt;&gt;&gt; urllib.unquote(url).decode('utf8') 
u'example.com?title=\u043f\u0440\u0430\u0432\u043e\u0432\u0430\u044f+\u0437\u0430\u0449\u0438\u0442\u0430'
&gt;&gt;&gt; print urllib.unquote(url).decode('utf8')
example.com?title=правовая+защита
</code></pre>
<p>The Python 3 equivalent is <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote" rel="noreferrer"><code>urllib.parse.unquote()</code></a>, which by default handles decoding for you:</p>
<pre><code>from urllib.parse import unquote

url = unquote(url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3, you can use <a href="https://docs.python.org/3/library/urllib.parse.html" rel="noreferrer"><code>urllib.parse</code></a></p>
<pre><code>url = """example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0"""

import urllib.parse
urllib.parse.unquote(url)
</code></pre>
<p>gives:</p>
<pre><code>'example.com?title=правовая+защита'
</code></pre>
</div>
<span class="comment-copy">In the general case, the tail of a URL is just a cookie. You can't know which local character-set encoding the server uses or even whether the URL encodes a string or something completely different. (Granted, many URLs <i>do</i> encode a human-readable string; and often, you can guess the encoding very easily. But it's not possible in the generally case or completely automatically.)</span>
<span class="comment-copy">Thank you for your effort Martijn I have tried this way also, but while decoding ----urllib.unquote(url).decode('utf8')---- I am getting a bang error saying "UnicodeEncodeError: 'ascii' codec can't encode characters in position 20-27: ordinal not in range(128)"</span>
<span class="comment-copy">@swordholder: You are doing something else then as well. Are you concatenating byte strings with the output? Are you trying to print this on a Windows console? Try doing <i>just</i> the <code>urllib.unquote(url).decode('utf8')</code> part.</span>
<span class="comment-copy">@swordholder: After a quick test I can see the same error <b>if <code>url</code> is unicode</b>. In that case, use <code>url = url.encode('ASCII')</code> first.</span>
<span class="comment-copy">@swordholder: perhaps you want to review the <a href="http://docs.python.org/2/howto/unicode.html" rel="nofollow noreferrer">Unicode HOWTO</a>? <a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow noreferrer">Pragmatic Unicode</a> is great too, as is <a href="http://joelonsoftware.com/articles/Unicode.html" rel="nofollow noreferrer">The Absolute Minimum ...</a>.</span>
<span class="comment-copy">@Rawrgulmuffins <code>+</code> is a space in <a href="http://en.m.wikipedia.org/wiki/Application/x-www-form-urlencoded#The_application.2Fx-www-form-urlencoded_type" rel="nofollow noreferrer"><code>x-www-form-urlencoded</code> data</a>; you'd use <code>urllib.parse_qs</code> to parse that, or use <code>urllib.unquote_plus()</code>. But they should only appear in the query string, not the rest of the URL.</span>
<span class="comment-copy">Thank you! Was looking exactly for this one.</span>
