<div class="post-text" itemprop="text">
<p>Howdy: somewhat of a python/programming newbie. I am trying to find each time a certain word starts a new sentence and replace it, which in this case is good old "Bob", replaced with "John". I am using a dictionary and the <code>.replace()</code> method to do the replacing - replacing the dictionary key with the associated value. Here is my code:</p>
<pre><code>start_replacements = {'. Bob': '. John',
                      '! Bob': '! John', 
                      '? Bob': '? John',
                      '\nBob': '\nJohn',
                      }

def search_and_replace(start_word, replacement):
    with open('start_words.txt', 'r+') as article:
        read_article = article.read()
        replaced = read_article.replace(start_word, replacement)
        article.seek(0)
        article.write(replaced)

def main():
    for start_word, replacement in start_replacements.iteritems():
        search_and_replace(start_word, replacement)


if __name__ == '__main__':
    main()
</code></pre>
<p>You will see in the dictionary that I have 4 ways of finding "Bob" at the beginning of a sentence, but I am not sure how to find "Bob" at the very beginning of at text file, without using regex's <code>^</code>. I would prefer to avoid using regex to keep this script more simple. Is this possible?</p>
<p>EDIT: Contents of "start_words.txt" before running script:</p>
<pre><code>Bob is at the beginning of the file. Bob after period! Bob after exclamation? Bob after question.
Bob after newline.
</code></pre>
<p>Content after running script:</p>
<pre><code>Bob is at the beginning of the file. John after period! John after exclamation? John after question.
John after newline.
</code></pre>
<p>EDIT: <strong>Explanation for not wanting regex</strong>: I would prefer to stick with the dictionary because it is going to grow each week with new words and phrases added. In this instance it is just "Bob". the dictionary will probably grow into the hundreds. I am not hell bent on not using regex, but as a relative newbie, I was trying to find out if there was another way that I don't now about.</p>
<p>EDIT: The 3rd comment below by @tripleee is a great suggestion and works for what I want to do. Thanks a bunch. </p>
<p>Apologies, not my intention to cause some down votes for myself and within the answer. All help as been appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular expression (with the dictionary). This does not require iterating dictionary entries.</p>
<pre><code>import re

nonspaces = re.compile(r'\S+') # To extract the first word

def search_and_replace(filepath, replacement):
    def replace_sentence(match):
        def replace_name(match):
            name = match.group()
            return replacement.get(name, name)
        return nonspaces.sub(replace_name, match.group(), count=1)
        # count=1: to change only the first word.
    with open(filepath, 'r+') as f:
        replaced = re.sub('[^.!?]+', replace_sentence, f.read())
        f.seek(0)
        f.write(replaced)
        f.truncate() # NOTE: If name shrinks, unwanted string remains.


start_replacement = {
    'Bob': 'John',
    'Sam': 'Jack',
    'Tom': 'Kevin',
}
search_and_replace('start_words.txt', start_replacement)
</code></pre>
<p>Explanation about regular expressions used.</p>
<ul>
<li><p><code>[^.!?]</code>: Match any character that is not <code>.</code>, <code>!</code> nor <code>?</code>. Used to extract sentences.</p>
<pre><code>&gt;&gt;&gt; re.findall('[^.!?]+', 'Bob is at the beginning. Bob after period!')
['Bob is at the beginning', ' Bob after period']
</code></pre></li>
<li><p><code>\S</code>: Match any non-spaces character. used to extract the first word (possibly name):</p>
<pre><code>&gt;&gt;&gt; re.search(r'\S+', 'Bob is at the beginning').group()
'Bob'
&gt;&gt;&gt; re.search(r'\S+', '   Tom after period!').group()
'Tom'

&gt;&gt;&gt; re.sub(r'\S+', 'John', '   Bob and Tom.')
'   John John John'
&gt;&gt;&gt; re.sub(r'\S+', 'John', '   Bob and Tom.', count=1)
'   John and Tom.'
</code></pre></li>
</ul>
<p>See <a href="http://docs.python.org/3/library/re.html" rel="nofollow"><code>re</code> module documentation</a> and <a href="http://docs.python.org/3/howto/regex.html" rel="nofollow">Regular Expression HOWTO</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to adjust either data you are working with or the algorithm to account for this special case.</p>
<p>For example you may decorate the beginning of your data with some value and add corresponding replacement to your dictionary.</p>
<pre><code>f_begin_deco = '\0\0\0'  # Sequence that won't be in data.

start_replacements = { f_begin_deco + 'Bob': f_begin_deco + 'John' }

# In your search_and_replace function.   
read_article = f_begin_deco + article.read()
replaced = read_article.replace(start_word, replacement)
replaced = replaced[len(f_begin_deco):]  # Remove beginning of file decoration.
</code></pre>
<p>Also you may what to explore <a href="http://docs.python.org/2/library/stdtypes.html#typecontextmanager" rel="nofollow">context manager protocol</a> to create more elegant code for data decoration.</p>
<p>Alternative approach is to change your search and replace algorithm to make it account for the special case.</p>
<pre><code>start_replacements = { 'Bob': 'John' }

# In your search_and_replace function.
if read_article.startswith(start_word):
    read_article = replacement + read_article[len(start_word):]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Question to your question: why don't you want to use regex?</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = "! Bob is a foo bar"
&gt;&gt;&gt; re.sub('^[!?.\\n\\s]*Bob','John', x)
'John is a foo bar'
&gt;&gt;&gt; x[:2]+re.sub('^[!?.\\n\\s]*Bob','John', x)
'! John is a foo bar'
</code></pre>
<p>Here's my attempt to do it without regex:</p>
<pre><code>&gt;&gt;&gt; x = "! Bob is a foo bar"
&gt;&gt;&gt; first = ['!','?','.','\n']
&gt;&gt;&gt; x = x.split()
&gt;&gt;&gt; x[1] ="John" if x[1] == "Bob" and x[0] in first else x[1]
&gt;&gt;&gt; x
['!', 'John', 'is', 'a', 'foo', 'bar']
&gt;&gt;&gt; " ".join(x)
'! John is a foo bar'
</code></pre>
<p>As @falsetru noted:</p>
<pre><code>&gt;&gt;&gt; x = "\n Bob is a foo bar"
&gt;&gt;&gt; x = x.split()
&gt;&gt;&gt; x[1] ="John" if x[1] == "Bob" and x[0] in first else x[1]
&gt;&gt;&gt; " ".join(x)
'Bob is a foo bar'
</code></pre>
<p>Possibly the ugliest way to resolve the <code>str.split()</code> removing the <code>\n</code> is to:</p>
<pre><code>&gt;&gt;&gt; x = "\n Bob is a foo bar"
&gt;&gt;&gt; y = x.split()
&gt;&gt;&gt; y[1] ="John" if y[1] == "Bob" and y[0] in first else y[1]
&gt;&gt;&gt; y
['Bob', 'is', 'a', 'foo', 'bar']
&gt;&gt;&gt; if x.split()[0] == "\n":
...     y.insert(0,'\n')
... 
&gt;&gt;&gt; " ".join(y)
'Bob is a foo bar'
&gt;&gt;&gt; y
['Bob', 'is', 'a', 'foo', 'bar']
&gt;&gt;&gt; if x[0] == "\n":
...     y.insert(0,'\n')
... 
&gt;&gt;&gt; " ".join(y)
'\n Bob is a foo bar'
</code></pre>
<p>I should stop appending my answer, otherwise I'll be just condoning the OP to use nonsensical solution to which regex resolves easily.</p>
</div>
<span class="comment-copy">how does your textfile look like? a sample?</span>
<span class="comment-copy">one way is <code>sentence.split(" ")[0]</code> but i think regex would be more efficient</span>
<span class="comment-copy">As a workaround, you could prepend a unique pattern like <code>### </code> to the very first line, and add a match for <code>### Bob</code> to your substitution list. Then of course replace <code>### </code> with nothing before printing.</span>
<span class="comment-copy">With Regex, simply replacing <code>([\w\s]*)Bob</code> with <code>$1John</code> would get the work done. I think this would keep your code simpler.</span>
<span class="comment-copy">Just a note, appending your regex and changing the dictionary shouldn't regularly isn't very different.</span>
<span class="comment-copy"><code>without</code> regex? The first line is <code>import re</code>.</span>
<span class="comment-copy">@Bibhas: But why? Regex is definitely the easiest way to achieve this, it's the perfect tool for the job...</span>
<span class="comment-copy">@TimPietzcker I know. But that's not what the OP asks for. And my comment was pointing the fact that alvas said it's his attempt <code>without regex</code> when the code shows he's using regex.</span>
<span class="comment-copy">relax, my typing is slow =)</span>
<span class="comment-copy"><code>start_replacements</code> contains only single space, but text could contain multiple spaces. <code>start_replacements</code> contians <code>\n</code>. Also content of the text file contains newline.</span>
