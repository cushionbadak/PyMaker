<div class="post-text" itemprop="text">
<p>I'm trying to see if this is the most efficient way to sort a bubble list in python or if there are better ways some people tell me to use two loops, what are the benefits of doing like that vs the below</p>
<pre><code>def sort_bubble(blist):
    n = 0
    while n &lt; len(blist) - 1:
        if blist[n] &gt; blist[n + 1]:
            n1 = blist[n]
            n2 = blist[n + 1]
            blist[n] = n2
            blist[n + 1] = n1
            n = 0
        else:
            n = n + 1
    print blist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your algorithm is technically a bubble sort in that it does exactly the swaps that it should. However, it's a <em>very inefficient</em> bubble sort, in that it does a <em>lot</em> more compares than are necessary.</p>
<p>How can you <em>know</em> that? It's pretty easy to instrument your code to count the number of compares and swaps. And meanwhile, <a href="http://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow">Wikipedia</a> gives implementations of a simple bubble sort, and one with the skip-sorted-tail optimization, in a pseudocode language that's pretty easy to port to Python and similarly instrument. I'll show the code at the bottom.</p>
<p>For a perfect bubble sort, given a random list of length 100, you should expect a bit under 10000 compares (100 * 100), and a bit under 2500 swaps. And the Wikipedia implementation does exactly that. The "skip-sorted-tail" version should have just over half as many compares, and it does.</p>
<p>Yours, however, has 10x as many compares as it should. The reason your code is inefficient is that it starts over at the beginning over and over, instead of starting where it swapped whenever possible. This causes an extra factor of <code>O(sqrt(N))</code>.</p>
<p>Meanwhile, almost any sort algorithm is better than bubble sort for almost any input, so even an efficient bubble sort is not an efficient sort.</p>
<hr/>
<p>I've made one minor change to your code: replacing the four-line swap with a more idiomatic single-line swap. Otherwise, nothing is changed but adding the <code>cmpcount</code> and <code>swapcount</code> variables, and returning the result instead of printing it.</p>
<pre><code>def bogo_bubble(blist):
    cmpcount, swapcount = 0, 0
    n = 0
    while n &lt; len(blist) - 1:
        cmpcount += 1
        if blist[n] &gt; blist[n + 1]:
            swapcount += 1
            blist[n], blist[n+1] = blist[n+1], blist[n]
            n = 0
        else:
            n = n + 1
    return blist, cmpcount, swapcount
</code></pre>
<p>This is the <a href="http://en.wikipedia.org/wiki/Bubble_sort#Pseudocode_implementation" rel="nofollow">Psuedocode implementation</a> from Wikipedia, translated to Python. I had to replace the <code>repeat… unit</code> with a <code>while True… if not …: break</code>, but everything else is trivial.</p>
<pre><code>def wp1_bubble(blist):
    cmpcount, swapcount = 0, 0
    while True:
        swapped = False
        for i in range(1, len(blist)):
            cmpcount += 1
            if blist[i-1] &gt; blist[i]:
                swapcount += 1
                blist[i-1], blist[i] = blist[i], blist[i-1]
                swapped = True
        if not swapped:
            break
    return blist, cmpcount, swapcount
</code></pre>
<p>This is the <a href="http://en.wikipedia.org/wiki/Bubble_sort#Optimizing_bubble_sort" rel="nofollow">Optimizing bubble sort</a>, which does the simple version of the skip-sorted-tail optimization, but not the more elaborate version (which comes right after it).</p>
<pre><code>def wp2_bubble(blist):
    cmpcount, swapcount = 0, 0
    n = len(blist)
    while True:
        swapped = False
        for i in range(1, n):
            cmpcount += 1
            if blist[i-1] &gt; blist[i]:
                swapcount += 1
                blist[i-1], blist[i] = blist[i], blist[i-1]
                swapped = True
        n -= 1
        if not swapped:
            break
    return blist, cmpcount, swapcount

import random
alist = [random.randrange(100) for _ in range(100)]
bb, cb, sb = bogo_bubble(alist[:])
b1, c1, s1 = wp1_bubble(alist[:])
b2, c2, s2 = wp2_bubble(alist[:])
assert bb == b1 == b2
print('bogo_bubble: {} cmp, {} swap'.format(cb, sb))
print('wp1_bubble : {} cmp, {} swap'.format(c1, s1))
print('wp2_bubble : {} cmp, {} swap'.format(c2, s2))
</code></pre>
<p>Typical output:</p>
<pre><code>bogo_bubble: 100619 cmp, 2250 swap
wp1_bubble : 8811 cmp, 2250 swap
wp2_bubble : 4895 cmp, 2250 swap
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would do it if I was forced to use bubble sort, you should probably always just use the default sort() function in python, it's very fast.</p>
<pre><code>def BubbleSort(A):
    end = len(A)-1
    swapped = True
    while swapped:
        swapped = False
        for i in range(0, end):
            if A[i] &gt; A[i+1]:
                A[i], A[i+1] = A[i+1], A[i]
                swapped = True
        end -= 1
</code></pre>
<p>It's basically regular bubblesort but instead of traversing the entire list every time it only traverses up to the last swapped value, by definition any value past that is already in place.</p>
<p>Also you do not need to use temp values in python to swap, the pythonic way to do this is:</p>
<pre><code>a , b = b , a 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could test it out yourself. Other things remaining the same, just counting the number of iterations will give you an idea, what is faster. Here is what I wrote:</p>
<pre><code>def sort_bubble(blist):
    ops=0
    n = 0
    while n &lt; len(blist) - 1:
        if blist[n] &gt; blist[n + 1]:
            n1 = blist[n]
            n2 = blist[n + 1]
            blist[n] = n2
            blist[n + 1] = n1
            n = 0
        else:
            n = n + 1
        ops+=1
    print ops
    print blist

def bubbleSort(list):
    ops=0
    for i in range(len(list)):
        for j in range(i):
            if list[i] &lt; list[j]:
                list[i], list[j] = list[j], list[i]
            ops+=1
    print ops
    return list



sort_bubble([ 6,5, 3 ,1, 8, 7, 2, 4])
print bubbleSort([ 6,5, 3 ,1, 8, 7, 2, 4])
</code></pre>
</div>
<span class="comment-copy">Is a "bubble list" any different from an ordinary list? I recommend using the built-in <code>list.sort()</code> method.</span>
<span class="comment-copy">Are you asking (a) whether this is the most (algorithmically) efficient way to implement a bubble sort, (b) whether a bubble sort is an efficient way to sort things, or (c) something completely different?</span>
<span class="comment-copy">Also, just asking us to compare your code to some code you've vaguely described as "use two loops" is next to impossible. Try writing the code both ways, keeping the implementations as similar as possible (so the changes are obvious). And then you can test it yourself (with <a href="http://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a>, or by counting the number of steps, or…). And if it turns out to be more efficient than your code and you can't figure out why, you'll have a great StackOverflow question.</span>
<span class="comment-copy">As a side note: you don't have to write four lines of code with two temp variables (or even three lines with one temp variable) to swap two values in Python; just do <code>blist[n], blist[n+1] = blist[n+1], blist[n]</code>.</span>
<span class="comment-copy">TLDR: No the OP is inefficient even for a bubble sort</span>
<span class="comment-copy">@gnibbler: That's right there in the first paragraph. "However, it's a <i>very inefficient</i> bubble sort, in that it does a <i>lot</i> more compares than are necessary." I doubt anyone who can't read as far as the second line will be reading comments…</span>
<span class="comment-copy">This only counts the number of compares, not the number of swaps. Since his algorithm happens to get the first wrong and the second right, that turns out to be OK.</span>
<span class="comment-copy">You're right. For some reason, I tend to discount assignment operations in algorithm design. They are of constant cost in the big scheme of things, right.</span>
<span class="comment-copy">Well, yeah, but comparisons are <i>also</i> of constant cost. The question is, how many are there? I believe the OP's intended design, if done right, would have 4x as many compares as swaps, and swaps could easily take more than 4x as long as compares, so you can't just ignore them because of that constant 4x. As it turns out, he has 4*sqrt(N)x compares, and that's the bug, and that super-constant factor means you <i>can</i> ignore the swaps, but if you didn't know that in advance…</span>
