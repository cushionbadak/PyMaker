<div class="post-text" itemprop="text">
<p>Let's consider the following code.</p>
<pre><code>import re

text = "def oneFunc(x, y): return 0"

pattern = re.compile(
    r"(?P&lt;DEF_FUNC&gt;def (?P&lt;NAME_FUNC&gt;\w+)\s*\((.*?)\):)|(?P&lt;OTHERS&gt;\w+)"
)

print('---', text, sep = "\n")

for m in pattern.finditer(text):
    mdict = m.groupdict()

    print('---', (m.start(), m.end()), sep = "\n")

    for name, textfound in mdict.items():
        if textfound != None:
            print((name, textfound))
</code></pre>
<p>This gives the following output.</p>
<pre><code>---
def oneFunc(x, y): return 0
---
(0, 18)
('NAME_FUNC', 'oneFunc')
('DEF_FUNC', 'def oneFunc(x, y):')
---
(19, 25)
('OTHERS', 'return')
---
(26, 27)
('OTHERS', '0')
</code></pre>
<p>Is it possible to ask directly to <code>re</code> positions of submatchings ? For example, I would like to know that <code>'oneFunc'</code> begins at 4 and ends at 11, but I only have the positions of the biggest current matching.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/re.html#re.match.start" rel="nofollow">http://docs.python.org/3/library/re.html#re.match.start</a> ?</p>
<p>So, <code>m.start('NAME_FUNC')</code> will return 4, etc. (same for <code>m.end(â€¦)</code>, of course).</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the first answer, which is certainly correct, you might also find <code>.regs</code> and <code>.groups()</code> useful for something like this:</p>
<pre><code>for m in pattern.finditer(text):
    group_indices = dict(zip(m.groups(), m.regs[1:]))  # the first element of m.regs is the overall match
</code></pre>
<p>The output is a <code>dict</code> that has the matched string/substring as key and the indices as the value. For example, the following three <code>dict</code>s would be the result of your searches above:</p>
<pre><code>{'def oneFunc(x, y):': (0, 18), 'x, y': (12, 16), None: (-1, -1), 'oneFunc': (4, 11)}
{'return': (19, 25), None: (-1, -1)}
{None: (-1, -1), '0': (26, 27)}
</code></pre>
<p>You could, of course, also reverse the keys/values in these dictionaries by using <code>dict(zip(m.regs[1:], m.groups()))</code> instead of <code>dict(zip(m.groups(), m.regs[1:]))</code>.</p>
</div>
<span class="comment-copy">Thanks ! Sorry for my noisy question.</span>
