<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2295290/what-do-lambda-function-closures-capture">What do (lambda) function closures capture?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/12423614/local-variables-in-nested-functions">Local variables in nested functions</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to dynamically create some methods to a class but when I create an object of this class and access the properties, I always get the last value.</p>
<pre><code>properties = ['a', 'b', 'c']
for p in properties:
    f = property(lambda self: p)
    print p # you see a, b, c
    print f # you can see it is 3 different objects
    setattr(MyClass, p, f)

obj = MyClass()
obj.a # returns c !!! why?
obj.b # returns c !!! why?
obj.c # returns c
</code></pre>
<h2>UPDATE</h2>
<p>I was able to make it work using a function to create the method:</p>
<pre><code>def create_function(p):    
    def f(self,):
        return p   
    return f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This has nothing to do with using <code>property</code>. It's explained in the official FAQ as <a href="http://docs.python.org/2/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow">Why do lambdas defined in a loop with different values all return the same result?</a>.</p>
<p>When you do this:</p>
<pre><code>properties = ['a', 'b', 'c']
for p in properties:
    f = property(lambda self: p)
    print p # you see a, b, c
    print f # you can see it is 3 different objects
    setattr(MyClass, p, f)
</code></pre>
<p>… each <code>f</code> is a closure over the <code>p</code> variable.* This means that, when you call that <code>f</code>, it will return the current value of <code>p</code> within its defining scope, not the value of <code>p</code> at the time at which the closure was constructed. At the end of the loop, <code>p</code>'s value is <code>'c'</code>, so that's what all of your properties return.</p>
<p>You can get around this by (among other solutions**) using the "default value hack":</p>
<pre><code>properties = ['a', 'b', 'c']
for p in properties:
    f = property(lambda self, p=p: p)
    print p # you see a, b, c
    print f # you can see it is 3 different objects
    setattr(MyClass, p, f)
</code></pre>
<p>Now, each property has a parameter named <code>p</code>, whose default value is the value of <code>p</code> at function definition time. When called (without supplying a <code>p</code> argument), the body ends up with a local variable <code>p</code> with that value, instead of a closure variable <code>p</code> referring to the non-local scope.</p>
<hr/>
<p>* Actually, it's not technically a closure, because the defining scope is global. But it acts the same as if it were done inside another scope.</p>
<p>** There's also the JavaScript idiom of creating a new scope to define the function within, <code>(lambda p: lambda self: p)(p)</code>, or <code>functools.partial</code>, or creating a callable object instead of a function, or… But, despite having the word "hack" in the name, the "default value hack" is a well-known Python idiom, enshrined in the docs and used within the stdlib, and it's usually the best answer, unless you have some <em>other</em> reason for another scope or a <code>partial</code> or a custom callable.</p>
</div>
<span class="comment-copy">I see, thank you. I was also able to make it work using a function that will create my function. See the update on my post.</span>
<span class="comment-copy">@YAmikep: As a side note, if you look at the <a href="http://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> docs for members of <code>function</code> and <code>code</code> objects, you can see how to test whether <code>p</code> is a local, closure, or global variable within the body. (You can also use <code>dis.dis</code> if you want to learn how to ready bytecode.) In more complex cases, it can be handy.</span>
