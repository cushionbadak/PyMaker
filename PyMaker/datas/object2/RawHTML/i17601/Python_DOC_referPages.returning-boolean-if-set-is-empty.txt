<div class="post-text" itemprop="text">
<p>I am struggling to find a more clean way of returning a boolean value if my set is empty at the end of my function</p>
<p>I take the intersection of two sets, and want to return <code>True</code> or <code>False</code> based on if the resulting set is empty.</p>
<pre><code>def myfunc(a,b):
    c = a.intersection(b)
    #...return boolean here
</code></pre>
<p>My initial thought was to do</p>
<pre><code>return c is not None
</code></pre>
<p>However, in my interpreter I can easily see that statement will return true if <code>c = set([])</code></p>
<pre><code>&gt;&gt;&gt; c = set([])
&gt;&gt;&gt; c is not None
True
</code></pre>
<p>I've also tried all of the following:</p>
<pre><code>&gt;&gt;&gt; c == None
False
&gt;&gt;&gt; c == False
False
&gt;&gt;&gt; c is None
False
</code></pre>
<p>Now I've read from the documentation that I can only use <code>and</code>, <code>or</code>, and <code>not</code> with empty sets to deduce a boolean value. So far, the only thing I can come up with is returning not not c</p>
<pre><code>&gt;&gt;&gt; not not c
False
&gt;&gt;&gt; not c
True
</code></pre>
<p>I have a feeling there is a much more pythonic way to do this, by I am struggling to find it. I don't want to return the actual set to an if statement because I don't need the values, I just want to know if they intersect.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def myfunc(a,b):
    c = a.intersection(b)
    return bool(c)
</code></pre>
<p><a href="http://docs.python.org/3/library/functions.html#bool" rel="noreferrer"><code>bool()</code></a> will do something similar to <code>not not</code>, but more ideomatic and clear.</p>
</div>
<div class="post-text" itemprop="text">
<p>not as pythonic as the other answers, but mathematics: </p>
<pre><code>return len(c) == 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to <code>return True</code> for an empty set, then I think it would be clearer to do:</p>
<pre><code>return c == set()
</code></pre>
<p>i.e. "<code>c</code> is equal to an empty <code>set</code>". </p>
<p>(Or, for the other way around, <code>return c != set()</code>).</p>
<p>In my opinion, this is more explicit (though less idiomatic) than relying on Python's interpretation of an empty set as <code>False</code> in a boolean context.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>c</code> is a set then you can check whether it's empty by doing: <code>return not c</code>.</p>
<p>If <code>c</code> is empty then <code>not c</code> will be <code>True</code>.</p>
<p>Otherwise, if <code>c</code> contains any elements <code>not c</code> will be <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you say:</p>
<pre><code>c is not None
</code></pre>
<p>You are actually checking if c and None reference the same object. That is what the "is" operator does. In python None is a special null value conventionally meaning you don't have a value available. Sorta like null in c or java. Since python internally only assigns one None value using the "is" operator to check if something is None (think null) works, and it has become the popular style. However this does not have to do with the truth value of the set c, it is checking that c actually is a set rather than a null value.</p>
<p>If you want to check if a set is empty in a conditional statement, it is cast as a boolean in context so you can just say:</p>
<pre><code>c = set()
if c:
   print "it has stuff in it"
else:
   print "it is empty"
</code></pre>
<p>But if you want it converted to a boolean to be stored away you can simply say:</p>
<pre><code>c = set()
c_has_stuff_in_it = bool(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not as clean as bool(c) but it was an excuse to use ternary.</p>
<pre><code>def myfunc(a,b):
    return True if a.intersection(b) else False
</code></pre>
<p>Also using a bit of the same logic there is no need to assign to c unless you are using it for something else.</p>
<pre><code>def myfunc(a,b):
    return bool(a.intersection(b))
</code></pre>
<p>Finally, I would assume you want a True / False value because you are going to perform some sort of boolean test with it. I would recommend skipping the overhead of a function call and definition by simply testing where you need it.</p>
<p>Instead of:</p>
<pre><code>if (myfunc(a,b)):
    # Do something
</code></pre>
<p>Maybe this:</p>
<pre><code>if a.intersection(b):
    # Do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>"""
This function check if set is empty or not.
&gt;&gt;&gt; c = set([])
&gt;&gt;&gt; set_is_empty(c)
True

:param some_set: set to check if he empty or not.
:return True if empty, False otherwise.
"""
def set_is_empty(some_set):
    return some_set == set()
</code></pre>
</div>
<span class="comment-copy">empty set is considered to be boolean False equivalent if you cast it so: <code>bool(set([]))</code></span>
<span class="comment-copy">by the way, seriously well worked out question, which is remarkable.</span>
<span class="comment-copy">@JonasWielicki Thanks! Appreciate the answer - knew it was something along those lines.</span>
<span class="comment-copy">This question is going to turn 5 years and nobody suggested using <a href="https://docs.python.org/2.7/library/stdtypes.html#frozenset.isdisjoint" rel="nofollow noreferrer"><code>isdisjoint</code></a>. I'm completely shocked.</span>
<span class="comment-copy">I think this is actually better. It makes it clearer what your intent is.</span>
<span class="comment-copy">Definitely a good suggestion - might make it more readable in the future will definitely consider it.</span>
<span class="comment-copy">I'm afraid this will have to compute <code>len(c)</code> even if <code>c</code> is very large, which is unnecessary in order to check for emptiness.</span>
<span class="comment-copy">^ +1 @C.B. i did some tests on len(c) and it definitely is some variable representing len because there was negligible runtime difference when set size changed dramatic orders of magnitude.</span>
<span class="comment-copy">@dster77 i profiled my code with both versions and it was significantly faster when comparing with <code>set()</code> (python 3.5.2 in windows)</span>
<span class="comment-copy">Actually, relying on Python's interpretation is very acceptable practice. As long as its limitations kept in mind.</span>
<span class="comment-copy">This is very similar to this answer: <a href="https://stackoverflow.com/a/21191323/7851470">stackoverflow.com/a/21191323/7851470</a></span>
<span class="comment-copy">But it is much more readable and understandable.</span>
