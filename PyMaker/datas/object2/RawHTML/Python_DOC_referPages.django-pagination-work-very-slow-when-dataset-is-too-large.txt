<div class="post-text" itemprop="text">
<p>Django Pagination is very slow when dataset is very large(&gt;100k)
my dataset is 80 columns and more than 100k rows.
when i load the page or change the page it takes 14-15 second
Is there anything that i can do to make it fast<br/>
what can i do to make it fast. please help with this</p>
<blockquote>
<p>model.py</p>
</blockquote>
<pre><code>class Finaltest3(models.Model):
a = models.DateTimeField(db_column='Dat',primary_key=True, blank=True, null=False)  # Field name made lowercase.
b = models.TextField(db_column='C', blank=True, null=True)  # Field name made lowercase.
c = models.TextField(db_column='S', blank=True, null=True)  # Field name made lowercase.
d = models.TextField(db_column='Ca', blank=True, null=True)  # Field name made lowercase.
e = models.TextField(db_column='Ac', blank=True, null=True)  # Field name made lowercase.
f = models.TextField(db_column='Re', blank=True, null=True)  # Field name made lowercase.
 .
 .
 .
 .
 .
fd = models.TextField(db_column='Add', blank=True, null=True)  # Field name made lowercase.
fd= models.TextField(db_column='Addit', blank=True, null=True)  # Field name made lowercase.
fd = models.TextField(db_column='Additional', blank=True, null=True)  # Field name made lowercase.

class Meta:
    managed = False
    db_table = 'finaltest3'
</code></pre>
<blockquote>
<p>view.py</p>
</blockquote>
<pre><code>from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import datetime
from datetime import date
from datetime import timedelta
from django.http import HttpResponseRedirect
from django.shortcuts import render
def displayLogs(request):
  today = date.today() 
  lastweek=today - timedelta(days=7)
  print('lastweek',lastweek)    
  user_list = Finaltest3.objects.filter(dat__gt=lastweek)
  paginator = Paginator(user_list, 10)
  page = request.GET.get('page')
  users = paginator.get_page(page)
return render(request,'displayLogs.html',{'users':users})
</code></pre>
<blockquote>
<p>template.html</p>
</blockquote>
<pre><code>&lt;div class="pagination" style="border-style:inset;border-width:5px;padding-bottom: 5px"&gt;
{% if users.has_previous %}

&lt;a class="pagination-action" href="?page=1"&gt; &lt;i class="fas fa-angle-double-left"&gt;&lt;/i&gt;&lt;/a&gt;

&lt;a class="pagination-action" href="?page={{ users.previous_page_number}}"&gt; &lt;i class="fas fa-angle-left"&gt;&lt;/i&gt;&lt;/a&gt;

{% endif %}

{% for num in users.paginator.page_range %}
    {% if users.number == num %}

        &lt;span class="pagination-number pagination-current"&gt;&lt;strong&gt;{{ num }}&lt;/strong&gt;&lt;/span&gt;

    {% elif num &gt; users.number|add:'-3' and num &lt; users.number|add:'3' %}

    &lt;a class="pagination-number" href="?page={{ num }}"&gt;{{num}}&lt;/a&gt;

    {% endif %}

{% endfor %}

{% if users.has_next %}

&lt;a class="pagination-action" href="?page={{ users.next_page_number }}"&gt;&lt;i class="fas fa-angle-right"&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a class="pagination-action" href="?page={{ users.paginator.num_pages }}"&gt; &lt;i class="fas fa-angle-double-right"&gt; &lt;/i&gt;&lt;/a&gt;

{% endif %}

&lt;/div&gt;
&lt;tbody&gt;
                        &lt;tr class="gradeX"&gt;
                            {% for item in users %}
                                &lt;td&gt;{{item.dat}}&lt;/td&gt;
                                &lt;td&gt;{{item.act}}&lt;/td&gt;
                                &lt;td&gt;{{item.actor}}&lt;/td&gt;
                                &lt;td class="center"&gt;{{item.target}}&lt;/td&gt;
                            &lt;/tr&gt;

                        {% endfor %}
&lt;/tbody&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the slowness is due to the following:</p>
<ul>
<li>Probably no database index on the field you're filtering - the DB system you're using has to sort out all data for the <code>lastweek</code> field filtering</li>
<li>Remember that you can print the query Django is generating: <code>print(Finaltest3.objects.filter(dat__gt=lastweek).query)</code>. </li>
<li>You're fetching all columns for the data, maybe you can limit the fields to those you'll need - look at <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#only" rel="nofollow noreferrer">only and defer</a></li>
</ul>
</div>
<span class="comment-copy">The only efficient way to optimize code is to first profile it to find where the bottlenecks are (it's a well-known fact that except for a couple very obvious cases we human are very bad at guessing where bottlenecks are). Use a profiler (ie <a href="https://github.com/someshchaturvedi/customizable-django-profiler" rel="nofollow noreferrer">github.com/someshchaturvedi/customizable-django-profiler</a>), check the results, and if necessary come back for help once you get those results.</span>
<span class="comment-copy">Install and check your query with <a href="https://django-debug-toolbar.readthedocs.io/en/latest/" rel="nofollow noreferrer">django-debug-toolbar.readthedocs.io/en/latest</a>. Also please reference to the system on which this is running. Maybe the system need more RAM or something else.</span>
<span class="comment-copy">Basically it is quite comman. I think 2 ways to optimize it. <code>1</code>, get a batter database (2 core cpu =&gt; 16 core cpu, 8 gb mem =&gt; 64 gb mem). <code>2</code>, get your query to optimize it (how many join, which column to order by)</span>
