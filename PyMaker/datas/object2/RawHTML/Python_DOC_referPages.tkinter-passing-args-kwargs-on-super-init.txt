<div class="post-text" itemprop="text">
<p>I would ask why this code work</p>
<pre><code>import tkinter as tk

class App(tk.Tk):

    def __init__(self, *args, **kwargs):            
        super().__init__()    
        print(args,kwargs)            
        self.title("Hello World")
        self.geometry("400x300")

if __name__ == '__main__':

    args = ('Y','Y','Z')
    kwargs = {'server':"127.0.0.1",'user':"guest",'passw':"12345",'database':"genbank"}    
    app = App(*args,**kwargs)
</code></pre>
<p>but if i substitute </p>
<pre><code>super().__init__()
</code></pre>
<p>with </p>
<pre><code>super().__init__(*args, **kwargs)
</code></pre>
<p>that should be the right way, it doesn't work.</p>
<p>it returns</p>
<pre><code>super().__init__(*args, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'passw'
</code></pre>
<p>any suggestions?</p>
<p>regards</p>
<p><strong>update</strong></p>
<p>after @Bryan Oakley note, I would want to add some considerations.</p>
<p>0) I' ve understood that kwargs accepts only key default that are:</p>
<p>class tkinter.Tk(screenName=None, baseName=None, className='Tk', useTk=1)</p>
<pre><code>import tkinter as tk

class App(tk.Tk):
    def __init__(self, *args, **kwargs):

        print("my __init__  args {}".format(args))
        print("my __init__  kwargs {}".format(kwargs))

        try:
            super().__init__(*args, **kwargs)
        except:
            args = ()
            super().__init__(*args, **kwargs)

        print("my super args {}".format(args))
        print("my super kwargs {}".format(kwargs))

        self.title("Hello World")
        self.geometry("400x300")

if __name__ == '__main__':

    args = ('x','y','z')
    kwargs = {'baseName':'foo','className':'bar'}

    app = App(*args,**kwargs)
</code></pre>
<p>that return</p>
<blockquote>
<p>my <strong>init</strong>  args ('x', 'y', 'z')</p>
<p>my <strong>init</strong>  kwargs {'baseName': 'foo', 'className': 'bar'}</p>
<p>my super args ()</p>
<p>my super kwargs {'baseName': 'foo', 'className': 'bar'}</p>
</blockquote>
<p>1) but args?</p>
<p>on work where I've a windows os I can pass args, on linux, debian 9, it return </p>
<p>an error, for this I have put the exception, such as:</p>
<p>_tkinter.TclError: couldn't connect to display "x"</p>
<p>I'm sorry to be so dense about this but I just don't get it really yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>The version of your code with <code>super().__init__(*args, **kwargs)</code> doesn't work becaues your parent class (<code>tkinter.Tk</code>) doesn't support the arguments you're being passed.</p>
<p>It's not clear to me what you expect those arguments to do, exactly. They're not things that <code>tkinter</code> usually cares about, so there's no need to pass them on. If they're things your class does care about, you probably want to name them explicitly as arguments, rather than using <code>*args</code> and <code>**kwargs</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>super().__init__()</code> initializes the superclass of <code>App,</code>which is <code>tk.Tk</code>. When you call <code>App(*args,**kwargs)</code>, you pass the named parameters <code>kwargs</code> to <code>tk.Tk()</code> via <code>super().__init__(*args, **kwargs)</code>. At least one of the parameters (<code>'passw'</code>) is not recognized by <code>tk.Tk()</code>. Actually, none of them is recognized, but the first unrecognized causes the program to crash.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider this code:</p>
<pre><code>kwargs = {'server':"127.0.0.1",'user':"guest",'passw':"12345",'database':"genbank"}    
app = App(*args,**kwargs)
</code></pre>
<p>It is functionally identical to this:</p>
<pre><code>app = App(server="127.0.0.1", user="guest", passw="12345", database="genbank")
</code></pre>
<p>Now consider this line of code:</p>
<pre><code>super().__init__(*args, **kwargs)
</code></pre>
<p><code>super()</code> returns the base class, in this case <code>Tk</code>. Therefore, your code is functionally equivalent to this:</p>
<pre><code>Tk(server="127.0.0.1", user="guest", passw="12345", database="genbank")
</code></pre>
<p>Since <code>server</code>, <code>user</code>, <code>passw</code>, and <code>database</code> are not supported by the <code>Tk</code> class, it throws an error.</p>
<p>The solution is to make sure you only pass options valid to the superclass when calling <code>super().__init__</code>. It's perfectly fine for <em>your</em> class to accept these options and do whatever it wants with them, but you should not be passing these arguments to the superclass.</p>
</div>
<span class="comment-copy">I would pass  arbitrary number of arguments  keyword arguments such as my personal class to manage my projects. Here an example where I use this technique, <a href="https://github.com/1966bc/Biovarase" rel="nofollow noreferrer">github.com/1966bc/Biovarase</a></span>
<span class="comment-copy">@1966bc: You can define and use them in your subclass` <code>__init__()</code>, but you don't need to pass them on to <code>super().__init__()</code>.</span>
<span class="comment-copy">Then It is totally pointless this syntax. I will do, and actually I do, what you have said. I've read this in "Python Gui Programming with Tkinter" a book of Alan Moore.</span>
<span class="comment-copy">thanks for your replay, then I should use super().__init__() to pass an arbitrary number of arguments and/or keyword arguments, i mean it's correct.</span>
