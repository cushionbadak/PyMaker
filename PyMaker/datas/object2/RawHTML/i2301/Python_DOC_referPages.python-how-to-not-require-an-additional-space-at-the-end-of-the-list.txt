<div class="post-text" itemprop="text">
<p>I've written a program which can compress a sequence of characters.</p>
<pre><code>def compress(string):
    output = ""
    counter = 1
    firstLoop = True

    for element in range(0, len(string)):
        # if statement checking if current character was last character
        if string[element] == string[element - 1]:
            # if it was, then the character has been written more than one
            # time in a row, so increase counter
            counter = counter + 1
        else:
            # when we detect a new character reset the counter
            # and also record the character and how many times it was repeated
            if not firstLoop:
                output = output + string[element - 1] + str(counter)
        counter = 1

        firstLoop = False
    return output

data = "aaaabbbchhtttttttf"
print(data)

compressedData = compress(data)
print(compressedData)
</code></pre>
<p>The program outputs:</p>
<pre><code>aaaabbbchhtttttttf
a4b3c1h2t7
</code></pre>
<p>So, it finds that there's '4' entries of 'a' so it writes 'a4', then 'b3' for three entries of b.</p>
<p>The issue is that it forgets about the 'f1' at the end of the string. I know this  is because of the line:</p>
<pre><code>output = output + string[element - 1] + str(counter)
</code></pre>
<p>Since string[element-1] refers to the position in the string before the current element, thus, it will never reach the final position which is where 'f' is. The program doesn't work without the '-1' since it doesn't write the correct letter.</p>
<p>How can I get around this problem and make it able to include f?</p>
<p>The correct output should be a4b3c1h2t7f1.</p>
<p>Thanks :)</p>
<p>Edit: I forgot to mention that the program works if I include an additional character after the 'f', such as just a blank space. But that's of course because the final character in my string is just a space rather than a letter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this all with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> and avoid all counting and keeping track of indexes:</p>
<pre><code>from itertools import groupby

def compress(string):
    return ''.join(k + str(sum(1 for _ in g)) for k, g in groupby(string))

&gt;&gt;&gt; compress("aaaabbbchhtttttttf")
'a4b3c1h2t7f1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make it simpler and add a character at the end:</p>
<pre><code>def compress(string):
    output = ""
    counter = 0
    string = string + '|'
    for element in range(0, len(string)):
        # if statement checking if current character was last character
        if string[element] == string[element - 1]:
            # if it was, then the character has been written more than one
            # time in a row, so increase counter
            counter = counter + 1
        elif element != len(string):
            output = output + string[element - 1] + str(counter)
            counter = 1
    return output[2:]

data = "aaaabbbchhtttttttf"
print(data)

compressedData = compress(data)
print(compressedData)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def compress(string):
output = ""
counter = 1

for element in range(1, len(string)):
    # if statement checking if current character was last character
    if string[element] == string[element - 1]:
        # if it was, then the character has been written more than one
        # time in a row, so increase counter
        counter = counter + 1
    else:
        # when we detect a new character reset the counter
        # and also record the character and how many times it was repeated
        output = output + string[element - 1] + str(counter)
        counter = 1

return output + string[-1] + str(counter)
</code></pre>
<p>Also note that you need to start counting form <code>1</code> not <code>0</code> and get rid of <code>firstLoop</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Try changing the loop to <code>for element in range(0, len(string) + 1)</code> and adding an extra if condition:</p>
<pre><code>for element in range(0, len(string) + 1):
    if element == len(string):
        output = output + string[element-1] + str(counter)
    # if statement checking if current character was last character
    elif string[element] == string[element - 1]: ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the spirit of fixing your code you just needed to simply add the element first to output before adding the counter on change. You can use a neat treat called <code>else</code> with for loops that will run at the end, which will add the final counter to <code>f</code>. No need to buffer or import anything special, you were fairly close:</p>
<pre><code>def compress(string):
    output = ""
    counter = 0
    firstLoop = True

    for i in range(len(string)):
        # if statement checking if current character was last character
        if firstLoop:
            counter += 1
            output += string[i]
        else:
            if string[i] == string[i - 1]:
                counter += 1
            else:                
                output += str(counter) + string[i]
                counter = 1
        firstLoop = False      
    else:
        output += str(counter)
    return output

data = "aaaabbbchhtttttttf"
print(data)

compressedData = compress(data)
print(compressedData)
</code></pre>
</div>
<span class="comment-copy">return output + string[-1] + str(counter). Also your counter = 1 should be inside the else</span>
<span class="comment-copy">Thank you!! That works. And yeah it was inside the else, it didn't copy and paste properly @juvian</span>
<span class="comment-copy">Running speed tests, this is slightly faster than the itertools solution, though I would argue the itertools solution is a really great pythonic way of doing it.</span>
<span class="comment-copy">Yeah, this was my previous solution, thanks for the help</span>
