<div class="post-text" itemprop="text">
<p>I'm trying to test my Database class. Here is simplified example of it.</p>
<pre><code>class Database:
""" it has more methods but I show only the most important """
    def __init__(self, name):
        # let's think the db-file exists with tables
        self.conn = sqlite3.connect(name)
        self.cursor = self.conn.cursor()

    def __del__(self):
    """ Here I close connection if the object was destroyed """
        self.conn.close()

    def insert(self, col1, col2, col3):
    """ The key method where problem is """
        self.cursor.execute(insert_query.format(col1, col2, col3))
        self.conn.commit()  # here I do commit to apply changes with DB
</code></pre>
<p>So, I want to check <code>insert</code> method. The test case class is:</p>
<pre><code>class DatabaseTestCase(unittest.TestCase):
""" it has other methods but the problem is here """
    @given(col1=text(col1_params), col2=text(col2_params), col3=text(col3_params))
    def test_db_insert(self, col1, col2, col3):
        db = Database("test.db")
        input_data = col1, col2, col3

        # insert with commit (see Database example above)
        db.insert(*input_data)

        # delete object and close connection
        del db

        # recreate the object to get sure my data was added and 
        # the changes were commited
        db = Database("test.db")

        # I use the way not to use my own methods of Database object
        cursor = db.conn.execute("SELECT * FROM mytable WHERE col1 = '{}'".format(col1))
        result = cursor.fetchone()

        for input_item, row_item in zip(input_data, result):
            pass  # assert here

        # close connection with deleting of the db object
        del db
</code></pre>
<p>The problem is "database is locked" in traceback when <code>db.insert</code> is called from test method. I see the code as next steps:</p>
<ol>
<li>open 1st connection</li>
<li>insert data</li>
<li>commit and close connection</li>
<li>open 2nd connection (after first was closed)</li>
<li>get data inserted on step 2 using select</li>
<li>compare data</li>
<li>assert if input and selected data are not equalled.</li>
</ol>
<p>But... I have not to get the message about database blocking if the connections work with database one by one, have I? I had a idea the libs (unittest or hypothesis) use threading but I found nothing in the documentation.</p>
<p>Also I tried to run it in usual <code>for</code> and insert enumerable data. It works fine. </p>
<p>If I am not wrong every call of <code>commit</code> method must unblock the database even the connection is opened, but it's seems it is not happened.</p>
<p>Could anyone help me to understand why I see the "database is locked" message? </p>
</div>
<div class="post-text" itemprop="text">
<p>My suspicion is that your database connection isn't actually being closed. You shouldn't be using the same database file between test runs anyway - it's important that Hypothesis tests be repeatable - so the easiest thing to do would be to create a temporary file in your tests and use that instead of a fixed <code>test.db</code> and see if the problem goes away.</p>
<p>More generally, I think relying on things being closed in <code>del</code> tends to be a source of weird bugs and I would encourage the use of an explicit <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">context manager</a> or similar.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>db</code> object doesn't actually run <code>__del__</code> until it is garbage-collected, which you should not rely on happening at any particular time.  As @DRMacIver suggested, it would be better to use a context manager for this.</p>
<p>You can check that this is the real problem by adding <code>import gc; gc.collect()</code> on the line after <code>del db</code>.</p>
</div>
<span class="comment-copy">One suggestion to use <code>setUp</code> and <code>tearDown</code> to setup and close db for every tests, the lock might be done in other tests, did not get closed properly.</span>
<span class="comment-copy">I use the name <code>test.db</code> only for <code>insert</code> method where I can put fake data. For other methods I use database with actual data. So, the open/close operations of  "test.db" are executed right here.</span>
<span class="comment-copy">@DRMaclver, <code>an explicit context manager or similar</code>... what do you mean here?</span>
<span class="comment-copy">@Bogdan: you should read about <code>with</code> statement and context management in <b>Python</b></span>
