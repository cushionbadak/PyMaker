<div class="post-text" itemprop="text">
<p>First of all here is my directory structure: </p>
<pre><code>Root
   - models 
        car.py 
        __init__.py 
   hello.py 
</code></pre>
<p>Inside <code>__init__.py</code> I have the following: </p>
<pre><code>__all__ = ["car"]
</code></pre>
<p>Inside <code>hello.py</code> I try to import everything from models folder: </p>
<pre><code>from models import *

car = Car()
</code></pre>
<p>This gives me the error: </p>
<pre><code>Traceback (most recent call last):
  File "hello.py", line 4, in &lt;module&gt;
    car = Car()
NameError: name 'Car' is not defined
</code></pre>
<p>What am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>You will have to specify what class you would like to import into the attribute <code>__all__</code> of your <code>__init__.py</code> file. See below the example:</p>
<pre><code>from car import *
__all__ = ["Car"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to have the class <code>Car</code> directly accessible in <code>hello.py</code> after you do <code>from models import *</code>, in the <code>__init__.py</code> file, put <code>from models.car import Car</code>.</p>
<p><code>__all__</code>, on the other hand, <em>typically</em> lists names of <em>modules</em>, like what you have above. You could change <code>hello.py</code> to be as follows and your current <code>__init__.py</code> that consists of <code>__all__ = ["car"]</code> will work:</p>
<pre><code>from models import *
car_obj = car.Car() # Reference module.class instead of just the class
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the python <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>if a packageâ€™s <code>__init__.py</code> code defines a list named <code>__all__</code>, it is taken to be the list of module names that should be imported when <code>from package import *</code> is encountered.</p>
</blockquote>
<p>This means that your <code>hello.py</code> has just imported the <code>car</code> module into it's namespace, <em>not</em> the <code>Car</code> class. Therefore this would work.</p>
<pre><code>from models import *
auto = car.Car()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You missed one step there.</p>
<p>Try:</p>
<pre><code>from models import *

car = car.Car()
</code></pre>
<p>Or try:</p>
<pre><code>from models.car import *

car = Car()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__all__</code> just controls what will be exported by using <code>*</code> in current scope.</p>
<p>In your case, <code>Car</code> is not in your <code>__init__.py</code>'s scope. So it is meaningless.</p>
<p>To solve this problem, you need to import <code>Car</code> into <code>__init__.py</code>'s scope, that's all.</p>
<p>I understand that you think just by using <code>__all__</code>, you can directly access the class in <code>car.py</code>, but that's not true. <code>__all__</code> does nothing else but <strong>control exports in current scope</strong>.</p>
</div>
<span class="comment-copy">FWIW I would generally recommend to avoid ever importing <code>*</code>. It's never necessary, and <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">"explicit is better than implicit"</a>. This is the advice that <a href="https://www.python.org/dev/peps/pep-0008/?#imports" rel="nofollow noreferrer">PEP 8</a> gives as well: "Wildcard imports (<code>from &lt;module&gt; import *</code>) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools."</span>
<span class="comment-copy">Now I get the following: from models import * AttributeError: module 'models' has no attribute 'Car'</span>
<span class="comment-copy">Where do these lines go? I already have <b>all</b> = ["Car"] inside <b>init</b>.py file.</span>
<span class="comment-copy">@johndoe : That is the content of your <code>__init__.py</code> file, and don't forget, it is <code>Car</code> not <code>car</code> like in your example.</span>
