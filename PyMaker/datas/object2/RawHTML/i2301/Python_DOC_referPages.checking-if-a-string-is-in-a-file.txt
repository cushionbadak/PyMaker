<div class="post-text" itemprop="text">
<p>I am making a program that checks to see if any of the user's input is in the file.  If the user input is not currently in the file, then we will append that input into the used_passwords file and ask the user to type something else again.  else if they retype the input we just recently added(or any of the presets) then we want to tell them that they can't reuse a password.</p>
<p>The problem I am having with this code is that whenever I type a letter that is from the word in the used_passwords file or if I type a part of the word in the file then the program tells me that I can't reuse a password.</p>
<p>For example:  If I type in "abc", the program will tell me that I have already reused that password and I am assuming it is probably because the program reads the files character by character and reads the abc in abcdeF!23.</p>
<p>Although, I don't want the program to tell me I can't reuse a or multiple characters from the file.  I want the program to tell me that I can't reuse a word from the program</p>
<hr/>
<p>I am also wondering if we could put the inputs or presets into an array IN THE FILE.</p>
<pre><code>fileUsed_Pass = open("used_passwords.txt", 'a')

fileUsed_Pass.write("\nabcdeF!23")
fileUsed_Pass.write("\n\n")

fileUsed_Pass.write("zxcbhK#44")
fileUsed_Pass.write("\n\n")

fileUsed_Pass.write("poiuyT&amp;11")
fileUsed_Pass.write("\n\n")

fileUsed_Pass.close()



def password():

    string = input("Enter Here:")

    if string in open('used_passwords.txt').read():
        print("You can not reuse that password!\n")
        password()
    else:
        # file-append.py
        f = open('used_passwords.txt','a')
        f.write('\n'+string)
        f.close()
        password()
password()
</code></pre>
<hr/>
<p><strong>UPDATE</strong>: I have gotten the code to work using the with statement.</p>
<p>rather than using an If and else statement, I had used a with statement.  </p>
<p>Here what I am doing is checking for every single line to see if it has any text that matches my input string.  If there are none, then we'll make some_variable equal True.  If it doesn't, then we'll make it equal false. </p>
<pre><code>with open("used_passwords.txt", 'r') as tFile:
    for line in tFile:
      if string != line and string+"\n" != line:
        some_variable = True
      else:  #If it equals anything else from the file, then false
        some_variable = False
        break


  #print(some_variable)
  #this was added for me/the user to make sure that the with statement was working
</code></pre>
<p>Afterwards, if it does equal True: we'll add it to the file.  If it doesn't we'll make the user input another password that does not match any of the ones insie of the file.</p>
<pre><code>  tFile = open("used_passwords.txt", 'a')
  if some_variable == True:
    tFile.write("\n" + string)
    print("\nGOOD! Password does not match old ones!")

  elif some_variable == False:
    print("\nYou can not re-use a password!")
    password()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Working directly with text files is probably not the greatest solution;
you should consider using some form of database instead (such as the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">sqlite3 library</a> which, IIRC, comes preinstalled with Python3).</p>
<p>Also, keep in mind that storing passwords as clear text is a security "no-no".
At the very least, use one of the many available <a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function" rel="nofollow noreferrer">cryptographic hash functions</a>, then store and compare the <em>hashes</em>, not the passwords.</p>
<p>Here's a basic example that uses both sqlite3 and <a href="https://en.wikipedia.org/wiki/SHA-2" rel="nofollow noreferrer">SHA-256</a>, a common hashing function:</p>
<pre><code>#!/usr/bin/python3

import sqlite3
import hashlib

db  = sqlite3.connect( "used_passwords.db" )
cur = db.cursor()
cur.execute( "CREATE TABLE IF NOT EXISTS passwords( pwd TEXT, UNIQUE( pwd ))" )

def password():
   pwd = input( "password: " )
   sha = hashlib.sha256( pwd.encode( 'utf-8' )).hexdigest()
   cur.execute( "INSERT INTO passwords VALUES( ? )", ( sha, ))

while True:
   try:
      password()
      break
   except KeyboardInterrupt:
      print( "aborted" )
      break
   except sqlite3.IntegrityError:
      print( "cannot reuse that password" )

db.commit()
db.close()
</code></pre>
<p>Note the <code>UNIQUE</code> constraint on <code>pwd</code>, which ensures that an <code>sqlite3.IntegrityError</code> exception is raised whenever a password is already present in <code>passwords</code> (this makes the verification implicit, and minimizes the SQL cumbersomeness).</p>
<p>Usage example:</p>
<pre><code>% ./pwd.py 
password: foo
% ./pwd.py 
password: foo
cannot reuse that password
password: bar
%
</code></pre>
<p>You can verify that no clear-text password appears in the database:</p>
<pre><code>% sqlite3 ./used_passwords.db 
SQLite version 3.16.2 2017-01-06 16:32:41
Enter ".help" for usage hints.
sqlite&gt; select * from passwords;
2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae  ; &lt;- this is "foo"
fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9  ; &lt;- this is "bar"
sqlite&gt; 
</code></pre>
<p>Of course you can expand on that and add more features, such as support for multiple users, password expiration, etc...</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering that you are adding a \n after each password you enter in the file, you can try to append \n to the <code>string</code> variable and then search after that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using .read(), which reads the entire file as one string.</p>
<pre class="lang-python prettyprint-override"><code>word = 'abc'

for line in open('file.txt').readlines():
    if word in line:
        return True
</code></pre>
<p>Use .readlines() instead and loop through every line to check if the string is in any of the file lines.</p>
</div>
<span class="comment-copy">Sorry for replying so late!  Had things to do.. Aside from that, not what I wanted but this does work for a database assignment I am currently doing :)  This answer already answers a question i haven't even asked on stack overflow yet.  Thanks for the information about why I should use a database. (I was using files for an assignment and now am doing a database assignment) I'll keep what you said in mind for the future.</span>
<span class="comment-copy">Though I do have one more question, what does/is the KeyboardInterrupt for/do?</span>
<span class="comment-copy">Glad to see this answer ended up being useful for you. The <code>KeyboardInterrupt</code> bit gives Python a chance to commit/close the database cleanly whenever you stop the program with <code>Ctrl+C</code> (in that case, by breaking from the main loop).</span>
<span class="comment-copy">I don't think this is any different than his solution -- if a line in the file is <code>abc123</code>, a search on <code>abc</code> will return True, which he doesn't want.</span>
<span class="comment-copy">Sorry for the late reply but yea, It keeps returning me true when I search on abc. I need it to return false showing that it doesn't match abc123 as a whole word.</span>
