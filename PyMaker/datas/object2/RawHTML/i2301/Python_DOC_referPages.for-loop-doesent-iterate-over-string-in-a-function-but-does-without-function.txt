<div class="post-text" itemprop="text">
<p>my code:</p>
<pre><code>def word_distribution(stringeling):
    for char in "?!.,":
        Satz = stringeling.replace(char,"")
    return Satz

print(word_distribution("Hallo du Peter? Du! und punkt. und komma,"))

output: Hallo du Peter Du! und punkt. und komma
</code></pre>
<p>The code does only remove the first "?"  Why when i use the for loop without the function it prints me all the word without punctuation. Thanks for help ;) </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try the following : </p>
<pre><code>def word_distribution(stringeling):
    for char in "?!.,":
        stringeling = stringeling.replace(char,"")
    return stringeling.lower()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you overwrite Satz every time in the loop with the original stringeling. Try:</p>
<pre><code>def word_distribution(stringeling):
    for char in "?!.,":
        stringeling = stringeling.replace(char,"")
    return stringeling


print(word_distribution("Hallo du Peter? Du! und punkt. und komma,"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IMHO you don't really need a for loop. Since replace does a fixed replacement hence, I used sub from re module to do search and replace using regex. Below is the code</p>
<pre><code>        import re
        def word_distribution(stringeling):
            Satz = re.sub('[?,.!]',"",stringeling,count=0,flags=0)
            return Satz
</code></pre>
<p>Output as follows</p>
<pre><code>&gt;&gt;&gt; print(word_distribution("Hallo du Peter? Du! und punkt. und komma,"))
Hallo du Peter Du und punkt und komma
</code></pre>
<p>Refer - <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">Read documentation on re.sub here</a></p>
</div>
<span class="comment-copy">Alright, we need a canonical question for people who assign to the wrong variable in a loop. I swear I've seen a dozen questions like this one recently.</span>
<span class="comment-copy">I don't think it will remove the question mark, but only the final comma. Strings in python are immutable, each operation on the string will return a new string.</span>
<span class="comment-copy">Works great know thanks! @Aran-Fey sorry i found similair questions in the search but they all forgett the return statement ;)</span>
