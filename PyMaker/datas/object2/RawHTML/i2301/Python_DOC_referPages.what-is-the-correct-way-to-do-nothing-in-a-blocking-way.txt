<div class="post-text" itemprop="text">
<p>There are cases where I need, at the end of my program, to do nothing and not exit the program. This is typically the case where I have never-ending threads (which I control or not).</p>
<p>There are several solutions I use:</p>
<pre><code>time.sleep(1000000)
</code></pre>
<ul>
<li>Pro: simple one-liner </li>
<li>Con: 1000000 seconds is 11 days, one must estimate how long the script will run, and eventually fail in the estimate</li>
</ul>
<pre><code>for thread in threading.enumerate():
    try:
        thread.join()
    except RuntimeError:
        # trying to join the main thread
        pass
</code></pre>
<ul>
<li>Pro: seems clean</li>
<li>Con: only for cases where I control the threads</li>
</ul>
<pre><code>while True:
    pass
</code></pre>
<ul>
<li>Pro: I do not know because ...</li>
<li>Con: uselessly CPU intensive</li>
</ul>
<p><strong>Is there a Pythonically correct way to "do nothing in a blocking way"?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>A good way would be to wait for an input. This would be simple as well as give control to you as to when you want to continue or exit the program.</p>
<pre><code>sys.stdin.readline()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep it simple:</p>
<pre><code>while True:
    time.sleep(1000000)
</code></pre>
<p>This fixes the problem that <code>sleep()</code> could be interrupted, as well as handling the possibility that the program runs for many weeks.</p>
<p>It's portable, obvious, and environmentally friendly!</p>
</div>
<span class="comment-copy">What's keeping you from <code>sleep</code>ing in a loop? That method is commonly used by the standard library as well.</span>
<span class="comment-copy">Can you clarify your goal? Is there some conditions you are waiting for? You state that you have some never-ending threads, yet waiting very long or indefinitely is wrong for some reason? Why are you waiting for the threads in the first place, are they <code>daemon</code> threads that for some reason should not be?</span>
<span class="comment-copy">@MisterMiyagi: I am not sure how to phrase it differently. At the end of my program I just need to wait (indefinitely), idle. The actual code is ran in threads (which I directly control or not) and I just need to make sure I do not exit. Sleeping in a loop is a good idea (I suggested a loop, and a sleep, but for some reason failed to see the obvious solutions - sleeping in a loop)</span>
<span class="comment-copy">Python will automatically wait for threads to finish, unless they all explicitly disable this (by being <code>daemon</code> threads).</span>
<span class="comment-copy">@MisterMiyagi: this is interesting, thank you. I was always using <code>.join()</code> (<a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow noreferrer">docs.python.org/3/library/threading.html#threading.Thread.join</a>) to wait for the threads, but now that I think of it it does not make much sense - as you say the main program(thread) will wait for the children to end before exiting (and if they do not end, it does not end either). One learns everyday :) Thanks.</span>
