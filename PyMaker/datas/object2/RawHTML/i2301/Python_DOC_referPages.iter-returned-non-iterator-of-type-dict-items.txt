<div class="post-text" itemprop="text">
<p>This is driving me insane.  Below is a <code>class</code> I was messing around with, the goal was to have a way to support dynamic attribute assignment.  <em>Please forget for a moment the poor implementation or why I didn't just use a dictionary</em>, I know there are other ways to do this (such as <code>Enum</code>) but this was my test code before and now it became my quest to find out why it's not working.</p>
<pre><code>class Family(object):
    def children(self):
        return self.__dict__.values()

    def __setitem__(self, key, value):
        self.__dict__[key] = value

    def __getitem__(self, item):
        return self.__dict__[item]

    def __repr__(self):
        return str(self.__dict__)

    def __iter__(self):
        return self.__dict__.items()
</code></pre>
<p>This all seems fine, and I initiated a test object as follows:</p>
<pre><code>foo = Family()
foo.a = 'foo'
foo.b = 'bar'

[i for i in foo]
</code></pre>
<p>Now the expected outcome was <code>[('a', 'foo'), ('b', 'bar')]</code>, but what I got was this instead:</p>
<blockquote>
<p><code>TypeError: iter() returned non-iterator of type 'dict_items'</code></p>
</blockquote>
<p>I thought I might have messed up the <code>__iter__</code> method, so I checked as follow:</p>
<pre><code>type(foo.__iter__())
# &lt;class 'dict_items'&gt;
type(foo.__dict__.items())
# &lt;class 'dict_items'&gt;

[i for i in foo.__dict.__items()]
# [('a', 'foo'), ('b', 'bar')]

foo.__dict__.items() == foo.__iter__()
# True
</code></pre>
<p>If they're both identical, why doesn't <code>[i for i in foo]</code> work?</p>
</div>
<div class="post-text" itemprop="text">
<p>What about this:</p>
<pre><code>def __iter__(self):
    return iter(self.__dict__.items())
</code></pre>
<p>Python wants an <code>iterator</code>, not a <code>list</code> (or other list-like/dict-like object)</p>
<p>Remember: a <code>list</code> or <code>dict</code> is not an <code>iterator</code>, an <code>iterator</code> is usually (for easy-understanding) a pointer (cursor) pointing to an item of the <code>list</code> or <code>dict</code>.</p>
</div>
<span class="comment-copy">BTW, for completeness, you should also define a <a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" rel="nofollow noreferrer"><code>__delitem__</code></a> method.</span>
<span class="comment-copy">FWIW, in Python 3, <code>dict.items()</code> returns a <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">view object</a>, not a list.</span>
<span class="comment-copy">This worked.  I thought I had tried that but I must have missed it.  I feel dumb asking, but why would <code>[i for i in foo.__dict__.items()]</code> work then? Is it implicitly calling the <code>iter</code> on the <code>.items()</code>? I had stepped away from Python for a while so feeling a bit lacking.</span>
<span class="comment-copy">@Idlehands Correct. <code>for</code> calls <code>iter</code> on the iterable you give it.</span>
<span class="comment-copy">Thank you both.  Answer accepted and mystery solved.</span>
