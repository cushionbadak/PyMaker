<div class="post-text" itemprop="text">
<p>I couldn't figure out how my professor got this f in the function. The program works. </p>
<p>factors.py</p>
<pre><code>from isfactor import is_factor

def factors(n):
    factor_list = [1]
    for f in range(2, n):
        if is_factor(n ,f):
            factor_list.append(f)
    factor_list.append(n)
    return factor_list
</code></pre>
<p>Second file: isfactor.py</p>
<pre><code>def is_factor(n, possible_factor):
    if n% possible_factor == 0:
        return True
    else:
        return False
</code></pre>
<p>Third file: testfactors.py</p>
<pre><code>from factors import factors

print(factors(12))
print(factors(13))
print(factors(1000))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's say you have a list. A simple list</p>
<pre><code>var mylist = [10, 11, 12]
</code></pre>
<p>Cool. Now, I want to print each number on that list. Now, you can access a list item in python with brackets <code>[#]</code>, where <code>#</code> is an index number (starts with 0, so first item is 0, second is 1, etc.). so I can do this:</p>
<pre><code>print mylist[0] #or print(mylist[0]) for python 3.x
print mylist[1]
print mylist[2]
</code></pre>
<p>But that would be <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">tedious</a>. So we can, instead, iterate. go one by one with a <code>for</code> loop, which looks like this</p>
<pre><code>for item in mylist
    print item
</code></pre>
<p>This means that now it goes through every single item on the list, says <code>item = mylist[0]</code> and then you can do something. then it loops again, now <code>item = mylist[1]</code> etc. It's a temporary variable, and it makes things much simpler, right?</p>
<p>Now range is a built in function in python that creates a list of numbers from x to y, i.e. range(1, 10) will result in the list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>*</p>
<p>So when you see <code>for f in range(2, n)</code> you know that now starts a loop, where each time the loop passes, f will be equal to 2, then 3, then 4... up until <code>n</code>, which is a variable the function <code>factors</code> recieves.</p>
<p>Makes more sense now?</p>
<p>*p.s. it's not exactly a list. In Python 3.x it became it's own type, I'm not getting into it, but you can <a href="https://www.pythoncentral.io/pythons-range-function-explained/" rel="nofollow noreferrer">read more here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the following loop:</p>
<p>Input:</p>
<pre><code>for f in range(2, 10):
    print(f)
</code></pre>
<p>Output:</p>
<pre><code>2
3
4
5
6
7
8
9
</code></pre>
<p>When you call <code>for f in range(2, n-1):</code>, you are actually creating a variable f and setting it to 2, running the loop, then setting f to 3, running the loop, etc. until you get to n (then the iteration stops).</p>
</div>
<span class="comment-copy">What, <code>for f in range(2, n)</code>?</span>
<span class="comment-copy">Yes, for f in range(2,n)</span>
<span class="comment-copy">You should read the Python tutorial: <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#for-statements</a></span>
<span class="comment-copy">@yoonghm <code>range(2, n)</code> does not create any lists.</span>
<span class="comment-copy">@yoonghm in python 2.x it does create a list, in 3.x it got its own type. So you're both right, in a way :)</span>
<span class="comment-copy">Yes makes a lot more sense now ! Thanks a lot .</span>
<span class="comment-copy">@Odurr sure thing. Welcome to SO :) You asked a very basic question, I answered because you're new and I want you to get your answer, but next time, try searching the site before asking, because someone definitely asked something like this before. More often than not, finding the answer yourself will help you more than posting a question and receiving a specific answer</span>
<span class="comment-copy">for sure will and thanks once again.</span>
<span class="comment-copy">Sure thing :) Good luck</span>
