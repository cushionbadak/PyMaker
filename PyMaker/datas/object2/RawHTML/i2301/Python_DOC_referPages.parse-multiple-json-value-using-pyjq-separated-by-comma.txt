<div class="post-text" itemprop="text">
<p>Using pyjq i am able to parse values from json file. I need to format the output bit more so this can be exported to csv.</p>
<pre><code>import json
import csv
import pyjq

emp_data = open('example.json', 'r')
emp_data_parsed = json.loads(emp_data.read())
emp = pyjq.all ('.base[].base[].uid, .base[].base[].name', emp_data_parsed)
print emp
</code></pre>
<p>The output I am getting</p>
<pre><code>[u'2da21174-0af8-4b5b-b02e-2957a24d70e1', u'fcc5a2c8-3a78-4cc5-9fd3-e7bd59eb36ba', u'4ecf6450-7307-466c-bf19-663ba2fbaf69', None, u'Tommy', u'Sam',
</code></pre>
<p>Expecting output as below so that can be written to a csv file.</p>
<pre><code>uid,name
'2da21174-0af8-4b5b-b02e-2957a24d70e1','None'
'fcc5a2c8-3a78-4cc5-9fd3-e7bd59eb36ba','Tommy'
'4ecf6450-7307-466c-bf19-663ba2fbaf69','Sam'
</code></pre>
<p>Following is the sample.json file</p>
<pre><code>example.json
{
    "base": [
        { 
            "base": [
                {
                    "item-number": 1, 
                    "type": "access-item", 
                    "uid": "2da21174-0af8-4b5b-b02e-2957a24d70e1",  
                    "usage": { 
                        "last-date": {
                            "iso-8601": "2018-03-19T03:58-0500", 
                        }, 
                    }, 

                    "item-number": 2, 
                    "name": "Tommy",
                    "type": "access-item", 
                    "uid": "fcc5a2c8-3a78-4cc5-9fd3-e7bd59eb36ba", 

                    "item-number": 3, 
                    "name": "Sam",
                    "type": "access-item", 
                    "uid": "4ecf6450-7307-466c-bf19-663ba2fbaf69", 
                    "usage": { 
                        "last-date": {
                            "iso-8601": "2018-03-21T07:21-0500", 
                        }, 
                    },
                }
            ], 
        }
    ], 
}
</code></pre>
<p>I am not sure otherthan pyjq, there is an way of doing this. If so please let me know.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: I need to format the output bit more so this can be exported to csv.</p>
</blockquote>
<p>Can't test with <code>pyjp</code>, guess from the <a href="https://pypi.org/project/pyjq/" rel="nofollow noreferrer">Project description</a>, try:</p>
<pre><code>pyjq.all('.base[].base[] | {"uid": .uid, "item-number":.item-number}', emp_data_parsed)
</code></pre>
<hr/>
<p>Loop your JSON like this:</p>
<pre><code>for rec in emp_data_parsed['base'][0]['base']:
    print("{}".format(rec))
</code></pre>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>{'uid': '2da21174-0af8-4b5b-b02e-2957a24d70e1', 'item-number': 1}, ... (omitted for brevity)
{'uid': 'fcc5a2c8-3a78-4cc5-9fd3-e7bd59eb36ba', 'item-number': 2}, ... (omitted for brevity)
{'uid': '4ecf6450-7307-466c-bf19-663ba2fbaf69', 'item-number': 3}, ... (omitted for brevity)
</code></pre>
</blockquote>
<p>The Output is ready for <code>csv.DictWriter</code> read <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer">csv.DictWriter</a>, for example:</p>
<pre><code>import csv

with open('test.csv', 'w') as csv_file:
    fieldnames = ['uid', 'item-number']
    writer = csv.DictWriter(csv_file, fieldnames=fieldnames, extrasaction='ignore')
    writer.writeheader()

    for record in emp_data_parsed['base'][0]['base']:
        writer.writerow(record)
</code></pre>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>uid,name
2da21174-0af8-4b5b-b02e-2957a24d70e1,None
fcc5a2c8-3a78-4cc5-9fd3-e7bd59eb36ba,Tommy
4ecf6450-7307-466c-bf19-663ba2fbaf69,Sam
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Interesting, I know <a href="https://stedolan.github.io/jq/" rel="nofollow noreferrer"><code>jq</code></a>, Python wrapper for that is a good idea.</p>
<p>I use <code>jq</code> for my data processing. And also <code>grep</code>, <code>head</code> etc. :) When I need to work with CSV, I rather write a CSV-to-JSONL (or vice versa) program once and then use it as another tool in the shell pipeline.</p>
<pre><code># to_csv.py
import csv, json, sys
rows = [json.loads(line) for line in sys.stdin]
all_keys = []
for row in rows:
    for key in row.keys():
        if key not in all_keys:
            all_keys.append(key)
writer = csv.DictWriter(sys.stdout, fieldnames=all_keys, extrasaction='ignore')
writer.writeheader()
for row in rows:
    writer.writerow(row)
</code></pre>
<p>Usage (I had to fix the <code>example.json</code> a little bit):</p>
<pre><code>$ cat example.json | jq -c '.base[].base[] | { uid, name }' | python3 to_csv.py
uid,name
2da21174-0af8-4b5b-b02e-2957a24d70e1,
fcc5a2c8-3a78-4cc5-9fd3-e7bd59eb36ba,Tommy
4ecf6450-7307-466c-bf19-663ba2fbaf69,Sam
</code></pre>
</div>
<span class="comment-copy">Relevant <a href="https://stackoverflow.com/questions/52428921/convert-nested-json-to-csv-in-python-2-7">convert-nested-json-to-csv</a></span>
<span class="comment-copy">@stovfi, no this is to fetch only required values from each section and display or redirect to csv. The other post is to convert the whole json to csv.</span>
<span class="comment-copy">Absolutely perfect @stovfl. Please just minor edit <code>with open('test.csv', 'w') as csv_file</code> with <code>with open('test.csv', 'w') as csv_file:</code>. This worked like a charm. Thanks a lot.</span>
<span class="comment-copy">No i tried with <code>emp = pyjq.all('.base[].base[] | {"uid": .uid, "name": .name]}', emp_data_parsed)</code>. And it worked</span>
<span class="comment-copy">Yes within python pyjq.all ('.base[].base[].uid, .base[].base[].name') works perfectly. BTW do you know how to cut the date only from the following value <code>"iso-8601": "2018-03-19T03:24-0500"</code>from JSON?</span>
<span class="comment-copy">If in Python I would use substring :) row["iso-8601"][:10]</span>
<span class="comment-copy">Thank you very much @Messa. This works as expected.</span>
