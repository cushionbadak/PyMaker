<div class="post-text" itemprop="text">
<p>I am trying to catch an exception that is not raised, just logged. Is there any way to do this?</p>
<pre><code>def exampleFunction():
    try:
        x = 1 / 0
    except Exception:
        logging.exception('divide by 0 error here.')

try:
    exampleFunction()
except &lt;condition based on if logging.exception was called&gt;
    print('there was a divide by 0 error when I called exampleFunction()')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I assume that exampleFunction is in some horrible third party code that you do not own, otherwise there are lots of better alternatives.</p>
<p>What you can do:</p>
<pre><code>import logging # make sure this is the FIRST import of logging
import horrible_third_party_lib

def catch_log(msg):
   # do something when this is called
old_logging = logging.exception
try:
    logging.exception=catch_log
    horrible_third_party_lib.exampleFunction()
finally:
    logging.exception=old_logging
</code></pre>
<p>You can then do everything you want in the function. It's horrible and sensitive to import order, but I have used this and it works (scikit learn does something similarly repugnant..)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: I am trying to catch an exception<br/>
  The Questions Title should be rewriten to "<strong>I am trying to reraise an exception</strong>"  </p>
</blockquote>
<p>Read <a href="https://docs.python.org/3/reference/simple_stmts.html#raise" rel="nofollow noreferrer">Python Documentation#raise</a><br/>
Seems somewhat double work, but you can do it like that:</p>
<pre><code>def exampleFunction():
    try:
        x = 1 / 0
    except Exception as e:
        print("logging.exception({})".format(e))
        raise

try:
    exampleFunction()
except ZeroDivisionError as e:
    print('there was a divide by 0 error when I called exampleFunction()')
</code></pre>
<blockquote>
<p><strong>Output</strong>:  </p>
<pre><code>logging.exception(division by zero)
there was a divide by 0 error when I called exampleFunction()
</code></pre>
</blockquote>
<p><strong><em>Tested with Python:3.5.3</em></strong></p>
</div>
<span class="comment-copy">I sure hope there isn't. If you're interested in knowing whether an exception occurred, why does <code>exampleFunction</code> silently swallow that exception?</span>
<span class="comment-copy">There's probably an awful way to do this with <code>mock</code>. Let me thing...</span>
<span class="comment-copy">Basically, the <code>exampleFunction</code> just swallows the exception so it doesn't break any code that calls it by throwing a random exception (thinks the issue is minor/skippable). But in my specific case, I need to treat it as an exception</span>
<span class="comment-copy">Can or can't you modify <code>exampleFunction</code>?</span>
<span class="comment-copy">@Aran-Fey I have seen this in third party libs  who assume that this is an internal error which nobody every wants to catch - unfortunately, they guessed wrong and I needed to catch that exception.</span>
<span class="comment-copy">Is there a way to use the function <code>catch_log</code> to actually throw an Exception? Basically, I want to be able to do something where I can raise an Exception in <code>def catch_log</code> and do an <code>except Exception</code> clause in-between the try: and finally:</span>
<span class="comment-copy">Yes of course, just raise the exception you want to throw</span>
<span class="comment-copy">When I tried raising an Exception in catch_log, it didn't actually end up being caught..</span>
<span class="comment-copy">Using <code>raise</code> at the end would be enough to reraise the last exception.</span>
<span class="comment-copy">@metmirr: Please explaine, which <b>end</b>?</span>
<span class="comment-copy">I mean this: <code>except Exception as e: print('...'); raise</code></span>
