<div class="post-text" itemprop="text">
<p>I have an Authorization header in a string like this:</p>
<pre><code>Bearer [myawesometoken]
</code></pre>
<p>I don't want to tokenize using the space character because I want to require the string "Bearer" to be at the start of the string</p>
<p>What is the pythonic way to return just the token from the string?  </p>
<p>Is there a regex matching function like PHP <code>preg_match()</code>?  Would this be the pythonic way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the most Pythonic way of doing this would be to use the built-in <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>startswith</code></a> method of <code>str</code> and <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">string slicing</a>:</p>
<pre><code>PREFIX = 'Bearer '

def get_token(header):
    if not header.startswith(PREFIX):
        raise ValueError('Invalid token')
    return header[len(PREFIX):]
</code></pre>
<p>I personally however would prefer <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer"><code>str.partition</code></a> to tokenize the header into a 3-tuple:</p>
<pre><code>PREFIX = 'Bearer '

def get_token(header):
    bearer, _, token = header.partition(' ')
    if bearer != PREFIX:
        raise ValueError('Invalid token')
    return token
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let say your authorization string is </p>
<pre><code>Bearer mytoken
</code></pre>
<p>then u can extract token like this</p>
<pre><code>import re
authorization_string="Bearer mytoken"
g = re.match("^Bearer\s+(.*)", authorization_string)

if g:
    # ur token
    print(g.group(1)
else:
    print("No token")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is the string always in this format? </p>
<pre><code>header_string = 'Bearer [myawesometoken]'
token = header_string[8:-1]
</code></pre>
</div>
<span class="comment-copy">So what should happen if the string <i>doesn't</i> start with "Bearer"?</span>
<span class="comment-copy">@Aran-Fey It should respond with "no match" so that I can return a 401 error.  I only want to support Bearer tokens.</span>
<span class="comment-copy">This has a smell about it...are you <i>receiving</i> the request with this header, or are you <i>sending</i> a request with this header?</span>
<span class="comment-copy">Receiving it in Django middleware</span>
<span class="comment-copy">Thanks!  I wanted the pythonic way of doing it, this is really helpful.</span>
<span class="comment-copy">Thanks, but I only want to support Bearer tokens so it's mandatory for the string to start with that.</span>
<span class="comment-copy">Assume that I don't know what a Bearer token is, and then explain how you want your string modified. Please give example of original string and wanted output string.</span>
