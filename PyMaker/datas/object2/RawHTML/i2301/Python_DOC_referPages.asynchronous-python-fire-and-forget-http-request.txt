<div class="post-text" itemprop="text">
<p>Not sure if that's achievable. I want to fire an HTTP POST request from a script, but not wait for a response. Instead I want to return immediately.</p>
<p>I tries something along these lines:</p>
<pre><code>#!/usr/bin/env python3

import asyncio
import aiohttp

async def fire():
    await client.post('http://httpresponder.com/xyz')

async def main():
    asyncio.ensure_future(fire())

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    client = aiohttp.ClientSession(loop=loop)
    loop.run_until_complete(main())
</code></pre>
<p>The script returns immediately without errors, but the HTTP request never arrives at the destination. Can I fire the POST request, but not wait for response from the server, just terminate the moment the request is sent?</p>
</div>
<div class="post-text" itemprop="text">
<p>I <a href="https://stackoverflow.com/questions/52526506/wait-for-db-future-to-complete/52540427#52540427">have answered</a> a rather similar question.</p>
<pre><code>async def main():
    asyncio.ensure_future(fire())
</code></pre>
<p><code>ensure_future</code> <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task" rel="nofollow noreferrer">schedules coro execution</a>, but does not wait for its completion and <code>run_until_complete</code> does not wait for the completion of all futures.</p>
<p>This should fix it:</p>
<pre><code>async def main():
    await fire()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>asyncio</code> you can write a simple decorator as <code>@background</code>. Now you can write whatever inside <code>foo()</code> and the control-flow will not wait for its completion.  </p>
<pre><code>import asyncio
import time


def background(f):
    from functools import wraps
    @wraps(f)
    def wrapped(*args, **kwargs):
        loop = asyncio.get_event_loop()
        if callable(f):
            return loop.run_in_executor(None, f, *args, **kwargs)
        else:
            raise TypeError('Task must be a callable')    
    return wrapped


@background
def foo():
    time.sleep(1)
    print("foo() completed")


print("Hello")
foo()
print("I didn't wait for foo()")
</code></pre>
<p>Produces</p>
<pre><code>&gt;&gt;&gt; Hello
&gt;&gt;&gt; I didn't wait for foo()
&gt;&gt;&gt; foo() completed
</code></pre>
</div>
<span class="comment-copy">Have you tried to use the <code>requests</code> with the <code>stream</code> parameter ? This way it won't download the <a href="http://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow" rel="nofollow noreferrer">body content</a> (But still waits for the server to respond)</span>
<span class="comment-copy">Hi this does the job. However, the script sends the request as expected and then terminates immediately with the message: <code>Unclosed client session client_session: &lt;aiohttp.client.ClientSession object at 0x7fa486dc6550&gt;                                          Unclosed connector connections: ['[(&lt;aiohttp.client_proto.ResponseHandler object at 0x7fa481475828&gt;, 20136.829498141)]']            connector: &lt;aiohttp.connector.TCPConnector object at 0x7fa48527bdd8&gt; </code> The script's exit code is still <code>0</code> (no error)</span>
<span class="comment-copy">Hi! You should use session <code>async with aiohttp.ClientSession() as session: session.post(...)</code>. For details see <a href="https://aiohttp.readthedocs.io/en/stable/client_quickstart.html#make-a-request" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">the error is gone. However, I don't think that this set-up actually achieves what was the original intention (terminate script as soon as request is sent). Currently, the main script will be executing as long as the client session is open within the context guard (<code>aysnc ... with ... as ...</code>). The client session will be closed only when the response arrives (<code>await response</code>). I ended up using multiprocessing for what I needed. Of course asyncio and aiohttp are great for executing multiple network calls asynchronously, but they seem not capable of "firing and forgetting"</span>
