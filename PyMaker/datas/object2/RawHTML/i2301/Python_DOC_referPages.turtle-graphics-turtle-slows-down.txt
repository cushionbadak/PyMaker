<div class="post-text" itemprop="text">
<p>I set the turtle to fastest and when I ran the first loop alone it was fine but as I added more it became comparably to when it was just executing first loop alone. I don't know if this is just because of the complexity of the drawing but it takes a decently long amount of time to complete the shape. Is there anthing I can do to fix this?</p>
<pre><code>import turtle

turtle.bgcolor("Red")
turtle.color("Yellow", "Pink")
turtle.shape("turtle")
turtle.begin_fill()
turtle.speed("fastest")

while True:
    turtle.forward(300)
    turtle.left(179)
    turtle.circle(20)
    if abs(turtle.pos()) &lt; 1:
        break

turtle.setheading(270)



while True:
    turtle.forward(300)
    turtle.left(179)
    turtle.circle(20)
    if abs(turtle.pos()) &lt; 1:
        break

turtle.setheading(180)


while True:
    turtle.forward(300)
    turtle.left(179)
    turtle.circle(20)
    if abs(turtle.pos()) &lt; 1:
        break

turtle.setheading(90)


while True:
    turtle.forward(300)
    turtle.left(179)
    turtle.circle(20)
    if abs(turtle.pos()) &lt; 1:
        break


turtle.end_fill()



turtle.getscreen()._root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My analysis is that your filling, i.e. <code>turtle.begin_fill()</code> and <code>turtle.end_fill()</code>, is slowing down the code 3X to no real effect.  One of these images is <em>with</em> fill, one is <em>without</em>:</p>
<p><a href="https://i.stack.imgur.com/nkVHa.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/nkVHa.png"/></a></p>
<p>If you can't appreciate the difference (even at full size) then the fill is probably just a waste of time.  If you just want the final image, and don't care about watching it being drawn, then for more performance, I suggest something like:</p>
<pre><code>from turtle import Screen, Turtle

screen = Screen()
screen.bgcolor("Red")
screen.tracer(False)

turtle = Turtle(visible=False)
turtle.color("Yellow", "Pink")

for heading in range(0, 360, 90):

    turtle.setheading(heading)

    turtle.begin_fill()

    while True:
        turtle.forward(300)
        turtle.left(179)
        turtle.circle(20)
        if abs(turtle.pos()) &lt; 1:
            break

    turtle.end_fill()

screen.tracer(True)
screen.mainloop()
</code></pre>
</div>
<span class="comment-copy">What was fast and what was not fast? I can't figure it out from the question.</span>
<span class="comment-copy">Note that turtle is not a drawing library. It is an educational tool. Not meant to be fast.</span>
<span class="comment-copy">When I run your code I don't really notice it slowing down. Regardless, I suggest that you add a call to <code>turtle.hideturtle()</code> right after the <code>turtle.speed("fastest")</code> call you already have because, as the <a href="https://docs.python.org/3/library/turtle.html#turtle.hideturtle" rel="nofollow noreferrer">documentation</a> says, "...hiding the turtle speeds up the drawing observably".</span>
<span class="comment-copy">Thanks ! Didn't realise it was the animation that was slowing it down so much</span>
