<div class="post-text" itemprop="text">
<p>I am discovering <strong>Django</strong> (<code>v2.1.1</code>) and want to set up a <em>signin page</em> in which I have 2 emails fields, if the 2 fields are identical, I call <code>form.is_valid()</code>.</p>
<p>The <em>project tree</em> : </p>
<pre><code>├── manage.py
├── requirements.txt
├── project
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── views.py
│   ├── wsgi.py
│   └── templates
│       ├── base.html
│       ├── project
│       │   └── home.html
│       └── registration
│           ├── logged_out.html
│           ├── login.html
│           └── signin.html
└── app
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── models.py
    ├── urls.py
    ├── views.py
    ├── migrations
    └── templates
        └── app
            └── home.html
</code></pre>
<p>Internationalization config in <code>project/settings.py</code> :</p>
<pre><code># (…)
# Internationalization
LANGUAGE_CODE = 'fr-fr'
USE_I18N = True
USE_L10N = True
# (…)
</code></pre>
<hr/>
<p>With a <em>basic django signin view</em> it <strong>works well</strong>: </p>
<p><code>project/views.py</code> :</p>
<pre><code>from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate
from django.contrib.auth.forms import UserCreationForm

def index(request):
    return render(request, 'project/home.html', {'context':'project index'})

def signin(request):
    # (…)
    form = UserCreationForm()
    return render(request, 'registration/signin.html', {'form': form})
</code></pre>
<p>I have a nice <em>French translated</em> HTML form (except for the <code>submit button</code>) :</p>
<p><a href="https://i.stack.imgur.com/l8wB6.png" rel="nofollow noreferrer"><img alt="Django basic signin form" src="https://i.stack.imgur.com/l8wB6.png"/></a></p>
<hr/>
<p>Let's add an <code>email</code> field in the form, <code>email</code> is a built-in user fields (as <code>first_name</code> &amp; <code>last_name</code>) so I just add a new class <code>SignInForm</code> inheriting from <code>UserCreationForm</code> : </p>
<p><code>project/forms.py</code> :</p>
<pre><code>from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class SignInForm(UserCreationForm):
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
</code></pre>
<p>I update <code>project/views.py</code> :</p>
<pre><code># (…)
from project.forms import SignInForm
# (…)
def signin(request):
    # (…)
    form = SignInForm()
    return render(request, 'registration/signin.html', {'form': form})
</code></pre>
<p><strong>It works</strong> : a nice <em>French translated field</em> is added but it do not have a <code>help_text</code> attribute :</p>
<p><a href="https://i.stack.imgur.com/1XSxA.png" rel="nofollow noreferrer"><img alt="Django signin form with additionnal email field" src="https://i.stack.imgur.com/1XSxA.png"/></a></p>
<hr/>
<p><strong>Now I'm stuck…</strong></p>
<p>If I want to set the attribute <code>'required': True</code> to the <code>email</code> field (it is required and I want to show a translated <code>help_text</code>). The only way I found is overriding the built-in email field, but I loose translation and it do not shows the <code>help_text</code> :</p>
<pre><code>from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django import forms

class SignInForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
</code></pre>
<p><a href="https://i.stack.imgur.com/y9jnW.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/y9jnW.png"/></a></p>
<p>If I add a second <code>email2</code> field, I was hoping copy the original <code>User.email</code> with something like <code>email2 = User.email</code>, but it looks like this is not the good place were email is stored. I can use <code>forms.EmailField()</code> as above, but I'd really like to take benefit of the built-in translation.</p>
<hr/>
<p><strong>Then here is my questions</strong> :</p>
<p>How to use an <code>email</code> field with <em>build in attributes</em> (name, required, help_text, …) and get translations ? (When I have an answer I assume that I will found the way to do the same with the <code>submit</code>, <code>first_name</code> &amp; <code>last_name</code>) </p>
<p>Can I duplicate the email field with this constraint? (I do not want to store this second field, just checking before calling <code>form.is_valid()</code>)</p>
<p>_</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few things at play here.</p>
<p>The <code>UserCreationForm</code> is a <a href="https://docs.djangoproject.com/fr/2.1/topics/forms/modelforms/#modelform" rel="nofollow noreferrer"><code>ModelForm</code></a>, which derives its field from a model. In this case, the model is your current <a href="https://docs.djangoproject.com/en/2.1/topics/auth/customizing/#substituting-a-custom-user-model" rel="nofollow noreferrer">AUTH_USER_MODEL</a> setting. When the <code>email</code> form field is created, it inspects the corresponding <code>email</code> field from the model, where it will find the <code>help_text</code> which is wrapped in a <a href="https://docs.djangoproject.com/en/2.1/ref/utils/#django.utils.translation.gettext" rel="nofollow noreferrer"><code>gettext</code></a> (or <code>gettext_lazy</code>) call to allow for i18n to work, as well as any other attribute.</p>
<p>If I understand your question correctly, you want to duplicate the <code>email</code> form field to override some (if any) attributes and to allow you to validate it against the original one. While Django makes it a little harder than what you tried because it is using <a href="https://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow noreferrer">metaclasses</a> to generate the form class, there has been a public API for doing just that since version 1.8: <a href="https://docs.djangoproject.com/en/2.1/ref/models/meta/#django.db.models.options.Options.get_field" rel="nofollow noreferrer">get_field</a> </p>
<p>Here is an example of what you can do:</p>
<pre><code>class SignInForm(UserCreationForm):    
    def __init__(self, *args, **kwargs):
        super(SignInForm, self).__init__(*args, **kwargs)
        email_field = settings.AUTH_USER_MODEL._meta.get_field('email')
        self.fields['email2'] = email_field.formfield()
        self.fields['email'].required = True
        self.fields['email2'].required = True

    class Meta:
        model = settings.AUTH_USER_MODEL
        fields = (...)
</code></pre>
<p>A few of remarks:</p>
<ul>
<li>Using <code>settings.AUTH_USER_MODEL</code> instead of just <code>User</code> will save you from changing the reference to <code>User</code> in your entire codebase should you switch to a custom user model.</li>
<li><code>get_field</code> also has a plural form (see docs) to retrieve multiple fields at the same time. </li>
<li>In general, any runtime modifications of forms (overriding field attributes, etc.) happens in the <code>__init__</code> method, since it's where you first get the 'real' form after Django does its black magic with metaclasses, see the <code>required</code> 
attribute override.</li>
<li>If you want to override a translatable text, you will have to go through <code>gettext</code> and learn about this mechanism if you want to do it properly. You could of course just hardcode it in French. ;)</li>
<li><strong>Edit:</strong> Form validation happens in the <code>validate</code> and <code>validate_{field}</code> form methods, triggered by <code>is_valid</code>. You don't have to have this logic inside the view.</li>
</ul>
<p>I hope that helps.</p>
</div>
<span class="comment-copy">Lots of things in there, thanks. I will try soon and give feedback.</span>
