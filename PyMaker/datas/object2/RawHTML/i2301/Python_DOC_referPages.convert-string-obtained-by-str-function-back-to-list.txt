<div class="post-text" itemprop="text">
<p>I was wondering what the simplest way is to convert a <code>string</code> list like the following to a <code>list</code>:</p>
<pre><code>x = u'[ "A","B","C" , " D"]'
</code></pre>
<p>Even in case user puts spaces in between the commas, and spaces inside of the quotes. I need to handle that as well to:</p>
<pre><code>x = ["A", "B", "C", "D"] 
</code></pre>
<p>in Python.</p>
<p>I know I can strip spaces with <code>strip()</code> and <code>split()</code> using the split operator and check for non alphabets. But the code was getting very kludgy. Is there a quick function that I'm not aware of?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; x = u'[ "A","B","C" , " D"]'
&gt;&gt;&gt; x = ast.literal_eval(x)
&gt;&gt;&gt; x
['A', 'B', 'C', ' D']
&gt;&gt;&gt; x = [n.strip() for n in x]
&gt;&gt;&gt; x
['A', 'B', 'C', 'D']
</code></pre>
<p><a href="https://docs.python.org/library/ast.html#ast.literal_eval" rel="noreferrer">ast.literal_eval</a>:</p>
<blockquote>
<p>With ast.literal_eval, you can safely evaluate an expression node or a string containing a Python expression. The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <code>eval</code> is dangerous - you shouldn't execute user input.</p>
<p>If you have 2.6 or newer, use ast instead of eval:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('["A","B" ,"C" ," D"]')
["A", "B", "C", " D"]
</code></pre>
<p>Once you have that, <code>strip</code> the strings.</p>
<p>If you're on an older version of Python, you can get very close to what you want with a simple regular expression:</p>
<pre><code>&gt;&gt;&gt; x='[  "A",  " B", "C","D "]'
&gt;&gt;&gt; re.findall(r'"\s*([^"]*?)\s*"', x)
['A', 'B', 'C', 'D']
</code></pre>
<p>This isn't as good as the ast solution, for example it doesn't correctly handle escaped quotes in strings. But it's simple, doesn't involve a dangerous eval, and might be good enough for your purpose if you're on an older Python without ast.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/json.html"><code>json</code></a> module is a better solution whenever there is a <em>stringified</em> list of dictionaries. The <code>json.loads(your_data)</code> function can be used to convert it to a list.</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; x = u'[ "A","B","C" , " D"]'
&gt;&gt;&gt; json.loads(x)
[u'A', u'B', u'C', u' D']
</code></pre>
<p>Similarly </p>
<pre><code>&gt;&gt;&gt; x = u'[ "A","B","C" , {"D":"E"}]'
&gt;&gt;&gt; json.loads(x)
[u'A', u'B', u'C', {u'D': u'E'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import ast
l = ast.literal_eval('[ "A","B","C" , " D"]')
l = [i.strip() for i in l]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that all your inputs are lists and that the double quotes in the input actually don't matter, this can be done with a simple regexp replace.  It is a bit perl-y but works like a charm.  Note also that the output is now a list of unicode strings, you didn't specify that you needed that, but it seems to make sense given unicode input.</p>
<pre><code>import re
x = u'[ "A","B","C" , " D"]'
junkers = re.compile('[[" \]]')
result = junkers.sub('', x).split(',')
print result
---&gt;  [u'A', u'B', u'C', u'D']
</code></pre>
<p>The junkers variable contains a compiled regexp (for speed) of all characters we don't want, using ] as a character required some backslash trickery.
The re.sub replaces all these characters with nothing, and we split the resulting string at the commas.   </p>
<p>Note that this also removes spaces from inside entries u'["oh no"]' ---&gt; [u'ohno'].  If this is not what you wanted, the regexp needs to be souped up a bit.  </p>
</div>
<div class="post-text" itemprop="text">
<p>There is a quick solution:</p>
<pre><code>x = eval('[ "A","B","C" , " D"]')
</code></pre>
<p>Unwanted whitespaces in the list elements may be removed in this way:</p>
<pre><code>x = [x.strip() for x in eval('[ "A","B","C" , " D"]')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>with <code>numpy</code> this is working a very simple way</p>
<pre><code>x = u'[ "A","B","C" , " D"]'
list_string = str(x)
import numpy as np
print np.array(list_string)
</code></pre>
<p>gives</p>
<pre><code>&gt;&gt;&gt; 
[ "A","B","C" , " D"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you know that your lists only contain quoted strings, this pyparsing example will give you your list of stripped strings (even preserving the original Unicode-ness).</p>
<pre><code>&gt;&gt;&gt; from pyparsing import *
&gt;&gt;&gt; x =u'[ "A","B","C" , " D"]'
&gt;&gt;&gt; LBR,RBR = map(Suppress,"[]")
&gt;&gt;&gt; qs = quotedString.setParseAction(removeQuotes, lambda t: t[0].strip())
&gt;&gt;&gt; qsList = LBR + delimitedList(qs) + RBR
&gt;&gt;&gt; print qsList.parseString(x).asList()
[u'A', u'B', u'C', u'D']
</code></pre>
<p>If your lists can have more datatypes, or even contain lists within lists, then you will need a more complete grammar - like <a href="http://pyparsing.wikispaces.com/file/view/parsePythonValue.py" rel="nofollow noreferrer">this one</a> on the pyparsing wiki, which will handle tuples, lists, ints, floats, and quoted strings.  Will work with Python versions back to 2.4.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without importing anything;</p>
<pre><code>x = u'[ "A","B","C" , " D"]'

ls = x.strip('][').split(',')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To further complete @Ryan 's answer using json, one very convenient function to convert unicode is the one posted here: <a href="https://stackoverflow.com/a/13105359/7599285">https://stackoverflow.com/a/13105359/7599285</a></p>
<p>ex with double or single quotes:</p>
<pre><code>&gt;print byteify(json.loads(u'[ "A","B","C" , " D"]')
&gt;print byteify(json.loads(u"[ 'A','B','C' , ' D']".replace('\'','"')))
['A', 'B', 'C', ' D']
['A', 'B', 'C', ' D']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would like to provide a more intuitive patterning solution with regex. 
The below function takes as input a stringified list containing arbitrary strings. </p>
<p><strong>Stepwise explanation:</strong>
You remove all whitespacing,bracketing and value_separators (provided they are not part of the values you want to extract, else make the regex more complex). Then you split the cleaned string on single or double quotes and take the non-empty values (or odd indexed values, whatever the preference). </p>
<pre><code>def parse_strlist(sl):
import re
clean = re.sub("[\[\],\s]","",sl)
splitted = re.split("[\'\"]",clean)
values_only = [s for s in splitted if s != '']
return values_only
</code></pre>
<p><strong>testsample</strong>: "['21',"foo" '6', '0', " A"]"</p>
</div>
<div class="post-text" itemprop="text">
<p>So, following all the answers I decided to time the most common methods:</p>
<pre><code>from time import time
import re
import json


my_str = str(list(range(19)))
print(my_str)

reps = 100000

start = time()
for i in range(0, reps):
    re.findall("\w+", my_str)
print("Regex method:\t", (time() - start) / reps)

start = time()
for i in range(0, reps):
    json.loads(my_str)
print("json method:\t", (time() - start) / reps)

start = time()
for i in range(0, reps):
    ast.literal_eval(my_str)
print("ast method:\t\t", (time() - start) / reps)

start = time()
for i in range(0, reps):
    [n.strip() for n in my_str]
print("strip method:\t", (time() - start) / reps)



    regex method:    6.391477584838867e-07
    json method:     2.535374164581299e-06
    ast method:      2.4425282478332518e-05
    strip method:    4.983267784118653e-06
</code></pre>
<p>So in the end regex wins!</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's assume your string is t_vector = [34, 54, 52, 23] and you want to convert this into a list. You can use the below 2 steps:</p>
<pre><code>ls = t_vector.strip('][')
t_vector = ls.split(' ')
</code></pre>
<p>t_vector contains the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can save yourself the .strip() fcn by just slicing off the first and last characters from the string representation of the list (see third line below)</p>
<pre><code>&gt;&gt;&gt; mylist=[1,2,3,4,5,'baloney','alfalfa']
&gt;&gt;&gt; strlist=str(mylist)
['1', ' 2', ' 3', ' 4', ' 5', " 'baloney'", " 'alfalfa'"]
&gt;&gt;&gt; mylistfromstring=(strlist[1:-1].split(', '))
&gt;&gt;&gt; mylistfromstring[3]
'4'
&gt;&gt;&gt; for entry in mylistfromstring:
...     print(entry)
...     type(entry)
... 
1
&lt;class 'str'&gt;
2
&lt;class 'str'&gt;
3
&lt;class 'str'&gt;
4
&lt;class 'str'&gt;
5
&lt;class 'str'&gt;
'baloney'
&lt;class 'str'&gt;
'alfalfa'
&lt;class 'str'&gt;
</code></pre>
</div>
<span class="comment-copy">What are you actually trying to accomplish? There is probably a far better way than trying to convert Python list syntax into an actual list...</span>
<span class="comment-copy">What version of Python are you using?</span>
<span class="comment-copy">@Nicholas Knight: I am trying to handle user input in a legacy app where all lists were entered as unicode lists with square parenthesis. @Mark Byers , I am using python 2.6 so the ast.literal approach works best</span>
<span class="comment-copy">Per comment below, this is dangerous as it simply runs whatever python is in the string.  So if someone puts a call to delete everything in there, it happily will.</span>
<span class="comment-copy">@PaulKenjora: You're thinking of <code>eval</code>, not <code>ast.literal_eval</code>.</span>
<span class="comment-copy"><code>ast.literal_eval</code> is <i>safer</i> than <code>eval</code>, but it's not actually <i>safe</i>. As <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">recent versions of the docs</a> explain: "Warning It is possible to crash the Python interpreter with a sufficiently large/complex string due to stack depth limitations in Python’s AST compiler." It may, in fact, be possible to run arbitrary code via a careful stack-smashing attack, although as far as I know nobody's build a public proof of concept for that.</span>
<span class="comment-copy">Could you please tell me what why did you say “The <code>eval</code> is dangerous - you shouldn’t execute user input.”? I am using 3.6</span>
<span class="comment-copy">@AaryanDewan if you use <code>eval</code> directly, it will evaluate any valid python expression, which is potentially dangerous. <code>literal_eval</code> solves this problem by only evaluating Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None.</span>
<span class="comment-copy">however i don't want the returned list in unicode format. but seems like even if i remove u' ' from the string it stills treats the data as unicode.</span>
<span class="comment-copy">This works for ints but not for strings in my case because each string is single quoted not double quoted, sigh.</span>
<span class="comment-copy">this would still preserve the spaces inside the quotes</span>
<span class="comment-copy">This is an open invitation to arbitrary code execution, NEVER do this or anything like it unless you know with absolute certainty that the input will always be 100% trusted.</span>
<span class="comment-copy">@tosh: it won't.</span>
<span class="comment-copy">I could use this suggestion because I knew my data was always gonna be in that format and was a data processing work.</span>
<span class="comment-copy">This doesn't work. It simply makes a 0-d array of the string. Any array operations, such as accessing an element, fail with error.</span>
<span class="comment-copy">would you let me know how to use "parseString().asList()", if i have this kind of string: '[ "A","B","C" , ["D"]]',   as you have stated that pyparsing can do that as well. but o don't seem to have found the right way to do it.</span>
<span class="comment-copy">"If your lists can have more datatypes, or even contain lists within lists, then you will need a more complete grammar" - please see the link I provided in my answer for a parser that will handle nested lists, and various other data types.</span>
<span class="comment-copy">This approach should have gotten more thumbs up</span>
<span class="comment-copy">Pyparsing is no longer hosted at wikispaces. The <code>parsePythonValue.py</code> example is now on GitHub at <a href="https://github.com/pyparsing/pyparsing/blob/master/examples/parsePythonValue.py" rel="nofollow noreferrer">github.com/pyparsing/pyparsing/blob/master/examples/…</a></span>
<span class="comment-copy">Cautionary note: this could potentially be dangerous if any of the strings inside list has a comma in between.</span>
