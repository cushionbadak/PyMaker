<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/48715552/what-does-x-in-range-y-mean-in-python-3">What does x in range(â€¦) == y mean in Python 3? [duplicate]</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Task: </p>
<p>Write a Python function that returns how many integer elements in a list are exact squares of other elements in the same list. Assume that the list does not contain negative numbers and that there are no duplicates.</p>
<p>This function takes in a list and returns the count. For example, if x is [3,4,0,2,1,9,25] then sum returns 4 because 3*3=9 , 0*0=0 , 1*1=1 , 2*2=4.</p>
<p>Here is my code:</p>
<pre><code>x = [3,4,0,2,1,9,25]
def count(x):
    sum = 0
    for i in x:
       if i*i in x is True:
            sum += 1
    return sum
</code></pre>
<p>When I run count(x) the output is 0 not 4, I think the logic is correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>The operator <code>is</code> is a <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">comparison operator</a>, thus when you do <code>i*i in x is True</code>, Python interprets it as <code>i*i in x and x is True</code>. In that case <code>x is True</code> is always false.</p>
<p>Note that you do not explicitly need to compare the value to <code>True</code>, since <code>in</code> returns a boolean.</p>
<pre><code>x = [3,4,0,2,1,9,25]
def count(x):
    sum = 0
    for i in x:
       if i*i in x: # Simply remove 'is True'
            sum += 1
    return sum
</code></pre>
<p>Although, thes above is <em>O(n<sup>2</sup>)</em> due to list lookup. You could use a <code>set</code> for constant time lookup and use the fact that <code>True == 1</code> and <code>False == 0</code> to use <code>sum</code> and get an efficient <em>O(n)</em> algorithm.</p>
<pre><code>def count(x):
    x_set = set(x)
    return sum(i*i in x_set for i in x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>int(True)</code> returns <code>1</code> and <code>int(False)</code> returns <code>0</code> so why not just use one-line of <code>sum</code>:</p>
<pre><code>def count(x):
    return sum(i*i in x for i in x)
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>x = [3,4,0,2,1,9,25]
def count(x):
    return sum(i*i in x for i in x)
print(count(x))
</code></pre>
<p>Output:</p>
<pre><code>4
</code></pre>
<p>Or faster:</p>
<pre><code>def count(x):
    return sum([i*i in x for i in x])
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>x = [3,4,0,2,1,9,25]
def count(x):
    return sum([i*i in x for i in x])
print(count(x))
</code></pre>
<p>Output:</p>
<pre><code>4
</code></pre>
<p><strong>Summary about why your code doesn't work:</strong></p>
<p>The issue with your code is that you don't need <code>is True</code> at the end of the code otherwise that could also be a solution</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do:</p>
<pre><code>if i*i in x is True:
</code></pre>
<p>it actually <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chains the conditional operators</a> so that it is equivalent to:</p>
<pre><code>i*i in x and x is True:
</code></pre>
<p>which is not what you're looking for.</p>
<p>You can instead use parentheses to explicitly do:</p>
<pre><code>if (i*i in x) is True:
</code></pre>
<p>and your code would work.</p>
<p>But then you don't really need to compare a Boolean expression to a Boolean value. You can simply instead do:</p>
<pre><code>if i*i in x:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Peoblem fixed ! Thanks all for your feedback !!!!!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just do a <em>list comprehension</em> instead of using a creating a function</p>
<pre><code>count = len([i for i in x if i*i in x])
</code></pre>
</div>
<span class="comment-copy">Thanks Olivier, very clear!</span>
<span class="comment-copy">That is not why it does not work, it's due to chaining of operators. Do not use == either</span>
<span class="comment-copy">Yes, already corrected it.</span>
<span class="comment-copy">This is still wrong, <code>i*i in x is True</code> is interpreted as <code>i*i in x and x is True</code>.</span>
<span class="comment-copy">You're right. I've updated my answer accordingly. Thanks.</span>
