<div class="post-text" itemprop="text">
<p>I am trying to concatenate two tuples using the overloaded + operator in Python 3.6. I don't have an issue if I include the parenthesis like the first example, but if I leave off the parenthesis as in the second example, I get an error. The message I get is "bad operand type for unary +: 'tuple'". Can anyone explain what is happening?</p>
<blockquote>
<p>newtup = (3,) + (2,4)</p>
<p>newtup = 3, + (2,4)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Unary operator <code>+</code> expects valid a operand (int, float etc) on the right side. </p>
<p>In your code <code>3, + (2, 4)</code>, you are providing a tuple <code>(2, 4)</code> as an operand to <code>+</code> which is not a valid operand and so is the error.</p>
<p>In your code: </p>
<p><code>newtup = (3,) + (2, 4)</code></p>
<p>These are 2 separate tuples <code>(3,)</code> and <code>(2,4)</code>, so it works.</p>
<p><code>newtup = 3, + (2, 4)</code></p>
<p>Here its a single tuple with 2 elements <code>3</code> and <code>+(2, 4)</code> which fails due to above mentioned reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a precedence issue. <code>3, + (2, 4)</code> is parsed as a tuple with elements <code>3</code> and <code>+(2, 4)</code>, not as adding <code>3,</code> and <code>(2, 4)</code>. You need the parentheses.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's trying to parse the second line as</p>
<p><code>(3, + (2,4))</code></p>
<p>Then, it's seeing that you used the unary <code>+</code>, as in <code>a = +5</code>, with a tuple. This isn't allowed, and thus you get an error. Commas are given very wide precedence (ie they consume as many characters as possible, closer to a + than a *). The reason behind this is that (<code>biglongexpression1</code>, <code>biglongexpression2</code>) should never mix the two <code>biglongexpression</code>s. Everything else is more important and should be evaluated before a comma, and thus <code>+(2,4)</code> is evaluated before the comma - because it's a <code>biglongexpression</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you're doing:</p>
<pre><code>3, + (2,4)
</code></pre>
<p>It basically simplifies to two parts <code>3,</code> and <code>+(2,4)</code>, the second is invalid so you can try new-unpacking in python 3:</p>
<pre><code>(3,*(2,4))
</code></pre>
<p>If on python2 just use second example.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple; On the first line you are creating a new tuple made of 2 tuples. 
On the second line you are adding an int to  a tuple. Check this out.</p>
<pre><code> x, y=3, (2,4) # assign  x and y to 3, and (2,4) respectively
 print type(y), type(x)
 &lt;type 'tuple'&gt; &lt;type 'int'&gt; 
</code></pre>
</div>
<span class="comment-copy">What is  your aim? what are you trying to do</span>
<span class="comment-copy">I don't understand why it was downvoted. +1 from me.</span>
<span class="comment-copy">The second line <i>isn't</i> adding an int to a tuple.</span>
<span class="comment-copy">@PM2Ring you are trying to add to a tuple.</span>
<span class="comment-copy">I'm not trying to add anything. I haven't posted any code on this page. Please see the explanation in user2357112's answer. In the OP's second line, the <code>+</code> is the <a href="https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="nofollow noreferrer">unary plus</a> operator, it's not the addition operator, which takes two operands.</span>
