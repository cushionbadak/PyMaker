<div class="post-text" itemprop="text">
<p><strong>Scenerio:</strong></p>
<pre><code>for i in range(6):
    for j in range(i):
        j
</code></pre>
<p>AFAIK, in list comprehension the right most <code>for</code> is the outer one so, I thought the following code will work:</p>
<pre><code>[ j for j in range(i) for i in range(6)]
</code></pre>
<p>But to my surprise, it throws a <code>NameError</code></p>
<pre><code>Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'i' is not defined
</code></pre>
<p>I wonder why it didn't work. Is it because python evaluates expression from <em>Left to Right</em>? 
Cause, I have resolved the issue by using parenthesis:</p>
<pre><code>[ (j for j in range(i)) for i in range(6)]
</code></pre>
<p>which outputs a bunch of generator expressions:</p>
<pre><code>[&lt;generator object &lt;listcomp&gt;.&lt;genexpr&gt; at 0x7f3b42200d00&gt;, &lt;generator object &lt;listcomp&gt;.&lt;genexpr&gt; at 0x7f3b42200d58&gt;, &lt;generator object &lt;listcomp&gt;.&lt;genexpr&gt; at 0x7f3b42200db0&gt;, &lt;generator object &lt;listcomp&gt;.&lt;genexpr&gt; at 0x7f3b42200e08&gt;, &lt;generator object &lt;listcomp&gt;.&lt;genexpr&gt; at 0x7f3b42200e60&gt;, &lt;generator object &lt;listcomp&gt;.&lt;genexpr&gt; at 0x7f3b42200eb8&gt;]
</code></pre>
<p>To explore what is inside these generator expressions we can simply cast them into lists i.e.</p>
<pre><code>[ list(j for j in range(i )) for i in range(6)]
</code></pre>
<p>and the output is as expected:</p>
<pre><code>[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
</code></pre>
<p>I just want to know what is really happening here. </p>
</div>
<div class="post-text" itemprop="text">
<p>Correct, it's evaluated from left to right. To add the others' answers, I looked up <a href="https://docs.python.org/3/whatsnew/2.0.html?highlight=comprehension%20evaluate#list-comprehensions" rel="nofollow noreferrer">the official explanation in the documentation</a>.</p>
<blockquote>
<p>List comprehensions have the form:</p>
</blockquote>
<pre><code> [ expression for expr in sequence1
              for expr2 in sequence2 ...
              for exprN in sequenceN
              if condition ]
</code></pre>
<blockquote>
<p>The <code>forâ€¦in</code> clauses contain the sequences to be iterated over. The
  sequences do not have to be the same length, because they are not
  iterated over in parallel, but from <em>left to right</em>; this is explained
  more clearly in the following paragraphs. The elements of the
  generated list will be the successive values of expression. The final
  if clause is optional; if present, expression is only evaluated and
  added to the result if condition is true.</p>
<p>To make the semantics very clear, a list comprehension is equivalent
  to the following Python code:</p>
</blockquote>
<pre><code>for expr1 in sequence1:
    for expr2 in sequence2:
    ...
        for exprN in sequenceN:
             if (condition):
                  # Append the value of
                  # the expression to the
                  # resulting list.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this code </p>
<pre><code>j for j in range(i) for i in range(6) 
</code></pre>
<p>just like :</p>
<pre><code>for j in range(i):
    for i in range(6):
        j
</code></pre>
<p>outer loop uses <code>i</code> before it is defined, so <code>NameError</code> occurred, i.e. your belief "the right most for is the outer one" is wrong.</p>
<p>You can use this code </p>
<pre><code>[j for i in range(6) for j in range(i)]
</code></pre>
<p>and why below code work</p>
<pre><code>[ (j for j in range(i)) for i in range(6)]
# parentheses make it work like this
for i in range(6):
     for j in range(i):
          j
</code></pre>
</div>
<span class="comment-copy"><code>[ j for i in range(6) for j in range(i)]</code> Try this</span>
<span class="comment-copy">I cannot tell you exactly why the command is interpreted the way it is, but to get the expected behavior out of the box, use <code>[ j for j in (range(i) for i in range(6))]</code></span>
<span class="comment-copy">"the right most for is the outer one". No, the order is the same as "traditional" for loops. I think you got confused by looking at a nested list comprehension, eg <code>[[j for j in range(i)] for i in range(6)]</code>.</span>
<span class="comment-copy">@PM2Ring yes, I was confused.</span>
<span class="comment-copy">Thank you, so if we don't use parenthesis the left most for will be considered as the outer loop! I didn't know that.</span>
