<div class="post-text" itemprop="text">
<p>I have nested list. Now, I want to convert it into dictionary.
nested list always contain only two items in my case.</p>
<pre><code>list1 = [['a','b'],['c','d']]
list2=[]
for i in list1:
    list2.append({'name':i[0],'value':i[1]}) //it work correct but i want to optimize that code.

o/p of above code(this i want): [{ 'name': 'a','value': 'b'}, {'name': 'c', 'value': 'd'}]
</code></pre>
<p>Anyone can tell. How to optimize the above code. 
Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's quite a strange data structure to have a list of dictionaries like this in my opinion, but you can do it efficiently performance-wise like this:</p>
<pre><code>list1 = [['a','b'],['c','d']]
[{"name": x[0], "value": x[1]} for x in list1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> and dictionary + list comprehension:  </p>
<pre><code>from itertools import cycle

list1 = [['a','b'],['c','d']]
k = cycle(['name', 'value'])
print([{next(k): v for v in x} for x in list1])

# [{'name': 'a', 'value': 'b'}, {'name': 'c', 'value': 'd'}]
</code></pre>
<p>Here, <code>cycle</code> creates an infinite iterator taking items in a cyclic manner - <code>name, value, name, value, name,...</code>. <code>next()</code> on this iterator takes value out on each iteration.</p>
</div>
<span class="comment-copy">Sure, you could do a list comprehension, but really there's nothing particularly inefficient about your implementation.</span>
<span class="comment-copy">yes, it works. thanks @ Sven H</span>
<span class="comment-copy">it gives [{'value': 'b', 'name': 'a'}, {'value': 'd', 'name': 'c'}]. Is it possible to convert it into dictionary. like this...........{{'value': 'b', 'name': 'a'}, {'value': 'd', 'name': 'c'}}. @Sven H.</span>
<span class="comment-copy">No that's not a valid data structure in python, a dictionary needs to be constructed from key:value pairs which the outer dict in your proposed structure does not</span>
<span class="comment-copy">can you explain it.</span>
<span class="comment-copy">I've added explanation and a link for further reference.</span>
