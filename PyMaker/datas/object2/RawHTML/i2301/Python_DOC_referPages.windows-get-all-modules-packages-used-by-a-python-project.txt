<div class="post-text" itemprop="text">
<p>I have an application and now I would like to know what packages/modules are necessary if someone else wants to install it. How can I get all the python modules/packages that are needed for a specific project? </p>
<p><strong>Important Note:</strong> This question was already <a href="https://stackoverflow.com/questions/35796968/get-all-modules-packages-used-by-a-python-project">answered for Linux</a>. They suggested <code>pipreqs</code>, which seems like a great solution, however it <a href="https://timothybramlett.com/Generating-Python-requirements-files.html" rel="nofollow noreferrer">does not to support Windows</a>.</p>
<p>My Python version is 3.6.4. </p>
<p>I am working on windows 10.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you verified that pipreqs does not work? I use Windows 10 (build 17134.285), Python 3.7.0, and pipreqs 0.4.9; and I have successfully generated requirements files using pipreqs. </p>
<pre><code>C:\l\Projects\MicrosoftGraph&gt;pipreqs .\sampleGraphAuthPython
INFO: Successfully saved requirements file in .\sampleGraphAuthPython\requirements.txt

C:\l\Projects\MicrosoftGraph&gt;type .\sampleGraphAuthPython\requirements.txt
bottle==0.12.13
adal==1.1.0
Flask_OAuthlib==0.9.5
requests==2.19.1
Flask==1.0.2
requests_oauthlib==1.0.0
urllib3==1.23
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Could you use: <strong>pip freeze</strong> </p>
<p>This would output all the installed packages for your given project: <a href="https://pip.pypa.io/en/stable/reference/pip_freeze/" rel="nofollow noreferrer">https://pip.pypa.io/en/stable/reference/pip_freeze/</a></p>
</div>
<span class="comment-copy">Thank you @LisaJ! You were absolutely right. Apparently I misused it. Just forgot the dot.</span>
<span class="comment-copy">Thank you very much for the suggestion. It seems to output all installed packages, even with the local flag</span>
<span class="comment-copy">FWIW: I would recommend creating a new python virtual environment for each python project you develop for. Then you can have a sandboxed environment to explore libraries with on a project by project basis without the worry of messing up your system level python configurations. Worst case if you mess up an environment you can just blow it away with no consequences. Also if you do a pip freeze for that project you can see just the dependencies for that project. If you get a minute check out: <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/venv.html</a> it's pretty cool and may save you a headache later on :)</span>
