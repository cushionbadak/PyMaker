<div class="post-text" itemprop="text">
<p>Write the program that reads in input three integers a, b and c. If the integer c is equal to 1, then the program displays on output (prints) the value of a + b; if c is 2 then the program displays the value of a-b; if c is equal to 3 then the output will be the value of a<em>b. Finally, if the value 4 is assigned to c, then the program displays the value of a^2 + b</em>a. If c contains another value, the program displays the message "Error"</p>
<pre><code>a = int(input())
b = int(input())
c = int(input())

if c == 1:
    print(a + b)

if c == 2:
    print(a - b)

if c == 3:
    print(a * b)

if c == 4:
    print(a**2 + b*a)

else:
    print('Error')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Seems like you got it, just make use of <code>elif</code> instead of a chain of <code>ifs</code>, you can also add a message inside <code>input('Here')</code> that will be printed when prompting for an input</p>
<pre><code>a = int(input("Enter a number: ))

b = int(input("Enter a number: ))

c = int(input("Enter a number: ))

if c == 1 :
    print(a + b)
elif c == 2 :
    print(a - b)
elif c == 3 :
    print(a * b)
elif c == 4 :
    print(a**2 + b*a)
else:
    print('Error')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>if</code>s work, but you have somewhat misaligned the logic. </p>
<p>Use <code>if</code> <code>elif</code> and <code>else</code></p>
<pre><code>if c==something:
    print("this")
elif c==something_else:
    print("that")
else:
    print("error") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After the first if statement, you should use <code>elif</code>, which is short for "else if". There is no error message because there is no error, you just have your logic wrong. The compiler is treating every if statement independently, so else runs as long as c is not 4.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're nearly there. The main problem with your program is your <code>if</code> statements are independent, where the problem statement suggests they should not be. Change them for <code>elif</code> statements, which will mean your <code>Error</code> branch only executes when <code>c</code> evaluates to an integer which is not in the set <code>{1, 2, 3, 4}</code>.</p>
<hr/>
<h1>Problem 1: program has (possibly) poor control flow</h1>
<p>In most programming languages, the <code>if</code> statement is a basic construct used to execute a block of code conditionally if an expression is true. In the following Python-like pseudocode, the code behind the <code>if</code> block is only executed if the value obtained by evaluating <code>EXPRESSION</code> is true:</p>
<pre class="lang-py prettyprint-override"><code>if EXPRESSION:
    # Do something only if EXPRESSION is true

# Execution continues here after the "if" block irrespective of
# whether EXPRESSION was true and the body of the "if" statement
# was executed.
</code></pre>
<p>You can augment <code>if</code> statements with <code>else</code> branches. In this case, we execute the body of the <code>if</code> statement if <code>EXPRESSION</code> evaluates to true, and we execute the other arm of the branch (the <code>else</code> branch) if the condition does not evaluate to true (by law of the excluded middle, it's false):</p>
<pre class="lang-py prettyprint-override"><code>if EXPRESSION:
    # As before, control is passed here if EXPRESSION is true.
else:
    # If EXPRESSION was false, control is passed to this arm.

# After executing either the "if" arm or the "else" arm, control
# returns to the outer scope outside the "if" statement.
</code></pre>
<p>A more complex construct uses an <em>else-if</em> construct to allow you to <em>nest</em> "if" statements. For example, suppose we were implementing a simple call controller which tries to reach someone on their fixed telephone, calls their portable telephone if they are unavailable, and sends an email otherwise. Using the knowledge from above, we might write:</p>
<pre class="lang-py prettyprint-override"><code>if answers(fixed_telephone):
    # Connect to the fixed telephone to communicate
else:
    if answers(portable_telephone):
        # Connect to the portable telephone to communicate
    else:
        # Not available on either telephone. Send an email.
</code></pre>
<p>As you can imagine, this logic will become complex quickly if there are many nested "if" conditions, which is not unusual in real-world scenarios. Most programming languages provide a construct to pull the nested "if" statements to the top-level. In Python, this is <code>elif</code>, and the equivalent code to the above is:</p>
<pre class="lang-py prettyprint-override"><code>if answers(fixed_telephone):
    # ...
elif answers(portable_telephone):
    # ...
else:
    # ...
</code></pre>
<p>(comments elided for brevity).</p>
<p>In your code as currently written, each of your <code>if</code> statements will be executed independently <em>except</em> the last <code>if c == 4</code>, which will fall to the <code>else</code> branch if <code>c</code> is not equal to 4. As you want the tests of <code>c</code> to be mutually exclusive, i.e. you don't want anything to happen if an earlier case passed, and you only want to print an error if <em>none</em> of the cases were executed, you should use nested <code>if</code> statements, which are best implemented using the above <code>elif</code> language construct.</p>
<hr/>
<h1>Problem 2: program assumes well-formed integers</h1>
<p>Your program also assumes the values read from STDIN for <code>a</code>, <code>b</code> and <code>c</code> are well-formed integers. If you enter a value which cannot be parsed as an integer, it will crash on the integer conversion in the <code>int(...)</code> call, and will not fall through to reach your <code>print('Error')</code> line. This is an example of Python raising an <em>exception</em> because a problem has been encountered which the interpreter cannot itself recover from. Control flow will not begin executing the <code>if</code> blocks, so the <code>print</code> statement will never be executed.</p>
<p>If you want to fix <em>that</em> issue, you'll need to catch the error returned by the <code>int(...)</code> method when it cannot parse the provided value as an integer. This means learning to catch exceptions, which you can <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">find out more about in the Python docs</a>.</p>
<p>(Hint: Python will raise an built-in exception of type <code>ValueError</code> when the input to <code>int</code> cannot be parsed, so you need to wrap the calls which populate the three variables <code>a</code>, <code>b</code> and <code>c</code> with a <code>try... catch</code> block which catches such an error:</p>
<pre class="lang-py prettyprint-override"><code>try:
    a = int(input())
catch ValueError:
    # Implement logic to handle this error, which may include
    # returning an error from your function, setting a default
    # value, or taking some action. You can optionally take
    # some action locally, such as print a log message, and then
    # re-raise the exception so it propagates to this method's
    # callers (using the "raise" keyword).
</code></pre>
</div>
<span class="comment-copy">Your <code>else</code> only fires if <code>c</code> is not 4, because you used <code>if</code> statements rather than <code>elif</code> statements.</span>
<span class="comment-copy">Thanks, i wasn't sure how to use the elif statement, i tried several variants, but i didn't reach to this one.</span>
<span class="comment-copy">No prob bud if this helped would appreciate if you checked solved, Cheers!</span>
<span class="comment-copy">yeah, thanks, i was trying to use the elif statement but i didn't knew exactly how does it work. So i was changing only one statement to elif instead changing 3 if them.</span>
<span class="comment-copy">no, you are right there's no error message, but if c has another value, other than 1, 2, 3 or 4 i want this program to output the message "Error".</span>
<span class="comment-copy">Yes, if the last statement is "else ...", then it should still output "error" for values greater than four. The first statement should be "if c == 1", the second, third and fourth "elif c == x"(with x being the number), and the last "else". I apologize if I didn't make that clear in my original answer.</span>
<span class="comment-copy">It's okay, I didn't get you point of view at first, now, you made it clear. anyways i'm not very familiar with the elif statement, so yeah, i was expecting a more clear explanation.</span>
<span class="comment-copy">Thanks, this will help me a lot, those seems to be some good explications.</span>
