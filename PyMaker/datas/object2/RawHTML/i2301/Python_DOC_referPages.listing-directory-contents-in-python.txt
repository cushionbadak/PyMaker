<div class="post-text" itemprop="text">
<p>New to Python here and was doing a sample exercise to list the contents of a directory and found something I cannot explain with my current level of knowledge.<a href="https://i.stack.imgur.com/o1v8B.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/o1v8B.png"/></a></p>
<p>Looking at step 1,3 and 2,4 we see the results are identical however the results are not the same between 1,2 and 3,4.</p>
<p>5 and 6 are identical but don't expand into the child folder, and I believe that is just an issue with the glob text.</p>
<p>But then 7 throws and error and 8 gives the correct results !</p>
<p>How can we explain the above results ?</p>
<p>Platform: Windows 10
Python Version: 3.6.5</p>
<p>The code is shown below</p>
<pre><code>import MainMenu
from pathlib import Path
import glob


def main():
    menu = MainMenu.MainMenu()
    operation, result = menu.show_main_menu()

    if operation == 1:
        # user chose file listing - result has to be path of the folder
        p = Path(result)
        print("result =", result)
        print("p.resolve() =", p.resolve())
        print("1. list(p.resolve().glob(\"./**/*\")):", list(p.resolve().glob("./**/*")))
        print("2. glob.glob(result + \"./**/*\"):", glob.glob(result + "./**/*"))
        print("3. list(p.resolve().glob(\"**/*\")):", list(p.resolve().glob("**/*")))
        print("4. glob.glob(result + \"/**/*\"):", glob.glob(result + "/**/*"))
        print("5. list(p.resolve().glob(\"**\")):", list(p.resolve().glob("**")))
        print("6. glob.glob(result + \"**\"):", glob.glob(result + "**"))
        print("7. list(p.resolve().glob(\"/**\")):", "Error: Non-relative patterns are unsupported")
        print("8. glob.glob(result + \"/**\"):", glob.glob(result + "/**"))

if __name__ == '__main__':
    main()
</code></pre>
<p>Following is the MainMenu class</p>
<pre><code>from __future__ import unicode_literals, print_function
from prompt_toolkit import print_formatted_text
from prompt_toolkit.formatted_text import HTML, ANSI
from prompt_toolkit.formatted_text import FormattedText
from prompt_toolkit.shortcuts import prompt
from prompt_toolkit.validation import Validator
from pathlib import Path


class MainMenu:

    @staticmethod
    def __menu_title(text):
        print_formatted_text(HTML('\n&lt;u&gt;&lt;b&gt;{}&lt;/b&gt;&lt;/u&gt;').format(text))

    @staticmethod
    def __validator_is_valid_choice(text):
        return text == '1'

    @staticmethod
    def __validator_is_valid_folder_path(text):
        p = Path(text)
        return (p.exists() and p.is_dir())


    def __init__(self):
        self.validator_is_valid_choice = Validator.from_callable(
            self.__validator_is_valid_choice,
            error_message='Not a valid choice (has to be the number from 1).',
            move_cursor_to_end=False)
        self.validator_is_valid_folder_path = Validator.from_callable(
            self.__validator_is_valid_folder_path,
            error_message='Please specify a valid path to a folder.',
            move_cursor_to_end=False)

    def show_main_menu(self):
        tokens = FormattedText([('bg:ansigreen ansiwhite', 'Choose option: ')])
        self.__menu_title('Please select the file operation')
        print_formatted_text(ANSI('    \x1b[1m1. List Files'))
        result = prompt(tokens, refresh_interval=.5, validator=self.validator_is_valid_choice, validate_while_typing=True)

        if result == '1':
            print_formatted_text('')
            return 1, self.show_enter_path_menu()
        else:
            return 0

    def show_enter_path_menu(self):
        tokens = FormattedText([('bg:ansigreen ansiwhite', 'Enter the folder path: ')])
        result = prompt(tokens, refresh_interval=.5, validator=self.validator_is_valid_folder_path, validate_while_typing=True)
        return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>1 vs 2</strong></p>
<pre><code>list(p.resolve().glob("./**/*"))
glob.glob(result + "./**/*")
</code></pre>
<p>If we expand that second one, we get</p>
<pre><code>glob.glob("C:\Python\PlayTest\testfolder./**/*")
</code></pre>
<p>This is not a valid path, so it fails. Use <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="nofollow noreferrer">the slash operator</a> to join paths instead of manipulating string directly.</p>
<p><strong>7.</strong>
You're searching from "/". This means that it's using an absolute path instead of a relative path. As the error message says, this is not supported.("/" is the root directory on Linux systems.)</p>
</div>
<span class="comment-copy">Could you provide us with the code you are testing?</span>
<span class="comment-copy">You should copy and paste your code into your question instead of a screen shot. It makes it easier both to read and to search to this question.</span>
<span class="comment-copy">Added code to the question.</span>
<span class="comment-copy">Yes, I had added 2 for completeness since there are so many different types of results here. However, you are correct for forward slash not present for 2. In any case, how does this explain the difference between 3 and 4 (where slash has been added for the manual path string creation)</span>
<span class="comment-copy">@Rupendra I don't have a console to play with right now, but I reckon it's because the argument to glob is mixing forward slashes and back slashes. Going through pathlib takes care of that automatically for you.</span>
