<div class="post-text" itemprop="text">
<p>This is data from a lab experiment (around 717 lines of data). Rather than trying to excell it, I want to import and graph it on either python or matlab. I'm new here btw... and am a student!</p>
<blockquote>
<pre><code>""
"Test Methdo","exp-l Tensile with Extensometer.msm"
"Sample I.D.","Sample108.mss"
"Speciment Number","1"

"Load (lbf)","Time (s)","Crosshead (in)","Extensometer (in)"

62.638,0.900,0.000,0.00008
122.998,1.700,0.001,0.00012
</code></pre>
<p>more numbers : see <a href="https://i.stack.imgur.com/xFrao.jpg" rel="nofollow noreferrer">Screenshot of more data from my file</a></p>
</blockquote>
<p>I just can't figure out how to read the line up until a comma. Specifically, I need the Load numbers for one of my arrays/list, so for example on the first line I only need 62.638 (which would be the first number on my first index on my list/array).</p>
<p>How can I get an array/list of this, something that iterates/reads the list and ignores strings?</p>
<p>Thanks!</p>
<p>NOTE: I use Anaconda + Jupyter Notebooks for Python &amp; Matlab (school provided software).</p>
<p>EDIT: Okay, so I came home today and worked on it again. I hadn't dealt with CSV files before, but after some searching I was able to learn how to read my file, somewhat.</p>
<pre><code>import csv
from itertools import islice

with open('Blue_bar_GroupD.txt','r') as BB:
    BB_csv = csv.reader(BB)
    x = 0
    BB_lb = []
    while x &lt; 7: #to skip the string data
        next(BB_csv)
        x+=1
    for row in islice(BB_csv,0,758):
        print(row[0]) #testing if I can read row data
</code></pre>
<p>Okay, here is where I am stuck. I want to make an arraw/list that has the 0th index value of each row. Sorry if I'm a freaking noob!</p>
<p>Thanks again!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can skip all lines till the first data row and then parse the data into a list for later use - 700+ lines can be easily processd in memory. </p>
<p>Therefor you need to:</p>
<ul>
<li>read the file line by line 

<ul>
<li>remember the last non-empty line before number/comma/dot ( == header )</li>
<li>see if the line is only number/comma/dot,  else increase a skip-counter (== data )</li>
</ul></li>
<li>seek to 0</li>
<li>skip enough lines to get to header or data</li>
<li>read the rest into a data structure </li>
</ul>
<hr/>
<p>Create test file:</p>
<pre><code>text = """
""
"Test Methdo","exp-l Tensile with Extensometer.msm"
"Sample I.D.","Sample108.mss"
"Speciment Number","1"

"Load (lbf)","Time (s)","Crosshead (in)","Extensometer (in)"

62.638,0.900,0.000,0.00008
122.998,1.700,0.001,0.00012
""" 
with open ("t.txt","w") as w:
    w.write(text)
</code></pre>
<p>Some helpers and the skipping/reading logic:        </p>
<pre><code>import re
import csv

def convert_row(row):
    """Convert one row of data into a list of mixed ints and others.
    Int is the preferred data type, else string is used - no other tried."""
    d = []
    for v in row:
        try:
            # convert to int &amp;&amp; add
            d.append(float(v))
        except: 
            # not an int, append as is
            d.append(v)
    return d

def count_to_first_data(fh):
    """Count lines in fh not consisting of numbers, dots and commas.
    Sideeffect: will reset position in fh to 0."""
    skiplines = 0
    header_line = 0
    fh.seek(0)
    for line in fh:
        if re.match(r"^[\d.,]+$",line):
            fh.seek(0)
            return skiplines, header_line
        else:
            if line.strip():
                header_line = skiplines
            skiplines += 1
    raise ValueError("File does not contain pure number rows!")
</code></pre>
<p>Usage of helpers / data conversion:</p>
<pre><code>data = []
skiplines = 0
with open("t.txt","r") as csvfile:
    skip_to_data, skip_to_header = count_to_first_data(csvfile)

    for _ in range(skip_to_header): # skip_to_data if you do not want the headers
        next(csvfile)
    reader = csv.reader(csvfile, delimiter=',',quotechar='"')
    for row in reader:
        row_data = convert_row(row) 
        if row_data:
            data.append(row_data)

print(data)
</code></pre>
<p>Output (reformatted):</p>
<pre><code>[['Load (lbf)', 'Time (s)', 'Crosshead (in)', 'Extensometer (in)'], 
 [62.638, 0.9, 0.0, 8e-05], 
 [122.998, 1.7, 0.001, 0.00012]]
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer">re.match</a></li>
<li><a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">csv.reader</a></li>
<li><a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">Method of file objekts (i.e.: seek())</a></li>
</ul>
<hr/>
<p>With this you now have "clean" data that you can use for further processing - including your headers. </p>
<p>For visualization you can have a look at <a href="https://matplotlib.org/" rel="nofollow noreferrer">matplotlib</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend reading your file with python</p>
<pre><code>data = []
with open('my_txt.txt', 'r') as fd:
    # Suppress header lines
    for i in range(6):
        fd.readline()
    # Read data lines up to the first column
    for line in fd:
        index = line.find(',')
        if index &gt;= 0:
            data.append(float(line[0:index]))
</code></pre>
<p>leads to a list containing your data of the first column</p>
<pre><code>&gt;&gt;&gt; data
[62.638, 122.998]
</code></pre>
<p>The MATLAB solution is less nice, since you have to know the number of data lines in your file (which you do not need to know in the python solution)</p>
<pre><code>n_header = 6
n_lines = 2    % Insert here 717 (as you mentioned)

M = csvread('my_txt.txt', n_header, 0, [n_header 0 n_header+n_lines-1 0])
</code></pre>
<p>leads to:</p>
<pre><code>&gt;&gt; M
M = 
    62.6380
    122.9980
</code></pre>
<p>For the sake of clarity: You can also use MATLABs <code>textscan</code> function to achieve what you want without knowing the number of lines, but still, the python code would be the better choice in my opinion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on your format, you will need to do 3 steps. One, read all lines, two, determine which line to use, last, get the floats and assign them to a list.</p>
<p>Assuming you file name is name.txt, try:</p>
<pre><code>f = open("name.txt", "r")
all_lines = f.readlines()
grid = []
for line in all_lines:
    if ('"' not in line) and (line != '\n'):
        grid.append(list(map(float, line.strip('\n').split(','))))
f.close()
</code></pre>
<p>The grid will then contain a series of lists containing your group of floats.</p>
<p>Explanation for fun:
In the "for" loop, i searched for the double quote to eliminate any string as all strings are concocted between quotes. The other one is for skipping empty lines.
Based on your needs, you can use the list <em>grid</em> as you please. For example, to fetch the first line's first number, do</p>
<pre><code>grid[0][0]
</code></pre>
<p>as python's list counts from 0 to n-1 for n elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is super simple in Matlab, just 2 lines:</p>
<pre><code>data = dlmread('data.csv', ',', 6,0);
column1 = data(:,1);
</code></pre>
<p>Where 6 and 0 should be replaced by the row and column offset you want. So in this case, the data starts at row 7 and you want all the columns, then just copy over the data in column 1 into another vector.</p>
<p>As another note, try typing doc dlmread in matlab - it brings up the help page for dlmread. This is really useful when you're looking for matlab functions, as it has other suggestions for similar functions down the bottom.</p>
</div>
<span class="comment-copy">Please update what have you tried so far.</span>
<span class="comment-copy">Since itâ€™s CSV why not just read it as such and then process further? PANDAS has routines for that and will surely be useful in the future for data processing anyway</span>
<span class="comment-copy">Please do not post text such as data, code, or error messages on SO, post the text directly in your question.</span>
<span class="comment-copy">I hadn't dealt with CSV numbers before, first time, but I think I figured it out, just need to convert to an array/list.</span>
