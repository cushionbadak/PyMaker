<div class="post-text" itemprop="text">
<p>I'm working on a code to read and display the results of a Finite Element Analysis (FEA) calculation. The results are stored in several (relatively big) text files that contain a list of nodes (ID number, location in space) and lists for the physical fields of relevance (ID of node, value of the field on that point).</p>
<p>However, I have noticed that when I'm running a FEA case in the background and I try to run my code at the same time it returns errors, not always the same one and not always at the same iteration, all seemly at random and without any modification to the code or to the input files whatsoever, just by hitting the RUN button seconds apart between runs.</p>
<p>Example of the errors that I'm getting are:</p>
<pre><code>keys[key] = np.round(np.asarray(keys[key]),7)
TypeError: can't multiply sequence by non-int of type 'float'

#-------------------------------------------------------------------------

triang = tri.Triangulation(x, y)
ValueError: x and y arrays must have a length of at least 3

#-------------------------------------------------------------------------

line = [float(n) for n in line]
ValueError: could not convert string to float: '0.1225471E'
</code></pre>
<p>In case you are curious, this is my code (keep in mind that it is not finished yet and that I'm a mechanical engineer, not a programmer). Any feedback on how to make it better is also appreciated:</p>
<pre><code>import matplotlib.pyplot as plt
import matplotlib.tri as tri
import numpy as np
import os

triangle_max_radius = 0.003
respath = 'C:/path'
fields = ['TEMPERATURE']

# Plot figure definition --------------------------------------------------------------------------------------
fig, ax1 = plt.subplots()
fig.subplots_adjust(left=0, right=1, bottom=0.04, top=0.99)
ax1.set_aspect('equal')
# ------------------------------------------------------------------------------------------------------------- 

# Read outputfiles --------------------------------------------------------------------------------------------
resfiles = [f for f in os.listdir(respath) if (os.path.isfile(os.path.join(respath,f)) and f[:3]=='csv')]
resfiles = [[f,int(f[4:])] for f in resfiles]
resfiles = sorted(resfiles,key=lambda x: (x[1]))
resfiles = [os.path.join(respath,f[:][0]).replace("\\","/") for f in resfiles]
# ------------------------------------------------------------------------------------------------------------- 

# Read data inside outputfile ---------------------------------------------------------------------------------    
for result_file in resfiles:
    keys = {}
    keywords = []
    with open(result_file, 'r') as res:
        for line in res:
            if line[0:2] == '##':
                if len(line) &gt;= 5:
                    line = line[:3] + line[7:]
            line = line.replace(';',' ')
            line = line.split()
            if line:
                if line[0] == '##':
                    if len(line) &gt;= 3:
                        keywords.append(line[1])
                        keys[line[1]] = []
                elif line[0] in keywords:
                    curr_key = line[0]
                else:
                    line = [float(n) for n in line]
                    keys[curr_key].append(line)

    for key in keys:
        keys[key] = np.round(np.asarray(keys[key]),7)

    for item in fields:
        gob_temp = np.empty((0,4))
        for node in keys[item]:
            temp_coords, = np.where(node[0] == keys['COORDINATES'][:,0])
            gob_temp_coords = [node[0], keys['COORDINATES'][temp_coords,1], keys['COORDINATES'][temp_coords,2], node[1]]
            gob_temp = np.append(gob_temp,[gob_temp_coords],axis=0)

        x = gob_temp[:,1]
        y = gob_temp[:,2]
        z = gob_temp[:,3]
        triang = tri.Triangulation(x, y)

        triangles = triang.triangles
        xtri = x[triangles] - np.roll(x[triangles], 1, axis=1)
        ytri = y[triangles] - np.roll(y[triangles], 1, axis=1)
        maxi = np.max(np.sqrt(xtri**2 + ytri**2), axis=1)
        triang.set_mask(maxi &gt; triangle_max_radius)

        ax1.tricontourf(triang,z,100,cmap='plasma')
        ax1.triplot(triang,color="black",lw=0.2)

plt.show()
</code></pre>
<p>So back to the question, is it possible for the accuracy/performance of python to be affected by CPU load or any other 'external' factors? Or that's not an option and there's definitively something wrong with my code (which works well on other circumstances by the way)?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, other processes only affect <a href="https://en.wikipedia.org/wiki/Preemptive_multitasking" rel="nofollow noreferrer">how often your process gets time slots to execute</a> -- i.e., from a user's perspective, how quickly it completes its job.</p>
<p><strong>If you're having errors under load, this means there are errors in your program's logic</strong> -- most probably, <a href="https://en.wikipedia.org/wiki/Race_condition" rel="nofollow noreferrer">race conditions</a>. <strong>They basically boil down to making assumptions about your environment that are no longer true when there's other activity in it.</strong> E.g.:</p>
<ul>
<li>Your program is multithreaded, and the logic makes assumptions about which order threads are executed in. (This includes assumptions about how long some task would take to complete.)</li>
<li>Your program is using shared resources (files, streams etc) that other processes are also using at the same time. (E.g. some other program is in the process of (over)writing a file while you're trying to read it. Or, if you're reading from a stream, not all data are available yet.)</li>
</ul>
</div>
<span class="comment-copy">I presume you're probably reading from files that are being simultaneously written from another program</span>
<span class="comment-copy">Good point. It Would be normal that performance gets screwed but accuracy is a other thing, i Would not expect that to happen</span>
<span class="comment-copy">@SamMason I'm not sure that that's the case, the software writes different text files for different moments in time, after these files are written they remain unchanged for the rest of the run, and I'm reading directly form those files.</span>
<span class="comment-copy">Maybe you should modify you code to work on copies of files and if there's an error like this, keep the copy around. That way, you can make sure you weren't looking at a file that was being modified or was incomplete.</span>
<span class="comment-copy">I agree with other comments, it is very likely that you're working on files that are incomplete/still being changed. That said, a few suggestions for the code (which is pretty good!): 1) If you're using Python 3, use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib <code>Path</code></a> API to help you manage the paths to your files 1a) If you're not using Python 3, please strongly consider upgrading 2) Rather than using <code>if line[0:2] ==</code>, you can say <code>if line.startswith('##'):</code> 3) The line <code>if line[0] == '##'</code> will never return True because the length of the comparison is wrong</span>
