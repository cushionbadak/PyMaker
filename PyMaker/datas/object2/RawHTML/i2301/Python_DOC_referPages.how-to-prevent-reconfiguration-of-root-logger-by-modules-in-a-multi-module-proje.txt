<div class="post-text" itemprop="text">
<p>I am using python 2.7 for a multi-module project. As mentioned <a href="https://docs.python.org/3/howto/logging.html#logging-from-multiple-modules" rel="nofollow noreferrer">here</a> I have configured logging in my main.py like below</p>
<pre><code>logging.basicConfig(
    format='%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
    datefmt='%d-%m-%Y:%H:%M:%S',
    filename='/home/ubuntu/logs/centralized_upgrade.log',
    level=logging.INFO)
</code></pre>
<p>In every other module wherever I have to log I am just making a call like below</p>
<pre><code>import logging
...
logging.info('Hello World')
</code></pre>
<p>But the doubt I am having is if in some module if root logger is again reconfigured (may be something like below)</p>
<pre><code>logging.basicConfig(
        format='%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s',
        datefmt='%d-%m-%Y:%H:%M:%S',
        filename='/home/ubuntu/logs/module.log',
        level=logging.INFO)
</code></pre>
<p>then all log messages will start going into the new file. Can someone let me know what is the best way to handle this? How can I prevent the reconfiguration of root logger? My intention is that logging configuration should stay same as defined in <code>main.py</code> irrespective of any reconfiguration done in any child modules.</p>
<p>In many places, it is recommended to not use root logger and define a logger like as mentioned <a href="https://stackoverflow.com/a/15727525/785523">here</a>. But as per my understanding in this case also if some module configures the root logger then log may go to a different file as all loggers inherit from root logger.</p>
</div>
<div class="post-text" itemprop="text">
<p>Posting the comment of @Lukas Graf as the answer here </p>
<blockquote>
<p>Not a complete answer, but: <code>logging.basicConfig</code> will not do anything
  if the root logger already has handlers configured for it. So if it's
  invoked multiple times, only the first one will apply the given
  configuration to the root logger.</p>
</blockquote>
</div>
<span class="comment-copy">Not a complete answer, but: <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow noreferrer"><code>logging.basicConfig</code></a> will not do anything if the root logger already has handlers configured for it. So if it's invoked multiple times, only the first one will apply the given configuration to the root logger.</span>
<span class="comment-copy">The real (if useless) answer is “don’t use modules that are so careless as to unconditionally alter global state”, whether it’s the root logger, the process’s signal dispositions, or the standard streams.</span>
<span class="comment-copy">Thanks @LukasGraf this will work for me now.</span>
