<div class="post-text" itemprop="text">
<p>what I try to do is to compile multiple files and that their output is a single module.</p>
<p><strong>project:</strong></p>
<pre><code>ModuleA
|
+--file1.py
|
+--file2.py
|
+--setup.py
</code></pre>
<p><strong>setup.py</strong></p>
<pre><code>from setuptools import setup

setup(
    name='example',
    version='1.0',
    url='',
    license='MIT',
    author='Francisco',
    author_email='',
    description='',
    package_dir={'ModuleA':'./*'},
    py_modules=['file1','file2'],
    zip_safe=False,
    include_package_data=True,
    platforms='any',
)
</code></pre>
<p>the output I need is
python setup.py install</p>
<pre><code>site-packages
|
+--ModuleA
   |
   +--file1.py
   +--file2.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>ModuleA</code> is technically a <a href="https://docs.python.org/3/glossary.html#term-regular-package" rel="nofollow noreferrer">package</a>. I suggest you to use the <code>find_packages</code> utility from setuptools:</p>
<pre><code>from setuptools import setup, find_packages

setup(
    name='example',
    version='1.0',
    url='',
    license='MIT',
    author='Francisco',
    author_email='',
    description='',
    packages=find_packages(),
    zip_safe=False,
    include_package_data=True,
    platforms='any',
)
</code></pre>
<p>The directory structure:</p>
<pre><code>$ tree
.
...
├── ModuleA
│   ├── file1.py
│   ├── file2.py
│   └── __init__.py
└── setup.py
</code></pre>
<p>Now building the package:</p>
<pre><code>$ python setup.py bdist_wheel
....
$ unzip -l dist/example-1.0-py2-none-any.whl 
Archive:  dist/example-1.0-py2-none-any.whl
  Length      Date    Time    Name
---------  ---------- -----   ----
        0  2018-09-27 21:53   ModuleA/file2.py
        0  2018-09-27 21:53   ModuleA/file1.py
        0  2018-09-27 21:53   ModuleA/__init__.py
       10  2018-09-27 21:53   example-1.0.dist-info/DESCRIPTION.rst
      305  2018-09-27 21:53   example-1.0.dist-info/metadata.json
        8  2018-09-27 21:53   example-1.0.dist-info/top_level.txt
       92  2018-09-27 21:53   example-1.0.dist-info/WHEEL
      163  2018-09-27 21:53   example-1.0.dist-info/METADATA
      693  2018-09-27 21:53   example-1.0.dist-info/RECORD
---------                     -------
     1271                     9 files
</code></pre>
</div>
<span class="comment-copy">Thanks, this works for me, but can it be done with the setup.py file in the same directory as the module?</span>
<span class="comment-copy">I am sorry but you can't. As long the modules belongs to a package, you are obliged to follow this directory structure.</span>
