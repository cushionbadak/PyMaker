<div class="post-text" itemprop="text">
<p>What I am trying to do is to analyse the frequency of the letters in a text. As an example, I will use here a small sentence, but all that is thought to analyse huge texts (so it's better to be efficient).</p>
<h1>Well, I have the following text:</h1>
<pre><code>test = "quatre jutges dun jutjat mengen fetge dun penjat"
</code></pre>
<p>Then I created a function which counts the frequencies</p>
<pre><code>def create_dictionary2(txt):
    dictionary = {}
    i=0
    for x in set(txt):
        dictionary[x] = txt.count(x)/len(txt)
    return dictionary
</code></pre>
<p>And then </p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt
test_dict = create_dictionary2(test)
plt.bar(test_dict.keys(), test_dict.values(), width=0.5, color='g')
</code></pre>
<p>I obtain 
<a href="https://i.stack.imgur.com/dnm6I.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dnm6I.png"/></a></p>
<p>ISSUES:
I want to see all the letters, but some of them are not seen (Container object of 15 artists) How to expand the histogram?
Then, I would like to sort the histogram, to obtain something like from this
<a href="https://i.stack.imgur.com/HW7Q7.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/HW7Q7.png"/></a></p>
<p>this
<a href="https://i.stack.imgur.com/ZyFuh.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ZyFuh.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>For counting we can use a <a href="https://docs.python.org/3/library/collections.html#counter-objects" rel="nofollow noreferrer"><code>Counter</code></a> object. Counter also supports getting key-value pairs on the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">most common</a> values:</p>
<pre><code>from collections import Counter

import numpy as np
import matplotlib.pyplot as plt

c = Counter("quatre jutges dun jutjat mengen fetge dun penjat")
plt.bar(*zip(*c.most_common()), width=.5, color='g')
</code></pre>
<p>The <code>most_common</code> method returns a list of key-value tuples. The <code>*zip(*..)</code> is used to unpack (see <a href="https://stackoverflow.com/a/18458953/1189656">this answer</a>).</p>
<p>Note: I haven't updated the width or color to match your result plots.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another solution using pandas:</p>
<pre><code>import pandas as pd
import matplotlib.pyplot as plt

test = "quatre jutges dun jutjat mengen fetge dun penjat"

# convert input to list of chars so it is easy to get into pandas 
char_list = list(test)

# create a dataframe where each char is one row
df = pd.DataFrame({'chars': char_list})
# drop all the space characters
df = df[df.chars != ' ']
# add a column for aggregation later
df['num'] = 1
# group rows by character type, count the occurences in each group
# and sort by occurance
df = df.groupby('chars').sum().sort_values('num', ascending=False) / len(df)

plt.bar(df.index, df.num, width=0.5, color='g')
plt.show()
</code></pre>
<p>Result:</p>
<p><a href="https://i.stack.imgur.com/8Mysk.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/8Mysk.png"/></a></p>
<p><strong>Edit</strong>: I timed my and ikkuh's solutions</p>
<p>Using counter: 10000 loops, best of 3: 21.3 Âµs per loop</p>
<p>Using pandas groupby: 10 loops, best of 3: 22.1 ms per loop</p>
<p>For this small dataset, Counter is definately a LOT faster. Maybe i'll time this for a bigger set when i have time.</p>
</div>
<span class="comment-copy">Okay, but this doesn't sort the bars of the histogram. I mean, I obtain the same result..</span>
<span class="comment-copy">Not sure why it is not sorted for you. What is your output for <code>c.most_common()</code>?</span>
<span class="comment-copy">Wow this is slick. :-)</span>
<span class="comment-copy">This is the output of most_common: [('e', 7),  (' ', 7),  ('t', 6),  ('u', 5),  ('n', 5),  ('j', 4),  ('a', 3),  ('g', 3),  ('d', 2),  ('q', 1),  ('r', 1),  ('s', 1),  ('m', 1),  ('f', 1),  ('p', 1)]</span>
<span class="comment-copy">Is <code>plt.bar(['a', 'b', 'c'], [10, 5, 1])</code> sorted for you?</span>
<span class="comment-copy">I have tried your code, but it doesnt appear sorted. Why?</span>
<span class="comment-copy">@alienflow I don't know, the code i posted works with the test data you provided. Did you leave something out when copying? What version of pandas do you have installed?</span>
<span class="comment-copy">I'm using jupyter for python and version 0.22.0 pandas. I copied everything. Won't it be for using jupyter then?</span>
<span class="comment-copy">Actually, I have jsut tried the same in PYCHARM and the same result :( This is a nightmare</span>
<span class="comment-copy">@alienflow Is the picture above sorted correctly for you? How do you want the letters sorted?</span>
