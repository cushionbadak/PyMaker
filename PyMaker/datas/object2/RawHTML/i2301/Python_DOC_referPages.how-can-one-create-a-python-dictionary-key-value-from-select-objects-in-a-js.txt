<div class="post-text" itemprop="text">
<p>I have a file with multiple JSON lines as shown below.</p>
<pre><code>{"status str":null,"id":563221, "filter":"low","text" : "Grass is green"}
{"status str":null,"id":612835, "filter":"high","text" : "Textual blue"}
</code></pre>
<p>My desired output should show only the ID number and the "Grass is green" as a [key : value] pair as in dictionaries in Python : </p>
<p>563221 : "Grass is green"</p>
<p>612835 : "Textual blue"</p>
<p>I am currently using ObjectPath to query. Using the tuples, I can output all the data but I can't select sections of the data. Below is the code that I am using.</p>
<pre><code>read_data = []
with open(fileName, 'r') as file_to_read:
    for line in filetoread:
        json_tree = objectpath.Tree(read_data)
        dict = {tuple(json_tree.execute('$.id')) : tuple(json_tree.execute('$.text'))}
        line = next(filetoread)
return dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the json library to translate each line of the file to json then easily extract the data you need.</p>
<pre><code>import json

dict = {}
with open(fileName, 'r') as file_to_read:
    for line in filetoread:
        json_line = json.loads(line)
        dict[json_line['id']] = json_line['text']
return dict
</code></pre>
<p>json.loads(json_string) converts the string in json_string to json.</p>
</div>
<div class="post-text" itemprop="text">
<p>You almost got it. You need to deserialize your json first using the <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer">json.loads</a> function and then pass it to the <code>objectpath.Tree</code>. </p>
<p>For example:</p>
<pre><code>import json
import objectpath

data = [
  '{"status str":null,"id":563221, "filter":"low","text" : "Grass is green"}',
  '{"status str":null,"id":612835, "filter":"high","text" : "Textual blue"}'
]

for line in data: 
    jt = objectpath.Tree(json.loads(line))
    d = {jt.execute('$.id') : jt.execute('$.text')} 
    print(d)
</code></pre>
<p>results in </p>
<pre><code>{563221: 'Grass is green'}
{612835: 'Textual blue'}
</code></pre>
<p>And naming your variable <code>dict</code> is not a good idea, because you will override the python built-in class <code>dict</code>.</p>
<p>Applying this to your code results in</p>
<pre><code>read_data = [] 
with open(fileName, 'r') as file_to_read:
    for line in file_to_read:
        json_tree = objectpath.Tree(json.loads(line))
        read_data.append({json_tree.execute('$.id') : json_tree.execute('$.text')})

print(read_data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think use of objectpath is unnecessary. You can do it by really simple way thanks to json package.</p>
<p>Content of data.json:</p>
<pre><code>{"status str":null,"id":563221, "filter":"low","text" : "Grass is green"}
{"status str":null,"id":612835, "filter":"high","text" : "Textual blue"}
</code></pre>
<p>code:</p>
<pre><code>import json

file_name = "data.json"

with open(file_name, 'r') as file_to_read:
    for line in file_to_read:
        json_object = json.loads(line)
        dictionary = {json_object["id"]: json_object["text"]}

print(dictionary)
</code></pre>
<p>Output:</p>
<pre><code>{563221: 'Grass is green'}
{612835: 'Textual blue'}
</code></pre>
</div>
