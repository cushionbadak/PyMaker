<div class="post-text" itemprop="text">
<p>I am trying to figure out how to pass variables between (both directions) a python file and RobotFramework.  I am aiming to have a function in python gather values (folder names) and store them in a variable to then be used by another function which will then test each folder name in succession.  I am aiming to leverage RF's test reporting feature to generate a pass/fail report of which folders pass/fail.</p>
<p>(The folder names/locations will change which is why I do not want to hard code them and instead have opted to use some code to gather the folder names via a file picker menu - but the implementation of this will come once I get these more basic issues resolved :) )</p>
<p>I have found this example about getting a variable from a python file and having RF recognize it and do something with it - in this case Log To Console.  <a href="https://stackoverflow.com/questions/41787572/how-to-pass-values-from-python-code-to-variable-of-robot-framework">how to pass values from python code to variable of robot framework</a></p>
<p>I have tried the example in the link and it does work.  The first bit of trouble I run into is when a put the variable inside a function.</p>
<p>So my Python File (test.py) looks like this:</p>
<pre><code>    def create_the_thing():
        a = 'Testing'

    def do_the_thing():
        print(a)
</code></pre>
<p>My RF file (test.robot) looks like this:</p>
<pre><code>    *** Settings ***
    Variables    C:/.../Desktop/test/test.py
    Library      C:/.../Desktop/test/test.py

    *** Test Cases ***
    Make Something
        Create The Thing
        Log To Console    ${a}

    Do Something
        Do The Thing
</code></pre>
<p>I would expect that 'Create The Thing' would run, which would make the variable 'a'.  I would then think that variable 'a' would be passed back to RF (as it is in the linked example), which then would log it to the console.</p>
<p>I am at a loss as to how to get the variable 'a' passed between the 2 test cases.  Perhaps the Set Global Variable keyword?</p>
<p>Instead, I see "Variable ${a} not found" as the error for the first test and "NameError: global name 'a' is not defined" as the error for the second test.</p>
<p>I get that test 2 is failing because the variable is never passed back to RF in the first test, but is there not a way to have tests run as keywords and then return a variable that can be used later on in other tests?</p>
<hr/>
<p>Adding a new section to show how I am using the answer form Todor to solve my issue since comments are not accepting code.</p>
<p>Fixed Python file:</p>
<pre><code>    def create_the_thing():
        a = 'Testing'
        return a

    def do_the_thing(thing):
        print(thing)
</code></pre>
<p>Fixed RF file:</p>
<pre><code>    *** Settings ***
    Variables    [path_to_py_file]
    Library    [path_to_py_file]

   *** Test Cases ***

   Make Something
       ${thingy}    Create The Thing
       Set Global Variable    ${thingy}

   Do Something
       Do The Thing    ${thingy}
</code></pre>
<p>Now to see if I can get this all to work with Sikuli's implementation of RF :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you should read some more about variables scope in python - here's a bit too <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">technical explanation</a>, a relevant entry in the language's <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">FAQ</a> and <a href="https://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html" rel="nofollow noreferrer">something lighter</a>.</p>
<p>In essence, if you define a variable inside a function, it is bound to it, and its scope is limited to the function (e.g. its lifetime is only during the function execution). When the execution point leaves the function, that variable is no longer present.<br/>
When you think of it, this makes perfect sense - you don't want your global namespace polluted with all intermediate variables you used, plus that would lead to a lot conflicts and unexpected side effects.</p>
<p>And this is what happened with your code - the function <code>create_the_thing()</code> defined a variable - which was local to it, and not visible/existent for any other function in the same module.<br/>
I'm sure your code as given will throw the same NameError exception when you run it through python interpreter, no Robotframework involved.</p>
<p>There are different solutions to your problem, here are a couple.</p>
<h2>Use returned values and argument passing.</h2>
<p>This is the cleanest one - the function generating something (the files list in your case) returns it at the end of its execution; the function that uses a generated something (the same files list) accepts it as a calling argument. Thus you have isolation - each of them has a single (and different) purpose, and they don't have a hard dependency on one another. In python speak:</p>
<pre><code>def create_the_thing():
    a = 'Testing'
    return a

def do_the_thing(thing):
    print(thing)

the_thing = create_the_thing()
do_the_thing(the_thing)
</code></pre>
<p>Usage in RF:</p>
<pre><code>${thingy}=    Create The Thing
Do The Thing    ${thingy}
</code></pre>
<h2>Use global variables.</h2>
<p>A global variable is one defined at module scope level, and available to all its functions. Being available throughout you have to be careful in their usage (they are a shared state, with all the consequences of that), but are quite handy. So in python:</p>
<pre><code>a = 'I am global!'

def create_the_thing():
    global a
    a = 'Testing'

def do_the_thing():
    print(a)

do_the_thing()
# you get "I am global!"

create_the_thing()
do_the_thing()
# and now - "Testing"
</code></pre>
<p>As you can see, the change was defining the variable as such by using the <code>global</code> keyword, thus instructing the interpreter all changes are for the global variable "a", not for one limited to the scope of the function.</p>
<p>Usage in Robotframework - the same as in your sample.</p>
<hr/>
<p>There are also other approaches - like using the RF's <code>Set Global/Suite/Test Variable</code>, inside the python code or in RF keywords; it boils down to design choices.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get Varialbe <strong>a</strong> from your python function you should create one variable in RF for receive value from python function and you can  do following below code</p>
<pre><code>${a}=   Create The Thing
Set Global Variable     ${a}
Log To Console    ${a}
</code></pre>
<p>and your python code should be use <code>return</code> for return value</p>
<pre><code>def create_the_thing():
        a = 'Testing'
        return a
</code></pre>
<p>and here the link for Pass variables from python file to robot framework variables <a href="https://stackoverflow.com/questions/34426448/pass-variables-from-python-file-to-robot-framework-variables">link here</a> .</p>
</div>
<span class="comment-copy">Thanks for all the info and links!  Prior to posting my question I was messing around with the 'return' code in both Python and RF, but was not able to make the two work together.</span>
<span class="comment-copy">I was able to get this working with your example and also by using the global variable in RF.  If other are curious, here is what I am looking at now:  Python file: [code]         def create_the_thing():             a = 'Testing'             return a          def do_the_thing(thing):             print(thing) [/code]</span>
<span class="comment-copy">RF file:          *** Settings ***         Variables    [path_to_python_file]         Library    [path_to_python_file]          *** Test Cases ***          Make Something             ${thingy}    Create The Thing             Set Global Variable    ${thingy}          Do Something             Do The Thing  Sorry for the lack of formatting - I can't figure out why I can't do the same code markup in comments that I can in the original post.  Either way, thanks you for the solution, really appreciate it as I have been trying to figure this out for a few days now!</span>
<span class="comment-copy">NP; as for the code formatting in comments - they are really not designed for code snippets (on purpose). As you'd like to share what you implemented as working approach - I'd suggest for you to edit the original question, and add it as a new section. And, thanks for accepting the answer - that's the etiquette in SO for  answers that work for the original poster üëç</span>
