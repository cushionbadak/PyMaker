<div class="post-text" itemprop="text">
<p>I have the following data:</p>
<pre><code>Switch1
int1
int2
int3
int4
Switch2
int1
int2
int3
int4
int5
int6
int7
int8
Switch3
int1
int2
int3
int4
int5
int6
int7
</code></pre>
<p>Please help with Python 3 code to count all the items under each of the Switches (Switch1, 2, 3).  I do have the list of the Switches in a separate file if that makes it easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that your file content is stored in variable <code>s</code>, you can use <code>re.split</code> with a dict comprehension over an iterator to obtain the counts in a dict indexed by switch names:</p>
<pre><code>import re
i = iter(re.split('(Switch\d+)\n', s)[1:])
print({k: len(v.splitlines()) for k, v in zip(i, i)})
</code></pre>
<p>With your sample input, this outputs:</p>
<pre><code>{'Switch1': 4, 'Switch2': 8, 'Switch3': 7}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterate over the file. Each line will either be a new switch or something to count:</p>
<pre><code>switches = {}
latest = None
with open('data.txt') as f:
    for line in f:
        if line.startswith('Switch'):
            latest = line.strip()
        else:
            switches[latest] = switches.get(latest, 0) + 1
</code></pre>
<p>Alternatively, you could use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> instead of <code>get</code> to ensure that the dictionary is populated properly for each new key:</p>
<pre><code>from collections import defaultdict

switches = defaultdict(int)
with open('data.txt') as f:
    for line in f:
        if line.startswith('Switch'):
            latest = line.strip()
        else:
            switches[latest] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would reach each line, and every time I come across a line that includes the string "Switch", I count the following line and all subsequent lines until I reach another line that includes "Switch", to which then you reset your item counter and repeat.</p>
</div>
<span class="comment-copy">If you have any control over the format of your data file it would be wise use YAML.</span>
<span class="comment-copy">@RedCricket. Why?</span>
<span class="comment-copy">Go learn about yaml and python that's why <code>import yaml my_dict = yaml.load(open('./datafile.yaml'))  for key, value in my_dict.items():         print ( "%s has %s interfaces." % (key, len(my_dict[key])))</code></span>
<span class="comment-copy">Yeah, this is the solution I would do but with defaultdict int instead.</span>
<span class="comment-copy">@Anton. That was done in good enough taste that I'll leave it in. Thanks.</span>
<span class="comment-copy">If the data file was yaml you could simplify your script to <code>[ print ( "%s has %s interfaces." % (key, len(value))) for key, value in yaml.load(open('./datafile.yaml')).items() ]</code></span>
<span class="comment-copy">Thank you very much for the defaultdict solution.  I have just learned it but did not know how to apply it; I guess perhaps due to the non-programming background.  It will take some time to think like a programmer.  I have not seen yaml yet from my studying yet, perhaps it will come later.</span>
<span class="comment-copy">@theotherswan. Your question was closed, but you can (and should) still accept an answer.</span>
