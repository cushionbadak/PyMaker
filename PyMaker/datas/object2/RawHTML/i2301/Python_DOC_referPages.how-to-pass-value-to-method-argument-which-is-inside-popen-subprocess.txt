<div class="post-text" itemprop="text">
<p>This is my main python script:</p>
<pre><code>import time
import subprocess
def main():
   while(True):
       a=input("Please enter parameter to pass to subprocess:")
       subprocess.Popen(args="python child.py")
       print(f"{a} was started")
       time.sleep(5)
if __name__ == '__main__':
    main()
</code></pre>
<p>This is python child script named child.py:</p>
<pre><code>def main(a):
    while(True):
        print(a)

if __name__ == '__main__':
    main(a)
</code></pre>
<p>How to pass value to  argument a which is in the child subprocess?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use command line arguments, like this;</p>
<pre><code>import time
import subprocess

def main():
   while(True):
       a=input("Please enter parameter to pass to subprocess:")
       subprocess.Popen(["python", "child.py", a])
       print(f"{a} was started")
       time.sleep(5)

if __name__ == '__main__':
    main()
</code></pre>
<p>child.py:</p>
<pre><code>import sys

def main(a):
    while(True):
        print(a)

if __name__ == '__main__':
    a = sys.argv[1]
    main(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <code>subprocess.PIPE</code> to pass data between your main process and spawned subprocess.</p>
<p>Main script:</p>
<pre><code>import subprocess


def main():
    for idx in range(3):
        a = input(
            'Please enter parameter to pass to subprocess ({}/{}): '
            .format(idx + 1, 3))
        print('Child in progress...')
        pipe = subprocess.Popen(
            args='python child.py',
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE)
        pipe.stdin.write(str(a).encode('UTF-8'))
        pipe.stdin.close()
        print('Child output is:')
        print(pipe.stdout.read().decode('UTF-8'))


if __name__ == '__main__':
    main()
</code></pre>
<p>Child script:</p>
<pre><code>import sys
import time


def main(a):
    for dummy in range(3):
        time.sleep(.1)
        print(a)


if __name__ == '__main__':
    a = sys.stdin.read()
    main(a)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; python main.py
Please enter parameter to pass to subprocess (1/3): qwe
Child in progress...
Child output is:
qwe
qwe
qwe

Please enter parameter to pass to subprocess (2/3): qweqwe
Child in progress...
Child output is:
qweqwe
qweqwe
qweqwe

Please enter parameter to pass to subprocess (3/3): 123
Child in progress...
Child output is:
123
123
123
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to pass arguments to a child process is to use <a href="https://en.wikipedia.org/wiki/Command-line_interface#Arguments" rel="nofollow noreferrer">command line parameters</a>.</p>
<p>The first step is to rewrite <code>child.py</code> so that it accepts command line arguments. There is detailed information about parsing command line arguments in this question: <a href="https://stackoverflow.com/questions/1009860/how-to-read-process-command-line-arguments">How to read/process command line arguments?</a> For this simple example though, we will simply access the command line arguments through <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv</code></a>.</p>
<pre><code>import sys

def main(a):
    while(True):
        print(a)

if __name__ == '__main__':
    # the first element in the sys.argv list is the name of our program ("child.py"), so
    # the argument the parent process sends to the child process will be the 2nd element
    a = sys.argv[1]
    main(a)
</code></pre>
<p>Now <code>child.py</code> can be started with an argument like <code>python child.py foobar</code> and the text "foobar" will be used as the value for the <code>a</code> variable.</p>
<p>With that out of the way, all that's left is to rewrite <code>parent.py</code> and make it pass an argument to <code>child.py</code>. The recommended way to pass arguments with <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> is as a list of strings, so we'll do just that:</p>
<pre><code>import time
import subprocess

def main():
   while(True):
       a = input("Please enter parameter to pass to subprocess:")
       subprocess.Popen(["python", "child.py", a])  # pass a as an argument
       print(f"{a} was started")
       time.sleep(5)

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">If you want to continuously pass a value to a child process: you can use pipes like @Poolka has done or use a socket to write and read data.</span>
<span class="comment-copy">This is the correct answer if you want to continuously pass some value to a child.</span>
<span class="comment-copy">Hi @Poolka thank you very much - all works fine, could you tell me where you found information about the command pipe.stdin.write(str(a).encode('UTF-8')) ? I read <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a> but found no information about the command there. Actually it seems to me that I do not learn from standard library the write way since I often  do not get the needfull information from it.</span>
<span class="comment-copy">@ArtiomKozyrev I learned this from <code>Programming in Python 3: Complete Introduction</code> by Mark Summerfield. The book is in English and a little bit outdated (it is about Python 3.1) but it is a really <code>complete</code> introduction (not deep but very wide). I guess (while not sure) there are more fresh alternatives to this book.</span>
<span class="comment-copy">@ArtiomKozyrev <code>The Python 3 Standard Library by Example</code> by Doug Hellmann seems to have pretty wide coverage of Python 3 standard library potential. Just opinion based on the table of contents. Not sure if it is available for free.</span>
<span class="comment-copy">@Poolka thank you very much!</span>
