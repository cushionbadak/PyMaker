<div class="post-text" itemprop="text">
<p>I'm looking for a way to get (using Python) the maximum and minimum values of C types integers (ie <code>uint8</code>, <code>int8</code>, <code>uint16</code>, <code>int16</code>, <code>uint32</code>, <code>int32</code>, <code>uint64</code>, <code>int64</code>...) from Python.</p>
<p>I was expecting to find this in <code>ctypes</code> module</p>
<pre><code>In [1]: import ctypes
In [2]: ctypes.c_uint8(256)
Out[2]: c_ubyte(0)
In [3]: ctypes.c_uint8(-1)
Out[3]: c_ubyte(255)
</code></pre>
<p>but I couldn't find it.</p>
<p>Julia have great feature for this:</p>
<pre><code>julia&gt; typemax(UInt8)
0xff

julia&gt; typemin(UInt8)
0x00

julia&gt; typemin(Int8)
-128

julia&gt; typemax(Int8)
127
</code></pre>
<p>I'm pretty sure Python have something quite similar.</p>
<p>Ideally I'm even looking for a way to ensure that a given Python integer (which is said to be unbounded) can be converted safely in a C type integer of a given size.
When number is not in expected interval, it should raise an exception.</p>
<p>Currently overflow doesn't raise exception:</p>
<pre><code>In [4]: ctypes.c_uint8(256)
Out[4]: c_ubyte(0)
</code></pre>
<p>I saw this SO post <a href="https://stackoverflow.com/questions/7604966/maximum-and-minimum-values-for-ints">Maximum and Minimum values for ints</a> but it's a bit different as author is looking for min/max value of a Python integer... not a C integer (from Python)</p>
<p>I also noticed <a href="https://stackoverflow.com/questions/44123252/detecting-c-types-limits-limits-h-in-python">Detecting C types limits ("limits.h") in python?</a> but, even if it's quite related, it doesn't really answer my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to: <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">[Python 3]: Numeric Types - int, float, complex</a>:</p>
<blockquote>
<p>Integers have unlimited precision.</p>
</blockquote>
<p>Translated to code:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; i = 10 ** 100
&gt;&gt;&gt; i
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
&gt;&gt;&gt; len(str(i))
101
&gt;&gt;&gt; i.bit_length()
333
</code></pre>
</blockquote>
<p>On the other hand, each <em>C</em> type has a fixed size (depending on platform / architecture), as clearly shown in <a href="https://en.cppreference.com/w/cpp/language/types" rel="nofollow noreferrer">[CppReference]: Fundamental types</a>.</p>
<p>Since <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a> doesn't mention anything about types limits (note that there is some stuff that is not documented here), let's find that out manually.</p>
<p><em>code.py</em>:</p>
<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python3

import sys
from ctypes import c_int8, c_uint8, c_byte, c_ubyte, c_int16, c_uint16, \
    c_int32, c_uint32, c_int, c_uint, c_long, c_ulong, c_longlong, c_ulonglong, \
    c_int64, c_uint64, \
    sizeof


def limits(c_int_type):
    signed = c_int_type(-1).value &lt; c_int_type(0).value
    bit_size = sizeof(c_int_type) * 8
    signed_limit = 2 ** (bit_size - 1)
    return (-signed_limit, signed_limit - 1) if signed else (0, 2 * signed_limit - 1)


def main():
    test_types = [
        c_int8,
        c_uint8,
        c_byte,
        c_ubyte,
        c_int16,
        c_uint16,
        c_int32,
        c_uint32,
        c_int,
        c_uint,
        c_long,
        c_ulong,
        c_longlong,
        c_ulonglong,
        c_int64,
        c_uint64
    ]
    for test_type in test_types:
        print("{:s} limits: ({:d}, {:d})".format(test_type.__name__, *limits(test_type)))


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>Code relies on the fact that for a certain integral type, its interval (and limits are interval's endpoints) is:

<ul>
<li><strong>signed</strong> <sub><em>(<strong>2</strong>'s complement)</em></sub>: <strong><em>[-(2 <sup>bit_size - 1</sup>), 2 <sup>bit_size - 1</sup> - 1]</em></strong></li>
<li><strong>unsigned</strong>: <strong><em>[0, 2 <sup>bit_size</sup> - 1]</em></strong></li>
</ul></li>
<li>To check the a type's <em>signum</em>, use <strong><em>-1</em></strong> (which will automatically be converted to the upper limit (due to <em>wrap around arithmetic</em>) by <em>unsigned</em> types)</li>
<li>There are lots of duplicates the output (below), because some types are simply "aliases" to others</li>
<li>The rest of your task (creationg a function that compares an <em>Python</em> int to the <em>ctypes</em> type limits, and raises an exception if it isn't) is trivial, so I didn't implement it</li>
<li>This is for demonstrating purpose only, so I didn't do any argument check</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) e:\Work\Dev\StackOverflow\q052475749&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32

c_byte limits: (-128, 127)
c_ubyte limits: (0, 255)
c_byte limits: (-128, 127)
c_ubyte limits: (0, 255)
c_short limits: (-32768, 32767)
c_ushort limits: (0, 65535)
c_long limits: (-2147483648, 2147483647)
c_ulong limits: (0, 4294967295)
c_long limits: (-2147483648, 2147483647)
c_ulong limits: (0, 4294967295)
c_long limits: (-2147483648, 2147483647)
c_ulong limits: (0, 4294967295)
c_longlong limits: (-9223372036854775808, 9223372036854775807)
c_ulonglong limits: (0, 18446744073709551615)
c_longlong limits: (-9223372036854775808, 9223372036854775807)
c_ulonglong limits: (0, 18446744073709551615)
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Great answer @CristiFati I wonder if these limits function shouldn't be add into Python ctypes source directly (or adding max/min attributes to <code>ctypes.c_</code> types. Being able to convert into C type integers raising exception can also be done quite easily using <a href="https://pastebin.com/cvm95m1x" rel="nofollow noreferrer">pastebin.com/cvm95m1x</a> but maybe this should be part of Python core. What is your opinion?</span>
<span class="comment-copy"><code>issigned</code> adding a issigned attribute to <code>ctypes.c_ types</code> could also be an interesting idea</span>
<span class="comment-copy">You, (or I) can submit a patch to <i>Python</i> (I've done this before, some were accepted, some were rejected). Regarding exception raising, I don't think it will make it because, in <i>C</i> a value is truncated / silently converted to fit the type size (with the appropriate compiler warning, of course). Yes I suppose both things could come in handy, but most of the people that need to work at this level would also know how to do it. And the code is very short. I'm not sure how to point to them this question, and if they find smth useful they can get it.</span>
<span class="comment-copy">But maybe it's already present (and I don't know it) or it's in the newer versions, or there is a feature request for it. Will have to check. And thank you! BYW: i think that <code>ctype_convert</code> should <code>return c_n</code>.</span>
<span class="comment-copy">Issue opened at <a href="https://bugs.python.org/issue34810" rel="nofollow noreferrer">bugs.python.org/issue34810</a></span>
