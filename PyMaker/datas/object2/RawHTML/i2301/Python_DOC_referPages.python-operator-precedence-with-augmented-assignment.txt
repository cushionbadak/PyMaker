<div class="post-text" itemprop="text">
<p>It seems this question only answered for Java but I would like to know how it works in Python. So are these the same?</p>
<pre><code>a += b / 2
</code></pre>
<p>and</p>
<pre><code>a += (b / 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, those are the same. Python's augmented assignment is <em>not an expression</em>, it is a statement, and doesn't play in expression precedence rules. <code>+=</code> is not an operator, and instead it's part of the augmented assignment statement syntax.</p>
<p>So everything <em>to the right of the <code>+=</code></em> is an expression, but <code>+=</code> itself is not, so the assignment will always be handled last.</p>
<p>And because (augmented) assignment is not an expression, it can't produce a value to use in a surrounding expression either. There is no <code>(a += b) / 2</code>, that'd be a syntax error, and certainly no <code>if (a += b / 2):</code> or other such shenanigans.</p>
<p>See the <a href="https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements" rel="noreferrer">reference documentation on <em>Augmented assignment statements</em></a>, which states the grammar is:</p>
<blockquote>
<pre><code>augmented_assignment_stmt ::=  augtarget augop (expression_list | yield_expression)
augtarget                 ::=  identifier | attributeref | subscription | slicing
augop                     ::=  "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**="
                           | "&gt;&gt;=" | "&lt;&lt;=" | "&amp;=" | "^=" | "|="
</code></pre>
</blockquote>
<p>So the <code>augop</code> is part of the statement syntax, and only the part following is an expression (specifically, either a <code>expression_list</code> or <code>yield_expression</code> grammar rule).</p>
<p>Furthermore, the explanation shows:</p>
<blockquote>
<p>An augmented assignment evaluates the target (which, unlike normal assignment statements, cannot be an unpacking) and the expression list, performs the binary operation specific to the type of assignment on the two operands, and assigns the result to the original target. The target is only evaluated once.</p>
</blockquote>
<p>So the <code>augtarget</code> part is handled first, the expression list (or yield expression) is handled second, and then the augmented assignment applies the operator and assigns back the result.</p>
<p>Furthermore, the expressions reference documentation <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">does include a precedence table</a>, but that table doesn't include assignments (augmented or otherwise), simply because assignments are not expressions but statements.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short answer</strong>: <code>+=</code> is an <em>augmented assignment</em>, and if we take the grammar into account, this is parsed higher in the syntax tree, than the operators in general (and hence the <code>/</code> operator in particular).</p>
<p>Python sees the <code>+=</code> as an "<em>augmented assignment</em>". If we inspect the <a href="https://docs.python.org/3/reference/grammar.html#full-grammar-specification" rel="nofollow noreferrer"><em>Python grammar</em></a> we see:</p>
<blockquote><pre><code>augassign: (<b>'+='</b> | '-=' | '*=' | '@=' | '/=' | '%=' | '&amp;=' | '|=' | '^=' |
            '&lt;&lt;=' | '&gt;&gt;=' | '**=' | '//=')</code></pre></blockquote>
<p>Now the grammar also enforces the <em>priority rules</em> when parsing. If we look at the grammar that is related to <code>stmt</code> ("<em>statement</em>"), we see:</p>
<blockquote><pre><code>stmt: <b>simple_stmt</b> | compound_stmt
<b>simple_stmt</b>: <b>small_stmt</b> (';' small_stmt)* [';'] NEWLINE
<b>small_stmt</b>: (<b>expr_stmt</b> | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
<b>expr_stmt</b>: testlist_star_expr (annassign | augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist_star_expr))*)</code></pre></blockquote>
<p>Exhaustively explaining all the other statements (like the <code>del_statement</code>) would take too long, but the <code>expr_stmt</code> is the only one that leads to an <code>augassign</code> (and <code>augassign</code> is the only variable that results in a <code>+=</code> token). So we can ignore the other expressions.</p>
<p>Now if we "specialize" the expression of <code>expr_stmt</code> such that it has an <code>augassign</code> in it, we retrieve the <em>production rule</em>:</p>
<pre><code>expr_stmt: testlist_star_expr augassign (yield_expr|testlist)</code></pre>
<p>The <code>testlist_star_expr</code> is a variable that results in an identifier (or multiple identifiers in case of sequence unpacking), etc.</p>
<p>On the right we see a <code>yield_expr</code>, or a <code>test_list</code>. A <code>test_list</code> can result in comma separated expressions, with:</p>
<blockquote>
<pre><code>testlist: test (',' test)* [',']
</code></pre>
</blockquote>
<p>This <code>test</code> allows to write ternary operators, but that is <em>not</em> mandatory:</p>
<blockquote>
<pre><code>test: or_test ['if' or_test 'else' test] | lambdef
</code></pre>
</blockquote>
<p>We can take the <code>or_test</code> variable, which is used to group expressions with an <code>or</code> separator (again optional), since the <code>or</code> has the highest precedence.</p>
<blockquote>
<pre><code>or_test: and_test ('or' and_test)*
</code></pre>
</blockquote>
<p>Then follows the <code>and_test</code> which, as the name probably suggests, allows us to write <code>and</code> operators:</p>
<blockquote>
<pre><code>and_test: not_test ('and' not_test)*
</code></pre>
</blockquote>
<p>then follows the <code>not</code> operator (with the <code>not_test</code>):</p>
<blockquote>
<pre><code>not_test: 'not' not_test | comparison
</code></pre>
</blockquote>
<p>We can have an arbitrary number of <code>not</code>s in front, but eventually we will pick the <code>comparison</code>.</p>
<p>If we look at the production roule for the <code>comparison</code>, we see:</p>
<blockquote>
<pre><code>comparison: expr (comp_op expr)*
</code></pre>
</blockquote>
<p>This thus allows <em>comparator chaining</em>, like <code>x &lt;= y &lt; z</code>, next we look at the <code>expr</code>:</p>
<blockquote>
<pre><code>expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&amp;' shift_expr)*
shift_expr: arith_expr (('&lt;&lt;'|'&gt;&gt;') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'@'|'/'|'%'|'//') factor)*
</code></pre>
</blockquote>
<p>So this defines precedence rules, and we see that <code>|</code> takes precedence over <code>^</code>, that takes precedence over <code>&amp;</code>, and so on until we see a <code>term</code> is a sequence of <code>factor</code>s with operators of <code>'*'</code>, <code>'@'</code>, <code>'/'</code>, <code>'%'</code>, and <code>//</code>, so here we finally "consume" our <code>*</code>. This thus means that the <code>/</code> is lower in the syntax tree than the <code>+=</code> node.</p>
<p>Hence the way Python parses this expression is:</p>
<pre><code>a += (b / 2)
</code></pre>
</div>
<span class="comment-copy">Short answer: Yes</span>
<span class="comment-copy"><code>+=</code> is not a "pure" operator, it is an assignment. It only allows a variable name in front, so there is one one straightforward way to interpret this.</span>
<span class="comment-copy">Have you tried? To me it looks like (after testing).</span>
<span class="comment-copy">yes, they are (as there is an assignment in <code>+=</code>). have a look at <a href="https://docs.python.org/3/reference/expressions.html?highlight=precedence#evaluation-order" rel="nofollow noreferrer">'evaluation order' and 'operator precedence'</a>.</span>
<span class="comment-copy">Yes. Unlike Java, an assignment (<code>=</code> but also <code>+=</code>, ...) isn't an expression in Python, so <code>(a += b) / 2</code> would be an error anyway.</span>
