<div class="post-text" itemprop="text">
<ul>
<li>A <code>subprocess.check_output</code> of a bash script returns a query from a MySQL table as a string.</li>
<li><code>split()</code> gives me a list, that contains each table cell read from the left top as an item, like so:</li>
</ul>
<blockquote>
<p>list = [ 'column1_label', 'column2_label', ..., 'column1_row1_value',
  'column2_row1_value, ..., 'column1_row2_value', 'column2_row2_value' ]</p>
</blockquote>
<p>The table has a static 12 columns. Now I want to use the first 12 items of the list (which are the column labels in the table) to be taken as "2nd level" keys in a nested dictionary, like so:</p>
<pre><code>{'row1': {'column1': 'value', 'column2': 'value', 'column3': 'value', ...}
{'row2': {'column1': 'value', 'column2': 'value', 'column3': 'value', ...}
</code></pre>
<p>My python skills are to basic still. I don't even know where to start. There a some answered questions covering list to nested dict conversion, but none answer this case specifically.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary comprehension with <code>enumerate</code>:</p>
<pre><code>L = ['column1_label', 'column2_label', 1, 2, 3, 4, 5, 6]

k, m = 2, 2
res = {f'row{i}': dict(zip(L[:k], row)) for i, row in \
       enumerate(zip(L[k::m], L[k+1::m]), 1)}
</code></pre>
<p>Result:</p>
<pre><code>{'row1': {'column1_label': 1, 'column2_label': 2},
 'row2': {'column1_label': 3, 'column2_label': 4},
 'row3': {'column1_label': 5, 'column2_label': 6}}
</code></pre>
<p>Of course, due to the unstructured nature of your input list you will have to manually amend <code>k, m</code> as appropriate. But the same principle applies.</p>
</div>
<div class="post-text" itemprop="text">
<p>Say this list is called <code>X</code> and the first <code>12</code> elements need to be made 2nd level keys.
Say you have got a list <code>Y</code> of length <code>12</code>, values corresponding to those 12 keys.</p>
<p>Assuming every row would correspond to it's own <code>X</code> and <code>Y</code> we can do this as</p>
<pre><code>outer_dict = {}
for i, row in enumerate(rows): # enumerate gives index along with the row
  X, Y = split(row) # assume this gets X and Y from each row 
  keys = X[:12] # first 12 values of X
  inner_dict = {key: value for (key, value) in zip(keys, Y)} # create inner dict
  outer_dict['row{0}'.format(i + 1)] = inner_dict # create new key for outer dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here <code>list</code> contains some of the value of the label. </p>
<pre><code>list = ['column1', 'column2', 'column3', 'column4', 'column5', 'column6', 'column7', 'column8', 'column9', 'column10', 'column11', 'column12',
        'column13', 'column14', 'column15', 'column16', 'column17', 'column18' , 'column19']
</code></pre>
<p>Accessing the first 12 elements of the list </p>
<pre><code> list_12 = list[:12]
</code></pre>
<p>You have a dictionary with the first level key. </p>
<pre><code>dictionary = {'row1':{}}
</code></pre>
<p>Loop through the <code>list_12</code> to create 2nd level key     </p>
<pre><code>for i in list_12:
    dictionary['row1'][i] = 'value'

print(dictionary)
</code></pre>
<p>output </p>
<blockquote>
<p>{'row1': {'column1': 'value', 'column2': 'value', 'column3': 'value',
  'column4': 'value', 'column5': 'value', 'column6': 'value', 'column7':
  'value', 'column8': 'value', 'column9': 'value', 'column10': 'value',
  'column11': 'value', 'column12': 'value'}}</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>My solution, inspired by PraveenRB's answer:</p>
<pre><code># Start bash script getSOAPconfig, with 2 arguments: 1 = host, 2 = db to query
# argv[1] is the first argument given when calling soap.generator.py

egon_external = str(subprocess.check_output(["./getSOAPconfig", sys.argv[1], backends[db]]).decode()).split()

# extract the labels of the column
col_labels = egon_external[:12]

# create a dictionary that uses the col_labels as key
def make_dict(i):
    start = 12*i+12
    i = 0
    result_dict = dict()
    for row in egon_external[start:start+12]:         # for every 12 items
        if i == 12: i = 0                             # in the egon_external list
        result_dict.update({col_labels[i]: row})      # use col_labels as key
        i += 1                                        # then start at col_labels[0] again.
    return result_dict

row_count = int((len(egon_external)-12)/12)
dict_list = []

# Make a list of dictionaries
for i in range(row_count):
    dict_list.append(make_dict(i))

# Now I can call each row by giving the row number (starting from 0) as list index
# of dict_list and the column name as 2nd level key, like so.
print(dict_list[-1]['ext_id'])
</code></pre>
<p>Thank you @all!</p>
</div>
<span class="comment-copy">Thanks, jpp. This seems the driest approach to me. At least for me it's not well readable though. Could you explain what enumerate() and zip() do?</span>
<span class="comment-copy">@anarchist912, I have generalised the solution so you only need to amend one input <code>k</code>, see <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> for more details.</span>
<span class="comment-copy">To get the first 12 items, you need <code>list[:12]</code>.</span>
<span class="comment-copy">PraveenRB, wouldn't the first key in your example's inner dictionary be 'column13'?</span>
<span class="comment-copy">What I am missing is how you would achieve getting every next 12 values per row from the input list. See my own answer for my approach to this. My own solution seems rather cumbersome to me though.</span>
