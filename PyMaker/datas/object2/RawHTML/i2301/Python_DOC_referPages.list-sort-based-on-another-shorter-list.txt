<div class="post-text" itemprop="text">
<p>I need to sort a list based on the order of the elements in another list which is shorter ie, doesn't have all the elements compared to the list I'm sorting. I run into this error when using the <code>sort(key=short_list)</code>:</p>
<pre><code>long_list = ['y', 'z', 'x', 'c', 'a', 'b']
short_list = ['b', 'c', 'a']
long_list.sort(key=short_list.index)

ValueError: 'x' is not in list
</code></pre>
<p>Is there another way to sort the <code>long_list</code> to result in a <code>list</code> that maintains the order of <code>short_list</code> followed by the order of the elements in the <code>long_list</code>?</p>
<pre><code>['b', 'c', 'a', 'y', 'z', 'x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>in</code> to detect if the element is in the short_list and a ternary to return a tuple based on that.:</p>
<pre><code>&gt;&gt;&gt; long_list = ['y', 'z', 'x', 'c', 'a', 'b']
&gt;&gt;&gt; short_list = ['b', 'c', 'a']
&gt;&gt;&gt; sorted(long_list, key=lambda e: (short_list.index(e),e) if e in short_list  else (len(short_list),e))
['b', 'c', 'a', 'x', 'y', 'z']
</code></pre>
<p>Since Python sorts are stable, the order will only change based on a change of the elements themselves. To make that change, we can use a tuple with either a <code>(index_of_the_element, element)</code> of <code>(len(short_list), element)</code> to effect that change. </p>
<p>If you want the elements to not change order if the element is not in short list, just return an empty tuple:</p>
<pre><code>&gt;&gt;&gt; sorted(long_list, key=lambda e: (short_list.index(e),e) if e in short_list  else (len(short_list),))
['b', 'c', 'a', 'y', 'z', 'x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this should work:</p>
<pre><code>def position(value):
    try:
        return short_list.index(value)
    except ValueError:
        return len(short_list)

long_list.sort(key=position)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="noreferrer">Sorting is guaranteed to be stable</a>, so using <code>len(short_list)</code> ensures that the unknown values sort last.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would search in the short list first and in the long list if necessary:</p>
<pre><code>&gt;&gt;&gt; def index(list1, list2):
...  def inner(value):
...   try:
...    return list1.index(value)
...   except ValueError:
...    return list2.index(value)
... 
&gt;&gt;&gt; long_list = ['x', 'y', 'z', 'a', 'b', 'c']
&gt;&gt;&gt; short_list = ['a', 'b', 'c']
&gt;&gt;&gt; long_list.sort(key=index(short_list, long_list))
&gt;&gt;&gt; long_list
['a', 'b', 'c', 'x', 'y', 'z']
</code></pre>
<p>Edit: as florian-weimer <a href="https://stackoverflow.com/questions/52545157/python-list-sort-based-on-another-shorter-list/52545318#comment92030678_52545318">pointed out</a>, this solution does not always work. Joining the two solutions:</p>
<pre><code>&gt;&gt;&gt; def index(list1, list2):
...  def inner(value, l=len(list1)):
...   try:
...    return list1.index(value)
...   except ValueError:
...    return l
...  return inner
... 
&gt;&gt;&gt; long_list = ['x', 'y', 'z', 'a', 'b', 'c']
&gt;&gt;&gt; short_list = ['a', 'b', 'c', 'y']
&gt;&gt;&gt; sorted(long_list, key=index(short_list, long_list))
['a', 'b', 'c', 'y', 'x', 'z']
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">What does <i>like this</i> mean? Do you want to keep the relative order of <code>long_list</code> or <code>short_list</code>?</span>
<span class="comment-copy">So if <code>short_list = ['b', 'a', 'c']</code>, then the sorted long list would be <code>long_list= ['b', 'a', 'c', 'x', 'y', 'z']</code>?</span>
<span class="comment-copy">@JoePatten yes that is what I would like to maintain in the resulting list.</span>
<span class="comment-copy">@FlorianWeimer updated the question to be more clear about whats expected.</span>
<span class="comment-copy">Updated the code sample to be more clear, sorry for the confusion.</span>
<span class="comment-copy">Slick use of sorting stability.</span>
<span class="comment-copy">I've never thought about using a closure for a key function before, I quite like the idea.</span>
<span class="comment-copy">Does this really work? <code>long_list = ['x', 'y', 'z', 'a', 'b', 'c']</code> and <code>short_list = ['a', 'b', 'c', 'y']</code> appears to be a counter-example.</span>
<span class="comment-copy">@FlorianWeimer, good catch; the index from the longer list is smaller than the index of the shorter list; best idea would probably be to use <code>len(list1) + list2.index(value)</code>, but then you might as well just use <code>len(list1)</code> as you did.</span>
