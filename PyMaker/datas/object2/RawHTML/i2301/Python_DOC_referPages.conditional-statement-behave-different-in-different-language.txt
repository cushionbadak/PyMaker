<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6961643/chaining-multiple-greater-than-less-than-operators">Chaining multiple greater than/less than operators</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/25753474/python-comparison-operators-chaining-grouping-left-to-right">Python comparison operators chaining/grouping left to right?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/42527575/zero-is-greater-than-or-equal-to-zero-evaluates-to-false">zero is greater than or equal to zero evaluates to false</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>In <strong>C</strong> programming, the following code block return <strong>False</strong></p>
<pre><code>int a=15, b=10,c=5;
    if(a&gt;b&gt;c)
    {
        printf("True");
    }
    else
    {
        printf("False");
    }
</code></pre>
<p>But in <strong>Python</strong>, the following block return <strong>True</strong>.</p>
<pre><code>a = 15
b = 10
c = 5
if a &gt; b &gt; c:
    print("True")
else:
    print("False")
</code></pre>
<p><strong>Edit:</strong> Found a solution from <a href="https://stackoverflow.com/questions/25753474/python-comparison-operators-chaining-grouping-left-to-right">link</a>, it explain very well in python perspective. And in C programming perspective this <a href="https://stackoverflow.com/questions/52523652/conditional-statement-behave-different-in-different-language/52523694#52523694">answer</a> explain my question very well.</p>
</div>
<div class="post-text" itemprop="text">
<p>They behave differently because that's how the languages are implemented.</p>
<p>With C, <code>a &gt; b &gt; c</code> is evaluated left to right. There is no concept of "operator chaining" (I'll get to this shortly), so the expression is evaluated as <code>(a &gt; b) &gt; c</code> which is <code>1 &gt; c</code> which is <code>false</code> (in C, logical expressions either return 1 or 0).</p>
<p>In python, OTOH, <code>a &gt; b &gt; c</code> evaluates to <code>a &gt; b and b &gt; c</code> (as specified in the <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">documentation</a> on comparisons), which turns out to be <code>True</code> in this case. </p>
</div>
<span class="comment-copy">C and Python books can explain. These are two different languages with different syntax and rules.</span>
<span class="comment-copy">Another format of the same question: why this snippet does not compile in assembly?</span>
<span class="comment-copy">C and Python are <i>very</i> different languages, with very different rules.  Do not assume that <i>any</i> operators behave the same way between the two languages.</span>
