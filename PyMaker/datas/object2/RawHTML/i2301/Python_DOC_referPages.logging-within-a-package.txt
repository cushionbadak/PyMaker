<div class="post-text" itemprop="text">
<p>I'm developing a package that will be used by others to write processing scripts. For testing/debugging/not-going-insane purposes, I'd like to include some logging statements within my code, and especially using a <code>logging_setup()</code> utility function that I developed for another project for formatting/file output control.</p>
<p>Because I'm not writing a self-contained application, however, but a library that is meant to be called by other programs, I am confused where I should use my <code>logging_setup()</code> utility in order to produce the desired logging results that I want. This made me wonder whether using a logging system within my package was a good idea to begin with.</p>
<p>Where should I use my <code>logging_setup()</code> utility, if anywhere?</p>
<p>EDIT: Here's the function I mention above:</p>
<pre><code>def logging_setup(cfg_path=definitions.LOG_CONFIG_PATH, lvl=logging.INFO):
    """Setup logging tool from YAML configuration file.

    This should only be run once. Formatted (or configured) logging can only be
    done from within functions/classes in other modules.
    """

    # create directory for log files if not already there
    try:
        os.makedirs(definitions.LOGS_PATH)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    # configure logging from yaml config file
    if os.path.exists(cfg_path):
        with open(cfg_path, 'rt') as f:
            config = yaml.safe_load(f.read())

        logging.config.dictConfig(config)

    else:
        logging.basicConfig(level=lvl)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Where should I use my <code>logging_setup()</code> utility, if anywhere?</p>
</blockquote>
<p>In library code, you should not configure logging anywhere.  It is up to the users of your library (application distributors) to configure logging handlers.</p>
<p>As a library author, you don't know anything about the runtime context, you don't even know if there is a writable filesystem available at all in order to create logfiles. But to <em>use</em> <code>logging</code>, you don't need to care about the configuration - just <code>import logging</code> and create loggers, at the module level, and you can log events from library code. It is not for the library code to decide <em>where</em> those log events go - or if they go anywhere at all.  </p>
<p>If you're providing an <em>app</em> and you want logging output, then configure logging as the first thing your application does when starting up - usually in Python this means a call to <code>logging.config.dictConfig</code> or similar is made shortly after entering the <code>main()</code> function (please make sure the logging configuration does not happen at <code>import</code> time).</p>
</div>
<span class="comment-copy">What exactly does <code>logging_setup()</code> do?</span>
<span class="comment-copy">Unless you want to show a sample setup and explain the behavior you want, it's very unclear what you are asking.</span>
<span class="comment-copy">@wim. Fair enough.</span>
<span class="comment-copy">Make the user call your function if they want logging.</span>
<span class="comment-copy">Libraries shouldn't be messing with the root logger; that's only for use by the top-level script.  Your package should have its own logger, created with <code>logging.getLogger(__name__)</code>, and any configuration you do should only be applied to that.</span>
<span class="comment-copy">For some support for this position, see the note under <a href="https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library" rel="nofollow noreferrer">"Configuring Logging for a Library" in the Logging HOWTO in the Python docs</a>.</span>
<span class="comment-copy">In another project of mine (a self-contained application), I use this same function to spin up the proper logging configuration (for what I want to do). I was considering how I could have this same configuration here, but this answer is exactly what I was looking for: a description of good practice for writing libraries.  Much appreciated.</span>
