<div class="post-text" itemprop="text">
<h3>Environment where issues is reproduced:</h3>
<p>OS: Windows 10 (Host)
<br/>
CPU: 8
<br/>
Python: 3.6.6
<br/>
pygame version: 1.9.4
<br/>
"builder": cx_Freeze version 5.1.1</p>
<h3>Environment where issues is NOT reproduced:</h3>
<p>OS: Ubuntu 14.04 (guest, virtualbox)
<br/>
CPU: 4
<br/>
Python: 3.6.6
<br/>
pygame version: 1.9.4
<br/>
"builder": cx_Freeze version 5.1.1</p>
<h3>Script</h3>
<pre><code>import asyncio
import pygame
import multiprocessing

from concurrent.futures import ProcessPoolExecutor
from concurrent.futures import ThreadPoolExecutor


def init():
    pygame.init()
    screen = pygame.display.set_mode((900, 700), pygame.RESIZABLE)
    clock = pygame.time.Clock()
    return screen, clock


def fast_cpu_blocked():
    print("blocked is run")
    i = 1
    while 1:
        i += 1
        if i &gt; 100000000:
            print("blocked is finished")
            return i


executor_threads = ThreadPoolExecutor(multiprocessing.cpu_count())
executor_processes = ProcessPoolExecutor(multiprocessing.cpu_count())


async def start():
    loop = asyncio.get_event_loop()
    cpu_run = False
    screen, clock = init()
    while 1:
        await loop.run_in_executor(None, clock.tick, 60)
        screen.fill((0, 0, 0))
        txt_surface = pygame.font.Font(None, 18).render(
            "FPS: {}".format(int(clock.get_fps())), True, pygame.Color('grey'))
        screen.blit(txt_surface, (0, 0))
        pygame.display.flip()
        if not cpu_run:
            print("RUN CPU TASK")
            cpu_run = True
            loop.run_in_executor(executor_processes, fast_cpu_blocked)
            print("FINISH CPU TASK")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(start())
</code></pre>
<h3>Issue:</h3>
<p>When <code>loop.run_in_executor(executor_processes, fast_cpu_blocked)</code> is executed it produces multiple windows of application(just black window, without any rendered context). 
<br/>
<br/>
It doesn't happen when use <code>executor_threads</code> instead of <code>executor_processes</code>. But anyway I need <code>executor_processes</code>, so it is just a fact.</p>
<h3>Logs in Windows:</h3>
<pre><code>pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
RUN CPU TASK
FINISH CPU TASK
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
blocked is run
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
blocked is finished
</code></pre>
<h3>Logs in Ubuntu:</h3>
<pre><code>pygame 1.9.4
Hello from the pygame community. https://www.pygame.org/contribute.html
RUN CPU TASK
FINISH CPU TASK
blocked is run
blocked is finished
</code></pre>
<h3>Question:</h3>
<p>How to fix/avoid/hack producing multiple windows on Windows system.
<br/>
And why it happens?</p>
</div>
<div class="post-text" itemprop="text">
<p>When creating an exe for Windows using <a href="https://cx-freeze.readthedocs.io/en/latest/" rel="nofollow noreferrer">cx_Freeze</a> and using some form of multi-processing (eg. <code>multiprocessing</code> or <code>concurrent.futures.ProcessPoolExecutor</code> you need to bootstrap your exe for multi-processing as the very first thing you do. You do this simply by calling <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.freeze_support" rel="nofollow noreferrer"><code>multiprocessing.freeze_support()</code></a> as the very first thing inside the <code>if __name__ == "__main__":</code> block.</p>
</div>
<span class="comment-copy">Are you sure this is the exact code you are running? eg. where did <code>wololo</code> come from in the windows logs? Regarding processes, Linux and Windows create them differently. Windows has to "spawn" the executor sub-processes from scratch (whereas Linux would "fork" the process). So each child does <code>import pygame</code>, which is why you get the print outs <code>cores+1</code> times. But only the line <code>screen = ...</code> should create a screen and as is, that only gets run in the main process. I don't get multiple windows on my windows machine, so I have to guess that you've left something out by accident.</span>
<span class="comment-copy">I've recheckd code. It's same now. (difference was in <code>print(wololo)</code>). Interesting fact: when I run script via pycharm (on Windows) I don't see multiple windows issue, but logs still there. When I build it using cz_Freeze - issue is reproduces on Windows.</span>
<span class="comment-copy">Does it help if you move <code>import pygame</code> to the inside of the <code>if __name__ == '__main__'</code> block?</span>
<span class="comment-copy">no, it didn't help. And it is not a good option, because file could require pygame module.</span>
<span class="comment-copy">It's probably related to this. You need to call <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.freeze_support" rel="nofollow noreferrer"><code>multiprocessing.freeze_support()</code></a>.</span>
