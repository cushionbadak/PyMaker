<div class="post-text" itemprop="text">
<p>So this is my problem:</p>
<p>first I iterate </p>
<pre><code>for i in range(1,21):
    print (i)
</code></pre>
<p>then I have a variable
basename="Station"</p>
<p>I want a result where the output is Station_1.txt, Station_2.txt etc.</p>
<p>I managed to add the "_" to the variable basename like</p>
<pre><code>mylist1 = ("_")
s = (basename)
for item in mylist1:
    s += item
</code></pre>
<p>but now I have the problem on how to get the iteration on top of the variable basename, I could get is as it own like "Station_, 1, Station_, 2" but not inside the string itself. </p>
<p>Sorry, a total beginner here :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want something like this?</p>
<pre><code>basename = "Station"
for i in range(1, 21):
    value = basename + "_" + str(i) + ".txt"
    print(value)
</code></pre>
<p>output:</p>
<pre><code>Station_1.txt
Station_2.txt
Station_3.txt
Station_4.txt
Station_5.txt
Station_6.txt
Station_7.txt
Station_8.txt
Station_9.txt
Station_10.txt
Station_11.txt
Station_12.txt
Station_13.txt
Station_14.txt
Station_15.txt
Station_16.txt
Station_17.txt
Station_18.txt
Station_19.txt
Station_20.txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this in one line! Try the following:</p>
<pre><code>basename = "Station"
result = ["{}_{}.txt".format(basename, i) for i in range(1, 21)]
print(result)`

 &gt;&gt; ['Station_1.txt','Station_2.txt','Station_3.txt', 
     'Station_4.txt','Station_5.txt','Station_6.txt', 
     'Station_7.txt','Station_8.txt','Station_9.txt', 
     'Station_10.txt','Station_11.txt',Station_12.txt',
     'Station_13.txt','Station_14.txt','Station_15.txt',
     'Station_16.txt','Station_17.txt','Station_18.txt',
     'Station_19.txt','Station_20.txt']`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use <code>.format()</code>. See <a href="https://docs.python.org/3.3/library/stdtypes.html#str.format" rel="nofollow noreferrer">https://docs.python.org/3.3/library/stdtypes.html#str.format</a></p>
<p>For example:</p>
<pre><code>base_string = 'Station'
for i in range(1,21):
    print('{}_{}.txt'.format(base_string, i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use string formatting to forget about worrying about integers</p>
<p>You still loop over with the number as your parameter and keep the base name the same:</p>
<pre><code>base = 'Station'
for i in range(1, 21):
    name = '{}_{}.txt'.format(base, i)
    print(name)  # or do whatever with 'name'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>String concatenation is best avoided if possible. An alternative is Python now supports format strings by prefixing <code>f</code> which could be used to solve your problem as follows:</p>
<pre><code>base_string = 'Station'

for i in range(1, 21):
    print(f'{base_string}_{i}.txt')    
</code></pre>
<p>This was added in Python 3.6.  It could also be useful to zero pad your strings which would ensure the strings are sorted correctly:</p>
<pre><code>base_string = 'Station'

for i in range(1, 21):
    print(f'{base_string}_{i:02}.txt')
</code></pre>
<p>This would give you:</p>
<pre class="lang-none prettyprint-override"><code>Station_01.txt
Station_02.txt
Station_03.txt
Station_04.txt
Station_05.txt
Station_06.txt
Station_07.txt
Station_08.txt
Station_09.txt
Station_10.txt
Station_11.txt
Station_12.txt
Station_13.txt
Station_14.txt
Station_15.txt
Station_16.txt
Station_17.txt
Station_18.txt
Station_19.txt
Station_20.txt
</code></pre>
</div>
<span class="comment-copy">good one. Using <code>str.format()</code> is  a nice option here.</span>
<span class="comment-copy">In python 3.6+ you can also use <code>f</code> string <code>print(f"{base_string}_{i}')</code> . Docs: <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">docs.python.org/3/reference/lexical_analysis.html#f-strings</a></span>
