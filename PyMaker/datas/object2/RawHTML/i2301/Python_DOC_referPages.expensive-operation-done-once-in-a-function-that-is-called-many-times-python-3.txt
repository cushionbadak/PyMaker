<div class="post-text" itemprop="text">
<p>I have a long list of groups in json and I want a little utility:</p>
<pre><code>def verify_group(group_id):
    group_ids = set()
    for grp in groups:
        group_ids.add(grp.get("pk"))
    return group_id in group_ids
</code></pre>
<p>The <em>obvious</em> approach is to load the set outside the function, or otherwise declare a global -- but let's assume I don't want a global variable.</p>
<p>In statically typed languages I can say that the set is static and, I believe that will accomplish my aim.  How would one do something similar in python?  That is : the first call initializes the set, <strong>group_ids</strong>, subsequent calls use the set initialized in the first call.</p>
<p>BTW, when I use the <a href="https://pypi.org/project/profilestats/" rel="nofollow noreferrer">profilestats</a> package to profile this little code snippet, I see these frightening results:</p>
<pre><code>ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      833    0.613    0.001    1.059    0.001 verify_users_groups.py:25(verify_group)
  2558976    0.253    0.000    0.253    0.000 {method 'get' of 'dict' objects}
  2558976    0.193    0.000    0.193    0.000 {method 'add' of 'set' objects}
</code></pre>
<p>I tried adding functools.lru_cache -- but that type of optimization doesn't address my present question -- how can I load the set <strong>group_ids</strong> once <em>inside</em> a def block?  </p>
<p>Thank you for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>There isn't an equivalent of <code>static</code>, however you can achieve the same effect in different ways:</p>
<p>One way is to abuse the infamous mutable default argument:</p>
<pre><code>def verify_group(group_id, group_ids=set()):
    if not group_ids:
        group_ids.update(grp.get("pk") for grp in groups)
    return group_id in group_ids
</code></pre>
<p>This however allows the caller to change that value (which may  be a feature or a bug for you).</p>
<p>I usually prefer using a closure:</p>
<pre><code>def make_group_verifier():
    group_ids = {grp.get("pk") for grp in groups}
    def verify_group(group_id):
        # nonlocal group_ids # if you need to change its value
        return group_id in group_ids
    return verify_group

verify_group = make_group_verifier()
</code></pre>
<p>Python is an OOP language. What you describe is an instance method. Initialize the class with the set and call the method on the instance.</p>
<pre><code>class GroupVerifier:
    def __init__(self):
        self.group_ids = {grp.get("pk") for grp in groups}
    def verify(self, group_id):
        # could be __call__
        return group_id in self.group_ids
</code></pre>
<hr/>
<p>I'd also like to add that it depends by the API design. You could let the take the responsibility of pre-computing and providing the value if they want performance. This is the choice taken by, for example, <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a>. The <code>cum_weights</code> parameter isn't necessary but it allows the user to remove the cost of computing that array for every call in performance critical code. So instead of having a mutable argument you use <code>None</code> as default and compute that set only if the value passed is <code>None</code> otherwise you assume the caller did the work for you. </p>
</div>
<span class="comment-copy">Haven't tested, but apparently you can store it <a href="https://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function">as a function attribute</a></span>
<span class="comment-copy">Is this question solved?</span>
<span class="comment-copy">I would say "yes"</span>
<span class="comment-copy">Well, the obvious way to use <code>lru_cache</code> here is to refactor your code to have a <code>def load_group_ids</code> that <i>is</i> cached, and call that from <code>verify_group</code></span>
<span class="comment-copy">@juanpa.arrivillaga IMHO using <code>lru_cache</code> to cache a function with no parameters is shooting a fly with a cannon.</span>
<span class="comment-copy">The closure seems the most elegant for my taste.  I did not think of that!  Thank you,</span>
<span class="comment-copy">@fiacre I'm a fan of that construct. You can often use it to build functions for the <code>key=</code> parameters of <code>sorted</code> or <code>groupby</code> often.</span>
