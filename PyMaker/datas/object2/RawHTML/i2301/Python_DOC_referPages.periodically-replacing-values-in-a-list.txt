<div class="post-text" itemprop="text">
<p>Suppose I have the following list in Python:</p>
<pre><code>my_list = [10] * 95
</code></pre>
<p>Given <code>n</code>, I want to replace any other <code>m</code> elements with zero in my list, while keeping the next <code>n</code> elements. </p>
<p>For example, if <code>n = 3</code> and <code>m = 2</code>, I want my list to look like:</p>
<pre><code>[10, 10, 10, 0, 0, 10, 10, 10 ,0, 0, ..., 10, 10, 10 , 0, 0]
</code></pre>
<p>If it can't be filled perfectly, as is the case with <code>n = 4</code> and <code>m = 2</code>, then it's OK if my list looks like this:</p>
<pre><code>[10, 10, 10, 10, 0, 0, ..., 10, 10, 10, 10, 0]
</code></pre>
<p>How should I try to solve this problem?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_list = [10] * 95
n = 3
m = 2
for i in range(m):
    my_list[n+i::m+n] = [0] * len(my_list[n+i::m+n])
</code></pre>
<p>This just needs <code>m</code> assignments to do the job (and <code>m</code> probably is small).</p>
<p>If you really just have two possible values (e. g. 10 and 0), you can do it even simpler:</p>
<pre><code>my_list = [ 10 if i % (n+m) &lt; n else 0 for i in range(95) ]
</code></pre>
<p>But that iterates in Python over the whole range of 95, so probably is not very fast.</p>
<p>A bit more complex but probably more efficient (especially for huge lists and large values for <code>n</code> and <code>m</code>) would be this:</p>
<pre><code>my_list = (([ 10 ] * n + [ 0 ] * m) * (95 // (n + m) + 1))[:95]
</code></pre>
<p>But it builds internally lots of lists, so its up to tests to find out whether this is efficient in your case.  (Also memory consumption should be taken into account for large lists.)</p>
<p>If you can use <code>numpy</code> (a bit off the question, but since it's widespread):</p>
<pre><code>my_list = (np.arange(95) % (n+m) &lt; n) * 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="noreferrer"><code>itertools.cycle</code></a> to create an endless sequence of <code>[10, 10, 10, 0, 0]</code> and then take the first 95 elements of that sequence with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="noreferrer"><code>itertools.islice</code></a>:</p>
<pre><code>n = 3
m = 2

pattern = [10] * n + [0] * m
my_list = list(itertools.islice(itertools.cycle(pattern), 95))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yet another possibility, this time with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a>:</p>
<pre><code>[x * (i % (n + m) &lt; n) for i, x in enumerate(my_list)]
</code></pre>
<p>It uses the fact that <code>False</code> and <code>True</code> are equal to <code>0</code> and <code>1</code> in Python (see <a href="https://stackoverflow.com/a/2764099/6419007">here</a>).</p>
<p>As a bonus, it works fine even if the list isn't constant:</p>
<pre><code>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; m = 2
&gt;&gt;&gt; my_list = range(20)
&gt;&gt;&gt; [x * (i % (n+m) &lt; n) for i, x in enumerate(my_list)]
[0, 1, 2, 3, 0, 0, 6, 7, 8, 9, 0, 0, 12, 13, 14, 15, 0, 0, 18, 19]
</code></pre>
<p>If the list contains strings, it replaces them with an empty string instead of <code>0</code>:</p>
<pre><code>&gt;&gt;&gt; my_list = 'abcdefghijk'
&gt;&gt;&gt; [x * (i % (n+m) &lt; n) for i, x in enumerate(my_list)]
['a', 'b', 'c', 'd', '', '', 'g', 'h', 'i', 'j', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me:</p>
<pre><code>list = [10] * 95

n = 4
m = 2

amask = np.tile(np.concatenate((np.ones(n),np.zeros(m))),int((len(list)+1)/(n+m)))[:len(list)]

list = np.asarray(list)*amask
</code></pre>
<p>which outputs:</p>
<pre><code>array([10., 10., 10., 10.,  0.,  0., 10., 10., 10., 10.,  0.,  0., 10.,
       10., 10., 10.,  0.,  0., 10., 10., 10., 10.,  0.,  0., 10., 10.,
       10., 10.,  0.,  0., 10., 10., 10., 10.,  0.,  0., 10., 10., 10.,
       10.,  0.,  0., 10., 10., 10., 10.,  0.,  0., 10., 10., 10., 10.,
        0.,  0., 10., 10., 10., 10.,  0.,  0., 10., 10., 10., 10.,  0.,
        0., 10., 10., 10., 10.,  0.,  0., 10., 10., 10., 10.,  0.,  0.,
       10., 10., 10., 10.,  0.,  0., 10., 10., 10., 10.,  0.,  0., 10.,
       10., 10., 10.,  0.])
</code></pre>
<p>The code takes <code>n</code> and <code>m</code> and constructs a mask of ones and zeros with a length matching your initial <code>list</code> using the <code>np.tile</code> function. Afterwards you just multiply the mask onto the list and get the zeros where you want them to be. It should also be flexibel to different lengths of the list and an (almost) arbitrary choice of <code>n</code> and <code>m</code>.</p>
<p>You can cast the array back to a list if you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>my_list = [10] * 95
n = 3
m = 2

for i in range(n, len(my_list)-1, n+m):
    my_list[i:i+m] = [0]*m

print(my_list)
</code></pre>
<hr/>
<p>Edit </p>
<p>I found out that the above code changes the length of resulting list in some cases.</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; a[2:4] = [0] * 2
&gt;&gt;&gt; a
[1, 2, 0, 0]
</code></pre>
<p>Thus, the length should be restored somehow.</p>
<pre><code>my_list = [10] * 95
cp_list = list(my_list)
n = 3
m = 5

for i in range(n, len(my_list)-1, n+m):
    cp_list[i:i+m] = [0]*m

cp_list = cp_list[:len(my_list)]
print(cp_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy</code> can do this pretty concisely, too!</p>
<pre><code>a = np.array(my_list).reshape(-1, n + m)
a[:, n:] = 0
result = a.ravel().tolist()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[j for i in [[input_num] * n + [0] * m for x in range(int(num / (m + n)) + 1)][:num] for j in i]
</code></pre>
<p>Maybe?</p>
<h1>Result</h1>
<pre><code>&gt;&gt;&gt; num, input_num, m, n=95, 10, 2, 3
&gt;&gt;&gt; [j for i in [[input_num] * n + [0] * m for x in range(int(num / (m + n)) + 1)][:num] for j in i]
[10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0, 10, 10, 10, 0 , 0, 10, 10, 10, 0, 0, 10, 10, 10, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also in the itertools family, you  can <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>repeat</code></a> a desired pattern:</p>
<p><strong>Given</strong></p>
<pre><code>import itertools as it


m, n = 2, 3
p = n + 1    
</code></pre>
<p><strong>Code</strong></p>
<pre><code>pattern = it.repeat([10] * n + [0] * m)
res = list(it.islice(it.chain.from_iterable(pattern), None, 95))
print(res)
# [10, 10, 10, 10, 0, 0, 10, 10, 10, 10, 0, 0, ... 10, 10, 10, 10, 0, 0]
</code></pre>
<p></p>
<pre><code>pattern = it.repeat([10] * p + [0] * m)
res = list(it.islice(it.chain.from_iterable(pattern), None, 95))
print(res)
# [10, 10, 10, 10, 0, 0, 10, 10, 10, 10, 0, 0, ... 10, 10, 10, 10, 0]
</code></pre>
<p>Test</p>
<pre><code>assert len(res) == 95
</code></pre>
<p>However, @Aran-Fey's <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> solution is cleaner as it does not require chaining.</p>
</div>
<span class="comment-copy">Will the input list always be filled with one and the same value (like 10 in your example)? In other words, do you want to <i>create</i> a new list like <code>[10, 10, 10, 0, 0, ...]</code> or do you want to overwrite every nth value in an <i>existing</i> list?</span>
<span class="comment-copy">How is this question not worth closing? The OP basically asks for an answer without any visible effort to have tried something</span>
<span class="comment-copy">@Denny, in the beginning, I was also very confused about this system on this site. 3 criteria for a good question: 1) (visible) effort. 2) Useful and 3) Clear. And more than not, the two last criteria score higher on the priority list for most users. If you browse this and other stack exchange sites, you'll find countless examples of questions that don't show the visible effort, but are just useful (and maybe more importantly) clear for other users.</span>
<span class="comment-copy">Personally, I think the question is very specific, and it's quite unlikely that somebody will come across it and found this question through a Google search (without knowing about the question in advance, of course); besides, it's pretty basic.</span>
<span class="comment-copy">It's easy -&gt; it gets many answers -&gt; the "hotness formula" think (<i>no comment on the formula</i>) it's hot -&gt; it's displayed on the HNQ list -&gt; it attracts more viewers, mostly not come from <a href="https://stackoverflow.com">Stack Overflow</a>. Besides it's not possible to understand the question just by reading the title (because it's specific!) so the viewer is forced to click on the link, that generates view.</span>
<span class="comment-copy">Could you post your 3 different solutions as 3 separate answers, please? I want to upvote the 2nd one, but the others... not so much.</span>
<span class="comment-copy">@Aran-Fey That would be overkill, I guess.  Feel free to not upvote in this case, even if an upvote just states that the answer provided <i>any</i> help (not was perfect).  And consider that the second one is probably the slowest of the four (only relevant for large numbers of course).</span>
<span class="comment-copy">Why use itertools when you can use list expression?</span>
<span class="comment-copy">@MoonsikPark Not sure what you mean. If you're referring to your own solution: Because I think mine is more readable than yours.</span>
<span class="comment-copy"><code>numpy</code>?  For real?</span>
<span class="comment-copy">@Alfe: What's the problem with numpy? It's widespread and it's specifically designed for lists/arrays.</span>
<span class="comment-copy">@EricDuminil Just overkill for the job, that's all.  It's like asking for a <code>print()</code> and getting a <code>f=open('/dev/stdout', 'w'); f.write("foo"); f.flush(); f.close()</code>.  Works, yeah.  But adds <i>unnecessary</i> complexity.</span>
<span class="comment-copy">Btw, in <code>numpy</code>, I would have done it as <code>(np.arange(95) % 5 &lt; 3) * 10</code>.</span>
<span class="comment-copy">@Alfe Indeed, your accepted version is much more elegant -&gt; +1. But nevertheless my suggestion also gets the job done and sometimes that's all you need. Thanks for pointing it out though.</span>
<span class="comment-copy">Nice approach.  But only if <code>len(my_list)</code> is smaller than <code>m</code>, this is more efficient than my solution.</span>
<span class="comment-copy">There is a downvote on this answer but no critic comment.  Downvoter, please comment on what you didn't like.</span>
<span class="comment-copy">For deleting the last elements of a list, best use <code>del cp_list[n:]</code>.</span>
<span class="comment-copy">It doesn't seem to work with <code>n = 4</code> and <code>m = 2</code>. It raises <code>ValueError: cannot reshape array of size 95 into shape (6)</code>.</span>
<span class="comment-copy">@EricDuminil shouldn't an error be raised if the length of the original list is not a multiple of the length of the subsequences to be repeated?</span>
<span class="comment-copy">Please take a look at the second half of the question. This use case is specifically mentioned by OP.</span>
<span class="comment-copy">@EricDuminil you are right. This answer does not work in the latter case.</span>
<span class="comment-copy">I guess the list full of <code>10</code> is just for an example...</span>
<span class="comment-copy">@Julien No, OP said ' it can be any number, but it will always be the same one' so it will be full of any same number.</span>
<span class="comment-copy">1) Your output is incorrect (it's <code>[10, 10, 0, 0, 0]</code> instead of <code>[10, 10, 10, 0, 0]</code>) 2) Concatenating lists with <code>sum</code> is an antipattern with a massive run time complexity.</span>
<span class="comment-copy">@Aran-Fey Nope, it's correct.</span>
<span class="comment-copy">Oops. Indeed it is. Edited.</span>
