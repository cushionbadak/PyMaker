<div class="post-text" itemprop="text">
<p>I am trying to remove an item from a list. Usually pretty obvious but the problem is that those items are objects and I want to remove them by one of their attributes. </p>
<p>Is there a more graceful way to do this than what I have below?</p>
<pre><code>class Item:
    def __init__(self, name, color):
        self.name = name
        self.type = type

if __name__ == "__main__":
    myList = []
    myList.append(Item("item1", "green"))
    myList.append(Item("item2", "blue"))

    # Try to remove object with name "item2"
    index = None
    for i, val in enumerate(myList):
        if val.name == "item2"
            del myList[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in</a> method <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter(function, iterable)</code></a>.</p>
<p><code>filter()</code> applies a <em><code>function</code></em> to each element of an <em><code>iterable</code></em> - if the function evaluates to <code>True</code>, this element is in the resulting generator. 
If the function evaluates to <code>False</code> the element is skipped.</p>
<p>The result of <code>filter(..)</code> is a generator, so you need to put it into a list (or use the generator result if you just need it once).</p>
<p>Demo:</p>
<pre><code>class Item:
    def __init__(self, name, num):
        self.name = name
        self.num = num

    def __repr__(self):
        return f"({self.name} - {self.num})"


if __name__ == "__main__":
    myList = []
    for n in range(0,20):
        myList.append(Item(str(n), n))

    newList1 = list( filter(lambda x: x.num % 3 == 0, myList) ) 

print(myList)

print(newList1) 
</code></pre>
<p>Output:    </p>
<pre><code># input to filter
[  (0 - 0),   (1 - 1),   (2 - 2),   (3 - 3),   (4 - 4),   (5 - 5),   (6 - 6), (7 - 7),   
   (8 - 8),   (9 - 9), (10 - 10), (11 - 11), (12 - 12), (13 - 13), (14 - 14), (15 - 15),
 (16 - 16), (17 - 17), (18 - 18), (19 - 19)] 

# result of filter
[(0 - 0), (3 - 3), (6 - 6), (9 - 9), (12 - 12), (15 - 15), (18 - 18)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a super simple way:</p>
<pre><code>[x for x in myList if x.name != 'item2']
</code></pre>
<p>That is, simply make a new list with the items you want.  You can assign it back to <code>myList</code> if needed.</p>
</div>
<span class="comment-copy">You can always use the <code>repr</code> dunder method</span>
<span class="comment-copy">You can also use something like <code>map(attrgetter('my_attr'), my_list)</code> <code>attrgetter</code> can be found in the <code>operator</code> built-in library.</span>
