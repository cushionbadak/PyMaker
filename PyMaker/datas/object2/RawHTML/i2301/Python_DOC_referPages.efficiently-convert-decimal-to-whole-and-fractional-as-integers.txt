<div class="post-text" itemprop="text">
<p>What is the best way to convert Decimal to a pair of integers to get whole and fractional in python?
By saying best - I mean efficient, exact and using underlaying structure of the data type.
e.g.:</p>
<pre><code>d = Decimal('1536310893.687185000')
whole, fractional = some_func(d)
print(whole)
1536310893
print(fractional)
687185000
</code></pre>
<p>I believe there is more efficient way than to just split string representation :)
I also think that Decimal is stored in memory as a pair of integers, the question is how to get them? :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer">divmod</a></p>
<pre><code>&gt;&gt;&gt; divmod(d, 1)
(Decimal('1536310893'), Decimal('0.687185000'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this using <code>split</code>:</p>
<pre><code>d = Decimal('1536310893.687185000')
whole, fractional = map(float,str(d).split('.'))
print(whole)
print(fractional)
</code></pre>
<p>Output:</p>
<pre><code>1536310893
687185000
</code></pre>
<p>Better <code>math.modf</code>:</p>
<pre><code>import math
whole, fractional = math.modf(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need it done by using the properties of the Decimal class you can use this function for <code>some_func()</code>:</p>
<pre><code>from decimal import *

def whole_and_fractional_part(d):
    getcontext().rounding = ROUND_FLOOR
    return d.to_integral_exact(), d - d.to_integral_exact()
</code></pre>
<p>This gives the output:</p>
<pre><code>In [34]: whole, fractional
Out[34]: (Decimal('1536310893'), Decimal('0.687185'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Decimal can be created with tuple (sign, digits, exponent) where a sign (0 for positive or 1 for negative), a tuple of digits, and an integer exponent. decimal.as_tuple() return this representation. using those options we can write the following:</p>
<pre><code>def whole_frac_int(d):
    sign,digits,exp = d.normalize().as_tuple()
    return ( 
      int( decimal.Decimal( (sign,digits[:exp],0) ) ),
      int( decimal.Decimal( (sign,digits[exp:],0) ) )
    )
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; whole_frac_int( decimal.Decimal('1536310893.687185000')
(1536310893, 687185)
</code></pre>
</div>
<span class="comment-copy">Ah..., can you please explain a little more?</span>
<span class="comment-copy">Let's start with one of the requirements - exact. What is the exact <i>fractional</i> (you mean decimal?) value of <code>4/3</code> as an integer?</span>
<span class="comment-copy">So if I enter <code>0.25</code> then you want to get the fraction <code>1/4</code> ?</span>
<span class="comment-copy">Check this link <a href="https://stackoverflow.com/questions/6681743/splitting-a-number-into-the-integer-and-decimal-parts]" title="splitting a number into the integer and decimal parts%5d">stackoverflow.com/questions/6681743/…</a></span>
<span class="comment-copy">it is not what I want</span>
<span class="comment-copy">I need them as integers</span>
<span class="comment-copy">Add support for integers</span>
<span class="comment-copy">at least looks promising. I need to know the number of digits after fixed point, and then I can make them integers</span>
<span class="comment-copy">yeah cool, it is not efficient to convert to string :( I think decimal is stored in memory as two integers...</span>
<span class="comment-copy">@ЕвгенийАртеменко Please accept if it works</span>
<span class="comment-copy">@ЕвгенийАртеменко Also can upvote :-)</span>
<span class="comment-copy">I won't accept it</span>
<span class="comment-copy">modf uses floats as output - it is not exact. I also think, Decimal is stored in memory as a pair of integers, the question is how to get them?</span>
<span class="comment-copy">looks promising, I just need to know a number of digits after fixed point (x), and then I can multiply Fractional part by 10^x. I think It could be the most efficient. I ned to measure perforamnce...</span>
<span class="comment-copy">looks interesting, I'll measure performance, to compare...</span>
