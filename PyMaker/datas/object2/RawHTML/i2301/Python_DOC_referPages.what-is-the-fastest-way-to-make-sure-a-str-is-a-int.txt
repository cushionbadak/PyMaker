<div class="post-text" itemprop="text">
<p>I'm trying to make sure a string is a int in Python 3.6, here is four ways. But I don't know which one is the fastest, or could someone give me a faster one?</p>
<pre><code>import re

input_value = '012345678901'


def test1(value_str):
    value_str = value_str.lstrip('0')
    try:
        value_int = int(value_str)
    except ValueError:
        return False
    return len(str(value_int)) == len(value_str)


def test2(value_str):
    return re.match('\d+$', value_str) is not None


def test3(value_str):
    num_set = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}
    for i in value_str:
        if i not in num_set:
            return False
    return True


def test4(value_str):
    return value_str.isdigit()
</code></pre>
<p>I tested them with <code>timeit</code>, here is the result:</p>
<pre><code>run 1000000 times test1: 0.920672991022002
run 1000000 times test2: 1.1261013330076821
run 1000000 times test3: 0.8881843989947811
run 1000000 times test4: 0.16987622604938224
</code></pre>
<hr/>
<p>Edit notes:</p>
<p>After testing many times, I know this:</p>
<ol>
<li>for unsigned number, <code>test4</code> is the fastest.</li>
<li>for signed number, if it includes<code>'-'</code>or<code>'+'</code> like <code>'-123'</code>, <code>test2</code> is always slow, others depends on how to remove the sign. I'm still not sure.</li>
</ol>
<p>And the <code>lstrip('0')</code> in <code>test1</code> is just for <a href="https://stackoverflow.com/questions/52496390/what-is-the-fastest-way-to-make-sure-a-str-is-a-int/52498764?noredirect=1#comment91970004_52497624">this</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Hi an alternative could be the following one:</p>
<pre><code>def test4(value_str):
    negative = value_str.find("-")
    if negative &gt; 0:
        return False
    elif negative == 0:
        value_str = value_str[1:]
    return value_str.isdigit()
</code></pre>
<p>The results on my machine are:</p>
<ul>
<li>test1: 0.798348898</li>
<li>test2: 0.9424690370000001</li>
<li>test3: 0.5995461930000001</li>
<li>test4: 0.29526326800000025</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I took the code and ran it a couple of times, it seems that test3 is the fastest. Even thought I cleaned up a little bit test1 and I was able to accomplish a similar speed to test3, sometimes better. Here I post your code, plus the test I added:</p>
<pre><code>import re
import timeit


def test1():
    value_str = '-012345678901'
    value_str = value_str.lstrip('0')
    try:
        value_int = int(value_str)
    except ValueError:
        return False
    return bool(len(str(value_int)) == len(value_str))

print(timeit.timeit(test1, number=10000))


def test2():
    value_str = '-012345678901'
    if re.match('[\d]+$', value_str) is not None:
        return True
    else:
        return False

print(timeit.timeit(test2, number=10000))


def test3():
    value_str = '-012345678901'
    num_set = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}
    for i in value_str:
        if i not in num_set:
            return False
    return True

print(timeit.timeit(test3, number=10000))


def test4():
    value_str = '-012345678901'
    try:
        int(value_str)
    except ValueError:
        return False
    return True

print(timeit.timeit(test4, number=10000))


def test5():
    value_str = '-012345678901'
    negative = value_str.find("-")
    if negative &gt; 0:
        return False
    elif negative == 0:
        value_str = value_str[1:]
    return value_str.isdigit()

print(timeit.timeit(test5, number=10000))
</code></pre>
<p>I also compared it to the answer given before mine, I renamed his function to test5. Test4 proved to be a faster alternative. </p>
<p>Finally, please notice that the functions are self-contained. I did this in order to run it successfully with timeit, since this is a speed test one of these functions may be picked and reverted back in order to use the parameter again. Hope this helps!</p>
<pre><code>test1 = 0.01150935102486983
test2 = 0.014068655029404908
test3 = 0.006000193010549992
test4 = 0.004028786963317543
test5 = 0.007849656976759434
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May be fastest way is to use pythonic way of checking whether it is a alphabetical string or not.</p>
<pre><code>import timeit
def test():
    a = "123"
    return a.isalpha()

print(timeit.timeit(test, number=10000))

0.001194985743579478
</code></pre>
<p>isalpha will return True if a string contains only alphabetical characters. 
It will return False is string contains any numerical or alphanumerical characters</p>
<p>EDIT:</p>
<pre><code>import timeit
def test():
   a = "123"
   a = a.lstrip("-")
   return a.isdigit()

print(timeit.timeit(test, number=10000))

0.0019427791237219235
</code></pre>
</div>
<span class="comment-copy">Test3 looks the fastest. Maybe you can speed up Test1, by removing the <code>.lstrip('0')</code> because <code>int('00001') == 1</code> anyway, and same thing for the <code>bool()</code>.</span>
<span class="comment-copy">What about simply <code>value_str.isdigit()</code>?</span>
<span class="comment-copy">What do you mean you don't know which one is fastest? Don't you understand the <code>timeit</code> results?</span>
<span class="comment-copy">@schwobaseggl, True. Technically, <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">it's not he same</a> but for most practical purposes may be fine.</span>
<span class="comment-copy">@schwobaseggl  value_str.isdigit() will not work with negative numbers right?</span>
<span class="comment-copy">Sorry, you're right. I edited the answer to take into account negative values</span>
<span class="comment-copy">@roganjosh, thanks, let me edit the code.</span>
<span class="comment-copy">You can try <code>test4('   123')</code> and it returns <code>True</code>, that's why I compare length in <code>test1()</code>. But it's helpful, thanks~</span>
<span class="comment-copy">I'm trying to check numbers, maybe you mean <code>isdigit()</code>?</span>
<span class="comment-copy">@Woko no, as mentioned in comments if you use isdigit() then for "-123" will return False. isdigit() will not identify negative numbers. So I think it is better to use isalpha()</span>
<span class="comment-copy">But <code>'123'.isalpha()</code> returns False, <code>'abc123'.isalpha()</code> returns False, <code>'abc'.isalpha()</code> returns True. So I'm confused about what you mean.</span>
<span class="comment-copy">Sorry my mistake. I have edited my code. Please check</span>
