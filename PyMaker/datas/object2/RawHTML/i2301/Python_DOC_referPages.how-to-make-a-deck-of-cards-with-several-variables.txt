<div class="post-text" itemprop="text">
<p>SO, im gonna make a abnormal deck of cards. Each card will have a color (red, green, blue), a degree(1,2,3), a symbol(triangle, square, circle) and a number.(1,2,3) I have a class that looks like this. </p>
<pre><code>class card:
def __init__(self, color, degree, symbol, number):
    self.color=color
    self.degree=degree
    self.symbol=symbol
    self.number=number
def __repr__(self):
    return "(%s,%s,%s,%s)" %(self.color,self.degree,self.symbol,self.number)
</code></pre>
<p>I also have these lists with all the variables and a deck of cards where i want the cards. </p>
<pre><code>colors=["red", "green", "blue"]
degrees=["1","2","3"]
symbols=["triangle", "square", "circle"]
numbers=["1","2","3"]
deck=[]
</code></pre>
<p>Now, what i wanna do is create a full deck with every possible card. Preferably they would be in a random order but its not nessecary. 
I know that if it was just a number and color i could easily do it this way.</p>
<pre><code>deck = [card(value, color) for value in range(0, 2) for color in colors]
</code></pre>
<p>But, i cant figure out how to make it when im also gonna use symbol and degree as well. I tried to just build on more if statements to loop it all but that didnt work. I also doesnt want the same card to appear twice, and i dont want a card that doesnt follow the class rules, they must be strutured as [color,degree,symbol,number]</p>
<p>Does anyone have a idea where to go with this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want all combinations of colors, degrees, symbols and numbers?</p>
<p>If so, use nested for loops:</p>
<pre><code>deck = []
for color in colors:
    for degree in degrees:
        for symbol in symbols:
            for number in numbers:
                deck.append(card(color, degree, symbol, number)

# Also written as a list comprehension
deck = [
    card(color, degree, symbol, number)
    for color in colors
        for degree in degrees
            for symbol in symbols
                for number in numbers
]  # The indent is just to show how it works. For style, put them all at the same indent.
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> (Which can also be lazy)</p>
<pre><code>deck = itertools.starmap(card, itertools.product(colors, degrees, symbols, numbers))

deck = list(deck)  # If you really need it to be a list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Full deck with every possible card combination:</p>
<pre><code>deck = [card(color, degree, symbol, number) for color in colors \
        for degree in degrees for symbol in symbols for number in numbers]
</code></pre>
<p>For randomizing the card order in the deck, take a look at this: <a href="https://stackoverflow.com/questions/976882/shuffling-a-list-of-objects">Shuffling a list of objects</a></p>
</div>
<div class="post-text" itemprop="text">
<p>use <code>product</code> from <code>itertools</code></p>
<pre><code>import itertools


deck = [
    card(color, degree, symbol, number)
    for color, degree, symbol, number in
    itertools.product(colors, degrees, symbols, numbers)
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

identifiers = [colors, degrees, symbols, numbers]
deck = [[*i] for i in itertools.product(*identifiers)]
</code></pre>
<blockquote>
<pre><code>[['red', '1', 'triangle', '1'], ['red', '1', 'triangle', '2'], ['red', '1', 'triangle', '3'],...
</code></pre>
</blockquote>
</div>
<span class="comment-copy">I tried the first loop there, however it only gave me 29 cards, while i was expecting the entire deck to contain 81. why isnt there more of them?  I couldnt get the second example there to work, since im using a main function which calls upon this function that makes the deck, and then it wouldnt recognize the deck object, same problem when i tried the itertools things.</span>
