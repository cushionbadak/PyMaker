<div class="post-text" itemprop="text">
<p>I am creating a new nested directory (<code>data_dir = 'parent\child'</code>) in python:</p>
<pre><code>try:
    os.mkdir(data_dir)
except WindowsError:
    pass   
</code></pre>
<p>If the parent directory <code>'parent'</code> did not exists (yet, 'cause I might be setting later in the code), then the code caught that as a <code>Windows Error 3</code> and moved on.</p>
<p>However now what could also happen is <code>Windows Error 206</code> which is when the filename or extension is too long. For which I would need to take a separate action.</p>
<hr/>
<p>Is there a way to distinguish between <code>Windows Error</code> <code>3</code> and <code>206</code> (and others) so as to raise distinct <code>Exceptions</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>WindowsError.winerror</code> (inherited from <em>OSError</em>: <a href="https://docs.python.org/3/library/exceptions.html#OSError.winerror" rel="nofollow noreferrer">[Python 3]: <strong>winerror</strong></a>) to differentiate between underlying errors. Something like:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; def create_dir(path):
...     try:
...         os.mkdir(path)
...     except WindowsError as e:
...         if e.winerror == 3:
...             print("Handling WindowsError 3")
...         elif e.winerror == 206:
...             print("Handling WindowsError 206")
...         else:
...             print("Handling other WindowsError")
...     except:
...         print("Handling other exceptions")
...
&gt;&gt;&gt;
&gt;&gt;&gt; create_dir("not/existing")
Handling WindowsError 3
&gt;&gt;&gt; create_dir("a" * 228)
Handling WindowsError 206
&gt;&gt;&gt; create_dir(":")
Handling other WindowsError
</code></pre>
</blockquote>
<p>Of course, <em>WindowsError <strong>3</strong></em></p></div>
<span class="comment-copy">In this case, if long paths aren't enabled (Windows 10 + Python 3.6+), then a path that's too long will also result in <code>ERROR_PATH_NOT_FOUND</code> (3) if it exceeds <code>MAX_PATH</code>, which is 260 characters, including the terminating NUL (e.g. <code>os.mkdir('C:/Temp/' + 'a' * 252)</code>. You'll see <code>ERROR_FILENAME_EXCED_RANGE</code> (206) instead if the resulting path doesn't leave space for at least an 8.3 short filename (e.g. <code>os.mkdir('C:/Temp/' + 'a' * 240)</code>).</span>
<span class="comment-copy">If the directory name itself exceeds the file system limit (e.g. 255 characters), the error is typically <code>ERROR_INVALID_NAME</code> (123).</span>
<span class="comment-copy">When you're looking to handle specific error codes, the default for all other error codes should be a <code>raise</code> statement.</span>
<span class="comment-copy">@eryksun: I know, <i>OP</i> also mentioned this fact (for all cases). But I was only trying to prove the concept, and if I was to raise exceptions, their tracebacks would generate to much output.</span>
<span class="comment-copy">Handling other cases is an obvious extrapolation of the first two cases, but knowing to include a bare <code>raise</code> statement for unhandled error codes isn't obvious.</span>
