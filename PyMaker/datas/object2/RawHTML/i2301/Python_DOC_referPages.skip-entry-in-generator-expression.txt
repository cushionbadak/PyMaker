<div class="post-text" itemprop="text">
<p>What is the best way to skip entries in a <strong>generator expression</strong> that are created using a function and another generator?</p>
<p>In essence, I am looking for an expression that looks like this:</p>
<pre><code>some_iter = (some_function(_x, _y, **kwargs) or continue for _x, _y in some_generator(*x))
</code></pre>
<p>(but the <code>continue</code> statement obviously doesn't work in this context)</p>
<p>Functionally, it should act like this:</p>
<pre><code>def some_iter(*x):
    for _x, _y in some_generator(*x):
        x = some_function(_x, _y, **kwargs)
        if x:
            yield x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A list comprehension allows to filter <em>and then</em> map. You want to manually <code>map</code> your function first.</p>
<pre><code>gen = (x for x in map(function, generator(*args)) if x)
</code></pre>
<p>The above is for a <code>generator</code> that yields single arguments. You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a> if it returns a <code>tuple</code> of arguments.</p>
<pre><code>from itertools import starmap

gen = (x for x in starmap(function, generator(*args)) if x)
</code></pre>
<p>Finally, if you also need to pass in keyword arguments, you will need to rely on a <code>lambda</code> function.</p>
<pre><code>gen = (x for x in map(lambda args: function(*args, **kwargs), generator(*g_args)) if x)
</code></pre>
<p>Although, note that at that point, the function-style generator might be more readable.</p>
<pre><code>def gen(*x):
    for args in generator(*x):
        x = some_function(*args, **kwargs)
        if x:
            yield x
</code></pre>
</div>
<span class="comment-copy">You have to use nested generator: <code>(_x for _x in (function(_x) for _x in generator(*x)) if _x)</code> or <code>filter(None, (function(_x) for _x in generator(*x))</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3766711/advanced-nested-list-comprehension-syntax">Advanced Nested List Comprehension Syntax</a></span>
<span class="comment-copy">In python3.8, you can use assignment expressions <code>(y := function(_x) for _x in generator(*x) if y)</code> (I think)</span>
<span class="comment-copy">By the way, why not using the function-style generator? It works perfectly fine and is more readable.</span>
<span class="comment-copy">I might end up using the function-style generator, but the purpose of the question was to query if there was a way using the generator expression that I might not know of.  If only @coldspeed's answer would work with older versions of python!</span>
<span class="comment-copy"><code>function</code> isn't a builtin?</span>
<span class="comment-copy">@Chris_Rands Hum you are right... Pycharm told me it was one and I blindly trusted it</span>
<span class="comment-copy">@OlivierMelan√ßon this is a helpful answer, but see my most recent edits... can <code>map()</code> still be applied if the function requires multiple arguments and keyword arguments?</span>
<span class="comment-copy">@omegamanda No, but in that case you can use starmap, let me add a note on that</span>
<span class="comment-copy">@omegamanda Well see the final update</span>
