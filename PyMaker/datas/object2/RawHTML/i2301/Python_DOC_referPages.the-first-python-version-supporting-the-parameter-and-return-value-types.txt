<div class="post-text" itemprop="text">
<p>One of the talked about features in <code>Python 3.5</code> is said to be <code>type hints</code>.</p>
<p>An example of <code>type hints</code> is mentioned in this <a href="http://lwn.net/Articles/650904/">article</a> and <a href="http://lwn.net/Articles/640359/">this</a> while also mentioning to use type hints responsibly. Can someone explain more about it and when it should be used and when not?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest reading <a href="https://www.python.org/dev/peps/pep-0483/" rel="noreferrer">PEP 483</a> and <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a> and watching <a href="https://www.youtube.com/watch?v=2wDvzy6Hgxg" rel="noreferrer">this</a> presentation by Guido on Type Hinting.</p>
<p><strong>In a nutshell</strong>: <em>Type hinting is literally what the words mean, you hint the type of the object(s) you're using</em>. </p>
<p>Due to the <em>dynamic</em> nature of Python, <em>inferring or checking the type</em> of an object being used is especially hard. This fact makes it hard for developers to understand what exactly is going on in code they haven't written and, most importantly, for type checking tools found in many IDEs [PyCharm, PyDev come to mind] that are limited due to the fact that they don't have any indicator of what type the objects are. As a result they resort to trying to infer the type with (as mentioned in the presentation) around 50% success rate. </p>
<hr/>
<p>To take two important slides from the Type Hinting presentation:</p>
<h3><strong><em>Why Type Hints?</em></strong></h3>
<ol>
<li><strong>Helps Type Checkers:</strong> By hinting at what type you want the object to be the type checker can easily detect if, for instance, you're passing an object with a type that isn't expected.</li>
<li><strong>Helps with documentation:</strong> A third person viewing your code will know what is expected where, ergo, how to use it without getting them <code>TypeErrors</code>. </li>
<li><strong>Helps IDEs develop more accurate and robust tools:</strong> Development Environments will be better suited at suggesting appropriate methods when know what type your object is. You have probably experienced this with some IDE at some point, hitting the <code>.</code> and having methods/attributes pop up which aren't defined for an object.</li>
</ol>
<h3><strong><em>Why use Static Type Checkers?</em></strong></h3>
<ul>
<li><strong>Find bugs sooner</strong>: This is self evident, I believe.</li>
<li><strong>The larger your project the more you need it</strong>: Again, makes sense. Static languages offer a robustness and control that
dynamic languages lack. The bigger and more complex your application becomes the more control and predictability (from
a behavioral aspect) you require.</li>
<li><strong>Large teams are already running static analysis</strong>: I'm guessing this verifies the first two points.</li>
</ul>
<p><strong>As a closing note for this small introduction</strong>: This is an <strong>optional</strong> feature and, from what I understand, it has been introduced in order to reap some of the benefits of static typing. </p>
<p>You generally <strong>do not</strong> need to worry about it and <strong>definitely</strong> don't need to use it (especially in cases where you use Python as an auxiliary scripting language). It should be helpful when developing large projects as <em>it offers much needed robustness, control and additional debugging capabilities</em>.</p>
<hr/>
<h2><strong>Type Hinting with mypy</strong>:</h2>
<p>In order to make this answer more complete, I think a little demonstration would be suitable. I'll be using <a href="http://mypy-lang.org/" rel="noreferrer"><code>mypy</code></a>, the library which inspired Type Hints as they are presented in the PEP. This is mainly written for anybody bumping into this question and wondering where to begin.</p>
<p>Before I do that let me reiterate the following: <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a> doesn't enforce anything; it is simply setting a direction for function
annotations and proposing guidelines for <strong>how</strong> type checking can/should be performed. You can annotate your functions and
hint as many things as you want; your scripts will still run regardless of the presence of annotations because Python itself doesn't use them.</p>
<p>Anyways, as noted in the PEP, hinting types should generally take three forms:</p>
<ul>
<li>Function annotations. (<a href="https://www.python.org/dev/peps/pep-3107/" rel="noreferrer">PEP 3107</a>)</li>
<li>Stub files for built-in/user modules. </li>
<li>Special <code># type: type</code> comments that complement the first two forms. (See: <strong><a href="https://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133">What are variable annotations in Python 3.6?</a></strong> for a Python 3.6 update for <code># type: type</code> comments)</li>
</ul>
<p>Additionally, you'll want to use type hints in conjunction with the new <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code></a> module introduced in <code>Py3.5</code>. In it, many (additional) ABCs (Abstract Base Classes) are defined along with helper functions and decorators for use in static checking. Most <code>ABCs</code> in <code>collections.abc</code> are included but in a <code>Generic</code> form in order to allow subscription (by defining a <code>__getitem__()</code> method).</p>
<p>For anyone interested in a more in-depth explanation of these, the <a href="http://mypy.readthedocs.org/en/latest/" rel="noreferrer"><code>mypy documentation</code></a> is written very nicely and has a lot of code samples demonstrating/describing the functionality of their checker; it is definitely worth a read.</p>
<h3>Function annotations and special comments:</h3>
<p>First, it's interesting to observe some of the behavior we can get when using special comments. Special <code># type: type</code> comments
can be added during variable assignments to indicate the type of an object if one cannot be directly inferred. Simple assignments are
generally easily inferred but others, like lists (with regard to their contents), cannot.</p>
<p><strong>Note:</strong> If we want to use any derivative of <code>Containers</code> and need to specify the contents for that container we <strong>must</strong> use the <strong><em>generic</em></strong> types from the <code>typing</code> module. <strong>These support indexing.</strong></p>
<pre><code># generic List, supports indexing.
from typing import List

# In this case, the type is easily inferred as type: int.
i = 0

# Even though the type can be inferred as of type list
# there is no way to know the contents of this list.
# By using type: List[str] we indicate we want to use a list of strings.
a = []  # type: List[str]

# Appending an int to our list
# is statically not correct.
a.append(i)

# Appending a string is fine.
a.append("i")

print(a)  # [0, 'i']
</code></pre>
<p>If we add these commands to a file and execute them with our interpreter, everything works just fine and <code>print(a)</code> just prints
the contents of list <code>a</code>. The <code># type</code> comments have been discarded, <em>treated as plain comments which have no additional semantic meaning</em>.</p>
<p>By running this with <code>mypy</code>, on the other hand, we get the following responce:</p>
<pre><code>(Python3)jimmi@jim: mypy typeHintsCode.py
typesInline.py:14: error: Argument 1 to "append" of "list" has incompatible type "int"; expected "str"
</code></pre>
<p>Indicating that a list of <code>str</code> objects cannot contain an <code>int</code>, which, statically speaking, is sound. This can be fixed by either abiding to the type of <code>a</code> and only appending <code>str</code> objects or by changing the type of the contents of <code>a</code> to indicate that any value is acceptable (Intuitively performed with <code>List[Any]</code> after <code>Any</code> has been imported from <code>typing</code>).</p>
<p>Function annotations are added in the form <code>param_name : type</code> after each parameter in your function signature and a return type is specified using the <code>-&gt; type</code> notation before the ending function colon; all annotations are stored in the <code>__annotations__</code> attribute for that function in a handy dictionary form. Using a trivial example (which doesn't require extra types from the <code>typing</code> module):</p>
<pre><code>def annotated(x: int, y: str) -&gt; bool:
    return x &lt; y
</code></pre>
<p>The <code>annotated.__annotations__</code> attribute now has the following values:</p>
<pre><code>{'y': &lt;class 'str'&gt;, 'return': &lt;class 'bool'&gt;, 'x': &lt;class 'int'&gt;}
</code></pre>
<p>If we're a complete noobie, or we are familiar with <code>Py2.7</code> concepts and are consequently unaware of the <code>TypeError</code> lurking in the comparison of <code>annotated</code>, we can perform another static check, catch the error and save us some trouble:</p>
<pre><code>(Python3)jimmi@jim: mypy typeHintsCode.py
typeFunction.py: note: In function "annotated":
typeFunction.py:2: error: Unsupported operand types for &gt; ("str" and "int")
</code></pre>
<p>Among other things, calling the function with invalid arguments will also get caught:</p>
<pre><code>annotated(20, 20)

# mypy complains:
typeHintsCode.py:4: error: Argument 2 to "annotated" has incompatible type "int"; expected "str"
</code></pre>
<p>These can be extended to basically any use-case and the errors caught extend further than basic calls and operations. The types you
can check for are really flexible and I have merely given a small sneak peak of its potential. A look in the <code>typing</code> module, the
PEPs or the <code>mypy</code> docs will give you a more comprehensive idea of the capabilities offered.</p>
<h3>Stub Files:</h3>
<p>Stub files can be used in two different non mutually exclusive cases:</p>
<ul>
<li>You need to type check a module for which you do not want to directly alter the function signatures</li>
<li>You want to write modules and have type-checking but additionally want to separate annotations from content.</li>
</ul>
<p>What stub files (with an extension of <code>.pyi</code>) are is an annotated interface of the module you are making/want to use. They contain
the signatures of the functions you want to type-check with the body of the functions discarded. To get a feel of this, given a set
of three random functions in a module named <code>randfunc.py</code>:</p>
<pre><code>def message(s):
    print(s)

def alterContents(myIterable):
    return [i for i in myIterable if i % 2 == 0]

def combine(messageFunc, itFunc):
    messageFunc("Printing the Iterable")
    a = alterContents(range(1, 20))
    return set(a)
</code></pre>
<p>We can create a stub file <code>randfunc.pyi</code>, in which we can place some restrictions if we wish to do so. The downside is that
somebody viewing the source without the stub won't really get that annotation assistance when trying to understand what is supposed
to be passed where.</p>
<p>Anyway, the structure of a stub file is pretty simplistic: Add all function definitions with empty bodies (<code>pass</code> filled) and
supply the annotations based on your requirements. Here, let's assume we only want to work with <code>int</code> types for our Containers.</p>
<pre><code># Stub for randfucn.py
from typing import Iterable, List, Set, Callable

def message(s: str) -&gt; None: pass

def alterContents(myIterable: Iterable[int])-&gt; List[int]: pass

def combine(
    messageFunc: Callable[[str], Any],
    itFunc: Callable[[Iterable[int]], List[int]]
)-&gt; Set[int]: pass
</code></pre>
<p>The <code>combine</code> function gives an indication of why you might want to use annotations in a different file, they some times clutter up
the code and reduce readability (big no-no for Python). You could of course use type aliases but that sometime confuses more than it
helps (so use them wisely).</p>
<hr/>
<p>This should get you familiarized with the basic concepts of Type Hints in Python. Even though the type checker used has been
<code>mypy</code> you should gradually start to see more of them pop-up, some internally in IDEs (<a href="http://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/" rel="noreferrer"><strong>PyCharm</strong></a>,) and others as standard python modules.
I'll try and add additional checkers/related packages in the following list when and if I find them (or if suggested).</p>
<p><strong><em>Checkers I know of</em></strong>:</p>
<ul>
<li><a href="http://mypy-lang.org/" rel="noreferrer"><strong>Mypy</strong></a>: as described here.</li>
<li><a href="https://github.com/google/pytype" rel="noreferrer"><strong>PyType</strong></a>: By Google, uses different notation from what I gather, probably worth a look.</li>
</ul>
<p><strong><em>Related Packages/Projects</em></strong>:</p>
<ul>
<li><a href="https://github.com/python/typeshed/" rel="noreferrer"><strong>typeshed:</strong></a> Official Python repo housing an assortment of stub files for the standard library. </li>
</ul>
<p>The <code>typeshed</code> project is actually one of the best places you can look to see how type hinting might be used in a project of your own. Let's take as an example <a href="https://github.com/python/typeshed/blob/master/stdlib/3/collections.pyi#L78" rel="noreferrer">the <code>__init__</code> dunders of the <code>Counter</code> class</a> in the corresponding <code>.pyi</code> file: </p>
<pre><code>class Counter(Dict[_T, int], Generic[_T]):
        @overload
        def __init__(self) -&gt; None: ...
        @overload
        def __init__(self, Mapping: Mapping[_T, int]) -&gt; None: ...
        @overload
        def __init__(self, iterable: Iterable[_T]) -&gt; None: ...
</code></pre>
<p><a href="http://mypy.readthedocs.org/en/latest/generics.html#defining-generic-classes" rel="noreferrer">Where <code>_T = TypeVar('_T')</code> is used to define generic classes</a>. For the <code>Counter</code> class we can see that it can either take no arguments in its initializer, get a single <code>Mapping</code> from any type to an <code>int</code> <em>or</em> take an <code>Iterable</code> of any type.  </p>
<hr/>
<p><strong>Notice</strong>: One thing I forgot to mention was that the <code>typing</code> module has been introduced on a <em>provisional basis</em>. From <strong><a href="https://www.python.org/dev/peps/pep-0411/" rel="noreferrer">PEP 411</a></strong>:</p>
<blockquote>
<p>A provisional package may have its API modified prior to "graduating" into a "stable" state. On one hand, this state provides the package with the benefits of being formally part of the Python distribution. On the other hand, the core development team explicitly states that no promises are made with regards to the the stability of the package's API, which may change for the next release. While it is considered an unlikely outcome, such packages may even be removed from the standard library without a deprecation period if the concerns regarding their API or maintenance prove well-founded.</p>
</blockquote>
<p>So take things here with a pinch of salt; I'm doubtfull it will be removed  or altered in significant ways but one can never know.</p>
<hr/>
<p><sup>**</sup> Another topic altogether but valid in the scope of type-hints: <a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-526-syntax-for-variable-annotations" rel="noreferrer"><code>PEP 526</code>: Syntax for Variable Annotations</a> is an effort to replace <code># type</code> comments by introducing new syntax which allows users to annotate the type of variables in simple <code>varname: type</code> statements. </p>
<p>See <em><a href="https://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133">What are variable annotations in Python 3.6?</a></em>, as previously mentioned, for a small intro on these.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to Jim's elaborate answer:</p>
<p>Check the <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code> module</a> -- this module supports type hints as specified by <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a>.</p>
<p>For example, the function below takes and returns values of type <code>str</code> and is annotated as follows:</p>
<pre><code>def greeting(name: str) -&gt; str:
    return 'Hello ' + name
</code></pre>
<p>The <code>typing</code> module also supports:</p>
<ol>
<li><a href="https://docs.python.org/3/library/typing.html#type-aliases" rel="noreferrer">Type aliasing</a>.</li>
<li>Type hinting for <a href="https://docs.python.org/3/library/typing.html#callable" rel="noreferrer">callback functions</a>.</li>
<li><a href="https://docs.python.org/3/library/typing.html#generics" rel="noreferrer">Generics</a> - Abstract base classes have been extended to support subscription to denote expected types for container elements.</li>
<li><a href="https://docs.python.org/3/library/typing.html#user-defined-generic-types" rel="noreferrer">User-defined generic types</a> - A user-defined class can be defined as a generic class.</li>
<li><a href="https://docs.python.org/3/library/typing.html#typing.Any" rel="noreferrer">Any type</a> - Every type is a subtype of Any.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The newly released PyCharm 5 supports type hinting. In their blog post about it (see <a href="http://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/">Python 3.5 type hinting in PyCharm 5</a>) they offer a great explanation of <strong>what type hints are and aren't</strong> along with several examples and illustrations for how to use them in your code. </p>
<p>Additionally, it is supported in Python 2.7, as explained in <a href="http://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/#comment-259076">this comment</a>:</p>
<blockquote>
<p>PyCharm supports the typing module from PyPI for Python 2.7, Python 3.2-3.4. <em>For 2.7 you have to put type hints in *.pyi stub files since function annotations were added in Python 3.0</em>.</p>
</blockquote>
</div>
<span class="comment-copy">You should take a look at <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP 484</a> which is linked from the <a href="https://www.python.org/downloads/release/python-350/" rel="nofollow noreferrer">official changelog</a>.</span>
<span class="comment-copy">@AvinashRaj: A good discussion on about the releases is going on <a href="https://news.ycombinator.com/item?id=10211565" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">It is a pity that C-API use case is completely ignored by this PEP 484, particularly type hints for Cython and Numba.</span>
<span class="comment-copy">Closely related: <a href="https://stackoverflow.com/q/39971929/4952130">What are variable annotations in Python 3.6?</a>.</span>
<span class="comment-copy">"Due to the highly dynamic nature of Python, inferring or checking the type of an object being used is especially hard." You're referring to static checking, right?</span>
