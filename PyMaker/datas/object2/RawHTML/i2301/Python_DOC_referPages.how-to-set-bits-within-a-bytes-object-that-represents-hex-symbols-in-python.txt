<div class="post-text" itemprop="text">
<p>I want to replace individual symbols within an object of type bytes that represents hex-symbols.</p>
<pre><code>print(type(a)) # --&gt; &lt;class 'bytes'&gt;
</code></pre>
<p>Starting with <code>a = b'2900BC'</code> I want to end up with something like <code>a = b'29F0BC'</code> by calling some function similar to </p>
<pre><code>replace_hex_symbol(input, index, value)
</code></pre>
<p>in my case</p>
<pre><code>replace_hex_symbol(a,2,F)
</code></pre>
<p>Meaning to set symbol number 2 in object a to the value of F (as f_hex = 1111_bin)</p>
<p>As far as I understand, one problem is that the object of type bytes is not mutable. Even with turning it into a bytearray I can not seem to get this done. Is there already a good way in python to achieve such manipulations or has somebody a clever trick how to replace parts within that object full of hex-symbols?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>bytes</code> objects generally have the same methods as strings; both are immutable but that doesn't stop you from creating new objects based on the old value.</p>
<p>For example, you can create a new <code>bytes</code> value with all <code>2</code> ASCII characters replaced with the <code>F</code> ASCII character with the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.replace" rel="nofollow noreferrer"><code>bytes.replace()</code> method</a>:</p>
<pre><code>&gt;&gt;&gt; b'2900BC'.replace(b'2', b'F')
b'F900BC'
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations" rel="nofollow noreferrer"><em>Bytes and Bytearray Operations</em> section</a> of the Python standard types documentation for a list of methods that are supported. Note that the arguments to <code>bytes.replace()</code> must themselves by <code>bytes</code> values!</p>
<p>In terms of your <code>replace_hex_symbol()</code> function:</p>
<pre><code>def replace_hex_symbol(a, old, new):
    # ensure that both old and new are actually bytes
    if not isinstance(old, bytes):
        old = old.encode('ascii')
    if not isinstance(new, bytes):
        new = new.encode('ascii')
    return a.replace(old, new)
</code></pre>
<p>Next, <code>bytearray</code> objects are basically a mutable subclass of <code>bytes</code>; they have the same methods, but you can also directly address indices and update those. See the <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><em>Mutable Sequence Types</em> documentation</a>.</p>
<p>Both <code>bytes</code> and <code>bytearray</code> objects are <em>sequences of integers in the range 0-255</em>, and indexing reflects this. When assigning to a single index of a <code>bytearray</code> you must use integers:</p>
<pre><code>&gt;&gt;&gt; b = bytearray(b'2900BC')
&gt;&gt;&gt; b
bytearray(b'2900BC')
&gt;&gt;&gt; b[0]
50
&gt;&gt;&gt; b[0] = ord('F')  # ascii codepoint for F
&gt;&gt;&gt; b
bytearray(b'F900BC')
</code></pre>
<p>but you could also index using slices (including in assignments), at which point you get the same sequence object again when getting, and any sequence of bytes is acceptable (including a <code>bytes</code> object or list of integers).</p>
<p>However, indexed access to update a <code>bytesarray</code> in place is going to be more cumbersome when you want to replace hexadecimal characters.</p>
<p>In fact, there is nothing about hexadecimal character sequences that states that they must be <code>bytes</code> values! You can just as well use a <code>str</code> object, or a list of individual hex digit characters if you must have a mutable type:</p>
<pre><code>&gt;&gt;&gt; '2900BC'  # string
'2900BC'
&gt;&gt;&gt; list('2900BC')  # list of characters
['2', '9', '0', '0', 'B', 'C']
</code></pre>
<p>If you were instead dealing with binary data <strong>encoded</strong> as hexadecimal digits, then convert that encoded data to a <code>bytes</code> value with the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.fromhex" rel="nofollow noreferrer"><code>bytes.fromhex()</code> factory method</a>, and go back with <a href="https://docs.python.org/3/library/stdtypes.html#bytes.hex" rel="nofollow noreferrer"><code>bytes.hex()</code></a>; <code>bytearray</code> objects support the same conversions.</p>
<p>At that point, hex digits are converted to 4 bit nibbles each, and you need an even length of hexadecimal digits:</p>
<pre><code>&gt;&gt;&gt; bytes.fromhex('2900BC')
b')\x00\xbc'
&gt;&gt;&gt; list(bytes.fromhex('2900BC'))  # show individual byte integer values
[41, 0, 188]
</code></pre>
<p>and you'd have to use <em>bit shifting and masking</em> to set individual nibbles. For example, the <code>2</code> in your input hexadecimal is the most-significant nibble in the first byte, so <code>F</code> hex, or <code>15</code> decimal, would need to be shifted by 4 bits, and then combined with the lower 4 bits of that first byte:</p>
<pre><code>&gt;&gt;&gt; a = bytearray.fromhex('2900BC')  # mutable sequence of 3 bytes
&gt;&gt;&gt; a[0] = (0xF &lt;&lt; 4) | (a[0] &amp; 0xF)  # set upper nibble, preserve lower
&gt;&gt;&gt; a
bytearray(b'\xf9\x00\xbc')
&gt;&gt;&gt; a.hex()
'f900bc'
</code></pre>
<p>See the <a href="https://wiki.python.org/moin/BitManipulation" rel="nofollow noreferrer"><em>bit manipulation</em> page</a> on the Python wiki. However, if you need this level of manipulation at a larger scale, consider a 3rd-party library like <a href="http://scott-griffiths.github.io/bitstring/" rel="nofollow noreferrer"><code>bitstring</code></a> to make this easier for you.</p>
</div>
<span class="comment-copy">Note that this is <i>not</i> a hexadecmimal representation, but an ASCII representation.</span>
<span class="comment-copy">Byte objects are indeed immutable, but you can make a <i>new</i> byte array, for example with <code>a[:2] + 'F' + a[3:]</code>.</span>
<span class="comment-copy">What problems have you had turning the <code>bytes</code> value into a <code>bytearray()</code>? <code>bytearray(bytesvalue)</code> works, and the result is indexable.</span>
<span class="comment-copy">Next, why use <code>bytes</code> objects here when you are manipulating <i>hexadecimal digits</i>? Why not just a list of individual characters, say, or convert that hexadecimal into integers (which then are the bytes of the value). <code>bytes.fromhex('2900BC')</code> would give you a 3-byte value.</span>
<span class="comment-copy">And <code>bytes</code> are just like <code>str</code> values; both are immutable, yes, but you can still call methods on them that return a <i>new</i> object of the same type with the change applied. <code>bytes.replace()</code> works and returns a new object. <code>b'2900BC'.replace(b'2', b'F')</code> returns the expected output, <code>b'F900BC'</code>. Note that <code>bytes.replace()</code> works with <code>bytes</code> values for the value to replace and the replacement value!</span>
<span class="comment-copy">It is not about replacing all occurences of 2 with f but rather setting individual hex-symbols to new values. Such as set the 4 bits behind the hex Symbol on position 2 to a certain value. In my example abouve to the value 1111 represented by the hexadecimal f  I don't see how ascii comes into play here.</span>
<span class="comment-copy">@Simeon: you have an ascii string of hexadecimal bytes. <code>2900BC</code> is <code>50, 57, 48, 48, 66, 67</code> as a list of integer byte values. If you meant to have 3 values, <code>41, 0, 188</code> in decimal integers, then you need to use <code>bytes.fromhex()</code>.</span>
<span class="comment-copy">@Simeon: but then you'd have to use bitmasking to set nibbles (2 nibbles of 4 bits in a byte).</span>
<span class="comment-copy">I am fine with only altering nibbles</span>
<span class="comment-copy">Then keep your hex strings and update individual hex digits. But then you don't need <code>bytes</code>; if you find it easier to work with a mutable type just make it a list of digits.</span>
