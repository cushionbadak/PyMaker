<div class="post-text" itemprop="text">
<p>Suppose I have the following input:</p>
<pre><code>1234
</code></pre>
<p>How can I get the following output?</p>
<pre><code>3412
</code></pre>
<p>This is obtained by circularly shifting (or rotating) the digits of the input twice.</p>
<p>I have tried the following code:</p>
<pre><code>number = 1234
bin(number &gt;&gt; 1)
</code></pre>
<p>but it is not producing the results I was expecting.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>&gt;&gt;</code> operator does a <a href="https://docs.python.org/3/reference/expressions.html#shifting-operations" rel="noreferrer">binary bitshift</a>.</p>
<p>It moves the binary representation of <code>1234</code> on place to the right, discarding the rightmost (least significant) bit.</p>
<p>Therefore you code does not result in <code>3412</code>.</p>
<p>You probably want string rotation instead:</p>
<pre><code>&gt;&gt;&gt; def rotr(string, n):
...     return string[n:] + string[:n]
... 
&gt;&gt;&gt; rotr("1234", 2)
'3412'
</code></pre>
<p>You can also convert it back to an integer afterwards</p>
<pre><code>&gt;&gt;&gt; int('3412')
3412
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would convert to string to be able to slice it.</p>
<pre><code>number=1234
right_shift_no = 2
new_number = int(str(number)[right_shift_no:]+str(number)[:right_shift_no])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's the lazy man's version:</p>
<pre><code>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; number = 1234
&gt;&gt;&gt; d = deque(str(number))
&gt;&gt;&gt; d.rotate(2)
&gt;&gt;&gt; result = int(''.join(d))
&gt;&gt;&gt; result
3412
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you must stick with numbers (though I'd go with the string option first)</p>
<pre><code>from math import log10, floor
s = 2  # digits to shift by
p = 10 ** s  # that as a power of 10
n = 1234
rhs = n // p  # right hand side of result (here 12)
rhs_n = floor(log10(rhs)) + 1  # number of digits in rhs
rhs + (n % p) * 10 ** rhs_n  # add other digits, n % p, shifted by size of rhs
</code></pre>
<p>and all together in a function</p>
<pre><code>from math import log10, floor

def rotate(n, s):
    p = 10 ** s
    rhs = n // p
    return rhs + (n % p) * 10 ** (floor(log10(rhs)) + 1)
</code></pre>
</div>
<span class="comment-copy">First of all you should probably save it as a string, not an integer</span>
<span class="comment-copy">That's called a right rotation by the way.</span>
<span class="comment-copy">"but i am getting 3412 as output". That's strange, on my machine that code prints 0b1001101001. I think the first thing you should do is look up the documentation for "&gt;&gt;" to confirm whether "right shifting" does what you think it does.</span>
<span class="comment-copy">@Kevin i am trying to convert number into binary then right shift then binary into number</span>
<span class="comment-copy">thanks!! again like @onno the logic is simpler than what i thought to solve the problem</span>
<span class="comment-copy">I am glad I could help you. Feel free to mark my answer as accepted if it helped you solving your problem :)</span>
<span class="comment-copy">thanku!! Logic of solving this problemof mine is complicated. thanks for sharing a easy logic</span>
<span class="comment-copy">Thanku!! I learnt something new from you to rotate a string</span>
<span class="comment-copy">hey thanks!!You need to explain me as its lil bit different from what i thought</span>
<span class="comment-copy">@TanyaChaudhary explained</span>
