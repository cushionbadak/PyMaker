<div class="post-text" itemprop="text">
<pre><code>def convBin():
    cont = []
    rest = []
    dev = []
    decimal = []

    print("Give me a number: ")
    valor = input()

    if isinstance(valor, int):
        while valor &gt; 0:
            z = valor // 2
            resto = x%2
            valor = valor // 2
            cont.append(z)
            rest.append(resto)

        cont.reverse()
        rest.pop()

        dev.append(cont[1])

        for i in rest:
            dev.append(rest[i])

        print(" ")
        print("Lista de devoluciones: ")
        print(dev)
        print("")

    elif isinstance(valor, float):
        a = valor // 1
        b = valor % 1

        while a &gt; 0:
            z = a // 2
            resto = a%2
            a = a // 2
            cont.append(z)
            rest.append(resto)

        cont.reverse()
        rest.pop()

        dev.append(cont[1])

        for i in rest:
            dev.append(rest[i])

        print("How many decimals do you want?")
        num = input()

        while num &gt; 0:
            dec = b * 1
            dec2 = dec//1
            dec %= 1        
            decimal.append(dec2)


        print("Full part: ")
        print(dev)
        print("Decimal part:")
        print(num)

    else:
        print("An error has appeared")
</code></pre>
<p>I'm studying Python on my own, so I know that I have big mistakes in the code. Any advice is welcome.</p>
<p>This code is for a binary converter. </p>
<p>Got a problem with the <code>isinstance()</code>. When I try the code, at the moment that read by keyboard it ignores the "if" and it goes directly to the "else". </p>
<p>For example:</p>
<pre><code>  1. It asks you a number.
  2. It goes to the first if and compare the x type with int(for some reason it is false).
  3. It goes to the `elif` and does the same(check if its float).
  4. Both are false so it goes to else and prints the error.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ast.literal_eval()</code> instead to parse the string returned by the <code>input()</code> function into an object represented by the content of the string, so that you can use <code>isinstance()</code> to test its type as you intended:</p>
<pre><code>import ast
while True:
    try:
        valor = ast.literal_eval(input("Give me a number: "))
        break
    except SyntaxError, ValueError:
        print("Please enter a valid number.")
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input()</code></a> will always return a string in Python 3.</span>
<span class="comment-copy">You should probably include a caveat about the errors <code>literal_eval</code> will raise if given input that is not a valid literal.</span>
<span class="comment-copy">Indeed. Updated as suggested then.</span>
