<div class="post-text" itemprop="text">
<p>Environment:</p>
<pre><code>Linux &amp; CPython 3.6.4
</code></pre>
<p>Hi everyone,</p>
<p>I'm trying to determine if an object is a function. And I do this with the types library, the code I wrote is like the following.</p>
<pre><code>class Foo:

    @classmethod
    def is_function(cls, obj):
        ''' determines whether an object is a function
        '''

        return isinstance(obj, types.FunctionType)

    @classmethod
    def is_classmethod(cls, obj):
        ''' determines whether an object is a class method
        '''

        type_ = type(cls.is_classmethod)
        return isinstance(obj, type_)
</code></pre>
<p>The first function "is_function" dosn't works on class methods. So, I wrote the second function "is_classmethod". And I read the code of the types library in order to find something like "ClassmethodType", but I found the following code, so the type I'm using in the second function is "type(cls.is_classmethod)".</p>
<pre><code># lib/python3.6/types.py at line 11

def _f(): pass
FunctionType = type(_f)
</code></pre>
<p>Then, I did some experiment with it:</p>
<pre><code>class Bar:

    @classmethod
    def b(cls):
        pass

Foo.is_function(Bar.b)     # False
Foo.is_classmethod(Bar.b)  # True
</code></pre>
<p>These 2 functions work as expected. But, when I pass datetime.datetime.now into these functions, both of them return False.</p>
<p>And I already read the code of datetime library before doing this, datetime.datetime.now is definitely a class method.</p>
<pre><code># lib/python3.6/datetime.py at line 1475

@classmethod
def now(cls, tz=None):
    "Construct a datetime from time.time() and optional time zone info."
    t = _time.time()
    return cls.fromtimestamp(t, tz)
</code></pre>
<p>I cannot even imagine about this, how could it be? The second function has already been proven, it do detects class methods and I found nothing special on datetime.datetime.now, it just a normal classmethod.</p>
<p>So, what caused this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code doesn't detect <code>datetime.now</code> as a classmethod because that method is implemented in C.</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now
&lt;built-in method now of type object at 0x7f723093a960&gt;
</code></pre>
<p>The method definition you found in <code>datetime.py</code> is only used as a fallback if the C implementation of the <code>datetime</code> module isn't available. On the bottom of <code>datetime.py</code>, you'll find this import that attempts to import the C implementation:</p>
<pre><code>try:
    from _datetime import *
except ImportError:
    pass
</code></pre>
<p>So the class and method you've found simply aren't used.</p>
<p>Methods implemented in C do not use the <code>@classmethod</code> decorator, so your function's <code>isinstance(...)</code> check will never succeed. In order to detect a method written in C, you have to make use of the various types defined in the <a href="https://docs.python.org/3/library/types.html" rel="nofollow noreferrer"><code>types</code></a> module:</p>
<ul>
<li><a href="https://docs.python.org/3/library/types.html#types.BuiltinMethodType" rel="nofollow noreferrer"><code>BuiltinMethodType</code></a></li>
<li><a href="https://docs.python.org/3/library/types.html#types.WrapperDescriptorType" rel="nofollow noreferrer"><code>WrapperDescriptorType</code></a></li>
<li><a href="https://docs.python.org/3/library/types.html#types.MethodDescriptorType" rel="nofollow noreferrer"><code>MethodDescriptorType</code></a></li>
<li><a href="https://docs.python.org/3/library/types.html#types.ClassMethodDescriptorType" rel="nofollow noreferrer"><code>ClassMethodDescriptorType</code></a></li>
<li><a href="https://docs.python.org/3/library/types.html#types.MethodWrapperType" rel="nofollow noreferrer"><code>MethodWrapperType</code></a> (for bound dundermethods)</li>
</ul>
<p><code>datetime.now</code> happens to be an instance of <code>BuiltinMethodType</code>:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; isinstance(datetime.now, types.BuiltinMethodType)
True
</code></pre>
<p>But if you want to detect all kinds of classmethods, you should check against all of the aforementioned types:</p>
<pre><code>def is_classmethod(obj):
    return isinstance(obj, (types.BuiltinMethodType,
                            types.WrapperDescriptorType,
                            types.MethodDescriptorType,
                            types.ClassMethodDescriptorType,
                            types.MethodWrapperType))
</code></pre>
<p><em>However</em>, you must be aware that there is no difference between <em>functions</em> and <em>methods</em> if they're defined in C. As such, it is impossible to detect classmethods reliably:</p>
<pre><code>&gt;&gt;&gt; is_classmethod(datetime.now)
True
&gt;&gt;&gt; is_classmethod('foo'.__str__)
True
&gt;&gt;&gt; is_classmethod(sorted)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't sound like you're really after a type check. It seems like what you're really looking for is a way to determine whether an object is <em>callable</em>, and the way to do that is with the built-in function <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable</code></a>:</p>
<pre><code>&gt;&gt;&gt; callable(datetime.datetime.now)
True
</code></pre>
<p>Regular function, C function, C method, slot wrapper, NumPy ufunc, whatever, if it can be called, <code>callable</code> will return <code>True</code>. Checking types is too sensitive to implementation details; Python has too many function and function-like types, and any library can introduce new ones. Also, the <a href="https://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow noreferrer">descriptor protocol</a> means that you don't actually get a classmethod object when you try to access a classmethod, so the idea of testing for classmethods is kind of questionable in the first place.</p>
</div>
<span class="comment-copy">The concept of a "function" or "method" in Python might seem simple, but there are at least 10 different function and method types in the standard implementation, not counting aliases - <code>types.FunctionType</code>, <code>types.MethodType</code>, <code>types.BuiltinFunctionType</code>, <code>types.WrapperDescriptorType</code>, <code>types.MethodWrapperType</code>, <code>types.MethodDescriptorType</code>, <code>types.ClassMethodDescriptorType</code>, <code>staticmethod</code>, <code>classmethod</code>, and <code>PyInstanceMethod_Type</code>. (<code>types.LambdaType</code> is the same as <code>types.FunctionType</code>, and <code>types.BuiltinMethodType</code> is the same as <code>types.BuiltinFunctionType</code>.)</span>
<span class="comment-copy">Yes! Thanks for the answer. As you said, I comment these code at the bottom of datetime.py and it fallbacks to that classmethod defined in python.</span>
<span class="comment-copy">"In order to detect a method written in C, you have to use types.BuiltinMethodType" - unless it's a wrapper descriptor, or a method wrapper, or a method descriptor, or one of the other surprisingly large number of C method types. Also, C functions (not methods) also pass that <code>isinstance</code> check, because <code>types.BuiltinMethodType</code> and <code>types.BuiltinFunctionType</code> are the same type.</span>
<span class="comment-copy">@user2357112 Thanks for pointing that out. Answer updated.</span>
<span class="comment-copy">Actually, I did. These code above is just a fragment, I need to detect a lot of types, not only functions. Callable is not the correct way to detect functions, because classes and objects could also be callable.</span>
<span class="comment-copy">@Mr.I: As far as duck typing goes, those are functions, and they will very often be documented as functions. For example, almost every function in <code>itertools</code> is really a class, almost every function in <code>random</code> is really a method, most of the core functions in NumPy are really <code>numpy.ufunc</code> objects, etc. It is sometimes useful to distinguish them, but prepare for a lot of "what do you mean that's not an X?" moments.</span>
<span class="comment-copy">Thanks for reminding me, I will pay attention on it :)</span>
