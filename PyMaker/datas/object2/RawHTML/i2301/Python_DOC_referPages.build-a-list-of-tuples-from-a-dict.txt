<div class="post-text" itemprop="text">
<p>I have a list <code>y</code> of keys from a dictionary that is derived from a call to the <code>Google Places API</code>.</p>
<p>I would like to build a list of tuples for each point of interest:</p>
<pre><code>lst = []
for i in range(len(y)):
    lst.append((y[i]['name'], y[i]['formatted_address'], y[i]['opening_hours']['open_now'], y[i]['rating']))
</code></pre>
<p>This works if the field is in the list and I receive a list of results that look like the one below, which is exactly what I want:</p>
<pre><code>("Friedman's", '1187 Amsterdam Ave, New York, NY 10027, USA', True, 4.2)
</code></pre>
<p>However, the script throws an error if a desired field is not in the list <code>y</code>. How can I build a list of tuples that checks whether the desired field is in <code>y</code> before building the tuple?</p>
<p>Here's what I've tried:</p>
<pre><code>    for i in range(len(y)):
        t = ()
        if y[i]['name']:
            t = t + lst.append(y[i]['name'])
        if y[i]['formatted_address']:
            t = t + lst.append(y[i]['formatted_address'])
        if y[i]['opening_hours']['open_now']:
            t = t + lst.append(y[i]['opening_hours']['open_now'])
        if y[i]['rating']:
            t = t + lst.append(y[i]['rating'])
    lst.append(t)
</code></pre>
<p>However, this doesn't work and seems very inelegant. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>This list comprehension uses default values when one of the keys is not present (using <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a>). I added variables so you can set the desired default values.</p>
<pre><code>default_name = ''
default_address = ''
default_open_now = False
default_rating = 0.0

new_list = [
    (
        e.get('name', default_name),
        e.get('formatted_address', default_address),
        e.get('opening_hours', {}).get('open_now', default_open_now),
        e.get('rating', default_rating),
    )
    for e in y]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a start, you should almost never loop over range(len(something)). Always iterate over the thing directly. That goes a long way to making your code less inelegant.</p>
<p>For the actual issue, you could loop over the keys and only add the item if it is in the dict. That gets a bit more complicated with your one element that is a nested lookup, but if you take it out then your code just becomes:</p>
<pre><code>for item in y:
    lst.append(tuple(item[key] for key in ('name', 'formatted_address', 'opening_hours', 'rating') if key in item))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#dict.get" rel="nofollow noreferrer"><code>get</code></a> feature from <code>dict</code>.</p>
<pre><code>y[i].get('name')
</code></pre>
<p>if <code>y[i]</code> has key <code>'name'</code> returns the value or <code>None</code>. For nested dicts, use <code>default</code> value from <code>get</code>.</p>
<pre><code>y[i].get('opening_hours', {}).get('open_now')
</code></pre>
<p>For data structure, I recommend to keep it as an dict, and add dicts to an list.</p>
<pre><code>lst = []
lst.append({'name': "Friedman's", "address": '1187 Amsterdam Ave, New York, NY 10027, USA'})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>for i in y:
    lst.append((v for k,v in i.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use the keys method to find the keys in a dict. In your case:</p>
<pre><code>lst=[]
fields = ('name', 'formatted_address', 'opening_hours' 'open_now', 'rating')
for i in range(len(y)):
    data = []
    for f in fields:
        if f in y[].keys():
            data.append(y[i][f])
        else:
            data.append(None)
    lst.append(set(data))
</code></pre>
<p>note that you can also get all the key, value pairs in a dict using the items() method. That would actually simply the code a bit. To make it even better, itterate over the set, rather than calling len(set) to:</p>
<pre><code>lst=[]
fields = ('name', 'formatted_address', 'opening_hours' 'open_now', 'rating')
for i in y:
    data = []
        for key, value in i.items():
        if key in fields:
            data.append(value)
        else:
            data.append(None)
    lst.append(set(data))
</code></pre>
</div>
<span class="comment-copy"><code>dict.get()</code> allows you to specify a "default" value if the key doesn't exist</span>
<span class="comment-copy">what do you want to happen if that key wasn't in dict? you want to set in none or skip that tuple completely?</span>
<span class="comment-copy">I doubt you want a list of tuples of varying sizes; how do you know which field is actually missing if the tuple is shorter than usual.</span>
<span class="comment-copy">If the key isn't in the dict, I would set it to none. So, the example tuple would have a value of <code>none</code> if no <code>rating</code> were available.</span>
<span class="comment-copy">This is a great solution- thank you.</span>
