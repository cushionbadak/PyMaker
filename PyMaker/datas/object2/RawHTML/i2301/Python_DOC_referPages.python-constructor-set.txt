<div class="post-text" itemprop="text">
<p>I was looking at the python documentation about set(), but I'm still trying to understand why does this function deletes repeated characters in a string, for example:</p>
<pre><code>set("apple")
</code></pre>
<p>returns <code>{"a","p","l","e"}</code>.
Is it a special property of sets?</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/library/stdtypes.html#types-set" rel="nofollow noreferrer">the first sentence of the <code>set</code> docs</a> (emphasis added):</p>
<blockquote>
<p>A set object is an unordered collection of <strong>distinct</strong> hashable objects.</p>
</blockquote>
<p>"distinct" can be interpreted here to mean "unique" or "non-repeating" objects; as the example use cases note:</p>
<blockquote>
<p>Common uses include membership testing, <strong>removing duplicates from a sequence</strong>, and computing mathematical operations such as intersection, union, difference, and symmetric difference.</p>
</blockquote>
<p>Because <code>str</code> are iterables of their own letters, <code>set("apple")</code> is essentially a faster equivalent to <code>set(["a", "p", "p", "l", "e"])</code>, which causes the duplicated letters to be removed. If you'd wanted a <code>set</code> with an initial entry of <code>"apple"</code>, you'd use <code>{"apple"}</code> (set literal) or <code>set(("apple",))</code>/<code>set(["apple"])</code> (set constructor applied to <code>tuple</code> or <code>list</code> of values to include). This is a general property of <code>str</code>, not specific to <code>set</code> cases; <code>list("apple")</code> would produce <code>["a", "p", "p", "l", "e"]</code> for the same reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes sets contain unique elements and are much faster for comparisons like checking if an item exists than lists for example. As well as having lots of other nice properties.</p>
<p>so another example would be </p>
<pre><code>set([1,1,1,2,3])
</code></pre>
<p>returns</p>
<pre><code>{1,2,3}
</code></pre>
<p>the unique items.</p>
<p>One thing to note is that sets are not ordered like lists, which has both positives and negatives</p>
</div>
<div class="post-text" itemprop="text">
<p><code>set()</code> accepts an iterable in this case <code>apple</code> is treated as one, yielding 'a', 'p', 'p', 'l', 'e' which are then added to the set and because sets only contain unique elements you end up with <code>{"a","p","l","e"}</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If an optional iterable parameter is supplied to set(), it updates the set with elements obtained from iteration. That is from the docs.</p>
<pre><code>set('apple')
{'a', 'p', 'l', 'e'}
set(('a','p','p','l','e'))
{'a', 'p', 'l', 'e'}
set(['a','p','p','l','e'])
{'a', 'p', 'l', 'e'}
</code></pre>
<p>A set only contains unique elements. When you pass it an iterable, ie. string, tuple, list - It creates a set, iterating over the passed in object.</p>
</div>
<span class="comment-copy">That is the <i>definition</i> of sets. They contain each item only once.</span>
<span class="comment-copy">Sets are unordered collections of unique objects. The set constructor accepts an iterable of objects. You passed it a string, which is an iterable of strings of the individual characters in the string. So, <code>s = 'abc'</code> and <code>list(s)</code> will give you <code>['a','b','c']</code></span>
<span class="comment-copy">Is your question why the result is not a set containing the single string <code>"apple"</code>, but the set of all the individual letters?</span>
