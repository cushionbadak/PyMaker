<div class="post-text" itemprop="text">
<p>I am writing a method to implement a bank account. It's very simple, I want the output to be the name and account type of the user. However, I am having trouble using <code>Enum</code> in my main class.</p>
<pre><code>from enum import Enum

class AccountType(Enum):
    SAVINGS = 1
    CHECKING = 2

#bank account classes that uses AccountType
class BankAccount():
    def __init__(self, owner, accountType):
        self.owner = owner
        self.accountType = accountType

    def __str__(self):
        self.d = AccountType(1)
        return "The owner of this account is {} and his account type is: {} ".format(self.owner, self.d)

#test the code
test = BankAccount("Max", 1)
print(test)
</code></pre>
<p>Output</p>
<p><code>The owner of this account is Max and his account type is: AccountType.SAVINGS</code></p>
<p>So this is the desired output, but this only works when I hard-code the account type in the <code>__str__</code> method (<code>AccountType(1)</code>). To clarify, I mean this line:</p>
<pre><code>BankAccount("Max", 1)
</code></pre>
<p>Is there a way to do this such that if I enter <code>1</code> into the <code>BankAccount</code> parameter for accountType , it returns</p>
<p><code>The owner of this account is Max and his account type is: AccountType.SAVINGS</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is just a guess because I'm still unsure about exactly what you're asking.</p>
<pre><code>from enum import Enum

class AccountType(Enum):
    SAVINGS = 1
    CHECKING = 2

#bank account classes that uses AccountType
class BankAccount:
    def __init__(self, owner, accountType):
        self.owner = owner
        self.accountType = accountType

    def __str__(self):
        return("The owner of this account is {} "
               "and his account type is: {} ".format(
                    self.owner, AccountType(self.accountType).name))

#test the code
test = BankAccount("Max", 1)
print(test)
test2 = BankAccount("Mark", 2)
print(test2)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>The owner of this account is Max and his account type is: SAVINGS
The owner of this account is Mark and his account type is: CHECKING
</code></pre>
<p>This way you don't have to hardcode anything or create the <code>self.d</code> attribute since it's no longer needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can apply the same thing you do to the hard-coded 1 in <code>__str__</code> to <code>accountType</code> in <code>__init__</code>:</p>
<pre><code>self.accountType = AccountType(accountType)
</code></pre>
<p>Even though you can now get rid of <code>self.d</code> and use <code>self.accountType</code>, I would recommend not using the integer value in the initialization to begin with:</p>
<pre><code>test = BankAccount("Max", AccountType.SAVINGS)
</code></pre>
<p>This is much clearer than using a magic number. The update to <code>__init__</code> will accept both the enums and their values.</p>
</div>
<span class="comment-copy">Why are you using <code>self.d</code> instead of <code>self.accountType</code>?</span>
<span class="comment-copy">Unlcear what you meant by "if I enter 1 into the <code>BankAccount</code> object, it returns the account type?". Please <a href="https://stackoverflow.com/posts/52527750/edit">edit</a> your question and clarify—maybe with an example of what you want to happen.</span>
<span class="comment-copy">@martineau. Thanks for the heads up. I've put my edit back but without the highlight.</span>
<span class="comment-copy">Workhorse: Sorry, but your edit really didn't help much because you haven't said what you want to return that (string?) which looks exactly like what was shown earlier below "Output".</span>
<span class="comment-copy">@martineau. Agreed. I like the block notation, but apparently OP does not. I'm mostly after the edit-and-answer within 12 hours badge.</span>
<span class="comment-copy">This is exactly what I wanted! the <code>.name</code> command is new to me.</span>
<span class="comment-copy">Workhorse: Truthfully, it's new to me, too. Each <i>member</i> of an <code>Enum</code> has <code>name</code> and <code>value</code> attributes associated with it. The only explicit mention I've found about this in the documentation is in the last bullet point in this note about <a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="nofollow noreferrer">Nomenclature</a>—so it's something that could be easily overlooked.</span>
<span class="comment-copy">Workhorse: Correction: <code>name</code> and <code>value</code> are actually properties (not attributes) of members. There is a <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">little more about them</a> in the documentation.</span>
<span class="comment-copy">@user2357112. Thanks. I blame autocorrect :)</span>
<span class="comment-copy">Is there a way to type in:</span>
