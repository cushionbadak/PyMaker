<div class="post-text" itemprop="text">
<p>I would like to ask as a python beginner, I would like to obtain strings from inside a square bracket and best if without trying to import any modules from python. If not it's okay.</p>
<p>For example,</p>
<pre><code>def find_tags
    #do some codes


x = find_tags('Hi[Pear]')
print(x)
</code></pre>
<p>it will return </p>
<pre><code>1-Pear
</code></pre>
<p>if there are more than one brackets for example,</p>
<pre><code>x = find_tags('[apple]and[orange]and[apple]again!')
print(x)
</code></pre>
<p>it will return</p>
<pre><code>1-apple,2-orange,3-apple
</code></pre>
<p>I would greatly appreciate if someone could help me out thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here, I tried solving it. Here is my code : </p>
<pre><code>bracket_string = '[apple]and[orange]and[apple]again!'

def find_tags(string1):
  start = False
  data = ''
  data_list = []
  for i in string1:
    if i == '[':
      start = True
    if i != ']' and start == True:
      if i != '[':
        data += i
    else:
      if data != '':
        data_list.append(data)
      data = ''
      start = False
  return(data_list)

x = find_tags(bracket_string)
print(x)
</code></pre>
<p>The function will return a list of items that were between brackets of a given string parameter.</p>
<p>Any advice will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your pattern is consistent like <code>[sometext]sometext[sometext]...</code> you can implement your function like this:</p>
<pre><code>import re

def find_tags(expression):
   r = re.findall('(\[[a-zA-Z]+\])', expression)
   return ",".join([str(index + 1) + "-" + item.replace("[", "").replace("]", "") for index, item in enumerate(r)])
</code></pre>
<p>Btw you can use stack data structure (FIFO) to solve this problem. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this using a simple for loop over all characters of your text. </p>
<p>You have to remember if you are <em>inside</em> a tag or <em>outside</em> a tag - if inside you add the letter to a temporary list, if you encounter the end of a tag, you add the whole templorary list as word to a return list.</p>
<p>You can solve the numbering using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate(iterable, start=1)</code></a> of the list of words:</p>
<pre><code>def find_tags(text):
    inside_tag = False
    tags = []   # list of all tag-words
    t = []      # list to collect all letters of a single tag
    for c in text:
        if not inside_tag:
            inside_tag = c == "["    # we are inside as soon as we encounter [
        elif c != "]":            
            t.append(c)              # happens only if inside a tag and not tag ending
        else:
            tags.append(''.join(t))  # construct tag from t and set inside back to false
            inside_tag = False
            t = []                   # clear temporary list

    if t: 
        tags.append(''.join(t))      # in case we have leftover tag characters ( "[tag" )

    return list(enumerate(tags,start=1))  # create enumerated list 


x = find_tags('[apple]and[orange]and[apple]again!')

# x is a list of tuples (number, tag):
for nr, tag in x:
    print("{}-{}".format(nr, tag), end = ", ")
</code></pre>
<p>Then you specify ',' as delimiter after each print-command to get your output.</p>
<p><code>x</code> looks like: <code>[(1, 'apple'), (2, 'orange'), (3, 'apple')]</code></p>
</div>
<span class="comment-copy">Can you use Regex?</span>
<span class="comment-copy">What would <code>[[foo]]</code> expect to return? what have you tried?</span>
<span class="comment-copy">Assume that they only takes in one [] and not multiple [[]].</span>
<span class="comment-copy">I try to avoid regex.</span>
<span class="comment-copy">I know, I'm not trying to be mean. But there are many questions on SO that can help you put together the building blocks for this question and I don't see that effort.</span>
<span class="comment-copy">Thanks for your input, can i ask one more thing from you? can you explain why do you begin with start = False? and does your for loop "for i in string1 (i think its string1 not par1), is it better if it's "for ch in string 1"?</span>
<span class="comment-copy">Changed that. Should have been string1 instead of par1. Yeah, you could change i <code>for i in string1</code> to anything you want. It's preference. As for the <code>start = False</code> at the beginning, I created a variable with the boolean value <code>False</code>, because I have a habit of pre-creating the variables I will use. Just a habit to save possible errors. For example, if we had <code>bracket_string = 'zzz[apple]and[orange]and[apple]again!'</code> Notice I added three <code>zzz</code> at the beginning of the string, Python will bring this error : <code>UnboundLocalError: local variable 'start' referenced before assignment</code></span>
<span class="comment-copy">We wouldn't want to depend on a <code>if</code> operation to initiate our variables. It's better pre-initiating them.</span>
<span class="comment-copy">Recommended reading: <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python.org/dev/peps/pep-0008</a></span>
<span class="comment-copy">To be specific, I was most uncomfortable with the mixed case variable names and the amount of inline comments. Also the whitespace in some of the statements seems inconsistent. But probably that's a matter of personal preference overall.</span>
<span class="comment-copy">@moooeeeep I can accomodate the mixed cased variable names, the inline comments are for educational purposes only. thanks for suggesting it. I found some other things in pep8</span>
