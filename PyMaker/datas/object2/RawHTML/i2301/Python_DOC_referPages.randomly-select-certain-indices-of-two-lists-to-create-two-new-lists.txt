<div class="post-text" itemprop="text">
<p>Say I have two lists:</p>
<pre><code>A = ['cat', 'dog', 'cow', 'pig', 'monkey']
B = ['Felix', 'Fido', 'Moo', 'Trump', 'King Kong']
</code></pre>
<p>Now I want to create <code>lists A</code> and <code>list B</code> by selecting 3 random indices (without replacement), while maintaining the relation between the values of <code>A</code> and <code>B</code>.</p>
<p>For example,</p>
<p>Randomly selected indices: <code>4, 0, 3</code></p>
<p>Therefore,</p>
<pre><code>A = ['monkey', 'cat', 'pig']
B = ['King Kong', 'Felix', 'Trump']
</code></pre>
<p>Is there a method to do this without writing a for-loop which iterates 3 times to select the random indices?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> the lists, then pick 3 random pairs with <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code></a>, and finally split the pairs into separate lists again:</p>
<pre><code>import random

pairs = list(zip(A, B))  # make pairs out of the two lists
pairs = random.sample(pairs, 3)  # pick 3 random pairs
A1, B1 = zip(*pairs)  # separate the pairs
</code></pre>
<p>This is what happens step by step:</p>
<pre><code>&gt;&gt;&gt; list(zip(A, B))
[('cat', 'Felix'), ('dog', 'Fido'), ('cow', 'Moo'), ('pig', 'Trump'), ('monkey', 'King Kong')]
&gt;&gt;&gt; random.sample(_, 3)
[('monkey', 'King Kong'), ('pig', 'Trump'), ('dog', 'Fido')]
&gt;&gt;&gt; list(zip(*_))
[('monkey', 'pig', 'dog'), ('King Kong', 'Trump', 'Fido')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a sample function that does selection without replacment. You can sample from the indices and apply the sample to your inputs.</p>
<pre><code>from random import sample

A = ['cat', 'dog', 'cow', 'pig', 'monkey']
B = ['Felix', 'Fido', 'Moo', 'Trump', 'King Kong']
k = 3

samp = sample(range(len(A)), k)
A_p = [A[i] for i in samp]
B_p = [B[i] for i in samp]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>import numpy as np

indx = np.random.choice(len(A),3,False)

np.array(A)[indx]
Out[593]: array(['cow', 'pig', 'monkey'], dtype='&lt;U6')

np.array(B)[indx]
Out[594]: array(['Moo', 'Trump', 'King Kong'], dtype='&lt;U9')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I like the zip answer best but I would take this approach using <em>list comprehension</em></p>
<pre><code>import random   

l1 = ['cat', 'dog', 'cow', 'pig', 'monkey']
l2 = ['Felix', 'Fido', 'Moo', 'Trump', 'King Kong']
r = [random.randint(0, len(l1)-1) for i in range(3)]

A = [l1[i] for i in r]
B = [l2[i] for i in r]
</code></pre>
<blockquote>
<pre><code>~/python/stackoverflow/9.23$ python3.7 loop.py 
['monkey', 'cow', 'cat']
['King Kong', 'Moo', 'Felix']
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You cannot avoid looping though you can delegate it to a function or dress it up as a list comprehension.
You can loop over each list once, though.</p>
<pre><code>#lets assume your randomly selected numbers are 4, 0 and 3
indices = (4,0,3)
# lets assign an ordinal to each index
indices_ordinals = [(ind, ord) for ind, ord in enumerate(indices)]
# now we can re sort the indices, since we have recorded their original sequence
indices_ordinals.sort(key = lambda x: x[0])
# now go through the lists (for simplicity we assume they have equal number of elemwnts) and fill the output dicts
csi = 0 # csi is the index that we are looking for currently
A1 = {}
B1 = {}
for i, elem in enumerate(A):
    if i == indices_ordinals[csi][0]:
        A1[indices_ordinals[1]] : elem
        csi += 1
csi =0
for i, elem in enumerate(B):
    if i == indices_ordinals[csi][0]:
        B1[indices_ordinals[1]] : elem
        csi += 1
#now we only need to sort A1 and B1 to get desired output
A2=[A1[i] for i in sorted(A1)]
B2=[B1[i] for i in sorted(B1)]
</code></pre>
</div>
<span class="comment-copy">Yes there is a way to do this but as a new comer to SO you should check the policy for asking questions as it will help you get answers. It would be a lot easier if you ask with some code that you've already tried as this will allow mw to give you a specific answer. Could you include some code?</span>
<span class="comment-copy">Have you looked at python's random library?</span>
<span class="comment-copy">Thank you! This is exactly what I'm looking for</span>
