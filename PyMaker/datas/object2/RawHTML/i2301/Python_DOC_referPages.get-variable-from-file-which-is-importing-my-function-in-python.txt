<div class="post-text" itemprop="text">
<p>I have 2 files:</p>
<p><strong><code>Main.py</code></strong></p>
<pre><code>from test import test
def main():
    sol = 'hello'
    if test() == sol:
        print('Yes')
    else:
        print('No')
</code></pre>
<p><strong><code>test.py</code></strong></p>
<pre><code>def test():
    return 'hello'
</code></pre>
<p>Is there a way to access the <strong>sol</strong> variable in my test function which is in another file? I'd like to do something like this:</p>
<pre><code>def test():
    return sol
</code></pre>
<p>This way it's always the same as the variable in Main.py. I tried a solution which is mentioned on <a href="https://stackoverflow.com/questions/38632067/python-extract-variables-from-an-imported-file">Python extract variables from an imported file</a> but it didn't work for me. Thank you for any help</p>
<p>Edit: I'd like to do it without changing the Main.py file</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>sol</code> isn't defined in the function you will need to declare it as a global function so it can be used in the function. Change <code>test.py</code>to the following...</p>
<pre><code>test():
    global sol
    return sol
</code></pre>
<p>Hope that helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>If sol is a constant (i.e. a variable which will not change during the course of the program), then you can put it into a separate file, say var.py, and import it into both main.py and test.py:</p>
<pre><code>from var import sol
</code></pre>
<p>BUT what you will be importing is a copy of the variable with the value it had at the time it was imported - any subsequent reassignments will not update the value of sol in test.py and main.py. Because a string is immutable, when you reassign a value to it what you are actually doing is you are reusing the variable name for a new entity.</p>
<p>What you need to do is have your variable in a mutable structure, such as a list or a class, so your var.py will look like this:</p>
<pre><code>class v(object):
    sol = 'Hello'
</code></pre>
<p>and then in main.py and test.py you can refer to sol using:</p>
<pre><code>from var import v
print(v.sol)
</code></pre>
<p>This way, any changes to v.sol will be correctly reflected anywhere class v is imported. A bit cumbersome, but that's how it is in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>inspect</code> module to get the <code>sol</code> variable from <code>main</code> function without change anything of <code>main.py</code>. Of course, you need to call <code>main</code> function.</p>
<p><strong>Main.py:</strong></p>
<pre><code>from test import test
def main():
    sol = 'hello'
    if test() == sol:
        print('Yes')
    else:
        print('No')

main()
</code></pre>
<p><strong>test.py:</strong></p>
<pre><code>import inspect

def test():
    frame = inspect.currentframe()
    sol_from_main = 'default'
    try:
        sol_from_main = frame.f_back.f_locals['sol'] # line A
    except:
        print('No sol found')
    print(sol_from_main)  # this print 'hello'
    return sol_from_main
</code></pre>
<p><strong>Output:</strong></p>
<blockquote>
<p>hello</p>
<p>Yes</p>
</blockquote>
<p><strong>Explanation:</strong></p>
<p>From the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">python doc</a>, we can see next:</p>
<blockquote>
<p>frame</p>
<p>f_back   | next outer frame object (this frame’s caller)</p>
<p>f_locals | local namespace seen by this frame</p>
</blockquote>
<p>So <code>line A</code> get the caller of current function, that is <code>main function</code>, and use <code>f_locals</code> to get all local variables of <code>main function</code>, so it can get the <code>sol</code> value from <code>main</code>. FYI in case you still need it.</p>
</div>
<span class="comment-copy">Then, your output will always be <code>Yes</code>, what's the meaning of your code?</span>
<span class="comment-copy">@lagom It's just a simple code to show my issue and what i'd like to do. I am curious if something like this is possible</span>
<span class="comment-copy">Pass the variable to the function as a parameter? <code>def test(sol): return sol</code></span>
<span class="comment-copy">@TyloBedo would it be possible without changing the Main.py ?</span>
<span class="comment-copy">You would need to pass the variable to test in Main.py <code>if test(sol) == sol:</code>. What are you actually trying to accomplish? I think you’re probably going about it in the wrong way.</span>
<span class="comment-copy">I am very sorry, i forgot to mention the sol variable is in a function too. Would it be possible to access it like this?</span>
<span class="comment-copy">So there isn't really a way to do it without touching the main.py and creating a new file?</span>
<span class="comment-copy">The cleanest way would be to put the shared variable in a separate file, which can be imported by all files which need access to the variable (via a mutable structure such as a class, list etc.) If you do not want to do that, you can put the class <b>v</b> in <b>test.py</b>, and then import it in <b>main.py</b> together with your <b>test</b> function.</span>
