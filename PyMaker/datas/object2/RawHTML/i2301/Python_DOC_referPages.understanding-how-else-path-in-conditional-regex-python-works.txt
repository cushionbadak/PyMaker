<div class="post-text" itemprop="text">
<p>I tried to understand the simple regex: <code>([+]{1})(?(1)\d{3}|\d{2})</code>. </p>
<p>My (very probably wrong) understanding of the regex above is: If there is a single "+" then it should be followed directly by three digits, else (if there is no plus) it should look for two digits.</p>
<p>My two test sentences are:</p>
<pre><code>1: "This is a +333 test." 
2: "This is a 22 test."
</code></pre>
<p>See: <a href="https://regex101.com/r/oJepMi/1/" rel="nofollow noreferrer">https://regex101.com/r/oJepMi/1/</a></p>
<p>The regex finds in 1: "+333", but does not find "22" in sentence 2:.</p>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a> mentions:</p>
<blockquote>
<p>(?(id/name)yes-pattern|no-pattern):
  "Will try to match with yes-pattern if the group with given id or name exists, and with no-pattern if it doesnâ€™t."</p>
</blockquote>
<p>It seems a quiet easy tasks, but I struggle to understand.</p>
<p>Can someone please explain how the else path concept works for python?</p>
<p>Best regards and many thanks
Giovanni</p>
</div>
<div class="post-text" itemprop="text">
<p>Using this kind of conditional does only make sense, if the group is optional or part of an alternation, thus it's actually possible to not match it.</p>
<p>Change your regex to <code>([+]{1})?(?(1)\d{3}|\d{2})</code> to get this to work.</p>
<p>Note that this will still match <code>22</code> out of <code>+22</code>. You'd have to add a negative lookahead to check for <code>+</code> it this is not intended,  e.g. <code>([+]{1})?(?(1)\d{3}|(?&lt;!)\d{2})</code> or simplier <code>\+\d{3}|(?&lt;!\+)\d{2}</code></p>
</div>
<span class="comment-copy">There is an if clause in your regex which is letting to match only 3 digits</span>
<span class="comment-copy">How does <code>'((?P&lt;plus&gt;[+])(?P=plus)?\d{3}|\d{2})'</code> work then? Do these work differently?</span>
<span class="comment-copy">@RaunaqJain yes, this is a simple alternation with <code>\d{2}</code> being the second alternative.</span>
<span class="comment-copy">Hi, thank you for your answer. My question was <code>Can someone please explain how the else path concept works for python?</code> I would like to understand it, not finding a workaround. Could you give me an easy understandable example sentence for the proposed regex? Thx</span>
<span class="comment-copy">@giovanni In the regex you have given, the else path will never be accessed. If the capturing group is matched, it will jump into the then-path. If the capturing group isn't matched, the matching process will just stop at that point, not considering the remainder of the pattern.</span>
<span class="comment-copy">@giovanni Actually, Sebastian has already provided you an example of how to use the conditional.  If that is not enough, see <a href="https://stackoverflow.com/a/52495875/3832970">this answer of mine</a>. What is not clear? Please be very specific.</span>
