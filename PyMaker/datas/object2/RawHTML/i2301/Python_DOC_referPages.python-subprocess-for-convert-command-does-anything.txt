<div class="post-text" itemprop="text">
<p>I have a function to convert a pdf file to a thumbnail after upload.</p>
<pre><code>def book_post_save(sender, instance=False, **kwargs):

     pdf = Post.objects.get(pk=instance.pk)
     command = "convert -quality 95 -thumbnail 100 %s%s[0] %s%s" % (
             settings.MEDIA_ROOT,
             pdf.file,
             settings.MEDIA_ROOT,
             pdf.file
         )
     proc = subprocess.Popen(
             command,
             shell=True,
             stdin=subprocess.PIPE,
             stdout=subprocess.PIPE,
             stderr=subprocess.PIPE,
         )
     stdout_value = proc.communicate()[0]

post_save.connect(book_post_save, sender=Post)
</code></pre>
<p>But the subprocess command doesn't return anything. I tried to type it in a terminal but I got a <strong>subprocess-error-returned-non-zero-exit-status-1</strong>.
I got no thumbnail generated. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think the reason you're struggling here is that you're throwing away your error message.</p>
<p>The <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">communicate</a> method returns a tuple with two elements, <code>stdin</code> and <code>stdout</code>. The code above (namely <code>proc.communicate()[0]</code>) is taking the first element (stdin) but ignoring stderr.</p>
<p>So I would suggest modifying your code to do the following;</p>
<pre><code>stdout_value, stderr_value = proc.communicate()
</code></pre>
<p>Once you've done this, if the process fails, you can print <code>stderr_value</code> and work out why the process failed.</p>
</div>
<span class="comment-copy">Have you looked at stderr? It is very likely that a useful error message is contained within.</span>
<span class="comment-copy">No @Shadow , how can I look for it?</span>
<span class="comment-copy"><code>proc.communicate()</code> returns a tuple - <code>(stdout, stderr)</code>. Your code, by having <code>[0]</code> after <code>communicate()</code>, is throwing away stderr. I would suggest doing something like <code>stdout_value, stderr_value = proc.communicate()</code> instead which will allow you to look at the contents of stderr.</span>
<span class="comment-copy">@Shadow Yeah adding stderr_value, I finally see error and correct it. Thanks</span>
<span class="comment-copy">Yeah it's already done. I replied in your comment. Thanks again.</span>
<span class="comment-copy">Yeah, that's why I added my comment as an answer. Thanks for accepting it :)</span>
