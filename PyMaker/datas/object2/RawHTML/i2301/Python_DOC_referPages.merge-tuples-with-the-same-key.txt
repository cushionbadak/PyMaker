<div class="post-text" itemprop="text">
<p>How to merge a tuple with the same key</p>
<pre><code>list_1 = [("AAA", [123]), ("AAA", [456]), ("AAW", [147]), ("AAW", [124])]
</code></pre>
<p>and turn them into</p>
<pre><code>list_2 = [("AAA", [123, 456]), ("AAW", [147, 124])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most performant approach is to use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer"><code>collections.defaultdict</code></a> dictionary to store data as an expanding list, then convert back to tuple/list if needed:</p>
<pre><code>import collections

list_1 = [("AAA", [123]), ("AAA", [456]), ("AAW", [147]), ("AAW", [124])]

c = collections.defaultdict(list)
for a,b in list_1:
    c[a].extend(b)  # add to existing list or create a new one

list_2 = list(c.items())
</code></pre>
<p>result:</p>
<pre><code>[('AAW', [147, 124]), ('AAA', [123, 456])]
</code></pre>
<p>note that the converted data is probably better left as dictionary. Converting to list again loses the "key" feature of the dictionary.</p>
<p>On the other hand, if you want to retain the order of the "keys" of the original list of tuples, unless you're using python 3.6/3.7, you'd have to create a list with the original "keys" (ordered, unique), then rebuild the list from the dictionary. Or use an <code>OrderedDict</code> but then you cannot use <code>defaultdict</code> (or use a <a href="https://stackoverflow.com/questions/6190331/can-i-do-an-ordered-default-dict-in-python">recipe</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dict to keep track of the indices of each key to keep the time complexity O(n):</p>
<pre><code>list_1 = [("AAA", [123]), ("AAA", [456]), ("AAW", [147]), ("AAW", [124])]
list_2 = []
i = {}
for k, s in list_1:
    if k not in i:
        list_2.append((k, s))
        i[k] = len(i)
    else:
        list_2[i[k]][1].extend(s)
</code></pre>
<p><code>list_2</code> would become:</p>
<pre><code>[('AAA', [123, 456]), ('AAW', [147, 124])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a dictionary and loop through the list. If the item present in dictionary append the value to already existing list else assign the value to key.</p>
<pre><code>dict_1 = {}
for item in list_1:
    if item[0] in dict_1:
        dict_1[item[0]].append(item[1][0])
    else:
        dict_1[item[0]] = item[1]
list_2 = list(dict_1.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similarly to other answers, you can use a dictionary to associate each key with a list of values. This is implemented in the function <code>merge_by_keys</code> in the code snippet below.</p>
<pre><code>import pprint

list_1 = [("AAA", [123]), ("AAA", [456]), ("AAW", [147]), ("AAW", [124])]

def merge_by_key(ts):

    d = {}
    for t in ts:
        key = t[0]
        values = t[1]
        if key not in d:
            d[key] = values[:]
        else:
            d[key].extend(values)

    return d.items()



result = merge_by_key(list_1)

pprint.pprint(result)
</code></pre>
</div>
<span class="comment-copy">Related: <a href="//stackoverflow.com/q/18446476">Python: merge lists of tuples based on its values</a></span>
<span class="comment-copy">all those years and not a single exact dupe... I had a good look. Maybe it's somewhere, well...</span>
<span class="comment-copy">Note that this answer would not necessarily retain the order of the original list, if that is a consideration.</span>
<span class="comment-copy">true, unless you're using python 3.7. To retain the original order you'd have to create a list with the original "keys" (ordered, unique), then rebuild the list from the dictionary.</span>
<span class="comment-copy">It does the merge but doesn't retain the original order in the list.  The result I got is: <code>[('AAW', [147, 124]), ('AAA', [123, 456])]</code> - AAA should have been the first element as in the original list.</span>
<span class="comment-copy">If the order is important then we can use OrderedDict from the collections from collections import OrderedDict dict_1 = OrderedDict()</span>
<span class="comment-copy">Why are you manually creating list_2?</span>
<span class="comment-copy">@codeforester Just a slip up. I had list_2 in my code in order to print it after the computed result, to check that my solution is correct. Removed it right now actually.</span>
