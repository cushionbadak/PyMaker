<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1720421/how-do-i-concatenate-two-lists-in-python">How do I concatenate two lists in Python?</a>
<span class="question-originals-answer-count">
                    30 answers
                </span>
</li>
</ul>
</div>
<p>I have a maybe stupid problem, but can't figure out how to solve it.
So basically what I'm trying to do is to:</p>
<ul>
<li>Create a list</li>
<li>Add items to the list (stored in a second list)</li>
<li>Transform the list into a tuple</li>
</ul>
<p>So I thought I would do something like this:</p>
<pre><code>anotherList = [2,5,8]
myTuple = tuple([1,2,3].extend(anotherList))
</code></pre>
<p>This does not work as it throws the error:</p>
<pre><code>TypeError: 'NoneType' object is not iterable
</code></pre>
<p>This makes sense, as the result of the <code>extend</code> operation is not a list. The problem is that I wasn't able to make it in a one line code, but only in a 4 lines code, like that:</p>
<pre><code>anotherList = [2, 5, 8]
myList = [1, 2, 3]
myList.extend(anotherList)
myTuple = tuple(myList)
</code></pre>
<p>Is there a way to simplify this code? It looks unnecessarily long!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't want to use <code>list.extend()</code>, period. You are concatenating a list display (literal syntax) with another list instead, use <code>+</code>:</p>
<pre><code>myTuple = tuple([1, 2, 3] + anotherList)
</code></pre>
<p>or you could convert just <code>anotherList</code> and prefix a tuple:</p>
<pre><code>myTuple = (1, 2, 3) + tuple(anotherList)
</code></pre>
<p>Here the Python compiler can optimise and store the <code>(1, 2, 3)</code> as a constant with your code object. That initial tuple is created just once and reused across all executions.</p>
<p><code>list.extend()</code> is intended to update an existing list object in-place via a reference to that list, but using it on a list literal means the resulting extended list has no remaining references and is discarded again.</p>
<p>In Python 3.5 and up you could also use the <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow noreferrer">new iterable unpacking syntax</a>:</p>
<pre><code>myTuple = (1, 2, 3, *anotherlist)
</code></pre>
<p>Note that no <code>tuple()</code> call is needed there, and <em>any</em> iterable type (not just a list) is supported. Python 2.7 is on it's last days, you do need to start planning to move away from it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can add lists:</p>
<pre><code>result = tuple([1,2,3] + [4,5,6])
</code></pre>
<p>So that'll be something like this:</p>
<pre><code>anotherList = [2, 5, 8]
myList = [1, 2, 3]

myTuple = tuple(myList + anotherList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, it's unclear tho, but...</p>
<p>Try this:</p>
<pre><code>l=[2,5,8]
print(tuple([1,2,3]+l))
</code></pre>
<p>You can concatenate by <code>+</code></p>
<p>Alternatively can do <code>*</code> (unpacking) in python 3:</p>
<pre><code>print((*l, 1,2,3))
</code></pre>
<p>Or can do <code>chain</code> from <code>itertools</code>:</p>
<pre><code>import itertools
print(tuple(itertools.chain(l, [1,2,3])))
</code></pre>
<p>Or <code>merge</code> from <code>heapq</code>:</p>
<pre><code>from heapq import merge
print(tuple(merge(l,[1,2,3])))
</code></pre>
<p>Or <code>add</code> form <code>operator</code>:</p>
<pre><code>import operator
print(tuple(operator.add(l, [1,2,3])))
</code></pre>
</div>
<span class="comment-copy"><code>list.extend()</code> returns <code>None</code>, always because the list is updated <i>in place</i>. Do not use it on a list literal, that's never going to result in something you want. Did you want to concatenate perhaps? Then use <code>[...] + anotherlist</code>.</span>
<span class="comment-copy">@MartijnPieters, yes exactly! I completely missed the <code>concatenate</code>, that's it!</span>
<span class="comment-copy">@U9-Forward if concatenation would have come to my mind before I certainly would have not asked for this, my problem is that I couldn't figure out what to use in this case...</span>
<span class="comment-copy">@toti08 Well, it's marked as duplicate, so what?</span>
