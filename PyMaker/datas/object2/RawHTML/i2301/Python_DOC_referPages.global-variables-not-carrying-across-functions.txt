<div class="post-text" itemprop="text">
<p>(For those who saw this question the last time I asked it, I sincerely apologize, I used the term "module" when I meant "function", but thank you for your very helpful advice nontheless! I'll make sure to keep it in mind when I begin to add other files into the equation.)</p>
<p>I'm trying to make a text based adventure game using python, and as a result it requires a lot of variables, and as backtracking is a <em>must</em>, I need to use global variables for the essential ones. I have run into speed bumps when trying to get these to be read by other functions. This is the line of code used to define the universal variables, and their starting value</p>
<pre><code>def reset():
    global gold, exp, etnl, maxHP, curHP, maxmana, curmana, attack, defence, helm, armtop, armbot, boots, gloves, weapons
    gold = 0
    exp = 0
    etnl = 100 #exp to next level
    maxHP = 50
    curHP = 50
    maxmana = 10
    curmana = 10
    attack = 5
    defence = 5
    helm = "none"
    armtop = "none"
    armbot = "none"
    boots = "none" 
    gloves = "none"
    weapon = "fists"
</code></pre>
<p>And for example, when I try to display one of the global variables, it shows up as the variable being undefined, as shown here:</p>
<pre><code>def gamestart():
    clear() #this command is fine, simply to make it look neater when it is run again
    print("you wake up in a clearing in the forest, you can't remember what happened.")
    print("you feel numb, you realize you're lying flat on your back.")
    print
    print("HP " + str(curHP) + "/" + str(maxHP))
</code></pre>
<p>Can someone help me out with this?
Is there an easier way to do this?
All help is appreciated!
(yes, I make sure to run the reset function before the newgame function)</p>
<p>A much simpler version if this, at least according to me is:</p>
<pre><code>def variable():
    global foo
    foo = 7

def trigger():
    variable():
    output():

def output():
    print(foo)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could store those things into a class used as storage-container. If you declare them classvariables and any accessors as <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer">@classmethods</a> you do not need an instance. </p>
<pre><code>class GameState:
    gold = 0
    exp = 0
    etnl = 100 #exp to next level
    maxHP = 50
    curHP = 50
    maxmana = 10
    curmana = 10
    helm = "none"
    armtop = "none"
    armbot = "none"
    boots = "none"
    gloves = "none"
    weapon = "fists"

    weapons = {"fists":(5,5),"sword":(15,12),"mace":(30,3),"cushion":(2,20)}

    @classmethod
    def reset(cls):
        cls.gold = 0
        cls.exp = 0
        cls.etnl = 100 #exp to next level
        cls.maxHP = 50
        cls.curHP = 50
        cls.maxmana = 10
        cls.curmana = 10
        cls.helm = "none"
        cls.armtop = "none"
        cls.armbot = "none"
        cls.boots = "none"
        cls.gloves = "none"
        cls.weapon = "fists"

    @classmethod
    def attack(cls):
        return cls.weapons.get(cls.weapon,(0,0))[0]

    @classmethod
    def defense(cls):         
        return cls.weapons.get(cls.weapon,(0,0))[1]


for w in State.weapons:
    State.weapon = w
    print("{} has attack {} and defense {}.".format(w, State.attack(),State.defense()))
</code></pre>
<p>Output:</p>
<pre><code>fists has attack 5 and defense 5.
sword has attack 15 and defense 12.
mace has attack 30 and defense 3.
cushion has attack 2 and defense 20.
</code></pre>
<hr/>
<p>You might want to seperate some things out - f.e. an extra class for the weapon/damage/defense related stuff ...</p>
<p>More reading: </p>
<ul>
<li><a href="https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod">What is the difference between @staticmethod and @classmethod?</a></li>
<li><a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Instead of global variables have you considered storing all the stats in a class/struct? Create an instance of the class at the start of the game, with its default values being specified in the constructor.</p>
<p>G = StartClass()</p>
<pre><code>def gamestart():       
    print("you wake up in a clearing in the forest, you can't remember what happened.")
    print("you feel numb, you realize you're lying flat on your back.")
    print("HP " + str(G.curHP) + "/" + str(G.maxHP))
</code></pre>
<p>Alternatively, declaring G globally and passing it into gamestart(G) and/or re-instantiating in the reset() function might be options.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple example of what I think you are trying to accomplish. If you are using global variables, then you need to be sure you are not inadvertently creating local variables with the same names in your functions (when you mean to be modifying the global variable).</p>
<p>You should look at using <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">classes</a> which I think would help you with some of the semantic confusion here.</p>
<pre><code>value = 10

def reset():
    global value
    value = 10

def start():
    print(f'initial value: {value}')
    global value
    value += 1
    print(f'updated value: {value}')
    reset()
    print(f'reset value: {value}')

start()

# OUTPUT
# initial value: 10
# updated value: 11
# reset value: 10
</code></pre>
</div>
<span class="comment-copy">Can you create a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>? i.e. a block of code that we can copy and paste to reproduce the error</span>
<span class="comment-copy">First, you don't need separate <code>global</code> statements in <code>reset</code>; you can write <code>global gold, exp, etnal, ...</code></span>
<span class="comment-copy">Have you called <code>reset</code> (or otherwise set the values of <code>curHP</code> and <code>maxHP</code>) before you call <code>gamestart</code>?  Do you have more than one module involved? (Global variables aren't truly global; they are local to a module.) This is why we need a minimal, complete, and verifiable example to reproduce your error.</span>
<span class="comment-copy">no, all the coding is in one file, and the reset function is triggered before the gamestart one</span>
<span class="comment-copy">there, I hope this helps you guys</span>
