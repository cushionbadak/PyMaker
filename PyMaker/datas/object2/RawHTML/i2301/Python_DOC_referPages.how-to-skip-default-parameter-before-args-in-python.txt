<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9872824/calling-a-python-function-with-args-kwargs-and-optional-default-arguments">Calling a Python function with *args,**kwargs and optional / default arguments</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to wrap my head around using <code>args</code> and <code>kwargs</code> in Python 3 (Python 3.7.0) but I'm running into some issues with my understanding.</p>
<p>Here is a simple function I have:</p>
<pre><code>def add_args(y=10, *args, **kwargs):
    return y, args, kwargs
</code></pre>
<p>And test it to see what is returned:</p>
<pre><code>    print(add_args(1, 5, 10, 20, 50))
    print(add_args())
    &gt;&gt;
    (1, (5, 10, 20, 50), {}) # What happened to my default y=10?
    (10, (), {})
</code></pre>
<p>What I don't understand is, what happened to <code>y=10</code> in the first print statement? I can see it is being overridden by the <code>1</code> in <code>args</code> but I'm unsure why.</p>
<p>How can I rewrite this function so the default value is not overridden, or am I missing something with how the parameters are passed from the function signature to the return statement? </p>
<p>I tried looking <a href="https://stackoverflow.com/questions/9872824/calling-a-python-function-with-args-kwargs-and-optional-default-arguments">here</a> and <a href="https://stackoverflow.com/questions/15301999/default-arguments-with-args-and-kwargs">here</a> but did not find the answers I was looking for. As I thought putting the default values before the <code>args</code> and <code>kwargs</code> would prevent the overwriting. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>*args</code> only captures any positional arguments not otherwise defined; <code>y=10</code> does not mean <code>y</code> can't be used as a positional argument. So <code>y</code> is assigned the first positional argument.</p>
<p>You can prevent <code>y</code> being used as a positional argument by making it a <a href="https://docs.python.org/3/glossary.html#keyword-only-parameter" rel="nofollow noreferrer"><em>keyword-only</em> argument</a>. You do this by placing the argument <strong>after</strong> the <code>*args</code> var-positional catch-all parameter, or if you don't have a <code>*name</code> parameter, after a <code>*</code> single asterisk:</p>
<pre><code>def add_args(*args, y=10, **kwargs):
    return y, args, kwargs
</code></pre>
<p>or</p>
<pre><code>def keyword_only_args(*, y=10, **kwargs):
    return y, kwargs
</code></pre>
<p>Now <code>y</code> won't capture positional arguments any more:</p>
<pre><code>&gt;&gt;&gt; def add_args(*args, y=10, **kwargs):
...     return y, args, kwargs
...
&gt;&gt;&gt; add_args(1, 5, 10, 20, 50)
(10, (1, 5, 10, 20, 50), {})          # y is still 10
&gt;&gt;&gt; add_args(1, 5, 10, 20, 50, y=42)  # setting y explicitly 
(42, (1, 5, 10, 20, 50), {})
</code></pre>
<p>You don't have to have a <code>**kwargs</code> keyword catch-all either:</p>
<pre><code>def add_args(*args, y=10):
    return y, args
</code></pre>
<p>but if it is present, it needs to be listed last.</p>
<p>Keyword-only arguments do not have to have a default value, the <code>=10</code> can be omitted, but then the parameter becomes mandatory, and can only be specified in a call by using <code>y=value</code>:</p>
<pre><code>&gt;&gt;&gt; def add_args(*args, y):  # mandatory keyword-only argument
...     return y, args
...
&gt;&gt;&gt; add_args(1, 5, 10, 20, 50)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: add_args() missing 1 required keyword-only argument: 'y'
&gt;&gt;&gt; add_args(1, 5, 10, 20, 50, y=42)
(42, (1, 5, 10, 20, 50))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hmm, <code>y</code> is the first positional argument in your function definition, so naturally it binds to the first actual positional argument at callsite, which is 1.</p>
</div>
<span class="comment-copy">If you don't want it to be overridable by the caller, why is it a parameter at all? Why not just do <code>y=10</code> as the first line fo the body?</span>
<span class="comment-copy">See my answer below, the accepted answer on the first link you checked does document this correctly: place <code>y=10</code> <b>after</b> the <code>*args</code> catch-all var-positional parameter.</span>
<span class="comment-copy">Ah thanks. I see where I went wrong. Great answer and I appreciate the response.</span>
