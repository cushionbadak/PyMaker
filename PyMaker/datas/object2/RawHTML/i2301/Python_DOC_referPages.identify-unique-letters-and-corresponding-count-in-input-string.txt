<div class="post-text" itemprop="text">
<pre><code>input_string=mississippi

output_dict={letters=[i,s,p,m],count=[4,4,2,1]}
</code></pre>
<p>Remove duplicate entries from <code>input_string</code> and count those duplicate values and display in descending order.
actual following code remove duplicate entry but how to count the duplicate values</p>
<pre><code>def mock(input_string):
    a=list(input_string)
    list1=[]
    for i in a:
        if i not in list1:
            list1.append(i)


    print(list1)           


mock("radffffghhh")  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d={}
for i in input_string:
    d[i]=d.get(i,0)+1
</code></pre>
<p>sort dict by values in reverse</p>
<pre><code>sorted(d.items(), key=lambda kv: kv[1],reverse=True)#[('i', 4), ('s', 4), ('p', 2), ('m', 1)]
</code></pre>
<p>Using groupby</p>
<pre><code>from itertools import groupby
{k:len(list(v)) for k,v in groupby(sorted(input_string))}
</code></pre>
<p>Using Counter</p>
<pre><code>from collections import Counter
Counter(input_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Edit to do this without Counter:</p>
<pre><code>def char_counter(string):
    count = {}
    for s in string:
        if s in count:
            count[s] += 1
        else:
            count[s] = 1
    return count         


char_counter(input_string)
</code></pre>
<p>output for "mississippi":</p>
<pre><code>&gt;&gt;&gt; char_counter(input_string)
{'i': 4, 'm': 1, 'p': 2, 's': 4}
</code></pre>
<p>collections has a package for this mentioned above called Counter. So taking your string:</p>
<pre><code>from collections import Counter

input_string='mississippi'

Counter(input_string) # call Counter on your input string

#alternative to just call counter on the string:
Counter('mississippi')
</code></pre>
<p>output for both:</p>
<pre><code>&gt;&gt;&gt; Counter(input_string)
Counter({'i': 4, 'm': 1, 'p': 2, 's': 4})
&gt;&gt;&gt; Counter('mississippi')
Counter({'i': 4, 'm': 1, 'p': 2, 's': 4})
</code></pre>
</div>
<span class="comment-copy">Sounds like you're looking for a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a></span>
<span class="comment-copy">@PatrickHaugh how can i do without counter</span>
<span class="comment-copy">Have a look at the sections about <code>list</code> and <code>str</code> in <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">the documentation</a>, and see what methods are available for these types. There are other ways to solve your problem, but both of these types have a <code>count</code> method. Note also that strings are iterable, just like lists, so you don't have to make a list out of your string, just use it the same way directly.</span>
<span class="comment-copy">has_key is not present in dictionary(it is present in earlier version of python)</span>
<span class="comment-copy">Sorry I fixed it for python3.x</span>
<span class="comment-copy">if i need to sort {'i': 4, 'm': 1, 'p': 2, 's': 4} in descending order then how can i do that. output should be {"i":4,"s":4,"p":2,"m":1}</span>
<span class="comment-copy">You accepted the other guy's answer already.</span>
