<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/28993557/why-doesnt-python-optimize-away-temporary-variables">Why doesn't Python optimize away temporary variables?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Unlike many cases of c++, Python apparently is not as smart to optimize redundant operations, even between constants.</p>
<p>I did a simple benchmark to test math.cos in and out of a loop.</p>
<p>In this first case, I do Python calculate cos (3) <strong>10 million times</strong>:</p>
<pre><code>from datetime import *
from math import *

ini = datetime.now()
for a in range(10000000):
    x = cos(0) 
fim = datetime.now()
print(fim - ini)
</code></pre>
<p>The result is about <code>0:00:01.360958</code>.</p>
<p>Now, just replacing <code>x = cos(0)</code> by <code>x = 1</code> (or just putting <code>cos(0)</code> in a variable outside the loop), the time about <strong>3 times faster</strong>: <code>0:00:00.429995</code></p>
<p>Now, if the <code>cos (0)</code> operation always generates a constant (1), why does Python not optimize execution with a cache, thus avoiding repeating the same <code>cos</code> operation constantly?</p>
<p>One of Python's philosophies is to make easier the programmer's life. But in this case what is happening is just the opposite.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you have to program that yourself. This is what the creator of C++ meant when he said : "Higher level language." in quite literally ALL of his books. (No seriously, it's always there in the beginning.)  I don't think Python is meant to make the programmers life easier per say, but be less "expensive" than higher level languages. </p>
</div>
<span class="comment-copy">Are you referring to <a href="https://en.wikipedia.org/wiki/Loop-invariant_code_motion" rel="nofollow noreferrer">loop hoisting</a>?</span>
<span class="comment-copy">There is no such thing as a 'constant' in Python; everything is dynamic. So <i>no</i> Python <b>can't</b> optimise away repeated loops that do nothing. Because perhaps another thread will come by and assign something else to the <code>cos</code> global, something that has side effects, or returns a random value each time.</span>
<span class="comment-copy">because you can not cache all things? If you need repeated 1s - store them yourself and reuse the stored value</span>
<span class="comment-copy">I would be highly surprised if any C++ implementation used a cache for <code>cos</code> - I'd expect it to be either constant-folded at compilation time, or computed every time at runtime (if the loop doesn't get optimized out entirely). Python is too dynamic for either of those optimizations to be valid at bytecode compilation time.</span>
<span class="comment-copy">Try slapping a <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">cache</a> on it and watch it get <a href="https://ideone.com/rzXlnK" rel="nofollow noreferrer"><i>slower</i></a>. Caching isn't free.</span>
<span class="comment-copy">Not <i>"per say"</i> but <a href="https://en.wiktionary.org/wiki/per_se" rel="nofollow noreferrer"><i>"per se"</i></a>.</span>
<span class="comment-copy">Don't you mean. . . . . parse-A?</span>
