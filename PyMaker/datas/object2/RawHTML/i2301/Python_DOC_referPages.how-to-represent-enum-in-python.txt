<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/36932/how-can-i-represent-an-enum-in-python">How can I represent an 'Enum' in Python?</a>
<span class="question-originals-answer-count">
                    43 answers
                </span>
</li>
</ul>
</div>
<p>I know, I know, there are already similar questions in <a href="https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">here</a> and <a href="https://stackoverflow.com/questions/702834/whats-the-common-practice-for-enums-in-python?noredirect=1&amp;lq=1">there</a>. But their questions and answers are not exactly what I am looking for. Besides, they are locked question so I can not add a new answer to them. SMH.</p>
<p>Firstly, let's clarify the question to understand its scope. When using enum in other static languages like this:</p>
<pre><code>public enum Size
{
    SMALL=0,
    MIDIUM=1,
    LARGE=2,
    BIG=2  // There can possibly be an alias
}
</code></pre>
<p>we want it to help us in:</p>
<ol>
<li>Guard against typo when referencing a value. For example, <code>var foo = Size.SMALL</code> is valid, <code>var bar = Size.SMAL</code> should generate a lousy error.</li>
<li>Enum values can support strings, Such as <code>HTTP404 = "Not Found", HTTP200 = "OK", ...</code>. (Therefore those implementations based on <code>range(N)</code> is unacceptable.)</li>
<li>When defining a parameter as a specific Enum type, it serves as a regulation to accept only that kind of values. For example, <code>public void Foo(Size size) {...}</code></li>
<li><p>I also want the values to be first-class citizen in my Enum solution. Meaning, my functions <code>def parser(value_from_the_wire): ...</code> would like to consume some native values (such as an integer or a string etc.), rather than to consume an Enum member. This is the tricky part in standard Enum in Python 3:</p>
<ul>
<li><code>assert 2 == MY_ENUM.MY_VALUE</code> would only work when MY_ENUM was derived from <code>IntEnum</code> (and there is no default <code>StrEnum</code> although it is not difficult to subclass one by yourself)</li>
<li><code>assert 2 in MY_ENUM</code> wouldn't work, even if MY_ENUM was derived from <code>IntEnum</code>.</li>
</ul></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong>: Use <a href="https://pypi.org/project/venum/" rel="nofollow noreferrer">venum</a></p>
<p>So my Python solution to satisfy the 3 criterias in the question, is based on <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> and the implementation seems more straightforward than the new <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">built-in Enum in Python 3</a>.</p>
<pre><code>from collections import namedtuple

def enum(name=None, **kwargs):
    """
    :param name: An optional type name, which only shows up when debugging by print(...)
    """
    # This actual implementation below is just a one-liner, even within 80-char
    return namedtuple(name or "Const_%d" % id(kwargs), kwargs.keys())(**kwargs)
</code></pre>
<p>Usage is now simple.</p>
<pre><code># definition syntax
SIZE = enum("Size", SMALL=0, MEDIUM=1, LARGE=2, BIG=2)

# usage on referencing
print(SIZE.SMALL)   # got 0, instead of &lt;SIZE.SMALL: 0&gt;
try:
    print(SIZE.SMAL)    # got AttributeError
    assert False, "should not arrive this line"
except AttributeError:
    pass

# usage on comparison and contains-check
assert SIZE.MEDIUM == 1  # works. It won't work when using standard Enum (unless using IntEnum)
assert 1 in SIZE  # works. It won't work when using standard Enum (unless you wrote it as SIZE(1)).

# usage on regulating input value
def t_shirt_size(size):

    if size not in SIZE:
        raise ValueError("Invalid input value")

    print("Placing order with size: %s" % size)

t_shirt_size(SIZE.MEDIUM)   # works
t_shirt_size(2)             # also want this to work
try:
    t_shirt_size(7)             # got AssertionError
    assert False, "This line should not be reached!"
except ValueError:
    pass
</code></pre>
<p>EDIT 1: I was actually aware that there is a <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">standard Enum module in Python 3</a> which is, feature-wise speaking, largely a superset to my one-liner implementation below. However there is one scenario that the standard Enum won't suit my need. I want the values to be a first-class citizen in my enum; I want my <code>t_shirt_size(...)</code> function to accept a real value, not just an enum member. The standard enum approach would NOT allow these 2 usages: <code>assert SIZE.MEDIUM == 1</code> nor <code>assert 1 in SIZE</code>.</p>
<p>EDIT 2: Given that people tend to stereotype this topic as a duplicate, I planned to actually implement my approach as a standalone module with plenty of documentation. I even came up a cool name for it, <code>venum</code>, V stands for Value. It was at that time that I checked the name in pypi and found out there is already a package with that same name, using the same approach as mine, and <a href="https://github.com/ofek/venum#usage" rel="nofollow noreferrer">documented well</a>. So that settles it. I'll simply <a href="https://pypi.org/project/venum/" rel="nofollow noreferrer">pip install venum</a> instead. :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Implementing with Python 3's <code>Enum</code>:</p>
<pre><code>from enum import IntEnum


class SIZE(Enum):

    SMALL = 0
    MEDIUM = 1
    LARGE = 2
    BIG = 2

    @classmethod
    def contains(cls, value):
        return any([e.value == value for e in cls])
</code></pre>
<p>and using:</p>
<pre><code>print(SIZE.SMALL)   # got &lt;SIZE.SMALL: 0&gt;
print(SIZE.SMAL)    # got AttributeError

def t_shirt_size(size):
    assert size in SIZE, "Invalid input value"
    place_order_with_size(size)

t_shirt_size(SIZE.MEDIUM)   # works
t_shirt_size(7)             # got AssertionError
</code></pre>
</div>
<span class="comment-copy">I don't understand how your question is different from the ones you linked. Why don't the answers there answer your question?</span>
<span class="comment-copy">@Aran-Fey None of those questions clarified the requirement, therefore, their answers tended to based on different assumption in the different answerer's mind.</span>
<span class="comment-copy">Huh? What's there to clarify? The question "How do I represent an Enum" is pretty clear, I think. What can your enum do that the other enums in the existing answers can't?</span>
<span class="comment-copy">Well, when I post this Q&amp;A, at least I did my homework. Did you do yours before posting your comments? Most of the naive solution <code>class MY_ENUM: NAME1 = "value1"</code> does not satisfy my requirement #3, i.e. to allow an <code>if input_value in MY_ENUM: ...</code> check. Some others has an assumption "If you need the numeric values, here's the quickest way: <code>dog, cat, rabbit = range(3)</code>", which is not what I want. etc. etc.</span>
<span class="comment-copy">Are you serious? All the problems you've listed have nothing to do with the question. Those problems only exist if you choose a bad way to represent your enum. All of those are problems with the <i>answers</i>, not the <i>question</i>. If you see a bad answer, downvote it. Your question is not any different from the other question.</span>
<span class="comment-copy"><code>enum.Enum</code> doesn't force you to have your function accept enum members. With <code>Size</code> as an <code>enum.Enum</code> enum, you could accept <code>size</code> as an int and call <code>Size(size)</code> to get an enum member.</span>
<span class="comment-copy">@user2357112, thanks, good to know that there is such a syntactic sugar from standard Enum: <code>SIZE(value)</code> as equivalent as <code>if value not in SIZE: raise ValueError("...")</code>. Personally I think the latter is more pythonic though, because <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">"Explicit is better than implicit"</a>.</span>
<span class="comment-copy">@RayLuo:  Everything has its place -- one does not, for example, say <code>if my_key not in some_dict: raise KeyError()</code> even though it is more explicit than <code>some_dict[my_key]</code>.</span>
<span class="comment-copy">@EthanFurman: Well, if "everything has its place", why did you not allow a different style answer to have its place?</span>
<span class="comment-copy">Thanks for the down vote. I was actually aware that there is a standard <code>Enum</code> module in Python 3 that is, feature-wise speaking, largely a superset to my one-liner implementation. However there is one scenario that it won't suit my need. I want the values to be a first-class citizen in my enum; I want my <code>t_shirt_size(...)</code> function to accept a real value, not just an enum member. The standard enum approach would NOT allow these 2 usages: <code>assert SIZE.MEDIUM == 1</code> nor <code>assert 1 in SIZE</code>. Now, your particular answer does not suit my need. Yet I ain't gonna downvote it. Would you be fair too?</span>
<span class="comment-copy">@RayLuo: <code>assert SIZE.MEDIUM == 1</code> does work with an <code>IntEnum</code>.  The second one does not work as-is, but you can add your own method to do the heavy-lifting.</span>
<span class="comment-copy">@RayLuo:  Portions of your answer are wrong -- that is why I down-voted it.  Nothing in my answer is wrong, and it now meets your needs of direct value comparison and containment checks.</span>
<span class="comment-copy">even though <code>assert SIZE.MEDIUM == 1</code> does work with <code>IntEnum</code>, which I already knew and pointed out in my question; one of my use case is to also support string and there is no default <code>StrEnum</code>, which again I already pointed out. I was just seeking a way to simply treat values as first class citizen and I found a solution I need, so by definition my answer was correct, I was just humble to not (yet?) accept it, to encourage different voices. Now, how confident are you to say my answer was wrong (to me) and yours are correct (to me)? Sorry I don't think so.</span>
<span class="comment-copy">@RayLuo:  As I said in my comment, <i>portions</i> of your answer are incorrect -- as in technically incorrect.  Fix those and I'll remove my downvote.</span>
