<div class="post-text" itemprop="text">
<p>Today I have started to learn Python. The first things I learned were values, expressions and (arithmetic) operators. So far, everything makes sense, except one thing that I don not get:</p>
<p>While</p>
<pre><code>2+2
</code></pre>
<p>evaluates to <code>4</code> (which makes sense),</p>
<pre><code>2+
</code></pre>
<p>results in a <code>SyntaxError</code> (which also makes sense). But what â€“ from my point of view â€“ does <em>not</em> make sense is the following line of code:</p>
<pre><code>2+++2
</code></pre>
<p>This results in <code>4</code> as well, and I wonder why. If I can compare this to JavaScript (which I use on a day-to-day basis), this results in an error in JavaScript.</p>
<p>So, two questions:</p>
<ol>
<li>Why does this not result in a syntax error?</li>
<li>How does this expression get evaluated? What happens to the additional <code>+</code> signs?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Python has an <a href="https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="noreferrer">unary <code>+</code> operator</a> - <code>+2</code> will evaluate to <code>2</code>. So, that expression is actually evaluated as:</p>
<pre><code>2+(+(+2))
</code></pre>
<p>Which, of course, is <code>4</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the official documentation <a href="https://docs.python.org/3/library/stdtypes.html#additional-methods-on-integer-types" rel="nofollow noreferrer">here</a>, </p>
<pre><code>+2 # refers to 2

2+++2# unary + has higher precedence than addition

2++2 # same logic

2+2
4
</code></pre>
</div>
<span class="comment-copy">Considering 2-2=0 ; 2--2=4 ; 2---2=0 I would say the 2+++2 is evaluated as 2 + 2</span>
<span class="comment-copy">But shouldn't <code>2---2</code> require parentheses? Somehow, this looks quite strange IMHO.</span>
<span class="comment-copy">The Order of operation is from left to right so: 2-- evaluates to 2+ and 2+-2 evaluates to 2 - 2 = 0.</span>
<span class="comment-copy">It's parsed perfectly in JavaScript if you add spaces so it doesn't look like an increment operator: <code>2 + + + + + + + + + + + + + + 2</code>. I'd be more surprised to hear of a programming language or scientific calculator where this <i>doesn't</i> work.</span>
<span class="comment-copy">Ah, I see! Thanks ðŸŽ‰</span>
<span class="comment-copy">Which you can "prove" by  <code>ast.dumps(ast.parse('2+++2'))</code> if you fancied.</span>
