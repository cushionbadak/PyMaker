<div class="post-text" itemprop="text">
<p>i have the below code:</p>
<pre><code>from flask import Flask
from kontekst_report_server import kontekst


app = Flask(__name__)

@app.route("/&lt;vardate&gt;")
def hello(vardate):
    kontekst(vardate)
    return "Script Completed"


if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
<p>i am passing the variable vardate to the function kontekst as below:</p>
<pre><code>def kontekst(vardate):

    # SQLDbObj
    sqlDbObj = DB()

    OPENdata = "select * from ts_data where substr(created_on,1,10)=%s" (vardate)
    opendata = sqlDbObj.query(OPENdata)
</code></pre>
<p>But when i am accessing this via <a href="http://127.0.0.1:5000/2018-09-14" rel="nofollow noreferrer">http://127.0.0.1:5000/2018-09-14</a>, am getting below error:</p>
<blockquote>
<p>OPENdata = "select * from ts_data where substr(created_on,1,10)=%s"
  (vardate) TypeError: 'str' object is not callable</p>
</blockquote>
<p>how would i fix this to retrieve data for the passed date?</p>
</div>
<div class="post-text" itemprop="text">
<p>You forgot a percent sign between your sql string and <code>(vardate)</code>.</p>
<p>Therefore the python interpreter thinks you want to call that string as a function. Change your code to</p>
<pre><code>OPENdata = "select * from ts_data where substr(created_on,1,10)=%s" % (vardate)
</code></pre>
<p>Nowadays, the suggestion for string formatting is <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">using the <code>str.format()</code> method</a>.</p>
<pre><code>"select * from ts_data where substr(created_on,1,10)={}".format(vardate)
</code></pre>
<p>By the way, as stated by <a href="https://stackoverflow.com/users/67579/willem-van-onsem">Willem Van Onsem</a> you should never ever pass your input directly to the database as this makes your application vulnerable to <a href="https://en.wikipedia.org/wiki/SQL_injection" rel="nofollow noreferrer">sql injections</a>.</p>
<p>It is highly recommended to use whatever functionallity your library for database connections brings to exscape every user input.</p>
</div>
<span class="comment-copy">You forgot the <code>%</code> operator. But that being said it is very unsafe to write such queries.</span>
<span class="comment-copy">Do not do parameter formatting yourself. Probably the <code>.query(..)</code> function has a way to "inject" parameters in an SQL-injection safe way.</span>
<span class="comment-copy">Noo... don't do string formatting yourself!! This make the system vulnerable to SQL injection.</span>
<span class="comment-copy">Of course, I totally agree with you. But I do not think that this is in the scope of the question.  You can submit your own answer with an example for sql friendly string escaping and you will have my upvote ;)</span>
<span class="comment-copy">I think it might be a good idea to put a <i>warning</i> in your answer. Since now the OP (and other users looking at this answer), might think that this is a good/common idea, and thus will make SQL vulnerable software. If you add a warning, you have an upvote :)</span>
<span class="comment-copy">Thank you, I updated my answer.</span>
<span class="comment-copy">Another, and I believe that a more preferred way would be to use f-strings, i.e.: <code>f"select * from ts_data where substr(created_on,1,10)={vardate}"</code>, if we're on Python &gt;= 3.6 of course</span>
