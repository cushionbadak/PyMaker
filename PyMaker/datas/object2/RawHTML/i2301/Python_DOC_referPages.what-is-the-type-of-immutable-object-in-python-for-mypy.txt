<div class="post-text" itemprop="text">
<p>I always use <code>mypy</code> in my <strong>Python</strong> programs.</p>
<p>What is the type (from <code>typing</code>) for immutable objects, the ones that could be used for a dictionary key?</p>
<p>To put back into context, I want to write a class inherited from dictionary and I have the following code</p>
<pre><code>class SliceableDict(dict):
    def __getitem__(self, attr:Any) -&gt; Any:
        return super().__getitem__(attr)
</code></pre>
<p>Type hints in that case are pretty useless, isn't it?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>The keys of a <code>dict</code> are <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="noreferrer"><em>hashable</em></a> (see <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="noreferrer">the first sentence of the docs on <code>dict</code></a>), and the hashable type is <a href="https://docs.python.org/3/library/typing.html#typing.Hashable" rel="noreferrer"><code>typing.Hashable</code></a>, an alias for <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Hashable" rel="noreferrer"><code>collections.abc.Hashable</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/typing.html#typing.Hashable" rel="nofollow noreferrer"><code>typing.Hashable</code></a> refers to any type that can serve as a valid key in a <code>dict</code> or value in a <code>set</code>. </p>
<p>It doesn't <em>require</em> true immutability (any object can <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">define <code>__hash__</code></a>), but in general, hashable things should be things that are "treated as immutable", since it will break things should they be mutated after insertion into a <code>set</code> or after being inserted as a <code>dict</code> key.</p>
</div>
<span class="comment-copy">Both your answer and jwodder's answer are great.. I have selected the other one just because I saw it first. Thanks again for the time spent enlightening me!</span>
