<div class="post-text" itemprop="text">
<p>I am trying to create a point class that has the data attribute of floating point values 'x' and 'y' to therefore define a location of a point in 2D space. Additionally I want to have methods of <strong>init</strong> such as it being an initialization of default values x = 0 and y = 0. And then a move function which accepts the 'x' and 'y' as a new location of the point. And finally a function which tells the distance to a point. I want this to return the Euclidian distance from this point to another point at x, y.  How would this be done?</p>
<p>Here is the code I have so far for the above description:</p>
<pre><code>import math

class Point:

    def __init__(self):
        self.x = 0 # initialize to 0
        self.y = 0 # initialize to 0

    def move(self, x, y):
        self.x = x
        self.y = y 
</code></pre>
<p>Could use help on this and the Eucliean distance from this point to another point at x,y. Not sure if I have the right idea so far. New to python so don't know how to test the functionality of this code. Would appreciate the help!</p>
<p>After that part I'd to be able to define two points at two opposite corners of a rectangle and use the Points defined above without using inheritance. Any ideas on how to create this class?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this (comments in the code):</p>
<h3>example:</h3>
<pre><code>class Point:

    def __init__(self, x: float=0.0, y: float=0.0)-&gt; None:   # assign default values
        self.x = x
        self.y = y

    def move_by(self, dx: float, dy: float)-&gt; None:   # move Point by dx, dy
        self.x += dx
        self.y += dy 

    def move_to(self, new_x: float, new_y: float)-&gt; None:   # relocate Point to new x, y position
        self.x = new_x
        self.y = new_y 

    def distance(self, other: 'Point')-&gt; float:   # calculates and returns the Euclidian distance between self and other
        if isinstance(other, Point):
            x0, y0 = self.x, self.y
            x1, y1 = other.x, other.y
            return ((x1 - x0)**2 + (y1 - y0)**2) ** 0.5
        return NotImplemented

    def __str__(self)-&gt; str:    # add a nice string representation
        return f'Point({self.x}, {self.y})'
</code></pre>
<h3>tests:</h3>
<pre><code>p = Point(1, 2)
q = Point()
print(p, q, p.distance(q) == 5**0.5)
p.move_by(.1, -.1)
print(p)
</code></pre>
<h3>output:</h3>
<pre><code>Point(1, 2) Point(0.0, 0.0) True
Point(1.1, 1.9)
</code></pre>
<p>And the Rectangle class could be like this:  <strong>[edited to add default <code>Point</code> values]</strong></p>
<p>In <code>Rectangle.__init__</code>, the min and max values of the x and y values of the <code>Points</code> provided as parameters are sorted in order to determine the top left and bottom right points defining the rectangle </p>
<pre><code>class Rectangle:
        def __init__(self, p0: Point=Point(), p1: Point=Point(1.0, 1.0))-&gt; None:  # &lt;--- [edit]: now with default values
        x0, y0 = p0.x, p0.y
        x1, y1 = p1.x, p1.y
        self.topleft = Point(min(x0, x1), max(y0, y1))      # calculate the topleft and bottomright
        self.bottomright = Point(max(x0, x1), min(y0, y1))  # of the bounding box

    def __str__(self)-&gt; str:
        return f'Rectangle defined by bbox at: {self.topleft}, {self.bottomright})'
</code></pre>
<h3>tests:</h3>
<pre><code>p = Point(1, 2)
q = Point()
print(p, q, p.distance(q) == 5**0.5)
p.move_by(.1, -.1)
print(p)

r = Rectangle(p, q)
print(r)
</code></pre>
<h3>output:</h3>
<pre><code>Point(1, 2) Point(0.0, 0.0) True
Point(1.1, 1.9)
Rectangle defined by bbox at: Point(0.0, 1.9), Point(1.1, 0.0))
</code></pre>
<h3>[Edit:] with default values for Points in Rectangle:</h3>
<pre><code>s = Rectangle()
print(s)
</code></pre>
<h3>output:</h3>
<pre><code>Rectangle defined by bbox at: Point(0.0, 1.0), Point(1.0, 0.0))
</code></pre>
</div>
<span class="comment-copy"><code>def __init__(self, x=0, y=0):</code> would be better, so you can set the coords when you create a Point. You might find this answer interesting <a href="https://stackoverflow.com/a/52388373/4014959">stackoverflow.com/a/52388373/4014959</a></span>
<span class="comment-copy">You seem to have a pretty clear picture of what the class supposed to look like. What exactly prevents you from simply writing it?</span>
<span class="comment-copy">@PM2Ring Thanks! I know this is super basic but the Euclidean distance would simply be having two points (x1,y1) (x2,y2) and plugging them into the formula: sqrt( (x1-x2)^2 + (y1-y2)^2 )â€¦. so in python that would be math.Sqrt( (x1-x2)**2 + (y1-y2)**2 ) ?</span>
<span class="comment-copy">@mkrieger1 the part which is confusing me is taking two points and defining two opposite corners of a rectangle using the Points defined above aka not using inheritance. Not sure how that would be done.</span>
<span class="comment-copy">Correct. Although it's <code>math.sqrt</code>. As the linked answers show, a nice way to do that is to give the Point class an <code>__abs__</code> magic method that calculates the distance of a point to the origin. And if you also give Point a <code>__sub__</code> method then you can do <code>abs(a-b)</code> to get the distance between points a &amp; b.</span>
<span class="comment-copy">Thank you. New to Python, first time seeing : within the parameter list, what does it mean? also the -&gt; None I've never seen these used</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">docs.python.org/3/library/typing.html</a></span>
<span class="comment-copy">I chose yours as the best answer</span>
<span class="comment-copy">How would I initialize with default p1 = (0,0), p2 = (1,1) within the Rectangle classes' <b>init</b> method? Also I don't understand what is happening with the min and max, please help.</span>
<span class="comment-copy">thank you. I edited the answer to address your questions. In <code>Rectangle.__init__</code>, the min and max values of the x and y values of the <code>Points</code> are sorted in order to determine the top left and bottom right points defining the rectangle</span>
