<div class="post-text" itemprop="text">
<p>I haven't found how to give type hints indication when using weakrefs.</p>
<pre><code>from typing import List
import weakref
class MyObject:
    def __init(self, foo)
        self.foo = foo
o1 = MyObject(1)
o2 = MyObject(2)
my_list: List[weakref] = [weakref.ref(o1), weakref.ref(o2)]
</code></pre>
<p>Is there a way to say that <code>my_list</code> is a <code>list</code> of <code>weakref</code> to <code>MyObject</code>, something like:</p>
<pre><code>my_list: List[Weakref[MyObject]] = [weakref.ref(o1), weakref.ref(o2)]
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>We can find this information by consulting <a href="https://github.com/python/typeshed" rel="nofollow noreferrer">typeshed</a>, a repository of type hints for the standard library and some popular 3rd party modules.</p>
<p>Specifically, if we look at the stubs for the <a href="https://github.com/python/typeshed/blob/master/stdlib/2and3/weakref.pyi" rel="nofollow noreferrer"><code>weakref</code> module</a>, we can see that it re-exports <code>ref</code> from the <a href="https://github.com/python/typeshed/blob/master/stdlib/2and3/_weakref.pyi" rel="nofollow noreferrer"><code>_weakref</code> module</a>. And from there, we see that <code>ref</code> is defined to be equivalent to the <code>ReferenceType</code> class, which is defined to be generic (and is also re-exported from <code>weakref</code>).</p>
<p>Putting these pieces together, we can give your <code>my_list</code> variable a type hint that looks like this:</p>
<pre><code>from __future__ import annotations
from typing import List
from weakref import ref, ReferenceType

# ...snip...

my_list: List[ReferenceType[MyObject]] = [...]
</code></pre>
<p>Somewhat interestingly, it's also ok to do this:</p>
<pre><code>from __future__ import annotations
from typing import List
from weakref import ref

# ...snip...

my_list: List[ref[MyObject]] = [...]
</code></pre>
<p>Basically, <code>ref</code> is also an alias to <code>ReferenceType</code> so we can use both types interchangeably.</p>
<p>I would personally use <code>ReferenceType</code>, but that's mostly because I'm just so used to types starting with capital letters. (Or, if that type hint starts getting too verbose, I'd maybe define a custom type alias <code>Ref = ReferenceType</code>).</p>
<p>Note that the <code>from __future__ import annotations</code> line is available only on Python 3.7+. If you're using an older version of Python, you'll need to make your type hints be strings manually:</p>
<pre><code>from typing import List
from weakref import ref

# ...snip...

my_list: "List[ReferenceType[MyObject]]" = [...]

# Or:

my_list: List["ReferenceType[MyObject]"] = [...]
</code></pre>
</div>
<span class="comment-copy">"no runtime involved here" - if you're going to run your code, then runtime behavior matters. When I say <code>ReferenceType[Whatever]</code> "doesn't actually work at runtime", I mean that it actually <i>outright throws an error</i> and fails to run.</span>
<span class="comment-copy">Ok sorry, I read too fast your comments and missunderstood the purpose of the discussion. So accepted a bit fast, without testing indeed</span>
<span class="comment-copy">This doesn't actually work at runtime - the real <code>weakref.ReferenceType</code> is not generic.</span>
<span class="comment-copy">@user2357112 -- ah, you can work around that by making your type hint a string (<code>my_list: "List[ReferenceType[MyObject]]" = ...</code>). If you're using Python 3.7+, you can instead add a <code>from __future__ import annotations</code>, which will convert all type hints into strings automatically.</span>
<span class="comment-copy">You can do that, but <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer"><code>typing.get_type_hints</code></a> will still fail.</span>
<span class="comment-copy">@user2357112 -- lI think in that case, you're mostly out of luck. Type hints are meant to be useful mostly for static analysis, and analyzing them at runtime isn't very well-supported. I suppose the last thing you could try is defining a <a href="https://mypy.readthedocs.io/en/latest/protocols.html" rel="nofollow noreferrer">custom protocol</a> that basically copies the definition of ReferenceType -- but I have no idea how protocols will interact with functions that do that kind of runtime introspection.</span>
<span class="comment-copy">indeed your examples lead to: <code>File "&lt;ipython-input-61-5860728006fe&gt;", line 1, in &lt;module&gt;r:   ReferenceType[MyObject] = weakref.ref(o1) TypeError: 'type' object is not subscriptable</code></span>
