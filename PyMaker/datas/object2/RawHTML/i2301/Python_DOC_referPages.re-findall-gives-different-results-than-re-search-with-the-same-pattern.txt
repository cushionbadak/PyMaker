<div class="post-text" itemprop="text">
<p>I have  as str that I want to get the substring inside single quotes (<code>'</code>):</p>
<pre><code>line = "This is a 'car' which has a 'person' in it!"
</code></pre>
<p>so I used:</p>
<pre><code>name = re.findall("\'(.+?)\'", line)
print(name[0])
print(name[1])
</code></pre>
<blockquote>
<p>car<br/>
  person</p>
</blockquote>
<p>But when I try this approach:</p>
<pre><code>pattern = re.compile("\'(.+?)\'")
matches = re.search(pattern, line)
print(matches.group(0))
print(matches.group(1))
# print(matches.group(2))  # &lt;- this produces an error of course
</code></pre>
<blockquote>
<p>'car'<br/>
  car</p>
</blockquote>
<p>So, my question is why the pattern behaves differently in each case? I know that the former returns "all non-overlapping matches of pattern in string" and the latter match objects which might explain some difference but I would expect with the same pattern same results (even in different format). </p>
<p>So, to make it more concrete:</p>
<ol>
<li>In the first case with <code>findall</code> the pattern returns all substrings but in the latter case it only return the first substring.</li>
<li>In the latter case <code>matches.group(0)</code> (which corresponds to <a href="https://docs.python.org/3/library/re.html#re.Match.group" rel="nofollow noreferrer">the whole match</a> according to the documentation) is different than <code>matches.group(1)</code> (which correspond to the first parenthesized subgroup). Why is that?</li>
</ol>
<p><code>re.finditer("\'(.+?)\'", line)</code> returns match objects so it functions like <code>re.search</code>.</p>
<p>I know that there are similar question is SO like this <a href="https://stackoverflow.com/questions/42138765/python-re-findall-returning-different-results-from-re-search">one</a> or this <a href="https://stackoverflow.com/questions/16045643/python-re-findall-returns-unwanted-result">one</a> but they don't seem to answer why (or at least I did not get it).</p>
</div>
<div class="post-text" itemprop="text">
<p>You already read the docs and other answers, so I will give you a hands-on explanation</p>
<p>Let's first take this example from <a href="https://docs.python.org/3/library/re.html#re.Match.group" rel="nofollow noreferrer">here</a></p>
<pre><code>&gt;&gt;&gt; m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
&gt;&gt;&gt; m.group(0)       # The entire match
'Isaac Newton'
&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.
'Isaac'
&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.
'Newton'
&gt;&gt;&gt; m.group(1, 2)    # Multiple arguments give us a tuple.
('Isaac', 'Newton')
</code></pre>
<p>If you go on <a href="https://regex101.com/" rel="nofollow noreferrer">this website</a> you will find the correspondence with the previous detections</p>
<p><a href="https://i.stack.imgur.com/ghAoV.jpg" rel="nofollow noreferrer"><img alt="first example" src="https://i.stack.imgur.com/ghAoV.jpg"/></a></p>
<p>group(0) is taking the full match, group(1) and group(2) are respectively Group 1 and Group 2 in the picture. Because as said <a href="https://docs.python.org/3/library/re.html#re.Match.group" rel="nofollow noreferrer">here</a> "Match.group([group1, ...])
Returns one or more subgroups of the match. If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, group1 defaults to zero (the whole match is returned)"</p>
<p>Now let's go back to your example</p>
<p><a href="https://i.stack.imgur.com/Bnjaq.jpg" rel="nofollow noreferrer"><img alt="second example" src="https://i.stack.imgur.com/Bnjaq.jpg"/></a></p>
<p>As said by others with <code>re.search(pattern, line)</code> you will find ONLY the first occurrence of the pattern ["Scan through string looking for the first location where the regular expression pattern produces a match" as said <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer">here</a>] and following the previous logic you will now understand why <code>matches.group(0)</code> will output the full match and <code>matches.group(1)</code> the Group 1. And you will understand why <code>matches.group(2)</code> is giving you error [because as you can see from the screenshot there is not a group 2 for the first occurrence in this last example]</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>re.findall</code> returns <strong>list</strong> of matches (in this particular example, first groups of matches), while <code>re.search</code> returns
only <strong>first</strong> leftmost match.</p>
<p>As stated in python documentation (<a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a>):</p>
<blockquote>
<p>Return <strong>all</strong> non-overlapping
  matches of pattern in string, <strong>as a list of strings</strong>. The string is
  scanned left-to-right, and matches are returned in the order found. If
  one or more groups are present in the pattern, return a list of
  groups; this will be a list of tuples if the pattern has more than one
  group. Empty matches are included in the result.</p>
</blockquote></li>
<li><code>matches.group(0)</code> gives you <strong>whole fragment</strong> of string that matches your pattern, that's why it have quotes, while <code>matches.group(1)</code> gives you first <strong>parenthesized</strong> substring of matching fragment, that means it will not include quotes because they are outside of parentheses. Check <a href="https://docs.python.org/3/library/re.html#re.Match.group" rel="nofollow noreferrer"><code>Match.group()</code></a> docs for more information.</li>
</ol>
</div>
<span class="comment-copy">Do you understand at least that <code>re.search</code> only finds the first match?</span>
<span class="comment-copy">As per <a href="https://docs.python.org/2/library/re.html#re.search" rel="nofollow noreferrer">manual</a>: <b>Scan through string looking for the first location where the regular expression pattern produces a match</b></span>
<span class="comment-copy">re.group(0) refers to the overaching group.</span>
<span class="comment-copy">Also <code>finditer</code> is supposed to be used in a loop.</span>
