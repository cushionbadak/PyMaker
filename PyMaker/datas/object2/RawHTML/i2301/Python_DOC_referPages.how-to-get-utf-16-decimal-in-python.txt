<div class="post-text" itemprop="text">
<p>I have Unicode Code Point of an emoticon represented as <strong>U+1F498</strong>:</p>
<pre><code>emoticon = u'\U0001f498'
</code></pre>
<p>I would like to get utf-16 decimal groups of this character, which according to <a href="https://www.fileformat.info/info/unicode/char/1f498/index.htm" rel="nofollow noreferrer">this website</a> are <code>55357</code> and <code>56472</code>.</p>
<p>I tried to do <code>print emoticon.encode("utf16")</code> but did not help me at all because it gives some other characters.</p>
<p>Also, trying to decode from UTF-8 before encode it to UTF-16 as follow <code>print str(int("0001F498", 16)).decode("utf-8").encode("utf16")</code> does not help either.</p>
<p>How do I correctly get the utf-16 decimal groups of a unicode character?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer"><code>encode</code></a> the character with the <code>utf-16</code> encoding, and then convert every 2 bytes of the encoded data to integers with <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer"><code>int.from_bytes</code></a> (or <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer"><code>struct.unpack</code></a> in python 2).</p>
<h2>Python 3</h2>
<pre><code>def utf16_decimals(char, chunk_size=2):
    # encode the character as big-endian utf-16
    encoded_char = char.encode('utf-16-be')

    # convert every `chunk_size` bytes to an integer
    decimals = []
    for i in range(0, len(encoded_char), chunk_size):
        chunk = encoded_char[i:i+chunk_size]
        decimals.append(int.from_bytes(chunk, 'big'))

    return decimals
</code></pre>
<h2>Python 2 + Python 3</h2>
<pre><code>import struct

def utf16_decimals(char):
    # encode the character as big-endian utf-16
    encoded_char = char.encode('utf-16-be')

    # convert every 2 bytes to an integer
    decimals = []
    for i in range(0, len(encoded_char), 2):
        chunk = encoded_char[i:i+2]
        decimals.append(struct.unpack('&gt;H', chunk)[0])

    return decimals
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; utf16_decimals(u'\U0001f498')
[55357, 56472]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In a Python 2 "narrow" build, it is as simple as:</p>
<pre><code>&gt;&gt;&gt; emoticon = u'\U0001f498'
&gt;&gt;&gt; map(ord,emoticon)
[55357, 56472]
</code></pre>
<p>This works in Python 2 (narrow and wide builds) and Python 3:</p>
<pre><code>from __future__ import print_function
import struct

emoticon = u'\U0001f498'
print(struct.unpack('&lt;2H',emoticon.encode('utf-16le')))
</code></pre>
<p>Output:</p>
<pre><code>(55357, 56472)
</code></pre>
<p>This is a more general solution that prints the UTF-16 code points for any length of string:</p>
<pre><code>from __future__ import print_function,division
import struct

def utf16words(s):
    encoded = s.encode('utf-16le')
    num_words = len(encoded) // 2
    return struct.unpack('&lt;{}H'.format(num_words),encoded)

emoticon = u'ABC\U0001f498'
print(utf16words(emoticon))
</code></pre>
<p>Output:</p>
<pre><code>(65, 66, 67, 55357, 56472)
</code></pre>
</div>
<span class="comment-copy">There are essentially 2 separate questions here: How to convert a hex string to a unicode character (or code point), and how to turn a unicode character into utf-16 decimal groups. Would you mind if we remove the first question, and assume that the input is a unicode character or code point, rather than a hex string?</span>
<span class="comment-copy">Look, meanwhile I found this thread here <a href="https://stackoverflow.com/questions/49145161/get-a-unicode-from-pythons-str-byte-sequence" title="get a unicode from pythons str byte sequence">stackoverflow.com/questions/49145161/â€¦</a> where the answer is showing how to do exactly the opposite. But it is a bit hard get the idea. How to get these two numbers ? And yes, please, any help would be appreciated ! Thank you in advance !</span>
<span class="comment-copy">Just a suggestion: Upgrade to Python 3 right now. A few things changed, in particular in the area of strings, and it's little use learning a language that's obsolete.</span>
<span class="comment-copy">Thank you very, very, very much!</span>
