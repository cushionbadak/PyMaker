<div class="post-text" itemprop="text">
<p>Directory Structure</p>
<p><code>test.py
 Info
   __init.py
   msg1.py
   msg2.py
   msg3.py</code></p>
<p>test.py</p>
<pre><code>import Info  
Info.msg1()  
Info.msg2()  
Info.msg3() 
</code></pre>
<p><strong>init</strong>.py</p>
<pre><code>from msg1 import msg1  
from msg2 import msg2  
from msg3 import msg3  
</code></pre>
<p>msg1.py</p>
<pre><code>def msg1():  
print "This is msg1"
</code></pre>
<p><code>msg2.py</code> and <code>msg3.py</code> is also same as <code>msg1.py</code>
me running this on windows pc with python 3.7.0</p>
<p>getting the below error<a href="https://i.stack.imgur.com/WuacL.png" rel="nofollow noreferrer"><img alt="PackageError" src="https://i.stack.imgur.com/WuacL.png"/></a></p>
<p>Please help me out</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's why your program is breaking. Whenever a script is launched from your terminal, It appends the current path of the file to <code>sys.path</code> And Python only looks for modules which are in direct reach of this path. In your case, it appended to the path of the test.py, <strong>But</strong>, from the eyes of the Python interpreter, <code>msg1</code> is still <code>Info.</code> away from the directory of <code>test.py</code> that is because the <code>sys.path</code> has directory only up to <code>test.py</code> and not up to <code>Info</code> i.e, there is a <em>gap</em> in the directory chain. So to avoid this problem you need to use relative imports to avoid name dependencies. Change your <code>__init__</code> to this and it should work. <strong>Or</strong> you could also add the path of <code>Info</code> package to your <code>sys.path</code> which is not recommended but still possible. </p>
<pre><code>from .msg1 import msg1
from .msg2 import msg2
from .msg3 import msg3
</code></pre>
<p>And here's another way you could do the same</p>
<pre><code>import sys
sys.path.append(r'C:\Users\MyName\Desktop\Info') # Or you could os module to get dynamically

from msg1 import msg1
from msg2 import msg2
from msg3 import msg3
</code></pre>
<p>Although a much better way would be this</p>
<pre><code>import os
import sys
dir = os.path.join(os.getcwd(),'Info')
sys.path.append(dir)
</code></pre>
<p>And if you want to make the changes permanent, i.e not add <code>sys.path</code> every time, you can EXPORT or ADD the path to python's environment variables and it will pick it up automatically. </p>
</div>
<div class="post-text" itemprop="text">
<p>You would import with this syntax in __init__.py:</p>
<p>__init__.py</p>
<pre><code>from Info.msg1 import msg1
from Info.msg2 import msg2
from Info.msg3 import msg3
</code></pre>
<p>Or you can use as :</p>
<pre><code>from .msg1 import msg1
from .msg2 import msg2
from .msg3 import msg3
</code></pre>
<p>Hope this will solve your problem.</p>
</div>
<span class="comment-copy">Thank you for u r explanation</span>
<span class="comment-copy">accept and upvote some answer to mark it as solved. @Varma</span>
<span class="comment-copy">thank you, Now it's working fine. msg1 is already in Info again y should i call like this from Info.msg1 import msg1. could u let me know the reason thank u</span>
<span class="comment-copy">As per Python doc : when a submodules is loaded using any mechanism , a binding is placed in the parent module's namespace. <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">docs.python.org/3/reference/import.html</a> check 5.4.2. Submodules topic.</span>
<span class="comment-copy">Thank you really u saved my day</span>
