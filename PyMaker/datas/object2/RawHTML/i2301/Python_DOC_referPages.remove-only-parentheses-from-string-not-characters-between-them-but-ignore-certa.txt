<div class="post-text" itemprop="text">
<p>I have this string</p>
<pre><code>str = "Hello (m)y name (?) is (donal)d (!) "
</code></pre>
<p>and expect the following output:</p>
<pre><code>"Hello my name (?) is donald (!) "
</code></pre>
<p>I tried it with</p>
<pre><code>r = re.sub(r'([()+])', '', str)
</code></pre>
<p>But this removes all parentheses. What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>This technically gets the result you want for this example...</p>
<pre><code>import re

re.sub(
    r"\((\w+)\)", 
    r"\1", 
    "Hello (m)y name (?) is (donal)d (!) ",
)
</code></pre>
<p>...but I doubt it would work for all cases. Impossible to be sure given you haven't shown the task you're supposed to be completing.</p>
<p>What this does:</p>
<p>Parens are special characters in <code>re</code>, so matching them outside of square brackets means escaping them: <code>\(</code>, <code>\)</code>. You want to keep what's between them, though, so you use normal (unescaped) parens around the characters between them. This assumes it's just 'word characters' you want to save; you probably need something more complex than just <code>\w</code> here.</p>
<p>The plus sign means you'll be matching one or more word characters.</p>
<p><code>\1</code> in <code>sub()</code> means when the first argument, the regex, is matched, that chunk of the string will be replaced with the matched part between the first set of parens. We only have one here.</p>
<p>The Python <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> module documentation</a> explains all this in much better detail.</p>
</div>
<span class="comment-copy">What is meant by: <i>Perform regex</i>?</span>
<span class="comment-copy">using regular expression</span>
<span class="comment-copy">Using regular expression to do what?</span>
<span class="comment-copy">"Hello my name (?) is donald (!) " get this output</span>
<span class="comment-copy">How about just doing <code>print("Hello my name (?) is donald (!) ")</code>?  That will give you that output.</span>
<span class="comment-copy">Adding this example still does not actually define the task. If you provided the text of the problem that includes or was used to generate these examples, it'd presumably be possible to find a solution, but I don't think anyone is going to keep adjusting a regex based on further examples that exhibit progressively higher complexity.</span>
<span class="comment-copy">what if i need to delete words inside parenthesis also?</span>
<span class="comment-copy">If you check my paragraph about <code>\1</code> and <code>sub()</code>, you can see how the word is being kept. That should help you figure out how to remove the word inside the parens as well.</span>
<span class="comment-copy">got it, your comments helped, thanks</span>
<span class="comment-copy">You're welcome! Glad it helped.</span>
