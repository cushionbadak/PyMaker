<div class="post-text" itemprop="text">
<p>Say I have</p>
<pre><code>class A:
    # Some code
</code></pre>
<p>Then, I want to create an abstract subclass <code>B</code> of <code>A</code>, which itself is concrete. Should I use multi-inheritance for this purpose? If so, should I import <code>ABC</code> first, as in</p>
<pre><code>class B(ABC, A):
    @abstractmethod
    def some_method():
        pass
</code></pre>
<p>, or should I import it last, as in</p>
<pre><code>class B(A, ABC):
    @abstractmethod
    def some_method():
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, multiple inheritance is one way to do this. The order of the parent classes doesn't matter, since <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="nofollow noreferrer"><code>ABC</code></a> contains no methods or attributes. The sole "feature" of the <code>ABC</code> class is that its <a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">metaclass</a> is <a href="https://docs.python.org/3/library/numbers.html#numbers.ABCMeta" rel="nofollow noreferrer"><code>ABCMeta</code></a>, so <code>class B(ABC, A):</code> and <code>class B(A, ABC):</code> are equivalent.</p>
<p>Another option would be to directly set <code>B</code>'s metaclass to <code>ABCMeta</code> like so:</p>
<pre><code>class B(A, metaclass=ABCMeta):
</code></pre>
</div>
<span class="comment-copy">Are you sure you want to do this in the first place? What is you use case? It is a bit strange to turn a concrete class abstract.</span>
<span class="comment-copy">Please add to the question what you are trying to achieve and what are the issues you encounter. Seems that possibly you need to do something different than what is asked.</span>
<span class="comment-copy">@JohanL In some frameworks, say in PyTorch (which is for deep learning), there are some generic classes designed to be inherited and modified to serve specific purposes for the user (say, to define a custom submodule of a neural network, you should inherit from <code>torch.nn.Module</code>). I might want to implement a group of concrete <code>Module</code>s, and extract an abstract base class to reduce duplication. That abstract class should still inherit from <code>Module</code>, which itself is concrete.</span>
