<div class="post-text" itemprop="text">
<p>I am trying to setup logging between multiple processes using the QueueHandler.  I am seeing the same log in the log file printed multiple times.  Using this as a template (<a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes</a>)</p>
<p>EDIT</p>
<p>multi processing file:</p>
<pre><code>import logging
from logging.handlers   import RotatingFileHandler, QueueHandler
from multiprocessing import Process
from queue import Empty

class MultiProcessQueueLoggingListner(Process):
    def __init__(self, name, queue):
        super().__init__()
        self.name = name
        self.queue = queue
        self.logger = logging.getLogger(name)
        self.file_handler = RotatingFileHandler(name, maxBytes=536870912, backupCount=2)
        self.formatter = logging.Formatter('%(asctime)s %(processName)-10s %(name)s %(levelname)-8s %(message)s')
        self.file_handler.setFormatter(self.formatter)
        self.logger.addHandler(self.file_handler)

    def run(self):
        while True:
            try:
                record = self.queue.get()
                if record is None:
                    break
                self.logger.handle(record)
            except Exception:
                import sys, traceback
                print('Whoops! Problem:', file=sys.stderr)
                traceback.print_exc(file=sys.stderr)


class MulitProcessQueueLogger(object):
def __init__(self, name, queue):
    self.name = name
    self.queue = queue
    self.queue_handler = QueueHandler(queue)
    self.logger = logging.getLogger(name)
    self.logger.addHandler(self.queue_handler)
    self.logger.setLevel(logging.DEBUG)
</code></pre>
<p>test file:</p>
<pre><code>import multi_process_logging
import multiprocessing
from time import sleep


def worker(po):
    name = multiprocessing.current_process().name
    po = multi_process_logging.MulitProcessQueueLogger('test.log', q)
    print("In worker")
    for i in range(10):
        po.logger.info(f"Logging from {name} line {i}")
    po.queue.put(None)

def main():
    q = multiprocessing.Queue()
    lp = multi_process_logging.MultiProcessQueueLoggingListner('test.log', q)
    lp.start()
    p = multiprocessing.Process(target=worker, args=(q,))
    p.start()
    p.join()
    lp.join()



if __name__ == '__main__':
    main()
</code></pre>
<p>The issue I see is that the test.log file contains multiple lines for the same entry.  The program stops now and doesn't run indefinite but still seeing multiple lines</p>
<pre><code>    cat test.log | grep 'line 0'
2018-09-26 16:32:40,117 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:40,117 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:40,117 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:40,117 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:50,318 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:50,318 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:50,318 Process-2  test.log INFO     Logging from Process-2 line 0
2018-09-26 16:32:50,318 Process-2  test.log INFO     Logging from Process-2 line 0
</code></pre>
<p>I removed test.log before the run to rule out the append onto an existing log file, but still seeing multiple logs.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is caused by the fact that you're checking for a <code>None</code> to break out of the loop, but that will never come because a <code>QueueHandler</code> always writes a <code>LogRecord</code> to a queue, never <code>None</code>. If you want to write <code>None</code> to the queue, you need to write it directly rather than by doing <code>po.logger.info(None)</code>. For example, store the queue as an attribute named <code>queue</code> of your <code>MulitProcessQueueLogger</code> instance and then do <code>po.queue.put(None)</code> in <code>worker()</code>.</p>
</div>
<span class="comment-copy">I added the changes you mentioned and now I am seeing it halt, but still seeing  multiple line for the same entry.  Am i messing something up with the handlers?</span>
<span class="comment-copy">@Greg Brown It's because you also have to initialize the loggers in the new process not in the parent. Your logger inherits the QueueHandler so he re-enqueues the log record when he handels it.</span>
<span class="comment-copy">@Darkonaut I moved the logger into the process instead of the main process, and I am still seeing the duplicate log entries.  Am I missing something?</span>
<span class="comment-copy">@Greg Brown <code>__init__</code> runs in the parent, you have to relocate the configuration of the logger into <code>run</code>. Make an <code>_init_logging</code> method and call it from <code>run</code>.</span>
<span class="comment-copy">@Darkonaut, made the changes and it is working now Thanks.</span>
