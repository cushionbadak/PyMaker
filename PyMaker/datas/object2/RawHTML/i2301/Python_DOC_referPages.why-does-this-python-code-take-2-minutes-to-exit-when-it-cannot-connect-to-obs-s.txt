<div class="post-text" itemprop="text">
<p>I am new to Python and i don't know much about asyncio.  I want to run this script and if the OBS software it is trying to connect to on 10.11.0.124 is not running to exit the code.  The code does this, but it take 2 minutes before it exits.  I cannot figure out why it does not exit immediately when it cannot connect to the OBS software that is not running on 10.11.0.124.</p>
<pre><code>#! /usr/bin/python3

import asyncio
import urllib.request
import sys 
import datetime

from obswsrc import OBSWS
from obswsrc.requests import StartStopStreamingRequest

def logger(logmessage):
    f = open("log.txt", "a")
    f.write(str(datetime.datetime.now()) + " " + logmessage + "\n")
    f.close

async def main():

   try:
        async with OBSWS('10.11.0.124', 4444, "password") as obsws:

            logger("Connection established.")

            while True:

                event = await obsws.event()

                logger(str(format(event.type_name)))

                if(format(event.type_name) == "StreamStarting"):
                    HitURLToLoadAsset = urllib.request.urlopen("http://10.11.0.159/api/v1/assets/control/asset&amp;b0983c0918b94856900040d9a9e8bdbf").read()
                    logger(str(HitURLToLoadAsset))

                if(format(event.type_name) == "StreamStopped"):
                    HitURLToLoadAsset = urllib.request.urlopen("http://10.11.0.159/api/v1/assets/control/asset&amp;3b2fb67002364b269d0c2674a628533c").read()
                    logger(str(HitURLToLoadAsset))

            logger("Connection terminated.")

    except OSError:
        logger("OBS IS NOT RUNNING")

    except:
        logger(str(sys.exc_info()[1]))


loop = asyncio.get_event_loop()
loop.run_until_complete(main())
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>OBSWS</code> function has a timeout of two minutes, because it uses the <code>websockets</code> module internally and that has a default timeout of two minutes.</p>
<p>Detailed breakdown:</p>
<ul>
<li><code>async with OBSWS(...):</code> calls <a href="https://github.com/KirillMysnik/obs-ws-rc/blob/master/obswsrc/client.py#L72" rel="nofollow noreferrer"><code>OBSWS.__init__</code></a> and then <code>await</code>s <a href="https://github.com/KirillMysnik/obs-ws-rc/blob/master/obswsrc/client.py#L216" rel="nofollow noreferrer"><code>OBSWS.__aenter__</code></a>.</li>
<li><code>OBSWS.__init__</code> does nothing interesting, but <a href="https://github.com/KirillMysnik/obs-ws-rc/blob/master/obswsrc/client.py#L226" rel="nofollow noreferrer"><code>OBSWS.__aenter__</code> <code>await</code>s</a> <a href="https://github.com/KirillMysnik/obs-ws-rc/blob/master/obswsrc/client.py#L145" rel="nofollow noreferrer"><code>OBSWS.connect</code></a></li>
<li><code>OBSWS.connect</code> <a href="https://github.com/KirillMysnik/obs-ws-rc/blob/master/obswsrc/client.py#L163-L166" rel="nofollow noreferrer"><code>await</code>s</a> <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L353" rel="nofollow noreferrer"><code>websocket.connect</code></a>.</li>
<li><code>websockets.connect</code> has several different timeouts defined via keyword arguments. It also waits for multiple things. These are:

<ul>
<li><a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L444" rel="nofollow noreferrer"><code>self._creating_connection</code></a>, <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L440" rel="nofollow noreferrer">defined here</a>
<ul>
<li>This uses <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection" rel="nofollow noreferrer"><code>loop.create_connection</code></a> which has a <strong>60 second timeout</strong> by default.</li>
<li>It then calls <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L411-L428" rel="nofollow noreferrer"><code>factory</code></a> which calls <code>create_protocol</code> which <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L386-L387" rel="nofollow noreferrer">defaults to <code>klass</code></a> which <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L367" rel="nofollow noreferrer">defaults to</a> <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L33" rel="nofollow noreferrer"><code>WebSocketClientProtocol</code></a>, which subclasses <a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/protocol.py#L59" rel="nofollow noreferrer"><code>WebSocketCommonProtocol</code></a> which probably isn't adding any further delays.</li>
</ul></li>
<li><a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L447-L453" rel="nofollow noreferrer"><code>protocol.handshake(...)</code></a></li>
<li><a href="https://github.com/aaugustin/websockets/blob/master/src/websockets/client.py#L455" rel="nofollow noreferrer"><code>protocol.fail_connection()</code></a> in the case of any exception being raised, which does occur.</li>
</ul></li>
</ul>
<p>I don't understand <code>asyncio</code> so I just stopped here; there's probably another 60 second delay somewhere but if not... perhaps the computer was just slow.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the help user4815162342 and wizzwizz4!  Here is my final solution.  </p>
<p>I ended up going with wizzwizz4's suggestion of breaking down the connection string so i could use asyncio.wait_for on it.</p>
<p>If anyone cares the code itself is to watch OBS and when streaming is started go change the asset on <a href="https://www.screenly.io/ose/" rel="nofollow noreferrer">Screenly OSE</a> to display the RTMP stream.  When the streaming is stopped switch back to a different asset on Screenly OSE.</p>
<pre><code>#! /usr/bin/python3

import asyncio
import urllib.request
import sys
import datetime

from obswsrc import OBSWS
from obswsrc.requests import StartStopStreamingRequest

def logger(logmessage):
    f = open("log.txt", "a")
    f.write(str(datetime.datetime.now()) + " " + logmessage + "\n")
    f.close


async def main():

    try:
        obsws = OBSWS('10.11.0.124', 4444, "password")
        # if no response from OBS in 30 seconds EXIT
        await asyncio.wait_for(obsws.connect(), timeout=30)

        logger("Connection established.")

        while True:

            event = await obsws.event()

            logger(str(format(event.type_name)))

            if(format(event.type_name) == "StreamStarting"):
                HitURLToLoadAsset = urllib.request.urlopen("http://10.11.0.159/api/v1/assets/control/asset&amp;b0983c0918b94856900040d9a9e8bdbf").read()
                logger(str(HitURLToLoadAsset))

            if(format(event.type_name) == "StreamStopped"):
                HitURLToLoadAsset = urllib.request.urlopen("http://10.11.0.159/api/v1/assets/control/asset&amp;3b2fb67002364b269d0c2674a628533c").read()
                logger(str(HitURLToLoadAsset))

    except asyncio.TimeoutError:
        logger("OBS NOT RUNNING-- TIMEOUT!")

    except OSError:
        logger("OBS IS NOT RUNNING")

    except:
        logger(str(sys.exc_info()[1]))

    finally:
        await obsws.close()
        logger("Connection terminated.")



loop = asyncio.get_event_loop()  
loop.run_until_complete(main())
loop.close()
</code></pre>
</div>
<span class="comment-copy">Is there any way to reduce this timeout?</span>
<span class="comment-copy">@ChadGray You can use <code>asyncio.wait_for</code> to enforce a timeout for <i>any</i> asyncio task.</span>
<span class="comment-copy">@ChadGray I don't know if you can do it using the <code>with</code> syntax, but if you replace it with <a href="https://github.com/KirillMysnik/obs-ws-rc/blob/master/obswsrc/client.py#L40-L53" rel="nofollow noreferrer">this version</a>, wrapping the <code>await obsws.connect()</code> line in an <code>asyncio.wait_for</code> and catching the timeout error (defined in <code>asyncio</code>, can't remember what it's called) it would work.</span>
<span class="comment-copy">@ChadGray Move the whole <code>async with OBWS(...): ...</code> into a separate <code>async def xxx(): ...</code> and invoke it from <code>main()</code> as <code>await asyncio.wait_for(xxx(), 1)</code>. This will give <code>xxx()</code> 1 second to run, otherwise it will be cancelled and you'll get an <code>asyncio.TimeoutError</code> (which you can catch). See <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for" rel="nofollow noreferrer">the documentation</a> for an example.</span>
<span class="comment-copy">@ChadGray Post it as an answer; don't edit it into your question please.</span>
<span class="comment-copy">You don't need <code>obsws.close()</code> in the <code>except</code> clauses if you have it in <code>finally</code>. <code>finally</code> will execute regardless of whether an exception occurs.</span>
<span class="comment-copy">@user4815162342 Thanks!  I need to start reading more on python.  It is kind of a different language than i am use to.</span>
<span class="comment-copy">Reading is always a good idea, but <code>finally</code> in Python works the same as in other languages, such as Java. :)</span>
