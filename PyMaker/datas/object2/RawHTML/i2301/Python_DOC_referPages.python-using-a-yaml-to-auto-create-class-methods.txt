<div class="post-text" itemprop="text">
<p>I have been trying to create a bunch of similar methods using a <code>YAML</code> configuration file. However, I have been unable to find something online or figure it out.</p>
<p><code>example.yml</code></p>
<pre><code>attributes:
  - a
  - b
  - c
</code></pre>
<p>example class</p>
<pre><code>import yaml

class Test:
    def __init__(self):
        with open('example.yml', 'rb') as f:
            attrib_list = yaml.load(f)

        _list = []
        for name in attrib_list:
            _list.append(self.__setattr__('_' + name, None))

# create similar methods in a loop
         for name, _ in zip(attrib_list, _list):
             @property
             def name(self):  # I know name is a string so cannot be this way but how if this can be done?
                 return _

             @name.setter
             def __set + _(self, v):  # __set + '_' + name as method name
                 pass

             @name.getter
             def __get + _(self):  # __get + '_' + name as method name
                 pass
</code></pre>
<p>Is there efficient way to create many similar methods this way by looping through a configuration file?</p>
<p>Or is there a better way to handle something of this nature?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">property</a> class</p>
<pre><code>class Test:
    def __init__(self):
        with open('102.yaml', 'rb') as f:
            attrib_list = yaml.load(f)

        _list = []
        for name in attrib_list['attributes']:
            _list.append(self.__setattr__('_' + name, None))            
            setattr(self.__class__, name, 
               property( Test.getprop(self,name), Test.setprop(self,name)))

    @staticmethod
    def getprop(self,name):
        def xget(self):
            print("Get {}".format(name))
            return name
        return xget

    @staticmethod
    def setprop(self,name):
        def xset(self,value):
            print("Set {} to {}".format(name,value))
        return xset
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; zz = Test()
&gt;&gt;&gt; zz.a = "hallo"
Set a to hallo
&gt;&gt;&gt; print(zz.a)
Get a
a
</code></pre>
</div>
<span class="comment-copy">Why do you want to create a bunch of pointless properties anyway?</span>
<span class="comment-copy">@juanpa.arrivillaga it is for a custom c++ wrapper someone developed I need to use and their python module that interacts with the c++ needs it. I just made a MWE of the issue at hand skipping over the interaction with another object</span>
<span class="comment-copy">Thanks, I will test it out later and mark it accepted if all goes well.</span>
