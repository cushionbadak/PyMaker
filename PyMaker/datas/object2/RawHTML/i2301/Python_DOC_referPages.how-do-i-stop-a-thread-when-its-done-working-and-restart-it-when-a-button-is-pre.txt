<div class="post-text" itemprop="text">
<p>I have an installer I am creating for a game and as of now there are two buttons. One downloads the game, and one starts the game if it detects the executable. I multi-threaded both buttons so that my GUI will not freeze when I click either button. The problem is, if I click one of the buttons, the other will not work until restarting the application. I need some way for the thread to close after its process is completed so that the thread is open for the other button to work.</p>
<p>Here is what I have so far:</p>
<pre><code># Import Libraries
import requests, os, sys, zipfile, shutil, subprocess, wx, urllib, time
from threading import *

# Define global variables
url = "{ENTER DROPBOX URL HERE}" # The url to the file we are downloading
myEVT_PROGRESS = wx.NewEventType() # Custom Event Type
EVT_PROGRESS = wx.PyEventBinder(myEVT_PROGRESS, 1) # Bind specific events to event handlers
ID_START = wx.NewId()# Button definitions
EVT_RESULT_ID = wx.NewId()# Define notification event for thread completion

# Version Check
def VersionCheck():
    try:
        CurrentVersion = os.listdir("./RFMB6_WINDOWS/")[0] # Checks the version currently downloaded
        VersionCheck = requests.get('https://pastebin.com/raw/yc30uwAh') # Checks the newest version
        NewestVersion = VersionCheck.text # Converts VersionCheck to a string

        if CurrentVersion == NewestVersion:
            message = 'It looks like you have the newest version already.\n Are you sure you want to download?'
            wx.MessageBox(message=message, caption='RFMP GUIntaller | Complete!', style=wx.OK | wx.ICON_INFORMATION)

        else:
            print('\n\nThere is an update available, would you like to install it?')
            pass
    except:
        print("It looks like you don't have RFMP installed yet. Let me fix that for you.")

# Downloads new file
def Download():
    urllib.request.urlretrieve(url, 'RFMP.zip')

# Extracts new file
def Extract():
    zip_ref = zipfile.ZipFile("RFMP.zip", 'r')
    zip_ref.extractall("RFMB6_WINDOWS")
    zip_ref.close()

# Deletes the .zip file but leave the folder
def Clean():
    os.remove("RFMP.zip")

class ProgressEvent(wx.PyCommandEvent):
    """Event to signal that a status or progress changed"""
    def __init__(self, etype, eid, status=None, progress=None):
        """Creates the event object"""
        wx.PyCommandEvent.__init__(self, etype, eid)
        self._status = status       # field to update label
        self._progress = progress   # field to update progress bar

    def GetValue(self):
        """Returns the value from the event.
        @return: the tuple of status and progress
        """
        return (self._status, self._progress)

# Thread class that executes processing
class DLThread(Thread):
    """Worker Thread Class."""
    def __init__(self, notify_window):
        """Init Worker Thread Class."""
        Thread.__init__(self)
        self._notify_window = notify_window
        self.start()

    # This is what runs on a separate thread when you click the download button
    def run(self):
        # This is the code executing in the new thread.
        self.sendEvent('Checking for old files...', 00)
        self.sendEvent('Checking for old files...', 100)
        time.sleep(.5)
        if os.path.exists("RFMB6_WINDOWS"):
            self.sendEvent('Removing old files...', 200)
            subprocess.check_call(('attrib -R ' + 'RFMB6_WINDOWS' + '\\* /S').split())
            shutil.rmtree('RFMB6_WINDOWS')
            time.sleep(.3)
            self.sendEvent('Removed old files.', 300)
        else:
            time.sleep(.3)
            self.sendEvent('No old files found.', 300)
            time.sleep(.3)
            pass
        self.sendEvent('Downloading Package...', 400)
        Download()
        self.sendEvent('Downloading complete.', 600)
        time.sleep(.3)
        self.sendEvent('Extracting...', 650)
        Extract()
        self.sendEvent('Extraction complete.', 900)
        time.sleep(.3)
        self.sendEvent('Cleaning up...', 950)
        Clean()
        time.sleep(.3)
        self.sendEvent('Cleaning complete.', 1000)
        time.sleep(.5)
        done = ("Installation the RFMP Private Alpha has been completed!")
        wx.MessageBox(message=done, caption='RFMP GUIntaller | Complete!', style=wx.OK | wx.ICON_INFORMATION)
        self._notify_window.worker = None

    def sendEvent(self, status=None, progress=None):
        # Send event to main frame, first param (str) is for label, second (int) for the progress bar
        evt = ProgressEvent(myEVT_PROGRESS, -1, status, progress)
        wx.PostEvent(self._notify_window, evt)

class StartAppThread(Thread):
    """Worker Thread Class."""
    def __init__(self, notify_window):
        """Init Worker Thread Class."""
        Thread.__init__(self)
        self._notify_window = notify_window
        # This starts the thread running on creation.
        self.start()

    # This is what runs on a separate thread when you click the download button
    def run(self):
        try:
            subprocess.run('RFMB6_WINDOWS/RFMB6_WINDOWS/RFMB6.exe')
        except:
            error = ("Failed to locate RFMB6.exe. Please don't move any game files after downloading.")
            wx.MessageBox(message=error, caption='RFMP GUIntaller | Error!',
            style=wx.OK | wx.ICON_ERROR)
        self._notify_window.worker = None

# GUI Frame class that spins off the worker thread
class MainFrame(wx.Frame):
    """Class MainFrame."""    

    def __init__(self, parent, id):
        """Create the MainFrame."""
        wx.Frame.__init__(self, parent, id, 'RFMP GUInstaller', 
                          style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER
                          ^ wx.MAXIMIZE_BOX)
        self.SetSize(400, 350)
        self.Centre()

        DLStart = wx.Button(self.bitmap1, ID_START, 'Download RFMP', size=(175,50), pos=(50,260))
        DLStart.Bind(wx.EVT_BUTTON, self.OnButton_DLStart)
        AppStart = wx.Button(self.bitmap1, ID_START, 'Start RFMP', size=(175,50), pos=(50,160))
        AppStart.Bind(wx.EVT_BUTTON, self.OnButton_AppStart)
        self.status = wx.StaticText(self.bitmap1, -1, '', pos=(10,215), style=wx.NO_BORDER)
        self.status.SetBackgroundColour((255,255,0)) # set text back color
        self.gauge = wx.Gauge(self.bitmap1, range = 1000, size = (375, 30), pos=(10,230),
                              style =  wx.GA_HORIZONTAL)

        # And indicate we don't have a worker thread yet
        self.worker = None
        self.Bind(EVT_PROGRESS, self.OnResult) # Bind the custom event to a function

    def OnButton_DLStart(self, event):
        # Trigger the worker thread unless it's already busy
        VersionCheck()
        if not self.worker:
            self.worker = DLThread(self)

    def OnButton_AppStart(self, event):
        if not self.worker:
            self.worker = StartAppThread(self)

    def OnResult(self, event):
        """Our handler for our custom progress event."""
        status, progress = event.GetValue()
        self.status.SetLabel(status)
        if progress:
            self.gauge.SetValue(progress)

class MainApp(wx.App):
    """Class Main App."""
    def OnInit(self):
        """Init Main App."""
        self.frame = MainFrame(None, -1)
        self.frame.Show(True)
        self.SetTopWindow(self.frame)
        return True

# Main Loop
if __name__ == '__main__':
    app = MainApp(0)
    app.MainLoop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is caused by the fact that <code>self.worker</code> has a value.<br/>
You need to reset <code>self.worker</code>.<br/>
Below I have adjusted your code to do that and in doing so I have renamed <code>notify_window</code> to <code>parent</code>, simply because it makes what is going on more obvious and fits with python standards. I'm sure that there are many others ways of achieving this, this is just a simplistic way of achieving it, in this case.</p>
<pre><code>import requests, os, sys, zipfile, shutil, subprocess, wx, urllib, time
from threading import *

class DLThread(Thread):
    """Worker Thread Class."""
    def __init__(self, parent):
        """Init Worker Thread Class."""
        Thread.__init__(self)
        self.parent = parent
        self.stop_download = 0
        self.setDaemon(1)
        self.start()

    def run(self):
        # This is the code executing in the new thread.
        '''
        This is what runs on a separate thread when you click the download button
        '''
        x = 0
        while self.stop_download == 0:
            time.sleep(0.5)
            x +=1
            if x &gt; 20:
                self.stop_download = 1
            print ("Downloading App", x)
        print("Download finished")
        self.parent.worker = None

    def stop(self):
        self.stop_download = 1
        print ("Download Cancelled")

class StartAppThread(Thread):
    """Worker Thread Class."""
    def __init__(self, parent):
        """Init Worker Thread Class."""
        Thread.__init__(self)
        self.parent = parent
        self.stop_app_thread = 0
        self.setDaemon(1)
        self.start()

    def run(self):
        # This is the code executing in the new thread.
        '''
        This is what runs on a separate thread when you click the Start App button.
        '''
        x= 0
        while self.stop_app_thread == 0:
            print ("Game in progress",str(x))
            time.sleep(0.5)
            x +=1
        print ("Game finished")
        self.parent.worker = None

    def stop(self):
        self.stop_app_thread = 1

# GUI Frame class that spins off the worker thread
class MainFrame(wx.Frame):
    """Class MainFrame."""
    #Main Window
    def __init__(self, parent, id):
        """Create the MainFrame."""
        wx.Frame.__init__(self, parent, id, 'RFMP GUInstaller',
                          style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER
                          ^ wx.MAXIMIZE_BOX)
        self.SetSize(400, 350)
        #self.bitmap1 = wx.StaticBitmap(self)
        self.bitmap1 = wx.Panel(self)
        self.Centre()

        # Variables
        myEVT_PROGRESS = wx.NewEventType() # Custom Event Type
        EVT_PROGRESS = wx.PyEventBinder(myEVT_PROGRESS, 1) # Bind specific events to event handlers
        ID_START = wx.NewId()# Button definitions
        EVT_RESULT_ID = wx.NewId()# Define notification event for thread completion

        # Download button
        DLStart = wx.Button(self.bitmap1, ID_START, 'Download', size=(175,50), pos=(50,260))
        DLStart.Bind(wx.EVT_BUTTON, self.OnButton_DLStart)

        # App Start button
        AppStart = wx.Button(self.bitmap1, ID_START, 'Start App', size=(75,50), pos=(50,160))
        AppStart.Bind(wx.EVT_BUTTON, self.OnButton_AppStart)

        # App Stop button
        AppStop = wx.Button(self.bitmap1, ID_START, 'Stop', size=(75,50), pos=(150,160))
        AppStop.Bind(wx.EVT_BUTTON, self.OnButton_AppStop)

        # Progress bar
        self.gauge = wx.Gauge(self.bitmap1, range = 1000, size = (375, 30), pos=(10,230), style =  wx.GA_HORIZONTAL)

        # And indicate we don't have a worker thread yet
        self.worker = None
        self.Bind(EVT_PROGRESS, self.OnResult) # Bind the custom event to a function

    def OnButton_DLStart(self, event):
        # Trigger the worker thread unless it's already busy
        if not self.worker:
            self.worker = DLThread(self)

    def OnButton_AppStart(self, event):
        if not self.worker:
            self.worker = StartAppThread(self)

    def OnButton_AppStop(self, event):
        if self.worker:
           self.worker.stop()
        print ("App Stop command")

    def OnResult(self, event):
        """Our handler for our custom progress event."""
        status, progress = event.GetValue()
        self.status.SetLabel(status)
        if progress:
            self.gauge.SetValue(progress)

class MainApp(wx.App):
    """Class Main App."""
    def OnInit(self):
        """Init Main App."""
        self.frame = MainFrame(None, -1)
        self.frame.Show(True)
        self.SetTopWindow(self.frame)
        return True

# Main Loop
if __name__ == '__main__':
    app = MainApp(0)
    app.MainLoop()
</code></pre>
</div>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/threading.html#condition-objects" rel="nofollow noreferrer">threading.html#condition-objects</a></span>
<span class="comment-copy">I have read quite a bit of that but don't see a solution to my problem.</span>
<span class="comment-copy">I'm misleaded from your Question Title - "... done working and restart ..." -, your Threads are simple <b>one Task Threads</b>. Thread conditions are for: <b>One Thread is waiting for the Result of another</b>.</span>
<span class="comment-copy">I was able to fix it with Rolf of Saxony's answer. He was not, 'misleaded', as you would put it, so I am not sure what you mean. Just because it was so simple does not mean I knew the answer. Show some consideration for people who are newer to code could ya?</span>
<span class="comment-copy">This solution worked for my start app button but not my download button. So with your solution I can click the start app button and I can repeatedly click it, but after I click the download button the app is basically useless. Even the stop button you added stopped working after I clicked the download button.  P.S. This worked fie with your example but once I add my code its breaks.</span>
<span class="comment-copy">"This worked fine with your example" - I don't know what your code is doing!</span>
<span class="comment-copy">My code is too long to put in the comments so I will update my question with the code I am using currently.</span>
<span class="comment-copy">Some of the code wont work right for you because you are downloading a different file. I can't let you download the file I am using because it is a private alpha that I am not allowed to share. (and I can't put URL's on the website anyway.) Feel free to delete unnecessary things but I can't guarantee the code will work when I add them back.</span>
<span class="comment-copy">in your thread you are using <code>self.worker = None</code> that should be <code>self._notify_window.worker = None</code>. You will note that I did mention that my code renamed that to <code>self.parent</code> to make things more obvious, as to what is what.</span>
