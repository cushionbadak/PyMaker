<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14529523/python-split-for-lists">Python split for lists</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I have a list similar to the following one:</p>
<pre><code>['2019','Melbourne','region1','suburb1','\n', '2018','region1','Melbourne','\n']
</code></pre>
<p>I want to break(split) and store the information of the list based on '\n'. It means I want to create following strings from the above list:</p>
<pre><code>string1='2019, Melbourne, region1, suburb1'
string2='2018, region1, Melbourne'
</code></pre>
<p>I know how to do that using a simple for loop and playing around indices but I wonder if someone could assist me with doing the mentioned task in a more professional way. Because playing around the indices makes my code a bit complex and unreadable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get a list of the desired strings, using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> with an appropriate key function to chunk the list and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> to turn the chunks into strings:</p>
<pre><code>from itertools import groupby

l = ['2019','Melbourne','region1','suburb1','\n', '2018','region1','Melbourne','\n']

[', '.join(g) for k, g in groupby(l, key=lambda s: s != '\n') if k]
# ['2019, Melbourne, region1, suburb1', '2018, region1, Melbourne']
</code></pre>
<p>Note that <code>groupby</code> returns a lazy iterator producing equally lazy groups. So this does not build any unnecessary intermediate in-memory lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this! using <code>re</code></p>
<pre><code>import re
l = ['2019','Melbourne','region1','suburb1','\n', '2018','region1','Melbourne','\n']
res = re.split("[\r\n]+",' '.join(l))[:-1]
string1 = res[0].strip().replace(' ',', ')
string2 = res[1].strip().replace(' ',', ')

# string1 --&gt; '2019, Melbourne, region1, suburb1'
# string2 --&gt; '2018, region1, Melbourne'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One possible solution would be to concatenate the given list into a string using join() and then use split on the string to split in to list. Following is the code:</p>
<pre><code>test=['2019','Melbourne','region1','suburb1','\n', '2018','region1','Melbourne','\n']
test_string=",".join(test)

sep_list= test_string.split("\n")
</code></pre>
<p>You will get a list of strings separated by "\n"</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>split()</code>,but i get an unexpected result so i use regex</p>
<pre><code>import re
l = ['2019','Melbourne','region1','suburb1','\n', '2018','region1','Melbourne','\n']
string1 , string2 = re.findall("(?!,)([^\n]+)(?=,)" ,",".join(l))
print(string1,string2)
</code></pre>
<ol>
<li>(?!,) : use to match string began without <code>,</code> -&gt; match but not contain in result</li>
<li>([^\n]+) : match str until <code>\n</code></li>
<li>(?=,) : match str which end with <code>,</code> -&gt; match but not contain in result</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I propose solution like this:</p>
<pre><code>listin=['2019','Melbourne','region1','suburb1','\n', '2018','region1','Melbourne','\n'];
listsout=[];sublist=[];
for val in listin:
    if val.__contains__('\n')==False:
        sublist.append(val);
    else:
        listsout.append([i for i in sublist]);
        sublist = [];
# --------------------------------------------
strings = [', '.join(sublist) for sublist in listsout];
</code></pre>
</div>
<span class="comment-copy">convert it into string then split it accordingly.</span>
<span class="comment-copy">@AkshayNevrekar That's like taking a nearly complete puzzle, mixing it up, and starting all over again.</span>
<span class="comment-copy"><code>','</code> is not the connector wanted by the OP (that is <code>', '</code>). Also, you will have to remove (strip) spurious <code>','</code> from the tokens returned by your <code>split</code>.</span>
<span class="comment-copy">You're right. I just ran the code and noticed the extra ','. Thanks for pointing it out!</span>
<span class="comment-copy">"I know how to do that using simple for loop and playing around indices but I [want] a more professional way."</span>
