<div class="post-text" itemprop="text">
<p>I am currently loading the python logger like this:</p>
<pre><code>import logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("myprogram")
</code></pre>
<p>and using it e. g. like this:</p>
<pre><code>[...]
except FileNotFoundError:
    log.exception("could not open configuration file")
    sys.exit(1)
</code></pre>
<p>However, this will always print the traceback along with the error message:</p>
<pre><code>ERROR:myprogram:could not open configuration file
Traceback (most recent call last):
[...]
FileNotFoundError: [Errno 2] No such file or directory: 
'not/existing/file.yml'
</code></pre>
<p>I do not want the traceback in the normal error output. Instead it should only print my error message and the exception info ("No such file...").</p>
<p>What is the recommended way of showing the traceback only when the loglevel is set to <code>logging.DEBUG</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a combination of <code>exc_info</code> and <a href="https://docs.python.org/3/library/logging.html#logging.Logger.getEffectiveLevel" rel="nofollow noreferrer"><code>.getEffectiveLevel</code></a>:</p>
<pre><code>try:
    ...
except FileNotFoundError as ex:
   logger.error(ex, exc_info=log.getEffectiveLevel() == logging.DEBUG)
</code></pre>
<p>This way, the exception itself (<code>FileNotFoundError</code>) is always logged, but the stacktrace will only be logged if log level is debug.</p>
</div>
<div class="post-text" itemprop="text">
<p>Log the exception at <code>DEBUG</code> level instead and set <code>exc_info=True</code>. <code>logger.exception()</code> is essentially a <code>logger.error(..., exc_info=True)</code> call, but you can log exception tracebacks at any level:</p>
<pre><code>log.debug("could not open configuration file", exc_info=True)
</code></pre>
<p>It's the <code>exc_info</code> option that's important; from the <a href="https://docs.python.org/3/library/logging.html#logging.Logger.debug" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>If <code>exc_info</code> does not evaluate as false, it causes exception information to be added to the logging message. If an exception tuple (in the format returned by <code>sys.exc_info()</code>) or an exception instance is provided, it is used; otherwise, <code>sys.exc_info()</code> is called to get the exception information.</p>
</blockquote>
<p>You perhaps want to use printing (to stdout or stderr) to communicate with the end-user:</p>
<pre><code>except FileNotFoundError as e:
    log.debug("could not open configuration file", exc_info=True)
    print("Could not open configuration file:", e.strerror, file=sys.stderr)
    sys.exit(1)
</code></pre>
<p>I included the <a href="https://docs.python.org/3/library/exceptions.html#OSError.strerror" rel="nofollow noreferrer">system error message</a> in the print output without the <code>FileNotFoundError(...)</code> representation.</p>
<p>If you use a command-line argument parser like <code>argparse</code> or <code>click</code>, then do use their user feedback API (which usually includes exiting too).</p>
<p>You <em>can</em> make the logging module produce user-level messages too, but if you want a single logger call to produce debug-friendly tracebacks in a file and user-friendly output on a console, you'd have to configure separate handlers for these use-cases with the console handler using a custom <a href="https://docs.python.org/3/library/logging.html#formatter-objects" rel="nofollow noreferrer"><code>Formatter()</code> class</a> to <a href="https://docs.python.org/3/library/logging.html#logging.Formatter.formatException" rel="nofollow noreferrer">override the <code>formatException()</code> method</a> to alter how exceptions are shown. It's just much easier and clearer to separate logging and end-user communication.</p>
</div>
<span class="comment-copy">I ended up defining a helper function like this: <code>def err(*args, **kwargs): log.error(*args, exc_info=log.getEffectiveLevel() == logging.DEBUG, **kwargs)</code>, does exactly what I want, thanks!</span>
<span class="comment-copy">ok, I was under the wrong impression that the logging module would take exactly this burden off the programmer. I indeed use argparse, which I should use here for handling this particualr error, but I have more places in the program where I need this. Thanks a lot!</span>
<span class="comment-copy">@SebastianStark: logging can, sort-of, take care of this, but then you'd have to configure an extra handler that shows only end-user messages, and use a custom <code>Formatter</code> subclass to alter how exception information is included in the output. I usually just use what I outlined in my answer instead.</span>
<span class="comment-copy">In this case it is a daemon and I want everything always in the log. Although I think what you propose is the right way usually, I prefer something simpler for this.</span>
