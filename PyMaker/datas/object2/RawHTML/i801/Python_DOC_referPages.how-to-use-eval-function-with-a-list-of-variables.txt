<div class="post-text" itemprop="text">
<p>I have a list of functions as strings:</p>
<pre><code>["y + x + 3", "x**2 + y**2 - 17"]  # 2 functions in list
</code></pre>
<p>I have a list of <code>Sympy Symbol</code> objects (basically variables) whos <code>.name</code> attribute cooresponds to the variables names in the function strings:</p>
<pre><code>[Symbol(x), Symbol(y)]
# list element 0's .name attribute is "x" 
</code></pre>
<p>I found that Python have a neat function called <code>eval()</code> which can evaluate strings, for example:</p>
<pre><code>x = 1
eval("x + 3") # Result should be 4
</code></pre>
<p>Basically this is what I want to do with my functions strings. However, since this is a dynamic implementation I don't have variables defined on a line above <code>eval()</code> in my program, they are in a list instead. For example, in the example above x is defined as 1, so then the <code>eval()</code> function can use it. </p>
<p>But I have my variables in a list, not defined as a variable in the scope of my function. <strong>How could I use the <code>eval()</code> function and utilize my list of variables?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><code>eval</code> takes local variables as third argument(<a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">reference</a>),
so you can do this:</p>
<pre><code>from sympy import Symbol
zs = [Symbol('x'), Symbol('y')]
eval('x+y', None, dict([z.name, z] for z in zs))
</code></pre>
<p>However, maybe you should use <a href="https://docs.sympy.org/latest/modules/parsing.html" rel="nofollow noreferrer">parse_expr</a> which is part of SymPy.</p>
<pre><code>from sympy import Symbol
from sympy.parsing.sympy_parser import parse_expr
zs = [Symbol('x'), Symbol('y')]
parse_expr('x+y', local_dict=dict([z.name, z] for z in zs))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this, and you can wrap following codes of replacing and eval in your symbol class（through inheriate）.</p>
<pre><code>import ast

x = 5
y = 6

function_str = "y + x + 3"
function_str = function_str.replace('x', '{x}')
function_str = function_str.replace('y', '{y}')

print(ast.literal_eval(function_str.format(x=x, y=y)))
# 14
</code></pre>
<p>Always remember that using eval is "EVAL" 'cause you should not trust the string passed in, listeral_eval is safer.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something along these lines:</p>
<pre><code>import math

symbols = {'sqrt': math.sqrt, 'x': 5, 'y': 6}

func_strings = ["y + x + 3", "x**2 + y**2 - 17", "sqrt(1764)"]

for expression in func_strings:
    result = eval(expression, {'__builtins__': None}, symbols)
    print('{} -&gt; {}'.format(expression, result))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>y + x + 3 -&gt; 14
x**2 + y**2 - 17 -&gt; 44
sqrt(1764) -&gt; 42.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look at full definition of <a href="https://python-reference.readthedocs.io/en/latest/docs/functions/eval.html" rel="nofollow noreferrer"><code>eval (expression[, globals[, locals]])</code></a></p>
<p>You can substitute <code>globals</code>/<code>locals</code> on <code>eval</code>.</p>
<p>E.g.</p>
<pre><code>eval("x + 3", {"x":1}) # Result should be 4
</code></pre>
<blockquote>
<p>How could I use the eval() function and utilize my list of variables?</p>
</blockquote>
<p>You have 2 namespaces and you can do everything you want with them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Best way to do it in my opinion would be to add all of the variables to <code>locals</code>. Then you can reference them by name in <code>eval</code>. Example:</p>
<pre><code>symbols = [Symbol(x), Symbol(y)]
locals().update({symbol.name:symbol for symbol in symbols})

eval("x+y") # Should return the value of x+y
</code></pre>
</div>
<span class="comment-copy">I'll take a look at the parse_expr method. Right now I have it working with eval() with your advice. But maybe the other one it better.</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">documentation</a> clearly states that the dictionary <code>locals()</code> returns should no be updated because doing so is unreliable.</span>
