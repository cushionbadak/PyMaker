<div class="post-text" itemprop="text">
<p>If I am to count the number of times vowels are used in a given text, how do I make a code skim through the text to identify all the vowels as items from a list and yet add the counts of each vowel to get a total vowel count, where the given text might incluse repeated vowels? (said recursive because I need to add new nth y to (n-1)th y.)</p>
<p>I'm a beginner as is obvious from the below code, I do not have any knowledge of a library of functions but the purpose of the exercise(a challenge in a mobile app), I believe, is to  come up with an answer just with a basic knowledge of lists, strings, loops etc. </p>
<pre><code>vowels=["a","A","e","E","i","I","o","O","u","U"]
exprs=input("Please type an expression to get a count of the vowels it has: ")

Ind= len(vowels)
eL=list(exprs)


for i in range(Ind):
    x=vowels[i]
    if x in exprs:   
        y=eL.count(x)        
        print("\n\nThe number of times that vowel",x,"occurs in", exprs, "is",y)
        print("The vowel",x,"occurs in the given expression at index",str(eL.index(x)) + ".")
</code></pre>
<p>I cannot find a way to recursively add y values (tried y=0 outside the loop and then y=y+eL.count(x) and some other ideas to no avail.)</p>
<p>Then I searched about it and bumped into apparently a rule of thumb that "dynamic naming" is never good for languages, HLL, I guess?</p>
<p>I had some other ideas but I think I bump into this same problem everytime. I am not even sure these have to do with the same thing. Seems like I created my own paradox by this code. Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to count how many times every letter in the <code>vowels</code> list appear in a string <code>txt</code>:</p>
<pre><code>vowels = ["a","A","e","E","i","I","o","O","u","U"]
txt = 'hello world abcdef'

frequency = {}
total = 0
for i in txt:
    if i in vowels:
        frequency[i] = frequency.get(i, 0) + 1
        total += 1

print(frequency)
print('total:', total)
</code></pre>
<p>This will print the following:</p>
<pre><code>{'e': 2, 'o': 2, 'a': 1}
total: 5
</code></pre>
<p>Meaning 'e' appears twice and so on, and the total number of vowels present</p>
</div>
<span class="comment-copy"><code>recursive</code> is when a function calls itself. you have no functions here</span>
<span class="comment-copy">You are right, BanishedBot, I used the mathematical term to be able to explain my problem briefly in the question title. I do not know how else to express it, it is also a math term for defining summation in series where a term gets to be defined by the previous term and that with the one before it. If you could suggest a non misleading, better title I would appreciate it. Thank you by the way.</span>
<span class="comment-copy">It isn't clear what your problem is. Your code looks like it works - does it? If it doesn't, how is it misbehaving?</span>
<span class="comment-copy">What was wrong with *tried y=0 outside the loop and then y=y+eL.count(x) *?  Can you explain how it differed from the desired behavior, and show the actual code you used?</span>
<span class="comment-copy">@wwii: If the word is e.g. "halloween" I want the code to be able to output the total number of vowels, as well as those for each vowel. So it would be 4, but with this code I cannot do it. It seems I have to be able to count the count itself.</span>
<span class="comment-copy">Alright... done!</span>
<span class="comment-copy">Alternatively, <code>frequency = collections.Counter(filter(vowels.__contains__, txt))</code></span>
<span class="comment-copy">Consider making <code>vowels</code> a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">set</a> so using <code>in</code> is O(1) rather than O(n) where n is the length of <code>vowels</code>.</span>
<span class="comment-copy">@shash678 true, just trying to introduce as little change to what he already has and keep it basic</span>
<span class="comment-copy">@BanishedBot Algood +1, nice explanation.</span>
