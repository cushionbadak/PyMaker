<div class="post-text" itemprop="text">
<p>How do I force Python's print function to output to the screen?</p>
<p><sub>This is not a duplicate of <a href="https://stackoverflow.com/questions/107705/python-output-buffering">Disable output buffering</a> - the linked question is attempting unbuffered output, while this is more general. The top answers in that question are too powerful or involved for this one (they're not good answers for this), and this question can be found on Google by a relative newbie.</sub></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
sys.stdout.flush()
</code></pre>
<p>Print by default prints to <code>sys.stdout</code>.</p>
<p>References:</p>
<ul>
<li><a href="http://docs.python.org/reference/simple_stmts.html#the-print-statement" rel="noreferrer">http://docs.python.org/reference/simple_stmts.html#the-print-statement</a></li>
<li><a href="http://docs.python.org/library/sys.html" rel="noreferrer">http://docs.python.org/library/sys.html</a></li>
<li><a href="http://docs.python.org/library/stdtypes.html#file-objects" rel="noreferrer">http://docs.python.org/library/stdtypes.html#file-objects</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Running <code>python -h</code>, I see a <em>command line option</em>:</p>
<blockquote>
<p>-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
           see man page for details on internal buffering relating to '-u'</p>
</blockquote>
<p>Here is the <a href="http://docs.python.org/using/cmdline.html#cmdoption-u" rel="noreferrer">relevant doc</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.3, you can force the normal <code>print()</code> function to flush without the need to use <code>sys.stdout.flush()</code>; just set the "flush" keyword argument to true.  From <a href="https://docs.python.org/3.3/library/functions.html#print">the documentation</a>:</p>
<blockquote>
<p><strong>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)</strong></p>
<p>Print objects to the stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments.</p>
<p>All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end.</p>
<p>The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. <strong>Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed.</strong></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>How to flush output of Python print?</h1>
</blockquote>
<p>I suggest five ways of doing this:</p>
<ul>
<li>In Python 3, call <code>print(..., flush=True)</code> (the flush argument is not available in Python 2's print function, and there is no analogue for the print statement).</li>
<li>Call <code>file.flush()</code> on the output file (we can wrap python 2's print function to do this), for example, <code>sys.stdout</code></li>
<li>apply this to every print function call in the module with a partial function,<br/>
<code>print = partial(print, flush=True)</code> applied to the module global.</li>
<li>apply this to the process with a flag (<code>-u</code>) passed to the interpreter command</li>
<li>apply this to every python process in your environment with <code>PYTHONUNBUFFERED=TRUE</code> (and unset the variable to undo this).</li>
</ul>
<h2>Python 3.3+</h2>
<p>Using Python 3.3 or higher, you can just provide <code>flush=True</code> as a keyword argument to the <code>print</code> function: </p>
<pre><code>print('foo', flush=True) 
</code></pre>
<h2>Python 2 (or &lt; 3.3)</h2>
<p>They did not backport the <code>flush</code> argument to Python 2.7 So if you're using Python 2 (or less than 3.3), and want code that's compatible with both 2 and 3, may I suggest the following compatibility code. (Note the <code>__future__</code> import must be at/very "near the <a href="https://docs.python.org/2/reference/simple_stmts.html#future-statements" rel="noreferrer">top of your module</a>"):</p>
<pre><code>from __future__ import print_function
import sys

if sys.version_info[:2] &lt; (3, 3):
    old_print = print
    def print(*args, **kwargs):
        flush = kwargs.pop('flush', False)
        old_print(*args, **kwargs)
        if flush:
            file = kwargs.get('file', sys.stdout)
            # Why might file=None? IDK, but it works for print(i, file=None)
            file.flush() if file is not None else sys.stdout.flush()
</code></pre>
<p>The above compatibility code will cover most uses, but for a much more thorough treatment, <a href="https://bitbucket.org/gutworth/six/src/3deee854df8a5f1cc04dd721c18dee2128584f8c/six.py?at=default#six.py-721" rel="noreferrer">see the <code>six</code> module</a>.</p>
<p>Alternatively, you can just call <code>file.flush()</code> after printing, for example, with the print statement in Python 2:</p>
<pre><code>import sys
print 'delayed output'
sys.stdout.flush()
</code></pre>
<h2>Changing the default in one module to <code>flush=True</code></h2>
<p>You can change the default for the print function by using functools.partial on the global scope of a module:</p>
<pre><code>import functools
print = functools.partial(print, flush=True)
</code></pre>
<p>if you look at our new partial function, at least in Python 3:</p>
<pre><code>&gt;&gt;&gt; print = functools.partial(print, flush=True)
&gt;&gt;&gt; print
functools.partial(&lt;built-in function print&gt;, flush=True)
</code></pre>
<p>We can see it works just like normal:</p>
<pre><code>&gt;&gt;&gt; print('foo')
foo
</code></pre>
<p>And we can actually override the new default:</p>
<pre><code>&gt;&gt;&gt; print('foo', flush=False)
foo
</code></pre>
<p>Note again, this only changes the current global scope, because the print name on the current global scope will overshadow the builtin <code>print</code> function (or dereference the compatibility function, if using Python 2, in that current global scope).</p>
<p>If you want to do this inside a function instead of on a module's global scope, you should give it a different name, e.g.:</p>
<pre><code>def foo():
    printf = functools.partial(print, flush=True)
    printf('print stuff like this')
</code></pre>
<p>If you declare it a global in a function, you're changing it on the module's global namespace, so you should just put it in the global namespace, unless that specific behavior is exactly what you want.</p>
<h2>Changing the default for the process</h2>
<p>I think the best option here is to use the <code>-u</code> flag to get unbuffered output.</p>
<pre><code>$ python -u script.py
</code></pre>
<p>or  </p>
<pre><code>$ python -um package.module
</code></pre>
<p>From the <a href="https://docs.python.org/2/using/cmdline.html#cmdoption-u" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>Force stdin, stdout and stderr to be totally unbuffered. On systems where it matters, also put stdin, stdout and stderr in binary mode.</p>
<p>Note that there is internal buffering in file.readlines() and File Objects (for line in sys.stdin) which is not influenced by this option. To work around this, you will want to use file.readline() inside a while 1: loop.</p>
</blockquote>
<h2>Changing the default for the shell operating environment</h2>
<p>You can get this behavior for all python processes in the environment or environments that inherit from the environment if you set the environment variable to a nonempty string:</p>
<p>e.g., in Linux or OSX:</p>
<pre><code>$ export PYTHONUNBUFFERED=TRUE
</code></pre>
<p>or Windows:</p>
<pre><code>C:\SET PYTHONUNBUFFERED=TRUE
</code></pre>
<p>from the <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONUNBUFFERED" rel="noreferrer">docs</a>:</p>
<blockquote>
<p><strong>PYTHONUNBUFFERED</strong></p>
<p>If this is set to a non-empty string it is equivalent to specifying the -u option.</p>
</blockquote>
<hr/>
<h2>Addendum</h2>
<p>Here's the help on the print function from Python 2.7.12 - note that there is <em>no</em> <code>flush</code> argument:</p>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; help(print)
print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file: a file-like object (stream); defaults to the current sys.stdout.
    sep:  string inserted between values, default a space.
    end:  string appended after the last value, default a newline.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also as suggested in <a href="http://algorithmicallyrandom.blogspot.com/2009/10/python-tips-and-tricks-flushing-stdout.html">this blog</a> one can reopen <code>sys.stdout</code> in unbuffered mode:</p>
<pre><code>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
</code></pre>
<p>Each <code>stdout.write</code> and <code>print</code> operation will be automatically flushed afterwards.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.x the <code>print()</code> function has been extended:</p>
<pre><code>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
</code></pre>
<p>So, you can just do:</p>
<pre><code>print("Visiting toilet", flush=True)
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3.3/library/functions.html?highlight=print#print" rel="noreferrer">Python Docs Entry</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>-u</code> command-line switch works, but it is a little bit clumsy. It would mean that the program would potentially behave incorrectly if the user invoked the script without the <code>-u</code> option.  I usually use a custom <code>stdout</code>, like this:</p>
<pre><code>class flushfile(object):
  def __init__(self, f):
    self.f = f

  def write(self, x):
    self.f.write(x)
    self.f.flush()

import sys
sys.stdout = flushfile(sys.stdout)
</code></pre>
<p>... Now all your <code>print</code> calls (which use <code>sys.stdout</code> implicitly), will be automatically <code>flush</code>ed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not try using an unbuffered file?</p>
<pre><code>f = open('xyz.log', 'a', 0)
</code></pre>
<p>OR</p>
<pre><code>sys.stdout = open('out.log', 'a', 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
print 'This will be output immediately.'
sys.stdout.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dan's idea doesn't quite work:</p>
<pre><code>#!/usr/bin/env python
class flushfile(file):
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()

import sys
sys.stdout = flushfile(sys.stdout)

print "foo"
</code></pre>
<p>The result:</p>
<pre><code>Traceback (most recent call last):
  File "./passpersist.py", line 12, in &lt;module&gt;
    print "foo"
ValueError: I/O operation on closed file
</code></pre>
<p>I believe the problem is that it inherits from the file class, which actually isn't necessary. According to the docs for sys.stdout:</p>
<blockquote>
<p>stdout and stderr needn’t be built-in
  file objects: any object is acceptable
  as long as it has a write() method
  that takes a string argument.</p>
</blockquote>
<p>so changing</p>
<pre><code>class flushfile(file):
</code></pre>
<p>to</p>
<pre><code>class flushfile(object):
</code></pre>
<p>makes it work just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my version, which provides writelines() and fileno(), too:</p>
<pre><code>class FlushFile(object):
    def __init__(self, fd):
        self.fd = fd

    def write(self, x):
        ret = self.fd.write(x)
        self.fd.flush()
        return ret

    def writelines(self, lines):
        ret = self.writelines(lines)
        self.fd.flush()
        return ret

    def flush(self):
        return self.fd.flush

    def close(self):
        return self.fd.close()

    def fileno(self):
        return self.fd.fileno()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Loved Dan's solution! For python3 do:</p>
<pre><code>import io,sys
class flushfile:
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()
sys.stdout = flushfile(sys.stdout)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 you can overwrite print function with default set to <code>flush = True</code> </p>
<pre class="lang-py prettyprint-override"><code>def print(*objects, sep=' ', end='\n', file=sys.stdout, flush=True):
    __builtins__.print(*objects, sep=sep, end=end, file=file, flush=flush)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I did it like this in Python 3.4:</p>
<pre><code>'''To write to screen in real-time'''
message = lambda x: print(x, flush=True, end="")
message('I am flushing out now...')
</code></pre>
</div>
<span class="comment-copy">Since python 3.3. there is an alternaive approach - print has argument to flush now.</span>
<span class="comment-copy">Comment from @fredmb who doesn't have the rep to comment: "The references in [this] answer seem to be python 2 documentation specific. The python 3 references are: <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-file-object</a> <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">docs.python.org/3/library/io.html</a>"</span>
<span class="comment-copy">None of the three links from the answer contain 'flush'.</span>
<span class="comment-copy">On Ubuntu 12.04 in python 2.7 this gives me <code>UnsupportedOperation: IOStream has no fileno.</code></span>
<span class="comment-copy">Whoops, Python 3 found out. It won't let me execute this piece of code!</span>
<span class="comment-copy">I'm confused by this idiom.  After you do this, aren't there now two File-like objects (the original sys.stdout and the new sys.stdout) that both think they "own" the fileno?  That's bad, right?</span>
<span class="comment-copy">I like the last example: very pythonic!</span>
<span class="comment-copy">I recommend not inheriting from file and then delegating to stdout by adding. <code>def __getattr__(self,name): return object.__getattribute__(self.f, name)</code></span>
<span class="comment-copy">Without the changes suggested by the comment by @diedthreetimes, I get "ValueError: I/O operation on closed file"</span>
<span class="comment-copy">He does not want ot create an unbuffered file; he wants to make the existing stdout (redirected to the console, the terminal or whatever: this must not be changed) unbuffered.</span>
<span class="comment-copy">No vote because this IS @Dan's solution... (You should rather comment Dan's post instead of copying his solution)</span>
<span class="comment-copy">Superior solution. And it works. Tested on Python 3.4.0.  With the other versions, which derive from <code>file</code>, I get an error.  There is no <code>file</code> class.</span>
<span class="comment-copy">Inheriting from io.TextIOWrapper is useless. Even incorrect! (@Dan's solution without inheriting from <code>file</code> is correct -&gt; @Kamil Kisiel)</span>
<span class="comment-copy">Didn't even think about not having to inherit, thanks!</span>
<span class="comment-copy">this answer seems a little light given all the other high quality responses. you may want to add a little more to it.</span>
