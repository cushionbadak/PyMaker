<div class="post-text" itemprop="text">
<p>With the <strong>typing</strong> module, it's possible to specify arbitrary nested types, like <code>List[str]</code> or <code>Dict[str, Dict[str, float]]</code>. Is there a way to determine whether the type of an object matches such a type? Something along the lines of</p>
<pre><code>&gt;&gt;&gt; from typing import List
&gt;&gt;&gt; isinstance(['a', 'b'], List[str])
# Traceback (most recent call last):
#   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
#   File "/home/cbieganek/anaconda3/lib/python3.6/typing.py", line 1162, in __instancecheck__
#     return issubclass(instance.__class__, self)
#   File "/home/cbieganek/anaconda3/lib/python3.6/typing.py", line 1148, in __subclasscheck__
#     raise TypeError("Parameterized generics cannot be used with class "
# TypeError: Parameterized generics cannot be used with class or instance checks
</code></pre>
<p>I didn't really expect <code>isinstance()</code> to work for this, but I'm wondering if there is some other accepted way of doing this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generics appeared in python as a part of type <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">hinting</a>. So convenient way to use <em>List[str]</em> is a type hint for variable or function parameter:</p>
<pre><code>my_list: List[str] = ['1', '2']
</code></pre>
<p>or</p>
<pre><code>def do_something(strings: List[str])-&gt;None:
    ...
</code></pre>
<p>Most modern IDEs like PyCharm or Athom has plugins which are support static type check for python code, also look at <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a>. If strict run time type check is necessary, it's possible to iterate over list and check each item type, but it is not a good design.</p>
</div>
<span class="comment-copy">No, they are type hints. Third-party static time type checkers may provide a way to do this, but note, that is based on the types you've annotated. If you want a runtime check, you have to implement it yourself.</span>
