<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6930982/how-to-use-a-variable-inside-a-regular-expression">How to use a variable inside a regular expression?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I use <code>re</code> to find a word on a file and I stored it as <code>lattice_type</code> 
Now I want to use the word stored on <code>lattice_type</code> to make another regex </p>
<p>I tried using the name of the variable on this way </p>
<pre><code>pnt_grp=re.match(r'+ lattice_type + (.*?) .*',line, re.M|re.I)
</code></pre>
<p>Here I look for the regex <code>lattice_type=</code> and store the <code>group(1)</code> in <code>lattice_type</code> </p>
<pre><code>latt=open(cell_file,"r")
    for types in latt:
        line = types
        latt_type = re.match(r'lattice_type = (.*)', line, re.M|re.I)
        if latt_type:
            lattice_type=latt_type.group(1)
</code></pre>
<p>Here is where I want to use the variable containing the word to find it on another file, but I got problems</p>
<pre><code>pg=open(parameters,"r")
    for lines in pg:
        line=lines
        pnt_grp=re.match(r'+ lattice_type + (.*?) .*',line, re.M|re.I)
        if pnt_grp:
            print(pnt_grp(1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>r</code> prefix is only needed when defining a string with a lot of backslashes, because both regex and Python string syntax attach meaning to backslashes. <code>r'..'</code> is just an alternative syntax that makes it <em>easier</em> to work with regex patterns. You don't <em>have</em> to use <code>r'..'</code> raw string literals. See <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow noreferrer"><em>The backslash plague</em></a> in the Python regex howto for more information.</p>
<p>All that means that you certainly don't need to use the <code>r</code> prefix when already have a string value. A regex pattern is <em>just a string value</em>, and you can just use normal string formatting or concatenation techniques:</p>
<pre><code>pnt_grp = re.match(lattice_type + '(.*?) .*', line, re.M|re.I)
</code></pre>
<p>I didn't use <code>r</code> in the string literal above, because there are no <code>\</code> backslashes in the expression there to cause issues.</p>
<p>You <em>may</em> need to use the <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape()</code> function</a> on your <code>lattice_type</code> value, if there is a possibility of that value containing regular expression meta-characters such as <code>.</code> or <code>?</code> or <code>[</code>, etc. <code>re.escape()</code> escapes such metacharacters so that only <em>literal text</em> is matched:</p>
<pre><code>pnt_grp = re.match(re.escape(lattice_type) + '(.*?) .*', line, re.M|re.I)
</code></pre>
</div>
<span class="comment-copy">I make the change but I obtain this:             at                                                                               '_sre.SRE_Match' object is not callable   because lattice_type is the match of tha later searching. How can I fix that?</span>
<span class="comment-copy">@JorgeCastro: if <code>lattice_type</code> is a match object, then use a <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer">match object method</a> to get a string. Such as <code>lattice_type.group()</code>.</span>
