<div class="post-text" itemprop="text">
<p>I needed to create a list of lists in Python, so I typed the following:  </p>
<pre><code>myList = [[1] * 4] * 3
</code></pre>
<p>The list looked like this:  </p>
<pre><code>[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]  
</code></pre>
<p>Then I changed one of the innermost values:  </p>
<pre><code>myList[0][0] = 5
</code></pre>
<p>Now my list looks like this:  </p>
<pre><code>[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]  
</code></pre>
<p>which is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it.</p>
<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>
<pre><code>[[1]*4 for n in range(3)]
</code></pre>
<p>which will reevaluate <code>[1]*4</code> each time instead of evaluating it once and making 3 references to 1 list.</p>
<hr/>
<p>You might wonder why <code>*</code> can't make independent objects the way the list comprehension does. That's because the multiplication operator <code>*</code> operates on objects, without seeing expressions. When you use <code>*</code> to multiply <code>[[1] * 4]</code> by 3, <code>*</code> only sees the 1-element list <code>[[1] * 4]</code> evaluates to, not the <code>[[1] * 4</code> expression text. <code>*</code> has no idea how to make copies of that element, no idea how to reevaluate <code>[[1] * 4]</code>, and no idea you even want copies, and in general, there might not even be a way to copy the element.</p>
<p>The only option <code>*</code> has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</p>
<p>In contrast, a list comprehension reevaluates the element expression on every iteration. <code>[[1] * 4 for n in range(3)]</code> reevaluates <code>[1] * 4</code> every time for the same reason <code>[x**2 for x in range(3)]</code> reevaluates <code>x**2</code> every time. Every evaluation of <code>[1] * 4</code> generates a new list, so the list comprehension does what you wanted.</p>
<p>Incidentally, <code>[1] * 4</code> also doesn't copy the elements of <code>[1]</code>, but that doesn't matter, since integers are immutable. You can't do something like <code>1.value = 2</code> and turn a 1 into a 2.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>size = 3
matrix_surprise = [[0] * size] * size
matrix = [[0]*size for i in range(size)]
</code></pre>
<p><img alt="Frames and Objects" src="https://i.stack.imgur.com/uHuck.png"/></p>
<p><a href="http://pythontutor.com/visualize.html#code=size+%3D+3%0Amatrix_surprise+%3D+%5B%5B0%5D+*+size%5D+*+size%0Amatrix+%3D+%5B%5B0%5D*size+for+i+in+range(size)%5D&amp;mode=display&amp;cumulative=false&amp;heapPrimitives=false&amp;drawParentPointers=false&amp;textReferences=false&amp;showOnlyOutputs=false&amp;py=2&amp;curInstr=6" rel="noreferrer" title="Live Python Tutor Visualize">Live Python Tutor Visualize</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, this is exactly what you would expect. Let's decompose what is happening here:</p>
<p>You write</p>
<pre><code>lst = [[1] * 4] * 3
</code></pre>
<p>This is equivalent to:</p>
<pre><code>lst1 = [1]*4
lst = [lst1]*3
</code></pre>
<p>This means <code>lst</code> is a list with 3 elements all pointing to <code>lst1</code>. This means the two following lines are equivalent:</p>
<pre><code>lst[0][0] = 5
lst1[0] = 5
</code></pre>
<p>As <code>lst[0]</code> is nothing but <code>lst1</code>.</p>
<p>To obtain the desired behavior, you can use list comprehension:</p>
<pre><code>lst = [ [1]*4 for n in xrange(3) ]
</code></pre>
<p>In this case, the expression is re-evaluated for each n, leading to a different list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[[1] * 4] * 3
</code></pre>
<p>or even:</p>
<pre><code>[[1, 1, 1, 1]] * 3
</code></pre>
<p>Creates a list that references the internal <code>[1,1,1,1]</code> 3 times - not three copies of the inner list, so any time you modify the list (in any position), you'll see the change three times.</p>
<p>It's the same as this example:</p>
<pre><code>&gt;&gt;&gt; inner = [1,1,1,1]
&gt;&gt;&gt; outer = [inner]*3
&gt;&gt;&gt; outer
[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]
&gt;&gt;&gt; inner[0] = 5
&gt;&gt;&gt; outer
[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]
</code></pre>
<p>where it's probably a little less surprising.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alongside the accepted answer that explained the problem correctly, within your list comprehension, if You are using python-2.x use <code>xrange()</code> that returns a generator which is more efficient (<code>range()</code> in python 3 does the same job) <code>_</code> instead of the throwaway variable <code>n</code>: </p>
<pre><code>[[1]*4 for _ in xrange(3)]      # and in python3 [[1]*4 for _ in range(3)]
</code></pre>
<p>Also, as a much more <em>Pythonic</em> way you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat()</code></a> to create an iterator object of repeated elements :</p>
<pre><code>&gt;&gt;&gt; a=list(repeat(1,4))
[1, 1, 1, 1]
&gt;&gt;&gt; a[0]=5
&gt;&gt;&gt; a
[5, 1, 1, 1]
</code></pre>
<p>P.S. Using numpy, if you only want to create an array of ones or zeroes you can use <code>np.ones</code> and <code>np.zeros</code> and/or for other number use <code>np.repeat()</code>:</p>
<pre><code>In [1]: import numpy as np

In [2]: 

In [2]: np.ones(4)
Out[2]: array([ 1.,  1.,  1.,  1.])

In [3]: np.ones((4, 2))
Out[3]: 
array([[ 1.,  1.],
       [ 1.,  1.],
       [ 1.,  1.],
       [ 1.,  1.]])

In [4]: np.zeros((4, 2))
Out[4]: 
array([[ 0.,  0.],
       [ 0.,  0.],
       [ 0.,  0.],
       [ 0.,  0.]])

In [5]: np.repeat([7], 10)
Out[5]: array([7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In simple words this is happening because in python everything works <strong>by reference</strong>, so when you create a list of list that way you basically end up with such problems.</p>
<p>To solve your issue you can do either one of them:
1. Use numpy array <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty.html" rel="nofollow">documentation for numpy.empty</a>
2. Append the list as you get to a list.
3. You can also use dictionary if you want  </p>
</div>
<div class="post-text" itemprop="text">
<p>Python containers contain references to other objects. See this example:</p>
<pre><code>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = [a]
&gt;&gt;&gt; b
[[]]
&gt;&gt;&gt; a.append(1)
&gt;&gt;&gt; b
[[1]]
</code></pre>
<p>In this <code>b</code> is a list that contains one item that is a reference to list <code>a</code>. The list <code>a</code> is mutable.</p>
<p>The multiplication of a list by an integer is equivalent to adding the list to itself multiple times (see <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-common" rel="nofollow">common sequence operations</a>). So continuing with the example:</p>
<pre><code>&gt;&gt;&gt; c = b + b
&gt;&gt;&gt; c
[[1], [1]]
&gt;&gt;&gt;
&gt;&gt;&gt; a[0] = 2
&gt;&gt;&gt; c
[[2], [2]]
</code></pre>
<p>We can see that the list <code>c</code> now contains two references to list <code>a</code> which is equivalent to <code>c = b * 2</code>.</p>
<p>Python FAQ also contains explanation of this behavior: <a href="https://docs.python.org/3/faq/programming.html#faq-multidimensional-list" rel="nofollow">How do I create a multidimensional list?</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>myList = [[1]*4] * 3</code> creates one list object <code>[1,1,1,1]</code> in memory and copies its reference 3 times over. This is equivalent to <code>obj = [1,1,1,1]; myList = [obj]*3</code>. Any modification to <code>obj</code> will be reflected at three places, wherever <code>obj</code> is referenced in the list.
The right statement would be:</p>
<pre><code>myList = [[1]*4 for _ in range(3)]
</code></pre>
<p>or</p>
<pre><code>myList = [[1 for __ in range(4)] for _ in range(3)]
</code></pre>
<p><strong>Important thing to note here</strong> is that <code>*</code> operator is <em>mostly</em> used to create a <strong>list of literals</strong>. Since <code>1</code> is a literal, hence <code>obj =[1]*4</code> will create <code>[1,1,1,1]</code> where each <code>1</code> is atomic and <strong>not</strong> a reference of <code>1</code> repeated 4 times. This means if we do <code>obj[2]=42</code>, then <code>obj</code> will become <code>[1,1,42,1]</code> <strong>not</strong> <strike><code>[42,42,42,42]</code></strike> as some may assume.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let us rewrite your code in the following way:</p>
<pre><code>x = 1
y = [x]
z = y * 4

myList = [z] * 3
</code></pre>
<p>Then having this, run the following code to make everything more clear. What the code does is basically print the <a href="https://docs.python.org/2/library/functions.html#id" rel="nofollow"><code>id</code></a>s of the obtained objects, which</p>
<blockquote>
<p>Return the “identity” of an object</p>
</blockquote>
<p>and will help us identify them and analyse what happens:</p>
<pre><code>print("myList:")
for i, subList in enumerate(myList):
    print("\t[{}]: {}".format(i, id(subList)))
    for j, elem in enumerate(subList):
        print("\t\t[{}]: {}".format(j, id(elem)))
</code></pre>
<p>And you will get the following output:</p>
<pre><code>x: 1
y: [1]
z: [1, 1, 1, 1]
myList:
    [0]: 4300763792
        [0]: 4298171528
        [1]: 4298171528
        [2]: 4298171528
        [3]: 4298171528
    [1]: 4300763792
        [0]: 4298171528
        [1]: 4298171528
        [2]: 4298171528
        [3]: 4298171528
    [2]: 4300763792
        [0]: 4298171528
        [1]: 4298171528
        [2]: 4298171528
        [3]: 4298171528
</code></pre>
<hr/>
<p>So now let us go step-by-step. You have <code>x</code> which is <code>1</code>, and a single element list <code>y</code> containing <code>x</code>. Your first step is <code>y * 4</code> which will get you a new list <code>z</code>, which is basically <code>[x, x, x, x]</code>, i.e. it creates a new list which will have 4 elements, which are references to the initial <code>x</code> object. The net step is pretty similar. You basically do <code>z * 3</code>, which is <code>[[x, x, x, x]] * 3</code> and returns <code>[[x, x, x, x], [x, x, x, x], [x, x, x, x]]</code>, for the same reason as for the first step.</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess everybody explain what is happening.
I suggest one way to solve it:</p>
<p><code>myList = [[1 for i in range(4)] for j in range(3)]</code></p>
<pre><code>myList[0][0] = 5
</code></pre>
<p><code>print myList</code></p>
<p>And then you have:</p>
<pre><code>[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Trying to explain it more descriptively,</p>
<p>Operation 1:</p>
<pre><code>x = [[0, 0], [0, 0]]
print(type(x)) # &lt;class 'list'&gt;
print(x) # [[0, 0], [0, 0]]

x[0][0] = 1
print(x) # [[1, 0], [0, 0]]
</code></pre>
<p>Operation 2:</p>
<pre><code>y = [[0] * 2] * 2
print(type(y)) # &lt;class 'list'&gt;
print(y) # [[0, 0], [0, 0]]

y[0][0] = 1
print(y) # [[1, 0], [1, 0]]
</code></pre>
<p>Noticed why doesn't modifying the first element of the first list didn't modify the second element of each list? That's because <code>[0] * 2</code> really is a list of two numbers, and a reference to 0 cannot be modified.</p>
<p>If you want to create clone copies, try Operation 3:</p>
<pre><code>import copy
y = [0] * 2   
print(y)   # [0, 0]

y = [y, copy.deepcopy(y)]  
print(y) # [[0, 0], [0, 0]]

y[0][0] = 1
print(y) # [[1, 0], [0, 0]]
</code></pre>
<p>another interesting way to create clone copies, Operation 4:</p>
<pre><code>import copy
y = [0] * 2
print(y) # [0, 0]

y = [copy.deepcopy(y) for num in range(1,5)]
print(y) # [[0, 0], [0, 0], [0, 0], [0, 0]]

y[0][0] = 5
print(y) # [[5, 0], [0, 0], [0, 0], [0, 0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By using the inbuilt list function you can do like this</p>
<pre><code>a
out:[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]
#Displaying the list

a.remove(a[0])
out:[[1, 1, 1, 1], [1, 1, 1, 1]]
# Removed the first element of the list in which you want altered number

a.append([5,1,1,1])
out:[[1, 1, 1, 1], [1, 1, 1, 1], [5, 1, 1, 1]]
# append the element in the list but the appended element as you can see is appended in last but you want that in starting

a.reverse()
out:[[5, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]
#So at last reverse the whole list to get the desired list
</code></pre>
</div>
<span class="comment-copy">Thanks for the explanation and the workaround. I am still surprised though that the outer list ends up holding three references to an anonymous inner list.</span>
<span class="comment-copy">I am surprised that no body points out  that, the answer here is misleading. <code>[x]*3</code> store 3 references like <code>[x, x, x]</code> is only right when <code>x</code> is mutable. This does't work for e.g. <code>a=[4]*3</code>, where after <code>a[0]=5</code>, <code>a=[5,4,4].</code></span>
<span class="comment-copy">Technically, it's still correct. <code>[4]*3</code> is essentially equivalent to <code>x = 4; [x, x, x]</code>. It's true, though, that this will never cause any <i>problem</i> since <code>4</code> is immutable. Also, your other example isn't really a different case. <code>a = [x]*3; a[0] = 5</code> won't cause problems even if <code>x</code> is mutable, since you're not modifying <code>x</code>, only modifying <code>a</code>. I wouldn't describe my answer as misleading or incorrect - you just <i>can't</i> shoot yourself in the foot if you're dealing with immutable objects.</span>
<span class="comment-copy">@Allanqunzi you are wrong. Do <code>x = 1000; lst = [x]*2; lst[0] is lst[1]</code> -&gt; <code>True</code>. Python does not distinguish between mutable and immutable objects here whatsoever.</span>
<span class="comment-copy">@ᴡʜᴀᴄᴋᴀᴍᴀᴅᴏᴏᴅʟᴇ3000 <code>import ctypes; ctypes.cast(id(1), ctypes.POINTER(ctypes.c_int))[6] = 2</code>, but prepare for weird behavior or a segfault.</span>
<span class="comment-copy">I've put your image inline. For future reference, you really need to explain what you're linking to.</span>
<span class="comment-copy">Great tool!      Thanks for the reference</span>
<span class="comment-copy">So, why if we write matrix= [[x] * 2] doesn't make 2 elemnts for the same object like the example you describe, it seems to be the same concept, what am i missing?</span>
<span class="comment-copy">@AhmedMohamed Indeed it does make a list with two elements of the exact same object that <code>x</code> refers to. If you make a globally unique object with  <code>x = object()</code> and then make <code>matrix = [[x] * 2]</code> these does come as true: <code>matrix[0][0] is matrix[0][1]</code></span>
<span class="comment-copy">@nadrimajstor so why the change in matrix[0] doesn't affect matrix[1] like the example above with 2d matrix.</span>
<span class="comment-copy">This is really clear for a beginner like me. Thank you!</span>
<span class="comment-copy">Just a small addition to the nice answer here: it's evident that you're dealing with same object if you do <code>id(lst[0][0])</code> and <code>id(lst[1][0])</code> or even <code>id(lst[0])</code> and <code>id(lst[1])</code></span>
<span class="comment-copy">You can use the "is" operator to discover this. ls[0] is ls[1] returns True.</span>
<span class="comment-copy">It's not about literals. <code>obj[2] = 42</code> <b>replaces the reference</b> at index <code>2</code>, as opposed to mutating the object referenced by that index, which is what <code>myList[2][0] = ...</code> does (<code>myList[2]</code> is a list, and the assigment alters the reference at index 0 in tha list). Of course, integers are not mutable, but plenty of object types <i>are</i>. And note that the <code>[....]</code> list display notation is also a form of literal syntax! Don't confuse compound (such as lists) and scalar objects (such as integers), with mutable vs. immutable objects.</span>
<span class="comment-copy">Initially I was thinking, how is it possible to come up with these random numbers from your simple example. You really have to mention what <code>id</code> does before you throw this code at people.</span>
<span class="comment-copy">@PascalvKooten thanks, done :)</span>
<span class="comment-copy">This works, but doesn't explain what's happening.</span>
<span class="comment-copy">okay i am updating the code with comments</span>
<span class="comment-copy">Note, fourth step can be dropped if you make second step: <code>a.insert(0,[5,1,1,1])</code></span>
<span class="comment-copy">yeah thanks @U9-Forward</span>
