<div class="post-text" itemprop="text">
<p>I have the following Python 3 script:</p>
<pre><code>from sys import argv

script, filename = argv

txt = open(filename)

print(f"Here's your file {filename}:")

print(txt.read())
</code></pre>
<p>When we use the built in function <code>open()</code> we open the file and return a corresponding file object. </p>
<p>I understand that <code>read()</code> is not a built-in function, but a method of file object. </p>
<p>As stated here in the Python docs about file objects <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-file-object</a>:</p>
<blockquote>
<p>There are actually three categories of file objects: raw binary files,
  buffered binary files and text files. Their interfaces are defined in
  the io module.</p>
</blockquote>
<p>I'm really struggling to understand a few key areas.</p>
<p>1) How do I know which file object type I will be working with of raw binary, buffered binary and text files? In this example I am using a simple .txt file, so I would assume the file object would be a text file.</p>
<p>2) How do I know which specific <code>read()</code> method I am calling when I use the io module? Which class is it part of, as multiple classes have the read method available</p>
<p>Please keep answers as simple as possible as I'm fairly new to Python. I just don't understand the documentation for the io module very well. I quickly become lost from step 3 onwards and need this explaining to me in simple steps. </p>
<p>I'm making a real effort to understand the logical steps to navigate the documentation, so please amend these steps as appropriate.</p>
<p>My understanding is as follows:</p>
<ol>
<li>We call the built in <code>open()</code> function </li>
<li>This opens a file and returns a corresponding file object. </li>
<li>We then use the <code>io</code> module to work with the file object.</li>
<li>Establish what category of file object we are using, in this case I believe it is Text I/O</li>
<li>Text IO states 'The text stream API is described in detail in the documentation of
<code>TextIOBase</code>.'</li>
<li>The class <code>io.TextIOBase</code> is used which has various methods such as <code>read()</code> available.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>There are certain things which are identical between any file object, and you can see that in the <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">class hierarchy</a>. All of the file objects have <code>IOBase</code> as their base class, which defines things which are common to all file objects. It then specialises into <code>RawIOBase</code>, <code>BufferedIOBase</code> and <code>TextIOBase</code> classes, which then further specialise into <code>FileIO</code> and <code>BytesIO</code> and whatnot. It's a typical OOP class hierarchy.</p>
<p>What they all have in common is that they all define a <code>read</code> method. What that method does differs slightly in the details, but the overall function is the same: it reads from whatever the underlying data is and returns that data. That's typical OOP abstraction/encapsulation/polymorphism: you don't need to care how it does it or what exactly it does, you just need to know that you call <code>.read()</code> to get data.</p>
<p>You could instantiate those classes individually, but you typically use <code>open</code> to simplify that potentially complex task. <code>open</code> decides which class to return to you based on what exactly you requested:</p>
<blockquote>
<h3><a href="https://docs.python.org/3/library/io.html#text-i-o" rel="nofollow noreferrer">Text I/O</a></h3>
<p>Text I/O expects and produces <code>str</code> objects. This means that whenever
  the backing store is natively made of bytes (such as in the case of a
  file), encoding and decoding of data is made transparently as well as
  optional translation of platform-specific newline characters.</p>
<p>The easiest way to create a text stream is with <code>open()</code>, optionally
  specifying an encoding:</p>
<pre><code>f = open("myfile.txt", "r", encoding="utf-8")
</code></pre>
</blockquote>
<blockquote>
<h3><a href="https://docs.python.org/3/library/io.html#binary-i-o" rel="nofollow noreferrer">Binary I/O</a></h3>
<p>Binary I/O (also called buffered I/O) expects <code>bytes</code>-like objects and
  produces <code>bytes</code> objects. No encoding, decoding, or newline
  translation is performed. [...]</p>
<p>The easiest way to create a binary stream is with <code>open()</code> with <code>'b'</code>
  in the <code>mode</code> string:</p>
<pre><code>f = open("myfile.jpg", "rb")
</code></pre>
</blockquote>
<blockquote>
<h3><a href="https://docs.python.org/3/library/io.html#raw-i-o" rel="nofollow noreferrer">Raw I/O</a></h3>
<p>Raw I/O (also called unbuffered I/O) is generally used as a low-level
  building-block for binary and text streams; it is rarely useful to
  directly manipulate a raw stream from user code. Nevertheless, you can
  create a raw stream by opening a file in binary mode with <code>buffering</code>
  disabled:</p>
<pre><code>f = open("myfile.jpg", "rb", buffering=0)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It is all about how you open the file.</p>
<p>If you call <code>open(path)</code>, you will open <code>path</code> as a text file object. If you call <code>open(path, 'rb')</code>, you will open as a buffered binary. If you call <code>open(path, 'rb', buffering=0)</code>, you will open as a unbuffered binary. Simple as that =)</p>
<p>Please refer to <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">https://docs.python.org/3/library/io.html</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do I know which file object type I will be working with of raw binary, buffered binary and text files? In this example I am using a simple .txt file, so I would assume the file object would be a text file.</p>
</blockquote>
<p>You donâ€™t. But there are ways to identify/guess a fileâ€™s content type quite similar to Linuxâ€™s <a href="https://linux.die.net/man/1/file" rel="nofollow noreferrer"><code>file</code></a> command. For example, take a look at the <a href="https://github.com/ahupp/python-magic" rel="nofollow noreferrer">python-magic</a> package:</p>
<pre><code>import magic
m = magic.Magic(mime=True)    
print(m.from_file(filename))
</code></pre>
<p>This would give you the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#Discrete_types" rel="nofollow noreferrer">MIME type</a> of a file, e.g. <code>application/json</code> and then youâ€™d know whether to read it as a text or binary file.</p>
<p>Whether youâ€™re reading the text or binary file buffered or not, depends on how you open it, see also the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">io</a> module.</p>
<p>The other answers provide more details on the IO, so Iâ€™m not going into this hereâ€¦ ðŸ˜‰</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In this example I am using a simple .txt file, so I would assume the file object would be a text file." </p>
</blockquote>
<p>This is totally unrelated. </p>
<p>The extension is only a naming convention. It has absolutely nothing to do with the effective content - which from a purely technical POV is always made of bytes anyway (the difference is about how you interpret those bytes) -, and it has nothing to do with which IO class <code>open()</code> will use either, cf deceze's complete and excellent answer.  </p>
</div>
<span class="comment-copy">Youmight also want to read the <a href="https://docs.python.org/3/library/io.html#module-io" rel="nofollow noreferrer">docs of the <code>io</code> module</a>, where they explain the difference between the binary file types</span>
<span class="comment-copy">BTW: open is in real factory function, it just assures You that returned object will have promised interface.  Look at this video <a href="https://youtu.be/rAZBK7jE7b8?t=1406" rel="nofollow noreferrer">youtu.be/rAZBK7jE7b8?t=1406</a></span>
