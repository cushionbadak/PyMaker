<div class="post-text" itemprop="text">
<p>I have a python app that I’m attempting to unit test.  The code is sat in a src directory the tests in a test directory. </p>
<p>The problem comes when trying to test the class containing my main method. This class sits in the src directory and has references to  classes in other modules that all sit in the src directory. In order to execute my app I have the references in this format <code>from &lt;module&gt; import &lt;class&gt;</code></p>
<p>When I come to test this main class I write a test class and place it in the test directory. Running the test I find I have problems with the imports in the main class. To resolve I have to change the imports to be from <code>from src.&lt;module&gt; import &lt;class&gt;</code> Having done this my tests now pass but the app itself fails.</p>
<p>How can I resolve the issue so that my imports are valid for both my unit tests and normal execution?</p>
</div>
<div class="post-text" itemprop="text">
<p>It may fail due to the way <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer"><code>import</code></a> works.</p>
<p>I would recommend always using absolute imports. This means, that when creating a package, all imports within that package import all the way from the top level down: <code>from package.module import thing</code>. And more importantly, installing your package - not as a normal Python package, but with a <a href="https://andrewhoos.com/blog/some-tricks-with-pip-install" rel="nofollow noreferrer">symbolic link</a> allows you to edit your source code while it still is considered an installed package. This way you can position your tests and scripts however you want them and the thing will always work.</p>
<p>Installing your package is done with <code>pip install -e .</code> from <code>root</code>. See a <a href="https://python-packaging.readthedocs.io/en/latest/minimal.html" rel="nofollow noreferrer">packaging tutorial</a> for an example of packaging if you're not familiar with it.</p>
<p>An example package structure might be:</p>
<pre><code>root/
    setup.py
    MANIFEST.in
    ...
    package/
        __init__.py
        app.py
        tests.py
        module/
            __init__.py
            component.py
            module_test.py

    # Or have a tests folder under root
    tests/
        test_module.py
        tests.py
</code></pre>
<p>And for example in <code>app.py</code>, and everywhere really:</p>
<pre><code>from package.module.component import Class
from package.module import thing   # that was declared in module/__init__.py
</code></pre>
<p>So to your case, if I understood it correctly, you'd have:</p>
<pre><code>root/
    setup.py
    MANIFEST.in
    ...
    src/
        __init__.py
        app.py
        module.py
    tests/
        test_module.py
        tests.py
</code></pre>
</div>
<span class="comment-copy">I had this problem, I fixed it by running the main class and the test from the same directory.  This requires that all your import follow the pattern from you main class. I think <code>python</code> adds the current working directory to the path. This link is a good resource that explains <code>import</code>. <a href="https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html" rel="nofollow noreferrer">chrisyeh96.github.io/2017/08/08/…</a></span>
<span class="comment-copy">@spaniard That's a good guide, nice!</span>
