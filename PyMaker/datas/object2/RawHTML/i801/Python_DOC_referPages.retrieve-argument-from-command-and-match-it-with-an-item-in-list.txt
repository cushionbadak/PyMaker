<div class="post-text" itemprop="text">
<p>Basically, what I want to do is receive a message from a user, compare the argument with the item in a list then assign a role to the user using the argument. What I got is a bunch of <code>if</code> statements one leading to the other possible arguments:</p>
<pre class="lang-py prettyprint-override"><code>@bot.event
async def on_message(message):
    memberName = message.author
    roleParasoul = discord.utils.get(message.server.roles, name="Parasoul")
    roleValentine = discord.utils.get(message.server.roles, name="Valentine")
    roleBand = discord.utils.get(message.server.roles, name="Big Band")
    rolePeacock = discord.utils.get(message.server.roles, name="Peacock")
    roleRobo = discord.utils.get(message.server.roles, name="Robo Fortune")
    roleFortune = discord.utils.get(message.server.roles, name="Ms. Fortune")
    roleBeowulf = discord.utils.get(message.server.roles, name="Beowulf")
    roleCerebella = discord.utils.get(message.server.roles, name="Cerebella")
    roleFilia = discord.utils.get(message.server.roles, name="Filia")
    roleFukua = discord.utils.get(message.server.roles, name="Fukua")
    roleDouble = discord.utils.get(message.server.roles, name="Double")
    roleEliza = discord.utils.get(message.server.roles, name="Eliza")
    rolePainwheel = discord.utils.get(message.server.roles, name="Painwheel")
    roleFeelme = discord.utils.get(message.server.roles, name="Feelme")
    roleSkullgirls = discord.utils.get(message.server.roles, id="343122878595727360")

# check which command we wanted (and ignore any message that isn't a command)
    if message.content.startswith('!roles'):
        botCmd = LobbyBotCommand.ROLES
    else:
        return

    if botCmd == LobbyBotCommand.ROLES:
        tagReact = bot.add_reaction(message, ":SeemsGood:263784999038353420")
        if "Feelme" in message.content:
            await bot.add_roles(memberName, roleFeelme)
            await tagReact
            return
        elif "Skullgirls" in message.content:
            await bot.add_roles(memberName, roleSkullgirls)
            await tagReact
            return
</code></pre>
<p>People have already told me use the proper <code>@bot.command</code> for commands using discord.py but I want to make this work first.</p>
<p>The problem here is I don't know how properly retrieve just the argument from the message and match it with the list.</p>
<p>What I thought would work, looked like this:</p>
<pre class="lang-py prettyprint-override"><code>@bot.event
async def on_message(message):
    roleCharacter = ("Parasoul", "Valentine", "Big Band", "Peacock", "Robo Fortune", "Ms. Fortune", "Beowulf", "Cerebella", "Filia", "Fukua", "Double", "Eliza", "Painwheel", "Feelme", "SG")
    if message.content.startswith('!roles'):
        if roleCharacter in message.content:
            await bot.add_roles(memberName, roleCharacter)
            return
</code></pre>
<p>That obviously doesn't work because I can only use strings in a <code>if</code>. What now?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>People have already told me use the proper @bot.command for commands using discord.py but I want to make this work first.</p>
</blockquote>
<p>Well if you're really adamant you can use <a href="https://discordpy.readthedocs.io/en/latest/api.html#discord.utils.get" rel="nofollow noreferrer">discord.utils.get</a> and loop through the list of your role names as strings</p>
<p>Maybe something like </p>
<pre><code>@bot.event
async def on_message(message):
  memberName=message.author
  roleCharacter = ("Parasoul", "Valentine", "Big Band", "Peacock", "Robo Fortune", "Ms. Fortune", "Beowulf", "Cerebella", "Filia", "Fukua", "Double", "Eliza", "Painwheel", "Feelme", "SG")
  role_name = ""
  if message.content.startswith('!roles'):
    for i in roleCharacter:
      if i in message.content:
        role_name = i
        break
    await bot.add_roles(memberName,discord.utils.get(message.server.roles, name=role_name))
    return
</code></pre>
</div>
<span class="comment-copy">I strongly recommend you make the code as short as possible to reproduce the issue. Especially in the future. Having every <code>elif</code> isn't really necessary to convey the point. A minimal example helps us help you.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#for-statements</a></span>
<span class="comment-copy">"That obviously doesn't because I can only use string in a if": There is nothing obvious here. Do you want to not use a string? Where would that value come from? The<code>if</code> can work with anything that produces a <code>bool</code> value.</span>
<span class="comment-copy">I'll give it a try.</span>
