<div class="post-text" itemprop="text">
<p>I have a string as follows</p>
<pre><code>144.963286 -37.814212 144.964498 -37.813854 144.964962 -37.814806 144.963711, -37.815168
</code></pre>
<p>I want to convert above string to an array such as below:</p>
<pre><code>[(144.963286, -37.814212), (144.964498, -37.813854), (144.964962, -37.814806), (144.963711, -37.815168)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you are using dot for separating decimal part from fractional one (and commas are not needed) we can</p>
<ol>
<li>Remove commas in string.</li>
<li>Split string by whitespace.</li>
<li>Convert each of substrings to floating number.</li>
<li><a href="https://docs.python.org/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> floats into pairs.</li>
</ol>
<p>like</p>
<pre><code>&gt;&gt;&gt; string = '144.963286 -37.814212 144.964498 -37.813854 144.964962 -37.814806 144.963711, -37.815168'
&gt;&gt;&gt; floats = map(float, string.replace(',', '').split())  # use `itertools.imap` instead of `map` in Python2
&gt;&gt;&gt; list(zip(floats, floats))
[(144.963286, -37.814212), (144.964498, -37.813854), (144.964962, -37.814806), (144.963711, -37.815168)]
</code></pre>
<p>As @AlexanderReynolds suggested we can use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code> function</a> instead of <code>zip</code> for cases with odd number of arguments with some sort of <code>fillvalue</code> (default is <code>None</code>) like</p>
<pre><code>&gt;&gt;&gt; string = '144.963286, -37.814212 42'
&gt;&gt;&gt; floats = map(float, string.replace(',', '').split())
&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; list(zip_longest(floats, floats,
                     fillvalue=float('inf')))
[(144.963286, -37.814212), (42.0, inf)]
</code></pre>
<p>also we can do it in one (pretty complex though) line with <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat</code></a> like</p>
<pre><code>&gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; list(zip_longest(*repeat(map(float, string.replace(',', '').split()),
                             times=2),
                     fillvalue=float('inf')))
[(144.963286, -37.814212), (42.0, inf)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>zip</code> with slicing:</p>
<pre><code>s = '144.963286 -37.814212 144.964498 -37.813854 144.964962 -37.814806 144.963711 -37.815168'

splitted = s.split()
result = list(zip(splitted[::2], splitted[1::2]))

# [('144.963286', '-37.814212'), ('144.964498', '-37.813854'), ('144.964962', '-37.814806'), ('144.963711', '-37.815168')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex:    </p>
<pre><code>import re

s = '144.963286 -37.814212 144.964498 -37.813854 144.964962 -37.814806 144.963711, -37.815168'

pattern = r'(-?\d+\.\d+).+?(-?\d+\.\d+)'
new_s = [(float(i.group(1)), float(i.group(2))) for i in re.finditer(pattern, s)]

# [(144.963286, -37.814212), (144.964498, -37.813854), (144.964962, -37.814806), (144.963711, -37.815168)]
</code></pre>
</div>
<span class="comment-copy">Array or list? They're very different.</span>
<span class="comment-copy">@zwer: in Python3 <code>map</code> will return iterator, so it should be fine, tested on Python3.6</span>
<span class="comment-copy">Ooops, didn't notice the tag, I was looking at marking the question as a duplicate of a similar one tagged with 2.x when your answer popped up. Sorry about that. âš˜</span>
<span class="comment-copy">Might be good to suggest <code>zip_longest</code> for a string with an odd number of floats.</span>
<span class="comment-copy">Why not just <code>list(zip(splitted[::2], splitted[1::2]))</code>?</span>
<span class="comment-copy">OP needs floats and not strings</span>
<span class="comment-copy">for get float insead of string, you can change <code>splitted = s.split()</code> to <code>splitted = [float(i) for i in s.split()]</code></span>
