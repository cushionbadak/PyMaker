<div class="post-text" itemprop="text">
<p>Have worked through most examples but am still learning async in Python. I am having trouble why this example of code will not print "i am async".</p>
<pre><code>import asyncio
from threading import Thread

async def cor1():
   print("i am async!")

def myasync(loop):
   print("Async running")
   loop.run_forever()
   print("Async ended?")

def main():
   this_threads_event_loop = asyncio.get_event_loop()
   t_1 = Thread(target=myasync, args=(this_threads_event_loop,));
   t_1.start()
   print("begining the async loop")
   t1 = this_threads_event_loop.create_task(cor1())
   print("Finsihed cor1")

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code attempts to submit tasks to the event loop from a different thread. To do that, you must use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe" rel="nofollow noreferrer"><code>run_coroutine_threadsafe</code></a>:</p>
<pre><code>def main():
   loop = asyncio.get_event_loop()
   # start the event loop in a separate thread
   t_1 = Thread(target=myasync, args=(loop,));
   t_1.start()
   # submit the coroutine to the event loop running in the
   # other thread
   f1 = asyncio.run_coroutine_threadsafe(cor1(), loop)
   # wait for the coroutine to finish, by asking for its result
   f1.result()
   print("Finsihed cor1")
</code></pre>
<p>Please note that combining asyncio and threads should only be done in special circumstances, such as when introducing asyncio to a legacy application where the new functionality needs to be added gradually. If you are writing new code, you almost certainly want the <code>main</code> to be a coroutine, run from top-level using <a href="https://docs.python.org/3/library/asyncio-task.html#running-an-asyncio-program" rel="nofollow noreferrer"><code>asyncio.run(main())</code></a>.</p>
<p>To run a legacy synchronous function from asyncio code, you can always use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer"><code>run_in_executor</code></a>.</p>
</div>
<span class="comment-copy">Sorry, if this is a silly follow up. But would f1 be = asyncio.run_coroutine_threadsafe(coro1, this_threads_event_loop) instead of create_task?</span>
<span class="comment-copy">@DrewM Yes, sorry about that!</span>
