<div class="post-text" itemprop="text">
<p>I process log files with python. Let´s say that I have a log file that contains a line which is <code>START</code> and a line that is <code>END</code>, like below:</p>
<pre><code>START
one line
two line
...
n line
END
</code></pre>
<p>What I do want is to be able to store the content between the <code>START</code> and <code>END</code> lines for further processing. </p>
<p>I do the following in Python:</p>
<pre><code>with open (file) as name_of_file:
    for line in name_of_file:
        if 'START' in line:  # We found the start_delimiter
            print(line)
            found_start = True
            for line in name_of_file:  # We now read until the end delimiter
                if 'END' in line:  # We exit here as we have the info
                    found_end=True
                    break
                else:

                    if not (line.isspace()): # We do not want to add to the data empty strings, so we ensure the line is not empty
                        data.append(line.replace(',','').strip().split())  # We store information in a list called data we do not want ','' or spaces
if(found_start and found_end):
    relevant_data=data
</code></pre>
<p>And then I process the <code>relevant_data</code>.</p>
<p>Looks to far complicated for the purity of Python, and hence my question: is there a more Pythonic way of doing this?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>To perform that, you can use <code>iter(callable, sentinel)</code> discussed in <a href="https://stackoverflow.com/a/46610595/8593338">this post</a> , that will read until a sentinel value is reached, in your case 'END' (after applying <code>.strip()</code>).</p>
<pre><code>with open(filename) as file:
    start_token = next(l for l in file if l.strip()=='START') # Used to read until the start token
    result = [line.replace(',', '').split() for line in iter(lambda x=file: next(x).strip(), 'END') if line]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are right that there is something not OK with having a nested loop over the same iterator. File objects are already iterators, and you can use that to your advantage. For example, to find the first line with a <code>START</code> in it:</p>
<pre><code>line = next(l for l in name_of_file if 'START' in l)
</code></pre>
<p>This will raise a <code>StopIteration</code> if there is no such line. It also sets the file pointer to the beginning of the first line you care about.</p>
<p>Getting the last line without anything that comes after it is a bit more complicated because it's difficult to set external state in a generator expression. Instead, you can make a simple generator:</p>
<pre><code>def interesting_lines(file):
    if not next((line for line in file if 'START' in line), None):
        return
    for line in file:
        if 'END' in line:
            break
        line = line.strip()
        if not line:
            continue
        yield line.replace(',', '').split()
</code></pre>
<p>The generator will yield nothing if you don't have a <code>START</code>, but it will yield all the lines until the end if there is no <code>END</code>, so it differs a little from your implementation. You would use the generator to replace your loop entirely:</p>
<pre><code>with open(name_of_file) as file:
    data = list(interesting_lines(file))

if data:
    ... # process data
</code></pre>
<p>Wrapping the generator in <code>list</code> immediately processes it, so the lines persist even after you close the file. The iterator can be used repeatedly because at the end of your call, the file pointer will be just past the <code>END</code> line:</p>
<pre><code>with open(name_of_file) as file:
    for data in iter(lambda: list(interesting_lines(file)), []):
        # Process another data set.
</code></pre>
<p>The relatively lesser known form of <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> converts any callable object that accepts no arguments into an iterator. The end is reached when the callable returns the sentinel value, in this case an empty list.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a mission for regular expressions <code>re</code>, for example: </p>
<pre><code>import re
lines = """ not this line
START
this line
this line too
END
not this one
"""
search_obj = re.search( r'START(.*)END', lines, re.S)
search_obj.groups(1)
# ('\n    this line\n    this line too\n    ',)
</code></pre>
<p>The <code>re.S</code> is necessary for spanning multiple lines.</p>
</div>
<span class="comment-copy">The sentinel is an interesting idea.</span>
<span class="comment-copy">This is a much nicer answer than mine. I wish it was accepted.</span>
<span class="comment-copy">Are you suggesting it's worth loading an enormous log file in its entirety to apply this regex?</span>
<span class="comment-copy">I presumed you could. How big is the log typically?</span>
<span class="comment-copy">Good point. Megabytes probably, but some of mine reach Gigabytes at times.</span>
<span class="comment-copy">Yes, files are very big sometimes, and that is why I filter them by parts, just between the START and END lines that interest me at a certain point. I am giving a try to what Mad Physicist suggest, it is certainly an improvement over what I have and more Pythonic.</span>
<span class="comment-copy">For Mb, loading the file entirely then using re will be easiest (and faster probably). For Gb (assuming the matched portion is not Gb in size), your yield solution will save memory.</span>
