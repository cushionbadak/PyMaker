<div class="post-text" itemprop="text">
<p>I have to remove the capitalized letters from the string given</p>
<p>When I try to remove the capital letters from the given string, the return function exists at the end of the function which I wrote to print the output causes to the last character to get printed. Is there any better way to solve it?</p>
<pre><code>def remove_capitals(a):    
    for i in a:    
          if ord(i)&gt;64 and ord(i)&lt;91:   
               pass  
          else:  
               print(i,end='')  
     return i

print(remove_capitals("A1H5J3ETD"))
</code></pre>
<p>expected : 153
actual : 153D</p>
</div>
<div class="post-text" itemprop="text">
<p>You print inside and print the return - you return the last <code>i</code> without test .. which is the last letter of your input.</p>
<p>Modifications:</p>
<ul>
<li><p>Instead of checking ordinals and magic numbers, use built in fuction <a href="https://docs.python.org/3/library/stdtypes.html#str.isupper" rel="nofollow noreferrer">isupper()</a> to decide. </p></li>
<li><p>do not use <code>pass</code> - simply do only something if it is ok to do so</p></li>
<li><p>collect all parts into a list and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join()</a> them back into a string</p></li>
</ul>
<p>Fix:</p>
<pre><code>def remove_capitals(a):    
    non_upper = []
    for i in a:    
        if not i.isupper():  
            non_upper.append(i)

    return ''.join(non_upper)


print(remove_capitals("A1H5J3ETD"))
</code></pre>
<p>Output:</p>
<pre><code>153
</code></pre>
<hr/>
<p>You can also append to strings - but strings are immutable so it destroyes the old one and creates a new longer version - which is wasteful:</p>
<pre><code>def remove_capitals(a):    
    non_upper = "" 
    for i in a:    
        if not i.isupper():  
            non_upper += i

    return non_upper
</code></pre>
<p>The only benefit this has, is that it does not use lists - it is slower and more memory intensive.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension  </p>
<pre><code>def remove_capitals(a):
    return ''.join([x for x in a if ord(x)&lt;64 or ord(x)&gt;91]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The last unwanted character is returned because of the return i statement at the end of your function. If you just want to print out the non-capitalised letters putting return None and just calling the function (not doing print(remove_capitals("A1H5J3ETD")) : remove_capitals("A1H5J3ETD") should do the trick. </p>
</div>
<span class="comment-copy">You are returning the last letter, and then you pass the result of the function to the print function, that prints the last letter in this case "D".</span>
<span class="comment-copy">Yeah, I can see that. But how to overcome that without removing the print function outside of the remove_capitals() function?</span>
<span class="comment-copy">Why are you returning <code>i</code>? And why are you printing the value returned from the function call?</span>
<span class="comment-copy">If I didn't use return None gets printed. I don't want None printed too. The question was to write a function where they have given the print function below the remove_capitals() function. So I thought I could do it this way.</span>
<span class="comment-copy">I'm just starting to learn python, so is there any other basic way. I haven't even started with the List data structures.</span>
<span class="comment-copy">you can add to strings as well - but it destroyed the old string and creates a new (longer) one - wich is wasteful. Start with <code>non_upper=""</code> and use <code>non_upper = non_upper + i</code> instead of the list append - this here is better / faster thoughÂ´.</span>
<span class="comment-copy">thank you. It works</span>
<span class="comment-copy">Just to note you can use chained comparisons here (which reads better imho and avoids calling <code>ord()</code> twice), eg: <code>[x for x in a if not (64 &lt;= ord(x) &lt;= 91)]</code> - but there is always <code>.isupper()</code> available which makes it far more explicit rather than dealing with character ordinals... (plus isn't restricted to just ASCII)</span>
