<div class="post-text" itemprop="text">
<p>I am creating a function that accepts a dictionary1 and checks if any of the keys exists as a value dictionary2.</p>
<p>I have tried using the <code>dictionary2.isdisjoint(dictionary1)</code> but this is effective for only checking keys-keys.</p>
<p>How can I check key to value in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the below statement returns <code>True</code> (it will return common values) then:</p>
<pre><code>set(dictionary1.keys()) &amp; set(dictionary2.values())
</code></pre>
<p><strong>Explanation:</strong></p>
<ul>
<li><p><code>dictionary1.keys()</code> will give the list of keys in dictionary1</p></li>
<li><p><code>dictionary2.values()</code> will give the list of values in dictionary2</p></li>
<li>Convert these two to <code>set</code> and if they have common values, you will end
up with the common values between the two.</li>
</ul>
<blockquote>
<pre><code>dictionary1 = {1:2, 2:3, 3:4}
dictionary2 = {2:1, 2:3, 3:4}
print set(dictionary1.keys()) &amp; set(dictionary2.values())
</code></pre>
</blockquote>
<p><strong>Output:</strong></p>
<pre><code>set([3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this is really a big enough task to put into a separate function, but anyway, here's an example using the <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer">any()</a> keyword:</p>
<pre><code>if any(k in d2.values() for k in d1.keys()):
    # do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {'1': 'one', '3': 'three', '2': 'two', '5': 'five', '4': 'four'}
d2 =  {'5': 'five', '6': 'six', '7': 'eight', 'three': '3', '9': 'nine'}

for key in d:
    if key in d2.itervalues():
        print "found"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't an operation that is built-in.  You would need to write logic to do it yourself.  You seem to be using python 3, so something like the below might work</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; x = dict.fromkeys([0, 5, 10])
&gt;&gt;&gt; y = {x: x for x in range(5)}
&gt;&gt;&gt; print(x.keys().isdisjoint(y.values()))
False
&gt;&gt;&gt; x.pop(0)
&gt;&gt;&gt; print(x.keys().isdisjoint(y.values()))
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your solution is almost right. You have to add <code>not</code> to proof the opposite (not disjoint == have common elements) and use the method <code>values()</code> to get values from the dictionary. In your case you check only keys of two dictionaries.</p>
<pre><code>d1 = {i: i for i in range(5)}
d2 = {i: j for i, j in zip(range(5), range(5,10))}
d3 = {i: j for i, j in zip(range(5,10), range(5))}

print('d1: ', d1)
print('d2: ', d2)

print('Keys of d1 in values of d2: ', not set(d1).isdisjoint(d2.values()))
print('Keys of d1 in keys of d2: ', not set(d1).isdisjoint(d2))
print()

print('d2: ', d2)
print('d3: ', d3)

print('Keys of d2 in values of d3: ', not set(d2).isdisjoint(d3.values()))
print('Keys of d2 in keys of d3: ', not set(d2).isdisjoint(d3))
</code></pre>
<h3>Output:</h3>
<pre><code># d1:  {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}
# d2:  {0: 5, 1: 6, 2: 7, 3: 8, 4: 9}
# Keys of d1 in values of d2:  False
# Keys of d1 in keys of d2:  True
# 
# d2:  {0: 5, 1: 6, 2: 7, 3: 8, 4: 9}
# d3:  {5: 0, 6: 1, 7: 2, 8: 3, 9: 4}
# Keys of d2 in values of d3:  True
# Keys of d2 in keys of d3:  False
</code></pre>
</div>
<span class="comment-copy">They tried "dictionary2.isdisjoint(dictionary1)". Perhaps they could provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">@caricature please accept the answer that helped you solve your problem by clicking on the tick sign beside it, thank you!</span>
<span class="comment-copy"><code>set(dictionary1) &amp; set(dictionary2.values())</code> is even better</span>
<span class="comment-copy">Elegant and pythonic way.</span>
