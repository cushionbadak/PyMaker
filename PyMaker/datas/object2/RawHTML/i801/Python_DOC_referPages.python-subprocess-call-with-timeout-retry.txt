<div class="post-text" itemprop="text">
<p>I want to re-run subprocess.call if it's timeout somehow.</p>
<pre><code>subprocess.call('some command', timeout=600)
if timeout:
    subprocess.call('some command')
</code></pre>
<p>How do i do something like this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.call</code> raises <a href="https://docs.python.org/3/library/subprocess.html#subprocess.TimeoutExpired" rel="nofollow noreferrer">[Python 3]: <em>exception</em> subprocess.<strong>TimeoutExpired</strong></a> when timeout is (given and) reached (just like <code>Popen.communicate</code>).</p>
<p>Here's a piece of code that keeps launching <em>notepad</em> with a timeout of 3 seconds, until it runs 2 times, or user manually closes it:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; max_runs = 2
&gt;&gt;&gt; run = 0
&gt;&gt;&gt; while run &lt; max_runs:
...     try:
...             subprocess.call("notepad", timeout=3)
...     except subprocess.TimeoutExpired:
...             continue
...     else:
...             break
...     finally:
...             run += 1
...
0
</code></pre>
</blockquote>
<p>Although this technically answers the question, I don't think it's a good idea to re-launch a process that didn't end, since there's a great chance that the consecutive runs will have the same outcome (will timeout). In that case, you'd have to use <em>Popen</em> and <em>communicate</em>, and if the process times out , kill it via <code>Popen.terminate()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use basic error handling to do catch the timeout exception:</p>
<pre><code>try:
    subprocess.call('cmd', timeout=0)
except subprocess.TimeoutExpired:
    print('Expired!')
    # subprocess.call('cmd')
</code></pre>
<p>The <code>except</code> block is only run if the specified error is raised. See <a href="https://docs.python.org/3.7/tutorial/errors.html" rel="nofollow noreferrer">Python docs tutorial on exceptions</a>, specifically <a href="https://docs.python.org/3.7/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">error handling</a> for more information.</p>
</div>
<span class="comment-copy">why would you try to call it again immediately if it just <i>timed-out</i>?</span>
