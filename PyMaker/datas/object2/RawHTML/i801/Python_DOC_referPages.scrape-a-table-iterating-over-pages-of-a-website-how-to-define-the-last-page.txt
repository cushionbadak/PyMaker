<div class="post-text" itemprop="text">
<p>I have the following code that works OK:</p>
<pre><code>import requests
from bs4 import BeautifulSoup
import pandas as pd

df_list = []
for i in range(1, 13):
    url = 'https://www.uzse.uz/trade_results?date=25.01.2019&amp;mkt_id=ALL&amp;page=%d' %i
    df_list.append(pd.read_html(url)[0])

df = pd.concat(df_list)
df
</code></pre>
<p>But for this particular page I know the number of pages, which is 13 in <code>range(1, 13)</code>. Is there a way to define the last page so I do not have to go and check how many pages there are on a given page? </p>
</div>
<div class="post-text" itemprop="text">
<p>Try with </p>
<pre><code>for i in range(1, 100):

    url = 'https://www.uzse.uz/trade_results?date=25.01.2019&amp;mkt_id=ALL&amp;page=%d' %i
    if pd.read_html(url)[0].empty:
        break
    else :
        df_list.append(pd.read_html(url)[0])
</code></pre>
<hr/>
<pre><code>page=0                    # using while
while page &gt; 0:
   url = 'https://www.uzse.uz/trade_results?date=25.01.2019&amp;mkt_id=ALL&amp;page=%d' % i
   df_list.append(pd.read_html(url)[0])
   page = page + 1
   if pd.read_html(url)[0].empty:
      break

print(page)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I know the number of pages, which is 13 in <code>range(1, 13)</code>.</p>
</blockquote>
<p>You seem to be suffering from an OBOB (<a href="https://en.wikipedia.org/wiki/Off-by-one_error" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Off-by-one_error</a>). Put a <code>print(i)</code> in your loop and you'll see it counts from 1 up to 12.</p>
<p>You may be happier with:</p>
<pre><code>for i in range(13):
</code></pre>
<p>and then use the expression <code>... % (i + 1)</code>.</p>
<p>Cf <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#range</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For this particular website, you could detect the number of pages from the pagination bar. You can use something similar to the following code snippet:</p>
<pre><code>from bs4 import BeautifulSoup
import requests
r = requests.get('https://www.uzse.uz/trade_results?date=25.01.2019&amp;mkt_id=ALL')
soup = BeautifulSoup(r.text, 'html.parser')
lastpage_url = soup.find("li", {"class": "last next"}).findChildren("a")[0]['href']
num_pages = int(lastpage_url[lastpage_url.rfind("=")+1:])
</code></pre>
</div>
<span class="comment-copy">Using try except break</span>
<span class="comment-copy">can you pls elaborate? because the when <code>page=14</code> there is no error reported. I just get an empty table.</span>
<span class="comment-copy">added let me know whether it work for you or not</span>
<span class="comment-copy">Yep, it works. Thank you!</span>
<span class="comment-copy">Very interesting, will give it a shot. Thanks!</span>
<span class="comment-copy">I'm glad it helped!</span>
