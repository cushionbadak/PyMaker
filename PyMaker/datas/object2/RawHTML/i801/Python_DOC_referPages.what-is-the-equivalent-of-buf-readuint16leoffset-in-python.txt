<div class="post-text" itemprop="text">
<p>I am looking for the equivalent of this function (from node.js) in Python</p>
<p><a href="https://nodejs.org/api/buffer.html#buffer_buf_readuint16le_offset" rel="nofollow noreferrer">buf.readUInt16LE(offset)</a></p>
<blockquote>
<p>offset:  Number of bytes to skip before starting to read. Must satisfy 0 &lt;= offset &lt;= buf.length - 2.  </p>
<p>Returns: 
  Reads an unsigned 16-bit integer from buf at the specified offset with specified endian format (readUInt16BE() returns big endian, readUInt16LE() returns little endian).</p>
</blockquote>
<p>Example:</p>
<pre><code>const buf = Buffer.from([0x12, 0x34, 0x56]);

console.log(buf.readUInt16BE(0).toString(16));
// Prints: 1234
console.log(buf.readUInt16LE(0).toString(16));
// Prints: 3412
console.log(buf.readUInt16BE(1).toString(16));
// Prints: 3456
console.log(buf.readUInt16LE(1).toString(16));
// Prints: 5634
console.log(buf.readUInt16LE(2).toString(16));
// Throws ERR_OUT_OF_RANGE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are no such functions that I'm aware of, though there may be a package that does this.
Using the standard library utilities, you can use <code>struct.unpack</code> and <code>io.BytesIO</code> for the conversion and handling of a (binary) buffer.</p>
<p>Below is an example (Python 3). Apologies if the lines feel a bit compact; I hope it's still straightforward to read.</p>
<pre><code>import io
import struct

buf = io.BytesIO(bytearray([0x12, 0x34, 0x56]))

# &lt; and &gt; for little and big endian, H for 2-byte unsigned short.
assert format(struct.unpack("&gt;H", buf.read(2))[0], '02x') == "1234"

# buf.seek to reset to byte 0 (1, 2) of the stream; also for file objects
buf.seek(0)
assert format(struct.unpack("&lt;H", buf.read(2))[0], '02x') == "3412"

buf.seek(1)
assert format(struct.unpack("&gt;H", buf.read(2))[0], '02x') == "3456"

buf.seek(1)
assert format(struct.unpack("&lt;H", buf.read(2))[0], '02x') == "5634"

buf.seek(2)
try:
    format(struct.unpack("&lt;H", buf.read(2))[0], '02x')
except struct.error as exc:
    assert exc.args[0] == "unpack requires a buffer of 2 bytes"
else:
    assert False, "exception failed to be raised"
</code></pre>
<p>More details at the documentation pages of the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">io</a> and <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> modules.</p>
</div>
