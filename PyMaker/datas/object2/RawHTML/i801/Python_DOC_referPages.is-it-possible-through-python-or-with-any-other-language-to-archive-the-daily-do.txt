<div class="post-text" itemprop="text">
<p>I need a utility to archive my daily downloaded files into one new folder.</p>
<p>Suppose, I downloaded 10 files today and at the end of the day, all the files should get archived into one new folder with name <strong>Archived_TodaysDate.</strong></p>
<p>THIS ACTIVITY/TASK CAN BE SCHEDULABLE AND EXECUTE ON DAILY BASIS.</p>
<p>IT WOULD BE GOOD IF YOU HELP IN THE CONTEXT OF MAC OPERATING SYSTEM.</p>
<p>I know this can be done through many scripting languages but I wanted to know for mac which scripting language is good for this task and a quick start guide.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you aren't familiar with setting up a chrontab you can set those up by following <a href="https://ole.michelsen.dk/blog/schedule-jobs-with-crontab-on-mac-osx.html" rel="nofollow noreferrer">this</a> (I looked for a mac-specific one but there are zillions of guides about this.)</p>
<p>Your archiving script can be quite simple. Begin by generating a list of files to archive (refer to <a href="https://stackoverflow.com/questions/8087693/python-code-to-find-all-newly-created-modified-and-deleted-files-in-all-the-dir">this</a> answer.)</p>
<pre><code>import datetime as dt
import time
import os
import zipfile

now = dt.datetime.now()
ago = now-dt.timedelta(days=1)
</code></pre>
<p>Unlike in the referenced answer we want a list of files, not a <code>print</code>ed output. So we initialize a list and <code>append</code> to it at each iteration. Here I assume that your script lives <strong>in</strong> your downloads folder, but you can change the path given to <code>os.walk</code> as appropriate.</p>
<pre><code>to_archive = []

for root, dirs,files in os.walk('.'):  
    for fname in files:
        path = os.path.join(root, fname)
        st = os.stat(path)    
        mtime = dt.datetime.fromtimestamp(st.st_mtime)
        if mtime &gt; ago:
            to_archive.append(path)
</code></pre>
<p>We also want a <code>strftime</code> representation of <code>now</code> for our archive file title.</p>
<pre><code>ts = now.strftime("%m_%d_%Y")
</code></pre>
<p>Finally write the files into an archive file (in this case I chose <code>zip</code> format).</p>
<pre><code>with zipfile.ZipFile('{}_archive.zip'.format(ts), 'w') as myzip:
    for x in to_archive:    
      myzip.write(x)
</code></pre>
</div>
<span class="comment-copy">It's possible to implement this using any scripting language. Python would be a good choice. You can find the Python tutorial here: <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/index.html</a></span>
<span class="comment-copy">The <a href="https://docs.python.org/3.6/library/os.html" rel="nofollow noreferrer">os</a> module will also be particularly useful for this task</span>
