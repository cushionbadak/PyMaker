<div class="post-text" itemprop="text">
<pre><code>@bot.event
async def on_message(message):
if message.content.upper().startswith("&gt;&gt;AEROSPACE"):
        time.sleep(1) #
        botmessage = await bot.send_message(message.channel, "&lt;@"+message.author.id+"&gt; " + "**your role has been added.**")
        async def addrole(ctx):
            member = ctx.message.author
            server = ctx.message.server
            role = server.roles("Aerospace")
            await bot.add_roles(member, role)
        time.sleep(1.5) #
        await bot.delete_message(message)
        time.sleep(1.5) #
        await bot.delete_message(botmessage)
</code></pre>
<p>I've tried a lot of different things but it just won't work, it's the code on line 5 repeating itself. I can send the error if required</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not quite sure what the message duplicating is all about as I'm not getting it on my end so check if you have multiple instances of the bot running in the background.  </p>
<p>Your code in its current state, however, doesn't add the role, it just creates a coroutine to add the role.  </p>
<p>Also, you should replace all <code>time.sleep(1)</code> with <code>await asyncio.sleep(1)</code> since <code>time.sleep()</code> is blocking (meaning it will block all other functions and events of your bot to execute while it's paused)  </p>
<p>To use your <code>addrole()</code> coroutine you need to pull it out of and await it from within the <code>on_message</code> event</p>
<p>So what it might end up looking is something like</p>
<pre><code>@bot.event
async def on_message(message):
  if message.content.upper().startswith("&gt;&gt;AEROSPACE"):
    await asyncio.sleep(1) #
    botmessage = await bot.send_message(message.channel, "&lt;@"+message.author.id+"&gt; " + "**your role has been added.**")
    await addrole(message)
    await asyncio.sleep(1.5) #
    await bot.delete_message(message)
    await asyncio.sleep(1.5) #
    await bot.delete_message(botmessage)

async def addrole(message):
  member = message.author
  server = message.server
  role = get(server.roles,name="Aerospace")
  await bot.add_roles(member, role) 
</code></pre>
</div>
<span class="comment-copy">so in @bot.events everything is ran and not just the code right under it? Because the way i see it, the if statement is connected to the addrole function, so why would addrole only work under command issued above? I'm not saying you're wrong I'm just a novice coder trying to understand.</span>
<span class="comment-copy">So <code>addrole()</code> is something called a <a href="https://docs.python.org/3/library/asyncio-task.html#coroutines" rel="nofollow noreferrer">coroutine</a>. It's different from a method in that when controlled by the asyncio <a href="https://docs.python.org/3/library/asyncio-eventloop.html" rel="nofollow noreferrer">event loop</a> like with this python wrapper for the discord api, it can be run in virtually the same time (not actually but feels like it) as all other coroutines in the form of tasks. So when you want to run it you do <code>await coroutine_name()</code> from any other coroutine. That's what's happening on line 6. I'm calling that coroutine with <code>await addrole(message)</code></span>
<span class="comment-copy">I would suggest <a href="https://realpython.com/async-io-python/" rel="nofollow noreferrer">this article</a> to get more familiar with the concept of concurency and asyncio. It's kinda long but it's an easy read and targeted at beginners</span>
