<div class="post-text" itemprop="text">
<p>I have a recursion function where it produces a list of paths from a set of edges. However, sometimes due to the nature of the graph it goes into a loop and produces a dictionary that contains the infinite loop symbol <strong>[...]</strong> in the list, for example: </p>
<pre><code>{('a', 'b'): [[1, 2, 8, 9, 18, 6, 5], [...], [1, 2, 7, 5], [1, 4, 3, 10, 9, 18, 6, 5]]}
</code></pre>
<p>Naturally, when my program loops over this output dictionary and encounters "<strong>[...]</strong>" it raises  the following error</p>
<pre><code>a = {('a', 'b'): [[1, 2, 8, 9, 18, 6, 5], [...], [1, 2, 7, 5], [1, 4, 3, 10, 9, 18, 6, 5]]}
                                                         ^
SyntaxError: invalid syntax
</code></pre>
<p>Because I am not sure what to call "<strong>[...]</strong>". My search on Google did not yield any useful result.</p>
<p>I would like to know is there any way to a remove the <strong>[...]</strong> from the list, for example to produce the following dictionary from the previous example:</p>
<pre><code>{('a', 'b'): [[1, 2, 8, 9, 18, 6, 5], [1, 2, 7, 5], [1, 4, 3, 10, 9, 18, 6, 5]]}
</code></pre>
<p>I would appreciate any feedback. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is not what you think, <code>[...]</code> means that the same list has been appended to the original list like this:</p>
<pre><code>a = [1, 2, 3]
a.append(a)
[1, 2, 3, [...]]
</code></pre>
<p>So the problem is there that you create your list, you should fix your logic there. I mean that is better to do that. but try this, it might help:</p>
<pre><code>your_dict[('a','b')].remove(your_dict[('a','b')])
</code></pre>
<p>you can replace <code>.remove(your_dict[('a','b')])</code> with that cyclic element if you find which is.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have an option like "print-circle" of common lisp that allows serialization and deserialization of circular data structures; if you need that there is the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> module.</p>
<p>If you only need a custom serialization and not de-serialization that will rebuild the full data structure you can just keep a set of already found members:</p>
<pre><code>def serialize(x, known=None): 
    if known is None: known = set() 
    if isinstance(x, list): 
        if id(x) in known: 
            return "[-1]" 
        else: 
            known.add(id(x)) 
            res = "[" + ",".join(serialize(y, known) for y in x) + "]" 
            known.remove(id(x)) 
            return res 
    else: 
        return repr(x)
</code></pre>
<p>in the code above I'm outputting <code>[-1]</code> where a back-reference would have been present.</p>
<p>If you also want to be able to rebuild the original structure (including loops) in your custom serialization the code is slightly more complex. Basically you</p>
<ol>
<li>Assign a unique number to each new list you find</li>
<li>When you see an already known list you store in the stream the list reference number instead of recurse</li>
<li>You never remove elements from the <code>known</code> dictionary mapping lists to reference numbers</li>
</ol>
<p>During de-serializiation you need to build the same reference number map and when a reference is met you just pick the list from the map (it's guaranteed that if you find a reference number that list has already been met). The only tricky part to pay attention to is that both when serializing and de-serializing you need to put the list in the map BEFORE recursing.</p>
</div>
<span class="comment-copy">Thank you very much Mehrdad. Now It makes sense to me; and you are right I should fix my logic.</span>
<span class="comment-copy">Thank you. Your code is really useful.</span>
