<div class="post-text" itemprop="text">
<p>I program in python for a while and I've found that this language is very programmer friendly, so that maybe there is a technique that I don't know how to compose a list with conditional elements. The simplified example is:</p>
<pre class="lang-py prettyprint-override"><code># in pseudo code
add_two = True
my_list = [
  "one",
  "two" if add_two,
  "three",
]

</code></pre>
<p>Basically I'm looking for a handy way to create a list that contains some that are added under some specific condition.</p>
<p>Some alternatives that don't look such nice:</p>
<pre class="lang-py prettyprint-override"><code>add_two = True

# option 1
my_list = []
my_list += ["one"]
my_list += ["two"] if add_two else []
my_list += ["three"]


# option 2
my_list = []
my_list += ["one"]
if add_two: my_list += ["two"]
my_list += ["three"]

</code></pre>
<p>Is there something that can simplify it? Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can create a list of bools representing what elements you want to keep from a candidate list, you can do this pretty succinctly. For example:</p>
<pre><code>candidates = ['one', 'two', 'three', 'four', 'five']
include = [True, True, False, True, False]
result = [c for c, i in zip(candidates, include) if i]
print(result)
# ['one', 'two', 'four']
</code></pre>
<p>If you can use numpy, this gets even more succinct:</p>
<pre><code>import numpy as np
candidates = np.array(['one', 'two', 'three', 'four', 'five'])
include = [True, True, False, True, False]
print(candidates[include])  # can use boolean indexing directly!
# ['one', 'two', 'four']
</code></pre>
<p>Finally, as suggested in a comment, you can use <a href="https://docs.python.org/3.1/library/itertools.html#itertools.compress" rel="nofollow noreferrer"><code>itertools.compress()</code></a>. Note that this returns an iterator, so you have to unpack it.</p>
<pre><code>from itertools import compress
print([v for v in compress(candidates, include)])
# ['one', 'two', 'four']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In one line you can write:</p>
<pre><code>my_list = ['one'] + (['two'] if add_two else []) + ['three']
</code></pre>
<p>Or use a list comprehension:</p>
<pre><code>my_list = [x for x in ('one', 'two' if add_two else '', 'three') if x]
</code></pre>
<p>Or the functional way to remove Falsy values:</p>
<pre><code>my_list = list(filter(None, ('one', 'two' if add_two else '', 'three')))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First I'd write a simple predicate function that determines whether or not a value should be included. Let's pretend that in this list of integers you only want to include those numbers <code>&gt;0</code>.</p>
<pre><code>def is_strictly_positive(x):
    return x &gt; 0
</code></pre>
<p>Then you can have your whole list of numbers:</p>
<pre><code>lst = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>And filter them:</p>
<pre><code>filter(is_strictly_positive, lst)  # 1 2 3 4 5 6 7
</code></pre>
<p>which creates a <code>filter</code> object -- a generator that produces the values you need once. If you need a whole list, you can either do:</p>
<pre><code>new_lst = list(filter(is_strictly_positive, lst))  # [1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>or, idiomatically, use a list comprehension</p>
<pre><code>new_lst = [x for x in lst if is_strictly_positive(x)]  # [1, 2, 3, 4, 5, 6, 7]
</code></pre>
<hr/>
<p>You can also use <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.compress" rel="nofollow noreferrer"><code>itertools.compress</code></a> to produce a similar result to <code>filter</code>, but it's a little over-engineered in this simple case.</p>
<pre><code>new_lst_gen = itertools.compress(lst, map(is_strictly_positive, lst))  # 1 2 3 4 5 6 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This approach uses a <code>None</code> sentinel value for values to remove, then filters them out at the end. If your data contains <code>None</code> already, you can <a href="https://stackoverflow.com/a/52884110/2958070">create another sentinel object</a> to use instead.</p>
<pre><code>add_two = True
my_list = [
    "one",
    "two" if add_two else None,
    "three",
]

my_list = [e for e in my_list if e is not None]

print(my_list)
# ['one', 'two', 'three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>itertools</code> module has many useful functions:</p>
<pre><code>from itertools import compress, dropwhile, takewhile, filterfalse

condition1 = True
condition2 = False
condition3 = True
l = list(range(10))

print(list(compress(['a', 'b', 'c'], [condition1, condition2, condition3])))
# ['a', 'c']

print(list(dropwhile(lambda x: x &gt; 5, l)))
# [5, 6, 7, 8, 9]

print(list(takewhile(lambda x: x &lt; 5, l)))
# [0, 1, 2, 3, 4]

print(list(filterfalse(lambda x: x % 2, l))) # returns elements whose predicates == False
# [0, 2, 4, 6, 8]
</code></pre>
</div>
<span class="comment-copy">Any chance you can create a list of <code>True</code> and <code>False</code> for the values you want to include? Something like <code>[True, True, False, True]</code> to generate <code>['one', 'two', 'four']</code>?</span>
<span class="comment-copy">@Engineero but how are the bools swapped out for other values in any more of an efficient way?</span>
<span class="comment-copy">This is what <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.compress" rel="nofollow noreferrer"><code>itertools.compress</code></a> is used for :) <code>result = itertools.compress(candidates, include)</code></span>
<span class="comment-copy">@AdamSmith good call, added it to the answer!</span>
