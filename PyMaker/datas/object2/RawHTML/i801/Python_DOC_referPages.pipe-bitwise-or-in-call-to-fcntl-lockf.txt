<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/384493/4288043">This answer</a> contains the following line:</p>
<pre><code>fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
</code></pre>
<p>The pipe, is in Python a <a href="https://stackoverflow.com/questions/5988665/pipe-character-in-python">"bitwise OR"</a></p>
<p>I have checked the Python docs for <a href="https://docs.python.org/3.5/library/fcntl.html#fcntl.lockf" rel="nofollow noreferrer">fcntl.lockf(fd, cmd, len=0, start=0, whence=0)</a> and it says that cmd is one of:</p>
<blockquote>
<p>LOCK_UN – unlock</p>
<p>LOCK_SH – acquire a shared lock</p>
<p>LOCK_EX – acquire an exclusive lock</p>
</blockquote>
<p>Have also been reading about those variables <a href="https://linux.die.net/man/2/flock" rel="nofollow noreferrer">here</a></p>
<p>Does anyone understand that line and what it does and if it would work with just one argument and no pipe symbol?</p>
<p>LOCK_NB is not even mentioned in the Python docs..</p>
</div>
<div class="post-text" itemprop="text">
<p>Those names are <em>numeric constants</em>, each a power of 2. That means they are integers with a <em>single bit set</em>.</p>
<p>You can combine such numbers with <code>|</code> to produce an integer with multiple bits set, each bit representing a specific option:</p>
<pre><code>&gt;&gt;&gt; import fcntl
&gt;&gt;&gt; fcntl.LOCK_SH  # bit 1 set
1
&gt;&gt;&gt; fcntl.LOCK_EX  # bit 2 set
2
&gt;&gt;&gt; fcntl.LOCK_NB  # bit 3 set
4
&gt;&gt;&gt; fcntl.LOCK_UN  # bit 4 set
8
&gt;&gt;&gt; fcntl.LOCK_SH | fcntl.LOCK_UN  # combine bits 1 and 4
9
&gt;&gt;&gt; format(fcntl.LOCK_SH | fcntl.LOCK_UN, '04b')
'1001'
</code></pre>
<p>This is a very common way of passing setting configuration in system calls. <code>fctnl.lock()</code> is one such example, but there are many more where the same technique applies. The <a href="https://docs.python.org/3/library/os.html#os.open" rel="nofollow noreferrer"><code>os.open()</code> call</a> is another example, as are the <a href="https://docs.python.org/3/library/re.html#re.A" rel="nofollow noreferrer"><code>re</code> module flags</a>.</p>
<p>It is important to realise that these are <em>just integers</em>. Instead of setting the flags with <code>fcntl.LOCK_EX | fcntl.LOCK_NB</code> (setting bits 2 and 3), you could just pass in <code>6</code>:</p>
<pre><code>fcntl.lockf(fp, 6)
</code></pre>
<p>and there would be no difference, as far as the <code>lockf()</code> function is concerned. The point of using named constants is that using these makes for <em>self-documenting code</em>.</p>
</div>
<span class="comment-copy">related to <a href="https://stackoverflow.com/questions/44115670/combine-bitflags">stackoverflow.com/questions/44115670/combine-bitflags</a>, and any other question on SO dealing with combining bit flags</span>
<span class="comment-copy">Thanks had no idea. Checked in interpreter, <code>fcntl.LOCK_EX</code> is 2, <code>fcntl.LOCK_NB</code> is 4, <code>fcntl.LOCK_SH</code> is 1 and <code>(fcntl.LOCK_EX | fcntl.LOCK_NB)</code> is 6. Could you describe what effect changing the things in that line will do? eg what if you had just <code>fcntl.LOCK_EX</code>  and left out the pipe and the second part?</span>
<span class="comment-copy">@cardamom: first of all, teh <code>fcntl.lock()</code> call doesn't care how you create the value; you can pass in <code>4</code> or <code>6</code>. You need to read the documentation to see what will happen. Not using <code>LOCK_NB</code> means the call <i>blocks</i>, it won't return until the lock has been established. If you do set that flag, then the call raises an <code>OSError</code> exception if the lock can't be established.</span>
