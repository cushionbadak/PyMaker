<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x">Getting a map() to return a list in Python 3.x</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I am using Jupyter notebook, and for practice want to use the <code>lambda</code> and <code>filter</code> functions in my code to filter the even numbers out of a given list, consisting of numbers from 1 to 10.</p>
<p>The code shows what I have attempted to do, but the output is not what I expected.
I left the code for a while, and tried using a <code>map()</code> function, this time to square the values of the list, but it too isn't giving a proper output.</p>
<p>The <code>filter</code> code:</p>
<pre><code>l = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = filter(lambda x: x % 2 == 0, l)
print(evenNumbers)
#response
&lt;filter object at 0x000002023F87F5F8&gt;
</code></pre>
<p>The <code>map</code> code:</p>
<pre><code>l = [1,2,3,4,5,6,7,8,9,10]
squaredNumbers = map(lambda x: x ** 2, l)
print(squaredNumbers)
#response
&lt;map object at 0x000002023F85BA90&gt;
</code></pre>
<p>I expected the output to be the values <code>2, 4, 6, 8, 10</code>, and a list of squares in the second case. Instead, the code is giving me the above responses. I am pretty sure that the problem is in <code>lambda</code>, but what is it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Reading the docs of <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> (the same goes for <code>filter()</code>), it clearly states:</p>
<blockquote>
<p>Return an <strong>iterator</strong> that applies function to every item of iterable ...</p>
</blockquote>
<p>So this is the expected behaviour, as it does not calculate all elements in one go (saves memory and CPU time), but waits till you need them:</p>
<pre><code>&gt;&gt;&gt; map(lambda x: x ** 2, l)
&lt;map object at 0x7f375ec905f8&gt;
</code></pre>
<p>You can iterate over the result:</p>
<pre><code>&gt;&gt;&gt; for e in map(lambda x: x ** 2, l):
...     print(e)

1
4
9
16
25
36
49
64
81
100
</code></pre>
<p>or convert it to list or tuple:</p>
<pre><code>&gt;&gt;&gt; list(map(lambda x: x ** 2, l))
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If we try executing those set of statements in both python2 and python3,</p>
<p>for <code>filter()</code>, </p>
<p>the output of python2 will be ~ <code>[2, 4, 6, 8, 10]</code></p>
<p>whereas, the output of python3 will be ~ <code>&lt;filter object at 0x1014ba240&gt;</code></p>
<p>Similar will be the case with <code>map()</code> as well.</p>
<p>The reason is that those functions return a <strong>list in python2</strong>, whereas, <strong>in python3, they return an iterator</strong>. </p>
<p>To be able to use their result as in python2, all you have to do is convert it to a list before using the result. </p>
</div>
<span class="comment-copy">No, that's correct. Those methods return lazy objects that produce results as needed, not lists. Give the returned objects to <code>list</code> to get a forced result.</span>
<span class="comment-copy">...or iterate over them</span>
<span class="comment-copy">@Carcigenicate yes, I just viewed the page. But thanks for the response nonetheless!</span>
<span class="comment-copy">So lambda simply performs the function and waits till we ask it to give the value, right? Thanks for the help @Ralf !</span>
<span class="comment-copy">No, <code>lambda</code> returns a value imediately when being called; <code>map()</code> and <code>filter()</code> are the ones that wait to invoke your <code>lambda</code> function until you ask for the next value.</span>
<span class="comment-copy">Right, so the value sort of stays 'invisible' and the <code>map()</code> and <code>filter()</code> functions invoke it and sort of 'reveals it', right?</span>
<span class="comment-copy">Well, functions like <code>map()</code> store the <code>lambda</code> function inside and call it once for each value of the iterable. When you ask for the first value, <code>map()</code> passes the first value of the input iterable to <code>lambda</code> and returns the result, but then it waits till you ask for the next value (no calculations are done in advance).</span>
