<div class="post-text" itemprop="text">
<p>How to write test case for this code without using any external library?</p>
<p>Python program to reverse string of the input while keeping the special characters at the same place</p>
<pre><code>    #Returns true if x is an alphabetic character, false otherwise
    def isAlphabet(x):
        return x.isalpha()

    def reverse_string(input_str):
        LIST = toList(input_str)

        #Initialize left and right pointers
        r = len(LIST) - 1
        l = 0

        #Traverse LIST from both ends until 'l' and 'r'
        while l &lt; r:


            #Ignore special characters
            if not isAlphabet(LIST[l]):
                l += 1
            elif not isAlphabet(LIST[r]):
                r -= 1

            #Both LIST[l] and LIST[r] are not special 
            else:
                LIST[l], LIST[r] = swap(LIST[l], LIST[r])
                l += 1
                r -= 1

        return toString(LIST)

    # Utility functions 
    def toList(input_str): 
        List = [] 
        for i in input_str: 
            List.append(i) 
        return List

    def toString(List): 
        return ''.join(List) 

    def swap(a, b): 
        return b, a 

    # Driver code 
    input_str = "adfc_#sin*"
    print "Input string: " + input_str
    input_str = reverse_string(input_str) 
    print "Output string: " + input_str


    input_str = "hon()lo&amp;"
    print "Input string: " + input_str
    input_str = reverse_string(input_str) 
    print "Output string: " + input_str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre class="lang-py prettyprint-override"><code>input_str = "1234#as"
wanted_output = "sa#4321"

cur_output = reverse_string(input_str)

print("Input: ", input_str, "Output OK?", cur_output==wanted_output)
</code></pre>
<p>or this way:</p>
<pre class="lang-py prettyprint-override"><code>assert cur_output==wanted_output
</code></pre>
</div>
<span class="comment-copy">What have you tried so far? It should not be too hard to think of some input strings, perform the algorithm by hand, and put these input/output tuples into your test</span>
<span class="comment-copy">I have only written the program. I am new to unit testing. Can you give me an example on how to work around with this?</span>
<span class="comment-copy">Welcome to StackOverflow!  Here you can ① post your code (as a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>), ② describe what you observe it does (with which input), and ③ describe what you expect to observe instead.  This results in a clear question which can be answered.  Please take the <a href="https://stackoverflow.com/tour">tour</a> and read the <a href="https://stackoverflow.com/help/how-to-ask">How-To-Ask</a> to learn more about this.</span>
<span class="comment-copy">I would direct you to the Python builtin <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unit testing framework</a>. It's very handy.</span>
<span class="comment-copy">special character is not at same position</span>
<span class="comment-copy">Sorry! I just wanted to show the way of comparing an expected result with an actual result.</span>
