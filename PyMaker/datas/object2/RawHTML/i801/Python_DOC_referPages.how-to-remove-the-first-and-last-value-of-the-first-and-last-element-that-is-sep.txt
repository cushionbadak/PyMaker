<div class="post-text" itemprop="text">
<p>I have a python-list like this </p>
<pre><code>['6403687.6403773','6404555.6404614','6413270.6413335']
</code></pre>
<p>In this I need to remove first value of the first element(6403687) and last value of the last element(6413335) and need to join the other element like this ['6403773.6404555','6404614.6413270'].Like this I have several list with n values.I don't how to do this.If anyone please help me.</p>
<pre><code>list = ['6403687.6403773','6404555.6404614','6413270.6413335']
</code></pre>
<p>After removing the first and last values,I need a list like this</p>
<pre><code>list1 = ['6403773.6404555','6404614.6413270']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This method would do it step by step and works also for lists or arbitrary length:</p>
<pre><code>number_strings = ['6403687.6403773','6404555.6404614','6413270.6413335']

# remove first part of element
number_strings[0] = number_strings[0].split('.')[1]

# remove last part of last element
number_strings[-1] = number_strings[-1].split('.')[0]

# remove points
number_strings_rearranged = []
for element in number_strings:
    for part_string in element.split('.'):
        number_strings_rearranged.append(part_string)

# restructure with points
number_strings = [number_strings_rearranged[i]+'.'+number_strings_rearranged[i+1] for i in range(0, len(number_strings_rearranged)-1, 2)]

print(number_strings)
</code></pre>
<p>Output:</p>
<pre><code>['6403773.6404555', '6404614.6413270']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, one way to do it would be this:</p>
<pre><code>from itertools import islice

lst = ['6403687.6403773','6404555.6404614','6413270.6413335']

# split at ".", flatten and remove both ends (slice)
flat = [num for pair in lst for num in pair.split('.')][1:-1]

# pair the entries in 2s and join them
res = ['.'.join(islice(flat, 2)) for _ in range(len(flat)//2) ]
</code></pre>
<p>which produces:</p>
<pre><code>print(res)  # -&gt; ['6403773.6404555', '6403773.6404555']
</code></pre>
<hr/>
<p>Alternatively, if you do not like the last step with <code>islice</code> (I am not a big fan either), you can use the <code>grouper</code> <code>itertool</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipe</a>:</p>
<pre><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>and do instead</p>
<pre><code>res = ['.'.join(group) for group in grouper(flat, 2)]
</code></pre>
<p>with the same results of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your list is always having a count of 3, since you haven't given anything about it being dynamic:</p>
<pre><code>startList = ['6403687.6403773','6404555.6404614','6413270.6413335']
newList = []
newList.append(startList[0].split('.')[1] + '.' + startList[1].split('.')[0])
# split first value and take second half and concat with the middle value's first half
newList.append(startList[1].split('.')[1] + '.' + startList[2].split('.')[0])
# split last value and take first half and concat with the middle value's second half
</code></pre>
<p>Output:</p>
<pre><code>['6403773.6404555','6404614.6413270']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Although many people answered this question, I would like to present a different and easy way to do it for a long list by using a simple for loop.</h2>
<pre><code>aa = ['6403687.6403773','6404555.6404614','6413270.6413335']
pr, bb ="", []
for v in aa:
    l, r = v.split(".")
    bb.append(f"{pr}.{l}")
    pr = r
print (bb[1:])
</code></pre>
<p>Output:</p>
<pre><code>#Result: ['6403773.6404555', '6404614.6413270']
</code></pre>
<p>I hope this contributes :)</p>
</div>
<span class="comment-copy">Have you at least tried a naive for-loop method?</span>
<span class="comment-copy">The expected solution in your title doesn't match the process described in your question. Please fix this. Better still, find a more descriptive title since right now it's rather confusing.</span>
<span class="comment-copy">Do you know how to split a string on a certain character? Do you know how to iterate over a list in larger steps than 1? Do you know how to join two strings? Do you know how to build a new list? You'll need all these steps, but you probably can do most of them already, so which one are you stuck on? Can you show your attempts to solve this?</span>
<span class="comment-copy">yes,first and last element of the list no matter of how large it is</span>
<span class="comment-copy">Well, I deleted my comment because after reading you're desired output more carefully, I realized it's not what I thought. You're taking the second part of each element and combine it with the first part of the next element, not taking the first element and last element of the list.</span>
<span class="comment-copy">Thanks, In this method I am able to solve this</span>
<span class="comment-copy">In case of dynamic how to do this</span>
<span class="comment-copy">@Aishwarya In that case, where do the last values get added to? Please add that to your question so that it is clear.</span>
<span class="comment-copy">@Aishwarya: My answer (below) gives you a solution for any length n.</span>
<span class="comment-copy">Not too bad! However, you should add a 'bb = bb[1:]' at the end to save the correct output to 'bb'.</span>
<span class="comment-copy">Thanks! @mrCarnivore You are right, for independent code, it was good to reassign it to bb. However, I thought to leave it at bb[1:] as its self-explanatory and Aishwarya can use it as she wants.</span>
