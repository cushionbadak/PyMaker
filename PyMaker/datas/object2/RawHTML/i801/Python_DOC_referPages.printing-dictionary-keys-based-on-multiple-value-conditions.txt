<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2844516/how-to-filter-a-dictionary-according-to-an-arbitrary-condition-function">How to filter a dictionary according to an arbitrary condition function?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I have a dictionary with two values for each key, that looks like this for example:</p>
<pre><code>my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}
</code></pre>
<p>What I would like to do is return the dictionaries key if both values meet a specific requirement. So let's say I wanted every key who's first value is OVER 30, and who's second value is UNDER 0.6. Both these conditions would need to be fulfilled to return the key. So in this case I would expect Stock A and Stock D to be returned. I am happy to just print the keys off individually, but if there's a way to append a new dictionary with the key and the two values that would be great. As my knowledge of dictionaries is hopelessly incomplete my values don't have a title, they are just values, just to make things even harder.</p>
<p>The sort of code I envisage using is something like:</p>
<pre><code>if value in my_dict &gt; 30 and second value in my_dict &lt; 0.6:
   new_dict.append(key: value, second value)
</code></pre>
<p>I'm embarrassed at how completely inaccurate that attempt is, but I just don't know how to tackle this one. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this code</p>
<pre><code>my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}

new={}
for (stock,values) in my_dict.items():
     first=values[0]
     second=values[1]
     if (first&gt;30 and second&lt;0.6):
          new[name]=(first,second)
</code></pre>
<p>Hope it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterate over the dict using <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">.items()</a>, then you can unpack the tuple into 2 variables (<code>firstVal</code>, <code>secondVal</code>):</p>
<pre><code>my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}
new_dict = {}

for key, v in my_dict.items():
    firstVal, secondVal = v

    if firstVal &gt; 30 and secondVal &lt; 0.6:
        new_dict[key] = v

print new_dict
</code></pre>
<p>Prints:</p>
<pre><code>{'Stock D': (45, 0.3), 'Stock A': (100, 0.5)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a new dict by using dict comprehension.</p>
<pre><code>my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}

new_dict = {k:v for k,v in my_dict.items() if v[0]&gt;30 and v[1] &lt;0.6}
print (new_dict)
</code></pre>
<p>Result:</p>
<pre><code>{'Stock A': (100, 0.5), 'Stock D': (45, 0.3)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}

result={key:value for key,value in my_dict.items() if value[0]&gt;30 and value[1]&lt;.6}

print(result)
</code></pre>
<p>output:</p>
<pre><code>{'Stock A': (100, 0.5), 'Stock D': (45, 0.3)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_dict = {'Stock_A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}
new_dict = {} # Dictionary in which the TRUE conditions are stores


# Function which makes the comparison
def comp(Val1,Val2):
    Values = [30,0.6]
    if Val1 &gt; Values[0] and Val2 &lt; Values[1]:
        return True,(Val1,Val2)
    else:
        return False,None

# Creates the new dictionary   
for key in my_dict:
    Res = comp(my_dict[key][0],my_dict[key][1])
    if Res[0]:
        new_dict[key] = Res[1]


print(new_dict)







{'Stock_A': (100, 0.5), 'Stock D': (45, 0.3)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Creating this <code>dictionary</code> with <code>list comprehensions</code> -</p>
<pre><code>my_dict = {'Stock A': (100, 0.5), 'Stock B': (20, 0.9), 'Stock C': (40, 0.75), 'Stock D': (45, 0.3)}

my_dict_out = dict([ (k,r) for k,r in my_dict.items() if r[0]&gt;30 and r[1] &lt;0.6])

print(my_dict_out)
    {'Stock A': (100, 0.5), 'Stock D': (45, 0.3)}
</code></pre>
<p><strong>Note:</strong> This answer has been marked <code>negative</code> so many times because I had used <code>.iteritems()</code> instead of <code>.items()</code> and it doesn't work for <code>Python 3.+</code>. So, if you are using <code>Python 2.+</code>, then  use <code>.iteritems()</code> otherwise <code>.items()</code>.</p>
</div>
