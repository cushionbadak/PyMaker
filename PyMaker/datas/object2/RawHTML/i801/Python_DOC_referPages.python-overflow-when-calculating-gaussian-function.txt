<div class="post-text" itemprop="text">
<p>I am trying to calculate the value of the Gaussian function using the following definition</p>
<pre><code>from math import e

def function(x):
    return 100 / (e**((x-2000)**2))**1/16
</code></pre>
<p>But I am getting an overflow with values of 20000, 30000, 1000000, etc.
Do you know a workaround
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Use <code>math.exp</code>:</p>
<pre><code>100 / math.exp((x-2000)**2))**1/16
</code></pre>
<p>This is more performant and numerically accurate than <code>e**</code>.</p></li>
<li><p>Note that <code>...**1/16</code> probably doesn't do what you want. <code>**</code> has <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher operator precedence</a> than <code>/</code>, so the above is equivalent to <code>(...**1)/16</code>. Wrap the fraction in parentheses:</p>
<pre><code>100 / math.exp((x-2000)**2)**(1/16.0)
</code></pre>
<p>Writing <code>16</code> in floating point format (<code>16.0</code>) to prevent integer division.</p></li>
<li><p>Use exponent rules to incorporate the <code>1/16</code>:</p>
<pre><code>100 / math.exp((x-2000)**2/16.0)
</code></pre>
<p>This reduces large arguments, which helps to improve precision. </p></li>
<li><p>Flip the sign of the argument and change the division to a multiplication:</p>
<pre><code>100 * math.exp(-(x-2000)**2/16.0)
</code></pre>
<p>This will underflow instead of overflow in extreme cases. Underflows are much more well-behaved in this situation – you'll just get zero instead of an <code>OverflowError</code>.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>My advice is to rework the formula by taking the logarithm of it (i.e. convert the formula with the product of terms into the sum of the logarithm of each term) and then take the exponential of the result.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/20201706/overflowerror-34-result-too-large">OverflowError: (34, 'Result too large')</a></span>
<span class="comment-copy"><code>e**(500)</code> is <code>1.4035922178528e+217</code>. How could you possibly need <code>e**(18000)</code>, let alone squaring the exponent and using even higher exponents?</span>
<span class="comment-copy">Just think about it - <code>x = 20000 =&gt; (x-2000)^2 = 324000000</code> and then you calculate <code>e^324000000</code>. No wonder you get an overflow...</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/20201706/overflowerror-34-result-too-large" title="overflowerror 34 result too large">stackoverflow.com/questions/20201706/…</a></span>
<span class="comment-copy">I'd recommend changing 2/16 to 0.125 if the complier isn't doing it for you.</span>
<span class="comment-copy">@duffymo <code>**</code> has <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher precedence</a> than <code>/</code>; also would it really help (performance or accuracy -wise) to do this?</span>
<span class="comment-copy">No one will notice any performance issues.  I worry about integer versus floating point division.  When I enter 2/16 into my Python REPL it returns zero instead of 1/8 = 0.125.  Looks like I have Python 2.7.15 running.</span>
<span class="comment-copy">@duffymo you are right, thanks for the catch; I assumed that <code>**</code> would perform a conversion to floating point.</span>
<span class="comment-copy">I'm glad to help.  Edit your answer.</span>
