<div class="post-text" itemprop="text">
<p>I have a 2D list called Matrix. Each column can have an unequal number of rows. I need to compare the rows. If a row doesnt exist for a column then my try catch skips it and leaves the variable the row is set to as an empty string.</p>
<p>The problem is that the code will jump around to different exception blocks when an index doesn't exist. For example, if z is out of range then the code might jump to the exception rule immediately after y and execute z again. Sometimes this loop exits with values of K like 5 when it should never go past 3.</p>
<p>How can i stop the code from jumping around like this and proceed to the exception rule immediately after try. Is there a better way to compare the rows of a 2D list with different numbers of rows without erratic try catch behavior?</p>
<pre><code>while(k &lt; 3):
 x = ""
 y = ""
 z = ""
 k = 0
 try:
     x = Matrix[0][i]
 except IndexError:
     k = k + 1

 try:
     y = Matrix[1][i]
 except IndexError:
     k = k + 1

 try:
     z = Matrix[2][i]
 except IndexError:
     k = k + 1

 if k == 3:  #Prevents submitting x,y,z if they are all empty strings
     break
 i = i + 1
 results = compare(x,y,z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems you could use the <a href="http://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code> module</a> to achieve your goals:</p>
<pre><code>&gt;&gt;&gt; Matrix = [["a","b","c"],["d"], ["e", "f"]]
&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; for item in zip_longest(*Matrix, fillvalue=""):
...     print(item)
...
('a', 'd', 'e')
('b', '', 'f')
('c', '', '')
</code></pre>
</div>
<span class="comment-copy">No, because K is incremented when "i" is beyond the index of Matrix. "i" increments forever until "i" is beyond the index of Matrix[0][i], Matrix[1][i], and Matrix[2][i]. That would cause 3 exceptions consecutively making k = 3 and ending the loop. Of course thats not what happens. My program jumps to the exception block that's above the try its currently in rather than below.</span>
<span class="comment-copy">I see. Then <code>while True:</code> would also work because of the <code>break</code>. But you'd better use Python's built-in capabilities for zipping iterators of unequal length. I've reduced my answer to only that suggestion.</span>
<span class="comment-copy">I doubt your program jumps to the wrong <code>except</code> block, especially since we have no way of reproducing your problem.</span>
