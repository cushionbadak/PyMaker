<div class="post-text" itemprop="text">
<p><code>typing.py</code> (from Python 3.6.6 as bundled with Anaconda) declares <code>List</code> class as follows:</p>
<p><code>class List(list, MutableSequence[T], extra=list):</code></p>
<p>As far as my understanding goes, it means that <code>List</code> class inherits from <code>list</code> and <code>MutableSequence[T]</code>). What is the meaning of <code>extra</code> assignment in the inheritance list?</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>typing.py</code> class <code>GenericMeta</code> takes the <code>extra</code> keyword argument. The <code>extra</code> argument is simply one of the arguments that <code>GenericMeta</code> takes for internal bookeeping. The updates happen here in the <code>__new__</code> of <code>GenericMeta</code>:</p>
<pre><code>namespace.update({'__origin__': origin, '__extra__': extra,
                      '_gorg': None if not origin else origin._gorg})
</code></pre>
<p>From this point on <code>cls.__extra__</code> becomes part of <code>Typing</code>'s internal API, much like <code>__getattr__</code> or <code>__len__</code>. From the source code, it looks like <code>__extra__</code> is used to help set attributes for the class that it's passed into:</p>
<pre><code>def __init__(self, *args, **kwargs):
    super(GenericMeta, self).__init__(*args, **kwargs)
    if isinstance(self.__extra__, abc.ABCMeta):
        self._abc_registry = self.__extra__._abc_registry
        self._abc_cache = self.__extra__._abc_cache
    elif self.__origin__ is not None:
        self._abc_registry = self.__origin__._abc_registry
        self._abc_cache = self.__origin__._abc_cache
</code></pre>
<p>This code uses <code>__extra__</code> to set <code>_abc_registry</code> and <code>_abc_cache</code></p>
</div>
<span class="comment-copy">There's some more details with regards to class definition arguments in the metaclass documentation <a href="https://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#metaclasses</a> - TL;DR extra keyword arguments are passed to the metaclass.</span>
