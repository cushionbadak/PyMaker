<div class="post-text" itemprop="text">
<p>I'm wondering why I can't terminate a batch file raised from one function by using another function.</p>
<p>What I'm trying to do is to manage the batch file on my dedicated computer by <a href="https://github.com/eternnoir/pyTelegramBotAPI" rel="nofollow noreferrer">Telebot</a>.</p>
<p>My <code>test.bat</code> file:
</p>
<pre class="lang-bat prettyprint-override"><code>title test.bat
timeout /t 999
</code></pre>
<p>I've written a separated module  with functions to start and kill this batch file:
</p>
<pre class="lang-python prettyprint-override"><code>from os import path, kill
import subprocess
import signal


TEST_PATH = 'C:\\Users\\Administrator\\Desktop\\TEST\\'
un_proc = None 


class sidim(object):
    def __init__(self):
        pass

    def launch_test(self):
        test_proc = subprocess.Popen([path.join(TEST_PATH,
                                                'TEST.bat')],                                                                              
                          creationflags=subprocess.CREATE_NEW_CONSOLE)
        self.test_pid = test_proc.pid

    def kill_test(self):
        kill(self.test_pid, signal.SIGTERM)
</code></pre>
<p>And when I'm starting the batch file using the <code>/start_test</code> command it works fine and the batch file is launching properly:</p>
<pre class="lang-python prettyprint-override"><code>import telebot 
import sidimanager

bot = telebot.TeleBot('TOKEN')
sidim = sidimanager.sidim()


@bot.message_handler(commands=['start_test'])
def handle_start_test(message):
    sidim.launch_test()
    bot.reply_to(message, 'Test .bat file has been successfuly launched.')
</code></pre>
<p>But when I'm trying to terminate this batch with the <code>/kill_test</code> command the batch file ignores that and continues to work:</p>
<pre class="lang-python prettyprint-override"><code>@bot.message_handler(commands='kill_test')
def handle_kill_test(message):
    sidim.kill_test()
    bot.reply_to(message, 'Test .bat file has been successfuly killed.')
</code></pre>
<p>How can I kill it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am calling the batch through a new <code>cmd.exe</code> process. In some cases, it feels that the commands in the batch are running in the 'background':</p>
<pre><code>import subprocess

test_proc = subprocess.Popen(['cmd',  '/c',  'C:/temp/myBatch.bat'], creationflags=subprocess.CREATE_NEW_CONSOLE)
test_pid = test_proc.pid
</code></pre>
<p>Now you are having the batch running isolated in a new CMD process, that can be easily killed using <code>taskkill /F /PID 1234</code> via Popen. </p>
<p><strong>Note</strong>: You might need to provide full paths to <code>cmd.exe, taskkill.exe and your batch</code>, depending on how your 'main script' is started.</p>
</div>
<span class="comment-copy">Can you show the batch-file as well ?</span>
<span class="comment-copy">@MauriceMeyer, sure, but it just a placeholder .bat in order to reuse it several times:     <code>title test.bat timeout /t 999</code></span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/54389037/edit">edit</a> your question to include your batch file. We need enough detail to identify an adequate answer.</span>
<span class="comment-copy">@double-beep, done, but I don't think that the content of batch file is the real issue.</span>
<span class="comment-copy">Me too, but we couldn't think so if you didn't post it to us.</span>
<span class="comment-copy">Sorry, for being vague: <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.kill" rel="nofollow noreferrer">Popen.kill</a></span>
<span class="comment-copy">Thankyou, I've tried  this <code>def kill_test(self):             command = ['TASKKILL', '/F', '/T', '/PID', str(self.pid)]             subprocess.Popen(command)</code> and batch is finally dead.</span>
