<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/43568025/why-do-python-dictionaries-change-order">Why do python dictionaries change order?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I was solving an Airbnb interview question using Python3 on my machine.
The code goes as follows:</p>
<pre><code>courseMap = {
    'CSC300': ['CSC100', 'CSC200'],
    'CSC200': ['CSC100'],
    'CSC100': []
}

completedCourses = []

def addToCompletedCourses(course):
    if course not in completedCourses:
        # print("Completed:", course)
        completedCourses.append(course)

def completeCourse(course, currentPrerequisites):
    # Cyclic Dependency
    if course in currentPrerequisites:
        return False

    # Cannot take up this course
    if course not in courseMap.keys():
        return False
    # No prerequisites for this course
    elif courseMap[course] == []:
        addToCompletedCourses(course)
        return True

    for prerequsite in courseMap[course]:
        if prerequsite not in completedCourses:
            canComplete = completeCourse(prerequsite, currentPrerequisites+[course])
            if canComplete == True:
                addToCompletedCourses(course)
            else:
                return False

    addToCompletedCourses(course)
    return True


def findCourseSchedule(courseMap):
    # Check if every course can be completed
    for course in courseMap.keys():
        if completeCourse(course, []) == False:
            return None
    return completedCourses


def main():
    print(findCourseSchedule(courseMap))

if __name__ == "__main__":
    main()
</code></pre>
<p>My doubt isn't about the code, but the same program produces different outputs on my machine.</p>
<pre><code>mani-pt2396@mani-pt2396:~/Documents$ python3 course-scheduler.py
['CSC100', 'CSC200', 'CSC300']
mani-pt2396@mani-pt2396:~/Documents$ python3 course-scheduler.py
['CSC100', 'CSC300', 'CSC200']
mani-pt2396@mani-pt2396:~/Documents$ python3 course-scheduler.py
['CSC100', 'CSC200', 'CSC300']
mani-pt2396@mani-pt2396:~/Documents$ python3 course-scheduler.py
['CSC100', 'CSC200', 'CSC300']
mani-pt2396@mani-pt2396:~/Documents$ python3 course-scheduler.py
['CSC100', 'CSC200', 'CSC300']
mani-pt2396@mani-pt2396:~/Documents$ python3 course-scheduler.py
['CSC100', 'CSC300', 'CSC200']
</code></pre>
<p>I tried reproducing this issue on <a href="https://colab.research.google.com/drive/1TIqTKRx8j39mq6uHJLHakaOaszc6M95B" rel="nofollow noreferrer">Google Colab</a>, but it doesn't seem to appear over there.</p>
<p>I'm aware of data races which occur when multiple threads access the same resource. But I have not made use of multi-threading.</p>
<p>Does recursion cause this issue? Or is my machine making use of multiple cores?</p>
<p>OS - Ubuntu 16.04 LTS 64 bit</p>
<p><a href="https://ghostbin.com/paste/4qp8m" rel="nofollow noreferrer">Hardware Specifications</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionary in Python do not guaranties order of its key. For that you can use OrderedDict (<a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html#collections.OrderedDict</a>)</p>
<pre><code>courseMap = {
    'CSC300': ['CSC100', 'CSC200'],
    'CSC200': ['CSC100'],
    'CSC100': []
}
</code></pre>
<p>If you want to preserve this order then you must use OrderedDict like this:</p>
<pre><code>from collections import OrderedDict
courseMap = OrderedDict()
courseMap['CSC300'] = ['CSC100', 'CSC200']
courseMap['CSC200'] = ['CSC100']
courseMap['CSC100'] = []
</code></pre>
</div>
<span class="comment-copy">Which minor version of Python? If it’s 3.5 or earlier, the order of keys in a dictionary isn’t defined.</span>
<span class="comment-copy">@Ry- Only in python3.7+ the order has been included as a language feature. CPython3.6 only happens to have that feature but other implementations of python3.6 version of the language need not provide such guarantee</span>
<span class="comment-copy">"<i>My doubt isn't about the code,</i>".. It should always be, though. Never assume that the problem isn't with your code unless you can prove it. You can reproduce the problem by iterating on the keys in some explicit order: ` for course in ['CSC300','CSC100','CSC200']:`.</span>
<span class="comment-copy">Thanks guys. The issue was in my logic. I was not relying on the order of the keys so I didn't think it would have caused the issue.</span>
<span class="comment-copy">This is false for python3.7+. In python3.7+ the insertion order is guaranteed</span>
