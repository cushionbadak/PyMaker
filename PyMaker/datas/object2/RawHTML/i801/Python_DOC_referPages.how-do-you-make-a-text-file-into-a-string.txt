<div class="post-text" itemprop="text">
<p>I use the following code segment to read a file in python:</p>
<pre><code>with open ("data.txt", "r") as myfile:
    data=myfile.readlines()
</code></pre>
<p>Input file is:</p>
<pre class="lang-none prettyprint-override"><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN
GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE
</code></pre>
<p>and when I print data I get</p>
<pre class="lang-none prettyprint-override"><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\n', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']
</code></pre>
<p>As I see data is in <code>list</code> form. How do I make it string? And also how do I remove the <code>"\n"</code>, <code>"["</code>, and <code>"]"</code> characters from it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use:</p>
<pre><code>with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use read(), not readline()</p>
<pre><code>with open('data.txt', 'r') as myfile:
  data = myfile.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can read from a file in one line:</p>
<pre><code>str = open('very_Important.txt', 'r').read()
</code></pre>
<p>Please note that this does not close the file explicitly.</p>
<p>CPython will close the file when it exits as part of the garbage collection.</p>
<p>But other python implementations won't. To write portable code, it is better to use <code>with</code> or close the file explicitly. Short is not always better. See <a href="https://stackoverflow.com/a/7396043/362951">https://stackoverflow.com/a/7396043/362951</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The simple way:</p>
<pre><code>file = open('data.txt', 'r')
text = file.read().strip()
file.close()
</code></pre>
<p>Using <code>with</code> (recommended):</p>
<pre><code>with open('data.txt', encoding='utf8') as f:
    text = f.read().strip()
</code></pre>
<p>Note: no need to close the file, <code>with</code> does <em>automagically</em>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open("data.txt") as myfile:
    data="".join(line.rstrip() for line in myfile)
</code></pre>
<p>join() will join a list of strings, and rstrip() with no arguments will trim whitespace, including newlines, from the end of strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5 or later, using <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text" rel="nofollow noreferrer">pathlib</a> you can copy text file contents into a variable <em>and close the file</em> in one line:</p>
<pre><code>from pathlib import Path
txt = Path('data.txt').read_text()
</code></pre>
<p>and then you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">str.replace</a> to remove the newlines:</p>
<pre><code>txt = txt.replace('\n', '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have fiddled around with this for a while and have prefer to use use <code>read</code> in combination with <code>rstrip</code>. Without <code>rstrip("\n")</code>, Python adds a newline to the end of the string, which in most cases is not very useful.</p>
<pre class="lang-py prettyprint-override"><code>with open("myfile.txt") as f:
    file_content = f.read().rstrip("\n")
    print file_content
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done using the read() method :</p>
<pre><code>text_as_string = open('Your_Text_File.txt', 'r').read()
</code></pre>
<p>Or as the default mode itself is 'r' (read) so simply use,</p>
<pre><code>text_as_string = open('Your_Text_File.txt').read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's hard to tell exactly what you're after, but something like this should get you started:</p>
<pre><code>with open ("data.txt", "r") as myfile:
    data = ' '.join([line.replace('\n', '') for line in myfile.readlines()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a one line, copy-pasteable solution that also closes the file object:</p>
<pre><code>_ = open('data.txt', 'r'); data = _.read(); _.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also strip each line and concatenate into a final string.</p>
<pre><code>myfile = open("data.txt","r")
data = ""
lines = myfile.readlines()
for line in lines:
    data = data + line.strip();
</code></pre>
<p>This would also work out just fine.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = open('data.txt','r')
string = ""
while 1:
    line = f.readline()
    if not line:break
    string += line

f.close()


print string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised nobody mentioned <code>splitlines()</code> yet.</p>
<pre><code>with open ("data.txt", "r") as myfile:
    data = myfile.read().splitlines()
</code></pre>
<p>Variable <code>data</code> is now a list that looks like this when printed:</p>
<pre><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']
</code></pre>
<p>Note there are no newlines (<code>\n</code>).</p>
<p>At that point, it sounds like you want to print back the lines to console, which you can achieve with a for loop:</p>
<pre><code>for line in data:
    print line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can compress this into one into two lines of code!!!</p>
<pre><code>content = open('filepath','r').read().replace('\n',' ')
print(content)
</code></pre>
<p>if your file reads:</p>
<pre><code>hello how are you?
who are you?
blank blank
</code></pre>
<p>python output</p>
<pre><code>hello how are you? who are you? blank blank
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't feel that anyone addressed the [ ] part of your question. When you read each line into your variable, because there were multiple lines before you replaced the \n with '' you ended up creating a list. If you have a variable of x and print it out just by</p>
<p>x </p>
<p>or print(x)</p>
<p>or str(x)</p>
<p>You will see the entire list with the brackets. If you call each element of the (array of sorts)</p>
<p>x[0]
then it omits the brackets. If you use the str() function you will see just the data and not the '' either.
str(x[0])</p>
</div>
<div class="post-text" itemprop="text">
<p>python3: Google "list comphrension" if the square bracket syntax is new to you.</p>
<pre><code> with open('data.txt') as f:
     lines = [ line.strip( ) for line in list(f) ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried this?</p>
<pre><code>x = "yourfilename.txt"
y = open(x, 'r').read()

print(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works:
Change your file to:</p>
<pre><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE
</code></pre>
<p>Then:</p>
<pre><code>file = open("file.txt")
line = file.read()
words = line.split()
</code></pre>
<p>This creates a list named <code>words</code> that equals:</p>
<pre><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']
</code></pre>
<p>That got rid of the "\n". To answer the part about the brackets getting in your way, just do this:</p>
<pre><code>for word in words: # Assuming words is the list above
    print word # Prints each word in file on a different line
</code></pre>
<p>Or:</p>
<pre><code>print words[0] + ",", words[1] # Note that the "+" symbol indicates no spaces
#The comma not in parentheses indicates a space
</code></pre>
<p>This returns:</p>
<pre><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN, GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open(player_name, 'r') as myfile:
 data=myfile.readline()
 list=data.split(" ")
 word=list[0]
</code></pre>
<p>This code will help you to read the first line and then using the list and split option you can convert the first line word separated by space to be stored in a list.</p>
<p>Than you can easily access any word, or even store it in a string.</p>
<p>You can also do the same thing with using a for loop.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>file = open("myfile.txt", "r")
lines = file.readlines()
str = ''                                     #string declaration

for i in range(len(lines)):
    str += lines[i].rstrip('\n') + ' '

print str
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/3277503/3345375">How to read a file line by line into a list with Python</a></span>
<span class="comment-copy">The title and the question are inconsistent. Do you really want to get rid of the \n as well?</span>
<span class="comment-copy">do you really want to remove newlines from the file/string contents, or are you just confused about the many meta-characters in your print output and actually want to keep the newlines, but not have them display as "\n"?</span>
<span class="comment-copy">To those coming here from a search engine, you're probably looking for @xiaoyu's answer</span>
<span class="comment-copy">Is there a downside in just writing <code>open("data.txt").read().replace('\n','')</code> instead?</span>
<span class="comment-copy">Yes, your version does not explicitly close the file, that will then be delayed until the garbage collector runs or the program terminates. The 'with' statement usually encapsulates some setup/teardown open/close actions.</span>
<span class="comment-copy">Thanks for the clarification. So, it seems that my version might be ok for small scripts - but OTOH it should preferably be avoided altogether to not make it a habit.</span>
<span class="comment-copy">@tuomassalo it is a huge PITA in the test/debug process, as it won't clean up the open file handles if you have to terminate prematurely or it runs into an exception.</span>
<span class="comment-copy">No, <code>rstrip('\n')</code> will only remove the newline from the last line, <code>replace('\n','')</code> removes it everywhere (essentially making the whole file one line)</span>
<span class="comment-copy">Perhaps, but it doesn't strip newlines as the OP wanted. I still like it, though.</span>
<span class="comment-copy">If you are returning a single string, stripping newlines doesn't make any sense - the OP should choose one string or stripped \n from strings in list.</span>
<span class="comment-copy">I like how this solution answers the title (as opposed to the body) of this question. Thanks.</span>
<span class="comment-copy">Works but not Unicode files. To support utf8 on python3, use an extra argument <code>encoding="utf-8"</code></span>
<span class="comment-copy">This is anti-idiomatic and not recommended. <code>open</code> should be used within a <code>with ... as</code> statement.</span>
<span class="comment-copy">yes, You are right! Nice note..</span>
<span class="comment-copy">@J.C can you explain the problem ? Is this just a question of custom or does the <code>with ... as</code> statement bring something ?</span>
<span class="comment-copy">@Titou the issue is that open.read() doesn't close the file so we either need <code>with ... as</code> or <code>str.close()</code> as demonstrated in Pedro's answer. More on the importance of closing files <a href="http://stackoverflow.com/questions/7395542/is-explicitly-closing-files-important">here</a></span>
<span class="comment-copy">@JBallin. This idiom clearly removes a source of error. Thanks !</span>
<span class="comment-copy">It is giving UnicodeDecodeError in my code See this <a href="https://stackoverflow.com/q/18649512/9339242">stackoverflow.com/q/18649512/9339242</a></span>
<span class="comment-copy">you may need to specify the character encoding.</span>
<span class="comment-copy">By far the simplest answer!</span>
<span class="comment-copy"><code>readlines</code>? ick.</span>
<span class="comment-copy">reduce(lambda x,y : x+y.rstrip('\n'), ['a\n', "b\n", 'c'], "") is a lot cooler :D</span>
<span class="comment-copy">@Duncan what would you suggest?</span>
<span class="comment-copy"><code>data = ' '.join(line.replace('\n', '') for line in myfile)</code> or MagerValp's version.</span>
<span class="comment-copy">Loops which have a <code>string += line</code> should be avoided. Some versions of Python may manage to avoid O(n^2) behaviour here but any of the other answers that have been given are better than this. Also you didn't remove the newlines that were requested so your code is just a very slow way of doing <code>string = f.read()</code></span>
<span class="comment-copy">Thank for correcting me. But one small thing is that I have not to remove the new line, because when I tested, it didn't print '\n' out. @Duncan</span>
<span class="comment-copy">This is wrong. You want   y = open(x, 'r').read()  if you're going to do it that way.</span>
<span class="comment-copy">Changing the file might work in a one off situation but if you have hundreds of files this just isnt a workable solution.</span>
<span class="comment-copy"><code>readlines()</code>? Ugh</span>
