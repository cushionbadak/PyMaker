<div class="post-text" itemprop="text">
<p>In my main python script, I want to call another python script to run, as follows: </p>
<p><code>python2 ~/script_location/my_side_script.py \
            --input-dir folder1/in_folder \
            --output-dir folder1/out_folder/ \
            --image-ext jpg \</code></p>
<p>From inside my python script, how exactly can I do this? </p>
<p>I will be using both Windows and Ubuntu, but primarily the latter. Ideally would like to be able to do on both.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could import the script in your main file.</p>
<p>Suppose you have two files: myscript.py and main.py</p>
<pre><code># myscript.py
print('this is my script!')
</code></pre>
<pre><code># main.py
print('this is my main file')
import myscript
print('end')
</code></pre>
<p>The output if you run <code>main.py</code> would be:</p>
<pre class="lang-none prettyprint-override"><code>this is my main file
this is my script
end
</code></pre>
<p><strong>EDIT:</strong> If you literally just want to call <code>python2 my_side_script.py --options asdf</code>, you could use the <code>subprocess</code> python module:</p>
<pre><code>import subprocess

stdout = subprocess.check_output(['python2', 'my_side_script.py', '--options', 'asdf'])

print(stdout)      # will print any output from your sidescript
</code></pre>
</div>
<span class="comment-copy">Use the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess module</a>. If you run into difficulty, post another question showing the code you tried.</span>
<span class="comment-copy">Would appreciate a quick answer with the syntax to get this going, thanks</span>
<span class="comment-copy">Run <code>sys.executable</code> if it should be locked into the current version or virtual environment. Otherwise if it should use some other version or installation of Python, add a shebang to the script and, in Unix, make it executable via <code>chmod +x my_side_script.py</code>. Then you can run it directly. In Windows you'll either have to explicitly run the script using py.exe (if 3.x is installed) or python.exe, or use <code>shell=True</code> to have CMD run it using the .py file association. The py.exe launcher supports Windows paths in shebangs as well as virtual Unix paths (e.g. <code>#!/usr/bin/python</code>).</span>
<span class="comment-copy">I'm looking to literally call "python2 my_side_script.py --options asdf" from within my main.py python script. How can this be done?</span>
<span class="comment-copy">@JDS, see my edit above</span>
<span class="comment-copy">Note that the OP needs Windows support as well, which has no <code>python2</code> command. I don't know if all Unix (Linux, BSD, macOS, etc) systems even have <code>python2</code>. Anyway, to use the current Python interpreter in Windows, run "python.exe" (it's in the application directory, which is always checked first). More generally, use an executable script with a shebang, and on Windows run it with <code>shell=True</code> (and hope, a lot of hope).</span>
<span class="comment-copy">@eryksun sounds good. I can do a quick if check to see if windows or not.</span>
<span class="comment-copy">@khuynh, subprocess uses <code>CreateProcess</code> in Windows. When searching for an executable the application directory is <i>always</i> checked first, so python.exe (or just <code>python</code>, since CreateProcess will add ".EXE" for us) for the current interpreter can always be found in Windows, even if <code>PATH</code> is empty. In Unix it depends on <code>PATH</code>, but Unix dumps most commands in one or two directories, so it's not an issue.</span>
