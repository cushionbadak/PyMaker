<div class="post-text" itemprop="text">
<p>I have this input, where each value has a range of 200:</p>
<pre><code>d = {'600-800': 3, '1800-2000': 3, '1000-1200': 5, '400-600': 1, '2600-2800': 1}
</code></pre>
<p>And I am looking for this expected order:</p>
<pre><code>{'400-600': 1, '600-800': 3, '1000-1200': 5, '1800-2000': 3, '2600-2800': 1}
</code></pre>
<p>Already tried something like this, but the order is just wrong:</p>
<pre><code>import collections
od = collections.OrderedDict(sorted(d.items()))
print od
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split the key into parts at <code>'-'</code> and use the first part as integer value to sort it. The second part is irrelevant for ordering because of the nature of your key-values (when converted to integer): </p>
<pre><code>d = {'600-800': 3, '1800-2000': 3, '1000-1200': 5, '400-600': 1, '2600-2800': 1}
import collections
od = collections.OrderedDict(sorted(d.items(),key =lambda x: int(x[0].split("-")[0])))
print od
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([('400-600', 1), ('600-800', 3), ('1000-1200', 5), 
             ('1800-2000', 3), ('2600-2800', 1)])
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted(iterable,key)</a></li>
</ul>
<p>Related:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/403421/how-to-sort-a-list-of-objects-based-on-an-attribute-of-the-objects">How to sort a list of objects based on an attribute of the objects?</a>  for more "sort by key" examples </li>
<li><a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">Are dictionaries ordered in Python 3.6+?</a> .. which lets you omit the OrderedDict from 3.7+ on (or 3.6 CPython)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you want to order your dictionary by the first year first (and then by the second year if needed, which is unnecessary in the given example, but feels more natural), you need to convert to integers and set a custom key:</p>
<pre><code>d = {'600-800': 3, '1800-2000': 3, '1000-1200': 5, '400-600': 1, '2600-2800': 1}

sorted(d.items(), key=lambda t: tuple(map(int, t[0].split("-"))))
# [('400-600', 1),
#  ('600-800', 3),
#  ('1000-1200', 5),
#  ('1800-2000', 3),
#  ('2600-2800', 1)]
</code></pre>
<p>The conversion to integers is needed because e.g. <code>"1000" &lt; "200"</code>, but <code>1000 &gt; 200</code>. This list can be passed to <code>OrderedDict</code> afterwards like in your code, if needed.</p>
</div>
<span class="comment-copy">Well, that's not the order <code>sorted()</code> returns your items in. So if you want a different order you should pass a sorting <code>key</code> to <code>sorted()</code> that sorts the <code>dict</code> the way you want it to be sorted.</span>
<span class="comment-copy">what is your sorting criteria??</span>
<span class="comment-copy">... when your range is a constant value of <code>200</code>, why not use the minimum value as key ? <code>600-800</code> is just eye candy.</span>
<span class="comment-copy">@TalhaIsrar The order that I am expecting is ascending from the lowest range to the maximum, in the example 400-600 to 2600-2800.</span>
<span class="comment-copy">I like this solution because it takes both the lower and the upper bound into account. Although not specified in the question this seems like a more "natural" way to sort ranges.</span>
<span class="comment-copy">In Python 2.x the output <b>must</b> be passed to <code>OrderedDict</code> to preserve the sorted order—ordinary <code>dict</code> don't preserver order before version 3.6.</span>
<span class="comment-copy">@martineau: Note that my output is a list of tuples, which is ordered. You only need to pass it to <code>OrderedDict</code> if you literally want an ordered dictionary. If all you need are the keys and values in order for a loop for example, this should be fine.</span>
<span class="comment-copy">@Graipher: I know how <code>OrderDict</code>s can be created. I believe the OP wants the result to be a dictionary that preserves order (in Python 2.x)—which is why I made the comment.</span>
<span class="comment-copy">@martineau: I clarified the answer a bit by stating that this can be passed to <code>OrderedDict</code> just like in the code OP showed.</span>
