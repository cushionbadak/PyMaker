<div class="post-text" itemprop="text">
<p>I am using a function from a python library which returns an object with a specific data type. I would like to serialize that object to a yaml file and I would like to use <a href="https://yaml.readthedocs.io/en/latest/" rel="nofollow noreferrer">ruamel.yaml</a>. The problem is that <code>ruamel.yaml</code> does not know how to serialize the specific data type that the function returns and throws an exception:</p>
<pre><code>RepresenterError: cannot represent an object: &lt;...&gt;
</code></pre>
<p>The question is how to "declare" the data type to <code>ruamel.yaml</code> so that it knows how to handle it. </p>
<p>Note: I can't / I don't want to make changes to the library or anything of that sort. I am only the consumer of an API.</p>
<p>To make this more concrete, let's use the following example that uses <a href="https://docs.python.org/3/library/socket.html#constants" rel="nofollow noreferrer"><code>socket.AF_INET</code></a> which happens to be an <a href="https://github.com/python/cpython/blob/b2b023c657ba8c3f4a24d0c847d10fe8e2a73d44/Lib/socket.py#L67-L76" rel="nofollow noreferrer"><code>IntEnum</code></a> but the specific data type should not be important.</p>
<pre class="lang-py prettyprint-override"><code>import sys
import socket

import ruamel.yaml

def third_party_lib():
    """ Return a dict with our data """
    return {"AF_INET": socket.AF_INET}

yaml = ruamel.yaml.YAML(typ="safe", pure=True)
yaml.dump(third_party_lib(), sys.stdout)
</code></pre>
<p>which gives this error:</p>
<pre><code>    ruamel.yaml.YAML.dump(self, data, stream, **kw)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/main.py", line 439, in dump
    return self.dump_all([data], stream, _kw, transform=transform)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/main.py", line 453, in dump_all
    self._context_manager.dump(data)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/main.py", line 801, in dump
    self._yaml.representer.represent(data)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/representer.py", line 84, in represent
    node = self.represent_data(data)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/representer.py", line 111, in represent_data
    node = self.yaml_representers[data_types[0]](self, data)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/representer.py", line 359, in represent_dict
    return self.represent_mapping(u'tag:yaml.org,2002:map', data)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/representer.py", line 222, in represent_mapping
    node_value = self.represent_data(item_value)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/representer.py", line 121, in represent_data
    node = self.yaml_representers[None](self, data)
  File "/home/feanor/Prog/git/vps-bench/.direnv/python-venv-3.7.2/lib/python3.7/site-packages/ruamel/yaml/representer.py", line 392, in represent_undefined
    raise RepresenterError('cannot represent an object: %s' % data)
ruamel.yaml.representer.RepresenterError: cannot represent an object: AddressFamily.AF_INET
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order for <code>ruamel.yaml</code> to be able to dump a specific class, whether you define it, you get it 
from the standard library or get if from somewhere else, you need to <em>register</em> that class against the representer.
(This is not necessary when using <code>YAML(typ='unsafe')</code>, but I assume you don't want to resort to that).</p>
<p>This registration can be done in different ways. Assuming you have
done <code>yaml = ruamel.yaml.YAML()</code> or <code>yaml = ruamel.yaml.YAML(typ='safe')</code>, and want to represent <code>SomeClass</code>, you can:</p>
<ul>
<li>use <code>yaml.register_class(SomeClass)</code>. This might work on other classes depending
on how they are defined.</li>
<li>use one of the decorators <code>@yaml_object(yaml)</code> or <code>@yaml.register_class</code>, just before the <code>class SomeClass:</code>
definition. This is primarily of use when defining your own classes</li>
<li>add a representer directly using:
    yaml.representer.add_representer(SomeClass, some_class_to_yaml)</li>
</ul>
<p>The first two ways are just syntactic sugar wrapped around the third
way, and they will try to use a method <code>to_yaml</code> and a class attribute
<code>yaml_tag</code> if available, and try to do something sensible if either is
not available.</p>
<p>You can try <code>yaml.register(socket.AF_INET)</code>, but you'll notice that it fails because:</p>
<blockquote>
<p>AttributeError: 'AddressFamily' object has no attribute '<strong>name</strong>'</p>
</blockquote>
<p>So you'll have to resort to the third way using
<code>add_representer()</code>. The argument <code>some_class_to_yaml</code> is a function
that will be
called when a <code>SomeClass</code> instance is encountered, and that function is called
with the <code>yaml.representer</code> instance as first argument and with the actual data
(the instance of <code>SomeClass</code>) as second argument.</p>
<p>If <code>SomeClass</code> is some container type that could recursively reference itself (indirectly), 
you need to take special care dealing with that possibility, but for <code>socket.AF_INET</code> this is not necessary.</p>
<p>The specific data type is in so far important, that you need to decide
<em>how</em> to represent the type in YAML. Quiet often you'll see that that
attributes of <code>SomeClass</code> are used as keys in a mapping (and then it
is the mapping that gets the tag), but sometimes the type can be
directly represented in a non-collection type available in YAML such
as a string, int, etc., for other classes it makes more sense to be
represented as a (tagged) sequence.</p>
<p>When you print <code>type(socket.AF_INET)</code>, you'll notice that "SomeClass" is actually <code>AddressFamily</code>.
And after inspecting <code>socket.AF_INET</code> using <code>dir()</code>, you'll notice that there is a <code>name</code> attribute and
that nicely gives you a string <code>'AF_INET'</code>, which can be used to tell the representer 
how to represent this data as a string, without resorting to some lookup:</p>
<pre><code>import sys
import socket
import ruamel.yaml


def repr_socket(representer, data):
    return representer.represent_scalar(u'!socket', data.name)

yaml = ruamel.yaml.YAML()
yaml.representer.add_representer(socket.AddressFamily, repr_socket)

data = dict(sock=socket.AF_INET)
yaml.dump(data, sys.stdout)
</code></pre>
<p>which gives:</p>
<pre><code>sock: !socket AF_INET
</code></pre>
<p>Make sure the tag is defined as unicode (necessary in case you are using Python 2.7).</p>
<p>If you also want to load this, you can extend the <code>constructor</code> in an similar way. But
this time you'll get a <code>Node</code> that you need to convert to <code>AddressFamily</code> instance.</p>
<pre><code>yaml_str = """\
- !socket AF_INET
- !socket AF_UNIX
"""

def constr_socket(constructor, node):
    return getattr(socket, node.value)

yaml.constructor.add_constructor(u'!socket', constr_socket)
data = yaml.load(yaml_str)

assert data[0] == socket.AF_INET
assert data[1] == socket.AF_UNIX
</code></pre>
<p>which runs without throwing an exception, and shows that the other
constants in <code>socket</code> are handled as well.</p>
</div>
<span class="comment-copy">You really should have used <code>syaml.dump(third_party_lib(), sys.stdout)</code> instead of what you were doing, as documented that is slow and memory-inefficient. Here it just distracts from the real issue: that there is no representer registered ("declared") for <code>AddressFamily</code></span>
<span class="comment-copy">Perfect! thank you so much :)</span>
<span class="comment-copy">@pmav99 And this probably would not have fitted in a comment under the other question.</span>
