<div class="post-text" itemprop="text">
<p>I try to install <a href="https://github.com/andreasgrill/auto-selfcontrol" rel="nofollow noreferrer">Auto-SelfControl</a> and got stuck when executing this command:</p>
<pre><code>sudo /usr/bin/python auto-selfcontrol.py
</code></pre>
<p>It shows the error:</p>
<blockquote>
<p>AttributeError: 'dict' object has no attribute 'has_key'</p>
</blockquote>
<p>I'm searching for solutions and end up with replacing <em>has_key</em> for <em>in</em> operator but as I only know the basics of python, the code is quite complex for me.</p>
<p>There're 3 places where <em>has_key</em> have been used, can you help me change it so I can run with python3?</p>
<p>1.</p>
<pre><code>def check_if_running(username):
""" checks if self-control is already running. """
defaults = get_selfcontrol_settings(username)
return defaults.has_key("BlockStartedDate") and not NSDate.distantFuture().isEqualToDate_(defaults["BlockStartedDate"])
</code></pre>
<p>2-4.</p>
<pre><code>def check_config(config):
""" checks whether the config file is correct """
if not config.has_key("username"):
    exit_with_error("No username specified in config.")
if config["username"] not in get_osx_usernames():
    exit_with_error(
            "Username '{username}' unknown.\nPlease use your OSX username instead.\n" \
            "If you have trouble finding it, just enter the command 'whoami'\n" \
            "in your terminal.".format(
                    username=config["username"]))
if not config.has_key("selfcontrol-path"):
    exit_with_error("The setting 'selfcontrol-path' is required and must point to the location of SelfControl.")
if not os.path.exists(config["selfcontrol-path"]):
    exit_with_error(
            "The setting 'selfcontrol-path' does not point to the correct location of SelfControl. " \
            "Please make sure to use an absolute path and include the '.app' extension, " \
            "e.g. /Applications/SelfControl.app")
if not config.has_key("block-schedules"):
    exit_with_error("The setting 'block-schedules' is required.")
if len(config["block-schedules"]) == 0:
    exit_with_error("You need at least one schedule in 'block-schedules'.")
if config.get("host-blacklist", None) is None:
    print("WARNING:")
    msg = "It is not recommended to directly use SelfControl's blacklist. Please use the 'host-blacklist' " \
          "setting instead."
    print(msg)
    syslog.syslog(syslog.LOG_WARNING, msg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While the piecemeal solutions in the other answers will work, that approach is flawed simply because it's too easy to make a small mistake, miss a place that needs fixing, etc. The better solution is to just use <a href="https://docs.python.org/3/library/2to3.html" rel="nofollow noreferrer">the <code>2to3</code> converter</a>. You could fix all of your files in one fell swoop with:</p>
<pre class="lang-bash prettyprint-override"><code>$ 2to3 -f has_key -w auto-selfcontrol.py
</code></pre>
<p>That only runs <a href="https://docs.python.org/3/library/2to3.html#2to3fixer-has_key" rel="nofollow noreferrer">the <code>has_key</code> fixer</a> which converts from <code>dict.has_key(key)</code> to <code>key in dict</code>. Sure you could make the fix yourself, but this is a case where simple programmatic fixers work just fine. You might just want to run it without <code>-f has_key</code> so it applies all the fixers at once, in case there are any other breaking changes that apply between Py2 and Py3.</p>
<p><code>2to3</code> handles just about everything automatically, with the exception of Py2 <code>str</code> type changes (where it's a code logic decision on whether a given <code>str</code> literal should be <code>bytes</code> or <code>str</code> in Py3) and integer division (where <code>/</code> might need to change to <code>//</code>, based on whether the computation is logically floating point division or floor division). But for <code>has_key</code>, it's pretty reliable.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Replace as follows</strong></p>
<p>1.</p>
<pre><code>def check_if_running(username):
""" checks if self-control is already running. """
defaults = get_selfcontrol_settings(username)
return "BlockStartedDate" in defaults and not NSDate.distantFuture().isEqualToDate_(defaults["BlockStartedDate"])
</code></pre>
<p>2-4.</p>
<pre><code>def check_config(config):
""" checks whether the config file is correct """
if not "username" in config:
    exit_with_error("No username specified in config.")
if config["username"] not in get_osx_usernames():
    exit_with_error(
            "Username '{username}' unknown.\nPlease use your OSX username instead.\n" \
            "If you have trouble finding it, just enter the command 'whoami'\n" \
            "in your terminal.".format(
                    username=config["username"]))
if not "selfcontrol-path" in config:
    exit_with_error("The setting 'selfcontrol-path' is required and must point to the location of SelfControl.")
if not os.path.exists(config["selfcontrol-path"]):
    exit_with_error(
            "The setting 'selfcontrol-path' does not point to the correct location of SelfControl. " \
            "Please make sure to use an absolute path and include the '.app' extension, " \
            "e.g. /Applications/SelfControl.app")
if not "block-schedules" in config:
    exit_with_error("The setting 'block-schedules' is required.")
if len(config["block-schedules"]) == 0:
    exit_with_error("You need at least one schedule in 'block-schedules'.")
if config.get("host-blacklist", None) is None:
    print("WARNING:")
    msg = "It is not recommended to directly use SelfControl's blacklist. Please use the 'host-blacklist' " \
          "setting instead."
    print(msg)
    syslog.syslog(syslog.LOG_WARNING, msg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A formal source for the solution is here: <a href="https://portingguide.readthedocs.io/en/latest/dicts.html" rel="nofollow noreferrer">https://portingguide.readthedocs.io/en/latest/dicts.html</a></p>
<p>The TL;DR is this:</p>
<pre><code>some_dict.has_key('some key')
</code></pre>
<p>Is now:</p>
<pre><code>'some key' in some_dict
</code></pre>
<p>So, in your code:</p>
<pre><code>return defaults.has_key("BlockStartedDate") and not NSDate.distantFuture().isEqualToDate_(defaults["BlockStartedDate"])
</code></pre>
<p>Becomes:</p>
<pre><code>return "BlockStartedDate" in defaults and not NSDate.distantFuture().isEqualToDate_(defaults["BlockStartedDate"])
</code></pre>
<p>Similarly, lines like:</p>
<pre><code>if not config.has_key("selfcontrol-path"):
    # do something
</code></pre>
<p>Become like:</p>
<pre><code>if "selfcontrol-path" not in config:
    # do something
</code></pre>
<p>Note that you could also write <code>if not "selfcontrol-path" in config:</code> but the example given above is considered more Pythonic and should be preferred.</p>
</div>
<span class="comment-copy">Use Python 2, or try to use <code>2to3</code>.</span>
<span class="comment-copy"><code>has_key</code> is deprecated in Python 3. Why don't you use Python 2.7 instead?</span>
<span class="comment-copy">@anh-nguyen replace each check with syntax <a href="https://stackoverflow.com/a/1323426/1248974"><code>key in dict</code></a>, e.g. <code>return defaults.has_key("BlockStartedDate") and not ...</code> replace with <code>return "BlockStartedDate" in defaults and not ...</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1323410/should-i-use-has-key-or-in-on-python-dicts/1323426#1323426">Should I use 'has_key()' or 'in' on Python dicts?</a></span>
<span class="comment-copy">@Selcuk: Given Python 2's end of life is less than a year away (end of life is January 1, 2020), migrating (e.g. with <code>2to3</code>) now is probably a good idea.</span>
<span class="comment-copy">Thanks a lot. That solves my problem smoothly.</span>
