<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks">What is the most “pythonic” way to iterate over a list in chunks?</a>
<span class="question-originals-answer-count">
                    34 answers
                </span>
</li>
</ul>
</div>
<p>Please understand, I searched for this and it already has an <a href="https://stackoverflow.com/a/36993392/225020">answer</a>. However I'm looking for a different way to get this result. This could potentially be flagged as a <a href="https://stackoverflow.com/questions/36993313/for-loop-with-multiple-iterating-values">duplicate</a> although I think there is a cleaner answer for this possibly using <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow noreferrer">itertools</a> <em>(most likely <code>groupby</code>)</em>.</p>
<p>Say I have a list <code>data</code>. And I want 3 values at a time assume the list is number of valuesⁿ long as to rule out improper amount of values at the end.</p>
<pre><code>data = [1, 2, 3, 4, 5, 6,...]
</code></pre>
<p>Here's how I'd like to iterate through the list <em>(this code wouldn't work obviously)</em>:</p>
<pre><code>for a, b, c in data:
    #perform operations
    pass
</code></pre>
<p>Now with the code above I'd like <code>a, b, c</code> to be <code>1, 2, 3</code> then <code>4, 5, 6</code> respectively in each iteration.
I'm sure there's a cleaner approach out there than the one in the answer I linked to.</p>
<p>For the lazy people that don't want to click on a link to see the approach I'm referring to, here it is:</p>
<blockquote>
<p>You can use slices if you want to iterate through a list by pairs of successive elements:</p>
<pre><code>&gt;&gt;&gt;myList = [4, 5, 7, 23, 45, 65, 3445, 234]
&gt;&gt;&gt;for x,y in (myList[i:i+2] for i in range(0,len(myList),2)):
print(x,y)

4 5
7 23
45 65
3445 234
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here's a hacky solution with <code>iter</code> and <code>zip</code>:</p>
<pre><code>i =  [1, 2, 3, 4, 5, 6]
d = iter(i)

for a, b, c in zip(*[d]*3):
    print(a, b, c)
</code></pre>
<p>Output:</p>
<pre><code>1 2 3
4 5 6
</code></pre>
<p>Additionally if you want it to iterate over everything when your original list isn't divisible by three you can use <code>zip_longest</code> from <code>itertools</code>:</p>
<pre><code>from itertools import zip_longest


i =  [1, 2, 3, 4, 5, 6, 7]
d = iter(i)

for a, b, c in zip_longest(*[d]*3):
  print(a, b, c)
</code></pre>
<p>Output:</p>
<pre><code>1 2 3
4 5 6
7 None None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps use an iterator and increment the iterator when you want the next element in the chunk:</p>
<pre><code>data = [1, 2, 3, 4, 5, 6]
it = iter(data)

for x in it:
    a = x
    b = next(it)
    c = next(it)
    print(a, b, c)
    # Do something with a, b, and c
</code></pre>
</div>
<span class="comment-copy">dang marked as duplicate anyway. Didn't find that one. Although I did find <a href="https://stackoverflow.com/a/434328/225020">this</a> answer the one I was trying to find.</span>
<span class="comment-copy">I like this thanks! Now I want to see something along the lines of performance differences between this and something like @jspcal's approach</span>
<span class="comment-copy">That's cool, having 3 copy of the same reference to the iterator in a list</span>
<span class="comment-copy">Note this solution is precisely the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> <code>grouper</code> recipe</a> from the docs, also available in 3rd party <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.grouper" rel="nofollow noreferrer"><code>more_itertools.grouper</code></a>.</span>
<span class="comment-copy">@Jaba jspcal's approach should be faster since I'm building a list, unpacking, and passing things into zip. However iterating over a list is already really fast, and my assumption is that your performance bottleneck will be what you will do with a, b, and c instead of just the iteration.</span>
<span class="comment-copy">@Jaba the variant above is the fastest out of the three. Times are (3.5, 7, and 9.18 seconds). Note that you have a bug in your code where you use an already used up iterable to test the second variant. The times I got were after I fixed this bug.</span>
<span class="comment-copy">Thank you, I do know this is a more traditional approach. unfortunately this is not what I'm looking for, I'd like to unpack it within the for declaration.</span>
