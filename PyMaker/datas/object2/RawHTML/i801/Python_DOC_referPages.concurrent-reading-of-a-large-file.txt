<div class="post-text" itemprop="text">
<p>I'm creating a python pipeline to work on very large binary files (i.e. 50+ GB's). They are BAM files, a type of format used to represent genomes. My script is currently bottlenecked by two very computationally expensive subprocess calls.</p>
<p>These two commands take ~80% of the computation time of every run of the pipeline, so I need to figure out a way to speed this process. They read the data from the same file. I would like to know the best route forward to make this more efficient. Basically, is there a particular flavor of concurrency that would work best? Or is there some other interesting way to do this?</p>
<p>Thanks!</p>
<p>Commands:</p>
<p>subprocess.call('samtools view -b -f 68 {} &gt;{}_unmapped_one.bam'.format(self.file_path, self.file_prefix), shell=True)</p>
<p>subprocess.call('samtools view -b -f 132 {} &gt; {}_unmapped_two.bam'.format(self.file_path, self.file_prefix), shell=True)</p>
</div>
<div class="post-text" itemprop="text">
<p>For what you're describing, and the code you shared I can think of several ways to improve performance.</p>
<ol>
<li>You are spawning subprocesses inside the program's shell to handle the file, this approach would vary based on the hardware that the program is running on, if this is a multiprocessor environment, it could be a good approach.</li>
<li>Consider using the <a href="https://pysam.readthedocs.io/en/latest/" rel="nofollow noreferrer">pysam</a> library which wraps the low level hstlib API</li>
<li>Depending on the application flow you develop - you may be able to significantly improve performance by extending concurrent activities with asyncio. a recent <a href="https://realpython.com/async-io-python/#setting-up-your-environment" rel="nofollow noreferrer">article</a> by Brad Salomon shortly explains on the benefits of multiprocessing and multithreading and deep dives into asyncio.</li>
<li>If you do end up using asyncio on a unix based system, I also recommend looking at <a href="https://github.com/MagicStack/uvloop" rel="nofollow noreferrer">uvloop</a> which wraps libuv as an event loop</li>
</ol>
</div>
<span class="comment-copy">Thanks, after reading that asyncio article, I improved overall pipeline performance by ~50%!</span>
<span class="comment-copy">@ShaneElder that's great news!, by the way if you are not already - I also recommend <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">profiling</a> the software - this gives good understanding of additional things that can be improved.  also I would appreciate your upvote for this answer if you felt it was helpful :)</span>
