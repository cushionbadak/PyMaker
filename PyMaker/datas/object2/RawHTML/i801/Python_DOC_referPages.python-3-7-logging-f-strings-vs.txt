<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13500813/how-to-use-modern-string-formatting-options-with-pythons-logging-module">How to use modern string formatting options with Python's logging module?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I'm running into a performance problem in a project, and I narrowed it down to some of the log lines. It seems that f-strings are calculated even when my logging facility is above the level of the line that is logging.  </p>
<p>Consider this example to demonstrate the issue: </p>
<pre><code>import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('MyLogger')

class MyClass:
    def __init__(self, name: str) -&gt; None:
        self._name = name
    def __str__(self) -&gt; str:
        print('GENERATING STRING')
        return self._name

c = MyClass('foo')
logger.debug(f'Created: {c}')
</code></pre>
<p>When this example is run, I get "GENERATING STRING" printed to screen, indicating that the <code>__str__</code> method is being ran even though my logging level is set to <code>INFO</code> and the log line is for <code>DEBUG</code>.  </p>
<p>From what I can tell today, the solution is to use the following vs an f-string. </p>
<pre><code>logger.debug('Created: %s', c)
</code></pre>
<p>There are three things going through my head right now. </p>
<ul>
<li>Most of the examples and docs I read seem to be pretty old.</li>
<li>This project is Python 3.7+ only (not worried about being backwards compatible).   </li>
<li>I have a lot of lines of code to update. </li>
</ul>
<p>I'm curious to know what others do in this situation.  Is the <code>%s</code> the best (most modern) approach?  Is there a more modern way that I should be logging as demonstrated above? </p>
<p>I have a lot of code to update (fix), and I'm hoping to align with modern best practices. </p>
</div>
<div class="post-text" itemprop="text">
<p>IMO, using <code>%s</code> in your strings is NOT the most modern approach. Definitely, most developers will prefer to use f-strings because it is more convenient and easy to read (and write).</p>
<p>But, you interestingly find a specific case where you may don't want to use f-string. If you need to avoid automatic call of <code>__str__()</code> method because of optimisation issue, then it is probably a good enough reason to use <code>%s</code> instead of f-strings. But, this could also indicate that something may be done in your program to reduce the complexity of <code>__str__()</code>. Most of the time it shouldn't take so much time or resources to calculate a string representation for an object...</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">documentation</a> says that the logging lib is optimized to use the <code>%s</code> formatting style. I can't remember where it is mentionned exactly, but I read it a few months ago. </p>
<p><strong>Edit</strong> - Found! <a href="https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles</a><br/>
<strong>Edit2</strong> - <em>(thanks to Robin Nemeth)</em>: <a href="https://docs.python.org/3/howto/logging.html#optimization" rel="nofollow noreferrer">https://docs.python.org/3/howto/logging.html#optimization</a></p>
</div>
<span class="comment-copy">IMO, use f-strings, they are more efficient <i>and</i> more readable.</span>
<span class="comment-copy">Did you read this? <a href="https://docs.python.org/3/howto/logging.html#optimization" rel="nofollow noreferrer">docs.python.org/3/howto/logging.html#optimization</a> You should use <code>%s</code> for the exact reason you described above (If I understood it correctly actually)</span>
<span class="comment-copy">@jpp Even if the f-string is always evaluated and the <code>%</code> string only if needed within the logging method? (Note: OP is not evaluating the <code>%</code> string immediately but passing the parameters to the logging method)</span>
<span class="comment-copy">IIRC, a main advantage of <code>%</code> is that the logger will try its best to log <i>something</i>, even if interpolating the arguments into the string should fail somehow. f-strings don't have that property, and the entire logging call may fail. Totally <code>[citation-needed]</code> though.</span>
<span class="comment-copy">Here's a better link without the <code>__</code> requirement: <a href="https://stackoverflow.com/questions/13131400/logging-variable-data-with-new-format-string/24683360#24683360" title="logging variable data with new format string">stackoverflow.com/questions/13131400/â€¦</a></span>
<span class="comment-copy">Agreed, I would defiantly prefer the f-string syntax.  In this case, the <code>__str__</code> method converts an epoch timestamp into a human readable date.  It's a performance issue because it's being called millions of times in debug logging.</span>
<span class="comment-copy">here is the link <a href="https://docs.python.org/3/howto/logging.html#optimization" rel="nofollow noreferrer">docs.python.org/3/howto/logging.html#optimization</a></span>
