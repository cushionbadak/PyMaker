<div class="post-text" itemprop="text">
<p>I have a flask application that I would like to be able to use to start another flask application (unknown at runtime of the main application) on a different port. These child applications are intended to be very simple and be spun up/spun down as needed, however, it's preferable that this gets accomplished from within the main flask app. </p>
<p>I don't believe that DispatcherMiddleware is the solution since the child app is undetermined when the main app starts.</p>
<p>This <a href="https://stackoverflow.com/questions/40460846/using-flask-inside-class">question</a> about using flask inside of a class is the route I began down. Here is the slightly modified file I'm using:</p>
<pre><code>from flask import Flask, request, redirect, Response


class EndpointAction(object):

    def __init__(self, action):
        self.action = action
        self.response = Response(status=200, headers={})


    def __call__(self, *args):
        self.action()
        return self.response


class AppWrapper(object):

     def __init__(self, name, host='0.0.0.0', port=8080, cert_path=None, key_path=None):
        self.app = Flask(name)
        self.host = host
        self.port = port

        if None not in [cert_path, key_path]:
            self.context = (cert_path, key_path)
        else:
            self.context = None


    def run(self):
        self.app.run(host=self.host, port=self.port, ssl_context=self.context)


    def add_endpoint(self, endpoint=None, endpoint_name=None, handler=None):
        self.app.add_url_rule(endpoint, endpoint_name, EndpointAction(handler))


def action():
    return 'welcome to my page'
</code></pre>
<p>However, when I try calling run from my main app's routes file I get warning that <code>app.run()</code> is being ignored.</p>
<pre><code>@app.route('/start')
def start():
    child = AppWrapper(name='test')
    child.add_endpoint(endpoint='/ad', endpoint_name='ad', handler=action)
    child.run()
    return 'started'
</code></pre>
<p><code>Warning: Silently ignoring app.run() because the application is run from the flask command line executable.  Consider putting app.run() behind an if __name__ == "__main__" guard to silence this warning.</code></p>
<p>I am currently starting the main application using <code>flask run</code> in development mode.</p>
<p>Is this the right path to go down or is there a better way? If a similar class implementation is the suggested solution, how can I get around the app.run() warning?</p>
<p>EDIT: Background on what I'm trying to accomplish. This main app is like an admin panel, running on a port with a firewall limiting who can access it. One part of the main app's functionality is to accept and store configs for the secondary app. So a user will be able to POST HTML and 1-4 basic routes (among other configs) that the secondary app will serve. Within the main app, I'm trying to allow a flask app to run based off the configs specified by the user. So when the user chooses to temporarily serve that app, the secondary flask app with start on a separate port that can be seen externally.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd think about the time-effort tradeoff here.  Instead of building an app which builds apps, it may be easier to train your users to build the apps themselves, possibly even providing basic templates for them to get productive quickly.</p>
<p>Also you mention custom HTML being submited through your portal, which sounds like you want to have users submit Jinja2 templates through the portal, which in turn would need to be written to the filesystem and loaded by the child applications.  This will no doubt create issues if the users submit buggy templates, which cause the application to crash, taking all the other child apps with them, because everything's running from the same python interpreter.</p>
<p>However, I understand the difficulty of training potentially non-technical staff to use flask.  If you still want to stick with the portal idea, it might be worth defining the configuration values which you want to make user configurable, and implementing a CRUD system to validate these inputs and store them in a database.</p>
<p>When the child app launches (in a separate python process) you could pull these values from the database and use them to construct the application.  davidism from the flask team has an answer which <a href="https://stackoverflow.com/a/27111957/2052575">talks about pulling config from the database</a>.</p>
<p>I'd also have a look at docker. The Flask mega tutorial has a <a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xix-deployment-on-docker-containers" rel="nofollow noreferrer">whole section on docker</a> which should give you an idea of the capabilities.</p>
<p>There's also a <a href="https://github.com/docker/docker-py" rel="nofollow noreferrer">Python SDK for Docker</a> which gives you all the capabilites of the docker terminal commands within python. </p>
<p>So in theory you could have:</p>
<ul>
<li><p>A parent app which presents a portal to the users, allowing them to define a requried config which is validated and stored in the database.</p></li>
<li><p>A child application which will read a config from the database, and initilize the Flask application object based on this config.  This can be manually configured to run within a docker container. </p></li>
<li><p>The ability to launch the child app containers from within the parent app, using the python docker sdk to do this.  Should be easy once you've already made the child app docker-capable.</p></li>
</ul>
<p>This would have the advantage of isolating all of the components, but may involve more development time than you'd hoped for.</p>
<p>Of course you could find some middle ground between user-training and automation which would serve your purpose.</p>
</div>
<span class="comment-copy">A good combination of simplicity and extendability would be to run a separate app as <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer">subrocess</a> <code>subprocess.run("python run_my_app.py", env={"PORT": new_port}, shell=True)</code></span>
<span class="comment-copy">@Fian I might be wrong, but I think this would require my secondary app to have previously been defined in run_my_app.py. I'm exploring the class implementation because I want data posted to the main app to allow for customization of the secondary app.</span>
<span class="comment-copy">Can you be more specific about which data the main app will recieve and how it will customise the second app?  It sounds like you're trying to implement your own scaling or loadbalancing system in Flask, which may be a waste of time when other systems like docker could provide this. <code>Is this the right path to go down or is there a better way?</code> Can you update the question with more context/a complete description of what you're actually trying to acheive, so we can advise you on the correct tools for the job.</span>
<span class="comment-copy">@v25 I've edited the post to better address my intent. Part of what the main app will do is receive configs that it can use spin up a child app up. Child apps will be simple and only run temporarily. It is not meant to be a scaling/load balancer. Hopefully, this helps.</span>
<span class="comment-copy">The users who will be accessing the admin portal...  Where do they fall on a scale of (1) public internet users, (5) internal company staff, (10) the whole thing's a concept/hobby?</span>
