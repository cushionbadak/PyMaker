<div class="post-text" itemprop="text">
<p>When using __new__ to customize the creation of a metaclass, we can pass attributes to the type().__new__ method which will be set on the object before it is returned, e.g.</p>
<pre><code>class Foo(type):    
    def __new__(cls, name, bases, attrs):
        attrs['customAttr'] = 'someVal' 
        return type.__new__(cls, name, bases, attrs)
</code></pre>
<p>So that:</p>
<pre><code>&gt;&gt; Foo.__dict__
{'customeAttr': 'someVal', ...}
</code></pre>
<p>However I don't know how to do the same for a normal (non-meta) class, which causes a problem when using __setattr__:</p>
<pre><code>class Bar(object):
    def __new__(cls, someVal):
        obj = object().__new__(cls) # cant pass custom attrs
        obj.customAttr = someVal # obj is already a Bar and invokes __setattr__
        return obj

    def __setattr__(*args): raise Exception('read-only class')
</code></pre>
<p>So that unfortunately:</p>
<pre><code>&gt;&gt;&gt; Bar(42)
...
Exception: read-only class
</code></pre>
<p>In the __new__ of Bar I get back a fully fledged class instance from object() and any attribute access goes through normal lookup rules, in this case invoking __setattr__. Metaclass Foo avoids this as type() will set attributes before returning the instance during low-level creation whereas object() will not.</p>
<p>Is there a way of passing attributes to object() or is another another type I can use as the instance returned from __new__ that does allow attributes to be set before it becomes a full class instance? I am not interesting in solutions like setting __class__ after instance creation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to explictly bypass your own class's <code>__setattr__</code> by calling the <code>super</code> or root <code>object</code> <code>__setattr__</code>. So you'd change:</p>
<pre><code>obj.customAttr = someVal
</code></pre>
<p>to:</p>
<pre><code>object.__setattr__(obj, 'customAttr', someVal)
</code></pre>
<p>A less general approach (doesn't apply to <code>__slots__</code> based classes) is to directly assign to <code>__dict__</code> using <code>dict</code> operations:</p>
<pre><code>obj.__dict__['customAttr'] = someVal  # Equivalently: vars(obj)['customAttr'] = someVal
</code></pre>
<p>The first approach is what <a href="https://github.com/python/cpython/blob/master/Lib/uuid.py#L206" rel="nofollow noreferrer">the newly <code>__slots__</code>-ed <code>uuid.UUID</code></a> now uses; <a href="https://github.com/python/cpython/blob/3.7/Lib/uuid.py#L204" rel="nofollow noreferrer">before it became <code>__slots__</code>-ed, it used the second approach</a>. In both cases this was needed because they used the same <code>__setattr__</code> trick to make the type as immutable as possible (without going to the trouble of subclassing <code>tuple</code>, <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer">a la <code>typing.NamedTuple</code></a>).</p>
</div>
