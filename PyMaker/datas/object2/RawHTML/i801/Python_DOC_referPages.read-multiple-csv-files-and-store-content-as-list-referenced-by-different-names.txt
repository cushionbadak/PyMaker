<div class="post-text" itemprop="text">
<p>So I have code that basically does this:</p>
<pre><code>def setup_list(file_name):
    for item in csv file:
        list = []
        list.append(item)
</code></pre>
<p>However, I want to be able to assign list a different name each time the function is run. For example <code>list_one</code>, <code>list_two</code> etc. How can I do this?</p>
<p>From comment:</p>
<p>The end goal is too have the contents of several csv files stored in a few lists with different names. The files contain birds, dates and location in the same file. </p>
<p>I have several files as users may have several bird lists they wish to make (one for birds seen in their county/state, another file for birds seen all over the world etc.) </p>
</div>
<div class="post-text" itemprop="text">
<p>To read multiple files and its content into lists:</p>
<p><strong>Create data:</strong></p>
<pre><code>with open("birds1.txt","w") as f:
    f.write(f"""
Bird,Date,Location
Amsel,1.1.2018,Amerika
Drossel,2.1.2018,Alaska
Fink,3.1.2018,Pacific
""")

with open("birds2.txt","w") as f:
    f.write(f"""
Bird,Date,Location
Eagle,1.1.2018,Afrika
Milan,2.1.2018,Eurasia
AngryBird,3.1.2018,Rainbow Meadow
""")
</code></pre>
<p><strong>Load data:</strong></p>
<pre><code>import csv

def load_into_dict(d,filename):
    with open(filename) as f:
        csv_reader = csv.reader(f)
        name = filename.split(".")[0] 
        d[name] = []
        for row in csv_reader:
            if row:
                d[name].append(row)

data = {}
for n in ["birds1.txt","birds2.txt"]:
    load_into_dict(data,n)
</code></pre>
<p><strong>Usage of loaded data:</strong></p>
<pre><code>print(data)
print(data["birds1"][1])
</code></pre>
<p><strong><em>Output:</em></strong></p>
<pre><code>{'birds1': [['Bird', 'Date', 'Location'],      ['Amsel', '1.1.2018', 'Amerika'], 
            ['Drossel', '2.1.2018', 'Alaska'], ['Fink', '3.1.2018', 'Pacific']], 
 'birds2': [['Bird', 'Date', 'Location'],      ['Eagle', '1.1.2018', 'Afrika'], 
            ['Milan', '2.1.2018', 'Eurasia'],  ['AngryBird', '3.1.2018', 'Rainbow Meadow']]}

['Amsel', '1.1.2018', 'Amerika']
</code></pre>
<p>Documentation: </p>
<ul>
<li><a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html#csv.reader</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#dictionaries</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could create a dictionary for the lists, with your desired name as the key and the list as the value</p>
<pre><code>dictOfLists = {}

def setup_list(file_name, list_name):
    l = []
    for item in csv file:
        l.append(item)
    dictOfLists.update({list_name : l})
</code></pre>
<p>It's generally not practical or advisable to rename variables and should not be done in most cases.</p>
</div>
<span class="comment-copy">What is the end goal of this approach? Seeing the full function in some sort of pseudocode might help tailor responses to more accurately reflect what you are looking for</span>
<span class="comment-copy">You might want a dictionary. Variable names should be fixed in code, not themselves variable.</span>
<span class="comment-copy">You want a list of lists. Renaming variables (not practical) not a good idea anyway.</span>
<span class="comment-copy">could you create an <a href="https://stackoverflow.com/help/mcve">MVCE</a> and some expected output for the question? You should consider using a dictionary for the lists.</span>
<span class="comment-copy">NOTE: you shouldn't used Python built-ins as variable names (i.e. don't use <code>list</code> as a variable name)</span>
<span class="comment-copy">Thanks for this. However, I think you misunderstood my question, birds, dates and location are in the same file. I have several files as users may have several bird lists they wish to make (one for birds seen in their county/state, another file for birds seen all over the world etc.)</span>
<span class="comment-copy">Thank you very much for this detailed answer!</span>
<span class="comment-copy">Sorry to bring up this post again but I am now implementing this code. However, if the user has many lists (several hundred are possible), I would only like to load them as the user selects them. For example, if the user selected to edit bird1 to start  and then decided to edit bird5 later, could bird5 be added to the dictionary after bird 1 has or do they have to be added all at once? Also, I am planning of adding the feature of searching by bird name, date or location, would this also be possible?</span>
<span class="comment-copy">You can not have the cake and eat it too - if you want to search for stuff you either need the data in memory or you need to open one file after the other to see if a bird is in it - if you have several hundrets of files, why not transfer the data into a real database? dictionaries are only good to when you know the key - you would need 3 dicts to enable "fast" access to bird: [list of when and where and by whom seen], date: [ list of birds seen at that by, by whom and where] and location: [list of birsd by whom and whenseen] .... Tryit out and ask a new question if you get into troubles.</span>
<span class="comment-copy">Am I missing something or should data[name].append(row) be d[name].append(row) instead? Edit - I could of sworn it worked though</span>
<span class="comment-copy">Sorry about that, fixed code and moved the list declaration out of the loop</span>
<span class="comment-copy">@BillWang thanks for this, dictionaries look like a good approach</span>
