<div class="post-text" itemprop="text">
<p>Start by setting t to be the local time 1, 500, 000, 000 seconds from the start of January 1, 1970 UTC:</p>
<blockquote>
<blockquote>
<blockquote>
<p>import time
      t = time.localtime(1500000000)
      Construct the next strings by using the string time format function strftime(): (a) 'Thursday, July 13 2017'
      (b) '09:40 PM Central Daylight Time on 07/13/2017'
      (c) 'I will meet you on Thu July 13 at 09:40 PM.'</p>
</blockquote>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>According to your questions the right implementation is:</p>
<pre><code>def filesStringSearch(filename, pattern):
    with open(filename, 'r') as f:
        text = f.read()
        if len(pattern) &gt;= 3:
            return text.find(pattern) &gt; -1 or False
        else:
            return -1

filename = 'example.txt'
pattern_to_find = input('Search for a word: ')
out = filesStringSearch(filename, pattern_to_find)
print(out)
</code></pre>
<p>If you are asked to write a function that accepts two arguments, then your function must accept two arguments as here:</p>
<pre><code>def filesStringSearch(filename, pattern):
</code></pre>
<p>Then you must read the file, I did it using <code>with</code> statement. <code>with</code> statement will close our file for us, so you don't have to do it manually (and yes, you forgot to close an opened file, it is not a big problem for now, but avoid such things in big projects). You can read more about with statement there: <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Reading and writing files</a></p>
<p>What about <code>find</code> method. It is a string method, that will return index of found substring in your string, for instance <code>my_string.find('h')</code> is going to return the index of <em>first</em> substring (which is 'h') in <code>my_string</code> string. If <code>find</code> method can't find your substring it will return -1, that's why we do this: </p>
<pre><code>return text.find(pattern) &gt; -1 or False
</code></pre>
<p>As if we will find our pattern in text, then the index certainly is going to be greater that -1. Otherwise we return <code>False</code> or <code>-1</code> if pattern string's length is less than 3, according to your question</p>
<p>And at the end we take input from user and pass that input to our function with the name of file <code>example.txt</code>. We store the return value of our function in <code>out</code> variable and then print it</p>
</div>
<div class="post-text" itemprop="text">
<p>A couple things, Stack Overflow is not the place for code reviews, for that: try <a href="https://codereview.stackexchange.com/">this</a>.</p>
<p>Regardless, you have indentation problems, Python is based off of indents, you need to have the code in your function indented one ahead of your def, like so:</p>
<pre class="lang-py prettyprint-override"><code>def filesStringSearch():
    infile = open('example.txt')
    a = input('Search for a word: ')
    result = infile.read().find(a)
    #result = a.find:
    #for a in infile:
    if a.find:
        print("True")
    elif a &lt; 3:
        print("-1")
    else:
        print("False")
    return
</code></pre>
<p>Second, you're not taking an input with the function, and hard-coding the file to open; this is a simple fix however,</p>
<pre class="lang-py prettyprint-override"><code>def filesStringSearch(filename):
    infile = open(filename)
</code></pre>
<p>Third, you're not going to accomplish your goal with your if statements, if the <strong>length</strong> of the input is less than 3, you shouldn't even try to search for anything, so you need to reorder and change your boolean expressions a bit; to this:</p>
<pre class="lang-py prettyprint-override"><code>if len(a) &lt; 3:
    print("-1")
elif a.find:
    print("True")
else:
    print("False")
</code></pre>
<p>Finally, <code>a.find</code> will not work, rather you can check to see the value of result, so you can replace <code>elif: a.find</code> with:</p>
<pre class="lang-py prettyprint-override"><code>elif result != -1:
    print("True")
</code></pre>
<p>Since result will be -1 if it cannot find anything.</p>
<p>Also, the return is useless at the end.</p>
</div>
<span class="comment-copy">You have indentation issues with how this is posted, but your function takes no arguments instead of the required 2</span>
<span class="comment-copy">How do you think <code>a.find</code> knows where to look?</span>
<span class="comment-copy">So what if you're trying to make this function not be case sensitive. For example, if the string to search for is 'hello', the function should return True even if the file only has 'HELLO' or 'Hello', etc.</span>
