<div class="post-text" itemprop="text">
<p>I've been creating a solar system simulation as a project for fun and practice in python. The problem I'm facing is that storing the data for the planets in the .py itself is getting rather hectic. Example:</p>
<pre><code>    #shaped as: name, parent, type, size, orbital radius (AU), x, y, r, t, hidden, theta, orbitalperiod (y), color
    #for type 0=sun, 1=planet, 2=moon, 3=asteroid (unused)
    #x, y, r and t start as 0 and get assigned values later on. hidden is 0 or 1, if obscured by body
solsystem = [('sun', 'none', 0, 20, 0, centerx, centery, 0, 0, 0, 0, 0, (255, 255, 0)),
             ('earth', 'sun', 1, 2, 1, 0, 0, 0, 0, 0, 0, 1, (0, 0, 255)),
             ('luna', 'earth', 1, 1, 0.04, 0, 0, 0, 0, 0, 0, 0.075, (169,169,169)), #actual radius is 0.00254
             ('venus', 'sun', 1, 2, 0.675, 0, 0, 0, 0, 0, 0, 0.616, (255,255,0)),
             ('mercury', 'sun', 1, 2, 0.387, 0, 0, 0, 0, 0, 0, 0.24, (169,169,169)),
             ('mars', 'sun', 1, 2, 1.524, 0, 0, 0, 0, 0, 0, 1.88, (255, 0, 0)),
             ('jupiter', 'sun', 1, 4, 5.20, 0, 0, 0, 0, 0, 0, 11.86, (255, 0, 0)),
             ('io', 'jupiter', 1, 1, 0.08, 0, 0, 0, 0, 0, 0, 0.00484, (169,169,169)), #different radiuses for moons to keep visibility
             ('europa', 'jupiter', 1, 1, 0.12, 0, 0, 0, 0, 0, 0, 0.0097, (169,169,169)),
             ('ganymede', 'jupiter', 1, 1, 0.16, 0, 0, 0, 0, 0, 0, 0.0195, (169,169,169)),
             ('callisto', 'jupiter', 1, 1, 0.2, 0, 0, 0, 0, 0, 0, 0.0456, (169,169,169))]
</code></pre>
<p>This is what I'm currently add, and I plan on adding asteroids, more planets and moons, and all that stuff... What would be a better way to do this? To store the data in a more organized way, something like a spreadsheet perhaps so I could easily add more values if needed.</p>
<p>For reference, the full code: <a href="https://pastebin.com/L8n23bLt" rel="nofollow noreferrer">https://pastebin.com/L8n23bLt</a> (It's working pretty decently but there's quite a few kinks and bugs I still want to work out. Any tips on stuff I'm doing wrong here are appreciated too!)</p>
</div>
<div class="post-text" itemprop="text">
<p>it's <strong>OK</strong> to store values like that if it's OK for you and your project.</p>
<p>I prefer to use <strong><a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">library configparser</a></strong> or <strong>json files</strong>.</p>
<p><a href="http://buklijas.info/blog/2018/01/01/always-start-with-simple-solution/" rel="nofollow noreferrer">ConfigParser vs JSON files for config</a></p>
<p>Here is short <strong>example</strong> from my project:</p>
<pre><code>def get_current_scenario_number():
    """
    Get scenario number from temporary config.
    :return:
    """
    config = configparser.ConfigParser()
    config.read('scenario_data.ini')
    scenario_number = config['scenario_data']['scenario_config']
    return int(scenario_number)


def set_current_scenario_number(scenario_number):
    """
    Change scenario number  in temporary config.
    :param scenario_number:
    :return:
    """
    config = configparser.ConfigParser()
    config.read('scenario_data.ini')
    try:
        config['scenario_data']['scenario_config'] = str(scenario_number)
    except KeyError:
        config.add_section('scenario_data')
        config.set('scenario_data', 'scenario_config', str(scenario_number))
    with open('scenario_data.ini', 'w') as configfile:
        config.write(configfile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider a simple <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> or <a href="https://pyyaml.org/wiki/PyYAMLDocumentation" rel="nofollow noreferrer">yaml</a> file as the next step. Both will allow you to explicitly name the fields and read the elements as dictionaries. If maintaining a file by hand gets too cumbersome, consider <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">sqlite</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a lot of options in this space that work well. At the most simple end of things would be a csv file (a text-based spreadsheet) storing all of your objects, which you could then read in and parse using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module of the standard library.</p>
<p>Your CSV file could look like this:</p>
<pre><code>"sun","none",0,20,0,111,111,0,0,0,0,0,"(255,255,0)"                             
"earth","sun",1,2,1,0,0,0,0,0,0,1,"(0,0,255)"                                   
"luna","earth",1,1,0.04,0,0,0,0,0,0,0.075,"(169,169,169)"
...
</code></pre>
<p>And the reading code like this:</p>
<pre><code>import csv, ast
with open('test.csv') as csvfile: 
    reader = csv.reader(csvfile, quoting=csv.QUOTE_NONNUMERIC) 
    solsystem = [] 
    for row in reader: 
        solsystem.append(row) 
        solsystem[-1][12] = ast.literal_eval(solsystem[-1][12]) 
</code></pre>
<p>A similar alternative is to format your files using JSON, YAML, or XML, and read in and parse with with the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> or <a href="https://docs.python.org/3/library/xml.html" rel="nofollow noreferrer"><code>xml</code></a> modules of the standard library.</p>
<p>At the more complex end of the space are full relational (and non-relational) databases. Your use case, plus the fact that there is a <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer"><code>sqlite3</code></a> module in the standard library makes <code>sqlite</code> a good potential option in this space.</p>
</div>
<span class="comment-copy">I would use objects, e.g. <code>luna = moon('luna')</code>, <code>earth = planet('earth')</code>, <code>earth.add(luna)</code>, <code>sun = planet('sun')</code>, <code>sun.add(earth)</code>.</span>
<span class="comment-copy">I'd rather have something that has a more organized look, when you start to have a dozen attributes per planet things can get very hectic when it's stored in text.</span>
<span class="comment-copy">@Nick You can add sections in ConfigParser, in JSON you can use as many levels data as you want. What do you propose or what idea do you have for this?</span>
<span class="comment-copy">sqlite3 looks interesting, how would you make a database in that? Using microsoft access?</span>
<span class="comment-copy">@NickvanderKroon You'll have to use a program like <code>sqlite3</code> or you can use the python module to make the database. Alternatively, there are some GUI frontends for it but I'm not familiar enough with them to make a recommendation.</span>
