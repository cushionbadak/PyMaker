<div class="post-text" itemprop="text">
<p>So i have the following data:</p>
<pre><code>  9 22 1 1082418256   
  5 21 1 1082434689  
  26 7 1 1082448725  
  27 28 1 1082457840  
  29 25 1 1082471683  
  30 31 1 1082485106  
  30 31 1 1082485111  
  30 31 1 1082485113  
  30 31 1 1082485116  
  32 33 1 1082485623  
  34 35 1 1082493130
</code></pre>
<p>First column is node_from, second is node_to, 3rd is weight (default is 1), and the last column is timestamp.</p>
<p>My question is how can i calculate weight based on number of links between 2 nodes. For example row</p>
<pre><code>30 31 1 1082485116
</code></pre>
<p>should have weight 4 because there has been connection between these 2 nodes 4 times.</p>
<p>Thanks in advance!
 <a href="http://konect.uni-koblenz.de/networks/opsahl-ucsocial" rel="nofollow noreferrer">This</a> is the link to network with file below:</p>
</div>
<div class="post-text" itemprop="text">
<p>You can build the graph incrementally and just keep adding the weights to the edge, e.g.:</p>
<pre><code>In []
import networkx as nx

G = nx.Graph()
with open(&lt;file&gt;) as file:
    for line in file:
        e1, e2, weight, timestamp = line.strip().split()
        G.add_edge(e1, e2)
        G[e1][e2]['weight'] = G[e1][e2].get('weight', 0) + int(weight)

nx.to_dict_of_dicts(G)

Out[]:
{'9': {'22': {'weight': 1}},
 '22': {'9': {'weight': 1}},
 '5': {'21': {'weight': 1}},
 '21': {'5': {'weight': 1}},
 '26': {'7': {'weight': 1}},
 '7': {'26': {'weight': 1}},
 '27': {'28': {'weight': 1}},
 '28': {'27': {'weight': 1}},
 '29': {'25': {'weight': 1}},
 '25': {'29': {'weight': 1}},
 '30': {'31': {'weight': 4}},
 '31': {'30': {'weight': 4}},
 '32': {'33': {'weight': 1}},
 '33': {'32': {'weight': 1}},
 '34': {'35': {'weight': 1}},
 '35': {'34': {'weight': 1}}}
</code></pre>
<p>If you are willing to use additional libraries then you could create an edge list in <code>pandas</code> and convert to a graph:</p>
<pre><code>import pandas as pd

cols = ['source', 'target', 'weight', 'timestamp']
with open(&lt;file&gt;) as file:
    df = pd.read_csv(file, sep=' ', header=None, names=cols).drop('timestamp', axis=1)
G = nx.from_pandas_edgelist(df.groupby([df.source, df.target]).sum().reset_index(),  edge_attr=True)
</code></pre>
</div>
<span class="comment-copy">Welcome to SO. Did you read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and/or <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>? We would appreciate some code which shows what you already tried so far, all important information about the state you start from (how is your data stored? pandas dataframe? numpy array? list of lists? tuples, strings........?) and a proper formatting of data and code sections (it's just a matter of selecting and pressing Ctrl-k).</span>
<span class="comment-copy">So the rest of th rows will just have weight = 1?</span>
<span class="comment-copy">yes. it's just a sample from bigger file.</span>
<span class="comment-copy">So it's an ascii text file, or what?</span>
<span class="comment-copy">Great. in a moment!</span>
<span class="comment-copy">it gives me an error in line: e1, e2, weight, timestamp = line.strip().split()  ValueError: not enough values to unpack (expected 4, got 3) .. i've added the link to network and files in first post, you can take a look if you want. thanks for answer!</span>
<span class="comment-copy">it seems like there were 2 comments on the beginning of the fiile causing problems, it's reading the file fine now</span>
<span class="comment-copy">kind sir could you share with me how did you get this output? it prints all in one row for me.</span>
<span class="comment-copy">The above is the default for the <code>ipython</code> console. You can also look into the <a href="https://docs.python.org/3/library/pprint.html?highlight=pprint#module-pprint" rel="nofollow noreferrer"><code>pprint</code></a> module</span>
