<div class="post-text" itemprop="text">
<ul>
<li>How to perform a (<code>LEFT</code>|<code>RIGHT</code>|<code>FULL</code>) (<code>INNER</code>|<code>OUTER</code>) join with pandas?</li>
<li>How do I add NaNs for missing rows after merge?</li>
<li>How do I get rid of NaNs after merging?</li>
<li>Can I merge on the index?</li>
<li>How do I merge multiple DataFrames?   </li>
<li><code>merge</code>? <code>join</code>? <code>concat</code>? <code>update</code>? Who? What? Why?!</li>
</ul>
<p>... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.</p>
<p>This QnA is meant to be the next instalment in a series of helpful user-guides on common pandas idioms (see <a href="https://stackoverflow.com/questions/47152691/how-to-pivot-a-dataframe">this post on pivoting</a>, and <a href="https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio">this post on concatenation</a>, which I will be touching on, later). </p>
<p>Please note that this post is <em>not</em> meant to be a replacement for the <a href="https://pandas.pydata.org/pandas-docs/stable/merging.html" rel="noreferrer">documentation</a>, so please read that as well! Some of the examples are taken from there. </p>
</div>
<div class="post-text" itemprop="text">
<p>This post aims to give readers a primer on SQL-flavoured merging with pandas, how to use it, and when not to use it.</p>
<p>In particular, here's what this post will go through:</p>
<ul>
<li><p>The basics - types of joins (LEFT, RIGHT, OUTER, INNER)</p>
<ul>
<li>merging with different column names</li>
<li>avoiding duplicate merge key column in output   </li>
</ul></li>
<li>Merging with index under different conditions 

<ul>
<li>effectively using your named index</li>
<li>merge key as the index of one and column of another</li>
</ul></li>
<li>Multiway merges on columns and indexes (unique and non-unique)</li>
<li>Notable alternatives to <code>merge</code> and <code>join</code></li>
</ul>
<p>What this post will not go through:</p>
<ul>
<li>Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.</li>
<li>Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!</li>
</ul>
<blockquote>
<p><strong>Note</strong><br/>
  Most examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified. </p>
<p>Furthermore, all the DataFrames here can be copied and replicated so
  you can play with them. Also, see <a href="https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python">this
  post</a>
  on how to read DataFrames from your clipboard.</p>
<p>Lastly, all visual representation of JOIN operations are borrowed with
  thanks from the article
  <a href="https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins" rel="nofollow noreferrer">https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins</a>.</p>
</blockquote>
<h1>Enough Talk, just show me how to use <code>merge</code>!</h1>
<p><strong>Setup</strong> </p>
<pre><code>np.random.seed(0)
left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})    
right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})

left

  key     value
0   A  1.494079
1   B -0.205158
2   C  0.313068
3   D -0.854096

right

  key     value
0   B -2.552990
1   D  0.653619
2   E  0.864436
3   F -0.742165
</code></pre>
<p>For the sake of simplicity, the key column has the same name (for now).</p>
<p>An <strong>INNER JOIN</strong> is represented by </p>
<p>                                             <img src="https://i.stack.imgur.com/eOd1B.png" width="250"/></p>
<blockquote>
<p><strong>Note</strong><br/>
<code>A</code> here refers to the keys from the join column in the <code>left</code> DataFrame, <code>B</code>
  refers to keys from the join column in the <code>right</code> DataFrame, and the intersection
  represents keys common to both <code>left</code> and <code>right</code>.
  The shaded region represents the keys that are present in the JOIN result. This convention will be followed throughout. Keep in mind that <strong>Venn diagrams are not a 100% accurate representation of JOIN operations, so take them with a pinch of salt.</strong> </p>
</blockquote>
<p>To perform an INNER JOIN, call <a href="https://pandas-docs.github.io/pandas-docs-travis/generated/pandas.merge.html" rel="nofollow noreferrer"><code>pd.merge</code></a> specifying the left DataFrame, the right DataFrame, and the join key. </p>
<pre><code>pd.merge(left, right, on='key')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
</code></pre>
<p>This returns only rows from <code>left</code> and <code>right</code> which share a common key (in this example, "B" and "D). </p>
<p>In more recent versions of pandas (v0.21 or so), <code>merge</code> is now a first order function, so you can call <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html" rel="nofollow noreferrer"><code>DataFrame.merge</code></a>. </p>
<pre><code>left.merge(right, on='key')
# Or, if you want to be explicit
# left.merge(right, on='key', how='inner')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
</code></pre>
<p>A <strong>LEFT OUTER JOIN</strong>, or LEFT JOIN  is represented by </p>
<p>                                             <img src="https://i.stack.imgur.com/A6CJf.png" width="250"/></p>
<p>This can be performed by specifying <code>how='left'</code>. </p>
<pre><code>left.merge(right, on='key', how='left')

  key   value_x   value_y
0   A  1.764052       NaN
1   B  0.400157  1.867558
2   C  0.978738       NaN
3   D  2.240893 -0.977278
</code></pre>
<p>Carefully note the placement of NaNs here. If you specify <code>how='left'</code>, then only keys from <code>left</code> are used, and missing data from <code>right</code> is replaced by NaN.</p>
<p>And similarly, for a <strong>RIGHT OUTER JOIN</strong>, or RIGHT JOIN which is...</p>
<p>                                             <img src="https://i.stack.imgur.com/pviYs.png" width="250"/></p>
<p>...specify <code>how='right'</code>:</p>
<pre><code>left.merge(right, on='key', how='right')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
2   E       NaN  0.950088
3   F       NaN -0.151357
</code></pre>
<p>Here, keys from <code>right</code> are used, and missing data from <code>left</code> is replaced by NaN.</p>
<p>Finally, for the <strong>FULL OUTER JOIN</strong>, given by</p>
<p>                                             <img src="https://i.stack.imgur.com/JM3SP.png" width="250"/></p>
<p>specify <code>how='outer'</code>.</p>
<pre><code>left.merge(right, on='key', how='outer')

  key   value_x   value_y
0   A  1.764052       NaN
1   B  0.400157  1.867558
2   C  0.978738       NaN
3   D  2.240893 -0.977278
4   E       NaN  0.950088
5   F       NaN -0.151357
</code></pre>
<p>This uses the keys from both frames, and NaNs are inserted for missing rows in both.  </p>
<p>The documentation summarises these various merges nicely:</p>
<p><a href="https://i.stack.imgur.com/5qDIy.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/5qDIy.png"/></a></p>
<h3><strong>Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs</strong></h3>
<p>If you need <strong>LEFT-Excluding JOINs</strong> and <strong>RIGHT-Excluding JOINs</strong> in two steps.</p>
<p>For LEFT-Excluding JOIN, represented as</p>
<p>                                             <img src="https://i.stack.imgur.com/G77pJ.png" width="250"/></p>
<p>Start by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from <code>left</code> only,</p>
<pre><code>(left.merge(right, on='key', how='left', indicator=True)
     .query('_merge == "left_only"')
     .drop('_merge', 1))

  key   value_x  value_y
0   A  1.764052      NaN
2   C  0.978738      NaN
</code></pre>
<p>Where,</p>
<pre><code>left.merge(right, on='key', how='left', <b>indicator=True</b>)

  key   value_x   value_y     _merge
0   A  1.764052       NaN  left_only
1   B  0.400157  1.867558       both
2   C  0.978738       NaN  left_only
3   D  2.240893 -0.977278       both</code></pre>
<p>And similarly, for a RIGHT-Excluding JOIN, </p>
<p>                                             <img src="https://i.stack.imgur.com/jpwH8.png" width="250"/></p>
<pre><code>(left.merge(right, on='key', how='right', <b>indicator=True</b>)
     .query('_merge == "right_only"')
     .drop('_merge', 1))

  key  value_x   value_y
2   E      NaN  0.950088
3   F      NaN -0.151357</code></pre>
<p>Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an <strong>ANTI-JOIN</strong>), </p>
<p>                                             <img src="https://i.stack.imgur.com/RnXjj.png" width="250"/></p>
<p>You can do this in similar fashion—</p>
<pre><code>(left.merge(right, on='key', how='outer', indicator=True)
     .query('_merge != "both"')
     .drop('_merge', 1))

  key   value_x   value_y
0   A  1.764052       NaN
2   C  0.978738       NaN
4   E       NaN  0.950088
5   F       NaN -0.151357
</code></pre>
<h3><strong>Different names for key columns</strong></h3>
<p>If the key columns are named differently—for example, <code>left</code> has <code>keyLeft</code>, and <code>right</code> has <code>keyRight</code> instead of <code>key</code>—then you will have to specify <code>left_on</code> and <code>right_on</code> as arguments instead of <code>on</code>:</p>
<pre><code>left2 = left.rename({'key':'keyLeft'}, axis=1)
right2 = right.rename({'key':'keyRight'}, axis=1)

left2

  keyLeft     value
0       A  0.706573
1       B  0.010500
2       C  1.785870
3       D  0.126912

right2

  keyRight     value
0        B  0.401989
1        D  1.883151
2        E -1.347759
3        F -1.270485
</code></pre>
<p></p>
<pre><code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')

  keyLeft   value_x keyRight   value_y
0       B  0.010500        B  0.401989
1       D  0.126912        D  1.883151
</code></pre>
<h3><strong>Avoiding duplicate key column in output</strong></h3>
<p>When merging on <code>keyLeft</code> from <code>left</code> and <code>keyRight</code> from <code>right</code>, if you only want either of the <code>keyLeft</code> or <code>keyRight</code> (but not both) in the output, you can start by setting the index as a preliminary step.</p>
<pre><code>left3 = left2.set_index('keyLeft')
left3.merge(right2, left_index=True, right_on='keyRight')

    value_x keyRight   value_y
0  0.010500        B  0.401989
1  0.126912        D  1.883151
</code></pre>
<p>Contrast this with the output of the command just before (thst is, the output of <code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')</code>), you'll notice <code>keyLeft</code> is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation. </p>
<h3><strong>Merging only a single column from one of the <code>DataFrames</code></strong></h3>
<p>For example, consider</p>
<pre><code>right3 = right.assign(newcol=np.arange(len(right)))
right3
  key     value  newcol
0   B  1.867558       0
1   D -0.977278       1
2   E  0.950088       2
3   F -0.151357       3
</code></pre>
<p>If you are required to merge only "new_val" (without any of the other columns), you can usually just subset columns before merging:</p>
<pre><code>left.merge(right3[['key', 'newcol']], on='key')

  key     value  newcol
0   B  0.400157       0
1   D  2.240893       1
</code></pre>
<p>If you're doing a LEFT OUTER JOIN, a more performant solution would involve <code>map</code>:</p>
<pre><code># left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))
left.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))

  key     value  newcol
0   A  1.764052     NaN
1   B  0.400157     0.0
2   C  0.978738     NaN
3   D  2.240893     1.0
</code></pre>
<p>As mentioned, this is similar to, but faster than</p>
<pre><code>left.merge(right3[['key', 'newcol']], on='key', how='left')

  key     value  newcol
0   A  1.764052     NaN
1   B  0.400157     0.0
2   C  0.978738     NaN
3   D  2.240893     1.0
</code></pre>
<h3><strong>Merging on multiple columns</strong></h3>
<p>To join on more than one column, specify a list for <code>on</code> (or <code>left_on</code> and <code>right_on</code>, as appropriate).</p>
<pre><code>left.merge(right, on=['key1', 'key2'] ...)
</code></pre>
<p>Or, in the event the names are different,</p>
<pre><code>left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])
</code></pre>
<h3><strong>Other useful <code>merge*</code> operations and functions</strong></h3>
<ul>
<li><strong>Merging a DataFrame with Series on index</strong>: See <a href="https://stackoverflow.com/a/40762674/4909087">this answer</a>.</li>
<li><p>Besides <code>merge</code>, <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html" rel="nofollow noreferrer"><code>DataFrame.update</code></a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html" rel="nofollow noreferrer"><code>DataFrame.combine_first</code></a> are also used in certain cases to update one DataFrame with another.</p></li>
<li><p><a href="http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html" rel="nofollow noreferrer"><code>pd.merge_ordered</code></a> is a useful function for ordered JOINs.</p></li>
<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html" rel="nofollow noreferrer"><code>pd.merge_asof</code></a> (read: merge_asOf) is useful for <em>approximate</em> joins.</p></li>
</ul>
<p><strong>This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the <a href="https://pandas.pydata.org/pandas-docs/stable/merging.html" rel="nofollow noreferrer">documentation on <code>merge</code>, <code>join</code>, and <code>concat</code></a> as well as the links to the function specs.</strong></p>
<hr/>
<h1>Index-based *-JOIN (+ index-column <code>merge</code>s)</h1>
<p><strong>Setup</strong></p>
<pre><code>left = pd.DataFrame({'value': np.random.randn(4)}, index=['A', 'B', 'C', 'D'])    
right = pd.DataFrame({'value': np.random.randn(4)}, index=['B', 'D', 'E', 'F'])
left.index.name = right.index.name = 'idxkey'

left
           value
idxkey          
A       2.269755
B      -1.454366
C       0.045759
D      -0.187184

right
           value
idxkey          
B       1.532779
D       1.469359
E       0.154947
F       0.378163
</code></pre>
<p>Typically, a merge on index would look like this:</p>
<pre><code>left.merge(right, left_index=True, right_index=True)

         value_x   value_y
idxkey                    
B       0.410599  0.761038
D       1.454274  0.121675
</code></pre>
<h3><strong>Support for index names</strong></h3>
<p>If your index is named, then v0.23 users can also specify the level name to <code>on</code> (or <code>left_on</code> and <code>right_on</code> as necessary).</p>
<pre><code>left.merge(right, on='idxkey')

         value_x   value_y
idxkey                    
B       0.410599  0.761038
D       1.454274  0.121675
</code></pre>
<h3><strong>Merging on index of one, column(s) of another</strong></h3>
<p>It is possible (and quite simple) to use the index of one, and the column of another, to perform a merge. For example,</p>
<pre><code>left.merge(right, left_on='key1', right_index=True)
</code></pre>
<p>Or vice versa (<code>right_on=...</code> and <code>left_index=True</code>). </p>
<pre><code>right2 = right.reset_index().rename({'idxkey' : 'colkey'}, axis=1)
right2

  colkey     value
0      B  1.222445
1      D  0.208275
2      E  0.976639
3      F  0.356366

left.merge(right2, left_index=True, right_on='colkey')

    value_x colkey   value_y
0 -1.070753      B  1.222445
1 -0.403177      D  0.208275
</code></pre>
<p>In this special case, the index for <code>left</code> is named, so you can also use the index name with <code>left_on</code>, like this:</p>
<pre><code>left.merge(right2, left_on='idxkey', right_on='colkey')

    value_x colkey   value_y
0 -1.070753      B  1.222445
1 -0.403177      D  0.208275
</code></pre>
<p><strong><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html" rel="nofollow noreferrer"><code>DataFrame.join</code></a></strong><br/>
Besides these, there is another succinct option. You can use <code>DataFrame.join</code> which defaults to joins on the index. <code>DataFrame.join</code> does a LEFT OUTER JOIN by default, so <code>how='inner'</code> is necessary here.</p>
<pre><code>left.join(right, how='inner', lsuffix='_x', rsuffix='_y')

         value_x   value_y
idxkey                    
B       0.410599  0.761038
D       1.454274  0.121675
</code></pre>
<p>Note that I needed to specify the <code>lsuffix</code> and <code>rsuffix</code> arguments since <code>join</code> would otherwise error out:</p>
<pre><code>left.join(right)
ValueError: columns overlap but no suffix specified: Index(['value'], dtype='object')
</code></pre>
<p>Since the column names are the same. This would not be a problem if they were differently named.</p>
<pre><code>left.rename(columns={'value':'leftvalue'}).join(right, how='inner')

        leftvalue     value
idxkey                     
B       -1.454366  1.532779
D       -0.187184  1.469359
</code></pre>
<p><strong><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer"><code>pd.concat</code></a></strong><br/>
Lastly, as an alternative for index-based joins, you can use <code>pd.concat</code>:</p>
<pre><code>pd.concat([left, right], axis=1, sort=False, join='inner')

           value     value
idxkey                    
B      -1.980796  1.230291
D       0.156349  1.202380
</code></pre>
<p>Omit <code>join='inner'</code> if you need a FULL OUTER JOIN (the default):</p>
<pre><code>pd.concat([left, right], axis=1, sort=False)

      value     value
A -0.887786       NaN
B -1.980796  1.230291
C -0.347912       NaN
D  0.156349  1.202380
E       NaN -0.387327
F       NaN -0.302303
</code></pre>
<p>For more information, see <a href="https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio/49620539#49620539">this canonical post on <code>pd.concat</code> by @piRSquared</a>.</p>
<hr/>
<h1>Generalizing: <code>merge</code>ing multiple DataFrames</h1>
<p><strong>Setup</strong></p>
<pre><code>A = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)})    
B = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})
C = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)})
dfs = [A, B, C]   
</code></pre>
<p>Oftentimes, the situation arises when multiple DataFrames are to be merged together. Naively, this can be done by chaining <code>merge</code> calls:</p>
<pre><code>A.merge(B, on='key').merge(C, on='key')

  key    valueA    valueB  valueC
0   D  0.922207 -1.099401     1.0
</code></pre>
<p>However, this quickly gets out of hand for many DataFrames. Furthermore, it may be necessary to generalise for an unknown number of DataFrames. To do this, one often used simple trick is with <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a>, and you can use it to achieve a INNER JOIN like so:</p>
<pre><code>from functools import reduce
reduce(pd.merge, dfs)

  key    valueA    valueB  valueC
0   D  0.465662  1.488252     1.0
</code></pre>
<p>Note that every column besides the "key" column should be differently named for this to work out-of-box. Otherwise, you may need to use a <code>lambda</code>.</p>
<p>For a FULL OUTER JOIN, you can <a href="https://en.wikipedia.org/wiki/Currying" rel="nofollow noreferrer">curry</a> <code>pd.merge</code> using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>:</p>
<pre><code>from functools import partial
outer_merge = partial(pd.merge, how='outer')
reduce(outer_merge, dfs)

  key    valueA    valueB  valueC
0   A  0.056165       NaN     NaN
1   B -1.165150 -1.536244     NaN
2   C  0.900826       NaN     1.0
3   D  0.465662  1.488252     1.0
4   E       NaN  1.895889     1.0
5   F       NaN  1.178780     NaN
6   J       NaN       NaN     1.0
</code></pre>
<p>As you may have noticed, this is quite powerful—you can also use it to control column names during merge. Simply add more keyword arguments as needed:</p>
<pre><code>partial(pd.merge, how='outer', left_index=True, right_on=...)
</code></pre>
<p><strong>The alternative: <code>pd.concat</code></strong><br/>
If your column values are unique, then it makes sense to use <code>pd.concat</code>, this is faster than a two-at-a-time multi-way merge. </p>
<pre><code>pd.concat([
    df.set_index('key') for df in dfs], axis=1, join='inner'
).reset_index()

  key    valueA    valueB  valueC
0   D  0.465662  1.488252     1.0
</code></pre>
<h3><strong>Multiway merge on unique indexes</strong></h3>
<p>If you are merging multiple DataFrames on unique indexes, you should once again prefer <code>pd.concat</code> for better performance.</p>
<pre><code># Note, the "key" column values are unique, so the index is unique.
A2 = A.set_index('key')
B2 = B.set_index('key')
C2 = C.set_index('key')
dfs2 = [A2, B2, C2]
</code></pre>
<p></p>
<pre><code>pd.concat(dfs2, axis=1, sort=False, join='inner')

       valueA    valueB  valueC
key                            
D    0.922207 -1.099401     1.0
</code></pre>
<p>As always, omit <code>join='inner'</code> for a FULL OUTER JOIN.</p>
<h3><strong>Multiway merge on indexes with duplicates</strong></h3>
<p><code>concat</code> is fast, but has its shortcomings. It cannot handle duplicates.</p>
<pre><code>A3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})
</code></pre>
<p></p>
<pre><code>pd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')
ValueError: Shape of passed values is (3, 4), indices imply (3, 2)
</code></pre>
<p>In this situation, <code>join</code> is the best option, since it can handle non-unique indexes (<code>join</code> calls <code>merge</code> under the hood).</p>
<pre><code># For inner join. For left join, pass `pd.DataFrame.join` directly to `reduce`. 
inner_join = partial(pd.DataFrame.join, how='inner')
reduce(inner_join, [A3.set_index('key'), B2, C2])

       valueA    valueB  valueC
key                            
D   -0.674333 -1.099401     1.0
D    0.031831 -1.099401     1.0
</code></pre>
</div>
<span class="comment-copy">Information on (efficiently) computing the cartesian product of two (or more) DataFrames can be found at this link: <a href="https://stackoverflow.com/questions/53699012/performant-cartesian-product-cross-join-of-two-pandas-dataframes/53699013#53699013">Performant cartesian product (CROSS JOIN) of two pandas DataFrames</a></span>
<span class="comment-copy">P.S.: I've written my answer below such a way that you'll be able to follow along better if you run the code as you read, just like a hands-on tutorial. Enjoy!</span>
<span class="comment-copy">@S.V I don't think <code>align</code> is appropriate for this post, but I can explain how it works and hopefully you'll understand why. <code>align</code> is used to make the indexes of two DataFrames compatible with each other by inserting NaNs for missing keys. It's almost like both frames are reindexed on the union of the indices. The return value of <code>left.align(right)</code> is <code>(left_aligned, right_aligned)</code>. Hope that makes sense.</span>
<span class="comment-copy">@philipxy Oof, that's shameful. I've edited to fix the terminology and add venn diagrams (with source credited accordingly). Let me know if that's better. Thanks again for your comment.</span>
<span class="comment-copy">OH NO VENN DIAGRAMS I can't bear to look yet but: "<a href="https://stackoverflow.com/a/25957600/3404097"><b>Re Venn diagrams</b></a>" <a href="https://stackoverflow.com/questions/38549/what-is-the-difference-between-inner-join-and-outer-join?rq=1#comment41531068_38549">Also this comment by me on this question &amp; my others on this page.</a> <a href="https://stackoverflow.com/q/17759687/3404097">And my comments on this page.</a> OK I peeked... limited to inner vs outer joins, good... but <i>you do not give an initial legend for the diagrams explaining A, B &amp; their elements</i>. PS Still a "FULL INNER JOIN" &amp; still INNER JOIN undefined.</span>
<span class="comment-copy">@philipxy okay, I am not an SQL expert, and I fear adding this level of explanation only to make the Venn diagram be technically accurate will result in more confusion. Can we fix this problem by using A and B to represent the sets of join keys and go from there? Or is your suggestion to just remove them altogether?</span>
<span class="comment-copy">@Datanovice not my post, but there is a link. Try <a href="https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio" title="what are the levels keys and names arguments for in pandas concat functio">stackoverflow.com/questions/49620538/…</a></span>
