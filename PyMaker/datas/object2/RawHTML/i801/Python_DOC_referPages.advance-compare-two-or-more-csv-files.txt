<div class="post-text" itemprop="text">
<p>I'm just learning a Python, and as everyone knows, the best way is practice ;)
And now I have a job, and I want to try to do it in python, but I need some advice. </p>
<p>Well... I have a few CSV files. The structure looks like:</p>
<p>1st CVS
    workerID, workerName, workerPhoneNumber</p>
<p>2th and the other CSVs contains a subset of this first set.</p>
<p>I mean, in the first file there are, for example, 10,000 employees, and in each of them, there is a section of the same employees.
For example:
in the first file, I have </p>
<pre><code>00001 Randal 555555
00002 Tom 66666
00003 Anthony 77775
00004 Mark 3424435
00005 Anna 3443223
00006 Monica 412415415
.....
</code></pre>
<p>in second file:</p>
<pre><code>00001 Randal 555555
00004 Mark 3424435
00006 Monica 412415415
....
</code></pre>
<p>and 3th file: </p>
<pre><code>00001 Randal 555555
00004 Mark 3424435
00005 Anna 3443223
....
</code></pre>
<p>I have to check the validity of all users in all files. I mean: check than Anna form all files have the same ID and phone in other filers and same for all results (that's huge file 100k rows). Then I will return all mismatches.
An addition problem is some "NA" in rows.</p>
<p>I've just finished a numpy tutorial, but i don't know how to bite it. I don't even know that a good practice to use a numpy. So I need your advice... how I can handle with this problem?</p>
<p>EDIT: Workes have unique names :) Its random string actually not a name :D just example :D in single file IDs is unique too</p>
</div>
<div class="post-text" itemprop="text">
<p>The use of standard functions and data structures will be enough.
Let's represents your files by a list of dictionaries using list comprehensions:</p>
<pre class="lang-py prettyprint-override"><code>header = ('id', 'name', 'phone_number')

records_1 = [{k:v for k, v in zip(header, line.strip().split(' ')} } for line in open('path_to_file1', 'r')]
records_2 = [{k:v for k, v in zip(header, line.strip().split(' ')} } for line in open('path_to_file2', 'r')]
</code></pre>
<p>Then, if you want to check your records based on the user name, use a dictionary with the name as key and the record as value:</p>
<pre class="lang-py prettyprint-override"><code>records_1 = {rec['name']: rec for rec in records_1}
records_2 = {rec['name']: rec for rec in records_2}
</code></pre>
<p>and check for each name if you have duplicated ids. If so, save it to output:</p>
<pre class="lang-py prettyprint-override"><code>seen = {}
output = []
for records, others in [(records_1, records_2), (records_2, records_1)]:
    for name, rec in records:
        if name in seen:
            continue

        if rec['id'] != others['name']['id']:
            output.append((name, rec, others['name']))
</code></pre>
<p>Note we could deduce the list of permutations using permutations from itertools:
<a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html</a></p>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">looks more like a task for <a href="https://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a></span>
<span class="comment-copy">what if two employees do actually have the same name?</span>
<span class="comment-copy">Are workerIDs unique or can they repeat inside single file?</span>
<span class="comment-copy">Workes have uniqe names :) Its random string acctualy not a name :D just example :D in single file IDs is uniqe too</span>
<span class="comment-copy">Thank u for the reply! I will try ur solution!</span>
