<div class="post-text" itemprop="text">
<p>My SQLite script works fine, when I type:</p>
<p>.read 'dummy.sql'</p>
<p>from within the SQLite shell.</p>
<p>However, the following Python code is not doing it properly. I'm getting a syntax error in line 5.</p>
<pre><code>import sqlite3
db = sqlite3.connect('scheduling.db')
cursor=db.cursor()
a='''.read "scheduling.sql"'''
cursor.execute(a)
db.commit
db.close()
</code></pre>
<p>I know I'm doing something wrong with the quotes. How do I make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot. The program <code>sqlite3</code> can be seen as splitted in 2 parts:</p>
<ul>
<li>externally, it parses lines of input into SQL commands</li>
<li>internally, it passes those SQL commands to the engine</li>
<li>externally again, it displays the result of the SQL commands.</li>
</ul>
<p><code>.read</code> is kind of a <em>meta</em> command: the parser opens the file and read lines from it. AFAIK, nothing in the sqlite3 library can emulate that parser part, so you would have to the line parsing into SQL statements <em>by hand</em>, and then execute the SQL statements one at a time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this. you can read query from file using the 'open' function - this will replace </p>
<blockquote>
<p>.read</p>
</blockquote>
<p>functionality; SQL scripts are text files with query. and then run read_sql_query.</p>
<pre><code>import sqlite3
import pandas as pd
sqlite_file = 'scheduling.db'
conn = sqlite3.connect(sqlite_file)
c = conn.cursor()
f = open('scheduling.sql','r')
sql = f.read() 
print pd.read_sql_query(sql, conn)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The workaround I would recommend is to read the contents of the .sql file into a Python string variable, as you would read any other text file, and then call <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript" rel="nofollow noreferrer"><code>executescript</code></a>. Unlike <code>execute</code>, <code>executescript</code> can execute many statements in one call. For example, it will work correctly if your .sql contains the following:</p>
<pre><code>CREATE TABLE contacts (
 contact_id INTEGER PRIMARY KEY,
 first_name TEXT NOT NULL,
 last_name TEXT NOT NULL
);

INSERT INTO contacts (contact_id, first_name, last_name)
VALUES (1, 'John', 'Smith');
</code></pre>
<p>Here's the full Python snippet that you'll need:</p>
<pre><code>import sqlite3

with open('scheduling.sql', 'r') as sql_file:
    sql_script = sql_file.read()

db = sqlite3.connect('scheduling.db')
cursor = db.cursor()
cursor.executescript(sql_script)
db.commit()
db.close()
</code></pre>
</div>
<span class="comment-copy"><code>.read</code> is a command implemented by the sqlite3 shell program, not the sqlite3 library. You can't execute it.</span>
<span class="comment-copy">Use QUERY in your <code>a</code> variable like this: <code>a="SELECT * FROM desired-table ORDER BY id DESC LIMIT 1"</code></span>
<span class="comment-copy">Thanks, this is exactly what I need. Also, I was about to ask how I might pass parameters to my script. But with this approach, it's easy to see how I could simply insert them into my string, once the script has been read.</span>
