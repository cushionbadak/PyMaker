<div class="post-text" itemprop="text">
<p>In python list I couldn't store more than 31 elements in a list while initializing it, I believe this could be the maximum size allowed during initialization</p>
<p>e.g (36 elements)</p>
<pre><code>&gt;&gt;&gt; valid_ip = [                                                               
...           "192.0.0.100", 
...           "99.99.99.99",
...           "0.99.99.99",
...           "8.99.99.99",
...           "85.99.99.99",
...           "255.99.99.99",
...           "55.255.255.0" 
...           "0.192.0.100", 
...           "99.99.99.99",
...           "99.0.99.99",
...           "99.8.99.99",
...           "99.85.99.99",
...           "99.255.99.99",
...           "255.55.255.0" 
...           "100.0.192.192", 
...           "99.99.99.99",
...           "99.99.0.0",
...           "99.99.8.8",
...           "99.99.85.85",
...           "99.99.255.255",
...           "255.55.0.255" 
...           "0.192.100.0", 
...           "99.99.99.99",
...           "99.0.99.99",
...           "99.8.99.99",
...           "99.85.99.99",
...           "99.255.99.99",
...           "255.55.0.255" 
...           "0.255.255.55" 
...           "100.0.0.192", 
...           "99.99.99.99",
...           "99.99.99.0",
...           "99.99.99.8",
...           "99.99.99.85",
...           "99.99.99.255",
...           "0.255.255.55" 
...           ]
&gt;&gt;&gt; 
&gt;&gt;&gt; len(valid_ip)
31
</code></pre>
<p>I have even tried concatenation of list by splitting the initialization </p>
<pre><code>valid_ip=[...] 
valid_ip+=[...] 
</code></pre>
<p>but still the length is 31</p>
<p>Alternatively, I can store in file and read it dynamically, but is there any way increase the size ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are missing 5 commas, making a list of 31 element not 36:</p>
<pre><code>valid_ip = [                                                               
"192.0.0.100", 
"99.99.99.99",
"0.99.99.99",
"8.99.99.99",
"85.99.99.99",
"255.99.99.99",
"55.255.255.0", # &lt;&lt;&lt;
"0.192.0.100", 
"99.99.99.99",
"99.0.99.99",
"99.8.99.99",
"99.85.99.99",
"99.255.99.99",
"255.55.255.0", # &lt;&lt;&lt;
"100.0.192.192", 
"99.99.99.99",
"99.99.0.0",
"99.99.8.8",
"99.99.85.85",
"99.99.255.255",
"255.55.0.255", # &lt;&lt;&lt; 
"0.192.100.0", 
"99.99.99.99",
"99.0.99.99",
"99.8.99.99",
"99.85.99.99",
"99.255.99.99",
"255.55.0.255", # &lt;&lt;&lt; 
"0.255.255.55", # &lt;&lt;&lt; 
"100.0.0.192", 
"99.99.99.99",
"99.99.99.0",
"99.99.99.8",
"99.99.99.85",
"99.99.99.255",
"0.255.255.55" 
]
len(valid_ip)
# 36
</code></pre>
</div>
<span class="comment-copy">There are missing commas</span>
<span class="comment-copy">thanks, I was expecting an error in that case from python</span>
<span class="comment-copy">" I was expecting an error in that case from python" =&gt; two adjacent string literals are concatenated, just like in C. This is a documented behaviour.</span>
<span class="comment-copy">Two strings that aren't separated by a comma are joined together into one. Read more at <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
