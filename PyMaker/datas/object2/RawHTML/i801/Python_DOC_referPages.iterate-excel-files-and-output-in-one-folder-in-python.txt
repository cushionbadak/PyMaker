<div class="post-text" itemprop="text">
<p>I have a folder and subfolders structure as follows:</p>
<pre><code>D:/src
├─ xyz.xlsx
├─ dist
│  ├─ xyz.xlsx
│  ├─ xxx.zip
│  └─ xxy.xlsx
├─ lib
│  ├─ xy.rar
│  └─ xyx.xlsx
├─ test
│  ├─ xyy.xlsx
│  ├─ x.xls
│  └─ xyz.xlsx
</code></pre>
<p>I want to extract all excel files (xls or xlsx) from source directory and subdirectories, drop duplicates based on excel file names and put all the unique files in D:/dst directory. How can I the following result in Python? Thanks.
Expected result:</p>
<pre><code>D:/dst
├─ xyz.xlsx
├─ xxy.xlsx
├─ xyx.xlsx
├─ xyy.xlsx
├─ x.xls
</code></pre>
<p>Here is what I have tried:</p>
<pre><code>import os

for root, dirs, files in os.walk(src, topdown=False):
    for file in files:
        if file.endswith('.xlsx') or file.endswith('.xls'):
            #print(os.path.join(root, file))
            try:
                df0 = pd.read_excel(os.path.join(root, file))
                #print(df0)
            except:
                continue
            df1 = pd.DataFrame(columns = [columns_selected])
            df1 = df1.append(df0, ignore_index = True)
            print(df1)
            df1.to_excel('test.xlsx', index = False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this will do what you want:</p>
<pre><code>import os
import shutil


src = os.path.abspath(r'.\_src')
dst = os.path.abspath(r'.\_dst')
wanted = {'.xls', '.xlsx'}

copied = set()

for root, dirs, filenames in os.walk(src, topdown=False):
    for filename in filenames:
        ext = os.path.splitext(filename)[1]
        if ext in wanted and filename not in copied:
            src_filepath = os.path.join(root, filename)
            shutil.copy(src_filepath, dst)
            copied.add(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you've already got <code>glob.glob</code>, you don't need to also do <code>os.walk</code>, and vice-versa. But since glob only matches one pattern at a time and no way to denote an optional extra 'x' in the extension, you'll either need the <code>glob</code> loop twice - once for each extension; or use <code>glob.glob( 'D:\\src\\*.xls*')</code> which could match <code>'*.xlsm'</code>, etc.</p>
<p>For each file matched, use <a href="https://docs.python.org/3/library/shutil.html#shutil.move" rel="nofollow noreferrer"><code>shutil.move</code></a>:</p>
<pre><code>for file in glob.glob('D:\\src\\*.xls*'):
    shutil.move(file, 'D:\\dst\\' + os.path.basename(file))
</code></pre>
<p>With <code>os.walk</code>, you can do each extension check with <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch" rel="nofollow noreferrer"><code>fnmatch.fnmatch</code></a> in the same loop:</p>
<pre><code>for root, dirs, files in os.walk('D:\\src'):
    for file in files:
        if fnmatch.fnmatch(file, '*.xls') or fnmatch.fnmatch(file, '*.xlsx'):
            shutil.move(f'{root}\\{file}', f'D:\\dst\\{file}')
            # shutil.move(root + '\\' + file, 'D:\\dst\\' + file)
</code></pre>
</div>
<span class="comment-copy">I think you could do all that via <code>shutil.copytree()</code>. See question <a href="https://stackoverflow.com/questions/35155382/copying-specific-files-to-a-new-folder-while-maintaining-the-original-subdirect">Copying specific files to a new folder, while maintaining the original subdirectory tree</a>.</span>
<span class="comment-copy">@ahbon, Any unluck with solving this one yet?</span>
<span class="comment-copy">Thank you for asking. I'll try tomorrow and if I have problem I'll let you know.</span>
<span class="comment-copy">@martineau The solution you've mentioned copy all xlsx and xls files to a new folder D:/dst, but it maintain the original subdirectories. What if I just want put them in a folder and ignore its original subdirectories?</span>
<span class="comment-copy">While all that pandas dataframe stuff you added is kind of distracting and not exactly relevant to your question, it has however exposed—I think—what is called an <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY Problem</a> because it reveals <i>why</i> you want to do this file copying. If I am understand things correctly, then there really is no need to copy all the files to a single folder first—just use the process that finds them to copy to instead drive the concatenation of them you want to do. This will greatly reduce the I/O that needs to be done.</span>
<span class="comment-copy">Your solution perfectly solved my copying excel files to one folder issues. Thanks a lot.</span>
<span class="comment-copy">ahbon: That's good to hear and you're welcome. Sorry about any distraction my <code>shutil.copytree()</code> suggestion may have caused. While it <i>could</i> be done with it, in this situation it would not have been a very good approach.</span>
<span class="comment-copy">Was about to share <a href="https://stackoverflow.com/a/35161407/1431750">this answer you provided</a> for another question.</span>
<span class="comment-copy">@aneroid: I, too, originally thought that answer would be a good approach, but when I was finally—after much discussion—able to understand what the goal was, decided it wouldn't. Although technically it would be possible by "abusing" the <code>ignore</code> option to point where it ignored everything is a little too much in my opinion. All that's need for this question is the ability to walk the file folder system hierarchy, so <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk()</code></a> would be the more logical (and better) choice.</span>
<span class="comment-copy">Why bother calling <code>os.walk()</code> only to then quit after first iteration? I think the question is unclear and have asked the OP for clarification.</span>
<span class="comment-copy">Thanks @aneroid. I think shutil.copy would be better for without changing original data, what do you think?</span>
<span class="comment-copy">Thanks for your help. Your solution only copy D:/src - xyz.xlsx to D:/dst, not excel files from its subfolders.</span>
<span class="comment-copy">@martineau I gathered from the OP's code that he/she wanted to stop after the first folder/iteration. Even with glob, we'd need two loops for each extension, and without <code>recursive=True</code>. So figured <code>os.walk()</code> could simplify that. Anyway, from OP's post, they did want to do subdirs.</span>
<span class="comment-copy">@ahbon Yes, you can use <code>copy</code> instead of <code>move</code> if you want the original data to remain in <code>'D:\src'</code>. I've removed the <code>break</code> so that loop doesn't stop after the first iteration. From your code, it looked like you only want to use the top-level. Also, if you are recursively copying, then <code>f'D:\\dst\\{file}'</code> will need to be modified to have the parent folders of each file. Otherwise it will copy flat, without the subdirs. Look at <a href="https://docs.python.org/3/library/shutil.html#shutil.copytree" rel="nofollow noreferrer"><code>shutil.copytree()</code></a> for that.</span>
