<div class="post-text" itemprop="text">
<p>I've got this code:</p>
<pre><code>all_sorted = [['9', 's'], ['11', 'h'], ['2', 's'], ['13', 'c'], ['13', 's'], ['11', 's'], ['3', 'd']]
pairness = {str(i): 0 for i in range(14, 1, -1)}
for card in all_sorted:
    pairness[card[0]] += 1
</code></pre>
<p>Is it possible to write 2nd-4th lines of code in 1 more efficient line?</p>
</div>
<div class="post-text" itemprop="text">
<p>Shorter, but I don't know how much faster (probably not much, if at all)</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(x for x, _ in all_sorted)
Counter({'11': 2, '13': 2, '9': 1, '2': 1, '3': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A version using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a> that creates the keys with zero values (matching the expected output):</p>
<pre><code>from collections import Counter

all_sorted = [['9', 's'], ['11', 'h'], ['2', 's'], ['13', 'c'], ['13', 's'], ['11', 's'], ['3', 'd']]
pairness = {**{str(i): 0 for i in range(14, 1, -1)}, **Counter(head for head, *_ in all_sorted)}

print(pairness)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'8': 0, '11': 2, '14': 0, '4': 0, '12': 0, '3': 1, '2': 1, '13': 2, '5': 0, '10': 0, '7': 0, '6': 0, '9': 1}
</code></pre>
</div>
<span class="comment-copy">Does order matters?</span>
<span class="comment-copy">No, it doesn't matter</span>
<span class="comment-copy">So why the range backwards?</span>
<span class="comment-copy">It's easier for further implementation but it's not necessary</span>
<span class="comment-copy">why do you think less lines of code means more efficient?</span>
<span class="comment-copy">The <code>map</code> function is slower than the list comprehension. <a href="https://stackoverflow.com/questions/1247486/list-comprehension-vs-map" title="list comprehension vs map">stackoverflow.com/questions/1247486/list-comprehension-vs-map</a></span>
<span class="comment-copy">Not a bad approach, assuming that it's not strictly necessary to display all the keys that have a count of zero. I wouldn't worry about speed, since looping once over a list with ten elements is unlikely to be a performance bottleneck.</span>
<span class="comment-copy">Is it possible with list comprehension?</span>
<span class="comment-copy">List comprehensions produce lists, and the result you want is a dict. So no, you can't do this with <i>just</i> a list comprehension.</span>
