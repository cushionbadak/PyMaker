<div class="post-text" itemprop="text">
<p>Given a list like:</p>
<pre><code>[a, SEP, b, c, SEP, SEP, d]
</code></pre>
<p>how do I split it into a list of sublists:</p>
<pre><code>[[a], [b, c], [], [d]]
</code></pre>
<p>Effectively I need an equivalent of <code>str.split()</code> for lists. I can hack together something, but I can't seem to be able to come up with anything neat and/or pythonic.</p>
<p>I get the input from an iterator, so a generator working on that is acceptable as well.</p>
<p>More examples:</p>
<pre><code>[a, SEP, SEP, SEP] -&gt; [[a], [], [], []]

[a, b, c] -&gt; [[a, b, c]]

[SEP] -&gt; [[], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple generator will work for all of the cases in your question:</p>
<pre><code>def split(seq):
    chunk = []
    for val in seq:
        if val == SEP:
            yield chunk
            chunk = []
        else:
            chunk.append(val)
    yield chunk
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if there's an easy <code>itertools.groupby</code> solution, but here is an iterative approach that should work:</p>
<pre><code>def mySplit(iterable, sep):
    output = []
    sepcount = 0
    current_output = []
    for i, elem in enumerate(iterable):
        if elem != sep:
            sepcount = 0
            current_output.append(elem)
            if (i==(len(iterable)-1)):
                output.append(current_output)
        else:
            if current_output: 
                output.append(current_output)
                current_output = []

            sepcount+=1

            if (i==0) or (sepcount &gt; 1):
                output.append([])
            if (i==(len(iterable)-1)):
                output.append([])

    return output
</code></pre>
<p>Testing on your examples:</p>
<pre><code>testLists = [
    ['a', 'SEP', 'b', 'c', 'SEP', 'SEP', 'd'],
    ["a", "SEP", "SEP", "SEP"],
    ["SEP"],
    ["a", "b", "c"]
]

for tl in testLists:
    print(mySplit(tl, sep="SEP"))
#[['a'], ['b', 'c'], [], ['d']]
#[['a'], [], [], []]
#[[], []]
#[['a', 'b', 'c']]
</code></pre>
<p>This is analogous to the result you would get if examples were actually strings and you used <code>str.split(sep)</code>:</p>
<pre><code>for tl in testLists:
    print("".join(tl).split("SEP"))
#['a', 'bc', '', 'd']
#['a', '', '', '']
#['', '']
#['abc']
</code></pre>
<p>By the way, if the elements in your lists were always guaranteed to be strings, you could simply do:</p>
<pre><code>for tl in testLists:
    print([list(x) for x in "".join(tl).split("SEP")])
#[['a'], ['b', 'c'], [], ['d']]
#[['a'], [], [], []]
#[[], []]
#[['a', 'b', 'c']]
</code></pre>
<p>But the <code>mySplit()</code> function is more general.</p>
</div>
<div class="post-text" itemprop="text">
<p>My first ever Python program :)</p>
<pre><code>from pprint import pprint
my_array = ["a", "SEP", "SEP", "SEP"]
my_temp = []
my_final = []
for item in my_array:
  if item != "SEP":
    my_temp.append(item)
  else:
    my_final.append(my_temp);
    my_temp = []
pprint(my_final);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For <code>list</code> or <code>tuple</code> objects you can use the following:</p>
<pre><code>def split(seq, sep):
    start, stop = 0, -1
    while start &lt; len(seq):
        try:
            stop = seq.index(sep, start)
        except ValueError:
            yield seq[start:]
            break
        yield seq[start:stop]
        start = stop + 1
    else:
        if stop == len(seq) - 1:
            yield []
</code></pre>
<p>I won't work with a generator but it's fast.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a>:</p>
<pre><code>def split(seq, sep):
    seq, peek = iter(seq), sep
    while True:
        try:
            peek = next(seq)
        except StopIteration:
            break
        yield list(it.takewhile(sep.__ne__, it.chain((peek,), seq)))
    if peek == sep:
        yield []
</code></pre>
<p>The <code>it.chain</code> part is to find out when the <code>seq</code> is exhausted. Note that with this approach it's easy to yield generators instead of lists if desired.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would define the following function to solve that problem.</p>
<pre><code>l = ['a', 'SEP', 'b', 'c', 'SEP', 'SEP', 'd']

def sublist_with_words(word, search_list):
    res = []
    for i in range(search_list.count(word)):
        index = search_list.index(word)
        res.append(search_list[:index])
        search_list = search_list[index+1:]
    res.append(search_list)
    return res
</code></pre>
<p>When I try the cases you gave:</p>
<pre><code>print(sublist_with_words(word = 'SEP', search_list=l))
print(sublist_with_words(word = 'SEP', search_list=['a', 'b', 'c']))
print(sublist_with_words(word = 'SEP', search_list=['SEP']))
</code></pre>
<p>The output is:</p>
<pre><code>[['a'], ['b', 'c'], [], ['d']]
[['a', 'b', 'c']]
[[], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following is a non-generic solution that (most probably) only works on list of ints:</p>
<pre><code>import re

def split_list(nums, n):
    nums_str = str(nums)
    splits = nums_str.split(f"{n},")

    patc = re.compile(r"\d+")
    group = []
    for part in splits:
        group.append([int(v) for v in patc.findall(part)])

    return group

if __name__ == "__main__":
    l = [1, 2, 3, 4, 3, 6, 7, 3, 8, 9, 10]
    n = 3
    split_l = split_list(l, n)
    assert split_l == [[1, 2], [4], [6, 7], [8, 9, 10]]
</code></pre>
</div>
<span class="comment-copy"><code>itertools.groupby</code> ?</span>
<span class="comment-copy">do you actually want that empty list or no</span>
<span class="comment-copy">Huh, wonder how I failed to find the dupe question. But yeah, I want the empty lists too.</span>
<span class="comment-copy">then you should have an empty list at each <code>sep</code>? Or only when <code>sep</code> occurs twice in a row? what if <code>sep</code> occurs 6 times in a row? could you clarify?</span>
<span class="comment-copy">I want it to work exactly like <code>str.split()</code>, but for lists. Which means sep gets removed, consecutive seps lead to consecutive empty lists in between. (And it doesn't seem trivial to me to get <code>itertools.groupby</code> to do this, IMHO, making this distinct enough not to be a dupe.)</span>
<span class="comment-copy">This is brilliant.</span>
<span class="comment-copy">Nice, although yield still confuses me, more reading</span>
<span class="comment-copy">I think this is the best solution. I would just pass <code>SEP</code> as an argument to the function.</span>
<span class="comment-copy">Beautiful, simple, easy to understand, pythonic, something I <i>knew</i> was possible, but I was unable to come up with myself. Seems to work as I expect. Thanks!</span>
<span class="comment-copy">Seems correct to me. The implementation is unnecessarily complicated, but I didn't downvote...</span>
<span class="comment-copy">Looks like this would work, but I think @wim's answer is the most elegant one. Thanks.</span>
<span class="comment-copy">This seems to have the same elements as in the answer I accepted. It's the genericity and use of generator expression that tipped the scales to the other one. Thanks.</span>
<span class="comment-copy">Good call , I gave that one an up vote as well, neat code</span>
<span class="comment-copy">AFAICT this does not produce the desired results.</span>
<span class="comment-copy">@Jani You are right. I suppose you're referring to the case where a <code>SEP</code> is at the end of the list? It's not too difficult to account for that case, in form of a final if statement (hence no performance degradation). Please see my updated answer.</span>
<span class="comment-copy">Per quick testing, the updated answer does seem to produce the result I want. However, I still think @wim's answer is the more elegant one. Thanks.</span>
<span class="comment-copy">@Jani Sure! You should select whichever solution suits you best. However I'd like to point out that, if you already start with a <code>list</code>, this approach can give you a significant speedup. Tested on my machine I got ~ 4x speedup compared to the accepted answer for both small and large as well as sparse and dense lists.</span>
<span class="comment-copy">AFAICT this does not produce the desired results.</span>
<span class="comment-copy">@Jani You are right. I suppose you're referring to the case where a <code>SEP</code> is at the end of the list? It's not too difficult to account for that case, in form of a final if statement (hence no performance degradation). Please see my updated answer.</span>
