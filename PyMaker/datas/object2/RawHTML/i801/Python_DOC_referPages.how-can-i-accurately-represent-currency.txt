<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1406737/what-class-to-use-for-money-representation">What class to use for money representation?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/8637628/how-to-use-python-string-formatting-to-convert-an-integer-representing-cents-to">How to use Python string formatting to convert an integer representing cents to a float representing dollars?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have been writing this program to add up money in a cash box. when I started multiplying I realized I needed to make a change in my code. <code>int(1) * float(0.05)</code> gave me 0.050000000000000003. I tried searching how to round it and I read that <code>float</code> will not accurately represent currency, I also found information about <code>decimal</code> and <code>quatitize ()</code>. I tried to understand how to incorporate that into my code and I am struggling. how can accurately represent currency in my code?</p>
<pre><code>money = {'nickles' : 0, 'dimes' : 0, 'quarters': 0, 'ones': 0, 'twos': 0, 'tens' : 0, 'twenties' : 0, 'fifties': 0, 'one hundreds' : 0}

def display_values():
    print(money['nickles'], 'nickles = ', money['nickles'] * 0.05, 'cents')

def assign_all_values():
    input_nickles()
    input_dimes()
    input_quarters()
    input_ones()
    input_twos()
    input_fives()
    input_tens()
    input_fifties()
    input_one_hundreds()

def input_nickles():    
    money['nickles'] = float(input('how many nickels are in your cash box? '))
    display_values()

def input_dimes():
    money['Dimes'] = float(input('how many dimes are in your cash box? '))
    display_values()

def input_quarters():
    money['Quarters'] = float(input('how many quarters are in your cash box? '))
    display_values()

def input_ones():
    money['Ones'] = int(input('how many one dollar coins are in your cash box? '))
    display_values()

def input_twos():
    money['twos'] = int(input('how many one two dollar coins are in your cash box? '))
    display_values()

def input_fives():
    money['fives'] = int(input('how many five dollar bills are in your cash box? '))
    display_values()

def input_tens():
    money['Tens'] = int(input('how many ten dollar bills are in your cash box? '))
    display_values()

def input_twenties():
    money['Twenties'] = int(input('how many twenty dollar bills are in your cash box? '))
    display_values()

def input_fifties():
    money['fifties'] = int(input('how many fifty dollar bills are in your cash box? '))
    display_values()

def input_one_hundreds():
    money['one hundreds'] = int(input('how many one hundred dollar bills are in your cash box '))
    display_values()

def change_value():
    entry = input("what value would you like to change?\n1. One dollar")

assign_all_values()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're on the right track with the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">decimal</a> data type. You can integrate it into your program by using decimal in replacement of integers and floats.</p>
<p>First, import the module<br/>
<code>from decimal import Decimal as D</code></p>
<p>Then you can use it like so:<br/>
<code>money['nickles'] = D(input('how many nickels are in your cash box? '))</code></p>
<p>You should define your multiplication factors and initial 0's as decimal as well. Then you can preform arithmetic (between two decimal values) just like the native python types.<br/>
Note that you should pass a <strong>string</strong> to the decimal initialization (ex. <code>number = D('0.05')</code>) for exact representation  </p>
<p>When you want to print the value, you can use the <code>.quantize(D('1.000'))</code> to round to #0's decimal places</p>
</div>
<span class="comment-copy">Have you tried using integers and dividing by 100? :)</span>
<span class="comment-copy">so if I have 1 nickel then cents will = 5. then divide 5 by 100? which would be 0.05. is that correct?</span>
<span class="comment-copy">@Terry yes that's right</span>
<span class="comment-copy">This answer shows how to both use <code>Decimal</code> class as well as divide by <code>100</code> <a href="https://stackoverflow.com/questions/8637628/how-to-use-python-string-formatting-to-convert-an-integer-representing-cents-to">How to use Python string formatting to convert an integer representing cents to a float representing dollars?</a></span>
<span class="comment-copy">Please, please, read tag summaries before adding a tag to your question. This has absolutely nothing to do with functional programming. I've removed the tag.</span>
<span class="comment-copy">A note: The exact contents used for the <code>quantize</code> argument don't really matter; <code>x.quantize(D('0.000'))</code> and <code>x.quantize(D('9.999'))</code> work just fine too. All you're making the other decimal for is to get a specific exponent to copy/round to in the first decimal, and any value with a fixed length string like that works. Also note: The <code>decimal</code> docs <a href="https://docs.python.org/3/library/decimal.html#recipes" rel="nofollow noreferrer">include a recipe for formatting as money</a>.</span>
<span class="comment-copy">@ShadowRanger Yes, you are right. I also just realized I meant to use 0's instead of x's. I will update the answer - thanks for the clarification!</span>
<span class="comment-copy">I think I understand Decimal now. I'm still struggling with .quantize()</span>
