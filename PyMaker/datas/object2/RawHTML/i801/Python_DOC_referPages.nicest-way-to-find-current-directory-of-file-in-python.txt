<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3718657/how-to-properly-determine-current-script-directory">How to properly determine current script directory?</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>I'm looking for a replacement of</p>
<pre><code>import os
package_dir = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(package_dir,'foo.csv')
</code></pre>
<p>My working path isnâ€™t the path of the file. So when I want to load a file, I need a way to generate the relative path compared to my working directory.</p>
<p>I want to update to pathlib (or whatever else is out there). But what is the nicest way to do the same?</p>
<p>I found <a href="https://stackoverflow.com/a/44188489">https://stackoverflow.com/a/44188489</a>, but I don't think this solution looks better than my current way. </p>
<h3>Remark:</h3>
<p>It's not a duplicate of <a href="https://stackoverflow.com/questions/3718657/how-to-properly-determine-current-script-directory">How to properly determine current script directory?</a>, since I explicitly asked about the nicest way. Most of the solutions in the other post don't look nice, or are already mentioned in the my question. The solution</p>
<pre><code>Path(__file__).with_name("foo.csv")
</code></pre>
<p>given here is much better than the solutions given in the other question, since it's easy to understand, and a really pythonic way to solve it. If this question was a dublicate, on the other post an equally good answer would exist.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking to do the same with <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>, it could look like this:</p>
<pre><code>from pathlib import Path

package_dir = Path(__file__).parent.absolute()
file_path = package_dir.joinpath("foo.csv")
</code></pre>
<p>Unless you're changing current working directory, you may not really need/want to use <code>.absolute()</code>.</p>
<p>If you actually do not need to know what <code>package_dir</code> would be, you can also just get the <code>file_path</code> directly:</p>
<pre><code>file_path = Path(__file__).with_name("foo.csv").absolute()
</code></pre>
<p>Which gives you new <code>Path</code> replacing the file name.</p>
</div>
<span class="comment-copy">your first line looks perfectly fine to me. i <i>think</i> you don't need the os.path.abspath portion of it. As for pathlib, it comes into play once you have a path. its just a smarter way to deal with file paths. so it makes the 2nd line easier to write, but doesnt really do much for the first.</span>
<span class="comment-copy">Why do you want to change?  What does your current solution do poorly?</span>
<span class="comment-copy">The current version with os. is relative old. Pathlib was invented to replace most of the os. functionality. That's why I'm looking for a new way to do the same with Pathlib. Maybe there is even a solution that is more comfortable, than the current solution.</span>
<span class="comment-copy">awesome :) This solution looks really clean and easy to understand.</span>
<span class="comment-copy">I gotta admit, I really do like <code>pathlib</code> and I think it does allow for the whole files handling to be significantly cleaned up.</span>
<span class="comment-copy">I had a problem with your one line solution and subfolders. I used this instead: <code>Path(__file__).parent.joinpath("output/foo.csv")</code></span>
<span class="comment-copy">@subjord Could you perhaps be a little more specific about nature of the problem? We could try to find a solution and/or improve the answer accordingly.</span>
<span class="comment-copy">I tried to use  Path(<b>file</b>).with_name("../folder/foo.csv") which leads to an error message.</span>
