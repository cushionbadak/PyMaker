<div class="post-text" itemprop="text">
<p>Class 'X' is the Parent Class and Class 'Y' is the subclass of X. How can Class Y subclass get access to class X that is its parent class. </p>
<pre><code>class x:
    def __init__(self,text):
      self.text = t

    def printThis(self):
        text = self.text
        print(text)

class y(x):

    def test():
        printThis(text)

a = y("printing")

a.printThis()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How can Class Y subclass get access to class X that is its parent class.</p>
</blockquote>
<p>Python has multiple inheritance, so a class may have much more than one parent. All this his handled by the "mro" (method order resolution) and <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">the <code>super()</code> object</a>, that let you access methods from the "next" class in the mro.</p>
<p>Now note that in your code snippet, the real issue is not "accessing the parent class" at all, it's that you're trying to access a <em>global</em> "printThis" name - that is not defined. Python has no "implied this" like Java, you HAVE to use <code>self</code> to reference instance attributes or methods, so what you want is:</p>
<pre><code>class Y(X):
    def test(self):
        self.printThis()
</code></pre>
<p>To illustrate this this has nothing to do with parent class, you'd have the same problem calling <code>printThis()</code> without <code>self</code> in the same class:</p>
<pre><code>class Example():
    def __init__(self, text):
        self.text = text

    def printThis(self):
        print(self.text)

    def test(self):
       # this will fail just as well
       printThis()
</code></pre>
<p>Also, no need for <code>super()</code> here, Python will resolve <code>printThis</code> on the first class in the mro defining this name. You need <code>super()</code> when your subclass redefines a method of the parent class and still wants to call the parent's implementation, ie:</p>
<pre><code>class Example():
    def __init__(self, text):
        self.text = text

    def printThis(self):
        print(self.text)


class Child(Example):
    def printThis(self):
        print("this is a test")
        super().printThis()
        print("test passed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in the y class init, you have to also init the parent class you want to inherit from.</p>
<pre><code>class x:
    def __init__(self, text):
        self.text = text

class y(x):
    def __init__ (self, #other vars here ):
        x.__init__(self, text)
        self.othervars = othervars

    def test():
        self.printThis(self.text)
</code></pre>
</div>
<span class="comment-copy">You probably want <code>def test(self): self.printThis()</code>.</span>
<span class="comment-copy">If you're not doing anything in <code>__init__</code>, you can simply omit it.</span>
