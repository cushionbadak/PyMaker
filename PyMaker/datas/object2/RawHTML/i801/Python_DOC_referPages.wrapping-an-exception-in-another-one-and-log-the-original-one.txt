<div class="post-text" itemprop="text">
<p>How can I wrap an exception in another exception and log the traceback of the original exception in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>from</code> clause of the <code>raise</code> statement does exactly that. It wraps the original exception in the <code>__cause__</code> attribute of the wrapping exception. This is called <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer"><em>exception chaining</em></a> and it is an application of the <a href="https://en.wikipedia.org/wiki/Decorator_pattern" rel="nofollow noreferrer">decorator design pattern</a>. Then the <code>exc_info</code> parameter of the logging functions allows to log the original exception:</p>
<pre><code>import logging

try:
    try:
        raise IndexError("foo")
    except IndexError as e:
        raise KeyError from e
except KeyError as e:
    logging.error("An exception occurred:", exc_info=e.__cause__)
</code></pre>
<h1>Use case</h1>
<p>This exception chaining mechanism can come in handy in some situations. For instance when a user is supposed to implement an abstract method of an interface using other helper methods of the interface that have default implementations. If those helper methods can raise exceptions, it is likely that some of those exceptions overlap (are of the same type). So the implemented abstract method's caller will not be able to discriminate which helper method raised the exception. Wrapping the original exceptions in distinct exception classes' instances can solve this issue.</p>
<p>In this sample code, we have a <code>BaseServer</code> interface for handling requests and a user's <code>Server</code> class implementing the <code>_handle</code> abstract method with the <code>_parse</code>, <code>_format</code> and <code>_send</code> helper methods. We use the exception chaining mechanism to log different messages in the <code>_callback</code> method (that delegates to the <code>_handle</code> method) according to the point of failure in the <code>_handle</code> method's implementation: request parsing, request processing, response formatting or response sending.</p>
<p>Developper's code:</p>
<pre><code>import abc
import logging


class BaseServer(abc.ABCMeta):

    def serve(self):
        pass  # serving code (should register the _callback method)

    def _callback(self, request):
        try:
            logging.info("Received request: %s", request)
            self._handle(request)
        except ParsingError as e:
            logging.error("Parsing failed:", exc_info=e.__cause__)
        except FormattingError as e:
            logging.error("Formatting failed:", exc_info=e.__cause__)
        except SendingError as e:
            logging.error("Sending failed:", exc_info=e.__cause__)
        except Exception:
            logging.exception("Processing failed:")

    @abc.abstractmethod
    def _handle(self, request):
        raise NotImplementedError

    @classmethod
    def _parse(cls, request):
        try:
            pass  # parsing code
        except Exception as e:
            raise ParsingError from e

    @classmethod
    def _format(cls, response):
        try:
            pass  # formatting code
        except Exception as e:
            raise FormattingError from e

    @classmethod
    def _send(cls, response):
        try:
            pass  # sending code
        except Exception as e:
            raise SendingError from e


class ParsingError(Exception):
    pass


class FormattingError(Exception):
    pass


class SendingError(Exception):
    pass
</code></pre>
<p>User's code:</p>
<pre><code>class Server(BaseServer):

    def _handle(self, request):
        request = self._parse(request)
        response = request  # processing code
        response = self._format(response)
        self._send(response)
</code></pre>
</div>
<span class="comment-copy">This question isn't clear. What does it mean to "wrap an exception in another exception"?</span>
<span class="comment-copy">@JordanSinger An exception is a class, so it means attaching an exception instance to another exception instance's attribute.</span>
<span class="comment-copy">@JordanSinger it is a common concept when handling exceptions to f.e. wrap a ValueError inside a "spezific" IntParsingError and rethrow it including the original exception to the user. nice self answer</span>
