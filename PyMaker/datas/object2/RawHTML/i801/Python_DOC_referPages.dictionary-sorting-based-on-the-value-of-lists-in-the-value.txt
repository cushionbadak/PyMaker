<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9001509/how-can-i-sort-a-dictionary-by-key">How can I sort a dictionary by key?</a>
<span class="question-originals-answer-count">
                    25 answers
                </span>
</li>
</ul>
</div>
<p>I have a dictionary</p>
<pre><code>my_dict = {'name':['a','b','c','d','e'],'c1':[0,0,1,2,0],'c2':[3,0,2,1,2],'c3':[1,2,3,4,5]}
</code></pre>
<p>I want to sort the dictionary based on the value of <code>c1</code> and <code>c2</code>. How can I do that?
I.e. Priority to sort the dict is using C1 but if C1 has to same values like c1[0] and c1[1] at that time it short the data based on C2 data.</p>
<p>I have tried below but getting error:</p>
<pre><code>c1_list = count_dict.get('c1')
c1_list.sort(reverse=True)

index_map = {v: i for i, v in enumerate(c1_list)}
print sorted(my_dict.items(), key=lambda pair: index_map[pair[0]])
</code></pre>
<p>Expected Output:</p>
<pre><code>{'name':['d','c','a','e','b'],'c1':[2,1,0,0,0],'c2':[1,2,3,2,0],'c3':[4,3,1,5,2]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Pandas</h2>
<p>Normally I'd use <code>numpy</code> for this, but since it does not have a convenient constructor for conversion of dictionaries to structured arrays, I recommend to use <code>pandas</code>:</p>
<pre><code>import pandas as pd

my_dict = {'name':['a','b','c','d','e'],'c1':[0,0,1,2,0],'c2':[3,0,2,1,2],'c3':[1,2,3,4,5]}

df = pd.DataFrame(my_dict)
df_sorted = df.sort_values(by=['c1', 'c2'])[::-1]
sorted_dict = df_sorted.to_dict('list')
</code></pre>
<p>Output:</p>
<pre><code> {'name': ['d', 'c', 'a', 'e', 'b'], 'c1': [2, 1, 0, 0, 0], 'c2': [1, 2, 3, 2, 0], 'c3': [4, 3, 1, 5, 2]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to sort all values in specific reversed order, here values of <code>c2</code> and <code>c1</code>, you could <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> them together and use <code>key</code> parameter of <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> to sort all values in saved order.</p>
<p><strong>Python 3</strong></p>
<pre><code>my_dict = my_dict = {'name':['a','b','c','d','e'],'c1':[0,0,1,2,0],'c2':[3,0,2,1,2],'c3':[1,2,3,4,5]}
sort_by = [my_dict['c1'], my_dict['c2']]

for k, v in my_dict.items():
    my_dict[k] = [i for *_, i in sorted(zip(*sort_by, v), key=lambda x: x[:-1], reverse=True)]

print(my_dict)
</code></pre>
<p>Output:</p>
<pre><code>{'name': ['d', 'c', 'a', 'e', 'b'], 'c1': [2, 1, 0, 0, 0], 'c2': [1, 2, 3, 2, 0], 'c3': [4, 3, 1, 5, 2]}
</code></pre>
<hr/>
<p><strong>Python 2</strong></p>
<pre><code>my_dict = my_dict = {'name':['a','b','c','d','e'],'c1':[0,0,1,2,0],'c2':[3,0,2,1,2],'c3':[1,2,3,4,5]}
sort_by = [my_dict['c1'], my_dict['c2']]

for k, v in my_dict.items():
    my_dict[k] = [i[0] for i in sorted(zip(v, *sort_by), key=lambda x: x[1:], reverse=True)]

print(my_dict)
</code></pre>
<p>Output:</p>
<pre><code>{'name': ['d', 'c', 'a', 'e', 'b'], 'c1': [2, 1, 0, 0, 0], 'c2': [1, 2, 3, 2, 0], 'c3': [4, 3, 1, 5, 2]}
</code></pre>
</div>
<span class="comment-copy">This is not giving expected results. I have to sort the dictionary based on the value of a list. not the key</span>
<span class="comment-copy">Can someone explain to me how values of <code>name</code> and <code>c3</code> are sorted in order like that if it's based on both <code>c1</code> and <code>c2</code>?</span>
<span class="comment-copy">What do you mean by "sort by value of <code>c1</code> <b>and</b> <code>c2</code>? What does the <b>and</b> mean in that context? The sum of both values? And you do not want to sort the dictionary, you apparently want to sort the values of the keys according to the unknown rule.</span>
<span class="comment-copy">@JanChristophTerasa C1 and C2 means first we need to sort using C1 but if C1 has 2 same values then in that case for those similar values it should use C2 for sorting</span>
<span class="comment-copy">Your toy example works if I take the sum of the values of <code>c1</code> and <code>c2</code>. I do not understand the rule "if C1 has 2 same values" if you want to sort your values elementwise.</span>
<span class="comment-copy">This solution works only for the given data. Even if i add a single new element it is giving wrong result: my_dict = {'name':['a','b','c','d','e'],'c1':[0,0,1,2,0],'c2':[3,0,2,1,2],'c3':[1,2,3,4,5]}   O/P: {'c3': [4, 3, 1, 5, 2], 'c2': [1, 2, 2, 3, 0], 'c1': [2, 1, 0, 0, 0], 'name': ['d', 'c', 'a', 'e', 'b']}</span>
<span class="comment-copy">Which of both solutions?</span>
<span class="comment-copy">Both the solutions. I have updated the Description.</span>
<span class="comment-copy">The pure python solution does not solve the updated OP, I removed it. The pandas solution solves it correctly.</span>
<span class="comment-copy">Still c2 comes first, not working.</span>
<span class="comment-copy">What do you mean? Output is what OP desired.</span>
<span class="comment-copy">Still it is sorting only based on C2: my_dict = {'name':['a','b','c','d'],'c1':[0,0,1,2],'c2':[3,0,2,1],'c3':[1,2,3,4]} sort_by = my_dict['c2'] for k in my_dict:     my_dict[k] = sorted(my_dict[k], key=lambda x: sort_by[my_dict[k].index(x)], reverse=True)  print(my_dict)       Output: {'c3': [1, 3, 4, 2], 'c2': [3, 2, 1, 0], 'c1': [0, 0, 1, 2], 'name': ['a', 'c', 'd', 'b']}</span>
<span class="comment-copy">Updated my answer for sorting with multiple keys <code>c2</code> and <code>c1</code></span>
<span class="comment-copy">Still not giving the correct output</span>
