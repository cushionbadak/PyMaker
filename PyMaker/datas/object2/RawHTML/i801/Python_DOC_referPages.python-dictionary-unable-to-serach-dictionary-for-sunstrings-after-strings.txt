<div class="post-text" itemprop="text">
<p>this is <code>segments = body.split('\r\n')</code> variable (i just removed <code>\r\n</code> segment from it)from code i posted below:</p>
<pre><code>['', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:01.026Z', 'Message: LivePnL:in live pricing', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:01.016Z', 'Message: Risk request failed', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:00.994Z', 'Message: Risk request failed', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:00.956Z', 'Message: Risk request failed', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:00.927Z', 'Message: Risk request failed', '', '', '', 'For instructions please see: https://protect-eu.mimecast.com/s/2_5sC864NHV0NWin7Cr2?domain=wiki', '']
</code></pre>
<p>I want to get values after Application name,Source and Message</p>
<p><strong>Desired output:</strong></p>
<blockquote>
<p>Clarion.Pricing.Grid.Service</p>
<p>EC2AMAZ-ITEJKDI</p>
<p>LivePnL:in live pricing</p>
<p>Clarion.Pricing.Grid.Service</p>
<p>EC2AMAZ-ITEJKDI</p>
<p>Risk request failed</p>
<p>Clarion.Pricing.Grid.Service</p>
<p>EC2AMAZ-ITEJKDI</p>
<p>Risk request failed</p>
</blockquote>
<p>i Tried following code:</p>
<pre><code>if mail["Subject"].find("Alert for  Clarion prod errors") &gt; 0 :
       body = get_autosys_body(mail)
    for line in body.splitlines():
          if 'Application name' in line:

             info = {}
             # removes \r\n - put all output to single line
             segments = body.split('\r\n')
             for i in range(2, len(segments)):

               key = ''
               if segments[i] == 'Application name:':
                 key = 'alarm'

               elif segments[i] == 'Source:':
                 key = 'job'
               elif segments[i] == 'Message:':
                 key = 'machine'
               if key != '':
                 i += 1
               info[key] = segments[i]

    print (info['alarm'])
</code></pre>
<p>and i'm getting for all key combinations: info['alarm'], info['job'], info['machine']</p>
<p><strong>Actual output</strong></p>
<blockquote>
<p>print (info['source'])</p>
<p>KeyError: 'source'</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A few issues. First, if you are trying to create a lookup table, dictionaries are the way to go. However, your keys need to be unique, and yours are not. You will overwrite the values in your single dictionary.</p>
<p>Let's focus on getting the data into a key-value pair structure to start. Your keys are limited to (as far as I can tell) <code>alarm</code>, <code>job</code>, and <code>machine</code>. Since your keys don't match what's in the data structure, you will probably have to hardcode them. We will use your data structure that you have provided as the starting point:</p>
<pre><code>things = ['', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:01.026Z', 'Message: LivePnL:in live pricing', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:01.016Z', 'Message: Risk request failed', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:00.994Z', 'Message: Risk request failed', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:00.956Z', 'Message: Risk request failed', '', '', 'Application name: Clarion.Pricing.Grid.Service', 'Source: EC2AMAZ-ITEJKDI', 'Timestamp: 2019-01-23T22:00:00.927Z', 'Message: Risk request failed', '', '', '', 'For instructions please see: https://protect-eu.mimecast.com/s/2_5sC864NHV0NWin7Cr2?domain=wiki', '']

apps, source, messages = [], [], []

# I want to iterate over each element in things
for element in things:

    # Now, each element has one of two possibilities, an empty string or key-value
    # I will skip the empties like so
    if not element:
        continue

    # Now I will split on ': ' since I don't want a leading space in values
    k, v = element.split(': ')

    # And we match on the keys here
    if k=='Application name':
         apps.append(v)
    elif k=='Source':
         sources.append(v)
    elif k=='Message':
         messages.append(v)
    else:
         print(k)
</code></pre>
<p>This gets all of the values into associated lists which we can <code>zip</code> together for easy iteration.</p>
<pre><code>apps
# ['Clarion.Pricing.Grid.Service', 'Clarion.Pricing.Grid.Service', 'Clarion.Pricing.Grid.Service', 'Clarion.Pricing.Grid.Service', 'Clarion.Pricing.Grid.Service']
sources
# ['EC2AMAZ-ITEJKDI', 'EC2AMAZ-ITEJKDI', 'EC2AMAZ-ITEJKDI', 'EC2AMAZ-ITEJKDI', 'EC2AMAZ-ITEJKDI']
messages
# ['LivePnL:in live pricing', 'Risk request failed', 'Risk request failed', 'Risk request failed', 'Risk request failed']
</code></pre>
<p>Now to build your data structure (here are the docs for <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>lookups = []

# zip is putting the lists side-by-side so to speak for easy iteration
for app, src, msg in zip(apps, sources, messages):
    lookups.append({'alarm': app,
                    'job': src,
                    'machine': msg})
</code></pre>
<p>Your resulting data structure looks like this:</p>
<pre><code>[{'alarm': 'Clarion.Pricing.Grid.Service', 'job': 'EC2AMAZ-ITEJKDI', 'machine': 'LivePnL:in live pricing'}, {'alarm': 'Clarion.Pricing.Grid.Service', 'job': 'EC2AMAZ-ITEJKDI', 'machine': 'Risk request failed'}, {'alarm': 'Clarion.Pricing.Grid.Service', 'job': 'EC2AMAZ-ITEJKDI', 'machine': 'Risk request failed'}, {'alarm': 'Clarion.Pricing.Grid.Service', 'job': 'EC2AMAZ-ITEJKDI', 'machine': 'Risk request failed'}, {'alarm': 'Clarion.Pricing.Grid.Service', 'job': 'EC2AMAZ-ITEJKDI', 'machine': 'Risk request failed'}]
</code></pre>
<p>Each entry in <code>lookup</code> now is a <code>dictionary</code> with the keys alarm, job, and machine. You can <code>get</code> each value iteratively like so:</p>
<pre><code>for entry in lookup:
    print('alarm: %s'%entry.get('alarm'))
    ... # continue for other keys
</code></pre>
<p>Note I'm using the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=get#dict.get" rel="nofollow noreferrer"><code>get</code></a> method rather than <code>entry['alarm']</code>, this is a more robust lookup that avoids <code>KeyErrors</code> and instead returns a default value (<code>None</code> if not specified).</p>
<p>There are definitely faster and more succinct ways to do this, but I think this covers enough to keep things looking familiar and not bog you down with new concepts</p>
</div>
<span class="comment-copy">Sorry but I can't follow this at all.</span>
<span class="comment-copy">You haven't split the strings on <code>:</code> so I don't think any of your comparisons can be <code>True</code>. You could try <code>.startswith()</code> but I still don't think I follow.</span>
<span class="comment-copy">@iScripters putting info above loop didn't change anything</span>
<span class="comment-copy">@roganjosh i simply want to get string after Application name:  Message: and Source</span>
<span class="comment-copy">You are looking to build a <code>list</code> of <code>dictionaries</code>, not one <code>dictionary</code>, as there is overlap in the keys</span>
<span class="comment-copy">Yes, that works perfectly @C.Nivs, thank You very much, this is very helpfull explanation !!</span>
