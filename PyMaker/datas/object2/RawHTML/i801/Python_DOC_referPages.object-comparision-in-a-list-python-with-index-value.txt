<div class="post-text" itemprop="text">
<p>Lets say I have a class</p>
<pre><code>class Foo:
    def __init__(self, item1, item2):
        self.item1 = item1
        self.item2 = item2
</code></pre>
<p>And a objects list of that class</p>
<pre><code>object1 = Foo (1,2)  
object2 = Foo (1,2)
object3 = Foo (1,3)
objectlist = [object1, object3]
</code></pre>
<p>I would like to know whether object2 with same items is in the list of objectlist and after that I would like to get the index of it. In this case 0 index.</p>
<p>I can do this by </p>
<pre><code>def __eq__ (self, other):
    return (self.item1 == other.item1) and (self.item2 == other.item2)
</code></pre>
<p>And a for loop. Since I could be able to check every index one by one, and got the index if it equals to that object. But can I do it with more elagant way?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about?:</p>
<pre><code>class Foo:
    def __init__(self, item1, item2):
        self.item1 = item1
        self.item2 = item2


    def __eq__ (self, other):
        return (self.item1 == other.item1) and (self.item2 == other.item2)

object1 = Foo (1,2)  
object2 = Foo (1,2)
object3 = Foo (1,3)
objectlist = [object1, object3]

try:
    index_value = objectlist.index(object2)
    print(index_value)
except ValueError:
    index_value = -1
    print(index_value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The question is if you are going to differentiate between different <em>objects</em> but containing <code>item1</code> and <code>item2</code> of the same value.</p>
<p>If yes, then you do not have to check the contents of the object. Rather rely on the different identifier (<code>id(obj)</code>) of each instance of your class:</p>
<pre><code>object2 in objectlist
</code></pre>
<p>If not, then your approach is (almost) the correct one and I am not aware of any better. In your case you are not strictly checking the class of both objects is the same rather - that they are <em>structurally</em> the same (i.e. they have the same members <code>item1</code> and <code>item2</code>).</p>
<p>You may also want to review the answers of the following question: <a href="https://stackoverflow.com/questions/1227121/compare-object-instances-for-equality-by-their-attributes-in-python">Compare object instances for equality by their attributes in Python</a></p>
</div>
<span class="comment-copy">You mean <code>object2 in objectlist</code>?</span>
<span class="comment-copy">you could do  <code>return self.item1 == other.item1  and self.item2 == other.item2</code> and get rid of the <code>if</code> that not really serves any purpose</span>
<span class="comment-copy">I edited my question thank you</span>
<span class="comment-copy">Note that if you implement your <code>__eq__</code>, you probably want to also implement your <code>__hash__</code>. See the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">documentation for <code>__hash__</code></a>.</span>
<span class="comment-copy">You mean this my friend? Maybe I am missing something but I got -1 as result.</span>
<span class="comment-copy">@MericOzcan <code>__eq__</code> needs indentation, like this it's not part of the class.</span>
<span class="comment-copy">I changed it, thank you @mkiever. It should work now</span>
<span class="comment-copy">Thank you so this is the way ? O.o</span>
<span class="comment-copy">@MericOzcan this is a way to do what you said, yes.</span>
