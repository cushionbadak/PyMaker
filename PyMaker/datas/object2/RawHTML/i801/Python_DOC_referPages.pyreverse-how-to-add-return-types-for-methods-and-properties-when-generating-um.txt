<div class="post-text" itemprop="text">
<p>I am successfully generating UML reports from Python modules using <code>pyreverse</code> and <code>graphviz</code>. I can see that <code>pylint</code> is smart enough to say for some properties what is the output data type, but not for all and none for the methods.</p>
<p>The source code:</p>
<pre><code>def get_int():
    return 555

def get_math_int():
    return math.pow(2, 5)

class ClassFoo(object):
    def __init__(self, x, y):
        self.attr1 = "hello"
        self.attr2 = get_int()
        self.attr3 = get_math_int()

    def spam(self):
        return 77

class ClassBar(object):
    def __init__(self, x, y):
        self.attr4 = "hello"

    def spam(self):
        return 99
</code></pre>
<p>The output pdf</p>
<p><a href="https://i.stack.imgur.com/UmUQjm.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/UmUQjm.png"/></a></p>
<p>I have looked into <a href="http://pylint.pycqa.org/en/latest/technical_reference/extensions.html#pylint-extensions-docstyle" rel="nofollow noreferrer">pylint docstyle checker</a> but it looked irrelevant for my problem.</p>
<p>Is it possible to explicitly specify using either a type hint through comment, docstring or somehow else what data type will be returned by each method and attribute so that they will be shown in the pdf report?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5 or later, you could use the built-in <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typings</code> module</a>; in Python 2 or older versions of Python 3, <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> is your only option. A good IDE (PyCharm, for example), will actually tell you if you're making errors if all of your classes are well-annotated.</p>
<p>Extracting type information is pretty painful, but starts with reading the <code>__annotations__</code> attribute on classes that have type hints (see <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP-0484</a>).</p>
<p>Your example, fully type-hinted using Python 3.5 or later:</p>
<pre><code>from typing import Any

def get_int() -&gt; int:
    return 555

def get_math_int() -&gt; int:
    return math.pow(2, 5)

class ClassFoo(object):
    def __init__(self, x: Any, y: Any):
        self.attr1 = "hello"
        self.attr2 = get_int()
        self.attr3 = get_math_int()

    def spam(self) -&gt; int:
        return 77

class ClassBar(object):
    def __init__(self, x: Any, y: Any):
        self.attr4 = "hello"

    def spam(self) -&gt; int:
        return 99
</code></pre>
</div>
<span class="comment-copy">Ah sorry if I was unclear. Will this help pyreverse to add the return types for methods and attributes in the pdf report?</span>
<span class="comment-copy">Unfortunately not any time soon according to this issue: <a href="https://github.com/PyCQA/pylint/issues/1548" rel="nofollow noreferrer">github.com/PyCQA/pylint/issues/1548</a>. The best way to do this long-term would be to add type hints as you go and start to rely on them rather than trying to reverse engineer types, especially now that Python now has the ability to be more explicit about types (at least for the benefit of tooling).</span>
<span class="comment-copy">Thanks for posting the issue! I understand what you mean, good point. It just would be so nice to have the types in the pdf reports generated by <code>pyreverse</code> for reference purposes.</span>
