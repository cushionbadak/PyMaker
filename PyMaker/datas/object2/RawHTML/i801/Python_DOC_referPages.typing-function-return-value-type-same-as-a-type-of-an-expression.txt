<div class="post-text" itemprop="text">
<p>Consider the code:</p>
<pre><code>def foo() -&gt; ??:
     return bar()
</code></pre>
<p>How can I say that I want the return type of <code>foo</code> to be the same as the return type of <code>bar()</code>?</p>
<p>In C++ I could use <code>decltype</code>, something along the lines of:</p>
<pre><code>auto foo() -&gt; decltype(bar()) {
    return bar();
}
</code></pre>
<p>I couldn't find Python's equivalent. Is there any?</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>bar</code> is defined, you can access its signature</p>
<pre><code>In [1] from inspect import signature

In [2]: def bar(a: int) -&gt; float: 
   ...:     return float(a)                                         
   ...:                                                             

In [3]: def foo(a: int) -&gt; signature(bar).return_annotation: 
   ...:     return bar(a)                                           
   ...:                                                             

In [4]: signature(foo)                                              
Out[4]: &lt;Signature (a: int) -&gt; float&gt;        
</code></pre>
<p>That being said, I'm not sure you need that if you do this for static  type checking, because <code>foo</code>'s return type can be inferred from <code>bar</code>'s (at least PyCharm's static analyser tends to do that).</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's built-in typing library enables creating <a href="https://docs.python.org/3/library/typing.html#distinct" rel="nofollow noreferrer">custom types</a>, you can describe a new type class and couple both functions with this class as a return value.</p>
</div>
<span class="comment-copy">See this post: <a href="https://stackoverflow.com/questions/42124771/how-to-annotate-python-function-using-return-type-of-another-function" title="how to annotate python function using return type of another function">stackoverflow.com/questions/42124771/â€¦</a></span>
<span class="comment-copy">Do you need an explicit type? What will be inferred in its absence?</span>
<span class="comment-copy">@jonrsharpe I did the test, and you're right - it looks the correct type was inferred (at least as far as syntax completion in my editor goes).</span>
