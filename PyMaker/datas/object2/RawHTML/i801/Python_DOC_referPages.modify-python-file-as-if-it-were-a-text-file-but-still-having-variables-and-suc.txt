<div class="post-text" itemprop="text">
<p>I am testing some python stuff, and i started wondering if it was possible to modify a python file as if it were a text file.</p>
<p>I have looked at the <code>open(&lt;filename&gt;, "r+")</code>, but this just edits the file. I can't modify it like it was a python script, modifying the actual script and not just the cache.</p>
<hr/>
<pre class="lang-py prettyprint-override"><code>#main.py

import filea

filea.var1edit("Hello world")
</code></pre>
<p><strong>Expected before:</strong></p>
<pre class="lang-py prettyprint-override"><code>#filea.py

var1 = "Text"
def var1edit(var):
  global var1
  var1 = var
</code></pre>
<p><strong>Expected after:</strong></p>
<pre class="lang-py prettyprint-override"><code>#filea.py

var1 = "Hello world"
def var1edit(var):
  global var1
  var1 = var
</code></pre>
<hr/>
<p><strong>Actual after:</strong></p>
<pre class="lang-py prettyprint-override"><code>#filea.py

var1 = "Text"
def var1edit(var):
  global var1
  var1 = var
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Module <code>ast</code> and <code>astunparse</code> can be useful.
We first read the <code>.py</code> file, generate the AST, modify the AST, unparse it and write the new code back. Here is an example:</p>
<pre><code>#main.py
import ast
import astunparse

class ReWriteSource(ast.NodeTransformer):
    #visit 'Assign' node and modify
    def visit_Assign(self,node):
        if node.targets[0].id == 'var1' and isinstance(node.value,ast.Str):
            node.value.s = 'Hello World!'
        return node

#read .py file
with open('filea.py','r') as f:
    source = f.read()
#generate the AST
source_ast = ast.parse(source)
#modify the AST
ReWriteSource().visit(source_ast)
#unparse and write it back
with open('filea.py','w') as f:
    f.write(astunparse.unparse(source_ast))
</code></pre>
<p>original <code>filea.py</code>:</p>
<pre><code>#filea.py
var1 = 'Text'
def var1edit(var):
    global var1
    var1 = var
</code></pre>
<p>modified <code>filea.py</code>:</p>
<pre><code>#filea.py
var1 = 'Hello World!'
def var1edit(var):
    global var1
    var1 = var
</code></pre>
</div>
<span class="comment-copy">Have a look at the module <code>ast</code>. That parses your Python program into an abstract syntax tree and you can then do things like change the values of literals. I suspect that your project may be more challenging than you think.</span>
<span class="comment-copy">No, when running Python the files are loaded into memory. Variable names refer to in memory objects. If you assign a different object to a name you only affect the name in the running interpreter. Source files are really just an implementation detail, they don't really have to exist.</span>
<span class="comment-copy">@PeterWood ok, is there antway i can edit the source file of the program then</span>
<span class="comment-copy">@TheTaco you're probably trying to solve the <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">wrong problem</a>. But perhaps you need a templating engine like <a href="http://jinja.pocoo.org/" rel="nofollow noreferrer"><code>jinja2</code></a>. If you are wanting to save state for later you could use <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><b><code>pickle</code></b></a>, <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><b><code>json</code></b></a>, or <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><b><code>csv</code></b></a> depending upon your needs. Better to search and ask questions about those.</span>
