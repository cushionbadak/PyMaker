<div class="post-text" itemprop="text">
<p>What exactly happens, when yield and return are used in the same function in Python, like this?</p>
<pre><code>def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub) # use start += 1 to find overlapping matches
</code></pre>
<p>Is it still a generator?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it' still a generator. The <code>return</code> is (almost) equivalent to raising <code>StopIteration</code>.</p>
<p><a href="http://www.python.org/dev/peps/pep-0255/" rel="noreferrer">PEP 255</a> spells it out:</p>
<blockquote>
<h2>Specification: Return</h2>
<p>A generator function can also contain return statements of the form:</p>
<pre><code>"return"
</code></pre>
<p>Note that an expression_list is not allowed on return statements in
  the body of a generator (although, of course, they may appear in the
  bodies of non-generator functions nested within the generator).</p>
<p>When a return statement is encountered, control proceeds as in any
  function return, executing the appropriate finally clauses (if any
  exist).  Then a StopIteration exception is raised, signalling that the
  iterator is exhausted.   A StopIteration exception is also raised if
  control flows off the end of the generator without an explict return.</p>
<p>Note that return means "I'm done, and have nothing interesting to
  return", for both generator functions and non-generator functions.</p>
<p>Note that return isn't always equivalent to raising StopIteration: 
  the difference lies in how enclosing try/except constructs are
  treated. For example,</p>
<pre><code>&gt;&gt;&gt; def f1():
...     try:
...         return
...     except:
...        yield 1
&gt;&gt;&gt; print list(f1())
[]
</code></pre>
<p>because, as in any function, return simply exits, but</p>
<pre><code>&gt;&gt;&gt; def f2():
...     try:
...         raise StopIteration
...     except:
...         yield 42
&gt;&gt;&gt; print list(f2())
[42]
</code></pre>
<p>because StopIteration is captured by a bare "except", as is any
  exception.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is still a generator. An empty <code>return</code> or <code>return None</code> can be used to end a generator function. It is equivalent to raising a <code>StopIteration</code>(see <a href="https://stackoverflow.com/a/26595922/846892">@NPE's answer</a> for details).</p>
<p>Note that a return with non-None arguments is a <code>SyntaxError</code> in Python versions prior to 3.3. </p>
<p>As pointed out by @BrenBarn in comments starting from Python 3.3 the return value is now passed to <code>StopIteration.</code></p>
<p>From <a href="http://legacy.python.org/dev/peps/pep-0380/#formal-semantics" rel="noreferrer">PEP 380</a>:</p>
<blockquote>
<p>In a generator, the statement</p>
<pre><code>return value
</code></pre>
<p>is semantically equivalent to</p>
<pre><code>raise StopIteration(value)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>There is a way to accomplish having a yield and return method in a function that allows you to return a value or generator.</p>
<p>It probably is not as clean as you would want but it does do what you expect.</p>
<p>Here's an example:</p>
<pre><code>def six(how_many=None):
    if how_many is None or how_many &lt; 1:
        return None  # returns value

    if how_many == 1:
        return 6  # returns value

    def iter_func():
        for count in range(how_many):
            yield 6
    return iter_func()  # returns generator
</code></pre>
</div>
<span class="comment-copy">Do you know what would happen if the <code>return</code> had an argument?</span>
<span class="comment-copy">@Zack In Python 2.x, it'd be a SyntaxError: <code>SyntaxError: 'return' with argument inside generator</code>. It's allowed in Python 3.x, but is primarily meant to be used with coroutines - you make asynchronous calls to other coroutines using <code>yield coroutine()</code> (or <code>yield from coroutine()</code>, depending on the asynchronous framework you're using), and return whatever you want to return from the coroutine using <code>return value</code>. In Python 2.x, you need to use a trick like <code>raise Return(value)</code> to return values from coroutines.</span>
<span class="comment-copy">Do you know what would happen if the <code>return</code> had an argument (other than <code>None</code>)?</span>
<span class="comment-copy">@Zack SyntaxError.</span>
<span class="comment-copy">In Python 3.3 and up, you can use <code>return</code> with an argument to pass the argument to the StopIteration that is raised.  See <a href="http://stackoverflow.com/questions/16780002/return-in-generator-together-with-yield-in-python-3-3">this question</a>.</span>
<span class="comment-copy">@AshwiniChaudhary The coroutine implementation in the new <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer"><code>asyncio</code></a> module is built on that feature (along with the <code>yield from</code> keyword).</span>
<span class="comment-copy">@AshwiniChaudhary That enabled basic coroutines in Python - the ability to send values/exceptions into generators, and receive them via <code>value = yield</code>, etc. The introduction of <code>yield from</code> and the ability to <code>return</code> values from generators came with <a href="http://legacy.python.org/dev/peps/pep-0380/" rel="nofollow noreferrer">PEP 380</a>, both of which are leveraged leveraged by <code>asyncio</code>. You can still have a robust coroutine implementation with just the features provided by PEP 343, it's just a little less clean to write them.</span>
