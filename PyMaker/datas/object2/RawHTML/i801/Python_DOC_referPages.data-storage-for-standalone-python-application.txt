<div class="post-text" itemprop="text">
<p>I want to make a python program (with a PyQt GUI, but I don't know whether that is relevant) that has to save some information that I want to store even when the program closes. Example for information I want to store:</p>
<ol>
<li><p>The user can search for a file in a file dialog window. I want to start the file dialog window in the <strong>previously used directory</strong>, even if the program is closed in between file searches.</p></li>
<li><p>The user can enter their own categories to sort items, building up on some of my predefined categories. These <strong>new categories</strong> should be available the next time the program starts.</p></li>
</ol>
<p>Now I'm wondering what the <em>proper</em> way to store such information is. Should I use pickle? A proper database (I know a tiny bit of sqlite3, but would have to read up on that)? A simple text file that I parse myself? One thing for data like in example 1., another for data like in example 2.?</p>
<p>Also, whatever way to store it I use, where would I put that file?</p>
<p>I'm asking in the context that I might want to later make my program available to others as a standalone application (using py2app, py2exe or PyInstaller).</p>
<p>Right now I'm just saving a pickle file in the directory that my .py file is in, like <a href="https://stackoverflow.com/a/6161298/10944175">this answer</a> reconmends, but the answer also specifically mentions:</p>
<blockquote>
<p>for a <strong>personal project</strong> it might be enough.</p>
</blockquote>
<p>(emphasis mine)</p>
<p>Is using pickle also the "proper, professional" way, if I want to make the program available to other people as a standalone application?</p>
</div>
<div class="post-text" itemprop="text">
<p>Choice depends on your approach to data you store, which is yours?:</p>
<ul>
<li>user should be able to alter it without usage of my program</li>
<li>user should be prevented from altering it with program other than my program</li>
</ul>
<p>If first you might consider deploying <strong>JSON</strong> open-standard file format, for which Python has ready library called <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a>. In effect you get text (which you can save to file) which is <em>human-readable</em> and can be edited in text editor. Also there exist JSON file viewers and editors which made viewing/editing of JSON files easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think SQLite3 is the better solution in this case as Moldovan commented.</p>
<p>There is a problem in pickle, sometimes pickling format can be change across python versions and there are greater advantages of using sqlite3.</p>
</div>
<span class="comment-copy">SQLite might be a better solution. You can check it here: <a href="https://www.sqlite.org/index.html" rel="nofollow noreferrer">sqlite.org/index.html</a></span>
<span class="comment-copy">I voted to close your question as primarily opinion based - not that it's a bad question by itself, but your only criteria - "the proper professional way" - is not quantifiable and no answer based on this criteria alone can be backed by facts.  Actually, my own definition of "the proper professional way" is  "the simplest solution that gets the job done reliably", so I really woudn't consider sqlite as "the proper professional way" here. For your needs, a mere json file seems like a very obvious choice.</span>
<span class="comment-copy">NB : sqlite <i>would</i> be a sound choice if you had to deal with a larger set of relational data and don't want to depend on an external rdbms.</span>
<span class="comment-copy">@brunodesthuilliers, I get why you would vote to close it in that case, but as someone new to needng persistent data, I didn't know there wasn't some "proper, professional" way, defined in some styleguide / coding convention that I didn't know about.</span>
<span class="comment-copy">Well, actually being "professionnal" only means that you get paid for you job - it doesn't say anything about your work's quality, and I can tell you that an awful lot of  "professional" code I see is definitly not "proper" in any way.  And no, there's no "style guide" or "coding convention" (both of which are purely arbitrary rules FWIW) for such design choices. At best there are "good practices", which consist mostly in choosing something that is robust, proven, stable, well known, well maintained, and as much as possible language-agnostic. And adapted to your use case of course.</span>
<span class="comment-copy">That's something I haven't considered and is certainly a good point to keep in mind: do I <i>want</i> people to be able to read and edit the stored data? And what happens if the user manipulates the file in a certain way that would cause unexpected behaviour...</span>
<span class="comment-copy">I chose this as my accepted answer. After brunodesthuilliers comments I think both a json file and an sqlite db would be the "right" way to do it, but I will go with a JSON file, since it is (for me) easier to implement, and the user can edit it more easily themselves, if e.g. they prefer adding categories via editing the JSON file instead of in the program.</span>
<span class="comment-copy">OK, but if I bundle the script as a standalone application, would it really matter if pickle changes across versions? Also, could you elaborate on other greater advantages of using sqlite3?</span>
