<div class="post-text" itemprop="text">
<p>I'm trying to generate combinations of elements from multiple lists where the order is very important.</p>
<p>For example:</p>
<pre><code>list1_mand = ['x', 'y']
list2 = ['a', 'b', 'c']
list3 = ['1', '2', '3']
list4_mand = ['A', 'B', 'C']
list5 = ['X', 'Y', 'Z']
</code></pre>
<p>The code should be able to do the following:</p>
<ol>
<li>Generate all possible combinations in very specific orders (1st element from list1_mand, next from list2 and so on...): The order cannot be 1st element from list2, next from list5 etc.</li>
</ol>
<p>For Example:
'xa1AX' is a valid output whereas 'axXA1' is not</p>
<ol start="2">
<li>There should be not repetition of elements.</li>
<li>For specific lists (list1_mand, list4_mand), the elements from these lists have to be present in the combination, whereas elements from other lists can be skipped.</li>
</ol>
<p>For Example:
'xAX' is a valid output, whereas, 'a1AX' is not (element from list1_mand is skipped).</p>
<p>Taking into consideration the above three constraints, how can I use the itertools package to generate the required output?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> you want. The tricky part is being able to <em>omit</em> the non-mandatory lists but for that, there is a workaround<sup>1</sup>.</p>
<pre><code>from itertools import product

list1_mand = ['x', 'y']
list2 = ['a', 'b', 'c']
list3 = ['1', '2', '3']
list4_mand = ['A', 'B', 'C']
list5 = ['X', 'Y', 'Z']

lst = [list1_mand, list2 + [''], list3 + [''], list4_mand, list5 + ['']]

# if you want to generate them one-by-one (for processing in between or whatnot)
for c in product(*lst):
    new_string = ''.join(c)
    # do something with it before yielding the next one

# if you don't mind generating them all at once, see note 2.
res = [''.join(c) for c in product(*lst)]
</code></pre>
<p>Either way, here are the first ones produced:</p>
<pre><code># xa1AX
# xa1AY
# xa1AZ
# xa1A   &lt;-- first example of omission.
# xa1BX
# xa1BY
# xa1BZ
# xa1B
# xa1CX
# xa1CY
# xa1CZ
# xa1C
# xa2AX
# xa2AY
# xa2AZ
# xa2A
# xa2BX
# xa2BY
</code></pre>
<hr/>
<p><sup>1</sup> By adding the <code>""</code> in the non-mandatory lists, there will be results that will contain that instead and consequently, e.g., <code>'xA'</code> will also be <code>yield</code>ed (eventually).</p>
<p><sup>2</sup> Note that the length of the <code>res</code> list will be the product of the lengths of the initial lists after the workaround modification. In this case, it is 384 (=2x4x4x3x4) which is small, but keep it in mind in case, you decide to go big.</p>
</div>
<span class="comment-copy">This is a very interesting task. How could you resist the temptation to try and code it yourself? (if you did, my apologies and please do post your effort).</span>
<span class="comment-copy">Apologies! I'm new to itertools, and this task is a part of a huge project that's on a very tight schedule. But point noted and I'll update the question as soon as I have put in some effort!</span>
<span class="comment-copy">If I'm understanding this logic, you've added [' '] at the end of every non-mandatory list, so that in the final cartesian product, there will be one combination where no element from the non-mandatory list is present?</span>
<span class="comment-copy">@ketaningle80. On every cartesian product there is exactly one item from every list. But if a list contains <code>''</code> as well, some products will have that. It is cheating actually. Note that it is not <code>' '</code> but <code>''</code> (empty string, not space).</span>
<span class="comment-copy">Just read up on itertools.product. Got it! Thanks for the detailed solution. Will definitely do my own research more extensively before posting a problem here.</span>
