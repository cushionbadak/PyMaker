<div class="post-text" itemprop="text">
<p>The file <code>scheduling.py</code> currently contains nothing. What does it need to contain, so the last statement, <code>cursor.chronology()</code>, prints <code>Hello World</code>? I do want this method to be available to anything that might be defined by means of <code>sqlite.connect()</code>.</p>
<pre><code>import sqlite3
import scheduling
db = sqlite3.connect(':memory:')
cursor = db.cursor()
cursor.chronology()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.connect" rel="nofollow noreferrer"><code>sqlite3.connect()</code></a> and <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor" rel="nofollow noreferrer"><code>sqlite3.onnection.cursor()</code></a> methods allow you to specify <code>factory</code> argument to replace the normal connection or cursor class with your own subclass. You can use these paths to provide your own <code>cursor.chronology()</code> method.</p>
<p>So you'd subclass the <code>sqlite3.Cursor</code> class to add your custom method:</p>
<pre><code>import sqlite3

class ChronologyCursor(sqlite3.Cursor):
    def chronology(self):
        print("Hello World")
        # ...
</code></pre>
<p>You can then use that class as the <code>factory</code> argument to the <code>cursor()</code> call:</p>
<pre><code>&gt;&gt;&gt; db = sqlite3.connect(':memory:')
&gt;&gt;&gt; cursor = db.cursor(factory=ChronologyCursor)
&gt;&gt;&gt; type(cursor)
&lt;class '__main__.ChronologyCursor'&gt;
&gt;&gt;&gt; cursor.chronology()
Hello World
</code></pre>
<p>You can also use a connection factory (subclassing <code>sqlite3.connection()</code>) to always use your cursor class:</p>
<pre><code>class ChronologyConnection(sqlite3.Connection):
    def cursor(self, *args, **kwargs):
        if kwargs.get('factory') is None:
            kwargs['factory'] = ChronologyCursor
        return super().cursor(*args, **kwargs)
</code></pre>
<p>then use <code>db = sqlite3.connect(':memory:', factory=ChronologyConnection)</code> to use the new connection class:</p>
<pre><code>&gt;&gt;&gt; db = sqlite3.connect(':memory:', factory=ChronologyConnection)
&gt;&gt;&gt; type(db)
&lt;class '__main__.ChronologyConnection'&gt;
&gt;&gt;&gt; cursor = db.cursor()
&gt;&gt;&gt; cursor.chronology()
Hello World
</code></pre>
<p>I strongly recommend <em>against</em> patching the <code>sqlite3.connect()</code> function to make the above factory the default, but if you <strong>must</strong> have this be transparent, you can put your own <code>connect()</code> function on the <code>sqlite3</code> module. The base package is pure Python so you <em>can</em> monkey-patch an alternative <code>connect()</code> function into it.</p>
<p>So in your <code>scheduling</code> module, you'd place the above classes, then use:</p>
<pre><code>_sqlite3_connect = sqlite3.connect

def chronology_connect(*args, **kwargs):
    if kwargs.get('factory') is None:
        kwargs['factory'] = ChronologyConnection
    return _sqlite3_connect(*args, **kwargs)

sqlite3.connect = chronology_connect
</code></pre>
<p>Now importing <code>scheduling</code> is enough to make calls to <code>sqlite3.connect()</code> use your alternate connection factory:</p>
<pre><code>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; import scheduling
&gt;&gt;&gt; db = sqlite3.connect(':memory:')
&gt;&gt;&gt; cursor = db.cursor()
&gt;&gt;&gt; cursor.chronology()
Hello World
&gt;&gt;&gt; type(db)
&lt;class 'scheduling.ChronologyConnection'&gt;
&gt;&gt;&gt; type(cursor)
&lt;class 'scheduling.ChronologyCursor'&gt;
</code></pre>
<p>The reason you would <em>not</em> want to do the above is that it makes <code>sqlite3.connect()</code> calls deviate from the norm, act in ways that clash with what the documenation states. That makes your code harder to maintain in the long run. I'd stick with explicit <code>sqlite3.connect(...., factory=ChronologyConnection)</code> calls instead.</p>
</div>
<span class="comment-copy">Your comments have been helpful. I do want to put my class definitions in chronology.py, because that is part of my actual application, while dummy.py is used to insert test data and debugging code during development.  Whey I put the following: class ChronologyCursor(sqlite3.Cursor): 	def chronology(self): 		print("Hello World")  in dummy.py, it does exactly what I want. Unfortunately, putting the exact same code in chronology.py yields the error message:  ChronologyCursor is not defined  At least I have it narrowed down to a scope issue. How do I resolve that?</span>
<span class="comment-copy">@vegebond: that's not something I can solve in comments. That'd perhaps be subject of a new question. Make sure to put enough code, as well as the full traceback, into such a question so we can reproduce the issue.</span>
