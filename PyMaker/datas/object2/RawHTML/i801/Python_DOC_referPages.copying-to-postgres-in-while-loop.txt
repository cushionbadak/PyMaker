<div class="post-text" itemprop="text">
<p>Having somewhat a strange issue with python, not unsure if this is something to do with psycopg2 or some rookie error im making with python.</p>
<p>Essentially i have a function that copy's data from a csv and attempts to insert it into a pgsql database using psycopg2. If there is an a data type error i want the code to try and rectify it and then re-attempt to insert the data into the data base. here is the code:</p>
<pre><code>def copy(self, csvFile):
    error = True
    i = 0
    while error:
        try:
            i += 1
            print(f'attempt {i}')
            self.connect()
            csr = self.conn.cursor()
            csr.copy_expert("COPY foo.bar FROM STDOUT NULL '' CSV HEADER", csvFile)
        except psycopg2.DataError as err:
            print(err)
            print(err.pgcode)
            csr.close()
            self.conn.close()
            #self.conn.rollback()
            if err.pgcode == '22001':
                if 'character varying' in err.args[0]:
                    currlength = re.search(r'\((.*?)\)', err.args[0]).group(1)
                    newlength = int(currlength) * 2
                    s = err.args[0].split()
                    col = s[s.index('column') + 1].replace(':','')
                    sql = f'alter table foo.bar alter column {col} type varchar({newlength})'
                    print(f'Column Length too short adjusting {col} from {currlength} to {newlength}\n {sql}')
                    self.execute(sql)
            elif err.pgcode == '22p02':
                s = err.args[0].split()
                col = s[s.index('column') + 1].replace(':', '')
                sql = f'alter table foo.bar alter column {col} varchar(64)'
                print(f'numeric column {col} contains text altering to varchar')
                self.execute(sql)
        else:
            self.conn.commit()
            csr.close()
            error = False
</code></pre>
<p>What happens is that the first try executes as expected and throws the error, then the alter table statement runs correctly, on the second attempt the copy_expert function does nothing but doesnt error and the code completes without inserting the csv data into the database. This is the output showing it tries for the second time. </p>
<pre><code>&gt; attempt 1 
&gt; value too long for type character varying(1) CONTEXT:  COPY
table, line 3, column id: "12345678"
&gt; 
&gt; 22001 
&gt; Column Length too short adjusting assetid from 1 to 2  
&gt; alter table foo.bar alter column id type varchar(2) 
&gt; Executing query alter table foo.bar alter column assetid type varchar(2)             
&gt; attempt 2
&gt; Download and insert of file.csv Complete
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, after having spent ~30 minutes enthusiastically walking down a blind alley, I think I found the cause of the issue. It has neither to do with <code>psycopg2</code>, nor would I necessarily call it a rookie mistake. I was actually quite convinced that it was about isolation levels ... it wasn't.</p>
<p>It's the file handle. The file is read completely by <code>copy_expert</code> so the internal pointer is at its end when the <code>psycopg2.DataError</code> raises. There's simply nothing left to read from that handle the second time around. </p>
<p>If you put <code>csvFile.seek(0)</code> in your <code>except</code> block, the pointer will be reset to the beginning of the file.</p>
<pre><code>except psycopg2.DataError as err:
    csvFile.seek(0)
</code></pre>
<p>I have created a little test class using your <code>copy</code> method and implemented the methods <code>execute</code> and <code>connect</code> the way I assumed you did. <br/>I was able to reproduce the behavior you describe in your post and resetting the pointer in the <code>except</code> block led to the data in the file being visible in the database after the second attempt, following the modification of the column length.</p>
</div>
<span class="comment-copy"><code>COPY foo.bar FROM STDOUT [...]</code>: shouldn't that read <code>COPY foo.bar FROM STDIN [...]</code>?</span>
<span class="comment-copy">its a good point @shmee but its not the problem. if the table doesn't need alteration. i.e. the exception isn't reached the data copy's to the database no problem</span>
<span class="comment-copy">Excellent. Interesting i was starting to assume that nothing was actually wrong with the code and that its was reading nothing, which i guess i kind of true. I have never actually seen the seek method within csv, but anyway cant thank you enough works a treat now</span>
<span class="comment-copy">@Tik <a href="https://docs.python.org/3/library/io.html#io.TextIOBase.seek" rel="nofollow noreferrer"><code>seek</code></a> is a method of <code>TextIOBase</code> objects. An instance of a subclass of these is returned by <code>open()</code> when passing the path to a file to it.</span>
