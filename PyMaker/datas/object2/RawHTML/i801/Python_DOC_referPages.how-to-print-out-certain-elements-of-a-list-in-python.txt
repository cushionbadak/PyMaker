<div class="post-text" itemprop="text">
<p>So I have a list <code>li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</code> and I only want to print out elements that are a part of an arithmetic sequence <code>6n - 5</code> (1st, 7th and 13th). </p>
<p>How can I do that if I have a list with n elements?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply say</p>
<pre><code>print([x for x in li if x % 6 == 1])
</code></pre>
<p>or, alternatively, if you just want the sequence and don't want to bother about creating <code>li</code> in the first place,</p>
<pre><code>print([6*n-5 for n in range(1, (13+5)//6+1)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the code:</p>
<pre><code>li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] 
new=[]
for i in li:
    if int((i+5)/6)==((i+5)/6): 
    #You can also use
    #if ((i+5)/6).is_integer():
         new.append(i)
</code></pre>
<p>I tried to make it as easy as possible.</p>
<p>Hope it helps :)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

for n in range(1,len(li)+1): #choose n such that it is length of the list since it cant have more values than the number of values in the list.
    for i in li:
        if (6*n - 5) == i:
           print(i)
</code></pre>
<p>Hope this helps</p>
<p>Thanks</p>
<p>Michael</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I understand, you want the elements whose positions are generated by the sequence. Hence, you want elements from an array of length <code>n</code> whose index is from the sequence function <code>6x-5</code>. </p>
<p><strong>NOTE</strong>: I am assuming you are using 1-based indexing, which means, when you say 1st element in your list, you intend to get <code>1</code> and <strong>not</strong> <code>2</code>.</p>
<pre class="lang-py prettyprint-override"><code>n = 13
li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

# generate the sequence till n
seq = []
x = 1
while 6*x-5 &lt;= n:
    seq.append(6*x-5)
    x += 1

# Print the elements from the sequence:
for idx in seq:
    print(li[idx-1])

# If you want to store it in another list:
li2 = [li[idx-1] for idx in seq]
</code></pre>
<p>Below is a more generic and efficient way for above code:</p>
<pre class="lang-py prettyprint-override"><code>n = 13
li = list(range(1, n+1)) # More easy to write

# More efficient way is to create a generator function
def get_seq(n):
    x = 1
    while 6*x-5 &lt;= n:
        yield 6*x-5
        x += 1

# Get the generator object
seq = get_seq(n)

# Print the elements from the sequence:
for idx in seq:
    print(li[idx-1])

# Want to store it in another list:
seq = get_seq(n) # Don't forget to get a new generator object.
li2 = [li[idx-1] for idx in seq]
</code></pre>
<p>Output for both snippets:</p>
<pre><code>1
7
13
</code></pre>
<p>Hope the answer helps, and remove confusion for others as well ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply generate the sequence for any n.</p>
<p>for example:</p>
<pre><code>n = 10
print([ 6*x - 5 for x in range(1,n)])
</code></pre>
<p>output:</p>
<pre><code>[1, 7, 13, 19, 25, 31, 37, 43, 49]
&gt;&gt;&gt;  [Finished in 0.2s]
</code></pre>
<p>But if you just want to filter your existing list li:</p>
<pre><code>li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
print([ x for x in li if x % 6 == 1 ])
</code></pre>
<p>output:</p>
<pre><code>[1, 7, 13]
&gt;&gt;&gt; 
[Finished in 0.3s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>li[1]</code> is 2, <code>li[7]</code> is 8 and the element with the index 13 is out of range.</p>
<pre><code>li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] 

for num, i in enumerate(li):
   if ((num + 5)/6).is_integer():
       print(i)
# 2
# 8
</code></pre>
<p>If you want to start with the index 1 add <code>start=1</code> to the <code>enumerate()</code> function.</p>
<pre><code>for num, i in enumerate(li, start=1):
   if ((num + 5)/6).is_integer():
       print(i)
# 1
# 7
# 13
</code></pre>
</div>
<span class="comment-copy">Extended slicing. Depending on your starting index, <code>li[1::6]</code> or <code>li[::6]</code>.</span>
<span class="comment-copy">IMHO this is not what the question is about. You are printing the numbers which match the sequence, but the question asks to get the "1st", "7th", and "13th" element from the array.</span>
<span class="comment-copy">I kind of doubt it, just because <code>li</code> happens to be a list of consecutive integers, but if that's what they want, the first approach could be changed to <code>[x for i, x in enumerate(li) if i % 6 == 0]</code>.</span>
<span class="comment-copy">What do you think about my answer :P, what you have written is kind of finding an inverse of the sequence function and use it as a condition, which might be complicated for a complex sequence, or what if it comes from a different function itsef.. still your way does it in much fewer lines of code.</span>
<span class="comment-copy">and what could i do if there were strings in the list and i wanted to print out 1st, 7th and 13th element?</span>
<span class="comment-copy">@urbanpeƒçoler: That's actually the situation that NVS Abhilash mentions above. Then you could use e.g. the approach I mention in the second comment to this post.</span>
<span class="comment-copy">there is <a href="https://docs.python.org/3/library/stdtypes.html#float.is_integer" rel="nofollow noreferrer"><code>float.is_integer</code> method</a></span>
<span class="comment-copy">Oh . thanks for the upate . i didnt know</span>
<span class="comment-copy">or floor division <code>(i+5)//6 == (i+5)/6</code></span>
