<div class="post-text" itemprop="text">
<p>I have dict comprehension with lambda function and scalar:</p>
<pre><code>d = {k: lambda x : x.sum() if 'a' in k else 'yes' for k in ['bac','sss','asa']}
print (d)
{'bac': &lt;function &lt;dictcomp&gt;.&lt;lambda&gt; at 0x00000000031891E0&gt;, 
 'sss': &lt;function &lt;dictcomp&gt;.&lt;lambda&gt; at 0x000000000D887EA0&gt;, 
 'asa': &lt;function &lt;dictcomp&gt;.&lt;lambda&gt; at 0x000000000D887B70&gt;}
</code></pre>
<p>If want both scalars it working nice:</p>
<pre><code>d = {k: 'no' if 'a' in k else 'yes' for k in ['bac','sss','asa']}
print (d)
{'bac': 'no', 'sss': 'yes', 'asa': 'no'}
</code></pre>
<p>Expected output - combination of scalars and lambda function:</p>
<pre><code>print (d)
{'bac': &lt;function &lt;dictcomp&gt;.&lt;lambda&gt; at 0x00000000031891E0&gt;, 
 'sss': 'yes', 
 'asa': &lt;function &lt;dictcomp&gt;.&lt;lambda&gt; at 0x000000000D887B70&gt;}
</code></pre>
<p>What is happening? Why it is not working? What is the correct approach?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your syntax is parsed as follows (note the location of the parentheses):</p>
<pre><code>{k: lambda x : (x.sum() if 'a' in k else 'yes') for k in ['bac','sss','asa']}
#              ^                              ^
</code></pre>
<p>You want:</p>
<pre><code>{k: (lambda x : x.sum()) if 'a' in k else 'yes' for k in ['bac','sss','asa']}
#   ^                  ^
</code></pre>
<p>This is because <code>lambda</code> has <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">lower precedence</a> than <code>if</code>-<code>else</code>.</p>
<p>A simpler example also illustrates this:</p>
<pre><code>&gt;&gt;&gt; lambda x: 0 if False else True
&lt;function &lt;lambda&gt; at 0x7efdbe55abf8&gt;
&gt;&gt;&gt; lambda x: (0 if False else True)
&lt;function &lt;lambda&gt; at 0x7efdbe55ac80&gt;
&gt;&gt;&gt; (lambda x: 0) if False else True
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {k: (lambda x : x.sum()) if 'a' in k else 'yes' for k in ['bac','sss','asa']}
</code></pre>
<p>should work. The reason (as far as I understand) is that boundaries for parsing lambda is overlapping with your comprehension — basically, python parsing your lambda as <code>x.sum() if 'a' in k else 'yes'</code> — with reference to locals</p>
</div>
<span class="comment-copy"><code>d = {k: (lambda x : x.sum()) if 'a' in k else 'yes' for k in ['bac','sss','asa']}</code> works (wrapping lambda in parentheses) but I don't know why. Presumably some of the rest of the expression gets wrapped up in lambda in your current approach.</span>
