<div class="post-text" itemprop="text">
<p>I want to <code>apply</code> a function using one column on another column in a pandas dataframe</p>
<pre><code># function to select an item from a list in a column
def select_index(r, i):
    return list(np.take(r, i))

# create DataFrame
col = ['index', 'Column2', 'Column3']

d = {'index': [['a1', 'a2', 'a3'], ['a10', 'a20', 'a30']],
     'Column2': [['b1', 'b2', 'b3'], ['b10', 'b20', 'b30']],
     'Column3': [[0, 1], [1, 2]]
    }

df = pd.DataFrame(data=d, columns=col)
df.set_index('index', inplace=True)

print(df)

                         Column2 Column3
index                                   
[a1, a2, a3]        [b1, b2, b3]  [0, 1]
[a10, a20, a30]  [b10, b20, b30]  [1, 2]
</code></pre>
<p>When I do the <code>apply</code> like:</p>
<pre><code>df['Column2'] = df[['Column2', 'Column3']].apply(lambda x: select_index(*x), axis=1)
</code></pre>
<p>I get the following error:</p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-241-60f4b4130a38&gt; in &lt;module&gt;
      1 df.loc = df[['Column2', 'Column3']].apply(
      2     lambda x: select_index(*x),
----&gt; 3     axis=1
      4 )

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/frame.py in apply(self, func, axis, broadcast, raw, reduce, result_type, args, **kwds)
   6012                          args=args,
   6013                          kwds=kwds)
-&gt; 6014         return op.get_result()
   6015 
   6016     def applymap(self, func):

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/apply.py in get_result(self)
    140             return self.apply_raw()
    141 
--&gt; 142         return self.apply_standard()
    143 
    144     def apply_empty_result(self):

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/apply.py in apply_standard(self)
    246 
    247         # compute the result using the series generator
--&gt; 248         self.apply_series_generator()
    249 
    250         # wrap results

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/apply.py in apply_series_generator(self)
    274         else:
    275             try:
--&gt; 276                 for i, v in enumerate(series_gen):
    277                     results[i] = self.f(v)
    278                     keys.append(v.name)

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/apply.py in &lt;genexpr&gt;(.0)
    365         constructor = self.obj._constructor_sliced
    366         return (constructor(arr, index=self.columns, name=name)
--&gt; 367                 for i, (arr, name) in enumerate(zip(self.values,
    368                                                     self.index)))
    369 

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)
    279         generic.NDFrame.__init__(self, data, fastpath=True)
    280 
--&gt; 281         self.name = name
    282         self._set_axis(0, index, fastpath=True)
    283 

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/generic.py in __setattr__(self, name, value)
   4396             object.__setattr__(self, name, value)
   4397         elif name in self._metadata:
-&gt; 4398             object.__setattr__(self, name, value)
   4399         else:
   4400             try:

~/miniconda3/envs/cl/lib/python3.6/site-packages/pandas/core/series.py in name(self, value)
    406     def name(self, value):
    407         if value is not None and not is_hashable(value):
--&gt; 408             raise TypeError('Series.name must be a hashable type')
    409         object.__setattr__(self, '_name', value)
    410 

TypeError: Series.name must be a hashable type
</code></pre>
<p>I don't really understand why this is happening.</p>
<p>Any possible solutions to fix this?</p>
<p>Edit:
I want the resulting dataframe to be like:</p>
<pre><code>                         Column2 Column3
index                                   
[a1, a2, a3]        [b1, b2]  [0, 1]
[a10, a20, a30]  [b20, b30]  [1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems to be an issue with your index being mutable objects. Things begin to work if you reset it first.</p>
<pre><code>df.reset_index().apply(lambda x: select_index(x['Column2'], x['Column3']), axis=1)

0      [b1, b2]
1    [b20, b30]
dtype: object
</code></pre>
<p>Or,</p>
<pre><code>df.reset_index()[['Column2', 'Column3']].apply(lambda x: select_index(*x), axis=1)

0      [b1, b2]
1    [b20, b30]
dtype: object
</code></pre>
<hr/>
<pre><code>df['Column4'] = df.reset_index()[['Column2', 'Column3']].apply(
       lambda x: select_index(*x), axis=1).values
df

                         Column2 Column3     Column4
index                                               
[a1, a2, a3]        [b1, b2, b3]  [0, 1]    [b1, b2]
[a10, a20, a30]  [b10, b20, b30]  [1, 2]  [b20, b30]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>why not just using for loop here </p>
<pre><code>[select_index (x, y )for x,y in zip(df['Column2'], df['Column3'])]
Out[314]: [['b1', 'b2'], ['b20', 'b30']]
</code></pre>
</div>
<span class="comment-copy">I don't understand either, because you haven't included the function.</span>
<span class="comment-copy">my bad - updated</span>
<span class="comment-copy">I want to preserve my index</span>
<span class="comment-copy">@armundle You don't really need to, unless <code>select_index</code> is using it. Furthermore, <code>reset_index</code> will only drop it for the operation, not permanently.</span>
<span class="comment-copy">I updated the question to what I want the resulting dataframe to look like.</span>
<span class="comment-copy">@armundle Done, see edit please...</span>
<span class="comment-copy">Why not? Because this is pandas and python.</span>
<span class="comment-copy">@Scotty1- <a href="https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care">There are situations where loops are preferable over other pandas functions.</a> I feel this is a good use case.</span>
<span class="comment-copy">@Scotty1- See also <a href="https://stackoverflow.com/questions/54432583/when-should-i-ever-want-to-use-pandas-apply-in-my-code">this discussion</a> on the applicability of <code>apply</code>.</span>
<span class="comment-copy">Nope, my last comment intended to say that I agree that for loops may be a good approach in this case. :)</span>
<span class="comment-copy">@Scotty1- thank you :-)</span>
