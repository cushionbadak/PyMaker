<div class="post-text" itemprop="text">
<p>I'm reading from a file in Python and need to create a list of lists. Each line is a separate value in a record, each record is separated by a blank line <code>\n</code>.</p>
<pre><code>rsfile = 'filepath.txt'
l_s = [[line.rstrip('\n') for line in fileinput.input([rsfile]) if line != '\n']]
</code></pre>
<p>That gives me a list of values for every line, and excludes the <code>\n</code> however I'd like to start a new sub-list or list block within the larger list.</p>
<p>e.g.
<br/>'line 1a'
<br/>'line 2a'
<br/>'line 3a'
<br/>'\n'
<br/>'line 1b'
<br/>'line 2b'
<br/>'line 3b'
<br/>'\n'</p>
<pre><code>[['line 1a', 'line 2a', 'line 3a'], ['line 1b', 'line 2b', 'line 3b']]
</code></pre>
<p>Is this possible with a list comprehension? I was originally creating this with two lists</p>
<pre><code>for line in file:
    if line != '\n': l.append(line)

    else: l_of_l.append(l)

    l = []
</code></pre>
<p>Thank you for your help!</p>
<p>Steven</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're trying to collect things into groups of 4 lines, the <code>grouper</code> function in the <a href="http://docs.python.org/3/library/itertools.html#recipes" rel="nofollow"><code>itertools</code> recipes</a> makes that trivial:</p>
<pre><code>groups = grouper(4, file)
</code></pre>
<p>This returns you an iterable of iterables—in particular, an <code>izip</code> lazy iterator over <code>tuple</code>s. If you specifically need a list of lists, you need to do something like:</p>
<pre><code>groups = [list(group) for group in grouper(4, file)]
</code></pre>
<p>Since the recipes aren't part of the standard library module, you either have to copy and paste the function from the docs, or install a third-party module called <a href="https://pypi.python.org/pypi/more-itertools" rel="nofollow"><code>more_itertools</code></a>.</p>
<p>If you want something slightly different… well, it's hard to know exactly how to code it without knowing exactly what you want, but you'll probably find it in <code>itertools</code>.</p>
<p>For example, let's say you want to split it into groups delimited by lines that are nothing but whitespace. I'm pretty sure there's a function in <code>more_itertools</code> that does this for you, but you can write one yourself pretty easily.</p>
<p>First, you can use <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>groupby</code></a> to group lines by whether or not they're all whitespace:</p>
<pre><code>groups = itertools.groupby(file, lambda line: not line.strip())
</code></pre>
<p>But <code>groupby</code> returns <code>key, group</code> pairs. You only want the <code>group</code> without the <code>key</code>. And you also only want the groups of non-empty lines, not all groups.</p>
<pre><code>groups = [group for empty, group 
          in itertools.groupby(file, lambda line: not line.strip())
          if not empty]
</code></pre>
<p>Or, if you explicitly need a list of lists, instead of a some arbitrary iterable type (in this case, a list of <code>_grouper</code> lazy iterables):</p>
<pre><code>groups = [list(group) for empty, group 
          in itertools.groupby(file, lambda line: not line.strip())
          if not empty]
</code></pre>
<p>If you look at the <code>groupby</code> docs, the examples are actually very close to this.</p>
<p>I'd probably factor out <code>lambda line: not line.strip()</code> into a function (or use <code>more_functools.negate(line.strip)</code>, or…), and write it as two or three lines instead of cramming it into a big list comprehension, but if you want a 1-liner list comprehension (and a 98-character line is acceptable), this is it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have blank lines separating the groups that should go into each sublist, right? Assuming your input is not too humongous to read in at once, you can do it like this:</p>
<pre><code>mylines = open("filepath.txt").read()
groups = [ grp.split("\n") for grp in mylines.split("\n\n") ]
</code></pre>
<p>The first <code>split</code> gives you groups of three lines (or whatever), the second builds a sublist from each group.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try somthing like this... it works.
"f.txt" is your file to read from</p>
<pre><code>f=open('f.txt','r')
list=[[]]
i=0
for line in f:
    if line!='\n':
        list[i].append(line.strip('\n'))
    else:
        list.append([])
        i=+1
        print i
print list
</code></pre>
</div>
<span class="comment-copy">I'm not sure whether you want every 4 lines, or every group delimited by a blank line, or something different. But I am pretty sure that <a href="http://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> is what you're looking for. Either the <code>grouper</code> function from the recipes in the docs, or a trivial one-liner written around <code>groupby</code>.</span>
<span class="comment-copy">Abarnert, I've not used itertools yet so am pretty unfamiliar with the functions there but have started skimming the functions in the module since your post. It definitely needs to be a list of lists, and it certainly runs faster than any other solution I've come up with. I need to spend some time with this. Thank you!</span>
<span class="comment-copy">@sbitaxi: In Python, if you can think in terms of how to transform one iterator into another iterator, instead of what to do inside a loop, you'll often find that <code>itertools</code> does 90% of the hard work for you. (Unless you're doing arithmetic, in which case it's <code>numpy</code> instead.) But it is a different way of thinking. David Beazley has <a href="http://www.dabeaz.com/generators-uk/" rel="nofollow noreferrer">two</a> <a href="http://www.slideshare.net/dabeaz/python-generator-hacking" rel="nofollow noreferrer">slideshows</a> that get the idea across nicely, and after that you'll find <code>itertools</code> even cooler.</span>
<span class="comment-copy">Alexis, that's precisely the sort of thing I was looking for. Thank you! I should have been able to come up with that, finding the instances of <code>\n\n</code>.</span>
<span class="comment-copy">You are welcome. If you now consider this the best answer to your question, you can change the accepted answer ;-)</span>
<span class="comment-copy">Thank you Victor, but that's what I started with and was trying to do it with a list comprehension instead. I do appreciate that you too the time to provide insight into alternative methods.</span>
