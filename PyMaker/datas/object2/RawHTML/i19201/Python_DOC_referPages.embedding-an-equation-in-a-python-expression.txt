<div class="post-text" itemprop="text">
<p>I occasionally use Python, is there any way to get this syntax to work?</p>
<pre><code>import math

print (value1 = math.factorial(5))
</code></pre>
<p>That gives the error:</p>
<blockquote>
<pre><code>print (value1 = math.factorial(5))
              ^
</code></pre>
<p>SyntaxError: invalid syntax</p>
</blockquote>
<p>Or do I have to do it the long way?</p>
<pre><code>import math

value1 = math.factorial(5)
print value1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot embed an assignment in an expression. The expression/statement distinction is fundamental to Python's design, and if you asked Guido how to do what you want, he would tell you to do it in two lines. Or, better, step up another level and see if there's another way to do what you were trying to do. </p>
<p>For example, the most common reason for assigning a variable in an expression is to simplify a <code>while</code> or <code>for</code> loop. In Python, you usually want to just turn it into a <code>for</code> loop over the iterator instead, instead of a <code>while</code> or <code>for</code> loop around fetching the next value from the iterator.</p>
<p>This is discussed in the official Python Design and History FAQ, under <a href="http://docs.python.org/3/faq/design.html#why-can-t-i-use-an-assignment-in-an-expression" rel="nofollow">Why can't I use an assignment in an expression</a>, which explicitly gives this example:</p>
<pre><code>while (line = readline(f)) {
    // do something with line
}

for line in f:
    # do something with line
</code></pre>
<p>The FAQ also acknowledges that this makes it harder to translate "line by line" from languages like C and Perl, and explains why this is a good thing about Python rather than a negative.</p>
<p>That being said, there are ways you can fake it, using a closure or <code>nonlocal</code> variables. For example:</p>
<pre><code>def set_value1_to(new_value):
    global value1
    value1 = new_value
    return value1

print(set_value1_to(math.factorial(5))
</code></pre>
<p>However, it's hard to think of a case where this would be the right solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, Python doesn't allow this. Assignment is a statement only, and can't be embedded in an expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there's not.  You can't print the results of an assignment as it takes place.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not possible to extract the value out of the assignment operator, but if you must absolutely do it in one line, you can write an object whose setter will store the received value <em>and</em> return it:</p>
<pre><code>class AssignExpr(object):
    def set(self, value):
        self.value = value
        return value
assign = AssignExpr()

print assign.set(math.factorial(5))
# result available as assign.value
</code></pre>
<p>Note that this goes against Python's conventions, which is for setters (and other kinds of mutators, such as <code>set.discard</code> or <code>list.sort</code>) to return <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that in cases where all you're looking to do is use an expression once without assigning it to a variable you'll never reuse, Python does let you do things like <code>print math.factorial(5)</code>.</p>
</div>
<span class="comment-copy">In other words, assignments do not return anything, like they do in a language such as Java.</span>
<span class="comment-copy">@A.R.S.: It's not just that assignments don't return anything; they are no expressions, period, and therefore they do not have any value.</span>
<span class="comment-copy">Thanks for the comprehensive answer.  I program in a lot of languages and this is a good example of changing your mindset to that of the language; just not as extreme as going from, say, C to SQL.</span>
<span class="comment-copy">Very creative answer, but, like you say, that's just bludgeoning the problem into submission.</span>
<span class="comment-copy">@PhilipKearns Agreed, but I also believe one should be aware of this option, so it can be used in the rare cases where it makes sense. For example, it might make sense when using Python to implement domain-specific languages such as configuration files. Another use case for this pattern is when you need to test input against multiple regexps, and retain the match of the one that matched - the equivalent of perl's <code>if ($var =~ m/regexp1/) { process match1 } else if ($var =~ m/regexp2/) { process match2 } ... else { process no match }</code>.</span>
<span class="comment-copy">@user4815162342: Agreed, and +1 to that. Really, this combines <i>two</i> things: it's a mutable data holder that's more explicit and readable than <code>[value]</code>, and it's also a data holder that lets you do "fluent assignment". The first one is a much more common need, and it's probably worth mentioning how this adds on to that.</span>
<span class="comment-copy">@abarnert If you are proposing that I expand the answer, it is not obvious to me what else could reasonably go in. While I'm aware of the <code>[value]</code> idiom, I have rarely seen it in the wild and personally avoid it. Fluent assignment does not appear to be a recognized term, either. Can you please clarify?</span>
<span class="comment-copy">@user4815162342: Fluent assignment is just (mis)applying the <a href="http://en.wikipedia.org/wiki/Fluent_interface" rel="nofollow noreferrer">fluent interface</a> idea to assignment. Scala was designed around the idea of fluency (and Smalltalk is similar, even though it predates the term by decades); Python is (deliberately) almost the exact opposite, with few methods that <code>return self</code>, no assignment expressions, etc.</span>
<span class="comment-copy">I'm guessing he already knew that, because whichever language he's coming from (probably Java, C, PHP, or perl?) also lets you do things like that. In fact, I can't really think of any language that would allow <code>print(value=math.factorial(5))</code> but not <code>print(math.factorial(5))</code>, except maybe some funky macro-assembler (or demoscene custom language or something).</span>
<span class="comment-copy">@abarnert Yes, I'm guessing that as well. I thought it would be worth mentioning more for the sake of other people with this question who are new to programming, even though their reason for asking it would probably be very different.</span>
<span class="comment-copy">Yes I did know that, thanks anyway.  I have been writing C for about 30 years, and have programmed in countless languages since but mainly shell and C-like languages (PHP, JavaScript, awk, etc.).</span>
