<div class="post-text" itemprop="text">
<p>I've been fooling around with templates for some time now, and I am loving every moment of the django experience. However, since django is such a big fan <em>loose coupling</em>, I wanted to know, why not have this piece of code:</p>
<pre><code>import os
import platform
if platform.system() == 'Windows':
    templateFiles = os.path.join(os.path.dirname(__file__), '..', 'templates').replace('\\','/')
else:
    templateFiles = os.path.join(os.path.dirname(__file__), '..', 'templates')
TEMPLATE_DIRS = (
    # This includes the templates folder
    templateFiles,
)
</code></pre>
<p>instead of:</p>
<pre><code>import os
TEMPLATE_DIRS = (
    templateFiles = os.path.join(os.path.dirname(__file__), '..', 'templates').replace('\\','/')
)
</code></pre>
<p>Would not the first example follow the philosophy of loose coupling better than the second (which I believe it does), and if so, why does django default to the second code example and not the first?</p>
</div>
<div class="post-text" itemprop="text">
<p>You ask, "why does django default to the second code example?" but in Django 1.5, when I run</p>
<pre><code>$ django-admin.py startproject mysite
</code></pre>
<p>I find that <code>settings.py</code> contains:</p>
<pre><code>TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)
</code></pre>
<p>so I am not sure where your example code is coming from: it's not Django's default.</p>
<p>On non-Windows systems it would be very rare to find backslashes in directory names, so your second example is likely to work in all practical cases. If I had to bullet-proof it I would write:</p>
<pre><code>import os
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
if os.sep != '/':
    # Django says, "Always use forward slashes, even on Windows."
    TEMPLATE_DIR = TEMPLATE_DIR.replace(os.sep, '/')
TEMPLATE_DIRS = (TEMPLATE_DIR,)
</code></pre>
<p>(Using the names <a href="http://docs.python.org/3/library/os.html#os.pardir" rel="nofollow"><code>os.pardir</code></a> and <a href="http://docs.python.org/3/library/os.html#os.sep" rel="nofollow"><code>os.sep</code></a> to make it clear what I intend.)</p>
</div>
<span class="comment-copy">Sorry, mine defaulted to the second. I realy dunno why, running django 1.5 here.</span>
<span class="comment-copy">When you run <code>django-admin.py startproject mysite</code> it copies a template project layout, and in 1.5 the <a href="https://github.com/django/django/blob/stable/1.5.x/django/conf/project_template/project_name/settings.py" rel="nofollow noreferrer">source for <code>settings.py</code> is here</a>. Maybe you have a local patch? Or you're getting the project template from elsewhere?</span>
<span class="comment-copy">I believe so, my installation of python was a bit different from the vanilla way of doing things. Thanks for the bullet proof version though, it really looks cool.</span>
