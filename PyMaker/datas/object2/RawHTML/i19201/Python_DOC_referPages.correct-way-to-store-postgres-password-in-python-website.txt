<div class="post-text" itemprop="text">
<p>I'm writing a web application in Python (on Apache server on a Linux system) that needs to connect to a Postgres database. It therefore needs a valid password for the database server. It seems rather unsatisfactory to hard code the password in my Python files.</p>
<p>I did wonder about using a .pgpass file, but it would need to belong to the www-data user, right? By default, there is no /home/www-data directory, which is where I would have expected to store the .pgpass file. Can I just create such a directory and store the .pgpass file there? And if not, then what is the "correct" way to enable my Python scripts to connect to the database?</p>
</div>
<div class="post-text" itemprop="text">
<p>No matter what approach you use, other apps running as <code>www-data</code> will be able to read your password and log in as you to the database. Using <code>peer</code> auth won't help you out, it'll still trust all apps running under <code>www-data</code>.</p>
<p>If you want your application to be able to isolate its data from other databases you'll need to run it as a separate user ID. The main approaches with this are:</p>
<ul>
<li>Use the apache suexec module to run scripts as a separate user;</li>
<li>Use fast-cgi (fcgi) or scgi to run the cgi as a different user; or</li>
<li>Have the app run its own minimal HTTP server and have Apache reverse proxy for it</li>
</ul>
<p>Of these, by far the best option is usually to use scgi/fcgi. It lets you easily run your app as a different unix user but avoids the complexity and overhead of reverse proxying.</p>
</div>
<div class="post-text" itemprop="text">
<p>Install the application and its config files in its own directory different from the static files directory and only readable by the application user.</p>
<p>Set another user to run the application and use the <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIDaemonProcess" rel="nofollow">WSGIDaemonProcess</a> directive.</p>
<p>All of that and much more is clearly described in the <a href="http://code.google.com/p/modwsgi/" rel="nofollow">mod_wsgi site</a>, in the <a href="http://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide" rel="nofollow">Quick Configuration Guide</a>, <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationGuidelines" rel="nofollow">Configuration Guidelines</a> and <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives" rel="nofollow">Configuration Directives</a></p>
</div>
<span class="comment-copy">Home directories are not always <code>/home/username</code> -- run <code>gawk -F: '($1 ~/www-data/) {print $6}' /etc/passwd</code> to find out where it is.</span>
<span class="comment-copy">Thanks! Turns out the home directory is /var/www, which kind of makes sense, but since that's where the server opens up its files to the world, I'm guessing that's probably not a good place to store a .pgpass file, right?</span>
<span class="comment-copy">Django stores DB passwords in python config files, I don't see why it can be unsatisfactory. Well, it's not really hard coded though.</span>
<span class="comment-copy">Do you mean something like this? <a href="http://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">docs.python.org/3/library/configparser.html</a></span>
<span class="comment-copy">That sounds sensible. Does it work with mod-wsgi, or is that a completely different way of doing things?</span>
<span class="comment-copy">@AdamJacobs Yes, or you can use it via <code>fcgi</code> using the wsgi to fcgi interface.</span>
<span class="comment-copy">Apache/mod_wsgi daemon mode also allows you to run code as a different user.</span>
<span class="comment-copy">Thanks, that does indeed look useful. Though I'm not sure I completely agree with your assertion that it's "clearly described". Looks like something I'd probably spend a couple of days trying to get my head round before I ever got it working. But perhaps it would be worth it, as it does look like a pretty good way of keeping things secure.</span>
<span class="comment-copy">@Adam Start with the simplest "hello word" and go step by step. That way you get all problems as they happen in instead of going the whole way and get lost. The patterns described there are very well established. If you don't have much Apache experience and you try your own way you will probably end with multiple points of failure.</span>
