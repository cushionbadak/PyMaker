<div class="post-text" itemprop="text">
<p>I know the question on terminating a subprocess call has been asked a few times, including <a href="https://stackoverflow.com/questions/337863/python-popen-and-select-waiting-for-a-process-to-terminate-or-a-timeout?rq=1">here</a> but, trying to follow those answers, I can't seem to get mine to exit if the script hangs (in my case I am executing a phantomjs script). For instance, if I try to load a non-existent jquery file in my phantom code, the script will hang, even though I have a timeout. Here's my code:</p>
<pre><code>def kill_proc():
    if p.poll() != 0:
        process.kill()


p = subprocess.Popen(['phantomjs','file.js'],stdout=subprocess.PIPE)
    out, phantomError = p.communicate()

t = Timer(5, kill_proc) # should kill it after 5 seconds
t.start()
p.wait()
</code></pre>
<p>My phantomjs script (a work in progress):</p>
<pre><code>var page = require('webpage').create();
page.includeJs("http://localhost/jquery.js",function(){ 
    phantom.exit();
});
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think your problem might be that p.communicate() will "<a href="http://docs.python.org/3.2/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow">Wait for process to terminate</a>" , meaning your timer never actually gets to start if the script hangs.</p>
<p>Move your call to communicate to after the start of the timer (and change process.kill() to p.kill() in the kill_proc function) and I think it will do what you want.</p>
<p>As my comment above mentions, Python 3.3's subprocess module functions have a timeout parameter that makes this all happen automatically.</p>
</div>
<span class="comment-copy">If you can update to Python 3.3 the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module's functions gained a <code>timeout</code> parameter that can do this automatically.</span>
<span class="comment-copy">exactamundo! Upvoted your comment too, as your 2 suggestions each work.</span>
