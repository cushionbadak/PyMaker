<div class="post-text" itemprop="text">
<p>To keep it short, after hours of looking for a way to play sound in pyqt4, I still can't figure out why this simple little code wouldn't work? I get no error message or anything, but instead of the sound (I've tried mp3, ogg and wav) I just get a little windows "bing" sound but not the sound file I want actually want. I know there's phonon, but I really want to use QSound for various reasons, also because it's supposed to be much simpler. If you could give me any hint to why this isn't working or give an example of working code using QSound, I'd be extremely thankful.</p>
<pre><code>import sys
from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QSound

class Example(QtGui.QMainWindow):

    def __init__(self):
        QtGui.QMainWindow.__init__(self)

        self.initUI()

    def initUI(self):

        self.setGeometry(300,300,200,200)

        self.b1 = QtGui.QPushButton("Play", self)
        self.b1.clicked.connect(self.Play)
        self.b1.move(50, 80)


    def Play(self):

        QSound.play("C:\directory\b1.mp3")




def main():
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    ex.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may have two different problems here.</p>
<hr/>
<p>First, if you want to use Windows-style pathnames, you need to use either raw strings or backslash escapes. In a regular string, <code>\b</code> is a single backspace character, not a <code>\</code> followed by a <code>b</code>. In other words, you're trying to play the file 'C:\directory\x081.mp3', when you really want to play the file <code>C:\\directory\\b1.mp3</code>. See <a href="http://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">String and Bytes literals</a> in the docs for details. </p>
<p>You can try to memorize all of the special backslash-escape characters, but the simpler solution is to just always escape all backslashes. Or, even simpler, use raw strings for all Windows-style pathnames. Or, even simpler, if the function you're using allows POSIX-style pathnames even on Windows, just use them. In other words, one of the following:</p>
<pre><code>"C:\directory\\b1.mp3"
"C:\\directory\\b1.mp3"
r"C:\directory\b1.mp3"
"C:/directory/b1.mp3"
</code></pre>
<hr/>
<p>On top of that, if you're using an older version of PyQt, you can't call static Qt methods that way. In other words, you're not calling the <code>QSound::play(filename)</code> static method, but the <code>QSound::play()</code> instance (slot) method. In later versions, this should be fine—although, as the documentation says, constructing a <code>QSound</code> and calling its <code>play</code> method "may… play more immediately", so you may want to do it anyway.</p>
<p>If you have this problem, the way to fix it is:</p>
<pre><code>QSound(r"C:\directory\b1.mp3").play()
</code></pre>
<p>Although in realistic code, you may want to keep most of your <code>QSound</code> objects around instead of re-creating them each time.</p>
<hr/>
<p>In a comment, you say:</p>
<blockquote>
<p>I found out that QSound actually does not support resources. Unfortunately I have no clue what that means, maybe you could explain what that means for my code.</p>
</blockquote>
<p>It doesn't mean anything for your code, at least not today. You've got your sounds in regular files, and you're trying to access those files by absolute pathname.</p>
<p>But if you want to improve your app in the future, it might get in the way.</p>
<p>Resources are explained in <a href="http://harmattan-dev.nokia.com/docs/library/html/qt4/resources.html" rel="nofollow">The Qt Resource System</a>. The idea is that, instead of having a bunch of separate files for images, etc., you just have one executable file like <code>MyApp.exe</code>, with all of the resource files crammed into that executable. At runtime, you can still access these resources almost as if they were still separate files. You just use special paths like <code>:/sounds/b1.mp3</code> (or, better, switch from pathnames to URLs, and use special URLs like <code>qrc:///sounds/b1.mp3</code>).</p>
<p>The kicker is that "almost". A few features don't work directly on resources, so you have to explicitly extract a resource to a temporary file if you want to use those features.</p>
</div>
<span class="comment-copy">Doesn't python works with C-strings? Aren't  you suppose to write "C:/directory/b1.mp3"?</span>
<span class="comment-copy">@Amartel: What do you mean by "C-strings"? Python works with Python strings, and that's a perfectly valid string. Also, you're allowed to use native pathnames in most APIs, and required to do so in some.</span>
<span class="comment-copy">Ok. A lot of edits haha. But I'm still not clarified really.  What I got from your answer was that I have to change QSound.play("C:\a\b\c\d\b1.mp3") to QSound("C:\a\b\c\d\\b1.mp3").play() which is still not working</span>
<span class="comment-copy">Well, in <code>"C:\a\b\c\\b1.mp3"</code>, you've added another unescaped <code>\b</code>, so you have the same problem again. That's why I suggested that it's much simpler to just use raw strings or POSIX-style paths than to try to figure out what you do or don't need to escape.</span>
<span class="comment-copy">I found out that QSound actually does not support resources. Unfortunately I have no clue what that means, maybe you could explain what that means for my code.</span>
<span class="comment-copy">I believe Qt5 supports sound resources, but Qt4 doesn't. See <a href="http://qt-project.org/doc/qt-4.8/qsound.html" rel="nofollow noreferrer">the docs</a> for each version to be sure. But that doesn't matter for your use case. I added a bit to the answer to explain why.</span>
