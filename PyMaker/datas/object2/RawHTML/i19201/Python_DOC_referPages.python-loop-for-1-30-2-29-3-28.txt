<div class="post-text" itemprop="text">
<p>Hello everyone I have a noob question. </p>
<p>how do I set up the following code to print:</p>
<p><code>1/30 + 2/29 + 3/28..........30/1</code></p>
<p>The numerator is increasing \ denominator decreasing  </p>
<p>I have the following:</p>
<pre><code>for i in range(1,31):
    v = i
for j in range(30,0,-1):
    t = j
    print(v/t)
</code></pre>
<p>but prints</p>
<pre><code>1.0
1.0344827586206897
1.0714285714285714
1.1111111111111112
1.15384615384.........
</code></pre>
<p>how do I get <code>1/30 + 2/29 + 3/28.....</code></p>
<p>Thank you for your help and guidance. </p>
</div>
<div class="post-text" itemprop="text">
<p>I presume you want the strings instead of the numerical values, correct?</p>
<pre><code>s = ''
for j in range(30, 0, -1):
    s += "{}/{} + ".format(31-j, j)
print s[:-2]
</code></pre>
<p>Read <a href="http://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">this documentation</a> to get a grasp of it.  Essentially, it's formatting the string, using the two pairs of curly braces as placeholders, and passing in the value 31-j in the first slot, and j in the second.</p>
<p>Surely there is a more elegant way to do it, but this is the quick and dirty method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You only need one loop! The denominator is always 31 minus the numerator.</p>
<pre><code>r = 0
for i in range(1,31):
    r += i / (31 - i)
print(r)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print (" + ".join(["%s/%s"%(num,denom)for num,denom in zip(range(1,31),range(30,0,-1))]))
</code></pre>
<p>I think at least</p>
<p>zipping together <code>(1,2,3...,30)</code> and <code>(30,29,28...,1)</code> results in a new tuple <code>((1,30),(2,29),...,(30,1))</code></p>
<p>you then iterate over this putting each numerator and denominator into a string resulting in a list like , we do this with format strings <code>"%s/%s"%numerator,denominator</code> , although it would be better form to use <code>"%d/%d"</code> instead but thats another story</p>
<p><code>["1/30","2/29",...,"30/1"]</code></p>
<p>then you simply join this list using <code>' + '</code> as the glue</p>
</div>
<div class="post-text" itemprop="text">
<p>What's happening here is that your numbers are being evaluated to a floating-point number before being printed. Since you want to print them without evaluating, you should be inserting them into a string. The following line demonstrates how to insert variables into the output without evaluating them:</p>
<pre><code>print "%d/%d" % (v,t)
</code></pre>
<p>See <a href="http://docs.python.org/release/2.5.2/lib/typesseq-strings.html" rel="nofollow">http://docs.python.org/release/2.5.2/lib/typesseq-strings.html</a> for information about how to format strings for the print function.</p>
<p>However, this still puts each result on a separate line, because the print function automatically inserts a new line. You could build a string with the following loop (notice how you can neatly pack it into one loop rather than two because you can get the denominator by subtracting):</p>
<pre><code>string = ''
for i in range(1,31):
    string += "{}/{} + ".format(i, 31-i)
print string
</code></pre>
<p>and this will give you "1/30 + 2/29 + ... + 30/1 + ", but this still includes the last plus sign and surrounding spaces. To fix that, change the last line to</p>
<pre><code>print string[:-3]
</code></pre>
<p>which removes those last characters.</p>
<p>See <a href="http://docs.python.org/2/library/string.html#formatstrings" rel="nofollow">http://docs.python.org/2/library/string.html#formatstrings</a> for information about how to use the format function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure exactly what you're trying to do, but you can do it with just a single loop.  Each time through the loop, the denominator is just 31 minus the numerator:</p>
<pre><code>from fraction import Fraction
for num in range(1,31):
    den = 31 - num
    fraction_string = "%d/%d" % (num, den)
    fraction_value = Fraction(num, den)
    quotient = num / den
    #... do stuff with whichever of the above you want
</code></pre>
<p>When you're building a result - either adding to a sum, or appending to a string, or outputting something on every iteration - you can do that more succinctly with list comprehensions and list functions.  For example, instead of something like this:</p>
<pre><code>quotientList = []
for n in range(1,31):        
    quotientList.append( n / (31 - n) )
</code></pre>
<p>You can just do this:</p>
<pre><code>quotientList = [ n / (31 - n) for n in range(1,31) ]
</code></pre>
<p>And instead of this:</p>
<pre><code>total = 0
for n in someList:
   total = total + n
</code></pre>
<p>You can just do this:</p>
<pre><code> total = sum(someList)
</code></pre>
<p>Putting those concepts together, here are three possibilities I see for what you're trying to do:</p>
<ol>
<li><p>Print out the literal string <code>1/30 + 2/29 + 3/28 +</code>...<code>+30/1</code>:</p>
<p><code>print( " + ".join( "%d/%d" % (n, 31-n) for n in range(1,31) ) )</code></p></li>
<li><p>Evaluate that as an arithmetic expression and print the result:</p>
<p><code>print( sum( n/(31.0-n) for n in range(1,31) ) )</code></p></li>
<li><p>... but as a fraction instead of a decimal:</p>
<p><code>from fractions import Fraction</code><br/>
...<br/>
<code>print( sum( Fraction(n,31-n) for n in range(1,31) ) )</code></p></li>
</ol>
</div>
<span class="comment-copy"><a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What every programmer/CS Major should know about floating-point numbers</a> will be <i>invaluable</i> to understanding why this prints what it does.</span>
<span class="comment-copy">You don't specify: 1) Do you want to print the actual text "1/30 + 2/29 + 3/28 + ..."? 2) Do you want the exact answer expressed as a fraction? 3) Do you have to calculate it as you're doing it above? ...</span>
<span class="comment-copy">@John Sorry need the actual  text: <code>1/30 + 2/29 + 3/28...</code></span>
<span class="comment-copy">Aha!  A different problem entirely.</span>
<span class="comment-copy">You are right formatting is one of my weakest strong points. The doc was a good read!</span>
<span class="comment-copy">I dont think this is what he wants .... I think he wants the string ,,, not to eval it</span>
<span class="comment-copy">Oh, I thought you wanted to evaluate the sum and not the string. My bad.</span>
<span class="comment-copy">This has the same problem as the original poster; but +1 for recognizing the pattern.</span>
<span class="comment-copy">Might be a bit too much for the guy to digest; explaining the code further would get you my +1</span>
<span class="comment-copy">Since the division was real division and not integer division, it's safe to assume that this is Python 3.  In Python 3, <a href="http://docs.python.org/3.0/whatsnew/3.0.html#changes-already-present-in-python-2-6" rel="nofollow noreferrer"><code>%</code> as a formatter is deprecated.</a></span>
<span class="comment-copy">Im pretty sure I heard they reversed this decision due to public outcry :P</span>
<span class="comment-copy">@JoranBeasley yup - the deprecation has gone the way of the dodo</span>
<span class="comment-copy">ahh good I was starting to think i was going crazy while looking for some citation of that</span>
