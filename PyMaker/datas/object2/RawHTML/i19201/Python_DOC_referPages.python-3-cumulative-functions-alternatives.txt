<div class="post-text" itemprop="text">
<p>I was wondering if there was a more pythonic, or alternative, way to do this. I want to compare results out of cumulative functions. Each functions modifies the output of the previous and I would like to see, after each of the functions, what the effect is. Beware that in order to get the actual results after running the main functions, one last function is needed to calculate something. In code, the thing looks like this (just kind of pseudocode):</p>
<pre><code>for textfile in path:
    data = doStuff1(textfile)
calculateandPrint()

for textfile in path:
    data = doStuff1(textfile)
    data = doStuff2(data )
calculateandPrint()

for textfile in path:
    data = doStuff1(textfile)
    data = doStuff2(data )
    data = doStuff3(data )
calculateandPrint()
</code></pre>
<p>As you can see, for <code>n</code> functions I would need <code>1/2(n(n+1))</code> manually made loops. Is there, like I said, something more pythonic (for example a list with functions?) that would clean up the code and make it much shorter and manageable when added more and more functions?</p>
<p>The actual code, where <code>documents</code> is a custom object:</p>
<pre><code>for doc in documents:
    doc.list_strippedtext = prepareData(doc.text)
bow = createBOW(documents)  

for doc in documents:
    doc.list_strippedtext = prepareData(doc.text)
    doc.list_strippedtext = preprocess(doc.list_strippedtext)
bow = createBOW(documents)  

for doc in documents:
    doc.list_strippedtext = prepareData(doc.text)
    doc.list_strippedtext = preprocess(doc.list_strippedtext)
    doc.list_strippedtext = abbreviations(doc.list_strippedtext)
bow = createBOW(documents)
</code></pre>
<p>while this is only a small part, more functions need to be added.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could define a set of chains, applied with <a href="http://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce()</code></a></p>
<pre><code>from functools import reduce

chains = (
    (doStuff1,),
    (doStuff1, doStuff2),
    (doStuff1, doStuff2, doStuff3),
)

for textfile in path:
    for chain in chains:
        data = reduce(lambda data, func: func(data), chain, textfile)
        calculateandPrint(data)
</code></pre>
<p>The <code>reduce()</code> call effectively does <code>func3(func2(func1(textfile))</code> if <code>chain</code> contained 3 functions.</p>
<p>I assumed here that you wanted to apply <code>calculateandPrint()</code> <em>per</em> textfile in path after the chain of functions has been applied.</p>
<p>Each iteration of the <code>for chain in chains</code> loop represents one of your <code>doStuffx</code> loop bodies in your original example, but we only loop through <code>for textfile in path</code> <em>once</em>.</p>
<p>You can also swap the loops; adjusting to your example:</p>
<pre><code>for chain in chains:
    for doc in documents:
        doc.list_strippedtext = reduce(lambda data, func: func(data), chain, doc.text)
    bow = createBOW(documents)  
</code></pre>
</div>
<span class="comment-copy">In each loop you do stuff with the loop variable, put that into <code>data</code>, but then discard all but the last loop result. Should the <code>calculateandPrint()</code> calls be indented instead?</span>
<span class="comment-copy">Indeed you are right, to make it clearer: In each loop I edit a variable inside an object and each textfile has a different object. So the calculateandPrint() function uses all the objects and thus uses all the <code>data</code> even though it might not be clear from my example. But the point was more about the iterations of the functioncalls.</span>
<span class="comment-copy">I think this comes close to the  answer I'm looking for. I added the actual code to give a better impression of what needs to be done. Is it possible to use the chains with my code? So is it possible to modify the contents of an object within the chain?</span>
<span class="comment-copy">Sure; just swap the two loops in my answer; move the chains loop out, apply each chain to the documents, the after the inner for loop call the <code>createBOW()</code> function , once per chain.</span>
<span class="comment-copy">Yes, this works perfectly. Thank you very much :-).</span>
