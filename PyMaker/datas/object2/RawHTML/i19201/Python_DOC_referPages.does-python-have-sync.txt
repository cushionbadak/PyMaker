<div class="post-text" itemprop="text">
<p>The <a href="http://linux.die.net/man/2/sync" rel="noreferrer">sync man page</a> says:</p>
<blockquote>
<p>sync() causes all buffered modifications to file metadata and data to
  be written to the underlying file systems.</p>
</blockquote>
<p>Does Python have a call to do this?</p>
<p>P.S. Not <a href="http://docs.python.org/2/library/os.html#os.fsync" rel="noreferrer">fsync</a>, I see that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.3 has os.sync, see <a href="http://docs.python.org/3/library/os.html#os.sync">the docs</a>. The <a href="http://hg.python.org/releasing/3.3.1/file/8e5812b35480/Modules/posixmodule.c#l3062">source</a> confirms it is the same thing.</p>
<p>For Python 2 you might have to make an <a href="http://docs.python.org/3/library/subprocess.html">external call</a> to the system.</p>
</div>
<div class="post-text" itemprop="text">
<p>As said, Python 3.3 has the call - on Python 2.x, since it is a simple
system call, requiring no data to be passed back and forth, you can use ctypes to make the call:</p>
<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; libc = ctypes.CDLL("libc.so.6")
&gt;&gt;&gt; libc.sync()
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combining the <a href="https://stackoverflow.com/a/15983348/2015768">two</a> <a href="https://stackoverflow.com/a/15983693/2015768">answers</a>, I use the following at the top of my module:</p>
<pre><code>if hasattr(os, 'sync'):
    sync = os.sync
else:
    import ctypes
    libc = ctypes.CDLL("libc.so.6")
    def sync():
        libc.sync()
</code></pre>
</div>
<span class="comment-copy">Whoa, fancy. :) I would be nervous that libc.so.6 might not always exist (although I am on UNIX), so probably subprocess or <code>sync</code> is the way for me.</span>
<span class="comment-copy">"or `sync` ..". Darn formatting with no preview</span>
<span class="comment-copy">Any particular reason for using <code>def sync()</code> instead of <code>sync = libc.sync</code>?</span>
<span class="comment-copy">Ah actually there is, cannot be called with parameters by accident ;)</span>
