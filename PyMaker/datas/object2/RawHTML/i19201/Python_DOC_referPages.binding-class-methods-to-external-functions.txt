<div class="post-text" itemprop="text">
<p>I get an error when  trying to bind a class method to a function. Why?</p>
<pre><code>def foo():
    print "Hello world"

class something(object):
    bar = foo

test = something()
test.bar()

TypeError: foo() takes no arguments (1 given)
</code></pre>
<p>Also, if I am unable  to modify <code>foo</code>, can I do this adaptation from within the class definition?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to do it is to wrap the function in a <code>staticmethod</code> inside A:</p>
<pre><code>class A():
    bar = staticmethod(foo)

&gt;&gt;&gt; test = A()
&gt;&gt;&gt; test.bar()
Hello world
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A class method in python always takes at least one argument, usually called <code>self</code>. This example is taken from the <a href="http://docs.python.org/3/tutorial/classes.html#random-remarks" rel="nofollow">official Python tutorial</a>:</p>
<pre><code># Function defined outside the class
def f1(self, x, y):
    return min(x, x+y)

class C:
    f = f1
    def g(self):
        return 'hello world'
    h = g
</code></pre>
<p>Note that both methods, regardless of whether they are defined outside or inside of the class, take <code>self</code> as an argument.</p>
<p><strong>Edit:</strong> If you really can't change your <code>foo</code> function, then you can do something like this:</p>
<pre><code>&gt;&gt;&gt; def foo():
...     print "Hello World"
...
&gt;&gt;&gt; class something(object):
...     def bar(self): foo()
...
&gt;&gt;&gt; test = something()
&gt;&gt;&gt; test.bar()
Hello World
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you call a class method this way you pass the class instance as the first parameter.
When you call <code>test.bar</code> what in fact happens is more like <code>bar(test)</code>. You pass an argument to the method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Class methods all have a first argument of the instance of the class.  So add a parameter to your function and it would work.</p>
</div>
<div class="post-text" itemprop="text">
<p>The initial def creates a function object named <code>foo</code>. Since it's outside any class, it's just a function that takes no arguments. The assignment <code>bar = foo</code> just gives the new name <code>test.bar</code> to that same function object. The call <code>test.bar()</code>, however, assumes that bar is a class method, and passes the object <code>test</code> as the first argument to the method (the one that you would normally call <code>self</code>). You could call it as a static method with <code>something.bar()</code> and not get the error. </p>
</div>
<div class="post-text" itemprop="text">
<p>Remember that when a python class calls one of it's methods it will pass in a <code>self</code> argument. You need to account for that in your code:</p>
<pre><code>def foo(self):
    print ("Hello world")

class something(object):
    bar = foo

test = something()
test.bar()
</code></pre>
<p>You can read all about classes in the <a href="http://docs.python.org/2/tutorial/classes.html" rel="nofollow">Python Documentation</a></p>
<p>The easiest workaround to not passing in a <code>self</code> that I can think of is:</p>
<pre><code>def foo():
    print ("Hello world")

class something(object):
    bar = [foo] # contains pointer to static method

test = something()
test.bar[0]() # calls the static method
</code></pre>
</div>
<span class="comment-copy">I like this solution, a lot. I guess this only works if I don't need to access the instance from within the function (but that was part of the assumption in my update)</span>
<span class="comment-copy">Say I can't modify <code>foo</code> (or that I would prefer to not change it's signature). Can I do this adaptation from within the class definition?</span>
<span class="comment-copy">I've edited my answer to answer your question.</span>
<span class="comment-copy">Fantastic. Thanks @srgerg. I love Python.</span>
<span class="comment-copy">See @BrenBarn for an interesting way of solving the "unable to change <code>foo</code>" problem</span>
<span class="comment-copy">Yes I like BrenBarn's solution better.</span>
<span class="comment-copy">Thanks. I have updated the OP to clarify that I am looking for a way of doing this that does not require modifying <code>foo</code>, but only the class definition itself.</span>
<span class="comment-copy">@user815423426 Edited, There may be a better way but this one works, and i suppose you can add as many different functions as you want now.</span>
