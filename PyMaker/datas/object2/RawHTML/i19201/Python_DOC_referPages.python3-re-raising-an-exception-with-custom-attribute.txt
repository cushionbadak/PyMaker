<div class="post-text" itemprop="text">
<p>here's my code from python2 which needs to be ported:</p>
<pre><code>try:
  do_something_with_file(filename)

except:
  exc_type, exc_inst, tb = sys.exc_info()
  exc_inst.filename = filename
  raise exc_type, exc_inst, tb
</code></pre>
<p>with above code, I can get the whole exception with the problematic input file by checking whether an exception has 'filename' attribute.</p>
<p>however python3's raise has been changed. this is what 2to3 gave me for above code:</p>
<pre><code>except Exception as e:
  et, ei, tb = sys.exc_info()
  e.filename = filename
  raise et(e).with_traceback(tb)
</code></pre>
<p>which gives me another error and I don't think filename attribute is preserved: </p>
<pre><code>in __call__
    raise et(e).with_traceback(tb)
TypeError: function takes exactly 5 arguments (1 given)
</code></pre>
<p>What I just want is passing exceptions transparently with some information to track the input file. I miss python2's <code>raise [exception_type[,exception_instance[,traceback]]]</code> - How can I do this in python3?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can set the <code>__traceback__</code> attribute:</p>
<pre><code>except Exception as e:
    et, ei, tb = sys.exc_info()
    ei.filename = filename
    ei.__traceback__ = tb
    raise ei
</code></pre>
<p>or call <code>.with_traceback()</code> directly on the old instance:</p>
<pre><code>except Exception as e:
    et, ei, tb = sys.exc_info()
    ei.filename = filename
    raise ei.with_traceback(tb)
</code></pre>
<p><strong>However</strong>, the traceback is already automatically attached, there is no need to re-attach it, really.</p>
<p>See the <a href="http://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="noreferrer"><code>raise</code> statement documentation</a>:</p>
<blockquote>
<p>A traceback object is normally created automatically when an exception is raised and attached to it as the <code>__traceback__</code> attribute, which is writable. </p>
</blockquote>
<p>In this specific case, perhaps you wanted a different exception instead, with context?</p>
<pre><code>class FilenameException(Exception):
    filename = None
    def __init__(self, filename):
        super().__init__(filename)
        self.filename = filename

try:
    something(filename)
except Exception as e:
    raise FilenameException(filename) from e
</code></pre>
<p>This would create a chained exception, where both exceptions would be printed if uncaught, and the original exception is available as <code>newexception.__context__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to do anything; in Python 3 re-raised exceptions automatically have a full traceback from where they were originally raised.</p>
<pre><code>try:
  do_something_with_file(filename)
except Exception as exc_inst:
  exc_inst.filename = filename
  raise exc_inst
</code></pre>
<p>This works because <code>PyErr_NormalizeException</code> sets the <code>__traceback__</code> attribute appropriately on catching an exception in an <code>except</code> statement; see <a href="http://www.python.org/dev/peps/pep-3134/" rel="nofollow">http://www.python.org/dev/peps/pep-3134/</a>.</p>
</div>
<span class="comment-copy">thank you! but I just googled and found <code>raise ei.with_traceback(tb)</code> :D</span>
<span class="comment-copy">@thkang: See <a href="http://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a>, both are valid.</span>
<span class="comment-copy">thanks, I think the best idea is to re-write every exception handling code with python3's raise ... from ... style.</span>
<span class="comment-copy">@thkang: As long as you create a <i>new</i> exception, the <code>from</code> syntax is excellent.</span>
