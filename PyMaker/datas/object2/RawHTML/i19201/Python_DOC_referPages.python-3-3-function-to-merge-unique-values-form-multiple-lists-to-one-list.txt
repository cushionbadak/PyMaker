<div class="post-text" itemprop="text">
<p>I am pretty new to Python..I am trying to write a function that will merge unique values in separate lists into one list.  I keep getting a result of a tuple of lists.  Ultimately I would like to have one list of unique values from my three lists -a,b,c.  Can anyone give me a hand with this?</p>
<pre><code>def merge(*lists):
    newlist = lists[:]
    for x in lists:
        if x not in newlist:
            newlist.extend(x)
    return newlist

a = [1,2,3,4]
b = [3,4,5,6]
c = [5,6,7,8]

print(merge(a,b,c))
</code></pre>
<p>I am getting a Tuple of Lists</p>
<pre><code>([1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may just need sets:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; b = [3,4,5,6]
&gt;&gt;&gt; c = [5,6,7,8]
&gt;&gt;&gt;
&gt;&gt;&gt; uniques = set( a + b + c )
&gt;&gt;&gt; uniques
set([1, 2, 3, 4, 5, 6, 7, 8])
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about them being in the original order, the easiest and likely fasted way is to use set functions:</p>
<pre><code>&gt;&gt;&gt; set().union(a, b, c)
{1, 2, 3, 4, 5, 6, 7, 8}
</code></pre>
<p>If you <em>do</em> care about the original order (sets happen to preserve it in this case, but aren't guaranteed to), then you can fix your original attempt by realising that the argument <code>lists</code> contains a tuple of all of the original lists you passed in. This means that iterating over it gets you each of those lists one at a time, rather than the elements in them - you can fix this by using the itertools module:</p>
<pre><code>for x in itertools.chain.from_iterable(lists):
   if x not in newlist:
      newlist.append(x)
</code></pre>
<p>Also, you would want <code>newlist</code> to start out as an empty list rather than a copy of the input lists.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def merge(*lists):
    newlist = []
    for i in lists:
            newlist.extend(i)
    return newlist

merge_list = merge(a,b,c,d)

merge_list = set(merge_list)

merge_list = list(merge_list)

print(merge_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Handling a Dynamically Generated List of Lists</strong></p>
<p>A common use case is generating a list of lists dynamically, with each child list sometimes having an arbitrary length:</p>
<pre><code>import random
abc, values = [], ["a", "b", "c", "d"]
for i in range(3):
    l = []
    for j in range(3):
        l.append(values[random.randint(0, len(values) - 1)])
    abc.append(l)
</code></pre>
<p>If you're working with a list of lists, simply summing them as proposed by g.d.d.c. doesn't work. That is:</p>
<pre><code>uniques = set( a + b + c )
</code></pre>
<p>The hiccup comes from the fact that you have to specifically reference the lists <code>a</code>, <code>b</code>, and <code>c</code>. The answer by Ivc is really nice and gets us closer:</p>
<pre><code>set().union(a, b, c)
</code></pre>
<p>But again, you have to explicitly reference your lists.</p>
<p><strong>The Solution</strong></p>
<p>To get the unique values from a list of lists with arbitrary lengths, you can use <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">positional expansion</a>:</p>
<pre><code>import random
abc, values = [], ["a", "b", "c", "d"]
for i in range(3):
    l = []
    for j in range(3):
        l.append(values[random.randint(0, len(values) - 1)])
    abc.append(l)
# The Important Line Below
unique = set().union(*abc)
print(unique)
</code></pre>
<p>Which will return the appropriate values unordered (e.g. <code>["d", "b", "a", "d"]</code>)</p>
</div>
<span class="comment-copy">Indent is important!</span>
<span class="comment-copy">+1 for using union instead of adding the lists together beforehand. This means that you can use other iterables instead of just lists.</span>
<span class="comment-copy">Note that depending on the number of unique values the time to check <code>x not in newlist</code> will grow for each iteration.</span>
