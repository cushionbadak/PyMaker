<div class="post-text" itemprop="text">
<p>Suppose I need to run a python file, <code>x.py</code>, from within <code>y.py</code>, passing variable <code>z</code> from <code>y.py</code> to <code>x.py</code>.</p>
<p>How would I accomplish this? Would something like this work?</p>
<pre><code>call(["python","x.py",z])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to encapsulate your code correctly.  You should have something like this:</p>
<p><code>y.py</code></p>
<pre><code>def y_func(*args):
    # everything y does
if __name__ == "__main__":
    import sys
    y_func(*sys.argv)
</code></pre>
<p><code>x.py</code></p>
<pre><code>from y import y_func
def x_func(*args):
    #do stuff
    y_result = y_func(*yargs)
    #finish x stuff
if __name__ == "__main__":
    import sys
    x_func(*sys.argv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code># y.py
import os
z='argument'
os.system('Python x.py '+z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>subprocess</code> is better than <code>os.system</code></p>
<pre><code>import subprocess
subprocess.check_output(["ls", "-ltr"])
</code></pre>
<hr/>
<p>In your case let's say you have <code>a.py</code>:</p>
<pre><code>import sys
print sys.argv[1:]
</code></pre>
<p>and in the prompt:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.check_output(["python", 'a.py', 'aaa bbb ccc'])
"['aaa bbb ccc']\n"
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy"><a href="http://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html#subprocess.call</a></span>
<span class="comment-copy">Does <code>x.py</code> accept command line arguments?</span>
<span class="comment-copy">You should encapsulate the functionality of <code>y</code> in a function, then <code>import</code> that function in to <code>x</code> and call it appropriately.</span>
<span class="comment-copy">That will work if <i>call</i> is subprocess.call and <i>z</i> is a string. You need to write some code and do some experimenting.</span>
