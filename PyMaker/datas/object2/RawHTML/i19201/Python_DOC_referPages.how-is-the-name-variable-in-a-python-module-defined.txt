<div class="post-text" itemprop="text">
<p>I'm aware of <a href="http://docs.python.org/2/tutorial/modules.html#executing-modules-as-scripts">the standard example</a>: if you execute a module directly then it's <code>__name__</code> global variable is defined as <code>"__main__"</code>. However, nowhere in the documentation can I find a precise description of how <code>__name__</code> is defined in the general case. The <a href="http://docs.python.org/2/tutorial/modules.html">module documentation</a> says...</p>
<blockquote>
<p>Within a module, the module's name (as a string) is available as the value of the global variable <code>__name__</code>. </p>
</blockquote>
<p>...but what does it mean by "the module's name"? Is it just the name of the module (the filename with <code>.py</code> removed), or does it include the fully-qualified package name as well?</p>
<p>How is the value of the <code>__name__</code> variable in a Python module determined? For bonus points, indicate precisely where in the Python source code this operation is performed.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is set to the absolute name of the module as imported. If you imported it as <code>foo.bar</code>, then <code>__name__</code> is set to <code>'foo.bar'</code>.</p>
<p>The name is determined in the <a href="http://hg.python.org/cpython/file/tip/Python/import.c"><code>import.c</code></a> module, but because that module handles various different types of imports (including zip imports, bytecode-only imports and extension modules) there are <em>several</em> code paths to trace through. </p>
<p>Normally, <code>import</code> statements are translated to a call to <code>__import__</code>, which is by default <a href="http://hg.python.org/cpython/file/tip/Python/bltinmodule.c#l182">implemented as a call to <code>PyImport_ImportModuleLevelObject</code></a>. See the <a href="http://docs.python.org/3/library/functions.html#__import__"><code>__import__()</code> documentation</a> to get a feel for what the arguments mean. Within <a href="http://hg.python.org/cpython/file/tip/Python/import.c#l1228"><code>PyImport_ImportModuleLevelObject</code></a> relative names are resolved, so you can chase down the <code>name</code> variables there if you want to.</p>
<p>The rest of the module handles the actual imports, with <code>PyImport_AddModuleObject</code> creating the actual namespace object and setting the <code>name</code> key, but you can trace that <code>name</code> value back to <code>PyImport_ImportModuleLevelObject</code>. By creating a module object, it's <code>__name__</code> value is set in the <a href="http://hg.python.org/cpython/file/tip/Objects/moduleobject.c#l17"><code>moduleobject.c</code> object constructor</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__name__</code> variable is an attribute of the module that would be accessible by the name.</p>
<pre><code>import os
assert os.__name__ == 'os'
</code></pre>
<p>Example self created module that scetches the import mechanism:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; m = types.ModuleType("name of module") # create new module with name
&gt;&gt;&gt; exec "source_of_module = __name__" in m.__dict__ # execute source in module
&gt;&gt;&gt; m.source_of_module
'name of module'
</code></pre>
<p>Lines from types module:</p>
<pre><code>import sys
ModuleType = type(sys)
</code></pre>
</div>
<span class="comment-copy">I've seen variations of this question out there, but I'm glad someone has brought the subject more depth.</span>
<span class="comment-copy">Related post - <a href="https://stackoverflow.com/q/419163/465053">What does if <b>name</b> == “<b>main</b>”: do?</a></span>
<span class="comment-copy">Additionaly, the <code>as</code> subclause in <code>import</code> does not change the <code>__name__</code> attibute.</span>
<span class="comment-copy">Note that in Python 3, <code>exec</code> is a function:        <code>exec("source_of_module = __name__", m.__dict__)</code></span>
