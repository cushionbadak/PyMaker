<div class="post-text" itemprop="text">
<p>I'm trying to compare two lists to determine if one is a rotation (cyclic permutation) of the other, e.g.:</p>
<pre><code>a = [1, 2, 3]
b = [1, 2, 3] or [2, 3, 1] or [3, 1, 2]
</code></pre>
<p>are all matches, whereas:</p>
<pre><code>b = [3, 2, 1] is not
</code></pre>
<p>To do this I've got the following code:</p>
<pre><code>def _matching_lists(a, b):
    return not [i for i, j in zip(a,b) if i != j]

def _compare_rotated_lists(a, b):
    rotations = [b[i:] + b[:i] for i in range(len(b))]
    matches = [i for i in range(len(rotations)) if _matching_lists(a, rotations[i])]
    return matches
</code></pre>
<p>This builds a list of all possible rotations of b and then compares each one.  Is it possible to do this without building the intermediate list?  Performance isn't important since the lists will typically only be four items long.  My primary concern is clarity of code.</p>
<p>The lists will always have the same length.</p>
<p>Best answer (keeping the list of matching rotations) seems to be:</p>
<pre><code>def _compare_rotated_lists(a, b):
    return [i for i in range(len(b)) if a == b[i:] + b[:i]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need the function <code>_matching_lists</code>, as you can just use <code>==</code>:</p>
<pre><code>&gt;&gt;&gt; [1,2,3] == [1,2,3]
True
&gt;&gt;&gt; [1,2,3] == [3,1,2]
False
</code></pre>
<p>I suggest using <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code></a> to return as soon a match is found, and using a generator expression to avoid constructing a list of rotations in memory:</p>
<pre><code>def _compare_rotated_lists(a, b):
    """Return `True` if the list `a` is equal to a rotation of the list `b`."""
    return any(a == b[i:] + b[:i] for i in range(len(b)))
</code></pre>
<p>You might consider checking that the lists are the same length, to reject the easy case quickly.</p>
<pre><code>    return len(a) == len(b) and any(a == b[i:] + b[:i] for i in range(len(b)))
</code></pre>
<p>As discussed in comments, if you know that the elements of <code>a</code> and <code>b</code> are hashable, you can do the initial comparison using <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>    return Counter(a) == Counter(b) and any(a == b[i:] + b[:i] for i in range(len(b)))
</code></pre>
<p>and if you know that the elements of <code>a</code> and <code>b</code> are comparable, you can do the initial comparison using <code>sorted</code>:</p>
<pre><code>    return sorted(a) == sorted(b) and any(a == b[i:] + b[:i] for i in range(len(b)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understood correctly, you want to find if <code>b</code> is a permutation of <code>a</code>, but not <code>a</code> reversed? There's a very simple, readable, and general solution:</p>
<pre><code>&gt;&gt;&gt; from itertools import permutations 
&gt;&gt;&gt; a = (1, 2, 3)
&gt;&gt;&gt; b = (3, 1, 2)
&gt;&gt;&gt; c = (3, 2, 1)
&gt;&gt;&gt; results = set(permutations(a)) - set((a, tuple(sorted(a, reverse=True))))
&gt;&gt;&gt; b in results
True
&gt;&gt;&gt; c in results
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>def canon(seq):
    n = seq.index(min(seq))
    return seq[n:] + seq[:n]

def is_rotation(a, b):
    return canon(a) == canon(b)

print is_rotation('abcd', 'cdab') # True
print is_rotation('abcd', 'cdba') # False
</code></pre>
<p>No need to generate <em>all</em> rotations just to find out if two lists are rotation of each other.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tested this code with a few examples, and it worked well.</p>
<pre><code>def compare(a,b):
firstInA = a[0]
firstInB = b.index(firstInA)
secondInA = a[1]
secondInB = b.index(secondInA)
if (secondInB == firstInB + 1) or (secondInB == 0 and firstInB == 2):
    return True
else:
    return False
</code></pre>
<p>I tried:</p>
<pre><code>a = [1,2,3]
b = [1,2,3]
print(compare(a,b))
c = [1,2,3]
d = [3,1,2]
print(compare(c,d))
e = [1,2,3]
f = [3,2,1]
print(compare(e,f))
</code></pre>
<p>They returned <code>True</code>,<code>True</code>,<code>False</code>
This only works with lists of size 3. If you want more, within the <code>if</code> statement, add a thirdInA and thirdInB, and you will always need to have one less than the length of the list, because if you know all but one is in place, then there is only on spot left for the last to be.</p>
</div>
<span class="comment-copy">Humm check this question out <a href="http://stackoverflow.com/questions/2150108/efficient-way-to-shift-a-list-in-python" title="efficient way to shift a list in python">stackoverflow.com/questions/2150108/â€¦</a> I think this is more or less duplicates</span>
<span class="comment-copy">No it's not.  The other question is about how to shift a list, which I'm already doing in my code.</span>
<span class="comment-copy">@Stefan yes, but you can easily use that answer to obtain a what you asked, i.e. a way to check for all rotations without building all the rotations <code>list</code>s. You simply have to convert the <code>list</code> into <code>deque</code>s and rotate one of the two lists.</span>
<span class="comment-copy">I'd use the recommendation supplied by hcalves, because in reality you are not looking for a rotation, but a permutation. I'd suggest taking a look at both the itertools module and the sets module. With the Set class you can do things like a = Set([1,2,3]); b = Set([2,1,3]) a.issubset(b)</span>
<span class="comment-copy">Edited the question to clarify rotation as a cyclic permutation, thanks @GarethRees!</span>
<span class="comment-copy">It's probably worth pointing out that you're also using a <a href="http://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expression</a> instead of list comprehension, since there's no need to store the list.</span>
<span class="comment-copy">Would it not be better to confirm first that the set a == the set b.  b cannot be a rotation of a unless they have the same members, this seems like a cheap/inexpensive check before any number crunching</span>
<span class="comment-copy">Instead(or in addition) of <code>len(a) == len(b)</code> it's better to do <code>sorted(a) == sorted(b)</code> to also check tons of other cases(the <code>any</code> expression is O(n^2) and thus the extra O(nlogn) doesn't hurt. Using <code>set</code>s also works, in O(n) amortized time, but checks less cases).</span>
<span class="comment-copy">@hcalves: There are different senses of <i>rotation</i>, but Stefan's using it to mean <a href="http://en.wikipedia.org/wiki/Cyclic_permutation" rel="nofollow noreferrer"><i>cyclic permutation</i></a>.</span>
<span class="comment-copy">@GarethRees Thanks, I wasn't aware of this usage of word rotation, now I see what he means.</span>
