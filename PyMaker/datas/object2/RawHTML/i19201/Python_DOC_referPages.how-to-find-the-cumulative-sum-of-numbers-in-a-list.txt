<div class="post-text" itemprop="text">
<pre><code>time_interval = [4, 6, 12]
</code></pre>
<p>I want to sum up the numbers like <code>[4, 4+6, 4+6+12]</code> in order to get the list <code>t = [4, 10, 22]</code>.</p>
<p>I tried the following:</p>
<pre><code>for i in time_interval:
    t1 = time_interval[0]
    t2 = time_interval[1] + t1
    t3 = time_interval[2] + t2
    print(t1, t2, t3)

4 10 22
4 10 22
4 10 22
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're doing much numerical work with arrays like this, I'd suggest <a href="https://docs.scipy.org/doc/numpy/user/whatisnumpy.html" rel="noreferrer"><code>numpy</code></a>, which comes with a cumulative sum function <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html" rel="noreferrer"><code>cumsum</code></a>:</p>
<pre><code>import numpy as np

a = [4,6,12]

np.cumsum(a)
#array([4, 10, 22])
</code></pre>
<p>Numpy is often faster than pure python for this kind of thing, see in comparison to <a href="https://stackoverflow.com/a/15889203/1730674">@Ashwini's <code>accumu</code></a>:</p>
<pre><code>In [136]: timeit list(accumu(range(1000)))
10000 loops, best of 3: 161 us per loop

In [137]: timeit list(accumu(xrange(1000)))
10000 loops, best of 3: 147 us per loop

In [138]: timeit np.cumsum(np.arange(1000))
100000 loops, best of 3: 10.1 us per loop
</code></pre>
<p>But of course if it's the only place you'll use numpy, it might not be worth having a dependence on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2 you can define your own generator function like this:</p>
<pre><code>def accumu(lis):
    total = 0
    for x in lis:
        total += x
        yield total

In [4]: list(accumu([4,6,12]))
Out[4]: [4, 10, 22]
</code></pre>
<p>And in Python 3.2+ you can use <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="noreferrer"><code>itertools.accumulate()</code></a>:</p>
<pre><code>In [1]: lis = [4,6,12]

In [2]: from itertools import accumulate

In [3]: list(accumulate(lis))
Out[3]: [4, 10, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Behold:</p>
<pre><code>a = [4, 6, 12]
reduce(lambda c, x: c + [c[-1] + x], a, [0])[1:]
</code></pre>
<p>Will output (as expected):</p>
<pre><code>[4, 10, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I did a bench-mark of the top two answers with Python 3.4 and I found <code>itertools.accumulate</code> is faster than <code>numpy.cumsum</code> under many circumstances, often much faster. However, as you can see from the comments, this may not always be the case, and it's difficult to exhaustively explore all options. (Feel free to add a comment or edit this post if you have further benchmark results of interest.)</p>
<p>Some timings...</p>
<p>For short lists <code>accumulate</code> is about 4 times faster:</p>
<pre><code>from timeit import timeit

def sum1(l):
    from itertools import accumulate
    return list(accumulate(l))

def sum2(l):
    from numpy import cumsum
    return list(cumsum(l))

l = [1, 2, 3, 4, 5]

timeit(lambda: sum1(l), number=100000)
# 0.4243644131347537
timeit(lambda: sum2(l), number=100000)
# 1.7077815784141421
</code></pre>
<p>For longer lists <code>accumulate</code> is about 3 times faster:</p>
<pre><code>l = [1, 2, 3, 4, 5]*1000
timeit(lambda: sum1(l), number=100000)
# 19.174508565105498
timeit(lambda: sum2(l), number=100000)
# 61.871223849244416
</code></pre>
<p>If the <code>numpy</code> <code>array</code> is not cast to <code>list</code>, <code>accumulate</code> is still about 2 times faster:</p>
<pre><code>from timeit import timeit

def sum1(l):
    from itertools import accumulate
    return list(accumulate(l))

def sum2(l):
    from numpy import cumsum
    return cumsum(l)

l = [1, 2, 3, 4, 5]*1000

print(timeit(lambda: sum1(l), number=100000))
# 19.18597290944308
print(timeit(lambda: sum2(l), number=100000))
# 37.759664884768426
</code></pre>
<p>If you put the imports outside of the two functions and still return a <code>numpy</code> <code>array</code>, <code>accumulate</code> is still nearly 2 times faster:</p>
<pre><code>from timeit import timeit
from itertools import accumulate
from numpy import cumsum

def sum1(l):
    return list(accumulate(l))

def sum2(l):
    return cumsum(l)

l = [1, 2, 3, 4, 5]*1000

timeit(lambda: sum1(l), number=100000)
# 19.042188624851406
timeit(lambda: sum2(l), number=100000)
# 35.17324400227517
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, you want a running list of subsequences:</p>
<pre><code>subseqs = (seq[:i] for i in range(1, len(seq)+1))
</code></pre>
<p>Then you just call <code>sum</code> on each subsequence:</p>
<pre><code>sums = [sum(subseq) for subseq in subseqs]
</code></pre>
<p>(This isn't the most efficient way to do it, because you're adding all of the prefixes repeatedly. But that probably won't matter for most use cases, and it's easier to understand if you don't have to think of the running totals.)</p>
<p>If you're using Python 3.2 or newer, you can use <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a> to do it for you:</p>
<pre><code>sums = itertools.accumulate(seq)
</code></pre>
<p>And if you're using 3.1 or earlier, you can just copy the "equivalent to" source straight out of the docs (except for changing <code>next(it)</code> to <code>it.next()</code> for 2.5 and earlier).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>values = [4, 6, 12]
total  = 0
sums   = []

for v in values:
  total = total + v
  sums.append(total)

print 'Values: ', values
print 'Sums:   ', sums
</code></pre>
<p>Running this code gives</p>
<pre><code>Values: [4, 6, 12]
Sums:   [4, 10, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If You want a pythonic way without numpy working in 2.7 this would be my way of doing it</p>
<pre><code>l = [1,2,3,4]
_d={-1:0}
cumsum=[_d.setdefault(idx, _d[idx-1]+item) for idx,item in enumerate(l)]
</code></pre>
<p>now let's try it and test it against all other implementations</p>
<pre><code>import timeit
L=range(10000)

def sum1(l):
    cumsum=[]
    total = 0
    for v in l:
        total += v
        cumsum.append(total)
    return cumsum


def sum2(l):
    import numpy as np
    return list(np.cumsum(l))

def sum3(l):
    return [sum(l[:i+1]) for i in xrange(len(l))]

def sum4(l):
    return reduce(lambda c, x: c + [c[-1] + x], l, [0])[1:]

def this_implementation(l):
    _d={-1:0}
    return [_d.setdefault(idx, _d[idx-1]+item) for idx,item in enumerate(l)]


# sanity check
sum1(L)==sum2(L)==sum3(L)==sum4(L)==this_implementation(L)
&gt;&gt;&gt; True    

# PERFORMANCE TEST
timeit.timeit('sum1(L)','from __main__ import sum1,sum2,sum3,sum4,this_implementation,L', number=100)/100.
&gt;&gt;&gt; 0.001018061637878418

timeit.timeit('sum2(L)','from __main__ import sum1,sum2,sum3,sum4,this_implementation,L', number=100)/100.
&gt;&gt;&gt; 0.000829620361328125

timeit.timeit('sum3(L)','from __main__ import sum1,sum2,sum3,sum4,this_implementation,L', number=100)/100.
&gt;&gt;&gt; 0.4606760001182556 

timeit.timeit('sum4(L)','from __main__ import sum1,sum2,sum3,sum4,this_implementation,L', number=100)/100.
&gt;&gt;&gt; 0.18932826995849608

timeit.timeit('this_implementation(L)','from __main__ import sum1,sum2,sum3,sum4,this_implementation,L', number=100)/100.
&gt;&gt;&gt; 0.002348129749298096
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>result = []
acc = 0
for i in time_interval:
    acc += i
    result.append(acc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assignment expressions <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">from PEP 572</a> (expected for Python 3.8) offer yet another way to solve this:</p>
<pre><code>time_interval = [4, 6, 12]

total_time = 0
cum_time = [total_time := total_time + t for t in time_interval]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Somewhat hacky, but seems to work:</p>
<pre><code>def cumulative_sum(l):
  y = [0]
  def inc(n):
    y[0] += n
    return y[0]
  return [inc(x) for x in l]
</code></pre>
<p>I did think that the inner function would be able to modify the <code>y</code> declared in the outer lexical scope, but that didn't work, so we play some nasty hacks with structure modification instead. It is probably more elegant to use a generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without having to use Numpy, you can loop directly over the array and accumulate the sum along the way. For example:</p>
<pre><code>a=range(10)
i=1
while((i&gt;0) &amp; (i&lt;10)):
    a[i]=a[i-1]+a[i]
    i=i+1
print a
</code></pre>
<p>Results in: </p>
<pre><code>[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def cummul_sum(list_arguement):
    cumm_sum_lst = []
    cumm_val = 0
    for eachitem in list_arguement:
        cumm_val += eachitem
        cumm_sum_lst.append(cumm_val)
    return cumm_sum_lst
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A pure python oneliner for cumulative sum: </p>
<pre><code>cumsum = lambda X: X[:1] + cumsum([X[0]+X[1]] + X[2:]) if X[1:] else X
</code></pre>
<p>This is a recursive version inspired by <a href="https://stackoverflow.com/questions/13347515/recursive-cumulative-sums">recursive cumulative sums</a>. Some explanations:</p>
<ol>
<li>The first term <code>X[:1]</code> is a list containing the previous element and is almost the same as <code>[X[0]]</code> (which would complain for empty lists).</li>
<li>The recursive <code>cumsum</code> call in the second term processes the current element <code>[1]</code> and remaining list whose length will be reduced by one.</li>
<li><code>if X[1:]</code> is shorter for <code>if len(X)&gt;1</code>.</li>
</ol>
<p>Test:</p>
<pre><code>cumsum([4,6,12])
#[4, 10, 22]

cumsum([])
#[]
</code></pre>
<p>And simular for cumulative product:</p>
<pre><code>cumprod = lambda X: X[:1] + cumprod([X[0]*X[1]] + X[2:]) if X[1:] else X
</code></pre>
<p>Test:</p>
<pre><code>cumprod([4,6,12])
#[4, 24, 288]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:
 accumulate function, along with operator add performs the running addition.</p>
<pre><code>import itertools  
import operator  
result = itertools.accumulate([1,2,3,4,5], operator.add)  
list(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can calculate the cumulative sum list in linear time with a simple <code>for</code> loop:</p>
<pre><code>def csum(lst):
    s = lst.copy()
    for i in range(1, len(s)):
        s[i] += s[i-1]
    return s

time_interval = [4, 6, 12]
print(csum(time_interval))  # [4, 10, 22]
</code></pre>
<p>The standard library's <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> may be a faster alternative (since it's implemented in C):</p>
<pre><code>from itertools import accumulate
time_interval = [4, 6, 12]
print(list(accumulate(time_interval)))  # [4, 10, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst = [4,6,12]

[sum(lst[:i+1]) for i in xrange(len(lst))]
</code></pre>
<p>If you are looking for a more efficient solution (bigger lists?) a generator could be a good call (or just use <code>numpy</code> if you really care about perf).</p>
<pre><code>def gen(lst):
    acu = 0
    for num in lst:
        yield num + acu
        acu += num

print list(gen([4, 6, 12]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [42]: a = [4, 6, 12]

In [43]: [sum(a[:i+1]) for i in xrange(len(a))]
Out[43]: [4, 10, 22]
</code></pre>
<p>This is <em>slighlty</em> faster than the generator method above by @Ashwini for small lists</p>
<pre><code>In [48]: %timeit list(accumu([4,6,12]))
  100000 loops, best of 3: 2.63 us per loop

In [49]: %timeit [sum(a[:i+1]) for i in xrange(len(a))]
  100000 loops, best of 3: 2.46 us per loop
</code></pre>
<p>For larger lists, the generator is the way to go for sure. . . </p>
<pre><code>In [50]: a = range(1000)

In [51]: %timeit [sum(a[:i+1]) for i in xrange(len(a))]
  100 loops, best of 3: 6.04 ms per loop

In [52]: %timeit list(accumu(a))
  10000 loops, best of 3: 162 us per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This would be Haskell-style:</p>
<pre><code>def wrand(vtlg):

    def helpf(lalt,lneu): 

        if not lalt==[]:
            return helpf(lalt[1::],[lalt[0]+lneu[0]]+lneu)
        else:
            lneu.reverse()
            return lneu[1:]        

    return helpf(vtlg,[0])
</code></pre>
</div>
<span class="comment-copy">Side note: Don't call a list <code>list</code>. That's the name of the built-in function used to convert other things into lists, and you don't want to hide that.</span>
<span class="comment-copy">See also <a href="http://stackoverflow.com/q/9258602">stackoverflow.com/q/9258602</a></span>
<span class="comment-copy">This should have a <code>np.cumsun</code> case that starts with a list, to take into account the conversion time.</span>
<span class="comment-copy">Good point @hpaulj, for those starting from (or aiming for) a <code>list</code> I would not recommend <code>numpy</code>.</span>
<span class="comment-copy">I don't think numpy is fastest <a href="http://stackoverflow.com/questions/15889131/how-to-find-the-cumulative-sum-of-numbers-in-a-list/39534850#39534850" title="how to find the cumulative sum of numbers in a list">stackoverflow.com/questions/15889131/…</a></span>
<span class="comment-copy">Agreed, as I mentioned above. Avoiding reactions like yours and @hpaulj's is why I tried to limit its scope in the very first and last lines of my answer :-/</span>
<span class="comment-copy">@alex: Using <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a>, <i>"if <code>-n</code> is not given, a suitable number of loops is calculated by trying successive powers of 10 until the total time is at least 0.2 seconds."</i> If you expect it to make a difference, you can supply <code>-n 1000</code> to make them all equivalent.</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">PEP 572  -- Assignment Expressions</a> (expected for Python 3.8) shows an interesting alternative <code>total = 0; partial_sums = [total := total + v for v in values]</code>.  I would still expect <code>accumulate</code> to be faster.</span>
<span class="comment-copy">@StevenRumbalski Man, I personally think that's the worst PEP ever. <a href="https://mail.python.org/pipermail/python-committers/2018-July/005664.html" rel="nofollow noreferrer">Bad enough...</a></span>
<span class="comment-copy">Excellent answer, and efficient as well!</span>
<span class="comment-copy"><i>Not</i> efficient. The total expense of performing <code>c + [c[-1] + x]</code> over and over adds up to a total runtime quadratic in the input length.</span>
<span class="comment-copy">reduce is good for a one-off cumulative sum, but if you're doing a lot of calls to your cumsum function a generator will be useful to "preprocess" your cumulative_sum values and access them in O(1) for each subsequent call.</span>
<span class="comment-copy">You wouldn't expect an airplane to be faster than the train to travel across town, especially including ticket purchase and security screening. Likewise you wouldn't use numpy to process a <code>list</code> of five items, especially if you are unwilling to accept an <code>array</code> in return. If the list in question is really so short, then their running time would be <i>inconsequential</i>---dependencies and legibility would surely dominate. But wide usage of a <code>list</code> of uniform numerical data type of significant length would be silly; for that, a numpy <code>array</code> <i>would</i> be appropriate, and usually faster.</span>
<span class="comment-copy">@askewchan well I don't just find this for short lists and the OP's question asks for a list as output rather than a numpy array. Perhaps you can edit your answer to be clearer on when each use is appropriate :)</span>
<span class="comment-copy">@askewchan In fact I've edited my answer with a much more detailed comparison. Under no circumstances, do I find <code>numpy</code> to be faster, unless I've overlooked something?</span>
<span class="comment-copy">Oh my, yes indeed :) I wouldn't say you've overlooked something, but the comparison is hard to make in isolation without considering your inputs and outputs. Most of the time in your <code>sum2</code> function is probably in converting <code>l</code> into an array. Try timing <code>a = np.array(l)</code> and <code>np.cumsum(a)</code> separately. Then try <code>a = np.tile(np.arange(1, 6), 1000)</code> vs <code>l = [1,2,3,4,5]*1000</code>. In a program conducting other numerical processes (like the creation or loading of <code>l</code> in the first place) your working data would probably be in an array already, and the creation would be a constant cost.</span>
<span class="comment-copy">@askewchan I got the same idea as you and therefore I did time the a = np.array(l). For the sum2 without the transformation to list, and with a numpy array as input, sum2 is 5 times faster thank sum1 in my computer in case of the long list/array.</span>
<span class="comment-copy">This runs in quadratic time (maybe that doesn't matter for the OP, but worth mentioning).</span>
<span class="comment-copy">First, when N=3, who cares about quadratic time? And I don't think it's overcomplicated. It's two very simple steps, each transforming one iterator into another, directly translating the English-language description. (The fact that he's using an uncommon way of defining series, where the 0-length prefix isn't counted, does make it a bit more complicated… but that's inherent in the problem, and I thought it was better to put that in the <code>range</code> than to hack around it by doing <code>[1:]</code> at the end, or to ignore it.)</span>
<span class="comment-copy">Presumably the OP's actual problem isn't to get the partial sums of <code>[4,6,12]</code> since, as he wrote in the question, he already knows what that is!</span>
<span class="comment-copy">@ChrisTaylor: He explicitly said that he already knows how to write this, but wants "an easier way to write it".</span>
<span class="comment-copy">Please format your code and provide more information about why your answer is the correct solution.</span>
<span class="comment-copy">You don't need to to pass <code>operator.add</code> as the default operation is addition anyway.</span>
<span class="comment-copy">You're timing for just 3 item list, try for 10^4 items.</span>
<span class="comment-copy">True, for larger lists the generator is far faster!</span>
<span class="comment-copy">I edited my answer to show that.</span>
