<div class="post-text" itemprop="text">
<p>I have this script, which I have no doubt is flawed:</p>
<pre><code>import fnmatch, os, sys
def findit (rootdir, find, pattern):
    for folder, dirs, files in os.walk(rootdir):
        print (folder)
    for filename in fnmatch.filter(files,pattern):          
        with open(filename) as f:
            s = f.read()
            f.close()
            if find in s :                  
                print(filename)

findit(sys.argv[1], sys.argv[2], sys.argv[3])
</code></pre>
<p>when I run it I get <code>Errno2, no such file or directory</code>. BUT the file exists. For instance if I execute it by going: <code>findit.py c:\python "folder" *.py</code> it will work just fine, listing all the *.py files which contain the word "folder". BUT if I go <code>findit.py c:\php\projects1 "include" *.php</code></p>
<p>as an example I get <code>[Errno2] no such file or directory: 'About.php'</code> (for example). But About.php exists. I don't understand what it's doing, or what I'm doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at any of the examples for <a href="http://docs.python.org/3/library/os.html#os.walk" rel="nofollow"><code>os.walk</code></a>, you'll see that they all do <code>os.path.join(root, name)</code>. You need to do that too.</p>
<p>Why? Quoting from the docs:</p>
<blockquote>
<p><code>filenames</code> is a list of the names of the non-directory files in dirpath. Note that the names in the lists contain no path components. To get a full path (which begins with top) to a file or directory in dirpath, do <code>os.path.join(dirpath, name)</code>.</p>
</blockquote>
<p>If you just use the filename as a path, it's going to look for a file of the same name in the current working directory. If there's no such file, you'll get a <code>FileNotFoundError</code>. If there <em>is</em> such a file, you'll open and read the wrong file. Only if you happen to be looking inside the current working directory will it work.</p>
<hr/>
<p>There's also another major problem in your code: <code>os.walk</code> walks a directory tree recursively, finding all files in the given <code>top</code> directory, or any subdirectory of <code>top</code>, or any subdirectory of… and so on, yielding once for each directory. But you're not doing anything useful with that (except printing out the folders). Instead, you wait until it finishes, and then use the <code>files</code> from whichever directory it happened to reach last.</p>
<p>If you just want to get a flat listing of the files directly in a directory, use <a href="http://docs.python.org/3/library/os.html#os.listdir" rel="nofollow"><code>os.listdir</code></a>, not <code>os.walk</code>. (Or maybe use <a href="http://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow"><code>glob.glob</code></a> instead of explicitly listing everything then filtering with <code>fnmatch</code>.)</p>
<p>On the other hand, if you want to walk the tree, you have to move your second <code>for</code> loop inside the first one.</p>
<hr/>
<p>You've also got a minor problem: You call <code>f.close()</code> inside a <code>with open(…) as f:</code>, which leads to <code>f</code> being closed twice. This is guaranteed to be completely harmless (at least in 2.5+, including 3.x), but it's still a bad idea.</p>
<hr/>
<p>Putting it together, here's a working version of your code:</p>
<pre><code>def findit (rootdir, find, pattern):
    for folder, dirs, files in os.walk(rootdir):
        print (folder)
        for filename in fnmatch.filter(files,pattern):
            pathname = os.path.join(folder, filename)
            with open(pathname) as f:
                s = f.read()
                if find in s:
                    print(pathname)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using a relative filename. But your current directory does not contain the file. And you don't want to search there anyway. Use os.path.join(folder, filename) to make an absolute path. </p>
</div>
<span class="comment-copy">If you look at any of the examples for <a href="http://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a>, you'll see that they all do <code>os.path.join(root, name)</code>. You need to do the same, for the same reasons.</span>
<span class="comment-copy">Also, your indentation is wrong; you need the <code>for filename in…</code> loop to be inside the <code>for folders…</code> loop. Otherwise, you're only looking over whichever directory happened to come up last in the <code>walk</code>.</span>
<span class="comment-copy">OMG so many errors. I am so appreciative. THANKS!!!!</span>
<span class="comment-copy">@Ron: It's pretty normal to make this many mistakes in a function like this. Eventually, you'll make the same mistakes so many times that you can immediately spot and fix them when the test fails. But you'll never stop making them.</span>
<span class="comment-copy">Sadly you are probably right.</span>
<span class="comment-copy">@Ron: I wasn't really talking about you, but about me, and all the people I've worked with in professional and open source projects over <i>cough cough</i> years. Nobody ever stops making simple errors, we just get better at spotting and fixing them. (Which is, when you think about it, why sites like this work.)</span>
<span class="comment-copy">Being in the system PATH isn't relevant to the <code>open</code> function. More likely, it works because it's his current working directory.</span>
