<div class="post-text" itemprop="text">
<p>Apologies if this has been asked before, but I couldn't see it anywhere.</p>
<p>Essentially I've come across a scenario where i need to make use of an if statement inside a lambda function. What makes it difficult is that ideally it needs to be in a single line of code (if thats even possible?)</p>
<p>Normally, i would write this:</p>
<pre><code>T = 250

if (T &gt; 200):
    rate = 200*exp(-T)
else:
    rate = 400*exp(-T)

return (rate)
</code></pre>
<p>However i need it to look like this:</p>
<pre><code>rate = lambda(T) : if (T&gt;200): return(200*exp(-T)); else: return(400*exp(-T))
</code></pre>
<p>I realize the easier thing to do would to take the decision making outside of the lambda functions, and then have a separate lambda function for each case, but its not really suitable here. The lambda functions are stored in an array and accessed when needed, with each array element corresponding to a particular "rate" so having two separate rows for the same "rate" would mess things up. Any help would be greatly appreciated, or if its not possible, some confirmation from others would be nice :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>exp1 if cond else exp2</code> syntax.</p>
<pre><code>rate = lambda T: 200*exp(-T) if T&gt;200 else 400*exp(-T)
</code></pre>
<p>Note you don't use <code>return</code> in lambda expressions.</p>
</div>
<div class="post-text" itemprop="text">
<p>The right way to do this is simple:</p>
<pre><code>def rate(T):
    if (T &gt; 200):
        return 200*exp(-T)
    else:
        return 400*exp(-T)
</code></pre>
<p>There is absolutely no advantage to using <code>lambda</code> here. The only thing <code>lambda</code> is good for is allowing you to create anonymous functions and use them in an expression (as opposed to a statement). If you immediately assign the <code>lambda</code> to a variable, it's no longer anonymous, and it's used in a statement, so you're just making your code less readable for no reason.</p>
<p>The <code>rate</code> function defined this way can be stored in an array, passed around, called, etc. in exactly the same way a lambda function could. It'll be exactly the same (except a bit easier to debug, introspect, etc.).</p>
<hr/>
<p>From a comment:</p>
<blockquote>
<p>Well the function needed to fit in one line, which i didn't think you could do with a named function?</p>
</blockquote>
<p>I can't imagine any good reason why the function would ever need to fit in one line. But sure, you can do that with a named function. Try this in your interpreter:</p>
<pre><code>&gt;&gt;&gt; def foo(x): return x + 1
</code></pre>
<hr/>
<blockquote>
<p>Also these functions are stored as strings which are then evaluated using "eval" which i wasn't sure how to do with regular functions.</p>
</blockquote>
<p>Again, while it's hard to be 100% sure without any clue as to why why you're doing this, I'm at least 99% sure that you have no reason or a bad reason for this. Almost any time you think you want to pass Python functions around as strings and call <code>eval</code> so you can use them, you actually just want to pass Python functions around as functions and use them as functions.</p>
<p>But on the off chance that this really is what you need here: Just use <code>exec</code> instead of <code>eval</code>.</p>
<p>You didn't mention which version of Python you're using. In 3.x, the <a href="http://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> function has the exact same signature as the <code>eval</code> function:</p>
<pre><code>exec(my_function_string, my_globals, my_locals)
</code></pre>
<p>In 2.7, <a href="http://docs.python.org/2/reference/simple_stmts.html#exec" rel="noreferrer"><code>exec</code></a> is a statement, not a function—but you can still write it in the same syntax as in 3.x (as long as you don't try to assign the return value to anything) and it works.</p>
<p>In earlier 2.x (before 2.6, I think?) you have to do it like this instead:</p>
<pre><code>exec my_function_string in my_globals, my_locals
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use the shorthand syntax for <code>if</code> statements.</p>
<pre><code>rate = lambda(t): (200 * exp(-t)) if t &gt; 200 else (400 * exp(-t))
</code></pre>
<p>Note that you don't use explicit <code>return</code> statements in<code>lambda</code>s either.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found I COULD use "if-then" statements in a lambda.  For instance:</p>
<pre><code>eval_op = {
    '|'  : lambda x,y: eval(y) if (eval(x)==0) else eval(x),
    '&amp;'  : lambda x,y: 0 if (eval(x)==0) else eval(y),
    '&lt;'  : lambda x,y: 1 if (eval(x)&lt;eval(y)) else 0,
    '&gt;'  : lambda x,y: 1 if (eval(x)&gt;eval(y)) else 0,
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By the time you say <code>rate = lambda whatever...</code> you've defeated the point of lambda and should just define a function. But, if you want a lambda, you can use 'and' and 'or'</p>
<pre><code>lambda(T): (T&gt;200) and (200*exp(-T)) or (400*exp(-T))
</code></pre>
</div>
<span class="comment-copy">I doubt-squared that you need a one-line lambda function, because I doubt that you need a one-line function, and I doubt that you need a lambda function as opposed to a named function.  What's the point of using a <code>lambda</code> if you're immediately going to give your function the name <code>rate</code> anyhow?</span>
<span class="comment-copy">Too bad I can only +1 DSM once… But to make it clear: the easier thing to do is not to "take the decision making outside of the lambda functions", but to just define them as regular functions in the first place. You can store regular functions in an array. There's nothing special about lambdas; they're <i>more limited</i> functions, not <i>more powerful</i> functions.</span>
<span class="comment-copy">Well the function needed to fit in one line, which i didn't think you could do with a named function? Also these functions are stored as strings which are then evaluated using "eval" which i wasn't sure how to do with regular functions.</span>
<span class="comment-copy">First, why does it need to fit in one line? Second, why are they stored as strings and then evaluated using <code>eval</code>? Those are both very bad requirements. I suspect there's an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a> here, and if you told us what you were actually trying to do, we could explain the right way to do it.</span>
<span class="comment-copy">Further shortening: <code>rate = lambda(t): (200 if t &gt; 200 else 400) * exp(-t)</code></span>
<span class="comment-copy">@shahkalpesh Quite true, though arguably less explicit in illustrating the answer to the question.</span>
<span class="comment-copy">The parens after "lambda" are also superfluous.</span>
