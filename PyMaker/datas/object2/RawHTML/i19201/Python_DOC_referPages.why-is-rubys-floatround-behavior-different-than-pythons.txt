<div class="post-text" itemprop="text">
<p>"<a href="https://stackoverflow.com/questions/15732032/behavior-of-round-function-in-python">Behavior of “round” function in Python</a>" observes that Python rounds floats like this:</p>
<pre><code>&gt;&gt;&gt; round(0.45, 1)
0.5
&gt;&gt;&gt; round(1.45, 1)
1.4
&gt;&gt;&gt; round(2.45, 1)
2.5
&gt;&gt;&gt; round(3.45, 1)
3.5
&gt;&gt;&gt; round(4.45, 1)
4.5
&gt;&gt;&gt; round(5.45, 1)
5.5
&gt;&gt;&gt; round(6.45, 1)
6.5
&gt;&gt;&gt; round(7.45, 1)
7.5
&gt;&gt;&gt; round(8.45, 1)
8.4
&gt;&gt;&gt; round(9.45, 1)
9.4
</code></pre>
<p>The accepted answer confirms this is caused by the binary representation of floats being inaccurate, which is all logical.</p>
<p>Assuming that Ruby floats are just as inaccurate as Python's, how come Ruby floats round like a human would? Does Ruby cheat?</p>
<pre><code>1.9.3p194 :009 &gt; 0.upto(9) do |n|
1.9.3p194 :010 &gt;     puts (n+0.45).round(1)
1.9.3p194 :011?&gt;   end
0.5
1.5
2.5
3.5
4.5
5.5
6.5
7.5
8.5
9.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Summary</strong></p>
<p>Both implementations are confront the same <a href="http://docs.python.org/2.7/tutorial/floatingpoint.html" rel="nofollow">issues surrounding binary floating point number</a>s.</p>
<p>Ruby operates directly on the floating point number with simple operations (multiply by a power of ten, adjust, and truncate).</p>
<p>Python converts the binary floating point number to a string using David Gay's sophisticated algorithm that yields the shortest decimal representation that is exactly equal to the binary floating point number. This does not do any additional rounding, it is an exact conversion to a string.</p>
<p>With the shortest string representation in-hand, Python rounds to the appropriate number of decimal places using exact string operations. The goal of the float-to-string conversion is to attempt to "undo" some of the binary floating point representation error (i.e. if you enter 6.6, Python rounds on the 6.6 rather that 6.5999999999999996.</p>
<p>In addition, Ruby differs from some versions of Python in rounding modes: round-away-from-zero versus round-half-even.</p>
<p><strong>Detail</strong></p>
<p>Ruby doesn't cheat. It starts with plain old binary float point numbers the same a Python does. Accordingly, it is subject to some of the same challenges (such 3.35 being represented at slightly <em>more than 3.35</em> and 4.35 being represented as slightly <em>less than</em> 4.35):</p>
<pre><code>&gt;&gt;&gt; Decimal.from_float(3.35)
Decimal('3.350000000000000088817841970012523233890533447265625')
&gt;&gt;&gt; Decimal.from_float(4.35)
Decimal('4.3499999999999996447286321199499070644378662109375')
</code></pre>
<p>The best way to see the implementation differences is to look at the underlying source code:</p>
<p>Here's a link to the Ruby source code: <a href="https://github.com/ruby/ruby/blob/trunk/numeric.c#L1587" rel="nofollow">https://github.com/ruby/ruby/blob/trunk/numeric.c#L1587</a></p>
<p>The Python source is starts here: <a href="http://hg.python.org/cpython/file/37352a3ccd54/Python/bltinmodule.c" rel="nofollow">http://hg.python.org/cpython/file/37352a3ccd54/Python/bltinmodule.c</a>
and finishes here: <a href="http://hg.python.org/cpython/file/37352a3ccd54/Objects/floatobject.c#l1080" rel="nofollow">http://hg.python.org/cpython/file/37352a3ccd54/Objects/floatobject.c#l1080</a></p>
<p>The latter has an extensive comment that reveals the differences between the two implementations:</p>
<blockquote>
<p>The basic idea is very simple: convert and round the double to a
  decimal string using _Py_dg_dtoa, then convert that decimal string
  back to a double with _Py_dg_strtod. There's one minor difficulty:
  Python 2.x expects round to do round-half-away-from-zero, while
  _Py_dg_dtoa does round-half-to-even. So we need some way to detect and correct the halfway cases.</p>
<p>Detection: a halfway value has the form k * 0.5 * 10**-ndigits for
  some odd integer k. Or in other words, a rational number x is exactly
  halfway between two multiples of 10**-ndigits if its 2-valuation is
  exactly -ndigits-1 and its 5-valuation is at least
  -ndigits. For ndigits &gt;= 0 the latter condition is automatically satisfied for a binary float x, since any such float has nonnegative
  5-valuation. For 0 &gt; ndigits &gt;= -22, x needs to be an integral
  multiple of 5**-ndigits; we can check this using fmod. For -22 &gt;
  ndigits, there are no halfway cases: 5**23 takes 54 bits to represent
  exactly, so any odd multiple of 0.5 * 10**n for n &gt;= 23 takes at least
  54 bits of precision to represent exactly.</p>
<p>Correction: a simple strategy for dealing with halfway cases is to
  (for the halfway cases only) call _Py_dg_dtoa with an argument of
  ndigits+1 instead of ndigits (thus doing an exact conversion to
  decimal), round the resulting string manually, and then convert back
  using _Py_dg_strtod.</p>
</blockquote>
<p>In short, Python 2.7 goes to great lengths to accurately follow a <a href="http://docs.python.org/2.7/library/functions.html#round" rel="nofollow">round-away-from-zero</a> rule.</p>
<p>In Python 3.3, it goes to equally great length to accurately follow a <a href="http://docs.python.org/3/library/functions.html#round" rel="nofollow">round-to-even</a> rule.</p>
<p>Here's a little additional detail on the <a href="http://hg.python.org/cpython/file/37352a3ccd54/Python/dtoa.c" rel="nofollow">_Py_dg_dtoa</a> function. Python calls the float to string function because it implements an algorithm that gives the shortest possible string representation among equal alternatives. In Python 2.6, for example, the number 1.1 shows up as 1.1000000000000001, but in Python 2.7 and later, it is simply 1.1. <a href="http://www.netlib.org/fp/dtoa.c" rel="nofollow">David Gay's sophisticated dtoa.c algorithm</a> gives "the-result-that-people-expect" without forgoing accuracy.</p>
<p>That string conversion algorithm tends to make-up for some of the issues that plague any implementation of round() on binary floating point numbers (i.e. it less rounding of 4.35 start with 4.35 instead of 4.3499999999999996447286321199499070644378662109375).</p>
<p>That and the rounding mode (round-half-even vs round-away-from-zero) are the essential differences between the Python and Ruby round() functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>The fundamental difference is:</p>
<p><strong>Python:</strong> <em>Convert to decimal and then round</em></p>
<p><strong>Ruby:</strong>     <em>Round and then convert to decimal</em></p>
<p>Ruby is rounding it from the original floating point bit string, but after operating on it with <strong>10<sup><em>n</em></sup>.</strong> You can't see the original binary value without looking very closely.  The values are inexact because they are binary, and we are used to writing in decimal, and as it happens almost all of the decimal fraction strings we are likely to write do not have an exact equivalence as a base 2 fraction string.</p>
<p>In particular, 0.45 looks like this:</p>
<pre><code>01111111101 1100110011001100110011001100110011001100110011001101 
</code></pre>
<p>In hex, that is <code>3fdccccccccccccd.</code></p>
<p>It repeats in binary, the first unrepresented digit is <code>0xc,</code> and the clever decimal input conversion has accurately rounded this very last fractional digit to <code>0xd</code>.</p>
<p>This means that inside the machine, the value is greater than <code>0.45</code> by roughly 1/2<sup>50</sup>. This is obviously a very, very small number but it's enough to cause the default <em>round-nearest</em> algorithm to round up instead of to the tie-breaker of <em>even</em>.</p>
<p>Both Python and Ruby are potentially rounding more than once as every operation effectively rounds into the least significant bit.</p>
<p>I'm not sure I agree that Ruby does <em>what a human would do.</em> I think Python is approximating <em>what decimal arithmetic would do.</em> Python (depending on version) is applying <em>round-nearest</em> to the decimal string and Ruby is applying the <em>round nearest</em> algorithm to a computed binary value.</p>
<p>Note that we can see here quite clearly the reason people say that FP is inexact. It's a reasonably true statement, but it's <em>more true</em> to say that we simply can't convert accurately between binary and most decimal fractions. (Some do: 0.25, 0.5, 0.75, ...) Most simple decimal numbers are repeating numbers in binary, so we can never store the exact equivalent value. But, every value we <em>can</em> store is known exactly and all arithmetic performed on it is performed exactly. If we wrote our fractions in binary in the first place our FP arithmetic would be considered <em>exact</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ruby doesn't cheat. It just chose another way to implement <a href="https://github.com/ruby/ruby/blob/ruby_1_9_3/numeric.c#L1587" rel="nofollow"><code>round</code></a>.<br/></p>
<p>In Ruby, <code>9.45.round(1)</code> is almost equivalent to <code>(9.45*10.0).round / 10.0</code>.</p>
<pre><code>irb(main):001:0&gt; printf "%.20f", 9.45
9.44999999999999928946=&gt; nil
irb(main):002:0&gt; printf "%.20f", 9.45*10.0
94.50000000000000000000=&gt; nil
</code></pre>
<p>So</p>
<pre><code>irb(main):003:0&gt; puts 9.45.round(1)
9.5
</code></pre>
<p>If we use such way in Python, we will get 9.5 as well.</p>
<pre><code>&gt;&gt;&gt; round(9.45, 1)
9.4
&gt;&gt;&gt; round(9.45*10)/10
9.5
</code></pre>
</div>
<span class="comment-copy">that's strange indeed. <code>printf "%.20f", 1.45 # =&gt; 1.44999999999999995559</code> <code>1.45.round 1 # =&gt; 1.5</code></span>
<span class="comment-copy">You mean, why does <code>round(1.45,1)</code> return <code>1.4</code> in Python, but  <code>1.45.round(1)</code> return <code>1.5</code> in Ruby?</span>
<span class="comment-copy">beats me how this answers the question</span>
<span class="comment-copy">-1. While you have cited relevant source material, I have to say you should have extracted the conceptual difference and actually explained it.  I doubt if this helps the OP at all and it's not even clear whether you do or do not understand it yourself. I believe you <i>do</i> understand, but then, why not just explain it?</span>
<span class="comment-copy">@DigitalRoss -1's are for downright wrong answers. Downvotes should not be used for the answers that you just don't like for some reason. Just don't upvote such answers.</span>
<span class="comment-copy">The tooltip for the downvote arrow says "this answer is not useful". It doesn't say anything about right or wrong. If you ask me "Can you tell me what time it is" and I say "Yes", that answer is completely useless but still 100% correct.</span>
<span class="comment-copy">+1. I've reversed the dv because Raymond added a nice explanation. It does appear, however, that my temporary dv was precisely congruent with the site design.</span>
<span class="comment-copy">In other words, Python implements <code>round(f, n)</code> pretty much as <code>s = '%.*f' % (n, f); return float(s[:s.index('.') + n + 1]</code>, with special handling of halfway cases. <i>That</i> ought to be described as "what a human would do" — fascinating.</span>
<span class="comment-copy">But if that is the implementation, why doesn't <code>round(1.45, 1)</code> come out as <code>1.5</code>? Looking at the code, it should convert 1.45 to <code>"1.45"</code> (two decimals: one for rounding and one more to handle the halfway case), manually handle the halfway case by changing <code>"1.45"</code> to <code>"1.5"</code>, and convert <code>"1.5"</code> to - <code>1.5</code>. But string input as <code>"1.5"</code> and converted to float prints as <code>1.5</code>, not <code>1.4</code>!</span>
<span class="comment-copy">There is more complexity. Early versions of Python use a round-away-from-zero mode that is not even one of the <i>five</i> IEEE-754 modes. Later version use a variant on <i>round-nearest</i>, which in IEEE-754 breaks ties to even numbers. This would round 1.45 to 1.4 <i>if</i> there were no low-order residual from the decimal conversion.</span>
<span class="comment-copy">I can repeat <code>round(1.45) -&gt; 1.4</code> with Python 2.7 which <a href="http://hg.python.org/cpython/file/240c83902fca/Objects/floatobject.c#l1099" rel="nofollow noreferrer">implements round-away-from-zero</a>. Looking at the code, I suspect that the <code>halfway_case</code> detection evaluates to false for this number, so halfway detection which would have worked is never triggered. I.e. everything is handled correctly by <code>_Py_dg_dtoa</code> except for halfway detection.</span>
