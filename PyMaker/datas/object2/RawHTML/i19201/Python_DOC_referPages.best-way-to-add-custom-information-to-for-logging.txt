<div class="post-text" itemprop="text">
<p>I've been reading the Python <a href="http://docs.python.org/3.1/library/logging.html" rel="nofollow">logging</a> documentation, and its certainly has a lot of functionality...for everything.</p>
<p>The problem I'm facing is that I'm not Dutch and so I'm not sure what the right way to do this is.</p>
<p>I am running events in a simulator, and I would like to prefix every log message with the timestamp of the <em>simulated</em> time (probably with a length formatter too, just to keep it looking good). I could change this in a subclass of <code>Logger</code> or <code>Handler</code>, but I don't think that is the right way.</p>
<p>I think the right way is to use a <code>LoggerAdapter</code> or a <code>Filter</code>. Is this right, and if so, which one should I prefer?</p>
</div>
<div class="post-text" itemprop="text">
<p>Surely if you just need to prefix every log message with the timestamp, all you need to do is provide an appropriate format string for a formatter? As mentioned <a href="http://docs.python.org/3/howto/logging.html#displaying-the-date-time-in-messages" rel="nofollow">here</a> in the documentation.</p>
<p><strong>Update:</strong> A <code>LoggerAdapter</code> would be more appropriate for situations where contextual information is moderately long-lived. For example, in a network server application which handles multiple client connections, the connection details (e.g. client IP address) might be useful context, so you would create a <code>LoggerAdapter</code> instance when a new client connection was created. This doesn't sound like your simulation scenario.</p>
<p>A <code>Filter</code>, on the other hand, could be used if you could use it to get the simulation time, e.g.</p>
<pre><code>class SimulationFilter(logging.Filter):
    def __init__(self, context):
        """
        Set up with context passed in which allows access
        to simulation times.
        """
        self.context = context

    def filter(self, record):
        "Add sim_time field to record, formatted as you wish"
        record.sim_time = '%s' % self.context.get_sim_time()
        return True
</code></pre>
<p>and then add <code>%(sim_time)s</code> in your <code>Formatter</code>'s format string.</p>
<p>Alternatively, if you know the simulation time whenever you make a logging call, you could just do e.g.</p>
<pre><code>logger.debug('Message with %s', arguments, extra={'sim_time': sim_time})
</code></pre>
<p>and likewise have <code>%(sim_time)s</code> in your <code>Formatter</code>'s format string.</p>
</div>
<span class="comment-copy">I updated my answer in response to your comment.</span>
<span class="comment-copy">I clarified that it is the <i>simulated</i> time that I want to include. Sorry for ambiguity.</span>
