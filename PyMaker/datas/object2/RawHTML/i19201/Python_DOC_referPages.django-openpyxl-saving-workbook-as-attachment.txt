<div class="post-text" itemprop="text">
<p>Hi I have a quick question. I didn't find answer in internet maybe someone of you can help me.</p>
<p>So i want to save workbook as attachment but I don't know how lets see an example :</p>
<pre><code>    from openpyxl import Workbook
    from openpyxl.cell import get_column_letter
    wb = Workbook(encoding='utf-8')
    dest_filename = 'file.xlsx'
    ws = wb.worksheets[0]
    ws.title = "range names"
    for col_idx in xrange(1, 40):
        col = get_column_letter(col_idx)
        for row in xrange(1, 600):
            ws.cell('%s%s'%(col, row)).value = '%s%s' % (col, row)
    ws = wb.create_sheet()
    ws.title = 'Pi'
    ws.cell('F5').value = 3.14
</code></pre>
<p>Then I tried :</p>
<pre><code>response = HttpResponse(wb, content_type='application/vnd.ms-excel')
response['Content-Disposition'] = 'attachment; filename="foo.xls"'
return response
</code></pre>
<p>It's returning xlsx file indeed but in file there is only object adres not the content of file:</p>
<pre><code>&lt;openpyxl.workbook.Workbook object at 0x00000000042806D8&gt;
</code></pre>
<p>Can someone help ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Give it a try:</p>
<pre><code>from openpyxl.writer.excel import save_virtual_workbook
...
response = HttpResponse(save_virtual_workbook(wb), content_type='application/vnd.ms-excel')
</code></pre>
<p><code>save_virtual_workbook</code> was specially designed for your use case. Here's a docstring:</p>
<blockquote>
<p>"""Return an in-memory workbook, suitable for a Django response."""</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I usually use</p>
<pre><code>ws = wb.add_sheet("Pi")
</code></pre>
<p>instead of</p>
<pre><code>ws = wb.create_sheet()
ws.title = "Pi"
</code></pre>
<p>Moreover, you can try to do: (see <a href="https://secure.simplistix.co.uk/svn/xlwt/trunk/xlwt/doc/xlwt.html?p=4966" rel="nofollow">documentation</a>)</p>
<pre><code>wb.save(stream)
</code></pre>
<p>and then use stream in HttpResponse.</p>
</div>
<div class="post-text" itemprop="text">
<p>On at least some versions of django/python/openpyxl, the given solution does not work. See <a href="https://bitbucket.org/openpyxl/openpyxl/issues/657/save_virtual_workbook-generates-junk-data" rel="nofollow">https://bitbucket.org/openpyxl/openpyxl/issues/657/save_virtual_workbook-generates-junk-data</a></p>
<p>Simple working solution:</p>
<pre><code>wb = Workbook(write_only=True, encoding='utf-8')
ws = wb.create_sheet()
for row in data:
    ws.append([str(cell) for cell in row])
response = HttpResponse(content_type='application/vnd.ms-excel')
wb.save(response)
</code></pre>
<p>What's happening here is that Django's HttpResponse is a file-like object. <code>Workbook.save()</code> can take a file-like object. (Internally, it uses <a href="https://docs.python.org/3/library/zipfile.html" rel="nofollow">zipfile</a>, which takes either a filename or a file-like object.)</p>
<p>If you're manipulating the file in memory, this is the simplest and probably most efficient solution. A streaming response doesn't really make sense since the data is not being created with a generator. Even if save_virtual_workbook works, the data it writes is generated as a block before it's readable.</p>
<p>The other option would be to create a NamedTemporaryFile (from <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow">tempfile</a> or Django's wrapper), pass that into <code>Workbook.save()</code>, then use <a href="https://docs.djangoproject.com/en/1.9/ref/request-response/#fileresponse-objects" rel="nofollow">FileResponse</a> to stream that from the filesystem instead of from memory.</p>
</div>
<span class="comment-copy">Have you tried to instantiate <code>output = StringIO.StringIO()</code>, then write to it via <code>openpyxl.writer.excel.save_workbook</code> method and pass <code>output.getvalue()</code> to <code>HttpResponse</code> constructor? Let me know if it helps - I'll add it as an answer.</span>
<span class="comment-copy">One more option is to use <code>openpyxl.writer.excel.save_virtual_workbook</code> method.</span>
<span class="comment-copy"><code>response = HttpResponse(save_virtual_workbook(wb), content_type='application/vnd.ms-excel')</code> Working Thanks mate :)) make this comment as answer I will mark it as corrected</span>
<span class="comment-copy">Thx! That wasn't immediately obvious in the documentation as it's only mentioned in the generated docs</span>
<span class="comment-copy">It's working , But when I downloaded it on Front End side(Created of Angular Js)  , It's giving me some unicode things (Dirty data). Do I need to add something in Angular code?</span>
<span class="comment-copy">What is the type of this stream value ?</span>
<span class="comment-copy">You can use StringIO, e.g.</span>
<span class="comment-copy">in Python 3 it must be <code>ByteIO</code> instead of <code>StringIO</code></span>
