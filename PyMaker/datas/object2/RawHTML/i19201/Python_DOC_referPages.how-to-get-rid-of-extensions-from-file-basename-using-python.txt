<div class="post-text" itemprop="text">
<p>I have got the complete path of files in a list like this:</p>
<pre><code>a = ['home/robert/Documents/Workspace/datafile.xlsx', 'home/robert/Documents/Workspace/datafile2.xls', 'home/robert/Documents/Workspace/datafile3.xlsx']
</code></pre>
<p>what I want is to get just the file NAMES without their extensions, like:</p>
<pre><code>b = ['datafile', 'datafile2', 'datafile3']
</code></pre>
<p>What I have tried is:</p>
<pre><code>xfn = re.compile(r'(\.xls)+')
for name in a:
    fp, fb = os.path.split(fp)
    ofn = xfn.sub('', name)
    b.append(ofn)
</code></pre>
<p>But it results in:</p>
<pre><code>b = ['datafilex', 'datafile2', 'datafile3x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>The regex you've used is wrong. <code>(\.xls)+</code> matches strings of the form <code>.xls</code>, <code>.xls.xls</code>, etc. This is why there is a remaining <code>x</code> in the <code>.xlsx</code> items. What you want is <code>\.xls.*</code>, i.e. a <code>.xls</code> followed by zero or more of any characters.</p></li>
<li><p>You don't really need to use regex. There are specialized methods in <a href="http://docs.python.org/3/library/os.path.html">os.path</a> that deals with this: <a href="https://docs.python.org/2/library/os.path.html#os.path.basename">basename</a> and <a href="https://docs.python.org/2/library/os.path.html#os.path.splitext">splitext</a>.</p>
<pre><code>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.basename('home/robert/Documents/Workspace/datafile.xlsx')
'datafile.xlsx'
&gt;&gt;&gt; os.path.splitext(os.path.basename('home/robert/Documents/Workspace/datafile.xlsx'))[0]
'datafile'
</code></pre>
<p>so, assuming you don't really care about the <code>.xls</code>/<code>.xlsx</code> suffix, your code can be as simple as:</p>
<pre><code>&gt;&gt;&gt; a = ['home/robert/Documents/Workspace/datafile.xlsx', 'home/robert/Documents/Workspace/datafile2.xls', 'home/robert/Documents/Workspace/datafile3.xlsx']
&gt;&gt;&gt; [os.path.splitext(os.path.basename(fn))[0] for fn in a]
['datafile', 'datafile2', 'datafile3']
</code></pre>
<p>(also note the <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a>.)</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Oneliner:</p>
<pre><code>&gt;&gt;&gt; filename = 'file.ext'
&gt;&gt;&gt; '.'.join(filename.split('.')[:-1]) if '.' in filename else filename
'file'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just use the <code>split</code> method?</p>
<pre><code>def get_filename(path):
    """ Gets a filename (without extension) from a provided path """

    filename = path.split('/')[-1].split('.')[0]
    return filename


&gt;&gt;&gt; path = '/home/robert/Documents/Workspace/datafile.xlsx'
&gt;&gt;&gt; filename = get_filename(path)
&gt;&gt;&gt; filename
'datafile'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a repeat of:
<a href="https://stackoverflow.com/questions/678236/how-to-get-the-filename-without-the-extension-from-a-path-in-python/51475388#51475388">How to get the filename without the extension from a path in Python?</a></p>
<p><a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer">https://docs.python.org/3/library/os.path.html</a></p>
<p>In python 3 pathlib "The pathlib module offers high-level path objects." so,</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path("/a/b/c.txt")
&gt;&gt;&gt; print(p.with_suffix(''))
\a\b\c
&gt;&gt;&gt; print(p.stem)
c
</code></pre>
</div>
<span class="comment-copy">use <code>str.replace()</code> for this. it is much, <b>much</b> faster</span>
<span class="comment-copy">Do you <i>have</i> to use regexes at all? <code>os.path.splitext</code> removes the extension...</span>
<span class="comment-copy">+1 for both correcting OP's incorrect approach and for providing a better solution to the problem</span>
<span class="comment-copy"><code>get_filename('/path/to/some/file.tar.bz2') == 'file'</code> - should be <code>file.tar</code></span>
