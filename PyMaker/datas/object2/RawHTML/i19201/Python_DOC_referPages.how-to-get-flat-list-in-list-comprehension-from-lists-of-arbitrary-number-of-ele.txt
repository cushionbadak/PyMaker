<div class="post-text" itemprop="text">
<p>I have something like this:</p>
<pre><code>[e for e in ([n for n in xrange(random.randrange(1, 5))] for x in xrange(10))]
</code></pre>
<p>It produces:</p>
<pre><code>[[0, 1, 2, 3], [0, 1, 2], [0], [0], [0, 1], [0], [0, 1], [0, 1, 2, 3], [0, 1, 2], [0, 1, 2]]
</code></pre>
<p>And I need the same but in flat structure.</p>
<p>For now I use something like:</p>
<pre><code>l = []
[l.extend(e) for e in ([n for n in xrange(random.randrange(1, 5))] for x in xrange(10))]
</code></pre>
<p>But is there something less obsucre to achieve this 'unpacking' of arbitrary length list inside comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way to flatten any iterable in a generic situation is <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; x = [e for e in ([n for n in xrange(random.randrange(1, 5))] 
...      for x in xrange(10))]
&gt;&gt;&gt; list(chain.from_iterable(x))
[0, 0, 0, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 0, 1, 0, 1, 0, 0, 1, 2]
</code></pre>
<p>This said, it's preferable to avoid the extra work in this case by just <a href="https://stackoverflow.com/a/15863005/722121">making it flat to begin with</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this list comprehension:</p>
<pre><code>In [8]: [y for x in xrange(10) for y in xrange(random.randrange(1, 5))]
Out[8]: [0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 1, 2, 3, 0, 0, 1, 0]
</code></pre>
<p>The above list comprehension is equivalent to this(but LC are much faster):</p>
<pre><code>In [9]: lis=[]

In [10]: for x in xrange(10):
   ....:     for y in xrange(random.randrange(1, 5)):
   ....:         lis.append(y)
   ....:         
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.flatten.html" rel="nofollow">numpy flatten()</a>:</p>
<pre><code>import numpy as np
l = [e for e in ([n for n in xrange(random.randrange(1, 5))] for x in xrange(10))]
a = np.asarray(l)
l = list(a.flatten(l))
print l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
l = [e for e in ([n for n in xrange(random.randrange(1, 5))] for x in xrange(10))]
result = list(itertools.chain(*l))
</code></pre>
<p>and then <code>print result</code> gives:</p>
<pre><code>[0,1,2,3,0,1,2,0...]
</code></pre>
<p>the use of the <code>*</code> in chain(*l) is inspired from this question <a href="https://stackoverflow.com/questions/716477/join-list-of-lists-in-python">join list of lists in python</a> . </p>
</div>
<span class="comment-copy">dupplicate of <a href="http://stackoverflow.com/questions/716477/join-list-of-lists-in-python" title="join list of lists in python">stackoverflow.com/questions/716477/join-list-of-lists-in-python</a></span>
<span class="comment-copy">+1 - The best option here is to make it the way you want, not flatten it after.</span>
<span class="comment-copy">+1 I didn't know whe could nest for loops into list comprehension</span>
<span class="comment-copy">xrange and random is just for illustration! My case requires that elems that pops from data srouce is arbitrary length lists</span>
<span class="comment-copy">@GillBates <code>for y in xrange(random.randrange(1, 5))</code> iterates over that arbitrary lenght list to return a flattened list.</span>
<span class="comment-copy">Iterates and generates it, in my case of course Im not generating data inside list comprehension</span>
<span class="comment-copy">oh, I mistook that, corrected.</span>
<span class="comment-copy">This is slower than <code>itertools.chain.from_iterable()</code> that was designed to do this more efficiently.</span>
<span class="comment-copy">ok, nice to know, I have never used from_iterable() yet.</span>
