<div class="post-text" itemprop="text">
<p>I'm trying to connect to a SQL Server 2012 database using SQLAlchemy (with pyodbc) on Python 3.3 (Windows 7-64-bit).  I am able to connect using straight pyodbc but have been unsuccessful at connecting using SQLAlchemy.  I have dsn file setup for the database access.</p>
<p>I successfully connect using straight pyodbc like this:</p>
<pre><code>con = pyodbc.connect('FILEDSN=c:\\users\\me\\mydbserver.dsn')
</code></pre>
<p>For sqlalchemy I have tried:</p>
<pre><code>import sqlalchemy as sa
engine = sa.create_engine('mssql+pyodbc://c/users/me/mydbserver.dsn/mydbname')
</code></pre>
<p>The <code>create_engine</code> method doesn't actually set up the connection and succeeds, but
iIf I try something that causes sqlalchemy to actually setup the connection (like <code>engine.table_names()</code>), it takes a while but then returns this error:</p>
<p><code>DBAPIError: (Error) ('08001', '[08001] [Microsoft][ODBC SQL Server Driver][DBNETLIB]SQL Server does not exist or access denied. (17) (SQLDriverConnect)') None None</code></p>
<p>I'm not sure where thing are going wrong are how to see what connection string is actually being passed to pyodbc by sqlalchemy.  I have successfully using the same sqlalchemy classes with SQLite and MySQL.</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>The file-based DSN string is being interpreted by SQLAlchemy as server name = <code>c</code>, database name = <code>users</code>.</p>
<p>I prefer connecting without using DSNs, it's one less configuration task to deal with during code migrations.</p>
<p>This syntax works using Windows Authentication:</p>
<pre><code>engine = sa.create_engine('mssql+pyodbc://server/database')
</code></pre>
<p>Or with SQL Authentication:</p>
<pre><code>engine = sa.create_engine('mssql+pyodbc://user:password@server/database')
</code></pre>
<p>SQLAlchemy has a thorough explanation of the different connection string options <a href="http://docs.sqlalchemy.org/en/latest/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have an update info about the connection to MSSQL Server without using DSNs and using Windows Authentication. In my example I have next options:
My local server name is "(localdb)\ProjectsV12". Local server name I see from database properties (I am using Windows 10 / Visual Studio 2015).
My db name is "MainTest1"</p>
<pre><code>engine = create_engine('mssql+pyodbc://(localdb)\ProjectsV12/MainTest1?driver=SQL+Server+Native+Client+11.0', echo=True)
</code></pre>
<p>It is needed to specify driver in connection.
You may find your client version in:</p>
<blockquote>
<p>control panel&gt;Systems and Security&gt;Administrative Tools.&gt;ODBC Data
  Sources&gt;System DSN tab&gt;Add</p>
</blockquote>
<p>Look on SQL Native client version from the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 you can use function <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus" rel="nofollow noreferrer"><code>quote_plus</code></a> from module <code>urllib.parse</code> to create parameters for connection:</p>
<pre><code>import urllib
params = urllib.parse.quote_plus("DRIVER={SQL Server Native Client 11.0};"
                                 "SERVER=dagger;"
                                 "DATABASE=test;"
                                 "UID=user;"
                                 "PWD=password")

engine = sa.create_engine("mssql+pyodbc:///?odbc_connect={}".format(params))
</code></pre>
<p>In order to use Windows Authentication, you want to use <i>Trusted_Connection</i> as parameter:</p>
<pre><code>params = urllib.parse.quote_plus("DRIVER={SQL Server Native Client 11.0};"
                                 "SERVER=dagger;"
                                 "DATABASE=test;"
                                 "Trusted_Connection=yes")
</code></pre>
<p>In Python 2 you should use function <a href="https://docs.python.org/2/library/urllib.html#urllib.quote_plus" rel="nofollow noreferrer"><code>quote_plus</code></a> from library <code>urllib</code> instead:</p>
<pre><code>params = urllib.quote_plus("DRIVER={SQL Server Native Client 11.0};"
                           "SERVER=dagger;"
                           "DATABASE=test;"
                           "UID=user;"
                           "PWD=password")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just want to add some latest information here:
If you are connecting using DSN connections:</p>
<pre><code>engine = create_engine("mssql+pyodbc://USERNAME:PASSWORD@SOME_DSN")
</code></pre>
<p>If you are connecting using Hostname connections:</p>
<pre><code>engine = create_engine("mssql+pyodbc://USERNAME:PASSWORD@HOST_IP:PORT/DATABASENAME?driver=SQL+Server+Native+Client+11.0")
</code></pre>
<p>For more details, please refer to the <a href="http://docs.sqlalchemy.org/en/latest/dialects/mssql.html" rel="nofollow noreferrer" title="Official Document">"Official Document"</a></p>
</div>
<span class="comment-copy">Thanks.  The SQL Server instance is the only one that is not on the machine I am working on so I wasn't sure if there was something funny going on here.  Just to expand a little on the stings you listed (since sql server instances are apparently named) - <code>sa.create_engine('mssql+pyodbc://[machinename]\\[servername]/[database]')</code></span>
<span class="comment-copy">They don't have to be named. It's actually easier to connect to and use a sql server instance configured as a "default instance". Named instances are required when you will be hosting multiple sql server instances on one server.</span>
<span class="comment-copy">That link is broken. I think this is a suitable replacement: <a href="http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls" rel="nofollow noreferrer">docs.sqlalchemy.org/en/latest/core/engines.html#database-urls</a></span>
<span class="comment-copy">This is the only one that worked for me. Many thanks!</span>
<span class="comment-copy">For python 3, we should use urllib.parse.quote_plus</span>
