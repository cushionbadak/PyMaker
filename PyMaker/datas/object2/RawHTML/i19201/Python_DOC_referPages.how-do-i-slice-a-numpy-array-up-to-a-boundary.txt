<div class="post-text" itemprop="text">
<p>I am using Numpy and Python in a project where a 2D map is represented by an <code>ndarray</code>:</p>
<pre><code>map = [[1,2,3,4,5],
       [2,3,4,2,3],
       [2,2,2,1,2],
       [3,2,1,2,3],
       [4,6,5,7,4]]
MAP_WIDTH = 5, MAP_HEIGHT = 5
</code></pre>
<p>An object has a tuple location:</p>
<pre><code>actor.location = (3,3)
</code></pre>
<p>and a view range:</p>
<pre><code>actor.range = 2
</code></pre>
<p>How do I write the function <code>actor.view_map(map)</code>, such that the map returns the area surrounding the actor's location up to a range. For example (using the above map),</p>
<pre><code>range = 1
location = (3, 2)
=&gt;
[[2,3,4],
 [3,4,2],
 [2,2,1]]
</code></pre>
<p>but if the actor's range extends too far I want the map filled with -1:</p>
<pre><code>range = 1
location = (1,1)
[[-1,-1,-1],
 [-1, 1, 2],
 [-1, 2, 3]]
</code></pre>
<p>the easiest case is a range of 0, which returns the current square:</p>
<pre><code>range = 0
location = (1, 2)
[[2]]
</code></pre>
<p>How do I slice my map up to a certain boundary?</p>
</div>
<div class="post-text" itemprop="text">
<p>So, thanks to Joe Kington I added a border around my map (filled with -1s).</p>
<p>Here is how I did it but this may not be very Pythonic since I've just started with the language / library:</p>
<pre><code>map = numpy.random.randint(10, size=(2 * World.MAP_WIDTH, 2 * World.MAP_HEIGHT))
map[0 : World.MAP_WIDTH / 4, :] = -1
map[7 * World.MAP_WIDTH / 4 : 2 * World.MAP_WIDTH, :] = -1
map[:, 0 : World.MAP_HEIGHT / 4] = -1
map[:, 7 * World.MAP_HEIGHT / 4 : 2 * World.MAP_WIDTH] = -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a little class <code>Box</code> to make using boxes easier --</p>
<pre><code>from __future__ import division
import numpy as np

class Box:
    """ B = Box( 2d numpy array A, radius=2 )
        B.box( j, k ) is a box A[ jk - 2 : jk + 2 ] clipped to the edges of A
        @askewchan, use np.pad (new in numpy 1.7):
            padA = np.pad( A, pad_width, mode="constant", edge=-1 )
            B = Box( padA, radius )
    """

    def __init__( self, A, radius ):
        self.A = np.asanyarray(A)
        self.radius = radius

    def box( self, j, k ):
        """ b.box( j, k ): square around j, k clipped to the edges of A """
        return self.A[ self.box_slice( j, k )]

    def box_slice( self, j, k ):
        """ square, jk-r : jk+r clipped to A.shape """
            # or np.clip ?
        r = self.radius
        return np.s_[ max( j - r, 0 ) : min( j + r + 1, self.A.shape[0] ),
                       max( k - r, 0 ) : min( k + r + 1, self.A.shape[1] )]

#...............................................................................
if __name__ == "__main__":
    A = np.arange(5*7).reshape((5,7))
    print "A:\n", A
    B = Box( A, radius=2 )
    print "B.box( 0, 0 ):\n", B.box( 0, 0 )
    print "B.box( 0, 1 ):\n", B.box( 0, 1 )
    print "B.box( 1, 2 ):\n", B.box( 1, 2 )
</code></pre>
</div>
<span class="comment-copy">How much will <code>actor.range</code> vary? If it's always going to be less than some (relatively small) value, there's an easy optimization (buffer the sides with -1 and write a simple wrapper class).</span>
<span class="comment-copy">It will always be less than half the map width / height - but if I add a boundary to the map at that level it would double (?) its size...</span>
<span class="comment-copy">Closer to quadruple (area == length squared), actually. It greatly speeds up the indexing if you can afford the memory usage, though.</span>
<span class="comment-copy">@JoeKington I will try it then since I'll only have one map in memory at one time. Thanks!</span>
<span class="comment-copy">You should post your result as an answer once you get something working! Also, just for more random advice: avoid the rabbit-hole of subclassing <code>numpy.ndarray</code> unless you really have to. A lot of people are initially tempted by that route, but it adds a lot of complexity.  If it were me, I'd just stick to a simple <code>floorplan.seen_by(actor)</code> method, but that may or may not make sense in the grand scheme of things, of course.</span>
<span class="comment-copy">You can add a border around your map using the function <code>np.pad</code>:  <code>np.pad(map, 1, mode='constant', constant_values=-1)</code></span>
<span class="comment-copy">Tip: avoid using <code>map</code> as the variable name. That's a built-in function in python. <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map</a></span>
<span class="comment-copy">I haven't had the chance to try it yet, but thank you for the reply!</span>
<span class="comment-copy">I like this, get an upvote from me :)</span>
