<div class="post-text" itemprop="text">
<p>I still learn python but this code seems beyond my level. what does it means?</p>
<pre><code> pairs = [s2 for s1 in qs.split('&amp;') for s2 in s1.split(';')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert any list comprehension to an equivalent explicit loop like this:</p>
<pre><code>pairs = []
for s1 in qs.split('&amp;'):
    for s2 in s1.split(';'):
        pairs.append(s2)
</code></pre>
<p>The rule is to take all of the <code>for</code> and <code>if</code> clauses, nest them in the order they appear, and then <code>append(foo)</code> for whatever <code>foo</code> comes before the first clause.</p>
<p>The tutorial section on <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">List Comprehension</a> (and the subsection on Nested List Comprehensions) explains this… but it doesn't give you the simple rule for converting any comprehension into a nested block statement, which (in my opinion) makes it much easier to understand all but the trivial cases.</p>
<p>It's also worth noting that <a href="http://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl"><code>urllib.parse.parse_qsl</code></a> (or <code>urlparse.parse_qsl</code> in 2.x) is a better way to parse query strings. Besides the fact that it doesn't involve a hard-to-read nested list comprehension, it also properly handles all kinds of things (like quoting) that you wouldn't think about in advance, and will end up debugging for one of your users who doesn't know how to submit useful bug reports.</p>
</div>
<span class="comment-copy">Have you seen list comprehensions before? And if so, have you tried reading <a href="http://stackoverflow.com/questions/1198777/double-iteration-in-list-comprehension">this question</a>?</span>
<span class="comment-copy">You're splitting the strings in <code>s1</code> with <code>;</code> as the delimiter, and on every item of that split list, you're splitting based on <code>&amp;</code> as the delimiter, and you're putting the result of the second split into a list <code>pairs</code></span>
<span class="comment-copy">you should look into "list comprehension" for information about the [a for a in whatever]. For more comment on your snippet you should provide detail on the qs object. Yet assuming it is a string, the for-in iterations operate on a list of strings which are spearated by (&amp; and ;)</span>
<span class="comment-copy">@Tuxdude: You've got it backward. You're splitting the strings in <code>qs</code> with <code>&amp;</code> as the delimiter, and then splitting each of the results with <code>;</code> as the delimiter.</span>
<span class="comment-copy">@abarnert - oops! yes you're right, my bad!.</span>
<span class="comment-copy">+1 for the point on nesting.  For an embarrassingly long time, my brain always tried to read nested listcomps backwards, because I knew the append equivalent part was the "deepest" part, and that came first, so I thought you wrote it "upwards" from the deepest.  Then one day on SO someone said "you write the loop part of list comprehensions in exactly the same order you'd write the loops, what's so hard?" and gave the example you just did.  Ever since then, all was clear..</span>
<span class="comment-copy">Thanks very much for all help. Now I understand it. The most confuse part is first s2. The first for is out loop and second for is inner loop. So the first s2 means take output of s2 which is inner one. I get it.</span>
<span class="comment-copy">@DSM: Yeah, I had the same problem. If you only deal with non-nested comprehensions, you can read them from inside out. But once they're nested, you have to learn that the <i>actual</i> rule is outside in, except that the first part which goes on the very inside. (And then, when dealing with genexps, you have to learn that the outermost iterator is actually lifted outside the whole expression, to make it even more fun…)</span>
