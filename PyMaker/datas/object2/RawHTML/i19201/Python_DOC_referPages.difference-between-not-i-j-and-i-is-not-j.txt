<div class="post-text" itemprop="text">
<p>My <a href="https://english.stackexchange.com/questions/19967/what-does-google-fu-mean">Google-fu</a> has failed me.</p>
<p>In Python, are the following two tests for equality equivalent?</p>
<pre><code>n = 5
# Test one.
if n == 5:
    print 'Yay!'

# Test two.
if n is 5:
    print 'Yay!'
</code></pre>
<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>
<p>Okay, so this kind of answers my question:</p>
<pre><code>L = []
L.append(1)
if L == [1]:
    print 'Yay!'
# Holds true, but...

if L is [1]:
    print 'Yay!'
# Doesn't.
</code></pre>
<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True
&gt;&gt;&gt; b = a[:] # Make a new copy of list `a` via the slice operator, and assign it to variable `b`
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</code></pre>
<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>
<pre><code>&gt;&gt;&gt; 1000 is 10**3
False
&gt;&gt;&gt; 1000 == 10**3
True
</code></pre>
<p>The same holds true for string literals:</p>
<pre><code>&gt;&gt;&gt; "a" is "a"
True
&gt;&gt;&gt; "aa" is "a" * 2
True
&gt;&gt;&gt; x = "a"
&gt;&gt;&gt; "aa" is x * 2
False
&gt;&gt;&gt; "aa" is intern(x*2)
True
</code></pre>
<p>Please see <a href="https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none">this question</a> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a simple rule of thumb to tell you when to use <code>==</code> or <code>is</code>.</p>
<ul>
<li><code>==</code> is for <em>value equality</em>. Use it when you would like to know if two objects have the same value.</li>
<li><code>is</code> is for <em>reference equality</em>. Use it when you would like to know if two references refer to the same object.</li>
</ul>
<p>In general, when you are comparing something to a simple type, you are usually checking for <em>value equality</em>, so you should use <code>==</code>. For example, the intention of your example is probably to check whether x has a value equal to 2 (<code>==</code>), not whether <code>x</code> is literally referring to the same object as 2.</p>
<hr/>
<p>Something else to note: because of the way the CPython reference implementation works, you'll get unexpected and inconsistent results if you mistakenly use <code>is</code> to compare for reference equality on integers:</p>
<pre><code>&gt;&gt;&gt; a = 500
&gt;&gt;&gt; b = 500
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</code></pre>
<p>That's pretty much what we expected: <code>a</code> and <code>b</code> have the same value, but are distinct entities. But what about this?</p>
<pre><code>&gt;&gt;&gt; c = 200
&gt;&gt;&gt; d = 200
&gt;&gt;&gt; c == d
True
&gt;&gt;&gt; c is d
True
</code></pre>
<p>This is inconsistent with the earlier result. What's going on here? It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons. Here's an example demonstrating this:</p>
<pre><code>&gt;&gt;&gt; for i in range(250, 260): a = i; print "%i: %s" % (i, a is int(str(i)));
... 
250: True
251: True
252: True
253: True
254: True
255: True
256: True
257: False
258: False
259: False
</code></pre>
<p>This is another obvious reason not to use <code>is</code>: the behavior is left up to implementations when you're erroneously using it for value equality.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>==</code> determines if the values are equal, while <code>is</code> determines if they are the exact same object and equal. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>Is there a difference between <code>==</code> and <code>is</code> in Python?</h2>
</blockquote>
<p>Yes, they have a very important difference.</p>
<p><strong><code>==</code></strong>: check for equality - the semantics are that equivalent objects (that aren't necessarily the same object) will test as equal. As the <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="noreferrer">documentation says</a>:</p>
<blockquote>
<p>The operators &lt;, &gt;, ==, &gt;=, &lt;=, and != compare the values of two objects.</p>
</blockquote>
<p><strong><code>is</code></strong>: check for identity - the semantics are that the object (as held in memory) <em>is</em> the object. Again, the <a href="https://docs.python.org/3/reference/expressions.html#is-not" rel="noreferrer">documentation says</a>:</p>
<blockquote>
<p>The operators <code>is</code> and <code>is not</code> test for object identity: <code>x is y</code> is true
  if and only if <code>x</code> and <code>y</code> are the same object. Object identity is
  determined using the <code>id()</code> function. <code>x is not y</code> yields the inverse
  truth value.</p>
</blockquote>
<p>Thus, the check for identity is the same as checking for the equality of the IDs of the objects. That is,</p>
<pre><code>a is b
</code></pre>
<p>is the same as:</p>
<pre><code>id(a) == id(b)
</code></pre>
<p>where <code>id</code> is the builtin function that returns an integer that "is guaranteed to be unique among simultaneously existing objects" (see <code>help(id)</code>) and where <code>a</code> and <code>b</code> are any arbitrary objects.</p>
<h2>Other Usage Directions</h2>
<p>You should use these comparisons for their semantics. Use <code>is</code> to check identity and <code>==</code> to check equality.</p>
<p>PEP 8, the official Python style guide for the standard library also mentions <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="noreferrer">two use-cases for <code>is</code></a>:</p>
<blockquote>
<p>Comparisons to singletons like <code>None</code> should always be done with <code>is</code> or
  <code>is not</code>, never the equality operators.</p>
<p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> --
  e.g. when testing whether a variable or argument that defaults to <code>None</code>
  was set to some other value. The other value might have a type (such
  as a container) that could be false in a boolean context!</p>
</blockquote>
<h2>Inferring equality from identity</h2>
<p>If <code>is</code> is true, equality can <em>usually</em> be inferred - logically, if an object is itself, then it should test as equivalent to itself. </p>
<p>In most cases this logic is true, but it relies on the implementation of the <code>__eq__</code> special method. As the <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="noreferrer">docs</a> say, </p>
<blockquote>
<p>The default behavior for equality comparison (<code>==</code> and <code>!=</code>) is based on
  the identity of the objects. Hence, equality comparison of instances
  with the same identity results in equality, and equality comparison of
  instances with different identities results in inequality. A
  motivation for this default behavior is the desire that all objects
  should be reflexive (i.e. x is y implies x == y).</p>
</blockquote>
<p>and in the interests of consistency, recommends:</p>
<blockquote>
<p>Equality comparison should be reflexive. In other words, identical
  objects should compare equal:</p>
<p><code>x is y</code> implies <code>x == y</code></p>
</blockquote>
<p>We can see that this is the default behavior for custom objects:</p>
<pre><code>&gt;&gt;&gt; class Object(object): pass
&gt;&gt;&gt; obj = Object()
&gt;&gt;&gt; obj2 = Object()
&gt;&gt;&gt; obj == obj, obj is obj
(True, True)
&gt;&gt;&gt; obj == obj2, obj is obj2
(False, False)
</code></pre>
<p>The contrapositive is also usually true - if somethings test as not equal, you can usually infer that they are not the same object. </p>
<p>Since tests for equality can be customized, this inference does not always hold true for all types.</p>
<h3>An exception</h3>
<p>A notable exception is <code>nan</code> - it always tests as not equal to itself:</p>
<pre><code>&gt;&gt;&gt; nan = float('nan')
&gt;&gt;&gt; nan
nan
&gt;&gt;&gt; nan is nan
True
&gt;&gt;&gt; nan == nan           # !!!!!
False
</code></pre>
<p>Checking for identity can be much a much quicker check than checking for equality (which might require recursively checking members). </p>
<p>But it cannot be substituted for equality where you may find more than one object as equivalent.</p>
<p>Note that comparing equality of lists and tuples will assume that identity of objects are equal (because this is a fast check). This can create contradictions if the logic is inconsistent - as it is for <code>nan</code>:</p>
<pre><code>&gt;&gt;&gt; [nan] == [nan]
True
&gt;&gt;&gt; (nan,) == (nan,)
True
</code></pre>
<h2>A Cautionary Tale:</h2>
<p>The question is attempting to use <code>is</code> to compare integers. You shouldn't assume that an instance of an integer is the same instance as one obtained by another reference. This story explains why.</p>
<p>A commenter had code that relied on the fact that small integers (-5 to 256 inclusive) are singletons in Python, instead of checking for equality.</p>
<blockquote>
<p>Wow, this can lead to some insidious bugs. I had some code that checked if a is b, which worked as I wanted because a and b are typically small numbers. The bug only happened today, after six months in production, because a and b were finally large enough to not be cached. – gwg</p>
</blockquote>
<p>It worked in development. It may have passed some unittests. </p>
<p>And it worked in production - until the code checked for an integer larger than 256, at which point it failed in production. </p>
<p>This is a production failure that could have been caught in code review or possibly with a style-checker.</p>
<p>Let me emphasize: <em><a href="https://stackoverflow.com/a/28864111/541136">do not use <code>is</code> to compare integers.</a></em></p>
</div>
<div class="post-text" itemprop="text">
<h1>What's the difference between <code>is</code> and <code>==</code>?</h1>
<p><code>==</code> and <code>is</code> are different comparison! As others already said:</p>
<ul>
<li><code>==</code> compares the values of the objects.</li>
<li><code>is</code> compares the references of the objects.</li>
</ul>
<p>In Python names refer to objects, for example in this case <code>value1</code> and <code>value2</code> refer to an <code>int</code> instance storing the value <code>1000</code>:</p>
<pre><code>value1 = 1000
value2 = value1
</code></pre>
<p><a href="https://i.stack.imgur.com/WLzXy.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/WLzXy.png"/></a></p>
<p>Because <code>value2</code> refers to the same object <code>is</code> and <code>==</code> will give <code>True</code>:</p>
<pre><code>&gt;&gt;&gt; value1 == value2
True
&gt;&gt;&gt; value1 is value2
True
</code></pre>
<p>In the following example the names <code>value1</code> and <code>value2</code> refer to different <code>int</code> instances, even if both store the same integer:</p>
<pre><code>&gt;&gt;&gt; value1 = 1000
&gt;&gt;&gt; value2 = 1000
</code></pre>
<p><a href="https://i.stack.imgur.com/IJgBI.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/IJgBI.png"/></a></p>
<p>Because the same value (integer) is stored <code>==</code> will be <code>True</code>, that's why it's often called "value comparison". However <code>is</code> will return <code>False</code> because these are different objects:</p>
<pre><code>&gt;&gt;&gt; value1 == value2
True
&gt;&gt;&gt; value1 is value2
False
</code></pre>
<h2>When to use which?</h2>
<p>Generally <code>is</code> is a much faster comparison. That's why CPython caches (or maybe <em>reuses</em> would be the better term) certain objects like small integers, some strings, etc. But this should be treated as <em>implementation detail</em> that could (even if unlikely) change at any point without warning.</p>
<p>You should <strong>only use <code>is</code></strong> if you:</p>
<ul>
<li>want to check if two objects are really the same object (not just the same "value"). One example can be if <em>you</em> use a singleton object as constant.</li>
<li><p>want to compare a value to a <a href="https://docs.python.org/library/constants.html" rel="noreferrer">Python <em>constant</em></a>. The constants in Python are:</p>
<ul>
<li><code>None</code></li>
<li><code>True</code><sup>1</sup></li>
<li><code>False</code><sup>1</sup></li>
<li><code>NotImplemented</code></li>
<li><code>Ellipsis</code></li>
<li><code>__debug__</code></li>
<li>classes (for example <code>int is int</code> or <code>int is float</code>)</li>
<li>there could be additional constants in built-in modules or 3rd party modules. For example <a href="https://docs.scipy.org/doc/numpy/reference/maskedarray.baseclass.html#numpy.ma.masked" rel="noreferrer"><code>np.ma.masked</code></a> from the NumPy module)</li>
</ul></li>
</ul>
<p>In <strong>every other case you should use <code>==</code></strong> to check for equality.</p>
<h2>Can I customize the behavior?</h2>
<p>There is some aspect to <code>==</code> that hasn't been mentioned already in the other answers: It's part of <a href="https://docs.python.org/3/reference/datamodel.html#data-model" rel="noreferrer">Pythons "Data model"</a>. That means its behavior can be customized using the <a href="https://docs.python.org/reference/datamodel.html#object.__eq__" rel="noreferrer"><code>__eq__</code></a> method. For example:</p>
<pre><code>class MyClass(object):
    def __init__(self, val):
        self._value = val

    def __eq__(self, other):
        print('__eq__ method called')
        try:
            return self._value == other._value
        except AttributeError:
            raise TypeError('Cannot compare {0} to objects of type {1}'
                            .format(type(self), type(other)))
</code></pre>
<p>This is just an artificial example to illustrate that the method is really called:</p>
<pre><code>&gt;&gt;&gt; MyClass(10) == MyClass(10)
__eq__ method called
True
</code></pre>
<p>Note that by default (if no other implementation of <code>__eq__</code> can be found in the class or the superclasses) <code>__eq__</code> uses <code>is</code>:</p>
<pre><code>class AClass(object):
    def __init__(self, value):
        self._value = value

&gt;&gt;&gt; a = AClass(10)
&gt;&gt;&gt; b = AClass(10)
&gt;&gt;&gt; a == b
False
&gt;&gt;&gt; a == a
</code></pre>
<p>So it's actually important to implement <code>__eq__</code> if you want "more" than just reference-comparison for custom classes!</p>
<p>On the other hand you cannot customize <code>is</code> checks. It will always compare <em>just</em> if you have the same reference.</p>
<h2>Will these comparisons always return a boolean?</h2>
<p>Because <code>__eq__</code> can be re-implemented or overridden, it's not limited to return <code>True</code> or <code>False</code>. It <em>could</em> return anything (but in most cases it should return a boolean!). </p>
<p>For example with NumPy arrays the <code>==</code> will return an array:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.arange(10) == 2
array([False, False,  True, False, False, False, False, False, False, False], dtype=bool)
</code></pre>
<p>But <code>is</code> checks will always return <code>True</code> or <code>False</code>!</p>
<hr/>
<p><sup>1</sup> As Aaron Hall mentioned in the comments: </p>
<p>Generally you shouldn't do any <code>is True</code> or <code>is False</code> checks because one normally uses these "checks" in a context that implicitly converts the <em>condition</em> to a boolean (for example in an <code>if</code> statement). So doing the <code>is True</code> comparison <strong>and</strong> the implicit boolean cast is doing more work than just doing the boolean cast - and you limit yourself to booleans (which isn't considered pythonic).</p>
<p>Like PEP8 mentions:</p>
<blockquote>
<p>Don't compare boolean values to <code>True</code> or <code>False</code> using <code>==</code>.</p>
<pre><code>Yes:   if greeting:
No:    if greeting == True:
Worse: if greeting is True:
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>They are <b>completely different</b>.  <code>is</code> checks for object identity, while <code>==</code> checks for equality (a notion that depends on the two operands' types).</p>
<p>It is only a lucky coincidence that "<code>is</code>" seems to work correctly with small integers (e.g. 5 == 4+1).  That is because <a href="https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong" rel="nofollow noreferrer">CPython optimizes the storage of integers in the range (-5 to 256) by making them singletons</a>. This behavior is totally implementation-dependent and not guaranteed to be preserved under all manner of minor transformative operations.</p>
<p>For example, Python 3.5 also makes short strings singletons, but slicing them disrupts this behavior:</p>
<pre><code>&gt;&gt;&gt; "foo" + "bar" == "foobar"
True
&gt;&gt;&gt; "foo" + "bar" is "foobar"
True
&gt;&gt;&gt; "foo"[:] + "bar" == "foobar"
True
&gt;&gt;&gt; "foo"[:] + "bar" is "foobar"
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/library/stdtypes.html#comparisons" rel="noreferrer">https://docs.python.org/library/stdtypes.html#comparisons</a></p>
<p><code>is</code> tests for identity
<code>==</code> tests for equality</p>
<p>Each (small) integer value is mapped to a single value, so every 3 is identical and equal. This is an implementation detail, not part of the language spec though</p>
</div>
<div class="post-text" itemprop="text">
<p>Your answer is correct. The <code>is</code> operator compares the identity of two objects.  The <code>==</code> operator compares the values of two objects.</p>
<p>An object's identity never changes once it has been created; you may think of it as the object's address in memory.</p>
<p>You can control comparison behaviour of object values by defining a <code>__cmp__</code> method or a <a href="https://docs.python.org/reference/datamodel.html#basic-customization" rel="nofollow noreferrer">rich comparison</a> method like <code>__eq__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at Stack Overflow question <em><a href="https://stackoverflow.com/questions/306313">Python's “is” operator behaves unexpectedly with integers</a></em>.</p>
<p>What it mostly boils down to is that "<code>is</code>" checks to see if they are the same object, not just equal to each other (the numbers below 256 are a special case).</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>==</code> operator compares the values of both the operands and checks for value equality. Whereas <code>is</code> operator checks whether both the operands refer to the same object or not.</p>
<pre><code>a = [1,2,3,4]
b = a
print(a == b) # true
print(a is b) # true
</code></pre>
<p>But if we do</p>
<pre><code>b = a[:] # b now references a copy of a
print(a == b) # true
print(a is b) # false
print(a is not b) # true
</code></pre>
<p>Basically, <code>is</code> can be thought of as shorthand for <code>id(a) == id(b)</code>. However, Beyond this, there are quirks of the run-time environment that further complicate things. Short strings and small integers will return <strong><code>True</code></strong> when compared with <code>is</code>, due to the Python machine attempting to use less memory for identical objects.</p>
<pre><code>a = 'python'
b = 'python'

print(a == b) # true
print(a is b) # true
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As John Feminella said, most of the time you will use == and != because your objective is to  compare values. I'd just like to categorise what you would do the rest of the time:</p>
<p>There is one and only one instance of NoneType i.e. None is a singleton. Consequently <code>foo == None</code> and <code>foo is None</code> mean the same. However the <code>is</code> test is faster and the Pythonic convention is to use <code>foo is None</code>.</p>
<p>If you are doing some introspection or mucking about with garbage collection or checking whether your custom-built string interning gadget is working or suchlike, then you probably have a use-case for <code>foo</code> is <code>bar</code>.</p>
<p>True and False are also (now) singletons, but there is no use-case for <code>foo == True</code> and no use case for <code>foo is True</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Most of them already answered to the point. Just as an additional note (based on my understanding and experimenting but not from a documented source), the statement </p>
<blockquote>
<p>== if the objects referred to by the variables are equal</p>
</blockquote>
<p>from above answers should be read as </p>
<blockquote>
<p>== if the objects referred to by the variables are equal and objects belonging to the same type/class</p>
</blockquote>
<p>. I arrived at this conclusion based on the below test:</p>
<pre><code>list1 = [1,2,3,4]
tuple1 = (1,2,3,4)

print(list1)
print(tuple1)
print(id(list1))
print(id(tuple1))

print(list1 == tuple1)
print(list1 is tuple1)
</code></pre>
<p>Here the contents of the list and tuple are same but the type/class are different. </p>
</div>
<div class="post-text" itemprop="text">
<p>In a nutshell, <code>is</code> checks whether two references point to the same object or not.<code>==</code> checks whether two objects have the same value or not.</p>
<pre><code>a=[1,2,3]
b=a        #a and b point to the same object
c=list(a)  #c points to different object 

if a==b:
    print('#')   #output:#
if a is b:
    print('##')  #output:## 
if a==c:
    print('###') #output:## 
if a is c:
    print('####') #no output as c and a point to different object 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually I wanted to add this as a comment but could not beautify it easily hence adding as an answer, please do not consider this as an answer. </p>
<p>This is what I did to understand --</p>
<blockquote>
<p>execute following one by one and understand output on every step</p>
</blockquote>
<pre><code>a = [1,2]
b = [1,2,3]
b.pop()
id(a)
id(b)
a is b
a == b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the other people in this post answer the question in details, I would <strong>emphasize</strong> mainly the comparison between <code>is</code> and <code>==</code> <strong>for strings</strong> which can give different results and I would urge programmers to carefully use them.</p>
<p>For string comparison, make sure to use <code>==</code> instead of <code>is</code>:</p>
<pre><code>str = 'hello'
if (str is 'hello'):
    print ('str is hello')
if (str == 'hello'):
    print ('str == hello')
</code></pre>
<p>Out:</p>
<pre><code>str is hello
str == hello
</code></pre>
<p><strong>But</strong> in the below example <code>==</code> and <code>is</code> will get different results:</p>
<pre><code>str = 'hello sam'
    if (str is 'hello sam'):
        print ('str is hello sam')
    if (str == 'hello sam'):
        print ('str == hello sam')
</code></pre>
<p>Out:</p>
<pre><code>str == hello sam
</code></pre>
<p><strong>Conclusion:</strong></p>
<p>Use <code>is</code> carefully to compare between strings </p>
</div>
<div class="post-text" itemprop="text">
<p>Python difference between is and equals(==)</p>
<blockquote>
<p>The is operator may seem like the same as the equality operator but
  they are not same.</p>
<p>The is checks if both the variables point to the same object whereas
  the == sign checks if the values for the two variables are the same.</p>
<p>So if the is operator returns True then the equality is definitely
  True, but the opposite may or may not be True.</p>
</blockquote>
<p>Here is an example to demonstrate the similarity and the difference.</p>
<pre><code>&gt;&gt;&gt; a = b = [1,2,3]
&gt;&gt;&gt; c = [1,2,3]
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a == c
True
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; a is c
False
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [1,2]
&gt;&gt;&gt; a == b
False
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; del a[2]
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</code></pre>
<blockquote>
<pre><code>Tip: Avoid using is operator for immutable types such as strings and numbers, the result is unpredictable.
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>"==" compares values</p>
<p>"is" compares underlying objects</p>
<pre><code># this pgm is to show you the diff b/n == and is

# a==b and a is b

# == compares values
# is compares references i.e compares wether two variables refer to same object(memory)

a=10
b=10
print(a==b) # returns True as a,b have same value 10 
print(a is b)
# returns True,
# we usually falsey assume that a =10 a new object . b=10 a new obj created
# but actually when b=10 ,nothing but b is pointed to 10 until value of a or b is changed from 10 

a=[1]
b=[1]
print(a==b)
#returns True as a,b have a list element 1
print(a is b)
#returns False because here two different objs are created when initiated with lists
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>o1 is o2</strong> =&gt; compares if o1 and o2 both points to same physical location in memory (in other words if they are same object)</p>
<p><strong>o1 == o2</strong> =&gt; here python call the o1's __cmp __(o2) method, which ideally should compares the value and return True or False. (In other words it compares value)</p>
<p><strong><em>For JAVA people:</em></strong> </p>
<ul>
<li><p>In Java, to determine whether two string variables reference the same
physical memory location by using <strong>str1 == str2</strong>. (called object
identity, and it is written in <strong>Python as str1 is str2</strong>). </p></li>
<li><p>To compare string values in Java, <strong>usestr1.equals(str2)</strong>; in <strong>Python,
use str1 == str2</strong>.</p></li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>class A():
    ...:     def __init__(self,a):
    ...:         self.a = a
    ...:     def __repr__(self):
    ...:         return str(self.a)
    ...:     def __cmp__(self, value):
    ...:         print self.a
    ...:         print value.a
    ...:         return cmp(self.a, value.a)
</code></pre>
<p><strong>Python Shell output:</strong> </p>
<blockquote>
<p>o = A(2)
  o1 = o</p>
<p>o == o1 
  2 
  2 
  True</p>
<p>o is o1
  True</p>
<p>o1 = A(2)</p>
<p>o is o1
  False</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>While all these answers that rely on the implementation of objection pointer comparison vs value comparison are likely correct, there is a deeper syntactical reason for using <code>is</code> to determine if a variable value is <code>None</code> (in boolean logic often represented as <code>NULL</code>).  </p>
<p>In relational database and other logic systems, <code>NULL</code> implies that the actual value is "unknown".  Thus the logical expression <code>xx == NULL</code> must always evaluate to <code>NULL</code> itself, as it is impossible to ever know if <code>xx</code>, whatever value it may have, is the same as the unknown value.  In programming languages that adhere more strictly to the rules of boolean logic, <code>xx == NULL</code> (or Pythonically <code>xx == None</code>) correctly evaluates to <code>NULL</code>, and alternative means must be provided to determine if a variable value is <code>NULL</code>.  Python is an outlier in this regard, due to the unitary nature of the object reference to <code>None</code>.  But for clarity and logical correctness, using the Python <code>is</code> comparison operator seems to me much sounder practice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there is difference between both.  </p>
<ul>
<li><strong>'=='</strong> : compares object by value.  </li>
<li><p><strong>'in'</strong> : compares object by reference.</p>
<pre><code>a = [1,2,3]  
b = a # both pointing to same object (memory location)

a == b:  
True  
a in b:   
True  #because a and b are pointing to same object
</code></pre></li>
</ul>
<p>Now let's consider this case:</p>
<pre><code>a = [1,2,3]
b = list(a)  # creating copy of object a

a == b:  
True  # as values are same
a in b:   
False  # because they are pointing to different object.
</code></pre>
</div>
<span class="comment-copy">I found that: <code>echo 'import sys;tt=sys.argv[1];print(tt is "foo", tt == "foo", id(tt)==id("foo"))'| python3 - foo</code> output: <code>False True False</code>.</span>
<span class="comment-copy">You lost me with the <code>b = a[:]</code> slice operator list copy part, so I've edited your answer to have a comment there. Looks like I just reached the threshold to not have to have my edits reviewed before they apply, so hopefully that's cool with you. Regardless, here's a useful reference for how to copy lists that I came across and had to reference to figure out what you were doing: <a href="https://stackoverflow.com/a/2612815/4561887">stackoverflow.com/a/2612815/4561887</a></span>
<span class="comment-copy">With regards to the first example of <code>a=500</code> and <code>b=500</code>, just wanted to point out that if you set <code>a</code> and <code>b</code> to an interger between [-5, 256], <code>a is b</code> actually returns <code>True</code>. More information here: <a href="https://stackoverflow.com/q/306313/7571052">stackoverflow.com/q/306313/7571052</a></span>
<span class="comment-copy">@AsheKetchum, yes, note that I wrote "It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons."</span>
<span class="comment-copy">Just wanted to link the other question, no harm intended :)</span>
<span class="comment-copy">This is to the point explanation</span>
<span class="comment-copy">I'm going to have to disagree on your assertion to compare "constants" with <code>is</code> - names that point to booleans should be checked with a boolean context - like <code>if __debug__:</code> or <code>if not __debug__:</code>. You should never do <code>if __debug__ is True:</code> or <code>if __debug__ == True:</code> - further, a constant is merely a constant semantic value, not a singleton, therefore checking with <code>is</code> in that case is not semantically correct. I challenge you to find a source to support your assertions - I do not think you will find one.</span>
<span class="comment-copy">@AaronHall What makes you think that the constants aren't singletons? Note that only <code>None</code>, <code>True</code>, <code>False</code> and <code>__debug__</code> are what you would call "constant semantic value", because they cannot be reassigned. But all of them are singletons.</span>
<span class="comment-copy">Read <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP 8</a> - Ctrl-F and look for the word, "worse". - If you're unittesting, you'd use <a href="https://docs.python.org/library/unittest.html#unittest.TestCase.assertTrue" rel="nofollow noreferrer">self.assertTrue</a></span>
<span class="comment-copy">@AaronHall In some circumstances you really need the <code>is True</code> or <code>if False</code> check (but yeah, these are pretty rare - but if you do them you <i>can</i> do them using <code>is</code>). That's why even CPython uses them sometimes (for example <a href="https://github.com/python/cpython/blob/v3.6.4/Lib/test/test_bool.py#L113-L115" rel="nofollow noreferrer">here</a> or <a href="https://github.com/python/cpython/blob/v3.6.4/Lib/test/test_compare.py#L51-L53" rel="nofollow noreferrer">here</a>)</span>
<span class="comment-copy">why does "is"" work like that for strings with spaces?</span>
<span class="comment-copy">According to the previous answers: It seems python performs caching on small integer and strings which means that it utilizes the same object reference for 'hello' string occurrences in this code snapshot, while it did not preform caching for 'hello sam' as it is relatively larger than 'hello' (i.e. it manages different references of 'hello sam' string, and that's why the 'is' operator returns false in later example) Please correct me if I am wrong</span>
<span class="comment-copy">Please only use block quotes for text you quoted from another source, at which point you must include attribution (see <a href="https://stackoverflow.com/help/referencing">stackoverflow.com/help/referencing</a>). If this is your own text, please remove the block quotes.</span>
<span class="comment-copy"><code>r = None</code>, then test <code>r == None</code> and <code>r is None</code>. Both return <code>True</code>, meaning that <code>None</code> is a reference to an object whose value is <code>None</code>.</span>
