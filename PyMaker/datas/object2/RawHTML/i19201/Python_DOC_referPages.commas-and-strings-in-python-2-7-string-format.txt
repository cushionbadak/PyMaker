<div class="post-text" itemprop="text">
<p>I'm confused by the following Python 2.7 and Python 3.3 behavior in String formatting. This is a nitpicky detail question about how the comma operator interacts with string presentation types.</p>
<pre><code>&gt;&gt;&gt; format(10000, ",d")
'10,000'
&gt;&gt;&gt; format(10000, ",")
'10,000'
&gt;&gt;&gt; format(10000, ",s")
ValueError: Cannot specify ',' with 's'.

&gt;&gt;&gt; "{:,}".format(10000)
'10,000'
&gt;&gt;&gt; "{:,s}".format(10000)
ValueError: Cannot specify ',' with 's'.
</code></pre>
<p>What's confusing me is why the <code>,</code> variant works, the one with no explicit string presentation type. The <a href="http://docs.python.org/2/library/string.html#formatspec" rel="noreferrer">docs</a> say that if you omit the type, it's "The same as <code>s</code>." And yet here it is acting differently from <code>s</code>.</p>
<p>I'd dismiss this as just a wrinkle / corner case, but this syntax is used as an example in the docs: <code>'{:,}'.format(1234567890)</code>. Are there other "special" behaviors hidden in Python when the string presentation type is omitted? Maybe instead of "same as s" what the code is really doing is inspecting the type of the thing being formatted?</p>
</div>
<div class="post-text" itemprop="text">
<p>In your example, you aren't interacting with string presentation types; you are interacting with <code>int</code> presentation types.  Objects can supply their own formatting behavior by defining a <code>__format__</code> method.  As noted in PEP 3101:</p>
<blockquote>
<pre><code>The new, global built-in function 'format' simply calls this special
method, similar to how len() and str() simply call their respective
special methods:

    def format(value, format_spec):
        return value.__format__(format_spec)

Several built-in types, including 'str', 'int', 'float', and 'object'
define __format__ methods.  This means that if you derive from any of
those types, your class will know how to format itself.
</code></pre>
</blockquote>
<p>Presentation type <code>s</code> is understandably not implemented by <code>int</code> objects (see the lists of documented presentation types per object type <a href="http://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow">here</a>). The exception message is somewhat misleading. Without the <code>,</code>, the problem is clearer:</p>
<pre><code>&gt;&gt;&gt; format(10000, "s")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: Unknown format code 's' for object of type 'int'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Refer <a href="http://www.python.org/dev/peps/pep-0378/" rel="nofollow">PEP 378 -- Format Specifier for Thousands Separator </a></p>
<blockquote>
<p>The ',' option is defined as shown above for types 'd', 'e', 'f', 'g',
  'E', 'G', '%', 'F' and ''. To allow future extensions, it is undefined
  for other types: binary, octal, hex, character, etc</p>
</blockquote>
</div>
<span class="comment-copy">Ah, the scales have fallen from my eyes! Every type in Python (potentially) defines its own presentation type language via <code>__format__(self, format_spec)</code>. So potentially <code>'d'</code> or <code>''</code> could mean anything at all for some particular type, although there's convention.  The bit in the docs about no type being "same as <code>s</code>" is for the string presentation types. Just a bit further down the docs, for integer presentation types, it says None is "same as <code>d</code>". So now it all makes sense.</span>
<span class="comment-copy">Ah, I'd missed the inclusion of <code>''</code> in that description; that'd be the empty string, no type? If so at least someone intended the behavior I'm seeing, but I'm still curious what's going on and why it's inconsistent with the docs.</span>
