<div class="post-text" itemprop="text">
<p>I am working on a system which is embedding a Python interpreter, and I need to construct a <code>PyObject*</code> given a string from the C API.</p>
<p>I have a <code>const char*</code> representing a dictionary, in the proper format for <code>eval()</code> to work properly from within Python, ie: <code>"{'bar': 42, 'baz': 50}"</code>.  </p>
<p>Currently, this is being passed into Python as a <code>PyObject*</code> using the <code>Py_Unicode_</code> api (representing a string), so in my python interpreter, I can successfully write:</p>
<pre><code>foo = eval(myObject.value)
print(foo['bar']) # prints 42
</code></pre>
<p>I would like to change this to automatically "eval" the <code>const char*</code> on the C side, and return a <code>PyObject*</code> representing a completed dictionary.  How do I go about converting this string into a dictionary in the C API?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two basic ways to do this.</p>
<p>The first is to simply call <code>eval</code> the same way you do in Python. The only trick is that you need a handle to the <code>builtins</code> module, because you don't get that for free in the C API. There are a number of ways to do this, but one really easy way is to just import it:</p>
<pre><code>/* or PyEval_GetBuiltins() if you know you're at the interpreter's top level */
PyObject *builtins = PyImport_ImportModule("builtins");
PyObject *eval = PyObject_GetAttrString(builtins, "eval");
PyObject *args = Py_BuildValue("(s)", expression_as_c_string);
PyObject *result = PyObject_Call(eval, args);
</code></pre>
<p>(This is untested code, and it at least leaks references, and doesn't check for NULL return if you want to handle exceptions on the C side… But it should be enough to get the idea across.)</p>
<p>One nice thing about this is that you can use <code>ast.literal_eval</code> in exactly the same way as <code>eval</code> (which means you get some free validation); just change <code>"builtins"</code> to <code>"ast"</code>, and <code>"eval"</code> to <code>"literal_eval"</code>. But the real win is that you're doing exactly what <code>eval</code> does in Python, which you already know is exactly what you wanted.</p>
<p>The alternative is to use the compilation APIs. At the really high level, you can just build  a Python statement out of <code>"foo = eval(%s)"</code> and <a href="http://docs.python.org/3/c-api/veryhigh.html#PyRun_SimpleString" rel="nofollow"><code>PyRun_SimpleString</code></a> it. Below that, use <a href="http://docs.python.org/3/c-api/veryhigh.html#Py_CompileString" rel="nofollow"><code>Py_CompileString</code></a> to parse and compile the expression (you can also parse and compile in separate steps, but that isn't useful here), then <a href="http://docs.python.org/3/c-api/veryhigh.html#PyEval_EvalCode" rel="nofollow"><code>PyEval_EvalCode</code></a> to evaluate it in the appropriate globals and locals. (If you're not tracking globals yourself, use the <a href="http://docs.python.org/3/c-api/reflection.html" rel="nofollow">interpreter-reflection APIs</a> <code>PyEval_GetLocals</code> and <code>PyEval_GetGlobals</code>.) Note that I'm giving the super-simplified version of each function; often you want to use one of the sibling functions. But you can find them easily in the docs.</p>
</div>
<span class="comment-copy">Are you sure you don't want to use <code>ast.literal_eval</code> for this instead of <code>eval</code>? (It doesn't really affect the answer, but it's worth thinking about.)</span>
<span class="comment-copy">@abarnert The strings being parsed are all under my control, so I don't think I need to do this - it'll always be a dictionary containing various values of float, int, bool, or (properly escaped) string values.</span>
<span class="comment-copy">If it's always a dictionary containing float, int, bool, and string reprs, why <i>not</i> use <code>literal_eval</code>? It's a little simpler, and you get a bit of validation for free.</span>
<span class="comment-copy">@abarnert If the code is simpler, that's fine - I'm just trying to figure out how to handle this on the C API side of things, so the script only sees the dictionary.</span>
<span class="comment-copy">Actually, I overstated things by saying it's simpler; <code>builtins</code> is just as easy to get at as <code>ast</code>, or maybe easier, and after that they're identical. Maybe that was just a knee-jerk reaction…</span>
<span class="comment-copy">This almost has it - it looks like <code>eval</code> expects a tuple, so I have to wrap args in <code>PyTuple_Pack</code>, but otherwise, this works (+ adding the reference count handling).</span>
<span class="comment-copy">On a side note - any reason you used <code>Py_BuildValue("s", </code> vs <code>PyUnicode_FromString</code>?</span>
<span class="comment-copy">@ReedCopsey: Sorry, that's a silly typo. I meant to do <code>"(s)"</code>, to build the <code>str</code> and then build the arg <code>tuple</code> out of that in one step, instead of having to first build the <code>str</code> and then the <code>tuple</code>. Good catch.</span>
<span class="comment-copy">Nice - the BuildValue with <code>"(s)"</code> makes sense, and simplifies things.  Thanks for your help on this!</span>
<span class="comment-copy">Whoever downvoted, care to explain why?</span>
