<div class="post-text" itemprop="text">
<p>I am trying to extract all the sentence containing a specified word from a text. </p>
<pre><code>txt="I like to eat apple. Me too. Let's go buy some apples."
txt = "." + txt
re.findall(r"\."+".+"+"apple"+".+"+"\.", txt)
</code></pre>
<p>but it is returning me :</p>
<pre><code>[".I like to eat apple. Me too. Let's go buy some apples."]
</code></pre>
<p>instead of :</p>
<pre><code>[".I like to eat apple., "Let's go buy some apples."]
</code></pre>
<p>Any help please ?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [3]: re.findall(r"([^.]*?apple[^.]*\.)",txt)                                                                                                                             
Out[4]: ['I like to eat apple.', " Let's go buy some apples."]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No need for regex:</p>
<pre><code>&gt;&gt;&gt; txt = "I like to eat apple. Me too. Let's go buy some apples."
&gt;&gt;&gt; [sentence + '.' for sentence in txt.split('.') if 'apple' in sentence]
['I like to eat apple.', " Let's go buy some apples."]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [7]: import re

In [8]: txt=".I like to eat apple. Me too. Let's go buy some apples."

In [9]: re.findall(r'([^.]*apple[^.]*)', txt)
Out[9]: ['I like to eat apple', " Let's go buy some apples"]
</code></pre>
<p>But note that @jamylak's <code>split</code>-based solution is faster:</p>
<pre><code>In [10]: %timeit re.findall(r'([^.]*apple[^.]*)', txt)
1000000 loops, best of 3: 1.96 us per loop

In [11]: %timeit [s+ '.' for s in txt.split('.') if 'apple' in s]
1000000 loops, best of 3: 819 ns per loop
</code></pre>
<p>The speed difference is less, but still significant, for larger strings:</p>
<pre><code>In [24]: txt = txt*10000

In [25]: %timeit re.findall(r'([^.]*apple[^.]*)', txt)
100 loops, best of 3: 8.49 ms per loop

In [26]: %timeit [s+'.' for s in txt.split('.') if 'apple' in s]
100 loops, best of 3: 6.35 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/library/stdtypes.html?highlight=str.split#str.split" rel="nofollow">str.split</a>,</p>
<pre><code>&gt;&gt;&gt; txt="I like to eat apple. Me too. Let's go buy some apples."
&gt;&gt;&gt; txt.split('. ')
['I like to eat apple', 'Me too', "Let's go buy some apples."]

&gt;&gt;&gt; [ t for t in txt.split('. ') if 'apple' in t]
['I like to eat apple', "Let's go buy some apples."]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>r"\."+".+"+"apple"+".+"+"\."
</code></pre>
<p>This line is a bit odd; why concatenate so many separate strings? You could just use r'..+apple.+.'.</p>
<p>Anyway, the problem with your regular expression is its greedy-ness. By default a <code>x+</code> will match <code>x</code> as often as it possibly can. So your <code>.+</code> will match as many characters (<em>any</em> characters) as possible; including dots and <code>apple</code>s.</p>
<p>What you want to use instead is a non-greedy expression; you can usually do this by adding a <code>?</code> at the end: <code>.+?</code>.</p>
<p>This will make you get the following result:</p>
<pre><code>['.I like to eat apple. Me too.']
</code></pre>
<p>As you can see you no longer get both the apple-sentences but still the <code>Me too.</code>. That is because you still match the <code>.</code> after the <code>apple</code>, making it impossible to not capture the following sentence as well.</p>
<p>A working regular expression would be this: <code>r'\.[^.]*?apple[^.]*?\.'</code></p>
<p>Here you donâ€™t look at <em>any</em> characters, but only those characters which are not dots themselves. We also allow not to match any characters at all (because after the <code>apple</code> in the first sentence there are no non-dot characters). Using that expression results in this:</p>
<pre><code>['.I like to eat apple.', ". Let's go buy some apples."]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Obviously, the sample in question is <code>extract sentence containing substring</code> instead of<br/>
<code>extract sentence containing word</code>. How to solve the <code>extract sentence containing word</code> problem through python is as follows:</p>
<p>A word can be in the begining|middle|end of the sentence. Not limited to the example in the question, I would provide a general function of searching a word in a sentence: </p>
<pre><code>def searchWordinSentence(word,sentence):
    pattern = re.compile(' '+word+' |^'+word+' | '+word+' $')
    if re.search(pattern,sentence):
        return True
</code></pre>
<p>limited to the example in the question, we can solve like:</p>
<pre><code>txt="I like to eat apple. Me too. Let's go buy some apples."
word = "apple"
print [ t for t in txt.split('. ') if searchWordofSentence(word,t)]
</code></pre>
<p>The corresponding output is:</p>
<pre><code>['I like to eat apple']
</code></pre>
</div>
<span class="comment-copy">how can I get only <code>apple</code> by adding boundaries out:[ 'I like to eat apple.']</span>
<span class="comment-copy">Thank you jamylak</span>
<span class="comment-copy">@user2187202 You can accept my answer if you want or accept the regex solution if that was actually what you needed since you did tag it as a regex question, I'm not sure if that was essential or not though</span>
<span class="comment-copy">+1 nice answer! if you make a <code>txt=txt*10000</code> then <code>%timeit</code> the result would be more clear</span>
<span class="comment-copy">Thanks Kent. I've added a <code>%timeit</code> benchmark for larger strings.</span>
