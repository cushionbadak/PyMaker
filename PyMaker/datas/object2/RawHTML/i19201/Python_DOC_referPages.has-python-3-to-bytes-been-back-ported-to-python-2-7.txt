<div class="post-text" itemprop="text">
<p>This is the function I'm after: -</p>
<p><a href="http://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer">http://docs.python.org/3/library/stdtypes.html#int.to_bytes</a></p>
<p>I need big endianness support.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the answer from @nneonneo, here is a function that emulates the to_bytes API:</p>
<pre><code>def to_bytes(n, length, endianess='big'):
    h = '%x' % n
    s = ('0'*(len(h) % 2) + h).zfill(length*2).decode('hex')
    return s if endianess == 'big' else s[::-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer your original question, the <code>to_bytes</code> method for <code>int</code> objects was not back ported to Python 2.7 from Python 3.  It was considered but ultimately rejected.  See the discussion <a href="http://bugs.python.org/issue1023290" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To pack arbitrary-length <code>long</code>s in Python 2.x, you can use the following:</p>
<pre><code>&gt;&gt;&gt; n = 123456789012345678901234567890L
&gt;&gt;&gt; h = '%x' % n
&gt;&gt;&gt; s = ('0'*(len(h) % 2) + h).decode('hex')
&gt;&gt;&gt; s
'\x01\x8e\xe9\x0f\xf6\xc3s\xe0\xeeN?\n\xd2'
</code></pre>
<p>This outputs the number in big-endian order; for little endian, reverse the string (<code>s[::-1]</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can probably use <a href="http://docs.python.org/2/library/struct.html#struct.pack" rel="nofollow"><code>struct.pack</code></a> instead:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&gt;i', 123)
'\x00\x00\x00{'
</code></pre>
<p>It doesn't do arbitrary lengths in the way <code>int.to_bytes</code> does, but I doubt you need that.</p>
</div>
<span class="comment-copy">Not really the <i>entire</i> <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer">API</a>...</span>
<span class="comment-copy">This doesn't seem to work in Python 3: AttributeError: 'str' object has no attribute 'decode', so it's not a portable solution for 2/3 compatibility.</span>
<span class="comment-copy">For Python 3.4, you need 'h = hex(n).encode('ascii')[2:]'</span>
<span class="comment-copy">struct.error: integer out of range for 'i' format code</span>
<span class="comment-copy">So use a wider datatype. If you need more than 64 bits, you'll need to do some work yourself first.</span>
