<div class="post-text" itemprop="text">
<p>I have written a code in python which uses / to make a particular file in a folder, if I want to use the code in windows it will not work, is there a way by which I can use the code in Windows and Linux.</p>
<p>In python I am using this code:</p>
<pre><code>pathfile=os.path.dirname(templateFile)
rootTree.write(''+pathfile+'/output/log.txt')
</code></pre>
<p>When I will use my code in suppose windows machine my code will not work.</p>
<p>How do I use "/" (directory separator) in both Linux and Windows?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>os.path.join()</code>.
Example: <code>os.path.join(pathfile,"output","log.txt")</code>.</p>
<p>In your code that would be: <code>rootTree.write(os.path.join(pathfile,"output","log.txt"))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>import os
print os.sep
</code></pre>
<p>to see how separator looks on a current OS.<br/>
In your code you can use:</p>
<pre><code>import os
path = os.path.join('folder_name', 'file_name')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3.3/library/os.html?highlight=os.sep#os.sep" rel="noreferrer">os.sep</a>:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.sep
'/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="noreferrer"><code>os.path.normpath(pathname)</code></a> should also be mentioned as it converts <code>/</code> path separators into <code>\</code> separators on Windows. It also collapses redundant uplevel references... i.e., <code>A/B</code> and <code>A/foo/../B</code> and <code>A/./B</code> all become <code>A/B</code>.  And if you are Windows, these all become <code>A\B</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some useful links that will help you:</p>
<ul>
<li><a href="http://docs.python.org/2/library/os.html#os.sep" rel="noreferrer">os.sep</a></li>
<li><a href="http://docs.python.org/2/library/os.path.html" rel="noreferrer">os.path</a></li>
<li><a href="http://docs.python.org/2/library/os.html#os.pathsep" rel="noreferrer">os.pathsep</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you are fortunate enough to be running Python 3.4+, you can use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>:</p>
<pre><code>from pathlib import Path

path = Path(dir, subdir, filename)  # returns a path of the system's path flavour
</code></pre>
<p>or, equivalently,</p>
<pre><code>path = Path(dir) / subdir / filename
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do a <code>import os</code> and then use <code>os.sep</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<blockquote>
<p>You can use "<em>os.sep</em> "</p>
</blockquote>
</blockquote>
<pre><code> import os
 pathfile=os.path.dirname(templateFile)
 directory = str(pathfile)+os.sep+'output'+os.sep+'log.txt'
 rootTree.write(directory)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't build directory and file names your self, use python's included libraries. </p>
<p>In this case the relevant one is <a href="http://docs.python.org/3/library/os.path.html" rel="nofollow">os.path</a>. Especially join which creates a new pathname from a directory and a file name or directory and split that gets the filename from a full path.</p>
<p>Your example would be </p>
<pre><code>pathfile=os.path.dirname(templateFile)
p = os.path.join(pathfile, 'output')
p = os.path.join( p, 'log.txt')
rootTree.write(p)
</code></pre>
</div>
<span class="comment-copy">You can define it in the beginning depending on Win/*nix and then work with the variable.</span>
<span class="comment-copy">In Windows you can use either \ or / as a directory separator.</span>
<span class="comment-copy">Windows supports <code>/</code> in directory paths. What specific problem are you having? Post some code that illustrates the problem.</span>
<span class="comment-copy">Unless you depend on Windows userspace programs, forward slash works as well as backward. Some cmd commands have problems with that however.</span>
<span class="comment-copy">@Mehrdad: Do you know an example for which the Win32 API doesn't accept '/'? (not counting cmd.exe and other programs)</span>
<span class="comment-copy">This one works!</span>
<span class="comment-copy"><code>os.path.join</code> uses a more complex logic to match several relative path components together. When you just want to chain them, <code>os.sep.join</code> is the right choice.</span>
<span class="comment-copy">This is IMO the best answer to the question as it was phrased, "how to use “/” (directory separator) in both Linux and Windows".  And it's also eminently useful -- I'd much rather do <code>os.path.normpath('a/b/c/d/file.ext')</code> than <code>os.path.join('a','b','c','d','file.ext')</code> when I need to specify a long path.</span>
<span class="comment-copy">I also found this answer to be very helpful. I was looking for a method for generating paths with a consistent separator. The famous <code>os.path.join</code> just joins anything provided. e.g. <code>join("a/b", "c\d")</code> gives <code>a/b\c\d</code> (on windows). But i can get the expected result with the proper combination of <code>join</code> and <code>normpath</code>, e.g. <code>a\b\c\d</code> (on windows)</span>
<span class="comment-copy">pathsep? Generally useful, but not here, IMO.</span>
<span class="comment-copy">@glglgl Indeed. I looked for <code>sep</code> but couldn't resist myself to post this too (I assumed the OP will found it useful for future work) :)</span>
