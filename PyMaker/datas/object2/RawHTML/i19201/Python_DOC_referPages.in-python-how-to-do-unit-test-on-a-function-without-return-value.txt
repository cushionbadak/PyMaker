<div class="post-text" itemprop="text">
<p>I am a pythoner. At these days I am driving myself to do a more complete unit test on some core module in my project.
Since we always do unit test with methods 'assertEqual', 'assertTrue' and so on, these methods all require a return value from the function being tested, I am wondering how to do a plain unit test on some function without a return value.</p>
<p>I would like to show a tiny example here, how to test function def foo(self, msg) in HelloTest?</p>
<pre><code>class HelloTest(object):
    def foo(self, msg):
        MSG = msg.upper()
        self.bar(MSG)

    def bar(self, MSG):
        print MSG
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this particular case, I would mock print, then then use the mock in my assertion.</p>
<p>In Python, you will use the <a href="https://pypi.python.org/pypi/mock" rel="noreferrer">Mock package</a> to mock.</p>
</div>
<div class="post-text" itemprop="text">
<p>As another answer mentioned, you can use the Python mock library to make assertions about calls to functions/methods</p>
<pre><code>from mock import patch
from my_module import HelloTest
import unittest

class TestFoo(unittest.TestCase):

    @patch('hello.HelloTest.bar')
    def test_foo_case(self, mock_bar):

        ht = HelloTest()

        ht.foo("some string")
        self.assertEqual(ob.msg, "SOME STRING")
        self.assertTrue(mock_bar.called)
</code></pre>
<p>This patches out the <code>bar</code> method on HelloTest and replaces it with a mock object that records calls against it. </p>
<p>Mocking is a bit of a rabbit hole. Only do it when you absolutely have to because it does make your tests brittle. You'll never notice an API change for a mocked object for instance. </p>
</div>
<div class="post-text" itemprop="text">
<p>I don't quite understand why everybody wants to check that foo calls bar.</p>
<p>Foo has some functionality and this functionality needs to be tested. If foo is using bar to do this should not be of my concern.</p>
<p>The desired result is that after <code>foo(msg)</code> is called, is that <code>msg.upper()</code> is sent to stdout.</p>
<p>You can <a href="https://stackoverflow.com/questions/1218933/can-i-redirect-the-stdout-in-python-into-some-sort-of-string-buffer">redirect stdout to a string buffer</a> and check if the content of this string buffer matches what you expect.</p>
<p>Example:</p>
<pre><code>import sys
import unittest
from io import TextIOWrapper, BytesIO

class TestScript(unittest.TestCase):
    def setUp(self):
        self._old_stdout = sys.stdout
        sys.stdout = TextIOWrapper(BytesIO(), sys.stdout.encoding)

    def _output(self):
        self._stdout.seek(0)
        return self._stdout.read()

    def test_foo(self):
        hello_test = HelloTest()
        hello_test.foo("blub")
        self.assertEqual(self._output(), "BLUB")

    def tearDown(self):
        sys.stdout = self._old_stdout
        self._stdout.close()
</code></pre>
<p>You can also do that for stdin (and write to stdin to mock some input) and you can subclass TestIOWrapper if you need anything special to be done, like allowing non-unicode text to be sent to <code>sys.stdout</code> without using <code>sys.stdout.buffer</code> (Python 2 vs. Python 3).
There is an example for that in <a href="https://stackoverflow.com/a/19345047/1904815">this SO answer</a>.
When you (still) use Python 2 only, then using <code>StringIO</code> might be better than using the io module.</p>
</div>
<div class="post-text" itemprop="text">
<p>your code can be as given below which does same task as above:</p>
<pre><code>class HelloTest(object):

    def foo(self, msg):
        self.msg = msg.upper()
        self.bar()

    def bar(self):
        print self.msg
</code></pre>
<p>Unit test is :</p>
<pre><code>from hello import HelloTest
import unittest

class TestFoo(unittest.TestCase):
    def test_foo_case(self):
        msg = "test"
        ob = HelloTest()
        ob.foo(msg)
        expected = "TEST"
        self.assertEqual(ob.msg, expected)

if __name__ == '__main__':
    unittest.main(exit=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, you can <a href="http://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">tell <code>print</code> where to print to</a>:</p>
<blockquote>
<p>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)</p>
</blockquote>
<p>So add an optional argument:</p>
<pre><code>def bar(self, MSG, file=sys.stdout):
    print(MSG, file=file)
</code></pre>
<p>In normal usage, it will print to stdout, but for unit tests you can pass your own file.</p>
<p>In Python 2 it's a bit messier, but you can <a href="https://stackoverflow.com/questions/1218933/can-i-redirect-the-stdout-in-python-into-some-sort-of-string-buffer">redirect stdout to a StringIO buffer</a>:</p>
<pre><code>import StringIO
import sys

out = StringIO.StringIO()
sys.stdout = out

# run unit tests

sys.stdout = sys.__stdout__

# check the contents of `out`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to @Jordan 's introduction, I code this and think it is a workable unit test for HelloTest.foo</p>
<pre><code>from mock import Mock
import unittest


class HelloTestTestCase(unittest.TestCase):
    def setUp(self):
        self.hello_test = HelloTest()

    def tearDown(self):
        pass

    def test_foo(self):
        msg = 'hello'
        expected_bar_arg = 'HELLO'
        self.hello_test.bar = Mock()

        self.hello_test.foo(msg)
        self.hello_test.bar.assert_called_once_with(expected_bar_arg)


if __name__ == '__main__':
    unittest.main()
</code></pre>
</div>
<span class="comment-copy">+1: For the pointer to <code>mock</code>.</span>
<span class="comment-copy">Well, if he is using anything below Python 3 then it's not that simple to mock print. He could mock sys.stdout, but he would have to change bar</span>
<span class="comment-copy">Good solution for doing unit test on function with output. But what I care most is how to test <code>def foo(self, msg)</code>, since not all function do something with stdout</span>
