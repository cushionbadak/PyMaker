<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15711755/converting-dict-to-ordereddict">Converting dict to OrderedDict</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to create an OrderedDict object but no sooner do I create it, than the elements are all jumbled.</p>
<p>This is what I do:</p>
<pre><code>from collections import OrderedDict
od = OrderedDict({(0,0):[2],(0,1):[1,9],(0,2):[1,5,9]})
</code></pre>
<p>The elements don't stay in the order I assign</p>
<pre><code>od
OrderedDict([((0, 1), [1, 9]), ((0, 0), [2]), ((0, 2), [1, 5, 9])])
</code></pre>
<p>docs.python.org doesn't have an example and I can't figure out why the order is getting jumbled. Any help is greatly appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you are constructing a <code>dict</code> to give the initial data to the <code>OrderedDict</code> - this <code>dict</code> <em>doesn't</em> store any order, so the order is lost before it gets to the <code>OrderedDict</code>.</p>
<p>The solution is to build from an ordered data type - the easiest being a <code>list</code> of <code>tuple</code>s:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict([((0, 0), [2]), ((0, 1), [1, 9]), ((0, 2), [1, 5, 9])])
&gt;&gt;&gt; od
OrderedDict([((0, 0), [2]), ((0, 1), [1, 9]), ((0, 2), [1, 5, 9])])
</code></pre>
<p>It's worth noting that this is why <code>OrderedDict</code> uses the syntax it does for it's string representation - string representations should try to be valid Python code to reproduce the object where possible, and that's why the output uses a list of tuples instead of a dict.</p>
<p>Edit: <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order" rel="nofollow noreferrer">As of Python 3.6, <code>kwargs</code> is ordered</a>, so you can use keyword arguments instead, provided you are on an up-to-date Python version.</p>
<p><a href="https://docs.python.org/3.7/whatsnew/3.7.html" rel="nofollow noreferrer">As of 3.7</a>, this is also true for <code>dict</code>s (it was for CPython in 3.6, but the language spec didn't specify it, so using <code>OrderedDict</code> was still required for compatibility). This means if you can assume a 3.7+ environment, you can often drop <code>OrderedDict</code> altogether, or construct one from a regular <code>dict</code> if you need a specific feature (e.g: order to matter for equality).</p>
</div>
<span class="comment-copy">Also of note, passing names/values to the constructor isn't enough to set the order. <code>&gt;&gt;&gt; from collections import OrderedDict</code> <code>&gt;&gt;&gt; OrderedDict(one=1, two=2, three=3, four=4)</code> <code>OrderedDict([('four', 4), ('one', 1), ('three', 3), ('two', 2)])</code></span>
<span class="comment-copy">@EricSmith Indeed, for the same reason - variable keyword args (<code>**kwargs</code>) in Python are stored as a dictionary - so when that happens, the order is lost as before. Note that <a href="http://legacy.python.org/dev/peps/pep-0468/" rel="nofollow noreferrer">PEP-468</a> has a simple solution to this - use an <code>OrderedDict</code> for <code>kwargs</code>, not a feature yet, but maybe some day.</span>
<span class="comment-copy">@GarethLatty now in <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order" rel="nofollow noreferrer">python 3.6</a> they implemented PEP-468</span>
