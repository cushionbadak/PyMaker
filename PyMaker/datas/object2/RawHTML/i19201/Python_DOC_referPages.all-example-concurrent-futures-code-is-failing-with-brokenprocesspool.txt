<div class="post-text" itemprop="text">
<p>I am trying to get a basic understanding of this before I create the actual application I need. I recently moved over from 2.7 to 3.3.</p>
<p>A direct copy-paste of <a href="http://docs.python.org/dev/library/concurrent.futures.html#processpoolexecutor-example" rel="noreferrer">this code from the python docs</a> fails, as does a slightly simpler example from <a href="https://stackoverflow.com/a/8081576/1199721">here</a>.</p>
<p>This is my code, derived from the second example:</p>
<pre><code>import concurrent.futures

nums = [1,2,3,4,5,6,7,8,9,10]

def f(x):
    return x * x

# Make sure the map and function are working
print([val for val in map(f, nums)])

# Test to make sure concurrent map is working
with concurrent.futures.ProcessPoolExecutor() as executor:
    for item in executor.map(f, nums):
        print(item)
</code></pre>
<p>And this is the output:</p>
<pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Traceback (most recent call last):
  File "&lt;string&gt;", line 420, in run_nodebug
  File "&lt;module1&gt;", line 13, in &lt;module&gt;
  File "C:\Python33\lib\concurrent\futures\_base.py", line 546, in result_iterator
    yield future.result()
  File "C:\Python33\lib\concurrent\futures\_base.py", line 399, in result
    return self.__get_result()
  File "C:\Python33\lib\concurrent\futures\_base.py", line 351, in __get_result
    raise self._exception
concurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.
</code></pre>
<p>How can I get this code to work as expected? I was hoping the examples would just work out of the box.</p>
</div>
<div class="post-text" itemprop="text">
<p>This was my fault, for two reasons:</p>
<ol>
<li>The code was un-guarded, i.e no <code>if __name__</code></li>
<li>The strange looking Traceback was because the file was not saved. Never caused me an issue before, but did in this case.</li>
</ol>
<p>Correcting <strong>both</strong> of those fixed the error.</p>
<p>Final test code:</p>
<pre><code>import concurrent.futures

nums = [1,2,3,4,5,6,7,8,9,10]

def f(x):
    return x * x
def main():
    # Make sure the map and function are working
    print([val for val in map(f, nums)])

    # Test to make sure concurrent map is working
    with concurrent.futures.ProcessPoolExecutor() as executor:
        print([val for val in executor.map(f, nums)])

if __name__ == '__main__':
    main()
</code></pre>
<p>Output, as expected:</p>
<pre><code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Under Windows, it is important to protect the main loop of code to avoid recursive spawning of subprocesses when using processpoolexecutor or any other parallel code which spawns new processes.</p>
<p>Basically, all your code which creates new processes must be under <code>if __name__ == '__main__':</code> , for the same reason you cannot execute it in interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<p>This actually is still happening on Windows.
I have Python 3.7.2 and I tried with the example given in the documentation at
<a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor</a></p>
<p>The error still happens even though the example already has the new process called from under <code>__name__ == '__main__'</code>.</p>
<p>I tried this on Windows 10 as well as Windows 7. 
It does work as advertised on a Mac with MacOS Sierra. Same python version.</p>
</div>
<span class="comment-copy">That's so strange. It only works for me in a saved .py file. It fails when I tried it in either the iPython console or in Jupyter notebook.  Good find!</span>
<span class="comment-copy">@David It is now mentioned in the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">docs for ProcessPoolExecutor</a> that it will not work in interactive consoles.  It says <i>The <b>main</b> module must be importable by worker subprocesses. This means that ProcessPoolExecutor will not work in the interactive interpreter.</i></span>
