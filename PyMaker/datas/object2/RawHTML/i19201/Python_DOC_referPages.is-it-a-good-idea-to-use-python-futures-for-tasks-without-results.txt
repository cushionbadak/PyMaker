<div class="post-text" itemprop="text">
<p>The question came up, when I started implementing asynchronous set and get operations on an object using the <code>concurrent.futures</code> module like this:</p>
<pre><code>import time
from concurrent.futures import ThreadPoolExecutor

executor = ThreadPoolExecutor(max_workers=2)

class Foo(object):
    def set_something(self):
        def long_running_setter():
            time.sleep(1.5)
            print('Set something')
        return executor.submit(long_running_setter)

    def get_something(self):
        def long_running_getter():
            time.sleep(0.5)
            return 'something'
        return executor.submit(long_running_getter)

foo = Foo()
future = foo.get_something()
print("Got " + future.result())
</code></pre>
<p>But now, setting a value and waiting for it becomes a little bit awkward to use and semantically "incorrect"</p>
<pre><code>foo.set_something().result()
</code></pre>
<p>although I feel it's still valid, because the <code>Foo</code> object is at the lowest level and further abstractions could be built on top of the futures.</p>
<p>So, to sum up my problem:</p>
<ul>
<li>Are futures the right kind of abstractions to get/set values asynchronously from an object? Especially for setters which do not return any value?</li>
<li>Should I add a <code>blocking</code> parameter to <code>set_something</code> in order to get rid of the <code>result()</code> call? I have my doubts with this approach, because then I'd encourage not to use futures at all.</li>
<li>How would you do it?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If the action must be completed before you can continue past a certain point in the code, you need some way to block/join/wait.</p>
<p>Python <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow">properties</a> are much preferred to Java-style getters and setters (like <code>obj.get_x</code> and <code>obj.set_x</code>). Because properties masquerade as regular attributes, it'd be bad style to have asynchronous code triggered by a property.</p>
<p>Many people find that object-orientation gets them into trouble with asynchronous code and they prefer to use a more functional style. Luckily, Python supports using either programming paradigm.</p>
</div>
