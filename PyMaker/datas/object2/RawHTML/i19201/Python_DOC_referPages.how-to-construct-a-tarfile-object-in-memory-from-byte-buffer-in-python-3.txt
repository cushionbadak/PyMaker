<div class="post-text" itemprop="text">
<p>Is it possible to create a TarFile object in memory using a buffer containing the tar data without having to write the TarFile to disk and open it up again? We get the bytes sent over a socket.</p>
<p>Something like this:</p>
<pre><code>import tarfile
byte_array = client.read_bytes()
tar = tarfile.open(byte_array) # how to do this?
# use "tar" as a regular TarFile object
for member in tar.getmembers():
    f = tar.extractfile(member)
    print(f)
</code></pre>
<p>Note: one of the reasons for doing this is that we eventually want to be able to do this with multiple threads simultaneously, so using a temp file might be overridden if two threads try to do it at the same time.</p>
<p>Thank you for any and all help!</p>
</div>
<div class="post-text" itemprop="text">
<p>BytesIO() from <a href="http://docs.python.org/3/library/io.html" rel="noreferrer">IO module</a> does exactly what you need.</p>
<pre><code>import tarfile, io
byte_array = client.read_bytes()
file_like_object = io.BytesIO(byte_array)
tar = tarfile.open(fileobj=file_like_object)
# use "tar" as a regular TarFile object
for member in tar.getmembers():
    f = tar.extractfile(member)
    print(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure, something like this:</p>
<pre><code>import io

io_bytes = io.BytesIO(byte_array)

tar = tarfile.open(fileobj=io_bytes, mode='r')
</code></pre>
<p>(Adjust <code>mode</code> to fit the format of your tar file, e.g. possibly `mode='r:gz', etc.)</p>
</div>
<span class="comment-copy">might have to add the mode, depending on what you're doing (archive in an archive) tarfile.open(fileobj=byte_stream, mode='r:gz')</span>
<span class="comment-copy">^ exactly.  I had gotten to <code>fileobj=file_like_object</code> and wasn't doing <code>mode=</code> just giving the mode which isn't valid python x0 (they're all positional arguments, but the docs show <code>"filename", "r:gz"</code> -- if you're using stuff from memory you need to <code>fileobj=..., mode=...</code> explicitly!</span>
