<div class="post-text" itemprop="text">
<p>I am working with python and I am trying to find powers of really large numbers but something interesting which happens is that this throws a math overflow</p>
<pre><code>math.pow(1000, 1000)
</code></pre>
<p>but this below seems to work although I do not know if the value returned is correct</p>
<pre><code>1000**1000
</code></pre>
<p>Anybody aware why this happens</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/math.html#math.pow" rel="noreferrer">math.pow</a>:</p>
<blockquote>
<p>Unlike the built-in <code>**</code> operator, <code>math.pow()</code> converts both its arguments to type <code>float</code>. Use <code>**</code> or the built-in <code>pow()</code> function for computing exact integer powers.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Simple, the <code>math.pow()</code> method uses C float libraries, while the <code>**</code> power operator uses integer maths.</p>
<p>The two methods have different limitations. Python <code>int</code> size is only limited by how much memory your OS will let Python have, float numbers are limited by your computer architecture, see <a href="http://docs.python.org/2/library/sys.html#sys.float_info" rel="nofollow"><code>sys.float_info.max</code></a>.</p>
</div>
<span class="comment-copy">Because python is awesome ;)</span>
<span class="comment-copy">any idea on the limits beyond which we cannot assume that the value returned is correct for any of these?</span>
<span class="comment-copy">Also, because math.pow returns float result, and 1000^1000 will not fit not float anyhow</span>
<span class="comment-copy">@cobie Integer math is always correct. Floating point math is correct up to rounding error, or until you hit the maximum value of <code>sys.float_info.max</code>.</span>
