<div class="post-text" itemprop="text">
<p><a href="http://www.scipy.org/Tentative_NumPy_Tutorial" rel="noreferrer">Numpy tentative tutorial</a> suggests that <code>a[ : :-1]</code> is a reversed <code>a</code>. Can someone explain me how we got there? </p>
<p>I understand that <code>a[:]</code> means for each element of <code>a</code> (with axis=0). Next <code>:</code> should denote the number of elements to skip (or period) from my understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have noted, this is a python slicing technique, and numpy just follows suit.  Hopefully this helps explain how it works:</p>
<p>The last bit is the stepsize.  The <code>1</code> indicates to step by one element at a time, the <code>-</code> does that in reverse.</p>
<p>Blanks indicate the first and last, unless you have a negative stepsize, in which case they indicate last and first:</p>
<pre><code>In [1]: import numpy as np

In [2]: a = np.arange(5)

In [3]: a
Out[3]: array([0, 1, 2, 3, 4])

In [4]: a[0:5:1]
Out[4]: array([0, 1, 2, 3, 4])

In [5]: a[0:5:-1]
Out[5]: array([], dtype=int64)

In [6]: a[5:0:-1]
Out[6]: array([4, 3, 2, 1])

In [7]: a[::-2]
Out[7]: array([4, 2, 0])
</code></pre>
<p>Line 5 gives an empty array since it tries to step backwards from the <code>0</code>th element to the <code>5</code>th.<br/>
The slice doesn't include the 'endpoint' (named last element) so line 6 misses <code>0</code> when going backwards.</p>
</div>
<div class="post-text" itemprop="text">
<p>It isn't numpy, it's Python.</p>
<p>In Python, there are slices for sequence/iterable, which come in the following syntax</p>
<pre><code>seq[start:stop:step] =&gt; a slice from start to stop, stepping step each time.
</code></pre>
<p>All the arguments are optional, but a <code>:</code> has to be there for Python to recognize this as a slice.</p>
<p>Negative values, for step, also work to make a copy of the same sequence/iterable in reverse order:</p>
<pre><code>&gt;&gt;&gt; L = range(10)
&gt;&gt;&gt; L[::-1] 
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
<p>And numpy follows that "rule" like any good 3rd party library..</p>
<pre><code>&gt;&gt;&gt; a = numpy.array(range(10))
&gt;&gt;&gt; a[::-1]
array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
</code></pre>
<p>See <a href="http://docs.python.org/release/2.3.5/whatsnew/section-slices.html" rel="noreferrer">this link</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't specific to numpy, the slice <code>a[::-1]</code> is equivalent to <a href="http://docs.python.org/2/library/functions.html#slice" rel="nofollow"><code>slice(None, None, -1)</code></a>, where the first argument is the start index, the second argument is the end index, and the third argument is the step.  <code>None</code> for start or stop will have the same behavior as using the beginning or end of the sequence, and <code>-1</code> for step will iterate over the sequence in reverse order.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3.7/library/functions.html#reversed" rel="nofollow noreferrer">reversed</a> Python built-in:</p>
<pre><code>import numpy as np

bins = np.arange(0.0, 1.1, .1)
for i in reversed(bins):
    print(i)
</code></pre>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/509211/the-python-slice-notation" title="the python slice notation">stackoverflow.com/questions/509211/the-python-slice-notation</a> -- This is for python proper, but numpy obeys all of the conventions like a good 3rd party package.</span>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/a/4371049/875127">stackoverflow.com/a/4371049/875127</a> for a good explanation of how basic slicing in numpy returns a view and not a copy of the original array.</span>
<span class="comment-copy">Why does <code>a[5:-1:-1]</code> return <code>array([], dtype=int64)</code> and not the right answer <code>array([4, 3, 2, 1, 0])</code>?</span>
<span class="comment-copy">@AbhishekNaik In python indexing, <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">negative numbers count from the end toward</a> the beginning, so <code>a[-1]</code> is the last element.  Thus, <code>a[5:-1:-1]</code> is equivalent to <code>a[5:4:-1]</code>, so the empty array <i>is</i> the right answer.  To get to the end (in either direction) use <code>None</code> or leave it blank: <code>a[5:None:-1]</code> or <code>a[5::-1]</code>.</span>
