<div class="post-text" itemprop="text">
<p>I've been making Python scripts for simple tasks at work and never really bothered packaging them for others to use. Now I have been assigned to make a Python wrapper for a REST API. I have absolutely no idea on how to start and I need help.</p>
<p><strong>What I have:</strong></p>
<p>(Just want to be specific as possible) I have the <a href="http://www.pythonforbeginners.com/basics/how-to-use-python-virtualenv/" rel="noreferrer">virtualenv</a> ready, it's also <a href="https://github.com/yowmamasita/pyfirefly" rel="noreferrer">up in github</a>, the .gitignore file for python is there as well, plus, the <a href="http://www.python-requests.org/en/latest/" rel="noreferrer">requests library</a> for interacting with the REST API. That's it.</p>
<p>Here's the current directory tree</p>
<pre><code>.
├── bin
│   └── /the usual stuff/
├── include
│   └── /the usual stuff/
├── lib
│   └── python2.7
│       └── /the usual stuff/
├── local
│   └── /the usual stuff/
└── README.md

27 directories, 280 files
</code></pre>
<p>I don't even know where to put the .py files, if I ever make one.</p>
<p><strong>What I wanted to do:</strong></p>
<p>Make a python module install-able with "pip install ..."</p>
<p>If possible, I want a general step by step process on writing Python modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>A module is a file containing Python definitions and statements. The file name is the module name with the suffix <code>.py</code></p>
<p>create <code>hello.py</code> then write the following function as its content:</p>
<pre><code>def helloworld():
   print "hello"
</code></pre>
<p>Then you can import <code>hello</code>:</p>
<pre><code>&gt;&gt;&gt; import hello
&gt;&gt;&gt; hello.helloworld()
'hello'
&gt;&gt;&gt;
</code></pre>
<p>To group many <code>.py</code> files put them in a folder. Any folder with an <code>__init__.py</code> is considered a module by python and you can call them a package</p>
<pre><code>|-HelloModule
  |_ __init__.py
  |_ hellomodule.py
</code></pre>
<p>You can go about with the import statement on your module the usual way.</p>
<p>For more information, see <a href="http://docs.python.org/dev/tutorial/modules.html#packages" rel="noreferrer">6.4. Packages</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 3 - UPDATED 18th November 2015</strong></p>
<p><em>Found the accepted answer useful, yet wished to expand on several points for the benefit of others based on my own experiences.</em> </p>
<p><strong>Module:</strong> A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended.</p>
<p><strong>Module Example</strong>: Assume we have a single python script in the current directory, here I am calling it <em>mymodule.py</em></p>
<p>The file <em>mymodule.py</em> contains the following code:</p>
<pre><code>def myfunc():
    print("Hello!")
</code></pre>
<p>If we run the python3 interpreter from the current directory, we can import and run the function <em>myfunc</em> in the following different ways (you would typically just choose one of the following):</p>
<pre><code>&gt;&gt;&gt; import mymodule
&gt;&gt;&gt; mymodule.myfunc()
Hello!
&gt;&gt;&gt; from mymodule import myfunc
&gt;&gt;&gt; myfunc()
Hello!
&gt;&gt;&gt; from mymodule import *
&gt;&gt;&gt; myfunc()
Hello!
</code></pre>
<p>Ok, so that was easy enough. </p>
<p>Now assume you have the need to put this module into its own dedicated folder to provide a module namespace, instead of just running it ad-hoc from the current working directory. This is where it is worth explaining the concept of a <strong>package</strong>.</p>
<p><strong>Package</strong>: Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example, the module name A.B designates a submodule named B in a package named A. Just like the use of modules saves the authors of different modules from having to worry about each other’s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or the Python Imaging Library from having to worry about each other’s module names.</p>
<p><strong>Package Example</strong>: Let's now assume we have the following folder and files. Here, <strong>mymodule.py</strong> is identical to before, and <strong>__init__.py</strong> is an empty file:</p>
<pre><code>.
└── mypackage
    ├── __init__.py
    └── mymodule.py
</code></pre>
<p>The __init__.py files are required to make Python treat the directories as containing packages. For further information, please see the Modules documentation link provided later on.</p>
<p>Our current working directory is one level above the ordinary folder called <strong>mypackage</strong></p>
<pre><code>$ ls
mypackage
</code></pre>
<p>If we run the python3 interpreter now, we can import and run the module <strong>mymodule.py</strong> containing the required function <em>myfunc</em> in the following different ways (you would typically just choose one of the following):</p>
<pre><code>&gt;&gt;&gt; import mypackage
&gt;&gt;&gt; from mypackage import mymodule
&gt;&gt;&gt; mymodule.myfunc()
Hello!
&gt;&gt;&gt; import mypackage.mymodule
&gt;&gt;&gt; mypackage.mymodule.myfunc()
Hello!
&gt;&gt;&gt; from mypackage import mymodule
&gt;&gt;&gt; mymodule.myfunc()
Hello!
&gt;&gt;&gt; from mypackage.mymodule import myfunc
&gt;&gt;&gt; myfunc()
Hello!
&gt;&gt;&gt; from mypackage.mymodule import *
&gt;&gt;&gt; myfunc()
Hello!
</code></pre>
<p>Assuming Python 3, there is excellent documentation at: <a href="https://docs.python.org/3/tutorial/modules.html" rel="noreferrer">Modules</a></p>
<p>In terms of naming conventions for packages and modules, the general guidelines are given in PEP-0008 - please see <a href="https://www.python.org/dev/peps/pep-0008/#package-and-module-names" rel="noreferrer">Package and Module Names</a></p>
<p>Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since nobody did cover this question of the OP yet:</p>
<blockquote>
<p><strong>What I wanted to do:</strong></p>
<p>Make a python module install-able with "pip install ..."</p>
</blockquote>
<p>Here is an absolute minimal example, showing the basic steps of preparing and uploading your package to PyPI using <code>setuptools</code> and <code>twine</code>.</p>
<p><strong>This is by no means a substitute for <a href="https://packaging.python.org/tutorials/distributing-packages/" rel="noreferrer">reading at least the tutorial</a>, there is much more to it than covered in this very basic example.</strong></p>
<p>Creating the package itself is already covered by other answers here, so let us assume we have that step covered and our project structure like this:</p>
<pre><code>.
└── hellostackoverflow/
    ├── __init__.py
    └── hellostackoverflow.py
</code></pre>
<p>In order to use <code>setuptools</code> for packaging, we need to add a file <code>setup.py</code>, this goes into the root folder of our project:</p>
<pre><code>.
├── setup.py
└── hellostackoverflow/
    ├── __init__.py
    └── hellostackoverflow.py
</code></pre>
<p>At the minimum, we specify the metadata for our package, our <code>setup.py</code> would look like this:</p>
<pre><code>from setuptools import setup

setup(
    name='hellostackoverflow',
    version='0.0.1',
    description='a pip-installable package example',
    license='MIT',
    packages=['hellostackoverflow'],
    author='Benjamin Gerfelder',
    author_email='benjamin.gerfelder@gmail.com',
    keywords=['example'],
    url='https://github.com/bgse/hellostackoverflow'
)
</code></pre>
<p>Since we have set <code>license='MIT'</code>, we include a copy in our project as <code>LICENCE.txt</code>, alongside a readme file in reStructuredText as <code>README.rst</code>:</p>
<pre><code>.
├── LICENCE.txt
├── README.rst
├── setup.py
└── hellostackoverflow/
    ├── __init__.py
    └── hellostackoverflow.py
</code></pre>
<p>At this point, we are ready to go to start packaging using <code>setuptools</code>, if we do not have it already installed, we can install it with <code>pip</code>:</p>
<pre><code>pip install setuptools
</code></pre>
<p>In order to do that and create a <code>source distribution</code>, at our project root folder we call our <code>setup.py</code> from the command line, specifying we want <code>sdist</code>:</p>
<pre><code>python setup.py sdist
</code></pre>
<p>This will create our distribution package and egg-info, and result in a folder structure like this, with our package in <code>dist</code>:</p>
<pre><code>.
├── dist/
├── hellostackoverflow.egg-info/
├── LICENCE.txt
├── README.rst
├── setup.py
└── hellostackoverflow/
    ├── __init__.py
    └── hellostackoverflow.py
</code></pre>
<p>At this point, we have a package we can install using <code>pip</code>, so from our project root (assuming you have all the naming like in this example):</p>
<pre><code>pip install ./dist/hellostackoverflow-0.0.1.tar.gz
</code></pre>
<p>If all goes well, we can now open a Python interpreter, I would say somewhere outside our project directory to avoid any confusion, and try to use our shiny new package:</p>
<pre><code>Python 3.5.2 (default, Sep 14 2017, 22:51:06) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from hellostackoverflow import hellostackoverflow
&gt;&gt;&gt; hellostackoverflow.greeting()
'Hello Stack Overflow!'
</code></pre>
<p>Now that we have confirmed the package installs and works, we can upload it to PyPI.</p>
<p>Since we do not want to pollute the live repository with our experiments, we create an account for the <a href="https://test.pypi.org/" rel="noreferrer">testing repository</a>, and install <code>twine</code> for the upload process:</p>
<pre><code>pip install twine
</code></pre>
<p>Now we're almost there, with our account created we simply tell <code>twine</code> to upload our package, it will ask for our credentials and upload our package to the specified repository:</p>
<pre><code>twine upload --repository-url https://test.pypi.org/legacy/ dist/*
</code></pre>
<p>We can now log into our account on the PyPI test repository and marvel at our freshly uploaded package for a while, and then grab it using <code>pip</code>:</p>
<pre><code>pip install --index-url https://test.pypi.org/simple/ hellostackoverflow
</code></pre>
<p>As we can see, the basic process is not very complicated. As I said earlier, there is a lot more to it than covered here, so go ahead and <a href="https://packaging.python.org/tutorials/distributing-packages/" rel="noreferrer">read the tutorial</a> for more in-depth explanation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Once you have defined your chosen commands, you can simply drag and drop the saved file into the Lib folder in your python program files. </p>
<pre><code>&gt;&gt;&gt; import mymodule 
&gt;&gt;&gt; mymodule.myfunc()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a file named "hello.py"</p>
<p>If you are using Python 2.x</p>
<pre><code>def func():
    print "Hello"
</code></pre>
<p>If you are using Python 3.x</p>
<pre><code>def func():
    print("Hello")
</code></pre>
<p>Run the file. Then, you can try the following:</p>
<pre><code>&gt;&gt;&gt; import hello
&gt;&gt;&gt; hello.func()
Hello
</code></pre>
<p>If you want a little bit hard, you can use the following:</p>
<p>If you are using Python 2.x</p>
<pre><code>def say(text):
    print text
</code></pre>
<p>If you are using Python 3.x</p>
<pre><code>def say(text):
    print(text)
</code></pre>
<p>See the one on the parenthesis beside the define? That is important. It is the one that you can use within the define.</p>
<p>Text - You can use it when you want the program to say what you want. According to its name, it is text. I hope you know what text means. It means "words" or "sentences".</p>
<p>Run the file. Then, you can try the following if you are using Python 3.x:</p>
<pre><code>&gt;&gt;&gt; import hello
&gt;&gt;&gt; hello.say("hi")
hi
&gt;&gt;&gt; from hello import say
&gt;&gt;&gt; say("test")
test
</code></pre>
<p>For Python 2.x - I guess same thing with Python 3? No idea. Correct me if I made a mistake on Python 2.x (I know Python 2 but I am used with Python 3)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>I created a project to easily initiate a project skeleton from scratch</strong>. <a href="https://github.com/MacHu-GWU/pygitrepo-project" rel="nofollow noreferrer">https://github.com/MacHu-GWU/pygitrepo-project</a>.</p>
<p>And you can create a test project, let's say, <code>learn_creating_py_package</code>.</p>
<p><strong>You can learn what component you should have for different purpose like</strong>:</p>
<ul>
<li>create virtualenv</li>
<li>install itself</li>
<li>run unittest</li>
<li>run code coverage</li>
<li>build document</li>
<li>deploy document</li>
<li>run unittest in different python version</li>
<li>deploy to PYPI</li>
</ul>
<p>The advantage of using <code>pygitrepo</code> is that those tedious are automatically created itself and adapt your <code>package_name</code>, <code>project_name</code>, <code>github_account</code>, <code>document host service</code>, <code>windows or macos or linux</code>.</p>
<p>It is a good place to learn develop a python project like a pro.</p>
<p>Hope this could help.</p>
<p>Thank you.</p>
</div>
<span class="comment-copy">I would start with <a href="http://docs.python.org/2/tutorial/modules.html" rel="nofollow noreferrer">chapter 6 of the tutorial (2.7)</a>, or <a href="http://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">here for 3.x</a>  Search the internet for <a href="http://www.google.com/search?q=python+module+tutorial" rel="nofollow noreferrer">python module tutorial</a> and you'll find plenty of others.</span>
<span class="comment-copy">No one answered the pip part</span>
<span class="comment-copy"><a href="https://github.com/MacHu-GWU/pygitrepo-project" rel="nofollow noreferrer">github.com/MacHu-GWU/pygitrepo-project</a> this library helps you to create project skeleton from scratch, and the feature you need is out of box.</span>
<span class="comment-copy">would that last one be: from HellowModule import hellomodule? Could that be hello in the module folder, so it would be from HelloModule import hello</span>
<span class="comment-copy">Doesn't show how to upload to pip</span>
<span class="comment-copy">Nice simple explanation. What if you want to keep another folder inside mypackage ?</span>
<span class="comment-copy">The include totally depends on what you did wrote. In the case of you put stuff outside a function on your module, you'll fire it when calling like <code>import mypackage</code>. In the case you wanna import just a function from a module (even a file) is better to use <code>from module import function</code>. In the case a subfolder <code>from subfolder.module import function</code> so you can simply call <code>function()</code> witthout fire other code parts. Also, do not use <code>from module import *</code> if you don't really need.</span>
<span class="comment-copy">The only question left is how can I get the package to import everything on <code>import mypackage</code>? Adding <code>import mymodule</code> to <code>__init__.py</code> does not work..</span>
<span class="comment-copy">Outstanding answer! I had been looking for a while, for this nested examples. +1</span>
<span class="comment-copy">How about pip ?</span>
<span class="comment-copy">My favorite answer, well done.</span>
<span class="comment-copy">This is the most precise answer regarding the question.</span>
<span class="comment-copy">Very comprehensive! Thank you!</span>
<span class="comment-copy">Thanks bro, your answer helped me to resolve my problem.</span>
<span class="comment-copy">@papabiceps was that sarcasm? you never know these days xd</span>
<span class="comment-copy">No, I was being serious. His answer is crisp and to the point and it's what I needed then.</span>
