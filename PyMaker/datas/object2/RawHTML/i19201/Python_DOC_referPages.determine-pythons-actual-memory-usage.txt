<div class="post-text" itemprop="text">
<p>I am currently trying to debug the memory usage of my Python program (on Windows with CPython 2.7). But unfortunately, I can't even find any way to reliably measure the amount of memory it's currently using. </p>
<p>I've been using the Task Manager/Resource Monitor to measure the process memory, but this appears to only be useful for determining peak memory consumption. Often times Python will not reduce the Commit or Working Set even long after the relevant objects have been garbage collected.</p>
<p>Is there any way to find out how much memory Python is actually using, or failing that, to force it to free up its unused memory? I'd prefer not to use anything that would require recompiling the interperter.</p>
<p>An example of the behavior that proves it isn't freeing unused memory:</p>
<pre><code>(after some calculations)   # 290k
gc.collect()                # still 290k
x = range(9999999)          # 444k
del x                       # 405k
gc.collect()                # 40k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there any way to find out how much memory Python is actually using,</p>
</blockquote>
<p>Not from with-in Python.</p>
<p>You can get a rough idea of memory usage per object using <a href="http://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow"><em>sys.getsizeof</em></a> however that doesn't capture total memory usage, overallocations, fragmentation, memory unused but not freed back to the OS.</p>
<p>There is a third-party tool called <a href="http://honhosted.org/Pympler/index.html" rel="nofollow"><em>Pympler</em></a> that can help with memory analysis. Also, there a programming environment called <a href="http://guppy-pe.sourceforge.net/" rel="nofollow">Guppy</a> for object and heap memory sizing, profiling and analysis.   And there is a similar project called <a href="http://pysizer.8325.org/" rel="nofollow">PySizer</a> with a memory usage profiler for Python code.</p>
<blockquote>
<p>or failing that, to force it to free up its unused memory? </p>
</blockquote>
<p>There is no public API for forcing memory to be released.</p>
</div>
<span class="comment-copy">Not giving memory back to the OS is pretty much the standard for allocators. While you can use <code>sbrk</code> with a negative value to give memory back to the OS in theory, that only works if you give back the memory in the opposite order in which you got it in the first place.. which is rather impractical usually.</span>
<span class="comment-copy">I don't see how the code you show <i>proves</i> Python does not free unused memory.</span>
<span class="comment-copy">Never mind Python; good luck getting a <i>real, meaningful</i> number out of <i>any</i> program written in <i>any</i> language on <i>any</i> modern OS.</span>
<span class="comment-copy">@Piotr creating and deleting an unrelated object shouldn't lower total memory usage.</span>
<span class="comment-copy">Well that's not the answer I was hoping for, but I guess I'm just out of luck.</span>
