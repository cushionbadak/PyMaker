<div class="post-text" itemprop="text">
<p>Using the <code>sorted</code> built-in function without providing any optional arguments, how does python sort a list of dictionaries?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2 does attempt to provide an ordering (it does so for <em>all</em> types), first based on length (shorted dicts first), if the lengths are equal then by keys (a smaller key goes first), then if all keys are equal then on values (smaller values go first); see the <a href="http://hg.python.org/cpython/file/2.7/Objects/dictobject.c#l1717" rel="nofollow"><code>characterize</code> and <code>dict_compare</code> functions</a> in the <code>dictobject.c</code> source code.</p>
<p>Short demo:</p>
<pre><code>&gt;&gt;&gt; sorted([{1:2}, {}])
[{}, {1: 2}]
&gt;&gt;&gt; sorted([{1:2}, {0:1}])
[{0: 1}, {1: 2}]
&gt;&gt;&gt; sorted([{1:2}, {1:1}])
[{1: 1}, {1: 2}]
</code></pre>
<p>In Python 3, it doesn't sort them at all; sorting dicts really makes no sense:</p>
<pre><code>&gt;&gt;&gt; sorted([{}, {}])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: dict() &lt; dict()
</code></pre>
<p>See the <a href="http://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="nofollow">Ordering Comparisons section</a> of the What's New in Python 3 document.</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't (at least for python3):</p>
<pre><code>&gt;&gt;&gt; x = [{4:1}, {3:2}, {1:2}, {5:6}]
&gt;&gt;&gt; x
[{4: 1}, {3: 2}, {1: 2}, {5: 6}]
&gt;&gt;&gt; sorted(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: dict() &lt; dict()
</code></pre>
<p>There isn't a reasonable default for specifying an ordering of dicts, so dicts are unorderable.</p>
<p>This behaviour has changed from python2, because comparisions have been reworked in python3. Before it was possible to compare almost anything using <code>cmp()</code>, which reflects in the ordering of lists. python3 fixes this, <code>cmp()</code> doesn't exist and comparisions are done using <a href="http://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow">rich comparision</a> methods, wich make only things comparable that really are, or how much sense does something like <code>cmp(Exception(), 42)</code> make?</p>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/3484293/is-there-a-description-of-how-cmp-works-for-dict-objects-in-python-2" title="is there a description of how cmp works for dict objects in python 2">stackoverflow.com/questions/3484293/â€¦</a></span>
<span class="comment-copy">How can keys be equal in a <code>dict</code>? If by equal you mean of different <code>type</code> then I guess it compares type of keys instead if their values. So, <code>int</code> is smaller than <code>str</code> and <code>str</code> is smaller than <code>tuple</code>.</span>
<span class="comment-copy">@AshwiniChaudhary: <code>unicode</code> keys are equal to <code>str</code> keys if they have the same ascii value. <code>int</code> keys can never be equal to <code>str</code> keys, but they <i>can</i> be equal to <code>float</code> keys. But you can define a dict with the same keys (all keys equal), so then values are compared.</span>
<span class="comment-copy">Ah! my bad, for a moment I thought we're sorting a single dict rather than sorting a list of dicts.</span>
<span class="comment-copy">True for py3x, not for py2x.</span>
<span class="comment-copy">didn't try on python2 :)</span>
