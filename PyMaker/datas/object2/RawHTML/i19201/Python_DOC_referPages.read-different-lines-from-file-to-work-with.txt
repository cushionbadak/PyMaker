<div class="post-text" itemprop="text">
<p>So, I have file like this:</p>
<pre><code>Mark Brown
12 2345
45 6780


63 3210
Peter Tailor

10 15430
114 1230
23 3450



John Smith
234 12130
11 32410
</code></pre>
<p>The name is obvious, below the name there is X lines with the ID and a VALUE in each line (there are blank lines too). I need to write out to a file every name, and the biggest VALUE's ID, like this:</p>
<pre><code>Mark Brown 45
Peter Tailor 10
John Smith 11
</code></pre>
<p>If there was only one name, I could do it simply, but with X names in it, I have no clue :(
Any ideas or help?</p>
</div>
<div class="post-text" itemprop="text">
<p>got some spare time, so here is the code to create your dictionary. I'll let you as an exercise to understand each line :)</p>
<pre><code>from itertools import groupby
with open('testing.txt') as file:
    goodlines = [line.strip() for line in file if line.strip()]
    splitted = list( list(val[1]) for val in groupby(goodlines, lambda l: l[0].isdigit()))
    names = [ list(val)[0] for val in splitted[::2] ]
    val_split = [ [v.split() for v in val] for val in splitted[1::2] ]
    val_sorted = [ sorted(val, key=lambda v:int(v[1]))[-1][0] for val in val_split]
    result = dict(zip(names, val_sorted))
print result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think first you read every line and check if it beginns with a letter or a number (aka if ist's a name or an ID)* and then you create an element for each name with a list that contains all the IDs. You sort them using a sorting algorithm and after that, you simply write out everything (that should be no problem)</p>
<p>*You also have to check for empty lines</p>
</div>
<span class="comment-copy">Can't you just execute the code that will handle only one name in a loop? That said, your file format is not great for this, ideally you should use one that lets you tell when a "section" begins and ends using some sort of delimiter.</span>
<span class="comment-copy">Assuming your IDs are always numbers and the letters never start with numbers, just loop through the lines and for each number create a dictionary key, initialised like <code>mydict[key] = 0</code> and then for every subsequent line for the same <code>key</code> do something like `mydict[key] = max(value, mydict[key])'</span>
<span class="comment-copy">Anyway, unless your input file is insanely large, I'd consider first <i>parsing</i> it into some sort of datastructure. (A list of <code>Person</code> objects, of which each contains a list of <code>(id, value)</code> tuples that correspond to the lines found under a name.) Then working with the datastructure should be fairly straightforward - loop over the <code>Persons</code>, and for each one use <a href="http://docs.python.org/3/library/functions.html?highlight=max#max" rel="nofollow noreferrer"><code>max()</code></a> with the <code>key</code> parameter to get the ID with the greatest value.</span>
<span class="comment-copy">Thank you EnricoGiampieri, that helped so much. I just started python (this is my first python program as a first year softw. engineer) I tried to do it all by myself with google, I am at ~30 lines now, but didn't finished yet. I try to edit your code to meet the requirements I did already in my code. Thank you so much.</span>
<span class="comment-copy">The important thing is that you try to learn from the answers, and not just sinply reusing them. you know, receiving a fish versus learning to fish :)</span>
<span class="comment-copy">"sort them using bubblesort" - <b>really?!</b></span>
<span class="comment-copy">(Seriously, Python already comes with a built-in sorting algorithm in <a href="http://docs.python.org/3/library/stdtypes.html?highlight=list.sort#list.sort" rel="nofollow noreferrer"><code>list.sort()</code></a> and <a href="http://docs.python.org/3/library/functions.html?highlight=sorted#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> that's basically a work of genius, why would you bubblesort. AFAIK bubblesort is the one that's taught as a counterexample to good algorithm design.)</span>
<span class="comment-copy">I'm not familar to phyton so I didn't know that. That was only an example, but if you want, you can use something else for sorting as well.</span>
<span class="comment-copy">It was a pretty terrible suggestion for any programming language. Even in the absence of a built-in sort (in, I dunno, assembly), you should not use bubblesort.</span>
<span class="comment-copy">OK, I changed it.</span>
