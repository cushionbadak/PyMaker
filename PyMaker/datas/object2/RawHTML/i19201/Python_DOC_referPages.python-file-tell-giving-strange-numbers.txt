<div class="post-text" itemprop="text">
<p>I am using Python 3.3.0, on windows 64bit. </p>
<p>I have a text file as shown below: (see bottom for download link at mediafire)</p>
<pre><code>hello

-data1:blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah


-data2:blah blah blah blah blah blah blah blah blah blah blah
-data3: Empty

-data4: Empty
</code></pre>
<p>I'm trying to navigate around the file, and thus I use <code>.tell()</code> to figure out what my position is. However, when reading through the lines of the file as shown below, I get a very strange result:</p>
<pre><code>f=open("test.txt")
while True:
    a = f.readline()
    print("{}    {}".format(repr(a),f.tell()))
    if a == "":
        break
</code></pre>
<p>The result:</p>
<pre><code>'hello\n'    7
'\n'    9
'-data1:blah blah blah blah blah blah blah blah blah blah blah blah blah blah bl
ah blah\n'    18446744073709551714
'\n'    99
'\n'    101
'-data2:blah blah blah blah blah blah blah blah blah blah blah\n'    164
'-data3: Empty\n'    179
'\n'    181
'-data4: Empty'    194
''    194
</code></pre>
<p>What's with the 18446744073709551714 for the 3rd line? Though it looks like an impossible value, <code>f.seek(18446744073709551714)</code> is an acceptable value that apparently does bring me to the end of the 3rd line. Though, I can't seem to figure out why.</p>
<p>EDIT:
Opening in binary mode gives no problems with <code>tell()</code>:</p>
<pre><code>f=open("test.txt","rb")
while True:
    a = f.readline()
    print("{}    {}".format(repr(a),f.tell()))
    if a == b"":
        break
</code></pre>
<p>The result:</p>
<pre><code>b'hello\r\n'    7
b'\r\n'    9
b'-data1:blah blah blah blah blah blah blah blah blah blah blah blah blah blah b
lah blah\r\n'    97
b'\r\n'    99
b'\r\n'    101
b'-data2:blah blah blah blah blah blah blah blah blah blah blah\r\n'    164
b'-data3: Empty\r\n'    179
b'\r\n'    181
b'-data4: Empty'    194
b''    194
</code></pre>
<p>The test.txt text file is downloadable here, just a tiny 194 bytes: <a href="http://www.mediafire.com/?1wm4lujb2j48y23" rel="noreferrer">http://www.mediafire.com/?1wm4lujb2j48y23</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It's a documented behaviour caused by UNIX-style line endings:</p>
<blockquote>
<p><a href="http://docs.python.org/2/library/stdtypes.html#file.tell" rel="noreferrer"><code>file.tell()</code></a></p>
<p>Return the file’s current position, like <code>stdio</code>'s <code>ftell()</code>.</p>
<p><strong>Note</strong>: On Windows, <code>tell()</code> can return illegal values (after an <code>fgets()</code>) when reading files with Unix-style line-endings. Use binary mode
  ('rb') to circumvent this problem.</p>
</blockquote>
<hr/>
<p>The above documentation is taken from the python2.7.4 documentation. The documentation for python3 changed a bit, since there is now a hierarchy of classes that handle I/O and I can't find this bit of information. Your test shows that the behaviour didn't change anyway. Also the source code for python3.3 has an <code>XXX Windows support below is likely incomplete</code> comment before the function called by <code>tell</code>.</p>
<hr/>
<p>There is an <a href="http://bugs.python.org/issue16273" rel="noreferrer">issue</a> in python bug tracker related to this, and the final comment by Catalin Iacob is:</p>
<blockquote>
<p>I tried to reproduce this, picked a file on my disk and indeed I got a
  negative number, but that file has Unix line endings. This is
  documented at <a href="http://docs.python.org/2/library/stdtypes.html#file.tell" rel="noreferrer">http://docs.python.org/2/library/stdtypes.html#file.tell</a>
  so probably there's nothing to do then.</p>
<p>As for Armin's report in msg180145, even though it's not intuitive,
  this matches ftell's behavior on Windows, as documented in the Remarks
  section of
  <a href="http://msdn.microsoft.com/en-us/library/0ys3hc0b%28v=vs.100%29.aspx" rel="noreferrer">http://msdn.microsoft.com/en-us/library/0ys3hc0b%28v=vs.100%29.aspx</a>.
  The tell() method on fileobjects is explicitly documented as matching
  ftell behavior: "Return the file’s current position, like stdio‘s
  ftell()". So even though it's not intuitive at all, it's probably
  better to leave it as is. tell() returns the intuitive non zero
  position when opening with 'a' on Python3 and on Python 2.7 when using
  io.open so it's fixed for the future anyway.</p>
</blockquote>
<p>So it seems like a "wontfix" bug. <s>Someone should probably open an issue</s>(commented the issue) because this fact is not mentioned at all in python3 documentation.</p>
<hr/>
<p>According to <a href="http://bugs.python.org/issue16273#msg186551" rel="noreferrer">Antoine Pitrou</a> python3 doesn't use <code>ftell()</code> at all, hence this seems to be a different bug. Also the bug is not reproducible in python3.2.3 and was probably introduced when fixing this <a href="http://bugs.python.org/issue11114" rel="noreferrer">issue</a> (at least, it's the only change I can find to the implementation of <code>tell()</code> between 3.2.3 and 3.3)</p>
<hr/>
<p>Last edit: According to the <a href="http://docs.python.org/3/library/io.html#io.TextIOBase.tell" rel="noreferrer"><code>io</code></a> module documentation the <code>tell</code> method does <strong>not</strong> return the number of bytes since the beginning of a file. The returned value is an "opaque number", which means that the only way you can use it is to pass it to <code>seek</code> to get back at that position. Other operations aren't meaningful. The fact that until python3.2.3 the value returned was what you'd expect was only an implementation detail.</p>
<p>Note that the information in <a href="http://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="noreferrer">this</a> section of the documentation is simply <strong>wrong</strong> and, hopefully, it will be fixed in the future.</p>
</div>
<span class="comment-copy">Uhh, wait, the text file was simply created using notepad. And using notepad2 with line endings shown, I see CR+LF, which is the windows line ending right? Unix line endings are LF only right? After tinkering around with my test file, apparently, longer lines are more likely to get this problem.</span>
<span class="comment-copy">@Eric did you try to open the file in binary mode from python and see the contents? Also, could you post the file contents/upload the file somewhere so that we can test too? AFAIK mine is the only sensible explanation, and I strongly believe python's file to be correct, so I still think the problem is simply that the underlying call to <code>ftell()</code> is returning rubbish.</span>
<span class="comment-copy">I've edited the original question with the same thing in binary mode, and also uploaded the text file in mediafire.</span>
<span class="comment-copy">@Eric Then it's a new bug. See the updated answer and linked issue to the bug tracker.</span>
<span class="comment-copy">@Eric Okay. According to python's devs this is not a bug. <code>tell</code> simply doesn't do what you think. Updated the answer.</span>
