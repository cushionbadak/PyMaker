<div class="post-text" itemprop="text">
<p>Why can't I put <code>process</code> in <code>Pool</code> into a <code>Queue</code>?<br/>
Here my code works when using <code>Pool</code> and can get <code>Test</code> instance attributes.</p>
<pre><code>from multiprocessing import Pool
from multiprocessing import Queue


class Test(object):
    def __init__(self, num):
        self.num = num


if __name__ == '__main__':
    p = Pool()
    procs = []
    for i in range(5):
        proc = p.apply_async(Test, args=(i,))
        procs.append(proc)
    p.close()
    for each in procs:
        test = each.get(10)
        print(test.num)
    p.join()
</code></pre>
<p>When I try to use <code>Queue</code> not python <code>list</code> to store processes, this won't work. </p>
<p>My code:</p>
<pre><code>from multiprocessing import Pool
from multiprocessing import Queue


class Test(object):
    def __init__(self, num):
        self.num = num


if __name__ == '__main__':
    p = Pool()
    q = Queue()
    for i in range(5):
        proc = p.apply_async(Test, args=(i,))
        q.put(proc)
    p.close()
    while not q.empty():
        q.get()
    p.join()
</code></pre>
<p>Error msg:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "C:\Users\laich\AppData\Local\Programs\Python\Python36- 
32\lib\multiprocessing\queues.py", line 234, in _feed
    obj = _ForkingPickler.dumps(obj)
  File "C:\Users\laich\AppData\Local\Programs\Python\Python36- 
32\lib\multiprocessing\reduction.py", line 51, in dumps
    cls(buf, protocol).dump(obj)
TypeError: can't pickle _thread.lock objects
</code></pre>
<p>I go see the multiprocessing doc:</p>
<blockquote>
<p><code>class multiprocessing.Queue([maxsize])</code>
  Returns a process shared queue implemented using a pipe and a few locks/semaphores. When a process first puts an item on the queue a feeder thread is started which transfers objects from a buffer into the pipe.</p>
<p>The usual <code>queue.Empty</code> and <code>queue.Full</code> exceptions from the standard libraryâ€™s queue module are raised to signal timeouts.</p>
<p>Queue implements all the methods of <code>queue.Queue</code> except for <code>task_done()</code> and <code>join()</code>.</p>
</blockquote>
<p>Here it says "puts an item", this item can't be anything (python object)? In my case I try to put <code>process</code> in <code>Pool()</code> into <code>Queue</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>There are at least two problems with your <code>Queue</code>-based code. <a href="https://docs.python.org/3.5/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow noreferrer"><code>Pool.apply_async</code></a> method returns an <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult" rel="nofollow noreferrer"><code>AsyncResult</code></a> object, not a process. You can call <code>get</code> on this object to obtain the result of the corresponding process. With this difference in mind let's look at your code:</p>
<pre><code>proc = p.apply_async(Test, args=(i,)) # Returns an AsyncResult object
q.put(proc) # won't work
</code></pre>
<p>The second line will always fail in your case. Anything that you put in a queue must be picklable, because <code>multiprocess.Queue</code> uses serialization. This is not well documented and there is an <a href="https://bugs.python.org/issue28973" rel="nofollow noreferrer">open issue</a> in Python's issue tracker to update the documentation. The problem is that <code>AsyncResult</code> is not picklable. You can try yourself:</p>
<pre><code>import pickle
import multiprocessing as mp

with mp.Pool() as p:
    result = p.apply_async(lambda x: x, (1,))

pickle.dumps(result) # Error
</code></pre>
<p><code>AsyncResult</code> contains some lock objects internally and they are not serializable. Let' move to the next problem:</p>
<pre><code>while not q.empty():
    q.get()
</code></pre>
<p>If I'm not wrong, in the code above you want to call <code>AsyncResult.get</code> and not <code>Queue.get</code>. In this case you have to first get your object from the queue and then call the corresponding method on your object. However this is not the case in your code, since <code>AsyncResult</code> is not serializable.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @Mehdi Sadeghi <a href="https://stackoverflow.com/a/53912467/355230">explained</a>, <code>AsyncResult</code> objects can't be pickled, which <code>multiprocessing.Queue</code>s requires. However you don't need one here because the queue isn't being shared among the processes. This mean you can just use a regular <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer"><code>Queue</code></a>.</p>
<pre><code>from multiprocessing import Pool
#from multiprocessing import Queue
from queue import Queue


class Test(object):
    def __init__(self, num):
        self.num = num
        print('Test({!r}) created'.format(num))


if __name__ == '__main__':
    p = Pool()
    q = Queue()
    for i in range(5):
        proc = p.apply_async(Test, args=(i,))
        q.put(proc)
    p.close()
    while not q.empty():
        q.get()
    p.join()

    print('done')
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>Test(0)
Test(1)
Test(2)
Test(3)
Test(4)
done
</code></pre>
</div>
