<div class="post-text" itemprop="text">
<p>For some reason, on a Sunday morning I felt like I needed the following for a scientific library I'm writing:</p>
<pre><code>class PolarityType(type):
    """Metaclass to construct polarity types. Supports conversion to float and int."""
    def __float__(cls):
        return int(cls)

    def __int__(cls):
        return cls.P


class Polarity(metaclass=PolarityType):
    """Base class to build polarity."""
    P = 0


class PositivePolarity(Polarity):
    """Positive polarity."""
    P = 1


class NegativePolarity(Polarity):
    """Negative polarity."""
    P = -1

&gt;&gt;&gt; float(NegativePolarity)
&gt;&gt;&gt; -1.0
</code></pre>
<p>Basically instead of passing arguments like <code>polarity='POSITIVE'</code> and checking strings, and also because I'm using type hints, I wanted it to be strongly typed and I wrote the above code.</p>
<p>Does it make sense, is there a much easier/cleaner/better way to achieve the same result?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your solution works, but is there a special reason not to use an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a>?</p>
<pre><code>import enum

class Polarity(enum.Enum):
    POSITIVE: float = 1.0
    NEGATIVE: float = -1.0

    def __float__(cls):
        return self.value

    def __int__(cls):
        return int(self.value)

print(Polarity.NEGATIVE, type(Polarity.NEGATIVE))
# Polarity.NEGATIVE &lt;enum 'Polarity'&gt;

print(type(Polarity.NEGATIVE.value), Polarity.NEGATIVE.value)
# &lt;class 'float'&gt; -1.0

print(type(float(Polarity.NEGATIVE)), float(Polarity.NEGATIVE))
# &lt;class 'float'&gt; -1.0
</code></pre>
</div>
<span class="comment-copy">is there a reason you cant just use regular ints for this? that is, <code>NegativePolarity = -1</code></span>
<span class="comment-copy">It felt more robust to use the type system, plus, I can type hint it.</span>
<span class="comment-copy">I've seen people go one step up the hierarchy and treat types as values in Haskell, but in Python? It doesn't even have a proper type checker. Not sure I understand the motivation, but if you want to type-hint a function parameter to be, say <code>NegativePolarity</code>, how is that different from not passing this parameter at all, since you know that polarity is negative?</span>
<span class="comment-copy">@Norrius for your second question: I would type hint it as <code>PolarityType</code> for example <code>def foo(polarity: PolarityType = PositivePolarity): pass</code> .</span>
<span class="comment-copy">Huh, okay, that looks sound (and mypy agrees). To avoid metaclasses, you could also define something like <code>PositivePolarity = Polarity(1)</code>, and then use it as <code>def f(p: Polarity = PositivePolarity): pass</code>, which is very similar to enums.</span>
<span class="comment-copy">Looks great. I admit I had never used <code>enum</code> and forgot about it.</span>
