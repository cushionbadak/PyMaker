<div class="post-text" itemprop="text">
<p>I understand this is insane and non-pythonic for a number of reasons, but I'm interesting in seeing how it <strong>could</strong> be done in order to learn more about the language.</p>
<p>I have about a billion parser functions that I have given names like:</p>
<pre><code>def parser1(x):
  do_stuff(x)

def parserN(x,y):
  do_other_stuff(x,y)
</code></pre>
<p>And I call:</p>
<pre><code>&gt;&gt;&gt; result = parser1(x)
</code></pre>
<p>This nomenclature means the code base is less than beautiful, but it works. If I write a new parser, I just increment my file, and hope I counted correctly, didn't make any typos to overwrite something existing, etc.</p>
<p>What I would love, however, is some way of calling them, not by a name I have given them, a name that I have to think up with my dumb human brain, but according to some machine-generated name derived from the  <strong>contents</strong> of the function.</p>
<p>Eg, my ideal would be something like:</p>
<pre><code>parser1 = """def func(x):
  do_stuff()"""

print(hashlib.md5(parser1.encode('utf-8')).hexdigest())

&gt;&gt;&gt; print(hashlib.md5(parser1.encode('utf-8')).hexdigest())
"2cb3fed66c79bc14eb442afad27651c8"

&gt;&gt;&gt; result = __2cb3fed66c79bc14eb442afad27651c8(x)
</code></pre>
<p>These md5funs could be stored in a dictionary mapping to their implementation, for example, then they could be iterated over, or applied according to some logic, perhaps the logic even coming from other md5funs in the mapping.</p>
<p>How would I do this in python?</p>
<p>Bonus points would be for, not just using the md5 of the string representation of the function, but the md5 of the AST of the function so that:</p>
<pre><code>def parser1(x):
  a = 1
  do_stuff(x) + a
</code></pre>
<p>and</p>
<pre><code>def parser2(y):
  b = 1
  do_stuff(y) + b
</code></pre>
<p>would get the same hash, and mean I don't have to human-name the function twice.</p>
</div>
<div class="post-text" itemprop="text">
<p>A very crude and dirty way of doing this would be (well, this whole idea is crude and dirty)</p>
<pre><code>import hashlib

def add_md5_to_globals(f):
    # Python names can't start with a number
    md5 = '_' + hashlib.md5(f.__code__.co_code).hexdigest()
    globals()[md5] = globals().pop(f.__name__)


def f(x):
    print(x)


add_md5_to_globals(f)

_123fdffc617d4a2514f219cdd26487a3('but why')
# but why
</code></pre>
<p>This approach requires you to:</p>
<ul>
<li><p>Still come up with names (<code>def f</code>) but they don't need to be unique. Once <code>add_md5_to_globals</code> is called, the name <code>'f'</code> has no significance and can be reused.</p></li>
<li><p>Know the md5 of the function you want to call (for example, <code>_123fdffc617d4a2514f219cdd26487a3('but why')</code>).</p></li>
</ul>
<p>If you don't mind using <code>globals()</code> in every call, you can return <code>md5</code> from <code>add_md5_to_globals</code> and use that to call each function:</p>
<pre><code>latest_md5 = add_md5_to_globals(f)
globals()[latest_md5]('but why')
# but why
</code></pre>
</div>
<span class="comment-copy">Are you wring each parser function to a separate file?  In that case you could call each function <code>parser</code> and increment the module name when calling e.g. <code>module10.parser()</code></span>
<span class="comment-copy">What is the use case for this?  You can already store function references in a dictionary, so it's not clear what extra functionality you have in mind here.</span>
<span class="comment-copy">Do you really think that "2cb3fed66c79bc14eb442afad27651c8" is easier to memorize and type than "parser1" ???</span>
<span class="comment-copy">A normal dictionary could be used to map the md5 of the function to the function itself or a string with its definition in it. If the values were the actual functions, you could call one of them with something like <code>md5funs['2cb3fed66c79bc14eb442afad27651c8'](x)</code>. It the values are definitions, you'd need to use something like <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec()</code></a> which can be a security risk.</span>
<span class="comment-copy">Why exactly do you consider a computer given name like <code>2cb3fed66c79bc14eb442afad27651c8</code> less dumb than <code>meaningful_name</code>?</span>
<span class="comment-copy">But would this account for cases like <code>parser1</code> / <code>parser2</code> where two functions differ only in local variable names?</span>
<span class="comment-copy">@meowgoesthedog, yes, different variable names will lead to different md5.</span>
<span class="comment-copy">OP wants the <i>same</i> hash for cases like this.</span>
<span class="comment-copy">@meowgoesthedog only as bonus ;)</span>
<span class="comment-copy">True, true :) however it seems that you have already solved the bonus problem since the bytecode only contains indices to a look-up table of names â€“ my bad.</span>
