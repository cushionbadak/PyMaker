<div class="post-text" itemprop="text">
<p>Is there a way, in python, for me to create a list where each element is a reference to an element in a dictionary? This way, I can maintain a sorted list, while also being able to change the value by indexing into the dictionary.</p>
<pre><code>d = {
  'price_one': 12,
  'price_two': 13,
  'price_three': 5
}

sorted_list = [ptr_to_price_three, ptr_to_price_one, ptr_to_price_two]
print(sorted_list) # [5, 12, 13]

d['price_one'] = 1

sorted_list.sort() # [ptr_to_price_one, ptr_to_price_three, ptr_to_price_two]
print(sorted_list) # [1, 5, 13]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You mentioned Python in general. You could use a dataframe:</p>
<pre><code>import pandas as pd

d = {
  'price_one': 12,
  'price_two': 13,
  'price_three': 5
}

df = pd.DataFrame(list(d.values()), columns=['val'], index=d.keys())
df.loc['price_one'] = 1
df.sort_values(['val'])
</code></pre>
<p>Outputs:</p>
<p><a href="https://i.stack.imgur.com/f2LA1.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/f2LA1.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>d = {
    'price_one': 12,
    'price_two': 13,
    'price_three': 5
}

def get_sorted(d):
    sorted_list = sorted(list(d.values()))
    return tuple(zip(sorted_list, d[key] for key in sorted_list))
# end get_sorted

print(get_sorted(d))

d['price_one'] = 1

print(get_sorted(d))
</code></pre>
<p>Note that you would have to call <code>get_sorted(d)</code> each time...</p>
<p>Also, it returns a tuple of pairs (key, value) sorted with their keys. If you wanted to access say the 3rd value, do <code>get_sorted(d)[2][1]</code>. The <code>2</code> for the third pair, the <code>1</code> for the value.</p>
</div>
<div class="post-text" itemprop="text">
<p>The dictionary keys are references to particular entries in a dictionary. </p>
<p>A function to generate a list of dictionary keys in the order of the dictionary entry values is:</p>
<pre><code>def sorted_keys(d):
    return sorted(d.keys(), key=lambda k: d[k])
</code></pre>
<p>so to access the smallest price in your example:</p>
<pre><code>ks = sorted_keys(d)
smallest = d[ ks[0] ]
</code></pre>
<p>The problem is that you have to recalculate your ordering on any insert, change or delete of the dictionary. These would be hard to intercept so better to keep control and recalculate the ordering just when you want to use it.</p>
<p>You could bury all this in a <code>class SortedDict(dict)</code> that overrides the get function of a dictionary.</p>
</div>
<span class="comment-copy">Not sure what the actual use case is here, but would it be solved by <code>OrderedDict</code>? <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">@JacobIRR Interesting. It looks like this could work for me. If I were to change a value in the dictionary, would the order also change?</span>
<span class="comment-copy">OrderedDict (and normal dict on python 3.7+ / ipython 3.6+) are insert ordered - the only way to keep them ordered is to create them a-new: <code>d =dict(d.items())</code> after changing something - which is not really good. Why do you need this and whatfor - how big is the dict? Why not create a <code>def get_ordered_items(d): return sorted(d.values())</code> funciton?</span>
<span class="comment-copy">@PatrickArtner It seems likes I need to resort after every modification anyway so this may be the best option</span>
<span class="comment-copy">Are you trying to efficiently maintain a sorted container? Because then you should just use <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow noreferrer">sorted containers</a></span>
<span class="comment-copy">Pulling in <code>pandas</code> (and incredibly heavyweight framework) for this seems a bit much. It's fine if you're using <code>pandas</code> anyway, but I wouldn't use it as a go-to solution in general.</span>
<span class="comment-copy">I'm pretty sure this won't work. When this line is executed <code>d['price_one'] = 1</code>, the value will not change in the list</span>
<span class="comment-copy">I've changed it so it's a function instead. It might not be pretty but it works.</span>
<span class="comment-copy">Gotcha thanks for the changes</span>
<span class="comment-copy">No problem. If it works, you can help other programmers like you get this answer when they see this question by pressing the checkmark to mark it as a correct answer. Keep up the great work :D</span>
