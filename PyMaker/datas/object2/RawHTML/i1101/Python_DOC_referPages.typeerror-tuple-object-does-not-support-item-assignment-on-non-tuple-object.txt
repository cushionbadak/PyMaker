<div class="post-text" itemprop="text">
<p>this code takes an <strong>ordered</strong> (highest score to lowest score) list of tuples and gathers the name and score of the highest, second highest and third highest scorers. If theirs a tie, both names are appended to the same list.</p>
<pre><code>myresults=[('Raven', '18'), ('Cobra', '8'), ('Lion', '6'), ('Otter', '2')]


FirstScore=myresults[0][1]
SecondHighestScore=0
ThirdHighestScore=0
for i in myresults:
    if i[1]==FirstScore:
        FirstPlacePatrols.append(i[0])
for i in myresults:
    print(i[1])
    print(repr(i[1]))
    if int(i[1])&lt;int(FirstScore):
        if int(i[1])&gt;=SecondHighestScore:
            print(i[1])
            i[1]=SecondHighestScore
            SecondPlacePatrols.append(i[0])
for i in myresults:
    if int(i[1])&lt;SecondHighestScore:
        if int(i[1])&gt;=ThirdHighestScore:
            i[0]=ThirdHighestScore
            ThirdPlacePatrols.append(i[0])
print(FirstPlacePatrols)
print(FirstScore)
print(SecondPlacePatrols)
print(SecondHighestScore)
print(ThirdPlacePatrols)
print(ThirdHighestScore)
</code></pre>
<p>However,</p>
<pre><code>i[1]=SecondHighestScore
</code></pre>
<p>Yields,</p>
<pre><code>TypeError: 'tuple' object does not support item assignment
</code></pre>
<p>Despite,</p>
<pre><code>print(repr(i[1]))
</code></pre>
<p>Yielding,</p>
<pre><code>'18'
</code></pre>
<p>Which is clearly not a tuple.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my solution:</p>
<pre><code>from collections import defaultdict
given_list = [('Raven', '18'), ('Cobra', '8'), ('Lion', '6'), ('Python', '6'),('Otter', '2')]
reversed_dict = defaultdict(list)
for key,value in given_list:
    reversed_dict[int(value)].append(key)

for k in reversed(sorted(reversed_dict)[-3:]):
     print(k,reversed_dict[k])
</code></pre>
<p>output:</p>
<pre><code>18 ['Raven']
8 ['Cobra']
6 ['Lion', 'Python']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can not change <a href="https://docs.python.org/3/library/stdtypes.html#tuples" rel="nofollow noreferrer">tuple()s</a> - they are immutable. You could create a new one. Or you could use <code>itertools.groupby</code> to group your tuples together and do some selective output:</p>
<pre><code>myresults=[('Raven', '18'), ('Cobra', '8'), ('Lion', '6'), ('Swine', '6'), ('Otter', '2')]

from itertools import groupby

grped = groupby(myresults, lambda x: int(x[1])) 

# create a dict for all results
result_dict = {}
for key in grped :
    result_dict[key[0]] = [value for value,_ in key[1]] 

# print top 3 results:
for k in sorted(result_dict,reverse=True):
    print(k)
    print(result_dict[k])

# whole dict
print(result_dict)
</code></pre>
<p>Output:            </p>
<pre><code>18
['Raven']
8
['Cobra']
6
['Lion', 'Swine']

# whole dict
{18: ['Raven'], 8: ['Cobra'], 6: ['Lion', 'Swine'], 2: ['Otter']}            
</code></pre>
<hr/>
<p>Second wayy to solve that by using a <code>collections.defaultdict</code>:</p>
<pre><code>myresults=[('Raven', '18'), ('Cobra', '8'), ('Lion', '6'), ('Swine', '6'), ('Otter', '2')]

from collections import defaultdict

result_dict = defaultdict(list)

for value,key in myresults:
    result_dict[int(key)].append(value)

for k in sorted(result_dict,reverse=True):
    print(k)
    print(result_dict[k])

print(result_dict)


18
['Raven']
8
['Cobra']
6
['Lion', 'Swine']
2
['Otter']

# whole dict
defaultdict(&lt;class 'list'&gt;, {18: ['Raven'], 8: ['Cobra'], 
                              6: ['Lion', 'Swine'], 2: ['Otter']})
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby()</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict()</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted(iterable[,key=...])</a></li>
</ul>
</div>
<span class="comment-copy">could you give us the variables we need to be able to run this code?</span>
<span class="comment-copy"><code>i</code> is the tuple here. You cannot modify elements of tuple unlike a list; they are immutable. This seems to be a similar question, I've answered before. Maybe this would help: <a href="https://stackoverflow.com/a/53989234/8472377">stackoverflow.com/a/53989234/8472377</a></span>
<span class="comment-copy">As the previous comment implies, <code>i[1]</code> is not a tuple but <code>i</code> is. Assigning to <code>i[1]</code> is an attempt to change the tuple <code>i</code>, which is not allowed.</span>
<span class="comment-copy">Can you add some expected output?</span>
