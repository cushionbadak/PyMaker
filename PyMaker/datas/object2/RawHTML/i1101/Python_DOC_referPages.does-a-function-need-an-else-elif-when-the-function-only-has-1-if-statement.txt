<div class="post-text" itemprop="text">
<p>These two functions seem to return the same values when it's called. But, I was wondering if number 2 can raise errors in some cases? Is it bad practice to do it?</p>
<p><strong>Number 1:</strong></p>
<pre><code>def not_sum_to_ten(num1, num2):
  if num1 + num2 != 10:
    return True
  else:
    return False
</code></pre>
<p><strong>Number 2:</strong></p>
<pre><code>def not_sum_to_ten(num1, num2):
  if num1 + num2 != 10:
    return True
  return False
</code></pre>
<p>Thanks for sharing your knowledge!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need the <code>if</code> statement either, just return the result of the <code>!=</code> operator: </p>
<pre><code>def not_sum_to_ten(num1, num2):
    return num1 + num2 != 10
</code></pre>
<p>Regarding the original question, the two functions are equivalent. However, the second form is more concise and slightly more efficient since it doesn't require the interpreter to load the default return value for a function, which is <code>None</code>. You can disassemble the function objects using <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow noreferrer"><code>dis.dis()</code></a> and check the bytecode:</p>
<pre><code>  2           0 LOAD_FAST                0 (num1)
              2 LOAD_FAST                1 (num2)
              4 BINARY_ADD
              6 LOAD_CONST               1 (10)
              8 COMPARE_OP               3 (!=)
             10 POP_JUMP_IF_FALSE       16

  3          12 LOAD_CONST               2 (True)
             14 RETURN_VALUE

  5     &gt;&gt;   16 LOAD_CONST               3 (False)
             18 RETURN_VALUE
             20 LOAD_CONST               0 (None)
             22 RETURN_VALUE
</code></pre>
<p>vs</p>
<pre><code>  9           0 LOAD_FAST                0 (num1)
              2 LOAD_FAST                1 (num2)
              4 BINARY_ADD
              6 LOAD_CONST               1 (10)
              8 COMPARE_OP               3 (!=)
             10 POP_JUMP_IF_FALSE       16

 10          12 LOAD_CONST               2 (True)
             14 RETURN_VALUE

 11     &gt;&gt;   16 LOAD_CONST               3 (False)
             18 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>These 2 functions do exactly the same thing. Actually it is a good practice not to use elif if it is not needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are in the second approach is actually more read-able and (arguably) more pythonic. This approach is very helpful when writing functions that can make decisions pretty early like:</p>
<pre><code>def get_data(user, token):
    if not verify(user, token):
        return AuthException()
    // Do actual fetching
</code></pre>
<p>This makes it pretty easy to understand over adding another <code>else</code>. <a href="http://www.itamarweiss.com/personal/2018/02/28/return-early-pattern.html" rel="nofollow noreferrer">Read more</a> about early returns.</p>
</div>
<span class="comment-copy">both are same, no error wil produce and i think number 2 is better approach</span>
<span class="comment-copy">the best practice is to return the result as @eugene_yarmash says  :)  In a simple case like this, it is trivial but in more complex functions, in my opinion, it is better to have a 'else' corresponding to a 'if', as it is easy to forget to cover all the cases. Especially, in critical application developpement you'll even find 'else' with nothing but a comment inside, just to fit code checking tools requirements !</span>
<span class="comment-copy">@A.Joly Thanks, I this makes sense. I was wondering if it was also better to use the else statement just to get in the habit of it for that very reason.</span>
<span class="comment-copy">This is a matter of opinion, really (and therefore technically off-topic for SO). I prefer the style of number 2, but I would change it so that you use <code>==</code> in the comparison (and obviously switch round the <code>return</code> statements). I just find it more natural to check if things are equal than if they're not equal.</span>
<span class="comment-copy">Cool, what do those numbers mean though? I just started learning Python a few days ago. Coming from Ruby makes it pretty easy to grasp most concepts.</span>
<span class="comment-copy">@Jake Check this other <a href="https://stackoverflow.com/q/12673074/244297">question</a></span>
