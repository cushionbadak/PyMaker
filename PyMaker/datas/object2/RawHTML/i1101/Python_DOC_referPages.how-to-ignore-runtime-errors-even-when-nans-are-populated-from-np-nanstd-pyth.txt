<div class="post-text" itemprop="text">
<p>From the code below, I am trying to slice three columns of dataframe. 
Put that in a numpy array in an horizontal line then reshape by (no of data/15 and 15) --&gt; Here i attempted to group every 15 data into a row and calculate its standard deviation. </p>
<p>I would try to ignore the NaNs in the dataframe even if there are any. Thus I have used np.nanstd.</p>
<p>The code is shown as below:</p>
<pre><code>k=SpeedLane.iloc[:,0:3]
k = k.values
k = np.ravel(k)
k = np.reshape(k, ((len(k)//15, 15)))
Between_SL_sd = np.nanstd(k, axis=1)
</code></pre>
<p>An error occurred after executing the code:  </p>
<pre><code>C:\Program Files\Anaconda3\lib\site-packages\numpy\lib\nanfunctions.py:1434: RuntimeWarning: Degrees of freedom &lt;= 0 for slice. keepdims=keepdims)
</code></pre>
<p>I have browse through the Numpy document and I found out that one of the 15x array has got all NAs and returned to this error. </p>
<p>I acknologed that and still I want to ignore that issue. Or is there a way that I can replace that NaNs with 0 immediately and then replace that with NaN afterwards to  get rid of the warning?</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider a 1D-array of all nan elements,</p>
<p><code>arr = np.array([np.nan, np.nan, np.nan, np.nan])</code></p>
<p><strong>np.isfinite()</strong> -&gt; Test element-wise for finiteness</p>
<pre><code>bool_arr = np.isfinite(arr)
print(bool_arr)
</code></pre>
<p>Output:</p>
<pre><code>[False False False False]
</code></pre>
<p><strong>any</strong> -&gt; will return True if there's any truth value in the iterable.</p>
<pre><code>chk = not any(bool_arr)
print(chk)
</code></pre>
<p>Output:
<code>True</code></p>
<p>This shows that all values in array are nan.Now, we can replace all nan with zeros like this,</p>
<pre><code>arr = np.nan_to_num(arr, copy=True)
print(arr)
</code></pre>
<p>Output:
<code>[0. 0. 0. 0.]</code></p>
<p>To convert back 0's to nan, do this,</p>
<pre><code>arr[arr == 0] = 'nan' # or use np.nan
print(arr)
</code></pre>
<p>Output:
<code>[nan nan nan nan]</code></p>
<p>Now, Consider an example of a dataframe like below,</p>
<pre><code>    col1    col2    col3    col4
0   5.0     1.0     6.0      NaN
1   2.0     2.0     1.0      NaN
2   NaN     NaN     NaN      NaN
3   3.0     4.0     NaN      NaN
4   NaN     NaN     NaN      NaN
</code></pre>
<p>To get std of each row, do this,</p>
<pre><code>    std = []
for row in range(len(df)):
    k = df.iloc[row].values
    bool_arr = np.isfinite(k)
    chk = not any(bool_arr)
    if chk == True:
        k = np.nan_to_num(k, copy=True)
    st = np.nanstd(k)
    if chk == True:
        st = np.nan
    std.append(st)

data = {'std_row_wise': std}
std_df = pd.DataFrame(data = data)

std_df
</code></pre>
<p>Output: each value of dataframe is <code>std</code> of a row.</p>
<pre><code>   std_row_wise
0   2.160247
1   0.471405
2   NaN
3   0.500000
4   NaN
</code></pre>
</div>
<span class="comment-copy">Answers have provided safe ways to avoid the source of this warning, which is a better way than ignoring the warnings altogether. However, the <code>warnings</code> module from the standard library offers ways to ignore warnings. <code>warnings.simplefilter('ignore', category=RuntimeWarning)</code> turns all <code>RuntimeWarning</code>s off globally. You could wrap it in the <code>warnings.catch_warnings</code> context manager to ignore warnings locally. <a href="https://docs.python.org/3/library/warnings.html" rel="nofollow noreferrer">Documentation</a></span>
<span class="comment-copy">@Jacky Man let me know if this worked well for you.</span>
<span class="comment-copy">Still the runtime Warning populates. Would that be the case which when we try to exectue  <code>Between_SL_sd = np.nanstd(k, axis=1)</code> When the whole row is all NaNs the calculation still recognises the error?</span>
<span class="comment-copy">Before executing <code>Between_SL_sd = np.nanstd(k, axis=1)</code> I made a check <code>if chk == True: k = np.nan_to_num(k, copy=True)</code> which will assign 0 if there are all <code>nan</code> in the row, so it's not possible to throw a warning.</span>
<span class="comment-copy">The warning still exists if i use your function even if the check is there.</span>
<span class="comment-copy">Strange! Can you provide the value of <code>k</code> after first line of code <code>k=SpeedLane.iloc[:,0:3]</code>.</span>
