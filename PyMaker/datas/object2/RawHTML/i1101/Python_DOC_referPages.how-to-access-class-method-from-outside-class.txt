<div class="post-text" itemprop="text">
<p>This is the simplest example:</p>
<pre><code>class Foo():
    def five(self):
        return 5

def bar():
    print Foo.five()
</code></pre>
<p>As you can see, I would like to call <code>five</code> from <code>bar</code>, but the problem is class methods take <code>self</code> as an argument.</p>
<p>I have solved this by feeding the instance of Foo all the way through bar, shown below:</p>
<pre><code>class Foo():

    def five(self):
        return 5


def bar(instance_of_Foo):
    print Foo.five(instance_of_Foo)


foobar = Foo()

bar(foobar)
</code></pre>
<p>This solution works as I can feed an instance of <code>Foo</code> into my call to <code>bar()</code>. The problem is that need to call <code>bar()</code> before I instantiate <code>Foo</code>, because the <code>Foo</code> object is the target of a thread.</p>
<p>Here is a more complicated example that demonstrates the problem:</p>
<pre><code>from tkinter import *
import threading
import time

count = 0

def counter():
    global count
    while True:
        count += 1
        print count
        time.sleep(1)

class GUI():
    def __init__(self):
        self.root = Tk()

    def five(self):
        global count

        self.var = StringVar()
        self.var.set(count)

        self.label = Label(self.root, textvariable=self.var)
        self.label.pack()

        self.root.mainloop()

def update_gui():
    global count
    while True:
        GUI.var = count
        GUI.root.update()

threads = []
t = threading.Thread(target=update_gui)
threads.append(t)
t.start()

countbot = threading.Thread(target=counter)
threads.append(countbot)
countbot.start()

foobar = GUI()
foobar.five()
</code></pre>
<p>The above throws this error:</p>
<pre><code>Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py", line 801, in __bootstrap_inner
    self.run()
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File "/Users/Henry/documents/python/blank3.py", line 36, in update_gui
    GUI.root.update()
AttributeError: class GUI has no attribute 'root'
</code></pre>
<p>This really surprises me, as GUI does have an attribute called root.</p>
</div>
<div class="post-text" itemprop="text">
<p>All you need to do is mark the function as a classmethod:</p>
<pre><code>class Foo():

    @classmethod
    def five(cls):
        return 5

def bar():
    print Foo.five()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off, the simple solution, since you rely on neither class nor instance, is to <a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod" rel="nofollow noreferrer">make your method a static method</a>:</p>
<pre><code>class Foo():

    @staticmethod
    def five():
        return 5

def bar():
    print Foo.five()
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#classmethod" rel="nofollow noreferrer">A class method</a> also works, but it's pointless unless there is some class specific behavior that you expect to change based on possible subclasses (where you'd derive information from knowing the subclass it was invoked with); in practice, <code>@classmethod</code> is really only for alternate constructors, and doesn't apply here.</p>
<p>Secondly, <code>Foo</code> does not have an attribute named <code>self</code> in your code example, because you never constructed an instance of <code>Foo</code>, so <code>__init__</code> was never invoked to assign the class attribute. If you want to do something like that to make a singleton instance to work off of, don't do it in <code>__init__</code>; do it immediately after the class is defined, e.g.:</p>
<pre><code>class Foo():
    ...
Foo.singleton = Foo()
</code></pre>
<p>Again, not particularly useful, so I'd avoid it if possible.</p>
</div>
<span class="comment-copy">Why do you need <code>Foo</code> in the first place? Can <code>five</code> simply be a function rather than a method?</span>
<span class="comment-copy">@chepner <code>Foo</code> is the simplest form/example of a class to demonstrate what this question is asking, I assume.</span>
<span class="comment-copy">Yes, but it makes it impossible to tell if the correct solution is to make <code>five</code> a class method, a static method, or if something else is necessary. I think it's been simplified <i>too</i> much.</span>
<span class="comment-copy">Addressing the edit: You say you need to access <code>self</code>, but describe a scenario where <code>self</code> is pointless. Try to provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> that demonstrates <i>why</i> <code>@classmethod</code>/<code>@staticmethod</code> isn't appropriate.</span>
<span class="comment-copy">For example, looking at your code as written, I'd just skip <code>bar</code> and create the thread with <code>foobar = Foo()</code>, <code>t = threading.Thread(target=foobar.five)</code>. Or if <code>bar</code> must be a thing, give it an argument to call <code>five</code> on, so you can do <code>t = threading.Thread(target=bar, args=(foobar,))</code>. You can even make the argument a default instance of <code>Foo</code> if needed, so <code>bar</code> can be called without passing an argument and it will reuse the <code>Foo</code> it defaults to.</span>
<span class="comment-copy">In general, <code>classmethod</code> is for alternate constructors (where you need to know the real subclass it was called on to construct the appropriate subclass); if you're just namespacing a function that returns a constant, you may as well stick with <code>staticmethod</code> and avoid needing to accept (and ignore) <code>cls</code>.</span>
<span class="comment-copy">I have edited the question; Five is in fact a much more complicated method and needs to access self</span>
<span class="comment-copy">Sorry for the confusion, I have edited my question; Five is massively over-simplified, it can't be a static method as it needs to access self</span>
<span class="comment-copy">@hegash: Can you explain <i>why</i>? Are you trying to implement a Java-style singleton pattern? Or do you just need a default instance to work on sometimes? When you say "I need an instance, but I don't want to use an instance", I suspect <a href="https://meta.stackexchange.com/q/66377/322040">an XY problem</a>.</span>
