<div class="post-text" itemprop="text">
<p>I want to run a loop from 0 to 1000 i want to print numbers which is lower than previous digit "ex:123 3 is greater than 2 and 2 is greater than 1 so print 123" i tried from 1 to 100 and how to check for 1000 or greater numbers</p>
<p>i tried to convert int input to list and checking with 2 digits</p>
<pre><code>no=int(input())
lis=[]
num_lis=[]
le=0

for i in range(10,no):
    lis=str(i)
    num_lis=[int (x)for x in lis]
    le=len(num_lis)-1
    if num_lis[le]&gt;num_lis[le-1]:
        print(i)
</code></pre>
<p>From 1 to 100 no problem i want to check three digits to like 1&lt;2&lt;3 if correct print i 
my code only check last two digit how do i check for three and four digits </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Printing all numbers that are lower then the one after:</strong></p>
<p>You can simply remember one digit and print it if the next one is bigger:</p>
<pre><code>number = None

while number is None:
    number = int(input("Input a number: ")) 
number = str(number)

last_digit = int(number[0])
for s in number[1:]:
    this_digit = int(s)
    if this_digit &gt; last_digit:
        print(last_digit, end="")
        last_digit = this_digit
print(last_digit)
</code></pre>
<p>Output for <code>12354</code>:</p>
<pre><code>1235
</code></pre>
<p>This prints all numbers that are lower then the next one.</p>
<hr/>
<p><strong>Checking if numbers are "in ascending order":</strong></p>
<p>To zimply check you can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>. Characters <code>'0123456789'</code> compare in this order: <code>'0'&lt;'1'&lt;'2'&lt;'3'&lt;'4'&lt;'5'&lt;'6'&lt;'7'&lt;'8'&lt;'9'</code> - no need to convert it to an integer, simply compare the characters "as is":</p>
<pre><code>def IsIncreasing(number):
    n = str(number)
    return all(a&lt;b for a,b in zip(n,n[1:]))
</code></pre>
<p><em>How does this work</em>?<br/>
It makes tuples from the number and number shifted by 1:</p>
<pre><code>"123456789" 
"23456789" 
==&gt; ('1','2'),('2','3'),...,('7','8'),('8','9') as generator of tuples
</code></pre>
<p>and ensures all first elements are smaller then the second element using <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a></p>
<p>Example:</p>
<pre><code>for k in [1234,1,123456798]:
    print(k,IsIncreasing(k))
</code></pre>
<p>Output (reformatted): </p>
<pre><code>1234      True
1         True
123456798 False
</code></pre>
<p>There is no need to compare via sorting which takes more computation.</p>
<hr/>
<p><strong>Test all numbers from 1 to 1000:</strong> </p>
<p>You can create a list of all "increasing" numbers from 1 to 1000 using the <code>IsIncreasing()</code> function:</p>
<pre><code>get_all_up_to_1000 = [k for k in range(1,1001) if IsIncreasing(k)]

print( *(f"{k:&gt;3}," for k in get_all_up_to_1000))
</code></pre>
<p>Output:</p>
<pre><code>  1,   2,   3,   4,   5,   6,   7,   8,   9,  12,  13,  14,  15,  
 16,  17,  18,  19,  23,  24,  25,  26,  27,  28,  29,  34,  35,  
 36,  37,  38,  39,  45,  46,  47,  48,  49,  56,  57,  58,  59,  
 67,  68,  69,  78,  79,  89, 123, 124, 125, 126, 127, 128, 129, 
134, 135, 136, 137, 138, 139, 145, 146, 147, 148, 149, 156, 157, 
158, 159, 167, 168, 169, 178, 179, 189, 234, 235, 236, 237, 238, 
239, 245, 246, 247, 248, 249, 256, 257, 258, 259, 267, 268, 269, 
278, 279, 289, 345, 346, 347, 348, 349, 356, 357, 358, 359, 367, 
368, 369, 378, 379, 389, 456, 457, 458, 459, 467, 468, 469, 478, 
479, 489, 567, 568, 569, 578, 579, 589, 678, 679, 689, 789,
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a function that verifies if the digits of the number are sorted:</p>
<pre><code>def int_sorted(i):
    s = str(i)
    return s == ''.join(sorted(s, key=int))

print(int_sorted(123))
print(int_sorted(1234))
print(int_sorted(4234))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>True
True
False
</code></pre>
<p>Note that <code>sorted(s, key=int)</code> sorts <code>s</code> (the string of digits) according to int value of each of the digits, by using the <code>key</code> parameter of <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a>. This function works independent of the number of digits.</p>
<p>In case it must be greater than strict you could do:</p>
<pre><code>def int_sorted(i):
    s = str(i)
    sorted_s = sorted(s, key=int)
    return s == ''.join(sorted_s) and all(int(c) &lt; int(n) for c, n in zip(sorted_s, sorted_s[1:]))

print(int_sorted(123))
print(int_sorted(1234))
print(int_sorted(4234))
print(int_sorted(99))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>True
True
False
False
</code></pre>
</div>
<span class="comment-copy">This is wrong. print(int_sorted(99)) also returns true.</span>
<span class="comment-copy">@bitto Thanks for pointing that out. Fix it!!</span>
<span class="comment-copy">sorting is overhead that you do not need ... at all.</span>
