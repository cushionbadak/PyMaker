<div class="post-text" itemprop="text">
<p>Is it possible to use <code>with</code> statement in Python anonymous functions? For example, I have a function that writes <code>1</code> to a file:</p>
<pre><code>def write_one(filename):
    with open(filename, 'wt') as fp:
        fp.write('1')
</code></pre>
<p>But this function is to be organized in a dict:</p>
<pre><code>my_functions = {
    ....
}
</code></pre>
<p>Obviously I can write this statement to add this function to the dict:</p>
<pre><code>my_functions['write_one'] = write_one
</code></pre>
<p>But the problem is the name <code>write_one</code> still exists in the current scope. How can I introduce an anonymous function without polluting the current namespace?</p>
<p>For simple functions, I can use <code>lambda</code>. For slightly complicated functions, I can return a tuple to execute multiple statements (to be precise, expressions). But I didn't find a way to cleverly use <code>lambda</code> so that it can work with <code>with</code> statements. If this is impossible, where it says so in its documentation?</p>
<p>The solution with a <code>del write_one</code> doesn't look good to me. I don't want this name to be introduced at all in the current namespace.</p>
<p>In a word, what I want is something like this:</p>
<pre><code>my_functions['write_one'] = def(filename):
    with open(filename, 'wt') as fp:
        fp.write('1')
</code></pre>
<p>This is kind of awkward with Python's indentation-based rules, I know. But it does its job.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lambda expressions are quite restricted in what they can do. From the <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">docs</a></p>
<blockquote>
<p>Note that functions created with lambda expressions cannot contain statements or annotations.</p>
</blockquote>
<p>Just use a full function definition. If you really want to avoid polluting the namespace, just <code>del</code> the name afterwards.</p>
<p>Or if you simply want to avoid the module namespace from having a bunch of these small functions for code-completion purposes, use <code>_</code> in the front of the function name.</p>
<p>If you truly want to avoid it, you <em>could</em> use the <code>function</code> constructor and dynamically compile code, etc. Or use some other kind of dynamic code execution, e.g. using <code>eval</code> or <code>exec</code>. But that is almost certainly not worth the trouble. 
 Especially if you can just <code>del</code> the name after you are done using it.</p>
<p>Or perhaps the best approach is to put all these functions in another namespace, like another module.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are not many namespaces in Python - a function is basically the local one. That gives a good hint to a possible solution:</p>
<pre><code>def gen_functions():
    def f1(i):
        print(i)
    def f2(i):
        print(i+1)
    return f1,f2

my_funcs = dict(zip(('a','b'),gen_functions()))
my_funcs['a'](2)
my_funcs['b'](7)
f1(3)
</code></pre>
<p>Run this:</p>
<pre><code>&gt;py bla.py
2
8
Traceback (most recent call last):
  File "bla.py", line 11, in &lt;module&gt;
    f1(3)
NameError: name 'f1' is not defined
</code></pre>
<p>So you can make arbitrarily complex functions - to hide them from the global namespace you just enclose them in another function.</p>
</div>
<span class="comment-copy">No, it is not. <code>lambda</code> expressions can only contain <i>expressions</i>, not statements.</span>
<span class="comment-copy">@juanpa.arrivillaga Is <code>lambda</code> the only way to construct an anonymous function in Python? I'm talking about anonymous functions not <code>lambda</code>.</span>
<span class="comment-copy">Yes, it is. I rarely use <code>lambda</code> expressions, only when I'm being super lazy, or for very simple one-offs that I pass to a higher-order function like <code>map</code></span>
<span class="comment-copy">@juanpa.arrivillaga So where in the doc it says <i>lambda is the only way to construct an anonymous functions</i>?</span>
<span class="comment-copy">Yes. or you could just believe people with experience in the language. Up to you.</span>
<span class="comment-copy">By the way, and I by no means endorse this, and it may annoy you slightly, there is a hack around this - using <code>exec</code>. Now that's a recipe for bugs! Or deleting the hard-drive for that matter.</span>
<span class="comment-copy">@kabanus sure, I had added these sorts of highly hacky options as edits.</span>
<span class="comment-copy">Ah I see now - disagree a bit that a "function in a function" is hacky, but the rest I agree with completely.</span>
<span class="comment-copy">@kabanus I didn't mean that, I mean using <code>eval</code>, <code>exec</code> or the <code>function</code> constructor</span>
