<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/21303224/iterate-over-all-pairs-of-consecutive-items-in-a-list">Iterate over all pairs of consecutive items in a list</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I have this list </p>
<pre><code>list=[0,1,2,3,4,2,6]
</code></pre>
<p>I want to make another list of tuples like  this: </p>
<pre><code>list=[(0,1),(1,2),(2,3),(3,4),(4,2),(2,6)]
</code></pre>
<p>Is there a built-in function that i can use? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use zip and list comprehension. <code>listt[1:]</code> starts from the second element. This is done because in your first pair, you have the 1st and the 2nd element. <code>zip</code> creates pairs and then you iterate over them and use <code>()</code> to store them as tuples.</p>
<p>A piece of advice: Do not use builtin names as variables. <code>list</code> in your case.</p>
<pre><code>listt=[0,1,2,3,4,2,6]

result = [(i) for i in zip(listt, listt[1:])]
# [(0, 1), (1, 2), (2, 3), (3, 4), (4, 2), (2, 6)]
</code></pre>
<p><strong>Benchmarking performance</strong></p>
<p>Based on @prashant rana's comment, I compared the performance of <code>zip</code> with his approach taking a list <strong>1 million</strong> times longer than the original list. Below are the results: <code>zip</code> turns out to be faster</p>
<pre><code>import timeit
listt=[0,1,2,3,4,2,6]*1000000

%timeit [(listt[i],listt[i+1]) for i in range(len(listt)-1)]
%timeit [(i) for i in zip(listt, listt[1:])]

1.76 s ± 178 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
937 ms ± 46.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[(i, list[idx + 1]) for idx, i in enumerate(list) if idx &lt; len(list) - 1]
</code></pre>
<blockquote>
<p>[(0, 1), (1, 2), (2, 3), (3, 4), (4, 2), (2, 6)]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>There's no builtin function, but python makes it very easy to make your own. Here you go:</p>
<pre><code>list = [0, 1, 2, 3, 4, 2, 6]
x = [(list[i], list[i+1]) for i in range(len(list)-1)]
</code></pre>
</div>
<span class="comment-copy">use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a></span>
<span class="comment-copy">Do not use list as a variable name, it shadows the built-int <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a> function</span>
<span class="comment-copy">using zip will make it slow .</span>
<span class="comment-copy">Might be true but I am assuming the OP is not using it for production purposes. For small lists, like in the question, it serves the purpose</span>
<span class="comment-copy">i find it's execution time twice the execution time of mine</span>
<span class="comment-copy">@prashantrana: Check my edit for a list 1 million times larger than the original list. <code>zip</code> is faster than your method</span>
<span class="comment-copy">yes <code>zip</code> really is more faster.</span>
