<div class="post-text" itemprop="text">
<p>Setting up a D20 game for discord using the discord.py rewrite. Setting up the 'dice' for stat initialization and wanted to change some stuff up, instead of doing <code>random.randint(1, 10) + random.randint(1, 10)</code> I wanted to 'roll' 5D6, then drop the two lowest values</p>
<p>I've just started researching how to do this, I can't find any examples for python logic that look useful, figured I'd ask the question.</p>
<pre><code>values = [val1, val2, val3, val4, val5, val6]
for x in values:
    dice = [d1, d2, d3, d4, d5]
    for y in dice:
        y = random.randint(1, 6)
</code></pre>
<p>This is where I've gotten so far, I need to figure out how to drop the two lowest values, so I can continue the line and add the remaining three values of <code>dice</code> together</p>
<p>Actual: None at the moment</p>
<p>Expected: <code>dice</code> will return a value not less than three, but no greater than 18, that value will be applied to the first value of <code>values</code>, function will iterate through the list until complete and return <code>values</code> as a list of six integers not less than three but no greater then 18.</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in min() function can be used to isolate the lowest number.</p>
<p>Something like this would suffice for dropping the two lowest values out of your list</p>
<pre><code>deletions = 0
while deletions &lt;= 2:
    deletions +=1
    lowest_val = min(dice)
    dice.remove(lowest_val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The standard <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> function returns the lowest number in a list. The standard <a href="https://docs.python.org/3/tutorial/datastructures.htm" rel="nofollow noreferrer"><code>remove</code></a> function removes the item with a value of <em>x</em> (not the <em>x</em>th item) from a list. Combining these two, all you need is this:</p>
<pre><code>import random
dice = [random.randint(1, 6) for i in range(5)]
print (dice)

dice.remove(min(dice))
dice.remove(min(dice))
print (dice)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to use the tools provided by the <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">heapq</a> module. The heapq module provides <em>heaps</em>, data structures whose first element is always the smallest<sup>*</sup>.  </p>
<p>To get the result that you want, <a href="https://docs.python.org/3/library/heapq.html#heapq.heapify" rel="nofollow noreferrer">heapify</a> your list and pop twice to remove the two lowest values. </p>
<pre><code>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; import random
&gt;&gt;&gt; scores = [random.randint(1, 6) for _ in range(5)]
&gt;&gt;&gt; scores
[6, 4, 3, 5, 2]
&gt;&gt;&gt; heapq.heapify(scores)
&gt;&gt;&gt; # First value is the smallest
&gt;&gt;&gt; scores
[2, 4, 3, 5, 6]
&gt;&gt;&gt; heapq.heappop(scores)
2
&gt;&gt;&gt; # First value is the smallest
&gt;&gt;&gt; scores
[3, 4, 6, 5]
&gt;&gt;&gt; heapq.heappop(scores)
3
&gt;&gt;&gt; scores
[4, 5, 6]
</code></pre>
<p>You could also use the <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer">heapq.nlargest</a> function:</p>
<pre><code>&gt;&gt;&gt; scores = [random.randint(1, 6) for _ in range(5)]
&gt;&gt;&gt; scores
[3, 5, 1, 4, 5]
&gt;&gt;&gt; heapq.nlargest(3, scores)
[5, 5, 4]
</code></pre>
<p><sup>*</sup> Technically this is a <em>min</em> <em>heap</em>; it's also possible to have <em>max</em> <em>heaps</em>, where the first element is the largest/greatest.</p>
</div>
<span class="comment-copy">Sort the list, then slice it to remove the first two elements.</span>
<span class="comment-copy">You might also consider using a list comprehension to generate the initial values like this: <code>val = [random.randint(1,6) for _ in range(5)]</code></span>
<span class="comment-copy">Just use <code>dice = sorted(dice)[2:]</code></span>
<span class="comment-copy">@Bazingaa the sorted way is <i>O(nlogn)</i> the OP can be done in <i>O(n)</i></span>
<span class="comment-copy">that's more or less what I did, had to make a few more tweaks to get it to work for my purposes, thanks for the answer!</span>
