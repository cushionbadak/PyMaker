<div class="post-text" itemprop="text">
<p>I have this following line of code for which I'm not quite sure the output would be. I have found out that <code>sys.path</code> has the first index as an empty string. I think this means add <code>path1/path2</code> to the <code>sys.path</code> but not sure why do I need <code>' '</code> for? I'm using python 2.7. Thanks!</p>
<pre><code>extracting_paths = re.findall('.*path1/path2/.*', ' '.join(sys.path))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>re.findall(pattern, string)</code> finds all the occurrences of <code>pattern</code> in <code>string</code>.</p>
<p>The string is in this case built by using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>.join()</code></a> and result in one big string with all list entries from <code>sys.path</code> joined by a space.</p>
<p>You need this space because otherwise all paths in <code>sys.path</code> would be joined together into one big path string...</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>' '.join(sys.path)</code> part joins the paths into one string delimited by <code>' '</code> then the <code>.*</code> parts in your regular expression in <code>findall()</code> matches this whitespace delimiter as well. </p>
<p>so you can do this instead:</p>
<pre><code>extracting_paths = re.findall('[^\s]+path1/path2/[^\s]+', ' '.join(sys.path))
</code></pre>
<p>in case your paths also have whitespaces (this is better):</p>
<pre><code>extracting_paths = re.findall('[^:]+path1/path2/[^:]+', ':'.join(sys.path))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>extracting_paths = re.findall('.*path1/path2/.*', ' '.join(sys.path))
</code></pre>
<p>Should actually rather than concatenating the pathnames and then matching should match on each pathname seperately:</p>
<pre><code>pat = re.compile('.*path1/path2/.*')
extracting_paths = filter(pat.match, sys.path)
</code></pre>
<p>If you want strings and the locations of the matches in each string that has a match one could use</p>
<pre><code>extracting_paths = filter(lambda t: t[1], zip(sys.path, map(pat.findall, sys.path)))
</code></pre>
<p>Both of these are safer as they don't assume an in-band delimiter.</p>
</div>
<span class="comment-copy">Why not run the code and inspect the output?  What do you get?</span>
<span class="comment-copy">Unfortunately cannot run the code now due to technical reasons :( sorry.</span>
<span class="comment-copy">try to look up the docs for re.findall</span>
<span class="comment-copy">There are a lot of online python compilers you could use the only thing you need is access to the internet</span>
