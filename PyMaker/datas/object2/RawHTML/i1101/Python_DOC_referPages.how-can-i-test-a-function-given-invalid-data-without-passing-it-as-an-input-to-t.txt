<div class="post-text" itemprop="text">
<p>I'm new to the whole test case scene and I've chosen to use pytest and pytest-asyncio to write my test cases. I was able to figure out how to write test cases for basic functionality. e.g. asserting that when I call the function it returns the data expected.</p>
<p>I would now like to write test cases that are designed to fail but I've gotten myself confused on how to do that without changing the functions to take the invalid data as an argument. </p>
<p><strong>TL;DR How would I write a test case to test get_access_token() in the following code with an invalid WOW_CLIENT_ID and WOW_CLIENT_SECRET? (I expect the test to fail because of using invalid credentials)</strong></p>
<p>wow_api.py (this contains the function I want to test: get_access_token())</p>
<pre><code>import aiohttp
import asyncio
import os

async def get_access_token():
auth_path = 'https://us.battle.net/oauth/token'
auth_credentials = aiohttp.BasicAuth(login=os.environ.get('WOW_CLIENT_ID'), password=os.environ.get('WOW_CLIENT_SECRET'))

try:
    async with aiohttp.ClientSession(auth=auth_credentials) as client:
        async with client.get(auth_path, params={'grant_type': 'client_credentials'}) as auth_response:
            assert auth_response.status == 200
            auth_json = await auth_response.json()
            return auth_json['access_token']

except Exception as error:
    # Error receiving token:
    print('Error: Unable to retrieve auth token')
    return { 'error': 'Sorry, I was unable to retrieve authorization from Battle.net for this request.' }
</code></pre>
<p>test_wow_api.py (contains the test case)</p>
<pre><code>import asyncio
import pytest
from wow import *

@pytest.mark.asyncio
async def test_wow_api_invalid_credentials():
    #SOMETHING PROBABLY GOES HERE TO CHANGE/FAKE THE WOW_CLIENT_ID
    access_token = await get_access_token()
    assert 'error' in access_token
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an example of why you want to avoid testing collaborators. If you ask "what happens when <code>WOW_CLIENT_ID</code> is invalid?" this implies a test of the behavior of <code>aiohttp.ClientSession</code>, because that's what checking the id. Instead, think about how the <code>ClientSession</code> can fail when you use it like this, trigger this behavior in your tests using dependency injection and mocking, and check that you're handling it however you need to.</p>
<p>So instead of constructing the client session in the function, you can pass it as a parameter:</p>
<pre><code>async def get_access_token(client):
    auth_path = 'https://us.battle.net/oauth/token'
    try:
        async with client.get(auth_path, params={'grant_type': 'client_credentials'}) as auth_response:
            assert auth_response.status == 200
            auth_json = await auth_response.json()
            return auth_json['access_token']
        # etc.
</code></pre>
<p>And then you create an object in your test that throws whatever exception <code>ClientSession</code> throws with invalid parameters. </p>
<p>You can create your fake object like this:</p>
<pre><code>class MockSession:
    def __init__(self):
        pass
    def get(pathname, params):
        raise aoihttp.InvalidURL
</code></pre>
<p>and use it in a test like this</p>
<pre><code>class TestAccessToken(unittest.TestCase):
    def test_handle_invalid_url(self):
        invalid_client = MockSession()
        self.assertIsNone(get_access_token(invalid_client))  # or whatever you want to happen
</code></pre>
<p><code>unittest.mock</code> gives you an easy way to configure this behavior without having to create the object. E.g.</p>
<pre><code>from unittest import mock
class TestAcccessToken(unittest.TestCase):
    def test_invalid_url(self):
        # Create a mock client that raises InvalidUrl when you call `get()` on it
        client = mock.MagicMock()
        client.get = mock.Mock(side_effect=KeyError())
        self.assertIsNone(get_access_token(client))
</code></pre>
<p>(Advanced mocking features can probably get you there without modifying your code, but I usually find it simplest to just pass in the collaborators as shown above.)</p>
</div>
<span class="comment-copy">Perhaps you can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a> or another mocking library.</span>
<span class="comment-copy">you can either use a <code>fixture</code> or the <code>monkeypatching</code> ability of <code>pytest</code></span>
<span class="comment-copy">Honestly I'm still confused. I get that I can require the credentials as an argument in the function and then pass fake credentials from the test case. But what if I also want to test "auth_path" with an invalid url? Should I always be passing variables to other functions for the sake of testing?  I've been reading the documentation on mocks and fixtures but I'm still not sure how to apply it to my example.</span>
<span class="comment-copy">@mroth7684 See edit. (Realistically, I'd probably have the url in some sort of configurable setup instead of hardcoding it in the method, but it's not needed to get your tests working.)</span>
<span class="comment-copy">Thank you for posting an informative answer. It really helps to learn when you can apply an example that relates to what your doing. The guides and documentation out there had me lost and confused even for this basic mock.</span>
