<div class="post-text" itemprop="text">
<p>I'm new in python. I have this class User, which I only need the username near the "self" in the <strong>init</strong> expression. 
I'm changing the first_name using the <strong>add_first_name</strong>, and the last_name using the <strong>add_last_name</strong> . It's possible to abbreviate this in order to avoid repeating? </p>
<pre><code>class User:
    def __init__(self, username):
        self.username = username
        self.first_name = ""
        self.last_name = ""

    def add_first_name(self, fn)
        self.first_name = fn

    def add_last_name(self, ln)
        self.last_name = ln
</code></pre>
<p>To something like this (pseudo code):</p>
<pre><code>def add_parameter(parameter, value)
     parameter = value 
</code></pre>
<p>In which I would call something like: add_parameter(self.first_name = "Jonh") in order to avoid repeating</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess I will throw my hat in the ring for this since no one else has mentioned using <code>@property</code>. It's as easy as</p>
<pre><code>class User:
    def __init__(self, username):
        self.username = username
        self.first_name = ""
        self.last_name = ""

    @property
    def first_name(self):
        # Here you can modify first_name however you want before you return it
        return self.first_name

    @first_name.setter
    def first_name(self, fn):
        # Here you can modify fn however you want before you set it.
        self.first_name = fn

    @property
    def last_name(self):
        # Here you can modify last_name however you want before you return it
        return self.last_name

    @last_name.setter
    def last_name(self, ln):
        # Here you can modify ln however you want before you set it.
</code></pre>
<p>Now you might think that this is incredibly verbose and you're right! But there's two reasons for that. The first is that in Python it's unusual to have getters and setters (not to say that there's never a place for them). The second reason that this seems pretty verbose is because it actually does something much nicer than just creating <code>get_first_name</code> or <code>set_first_name</code>. It allows you to do:</p>
<pre><code>u = User("test_user")
u.first_name = "Test"
u.last_name = "User"
print(u.first_name)
&gt;&gt;&gt; "Test"
</code></pre>
<p>which will invoke the getters and setters for you automatically without you needing to actually write out the full function call. Is it purely syntactic sugar? Yeah sure, but since getters and setters aren't standard in Python it also helps others follow your code a bit more easily.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can directly set attributes, without any setters, or getters.</p>
<pre><code>class User:
    def __init__(self, username):
        self.username = username
        self.first_name = ""
        self.last_name = ""


user = User("some name")
user.first_name = "John"
user.last_name = "Smith"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way is to just directly access the attributes:</p>
<pre><code>class User:
    def __init__(self, username):
        self.username = username
        self.first_name = ""
        self.last_name = ""


user = User("")
user.first_name = "John"
user.last_name = "Smith"
</code></pre>
<p>You can also use the <code>__getattribute__</code> and <code>__setattr__</code> methods to control how the attributes are accessed:</p>
<pre><code>class User:
    def __init__(self, username):
        self.username = username
        self.first_name = ""
        self.last_name = ""
    def __setattr__(self, name, value):
        #Set attribute
    def __getattr__(self, name):
        #Get attribute

user = User("")
user.first_name = "John"
user.last_name = "Smith"
</code></pre>
<p>Just change "#Set attribute" and "#Get attribute" with your code to set or get the attributes.</p>
</div>
<span class="comment-copy">Is there any reason you have to use setters? Can't you just set the attributes directly?</span>
<span class="comment-copy">Why have setters at all?</span>
<span class="comment-copy">If you're coming from a language other than Python then this may be odd to you, but in Python it's uncommon to have setters and getters unless they are explicitly necessary (ie, you're actually going to transform the value or do some error checking). And even when you think you need getters and setters, it would be more appropriate to use a <code>@property</code>. See here: <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html#properties</a></span>
<span class="comment-copy">Just <i>don't use a setter</i></span>
<span class="comment-copy">Why? Because some of my background in other langs, adding that I found out an example in doc that uses it:  <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/classes.html</a> . Also thanks @NickChapman for that reference</span>
<span class="comment-copy">I mark your answer accepted since Its the thing that I was looking for related to the question itself, and its really interesting, and its an official feature... Other answers are acceptable for me too, and I'm balancing with both sides - I'm not paying to much attention about setters and getters since I guess python drives one in that way. And the golden part in your answer for me is: <i>helps others follow your code a bit more easily</i></span>
