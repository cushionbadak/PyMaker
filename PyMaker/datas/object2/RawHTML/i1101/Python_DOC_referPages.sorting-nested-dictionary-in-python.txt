<div class="post-text" itemprop="text">
<p>I have dictionary like this:</p>
<pre><code>input = {9: { 3: 0.0003 , 2: 0.0002}, 8: {1: 100.0, 2: 50.0, 3: 300.0}}
</code></pre>
<p>Output must be like this:</p>
<pre><code>output = {8: {2: 50.0, 1: 100.0, 3: 300.0}, 9: {2: 0.0002, 3: 0.0003}}
</code></pre>
<p>Tried <code>OrderedDict</code> , <code>sorted</code> etc. but still not get my desired output.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to apply <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collectiobs.OrderedDict()</code></a> twice to get inner and outer sorted dictionaries:</p>
<pre><code>from collections import OrderedDict
from operator import itemgetter

data = {9: { 3: 0.0003 , 2: 0.0002}, 8: {1: 100.0, 2: 50.0, 3: 300.0}}

result = OrderedDict(
    sorted(
        (k, OrderedDict(sorted(v.items(), key=itemgetter(1))))
        for k, v in data.items()
    )
)

print(result)
</code></pre>
<p>Which gives:</p>
<pre><code>OrderedDict([(8, OrderedDict([(2, 50.0), (1, 100.0), (3, 300.0)])), (9, OrderedDict([(2, 0.0002), (3, 0.0003)]))])
</code></pre>
<p><strong>Note:</strong> <code>OrderedDict</code> is only needed for &lt; Python 3.6, since dictionary order is not maintained. Otherwise, you can rely on ordered insertion of keys and sort them normally, as seen in <a href="https://stackoverflow.com/questions/53943591/sorting-nested-dictionary-in-python/53943632#53943632">@U9-Forwards's</a> answer. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>OrderedDict</code> instead, as how @timgeb mentions dictionaries have arbitrary order prior to CPython3.6:</p>
<pre><code>from collections import OrderedDict
OrderedDict(sorted(d.items()))
OrderedDict([(8, {1: 100.0, 2: 50.0, 3: 300.0}), (9, {3: 0.0003, 2: 0.0002})])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <em>dict comprehension</em> with <code>sorted</code> twice:</p>
<pre><code>&gt;&gt;&gt; input = {9: { 3: 0.0003 , 2: 0.0002}, 8: {1: 100.0, 2: 50.0, 3: 300.0}}
&gt;&gt;&gt; {k:dict(sorted(v.items())) for k,v in sorted(input.items())}
{8: {1: 100.0, 2: 50.0, 3: 300.0}, 9: {2: 0.0002, 3: 0.0003}}
&gt;&gt;&gt; 
</code></pre>
<p>For python versions under 2.7, use:</p>
<pre><code>&gt;&gt;&gt; input = {9: { 3: 0.0003 , 2: 0.0002}, 8: {1: 100.0, 2: 50.0, 3: 300.0}}
&gt;&gt;&gt; dict([(k,dict(sorted(v.items()))) for k,v in sorted(input.items())])
{8: {1: 100.0, 2: 50.0, 3: 300.0}, 9: {2: 0.0002, 3: 0.0003}}
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">1. You only want to sort then outer level? 2. Are you aware that dictionaries have arbitrary order prior to CPython3.6? 3. WHY do you want to sort a dictionary? 4. Please show your attempt with <code>OrderedDict</code>.</span>
<span class="comment-copy">@timgeb Yup, i was ready to tell him that too :-)</span>
<span class="comment-copy">@timgeb i have tried this   1. OrderedDict(sorted(input.items()))  2. {k: (dict(v.items(), key=operator.itemgetter(1))) for k,v in input.items()}  3. dict(sorted(input.items(), key=lambda (x,y): (x,sorted(y.items(), key=lambda (a,b): b))))</span>
<span class="comment-copy">Thanks bro it works for me.</span>
<span class="comment-copy">your proposed solution doesn't match with my desired output as mentioned above in my question.</span>
<span class="comment-copy">This is not available for all python versions. Just as a note.</span>
<span class="comment-copy">@Netwave Thanks for the note, i'll edit.</span>
<span class="comment-copy">i think it is under python3.6</span>
<span class="comment-copy">@Netwave No. python2.7</span>
<span class="comment-copy">I think Netwave wasn't talking about the dict comprehension syntax ;)</span>
