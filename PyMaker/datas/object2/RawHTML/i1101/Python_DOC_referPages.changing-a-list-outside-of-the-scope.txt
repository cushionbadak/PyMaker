<div class="post-text" itemprop="text">
<p>I'm trying to remove an item from a list , like so:</p>
<pre><code>TodoList=[{'ID':5,'TodoItem':'walk','isDone':False}];

def RemoveItem(ID):
     if not any(todoItem['ID'] == ID for todoItem in TodoList):
          return 'item does not exist';

     RemovedList=list(filter(lambda todoItem:todoItem['ID']!= ID,TodoList))
     TodoList=RemovedList
</code></pre>
<p>does not work, I also tried this:</p>
<pre><code> def RemoveItem(ID):
         nonlocal TodoList
         if not any(todoItem['ID'] == ID for todoItem in TodoList):
              return 'item does not exist';

         TodoList=list(filter(lambda todoItem:todoItem['ID']!= ID,TodoList))
</code></pre>
<p>does anyone know whats the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>One possible fix.</p>
<p>Passing the todo list (list of dict) as parameter, so it mutates:</p>
<pre><code>TodoList=[{'ID':5,'TodoItem':'walk','isDone':False}, {'ID':6,'TodoItem':'talk','isDone':True}]

def RemoveItem(ID, TodoList):
     if not any(todoItem['ID'] == ID for todoItem in TodoList):
          print('item does not exist');
     else:
      for item in TodoList:
        if item['ID']== ID: TodoList.remove(item)


RemoveItem(5, TodoList)

print(TodoList)
#=&gt; [{'ID': 6, 'TodoItem': 'talk', 'isDone': True}]
</code></pre>
<p><hr/>
For your solution to work you need to return:</p>
<pre><code>def RemoveItem(ID, TodoList):
     if not any(todoItem['ID'] == ID for todoItem in TodoList):
          return 'item does not exist';
     else:
      return list(filter(lambda todoItem:todoItem['ID']!= ID, TodoList))


print(RemoveItem(5, TodoList))
#=&gt; [{'ID': 6, 'TodoItem': 'talk', 'isDone': True}]
</code></pre>
<p>This is because the line <code>list(filter(lambda todoItem:todoItem['ID']!= ID, TodoList))</code> doesn't mutate the list, it extracts elements based on condition.</p>
<p>But it is better to return the list itself if there is no item to delete, instead of returning a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>A possible solution is to find the index of the item with id and use <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">pop</a>:</p>
<pre><code>todo_list = [{'ID': 5, 'TodoItem': 'walk', 'isDone': False}]


def remove_item(ID):
    if not any(todoItem['ID'] == ID for todoItem in todo_list):
        return 'item does not exist'

    # get index of id
    idx = next(i for i, e in enumerate(todo_list) if e['ID'] == ID)

    # remove and return
    return todo_list.pop(idx)


print(remove_item(4))
print(remove_item(5))
print(todo_list)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>item does not exist
{'isDone': False, 'ID': 5, 'TodoItem': 'walk'}
[]
</code></pre>
<p>The problem with your first attempt is that when you do: <code>TodoList=RemovedList</code> inside of a function, it creates a new local variable inside the function, even if there is a global variable with the same name. In your second attempt, you need to set to global instead of nonlocal:</p>
<pre><code>todo_list = [{'ID': 5, 'TodoItem': 'walk', 'isDone': False}]

def RemoveItem(ID):
    global todo_list
    if not any(todoItem['ID'] == ID for todoItem in todo_list):
        return 'item does not exist';

    todo_list = list(filter(lambda todoItem: todoItem['ID'] != ID, todo_list))


RemoveItem(5)
print(todo_list)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[]
</code></pre>
<p><strong>Further</strong></p>
<ol>
<li>Documentation on <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer">global</a></li>
</ol>
</div>
<span class="comment-copy">What exactly is the error? Also, I hope you realize that your initial <code>TodoList</code> is a dictionary but then RemovedList is mapped to a list. Can you provide a working code which people can copy paste and try running</span>
<span class="comment-copy">im sorry, I fixed it, its a list containing a dictionary, and I get an error in the first one, TodoList' referenced before assignment and the second one, TodoList is not bound.</span>
<span class="comment-copy"><code>TodoList[0].pop('ID', None)</code> should do the trick.</span>
<span class="comment-copy">how does it should work if the <code>TodoList</code> not exists inside the function and should give you the <code>UnboundLocalError</code>?</span>
<span class="comment-copy">ok thank you, but why my solution doesn't work?</span>
<span class="comment-copy">@AlexK, because you need to return, see the edit.</span>
<span class="comment-copy">What i'm trying to do is to alt the TodoList without returning a new item..</span>
<span class="comment-copy">Ok, but this line does not mutate the list, it just extract the elements which comply with the condition: <code>print(list(filter(lambda todoItem:todoItem['ID']!= 5, TodoList)))</code>. So you need to stick with something like my first snippet or one like @Daniel Mesejo</span>
<span class="comment-copy">ok, thank you!!</span>
