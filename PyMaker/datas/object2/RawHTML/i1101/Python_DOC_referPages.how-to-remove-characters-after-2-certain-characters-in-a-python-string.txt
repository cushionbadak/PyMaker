<div class="post-text" itemprop="text">
<p>Lets say I have a bunch of strings, and they can only be in the following formats:</p>
<pre><code>format1 = 'substring1#substring2'
format2 = 'substring1$substring2'
format3 = 'substring1'
</code></pre>
<p>Let me explain. The strings are <strong>sometimes</strong> divided using the <code>#</code> or <code>$</code> character. However other times, they are not.</p>
<p>I want to remove the part that appears after the <code>#</code> or <code>$</code>, if it exists. If it was just one special character, that is <code>#</code>, I could have done this:</p>
<pre><code>string = string.split('#')[0]
</code></pre>
<p>But how can I do it for the 2 special characters in a quick and elegant way? Also assume the following things:</p>
<ol>
<li>Only one special character can appear in the string.</li>
<li>The special characters will not appear in any other part of the string.</li>
</ol>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to avoid regex, one possibility would be:</p>
<pre><code>string = min(string.split('#')[0], string.split('$')[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions.</p>
<pre><code>import re
re.sub('[$#].*', '', string_to_modify)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use regex!</p>
<pre><code>import re
new_string = re.sub(r"(#|$).*$", "", string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use re.split() for it.</p>
<pre><code>import re 
print(re.split("#|$","STRING#OTHER_STRING#OTHER_STRING_2"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">replace</a> before split:</p>
<pre><code>format1 = 'substring1#substring2'
format2 = 'substring1$substring2'
format3 = 'substring1'

print(format1.replace('#', '$').split('$')[0])
print(format2.replace('#', '$').split('$')[0])
print(format3.replace('#', '$').split('$')[0])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>substring1
substring1
substring1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>for</code> loop to split by an arbitrary number of delimiters. Regular expression is typically less efficient than Python <code>str</code> methods.</p>
<pre><code>def converter(x, delims='#$'):
    for delim in delims:
        x = x.split(delim, maxsplit=1)[0]
    return x

format1 = 'substring1#substring2'
format2 = 'substring1$substring2'
format3 = 'substring1'

for value in [format1, format2, format3]:
    print(converter(value))

# substring1
# substring1
# substring1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use a list to maintain the special characters that can be used and for every of them check if is present in the string, when you find one execute the splitting process and retrieve only the left part like so:</p>
<pre><code>delimters = ["#","$"]

for symbol in delimters:
  if symbol in string1:
    left_part = string1.split(symbol)[0]
</code></pre>
<p>Now this approach has some disadvantages but is the simplest in my opinion. The problem is that if you have more than one string you need to nested loops.</p>
</div>
<span class="comment-copy">is <code>'STRING( (#|$)OTHER_STRING )?'</code> the actual string example or some regex you cooked up? If it is an actual string, what's up with the parentheses and the separator in the middle? Lastly, what is the expected result?</span>
<span class="comment-copy">Sorry I was referencing the regex syntax. Let me try to make it clearer.</span>
<span class="comment-copy">This is roughly equivalent to the regex <code>^(.*?)(?:[#$](.*))?$</code>.  Then just take the group you're interested in.</span>
<span class="comment-copy">How about you just do the split twice?</span>
<span class="comment-copy">Interesting. Any good reason to avoid regex?</span>
<span class="comment-copy">@darkhorse It's relatively slow compared to simple string operations.</span>
