<div class="post-text" itemprop="text">
<p>I am doing an intern writing a program to do gene matching.</p>
<p>For example:
File "A" contains some strings of gene type. (the original data is not sorted)
rs17760268
rs10439884
rs4911642
rs157640
rs1958589
rs10886159
rs424232
....</p>
<p>and file "B" contains 900 thousands of rs number like above (also not sorted)</p>
<p>My program now can get correct results, but I would like to make it more efficient. </p>
<p>Is there any algorithm that can be applied to this program? </p>
<p>BTW, I will try to make my program do multi-processing and see if it gets better performance.</p>
<pre><code>pseudocode:
read File "A" by string, append to A[]
A[] = rs numbers from File "A"

read File "B" by string
for gene_B in file_B_reader:
    for gene_A in A:
        if gene_A == gene_B:
            #append to result[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think there's a need to sort anything first.</p>
<ul>
<li>Process larger list B into a hashmap or hashset, O(n) amortized</li>
<li>Iterate over list A and remove from A if not in B, O(m)</li>
<li>return A</li>
</ul>
<p>Total: O(n + m)</p>
</div>
<div class="post-text" itemprop="text">
<p>Though your explanations are quite unclear, I guess that you are appending the A values to a list. Use a dictionary instead, and you can lookup A much more efficiently.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the description it appears you want <code>result[]</code> to contain <code>rs</code> strings that are in both <code>A</code> and <code>B</code> (aka <a href="https://en.wikipedia.org/wiki/Intersection" rel="nofollow noreferrer">Intersection</a>).</p>
<p>Your algorithm is <code>O(n*m)</code>, but you could easily improve this by sorting both files first (<code>O(n*logn)</code> for comparison based sorts), and then read from both at the same time, increasing position in one that has lower current <code>rs</code> number, and adding matches to <code>result[]</code> at the same time.</p>
</div>
<span class="comment-copy">what exactly do you append to result? the gene that was common in both files?</span>
<span class="comment-copy">All that has been posted is a program description. However, we need you to <a href="//stackoverflow.com/help/how-to-ask">ask a question</a>. We can't be sure what you want from us. Please <a href="https://stackoverflow.com/posts/54009378/edit">edit</a> your post to include a valid question that we can answer. Reminder: make sure you know <a href="//stackoverflow.com/help/on-topic">what is on-topic here</a>; asking us to write the program for you, suggestions, and external links are off-topic.</span>
<span class="comment-copy">please read <a href="https://stackoverflow.com/help/mcve">how to ask questions</a> without any reproducible examples we can't do much for you.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">reading-and-writing-files</a> and  <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a> or <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">frozensets</a> should help you make your pseudocode into a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">And if neither list fits in memory?</span>
<span class="comment-copy">Good question.  The OP would need to solve a slightly different problem.  Assuming  2-byte character encoding, and 11 chars for each "gene", then I think the space required for storage is 2 * 11 * 1e6(bumped up to 1 million genes) = 2.2e7B or 22MB.  I think it's safe to assume most devices will have enough memory available.  If OP has restrictions then they should mention that in their request.</span>
<span class="comment-copy">Would dictionary be better than hashmap in this case?</span>
<span class="comment-copy">I believe dictionary is the generic term. Hashmap/set is generally an implementation. Python <a href="https://dbader.org/blog/python-dictionaries-maps-and-hashtables" rel="nofollow noreferrer">dictionaries, maps, hashmap,...</a> all seem to refer to a similar structure.</span>
<span class="comment-copy">You probably mean O(nm) ?</span>
<span class="comment-copy">Oh, yeah, thanks, fixed that.</span>
