<div class="post-text" itemprop="text">
<p>I have this text file:</p>
<pre><code>Category;currency;sellerRating;Duration;endDay;ClosePrice;OpenPrice;Competitive?
Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Music/Movie/Game;US;3249;5;Mon;0,01;0,01;No

Automotive;US;3115;7;Tue;0,01;0,01;No

Automotive;US;3115;7;Tue;0,01;0,01;No

Automotive;US;3115;7;Tue;0,01;0,01;Yes
</code></pre>
<p>There is in the actual file no whitspaces, but otherwise it would display wrong. I want to calculate the median from each categorie. So for example I want to calculate the median from sellerRating. I have this so far (because I also needed to calculate the averages but I managed to do that):</p>
<pre><code>import csv
import locale
import statistics
from pprint import pprint, pformat

import locale

locale.setlocale(locale.LC_ALL, 'Dutch_Netherlands.1252')

avg_names = 'sellerRating', 'Duration', 'ClosePrice', 'OpenPrice'
averages = {avg_name: 0 for avg_name in avg_names}


num_values = 0
 with open('bijlage.txt', newline='') as bestand:
     csvreader = csv.DictReader(bestand, delimiter=';')
     for row in csvreader:
        num_values += 1
        for avg_name in avg_names:
             averages[avg_name] += locale.atof(row[avg_name])


for avg_name, total in averages.items():
averages[avg_name] = total / num_values

print('raw results:')
pprint(averages)

print() 
print('Averages:')
for avg_name in avg_names:
    rounded = locale.format_string('%.2f', round(averages[avg_name], 2),
                               grouping=True)
    print('  {:&lt;13} {:&gt;10}'.format(avg_name, rounded))
</code></pre>
<p>I tried to do this:
    import statistics
    print (statistics.median(averages)
But that does not work.
Can anyone help me because I have no clue where to go from here?
Many thanks in advance!!</p>
</div>
<div class="post-text" itemprop="text">
<p>to expand on what Guarav recommended, use pandas:  </p>
<pre><code>import pandas as pd
import locale

avg_names = 'sellerRating', 'Duration', 'ClosePrice', 'OpenPrice'
frame = pd.read_csv(open('bijlage.txt'), delimiter=';')
# now you can access columns like a dictionary
frame['sellerRating'].median() # this will give you the median of the entire column

avg = [frame[i].apply(locale.atof).median() if frame[i].dtype == object else frame[i].median() for i in avg_names]
print(avg)
</code></pre>
<p>to explain what happening in the comprehension:<br/>
we go column by column, converting comma delimited floats into dot delimited floats if needed(the apply function), then we get the median of the entire column</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://pandas.pydata.org" rel="nofollow noreferrer">pandas</a> library for manipulation, because all the code will be reduce to few lines code and it will let you access the content in data frame. For more you need to read documentation, if you want to do by this way only let me know</p>
<p>Edit:
Here is the Code</p>
<pre><code>import pandas as pd
data = pd.read_csv('test.txt', sep=";")
data['sellerRating'].median()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After running your code, I get the following results:</p>
<pre><code>raw results:
{'ClosePrice': 0.009999999999999998,
 'Duration': 5.6,
 'OpenPrice': 0.009999999999999998,
 'sellerRating': 3208.8}

Averages:
  sellerRating    3.208,80
  Duration            5,60
  ClosePrice          0,01
  OpenPrice           0,01
</code></pre>
<p>Which looks correct for <em>averages</em>, but I believe you want <em>medians</em>, which is very different. The median is the <em>middle</em> value, not the <em>total / sum</em>. The median should always already exist in the dataset. </p>
<p>You can instead collect your values in some sort of data structure and find the middle value. An easy way is to use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> to store all your data beforehand. The idea is parse your file, add the data to the defaultdict and get the medians with <a href="https://docs.python.org/3/library/statistics.html#statistics.median" rel="nofollow noreferrer"><code>statistics.median()</code></a> at the end.</p>
<p><strong>Demo:</strong></p>
<pre><code>from csv import DictReader

from collections import defaultdict
from statistics import median

from locale import setlocale
from locale import LC_ALL
from locale import atof

setlocale(LC_ALL, 'Dutch_Netherlands.1252')

median_names = 'sellerRating', 'Duration', 'ClosePrice', 'OpenPrice'

data = defaultdict(list)
with open('data.txt') as f:
    csvreader = DictReader(f, delimiter=';')
    for dic in csvreader:
        for header, value in dic.items():
            data[header].append(value)

for median_name in median_names:
    med = median(map(atof, data[median_name]))
    print('{:&lt;13} {:&gt;10}'.format(median_name, med))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>sellerRating      3249.0
Duration             5.0
ClosePrice          0.01
OpenPrice           0.01
</code></pre>
<p>Which now makes sense to be medians, since all those values exist in the dataset.</p>
<p>You can also format the above results to be more accurate with the original dataset, but I'll leave that up to you.  </p>
</div>
<span class="comment-copy">"But that does not work" is not sufficient information to know what you did wrong...</span>
<span class="comment-copy">Also, <code>import pandas; df = pandas.read_csv('bijlage.txt', sep=";"); print(df.median())</code>.</span>
<span class="comment-copy">@josse-lardinois  can you send me the result of this? <code>pprint(averages)</code></span>
<span class="comment-copy">@LexBryan This is the result: {'ClosePrice': 38.84837706511181,  'Duration': 6.540330417881438,  'OpenPrice': 14.21424684159374,  'sellerRating': 3760.90573372206}</span>
<span class="comment-copy">@JosseLardinois basically you just want to get the median among those different, averages, right?</span>
<span class="comment-copy">A library recommendation alone does not answer the question. The OP gave a sample file, why have you not completed your suggested approach?</span>
<span class="comment-copy">At end i asked whether he needs further help add comment. currently I am not having laptop in my hand so i added the last line so that he can get further help in the same thread. Sorry in case you find it incomplete answer</span>
<span class="comment-copy">It is an incomplete answer, but you don't have to apologise to me. I'm on my phone so I can't (and therefore won't) post an answer because it cannot address the code that the OP posted.</span>
<span class="comment-copy">To the people upvoting this; imagine you were in the OP's position. Does this really solve the brick wall you've found yourself against? Defaulting to pandas (and then, on top, not elaborating) is <i>not helpful</i> to someone struggling.</span>
