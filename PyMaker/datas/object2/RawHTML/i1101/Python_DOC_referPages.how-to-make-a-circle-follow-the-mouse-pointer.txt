<div class="post-text" itemprop="text">
<p>I am trying to make 2D shooter with Python <code>tkinter</code>.<br/>
Here are my progress:</p>
<pre><code>from tkinter import *

root = Tk()

c = Canvas(root, height=500, width=500, bg='blue')
c.pack()

circle1x = 250
circle1y = 250
circle2x = 250
circle2y = 250

circle1 = c.create_oval(circle1x, circle1y, circle1x + 10, circle1y + 10, outline='white')
circle2 = c.create_rectangle(circle2x, circle2y,circle2x + 10, circle2y + 10)

pos1 = c.coords(circle1)
pos2 = c.coords(circle2)

c.move(circle1, 250 - pos1[0], 250 - pos1[2])
c.move(circle2, 250 - pos1[0], 250 - pos1[2])

beginWall = c.create_rectangle(0, 200, 500, 210, outline='white')

def move_circle(event):
   pass

c.bind('&lt;Motion&gt;', move_circle)

root.mainloop()
</code></pre>
<p>But I am trying to make the function called <code>move_circle</code> make <code>circle1</code> and <code>circle2</code> follow the mouse pointer . Something like this <code>c.goto(circle1, x, y)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by modifying the coordinates of the two "circles" in the <code>move_circle()</code> event handler function. A simple calculation is done to make it so the centers of these two objects are positioned at the "tip" of the mouse pointer (see image below). </p>
<p>Note, I also modified your code to more closely follow the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 - Style Guide for Python Code</a> coding guidelines.</p>
<pre><code>import tkinter as tk

# Constants
CIRCLE1_X = 250
CIRCLE1_Y = 250
CIRCLE2_X = 250
CIRCLE2_Y = 250
SIZE = 10  # Height and width of the two "circle" Canvas objects.
EXTENT = SIZE // 2  # Their height and width as measured from center.

root = tk.Tk()

c = tk.Canvas(root, height=500, width=500, bg='blue')
c.pack()

circle1 = c.create_oval(CIRCLE1_X, CIRCLE1_Y,
                        CIRCLE1_X + SIZE, CIRCLE1_Y + SIZE,
                        outline='white')
circle2 = c.create_rectangle(CIRCLE2_X, CIRCLE2_Y,
                             CIRCLE2_X + SIZE, CIRCLE2_Y + SIZE)

pos1 = c.coords(circle1)
pos2 = c.coords(circle2)

c.move(circle1, 250-pos1[0], 250-pos1[2])
c.move(circle2, 250-pos1[0], 250-pos1[2])

begin_wall = c.create_rectangle(0, 200, 500, 210, outline='white')

def move_circles(event):
    # Move two "circle" widgets so they're centered at event.x, event.y.
    x0, y0 = event.x - EXTENT, event.y - EXTENT
    x1, y1 = event.x + EXTENT, event.y + EXTENT
    c.coords(circle1, x0, y0, x1, y1)
    c.coords(circle2, x0, y0, x1, y1)

c.bind('&lt;Motion&gt;', move_circles)

root.mainloop()
</code></pre>
<p>Here's a screenshot of it running on my Windows computer:</p>
<p><a href="https://i.stack.imgur.com/820em.png" rel="nofollow noreferrer"><img alt="screenshot of GUI app running" src="https://i.stack.imgur.com/820em.png"/></a></p>
</div>
<span class="comment-copy">Hi, Harry, welcome to Stack Overflow. I can't answer your question, but I can suggest you to use a better title for it. "I am trying to make a game" is not a question, and doesn't give the relevant information of what is your problem. How about renaming it to something like "How can I make a circle follow the mouse in tkinter?"?</span>
<span class="comment-copy">Ok thx I will try it</span>
<span class="comment-copy">when you halved it why did you type two //</span>
<span class="comment-copy">what does the root.mainloop() do?</span>
<span class="comment-copy">Harry: <code>//</code> is the <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">floor division</a> operator and is used so the result is an integer instead of floating-point value. <code>mainloop()</code> is a universal widget method that contains a loop that continually processes keyboard and mouse events from the user. All <code>tkinter</code> apps must call it at some point to give the GUI itself a chance to "run". Here's some <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/universal.html" rel="nofollow noreferrer">documentation</a> I found about it.</span>
<span class="comment-copy">Careful, <code>//</code> does <i>not</i> guarantee "an integer instead of floating-point value".  Conside <code>range(SIZE // 2)</code>  It works if <code>SIZE</code> is <code>10</code> but throws an error if <code>SIZE</code> is <code>10.0</code> -- you may still need an <code>int()</code> wrapper depending on what you're doing.  Perhaps it guarantees an <i>integral</i> value but not an <i>integer</i> one?</span>
<span class="comment-copy">@cdlane: While what you say is true, floor division of integers results in an integer rather than the floating-point value regular division would have producedâ€”exactly what's intended in this usage case. In fact everything would still work in this case if <code>SIZE</code> had been set to <code>10.5</code> so I guess it's not that important of a point.</span>
