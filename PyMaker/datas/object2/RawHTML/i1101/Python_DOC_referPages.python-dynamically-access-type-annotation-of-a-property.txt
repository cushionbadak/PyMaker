<div class="post-text" itemprop="text">
<p>Given the following class:</p>
<pre><code>class Test:
    def __init__(self, test_prop: str):
        self.__test_prop = test_prop
    @property
    def test_prop(self) -&gt; str:
        return self.__test_prop
</code></pre>
<p>How can I dynamically access the type annotation of <code>test_prop</code> either from the class or an instance?</p>
<p>The following does not work:</p>
<pre><code>t1 = Test('a')
import inspect
inspect.signature(t1.test_prop)
# TypeError: 'a' is not a callable object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to get the <code>property</code> object itself, without doing the dynamic lookup.  The <code>inspect</code> module has a function, <a href="https://docs.python.org/3/library/inspect.html#inspect.getattr_static" rel="nofollow noreferrer"><code>inspect.getattr_static</code></a> for that. Then we can use <code>signature</code> to get the signature of the <code>fget</code> attribute of that object. That's where <code>property</code> objects store the function they use to do the dynamic lookup.  </p>
<pre><code>from inspect import getattr_static, signature

print(signature(getattr_static(t1, 'test_prop').fget))
# (self) -&gt; str
</code></pre>
<p>The other two functions of a property are stored in the attributes <code>fset</code> and <code>fdel</code></p>
</div>
<span class="comment-copy">Thanks. Couldn't figure out how to get behind the descriptor.</span>
