<div class="post-text" itemprop="text">
<p>Suppose I have the following array in python:</p>
<pre><code>[
    {'id': [1,2,3]},
    {'name': [4,3,2]},
    {'age': [9,0,1]},
]
</code></pre>
<p>How would I load this into a pandas dataframe? Usually I do <code>pd.DataFrame</code> from a dict, but it's important for me to maintain the column order.</p>
<p>The final data should look like this:</p>
<pre><code>id     name       age
1      4          9
2      3          0
3      2          1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can construct a single dictionary and then feed to <code>pd.DataFrame</code>. To guarantee column ordering is preserved, use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict

L = [{'id': [1,2,3]},
     {'name': [4,3,2]},
     {'age': [9,0,1]}]

df = pd.DataFrame(OrderedDict([(k, v) for d in L for k, v in d.items()]))

print(df)

   id  name  age
0   1     4    9
1   2     3    0
2   3     2    1
</code></pre>
<p>With Python 3.7+ <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">dictionaries are insertion ordered</a>, so you can use a regular <code>dict</code>:</p>
<pre><code>df = pd.DataFrame({k: v for d in L for k, v in d.items()})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A little hacky, but does </p>
<pre><code>pd.concat([pd.DataFrame(d_) for d_ in d], axis=1)
</code></pre>
<p>work?</p>
<p>(assuming </p>
<pre><code>d = your_list
</code></pre>
<p>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Or merge the list of dictionaries (<a href="https://stackoverflow.com/a/3495395/1293700">source</a>) and convert the result to a dataframe:</p>
<pre><code>merged_data = {}

[merged_data.update(d) for d in original_data]    
# or, b/c it's more pythonic:
# list(map(lambda x: merged_data.update(x), original_data))

df = pd.DataFrame.from_dict(merged_data)
df = df[['id', 'name', 'age']]

print(df)

# id  name  age
# 0   1     4    9
# 1   2     3    0
# 2   3     2    1
</code></pre>
<p>For me it's more clear and readable.</p>
</div>
<span class="comment-copy">how you need the final data to look ?</span>
<span class="comment-copy">@n1tk updated with output example.</span>
<span class="comment-copy">that works, thanks. Could you please explain what <code>axis=1</code> does?</span>
<span class="comment-copy">sure! <code>axis=0</code> is the default, and will concatenate dataframes vertically (ie if you have two dataframes of three columns and three rows, <code>axis=0</code> will make one with three columns and six rows. <code>axis=1</code> is the opposite, concatenates them horizontally, so you would have 6 columns and 3 rows. Since in this case you are creating 3 new dataframes of 3 rows and 1 column, to get the resulting 3x3 df you need to use <code>axis=1</code>. (more infor here: <a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.concat.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/version/0.23.4/generated/â€¦</a>)</span>
<span class="comment-copy">how do you know that the <code>dict</code> will preserve ordering? Is that an OrderedDict, or ?</span>
<span class="comment-copy">Thanks, I misunderstood your question. Nevertheless did you think about <a href="https://stackoverflow.com/a/41968766/1293700">reordering the columns</a>?</span>
<span class="comment-copy">I completed the example.</span>
