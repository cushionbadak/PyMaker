<div class="post-text" itemprop="text">
<p>I need to obtain the output shown below from FASTA file, but wihtout using BioPython. Anyone have an idea?</p>
<p>This is the code using BioPython:</p>
<pre><code>from Bio import SeqIO
records = SeqIO.parse("data/assembledSeqs.fa", "fasta")
for i, seq_record in enumerate(records):
    print("Sequence %d:" % i)
    print("Number of A's: %d" % seq_record.seq.count("A"))
    print("Number of C's: %d" % seq_record.seq.count("C"))
    print("Number of G's: %d" % seq_record.seq.count("G"))
    print("Number of T's: %d" % seq_record.seq.count("T"))
    print()
</code></pre>
<p>The FASTA file looks like this:</p>
<pre class="lang-none prettyprint-override"><code>&gt;chr12_9180206_+:chr12_118582391_+:a1;2 total_counts: 115 Seed: 4 K:    20 length: 79
TTGGTTTCGTGGTTTTGCAAAGTATTGGCCTCCACCGCTATGTCTGGCTGGTTTACGAGC
AGGACAGGCCGCTAAAGTG
&gt;chr12_9180206_+:chr12_118582391_+:a2;2 total_counts: 135 Seed: 4 K: 20 length: 80
CTAACCCCCTACTTCCCAGACAGCTGCTCGTACAGTTTGGGCACATAGTCATCCCACTCG
GCCTGGTAACACGTGCCAGC
&gt;chr1_8969882_-:chr1_568670_-:a1;113 total_counts: 7600 Seed: 225 K: 20 length: 86
CACTCATGAGCTGTCCCCACATTAGGCTTAAAAACAGATGCAATTCCCGGACGTCTAAAC
CAAACCACTTTCACCGCCACACGACC
&gt;chr1_8969882_-:chr1_568670_-:a2;69 total_counts: 6987 Seed: 197 K: 20   length: 120
TGAACCTACGACTACACCGACTACGGCGGACTAATCTTCAACTCCTACATACTTCCCCCA
TTATTCCTAGAACCAGGCGACCTGCGACTCCTTGACGTTGACAATCGAGTAGTACTCCCG
</code></pre>
<p>I need to obtain the following output:</p>
<pre class="lang-none prettyprint-override"><code>Sequence 0:
Number of A's: 14
Number of C's: 17
Number of G's: 24
Number of T's: 24

Sequence 1:
Number of A's: 17
Number of C's: 30
Number of G's: 16
Number of T's: 17

Sequence 2:
Number of A's: 27
Number of C's: 31
Number of G's: 12
Number of T's: 16

Sequence 3:
Number of A's: 31
Number of C's: 41
Number of G's: 20
Number of T's: 28
</code></pre>
<p>I've tried that, but I can't obtain the same output.</p>
<pre><code>def count_bases (fasta_file_name):
    with open(fasta_file_name) as file_content:
        for seqs in file_content:
            if seqs.startswith('&gt;'):
                for i, seq in enumerate('&gt;'):
                    print("Sequence %d:" % i)
            else:
                print("Number of A's: %d" % seqs.count("A"))
                print("Number of C's: %d" % seqs.count("C"))
                print("Number of G's: %d" % seqs.count("G"))
                print("Number of T's: %d" % seqs.count("T"))
                print()
    return bases

result = count_bases('data/assembledSeqs.fa')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>These code will work:</p>
<pre><code>def count_bases (fasta_file_name):
    sequece=''
    def count():
        if len(sequece):
            print("Number of A's: %d" % sequece.count("A"))
            print("Number of C's: %d" % sequece.count("C"))
            print("Number of G's: %d" % sequece.count("G"))
            print("Number of T's: %d" % sequece.count("T"))
            print()
    with open(fasta_file_name) as file_content:
        i=0
        for seqs in file_content:
            if seqs.startswith('&gt;'):
                count()
                print("Sequence %d:" % i)
                i=i+1
                sequece=''
            else:
                sequece=sequece+seqs.strip()
        count()

result = count_bases('data/assembledSeqs.fa')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems to work. It uses the regular expression <code>re</code> module to recognize header lines and get the total length of the following nucleotide sequence. This value is used to determine the number of following lines of data to read and concatenate together.</p>
<p>Because it actually parses info in the sequence headers, it should be able to handle sequences of any length.</p>
<p>I don't know what the official total number of bases there can be per line, but it appears to be 60 in the sample fasta file, so that has been hard-coded into the code.</p>
<pre><code>import re

pattern = r"""&gt;.+?length:\s(\d+)"""
regex = re.compile(pattern)

MAX_PER_LINE = 60

def count_bases (fasta_file_name):
    bases = None  # Undefined.

    with open(fasta_file_name) as inp:
        i = 0  # Sequence counter.
        line = next(inp, None)  # Read first line.
        while line:
            match = regex.search(line)
            if match:
                length = int(match.group(1))
                nlines = (length + MAX_PER_LINE-1) // MAX_PER_LINE
                # Read and concatenate data from the required number of lines.
                seqs = ''.join(next(inp).rstrip() for _ in range(nlines))

                print("Sequence %d:" % i)
                print("Number of A's: %d" % seqs.count("A"))
                print("Number of C's: %d" % seqs.count("C"))
                print("Number of G's: %d" % seqs.count("G"))
                print("Number of T's: %d" % seqs.count("T"))
                print()
                i += 1

            line = next(inp, None)  # Read next line.

    return bases

fasta_file = 'assembledSeqs.fa'
result = count_bases(fasta_file)
</code></pre>
<p>Here's a variation that uses a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to count the number of all the bases at once. This might be faster that using the sequence <code>count</code> method separately for each oneâ€”and therefore useful if you have a large number to process.</p>
<pre><code>def count_bases (fasta_file_name):
    bases = None  # Undefined.

    with open(fasta_file_name) as inp:
        i = 0  # Sequence counter.
        line = next(inp, None)  # Read first line.
        while line:
            match = regex.search(line)
            if match:
                length = int(match.group(1))
                nlines = (length + MAX_PER_LINE-1) // MAX_PER_LINE
                # Read and concatenate data from the required number of lines.
                seqs = ''.join(next(inp).rstrip() for _ in range(nlines))

                print("Sequence %d:" % i)
                counter = Counter(seqs)  # Count the number of each base.
                for base in 'ACGT':
                    if base in counter:
                        print("Number of {}'s: {}".format(base, counter[base]))
                print()
                i += 1

            line = next(inp, None)  # Read next line.

    return bases
</code></pre>
</div>
<span class="comment-copy">Your FASTA record are spread over <b>three</b> lines. You have to aggregate these <b>three</b> lines, to get a whole FASTA record.</span>
<span class="comment-copy">Could you please improve the question? The question should be phrased in a way that it is helpful for future readers to understand what it is about.</span>
<span class="comment-copy">Thank you very much! It worked perfectly. I appreciate your help very much.</span>
