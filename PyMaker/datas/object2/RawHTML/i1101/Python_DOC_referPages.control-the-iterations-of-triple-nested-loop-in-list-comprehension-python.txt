<div class="post-text" itemprop="text">
<p>I have two iterables in Python, and I want to go over them in pairs:</p>
<pre><code>foo = (1, 2, 3)
bar = (4, 5, 6)

for (f, b) in some_iterator(foo, bar):
    print "f: ", f, "; b: ", b
</code></pre>
<p>It should result in:</p>
<pre><code>f: 1; b: 4
f: 2; b: 5
f: 3; b: 6
</code></pre>
<p><em>One</em> way to do it is to iterate over the indices:</p>
<pre><code>for i in xrange(len(foo)):
    print "f: ", foo[i], "; b: ", b[i]
</code></pre>
<p>But that seems somewhat unpythonic to me. Is there a better way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for f, b in zip(foo, bar):
    print(f, b)
</code></pre>
<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>
<p>In <strong>Python 2</strong>, <a href="https://docs.python.org/2/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>
returns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If
they are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive
temporary variable, and should be replaced by <code>itertools.izip</code> or
<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>
<pre><code>import itertools
for f,b in itertools.izip(foo,bar):
    print(f,b)
for f,b in itertools.izip_longest(foo,bar):
    print(f,b)
</code></pre>
<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.
<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.
When the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href="http://docs.python.org/library/itertools.html#itertools.izip_longest" rel="noreferrer">full story</a>.</p>
<p>In <strong>Python 3</strong>, <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>
returns an iterator of tuples, like <code>itertools.izip</code> in Python2.  To get a list
of tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are
exhausted, you would use
<a href="https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest" rel="noreferrer">itertools.zip_longest</a>.</p>
<hr/>
<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>
<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], 
                              ['red', 'blue', 'green']):
    print('{} {} {}'.format(num, color, cheese))
</code></pre>
<p>prints</p>
<pre><code>1 red manchego
2 blue stilton
3 green brie
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want the <code>zip</code> function.</p>
<pre><code>for (f,b) in zip(foo, bar):
    print "f: ", f ,"; b: ", b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The builtin <code>zip</code> does exactly what you want. If you want the same over iterables instead of lists you could look at itertools.izip which does the same thing but gives results one at a time.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is called <a href="http://docs.python.org/library/functions.html?highlight=zip#zip" rel="noreferrer"><code>zip</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use '<a href="https://docs.python.org/3.6/library/functions.html#zip" rel="noreferrer">zip</a>' function. Here is an example how your own zip function can look like</p>
<pre><code>def custom_zip(seq1, seq2):
    it1 = iter(seq1)
    it2 = iter(seq2)
    while True:
        yield next(it1), next(it2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>zip function solves the issue<br/>
Docs: <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer">ZIP Library function</a><br/></p>
<p>AIM: To put the output side by side
Problem:</p>
<pre><code>#value1 is a list
value1 = driver.find_elements_by_class_name("review-text")
#value2 is a list
value2 = driver.find_elements_by_class_name("review-date")

for val1 in value1:
    print(val1.text)
    print "\n"
for val2 in value2:
    print(val2.text)
    print "\n"
</code></pre>
<p>Output:<br/>
     review1<br/>
     review2<br/>
     review3<br/>
     date1<br/>
     date2<br/>
     date3<br/></p>
<p>Solution:</p>
<pre><code>for val1, val2 in zip(value1,value2):
    print (val1.text+':'+val2.text)
    print "\n"
</code></pre>
<p>Output:<br/>
review1:date1<br/>
review2:date2<br/>
review3:date3<br/></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>you can use 3 type in one dictionary :</strong></p>
<pre><code>def construct_dictionary_from_lists(names, ages, scores):
     end_str_dic = {}
     for item_name, item_age, score_item in zip(names, ages, scores):
         end_str_dic[item_name] = item_age, score_item
     return end_str_dic


print(
        construct_dictionary_from_lists(
            ["paul", "saul", "steve", "chimpy"],
            [28, 59, 22, 5], 
            [59, 85, 55, 60]
         )
      )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def ncustom_zip(seq1,seq2,max_length):
        length= len(seq1) if len(seq1)&gt;len(seq2) else len(seq2) if max_length else len(seq1) if len(seq1)&lt;len(seq2) else len(seq2)
        for i in range(length):
                x= seq1[i] if len(seq1)&gt;i else None  
                y= seq2[i] if len(seq2)&gt;i else None
                yield x,y


l=[12,2,3,9]
p=[89,8,92,5,7]

for i,j in ncustom_zip(l,p,True):
        print i,j
for i,j in ncustom_zip(l,p,False):
        print i,j
</code></pre>
</div>
<span class="comment-copy">@unutbu In Python 3, the function name is <code>itertools.zip_longest</code>, instead of <code>itertools.izip_longest</code> (basically <code>zip...</code> instead of <code>izip...</code> in the <code>itertools</code> module). It's a one character edit, otherwise I'd edit the super minor correction into your answer myself.</span>
<span class="comment-copy">@unutbu Why would I prefer OP's method over the <code>izip</code> one (even though the <code>izip</code>/ <code>zip</code> looks much cleaner)?</span>
<span class="comment-copy">You might want to mention Python 3 first, as it's probably more future-proof. Moreover, it*s worth pointing out that in Python 3, zip() has exactly that advantage that only itertools.izip() had in Python 2 and thus it is usually the way to go.</span>
<span class="comment-copy">May I ask you to update your answer to explicitly state that <code>zip</code> and <code>zip</code>-like functions from <code>itertools</code> accept any number of iterables and not just 2? This question is canonical now and your answer is the only one worth updating.</span>
<span class="comment-copy">@CharlieParker: Yes you can, but then you would use <code>for i, (f, b) in enumerate(zip(foo, bar))</code>.</span>
<span class="comment-copy">Before Python 3.0 you'd want to use <code>itertools.izip</code> if you have large numbers of elements.</span>
<span class="comment-copy">Doesn't this have exactly the same result as <code>zip(seq1, seq2)</code>?</span>
<span class="comment-copy">@NiklasMertsch yes it has exactly the same result. I just provided example how zip function looks like</span>
<span class="comment-copy">is this my answer is right?</span>
<span class="comment-copy">what is wrong in my answer.?</span>
<span class="comment-copy">As explained in the first comment, it is lacking explanation what your code is doing, why it is better/different from the other options, what its performance and memory implication are etc. Just a code dump is not  a good answer on Stack Overflow</span>
