<div class="post-text" itemprop="text">
<p>I have dictionary in python whose keys are tuples, like:</p>
<pre><code>my-dict={(1,'a'):value1, (1,'b'):value2, (1,'c'):value3, (2,'a'):value4, 
(2,'b'):value5,(3,'a'):value6}
</code></pre>
<p>I need to access all values whose keys have the same first argument. For example, I need to access</p>
<pre><code>{(1,'a'):value1, (1,'b'):value2, (1,'c'):value3}  
</code></pre>
<p>because all of them have <code>1</code> as the first element of the tuple key. One way is to use a <code>for</code> and <code>if</code>:</p>
<pre><code>for key in my-dict:
    if key[0]==1:
       do something
</code></pre>
<p>However, my actual dictionary  and data are very huge and this method takes a lot of time. Is there any other way to efficiently do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You lose out on the benefits of creating a dictionary if you have to search through all its keys again. A good solution would be to create another dictionary That holds all keys which start with the correct first element.</p>
<pre><code>my_dict={(1,'a'):'value1', (1,'b'):'value2', (1,'c'):'value3', (2,'a'):'value4', 
(2,'b'):'value5',(3,'a'):'value6'}

from collections import defaultdict

mapping = defaultdict(list) #You do not need a defaultdict per se, i just find them more graceful when you do not have a certain key.

for k in my_dict:
    mapping[k[0]].append(k)
</code></pre>
<p>Mapping now looks like this:</p>
<pre><code>defaultdict(list,
            {1: [(1, 'a'), (1, 'b'), (1, 'c')],
             2: [(2, 'a'), (2, 'b')],
             3: [(3, 'a')]})
</code></pre>
<p>Now Just use the dictionary to lookup the keys needed in your original dictionary.  </p>
<pre><code>first_element = 1
#Now just use the lookup to do some actions
for key in mapping[first_element]:
    value = my_dict[key]
    print(value)
    #Do something
</code></pre>
<p>Output:</p>
<pre><code>value1
value2
value3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a> built-in type maps hashable values to arbitrary objects. In your dictionary, the tuples <code>(1, 'a')</code>, <code>(1, 'b')</code>, etc. all have different hashes. </p>
<p>You could try using <a href="https://pandas.pydata.org/pandas-docs/stable/advanced.html" rel="nofollow noreferrer">Pandas multi-indexes</a> to accomplish this. <a href="https://pandas.pydata.org/pandas-docs/stable/advanced.html#creating-a-multiindex-hierarchical-index-object" rel="nofollow noreferrer">Here</a> is a good example.</p>
<p>Alternatively, as one of the comments suggested, a nested dictionary may be more appropriate here. You can convert it from <code>my_dict</code> via</p>
<pre><code>from collections import defaultdict

nested_dict = defaultdict(dict)  # not necessary, but saves a line
for tup_key, value in my_dict.items():
    key1, key2 = tup_key
    nested_dict[key1][key2] = value
</code></pre>
<p>Then something like <code>nested_dict[1]</code> would give you</p>
<pre><code>{'a':value1, 'b':value2, 'c':value3}  
</code></pre>
</div>
<span class="comment-copy">What you want is a true 2-dimensional mapping; <code>dict</code> is strictly 1-dimensional. You might try a nested <code>dict</code> where (for example) <code>d[1]['a'] == my_dict[(1,'a')]</code>.</span>
<span class="comment-copy">You might be better off structuring this as a nested dictionary. Something like <code>{1:{'a' :value1, 'b':value2}}</code>. Then you just need to do a lookup for 1 on the outer dictionary. With how you have things set up, you'll need to do manual iteration to gather results.</span>
<span class="comment-copy">Thank you very much for all the comments and answers!</span>
