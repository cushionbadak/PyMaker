<div class="post-text" itemprop="text">
<p>I have found that  </p>
<pre><code>a == b is not None
</code></pre>
<p>compared <code>a == b</code> and if it is True than executed <code>b is not None</code>.  </p>
<pre><code>(a == b) is not None  
</code></pre>
<p>and</p>
<pre><code>a == (b is not None)
</code></pre>
<p>Where can I find more information about such behavior?
It is quite simple, but I expected <code>True is not None</code> to be executed</p>
</div>
<div class="post-text" itemprop="text">
<p>This is documented in the language reference, <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">6.10. Comparisons</a>:</p>
<blockquote>
<p>Unlike C, all comparison operations in Python have the same priority, which is lower than that of any arithmetic, shifting or bitwise operation. Also unlike C, expressions like <code>a &lt; b &lt; c</code> have the interpretation that is conventional in mathematics:</p>
<pre><code>comparison    ::=  or_expr (comp_operator or_expr)*
comp_operator ::=  "&lt;" | "&gt;" | "==" | "&gt;=" | "&lt;=" | "!="
                   | "is" ["not"] | ["not"] "in"
</code></pre>
<p>Comparisons yield boolean values: <code>True</code> or <code>False</code>.</p>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
<p>Formally, if <em>a</em>, <em>b</em>, <em>c</em>, <em>…</em>, <em>y</em>, <em>z</em> are expressions and <em>op1</em>, <em>op2</em>, <em>…</em>, <em>opN</em> are comparison operators, then <code>a op1 b op2 c ... y opN z</code> is equivalent to <code>a op1 b and b op2 c and ... y opN z</code>, except that each expression is evaluated at most once.</p>
<p>Note that <code>a op1 b op2 c</code> doesn’t imply any kind of comparison between <code>a</code> and <code>c</code>, so that, e.g., <code>x &lt; y &gt; z</code> is perfectly legal (though perhaps not pretty).</p>
</blockquote>
<p>Both <code>==</code> and <code>is not</code> are comparison operators, so they chain as described above.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer">6.16 Operator Precedence</a></span>
