<div class="post-text" itemprop="text">
<p>I have a string like this:</p>
<pre><code>downloadFile":"/myportal/ABC/35/audio/182/audio?Id=996\u0026stepNo=0\u0026resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav
</code></pre>
<p>I need to change \u0026 (which is hex) to &amp; 
I even tried this --&gt; </p>
<pre><code>.replace("\u0026","&amp;")  
</code></pre>
<p>it didnt work</p>
</div>
<div class="post-text" itemprop="text">
<p>When it comes to URLs, make you a favor and use <code>urllib</code>, here you need <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote" rel="nofollow noreferrer"><code>urllib.parse.unquote</code></a></p>
<pre><code>import urllib.parse

url = "/myportal/ABC/35/audio/182/audio?Id=996\u0026stepNo=0\u0026resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav"
print(urllib.parse.unquote(url))
</code></pre>
<hr/>
<p><em>If it's Python2.x, use <code>import urllib</code> and <code>urllib.unquote()</code>.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this code !</p>
<p>It work fine.</p>
<pre><code>downloadFile ="/myportal/ABC/35/audio/182/audio?Id=996\u0026stepNo=0\u0026resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav"

print(downloadFile.replace("\u0026","&amp;"))
</code></pre>
<p><strong>Output :</strong></p>
<pre><code>/myportal/ABC/35/audio/182/audio?Id=996&amp;stepNo=0&amp;resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you could provide the error you are being thrown, however from what I can see there appear to be " quotation marks on the : colon sign after downloadFile which could be causing an error now you could escape them using a backslash () like so:</p>
<pre><code>yourVar = "downloadFile\":\"/myportal/ABC/35/audio/182/audio?Id=996\u0026stepNo=0\u0026resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav"
yourVar.replace("\u0026","&amp;")
</code></pre>
<p>And from what I have tried, this should be fine.</p>
<p>Optionally you could define the variable with ' single quotes, as this could allow your current string to work since the double quote " around the colon would be ignored:</p>
<pre><code>yourVar = 'downloadFile":"/myportal/ABC/35/audio/182/audio?Id=996\u0026stepNo=0\u0026resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav'
yourVar.replace("\u0026","&amp;")
</code></pre>
<p>This should be working just fine. 
<a href="https://i.stack.imgur.com/UG1oP.png" rel="nofollow noreferrer">For reference I have added what I ran in my console since the code worked fine for me</a></p>
<p>If the issue persists, please post what you ran and what error you received and I'll be sure to look into it further</p>
<p>Have a good one :)</p>
</div>
<div class="post-text" itemprop="text">
<p>None worked the only thing that worked for me is by using --&gt; \u0026  note double \</p>
<pre><code>myStr.replace("\\u0026","&amp;")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As my comment said, I guess the "\u0026" is an <strong>escaped</strong> string.</p>
<p>That is, the real input should be something like</p>
<pre><code>a = "\\u0026"
</code></pre>
<p>with double backslashes to enter a real "\".</p>
<p>Then, we may use <code>json.loads</code> as a tricky reverse function for <code>re.escape</code>, for example:</p>
<pre><code>import json
json.loads("{\"downloadFile\":\"/myportal/ABC/35/audio/182/audio?Id=996\\u0026stepNo=0\\u0026resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav\"}")
# output: 
# {'downloadFile': '/myportal/ABC/35/audio/182/audio?Id=996&amp;stepNo=0&amp;resource=996-0-dde82d48-3097-4835-a1e4-30602c460fd7-1.wav'}
</code></pre>
<p>Or wrap it into a function:</p>
<pre><code>def deescape(escaped):
    return str(json.loads("{\"s\":\"" + escaped + "\"}"))[7 : -2]

deescape("\\u0026") # return '&amp;'
</code></pre>
<p><strong>Update:</strong> This solution is not suitable if <code>escaped</code> contains ":". The real solution <a href="https://stackoverflow.com/questions/1885181">should be</a>:</p>
<pre><code># Python 2
def deescape(escaped)
    return escaped.decode('string_escape')

# Python 3
def deescape(escaped)
    return escaped.encode().decode('unicode_escape')
</code></pre>
</div>
<span class="comment-copy">Please show your attempt at this. Using that same code I get the correct result.</span>
<span class="comment-copy">I guess the original input is something like <code>a = "\\u0026"</code>, with 2 backslashes to input a real "\", and OP is asking for a reverse function of <code>re.escape</code>. However I can't find a good solution.</span>
<span class="comment-copy">If my guess is right, then all the answer at this time are wrong, since if we enter <code>a = "\u0026"</code> then <code>a</code> is now "&amp;", a normal escape, no need to convert.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1885181/how-do-i-un-escape-a-backslash-escaped-string-in-python">How do I un-escape a backslash-escaped string in python?</a></span>
