<div class="post-text" itemprop="text">
<p>I watched Raymond Hettinger's <a href="https://www.youtube.com/watch?v=OSGv2VnC0go&amp;t=912s" rel="nofollow noreferrer">Idiomatic Python</a> talk, and learned about  the <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">sentinel argument</a> to <code>iter()</code>.
 I'd like to try to apply it to a piece of code I'm working on iterating over an API that uses pagination (it's Twilio, but not relevant to my question).</p>
<p>I have an API that returns: a list of data, and a next page URL.  When the pagination is exhausted, the next page URL returns as an empty string.  I wrote the fetching function as a generator and looks roughly like this:</p>
<pre><code>def fetch(url):
    while url:
        data = requests.get(url).json()
        url = data['next_page_uri']
        for row in data[resource]:
            yield row
</code></pre>
<p>This code works fine, but I'd like to try to remove the <code>while</code> loop and replace it with a call to <code>iter()</code> using the <code>next_page_uri</code> value as the sentinel argument.
Alternately, could this be written with a <code>yield from</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this might be what you mean… but as stated in the comments, it doesn't help much:</p>
<pre><code>def fetch_paged(url):
    while url:
        res = requests.get(url)
        res.raise_for_status()
        data = res.json()
        yield data
        url = data['next_page_uri']

def fetch(url):
    for data in fetch_paged(url):
        yield from data[resource]
</code></pre>
<p>(I've taken the opportunity to put in a call to <code>raise_for_status()</code> which will <code>raise</code> for non-successful, i.e. <code>res.status_code &lt; 400</code>, responses)</p>
<p>not sure if it's any "better", but possibly if you're going to be reusing the <code>fetch_paged</code> functionality a lot</p>
<p>Note: lots of other APIs put this <code>next_page_uri</code> into the response headers in <a href="http://www.rfc-editor.org/rfc/rfc5988.txt" rel="nofollow noreferrer">standard ways</a> which the <code>requests</code> library knows how to deal with and exposes via the <a href="http://docs.python-requests.org/en/master/user/advanced/#link-headers" rel="nofollow noreferrer"><code>res.links</code></a> attribute</p>
</div>
<span class="comment-copy">You can’t use <code>iter</code> on <i>part</i> of a value.  You could write an adapter generator, but it’d be just as complicated as what you have now.</span>
<span class="comment-copy">It's worth noting that python3.6 throws a warning for the example version of the function.  In my actual code the inside of the <code>while</code> loop is in a <code>try</code>-<code>except to catch </code>StopIteration`.</span>
<span class="comment-copy">You want it to <i>yield</i> rows till the <code>'next_page_uri'</code> is an empty string?  Does it need to make a new request for each <i>next_page</i>.?</span>
<span class="comment-copy">Yes, as written currently, it makes a new request each time it exhausts <code>data[resource]</code> and then continues to yield additional rows from the next <code>request.get</code>.</span>
<span class="comment-copy">@Sethish: What here could raise <code>StopIteration</code>?</span>
<span class="comment-copy">Thanks! You're right, this type of pagination doesn't quite fit the idiom that I linked in the question. I tried <code>res.links</code> but alas, the Twilio api doesn't send their values that way: <code>ipdb&gt; data &lt;Response [200]&gt; ipdb&gt; data.links {}</code></span>
