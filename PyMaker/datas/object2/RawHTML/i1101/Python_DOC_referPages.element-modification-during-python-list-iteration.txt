<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6528848/change-value-of-currently-iterated-element-in-list">Change value of currently iterated element in list</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/15363138/scope-of-python-variable-in-for-loop">Scope of python variable in for loop</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>Could anyone, please, explain what exactly happens in the following code to the "element" during iteration?</p>
<pre><code>array = [2,3,4]
for element in array:
    element = 3
print(array)
</code></pre>
<blockquote>
<blockquote>
<blockquote>
<p><code>&gt;&gt;&gt;[2, 3, 4]</code></p>
</blockquote>
</blockquote>
</blockquote>
<p>Output is [2, 3, 4]
    instead of [3, 3, 3]</p>
<p>Did I understand it correctly that when using "for element in l" syntax, we can only reference but not modify each element of an array of what does happen here? </p>
<p>P.S. I've seen the question named "why shouldn't you iterate like 'for element in array' ", but I couldn't find that one, so I asked it in this way. Seems like I found one of the disadvantages of iterating in this way. Please, redirect me to the mentioned question if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Explanation</strong></p>
<p>In the above example any changes to variable element in the loop is not possible. </p>
<p><strong>Code</strong> </p>
<p>To get your expected output try this:</p>
<pre><code>array = [2,3,4]
for i in range(len(array)):
    array[i] = 3
print(array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When the iteration start element variable already has the current value in the array. when you assign 3 to it it will contain it until the next iteration when it will again take the current value of the array and so on. 
To get [3, 3, 3] you need to do it as the following:</p>
<pre><code>array = [2,3,4]
for i in range(0,len(array)):
    array[i]=3
print(array)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>element</code> is a local variable in the scope of the <code>for</code> loop.</p>
<p>Run this snippet. I hope it can be self-explanatory (I used <code>e</code> instead of <code>element</code>), also I used <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to get the index:</p>
<pre><code>array = [2,3,4]
for i, e in enumerate(array):
    print('i =', i, 'e =', e)
    e = 100
    print('e = 100--&gt;','e =', e, 'but array[i]=',array[i])
    array[i] = e
    print('array[i] = e --&gt; array[i]=',array[i])
    print('-'*10)

print(array) #=&gt; [100,100,100]
</code></pre>
<p><hr/><strong>Quick explanation</strong></p>
<p><code>e</code> and <code>i</code> are local variables which receive the value of the element and the index of the <code>array</code> at each iteration.
Inside the loop you can change the value of <code>e</code> but it doesn't affect the the <code>array</code>. To change the value inside the <code>array</code> it is required to access it by index (<code>array[i]</code>).</p>
</div>
<span class="comment-copy">its not even a reference, its more accurate to think of it as an assignment. so, <code>element = array[0] </code>for the first pass. after that, you just rebind the <code>element</code> name to something else. <code>array</code> has no reason to change.</span>
<span class="comment-copy">What do you mean "iterator is immutable during a for-loop", that's not true if I am understanding you correctly</span>
<span class="comment-copy">For loops do not create a scope. Scope is irrelevant here. It's a red herring</span>
