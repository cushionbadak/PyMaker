<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9383740/what-does-pythons-eval-do">What does Python's eval() do? </a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I am a newbie developer. I have used the code below but I would like to understand how the last line works, can someone please explain to me the last line <code>return eval(((str(a)+"*")*b)[:-1])</code> of the code?</p>
<pre><code>def power(a,b):
    if b == 0:
        return 1
    else:
        return eval(((str(a)+"*")*b)[:-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>eval evaluates python code or lets Python program run Python code within itself.
example: </p>
<pre>CODE:</pre>
<p><code>a = 15 
eval('print(a + 3)')</code></p>
<pre>OUTPUT:</pre>
<pre><code>18
</code></pre>
<p>when you return the following</p>
<pre><code>eval(((str(a)+"*")*b)[:-1])
</code></pre>
<p>what you basically doing is this( for example if you are computing power(2,5)):</p>
<pre><code>str(a) -&gt; changes the value of a to string. in this case "2"
str(a)+"*" -&gt; concatinate the above string to the multiplication sign. now we have "2*"
(str(a)+"*")*b) -&gt; duplicates the above string b times. That is "2*"+"2*"+"2*"+"2*"+"2*", that is five times and now you have "2*2*2*2*2*"
</code></pre>
<p>But as you can see there is an extra "*" at the end. To remove this one we use [:-1]. what this basically doing is select all except the last one. ":" basically means all.</p>
<p>so the final expression to be evaluated is <code>"2*2*2*2*2"</code>. which is 2^5.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>return eval(((str(a)+"*")*b)[:-1])</code></p>
<p>is equivalent to</p>
<pre><code>a_str=str(a)               # convert a in STRING
a_star=a_str+"*"           # concat the string a_str with "*"
a_repeted=a_star*b         # repeat a_star "b" times
exp=(a_repeted)[:-1]       # get all a_repeted car except the last on (ex 3*3*3*3 for a=3 and b=4)
res=eval(exp)              # evalutate the expression
return res
</code></pre>
<p>it'is equivalent to (really better ;-) !) :</p>
<pre><code>def power(a,b):
    return a ** b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A terrible idea, as others have said - if you're a newbie, consider finding a better guide!</p>
<p><code>eval</code> reads a string and evaluates it as if it were not (as if it is not in quotes). So we construct a string of <code>a ** b</code> (ie a^b), and ask Python to read it, then return all but the last character. Pretty pointless but there you go.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>eval()</code> is never a good idea to use. Read about its dangerous behaviour <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">here</a>.</p>
<p>You just need <a href="https://docs.python.org/3/reference/expressions.html#the-power-operator" rel="nofollow noreferrer"><strong><code>**</code></strong></a> operator which is equivalent to <code>^</code> (raise to) operator you see in other languages:</p>
<pre><code>def power(a,b):
    return a ** b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way is to use <code>a**b</code> for computing power. However, if you want to use eval then consider joining the string in this way: <code>eval('*'.join(str(a)*b))</code>. In this, str(a) will convert integer <code>a</code> to string <code>a</code> then <code>*b</code> will repeat the <code>a</code> <code>b times</code> and finally the <code>'*'.join()</code> will join all the <code>a</code>'s together with <code>*</code> in between and create a string something like <code>a*a*a*a</code>. <code>eval</code> will then evaluate the string as if it is an expression.</p>
</div>
<span class="comment-copy">This is really terrible code. If you want to compute powers, just use the <code>**</code> operator. If you want to use the task of computing powers as an opportunity to learn about computer programming basics, use a loop or recursion, not <code>eval</code>.</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/functions.html?highlight=eval#eval" rel="nofollow noreferrer">Python's <code>eval</code></a> builtin. In general, refer to <a href="https://docs.python.org/3/" rel="nofollow noreferrer">Python's documentation</a>. Indeed, that code is really bad. BTW, an excellent introduction to programming is <a href="https://mitpress.mit.edu/sicp/" rel="nofollow noreferrer">SICP</a> but does not use Python</span>
<span class="comment-copy">Nice question, too ... and even when closed out, you could accept an answer here, too. Which would actually push you to "upvote rights", which gives in more ways to appreciate, like when there are multiple helpful answers on a question ;-)</span>
<span class="comment-copy">I appreciate the assistance</span>
<span class="comment-copy">Noted. Thank you</span>
<span class="comment-copy">I wanted to avoid using a**b</span>
<span class="comment-copy">@T-Burg, Do you have scenarios where <code>b</code> is negative?</span>
<span class="comment-copy">Thank you. The explanation makes a lot of sense</span>
