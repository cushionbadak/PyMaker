<div class="post-text" itemprop="text">
<p>Before moving my code to SQLAlchemy, I have a MySQL query that looks for a value in multiple columns (ex - <code>WHERE 'value' in (col1, col2)</code>) which works fine when submitting the query manually to the database.</p>
<p>The use case above is relatively simple, but in the future I may want to run a similar query on more than two columns so just want to get ahead of this problem now.</p>
<p>Currently I have converted my query to the below (which works), but I am trying to find a similar syntax to the one above.</p>
<pre><code>metadata = sqlalchemy.MetaData(mydb, reflect=True)
select_stmt = (tbl_pbp.select(
              ((tbl_pbp.c.home_team == team_abbreviation) | (tbl_pbp.c.away_team == team_abbreviation))
              &amp; (tbl_pbp.c.is_corsi == True)))
</code></pre>
<p>When I try the below, I get a syntax error so not sure if it is an issue with the <code>in_</code> keyword I am trying to use.</p>
<pre><code>metadata = sqlalchemy.MetaData(mydb, reflect=True)
select_stmt = (tbl_pbp.select(
              (team_abbreviation in_(tbl_pbp.c.home_team, tbl_pbp.c.away_team)
              &amp; (tbl_pbp.c.is_corsi == True)))
</code></pre>
<p>Any help is greatly appreciated - thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to operate on a Python value as an SQL literal in <a href="https://docs.sqlalchemy.org/en/latest/core/tutorial.html" rel="nofollow noreferrer">SQL Expression Language</a> it must be wrapped with <a href="https://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.literal" rel="nofollow noreferrer"><code>literal()</code></a>. The resulting construct can then be used to produce the desired <code>IN</code> clause:</p>
<pre><code>literal(team_abbreviation).in_([tbl_pbp.c.home_team, tbl_pbp.c.away_team])
</code></pre>
<p>This is equivalent to producing a bunch of equality checks combined with <code>OR</code>, as is noted in the comments. The sole argument to <a href="https://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.in_" rel="nofollow noreferrer"><code>in_()</code></a> should be a suitable sequence, such as a list, in this case.</p>
<p>Note that <code>in_</code> here is a <em>method</em> of the SQLAlchemy construct, not the Python operator <code>in</code>, which cannot be overloaded to produce custom constructs due to how it treats the return value of <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a>: it implicitly converts to a <code>bool</code>:</p>
<pre><code>In [1]: class X:
   ...:     def __contains__(self, item):
   ...:         return 'nope'
   ...:     

In [2]: 1 in X()
Out[2]: True
</code></pre>
</div>
<span class="comment-copy">It would be appropriate to include the full traceback of the syntax error as your example isn't a MCVE so hard to reproduce the exception.</span>
<span class="comment-copy">That said, I believe <code>in_</code> is a method of a column, and it would be passed a collection of values. E.g. <code>stmt.where(column.in_([1, 2, 3]))</code>. So this: <code>team_abbreviation in_(tbl_pbp.c.home_team, tbl_pbp.c.away_team)</code> doesn't look right.</span>
<span class="comment-copy">If you want to check where one of multiple columns is equal to a value, then an <code>or_</code> would be more appropriate there. I.e. <code>or_(tbl_pbp.c.home_team == team_abbreviation, tbl_pbp.c.away_team == team_abbreviation)</code>. If you needed to test against a variable, or large number of columns, you'd just build the comparisons using a list comp and unpack into the <code>or_</code> func. E.g. <code>or_(*[col == val for col in columns])</code>.</span>
<span class="comment-copy">Your last comment is exactly what I was looking for and I can't believe I didn't think of it before - I'll give it a shot today. Just out of curiosity, what does the <code>*</code> before the list unpacking do? I don't think I've seen that syntax before.</span>
<span class="comment-copy">That <i>is</i> the unpacking. It passes the contents of the list into the function as individual positional arguments. <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
