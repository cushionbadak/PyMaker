<div class="post-text" itemprop="text">
<p>So I have a script that builds a list of commands, which I then feed to Popen to launch in parallel.  This works as I expect it to - but I'm trying to write something that will run a constrained number of these at the same time rather than the whole lot.  I've gotten this far:</p>
<pre><code>#! /usr/bin/env python3

import subprocess
from multiprocessing import Pool

cmd_list = []
cmd_list.append(['echo','zero', 'one'])
cmd_list.append(['echo','one'])
cmd_list.append(['echo','two'])    # and so on...

# each entry in cmd_list can now be run in a subprocess/subshell


pidlist = []

for cmd in cmd_list:
    pid = subprocess.Popen(cmd)
    pidlist.append(pid)

for cmd in cmd_list:
    pid.wait()

pool = Pool(2)    

## map or apply or queue or something here so I run only two "cmd"s until they're all done... 
</code></pre>
<p>I've been frantically googling and finding lots of examples using <code>map</code> and <code>apply</code> and workers and <code>queues</code> and frankly it all seems a little much - I think I have enough experience with python to know that there's got to be a simpler way to to this without re-mangling all of the command strings (which in my case can be several hundred characters long, but they <em>are</em> all formatted such that if you pass the list to Popen it will run  ;-)</p>
<p>Another way to describe the behavior would be as functionally equivalent to using the <code>-P &lt;n&gt;</code> argument in the unix <a href="https://linux.die.net/man/1/xargs" rel="nofollow noreferrer">xargs</a> command... </p>
<p>EDIT: would like to extend this to allow a set of args (kwargs) to be passed into the pool process.  I now have the following code block that works:</p>
<pre><code>def spawn(cmd):
   pid = subprocess.Popen(cmd)
   pid.wait()

pool = Pool(3)    
pool.map(spawn, cmd_list)  # happily kicks of three subprocesses and runs...
</code></pre>
<p>But I want to be able to pass other arguments into the spawn call, in this particular case I want to be able to pass things like priorities or std{in,out,err} redirection into the Popen call.  I got as far as trying a bunch of different combinations of **kwargs in the function signature, but couldn't get anything to work.  I started here, hopefully it expresses the behavior I'm after:</p>
<pre><code>def spawnWithOpts(cmd, **kwargs):   
   pid = subprocess.Popen(cmd, **kwargs)
   pid.wait()

pool.starmap(spawnWithOpts, cmd_list, "stderr=subprocess.STDOUT")
</code></pre>
<p>Which would be equivalent to changing the definition of spawn to:</p>
<pre><code>def spawn(cmd):
   pid = subprocess.Popen(cmd, stderr=subprocess.STDOUT)
   pid.wait()
</code></pre>
<p>But, obviously, I want to be able to pass an arbitrary set of arguments to the 'spwan' wrapper function depending on the exact behavior I'm after... </p>
</div>
<div class="post-text" itemprop="text">
<p>You already have a list of commands, now create a function that executes a single command, and map it into your pool:</p>
<pre><code>def cmd_executor(cmd):
  pid = subprocess.Popen(cmd)
  pid.wait()

pool = Pool(2)
results_list = pool.map(cmd_executor, cmd_list)
</code></pre>
<p>This will map the members of your list to the function, 2 at a time.</p>
<p>If you don't want to use 100's of processes (hypothetically, I know you're limiting to 2 right now), you can change the multiproc import to use <code>from multiprocessing.dummy import Pool</code> - this uses threads instead of processes, which might be more efficient, as the <code>subprocess</code> takes care of actually spawning the new processes. </p>
</div>
<div class="post-text" itemprop="text">
<p>OK, here's what I ended up with, which solves my immediate problem and <em>I THINK</em> is generic enough for me to use a little bit flexibly moving forward:</p>
<pre><code>import subprocess
from multiprocessing.dummy import Pool
from functools import partial

def spawn(cmd, **kwargs):   
   pid = subprocess.Popen(cmd, **kwargs)
   pid.wait()

pool = Pool(3)    
cmd_list=[]

for x in range(5):
    cmd_list.append(['echo',str(x)])


# run without any kwargs, so just the basic Popen call...
pool.map(spawn, cmd_list)

# now add some arguments to the Popen call
kwargs={}
kwargs['stderr'] = subprocess.STDOUT
kwargs['startupinfo'] = None

# and now call it with those kwargs, using 'partial'... 
pool.map( partial(spawn, **kwargs) ,cmd_list)
</code></pre>
<p>The trick for me was finally comprehending that <code>**kwargs</code> <a href="https://softwareengineering.stackexchange.com/questions/131403/what-is-the-name-of-in-python">is its own special operator</a> and doesn't have ANY BEARING outside of it's very specific purpose of "representing an unpacked list of keyword arguments".  I was wrong in thinking of it as a string or a list or even a dictionary (although you use a dictionary to build the base kwargs) - it exists ONLY to unpack arguments.  I'm sure this is blindingly obvious to people who have used it, but for me the whole thing made no sense until I grokked this concept.  As Danielle shows above, the call for <code>partial(spawn, **kwargs)</code> allows me to keep the signature for <code>map</code> correct.</p>
</div>
<span class="comment-copy">As expected that WAS simple.  Thank you for the hint about using threads - that cuts the overhead as well.  If I wanted to extend this to pass other things into the Popen constructor, would I just hang that on the end of my cmd_executor call?</span>
<span class="comment-copy">@ljwobker one issue with the <code>map()</code> function is that it only iterates over a single iterable (<code>cmd_list</code>) in this case. In cases where I've needed to add multiple args in a map statement, I've used combinations of <code>zip()</code> and <code>functool.partial</code> - check out the docs for both, they are extremely handy.</span>
<span class="comment-copy">OK - I found a couple of references to <code>starmap</code> (<a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>) ... is that another way to solve this or am I barking up the wrong tree?</span>
<span class="comment-copy">@ljwobker Not at all - but post an example of what you want to in in your question, so I can understand a bit better.</span>
