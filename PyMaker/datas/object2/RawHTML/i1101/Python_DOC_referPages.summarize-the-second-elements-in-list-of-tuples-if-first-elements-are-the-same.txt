<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44802491/python-list-group-and-sum-with-more-fields">Python list group and sum with more fields</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/11058001/python-group-by-and-sum-a-list-of-tuples">Python - Group by and sum a list of tuples</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/39734549/sum-numbers-by-letter-in-list-of-tuples">Sum numbers by letter in list of tuples</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>HOW Summarize the second elements in list of tuples,
if first elements are the same?</p>
<p>for example : </p>
<p>in this </p>
<pre><code>lst = [('milk', '2.35'), ('bread', '1.95'), ('chips', '2.54'), 
       ('milk', '2.38'), ('milk', '2.31'), ('bread', '1.90')]
</code></pre>
<p>I would summarize second elements of milk together and
summarize second elements of bread together.</p>
<p>and return this list:</p>
<pre><code>[('bread', '3.85'), ('chips', '2.54'), ('milk', '7.04')]

def my_def(a):
    my_list = []
    for item in a:
        if item[0] not in my_list:
            my_list.append(item[0])
    return my_list
</code></pre>
<p>I could just find same one :(</p>
</div>
<div class="post-text" itemprop="text">
<p>You can summarize with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> of floats:</p>
<pre><code>from collections import defaultdict

l = [('milk', '2.35'), ('bread', '1.95'), ('chips', '2.54'), ('milk', '2.38'), ('milk', '2.31'), ('bread', '1.90')]

d = defaultdict(float)
for x, y in l:
    d[x] += float(y)

print([(x, round(y, 2)) for x, y in d.items()])
# [('milk', 7.04), ('bread', 3.85), ('chips', 2.54)]
</code></pre>
</div>
<span class="comment-copy">Use <code>itertools.groupby()</code>. But first, convert the number-like strings to numbers.</span>
<span class="comment-copy">@DYZ they don't need groupby, they already have the grouping logic and the matching elements aren't actually consecutive in the source list.</span>
<span class="comment-copy">@jonrsharpe Using an existing function is almost always preferable over custom logic. Naturally, the sequence shall be sorted before grouping.</span>
<span class="comment-copy">Groupby works on sorted lists:  you can sort (and convert to floats) by <code>lst = sorted( (k,float(v)) for k,v in [('milk', '2.35'), ('bread', '1.95'), ('chips', '2.54'), ('milk', '2.38'), ('milk', '2.31'), ('bread', '1.90')])</code></span>
<span class="comment-copy">nice one - maybe better at one of the dupes.</span>
<span class="comment-copy">@PatrickArtner Thanks, I answered the question right as the dupe close went up, my bad. I feel like <a href="https://stackoverflow.com/questions/39734549/sum-numbers-by-letter-in-list-of-tuples">stackoverflow.com/questions/39734549/sum-numbers-by-letter-in-list-of-tuples</a> is a closer dupe though.</span>
<span class="comment-copy">I dont mind answers below dupes .. there is a grace period and you can trick the clientsite evalutaion using developer tools if you feel like testing the "wrath" of mods. I added your dupe .. this question has about 10 to 15 at least ... it is quite common.</span>
