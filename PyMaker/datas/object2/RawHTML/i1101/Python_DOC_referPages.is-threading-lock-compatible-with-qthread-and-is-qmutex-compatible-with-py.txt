<div class="post-text" itemprop="text">
<p>I'm using <strong>Python 3.7</strong> (with <strong>PyQt5</strong> for the GUI) on a <strong>Windows 10</strong> computer. My application needs some multithreading. To do that, I use <code>QThread()</code>.</p>
<p>I need to protect some code with a mutex. I figured I've got the following two options: protect it with a lock from the Python <code>threading</code> module or with a <code>QMutex()</code>.</p>
<p> <br/></p>
<h3>1.  Protection with threading.Lock()</h3>
<p>This is how I make my mutex:</p>
<pre><code>import threading
...
self.mutex = threading.Lock()
</code></pre>
<p>and how I use it:</p>
<pre><code>def protected_function(self):
    if not self.mutex.acquire(blocking=False):
        print("Could not acquire mutex")
        return
    # Do very important
    # stuff here...
    self.mutex.release()
    return
</code></pre>
<p>You can find the Python docs here: <a href="https://docs.python.org/3/library/threading.html#threading.Lock" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html#threading.Lock</a></p>
<p> <br/></p>
<h3>2.  Protection with QMutex()</h3>
<p>To make the mutex:</p>
<pre><code>from PyQt5.QtCore import *
...
self.mutex = QMutex()
</code></pre>
<p>and how to use it:</p>
<pre><code>def protected_function(self):
    if not self.mutex.tryLock():
        print("Could not acquire mutex")
        return
    # Do very important
    # stuff here...
    self.mutex.unlock()
    return
</code></pre>
<p>You can find the Qt5 docs on <code>QMutex()</code> here: <a href="http://doc.qt.io/qt-5/qmutex.html" rel="nofollow noreferrer">http://doc.qt.io/qt-5/qmutex.html</a></p>
<p> <br/></p>
<h3>3.  Compatibility</h3>
<p>I would like to know:</p>
<ol>
<li><p>Is <code>threading.Lock()</code> compatible with threads made with <code>QThread()</code>?</p></li>
<li><p>Is <code>QMutex()</code> compatible with normal Python threads?</p></li>
</ol>
<p>In other words, is it a big deal if these things get a bit mixed around? - For example: a few python threads run in an application, next to some QThread's, and some stuff is protected by <code>threading.Lock()</code>, other stuff by <code>QMutex()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR;</strong> it is indifferent to use them combined.</p>
<hr/>
<p>The QThreads are not <em>Qt Threads</em>, that is they are not new threads but it is a class that <strong>manages</strong> the native threads of each OS and the same happens with the <em>Python Threads</em> that are also a wrapper to handle the native threads. And the same thing happens with the <code>QMutex</code> and <code>threading.Lock()</code> so it is indifferent to use one or the other because in the background you are using the native threads and mutex.</p>
</div>
<span class="comment-copy">Thank you @eyllanesc. Where did you find this information? This is very helpful :-)</span>
<span class="comment-copy">I don't think it is enough to explain this question. First, just saying they are wrappers is meaningless as all threads "created" in user space are just wrappers. Second, wrappers also have different implementations. I agree with that it might be indifferent to use them combined generally. But as they have different implementations, they are more suitable to different cases.</span>
<span class="comment-copy">@Sraw Qt only makes a lightweight wrapper that allows you to invoke native threads in the same way on different platforms, it does not implement any additional functionality.</span>
