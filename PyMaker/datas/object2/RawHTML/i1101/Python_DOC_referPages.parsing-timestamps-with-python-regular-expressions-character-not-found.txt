<div class="post-text" itemprop="text">
<p>I am teaching myself python and I am trying to implement the regular expression to obtain a timestamp from an application log file ( I normally use <em>grep</em>, <em>cut</em> and <em>awk</em> for this )</p>
<p>My logfiles contain many lines started with date and time next</p>
<pre><code>18.12.19 14:03:16 [ ..... # message error
18.12.19 14:03:16 [
:
</code></pre>
<p>I normally use a simple grep command <code>grep "14\:03\:16" mytext</code>
and this expression works "14:03:16", so after researching I came up with this regex:</p>
<p>Where <code>res</code> is one of the lines above</p>
<pre><code>datap = re.compile(r'(\d{2}):(\d{2}):(\d{2})')
m = datap.match(res)
</code></pre>
<p>This does not find anything whereas</p>
<pre><code>datap = re.compile(r'(\d{2}).(\d{2}).(\d{2})')
m = datap.match(re
</code></pre>
<p>Captures the date.</p>
<p>Why the character <code>:</code> is not found? I have tried to use <code>\:</code> as well and it also does not work. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer"><code>re.match</code></a> tries to match the regex from the beginning of the string.</p>
<p>From the docs:</p>
<blockquote>
<p>If zero or more characters at the beginning of string match the
  regular expression pattern, return a corresponding match object.
  Return None if the string does not match the pattern; note that this
  is different from a zero-length match.</p>
</blockquote>
<p>When you did</p>
<pre><code>datap = re.compile(r'(\d{2}).(\d{2}).(\d{2})')
m = datap.match(res)
</code></pre>
<p>the regex actually matched the date, not the time (because it is at the beginning of the string):</p>
<pre><code>print(m)
# &lt;re.Match object; span=(0, 8), match='18.12.19'&gt;
</code></pre>
<p>If you use <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.search</code></a> then you will get the expected output:</p>
<pre><code>import re

res = '18.12.19 14:03:16 [ ..... # message error'
datap = re.compile(r'(\d{2}):(\d{2}):(\d{2})')
m = datap.search(res)
print(m)
# &lt;re.Match object; span=(9, 17), match='14:03:16'&gt;
</code></pre>
</div>
<span class="comment-copy">Are you grouping inside of the colons for a reason? <code>r'\d{2}:\d{2}:\d{2}'</code> will match  the full time string inculding colons.</span>
<span class="comment-copy">You mean using parenthesis to group them?</span>
<span class="comment-copy">Sorry, I got, I need to group them because I will use the specific  hour , minute second to trace elapsed times.</span>
<span class="comment-copy">if your time stamp at the beginning of your string then use carrot '^' . It worked for me on regex 101   /^\d{2}:\d{2}:\d{2}/</span>
<span class="comment-copy">@JBone <code>re.match(regex_string, string)</code> is <i>usually</i> equivalent to <code>re.search('^' + regex_string, string)</code></span>
<span class="comment-copy">thank you. I don't know Python yet, so thanks for that information.</span>
