<div class="post-text" itemprop="text">
<p>I'm trying to cut a list by specific items in it, for example, I have a list like this:</p>
<pre><code>down = ["a", "b", "c", "d", "b", "e", "r"]
</code></pre>
<p>What I want is</p>
<pre><code>[["a", "b"]["c", "d", "b"] ["e", "r"]]
</code></pre>
<p>which is cut after every occurrence of <code>"b"</code>.</p>
<p>I wrote something like this:</p>
<pre><code>down = ["a", "b", "c", "d", "b", "e", "r"]
up = []
while down is not []:
    up, down = up.append(down[:(down.index("b") + 1)]), down[(down.index("b") + 1):]
</code></pre>
<p>It throws an error:</p>
<pre><code>AttributeError: 'NoneType' object has no attribute 'append'
</code></pre>
<p>I can't figure out what's wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate your original and assemble the sublists in a second list:</p>
<pre><code>k = ["a", "b", "c", "d", "b", "e", "r"]

result = [[]]
for e in k:
    if e != "b":
        result[-1].append(e)
    else:
        result[-1].append(e)
        result.append([])

if result[-1] == []: 
    result.pop() # thx iBug's comment

print(result) # [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]
</code></pre>
<p>I think that is much clearer then what your code tries to do - your "what I want <code>["a", "b"]["c", "d", "b"] ["e", "r"]</code>" is not valid python.</p>
<hr/>
<p>A slightly less performant code would be:</p>
<pre><code>k = ["a", "b", "c", "d", "b", "e", "r"]
b = []
while True:
    try:
        b_idx = k.index("b")
    except: 
        b.append(k)
        break
    else:
        b,k = b+[k[:b_idx+1]],k[b_idx+1:]
print(b) 
</code></pre>
<p>But you need far mor searches into your list via <code>.index()</code> and <code>try: except</code> so it has a worse performace then simply iterating the list once.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list.append(elem)</code> does not return the new list, just modifies the original. That's the reason for your error.</p>
<p>To correct your code without changing the approach:</p>
<pre><code>down = ["a", "b", "c", "d", "b", "e", "r"]
up = []
while True:
    if 'b' in down: # make sure there is a 'b' in the list
        index = down.index("b") # get the index of the first "b"
        up.append(down[:index + 1]) # save first sublist in up
        down = down [index + 1:] # trim the sublist you already saved 
    else:
        up.append(down) # add the rest of down
        break # leave the loop 
print(up)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can construct a list of indices, then use a list comprehension:</p>
<pre><code>down = ["a", "b", "c", "d", "b", "e", "r"]

n = len(down)
idx = [index+1 for index, value in enumerate(down) if value == 'b']

res = [down[i: j] for i, j in zip([0] + idx, idx + ([n] if idx[-1] != n else []))]

# [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]
</code></pre>
<p>The ternary statement <code>[n] if idx[-1] != n else []</code> is used to avoid an empty final list if the last value in <code>down</code> is <code>'b'</code>. This is a two-pass solution, but uses list slicing as opposed to explicitly appending items one at a time.</p>
</div>
<div class="post-text" itemprop="text">
<p>What would a question like this be without an <code>itertools</code> answer?</p>
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> in this case, with a custom key that counts past occurrences of <code>'b'</code>:</p>
<pre><code>from itertools import groupby

class CountKey:
    def __init__(self, what):
        self.what = what
        self.count = 0
    def __call__(self, item):
        count = self.count
        if item == self.what:
            self.count += 1
        return count

up = [list(g) for k, g in groupby(down, CountKey('b'))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>down = ["a", "b", "c", "d", "b", "e", "r"]
poslist = []
for pos, item in enumerate(down):
    if item == 'b':
        poslist.append(pos)
answerlist = []
for i in range(len(poslist)):
    if i == 0:
        answerlist.append(down[:poslist[i]+1])
    else:
        answerlist.append(down[poslist[i-1]+1:poslist[i]+1])
answerlist.append(down[poslist[i]+1:])
print (answerlist)
# [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>down = ["a", "b", "c", "d", "b", "e", "r"]
indices = [i for i, x in enumerate(down ) if x == "b"]
curr=0
master_list=[]
for item in indices:
    master_list.append(down[curr:item+1])
    print(master_list)
    curr=item+1
if curr !=len(down):
    master_list.append(down[curr:len(down)])
print(master_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [59]: k
Out[59]: ['a', 'b', 'c', 'd', 'b', 'e', 'r', 'l', 'f', 'b', 's']

In [60]: indices = [i for i, x in enumerate(k) if x == "b"]  # all index of 'b'

In [61]: aa = k[:indices[0]+1] # first list

In [62]: bb = k[indices[len(indices)-1]+1:]  # last list

In [63]: for i in range(0, len(indices)-1):
    ...:     print(k[indices[i]+1:indices[i+1]+1]) # remaining list
    ...: 
['c', 'd', 'b']
['e', 'r', 'l', 'f', 'b']

In [64]: aa
Out[64]: ['a', 'b']

In [65]: bb
Out[65]: ['s']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>import re

l = ['a', 'b', 'c', 'd', 'b', 'e', 'r']
split_by = 'b'

pattern = re.compile(r'(.*?{0})'.format(split_by))
split_list = re.split(pattern, ('').join(l))
result = [list(i) for i in split_list if i]

print(result) # [['a', 'b'], ['c', 'd', 'b'], ['e', 'r']]
</code></pre>
</div>
<span class="comment-copy">@patrick has the answer you need. as for what's wrong, you're trying to assign <code>up</code> with <code>up.append(something)</code>. you shouldn't assign while using a list method/function. What ends up happening is that the append method modifies the object, and then the function returns a None. Combined with an assignment, you modify the list but then bind <code>up</code> name to None. Next iteration, you get the error that's showing.</span>
<span class="comment-copy">Thanks ! That's what I am confused. I rewrote my code like this:          <code>down = ["a", "b", "c", "d", "b", "e", "r"] up = [] while "b" in down:     up.append(down[:(down.index("b") + 1)])     down = down[(down.index("b") + 1):] up.append(down)</code>          @ParitoshSingh</span>
<span class="comment-copy"><code>result = result[:-1]</code> -&gt; <code>result.pop()</code></span>
<span class="comment-copy">The OP asked <i>"I can't figure out what's wrong."</i>. Could you explain inside your answer what was wrong and how your code resolves that?</span>
