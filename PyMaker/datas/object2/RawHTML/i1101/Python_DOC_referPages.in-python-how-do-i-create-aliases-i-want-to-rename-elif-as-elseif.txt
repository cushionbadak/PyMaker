<div class="post-text" itemprop="text">
<p>In C, one can use <code>#define</code> to make a developer's life easier.  In C, it is possible to do this: <code>#define el else</code>. This would allow a developer to write either <code>else</code> or <code>el</code> depending on their preferences, and the compiler would replace all the "el"s with "else" during pre-compilation..</p>
<p>Is there anything similar in python?  Is there something in python that will allow me to create aliases for my own convenience?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is a very permissive language but there are some reserved <a href="https://docs.python.org/3/library/keyword.html" rel="nofollow noreferrer">keywords</a>.</p>
<p><a href="https://stackoverflow.com/questions/482014/how-would-you-do-the-equivalent-of-preprocessor-directives-in-python">Here</a> is a description how you can simulate c preprocessor.</p>
<p>Just for fun in version <code>2.x</code> you may even swap <code>True</code> and <code>False</code>. Check <a href="https://stackoverflow.com/questions/13401563/true-false-assignment-in-python-2-x">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are referring to is preprocessing the source code. In C (and some other languages), you can do simple find and replace operations on the source code, treating the source code as simple text.</p>
<p>Python does not ship with anything like that. However, you can create variables that refer to globals. For instance, you could create a variable <code>j</code> that is the same as <code>os.path.join</code> like this:</p>
<pre><code> import os
 j = os.path.join

 print(j("one", "two")) # same as print(os.path.join("one", "two"))
</code></pre>
</div>
<span class="comment-copy">Not from what I know of.</span>
<span class="comment-copy">Remember that even your example is strictly speaking not C code but pre-processor instructions. Python does not have a pre-processor and does not allow to rename keywords. Even if it would be possible it would violate many of the code principles Python is built around.</span>
<span class="comment-copy">@KlausD., Can you give a few examples of the "code principals" around which Python is built, and how my idea would break them?</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">python.org/dev/peps/pep-0020</a></span>
<span class="comment-copy">@KlausD. If I were to rename "elif" to "ef" and rename "else" to "el", that would make more control keywords 2 characters long (if, ef, el).  It would improve the beauty and readability of the code.  That goal is in alignment with the first line of the poem you referenced.</span>
<span class="comment-copy">Are there any errors in my answer? Why the downvote?</span>
