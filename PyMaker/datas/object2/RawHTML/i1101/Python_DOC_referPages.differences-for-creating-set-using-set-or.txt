<div class="post-text" itemprop="text">
<p>This difference is confusing me:</p>
<pre><code>&gt;&gt;&gt; s = "()())()"
&gt;&gt;&gt; print set(s)

set([')', '('])

&gt;&gt;&gt; print {s}

set(['()())()'])
</code></pre>
<p>Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/functions.html#func-set" rel="noreferrer">Python documentation</a> for the <code>set()</code> method:</p>
<blockquote>
<p>Return a new <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="noreferrer">set</a> object, optionally with elements taken from iterable.</p>
</blockquote>
<p>Since a string is an iterable, the <code>set()</code> method creates a set of all characters in the given string. However, since sets do not allow for  duplicate values, the output is a set containing the two unique characters in the string: <code>')'</code> and <code>'('</code>.</p>
<p>On the other hand, the shorthand syntax <code>{s}</code> creates a set out of all items between the curly brackets. Since you only inserted one item <code>s</code> (your string), the output was a set containing only that one item.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>set()</code> takes an iterable as parameter, whose items will be the elements of the set.</p>
<p>So, set('my string') will contain each character of the iterable I passed it, that is {'m', 'y' ...}</p>
<p>Using <code>{}</code>, you create the set by writing down each of its elements, separated by commas.</p>
<p>{'my string'} contains one element, the string 'my string'</p>
</div>
<div class="post-text" itemprop="text">
<p>When you write:</p>
<pre><code>set(s)
</code></pre>
<p>it treats the string as an iterable, and makes a set containing its elements. The elements of a string are the individual characters. So it's equivalent to doing:</p>
<pre><code>{'(', ')', '(', ')', ')', '(', ')'}
</code></pre>
<p>Since a set can't contain duplicate elements, you get a set with the two unique characters <code>'('</code> and <code>')'</code>.</p>
<p>However, when you write:</p>
<pre><code>{s}
</code></pre>
<p>it just makes a set whose element is the value of the variable. The <code>{}</code> syntax treats each variable as a single element, rather than iterating over it.</p>
<p>The <code>set()</code> function is frequently used to convert from one kind of collection to a set of its elements, that's why it iterates over it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because the first one:</p>
<pre><code>print set(s)
</code></pre>
<p>Is simply removing duplicates from the string,</p>
<p>But the second one:</p>
<pre><code>print {s}
</code></pre>
<p>Is simply just storing the string in the <code>set</code>, so <code>set</code> with one element is always gonna be one element.</p>
<p>To make the the same result (it could be easier in python 3):</p>
<pre><code>print {i for i in s}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first creates a set which contains only unique values, i.e (). While the other is a string which is what you defined s to be</p>
</div>
<span class="comment-copy">One is a set of characters, the other a set of strings.</span>
<span class="comment-copy">which is which?</span>
<span class="comment-copy">The <code>set()</code> constructor takes an iterable. An string is an iterable, so when you pass the constructor a single string it will iterate over it and each element (i.e. letter) to the set. If you don't want that behavior, pass in a tuple with the single string: <code>set((s,))</code></span>
<span class="comment-copy">Correction: it treats the string as an <b>iterable</b></span>
