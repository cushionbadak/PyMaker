<div class="post-text" itemprop="text">
<p>I am trying to represent ratios in dataframe column. However, the formatting I am getting is totally horrendous when I am just able to use  a print function and print what I want. The true problem is representing it in a correct format.</p>
<p>what I have done is create the Greatest common divisor, apply it to my dataframe now I want to </p>
<pre><code>def gcd(a,b):
    """ Greatest common divisor """
    while b!=0:
        r=a%b
        a,b=b,r
    return a

 #trying the function
 a= int(15/gcd(15,10))
 b= int(10/gcd(15,10))
 print( a,':',b)  
 # result
 3 : 2

 # Dataframe
 d = {'col1': [3, 2], 'col2': [12, 4]}
 df = pd.DataFrame(data=d)
 df 

 col1 col2
0  3   12  
1  2    4  

#applying the function to the frame
df['gcd'] = df.apply(lambda x: gcd(x['col2'], x['col1']), axis=1)
 col1 col2 gcd
0  3   12   3
1  2    4   2


df['ratio']= str(df['col1']/df['gcd']) + ':' + str(df['col2']/df['gcd'])
# this result gives me a very bad formatting 
</code></pre>
<p>what I want is a ratio column that looks like this:</p>
<pre><code>ratio
 3:2
 4:5
</code></pre>
<p>The main problem for me is representing something with the colons. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear how you derive <code>3:2</code> and <code>4:5</code>. But note you can use NumPy (via <code>np.gcd</code>) for calculating the greatest common divisor, since these operations will be vectorised. Alternatively, you can use the <a href="https://docs.python.org/3.7/library/fractions.html" rel="nofollow noreferrer"><code>fractions</code></a> module with a list comprehension for conversion to strings.</p>
<p>Let's assume we start with this dataframe.</p>
<pre><code># input dataframe
df = pd.DataFrame({'col1': [3, 2], 'col2': [12, 4]})
</code></pre>
<h3><a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.gcd.html" rel="nofollow noreferrer"><code>np.gcd</code></a>: vectorised calculation</h3>
<p>This solution is <em>partially</em> vectorised. The calculation itself is performed column-wise. String construction, either via concatenation or via f-strings and a list comprehension, uses Python-level loops.</p>
<pre><code>factored = df.div(np.gcd(df['col1'], df['col2']), axis=0).astype(int)
df['ratio'] = factored['col1'].astype(str) + ':' + factored['col2'].astype(str)
# alternative list comprehension
# zipper = zip(factored['col1'], factored['col2'])
# df['ratio'] = [f'{x}:{y}' for x, y in zipper]
</code></pre>
<h3><a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction" rel="nofollow noreferrer"><code>Fraction</code></a> + <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> + list comprehension</h3>
<p>Solely with row-wise operations, you can use a single list comprehension:</p>
<pre><code>from fractions import Fraction
zipper = zip(df['col1'], df['col2'])
df['ratio'] = [str(Fraction(x, y)).replace('/', ':') for x, y in zipper]
</code></pre>
<p>The result is the same in either case:</p>
<pre><code>   col1  col2 ratio
0     3    12   1:4
1     2     4   1:2
</code></pre>
</div>
<span class="comment-copy">How do you calculate <code>3:2</code> from <code>3 / 12 / 3</code> and <code>4:5</code> from <code>2 / 4 / 2</code>?</span>
<span class="comment-copy">your second line seems to faulty. but from zipper everything is correct. Great thanks. That's exactly what I was struggling with</span>
<span class="comment-copy">Sorry,  which bit exactly is faulty? Happy to check and clarify if you can describe which bit is wrong.</span>
<span class="comment-copy">bad comment/ great work--honestly</span>
<span class="comment-copy">@Herc01, No problem :). You also have the privilege to vote up or down :)</span>
