<div class="post-text" itemprop="text">
<p>I want to iterate over a map's values and compare elements of a list to see if at least 3 elements match in the same order, and then have a list returned with the keys that match the condition.</p>
<pre><code>prefs = {
        's1': ["a", "b", "c", "d", "e"],
        's2': ["c", "d", "e", "a", "b"],
        's3': ["a", "b", "c", "d", "e"],
        's4': ["c", "d", "e", "b", "e"],
        's5': ["c", "d", "e", "a", "b"]
    }
</code></pre>
<p>Here is a sample map. In this example keys s1, and s3 have at least three elements in the list value that match "a", "b", "c". So s1, and s3 should be returned like this s1 -- s3. Similarly s2 and s4 match so that should also be returned, but s2 has multiple matches because it matches with s5 as well so s2 -- s5 should be returned. I want to return all possible matches for each key-value pair in a list.
The return output should be something like:</p>
<pre><code>[[s1--s3], [s2--s4], [s2--s5], [s4--s5]]
</code></pre>
<p>I'm unable to figure out how I can iterate over each value in the map, but here is a snippet of element-wise comparison. I'm wondering if I can set a counter, and check to see if match_cnt &gt; 3 and then return the keys in a list.</p>
<pre><code>a = ["a", "b", "c", "d", "e"]
b = ["a", "c", "b", "d", "e"]
match_cnt = 0

if len(a) == len(b):
    for i in range(len(a)):
        if a[i] == b[i]:
            print(a[i], b[i])
</code></pre>
<p>Also, want some knowledge on the runtime of this algorithm.
Complete code solution would be appreciated. 
I had been advised to open a new question <a href="https://stackoverflow.com/questions/53926562/compare-python-dictionary-values-of-type-list-to-see-if-they-match-in-that-order/53926613?noredirect=1#comment94704450_53926613">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can make use <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">.items()</a> to iterate over the map, then it's just matching the first 3 list items using a slice:</p>
<pre><code>prefs = {
    's1': ["a", "b", "c", "d", "e"],
    's2': ["c", "d", "e", "a", "b"],
    's3': ["a", "b", "c", "d", "e"],
    's4': ["c", "d", "e", "b", "e"],
    's5': ["c", "d", "e", "a", "b"]
}

results = []
for ki, vi in prefs.items():
    for kj, vj in prefs.items():
        if ki == kj:  # skip checking same values on same keys !
            continue

        if vi[:3] == vj[:3]:  # slice the lists to test first 3 characters
            match = tuple(sorted([ki, kj]))  # sort results to eliminate duplicates
            results.append(match)

print (set(results))  # print a unique set
</code></pre>
<p>Returns:</p>
<pre><code>set([('s1', 's3'), ('s4', 's5'), ('s2', 's5'), ('s2', 's4')])
</code></pre>
<p><strong>Edit:</strong><br/>
To check all possible combinations, you can use combinations() from itertools. iCombinations/jCombinations are preserving order with a length of 3 list items:</p>
<pre><code>from itertools import combinations

prefs = {
    's1': ["a", "b", "c", "d", "e"],
    's2': ["c", "d", "e", "a", "b"],
    's3': ["a", "b", "c", "d", "e"],
    's4': ["c", "d", "e", "b", "e"],
    's5': ["c", "d", "e", "a", "b"]
}

results = []
for ki, vi in prefs.items():
    for kj, vj in prefs.items():
        if ki == kj:  # skip checking same values on same keys !
            continue

        # match pairs from start
        iCombinations = [vi[n:n+3] for n in range(len(vi)-2)]
        jCombinations = [vj[n:n+3] for n in range(len(vj)-2)]

        # match all possible combinations
        import itertools
        iCombinations = itertools.combinations(vi, 3)
        jCombinations = itertools.combinations(vj, 3)

        if any([ic in jCombinations for ic in iCombinations]):  # checking all combinations
            match = tuple(sorted([ki, kj]))
            results.append(match)

print (set(results))  # print a unique set
</code></pre>
<p>This returns:</p>
<pre><code>set([('s1', 's3'), ('s2', 's5'), ('s3', 's5'), ('s2', 's3'), ('s2', 's4'), ('s1', 's4'), ('s1', 's5'), ('s3', 's4'), ('s4', 's5'), ('s1', 's2')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've tried to be as detailed as possible. This should be an example how you can often work your way through such a problem by inserting a lot of <code>print</code> messages to create a log of what's going on.</p>
<pre><code>prefs = {
    's1': ["a", "b", "c", "d", "e"],
    's2': ["c", "d", "e", "a", "b"],
    's3': ["a", "b", "c", "d", "e"],
    's4': ["c", "d", "e", "b", "e"],
    's5': ["c", "d", "e", "a", "b"]
}

# Get all items of prefs and sort them by key. (Sorting might not be
# necessary, that's something you'll have to decide.)
items_a = sorted(prefs.items(), key=lambda item: item[0])

# Make a copy of the items where we can delete the processed items.
items_b = items_a.copy()

# Set the length for each compared slice.
slice_length = 3

# Calculate how many comparisons will be necessary per item.
max_shift = len(items_a[0][1]) - slice_length

# Create an empty result list for all matches.
matches = []

# Loop all items
print("Comparisons:")
for key_a, value_a in items_a:
    # We don't want to check items against themselves, so we have to
    # delete the first item of items_b every loop pass (which would be
    # the same as key_a, value_a).
    del items_b[0]
    # Loop remaining other items
    for key_b, value_b in items_b:
        print("- Compare {} to {}".format(key_a, key_b))
        # We have to shift the compared slice
        for shift in range(max_shift + 1):
            # Start the slice at 0, then shift it
            start = 0 + shift
            # End the slice at slice_length, then shift it
            end = slice_length + shift
            # Create the slices
            slice_a = value_a[start:end]
            slice_b = value_b[start:end]
            print("  - Compare {} to {}".format(slice_a, slice_b), end="")
            if slice_a == slice_b:
                print(" -&gt; Match!", end="")
                matches += [(key_a, key_b, shift)]
            print("")

print("Matches:")
for key_a, key_b, shift in matches:
    print("- At positions {} to {} ({} elements), {} matches with {}".format(
        shift + 1, shift + slice_length, slice_length, key_a, key_b))
</code></pre>
<p>Which prints:</p>
<pre><code>Comparisons:
- Compare s1 to s2
  - Compare ['a', 'b', 'c'] to ['c', 'd', 'e']
  - Compare ['b', 'c', 'd'] to ['d', 'e', 'a']
  - Compare ['c', 'd', 'e'] to ['e', 'a', 'b']
- Compare s1 to s3
  - Compare ['a', 'b', 'c'] to ['a', 'b', 'c'] -&gt; Match!
  - Compare ['b', 'c', 'd'] to ['b', 'c', 'd'] -&gt; Match!
  - Compare ['c', 'd', 'e'] to ['c', 'd', 'e'] -&gt; Match!
- Compare s1 to s4
  - Compare ['a', 'b', 'c'] to ['c', 'd', 'e']
  - Compare ['b', 'c', 'd'] to ['d', 'e', 'b']
  - Compare ['c', 'd', 'e'] to ['e', 'b', 'e']
- Compare s1 to s5
  - Compare ['a', 'b', 'c'] to ['c', 'd', 'e']
  - Compare ['b', 'c', 'd'] to ['d', 'e', 'a']
  - Compare ['c', 'd', 'e'] to ['e', 'a', 'b']
- Compare s2 to s3
  - Compare ['c', 'd', 'e'] to ['a', 'b', 'c']
  - Compare ['d', 'e', 'a'] to ['b', 'c', 'd']
  - Compare ['e', 'a', 'b'] to ['c', 'd', 'e']
- Compare s2 to s4
  - Compare ['c', 'd', 'e'] to ['c', 'd', 'e'] -&gt; Match!
  - Compare ['d', 'e', 'a'] to ['d', 'e', 'b']
  - Compare ['e', 'a', 'b'] to ['e', 'b', 'e']
- Compare s2 to s5
  - Compare ['c', 'd', 'e'] to ['c', 'd', 'e'] -&gt; Match!
  - Compare ['d', 'e', 'a'] to ['d', 'e', 'a'] -&gt; Match!
  - Compare ['e', 'a', 'b'] to ['e', 'a', 'b'] -&gt; Match!
- Compare s3 to s4
  - Compare ['a', 'b', 'c'] to ['c', 'd', 'e']
  - Compare ['b', 'c', 'd'] to ['d', 'e', 'b']
  - Compare ['c', 'd', 'e'] to ['e', 'b', 'e']
- Compare s3 to s5
  - Compare ['a', 'b', 'c'] to ['c', 'd', 'e']
  - Compare ['b', 'c', 'd'] to ['d', 'e', 'a']
  - Compare ['c', 'd', 'e'] to ['e', 'a', 'b']
- Compare s4 to s5
  - Compare ['c', 'd', 'e'] to ['c', 'd', 'e'] -&gt; Match!
  - Compare ['d', 'e', 'b'] to ['d', 'e', 'a']
  - Compare ['e', 'b', 'e'] to ['e', 'a', 'b']
Matches:
- At positions 1 to 3 (3 elements), s1 matches with s3
- At positions 2 to 4 (3 elements), s1 matches with s3
- At positions 3 to 5 (3 elements), s1 matches with s3
- At positions 1 to 3 (3 elements), s2 matches with s4
- At positions 1 to 3 (3 elements), s2 matches with s5
- At positions 2 to 4 (3 elements), s2 matches with s5
- At positions 3 to 5 (3 elements), s2 matches with s5
- At positions 1 to 3 (3 elements), s4 matches with s5
</code></pre>
<p>It's still unclear, what your output really should be. However, I think you'll have no problems in converting the above code to your needs.</p>
</div>
<span class="comment-copy">All of these lists have at least 3 elements in common with each other. Or does it have to be the first 3?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/53926562/compare-python-dictionary-values-of-type-list-to-see-if-they-match-in-that-order">compare python dictionary values of type list to see if they match in that order</a></span>
<span class="comment-copy">Asking for a "complete code solution" is out of scope for Stack Overflow.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/3294889/iterating-over-dictionaries-using-for-loops" title="iterating over dictionaries using for loops">stackoverflow.com/questions/3294889/â€¦</a> shows how to loop over the keys and values of a dictionary.</span>
<span class="comment-copy">is this modified version of this <a href="https://stackoverflow.com/questions/53926562/compare-python-dictionary-values-of-type-list-to-see-if-they-match-in-that-order">question</a>, which is asked earlier by you</span>
<span class="comment-copy">This solution is only checking to see if the first three elements match, and then returns the set, but I want to return the keys for anywhere I match the elements three consecutive times in the list.  So, for instance, I can have a 's1': ["c", "d", "a", "b", "c"] and 's3': ["d", "c", "a", "b", "c"], this should be a match because I have three consecutive elements that match across both the lists. Is there a way to modify the list comprehension to check the entire list to see if 3 elements match consecutively.</span>
<span class="comment-copy">@Sumanth M, added match3-pair combinations: ['a', 'b', 'c'], ['b', 'c', 'd'], ['c', 'd', 'e'] in case of s1.</span>
<span class="comment-copy">Thanks for the easy to follow code. But Can the above code be modified such that it returns matches where at least three elements match, but the elements need not be in consecutive order. They can be in any given order. for ex: s1: [a,b,c,d,e] would match with s2: [e,a,f,b,q]. Because [b,a,e] are common in both keys. I'm looking at the jcombinations to see if that can be tweaked, can you chime in.</span>
<span class="comment-copy">Sure you can do that, have a look at <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools</a>. Especially <code>itertools.combinations()</code>, to create all possible combinations. <code>itertools.combinations(vi, 3)</code> ...</span>
<span class="comment-copy">You might want zu ask a new question, comments are not the right place to modify code :)</span>
<span class="comment-copy">Perfect - Thanks</span>
<span class="comment-copy">I've updated the question. Is it possible to iterate over the list types values for all given keys to check and see if at least one element of the first value exists in the second one. Lets assume that each value has at least one element, I just want to check to see if there is at least one element that is matching. I have tried the intersection function, but no luck</span>
