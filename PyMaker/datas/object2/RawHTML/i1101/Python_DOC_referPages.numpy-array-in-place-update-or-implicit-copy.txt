<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15376509/when-is-i-x-different-from-i-i-x-in-python">When is “i += x” different from “i = i + x” in Python?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I found out a curious thing today and was wondering if somebody could shed some light into what the difference is here?</p>
<pre><code>import numpy as np

A = np.arange(12).reshape(4,3)
for a in A:
    a = a + 1

B = np.arange(12).reshape(4,3)
for b in B:
    b += 1
</code></pre>
<p>After running each <code>for</code> loop, <code>A</code> has not changed, but <code>B</code> has had one added to each element. I actually use the <code>B</code> version to write to a initialized NumPy array within a <code>for</code> loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is that one modifies the data-structure itself (in-place operation) <code>b += 1</code> while the other just <em>reassigns</em> the variable <code>a = a + 1</code>.</p>
<hr/>
<p>Just for completeness:</p>
<p><code>x += y</code> is <strong>not always</strong> doing an in-place operation, there are (at least) three exceptions:</p>
<ul>
<li><p>If <code>x</code> <strong>doesn't implement</strong> an <code>__iadd__</code> method then the <code>x += y</code> statement is just a shorthand for <code>x = x + y</code>. This would be the case if <code>x</code> was something like an <code>int</code>.</p></li>
<li><p>If <code>__iadd__</code> returns <code>NotImplemented</code>, Python falls back to <code>x = x + y</code>.</p></li>
<li><p>The <code>__iadd__</code> method could theoretically be implemented to not work in place. It'd be really weird to do that, though.</p></li>
</ul>
<p>As it happens your <code>b</code>s are <code>numpy.ndarray</code>s which implements <code>__iadd__</code> and return itself so your second loop modifies the original array in-place.</p>
<p>You can read more on this in the <a href="https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types">Python documentation of "Emulating Numeric Types"</a>.</p>
<blockquote>
<p>These [<code>__i*__</code>] methods are called to implement the augmented arithmetic assignments (<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>@=</code>, <code>/=</code>, <code>//=</code>, <code>%=</code>, <code>**=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>). These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self). If a specific method is not defined, the augmented assignment falls back to the normal methods. For instance, if x is an instance of a class with an <code>__iadd__()</code> method, <code>x += y</code> is equivalent to <code>x = x.__iadd__(y)</code> . Otherwise, <code>x.__add__(y)</code> and <code>y.__radd__(x)</code> are considered, as with the evaluation of <code>x + y</code>. In certain situations, augmented assignment can result in unexpected errors (see <a href="https://docs.python.org/3/faq/programming.html#faq-augmented-assignment-tuple-error">Why does <code>a_tuple[i] += ["item"]</code> raise an exception when the addition works?</a>), but this behavior is in fact part of the data model.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In the first example, you are reassigning the variable <code>a</code>, while in the second one you are modifying the data in-place, using the <code>+=</code> operator.</p>
<p>See the section about <a href="https://docs.python.org/3.6/reference/simple_stmts.html#augmented-assignment-statements">7.2.1. Augmented assignment statements
</a>:</p>
<blockquote>
<p>An augmented assignment expression like <code>x += 1</code> can be rewritten as <code>x = x + 1</code> to achieve a similar, but not exactly equal effect. In the augmented version, x is only evaluated once. <strong>Also, when possible, the actual operation is performed in-place</strong>, meaning that rather than creating a new object and assigning that to the target, the old object is modified instead.</p>
</blockquote>
<p><code>+=</code> operator calls <a href="https://docs.python.org/3.6/reference/datamodel.html#object.__iadd__"><code>__iadd__</code></a>. This function makes the change in-place, and only after its execution, the result is set back to the object you are "applying" the <code>+=</code> on.</p>
<p><a href="https://docs.python.org/3.6/reference/datamodel.html#object.__add__"><code>__add__</code></a> on the other hand takes the parameters and returns their sum (without modifying them).</p>
</div>
<div class="post-text" itemprop="text">
<p>As already pointed out, <code>b += 1</code> updates <code>b</code> in-place, while <code>a = a + 1</code> computes <code>a + 1</code> and then assigns the name <code>a</code> to the result (now <code>a</code> does not refer to a row of <code>A</code> anymore).</p>
<p>To understand the <code>+=</code> operator properly though, we need also to understand the concept of <em>mutable</em> versus <em>immutable</em> objects. Consider what happens when we leave out the <code>.reshape</code>:</p>
<pre><code>C = np.arange(12)
for c in C:
    c += 1
print(C)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]
</code></pre>
<p>We see that <code>C</code> is <em>not</em> updated, meaning that <code>c += 1</code> and <code>c = c + 1</code> are equivalent. This is because now <code>C</code> is a 1D array (<code>C.ndim == 1</code>), and so when iterating over <code>C</code>, each integer element is pulled out and assigned to <code>c</code>.</p>
<p>Now in Python, integers are immutable, meaning that in-place updates are not allowed, effectively transforming <code>c += 1</code> into <code>c = c + 1</code>, where <code>c</code> now refers to a <em>new</em> integer, not coupled to <code>C</code> in any way. When you loop over the reshaped arrays, whole rows (<code>np.ndarray</code>s) are assigned to <code>b</code> (and <code>a</code>) at a time, which are <em>mutable</em> objects, meaning that you are allowed to stick in new integers at will, which happens when you do <code>a += 1</code>.</p>
<p>It should be mentioned that though <code>+</code> and <code>+=</code> are ment to be related as described above (and very much usually are), any type can implement them any way it wants by defining the <code>__add__</code> and <a href="https://docs.python.org/3.6/reference/datamodel.html#object.__iadd__" rel="nofollow noreferrer"><code>__iadd__</code></a> methods, respectively.</p>
</div>
<div class="post-text" itemprop="text">
<p>The short form(<code>a += 1</code>) has the option to modify <code>a</code> in-place , instead of creating a new object representing the sum and rebinding it back to the same name(<code>a = a + 1</code>).So,The short form(<code>a += 1</code>) is much efficient as it doesn't necessarily need to make a copy of <code>a</code> unlike <code>a = a + 1</code>.</p>
<p>Also even if they are outputting the same result, notice they are different because they are separate operators: <code>+</code> and <code>+=</code></p>
</div>
<div class="post-text" itemprop="text">
<p>First off: The variables a and b in the loops refer to <code>numpy.ndarray</code> objects.</p>
<p>In the first loop, <code>a = a + 1</code> is evaluated as follows: the <code>__add__(self, other)</code> function of <code>numpy.ndarray</code> is called. This creates a new object and hence, A is not modified. Afterwards, the variable <code>a</code> is set to refer to the result. </p>
<p>In the second loop, no new object is created. The statement <code>b += 1</code> calls  the <code>__iadd__(self, other)</code> function of <code>numpy.ndarray</code> which modifies the <code>ndarray</code> object in place to which b is referring to. Hence, <code>B</code> is modified.</p>
</div>
<div class="post-text" itemprop="text">
<p>A key issue here is that this loop iterates over the rows (1st dimension) of <code>B</code>:</p>
<pre><code>In [258]: B
Out[258]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
In [259]: for b in B:
     ...:     print(b,'=&gt;',end='')
     ...:     b += 1
     ...:     print(b)
     ...:     
[0 1 2] =&gt;[1 2 3]
[3 4 5] =&gt;[4 5 6]
[6 7 8] =&gt;[7 8 9]
[ 9 10 11] =&gt;[10 11 12]
</code></pre>
<p>Thus the <code>+=</code> is acting on a mutable object, an array.</p>
<p>This is implied in the other answers, but easily missed if your focus is on the <code>a = a+1</code> reassignment.</p>
<p>I could also make an in-place change to <code>b</code> with <code>[:]</code> indexing, or even something fancier, <code>b[1:]=0</code>:</p>
<pre><code>In [260]: for b in B:
     ...:     print(b,'=&gt;',end='')
     ...:     b[:] = b * 2

[1 2 3] =&gt;[2 4 6]
[4 5 6] =&gt;[ 8 10 12]
[7 8 9] =&gt;[14 16 18]
[10 11 12] =&gt;[20 22 24]
</code></pre>
<p>Of course with a 2d array like <code>B</code> we usually don't need to iterate on the rows.  Many operations that work on a single of <code>B</code> also work on the whole thing.  <code>B += 1</code>, <code>B[1:] = 0</code>, etc.</p>
</div>
<span class="comment-copy"><code>i = i + 1</code> reassigns <code>i</code>, <code>i += 1</code> increments <code>i</code> by <code>1</code></span>
<span class="comment-copy">Do you realize that you are iterating on the rows of the array, not the individual elements?</span>
<span class="comment-copy">down the line i += 1 prevents one instruction at assembly language level</span>
<span class="comment-copy">How is it possible that question from yesterday got 78 upvotes? Almost 80 upvotes and 6630 views in a single day? It's a bug or something?</span>
<span class="comment-copy">@H.Doe: no, this isn't a bug. All thanks to people who upvote everything, to those who prefer to answer simple questions, instead of searching for suitable duplicates, and to <a href="http://stackexchange.com/questions?tab=hot">HNQ</a> list on the right.</span>
<span class="comment-copy">Piggybacking the top comment for a less technical explanation: <code>a=a+1</code> here is functionally equivalent to <code>dummy=a+1</code>, as the <code>a</code> on left left side of the equals sign is being reassigned to no longer be a view of <code>A</code>.  Since <code>+=</code> doesn't reassign like <code>=</code> does, but instead modifies 'in place,' <code>b</code> remains a view of <code>B</code> and thus <code>B</code> increments where <code>A</code> doesn't.</span>
<span class="comment-copy">There is a very important consideration to make especially when using numpy. When using in place add, the data type of the original variable is retained. So if you, for example, attempt to add a complex value to a real valued numpy array, the in place add will remain real valued, whereas if you use reassignment, you get the  correct complex result. Be careful when using in place adds with numpy.</span>
<span class="comment-copy">@nevsan In that case a <code>TypeError</code> is raised so while it may not work as intended it doesn't fail <i>silently</i> or do the wrong thing as your comment suggests.</span>
<span class="comment-copy">Thanks! To clarify, I did realize that i += 1 and i = i + 1 was not the same thing, but since I was using Numpy, I thought that i = i + 1 still meant I was writing to the same memory of i in A.</span>
<span class="comment-copy">@Dammi Numpy can't change the way names are linked to objects, that's entirely determined by python itself. But to explicitly write into the same memory you could use <code>i[:] = i+1</code> (but it's generally better to use <code>+=</code> or the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.add.html#numpy.add" rel="nofollow noreferrer"><code>out</code></a>-argument of several ufuncs).</span>
