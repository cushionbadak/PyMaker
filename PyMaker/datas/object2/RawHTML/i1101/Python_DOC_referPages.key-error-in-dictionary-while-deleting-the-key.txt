<div class="post-text" itemprop="text">
<p>I am trying to count the string and I want to delete the key with value 1 and 2. I am successfully able to count the strings with below script. If I am adding if loop to the dictionary its throwing Key error 'd' when I try to print it.        </p>
<pre><code>s = "aaabbbd"
def check_freq(s):
     freq = {}
     for c in s:
        freq[c] = s.count(c)
     for w in sorted(freq, key=freq.get, reverse=True):
         if freq[w] == 1:
             del freq[w]
             print (w, freq[w])

check_freq(s)
</code></pre>
<p>Error is below</p>
<pre><code>File "&lt;ipython-input-60-a79c71ac1b31&gt;", line 10, in check_freq
    print (w, freq[w])

KeyError: 'd'
</code></pre>
<p>Expected output</p>
<blockquote>
<p>{'a': 3, 'b': 3}</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you delete the key, how can you print it? Because the key is deleted, it raises a KeyError as the key is no longer present. Just add a continue when you delete it.</p>
<pre><code>s = "aaabbbd"
def check_freq(s):
    freq = {}
    for c in s:
        freq[c] = s.count(c)
    for w in sorted(freq, key=freq.get, reverse=True):
        if freq[w] == 1:
            del freq[w]
            continue
        print (w, freq[w])
    return freq
result = check_freq(s)

&gt;a 3
b 3

result 
&gt; {'a': 3, 'b': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try this: </p>
<pre><code>s = "aaabbbd"

def check_freq(s):
    freq = {}
    for c in s:
        freq[c] = s.count(c)

    for key, value in freq.items():
        if value == 1:
            del freq[key]

    return freq

print check_freq(s)
</code></pre>
<p><strong>Output:</strong></p>
<p>{'a': 3, 'b': 3}</p>
<p>Actually you don't need to sort the dictionary. You just need to iterate through its elements and check whether the key is equal to one. Then delete this key-value pair from the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>KeyError</code> is happening because when you write</p>
<pre><code>if freq[w] == 1:
    del freq[w]
    print (w, freq[w])
</code></pre>
<p>for <code>w = 'd'</code>, <code>freq[w] = 1</code>. So, you are deleting <code>freq[w]</code> but in the next line, you are trying to print <code>freq[w]</code> which doesn't exist.
You could avoid this by using an <code>if-else</code> clause.</p>
<pre><code>s = "aaabbbd"
def check_freq(s):
    freq = {}
    for c in s:
        freq[c] = s.count(c)
    for w in sorted(freq, key=freq.get, reverse=True):
        if freq[w] == 1 or freq[w] == 2:
            del freq[w]
        else:
            print (w, freq[w])
print(freq)

check_freq(s)
</code></pre>
<h3>Output:</h3>
<pre><code>a 3
b 3
{'a': 3, 'b': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By deleting the entry from the <code>freq</code> dictionary you cannot print it anymore; it doesn't exist. You could add an else clausule to prevent this:</p>
<pre><code> for w in sorted(freq, key=freq.get, reverse=True):
     if freq[w] == 1:
         del freq[w]
     else:
         print (w, freq[w])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of deleting keys, you could always rebuild a new dictionary with only keep keys with values greater than 2:</p>
<pre><code>from collections import Counter

s = "aaabbbd"

counts = {k: v for k, v in Counter(s).items() if v &gt; 2}

print(counts)
# {'a': 3, 'b': 3}
</code></pre>
<p>Which also uses <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a> to construct the counts. Using <code>s.count()</code> is very inefficient since it scans the whole string each time to count a character. This ends up being quadratic O(N^2), since it has to visit every character for each character. <code>Counter()</code> simply counts all the characters in one traversal, which is O(N). </p>
<p>If you want to delete from the same dictionary, you can iterate over a copy and delete from the original with <a href="https://docs.python.org/3/library/stdtypes.html#dict.pop" rel="nofollow noreferrer"><code>dict.pop</code></a>:</p>
<pre><code>from collections import Counter

s = "aaabbbd"

counts = Counter(s)

count_items = list(counts.items())
for k, v in count_items:
    if v &lt;= 2:
        counts.pop(k) # Or del counts[k]

print(counts)
# Counter({'a': 3, 'b': 3})
</code></pre>
<p><strong>Note:</strong> <code>Counter()</code> is a subclass of <code>dict</code>, so you can treat them the same. Having said this, one of the differences is that <code>Counter()</code> doesn't raise <code>KeyError</code> when a key doesn't exist, it returns 0 instead. </p>
<p>This can be demonstrated here:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; x = Counter({'a': 1})
&gt;&gt;&gt; y = {'a': 1}
&gt;&gt;&gt; x['b']
0
&gt;&gt;&gt; y['b']
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'b'
</code></pre>
</div>
<span class="comment-copy">Can't reproduce your problem. It works fine for me</span>
<span class="comment-copy">I want to delete the key with value 1 in this case key 'd' has to deleted. So if uncomment my if loop (#if freq[w] == 1: #del freq[w])   it will throw error</span>
<span class="comment-copy">do you still have the print statement there after deletion? cuz that will error</span>
<span class="comment-copy">I'd love to hear what is not helpful or wrong about my answer, to deserve a downvote. That way I can improve my answer!</span>
