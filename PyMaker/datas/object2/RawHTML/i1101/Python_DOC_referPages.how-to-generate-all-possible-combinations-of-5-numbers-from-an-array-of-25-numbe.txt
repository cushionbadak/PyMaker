<div class="post-text" itemprop="text">
<p>I have a list with 15 numbers in, and I need to write some code that produces all 32,768 combinations of those numbers. </p>
<p>I've found <a href="http://desk.stinkpot.org:8080/tricks/index.php/2008/04/get-all-possible-combinations-of-a-lists-elements-in-python/" rel="noreferrer">some code</a> (by Googling) that apparently does what I'm looking for, but I found the code fairly opaque and am wary of using it. Plus I have a feeling there must be a more elegant solution.</p>
<p>The only thing that occurs to me would be to just loop through the decimal integers 1–32768 and convert those to binary, and use the binary representation as a filter to pick out the appropriate numbers. </p>
<p>Does anyone know of a better way? Using <code>map()</code>, maybe?</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at <a href="http://docs.python.org/library/itertools.html#itertools.combinations" rel="noreferrer">itertools.combinations</a>:</p>
<blockquote>
<pre><code>itertools.combinations(iterable, r)
</code></pre>
<p>Return r length subsequences of elements from
  the input iterable.</p>
<p>Combinations are emitted in lexicographic sort order. So, if the
  input iterable is sorted, the
  combination tuples will be produced in
  sorted order.</p>
</blockquote>
<p>Since 2.6, batteries are included!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/464864/python-code-to-pick-out-all-possible-combinations-from-a-list/464882#464882">This answer</a> missed one aspect: the OP asked for ALL combinations... not just combinations of length "r".</p>
<p>So you'd either have to loop through all lengths "L":</p>
<pre><code>import itertools

stuff = [1, 2, 3]
for L in range(0, len(stuff)+1):
    for subset in itertools.combinations(stuff, L):
        print(subset)
</code></pre>
<p>Or -- if you want to get snazzy (or bend the brain of whoever reads your code after you) -- you can generate the chain of "combinations()" generators, and iterate through that:</p>
<pre><code>from itertools import chain, combinations
def all_subsets(ss):
    return chain(*map(lambda x: combinations(ss, x), range(0, len(ss)+1)))

for subset in all_subsets(stuff):
    print(subset)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a lazy one-liner, also using itertools:</p>
<pre><code>from itertools import compress, product

def combinations(items):
    return ( set(compress(items,mask)) for mask in product(*[[0,1]]*len(items)) )
    # alternative:                      ...in product([0,1], repeat=len(items)) )
</code></pre>
<p>Main idea behind this answer: there are 2^N combinations -- same as the number of binary strings of length N. For each binary string, you pick all elements corresponding to a "1".</p>
<pre><code>items=abc * mask=###
 |
 V
000 -&gt; 
001 -&gt;   c
010 -&gt;  b
011 -&gt;  bc
100 -&gt; a
101 -&gt; a c
110 -&gt; ab
111 -&gt; abc
</code></pre>
<p>Things to consider:</p>
<ul>
<li>This requires that you can call <code>len(...)</code> on <code>items</code> (workaround: if <code>items</code> is something like an iterable like a generator, turn it into a list first with <code>items=list(_itemsArg)</code>)</li>
<li>This requires that the order of iteration on <code>items</code> is not random (workaround: don't be insane)</li>
<li>This requires that the items are unique, or else <code>{2,2,1}</code> and <code>{2,1,1}</code> will both collapse to <code>{2,1}</code> (workaround: use <code>collections.Counter</code> as a drop-in replacement for <code>set</code>; it's basically a multiset... though you may need to later use <code>tuple(sorted(Counter(...).elements()))</code> if you need it to be hashable)</li>
</ul>
<hr/>
<p><strong>Demo</strong></p>
<pre><code>&gt;&gt;&gt; list(combinations(range(4)))
[set(), {3}, {2}, {2, 3}, {1}, {1, 3}, {1, 2}, {1, 2, 3}, {0}, {0, 3}, {0, 2}, {0, 2, 3}, {0, 1}, {0, 1, 3}, {0, 1, 2}, {0, 1, 2, 3}]

&gt;&gt;&gt; list(combinations('abcd'))
[set(), {'d'}, {'c'}, {'c', 'd'}, {'b'}, {'b', 'd'}, {'c', 'b'}, {'c', 'b', 'd'}, {'a'}, {'a', 'd'}, {'a', 'c'}, {'a', 'c', 'd'}, {'a', 'b'}, {'a', 'b', 'd'}, {'a', 'c', 'b'}, {'a', 'c', 'b', 'd'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In comments under the highly upvoted <a href="https://stackoverflow.com/a/5898031/355230">answer</a> by @Dan H, mention is made of the <code>powerset()</code> recipe in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools</code> documentation</a>—including one by <a href="https://stackoverflow.com/questions/464864/how-to-get-all-possible-combinations-of-a-list-s-elements/5898031#comment10012495_5898031">Dan himself</a>. <em>However</em>, so far no one has posted it as an answer. Since it's probably one of the better if not the best approach to the problem—and given a <a href="https://stackoverflow.com/questions/464864/how-to-get-all-possible-combinations-of-a-list-s-elements/5898031#comment69178954_5898031">little encouragement</a> from another commenter, it's shown below. The function produces <strong>all</strong> unique combinations of the list elements of <strong>every</strong> length possible (including those containing zero and all the elements).</p>
<p><strong>Note</strong>: If the, subtly different, goal is to obtain only combinations of unique elements, change the line <code>s = list(iterable)</code> to <code>s = list(set(iterable))</code> to eliminate any duplicate elements. Regardless, the fact that the <code>iterable</code> is ultimately turned into a <code>list</code> means it will work with generators (unlike several of the other answers).</p>
<pre><code>from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)  # allows duplicate elements
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

stuff = [1, 2, 3]
for i, combo in enumerate(powerset(stuff), 1):
    print('combo #{}: {}'.format(i, combo))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>combo #1: ()
combo #2: (1,)
combo #3: (2,)
combo #4: (3,)
combo #5: (1, 2)
combo #6: (1, 3)
combo #7: (2, 3)
combo #8: (1, 2, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one using recursion:</p>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; def combinations(target,data):
...     for i in range(len(data)):
...         new_target = copy.copy(target)
...         new_data = copy.copy(data)
...         new_target.append(data[i])
...         new_data = data[i+1:]
...         print new_target
...         combinations(new_target,
...                      new_data)
...                      
... 
&gt;&gt;&gt; target = []
&gt;&gt;&gt; data = ['a','b','c','d']
&gt;&gt;&gt; 
&gt;&gt;&gt; combinations(target,data)
['a']
['a', 'b']
['a', 'b', 'c']
['a', 'b', 'c', 'd']
['a', 'b', 'd']
['a', 'c']
['a', 'c', 'd']
['a', 'd']
['b']
['b', 'c']
['b', 'c', 'd']
['b', 'd']
['c']
['c', 'd']
['d']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This one-liner gives you all the combinations (between <code>0</code> and <code>n</code> items if the original list/set contains <code>n</code> distinct elements) and uses the native method <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="noreferrer"><code>itertools.combinations</code></a>:</p>
<h2>Python 2</h2>
<pre><code>from itertools import combinations

input = ['a', 'b', 'c', 'd']

output = sum([map(list, combinations(input, i)) for i in range(len(input) + 1)], [])
</code></pre>
<h2>Python 3</h2>
<pre><code>from itertools import combinations

input = ['a', 'b', 'c', 'd']

output = sum([list(map(list, combinations(input, i))) for i in range(len(input) + 1)], [])
</code></pre>
<hr/>
<p>The output will be:</p>
<pre><code>[[],
 ['a'],
 ['b'],
 ['c'],
 ['d'],
 ['a', 'b'],
 ['a', 'c'],
 ['a', 'd'],
 ['b', 'c'],
 ['b', 'd'],
 ['c', 'd'],
 ['a', 'b', 'c'],
 ['a', 'b', 'd'],
 ['a', 'c', 'd'],
 ['b', 'c', 'd'],
 ['a', 'b', 'c', 'd']]
</code></pre>
<hr/>
<p>Try it online:</p>
<p><a href="http://ideone.com/COghfX" rel="noreferrer">http://ideone.com/COghfX</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with Dan H that Ben indeed asked for <strong>all</strong> combinations. <code>itertools.combinations()</code> does not give all combinations.</p>
<p>Another issue is, if the input iterable is big, it is perhaps better to return a generator instead of everything in a list:</p>
<pre><code>iterable = range(10)
for s in xrange(len(iterable)+1):
  for comb in itertools.combinations(iterable, s):
    yield comb
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can generating all combinations of a list in python using this simple code</strong></p>
<pre><code>import itertools

a = [1,2,3,4]
for i in xrange(0,len(a)+1):
   print list(itertools.combinations(a,i))
</code></pre>
<p><strong>Result would be :</strong></p>
<pre><code>[()]
[(1,), (2,), (3,), (4,)]
[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]
[(1, 2, 3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I thought I would add this function for those seeking an answer without importing itertools or any other extra libraries.</p>
<pre><code>def powerSet(items):
    """
    Power set generator: get all possible combinations of a list’s elements

    Input:
        items is a list
    Output:
        returns 2**n combination lists one at a time using a generator 

    Reference: edx.org 6.00.2x Lecture 2 - Decision Trees and dynamic programming
    """

    N = len(items)
    # enumerate the 2**N possible combinations
    for i in range(2**N):
        combo = []
        for j in range(N):
            # test bit jth of integer i
            if (i &gt;&gt; j) % 2 == 1:
                combo.append(items[j])
        yield combo
</code></pre>
<p>Simple Yield Generator Usage:</p>
<pre><code>for i in powerSet([1,2,3,4]):
    print (i, ", ",  end="")
</code></pre>
<p>Output from Usage example above:</p>
<blockquote>
<p>[] ,  [1] , [2] , [1, 2] , [3] , [1, 3] , [2, 3] , [1, 2, 3] , [4] ,
  [1, 4] ,  [2, 4] , [1, 2, 4] , [3, 4] , [1, 3, 4] , [2, 3, 4] , [1, 2,
  3, 4] ,</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is yet another solution (one-liner), involving using the <code>itertools.combinations</code> function, but here we use a double list comprehension (as opposed to a for loop or sum):</p>
<pre><code>def combs(x):
    return [c for i in range(len(x)+1) for c in combinations(x,i)]
</code></pre>
<hr/>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; combs([1,2,3,4])
[(), 
 (1,), (2,), (3,), (4,), 
 (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), 
 (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4), 
 (1, 2, 3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below is a "standard recursive answer", similar to the other similar answer <a href="https://stackoverflow.com/a/23743696/711085">https://stackoverflow.com/a/23743696/711085</a> . (We don't realistically have to worry about running out of stack space since there's no way we could process all N! permutations.)</p>
<p>It visits every element in turn, and either takes it or leaves it (we can directly see the 2^N cardinality from this algorithm).</p>
<pre><code>def combs(xs, i=0):
    if i==len(xs):
        yield ()
        return
    for c in combs(xs,i+1):
        yield c
        yield c+(xs[i],)
</code></pre>
<hr/>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list( combs(range(5)) )
[(), (0,), (1,), (1, 0), (2,), (2, 0), (2, 1), (2, 1, 0), (3,), (3, 0), (3, 1), (3, 1, 0), (3, 2), (3, 2, 0), (3, 2, 1), (3, 2, 1, 0), (4,), (4, 0), (4, 1), (4, 1, 0), (4, 2), (4, 2, 0), (4, 2, 1), (4, 2, 1, 0), (4, 3), (4, 3, 0), (4, 3, 1), (4, 3, 1, 0), (4, 3, 2), (4, 3, 2, 0), (4, 3, 2, 1), (4, 3, 2, 1, 0)]

&gt;&gt;&gt; list(sorted( combs(range(5)), key=len))
[(), 
 (0,), (1,), (2,), (3,), (4,), 
 (1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (4, 3), 
 (2, 1, 0), (3, 1, 0), (3, 2, 0), (3, 2, 1), (4, 1, 0), (4, 2, 0), (4, 2, 1), (4, 3, 0), (4, 3, 1), (4, 3, 2), 
 (3, 2, 1, 0), (4, 2, 1, 0), (4, 3, 1, 0), (4, 3, 2, 0), (4, 3, 2, 1), 
 (4, 3, 2, 1, 0)]

&gt;&gt;&gt; len(set(combs(range(5))))
32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It could be done using itertools </p>
<p><strong>For permutations</strong> </p>
<p>This method takes a list as an input and return an object list of tuples that contain permutation of length L in a list form.</p>
<pre><code># A Python program to print all  
# permutations of given length 
from itertools import permutations 

# Get all permutations of length 2 
# and length 2 
perm = permutations([1, 2, 3], 2) 

# Print the obtained permutations 
for i in list(perm): 
    print (i) 
</code></pre>
<p><strong>For Combination</strong> </p>
<p>This method takes a list and a input r as a input and return a object list of tuples which contain all possible combination of length r in a list form.</p>
<pre><code># A Python program to print all  
# combinations of given length 
from itertools import combinations 

# Get all combinations of [1, 2, 3] 
# and length 2 
comb = combinations([1, 2, 3], 2) 

# Print the obtained combinations 
for i in list(comb): 
    print (i) 
</code></pre>
<p>see <a href="https://www.geeksforgeeks.org/permutation-and-combination-in-python/" rel="nofollow noreferrer">this</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This code employs a simple algorithm with nested lists...</p>
<pre><code># FUNCTION getCombos: To generate all combos of an input list, consider the following sets of nested lists...
#
#           [ [ [] ] ]
#           [ [ [] ], [ [A] ] ]
#           [ [ [] ], [ [A],[B] ],         [ [A,B] ] ]
#           [ [ [] ], [ [A],[B],[C] ],     [ [A,B],[A,C],[B,C] ],                   [ [A,B,C] ] ]
#           [ [ [] ], [ [A],[B],[C],[D] ], [ [A,B],[A,C],[B,C],[A,D],[B,D],[C,D] ], [ [A,B,C],[A,B,D],[A,C,D],[B,C,D] ], [ [A,B,C,D] ] ]
#
#  There is a set of lists for each number of items that will occur in a combo (including an empty set).
#  For each additional item, begin at the back of the list by adding an empty list, then taking the set of
#  lists in the previous column (e.g., in the last list, for sets of 3 items you take the existing set of
#  3-item lists and append to it additional lists created by appending the item (4) to the lists in the
#  next smallest item count set. In this case, for the three sets of 2-items in the previous list. Repeat
#  for each set of lists back to the initial list containing just the empty list.
#

def getCombos(listIn = ['A','B','C','D','E','F'] ):
    listCombos = [ [ [] ] ]     # list of lists of combos, seeded with a list containing only the empty list
    listSimple = []             # list to contain the final returned list of items (e.g., characters)

    for item in listIn:
        listCombos.append([])   # append an emtpy list to the end for each new item added
        for index in xrange(len(listCombos)-1, 0, -1):  # set the index range to work through the list
            for listPrev in listCombos[index-1]:        # retrieve the lists from the previous column
                listCur = listPrev[:]                   # create a new temporary list object to update
                listCur.append(item)                    # add the item to the previous list to make it current
                listCombos[index].append(listCur)       # list length and append it to the current list

                itemCombo = ''                          # Create a str to concatenate list items into a str
                for item in listCur:                    # concatenate the members of the lists to create
                    itemCombo += item                   # create a string of items
                listSimple.append(itemCombo)            # add to the final output list

    return [listSimple, listCombos]
# END getCombos()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know it's far more practical to use itertools to get the <em>all</em> the combinations, but you <em>can</em> achieve this partly with only list comprehension if you so happen to desire, granted you want to code <strong>a lot</strong></p>
<p>For combinations of two pairs:</p>
<pre><code>    lambda l: [(a, b) for i, a in enumerate(l) for b in l[i+1:]]
</code></pre>
<p><br/>
And, for combinations of three pairs, it's as easy as this:</p>
<pre><code>    lambda l: [(a, b, c) for i, a in enumerate(l) for ii, b in enumerate(l[i+1:]) for c in l[i+ii+2:]]
</code></pre>
<p><hr>
The result is identical to using itertools.combinations:</hr></p>
<pre><code>import itertools
combs_3 = lambda l: [
    (a, b, c) for i, a in enumerate(l) 
    for ii, b in enumerate(l[i+1:]) 
    for c in l[i+ii+2:]
]
data = ((1, 2), 5, "a", None)
print("A:", list(itertools.combinations(data, 3)))
print("B:", combs_3(data))
# A: [((1, 2), 5, 'a'), ((1, 2), 5, None), ((1, 2), 'a', None), (5, 'a', None)]
# B: [((1, 2), 5, 'a'), ((1, 2), 5, None), ((1, 2), 'a', None), (5, 'a', None)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without using itertools:</p>
<pre><code>def combine(inp):
    return combine_helper(inp, [], [])


def combine_helper(inp, temp, ans):
    for i in range(len(inp)):
        current = inp[i]
        remaining = inp[i + 1:]
        temp.append(current)
        ans.append(tuple(temp))
        combine_helper(remaining, temp, ans)
        temp.pop()
    return ans


print(combine(['a', 'b', 'c', 'd']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combination from itertools</p>
<pre><code>import itertools
col_names = ["aa","bb", "cc", "dd"]
all_combinations = itertools.chain(*[itertools.combinations(col_names,i+1) for i,_ in enumerate(col_names)])
print(list(all_combinations))
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an approach that can be easily transfered to all programming languages supporting recursion <strong>(no itertools, no yield, no list comprehension)</strong>:</p>
<pre><code>def combs(a):
    if len(a) == 0:
        return [[]]
    cs = []
    for c in combs(a[1:]):
        cs += [c, c+[a[0]]]
    return cs

&gt;&gt;&gt; combs([1,2,3,4,5])
[[], [1], [2], [2, 1], [3], [3, 1], [3, 2], ..., [5, 4, 3, 2, 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehension:</p>
<pre><code>def selfCombine( list2Combine, length ):
    listCombined = str( ['list2Combine[i' + str( i ) + ']' for i in range( length )] ).replace( "'", '' ) \
                     + 'for i0 in range(len( list2Combine ) )'
    if length &gt; 1:
        listCombined += str( [' for i' + str( i ) + ' in range( i' + str( i - 1 ) + ', len( list2Combine ) )' for i in range( 1, length )] )\
            .replace( "', '", ' ' )\
            .replace( "['", '' )\
            .replace( "']", '' )

    listCombined = '[' + listCombined + ']'
    listCombined = eval( listCombined )

    return listCombined

list2Combine = ['A', 'B', 'C']
listCombined = selfCombine( list2Combine, 2 )
</code></pre>
<p>Output would be:</p>
<pre><code>['A', 'A']
['A', 'B']
['A', 'C']
['B', 'B']
['B', 'C']
['C', 'C']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is my implementation</p>
<pre><code>    def get_combinations(list_of_things):
    """gets every combination of things in a list returned as a list of lists

    Should be read : add all combinations of a certain size to the end of a list for every possible size in the
    the list_of_things.

    """
    list_of_combinations = [list(combinations_of_a_certain_size)
                            for possible_size_of_combinations in range(1,  len(list_of_things))
                            for combinations_of_a_certain_size in itertools.combinations(list_of_things,
                                                                                         possible_size_of_combinations)]
    return list_of_combinations
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are two implementations of <code>itertools.combinations</code></p>
<p>One that returns a list</p>
<pre><code>def combinations(lst, depth, start=0, items=[]):
    if depth &lt;= 0:
        return [items]
    out = []
    for i in range(start, len(lst)):
        out += combinations(lst, depth - 1, i + 1, items + [lst[i]])
    return out
</code></pre>
<p>One returns a generator</p>
<pre><code>def combinations(lst, depth, start=0, prepend=[]):
    if depth &lt;= 0:
        yield prepend
    else:
        for i in range(start, len(lst)):
            for c in combinations(lst, depth - 1, i + 1, prepend + [lst[i]]):
                yield c
</code></pre>
<p>Please note that providing a helper function to those is advised because the prepend argument is static and is not changing with every call</p>
<pre><code>print([c for c in combinations([1, 2, 3, 4], 3)])
# [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]

# get a hold of prepend
prepend = [c for c in combinations([], -1)][0]
prepend.append(None)

print([c for c in combinations([1, 2, 3, 4], 3)])
# [[None, 1, 2, 3], [None, 1, 2, 4], [None, 1, 3, 4], [None, 2, 3, 4]]
</code></pre>
<p>This is a very superficial case but better be safe than sorry</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this.. used a string instead of list, but same thing.. string can be treated like a list in Python:</p>
<pre><code>def comb(s, res):
    if not s: return
    res.add(s)
    for i in range(0, len(s)):
        t = s[0:i] + s[i + 1:]
        comb(t, res)

res = set()
comb('game', res) 

print(res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Without</strong> <code>itertools</code> in Python 3 you could do something like this:</p>
<pre><code>def combinations(arr, carry):
    for i in range(len(arr)):
        yield carry + arr[i]
        yield from combinations(arr[i + 1:], carry + arr[i])
</code></pre>
<p>where initially <code>carry = "".</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def combinations(iterable, r):
# combinations('ABCD', 2) --&gt; AB AC AD BC BD CD
# combinations(range(4), 3) --&gt; 012 013 023 123
pool = tuple(iterable)
n = len(pool)
if r &gt; n:
    return
indices = range(r)
yield tuple(pool[i] for i in indices)
while True:
    for i in reversed(range(r)):
        if indices[i] != i + n - r:
            break
    else:
        return
    indices[i] += 1
    for j in range(i+1, r):
        indices[j] = indices[j-1] + 1
    yield tuple(pool[i] for i in indices)


x = [2, 3, 4, 5, 1, 6, 4, 7, 8, 3, 9]
for i in combinations(x, 2):
    print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If someone is looking for a reversed list, like I was:</p>
<pre><code>stuff = [1, 2, 3, 4]

def reverse(bla, y):
    for subset in itertools.combinations(bla, len(bla)-y):
        print list(subset)
    if y != len(bla):
        y += 1
        reverse(bla, y)

reverse(stuff, 1)
</code></pre>
</div>
<span class="comment-copy">Readers should note that whether the list items are <b>unique</b> is an extremely important consideration, as many algorithms will then overcount some subset (e.g. 'abccc' -&gt; ['', 'a', 'b', 'c', 'c', 'c', 'ac', 'ac', 'ac', ...]. An easy workaround is to just shove all elements in a set <i>before</i> getting their permutations.</span>
<span class="comment-copy">I don't have python 2.6, but since that link contained the code for combinations, I was able to get it working. Thanks again!</span>
<span class="comment-copy">Ah, yes - I didn't see that it was 2.6 only... updated my answer</span>
<span class="comment-copy">you can just list it all. <code>list(itertools.combinations(iterable, r))</code></span>
<span class="comment-copy">Thanks for the support!  In the weeks since I've posted the above reply, I've found that the NAME of the concept for what Ben is looking for is the "powerset" of the original set of 15 items.  In fact, an example implementation is given on the standard python "itertools" doc page: <a href="http://docs.python.org/library/itertools.html" rel="nofollow noreferrer">docs.python.org/library/itertools.html</a> (grep for "powerset").</span>
<span class="comment-copy"><i><code>Alabaster's answer</code></i> -- which answer are you referring to? Maybe its better to leave that reference out and concentrate on the question an <i>your</i> answer :)</span>
<span class="comment-copy">@wolf: Apparently either "Alabaster's answer" has been deleted or the user changed his name some time in the five years since I posted my answer.  (I think "Alabaster" is now "James Brady".)  I don't think it is unusual or against guidelines to discuss the strengths or weaknesses of other answers in one's own answer; it helps readers compare and contrast, IMO.</span>
<span class="comment-copy">For anyone reading this far: The <b><code>powerset()</code></b> generator function in the recipes section of the <a href="https://docs.python.org/2/library/itertools.html#recipes" rel="nofollow noreferrer"><code>itertools</code> documentation</a> is simpler, potentially uses less memory, and is likely faster than the implementation shown here.</span>
<span class="comment-copy">@martineau: Maybe post that as an answer?</span>
<span class="comment-copy">Can this be modified to return a list of lists instead of printing?</span>
<span class="comment-copy">@JamesVickery yes, you could look at either making a list outside of the function and appending to that, or (better) make the function a generator, have a look at the 'yield' keyword :)</span>
<span class="comment-copy"><code>new_data = copy.copy(data)</code> - this row is redundant as far as I see, it doesn't influence on anything</span>
<span class="comment-copy">This is a permutation</span>
<span class="comment-copy">@AdHominem: no, it's not. It's a list of all combinations. Permutations would include, e.g. <code>['b', 'a']</code>.</span>
<span class="comment-copy"><code>TypeError: can only concatenate list (not "map") to list</code></span>
<span class="comment-copy">@0x48piraj: thank you for noticing, I edited my answer consequently!</span>
<span class="comment-copy">Nice example.  I love generators... and I love Python for having them!  This example only has one combinations() object around at a time, and yields one of the combinations at time.  (Perhaps you want to add the def block around this -- as a usage example.)  Note that my implementation (with chain(), given above) is not too much worse: it's true that is creates all len(iterable) generators at once... but it does NOT create all 2 ** len(iterable) combinations at once, as -- to my understanding -- chain "uses up" the first generator before drawing from subsequent ones.</span>
<span class="comment-copy">Bug in this code: does not return the empty set. Might mean xrange(0, ...) but haven't tested. <b>edit</b>: I went ahead and edited your answer to fix it.</span>
<span class="comment-copy">I think this is very neat solution.</span>
<span class="comment-copy">So what this code appears to do is return [listOfCombinations, listOfCombinationsGroupedBySize]. Unfortunately when run with the demo input it gives 63 elements rather than 64; it seems to be missing the empty set (in this case, the empty string <code>""</code>).</span>
<span class="comment-copy">This proposal is to do string mangling to build up sets?!?!  Holy crow....  And: it is not returning the powerset, but rather, something like combinations_with_replacement().  (See <a href="http://docs.python.org/library/itertools.html#itertools.combinations_with_replacement." rel="nofollow noreferrer">docs.python.org/library/…</a>)</span>
<span class="comment-copy">This indeed does the same as <i>combination_with_replacement()</i>, but at least on my box this runs slightly faster than <i>itertools</i>. What can I say, I like list comprehensions.</span>
<span class="comment-copy">Thank you for the answer! What about create listCombined with reversed lists such as ['A', 'A'], ['A', 'B'], ['A', 'C'], ['B', 'A'], ['B', 'B'], ['B', 'C'], ['C', 'A'], ['C', 'B'] and ['C', 'C'] that include everything?</span>
<span class="comment-copy">What is your implementation solving better than the previous implementations posted here.</span>
<span class="comment-copy">If I'm right, this is the exact code copied from python documentation [<a href="https://docs.python.org/3.6/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3.6/library/itertools.html</a> ]. If so, please do ref the source.</span>
<span class="comment-copy">interesting approach</span>
