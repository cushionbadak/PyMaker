<div class="post-text" itemprop="text">
<p>Defining a parameterless exception :</p>
<pre><code>class myException(Exception):
    pass
</code></pre>
<p>When raised, is there any difference between :</p>
<pre><code>raise myException
</code></pre>
<p>and</p>
<pre><code>raise myException()
</code></pre>
<p>When trying, I could find none - Is it simply an overloaded syntax?</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is that both <code>raise MyException</code> and <code>raise MyException()</code> do the same thing.  This first form auto instantiates your exception.</p>
<p>The <a href="http://docs.python.org/3/reference/simple_stmts.html#the-raise-statement">relevant section from the docs</a> says, "<em>raise</em> evaluates the first expression as the exception object. It must be either a subclass or an instance of BaseException. If it is a class, the exception instance will be obtained when needed by instantiating the class with no arguments."</p>
<p>That said, even though the semantics are the same,  the first form is microscopically faster, and the second form is more flexible (because you can pass it arguments if needed).</p>
<p>The usual style that most people use in Python (i.e. in the standard library, in popular applications, and in many books) is to use <code>raise MyException</code> when there are no arguments.  People only instantiate the exception directly when there some arguments need to be passed.  For example:  <code>raise KeyError(badkey)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Go look at the raise keyword in the docs <a href="http://docs.python.org/2/reference/simple_stmts.html#raise" rel="nofollow">6.9. The raise statement</a><br/>
It is creating an instance of myException</p>
</div>
<div class="post-text" itemprop="text">
<p>Yep, there is a difference between <code>ValueError</code> and <code>ValueError()</code></p>
<p><code>ValueError</code> is a class whereas <code>ValueError()</code> is a method. This is the reason the <code>type(ValueError) is type</code> and <code>type(ValueError()) is ValueError</code></p>
<p>The sole purpose of <code>raise</code> is to raise the exception, </p>
<blockquote>
<p>when we use <code>ValueError</code>, class will be called which in turn runs the constructor  <code>ValueError()</code> </p>
<p>when we use <code>ValueError()</code>, the method <code>ValueError()</code> is directly called.</p>
</blockquote>
<p>Note: <code>raise ValueError  # shorthand for 'raise ValueError()'</code></p>
</div>
<span class="comment-copy">you may need to pass some arguments in <code>()</code> like <code>raise NameError('HiThere')</code> read this <a href="http://docs.python.org/2/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer">8.4. Raising Exceptions</a></span>
<span class="comment-copy">@GrijeshChauhan: I think the question is about <code>raise NameError</code> vs <code>raise NameError()</code>.</span>
<span class="comment-copy">@Blender Yes I just understood the question, Im also new learner :)</span>
<span class="comment-copy">Read this answer: <a href="http://stackoverflow.com/questions/13052991/proper-way-to-raise-exception-in-python#answer-13053014" title="proper way to raise exception in python%23answer 13053014">stackoverflow.com/questions/13052991/â€¦</a></span>
<span class="comment-copy">Strictly speaking it's not syntactic. Python cannot know whether it will get a class or an instance until runtime.</span>
<span class="comment-copy">Why would the first form (without parentheses) be microscopically faster?</span>
<span class="comment-copy">@jamesdlin Because the C code to auto-instantiate don't have the interpreted overhead than comes from you making the call yourself.</span>
<span class="comment-copy">It's worth noting that <a href="http://docs.python.org/3/reference/simple_stmts.html#raise" rel="nofollow noreferrer">the syntax for <code>raise</code></a> has changed a bit in Python 3. The part that's relevant to this question is the same though (<code>raise ExceptionType</code> still creates an instance of the type by calling its constructor with no arguments).</span>
