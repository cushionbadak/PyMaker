<div class="post-text" itemprop="text">
<p><strong>EDITED:</strong> Let's say I have some classes that inherit from the <code>SuperFoo</code> abstract class:</p>
<pre><code>from abc import ABCMeta, abstractmethod

class SuperFoo(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def do_something():
        pass

class Foo(SuperFoo):
    def __init__(self):
        pass

    def do_something():
        pass

class Bar(SuperFoo):
    def __init__(self):
        pass

    def do_something():
        pass
</code></pre>
<p>And a documented function that takes in a subclass of <code>SuperFoo</code> as a parameter:</p>
<pre><code>def build(super_foo):
    """
    Instantiate a SuperFoo class and do some other stuff.
    @param super_foo: The subclass whose constructor will be called
    @type super_foo: ??? &lt;--- What to use here?
    @return: An instance of a SuperFoo subclass
    @rtype: SuperFoo
    """
    # Do some stuff

    instance = class_name()  # Instantiate class
    return instance

foo = build(Foo)
bar = build(Bar)
</code></pre>
<p>What <code>@type</code> should I use in the function's docstring? It cannot be <code>SuperFoo</code> because that would correspond to an instance of <code>SuperFoo</code> and not to the type itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple technical answer has already been posted by motyzk - in your example, what you pass to <code>build</code> are classes so the the (ill-named) <code>class_name</code> param is of type <code>type</code> - with the restriction that (based on your code snippet) this class shouldn't expect any parameter, which doesn't correspond to any unambigous well-defined existing builtin "type". </p>
<p>Now as mentionned in comments, in Python </p>
<ul>
<li>everything is an object (and as such an instance of a class), </li>
<li>instanciating a class is done by calling the class object just like you'd call any function, </li>
<li>all callables DO return an object, even if implicitely (<code>None</code> is an object too)</li>
</ul>
<p>so your <code>build</code> function would technically work just the same with  just <em>any</em> callable that doesn't expect a param. As an example, this:</p>
<pre><code>def bar():
   return

whatever = build(bar)
</code></pre>
<p>is technically correct.</p>
<p>Now you mention in the function's docstring (emphasis is mine): </p>
<blockquote>
<p>Instantiate a class <strong>and do some other stuff</strong></p>
</blockquote>
<p>Since your function would just be totally useless as shown in the snippet you posted, I assume that in your <em>real</em> code the important part is in the (not shown) "do some other stuff", and that this "do some other stuff" part relies on some specific property of the class being passed. </p>
<p>In this case, you should document those specificities, either informally (textually, in the docstring itself) or <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">formally using the <code>abc</code> module</a>. This won't solve your question actually - your function expects a class, not instance, so theoritically @type should be <code>type(YourABC)</code>, but then what you get is <code>abc.ABCMeta</code>. At this point, you either have to write a custom metaclass (inherithing from <code>abc.ABCMeta</code>) and specify it as the proper @type - but this won't say anything useful as far as documentation is concerned - or just textually describe it as "a MyABC subclass" (which is the correct description but not usable for code instrumentation).</p>
</div>
<div class="post-text" itemprop="text">
<p>The type is "type", as can be seen, running this:</p>
<pre><code>class Foo(object):
    def __init__(self):
        pass


def f(t):
    print(type(t)) # &lt;class 'type'&gt;

f(Foo)
</code></pre>
</div>
<span class="comment-copy">1) Everything is an object in Python. 2) Its type is literally just ... <code>type</code>.</span>
<span class="comment-copy">A <i>name</i> would be a string, e.g. <code>"Foo"</code>. You're actually passing an <i>object</i>.</span>
<span class="comment-copy">In python everything is an object. That being said when we write a Class in your example Foo, then all the class in python inherit the Meta Class type. @type means that the class you are passing should be class which inherit the Meta Class type. To check this behaviour try to run type(Foo) &gt;&gt;&gt; &lt;class 'type'&gt;. I hope I was able to explain your problem</span>
<span class="comment-copy">It is not the class name itself. It is <i>the class object itself</i>.</span>
<span class="comment-copy">@GerardoFigueroa an <code>object</code> INSTANCE is not callable. The <code>object</code> class IS   - of course  - callable. ALL classes are callable, that's how you instanciate them.</span>
<span class="comment-copy">Thanks for the clarifications. I edited the question to indicate that the parameter is a subclass of an abstract class <code>SuperFoo</code>, so <code>type</code> would be too broad here.</span>
<span class="comment-copy">@GerardoFigueroa cf my edited answer.</span>
<span class="comment-copy">But if I do <code>@type super_foo: SuperFoo</code> the function would expect an instance of <code>SuperFoo</code>, when it should really expect the <code>SuperFoo</code> type. The IDE complains as well.</span>
<span class="comment-copy">Duh - you're right of course - what the function expects is a SuperFoo subclass, not a SuperFoo instance, my bad (time for a coffee I think &lt;g&gt;).</span>
<span class="comment-copy">I edited my answer again. I'm sorry to have to say that I can't think of any formal unambiguous answer here... OTHO if it's <i>only</i> for documentation, just stating "@type: a <code>SuperFoo subclass</code> is more than enough.  Python is a dynamic language and has used "implied interfaces" (ie "a file-like object" or "a dict-like object" for decades, so "A SuperFoo subclass" is rather more explicit than what you'll find in most docs.</span>
<span class="comment-copy">This answer along with the my comment and bruno. Can explain this question properly.</span>
