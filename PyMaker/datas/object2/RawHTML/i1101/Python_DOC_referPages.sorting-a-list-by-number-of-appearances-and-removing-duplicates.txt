<div class="post-text" itemprop="text">
<p>For example, I have the following list, in which the number of appearances per element is:</p>
<pre><code>apple - 3
banana - 4
orange - 2
</code></pre>
<p>the list:</p>
<pre><code>["apple", "apple", "banana", "orange", "orange", "banana", "banana", "apple", "banana"]
</code></pre>
<p>I need to sort the list by prevalence without duplicaes, so the expected results will be:</p>
<pre><code>["banana", "apple", "orange"]
</code></pre>
<p>I thought about creating a dictionary with each element as key, iterating over the list and then adding +1 for each time the key is found, so I will end up with an example dictionary:</p>
<pre><code>dic = {"apple": 3, "banana": 4, "orange":2}
</code></pre>
<p>But kind of stuck about how to sort the list itself without the dupes..</p>
<p>Thanks in advance.</p>
<p><strong>EDIT</strong>: Thank you everyone, I did not have knowledge of Counter. Happy holidays!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a>:</p>
<pre><code>from collections import Counter

data = ["apple", "apple", "banana", "orange", "orange", "banana", "banana", "apple", "banana"]

counts = Counter(data)
result = sorted(counts, key=counts.get, reverse=True)
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['banana', 'apple', 'orange']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and its <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>most_common</code></a> method:</p>
<pre><code>from collections import Counter

lst = ["apple", "apple", "banana", "orange", "orange", "banana", "banana", "apple", "banana"]

res = [k for k, _ in Counter(lst).most_common()]
# ['banana', 'apple', 'orange']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>sort a set based on the original list's counts. EDIT: As pointed out in comments, you may want to use other solutions instead if you have a lot of candidates, calling a list's count method multiple times is not optimal.</p>
<pre><code>a = ["apple", "apple", "banana", "orange", "orange", "banana", "banana", "apple", "banana"]
sorted(set(a), key = lambda x: a.count(x), reverse = True) #reverse for descending
</code></pre>
<p>Result:</p>
<pre><code>['banana', 'apple', 'orange']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import groupby

L = ["apple", "apple", "banana", "orange", "orange", "banana", "banana", "apple", "banana"] # Input list

counts = [(i, len(list(c))) for i,c in groupby(sorted(L))]      # Create value-count pairs as list of tuples 
counts =  sorted(counts, key = lambda i: i[1] , reverse=True)    #sort value-count list
out = [key for key, value in counts]   #extract key
print (out)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <code>list</code> and <code>set</code></p>
<pre><code>a = ["apple", "apple", "banana", "orange", "orange", "banana", "banana", "apple", "banana"]
result =sorted(list(set(a)))
</code></pre>
<p>output : </p>
<pre><code>['apple', 'banana', 'orange']
</code></pre>
</div>
<span class="comment-copy">sort your example dictionary and recreate the list</span>
<span class="comment-copy">Or <code>counts.__getitem__</code>, which reflects exactly the process of extracting <code>counts[i]</code> for each <code>i</code> in <code>counts</code>.</span>
<span class="comment-copy"><code>list(...)</code> -&gt; <code>[...]</code> (list comprehension, not applying <code>list()</code> on a generator expression)</span>
<span class="comment-copy">@iBug That's when you start one way and turn the other :P good catch.</span>
<span class="comment-copy">Never call <code>list.count()</code> repeatedly. That is just algorithmically bad.</span>
<span class="comment-copy">Noted, thanks for letting me know. @schwobaseggl</span>
