<div class="post-text" itemprop="text">
<p>I have a file containing words and another "dictionary" file containing definitions. I want to find the definition for each word in the dictionary and write it out to a file.</p>
<p>I looked here and saw an answer that uses Unix/Linux commands but I am on windows and decided to solve in python instead and have come up with a working solution but am wondering if there is a better approach.</p>
<pre><code>with open('D:/words_and_definitions.txt', 'w') as fo:
    dict_file = open('D:/Oxford_English_Dictionary-orig.txt','r')
    word_file = open('D:/Words.txt','r')
    definitions = dict_file.readlines()
    words = word_file.readlines()
    count = 1;
    for word in words:
        findStatus='not_found'
        word = word.strip() + ' '
        for definition in definitions:
            if re.match(r''+word, definition) is None:
                count += 1
            else:
                fo.write(definition)
                findStatus='found'
                break
        if findStatus == 'not_found':
            fo.write(word+' ****************no definition' + '\n')
print("all done")
</code></pre>
<p>word_file is not sorted alphabetically, dict_file is.</p>
<p>Sample from word_file</p>
<pre><code>Inane
Relevant
Impetuous
Ambivalent
Dejected
Postmortem
Incriminate
</code></pre>
<p>Sample from dict_file</p>
<pre><code>Ambiguity -n. the condition of admitting of two or more meanings, of being understood in more than one way, or of referring to two or more things at the same time 
Ambiguous  adj. 1 having an obscure or double meaning. 2 difficult to classify.  ambiguity n. (pl. -ies). [latin ambi- both ways, ago drive]
Ambit  n. Scope, extent, or bounds. [latin: related to *ambience]
Ambition  n. 1 determination to succeed. 2 object of this. [latin, = canvassing: related to *ambience]
Ambitious  adj. 1 full of ambition or high aims. 2 (foll. By of, or to + infin.) Strongly determined.
Ambivalence  n. Coexistence of opposing feelings.  ambivalent adj. [latin ambo both, *equivalent]
Ambivalent adj. having opposing feelings, undecided
Amble  —v. (-ling) move at an easy pace. —n. Such a pace. [latin ambulo walk]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using dictionnaries to find a definition? Sure you could have some memory problems if your definition file is too big but in your case it could be sufficient. That could give a simple solution:</p>
<pre><code>import re

definition_finder = re.compile(r'^(\w+)\s+(.*)$')

with open('Oxford_English_Dictionary-orig.txt') as dict_file:
    definitions = {}
    for line in dict_file:
        definition_found = definition_finder.match(line)
        if definition_found:
            definitions[definition_found.group(1)] = definition_found.group(2)

with open('Words.txt') as word_file:
    with open('words_and_definitions.txt', 'w') as fo:
        input_lines = (line.strip("\n") for line in word_file)
        for line in input_lines:
            fo.write(f"{line} {definitions.get(line, '****************no definition')}\n")
</code></pre>
<p>You could have a more compact way of defining your definitions. That would give:</p>
<pre><code>import re

definition_finder = re.compile(r'^(\w+)\s+(.*)$')

with open('Oxford_English_Dictionary-orig.txt') as dict_file:
    definitions_found = (definition_finder.match(line) for line in dict_file) 
    definitions = dict(definition_found.groups() for definition_found
                       in definitions_found if definition_found)

with open('Words.txt') as word_file:
    with open('words_and_definitions.txt', 'w') as fo:
        input_lines = (line.strip("\n") for line in word_file)
        for line in input_lines:
            fo.write(f"{line} {definitions.get(line, '****************no definition')}\n")
</code></pre>
<p>If your definition file is indeed too big, then you can consider, for example using a database like the <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer"><code>sqlite3</code></a> module.</p>
</div>
<span class="comment-copy">Please include samples from both files.</span>
<span class="comment-copy">In general, "<i>is there a better approach</i>" questions are better asked on <a href="https://codereview.stackexchange.com/">Code Review</a> site.</span>
<span class="comment-copy">There are a lot of ways to improve the runtimes.  For example:  It looks like the word you are looking for is at the beginning of the line, so you can scan faster by a way of checking "startsWith".  Another thing is that since you are checking a list of items against a file, you should read key components you are checking into some sort of map, and then checking the existance of content in maps.... such as:   map&lt;stringsAtStartOfLine, lineNumber&gt; . The reason I use line number as value instead of Line content is save memory being allocated and jump around the file to get information later.</span>
<span class="comment-copy">Need I delete this post and repost on Code Review? What's the protocol?</span>
<span class="comment-copy">OK, it took me a long time to understand even the first solution since I had to acquaint myself with what match() returned and learn about generators!  Is going to take me even longer to understand the second one and I will get there- but did want to acknowledge your solutions!</span>
