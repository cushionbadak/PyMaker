<div class="post-text" itemprop="text">
<p>The question asked:</p>
<p>Use list comprehensions to generate a list with only the lowercase letters in my_list. Print the result list.</p>
<pre><code>['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']
</code></pre>
<p>My code:</p>
<pre><code>my_list = ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']
hi = ([ char for char in range(len(my_list)) if char%2 == 0])

print(hi)
</code></pre>
<p>I tried it out, but got integers as answers and not the strings I wanted. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python strings have <code>islower</code> method. Also, you can directly iterate over the list, no need to check its length or the parity of the indexes.</p>
<pre><code>my_list = ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']
hi = [char for char in my_list if char.islower()]
print(hi)
# ['a', 'b', 'c', d']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note: several answers here assume that what you want is to select the values in the list that are lowercase. This answer assumes that that was an <em>example</em> and that the thing you're trying to do is to select the values in the list that occur at every other list index. (This seems to me to be the correct interpretation, because that's what the implementation in the question appears to be <em>trying</em> to do.) I'm not sure who misunderstood the question here, but since the question can be interpreted multiple ways, I think the question is probably at fault here. Until the question is clarified, I think it should be placed on hold.</p>
<p>The simplest and fastest way to do this is with a slice:</p>
<pre><code>print(my_list[::2])  # Slice the whole list, with step=2
</code></pre>
<p>To replicate the logic you're describing, where you want to take the values with <em>indexes</em> that are modulo 2, then you need to generate both the indexes and the values for your list in the comprehension, and use one for the filtering and the other for the result:</p>
<pre><code>hi = [ch for ix, ch in enumerate(my_list) if ix % 2 == 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your list comprehension:</p>
<pre><code>[char for char in range(len(my_list)) if char%2 == 0]
</code></pre>
<p>Will produce integers instead of characters. This is because <code>range(len(my_list))</code> gives you indices. You instead need to get the characters. </p>
<p>This can be done using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a>:</p>
<pre><code> [char for i, char in enumerate(my_list) if i % 2 == 0]
</code></pre>
<p>Or a less pythonic approach, using just indexing <code>my_list</code>:</p>
<pre><code>[my_list[i] for i in range(len(my_list)) if i % 2 == 0]
</code></pre>
<p>You can also just filter out the lowercase letters with <a href="https://docs.python.org/3/library/stdtypes.html#str.islower" rel="nofollow noreferrer"><code>str.islower()</code></a>:</p>
<pre><code>[char for char in my_list if char.islower()]
</code></pre>
<p>Which avoids having to use indices altogether. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension as following where you iterate over your individual elements and check if it is a lower case using <code>.islower()</code></p>
<pre><code>my_list = ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']

lower = [i for i in my_list if i.islower()]
# ['a', 'b', 'c', 'd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_list = ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']
res = [ char for char in  my_list if ord(char)&gt;=97]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <code>islower()</code> function    </p>
<pre><code>l = ['a', 'A', 'b', 'B', 'c', 'C', 'd', 'D']
result = [el for el in l if el.islower()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add a range(len(my_list)) that create the following range(0, 8)
and char, in this case, is an integer and you create a list of integers.</p>
<p>To generate a list with only the lowercase letters use 'islower' method
hi = ([ char for char in my_list if char.islower()])</p>
</div>
<span class="comment-copy">I edited the title of this question as it was misleading and did not match the question's content</span>
<span class="comment-copy">What were you trying to solve with the code snippet you shared? What it does has nothing to do with what you're asking for</span>
<span class="comment-copy">You are looping over a <code>range</code> object, so why did you expect for <code>char</code> to be anything other than <code>int</code> objects?</span>
<span class="comment-copy">@DeepSpace, thanks for the work.</span>
<span class="comment-copy">we work in parallel universes in synchronization ;)</span>
<span class="comment-copy">@bazingaa "There should be one, and only one, obvious way to do it"</span>
<span class="comment-copy">@roganjosh: You should be a writer. Your quotes are as delicious as spicy roganjosh ;)</span>
<span class="comment-copy">@bazingaa I didn't write it :) I just paraphrased from memory for <code>import this</code>; the Zen of Python.</span>
<span class="comment-copy">@roganjosh A true man of the people. Comments are always nice to read.</span>
<span class="comment-copy">I need to use list comprehension.</span>
<span class="comment-copy">@AdeeshJain: Why? You don't use a particular syntax construct just because you like it, but because it solves a problem.</span>
<span class="comment-copy">@DanielPryden because <i>probably</i> it's homework.</span>
<span class="comment-copy">@pault: Is it? That's a reasonable assumption, but the question doesn't <i>say</i> it's homework. And even if it is homework, the question doesn't say it needs to use a list comprehension.</span>
<span class="comment-copy">True. I tried your way out, and it worked for me. Thanks for the help Daniel!</span>
<span class="comment-copy">Damn daily vote limit reached. I'll be sure to upvote this ASAP.</span>
<span class="comment-copy">@RoadRunner: Is there a daily limit on upvote too? Never knew this</span>
<span class="comment-copy">There's a daily limit on total votes you cast I think.</span>
<span class="comment-copy">@RoadRunner: I'll remind you tomorrow ;) Merry Xmas</span>
<span class="comment-copy">@RoadRunner: Reminder ;)</span>
