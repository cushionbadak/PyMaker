<div class="post-text" itemprop="text">
<p>I have some code like this (not tested):</p>
<pre><code>import subprocess
import threading 

t1 = threading.Thread(target=start_collect) 

def start_collect():
  process = subprocess.Popen("some command to collect data", stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</code></pre>
<p>Now, my main thread and t1 thread both gets killed at some point while the subprocess is still executing its command by collecting data. I want it to stop executing that command and kill the subprocess. So, whenever my parent thread(the thread calling the subprocess) gets killed I want to kill the subprocess. Is there any way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>So a <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">Thread</a> will execute until it is joined, so we have to ask it nicely to go away somehow. As mentioned I would probably subclass it and create methods that allowed for a clean way of referencing the subprocess that it may have spawned and terminating it gracefully like so:</p>
<pre><code>class InterruptibleThread(Thread):
    def __init__(self, target):
        super().__init__()
        self.target = target
        self.process = None
        self._stopevent = Event()
        self._periodicity = 1.0
    def run(self):
        self.process = Popen(self.target)
        while not self._stopevent.is_set():
            self._stopevent.wait(self._periodicity)
    def stop(self):
        self._stopevent.set()
        self.process.terminate()
        Thread.join(self)
</code></pre>
<p>I am on a Windows machine, so the following sequence opens a Command Prompt window and terminates when the spawned thread has its <code>stop()</code> method called:</p>
<pre><code>&gt;&gt;&gt; t = InterruptibleThread('cmd')
&gt;&gt;&gt; t.target
'cmd'
&gt;&gt;&gt; t.process # Returns None as it should
&gt;&gt;&gt; t.start()
&gt;&gt;&gt; t.process
&lt;subprocess.Popen object at 0x00000295ACC704E0&gt;
&gt;&gt;&gt; t.process.poll() # Returns None as it should
&gt;&gt;&gt; t.stop()
&gt;&gt;&gt; t.process.poll()
1
&gt;&gt;&gt;
</code></pre>
<p>Now in your program you'll likely have some logic that requires you to have a <code>t.join()</code> line, which is fine, here I just force it by using <code>t.stop()</code> which ultimate joins the thread so your programs call to <code>t.join()</code> will work by either overriding the <code>join()</code> method or somewhere else in your program calling the defined <code>t.stop()</code>. The <a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="nofollow noreferrer"><code>t.process.poll()</code></a> checks to see if the process was terminated (just shown here for demonstration purposes). So now you have a way of terminating a thread and its subprocesses.</p>
</div>
<span class="comment-copy">You'd probably need to subclass Thread and assign the return of Popen as an attribute, that way when the subclass dies you can call some member function of it to terminate the process it spawned.</span>
