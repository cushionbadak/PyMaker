<div class="post-text" itemprop="text">
<p>I've read the docs about string formatting <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">mini language</a>, and found out about few cool features:</p>
<p>integer representations: </p>
<pre><code>'{0:X}'.format(16) # output is '10'
</code></pre>
<p>padding with zeros:</p>
<pre><code>'{0:03X}'.format(16) # output is '010'
</code></pre>
<p>and alternate forms:</p>
<pre><code>'{0:#X}'.format(16) # output is '0X10'
</code></pre>
<p>My question - is there a way combining all 3 in single command?
For instance:</p>
<pre><code>'{0:#03X}'.format(16) # output is '0x10', desired output is '0x010'
</code></pre>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to specify some more digits:</p>
<pre><code>print('{0:#05x}'.format(16))
</code></pre>
<p>Output:</p>
<pre><code>0x010
</code></pre>
<p>You need 5 and not 3 because <code>0x</code> are also considered when padding the output.</p>
<hr/>
<p>Beside that, you can always <em>hack</em> your output usign string concattenation or <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow noreferrer"><code>zfill()</code></a>:</p>
<pre><code>print('0x'+'{0:03x}'.format(16) )
print('0x'+ '{:x}'.format(16).zfill(3))
</code></pre>
</div>
<span class="comment-copy">Thanks! did not take this into consideration :)</span>
<span class="comment-copy">Fully agree on the zfil comment, though I was hoping there was a neater way formatting :)</span>
