<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2541865/copying-nested-lists-in-python">Copying nested lists in Python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm aware that simply assigning one list to another preexisting list gives it the same address e.g.</p>
<p><code>x = [1, 2]
y = x
y[0] = 3
print(x, y)</code></p>
<p>gives the output</p>
<p><code>[3, 2] [3, 2]</code></p>
<p>and to prevent this, it has to be written as such...</p>
<p><code>y = list(x)</code>, <code>y = x[:]</code>, etc.</p>
<p>However, this doesn't seem to work in my case...</p>
<pre><code>for i in range(layer_rot):
            for r in range(l - 1, n_rows - l + 1):
                if r == l - 1:
                    result[r][n_col - l] = int(ref_matrix[r + 1][n_col - l])
                elif r == n_rows - l:
                    result[r][l - 1] = int(ref_matrix[r - 1][l - 1])
                else:
                    result[r][l - 1] = int(ref_matrix[r - 1][l - 1])
                    result[r][n_col - l] = int(ref_matrix[r + 1][n_col - l])

            ...

            ref_matrix = result[:] # Assume ref_matrix is initialized correctly before the first iteration of the outer loop
</code></pre>
<p>I'd like <code>ref_matrix</code> to be simply a copy of <code>result</code>, but when I change <code>result</code> in the conditional statements, I notice that <code>ref_matrix</code> changes along with it. I've checked their id's, but they're both different as expected. Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using a <em>nested</em> <code>list</code> of <code>list</code>s, but <code>ref_matrix = result[:]</code> only makes a <em>shallow</em> copy of the <em>top</em> level <code>list</code>, so you have a new <code>list</code> containing the same <code>list</code>s as the first.</p>
<p>The simplest solution here is to just switch to <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer">a full deep copy</a>:</p>
<pre><code>import copy
</code></pre>
<p>then replace:</p>
<pre><code>ref_matrix = result[:]
</code></pre>
<p>with:</p>
<pre><code>ref_matrix = copy.deepcopy(result)
</code></pre>
<p>No matter how deeply nested your <code>list</code>s (and how mutable their contents), this will ensure all mutable elements are fully dissociated from the original <code>list</code>.</p>
</div>
<span class="comment-copy">This worked! Thanks for your help!</span>
