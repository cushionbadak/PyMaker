<div class="post-text" itemprop="text">
<p><strong>Introduction</strong></p>
<p>I am working on project where a lot of textual data needs to be processed. Many quite big (hundreds of MB) text files. The python is the requirement (don't ask why). I want to use C++ extensions to increase the performance. I decided to go with SWIG. I have an pattern matching algorithm that is much faster than usual python "string".find("pattern"). I was surprised when I saw it's much slower when used as python extension. It shouldn't happen. I think I am quite close to find the reason of this but need your help.</p>
<p><strong>Problem</strong></p>
<p>Now, I wrote a simple extension with class containing method that do NOTHING (simply take a string as parameter and returns numeric value (no processing is happening in the function):</p>
<p><strong>nothing.h:</strong></p>
<pre><code>#ifndef NOTHING_H
#define NOTHING_H

#include &lt;string.h&gt;
#include &lt;iostream&gt;

using namespace std;

    class nothing {
        protected:
            int zm = 5;
        public:
            virtual int do_nothing(const char *empty);
    };

#endif
</code></pre>
<p><strong>nothing.cpp</strong></p>
<pre><code>#include "nothing.h"

int nothing::do_nothing(const char *empty) {
    return this-&gt;zm;
}
</code></pre>
<p><strong>nothing.i</strong></p>
<pre><code>%module nothing
%include &lt;std_string.i&gt;

using std::string;
using namespace std;
%{
    #include "nothing.h"
%}


class nothing {
    protected:
        int zm = 5;
    public:
        virtual int do_nothing(const char *empty);
};
</code></pre>
<p><strong>test.py</strong></p>
<pre><code>import nothing
import time

data = ""
with open('../hugefile', 'rb') as myfile:
    data=myfile.read().decode(errors='replace')

n = len(data)

zm = nothing.nothing()
start = time.time()
res = zm.do_nothing(data)
end = time.time()
print("Nothing time: {}".format(end - start))


zm = nothing.nothing()
start = time.time()
res = data.find("asdasdasd")
end = time.time()
print("Find time   : {}".format(end - start))
</code></pre>
<p><strong>Compilation steps:</strong></p>
<pre><code>swig -c++ -py3 -extranative -python nothing.i
g++ -fpic -lstdc++ -O3 -std=c++11 -c nothing.cpp nothing_wrap.cxx -I/usr/include/python3.7m
g++ -shared nothing.o nothing_wrap.o -o _nothing.so
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>$ python3 test.py
Nothing time: 0.3149874210357666
Find time   : 0.09926176071166992
</code></pre>
<p>As you can see, despite the nothing should be much faster than find() it is a lot slower!</p>
<p>Any idea if this can be somehow solved? For me it looks like the data is converted or copied.</p>
<p>Why I think the whole data is copied? Because if a slightly change the function do_nothing() to (I am omitting headers):</p>
<pre><code>int nothing::do_nothing() { // removed the argument
    return this-&gt;zm;
}
</code></pre>
<p>Then the result is as expected:</p>
<pre><code>$ python3 test.py
Nothing time: 4.291534423828125e-06
Find time   : 0.10114812850952148
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll probably want to pass the filename to C and open and search it there.  You are reading bytes, converting those bytes to unicode then converting back to bytes inside the timed portion. You can read the documentation here to understand the internals.</p>
<p><a href="https://docs.python.org/3/c-api/unicode.html" rel="nofollow noreferrer">https://docs.python.org/3/c-api/unicode.html</a></p>
<p>If the file is utf-8 then leave it in bytes by removing the decode or just pass the filename and load it in C.</p>
</div>
<span class="comment-copy">Python has to create an <i>unmanaged</i> object / <code>char *</code> / string (and yes, this mean allocating and copying the data) before making the call.</span>
<span class="comment-copy">I wonder if using a <i>non-Unicode</i> 'string' / byte-array (all Python 3 strings are Unicode, which is a change from Python 2.x) would allow SWIG a no-copy opportunity..? Alternatively, perhaps accept the Python [string] object itself without an implicit native transformation?</span>
<span class="comment-copy">Are you looking for something like <a href="https://github.com/pairinteraction/pairinteraction/blob/954f865f44bcd2c467c3077e2315c063a26cf6cc/libpairinteraction/Interface.i.cmakein#L73-L77" rel="nofollow noreferrer">this</a>?</span>
<span class="comment-copy">I think you're looking for something more like this instead: <a href="https://stackoverflow.com/a/16998687/168175">stackoverflow.com/a/16998687/168175</a></span>
<span class="comment-copy">Thanks but I need to operate on strings not files. I will do much more operations on those strings so saving and loading from disk each time is not a good option in my problem. I just need to pass reference of string to the c++ extension.</span>
