<div class="post-text" itemprop="text">
<p>I have this text in a PDF: 
"John is a french person that likes pancakes, he also likes to play soccer"</p>
<p>I want to iterate through the characters in the PDF text three at a time. I tried the below, but I got the error that can only concatenate str (not "int") to str. I understand what this error means, but not sure how to solve this within the code.</p>
<pre><code>pdf_text = pdf_file.getPage(1).extractText()

for c in pdf_text:
    print(pdf_text[c:c+3])
</code></pre>
<p>I was expecting to get a result, such as:</p>
<pre><code>Joh
ohn
hn 
etc...
</code></pre>
<p>Any suggestions, with explanation, will be appreciated. Please let me know if you need more information. Thanks.</p>
<p><strong>Edit:</strong> I was able to resolve this question utilizing the comment from @slider.</p>
<p>For educational purposes:</p>
<pre><code>for c in range(len(text) - 3):
    print(text[c:c+3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code you provided is a misunderstanding of your problem. You have a <code>text</code> which is a <code>str</code>, <code>"John is a french person..."</code>, and you say (in other words):</p>
<pre><code>for char in text: print(text[char:char+3])
</code></pre>
<p>Here you can clearly see what's wrong -- <code>char</code> is not a valid index, because it is a <code>str</code> itself (<code>"J"</code> in the first iteration). Instead, you want to take the indices from the text, and because there are exactly as many indices as characters in the text, <code>range(len(text))</code> does the trick.</p>
<p>You say you want to skip every 3 characters. Well, <code>range()</code> accepts a <code>step</code> argument (see <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">docs</a>), so should you provide any <code>step</code>, it will skip through the amount of indices that the argument indicates:</p>
<pre><code>[i for i in range(0, 10, 3)]
&gt;&gt;&gt; [0, 3, 6, 9]
</code></pre>
<p>Now you just have to account for the error you assume when you add a number to the index of a list with a fixed set of elements, as in <code>text[i:i+3]</code>...</p>
<pre><code>steps = [i for i in range(0, len(text)-3, 3)]
for step in steps:
    print(text[step:step+3])
</code></pre>
<p>(Note that explicitly saying <code>range(0, n)</code> is the same as saying <code>range(n)</code>)</p>
<p>Edit:</p>
<p>You say you need text overlapping, so instead of skipping characters you simply need to iterate through every index of your text, again, accounting for the last indices that don't exist:</p>
<pre><code>steps = [i for i in range(len(text)-3)]
for step in steps:
     print(text[step:step+3])
</code></pre>
<p>which is the same as</p>
<pre><code>for char_index in range(len(text)-3):
    print(text[char_index:char_index+3])
</code></pre>
<p>Also <a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">relevant</a>.</p>
</div>
<span class="comment-copy">for c in len(pdf_text)</span>
<span class="comment-copy">That will not work, because len(pdf_text) returns an integer, and integers are not iterable.</span>
<span class="comment-copy">I think this will produce your desired output (since you want overlapping characters): <code>for c in range(len(pdf_text) - 3): print(pdf_text[c:c+3])</code></span>
<span class="comment-copy">Hi mariogarcc, I sincerily appreciate you taking the time to provide an answer. It however does not contemplate the overlapping of characters that I was needing. I have edited my OP with the solution.</span>
<span class="comment-copy">Then the question is just the first part of the answer :) @FranJ I will edit my answer.</span>
