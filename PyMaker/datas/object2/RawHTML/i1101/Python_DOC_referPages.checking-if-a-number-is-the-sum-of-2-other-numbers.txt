<div class="post-text" itemprop="text">
<p><strong>Problem Statement</strong></p>
<p>Given a list of numbers and a number <em>k</em>, return whether any two numbers from the list add up to <em>k</em>.</p>
<p><strong>Example</strong></p>
<p>Given <code>[1, 2, 3]</code> and <code>k = 5</code>, <code>return True</code> since <code>2 + 3 = 5</code>.</p>
<p>This is what I've tried to do:</p>
<pre><code>def pairs(n):
    for i in range(len(n)):
        for j in range(i+1, len()):
            yield n[i], n[j]


def ListCheck():
    number = input("Give me a number:")
    val = int(number)
    nums = [1,2,3]
    for i, j in pairs(nums):
        if j + i == val:
            print(True)
            break


ListCheck()
</code></pre>
<p>I'm getting an error when I run it, and I can't understand why.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def issumoftwo(lst,num):
    for x in lst:
        for y in lst:
            if x+y==num and lst.index(x)!=lst.index(y):
                return True
    return False
lst=[1,2,3]
num=int(input("Give me a Number: "))
print(issumoftwo(lst,num))
</code></pre>
<p>Output</p>
<pre><code>Give me a number: 5
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also do <code>itertools.combinations</code>, little shorter than @bitto's solution:</p>
<pre><code>import itertools
def f(lst,num):
    for x,y in itertools.combinations(lst,2):
        if x+y==num:
            return True
    return False
lst=[1,2,3]
num=int(input("Give me a number: "))
print(f(lst,num))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You misses an <code>n</code> inside <code>len()</code>. The error </p>
<p><strong><code>TypeError: len() takes exactly one argument (0 given)</code></strong> </p>
<p>tells you <em>exactly</em> what is wrong (if you fix the indentation problems of your code postet above).</p>
<hr/>
<p>You can streamline your code by using <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>. If you add some parameters to a function, you can generalize the problem searching as well - to get <em>all</em> combinations of <em>n</em> numbers from your list that add up to your targetvalue.</p>
<pre><code>from itertools import combinations 

def is_sum_of_n_numbers(data ,target_value, num_elem):
    """Returns 'True' if any combinatin of 'num_elem'ents 
    from 'data' sums to 'target_value'"""
    return any(sum(x)==target_value for x in combinations(data, num_elem))

def find_sum_in_combination(data, target_value, num_elem):
    """Returns all combinations of 'num_elem'ent-tuples from 'data' 
    that sums to 'target_value'"""
    return [x for x in combinations(data,num_elem) if sum(x) == target_value]
</code></pre>
<p>Get all of them:</p>
<pre><code>d = [1,2,3,4,5]
for numbers in range(1,6):
    for s in range(1,sum(d)+1):
        result = find_sum_in_combination(d,s,numbers)
        if result:
            print(f"Sum {s} from {d} with {numbers} numbers: ", result)
</code></pre>
<p>Output:</p>
<pre><code>Sum 1 from [1, 2, 3, 4, 5] with 1 numbers:  [(1,)]
Sum 2 from [1, 2, 3, 4, 5] with 1 numbers:  [(2,)]
Sum 3 from [1, 2, 3, 4, 5] with 1 numbers:  [(3,)]
Sum 4 from [1, 2, 3, 4, 5] with 1 numbers:  [(4,)]
Sum 5 from [1, 2, 3, 4, 5] with 1 numbers:  [(5,)]
Sum 3 from [1, 2, 3, 4, 5] with 2 numbers:  [(1, 2)]
Sum 4 from [1, 2, 3, 4, 5] with 2 numbers:  [(1, 3)]
Sum 5 from [1, 2, 3, 4, 5] with 2 numbers:  [(1, 4), (2, 3)]
Sum 6 from [1, 2, 3, 4, 5] with 2 numbers:  [(1, 5), (2, 4)]
Sum 7 from [1, 2, 3, 4, 5] with 2 numbers:  [(2, 5), (3, 4)]
Sum 8 from [1, 2, 3, 4, 5] with 2 numbers:  [(3, 5)]
Sum 9 from [1, 2, 3, 4, 5] with 2 numbers:  [(4, 5)]
Sum 6 from [1, 2, 3, 4, 5] with 3 numbers:  [(1, 2, 3)]
Sum 7 from [1, 2, 3, 4, 5] with 3 numbers:  [(1, 2, 4)]
Sum 8 from [1, 2, 3, 4, 5] with 3 numbers:  [(1, 2, 5), (1, 3, 4)]
Sum 9 from [1, 2, 3, 4, 5] with 3 numbers:  [(1, 3, 5), (2, 3, 4)]
Sum 10 from [1, 2, 3, 4, 5] with 3 numbers:  [(1, 4, 5), (2, 3, 5)]
Sum 11 from [1, 2, 3, 4, 5] with 3 numbers:  [(2, 4, 5)]
Sum 12 from [1, 2, 3, 4, 5] with 3 numbers:  [(3, 4, 5)]
Sum 10 from [1, 2, 3, 4, 5] with 4 numbers:  [(1, 2, 3, 4)]
Sum 11 from [1, 2, 3, 4, 5] with 4 numbers:  [(1, 2, 3, 5)]
Sum 12 from [1, 2, 3, 4, 5] with 4 numbers:  [(1, 2, 4, 5)]
Sum 13 from [1, 2, 3, 4, 5] with 4 numbers:  [(1, 3, 4, 5)]
Sum 14 from [1, 2, 3, 4, 5] with 4 numbers:  [(2, 3, 4, 5)]
Sum 15 from [1, 2, 3, 4, 5] with 5 numbers:  [(1, 2, 3, 4, 5)]
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">any()</a></li>
<li><a href="https://stackoverflow.com/questions/20639180/explanation-of-how-nested-list-comprehension-works">unrolling (complex) list comprehensions</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The logic of your code is correct (It's unnecessarily complex as you can see by comparing with the above answer, but still correct ;)....)<br/>
Just check your <code>indentations</code> and put <code>for j in range(i+1, len(n))</code> in the 3rd line of your code...you forgot the 'n'!! You need to give atleast one argument to <code>len</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can solve your solution this way</p>
<pre><code>n=[3,2,1]
number=int(input("Please enter nubmer"))
for i in n:
    num=number - i
    if num in n:
        print(num,i)
        break
</code></pre>
<p>This is solution but need to be customize as you want  </p>
</div>
<span class="comment-copy">what happens when you try to run it? an error? no error but unexpected out? can you specify what "doesn't work" means?</span>
<span class="comment-copy">An error. I've edited it.</span>
<span class="comment-copy">What error? there are different ones that tell different problems - please <i>always</i> print the stacktrace of the error</span>
<span class="comment-copy"><code>for j in range(i+1, len()):</code> <code>len</code> of what?</span>
<span class="comment-copy">len() =&gt; len(n) line 3 ?</span>
<span class="comment-copy">I wan't to be able to break it when I find a solution.</span>
<span class="comment-copy">@RonyKositsky once you hit the return statement, you return from the function</span>
<span class="comment-copy">@RonyKositsky <a href="https://stackoverflow.com/questions/11604699/is-there-a-way-to-do-more-work-after-a-return-statement" title="is there a way to do more work after a return statement">stackoverflow.com/questions/11604699/â€¦</a></span>
<span class="comment-copy">OK, now I understand. Thanks you!</span>
<span class="comment-copy">FWIW 1. that's <code>O(n^2)</code>, and there are several <code>O(n)</code> solutions. 2. This will sometimes wrongly return <code>True</code> (consider <code>list = [1]</code> and <code>num == 2</code>)</span>
<span class="comment-copy">This is the correct answer that does not provide wrong outputs</span>
<span class="comment-copy">@DeepSpace thanks, happy it is good, :-), happy i've got support!</span>
<span class="comment-copy">OK, didn't notice it. Thanks!</span>
<span class="comment-copy">This will return numbers also</span>
<span class="comment-copy">This is one of <code>O(n)</code> solutions I was referring to, however still has the bug of returning <code>True</code> in case <code>list = [1] and num = 2</code>.</span>
<span class="comment-copy">This code logic is different from your logic</span>
<span class="comment-copy">@DeepSpace Is my code wrong?</span>
<span class="comment-copy">It may return the wrong output, see my comments to @bitt's answer</span>
