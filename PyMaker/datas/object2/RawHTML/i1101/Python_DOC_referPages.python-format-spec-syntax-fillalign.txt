<div class="post-text" itemprop="text">
<p>What does this ( [[fill]align]) syntax mean?</p>
<p>From the format specification mini language
<a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">https://docs.python.org/2/library/string.html#format-specification-mini-language</a></p>
<p>Does it mean if you have a fill then you must have an align?</p>
<p>I was trying - </p>
<pre><code>In [71]: '{:{}{}}'.format('test','.','10')
Out[72]: 'test'
</code></pre>
<p>I think that has a fill(character) '.' and width ('10'). I used python 3.6.3.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think perhaps you want to look the the examples <a href="https://docs.python.org/3/library/string.html#formatexamples" rel="nofollow noreferrer">here</a>.</p>
<p>The fill characters and the justification parameters go in as part of the string. For example</p>
<pre><code>In [56]: '{:.&lt;10}'.format('test')
Out[56]: 'test......'

In [57]: '{:.&gt;10}'.format('test')
Out[57]: '......test'
</code></pre>
<p>If you want to dynamically generate the format string you could do something like this,</p>
<pre><code>In [76]: '{:{}&lt;{}}'.format('test','.','10')
Out[76]: 'test......'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, if you have a fill, you must have an align. The <code>.</code> in your test is not treated as a fill, because you are missing an align; instead, the <code>.10</code> is parsed as the <code>10</code> specifying a <em>precision</em> value. See the <code>[.precision]</code> in the <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">format spec syntax</a>:</p>
<pre><code>format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]
                                                    ^^^^^^^^^^^^
</code></pre>
<p>For a string, a precision value of 10 will truncate the string to 10 characters:</p>
<pre><code>&gt;&gt;&gt; '{:{}{}}'.format('123456789012345','.','10')
'1234567890'
</code></pre>
<p>If you had an align, then the <code>.</code> would be treated as a fill:</p>
<pre><code>&gt;&gt;&gt; '{:{}&gt;{}}'.format('test','.','10')
'......test'
</code></pre>
</div>
<span class="comment-copy">You actually can nest replacement fields with <code>str.format</code>. That's not new with f-strings.</span>
<span class="comment-copy">Yeah, just tested and edited accordingly</span>
<span class="comment-copy">Adding to @user2357112: Your second example could be done as a single step with <code>'{:{}&lt;{}}'.format('test', '.', 10)</code>. Each positional argument is used as the "thing to format" based on the position of the left brace, so the first left brace matches <code>test</code>, the second <code>.</code>, the third <code>10</code> (which can be an integer, it need not be a string).</span>
