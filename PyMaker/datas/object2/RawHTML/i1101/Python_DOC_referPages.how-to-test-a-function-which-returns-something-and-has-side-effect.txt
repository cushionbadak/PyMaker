<div class="post-text" itemprop="text">
<p>I have a function which returns something but has a side effect at the same time. Should I test only value which this function returns or I need to test result of a side effect too?</p>
<pre><code>@slack_interactions.on('admin_add')
def handle_admin_add(payload):
    team_id = payload['team']['id']
    user_id = payload['user']['id']
    action_value = payload['actions'][0]['selected_options'][0]['value']

    user = SlackUser.objects.find_by_ids(team_id, action_value)

    if user and not user.is_bot:
        user.make_admin()

    return build_admins_message(team_id, user_id)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short answer, test both.</p>
<p>Long answer:
You should always remember that testing is <em>verifying that for a given input you expect a specific output</em>.</p>
<p>With that in mind, if your fucntion modifies state (side effect) then you need to verify that the state is modified as expected. If it also returns a value then you need to verify that the returned value corresponds on whats expected.</p>
<p>Testing is a great way to ensure your code is robust as long as you understand the zen behind it. <em>I must test for what I expect, and design test for the unexpected.</em> </p>
<p>However, test alone does not make good code, if you have a method that does more than two things it might be that is not properly designed. usually methods that affect state should not return a value, and vicecersa. Its not set in stone but if you follow that convention is easier to decouple your systems. </p>
<p>There are coding principles that will prevent future headaches, one of them is the Single Responsibility Principle. Which in this case your function is clearly violating. I recommend you take a look at the <code>SOLID</code> programming principles it will be worth it, trust me. Unit testing will come naturally once you adopt them.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend testing both, as both the sideeffect and the return value are part of the functions behaviour and part of the interface interacting with your code.</p>
<p>To achieve this you can use a mocking library like the builtin <a href="https://docs.python.org/3/library/unittest.mock-examples.html" rel="nofollow noreferrer">unittest.mock</a>, that way you can mock the call to user.make_admin() and the complete SlackUser object.</p>
<p>I suggest reading the documentation of <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock" rel="nofollow noreferrer">MagicMock</a> and <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">patch</a> to simplify the testing.</p>
<p>Happy testing!</p>
</div>
<span class="comment-copy">Test both, or split method in 2 methods to test them.</span>
