<div class="post-text" itemprop="text">
<p>I was trying to get a nice and clean representation of a string. My desired version would be ['Course Number: CLASSIC 10A | Course Name: Introduction to Greek Civilization1 | Course Unit: 4']</p>
<p>However, the current output is ['Course Number: CLASSIC\xa010A | Course Name: Introduction to Greek Civilization1 | Course Unit: 4']. </p>
<p>Something (\xa) is getting in the way of the first element. I will attach the part of codes below. Thanks in advance for helping me out.</p>
<pre><code>all_tds = [get_tds(scrollable) for scrollable in scrollables]
def num_name_unit(list, index):
    all_rows = []
    num = list[index][0].get_text(strip=True)
    name = str.isalnum, list[index][1].get_text(strip=True)
    unit = list[index][2].get_text(strip=True)
    all_rows += [('Course Number: {0} | Course Name: {1} | Course Unit: {2}'.format(num, name, unit)]
    return all_rows
c = num_name_unit(all_tds[0], all_tds.index(all_tds[0]))
print(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As  @melpomene commented the string '\xa0' is a character - a non-breaking space... What you really need to be doing to this string is reformatting it to so called 'raw text', through the use of <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>:</p>
<pre><code>import re
re.sub('[^A-Za-z0-9-|:]+', ' ', str)
</code></pre>
<p>This is generally my preferred way of removing special characters/formatting - but how does it work... If we look with the first set of quotation marks<code>'[^A-Za-z0-9-|:]+'</code>we see the first thing we state is <code>A-Z</code> which simply means from A to Z all in capital letters. We then get from <code>a-z</code> all in lower case. After that we have <code>0-9</code> which shows all values from 0 to 9 and finally we have <code>|:</code> which means any colons or pipes... Let's test this with a simple script:</p>
<pre><code>import re
vals = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789|:'
print(vals == re.sub('[^A-Za-z0-9-|:]+', ' ', vals))
</code></pre>
<p>I would recommend running this code yourself to try it out but the answer you get back is <code>True</code>. </p>
<p>Incorporating this into your script would be as simple as:</p>
<pre><code>import re
all_tds = [get_tds(scrollable) for scrollable in scrollables]
def num_name_unit(list, index):
    all_rows = []
    num = list[index][0].get_text(strip=True)
    name = str.isalnum, list[index][1].get_text(strip=True)
    unit = list[index][2].get_text(strip=True)
    all_rows += [('Course Number: {0} | Course Name: {1} | Course Unit: {2}'.format(num, name, unit)]
    return all_rows
c = num_name_unit(all_tds[0], all_tds.index(all_tds[0]))
print(re.sub('[^A-Za-z0-9-|:]+', ' ', c))
</code></pre>
<p>If you encounter any other values you wish to include within your string, simple add them to the end of <code>^A-Za-z0-9-|:</code>. For example, if you wished to keep underscores as well you would simply use <code>'[^A-Za-z0-9-|:_]+'</code>
Hope this helped. To read more go to the <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regex how to section</a> of the python3 docs.</p>
</div>
<span class="comment-copy"><code>\xa0</code> is character 160, a non-breaking space.</span>
