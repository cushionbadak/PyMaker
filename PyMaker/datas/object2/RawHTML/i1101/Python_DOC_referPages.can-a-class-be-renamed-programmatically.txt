<div class="post-text" itemprop="text">
<p>I have <code>Vehicle</code> class. I want to rename it to <code>Rover</code>. I know we can create another reference variable, but I don't want the name of the class to be same anymore.</p>
<p>Played with <code>__name__</code>, but no success.</p>
<pre><code>class Vehicle:
    pass
st="Rover"
Vehicle.__name__=st
obj1=Rover()
</code></pre>
<p>Expected:
<code>Vehicle</code> class renamed to <code>Rover</code> without file handling and within the program.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the comments, you have a (very slightly mangled) quote from <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html</a>:</p>
<blockquote>
<p>This provides semantic for importing and renaming</p>
</blockquote>
<p>Here's the actual quote, with a bit more context:</p>
<blockquote>
<p>As in Smalltalk, classes themselves are objects. This provides semantics for importing and renaming.</p>
</blockquote>
<p>What this is talking about is the fact that we can have a Python library with a class in the library:</p>
<pre><code># lib_k.py
class Klass:
    ... definitions ...
</code></pre>
<p>Then, in some other Python module, we can write:</p>
<pre><code>from lib_k import Klass as LibKClass
</code></pre>
<p>which is mainly useful if we're also going to do:</p>
<pre><code>from lib_l import Klass as LibLClass
</code></pre>
<p>and then write code like:</p>
<pre><code>def f(args):
    obj_k = LibKClass(...)
    obj_l = LibLClass(...)
</code></pre>
<p>I personally prefer to write:</p>
<pre><code>import lib_k
import lib_l

def f(args):
    obj_k = lib_k.Klass(...)
    obj_l = lib_l.Klass(...)
</code></pre>
<p>but both ways are allowed, and which to use is something of a matter of taste, rather than correctness.</p>
</div>
<span class="comment-copy">Would inheritance be better here? Changing the fundamental name of your class is going to break a lot of dependent code no?</span>
<span class="comment-copy">Why would you do this?</span>
<span class="comment-copy">What kind of situation are you finding yourself in where this would save work? If you explain the context, we can probably suggest a better option. This sounds like an <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY problem</a>.</span>
<span class="comment-copy">What you are trying to do is very far from best practice. If you want to chance the class name, change your code.</span>
<span class="comment-copy">Assigning to the class's <code>__name__</code> is absolutely not going to cause the existing global variable <code>Vehicle</code>, that refers to the class, to change <i>its</i> name...</span>
<span class="comment-copy">I understood it wrong as said by @user2357112.</span>
<span class="comment-copy"><code>import</code>ing a class and giving it a different local name like that does not change the actual class object. i.e. <code>print(LibKClass.__name__)</code> -&gt; <code>Klass</code> and <code>print(LibLClass.__name__)</code> -&gt; <code>Klass</code>. Also, module names (and therefore their corresponding file names) should be all lowercase (according to <a href="https://www.python.org/dev/peps/pep-0008/#package-and-module-names" rel="nofollow noreferrer">PEP 8</a>), so I would suggest avoiding the use of them here in example code (because it could give newbies the wrong idea).</span>
<span class="comment-copy">@martineau: good point, I'll rename them to <code>lib_k</code> and <code>lib_l</code> here. I thought about mentioning the fact that the <code>__name__</code>s remain unchanged, but decided to stop at this point.</span>
<span class="comment-copy">torek: That's better...and you don't need to mention not changing <code>__name__</code> — I've done it for you down here in the comments. <code>;¬)</code></span>
