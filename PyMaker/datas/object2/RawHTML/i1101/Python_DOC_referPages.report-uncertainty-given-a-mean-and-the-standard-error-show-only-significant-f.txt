<div class="post-text" itemprop="text">
<p>The intent is to show the result of several observations without
unnecessary digits i.e., to display a value with the
number of significant digits that is consistent with a given
uncertainty.</p>
<p>For example, if computed <code>mean=123.45</code> and <code>err=0.0012345</code> then the
expected output may look like <em>123450 ± 1.2 (× 10<sup>-3</sup>)</em> where
the following rules are used:</p>
<ol>
<li>the error always has one or two significant digits. Two if the first
digit is <code>1</code> (ignoring the leading zeros)</li>
<li>the mean value is rounded to drop uncertain digits except for the
last one (<a href="https://arxiv.org/abs/1301.1034" rel="nofollow noreferrer">"stop the mean at the same decade as that of the <em>first</em> significant (non-zero) digit in the SEM"</a>). Trailing zeros are added to display the precision corresponding to the error if necessary.</li>
</ol>
<p>How it might be used in Python:</p>
<pre><code>import statistics

mean = statistics.mean(measurements)
err = statistics.stdev(measurements, mean) / len(measurements) ** 0.5
print("{} ± {} (×10&lt;sup&gt;{}&lt;/sup&gt;)".format(*round_to_uncertainty(mean, err)))
</code></pre>
<p>The question is how to implement the <code>round_to_uncertainty(value,
uncertainty)</code> function expressing the rules 1 and 2 above.</p>
<p>Note: the terms error, uncertainty are used loosely in the
question. See <a href="https://www.bipm.org/en/publications/guides/gum.html" rel="nofollow noreferrer">the Guide to the Expression of Uncertainty in Measurement (GUM)</a>. Here's a <a href="https://stats.stackexchange.com/q/46519/2530">related question for R</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module could be used to manipulate the decimal representation of the numbers conveniently:</p>
<pre><code>from decimal import Decimal

def round_to_uncertainty(value, uncertainty):
    # round the uncertainty to 1-2 significant digits
    u = Decimal(uncertainty).normalize()
    exponent = u.adjusted()  # find position of the most significant digit
    precision = (u.as_tuple().digits[0] == 1)  # is the first digit 1?
    u = u.scaleb(-exponent).quantize(Decimal(10)**-precision)

    # round the value to remove excess digits
    return round(Decimal(value).scaleb(-exponent).quantize(u)), u, exponent
</code></pre>
<p>Example:</p>
<pre><code>for mean, err in [
    (123.45, 0.0012345),    # 123450 ± 1.2 (×10&lt;sup&gt;-3&lt;/sup&gt;)
    (8165.666, 338.9741),   # 82 ± 3 (×10&lt;sup&gt;2&lt;/sup&gt;)
]: 
    print("{} ± {} (×10&lt;sup&gt;{}&lt;/sup&gt;)".format(*round_to_uncertainty(mean, err)))
</code></pre>
<p>The input <code>123.45</code>, <code>0.0012345</code> is reported as <em>123450 ± 1.2
  (×10<sup>-3</sup>)</em>.  And <code>8165.666</code>, <code>338.9741</code>
  translates to <em>82 ± 3 (×10<sup>2</sup>)</em> according to the rules from the current question.</p>
</div>
