<div class="post-text" itemprop="text">
<p>In my project I'm using flask I get a JSON (by REST API) that has data that I should convert to a pandas Dataframe.
The JSON looks like:</p>
<pre><code>{
    "entity_data":[
                  {"id": 1, "store": "a", "marker": "a"}
    ]
}
</code></pre>
<p>I get the JSON and extract the data:</p>
<pre><code>params = request.json
entity_data = params.pop('entity_data')
</code></pre>
<p>and then I convert the data into a pandas dataframe:</p>
<pre><code>entity_ids = pd.DataFrame(entity_data)
</code></pre>
<p>the result looks like this:</p>
<pre><code>   id marker store
0   1      a     a
</code></pre>
<p>This is not the original order of the columns. I'd like to change the order of the columns as in the dictionary.
help?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> for an ordered dictionary</h3>
<p>You should not assume dictionaries are ordered. While dictionaries <em>are</em> insertion ordered in Python 3.7, <em>whether or not libraries maintain this order</em> when reading json into a dictionary, or converting the dictionary to a Pandas dataframe, should not be assumed.</p>
<p>The most reliable solution is to use <code>collections.OrderedDict</code> from the standard library:</p>
<pre><code>import json
import pandas as pd
from collections import OrderedDict

params = """{
    "entity_data":[
                  {"id": 1, "store": "a", "marker": "a"}
    ]
}"""

# replace myjson with request.json
data = json.loads(params, object_pairs_hook=OrderedDict)
entity_data = data.pop('entity_data')

df = pd.DataFrame(entity_data)

print(df)

#    id store marker
# 0   1     a      a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just add the column names parameter.</p>
<pre><code>entity_ids = pd.DataFrame(entity_data, columns=["id","store","marker"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have access to JSON sender, you can send the order in the JSON itself.</p>
<p>like</p>
<pre><code>`{
"order":['id','store','marker'],
"entity_data":{"id": [1,2], "store": ["a","b"],
"marker": ["a","b"]}
}
</code></pre>
<p>then create DataFrame with <code>columns</code> specified. as said by Chiheb.K.</p>
<pre><code>import pandas as pd
params = request.json
entity_data = params.pop('entity_data')
order = params.pop('order')
entity_df=pd.DataFrame(data,columns=order)
</code></pre>
<p>if you cannot explicitly specify the order in the JSON. see <a href="https://stackoverflow.com/a/6921760/5783608">this</a> answer to specify <code>object_pairs_hook</code> in 
<code>JSONDecoder</code> to get an <code>OrderedDict</code> and then create the <code>DataFrame</code></p>
</div>
<span class="comment-copy">dictionaries do not maintain order. and why do you need to order the columns, you will be accessing them like <code>df['column_name']</code> anyway. Just like a dictionary, the order doesn't matter here.</span>
<span class="comment-copy">@nofar , please check the answers below and <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work/5235#5235">accept</a> one if any helps you so people can refer this post later . Thanks :)</span>
<span class="comment-copy">@Adithya, I need the order because I want to print the dataframe after some manipulations in the end in the same order. In addition, in my case the names of columns change dynamically (id,store and marker are just examples).</span>
<span class="comment-copy">@anky_91 I still have no solution for my problem</span>
<span class="comment-copy">@nofarmishraki check edited answer. :)</span>
<span class="comment-copy">Nice. :) Will keep this in mind. Thank you.</span>
<span class="comment-copy">but in my case the names of columns change dynamically (id,store and marker are just examples), do how can I get the original order of the names like in the dictionary?</span>
<span class="comment-copy">This doesn't actually answer the question, which is how to retrieve/store json "as-is" without any change in item order within dictionaries.</span>
