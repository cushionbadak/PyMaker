<div class="post-text" itemprop="text">
<p>Making the replace case insensitive does not seem to have an effect in the following example (I want to replace <em>jr.</em> or <em>Jr.</em> with <em>jr</em>):</p>
<pre><code>In [0]: pd.Series('Jr. eng').str.replace('jr.', 'jr', regex=False, case=False)
Out[0]: 0    Jr. eng
</code></pre>
<p>Why? What am I misunderstanding?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>case</code> argument is actually a convenience as an alternative to specifying <code>flags=re.IGNORECASE</code>. It has no bearing on replacement if the replacement is not regex-based. </p>
<p>So, when <code>regex=True</code>, these are your possible choices:</p>
<pre><code>pd.Series('Jr. eng').str.replace(r'jr\.', 'jr', regex=True, case=False)
# pd.Series('Jr. eng').str.replace(r'jr\.', 'jr', case=False)

0    jr eng
dtype: object
</code></pre>
<p>Or,</p>
<pre><code>pd.Series('Jr. eng').str.replace(r'jr\.', 'jr', regex=True, flags=re.IGNORECASE)
# pd.Series('Jr. eng').str.replace(r'jr\.', 'jr', flags=re.IGNORECASE)

0    jr eng
dtype: object
</code></pre>
<p>You can also get cheeky and bypass both keyword arguments by incorporating the case insensitivity flag as part of the pattern as <code>?i</code>. See</p>
<pre><code>pd.Series('Jr. eng').str.replace(r'(?i)jr\.', 'jr')
0    jr eng
dtype: object
</code></pre>
<blockquote>
<p><strong>Note</strong><br/>
  You will need to escape the period <code>\.</code> in regex mode, because
  the unescaped dot is a meta-character with a different meaning (match
  any character). If you want to dynamically escape meta-chars in patterns, you can use <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a>.</p>
</blockquote>
<p>For more information on flags and anchors, see <a href="https://docs.python.org/3/library/re.html#re.IGNORECASE" rel="nofollow noreferrer">this section of the docs</a> and <a href="https://docs.python.org/3/howto/regex.html#regex-howto" rel="nofollow noreferrer"><code>re</code> HOWTO</a>.</p>
<hr/>
<p>From the <a href="https://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/strings.py#L635-L669" rel="nofollow noreferrer">source code</a>, it is clear that the "case" argument is ignored if <code>regex=False</code>. See</p>
<blockquote>
<pre><code># Check whether repl is valid (GH 13438, GH 15055)
if not (is_string_like(repl) or callable(repl)):
    raise TypeError("repl must be a string or callable")

is_compiled_re = is_re(pat)
if regex:
    if is_compiled_re:
        if (case is not None) or (flags != 0):
            raise ValueError("case and flags cannot be set"
                             " when pat is a compiled regex")
    else:
        # not a compiled regex
        # set default case
        if case is None:
            case = True

        # add case flag, if provided
        if case is False:
            flags |= re.IGNORECASE
    if is_compiled_re or len(pat) &gt; 1 or flags or callable(repl):
        n = n if n &gt;= 0 else 0
        compiled = re.compile(pat, flags=flags)
        f = lambda x: compiled.sub(repl=repl, string=x, count=n)
    else:
        f = lambda x: x.replace(pat, repl, n)
</code></pre>
</blockquote>
<p>You can see the <code>case</code> argument is only checked inside the <code>if</code> statement.</p>
<p>IOW, the only way is to ensure <code>regex=True</code> so that replacement is regex-based. </p>
</div>
<span class="comment-copy">You should probably escape the <code>.</code> if you're going to turn on regex mode.</span>
<span class="comment-copy">@user2357112 Indeed, it slipped my mind. Thanks!</span>
<span class="comment-copy">Thanks! The need for escaping the . was the actual reasoon why I disabled regexps (I was just being lazy).</span>
<span class="comment-copy">@Toby If you don't want to have to escape it yourself, you can use <code>re.escape(mypattern)</code> to escape all regex metacharacters. Laziness FTW!</span>
