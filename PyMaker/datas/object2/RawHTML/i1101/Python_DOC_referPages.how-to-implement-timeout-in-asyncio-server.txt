<div class="post-text" itemprop="text">
<p>Below is a simple echo server. But if the client does not send anything for 10 seconds, I want to close the connection. </p>
<pre><code>import asyncio


async def process(reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
    print("awaiting for data")
    line = await reader.readline()
    print(f"received {line}")
    writer.write(line)
    print(f"sent {line}")
    await writer.drain()
    print(f"Drained")


async def timeout(task: asyncio.Task, duration):
    print("timeout started")
    await asyncio.sleep(duration)
    print("client unresponsive, cancelling")
    task.cancel()
    print("task cancelled")


async def new_session(reader, writer):
    print("new session started")
    task = asyncio.create_task(process(reader, writer))
    timer = asyncio.create_task(timeout(task, 10))
    await task
    print("task complete")
    timer.cancel()
    print("timer cancelled")
    writer.close()
    print("writer closed")


async def a_main():
    server = await asyncio.start_server(new_session, port=8088)
    await server.serve_forever()


if __name__ == '__main__':
    asyncio.run(a_main())
</code></pre>
<p>If the client sends a message, it works fine. But the other case, when client is silent, it does not work</p>
<p>When client sends message:</p>
<pre><code>new session started
awaiting for data
timeout started
received b'slkdfjsdlkfj\r\n'
sent b'slkdfjsdlkfj\r\n'
Drained
task complete
timer cancelled
writer closed
</code></pre>
<p>When client is silent after opening connection</p>
<pre><code>new session started
awaiting for data
timeout started
client unresponsive, cancelling
task cancelled
</code></pre>
<p>There is no <code>task complete</code>, <code>timer cancelled</code>, <code>writer closed</code>.</p>
<ol>
<li><del> What is the issue with above code? </del></li>
<li>Is there a better way to implement timeouts?</li>
</ol>
<hr/>
<p><strong>Update</strong></p>
<p>Figured out the problem, Looks like the task was actually cancelled, but the exception got silently ignored, Fixed the problem by catching <code>CancelledError</code></p>
<pre><code>async def new_session(reader, writer):
    print("new session started")
    task = asyncio.create_task(process(reader, writer))
    timer = asyncio.create_task(timeout(task, 10))
    try:
        await task
    except asyncio.CancelledError:
        print(f"Task took too long and was cancelled by timer")
    print("task complete")
    timer.cancel()
    print("timer cancelled")
    writer.close()
    print("writer closed")
</code></pre>
<p>Second part still remains. Is there a better way to implement timeouts?</p>
<hr/>
<p><strong>Update2</strong></p>
<p>Complete code using <code>wait_for</code>. The timeout code is no longer needed. Check accepted <a href="https://stackoverflow.com/a/53960499">solution</a> below:</p>
<pre><code>async def new_session(reader, writer):
    print("new session started")
    try:
        await asyncio.wait_for(process(reader, writer), timeout=5)
    except asyncio.TimeoutError as te:
        print(f'time is up!{te}')
    finally:
        writer.close()
        print("writer closed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a better way to implement timeouts?</p>
</blockquote>
<p>You can use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for" rel="nofollow noreferrer"><code>asyncio.wait_for</code></a> instead of <code>timeout</code>. It has similar semantics, but already comes with asyncio. Also, you can await the future it returns to detect if the timeout has occurred.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use the following code when making a connection. I'd suggest using wait_for similarly for your code.</p>
<pre><code>fut = asyncio.open_connection( self.host, self.port, loop=self.loop )
try:
   r, w = await asyncio.wait_for(fut, timeout=self.connection_timeout)
except asyncio.TimeoutError:
   pass
</code></pre>
</div>
<span class="comment-copy">You can use <code>asyncio.wait_for</code> instead of <code>timeout</code>.</span>
<span class="comment-copy">@user4815162342 Thanks. Do you want to add it as an answer? I will accept.</span>
<span class="comment-copy"><code>open_connection</code> is when you are a client. The question is for server.</span>
<span class="comment-copy">It is an example of how to use wait_for which is the pythonic solution for what you want to do.</span>
<span class="comment-copy">I didn't realise it can be used for any awaitable. Upvoted.</span>
