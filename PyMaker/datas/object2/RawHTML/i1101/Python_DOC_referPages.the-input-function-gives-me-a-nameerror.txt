<div class="post-text" itemprop="text">
<p>I am getting an error when I try to run this simple python script:</p>
<pre><code>input_variable = input ("Enter your name: ")
print ("your name is" + input_variable)
</code></pre>
<p>Lets say I type in "dude", the error I am getting is:</p>
<pre><code>line 1, in &lt;module&gt;
input_variable = input ("Enter your name: ")
File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'dude' is not defined
</code></pre>
<p>I am running Mac OS X 10.9.1 and I am using the Python Launcher app that came with the install of python 3.3 to run the script.</p>
<p>Edit: I realized I am somehow running these scripts with 2.7. I guess the real question is how do I run my scripts with version 3.3? I thought if I dragged and dropped my scripts on top of the Python Launcher app that is inside the Python 3.3 folder in my applications folder that it would launch my scripts using 3.3. I guess this method still launches scripts with 2.7. So How do I use 3.3?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong></p>
<p><code>input</code> function in Python 2.7, evaluates whatever your enter, as a Python expression. If you simply want to read strings, then use <code>raw_input</code> function in Python 2.7, which will not evaluate the read strings.</p>
<p>If you are using Python 3.x, <code>raw_input</code> has been renamed to <code>input</code>. Quoting the <a href="https://docs.python.org/3.0/whatsnew/3.0.html#builtins" rel="noreferrer">Python 3.0 release notes</a>,</p>
<blockquote>
<p><code>raw_input()</code> was renamed to <code>input()</code>. That is, the new <code>input()</code> function reads a line from <code>sys.stdin</code> and returns it with the trailing newline stripped. It raises <code>EOFError</code> if the input is terminated prematurely. To get the old behavior of <code>input()</code>, use <code>eval(input())</code></p>
</blockquote>
<hr/>
<p><strong>In Python 2.7</strong>, there are two functions which can be used to accept user inputs. One is <a href="http://docs.python.org/2/library/functions.html#input" rel="noreferrer"><code>input</code></a> and the other one is <a href="http://docs.python.org/2/library/functions.html#raw_input" rel="noreferrer"><code>raw_input</code></a>. You can think of the relation between them as follows</p>
<pre><code>input = eval(raw_input)
</code></pre>
<p>Consider the following piece of code to understand this better</p>
<pre><code>&gt;&gt;&gt; dude = "thefourtheye"
&gt;&gt;&gt; input_variable = input("Enter your name: ")
Enter your name: dude
&gt;&gt;&gt; input_variable
'thefourtheye'
</code></pre>
<p><code>input</code> accepts a string from the user and evaluates the string in the current Python context. When I type <code>dude</code> as input, it finds that <code>dude</code> is bound to the value <code>thefourtheye</code> and so the result of evaluation becomes <code>thefourtheye</code> and that gets assigned to <code>input_variable</code>.</p>
<p>If I enter something else which is not there in the current python context, it will fail will the <code>NameError</code>.</p>
<pre><code>&gt;&gt;&gt; input("Enter your name: ")
Enter your name: dummy
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'dummy' is not defined
</code></pre>
<p><strong>Security considerations with Python 2.7's <code>input</code>:</strong></p>
<p>Since whatever user types is evaluated, it imposes security issues as well. For example, if you have already loaded <code>os</code> module in your program with <code>import os</code>, and then the user types in</p>
<pre><code>os.remove("/etc/hosts")
</code></pre>
<p>this will be evaluated as a function call expression by python and it will be executed. If you are executing Python with elevated privileges, <code>/etc/hosts</code> file will be deleted. See, how dangerous it could be?</p>
<p>To demonstrate this, let's try to execute <code>input</code> function again.</p>
<pre><code>&gt;&gt;&gt; dude = "thefourtheye"
&gt;&gt;&gt; input("Enter your name: ")
Enter your name: input("Enter your name again: ")
Enter your name again: dude
</code></pre>
<p>Now, when <code>input("Enter your name: ")</code> is executed, it waits for the user input and the user input is a valid Python function invocation and so that is also invoked. That is why we are seeing <code>Enter your name again:</code> prompt again.</p>
<p>So, you are better off with <code>raw_input</code> function, like this</p>
<pre><code>input_variable = raw_input("Enter your name: ")
</code></pre>
<p>If you need to convert the result to some other type, then you can use appropriate functions to convert the string returned by <code>raw_input</code>. For example, to read inputs as integers, use the <code>int</code> function, like shown in <a href="https://stackoverflow.com/a/20449433/1903116">this answer</a>.</p>
<p><strong>In python 3.x</strong>, there is only one function to get user inputs and that is called <a href="http://docs.python.org/3/library/functions.html#input" rel="noreferrer"><code>input</code></a>, which is equivalent to Python 2.7's <code>raw_input</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are running Python 2, not Python 3.  For this to work in Python 2, use <code>raw_input</code>.</p>
<pre><code>input_variable = raw_input ("Enter your name: ")
print ("your name is" + input_variable)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you are writing for Python 3.x, you'll want to begin your script with:</p>
<pre><code>#!/usr/bin/env python3
</code></pre>
<p>If you use:</p>
<pre><code>#!/usr/bin/env python
</code></pre>
<p>It will default to Python 2.x. These go on the first line of your script, if there is nothing that starts with <em>#!</em> (aka the shebang).</p>
<p>If your scripts just start with:</p>
<pre><code>#! python
</code></pre>
<p>Then you can change it to:</p>
<pre><code>#! python3
</code></pre>
<p>Although this shorter formatting is only recognized by a few programs, such as the launcher, so it is not the best choice. </p>
<p>The first two examples are much more widely used and will help ensure your code will work on any machine that has Python installed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>raw_input</code> because you are using python-2.7. When you use <code>input()</code> on a variable (for example: <code>s = input('Name: ')</code>), it will execute the command ON the Python environment without saving what you wrote on the variable (<code>s</code>) and create an error if what you wrote is not defined.</p>
<p><code>raw_input()</code> will save correctly what you wrote on the variable (for example: <code>f = raw_input('Name : ')</code>), and it will not execute it in the Python environment without creating any possible error: </p>
<pre><code>input_variable = raw_input('Enter Your Name : ')
print("Your Name Is  : " + (input_variable))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>For python 3 and above</strong></p>
<pre><code>s = raw_input()
</code></pre>
<p>it will solve the problem on pycharm IDE
if you are solving on online site exactly hackerrank then use:</p>
<pre><code>s = input()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>input_variable = input ("Enter your name: ")
print ("your name is" + input_variable)
</code></pre>
<p>You have to enter input in either single or double quotes</p>
<pre><code>Ex:'dude' -&gt; correct

    dude -&gt; not correct
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For anyone else that may run into this issue, turns out that even if you include <code>#!/usr/bin/env python3</code> at the beginning of your script, the shebang is ignored if the file isn't executable.</p>
<p>To determine whether or not your file is executable:</p>
<ul>
<li>run <code>./filename.py</code> from the command line</li>
<li>if you get <code>-bash: ./filename.py: Permission denied</code>, run <code>chmod a+x filename.py</code></li>
<li>run <code>./filename.py</code> again</li>
</ul>
<p>If you've included <code>import sys; print(sys.version)</code> as Kevin suggested, you'll now see that the script is being interpreted by python3</p>
</div>
<div class="post-text" itemprop="text">
<p>You could either do:</p>
<pre><code>x = raw_input("enter your name")
print "your name is %s " % x
</code></pre>
<p>or:</p>
<pre><code>x = str(input("enter your name"))
print "your name is %s" % x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can change which python you're using with your IDE, if you've already downloaded python 3.x it shouldn't be too hard to switch. But your script works fine on python 3.x, I would just change</p>
<pre><code>print ("your name is" + input_variable)
</code></pre>
<p>to</p>
<pre><code>print ("your name is", input_variable)
</code></pre>
<p>Because with the comma it prints with a whitespace in between <code>your name is</code> and whatever the user inputted. AND: if you're using 2.7 just use <code>raw_input</code> instead of input. </p>
</div>
<div class="post-text" itemprop="text">
<p>We are using the following that works both <strong>python 2 and python 3</strong></p>
<pre><code>#Works in Python 2 and 3:
try: input = raw_input
except NameError: pass
print(input("Enter your name: "))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Good contributions the previous ones.</p>
<pre><code>import sys; print(sys.version)

def ingreso(nombre):
    print('Hi ', nombre, type(nombre))

def bienvenida(nombre):
    print("Hi "+nombre+", bye ")

nombre = raw_input("Enter your name: ")

ingreso(nombre)
bienvenida(nombre)

#Works in Python 2 and 3:
try: input = raw_input
except NameError: pass
print(input("Your name: "))
</code></pre>
<pre>Enter your name: Joe
('Hi ', 'Joe', &amp;lttype 'str'&gt;)
Hi Joe, bye 

Your name: Joe
Joe
</pre>
<p>Thanks!</p>
</div>
<span class="comment-copy">Are you sure it's Python 3.3? I would expect <code>input</code> to behave this way, but only in 2.7. What does it say when you run <code>python --version</code> from a command prompt? Alternatively, what if you write <code>import sys; print(sys.version)</code> at the beginning of your script?</span>
<span class="comment-copy">You're not running Python 3. You're running Python 2, somehow (I'm not familiar with this "Python Launcher" app)</span>
<span class="comment-copy">Put as first line <code>import sys</code> and as second line <code>print(sys.version_info)</code> in order to ascertain which version you are using.</span>
<span class="comment-copy">I did what Kevin said and it is version 2.7.5! I'm not sure how though. I downloaded and installed version 3.3, in my applications folder there is a folder that is called "Python 3.3" inside that folder there is an app called "Python Launcher" and I am running my scripts by dragging and dropping them onto the Python Launcher app. How come I am still using 2.7 when I am using the 3.3 launcher app?</span>
<span class="comment-copy">@chillpenguin: check out the Preferences dialog for Python Launcher. Apparently it doesn't default to running the version it was installed with, which is... dumb. (I've never used it myself; I find using the Terminal is better...)</span>
<span class="comment-copy">raw_input fixed the issue for me</span>
<span class="comment-copy">But raw_input() isn't available in Python 3.</span>
