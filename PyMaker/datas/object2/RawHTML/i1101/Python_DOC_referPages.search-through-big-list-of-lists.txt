<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5993621/fastest-way-to-search-a-list-in-python">Fastest way to search a list in python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a list of coordinates (x and y like this: <code>coordinates = [[1, 2], [2, 3]]</code> but much bigger) that updates every iteration (appends new list). So I need to search if <code>current_pos</code> (which is also a list like <code>[4, 10]</code>) is in <code>coordinates</code>. Here is my snippet of code:</p>
<pre><code>for move in range(len(movement_string)):
    # ...
    # code changes current_pos
    # ...
    if current_pos in coordinates:
        fail = True
        failed_move = move + 1
        break
    else:
        coordinates.append(current_pos)
</code></pre>
<p>It works pretty fine with small lists, but it takes too long time for big lists with 10.000 - 1.000.000 items. I think the problem is in searching through list, because as it becomes bigger, the time it uses becomes also longer.</p>
</div>
<div class="post-text" itemprop="text">
<p>just turn <code>coordinates</code> to a <code>set</code></p>
<pre><code>coordinates = set()
</code></pre>
<p>and make <code>current_pos</code> a <code>tuple</code> so you can insert it in a <code>set</code>. At some point:</p>
<pre><code>current_pos = tuple(current_pos)
</code></pre>
<p>then your loop becomes:</p>
<pre><code>for move in range(len(movement_string)):
    # ...
    # code changes current_pos
    # ...
    if current_pos in coordinates:
        fail = True
        failed_move = move + 1
        break
    else:
        coordinates.add(current_pos)
</code></pre>
<p>and that's it. You get <code>O(1)</code> lookup so it doesn't depend on the length of the <code>coordinates</code> set.</p>
<p>If order matters, just creates a <code>set</code> as above and keep the <code>list</code> too to append to if not already seen (widely covered like here: <a href="https://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-whilst-preserving-order">How do you remove duplicates from a list whilst preserving order?</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>If order matters the out of box solution is a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> that remembers the order of insertion, and still has O(1) lookup. You also need your coordinates as tuples, so they would be immutable (as opposed to the mutable lists).</p>
<p>Inserting into the dictionary would be:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; points = OrderedDict()
&gt;&gt;&gt; points[(1,2)] = 1 #The value assigned to the key not matter in this example
&gt;&gt;&gt; points[(-1,3)] = 1
&gt;&gt;&gt; list(points)
[(1, 2), (-1, 3)
</code></pre>
<p>and look up would just be</p>
<pre><code>&gt;&gt;&gt; point = (3,4)
&gt;&gt;&gt; point in points
False
</code></pre>
</div>
<span class="comment-copy">If the order of <code>coordinates</code> does not matter then it can be a set of tuples instead of list of lists. Then <code>current_pos in coordinates</code> becomes an O(1) operation instead of O(n)</span>
<span class="comment-copy">What is <code>movement_string</code>?</span>
<span class="comment-copy">@Austin it just a string like <code>DDRRRULLDL</code> that says which direction to turn and this changes <code>current_pos</code>.</span>
<span class="comment-copy">@DeepSpace yes, it worked! Thanks!</span>
<span class="comment-copy">I had the same idea exactly. Was worth turning it into an answer</span>
<span class="comment-copy">It doesn't really matter what is the order, so the other answer was easier. But still, thanks</span>
