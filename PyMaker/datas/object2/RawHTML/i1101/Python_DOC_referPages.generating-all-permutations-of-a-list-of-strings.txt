<div class="post-text" itemprop="text">
<p>I have a list of strings: <code>['red','blue','pink']</code> and I'm trying to generate a list of all permutations of the elements of the given list as follows:</p>
<pre><code>['red', 'redblue', 'redbluepink', 'redpinkblue',
 'blue', 'bluered', 'bluepink', 'blueredpink', 'bluepinkred',
 'pink', 'pinkred', 'pinkblue', 'pinkredblue', 'pinkbluered']
</code></pre>
<p>I have managed to write the following code to generate all the forward permutations of the elements of a list:</p>
<pre><code>from itertools import combinations

def all_permutations(list_of_strings):
    results = [''.join(list_of_strings[i:j]) for i, j in combinations(range(len(list_of_strings) + 1), 2)]

    return results

print(all_permutations(['red','blue','pink']))
</code></pre>
<p>However, this code only manages to generate all the forward permutations:</p>
<pre><code>['red', 'redblue', 'redbluepink', 'blue', 'bluepink', 'pink']
</code></pre>
<p>Could anyone help me figure out a way to generate all the permutations of the elements from a list of strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the second parameter to <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a>, <code>r</code> to get the iterator you want:</p>
<pre><code>from itertools import permutations

def all_permutations(x):
    for r in range(1, len(x) + 1):
        yield from permutations(x, r)
</code></pre>
<p>To combine the result:</p>
<pre><code>[''.join(s) for s in all_permutations(['red', 'blue', 'pink'])]
</code></pre>
<p>Or</p>
<pre><code>map(''.join, all_permutations(['red', 'blue', 'pink']))
</code></pre>
<p>This will give you an order different from the one in the question. You can impose the order you want by sorting according to the index in your original list:</p>
<pre><code>items = ['red', 'blue', 'pink']
index = {k: i for i, k in enumerate(items)}
all_items = sorted(all_permutations(items), key=lambda item: tuple(index[x] for x in item))
all_items = [''.join(item) for item in all_items]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following solution may meet your needs. Your solution is using <code>itertools.combinations</code>, and the key difference between <em>permutations</em> and <em>combinations</em> is that order does not matter in combinations, such that <code>'redblue'</code> and <code>'bluered'</code> would not be unique.</p>
<pre><code>from itertools import permutations

def all_permutations(l):
    o = []
    for x in range(1, len(l) + 1):
        o.extend([''.join(p) for p in list(permutations(l, x))])
    return o

colors = ['red', 'blue', 'pink']

print(all_permutations(colors))
</code></pre>
<p>Result:</p>
<pre><code>['red', 'blue', 'pink', 'redblue', 'redpink', 'bluered', 'bluepink', 'pinkred', 'pinkblue', 'redbluepink', 'redpinkblue', 'blueredpink', 'bluepinkred', 'pinkredblue', 'pinkbluered']
</code></pre>
</div>
<span class="comment-copy">You can loop over the length of colors, i.e. <code>i in [1, 2, 3]</code> and then chain <code>map(permutations, combinations(colors, i))</code>.</span>
<span class="comment-copy">Why is <code>redpink</code> not in your expected output?</span>
<span class="comment-copy">@cody I must have missed adding that in my expected output list</span>
<span class="comment-copy">Thanks for the edit :)</span>
<span class="comment-copy">@MadPhysicist np.. your solution is far more elegant than mine, but I will leave it here anyway, for contrast.. haha</span>
<span class="comment-copy">You beat me to it, and it's really the same solution. I agree that you should definitely leave it. +1</span>
