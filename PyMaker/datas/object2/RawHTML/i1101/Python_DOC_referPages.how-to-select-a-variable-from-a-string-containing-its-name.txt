<div class="post-text" itemprop="text">
<p>So I am trying to get a loop function to automatically identify the next list to append a number. The following sample code summarizes what I am trying to achieve.</p>
<pre><code>start = 'patch'
end = 'List'

patch1List = []; patch2List = []; patch3List = []; patch4List = []; patch5List = []; patch6List = []
patch7List = []; patch8List = []; patch9List = []; patch10List = []

for patch in range(10):
    num = patch+1
    DataPoint = random.randint(1,10)

    currentPList = ('%s%d%s' % (start,num,end))
    currentPList.append(DataPoint)
</code></pre>
<p>I need the loop to append a data point into each of the 10 empty lists. </p>
<p>I tried to do this by setting up <code>currentPList</code> to identify the list to work with. The problem is, I am not quite sure how to convert <code>currentPList</code>, which is currently a string, into a proper object (ie. one of the empty <code>patchList</code>s). How do I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are definitely overcomplicating this. Just use a list of lists:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; num_arrays = 10
&gt;&gt;&gt; array = [ [random.randint(1,10)] for i in range(num_arrays) ]
&gt;&gt;&gt; array
[[2], [1], [10], [6], [9], [2], [2], [5], [8], [4]]
</code></pre>
<p>This way you can get the same functionality of each individual list and have it be extensible and not try to reference a variable by a concatenated string for its name.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Charles Drotar's answer is what you want to do, but since the title says how to convert a string to variable name, here is how you can actually create variables specified as strings (but don't do this in your circumstance):</p>
<pre><code>s = 'string'
for i in range(1,6):
    vars().update({s + str(i): i})

&gt;&gt;&gt; string2
2
&gt;&gt;&gt; string5
5
</code></pre>
<p>What you are doing here is adding the variable entry to the namespace. In the absence of an object argument <code>vars()</code> acts like <code>locals()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I think the <em>Pythonic</em> way to do it would be to store all the patch lists a single dictionary. That way you can easily select which one by creating a unique dictionary key for each of them. Note also that the keys generated don't even need to be valid Python identifiers using this approach—and it would be very easy to change how many there were, since it's all done dynamically.</p>
<p>Here's what I mean (Note I also made the variable names used following the <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow noreferrer">PEP 8 Naming Conventions</a>):</p>
<pre><code>from collections import defaultdict
import random

START, END = 'patch', 'List'
patches = defaultdict(list)  # A dictionary whose values default to lists.

for patch_num in range(1, 11):
    data_point = random.randint(1, 10)
    current_patch_list = ('%s%d%s' % (START, patch_num, END))  # Create key.
    patches[current_patch_list].append(data_point)

print(dict(patches))
</code></pre>
<p>Sample utput:</p>
<p><code>{'patch1List': [5], 'patch2List': [8], 'patch3List': [4], 'patch4List': [9], 'patch5List': [10], 'patch6List': [9], 'patch7List': [5], 'patch8List': [9], 'patch9List': [8], 'patch10List': [7]}</code></p>
</div>
<span class="comment-copy">the title is misleading. strings are objects. and the term you're looking for is <code>variable names</code></span>
<span class="comment-copy"><code>patch1List</code>, <code>patch2List</code>, <code>patch3List</code>, ... It looks like you want to use a list instead of 10 single variables.</span>
<span class="comment-copy">Hi Klaus, sorry if the codes looked a little deceiving. This is a simplified code of what I am trying to do on a bigger scale. Basically, in each of the patchLists, they all will have hundreds of data point, each list, consisting of different data points. Thus, I had it laid out like this.</span>
<span class="comment-copy">You still need to use a list. Just have a list with 10 sub lists</span>
<span class="comment-copy">why not just <code>array = [ [random.randint(1,10)] for i in range(num_arrays)]</code> for a one-liner?</span>
<span class="comment-copy">Duh! @Jean-FrançoisFabre you are absolutely right I just overlooked that  :/. I'll update the answer with your suggestion.</span>
<span class="comment-copy">It's worth noting that the python docs <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">explicitly state</a> that <code>locals</code> should not be modified.</span>
