<div class="post-text" itemprop="text">
<p>I want to create a list, which does not already exist. So, i want to use the insert function to insert "0" as the new element in that list.</p>
<p>The problem ist that I don't know how to access the index of the element position which is in a  nested list.</p>
<p>I have tried to resolve my problem using : <code>matrix_result[i1].insert(i2, 0)</code></p>
<p>but it does not help me and the programm gives an error because of this line.
Full code:</p>
<pre><code>matrix1 = [[1, 5], [6, 4]]
matrix2 = [[3, 2], [7, 8]]
matrix_result = []


def add(p1, p2):
    global matrix_result

    for i1 in range(0, len(p1)):
        matrix_result.insert(i1,0)
        for i2 in range(0, len(p1[i1])):
            matrix_result[i1].insert(i2, 0)
            matrix_result[i1][i2] = p1[i1][i2] + p2[i1][i2]
    return matrix_result


print(add(matrix1, matrix2))
</code></pre>
<p>Expected result: the matrix_result has exact many elements as there are in matrix1 but all with the value 0</p>
<p>actual result: error because of the statement : <code>matrix_result[i1].insert(i2, 0)</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I want to create a list, which does not already exist. So, i want to use the insert function to insert "0" as the new element in that list.</p>
</blockquote>
<p>You cannot insert to a non-existent list. You have to use <code>[]</code> to first create the list, then you can insert things into it.</p>
<p><strong>Solution</strong>: On the line where you say <code>matrix_result.insert(i1, 0)</code>, you insert an <code>int</code> instead of a <code>list</code>. To insert an empty <code>list</code>, you have to say <code>matrix_result.insert(i1, [])</code>.</p>
<p>EDIT: As Jondiedoop has said, it is usually recommended to use the <code>numpy</code> library for matrix operations because it is highly optimized and easy to use. Go here for more information: <a href="http://www.numpy.org/" rel="nofollow noreferrer">NumPy.org</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For all matrix manipulations, use the <code>numpy</code>-library:</p>
<pre><code>import numpy as np
np.array(matrix1) + np.array(matrix2)
</code></pre>
<p>Output:</p>
<pre><code>#array([[ 4,  7],
#      [13, 12]])
</code></pre>
<p>Apart from being much easier and much more flexible, it will also be much faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you need to use <code>insert()</code> here. An easier way would be to use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a>:</p>
<pre><code>matrix1 = [[1, 5], [6, 4]]
matrix2 = [[3, 2], [7, 8]]

def add(*args):
    matrix_result = []

    for pair in zip(*args):
        inner = []
        for x, y in zip(*pair):
            inner.append(x + y)
        matrix_result.append(inner)

    return matrix_result

print(add(matrix1, matrix2))
# [[4, 7], [13, 12]]
</code></pre>
<p>You can also use a list comprehension:</p>
<pre><code>def add(*args):
    return [[x + y for x, y in zip(*pair)] for pair in zip(*args)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your empty list <code>matrix_result</code> presented a few challenges to the interpreter. I made a few changes to your code and the matrices add.</p>
<pre><code>matrix1 = [[1, 5], [6, 4]]
matrix2 = [[3, 2], [7, 8]]
matrix_result = [[0,0], [0,0]] # CHANGE: empty array is now zeroes


def add_matrix(p1, p2):
    global matrix_result

    for i1 in range(0, len(p1)):
        for i2 in range(0, len(p1[i1])):
            matrix_result[i1][i2] = 0 # change: no .insert(), just assignment. you can (and probably should) remove this line.
            matrix_result[i1][i2] = p1[i1][i2] + p2[i1][i2]
    return matrix_result


print(add_matrix(matrix1, matrix2))
</code></pre>
<p>I hope this helps you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Change the matrix_result to contain list of lists. Also problem in your solution is you are accessing the int type saved in the list            <code>matrix_result[i1]</code> and trying to insert in the int type which is not possible using <code>insert(i2, 0)</code></p>
<pre><code>matrix1 = [[1, 5], [6, 4]]
matrix2 = [[3, 2], [7, 8]]
matrix_result = [[0,0],[0,0]]

def add1(p1, p2):
    global matrix_result

    for i1 in range(len(p1)):
            for i2 in range(len(p1[i1])):  
                matrix_result[i1][i2] = p1[i1][i2] + p2[i1][i2]
    return matrix_result
print(add1(matrix1, matrix2))
</code></pre>
<p>Although you do not necessarily need <code>insert()</code> here but if you really want to then below is the updated version of your code</p>
<pre><code>matrix1 = [[1, 5], [6, 4]]
matrix2 = [[3, 2], [7, 8]]
matrix_result = [[],[]]


def add1(p1, p2):
    global matrix_result

    for i1 in range(0, len(p1)):

        for i2 in range(0, len(p1[i1])):
            matrix_result[i1].insert(i2,0)
            matrix_result[i1][i2] = p1[i1][i2] + p2[i1][i2]
    return matrix_result

print(add1(matrix1, matrix2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're trying to implement matrix addition, I assume that you want the following behaviour: </p>
<pre><code># m1 = [[1, 5], [6, 4]]
# m2 = [[3, 2], [7, 8]]
# add(m1, m2) =&gt; [[4, 7], [13, 12]]
</code></pre>
<p>If you can't use any libraries, you could use zip and map, where we also assume that the dimensions of the matrices are the same of course: </p>
<pre><code>def add(p1, p2):
  adder = lambda tuple: [tuple[0][i] + tuple[1][i] for i in range(len(tuple[1]))]
  return list(map(adder, zip(p1, p2)))

print(add(matrix1, matrix2))
# [[4, 7], [13, 12]]
</code></pre>
<p>The simplest and fastest would be to use numpy: </p>
<pre><code>import numpy as np 

def add(p1, p2):
    return np.array(p1) + np.array(p2) 
</code></pre>
</div>
<span class="comment-copy">What's the exact error? And do you want to add the lists or set them to 0?</span>
<span class="comment-copy">Please provide an expected output</span>
<span class="comment-copy">@WarpDriveEnterprises  AttributeError: 'int' object has no attribute 'insert'</span>
<span class="comment-copy">@Ayxan  expected output:   [[4,7], [13,12]]</span>
<span class="comment-copy">Thanks for providing the extra information in the comments! You can improve your question by incorporating this information in your question.</span>
<span class="comment-copy">You probably do not need this line ` matrix_result[i1][i2] = 0` if you have already initialize the matrix values as <code>matrix_result = [[0,0], [0,0]]</code></span>
<span class="comment-copy">@mad_ Yeah. In the original code, there was an attempt to put it to 0. I don't know if that was there for a feature later on, so I left it. I did comment that it can be removed, though.</span>
