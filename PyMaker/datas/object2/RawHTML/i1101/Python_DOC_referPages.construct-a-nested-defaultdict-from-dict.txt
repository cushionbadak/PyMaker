<div class="post-text" itemprop="text">
<p>Is it possible to extend the approach discussed <a href="https://stackoverflow.com/questions/7539115/how-to-construct-a-defaultdict-from-a-dictionary">here</a> to nested defaultdict? </p>
<p><strong>EDIT:</strong></p>
<p>As per comment, the default is updated from the original <code>None</code> to <code>lambda: None</code>. However, the following still doesn't work as intended: </p>
<pre><code>from collections import defaultdict
dd = defaultdict(lambda: None, {"a":1,"b":{"c":3}})
</code></pre>
<p><code>dd["b"]["e"]</code> raises a <code>KeyError</code> instead returning None. </p>
<p>How to convert all nested dict's to defaultdict?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do:</p>
<pre><code>from collections import defaultdict


def to_none(d, factory):
    result = defaultdict(factory)
    for key, value in d.items():
        if isinstance(value, dict):
            result[key] = to_none(value, factory)
        else:
            result[key] = value
    return result


d = {"a": 1, "b": {"c": 3}}

dd = to_none(d, lambda: None)

print(dd['a'])
print(dd['xxx'])
print(dd['b']['c'])
print(dd['b']['e'])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>1
None
3
None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>collections.defaultdict</code> isn't the ideal tool for this purpose. To specify <code>None</code> as a default value for a nested dictionary, you can just <a href="https://stackoverflow.com/a/52260663/9209546">iterate your dictionary recursively</a> and use <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get</code></a> to return <code>None</code> when any key at any level is not found:</p>
<pre><code>from functools import reduce

def get_from_dict(dataDict, mapList):
    """Iterate nested dictionary"""
    return reduce(dict.get, mapList, dataDict)

d = {"a": 1, "b": {"c": 3}}

get_from_dict(d, ['b', 'e'])  # None
get_from_dict(d, ['b', 'c'])  # 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def _sub_getitem(self, k):
    try:
        # sub.__class__.__bases__[0]
        real_val = self.__class__.mro()[-2].__getitem__(self, k)
        val = '' if real_val is None else real_val
    except Exception:
        val = ''
        real_val = None
    # isinstance(Avoid,dict)也是true，会一直递归死
    if type(val) in (dict, list, str, tuple):
        val = type('Avoid', (type(val),), {'__getitem__': _sub_getitem, 'pop': _sub_pop})(val)
        # 重新赋值当前字典键为返回值，当对其赋值时可回溯
        if all([real_val is not None, isinstance(self, (dict, list)), type(k) is not slice]):
            self[k] = val
    return val


def _sub_pop(self, k=-1):
    try:
        val = self.__class__.mro()[-2].pop(self, k)
        val = '' if val is None else val
    except Exception:
        val = ''
    if type(val) in (dict, list, str, tuple):
        val = type('Avoid', (type(val),), {'__getitem__': _sub_getitem, 'pop': _sub_pop})(val)
    return val


class DefaultDict(dict):
    def __getitem__(self, k):
        return _sub_getitem(self, k)

    def pop(self, k):
        return _sub_pop(self, k)

In[8]: d=DefaultDict({'balabala':"dddddd"})
In[9]: d['a']['b']['c']['d']
Out[9]: ''
In[10]: d['a']="ggggggg"
In[11]: d['a']
Out[11]: 'ggggggg'
In[12]: d['a']['pp']
Out[12]: ''
</code></pre>
<p>No errors again. 
No matter how many levels  nested.
pop  no error also
you can change to any value if you want.</p>
</div>
<span class="comment-copy">The argument to defaultdict is a <i>factory</i>, not a value, and None is a special case. Try <code>lambda: None</code>, maybe; it's not clear how you <i>did</i> intend this to work.</span>
<span class="comment-copy">I believe this is the answer you are looking for: <a href="https://stackoverflow.com/questions/6130768/return-none-if-dictionary-key-is-not-available">Return None if Dictionary key is not available</a></span>
<span class="comment-copy">@jonrsharpe, please see edits. I expected the key path to return <code>None</code>.</span>
<span class="comment-copy">What will be the expected output for dd["a"]["e"]?</span>
<span class="comment-copy">The problem is your key <code>"b"</code> has a normal dictionary, not a <code>defaultdict</code>.</span>
<span class="comment-copy">Seems like you're manually flattening the input dict and wrapping defaultdict where there's a dict. In general the input is more complicated with more nesting - manual process doesn't scale.</span>
<span class="comment-copy">@alancalvitti So what you want is a sort of mapping-like data-structure that returns <code>None</code> for every (nested) key that is not present?</span>
<span class="comment-copy">@alancalvitti Updated the answer, to include a function for any depth</span>
<span class="comment-copy">@Idlehands can you give me an example? After all dd is a defaultdict</span>
<span class="comment-copy">@DanielMesejo Sorry I was mistaken, honestly don't know what I was thinking.  Guess I was too fixated on <code>to_none</code> being a function but wasn't thinking what is being <code>return</code>ed.</span>
