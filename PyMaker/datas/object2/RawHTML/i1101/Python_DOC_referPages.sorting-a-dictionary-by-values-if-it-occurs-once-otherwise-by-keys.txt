<div class="post-text" itemprop="text">
<p>I have this dictionary and I need to sort the words by value. But when two or more words have the same value, I need to sort those words by alphabet but I don't know how to do that. Can u help me?</p>
<pre><code>dict = {'BLACK': 0, 'brown': 1, 'RED': 2, 'orange': 4, 'YELLOW': 7, 'green': 5, 'BLUE': 4,
        'violet': 2, 'GRAY': 3, 'White': 6}
</code></pre>
<p>Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>, you can construct an ordered mapping which still has the benefits of a dictionary, such as O(1) lookup.</p>
<pre><code>from collections import OrderedDict

d = {'BLACK': 0, 'brown': 1, 'RED': 2, 'orange': 4, 'YELLOW': 7,
     'green': 5, 'BLUE': 4, 'violet': 2, 'GRAY': 3, 'White': 6}

od = OrderedDict(sorted(d.items(), key=lambda x: (x[1], x[0].casefold())))

print(od)

OrderedDict([('BLACK', 0), ('brown', 1), ('RED', 2), ('violet', 2), ('GRAY', 3),
             ('BLUE', 4), ('orange', 4), ('green', 5), ('White', 6), ('YELLOW', 7)])
</code></pre>
<p>Since you are using both key and value for ordering, it's good practice to sort using tuples from <code>dict.items</code>. In addition, use <code>str.casefold</code> for case-insensitive ordering.</p>
<p>Finally, never shadow built-ins such as <code>dict</code>. Use <code>dict_</code> or <code>d</code> instead for variable names.</p>
</div>
<div class="post-text" itemprop="text">
<p>Utilize the fact that <code>tuple</code> compares its lements one-by-one.</p>
<pre><code>d = {'BLACK': 0, 'brown': 1, 'RED': 2, 'orange': 4, 'YELLOW': 7, 'green': 5, 'BLUE': 4,
     'violet': 2, 'GRAY': 3, 'White': 6}
result = sorted(d, key=lambda k: (d[k], k.lower()))
</code></pre>
<p>Also fixed that <code>dict</code> shouldn't be used as a variable name - it's a built-in type.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>sorted</code>: </p>
<pre><code>&gt;&gt;&gt; d = {'BLACK': 0, 'brown': 1, 'RED': 2, 'orange': 4, 'YELLOW': 7, 'green': 5, 'BLUE': 4,
        'violet': 2, 'GRAY': 3, 'White': 6}
&gt;&gt; sorted(d, key=lambda i: (d[i], i.lower()))
['BLACK', 'brown', 'RED', 'violet', 'GRAY', 'BLUE', 'orange', 'green', 'White', 'YELLOW']
</code></pre>
<p>Note: this assumes that everything should be lowercase, as python sorts uppercase words before lowercase words.</p>
<p>Also I renamed your variable to <code>d</code> because <code>dict</code> is a builtin.</p>
<p>To breakdown what’s happening:</p>
<p><code>sorted</code> on a dictionary returns the keys sorted by a function <code>key</code> supplied (default is direct comparison of the keys)</p>
<pre><code>&gt;&gt;&gt; sorted(d)
['BLACK', 'BLUE', 'GRAY', 'RED', 'White', 'YELLOW', 'brown', 'green', 'orange', 'violet']
</code></pre>
<p>To sort by value, use <code>dict.get</code>:</p>
<pre><code>&gt;&gt;&gt; sorted(d, key=d.get)
['BLACK', 'brown', 'RED', 'violet', 'GRAY', 'orange', 'BLUE', 'green', 'White', 'YELLOW']
</code></pre>
<p>Then we have to sort by the key in case of a tie. Because python compares its tuples one-by-one, we can construct a tuple of <code>(value, key)</code> and it will compare the items, then if they’re the same it will compare the items.</p>
<pre><code>&gt;&gt;&gt; (4, "blue") &lt; (4, "orange")
True
&gt;&gt;&gt; (4, "blue") &lt; (3, "orange")
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>&gt;&gt;&gt; d = {'BLUE': 4, 'brown': 1, 'BLACK': 0, 'YELLOW': 7, 'violet': 2, 'orange': 4, 'green': 5, 'White': 6, 'GRAY': 3, 'RED': 2}
&gt;&gt;&gt; t = (zip(d.values(), d.keys()))
&gt;&gt;&gt; sorted(t)
[(0, 'BLACK'), (1, 'brown'), (2, 'RED'), (2, 'violet'), (3, 'GRAY'), (4, 'BLUE'), (4, 'orange'), (5, 'green'), (6, 'White'), (7, 'YELLOW')]
</code></pre>
</div>
<span class="comment-copy">looks like the result is wrong, 4 shouldn't appear before 1 if I didn't misread</span>
<span class="comment-copy">Oh whoops I sorted it backwards</span>
<span class="comment-copy">@rassar You only need to sort the words that have the same value by alphabet</span>
<span class="comment-copy">I need to return it as a sorted dictionary with the words as keys en their correspondent value as value</span>
