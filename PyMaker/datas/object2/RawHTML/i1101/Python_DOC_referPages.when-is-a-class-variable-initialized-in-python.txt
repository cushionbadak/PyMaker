<div class="post-text" itemprop="text">
<p>Consider the following Python 3 code:</p>
<pre><code>class A:
    b = LongRunningFunctionWithSideEffects()
</code></pre>
<p>When will <code>LongRunningFunctionWithSideEffects()</code> be called? At the moment the module is imported? Or at the moment the class is first used in some way?</p>
</div>
<div class="post-text" itemprop="text">
<p>At the moment the module is imported</p>
<p><code>test.py</code>:</p>
<pre><code>def x():
    print('x')

class A:
    x = x()
</code></pre>
<p>then</p>
<pre><code>Python 3.6.7 (default, Oct 22 2018, 11:32:17) 
[GCC 8.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code inside a class runs when the <code>class</code> statement is encountered - ie. during the import itself.</p>
<p>This is because, unlike in Java or C# class definitions, Python <code>class</code> statements are actually executable code.</p>
<pre><code>class A:
  print("I'm running!") # yup, code outside a method or field assignment!
  b = print("Me too!")

print("Wait for me!")
</code></pre>
<p>The result is neatly in order of execution:</p>
<pre class="lang-none prettyprint-override"><code>I'm running!
Me too!
Wait for me!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is done at the time of import. These are called static variables and are defined at the class level. These variables are created 1 per class and NOT 1 per object. They are part of loading the class which happens at the time of import. </p>
<p>Following is an example:</p>
<p>classA.py</p>
<pre><code>class A:
    print("Printing before Static Variable Creation")
    class_var = 1

    def __init__(self):
        instance_var = 2
</code></pre>
<p>main.py</p>
<pre><code>from classA import A
</code></pre>
<p>Printing before Static Variable Creation</p>
<pre><code>print('Printing Class Variable Value : ',A.class_var)
</code></pre>
<p>Printing Class Variable Value :  1</p>
<pre><code>print(A.__dict__)
</code></pre>
<p>{'<strong>module</strong>': 'classA',
              <strong><em>'class_var': 1,</em></strong>
              '<strong>init</strong>': function classA.A.<strong>init</strong>(self),
              '<strong>dict</strong>': attribute '<strong>dict</strong>' of 'A' objects,
              '<strong>weakref</strong>': attribute '<strong>weakref</strong>' of 'A' objects,
              '<strong>doc</strong>': None}</p>
</div>
<span class="comment-copy">I highly suggest reading throught the <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Python class documentation</a>. The class-based OOP of Python is similar but different enough from C++ for there to be many areas where things are not working as you think they <i>should</i>.</span>
<span class="comment-copy">I beleive it is the same in Java as well. Static variables initialized at the time of class loader.</span>
