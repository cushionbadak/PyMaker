<div class="post-text" itemprop="text">
<p>Consider the following C functions:</p>
<pre><code>void AssignPointer(char **p) {
    *p = "Test1";
}

char* Return() {
    return "Test2";
}
</code></pre>
<p>Now consider the following code in Python:</p>
<pre><code>import ctypes

lib = CDLL('LibraryPathHere')

lib.AssignPointer.restype = None
lib.AssignPointer.argtypes = (ctypes.POINTER(ctypes.c_char_p),)

lib.Return.restype = ctypes.c_char_p
lib.Return.argtypes = None

def to_python_string(c_str : ctypes.c_char_p) -&gt; str:
    return c_str.value.decode('ascii')
</code></pre>
<p>Now the following works:</p>
<pre><code>c_str = ctypes.c_char_p()
lib.AssignPointer(ctypes.byref(c_str))
print(to_python_string(c_str))
</code></pre>
<p>However the following gives <code>AttributeError: 'bytes' object has no attribute 'value'</code> :</p>
<pre><code>c_str = lib.Return()
print(to_python_string(c_str))
</code></pre>
<p>In the first case the debugger shows <code>c_str</code> as <code>c_char_p(ADDRESS_HERE)</code>. In the second case the debugger shows <code>c_str</code> as <code>b'Test2'</code>.</p>
<p>So is this a bug in Python/ctypes or am I doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>ctypes <a href="https://docs.python.org/3/library/ctypes.html#ctypes-fundamental-data-types-2" rel="nofollow noreferrer">automatically converts</a> <code>c_char_p</code> return values to bytes objects.</p>
<blockquote>
<p>Fundamental data types, when returned as foreign function call results, or, for example, by retrieving structure field members or array items, are transparently converted to native Python types. In other words, if a foreign function has a restype of c_char_p, you will always receive a Python bytes object, <em>not</em> a c_char_p instance.</p>
</blockquote>
<p>If you want the actual pointer value, use <code>ctypes.POINTER(ctypes.c_char)</code> as the <code>restype</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Finally here is a workaround for this problem:</p>
<p>To avoid automatic conversions of <code>c_char_p</code> to <code>bytes</code>, set C function's <code>restype</code> as <code>c_void_p</code>:</p>
<pre><code>lib.Return.restype = ctypes.c_void_p
</code></pre>
<p>Then <code>cast</code> to <code>c_char_p</code> before passing to a function that expects <code>c_char_p</code> as the common case:</p>
<pre><code>void_ptr = lib.Return()
c_str = ctypes.cast(void_ptr, ctypes.c_char_p)
print(to_python_string(c_str))
</code></pre>
</div>
<span class="comment-copy">If this functions as designed, could you elaborate on how to workaround this?</span>
<span class="comment-copy">@SergeRogatch: Answer expanded.</span>
<span class="comment-copy">If I change <code>restype</code> to <code>ctypes.POINTER(ctypes.c_char_p)</code>, I get error:  <code>AttributeError: 'LP_c_char_p' object has no attribute 'value'</code></span>
<span class="comment-copy">@SergeRogatch: First, it's <code>ctypes.POINTER(ctypes.c_char)</code>, not <code>ctypes.POINTER(ctypes.c_char_p)</code>. Second, you're going to need more adjustment than just swapping out the restype. <code>c_char_p</code> is a "pseudo-primitive" type that doesn't behave like normal pointers. You're going to have to do pointer handling yourself, or cast back to c_char_p.</span>
