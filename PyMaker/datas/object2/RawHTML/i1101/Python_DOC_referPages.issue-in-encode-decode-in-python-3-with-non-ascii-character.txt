<div class="post-text" itemprop="text">
<p>I am trying to use python3 unicode_escape to escape \n in my string, but the challenge is there are non-ascii characters present in the whole string, and if I use utf8 to encode and then decode the bytes using unicode_escape then the special character gets garbled. Is there any way to have the \n escaped with a new line without garbling the special character?</p>
<pre><code>s = "hello\\nworld└--"
print(s.encode('utf8').decode('unicode_escape'))

Expected Result:
hello
world└--

Actual Result:
hello
worldâ--
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As user wowcha observes, the <code>unicode-escape</code> codec assumes a <code>latin-1</code> encoding, but your string contains a character that is not encodable as <code>latin-1</code>.</p>
<pre><code>&gt;&gt;&gt; s = "hello\\nworld└--"
&gt;&gt;&gt; s.encode('latin-1')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'latin-1' codec can't encode character '\u2514' in position 12: ordinal not in range(256)
</code></pre>
<p>Encoding the string as <code>utf-8</code> gets around the encoding problem, but results in <a href="https://en.wikipedia.org/wiki/Mojibake" rel="nofollow noreferrer">mojibake</a> when decoding from <code>unicode-escape</code></p>
<p>The solution is to use the <a href="https://docs.python.org/3/library/codecs.html#error-handlers" rel="nofollow noreferrer">backslashreplace</a> error handler when encoding.  This will convert the problem character to an escape sequence that can be encoded as <code>latin-1</code> and does not get mangled when decoded from <code>unicode-escape</code>.</p>
<pre><code>&gt;&gt;&gt; s.encode('latin-1', errors='backslashreplace')
b'hello\\nworld\\u2514--'

&gt;&gt;&gt; s.encode('latin-1', errors='backslashreplace').decode('unicode-escape')
'hello\nworld└--'

&gt;&gt;&gt; print(s.encode('latin-1', errors='backslashreplace').decode('unicode-escape'))
hello
world└--
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try removing the second escape backslash and decode using utf8:</p>
<pre><code>&gt;&gt;&gt; s = "hello\nworld└--"
&gt;&gt;&gt; print(s.encode('utf8').decode('utf8'))
hello
world└--
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe the problem you are having is that <code>unicode_escape</code> was deprecated in Python 3.3 and it seems to be assuming your code is 'latin-1' due to that being the original codec used within the <code>unicode_excape</code> function...</p>
<p>Looking at <a href="https://docs.python.org/3/library/codecs.html" rel="nofollow noreferrer">the python documentation for codecs</a> we see that <code>Encoding suitable as the contents of a Unicode literal in ASCII-encoded Python source code, except that quotes are not escaped. Decodes from Latin-1 source code. Beware that Python source code actually uses UTF-8 by default.</code> which tells us that <code>unicode_escape</code> assumes that your text is ISO Latin-1.
So if we run your code with latin1 encoding we get this error:</p>
<pre><code>s.encode('latin1')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'latin-1' codec can't encode character '\u2514' in position 12: ordinal not in range(256)
</code></pre>
<p>And the unicode character error is <code>'\u2514'</code> which when converted is <code>'└'</code> the simplest way to put it is the character cannot be used within a Latin-1 string hence why you get a different character.</p>
<p>I also think it's right to point out that within your string you have <code>'\\n'</code> and not just <code>'\n'</code> the extra backslash means this symbol is not carriage return but instead it is ignored the backward slash indicates to ignore the <code>'\n'</code>. Perhaps try not using the <code>\\n</code>... </p>
</div>
