<div class="post-text" itemprop="text">
<p>I'm trying to call the same method for a different variable as shown in the code.
In the example, I'm trying to get the double of a value by sending the name of the variable.</p>
<p>I've tried different approaches and none seems to work:</p>
<pre><code>Class Number:
    def __init__(self, a, b):
        self.num = a
        self.float = b
    def teste(self, val):
        print(2*self.val)

l=Number(3,9)
l.teste(a)
l.teste(b)
</code></pre>
<p>I expect the output to be 6 and 18</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do it like this. When you call <code>l.teste(a)</code>, the name <code>a</code> refers to nothing, you'll get an error.</p>
<p>Even the <code>a</code> and <code>b</code> you used as parameters in <code>__init__</code> stop existing as soon as <code>__init__</code> exits, and can only be accessed from inside <code>__init__</code>.</p>
<p>What exists, though, is <code>self.num</code> and <code>self.float</code>. You can access them dynamically using <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">getattr</a>, like this (note that we pass the name of the attribute as a string to getattr):</p>
<pre><code>class Number:
    def __init__(self, a, b):
        self.num = a
        self.float = b
    def teste(self, varname):
        print(2*getattr(self, varname))

l=Number(3,9)
l.teste('num')
# 6
l.teste('float')
# 18
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems in the code</p>
<ul>
<li>it's <code>class</code>, not <code>Class</code></li>
<li>as defined <code>num</code> and <code>float</code> are instance variables, not class variables</li>
<li>last three lines are not part of the class definition, so they need to be unindented</li>
<li><code>float</code> is poor choice for property name (i.e. it imply that type is float, yet this is not enforced)</li>
<li><code>val</code> is not property of the class, but argument to <code>teste()</code> method. Thus you don't need <code>self.</code> when reference it.</li>
</ul>
<p>Although I am not sure what the purpose is, you can achieve  what you want with</p>
<pre><code>class Number:
    def __init__(self, a, b):
        self.num = a
        self.float = b

    def teste(self, val):
        print(2 * getattr(self, val))

    def testb(self, val):
        print(2 * val)

foo = Number(3, 9)
foo.teste('num')
foo.teste('float')
foo.testb(foo.num)
foo.testb(foo.float)
# but you can do also for any number
foo.testb(10)
</code></pre>
<p>Note the difference between <code>teste()</code> and <code>testb()</code></p>
</div>
<span class="comment-copy">Yes, i know it doesn't but i want to access the object i just created and multiply the objects variable by 2.</span>
<span class="comment-copy">Thank you very much, what i was looking for was the getattr() function.</span>
<span class="comment-copy">Thank you very much, what i was looking for was the getattr() function.</span>
<span class="comment-copy">@PatrickArtner, thanks for fixing the indentation - Somehow I didn't notice my code had problem with the indentation when I paste it.</span>
