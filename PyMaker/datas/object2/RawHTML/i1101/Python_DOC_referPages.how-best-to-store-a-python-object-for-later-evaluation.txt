<div class="post-text" itemprop="text">
<p>I have written the following python code using a scipy function. The particular form of function <code>f</code> is irrelevant. </p>
<pre><code>import numpy as np
from scipy.interpolate.interpnd import LinearNDInterpolator    

def f(x, y):
    s = np.hypot(x, y)
    phi = np.arctan2(y, x)
    tau = s + s*(1-s)/5 * np.sin(6*phi)
    return 5*(1-tau) + tau

npts = 200
px, py = np.random.choice(x, npts), np.random.choice(y, npts)
ip = LinearNDInterpolator((px, py), f(px,py))
</code></pre>
<p>What kind of object is <code>ip</code>? I would like to store it in a file and evaluate it later as for example below. </p>
<pre><code>x = np.linspace(-1,1,100)
y = np.linspace(-1,1,100)
X, Y = np.meshgrid(x,y)
Ti = ip((X, Y))
</code></pre>
<p>What is a good way to store the object <code>ip</code> in a file? </p>
</div>
<div class="post-text" itemprop="text">
<p>Your object <code>ip</code> is an instance of the class <code>scipy.interpolate.interpnd.LinearNDInterpolator</code>. If you want to store the complete object to file, then you could use the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a> module from python's standard library.</p>
<p>Pickling an object and writing it to a (binary) file is quite straightforward:</p>
<pre><code>import pickle
with open('data.pickle', 'wb') as f:
    # Write object `ip` to file
    pickle.dump(ip, f, pickle.HIGHEST_PROTOCOL)
</code></pre>
<p>Later loading the object again from file is equally straightforward:</p>
<pre><code>with open('data.pickle', 'rb') as f:
    # Read out object `ip` from file
    ip = pickle.load(f)
</code></pre>
<p>Pickling does have a few disadvantages that are worth mentioning. Firstly, the pickle file that you write is not human-readable. Secondly, pickle files received from an untrusted source should never be loaded because of security risks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that you know <code>f</code> and have access to <code>scipy</code>, I would posit that the simplest thing to do would be to just store <code>x</code> and <code>y</code>. This would avoid many of the pitfalls of a binary dump and allow you to store in a text format.</p>
<p>To store, you could use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html" rel="nofollow noreferrer"><code>np.savetxt</code></a> to store the data:</p>
<pre><code>np.savetxt('mystash.txt', np.stack((px, py), axis=1))
</code></pre>
<p>You can then have a simple loading procedure based on <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html" rel="nofollow noreferrer"><code>np.loadtxt</code></a>:</p>
<pre><code>def load_interp(fname):
    px, py = np.loadtxt(fname, unpack=True)
    return LinearNDInterpolator((px, py), f(px,py))
</code></pre>
<p>This solution produces a very human readable text file with two columns of data, corresponding to the matching entries of <code>px</code> and <code>py</code>. The file is completely portable and editable. It is language independent, all at the cost of one extra line in the loader.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can consider <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> for Python specific object serialization. Otherwise, you have to consider a <code>json</code> or <code>xml</code> format. Visit the link to understand more</p>
</div>
<span class="comment-copy">Thank you. If I have an array or a dictionary of these object, I can pickle them just the same. Is that right?</span>
<span class="comment-copy">Yes, that should be possible (see also <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">here</a>).</span>
<span class="comment-copy">Originally I thought the object <code>ip</code> condensed all the data ((px, py), f(px,py)). But it seems it carries them around. So your method may be good. Does it work well when I have an array or a dictionary of many <code>ip</code>'s?</span>
<span class="comment-copy">@Hans. If you always have the same number of samples, concatenate horizontally with more columns. Otherwise, I'd record the number of samples in each interpolator in a header line and concatenate vertically.</span>
<span class="comment-copy">Could you please elaborate on the "many of the pitfalls of a binary dump"?</span>
<span class="comment-copy">@Hans. It's mostly an issue of portability. Binary files are sensitive to endianness, internal representations, magic numbers, etc. In other words, they are platform, language, version, etc dependent. Pickling is fairly robust, but you have to be careful, and it's not language agnostic. A human readable text file, on the other hand, is very difficult to screw up, especially if it only has ASCII characters.</span>
<span class="comment-copy">@Hans. None of these considerations are likely to be a problem if you're just temporarily dumping to local disk for use within the same process.</span>
