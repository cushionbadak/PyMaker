<div class="post-text" itemprop="text">
<p>I have made a generator function which search a csv file using a keyword and I want to print the results if there is something. How can I do that without using the print(next(gen_results)) over and over again?</p>
<p>I have tried a try-catch statement for the stopIteration, when there is no matching of keyword with a contact but I want a more concise solution.</p>
<pre><code>def search(keyword, filename):
    f = open(filename, 'r')
    for line in f:
        if keyword in line:
            yield line
    f.close()

the_generator = search('Python', 'contacts.csv')
print(next(the_generator))
print(next(the_generator))  

contacts.csv
Name01, 89888
Name02, 8885445
Name03, 54555
Name04, 55544584
Name05, 55855
Python, 100
BigPi, 444
Python, 101
</code></pre>
<p>I expect the output to be a statement as 'Nothing Found',if there are no contacts with the keyword. In case there are contacts with the keyword, it outputs all the listings.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several methods to consume the generator - unsing <code>next()</code> only consumes (the next) value of it.</p>
<p>Generate file:</p>
<pre><code>def gen_file():
    with open("contacts.csv","w") as f:
        f.write("""Name01, 89888
Name02, 8885445
Name03, 54555
Name04, 55544584
Name05, 55855
Python, 100
BigPi, 444
Python, 101
""")
</code></pre>
<p>Use it:</p>
<pre><code>gen_file()   

def search(keyword, filename="contacts.csv"):
    """Changed to use .. with open() as f: ... style syntax."""
    with open(filename, 'r') as f:
        for line in f:
            if keyword in line:
                yield line 


# consume all of it into a list - you can reuse it
print("-"*40)
the_generator = search('Python', 'contacts.csv')
contacts = list(the_generator)
print(*contacts, sep="")


print("-"*40)
# decompose the generator directly for printing
the_generator = search('Python', 'contacts.csv')
print(*the_generator, sep="" ) 


print("-"*40)
# use a for loop over the generated results
the_generator = search('Python', 'contacts.csv')
for li in the_generator:
    print(li, end="") # remove end=\n


print("-"*40)
# using str.join to create the output
the_generator = search('Python', 'contacts.csv')
print("".join(the_generator))


print("-"*40)
# loop endlessly until StopIteration is raised
try:
    while True:
        print(next(the_generator), end="")
except StopIteration:
    pass
</code></pre>
<p>etc. </p>
<p>Output (several times):</p>
<pre><code>----------------------------------------
Python, 100
Python, 101
</code></pre>
<p>The "best" one if you do not reuse the generated values is probably <code>print(*the_generator,sep="")</code> or the more explicit:</p>
<pre><code># use a for loop over the generated results
the_generator = search('Python', 'contacts.csv')
for li in the_generator:
    print(li,end="") # remove end=\n
</code></pre>
<p>You may also want to read here: <a href="https://stackoverflow.com/questions/34075575/using-yield-from-with-conditional-in-python">Using yield from with conditional in python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Please try this </p>
<pre><code>def search(keyword, filename):
    f = open(filename, 'r')
    for line in f:
        if keyword in line:
            yield line
        else:
            yield 'Nothing Found'
    f.close()

the_generator = search('Python', 'contacts.csv')
for g in the_generator:
    print(g)
</code></pre>
<p>'the_generator' is an iterate object and 'for' loop needs an iterate object to run. The output of the program will :</p>
<pre><code>Nothing Found
Nothing Found
Nothing Found
Nothing Found
Nothing Found
Python, 100 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def search(keyword, filename):
    f = open(filename, 'r')
    for line in f:
        if keyword in line:
            yield line
    f.close()

the_generator = search('Python', 'contacts.csv')
my_list=list(the_generator)
if not my_list:
    print("Not Found")
for item in my_list:
    print(item.strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could put the 'not found' test in the generator itself:</p>
<pre><code>def search(keyword, lines):
    cnt = 0
    for line in lines:
        if keyword in line:
            cnt += 1
            yield line
    if cnt==0:
        yield "NOT FOUND"

In [166]: txt = """Name01, 89888
     ...: Name02, 8885445
     ...: Name03, 54555
     ...: Name04, 55544584
     ...: Name05, 55855
     ...: Python, 100
     ...: BigPi, 444
     ...: Python, 101
     ...: """.splitlines()
In [167]: for x in search("Python",txt):print(x)
Python, 100
Python, 101
In [168]: for x in search("Foobar",txt):print(x)
NOT FOUND
</code></pre>
<p>Otherwise I think the simplest is to <code>list</code> the generator, and check for an empty list.  By itself the generator mechanism does not count the number of <code>yields</code>.</p>
</div>
<span class="comment-copy">for loops? list decomp? <code>print( *the_generator,sep="\n")</code></span>
<span class="comment-copy">@DavisHerring  in that case .. more of a generator decomposition then list decomposition. See <a href="https://stackoverflow.com/questions/6319612/python-decompose-a-list" title="python decompose a list">stackoverflow.com/questions/6319612/python-decompose-a-list</a> - definitivly not a list comprehension.</span>
<span class="comment-copy">@PatrickArtner: OK—that appears to be called <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">“unpacking”</a>, but I might say “expanding” to avoid the confusion with <code>a,b=f()</code> (which I sometimes in turn call “decomposition”).</span>
<span class="comment-copy">This produces “Nothing Found” per line, not per file.</span>
<span class="comment-copy">@DavisHerring I thought it would be a simple method to save it to a list and check if it is empty to print "Nothing Found"  once if the list was empty</span>
<span class="comment-copy">Sure, now it is.  (I had commented on the original version.)</span>
<span class="comment-copy">@DavisHerring Sorry.  I answered what i got and was trying  out the rest  in my system.</span>
