<div class="post-text" itemprop="text">
<p>I have a dictionary of dictionaries in python like this example:</p>
<p>small example:</p>
<pre><code>d = {1: {'A': 11472, 'C': 8405, 'T': 11428, 'G': 6613}, 
     2: {'A': 11678, 'C': 9388, 'T': 10262, 'G': 6590}, 
     3: {'A': 2945, 'C': 25843, 'T': 6980, 'G': 2150}}
</code></pre>
<p>every sub-dictionary has items in which keys are one of these letters: <code>A, C, T or G</code>. and the values are absolute numbers. for every item I want to get the <code>percentage</code> of every letter based on its value. and at the end I want to make a new dictionary like the input example in which instead of absolute value there would be percentage. the expected output for the small example would be like this:</p>
<pre><code>result = {1: {'A': 30.34, 'C': 22.16, 'T': 30, 'G': 17.5}, 
          2: {'A': 30.78, 'C': 24.76, 'T': 27.06, 'G': 17.4}, 
          3: {'A': 7.78, 'C': 68.15, 'T': 18.4, 'G': 5.67}}
</code></pre>
<p>I am trying to do that in python using the following code:</p>
<pre><code>values = dict.values()
freq = {}
for i in d.keys()
    freq[i] = d.values(i)/d.values
</code></pre>
<p>but it does not return what i expect. do you know how to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>pandas</code> solution</p>
<pre><code>import pandas as pd                                                                                                
df = pd.DataFrame(d)                                                                 
result = (100*(df/df.sum())).round(2).to_dict()
</code></pre>
<p>gives you</p>
<pre><code>&gt;&gt;&gt; print(result)                                                                                                      
{1: {'A': 30.25, 'C': 22.17, 'G': 17.44, 'T': 30.14},
 2: {'A': 30.8, 'C': 24.76, 'G': 17.38, 'T': 27.06},
 3: {'A': 7.77, 'C': 68.15, 'G': 5.67, 'T': 18.41}}
</code></pre>
<p>(You can omit <code>round(2)</code> if you wish to perform no rounding.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Try building a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> and adding the percentages as you iterate the original dictionary:</p>
<pre><code>from collections import defaultdict
from pprint import pprint

d = {
    1: {"A": 11472, "C": 8405, "T": 11428, "G": 6613},
    2: {"A": 11678, "C": 9388, "T": 10262, "G": 6590},
    3: {"A": 2945, "C": 25843, "T": 6980, "G": 2150},
}

percentages = defaultdict(dict)
for k1, v1 in d.items():
    total = sum(v1.values())
    for k2, v2 in v1.items():
        percentages[k1][k2] = round(v2 / total * 100, 2)

pprint(percentages)
</code></pre>
<p>Which gives:</p>
<pre><code>defaultdict(&lt;class 'dict'&gt;,
            {1: {'A': 30.25, 'C': 22.17, 'G': 17.44, 'T': 30.14},
             2: {'A': 30.8, 'C': 24.76, 'G': 17.38, 'T': 27.06},
             3: {'A': 7.77, 'C': 68.15, 'G': 5.67, 'T': 18.41}})
</code></pre>
<p><strong>Note:</strong> <code>defaultdict()</code> is a subclass of <code>dict</code>, so you can treat it the same as a normal dictionary. If you really want to, you can wrap <code>dict(percentages)</code> to convert it to a regular dictionary. </p>
<p>Another way, slightly slower, is to use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault()</code></a>:</p>
<pre><code>percentages = {}
for k1, v1 in d.items():
    total = sum(v1.values())
    for k2, v2 in v1.items():
        percentages.setdefault(k1, {})[k2] = round(v2 / total * 100, 2)

pprint(percentages)
# {1: {'A': 30.25, 'C': 22.17, 'G': 17.44, 'T': 30.14},
#  2: {'A': 30.8, 'C': 24.76, 'G': 17.38, 'T': 27.06},
#  3: {'A': 7.77, 'C': 68.15, 'G': 5.67, 'T': 18.41}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are going to need to nest in some way to go through your dictionary. Here's with dictionary comprehension:</p>
<pre><code>totals = {sub: sum(d[sub].values()) for sub in d}
result = {sub: {base: d[sub][base] / totals[sub] * 100 for base in d[sub]} for sub in d}
</code></pre>
<p>with output:</p>
<pre><code>{
    1: {'A': 30.254760272166255, 'C': 22.166253494382616, 'T': 30.13872039664539, 'G': 17.44026583680574},
    2: {'A': 30.79803787119574, 'C': 24.758689804314574, 'T': 27.063663695342584, 'G': 17.379608629147107},
    3: {'A': 7.76675985020307, 'C': 68.15496597921832, 'T': 18.408143889445647, 'G': 5.6701302811329715}
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a nested dictionary comprehension:</p>
<pre><code>{ k: { kk: round(100*vv/sum(v.values()),2) for kk, vv in v.items() } for k, v in d.items() }
#=&gt; {1: {'A': 30.25, 'C': 22.17, 'T': 30.14, 'G': 17.44}, 2: {'A': 30.8, 'C': 24.76, 'T': 27.06, 'G': 17.38}, 3: {'A': 7.77, 'C': 68.15, 'T': 18.41, 'G': 5.67}}
</code></pre>
</div>
<span class="comment-copy">This calculates the sum for each percentage, when it only needs to be calculated once for each <code>sub</code>.</span>
<span class="comment-copy">I realized that, but didn't really know how to avoid that with the comprehension. I was going to add a for loop alternative but saw your for loop post was already up.</span>
<span class="comment-copy">Actually, there is a way to do this efficiently with the dict comp. All the sums for each inner dict are the same, so you just need to store one of them and apply it in the dict comp.</span>
<span class="comment-copy">Ahh, well no more one-liner!</span>
