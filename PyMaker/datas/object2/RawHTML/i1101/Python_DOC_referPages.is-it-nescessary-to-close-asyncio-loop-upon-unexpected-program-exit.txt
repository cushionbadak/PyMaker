<div class="post-text" itemprop="text">
<p>Below you can find a snippet from my python script. </p>
<p>I have the following question:</p>
<p>Is it nescessary to close a loop explicitly like in the example below? </p>
<pre><code>import asyncio

loop = asyncio.get_event_loop()
loop.run_until_complete(my_async_task())

try:
    loop.run_forever()
except KeyboardInterrupt:
    print('Stopping...')
finally:
    loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since the program is exiting anyway, which will automatically release all its resources back to the OS, nothing is gained by the explicit call to <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.close" rel="nofollow noreferrer"><code>loop.close()</code></a> - it just makes the code a bit longer and the program slightly slower to exit.</p>
<p>Closing the event loop is necessary when the loop is created in (and run by) code that is invoked more than once, particularly if it's hidden behind a reusable class or function. Failing to close such a loop would leak its internal resources, such as the pipe set up for <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_soon_threadsafe" rel="nofollow noreferrer"><code>call_soon_threadsafe</code></a>.</p>
<p>Note that explicitly catching <code>KeyboardInterrupt</code> is only necessarily if you want to suppress the display of the stack trace normally provided by the interpreter.</p>
</div>
<span class="comment-copy">Maybe it's also useful to mention that <code>asyncio</code> does not spawn any independent (and possibly detached) processes (to my knowledge) but relies entirely on coroutines which will shut down with the program.</span>
<span class="comment-copy">@timgeb True, although I'd prefer to keep it out of the answer for brevity - it's reasonable to expect of <i>any</i> library (that doesn't document the opposite) not to interfere with just exiting the program. Note that asyncio does use threads internally, e.g. to implement portable async DNS lookups, but those will also die with the process (and <code>close()</code> doesn't really affect them anyway).</span>
