<div class="post-text" itemprop="text">
<p>Is there any tool that measures how much time spent on each line of code while executed in runtime and shows some visualization of the result to help developer get an idea of which lines are the most time consuming in execution?</p>
<p>Im intrested for such tool for python, and im working on pycharm.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a>, that;</p>
<blockquote>
<p>Measure execution time of small code snippets</p>
</blockquote>
<pre><code>import timeit
start_time = timeit.default_timer()
# the line of code you want to  measure the time for
elapsed = timeit.default_timer() - start_time
</code></pre>
<p>i.e.</p>
<pre><code>import timeit
start_time = timeit.default_timer()
a = 5 + 2 / 1
b = a + 2
elapsed = timeit.default_timer() - start_time
print"Time taken: ", elapsed
</code></pre>
<p>OUTPUT:</p>
<p><a href="https://i.stack.imgur.com/omBco.png" rel="nofollow noreferrer"><img alt="timetaken" src="https://i.stack.imgur.com/omBco.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Would <a href="https://github.com/uber/pyflame" rel="nofollow noreferrer">PyFlame</a> from Uber, suit your purposes? </p>
<blockquote>
<p>Pyflame is a high performance profiling tool that generates flame graphs for Python. Pyflame is implemented in C++, and uses the Linux ptrace(2) system call to collect profiling information. It can take snapshots of the Python call stack without explicit instrumentation, meaning you can profile a program without modifying its source code. Pyflame is capable of profiling embedded Python interpreters like uWSGI. It fully supports profiling multi-threaded Python programs.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I think what you asked for is a way to print the elapsed time for each line, which is extremely inefficient and difficult (and unnecessary). You do not have to calculate the time elapsed for lines like </p>
<pre><code>foo = 1
</code></pre>
<p>That being said, you can put a timer at where you doubt your code is being slow. A useful module available on <code>pip</code> is <a href="https://pypi.org/project/pytictoc/" rel="nofollow noreferrer"><code>pytictoc</code></a>.</p>
<blockquote>
<p>pytictoc contains a class TicToc which replicates the functionality of MATLAB’s tic and toc for easily timing sections of code. Under the hood, pytictoc uses the default_timer function from Python’s timeit module.</p>
</blockquote>
<pre><code>from pytictoc import TicToc
t.tic() #Start timer
# some of your codes here, e.g.
for ii in range(1000):
    pass
t.toc() #Time elapsed since t.tic()
</code></pre>
<blockquote>
<p>Elapsed time is 1.35742 seconds.</p>
</blockquote>
</div>
<span class="comment-copy">You are looking for a <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">profiler</a>.</span>
<span class="comment-copy">@Ofek Rn, you may consider accepting an answer that helped, cheers!</span>
