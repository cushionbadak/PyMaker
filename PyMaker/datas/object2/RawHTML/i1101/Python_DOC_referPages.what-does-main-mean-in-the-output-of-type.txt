<div class="post-text" itemprop="text">
<p>If I create a class as below, and check the type of the object, I get the following output. </p>
<p>My question is what does <code>__main__</code> mean here?</p>
<pre><code>class Student(object):
    pass

&gt;&gt;&gt;a = Student()
&gt;&gt;&gt;type(a)
&lt;class '__main__.Student'&gt;
</code></pre>
<p>There is another question, if I check the type of the Student class, I get the following output. </p>
<pre><code>&gt;&gt;&gt;type(Student)
&lt;class 'type'&gt;
</code></pre>
<p>What does <code>&lt;class 'type'&gt;</code> mean here?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My question is what does <code>'__main__'</code> mean here?</p>
</blockquote>
<p><code>__main__</code> there is the module in which <code>Student</code> is defined; the module corresponding to the file that you start with the Python interpreter is automatically named <code>__main__</code>. You may remember it from the usual idiom</p>
<pre><code>if __name__ == '__main__':
    ...
</code></pre>
<p>that checks if the name of the current module is <code>__main__</code> to see if this is the script that has been run (as opposed to it being imported as a module).</p>
<p>If you defined <code>Student</code> inside another file, and imported it from your main module, it would have said the name of such module instead. For example:</p>
<p><strong><em>run.py</em></strong></p>
<pre><code>import student

class Student(object):
    pass

a = student.Student()
print(type(a))

b = Student()
print(type(b))
</code></pre>
<p><strong><em>student.py</em></strong></p>
<pre><code>class Student(object):
    pass
</code></pre>
<p>if you run <code>python run.py</code> you'll get </p>
<pre><code>&lt;class 'student.Student'&gt;
&lt;class '__main__.Student'&gt;
</code></pre>
<p>where you'll see confirmation that the name before the dot is indeed the module where the given type is defined (useful, as in this case, to disambiguate and to get at a glance where some given type is defined).</p>
<hr/>
<blockquote>
<p>What does <code>&lt;class 'type'&gt;</code> mean here?</p>
</blockquote>
<p>It means that the <code>Student</code> <em>class</em>, as all classes defined with <code>class</code>, is in turn <em>an instance</em> of the builtin type <code>type</code>. It may get a little circular, but classes themselves are instances of metaclasses; for all the gory detail about how this works under the hood, you may have a look <a href="https://stackoverflow.com/q/100003/214671">at this question</a>, but it isn't light reading.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__main__</code> in <code>'__main__.Student'</code> is saying that the Student object (or class) was defined in the scope in which the top level code is being executed (the <code>__main__</code> scope). If the <code>Student</code> class was defined in another module, call it <code>imported_module</code>, and imported into the  main scope, then the <code>print(type(a))</code> would output <code>imported_module.Student</code>. So basically, the type of an object always refers back to the scope in which it was defined.</p>
</div>
<span class="comment-copy">Did you try <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">googling and reading documentation</a> before posting here?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">What does if __name__ == "__main__": do?</a></span>
<span class="comment-copy">I read that before. I have two questions. Please read it carefully. In addition, I'm not quite sure if _<i>main_</i> here is same as the one in the doc.</span>
