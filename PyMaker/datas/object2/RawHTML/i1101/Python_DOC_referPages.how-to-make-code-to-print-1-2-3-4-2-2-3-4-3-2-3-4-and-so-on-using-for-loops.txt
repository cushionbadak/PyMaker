<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/53421794/print-several-values-in-the-same-line-with-commas">Print several values in the same line with commas</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I need to modify this code, to replace the
number 1 with the number of the current measure. So, the first
number in each measure will always rise.</p>
<p>instead of </p>
<pre><code>1 
2 
3 
4 
1 
2 
3 
4 
1
2 
3 
4 
</code></pre>
<p>(with each number on its own line), I'd now print </p>
<pre><code>1 2 3 4 2 2 3 4 3 2 3 4
</code></pre>
<p>, and so on.</p>
<pre><code>beats_per_measure = 4
measures = 5

for measure in range(0, measures):     
    for beat in range(1, beats_per_measure + 1):
        print(beat)       
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you need something like below.</p>
<pre><code>beats_per_measure = 4
measures = 5

### loop from 1 to 5 measures ###
# remove +1 to get sequence of 4
# iterations
for measure in range(1, measures+1):

  # print the measure value in a single line
  # first at iteration of outer loop to get
  # the sequence
  print(measure, end = " ")

  ## then loop from 2 to measure
  for beat in range(2, beats_per_measure + 1):
    # print each beat
    print(beat, end = " ")   
</code></pre>
<p>Output</p>
<pre><code>1 2 3 4 2 2 3 4 3 2 3 4 4 2 3 4 5 2 3 4 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using python 3, this is the answer(tested):</p>
<pre><code>beats_per_measure = 4
measures = 5

for measure in range(1, measures+1):
    print(measure, end = ' ')
    for beat in range(2, beats_per_measure + 1):
        print(beat, end = ' ')      
</code></pre>
<p>Or if you are using python 2, use this (tested):</p>
<pre><code>beats_per_measure = 4
measures = 5

for measure in range(1, measures+1):
    print measure,  
    for beat in range(1, beats_per_measure + 1):
        print beat, 
</code></pre>
<p>More info here: <a href="https://www.quora.com/How-do-I-print-something-on-the-same-line-in-Python" rel="nofollow noreferrer">https://www.quora.com/How-do-I-print-something-on-the-same-line-in-Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this by manually printing the <em>measure</em> you are currently in - followed by the remaining beats:</p>
<pre><code>beats_per_measure = 4
measures = 5

for m in range(measures):  
    # manually print the measure you are in
    print(m+1, end=" ") # do not put a newline after the print statement

    # print the beats 0...bmp-1 == 0,1,2 - output adds 2 to each =&gt; 2,3,4
    for beat in range(beats_per_measure - 1):
        print(beat+2, end = " ") # do not put a newline after the print statement
</code></pre>
<p>Output:</p>
<pre><code>1 2 3 4 2 2 3 4 3 2 3 4 4 2 3 4 5 2 3 4
*       *       *       *       *
</code></pre>
<p>The * are manually printed, the others filled in by the <code>for</code>-loop</p>
<p>You can read more about printing in one line here: </p>
<ul>
<li><a href="https://stackoverflow.com/questions/3249524/print-in-one-line-dynamically">Print in one line dynamically</a></li>
<li><a href="https://stackoverflow.com/questions/5598181/python-multiple-prints-on-the-same-line/15410817">Python: multiple prints on the same line</a> </li>
<li><a href="https://stackoverflow.com/questions/53421794/print-several-values-in-the-same-line-with-commas">Print several values in the same line with commas</a></li>
</ul>
<p>Doku: <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#print</a></p>
<hr/>
<p>You can also create a generator that counts measures on its own (I'll mark the measure-number with * manually):</p>
<pre><code>def gimme_measure(beats_per_measure): 
    beats = list(range(2,beats_per_measure+1))

    yield gimme_measure.measure 
    gimme_measure.measure += 1
    yield from beats 

gimme_measure.measure = 1  # defines the starting measure


# print 2*10 measures
for _ in range(10):
    print(*gimme_measure(4), end = " ") # the * decomposes the values from the generator
for _ in range(10): # continues the beat measuring
    print(*gimme_measure(4), end = " ") # the * decomposes the values from the generator
</code></pre>
<p>Output: </p>
<pre><code>1 2 3 4 2 2 3 4 3 2 3 4 4 2 3 4 5 2 3 4 6 2 3 4 7 2 3 4 8 2 3 4 9 2 3 4 10 2 3 4 11 2 3 4 12 2 3 4 13 2 3 4 14 2 3 4 15 2 3 4 16 2 3 4 17 2 3 4 18 2 3 4 19 2 3 4 20 2 3 4 
*       *       *       *       *       *       *       *       *       **       **       **       **       **       **       **       **       **       **       **
</code></pre>
<p>The generator <code>gimme_measure</code> has it's own measure counter which is initialized to 1 and incremented each time you generate a new measure using the generator - if you do not reset the <code>gimme_measure.measure</code> to some other number it keeps counting upwards any time you print another generated measure.</p>
<p>You can even chain different bpm together:</p>
<pre><code># piece with 2 measures of 4 beats, 2 measures of 8 beats, 2 measures of 3 beats
for _ in range(2):
    print(*gimme_measure(4), end = " ")  

for _ in range(2): # continues the beat measuring
    print(*gimme_measure(8), end = " ")  

for _ in range(2): # continues the beat measuring
    print(*gimme_measure(3), end = " ") 
</code></pre>
<p>Output:</p>
<pre><code>1 2 3 4 2 2 3 4 3 2 3 4 5 6 7 8 4 2 3 4 5 6 7 8 5 2 3 6 2 3
*       *       *               *               *     *   
</code></pre>
</div>
