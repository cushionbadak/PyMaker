<div class="post-text" itemprop="text">
<p>I have a variable f. How can I determine its type? Here is my code, typed into a python interpreter, showing that I get an error using the successful pattern of the many examples I have found with Google. (Hint: I am very new to Python.)</p>
<pre><code>&gt;&gt;&gt; i=2; type(i) is int
True
&gt;&gt;&gt; def f():
...     pass
... 
&gt;&gt;&gt; type(f)
&lt;class 'function'&gt;
&gt;&gt;&gt; type(i)
&lt;class 'int'&gt;
&gt;&gt;&gt; type(f) is function
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'function' is not defined
&gt;&gt;&gt; f=3
&gt;&gt;&gt; type(f) is int
True
</code></pre>
<p>With f a function, I tried casting the return value of type(f) to a string, with u = str(type(f)). But when I tried u.print() I got an error message. This raises another question for me. Under Unix do error messages from Python come on stderr or stdout?</p>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic way to check the type of a function is using <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> builtin.</p>
<pre><code>i = 2
type(i) is int #not recommended
isinstance(i, int) #recommended
</code></pre>
<p>Python includes a <a href="https://docs.python.org/3/library/types.html" rel="nofollow noreferrer"><code>types</code></a> module for checking functions among other things.</p>
<blockquote>
<p>It also defines names for some object types that are used by the
  standard Python interpreter, but not exposed as builtins like int or
  str are.</p>
</blockquote>
<p>So, to check if an object is a function, you can use the types module as follows</p>
<pre><code>def f():
    print("test")    
import types
type(f) is types.FunctionType #Not recommended but it does work
isinstance(f, types.FunctionType) #recommended.
</code></pre>
<p>However, note that it will print false for builtin functions. If you wish to include those as well, then check as follows</p>
<pre><code>isinstance(f, (types.FunctionType, types.BuiltinFunctionType))
</code></pre>
<p>However, use the above if you only want specifically functions. Lastly, if you only care about checking if it is one of function,callable or method, then just check if it behaves like a callable.</p>
<pre><code>callable(f)
</code></pre>
</div>
<span class="comment-copy">You already got its type, by using <code>type</code>. There's no <code>function</code> built-in variable bound to that type; the name a class knows itself by doesn't imply the existence of a variable with that name.</span>
<span class="comment-copy">Have a look here: <a href="https://stackoverflow.com/questions/402504/how-to-determine-a-python-variables-type" title="how to determine a python variables type">stackoverflow.com/questions/402504/â€¦</a></span>
<span class="comment-copy">Just in case, that you expected Python to return also the result type of the function: this is not possible in a dynamic language, since different Returns could return different type results. Possibly <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow noreferrer">function annotations</a> of Python 3 may assist you, but they are not enforced.</span>
<span class="comment-copy">one can, of course, just do <code>def f(): pass; function = type(f)</code></span>
<span class="comment-copy">a clever hack. @juanpa.arrivillaga I wanted to post a canon answer without workarounds, but that definitely works as well. (Point to note is that it behaves like <code>types.FunctionType</code> in the sense that it evaluates to false for builtins.) edit: because it is, as pointed out by Juanpa.</span>
<span class="comment-copy">It doesn't behave <i>like it</i>,  it <b>is</b> <code>types.FunctionType</code></span>
