<div class="post-text" itemprop="text">
<p>What is the best way to change ONLY the header separator to ":" while doing "to_csv" on a panda data frame?</p>
<p>For Example:</p>
<pre><code>items = [['Phone', 2000, 'Apple'], ['TV', 1500, 'LG'], ['Radio', 800, 'FM'], ['Fridge',0,'LG']]  
df = pd.DataFrame(items, columns=['Item', 'Price', 'Model'], dtype=float)  
print(df) 


     Item   Price  Model
0   Phone  2000.0  Apple
1      TV  1500.0     LG
2   Radio   800.0     FM
3  Fridge     0.0     LG
</code></pre>
<p>When I convert this to CSV, i get</p>
<pre><code>df.to_csv(index=False)
</code></pre>
<p>Output</p>
<pre><code>'Item,Price,Model\nPhone,2000.0,Apple\nTV,1500.0,LG\nRadio,800.0,FM\nFridge,0.0,LG\n'
</code></pre>
<p>Instead i want the output as:</p>
<pre><code>'Item:Price:Model\nPhone,2000.0,Apple\nTV,1500.0,LG\nRadio,800.0,FM\nFridge,0.0,LG\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't seem to support it, because the CSV writer underneath the hood treats the header like any other line.</p>
<p>The following snippet works but loses the atomicity of <code>to_csv</code>.</p>
<pre><code>In [1]: import pandas as pd

In [2]: items = [['Phone', 2000, 'Apple'], ['TV', 1500, 'LG'], ['Radio', 800, 'FM'], ['Fridge',0,'LG']]
   ...: df = pd.DataFrame(items, columns=['Item', 'Price', 'Model'], dtype=float)

In [3]: with open('out.csv', 'w') as f:
   ...:     f.write(':'.join(df.columns) + '\n')

In [4]: df.to_csv('out.csv', mode='a', header=False)

In [5]: !cat out.csv
Item:Price:Model
0,Phone,2000.0,Apple
1,TV,1500.0,LG
2,Radio,800.0,FM
3,Fridge,0.0,LG
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Different delimiters for headers versus data isn't supported by Pandas <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html" rel="nofollow noreferrer"><code>to_csv</code></a>. You can use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module from the standard library instead:</p>
<pre><code>import csv

with open('file.csv', 'w', newline='') as fout:
    writer = csv.writer(fout, delimiter=':')  # define writer object for header output
    writer.writerow(df.columns)  # writerow accepts any iterable of strings or numbers
    df.to_csv(fout, header=False, index=False)  # comma delimiter is default
</code></pre>
<p>Result:</p>
<pre><code>Item:Price:Model
Phone,2000.0,Apple
TV,1500.0,LG
Radio,800.0,FM
Fridge,0.0,LG
</code></pre>
</div>
<span class="comment-copy">may be <code>df.to_csv(sep=":", index=False)</code></span>
<span class="comment-copy">Just a note, this solution opens and closes the file twice, which isn't strictly necessary. You can do everything within a single <code>with</code> statement.</span>
<span class="comment-copy">Yep that's true, forgot <code>to_csv</code> supports that</span>
