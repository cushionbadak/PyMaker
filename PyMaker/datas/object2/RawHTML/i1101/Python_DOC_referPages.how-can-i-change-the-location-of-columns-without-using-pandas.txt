<div class="post-text" itemprop="text">
<p>I have a matrix as shown below;</p>
<pre><code>matrix="""  8 1 A A A A 8
            8 5 A A A 3 8
            7 2 A A 1 4 7
            6 1 3 A 2 5 7
            2 4 5 A 1 1 1"""
</code></pre>
<p>And here's my code block:</p>
<pre><code>lines= [i.strip().split() for i in matrix.splitlines()]
lst=[[lines[i][j] for i in range(len(lines))]for j in range(len(lines[0]))]
h=0
while h&lt;=len(lines[0]):
    for i in range(len(lines[0])-1,0,-1):
        for j in range(len(lines)-1,-1,-1):
            for k in lst:
                if k.count('A')==len(lines):
                    if lines[j][i-1]=='A':
                        lines[j][i-1]=lines[j][i]
                        lines[j][i]='A'
    h+=1
for line in lines:
    print(*(i or " " for i in line) , sep=" ")
</code></pre>
<p>If a column full of A's, I want to move that column to the most right side, but my code moves all A's to right. This is my output:</p>
<pre><code>8 1 8 A A A A
8 5 3 8 A A A
7 2 1 4 7 A A
6 1 3 2 5 7 A
2 4 5 1 1 1 A
</code></pre>
<p>I want a output something like that:</p>
<pre><code>8 1 A A A 8 A
8 5 A A 3 8 A
7 2 A 1 4 7 A
6 1 3 2 5 7 A
2 4 5 1 1 1 A 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">use <code>zip()</code></a> to transpose the matrix, sort all that are pure <code>"A"</code> to its end and reverse-transpose with <code>zip()</code> again:</p>
<pre><code>matrix="""  8 1 A A A A 8
            8 5 A A A 3 8
            7 2 A A 1 4 7
            6 1 3 A 2 5 7
            2 4 5 A 1 1 1"""

# string to list of lists of strings
m = [[x.strip() for x in line.split()] for line in matrix.split("\n")]
print(*m,sep="\n")

# transpose and sort
t_m = [list(line) for line in zip(*m)]
t_m.sort(key = lambda x: all(k=="A" for k in x))

# reverse transpose
m = [list(line) for line in zip(*t_m)]
print(*m,sep="\n")
</code></pre>
<p>Output:</p>
<pre><code># before
['8', '1', 'A', 'A', 'A', 'A', '8']
['8', '5', 'A', 'A', 'A', '3', '8']
['7', '2', 'A', 'A', '1', '4', '7']
['6', '1', '3', 'A', '2', '5', '7']
['2', '4', '5', 'A', '1', '1', '1']

# after
['8', '1', 'A', 'A', 'A', '8', 'A']
['8', '5', 'A', 'A', '3', '8', 'A']
['7', '2', 'A', '1', '4', '7', 'A']
['6', '1', '3', '2', '5', '7', 'A']
['2', '4', '5', '1', '1', '1', 'A']
</code></pre>
<p>The transposed data looks like this:</p>
<pre><code># before sorting
['8', '8', '7', '6', '2']
['1', '5', '2', '1', '4']
['A', 'A', 'A', '3', '5']
['A', 'A', 'A', 'A', 'A']  # this is the column you want to sort behind all others
['A', 'A', '1', '2', '1']
['A', '3', '4', '5', '1']
['8', '8', '7', '7', '1']

# after sort
['8', '8', '7', '6', '2']
['1', '5', '2', '1', '4']
['A', 'A', 'A', '3', '5']
['A', 'A', '1', '2', '1']
['A', '3', '4', '5', '1']
['8', '8', '7', '7', '1']
['A', 'A', 'A', 'A', 'A']  # now it is here
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sort/sorting</a> works because it is only <code>True</code> if the whole row consists of <code>'A'</code> (<code>True == 1</code>) all others are <code>False == 0</code>.</p>
<p>Sorting is <em>stable</em> so it does not change the relative orders between rows that evaluate <code>False</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way using <code>numpy</code>:</p>
<pre><code>s = np.array([x.strip() for x in matrix.split()]).reshape(5,7)
print(s)

array[['8', '1', 'A', 'A', 'A', 'A', '8'],
     ['8', '5', 'A', 'A', 'A', '3', '8'],
     ['7', '2', 'A', 'A', '1', '4', '7'],
     ['6', '1', '3', 'A', '2', '5', '7'],
     ['2', '4', '5', 'A', '1', '1', '1']]
</code></pre>
<p>You could use <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.flatnonzero.html" rel="nofollow noreferrer"><code>np.flatnonzero</code></a> to locate columns where <code>all</code> values are <code>0</code>, and swap them with the last:</p>
<pre><code>m = np.flatnonzero((s == 'A').all(axis=0))[0]
s.T[[m, s.shape[1]-1]] = s.T[[s.shape[1]-1, m]]

array([['8', '1', 'A', '8', 'A', 'A', 'A'],
       ['8', '5', 'A', '8', 'A', '3', 'A'],
       ['7', '2', 'A', '7', '1', '4', 'A'],
       ['6', '1', '3', '7', '2', '5', 'A'],
       ['2', '4', '5', '1', '1', '1', 'A']], dtype='&lt;U21')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, let's define utility function for transposing list of lists like</p>
<pre><code>def transpose(elements):
    return list(map(list, zip(*elements)))
</code></pre>
<p>then let's define sorting key by the rule: if list elements are equal to 'A', then it goes last, else keep it in its original position</p>
<pre><code>def sorting_key(indexed_row):
    return all(element == 'A' for element in indexed_row[1]), indexed_row
</code></pre>
<p>After that our solution will be</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; transpose(map(itemgetter(1), sorted(enumerate(transpose(lines)),
                                        key=sorting_key)))
</code></pre>
<p>which gives us</p>
<pre><code>[['8', '1', 'A', 'A', 'A', '8', 'A'],
 ['8', '5', 'A', 'A', '3', '8', 'A'],
 ['7', '2', 'A', '1', '4', '7', 'A'],
 ['6', '1', '3', '2', '5', '7', 'A'],
 ['2', '4', '5', '1', '1', '1', 'A']]
</code></pre>
<p>or as @PatrickArtner pointed out, <code>sorted</code> uses <a href="https://en.wikipedia.org/wiki/Timsort" rel="nofollow noreferrer"><em>Timsort</em></a>, which is <a href="https://en.wikipedia.org/wiki/Category:Stable_sorts" rel="nofollow noreferrer">stable algorithm</a>, so we don't need to handle case with leaving non-all-"A"-columns in their original places and define:</p>
<pre><code>def sorting_key(row):
    return all(element == 'A' for element in row)
</code></pre>
<p>after that we can simply write</p>
<pre><code>&gt;&gt;&gt; transpose(sorted(transpose(lines),
                     key=sorting_key))
</code></pre>
</div>
<span class="comment-copy">it will be a good idea to extract transposition into separate utility function</span>
<span class="comment-copy">@AzatIbrakov Good point - you should if you used it multiple times. It is a 1-liner though and for brevity I leave it as is.</span>
<span class="comment-copy">@PatrickArtner Your code works well with all my input files thanks a lot.</span>
<span class="comment-copy"><code>import numpy as np</code> - it's not pandas ... but it is another import ;) nice one though</span>
