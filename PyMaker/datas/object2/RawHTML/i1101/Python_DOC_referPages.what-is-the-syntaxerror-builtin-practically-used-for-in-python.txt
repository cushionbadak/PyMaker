<div class="post-text" itemprop="text">
<p>What is the point of the <code>SyntaxError</code> builtin in python? It doesn't seem to have any practical use because <code>SyntaxError</code>s are found by the python interpreter <strong>before</strong> the code is run. Example:</p>
<pre><code>try:
    &amp;@!5_+ #SyntaxError
except: pass
</code></pre>
<p>This fails with a <code>SyntaxError</code> because the <code>SyntaxError</code> is found before it can be handled. Now this works and fails silently, like intended:</p>
<pre><code>try:
    raise SyntaxError
except: pass
</code></pre>
<p>However, I have never seen a <code>function</code> or <code>class</code> or <em>anything</em> raise a <code>SyntaxError</code>. So why does this exist so easy to use and catch when the only use seems to be raising it pointlessly? Is there someplace that python raises a <code>SyntaxError</code> that it can be caught? Or does it just exits in the builtin scope just to be there?</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that <a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" rel="nofollow noreferrer">documentation</a> is self-explanatory:</p>
<blockquote>
<p>Raised when the parser encounters a syntax error. This may occur in an import statement, in a call to the built-in functions <code>exec()</code> or <code>eval()</code>, or when reading the initial script or standard input (also interactively).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>There's very rarely a use for using <code>SyntaxError</code> in your program. It's usually only used for the python interpreter when it encounters invalid syntax.</p>
<p>The only case I can think of that you would ever catch a <code>SyntaxError</code> is if you are using <code>exec</code> or <code>eval</code> on an unknown value. For example, if you were executing user input, then the input may be invalid and you would need to catch the <code>SyntaxError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easy way to attack this question is to search for how this exception gets raised in practice. I have the CPython source code already downloaded, so I did</p>
<p></p>
<pre><code>find . -type f -name "*.py" | xargs grep "raise SyntaxError"
</code></pre>
<p>We see that there is a utility script that does file conversions that raises a syntax error if it doesn't see the magic byte in the correct place. Additionally, the <code>xml</code> library uses them in parsing XPath expressions.</p>
<p>This suggests that it is meant to be used by user code that deals with parsing other things as well. A Google search for "raise SyntaxError" shows many results of this being used in this way.</p>
<p>I'm not terribly familiar with the Python internals, but I assume being able to handle an error in paring source code the same way they handle other errors makes things nicer. Plus <code>eval</code> etc. have to raise something, as the docs and the previous answer state.</p>
</div>
<span class="comment-copy">It can be used to handle items parsed using <code>ast.literal_eval</code> for example.</span>
<span class="comment-copy">So <code>import ...</code>, <code>__import__(...)</code>, <code>exec(...)</code> and <code>eval(...)</code>? Is that it?</span>
<span class="comment-copy">@EthanK you can also encounter errors with encoding such as <a href="https://stackoverflow.com/questions/10589620/syntaxerror-non-ascii-character-xa3-in-file-when-function-returns-%c2%a3">SyntaxError: Non-ASCII character ...</a></span>
<span class="comment-copy">But can you catch them?</span>
<span class="comment-copy">@EthanK i believe that you can catch any exception if it's a product of some operation/computation/process.</span>
<span class="comment-copy">Nice technical answer! Thanks for doing so much looking around!</span>
