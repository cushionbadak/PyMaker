<div class="post-text" itemprop="text">
<p>I'm writing a mathematical model in python, the model has ~20 input parameters that i'm storing in a separate file. I Have multiple cases that I would like to evaluate/modify.</p>
<p>Each case is a ".py" file that holds variables and a few simple functions. What is the bast way to import them into my main Code?</p>
<p>So far i've been using "from CaseName import *" to import all the variables and functions from the case. However this does not lend itself to allowing for looping over the cases. </p>
<p>I've looked at using importlib but some sections of my code require that the imported variables are global. Are there any other alternatives?</p>
<p>Here is a simplified example.</p>
<h2>Case1.py:</h2>
<pre><code>CaseName = "Case1"
a = 1.0
b = 1.0

def InitialConditions(x):
    return(10*x)
</code></pre>
<h2>Case2.py:</h2>
<pre><code>CaseName = "Case1"
a = 2.0
b = 2.0

def InitialConditions(x):
    return(4*x**2)
</code></pre>
<h2>MainCode.py:</h2>
<pre><code>from Case1 import *

RunCalculation(a,b)
etc....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">classes</a>:</p>
<pre><code>class Case1(object):
    def __init__(self, x):
        self.a = 1
        self.b = 1
        self.x = x

    def initial_condition(self):
        print(10 * self.x)  

# Initialize and use
case = Case1(x=3)
case.initial_condition()

# Rinse and repeat for all needed classes 
</code></pre>
<p>If you start littering your environment with globals, it's probably an indication you should be using a class. If any of your models share a significant number of attributes (input parameters) or methods (functions) then look into extending your classes with <a href="https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3" rel="nofollow noreferrer">inheritance</a>. </p>
<p>For instance, if your <code>RunCalculation</code> function is always the same, it might be more efficient to create a parent class that contains it as a method and then inherit from that to make your individual cases, like so: </p>
<pre><code>class ParentCase(object):
    def __init__(self, a, b, x):
        self.a = a
        self.b = b
        self.x = x

    def run_calculation(self):
        print(self.a + self.b + 35)

class Case1(ParentCase):
    def __init__(self, x):
        self.a = 1
        self.b = 1
        self.x = x

    def initial_condition(self):
        print(10 * self.x)

case = Case1(x=3)
case.run_calculation() #inherited method
</code></pre>
</div>
<span class="comment-copy">This is a very interesting option. Do you suggest that I then make the class a single global in my code as opposed to a set of globals? Or should I be avoiding the globals altogether and pass the class object between functions?</span>
<span class="comment-copy">Avoid globals. You can either pass the class object around or use methods. If your <code>RunCalculation</code> function is always the same I would suggest creating a parent class and using it to create child classes (e.g., the edit in my answer)</span>
<span class="comment-copy">@J.Armstrong in your case, a great reason to avoid globals is that you're naming everything <code>a</code>, <code>b</code>, etc. It's going to be hard to catch bugs if you're using the wrong <code>a</code> on accident. Instead, <code>case.a</code> is utterly unambiguous</span>
<span class="comment-copy">I've implemented a class based solution as you have described and it is so much more flexible and with the inheritance there is virtually no duplication of work. Thank you for your answer.</span>
<span class="comment-copy">@J.Armstrong Excellent! I'm so glad to hear you got a good solution working.  If you feel my post suitably <i>answered</i> your question, you can accept it (<a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work/5235#5235">more info here</a>).</span>
