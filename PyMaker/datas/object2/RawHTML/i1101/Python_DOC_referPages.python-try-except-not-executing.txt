<div class="post-text" itemprop="text">
<p>I have written a script that is supposed to automate taking a data frame with pandas and interacting with it, then putting it to another part of the network as a reference, and then it interacts with SmartSheets. It uses a very basic API and most of the functions and logic work well, but the only issue is the try except block in the end that is supposed to be scheduled out.</p>
<p>There is no error thrown, it just sits in a blank terminal; this is odd because if I stack the functions I wrote one after another, they work with no issue.</p>
<p>This try except block is so that It can help write out errors on the machine and ultimately put into a scheduling function later in the script.</p>
<p>This script is on a VM that runs Ubuntu 18.04. It is written in Python 2. </p>
<p>I have researched online, and I cannot find a situation where the try except block does not error out and does not execute. I made sure my indentation on the IDE (Atom) is correct (4 spaces). I can line up the 4 functions themselves and they execute fine with no errors.</p>
<pre><code>import os
import sys
import datetime
import tempfile
import smartsheet
import glob
import warnings
import platform
import pandas as pd
import math
from apscheduler.schedulers.blocking import BlockingScheduler

#variables
warnings.simplefilter(action='ignore', category=FutureWarning)

now = datetime.datetime.now()

PATH = "/mnt/cifs/rxlog.csv"

csvpath = "/home/ajskrilla/csvtest.csv"

End = '.csv'

today = now.strftime("%Y-%m-%d %H:%M")

path1 = "/mnt/cifs1"+"/Reports"+ now.strftime("%Y-%m-%d")+"/log Import"

path_glob = "/mnt/cifs1"+"/Reports"+ now.strftime("%Y-%m-%d")+"/log Import"+now.strftime("%Y-%m-%d")

Files_to_compare = glob.glob('/mnt/cifs1'+"/Reports"+ now.strftime("%Y-%m-%d")+'/log Import'+now.strftime("%Y-%m-%d")+'*.csv')

Fpath =  path1 + now.strftime("%Y-%m-%d %H:%M") + End

SSName = 'Call Sheet/NDC ' + now.strftime("%Y-%m-%d %H:%M") + End

list_of_files = Files_to_compare

sched = BlockingScheduler()

#start of process

def Import_csv():

    data_file = pd.read_csv(PATH, error_bad_lines=False, sep="|", parse_dates=True, low_memory=False, quotechar=None, quoting=3)

    data_file.to_csv(csvpath)

def Clean_CSV():

    file_path_directory = "/mnt/cifs1/"+"Reports" + now.strftime("%Y-%m-%d")

    if not os.path.exists(file_path_directory):

        os.makedirs(file_path_directory)

    fields=['RXNBR', 'RX STOREID', 'FILLDATE', 'PATNAMELAST', 'PATNAMEFIRST', 'NH NBR', 'RX HOLD STATUS', 'RX HOLD REASON']

    df = pd.read_csv(csvpath, skipinitialspace=True, usecols=fields, low_memory=False)

    df.columns = ['RXNBR','RX_STOREID', 'FILLDATE', 'PATNAMELAST', 'PATNAMEFIRST', 'NH_NBR', 'RX_HOLD_STATUS', 'RX_HOLD_REASON']

    nf = df[df.NH_NBR == 0][df.RX_HOLD_STATUS != 'Online Queued']

    with tempfile.NamedTemporaryFile(delete=False) as temp:

        nf.to_csv(Fpath, index=False)

def Compare_files():

    if platform.system() == 'Linux':

        if len(list_of_files) &gt; 2:

            latest_file = min(list_of_files, key=os.stat)

            first_file = max(list_of_files, key=os.stat)

            one_file= pd.read_csv(first_file)

            two_file= pd.read_csv(latest_file)

            out = one_file.append(two_file)

            out.drop_duplicates('RXNBR', inplace=True)

            with tempfile.NamedTemporaryFile(delete=False) as temp:

                out.to_csv(Fpath, index=False)

                for file in list_of_files:

                    if file != latest_file:

                        for files in list_of_files:

                            os.remove(files)

        else:

            pass

        #delete the old file

def SS_import():

    ss_client = smartsheet.Smartsheet("BANNERID#")

    ss_client.errors_as_exceptions(True)

    imported_sheet = ss_client.Workspaces.import_csv_sheet(

# need to change this based upon workspace ID

    xxxxxxxxxxxxxxxx, #WS ID

    Fpath,

    SSName,

    header_row_index=0

    )


def SS_delete():

    ss_client = smartsheet.Smartsheet("BANNNERID#")

    action = ss_client.Sheets.list_sheets(include_all=True)

    for single_sheet in action.data:

        Sheetid= single_sheet.id

        ss_client.Sheets.delete_sheet(

        single_sheet.id)
######################################################################################################################################

#this is where the issue arises, during this function

#full fnct with error handling

def NDC_import():

    try:

        Import_csv()

    except Exception as E:

        Import_error_file = open('/mnt/Error Files/IE Error' + now.strftime("%Y-%m-%d %H:%M") + '.txt', 'w+')

        for line in Import_error_file:

            line.write(E)

            line.close()

            sys.exit()


    try:

        Clean_CSV()

    except Exception as E:

        Clean_CSV_error = open('/mnt/Error Files/CC Error' + now.strftime("%Y-%m-%d %H:%M") + '.txt', 'w+')

        for line in Clean_CSV_error:

            line.write(E)

            line.close()

            sys.exit()

    try:

        Compare_files()

    except Exception as E:

        Compare_files_error = open('/mnt/Error Files/CF Error' + now.strftime("%Y-%m-%d %H:%M") + '.txt', 'w+')

        for line in Compare_files_error:

            line.write(E)

            line.close()

            sys.exit()

    try:

        SS_import()

    except Exception as E:

        SS_import_error = open('/mnt/Error Files/SSI Error' + now.strftime("%Y-%m-%d %H:%M") + '.txt', 'w+')

        for line in SS_import_error:

            line.write(E)

            line.close()

            sys.exit()

NDC_import()
</code></pre>
<p>When the script is run for the <code>NDC_import()</code> function, it won't execute at all. if the 4 functions <code>Import_csv()</code>, <code>Clean_CSV()</code>, <code>Compare_files()</code>, and <code>SS_import()</code> are just by themselves, they execute normally.</p>
<p>Why can't it run in that try except block I wrote? It does not even throw an error and the terminal is blank.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the primary issue revolves around your exception handling. In particular, you're opening the files as <code>w+</code> mode and then iterating through the opened file -- not exactly a syntax error but it's functionally broken. It's also worth noting that if there are no errors, you should not expect to see any printed output.</p>
<p>I would suggest to take a different direction with handling errors entirely and consider using the fabulous <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> library.</p>
<p>An example of how you could use it would be</p>
<pre><code># ... other imports
import logging

# ... your function definitions
def NDC_Import():
    try:
        Import_csv()
    except Exception as E:
        logging.exception('error during Import_csv()')
        return

    # and so on ...
</code></pre>
<p>That <code>logging.exception()</code> line will print out the whole traceback to whatever logger is configured, and you can <a href="https://docs.python.org/3/howto/logging.html#logging-to-a-file" rel="nofollow noreferrer">configure it to log to a file</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're opening the file in <code>w+</code> mode. Example:</p>
<pre><code>SS_import_error = open('/mnt/Error Files/SSI Error' + now.strftime("%Y-%m-%d %H:%M") + '.txt', 'w+')
</code></pre>
<p><code>w+</code> means it will create the file if it doesn't exist, or overwrite it if it does. That means that <code>SS_import_error</code> will always point to an empty file after this line. Then you immediately try to loop over the lines of that file:</p>
<pre><code>for line in SS_import_error:
    line.write(E)
    line.close()
    sys.exit()
</code></pre>
<p>But attempting to loop over the lines of an empty file will end immediately, without ever executing the code within the block. The end result is that the <code>except</code> block runs, but it doesn't actually do anything (other than potentially wipe a file).</p>
<p>I don't know exactly what you intended the <code>for</code> loops to do, so I can't suggest an fix.</p>
</div>
<span class="comment-copy">That seemed to do it. I never knew that this was functionally broken. I was just trying to write a way to log the errors when it fails, but this works as well.</span>
