<div class="post-text" itemprop="text">
<p>I'm working on creating a large .py file that can be imported and used to solve mathematical formulas. I'd like to store the formulas in a procedure that is called input1_input2_input3(): for example the formual distance=speed*time is called dis_spe_tim().</p>
<p>The code so far is:</p>
<pre><code>def dis_spe_tim():
    def distance(speed, time):
        result = speed*time
        unit = input("What unit are you measuring the distance in?")
        print(resule,unit)

    def speed():
        print("speed")
</code></pre>
<p>and I would ideally like the user to use this like so:</p>
<pre><code>import equations #name of the .py file
from equations import *
dis_spe_tim.distance(1,2)
</code></pre>
<p>Unfortunately, this is my first time ever doing something like this so I have absolutely no idea how to go about calling the procedure inside of the procedure and providing its arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: you can't. Nested functions are local to the function they're defined in and only exists during the outer function's execution (<code>def</code> is an executable statement that, at runtime, creates a function object and bind it to it's name in the enclosing namespace).</p>
<p>The canonical python solution is to use modules as namespaces (well, Python modules ARE, mainly, namespaces), ie have a distinct module for each "formula", and define the functions at the module's top-level:</p>
<pre><code># dis_spe_tim.py
def distance(speed, time):
   # code here

def speed():
   # code here
</code></pre>
<p>Then put all those modules in an <code>equations</code> package (mostly: a folder containing modules and an <code>__init__.py</code> file). Then you can do:</p>
<pre><code>from equations import dis_spe_tim
dis_spe_tim.distance(1,2)
</code></pre>
<p>You can check the doc for more on modules and packages here: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#packages</a></p>
<p>Also note that </p>
<p>1/ "star imports" (also named "wildcard imports"), ie <code>from somemodule import *</code>, are <a href="https://www.python.org/dev/peps/pep-0008/#id23" rel="nofollow noreferrer">highly discouraged</a> as they tend to make the code harder to read and maintain and can cause unexpected (and sometimes subtles enough to be hard to spot) breakages.</p>
<p>2/ you shouldn't mix "domain" code (code that do effective computations) with UI code (code that communicates with the user), so any call to <code>input()</code>, <code>print()</code> etc should be outside the "domain" code. This is key to make your domain code usable with different UIs (command-line, text-based (curse etc), GUI, web, whatever), but also, quite simply, to make sure your domain code is easily testable in isolation (unit testing...).</p>
</div>
<span class="comment-copy">You can't import inner nested functions - they incapsulated. You should make it public - move from dis_spe_tim to root level of file.</span>
