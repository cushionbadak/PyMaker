<div class="post-text" itemprop="text">
<p>I am reading a csv file using <code>tf.contrib.data.make_csv_dataset</code> to form a dataset, and then I use the command <code>take()</code> to form another dataset with just one element, but still it returns all elments.</p>
<p>What is wrong here? I brought the code below:</p>
<pre><code>import tensorflow as tf
import os
tf.enable_eager_execution()

# Constants

column_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
class_names = ['Iris setosa', 'Iris versicolor', 'Iris virginica']
batch_size   = 1
feature_names = column_names[:-1]
label_name = column_names[-1]

# to reorient data strucute
def pack_features_vector(features, labels):
  """Pack the features into a single array."""
  features = tf.stack(list(features.values()), axis=1)
  return features, labels

# Download the file
train_dataset_url = "http://download.tensorflow.org/data/iris_training.csv"
train_dataset_fp = tf.keras.utils.get_file(fname=os.path.basename(train_dataset_url),
                                       origin=train_dataset_url)

# form the dataset
train_dataset = tf.contrib.data.make_csv_dataset(
train_dataset_fp,
batch_size, 
column_names=column_names,
label_name=label_name,
num_epochs=1)

# perform the mapping
train_dataset = train_dataset.map(pack_features_vector)

# construct a databse with one element 
train_dataset= train_dataset.take(1)

# inspect elements
for step in range(10):
    features, labels = next(iter(train_dataset))
    print(list(features))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://stackoverflow.com/questions/51125266/how-do-i-split-tensorflow-datasets">this</a> answer we can split Dataset with <code>Dataset.take()</code> and <code>Dataset.skip()</code>:</p>
<pre><code>train_size = int(0.7 * DATASET_SIZE)

train_dataset = full_dataset.take(train_size)
test_dataset = full_dataset.skip(train_size)
</code></pre>
<p><em>How to fix your code?</em></p>
<p>Instead of creating the iterator multiple times in the loop, use one iterator:</p>
<pre><code># inspect elements
for feature, label in train_dataset:
    print(feature)
</code></pre>
<hr/>
<p><em>What happens in your code that causes such behavior?</em></p>
<p>1) Built-in python <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer"><code>iter</code></a> function gets an iterator from an object or  the object itself must supply its own iterator. So when you call <code>iter(train_dataset)</code>, it is equavalent to call <a href="https://www.tensorflow.org/api_docs/python/tf/data/Dataset#make_one_shot_iterator" rel="nofollow noreferrer"><code>Dataset.make_one_shot_iterator()</code></a>.</p>
<p>2) By default, in <a href="https://www.tensorflow.org/api_docs/python/tf/contrib/data/make_csv_dataset" rel="nofollow noreferrer"><code>tf.contrib.data.make_csv_dataset()</code></a> the shuffle argument is True (<code>shuffle=True</code>). As a result, each time you call <code>iter(train_dataset)</code> it creates new Iterator that contains different data. </p>
<p>3) Finally, when looping through by <code>for step in range(10)</code> it is similar that you create 10 different Iterator with the size of 1 that each one has its own data because they are shuffled.</p>
<p><strong>Suggestion</strong>: If you want to avoid such things initialize (create) iterator outside of loop:</p>
<pre><code>train_dataset = train_dataset.take(1)
iterator = train_dataset.make_one_shot_iterator()
# inspect elements
for step in range(10):
    features, labels = next(iterator)
    print(list(features))
    # throws exception because size of iterator is 1
</code></pre>
</div>
