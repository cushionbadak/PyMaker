<div class="post-text" itemprop="text">
<p>I am trying to capture a number from a string, which sometimes contains dot separators and sometimes it does not. In any case I need a number with the dot separator.</p>
<p>e.g.:</p>
<pre><code>num = re.findall('\d{3}\.(?:\d{2}\.){4}\d{3}|\d{14}', txt)[0]
</code></pre>
<p>will capture both variations:</p>
<pre><code>304.33.44.52.03.002
30433445203002
</code></pre>
<p>In case it captured the one without dots, I would need to add the dots with the systematic of:</p>
<pre><code>AAA.BB.CC.DD.EE.FFF
</code></pre>
<p>How can I add those dots with Python?</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Solution without regexp.</em></p>
<p>You can transform it to <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">list</a> and insert dots in required positions, ensuring that value is <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow noreferrer">string</a>.</p>
<pre><code>n = 30433445203002
l = list(str(n))
</code></pre>
<p>Add dots in positions you need</p>
<pre><code>l.insert(3, '.')
l.insert(6, '.')
l.insert(9, '.')
l.insert(12, '.')
l.insert(15, '.')
</code></pre>
<p>If this is well-defined pattern. You can generalize the insertion above.</p>
<p>After insertion is done, <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a> them back to the string:</p>
<pre><code>num = "".join(l)
</code></pre>
<p><strong>Input:</strong></p>
<pre><code>30433445203002
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>304.33.44.52.03.002
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can capture each "group" of numbers into a capturing group, and refer to it in the replacement string. The dots can be made optional with <code>\.?</code>.</p>
<pre><code>string = "30433445203002"
regex = r"(\d{3})\.?(\d{2})\.?(\d{2})\.?(\d{2})\.?(\d{2})\.?(\d{3})"
pattern = "\\1.\\2.\\3.\\4.\\5.\\6"
result = re.sub(regex, pattern, string)
</code></pre>
<p>For more details, take a look on <a href="https://docs.python.org/3/library/re.html?highlight=regex#re.sub" rel="nofollow noreferrer">re.sub</a></p>
<p><strong>Output:</strong></p>
<pre><code>304.33.44.52.03.002
</code></pre>
<h3><a href="https://regex101.com/r/CH5c6A/1" rel="nofollow noreferrer">Regex Demo</a></h3>
<p>EDIT:</p>
<p>If I have misunderstood you and what you actually want is to <em>get</em> the first 3 numbers, 4th and 5th numbers, 6th and 7th numbers etc, you can use the same regex with <code>search</code>:</p>
<pre><code>re.search(regex, string).group(1) # 304
re.search(regex, string).group(2) # 33
</code></pre>
</div>
<span class="comment-copy">quick tip for your second question, consider the following bit of code: <code>'{}{}{}.{}{}.{}{}.{}{}.{}{}.{}{}{}'.format(*list("30.4.33445203002".replace('.','')))</code>  you can feed this your captures and they will always print in your format regardless of dot separation</span>
<span class="comment-copy">Why don't you do it using regex itself?</span>
<span class="comment-copy">If this is possible with regex, sure would be an option. @Nullman This sounds like a great option. Could you craft an answer from this please?</span>
<span class="comment-copy">What python do you use? I tried your solution and it seemed pretty interesting but in my interpreter I am getting <code>"$1.$2.$3.$4.$5.$6"</code> on your example.</span>
<span class="comment-copy">@DmytroChasovskyi Edited. I couldn't remember which syntax does python use. It's either <code>$n</code> or <code>\n</code>. Now it should work.</span>
<span class="comment-copy">your solution looks good and works for me. The only problem with pattern that it matches also other strings. For example, <code>304.33445203.002</code> and many more that potentially shouldn't be match. Do you know how to resolve it?</span>
<span class="comment-copy">@DmytroChasovskyi My solution only adds the dots. If you want to get the number in each group, you can use the regex with <code>search</code> and then call <code>group</code>. But if you want to not match anything that is not that pattern, you can use something like <code>(\d{3})\.(\d{2})\.(\d{2})\.(\d{2})\.(\d{2})\.(\d{3})|(\d{3})(\d{2})(\d{2})(\d{2})(\d{2})(\d{3})</code>.</span>
