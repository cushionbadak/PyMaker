<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/52896806/sum-of-float-float-object-is-not-iterable">Sum of float - 'float' object is not iterable</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to find the sum of the kitchen(18.0) and bedroom area (10.75)</p>
<pre><code># Create the areas list
 areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 
10.75, "bathroom", 9.50]

 # Sum of kitchen and bedroom area: eat_sleep_area
 eat_sleep_area = sum(areas[3],areas[-3])

 # Print the variable eat_sleep_area
 print(eat_sleep_area)
</code></pre>
<p>but when I try to run the code it says this :
      TypeError: 'float' object is not iterable
Also I observed that when I used other functions like min,max it works just fine 
can anyone explain me the reason for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use a dictionary, not a list, for this kind of thing:</p>
<pre><code>areas = {
    'hallway': 11.25,
    'kitchen': 18.0,
    'living room': 20.0,
    'bedroom': 10.75,
    'bathroom': 9.50,
}
</code></pre>
<p>Then you can sum them like so:</p>
<pre><code>result = areas['kitchen'] + areas['bedroom']
</code></pre>
<p>Dictionaries allow lookup by key. <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Check the docs</a> for more.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python <code>sum(iterable[, start])</code> requires iterable as first argument. Consider just wrapping your arguments in a list like:</p>
<pre><code>sum([areas[3],areas[-3]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is better if you use a dictionary:</p>
<pre><code>areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]
areas = { name : measures for name, measures in zip(areas, areas[1:])}
result = sum(areas[name] for name in ('kitchen', 'bedroom'))
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>28.75
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The sum() function adds start and items of the given iterable from left to right.</p>
<p>sum() Parameters
iterable - iterable (list, tuple, dict etc) whose item's sum is to be found. Normally, items of the iterable should be numbers.
start (optional) - this value is added to the sum of items of the iterable. The default value of start is 0 (if omitted)</p>
<p>float is  not iterable</p>
</div>
<div class="post-text" itemprop="text">
<p>Can replace <code>sum</code> with <code>add</code> operator</p>
<pre><code>from operator import add
eat_sleep_area = add(areas[3],areas[-3]) # if you have only two entities to add otherwise use sum and pass an iterator
</code></pre>
<p>or with sum</p>
<pre><code>eat_sleep_area = add([areas[3],areas[-3]])
</code></pre>
</div>
<span class="comment-copy"><code>sum</code>'s first item should be an iterable. You're passing float. What you need is to just add them together.</span>
<span class="comment-copy">if you want to add two or more variables why not using + operator?!</span>
<span class="comment-copy">Try that examples      areas_map = dict(zip(areas[::2], areas[1::2]))     eat_sleep_area = areas_map['hallway'] + areas_map['living room']          areas_tup = tuple(zip(areas[::2], areas[1::2]))     areas_tup[3][1] + areas_tup[-3][1]</span>
