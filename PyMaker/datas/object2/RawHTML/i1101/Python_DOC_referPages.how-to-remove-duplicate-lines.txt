<div class="post-text" itemprop="text">
<p>I am trying to create a simple program that removes duplicate lines from a file. However, I am stuck. My goal is to ultimately remove all except 1 duplicate line, different from the suggested duplicate. So, I still have that data. I would also like to make it so, it takes in the same filename and outputs the same filename. When I tried to make the filenames both the same, it just outputs an empty file.</p>
<pre><code>input_file = "input.txt"
output_file = "input.txt"

seen_lines = set()
outfile = open(output_file, "w")

for line in open(input_file, "r"):
    if line not in seen_lines:
        outfile.write(line)
        seen_lines.add(line)

outfile.close()
</code></pre>
<hr/>
<p>input.txt</p>
<pre><code>I really love christmas
Keep the change ya filthy animal
Pizza is my fav food
Keep the change ya filthy animal
Did someone say peanut butter?
Did someone say peanut butter?
Keep the change ya filthy animal
</code></pre>
<hr/>
<p>Expected output</p>
<pre><code>I really love christmas
Keep the change ya filthy animal
Pizza is my fav food
Did someone say peanut butter?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The line <code>outfile = open(output_file, "w")</code> truncates your file no matter what else you do. The reads that follow will find an empty file. My recommendation for doing this safely is to use a temporary file:</p>
<ol>
<li>Open a temp file for writing</li>
<li>Process the input to the new output</li>
<li>Close both files</li>
<li>Move the temp file to the input file name</li>
</ol>
<p>This is much more robust than opening the file twice for reading and writing. If anything goes wrong, you will have the original and whatever work you did so far stashed away. Your current approach can mess up your file if anything goes wrong in the process.</p>
<p>Here is a sample using <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer"><code>tempfile.NamedTemporaryFile</code></a>, and a <code>with</code> block to make sure everything is closed properly, even in case of error:</p>
<pre><code>from tempfile import NamedTemporaryFile
from shutil import move

input_file = "input.txt"
output_file = "input.txt"

seen_lines = set()

with NamedTemporaryFile('w', delete=False) as output, open(input_file) as input:
    for line in open(input_file, "r"):
        sline = line.rstrip('\n')
        if sline not in seen_lines:
            output.write(line)
            seen_lines.add(sline)
move(output.name, output_file)
</code></pre>
<p>The <code>move</code> at the end will work correctly even if the input and output names are the same, since <code>output.name</code> is guaranteed to be something different from both.</p>
<p>Note also that I'm stripping the newline from each line in the set, since the last line might not have one.</p>
<p><strong>Alt Solution</strong></p>
<p>If your don't care about the order of the lines, you can simplify the process somewhat by doing everything directly in memory:</p>
<pre><code>input_file = "input.txt"
output_file = "input.txt"

with open(input_file) as input:
    unique = set(line.rstrip('\n') for line in input)
with open(output_file, 'w') as output:
    for line in unique:
        output.write(line)
        output.write('\n')
</code></pre>
<p>You can compare this against</p>
<pre><code>with open(input_file) as input:
    unique = set(line.rstrip('\n') for line in input.readlines())
with open(output_file, 'w') as output:
    output.write('\n'.join(unique))
</code></pre>
<p>The second version does exactly the same thing, but loads and writes all at once.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're trying to write to the same file that you're reading from. You have at least two options:</p>
<h2>Option 1</h2>
<p>Use different filenames (e.g. <em>input.txt</em> and <em>output.txt</em>). This is, at some level, easiest.</p>
<h2>Option 2</h2>
<p>Read all data in from your input file, close that file, then open the file for writing.</p>
<pre><code>with open('input.txt', 'r') as f:
    lines = f.readlines()

seen_lines = set()
with open('input.txt', 'w') as f:
    for line in lines:
        if line not in seen_lines:
            seen_lines.add(line)
            f.write(line)
</code></pre>
<h2>Option 3</h2>
<p>Open the file for both reading and writing using <code>r+</code> mode. You need to be careful in this case to read the data you're going to process before writing. If you do everything in a single loop, the loop iterator may lose track.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
seen_lines = []

with open('input.txt','r') as infile:
    lines=infile.readlines()
    for line in lines:
        line_stripped=line.strip()
        if line_stripped not in seen_lines:
            seen_lines.append(line_stripped)

with open('input.txt','w') as outfile:
    for line in seen_lines:
        outfile.write(line)
        if line != seen_lines[-1]:
            outfile.write(os.linesep)
</code></pre>
<p>Output:</p>
<pre><code>I really love christmas
Keep the change ya filthy animal
Pizza is my fav food
Did someone say peanut butter?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is the easiest way to do what you want:</p>
<pre><code>with open('FileName.txt', 'r+') as i:
    AllLines = i.readlines()
    for line in AllLines:
        #write to file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the below code, using list comprehension with <code>str.join</code> and <code>set</code> and <code>sorted</code>:</p>
<pre><code>input_file = "input.txt"
output_file = "input.txt"
seen_lines = []
outfile = open(output_file, "w")
infile = open(input_file, "r")
l = [i.rstrip() for i in infile.readlines()]
outfile.write('\n'.join(sorted(set(l,key=l.index))))
outfile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just my two cents, in case you happen to be able to use Python3. It uses:</p>
<ul>
<li>A reusable <code>Path</code> object which has a handy <code>write_text()</code> method.</li>
<li>An <code>OrderedDict</code> as data structure to satisfy the constraints of uniqueness and order at once.</li>
<li>A generator expression instead of <code>Path.read_text()</code> to save on memory.</li>
</ul>
<hr/>
<pre><code># in-place removal of duplicate lines, while remaining order
import os
from collections import OrderedDict
from pathlib import Path

filepath = Path("./duplicates.txt")

with filepath.open() as _file:
    no_duplicates = OrderedDict.fromkeys(line.rstrip('\n') for line in _file)

filepath.write_text("\n".join(no_duplicates))
</code></pre>
</div>
<span class="comment-copy">You open the file twice, since <code>input_file</code> and <code>output_file</code> are the same. The second time you open as read, which is where I think your problem is. So you won't be able to write.</span>
<span class="comment-copy">@busybear Yes. Open your file as <code>r+</code> to read and write to the file at the same time (they will both work).</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1215208/how-might-i-remove-duplicate-lines-from-a-file">How might I remove duplicate lines from a file?</a></span>
<span class="comment-copy">I get an error of <code>outfile</code> is not defined</span>
<span class="comment-copy">just a question, this way of removing duplicates is very slow if there is over 100,000 lines. Is there a better way? Also still getting the same error.</span>
<span class="comment-copy">@Mark. With that size, your I/O is the bottleneck. I doubt you can do much to speed it up.</span>
<span class="comment-copy">@Mark. Fixed the error. It was just a typo</span>
<span class="comment-copy">@Mark. I've proposed an alternative</span>
<span class="comment-copy">Or use <code>r+</code> for reading and writing.</span>
<span class="comment-copy">This fixes the problem and is a good solution for small input files, but note that it will be quite slow (quadratic time) for large files due to the linear search through <code>seen_lines</code>.</span>
<span class="comment-copy">When I use this code, I see <code>Keep the change ya filthy animal</code> twice in the output?</span>
<span class="comment-copy">@Mark I tested the code and i don't see it. Can you copy  the code as it is and try again? may be you made some unintentional mistake while typing it.</span>
<span class="comment-copy">Wait, I think its because the last line has the <code>EOF</code> at the end of the line so it sees it as not a duplicate. I tested it. If the last line is a duplicate line, it always keeps it because of the <code>EOF</code>. Any way around this? I am on windows by the way</span>
<span class="comment-copy">@Mark <a href="https://stackoverflow.com/questions/18857352/python-remove-very-last-character-in-file/18857381" title="python remove very last character in file">stackoverflow.com/questions/18857352/â€¦</a> might help. I can't  say for sure. i am on Ubuntu.</span>
<span class="comment-copy">At that point it would be much simpler to reopen for writing. If you're removing lines, there will be a tail left in the file.</span>
