<div class="post-text" itemprop="text">
<p>i have a few tuples containing strings and i want to remove some of the tuples that have 3 or more of the same elements in it. so i need to check if any of the tuples have 3 or more 'A', 'B', 'C' or 'D' inside them.
 how do i go about it? thanks</p>
<pre><code>('A', 'A', 'A', 'A') &lt;--remove because it has more than 3 'A's in it
('A', 'A', 'A', 'B') &lt;--remove because it has 3 'A's in it
('B', 'B', 'B', 'B') &lt;--remove because it has more than 3 'B's in it
('B', 'B', 'B', 'C') &lt;--remove because it has 3 'B's in it
('A', 'A', 'B', 'A') &lt;--remove because it has 3 'A's in it
('A', 'A', 'B', 'B') &lt;--this is ok
('A', 'A', 'B', 'C') &lt;--this is ok
('A', 'A', 'B', 'D') &lt;--this is ok
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a> to count the occurrences of the elements:</p>
<pre><code>from collections import Counter

data = [('A', 'A', 'A', 'A'),
        ('A', 'A', 'A', 'B'),
        ('B', 'B', 'B', 'B'),
        ('B', 'B', 'B', 'C'),
        ('A', 'A', 'B', 'A'),
        ('A', 'A', 'B', 'B'),
        ('A', 'A', 'B', 'C'),
        ('A', 'A', 'B', 'D')]


result = [t for t in data if all(value &lt; 3 for value in Counter(t).values())]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[('A', 'A', 'B', 'B'), ('A', 'A', 'B', 'C'), ('A', 'A', 'B', 'D')]
</code></pre>
<p>As mentioned by @coldspeed you don't need to test all the values only the largest one:</p>
<pre><code>result = [t for t in data if max(Counter(t).values()) &lt; 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: This solution involves extra computation, and is less efficient than a <code>max</code> on values. Avoid. Refer to comments for an excellent discussion.<br/>
You could use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a> but use the <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>most common</code></a> method of the counter to avoid checking all values in the Counter. (EDIT: However, most common requires a heapsort when passed an argument, making it computationally expensive. Thanks for pointing it out in comments.)</p>
<pre><code>from collections import Counter

data = [('A', 'A', 'A', 'A'),
        ('A', 'A', 'A', 'B'),
        ('B', 'B', 'B', 'B'),
        ('B', 'B', 'B', 'C'),
        ('A', 'A', 'B', 'A'),
        ('A', 'A', 'B', 'B'),
        ('A', 'A', 'B', 'C'),
        ('A', 'A', 'B', 'D')]


result = [t for t in data if Counter(t).most_common(1)[0][1] &lt; 3]
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You no need to test all the values. You can test only the largest one.   </p>
<pre><code>result = [i for i in data if max(Counter(i).values()) &lt; 3]
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[('A', 'A', 'B', 'B'), ('A', 'A', 'B', 'C'), ('A', 'A', 'B', 'D')]
</code></pre>
</div>
<span class="comment-copy">Is this list of tuples ?</span>
<span class="comment-copy">these are just unnamed tuples generated with 'itertools.product'. i can turn them into list of tuples or anything really</span>
<span class="comment-copy">You don't need to test all the values, just the largest one. Of course, complexity wise it is the same but not as clean.</span>
<span class="comment-copy">@coldspeed Done. Thanks for the tip!</span>
<span class="comment-copy">thank you so much. i tried 'collections.Counter' before but got the syntax wrong. thank you again. u saved me hours of my life :)</span>
<span class="comment-copy">This works and is fine but I believe <code>most_common</code> requires a sorting of values, while the others involve a linear scan.</span>
<span class="comment-copy">oh does it? i presumed Counters were already ordered/sorted on creation, but im not a 100% sure.</span>
<span class="comment-copy">Counters use a heap for most_common when n is specified, according to the docs using max is more efficiencient: <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer">docs.python.org/3/library/heapq.html#heapq.nlargest</a></span>
<span class="comment-copy">@DanielMesejo Source code <a href="https://github.com/python/cpython/blob/master/Lib/collections/__init__.py#L581" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Lib/collections/__init__.py#L581</a> seems to agree with you.</span>
<span class="comment-copy">i would feel bad deleting this because i find these comments very useful.</span>
