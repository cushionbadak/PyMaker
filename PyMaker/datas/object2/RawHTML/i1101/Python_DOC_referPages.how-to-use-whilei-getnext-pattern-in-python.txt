<div class="post-text" itemprop="text">
<p>In C++, I often use the following pattern:</p>
<pre><code>while (int i = getNextElementPlease()) {
    printf("%d\n", i);
}
</code></pre>
<p>But in python I have to repeat call twice:</p>
<pre><code>i = getNextElementPlease()
while (i):
    print(i)
    i = getNextElementPlease()
</code></pre>
<p>How to avoid duplication of <code>getNextElementPlease</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Either with the classic <code>while True</code>/<code>break</code> pattern:</p>
<pre><code>while True:
    i = getNextElementPlease()
    if not i:
        break
    ...
</code></pre>
<p>or by using the <a href="https://docs.python.org/3/library/functions.html#iter" rel="noreferrer">two-argument form of <code>iter</code></a> to build an iterator out of your function:</p>
<pre><code>for i in iter(getNextElementPlease, sentinel):
    ...
</code></pre>
<p>where <code>sentinel</code> is whatever value you're expecting to terminate the loop. Probably something like <code>None</code>. The iterator will call <code>getNextElementPlease</code> to get elements and stop when <code>getNextElementPlease</code> returns the sentinel value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Currently, the least repetitive version of this pattern (and often seen) is the following:</p>
<pre><code>while True:
    i = getNextElementPlease()
    if not i:
        break
    print(i)
</code></pre>
<p>Looking ahead, however, Python 3.8 will introduce <strong>assignment expressions</strong> via <a href="https://www.python.org/dev/peps/pep-0572/#syntax-and-semantics" rel="nofollow noreferrer">pep-572</a> which will allow:</p>
<pre><code>while i := getNextElementPlease():
    print(i)
</code></pre>
</div>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">python.org/dev/peps/pep-0572</a></span>
<span class="comment-copy">@roganjosh Actually I am trying to call method <code>recv</code> of <code>multiprocessing.connection.Connection</code>, while there is not <code>None</code> element.</span>
<span class="comment-copy">I was bout to make the same suggestion as schwobaseggl below. The problem afaik is that it's considered <i>unpythonic</i> to write assignments in conditions of <code>while</code>  and <code>if</code> (see the first comment <a href="https://stackoverflow.com/a/2603966/305949">in this answer</a>). So, you cannot translate this to Python directly.</span>
<span class="comment-copy">@FK82 If it is unpythonic, it would be great to know what is pythonic way to do it.</span>
<span class="comment-copy">@BhavinChirag <code>while True: ...</code> and <code>break</code> once your termination condition holds as described in both of the answers to your question.</span>
<span class="comment-copy">You can also define a <code>class AnyFalseValue:</code> whose <code>__eq__(self, other)</code> does <code>return not other</code>. Then using <code>iter(func, AnyFalseValue())</code> will be 100% equivalent of the <code>if not i: break</code>, catching both <code>None</code>, <code>False</code>, <code>0</code>, empty sequences etc.</span>
<span class="comment-copy">@Bakuriu: Doable, but at that point, it's probably clearer to switch to <code>while True</code>/<code>break</code>, or to write your own generator that calls an input function and stops when that function returns a false value.</span>
