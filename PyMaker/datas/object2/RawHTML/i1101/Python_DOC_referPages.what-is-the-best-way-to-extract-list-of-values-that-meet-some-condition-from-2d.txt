<div class="post-text" itemprop="text">
<p>I have a 2d list </p>
<pre><code>grid = [[10,13,17],[3,5,1],[13,1,12]]
</code></pre>
<p>I want to get the position of all ones in it in the form of list of tuples</p>
<pre><code>my_list = [[(i,j) for i in list_ if i == 1] for j,list_ in enumerate(grid)]
</code></pre>
<p>But my output is the following</p>
<pre><code>[[], [(1, 1)], ...]
</code></pre>
<p>How can I get rid of empty lists and redundant brackets? My expected output is</p>
<pre><code>[(1, 2), (2, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension:</p>
<pre><code>grid = [[10,13,17],[3,5,1],[13,1,12]]
results = [(i, b) for b in range(len(grid)) for i, a in enumerate(grid[b]) if a == 1]
</code></pre>
<p>Output:</p>
<pre><code>[(2, 1), (1, 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Under the assumption that your expected output is, well, wrong. </p>
<hr/>
<p>Consider using <code>numpy</code>.</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[10,13,17],[3,5,1],[13,1,12]])                                                                       
&gt;&gt;&gt; [tuple(x) for x in np.argwhere(a == 1)
[(1, 2), (2, 1)]
&gt;&gt;&gt;
&gt;&gt;&gt; a = np.array([[10,13,17],[1,5,1],[13,1,12]])                                                                       
&gt;&gt;&gt; [tuple(x) for x in np.argwhere(a == 1)]                                                                              
[(1, 0), (1, 2), (2, 1)]
</code></pre>
<p>Alternatively, <code>list(map(tuple, np.argwhere(a == 1)))</code> provided by <a href="https://stackoverflow.com/users/4932316/bazingaa">Bazingaa</a> arrives at the same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Remove the sub-list creation and use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow noreferrer">nested list comprehension</a>:</p>
<pre><code>grid = [[10, 13, 17], [3, 5, 1], [13, 1, 12]]
my_list = [(i, j) for j, list_ in enumerate(grid) for i, val in enumerate(list_) if val == 1]
print(my_list)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[(2, 1), (1, 2)]
</code></pre>
</div>
<span class="comment-copy">The first one is at position (1, 2), the second one is at (2, 1). How do you get <code>[(1, 1), (1, 2)]</code>?</span>
<span class="comment-copy">Convert to array and use <code>np.argwhere</code>. <code>grid = np.array([[10,13,17],[3,5,1],[13,1,12]])</code> and <code>list(map(tuple,np.argwhere(grid==1)))</code> and make your life easier</span>
<span class="comment-copy">By the way, your (1,1) doesn't make sense</span>
<span class="comment-copy">Yes, I should've used enumerate(list_) in the 1st case too</span>
<span class="comment-copy">For educational purpose, perhaps you can add my answer which I commented below the post too getting rid of the for loop and the list comprehension</span>
<span class="comment-copy">@Bazingaa I edited it in, but there's no use in "getting rid of" the list comprehension's <i>loop syntax</i>, it's just as fast as <code>list</code> + <code>map</code>.</span>
<span class="comment-copy">It could be a matter of personal choice. Both ways are equally good. I actually wanted to answer myself but some people here downvote for overkill reasons. So I just left a comment</span>
