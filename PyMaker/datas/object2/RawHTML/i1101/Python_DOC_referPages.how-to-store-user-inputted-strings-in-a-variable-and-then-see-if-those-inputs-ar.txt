<div class="post-text" itemprop="text">
<p>I'm trying to make a hangman game. At the moment I'm still trying to figure out how to store users inputted strings in a variable. </p>
<p>I need this because if a user guesses the word before the ten guesses it keeps asking them for another letter. 
I've tried creating a variable and then updating the variable as the user entered more letters. However that doesn't work in cases the user doesn't enter all the letters in the correct order the program is obviously not going to recognize this as the correct word. </p>
<p><strong>Basically</strong> I need a way to store the inputted strings (one letter at a time) and to be able to check if all of those letters are contained in the five letter word.</p>
<pre><code>import random
print("Welcome to hangman, guess the five letter word")
words =["china", "ducks", "glass"]
correct_word = (random.choice(words))


trials = 10

for trial in range(trials):
    guess = input(str("Enter Character:"))

    if (len(guess) &gt; 1):
        print("You are not allowed to enter more than one character at a time")
        continue
    if guess in correct_word:
        print("Well done " + guess + " is in the list!")
    else:
        print("Sorry " + guess + " is not included")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With the help of an auxiliar list, this little guy will do the trick (I put some comments to better explain what I did):</p>
<pre><code>import random
import sys

print("Welcome to hangman, guess the five letter word")
words =["china", "ducks", "glass"]
correct_word = (random.choice(words))

trials = 10
trial = 0
#the list starts empty, since the user didn't guessed any letter
guessed_letters = []

while(trial &lt; trials):

    guess = input(str("Enter Charcter:"))

    if (len(guess) &gt; 1):

        print("You are not allowed to enter more than one charcter at a time")
        continue

    if (guess in correct_word) and (guess not in guessed_letters):

        #once our user guesses a letter that he didn't guessed before, it will be added to our list of guessed letters
        print("Well done " + guess + " is in the list!")
        guessed_letters += guess

        #in here we compare the size of the list with the size of the correct_word without duplicates
        #if it's the same size, boom: the user won!
        if (len(guessed_letters) == len(set(correct_word))):

            print("Congratulations! You won!")
            sys.exit()

    else:

        #just to avoid confusing the user with duplicate letters
        if (guess in guessed_letters):

            print("You already tried letter " + guess + "! Try another letter")
            trial -= 1

        else:

            print("Sorry " + guess + " is not included")

    print("Remaining chances: " + str(trials - trial))

    trial += 1

print("\n\n\nGame over!!!!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> is what you need.</p>
<p>You start with an empty <code>set()</code> and <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.add" rel="nofollow noreferrer">add</a> the letter every time. To check if the letters are enough, use <code>saved_set == set(correct_word)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>All you need is to replace:</p>
<pre><code>guess = input(str("Enter Charcter:"))
</code></pre>
<p>by:</p>
<pre><code>guess = str(sys.stdin.readline().rstrip('\n')) 
</code></pre>
</div>
<span class="comment-copy">Thanks this is really helpful!</span>
<span class="comment-copy">I'm a little confused on this line right here: len(set(correct_word))):  specifically what is the "set" doing?</span>
<span class="comment-copy">I guess this shall help you -&gt; <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#sets</a></span>
<span class="comment-copy">Could I just change words = {"china", "ducks", "glass"}. Would that work and then could I get rid of the (set) command. Just trying to understand it better.</span>
<span class="comment-copy">The <code>set</code> assures the program won't consider duplicates of the correct_word. For example, if the work is <code>glass</code> and user tries the letter "s", the program would add the letter once to the <code>guessed_letters</code> list. But there are two s ocurrences in the word <code>glass</code>! To solve this situation, I used the <code>set</code> to consider each letter from the <code>correct_word</code> just once. Then, when we compare sizes, there won't be any duplicate issue. For example, in the <code>glass</code> situation, the setting of glass would only contain letters "g", "l", "a" and "s"!</span>
