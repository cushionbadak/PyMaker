<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; input("input")
input&gt;? a
'a'
&gt;&gt;&gt; input("input")
input&gt;? 'a
"'a"
&gt;&gt;&gt; input("input")
input&gt;? '"a
'\'"a'
&gt;&gt;&gt; input("input")
input&gt;? \'"a
'\\\'"a'
&gt;&gt;&gt; input("input")
input&gt;? "'a
'"\'a'
&gt;&gt;&gt; input("input")
input&gt;? "''a
'"\'\'a'
</code></pre>
<p>It seems that whatever I throw in <code>input</code> in hopes to break it, python just keeps one upping me. It like knows what I'm trying to achieve here and goes "nope"</p>
</div>
<div class="post-text" itemprop="text">
<p>The EOFError mentioned by others can also be triggered by standard input being something that isn't an infinite stream (like standard input generally is), such as <code>/dev/null</code>:</p>
<pre><code>$ python3 -c 'input("")' &lt; /dev/null
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
EOFError: EOF when reading a line
</code></pre>
<p>In a similar vein, we could also write <a href="https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt" rel="nofollow noreferrer">input that's impossible to decode as UTF-8</a> (here using <code>xxd</code> to decode hex into bytes that are then passed to Python).</p>
<pre><code>$ echo 'fe fe ff ff' | xxd -r -ps | python3 -c 'print(input())'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xfe in position 0: invalid start byte
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not <em>exactly</em> an answer to the question, but you can throw a <code>UnicodeDecodeError</code> by changing the default encoding in python and then trying to input a unicode character (such as an emoji) which follows a different encoding scheme.</p>
<pre><code>$ export PYTHONIOENCODING=ascii
$ python3.6
Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; input('&gt;&gt;&gt; ')
&gt;&gt;&gt; ðŸ˜ƒ
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xf0 in position 0: ordinal not in range(128)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way I can think of is to press <kbd>CTRL</kbd>+<kbd>D</kbd> which will trigger an <code>EOFError</code>.<br/>
Similary, <kbd>CTRL</kbd>+<kbd>C</kbd> will raise a <code>KeyboardInterrupt</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; input('in: ')
in: Traceback (most recent call last): # &lt;-- I pressed CTRL-D
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
EOFError
</code></pre>
<p>Maybe a more interesting way to get the <code>EOFError</code> is to use an empty file as the input to your program.</p>
<pre><code>$ cat input.py
got = input('in: ')
print(got)
$ echo some text &gt; not_empty.txt
$ python3 input.py &lt; not_empty.txt 
in: some text
$ touch empty.txt
$ python3 input.py &lt; empty.txt 
in: Traceback (most recent call last):
  File "input.py", line 1, in &lt;module&gt;
    got = input('in: ')
EOFError: EOF when reading a line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the comments on the question here, it appears that the actual confusion stems from how the Python interactive prompt displays the return value of <code>input</code>. The interactive session always displays values using <code>repr</code>, which is designed to try to print a string which, when parsed, would produce the original value. For strings this can lead to some confusion, since the thing that is printed in the interactive session is <em>not</em> the actual string, but a <em>representation</em> of the string.</p>
<p>To see the difference, you can try playing around with this program, which will likely be instructive:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import unicodedata

def main():
    while True:
        s = input('Enter a string: ')
        if not s:
            break
        print('Got string with length {}'.format(len(s)))
        for i, c in enumerate(s):
            print('Character {}: {}'.format(i, unicodedata.name(c)))
        print('repr() produces: {}'.format(repr(s)))
        print('String literally contains: {}'.format(s))
        print()


if __name__ == '__main__':
    main()
</code></pre>
<p>Here are some examples of what it prints:</p>
<pre class="lang-none prettyprint-override"><code>Enter a string: a
Got string with length 1
Character 0: LATIN SMALL LETTER A
repr() produces: 'a'
String literally contains: a

Enter a string: 'a
Got string with length 2
Character 0: APOSTROPHE
Character 1: LATIN SMALL LETTER A
repr() produces: "'a"
String literally contains: 'a

Enter a string: "a'
Got string with length 3
Character 0: QUOTATION MARK
Character 1: LATIN SMALL LETTER A
Character 2: APOSTROPHE
repr() produces: '"a\''
String literally contains: "a'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well Well Well,</p>
<p>Try this little bugger. <code></code>
<a href="https://i.stack.imgur.com/JNrIC.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/JNrIC.png"/></a></p>
<p>Apparently you can raise EOF errors with the right symbol or with ctrl + D. <a href="https://docs.python.org/3/library/exceptions.html#EOFError" rel="nofollow noreferrer">Docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In that case, change the environment from python 3.0 to python 2.7</p>
<pre><code>#!/usr/bin/env python
text=input("Enter somthing that throws error!!!")
</code></pre>
<p>Then whatever you put it will throw an error, For instance, consider "dude" as a string then it throws the following error</p>
<pre><code>File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'dude' is not defined
</code></pre>
</div>
<span class="comment-copy">So, you are complaining that it works properly?</span>
<span class="comment-copy">amusing question. no, its like expecting a string to break something. a string that is not being evaluated to be specific.</span>
<span class="comment-copy">People need to cheer up. This is an interesting question. +1</span>
<span class="comment-copy">the only thing I have in mind is to do ctrl + C for throw KeyboardInterupt exception, But this is a normal behavior.</span>
<span class="comment-copy">Itâ€™s not wrapping anything. It returns a string. A string isnâ€™t wrapped in quotes, a string just contains its contents, which is whatever you typed in. Only when you print a <i>string representation</i> will quotes come into play, and Python is perfectly capable of producing any valid string representation regardless of the stringâ€™s content.</span>
<span class="comment-copy">purposefully inserts a pic so i cant get that character xD. Is there a good reason for that tho? like its not part of whats in ASCII table that python uses or something else?</span>
<span class="comment-copy">Well, the issue is that i actually have that character pasted, but im guessing it does not carry over. You see that box next to my sentence <code>try this little bugger</code>? It's supposed to be there, but its apparently not or it gets lost in conversion when i paste it here :P @Konulv</span>
<span class="comment-copy">@Konulv <a href="https://stackoverflow.com/questions/12389518/representing-eof-in-c-code">relevant</a></span>
<span class="comment-copy">Yay for windows! thanks for the link @timgeb much appreciated</span>
