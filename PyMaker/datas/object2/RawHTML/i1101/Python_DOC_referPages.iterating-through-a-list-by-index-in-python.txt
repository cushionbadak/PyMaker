<div class="post-text" itemprop="text">
<p>How do I get the an integer out of the following code so that I can compare it with other integers?</p>
<pre><code>unseenWords = ["Cat", "Geography", "Mouse", "Apocalypse", "Hierarchy", "Opaque", "Holocaust"]

for i in unseenWords:
     print(unseenWords)
</code></pre>
<p>I tried using len as following as a replacement:</p>
<pre><code>unseenWords.__len__()
</code></pre>
<p>But that's when I get the erorr in this title. I'm very used to Java code so I'm expecting i to always be an integer but it doesn't seem to be the case in Python as it returns the actual word when i try purely try printing out the 'i'?</p>
<p>So when i print unseenWords i get it formatted like this:</p>
<pre><code>['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
['Cat', 'Geography', 'Mouse', 'Apocalypse', 'Hierarchy', 'Opaque', 'Holocaust']
</code></pre>
<p>whilst printing out the index i get it formatted like this instead:</p>
<pre><code>print(i)

Cat
Geography
Mouse
Apocalypse
Hierarchy
Opaque
Holocaust
</code></pre>
<p>though i'm expecting it to be more like:
1
2
3
4
5
6</p>
<p>But how do I get the current index Number?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for index, data in enumerate(unseenWords):
    print("index: "+str(index)+ " data:"+data )
</code></pre>
<p>I think it solves your problem.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I'm very used to Java code so I'm expecting i to always be an integer but it doesn't seem to be the case in Python as it returns the actual word when i try purely try printing out the 'i'?</p>
</blockquote>
<p>Well, python is not java indeed, so why would you expect it to work the same way ? <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">The behaviour of python's <code>for</code> loop is documented</a>, and you're supposed to read the doc, aren't you ?</p>
<blockquote>
<p>I tried using len as following as a replacement: <code>unseenWords.__len__()</code></p>
</blockquote>
<p>Slightly OT : You're not supposed to call "magicmethods" directly (they only are the support for operators - and operators-like functions - overloading). The proper way is <code>len(unseenWords)</code>. </p>
<blockquote>
<p>But that's when I get the erorr in this title</p>
</blockquote>
<p>You didn't bother posting the relevant code (which you should have), but obviously you did something like:</p>
<pre><code>for i in `unseenWords.__len__()`:
    # ....
</code></pre>
<p>which of course raises this error - what would be the sense of iterating over an integer ? Here again, <a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function" rel="nofollow noreferrer">doing at least the official tutorial would have solved your problem</a> (notice that it's the very next part after the explanation of the <code>for</code> loop...).</p>
<blockquote>
<p>though i'm expecting it to be more like: 1 2 3 4 5 6</p>
</blockquote>
<p>Like the vast majority of languages - including Java FWIW -, python uses zero-based indexes - but <code>range()</code> can take a 'start' argument too so it's not really an issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are performing a <code>for-each</code> loop instead of iterating by index.</p>
<pre><code>for i in unseenWords:    # for every item in the list unseenWord
    print(unseenWords)   # you print the actual list
</code></pre>
<p>This is the same as <code>for (String i : unseenWords)</code> in Java (as stated by @ChatterOne in the comments).</p>
<p>If you wanted to print each word you would need to do the following:</p>
<pre><code>for i in unseenWords:
    print(i)
</code></pre>
<p>If what you want is to print the index of each word then there are some different ways to do it, one of which is the following:</p>
<pre><code>for i in range(len(unseenWords)): # iterate on the range of the size
    print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>some modification in your code, will give you your desire output. please compare below code with yours</p>
<pre><code>unseenWords = ["Cat", "Geography", "Mouse", "Apocalypse", "Hierarchy", "Opaque", "Holocaust"]


for i in range(0,len(unseenWords),1):
   print(i)
</code></pre>
<p><strong>will give you :</strong> </p>
<blockquote>
<p>0 1 2 3 4 5 6</p>
</blockquote>
<p><strong>just like in java we do</strong></p>
<pre><code>for (int i=0; i&lt;arrayLength; i++)
 System.out.println(i);
</code></pre>
<p>as because the indexing begins with <strong>zero</strong></p>
</div>
<span class="comment-copy">what output are you actually trying to get? Just a list of all indexes in the list? The relevant iterable for that is <code>range(0, len(unseenWords))</code></span>
<span class="comment-copy"><code>for index, i in enumerate(unseenWords):</code></span>
<span class="comment-copy"><code>for ... in ...</code> is just like <code>for(... : ...)</code> in java</span>
<span class="comment-copy">Why do you expect to get the index? It's kind of equivalent to Java's <code>for (String i: unseenWords) {</code>. You wouldn't expect <code>i</code> to contain the index, right?</span>
<span class="comment-copy">@bro-grammer line code execution    <a href="http://www.pythontutor.com/live.html#code=unseenWords%20%3D%20%5B%22Cat%22,%20%22Geography%22,%20%22Mouse%22,%20%22Apocalypse%22,%20%22Hierarchy%22,%20%22Opaque%22,%20%22Holocaust%22%5D%0A%0Afor%20index,%20i%20in%20enumerate%28unseenWords%29%3A%0A%20%20%20%20%20print%28index%29&amp;cumulative=false&amp;curInstr=7&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-live.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" rel="nofollow noreferrer">pythontutor.com/â€¦</a></span>
<span class="comment-copy">Use string formatting instead of string concatenation: <code>print("index: {} - data: {}".format(index, data))</code></span>
<span class="comment-copy">yes, its a other way. Thanks</span>
<span class="comment-copy">Or, better, f-strings.</span>
<span class="comment-copy">I have read the document. I just don't understand it well enough hence why I go here. I don't understand why everyone on platforms like Stackoverflow expects all beginners to fully understand every concept only because they themselves understand it. It's a very selfish attitude.</span>
<span class="comment-copy">@Aspect and where in your question do you mention that you've read the doc and what part of it you don't understand ? You may want to read this: <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a>. This being said, if you've read the doc and experimentally verified by yourself that the behaviour you get is the documented one, then I don't really get where your problem is...</span>
<span class="comment-copy">But <code>print(unseenWords)</code> doesn't "print said item".</span>
<span class="comment-copy">My bad, fixing it</span>
