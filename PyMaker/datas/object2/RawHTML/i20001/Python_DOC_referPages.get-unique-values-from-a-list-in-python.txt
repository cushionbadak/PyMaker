<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7961363/removing-duplicates-in-lists">Removing duplicates in lists</a>
<span class="question-originals-answer-count">
                    44 answers
                </span>
</li>
</ul>
</div>
<p>I want to get the unique values from the following list:</p>
<pre><code>[u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
</code></pre>
<p>The output which I require is:</p>
<pre><code>[u'nowplaying', u'PBS', u'job', u'debate', u'thenandnow']
</code></pre>
<p>This code works:</p>
<pre><code>output = []
for x in trends:
    if x not in output:
        output.append(x)
print output
</code></pre>
<p>is there a better solution I should use?</p>
</div>
<div class="post-text" itemprop="text">
<p>First declare your list properly, separated by commas. You can get the unique values by converting the list to a set.</p>
<pre><code>mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
myset = set(mylist)
print(myset)
</code></pre>
<p>If you use it further as a list, you should convert it back to list by doing:</p>
<pre><code>mynewlist = list(myset)
</code></pre>
<p>Another possibility, probably faster would be to use a set from the beginning, instead of a list. Then your code should be:</p>
<pre><code>output = set()
for x in trends:
    output.add(x)
print(output)
</code></pre>
<p>As it has been pointed out, the sets do not maintain the original order. If you need so, you should look up about the <a href="http://code.activestate.com/recipes/576694/" rel="noreferrer">ordered set</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To be consistent with the type I would use:</p>
<pre class="lang-python3 prettyprint-override"><code>mylist = list(set(mylist))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what type is your output variable?</p>
<p>Python <a href="https://docs.python.org/2/library/sets.html" rel="noreferrer">sets</a> are what you just need. Declare output like this:</p>
<pre><code>output = set([]) # initialize an empty set
</code></pre>
<p>and you're ready to go adding elements with <code>output.add(elem)</code> and be sure they're unique.</p>
<p>Warning: sets DO NOT preserve the original order of the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>The example you provided does not correspond to lists in Python. It resembles a nested dict, which is probably not what you intended.</p>
<p>A Python list:</p>
<pre><code>a = ['a', 'b', 'c', 'd', 'b']
</code></pre>
<p>To get unique items, just transform it into a set (which you can transform back again into a list if required):</p>
<pre><code>b = set(a)
print b
&gt;&gt;&gt; set(['a', 'b', 'c', 'd'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If we need to keep the elements order, how about this:</p>
<pre><code>used = set()
mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
unique = [x for x in mylist if x not in used and (used.add(x) or True)]
</code></pre>
<p>And one more solution using <code>reduce</code> and without the temporary <code>used</code> var.</p>
<pre><code>mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
unique = reduce(lambda l, x: l.append(x) or l if x not in l else l, mylist, [])
</code></pre>
<p><strong>UPDATE - March, 2019</strong></p>
<p>And a 3rd solution, which is a neat one, but kind of slow since <code>.index</code> is O(n).</p>
<pre><code>mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
unique = [x for i, x in enumerate(mylist) if i == mylist.index(x)]
</code></pre>
<p><strong>UPDATE - Oct, 2016</strong></p>
<p>Another solution with <code>reduce</code>, but this time without <code>.append</code> which makes it more human readable and easier to understand.</p>
<pre><code>mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
unique = reduce(lambda l, x: l+[x] if x not in l else l, mylist, [])
#which can also be writed as:
unique = reduce(lambda l, x: l if x in l else l+[x], mylist, [])
</code></pre>
<p><strong>NOTE:</strong> Have in mind that more human-readable we get, more unperformant the script is.</p>
<pre><code>import timeit

setup = "mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']"

#10x to Michael for pointing out that we can get faster with set()
timeit.timeit('[x for x in mylist if x not in used and (used.add(x) or True)]', setup='used = set();'+setup)
0.4188511371612549

timeit.timeit('[x for x in mylist if x not in used and (used.append(x) or True)]', setup='used = [];'+setup)
0.6157128810882568

timeit.timeit('reduce(lambda l, x: l.append(x) or l if x not in l else l, mylist, [])', setup=setup)
1.8778090476989746

timeit.timeit('reduce(lambda l, x: l+[x] if x not in l else l, mylist, [])', setup=setup)
2.13108491897583

timeit.timeit('reduce(lambda l, x: l if x in l else l+[x], mylist, [])', setup=setup)
2.207760810852051

timeit.timeit('[x for i, x in enumerate(mylist) if i == mylist.index(x)]', setup=setup)
2.3621110916137695
</code></pre>
<p><strong>ANSWERING COMMENTS</strong> </p>
<p>Because <strong>@monica</strong> asked a good question about "how is this working?". For everyone having problems figuring it out. I will try to give a more deep explanation about how this works and what sorcery is happening here ;)</p>
<p>So she first asked:</p>
<blockquote>
<p>I try to understand why <code>unique = [used.append(x) for x in mylist if x
  not in used]</code> is not working.</p>
</blockquote>
<p>Well it's actually working</p>
<pre><code>&gt;&gt;&gt; used = []
&gt;&gt;&gt; mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
&gt;&gt;&gt; unique = [used.append(x) for x in mylist if x not in used]
&gt;&gt;&gt; print used
[u'nowplaying', u'PBS', u'job', u'debate', u'thenandnow']
&gt;&gt;&gt; print unique
[None, None, None, None, None]
</code></pre>
<p>The problem is that we are just not getting the desired results inside the <code>unique</code> variable, but only inside the <code>used</code> variable. This is because during the list comprehension <code>.append</code> modifies the <code>used</code> variable and returns <code>None</code>.</p>
<p>So in order to get the results into the <code>unique</code> variable, and still use the same logic with <code>.append(x) if x not in used</code>, we need to move this <code>.append</code> call on the right side of the list comprehension and just return <code>x</code> on the left side.</p>
<p>But if we are too naive and just go with:</p>
<pre><code>&gt;&gt;&gt; unique = [x for x in mylist if x not in used and used.append(x)]
&gt;&gt;&gt; print unique
[]
</code></pre>
<p>We will get nothing in return. </p>
<p>Again, this is because the <code>.append</code> method returns <code>None</code>, and it this gives on our logical expression the following look: </p>
<pre><code>x not in used and None
</code></pre>
<p>This will basically always:</p>
<ol>
<li>evaluates to <code>False</code> when <code>x</code> is in <code>used</code>,</li>
<li>evaluates to <code>None</code> when <code>x</code> is not in <code>used</code>.</li>
</ol>
<p>And in both cases (<code>False</code>/<code>None</code>), this will be treated as <code>falsy</code> value and we will get an empty list as a result.</p>
<p>But why this evaluates to <code>None</code> when <code>x</code> is not in <code>used</code>? Someone may ask. </p>
<p>Well it's because this is how Python's <a href="https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">short-circuit</a> operators <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">works</a>.</p>
<blockquote>
<p>The expression <code>x and y</code> first evaluates x; if x is false, its value is
  returned; otherwise, y is evaluated and the resulting value is
  returned.</p>
</blockquote>
<p>So when <code>x</code> is not in used <em>(i.e. when its <code>True</code>)</em> the next part or the expression will be evaluated <em>(<code>used.append(x)</code>)</em> and its value <em>(<code>None</code>)</em> will be returned. </p>
<p>But that's what we want in order to get the unique elements from a list with duplicates, we want to <code>.append</code> them into a new list only when we they came across for a fist time. </p>
<p>So we really want to evaluate <code>used.append(x)</code> only when <code>x</code> is not in <code>used</code>, maybe if there is a way to turn this <code>None</code> value into a <code>truthy</code> one we will be fine, right? </p>
<p>Well, yes and here is where the 2nd type of <code>short-circuit</code> operators come to play.</p>
<blockquote>
<p>The expression <code>x or y</code> first evaluates x; if x is true, its value is
  returned; otherwise, y is evaluated and the resulting value is
  returned.</p>
</blockquote>
<p>We know that <code>.append(x)</code> will always be <code>falsy</code>, so if we just add one <code>or</code> next to him, we will always get the next part. That's why we write:</p>
<pre><code>x not in used and (used.append(x) or True)
</code></pre>
<p>so we can <strong>evaluate</strong> <code>used.append(x)</code> and get <code>True</code> as a result, <strong>only when</strong> the first part of the expression <em><code>(x not in used)</code></em> is <code>True</code>.</p>
<p>Similar fashion can be seen in the 2nd approach with the <code>reduce</code> method.</p>
<pre><code>(l.append(x) or l) if x not in l else l
#similar as the above, but maybe more readable
#we return l unchanged when x is in l
#we append x to l and return l when x is not in l
l if x in l else (l.append(x) or l)
</code></pre>
<p>where we:</p>
<ol>
<li>Append <code>x</code> to <code>l</code> and return that <code>l</code> when <code>x</code> is not in <code>l</code>. Thanks to the <code>or</code> statement <code>.append</code> is evaluated and <code>l</code> is returned after that.</li>
<li>Return <code>l</code> untouched when <code>x</code> is in <code>l</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Maintaining order:</p>
<pre><code># oneliners
# slow -&gt; . --- 14.417 seconds ---
[x for i, x in enumerate(array) if x not in array[0:i]]

# fast -&gt; . --- 0.0378 seconds ---
[x for i, x in enumerate(array) if array.index(x) == i]

# multiple lines
# fastest -&gt; --- 0.012 seconds ---
uniq = []
[uniq.append(x) for x in array if x not in uniq]
uniq
</code></pre>
<p>Order doesn't matter:   </p>
<pre><code># fastest-est -&gt; --- 0.0035 seconds ---
list(set(array))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is simple solution-</p>
<pre><code>list=[u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
list=set(list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Getting unique elements from List</p>
<pre><code>mylist = [1,2,3,4,5,6,6,7,7,8,8,9,9,10]
</code></pre>
<blockquote>
<p>Using Simple Logic from Sets - Sets are unique list of items</p>
</blockquote>
<pre><code>mylist=list(set(mylist))

In [0]: mylist
Out[0]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<blockquote>
<p>Using Simple Logic</p>
</blockquote>
<pre><code>newList=[]
for i in mylist:
    if i not in newList:
        newList.append(i)

In [0]: mylist
Out[0]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<blockquote>
<p>Using pop method
  -&gt;pop removes the last or indexed item and displays that to user. <a href="https://www.youtube.com/watch?v=bSJbuO-d62I" rel="noreferrer">video</a></p>
</blockquote>
<pre><code>k=0
while k &lt; len(mylist):
    if mylist[k] in mylist[k+1:]:
        mylist.pop(mylist[k])
    else:
        k=k+1

In [0]: mylist
Out[0]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<blockquote>
<p>Using Numpy</p>
</blockquote>
<pre><code>import numpy as np
np.unique(mylist)

In [0]: mylist
Out[0]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<p><a href="https://gist.github.com/saqibmujtaba/8ec0d7379be839853b15592b3ce59275" rel="noreferrer">Reference</a></p>
</div>
<div class="post-text" itemprop="text">
<p>set - unordered collection of unique elements. List of elements can be passed to set's constructor. So, pass list with duplicate elements, we get set with unique elements and transform it back to list then get list with unique elements. I can say nothing about performance and memory overhead, but I hope, it's not so important with small lists.</p>
<pre><code>list(set(my_not_unique_list))
</code></pre>
<p>Simply and short.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using numpy in your code (which might be a good choice for larger amounts of data), check out <strong>numpy.unique</strong>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; wordsList = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
&gt;&gt;&gt; np.unique(wordsList)
array([u'PBS', u'debate', u'job', u'nowplaying', u'thenandnow'], 
      dtype='&lt;U10')
</code></pre>
<p>(<a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html" rel="nofollow noreferrer">http://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html</a>)</p>
<p>As you can see, numpy supports not only numeric data, string arrays are also possible. Of course, the result is a numpy array, but it doesn't matter a lot, because it still behaves like a sequence:</p>
<pre><code>&gt;&gt;&gt; for word in np.unique(wordsList):
...     print word
... 
PBS
debate
job
nowplaying
thenandnow
</code></pre>
<p>If you really want to have a vanilla python list back, you can always call list().</p>
<p>However, the result is automatically sorted, as you can see from the above code fragments. Check out <a href="https://stackoverflow.com/questions/12926898/numpy-unique-without-sort">numpy unique without sort</a> if retaining list order is required.</p>
</div>
<div class="post-text" itemprop="text">
<p>Same order unique list using only a list compression.</p>
<pre><code>&gt; my_list = [1, 2, 1, 3, 2, 4, 3, 5, 4, 3, 2, 3, 1]
&gt; unique_list = [
&gt;    e
&gt;    for i, e in enumerate(my_list)
&gt;    if my_list.index(e) == i
&gt; ]
&gt; unique_list
[1, 2, 3, 4, 5]
</code></pre>
<p><code>enumerates</code> gives the index <code>i</code> and element <code>e</code> as a <code>tuple</code>.</p>
<p><code>my_list.index</code> returns the first index of <code>e</code>. If the first index isn't <code>i</code> then the current iteration's <code>e</code> is not the first <code>e</code> in the list.</p>
<p><strong>Edit</strong></p>
<p>I should note that this isn't a good way to do it, performance-wise. This is <em>just</em> a way that achieves it using only a list compression.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using basic property of Python Dictionary:</p>
<pre><code>inp=[u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
d={i for i in inp}
print d
</code></pre>
<p>Output will be:</p>
<pre><code>set([u'nowplaying', u'job', u'debate', u'PBS', u'thenandnow'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First thing, the example you gave is not a valid list.</p>
<pre><code>example_list = [u'nowplaying',u'PBS', u'PBS', u'nowplaying', u'job', u'debate',u'thenandnow']
</code></pre>
<p>Suppose if above is the example list. Then you can use the following recipe as give the itertools example doc  that can return the unique values and preserving the order as you seem to require. The iterable here is the example_list </p>
<pre><code>from itertools import ifilterfalse

def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def get_distinct(original_list):
    distinct_list = []
    for each in original_list:
        if each not in distinct_list:
            distinct_list.append(each)
    return distinct_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>set</code> can help you filter out the elements from the list that are duplicates. It will work well for <code>str</code>, <code>int</code> or <code>tuple</code> elements, but if your list contains <code>dict</code> or other <code>list</code> elements, then you will end up with <code>TypeError</code> exceptions.</p>
<p>Here is a general order-preserving solution to handle some (not all) non-hashable types:</p>
<pre><code>def unique_elements(iterable):
    seen = set()
    result = []
    for element in iterable:
        hashed = element
        if isinstance(element, dict):
            hashed = tuple(sorted(element.iteritems()))
        elif isinstance(element, list):
            hashed = tuple(element)
        if hashed not in seen:
            result.append(element)
            seen.add(hashed)
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a bonus, <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="noreferrer"><code>Counter</code></a> is a simple way to get both the unique values and the count for each value:</p>
<pre><code>from collections import Counter
l = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
c = Counter(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def setlist(lst=[]):
   return list(set(lst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the previous answers, which say you can convert your list to set, you can do that in this way too</p>
<pre><code>mylist = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenadnow']
mylist = [i for i in set(mylist)]
</code></pre>
<p>output will be</p>
<pre><code>[u'nowplaying', u'job', u'debate', u'PBS', u'thenadnow']
</code></pre>
<p>though order will not be preserved. </p>
<p>Another simpler answer could be (without using sets)</p>
<pre><code>&gt;&gt;&gt; t = [v for i,v in enumerate(mylist) if mylist.index(v) == i]
[u'nowplaying', u'PBS', u'job', u'debate', u'thenadnow']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get unique values from <strong>your</strong> list use code below:</p>
<pre><code>trends = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
output = set(trends)
output = list(output)
</code></pre>
<p><strong>IMPORTANT:</strong>
Approach above won't work if any of items in a list is not <a href="https://docs.python.org/2/glossary.html#term-hashable" rel="nofollow">hashable</a> which is case for <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow">mutable</a> types, for instance <a href="https://docs.python.org/2/tutorial/datastructures.html#more-on-lists" rel="nofollow">list</a> or <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">dict</a>.</p>
<pre><code>trends = [{'super':u'nowplaying'}, u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']
output = set(trends)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  TypeError: unhashable type: 'dict'
</code></pre>
<p>That means that you have to be sure that <code>trends</code> list would always contains only hashable items otherwise you have to use more sophisticated code:</p>
<pre><code>from copy import deepcopy

try:
    trends = [{'super':u'nowplaying'}, [u'PBS',], [u'PBS',], u'nowplaying', u'job', u'debate', u'thenandnow', {'super':u'nowplaying'}]
    output = set(trends)
    output = list(output)
except TypeError:
    trends_copy = deepcopy(trends)
    while trends_copy:
        trend = trends_copy.pop()
        if trends_copy.count(trend) == 0:
            output.append(trend)
print output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am surprised that nobody so far has given a direct order-preserving answer:</p>
<pre><code>def unique(sequence):
    """Generate unique items from sequence in the order of first occurrence."""
    seen = set()
    for value in sequence:
        if value in seen:
            continue

        seen.add(value)

        yield value
</code></pre>
<p>It will generate the values so it works with more than just lists, e.g. <code>unique(range(10))</code>. To get a list, just call <code>list(unique(sequence))</code>, like this:</p>
<pre><code>&gt;&gt;&gt; list(unique([u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']))
[u'nowplaying', u'PBS', u'job', u'debate', u'thenandnow']
</code></pre>
<p>It has the requirement that each item is hashable and not just comparable, but most stuff in Python is and it is O(n) and not O(n^2), so will work just fine with a long list.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>At the begin of your code just declare your output list as empty: <code>output=[]</code></li>
<li>Instead of your code you may use this code <code>trends=list(set(trends))</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use sets. Just to be clear, I am explaining what is the difference between a list and a set. 
sets are unordered collection of unique elements.Lists are ordered collection of elements.
So,</p>
<pre><code>    unicode_list=[u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job',u'debate', u'thenandnow']
    list_unique=list(set(unicode_list))
    print list_unique
[u'nowplaying', u'job', u'debate', u'PBS', u'thenandnow']
</code></pre>
<p>But: Do not use list/set in naming the variables. It will cause error: 
EX: Instead of use list instead of unicode_list in the above one. </p>
<pre><code>list=[u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job',u'debate', u'thenandnow']
        list_unique=list(set(list))
        print list_unique
    list_unique=list(set(list))
TypeError: 'list' object is not callable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict


seq = [u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']

# Unordered (hashable items)
list(set(seq))
# Out: ['thenandnow', 'PBS', 'debate', 'job', 'nowplaying']

# Order-preserving
list(OrderedDict.fromkeys(seq))
# Out: ['nowplaying', 'PBS', 'job', 'debate', 'thenandnow']
</code></pre>
<p>Alternatively in Python 3.6+:</p>
<pre><code># Order-preserving
list(dict.fromkeys(seq))
# Out: ['nowplaying', 'PBS', 'job', 'debate', 'thenandnow']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use set to de-duplicate a list, return as list</p>
<pre><code>def get_unique_list(lst):
        if isinstance(lst,list):
            return list(set(lst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Set is a collection of ordered and unique elements. So, you can use set as below to get a unique list:</p>
<pre><code>unique_list = list(set([u'nowplaying', u'PBS', u'PBS', u'nowplaying', u'job', u'debate', u'thenandnow']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get unique elements from a list and keep their original order, then you may employ <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>OrderedDict</code></a> data structure from Python's standard library:</p>
<pre><code>from collections import OrderedDict

def keep_unique(elements):
    return list(OrderedDict.fromkeys(elements).keys())

elements = [2, 1, 4, 2, 1, 1, 5, 3, 1, 1]
required_output = [2, 1, 4, 5, 3]

assert keep_unique(elements) == required_output
</code></pre>
<p>In fact, if you are using Python ≥ 3.6, you can use plain <code>dict</code> for that:</p>
<pre><code>def keep_unique(elements):
    return list(dict.fromkeys(elements).keys())
</code></pre>
<p>It's become possible after the introduction of "compact" representation of dicts. Check it out <a href="https://docs.python.org/3.6/whatsnew/3.6.html#other-language-changes" rel="nofollow">here</a>. Though this "considered an implementation detail and should not be relied upon".</p>
</div>
<div class="post-text" itemprop="text">
<p>My solution to check contents for uniqueness but preserve the original order:
</p>
<pre><code>def getUnique(self):
    notunique = self.readLines()
    unique = []
    for line in notunique: # Loop over content
        append = True # Will be set to false if line matches existing line
        for existing in unique:
            if line == existing: # Line exists ? do not append and go to the next line
                append = False
                break # Already know file is unique, break loop
        if append: unique.append(line) # Line not found? add to list
    return unique
</code></pre>
<p>Edit:
Probably can be more efficient by using dictionary keys to check for existence instead of doing a whole file loop for each line, I wouldn't use my solution for large sets. </p>
</div>
<div class="post-text" itemprop="text">
<p>I know this is an old question, but here's my unique solution: class inheritance!:</p>
<pre><code>class UniqueList(list):
    def appendunique(self,item):
        if item not in self:
            self.append(item)
            return True
        return False
</code></pre>
<p>Then, if you want to uniquely append items to a list you just call appendunique on a UniqueList. Because it inherits from a list, it basically acts like a list, so you can use functions like index() etc. And because it returns true or false, you can find out if appending succeeded (unique item) or failed (already in the list).</p>
<p>To get a unique list of items from a list, use a for loop appending items to a UniqueList (then copy over to the list).</p>
<p>Example usage code:</p>
<pre><code>unique = UniqueList()

for each in [1,2,2,3,3,4]:
    if unique.appendunique(each):
        print 'Uniquely appended ' + str(each)
    else:
        print 'Already contains ' + str(each)
</code></pre>
<p>Prints:</p>
<pre><code>Uniquely appended 1
Uniquely appended 2
Already contains 2
Uniquely appended 3
Already contains 3
Uniquely appended 4
</code></pre>
<p>Copying to list:</p>
<pre><code>unique = UniqueList()

for each in [1,2,2,3,3,4]:
    unique.appendunique(each)

newlist = unique[:]
print newlist
</code></pre>
<p>Prints:</p>
<pre><code>[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For long arrays</p>
<pre><code>s = np.empty(len(var))

s[:] = np.nan

for  x in  set(var):

    x_positions = np.where(var==x)

    s[x_positions[0][0]]=x


sorted_var=s[~np.isnan(s)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this function, it's similar to your code but it's a dynamic range.</p>
<pre><code>def unique(a):

    k=0
    while k &lt; len(a):
        if a[k] in a[k+1:]:
            a.pop(k)
        else:
            k=k+1



    return a
</code></pre>
</div>
<span class="comment-copy">Does the order matter?  I.e. do you want the order of first occurrence, or would ["PBS", "debate", "job", "thenandnow", "nowplaying"] work as well?</span>
<span class="comment-copy">I think using the buildin type set(your list) should meet your requirement. FYI, I am really curious what your 'print output' is, in which your code should work correctly.</span>
<span class="comment-copy">I am quite confused, because this exact same input works for me. I got output list that is exactly what OP wanted. I suspect OP made a mistake somewhere in his code.</span>
<span class="comment-copy">all the top solutions work for the example of the question, but they don't answer the questions. They all use <code>set</code>, which is dependent on the types found in the list.  e.g:  <code>d = dict();l = list();l.append (d);set(l)</code> will lead to <code>TypeError: unhashable type: 'dict</code>.  <code>frozenset</code> instead won't save you. Learn it the real pythonic way: implement a nested n^2 loop for a simple task of removing duplicates from a list. You can, then optimize it to n.log n. Or implement a real hashing for your objects. Or marshal your objects before creating a set for it.</span>
<span class="comment-copy">A solution using OrderedDict from collections: list(collections.OrderedDict.fromkeys(example_list))</span>
<span class="comment-copy">If you need to maintain the set order there is also a library on PyPI: <a href="https://pypi.python.org/pypi/ordered-set" rel="nofollow noreferrer">pypi.python.org/pypi/ordered-set</a></span>
<span class="comment-copy">why lists have '.append' and sets have '.add' ??</span>
<span class="comment-copy">Sorry, this is rather a philosophical question. I think it is meant to have a different name, so that it is clear that when you are adding something in the set your item will be lost if an equal item is already in the list.</span>
<span class="comment-copy">"append" means to add to the end, which is accurate and makes sense for lists, but sets have no notion of ordering and hence no beginning or end, so "add" makes more sense for them.</span>
<span class="comment-copy">the 'sets' module is deprecated, yes.  So you don't have to 'import sets' to get the functionality.  if you see <code>import sets; output = sets.Set()</code> that's deprecated  This answer uses the built-in 'set' class <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#set</a></span>
<span class="comment-copy">Please note, the result will be unordered.</span>
<span class="comment-copy">To keep the list sorted, simply do <code>mylist = list(sorted(set(mylist)))</code>.</span>
<span class="comment-copy">@Ninjakannon your code will sort the list alphabetically. That does not have to be the order of the original list.</span>
<span class="comment-copy">@johk95 True, I should have clarified. However, it is also possible to provide your own sorting method to <code>sorted</code>.</span>
<span class="comment-copy">Note a neat way to do this in python 3 is <code>mylist = [*{*mylist}]</code>. This is an <code>*arg</code>-style set-expansion followed by an <code>*arg</code>-style list-expansion.</span>
<span class="comment-copy">Nice, so <code>a = list(set(a))</code> gets the unique items.</span>
<span class="comment-copy">Brian, <code>set(a)</code> is sufficient to "get the unique items". You only need to construct another list if you specifically need a list for some reason.</span>
<span class="comment-copy">Note the result will be unordered.</span>
<span class="comment-copy">I try to understand why <code>unique = [used.append(x) for x in mylist if x not in used]</code> is not working. Why do we have to put <code>and (used.append(x) or True) </code>at the end of the list comprehensions?</span>
<span class="comment-copy">@Monica basically, because <code>used.append(x)</code> adds <code>x</code> into <code>used</code> but the return value from this function is <code>None</code>, so if we skip the <code>or True</code> part, we get: <code>x not in used and None</code> which will always evaluate to <code>False</code> and the <code>unique</code> list will remain empty.</span>
<span class="comment-copy">So if I understood it correctly, we use logic in this problem. if a or b is TRUE we are getting TRUE. Though I'm still wondering how Python know that it will be an object instead of TRUE logic. Sorry if it is a stupid question, but I'd love to understand it</span>
<span class="comment-copy">Don't worry, there are no stupid questions, only stupid answers :) I updated my answer with an attempt to better explain how it works, hope I make it clear and you can understand it now.</span>
<span class="comment-copy">Even faster is using a set: <code>timeit.timeit('[x for x in mylist if x not in used and not used.add(x)]', setup='used = set();'+setup)</code></span>
<span class="comment-copy">This has terrible performance (O(n^2)) for large lists and is neither simpler nor easier to read than <code>list(set(array))</code>. The only advantage is the preservation of order, which was not asked for.</span>
<span class="comment-copy">This is great for simple scripts where you want to keep order and don't care about speed.</span>
<span class="comment-copy">@JeffCharter- added one that maintains order and is mucho faster :)</span>
<span class="comment-copy">@MMT - <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">list comprehension</a></span>
<span class="comment-copy">I really appreciate you taking the time to break out the timestamps too</span>
<span class="comment-copy">It's wrong solution. The order of the elements might be changed</span>
<span class="comment-copy">yes, it does sort the values.</span>
<span class="comment-copy">this answer deserves more updoots: for unhashable types where you want to check <i>value</i> uniqueness rather than <i>identity</i> uniqueness the simple logic is correct - meaning it's more correct in general.</span>
<span class="comment-copy">Could you add some explanation on your code for OP?</span>
<span class="comment-copy">I tried your answer, this is a good answer but with an explanation it will turns into a great answer :)</span>
<span class="comment-copy">set - unordered collection of unique elements. List of elements can be passed to set's constructor. So, pass list with duplicate elements, we get set with unique elements and transform it back to list then get list with unique elements. I can say nothing about performance and memory overhead, but I hope, it's not so important with small lists.</span>
<span class="comment-copy">And, from dinamic values?</span>
<span class="comment-copy">@e-info128 Quite similarly, put those in a <code>set</code>.</span>
<span class="comment-copy">This is a <code>set</code>, not a <code>dict</code>.</span>
<span class="comment-copy">What's the reason for <code>seen_add = seen.add</code> ?</span>
<span class="comment-copy">It saves one attribute lookup for each element.</span>
<span class="comment-copy">What is the purpose of <code>ifilterfalse(seen.__contains__, iterable)</code>? Is there a benefit versus <code>for element not in seen:...</code> ?</span>
<span class="comment-copy">please add some explanation - this is only code. If you look at the other answers, they always go with code <i>and</i> explanation.</span>
<span class="comment-copy">@Alexander <a href="http://meta.stackoverflow.com/questions/262695/new-answer-deletion-option-code-only-answer/311766#311766">not always useless, but typically is</a>.</span>
<span class="comment-copy">Try not to use [] as a default parameter. It is the same instance that is used every time so modifications affect the next time the function is called. Not so much of an issue here but it's still unnecessary.</span>
<span class="comment-copy">@Trengot Exactly. It should be lst=None, and add a line lst = [] if lst is None</span>
<span class="comment-copy">@xis: or simply <code>lst or []</code></span>
<span class="comment-copy">Please note, the result will be unordered.</span>
<span class="comment-copy">Please note, the result will be unordered.</span>
<span class="comment-copy">This approach will change the order of the elements in the list which might be undesirable behavior</span>
<span class="comment-copy">Although this code may answer the question, providing additional context regarding <i>why</i> and/or <i>how</i> it answers the question would significantly improve its long-term value.  Please <a href="https://stackoverflow.com/posts/37549596/edit">edit</a> your answer to add some explanation.</span>
<span class="comment-copy">I'd like to really drive home that last point. Having a dict internally keep the order of insertion is is an implementation detail of CPython, and there is no guarantee that it will work on another Python engine (like PyPy or IronPython), and it can change in future versions without breaking backward compatibility. So please don't depend on that behaviour in any production-ready code.</span>
<span class="comment-copy">@BerislavLopac, I absolutely agree. It may change and it does not follow "Readability counts" rule. But it's still convenient for one-off scripts and REPL sessions.</span>
<span class="comment-copy">In fact -- to correct my own point -- starting with Python 3.7 the ordered dicts are actually a language feature instead of an implementation quirk. See the answer at <a href="https://stackoverflow.com/a/39980744/122033">stackoverflow.com/a/39980744/122033</a></span>
