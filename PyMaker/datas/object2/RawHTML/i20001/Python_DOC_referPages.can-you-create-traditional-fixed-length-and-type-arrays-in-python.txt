<div class="post-text" itemprop="text">
<p>I am teaching the A level syllabus by the Cambridge exam board. One typical question on the practical paper is this:</p>
<blockquote>
<p>In a programming language of your choice, declare an array of ten integers and then initializes it.</p>
</blockquote>
<p>I have this:</p>
<pre><code>myArray = []        #create the array

for i in range(10): # initializes to 0
    myArray.append(0)
</code></pre>
<p>I believe this is what most people would do in Python? However, unlike Pascal etc it does not strictly answer the question as the lists in Python are essentially dynamic arrays with the added problem of not restricting the data type of each element. Can I declare a specific size array and type  like in Pascal, instead of an empty dynamic list, without any type of loop and restricts the type of the array?</p>
<p>Something like (pseudo code):</p>
<pre><code>myArray[10] : integer
</code></pre>
<p>This is a none commercial question but an educational one.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="http://docs.python.org/library/array.html" rel="noreferrer">array module</a></p>
<pre><code>a = array.array('i',(0 for _ in xrange(10)))
</code></pre>
<p>Arrays require that all elements be the same type, as specified when it is created. They can still be appended to however</p>
<p>If you were really determined, you could use the <a href="http://docs.python.org/library/ctypes.html#arrays" rel="noreferrer">ctypes</a> module to build a C array. But, that is probably not very pythonic as it forces you to do more low level stuff.</p>
<pre><code>import ctypes
intArray10 = ctypes.c_int * 10
myArray = intArray10(*(0 for _ in xrange(10)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try to use the <a href="http://docs.python.org/library/array.html" rel="noreferrer"><code>array</code> module</a> to specify the type of your array:</p>
<pre><code>import array
a = array.array('i') # Define an integer array.
</code></pre>
<p>You can then add the elements you want to the array. I'm not sure whether you can predefine the size your array should have, though. If you want an array of ten integer elements, each element being zero, you could do:</p>
<pre><code>a = array.array('i', [0]*10)
</code></pre>
<p>As described in the documentation, the <code>'i'</code> forces the elements of the array to be integers. Python 2.6 will throw a <code>DeprecationWarning</code> if you try to insert a float in an array of integers, but will cast the float as an int:</p>
<pre><code>&gt;&gt;&gt; a[0]=3.14159
&gt;&gt;&gt; a
&gt;&gt;&gt; array('i', [3, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</code></pre>
<hr/>
<p>Alternatively, you could use the <a href="http://docs.scipy.org/doc/numpy/reference/" rel="noreferrer"><code>numpy</code> package</a>, which lets you define both the size and the type of the array.</p>
<pre><code>import numpy as np
a = np.empty(10, dtype=int) # Define a integer array with ten elements
</code></pre>
<p>The <code>np.empty</code> just reserves some space in memory for the array, it doesn't initialize it. If you need an array of 0, you could do:</p>
<pre><code>a[:] = 0
</code></pre>
<p>or directly use the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html" rel="noreferrer"><code>np.zeros</code> function</a>:</p>
<pre><code>a = np.zeros(10, dtype=int)
</code></pre>
<p>Here again, inserting a float in an array of integers will silently convert the float to integer.</p>
<p>Note a difference between numpy and <code>array</code>: once you define an array in <code>numpy</code>, you cannot change its size without having to recreate an array. In that sense, it satisfies your requirement of "10 and only 10 integers". By contrast, a <code>array.array</code> object can be seen as a list with a fixed element type: the array is dynamic, you can increase its size.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a more pythonic way to initialize the list:</p>
<pre><code>&gt;&gt;&gt; l = [0] * 10
&gt;&gt;&gt; l
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; l[1] = 1
&gt;&gt;&gt; l
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
</code></pre>
<p>This, of course, does not answer the question how to create such an un-pythonic thing as a list of restricted elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>As has already been mentioned <code>l = [0] * 10</code> initializes a list with 10 zeros.</p>
<p>While it is possible to add more elements, you cannot do so by mistake.</p>
<pre><code>&gt;&gt;&gt; l = [0] * 10
&gt;&gt;&gt; l[10] = 1

Traceback (most recent call last):
    l[10] = 1
IndexError: list assignment index out of range
</code></pre>
<p>If you want to <em>append</em> to the list, you need to call <code>.append()</code> or some other method that adds new elements. Thus, you cannot add elements by accident, you need to be <strong>explicit</strong> about it.</p>
<p>In many other languages, you could just replace the array with one that has a different size. Point being, you can often find a way around such limitations, and I think it's good to just use the easiest thing that works and is well understood.</p>
<p>For me, that would be</p>
<pre><code>&gt;&gt;&gt; l = [0] * 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class myTypedArray:

    def __init__(self,mytype):
        self._internalList =    []
        self._internalType =    mytype

    def add(self,x):
       if type(x) == self._internalType:
            self._internalList.append(x)
       #else raise an Error to warn User of typedArray                                                   

    def __str__(self):
       s = ""
       for x in self._internalList:
            s+=str(x)
       return s


x = myTypedArray(int)

x.add(1)
x.add("xyz") # will not be added

print x # output: 1
</code></pre>
<p>If you want to restrict the size, you can track the size and throw an exception. So extending types in Python is very easy as you can see. The whole point of the static typed languages such as C, is to be closer to hardware. This example myTypedArray is not efficient, so there is usually no reason to use static types.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it using <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">array</a> module. array module is part of python standard library:</p>
<pre><code>from array import array
from itertools import repeat

a = array("i", repeat(0, 10))
# or
a = array("i", [0]*10)
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools%20repeat#itertools.repeat" rel="nofollow noreferrer">repeat</a> function repeats 0 value 10 times. It's more memory efficient than [0]*10, since it doesn't allocate memory, but repeats returning the same number x number of times.</p>
</div>
<span class="comment-copy">check this <a href="http://stackoverflow.com/questions/5944708/python-forcing-a-list-to-a-fixed-size" title="python forcing a list to a fixed size">stackoverflow.com/questions/5944708/…</a> &amp; <a href="http://stackoverflow.com/questions/521674/initializing-a-list-to-a-known-number-of-elements-in-python" title="initializing a list to a known number of elements in python">stackoverflow.com/questions/521674/…</a></span>
<span class="comment-copy">I think as in the answer above ,it solves only partially the problem. This has a loop which I am trying to omit.Also, if I append a none int will it fail as expected as well as prevent a.append() statements?</span>
<span class="comment-copy">@pythonMan There is no loop in the code I posted. It contains a generator expression which I specifically chose for this example so a full list never exists in memory until you have created the array. If you try to append <code>None</code> to this array you will get an error as <code>None</code> is of type <code>NoneType</code> and is therefore not an <code>int</code></span>
<span class="comment-copy">@pythonMan The array module example will allow you to append. If you don't want to allow appending then use an array from ctypes.</span>
<span class="comment-copy">You make a valid point.  C is not the chosen language, so it would fail in the exam question if you had stated that Python was your chosen language. I think Python simply does not have built in fixed arrays in its core without importing or work arounds.</span>
<span class="comment-copy">Click the up button that's just above the vote count</span>
<span class="comment-copy">This was a solution I thought of but numpy is not part of the chosen language which is Python but an added module perhaps written in C which is a different language. However, I will offer this one to candidates as well.</span>
<span class="comment-copy">Apologies, you are correct. My final question is: does the 'i' variable actually restrict the array to integers and give an error if another type is appended and is the array module written in Python and not C?. If so this would be the perfect answer? Oh well I shall fire up the shell:)</span>
<span class="comment-copy">@pythonMan True, numpy is an additional dependence. However, it's common enough a package (especially in scientific fields). For your second question: <code>array</code> will complain if you try to add a <code>float</code> to an <code>int</code> array, while <code>numpy</code> will silently cast your float to an int.</span>
<span class="comment-copy">@pythonMan Yes, as I stated in a comment elsewhere the <code>'i'</code> in the array does restrict it to <code>int</code>s only.</span>
<span class="comment-copy">Nearly there. Unfortunately, it passes all parts of the question except one: it is not fixed at 10 integers but is still a dynamic array that allows overflow, although it disallows none integers!</span>
<span class="comment-copy">Thanks for your reply. This answers two thirds of the question but you can still add none integers.Is there a way to prevent anything other than integers. Also you can append another integer without an overflow error so strictly it is not a fixed array?</span>
<span class="comment-copy">@pythonMan Yes, you can append another integer or any other object for that matter. <code>l</code> is a regular Python list with no special limitations.</span>
<span class="comment-copy">I am afraid as it is an education question and not a practical one that I was looking for built in Python commands rather than work arounds and class definitions.</span>
<span class="comment-copy">Well it's not possible to implement using built-in types. This solutions works. You can add maxsize to the definition and check with each addition if maxsize is reached. Builtin types <b>are</b> dynamic, so you have to override the methods yourself. If you want to create your own types, you will have to use class. That's what it is there for.</span>
<span class="comment-copy">Yes, I get this, but the original question is not about creating your own types; it is about using the original built in features of the language. You only have space for 3-4 lines of code on the paper. Classes do not appear on this paper anyway. I appreciate you are correct in everything you say but the question addresses built in arrays not classes.</span>
<span class="comment-copy">Then the answer is, it is not possible. Python builtin types are dynamic by nature.</span>
<span class="comment-copy">phantOm: I received an answer from the exam board which was that my initial solution was fine as long as the student commented why he had used a dynamic array. A teacher then commenting on it on te discussion thread said that it did not answer the question as I also proposed to stackflow's audience. Therefore to conclude: my way is fine but it is still causing controversy amongst teachers!</span>
