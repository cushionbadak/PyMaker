<div class="post-text" itemprop="text">
<p>Im working on converting epoch timestamps to dates in different timezones with pytz.  What I am trying to do is create a DateTime object that accepts an Olson database timezone and an epoch time and returns a localized datetime object.  Eventually I need to answer questions like "What hour was it in New York at epoch time 1350663248?"</p>
<p>Something is not working correctly here:</p>
<pre><code>import datetime, pytz, time

class DateTime:
    def __init__(self, timezone, epoch):
        self.timezone = timezone
        self.epoch = epoch
        timezoneobject = pytz.timezone(timezone)
        datetimeobject = datetime.datetime.fromtimestamp( self.epoch )
        self.datetime = timezoneobject.localize(datetimeobject)

    def hour(self):
        return self.datetime.hour

if __name__=='__main__':
    epoch = time.time()
    dt = DateTime('America/Los_Angeles',epoch)
    print dt.datetime.hour
    dt = DateTime('America/New_York',epoch)
    print dt.datetime.hour
</code></pre>
<p>This prints the same hour, whereas one should be 3 or so hours ahead.  Whats going wrong here?  I'm a total Python beginner, any help is appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>datetime.fromtimestamp(self.epoch)</code> returns localtime that shouldn't be used with an arbitrary timezone.localize(); you need <code>utcfromtimestamp()</code> to get datetime in UTC and then convert it to a desired timezone:</p>
<pre><code>from datetime import datetime
import pytz

# get time in UTC
utc_dt = datetime.utcfromtimestamp(posix_timestamp).replace(tzinfo=pytz.utc)

# convert it to tz
tz = pytz.timezone('America/New_York')
dt = utc_dt.astimezone(tz)

# print it
print(dt.strftime('%Y-%m-%d %H:%M:%S %Z%z'))
</code></pre>
<p>Or a simpler alternative is to construct from the timestamp directly:</p>
<pre><code>from datetime import datetime
import pytz

# get time in tz
tz = pytz.timezone('America/New_York')
dt = datetime.fromtimestamp(posix_timestamp, tz)
# print it
print(dt.strftime('%Y-%m-%d %H:%M:%S %Z%z'))
</code></pre>
<p>It converts from UTC implicitly in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>For creating the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><strong><code>datetime</code></strong></a> object belonging to particular timezone from a unix timestamp,  you may pass the <a href="http://pytz.sourceforge.net/" rel="nofollow noreferrer"><strong><code>pytz</code></strong></a> object as a <code>tz</code> parameter while creating your <code>datetime</code>. For example: </p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import pytz

&gt;&gt;&gt; datetime.fromtimestamp(1350663248, tz= pytz.timezone('America/New_York'))
datetime.datetime(2012, 10, 19, 12, 14, 8, tzinfo=&lt;DstTzInfo 'America/New_York' EDT-1 day, 20:00:00 DST&gt;)
</code></pre>
<p>You can get the list of all timezones using <strong><a href="http://pytz.sourceforge.net/#helpers" rel="nofollow noreferrer"><code>pytz.all_timezones</code></a></strong> which <em>returns exhaustive list of the timezone names that can be used</em>.</p>
<p>Also take a look at <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" rel="nofollow noreferrer">List of tz database time zones</a> wiki.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>epochdt = datetime.datetime.fromtimestamp(epoch)
timezone1 = timezone("Timezone/String")
adjusted_datetime = timezone1.localize(epochdt)
</code></pre>
<p>Working from memory, so excuse any syntax errors, but that should get you on the right track.</p>
<p>EDIT: Missed the part about knowing the hour,etc. Python has great <a href="http://docs.python.org/library/datetime.html" rel="nofollow">Time/Date Formatting</a>. At pretty much the bottom of that link is the table showing how to pull different attributes from the datetime object.</p>
</div>
<span class="comment-copy">You are using the wrong terminology here. The epoch is <i>always</i> 1-1-1970, midnight UTC. What you have is a UNIX timestamp, which is an offset from the epoch. See <a href="https://en.wikipedia.org/wiki/Unix_epoch" rel="nofollow noreferrer">en.wikipedia.org/wiki/Unix_epoch</a></span>
<span class="comment-copy">just a variable name, you could call it <code>epoch_time</code> it makes no difference to the problem</span>
<span class="comment-copy">That's what the OP is doing.</span>
<span class="comment-copy">Thats pretty similar to the initial approach, but implementing this still prints out the same hour (in the <b>main</b> code above).  Basically its 8am where I am right now.  What im trying to figure out is how to get the above code to print 8 and 11m ie for America/Los_Angeles and America/New_York respectively.</span>
