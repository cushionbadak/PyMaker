<div class="post-text" itemprop="text">
<p>Does Python have something like below?</p>
<pre><code>for item in items #where item&gt;3:
  #.....
</code></pre>
<p>I mean Python 2.7 and Python 3.3 both together.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can combine the loop with a <a href="http://docs.python.org/reference/expressions.html#grammar-token-generator_expression" rel="noreferrer">generator expression</a>:</p>
<pre><code>for x in (y for y in items if y &gt; 10):
    ....
</code></pre>
<p><a href="http://docs.python.org/2/library/itertools.html#itertools.ifilter" rel="noreferrer"><code>itertools.ifilter</code></a> (py2) / <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer"><code>filter</code></a> (py3) is another option:</p>
<pre><code>items = [1,2,3,4,5,6,7,8]

odd = lambda x: x % 2 &gt; 0

for x in filter(odd, items):
    print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You mean something like this: -</p>
<pre><code>item_list = [item for item in items if item &gt; 3]
</code></pre>
<p>Or, you can use <code>Generator</code> expression, that will not create a new list, rather returns a generator, which then returns the next element on each iteration using <code>yield</code> method: -</p>
<pre><code>for item in (item for item in items if item &gt; 3):
    # Do your task
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There isn't a special syntax like the <code>where</code> in your question, but you could always just use an <code>if</code> statement within your <code>for</code> loop, like you would in any other language:</p>
<pre><code>for item in items:
    if item &gt; 3:
        # Your logic here
</code></pre>
<p>or a guard clause (again, like any other language):</p>
<pre><code>for item in items:
    if not (item &gt; 3): continue

    # Your logic here
</code></pre>
<p>Both of these boring approaches are almost as succinct and readable as a special syntax for this would be.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use an explicit <code>if</code> statement:</p>
<pre><code>for item in items:
    if item &gt; 3:
       # ...
</code></pre>
<p>Or you could create a generator if you need a name to iterate later, <a href="https://stackoverflow.com/a/539024/4279">example</a>:</p>
<pre><code>filtered_items = (n for n in items if n &gt; 3)
</code></pre>
<p>Or you could pass it to a function:</p>
<pre><code>total = sum(n for n in items if n &gt; 3)
</code></pre>
<p>It might be matter of taste but I find a for-loop combined with inlined genexpr such as <code>for x in (y for y in items if y &gt; 3):</code> to be ugly compared to the above options.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 and Python 2.7 both have <code>filter()</code> function which allows extracting items out of a list for which a function (in the example below, that's lambda function) returns <code>True</code>:</p>
<pre><code>&gt;&gt;&gt; nums=[1,2,3,4,5,6,7,8]
&gt;&gt;&gt; for item in filter(lambda x: x&gt;5,nums):
...     print(item)
... 
6
7
8
</code></pre>
<p>Omitting function in <code>filter()</code> will extract only items that are <code>True</code>, as stated in <code>pydoc filter</code></p>
</div>
<span class="comment-copy">This is the right way to do it as no intermediate array is produced. This is called a generator expression. IMO its a pity you cant just write the shorter <code>for x in items if x&gt;10:</code> though.</span>
<span class="comment-copy">@MichaelAnderson: yeah, that would be neat. This syntax is said to have been rejected by Guido, I haven't found a proof though.</span>
<span class="comment-copy">@georg could you please elaborate in what would be the <code>itertools.ifilter</code> usage?</span>
<span class="comment-copy">@Sebasti√°nVansteenkiste: see update</span>
<span class="comment-copy">Oh! I didn't realize you meant the <code>filter</code> function, yes, that's more comftible for writing some things. I should probably start paying attention to performance, so far I've settled for making generator expressions as readable as possible, but I until I sit down and measure with clocks I probably won't know if my solutions are "good enough"</span>
<span class="comment-copy">@Downvoter.. Why a downvote? Can the downvoter comment?</span>
<span class="comment-copy">This is wrong..</span>
<span class="comment-copy">@J.F.Sebastian Ah sorry, should have <code>if</code> after for.</span>
<span class="comment-copy">The top-rated solution with a generator expression is more functional and indicates exactly what the list contains on the line of the for expression.</span>
<span class="comment-copy">@Neil I don't think this warranted a downvote. Whether "more functional" is a good thing is a question of taste. This approach uses an extra line of code, which might seem verbose in some cases; the one-line generator crams the expression for the initial sequence and the predicate expression onto one line (and introduces an extra 'for x in' besides) which may be trying to cram too much onto one line if the sequence expression and predicate expression are long. The generator approach also uses a language feature newbies may not be familiar with. Which is best depends upon context and audience.</span>
