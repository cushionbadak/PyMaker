<div class="post-text" itemprop="text">
<p>In Python 2, to get a string representation of the hexadecimal digits in a string, you could do</p>
<pre><code>&gt;&gt;&gt; '\x12\x34\x56\x78'.encode('hex')
'12345678'
</code></pre>
<p>In Python 3, that doesn't work anymore (tested on Python 3.2 and 3.3):</p>
<pre><code>&gt;&gt;&gt; '\x12\x34\x56\x78'.encode('hex')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
LookupError: unknown encoding: hex
</code></pre>
<p>There is at least <a href="https://stackoverflow.com/a/7795102/20670">one answer</a> here on SO that mentions that the <code>hex</code> codec has been removed in Python 3. But then, <a href="http://docs.python.org/py3k/library/codecs.html#standard-encodings" rel="noreferrer">according to the docs</a>, it was reintroduced in Python 3.2, as a "bytes-to-bytes mapping".</p>
<p>However, I don't know how to get these "bytes-to-bytes mappings" to work:</p>
<pre><code>&gt;&gt;&gt; b'\x12'.encode('hex')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'bytes' object has no attribute 'encode'
</code></pre>
<p>And the docs don't mention that either (at least not where I looked). I must be missing something simple, but I can't see what it is.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to go via the <a href="https://docs.python.org/3/library/codecs.html"><code>codecs</code></a> module and the <a href="https://docs.python.org/3/library/codecs.html#binary-transforms"><code>hex_codec</code></a> codec (or its <code>hex</code> alias if available<sup>*</sup>):</p>
<pre><code>codecs.encode(b'\x12', 'hex_codec')
</code></pre>
<p><sub>* From the documentation: <em>"Changed in version 3.4: Restoration of the aliases for the binary transforms"</em>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Yet another way using <a href="http://docs.python.org/3/library/binascii.html#binascii.hexlify"><code>binascii.hexlify()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(b'\x12\x34\x56\x78')
b'12345678'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/base64.html#base64.b16encode" rel="noreferrer"><code>base64.b16encode()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b16encode(b'\x12\x34\x56\x78')
b'12345678'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/binascii.html" rel="nofollow"><code>binascii</code></a> methods are easier by the way:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; x=b'test'
&gt;&gt;&gt; x=binascii.hexlify(x)
&gt;&gt;&gt; x
b'74657374'
&gt;&gt;&gt; y=str(x,'ascii')
&gt;&gt;&gt; y
'74657374'
&gt;&gt;&gt; x=binascii.unhexlify(x)
&gt;&gt;&gt; x
b'test'
&gt;&gt;&gt; y=str(x,'ascii')
&gt;&gt;&gt; y
'test'
</code></pre>
</div>
<span class="comment-copy">see this answer: <a href="http://stackoverflow.com/a/2340358/1298523">stackoverflow.com/a/2340358/1298523</a></span>
<span class="comment-copy">I would argue against closing this as a dupe. This question is specifically about Python 3.2 where the <code>hex</code> codec is officially back (but harder to find). The linked question is about Python 3.1.</span>
<span class="comment-copy">Don't you mean <code>codecs.encode(b'\x12', 'hex_codec')</code>? With <code>'hex'</code> I only get <code>LookupError: unknown encoding: hex</code></span>
<span class="comment-copy">The docs say <code>hex</code> is an alias in 3.2, but my 3.2.3 installation had the same error.</span>
<span class="comment-copy">While I can't find a reference to a bugfix, it looks like <code>hex</code> is working again as of 3.4.</span>
<span class="comment-copy">Thankyou ! you save my day :)</span>
<span class="comment-copy">So you took a glance at the so-called dupe, yes? :)</span>
<span class="comment-copy">No, that's the way I usually do it :)</span>
<span class="comment-copy"><code>str(x,'ascii')</code> is better spelt <code>x.decode('ascii')</code></span>
<span class="comment-copy"><code>binascii</code> also seems faster, for anyone who cares.</span>
