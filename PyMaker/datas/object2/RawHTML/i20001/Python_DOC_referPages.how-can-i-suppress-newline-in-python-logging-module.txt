<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3118059/how-to-write-custom-python-logging-handler">How to write custom python logging handler?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I would like to cancel newline when I do for example log.info(“msg”). 
When we do “print” it just </p>
<pre><code>print msg,
</code></pre>
<p>So I need something like coma for logging. </p>
<p>I sow this question 
<a href="https://stackoverflow.com/questions/7168790/suppress-newline-in-python-logging-module">Suppress newline in Python logging module</a>
but can anybody give me reference or a simple example like “Hello world”
Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is what I answered for a <a href="https://stackoverflow.com/questions/7168790">similar question</a>:</p>
<p>The new line, <code>\n</code>, is inserted inside the <code>StreamHandler</code> class's <code>emit(...)</code> method.</p>
<p>If you're really set on <em>fixing</em> this behaviour, then here's an example of how I solved this by <a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow noreferrer">monkey patching</a> the <code>emit(self, record)</code> method inside the logging.StreamHandler class.</p>
<blockquote>
<p>A monkey patch is a way to extend or modify the run-time code of dynamic languages without altering the original source code. This process has also been termed duck punching.</p>
</blockquote>
<p>Here is the custom implementation of <code>emit()</code> that omits line breaks:</p>
<pre><code>def customEmit(self, record):
    # Monkey patch Emit function to avoid new lines between records
    try:
        msg = self.format(record)
        if not hasattr(types, "UnicodeType"): #if no unicode support...
            self.stream.write(msg)
        else:
            try:
                if getattr(self.stream, 'encoding', None) is not None:
                    self.stream.write(msg.encode(self.stream.encoding))
                else:
                    self.stream.write(msg)
            except UnicodeError:
                self.stream.write(msg.encode("UTF-8"))
        self.flush()
    except (KeyboardInterrupt, SystemExit):
        raise
    except:
        self.handleError(record)
</code></pre>
<p>Then you would make a custom logging class (in this case, subclassing from <code>TimedRotatingFileHandler</code>).</p>
<pre><code>class SniffLogHandler(TimedRotatingFileHandler):
    def __init__(self, filename, when, interval, backupCount=0,
                 encoding=None, delay=0, utc=0):

        # Monkey patch 'emit' method
        setattr(StreamHandler, StreamHandler.emit.__name__, customEmit)

        TimedRotatingFileHandler.__init__(self, filename, when, interval,
                                          backupCount, encoding, delay, utc)
</code></pre>
<p>Some people might argue that this type of solution is not <em>Pythonic</em>, or whatever. It might be so, so be careful.</p>
<p>Also, be aware that this will globally patch <code>SteamHandler.emit(...)</code>, so if you are using multiple logging classes, then this patch will affect the other logging classes as well!</p>
<p>Hope that helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not possible (without some serious hacking into the logging module). If you must have this functionality, build up the logging string in parts and log it ony when you are ready to display a log message with newline. </p>
</div>
<span class="comment-copy">So you want to concatenate multiple log entries? The problem is that log entries are like separate pieces of paper. While print keeps writing on the same sheet, log actually always starts with a fresh new one.</span>
<span class="comment-copy">I've found solution here <a href="http://stackoverflow.com/questions/3118059/how-to-write-custom-python-logging-handler?answertab=active#tab-top" title="how to write custom python logging handler">stackoverflow.com/questions/3118059/…</a>  It works for me.</span>
<span class="comment-copy">In Python &gt;= 3.2, one can use <a href="https://docs.python.org/3/library/logging.handlers.html#streamhandler" rel="nofollow noreferrer"><code>StreamHandler.terminate = ''</code></a>.</span>
