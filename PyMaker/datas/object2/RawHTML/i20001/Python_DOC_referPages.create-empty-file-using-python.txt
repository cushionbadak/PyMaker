<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1158076/implement-touch-using-python">Implement touch using Python?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I'd like to create a file with path <code>x</code> using python. I've been using <code>os.system(y)</code> where <code>y = 'touch %s' % (x)</code>. I've looked for a non-directory version of <code>os.mkdir</code>, but I haven't been able to find anything. Is there a tool like this to create a file without opening it, or using system or popen/subprocess?</p>
</div>
<div class="post-text" itemprop="text">
<p><strike>There is no way to create a file without opening it</strike> There is <code>os.mknod("newfile.txt")</code> (<em>but it requires root privileges on OSX</em>). The system call to create a file is actually <code>open()</code> with the <code>O_CREAT</code> flag. So no matter how, you'll always open the file.</p>
<p>So the easiest way to simply create a file without truncating it in case it exists is this:</p>
<pre><code>open(x, 'a').close()
</code></pre>
<p>Actually you could omit the <code>.close()</code> since the refcounting GC of CPython will close it immediately after the <code>open()</code> statement finished - but it's cleaner to do it explicitely and relying on CPython-specific behaviour is not good either.</p>
<p>In case you want <code>touch</code>'s behaviour (i.e. update the mtime in case the file exists):</p>
<pre><code>import os
def touch(path):
    with open(path, 'a'):
        os.utime(path, None)
</code></pre>
<p>You could extend this to also create any directories in the path that do not exist:</p>
<pre><code>basedir = os.path.dirname(path)
if not os.path.exists(basedir):
    os.makedirs(basedir)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Of course there IS a way to create files without opening. It's as easy as calling <code>os.mknod("newfile.txt")</code>.  The only drawback is that this call requires root privileges on OSX.</p>
</div>
<span class="comment-copy">Why is opening bad?</span>
<span class="comment-copy">@LevLevitsky because I'd have to close it again :P. I have to create thousands of files, and just touching the file seems cleaner.</span>
<span class="comment-copy">FYI, while using an external command for this is always bad, the proper way to execute it would be <code>subprocess.call(['touch', x])</code></span>
<span class="comment-copy">@tkbx: "clean" can mean many things to many people. For example, spawning a completely separate process thousands of times is not very clean in my opinion. Sure, on modern OS's running on modern hardware a new process can be spawned pretty quickly, but it's still a crazy amount of overhead for such a small thing.</span>
<span class="comment-copy">How do you think <code>touch</code> does its job? <a href="http://git.savannah.gnu.org/cgit/coreutils.git/tree/src/touch.c?id=f2ef324811cef997a7a7f41c895d2fc8febfb2c7" rel="nofollow noreferrer">git.savannah.gnu.org/cgit/coreutils.git/tree/src/â€¦</a> line 134</span>
<span class="comment-copy">Looks good... "Truncate" is essentially "clear", right?</span>
<span class="comment-copy">Yes, opening a file with the <code>w</code> (write) flag empties it while opening it with <code>a</code> (append) doesn't.</span>
<span class="comment-copy">Refcounting closing the file immediate is not to be relied on. This is not a matter of cleanliness, as refcounting is just an implementation detail. No Python except CPython does it. Want to make your program five times faster with PyPy, or run it in a Java/.NET environment with Jython/IronPython? Well too bad you didn't close those files, now your program is leaking like a sieve ;) It's especially awful since 2.5, as <code>with</code> makes it <i>easier</i> to close the file timely (and even in the face of exceptions and circular references) <b>and</b> the code becomes clearer to boot.</span>
<span class="comment-copy">@ThiefMaster Wouldn't it be better not to talk about specific behavior of CPython in all cases where the question doesn't mention this concrete implementation? :)</span>
<span class="comment-copy">Moreover, most of the people we need to persuade not to do this either don't know what CPython is, or foolishly assume it's the only Python that matters. I saw the reference to CPython, but the entire sentence wasn't preachy enough for my taste :)</span>
<span class="comment-copy">Great point. See also <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer">docs.python.org/3/library/os.html</a></span>
<span class="comment-copy">it's also unix-only. Won't work on windows</span>
