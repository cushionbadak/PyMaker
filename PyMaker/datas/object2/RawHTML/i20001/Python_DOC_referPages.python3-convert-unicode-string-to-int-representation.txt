<div class="post-text" itemprop="text">
<p>As we all know, a computer works with numbers. I'm typing this text right now, the server makes a number out of it and when you want to read it, you'll get text from the server. </p>
<p>How can I do this on my own? </p>
<p>I want to encrypt something with my own algorithm and my algorithm works fine with integers, but now I want to encrypt a String and I don't know how to convert a Unicode string to an integer number and vice versa. </p>
<p>I'm using Python 3. Is there anybody who knows an elegant solution for my problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <a href="http://docs.python.org/py3k/library/functions.html#ord" rel="nofollow noreferrer"><code>ord()</code> function</a>, I think:</p>
<pre><code>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; ord('\u00c2')
192
</code></pre>
<p>This gives you the integer number for the Unicode codepoint. </p>
<p>To convert a whole set of characters use a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [ord(c) for c in 'Hello World!']
[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
</code></pre>
<p>It's inverse is the <a href="http://docs.python.org/py3k/library/functions.html#chr" rel="nofollow noreferrer"><code>chr()</code> function</a>:</p>
<pre><code>&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(193)
'Á'
</code></pre>
<p>Note that when you encrypt end decrypt text, you <em>usually</em> encode text to a binary representation with a <a href="https://en.wikipedia.org/wiki/Character_encoding" rel="nofollow noreferrer"><em>character encoding</em></a>. Unicode text can be encoded with different encodings with different advantages and disadvantages. These days the most commonly used encoding for Unicode text <a href="https://en.wikipedia.org/wiki/UTF-8" rel="nofollow noreferrer">UTF-8</a>, but others exist to. </p>
<p>In Python 3, binary data is represented in the <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer"><code>bytes</code> object</a>, and you encode text to bytes with the <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer"><code>str.encode()</code> method</a> and go back by using <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>bytes.decode()</code></a>:</p>
<pre><code>&gt;&gt;&gt; 'Hello World!'.encode('utf8')
b'Hello World!'
&gt;&gt;&gt; b'Hello World!'.decode('utf8')
'Hello World!'
</code></pre>
<p><code>bytes</code> values are really just sequences, like lists and tuples and strings, but consisting of integer numbers from 0-255:</p>
<pre><code>&gt;&gt;&gt; list('Hello World!'.encode('utf8'))
[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
</code></pre>
<p>Personally, when encrypting, you want to encode and encrypt the resulting bytes. </p>
<p>If all this seems overwhelming or hard to follow, perhaps these articles on Unicode and character encodings can help out:</p>
<ul>
<li><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="nofollow noreferrer">What every developer needs to know about Unicode</a></li>
<li>Ned Batchelder’s <a href="https://nedbatchelder.com/text/unipain.html" rel="nofollow noreferrer">Pragmatic Unicode</a></li>
<li>Python’s <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">Unicode HOWTO</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The usual way to convert the Unicode string to <em>a number</em> is to convert it to the sequence of bytes. The Unicode characters are pure abstraction, each character has its own number; however, there is more ways to convert the numbers to the stream of bytes. Probably the most versatile way of doing that is to encode the string to the UTF-8 encoding. You can choose many ways to get integer number from it. Here is one (I have borrowed the nice string from Ivella -- I hope no bad words are inside :) :</p>
<pre><code>Python 3.2.1 (default, Jul 10 2011, 20:02:51) [MSC v.1500 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; s = "Hello, World, عالَم, ދުނިޔެ, जगत, 世界"
&gt;&gt;&gt; b = s.encode('utf-8')
&gt;&gt;&gt; b
b'Hello, World, \xd8\xb9\xd8\xa7\xd9\x84\xd9\x8e\xd9\x85, \xde\x8b\xde\xaa\xde\x82\xde\xa8\xde\x94\xde\xac, \xe0\xa4\x9c\xe0\xa4\x97\xe0\xa4\xa4, \xe4\xb8\x96\xe7\x95\x8c'
</code></pre>
<p>Now we have sequence of bytes where the ones with the number from 128 to 255 are displayed as hex-coded escape sequences. Let's convert all bytes to their hexcodes as a bytestring.</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; h = binascii.hexlify(b)
&gt;&gt;&gt; h
b'48656c6c6f2c20576f726c642c20d8b9d8a7d984d98ed9852c20de8bdeaade82dea8de94deac2c20e0a49ce0a497e0a4a42c20e4b896e7958c'
</code></pre>
<p>And we can look at it as at a big number written (as text) in hexadecimal notation. The <code>int</code> allows us to convert it to the abstract number that--when printed--is more usually converted to decimal notation.</p>
<pre><code>&gt;&gt;&gt; i = int(h, 16)
&gt;&gt;&gt; i
52620351230730152682202055464811384749235956796562762198329268116226267262806875102376740945811764490696968801603738907493997296927348108
</code></pre>
<p>Now you can store it as a number, encrypt it (although it is more usual to encrypt the earlier sequence of bytes), and later convert it back to the integer. Beware, there is not many languages (and probably no database) that are able to work with that big integers. </p>
<p>Let's go back to the original string. Firstly convert it to the hexadecimal representation (string).</p>
<pre><code>&gt;&gt;&gt; h2 = hex(i)
&gt;&gt;&gt; h2
'0x48656c6c6f2c20576f726c642c20d8b9d8a7d984d98ed9852c20de8bdeaade82dea8de94deac2c20e0a49ce0a497e0a4a42c20e4b896e7958c'
&gt;&gt;&gt; h3 = h2[2:]   # remove the 0x from the beginning
&gt;&gt;&gt; h3
'48656c6c6f2c20576f726c642c20d8b9d8a7d984d98ed9852c20de8bdeaade82dea8de94deac2c20e0a49ce0a497e0a4a42c20e4b896e7958c'
&gt;&gt;&gt; type(h3)
&lt;class 'str'&gt;
</code></pre>
<p>We had to remove the <code>0x</code> as it only says that the rest are the hexadecimal characters that represent the number. Notice that the <code>h3</code> is of the <code>str</code> type. As we are in Python 3 (see the top), the <code>str</code> means Unicode string. The next step is to convert the couples of hexa numerals back to bytes. Let's try <code>unhexlify()</code>:</p>
<pre><code>&gt;&gt;&gt; binascii.unhexlify(h3)
Traceback (most recent call last):
  File "&lt;pyshell#16&gt;", line 1, in &lt;module&gt;
    binascii.unhexlify(h3)
TypeError: 'str' does not support the buffer interface
</code></pre>
<p>Oops! it accept only bytestrings. Then, encode each hexa numeral in Unicode to hexa numeral in the bytestring. The way to go is to encode; however, encoding to ASCII is trivial.</p>
<pre><code>&gt;&gt;&gt; b2 = h3.encode('ascii')  # character by character; subset of ascii only
&gt;&gt;&gt; b2
b'48656c6c6f2c20576f726c642c20d8b9d8a7d984d98ed9852c20de8bdeaade82dea8de94deac2c20e0a49ce0a497e0a4a42c20e4b896e7958c'
&gt;&gt;&gt; b3 = binascii.unhexlify(b2)
&gt;&gt;&gt; b3
b'Hello, World, \xd8\xb9\xd8\xa7\xd9\x84\xd9\x8e\xd9\x85, \xde\x8b\xde\xaa\xde\x82\xde\xa8\xde\x94\xde\xac, \xe0\xa4\x9c\xe0\xa4\x97\xe0\xa4\xa4, \xe4\xb8\x96\xe7\x95\x8c'
</code></pre>
<p>Now we have similar bytestring as after the first <code>.encode('utf-8')</code>. Let's use the inverse operation -- decode from UTF-8. We should get the same Unicode string that we started with.</p>
<pre><code>&gt;&gt;&gt; s2 = b3.decode('utf-8')
&gt;&gt;&gt; s2
'Hello, World, عالَم, ދުނިޔެ, जगत, 世界'
&gt;&gt;&gt; s == s2   # is the original equal to the result?
True
</code></pre>
<p>:)</p>
</div>
<div class="post-text" itemprop="text">
<p>From python's documentation:</p>
<blockquote>
<p>The <a href="http://docs.python.org/py3k/library/binascii.html" rel="noreferrer">binascii module</a> contains a number of methods to convert between
  binary and various ASCII-encoded binary representations.</p>
</blockquote>
<p>For example you may use <a href="http://docs.python.org/py3k/library/binascii.html#binascii.hexlify" rel="noreferrer"><code>binascii.hexlify</code></a> to obtain an hexadecimal representation of the <em>binary string</em> "LOL", and turn it into an integer through the <a href="http://docs.python.org/py3k/library/functions.html#int" rel="noreferrer">int</a> built-in function:</p>
<pre><code>&gt;&gt;&gt; binascii.hexlify(b"LOL")
b'4c4f4c'
&gt;&gt;&gt; int(binascii.hexlify(b"LOL"), 16)
5001036
</code></pre>
<p>Since you need to apply this to unicode strings, you'll need first to encode them as binary strings. You can use the method <a href="http://docs.python.org/py3k/library/stdtypes.html#str.encode" rel="noreferrer"><code>str.encode</code></a> for this purpose:</p>
<pre><code>&gt;&gt;&gt; int(binascii.hexlify("fiŝaĵo".encode("utf-8")), 16)
7379646744164087151
</code></pre>
<p>That's it.</p>
<p>For the vice versa, you will need to reverse each step. Firstly turn the integer in a hexadecimal representation as binary string (you can go with <a href="http://docs.python.org/py3k/library/string.html#formatspec" rel="noreferrer"><code>format(int, "x")</code></a> and then encode it), turn the hex in ascii with <code>binascii.unhexlify</code> and finally decode as utf-8:</p>
<pre><code>&gt;&gt;&gt; binascii.unhexlify(format(7379646744164087151, "x").encode("utf-8")).decode("utf-8")
'fiŝaĵo'
</code></pre>
<p>This was a step-by-step explanation, if you really will be using this facilities it would be a good idea to arrange them in form of functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Building on the solution given by Martijn Pieters, you can make your string a huge number, what Python 3 can deal very well, since it's int type is arbitrarily large (that is not "how computers works", see my commentary of your question).</p>
<p>Given the list of character numerical codes:</p>
<pre><code>&gt;&gt;&gt; a = [ord(c) for c in 'Hello World!']
&gt;&gt;&gt; print(a)
[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
</code></pre>
<p>And knowing, from Wikipedia's page on <a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow">Unicode</a> that the greatest unicode character number is 10FFFF (in hexadecimal), you can do:</p>
<pre><code>def numfy(s):
    number = 0
    for e in [ord(c) for c in s]:
        number = (number * 0x110000) + e
    return number

def denumfy(number):
    l = []
    while(number != 0):
        l.append(chr(number % 0x110000))
        number = number // 0x110000
    return ''.join(reversed(l))
</code></pre>
<p>Thus:</p>
<pre><code>&gt;&gt;&gt; a = numfy("Hello, World, عالَم, ދުނިޔެ, जगत, 世界")
&gt;&gt;&gt; a
31611336900126021[...]08666956
&gt;&gt;&gt; denumfy(a)
'Hello, World, عالَم, ދުނިޔެ, जगत, 世界'
</code></pre>
<p>Where this 0x110000 (from 10FFFF + 1) is the number of different foreseen Unicode characters (1114112, in decimal). If you are sure you are only using English alphabet, you can use here 128, and if you are using some Latin language with accents, it is safe to use 256. Either way your number will be much smaller, but it will be unable to represent every Unicode character.</p>
</div>
<div class="post-text" itemprop="text">
<p>This converts each character to a number...</p>
<pre><code>s="hello \u2020"
print [ord(c) for c in s]
</code></pre>
</div>
<span class="comment-copy"><i>"I want to encrypt something with my own algorithm"</i> - why?</span>
<span class="comment-copy">Welcome to Stack Overflow! We encourage you to <a href="http://stackoverflow.com/questions/how-to-ask">research your questions</a>. If you've <a href="http://whathaveyoutried.com/" rel="nofollow noreferrer">tried something already</a>, please add it to the question - if not, research and attempt your question first, and then come back.</span>
<span class="comment-copy">because i want to learn the language, i'm just playing around a little bit and i try to find a solution for all upcomming questions. On this question i didn't find any solution. I won't publish my algorthm because i know it's not safe, but as i said, i'm just playing around a little bit. @tichodrama: i found no questions about this problem</span>
<span class="comment-copy">Your understanding of how computers work seems shallow and inaccurate. Computers doesn't "work with numbers". Computers works with binary arrays; how to interpret and deal with it is up to the program. Indeed many processor instructions treat the binary array of 32 bits we call "words" (or "double-words") as some binary representation of an integer number, usually 2-complement, or some fractional number representation, like IEEE 754. But the ultimate representation of what that array means is up to the programmer and the language's abstractions.</span>
<span class="comment-copy">@lvella: I disagree. The computer clearly handles the binary arrays, no matter what size, as numbers. It has built-in functions to do various mathematical functions of the arrays, interpreted in various formats, such as floats etc. But it always treats it as numbers. The interpretation as other things, images, texts, etc, doesn't really happen until the numbers somehow are displayed on some output device, such as a screen or a printer. An the it's us doing that interpretation, not the computer.</span>
<span class="comment-copy">can i do this with a whole string? (One String -&gt; One Integer)</span>
<span class="comment-copy">@Emerald: What would the one integer signify? You can transform each <i>character</i> into an integer; I've updated my answer to show how you do that for a whole string. Converting that string to <i>one</i> number doesn't make much sense.</span>
<span class="comment-copy">I thought it was faster to send one integer to my algorithm than hundreds, but i think your solution is the best one. Thanks a lot!</span>
<span class="comment-copy">@Emerald: It would be an extremely large number. More than the processor would handle natively. As such it would be split up into many numbers anyway, so you benefit nothing.</span>
<span class="comment-copy">can i do this with a whole string? (One String  -&gt; One Integer)</span>
<span class="comment-copy">As Martijn said on his response, converting the string as a whole doesn't make much sense; and encryption routines should take a stream of numbers fine - see <a href="http://docs.python.org/library/hashlib.html" rel="nofollow noreferrer">hashlib.update</a> for instance.</span>
