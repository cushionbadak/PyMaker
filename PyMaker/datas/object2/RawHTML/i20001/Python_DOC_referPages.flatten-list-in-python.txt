<div class="post-text" itemprop="text">
<p>I want to flatten the list:</p>
<pre><code>exampleArray = [[[151.68694121866872]], 
                [[101.59534468349297]], 
                [[72.16055999176308]]]
</code></pre>
<p>to:</p>
<pre><code>[151.68694121866872, 101.59534468349297, 72.16055999176308]
</code></pre>
<p>Right now I am doing this:</p>
<pre><code>resultArray= list(chain.from_iterable(list(chain.from_iterable(exampleArray))))
</code></pre>
<p>Even though it works I wanted to know if there's a better way.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about </p>
<pre><code>result = [x[0][0] for x in exampleArray]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [6]: from itertools import chain

In [7]: lis=[[[151.68694121866872]], [[101.59534468349297]], [[72.16055999176308]]]

In [8]: list(chain(*(chain(*lis))))

Out[8]: [151.68694121866872, 101.59534468349297, 72.16055999176308]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to convert the <code>itertools.chain</code> object (an iterable) into a list:</p>
<pre><code>resultArray= list(chain.from_iterable(list(chain.from_iterable(exampleArray))))
# could be rewritten as
resultArray= list(chain.from_iterable(chain.from_iterable(exampleArray)))
</code></pre>
<p>.</p>
<p>You could write a deepness function using recursion:</p>
<pre><code>def deep_chain_from_iterable(it, n):
    if n == 0:
        return list(it)
    else:
        return deep_chain_from_iterable(itertools.chain.from_iterable(it),n-1)

deep_chain_from_iterable(exampleArray, 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There isn't a better way, this is the most recommended way. See <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">official recipes</a> </p>
<pre><code>def flatten(listOfLists):
    "Flatten one level of nesting"
    return chain.from_iterable(listOfLists)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For fixed level of depth (as in example) you can just sum enough times:</p>
<pre><code>sum(sum(listoflistsoflists, []), [])
</code></pre>
</div>
<span class="comment-copy">what is <code>chain.from_iterable()</code> ?</span>
<span class="comment-copy">It is <a href="http://docs.python.org/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>.</span>
<span class="comment-copy">I guess then just <code>list(chain.from_iterable(chain.from_iterable(lis)))</code> is enough, no need of that <code>list()</code> call. `</span>
<span class="comment-copy">is it always just a list containing single element (nested) sublists?</span>
<span class="comment-copy">This is very close: <a href="http://stackoverflow.com/a/2158532/63011">Flatten (an irregular) list of lists in Python</a></span>
<span class="comment-copy">Very good specific example. Not the best general one though, obviously.</span>
<span class="comment-copy">thanks just wanted to see if there was will remove the extra list I added to the code</span>
