<div class="post-text" itemprop="text">
<p>I need help with grouping list of dicts by key in Python. I have list of dicts:</p>
<pre><code>raw_values = [
              {'qty': 1, 'price': 11.0, 'name': 'Name 1', 'id': '111'},
              {'qty': 2, 'price': 22.0, 'name': 'Name 2', 'id': '111'},
              {'qty': 3, 'price': 33.0, 'name': 'Name 3', 'id': '111'},
              {'qty': 0, 'price': 12.0, 'name': 'Name 1', 'id': '222'},
              {'qty': 3, 'price': 13.0, 'name': 'Name 2', 'id': '222'},
              {'qty': 7, 'price': 14.0, 'name': 'Name 2', 'id': '333'},
              {'qty': 10, 'price': 15.0, 'name': 'Name 3', 'id': '333'}]

</code></pre>
<p>Based on that list I need to create a new list of dicts where I can group records by 'id' key and also correctly rename and populate other columns - name and qty (if the is not any records for some 'id' I need to leave them blank). Desired output:</p>
<pre><code>sorted_values = [
                {"id": "111",
                 "name_1_price": 11.0, "name_1_qty": 1,
                 "name_2_price": 22.0, "name_2_qty": 2,
                 "name_3_price": 33.0, "name_3_qty": 3},
                {"id": "222",
                 "name_1_price": 12.0, "name_1_qty": 0,
                 "name_2_price": 13.0, "name_2_qty": 3,
                 "name_3_price": None, "name_3_qty": None
                 },
                {"id": "333",
                 "name_1_price": None, "name_1_qty": None,
                 "name_2_price": 14, "name_2_qty": 7,
                 "name_3_price": 15.0, "name_3_qty": 10
                 }
               ]
</code></pre>
<p>I tried to search for solutions, and I think that I need to use <code>itertools.groupby</code> function to group by 'id' key.
But I can't figure out  - how I can group by 'id' and also rename and populate dictionaries based on values in 'name' ?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://pandas.pydata.org/pandas-docs/stable/index.html" rel="nofollow noreferrer">Pandas</a> solution:</p>
<pre><code>import pandas as pd

raw_values = [
              {'qty': 1, 'price': 11.0, 'name': 'Name 1', 'id': '111'},
              {'qty': 2, 'price': 22.0, 'name': 'Name 2', 'id': '111'},
              {'qty': 3, 'price': 33.0, 'name': 'Name 3', 'id': '111'},
              {'qty': 0, 'price': 12.0, 'name': 'Name 1', 'id': '222'},
              {'qty': 3, 'price': 13.0, 'name': 'Name 2', 'id': '222'},
              {'qty': 7, 'price': 14.0, 'name': 'Name 2', 'id': '333'},
              {'qty': 10, 'price': 15.0, 'name': 'Name 3', 'id': '333'}]

#create DataFrame from dictionary
df = pd.DataFrame(raw_values)
print (df)
    id    name  price  qty
0  111  Name 1   11.0    1
1  111  Name 2   22.0    2
2  111  Name 3   33.0    3
3  222  Name 1   12.0    0
4  222  Name 2   13.0    3
5  333  Name 2   14.0    7
6  333  Name 3   15.0   10
</code></pre>
<hr/>
<pre><code>#change value to lower and replace empty spaces
df['name'] = df['name'].str.lower().str.replace('\s+','_')
#reshape by unstack, sorting
df = df.set_index(['id','name']).unstack().sort_index(level=1, axis=1).swaplevel(1,0,axis=1)
#flatten MultiIndex 
df.columns = df.columns.map('_'.join)
df = df.reset_index()
#convert NaN to None
df = df.mask(df.isnull(), None)
</code></pre>
<hr/>
<pre><code>#convert to list of dicts
L = df.to_dict(orient='records')
print (L)
[{'id': '111', 
  'name_1_price': 11.0, 'name_1_qty': 1.0, 
  'name_2_price': 22.0, 'name_2_qty': 2.0, 
  'name_3_price': 33.0, 'name_3_qty': 3.0}, 
 {'id': '222', 
  'name_1_price': 12.0, 'name_1_qty': 0.0, 
  'name_2_price': 13.0, 'name_2_qty': 3.0, 
  'name_3_price': None, 'name_3_qty': None}, 
 {'id': '333', 
  'name_1_price': None, 'name_1_qty': None, 
  'name_2_price': 14.0, 'name_2_qty': 7.0, 
  'name_3_price': 15.0, 'name_3_qty': 10.0}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like that (in pure python):</p>
<pre><code>grouped  = {}
for row in raw_values:
    if row['id'] not in grouped:
        grouped[row['id']] = []
    grouped[row['id']].append((row['qty'], row['price'], row['name']))


output = []
for ID in grouped:
    item = {'id': ID}
    for (q, p, n) in grouped[ID]:
        item[n + '_qty'] = q
        item[n + '_price'] = p
    output.append(item)

print(output)
</code></pre>
<p>And the output will be:</p>
<pre><code>[{'Name 1_qty': 0, 'id': '222', 'Name 2_qty': 3, 'Name 2_price': 13.0, 'Name 1_price': 12.0}, {'Name 1_qty': 1, 'id': '111', 'Name 2_  
qty': 2, 'Name 3_price': 33.0, 'Name 3_qty': 3, 'Name 1_price': 11.0, 'Name 2_price': 22.0}, {'Name 3_price': 15.0, 'id': '333', 'Nam  
e 2_qty': 7, 'Name 3_qty': 10, 'Name 2_price': 14.0}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it's simple but here is my solution. You can customize the number of quantity names you have:</p>
<pre><code>def byId(el):
    return el['id']
raw_values = [
              {'qty': 1, 'price': 11.0, 'name': 'Name 1', 'id': '111'},
              {'qty': 2, 'price': 22.0, 'name': 'Name 2', 'id': '111'},
              {'qty': 3, 'price': 33.0, 'name': 'Name 3', 'id': '111'},
              {'qty': 0, 'price': 12.0, 'name': 'Name 1', 'id': '222'},
              {'qty': 3, 'price': 13.0, 'name': 'Name 2', 'id': '222'},
              {'qty': 7, 'price': 14.0, 'name': 'Name 2', 'id': '333'},
              {'qty': 10, 'price': 15.0, 'name': 'Name 3', 'id': '333'}]
names = 3
vals = {el['id']:[] for el in raw_values}
for key in vals.keys():
    vals[key] = [{f'name_{i+1}_price':None,f'name_{i+1}_qty':None} for i in range(names)]
for el in raw_values:
    i = el['name'][-1]
    vals[el['id']][int(i)-1][f'name_{i}_price'] = el['price']
    vals[el['id']][int(i)-1][f'name_{i}_qty'] = el['qty']
sorted_vals = []
for i,lsts in vals.items():
    element = {"id":i}
    for el in lsts:
        element = {**element, **el}
    sorted_vals.append(element)
sorted_vals = sorted(sorted_vals,key = byId)
print(sorted_vals)
</code></pre>
</div>
<span class="comment-copy">Do you actually need those <code>None</code> values?</span>
<span class="comment-copy">Yes, I need them, but if it helps - all 'Name N' names is limited (no more than a dozen of them).</span>
<span class="comment-copy">Thank you for your answer! But I have a question - can it be done in native Python without using Pandas?</span>
<span class="comment-copy">@dexx - I think yes, waiting for answers. Unfortunately I dont know how create pure python solution.</span>
<span class="comment-copy">This is the most efficient solution of currently suggested and that does exactly what I need, thank you again.</span>
<span class="comment-copy">@dexx - You are welcome!</span>
<span class="comment-copy">Thank you! I tried your solution but unfortunately, in output are missed None values.</span>
