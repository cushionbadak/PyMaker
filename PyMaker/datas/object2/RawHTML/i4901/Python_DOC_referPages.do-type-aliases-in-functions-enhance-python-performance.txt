<div class="post-text" itemprop="text">
<pre><code>def scale(scalar: float, vector: Vector) -&gt; Vector:
    return [scalar * num for num in vector]
</code></pre>
<p>I wonder if this hint is just for better readability or it really does some optimizations.</p>
<p><a href="https://docs.python.org/3/library/typing.html#type-aliases" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html#type-aliases</a></p>
</div>
<div class="post-text" itemprop="text">
<p>No, an alias does not convey any kind of performance optimisation.</p>
<p>It just makes it easier to read your code. It is easier to reason about a function accepting a <code>Vector</code> and returning (another) <code>Vector</code>, than it is to use the more generic <code>List[float]</code> type in the signature of <code>scale()</code>.</p>
<p>Use aliases the same way you would use constants in your code. For example, if your code needed to calculate acceleration in free-fall, you'd store <code>9.807</code> as the <code>EARTH_GRAVITY</code> constant, rather than just use <code>9.807</code> in your code. Using <code>EARTH_GRAVITY</code> makes your code easier to read.</p>
</div>
<span class="comment-copy">I think you'll find that the "<i>type alias</i>" is the <code>Vector = List[float]</code></span>
<span class="comment-copy">Type hint aliases have nothing to do with performance.</span>
<span class="comment-copy">It's mostly for providing type hints to IDEs. It helps with autocompletion and similar</span>
<span class="comment-copy">@James: thatâ€™s an oversimplification and applies to all type hinting, not just to aliases.</span>
