<div class="post-text" itemprop="text">
<p>I have a big program, say <code>my_program.py</code>. I want to execute with two options, say 1 or 2. In case option 1 is chosen (<code>python my_program.py 1</code>) I want <code>my_program.py</code> to execute some parts of the code (in particular lines 70 to 117 and comment lines 118 to 130), if 2 is chosen I want the opposite behaviour (comment/deactivate lines 70 to 117 and uncomment/activate lines 118 to 130).</p>
<p>I know <code>argparse</code> to read from the command line, but do you have a (relatively) clean solution for this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should organise your code into functions eg.</p>
<pre><code>def Function1():
    # Some code


def Function2():
    # And more code
</code></pre>
<p>This way you can choose which code you want to call:</p>
<pre><code>Function1() # invoke code included in "Function1"
Function2() # or in Function2
</code></pre>
<p>To call function depending on argument you can use conditional expression:</p>
<pre><code>arg = sys.argv[1] # get entered argument

if arg == "1":
    Function1()
elif arg == "2":
    Function2()
</code></pre>
<p>Or (better solution) use dictionary:</p>
<pre><code>jobs = {"1" : Function1, "2" : Function2} # Relate arguments with functions
arg = sys.argv[1]
jobs[arg]() # invoke function
</code></pre>
<p>So entire file would look like this:</p>
<pre><code>import sys

def function1():
    # Some code

def function2():
    # More code

def main():
    jobs = {"1": function1, "2": function2}
    choosenOption = sys.argv[1]
    jobs[choosenOption]()

if __name__ == "__main__":
    main()
</code></pre>
<p>In addition, I suggest you to read about functions, which use is the basis for programming - <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html#defining-functions</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the excellent library <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer">Click</a>. It allows you to wrap your program into functions that act as commands to your program when called from the command line.</p>
<p>Your main file would look something like this:</p>
<pre><code>import click

@click.command()
@click.option('--count', default=1, help='Number of greetings.')
@click.option('--name', prompt='Your name',
              help='The person to greet.')
def hello(count, name):
    """Run lines 70 to 117."""
    for x in range(count):
        click.echo('Hello %s!' % name)

@click.command()
@click.option('--count', default=1, help='Number of farewells.')
@click.option('--name', prompt='Your name',
              help='The person to greet.')
def bye(count, name):
    """Run lines 118 to 130."""
    for x in range(count):
        click.echo('Bye %s!' % name)

if __name__ == '__main__':
    hello()
</code></pre>
<p>And you'd execute it at the command line like:</p>
<pre><code>$ python3 my_program.py hello
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>sys</strong> module in python</p>
<pre><code>import sys

if sys.argv[1] == 1:
  ---
elif sys.argv[1] == 2:
  ---
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python Fire is a simple way to create a CLI in Python and supported by Google
<a href="https://github.com/google/python-fire" rel="nofollow noreferrer">https://github.com/google/python-fire</a></p>
<pre><code>import fire

class Calculator(object):
  """A simple calculator class."""

  def double(self, number):
    return 2 * number

if __name__ == '__main__':
  fire.Fire(Calculator)


output:
    python calculator.py double 10  # 20
    python calculator.py double --number=15  # 30
</code></pre>
</div>
<span class="comment-copy">The obvious thing to do is to organize the different parts into different callables (e.g. functions), and call them based on the input command.  Proof of concent as in <code>jobs = {1: some_fun, 2: other_fun}; jobs[user_choice]()</code>.</span>
<span class="comment-copy">Thanks, I know about functions, indeed I have a section with the functions I'm using (my program is quite big), so should I copy and paste all those functions I'm using into function1 and function2? Wouldn't that be repetitive?</span>
<span class="comment-copy">Well, if you have functions already defined, all you have to do is to call them inside "function1" or "function2".  I don't see repetitive in that. Simply: def function1(): foo(); bar()</span>
