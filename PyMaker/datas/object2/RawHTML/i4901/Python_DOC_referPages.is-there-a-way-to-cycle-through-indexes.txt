<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/930397/getting-the-last-element-of-a-list-in-python">Getting the last element of a list in Python</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/8940737/cycle-through-list-starting-at-a-certain-element">Cycle through list starting at a certain element</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<pre><code>list1 = [1,2,3,4]
</code></pre>
<p>If I have <code>list1</code> as shown above, the index of the last value is <code>3</code>, but is there a way that if I say <code>list1[4]</code>, it would become <code>list1[0]</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can you modulo math like:</p>
<h3>Code:</h3>
<pre><code>list1 = [1, 2, 3, 4]
print(list1[4 % len(list1)])
</code></pre>
<h3>Results:</h3>
<pre><code>1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the situation you described, I myself use the method @StephenRauch suggested. But given that you added <code>cycle</code> as a tag, you might want to know there exists such a thing as <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">itertools.cycle</a>.</p>
<p>It returns an iterator for you to loop forever over an iterable in a cyclic manner. I don't know your original problem, but you might find it useful.</p>
<pre><code>import itertools
for i in itertools.cycle([1, 2, 3]):
   # Do something
   # 1, 2, 3, 1, 2, 3, 1, 2, 3, ...
</code></pre>
<p>Be careful with the exit conditions though, you might find yourself in an endless loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could implement your own class that does this.</p>
<pre><code>class CyclicList(list):
    def __getitem__(self, index):
        index = index % len(self) if isinstance(index, int) else index
        return super().__getitem__(index)

cyclic_list = CyclicList([1, 2, 3, 4])

cyclic_list[4] # 1
</code></pre>
<p>In particular this will preserve all other behaviours of <code>list</code> such as slicing.</p>
</div>
<span class="comment-copy">Try <code>list[-1]</code>.</span>
<span class="comment-copy">Nevermind, I can't read.</span>
