<div class="post-text" itemprop="text">
<p>I am new to Python and I am stuck with a problem. I have an input file which contains data as below: </p>
<pre><code>12345    67890     afghe
abcde    23456     0abcd
34567    __fred01  45678
123.456  12345a    123.
.456     ab00cd    00ab00
</code></pre>
<p>By using regular expression is need to parse each literal and classify whether the literal is a string or an integer or a floating point.
The code snippet is somewhat like below:</p>
<pre><code>def processtoken(token):
    #Replace the following line with your code to classify
    # the string in 'token' according to your three Regular
    # Expressions and print the appropriate message.
    print('Inside Process Token')

    match = re.search(r'(0|[1-9][0-9]*|0[oO]?[0-7]+|0[xX][0-9a-fA-F]+|0[bB][01]+)[lL]?', token)
    matchfp = re.search(r'^[0-9]+\.?[0-9]+$',token)
    if match:
        print(match.group(),'matches INT')
    elif matchfp:
        print(matchfp.group(),'matches FP')
</code></pre>
<p>My issue is how can I structure the code to validate multiple regex conditions for each token passed. As of now the floating point if the condition is not validated. I want to check the token for, first integer regex if it matches or if it matches floating point regex or it matches string.
Any help will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would structure the problem as follows:</p>
<pre><code>integer_regex = r"^...$"
float_regex = r"^...$"
string_regex = r"^...$"

def processToken(token):

    if re.search(integer_regex, token):
        print(token, 'matches INT')
    elif re.search(float_regex, token):
        print(token, 'matches FLOAT')
    elif re.search(string_regex, token):
        print(token, 'matches STR')
    else:
        print(token, 'unknown')
</code></pre>
<p>Filling your patterns into the <code>*_regex</code> variables above.</p>
<p>Also note, your <code>float</code> pattern is no good, as it also matches <code>int</code>:</p>
<pre><code>r'^[0-9]+\.?[0-9]+$'
</code></pre>
<p>Since the decimal point is optional.  You might be better off breaking the pattern into an alternation with three options, starts with '.', ends with '.' or contains a '.' between numbers.  Also, in your integer pattern, the '?' in the octal section is incorrect:</p>
<pre><code>0[oO]?[0-7]+
</code></pre>
<p>at this point we're trying to commit to octal so the prefix is not optional:</p>
<pre><code>0[oO][0-7]+
</code></pre>
<p>You got this correct for hex and binary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Split the text, use function <code>isdigit()</code> to test for <code>int</code>, then <code>try</code> for <code>float</code> and capture <code>ValueError</code> for <code>string</code>.</p>
<pre><code>for m in string.split():
    if m.isdigit():
        print(m, 'Int')
    else:
        try:
            float(m)
            print(m, 'Float')
        except ValueError:
            print(m, 'STR')
</code></pre>
<p>Output:</p>
<pre><code>('12345', 'Int')('67890', 'Int')('afghe', 'STR')('abcde', 'STR')('23456', 'Int')('0abcd', 'STR')('34567', 'Int')('__fred01', 'STR')('45678', 'Int')('123.456', 'Float')('12345a', 'STR')('123.', 'Float')('.456', 'Float')('ab00cd', 'STR')('00ab00', 'STR')
</code></pre>
<p><a href="https://ideone.com/Kz8E7A" rel="nofollow noreferrer">Code demo</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; test = """\
... 12345    67890     afghe
... abcde    23456     0abcd
... 34567    __fred01  45678
... 123.456  12345a    123.
... .456     ab00cd    00ab00"""
&gt;&gt;&gt; def what_is_it(s):
...     print("'{}'".format(s), end=' ')
...     try:
...         as_float = float(s)
...     except ValueError:
...         return 'matches STRING'
...     else:
...         if as_float.is_integer():
...             return 'matches INT'
...         return 'matches FP'
... 
&gt;&gt;&gt; for line in test.splitlines():
...     for token in line.split():
...         print(what_is_it(token))
...     print()
... 
'12345' matches INT
'67890' matches INT
'afghe' matches STRING

'abcde' matches STRING
'23456' matches INT
'0abcd' matches STRING

'34567' matches INT
'__fred01' matches STRING
'45678' matches INT

'123.456' matches FP
'12345a' matches STRING
'123.' matches INT

'.456' matches FP
'ab00cd' matches STRING
'00ab00' matches STRING
</code></pre>
</div>
<span class="comment-copy">if you insist on using regex to match numeric literals, see docs for complete list - <a href="https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">Thank you for your inputs for the code structure.</span>
<span class="comment-copy">Thank you for your inputs on the code structure. I changed my code as below.But still only the first If is evaluated.import reimport sys integer_regex = r"(0|[1-9][0-9]*|0[oO][0-7]+|0[xX][0-9a-fA-F]+|0[bB][01]+)[lL]?" floating_regex = r"[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?" string_regex = r"(_|a-z|A-Z)(_|a-z|A-Z|0-9)" def processtoken(token): if re.search(integer_regex, token):  print(token, 'matches INT')if re.search(floating_regex, token):  print(token,'matches FP') elif re.search(string_regex, token):         print(token,'matched ID')     else:         print(token,'Does Not Match')</span>
<span class="comment-copy">Please can you help</span>
<span class="comment-copy">@np05, you left off the start and end anchors on your patterns which are requred when matching in this manner: r"^...$"  also your string pattern is missing its brackets: r"^(_|[a-z]|[A-Z])(_|[a-z]|[A-Z]|[0-9])*$" and as currently defined, nothing matches "0abcd" since you're saying strings can't begin with digits and there is no "0a" integer form.  Your floating point pattern is close but needs some work but make the changes I just suggested and see what still doesn't match.</span>
<span class="comment-copy">thank you again for the inputs.I am pasting the output as below:processing tokens from inputdata.txt ... 12345 matches INT 67890 matches INT afghe Does Not Match abcde Does Not Match 23456 matches INT 0abcd matches INT 34567 matches INT __fred01 matches INT 45678 matches INT 123.456 matches INT 12345a matches INT 123. matches INT .456 matches INT ab00cd matches INT 00ab00 matches INT and the code is as below:</span>
<span class="comment-copy">:Thank you for the answer.But I have to use Regex only to achieve this.</span>
