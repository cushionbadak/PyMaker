<div class="post-text" itemprop="text">
<p>I am searching for an efficient way to find core patterns in two different lists, I'll explain:</p>
<p>List 1:</p>
<pre><code>[10318, 6032,1518, 4061, 4380, 73160, 83607, 9202, 28812, 40359, 28457, 
 3292, 2678, 8492, 7149, 19417, 7372, 8534, 3889, 11123, 8415, 5989]
</code></pre>
<p>List 2:</p>
<pre><code>[5760, 1541, 2085, 637,1518, 4061, 4380, 73160, 83607, 9202, 28812, 40359, 
 28457, 3292, 2678, 8492, 7149, 19417, 7372, 8534, 3889, 11123]
</code></pre>
<p>The two lists could have more than 300 elements, the similar elements in each list is statisticaly very large each time (probably more than 60%)</p>
<p>My goal, find the point where the "core" start in each list.
A new list come every 5 minutes and will be compared to the previous one. 
What I am interested in is the part that is not the core. In other word I need to retrieve the start of the list up until the core (that was identified) of the previous list. </p>
<p>Efficiency is the key, new list each 5 minutes, but hundreds parallels processing.</p>
<p>Any algo or math way or solution will help :)</p>
<p>I hope I was precise in my request</p>
</div>
<div class="post-text" itemprop="text">
<p>This will do it for your samples, did not try it with big lists.The intermediate powersets get gigantic, so might not be the right choice:</p>
<pre><code>from itertools import chain,product,islice

l1 = [10318, 6032,1518, 4061, 4380, 73160, 83607, 9202, 28812, 40359, 28457, 
 3292, 2678, 8492, 7149, 19417, 7372, 8534, 3889, 11123, 8415, 5989]

l2 = [5760, 1541, 2085, 637,1518, 4061, 4380, 73160, 83607, 9202, 28812, 40359, 
 28457, 3292, 2678, 8492, 7149, 19417, 7372, 8534, 3889, 11123]

# not really a receipt - but inspired by partition and powerset
# from https://docs.python.org/3/library/itertools.html#itertools-recipes
def powerskiptakeset(iterab): 
    """Creates non-empty partitions of a given iterable in existing order 
       from len(1) to len(iterab). 

    Example: 
        [1,2,3,4] --&gt; {(1,), (2,), (3,), (4,), (1, 2), (2, 3), (3, 4),
                       (1, 2, 3), (2, 3, 4),  (1, 2, 3, 4)}"""
    s = list(iterab)
    return set(chain.from_iterable([tuple(islice(s, start, stop))] for 
                               start,stop in product(range(len(s)+1),range(len(s)+1)) 
                               if start &lt; stop))


l1_set = powerskiptakeset(l1)   
l2_set = powerskiptakeset(l2)

core = max( l1_set&amp; l2_set, key=lambda coll: len(coll))

print(list(core))
</code></pre>
<p>Output:</p>
<pre><code>[1518, 4061, 4380, 73160, 83607, 9202, 28812, 40359, 28457, 3292, 
 2678, 8492, 7149, 19417, 7372, 8534, 3889, 11123]
</code></pre>
<hr/>
<p>For a <code>rage(300)</code> the resulting set has 45150 elements. You can tune that by f.e. restrincting the powerskiptakeset's to a min lenght 25% of the input iterables length:</p>
<pre><code>from itertools import chain,product,islice

def powerskiptakeset_25perc(iterab): 
    """Creates non-empty partitions of a given iterable in order of len(iterab)//4 to len(iterab)

    [1,2,3,4] --&gt; set([(1, 2), (1, 2, 3, 4), (1,), (2,), (3,), (1, 2, 3), (2, 3), (2, 3, 4), (4,), (3, 4)])"""

    s = list(iterab)
    return set(chain.from_iterable([tuple(islice(s, start, stop))] for 
                               start,stop in product(range(len(s)+1),range(len(s)+1)) 
                               if start &lt; stop and stop-start &gt;= len(iterab)//4))

print(len(powerskiptakeset_25perc(range(300))))
</code></pre>
<p>which drops the amount of tuples in the set down to about 25k.</p>
</div>
<span class="comment-copy">what do you mean by core in a list?</span>
<span class="comment-copy">dont see no core - whats your expected output? Do you mean <code>1518, 4061, 4380, 73160, 83607, 9202, 28812, 40359, 28457,   3292, 2678, 8492, 7149, 19417, 7372, 8534, 3889, 11123</code> that part?</span>
<span class="comment-copy">No attempt? SO is not your free coding service.</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/on-topic">on topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here. StackOverflow is not a design, coding, research, or tutorial service.</span>
<span class="comment-copy">in a shorter way,  list 1:  8,4,3,5,6,0,1   list 2: 1,3,7,4,3,5,6, here the core is 4,3,5,6. I need to find what changed in list 2 compared to list 1 in the part before the "core", so, find where the "core" start.  here, 8 in first list and 1,3,7 in the second. In real data, list is bigger than 300 elements and the "core" can be compose by 200 elements or more.  i'm not searching a full code, i search a way, algorithm, math, statistics, or a python library which can help me in this task.</span>
<span class="comment-copy">Thanks you for the response, i didn't know this method :)</span>
<span class="comment-copy">@Draak what for a method?</span>
