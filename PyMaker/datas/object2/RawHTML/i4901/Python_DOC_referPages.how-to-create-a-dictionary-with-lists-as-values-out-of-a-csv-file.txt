<div class="post-text" itemprop="text">
<p>I have a csv file with 19 columns and want to make it as a dictionary that the first 2 columns be the key (maybe a tuple or just merge them as one string), and then all other 17 columns be a list as values. the excel file looks like this: <a href="https://i.stack.imgur.com/rWekA.png" rel="nofollow noreferrer">image of the cvs file</a></p>
<p>I want to have a dictionary like this : </p>
<pre><code>d1 = { "A , 222" : [1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1]}  
d2={"B, 223" : [1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1]}
d3 = {....}

....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a></p>
<pre><code>from csv import reader

d = {}
with open('infile.csv', newline='') as f:
    r = reader(f)
    for row in r:
        if not row:
            continue # Handles blank rows
        key1, key2, *value = row
        d[(key1, key2)] = value
</code></pre>
<p>Edit:</p>
<p>The line <code>key1, key2, *value = row</code> will only work in Python 3.  If that feature is not available to you, you can use </p>
<pre><code>key1, key2 = row[:2]
value = row[2:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you means this?</p>
<pre><code>res = {}
with open(fileName.csv, "r") as f:
    text = f.readlines()
    for line in text[1:]:
        part = line.strip().split(",")
        key  = ",".join(part[:2])
        value = [int(i) for i in part[2:]]
        res[key] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using csv.reader you can do that like:</p>
<h3>Code:</h3>
<pre><code>as_dict = {'{}, {}'.format(*row[:2]): row[2:] for row in reader if row}
</code></pre>
<h3>Test Code:</h3>
<pre><code>data = StringIO(''.join('\n'.join(x.strip() for x in u"""
    A,222,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1  
    B,223,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1
    """.split('\n')[1:-1])))

reader = csv.reader(data)
as_dict = {'{}, {}'.format(*row[:2]): row[2:] for row in reader if row}
print(as_dict)
</code></pre>
<h3>Results:</h3>
<pre><code>{
    'A, 222': ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'], 
    'B, 223': ['1', '1', '1', '1', '0', '0', '0', '1', '1', '0', '0', '1', '1', '1', '1', '1']
}
</code></pre>
</div>
<span class="comment-copy">This answer really shows how to use modules well. Good Job!</span>
<span class="comment-copy"><code>key1, key2, *value = row</code> should only work on <code>Python 3.x</code>.</span>
<span class="comment-copy">@FrankAK That's a good point, I'll add a line that can work for older versions.</span>
<span class="comment-copy">in that case remove <code>newline=""</code> from the open statement :) (it's not useful anyway when opening a file for <i>reading</i>)</span>
<span class="comment-copy">your <code>(key1, key2) = value</code> should covert to string instead of tuple!</span>
