<div class="post-text" itemprop="text">
<p>Is there a more pythonic way of doing the following:</p>
<pre><code>def mysteryFunction( it, fun, val ):
    out = []
    for x in it:
        y,val = fun(x,val)
        out.append(y)
    return out,val
</code></pre>
<p>where <code>it</code> is iterable, <code>fun</code> is a function that takes two inputs and returns two outputs, and <code>val</code> is an initial value that gets "transformed" by each call to <code>fun</code>?</p>
<p>I am asking because I use <code>map, zip, filter, reduce</code> and list-comprehension on a regular basis, but I cannot express the previous function as a combination of those, and this is something that has come up several times now. Am I missing a hidden idiom, or is this just too niche to deserve one?</p>
<hr/>
<p>A concrete example is to calculate a duration in terms of (year, week, day, hour, minute, second) from a certain amount of seconds:</p>
<pre><code>fac = (365*24*3600, 7*24*3600, 24*3600, 3600, 60, 1)
dur,rem = mysteryFunction( fac, lambda x,y: divmod(y,x), 234567 )
</code></pre>
<p>where <code>dur</code> is the duration tuple and <code>rem</code> corresponds to the final remainder (either zero or decimal here, depending on the type of the initial value). This is not just cherry-picked, there are many other examples, such as: fixed-step methods to integrate differential equations (iterable steps, stepper function, initial state); simulating a bounded random walk; tree processing across depth without recursion; etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>This structure is similar to what <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer">the <code>itertools.accumulate</code> generator function</a> was designed for. For example, your function might be used with a function like this:</p>
<pre><code>def add2(x, y):
    return (x + y,) * 2 # Returning the same thing twice, new sum and accumulate sum the same
</code></pre>
<p>then called with:</p>
<pre><code>mysteryFunction(range(5), add2, 0)
</code></pre>
<p>which would return:</p>
<pre><code>([0, 1, 3, 6, 10], 10)
</code></pre>
<p>the accumulated sums of 0 through 4, and the final sum.</p>
<p><code>itertools.accumulate</code> can do the same thing, but it's lazy (it returns each accumulated value as it's requested), and only works with two operand to single output functions; for this case, it ends up being simpler:</p>
<pre><code>from itertools import accumulate
from operator import add

list(accumulate(range(5), add))
</code></pre>
<p>would produce the same <code>list</code> as <code>mystery_function</code> (and the second result would just be the last value of the <code>list</code>), but you could also use it lazily without storing the results in a <code>list</code>, e.g.:</p>
<pre><code>for partialsum in accumulate(range(5), add):
    ... do stuff with partialsum ...
</code></pre>
<p>You could likely massage <code>accumulate</code> to handle a two input, two output function (or more precisely, discard the value you don't care about from the values output by <code>accumulate</code>), but most of the time I'd expect the second output to be an accumulated value to date, not really separate, so avoiding the second output would be cleaner.</p>
<p>For fun, a kind of terrible massage of your structure to match <code>accumulate</code>. Let's say you wanted to add a <code>base</code> value to each element in the input, but reduce the <code>base</code> by 1 each time. With your function, you'd do (for initial <code>base</code> of 10):</p>
<pre><code>def addless(new, base):
    return base + new, base - 1

mysteryFunction(range(5), addless, 10)
</code></pre>
<p>which (thanks to passing it <code>range</code> that counteracts each decrease in <code>base</code>) produces <code>([10, 10, 10, 10, 10], 5)</code>. Similar code with <code>accumulate</code> might be:</p>
<pre><code>def addless2(last_base, new):
    _, base = last_base
    return base + new, base - 1
</code></pre>
<p>then (with some ugliness because you can't specify an initial value for <code>accumulate</code> directly):</p>
<pre><code>from itertools import accumulate, chain

base = 10

# chain used to provide initial value
accum = accumulate(chain(((None, base),), range(5)), addless2)

next(accum)   # Throw away first value that exists solely to make initial tuple

# Put the first value from each `tuple` in `out`, and keep the second value
# only for the last output, to preserve the final base
out, (*_, base) = zip(*accum)
</code></pre>
<p>which leaves <code>vals</code> as <code>(10, 10, 10, 10, 10)</code> and <code>base</code> as <code>5</code>, just as in your code (apologies for the magic; <code>zip</code> with generalized, nested unpacking is both beautiful and horrifying all at once).</p>
</div>
<span class="comment-copy">I guess there is no an idiom suitable for such case, you have to write several lines of code</span>
<span class="comment-copy">This is good, I did not know about <code>accumulate</code>, but I think this assumes that the first and second arguments are the same "thing", no? In my example, <code>val</code> could just as well decrease at each call, while the elements of the list would be increasing. Or it could also not even be a number, and be incomparable to the first input/output.</span>
<span class="comment-copy">I added an example to my post; I don't think <code>accumulate</code> can actually be used in that case.</span>
<span class="comment-copy">@Sheljohn: I just posted an example that abuses <code>itertools.chain</code> to prepend a <code>tuple</code> to <code>accumulate</code>'s input stream, allowing your use case (where the adjustments to the "base" value are independent of the transformation performed on the values from the input iterable). That said, I'm skeptical of any use case of the type you describe; it feels an awful lot like you've got <a href="https://meta.stackexchange.com/q/66377/322040">an XY problem</a>.</span>
<span class="comment-copy">I like your example; as you noted, I think initialisation is a problem when using <code>accumulate</code>, but I feel like I have my answer anyway. There doesn't seem to be a hidden idiom to do this, and I have learned something in the process. Thanks!</span>
<span class="comment-copy">@Sheljohn: The example you added fits my example code pattern, though like I said, it's a bit ugly to massage that way. You'd just change the first line to <code>accum = accumulate(chain(((None, 234567),), fac), lambda qr, f: divmod(qr[1], f))</code>, and the rest is the same (<code>out</code> is your example's <code>dur</code>, and <code>base</code> becomes your example's <code>rem</code>).</span>
