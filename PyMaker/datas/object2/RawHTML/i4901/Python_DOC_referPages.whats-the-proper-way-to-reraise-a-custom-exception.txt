<div class="post-text" itemprop="text">
<p>If I have the function,</p>
<pre><code>def parse_datetime(s, **kwargs):
    """ Converts a time-string into a valid
    :py:class:`~datetime.datetime.DateTime` object.

        Args:
            s (str): string to be formatted.

        ``**kwargs`` is passed directly to :func:`.dateutil_parser`.

        Returns:
            :py:class:`~datetime.datetime.DateTime`
    """
    if not s:
        return None
    try:
        ret = dateutil_parser(s, **kwargs)
    except (OverflowError, TypeError, ValueError) as e:
        logger.exception(e, exc_info=True)
        raise SyncthingError(*e.args)
    return ret
</code></pre>
<p>What's the most correct way to raise the caught exception as the common library exception? (<code>SyncthingError(Exception)</code> ) The way it's written right now <strong>does not work correctly</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 the exceptions can be chained,</p>
<pre><code>raise SyncthingError("parsing error") from e
</code></pre>
<p>will produce a stack trace with details of the original exception.</p>
<p>There are examples in the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">raise statement</a> docs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to raise it as long as constructer of the common library exception takes Error or Exception. For example:</p>
<pre><code>Class LibraryException(Exception)...
Class LibraryException(Error)...
</code></pre>
</div>
<span class="comment-copy">If you want to raise <code>SyncthingError</code> then just do: <code>raise SyncthingError(e)</code>. If you want to raise the exception you caught, just do <code>raise</code></span>
<span class="comment-copy">Can you try <a href="https://www.python.org/dev/peps/pep-3134/#explicit-exception-chaining" rel="nofollow noreferrer"><code>raise ... from ...</code></a>?</span>
<span class="comment-copy">Is there a Python2 fallback? This is very elegant.</span>
<span class="comment-copy">@blakev there's a compatibility-layer implementation from <a href="http://pythonhosted.org/six/#six.raise_from" rel="nofollow noreferrer"><code>six</code></a> In Python 2 this doesn't do much, but it prevents <code>SyntaxError</code>. There's also the <code>reraise()</code> function worth looking into.</span>
<span class="comment-copy">Thanks!! @CongMa</span>
<span class="comment-copy">@blakev I have started learning Python from version 3. I had to search and found this: <a href="https://stackoverflow.com/questions/1350671/inner-exception-with-traceback-in-python" title="inner exception with traceback in python">stackoverflow.com/questions/1350671/â€¦</a> Very similar to your question.</span>
