<div class="post-text" itemprop="text">
<pre><code>testVar = {
  "date": 1520053431,
  "location": {
  "lat": 39.349887,
  "lng": -82.116147
  },
  "items": [
    {
      "macAddress": "98:90:96:9C:94:6C",
      "manufacturer": "intel"
    },
    {
  "macAddress": "98:90:96:9C:94:52",
  "manufacturer": "intel"
    },
    {
      "macAddress": "98:90:96:90:94:52",
      "manufacturer": "intel"
    }
  ]
}

print(testVar.items[0])
</code></pre>
<p>I have this JSON object, and I'm trying to access the items list, but this produces the error:</p>
<pre><code>TypeError: 'builtin_function_or_method' object is not subscriptable
</code></pre>
<p>I tried parsing it with json.loads and json.dumps but neither of those worked either.</p>
</div>
<div class="post-text" itemprop="text">
<p>As it has curly brackets (<code>{...}</code>), it's stored in a <code>dict</code>(ionary). This means you can't use the dot operator (<code>.</code>) to access the data inside.</p>
<p>As it's a <code>dict</code>, you also can't access it like a <code>list</code>. Instead, you need to use the keys available (the strings before the colons).</p>
<p>In this case, you need to do something like <code>textVar['items']</code> to access the <code>'items'</code> <code>list</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Let me present a very simple example first, since this is going to be very useful for us later on. Imagine I have this simple function:</p>
<pre><code>def myFunc():
    return [1,2,3]
</code></pre>
<p>Question: What is the first element of <code>myFunc</code>? In other terms, what is <code>myFunc[0]</code>. Be careful, I am not asking the first element of the output of it, i.e. <code>myFunc()[0]</code>; my question is the first element of <code>myFunc</code> itself! The former would be the first element of <code>[1,2,3]</code>, which is <code>1</code>; but the latter will give me a <code>TypeError</code>, because a function can't be subscripted; akin to the fact that a recipe can produce delicious food, but you can't eat the recipe itself.</p>
<p>Let's take a look at your error message:</p>
<pre><code>TypeError: 'builtin_function_or_method' object is not subscriptable
</code></pre>
<p>This means that you are somehow trying to subscript a 'builtin_function_or_method' object. Let's look at your code and understand what this error is due to. Luckily, your call is just one line, hence easy to debug:</p>
<pre><code>testVar.items[0]
</code></pre>
<p>What you are doing is to reach the first element of the <code>items</code> function or method of a <code>dict</code>. Be careful, not the first element of the outcome, but the function itself. How am I so sure? Because you forgot the parentheses, therefore haven't even called the function yet, i.e. you didn't do <code>testVar.items()[0]</code>.</p>
<p>Let's look closer at the built-in <code>items</code> function of <code>dict</code>s. When we just run <code>testVar.items</code>, this is the response we get: <code>&lt;function items&gt;</code>. Let's run the following to get some help about its docstring: <code>?testVar.items</code>, which returns the following:</p>
<pre><code>Docstring: D.items() -&gt; list of D's (key, value) pairs, as 2-tuples
Type:      builtin_function_or_method
</code></pre>
<p>A-ha! We just saw what the error message we had mentioned: <code>builtin_function_or_method</code>! So the error is really due to your code not being able to call the function properly, but try to get the first element of the function itself.</p>
<p>Let me give a simpler but equivalent example. Say, I have a list <code>x = [2, 3, 1]</code> and I want to find its smallest element. I can use the built-in function of <code>sort</code>, and then get the first element in the sorted list. Therefore the proper syntax would be <code>x.sort()[0]</code> but if I forget the <code>()</code>, and write <code>x.sort[0]</code> I will be trying to get the first element of not the result of the <code>sort</code> function (because I didn't even call it to get a result!) but the first element of the function itself. Remember the recipe not being edible? Same thing.</p>
<p><strong>In summary: A function can return an iterable which you can subscript, but a function itself is not subscriptable.</strong></p>
<p>Let's play around with this function a little bit. Let's iterate on it as (key, value) pairs per docstring:</p>
<pre><code>for k, v in testVar.items():
    print k, v
# Result:
date 1520053431
items [{'macAddress': '98:90:96:9C:94:6C', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:9C:94:52', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:90:94:52', 'manufacturer': 'intel'}]
location {'lat': 39.349887, 'lng': -82.116147}
</code></pre>
<p>This makes sense, because we indeed have 3 keys and corresponding 3 values.</p>
<p><strong>Now, how can you get the values corresponding to the key named <code>items</code>? Notice, this is one of your three keys, but has the same name as the built-in function of <code>dict</code>s we discussed above. This is where your confusion is coming from.</strong></p>
<p>The error message was due to the <code>items</code> function, let's discuss how to get the value corresponding to the key named <code>items</code>. One inefficient way is using the loop syntax I presented above:</p>
<pre><code>for k, v in testVar.items():
    if k == 'items':
        print v
# Result:
[{'macAddress': '98:90:96:9C:94:6C', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:9C:94:52', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:90:94:52', 'manufacturer': 'intel'}]
</code></pre>
<p>There you go, here is your <code>items</code>! A second and efficient way of doing the same thing is calling the key name, and the values will be returned to us:</p>
<pre><code>testVar['items']
# Result: 
[{'macAddress': '98:90:96:9C:94:6C', 'manufacturer': 'intel'},
 {'macAddress': '98:90:96:9C:94:52', 'manufacturer': 'intel'},
 {'macAddress': '98:90:96:90:94:52', 'manufacturer': 'intel'}]
</code></pre>
<h2>To wrap-up:</h2>
<ol>
<li>Pay attention to the cases where your <code>key</code> in a <code>dict</code> has the same name of a built-in function or method.</li>
<li>You can't do <code>myDict.key</code>, but <code>myDict['key']</code>.</li>
<li>You can also loop over the <code>item</code> function of <code>dict</code>s as <code>(key, value)</code> pairs and get the value corresponding to the key. But don't do this, this is inefficient compared to the constant time complexity of <code>myDict['key']</code>.</li>
<li>If you are calling <code>myDict.function</code>, make sure you actually put that function into action by <code>myDict.function()</code>. That is, don't eat the recipe, but eat what it produces.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>testVar is a dictionary and dictionaries in Python have the <em>items()</em> method. For instance, in order to access all key/value pairs in this dictionary, you would use, according to <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">Python docs</a>. Notice the <code>items()</code> method below. </p>
<pre><code>for key, value in testVar.items():
      print(key, value)
</code></pre>
<p>As pointed out by @FatihAkici, the statement <code>testVar.items()[0]</code> is syntactically incorrect in that you are trying to call the <code>items()</code> method which does not support indexing. This means that you cannot access items within the object by index positions, like we do in lists:</p>
<p>Accessing a list by index position:</p>
<pre><code>music = ['Beatles', 'Led Zeppelin', 'The Doors']
#item at index 0:
music[0]   #Beatles
</code></pre>
<p>Meanwhile, as you can see the object <code>testVar.items()</code> is of type <code>dict_items</code> and can only be accessed by key/value.</p>
<pre><code>testVar.items()[0]
TypeError: 'dict_items' object does not support indexing

#Output: dict_items([('date', 1520053431), ('location', {'lat': 39.349887, 'lng': -82.116147}), ('items', [{'macAddress': '98:90:96:9C:94:6C', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:9C:94:52', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:90:94:52', 'manufacturer': 'intel'}])])

print(testVar.items())   
</code></pre>
<p>To access the <code>items</code> list, you can use list comprehensions. This is a compact way to access all items with less code:</p>
<pre><code>test = [print(key, value) in testVar for key,value in testVar.items() if key=="items"]

#test: items [{'macAddress': '98:90:96:9C:94:6C', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:9C:94:52', 'manufacturer': 'intel'}, {'macAddress': '98:90:96:90:94:52', 'manufacturer': 'intel'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with the print statement. <strong>JSON</strong> works as same as a dictionary.
so to access any element in dictionary, we use <strong>dictionary_name[key]</strong></p>
<p>Therefore the below code works fine:</p>
<p>(change the print statement in the code as below)</p>
<pre><code>print(testVar['items'][0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can access the wanted variable by doing this:</p>
<pre><code>print(testVar["items"][0])
</code></pre>
<p>Because both "testVar" and "items" are dict variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of:</p>
<blockquote>
<p><code>print(testVar['items'][0])</code></p>
</blockquote>
<p>I would go even further and do:</p>
<p><code>print(testVar.get('items', None)[0])</code></p>
<p>OR</p>
<p><code>items = testVar.get('items', None)
 if items:
     print(items[0])
</code></p>
<p>The <code>.get('key)</code> helps you avoid the <code>KeyError</code> Error when trying to get a value from <code>testVar</code></p>
</div>
<span class="comment-copy">Unlike JavaScript, Python differentiates between hashtable accesses (i.e. dictionaries) and object field access. You can't use the dot operator.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/5404665/accessing-elements-of-python-dictionary">Accessing elements of python dictionary</a></span>
<span class="comment-copy">@DeliriousLettuce Yes...</span>
<span class="comment-copy">@DeliriousLettuce No, it's always good to have detailed answers which explain the problem to the OP.</span>
<span class="comment-copy">@DeliriousLettuce it's not identical, it has an explanation. Which means it should have been a comment on your answer reminding you to include it, but meh.</span>
<span class="comment-copy">@Adi219 It's probably worth pointing out that the exact error message given is because there <b>is</b> in fact an <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer">attribute</a> <code>items</code> on the dictionary, but that it isn't the same as the <i>member</i> called <code>'items'</code>.</span>
<span class="comment-copy">@DeliriousLettuce Just because you've posted an answer, it doesn't mean others can't.</span>
