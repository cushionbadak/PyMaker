<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35745050/string-with-f-prefix-in-python-3-6">String with 'f' prefix in python-3.6</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>While writing <code>re.compile</code>, i used <code>r</code> prefix many times (<code>re.compile(r'(xyx)</code>). However, I have seen   (<code>re.compile(f'(xyx)</code>) for the first time and I am not sure what is it doing. The output does not make any sense to me either. Can someone please explain what this <code>f</code> is doing here? </p>
<pre><code>import re, string
re_tok = re.compile(f'([{string.punctuation}“”¨«»®´·º½¾¿¡§£₤‘’])')
def tokenize(s): 
    return re_tok.sub(r' \1 ', s).split()


&gt;&gt;&gt; tokenize('˚∆˙©∆©˙¬ ldgkl slgh lshsg ieh 954n bvery590oerfdb o3pg')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'.</p>
<p>These strings may contain replacement fields, which are expressions delimited by curly braces {}.</p>
<p>While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.</p>
<p><strong>IN THIS CASE</strong>:</p>
<p>The curly brackets around the <code>'string.punctuation`` are a replacement field, i.e. the string is to be formatted with</code>string.punctuation<code>, which, in Python, is a 'string of ASCII characters which are considered punctuation marks in the</code>C` locale'. </p>
<p>To find out more, check out <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">these</a> Python docs and <a href="https://docs.python.org/3.1/library/string.html#string.punctuation" rel="nofollow noreferrer"><code>string.punctuation</code> references</a> :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">python documentation</a>:</p>
<blockquote>
<h3>2.4.3. Formatted string literals</h3>
<p><em>New in version 3.6.</em></p>
<p>A formatted string literal or f-string is a string literal that is
  prefixed with <code>'f'</code> or <code>'F'</code>. These strings may contain replacement
  fields, which are expressions delimited by curly braces <code>{}</code>. While
  other string literals always have a constant value, formatted strings
  are really expressions evaluated at run time.</p>
</blockquote>
<p>There are multiple examples in the documentation, so I'll post a few of them and explain:</p>
<pre><code>name = "Fred"
f"He said his name is{name!r}."
# "He said his name is 'Fred'.
</code></pre>
<p>Here the <code>!</code> introduces a conversion field. <code>!r</code> calls <a href="https://docs.python.org/3.6/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code></a></p>
<blockquote>
<p>The result is then formatted using the <a href="https://docs.python.org/3.6/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code></a> protocol. The format specifier is passed to the <a href="https://docs.python.org/3.6/reference/datamodel.html#object.__format__" rel="nofollow noreferrer"><code>__format__()</code></a> method of the expression or conversion result. An empty string is passed when the format specifier is omitted. The formatted result is then included in the final value of the whole string.</p>
</blockquote>
<p>Since it's formatted using the <code>format()</code> protocol, the following are other use-cases:</p>
<pre><code>width = 10
precision = 4
value = decimal.Decimal("12.34567")
f"result: {value:{width}.{precision}}"
# result:      12.35
</code></pre>
<p>Even datetime objects:</p>
<pre><code>today = datetime(year=2017, month=1, day=27)
f"{today:%B %d, %Y}"
# January 27, 2017
</code></pre>
<hr/>
<p>Taking the information above, let's apply it to your code:</p>
<pre><code>f'([{string.punctuation}“”¨«»®´·º½¾¿¡§£₤‘’])'
</code></pre>
<p>The line above is inserting <code>string.punctuation</code> into the string at that location. </p>
<p><a href="https://docs.python.org/3/library/string.html#string.punctuation" rel="nofollow noreferrer">According to the docs</a>, <code>string.punctuation</code> is:</p>
<blockquote>
<p>String of ASCII characters which are considered punctuation characters in the <code>C</code> locale.</p>
</blockquote>
<p>If you really want to dig deeper into this: What's the <code>C</code> locale?</p>
<blockquote>
<p>The C standard defines the locale as a program-wide property that may be relatively expensive to change. On top of that, some implementation are broken in such a way that frequent locale changes may cause core dumps. This makes the locale somewhat painful to use correctly.</p>
<p>Initially, when a program is started, the locale is the <code>C</code> locale, no matter what the user’s preferred locale is. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Those are various flags that modify string literal behaviour
<code>r</code> means raw string and <code>f</code> is for string interpolation </p>
<p>See explanation from PEP:</p>
<blockquote>
<p>F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with 'f', which contains expressions inside braces. The expressions are replaced with their values. Some examples are:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; name = 'Fred'
&gt;&gt;&gt; age = 50
&gt;&gt;&gt; anniversary = datetime.date(1991, 10, 12)
&gt;&gt;&gt; f'My name is {name}, my age next year is {age+1}, my anniversary is {anniversary:%A, %B %d, %Y}.'
'My name is Fred, my age next year is 51, my anniversary is Saturday, October 12, 1991.'
&gt;&gt;&gt; f'He said his name is {name!r}.'
"He said his name is 'Fred'."
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0498/</a></p>
<p>And the python docs:</p>
<p>Regarding <code>r</code></p>
<blockquote>
<p>Both string and bytes literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and treat backslashes as literal characters. As a result, in string literals, '\U' and '\u' escapes in raw strings are not treated specially. Given that Python 2.x’s raw unicode literals behave differently than Python 3.x’s the 'ur' syntax is not supported.</p>
</blockquote>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals</a></p>
<p>Regarding <code>f</code></p>
<blockquote>
<p>A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'. These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.</p>
</blockquote>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#f-strings</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is just Python's new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">literal string interpolation (f-strings)</a>, available as of <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">Python 3.6</a></p>
</div>
<span class="comment-copy">Just check out the meaning of different prefixes. This is not special to regexes, it is a general Python feature.</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">python.org/dev/peps/pep-0498</a></span>
