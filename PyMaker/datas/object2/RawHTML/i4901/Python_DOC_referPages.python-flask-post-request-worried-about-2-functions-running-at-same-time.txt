<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/32815451/are-global-variables-thread-safe-in-flask-how-do-i-share-data-between-requests">Are global variables thread safe in flask? How do I share data between requests?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have a python function that gets called everytime i text a specific number. (Postback function, that runs on flask, and listens for incoming sms.</p>
<p>I also have a function that has a set schedule to run every 5minutes and read from a list and remove some entries.</p>
<p>Now the only problem is both these functions read from the same list. </p>
<p>I'm worried that right when the scheduled function (every 5min) is called to be run, the postback function that handles sms, is called too. What i they both run at the exact same time, and both try to read from the array at the same time. Or if function a reads from the list WHILE function b is writing to the list. </p>
<p>Is this an accurate worry of mine? Can these 2 functions be called at the EXACT same time? Or will it never happen that they simultaneously read from same list at same time.</p>
<p>I looked into async requests with celery, but that doesnt solve the problem. The function that runs every 5 min, could still be called the exact same time as the celery function is called, thus corrupting the list. </p>
<p>Thanks, im just confused </p>
</div>
<div class="post-text" itemprop="text">
<p>The worries you have are reasonable and should be handled in code.</p>
<p>In general lists are thread safe in python, but that still can cause issues if the data inside your list is not, see this answer:</p>
<p><a href="https://stackoverflow.com/questions/6319207/are-lists-thread-safe">Are lists thread-safe?</a></p>
<p>The type of problem you describe is very common and depending on your needs can be solved in several ways:</p>
<p>1) use locks to protect the list:
<a href="https://stackoverflow.com/questions/10525185/python-threading-how-do-i-lock-a-thread">Python threading. How do I lock a thread?</a></p>
<p>2) rethink the approach and put all your logic that access this particular list into the timer <em>only</em>. Then whenever a text message comes in, you push the info into a queue and read from that queue into the timer. This decouples the two threads. Example from another question (the question tackles another interesting point, but you can just look at the queue usage itself): <a href="https://stackoverflow.com/questions/13481276/threading-in-python-using-queue">Threading in python using queue</a></p>
</div>
<span class="comment-copy">Why not just use a <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer"><code>queue.Queue</code></a>?</span>
<span class="comment-copy">Thanks, ya i was thinking maybe a global variable 'isactive'. So when the post function is called isactive is set to 1 and only when it finishes it sets it to 0. Then in the timer code i just check the status of isactive. Is this a correct approach? Ive been told global variables are very bad practice</span>
<span class="comment-copy">So you opt for approach 1 then. The 'isactive' solution is not robust, the idea in this approach is to wrap the methods that read and write the list into functions that use a lock to synchronise each other. take a quick look at the link... does this help?</span>
<span class="comment-copy">I added another link from within stackoverflow to not have external page linked, it shows how the queue can be used to do this. Its actually typical python to do it this way (I just found out).</span>
<span class="comment-copy">Ya i dont think approach 2 solves it. Cause both functions would need to access the queue. This the problem comes up again. Im thinking though with approach 1, what if the lock changes while the timer function is reading from the list. It checks if 'isactive' is set to zero, if it is then start manipulating the list. But what if it is manipulating the list and in the background 'isactive' changes to 1? Then the lock doesn't really work because they'll both be active?</span>
<span class="comment-copy">Do i need 2 locks to specify which function is active?</span>
