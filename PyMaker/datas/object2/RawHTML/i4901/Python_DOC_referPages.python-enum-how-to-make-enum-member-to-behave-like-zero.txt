<div class="post-text" itemprop="text">
<p>I have enum and I'd like some constants acts like 0. It's not the case by default (what is strange by itself). I have tried to bind <strong>nonzero</strong> method to enum member directly, but it's not called in if statment. What is going on!? And is there clear way to make FOO behave like 0? </p>
<pre><code>from enum import Enum

class A(Enum):
    FOO = 0
    BAR = 1

if A.FOO: print 'foo!'
if A.BAR: print 'bar!'

setattr(A.FOO, '__nonzero__', (lambda self:False).__get__(A.FOO, A.FOO.__class__))

if A.FOO: print 'foo!'
print A.FOO.__nonzero__()
</code></pre>
<p>Output</p>
<pre><code>foo!
bar!
foo!
False
</code></pre>
<p>Upd: for Python 2.7 zvone's solution looks like this and works fine:</p>
<pre><code>from enum import Enum

class A(Enum):
    FOO = 0
    BAR = 1

    def __nonzero__(self): return self!=A.FOO

if A.FOO: print 'foo!'
if A.BAR: print 'bar!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems here:</p>
<ul>
<li>there is no <code>enum</code> in Python 2.7 (the question is tagged as 2.7) - see <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum doc</a>; perhaps you are using the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code></a> backport?</li>
<li>there is <code>enum</code> in Python 3.4 and later, but there is no <code>__nonzero__</code> there (Python 3 uses <code>__bool__</code> instead)</li>
<li>The <code>__nonzero__</code>/<code>__bool__</code> method, if it existed, would have to be defined on the class and not on the instance</li>
</ul>
<p>So, finally, there is a solution in Python 3:</p>
<pre><code>class A(Enum):
    FOO = 0
    BAR = 1

    def __bool__(self):
         # only return False for A.FOO
         return self != A.FOO
</code></pre>
<p>And the solution for Python 2:</p>
<pre><code>class A(Enum):
    FOO = 0
    BAR = 1

    def __nonzero__(self):
         # return boolean value of any A
         return bool(self._value_)
</code></pre>
</div>
<span class="comment-copy">What about deriving from<code>IntEnum</code>?</span>
<span class="comment-copy">Desired output?</span>
<span class="comment-copy">Desired output:no 'foo!'</span>
<span class="comment-copy">Excellent! Thanks! I am using pyhton 2.7 and enum34 lib (?, installed by default with anaconda). The solution to implement <b>nonzero</b> in class A (instead of <b>bool</b>) work fine!</span>
<span class="comment-copy">@zvone:  Could you include the Python 2.7 part, and mention <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code></a> and where to find it?</span>
<span class="comment-copy">@EthanFurman I know nothing about <code>enum34</code>. If you feel that the answer can be improved, be my guest - the answer is editable for you as well ;)</span>
