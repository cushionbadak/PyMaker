<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#bool" rel="noreferrer"><code>bool()</code></a> and <a href="https://docs.python.org/3/library/operator.html#operator.truth" rel="noreferrer"><code>operator.truth()</code></a> both test whether a value is <em>truthy</em> or <em>falsy</em> and they seem rather similar from the docs, it even says in the <code>truth()</code> docs that:</p>
<blockquote>
<p>This is equivalent to using the bool constructor.</p>
</blockquote>
<p>However, <code>truth()</code> is over twice as fast as <code>bool()</code> from a simple test (Python 3.6 timings shown, but 2.7 is similar):</p>
<pre><code>from timeit import timeit
print(timeit('bool(1)', number=10000000))
# 2.180289956042543
print(timeit('truth(1)', setup='from operator import truth', number=10000000))
# 0.7202018899843097
</code></pre>
<p>So what are the differences? Should I use <code>truth()</code> instead of <code>bool()</code>?</p>
<p>This Q&amp;A arose after extensive comments and discussion with <a href="https://stackoverflow.com/users/364696/shadowranger">ShadowRanger</a> under <a href="https://stackoverflow.com/questions/48909056/creating-a-list-within-a-list-in-python/">this question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although <code>bool()</code> and <code>operator.truth()</code> <em>output</em> the same result for the major uses cases their <em>implementation</em> is actually rather different. <code>bool()</code> is a class or type constructor while <code>truth()</code> is a narrow optimised regular function.</p>
<p>In practical terms, there are also two differences: 1) <code>bool()</code> called with no arguments <code>return</code>s <code>False</code> while <code>truth()</code> requires an argument. 2) <code>bool()</code> accepts an <code>x</code> key word argument, like <code>bool(x=1)</code>, while <code>truth()</code> takes no keyword arguments. Both of these add overhead to <code>bool()</code> for the regular use cases.</p>
<p>The key word implementation is odd since likely no-one needs it and the name <code>x</code> is hardly descriptive. <a href="https://bugs.python.org/issue29695" rel="nofollow noreferrer">Issue29695</a> covers this, and in fact the issue impacts not just <code>bool()</code> but other classes like <code>int()</code> or <code>list()</code>. However, from Python 3.7 onwards these key word arguments will be removed, and speed should improve. Nonetheless, I tested the timings on the latest Python 3.8 branch, and <code>bool()</code> is faster than before but still over twice as slow as <code>truth()</code>, presumably due to the more generic implementation of <code>bool()</code>.</p>
<p>So, if you have a task where speed is of high importance I would recommend using <code>truth()</code> over <code>bool()</code> if you require a function (for example to parse as a key to <code>sorted()</code>). However, as <a href="https://stackoverflow.com/users/3890632/khelwood">khelwood</a> points out, <code>bool()</code> can still be faster occasionally, such as <code>filter(bool, iterable)</code>, so it is probably best to time your use case to be certain of the best option.</p>
<p>Of course, if you don't need a function and simply want to test if a value is <em>truthy</em> or <em>falsy</em> you should use the idiomatic <code>if</code> or <code>if not</code> statements, which are fastest as khelwood and <a href="https://stackoverflow.com/users/2357112/user2357112">user2357112</a> commented.</p>
<p>This Q&amp;A arose after extensive comments and discussion with <a href="https://stackoverflow.com/users/364696/shadowranger">ShadowRanger</a> under <a href="https://stackoverflow.com/questions/48909056/creating-a-list-within-a-list-in-python/">this question</a>.</p>
</div>
<span class="comment-copy"><code>timeit('b(1)', 'b=bool')</code> is noticeably faster than <code>timeit('bool(1)')</code> (though still much slower than <code>truth</code>). Looking up the global name <code>bool</code> affects the results.</span>
<span class="comment-copy">@khelwood Thanks, good point, but the time difference is still over double, yes?</span>
<span class="comment-copy">Yes, <code>truth</code> is still definitely much faster than <code>bool</code> (and, incidentally, slower than <code>True if ... else False</code>).</span>
<span class="comment-copy">@khelwood Yep, I guess the <code>if</code> statement is highly optimised; use cases for <code>truth</code> are where you would parse a keyword argument like <code>key=bool</code></span>
<span class="comment-copy">If you're microoptimizing to the point where you would care about the cost of <code>bool</code>, it'd be better to just use <code>not not x</code> instead of <code>truth(x)</code>.</span>
<span class="comment-copy"><code>operator.truth</code> would only be useful in cases where you need a callback</span>
<span class="comment-copy">@user2357112 well it's half the speed, so maybe sometimes more than microoptimization? but yes, the context this arose in was as a key function (for <code>itertools.groupby) </code></span>
<span class="comment-copy">Also, I think that <code>filter</code> might be specifically optimised for the case where you pass <code>bool</code> to it.</span>
<span class="comment-copy">@Chris_Rands My knowledge on this is basically limited to what I have said already. =) Feel free to include any of it in your answer if it seems useful.</span>
