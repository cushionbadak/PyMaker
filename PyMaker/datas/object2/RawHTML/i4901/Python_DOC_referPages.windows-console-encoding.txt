<div class="post-text" itemprop="text">
<p>What is the default console encoding on Windows? It seems like sometimes it is the <em>ANSI encoding</em> (<a href="https://en.wikipedia.org/wiki/Windows-1252" rel="nofollow noreferrer">CP-1252</a>), sometimes it is the <em>OEM encoding</em> (<a href="https://en.wikipedia.org/wiki/Code_page_850" rel="nofollow noreferrer">CP-850</a> for Western Europe by default) given by the <code>chcp</code> command.</p>
<ul>
<li><p><em>Command-line arguments</em> and <em>environment variables</em> trigger the ANSI encoding (<code>é</code> = 0xe9):</p>
<pre><code>&gt; chcp 850
Active code page: 850
&gt; python -c "print 'é'"
Ú
&gt; python -c "print '\x82'"
é
&gt; python -c "print '\xe9'"
Ú
&gt; $env:foobar="é"; python -c "import os; print os.getenv('foobar')"
Ú

&gt; chcp 1252
Active code page: 1252
&gt; python -c "print 'é'"
é
&gt; python -c "print '\x82'"
,
&gt; python -c "print '\xe9'"
é
&gt; $env:foobar="é"; python -c "import os; print os.getenv('foobar')"
é
</code></pre></li>
<li><p><em>Python console</em> and <em>standard input</em> trigger the OEM encoding (<code>é</code> = 0x82 if the OEM encoding is CP-850, <code>é</code> = 0xe9 if the OEM encoding is CP-1252):</p>
<pre><code>&gt; chcp 850
Active code page: 850
&gt; python
&gt;&gt;&gt; print 'é'
é
&gt;&gt;&gt; print '\x82'
é
&gt;&gt;&gt; print '\xe9'
Ú
&gt; python -c "print raw_input()"
é
é

&gt; chcp 1252
Active code page: 1252
&gt; python
&gt;&gt;&gt; print 'é'
é
&gt;&gt;&gt; print '\x82'
,
&gt;&gt;&gt; print '\xe9'
é
&gt; python -c "print raw_input()"
é
é
</code></pre></li>
</ul>
<p><em>Note. – In these examples, I used Powershell 5.1 and CPython 2.7.14 on Windows 10.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, for all your non-ASCII characters, what matters here is your console encoding and Windows locale settings, you are using <em>byte strings</em> and Python just prints out the bytes it received. Your keyboard input is encoded to a specific byte or byte sequence by the console before those bytes are passed on to Python. To Python, this is all just opaque data (numbers in the range 0-255), and <code>print</code> passes those back to the console the same way Python received them.</p>
<p>In Powershell, what encoding is used for the bytes sent to Python via command-line switches is not determined by the <code>chcp</code> codepage, but by the <em>Language for non-Unicode programs</em> setting in your control panel (search for <em>Region</em>, then find the <em>Administrative</em> tab). It is <em>this setting</em> that encodes <code>é</code> to 0xE9 before passing it to Python as a command-line argument. There are <a href="http://www.fileformat.info/info/unicode/char/00E9/codepage_support.htm" rel="nofollow noreferrer">a large number of Windows codepages</a> that use 0xE9 for <code>é</code> (but there is <a href="https://stackoverflow.com/questions/701882/what-is-ansi-format">no such thing as an ANSI encoding</a>).</p>
<p>The same applies to environment variables. Python refers to the encoding Windows uses here as the <a href="https://docs.python.org/2/library/codecs.html#python-specific-encodings" rel="nofollow noreferrer">MBCS codec</a>; you can decode command-line parameters or environment variables to Unicode using the <code>'mbcs'</code> codec, which uses the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd319072(v=vs.85).aspx" rel="nofollow noreferrer"><code>MultiByteToWideChar()</code></a> and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd374130(v=vs.85).aspx" rel="nofollow noreferrer"><code>WideCharToMultiByte()</code></a> Windows API functions, with the <code>CP_ACP</code> flag.</p>
<p>When using the interactive prompt, Python is passed bytes as encoded by the Powershell console locale codepage, set with <code>chcp</code>. For you that's codepage 850, and a byte with the hex value 0x82 is received when you type <code>é</code>. Because <code>print</code> sends the same 0x82 byte back to the same console, the console then translates 0x82 back to a <code>é</code> character on the screen.</p>
<p>Only when you use <em>Unicode text</em> (with a unicode string literal like <code>u'é'</code>) would Python do any decoding and encoding of the data. <code>print</code> writes to <code>sys.stdout</code>, which is configured to encode Unicode data to the current locale (or <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONIOENCODING" rel="nofollow noreferrer"><code>PYTHONIOENCODING</code></a> if set), so <code>print u'é'</code> would write that Unicode object to <code>sys.stdout</code>, which then encodes that object to bytes using the configured codec, and those bytes are then written to the console.</p>
<p>To produce the <code>unicode</code> object from the <code>u'é'</code> source code text (itself a sequence of bytes), Python does have to decode the source code given. For the <code>-c</code> command line, the bytes that are passed in  <a href="https://stackoverflow.com/questions/48984214/python-2-assumes-different-source-code-encodings">are decoded as Latin-1</a>. In the interactive console, the locale is used. So <code>python -c "print u'é'"</code> and <code>print u'é'</code> in the interactive session will result in different output.</p>
<p>It should be noted that Python 3 uses Unicode strings throughout, and command-line parameters and environment variables are loaded into Python with the Windows 'wide' APIs to access the data as UTF-16, then presented as Unicode string objects. You can still access console data and filesystem information as byte strings, but as of Python 3.6, <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-529-change-windows-filesystem-encoding-to-utf-8" rel="nofollow noreferrer">accessing the filesystem and stdin/stdout/stderr streams as binary uses UTF-8 encoded data</a> (again using the 'wide' APIs).</p>
</div>
<span class="comment-copy">Thank you. I have updated my question to include an example with an environment variable and to replace the xxd (hex dump program included in Vim) example with a pure Python example.</span>
<span class="comment-copy">@Maggyero: please don't move the goal posts. Windows passes environment variables to a process using the same codec as command-line arguments.</span>
<span class="comment-copy">Great edit, I'll accept your answer but before I need to finish some tests (to make sure I understand everything) and maybe to edit the parts of your post that I didn't get right away.</span>
<span class="comment-copy">What is the <code>chg</code> codepage that you are talking about in the second paragraph? Is it a typo?</span>
<span class="comment-copy">Windows itself executes a process only with a Unicode command line and environment in the Process Environment Block (PEB). Python 2 relies on the within-process C runtime library to parse/provide the legacy ANSI-encoded command-line and environment from <code>GetCommandLineA</code> and <code>GetEnvironmentStringsA</code>. You can install <a href="https://pypi.python.org/pypi/win_unicode_console" rel="nofollow noreferrer">win_unicode_console</a> to use the console's Unicode interface and replace <code>sys.argv</code> with parsed arguments from the native Unicode command line.</span>
