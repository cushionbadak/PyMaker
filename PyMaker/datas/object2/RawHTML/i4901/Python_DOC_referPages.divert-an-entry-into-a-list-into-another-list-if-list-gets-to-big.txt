<div class="post-text" itemprop="text">
<pre><code> list.append(elapse):
       if len(list) &gt; 50:
          raise Exception(list_2.append(elapse))
       else:
          list.append(elapse)
</code></pre>
<p>I have no idea how to format this, I just want it so that once <code>list[]</code> gets to big the new entries are diverted into <code>list_2[]</code>, my original code doesn't have <code>raise Exception()</code> just <code>list_2.append(elapse)</code>. I'm only in highschool, week 6 of computer science so I don't know too much jargon.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use an <code>if</code> / <code>else</code> construct as so:</p>
<pre><code>if len(lst_1) &gt;= 50:
    lst_2.append(elapse)
else:
    lst_1.append(elapse)
</code></pre>
<p>But think about your use case. Consider these questions:</p>
<ul>
<li>Why is your list size capped? Is this something that can be accounted for downstream?</li>
<li>Will you have an indefinite number of lists? If so, consider using a dictionary of lists, or list of lists.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>simply make a 2 layer list: </p>
<pre><code>mainList = [] # create the mainList to hold each list with 50 values in 
while True:
    innerList = [] # create the list to hold the 50 items
    for x in range(50): # run through your code 50 times to add 50 items to the list
        yourValue = 0 # your code to add to the list
        innerList.append(yourValue) # add the value
    mainList.append(innerList) # add the list of 50 values to the mainList
</code></pre>
<p>This means you can have an endless number of 50 item lists rather than limit yourself to a hard-coded number of lists :)</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, you cannot name a <code>list</code> because <code>list</code> is a python built in name.</p>
<p>So call them <code>list1</code> and <code>list2</code> (Anything but <code>list</code>.   </p>
<p>Of course you do not raise an exception like you did in python.</p>
<pre><code>list1 = []
list2 = []
if len(list1) &gt; 50: # Check if list1 is full
    list_2.append(elapse) # append to list2 if list1 is full
else:
    list1.append(elapse)   #if list1 is not &gt; 50, append to list1 
</code></pre>
<p>if you wish you can use <code>elif</code> to check the len of list2.</p>
<p>You can have as many <code>elif</code> statements as you please but <code>else</code> is always last.</p>
<pre><code>list1 = []
list2 = []
if len(list1) &gt; 50:
    list_2.append(elapse)
elif list2 &gt; 50:
    print('OUT OF LISTS!!')
else:
    list1.append(elapse) 
</code></pre>
<p>If you do wish to catch exceptions, ie if it is not a list you can wrap it in a <code>try</code> / <code>except</code> statemnent.</p>
<pre><code>list1 = []
list2 = []
try:
    if len(list1) &gt; 50:
        list_2.append(elapse)
    elif list2 &gt; 50:
        print('OUT OF LISTS!!')
    else:
        list1.append(elapse)
except TypeError:
    print('Not a List!!')
</code></pre>
<p>Some reading for you:</p>
<p>Error handling:
<a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html</a></p>
<p><code>if /</code>elif`:
<a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You an decide which list to append with for instance a <em>ternary operator</em>:</p>
<pre><code>list_to_append = list1 if len(list1) &lt; 50 else list2
list_to_append.append(elapse)
</code></pre>
<p>So first we check whether <code>len(list1) &lt; 50</code>. If that is the case, we set <code>list_to_append = list1</code>, otherwise we set <code>list_to_append = list2</code>. We then append to that list.</p>
<p>Please do not name variables things like <code>list</code>, <code>set</code>, <code>dict</code>, etc. Since this will override the reference to the classes with the same name.</p>
</div>
<span class="comment-copy">Please don't name variables after class names. Use <code>lst</code>, not <code>list</code>, for example.</span>
<span class="comment-copy">Just to show your same idea with <code>itertools</code>: <a href="https://bpaste.net/show/1554fd1d7553" rel="nofollow noreferrer">bpaste.net/show/1554fd1d7553</a></span>
