<div class="post-text" itemprop="text">
<p>I want to add values in a list successively.
is there any way to do it by using list comprehension?</p>
<pre><code>input_list = [1,2,3,4,5,6]
expected_list = [1,3,6,10,15,21]
</code></pre>
<p>this can be done by this function</p>
<pre><code>def add_list(input_list):
    required_list =[input_list[0]]
    for item in range(1,len(input_list)):
        required_list.append(required_list[-1] + input_list[item])
    return (required_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>accumulate</code></a> function. This function is available in the <code>itertools</code> module for Python 3.2 and greater.  If you are using python &lt; 3.2 you can write your own function like this.  </p>
<pre><code># myscript.py
import operator


def accumulate(iterable, func=operator.add):
    """
    Return an iterator whose items are the accumulated results of a function
    (specified by the optional *func* argument) that takes two arguments.
    By default, returns accumulated sums with :func:`operator.add`.
    """
    it = iter(iterable)
    try:
        total = next(it)
    except StopIteration:
        return
    else:
        yield total

    for element in it:
        total = func(total, element)
        yield total
</code></pre>
<p><strong>DEMO</strong></p>
<p><em>1) Python version &lt; 3.2(Use your own function)</em></p>
<pre><code>&gt;&gt; from myscript import accumulate
&gt;&gt; print list(accumulate([1, 2, 3, 4, 5, 6])) # Running sum
&gt;&gt; [1,3,6,10,15,21]
</code></pre>
<p><em>Using List comprehension.</em></p>
<pre><code>&gt;&gt; from myscript import accumulate
&gt;&gt; out_ = [item for item in accumulate([1, 2, 3, 4, 5, 6])] 
&gt;&gt; out_
&gt;&gt; [1,3,6,10,15,21]
</code></pre>
<p>2) <em>Python version &gt; 3.2(The function is already in the <code>itertools</code> module, Just use it :))</em></p>
<pre><code> &gt;&gt; from itertools import accumulate
 &gt;&gt; print(list(accumulate([1, 2, 3, 4, 5, 6])))
</code></pre>
<p><em>Using List comprehension.</em></p>
<pre><code> &gt;&gt; from itertools import accumulate
 &gt;&gt; out_ = [item for item in accumulate([1, 2, 3, 4, 5, 6])] 
 &gt;&gt; out_
 &gt;&gt; [1,3,6,10,15,21]
</code></pre>
<p><strong>NOTE</strong></p>
<p>If you want to find the accumulated product/division/etc you can pass the corresponding <code>func</code> parameter to the <code>accumulate</code> function.</p>
<pre><code>&gt;&gt; import operator
&gt;&gt; out_ = [item for item in accumulate([1, 2, 3], func=operator.mul)] # accumulated product.
&gt;&gt; out_
&gt;&gt; [1, 2, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> along with list comprehension to achieve your results.</p>
<pre><code>&gt;&gt;&gt; from functools import reduce

&gt;&gt;&gt; items = [1,2,3,4,5,6]
&gt;&gt;&gt; [reduce(lambda x,y: x+y, l[:b]) for b in range(1,len(l)+1)]
&gt;&gt;&gt; [1, 3, 6, 10, 15, 21]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do it: </p>
<pre><code>import itertools
original_list = [1,2,3,4,5,6]
required_list = [bi for bi in itertools.accumulate(original_list)]
print(required_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do it using list comprehension and without importing any module, you can do it using the below code:</p>
<pre><code>original_list = [1,2,3,4,5,6]
required_list = [sum(original_list[:val]) for val in range(1,len(original_list)+1)]
</code></pre>
<p>Output:</p>
<pre><code>[1, 3, 6, 10, 15, 21]
</code></pre>
<p>You can comment below, if you have any doubts.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do this by making use of <code>enumarate()</code></p>
<pre><code>a = [1,2,3,4,5,6]
b = [sum(a[:i[0]+1]) for i in enumerate(a)]
print b
[1, 3, 6, 10, 15, 21]
</code></pre>
<p>Adding this answer for just another solution for this question</p>
</div>
<span class="comment-copy">What's your input list?What's your expect output?</span>
<span class="comment-copy">@FrankAK input_list = [1,2,3,4,5] expected_list = [1,3,6,10,15]</span>
<span class="comment-copy">how <code>operator.mul</code> return that result when you passed <code>[1,2,3]</code> as input @ABDULNIYASPM</span>
<span class="comment-copy">@Sanket Typo. I have updated my answer. Thanks</span>
