<div class="post-text" itemprop="text">
<p>I am new to python dictionaries so I am not sure why this happens. Basically the problem is whenever I update a key with a list, it updates all keys in that dictionary with the list.
The try, except is to have unique users only so I don't think that's the problem</p>
<pre><code>    file:
    user contact
    20b3c296-0043-3948-9c90 Stacy Armstrong
    20b3c296-0043-3948-9c90 Brian Theresa
    20b3c296-0043-3948-9c90 Miller Justin
    c9b16828-91d2-33c9-b915 Monique Porter
    c9b16828-91d2-33c9-b915 Rebecca Marky
    c9b16828-91d2-33c9-b915 Rose Chang
    a6f8a71d-7568-3552-9cf4 Mildred Linda
    a6f8a71d-7568-3552-9cf4 Josephine Larry
    a6f8a71d-7568-3552-9cf4 Henry Mildred
</code></pre>
<p>Here's the code:</p>
<pre><code>for row in file:
    user = get_user(row)
    contact = get_contact(row)
    try:
        a = list_users.index(user)
    except ValueError:
        list_users.append(user)

        if len(list_users) &gt; 1: # start from second user, and update previous one
            index = list_users.index(user)
            prev_user = list_users[index - 1]

            user_contacts.update({prev_user: list_contacts})    # update previous user with its list

            # print dict
            for key, value in user_contacts.items():
                print(key, value)
            print('\n')

        # clear list and add new contact (associated with new user)
        list_contacts.clear()
        list_contacts.append(contact)

    else:
        list_contacts.append(contact)

# update last user with its list
index = len(list_users)
prev_user = list_users[index - 1]

user_contacts.update({prev_user: list_contacts})

# print dict
for key, value in user_contacts.items():
    print(key, value)
print('\n')
</code></pre>
<p>the print statements give me:</p>
<pre><code>20b3c296-0043-3948-9c90 ['Stacy Armstrong', 'Brian Theresa', 'Miller Justin']


20b3c296-0043-3948-9c90 ['Monique Porter', 'Rebecca Marky', 'Rose Chang']
c9b16828-91d2-33c9-b915 ['Monique Porter', 'Rebecca Marky', 'Rose Chang']


20b3c296-0043-3948-9c90 ['Mildred Linda', 'Josephine Larry', 'Henry Mildred']
c9b16828-91d2-33c9-b915 ['Mildred Linda', 'Josephine Larry', 'Henry Mildred']
a6f8a71d-7568-3552-9cf4 ['Mildred Linda', 'Josephine Larry', 'Henry Mildred']
</code></pre>
<p>Even though the list_contacts is different every time (you can try printing it before updating the dictionary), all the key values are getting updated to the last list in that iteration. Any help is very much appreciated as I really don't know what is the cause for this.</p>
<p>Thank you :)</p>
</div>
<div class="post-text" itemprop="text">
<p>this is a copy by ref problem - all your dict-"values" hold the same reference to the same data - as soon as you use one reference to update data, you modify the data underlying all references. If you want to have distinct and different lists, you need to copy.deepcopy() it when you put it into your dict.</p>
<p>You can get a unique id using <code>id()</code> on a pyton object to distinguish/compare if they are "the same" or "different" like so:</p>
<pre><code>def pp (l, s):
    """silly pretty printer"""
    print(s+"\n")
    print("    ",id(l), l)
    for n in l:
        print("        ", id(n),n) 
        if n is type(list):
            for m in n:
                print("            ",id(m),m)
    print()


data         = [ [3,4] , "aa" ]              # a list, mutable
dataWithData = [ data, data, [99,100], 1]    # contains 2 refs to data, 1 new list 
                                             # if you append to dataWithData[1] both change

pp(dataWithData, "original list [ data, data, [99,100], 1]" )

dataWithData2 = dataWithData[:]  # shallow copy

pp(dataWithData2, "shallow copy of [ data, data, [99,100], 1]" ) 

import copy
dataWithData3 = copy.deepcopy( dataWithData)
pp(dataWithData3, "deepcopyed [ data, data, [99,100], 1]")
</code></pre>
<p>original list <code>[ data, data, [99,100], 1]</code></p>
<pre><code> 764500835912 [[[3, 4], 'aa'], [[3, 4], 'aa'], [99, 100], 1]
     764497577480 [[3, 4], 'aa']
     764497577480 [[3, 4], 'aa']
     764500834824 [99, 100]
     1763008736 1
</code></pre>
<p>shallow copy of <code>[ data, data, [99,100], 1]</code></p>
<pre><code> # only the ref to the outer varname was changed - it is a new name but points
 # to all the old data 
 764500834888 [[[3, 4], 'aa'], [[3, 4], 'aa'], [99, 100], 1]
     764497577480 [[3, 4], 'aa'] # same
     764497577480 [[3, 4], 'aa'] # same
     764500834824 [99, 100]      # same
     1763008736 1                # same
</code></pre>
<p>deepcopyed <code>[ data, data, [99,100], 1]</code></p>
<pre><code> # all were changed, so all point to "new" data
 764500835400 [[[3, 4], 'aa'], [[3, 4], 'aa'], [99, 100], 1]
     764500834952 [[3, 4], 'aa']
     764500834952 [[3, 4], 'aa']
     764498168136 [99, 100]
     1763008736 1
</code></pre>
<p>Copy &amp; paste into your editor and play around - change stuff and pp the various versions to see what carries over (or inspect the ids). </p>
</div>
<span class="comment-copy">this is a copy by ref problem - all your dict-"values" hold the same reference to the same data - as soon as you use one reference to update data, you modify the data underlying all references. If you want to have distinct and different lists, you need to <code>copy.deepcopy()</code> it when you put it into your dict</span>
<span class="comment-copy">Have you looked at the <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a>? it seems to be what you need. First define it like this: <code>list_users = defaultdict(list)</code> then use it like this: <code>list_users[user].append(contact)</code> instead of the whole try-except block of code.</span>
<span class="comment-copy">@PatrickArtner Thank you very much, your suggestion works. However just to clarify, this can be avoided by copying the values not the reference to the list right? which I assume is what deepcopy() is doing</span>
