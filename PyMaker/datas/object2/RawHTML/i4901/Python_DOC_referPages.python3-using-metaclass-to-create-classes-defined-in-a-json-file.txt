<div class="post-text" itemprop="text">
<p>I´m currently creating a program which will be able to create classes at runtime. What I want is to load a json file into the script and from there create classes and inherited classes. In this file the class names will come as strings, this is why I need a solution that takes a string <strong>"A"</strong> and converts it into <strong>class A(metaclass=Metaclass)</strong> .I have learned a bit of metaclasses and understand some of it, however, I failed to create classes due to the fact that I´m not able to declare the name of the class. I came to a clumsy solution by using globals(). However, I was wondering if there is a more pythonic solution.</p>
<pre><code>class MetaFoo(type):

    def __new__(cls,name,bases,attr):
        print(f"{name} is invoking {cls.__name__}")
        return super().__new__(cls,name,bases,attr)

    def creator(name,bases,attr):
        globals()[name] = type(name,bases,attr)

class Foo(metaclass=MetaFoo):
    pass

class SubFoo1(Foo):
    pass

class SubFoo2(Foo):
    pass

class InheritFoo(SubFoo1,SubFoo2):
    pass

print("-"*30)
MetaFoo.creator("Z",(Foo,),{})
</code></pre>
<p>The output would be:</p>
<pre><code>Foo is invoking MetaFoo
SubFoo1 is invoking MetaFoo
SubFoo2 is invoking MetaFoo
InheritFoo is invoking MetaFoo
------------------------------
Z is invoking MetaFoo
</code></pre>
<p>Now I can create subclasses of Foo with creator(), however, I understand I'm having the wrong approach and my code is not able to produce directly subclasses of MetaFoo. So here are my three questions.</p>
<ol>
<li><p>How can I create classes from Metaclass using a string loaded externally? Not using metaclass <em>type()</em> like I did because if I were to use type() to create classes there would be no point to create a custom metaclass.
<strong>I need to use metaclass not only because it lets you create new classes 
dinamically, but becuase it offers many functionalities like that I need in 
my program.</strong></p></li>
<li><p>I´m going to be dealing with big data, probably some millions of SQLite3 lines. Each line corresponds to a purchase and each class to a category, subcategory, etc. Performance wise, ¿Is having million of active objects, in this case, instances of the classes created by Metaclass, going to slow down the program or not being able to compute at all?</p></li>
<li><p>I know how to keep track of new classes being created via metaclass, but ¿How do I keep track of instances of the classes, which magic method and how should I modify it?</p></li>
</ol>
<p>Thank you for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>type</code>, call <code>MetaFoo</code> directly.  </p>
<pre><code>globals()[name] = MetaFoo(name, (), {})
</code></pre>
<p>Jeff Knupp mentions doing something similar with metaclasses and databases for his <a href="https://github.com/jeffknupp/sandman" rel="nofollow noreferrer"><code>sandman</code></a> library in a post <a href="https://jeffknupp.com/blog/2013/12/28/improve-your-python-metaclasses-and-dynamic-classes-with-type/" rel="nofollow noreferrer">here</a>. You might want to look at his code and see if he's written anything more on that subject.</p>
</div>
<span class="comment-copy">I don't have time right now to write out a full answer however you could just assign the class object to a different name like so: <code>Z = Foo</code> and then instances could be created using <code>z = Z()</code>.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/12101958/how-to-keep-track-of-class-instances">How to keep track of class instances</a></span>
<span class="comment-copy">I didn´t realize the answer was so simple, thank you. ¿What do you think about the second question I made? Would having millions of instances have performance issues?</span>
<span class="comment-copy">Millions of instances is a lot.  Make a single instance and use <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow noreferrer"><code>sys.getsizeof</code></a> to see how big it is. (Also use <code>getsizeof</code> to determine the size of any container objects that object references).  Then multiply that by the number of objects you expect to have.  I would do everything in my power not to have millions of instances to manage.</span>
