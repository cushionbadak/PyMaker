<div class="post-text" itemprop="text">
<p>I have a list of dicts. </p>
<pre><code>dictList = [
  {'name': 'some name'},
  {'name': 'some other name'},
  {'age': 'some age'},
  {'last_name': 'some last name'}
]
</code></pre>
<p>In that list of dicts each dict has one key and one value for that key, as shown above. </p>
<p>I need to create a dict that has the keys from all the dicts and each value for every key is a set with item values from the list of dicts. In the example, it'd be something like this:</p>
<pre><code>expected_dict = {
    'name': ['some name', 'some other name'],
    'age': ['some age'],
    'last_name': ['some last name']
}
</code></pre>
<p>How can I do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault()</code></a> function.</p>
<pre><code>dictList = [
  {'name': 'some name'},
  {'name': 'some other name'},
  {'age': 'some age'},
  {'last_name': 'some last name'}
]

expected_dict = {}

for dictionary in dictList:
    for key, val in dictionary.items():
        expected_dict.setdefault(key, []).append(val)

print(expected_dict)
</code></pre>
<p>Output:</p>
<pre><code>{
    'name': ['some name', 'some other name'], 
    'age': ['some age'], 
    'last_name': ['some last name']
}
</code></pre>
<p><strong>Note:</strong> Using <code>collections.defaultdict</code> (as shown in <a href="https://stackoverflow.com/a/49037117/7832176">this answer</a>) is simpler and faster than using <code>dict.setdefault()</code>.</p>
<p>From the <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer">documentation</a>:</p>
<p>Working of <code>collections.defaultdict</code>:</p>
<blockquote>
<p>When each key is encountered for the first time, it is not already in the mapping; so an entry is automatically created using the <code>default_factory</code> function which returns an empty list. The <code>list.append()</code> operation then attaches the value to the new list. When keys are encountered again, the look-up proceeds normally (returning the list for that key) and the <code>list.append()</code> operation adds another value to the list. This technique is simpler and faster than an equivalent technique using <code>dict.setdefault()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>collections.defaultdict</code> is one way:</p>
<pre><code>from collections import defaultdict

d = defaultdict(list)

dictList = [
  {'name': 'some name'},
  {'name': 'some other name'},
  {'age': 'some age'},
  {'last_name': 'some last name'}
]

for i in dictList:
    for k, v in i.items():
        d[k].append(v)

# defaultdict(list,
#             {'age': ['some age'],
#              'last_name': ['some last name'],
#              'name': ['some name', 'some other name']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>bigD = {}
for element in dictList:
    for key in element:
        if key in bigD:
            bigD[key].append(element[key])
        else:
            bigD[key] = element[key]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>import import itertools
dictList = [
    {'name': 'some name'},
    {'name': 'some other name'},
    {'age': 'some age'},
    {'last_name': 'some last name'}
]
new_list = {a:[c for [[_, c]] in b] for a, b in itertools.groupby(map(lambda x:x.items(), dictList), key=lambda x:x[0][0])}
</code></pre>
<p>Output:</p>
<pre><code>{'age': ['some age'], 'last_name': ['some last name'], 'name': ['some name', 'some other name']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Very simply. </p>
<pre><code>dict = {} 
list = [1,2,3]
dict['numbs'] = list
print(dict)
</code></pre>
<p>Output : 
<code>{'numbs': [1, 2, 3]}
</code></p>
</div>
<span class="comment-copy">@jpp now edited.</span>
<span class="comment-copy">What have you tried that isn't working?</span>
<span class="comment-copy">Out of interest, is there a reason you prefer this method as opposed to the (equivalent) <code>collections.defaultdict</code>?</span>
<span class="comment-copy">Tbh, I was not aware of <code>collections.defaultdict</code>. Thought using the builtin method is better. I'd like to know which method is better.</span>
<span class="comment-copy">From the <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer">docs</a>, <code>defaultdict is simpler and faster than an equivalent technique using dict.setdefault()</code>. Question answered. I'll keep my answer instead of deleting it as an alternative method.</span>
<span class="comment-copy">are the values of the dict, sets?</span>
<span class="comment-copy">no, the dictionary has values which are lists.</span>
