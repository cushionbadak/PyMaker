<div class="post-text" itemprop="text">
<p>I'm working through the <a href="https://adventofcode.com/2017/day/23" rel="nofollow noreferrer">Advent of Code 2017 problems</a> for fun, and a few of them require that you interpret and execute pseudo-assembly programs. I want to write a reuse module that provides the necessary infrastructure for this. Specifically, I want to provide sandboxed <code>exec</code> and <code>eval</code> functions, and a function that resolves a variable in the interpretation namespace. I read about metaclasses and started framing one up, but I'm getting stuck on the implementation details. I envision being able to do this:</p>
<pre><code>class InterpreterMixinMeta(type):
    """see below for my attempt"""
    pass

class InterpreterMixin(metaclass=InterpreterMixinMeta):
    pass

class Program(InterpreterMixin):
    """does the actual work of running a pseudo-assembly program"""
    pass
</code></pre>
<p>Here's my initial attempt at <code>InterpreterMixinMeta</code>. How do I create properties and methods on the object that will use the mixin? Properties like a unique copy of the locals dict for <code>execs</code> and <code>evals</code>, methods like <code>val()</code>.</p>
<pre><code>class InterpreterMixinMeta(type):
    """
    A constructor for InterpreterMixin. Creates a new mixin class that
    exposes functions needed for interpreting pseudo-assembly programs:
    `execs`, `evals`, and `val`
    """

    @staticmethod
    def init_execs(exc_locals: dict):
        """Creates a persistent sandbox environment for calls to `exec`"""
        sbox_globals = {'__builtins__': None}

        def sbox_exec(source: str):
            return exec(source, sbox_globals, exc_locals)

        return sbox_exec

    @staticmethod
    def init_evals(exc_locals: dict):
        """Creates a persistent sandbox environment for calls to `eval`"""
        sbox_globals = {'__builtins__': None}

        def sbox_eval(expr: str):
            return eval(expr, sbox_globals, exc_locals)

        return sbox_eval

    def val(self, x: str) -&gt; str:
        """Returns the integer value of the input, formatted as a string"""
        if x.isdigit():
            return x
        else:
            return str(self.evals(x))

    def __new__(mcs, name, bases, nspace):
        # how do I let each object define a myLocals dict?
        nspace['execs'] = InterpreterMixinMeta.init_execs(myLocals)
        return super().__new__(mcs, name, bases, nspace)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I solved this problem without using a metaclass. I first had to step back and rethink my object model. Ultimately, the roles and relationships I want to define are:</p>
<ul>
<li>Executor: A class instance that defines the state of a sandboxed namespace and exposes an API for interacting with it</li>
<li>Interpreter: A class that defines an API for translating specific input grammar into specific Python grammar. It uses an interpreter (instance) to execute the final grammar.</li>
<li>Program: A list of statements to be executed in order and a covenient API for executing them and retrieving information about their results.</li>
</ul>
<p>Each executor (instance) needs to initialize itself with a sandbox for the <code>exec</code> and <code>eval</code> functions. <strong>That's not what metaclasses are for: metaclasses are for initializing class objects...not class <em>instance</em> objects. To intialize a class instance object, I need to write a class.</strong> That's it: just a class.</p>
<p>So I wrote an Executor that initializes executor objects with their own <code>locals</code> and <code>globals</code> dicts. It also needs to provide functions that always use these dicts when called. That's what closures are for. And my approach to creating closures in each instance object was to monkey patch them in after initializing the object.</p>
<p>Here's the resultant Executor class:</p>
<pre><code>from types import MethodType

class Executor:
    """Is a sandboxed executor and evaluator of Python statements."""

    def __init__(self, sbox_globals: dict=None, sbox_locals: dict=None):

        # Set up execution context for this instance
        if sbox_globals is not None:
            sbox_globals.setdefault('__builtins__', None)
            self.sbox_globals = sbox_globals
        else:
            self.sbox_globals = {'__builtins__': None}
        self.sbox_locals = {} if sbox_locals is None else sbox_locals

        # Monkey patch closures onto this instance
        def sbox_exec(self, source: str):
            """A persistent sandbox environment for calls to `exec`"""
            return exec(source, self.sbox_globals, self.sbox_locals)

        def sbox_eval(self, expr: str):
            """A persistent sandbox environment for calls to `eval`"""
            return eval(expr, self.sbox_globals, self.sbox_locals)

        self.execs = MethodType(sbox_exec, self)
        self.evals = MethodType(sbox_eval, self)
</code></pre>
<p>Armed with this tool, I wrote a class that implements the Interpreter and Program roles at once, calling it <code>Interpreter</code>. An interpreter (instance) composes an executor (instance) and implements the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterator protocol</a>. It looks something like this:</p>
<pre><code>from collections.abc import Iterator

class Interpreter(Iterator):
    """
    Is a translator from input grammar to Python grammar. Is also an iterator
      that executes one statement per call.
    Has an Executor and uses it when called in iteration.
    """

    def __init__(self, instruction_set: list):
        self.exc = Executor(sbox_locals={})

        # iterator protocol
        self.instrs = instruction_set
        self.i = 0

    def __iter__(self):
        return super().__iter__()

    def __next__(self):
        if 0 &lt;= self.i &lt; len(self.instrs):

            instr = self.instrs[self.i][0]
            param = self.instrs[self.i][1]

            if instr == 'foo':
                cmd = f'py_foo({param})'
                self.exc.execs(cmd)
                ret = f'{self.i}: ' + cmd
            elif instr == 'bar':
                cmd = f'py_bar({param})'
                self.exc.execs(cmd)
                ret = f'{self.i}: ' + cmd
            else:
                ret = f'{self.i}: {instr} no-op'

            self.i += 1
            return ret
        else:
            raise StopIteration
</code></pre>
</div>
<span class="comment-copy">It’s not clear at all that you need a metaclass for this: have you tried just using inheritance?</span>
<span class="comment-copy">The input is trusted, though. The exercise provides pseudocode that my <code>program</code> object translates to hard-coded Python statements run by the <code>evals</code> and <code>execs</code> functions in the mixin. User input is never executed directly. As for the use of a metaclass, I'm trying to solve the problem this way in order to learn more about the use of metaclasses. It's just a hobby exercise, after all; why not challenge myself with its implementation?</span>
<span class="comment-copy">Maybe just don’t call it “safe”, then.  Using a metaclass may not be merely harder but uglier: I suspect you end up needing to define more magic names like <code>__slots__</code>.</span>
<span class="comment-copy">I changed 'safe' to 'sandbox' to remove the red Herring.</span>
<span class="comment-copy">I see what you did there.</span>
