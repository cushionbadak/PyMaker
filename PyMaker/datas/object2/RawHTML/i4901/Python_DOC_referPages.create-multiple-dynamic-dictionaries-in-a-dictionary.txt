<div class="post-text" itemprop="text">
<p>I have multiple text files. Each file is a list of animals and their counts for a house. Like this:</p>
<p>houseA.txt</p>
<pre><code>cats 3  
dogs 1  
birds 4
</code></pre>
<p>houseB.txt</p>
<pre><code>cats 5  
dogs 3  
birds 1
</code></pre>
<p>I have about 20 houses and each house has about 16000 species (so each file has about 16000 lines. All houses have the same species, just different counts for each specie. </p>
<p>My current script loops through each file, line by line, and captures the house, specie name and its count.</p>
<p>I want to create a dictionary of houses, where each house is a dictionary of animals and their counts. So from the example above, the result would look like this:</p>
<pre><code>dictOfDicts{houseA:{'cats': 3, 'dogs': 1, 'birds': 4}, houseB:{'cats': 5, 'dogs': 3, 'birds': 1}}
</code></pre>
<p>In case you're wondering, this will later be turned into a table:</p>
<pre><code>      house:   A   B
animal         
  cats         3   5
  dogs         1   3
 birds         4   1
</code></pre>
<p>Here's my script:</p>
<pre><code>#!/usr/bin/python3
import sys


houseL = []
dictList = []
with open(sys.argv[1], 'r') as files:
    for f in files:
        f = f.rstrip()
        with open(f, 'r') as aniCounts:
            house = str(aniCounts).split(sep='/')[2]  # this and the next line captures the house name from the file name.
            house = house.split('.')[0]
            houseL.append(house)

            for line in aniCounts:
                ani = line.split()[0]
                count = line.split()[1]
                #print(ani, ' ', count)
</code></pre>
<p>EDIT: Changed question to dict of dicts, thanks to a helpful commenter.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would try something like this:</p>
<pre><code>house_names = ['houseA', 'houseB', ...]
houses_dict = {}

for house in house_names:
    houses_dict[house] = {}

    with open(house + '.txt') as f:
        for line in f:
            species, num = line.rsplit(maxsplit=1)  # split off rightmost word
            houses_dict[house][species] = int(num)
</code></pre>
<p>The result will then be (e.g.):</p>
<pre><code>houses_dict = {
    'houseA': {
        'cats': 3
        'dogs': 1
        'birds': 4
    },
    'houseB': {
        'cats': 5
        'dogs': 3
        'birds': 1
    }
    ...
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more version:</p>
<pre><code>from path import Path

dir_path = '/TEMP'

files_ls = [x for x in Path(dir_path).files() if 'house' in str(x)]

def read_file(path):
    lines = dict([row.strip().split(' ') for row in path.open(encoding='utf-8')])
    return lines

all_data = dict([(str(x.name),read_file(x)) for x in files_ls])

print(all_data)
</code></pre>
<p>Output:</p>
<pre><code>{'house1.txt': {u'birds': u'4', u'cats': u'3', u'dogs': u'1'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you do not want to split yourself, use a <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">csv.DictReader</a> and ensure any animal with spaces inside its name is quoted in the file:</p>
<pre><code>from csv import DictReader

d = {}
files = ["h1.csv","h2.csv"]

for f in files:
  with open(f,"r",encoding="utf8",newline="") as  houseData:
    d[f] = {} # dict per house
    for row in DictReader(houseData, fieldnames=["animal","count"], delimiter=' ' ):
      d[f][row["animal"]] = int(row["count"])  # access by given fieldnames

print(d)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'h1.csv': {'cats': 3, 'dogs': 1, 'birds': 4}, 
 'h2.csv': {'cats': 5, 'dogs': 3, 'birds': 1, 'insects': 2402, 'Blue Flutterwings': 2}}
</code></pre>
<p><em>File</em> h1.csv</p>
<pre><code>cats 3
dogs 1
birds 4
</code></pre>
<p><em>File</em> h2.csv</p>
<pre><code>cats 5
dogs 3
birds 1
insects 2402
"Blue Flutterwings" 2
</code></pre>
<p><strong>Caveat:</strong> If you harbour <code>Green Cantilopes</code> or <code>Blue Flutterwings</code> in your house, you have to quote them in the file - thats where this solution starts to shine - as it will automagically handle quoted strings in combination with <code>' '</code>  as delimiter .</p>
</div>
<span class="comment-copy">Please post the code for your current script. Also, that result is not a valid Python list. Do you actually want a dict of dicts? I.e. <code>{'houseA': {...}, 'houseB': {...}}</code></span>
<span class="comment-copy">You are right! I do want a dictionary of dictionaries...</span>
<span class="comment-copy">So do you have another file containing the list of text files? If not you don't need the first <code>open</code>.</span>
<span class="comment-copy">@ Paul Rooney how would Python know that "house" is a file name then?</span>
<span class="comment-copy">Very clean code. I like it.  But I'm getting a KeyError for the very first entry 'cats' .</span>
<span class="comment-copy">Hmmm. Just tested and it works for me. Did you get a KeyError while running the code, or while using <code>houses_dict</code> afterwards?</span>
<span class="comment-copy"><code>line.rsplit(1)</code>  would be better there, as it would allow  species names to have spaces.</span>
<span class="comment-copy">I got it while running the code.</span>
<span class="comment-copy">@Phydeaux, I figured it out! I don't have a list of houses, like you do. I create that list while looping through the list of file names. So I missed the line <code>houses_dict[house] = {}</code> which explains the error I got. Also, sorry about the late reply.</span>
<span class="comment-copy">does not work for the rare <code>Tibateean Pushelwushel Groundhog</code> - just in case it lives in any of the houses</span>
<span class="comment-copy">sure there should be special care for names but there is no point in guessing (quotes, multiple spaces, special chars etc) as it was not specified in the task.</span>
<span class="comment-copy">dear downvoter, please leave constructive feedback so I can learn something.</span>
