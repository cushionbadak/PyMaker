<div class="post-text" itemprop="text">
<p>I have these lists:</p>
<pre><code>array = ['I love school', 'I hate school', 'I hate bananas', 'today is 
friday', 'worldcup is great']

#finalArray is initially an empty list
finalArray = []  
</code></pre>
<p>I want to save those indexes of "array" that contain the word "school" into "finalArray". Meaning that "finalArray" should become like this:</p>
<pre><code>['I love school', 'I hate school']
</code></pre>
<p>I tried the following code which does not do the job:</p>
<pre><code>if "school" in array:
    finalArray = array.index("school")
</code></pre>
<p>Why is it not working? Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your solution is not working since you're checking for the whole word 'school' in your example array. To accomplish what you want you have to traverse the list and check each element for containing 'school':</p>
<pre><code>array = ['I love school', 'I hate school', 'I hate bananas', 'today is friday', 'worldcup is great']
finalArray = []

for element in array:
    if 'school' in element.lower():
        finalArray.append(element)
</code></pre>
<p>Please note that I have added a lower() to each checked element to make sure that your program will also catch 'School' in the input list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterate through the array, looking to see whether the target word, <code>school</code> is in that array element.  Then drop the index into your list.</p>
<pre><code>final_array = [i for i in range(len(array)) if "school" in array[i]]
</code></pre>
<p>Output:</p>
<pre><code>[0, 1]
</code></pre>
<p>Your original attempt didn't do that: <code>index</code> could find the location of <code>school</code> in a sentence, not the location of the sentence <em>containing</em> <code>school</code> in the array.</p>
<p>Improvement with more Pythonic technology:</p>
<pre><code>[i for i, phrase in enumerate(array) if "school" in phrase]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check if <code>"school"</code> exists in the current element of iteration:</p>
<pre><code>array = ['I love school', 'I hate school', 'I hate bananas', 'today is friday', 'worldcup is great']
new_array = [i for i in array if "school" in i]
</code></pre>
<p>Output:</p>
<pre><code>['I love school', 'I hate school']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>enumerate</code> is one Pythonic solution to extract indices:</p>
<pre><code>arr = ['I love school', 'I hate school', 'I hate bananas',
       'today is friday', 'worldcup is great']

res = [i for i, j in enumerate(arr) if 'school' in j]

# [0, 1]
</code></pre>
<p>If you want values, the logic is simpler:</p>
<pre><code>res = [i for i in arr if 'school' in i]

# ['I love school', 'I hate school']
</code></pre>
<p>A list comprehension gives the same result as appending to a list via a for loop, except it is highly optimised.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why is it not working? </p>
</blockquote>
<p>Because the <a href="https://docs.python.org/3/library/array.html?highlight=index#array.array.index" rel="nofollow noreferrer">index(x)</a> method, according to the official Python 3 documentation:</p>
<blockquote>
<p>Return the smallest i such that i is the index of the first occurrence of x in the array.</p>
</blockquote>
<p>So, if you want <code>finalArray = ['I love school', 'I hate school']</code>,
you don't want indexes (<em>integer numbers</em>), but you want the actual item (<em>in this case a string</em>).</p>
<hr/>
<blockquote>
<p>Is there a better way to do this?</p>
</blockquote>
<p>You can simply iterate over the elements (<em>the strings</em>) of your <code>array</code> and, if the string contains the word "school" you can add it to <code>finalArray</code>.</p>
<pre><code>array = ['I love school', 'I hate school', 'I hate bananas', 'today is friday', 'worldcup is great']

finalArray = []

for element in array:  # for each element in the array
    if "school" in element:  # check if the word "school" appears in the "element" string variable
        finalArray.append(element)  # if yes, add the string to "finalArray" variable
</code></pre>
<p><strong>Note</strong>: this is not Pythonic code by purpose. <a href="https://stackoverflow.com/a/49060306/8520828">Delirious Lettuce's answer</a> contains a Pythonic way of doing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am wondering noone introduced a solution with the built-in function<a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a>:</p>
<pre><code>&gt;&gt;&gt; array = ['I love school', 'I hate school', 'I hate bananas', 'today is friday', 'worldcup is great']    
&gt;&gt;&gt; list(filter(lambda el: 'school' in el, array))
['I love school', 'I hate school']
</code></pre>
</div>
<span class="comment-copy">Just for clarification: the solution proposed by @delirious-lettuce is indeed a more Pythonic one and should be the accepted answer. However, my intention was more to help the original poster get going with his own code and to adjourn aspiring to be more Pythonic to a later time. List comprehension is genuinely a concept a newcomer needs to wrap his or her head around before using it to its full advantage.</span>
<span class="comment-copy">@DeliriousLettuce: thanks; fixed.</span>
<span class="comment-copy">I read the text ... where it says OPP wants to save the <i>indexes</i>.  Yes, it's inconsistent ...</span>
<span class="comment-copy"><code>Meaning that "finalArray" should become like this: ['I love school', 'I hate school']</code></span>
<span class="comment-copy">Is there a reason you putting school in double quotes while your other strings are in single quotes?</span>
<span class="comment-copy">@YannicHamann the double quotes is to match the english language method of conveying the meaning that he is conveying, with tonal inflection. Technically, single and double quotes in the English language have slightly different use cases. It has also provided contrast between speaking, and code. The important part is that <i>within the code</i>, he is consistent. While he <i>could</i> have used double quotes in the code, the JS community generally prefers single quotes within JavaScript. Mixing single and double quotes within the code <i>would</i> be considered poor form. I see no problem in the usage here.</span>
