<div class="post-text" itemprop="text">
<p>I have a class that looks like this:</p>
<pre><code>class A(object):
    def __init__(self):  
         self.var_a = []
         self.var_b = []
</code></pre>
<p>Is there a way I can define <code>__str__</code> on <code>A</code> such that I can pass an index in this fashion:</p>
<pre><code>instance_a = A()    
# do stuff with instance_a causing var_a and var_b to populate
print( instance_a[idx] )
</code></pre>
<p>and get <code>__str__</code> to utilise the index and return something like:</p>
<pre><code>return "var_a is " + str(var_a[idx]) + ", var_b is" + str(var_b[idx]) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To format strings with parameters, use <code>__format__</code>:</p>
<pre><code>class A(object):
    def __init__(self):  
         self.var_a = []
         self.var_b = []

    def __format__(self, idx):
        idx = int(idx)
        return "var_a is {}, var_b is {}".format(self.var_a[idx], self.var_b[idx])
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.var_a=[4,5,6]
&gt;&gt;&gt; a.var_b=[1,2,3]
&gt;&gt;&gt; '{:1}'.format(a)
'var_a is 5, var_b is 2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is <code>__getitem__</code>, not <code>__str__</code>.</p>
<pre><code>class A(object):
    def __init__(self):
        self.var_a = []
        self.var_b = []

    def __getitem__(self, idx):
        return "var_a is " + str(self.var_a[idx]) + ", var_b is" + str(self.var_b[idx])


&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.var_a = [1,2,3]
&gt;&gt;&gt; a.var_b = [4,5,6]
&gt;&gt;&gt; print(a[2])
var_a is 3, var_b is6
</code></pre>
</div>
<span class="comment-copy">Which part of that involves <code>__str__</code>? It doesn't take any arguments, per the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">data model</a>, but if you want the syntax <code>instance_a[idx]</code> to work you need <code>__getitem__</code>, not <code>__str__</code>. It's the <i>result</i> of that method call you're then passing to <code>str</code>, and it's unclear what you expect that to be.</span>
<span class="comment-copy">Two reasons: 1) it would be cleaner in calling code to have the logic of assembling the string happen without specifically having to call a method on the class, 2) I wanted <b>getitem</b> to remain returning the native types of the underlying elements in a tuple, rather than cast to a string. But thinking about your comments, <b>str</b> probably is not the route to go anyway.</span>
<span class="comment-copy">Just make a regular method <code>def stringify(self, index):</code> or something. But you don't have control over passing extra arguments to <code>__str__</code>.</span>
