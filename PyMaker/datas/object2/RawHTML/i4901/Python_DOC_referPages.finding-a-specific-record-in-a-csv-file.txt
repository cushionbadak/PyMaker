<div class="post-text" itemprop="text">
<p>I'm making a project for school where users are quizzed on subjects and their results are saved into a report (CSV file called 'reportForFergusTwo') for the 'customer' (Fergus). The report shows the average score a certain quiz, the high score, and the username of the person who achieved it. And then, I'm meant to display the user's details but the user's details are saved in a different CSV file ('details').</p>
<p>So far I've made a function that finds the highest score and username of the person who achieved it in the CSV 'reportForFergusTwo'. I now need to work on a function that searches through another CSV file ('details').</p>
<pre><code>def findHighScoreUser():
    print(user)
    with open ('details.csv', 'r') as stalking:
        stalkingReader=csv.reader(stalking)
        valid4=False
        for row in stalkingReader:
            if user in row:
                valid4=True
                print("Here are the details for user {}... ".format(user))
                splitter=row.split(',')
                name=splitter[0]
                age=splitter[1]
                year=splitter[2]
                print("Name: {}".format(name))
                print("Age: {}".format(age))
                print("Year Group: {}".format(year))
                postReport()
    if valid4==False:
        print("Sorry Fergus, this user doesn't seem to be in our records.")
</code></pre>
<p>'user' is a variable from my previous function, where I found the username of the person with the highest score. It holds the username. I made it global and printed it at the start of this function, and that's working, making me think this is an issue I've made in reading the CSV.</p>
<p>Here is the details CSV:</p>
<pre><code>Name,Age,Year Group,Username,Password
Erin Jones,15,11,Eri15,Password
Lucas Jones,16,11,Luc16,Password2
Michael Jordan,11,7,Mic11,GetSomeHelp
La Roux,14,9,La 14,Bulletproof
</code></pre>
<p>And here is the reportForFergusTwo CSV:</p>
<pre><code>Subject,Difficulty,Score,Username
language,easy,10,Luc16
chemistry,easy,10,Luc16
maths,easy,9,Luc16
chemistry,easy,5,Eri15
chemistry,easy,6,Mic11
chemistry,easy,0,Eri15
</code></pre>
<p>I'm still fairly new to code, so please excuse me if the answer is obvious.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your user is no longer in scope you can provide it to your function like this:</p>
<pre><code>def functionThatFindsHighestScoreUser():
    # do stuff
    return maxScoreUser 

def findHighScoreUser(user):
    print(user)
    # the rest of your existing code

# get the user
maxScoreUser = functionThatFindsHighestScoreUser()

# find it and print details
findHighScoreUser(maxScoreUser)
</code></pre>
<p>There is almost always a way around global variables by using parameters in the function - don't use them, provide each function exactly with what it needs.</p>
<hr/>
<p>As for the csv-issues: csv module does the splitting for you as Tomalak mentioned. You can consume the reader line wise and get a list of all fields: </p>
<pre><code>import csv


def checkUsers(name):
    with open("users.csv",encoding="utf8",newline='\n') as u:
        reader = csv.DictReader(u, delimiter=',', quotechar='|' ) 
        found = False
        for row in reader:
            if row["Name"] == name:
                print("Here are the details for user {}... ".format(row["Name"]))                   
                print("Name: {}".format( row["Name"]))
                print("Age: {}".format( row["Age"]))
                print("Year Group: {}".format( row["Year Group"]))
                found = True
                break # leave for loop
        if not found:
            print("Not in users")


checkUsers("Michael Jordan")
checkUsers("Chris Cringle")
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([('Name', 'Michael Jordan'), ('Age', '11'), 
             ('Year Group', '7'), ('Username', 'Mic11'), ('Password', 'GetSomeHelp')])
Not in users
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this?:</p>
<pre><code>import pandas
#read csv data
stalking = pandas.read_csv('details.csv')
#Select all records from the stalking csv where Username equals the user you are looking for
user_details = stalking[stalking['Username']==user]

#Print values for each column from subset of data which only contains records where username == user
print('Name: {}'.format(user_details['Name']))
print('Age: {}'.format(user_details['Age']))
print('Year Group: {}'.format(user_details['Year Group']))
</code></pre>
<p>edit: FYI if there are multiple rows with the same username this will print all the names, ages and year groups associated with that username.</p>
<p>pandas makes accessing and working with csvs really easily.  Once you've done var = pandas.read_csv('somefile.csv') you can access all the values in a given column using var['col1']. Subsetting can be done by doing var[var['col1'] == 'something'], which reads as 'Select records from dataset var where the values of col1 are 'something'.</p>
<p>The pandas docs can be found here: <a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow noreferrer">http://pandas.pydata.org/pandas-docs/stable/</a></p>
<p>Dictreader might also be a good way to go if pandas seems a bit too complex for what you're tyring to do.</p>
</div>
<span class="comment-copy">The whole point of the <code>csv</code> module is that you <i>don't</i> have to split the lines yourself. If you are using <code>.split()</code>, your are doing something wrong.</span>
<span class="comment-copy">Ah, okay. I was told to use .split() when asking for help, thank you for pointing this out. Any suggestions on what to do instead?</span>
<span class="comment-copy">The CSV reader will split the row for you when you give it the right parameters. <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.reader</a> You might also give the DictReader a try. <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.DictReader</a></span>
<span class="comment-copy">It's actually a bad thing to use <code>.split</code> on CSV, since this is perfectly valid in CSV: <code>val1,val2,"val3,right here"</code> - this has 3 values, the third one contains a comma. The csv module would do the right thing, <code>.split(',')</code> would mess this up. Avoid.</span>
<span class="comment-copy">As a matter of habit, don't forget to <code>open()</code> CSV files with <code>newline=''</code> in order to support multiple-line values and - generally all text files - with an explicit <code>encoding</code> argument, to avoid silent data breakage.</span>
<span class="comment-copy">Hi, I tried this and it said "missing 1 required positional argument". How do I fix this?</span>
<span class="comment-copy">@Tomalak  I found <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.reader</a> about file object and the usage of <code>newline=''</code> but why is it needed . it only tells to use it like that?</span>
<span class="comment-copy">It just comes up with "not in users" when relying on the 'user' variable being global, and when I put user in () it said that it was missing (missing 1 positional argument)</span>
<span class="comment-copy">@PatrickArtner Why is it needed? I mentioned that in my comment above. It's not <i>needed</i> when the input CSV is simple, in the same way that specifying the file encoding is not <i>needed</i> when CSV matches your computer configuration's default encoding. But writing it anyway will not break anything, will make the implicit explicit (<a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 20</a>) and will generally allow the <code>csv</code> module to play out its potential. So I've made a habit out of not being picky and always write those attributes when working with CSV or text.</span>
