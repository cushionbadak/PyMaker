<div class="post-text" itemprop="text">
<p>It can someone be convenient to group variables under a given object.  </p>
<p>My use case is tensorflow, where you often have to define a graph first and then feed it with actual data.  To avoid getting the names of the graph variables jumbled up with those of the data variables, it's useful to group them all under an object.  What I've been doing is:</p>
<pre><code>g = lambda: None
g.iterator = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(minibatch_size).make_initializable_iterator()
g.x_next, g.y_next = g.iterator.get_next()
g.data_updates = g.x_data.assign(g.x_next), g.y_data.assign(g.y_next)
</code></pre>
<p>Except that when you use <code>lambda: None</code> your coworkers tend to get angry and confused.  </p>
<p>Is there an alternative that provides equally clean syntax but uses something that is more obviously a container than <code>lambda: None</code>?</p>
<p>I first tried making them all static members of a class, but the problem is that static members cannot reference other static members.  <code>g=object()</code> would be nice but doesn't allow you to assign attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's not worth defining a dedicated class, you can use <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer"><code>types.SimpleNamespace</code></a>, which is a class specifically designed to do nothing but hold attributes.</p>
<pre><code>g = types.SimpleNamespace()
g.iterator = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(minibatch_size).make_initializable_iterator()
g.x_next, g.y_next = g.iterator.get_next()
g.data_updates = g.x_data.assign(g.x_next), g.y_data.assign(g.y_next)
</code></pre>
</div>
<span class="comment-copy">like a dictionary?</span>
<span class="comment-copy">Like a dictionary, but without the clunkiness of <code>g['iterator']</code></span>
<span class="comment-copy">Why not define your own class?</span>
<span class="comment-copy">How about using <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow noreferrer"><code>types.SimpleNamespace</code></a>?</span>
<span class="comment-copy">If you inherit from <code>object</code> you already have a bunch of extremely useful methods.</span>
