<div class="post-text" itemprop="text">
<p>I have tried to find the best way to set up logging in a module, including <a href="https://stackoverflow.com/questions/25629985/python-logging-best-practice-for-reusable-modules-intended-to-be-included-with-o/25630154">here</a>, but I still cannot seem to get logging working as I expected.</p>
<p>My files are:</p>
<pre><code>Foo
    __init__.py
    bar.py
app.py
</code></pre>
<p>The contents are:</p>
<p>__init__.py</p>
<pre><code>import logging

logging.getLogger(__name__).addHandler(logging.NullHandler())
</code></pre>
<p>bar.py</p>
<pre><code>import logging

class Bar(object):
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        #self.logger.addHandler(logging.StreamHandler())
        self.logger.warning('Logger - Create bar')
        print('Print - Create bar')
</code></pre>
<p>app.py</p>
<pre><code>from foo.bar import Bar
import logging

# create logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# add formatter to console_handler
console_handler.setFormatter(formatter)

# add console_handler to logger
logger.addHandler(console_handler)

bar = Bar()
</code></pre>
<p>Running app.py in this format produces no logging output.</p>
<p>But if I uncomment the line in bar.py:</p>
<pre><code>self.logger.addHandler(logging.StreamHandler())
</code></pre>
<p>I get the logging outpt, but not formatting as app.py has defined.</p>
<p>Can someone please help me understand what I'm missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why should you get output?</p>
<p>From the docs: <a href="https://docs.python.org/3/library/logging.handlers.html#nullhandler" rel="nofollow noreferrer">NullHandler</a></p>
<blockquote>
<p>The NullHandler class, located in the core logging package, does not do any formatting or output. It is essentially a ‘no-op’ handler for use by library developers.</p>
</blockquote>
<p>The formatter is applied to the <code>logging.basicConfig()</code> if you want to set it as general default or the the instance (like you do for <code>console_handler</code>). </p>
<p>Now you just have to add it to the bar.logger.addHandler() (through a func f.e.) instead of creating a new variable in your other py file thats named the same as the member in bar.</p>
<p>In essence: you have multiple loggers, if you print the names, you get something along:</p>
<pre><code>Foo
__main__
Foo.bar
</code></pre>
<p>You only configure the Formatter of <strong>main</strong>, not the others.</p>
<hr/>
<p>To debug what and if any handler/formatstrings are set:</p>
<pre><code>for l in logging.Logger.manager.loggerDict:
    loggr = logging.Logger.manager.loggerDict[l]
    print("Found logger: " + l)
    if loggr.handlers:
        for h in loggr.handlers:
            formr = loggr.handlers[0].formatter
            if formr:
                print("        {} {}".format(l, formr._fmt))
            else:
                print("        {} has no formatter set.".format(l))
    else:
        print("    {} has no handlers.".format(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The application should dictated the logging rather than the library, so if you want to enable the logging of foo/bar.py, you need to add a handler that is different from the NullHandler to it on app.py. The way to do it would be just to add the following line before you instantiate Bar:</p>
<pre><code>logging.getLogger('foo').addHandler(console_handler)
</code></pre>
<p>Then the logging from bar.py will be outputted using the same format you defined on app.py.</p>
<p>For further reference please check <a href="http://docs.python-guide.org/en/latest/writing/logging/" rel="nofollow noreferrer">the hitchhiker's guide to python section about logging</a></p>
</div>
<span class="comment-copy">Why do you need the <code>NullHandler</code> in the <code>__init__.py</code> file? AFAIK it should <i>only</i> be <code>app.py</code> to add the handlers to the packages it needs. If <code>app.py</code> should log everything it can use <code>logging.getLogger()</code> to obtain the root logger and add handlers for it, otherwise it can do <code>logging.getLogger('package')</code> to configure the package logger. It does not make any sense to use <code>logging.getLogger(__name__)</code> in <code>app.py</code>... since it is not the root logger it will never receive logging events from the libraries you are using.</span>
<span class="comment-copy">OK. I removed (_<i>name_</i>) from the .getlogger in app.py and it works. I still don't understand why, but I'll look at it when I'm less tired</span>
<span class="comment-copy">There is a hierarchy of loggers, defined by their name. For example a logger called <code>package.module</code> is child of the logger <code>package</code>. Logging events "bubble up" this hierarchy until some handler prints them. The root logger (i.e. the one without a name) is parent of all the loggers, and hence if you set handlers there it will receive all unhandled events. your <code>app</code> logger had no relationship to the library's logger because the name <code>app</code> is not parent of <code>package</code>, they are siblings.</span>
<span class="comment-copy">I added the NullHandler because of <a href="http://pieces.openpolitics.com/2012/04/python-logging-best-practices/" rel="nofollow noreferrer">pieces.openpolitics.com/2012/04/python-logging-best-practices</a>, <a href="http://docs.python-guide.org/en/latest/writing/logging/" rel="nofollow noreferrer">docs.python-guide.org/en/latest/writing/logging</a> etc.</span>
<span class="comment-copy">If I remove the .addHandler(logging.NullHandler()) I get the error' No handlers could be found for logger "foo.bar"'</span>
<span class="comment-copy">@Psionman  The nullhandler is fine - it just does not produce any output. See answer, and use it to debug what/where which one is set to what..ever.</span>
