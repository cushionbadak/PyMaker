<div class="post-text" itemprop="text">
<p>I've been doing a course in Python, and got to the exercise where I have this code</p>
<pre><code>words = ['pear', 'cabbage', 'apple', 'bananas']
words.sort(key=lambda s: s[-1])  # Alternatively, key=operator.itemgetter(-1)
words  # =&gt; ['cabbage', 'apple', 'pear', 'bananas'] ... Why 'cabbage' &gt; 'apple'?
max(words, key=len)  # 'cabbage' ... Why not 'bananas'?
</code></pre>
<p>Can anyone explain, why does sorting orders the list in that way?</p>
<p>And why finding an item with max length returns wrong item? It is not the expected result at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>You use the last character as sort criterion. Sorting is stable. Therefore, for this list:</p>
<pre><code>words = ['pear', 'cabbage', 'apple', 'bananas']
</code></pre>
<p><code>cabbage</code> and <code>apple</code> compare equal for the last letter and stay in the order they are in the original list.</p>
<p>For the same reason <code>max</code> gives you <code>cabbage</code>. Both have the same length:</p>
<pre><code>&gt;&gt;&gt; len('cabbage') == len('bananas')
True
</code></pre>
<p>and <code>cabbage</code> is before <code>bananas</code> in the original list.</p>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">docs</a> explain this well:</p>
<blockquote>
<p>The <code>sort()</code> method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal â€” this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Your code <code>words.sort(key=lambda s:s[-1])</code> sorts the words by the last character of each of the words and if there are multiple possibilities it maintains the order in the original list.</p>
<p>If you need a regular alphabetical sort, then you need to use <code>words.sort()</code> and the result would be</p>
<pre><code>&gt;&gt;&gt; words.sort()
&gt;&gt;&gt; words
['apple', 'bananas', 'cabbage', 'pear']
</code></pre>
<p>If you sort words by <code>key=len</code> then the list contains <code>[ ... , 'cabbage', 'bananas']</code>. <code>max()</code> finds the first value of the list of possible values and hence its result is <code>cabbage</code> as it appears before <code>bananas</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Your Code is sorting according  to last index try this</p>
<pre><code>words.sort(key=lambda s: s[0]) 
</code></pre>
<p>"bananas"and "cabbage" have same length. It search which one is first in list then print this first occurrence</p>
</div>
<span class="comment-copy">For the sorting part: it's sorting the words by the last characters hence it is well sorted according to the specified policy</span>
<span class="comment-copy">Why do you think <code>cabbage</code> is the "wrong item"? What's wrong with it?</span>
<span class="comment-copy">Thank you, Mike. You cleared it up for me</span>
<span class="comment-copy">Great. It always good to learn something new. :)</span>
<span class="comment-copy">Thank you, and what about max()?</span>
<span class="comment-copy">If you sort words by <code>key=len</code> then the list contains <code>['cabbage', 'bananas']</code>. <code>max()</code> finds the first value of the list of possible values and hence its result is <code>cabbage</code></span>
<span class="comment-copy">Thank you, and what about the result of max()?</span>
