<div class="post-text" itemprop="text">
<p>I have an application with six functions. Each of them begins with logging in to the website. I create another class named login (below the code).
The structure of the project is 6 classes and main class.
How do you use this function in these six classes?
This my code for login in every single class and login class</p>
<pre><code>class ClassName1(unittest.TestCase):
    WebDriver driver=new FirefoxDriver();
    driver.get("URL");
    login=driver.find_element_by_name('Login')
    password=driver.find_element_by_name('Password')
    username.send_keys("login")
    password.send_keys("password")
    driver.find_element_by_name("submit").click()
</code></pre>
<p>I created Login class:</p>
<pre><code>class Login(unittest.TestCase)
    def log(self):
        WebDriver driver=new FirefoxDriver();
            driver.get("URL");
        login=driver.find_element_by_name('Login')
        password=driver.find_element_by_name('Password')
        username.send_keys("login")
        password.send_keys("password")
        selenium.find_element_by_name("submit").click()
</code></pre>
<p>My proposition is:</p>
<p><strong>from file import Login</strong> -&gt; to ClassName1 and in class:
        <strong>Login.log()</strong> but I don't know how use this
I have two session browser and error i don't know how to combine it into one session</p>
<p>And second question in my app in every single class I make - webdriver, can I test my six class in on browser session? Every single class open browser. I would like this in one. It's possible ? 
<strong>And second question</strong> in my app in every single class I make - webdriver, can I test my six class in one browser session? It's possible ? How I should change my code? Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue isn’t about Selenium; your issue is about sharing test data across tests. (The test data just happens to be a Selenium driver.)</p>
<p>With <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a>, setup can be done in one of two ways.</p>
<h1>1. Setting up data for <em>each</em> test</h1>
<p>If you add a <code>setUp()</code> instance method to your test case, <code>unittest</code> will call it before each test. (Similarly, if you add a <code>tearDown()</code> instance method to your test case, <code>unittest</code> will call it <em>after</em> each test.)</p>
<p>Because it is an instance method, you have access to the test instance (i.e., <code>self</code>). Data that is set up in this method can be assigned to various properties on the instance for later use in the actual test functions.</p>
<p>You could use this function to set up your driver before each test (and tear it down after):</p>
<pre class="lang-py prettyprint-override"><code>class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.get("http://www.example.com")
        self.driver.find_element_by_link_text("Log in").click()
        # ...

    def tearDown(self):
        self.driver.quit()

    def test_creating_a_widget(self):
        self.driver.find_element_by_link_text("New widget").click()
        # ...

    def test_creating_a_whatsit(self):
        self.driver.find_element_by_link_text("New whatsit").click()
        # ...
</code></pre>
<p>Importantly, this will still create a new driver (session) for each test. But...</p>
<h1>2. Setting up data for <em>all</em> tests</h1>
<p>If you add a <code>setUpClass()</code> class method to your test case, <code>unittest</code> will call it once (and only once) before all tests in the test case are run. (Similarly, if you add a <code>tearDownClass()</code> class method to your test case, <code>unittest</code> will call it once (and only once) <em>after</em> all tests in the test case are run.)</p>
<p>Because it is a class method, you have access to the test class (i.e., <code>cls</code>). Data that is set up in this method can be assigned to various properties on the class for later use in the actual test functions.</p>
<pre class="lang-py prettyprint-override"><code>class MyTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Firefox()

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()
</code></pre>
<h2>But wait!</h2>
<p>If you share the driver across tests, each test will pick up where the previous test left off. In other words, your tests won't be isolated, which can make writing and debugging your tests much, much more difficult.</p>
<p>To address this, we need to reset between each test. For that, we can go back to the <code>setUp()</code> and <code>tearDown()</code> instance methods:</p>
<pre class="lang-py prettyprint-override"><code>class MyTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Firefox()

    def setUp(self):
        self.driver.get("http://www.example.com")
        self.driver.find_element_by_link_text("Log in").click()
        # ...

    def tearDown(self):
        self.driver.get("about:blank")

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

    def test_creating_a_widget(self):
        self.driver.find_element_by_link_text("New widget").click()
        # ...

    def test_creating_a_whatsit(self):
        self.driver.find_element_by_link_text("New whatsit").click()
        # ...
</code></pre>
<h1>Epilogue: Sharing setup across tests</h1>
<p>To share this behavior across test cases, just use inheritance:</p>
<pre class="lang-py prettyprint-override"><code>class BaseTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Firefox()

    def setUp(self):
        self.driver.get("http://www.example.com")
        self.driver.find_element_by_link_text("Log in").click()
        # ...

    def tearDown(self):
        self.driver.get("about:blank")

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

class WidgetsTestCase(BaseTestCase):
    def test_creating_a_widget(self):
        self.driver.find_element_by_link_text("New widget").click()
        # ...

class WhatsitsTestCase(BaseTestCase):
    def test_creating_a_whatsit(self):
        self.driver.find_element_by_link_text("New whatsit").click()
        # ...
</code></pre>
<h1>Bonus: Use Capybara</h1>
<p>For tests that use Selenium, <a href="https://pypi.python.org/pypi/capybara-py" rel="nofollow noreferrer">capybara-py</a> may be better. It provides a layer atop Selenium and takes care of much of this and more, e.g., transparently waiting for asynchronous behavior:</p>
<pre class="lang-py prettyprint-override"><code>import capybara
import capybara.dsl
import unittest

class BaseTestCase(unittest.TestCase):
    def setUp(self):
        self.page = capybara.dsl.page
        self.page.visit("http://www.example.com")
        self.page.click_link("Log in")
        # ...

    def tearDown(self):
        capybara.reset_sessions()

class WidgetsTestCase(BaseTestCase):
    def test_creating_a_widget(self):
        self.page.click_link("New widget")
        # ...

class WhatsitsTestCase(BaseTestCase):
    def test_creating_a_whatsit(self):
        self.page.click_link("New whatsit")
        # ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on my understanding of your requirement. I would suggest this approach:</p>
<ol>
<li><p>Create Login Class with a method to return driver. (Here, you initialize a driver and return it. So, you can use the same browser while using other classes also)</p></li>
<li><p>For all your six Classes, define methods which take driver as a parameter and return the same after statements. (So, every time you call these methods, you can give your driver to them) 
Note: you don't need to write Login statements again.</p></li>
<li><p>Finally, write a new script which imports all the classes you have created. Here initialize a Login Class and get driver handler by calling log method (based on your Login Class). Then call other methods from any class that you want by providing the driver you received as an argument.</p></li>
</ol>
<p>i. Since you are initializing firefox driver in both Login and ClassName1, two sessions are created. You should avoid initializing driving in ClassName because you have already specific code for it in Login Class.</p>
<p>ii. Yes, you can test all the classes with one browser session using above guidelines.</p>
<p>Hope this helps to organize your code.</p>
</div>
<span class="comment-copy">When you say you have “an application with six functions,” do you mean “a test suite with six tests”? You say you have six functions but then that you have six classes. Are there six test cases (classes) with one test (function) each?</span>
