<div class="post-text" itemprop="text">
<p>For the array below, I am interested to sort the X-axis according to the y-axis and record the lowest tuple of the lowest X-value. </p>
<p>The array is:</p>
<pre><code>A = [(537, 14),
     (537, 12),
     (538, 13),
     (538, 14), # (538, 14) should be removed and (537, 14) should be kept
     (539, 12),
     (709, 9)]
</code></pre>
<p>I would to do this:</p>
<pre><code>New_A = [(537, 14),
         (537, 12),
         (538, 13), 
         (539, 12),
         (709, 9)]
</code></pre>
<p>What could I try here? </p>
</div>
<div class="post-text" itemprop="text">
<p>Given: </p>
<pre><code>a = [(537, 14),
     (537, 12),
     (538, 13),
     (538, 14),
     (539, 12),
     (709, 9)]
</code></pre>
<p>you can do:</p>
<pre><code>from itertools import groupby
from operator import itemgetter

f = itemgetter(1)
new_a = [next(group) for _, group in groupby(sorted(a, key=f, reverse=True), key=f)]
</code></pre>
<p>which gives:</p>
<pre><code>[(537, 14), 
 (538, 13), # &lt;- I am assuming you have a typo here OP
 (537, 12), 
 (709, 9)]
</code></pre>
<ul>
<li>Here is a link to find out more about <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a>.</li>
<li>And here is another one for <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="noreferrer"><code>operator.itemgetter</code></a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>To sort your list, use</p>
<pre><code>New_A = sorted(A, key=lambda x: x[0])
</code></pre>
<p>A common pattern is to sort complex objects using some of the object's indices as a key.</p>
<p>The second part of your question.</p>
<p>To get the lowest value according to X, and lowest value according to y are both shown below</p>
<pre><code>lowest = New_A[0]
print(lowest)
(537, 14)

lowest = New_A[-1]
print(lowest)
(709, 9)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The given two dimensional array is : </p>
<pre><code>A = [(537, 14),  (537, 12),  (538, 13),  (538, 14),  (539, 12), (709, 9)]
</code></pre>
<p>Let us suppose <code>A</code> is a relation with <code>(x,y)</code> as ordered pairs.
Therefore declare two variables <code>x</code> and <code>y</code> and initialize them to the first values, i.e,</p>
<pre><code>x=537 and y=14
</code></pre>
<p>Hence</p>
<pre><code>x=A[0][0]
y=A[0][1]
</code></pre>
<p>Also take two dummy variables <code>i</code> and <code>j</code> to iterate through the two dimensional array : 
The following algorithm chooses the lowest <code>x</code> value. If there are more than 1 <code>x</code> values which are equal , then choose <code>(x,y)</code> such that <code>y</code> is lowest.</p>
<pre><code># Here it starts :

j=0
for i in range(1,len(A)):
    for j in range(0,1) :
        if A[i][j]&lt;x :
            x=A[i][0]
            y=A[i][1]
        elif x==A[i][0] and y&gt;A[i][1] :
            y=A[i][1]
ans=(x,y)        

print(ans)
</code></pre>
<p>The ordered pair (x,y) is stored in the variable <code>ans</code> and then printed.
Please let me know if there is change in algorithm's logic.</p>
</div>
<span class="comment-copy">Can you explain why <code>(537,14)</code> but <code>(538,13)</code>? Shouldn't it be <code>(537,12)</code> as you mentioned lowest?</span>
<span class="comment-copy">Apologies, typo mistake! I apologize for the confusion. Thanks for the correction.</span>
<span class="comment-copy">Thanks for introducing me to groupby, works perfectly :)</span>
<span class="comment-copy">You have repeated <code>537</code> in output.</span>
<span class="comment-copy">@bro-grammer The way I understood the (not entirely clear) question is to keep the tuple <code>x</code> that for the same <code>x[1]</code> has the lowest <code>x[0]</code>. And OP said that <i>"..it works perfectly"</i>. Do you understand it differently?</span>
<span class="comment-copy">I don't understand the question at all. I thought <code>New_A</code> is the required output.</span>
<span class="comment-copy">@bro-grammer It is, but it contradicts the text explaining how to get to it.</span>
<span class="comment-copy">@Jeremy check updated answer</span>
<span class="comment-copy">Thanks Victor :)</span>
