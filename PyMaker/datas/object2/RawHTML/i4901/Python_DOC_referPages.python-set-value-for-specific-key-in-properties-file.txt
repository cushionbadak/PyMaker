<div class="post-text" itemprop="text">
<p>We have a sample .cfg file consist of key value pair. Based on user input, we need to update the value. I was thinking to update the value using configParser but file doesn't have any section (e.g. [My Section]). Based on the documentation it needs three values to set - section, key and value. Unfortunately, I will not be able to add any section marker, as this file is used by other tasks. </p>
<p>What would be the another way we can set the value based on key?   </p>
<h1>File example</h1>
<pre><code>some.status_file_mode    =  1    # Some comment
some.example_time    = 7200     # Some comment 
</code></pre>
<p>As per the requirement, no change in the line. Spaces and comments needs to be same as is.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer"><code>NamedTemporaryFile</code></a> from the tempfile module it is not too hard to build a simple parser to update a file that looks like that:</p>
<h3>Code:</h3>
<pre><code>def replace_key(filename, key, value):
    with open(filename, 'rU') as f_in, tempfile.NamedTemporaryFile(
            'w', dir=os.path.dirname(filename), delete=False) as f_out:
        for line in f_in.readlines():
            if line.startswith(key):
                line = '='.join((line.split('=')[0], ' {}'.format(value)))
            f_out.write(line)

    # remove old version
    os.unlink(filename)

    # rename new version
    os.rename(f_out.name, filename)
</code></pre>
<h3>Test Code:</h3>
<pre><code>import os
import tempfile
replace_key('file1', 'some.example_time', 3)
</code></pre>
<h3>Results:</h3>
<pre><code>some.status_file_mode    = 1
some.example_time    = 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about spacing, this works well for your case.</p>
<pre><code>def replace_config(filename, key, value):
    d = {}
    with open(filename, "r+") as f:
        for line in f:
            k, v = line.split('=')
            c = ""
            try:
                v, c = v.split('#')
            except ValueError:
                c = ""
            d[k.strip()] = {'v': v.strip(), 'c': c.strip()}
        f.seek(0)
        f.truncate()
        d[key]['v'] = value
        for k, v in d.items():
            if v["c"]:
                text = "{} = {}    # {}\n".format(k, v['v'], v['c'])
            else:
                text = "{} = {}\n".format(k, v['v'])
            f.write(text)

replace_config('config.cfg', 'some.example_time', 3)
</code></pre>
</div>
<span class="comment-copy">Now you have changed your input. Please don't do that.</span>
<span class="comment-copy">My bad, I missed the comment section earlier. I upvoted the earlier answer though.</span>
<span class="comment-copy">Thanks Rahul, I will try and let you know.</span>
<span class="comment-copy">Please use updated.</span>
<span class="comment-copy">Sure, i will try it tomorrow and if it works will upvote as well. thanks again.</span>
