<div class="post-text" itemprop="text">
<p>In Python 2, a Python variable name contains only ASCII letters, numbers and underscores, and it must not start with a number. Thus,</p>
<pre><code> re.search(r'[_a-zA-Z][_a-zA-Z0-9]*', s)
</code></pre>
<p>will find a matching Python name in the <code>str</code> <code>s</code>.</p>
<p>In Python 3, the letters are no longer restricted to ASCII. I am in search for a new regex which will match any and all legal Python 3 variable names.</p>
<p>According to <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">the docs</a>, <code>\w</code> in a regex will match any Unicode word literal, including numbers and the underscore. I am however unsure whether this character set contains exactly those characters which might be used in variable names.</p>
<p>Even if the character set <code>\w</code> contains exactly the characters from which Python 3 variable names may legally be constructed, how do I use it to create my regex? Using just <code>\w+</code> will also match "words" which start with a number, which is no good. I have the following solution in mind,</p>
<pre><code>re.search(r'(\w&amp;[^0-9])\w*', s)
</code></pre>
<p>where <code>&amp;</code> is the "and" operator (just like <code>|</code> is the "or" operator). The parentheses will thus match any word literal which at the same time is not a number. The problem with this is that the <code>&amp;</code> operator does not exist, and so I'm stuck with no solution.</p>
<h3>Edit</h3>
<p>Though the "double negative" trick (as explained in the answer by Patrick Artner below) can also be found in <a href="https://stackoverflow.com/questions/3548949/how-can-i-exclude-some-characters-from-a-class">this question</a>, note that this only partly answers my question. Using <code>[^\W0-9]\w*</code> only works if I am guaranteed that <code>\w</code> exactly matches the legal Unicode characters, plus the numbers 0-9. I would like a source of this knowledge, or some other regex which gets the job done.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a double negative - <code>\W</code> is anything that <code>\w</code> is not - just disallow it to allow any <code>\w</code>:</p>
<pre><code>[^\W0-9]\w*
</code></pre>
<p>essentially using any not - non-wordcharacter except 0-9 followed by any word character any number of times.</p>
<p>Doku: <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">regular-expression-syntax</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could try using </p>
<pre><code>^(?![0-9])\w+$
</code></pre>
<p>Which will not partial match invalid variable names </p>
<p>Alternatively, if you don't need to use regex. <code>str.isidentifier()</code> will probably do what you want.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3548949/how-can-i-exclude-some-characters-from-a-class">How can I exclude some characters from a class?</a> - is for perl - but non the less about the same...</span>
<span class="comment-copy">See <a href="https://www.python.org/dev/peps/pep-3131/" rel="nofollow noreferrer">PEP 3131</a> for the description of what is allowed in non-ASCII identifiers. Here's a list of valid start and continue characters as of Unicode 4.1 from that PEP: <a href="https://www.dcl.hpi.uni-potsdam.de/home/loewis/table-3131.html" rel="nofollow noreferrer">dcl.hpi.uni-potsdam.de/home/loewis/table-3131.html</a></span>
