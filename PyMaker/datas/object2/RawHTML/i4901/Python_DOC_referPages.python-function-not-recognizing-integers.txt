<div class="post-text" itemprop="text">
<p>I am writing a function that takes 3 inputs, if all 3 inputs are floats and/or integers it returns the average of the 3, otherwise it returns them as a list. </p>
<p>This is what I have:</p>
<pre><code>def list3(a,b,c):
    """if all inputs are int/float return average"""
    l = [a, b, c]
    for t in l:
        if t is int or t is float:
            s = sum(l)
            y = len(l)
            x = float(s/y)
            return x
        else:
            return(l)
</code></pre>
<p>when I input 3 integers it returns the list, how can I get it to recognize the input as integers? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way:</p>
<pre><code>def list3(a,b,c):
    """if all inputs are int/float return average"""
    l = [a, b, c]

    return sum(l)/len(l) if all(isinstance(t, (int, float)) for t in l) else l

list3(1, 2, 6)    # 3.0
list3('a', 1, 2)  # ['a', 1, 2]
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li><code>all(criteria for t in l)</code> applies a lazy function <code>all</code> on a generator expression, which checks if all items in <code>l</code> are integers or floats.</li>
<li><code>isinstance</code> is generally preferred to checking <code>type</code>.</li>
<li>The <code>if</code> / <code>else</code> clause can be replaced by a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">ternary statement</a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use exception handling. A <code>TypeError</code> exception is raised if not all elements of <code>l</code> are numeric:</p>
<pre><code>try:
    return float(sum(l)) / len(l) # Just in case it's Python 2.7
except TypeError:
    return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Minimal changes to get the code to work in Python 2 or 3:</p>
<pre><code>def list3(a, b, c):
    """if all inputs are int/float return average"""
    l = [a, b, c]
    s = 0
    for t in l:
        if type(t) is int or type(t) is float:
            s += t
        else:
            return l
    y = len(l)
    x = float(s) / y
    return x

</code></pre>
<p>You just needed to compare type(t) to int or float, and convert s to float before the division.  You also have to complete testing of all list members before the return, otherwise s = sum(l)will bomb for a case like [1, 'str', 6]</p>
</div>
<span class="comment-copy">If you use Python 3, then <code>float(s/y)</code> is unnecessary, because the result of the division is already a floating-point number. If you use Python 2, then <code>float(s/y)</code> must be <code>float(s)/y</code>, because <code>s/y</code> is an incorrect integer number.</span>
<span class="comment-copy">What do you mean by "when I input 4 integers"? Do you pass four parameters? Python will not allow you to do that.</span>
