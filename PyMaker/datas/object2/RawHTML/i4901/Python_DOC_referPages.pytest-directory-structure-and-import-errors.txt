<div class="post-text" itemprop="text">
<p>I'm coding my first project in Python and what I found frustrating about Python and PyTest is that it's complicated to make the directory structure and importing modules working.</p>
<p>I have a directory structure like this:</p>
<pre><code>Football
  football
    __init__.py
    file1.py
    file2.py
    file3.py
    main.py
  tests
    context.py
    test_file1.py
    test_file2.py
    test_file3.py
</code></pre>
<p>Obviously, the names of the files are different than in the above example.</p>
<p>When I want to import a class File2 from file2.py in file1.py or main.py, then in file1.py or main.py I write:</p>
<pre><code>from file2 import File2
</code></pre>
<p>The content of my context.py file is:</p>
<pre><code>import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import football
</code></pre>
<p>This is how the content of one of the tests files (for example 'test_file1.py') look like more or less:</p>
<pre><code>from context import football
from football.file1 import File1
</code></pre>
<p>And when I run football/main.py, it works.</p>
<p>But when I run pytest, I get the error more or less like that:</p>
<pre><code>football/file1.py:2: in &lt;module&gt;
from file2 import File2
E   ImportError: No module named 'file2'
</code></pre>
<p>So it imports correctly the 'file1.py' file but when that file imports 'file2.py' it raises the error that it can't import (although this import works when I run football/main.py without tests).</p>
<p>So how should all those imports be to make it all work and have no errors during tests?</p>
</div>
<div class="post-text" itemprop="text">
<p>You will need to add <code>__init__.py</code> to your Football/football directory for python package discovery. Then, one thing you could do is add a <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">setup.py</a> at your project's root level and within that use <a href="http://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages" rel="nofollow noreferrer">find_packages()</a> to recursively find packages to add to the python path. You'll then have to pip install your project into the virtual environment before running your tests. Tools like <a href="https://tox.readthedocs.io/en/latest/" rel="nofollow noreferrer">tox</a> make accomplishing these steps easier by automatically setting up the virtual environment before calling your test commands. </p>
<p>Another option is to use the <a href="https://docs.pytest.org/en/latest/monkeypatch.html" rel="nofollow noreferrer">monkeypatch</a> fixture (a pytest builtin) and modify the PYTHONPATH for your tests. You could put this in your tests/conftest.py. Still you would need to create an <code>__init__.py</code> in your Football/football  directory. </p>
<pre><code>@pytest.fixture(autouse=True)  # run this automatically before tests
def pythonpath(monkeypatch):
    path_to_project = "&lt;path to your project root&gt;"
    monkeypatch.setenv('PYTHONPATH', path_to_project)
</code></pre>
</div>
<span class="comment-copy">Where is your <code>__init__.py</code>?</span>
<span class="comment-copy">Sorry, I forgot about <code>__init__.py</code>. It's there, I just forgot to add this in the post. I will edit my post.</span>
<span class="comment-copy">Add an empty <code>conftest.py</code> (not "context.py") in <code>Football</code> (project root directory). It will resolve the imports in tests.</span>
