<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>For my assignment I have to check if a calculated value is within 0.05 of 0.5. To do this i thought subtracting one from another, taking the absolute value and checking if that is smaller or equal then 0.05 should do the trick. However when i try this piece of code.</p>
<pre><code>x = abs(0.5 - 0.55)

if x &lt;= 0.05:
    print 'x is', x, 'x = yes'
else:
    print 'x is', x, 'x = no'

y = abs(0.4 - 0.45)

if y &lt;= 0.05:
    print 'y is', y, 'y = yes'
else:
    print 'y is', y, 'y = no'
</code></pre>
<p>The returns a very weird output.</p>
<pre><code>x is 0.05 x = no
y is 0.05 y = yes
</code></pre>
<p>Where y is seen as 0.05 but x is not seen as 0.05, however both values are equal to 0.05 according to python.
Am I doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = abs(0.5 - 0.55)
&gt;&gt;&gt; x
0.050000000000000044
&gt;&gt;&gt; y = abs(0.4 - 0.45)
&gt;&gt;&gt; y
0.04999999999999999
</code></pre>
<p>This is just how floats behave. <a href="https://stackoverflow.com/a/588029/9348376">Most programming languages are like this.</a> Usually when comparing floats, its safer to check whether within an allowed error of your value, instead of checking for equality:</p>
<pre><code>&gt;&gt;&gt; x = abs(0.5 - 0.55)
&gt;&gt;&gt; allowed_error = 0.000001
&gt;&gt;&gt; abs(x - 0.05) &lt;= allowed_error
True
</code></pre>
<p>Python3.5 adds the relevant <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow noreferrer"><code>math.isclose</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>By default it's generating long floating value</p>
<p><strong>Try this:-</strong></p>
<pre><code>x = round(abs(0.5 - 0.55),2)
y = round(abs(0.4 - 0.45),2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use Decimal in this manner:</p>
<pre><code>from decimal import Decimal
x1 = abs(0.5 - 0.55)
x2 = Decimal(abs(0.5 - 0.55)).quantize(Decimal(10) ** -2)

print (x1)
print (x2)
</code></pre>
<p>Output:</p>
<pre><code>0.050000000000000044
Decimal('0.05')
</code></pre>
<p>Then your tests will work fine.</p>
</div>
<span class="comment-copy">check your conditions before you use them  0.5 - 0.55 Out[1]: -0.050000000000000044</span>
<span class="comment-copy">I had no idea, thanks for the explanation!</span>
<span class="comment-copy">This works thanks! But still why does the code I wrote work with 0.4 - 0.45, but not with 0.5 - 0.55? Shouldn't they both have a long floating value</span>
<span class="comment-copy">@Hans it worked both r printing true i hope you r familiar with round right...that simple make it round that's it...and hope both output u r getting true right...</span>
<span class="comment-copy">@Hans 0.4 - 0.45 = 0.04999999.... which is approximated to 0.05 by Python. Hence you got it worked.</span>
