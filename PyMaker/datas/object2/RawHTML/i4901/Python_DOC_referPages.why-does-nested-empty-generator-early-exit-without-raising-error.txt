<div class="post-text" itemprop="text">
<p>I am facing a strange behavior with nested <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generators</a>.</p>
<pre><code>def empty_generator():
    for i in []:
        yield

def gen():
    next(empty_generator())
    print("This is not printed, why?")
    yield

list(gen())  # No Error

next(empty_generator())  # Error
</code></pre>
<p>I would expect the <code>gen()</code> function to raises an error, as I am calling <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> around an empty generator. But this is not the case, the functions is leaving from nowhere, without raising or printing anything.</p>
<p>That seems to violate the principle of least astonishment, isn't it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Technically, you don't have an error; you have an uncaught <code>StopIteration</code> exception, which is used for flow control. The call to <code>list</code>, which takes an arbitrary iterable as its argument, catches the exception raised by <code>gen</code> for you.</p>
<p><code>for</code> loops work similarly; every iterator raises <code>StopIteration</code> at the end, but the <code>for</code> loop catches it and ends in response.</p>
<p>Put another way, the consumer of an iterable is responsible for catching <code>StopIteration</code>. When <code>gen</code> calls <code>next</code>, it lets the exception bubble up. The call to <code>list</code> catches it, but you don't when you call <code>next</code> explicitly.</p>
<hr/>
<p>Note that <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">PEP-479</a> changes this behavior. Python 3.5 provides the new semantics via <code>__future__</code>, Python 3.6 makes provides a deprecation warning, and Python 3.7 (due out Summer 2018) completes the transition. I refer the reader to the PEP itself for further details.</p>
</div>
<div class="post-text" itemprop="text">
<p>Once an iterator reaches its end, it raises <code>StopIteration</code> which... stops the iteration, so <code>list(gen())</code> constructs an empty list.</p>
</div>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">This behavior is about to change.</a></span>
<span class="comment-copy">Replace <code>list(gen())</code> with <code>for x in gen(): pass</code>, still no error.</span>
<span class="comment-copy">What a coincidence! I was submitting the bit about <code>for</code> loops just as your comment appeared :)</span>
<span class="comment-copy"><code>StopIteration</code> as control flow of generators, that was the key to understand the behavior, thanks. Waiting for PEP479 impatiently. :)</span>
<span class="comment-copy">You can use it today (with in 3.5 or later, anyway) with <code>from __future__ import generator_stop</code>.</span>
