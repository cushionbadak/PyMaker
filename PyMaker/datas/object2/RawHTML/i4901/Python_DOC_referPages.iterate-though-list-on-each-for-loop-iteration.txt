<div class="post-text" itemprop="text">
<p>I'm working on the following code:</p>
<pre><code>mylist = [1,2,3,4,5,6,7,8,9,10.....]
for x in range(0, len(mylist), 3):
    value = mylist[x:x + 3]
    print(value)
</code></pre>
<p>Basically, I'm taking 3 items in <code>mylist</code> at a time, the code is bigger than that, but I'm doing a lot of things with them returning a value from it, then it takes the next 3 items from <code>mylist</code> and keep doing it till the end of this list.</p>
<p>But now I have a problem, I need to identify each iteration, but they follow a rule:</p>
<p>The first loop are from A, the second are from B and the third are from C.
When it reaches the third, it starts over with A, so what I'm trying to do is something like this:</p>
<p><code>mylist[0:3]</code> are from A</p>
<p><code>mylist[3:6]</code> are from B</p>
<p><code>mylist[6:9]</code> are from C</p>
<p><code>mylist[9:12]</code>are from A</p>
<p><code>mylist[12:15]</code> are from B......</p>
<p>The initial idea was to implement a identifier the goes from A to C, and each iteration it jumps to the next identifier, but when it reaches C, it backs to A.</p>
<p>So the output seems like this:</p>
<pre><code>[1,2,3] from A
[4,5,6] from B
[6,7,8] from C
[9,10,11] from A
[12,13,14] from B
[15,16,17] from C
[18,19,20] from A.....
</code></pre>
<p>My bad solution:
Create <code>identifiers = [A,B,C]</code> multiply it by the len of <code>mylist</code> -&gt; <code>identifiers = [A,B,C]*len(mylist)</code>
So the amount of A's, B's and C's are the same of <code>mylist</code> numbers that it needs to identify. Then inside my for loop I add a counter that adds +1 to itself and access the index of my list.</p>
<pre><code>mylist = [1,2,3,4,5,6,7,8,9,10.....]
identifier = ['A','B','C']*len(mylist)
counter = -1
for x in range(0, len(mylist), 3):

    value = mylist[x:x + 3]
    counter += 1
    print(value, identifier[counter])
</code></pre>
<p>But its too ugly and not fast at all. Does anyone know a faster way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Cycle, zip, and unpack:</p>
<pre><code>mylist = [1,2,3,4,5,6,7,8,9,10]

for value, iden in zip(mylist, itertools.cycle('A', 'B', 'C')):
    print(value, iden)
</code></pre>
<p>Output:</p>
<pre><code>1 A
2 B
3 C
4 A
5 B
6 C
7 A
8 B
9 C
10 A
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always use a generator to iterate over your identifiers:</p>
<pre><code>def infinite_generator(seq):
    while True:
        for item in seq:
            yield item
</code></pre>
<p>Initialise the identifiers:</p>
<pre><code>identifier = infinite_generator(['A', 'B', 'C'])
</code></pre>
<p>Then in your loop:</p>
<pre><code>print(value, next(identifier))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://stackoverflow.com/a/49134627/3941704">Ignacio's answer</a> fitted for your problem.<br/>
You can first <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html" rel="nofollow noreferrer">reshape</a> your <code>list</code> into a <code>list of arrays</code> containing 3 elements:</p>
<pre><code>import pandas as pd
import numpy as np
import itertools

mylist = [1,2,3,4,5,6,7,8,9,10]
_reshaped = np.reshape(mylist[:len(mylist)-len(mylist)%3],(-1,3))

print(_reshaped)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
</code></pre>
<p>Note that it works since your list contains multiple of 3 elements (so you need to drop the last elements in order to respect this condition, <code>mylist[:len(mylist)-len(mylist)%3]</code>) - <a href="https://stackoverflow.com/a/509295/3941704">Understanding slice notation</a><br/>
See <strong>UPDATE</strong> section for a reshape that fits to your question.</p>
<p>Then apply Ignacio's solution on the reshaped list</p>
<pre><code>for value, iden in zip(_reshaped, itertools.cycle(('A', 'B', 'C'))):
    print(value, iden)

[1 2 3] A
[4 5 6] B
[7 8 9] C
</code></pre>
<hr/>
<p><strong>UPDATE</strong><br/>
You can use <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks/312464#312464">@NedBatchelder's chunk generator</a> to reshape you array as expected:</p>
<pre><code>def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

mylist = [1,2,3,4,5,6,7,8,9,10]

_reshaped = list(chunks(mylist, 3))
print(_reshaped)
    [[1 2 3]
     [4 5 6]
     [7 8 9]
     [10]]
</code></pre>
<p>Then:</p>
<pre><code>for value, iden in zip(_reshaped, itertools.cycle(('A', 'B', 'C'))):
    print(value, iden)

[1 2 3] A
[4 5 6] B
[7 8 9] C
[10] A
</code></pre>
<hr/>
<p><strong>Performances</strong> </p>
<p><em>Your solution</em> : 1.32 ms ± 94.3 µs per loop<br/>
<em>With a reshaped list</em> : 1.32 ms ± 84.6 µs per loop</p>
<p>You notice that there is no sensitive difference in terms of performances for an equivalent result.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a Generator for the slices:</p>
<pre><code>grouped_items = zip(*[seq[i::3] for i in range(3)])
</code></pre>
</div>
<span class="comment-copy">What are A, B and C ? 3 lists ? I don't really get what you're code is supposed to do.</span>
<span class="comment-copy">Its just a string that i need to return bounded to the value</span>
<span class="comment-copy">Maybe it needs to do some reshape of my list before in order to get n rows and 3 columns (to exactly fit the expected result)? what do you think?</span>
<span class="comment-copy">Which is bascially the same as <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>.</span>
<span class="comment-copy">Yes, it just shows I don't use <code>itertools</code> enough.</span>
<span class="comment-copy">Thanks for the timing results, i was not expecting a big amount of difference, but as my main goal here is performance, because the final objective has been reached anyway, every improvement would be welcome</span>
<span class="comment-copy">I'm using the generator from itertools with next(generator) function, it proved to be faster then what i was doing, i'm going to try your solution and see what is faster</span>
<span class="comment-copy">Ok, don't hesitate to share performances issues.</span>
