<div class="post-text" itemprop="text">
<p>I have a problem with some of my python code. I want it to open a file, with few lines of text, and add header + footer to each line in that file.
The problem is that 'create_output()' function returns only the first line with additional content. If I switch 'return' to 'print' at the end of this function it properly displays all lines from my file. What could be the reason? I want to understand what am I doing wrong here.</p>
<pre><code>file_path = '/home/user/Desktop/text.txt'
file_path_edited = '/home/user/Desktop/text_new.txt'
header = 'http://'
footer = '.com'


def open_file():
    opened_file = open(file_path)
    return opened_file


def edit_file():
    edited_file = open(file_path_edited, 'w')
    return edited_file


def create_output():
    for line in open_file():
        line = line.strip()
        edited_line = header+line+footer
        to_file = edit_file()
        to_file.writelines(edited_line)
        to_file.close()
        return edited_line

print (create_output())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OK, I changed it to something like this, now it works fine.
Thanks your feedback, now I know what I'm doing wrong.</p>
<pre><code>file_path = '/home/user/Desktop/text.txt'
file_path_edited = '/home/user/Desktop/text_new.txt'
header = 'http://'
footer = '.com'



def CreateContent():
    with open(file_path) as read_file:
        with open(file_path_edited, 'w') as write_file:
            for line in read_file.readlines():
                new_line = "{}{}{}".format(header, line.strip(), footer)
                print(new_line)
                write_file.write("{}\n".format(new_line))


CreateContent()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get only one line, because you reopen the write-file all the time instead of letting it open, <code>"w"</code> will truncate the file on open - so last line lives, rest is useless IO. Also you never close your reader afaics.</p>
<blockquote>
<p><code>open(filename, mode)</code> from <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files</a>:<br/>
  mode can be <code>'r'</code> when the file will only be read, <code>'w'</code> for only writing (an existing file with the same name will be erased), and <code>'a'</code> opens the file for appending; any data written to the file is automatically added to the end. <code>'r+'</code> opens the file for both reading and writing. The mode argument is optional; <code>'r'</code> will be assumed if itâ€™s omitted.</p>
</blockquote>
<p>Do not split the file open into extra functions, use <code>with open(...) as bla: bla.write(...)</code> so they get closed as soon as you leave the block or some exception happens.</p>
<p>Use string-formatting - either <code>'this {} ist repleaced with'.format("something")</code> or the inline variant - see below.</p>
<pre><code>def create_output():
    modLines = []
    with open('/home/user/Desktop/text.txt',"r") as reader, \
         open('/home/user/Desktop/text_new.txt',"w") as writer: 
        for line in reader:
            line = line.strip().rstrip('\n') # rstrip might be better if you only cut \n
            modline = f'http://{line}.com'   # 3.6 inline string formatting, for 2.7 use 
            modLines.append(modline)         # 'http://{}.com'.format(line)

            writer.write(modline+"\n")       # write does not autoappend \n
    return modlines                          # return a list of written https...


print (create_output())
</code></pre>
<p>Should do the trick.</p>
<p>Links:</p>
<ul>
<li><a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">Format string syntax</a></li>
<li><a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Reading and writing files</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could further improve your code as follows:</p>
<pre><code>file_path = '/home/user/Desktop/text.txt'
file_path_edited = '/home/user/Desktop/text_new.txt'

header = 'http://'
footer = '.com'

def CreateContent():
    with open(file_path) as read_file, open(file_path_edited, 'w') as write_file:
        for line in read_file:
            write_file.write("{}{}{}\n".format(header, line.strip(), footer))

CreateContent()
</code></pre>
</div>
<span class="comment-copy">where is the 'create_content()' function?</span>
<span class="comment-copy">Sorry, create_output() Eddited</span>
<span class="comment-copy">Why do you have <code>return edited_line</code> in your <code>create_output()</code> loop?</span>
<span class="comment-copy">Because the edited_line is the output? What should I return in ur opinion?</span>
<span class="comment-copy">If you have <a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer"><code>return</code></a> in the loop it will exit the function after the first iteration...</span>
<span class="comment-copy">Thx a lot! I rewrite it and now it works fine. Well, more a lot more coding for me.</span>
<span class="comment-copy">@OhDear Great. Read here: <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
