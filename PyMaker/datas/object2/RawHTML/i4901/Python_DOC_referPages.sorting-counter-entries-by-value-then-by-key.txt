<div class="post-text" itemprop="text">
<p>I was trying to sort few values in list using Python's Counter from collection module. But it gives weird result when </p>
<pre><code>&gt;&gt;&gt; diff=["aaa","aa","a"]
&gt;&gt;&gt; c=Counter(diff)
&gt;&gt;&gt; sorted(c.items(), key = lambda x:x[1] , reverse=True)
[('aa', 1), ('a', 1), ('aaa', 1)]
&gt;&gt;&gt; c.items()
[('aa', 1), ('a', 1), ('aaa', 1)]
</code></pre>
<p>Output is strange, as it seems to have shuffle 'aa' to the first place, then 'a' and 'aaa' at last. 
Ideally, it should have been 'a' then 'aa' then 'aaa'</p>
<p>What is the reason behind this and how would you rectify the same</p>
<p>Edit:
Most people understand the question incorrectly, Hence I am pushing some clarifications. The goal is to sort the number of words in list based on it's occurances. </p>
<p>Let's say list <code>diff = ["this", "this", "world", "cool", "is", "cool", "cool"]</code>. The final output by my above code would be <code>cool</code> then <code>this</code> then <code>is</code> then <code>world</code> which is correct.</p>
<p>but problem is when you supply same characters with same occurences, python misbehaves. As the Input is <code>diff = ["aaa", "aa", "a"]</code> , I expected output to be <code>a</code> then <code>aa</code> then <code>aaa</code> . But python algorithm would never know as every word occurred single time.</p>
<p>But if that is the case, then why did python didn't printed <code>aaa</code> then <code>aa</code> then <code>a</code> (i.e in same order it was inputted) giving benefit of doubt. Python sort did actually <em>swapped</em> . WHY?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> is a subclass of <code>dict</code>. It is an unordered collection.</p>
<p>The get the sorting order you want, you can update your code like -</p>
<pre><code>sorted(c.items(), key = lambda x:(x[1], -len(x[0])) , reverse=True)
</code></pre>
<p>This gives -</p>
<pre><code>[('a', 1), ('aa', 1), ('aaa', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sorted</code> does a <a href="https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts" rel="nofollow noreferrer">stable sort</a>. That means for ties, the order of items will be the same as the order they appear in the original input. Since your <code>Counter</code> is unordered, the input to <code>sorted</code> is in some undefined order. If you want you can sort by the key, and then the value:</p>
<pre><code>sorted(sorted(c.items(), key=lambda x:x[0], reverse=True), key = lambda x:x[1] , reverse=True)
</code></pre>
<p>Or (probably better) have your sort function return a tuple as the sort key:</p>
<pre><code>sorted(c.items(), key=lambda x:(x[1], x[0]), reverse=True)
</code></pre>
<p>An (even better!) version utilizing <code>operator.itemgetter</code>:</p>
<pre><code>sorted(c.items(), key=itemgetter(1,0), reverse=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way you can ensure your ordering remains unchanged.</p>
<p>As previously mentioned dictionaries are not deemed to be ordered. The result will be a sorted list of tuples.</p>
<pre><code>from collections import Counter

diff = ["aaa", "aa", "a"]

c = Counter(diff)

sorted(c.items(), key=lambda x: diff.index(x[0]))

# [('aaa', 1), ('aa', 1), ('a', 1)]
</code></pre>
</div>
<span class="comment-copy">Counter does not sort.  It counts.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1867861/python-dictionary-how-to-keep-keys-values-in-same-order-as-declared">Python dictionary, how to keep keys/values in same order as declared?</a></span>
<span class="comment-copy">why not just sort the original list...? <code>diff.sort()</code></span>
<span class="comment-copy">@avigil - I am sorting based on the highest repeat of the word. :)</span>
<span class="comment-copy">You <i>told</i> <code>sorted()</code> to consider ONLY the second element of each tuple.  The items were already sorted by that criterion (1 &gt;= 1 &gt;= 1), so no change was made to the (arbitrary) order in which the dictionary provided the items.</span>
<span class="comment-copy">But I am applying <code>sorted</code> function thereafter on the counted values based on the <code>x[1]</code> which is the amount of count a word is repeated. So that shouldn't be the issue</span>
<span class="comment-copy">Even better would be to use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">operator.itemgetter</a>: <code>key=itemgetter(1, 0)</code>.</span>
<span class="comment-copy">yes! I always forget about that little gem</span>
<span class="comment-copy">OP: "The goal is to sort the number of words in list based on it's occurances ".</span>
<span class="comment-copy">@ekhumoro, User achieved his goal in his OP, so this does not seem to be so.</span>
