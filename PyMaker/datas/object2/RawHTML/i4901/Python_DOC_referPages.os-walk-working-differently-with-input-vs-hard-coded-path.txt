<div class="post-text" itemprop="text">
<pre><code>import os

path = input()
for root, dirs, files in os.walk(path, topdown=True):
    print (files)
</code></pre>
<p>works if I give as input -&gt; c:\data</p>
<p>but not if:</p>
<pre><code>import os

# hard-coded will only work if I use / instead of \
for root, dirs, files in os.walk('c:\data', topdown=True):
    print (files)
</code></pre>
<p>Can someone explain me the reason for this behaviour? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because in literal strings, <code>\</code> is an escape character - allow putting quotes/tabs/newlines etc. in literal strings. </p>
<p>You should use <code>'c:\\data'</code> or <code>'c:/data'</code> (forward slash works fine in windows)</p>
<p>Another way is to use "raw" strings <code>r'c:\data'</code> but be careful, because you can't use any escaped characters anymore</p>
</div>
<span class="comment-copy">change <code>'c:\data'</code> to <code>r'c:\data'</code>, then give a try, it should work fine. <a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">Python literal</a></span>
<span class="comment-copy">Curiously, "\d" isn't a valid escape sequence, so python should still be treating it as the 2 characters. Did your real case start with a different letter?</span>
<span class="comment-copy">@JohnLaRooy it was actually c:\ton\data</span>
<span class="comment-copy">@SJPRO, right, so \t is interpreted as a tab character. If anyone is interested, see <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">@JohnLaRooy Yeah, now I get it, thank you very much for your help!</span>
<span class="comment-copy">That shouldn't matter here. <code>\d</code> isn't a recognized escape character, so Python "helpfully" pretends it's not an escape (I put sarcasm quotes around "helpfully", because when <code>'c:\data'</code> works, it gives the mistaken impression that raw strings aren't needed, leading to confusion when <code>'c:\bin'</code> fails, because <code>\b</code> becomes the ASCII backspace character). If I enter <code>'c:\data'</code> in the interactive interpreter, it echoes <code>'c:\\data'</code> as expected.</span>
<span class="comment-copy">@ShadowRanger, yes I have been caught by the same helpful feature in the past. OP clarified that it was actually a \t combo</span>
