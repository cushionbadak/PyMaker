<div class="post-text" itemprop="text">
<p>What is the bests way in python to parse this results? I have tried regex but can't get it to work.  I am looking for a dictionary of title, author etc as keys.</p>
<pre class="lang-html prettyprint-override"><code>@article{perry2000epidemiological,
  title={An epidemiological study to establish the prevalence of urinary symptoms and felt need in the community: the Leicestershire MRC Incontinence Study},
  author={Perry, Sarah and Shaw, Christine and Assassa, Philip and Dallosso, Helen and Williams, Kate and Brittain, Katherine R and Mensah, Fiona and Smith, Nigel and Clarke, Michael and Jagger, Carol and others},
  journal={Journal of public health},
  volume={22},
  number={3},
  pages={427--434},
  year={2000},
  publisher={Oxford University Press}
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might be looking for a <a href="http://www.bibtex.org/" rel="nofollow noreferrer">BibTeX</a>-parser: <a href="https://bibtexparser.readthedocs.io/en/master/" rel="nofollow noreferrer">https://bibtexparser.readthedocs.io/en/master/</a></p>
<p>Source: <a href="https://bibtexparser.readthedocs.io/en/master/tutorial.html#step-0-vocabulary" rel="nofollow noreferrer">https://bibtexparser.readthedocs.io/en/master/tutorial.html#step-0-vocabulary</a></p>
<p>Input/Create bibtex file:</p>
<blockquote>
<pre><code>bibtex = """@ARTICLE{Cesar2013,
  author = {Jean César},
  title = {An amazing title},
  year = {2013},
  month = jan,
  volume = {12},
  pages = {12--23},
  journal = {Nice Journal},
  abstract = {This is an abstract. This line should be long enough to test
     multilines...},
  comments = {A comment},
  keywords = {keyword1, keyword2}
}
"""

with open('bibtex.bib', 'w') as bibfile:
    bibfile.write(bibtex)
</code></pre>
</blockquote>
<p>Parse it:</p>
<blockquote>
<pre><code>import bibtexparser

with open('bibtex.bib') as bibtex_file:
    bib_database = bibtexparser.load(bibtex_file)

print(bib_database.entries)
</code></pre>
</blockquote>
<p>Output:</p>
<blockquote>
<pre><code>[{'journal': 'Nice Journal',
  'comments': 'A comment',
  'pages': '12--23',
  'month': 'jan',
  'abstract': 'This is an abstract. This line should be long enough to test\nmultilines...',
  'title': 'An amazing title',
  'year': '2013',
  'volume': '12',
  'ID': 'Cesar2013',
  'author': 'Jean César',
  'keyword': 'keyword1, keyword2',
  'ENTRYTYPE': 'article'}]
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This looks like a citation format.  You could parse it like this:</p>
<pre><code>&gt;&gt;&gt; import re

&gt;&gt;&gt; kv = re.compile(r'\b(?P&lt;key&gt;\w+)={(?P&lt;value&gt;[^}]+)}')

&gt;&gt;&gt; citation = """
... @article{perry2000epidemiological,
...   title={An epidemiological study to establish the prevalence of urinary symptoms and felt need in the community: the Leicestershire MRC Incontinence
...  Study},
...   author={Perry, Sarah and Shaw, Christine and Assassa, Philip and Dallosso, Helen and Williams, Kate and Brittain, Katherine R and Mensah, Fiona and
...  Smith, Nigel and Clarke, Michael and Jagger, Carol and others},
...   journal={Journal of public health},
...   volume={22},
...   number={3},
...   pages={427--434},
...   year={2000},
...   publisher={Oxford University Press}
... }
... """

&gt;&gt;&gt; dict(kv.findall(citation))
{'author': 'Perry, Sarah and Shaw, Christine and Assassa, Philip and Dallosso, Helen and Williams, Kate and Brittain, Katherine R and Mensah, Fiona and Smith, Nigel and Clarke, Michael and Jagger, Carol and others',
 'journal': 'Journal of public health',
 'number': '3',
 'pages': '427--434',
 'publisher': 'Oxford University Press',
 'title': 'An epidemiological study to establish the prevalence of urinary symptoms and felt need in the community: the Leicestershire MRC Incontinence Study',
 'volume': '22',
 'year': '2000'}
</code></pre>
<p>The regex uses two named capturing groups (mainly just to visually denote what's what). </p>
<ul>
<li>"key" is any 1+ unicode word character, with a word boundary on the left and literal equals sign to its right;</li>
<li>"value" is something inside two curly brackets.  You can use <code>[^}]</code> conveniently as long as you don't expect to have "nested" curly brackets.  In other words, the values are just one or more of any characters that aren't curly brackets, inside of curly brackets.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex:</p>
<pre><code>import re

s = """
  @article{perry2000epidemiological,
  title={An epidemiological study to establish the prevalence of urinary symptoms and felt need in the community: the Leicestershire MRC Incontinence Study},
  author={Perry, Sarah and Shaw, Christine and Assassa, Philip and Dallosso, Helen and Williams, Kate and Brittain, Katherine R and Mensah, Fiona and Smith, Nigel and Clarke, Michael and Jagger, Carol and others},
  journal={Journal of public health},
  volume={22},
  number={3},
  pages={427--434},
  year={2000},
  publisher={Oxford University Press}
}
"""
results = re.findall('(?&lt;=@article\{)[a-zA-Z0-9]+|(?&lt;=\=\{)[a-zA-Z0-9:\s,]+|[a-zA-Z]+(?=\=)|@[a-zA-Z0-9]+', s)
final_results = {results[i][1:] if results[i].startswith('@') else results[i]:int(results[i+1]) if results[i+1].isdigit() else results[i+1] for i in range(0, len(results), 2)}
</code></pre>
<p>Output:</p>
<pre><code>{'publisher': 'Oxford University Press', 'author': 'Perry, Sarah and Shaw, Christine and Assassa, Philip and Dallosso, Helen and Williams, Kate and Brittain, Katherine R and Mensah, Fiona and Smith, Nigel and Clarke, Michael and Jagger, Carol and others', 'journal': 'Journal of public health', 'title': 'An epidemiological study to establish the prevalence of urinary symptoms and felt need in the community: the Leicestershire MRC Incontinence Study', 'number': 3, 'volume': 22, 'year': 2000, 'article': 'perry2000epidemiological', 'pages': 427}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might be looking for <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a>:</p>
<pre><code>import re
article_dict = {}
with open('inp.txt') as f:
    for line in f.readlines()[1:-1]:
        info = re.split(r'=',line.strip())
        article_dict[info[0]] = info[1]
</code></pre>
<p>I'm assuming you will need to get rid of the braces and commas at the end, which is just a simple task of replacing or slicing.</p>
<pre><code>{'title': '{An epidemiological study to establish the prevalence of urinary symptoms and felt need in the community: the Leicestershire MRC Incontinence Study},',
 'author': '{Perry, Sarah and Shaw, Christine and Assassa, Philip and Dallosso, Helen and Williams, Kate and Brittain, Katherine R and Mensah, Fiona and Smith, Nigel and Clarke, Michael and Jagger, Carol and others},', 
 'journal': '{Journal of public health},', 
 'volume': '{22},', 
 'number': '{3},', 
 'pages': '{427--434},', 
 'year': '{2000},', 
 'publisher': '{Oxford University Press}'}
</code></pre>
</div>
<span class="comment-copy">Where does this output comes from ?</span>
<span class="comment-copy">Why can't you just regex for the terms: 'title=', 'author=', etc and then strip away the {} or regex directly for title={xxxx}. This should work. Can you post your regex attempt?</span>
<span class="comment-copy">That's bibtex / latex / format to add to your latex as citation sources. Theres a python module for it - see answer.</span>
