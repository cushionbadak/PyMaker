<div class="post-text" itemprop="text">
<p>I have some code I'd like to quickly test.  This code includes a line that needs to query a server and obtain a True/False answer:</p>
<pre><code>result = server.queryServer(data)
</code></pre>
<p>Is there a way to override this function call so that it just calls a local function that always returns True (so that I can debug without running the server)?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow noreferrer">Mock</a> is your friend. It allows you to mock entire classes or functions of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want is called <em>mocking</em>, replacing existing objects with temporary objects that act differently just for a test.</p>
<p>Use the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code> library</a> to do this. It will create the temporary objects for you, and give you the tools to replace the object, and restore the old situation, for the duration of a test.</p>
<p>The module provides <a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers" rel="nofollow noreferrer"><em>patchers</em></a> to do the replacement. For example, you could use a context manager:</p>
<pre><code>from unittest import mock

with mock.patch('server.queryServer') as mocked_queryServer:
    mocked_queryServer.return_value = True  # always return True when called
    # test your code
    # ...

    # afterwards, check if the mock has been called at least once.
    mocked_queryServer.assert_called()
</code></pre>
<p>I added an assertion at the end there; mock objects not only let you replace functions transparently, they then also record what happens to them, letting you check if your code worked correctly by calling the mock.</p>
</div>
<span class="comment-copy"><code>result = True or server.queryServer(data)</code> will always return True, without calling a function</span>
<span class="comment-copy">@Vinny: but that's not what the OP is anking for. They are isolating their code from dependencies to see if it'll react correctly when the <i>external</i> <code>server.queryServer()</code> call behaves in a certain way. They are not trying to break their code here.</span>
