<div class="post-text" itemprop="text">
<p>I've got two dictionaries of unequal length, e.g.:</p>
<pre><code>people = {"john" : "carpenter", "jill": "locksmith", "bob":"carpenter", "jane": "pilot", "dan": "locksmith"}

jobcode = {"carpenter": 1, "locksmith": 2, "pilot": 3}
</code></pre>
<p>What I'm wanting to do is replace the values in <code>people</code> with the <code>jobcode</code> value.
So youd end up with:
n</p>
<pre><code>people = {"john": 1, "jill": 2, "bob": 1, "jane": 3, "dan":2} 
</code></pre>
<p>I'd be happy to make another new <code>dict</code> that encapsulates this new data as well but so far the closest I think I've come is <a href="https://stackoverflow.com/questions/35538665/replace-values-in-python-dict">this</a>... I think...</p>
<p>Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily achieve this with dict comprehension</p>
<pre><code>{k: jobcode[v] for k, v in people.items()}
</code></pre>
<p>However you should be careful since it can raise <code>KeyError</code>.</p>
<p>Another way with default <code>jobcode</code> with <code>dict</code> <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>.get()</code> method</a>:</p>
<pre><code>default_jobcode = 1000
final_dict = {k: jobcode.get(v, default_jobcode) for k, v in people.items()}
</code></pre>
<p><strong>UPDATE</strong></p>
<p>As <a href="https://stackoverflow.com/users/4042267/graipher">@Graipher</a> kindly noted, if <code>jobcode</code> dict is lack of key-value pair, you can leave item untouched as such:</p>
<pre><code>final_dict = {k: jobcode.get(v, v) for k, v in people.items()}
</code></pre>
<p>Which is probably better solution that having default <code>jobcode</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Ty this:-</strong></p>
<pre><code>people = {'john' : 'carpenter', 'jill': 'locksmith', 'bob':'carpenter', 'jane': 'pilot', 'dan': 'locksmith'}
jobcode = {'carpenter': 1, 'locksmith': 2, 'pilot': 3}
for i,j in people.items():
    if j in jobcode.keys():
        people[i] = jobcode[j]
print(people)
</code></pre>
</div>
<span class="comment-copy">You could also leave keys that are not in <code>jobcode</code> untouched with <code>jobcode.get(v, v)</code>.</span>
<span class="comment-copy">@Graipher it could be the case, however it would broke <code>str: int</code> dict convention(if such exist). But Thank you, i updated my answer!</span>
<span class="comment-copy">True. On the other hand it allows multiple passes with jobcodes from multiple sources, if needed. It's good to know about both methods, one might need either in different situations.</span>
<span class="comment-copy">Thank you so much! Thats exactly what was happening. Because I wasnt using .get(v, v) I was getting a key error! All the code seemed to make sense to me! I hope this is helpful to someone else in the same situation!</span>
