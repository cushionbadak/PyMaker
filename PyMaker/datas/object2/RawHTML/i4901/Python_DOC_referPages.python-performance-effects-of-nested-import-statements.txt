<div class="post-text" itemprop="text">
<p>I have a program spread across 2 files using the twitter api. One file is dedicated to sending and reading tweets, so I have put the 'import twitter' line in that file. The second file has an import statement to import this twitter-based file and will call the "read" and "post" functions from that file. </p>
<p>This is the gist of the code:</p>
<p>File 1:</p>
<pre><code>import file2
file2.post(some text)
</code></pre>
<p>File 2:</p>
<pre><code>import twitter
api = twitter.Api(...)
def post(text):    
    api.PostUpdate()
</code></pre>
<p>This works fine and acts exactly as I expect it to, but I'm not sure if this is the most efficient way, performance wise, of running this. Will the 'import twitter' line be run every time file 2 is called and fill up memory and time with duplicate imports? And if so, would I be better with this:</p>
<p>File 1:</p>
<pre><code>import twitter
import file2
api = twitter.Api(...)
file2.post(some text, api)
</code></pre>
<p>File 2:</p>
<pre><code>def post(text, api):
    api.PostUpdate(text)
</code></pre>
<p>Where the api object is being passed across files.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Import caches all imports, so with multiple imports they will just access the cached version after the first time an import is performed. See <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a> for details of how this works.</p>
<p>Generally speaking you should create your import structure around the concept of modules being correct, performance shouldn't be a large factor in this decision, because honestly when you get the import structure right there won't be that much of a performance difference. If you use something from a module in a file you should explicitly import that module. Related to this make sure that every module you use can be imported directly without error, this will help you design your modules better and avoid a class of subtle bugs where changing the order of importing can cause errors due to the caching mechanism in importlib.</p>
</div>
<span class="comment-copy">Ah that makes sense thanks, so from that I'd say that the first option is more efficient as there isn't as much data being added to the call stack?</span>
<span class="comment-copy">I think that you shouldn't be deciding on your import structure based on "performance" criteria but rather making correctness the main focus. I edited my answer to add more detail about that.</span>
<span class="comment-copy">OK yeah I think I get that, so if this were a very large program with lots of separate files each with their own set of modules they need to import, I might be better to keep all of the importing statements in one central file rather than splitting them up between all of these files. But with a smaller number of files and modules such as this one then importing modules only into the file that needs it is also a 'correct' method?</span>
<span class="comment-copy">@tomh1012 Just import what is needed in a module within that module. You want modules to be as standalone as possible. Definitely do not create one module that imports all the others, that's exactly the wrong way to go about it.</span>
