<div class="post-text" itemprop="text">
<p>I want to do this exercise which I have done well with the following code but I want to do it with the second code but I don't know how to introduce two lists in a Terminal:</p>
<p><strong>Exercise: Create a function that receives two input parameters of type list and that returns a list where the two lists are combined, alternately.</strong></p>
<pre><code>import sys

a = ["x","y","z"]
b = [1,2,3]

def example(a, b):

    array = []

    lena = len(a)
    lenb = len(b)

    if lena &gt; lenb:
        control = lena
    else:
        control = lenb


    for i in range (control):
        if i &lt; lena:
            array.append(a[i])
        if i &lt; lenb:
            array.append(b[i])

    return c

print(example(a, b))
</code></pre>
<p>This is the way I have to do:</p>
<pre><code>import sys

a = sys.argv[1:]
b = list(map(int, sys.argv[1:]))

def example(a, b):

    array = []

    lena = len(a)
    lenb = len(b)

    if lena &gt; lenb:
        control = lena
    else:
        control = lenb


    for i in range (control):
        if i &lt; lena:
            array.append(a[i])
        if i &lt; lenb:
            array.append(b[i])

    return c

print(example(a, b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way is to use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>: </p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--list1', nargs='*', required=True)
parser.add_argument('--list2', nargs='*', required=True)

args = vars(parser.parse_args())
print(args['list1'])
print(args['list2'])
</code></pre>
<p>Usage:</p>
<p><code>python module_name.py --list1 x y z --list2 1 2 3</code></p>
<p><code>['x', 'y', 'z']</code></p>
<p><code>['1', '2', '3']</code></p>
<p><strong>UPDATE</strong></p>
<p>I've noticed your comment for the previous answer. If you want to distinguish between strings and numbers you can do as following:</p>
<pre><code>import sys
import json
lists_str = '[' + ' '.join(sys.argv[1:]).replace('] [', '],[') + ']'
lists = json.loads(lists_str)
print(lists[0])
print(lists[1])
</code></pre>
<p>So now your input should be of form:</p>
<p><code>python module_name.py  [\"a\", \"b\", \"c\"] [1, 2, 3, \"a\"]</code></p>
<p>and you will get:</p>
<p><code>['a', 'b', 'c']</code></p>
<p><code>[1, 2, 3, 'a']</code></p>
<p>Note that now your input lists can be of mixed types.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like that</p>
<pre><code>import sys

a = sys.argv[1].split(",")
b = sys.argv[2].split(",")

a.extend(b)  # Depends on what you understand as "combine"
print(a)
</code></pre>
<p>In your current code you are probably passing each list item as a serperate argument. To pass two lists you need to quote each list like <code>foo.py "1, 2, 3" "a, b, c"</code>.</p>
<p>Outputs: <code>['1', ' 2', ' 3', 'a', ' b', ' c']</code>.</p>
</div>
<span class="comment-copy">read elements as strings (e.g., <code>1,2,3</code>) and use <code>split(',')</code> on them which will produce <code>['1', '2', '3']</code></span>
<span class="comment-copy">Your update is what I'm searching but why do I have to write the slashs  in the input? I want this to be my input: python module_name.py  ["a", "b", "c"] [1, 2, 3]</span>
<span class="comment-copy">Terminal input uses double quotes as boundaries for an argument (everything between is treated as single thing). It is a special character. So if you want to include such special characters in your input string you have to use slashes. More info on this:<a href="https://www.gnu.org/software/bash/manual/bashref.html#Double-Quotes" rel="nofollow noreferrer">gnu.org/software/bash/manual/bashref.html#Double-Quotes</a></span>
<span class="comment-copy">@smxrlxp do you always have that one of your lists contains alphabet characters and the other numbers? If so it’s not a problem. Otherwise, you can’t distinct between ‘5’ and 5 without backslash+quotes.</span>
<span class="comment-copy">In this exercise yes, now I understand, thanks you for the help.</span>
<span class="comment-copy">Well, this way work if I don't use an integer variable "b = list(map(int, sys.argv[1:]))" so this isn't what I'm searching.</span>
<span class="comment-copy">@smxrlxp If you want <code>a</code> or <code>b</code> to be an integer list you can just convert the list.</span>
