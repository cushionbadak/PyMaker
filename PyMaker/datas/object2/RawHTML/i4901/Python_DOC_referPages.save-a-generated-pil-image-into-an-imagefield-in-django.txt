<div class="post-text" itemprop="text">
<p>I am using <a href="https://github.com/lincolnloop/python-qrcode" rel="nofollow noreferrer">qrcode</a> to generate qrcode. When a ticket is bought, or when bought is true, I would like to generate a qrcode image and make some changes using PIL. Finally save the modified canvas into the Image field of the model.</p>
<pre><code>class Ticket(models.Model):
    booked_at = models.DateTimeField(default=timezone.now)
    qrcode_file = models.ImageField(upload_to='qrcode', blank=True, null=True)
    bought = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        if self.bought:
            ...
            ...
            qrcode_img = qrcode.make('some data')
            canvas = Image.new('RGB', (total_width, total_height), 'white')
            draw = ImageDraw.Draw(canvas)
            position = (left, top)
            canvas.paste(qrcode_img, position)

            self.qrcode_file = canvas
            self.booked_at = timezone.now()
            super(Ticket, self).save(*args, **kwargs)
            canvas.close()
            qrcode_img.close()
        else:
            self.booked_at = timezone.now()
            super(Ticket, self).save(*args, **kwargs)
</code></pre>
<p>But this throws an error:</p>
<blockquote>
<p>AttributeError: 'Image' object has no attribute '_committed'</p>
</blockquote>
<p>How can I save a generated PIL image into an ImageField in django?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a BytesIO to save the Pillow file to an in-memory blob. Then create a <code>File</code> object and pass that to your model instance ImageField's <code>save</code> method.</p>
<pre><code>from io import BytesIO
from django.core.files import File

canvas = Image.new('RGB', (total_width, total_height), 'white')
...
blob = BytesIO()
canvas.save(blob, 'JPEG')  
self.qrcode_file.save('ticket-filename.jpg', File(blob), save=False) 
</code></pre>
<p>Check out the django documentation for the <code>File</code> object.
<a href="https://docs.djangoproject.com/en/2.0/ref/files/file/#the-file-object" rel="nofollow noreferrer">https://docs.djangoproject.com/en/2.0/ref/files/file/#the-file-object</a></p>
<p>You have to use <code>save=False</code>, since the default <code>save=True</code> means that the parent model's <code>save</code> method would be called after the image is saved. You don't want recursion here, since you would typically end up in an infinite loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Change your code and use Django <a href="https://docs.djangoproject.com/en/dev/ref/files/file/#the-file-object" rel="nofollow noreferrer">File</a> as below:</p>
<pre><code>from django.core.files import File


class Ticket(models.Model):
    booked_at = models.DateTimeField(default=timezone.now)
    qrcode_file = models.ImageField(upload_to='qrcode', blank=True, null=True)
    bought = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        if self.bought:
            ...
            ...
            qrcode_img = qrcode.make('some data')
            canvas = Image.new('RGB', (total_width, total_height), 'white')
            draw = ImageDraw.Draw(canvas)
            position = (left, top)
            canvas.paste(qrcode_img, position)

            canvas.save('path/of/dest.png', 'PNG')
            destination_file = open('path/of/dest.png', 'rb')
            self.qrcode_file.save('dest.png', File(destination_file), save=False)
            destination_file.close()

            self.booked_at = timezone.now()
            super(Ticket, self).save(*args, **kwargs)
            canvas.close()
            qrcode_img.close()
        else:
            self.booked_at = timezone.now()
            super(Ticket, self).save(*args, **kwargs)
</code></pre>
<p>You can save <code>canvas</code> on the <code>media_root</code> and <code>upload_to</code> path, or in temporary directory or use <code>BytesIO</code> object.</p>
</div>
<span class="comment-copy">Do I need to close the blog object or its not necessary?</span>
<span class="comment-copy">You don't need to close the BytesIO. The memory will be released when the blob is garbage collected.</span>
<span class="comment-copy">Your method maybe raise memory usage problem for large scale of requests.</span>
<span class="comment-copy">If you are creating millions of qr codes concurrently on a single server, that might happen.  If you are worried about that, you can close the blob object as soon as you are done with it, to free up memory immediately. But the blob should get closed and deleted automatically anyway when the save method finishes and there's no longer a reference to it in the current scope.</span>
<span class="comment-copy">This will create a file in the disk? Also I will have to delete the file right?</span>
<span class="comment-copy">You can save file in temporary dir, or use BytesIO</span>
<span class="comment-copy">There's a theoretical possibility that you might get a race condition if you use a hardcoded <code>path/of/dest.png</code>, if two worker processes try to write and read in parallell. Python's standard library provides a <code>tempfile</code> module, that can be used here. The context manager <code>with tempfile.NamedTemporaryFile(suffix='.png') as fp:</code> will create a random filename in your system's <code>tmp</code> folder and delete it after you are done with it. <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Yes, every method have special problems but using disk for saving file maybe better than saving on the memory, related to calling this save method rate.</span>
