<div class="post-text" itemprop="text">
<p>I am reading <em>Hackers and Painters</em> and am confused by a problem mentioned by the author to illustrate the power of different programming languages.</p>
<p>The problem is:</p>
<blockquote>
<p>We want to write a function that generates accumulators—a function that takes a number <em>n</em>, and returns a function that takes another number <em>i</em> and returns <em>n</em> incremented by <em>i</em>. (That’s <em>incremented</em> by, not plus. An accumulator has to accumulate.)</p>
</blockquote>
<p>The author mentions several solutions with different programming languages. For example, Common Lisp:</p>
<pre><code>(defun foo (n)
  (lambda (i) (incf n i)))
</code></pre>
<p>and JavaScript:</p>
<pre><code>function foo(n) { return function (i) { return n += i } }
</code></pre>
<p>However, when it comes to Python, the following codes do not work:</p>
<pre><code>def foo(n):
    s = n
    def bar(i):
        s += i
        return s
    return bar

f = foo(0)
f(1)  # UnboundLocalError: local variable 's' referenced before assignment
</code></pre>
<p>A simple modification will make it work:</p>
<pre><code>def foo(n):
    s = [n]
    def bar(i):
        s[0] += i
        return s[0]
    return bar
</code></pre>
<p>I am new to Python. Why doesn the first solution not work while the second one does? The author mentions lexical variables but I still don't get it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>s += i</code> is just sugar for <code>s = s + i</code>.<sup>*</sup></p>
<p>This means you assign a new value to the variable <code>s</code> (instead of mutating it in place). When you assign to a variable, Python assumes it is local to the function. However, before assigning it needs to evaluate <code>s + i</code>, but <code>s</code> is local and still unassigned -&gt; Error.</p>
<p>In the second case <code>s[0] += i</code> you never assign to <code>s</code> directly, but only ever access an item from <code>s</code>. So Python can clearly see that it is not a local variable and goes looking for it in the outer scope.</p>
<p>Finally, a nicer alternative (in Python 3) is to explicitly tell it that <code>s</code> is not a local variable:</p>
<pre><code>def foo(n):
    s = n
    def bar(i):
        nonlocal s
        s += i
        return s
    return bar
</code></pre>
<p>(There is actually no need for <code>s</code> - you could simply use <code>n</code> instead inside <code>bar</code>.)</p>
<p>*<sub><a href="https://docs.python.org/3/library/operator.html#inplace-operators" rel="nofollow noreferrer">The situation is slightly more complex</a>, but the important issue is that computation and assignment are performed in two separate steps.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>An infinite generator is one implementation. You can call <code>__next__</code> on a generator instance to extract successive results iteratively.</p>
<pre><code>def incrementer(n, i):
    while True:
        n += i
        yield n

g = incrementer(2, 5)

print(g.__next__())  # 7
print(g.__next__())  # 12
print(g.__next__())  # 17
</code></pre>
<p>If you need a flexible incrementer, one possibility is an object-oriented approach:</p>
<pre><code>class Inc(object):
    def __init__(self, n=0):
        self.n = n
    def incrementer(self, i):
        self.n += i
        return self.n

g = Inc(2)

g.incrementer(5)  # 7
g.incrementer(3)  # 10
g.incrementer(7)  # 17
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following will work:</p>
<pre><code>def foo(n):
    s = n
    def bar(i):
        s_ = s + i
        return s_
    return bar
</code></pre>
<p>The inner function <code>bar</code> looks to find <code>s</code> locally inside its scope, and if it fails to find it, it goes to look one level up in the enclosing scope where it finds <code>s</code> which is a local variable of <code>foo</code>. But if you say <code>s = s + 1</code>, you declare <code>s</code> as a new local variable in the scope of the <code>bar</code> ("the assignment statement creates variables in the local scope"), which leads to an error because you haven't assigned a value to <code>s</code> before adding something to it (referencing to it). </p>
<p>On the other example, saying <code>s[0] = s[0] + 1</code> is different because you do not declare a new local variable inside the bar, you access the first element of <code>s</code> which is found in the enclosing scope of bar.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python if we use a variable and pass it to a function then it will be Call by Value whatever changes you make to the variable it will not be reflected to the original variable.</p>
<p>But when you use a list instead of a variable then the changes that you make to the list in the functions are reflected in the original List outside the function so this is called call by reference.</p>
<p>And this is the reason for the second option does work and the first option doesn't.</p>
</div>
<span class="comment-copy">You can read <a href="https://stackoverflow.com/questions/5218895/python-nested-functions-variable-scoping">nested function variable scoping</a>.</span>
<span class="comment-copy">A <code>def</code> introduces a new scope. You cannot re-bind a variable in an outer scope without <code>global</code> or <code>nonlocal</code>.</span>
<span class="comment-copy"><i>s += i is just sugar for s = s + i</i> — note that this is not true for some types. Using += on a list will absolutely mutate it (via <code>__iadd__</code>).</span>
<span class="comment-copy">Thanks, now I understand. I use a redundant <code>s</code> just to make the comparison between the two cases clearer. BTW, thanks for the corrections of my poor grammar. :)</span>
<span class="comment-copy">@Norrius that is correct, but it makes the explanation easier :) The scoping rules also apply for these types, though.</span>
<span class="comment-copy">"you could simply use <code>n</code> instead inside <code>bar</code>" by writing <code>n = n + i</code>? will Python not make a new, local <code>n</code> for it, just the same?</span>
<span class="comment-copy">@WillNess Sure. Function arguments are just like variables, so you would have to declare it as <code>nonlocal</code> inside <code>bar</code>.</span>
<span class="comment-copy">Yes, but it's not flexible since the increase is fixed to 5.</span>
<span class="comment-copy">@ChuyangLiu, see update.</span>
<span class="comment-copy">Thanks, that's correct, though more verbose than the one using closure. :)</span>
<span class="comment-copy">Sometimes, verbose is more pythonic :). But this is more a question of style / preference. I personally think it's cleaner to use classes instead of <code>global</code> / <code>nonlocal</code> statements.</span>
<span class="comment-copy">Yes, now I understand why. However, this solution does not fulfill the accumulator requirements. It just adds two values, instead of <i>accumulate</i> it</span>
