<div class="post-text" itemprop="text">
<p>I would like to implement validation for Python 3.6 type annotation within my project.  </p>
<p>I have a method that uses <code>__annotations__</code> dict to check if all attributes of the class have the correct value. It works perfectly for basic types like <code>int</code>, <code>str</code> or <code>bool</code>, but fails for more sophisticated elements like <code>typing.Union</code> or <code>typing.Optional</code> (which is also a Union).<br/>
The failure is caused by <code>isinstance()</code> method within <code>Union</code> object that throws <code>TypeError</code>. I even cannot find a way to ensure that the annotation is a Union so I cannot validate if a value complies with a type. </p>
<p>The <code>typing</code> module does not have any solution for it. Is there a way to validate if specified variable complies with <code>typing.Union</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. <code>isinstance</code> and <code>issubclass</code> were <a href="https://github.com/python/typing/issues/136" rel="nofollow noreferrer">killed</a> some time ago for cases like <code>Union</code>. </p>
<p>The idea, as also stated <a href="https://github.com/python/typing/issues/136#issuecomment-138174590" rel="nofollow noreferrer">in a comment on the issue by GvR</a> is to implement your own version of <code>issubclass/isinstance</code> that use some of the extra metadata attached to types:</p>
<pre><code>&gt;&gt;&gt; Union[int, str].__args__
(int, str)
&gt;&gt;&gt; Union[int, str].__origin__
typing.Union
</code></pre>
<p><code>__args__</code> and <code>__origin__</code> are available <em>as of Python 3.6.3</em>. They might not in earlier versions since <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">typing</a> is still provisional. </p>
<p>Until the internal interface for introspecting types is fleshed out and typing graduates from provisional status, you should expect breakage due to changes in the API. </p>
</div>
<span class="comment-copy">looks like it does work for python 3.6.0, thank you</span>
