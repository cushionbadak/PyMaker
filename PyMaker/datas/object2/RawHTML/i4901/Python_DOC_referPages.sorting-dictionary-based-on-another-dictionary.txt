<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1252481/sort-dictionary-by-another-dictionary">sort dictionary by another dictionary</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have two Python dictionaries - </p>
<pre><code>dict1 = {'a' : [1, 2, 3], 'b' : [4, 5, 6], 'c' : [7, 8, 9]}
dict2 = {'a' : 30, 'b' : 75, 'c' : 15}
</code></pre>
<p>I want to sort <code>dict1</code> based on the values of <code>dict2</code>.
The final answer should be something like -</p>
<pre><code>[['c', [7, 8, 9]], ['a', [1, 2, 3]], ['b', [4, 5, 6]]]
</code></pre>
<p>What is the most efficient way to solve this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Yeah. Use sorted() and pass a "key" function that knows how to get the value to sort by. Something like:</p>
<pre><code>sorted(dict1.items(), key=lambda kv: dict2[kv[0]])
</code></pre>
<p>Note that I leave it as a list of tuples. If you want an actual dictionary out of this, you'd have to use OrderedDict.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>dict1 = {'a' : [1, 2, 3], 'b' : [4, 5, 6], 'c' : [7, 8, 9]}
dict2 = {'a' : 30, 'b' : 75, 'c' : 15}
new_data = list(map(list, sorted(dict1.items(), key=lambda x:dict2[x[0]])))
</code></pre>
<p>Output:</p>
<pre><code>[['c', [7, 8, 9]], ['a', [1, 2, 3]], ['b', [4, 5, 6]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that your result is no longer a dict, but rather a list of lists, which is better if you want to sort it, since order in dicts isn't guaranteed/implementation detail</p>
<p>I would sort the items according to the value of the key in the other dictionary, and convert the tuples that <code>items</code> yield to 2-elements <code>list</code>:</p>
<pre><code>dict1 = {'a' : [1, 2, 3], 'b' : [4, 5, 6], 'c' : [7, 8, 9]}
dict2 = {'a' : 30, 'b' : 75, 'c' : 15}

print([list(x) for x in sorted(dict1.items(),key = lambda x : dict2[x[0]])])
</code></pre>
<p>result:</p>
<pre><code>[['c', [7, 8, 9]], ['a', [1, 2, 3]], ['b', [4, 5, 6]]]
</code></pre>
</div>
<span class="comment-copy">can you post your code, have you tried anything yet?</span>
<span class="comment-copy">dicts in Python are not ordered. If you want an ordered dict you can use <code>OrderedDict</code> from <code>collections</code>. However, your final answer is actually a list.</span>
<span class="comment-copy">ordinary <code>dict</code>s in Python have no order, so you cannot sort them. You must use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a></span>
<span class="comment-copy">yeah, but OP shows a list of lists, not a dict.</span>
<span class="comment-copy">Added parens to lamba parameter. Note the "something like".</span>
<span class="comment-copy">in that case you can "anonymize" your second parameter as it isn't used: <code>key=lambda (k, _): dict2[k]</code></span>
<span class="comment-copy">@DustinOprea. Please test your code properly. It currently raises a SyntaxError in python3 (which the OP is using).</span>
<span class="comment-copy">@ekhumoro It was just an off-the-cuff suggestion. The approach is valid even if I mistyped stuff while just taking a moment to give him the strategy. Again, I said "something like this". Try it now.</span>
<span class="comment-copy">I'd probably choose a list comprehension instead of <code>list(map(â€¦))</code>, perhaps: <code>[[k, dict1[k]] for k in  sorted(dict1.keys(), key=lambda x:dict2[x])]</code>.</span>
