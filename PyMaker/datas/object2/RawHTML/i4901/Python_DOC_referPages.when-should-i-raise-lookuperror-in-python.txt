<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">Python's built-in exception</a> documentation defines <code>LookupError</code> as:</p>
<blockquote>
<p>The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError. This can be raised directly by codecs.lookup().</p>
</blockquote>
<p>Should this base class be used only when catching try sections that access dictionaries using both indices and keys when one wants to shorthand catching both, or is there another case where you would use it?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all dictionaries only use keys (see: <a href="https://stackoverflow.com/questions/4326658/how-to-index-into-a-dictionary">How to index into a dictionary?</a>). </p>
<p>If you are a lazy person you cold catch both KeyError and IndexError with the LookupError (lest say you have a dictionary filled with lists). Never the less i would prefer to catch them separately with two different exceptions. E.g.:</p>
<pre><code>try:
    # do some stuff here
except KeyError:
    # key error handling
except IndexError:
    # index error handling
</code></pre>
<p>This way you can respond to these exceptions in different ways, as they were caused by different events. Furthermore there might be other exceptions that are a variation of a LookupError (see below) and you do not want to catch these exceptions as well (same reason one does not simply use <code>except:</code>).</p>
<p>Another way to use the LookupError could be if you are in need of your own exception, as your error that this exception represents is nether described by a KeyError, nor an IndexError, but is a type of LookupError. In this case your custom exception could inherit from LookupError.</p>
</div>
<span class="comment-copy">The only other way I can think of is you've defined a class yourself, and have an error you want to raise that doesn't fit under IndexError or KeyError</span>
<span class="comment-copy">You mean an error class that inherits from LookupError, I see, but is this actually done under some circumstances?</span>
<span class="comment-copy">I don't think its good practice to catch a <code>LookupError</code> in code that could potentially raise a <code>KeyError</code> or <code>IndexError</code> (unless you just want to ignore it). If you're sure that nothing other than your code could throw a <code>LookupError</code>, theres nothing <i>wrong</i> with throwing one, there are just usually better options (subclassing your own exception). There is an <a href="https://stackoverflow.com/q/35861482/9348376">example here</a> of NTLK throwing an LookupError when it can't find a file.</span>
<span class="comment-copy">Hmmm... I took a quick look at the nltk/data.py code, looks simply like bad programming to me (probably should have been file not found or some nltk proprietary exception of some sort), thanks</span>
<span class="comment-copy">Have you ever seen this actually used?, Only thing that won't strictly fall under other exceptions is maybe using non hashable keys for accessing or something</span>
