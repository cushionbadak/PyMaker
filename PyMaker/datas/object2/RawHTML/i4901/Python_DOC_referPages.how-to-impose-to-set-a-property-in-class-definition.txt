<div class="post-text" itemprop="text">
<p>I want to create an abstract class such that subclasses will raise an error when instanced if they don't implement an abstract property. An error should be also raised if the attribute is a method rather than a property. My attempt:</p>
<pre><code>from abc import ABC, abstractmethod
class IClass(ABC):
    @property
    @abstractmethod
    def attr(self):
        pass
</code></pre>
<p>Unfortunately, this does nothing to prevent instantiating subclasses with an <code>attr</code> method rather than a property.</p>
<p>The solution should produce the following results:</p>
<pre><code>class C(IClass):
    pass
C()  # Must fail because 'attr' has not been implemented

class C(IClass):
    def attr(self):
        pass
C().attr  # Must fail because attribute 'attr' is a method rather than a property

class C(IClass):
    attr = 'attr'
C().attr  # Must pass because 'attr' is a property
</code></pre>
<p>The manual: <a href="https://docs.python.org/3/library/abc.html#abc.abstractproperty" rel="nofollow noreferrer">docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not as convenient as a decorator, but you can validate that the attribute is a property in <code>__new__</code> like:</p>
<h3>Code:</h3>
<pre><code>from abc import ABC, abstractmethod

class IClass(ABC):
    def __new__(cls, *args, **kwargs):
        new = super().__new__(cls, *args, **kwargs)
        if not isinstance(type(new).attr, property):
            raise TypeError('attr must be a property')
        return new

    @property
    @abstractmethod
    def attr(self):
        pass
</code></pre>
<h3>Test Code:</h3>
<pre><code>class A(IClass):
    pass
try:
    # Must fail because 'attr' has not been implemented
    A()
except Exception as exc:
    print('A Passed: {}'.format(exc))

class B(IClass):
    def attr(self):
        pass
try:
    # Must fail because attribute 'attr' is a method rather than a property
    B()
except Exception as exc:
    print('B Passed: {}'.format(exc))

class C(IClass):
    @property
    def attr(self):
        return 'Good'

# Must pass because 'attr' is a property
print('C Passed: {}'.format(C().attr))
</code></pre>
<h3>Results:</h3>
<pre><code>A Passed: Can't instantiate abstract class A with abstract methods attr
B Passed: attr must be a property
C Passed: Good
</code></pre>
</div>
<span class="comment-copy"><code>attr = 'attr'</code> doesn't create a property.</span>
<span class="comment-copy">Perhaps consider just making a <code>attr.getter</code> that is an abstractmethod.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14671095/abc-abstractmethod-property">abc.abstractmethod + property</a></span>
