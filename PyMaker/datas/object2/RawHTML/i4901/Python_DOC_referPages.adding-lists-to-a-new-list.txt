<div class="post-text" itemprop="text">
<p>I did not get this question right. The function <code>read_words</code> turns a text file with a bunch of names in new lines into a list and it works.</p>
<pre><code>def read_words(words_file):
    """ (file open for reading) -&gt; list of str
    Return a list of all words (with newlines removed) from open file
    words_file.
    Precondition: Each line of the file contains a word in uppercase characters
    from the standard English alphabet.
    """
    words_list = []
    words = words_file.readlines()
    for i in range(len(words)):
        new_word = words[i]
        for char in '\n':
            new_word = new_word.replace(char,'')
            words_list.append(new_word)
    return words_list
</code></pre>
<p>the problem arises when I try to get a list of lists</p>
<pre><code>def read_board(board_file):
    """ (file open for reading) -&gt; list of list of str
    Return a board read from open file board_file. The board file will contain
    one row of the board per line. Newlines are not included in the board.
    """
    board_list = []
    row_list = []
    rows = read_words(board_file)
    for i in range(len(rows)):
        for  char in rows[i]:
            row_list.append(char)
        board_list.append(row_list)
    return board_list
</code></pre>
<p>the goal is to turn a text file of the type:</p>
<pre><code>ABCD
EFGH
</code></pre>
<p>into <code>[['A','B','C','D'],['E','F','G','H']]</code> </p>
<p>I have already tried playing around with the indices for <code>board_list.append(row_list)</code> call without luck. How can I get this to work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do that with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>.strip()</code></a> like:</p>
<h3>Code:</h3>
<pre><code>def read_board(board_file):
    return [list(line.strip()) for line in read_words(board_file)]
</code></pre>
<h3>Test Code:</h3>
<pre><code>def read_words(words_file):
    """ (file open for reading) -&gt; list of str
    Return a list of all words (with newlines removed) from open file
    words_file.
    Precondition: Each line of the file contains a word in uppercase characters
    from the standard English alphabet.
    """
    return [word.strip() for word in words_file.readlines()]

def read_board(board_file):
    """ (file open for reading) -&gt; list of list of str
    Return a board read from open file board_file. The board file will contain
    one row of the board per line. Newlines are not included in the board.
    """
    return [list(line) for line in read_words(board_file)]

with open('file1', 'rU') as f:
    board = read_board(f)

print(board)
</code></pre>
<h3>Results:</h3>
<pre><code>[['A', 'B', 'C', 'D'], ['E', 'F', 'G', 'H']]
</code></pre>
</div>
<span class="comment-copy"><code>[list(line) for line in file]</code>?</span>
<span class="comment-copy">If you strip the lines in <code>read_words</code>, why do you strip them again in <code>read_board</code>?</span>
<span class="comment-copy">@DeliriousLettuce, Because I did read_words() after the other one...</span>
<span class="comment-copy">its... beautiful. Also i didn't know you could call return and for loop in the same line. I'm a changed man.</span>
<span class="comment-copy">@GuriqbalChouhan List comprehension will definitely change the way you look at code.</span>
