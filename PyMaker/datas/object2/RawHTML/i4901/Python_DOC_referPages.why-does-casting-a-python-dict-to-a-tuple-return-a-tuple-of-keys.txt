<div class="post-text" itemprop="text">
<p>I came across some Python code that had me very confused.</p>
<pre><code>my_dict = {'a': 'b'}
a, = my_dict            # a = 'a'
a, b = my_dict          # ValueError: Too many values to unpack
</code></pre>
<p>Basically, I found that casting a dictionary as a tuple returns a tuple of the dictionary's keys.</p>
<pre><code>my_dict = {'a': 'b', 'c': 'd'}
a = tuple(my_dict)      # a = ('a', 'c')
</code></pre>
<p>Why does a tuple(dict) return a tuple of keys? I can make sense of it, but wasn't able to find any documentation or explanation around why. Can anyone explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionary objects are clearly documented <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>iter(d)</p>
<p>Return an iterator over the keys of the dictionary.</p>
</blockquote>
<p>Note, this is why I don't like using the term "cast" when you use <code>list</code> or <code>tuple</code> to convert <em>an iterable</em> into a list or tuple. And from the tuple <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>class tuple([iterable]):</p>
<p>...</p>
<p>The constructor builds a <code>tuple</code> whose items are the same and in the
  same order as <em>iterable</em>â€™s items. <em>iterable</em> may be either a sequence,
  a container that supports iteration, or an iterator object. If
  <em>iterable</em> is already a tuple, it is returned unchanged. For example, <code>tuple('abc')</code> returns <code>('a', 'b', 'c')</code> and <code>tuple( [1, 2, 3] )</code>
  returns <code>(1, 2, 3)</code>. If no argument is given, the constructor creates
  a new empty tuple, <code>()</code>.</p>
</blockquote>
</div>
<span class="comment-copy">When you loop over a dictionary, by default, you are looping over its keys.</span>
