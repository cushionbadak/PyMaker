<div class="post-text" itemprop="text">
<p>I'm writing a program which needs to scan all 65535 ports in a host searching for the ones which are open. This is what I have so far, and it works, but <strong>it produces different results every time I execute the script</strong>, why is this happening?</p>
<pre><code>def check_open_port(host, port):
    s = socket.socket()
    s.settimeout(0.1)
    # the SO_REUSEADDR flag tells the kernel to reuse a local 
    # socket in TIME_WAIT state, without waiting for its natural
    # timeout to expire.
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    try:
        code = s.connect_ex((host, port))
        s.close()

        if code == 0:
            return True
        else:
            return False
    except socket.error:
        return False


def get_open_ports(host, max_port=65535):
    open_ports = []

    def worker(port):
        if check_open_port(host, port):
            open_ports.append(port)


    pool = ThreadPoolExecutor(max_workers=10000)
    [pool.submit(worker, port) for port in range(1, max_port + 1)]
    pool.shutdown(wait=True)

    return open_ports
</code></pre>
<p>For example, in a host with ports 22, 80, and 443 open, sometimes I get this response:</p>
<p><code>[22, 80]</code></p>
<p>and sometimes I get:</p>
<p><code>[22, 80, 443]</code></p>
<p>or even:</p>
<p><code>[22]</code></p>
<p>Hosts with more open ports produce more combinations.</p>
<p>I have played with <code>max_workers</code> and <code>settimeout()</code> values, but I can't get it to work well. The only time it worked was without using threads, but obviously it took ages to complete, I need to use them.</p>
<p>Am I missing something? Is there another way to implement this?</p>
</div>
<div class="post-text" itemprop="text">
<p>2 questions here:</p>
<ol>
<li>Am I missing something</li>
<li>Is there another way to implement this?</li>
</ol>
<h3>Am I missing something</h3>
<p>I think it’s worth checking error codes here:</p>
<pre><code>if code == 0: 
    return True
else:
    return False
</code></pre>
<p>given that you’re trying to run a pool of <strong>! 10K</strong> threads all kind of errors might follow here - i.e. reach some system/your user limits (check out <code>ulimit -a</code>) and you would treat such errors as a closed port without a notice. It might explain unstable results you experience.</p>
<p>BTW on my MacBook the results are consistent (checking against my live server on a VPS hosting)</p>
<p>I’d also pick fewer number of threads - <strong>10K</strong> is an overkill. For example, here are the default values suggested in the python <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>Changed in version 3.5: If max_workers is None or not given, it will
  default to the number of processors on the machine, multiplied by 5,
  assuming that ThreadPoolExecutor is often used to overlap I/O instead
  of CPU work and the number of workers should be higher than the number
  of workers for ProcessPoolExecutor</p>
</blockquote>
<h3>Is there another way to implement this?</h3>
<p>First of all, there’s no need to use <code>threads/processes</code> - non-blocking sockets + event <a href="https://docs.python.org/3/library/select.html" rel="noreferrer">multiplexors</a> like <a href="https://docs.python.org/3/library/select.html#select.epoll" rel="noreferrer">epoll</a> are around for years so you’d be able to get away without having additional threads/processed whatsoever.</p>
<p>The method to connect/close is also suboptimal, because you just need to <em>check if a port is open or not</em> - you don’t need a full-on TCP connection here.</p>
<p>In the simplest case, you just need to send a <strong>SYN</strong> segment and check what the server would respond. </p>
<p>Here’s a <a href="http://resources.infosecinstitute.com/port-scanning-using-scapy/" rel="noreferrer">good</a> article with a dozen of methods using <a href="http://www.secdev.org/projects/scapy/" rel="noreferrer">scapy</a></p>
<blockquote>
<p>Scapy is a powerful interactive packet manipulation program. It is
  able to forge or decode packets of a wide number of protocols, send
  them on the wire, capture them, match requests and replies, and much
  more. It can easily handle most classical tasks like scanning,
  tracerouting, probing, unit tests, attacks or network discovery (it
  can replace hping, 85% of nmap, arpspoof, arp-sk, arping, tcpdump,
  tethereal, p0f, etc.).</p>
</blockquote>
<p>Here’s one of the methods description (“<em>TCP connect scan</em>”):</p>
<blockquote>
<p>The client sends the first handshake using the SYN flag and port to
  connect to the server in a TCP packet. If the server responds with a
  RST instead of a SYN-ACK, then that particular port is closed on the
  server</p>
</blockquote>
<p>And one more method (“<em>TCP stealth scan</em>”):</p>
<blockquote>
<p>This technique is similar to the TCP connect scan. The client sends a
  TCP packet with the SYN flag set and the port number to connect to. If
  the port is open, the server responds with the SYN and ACK flags
  inside a TCP packet. But this time the client sends a RST flag in a
  TCP packet and not RST+ACK, which was the case in the TCP connect
  scan. This technique is used to avoid port scanning detection by
  firewalls</p>
</blockquote>
<p>Of course if just want to play with sockets/threads your approach would also be fine even without pcap/scapy</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried your code on jupyter notebook and I always get the same set of ports:</p>
<pre><code>get_open_ports('127.0.0.1')
</code></pre>
<p>Output:</p>
<p>[<code>133, 200, 144...60700]</code></p>
<p>Could it be possible that a different number of ports are open at a particular time for the host being queried?</p>
<p>To verify for a small set of ports, I reduced <code>max_port</code> to <code>10000</code> and I still get the same set of ports every time:</p>
<pre><code>def get_open_ports(host, max_port=10000):
open_ports = []

def worker(port):
    if check_open_port(host, port):
        open_ports.append(port)

with ThreadPoolExecutor(max_workers=10000) as executor:
    [executor.submit(worker, port) for port in range(1, max_port + 1)]
    executor.shutdown(wait=True)
return open_ports

get_open_ports('127.0.0.1')
</code></pre>
<p>Output: <code>[150, 900, 1035, 7789]</code></p>
<p>Note: I've changed the port numbers for security sake.</p>
<p><strong>EDIT:</strong></p>
<pre><code>def get_open_ports(host, max_port=65535):
    open_ports = []

    def worker(port):
        if check_open_port(host, port):
            open_ports.append(port)

# We can use a with statement to ensure threads are cleaned up promptly
    with ThreadPoolExecutor(max_workers=100) as executor:
        print('main:starting')
        wait_for=[executor.submit(worker,port) for port in range(1, max_port + 1)]
        for f in as_completed(wait_for):
            print('main: result: {}'.format(f.result())) #check result on each thread execution

#         executor.shutdown(wait=True)  #not required when using the 'with' statement
    return len(open_ports)

test = get_open_ports('45.60.112.163') #hostname for www.indracompany.com

#max_workers not defined &amp; max_port=10000
# len(test)     #test1: 148
# len(test)     #test 2: 79

#max_workers = 10000 &amp; max_port=65535
# len(test)      #test1: 1
# len(test)      #test2:1
# len(test)      #test3:1

#max_workers = 20000 &amp; max_port=65535

# len(test)  #test1: 14
# len(test)  #test2:1
# len(test)  #test3: 1
# len(test)  #test4:1

#max_workers not defined &amp; max_port=65535 #quite time-consuming
# len(test)   #test1: 63
</code></pre>
<p><strong>EDIT 2: A more reliable solution</strong></p>
<p>As suggested by @Tarun, Python's <a href="https://xael.org/pages/python-nmap-en.html" rel="noreferrer">python-nmap</a> library does a better job at scanning hosts.</p>
<p>The below solution gives an accurate result, however, I observed a significant compromise on performance as the range of port discovery increases. Perhaps, threading could be incorporated into the code to improve performance. I've also imported the time library to get the program execution time in the end. This can be used for comparison purposes when testing for performance.</p>
<pre><code># The python-nmap library helps to programmatically manipulate scanned results of nmap to automate port scanning tasks. 
# To use this library you must have the Nmap software installed. This can be installed from https://nmap.org/download.html.
# Network Mapper (Nmap) is a free and open-source tool used for network discovery and security auditing. 
# It runs on all major computer operating systems, and official binary packages are available for Linux, Windows, and Mac OS X.
# For Windows 7 and later, you must also upgrade 'NCap' from https://nmap.org/npcap/ 
# For Windows, make sure nmap.exe is added to PATH.
# When you're ready, pip install python-nmap

import time
import nmap
nm = nmap.PortScanner() #initialize PortScanner object
host = '45.60.112.163'  #specify host
nm.scan(host, '1-100') #run the scan, specify host and range of ports to scan

#Optional steps for verification:

#Output: nmap -oX - -p 1-100 -sV 45.60.112.163
print(nm.command_line()) #command_line command to execute on nmap command prompt

#Output: {'tcp': {'method': 'syn', 'services': '1-100'}}
print(nm.scaninfo())   #nmap scan information

#Now we can scan all hosts
#From Official documentation at https://xael.org/pages/python-nmap-en.html
start_time = time.time()   #To get program execution time
for host in nm.all_hosts(): 
    print('----------------------------------------------------')
    print('Host : %s (%s)' % (host, nm[host].hostname()))
    print('State : %s' % nm[host].state())
    for proto in nm[host].all_protocols():
        print('----------')
        print('Protocol : %s' % proto)
        lport = nm[host][proto].keys()
        for key in sorted(lport):
            for port in lport:
                print ('port : %s\tstate : %s' % (port, nm[host][proto][port]['state']))
print('Execution time: %s seconds' % (time.time() - start_time))

    #Output:
    ----------------------------------------------------
    Host : 45.60.112.163 ()
    State : up
    ----------
    Protocol : tcp
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    port : 25       state : open
    port : 51       state : open
    port : 53       state : open
    port : 80       state : open
    port : 81       state : open
    port : 85       state : open
    port : 91       state : open
    Execution time: 0.015624761581420898 seconds
</code></pre>
<p>To convert output to csv, use:</p>
<pre><code>print(nm.csv())
</code></pre>
<p>As a result of this investigation, Nmap was now installed on my computer. Just for fun, I also ran a scan on the command prompt using the below command. This scan ran for range '1-1000' and took more than 15 minutes(I didn't sit through the whole session!).</p>
<p><a href="https://i.stack.imgur.com/SOSGH.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/SOSGH.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I've come across this port scanner in my time working with sockets in python...</p>
<pre><code>import socket
import threading
from queue import *

print_lock = threading.Lock()
target = input("Enter websit or IP Adress to scan: ")
minPort = int(input("Enter minimum Port to scan (1 is the smallest): "))
maxPort = int(input("Enter maximum Port to scan: "))
threadNo = int(input("Enter No. of threads to use(500 is a good all around number): "))

def portscan(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        con = s.connect((target, port))
        with print_lock:
            print("Port", port, "is open!")
        con.close()
    except:
        pass

def threader():
    while True:
        worker = q.get()
        portscan(worker)
        q.task_done()

q = Queue()

for x in range(threadNo):
    t = threading.Thread(target=threader)
    t.daemon = True
    t.start()

for worker in range (minPort, maxPort):
     q.put(worker)

q.join()
</code></pre>
<p>It works fairly well and can be adapted easily :)</p>
</div>
<span class="comment-copy">You want to do it using this code only are you are open to using <code>nmap</code> python package? <a href="https://github.com/johanlundberg/python-nmap/blob/master/nmap/example.py" rel="nofollow noreferrer">github.com/johanlundberg/python-nmap/blob/master/nmap/…</a></span>
<span class="comment-copy">I'd prefer using this kind of code, but I'll use whatever works if there is no other choice.</span>
<span class="comment-copy">I believe you have a racing condition when appending on <code>open_ports</code>. Since multiple threads access this variable, you should use threading.Lock to ensure that only one appends at a time... However, I am not able to reproduce the problem locally!?</span>
<span class="comment-copy">Tried a lock and the problem is still there. By the way, a list is thread-safe.</span>
<span class="comment-copy">Why would your answer work? In the end, it is the same as mine.</span>
<span class="comment-copy">In fact, it doesn't work: <code>AttributeError: 'set' object has no attribute 'shutdown'</code></span>
<span class="comment-copy">Sorry, I was working with multiple tasks and couldn't edit the answer. I've tried your code and it executes perfectly for the host I defined.</span>
<span class="comment-copy">Try a host with a lot of open ports, the results will vary from each scan. For example, <code>indracompany.com</code>.</span>
<span class="comment-copy">I tested <code>indracompany.com</code> and you were correct, the results vary greatly. I've modified the code with comments and noticed the variation is largely due to the <code>max_workers</code> parameter. According to this answer <a href="https://stackoverflow.com/questions/40492894/python-multithreading-max-workers">link</a>, there is no optimal number for <code>max_workers</code>. I've added an extra check in the code to verify the result on each thread execution.For instance, I get a long list of <code>main:result:None</code> when <code>max_workers</code>=<code>100</code>. This means that no port number is returned on a large number of thread submissions.</span>
