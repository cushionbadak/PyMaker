<div class="post-text" itemprop="text">
<p>I have a path files which are named by time (201803061500) etc. What I need is a time conversion, because I use <code>while</code> loop to open a few of them there is an error when I want files from for example (...1555 to ... 1615) and Python sees an obivous problem because after 1555 is 1560, but I want him to convert that to time so after (...1555 will be ... 1600) any ideas how to use it?</p>
<p>Btw. Time conversion must be contain 4 digits, so it cannot be 16:00/16-00 etc. it must be 1600, because it goes as an input to my pathfile. Any ideas?</p>
<p>UPDATE - I did this, but this code is rubbish and I think my problem might be solved by one command.</p>
<pre><code>Start_time_hours = input('Enter start time (hh): ' )
Start_time_minutes = input('Enter start time (mm): ')

if Start_time_hours &gt;= 24:
    print ("Values from 00 to 23 only!")
if Start_time_minutes &gt;= 60:
    x = Start_time_hours + 1
    y = Start_time_minutes - Start_time_minutes
    if y == 0:
        print "Ok"
        print x, y

if Start_time_minutes &lt;= 55:
        print Start_time_hours, Start_time_minutes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One easy way to handle unformated time is the <code>datetime</code>. You can first strip your strings and then do whatever you want !</p>
<pre><code>from datetime import datetime, timedelta
from time import strtime

datetime_object = datetime.strptime(file_name, '%Y%m%d%H%M')

print(datetime_object) # returns '2018-03-06 15:00:00'

delta = timedelta(minutes=5)
next_time = datetime_object + delta 
print(next_time) # returns '2018-03-06 15:05:00'
</code></pre>
<p>Finally you can get your string back by using <code>time.strftime()</code> function</p>
<pre><code>new_string = next_time.strftime('%Y%m%d%H%M')
print(new_string) # returns '201803061505'
</code></pre>
<p>Source <code>datetime</code>: <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a>
Source <code>time</code>: <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">https://docs.python.org/2/library/time.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Start_time_hours += (Start_time_minutes / 60)
Start_time_minutes %= 60
Start_time_minutes += 5
</code></pre>
<p>Those three lines solved my problem, <code>datetime</code> also works, but if you put those variables to <code>input</code> pathfile, you'll get an error. That's why I've choosen this solution.</p>
</div>
<span class="comment-copy">Could you add some of your own code, what have you tried so far ?</span>
<span class="comment-copy">Have you tried datetime.strptime() ?</span>
<span class="comment-copy">@Ove Sure, but in my loop I need to add 5 minutes every loop and since <code>datetime.strptime()</code> is a string I cannot do that, plus when I put this format to my pathfile an error occurs, because there is also year etc. And as I have mentioned I need only (HHMM - hours minutes).</span>
<span class="comment-copy">The return value of <code>datetime.strptime()</code> is <i>not</i> a string. It's a datetime object, and you can add timedelta objects to it.</span>
<span class="comment-copy">@Hiddenguy As Ove suggests, use <code>timedelta</code> (5 minutes) to add to to your <code>datetime</code> object.  Once you add the <code>timedelta</code> You can extract the hours and minutes part from the result.</span>
<span class="comment-copy"><code>from datetime import datetime  Start_time = input('Enter start time (hh): ' ) Time_range = str(Start_time)  x = datetime.strptime(Time_range, '%H%M') print x</code>  Well it gives me that format <code>1900-01-01 14:00:00</code> which is not what I wanted plus in that case I cannot add another 5 minutes in my loop.</span>
<span class="comment-copy">That's normal, you need to reconvert your <code>datetime_object</code>back to a string after you've added the 5 minutes. I've edited my post to make it clearer</span>
