<div class="post-text" itemprop="text">
<p>I have a dictionary like:</p>
<pre><code>d = {1: 'a', 2:'b', 3:'c', 4:'c', 5:'c', 6:'c'}
</code></pre>
<p>I want to slice this dictionary such that if the values in the end are same, it should return only the first value encountered. so the return is:</p>
<pre><code>d = {1: 'a', 2:'b', 3:'c'}
</code></pre>
<p>I'm using <code>collections.defaultdict(OrderedDict)</code> to maintain sorting by the keys.</p>
<p>Currently, I'm using a loop. Is there a pythonic way of doing this?</p>
<hr/>
<p><strong>UPDATE</strong> </p>
<p>the dictionary values can also be dictionaries: </p>
<pre><code>d = {1: {'a': 'a1', 'b': 'b1'}, 2:{'a': 'a1', 'b': 'b2'}, 3:{'a': 'a1', 'b': 'c1'}, 4:{'a': 'a1', 'b': 'c1'}, 5:{'a': 'a1', 'b': 'c1'}, 6:{'a': 'a1', 'b': 'c1'}}
</code></pre>
<p>output:</p>
<pre><code>d = {1: {'a': 'a1', 'b': 'b1'}, 2:{'a': 'a1', 'b': 'b2'}, 3:{'a': 'a1', 'b': 'c1'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupy</code></a> with a list-comprehension to achieve your result</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby

&gt;&gt;&gt; d = {1: 'a', 2:'b', 3:'c', 4:'c', 5:'c', 6:'c'}
&gt;&gt;&gt; n = [(min([k[0] for k in list(g)]),k) for k,g in groupby(d.items(),key=lambda x: x[1])]
&gt;&gt;&gt; n
&gt;&gt;&gt; [(1, 'a'), (2, 'b'), (3, 'c')]
</code></pre>
<p>The above expression can also be written as</p>
<pre><code> &gt;&gt;&gt; from operator import itemgetter
 &gt;&gt;&gt; n = [(min(map(itemgetter(0), g)), k) for k, g in groupby(d.items(), key=itemgetter(1))]
</code></pre>
<p>You can cast this to <code>dict</code> by simply using </p>
<pre><code>&gt;&gt;&gt; dict(n)
&gt;&gt;&gt; {1: 'a', 2: 'b', 3: 'c'}
</code></pre>
<p>This obviously don't maintain order of keys, so you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a></p>
<pre><code>&gt;&gt;&gt; OrderedDict(sorted(n))
&gt;&gt;&gt; OrderedDict([(1, 'a'), (2, 'b'), (3, 'c')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get rid of for loop - you can do it this way:</p>
<pre><code>{a:b for b,a in {y:x for x,y in sorted(d.iteritems(), reverse=True)}.iteritems()}
</code></pre>
<p>But it is not so pythonic and not so efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using a ordered dictionary with the keys representing indexes, the more pythonic way is using a list. In this case, you will use indexes instead of keys and will be able to slice the list more effectively. </p>
<pre><code>&gt;&gt;&gt; d = {1: 'a', 2:'b', 3:'c', 4:'c', 5:'c', 6:'c'}
&gt;&gt;&gt; a = list(d.values())
&gt;&gt;&gt; a[:a.index(a[-1])+1]
['a', 'b', 'c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just in case, a solution with <code>pandas</code></p>
<pre><code>import pandas as pd

df = pd.DataFrame(dict(key=list(d.keys()),val=list(d.values())))
print(df)
   key val
0    1   a
1    2   b
2    3   c
3    4   c
4    5   c
5    6   c

df = df.drop_duplicates(subset=['val'])
df.index=df.key
df.val.to_dict()

{1: 'a', 2: 'b', 3: 'c'}
</code></pre>
<p>Don't know performances issues on biggest dataset or if it is more pythonic.<br/>
Nevertheless, no loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can check if two last values are same:</p>
<pre><code>d = OrderedDict({1: 'a', 2:'b', 3:'c', 4:'c', 5:'c', 6:'c'})

while d.values()[-1] == d.values()[-2]:
    d.popitem()

print d
# OrderedDict([(1, 'a'), (2, 'b'), (3, 'c')])
</code></pre>
</div>
<span class="comment-copy">Is the dict always ordered by its keys? I see that you have 1,2,3,4,5,6 for keys. If so, then use a list instead as a dictionary is unnecessary.</span>
<span class="comment-copy">Loops are pythonic. I wouldn't say comprehensions are always more pythonic than loops, this is subjective.</span>
<span class="comment-copy">This comes down to a matter of preference, but you can also use <code>operator.itemgetter</code>: <code>[(min(map(itemgetter(0), g)), k) for k, g in groupby(d.items(), key=itemgetter(1))]</code>. I upvoted nonetheless :).</span>
<span class="comment-copy">thanks! this works but it doesnt when the values are also dictionaries. sorry, i have updated the OP</span>
<span class="comment-copy">@AbhishekThakur I checked it is actually working if values are <code>dict</code>. Can you confirm?</span>
<span class="comment-copy">my bad. this does work!</span>
<span class="comment-copy">I was also thinking the same thing. Not sure if this is a good idea or not.</span>
<span class="comment-copy">I would say efficient and readable for loop is much better =)</span>
