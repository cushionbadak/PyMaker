<div class="post-text" itemprop="text">
<p>I have made some changes to a functionality which is breaking the unit tests. Previously i had a common.py containing the function request_url:</p>
<pre><code>import requests

def request_url(method, url):
    return _request_url(method, url)

def _request_url(method, url):
    return requests.request(method, url)
</code></pre>
<p>And this was the test:</p>
<pre><code>@mock.patch("requests.request", autospec=True)
def test_request_url_200(self, mock_request):

    response = mock.MagicMock()
    response.status_code = 200
    method = mock.sentinel.method
    path = "url"

    result = common.request_url(
        method,
        path
    )

    self.assertListEqual([
        mock.call(
            mock.sentinel.method,
            "url"
        ),
    ], list(mock_request.mock_calls))

    self.assertListEqual([mock.call.raise_for_status()], list(response.mock_calls))
    self.assertEqual(mock_request.return_value, result)
</code></pre>
<p>After the changes in functionality, instead of simply calling requests.request, i have first initiated a session, mounted a TLS Adapter and then called the session's request function like this:</p>
<pre><code>def _request_url(method, url):
    session = requests.session()
    adapter = TlsAdapter(ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1)
    session.mount("https://", adapter)
    return response = session.request(method, url)
</code></pre>
<p>Here, i am not sure how to exactly mock session.request since that is available through the session variable. I tried patching <strong><em>requests.session.request</em></strong> but that does not work here.</p>
<p>Does anyone have any idea how can this function be mocked?</p>
<p>thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the reason in <code>@mock.patch(...)</code>. You set <code>autospec=True</code>, but your <code>mock_request</code> doesn't return data(in your case everytime - <code>Mock</code>). <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"> The documentation</a> says:</p>
<blockquote>
<p>If you set autospec=True then the mock will be created with a spec
  from the object being replaced. All attributes of the mock will also
  have the spec of the corresponding attribute of the object being
  replaced. ...</p>
</blockquote>
<p>Try to call: </p>
<pre><code>print(mock_request.return_value) # &lt;MagicMock name='request()()' id='4343989392'&gt;
# or
# print(mock_request.return_value.return_value) # &lt;MagicMock name='request()()()' id='4344191568'&gt;
</code></pre>
<p>As you can see <code>requests.request</code> was 'mocked' but doesn't return any data. You can set expected data using <code>return_value</code> or <code>side_effect</code>. Here an example:</p>
<pre><code>from unittest import TestCase
import mock
from common import request_url


class MyTestExample(TestCase):

    def test_request_url_1(self):
        mocked_request = mock.patch('requests.request', side_effect=['one', 'two', 'tree', ])
        mocked_request.start()
        # request_url(...) will return item from list
        self.assertEqual('one', request_url('test', 'url'))
        self.assertEqual('two', request_url('test', 'url'))
        self.assertEqual('tree', request_url('test', 'url'))

        mocked_request.stop()

    def test_request_url_2(self):
        result = {'my': 'dict'}
        mocked_request = mock.patch('requests.request', return_value=result)
        mocked_request.start()
        # request_url(...) will return static data 
        self.assertEqual(result, request_url('test', 'url'))
        self.assertEqual(result, request_url('test', 'url'))
        self.assertEqual(result, request_url('test', 'url'))

        mocked_request.stop()
</code></pre>
<p>So, you need just describe expected data. Also you can <code>mock</code> API using <a href="http://httpretty.readthedocs.io/en/latest/tutorial.html" rel="nofollow noreferrer">httpretty</a>.</p>
<p>Hope this helps. </p>
</div>
<span class="comment-copy">yup it does! Thanks alot for pointing out the mistake in returning a value of mock!</span>
