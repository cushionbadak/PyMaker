<div class="post-text" itemprop="text">
<p>Using the python <code>open</code> built-in function in this way:</p>
<pre><code>with open('myfile.csv', mode='r') as rows:
    for r in rows:
        print(r.__repr__())
</code></pre>
<p>I obtain this ouput</p>
<pre><code>'col1,col2,col3\n'
'fst,snd,trd\n'
'1,2,3\n'
</code></pre>
<p>I don't want the <code>\n</code> character. Do you know some efficient way to remove that char (in place of the obvious <code>r.replace('\n','')</code>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are trying to read and parse csv file, Python's csv module might serve better:</p>
<pre><code>import csv
reader = csv.reader(open('myfile.csv', 'r'))
for row in reader:
    print(', '.join(row))
</code></pre>
<p>Although you cannot change the line terminator for reader here, it ends a row with either '\r' or '\n', which works for your case.</p>
<p><a href="https://docs.python.org/3/library/csv.html#csv.Dialect.lineterminator" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html#csv.Dialect.lineterminator</a></p>
<p>Again, for most of the cases, I don't think you need to parse csv file manually. There are a few issues/reasons that makes csv module easier for you: field containing separator, field containing newline character, field containing quote character, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>string.strip()</code></a>, which (with no arguments) removes any whitespace from the start and end of a string:</p>
<pre><code>for r in rows:
    print(r.strip())
</code></pre>
<p>If you want to remove only newlines, you can pass that character as an argument to <code>strip</code>:</p>
<pre><code>for r in rows:
    print(r.strip('\n'))
</code></pre>
<hr/>
<p>For a clean solution, you could use a generator to wrap <code>open</code>, like this:</p>
<pre><code>def open_no_newlines(*args, **kwargs):
    with open(*args, **kwargs) as f:
        for line in f:
            yield line.strip('\n')
</code></pre>
<p>You can then use <code>open_no_newlines</code> like this:</p>
<pre><code>for line in open_no_newlines('myfile.csv', mode='r'):
    print(line)
</code></pre>
</div>
<span class="comment-copy"><code>open</code> has a parameter called <b>newline</b> in which you decide how you want the <code>/n</code> character to be translated. Setting it to <code>''</code> will return the newline character untranslated. For more information check <a href="https://docs.python.org/3.5/library/functions.html#open" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@VasilisG. That will leave the newline character in the string as <code>\r\n</code></span>
<span class="comment-copy">There's nothing here to indicate that the lines are CRLF terminated. I think @enneppi just wants to remove the LF.</span>
<span class="comment-copy">@enneppi, unless you're manually reading and parsing a CSV file as an academic exercise, you probably want to use Python's <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">built-in CSV parser class</a>.</span>
<span class="comment-copy">I mean there is some way to do that setting some <code>open</code> parameters?</span>
<span class="comment-copy">You can replace newlines with <code>\r</code>, or <code>\r\n</code> using open parameters, but you cannot remove them.  Check out the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">@chrisz which are the parameter you're talking about?</span>
<span class="comment-copy"><code>open()</code> has a parameter called <code>newlines</code>.  I linked the documentation earlier.</span>
