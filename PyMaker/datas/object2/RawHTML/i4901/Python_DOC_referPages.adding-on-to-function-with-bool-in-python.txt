<div class="post-text" itemprop="text">
<p>Beginner here, looking for some help with python!</p>
<p>Right now, I have a function defined that returns a list of lists:</p>
<pre><code>def lenumerate(s):
    a = (text.split())
    b = ([len(x) for x in text.split()])
    c = list(zip(a,b))
    print
    return c

text = "But then of course African swallows are nonmigratory"
l = lenumerate(text)
print(l)        
</code></pre>
<p>And it prints out: </p>
<pre><code>[('But', 3), ('then', 4), ('of', 2), ('course', 6), ('African', 7), ('swallows', 8), ('are', 3), ('nonmigratory', 12)]
</code></pre>
<p>Now, I want to write a second version of the function that takes as second argument a boolean (i.e. True or False) called flip. The default value for flip shall be False. </p>
<p>I can reverse the order such that 'nonmigratory' appears at the beginning, but that's not what I want. I want the order preserved, just flipping to (3, "But') all the way through.</p>
<p>I appreciate any help you can offer!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one solution:</p>
<pre><code>def lenumerate(s, flip=False):
    a = text.split()
    b = map(len, a)
    c = zip(a, b) if not flip else zip(b, a)
    return list(c)

text = "But then of course African swallows are nonmigratory"
l = lenumerate(text, True)
print(l)

# [(3, 'But'), (4, 'then'), (2, 'of'), (6, 'course'), (7, 'African'), (8, 'swallows'), (3, 'are'), (12, 'nonmigratory')]
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li>You only need to apply <code>split()</code> once.</li>
<li>You can feed <code>map</code> directly into <code>zip</code>. This means more work is done lazily, rather than building unnecessary lists.</li>
<li>Python supports lazy ternary statements for one-line <code>if</code> / <code>else</code> constructs.</li>
<li>A <code>print</code> statement with no argument is not useful and can be removed.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>def lenumerate(s, flip=False): ## Default value is False if not provided
    a = (text.split())
    b = ([len(x) for x in text.split()])
    c = list(zip(a,b))

    if list: ## Reverse the pairs if you want to
        c = list(zip(b, a))

    return c

text = "But then of course African swallows are nonmigratory"
l = lenumerate(text)
print(l)      
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Python functions can be called with a single list of arguments</a>, instead of multiple individual arguments.</p>
<p>We can use this to make one set of arguments and one reversed set of arguments, depending on the state of <code>flip</code></p>
<pre><code>def lenumerate(s, flip=False):
    words = text.split()
    word_lengths = [len(x) for x in text.split()]
    args = [words, word_lengths] if flip else [word_lengths, words]
    return list(zip(*args))


text = "But then of course African swallows are nonmigratory"

print(lenumerate(text))
print(lenumerate(text, True))
</code></pre>
<p>prints</p>
<pre><code>[(3, 'But'), (4, 'then'), (2, 'of'), (6, 'course'), (7, 'African'), (8, 'swallows'), (3, 'are'), (12, 'nonmigratory')]
[('But', 3), ('then', 4), ('of', 2), ('course', 6), ('African', 7), ('swallows', 8), ('are', 3), ('nonmigratory', 12)]
</code></pre>
<p>Notes</p>
<ul>
<li>The parentheses you were using were superfluous</li>
<li>Try to use speaking variable names, not <code>a</code> and <code>b</code></li>
</ul>
<p>Python's <em>list comprehensions</em> make it possible to avoid writing a function in the first place. The above function could be written as:</p>
<pre><code>result = [(word, len(word)) for word in text.split()]
print(result)
</code></pre>
</div>
<span class="comment-copy">Why don't you just do <code>[(len(x), x) for x in text.split())]</code> at the first place?</span>
<span class="comment-copy">@Kasramvd, even better, just feed <code>map</code> into your <code>zip</code>, without building an entire list.</span>
