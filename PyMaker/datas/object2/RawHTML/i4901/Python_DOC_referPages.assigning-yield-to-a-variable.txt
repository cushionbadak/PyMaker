<div class="post-text" itemprop="text">
<p>First of all, I'd like to mention that I am not particularly familiar with Python. I have recently been forced to familiarise myself with a code sample that's left my jaws ajar, and I have been unable to "translate" it. The various documents and articles I've taken a look at have not helped either:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do">What does the "yield" keyword do?</a></li>
<li><a href="https://pythontips.com/2013/09/29/the-python-yield-keyword-explained/" rel="nofollow noreferrer">The Python yield keyword explained</a></li>
<li><a href="https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement" rel="nofollow noreferrer">The yield statement</a></li>
<li><a href="https://docs.python.org/3/reference/expressions.html#yieldexpr" rel="nofollow noreferrer">Yield expressions</a></li>
</ul>
<p>Here's a shortened-down version of the function in question:</p>
<pre><code>@coroutine
def processMessage(receiver):
    global userID
    #...
    while True:
        msg = (yield)
        try:
            #...
        except Exception as err:
            #...
</code></pre>
<p>I cannot understand what it does and am thus not able to "walk through" the code. My questions are "What does this function do?" and "What sequences does this function follow?"</p>
<p>The line that throws me off is <code>msg = (yield)</code>. I have no idea what it's trying to achieve. Intuition tells me it simply grabs new messages as they come through, but I fail to understand <em>why</em>. If anyone knows and if I have provided enough information, I'd really appreciate an explanation.</p>
<p>The <code>Try</code> clause:</p>
<pre><code>if msg['event'] == 'message' and 'text' in msg and msg['peer'] is not None:
    if msg['sender']['username'] == username:
        userID = msg['receiver']['peer_id']
        config.read(fullpath + '/cfg/' + str(userID) + '.cfg')
        if config.has_section(str(userID)):
            log('Config found')
            readConfig()
            log('Config loaded')
        else:
            log('Config not found')
            writeConfig()
            log('New config created')
    if 'username' in msg['sender']:
        parse_text(msg['text'], msg['sender']['username'], msg['id'])
</code></pre>
<p>P.S. <code>receiver</code> is a socket receiver.</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax <code>variable = (yield some_value)</code> in a generator does the following:</p>
<ul>
<li>it returns <code>some_value</code> to the code that invoked it (via <code>next</code> or <code>send</code>);</li>
<li>when it is next invoked (via <code>.next</code> or <code>.send(another_value)</code>) it assigns <code>another_value</code> to <code>variable</code> and continues execution.</li>
</ul>
<p>For example, suppose you have a generator function:</p>
<pre><code>&gt;&gt;&gt; def f():
...     while True:
...         given = (yield)
...         print("you sent me:", given)
...
</code></pre>
<p>Now, lets call <code>f</code>.  That returns us a generator.</p>
<pre><code>&gt;&gt;&gt; g = f()
</code></pre>
<p>The very first time we use the generator we cannot send it data</p>
<pre><code>&gt;&gt;&gt; next(g)
</code></pre>
<p>At this point it just evaluated the <code>yield</code> ... when we now call <code>.send</code> it will continue from that point, assigning the data we have sent it to the variable given</p>
<pre><code>&gt;&gt;&gt; g.send("hello")
('you sent me:', 'hello')
&gt;&gt;&gt; g.send("there")
('you sent me:', 'there')
</code></pre>
<p>In your particular sample code, you have a generator that is:</p>
<ul>
<li>being given a message to process from outside ... something will be calling <code>.send(some_msg)</code>;</li>
<li>it will be processing that message and then yielding back to the outside caller, which will then feed it another message.</li>
</ul>
</div>
<span class="comment-copy">What is it you wish to achieve?</span>
<span class="comment-copy">@johnashu, this is the only mention of <code>yield</code> in the file. It's a script that interacts with <a href="https://github.com/vysheng/tg" rel="nofollow noreferrer">telegram-cli</a>.</span>
<span class="comment-copy">The function is described as a generator object, so the yield keyword is correct.. Can you add in the code for the try clause?  I can guess that it will yield the msgs 1 at a time.. I cannot help but I am intrigued!</span>
<span class="comment-copy"><code>yield</code> totally works like that. This is a <a href="https://www.python.org/dev/peps/pep-0342/" rel="nofollow noreferrer">coroutine</a>, in the old, pre-async sense. It's not clear what the question is trying to ask, though.</span>
<span class="comment-copy">@user2357112, for a site that's supposed to facilitate learning and research it certainly fails. Without enough experience in the language I <i>can't</i> present the problem properly. It's not <i>my</i> code, so I can't present it in full. What am I supposed to do? Bang my head against the wall and curse everyone who downvotes and votes for closing the question? I've researched my question and I've tried to present it to the best of my ability. I apologise for not being perfect, but I'm just trying to learn.</span>
<span class="comment-copy">Thank you, kind sir! This is a very good illustration ot what's happening. I have not been able to find such a use case anywhere in the documentation. Thank you once more, it makes sense now.</span>
