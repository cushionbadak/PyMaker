<div class="post-text" itemprop="text">
<p>I need to calculate just first five prime numbers. I want to check the length of list while building it in list comprehension. The following code doesn't work.</p>
<pre><code>def checkPrime(n):
    for i in range(2,int(n**0.5)+1):
        if n%i==0:
            return False
    return True



 primes = [] 
 primes = [x  for x in range(2,30) if(checkPrime(x) and len(primes)&lt;6) ] 
 print primes
</code></pre>
<p>Output:</p>
<pre><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
</code></pre>
<p>Why <code>len(primes)&lt;6</code> is not working here. How can I achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The "Pythonic" way is to use a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a>, plus the <a href="https://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice</code></a> function:</p>
<pre><code>from itertools import islice

def checkPrime(n):
    for i in range(2,int(n**0.5)+1):
        if n%i==0:
            return False
    return True

def primes():
    i = 2
    while True:
        if checkPrime(i):
            yield i
        i += 1

first_5 = list(islice(primes, 5))
</code></pre>
<p>What this will do is create an infinite "list" called <code>primes</code> that you can use in many ways that a list can be used, but it will only actually calculate the values that you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.islice</code> combined with <code>filter</code> to make your computation lazy.</p>
<pre><code>from itertools import islice

def checkPrime(n):
    for i in range(2,int(n**0.5)+1):
        if n%i==0:
            return False
    return True

primes = filter(checkPrime, range(2, 10**100))

list(islice(primes, 6))  # [2, 3, 5, 7, 11, 13]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>List Comprehension</em> creates and returns the new list.</strong> In your code, within the <em>list comprehension</em>, <code>len(primes)</code> will always return zero because the length of list will not be updated till the list comprehension is complete and new list is returned. </p>
<p><strong>If it is must for you to use a <em>list comprehension</em></strong>, you may create a <em>generator</em> function to return you the next prime in the range. Within the list comprehension call the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> on the generator object (using the <code>range</code> to restrict the count of required values). </p>
<p>For example:</p>
<pre><code>def checkPrime(n):
    for i in range(2,int(n**0.5)+1):
        if n%i==0:
            return False
    return True

# Generator function
def getPrimes(n):
    for x in range(2, n):
        if(checkPrime(x)):
            yield x

# Create Generator object
primes_gen = getPrimes(30)

# List comprehension to get primes
primes = [next(primes_gen) for _ in range(5)]
#         ^                               ^ required count of prime numbers in list
#         ^ to get next prime number
</code></pre>
<p>The final value hold by <code>primes</code> will be:</p>
<pre><code>&gt;&gt;&gt; primes
[2, 3, 5, 7, 11]
</code></pre>
<p>As suggested in <a href="https://stackoverflow.com/a/49114459/2063361"><em>robbrit's answer</em></a>, <strong>Pythonic way to achieve this is using <a href="https://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a></strong> <em>(but it is not a list comprehension as you requested)</em>:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice

#    v type-casting it to list for displaying the list, 
#    v   as `islice` also returns a generator object
&gt;&gt;&gt; list(islice(getPrimes(30), 5))
[2, 3, 5, 7, 11]  # ^ generator function from my older example
</code></pre>
</div>
<span class="comment-copy">Your new <code>primes</code> is just being created. You are checking the length of an empty list all the time.</span>
<span class="comment-copy">That makes sense. How can I check the length or maintain a counter in the list comprehension?</span>
<span class="comment-copy">It throws an error saying object function is not an iterable</span>
<span class="comment-copy">You may need to do <code>list(first_5)</code>. I'll update the sample so it just automatically makes it a list.</span>
