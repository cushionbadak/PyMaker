<div class="post-text" itemprop="text">
<p>Here's my code:</p>
<pre><code>x = 1.0
y = 100000.0    
print x/y
</code></pre>
<p>My quotient displays as <code>1.00000e-05</code></p>
<p>Is there any way to suppress scientific notation and make it display as
<code>0.00001</code>? I'm going to use the result as a string.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>'%f' % (x/y)
</code></pre>
<p>but you need to manage precision yourself. e.g.,</p>
<pre><code>'%f' % (1/10**8)
</code></pre>
<p>will display zeros only.<br/>
<a href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" rel="noreferrer">details are in the docs</a></p>
<p>Or for Python 3 <a href="http://docs.python.org/py3k/library/stdtypes.html#old-string-formatting-operations" rel="noreferrer">the equivalent old formatting</a> or the <a href="http://docs.python.org/py3k/library/string.html#string-formatting" rel="noreferrer">newer style formatting</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using the newer version <code>''.format</code> (also remember to specify how many digit after the <code>.</code> you wish to display, this depends on how small is the floating number). See this example:</p>
<pre><code>&gt;&gt;&gt; a = -7.1855143557448603e-17
&gt;&gt;&gt; '{:f}'.format(a)
'-0.000000'
</code></pre>
<p>as shown above, default is 6 digits! This is not helpful for our case example, so instead we could use something like this:</p>
<pre><code>&gt;&gt;&gt; '{:.20f}'.format(a)
'-0.00000000000000007186'
</code></pre>
<h2>Update</h2>
<p>Starting in Python 3.6, this can be simplified with the new <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">formatted string literal</a>, as follows:</p>
<pre><code>&gt;&gt;&gt; f'{a:.20f}'
'-0.00000000000000007186'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With newer versions of Python (2.6 and later), you can use <a href="http://docs.python.org/library/string.html#format-string-syntax"><code>''.format()</code></a> to accomplish what @SilentGhost suggested:</p>
<pre><code>'{0:f}'.format(x/y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will work for any exponent:</p>
<pre><code>def getExpandedScientificNotation(flt):
    str_vals = str(flt).split('e')
    coef = float(str_vals[0])
    exp = int(str_vals[1])
    return_val = ''
    if int(exp) &gt; 0:
        return_val += str(coef).replace('.', '')
        return_val += ''.join(['0' for _ in range(0, abs(exp - len(str(coef).split('.')[1])))])
    elif int(exp) &lt; 0:
        return_val += '0.'
        return_val += ''.join(['0' for _ in range(0, abs(exp) - 1)])
        return_val += str(coef).replace('.', '')
    return return_val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is using <a href="https://stackoverflow.com/a/45604186/8282282">Captain Cucumber's answer</a>, but with 2 additions.</p>
<p>1) allowing the function to get non scientific notation numbers and just return them as is (so you can throw a lot of input that some of the numbers are 0.00003123 vs  3.123e-05 and still have function work.</p>
<p>2) added support for negative numbers. (in original function,  a negative number would end up like 0.0000-108904 from -1.08904e-05)</p>
<pre><code>def getExpandedScientificNotation(flt):
    was_neg = False
    if not ("e" in flt):
        return flt
    if flt.startswith('-'):
        flt = flt[1:]
        was_neg = True 
    str_vals = str(flt).split('e')
    coef = float(str_vals[0])
    exp = int(str_vals[1])
    return_val = ''
    if int(exp) &gt; 0:
        return_val += str(coef).replace('.', '')
        return_val += ''.join(['0' for _ in range(0, abs(exp - len(str(coef).split('.')[1])))])
    elif int(exp) &lt; 0:
        return_val += '0.'
        return_val += ''.join(['0' for _ in range(0, abs(exp) - 1)])
        return_val += str(coef).replace('.', '')
    if was_neg:
        return_val='-'+return_val
    return return_val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If it is a <code>string</code> then use the built in <code>float</code> on it to do the conversion for instance:
<code>print( "%.5f" % float("1.43572e-03"))</code>
answer:<code>0.00143572</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to SG's answer, you can also use the Decimal module:</p>
<pre><code>from decimal import Decimal
x = str(Decimal(1) / Decimal(10000))

# x is a string '0.0001'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using 3.6.4, I was having a similar problem that randomly, a number in the output file would be formatted with scientific notation when using this:</p>
<pre><code>fout.write('someFloats: {0:0.8},{1:0.8},{2:0.8}'.format(someFloat[0], someFloat[1], someFloat[2]))
</code></pre>
<p>All that I had to do to fix it was to add 'f':</p>
<pre><code>fout.write('someFloats: {0:0.8f},{1:0.8f},{2:0.8f}'.format(someFloat[0], someFloat[1], someFloat[2]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since this is the top result on Google, I will post here after failing to find a solution for my problem. <strong>If you are looking to format the display value of a float object and have it remain a float - not a string, you can use this solution:</strong></p>
<p>Create a new class that modifies the way that float values are displayed.</p>
<pre><code>from builtins import float
class FormattedFloat(float):

    def __str__(self):
        return "{:.10f}".format(self).rstrip('0')
</code></pre>
<p>You can modify the precision yourself by changing the integer values in <code>{:f}</code></p>
</div>
<span class="comment-copy">1/10000 = 0.0001 = 1.00000e-04</span>
<span class="comment-copy">@AA, assuming it was a typo in the assignment statement, I've corrected it.</span>
<span class="comment-copy">I knew it was pretty straightforward - thank you very much!</span>
<span class="comment-copy">I suggest clarifying your statement to say, "you manage the <i>display</i> of precision yourself."  The actual (Python internal) precision isn't changed, as is often done in other languages.</span>
<span class="comment-copy">Is this really what you want? I don't:  <code>&gt;&gt;&gt; print('{:f}'.format(0.000000123))</code> <code>0.000000</code></span>
<span class="comment-copy">@duality you might need to specify precision. <code>'{0:.10f}'</code></span>
<span class="comment-copy">it turns to scientific notation for values smaller than 1e-6</span>
<span class="comment-copy">@SilentGhost -- Ah, you're correct!</span>
