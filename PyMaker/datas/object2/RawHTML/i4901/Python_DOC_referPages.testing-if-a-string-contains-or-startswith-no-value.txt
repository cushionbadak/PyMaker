<div class="post-text" itemprop="text">
<p>I am not able to understand the behavior of the <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>str.startswith</code></a> method.</p>
<p>If I execute <code>"hello".startswith("")</code> it returns True. Ideally it doesn't starts with empty string.</p>
<pre><code>&gt;&gt;&gt; "hello".startswith("")
True
</code></pre>
<p>The documentation states: </p>
<blockquote>
<p>Return <code>True</code> if string starts with the prefix, otherwise return <code>False</code>. <code>prefix</code> can also be a tuple of prefixes to look for. </p>
</blockquote>
<p>So how does the function work?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.startswith()</code> can be expressed in Python code as:</p>
<pre><code> def startswith(source, prefix):
    return source[:len(prefix)] == prefix
</code></pre>
<p>It tests if the first <code>len(prefix)</code> characters of the source string are equal to the prefix. If you pass in a prefix of length zero, that means the first 0 characters are tested. A string of length 0 is always equal to any other string of length 0.</p>
<p>Note that this applies to <em>other</em> string tests too:</p>
<pre><code>&gt;&gt;&gt; s = 'foobar'
&gt;&gt;&gt; '' in s
True
&gt;&gt;&gt; s.endswith('')
True
&gt;&gt;&gt; s.find('')
0
&gt;&gt;&gt; s.index('')
0
&gt;&gt;&gt; s.count('')
7
&gt;&gt;&gt; s.replace('', ' -&gt; ')
' -&gt; f -&gt; o -&gt; o -&gt; b -&gt; a -&gt; r -&gt; '
</code></pre>
<p>Those last two demos, counting the empty string or replacing the empty string with something else, shows that you can find an empty string at every position in the input string.</p>
</div>
<div class="post-text" itemprop="text">
<p>A string <code>p</code> is a prefix of a string <code>s</code> if <code>s = p + x</code>, so the empty string is a prefix of all strings (it's like 0, <code>s = 0 + s</code>).</p>
</div>
<span class="comment-copy">All strings start with an empty string, though</span>
<span class="comment-copy">@cricket_007 technically, with an arbitrary number of empty strings :)</span>
<span class="comment-copy">@pvg: Python counts the empty string just once, luckily. :-) Try <code>str.count()</code> and you'll see that there are exactly <code>len(s) + 1</code> empty strings in any given input string <code>s</code>.</span>
