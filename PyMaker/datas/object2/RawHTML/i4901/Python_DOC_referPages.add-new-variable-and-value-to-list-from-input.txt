<div class="post-text" itemprop="text">
<p>Ok so I have looked around and seen similar questions and have tried a few different things.  Here is what I am trying to accomplish.  I have a list of variables with float values already assigned to them.  I want to be able to ask the user to chose a variable from list and add float values to existing variable or create a new variable and assign it a value and add it to the list. (I'm using python 3)</p>
<p>Here is what I have currently</p>
<pre><code>A = 0.00
B = 0.00
C = 0.00

List = [A,B,C]
while True:
    Var = int(input("add to A(0), B(1), C(2) or add new varible (100)"))
    if Var != 100:
        amount = float(input("amount"))
        List[Var] = List[Var] + amount
    if Var == 100:
        newVar = input("Var name, amount").split(' ')
        newVar[0] = float(newVar[1])
        List = List + newVar[0]
</code></pre>
<p>So I am trying to get the user to name the variable and define the amount and then add it to this list.  When I run it I get this message</p>
<pre><code>Traceback (most recent call last):
  File "/Users/jmc/Documents/test.py", line 14, in &lt;module&gt;
    newVar[0] = float(newVar[1])
IndexError: list index out of range
</code></pre>
<p>The adding to existing function part is fine I believe.  I would really appreciate if someone could tell where I am going wrong or if this is a ridiculous way of going about doing this.  If it is, what is a more efficient way?</p>
</div>
<div class="post-text" itemprop="text">
<p>As long as input contains a space, this program should not throw an <code>IndexError</code>.
If your input does not contain a space, splitting by <code>' '</code> would create a list of length 1, containing the entire input string, which would then cause an <code>IndexError</code> if you try to access the element at index <code>1</code>.</p>
<p>A solution would be to assign each variable to its own <code>input</code>:</p>
<pre><code>var_name = input("Var name: ")
amount = float(input("Amount: "))
</code></pre>
<p>However, in its current form your code will throw a <code>TypeError</code> on the next line:</p>
<pre><code>TypeError: can only concatenate list (not "float") to list
</code></pre>
<p>You need to convert the <code>amount</code> variable to a list to concatenate. You can do this using square brackets:</p>
<pre><code>List = List + [newVar[0]]
</code></pre>
<p>Although this would now work, as you want to associate a name with the values you store in the list, you may want to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dictionary</code></a>. This allows you to access the names of stored values rather than hardcoding them in your output string using <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer"><code>dict.keys()</code></a></p>
<p>However, you will then need to check that if the user chooses to add to a new name, it is not already a key in the dictionary as the previous value would be overwritten.</p>
<p>A starting point for the program could look like this:</p>
<pre><code>List = {"A" : 0.00,
        "B" : 0.00,
        "C": 0.00}

while True:
    names = List.keys()
    Var = input("Add to {} or add new variable (100): ".format(", ".join(names)))

    if Var in names:
        amount = float(input("Amount: "))
        List[Var] += amount

    elif Var == "100":
        var_name = input("Var name: ")

        if var_name not in List:
            amount = float(input("Amount: "))
            List[var_name] = amount
        else:
            print("That name is already in use.")

    else:
        pass
</code></pre>
<p>Although you probably don't want to name your dictionary <code>List</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from textwrap import dedent


def add_new_variable(variables):
    name = input('Enter a name for the new variable: ')
    value = get_number(
        msg='Enter a value for the new variable: ',
        num_type=float
    )
    return variables + [(name, value)]


def add_to_existing_variable(variables):
    result = list(variables)
    for i, (k, v) in enumerate(variables, start=1):
        print('{}) {} = {}'.format(i, k, v))
    variable = get_number(
        msg='Choose a variable to add to: ',
        num_type=int,
        minimum=1,
        maximum=len(variables)
    )
    amount = get_number(
        msg='Enter a value to add: ',
        num_type=float
    )
    prev_name, prev_value = result[variable - 1]
    result[variable - 1] = (prev_name, prev_value + amount)
    return result


def get_menu_option():
    menu_options = dedent("""
        1) Add to existing variable
        2) Add a new variable
    """)
    print(menu_options)
    return get_number(
        msg='Choose an option: ',
        num_type=int,
        minimum=1,
        maximum=2
    )


def get_number(msg, num_type, minimum=float('-inf'), maximum=float('inf')):
    while True:
        try:
            number = num_type(input(msg))
        except ValueError:
            pass
        else:
            if minimum &lt;= number &lt;= maximum:
                return number


def main():
    variables = [
        ('A', 0),
        ('B', 0),
        ('C', 0)
    ]
    while True:
        menu_option = get_menu_option()
        if menu_option == 1:
            variables = add_to_existing_variable(variables)
        else:
            variables = add_new_variable(variables)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Why are you trying to define a new variable ('Var name') from user input?</span>
<span class="comment-copy">I'm curious as to how this code produces an error on line 14. <code>Var</code> is taken as input, so is always a string, as you say you are using python 3. Therefore it will never equal 100, so this if statement should not execute?</span>
<span class="comment-copy">Trelzevir: I am sorry I stripped down the code that I was actually using to make it more plaint. I forgot to add the int() in front of the input() I will edit.</span>
<span class="comment-copy">Stephen Rauch: I am trying to write a simple program to keep track of how much time I do certain things.  So I would have a list of things I regularly do and I could add time to them if I wish.  Or if I do something not on the list, I could add the new activity and time to the list.</span>
<span class="comment-copy">So I have implemented this into my code  and it does exactly as I want.  The only issue is that now I can't do calculations with the variables.  I attempted to extract the keys but the dictionary keys does not support indexing.  Should I try and use the first advice you submitted so that the new categories are saved as variables or is there a way to do calculations with these numbers from within the key dictionary</span>
<span class="comment-copy">You should be able to access the values in the dictionary using the key name: <code>dictionary[key]</code>, e.g. <code>List["A"]</code> in the program above would return <code>0.00</code>. You can perform calculations on them as normal using this method to access them.</span>
<span class="comment-copy">Thank you very much!  This was very informative.</span>
