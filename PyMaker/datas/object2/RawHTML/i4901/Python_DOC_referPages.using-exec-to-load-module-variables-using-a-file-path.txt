<div class="post-text" itemprop="text">
<p>A textbook suggests I should be able to do this:</p>
<pre><code>d = {}
exec("C://Users//Dave//Desktop//Bot//bot_config_data.py", globals(), d)
File "&lt;string&gt;", line 1   C://Users//Dave//Desktop//Bot//bot_config_data.py
                           ^
SyntaxError: invalid syntax
</code></pre>
<p>I can do this: </p>
<pre><code>d = {}
exec('from bot_config_data import price_data', globals(), d)
</code></pre>
<p>But, I would like to do the former. </p>
<p>I'm trying to write a method which overrides config data from various files. </p>
<p>Am I completely off base here?</p>
<p><strong>Update</strong>
The book was quite misleading. It posted part of the code, the result of the complete code block, and then gave the remainder. As I was referencing, rather than working through it cover to cover, I tripped over myself. </p>
<p>This is the code I now have:</p>
<pre><code>data = {}
file = 'C:\\Users\\Dave\\Desktop\\Bot\\bot_config_data.py'
with open(file) as f:
    code = compile(f.read(), file, "exec")
    exec(code, globals(), data)
price_data = data["price_data"]
</code></pre>
<p><strong>Update2</strong>
Using Mad Physicist's answer below, my code would be:</p>
<pre><code>from importlib.util import spec_from_loader, module_from_spec
from importlib.machinery import SourceFileLoader

filepath = 'C:\\Users\\Dave\\Desktop\\Bot\\bot_config_data.py'
module_data = os.path.basename(filepath)
spec = spec_from_loader(module_data, SourceFileLoader(module_data, filepath))
bot_config_data = module_from_spec(spec)
spec.loader.exec_module(bot_config_data)
price_data = bot_config_data.price_data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are completely off-base and the textbook is giving you some very bad advice.</p>
<p><a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a> runs Python code. As in Python statements, not the name of a file. From the docs:</p>
<blockquote>
<p><strong>exec</strong>(<em>object</em>[, <em>globals</em>[, <em>locals</em>]])</p>
<p>This function supports dynamic execution of Python code. <em>object</em> must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs)</p>
</blockquote>
<p>That is why your second statement works fine. If you want to run a Python module, import it. If you need to import using a dynamic name instead of a hard-coded <code>import</code> statement, you can use <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>importlib.import_module</code></a>:</p>
<pre><code>price_data = importlib.import_module('bot_config_data').price_data
</code></pre>
<p>This will run the whole import machinery for you, including ensuring that <code>bot_config_data</code> ends up in <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer"><code>sys.modules</code></a>.</p>
<p>If you really need something even fancier, you can use the <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer"><code>__import__</code></a> machinery. <code>__import__</code> is the under-the-hood implementation of the <code>import</code> statement:</p>
<pre><code>d = {}
bot_config_data = __import__('bot_config_data', locals=d, from_list=['price_data'])
price_data = bot_config_data.price_data
</code></pre>
<p>If you want full control over the process, you can use the low-level machinery described here: <a href="https://stackoverflow.com/q/67631/2988730">How to import a module given the full path?</a>. In particular see my answer to that question, since it describes how to load random text files as Python scripts: <a href="https://stackoverflow.com/a/43602557/2988730">https://stackoverflow.com/a/43602557/2988730</a>:</p>
<pre><code>from importlib.util import spec_from_loader, module_from_spec
from importlib.machinery import SourceFileLoader 

spec = spec_from_loader("bot_config_data", SourceFileLoader("bot_config_data", "C:/Users/Dave/Desktop/Bot/bot_config_data.py"))
bot_config_data = module_from_spec(spec)
spec.loader.exec_module(bot_config_data)
price_data = bot_config_data.price_data
</code></pre>
<p>Final note: It looks like you blindly converted all the <code>\\</code> to <code>//</code> in your path. Forward slashes do not need to be escaped, so you only need single forward slashes. If you want to avoid escaping your backslashes, put <code>r</code> in front of your string to make it a <a href="https://stackoverflow.com/a/2081708/2988730">raw string</a>.</p>
</div>
<span class="comment-copy"><i>"But, I would like to do the former."</i> Why? What's wrong with the import statement?</span>
<span class="comment-copy">@Aran-Fey. It's not a good way to do it, although using <code>exec</code> is the real problem here.</span>
<span class="comment-copy">@Dave. I suspect that your textbook is not very good. Which one is it?</span>
<span class="comment-copy">'Mastering Object-orientated Programming' by Steven F.Lott. I suspect the mistake might be on my part. I'll double check.</span>
<span class="comment-copy">I think you need to strip off the extension and you probably don't need anything more complicated than load_module.</span>
<span class="comment-copy">The "bot_config_data" argument should be "bot_config_data.price_data".</span>
<span class="comment-copy">@Dave. Where? <code>bot_config_data</code> is a module, <code>price_data</code> is an attribute of that module. You'll end up having to load the whole module even if you want just the one attribute anyway.</span>
<span class="comment-copy">The arg to SourceFileLoader()? Otherwise, it throws an ImportError?</span>
<span class="comment-copy">Fixed. There was an extra price_data in the spec</span>
