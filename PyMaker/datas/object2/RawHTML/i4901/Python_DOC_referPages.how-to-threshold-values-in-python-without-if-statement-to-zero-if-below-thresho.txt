<div class="post-text" itemprop="text">
<p>I want to do an inline comparison without writing 'If statements' in Python.  If the value meets the threshold condition, it should be unchanged.  If it doesn't the value should be set to 0.</p>
<p>In Python I don't seem to be allowed to apply a boolean operator to a list directly. In Matlab, it's convenient that 'True' gives a '1' and 'False' gives a zero in array operations. This is matlab-like, but won't work in python (maybe would with numpy?). Pseudocode example:</p>
<pre><code>a = [1.5, 1.3, -1.4, -1.2]
a_test_positive = a&gt;0 # Gives [1, 1, 0, 0]
positive_a_only = a.*a&gt;0 
</code></pre>
<p>Desired result: </p>
<pre><code>positive_a_only&gt;&gt; [1.5, 1.3, 0, 0]
</code></pre>
<p>What is the best way to do this in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need - </p>
<pre><code>a = [1.5, 1.3, -1.4, -1.2]
positive_a_only = [i if i&gt;0 else 0 for i in a]

print(positive_a_only)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[1.5, 1.3, 0, 0]
</code></pre>
<p>This is known as a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehension</a>
According to your input and expected output, this is a "pythonic" way to do this</p>
<blockquote>
<p>List comprehensions provide a concise way to create lists. Common
  applications are to make new lists where each element is the result of
  some operations applied to each member of another sequence or
  iterable, or to create a subsequence of those elements that satisfy a
  certain condition.</p>
</blockquote>
<p>You use case is kind of made for this :)</p>
</div>
<div class="post-text" itemprop="text">
<p>It may worth looking at <a href="http://www.numpy.org/" rel="nofollow noreferrer"><code>Numpy</code></a> if you are working with numerical arrays.</p>
<pre><code>import numpy as np

a = np.array([1.5, 1.3, -1.4, -1.2])
a[a &lt; 0] = 0
# [ 1.5  1.3  0.   0. ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best answer I have found so far is to enumerate and loop through the array, using the python operator for the threshold or comparison logic.</p>
<p>The key is to multiply the index element by the logical comparison.  e.g.</p>
<pre><code>a = 1.5
a_positive = a * (a&gt;0)
print(a)
</code></pre>
<p>Returns the value of 1.5 as expected, and returns 0 if a is negative.  </p>
<p>Here's the example then with the full list:</p>
<pre><code>a = [1.5, 1.3 -1.4, -1.2]
for i, element in enumerate(a):
     a[i] = element*(element&gt;0)

print(a)
[1.5, -0.0, -0.0]
</code></pre>
<p>Hope that helps someone!</p>
</div>
<span class="comment-copy">Clean!  I like it.  Coming over from Matlab it seemed like there should be a clean way to do this, and for some reason I couldn't immediately find this answer on stack overflow.  Thanks again</span>
<span class="comment-copy">Thanks Delgan - that's exactly how I'm used to doing this in Matlab!</span>
