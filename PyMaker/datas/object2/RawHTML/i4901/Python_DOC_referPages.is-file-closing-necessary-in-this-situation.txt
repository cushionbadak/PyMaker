<div class="post-text" itemprop="text">
<p>if I have:</p>
<pre><code>fdata = open(pathf, "r").read().splitlines()
</code></pre>
<p>Will the file automatically close after getting the data? If not how can I close it since fdata is not a handle?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Use</p>
<pre><code>with open(pathf, "r") as r:
    fdata = r.read().splitlines()
# as soon as you leave the with-scope, the file is autoclosed, even if exceptions happen.
</code></pre>
<p>Its not only about auto-closing, but also about correct closing in case of exceptions.</p>
<p>Doku: <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="noreferrer">methods of file objects</a></p>
<blockquote>
<p>It is good practice to use the <code>with</code> keyword when dealing with file
  objects. The advantage is that the file is properly closed after its
  suite finishes, even if an exception is raised at some point. Using
  <code>with</code> is also much shorter than writing equivalent <code>try-finally</code> blocks:   </p>
<p>If you’re not using the <code>with</code> keyword, then you should call <code>f.close()</code>
  to close the file and immediately free up any system resources used by
  it.<br/>
  If you don’t explicitly close a file, Python’s garbage collector
  will eventually destroy the object and close the open file for you,
  but the file may stay open for a while. Another risk is that different
  Python implementations will do this clean-up at different times.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The file will be automatically closed during exit or garbage collection. But as best practices matter, the better approach would be to use a context manager such as below:</p>
<pre><code>with open(pathf, "r") as f:
    fdata = f.read().splitlines()
</code></pre>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use this:</p>
<pre><code>with open(pathf, 'r') as f:
     fdata = f.read().splitlines()
</code></pre>
<p>Then you don't have to close your file, it is done automatically. It's always good practice to have your files closed after you are done using them (reduces the risk of memory leaks, etc...)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Will the file automatically close after getting the data? </p>
</blockquote>
<p>In your example, <code>fdata</code> is actually a list, not a file object. The file object is what returned by <code>open()</code>.</p>
<p>If you had a name bound to a file object or <code>fdata</code> were a file object, the answer would be <em>it depends</em>.</p>
<p>If the file object, does not have any reference present i.e. it's reference count reaches 0, it will be garbage collected and hence will be destroyed in the process.</p>
<blockquote>
<p>If not how can I close it since fdata is not a handle?</p>
</blockquote>
<p><em>You can't as <code>fdata</code> is not a file object (like you mentioned) and you don't have any reference to the file object returned by <code>open()</code> either.</em></p>
<p>If you had a file object, you could explicitly call <code>close()</code> on it:</p>
<pre><code>f_object.close()
</code></pre>
<p><strong>Better yet</strong>, as the <code>open</code> is a context manager, use the <code>with ...</code> construct to let it close automatically upon the block end:</p>
<pre><code>with open('file.txt') as f_object:
    ...
</code></pre>
<p>One added advantage is that the file will be closed in case of an exception too. If you are interested, check the <code>__enter__</code> and <code>__exit__</code> special methods of <code>open</code>.</p>
</div>
<span class="comment-copy">It will, but you don't know <i>when</i>, exactly.</span>
<span class="comment-copy">@chepner Thanks, I will use the code provided by the other users. Since I will open like 4 thousand files, I better don't do this haha.</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/a/2404671/5858851">this answer</a> which explains that the file will not be closed if an exception is thrown.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2404430/does-filehandle-get-closed-automatically-in-python-after-it-goes-out-of-scope">Does filehandle get closed automatically in Python after it goes out of scope?</a></span>
<span class="comment-copy">As is, the file handle cannot be explicitly closed, because there is no reference to it (<code>fdata</code> is the result of <code>splitlines()</code>, not the file reference).</span>
<span class="comment-copy">Thank you, even though I know about close it wasn't possible to use it since in the code fdata is just an array populated with the content of a file and not a handle so when tried it throws error</span>
<span class="comment-copy">@chepner Misread. Edited.</span>
<span class="comment-copy">@SJPRO Check my edits.</span>
