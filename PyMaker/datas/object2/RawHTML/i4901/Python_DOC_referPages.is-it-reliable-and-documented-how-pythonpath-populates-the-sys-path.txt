<div class="post-text" itemprop="text">
<p>On my machine, the values from <code>PYTHONPATH</code> appear to get inserted in <code>sys.path</code>:</p>
<ul>
<li>beginning at index 1</li>
<li>order preserved</li>
<li>de-duplicated</li>
</ul>
<p>For example, with <code>PYTHONPATH=/spam:/eggs:/spam</code> and then checking in <code>python -m site</code>, I get a result like:</p>
<pre><code>sys.path = [
    something,
    '/spam',
    '/eggs',
    more,
    stuff,
    after
]
</code></pre>
<p>It seems to be the same behaviour on Python 2 and Python 3.  The question is, how much of this handling of <code>PYTHONPATH</code> is documented / reliable, and what if any might be different on other platforms?  Is this baked into the interpreter, or is handled by <code>site.py</code> and/or in danger of being "tweaked" by sysadmins?</p>
<p>I can't see it explained in the documentation <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer">here</a>, it just says <code>sys.path</code> is "augmented" (and, contrary to the documentation, non-existent directories do not appear to be silently ignored).</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's go down the list.</p>
<hr/>
<blockquote>
<ul>
<li>beginning at index 1</li>
</ul>
</blockquote>
<p>That's reliable. As stated in the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer">PYTHONPATH docs</a>,</p>
<blockquote>
<p>The default search path is installation dependent, but generally
  begins with prefix/lib/pythonversion (see PYTHONHOME above). It is
  always appended to PYTHONPATH.</p>
<p>An additional directory will be inserted in the search path in front
  of PYTHONPATH as described above under Interface options. The search
  path can be manipulated from within a Python program as the variable
  sys.path.</p>
</blockquote>
<p>One directory is inserted before PYTHONPATH, which may be the current directory, the script directory, or some other directory depending on how you ran Python. Other directories are appended. The <a href="https://docs.python.org/3/library/site.html" rel="noreferrer"><code>site</code> module</a> will also add some modules to <code>sys.path</code>, but <code>site</code> appends too:</p>
<blockquote>
<p>Importing this module will append site-specific paths to the module search path and add a few builtins...</p>
</blockquote>
<hr/>
<blockquote>
<ul>
<li>order preserved</li>
</ul>
</blockquote>
<p>I don't think this is explicitly documented anywhere, but search path order is important, and changing it is a backward compatibility break I don't think they would make lightly.</p>
<hr/>
<blockquote>
<ul>
<li>de-duplicated</li>
</ul>
</blockquote>
<p>That's an undocumented effect of the <code>site</code> module. It won't happen if you run Python with the <code>-S</code> flag that disables <code>site</code>. You can see the code in <a href="https://github.com/python/cpython/blob/v3.6.4/Lib/site.py#L115" rel="noreferrer"><code>site.removeduppaths</code></a></p>
</div>
<span class="comment-copy">Non-existent directories are silently ignored <i>when importing.</i></span>
<span class="comment-copy">@kindall Yes, I figured they meant that (since the underlying filesystem can change during runtime).  But the wording is ambiguous.</span>
<span class="comment-copy">I'm pretty sure the answer is just no, it's not documented.</span>
<span class="comment-copy">If you want the path to be consistent, there is nothing at all stopping you from setting it up however you want.</span>
