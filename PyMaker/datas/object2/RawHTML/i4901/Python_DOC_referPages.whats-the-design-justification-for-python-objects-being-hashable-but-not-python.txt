<div class="post-text" itemprop="text">
<p>Python dicts/lists are not hashable but python objects are. This seems odd to me, particular because python dicts and python objects are nearly identical from a mutability stand point.</p>
<p>I have a couple of theories:</p>
<ul>
<li>Two dicts can be equal without having the same <code>id</code>, and python enforces that equal instances must have the same hash. Objects don't have this behavior by default, but they can if <code>__eq__</code> is overriden</li>
<li>dicts and lists are designed to be mutated. Having them hash to the same value before and after mutating is a foot-gun</li>
</ul>
<p>What was the design justification for this language feature?</p>
<p>Update from comments:
<a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-hashable</a></p>
<p>This explains <em>why</em> dicts/lists aren't hashable since</p>
<blockquote>
<p>Hashable objects which compare equal must have the same hash value.</p>
</blockquote>
<p>But why was this rule decided on?</p>
</div>
<div class="post-text" itemprop="text">
<p>Good <a href="https://hynek.me/articles/hashes-and-equality/" rel="nofollow noreferrer">article</a> that explains hashable and equality problem.
In general, I would say that decision to keep default object hashable was made because it covers more cases and still quite cheap. When doing the same for dicts and lists will produce unexpected result most of the time.</p>
</div>
<span class="comment-copy">Python dicts/lists <i>are</i> python objects</span>
<span class="comment-copy">which makes their inability to be hashed even stranger, no?</span>
<span class="comment-copy">Your second bullet is closer to the main reason, it is too easy for mutating the object to change the hash value <a href="https://stackoverflow.com/questions/2671376/hashable-immutable">stackoverflow.com/questions/2671376/hashable-immutable</a></span>
<span class="comment-copy">It makes your question unclear IMO. Basically hashability <i>approximates</i> immutability in Python</span>
<span class="comment-copy">Arbitrary python objects are hashable, <code>hash(object())</code> returns a value while <code>hash({})</code> is an exception</span>
