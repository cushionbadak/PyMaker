<div class="post-text" itemprop="text">
<p>I was wondering the best way to find if a key exist in python dictionary, not visiting the whole list of keys again and again. I am thinking of try except. Is there any better way? </p>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <code>in</code> operator:</p>
<pre><code>print('some_key' in my_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Pythonic way would be be to follow the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> (Easier to Ask for Forgivenes than Permission) principle.</p>
<p>That means assuming the key is in the dict, and catching the exception if it's not, like so:</p>
<pre><code>my_dict = {"key": "value"}
try:
    print my_dict["badkey"]
except KeyError:
    print "No such key found"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @Mureinik mentioned, you can just use:</p>
<pre><code>key_name in dict
</code></pre>
<p>to return either true or false. However, if you desperately wanted to use try and except, you could use:</p>
<pre><code>try:
    x = dict[key_name]
except KeyError:
    # Handle error here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sorry for the confusion guys. I know that I can use simply key_name in dict.keys(). But I have to search all the keys to know if that key exist. So I was thinking about try except like the above one. My question is if this is good practice to use try except? Is there any other way that will serve the same purpose of not visiting all the keys? </p>
</div>
<span class="comment-copy">You'll need to give a bit more context. The way to find if a key is in a dictionary is <code>key in dict</code>, so it's not at all clear what you're referring to with try and except and visiting lists.</span>
<span class="comment-copy">I'm a bit lost on "not visiting the whole list of keys again and again", please show the code. Otherwise, you can use <code>my_dict.get(key)</code> which returns <code>None</code> if the key doesn't exist</span>
<span class="comment-copy">checking if a key is in a dictionary is constant time O(1)</span>
<span class="comment-copy">If you're considering try catch to assign a default value, just use what @roganjosh recommended and use the default keyword arg: <code>x = foo_dict.get(key, default='some default')</code></span>
