<div class="post-text" itemprop="text">
<p>I wrote a tool in bash that I am trying to convert to python for the sake of expanding my skills beyond beginner but am hitting a snag due to the way I originally formatted the command.</p>
<p>The tool restarts a service on a bunch of servers in a cluster that are usually named HOSTNAME01-08 so the original tool takes a hostname, cluster range, service, and action:</p>
<p><code>$ prog.sh  hostname cluster_range httpd status (ex. of range would be 01-04)</code></p>
<p>It also has a second function that will do a port check only</p>
<p><code>$ prog.sh -p port_number hostname cluster_range</code></p>
<p>The second commmand does not require the arguments of service and action. This is where I am hitting my issue.</p>
<p>In converting it to python I am trying to use argparse for all the options and commands as I really like its ability to output clean usage and help information but the second function of the original tool is making this a bit harder.</p>
<p>Using argparse if i set the '-p' flag that works fine and all, but its still requring the last two arguments that are not needed or it fails with "too few arguments"</p>
<p>I thought maybe subparsers would be the way to go, but subparsers don't seem to work with flag style names (think i read somewhere it strips it?). The other issue is if I create the subparser for '-p' even with a proper name (say portcheck) it will only work if I create a subparser for the other task as well (call it main-task), it wont accept having base arguments for the main parser and separate arguments for just the subparser. So i would be forced to use commands like</p>
<pre><code>$ prog.py  main-task  hostname  range  service  action
$ prog.py  portcheck  port_num  hostname  range
</code></pre>
<p>Is there a way to use the optional '-p' flag and trigger it to not need the other two arguments? The best solution I can think of is to check for the -p flag and if true to set those two variables to empty strings, is it possible to adjust those arg values in an if statement? I could set those two arguments to default as empty to start with but then I couldn't error check if they don't provide all the arguments for the base function defeating the purpose of argparse. I originally started using sys.argv but was thinking argparse would be more pythonic and a good lesson to try as a beginner. Perhaps sys.argv may be the best way to go?</p>
<p>argparse code I currently have:</p>
<pre><code>parser = argparse.ArgumentParser(
    usage=None,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent('''\
    Usage:
    drtt BASE-HOSTNAME  CLS-RANGE  SERVICE  ACTION
    ex. drtt HOSTNAME 01-08 sshd status

    For port check only:
    drtt [-p, --port-number] PORT-NUMBER  BASE-HOSTNAME  CLS-RANGE
    ex. drtt -p 1234 HOSTNAME 01-08'''))

parser.add_argument('base_hostname', help='Host name only')
parser.add_argument('--port-number', '-p', type=int, metavar='PORT-NUMBER', help="Port number to check if listening")
parser.add_argument('cls_range', help='Number of hosts in cluster (written as start-finish ex. 01-16)')
parser.add_argument('service', help='Service/Process to perform an action on')
parser.add_argument('action', help='start, stop status or restart')
args = parser.parse_args()
</code></pre>
<p>Sorry for the wordy post</p>
</div>
<div class="post-text" itemprop="text">
<p>You can set the <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer"><code>nargs</code></a> of the last two arguments to <code>'?'</code> (0 or 1) and manually check that they are both present if <code>-p</code> is not:</p>
<pre><code>if args.port_number is None and (args.service is None or args.action is None):
    parser.print_help()
    parser.error("Missing mandatory arguments sevice and action")
</code></pre>
</div>
<span class="comment-copy">Maybe I am misunderstanding your question. But I think you already have hit on the correct answer.  when you had prog.py  main-task and prog.py  portcheck, that's certainly how most other command line tools work, for example git.</span>
<span class="comment-copy">Simpler parsers handle the flagged arguments by name, and treat everything else as a list of extras which you parser yourself.  You can approximate that with <code>parse_known_args</code> and variable <code>nargs</code> (like <code>*</code> and '?').  But you loose that expressiveness of the help.  <code>-p</code> cannot alter the <code>requiredness</code> of positionals.</span>
<span class="comment-copy">That actually works perfectly, thank you! Only issue now is i get some extra usage output when it hits the error:   <code>usage: argcheck.py [-h] [--port-number PORT-NUMBER]           base_hostname cls_range [service] [action]</code>   ---TRUNCATED, it shows my help screen info here---   <code>usage: argcheck.py [-h] [--port-number PORT-NUMBER]                      base_hostname cls_range [service] [action]   argcheck.py: error: Missing mandatory arguments sevice and action</code>   Any way to set it to only print my custom usage instead of the other usage when it fails?</span>
<span class="comment-copy">@Tony I'm not sure to understand what you mean. You can start by removing the call to <code>print_help</code> to avoid redundancy.</span>
<span class="comment-copy">OK great I'll play around with it but thanks for helping me solve my issue!</span>
<span class="comment-copy">@Tony Not sure if I should also add it to the answer since the question is specifically about <code>argparse</code>. But you might also want to check out <a href="https://github.com/docopt/docopt" rel="nofollow noreferrer"><code>docopt</code></a> that build a parser based on your documented usage. It should handle your specific case better than <code>argparse</code>.</span>
