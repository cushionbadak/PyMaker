<div class="post-text" itemprop="text">
<p>I have list <code>p1</code>:</p>
<pre><code>p1 = [
    {'id': 1, 'area': 5},
    {'id': 2, 'area': 6},
    {'id': 3, 'area': 10},
    {'id': 4, 'area': 6},
    {'id': 5, 'area': 6},
    {'id': 6, 'area': 6},
    {'id': 7, 'area': 4},
    {'id': 8, 'area': 4}
]
</code></pre>
<p>And I need to separate this list by <code>area</code> value, like this (<code>p2</code>):</p>
<pre><code>p2 = {
    4: [
        {'id': 7, 'area': 4},
        {'id': 8, 'area': 4}
    ],
    5: [
        {'id': 1, 'area': 5}
    ],
    6: [
        {'id': 2, 'area': 6},
        {'id': 4, 'area': 6},
        {'id': 5, 'area': 6},
        {'id': 6, 'area': 6}
    ],
    10: [
        {'id': 3, 'area': 10}
    ]
}
</code></pre>
<p>My solution is:</p>
<pre><code>areas = {x['area'] for x in p1}
p2 = {}
for area in areas:
    p2[area] = [x for x in p1 if x['area'] == area]
</code></pre>
<p>It seems to work, but is there any better and more "pythonic" solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>groupby</code> you get</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; f = lambda t: t['area']
&gt;&gt;&gt; {i: list(b) for i, b in itertools.groupby(sorted(p1, key=f), key=f)}
</code></pre>
<p>Gives</p>
<pre><code>{4: [{'area': 4, 'id': 7}, 
     {'area': 4, 'id': 8}],
 5: [{'area': 5, 'id': 1}],
 6: [{'area': 6, 'id': 2},
     {'area': 6, 'id': 4},
     {'area': 6, 'id': 5},
     {'area': 6, 'id': 6}],
 10: [{'area': 10, 'id': 3}]}
</code></pre>
<p><strong>edit</strong>: If you don't like using lambdas you can also do, as suggested by bro-grammer</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; f = operator.itemgetter('area')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

result = defaultdict(list)

for i in p1:
    result[i['area']].append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, use one of the grouping idioms. Using a vanilla <code>dict</code>:</p>
<pre><code>In [15]: p1 = [
    ...:     {'id': 1, 'area': 5},
    ...:     {'id': 2, 'area': 6},
    ...:     {'id': 3, 'area': 10},
    ...:     {'id': 4, 'area': 6},
    ...:     {'id': 5, 'area': 6},
    ...:     {'id': 6, 'area': 6},
    ...:     {'id': 7, 'area': 4},
    ...:     {'id': 8, 'area': 4}
    ...: ]

In [16]: p2 = {}

In [17]: for d in p1:
    ...:     p2.setdefault(d['area'], []).append(d)
    ...:

In [18]: p2
Out[18]:
{4: [{'area': 4, 'id': 7}, {'area': 4, 'id': 8}],
 5: [{'area': 5, 'id': 1}],
 6: [{'area': 6, 'id': 2},
  {'area': 6, 'id': 4},
  {'area': 6, 'id': 5},
  {'area': 6, 'id': 6}],
 10: [{'area': 10, 'id': 3}]}
</code></pre>
<p>Or more neatly, using a <code>defaultdict</code>:</p>
<pre><code>In [23]: from collections import defaultdict

In [24]: p2 = defaultdict(list)

In [25]: for d in p1:
    ...:     p2[d['area']].append(d)
    ...:

In [26]: p2
Out[26]:
defaultdict(list,
            {4: [{'area': 4, 'id': 7}, {'area': 4, 'id': 8}],
             5: [{'area': 5, 'id': 1}],
             6: [{'area': 6, 'id': 2},
              {'area': 6, 'id': 4},
              {'area': 6, 'id': 5},
              {'area': 6, 'id': 6}],
             10: [{'area': 10, 'id': 3}]})
</code></pre>
</div>
<span class="comment-copy">Are you interested in a solution involving pandas?</span>
<span class="comment-copy">@COLDSPEED No, I want it pure :)</span>
<span class="comment-copy">hint: use <code>pprint</code> (together with the optional <code>width</code> parameter) to get nicely formatted output.</span>
<span class="comment-copy">Good one. You can also try <code>operator.itemgetter</code> instead of lambda.</span>
<span class="comment-copy">why <code>{i: list(b) for i, b in itertools.groupby(sorted(p1), key=f)}</code> and <code>{i: list(b) for i, b in itertools.groupby(p1, key=f)}</code> produce two different result just  the addition of sorted function is there.In second case <code>id:2</code> is not in result @bro-grammer</span>
<span class="comment-copy"><code>itertools.groupby</code> collects contagious elements with the same key. By sorting the list you make the similar items contagious.</span>
