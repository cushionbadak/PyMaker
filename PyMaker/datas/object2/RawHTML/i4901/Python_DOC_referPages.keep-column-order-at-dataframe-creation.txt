<div class="post-text" itemprop="text">
<p>I'd like to keep the columns in the order they were defined with <code>pd.DataFrame</code>. In the example below, <code>df.info</code> shows that <em>GroupId</em> is the first column and <code>print</code> also prints <em>GroupId</em>.<br/>
I'm using Python version 3.6.3</p>
<pre><code>import numpy as np
import pandas as pd

df = pd.DataFrame({'Id' : np.random.randint(1,100,10), 
                       'GroupId' : np.random.randint(1,5,10) })
df.info()
print(df.iloc[:,0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>, as below. Note that the OrderedDict object takes a list of tuples as an input.</p>
<pre><code>from collections import OrderedDict

df = pd.DataFrame(OrderedDict([('Id', np.random.randint(1,100,10)), 
                               ('GroupId', np.random.randint(1,5,10))]))

#    Id  GroupId
# 0  37        4
# 1  10        2
# 2  42        1
# 3  97        2
# 4   6        4
# 5  59        2
# 6  12        2
# 7  69        1
# 8  79        1
# 9  17        1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unless you're using python-3.6+ where dictionaries are ordered, this just isn't possible with a (standard) dictionary. You will need to <code>zip</code> your items together and pass a list of tuples:</p>
<pre><code>np.random.seed(0)

a = np.random.randint(1, 100, 10)
b = np.random.randint(1, 5, 10)
</code></pre>
<p></p>
<pre><code>df = pd.DataFrame(list(zip(a, b)), columns=['Id', 'GroupId'])
</code></pre>
<p>Or,</p>
<pre><code>data = [a, b]
df = pd.DataFrame(list(zip(*data)), columns=['Id', 'GroupId']))
</code></pre>
<p></p>
<pre><code>df
   Id  GroupId
0  45        3
1  48        1
2  65        1
3  68        1
4  68        3
5  10        2
6  84        3
7  22        4
8  37        4
9  88        3
</code></pre>
</div>
