<div class="post-text" itemprop="text">
<p>I started out with a simple example to compare Python code to c#, my more usual language:</p>
<pre><code>s=''
for x in range(20,1,-3):
    print(x)
    s+="%d%s" % (x,":")
print(s[:-1])
</code></pre>
<p>to simply output: 20:17:14:11:8:5:2</p>
<p>then I thought about the shortest, not necessarily the most efficient way of doing it and came up with this after reading about list comprehension.</p>
<pre><code>print(''.join([("%d%s" % (x,":")) for x in range(20,1,-3)])[:-1])
</code></pre>
<p>Is there an even shorter way? I know it's a trivial issue, but really it's about learning about all the features of Python and how it differs from other languages.</p>
<p>thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an alternative (Python 3.6+ only):</p>
<pre><code>print(':'.join(f'{i}' for i in range(20, 1, -3)))
</code></pre>
<p>As already stated though, your aim shouldn't be to make your code as concise as possible. Readability is more important.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use </p>
<pre><code>&gt;&gt;&gt; ":".join(map(str, range(20,1,-3)))
&gt;&gt;&gt; '20:17:14:11:8:5:2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the final slice is just to remove an unused <code>:</code>, so how about:</p>
<pre><code>print(':'.join(map(str, range(20, 1, -3))))
</code></pre>
<p>Python is generally not about compactness but readability. </p>
</div>
<span class="comment-copy">Thanks, I started learning 3.4, didn't know about f. But I don't know how the for loop is working inside the join, I'm only used to list comprehension?</span>
<span class="comment-copy">I still find myself using <code>'{}'.format(i)</code> instead out of habit, but thought this was a good place to mention the newer <code>f'{i}'</code> syntax since you specifically mentioned learning about all features of the Python language, and this is quite a new one.</span>
<span class="comment-copy">The for in this case is a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>, which works just like a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> but produces a generator (a kind of iterator) instead of building a list.</span>
<span class="comment-copy">While I like f-strings, I think <code>str(i)</code> is a lot clearer here.</span>
<span class="comment-copy">Fair comment, there are certainly better uses for f-strings than this.</span>
<span class="comment-copy">you even <i>golfed-out</i> the spaces xD</span>
<span class="comment-copy">@Ev.Kounis Updated :D</span>
<span class="comment-copy">golfed-out? is this some kind of meta language for Python developers :)</span>
<span class="comment-copy">It's a reference to code golf, in which the goal is to solve some function with as short a program as possible.</span>
<span class="comment-copy">thanks. plus points for using map reduce :)</span>
<span class="comment-copy">The most annoying change in Python 3, imho, is when they moved <code>reduce</code> from <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer">built in functions</a> to <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">functools</a>.</span>
