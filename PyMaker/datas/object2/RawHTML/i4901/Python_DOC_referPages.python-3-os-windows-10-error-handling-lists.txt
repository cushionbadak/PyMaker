<div class="post-text" itemprop="text">
<p>I tried to test a code written in python 2 in free access <a href="https://github.com/zhurak/kaggle-prudential" rel="nofollow noreferrer">here</a>. When I run the code I encountered the following error related to <code>list</code></p>
<p>Many thanks for helps<br/>
Jane
(I'm a newbee in python)</p>
<pre><code>Traceback       
    `(C:\Users\myusername\Anaconda3) C:\Users\myusername\Documents\DSSP7\Projet 
        Insurance\kaggle-prudential-master\code&gt;python.exe logRegression.py
        Traceback (most recent call last):
        File "logRegression.py", line 98, in &lt;module&gt;
        y_1, y_2 = train_ohd.iloc[X_1]['Response'], train_ohd.iloc[X_2]['Response']
        File "C:\Users\myusername\Anaconda3\lib\site-
        packages\pandas\core\indexing.py", line 1328, in __getitem__
        return self._getitem_axis(key, axis=0)
        File "C:\Users\myusername\Anaconda3\lib\site-
        packages\pandas\core\indexing.py", line 1738, in _getitem_axis
        return self._get_list_axis(key, axis=axis)
        File "C:\Users\myusername\Anaconda3\lib\site-
        packages\pandas\core\indexing.py", line 1715, in _get_list_axis
        return self.obj.take(key, axis=axis, convert=False)
        File "C:\Users\myusername\Anaconda3\lib\site-
        packages\pandas\core\generic.py", line 1928, in take
        convert=True, verify=True)
        File "C:\Users\myusername
        \Anaconda3\lib\site-packages\pandas\core\internals.py", line 3998, in take
        else np.asanyarray(indexer, dtype='int64'))
        File "C:\Users\myusername
        Anaconda3\lib\site-packages\numpy\core\numeric.py", line 583, in asanyarray
        return array(a, dtype, copy=False, order=order, subok=True)
        TypeError: int() argument must be a string, a bytes-like object or a number, 
        not 'filter' 
</code></pre>
<p><strong>logRegression.py</strong> </p>
<pre><code>'import pandas as pd 
from sklearn.linear_model import LogisticRegression
import json
from sklearn import metrics
from label_decoders import *

config = json.load(open('settings.json'))
train = pd.read_csv(config['train'])
test = pd.read_csv(config['test'])

# combine train and test
all_data = train.append(test)

# Preprocess data

# create any new variables    
all_data['Product_Info_2_char'] = all_data.Product_Info_2.str[0]
all_data['Product_Info_2_num'] = all_data.Product_Info_2.str[1]

# factorize categorial variables
all_data['Product_Info_2'] = pd.factorize(all_data['Product_Info_2'])[0]
all_data['Product_Info_2_char'] = pd.factorize(all_data['Product_Info_2_char'])[0]
all_data['Product_Info_2_num'] = pd.factorize(all_data['Product_Info_2_num'])[0]

## combine features
# BMI by age
all_data['BMI_Age'] = all_data['BMI'] * all_data['Ins_Age']

## sum features
#  Med keyword sum
med_keyword_columns = all_data.columns[all_data.columns.str.startswith('Medical_Keyword_')]
all_data['Med_Keywords_Count'] = all_data[med_keyword_columns].sum(axis=1)

# handle missing values : eliminate missing values
## Use -1 for NA
all_data.apply(lambda x: sum(x.isnull()),1)
all_data['countna'] = all_data.apply(lambda x: sum(x.isnull()),1)
all_data.fillna(-1, inplace=True)

#fix the dtype of the label column(convert it to integer)
all_data['Response'] = all_data['Response'].astype(int)

# split train and test
train_ohd = all_data[all_data['Response']&gt;0].copy()
test_ohd = all_data[all_data['Response']&lt;1].copy()

# convert data 
features=train_ohd.columns.tolist()
features = [x.replace('=','_') for x in features]
features = [x.replace('_','i') for x in features]
train_ohd.columns = features
features_t=test_ohd.columns.tolist()
features_t = [x.replace('=','i') for x in features_t]
features_t = [x.replace('_','i') for x in features_t]
test_ohd.columns = features_t

features.remove("Id")
features.remove("Response")

train_ohd['lr1'] = [0]*train_ohd.shape[0]
train_ohd['lr2'] = [0]*train_ohd.shape[0]
train_ohd['lr3'] = [0]*train_ohd.shape[0]
train_ohd['lr4'] = [0]*train_ohd.shape[0]
train_ohd['lr5'] = [0]*train_ohd.shape[0]
train_ohd['lr6'] = [0]*train_ohd.shape[0]
train_ohd['lr7'] = [0]*train_ohd.shape[0]
train_ohd['lr8'] = [0]*train_ohd.shape[0]
train_ohd['lr9'] = [0]*train_ohd.shape[0]
train_ohd['lr10'] = [0]*train_ohd.shape[0]
train_ohd['lr11'] = [0]*train_ohd.shape[0]
train_ohd['lr12'] = [0]*train_ohd.shape[0]
train_ohd['lr13'] = [0]*train_ohd.shape[0]


l = train_ohd.shape[0]
ind_list = [(range(0,l//10), filter(lambda x: x not in range(0,l//10), range(0,l))), 
            (range(l//10,l//10*2), filter(lambda x: x not in range(l//10,l//10*2), range(0,l))),
            (range(l//10*2,l//10*3), filter(lambda x: x not in range(l//10*2,l//10*3), range(0,l))),
            (range(l//10*3,l//10*4), filter(lambda x: x not in range(l//10*3,l//10*4), range(0,l))),
            (range(l//10*4,l//10*5), filter(lambda x: x not in range(l//10*4,l//10*5), range(0,l))),
            (range(l//10*5,l//10*6), filter(lambda x: x not in range(l//10*5,l//10*6), range(0,l))),
            (range(l//10*6,l//10*7), filter(lambda x: x not in range(l//10*6,l//10*7), range(0,l))),
            (range(l//10*7,l//10*8), filter(lambda x: x not in range(l//10*7,l//10*8), range(0,l))),
            (range(l//10*8,l//10*9), filter(lambda x: x not in range(l//10*8,l//10*9), range(0,l))),
            (range(l//10*9,l), filter(lambda x: x not in range(l//10*9,l), range(0,l)))]



ld = [labels_decoder1,labels_decoder2,labels_decoder3,labels_decoder4,labels_decoder5,labels_decoder6,labels_decoder7,
      labels_decoder8,labels_decoder9,labels_decoder10,labels_decoder11,labels_decoder12,labels_decoder13]

# train the model
i = 0
for l in ld:
    i = i + 1    

    for j in range(10):

        X_1, X_2 = ind_list[j][1], ind_list[j][0]
        y_1, y_2 = train_ohd.iloc[X_1]['Response'], train_ohd.iloc[X_2]['Response']

# get preds based on train data      
        lr = LogisticRegression(random_state=1)
        lr.fit(train_ohd[features].iloc[X_1],l(y_1))
        train_ohd['lr%s' % (i)].iloc[X_2] = lr.predict_proba(train_ohd[features].iloc[X_2]).T[1]


train_ohd.to_csv(config['train_lr'],index=0)

y = train_ohd['Response']
#print(y)  mon rajout pour afficher en local

# test the model
i = 0
for l in ld:
    i = i + 1    

# Pas de y dans le test data

# get preds based on test data
###1
    lr = LogisticRegression(random_state=1)
    lr.fit(train_ohd[features],l(y)), i
    test_ohd['lr%s' % (i)] = lr.predict_proba(test_ohd[features]).T[1]

test_ohd.to_csv(config['test_lr'],index=0)
#y_pred = test_ohd   A SPEFICIER ce que l'on doit afficher cf kaggle ET A PRINT
#y_pred = test_ohd.to_csv(config['test_lr'],index=0)
`    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue here stems from a different behaviour of the <code>filter</code> method. You can see that in <a href="https://stackoverflow.com/questions/41666977/python-2-vs-python-3-difference-in-behavior-of-filter">this question</a>, or read up on it in the <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">python3</a> or <a href="https://docs.python.org/2.7/library/functions.html#filter" rel="nofollow noreferrer">python2</a> docs.</p>
<p>In short: In python 2 it generates a <strong>list</strong>, so <code>ind_list[:][1]</code> are all lists of integers.</p>
<p>However, in python 3 it generates a <code>generator</code>, which is why you get the output <code>TypeError: int() argument must be a string, a bytes-like object or a number, not 'filter'</code>, since <code>ind_list[:][1]</code> all contain filter objects.</p>
<p>You can either convert all the outputs of the filter commands in the creation of <code>ind_list</code> to a list:</p>
<pre><code>list(filter(lambda x: x not in range(0,l//10))
</code></pre>
<p>or use python2. But I am guessing there is a specific reason for you to use python3</p>
<p><strong>Hint:</strong></p>
<p>Since you are using anaconda, you can simply do</p>
<pre><code>conda create -n py27 python=2.7 sklearn pandas numpy
</code></pre>
<p>followed by</p>
<pre><code>activate py27
</code></pre>
<p>in an anaconda prompt and it will give you a virtual environment with python2 to use</p>
</div>
<span class="comment-copy">Please read <a href="https://stackoverflow.com/help/on-topic">What topics can I ask about here?</a>: "Questions seeking debugging help ("why isn't this code working?") must include the desired behavior, a specific problem or error and the shortest code necessary to reproduce it in the question itself. Questions without a clear problem statement are not useful to other readers."</span>
<span class="comment-copy">You say that the code is written for python2. Any reason why you are running it with python3? Have you tried running it with python2?</span>
<span class="comment-copy">Hello, I tried both and thanks very much</span>
<span class="comment-copy">I added list before filter as suggested i got a message      (C:\Users\myusername\Anaconda3) C:\Users\myusername\Documents\DSSP7\Projet Insurance\kaggle-prudential-master\code&gt;python.exe logRegression.py C:\Users\myusername\Anaconda3\lib\site-packages\pandas\core\indexing.py:179: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame  See the caveats in the documentation: <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/â€¦</a>   self._setitem_with_indexer(indexer, value)   And no other output   Any help to solve this? Thx</span>
