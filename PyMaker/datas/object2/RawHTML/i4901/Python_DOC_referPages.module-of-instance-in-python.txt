<div class="post-text" itemprop="text">
<p>Using <code>__name__</code> inside a method references the module where the class was defined.</p>
<p>Is there a way instead for an object to get the module where it has been instantiated?</p>
</div>
<div class="post-text" itemprop="text">
<p>So - Python's dynamism allows a function to check the frame object where it was called from. .</p>
<p>It would be better if you could pass the module explicitly to the class constructor, though:</p>
<pre><code>class MyObject:
    def __init__(self, module):
         self.module = module
         ...
</code></pre>
<p>And in the other files:</p>
<pre><code>m  = MyObject(__name__)
</code></pre>
<p>But, as I mentioned in the first line, you can get to the code calling
a module - save if you have an specialized metaclass, the code calling one class's <code>__init__</code> is where the object is instantiated. So you can write:</p>
<pre><code>import inspect

class MyObject:
    def __init__(self, module):
         caller_frame = inspect.currentframe().f_back
         self.module = caller_frame.f_globals.get("__name__", "&lt;unknown module&gt;")
         ...
</code></pre>
<p>The Frame object is an internal Python object that keeps the execution state of a code context while the program is being run. It contain references to globals and locals variables available to that frame, as well as code object, current source line, and so on. The topmost frame (0) is the current frame in execution  - the second one to the top (1) is the direct caller of the current function/method. The frame <code>.f_globals</code> attribute is a direct reference to the globals dictionary - the same that would be returned if one would call <code>globals()</code> inside that frame.</p>
</div>
<span class="comment-copy">you could use <code>__name__</code> inside the init of the object to store this exact information for later.</span>
<span class="comment-copy">What is your goal with this, what are you trying to accomplish?</span>
<span class="comment-copy">Python doesn't keep track of where an instance was instantiated. If you need such functionality, you have to implement it yourself (e.g. by passing the module to the constructor). That said, I really can't imagine a reason why anyone would need to do this. Sounds like a code smell to me.</span>
<span class="comment-copy">It's for this: <a href="https://github.com/andybrice/pypework" rel="nofollow noreferrer">github.com/andybrice/pypework</a> A library which adds a functional pipeline syntax to Python.  So it is quite a dirty metaprogramming hack, pushing what the language is designed to do. I have an object which picks up the identifiers of functions and creates object wrappers for them.  At the moment, <code>__name__</code> is passed to the constructor. But it would be nice if this wasn't necessary.</span>
<span class="comment-copy">By the way, if you are writing code to try to convey functional stuff into Python, you really should get acquainted with the Frame object. Take a look at <a href="https://github.com/jsbueno/stackfull" rel="nofollow noreferrer">github.com/jsbueno/stackfull</a> for more examples.</span>
<span class="comment-copy">It's good practice to delete the frame object variable when you're done with it, because otherwise you <a href="https://docs.python.org/3/library/inspect.html#the-interpreter-stack" rel="nofollow noreferrer">risk it creating a reference cycle</a>. It'd also be better to avoid <code>sys._getframe</code>, since <a href="https://docs.python.org/3/library/sys.html#sys._getframe" rel="nofollow noreferrer">it's not guaranteed to exist</a>. You can use <code>inspect.currentframe().f_back</code> instead.</span>
<span class="comment-copy">All objects in Python can create a "reference cycle" - if you keep references to then. Putting a <code>del</code> to a variable jsut because it references a Frame is no different from <code>del</code>ing any other variable: normally a  redundant statement. (unless you are dealing with Frame objects inside a generator or async function)</span>
<span class="comment-copy">Ahh, that all seems to work. Thank you. I had previously tried to use <code>inspect</code> on frames but clearly was doing something wrong.</span>
<span class="comment-copy">There are projects dealign with meta programing that does this in a regular basis. Just include some serious unit testing so that one knows in advance if it works in a particular Python implementation.</span>
