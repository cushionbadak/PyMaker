<div class="post-text" itemprop="text">
<p>I am getting a <code>AttributeError: 'int' object has no attribute 'find_all'</code> exception, even though the value of <code>table</code> isn't empty:</p>
<pre><code>from bs4 import BeautifulSoup as soup
from urllib.request import urlopen as uReq
data = []
Url = 'http://www.svcengg.com/course_offered.php'
pageHtml = uReq(Url)
soup = soup(pageHtml,"html.parser")
table = soup.find("table", { "width" : "470","height":"212"})
#print(table) 
for x in table:
    table_body = x.find('tbody')
    rows = table_body.find_all('tr')
    for tr in rows:
        cols = tr.find_all('td')
        for td in cols:
            data.append(td.text.strip())
    print(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are iterating over a single <code>table</code> element:</p>
<pre><code>for x in table:
</code></pre>
<p>Iteration over an element will include <em>text</em> nodes, as well as other elements. For the given URL, the first element in <code>table</code> is a string:</p>
<pre><code>&gt;&gt;&gt; list(table)[0]
'\n'
</code></pre>
<p>Calling <code>find()</code> on a string produces an integer (as you are calling the <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer"><code>str.find()</code> method</a>, not the BeautifulSoup <code>Element.find()</code> method). </p>
<p>So <code>table_body = x.find('tbody')</code> assigns <code>-1</code> to <code>table_body</code>, because there is no such string <code>tbody</code> in the string <code>'\n'</code>. And integers have no <code>find_all()</code> method.</p>
<p>Don't use iteration over a single element. You already found the table, there is just no such table, or 1:</p>
<pre><code>if table is not None:
    table_body = table.find('tbody')
</code></pre>
<p>Note however, that there is <em>no <code>&lt;tbody&gt;</code> element in the HTML input</em>. Browsers insert a standard <code>&lt;tbody&gt;</code> element if it is missing, but BeautifulSoup does not. Even if there was a <code>&lt;tbody&gt;</code> element in the HTML, you can still look directly for <code>&lt;tr&gt;</code> table rows from the table element too. Skip looking for the <code>tbody</code>, there is no need.</p>
<p>This works:</p>
<pre><code>if table is not None:
    rows = table.find_all('tr')
    for tr in rows:
        cols = tr.find_all('td')
        for td in cols:
            data.append(td.text.strip())
</code></pre>
<p>For the given URL, <code>data</code> then contains:</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(data)
['Electronics  &amp; Communication Engineering',
 '120',
 'Computer Science &amp; Engineering',
 '120',
 'Information Science &amp; Engineering',
 '60',
 'Mechanical Engineering',
 '120',
 'Electrical &amp; Electronics Engineering',
 '60',
 'Civil Engineering',
 '120']
</code></pre>
</div>
<span class="comment-copy">That must mean that <code>tr</code> or <code>table_body</code> is a number. Have you done any debugging?</span>
