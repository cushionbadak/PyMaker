<div class="post-text" itemprop="text">
<p>Hi im trying to write a function using if/elif , i'm having trouble when trying to execute the final cursor function after the elif. I think my indent is wrong and i been trying to find where the mistake at over a day now :</p>
<pre><code>def api_report(request):
    params = request.GET
    if params["type"] == 'revenue':
        sql = get_revenue_query(params)

    elif params["type"] == 'order_count':
        sql = get_order_created_count(params)

    elif params["type"] == 'product_count':
        sql = get_product_count(params)

    elif params["type"] == 'order_card_created_count':
        sql = get_order_card_created_count(params)

    elif params["type"] == 'product_count':
        sql = get_product_count(params)

    elif params["type"] == 'card':
        sql = get_card_query(params)

    elif params["type"] == 'order_not_card_created_count':
        sql = get_order_not_card_created_count(params)

    elif params["type"] == 'product':
        get_product_report(params)

    elif params["type"] == 'order_rate_by_district':
        sql = get_order_rate_by_district(params)

        with connection.cursor() as cursor:
            cursor.execute(sql)
            rows = cursor.fetchall()
            data = []
            for row in rows:
                data.append(OrderRateDataEntry(row[0], row[1], row[2]))
        serializer = OrderRateDataEntrySerializer(data, many=True)
        return JsonResponse(serializer.data, safe=False)

    with connection.cursor() as cursor:
        cursor.execute(sql)
        rows = cursor.fetchall()
        data = []
        for row in rows:
            data.append(TimeSeriesDataEntry(row[0], row[1]))
    serializer = TimeSeriesDataEntrySerializer(data, many=True)
    return JsonResponse(serializer.data, safe=False)
</code></pre>
<p>The error:</p>
<pre><code>cursor.execute(sql)  UnboundLocalError: 
    local variable 'sql' referenced before assignment
</code></pre>
<p>The <code>elif params["type"] == 'product':</code> and <code>elif params["type"] == 'order_rate_by_district':</code> have they own function to execute, I want the other conditions to jump to the last cursor function at the end of the code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Once you run the program, this is what I assume happenes (Read #)
</p>
<pre><code>def api_report(request):
    params = request.GET
    if params["type"] == 'revenue': # False so sql is not made, move to next elif
        sql = get_revenue_query(params)

    elif params["type"] == 'order_count': # False so sql is not made, move to next elif
        sql = get_order_created_count(params)

    elif params["type"] == 'product_count': # False so sql is not made, move to next elif
        sql = get_product_count(params)

    elif params["type"] == 'order_card_created_count': # False so sql is not made, move to next elif
        sql = get_order_card_created_count(params)

    elif params["type"] == 'product_count': # False so sql is not made, move to next elif
        sql = get_product_count(params)

    elif params["type"] == 'card': # False so sql is not made, move to next elif
        sql = get_card_query(params)

    elif params["type"] == 'order_not_card_created_count': # False so sql is not made, move to next elif
        sql = get_order_not_card_created_count(params)

    elif params["type"] == 'product': # False so sql is not made, move to next elif
        get_product_report(request) # P.S There is also a chance that if this is run then sql variable will also not be made!

    elif params["type"] == 'order_rate_by_district':  # This is also false so code leaves.
        sql = get_order_rate_by_district(params)

        with connection.cursor() as cursor:
            cursor.execute(sql)
            rows = cursor.fetchall()
            data = []
            for row in rows:
                data.append(OrderRateDataEntry(row[0], row[1], row[2]))
        serializer = OrderRateDataEntrySerializer(data, many=True)
        return JsonResponse(serializer.data, safe=False)

        pass
    # When the code is here it still didn't made variable sql. Thus so will crashes when refere to variable sql as it wasn't yet created
    with connection.cursor() as cursor:
        cursor.execute(sql) # sql was never made here and thus doesn't exist. Code crashes here.
        rows = cursor.fetchall()
        data = []
        for row in rows:
            data.append(TimeSeriesDataEntry(row[0], row[1]))
    serializer = TimeSeriesDataEntrySerializer(data, many=True)
    return JsonResponse(serializer.data, safe=False)
</code></pre>
<p>Maby before the first if statement make and empty sql variable. (or whatever the default value you prefere)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Issue</strong></p>
<p><code>local variable 'sql' referenced before assignment</code> means that <code>sql</code> hasn't been assigned yet when you're trying to use it with <code>cursor.execute(sql)</code>.</p>
<p>It is the case when <code>params["type"] == 'product'</code> or when none of your if/elif checks are true. For instance, <code>if params["type"]</code> is <code>foo</code>, <code>sql</code> will not be assigned.</p>
<p><strong>Solution</strong></p>
<p>Assign a value to sql when <code>params["type"] == 'product'</code></p>
<p>Use an <code>else</code> statement to either assign a value to sql or raise an error when <code>params["type"]</code> is none of your expected strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should rearrange your if sequence to ignore cases when <code>sql</code> is empty. Otherwise you could just add <code>sql = 'some default value'</code> on top of it, but it's already hard to read.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can give sql a default value in begining:</p>
<pre><code>def api_report(request):
    params = request.GET
    sql=''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After i changed the </p>
<pre><code> elif params["type"] == 'product':
      get_product_report(request)
</code></pre>
<p>to</p>
<pre><code> elif params["type"] == 'product': 
      return get_product_report(params)
</code></pre>
<p>it worked because the get_product_report is it own function so there wasn't any return result to param = 'product' condition so it's wrong from the product param line (return None)</p>
</div>
<span class="comment-copy">the first elif should be if? if your code runs into none of the elifs you never define sql and at the sixth last line in your code you call sql</span>
<span class="comment-copy">should i add "pass" to the last elif ? so the other conditions can use the sql ?</span>
<span class="comment-copy">if <code>params["type"] == 'product'</code> you will get the error because <code>sql</code> is not defined. Is that the desired behavior? What do you want your function to do in this case? it cannot do any <code>sql</code> cursor action, do you want the function to exit and return something?</span>
<span class="comment-copy">You can add an <code>else</code> statement at the end. With just a sequence of <code>if</code> and <code>elif</code>s it is still possible that <code>sql</code> would end up being undefined.</span>
<span class="comment-copy">it's an option but it's an api so i don't want it to output any data if there are no params pass in</span>
<span class="comment-copy">I think that you want to replace the entire 2nd connection.cursro()... with an else statement: "else: data=[]" which will return in no data if all the statements before are false. Is this what you mean?</span>
<span class="comment-copy">the second sql grab is to execute for other conditions except product and order_rate_by_district</span>
<span class="comment-copy">What is the condition you want to be executed? Is it in params variable?</span>
<span class="comment-copy">yes all the params variable will use the assigned sql to execute 2nd sql grab which is the last 6 lines of the code (except for those 2 conditions which i speak of)</span>
<span class="comment-copy">the thing is i params["type"] == 'product' include in the def with other condition but don't i want to use sql  for that params</span>
<span class="comment-copy">This will still crash if <code>params["type"]</code> is none of the choices. It will also crash if there is no "type" GET parameter. So if your URL is "/api/report" then just calling "/api/report" will raise an exception and calling "/api/report?type=blabla" will also raise an exception. Not good design.</span>
