<div class="post-text" itemprop="text">
<p>I have a dask DataFrame like below.</p>
<pre class="lang-py prettyprint-override"><code>&gt; print(df_user_preferences)
       user_id  food_id
int64  int64    int64
...
</code></pre>
<p>This dataframe represents the Many-to-Many relation between <code>user</code> and <code>food</code>.
There are also two dataframes, <code>df_users</code> and <code>df_foods</code>, and these are master data of users and foods. </p>
<p>And now, I want to gain dataframe like below.</p>
<pre class="lang-py prettyprint-override"><code># index is user_id.
&gt; print(df_spread_user_preferences)
       food_1   food_2   food_3   food_4  ...
int64  boolean  boolean  boolean  boolean ...
...
</code></pre>
<p>These columns with the prefix <code>food_</code> ends with <code>food_id</code> and values of them represent the relation between <code>user</code> and <code>food</code>.</p>
<p>I tried below code, but this is too slow.
How can I improve this code to perform more effectively?</p>
<pre class="lang-py prettyprint-override"><code>df_spread_user_preferences = df_users.assign(**{
    f"food_{food_id}": lambda df, food_id: df.apply(
      lambda row, food_id: len(df_user_preferences[(
          df_user_preferences.food_id == food_id
      ) &amp; (
          df_user_preferences.user_id == row.name
      )]) &gt; 0,
      axis=1,
      meta='boolean',
      food_id=food_id
    ) for _, food_id in df_foods.index.to_series().iteritems()
}).drop(df_users.columns)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df_users = pd.DataFrame({'user_id': [1,2]})
df_foods = pd.DataFrame({'food_id': [11,22,33,44]})
df_user_preferences = pd.DataFrame({'user_id' : [1,1], 'food_id' : [11,22]})

# Create a dataframe with columns user_ids and all food_ids.
# All food_ids of all the users are assigned False
df_spread_user_preferences = pd.DataFrame({
        **{'user_id': df_users['user_id']}, 
        **{"food_{0}".format(i):False for i in df_foods['food_id']}})
# Find the food preference of the users and create a list 
foods = df_user_preferences.groupby(['user_id'])['food_id'].apply(list).apply(
    lambda x: ["food_{0}".format(i) for i in x]).reset_index()
# For each user get the preference list and reset them to True 
for _, r in foods.iterrows():
     df_spread_user_preferences.loc[
df_spread_user_preferences['user_id'] == r['user_id'], r['food_id']] = True

print (df_spread_user_preferences)
</code></pre>
<p><code>
    food_11     food_22     food_33     food_44     user_id
0   True        True        False       False       1
1   False       False       False       False       2</code></p>
<p>You can set the index to user_id using <code>df_spread_user_preferences.set_index('user_id')</code></p>
</div>
