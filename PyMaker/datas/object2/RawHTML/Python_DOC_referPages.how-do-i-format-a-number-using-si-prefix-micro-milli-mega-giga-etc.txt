<div class="post-text" itemprop="text">
<p>I have numbers that range from very small to very large, and I'd like to format them using "engineering notation" with a magnitude and a suffix:</p>
<pre><code>n.nnn S
</code></pre>
<p>where 1.0 &lt;= n.nnn &lt; 1000., and S is a <a href="https://www.nist.gov/pml/weights-and-measures/metric-si-prefixes" rel="nofollow noreferrer">metric (SI) prefix</a>.  So:</p>
<pre><code>1234.5e+13 =&gt; 12.35P
12345678 =&gt; 12.35M
1234 =&gt; 1.234K
1.234 =&gt; 1.234
0.1234 =&gt; 123.4m
1234.5e-16 =&gt; 1.235f
</code></pre>
<p>etc.  How can I do that, e.g. using Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>(Posted here in Q&amp;A style because I keep re-inventing this code, and others might find it helpful.  Feel free to tweak it if you see improvements...)</p>
<p>Here is one implementation that lets you choose a long suffix (e.g. "peta") or a short suffix (e.g. "P"), and also lets you choose how many total digits are displayed (i.e. the precision):</p>
<pre><code>def si_classifier(val):
    suffixes = {
        24:{'long_suffix':'yotta', 'short_suffix':'Y', 'scalar':10**24},
        21:{'long_suffix':'zetta', 'short_suffix':'Z', 'scalar':10**21},
        18:{'long_suffix':'exa', 'short_suffix':'E', 'scalar':10**18},
        15:{'long_suffix':'peta', 'short_suffix':'P', 'scalar':10**15},
        12:{'long_suffix':'tera', 'short_suffix':'T', 'scalar':10**12},
        9:{'long_suffix':'giga', 'short_suffix':'G', 'scalar':10**9},
        6:{'long_suffix':'mega', 'short_suffix':'M', 'scalar':10**6},
        3:{'long_suffix':'kilo', 'short_suffix':'K', 'scalar':10**3},
        0:{'long_suffix':'', 'short_suffix':'', 'scalar':10**0},
        -3:{'long_suffix':'milli', 'short_suffix':'m', 'scalar':10**-3},
        -6:{'long_suffix':'micro', 'short_suffix':'u', 'scalar':10**-6},
        -9:{'long_suffix':'nano', 'short_suffix':'n', 'scalar':10**-9},
        -12:{'long_suffix':'pico', 'short_suffix':'p', 'scalar':10**-12},
        -15:{'long_suffix':'femto', 'short_suffix':'f', 'scalar':10**-15},
        -18:{'long_suffix':'atto', 'short_suffix':'a', 'scalar':10**-18},
        -21:{'long_suffix':'zepto', 'short_suffix':'z', 'scalar':10**-21},
        -24:{'long_suffix':'yocto', 'short_suffix':'y', 'scalar':10**-24}
    }
    exponent = int(math.floor(math.log10(abs(val))/3.0)*3)
    return suffixes.get(exponent, None)

def si_formatter(value):
    '''
    Return a triple of scaled value, short suffix, long suffix, or None if
    the value cannot be classified.
    '''
    classifier = si_classifier(value)
    if classifier == None:
        # Don't know how to classify this value
        return None

    scaled = value / classifier['scalar']
    return (scaled, classifier['short_suffix'], classifier['long_suffix'])

def si_format(value, precision=4, long_form=False, separator=''):
    '''
    "SI prefix" formatted string: return a string with the given precision
    and an appropriate order-of-3-magnitudes suffix, e.g.:
        si_format(1001.0) =&gt; '1.00K'
        si_format(0.00000000123, long_form=True, separator=' ') =&gt; '1.230 nano'
    '''
    scaled, short_suffix, long_suffix = si_formatter(value)

    if scaled == None:
        # Don't know how to format this value
        return value

    suffix = long_suffix if long_form else short_suffix

    if abs(scaled) &lt; 10:
        precision = precision - 1
    elif abs(scaled) &lt; 100:
        precision = precision - 2
    else:
        precision = precision - 3

    return '{scaled:.{precision}f}{separator}{suffix}'.format(
        scaled=scaled, precision=precision, separator=separator, suffix=suffix)
</code></pre>
</div>
