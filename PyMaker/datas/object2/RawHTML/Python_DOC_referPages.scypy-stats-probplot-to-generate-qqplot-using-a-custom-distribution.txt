<div class="post-text" itemprop="text">
<p>I am trying to get scipy.stats.probplot to plot a QQplot with a custom distribution. Basically I have a bunch of numeric variables (all numpy arrays) and I want to check distributional differences with a QQplot.</p>
<p>My dataframe <code>df</code> looks something like this:</p>
<pre><code>         some_var  another_var
1        16.5704   3.3620
2        12.8373  -8.2204
3        8.1854    1.9617
4        13.5683   1.8376
5        8.5143    2.3173
6        6.0123   -7.7536
7        9.6775   -4.3874
...      ...       ...
189499   11.8561  -8.4887
189500   10.0422  -4.6228
</code></pre>
<p>According to the <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.probplot.html" rel="nofollow noreferrer">reference</a>:</p>
<p><strong>dist</strong> : <em>str or stats.distributions instance, optional</em></p>
<p>Distribution or distribution function name. The default is ‘norm’ for a normal probability plot. Objects that look enough like a stats.distributions instance (i.e. they have a <code>ppf</code> method) are also accepted.</p>
<p>Of course a numpy array doesn't have the <code>ppf</code> method, so when I try the following:</p>
<pre><code>import scipy.stats as stats
stats.probplot(X[X.columns[1]].values, dist=X[X.columns[2]].values, plot=pylab)
</code></pre>
<p>I get the following error:</p>
<p><code>AttributeError: 'numpy.ndarray' object has no attribute 'ppf'</code></p>
<p>(N.B. if I do not use the <code>.values</code> method I would get the same error but for a 'Series' object instead of 'numpy.ndarry')</p>
<p>So, the question is: what is an object with a <code>ppf</code> method and how do I create it from my numpy array?</p>
</div>
<div class="post-text" itemprop="text">
<p>The "dist" object should be an instance or class of scipy's statistical distributions. That is what is meant by:</p>
<blockquote>
<p>dist : str or stats.distributions instance, optional</p>
</blockquote>
<p>So a self-contained example would be:</p>
<pre><code>import numpy
from matplotlib import pyplot
from scipy import stats

random_beta = numpy.random.beta(0.3, 2, size=37)

fig, ax = pyplot.subplots(figsize=(6, 3))

_ = stats.probplot(
    random_beta,       # data
    sparams=(0.3, 2),  # guesses at the distribution's parameters
    dist=stats.beta,   # the "dist" object
    plot=ax            # where the data should be plotted
)
</code></pre>
<p>And you'll get:</p>
<p><a href="https://i.stack.imgur.com/5Ya2E.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/5Ya2E.png"/></a></p>
<p>If you want to plot multiple columns of a data frame, you'll need to call <code>probplot</code> multiple times, plotting on the same (or new) axes each time.</p>
<p>In this simple case, the probscale package doesn't offer much. But it might be more flexible for doing probability scales instead of quantile scales if that's a direction you might head in the future:</p>
<pre><code>import probscale

fig, ax = pyplot.subplots(figsize=(6, 3))
fig = probscale.probplot(
    random_beta,
    ax=ax,
    plottype='qq',
    bestfit=True,
    dist=stats.beta(0.3, 2)
)
</code></pre>
<p><a href="https://i.stack.imgur.com/OtES3.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/OtES3.png"/></a></p>
</div>
<span class="comment-copy">You don't create the object from your array. It's a <code>distribution</code>, e.g., <code>stats.gamma</code>. I wrote a matplotlib add-on to help with QQ (and similar plots): <a href="https://matplotlib.org/mpl-probscale/" rel="nofollow noreferrer">matplotlib.org/mpl-probscale</a></span>
<span class="comment-copy">See the second example here: <a href="https://matplotlib.org/mpl-probscale/tutorial/closer_look_at_viz.html#using-different-distributions-for-your-scales" rel="nofollow noreferrer">matplotlib.org/mpl-probscale/tutorial/…</a></span>
