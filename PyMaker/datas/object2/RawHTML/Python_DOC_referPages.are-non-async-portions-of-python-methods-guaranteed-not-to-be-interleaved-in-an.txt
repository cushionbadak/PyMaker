<div class="post-text" itemprop="text">
<p>Suppose I have multiple async tasks running on my main thread.</p>
<p>I use 'await' in my function to allow the execution of one function to be suspended at a blocking call, to allow another to continue. All good.</p>
<p>However, is there a guarantee that the blocks of code <em>between</em> these calls will be executed continuously?</p>
<p>I'm wondering if I can make modifications to global state between async calls -- without worrying about race conditions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes.</p>
<blockquote>
<p>Event loops use <strong>cooperative</strong> scheduling: an event loop runs one Task at a time. While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-task.html</a></p>
</div>
<span class="comment-copy">Yes, async is cooperative multitasking. A function is never removed from execution, unless it tries a potentially blocking call. However, what do you mean by race condition? There is still a risk with globals if someone else is accessing the global while another task is awaiting a blocking call.</span>
<span class="comment-copy">Thats the answer I was looking for. For the race conditions, I meant that I can share global state among async code, as long as the global state is self-consistent each time I hit an 'await'. (Clearly, I can't leave global state inconsistent across an await call, as that would be a race condition)</span>
<span class="comment-copy">possible dup of: <a href="https://stackoverflow.com/questions/38865050">stackoverflow.com/questions/38865050</a></span>
<span class="comment-copy">By definition non-async portions of code never call <code>await</code> and therefore they are executed sequentially.</span>
