<div class="post-text" itemprop="text">
<pre><code># python3
def foo(a):
    class A:
        def say(self):
            print(a)
    return A
A = foo(1)
'__closure__' in dir(A.say) # True
a = A()
a.say.__closure__ # it returns the closure tuple
'__closure__' in dir(a.say) # False
'__closure__' in dir(a.say.__class__) # False
'__closure__' in dir(a.say.__class__.__class__) # False
</code></pre>
<p>In Python3, A.say is a function, and I know it has<strong>__closure__</strong> attribute.
<strong>__closure__</strong> not in dir(a.say) or its super class, but a.say.<strong>__closure__</strong> returns the closure tuple. It makes me confuse. 
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know in Python the internal implementation of objects with type <code>instancemethod</code> but I think it is how <strong>__getattr__</strong> works in <a href="https://docs.python.org/3/c-api/method.html" rel="nofollow">instance method objects</a>. </p>
<p>My guess is when you say <strong>a.say.__closure__</strong> it first looks up for __closure__ in <strong>dir(a.say)</strong> and then fallbacks on <strong>dir(a.say.im_func)</strong>.</p>
<pre><code>&gt;&gt;&gt; a = foo(1)()
&gt;&gt;&gt; print type(a.say)
&gt;&gt;&gt; instancemethod

&gt;&gt;&gt; a.say.im_func.__closure__
&gt;&gt;&gt; (&lt;cell at 0x10a00f980: int object at 0x7fef29e098b8&gt;,)

&gt;&gt;&gt; '__closure__' in dir(a.say.im_func)
&gt;&gt;&gt; True
</code></pre>
</div>
<span class="comment-copy">possible duplicate <a href="http://stackoverflow.com/questions/14413946/what-exactly-is-contained-within-a-obj-closure" title="what exactly is contained within a obj closure">stackoverflow.com/questions/14413946/â€¦</a></span>
<span class="comment-copy">@Styvane   thanks for your commit. They are not completely duplicate. The answer you provide tells how __closure works. I have edited my question to make it clear.</span>
<span class="comment-copy">thanks @ozgurv . My question is not very clear, and I have edited it. The <b><i>_closure_</i></b> attribute is in dir(inner_function). <b><i>_closure_</i></b> attribute is not in dir(a.say), but a.say.__closure__ does return the closure tuple. It makes me confuse. In fact, <b><i>_closure_</i></b> is in dir(A.say), because A.say is a function in Python3.</span>
<span class="comment-copy">@dragonfly I've updated my answer.</span>
<span class="comment-copy">thanks. You are right. The <b>im_func</b> attribute is the original function object, and it's the original function object that contains the <b><i>_closure_</i></b> attribute.</span>
