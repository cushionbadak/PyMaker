<div class="post-text" itemprop="text">
<p>I'm trying to get familiar with asyncio, so I've decided to write a database client. However, performance exactly matches synchronous code. I'm sure this is my misunderstanding of a concept. Could someone explain what am I doing wriong? </p>
<p>Please see example of code below:   </p>
<pre><code>class Connection:
    def __init__(self, reader, writer, loop):
        self.futures = deque()

        # ...

        self.reader_task = asyncio.async(self.recv_data(), loop=self.loop)

    @asyncio.coroutine
    def recv_data(self):
        while 1:
            try:
                response = yield from self.reader.readexactly(4)
                size, = struct.unpack('I', response)
                response = yield from self.reader.readexactly(size)

                # ...                

                future = self.futures.popleft()

                if not future.cancelled():
                    future.set_result(response)

            except Exception:
                break

    def send_data(self, data):
        future = asyncio.Future(loop=self.loop)
        self.futures.append(future)

        self.writer.write(data)

        return future


loop = asyncio.get_event_loop()


@asyncio.coroutine
def benchmark():
    connection = yield from create_connection(loop=loop, ...)

    for i in range(10000):
        yield from connection.send_data(...)


s = time.monotonic()

loop.run_until_complete(benchmark())

e = time.monotonic()
print('Requests per second:', int(10000 / (e - s)))
</code></pre>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You've made a mistake in the way you're calling <code>send_data</code>. Right now, you've got this:</p>
<pre><code>@asyncio.coroutine
def benchmark():
    connection = yield from create_connection(loop=loop, ...)

    for i in range(10000):
        yield from connection.send_data(...)
</code></pre>
<p>By using <code>yield from</code> inside the for loop, you're waiting for the <code>future</code> you're returning from <code>send_data</code> to yield a result before moving on to the next call. This makes your program basically synchronous. You want to make all your calls to <code>send_data</code>, and <em>then</em> wait for results:</p>
<pre><code>@asyncio.coroutine
def benchmark():
    connection = yield from create_connection(loop=loop, ...)
    yield from asyncio.wait([connection.send_data(..) for _ in range(10000)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The python <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a> module is single threaded:</p>
<blockquote>
<p>This module provides infrastructure for writing single-threaded concurrent code using coroutines, multiplexing I/O access over sockets and other resources, running network clients and servers, and other related primitives. </p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/26154125/why-is-the-asyncio-library-is-slower-than-threads-for-this-i-o-bound-operation">This question</a> has an explanation of why asyncio can be slower than threading, but in short: asyncio uses a single thread to execute your code, so even if you have multiple coroutines, they all execute serially. A thread pool is used to execute some callbacks and I/O. Because of the GIL, threading also executes user code serially, though I/O operations can be run synchronously.</p>
<p>The reason using asyncio doesn't give you an improvement over serially executed code, is because the event loop is only running one coroutine at a time.</p>
</div>
<span class="comment-copy">Perfect, thanks. From what I could understand it the same as creating a Task for each "send_data" call?</span>
<span class="comment-copy">@Andrew More or less, though you'd still need to add code to <code>benchmark</code> to wait for each <code>Task</code> to complete. Actually, I believe the call to <code>asyncio.wait</code> will turn all the coroutine objects passed to it into <code>Task</code> instances internally, anyway.</span>
<span class="comment-copy">Yep, you are both correct. <code>asyncio.wait</code> will wrap any passed in coroutine object or awaitable in a <code>Task</code> future. The lone act of wrapping them yourself with <code>loop.create_task</code> or <code>asyncio.ensure_future</code> may schedule them in the loop, but doesn't block execution of the coroutine code while they eventually finish. You'd still have to <code>yield from</code> those <code>Task</code>s or pass them along to something like <code>asyncio.wait</code>.</span>
<span class="comment-copy">The OPs code should still perform better than synchronous code, because it is I/O bound. It doesn't matter that there's a single thread - while I/O is running in one coroutine, other coroutines can execute. The question you linked to is a somewhat special case - it was using <code>getaddrinfo</code>, which isn't actually implemented using asynchronous I/O. It uses a small <code>ThreadPool</code> instead, which limits the amount of parallelism available. That made it slower than regular multi-threaded code, but it would still be faster than synchronous code, which is what this question is about.</span>
<span class="comment-copy">@dano My mistake then. I didn't understand it well enough. I'm voting on your answer.</span>
<span class="comment-copy">No problem. Asynchronous frameworks are a fairly strange concept to wrap your head around. The last sentence you wrote in your answer is actually basically correct, but it was happening because of a coding error, rather than a limitation of <code>asyncio</code>.</span>
