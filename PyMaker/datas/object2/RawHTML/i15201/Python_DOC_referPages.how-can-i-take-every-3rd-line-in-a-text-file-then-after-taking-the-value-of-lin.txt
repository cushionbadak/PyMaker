<div class="post-text" itemprop="text">
<p>I am new to Python, so please help me...
I want to take out every 3rd, 4th and 5th line in a text file. There are 22 lines in the text file
Here is just an algorithm </p>
<pre><code>For i in range (0,16):

    Name = Extract line 3 from text file.

    Distance= Extract line 4 from text file. 

    Time = Extract line 5 from text file.

    Calculations = (Distance/Time )

    Print (Name,Calculations, Time)

    Name = ''

    Distance = ''

    Time = ''
</code></pre>
<p>My problem is that I want the for loop to repeat, but next time name should extract line 6, distance line 7 and time line 8. The next time the loop repeats, it should change name into line 9 and so on...
Hopefully my problem is clear enough, I am not sure how to phrase it.
Thanks for all the help in advance... I am clueless</p>
<p>By the way I am using python 3.3</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = open('file.txt')
count = 0  #where in the file we are
entry = 3  #the first line we want to write, e.g Name
for line in f:
    count += 1
    if count == entry: name = line.strip() #name
    elif count == entry+1: distance = line.strip() #distance
    elif count == entry+2: 
        time = line.strip() #time
        entry += 3  #now we've hit time, lets set entry to line 6 for the next iteration
        calculation = float(distance) / float(time)
        print name, calculation, time
#do calculations
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you always know that you will only ever need those three lines, you simply need to do:</p>
<pre><code>values   = list()
state    = 0 # 0 is name, 1 is distance, 2 is time
line_num = 0
with open(filename) as ifile:
    name, distance, time = '',0,0 # the null set
    for line in ifile:
        if line_num &lt; 3:
            line_num += 1
        else:
            if state == 0:
                name  = line.strip()
                state = 1
            elif state == 1:
                distance = float(line.strip())
                state = 2
            elif state == 2:
                time = float(line.strip())
                state = 0
                values.append((name, distance, time))

for name, distance, time in values:
    # do calculations on name, distance, time
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the grouper recipe from <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">itertools</a>:</p>
<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

with open('file.txt') as ff:
    data = ff.read().split('\n')[2:]
data = grouper(data, 3, None)
for name, distance, time in data:
    print(name, int(distance)/int(time), time)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You file is not very large(only a few lines), so memory seems not to be a problem for you. Said that, you can try a different approach:</p>
<pre><code>lines = []

with open("file.txt") as input:
    lines = input.readlines()    # If file is large is not a good idea load it all into memory.

thirds  = lines[2:-1:3]  # Select from third element to the end and step by 3
fourths = lines[3:-1:3]  # Select from fourth element to the end and step by 3
fifths  = lines[4:-1:3]  # Select from fifth element to the end and step by 3


for (name, distance, time) in zip(thirds, fourths, fifths):
    calculations = distance / time
    print(name, calculations, time)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following code opens your file, uses the lines #1 and #2 by a reasonable guess of your description and then proceed to scan the file</p>
<ol>
<li><p>the method <code>readline</code> returns a single line from the file, with a newline at the end (that's why we use the method <code>strip</code> when we want to use the file content as a name...) and returns a null string <code>''</code> only (<em>only</em>) when the EOF is reached.</p></li>
<li><p>we use an infinite loop to scan the rest of the file, but when the file is over we want to stop... that's why we do something different when we read the activity name, first we test for a null string (meaning: we reached EOF) and possibly break out of the loop.</p></li>
</ol>
<p>.</p>
<pre><code>with open('data.txt') as data:
    person = data.readline().strip()
    age =  int(data.readline())
    while True:
        activity = data.readline()
        if not activity:
            break
        activity = activity.strip()
        distance = float(data.readline())
        time = float(data.readline())
        velocity = distance/time
        format_output()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think something like this would be a fast and simple way to do it:</p>
<pre><code># create test file
with open('3_lines_test.txt', 'wt') as file:
    for i in range(1, 22):
        file.write('line{:&gt;2}\n'.format(i))

# read test file
with open('3_lines_test.txt', 'rt') as file:
    for _ in range(3): next(file)  # skip first 3 lines
    while True:
        try:
            name = next(file).rstrip()  # read next 3 lines
            dist = next(file).rstrip()  #        "
            time = next(file).rstrip()  #        "
        except StopIteration:
            break

        # do calculations or whatever...
        print('values: ({name!r}, {dist!r}, {time!r})'.format(**locals()))

print('done')
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>values: ('line 4', 'line 5', 'line 6')
values: ('line 7', 'line 8', 'line 9')
values: ('line10', 'line11', 'line12')
values: ('line13', 'line14', 'line15')
values: ('line16', 'line17', 'line18')
values: ('line19', 'line20', 'line21')
done
</code></pre>
<p>For such a short file, you could just read each line explicitly and calculate the values 6 times without any loop at all. This would require more code, but most of it would be boiler-plate and it would likely be the fastest possible approach.</p>
</div>
<span class="comment-copy">What does the actual text-file look like? It's basically impossible to suggest a parsing strategy without that</span>
<span class="comment-copy">It goes like this; Kiara, 20, Running, 50, 60, Swimming, 20, 60 and so on. BTW, the comma is where a new line starts</span>
<span class="comment-copy">Looks like you need more than just three lines, but to parse the entire file, saving or printing info for each person.  But these values confuse me, which is time?</span>
<span class="comment-copy">Kiara, 20, Running (name), 50(distnace), 60(time), Swimming(name), 20(distance), 60(time) and so on. I am ignoring the first two lines, and counting from the third.</span>
<span class="comment-copy">Quick random question; what is f.readlines in python</span>
<span class="comment-copy">Can you please tell me what the line count += 0 does.</span>
<span class="comment-copy">+= is increment.  if count is equal to 0, count += 1 would bring the count to 1.  So for every line in the file, we are increasing our count variable, so we know where we are in the file.</span>
<span class="comment-copy">Thanls, let me try it out...</span>
<span class="comment-copy">@user2675906 My first version didn't account for you wanting to loop. My new version does, but assumes the file will always have the correct number of items.</span>
<span class="comment-copy">Quick random question; what is f.readlines in python</span>
<span class="comment-copy">Instead of reading the whole file into a list, you could burn the first two lines with <code>next(ff);next(ff)</code> and then do <code>grouper(ff, 3 None)</code></span>
