<div class="post-text" itemprop="text">
<p>Environment:  Windows 7 64bit, Python version 3.2.5 with PyWin32-218 and cherrypy version 3.6.0.</p>
<p>I copied the windows service example (CP 3.1) from <a href="http://tools.cherrypy.org/wiki/WindowsService" rel="nofollow">CherryPy as a Windows Service</a> and found out that the service starts and stops almost immediately. After some fiddling I created a static log file to write to for debugging(because services run in diff directory than original script) and got this:</p>
<pre><code>&gt;[05/Feb/2015:16:29:05] ENGINE Bus STARTING
&gt;[05/Feb/2015:16:29:05] ENGINE Error in 'start' listener   &lt;cherrypy._cpchecker.Checker object at 0x0000000002556278&gt;
&gt;Traceback (most recent call last):
&gt;  File "C:\Python32\lib\site-packages\cherrypy\process\wspbus.py", line 205, in publish
&gt;    output.append(listener(*args, **kwargs))
&gt;  File "C:\Python32\lib\site-packages\cherrypy\_cpchecker.py", line 39, in __call__
&gt;    method()
&gt;  File "C:\Python32\lib\site-packages\cherrypy\_cpchecker.py", line 176, in check_static_paths
&gt;    % (msg, section, root, dir))
&gt;  File "C:\Python32\lib\warnings.py", line 18, in showwarning
&gt;    file.write(formatwarning(message, category, filename, lineno, line))
&gt;AttributeError: 'NoneType' object has no attribute 'write'
&gt;
&gt;[05/Feb/2015:16:29:05] ENGINE Started monitor thread '_TimeoutMonitor'.
&gt;[05/Feb/2015:16:29:05] ENGINE Serving on http://0.0.0.0:8080
&gt;[05/Feb/2015:16:29:05] ENGINE Shutting down due to error in start listener:
&gt;Traceback (most recent call last):
&gt;  File "C:\Python32\lib\site-packages\cherrypy\process\wspbus.py", line 243, in start
&gt;    self.publish('start')
&gt;  File "C:\Python32\lib\site-packages\cherrypy\process\wspbus.py", line 223, in publish
&gt;    raise exc
&gt;cherrypy.process.wspbus.ChannelFailures: AttributeError("'NoneType' object has no attribute 'write'",)
&gt;
&gt;[05/Feb/2015:16:29:05] ENGINE Bus STOPPING
&gt;[05/Feb/2015:16:29:06] ENGINE HTTP Server cherrypy._cpwsgi_server.CPWSGIServer(('0.0.0.0', 8080)) shut down
&gt;[05/Feb/2015:16:29:06] ENGINE Stopped thread '_TimeoutMonitor'.
&gt;[05/Feb/2015:16:29:06] ENGINE Bus STOPPED
&gt;[05/Feb/2015:16:29:06] ENGINE Bus EXITING
&gt;[05/Feb/2015:16:29:06] ENGINE Bus EXITED
</code></pre>
<p>Googled the error and found this <a href="https://groups.google.com/forum/#!msg/cherrypy-users/mFHDpo1cWJA/7CQWKNhFwjwJ" rel="nofollow">running CherryPy 3.2 as a Windows service</a> who had precisely the same error.
Did some more research and saw that windows services' console output points to 'Nothing'.
so I added <code>sys.stdout = open('stdout.log', 'a+')</code> and <code>sys.stderr = open('stderr.log', 'a+')</code>
just before <code>cherrypy.engine.start()</code>
and what do you know, it works!</p>
<p>BUT now I want CherryPy to not log at all.
Tried various config settings and code eg.:<code>log.screen = None</code> and <code>server.log_to_screen = False</code> and <code>checker.check_skipped_app_config = False</code> and even</p>
<pre><code>logger = cherrypy.log.access_log
logger.removeHandler(logger.handlers[0])
</code></pre>
<p>None of them work resulting in the service stopping and giving the same error as above.</p>
<p>Am I missing something or is it truly impossible to silence the logging?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://cherrypy.readthedocs.org/en/latest/basics.html#disable-logging" rel="nofollow">Follow the docs</a></p>
<p>Basically your config should looks like:</p>
<pre><code>{'global': {
   'log.screen': False,
   'log.error_file': '',
   'log.access_file': ''
}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think it has much to do with CherryPy logging. As you can see your first stack trace ends in Python stdlib <a href="https://docs.python.org/3/library/warnings.html" rel="nofollow noreferrer"><code>warnings</code></a> module. Its purpose is letting developer know that some undesired conditions are met, but they aren't important enough to raise an exception. It also provides means of filtering warning messages. Here's the relevant quote from the module's documentation:</p>
<blockquote>
<p>Warning messages are normally written to sys.stderr, but their disposition can be changed flexibly, from ignoring all warnings to turning them into exceptions. The disposition of warnings can vary based on the warning category (see below), the text of the warning message, and the source location where it is issued. Repetitions of a particular warning for the same source location are typically suppressed.</p>
</blockquote>
<p>If you looked at the <code>warnings.showwarning</code> code, you would have seen this:</p>
<pre><code>def showwarning(message, category, filename, lineno, file=None, line=None):
    """Hook to write a warning to a file; replace if you like."""
    if file is None:
        file = sys.stderr
    try:
        file.write(formatwarning(message, category, filename, lineno, line))
    except IOError:
        pass # the file (probably stderr) is invalid - this warning gets lost.
</code></pre>
<p>CherryPy actively uses <code>warnings</code>, and specifically in the config checker which is referenced in the first stack trace. It seems in your service environment <code>sys.stderr</code> is <code>None</code>. To completely avoid showing warnings, you can do the following:</p>
<pre><code>import warnings
warnings.simplefilter('ignore')
</code></pre>
<p>Also if you would like to keep redirecting them, you may find <a href="https://stackoverflow.com/q/858916">this question</a> useful.</p>
</div>
<span class="comment-copy">Thank you so much! Like an idiot I searched in the docs BUT in the wrong sections and search terms.</span>
<span class="comment-copy">This worked 100%, but did not 'disable' the logging. Don't get me wrong CherryPy worked flawlessly after I added this. Thanks :)</span>
