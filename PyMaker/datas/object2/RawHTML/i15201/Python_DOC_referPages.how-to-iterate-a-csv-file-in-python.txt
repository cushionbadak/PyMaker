<div class="post-text" itemprop="text">
<p>How can I turn a CSV with such data using <code>csv</code> </p>
<pre><code>['20150101','2','1']
['20150102','10','3']
['20150103','4','2']
['20150104','5','4']
['20150105','12','6']
....
</code></pre>
<p>to be iterable with basic <code>for</code>, <code>len()</code>, and <code>range()</code> functions while in its original format (or close to its original format) <strong>without</strong> turning into a list?</p>
<p>What I have tried:
I tried <code>len()</code> on the CSV file and I got 2 different errors:</p>
<pre><code>TypeError: object of type '_io.TextIOWrapper' has no len() # without using csv module
TypeError: object of type '_csv.reader' has no len() # using csv module
</code></pre>
<p>Even if I use basic function like:</p>
<pre class="lang-py prettyprint-override"><code>for i, n in enumerate(r):
    print(r[n])
</code></pre>
<p>I would get such error:</p>
<pre><code>TypeError: '_csv.reader' object is not subscriptable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully this will clarify how it works a bit. If you have your code in a csv it will iterate over each row. So length of each row will be three if you ask the length of the whole row (3 elements in each row). This is why you need to specify the item that you want to know in a specific row. It will also take the '' into account when returning the length.</p>
<pre><code>import csv

with open('test.csv', 'rb') as csvfile:
    reader = csv.reader(open("test.csv", 'rU'))

    for i in reader:
        var1 = i[0]
        var2 = i[1]
        var3 = i[2]
        print len(var1), len(var2), len(var3)
</code></pre>
<p>This will return</p>
<pre><code>11 3 4
11 4 4
11 3 4
11 3 4
11 4 4
</code></pre>
</div>
<span class="comment-copy">Have you read the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> documentation?  A point to ponder, how can the program know the length of the csv file short of reading it in?  Perhaps the operations that you are proposing for this object are not a natural fit to its structure.</span>
<span class="comment-copy">It's possible to iterate a csv file (or a <code>csv.reader</code> object), but not access elements in one via a subscript or get its length with <code>len()</code>. The latter two could be done by reading the entire file into memory (turning it into a string).</span>
<span class="comment-copy">Well, if csv file is not iterable, then how did those hedge fund companies iterate huge csv files for backtesting?</span>
<span class="comment-copy">I said they <i>are</i> iterable.</span>
<span class="comment-copy">@ martineau, but iterating it as a string would defeat the whole purpose to be as efficient as possible. If the file is massive, then it would be a massive string. What about pandas module? I am looking that pandas have such fundtion as dataframe. Can dataframe iterate over csv files without turning it into a list or string?</span>
