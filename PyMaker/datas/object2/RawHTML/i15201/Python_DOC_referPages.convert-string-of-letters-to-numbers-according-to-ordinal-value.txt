<div class="post-text" itemprop="text">
<p>I have no idea where to start with this. I need to write a function that will return a string of numbers in ordinal value. So like</p>
<pre><code>stringConvert('DABC')
</code></pre>
<p>would give me <code>'4123'</code></p>
<pre><code>stringConvert('XPFT')
</code></pre>
<p>would give me <code>'4213'</code></p>
<p>I thought maybe I could make a dictionary and make the each letter from the string associate it with an integer, but that seems too inefficient and I still don't know how to put them in order.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could sort the unique characters in the input string and apply indices to each letter by using the <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code> function</a>:</p>
<pre><code>def stringConvert(s):
    ordinals = {c: str(ordinal) for ordinal, c in enumerate(sorted(set(s)), 1)}
    return ''.join([ordinals[c] for c in s])
</code></pre>
<p>The second argument to <code>enumerate()</code> is the integer at which to start counting; since your ordinals start at 1 you use that as the starting value rather than <code>0</code>. <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow"><code>set()</code></a> gives us the unique values only.</p>
<p><code>ordinals</code> then is a dictionary mapping character to an integer, in alphabetical order.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def stringConvert(s):
...     ordinals = {c: str(ordinal) for ordinal, c in enumerate(sorted(set(s)), 1)}
...     return ''.join([ordinals[c] for c in s])
... 
&gt;&gt;&gt; stringConvert('DABC')
'4123'
&gt;&gt;&gt; stringConvert('XPFT')
'4213'
</code></pre>
<p>Breaking that all down a little:</p>
<pre><code>&gt;&gt;&gt; s = 'XPFT'
&gt;&gt;&gt; set(s)  # unique characters
set(['X', 'F', 'T', 'P'])
&gt;&gt;&gt; sorted(set(s))  # unique characters in sorted order
['F', 'P', 'T', 'X']
&gt;&gt;&gt; list(enumerate(sorted(set(s)), 1))  # unique characters in sorted order with index
[(1, 'F'), (2, 'P'), (3, 'T'), (4, 'X')]
&gt;&gt;&gt; {c: str(ordinal) for ordinal, c in enumerate(sorted(s), 1)}  # character to number
{'P': '2', 'T': '3', 'X': '4', 'F': '1'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <code>string</code> module, especially <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="nofollow">maketrans</a> and <a href="https://docs.python.org/2/library/string.html#string.translate" rel="nofollow">translate</a></p>
<p>With those, your code may look like</p>
<pre><code>def stringConvert(letters):
    return translate(letters, maketrans(''.join(sorted(set(letters))).ljust(9), '123456789'))
</code></pre>
<p>and pass your strings as variable</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make a character translation table and use the <code>translate()</code> string method:</p>
<pre><code>from string import maketrans

TO = ''.join(str(i+1)[0] for i in xrange(256))

def stringConvert(s):
    frm = ''.join(sorted(set(s)))
    return s.translate(maketrans(frm, TO[:len(frm)]))

print stringConvert('DABC')  # --&gt; 4123
print stringConvert('XPFT')  # --&gt; 4213
</code></pre>
</div>
<span class="comment-copy">You can pass the generator directly to <code>str.join</code>. No need to create the list first. I.e., <code>''.join(ordinals[c] for c in s)</code></span>
<span class="comment-copy">@PeterSutton: see <a href="http://stackoverflow.com/a/9061024">this answer</a>; <code>str.join()</code> is the <b>one</b> place where using a list comprehension is going to be more efficient; to join the string the iterable has to be converted to a list otherwise anyway so as to scan it twice.</span>
<span class="comment-copy">Hi, thanks for the quick response. But can you explain to me what you did here. I'm fairly new to python and this is the first time I encountered the enumerate and sorted sets part.</span>
<span class="comment-copy">@EdwardStark: try out the different parts in the interpreter. <code>set()</code> produces a collection of letters that is unique; so <code>set('aaaaaa')</code> gives you <code>set(['a'])</code>, just the one letter <code>a</code>, etc. <code>sorted()</code> produces a new list with values from the input, sorted.</span>
<span class="comment-copy">@EdwardStark: <code>enumerate()</code> produces <code>(index, value)</code> tuples as you iterate. So for the input <code>'a', 'b', 'c', 'd'</code> the output <code>(1, 'a')</code>, <code>(2, 'b')</code>, <code>(3, 'c')</code>, <code>(4, 'd')</code> is produced. The dictionary comprehension takes those pairs and maps the character to the number (converted to a string here because that's the output you wanted).</span>
<span class="comment-copy">What if <code>letters</code> is longer or shorter than 4 characters? What if characters are repeated?</span>
<span class="comment-copy">Changed answer to this requirements</span>
<span class="comment-copy">I like the use of the hardcoded digits, nice touch! Do add a note that this limits your solution to just 9 unique characters in the input.</span>
<span class="comment-copy">Because you are already heavily leaning on <code>sorted()</code> and using <code>str.join()</code>, any advantage <code>str.translate()</code> may have had has evaporated.</span>
<span class="comment-copy">@Martijn: Good point, but moving the creation of the translation's "TO" string outside of the function -- since its a constant except for its length -- makes up for that and the result is faster than your version in a benchmark I setup and ran: <code>martineau : 2.808794 secs, rel speed 1.000000x</code> vs <code>Martijn Pieters : 5.143616 secs, rel speed 1.831254x</code> for 1,000,000 calls each, best of 3.</span>
<span class="comment-copy">Yup, you are now using the same approach as Slam; predefine the target mapping.</span>
