<div class="post-text" itemprop="text">
<p>I am running this program:</p>
<pre><code>f = open( "animals.txt", "r")
g = f.read()
g1 = g.split(',') #turning the file into list
print g1
</code></pre>
<p>And I want this to come out:</p>
<pre><code>['ELDEN', 'DORSEY', 'DARELL', 'BRODERICK', 'ALONSO']
</code></pre>
<p>Instead, I am getting this:</p>
<pre><code>['"ELDEN"', '"DORSEY"', '"DARELL"', '"BRODERICK"', '"ALONSO"']
</code></pre>
<p>Does anyone know how to remove the inner quotes</p>
</div>
<div class="post-text" itemprop="text">
<p>Try a list comprehension which allows you to effectively and efficiently reassign the list to an equivalent list with quotes removed.</p>
<pre><code>g1 = [i.replace('"', '') for i in g1] # remove quote from each element
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can easily strip off the quote characters using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip</code></a>:</p>
<pre><code>f = open( "animals.txt", "r")
g = f.read()
g1 = [x.strip('"') for x in g.split(',')]
print g1
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; lst = ['"ELDEN"', '"DORSEY"', '"DARELL"', '"BRODERICK"', '"ALONSO"']
&gt;&gt;&gt; [x.strip('"') for x in lst]
['ELDEN', 'DORSEY', 'DARELL', 'BRODERICK', 'ALONSO']
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What is creating your file in the first place?  It looks as though you have a kind of CSV where either all elements, or at least all string elements, are surrounded by quotation marks.  As such, you have at least a couple of choices for moving the quotation-mark removal "upstream" from what most of the other answers here are suggesting:</p>
<ol>
<li>Use the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow"><code>csv</code> module</a>:</li>
</ol>
<blockquote>
<pre><code>import csv
with open('animals.txt', 'r') as f:
    g = csv.reader(f)
    g1 = g.next()
</code></pre>
</blockquote>
<ol start="2">
<li>Include the quotation marks in your <code>split()</code>, and chop off the leading and trailing quotes first:</li>
</ol>
<blockquote>
<pre><code>with open('animals.txt', 'r') as f:
    g = f.read()
    g1 = g[1:-1].split('","')
</code></pre>
</blockquote>
<p>The first option may be somewhat more "heavyweight" than what you're looking for, but it's more robust (and still not <em>that</em> heavy).  Note that the second option assumes that your file does NOT have a trailing newline at the end.  If it does, you have to adjust accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe we should go back to the source.</p>
<p>Apparently your file contains the text <code>"ELDEN", "DORSEY", "DARELL", "BRODERICK", "ALONSO"</code> (etc). We can delegate the parsing:</p>
<pre><code>import ast

with open("animals.txt") as inf:
    g1 = ast.literal_eval("[" + inf.read() + "]")
</code></pre>
</div>
<span class="comment-copy">Also, you are not currently closing the file when you are done with it.  You need to do <code>f.close()</code> at the end or open the file using a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">with-statement</a> to have it be automatically closed.</span>
<span class="comment-copy">That's kinda cute.</span>
