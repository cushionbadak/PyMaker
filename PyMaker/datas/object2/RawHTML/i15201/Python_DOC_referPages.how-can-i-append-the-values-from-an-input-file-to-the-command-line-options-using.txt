<div class="post-text" itemprop="text">
<p>Say I have a yaml input file (input.txt) that contains the following:</p>
<pre><code>names: [Bob, Jill]
ages: [22, 31]
county: somewhere
</code></pre>
<p>my code to parse this:</p>
<pre><code>import yaml
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--name', default=[], dest='names', action='append')
parser.add_argument('--age', default=[], dest='ages', action='append')
parser.add_argument('--county', dest='county')
parser.add_argument(
    '--config-file',
    dest='config_file',
    type=argparse.FileType(mode='r'))
args = parser.parse_args()
print args
</code></pre>
<p>My question is this: I have seen numerous websites that show how to add the argument for the config-file like above. How do I 'parse' that config file and add (append) the values in it to any values passed on the command-line?</p>
<p>If my program is called so.py, and is invoked like this:</p>
<pre><code>so.py --config-file=input.txt --name 'Ralph' --age 40
</code></pre>
<p>I would like to get
    names = ['Bob', 'Jill', 'Ralph']
    ages = [22, 31, 40]
    county = 'somewhere'
in my args. Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a parameter that allows input from a file, the 'fromfile-prefix-chars'</p>
<p><a href="https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars" rel="nofollow">https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars</a></p>
<p>In the default form it expects one commandline string per line.  But the docs also show how it can be modified to take multiple strings from each line.  You could take that idea and extend it to handle the Yaml syntax.</p>
<p>But there are libraries that read config and yaml files.  So you could use your <code>--config-file</code> argument to read your file with that library, and then merge its results with the <code>argparse</code> results. Merger is probably easiest by converting both (yaml and argparse) to dictionaries, and using the <code>.update</code> method.</p>
<p><code>Ipython</code> uses its config files (both default and user specified) to populate its <code>argparse</code> parser arguments.  Thus user profiles can override the defaults, and the commandline can override both. The code that does this is not for the faint of heart, but for a large project might be worth studying.</p>
<p>Details on how you do the merger depend on the 'yaml' produced object.  The <code>argparse</code> <code>args</code> is a simple object of type <code>argparse.Namespace</code>.  See the docs for detail.  Usually people just 'read' values from <code>args</code>, but it is equally easy to add or modify values.  And if you prefer, <code>vars(args)</code> turns it into a dictionary.</p>
<hr/>
<p>Using <code>yaml.load</code> (and simplifying the argparse a bit):</p>
<pre><code>import yaml
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--names', action='append')
parser.add_argument('--ages', action='append')
parser.add_argument('--county', dest='county')
parser.add_argument('--config-file')   # automatic - to _ conversion

sample = "--config-file=stack28220581.yaml --name Ralph --age 40".split()
args = parser.parse_args(sample)
# add test that len(args.names)==len(args.ages) ??
with open(args.config_file) as f:
    ydict = yaml.load(f)
# {'county': 'somewhere', 'names': ['Bob', 'Jill'], 'ages': [22, 31]}

# add list attributes from args to the corresponding ydict values
for k,v in ydict.items():
    av = getattr(args,k,None)
    if av and isinstance(v, list):
        v.extend(av)
print(ydict)
# {'names': ['Bob', 'Jill', 'Ralph'], 'ages': [22, 31, '40'], 'county': 'somewhere'}
</code></pre>
<hr/>
<p>An example of using <code>prefix_chars</code>:</p>
<pre><code>def foo(astr):
    # custom convert_arg_line_to_args method
    # convert 'names: [v1,v2]' into ['--names', v1, '--names', v2, ...]
    alist = []
    if ':' not in astr:
        return astr
    field,value = astr.split(':')
    value = value.strip()
    field = '--'+field
    if value.startswith('['):
        values = value[1:-1].split(',')
        for v in values:
            alist.extend([field,v.strip()])
    else:
        alist.extend([field, value])
    return alist

parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.convert_arg_line_to_args = foo  # could also do this with subclass
parser.add_argument('--names', action='append')
parser.add_argument('--ages', action='append')
parser.add_argument('--county', dest='county')
sample = "@stack28220581.yaml --name Ralph --age 40".split()
args = parser.parse_args(sample)
print(args)
# Namespace(ages=['22', '31', '40'], county='somewhere', names=['Bob', 'Jill', 'Ralph'])
</code></pre>
</div>
