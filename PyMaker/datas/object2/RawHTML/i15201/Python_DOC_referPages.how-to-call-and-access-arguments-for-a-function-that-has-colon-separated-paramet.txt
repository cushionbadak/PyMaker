<div class="post-text" itemprop="text">
<p>I'm attempting to write a python function that computes the number of minutes given the days, hours and minutes.</p>
<p>The function is to be called</p>
<pre><code>def minutes(d:'days', h:'hours', m:'minutes'):
</code></pre>
<p>I'm confused as to how to assign numerical values to the <code>d</code>, <code>h</code>, and <code>m</code> so I can then manipulate those variables. Any help or suggestions would be really appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The function  is using  python3 <a href="https://docs.python.org/3/tutorial/controlflow.html#function-annotations" rel="nofollow">function annotations</a>:</p>
<p>You can still just pass args like you normally would:</p>
<pre><code>def minutes(d:'days', h:'hours', m:'minutes'):
    print(minutes.__annotations__ )
    print(d,h,m)
print(minutes(10,10,10)

{'d': 'days', 'm': 'minutes', 'h': 'hours'}
10 10 10
</code></pre>
<p>Or pass a dict:</p>
<pre><code>dic = {"d":22,"h":12,"m":25}
print(minutes(**dic))  
{'d': 'days', 'm': 'minutes', 'h': 'hours'}
22 12 25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Might be a job for a <code>namedtuple</code> (part of the <code>collections</code> library). A <code>collections.namedtuple</code> allows you to access the different members of the tuple by names you have given them. </p>
<p>Example: </p>
<pre><code># import the namedtuple module from the library
from collections import namedtuple as nt
# create a type of namedtuple called Time that contains days, hours, minutes
Time = nt('Time', 'days hours minutes')
# you can make a Time instance this way
t1 = Time(0, 0, 1)
# now you can print it to see what's inside
print(t1) # Time(days=0, hours=0, minutes=1)
# ...and access the parts of the Time object by name
print(t1.minutes) # 1
# ...or access them by index
print(t1[2]) # 1
</code></pre>
<p>Now to convert to minutes you can simply do this: </p>
<pre><code>from collections import namedtuple as nt
Time = nt('Time', 'days hours minutes')
def minutes(d: 'days', h: 'hours', m: 'minutes'):
    t = Time(d, h, m)
    return t.days*24*60 + t.hours*60 + t.minutes

#testing
assert minutes(1,1,1) == 24*60 + 60 + 1
</code></pre>
<p>Or you could also change your desired function signature a bit, and do it this way which seems a little more straight forward: </p>
<pre><code>def minutes(t: 'time'):
    return t.days*24*60 + t.hours*60 + t.minutes

#testing
t = Time(1,1,1)
assert minutes(t) == 24*60 + 60 + 1
</code></pre>
<p>EDIT: Didn't realize the point of the question was to understand what the colons are doing. The colons and strings following the arguments in the function signature are not a dictionary; they are <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow">function annotations</a>, which I believe are new in Python 3. </p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/tutorial/" rel="nofollow noreferrer">docs.python.org/2/tutorial</a></span>
<span class="comment-copy">Is there any particular reason you are reinventing the wheel? <a href="https://docs.python.org/2/library/datetime.html" rel="nofollow noreferrer">docs.python.org/2/library/datetime.html</a></span>
<span class="comment-copy">i'm just trying to familiarize myself with basic python variable types, and was confused to see a dictionary type structure as the parameter to a function.. @mgsk</span>
<span class="comment-copy">The colons are not a dictionary structure, they are <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow noreferrer">function annotations</a>.</span>
