<div class="post-text" itemprop="text">
<p>Could someone help me figure out the problem I have with this?</p>
<pre><code>def marbles():
    marbles = 0
    while True:
        try:
            x = eval(input("How many marbles? "))
        except ValueError: 
            print("You can't enter", x , "marbles! How many marbles do you have?")
            continue
        else:
            break
    for i in range(x):
        x = eval(input("Please enter how many marbles between 0 and 100: "))
        if 0 &lt;= x and x &lt;= 100:
            marble = marble + x
        else:
            print("Your number is out of range!")
            y = int(input("Please enter how many marbles between 0 and 100: "))

main()
</code></pre>
<p>I can't seem to figure out why it won't give out the warning that You are not in range when I code 5.4 marbles. Between 0 and 100, I should be allowed to give decimals, but for "How many marbles" I would like to receive that warning to try again. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>is_integer()</code> method. It returns boolean if parameter is whole number or not.</p>
<p>For example </p>
<pre><code>&gt;&gt;&gt; (5.4).is_integer()
False
&gt;&gt;&gt; (1).is_integer()
True
</code></pre>
<p>Check <a href="https://docs.python.org/2/library/stdtypes.html#float.is_integer" rel="nofollow">this documentation.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need string's <a href="https://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="nofollow">isdigit</a> method.
Something like this?</p>
<pre><code>def marbles():
    marbles = 0
    count_flag = False
    while count_flag is False:
        try:
            x = raw_input("How many marbles? ")
            if not x.isdigit():
                raise ValueError
        except ValueError:
            print "You can't enter %s marbles! How many marbles do you have?" % (x)
        else:
            x = int(x)
            count_flag = True
    for i in range(x):
        x = int(input("Please enter how many marbles between 0 and 100: "))
        if 0 &lt;= x and x &lt;= 100:
            marbles = marbles + x
        else:
            print("Your number is out of range!")
            y = int(input("Please enter how many marbles between 0 and 100: "))

    return marbles

print marbles()
</code></pre>
<p>Also, in case of python, instead of doing 0&lt;=x and x&lt;=100, you can do either 0&lt;=x&lt;=100(my preference) or x in range(0, 101). Second one is not recommended though :-)</p>
<p>Also a flaw with your for statement logic. If a user gives two bad inputs, they are not considered. You need a while there also.</p>
<pre><code>while x &gt; 0:
   y = int(input("Please enter how many marbles between 0 and 100: "))
   if 0 &lt;= y and y &lt;= 100:
       marbles = marbles + y
       x -= 1
   else:
       print("Your number is out of range!")
</code></pre>
<p>To be honest, the cleaner practice would be to put the input validation in another function and call it in the marbles function.</p>
<pre><code>def get_number(screen_input):
    flag = False
    while flag is False:
        try:
            x = raw_input(screen_input)
            if not x.isdigit():
                raise ValueEror
        except ValueError:
            print("You can't enter %s marbles! How many marbles do you have?" % (x))
        else:
            return int(x)

def marbles():
    marbles = 0
    x = get_number("How many marbles?")
    while x &gt; 0:
        y = get_number("Please enter how many marbles between 0 and 100:")
        if 0 &lt;= y &lt;= 100:
            marbles += y
            x -= 1
        else:
            print("Your number is out of range!")
    return marbles

print marbles()
</code></pre>
</div>
<span class="comment-copy">Why are you using <code>eval(input(...))</code> in some places (bad!) and <code>int(input(..))</code> in others? Note that if you want to evaluate <i>literals</i>, you should really use the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer" title="Official documentation for the ast module."><code>ast</code></a> module's <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer" title="Official documentation for literal_eval"><code>literal_eval</code></a>. This function is like <code>eval</code> but doesn't interpret <i>arbitrary</i> code, but only python literals, making it safe to use with untrusted inputs.</span>
