<div class="post-text" itemprop="text">
<pre><code>s='s=%r;print(s%%s)';print(s%s)
</code></pre>
<p>I understand % is to replace something in a string by s (but actually who to replace?)
Maybe more intriguing is, why the <code>print(s%%s)</code> become <code>print(s%s)</code> automatically after <code>%s</code> is replaced by <code>s</code> itself?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>"%%"</code> you see in that code is a "conversion specifier" for the older <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow">printf-style of string formatting</a>.</p>
<p>Most conversion specifiers tell Python how to convert an argument that is passed into the <code>%</code> format operator (for instance, <code>"%d"</code> says to convert the next argument to a decimal integer before inserting it into the string).</p>
<p><code>"%%"</code> is different, because it directly converts to a single <code>"%"</code> character without consuming an argument. This conversion is needed in the format string specification, since otherwise any <code>"%"</code> would be taken as the first part of some other code and there would be no easy way to produce a string containing a percent sign.</p>
<p>The code you show is a quine (a program that produces its own code as its output). When it runs <code>print(s%s)</code>, it does a string formatting operation where both the format string, and the single argument are the same string, <code>s</code>.</p>
<p>The <code>"%r"</code> in the string is a conversion specifier that does a <code>repr</code> of its argument. <code>repr</code> on a string produces the string with quotes around it. This is where the quoted string comes from in the output.</p>
<p>The <code>"%%"</code> produces the <code>%</code> operator that appears between the two <code>s</code>'s in the <code>print</code> call. If only one <code>"%"</code> was included in <code>s</code>, you'd get an error about the formatting operation expecting a second argument (since <code>%s</code> is another conversion specifier).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print '% %s' % '' #wrong
print '%% %s' % '' #correct and print '% '
</code></pre>
<p>Think about \\ and \.</p>
</div>
<span class="comment-copy">i changed the problem so now it asks about %%s</span>
<span class="comment-copy"><code>%%</code> is how you write a literal <code>%</code> in a format string.</span>
<span class="comment-copy">no. if i let a="print(s%%s)"</span>
<span class="comment-copy">nothing happened..</span>
<span class="comment-copy">Consider <code>"%s%%s" % 'follow me '</code> =&gt; <code>'follow me %s'</code>.</span>
<span class="comment-copy">I agree with you. But to note if you use "%%" directly, and print it , it is a double percent. E.g: print("%%") and see the output</span>
<span class="comment-copy">It means its behavior is not consistent cross at least print and print with format</span>
<span class="comment-copy">Your right, that by itself,  <code>"%%"</code> is just a string with two percent signs in it. It's only when you use that as a format string that the two characters turn into one. Try <code>"%%" % ()</code>, to format the string with no arguments and you'll see it happen.</span>
<span class="comment-copy">No I am using Python 3</span>
<span class="comment-copy">@bozeng Except the missing <code>()</code>s I don't see a difference here...</span>
<span class="comment-copy">My point is about double %. As more above academic answers had mentioned, any string need to be persentaged mustn't contain a single %. JUST use double % instead.</span>
