<div class="post-text" itemprop="text">
<p>I am a beginner to Python.</p>
<p>I wanted to know if Argparse and JSON could be used together.
Say, I have variables <code>p,q,r</code></p>
<p>I could add them to argparse as - </p>
<pre><code>parser.add_argument('-p','--param1',help='x variable', required=True)
parser.add_argument('-q','--param2',help='y variable', required=True)
parser.add_argument('-r','--param3',help='z variable', required=True)
</code></pre>
<p>Now suppose I wanted to read the same variables from JSON file, is it possible to do it?
So I could input the values either from command line or a JSON file.</p>
<p>JSON input file -</p>
<pre><code>{
    "testOwner": "my name",
    "tests": [
        "test1",
        "test2",
        "test3"
    ],

    "testParameters": {
        "test1": {
            "param1": "0",
            "param2": "20",
            "param3" : "True"
        },

        "test2": {
            "param1": "cc"
        }
    }   
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>args</code> Namespace from <code>parse_args</code> can be transformed into a dictionary with:</p>
<pre><code>argparse_dict = vars(args)
</code></pre>
<p>The JSON values are also in a dictionary, say <code>json_dict</code>.  You can copy selected values from one dictionary to the other, or do a whole scale update:</p>
<pre><code>argparse_dict.update(json_dict)
</code></pre>
<p>This way the <code>json_dict</code> values over write the argparse ones.  </p>
<p>If you want to preserve both, you either need to have different argument (key) names, or the values have to be lists, which you can append or extend.  That takes a bit more work, starting with using the correct <code>nargs</code> value in <code>argparse</code>.</p>
<hr/>
<p>The revised <code>parser</code> produces, with a test input:</p>
<pre><code>In [292]: args=parser.parse_args('-p one -q two -r three'.split())
In [293]: args
Out[293]: Namespace(param1='one', param2='two', param3='three')
In [295]: args_dict = vars(args)    
In [296]: args_dict
Out[296]: {'param1': 'one', 'param2': 'two', 'param3': 'three'}
</code></pre>
<p>The JSON string, when parsed (<code>json.loads</code>?) produces a dictionary like:</p>
<pre><code>In [317]: json_dict
Out[317]: 
{'testOwner': 'my name',
 'testParameters': {'test1': {'param1': '0', 'param2': '20', 'param3': 'True'},
  'test2': {'param1': 'cc'}},
 'tests': ['test1', 'test2', 'test3']}
</code></pre>
<p>I produced this by pasting your display into my Ipython session, but I think the JSON loader produces the same thing</p>
<p>The argparse values could be added with:</p>
<pre><code>In [318]: json_dict['testParameters']['test3']=args_dict
In [319]: json_dict
Out[319]: 
{'testOwner': 'my name',
 'testParameters': {'test1': {'param1': '0', 'param2': '20', 'param3': 'True'},
  'test2': {'param1': 'cc'},
  'test3': {'param1': 'one', 'param2': 'two', 'param3': 'three'}},
 'tests': ['test1', 'test2', 'test3']}
</code></pre>
<p>Here I added it as a 3rd <code>test</code> set, taking (by conincidence) a name from the <code>tests</code> list.  <code>json_dict['testParameters']['test2']=args_dict</code> would replace the values of <code>test2</code>.</p>
<p>One way to add the args values to the undefined values of 'test2' is:</p>
<pre><code>In [320]: args_dict1=args_dict.copy()    
In [322]: args_dict1.update(json_dict['testParameters']['test2'])
In [324]: json_dict['testParameters']['test2']=args_dict1
In [325]: json_dict
Out[325]: 
{'testOwner': 'my name',
 'testParameters': {'test1': {'param1': '0', 'param2': '20', 'param3': 'True'},
  'test2': {'param1': 'cc', 'param2': 'two', 'param3': 'three'},
  'test3': {'param1': 'one', 'param2': 'two', 'param3': 'three'}},
 'tests': ['test1', 'test2', 'test3']}
</code></pre>
<p>I used this version of <code>update</code> to give priority to the 'cc' value in the JSON dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that your JSON file contains a dict of the form:</p>
<pre><code>d = {"name": ["-x", "--xvar"], "help": "Help message", "required": True}
</code></pre>
<p>After creating the parser you could "unpack" the dict like so:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument(*(d.pop("name")), **d) 
# Put the 'name' as name/flag and then unpack the rest of
# the dict as the rest of the arguments
parser.parse_args("--xvar 12".split())
&gt;&gt;&gt; Namespace(xvar='12')
</code></pre>
<p>However this forces you to maintain the dict keys to fit the arguments name of the method <code>add_arguments</code>. You also do not have a simple/straight forward way of using more advance behaviors like using the <code>action</code>, <code>type</code>, <code>choices</code> arguments.</p>
<p>Also you would have to change the form of your dict to contain the various  arguments you want to use. One solution would be to have the name/flag as the key of the dict in a tuple and the arguments would be a dict:</p>
<pre><code>d = {("-x", "--xvar"): {"help": "Help message for x", "required": True}, 
     ("-y", "--yvar"): {"help": "Help message for y", "required": True}}
for names, args in d.iteritems():
    parser.add_argument(*names, **args) # Use a similar unpacking 'magic' as the first example
parser.parse_args("-x 12 --yvar 42".split())
&gt;&gt;&gt; Namespace(xvar='12', yvar='42')
</code></pre>
<p><strong>EDIT</strong>
Given the comments from the OP it looks like he wants to <strong>parse</strong> values taken from a JSON file.</p>
<pre><code>d = {"-x": "12", "-y": "42"}
args = []
for item in d.items():
    args.extend(item)
parser.parse_args(args)
&gt;&gt;&gt; Namespace(xvar='12', yvar='42')
</code></pre>
<p><strong>EDIT 2</strong></p>
<p>Looking at the <code>argparse</code> documentation <a href="https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars" rel="nofollow">this paragraph</a> maybe somewhat relevant.</p>
</div>
<span class="comment-copy">Are you trying to set args from <code>JSON</code> or to specify <code>argsparse</code> options with <code>JSON</code> ?</span>
<span class="comment-copy">As I mentioned I want to configure some variables either from from command line or from JSON input file.</span>
<span class="comment-copy">Do you have to use a <code>JSON</code> file? <code>config</code> usually works better, what's the final structure of your program? <code>argsparse</code> and <code>config</code> modules are just a way to set settings- you can set those settings in any other way as well.</span>
<span class="comment-copy">so the point is I could set these arguments from by command line, or i could get  them on a file by specifying which file to use. it doesn't matter if its JSON, but I thought it was simple to use. But I also have some structured input, so I think JSON is better.</span>
<span class="comment-copy">In that case you want to look at <code>configparser</code> it's in the stdlib ( <a href="https://docs.python.org/2/library/configparser.html" rel="nofollow noreferrer">docs.python.org/2/library/configparser.html</a>) if you need more structure my personal preference is <code>configobj</code> <a href="https://configobj.readthedocs.org/en/latest/configobj.html" rel="nofollow noreferrer">configobj.readthedocs.org/en/latest/configobj.html</a></span>
<span class="comment-copy">great ! this is exactly what i was looking for. thanks !</span>
<span class="comment-copy">You're probably using Python 3 which removed the <code>iteritems</code> method - as stated <a href="http://stackoverflow.com/a/10458567/2003420">here</a>. Instead use the <code>items</code> method.</span>
<span class="comment-copy">actually this is not  really what I am looking for. I wanted to know, if I can specify arguments using both command line or JSON file, for same set of arguments.</span>
<span class="comment-copy">Are you trying to use the value of an argument from the command and if it's not provided use a default value from a config file ? In which case you could just have the values store in a file and use these with the <code>default</code> argument of <code>add_argument</code></span>
<span class="comment-copy">not really, i should be able to input the arguments from command line or from a file, if not they will resort to default values.</span>
<span class="comment-copy">Checkout the edit I made</span>
