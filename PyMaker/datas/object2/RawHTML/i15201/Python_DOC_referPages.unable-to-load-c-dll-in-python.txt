<div class="post-text" itemprop="text">
<p>I have a <strong>C++</strong> <strong>dll</strong> which I'm trying to use it in <strong>Python</strong>, </p>
<pre><code>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; mydll = cdll.LoadLibrary("C:\\TestDll.dll")
</code></pre>
<p>until now there are no errors, system seem to be doing what I wanted, but when I try to access <code>mydll</code>, the Intellisence in the Python IDLE shows the following,</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/RwUpm.png"/></p>
<p>from the above pic, it's clear that the intellisence doesn't show up any available functions of the dll, but when I checked the same TestDll.dll with <code>dumpbin /EXPORTS TestDll.dll</code> it has 45 functions, but none of those functions are available with python.</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/dmYbz.png"/></p>
<p><strong>Please Note</strong>: There are several questions on this topic, I tried the following suggestions but no use,</p>
<ul>
<li><a href="https://stackoverflow.com/a/13268880/1463551">incompatible version of Python installed or the DLL</a> [TestDll.dll &amp; Python both are 32 bit versions]</li>
<li><a href="https://stackoverflow.com/a/252473/1463551">I think ctypes is the way to go</a> [Same Issue, cant see any functions, but loads the dll]</li>
</ul>
<p>Now my question is how do I load all the available functions(as shown by dumpbin)?</p>
<p><strong>Edit 1</strong></p>
<p>Based on <a href="https://stackoverflow.com/users/205580/eryksun">eryksun</a> suggestion, I was able to make some progress. The <code>TestDll.dll</code> comes along with a header file <code>TestDll.h</code>(my bad I missed this file earlier), from which I could see the available Exported Functions.</p>
<p><strong><code>TestDll.h:</code></strong> </p>
<pre><code>_stdcall Function1 (const char* prtFileString, cont char* prtDescrip, struct FileParams* ptrParsms);

struct FileParams
{
  float val1;
  void* pMarker;
};
</code></pre>
<p>now I've tried the following,</p>
<pre><code>&gt;&gt;&gt; mydll = CDLL("c:\\TestDll.dll")
&gt;&gt;&gt; Function1 = mydll.Function1
&gt;&gt;&gt; Function1.restype = c_int
</code></pre>
<p>until now it's fine, but when I try to define the <strong>argTypes</strong>, not sure how to do it for structs?</p>
<pre><code>&gt;&gt;&gt; Function1.argtypes = (c_char_c, c_char_c, ???)
</code></pre>
<p>any suggestions are much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on your header, here's a dummy C file (for Windows) that can be used to test a <code>ctypes</code> wrapper.  You mentioned C++ but the example was a C interface, which is a good thing because <code>ctypes</code> works with C functions not C++.</p>
<h3>x.c</h3>
<pre><code>#include &lt;stdio.h&gt;

struct FileParams
{
  float val1;
  void* pMarker;
};

__declspec(dllexport) _stdcall Function1 (const char* prtFileString, const char* prtDescrip, struct FileParams* ptrParsms)
{
    printf("%s\n%s\n%f %p\n",prtFileString,prtDescrip,ptrParsms-&gt;val1,ptrParsms-&gt;pMarker);
}
</code></pre>
<p>Here's the <code>ctypes</code> wrapper.  Note that <code>ctypes</code> does not inspect the DLL and automatically load all the functions.  You have to declare the functions, parameters and return values yourself.  See <a href="https://docs.python.org/3/library/ctypes.html#structures-and-unions" rel="nofollow">ctypes:structures and unions</a> for the <code>Structure</code> syntax.</p>
<p>Also note that for a DLL with <code>_stdcall</code> functions use <code>WinDLL</code> instead of <code>CDLL</code>.</p>
<h3>x.py</h3>
<pre><code>#!python3
import ctypes

class FileParams(ctypes.Structure):
    _fields_ = [('val1',ctypes.c_float),
                ('pMarker',ctypes.c_void_p)]

    x = ctypes.WinDLL('x')
    x.Function1.argtypes = [ctypes.c_char_p,ctypes.c_char_p,ctypes.POINTER(FileParams)]
    x.Function1.restype = ctypes.c_int

    fp = FileParams(1.234,None)
    x.Function1(b'abc',b'def',ctypes.byref(fp))
</code></pre>
<p>And the output:</p>
<pre><code>abc
def
1.234000 0000000000000000
</code></pre>
</div>
<span class="comment-copy">Do you have C-wrappers around your C++ functions? See <a href="http://stackoverflow.com/questions/10163832/python-simple-ctypes-dll-load-yields-error/10163943#10163943" title="python simple ctypes dll load yields error">stackoverflow.com/questions/10163832/â€¦</a></span>
<span class="comment-copy">Not sure if that's the case</span>
<span class="comment-copy">Then you probably don't -- ctypes only works with C. You have to go through some extra steps to use C++.</span>
<span class="comment-copy">ctypes won't parse PE image exports as dumpbin does (nor other platforms such as Linux ELF). Load the DLL with <code>mydll = CDLL("TestDll")</code>. To instantiate a <code>_CFuncPtr</code>, get an exported name as an attribute, e.g. <code>foo = mydll.foo</code>, and define the prototype via <code>foo.restype</code> and <code>foo.argtypes</code>. Or call a prototype (<code>_CFuncPtr</code> subclass) with a tuple of a name and lib, e.g. <code>foo = CFUNCTYPE(c_int, c_char_p)(('foo', mydll))</code>. On Windows this is implemented via <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683212%28v=vs.85%29.aspx" rel="nofollow noreferrer"><code>GetProcAddress</code></a>.</span>
<span class="comment-copy">Here's an example. <code>msvc = CDLL('msvcr100');</code> <code>atoi = msvc.atoi; atoi.restype = c_int; atoi.argtypes = (c_char_p,)</code>. Or instantiate a prototype: <code>atoi = CFUNCTYPE(c_int, c_char_p)(('atoi', msvc))</code>. Either way, <code>assert atoi(b'123') == 123</code>.</span>
