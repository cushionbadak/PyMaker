<div class="post-text" itemprop="text">
<p>I'm dealing with the following Water Buckets program, where I can't seem to invoke the program since it as two classes and the first class is used with the second. I'm just a beginner so I was wondering what I'm doing wrong in the invocation process and what rules beginners like me should be aware of to avoid these problems.</p>
<p>I did some research, but I found it hard to adapt the solutions to this problem since I'm not sure what the error means when it says "dict' object has no attribute 'has_key''. It would be great if it could be put in simpler terms since many people (including me) are new to CS and Python.</p>
<p>Code:</p>
<pre><code>class manager:
    """ Manage game queue. keep track of states already seen
      and who their parent states are"""
    def __init__ (self) :
        self.queue = []
        self.seen  = {}

    def getState (self) :
        "return next state and pop it off the queue"

        if not self.queue : return None
        state = self.queue[0]
        self.queue = self.queue[1:]
        return state

    def addState (self, parentState, newState) :
        "add state if it's new. Remember its parent"
        if self.seen.has_key(str(newState)) : return
        self.seen[str(newState)] = str(parentState)
        self.queue.append (newState)
        #print '--- Adding ', newState

    def getSolution (self) :
        "Return solution from latest state added"
        solution = []
        state = self.queue[-1]
        while state :
            solution.append (str(state))
            state = self.getParent(state)
        solution.reverse()
        return solution

    def getParent (self, childState) :
        """return parent of state, if it exists"""
        try    : return self.seen[str(childState)]
        except : return None

class bucketPlayer:
    def __init__ (self, manager) :
        self.manager = manager

    def test (self, oldstate, newstate) :
        [newA, newB] = newstate
        won = (newA == self.goal or newB == self.goal)
        self.manager.addState (oldstate, newstate)
        return won

    def playGame (self, aMax, bMax, goal) :
        "grab a state and generate 8 more to submit to the manager"
        self.goal = goal
        self.manager.addState("", [0,0])   # start with 2 empty buckets
        while 1 :
            oldstate = self.manager.getState()
            [aHas,bHas] = oldstate
            if self.test (oldstate, [aMax,bHas]): break # fill A from well
            if self.test (oldstate, [0   ,bHas]): break # empty A to well
            if self.test (oldstate, [aHas,bMax]): break # fill B from well
            if self.test (oldstate, [aHas,0   ]): break # empty B to well
            howmuch = min(aHas, bMax-bHas)
            if self.test (oldstate, [aHas-howmuch,bHas+howmuch]): break # pour A to B
            howmuch = min(bHas, aMax-aHas)
            if self.test (oldstate, [aHas+howmuch,bHas-howmuch]): break # pour B to A
        print ("Solution is: ")
        print (string.join (self.manager.getSolution(), "\n"))


m = manager()
p = bucketPlayer(m)
# A=7 liters, B=11 liters, Want=6
p.playGame(7,11,6)
</code></pre>
<p>Error:</p>
<pre><code>Traceback (most recent call last):
  File "/Applications/Python 3.4/Portfolio Projects/Project 4.py", line 70, in &lt;module&gt;
    p.playGame(7,11,6)
  File "/Applications/Python 3.4/Portfolio Projects/Project 4.py", line 51, in playGame
    self.manager.addState("", [0,0])   # start with 2 empty buckets
  File "/Applications/Python 3.4/Portfolio Projects/Project 4.py", line 18, in addState
    if self.seen.has_key(str(newState)) : return
AttributeError: 'dict' object has no attribute 'has_key'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The older <a href="https://docs.python.org/2/library/stdtypes.html#dict.has_key" rel="nofollow">has_key</a> method has been depricated and <a href="https://docs.python.org/3.1/whatsnew/3.0.html#builtins" rel="nofollow">was removed completely</a> in Python 3.x</p>
<p>Use <code>if key in dict:</code> form of the <a href="https://docs.python.org/3.1/reference/expressions.html#in" rel="nofollow">in conditional</a> instead:</p>
<pre><code>if str(newState) in self.seen : return
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.1/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">has_key</a> was removed in Python 3.X Use <code>in</code> instead.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">The documentation</a> and the <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">Tutorial</a> might help give you a <i>leg-up</i>.</span>
<span class="comment-copy">This really doesn't have anything to do with multiple classes or "invocation rules".</span>
<span class="comment-copy">Thanks! I'm still getting familiar with the differences between Python 2 and 3. I think that's why I was confused with my research.</span>
<span class="comment-copy">I'm still getting familiar with the differences between Python 2 and 3, that's why I think I was getting confused. I changed the syntax and removed the string.join function and it now works. Thank you I really appreciate it.</span>
