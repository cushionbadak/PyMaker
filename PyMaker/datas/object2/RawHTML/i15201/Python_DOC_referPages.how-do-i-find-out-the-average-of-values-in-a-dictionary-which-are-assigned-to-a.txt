<div class="post-text" itemprop="text">
<p>I have made a bit of code which adds the results of test scores from a text file to a python dictionary in the format of this:</p>
<pre><code>{'Ruan': '22', 'hello': [22, 1], 'kurun': '29'}
</code></pre>
<p>And i want to work out the average of everyones scores and this is what i have tried so far:</p>
<pre><code>while choice == 'av':
    if schClass == '1':
     schClass = open("scores1.txt", 'r')
     li = open("scores1.txt", 'r')
     data = li.read().splitlines()
     for li in data:
        name = li.split(":")[0]
        score = li.split(":")[1]
        if name not in diction1:
            diction1[name] = score
        if name in diction1:
                    diction1[name] = [int(diction1[name]),int(score)]       
        print(diction1)
        averages_dct = {}
        for name in diction1:
            student_average = sum((diction1[name])) / len((diction1[name]))
            averages_dct.update({name: student_average})
        reversed_dct = {averages_dct[k]: [] for k in averages_dct}
        for average in reversed_dct:
            for name in averages_dct:
                if average == averages_dct[name]:
                           reversed_dct[average].append(name)
                           for av in sorted(reversed_dct, reverse=True):
                               print('average: %s, students: %s' % (av, reversed_dct[av]))
</code></pre>
<p>This is the error:</p>
<pre><code>    student_average = sum((diction1[name])) / len((diction1[name]))
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>I do nut understand what this means fully and dont know how to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is rather unwise to mix both strings and list of integers in you data-structure. You should try something like that instead. This will help further calculations:</p>
<pre><code>while choice == 'av':
    if schClass == '1':
     schClass = open("scores1.txt", 'r')
     li = open("scores1.txt", 'r')
     data = li.read().splitlines()
     for li in data:
        name = li.split(":")[0]
        score = li.split(":")[1]

        diction1.setdefault(name,[]).append(int(score))

     # The following loop should work,
     # even if it can be optimized (see Padraic's answer)
     for name in diction1:
        student_average = sum(diction1[name]) / len(diction1[name])
        averages_dct[name] = student_average
     ...
</code></pre>
<p>Set the doc of <a href="https://docs.python.org/2/library/stdtypes.html#dict.setdefault" rel="nofollow"><code>setdefault</code></a> for the details.</p>
<p>Since I don't have your input data file, I cannot really test it, but this should produce something like that:</p>
<pre><code>{'Ruan': [22], 'hello': [22, 1], 'kurun': [29]}
</code></pre>
<p>After that the rest of your code should work as you now uniformly have list of integers. Whatever is the number of "scores" for the same player.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure what all the code is doing but using  a <a href="https://docs.python.org/3.4/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a> and storing all scores in a list will be easier to sum and average,a defaultdict will add the name and append if that key  does not exist or just append each score if it does, it is more efficient than using <code>dict.setdefault</code>:</p>
<pre><code>from collections import defaultdict


diction1 = defaultdict(list)
averages_dct = {}
student_average = {}
while choice == 'av': # 
    if schClass == '1': # not sure what this is supposed to do
        schClass = open("scores1.txt", 'r')
    with open("scores1.txt") as f:
        for li in f: # just iterate over the file object
            name, score = li.split(":") # split once and unpack
            # append score cast as int to the list
            diction1[name].append(int(score))
    # now average scores for each using calling sum on lists of ints
    for name,scores in diction1.items():
        student_average = sum(scores) / len(scores)
        averages_dct[name] = student_average
</code></pre>
<p>I presume your next loop is to find names with the same average scores so again we can use a defaultdict using averages as keys and appending names that have the same average:</p>
<pre><code>common_dct = defaultdict(list)
# use items to get the key and value
for name, average in averages_dct.items():
    common_dct[averages_dct].append(name)
</code></pre>
<p>If you don't want to actually use the common_dict you can do the grouping of names in the previous  loop reversing the logic using scores as keys and appending names.</p>
<p>You can also let the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow">statistics</a> module take care of the average replacing the code with:</p>
<pre><code>from statistics import mean
for name,scores in diction1.items():
    student_average = mean(scores)
    averages_dct[name] = student_average
</code></pre>
</div>
<span class="comment-copy">you cannot call sum on  an int</span>
<span class="comment-copy">also I suspect <code>name,score  = li.split(":")</code> will work and replace the dict with a defaultdict</span>
<span class="comment-copy">okay cheers @PadraicCunningham And what do i do instead of sum?</span>
<span class="comment-copy">noob, added an answer that will remove a lost of unnecessary code</span>
<span class="comment-copy">cheers you helped me so much @Sylvain Leroux</span>
