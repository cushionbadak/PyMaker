<div class="post-text" itemprop="text">
<p>I have any array of values, that are often the same and I am trying to find the index of the smallest one. But I want to know all the objects that are the same.</p>
<p>So for example I have the array <code>a = [1, 2, 3, 4]</code> and to find the index of the smallest one I use <code>a.index(min(a))</code> and this returns 0. But if I had an array of <code>a = [1, 1, 1, 1]</code>, using the same thing would still return 0.</p>
<p>I want to know that multiple indices match what I am searching for and what those indices are. How would I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list.index(value)</code> returns the index of the <em>first</em> occurrence of <code>value</code> in <code>list</code>.</p>
<p>A better idea is to use a simple list comprehension and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a>:</p>
<pre><code>indices = [i for i, x in enumerate(iterable) if x == v]
</code></pre>
<p>where <code>v</code> is the value you want to search for and <code>iterable</code> is an object that supports iterator protocol e.g. it can be a generator or a sequence (like <code>list</code>).</p>
<p>For your specific use case, that'll look like</p>
<pre><code>def smallest(seq):
    m = min(seq)
    return [i for i, x in enumerate(seq) if x == m]
</code></pre>
<p>Some examples:</p>
<pre><code>In [23]: smallest([1, 2, 3, 4])
Out[23]: [0]

In [24]: smallest([1, 1, 1, 1])
Out[24]: [0, 1, 2, 3]
</code></pre>
<p>If you're not sure whether the <code>seq</code> is empty or not, you can pass the <code>default=-1</code> (or some other value) argument to <code>min</code> function (in Python 3.4+):</p>
<pre><code>m = min(seq, default=-1)
</code></pre>
<p>Consider using <code>m = min(seq or (-1,))</code> (again, any value) instead, when using older Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>A different approach using <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html" rel="nofollow">numpy.where</a> could look like</p>
<pre><code>In [1]: import numpy as np
In [2]: def np_smallest(seq):
   ...:     return np.where(seq==seq.min())[0]

In [3]: np_smallest(np.array([1,1,1,1]))
Out[3]: array([0, 1, 2, 3])

In [4]: np_smallest(np.array([1,2,3,4]))
Out[4]: array([0])
</code></pre>
<p>This approach is slighly less efficient than the list comprehension for small list but if you face large arrays, numpy may save you some time.</p>
<pre><code>In [5]: seq = np.random.randint(100, size=1000)
In [6]: %timeit np_smallest(seq)
100000 loops, best of 3: 10.1 µs per loop
In [7]: %timeit smallest(seq)
1000 loops, best of 3: 194 µs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my solution:</p>
<pre><code>def all_smallest(seq):
    """Takes sequence, returns list of all smallest elements"""
    min_i = min(seq)
    amount = seq.count(min_i)
    ans = []
    if amount &gt; 1:
        for n, i in enumerate(seq):
            if i == min_i:
                ans.append(n)
            if len(ans) == amount:
                return ans            
    return [seq.index(min_i)]
</code></pre>
<p>Code very straightforward I think here all clear without any explanation.</p>
</div>
<span class="comment-copy">he didnt actually say he needed the actual indices ... just <code>.count</code> might have sufficed</span>
<span class="comment-copy">@JoranBeasley I don't think so. He wants all the indices. "I am trying to find the index of the smallest one. But I want to know all the objects that are the same."</span>
<span class="comment-copy">I think you are probably right however "I want to know that multiple indices match what I am searching for. " and the title "How to tell when more than one index matches?" doesnt sound like he cares where those indexes are just that there is more than one min</span>
<span class="comment-copy">Go by the question text, not the title (which has to be reasonably short). He wants to know <i>all the objects</i>, and you know an object generally by its reference, so he should know what the index of each one is in the list.</span>
<span class="comment-copy">Thanks guys, this is exactly what I was looking for. I edited the question to make that a bit clearer.</span>
<span class="comment-copy">You just did the exact same thing as @vaultah's answer, but without a list comprehension, making it not as efficient.</span>
<span class="comment-copy">If there is only one element in sequence it more efficient than list comprehension, it goes through all elements only once, list comprehension goes anyway does more useless work, but you can replace for loop with list comprehension in my solution. It saves you two lines of code.</span>
