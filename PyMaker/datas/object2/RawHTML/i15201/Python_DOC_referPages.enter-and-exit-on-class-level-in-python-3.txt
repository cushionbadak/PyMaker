<div class="post-text" itemprop="text">
<p>I am unsuccessfully trying to get the magic <code>with</code>-statement methods <code>__enter__</code> and <code>__exit__</code> running on class-level:</p>
<pre><code>class Spam():

    @classmethod
    def __enter__(cls):
        return cls

    @classmethod
    def __exit__(cls, typ, value, tb):
        cls.cleanup_stuff()


with Spam:
    pass
</code></pre>
<p>However, this will result in an <code>AttributeError</code>:</p>
<pre><code>Traceback (most recent call last):
  File "./test.py", line 15, in &lt;module&gt;
    with Spam:
AttributeError: __exit__
</code></pre>
<p>Is it possible to use the <code>__enter__</code> and <code>__exit__</code> methods on class-level anyway?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__enter__</code> and <code>__exit__</code> are special methods, and as such only work correctly when <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="noreferrer">defined on a object's type</a>, not in it's instance dictionary.</p>
<p>Now <code>Spam</code> is a instance of <code>type</code>, and <code>type(Spam).__enter__</code> and <code>type(Spam).__exit__</code> do not exist. Therefore you get an attribute error.</p>
<p>To make this work, the methods would need to be declared on the metaclass of the class you want to use. Example:</p>
<pre><code>class Spam(type):

    def __enter__(cls):
        print('enter')
        return cls

    def __exit__(cls, typ, value, tb):
        print('exit')

class Eggs(metaclass=Spam):
    pass

with Eggs:
    pass
</code></pre>
<p>Now <code>Eggs</code> is an instance of <code>Spam</code> (<code>type(Eggs)</code> == <code>Spam</code>, and therefore <code>type(Eggs).__enter__</code> and <code>type(Eggs).__exit__</code> do exist).</p>
<p>However defining a metaclass just to use an instance of it as a context manager seems a little over the top. The more straight forward solution starting from your example would be to just use</p>
<pre><code>with Spam():
    pass
</code></pre>
<p>Or if you want to reuse the same instance later:</p>
<pre><code>spam = Spam()
with spam:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems that CPython doesn't call a bound method like <code>instance.__exit__</code>, it seeks over instance type, doing something like <code>type(instance).__dict__['__exit__']</code> than calls it. And since <code>type(Spam)</code> is a special <code>type</code> object (not a <code>Spam</code> itself), it doesn't contain <code>__exit__</code> method. </p>
<p>I tried to workaround that using metaclasses, but wasn't successful. <code>__getattr__</code> doesn't work either.</p>
<p>See here: <a href="https://github.com/python/cpython/blob/2545fdbd4b4a6a77b132fccf816578f59b609be5/Objects/typeobject.c#L1362" rel="nofollow">https://github.com/python/cpython/blob/2545fdbd4b4a6a77b132fccf816578f59b609be5/Objects/typeobject.c#L1362</a></p>
<ul>
<li>Py_TYPE is similiar to <code>type(self)</code></li>
<li>_PyType_LookupId walks over <code>type(self).__dict__</code> (no <code>__getattr__</code> call here)</li>
</ul>
<p>Python 2 implementation is different, but main idea about getting <code>type(self)</code> applies to it too</p>
</div>
<span class="comment-copy">Why would you even try to do this?  My advice is to use the with statement as intended.</span>
<span class="comment-copy">I am intending to extend the peewee.Model class with a class-level cleanup capability.</span>
<span class="comment-copy">I think then that the @classmethod should not be needed anymore.</span>
<span class="comment-copy">There is a difference in which class will be passed as <code>cls</code> with and without classmethod, with it will be <code>Spam</code>, without it will be <code>Eggs</code>, so while it's technically not needed, it's not the same.</span>
<span class="comment-copy">+1 but please remove the <code>@classmethod</code> decorators.  The first argument to a metaclass method is <i>already a class</i>.  Decorating with <code>@classmethod</code> means you get the metaclass instead of the class, which is rarely what you want.</span>
<span class="comment-copy">Thanks. That's exactly what I was looking for.</span>
<span class="comment-copy">@Kevin Ok, removed it, you and @nneonneo are correct, it makes little sense to have it on the metaclass. This way the <code>cleanup_stuff</code> method could also be declared on <code>Eggs</code> and not only on <code>Spam</code>...</span>
