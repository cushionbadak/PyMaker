<div class="post-text" itemprop="text">
<p>Consider the following:</p>
<pre><code>PyObject* fmt = PyUnicode_FromString("{0!r}");
PyObject* tup = PyTuple_New(2);
PyTuple_SetItem(tup, 0, PyUnicode_FromString("hello"));
PyTuple_SetItem(tup, 1, PyUnicode_FromString("world"));
PyObject* formatted = PyObject_CallMethod(fmt, "format", "O", tup);
PyObject* bytes = PyUnicode_AsEncodedString(formatted, "UTF-8", "strict");
printf(PyBytes_AS_STRING(bytes));
</code></pre>
<p>I expect it to act like this python code:</p>
<pre><code>&gt;&gt;&gt; u'{0!r}'.format((u"hello", u"world"))
"(u'hello', u'world')"
</code></pre>
<p>However my output is simply:</p>
<pre><code>u'hello'
</code></pre>
<p>I can imagine it is actually calling the function like:</p>
<pre><code>&gt;&gt;&gt; u'{0!r}'.format(u"hello", u"world")
u'hello'
</code></pre>
<p>What I'm looking for:</p>
<ol>
<li>Why?</li>
<li>What is the minimal change can I get to have my expected output?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The issue appears to be with the way <code>Py_BuildValue</code> works (which seems to be used by <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_CallMethod" rel="nofollow"><code>PyObject_CallMethod</code></a>). From the <a href="https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue" rel="nofollow">docs</a> (emphasis mine):</p>
<blockquote>
<p>Py_BuildValue() does not always build a tuple. It builds a tuple only
  if its format string contains two or more format units. If the format
  string is empty, it returns None; <strong>if it contains exactly one format
  unit, it returns whatever object is described by that format unit.</strong> To
  force it to return a tuple of size 0 or one, parenthesize the format
  string.</p>
</blockquote>
<p>This means that instead of building the format string <code>"O"</code> with <code>tup</code> into <code>args=(tup,)</code> and calling <code>fmt.format(*args)</code> (expanding to <code>fmt.format(("hello", "world"))</code>, it builds <code>args=tup</code>, and so <code>fmt.format(*args)</code> expands to <code>fmt.format("hello", "world")</code>, as you thought. The solution is also in the <a href="https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue" rel="nofollow">docs</a>:</p>
<blockquote>
<p>To force it to return a tuple of size 0 or one, parenthesize the format
  string.</p>
</blockquote>
<p>So, just change:</p>
<pre><code>PyObject* formatted = PyObject_CallMethod(fmt, "format", "O", tup);
</code></pre>
<p>To:</p>
<pre><code>PyObject* formatted = PyObject_CallMethod(fmt, "format", "(O)", tup);
</code></pre>
<p>And you get the desired output of <code>('hello', 'world')</code>. Full code snippet (compiled with <code>gcc thissnippet.c -I /usr/include/python3.4m/ -l python3.4m</code>):</p>
<pre><code>#include &lt;Python.h&gt;
int main() {
    Py_Initialize();
    PyObject* fmt = PyUnicode_FromString("{0!r}");
    PyObject* tup = PyTuple_New(2);
    PyTuple_SetItem(tup, 0, PyUnicode_FromString("hello"));
    PyTuple_SetItem(tup, 1, PyUnicode_FromString("world"));
    PyObject* formatted = PyObject_CallMethod(fmt, "format", "(O)", tup);
    PyObject* bytes = PyUnicode_AsEncodedString(formatted, "UTF-8", "strict");
    printf(PyBytes_AS_STRING(bytes));
    Py_Finalize();
}
</code></pre>
</div>
