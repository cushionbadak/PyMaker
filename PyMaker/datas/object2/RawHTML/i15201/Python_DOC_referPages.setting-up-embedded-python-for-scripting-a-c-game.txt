<div class="post-text" itemprop="text">
<p>I'm having trouble achieving this. What I'm stuck with is trying to expose Modules written in C++ to an embedded python interpreter. </p>
<p>I'm using boost::python, but I'm not sure what I'm supposed to do for this, as the documentation seems to be lacking, to say the least. </p>
<p>What I want is to expose some C++ code with BOOST_PYTHON_MODULE, and then access that from <em>the same application</em>. However I can't get it to import. What I've got, which seem the closest (just relevant part):</p>
<pre><code>#include &lt;python/interpreter.hpp&gt;

bp::object blag() {
    return bp::str("Thingy");
}

BOOST_PYTHON_MODULE(modthingy) {
    bp::def("blag", &amp;blag);
}


Interpreter::Interpreter() {
    Py_UnbufferedStdioFlag = 1;
    Py_Initialize();
    try {
        init_module_modthingy();
    } catch (bp::error_already_set) {
        PyErr_Print();
    }

    main_module = bp::import("__main__");
    main_namespace = main_module.attr("__dict__");
}
</code></pre>
<p>But that prints the Error <code>AttributeError: 'NoneType' object has no attribute '__dict__'</code>
And I can't import the module later.</p>
<p>How should this be structured?</p>
<p>EDIT:
Ok, so the closest I got was one of the methods in the accepted answer:</p>
<pre><code>PyImport_AppendInittab("modthingy", &amp;PyInit_modthingy);
Py_Initialize();
</code></pre>
<p>However, this doesn't seem particularly useful in my case, as I'd like to be able to add/import modules after the Initialize function. I'm going to look into a few things, namely:</p>
<ul>
<li>See if I can get the suggested approach for python 2 working in python 3</li>
<li>See if I can nicely structure my game to require naming all of the modules before Py_Initialize</li>
</ul>
<p>I'll update this post with my findings.</p>
</div>
<div class="post-text" itemprop="text">
<p>Boost.Python uses the <a href="http://www.boost.org/doc/libs/1_57_0/libs/python/doc/v2/module.html#BOOST_PYTHON_MODULE-spec" rel="nofollow"><code>BOOST_PYTHON_MODULE</code></a> macro to define a Python module initializer.  The resulting function is not the module importer.  This difference is similar to that of creating a <code>modthingy.py</code> module and calling <code>import modthingy</code>.</p>
<p>When importing a module, Python will first check if the module is a built-in module.  If the module is not there, then Python will then search the <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow">module search path</a> trying to find a python file or library based on the module name.  If a library is found, then Python expects the library to provide a function that will initialize the module.  Once found, the import will create an empty module in the modules table, then initialize it.  For statically linked modules, such as <code>modthingy</code>, the module search path will not be helpful, as there is no library for it to find.</p>
<p>For embedding, the <a href="https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function" rel="nofollow">module table and initialization function</a> documentation states that for static modules, the module initializer function will not be automatically called unless there is an entry in the initialization table.  For Python 2 and Python 3, one can accomplish this by calling  <a href="https://docs.python.org/3/c-api/import.html#c.PyImport_AppendInittab" rel="nofollow"><code>PyImport_AppendInittab()</code></a> before <a href="https://docs.python.org/3/c-api/init.html#c.Py_Initialize" rel="nofollow"><code>Py_Initialize()</code></a>:</p>
<pre class="lang-cpp prettyprint-override"><code>BOOST_PYTHON_MODULE(modthingy)
{
  // ...
}

PyImport_AppendInittab("modthingy", &amp;initmodthingy);
Py_Initialize();
// ...
boost::python::object modthingy = boost::python::import("modthingy");
</code></pre>
<p>Alternatively, for Python 2, once the interpreter has been initialized, one can create an empty module that is added to the modules dictionary via <a href="https://docs.python.org/2/c-api/import.html#c.PyImport_AddModule" rel="nofollow"><code>PyImport_AddModule()</code></a>, then explicitly initialize the module.</p>
<pre class="lang-cpp prettyprint-override"><code>BOOST_PYTHON_MODULE(modthingy)
{
  // ...
}

Py_Initialize();
PyImport_AddModule("modythingy");
initmodthingy();
boost::python::object modthingy = boost::python::import("modthingy");
</code></pre>
<p>This approach is demonstrated in the official Python embedded demo, <a href="https://github.com/python-git/python/blob/master/Demo/embed/demo.c" rel="nofollow">embed/demo.c</a>. The module initializer created from <code>BOOST_PYTHON_MODULE</code> does not call <code>PyImport_AddModule()</code>, thus it must be explicitly called.</p>
<p>Also note that the Python's C API for embedding changed naming conventions for module initialization functions between Python 2 and 3, so for <code>BOOST_PYTHON_MODULE(modthingy)</code>, one may need to use <code>&amp;initmodthingy</code> for Python 2 and <code>&amp;PyInit_modthingy</code> for Python 3.</p>
<hr/>
<p>Here is a minimal complete example demonstrating importing a module statically linked with the embedded interpreter:</p>
<pre class="lang-cpp prettyprint-override"><code>#include &lt;iostream&gt;
#include &lt;string&gt;

#include &lt;boost/python.hpp&gt;

std::string spam() { return "Spam spam spam"; }

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  python::def("spam", &amp;spam);
}

int main()
{
  // Add example to built-in.
  PyImport_AppendInittab("example", &amp;initexample);

  // Start the interpreter.
  Py_Initialize();

  namespace python = boost::python;
  try
  {
    // &gt;&gt;&gt; import example
    python::object example = python::import("example");
    // &gt;&gt;&gt; x = example.spam()
    python::object x = example.attr("spam")();
    // &gt;&gt;&gt; print x
    std::cout &lt;&lt; "x = " &lt;&lt; python::extract&lt;std::string&gt;(x)() &lt;&lt; std::endl;
  }
  catch (const python::error_already_set&amp;)
  {
    PyErr_Print();
  }
}
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>x = Spam spam spam
</code></pre>
</div>
<span class="comment-copy">Just thought I'd say that I've given up. Python really doesn't seem to work too well for what I want to use it for. The documentation for boost.python is really, really old (although I believe that is because the library has changed very little in the last 12 years), and there are barely any examples on the web. I'm now looking into more dedicated scripting languages, namely chaiscript and angelscript. They seem like they would suit my needs better.   EDIT: But I'll certainly be using boost.python in the future for writing python extensions - that is where it really shines.</span>
<span class="comment-copy">Beautiful! That did the trick. I guess I was looking for the wrong documentation. I don't suppose you have a link to the docs/example explaining this, or is this just from your own experience? Thanks!</span>
<span class="comment-copy">@Jagoly The subtle details are briefly covered in the <a href="https://docs.python.org/2/extending/extending.html#the-module-s-method-table-and-initialization-function" rel="nofollow noreferrer">module table and initialization function</a> documentation.  I have updated the answer to try to provide more details, as well as links to the relevant documentation and functions.</span>
<span class="comment-copy">Hmm, I can get the AppendInittab method working, but not the AddModule one, which seems much nicer (being able to add modules after initialisation). The module imports, but upon trying to use it, it just says it doesn't have attribute blag. It just looks like a blank module. PyInit_modthingy seemingly does nothing. I'm using Python 3 btw.</span>
<span class="comment-copy">Import behavior details changed a bit between 2 and 3.  The approach with <code>PyImport_AddModule()</code> is for Python 2 only.</span>
<span class="comment-copy">Ok, so how do I go about doing that (adding modules after initialisation) with python 3?</span>
