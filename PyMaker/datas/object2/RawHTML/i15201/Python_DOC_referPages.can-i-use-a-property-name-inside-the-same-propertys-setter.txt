<div class="post-text" itemprop="text">
<p>Assuming the code below:</p>
<pre><code>class my_class():
    ''' some code '''
    @property
    def x(self):
        ''' some initialization code '''

    @property.setter
    def x(self, val):
        x = val
</code></pre>
<p>The above code works on my implementation (3.4.2 on Windows) but is it a safe way to do this or will it be better if I duplicated the initialization code from getter in the setter?</p>
</div>
<div class="post-text" itemprop="text">
<p>As BrenBarn mentioned, the setter doesn't do what you think it does. Here's how to do this right:</p>
<pre><code>class my_class(object):

    def __init__(self, x):
        self._x = x # Or whatever name you want except x

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        """
        Do whatever you want in here (presumably you want to do *something*
        otherwise why use the property decorator)?
        """
        self._x = value
</code></pre>
</div>
<span class="comment-copy">It "works" by doing nothing.  <code>x = val</code> just creates a local variable called <code>x</code>.  If you try to do <code>self.x = val</code>, you will create an infinite loop.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#property</a></span>
