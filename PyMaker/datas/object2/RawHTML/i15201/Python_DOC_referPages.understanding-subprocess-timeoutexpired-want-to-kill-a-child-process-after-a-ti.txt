<div class="post-text" itemprop="text">
<p>can somebody help me understand how the timeout parameter works in the subprocess module, and how to properly use the subprocess.TimeoutExpired exception?</p>
<p>My usecase is I have a main runner program that runs a child process as part of its repeated routine. The child process is known to hang from time to time. I would like to prevent this hang from holding everything up.</p>
<p>I was thinking i could use the timeout parameter to give the child only so long to run. However, in my sample programs below the behavior is not what I expected.  When parent.py is run, it does launch child.py and I can see the output of child.py counting up. After 4s parent.py does get the subprocess.TimeoutExpired exception, however output from child.py keeps coming. This leads me to believe that child.py process has not actually been killed.  The docs seem to suggest it will be killed however:</p>
<blockquote>
<p>The timeout argument is passed to Popen.wait(). If the timeout expires, the child process will be killed and then waited for again. The TimeoutExpired exception will be re-raised after the child process has terminated.</p>
</blockquote>
<p>So how might I finish this problem off? Do I need to somehow kill my child process myself when I receive the timeout exception?</p>
<p>Thanks for the help.</p>
<p>parent.py</p>
<pre><code>#!/usr/bin/env python3

import os
import sys
import subprocess

p = subprocess.Popen("/path/to/python3 /path/to/child.py", shell=True)
try:
    p.wait(timeout=4)
except subprocess.TimeoutExpired:
    print("we got a timeout. exiting")
    sys.exit(1)
</code></pre>
<p>child.py</p>
<pre><code>#!/usr/bin/env python3

import os
import sys
import time

for i in range(200):
    print("i is {}".format(i))
    time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It does appear you need to add a call</p>
<pre><code>    p.terminate()
</code></pre>
<p>before the <code>sys.exit</code> in your parent process -- per the current docs at <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.Popen</a> the bit you quote only applies to <code>subprocess.call</code>, and that's <strong>not</strong> what you're using here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Taken from the documentation:</p>
<p><code>If the process does not terminate after timeout seconds, raise a TimeoutExpired exception. It is safe to catch this exception and retry the wait.</code></p>
<p>Meaning that you can catch the exception and unless you kill the process (or python) the process will continue executing. In your case since you're doing a </p>
<pre><code>sys.exit(1)
</code></pre>
<p>Then python itself will be terminated and the Popen object will be garbage collected.</p>
</div>
<span class="comment-copy">You're not refering to the documentation of <a href="https://docs.python.org/3.4/library/subprocess.html#subprocess.Popen.wait" rel="nofollow noreferrer"><code>Popen.wait()</code></a>, the doc you've posted seems to be of one of the module functions <code>call</code>, <code>check_output</code> or <code>check_call</code>.</span>
<span class="comment-copy">you could <a href="https://hg.python.org/cpython/file/3.4/Lib/subprocess.py#l529" rel="nofollow noreferrer">call <code>subprocess.call()</code> instead</a>. If the child is a Python script; it is more flexible to import it as a module and run it using <code>multiprocessing</code>, <code>futures</code>.</span>
<span class="comment-copy">Exiting the parent process alone does <i>not</i> kill its children.</span>
