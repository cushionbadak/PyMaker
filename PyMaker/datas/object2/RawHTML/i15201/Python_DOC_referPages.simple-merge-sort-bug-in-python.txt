<div class="post-text" itemprop="text">
<p>I'm doing a Merge Sort assignment in Python, but I keep have the error of <code>RuntimeError: maximum recursion depth exceeded
</code>
Here's my code:</p>
<pre><code>def merge_sort(list):
    left_num = len(list) // 2
    left_sorted = merge_sort(list[:left_num])
    right_sorted = merge_sort(list[left_num:])
    final_sort = merge(left_sorted, right_sorted)
    return final_sort

def merge(left_sorted, right_sorted):
    final_sort = []
    while left_sorted and right_sorted:
        if left_sorted[0] &lt;= right_sorted[0]:
            final_sort.append(left_sorted[0])
            left_sorted.pop(0)
        else:
            final_sort.append(right_sorted[0])
            right_sorted.pop(0)
    final_sort = final_sort + left_sorted + right_sorted
    return final_sort

if __name__ == "__main__":
    list = [4, 2]
    print(merge_sort(list))
</code></pre>
<p>Can someone tell me why? To make the problem more usable to others, feel free to edit the question to make it make more sense. ^_^</p>
</div>
<div class="post-text" itemprop="text">
<p>When you write a recursive function, you should be careful about the base case, which decides when the recursion should come to an end.</p>
<p>In your case, the base case is missing. For example, if the list has only one element, then you don't have recursively sort it again. So, that is your base condition.</p>
<pre><code>def merge_sort(list):
    if len(list) == 1:
        return list
    ...
    ...
</code></pre>
<p><strong>Note:</strong> The variable name <code>list</code> shadows the builtin function <code>list</code>. So better avoid using builtin names.</p>
<hr/>
<p>Since you are doing lot of <code>pop(0)</code>s, its worth noting that it is not efficient on lists. Quoting <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow">Python's official documentation</a>,</p>
<blockquote>
<p>Though <code>list</code> objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for <code>pop(0)</code> and <code>insert(0, v)</code> operations which change both the size and position of the underlying data representation.</p>
</blockquote>
<p>So, the better alternative would be to use <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow"><code>collections.deque</code></a>, instead of <code>list</code>, if you are popping a lot. The actual popping from a <a href="https://docs.python.org/3/library/collections.html#collections.deque.popleft" rel="nofollow"><code>deque</code> is done with <code>popleft</code> method</a>.</p>
<pre><code>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; d = deque([4, 2])
&gt;&gt;&gt; d.popleft()
4
&gt;&gt;&gt; d
deque([2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't have an exit point in <code>merge_sort</code>. You need to do something like:</p>
<pre><code>left_num = len(list) // 2
if left_num &lt;= 1:
    return list
</code></pre>
<p>You always need to have a conditional exit in recursion function: <code>if COND then EXIT else RECURSION_CALL</code>.</p>
</div>
<span class="comment-copy">Excuse me, for <code>deque</code>, how can I get the rest of the "list", after <code>popleft()</code>?</span>
