<div class="post-text" itemprop="text">
<p>Is it possible to automatically remove build products that are generated by a <code>setup.py</code> script based on <em>setuptools</em>?</p>
<p>I've just started with a new Python project and it's the first time I'm using <em>setuptools</em> as a developer, so I may be getting something wrong. when I build the project using <code>python setup.py bdist</code>, three directories, <code>build</code>, <code>dist</code> and one ending in <code>.egg-info</code> are created. When I then run <code>python setup.py clean</code> it doesn't seem to be doing anything and just prints this:</p>
<pre><code>running clean
</code></pre>
<p>I've tried adding <code>--all</code> to the <code>clean</code> command and while it does remove some files in the <code>build</code> directory, it doesn't remove the directory itself or any of the files in the other two directories.</p>
<p>I'm assuming that this should be possible very easily and that I'm just looking in the wrong place. I'm used to this functionality e.g. from virtually any project using <code>make</code> where <code>make clean</code> or <code>make distclean</code> will remove any build products.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Standard approach:</strong></p>
<pre><code>distutils.command.clean
</code></pre>
<p>From <a href="https://stackoverflow.com/questions/1594827/cleaning-build-directory-in-setup-py/1594896#1594896">Cleaning build directory in setup.py</a> and the <a href="https://docs.python.org/3/distutils/apiref.html#module-distutils.command.clean" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>This command removes the temporary files created by build and its subcommands, like intermediary compiled object files. With the --all option, the complete build directory will be removed.</p>
</blockquote>
<hr/>
<p>Another way to do it:</p>
<p><em>This may not be the best solution:</em></p>
<p>It seems from the comment <a href="https://stackoverflow.com/questions/1594827/cleaning-build-directory-in-setup-py/1594896#1594896">below this answer</a> that <code>python setup.py clean --all</code> sometimes fails to remove everything (Numpy in the example in the comment).  </p>
<blockquote>
<p>It seems not all setup.py scripts support clean. Example: NumPy – kevinarpe Jun 15 '16 at 7:14</p>
</blockquote>
<hr/>
<p>You could use the <a href="https://docs.python.org/2.5/dist/module-distutils.dirutil.html" rel="nofollow noreferrer"><code>remove_tree()</code></a> command in your setup script:</p>
<pre><code>import glob
remove_tree(['dist', glob.glob('*.egg-info')[0],glob.glob('build/bdist.*')[0]]) 
</code></pre>
<p>Or in a setup script:</p>
<pre><code>from setuptools import setup
from setuptools.command import install 

class PostInstallCommand(install):

    def run(self):
        import glob
        from distutils.dir_util import remove_tree
        remove_tree(['dist', glob.glob('*.egg-info')[0],glob.glob('build/bdist.*')[0]]) 


setup(name='Some Name',
      version='1.0',
      description='A cross platform library',
      author='Simon',
      platforms = ["windows", "mac", "linux"],
      py_modules = ['UsefulStuff', '__init__'],
      cmdclass = {'install':PostInstallCommand}
     )
</code></pre>
<hr/>
<p>Another way I solved it was to remove everything manually manually (using <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow noreferrer">shutil</a> and <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a>):</p>
<pre><code>import shutil, glob
shutil.rmtree('dist')
shutil.rmtree(glob.glob('*.egg-info')[0])
shutil.rmtree(glob.glob('build/bdist.*')[0])
</code></pre>
<p>Adding it to the setup script was harder but using <a href="https://stackoverflow.com/questions/20288711/post-install-script-with-python-setuptools/36902139#36902139">this answer</a>, it should look something like this:</p>
<pre><code>from setuptools import setup
from setuptools.command import install 

class PostInstallCommand(install):

    def run(self):
        import shutil, glob
        shutil.rmtree('dist')
        shutil.rmtree(glob.glob('*.egg-info')[0])
        shutil.rmtree(glob.glob('build/bdist.*')[0])
        install.run(self)



setup(name='Some Name',
      version='1.0',
      description='A cross platform library',
      author='Simon',
      platforms = ["windows", "mac", "linux"],
      py_modules = ['UsefulStuff', '__init__'],
      cmdclass = {'install':PostInstallCommand}
     )
</code></pre>
<p><code>cmdclass = {'install'}</code> allows this class to run after the installation.  <a href="https://stackoverflow.com/questions/20288711/post-install-script-with-python-setuptools/36902139#36902139">See this answer for more details</a>.</p>
<p><em>What gave me the idea to use shutil?</em></p>
<p>The idea to use shutil came from the old <a href="https://docs.python.org/2.5/dist/module-distutils.dirutil.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Some of this could be replaced with the shutil module?</p>
</blockquote>
</div>
<span class="comment-copy">Also see pypa/setuptools issue #1347 <a href="https://github.com/pypa/setuptools/issues/1347" rel="nofollow noreferrer">github.com/pypa/setuptools/issues/1347</a></span>
<span class="comment-copy">Thank you, Simon! Do you think there is a reason this problem hasn't manifested enough to have a built-in solution? Do most people just not have a problem here with cleanup? I'm sort of wondering if there is some other approach or tool that subsumes this need, if I'm running into an X-Y problem here.</span>
<span class="comment-copy">@DanielLyons  Well I could not say for certain (I am not one of the Python inplamenters), but I can say that I have never encountered a situation where clean up is essential.  If you going to just distribute the package, why clean it up at all?  After all you are probably just going to distribute what is given in the <code>build</code> folder.  It's tidier, but once again, the developer who uses your package is likely just to delete the source, once they have installed.  Second <code>python setup.py install</code> does not take the other folders with it. Just the contents of the lib/build folder.</span>
<span class="comment-copy">So you are not installing everything you clean up anyway.  As for other approach or tool.  I do not know of any other tool that could do this. Approach... I did my best above ;)</span>
<span class="comment-copy">@DanielLyons  You can check out <a href="https://stackoverflow.com/questions/1594827/cleaning-build-directory-in-setup-py?noredirect=1&amp;lq=1" title="cleaning build directory in setup py">stackoverflow.com/questions/1594827/…</a> It seems that there, the generally "accepted" way to go around doing this is by the command used in the question.  Probably the inplamenters thought that that would be enough.  Actually in the highest voted answer you will see that <code>distutils.command.clear</code> is the standard command to use</span>
<span class="comment-copy">I don't know, maybe someone could shed some more light on why, more reliably than me.  I certainly think that keeping or removing the temporary folders is not going to make a massive difference anyway.</span>
