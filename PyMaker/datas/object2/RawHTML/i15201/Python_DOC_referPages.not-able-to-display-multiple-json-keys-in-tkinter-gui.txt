<div class="post-text" itemprop="text">
<p>I have been playing with <code>tkinter</code> and used a lot of web resources and currently have this code:</p>
<pre><code>import json
import tkinter as tk
from tkinter import ttk
from pprint import pprint as pprint

# opt_name: (from_, to, increment)
IntOptions = {
    'age': (1.0, 200.0, 1.0),
}

def close_ed(parent, edwin):
    parent.focus_set()
    edwin.destroy()

def set_cell(edwin, w, tvar):
    value = tvar.get()
    w.item(w.focus(), values=(value,))
    close_ed(w, edwin)

def edit_cell(e):
    w = e.widget
    if w and len(w.item(w.focus(), 'values')) &gt; 0:
        edwin = tk.Toplevel(e.widget)
        edwin.protocol("WM_DELETE_WINDOW", lambda: close_ed(w, edwin))
        edwin.grab_set()
        edwin.overrideredirect(1)
        opt_name = w.focus()
        (x, y, width, height) = w.bbox(opt_name, 'Values')
        edwin.geometry('%dx%d+%d+%d' % (width, height, w.winfo_rootx() + x, w.winfo_rooty() + y))
        value = w.item(opt_name, 'values')[0]
        tvar = tk.StringVar()
        tvar.set(str(value))
        ed = None
        if opt_name in IntOptions:
            constraints = IntOptions[opt_name]
            ed = tk.Spinbox(edwin, from_=constraints[0], to=constraints[1],
                increment=constraints[2], textvariable=tvar)
        else:
            ed = tk.Entry(edwin, textvariable=tvar)
        if ed:
            ed.config(background='LightYellow')
            #ed.grid(column=0, row=0, sticky=(tk.N, tk.S, tk.W, tk.E))
            ed.pack()
            ed.focus_set()
        edwin.bind('&lt;Return&gt;', lambda e: set_cell(edwin, w, tvar))
        edwin.bind('&lt;Escape&gt;', lambda e: close_ed(w, edwin))

def JSONTree(Tree, Parent, Dictionery, TagList=[]):
    for key in Dictionery :
        if isinstance(Dictionery[key], dict):
            Tree.insert(Parent, 'end', key, text=key)
            TagList.append(key)
            JSONTree(Tree, key, Dictionery[key], TagList)
            pprint(TagList)
        elif isinstance(Dictionery[key], list):
            Tree.insert(Parent, 'end', key, text=key) # Still working on this
        else:
            Tree.insert(Parent, 'end', key, text=key, value=Dictionery[key])

if __name__ == "__main__" :
    # Setup the root UI
    root = tk.Tk()
    root.title("JSON editor")
    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)
    # Setup Data
    Data = {'aeroplane': {'Configuration': 'air_travel',
               'Distance': '1000',
               'From': 'miami_airport',
               'Name': 'united',
               'To': 'pasco'},
            }
    # Setup the Frames
    TreeFrame = ttk.Frame(root, padding="3")
    TreeFrame.grid(row=0, column=0, sticky=tk.NSEW)
    # Setup the Tree
    tree = ttk.Treeview(TreeFrame, columns=('Values'))
    tree.column('Values', width=100, anchor='center')
    tree.heading('Values', text='Values')
    tree.bind('&lt;Double-1&gt;', edit_cell)
    tree.bind('&lt;Return&gt;', edit_cell)
    JSONTree(tree, '', Data)
    tree.pack(fill=tk.BOTH, expand=1)
    # Limit windows minimum dimensions
    root.update_idletasks()
    root.minsize(root.winfo_reqwidth(), root.winfo_reqheight())
    root.mainloop()
</code></pre>
<p>I ran it using python IDLE and it passes and generates a window with <code>aeroplane</code> and the drop-down has all the details of that dictionary and it looks like this:
<img alt="showing just aeroplane" src="https://i.stack.imgur.com/Z2CAG.png"/></p>
<p>BUT if I change my <code>Data</code> to:</p>
<pre><code>Data = {'aeroplane': {'Configuration': 'air_travel',
           'Distance': '1000',
           'From': 'miami_airport',
           'Name': 'united',
           'To': 'pasco'},
        'bus': {'Configuration': 'road_travel',
            'Distance': '15',
            'From': 'pasco',
            'Name': 'greyhound',
            'To': 'richland'},
        'car': {'Configuration': 'road_travel',
            'Distance': '160',
            'From': 'Richland',
            'Name': 'honda',
            'To': 'Seattle'},
        'train': {'Configuration': 'train_travel',
            'Distance': '30',
            'From': 'beach',
            'Name': 'gas_train',
            'To': 'miami_airport'}}
</code></pre>
<p>and running this generates me an error:</p>
<pre><code>Traceback (most recent call last):
  File "/Users/gour967/Desktop/json_gui_test.py", line 97, in &lt;module&gt;
    JSONTree(tree, '', Data)
  File "/Users/gour967/Desktop/json_gui_test.py", line 53, in JSONTree
    JSONTree(Tree, key, Dictionery[key], TagList)
  File "/Users/gour967/Desktop/json_gui_test.py", line 58, in JSONTree
    Tree.insert(Parent, 'end', key, text=key, value=Dictionery[key])
  File "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/tkinter/ttk.py", line 1348, in insert
    "-id", iid, *opts)
_tkinter.TclError: Item Configuration already exists
</code></pre>
<p>How to address this error and display <code>aeroplane, bus, car, train</code> just like I the above image looks?</p>
</div>
<div class="post-text" itemprop="text">
<p>The signature for method <code>insert</code> of a <code>TreeView</code>, as documented at <a href="https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Treeview.insert" rel="nofollow">https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Treeview.insert</a>, is:</p>
<pre><code>insert(parent, index, iid=None, **kw)
</code></pre>
<p>and your <code>JsonTree</code> is recursively calling itself with</p>
<pre><code>JSONTree(Tree, key, Dictionery[key], TagList)
</code></pre>
<p>and calling insert (for "leaf" nodes) as:</p>
<pre><code>Tree.insert(Parent, 'end', key, text=key, value=Dictionery[key])
</code></pre>
<p>However it's clearly documented that "If iid is specified, it is used as the item identifier; iid must not already exist in the tree" (at the URL I gave above).</p>
<p>So, is <code>key</code> unique as it should be?  The error message tells you it isn't.  And indeed -- you're calling <code>Tree.insert</code> with e.g a <code>key</code> equal to <code>From</code> (&amp;c) <strong>repeatedly</strong> -- because every sub-dict has such a key!</p>
<p>So you need to "make unique" the key you're using.  Simplest may be to change the signature to:</p>
<pre><code>def JSONTree(Tree, Parent, Dictionery, TagList=[], prefix=''):
</code></pre>
<p>and the recursive call to:</p>
<pre><code>JSONTree(Tree, key, Dictionery[key], TagList, prefix+key+'.')
</code></pre>
<p>and in every <code>insert</code> where you now just use <code>key</code> as the third (<code>iid</code>) argument, use instead <code>prefix+key</code>, for example:</p>
<pre><code>Tree.insert(Parent, 'end', prefix+key, text=key, value=Dictionery[key])
</code></pre>
<p>for the specific call to <code>insert</code> I had shown earlier.</p>
<p>This way, the identifiers in your tree will be e.g <code>'aeroplane.From'</code>, <code>'bus.From'</code>, and so forth -- all unique, so you'll be fine.</p>
<p>If you're not actually <strong>using</strong> those identifiers you could alternatively just omit the third argument -- Tkinter will then internally generate a unique identifier on your behalf.  But controlling your own identifiers may make it easier for you to track exactly what the user picked, depending on what, exactly, you're after.  So, either choice may be best!</p>
</div>
<span class="comment-copy">This works perfect and it makes more sense now but if I have two same keys for example <code>bus, bus, car, train</code> instead of <code>aeroplane, bus, car, train</code>, the second <code>bus</code> overwrites my first <code>bus</code>. How can I make sure there is NO overwriting and all <code>keys</code> are displayed in GUI properly?</span>
<span class="comment-copy">For display only, just omit the third argument to the <code>insert</code> call.  A <code>dict</code> cannot have two identical keys so there can be no <code>second 'bus'</code> anyway!  If you're worried about a <i>list</i>, which you don't cover yet, I recommend asking another Q once you've completed <i>that</i> one -- if you need customized <code>iid</code>s and duplicates in your list interfere with that (show an example in your new Q!).  Hint: keep a <code>dict</code> mapping each <code>iid</code> root to how many times it's been used and if found there append <code>__{}.format(count)</code> to it then increment its count -- just for example.</span>
