<div class="post-text" itemprop="text">
<p>I'm working on a Python Application that reads from a binary file, pulls a byte that then references a list. This is essentially what I'm doing.</p>
<pre><code>list = [x for x in range(0, 340)]

index = struct.unpack('&lt;b', file.read(1))

print(list[index])
</code></pre>
<p>The problem is that the file I'm reading from, the 8th bit denotes a positive value, rather than making the number negative. For example, I hope to read b'11111111' to read as 255 and not as the negative number that it's producing. I'm not familiar with the struct module, and not sure if I'm doing something wrong with using the module, or if it's a feature of Python that I'm not sure how to create a workaround for.</p>
</div>
<div class="post-text" itemprop="text">
<p>For an unsigned character, you'd want to use the <code>B</code> format character, not <code>b</code> (see <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow"><em>Format Characters</em></a> section in the <code>struct</code> module documentation. Since <code>unpack()</code> always returns a tuple of values, even if only one is specified by the format string, a <code>[0]</code> can be added to the end of the expression as shown to retrieve that first and only element.</p>
<pre><code>&gt;&gt;&gt; index = struct.unpack('&lt;B', bytearray([0b11111111,]))[0]
&gt;&gt;&gt; print(index)
255
</code></pre>
</div>
<span class="comment-copy">Look at the <a href="https://docs.python.org/2/library/struct.html#format-characters" rel="nofollow noreferrer">formatting chars</a> - <code>b</code> is <code>signed</code> - <code>B</code> is unsigned... Also - what's the point of having 340 elements in <code>list</code> when you only have 256 values to index into it with</span>
<span class="comment-copy">'&lt;b' means little-endian signed char, what you seem to be looking for is '&lt;B' unsigned char.</span>
<span class="comment-copy">Sorry, my example code's not great/full picture. Essentially there is a check earlier in the file, that if True read two bytes to get the index, rather than just 1.</span>
<span class="comment-copy">I'm also going to ask a noob question here: if I'm understanding you correctly a signed char means that 8th bit is a negative flag where as unsigned means it's not?</span>
<span class="comment-copy">@Almost: yes, basically. Actually signed chars are sign-bit + 7 value bits for a range of -127 to +127. See <a href="http://stackoverflow.com/questions/3898688/range-of-signed-char"><i>Range of signed char</i></a>.</span>
<span class="comment-copy">The output of <code>unpack</code> is a tuple. Rather than converting it to a list, you probably want to simply take the first element: <code>struct.unpack(...)[0]</code>.</span>
<span class="comment-copy">@Mark: Good point, I thought I was just presenting the result in the same terms the OP code was doing, but now see they used <code>print([index])</code> which would have produced <code>[(255,)]</code> -- so I'll update my answer.</span>
