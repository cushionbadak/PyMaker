<div class="post-text" itemprop="text">
<p>why</p>
<pre><code>range(0,10).remove(1)
</code></pre>
<p>does not work?</p>
<p>I know the question is pretty short, but I do not have any idea why this thing does not work..
Is it possibe to write it in one line?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>x = range(0, 10)</code> will return either a list or a <code>range</code> object (depending on your Python version).</p>
<h3>Python 2.x</h3>
<p><code>x = range(0, 10).remove(1)</code> will return <code>None</code> as <code>list.remove</code> will modify the list <em>in-place</em> and so returns <code>None</code>. Your list is created and the value <code>1</code> removed, but as it is never assigned to anything, it's garbage collected.</p>
<h3>Python 3.x</h3>
<p><code>x = range(0, 10).remove(1)</code> will return an <code>AttributeError</code> as <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="noreferrer"><code>range</code> objects</a> don't have a <code>remove</code> method. If you convert it to a list using <code>list(range(0, 10)).remove(1)</code> you'll have the same issue as Python 2 though.</p>
<p>A way to get what you want would be to use a <a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>. In the list comprehension you'll iterate over <code>range(0, 10)</code> but use an <code>if</code> statement to only add a value that isn't 1, such as:</p>
<pre><code>x = [i for i in range(0, 10) if i != 1]
# [0, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because the <code>remove()</code> method operates "in place", and doesn't return anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>remove</code> is an in-place operation, and therefore returns <code>None</code>. </p>
<p>It does indeed do what you think it does: create a list from <code>0</code> to <code>9</code>, then removes the element <code>1</code>, but that is a temporary list that is not assigned to any variable.</p>
<p>As an alternative, a list comprehension could achieve this</p>
<pre><code>&gt;&gt;&gt; [i for i in range(0,10) if i != 1]
[0, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why <code>remove</code> does not work is already covered.
I'd like to present an alternative to the <code>list comprehension</code> method:</p>
<pre><code>In [1]: filter(lambda x:x!=1, range(10))
Out[1]: [0, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>While the list comprehension is considered more pythonic, <code>filter</code> might sometimes be closer in expressing the underlying problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The result is <code>None</code> because <code>list.remove()</code> doesn't return anything. You could workaround that by using a <code>lambda</code> function and the <code>or</code> operator. </p>
<p>In Python 2 this one-liner would work:</p>
<pre><code>(lambda lst=range(0, 10): lst.remove(1) or lst)()
</code></pre>
<p>or this in Python 3: </p>
<pre><code>(lambda lst=list(range(0, 10)): lst.remove(1) or lst)()
</code></pre>
<p>Both execute faster than using a list comprehension would (although it's not quite as readable):</p>
<pre class="lang-none prettyprint-override"><code>&gt; python -mtimeit "(lambda lst=range(0, 10): lst.remove(1) or lst)()"
1000000 loops, best of 3: 0.467 usec per loop

&gt; python -mtimeit "[i for i in range(0, 10) if i != 1]"
1000000 loops, best of 3: 0.815 usec per loop

&gt; c:\python3\python -mtimeit "(lambda lst=list(range(0, 10)): lst.remove(1) or lst)()"
1000000 loops, best of 3: 0.817 usec per loop

&gt; c:\python3\python -mtimeit "[i for i in range(0, 10) if i != 1]"
1000000 loops, best of 3: 1.17 usec per loop
</code></pre>
</div>
<span class="comment-copy">Might be better to use <code>[i for i in xrange(0, 10) if i != 1]</code> with Python 2.</span>
