<div class="post-text" itemprop="text">
<p>I'm currently trying to make a text-based game, and I'd like to add a feature where, based on the user's input in the command line (or Python shell), it detects a corresponding method, and returns it.</p>
<p>For example, when the user types in <code>'legal moves!'</code> in the command line:</p>
<pre><code>&gt;&gt;&gt; legal moves!
'You have 10 legal moves, which are...'
</code></pre>
<p>Or something like that.</p>
<p>I know that if I make a class, and a method called <code>legal_moves(self)</code>, the user would be able to type in <code>CLASSNAME.legal_moves()</code> to call the same thing, but I'm trying to make it as simple as possible for the player, assuming they know nothing about python.</p>
<p>Currently I have something like this, but I'm not quite sure exactly how to make it work:</p>
<pre><code>def MyClass():

    def __init__(self):
        player_words = input
        if player_words == "help me":
            return self.help_menu()

    def help_menu(self):
        print("To receive help...")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are very close!</p>
<p>First, you have to use <code>class</code> and not <code>def</code> to declare a class:</p>
<pre><code>class MyClass():
</code></pre>
<p>And then, use <code>input()</code> in order to get user input.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several options; you could use the <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow"><code>getattr()</code> function</a> to turn strings into attributes on your instance; this includes access to methods:</p>
<pre><code>class MyClass():
    def __init__(self):
        player_words = input()
        player_words = player_words.lower().replace(' ', '_')
        try:
            getattr(self, player_words)()
        except AttributeError:
            print("Sorry, there is no such command")

    def help_me(self):
        print("To receive help...")
</code></pre>
<p>This translates <code>'Help me'</code> into <code>help_me</code> and finds the corresponding method to call.</p>
<p>To list all the possible methods, you could use the <a href="https://docs.python.org/3/library/inspect.html#inspect.getmembers" rel="nofollow"><code>inspect.getmembers()</code> function</a>, together with the <a href="https://docs.python.org/3/library/inspect.html#inspect.ismethod" rel="nofollow"><code>inspect.ismethod()</code> predicate function</a> to list all methods your class offers; you'll have to filter these as you don't want to present the <code>__init__</code> method to your visitor. Perhaps you could overload the <code>__doc__</code> attribute for functions for this purpose; it contains the <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-docstrings" rel="nofollow">function documentation string</a>:</p>
<pre><code>from inspect import getmembers, ismethod

def is_documented_method(ob):
    return ismethod(ob) and ob.__doc__

class MyClass():
    def __init__(self):
        available_methods = getmembers(self, is_documented_method)
        help_info = [
            (name.replace('_', ' ').title(), func.__doc__)
            for name, func in available_methods]
        for name, documentation in help_info:
            print(name, documentation, sep=': ')
        player_words = input()
        player_words = player_words.lower().replace(' ', '_')
        try:
            getattr(self, player_words)()
        except AttributeError:
            print("Sorry, there is no such command")

    def help_me(self):
        """Provide help on all commands"""
        print("To receive help...")

    def frob_the_foobar(self):
        """Frobbing the Foobar will ..."""
        print("Frobbing the Foobar, sir!")
</code></pre>
<p>Demo of the latter:</p>
<pre><code>&gt;&gt;&gt; MyClass()
Frob The Foobar: Frobbing the Foobar will ...
Help Me: Provide help on all commands
help me
To receive help...
&lt;__main__.MyClass object at 0x1114829e8&gt;
&gt;&gt;&gt; MyClass()
Frob The Foobar: Frobbing the Foobar will ...
Help Me: Provide help on all commands
Frob The Foobar
Frobbing the Foobar, sir!
&lt;__main__.MyClass object at 0x111482b38&gt;
</code></pre>
</div>
<span class="comment-copy">This is quite broad - what exactly are you stuck on? Your current code doesn't even seem to <b>call</b> <code>input</code>, and it's not clear why you do that in <code>__init__</code>. How wide a range of inputs is acceptable from the user? Could you create a method to tell them the valid inputs?</span>
