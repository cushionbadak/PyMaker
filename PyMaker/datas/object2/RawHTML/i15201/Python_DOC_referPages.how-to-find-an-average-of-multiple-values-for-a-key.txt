<div class="post-text" itemprop="text">
<p>I've been trying to get an output of average score(value) for each name(key), unfortunately due to being new to python I was unable to implement the <code>avg</code> function within my code successfully ;/ I was wondering how could I calculate an average for each key which has multipile values such as :</p>
<pre><code>Rob: 3,5,2,7
Matt: 9,2,3,4
Dan: 5,6,3,1
</code></pre>
<p>Also after calculating how would I be able to print the keys in order of average score, from highest to lowest. Would I have to input the calculated average into a list or is there a different way?</p>
<p>This is my code so far:</p>
<pre><code>with open('score_file.txt') as infile:
    for line in infile:
        name_field, scores = line.split(':') 
        name = name_field.split()[0]        
        scores = [int(score.strip()) for score in scores.split(',')]


    score_dict[name] = scores
    score_dict.setdefault(name, []).extend(scores)


for name in sorted(score_dict.keys()):
    print("{} Scored: {}".format(name, avg(score_dict[name])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using python3.4 you can use <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow">statistics.mean</a>:</p>
<pre><code>from statistics import mean
for name,val in sorted(score_dict.items(),key=lambda x:mean(x[1])):
    print("{} Scored: {}".format(name, mean(val))


Dan Scored: 3.75
Rob Scored: 4.25
Matt Scored: 4.5
</code></pre>
<p>You can also remove the <code>score_dict.setdefault(name, []).extend(scores)</code>,<code>score_dict[name] = scores</code> already creates a key/value pairing of the name and the list of all scores. If you might have repeated names you would need to use setdefault first or better yet use a defaultdict.</p>
<p>Also using <code>sorted(score_dict.keys())</code> is unnecessary and less efficient that just using <code>sorted(score_dict)</code>.</p>
<p>Or just calculate the mean once and use itemgetter as the key to sorted:</p>
<pre><code>from statistics import mean
from operator import itemgetter
srted_mean = ((k, mean(v)) for k, v in score_dict.items())
for name,mn in sorted(srted_mean,key=itemgetter(1)):
    print("{} Scored: {}".format(name, mn))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def avg_score(marks):
     return float(sum(marks))/len(marks)

players = score_dict.items()
players.sort(key = lambda player: avg_score(player[1]), reverse=True)
for name, marks in players:
    print("{} Scored: {}".format(name, avg_score(marks)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>sum</code> and <code>len</code> to find average from list.
e.g.</p>
<pre><code>&gt;&gt;&gt; def avg(scores):
...     return sum(scores)/float(len(scores))
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; l = [1,2,3,4]
&gt;&gt;&gt; avg(l)
2.5
&gt;&gt;&gt; l = [4, 8]
&gt;&gt;&gt; avg(l)
6.0
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>code:</p>
<pre><code>def avg(scores):
    return sum(scores)/float(len(scores))


def getStudentScores(filepath):
    score_dict = {}
    with open(filepath) as infile:
        for line in infile:
            name, scores = line.split(':') 
            #scores = [int(score.strip()) for score in scores.split(',')]
            scores = map(int, scores.split(","))

            score_dict[name.strip()] = (scores, avg(scores))

    return score_dict

def displayStudentScores(score_dict):
    for name in sorted(score_dict):
        print("Name: {} ,Scored: {}, Avg: {}".format(name, score_dict[name][0], score_dict[name][1]))

filepath = "/home/vivek/Desktop/input1.txt"
score_dict = getStudentScores(filepath)
displayStudentScores(score_dict)
</code></pre>
<p>output:-</p>
<pre><code>:~$ python  workspace/vivek/study/test.py
Name: Dan ,Scored: [5, 6, 3, 1], Avg: 3.75
Name: Matt ,Scored: [9, 2, 3, 4], Avg: 4.5
Name: Rob ,Scored: [3, 5, 2, 7], Avg: 4.25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well a simple solution using <code>sum</code> and <code>len</code> could be(I am assuming you get the values from file correctly and can get a dictionary):-</p>
<pre><code>lables = {'Rob':[3,5,2,7], 'Matt':[9,2,3,4], 'Dan':[5,6,3,1]}
avg_list = [(key, float(sum(l))/len(l)) for key, l in lables.items()]
print avg_list  #[('Rob', 4.25), ('Dan', 3.75), ('Matt', 4.5)]
avg_list_sorted = sorted(avg_list, key = lambda avg_tuple: avg_tuple[1], reverse=True)
print avg_list_sorted  #[('Matt', 4.5), ('Rob', 4.25), ('Dan', 3.75)]
print [avg_tuple[0] for avg_tuple in avg_list_sorted]  #['Matt', 'Rob', 'Dan']
</code></pre>
</div>
<span class="comment-copy">So where <i>is</i> your attempted <code>avg</code> function? The code you have shown is irrelevant. Do you know how to calculate an average in general terms?</span>
<span class="comment-copy">your <code>score_dict[name] = ...</code>  line should be inside the <code>for</code> loop.  The setdefault line is not needed since you are already feeding the dict your starting values.</span>
