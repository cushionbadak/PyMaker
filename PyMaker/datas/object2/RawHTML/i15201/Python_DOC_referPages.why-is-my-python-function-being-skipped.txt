<div class="post-text" itemprop="text">
<p>I've got a small script that's trying to execute an external command. But for some reason, the function that I made to execute the command is being completely skipped over! No errors seem to be raised, it just doesn't execute. I've got a few debug print statements inside it to verify that the function gets entered, but they never print. And I've got a print statement outside of it to verify that the script isn't dying. So what gives?</p>
<pre><code>from xml.etree import ElementTree as et
import subprocess

pomFileLocation = "pom.xml"
uiAutomationCommand = "mvn clean install"
revertPomFileCommand = "git checkout pom.xml"
profileToSetToDefault = "smoketest"

def modifyxml( datafile, value ):
    print( "modifying " + datafile )
    tree = et.parse( datafile )
    rootNodes = tree.getroot()
    for node in rootNodes:
        if "profiles" in node.tag:
            for profile in node.iter():
                foundIt = False
                for param in profile.iter():
                    if "id" in param.tag and profileToSetToDefault in param.text:
                        foundIt = True
                        break
                if foundIt == True:
                    for param in profile.iter():
                        if "activation" in param.tag:
                            for child in param.iter():
                                if "activeByDefault" in child.tag:
                                    child.text = value
                                    tree.write( datafile )
                                    return

def runExternalCommand( comm ):
    print( "running command " + comm )
    p = subprocess.Popen( comm, bufsize=-1, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE ).communicate()[0]
    print( str(p) )
    while( True ):
        print( "still running" )
        retcode = p.poll()
        line = p.stdout.readline()
        yield line
        if( retcode is not None ):
            print("Exiting")
            break   
    return

if __name__ == '__main__':
    modifyxml( pomFileLocation, "true" )
    #runExternalCommand( uiAutomationCommand )
    runExternalCommand( revertPomFileCommand )
    print( "finished" )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>runExternalCommand</code> uses <code>yield</code>, so if you want it to execute all the way to the end, you ought to call it like <code>for something in runExternalCommand(revertPomFileCommand):</code>. Or just delete the <code>yield</code> line, since you don't seem to need it anyway.</p>
<pre><code>def runExternalCommand( comm ):
    print( "running command " + comm )
    p = subprocess.Popen( comm, bufsize=-1, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE ).communicate()[0]
    print( str(p) )
    while( True ):
        print( "still running" )
        retcode = p.poll()
        line = p.stdout.readline()
        yield line
        if( retcode is not None ):
            print("Exiting")
            break   
    return

if __name__ == '__main__':
    modifyxml( pomFileLocation, "true" )
    #runExternalCommand( uiAutomationCommand )
    for line in runExternalCommand( revertPomFileCommand ):
        pass
    print( "finished" )
</code></pre>
<p>Or</p>
<pre><code>def runExternalCommand( comm ):
    print( "running command " + comm )
    p = subprocess.Popen( comm, bufsize=-1, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE ).communicate()[0]
    print( str(p) )
    while( True ):
        print( "still running" )
        retcode = p.poll()
        line = p.stdout.readline()
        if( retcode is not None ):
            print("Exiting")
            break   
    return

if __name__ == '__main__':
    modifyxml( pomFileLocation, "true" )
    #runExternalCommand( uiAutomationCommand )
    runExternalCommand( revertPomFileCommand )
    print( "finished" )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/a/28351682/4279">@Kevin said</a>, the main (but not the only) issue is that <code>runExternalCommand</code> is a generator. To consume it, you could run: <code>print(list(runExternalCommand(revertPomFileCommand)))</code>.</p>
<p>Though the function <code>runExternalCommand()</code> is broken: there is no point to call <code>p.stdout.readline()</code> after <code>.communicate()</code> returns (the latter waits for the child process to finish and returns the whole output at once).</p>
<p>It is not clear what result you want to get e.g., to run the <code>git</code> command and to store its output in a variable, you could use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output()</code></a>:</p>
<pre><code>from subprocess import check_output, STDOUT

output = check_output("git checkout pom.xml".split(),
                      stderr=STDOUT, universal_newlines=True)
</code></pre>
<p>To discard child's stdout/stderr instead of saving it, use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_call" rel="nofollow noreferrer"><code>subprocess.check_call()</code></a>:</p>
<pre><code>from subprocess import check_call, DEVNULL, STDOUT

check_call("git checkout pom.xml".split(),
           stdout=DEVNULL, stderr=STDOUT)
</code></pre>
<p>For the code example, to read output while the child process is still running, see <a href="https://stackoverflow.com/a/28319191/4279">Constantly print Subprocess output while process is running</a>.</p>
</div>
<span class="comment-copy">where do you get <code>runExternalCommand()</code> definition? It is broken. Please, leave a comment where you get it so that others won't use the broken code. <a href="http://stackoverflow.com/a/28352727/4279">my answer provides some alternatives</a></span>
<span class="comment-copy">Ah. That's what I get for blindly copying and pasting from the internet. I didn't know yield would do that. I removed it, and now it works. Thanks!</span>
<span class="comment-copy">To clarify, it's not that the function runs up to the yield-statement.  Rather, it won't run at all until it is iterated over.  The bits before the yield-statement also don't get run.</span>
<span class="comment-copy">Please, add ALL CAPSLOCK DISCLAIMER if you knowingly use broken code.</span>
