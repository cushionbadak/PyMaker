<div class="post-text" itemprop="text">
<p>I have a regex:</p>
<pre><code>(.*\n)+DOCUMENTATION.*(\"\"\"|''')\n-*\n?((.*\n)+?)(\2)(?s:.*)
</code></pre>
<p>witch I'm trying to process some files like this:</p>
<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

# &lt;GNU license here&gt;

DOCUMENTATION = """
module: foo
short_description: baz
&lt;some more here&gt;    
"""

&lt;rest of the python code&gt;
</code></pre>
<p>I need to get the DOCUMENTATION part from it.</p>
<p>It work quite well but not with python. The problem is with inline modifier <code>?s:.*</code> which I used to catch rest of the file (any character including new-line zero or more times). Looks that it's somehow different in python.</p>
<p>Here at <a href="https://regex101.com/r/rR0uO1/1" rel="noreferrer">regex101</a> is the example. It shows an error when I switch it to python.</p>
<p><strong>NOTE:</strong> I can't set modifiers globally. (I can only pass regex rule to some python module).</p>
</div>
<div class="post-text" itemprop="text">
<h1>Inline Modifiers in the <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">re module</a></h1>
<p>Python implements <strong><a href="https://docs.python.org/3.5/howto/regex.html#compilation-flags" rel="noreferrer">inline (embedded) modifiers</a></strong>, such as <code>(?s)</code>, <code>(?i)</code> or <code>(?aiLmsux)</code>, but not as part of a non-capturing group modifier like you were trying to use.<br/>
<code>(?smi:subpattern)</code> works in Perl and PCRE, but not in Python.</p>
<p>Moreover, using an inline modifier anywhere in the pattern <strong>applies to the whole match</strong> and it can't be turned off.</p>
<blockquote>
<p><strong><a href="http://www.regular-expressions.info/modifiers.html" rel="noreferrer">From regular-expressions.info</a>:</strong><br/>
  In Python, putting a modifier in the middle of the regex affects the
  whole regex. So in Python, <kbd><code>(?i)caseless</code></kbd> and <kbd><code>caseless(?i)</code></kbd> are both case
  insensitive.</p>
</blockquote>
<hr/>
<p><strong>Example:</strong></p>
<pre class="lang-python prettyprint-override"><code>import re

text = "A\nB"
print("Text: '%s'\n---" % text)
patterns = [ "a", "a(?i)", "A.*B", "A(?s).*B", "A.*(?s)B"]

for p in patterns:
    match = re.search( p, text)
    print("Pattern: '%s'    \tMatch: %s" % (p, match.span() if match else None))
</code></pre>
<p><strong>Output:</strong></p>
<pre class="lang-none prettyprint-override"><code>Text: 'A
B'
---
Pattern: 'a'            Match: None
Pattern: 'a(?i)'        Match: (0, 1)
Pattern: 'A.*B'         Match: None
Pattern: 'A(?s).*B'     Match: (0, 3)
Pattern: 'A.*(?s)B'     Match: (0, 3)
</code></pre>
<p><kbd><a href="http://ideone.com/7AAuaK" rel="noreferrer">ideone Demo</a></kbd></p>
<hr/>
<h3>Solution</h3>
<p><code>(?s)</code> (aka <em>singleline</em> or <code>re.DOTALL</code>) makes <strong><code>.</code></strong> also match newlines. And since you're trying to set it to only a part of the pattern, there are 2 alternatives:</p>
<ol>
<li><strong>Match anything except newlines</strong>:<br/>
Set <code>(?s)</code> for the whole pattern (either passed as flag or inline), and use <strong><code>[^\n]*</code></strong> instead of a dot, to match any characters except newlines.</li>
<li><strong>Match everything including newlines</strong>:<br/>
Use <strong><code>[\S\s]*</code></strong> instead of a dot, to match any characters including newlines. The character class includes all whitespace and all that is not a whitespace (thus, all characters).</li>
</ol>
<p><br>
For the specific case you presented, you can use the following expression:</br></p>
<pre class="lang-none prettyprint-override"><code>(?m)^DOCUMENTATION.*(\"{3}|'{3})\n-*\n?([\s\S]+?)^\1[\s\S]*
</code></pre>
<p><kbd><a href="https://regex101.com/r/rR0uO1/2" rel="noreferrer">regex101 Demo</a></kbd></p>
<hr/>
<p><sub><strong>Note:</strong> This post covers inline modifiers in the <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">re module</a>, whereas <a href="https://pypi.python.org/pypi/regex" rel="noreferrer">Matthew Barnett's regex module</a> does in fact implement inline modifiers (scoped flags) with the same behaviour observed in PCRE and Perl.</sub></p>
</div>
<span class="comment-copy">For some reason <code>(.*\n)+</code> as I used at the begging of the regex doesn't catch everything. BTW: I read somewhere that the Python might not support that. If it's true than I will appreciate any other solution for the main problem.</span>
