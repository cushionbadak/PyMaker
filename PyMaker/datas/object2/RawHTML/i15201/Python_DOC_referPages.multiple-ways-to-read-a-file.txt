<div class="post-text" itemprop="text">
<p>I am not sure if there is a difference in the way the file will be read in the two scenarios below on line 2.  The first scenario has a <code>'r'</code> in the open command, and the second one does not.  Both output the same result.  Are these just just different ways to achieve the same result?</p>
<p>Scenario 1:</p>
<pre><code>def readit(filename, astr):
    infile = open(filename, 'r')
    content = infile.read()
    infile.close()
    return content.count(astr)

print(readit("payroll.txt","Sue"))
</code></pre>
<p>Scenario 2:</p>
<pre><code>def readit(filename, astr):
    infile = open(filename)
    content = infile.read()
    infile.close()
    return content.count(astr)

print(readit("payroll.txt","Sue"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, the two code pieces are equivalent.  <code>'r'</code> is the default mode for <code>open</code>.  From the <a href="https://docs.python.org/3/library/functions.html#open" rel="noreferrer">docs</a>:</p>
<blockquote>
<p><code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></p>
<p><code>mode</code> is an optional string that specifies the mode in which the file is opened. It defaults to <code>'r'</code> which means open for reading in
  text mode.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>infile = open(filename)    # by default it opens as read-only
</code></pre>
<p>there is no difference</p>
</div>
<div class="post-text" itemprop="text">
<p>You might consider using <code>with</code> to open the file which, among other benefits, auto closes the file. It is also better to count your target string line-by-line rather than reading the entire file into memory:</p>
<pre><code>def readit(filename, astr):
    with open(filename) as infile:
        return sum(line.count(astr) for line in infile)
</code></pre>
<p>Shorter, less memory, more 'Pythonic'  </p>
<hr/>
<p>On a side note, <code>line.count(astr)</code> will count all occurrences of that substring even if part of a larger string. Example:</p>
<pre><code>&gt;&gt;&gt; s='she she he she he sheshe hehe'
&gt;&gt;&gt; s.count('she')
5
&gt;&gt;&gt; s.count('he')
9
</code></pre>
<p>Consider either splitting the text for a full match:</p>
<pre><code>&gt;&gt;&gt; [word for word in s.split() if word=='she']
['she', 'she', 'she']
&gt;&gt;&gt; [word for word in s.split() if word=='he']
['he', 'he']
</code></pre>
<p>Or a regex:</p>
<pre><code>&gt;&gt;&gt; re.findall(r'\bshe\b', s)
['she', 'she', 'she']
&gt;&gt;&gt; re.findall(r'\bhe\b', s)
['he', 'he']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>from the python doc,it's the same.
but if you wanna increase the readable,it's good to add the 'r' mode :)</p>
</div>
<span class="comment-copy">Thanks guys!  I understand now.  Much appreciated!</span>
