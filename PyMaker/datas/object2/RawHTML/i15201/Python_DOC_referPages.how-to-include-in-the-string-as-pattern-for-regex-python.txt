<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4025482/cant-escape-the-backslash-with-regex">Can't escape the backslash with regex?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>Using the regex in python, I want to compile a string that gets the pattern "\1" up to "\9".
I've tried</p>
<pre><code>regex= re.compile("\\(\d)")  #sre_constants.error: unbalanced parenthesis
regex= re.compile("\\\(\d)") #gets \\4 but not \4
</code></pre>
<p>but to no avail..</p>
<p>Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>One more: <code>re.compile("\\\\(\\d)")</code>. Or, a better option, a raw string: <code>re.compile(r"\\(\d)")</code>.</p>
<p>The reason is the fact that backslash has meaning in both a string and in a regexp. For example, in regexp, <code>\d</code> is "a digit"; so you can't just use <code>\</code> for a backslash, and backslash is thus <code>\\</code>. But in a normal string, <code>\"</code> is a quote, so a backslash needs to be <code>\\</code>. When you combine the two, the string <code>"\\\\(\\d)"</code> actually contains <code>\\(\d)</code>, which is a regexp that matches <code>\</code> and a digit.</p>
<p>Raw strings avoid the problem up to a point by giving backslashes a different and much more restricted semantics.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use a <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">raw-string</a> (which does not process escape sequences):</p>
<pre><code>regex= re.compile(r"\\(\d)")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use raw string:</p>
<pre><code>regex= re.compile(r"\\(\d)")
</code></pre>
</div>
