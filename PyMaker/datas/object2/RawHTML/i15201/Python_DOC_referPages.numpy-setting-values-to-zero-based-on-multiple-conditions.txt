<div class="post-text" itemprop="text">
<p>I have an RGB image and I am trying to perform a simple thresholding for it using something like this:</p>
<pre><code>from skimage import filter
def threshold(image):
    r = image[:, :, 0]
    g = image[:, :, 1]
    b = image[:, :, 2]

    rt = filter.threshold_otsu(r)
    gt = filter.threshold_otsu(g)
    bt = filter.threshold_otsu(b)
</code></pre>
<p>What I would like to do is now make a binary mask where the RGB values in the original image which are less than these threshold value should be set to 0.</p>
<pre><code>mask = np.ones(r.shape)
</code></pre>
<p>What I cannot figure out how to do is how do I set the mask indices (x, y) to zero where the </p>
<pre><code>image[x, y, 0] &lt; rt and image[x, y, 1] &lt; gt and image [x, y, 2] &lt; bt
</code></pre>
<p>Somehow I need to get the (x, y) pixel indices from this original image which meets this criteria but I am not sure how to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>NumPy's <code>&amp;</code> performs <code>bit-wise and</code>. When applied to arrays, the <code>bit-wise and</code> is applied element-wise. Since the comparisons, e.g. <code>r &lt; rt</code>, return boolean arrays, the result of <code>bit-wise and</code> here is the same as <code>logical and</code>. The parentheses are needed because NumPy's <code>&amp;</code> has <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher precedence</a> than <code>&lt;</code>.</p>
<pre><code>mask = (r &lt; rt) &amp; (g &lt; gt) &amp; (b &lt; bt)
image[mask] = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Be careful - OpenCV uses "BGR", not RGB.
so using </p>
<pre><code>r = image[:, :, 0]
</code></pre>
<p>yields the BLUE channel, <em>NOT</em> the RED channel!</p>
</div>
<span class="comment-copy">Have you tried using <code>&amp;</code> instead of <code>and</code>? (the Python <code>and</code> doesn't work well with NumPy arrays.)</span>
<span class="comment-copy">I did. It comes with  ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all(). I never quite figured out how to ever resolve this.</span>
<span class="comment-copy">Thank you! This works fine.</span>
<span class="comment-copy">Thanks for the additional explanations as well!</span>
