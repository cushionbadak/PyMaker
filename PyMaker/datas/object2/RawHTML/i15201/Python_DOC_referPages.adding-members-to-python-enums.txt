<div class="post-text" itemprop="text">
<p>I understand that this is <strong>NOT</strong> the standard use case, but I need to dynamically add elements to a <code>IntEnum</code> derived class in Python. Notice that dynamically creating the Enum using the functional API is not enough. I need to add elements to an existing enum. How can I do this?</p>
<p>Background: For those of you wondering why would somebody want to do this. I am wrapping a library and the values for the enum are defined within the library. I can query the names and values using the library API. But I cannot do it upon initialization as it depends on components which are dynamically loaded by the library upon user request. I could load all components at start up and use the functional API to create the enum upon import but this is time consuming and has side effects.</p>
</div>
<div class="post-text" itemprop="text">
<p>Enums are <em>immutable</em>, that's rather the point. You can create a new enum that replaces the original instead:</p>
<pre><code>from enum import Enum

names = [m.name for m in ExistingEnum] + ['newname1', 'newname2']
ExistingEnum = Enum('ExistingEnum', names)
</code></pre>
<p>but any existing references (say, in other modules) would continue to use the old definition.</p>
<p><code>names</code> can be:</p>
<ul>
<li>A string containing member names, separated either with spaces or commas.  Values are incremented by 1 from <code>start</code> (which can be set as a keyword argument and defaults to 1).</li>
<li>An iterable of member names (as in the code above).  Values are incremented by 1 from <code>start</code>.</li>
<li>An iterable of (member name, value) pairs.</li>
<li>A mapping of member name -&gt; value pairs.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is a job for the <code>extend_enum</code> function from the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">aenum library</a><sup>1</sup>.</p>
<hr/>
<p>A couple sample <code>Enum</code>s:</p>
<pre><code>from aenum import Enum

class Color(Enum):
    black = 0

class ColorHelp(Enum):
    _init_ = 'value __doc__'
    black = 0, 'the absence of color'
</code></pre>
<p><code>extend_enum</code> in action:</p>
<pre><code>from aenum import extend_enum

extend_enum(Color, 'white', 1)
print Color, list(Color)
print repr(Color.black), Color.black, repr(Color.white), Color.white
print

extend_enum(ColorHelp, 'white', 1, 'the presence of every color')
print ColorHelp, list(ColorHelp)
print repr(ColorHelp.black), ColorHelp.black, ColorHelp.black.__doc__, repr(ColorHelp.white), ColorHelp.white, ColorHelp.white.__doc__
</code></pre>
<p>Which gives us:</p>
<pre><code>&lt;enum 'Color'&gt; [&lt;Color.black: 0&gt;, &lt;Color.white: 1&gt;]
&lt;Color.black: 0&gt; Color.black &lt;Color.white: 1&gt; Color.white

&lt;enum 'ColorHelp'&gt; [&lt;ColorHelp.black: 0&gt;, &lt;ColorHelp.white: 1&gt;]
&lt;ColorHelp.black: 0&gt; ColorHelp.black the absence of color &lt;ColorHelp.white: (1, 'the presence of every color')&gt; ColorHelp.white None
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">isn't the whole point of ENUM the immutability?</span>
<span class="comment-copy">You can't. Even <i>subclassing that extend existing enums</i> is guarded against.</span>
<span class="comment-copy">@MartijnPieters Any suggestion for this particular use case?</span>
<span class="comment-copy">@MightyPork Yes, but Python is a great dynamic glue language and many times you need to interact with something that is out of your control.</span>
<span class="comment-copy">@Hernan:  I am curious why you didn't accept the answer that does what you need?</span>
<span class="comment-copy">As I mentioned, this is not an option for the exact same reasons that you describe. Thanks anyway</span>
<span class="comment-copy">@Hernan: that is your <i>only</i> option when using the <code>enum</code> library, however.</span>
<span class="comment-copy"><b>Immutability is <i>not</i> "the point" of enumerations.</b> Enumerations exist to guarantee mutual exclusion over a finite unordered set. Appending additional members onto an existing enumeration at runtime in no way violates this guarantee. That Python's standard <code>enum.Enum</code> type chose to prohibit this valid use case in no way prohibits third-party alternatives from doing so. See also: the mutable <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum.Enum</code></a> and <a href="https://stackoverflow.com/questions/13015870/java-enums-mutability-usecases-and-possibilities">Java <code>enum</code></a> types.</span>
<span class="comment-copy">@CecilCurry: Neither of those libraries mutate the original enum, they extend on an existing enum to create a new enum. If enums were mutable at runtime, that'd have a wide range of implications where you can no longer guarantee to be handling all possible values (languages like Rust even build their type safety on enums not being runtime mutable).</span>
<span class="comment-copy">I get "File "/home/vamalov/.local/lib/python3.5/site-packages/aenum/__init__.py", line 2166, in extend_enum     for canonical_value in canonical_member._values_: AttributeError: 'MachineName' object has no attribute '<i>values</i>'", where MachineName is usual python enum. Is this method still working?</span>
<span class="comment-copy">@likern, if this is still an issue, please <a href="https://bitbucket.org/stoneleaf/aenum/issues" rel="nofollow noreferrer">file an issue</a>.  Thanks.</span>
<span class="comment-copy">To anyone coming here who is having the same error as @likern, make sure to use aenum's Enum (<code>from aenum import Enum</code>) instead of the regular Enum (<code>from enum import Enum</code>).</span>
<span class="comment-copy">@EthanFurman - can you add the appropriate <code>import</code> statement in the first code block here?</span>
<span class="comment-copy">@arootbeer: Done.</span>
