<div class="post-text" itemprop="text">
<p>What would be the most efficient way to get all dict items with <code>value == 3</code> and create a new dict? </p>
<p>Here is what I have thus far:</p>
<pre><code>d = {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, ...}
new_d = {}
for item in d:
    if d[item] == 3:
        new_d[item] = d[item]
</code></pre>
<p>Is there a more efficient, simpler way to do this? Perhaps using a map?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/reference/expressions.html#dictionary-displays" rel="nofollow">dict comprehension</a>:</p>
<pre><code>new_d = {k:v for k, v in d.items() if v == 3}
</code></pre>
<p>Note that you should call <code>d.iteritems()</code> in Python 2.x to avoid creating an unnecessary list.</p>
<hr/>
<p>As you can see from the <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow"><code>timeit.timeit</code></a> tests below, this solution is more efficient:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; d = {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}
&gt;&gt;&gt;
&gt;&gt;&gt; timeit('''
... new_d = {}
... for item in d:
...     if d[item] == 1:
...          new_d[item] = d[item]
... ''', 'from __main__ import d')
5.002458692375711
&gt;&gt;&gt;
&gt;&gt;&gt; timeit('new_d = {k:v for k, v in d.items() if v == 1}', 'from __main__ import d')
4.844044424640543
&gt;&gt;&gt;
</code></pre>
<p>It is also a lot simpler, which is always good.</p>
</div>
<span class="comment-copy">Possible duplicate: <a href="http://stackoverflow.com/questions/2568673/inverse-dictionary-lookup-python" title="inverse dictionary lookup python">stackoverflow.com/questions/2568673/â€¦</a></span>
<span class="comment-copy">I get that this is simpler, but is it more efficient?</span>
<span class="comment-copy">Yes, see my edit.</span>
<span class="comment-copy">If the OP needs to do this for multiple values he may want to make an inverse mapping: <code>d_inverse = {};for k, v in d.items():d2.setdefault(v, []).append(k)</code>.  This would be slower for one value, but likely faster for multiple values.</span>
