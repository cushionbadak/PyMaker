<div class="post-text" itemprop="text">
<p>I would like to do something like the following:</p>
<pre><code>def getFunction(params):
   f= lambda x:
       do stuff with params and x
   return f
</code></pre>
<p>I get invalid syntax on this. What is the Pythonic/correct way to do it?</p>
<p>This way I can call <code>f(x)</code> without having to call <code>f(x,params)</code> which is a little more messy IMO.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>lambda</code> expression is a very limited way of creating a function, you can't have multiple lines/expressions (per <a href="https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">the tutorial</a>, <em>"They are syntactically restricted to a single expression"</em>). However, you can nest standard function <code>def</code>initions:</p>
<pre><code>def getFunction(params):
   def to_return(x):
       # do stuff with params and x
   return to_return
</code></pre>
<p>Functions are first-class objects in Python, so once defined you can pass <code>to_return</code> around exactly as you can with a function created using <code>lambda</code>, and either way they get access to the "closure" variables (see e.g. <a href="https://stackoverflow.com/q/4020419/3001761">Why aren't python nested functions called closures?</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like what you're actually trying to do is <a href="http://en.wikipedia.org/wiki/Partial_application" rel="nofollow">partial function application</a>, for which <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools</code></a> provides a solution. For example, if you have a function <code>multiply()</code>:</p>
<pre><code>def multiply(a, b):
    return a * b
</code></pre>
<p>... then you can create a <code>double()</code> function<sup>1</sup> with one of the arguments pre-filled like this:</p>
<pre><code>from functools import partial

double = partial(multiply, 2)
</code></pre>
<p>... which works as expected:</p>
<pre><code>&gt;&gt;&gt; double(7)
14
</code></pre>
<hr/>
<p><sup>1</sup> Technically a <code>partial</code> object, not a function, but it behaves in the same way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't have a multiline lambda expression in Python, but you can return a lambda or a full function:</p>
<pre><code>def get_function1(x):
    f = lambda y: x + y
    return f

def get_function2(x):
    def f(y):
        return x + y
    return f
</code></pre>
</div>
<span class="comment-copy">The key point is a <code>def</code>'d function is just a first-class value itself, like the result of the lambda, with the same "closure" access.</span>
<span class="comment-copy">Cool. Can you comment on when this library would have use over a solution like johnrsharpe posted above?</span>
<span class="comment-copy">@user3391229 If you want a partial function (as above), use <code>partial()</code> - it's less verbose and you're less likely to make a mistake. If you need something more complex, use a closure as in Jon Sharpe's answer. This is an instance of a general rule of thumb in Python - if the included batteries solve your problem, use them.</span>
<span class="comment-copy">great. thank you</span>
