<div class="post-text" itemprop="text">
<p>I'm experienced with Python a little, however, still doesn't understand how to use <code>all()</code> and <code>any()</code>. I'm trying to solve a problem;</p>
<blockquote>
<p>2520 is the smallest number that can be divided by each of the numbers
  from 1 to 10 without any remainder.</p>
<p>What is the smallest positive number that is evenly divisible by all
  of the numbers from 1 to 20?</p>
</blockquote>
<p>My algorithm was first like this;</p>
<pre><code>tp = (1,2,3,4,5,6,7,8,9,10,
      11,12,13,14,15,16,17,
      18,19,20) #I used tuple so I thought process may faster than list

for x in range(100,100000,2):
    for t in tp:
        if x%t==0:
            print(x)
</code></pre>
<p>However, before I run the script I realized that my algorithm is wrong because number may divisible by <strong>all</strong> of the numbers in the tuple. Then I remember <code>all()</code> function, I tried to change my codes like;</p>
<pre><code>if all(x%t==0):
    print(x)
</code></pre>
<p>But I got <code>TypeError: 'bool' object is not iterable</code> error. Probably I have never used <code>all()</code> and <code>any()</code> before, just saw some examples and I didn't understand. Could anyone explain me clearly? Then I can solve this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all()</code></a> function accept an iterable as its argument you can pass a generator within , also as you are in python 3 you can use <code>range(1,20)</code> that return a generator instead the tuple :</p>
<pre><code>&gt;&gt;&gt; for x in range(100,100000,2):
...     if all(x%t==0 for t in range(1,21)):
...        print (x)
... 
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>all()</code> and <code>any()</code> require an iterable parameter to be passed to them.</p>
<ul>
<li><code>all()</code> returns true if and only if all values in the iterable are <em>truthy</em>.</li>
<li><code>any()</code> returns true if any one value in the iterable is <em>truthy</em>.</li>
</ul>
<p>For your specific problem, you would likely be better off using <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow"><code>filter</code></a> instead, since that can support both an iterable and a function.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>any()</code> and <code>all()</code> take lists, not equations.  While the concepts come from mathematics, these functions operate on lists of values.  Maybe you want:</p>
<pre><code>for x in range(100,10000,2):
    if all([x%t==0 for t in tp]):
        print(x)
</code></pre>
</div>
<span class="comment-copy">have a look at this <a href="http://stackoverflow.com/q/19389490/1082673">SO link</a></span>
<span class="comment-copy">It’s worth nothing that there are a few languages (R …) where your approach would directly work. However, Python does not auto-vectorise operations. This has got nothing to do with <code>all</code> (which is conceptually correct here), it’s just that you unfortunately cannot write <code>x % t == 0</code> when <code>x</code> is a list. You need to manually map or iterate over each element of the list.</span>
<span class="comment-copy">This is not an answer to your question about <code>all()-any()</code>, but regarding the X of your <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY-problem</a>. What you need, is known as "<a href="http://en.wikipedia.org/wiki/Least_common_multiple" rel="nofollow noreferrer">least common multiple</a>", and calculated via a simple formula without having to search for a solution among million candidates (even with such a great optimization as a tuple instead of a list).</span>
<span class="comment-copy">@bereal Yes thanks you're right the problem is about least common multiples basically</span>
<span class="comment-copy">Thanks for the answer but are you sure is this correct? I tried with this number <code>100000000</code> and there is no result. Number is so big so probably codes are wrong</span>
<span class="comment-copy">@dively you're welcome .  its not incorrect you can try with <code>&gt;&gt;&gt; for x in range(100,100000,2): ...     if all(x%t==0 for t in range(1,11)): ...         print (x) ...  2520 5040 7560 10080 12600 15120 17640 20160 22680 25200 27720 30240 32760 35280 37800 40320 42840 45360 47880 50400 52920 55440 57960 60480 63000 65520 68040 70560 73080 75600 78120 80640 83160 85680 88200 90720 93240 95760 98280 </code></span>
<span class="comment-copy">You're right,codes are working. Well then probably the number that I'm looking is HUGE. Any suggestion for algorithm? T_T</span>
<span class="comment-copy">@dively mmm . this could be complecated  , but as a more efficient way its better to use <code>any</code> tiil it find an number in specific range that <code>x%t !=0</code> it return false !</span>
<span class="comment-copy">Hah! I found the number, I realized that actually my tuple must be <code>(11,12,13,14,15,16,17,18,19,20)</code> because before these numbers, all numbers can be divisible. Like if a number divisible by 20 then it may divisible by 2,4,5,10 too. Number is <code>232792560</code>. Thanks for the answer again!</span>
<span class="comment-copy">Could you give me a tip that how can I use them in my algorithm?</span>
