<div class="post-text" itemprop="text">
<pre><code>try:
    try:
        raise Exception('0')
    finally:
        print 1/0
except Exception, e:
    print e
</code></pre>
<p>It only prints out "integer division or modulo by zero". What's the procedure when the codes run?</p>
</div>
<div class="post-text" itemprop="text">
<p>When a <code>finally</code> clause is present the code is executed no matter how you leave the body, i.e. by an exception or by a <code>return</code> statement.</p>
<p>If during the body of a <code>finally</code> there is an exception however this new exception replaces the original one and that's why the error you're getting is about 1/0 and not your original exception.</p>
<p>You can read more about handing errors and exceptions <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">in the official documentation on "defining clean-up actions"</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Becuse you <code>raise Exception('0')</code>, but not deal with it, and when the code goes for <code>finally</code>, it raise an Exception which except the outter <code>except</code>, if you try this way will see 0:</p>
<pre><code>try:
    try:
        raise Exception('0')
    except Exception, error:
        print error
    finally:
        print 1/0
except Exception, e:
    print e
</code></pre>
<p>Output:</p>
<pre><code>0
integer division or modulo by zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Why this exception doesn't print 0?</strong>
Because exception is coming in the <code>finally</code> block in statement <code>print 1/0</code> </p>
<ol>
<li>A <code>finally</code> clause is always executed before leaving the try statement, whether an exception has occurred or not. 
<ol start="2">
<li>The <code>raise</code> statement allows the programmer to force a specified exception to occur. </li>
</ol></li>
</ol>
<p>I just added <code>print</code> statement in this example:</p>
<p>code:</p>
<pre><code>try:
    try:
        print "befor--raise"
        raise Exception('0')
        print "after--raise"
    finally:
        print "in finally"
        print 1/0
except Exception, e:
    print "In main Exception"
    print e


print "---------"

try:
    try:
        print "befor--raise"
        raise Exception('0')
        print "after--raise"
    finally:
        print "in finally"
        print 1/1
except Exception, e:
    print "In main Exception"
    print e
</code></pre>
<p>Output:</p>
<pre><code>~$ python  test.py
befor--raise
in finally
In main Exception
integer division or modulo by zero
---------
befor--raise
in finally
1
In main Exception
0
</code></pre>
</div>
<span class="comment-copy">perhaps a link to the docs would be good?</span>
<span class="comment-copy">@user3467349: you're right, added.</span>
<span class="comment-copy">Actually this isn't obvious behaviour, idk why everyone says it is.</span>
