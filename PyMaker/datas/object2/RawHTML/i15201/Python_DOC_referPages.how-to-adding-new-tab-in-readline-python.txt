<div class="post-text" itemprop="text">
<p>I have a problem can't adding a new tab in reading file.<br/>
I've tried readline, but I am confused..<br/></p>
<pre><code>f = open('data.txt', 'r')
count = 0
for i in f.readlines():
     count += 1
     if count == 3:
          #adding new tab
     print i,
</code></pre>
<p>In here, I have <code>data.txt</code> which contains data like this:</p>
<pre><code>af  Afrikaans
sq  Albanian
ar  Arabic
hy  Armenian
az  Azerbaijani
eu  Basque
</code></pre>
<p>But I can't adding new tab if the data is in a certain count readline.<br/>
I want to make it like this..</p>
<pre><code>af  Afrikaans      hy   Armenian
sq  Albanian       az   Azerbaijani
ar  Arabic         eu   Basque
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>below is the code that will do what you aim to accomplish, hope it is what you want:</p>
<pre><code>f = open('data.txt','r')
lines = [l.strip() for l in f.readlines()]
l = len(lines)
for i in range(l/2):
    print lines[i]+'\t'+ lines[i + l/2]
if l%2: #if it is odd
    print lines[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm a particular fan of the <code>itertools</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>grouper</code></a> recipe for things like this.</p>
<pre><code>from itertools import zip_longest
# in Python2 do:
## from itertools import izip_longest

data = """af  Afrikaans
sq  Albanian
ar  Arabic
hy  Armenian
az  Azerbaijani
eu  Basque""".splitlines()

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

for line in zip(*grouper(data, 3, '')):
    print('\t'.join(line))
</code></pre>
<p>This can be nicely modular</p>
<pre><code># tablefy.py

from itertools import zip_longest

def rows(data, max_rows=None, columndelimiter="\t"):
    """Produces rows, squeezing extra data into max_rows by
    adding columns delimited by columndelimiter"""
    # rows(['a','b','c','d'], 3, "    ") --&gt; ['a    d', 'b    ', 'c    ']

    if max_rows is None:
        return (row for row in data)

    def _grouper(iterable, n, fillvalue=None):
        """Collect data into fixed-length chunks or blocks"""
        # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
        args = [iter(iterable)] * n
        return zip_longest(*args, fillvalue=fillvalue)

    for line in _grouper(data, max_rows, fillvalue=""):
        yield "\t".join(line)
</code></pre>
<p>Â </p>
<pre><code># my_file.py

data = """af  Afrikaans
sq  Albanian
ar  Arabic
hy  Armenian
az  Azerbaijani
eu  Basque""".splitlines()

import tablefy

for row in tablefy.rows(data, max_rows=3):
    print(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can create one list to store your lines per 3 iteration then append this it to <code>last_q</code> and at last you can use <code>zip</code> function to zip <code>last_q</code> and join the pairs with <code>\t</code> then write to file again :</p>
<pre><code>import copy
q = []
last_q= []
with open('newefile.txt','r') as f:
   for line in f:
        q.append(line.strip())
        if len(q)==3 :
            last_q.append(copy.copy(q))
            q=[]

with open('newefile.txt','w') as f:
    for lines in zip(*last_q) :
        print lines
        f.write('\t'.join(lines)+'\n')
</code></pre>
<p>Demo :</p>
<pre><code>print last_q    
deque([deque(['af  Afrikaans\thy  Armenian', 'sq  Albanian\taz  Azerbaijani', 'ar  Arabic\teu  Basque'], maxlen=3)]) 

print zip(*last_q)
[('af  Afrikaans', 'hy  Armenian'), ('sq  Albanian', 'az  Azerbaijani'), ('ar  Arabic', 'eu  Basque')]
</code></pre>
<p>Final result :</p>
<pre><code>af  Afrikaans   hy  Armenian
sq  Albanian    az  Azerbaijani
ar  Arabic      eu  Basque
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think what you want is actually print two different lines on the same line, separated by a tab. So you would have to read them all and then print them with the tab in the middle. Something like this:</p>
<pre><code>f = open('data.txt', 'r')
lines = []
for i in f.readlines():
    lines.append(i.replace("\n", ""))

for i in range(0, len(lines)/2):
   print lines[i] +  "\t" + lines[len(lines)/2 + i]
</code></pre>
</div>
<span class="comment-copy">do you want to print the entries you read in the format you mentioned? I did not understand what you are looking for, but '\t' is tab. print '\t' print a tab char to stdout. hope it is what you are lloking for.</span>
<span class="comment-copy">yes, i just wanna print my stdout like a tab.. but not <code>'\t'</code> as you mean...</span>
<span class="comment-copy">what prevents you from using '\t'? you want to read if input has tabs between them?</span>
<span class="comment-copy">so far yet, but I am confused if the data within a certain range, then the next data will be displayed (like tabs)</span>
<span class="comment-copy">have you tried to split with '\t'? 1- line = file.readline() 2- line = line.split('\t') ?</span>
<span class="comment-copy">thank you verry much.. solved if like this..</span>
<span class="comment-copy">Although this produces the correct output, it's incredibly specific to this use case and nearly none of this is reusable.</span>
<span class="comment-copy">Plus because this is a good solution for this problem , but note that its not good for files with long length!!</span>
<span class="comment-copy">I did not lower the vote sir... your answer is correct sir, but I am more able to understand what I consider it right.. :) thank you verry much for your help.. :)</span>
<span class="comment-copy">@agaust yes ,welcome ,but  first , if you find an answer helpful and correct you can tell this to community with voting , also if you are a programmer or want to learn , you need to deal with general and more efficient ways! and refuse to being lazy ;)</span>
<span class="comment-copy">humbb okey sir..</span>
<span class="comment-copy">I think you're missing a <code>]</code> somewhere in your <code>deque([</code> line</span>
<span class="comment-copy">@AdamSmith You are right, fixed! actually at the first i thought about using another way with max len , but after some changes i don't notice about this problem! thanks for reminding!</span>
<span class="comment-copy">how if the data is odd?</span>
<span class="comment-copy">If this solution worked, it's because it happened to work in this specific dataset. It's not really the best way to go about the process.</span>
<span class="comment-copy">I omitted the odd-even check to keep it simple but you would actually need to add it.</span>
