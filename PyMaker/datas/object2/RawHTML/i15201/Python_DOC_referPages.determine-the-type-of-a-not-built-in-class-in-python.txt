<div class="post-text" itemprop="text">
<p>I've got a grid representing a tessellation, which is a set of instances of the <code>Polygon</code> class (a class I made). I also have a <code>Boundary</code> class, which is the class representing the boundary of the simulation I'm running (another class I've made). Any line of any pentagon can either have two <code>Polygon</code> objects or a <code>Polygon</code> and a <code>Boundary</code> object as "parents" (an attribute which I've defined for the line class). The type of the object determines how I do certain computations.  </p>
<p>So, in short, I need a way to tell which of two classes a particular variable is an instance of, where I've made both classes. When I call <code>type(parent)</code>, I get:</p>
<pre><code> &lt;type 'instance'&gt;
</code></pre>
<p>How am I supposed to determine this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The idiomatic way to perform typechecking in Python is to use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow"><code>isinstance</code></a>:</p>
<pre><code>if isinstance(x, Boundary):
    # x is of type Boundary
elif isinstance(x, Polygon):
    # x is of type Polygon
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class Boundary:
...     pass
...
&gt;&gt;&gt; x = Boundary()
&gt;&gt;&gt; isinstance(x, Boundary)
True
&gt;&gt;&gt;
</code></pre>
<p>Note that doing <code>type(x) is Boundary</code> would also work, but it will not factor in inheritance like <code>isinstance</code> does.</p>
</div>
<div class="post-text" itemprop="text">
<p>In old-style classes you check the class of an instance using its <code>__class__</code> attribute, in new-style classes <code>type()</code> will work fine(Read: <a href="https://wiki.python.org/moin/NewClassVsClassicClass" rel="nofollow">NewClass Vs Classic Class</a>). In old-style classes every instance of user-defined class was of type <code>instance</code>(<a href="https://www.python.org/download/releases/2.2.3/descrintro/" rel="nofollow">Unifying types and classes in Python 2.2</a>). </p>
<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; class A:
    pass
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__class__
&lt;class __main__.A at 0x7fcce57b1598&gt;
&gt;&gt;&gt; a.__class__ is A
True
</code></pre>
<p>In new-style classes <code>type(ins</code>) and <code>ins.__class__</code> now do the same thing:</p>
<pre><code>&gt;&gt;&gt; class B(object): # Inherit from object to create new-style class
    pass
... 
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; type(b)
&lt;class '__main__.B'&gt;
&gt;&gt;&gt; b.__class__
&lt;class '__main__.B'&gt;
</code></pre>
<p>You can also use <code>isinstance()</code> to check if an object is an instance of a class:</p>
<pre><code>&gt;&gt;&gt; isinstance(a, A)
True
&gt;&gt;&gt; isinstance(b, B)
True
</code></pre>
<p>But checking this using <code>isinstance</code> doesn't mean the class is the exact parent of the instance:</p>
<pre><code>&gt;&gt;&gt; class C(B):
    pass
... 
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; isinstance(c, B)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try testing the <code>__class__</code> attribute of your object:</p>
<pre><code>class Class(object):
    def __init__(self):
        pass # Object created

obj = Class()
print obj.__class__ == Class
</code></pre>
</div>
<span class="comment-copy">Have a look at <a href="http://stackoverflow.com/a/54873">stackoverflow.com/a/54873</a></span>
