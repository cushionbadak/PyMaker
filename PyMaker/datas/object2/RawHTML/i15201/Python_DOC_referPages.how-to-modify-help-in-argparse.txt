<div class="post-text" itemprop="text">
<p>When you run</p>
<p>foo.py -h </p>
<p>OR</p>
<p>foo.py --help,</p>
<p>you will get a "help" message about how to use foo.py and what arguments that it takes. Is there a way I can append to this message? Printing __doc__ for example?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, <code>argparse</code> gives you <strong>a lot</strong> of customization possibilities.  To "append" to the help (print more after the help message is done), for example, use the <code>epilog</code> named argument.</p>
<pre><code>parser = argparse.ArgumentParser(epilog="That's all she wrote", ...)
</code></pre>
<p>where <code>...</code> stands for "whatever other named arguments you want to pass to the parser constructor", the message in question will be printed on <code>--help</code> after the help about arguments.</p>
<p>See <a href="https://docs.python.org/3/library/argparse.html" rel="noreferrer">https://docs.python.org/3/library/argparse.html</a> for a few thousand words about <code>argparse</code> (written as a reference but with lots of examples) and <a href="https://docs.python.org/3/howto/argparse.html#id1" rel="noreferrer">https://docs.python.org/3/howto/argparse.html#id1</a> for a few thousand more (written as a tutorial).  Maybe half those docs are about how to fine-tune messages for <code>--help</code> or error cases!-)</p>
</div>
<div class="post-text" itemprop="text">
<p>The help-formatting function, <code>argparse.ArgumentParser.format_help()</code>, looks like this:</p>
<pre><code>def format_help(self):
        formatter = self._get_formatter() #by default, an instance of argparse.HelpFormatter

        # usage
        formatter.add_usage(self.usage, self._actions,
                            self._mutually_exclusive_groups)

        # description
        formatter.add_text(self.description)

        # positionals, optionals and user-defined groups
        for action_group in self._action_groups:
            formatter.start_section(action_group.title)
            formatter.add_text(action_group.description)
            formatter.add_arguments(action_group._group_actions)
            formatter.end_section()

        # epilog
        formatter.add_text(self.epilog)

        # determine help from format above
        return formatter.format_help()
</code></pre>
<p>So, you can either</p>
<ul>
<li>customize the strings used (they can be passed as constructor arguments, you're probably interested in <code>epilog</code>), or</li>
<li>replace the default <code>HelpFormatter</code> (the <code>formatter_class</code> constructor argument) to customize how these strings are transformed into help text

<ul>
<li>the <code>argparse</code> module <a href="https://docs.python.org/2/library/argparse.html?highlight=formatter_class#formatter-class" rel="nofollow noreferrer">bundles 3 alternative classes</a>.</li>
</ul></li>
</ul>
</div>
<span class="comment-copy">What is <code>foo.py</code>? Something you've written?</span>
<span class="comment-copy">well, foo.py is just an example.</span>
<span class="comment-copy">What if <code>foo.py</code> is empty? Then <code>foo.py -h</code> prints nothing. You have to tell us something about what <code>foo.py</code> contains in order to get a meaningful answer.</span>
<span class="comment-copy">I have some documentations (_<i>doc_</i>) I need to append or start my help message with.</span>
<span class="comment-copy">Great! Thank you for your help I used  <b>parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)</b>  to make it not to skip on "\n"</span>
