<div class="post-text" itemprop="text">
<p>I have been distributing a python 2.7 package distribution as an egg. We've been pointing people to easy_install knowing it has a limited shelf life because we use Windows as well as Linux and don't distribute on PyPI. </p>
<p>when our users invoke the installation:</p>
<blockquote>
<p>easy_install mypack.egg</p>
</blockquote>
<p>the last thing that happens looks like an online check for dependencies. This has cause folks to report a bug when easy_install can't find a registered listing on PyPI. Why is this dependency check happening? Is it because we don't have an explicit "requires" section? I don't mind that easy_install would look for dependent packages that I specify, but this seems different ... it is looking for a dependency list.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://pythonhosted.org/setuptools/easy_install.html#configuration-files" rel="nofollow">easy_install documentation</a></p>
<blockquote>
<p>You can use the --allow-hosts (-H) option to restrict what domains &gt;EasyInstall will look for links and downloads on. --allow-hosts=None &gt;prevents downloading altogether.</p>
<p>For example:</p>
</blockquote>
<pre><code>easy_install -H None -f somedir SomePackage
</code></pre>
<blockquote>
<p>will attempt to install SomePackage using only eggs and source packages &gt;found in somedir and disallowing all remote access. You should of course &gt;make sure you have all of SomePackage’s dependencies available in somedir.</p>
</blockquote>
<p>or in the egg configuration:</p>
<blockquote>
<p>--no-find-links Blocks the addition of any link.</p>
<p>This parameter is useful if you want to avoid adding links defined  in a &gt;project easy_install is installing (whether it’s a requested project or a &gt;dependency). When used, --find-links is ignored.</p>
</blockquote>
<p>This doesn't answer the question "why does this behaviour exist?", but helps to change it.</p>
</div>
<span class="comment-copy">Thanks, but let me reiterate that hard part of my question. If SomePackage depends on OtherPackage, I am OK if it looks for OtherPackage online and installs it. In fact I want this.  I just don't want it looking for the list of dependencies for SomePackage and reporting an error when none is found. As far as I am concerned, I will have listed these requirements. Does this answer address this distinction?</span>
<span class="comment-copy">So, of the list of dependencies there is a subset that you don't want it looking for because you're providing them via some other means, or you just want to <i>hide the error</i> to so you don't have to explain "it's okay, no really"?</span>
<span class="comment-copy">No, my problem has nothing to do with loading true dependent packages and it doesn't matter if there are zero, one or many of those. Say my package is SomePackage. Its only dependency is OtherPackage. I don't mind if it looks for OtherPackage and installs it. The problem is it goes to the cheeseshop and looking for SomePackage or a  list of its dependencies. The is the error message I keep getting is that it is trying (and of course failing) to do this.</span>
<span class="comment-copy">There is a distinction I'm not understanding. You don't mind it going to the cheeseshop, but when it does go, it asks for something <i>not</i> there. You don't want to <i>hide</i> the error, you want it to <i>not be there</i> even though it's <i>non</i>-fatal. If it's not a problem "in the egg", <code>--quite</code> flag doesn't cut it, so filter out the warnings with something along the lines of <a href="https://docs.python.org/3/library/warnings.html#warning-filter" rel="nofollow noreferrer">docs.python.org/3/library/warnings.html#warning-filter</a></span>
