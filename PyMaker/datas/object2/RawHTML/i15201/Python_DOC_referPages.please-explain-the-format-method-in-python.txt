<div class="post-text" itemprop="text">
<p>I am processing a text file containing coordinates x, y, z</p>
<pre><code>     1      128  1298039
123388        0        2
....
</code></pre>
<p>every line is delimited into 3 items using</p>
<pre><code>words = line.split()
</code></pre>
<p>After processing data I need to write coordinates back in another txt file so as items in each column are aligned right (as well as the input file). Every line is composed of the coordinates</p>
<pre><code>line_new = words[0]  + '  ' + words[1]  + '  ' words[2].
</code></pre>
<p>Is there any manipulator like <code>std::setw()</code> etc. in C++ allowing to set the width and alignment?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this approach using the newer <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="noreferrer"><code>str.format</code> syntax</a>:</p>
<pre><code>line_new = '{:&gt;12}  {:&gt;12}  {:&gt;12}'.format(word[0], word[1], word[2])
</code></pre>
<p>And here's how to do it using the old <code>%</code> syntax (useful for older versions of Python that don't support <code>str.format</code>):</p>
<pre><code>line_new = '%12s  %12s  %12s' % (word[0], word[1], word[2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can align it like that:</p>
<pre><code>print('{:&gt;8} {:&gt;8} {:&gt;8}'.format(*words))
</code></pre>
<p>where <code>&gt;</code> means "<strong>align to right</strong>" and <code>8</code> is the <strong>width</strong> for specific value.</p>
<p>And here is a proof:</p>
<pre><code>&gt;&gt;&gt; for line in [[1, 128, 1298039], [123388, 0, 2]]:
    print('{:&gt;8} {:&gt;8} {:&gt;8}'.format(*line))


       1      128  1298039
  123388        0        2
</code></pre>
<p>Ps. <code>*line</code> means the <code>line</code> list will be unpacked, so <code>.format(*line)</code> works similarly to <code>.format(line[0], line[1], line[2])</code> (assuming <code>line</code> is a list with only three elements).</p>
</div>
<div class="post-text" itemprop="text">
<p>It can be achieved by using <code>rjust</code>: </p>
<pre><code>line_new = word[0].rjust(10) + word[1].rjust(10) + word[2].rjust(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I really enjoy a new literal string interpolation in Python 3.6+:</p>
<pre><code>line_new = f'{word[0]:&gt;12}  {word[1]:&gt;12}  {word[2]:&gt;12}'
</code></pre>
<p>Reference: <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP 498 -- Literal String Interpolation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Simple tabulation of the output:</p>
<pre><code>a = 0.3333333
b = 200/3
print("variable a    variable b")
print("%10.2f    %10.2f" % (a, b))
</code></pre>
<p>output:</p>
<pre><code>variable a    variable b
      0.33         66.67
</code></pre>
<p><strong>%10.2f:</strong> 10 is the minimum length and 2 is the number of decimal places.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way how you can format using 'f-string' format:</p>
<pre><code>print(
    f"{'Trades:':&lt;15}{cnt:&gt;10}",
    f"\n{'Wins:':&lt;15}{wins:&gt;10}",
    f"\n{'Losses:':&lt;15}{losses:&gt;10}",
    f"\n{'Breakeven:':&lt;15}{evens:&gt;10}",
    f"\n{'Win/Loss Ratio:':&lt;15}{win_r:&gt;10}",
    f"\n{'Mean Win:':&lt;15}{mean_w:&gt;10}",
    f"\n{'Mean Loss:':&lt;15}{mean_l:&gt;10}",
    f"\n{'Mean:':&lt;15}{mean_trd:&gt;10}",
    f"\n{'Std Dev:':&lt;15}{sd:&gt;10}",
    f"\n{'Max Loss:':&lt;15}{max_l:&gt;10}",
    f"\n{'Max Win:':&lt;15}{max_w:&gt;10}",
    f"\n{'Sharpe Ratio:':&lt;15}{sharpe_r:&gt;10}",
)
</code></pre>
<p>This will provide the following output:</p>
<pre><code>Trades:              2304
Wins:                1232
Losses:              1035
Breakeven:             37
Win/Loss Ratio:      1.19
Mean Win:           0.381
Mean Loss:         -0.395
Mean:               0.026
Std Dev:             0.56
Max Loss:          -3.406
Max Win:             4.09
Sharpe Ratio:      0.7395
</code></pre>
<p>What you are doing here is you are saying that the first column is 15 chars long and it's left justified and second column (values) is 10 chars long and it's right justified.</p>
</div>
<span class="comment-copy">What is the relationship between the variables <code>words</code> and <code>word</code>?</span>
<span class="comment-copy">@ Mark: Typo, has been fixed...</span>
<span class="comment-copy">Note how the "old" syntax is cleaner, easier to read, and shorter.</span>
<span class="comment-copy">I thought I'd add a more direct link than the one provided: <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">Shorter for sure, I don't know what cleaner really means, but 'easier to read' is just because it's familiar, I think. If you're not already familiar with one of them, the new format seems easier to read. ".format" for string formatting certainly seems more intuitive than percentage/modulo. Right arrow for right alignment seems pretty intuitive too.</span>
<span class="comment-copy">If you are using python 2 and alligning lines with non-latin symbols use unicode! (<code>u'...'.format</code>)</span>
<span class="comment-copy">How can I combine both &gt; &lt; in python 2 with the same string using %</span>
<span class="comment-copy">I just wonder why this answer has so few upvotes. It's the only who does not have such an ugly syntax.</span>
