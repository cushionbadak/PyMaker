<div class="post-text" itemprop="text">
<p>How is it possible that</p>
<pre><code>class EmptyClass:
    def __init__(self):
        pass

e = EmptyClass()
e.a = 123
</code></pre>
<p>works and:</p>
<pre><code>o = object()
o.a = 123
</code></pre>
<p>does not (<code>AttributeError: 'object' object has no attribute 'a'</code>) while</p>
<pre><code>print isinstance(e, object)
&gt;&gt;&gt; True
</code></pre>
<p>?</p>
<p>What is <code>object()</code> good for then, when you cannot use it like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot add attributes to an instance of <code>object</code> because <code>object</code> does not have a <a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="noreferrer"><code>__dict__</code> attribute</a> (which would store the attributes).  From the <a href="https://docs.python.org/3/library/functions.html#object" rel="noreferrer">docs</a>:</p>
<blockquote>
<p><code>class object</code></p>
<p>Return a new featureless object. <code>object</code> is a base for all classes. It has the methods that are common to all instances of Python classes.
  This function does not accept any arguments.</p>
<p><strong>Note:
  <code>object</code> does not have a <code>__dict__</code>, so you canâ€™t assign arbitrary attributes to an instance of the <code>object</code> class.</strong></p>
</blockquote>
<p>And <code>object</code> does have its uses:</p>
<ol>
<li><p>As stated above, it serves as the base class for all objects in Python.  Everything you see and use ultimately relies on <code>object</code>.</p></li>
<li><p>You can use <code>object</code> to create <a href="http://en.wikipedia.org/wiki/Sentinel_value" rel="noreferrer">sentinel values</a> which are perfectly unique.  Testing them with <code>is</code> and <code>is not</code> will only return <code>True</code> when an exact <code>object</code> instance is given.</p></li>
<li><p>In Python 2.x, you can (should) inherit from <code>object</code> to create a <a href="https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python">new-style class</a>.  New-style classes have enhanced functionality and better support.  Note that all classes are automatically new-style in Python 3.x.</p></li>
</ol>
</div>
<span class="comment-copy">Simply because everything is a object. So for anything to exist, <code>object</code> must exist too.</span>
<span class="comment-copy">Maybe <a href="http://stackoverflow.com/questions/4015417/python-class-inherits-object">this question and it's answers</a> can give you some light</span>
<span class="comment-copy">It also comes handy in generating unique objects that we can use as sentinel value(we cannot use <code>None</code> everywhere).</span>
<span class="comment-copy">Good idea, I'll add it.</span>
<span class="comment-copy">I use it occasionally to create a unique object (with a unique <code>id</code>) that can be used as a special marker or <a href="http://en.wikipedia.org/wiki/Sentinel_value" rel="nofollow noreferrer">sentinel value</a> when processing data that might contain <code>None</code> or zero-length items which are valid non-sentinel values.</span>
