<div class="post-text" itemprop="text">
<p>What are some ways to get the most common value in a list?</p>
<pre><code>l = [1,2,2]
</code></pre>
<p>So far I'm doing:</p>
<pre><code>Counter(l).most_common()[0][0]
</code></pre>
<p>But I was wondering if there was a list method or something 'simpler' to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>max</code></a> with <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow"><code>list.count</code></a>, but it's not efficient as your current solution:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 2]
&gt;&gt;&gt; max(set(l), key=l.count)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's pretty much as good as it gets - although I'd suggest using <code>.most_common(1)</code> which will be more efficient* than <code>.most_common()</code> and use it like so:</p>
<pre><code>(value, count), = Counter(sequence).most_common(1)
</code></pre>
<p>*Source from <code>collections.Counter</code>:</p>
<pre><code>if n is None:
    return sorted(self.items(), key=_itemgetter(1), reverse=True)
return _heapq.nlargest(n, self.items(), key=_itemgetter(1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is almost equivalent to what @JonClement 's solution does</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; l = [1,2,2]
&gt;&gt;&gt; c = Counter(l)
&gt;&gt;&gt; max(c, key=c.get)
2
</code></pre>
<p>As <a href="https://hg.python.org/cpython/file/3.4/Lib/heapq.py#l434" rel="nofollow"><code>heapq.nlargest</code></a> will run</p>
<pre><code>if n == 1:
    it = iter(iterable)
    head = list(islice(it, 1))
    if not head:
        return []
    if key is None:
        return [max(chain(head, it))]
    return [max(chain(head, it), key=key)]
</code></pre>
<p>in this specific case where <code>n=1</code> which performs the same as above just without the list of a single tuple.</p>
</div>
<span class="comment-copy">If you're only after the most common, use <code>Counter(l).most_common(1)</code> as the <code>Counter</code> class optimises that use case</span>
