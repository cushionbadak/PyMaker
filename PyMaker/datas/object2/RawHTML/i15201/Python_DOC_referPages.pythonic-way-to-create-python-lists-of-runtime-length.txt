<div class="post-text" itemprop="text">
<p>The <code>f=[]</code> in the below code seems a waste of a line, but I don't know how to get around it.</p>
<p>1)</p>
<pre><code>f=[]
for x in X:
   f.append(foo(x))
</code></pre>
<p>2)</p>
<pre><code>f=[]
[f.append(foo(x)) for x in X]
</code></pre>
<p>I was just wondering what the most "pythonic" way to do this is. The <code>f=[]</code> line seems unpythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>You better read about <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions in python</a></p>
<pre><code>f = [foo(x) for x in X]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = [None]*len(X)
</code></pre>
<p>creates a list of None elements in the same size as X, and is O(n)</p>
<pre><code>f = list(X) 
</code></pre>
<p>copies X to f and has the same time complexity as the above according to <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow">https://wiki.python.org/moin/TimeComplexity</a></p>
<p>If you meant to specifically create a list where every element is foo(x), then yeah:</p>
<pre><code>f = [foo(x) for x in X]
</code></pre>
</div>
<span class="comment-copy">Thank you. What if instead of foo, it is several lines of y=foo1(x), z=foo2(y) f.append(z)? I guess I would have to make new function to do foo1 then foo2 or else cram it into one line with [foo4(foo3(...foo1(x))) for x in X]?</span>
<span class="comment-copy">well, it depends :-) Both solutions you provided are ok. Which is better - depends on concrete situation.</span>
<span class="comment-copy">What would be the point of the first option? I don't think you can later say for y in f:     y=something_more_interesting</span>
<span class="comment-copy">The only point I can think of is reusing f recursively so you don't need to allocate more memory for each recursion cycle</span>
