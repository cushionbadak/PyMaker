<div class="post-text" itemprop="text">
<p>I have two lists;</p>
<pre><code>A = ['red', 'green', 'blue', 'white', 'black']
B = ['22', '34', '7', '3', '850']
</code></pre>
<p>I'd like to sort list B from maximum value to minimum value and then sort list A, based on the transformation applied to list B. That is;</p>
<pre><code>A = ['black', 'green', 'red', 'blue', 'white']
B = ['850', '34', '22', '7', '3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way is to zip them together, sort them by the second component, then unzip them:</p>
<pre><code>ab = zip(A, B)
ab.sort(key=lambda values: int(values[1]), reverse=True)
A, B = zip(*ab)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> them to create a sequence of tuples and then use a list comprehension to extract the first value from each tuple in the sorted order.</p>
<p>A <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>key</code> argument can be passed to <code>sorted</code></a> which allows you to sort based on a function. In the example below we sort using a <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow">lambda function</a> which returns the second value from your combined tuples converted to an integer.</p>
<p>Note that there is a difference between sorting strings and sorting integers, and as such you have to convert values from <code>B</code> using <code>int</code>, if you didn't want this for some reason then you can remove the <code>int</code> call in the lambda function.</p>
<pre><code>A = ['red', 'green', 'blue', 'white', 'black']
B = ['22', '34', '7', '3', '850']

C = zip(A, B)

D = [i for i, _ in sorted(C, key=lambda x:int(x[1]), reverse=True)]

print(D)
# ['black', 'green', 'red', 'blue', 'white']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Besides the builtin function <code>zip</code> &amp; <code>sort</code> as @DanielRoseman answered, you can use <code>numpy</code> module to sort:</p>
<pre><code>In [116]: import numpy as np
     ...: A = ['red', 'green', 'blue', 'white', 'black']
     ...: B = ['22', '34', '7', '3', '850']
     ...: A = np.asarray(A)
     ...: B = np.asarray(B)
     ...: iB = np.asarray(map(int, B))
     ...: idx = iB.argsort()[::-1] #get indices in reverse order
     ...: sa = A[idx]
     ...: sb = B[idx]

In [117]: print sa, sb
['black' 'green' 'red' 'blue' 'white'] ['850' '34' '22' '7' '3']
</code></pre>
<p><code>numpy</code> is more efficient when your lists to sort is of <strong>large size</strong>. </p>
<p>To benchmark:</p>
<pre><code>In [97]: a = np.random.randint(1000, size=10000)
    ...: b = np.random.randint(1000, size=10000)

In [99]: %%timeit
    ...: idx = b.argsort()[::-1]
    ...: sa = a[idx]
    ...: sb = b[idx]
    ...: 
1000 loops, best of 3: 648 Âµs per loop

In [100]: %%timeit
     ...: ab = zip(a, b)
     ...: ab.sort(key=lambda values: int(values[1]), reverse=True)
     ...: sa, sb = zip(*ab)
     ...: 
100 loops, best of 3: 10.1 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>sorted_by_second_list = [x[0] for x in sorted(zip(A,B),key=lambda tup: int(tup[1]))]
</code></pre>
<p>zip will create a list of tuples, used with lambda in the sort function</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=['red','green','blue','white','black']
b=[22,34,7,3,850]
c=zip(a,b)
print c
[('red', 22), ('green', 34), ('blue', 7), ('white', 3), ('black', 850)]
from operator import itemgetter
sorted(c, key=itemgetter(1), reverse=True)
[('black', 850), ('green', 34), ('red', 22), ('blue', 7), ('white', 3)]
</code></pre>
</div>
<span class="comment-copy">It's an interesting exercise, what have you tried so far?</span>
<span class="comment-copy">Strictly speaking, you have not properly sorted list <code>B</code>, since they are strings and you have sorted them numerically.</span>
<span class="comment-copy">After applying <code>A, B = zip(*ab)</code>, A and B are not lists anymore, but 1-tuples, correct? Besides doing <code>A = list(A)</code> and <code>B = list(B)</code> in subsequent lines, is there an easier, faster way of doing it?</span>
<span class="comment-copy">Not really, other than the list comprehension mentioned in other answers, but those don't work if you need both sorted lists.</span>
<span class="comment-copy">Some additional commentary of your code would be nice ...</span>
