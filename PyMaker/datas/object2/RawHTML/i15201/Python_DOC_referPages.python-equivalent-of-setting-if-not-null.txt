<div class="post-text" itemprop="text">
<p>In ruby I can do this:</p>
<pre><code>1.9.3-p448 :001 &gt; a = 1 || 2
 =&gt; 1 
1.9.3-p448 :004 &gt; a = nil || 2
 =&gt; 2 
1.9.3-p448 :005 &gt; a = 1 || nil
 =&gt; 1 
</code></pre>
<p>Is there a similar one-liner in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow"><code>or</code></a> operator. From the linked page:</p>
<blockquote>
<p><strong>x or y</strong>: if x is false, then y, else x</p>
</blockquote>
<p>Example:</p>
<pre><code>In [1]: 1 or 2
Out[1]: 1

In [2]: None or 2
Out[2]: 2

In [3]: 1 or None
Out[3]: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>or</code> operator is pretty much the equivalent of Ruby's <code>||</code> -- and <code>None</code> can be used in Python somewhat similarly to how <code>nil</code> is in Ruby.</p>
<p>So, for example,</p>
<pre><code>a = None or 2
</code></pre>
<p>would set <code>a</code> to <code>2</code>.</p>
<p>You can also use a richer "ternary" operator, <code>something if condition else somethingelse</code> -- <code>a or b</code> is the same as <code>a if a else b</code> -- but clearly <code>or</code> is more concise and readable when what you want to do is exactly the semantics it supports.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't forget about modern if-else syntax:</p>
<pre><code>x = a if a is not None else 999
</code></pre>
<p>(or whatever condition you need). This let you test for non-None and is not prone to empty list and similar problems.</p>
<p>General syntax is</p>
<pre><code>ValueToBeUsedIfConditionIsTrue if Condition else ValueToBeUsedIfConditionIsFalse
</code></pre>
</div>
<span class="comment-copy">Note that this also "works" for <code>False or 2 == 2</code>, <code>0 or 2 == 2</code>, and <code>[] or [2] == [2]</code>. Make sure you want this behaviour</span>
<span class="comment-copy">@Eric: good point.  The OP used <code>||</code>, and <code>0 || 2</code> gives 0 in Ruby (compared with <code>0 | 2</code>, which gives 2), so we'd need to check on expectations in those cases.</span>
<span class="comment-copy">I think in Ruby the null syntax is <code>nil</code>, not <code>null</code>. But I agree with the rest of the answer.</span>
<span class="comment-copy">@MatteoNNZ, tx, edited to fix.</span>
