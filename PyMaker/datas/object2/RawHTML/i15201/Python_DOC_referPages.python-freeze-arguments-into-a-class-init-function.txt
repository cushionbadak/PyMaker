<div class="post-text" itemprop="text">
<p>Suppose I have a class that looks like this:</p>
<pre><code>  class MyClass(object):
        def __init__(self, some_arg, param=None):
            self.some_arg = some_arg
            self.param = param
</code></pre>
<p>In most instances I initialize my class like this:</p>
<pre><code>obj = MyClass(1, param='some_string')
</code></pre>
<p>But I'll occasionally have a code path which sets the <code>param</code> keyword argument based on some logic, while holding the <code>some_arg</code> positional argument at a constant value. This code would look something like:</p>
<pre><code>if some_condition:
   obj = MyClass(1, param='some_string')
elif some_other_condition:
   obj = MyClass(1, param='some_other_string')
else:
   obj = MyClass(1, param='some_third_string')
</code></pre>
<p>My question is: Can I avoid having to repeat myself for the <code>MyClass(1</code> portion of my object instantiation? I would like to, for the duration of the code path, freeze the value of the positional <code>some_arg</code> as <code>1</code>, and simply pass the keyword argument <code>param</code> at instantiation time.</p>
<p>Ideally the code would look something like this:</p>
<pre><code>MyClass = magic_function_to_freeze_some_arg(MyClass, some_arg=1)

if some_condition:
   obj = MyClass(param='some_string')
elif some_other_condition:
   obj = MyClass(param='some_other_string')
else:
   obj = MyClass(param='some_third_string')

print(obj.some_arg) # Always 1 regardless of which if condition is hit
</code></pre>
<p>Any ideas for what a clean implementation of <code>magic_function_to_freeze_some_arg</code> would look like? Is there a means to do this via Python standard library?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a>!</p>
<pre><code>from functools import partial

MyClass_new = partial(MyClass, some_arg=1)
</code></pre>
<p>alternatively (as mgilson mentions in the comments) you can build your own anonymous constructor method</p>
<pre><code>MyClass_new = lambda *args,**kwargs: MyClass(*args, some_arg=1, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of repeating <code>MyClass</code>, store the argument in a variable and apply that:</p>
<pre><code>if some_condition:
   param = 'some_string'
elif some_other_condition:
   param = 'some_other_string'
else:
   param = 'some_third_string'

obj = MyClass(1, param=param)
</code></pre>
<p>You could create a <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial()</code> object</a> or a <code>lambda</code> function but for this case that's overkill.</p>
</div>
<span class="comment-copy">And there's always <code>lambda</code> as well (if you don't want the extra import) ... :-)</span>
<span class="comment-copy">Thanks! Tried both of these approaches and they work. Still, I wonder if it's possible to do this without binding to a new name in the local namespace? Would be the nice to continue to use <code>MyClass</code> for the code path instead of <code>MyClass_new</code></span>
<span class="comment-copy">@Adam actually <code>MyClass = partial(MyClass, some_arg=1)</code> throws an <code>UnboundLocalError</code> in 3.4 ostensibly because <code>MyClass</code> is no longer bound by the time <code>partial</code> is called.</span>
<span class="comment-copy">@talwai huh, weird. I thought <code>partial</code> would work as a closure, binding the function when called before assigning it to the same old variable name. Regardless I wouldn't do that anyway :)</span>
<span class="comment-copy">yup that is definitely cleaner code. But my example was a bit over-simplified and what I really wanted to do was raise an <code>Exception</code> with some frozen arguments, meaning that I would need the object instantiated right away rather than outside the <code>if</code> block.</span>
