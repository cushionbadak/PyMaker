<div class="post-text" itemprop="text">
<p>In the following method the correct behaviour would to to save the <code>news</code> model <strong>before</strong> passing its id to the asynchronous Task queue for further processing.
Otherwise the task queue has the older version.</p>
<p>As you can see I have made a mistake and am saving the model after sending its id to the task queue.  </p>
<pre><code>def save_scraped_body_into_model(url_string):
        news = ndb.Key(urlsafe=url_string).get()
        ...
        news.body = result
        news.stage = 1
        taskqueue.Task(url='/api/v1.0/worker/bbc-stage-2', headers=header,
                           payload=json.dumps({'news_url_string': news.key.urlsafe()})).add(queue_name='newstasks')
        news.put()
</code></pre>
<p>How do I possibly test for that?
My test below passes as long as the model was saved. But thats wrong, the order matters, and this test doesn't capture it !!!  Is there a way to achieve this with mock?</p>
<pre><code>def test_news_instance_saved_before_next_stage(self, get_head):
        BBCSpider.save_scraped_body_into_model(self.news.key.urlsafe())
        context = ndb.get_context()
        context.clear_cache()
        news = ndb.Key(urlsafe=self.news.key.urlsafe()).get()
        self.assertEqual(news.stage, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm doing these kind of tests by using <code>patch</code> from <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code> framework</a>.</p>
<p>When I need to do test like this the first thing I do is looking for a point where I can put a hook. Then I patch the hook and use <code>side_effect</code> callback to do the test.</p>
<p>In your case the hook will be <code>BBCSpider.taskqueue.Task</code> and its <code>side_effect</code> something like this:</p>
<pre><code>lambda *args,**kwargs: self.assertEqual(1, ndb.Key(urlsafe=self.news.key.urlsafe()).get().stage)
</code></pre>
<p>So your test become:</p>
<pre><code>@patch('BBCSpider.taskqueue.Task', autospec=True)
def test_news_instance_saved_before_next_stage(self, get_head, mock_task):
    def check_if_model_saved(*args,**kwargs):
        news = ndb.Key(urlsafe=self.news.key.urlsafe()).get()
        self.assertEqual(news.stage,1)
    mock_task.side_effect = check_if_model_saved
    BBCSpider.save_scraped_body_into_model(self.news.key.urlsafe())
    self.assertTrue(mock_task.called)
</code></pre>
<p>Note <code>autospec=True</code> is not mandatory but I like to use it every time I do a patch to avoid silly errors.</p>
<p>I'm apologize if the code contains some mistake (I cannot test it without considerable effort) but I hope the idea is clear.</p>
</div>
<span class="comment-copy">I don't know if I'm late but if you are still interested in I posted an answer.</span>
<span class="comment-copy">absolutely. Thanks.</span>
<span class="comment-copy">Thanks for the reply. Thats very interesting approach. So even though I am saving <code>news.put()</code> at the end, because the mock.hook comes before, the <code>side_effect</code> of that hook would still see the model as unsaved?  Even though it was saved one line later?</span>
<span class="comment-copy">Sure: <code>side_effect</code> (and so <code>self.assertEqual(news.stage,1)</code>) will be executed when your code call <code>taskqueue.Task()</code> and so <b>before</b> <code>news.put()</code> call</span>
<span class="comment-copy">sounds good. That should work. If not I come back again. ;-)</span>
