<div class="post-text" itemprop="text">
<p>I've got this huge TXT file with different columns number.</p>
<pre><code>jero, kor@gmail.com, 44d448e4d, team, 0, 6, 5, 2, s, s, s, none, none
jader, lda@gmail.com, d44a88x, team, 0, none, 48, 95, oled
etc for 15000 lines
</code></pre>
<p>I would like to cut everything after the "team" word, in each-line. I've tryied several regex but couldn't succeed.</p>
<p>Thank you !</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no need to user regex for this, there is a straight forward solution.</p>
<pre><code>with open('file.txt') as f:
    for line in f:
        i = line.split('team')[0] + "team"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, if you're about to parse a CSV file, let's use the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow">dedicated module</a>:</p>
<pre><code>import csv

for row in csv.reader(your_file, skipinitialspace=True):
    if 'team' in row:
        row = row[:row.index('team')+1]
    print ', '.join(row)
</code></pre>
<p>This saves you from all the hassle with inputs like <code>jero_team, kor@team.com, 44d448e4d, team, 0, one_more, team, 5, 2</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use regular expression. Using <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition</code></a>:</p>
<pre><code>&gt;&gt;&gt; line = 'jero, kor@gmail.com, 44d448e4d, team, 0, 6, 5, 2, s, s, s, none, none'
&gt;&gt;&gt; a, sep, _ = line.partition('team')
&gt;&gt;&gt; a
'jero, kor@gmail.com, 44d448e4d, '
&gt;&gt;&gt; sep
'team'
&gt;&gt;&gt; a + sep
'jero, kor@gmail.com, 44d448e4d, team'
</code></pre>
<hr/>
<pre><code>with open('file.txt') as f:
    for line in f:
        a, sep, _ = line.partition('team')
        line = a + sep
        # Do something with line
</code></pre>
<p><strong>UPDATE</strong></p>
<p>To address the problem @DSM mentioned: split on other field that contains <code>team</code>:</p>
<pre><code>with open('file.txt') as f:
    for line in f:
        a, sep, _ = line.partition(', team,')
        line = a + sep
        # Do something with line
</code></pre>
</div>
<span class="comment-copy">I would stay away from regex. Alfie's answer seems promising</span>
<span class="comment-copy">To put it another way: you want to preserve the first three columns?  Every current answer which splits or substitutes on <code>team</code> will fail if someone's email address is <code>mad_murdock@a_team.org</code>.</span>
<span class="comment-copy">DSM, Yes, exactly.</span>
<span class="comment-copy">Excellent, it's working ! Thank you a lot. I can't give you my upvote because I'm a total rookie in here but I'f you have Facebook or Twitter, I'll be glad to give you a follow.  Best</span>
<span class="comment-copy">:) its cool. . .</span>
<span class="comment-copy">But I think you can mark it as the answer.</span>
<span class="comment-copy">You can also use <code>del</code> statement: <code>del row[row.index('team') + 1:]</code></span>
<span class="comment-copy">@falsetru: sure, a better idea would be to use <code>try-except pass</code> instead of <code>if</code> to avoid scanning the list twice.</span>
