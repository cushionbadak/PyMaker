<div class="post-text" itemprop="text">
<p>I'm trying to use <a href="https://docs.python.org/3/library/logging.handlers.html#smtphandler" rel="nofollow"><code>logging</code>'s <code>SMTPHandler</code></a>. From Python 3.3 on, you can specify a <code>timeout</code> keyword argument. If you add that argument in older versions, it fails. To get around this, I used the following:</p>
<pre><code>import sys

if sys.version_info &gt;= (3, 3):
    smtp_handler = SMTPHandler(SMTP_SERVER, FROM_EMAIL, TO_EMAIL, SUBJECT, timeout=20.0)
else:
    smtp_handler = SMTPHandler(SMTP_SERVER, FROM_EMAIL, TO_EMAIL, SUBJECT)
</code></pre>
<p>Is there a better way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than test for the version, use exception handling:</p>
<pre><code>try:
    smtp_handler = SMTPHandler(SMTP_SERVER, FROM_EMAIL, TO_EMAIL, SUBJECT, timeout=20.0)
except TypeError:
    # Python &lt; 3.3, no timeout parameter
    smtp_handler = SMTPHandler(SMTP_SERVER, FROM_EMAIL, TO_EMAIL, SUBJECT)
</code></pre>
<p>Now you can conceivably upgrade your standard library in-place with a patch or a backport module and it'll continue to work.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do something like this:</p>
<pre><code>kargs = {}
if sys.version_info &gt;= (3, 3):
    kargs['timeout'] = 20.0

smtp_handler = SMTPHandler(SMTP_SERVER, FROM_EMAIL, TO_EMAIL, SUBJECT, **kargs)
</code></pre>
<p><strong>UPDATE</strong>: The idea of <code>try/catch</code> of other answers is nice, but it assumes that it fails because of the <code>timeout</code>  argument. Here I present an extra-smart test for the availability of the argument. What if future versions of this class add more and more optional arguments? (Disclaimer: not claimed as portable):</p>
<pre><code>if 'timeout' in SMTPHandler.__init__.__code__.co_varnames:
    kargs['timeout'] = 20.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another slightly different approach:</p>
<pre><code>from logging.handlers import SMTPHandler
import sys

if sys.version_info &gt;= (3, 3):
    # patch in timeout where available
    from functools import partial
    SMTPHandler = partial(SMTPHandler, timeout=20.0)
</code></pre>
<p>Now in the rest of the code you can just use:</p>
<pre><code>smtp_handler = SMTPHandler(SMTP_SERVER, FROM_EMAIL, TO_EMAIL, SUBJECT)
</code></pre>
<p>and know that the <code>timeout</code> argument is being used if available. This does still rely on static version checking, but means that all of the version-specific config is in one place and may reduce duplication elsewhere.</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/196960/3001761">stackoverflow.com/q/196960/3001761</a></span>
<span class="comment-copy">or <code>kargs = {'timeout': 20.0} if sys.version_info &gt;= (3, 3) else {}</code> in ternary form</span>
