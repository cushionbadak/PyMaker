<div class="post-text" itemprop="text">
<p>I noticed Flask was using Werkzeug to <code>__import__</code> a module, and I was a little confused. I went and checked out the docs on it and saw that it seems to give you more control somehow in terms of where it looks for the module, but I'm not sure <em>exactly</em> how and I have zero idea how it's different from <code>importlib.import_module</code>.</p>
<p>The odd thing in the Werkzeug example is that it just says <code>__import__(import_name)</code>, so I don't see how that's any different from just using the <code>import</code> statement, since it's ignoring the optional extra parameters.</p>
<p>Can anyone explain? I looked at other people having asked similar questions on SO previously but they weren't very clearly phrased questions and the answers didn't address this at all.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#__import__" rel="noreferrer"><code>__import__</code></a> is a low-level hook function that's used to import modules; it can be used to import a module <em>dynamically</em> by giving the module name to import as a variable, something the <code>import</code> statement won't let you do.</p>
<p><a href="https://docs.python.org/2/library/importlib.html#importlib.import_module" rel="noreferrer"><code>importlib.import_module()</code></a> is a wrapper around that hook<sup>*</sup> to produce a nice API for the functionality; it is a very recent addition to Python 2, and has been more fleshed out in Python 3. Codebases that use <code>__import__</code> generally do so because they want to remain compatible with older Python 2 releases, e.g. anything before Python 2.7.</p>
<p>One side-effect of using <code>__import__</code> can be that it returns the imported module and doesn't add anything to the namespace; you can import with it without having then to delete the new name if you didn't want that new name; using <code>import somename</code> will add <code>somename</code> to your namespace, but <code>__import__('somename')</code> instead returns the imported module, which you can then ignore. Werkzeug uses the hook for that reason in one location.</p>
<p>All other uses are to do with dynamic imports. Werkzeug supports Python 2.6 still so cannot use <code>importlib</code>.</p>
<hr/>
<p><sup>*</sup> <code>importlib</code> is a Pure-Python implementation, and <code>import_module()</code> will use that implementation, whist <code>__import__</code> will use a C-optimised version. Both versions call back to <code>importlib._bootstrap._find_and_load()</code> so the difference is mostly academic.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>__import__(import_name)</code>, so I don't see how that's any different from
  just using the import statement</p>
</blockquote>
<p>Both <code>__import__()</code> and importlib.import_module() allow you to import a module when you have the module name as a string.  You cannot write:</p>
<pre><code>x = 're'
import x
</code></pre>
<p>or you'll get:</p>
<pre><code> File "1.py", line 3, in &lt;module&gt;
 import x ImportError: No module named x
</code></pre>
</div>
<span class="comment-copy">Use <code>__import__</code> where <code>you want to import a module whose name is only known at runtime</code>. Other than this... as you said this gives your more power compared to import</span>
<span class="comment-copy">If memory serves correctly there is a David Beasely video on import, within the video he mentions that WerkZeug overloaded import for some reason.</span>
<span class="comment-copy">I don't quite understand what you mean by "you can import with it without having then to delete the new name if you didn't want that new name." If you have a minute could you maybe flesh that out as if you were talking to a toddler?</span>
<span class="comment-copy">@Aerovistae: updated that a little; <code>import sys</code> adds the name <code>sys</code> to your namespace (bound to the module), <code>__import__('sys')</code> returns the <code>sys</code> module object to the caller, which is then free to ignore that object.</span>
<span class="comment-copy">@MartijnPieters By namespace do you mean <code>sys.modules</code>?</span>
<span class="comment-copy">@NeoWang: by namespace I mean the globals of a module. These are stored as a dictionary on the <code>module</code> instance, which in turn is stored in <code>sys.modules</code>.</span>
<span class="comment-copy">(Modified link in this comment) Does this answer requires modification? According to <a href="https://stackoverflow.com/a/27307159/1317018">this</a> (specifically <a href="https://docs.python.org/3/whatsnew/3.3.html#using-importlib-as-the-implementation-of-import" rel="nofollow noreferrer">this</a>), <code>__import__()</code> is not <code>importlib.__import__</code> and <code>import</code> statement is not implemented by <code>importlib</code>, that is, I guess <code>import</code> statement is now <code>importlib.import_module()</code>, right?</span>
