<div class="post-text" itemprop="text">
<p>I really love pythons possibility to shorten things up with its shorthand for loops — but sometimes, I need to obtain a list containing one value multiple times, which I did the following way:</p>
<pre><code>plot(seconds, [z0 for s in seconds], '--')
</code></pre>
<p>But that unused <code>s</code> really disturbs me for aesthetic reasons.</p>
<p>Is there any shorter (and more beautiful) way of doing so? Like some special “multiplication” of some value?</p>
</div>
<div class="post-text" itemprop="text">
<p>You mean like:</p>
<pre><code>[z0] * len(seconds)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>depending on what z0 is</p>
<pre><code> [z0]*len(seconds)
</code></pre>
<p>fair warning this will not work like you hope in the case that z0 is a mutable datatype</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel like the way you are doing it is not that dirty...  But the <code>numpy.fill</code> function is a bit more tidy:</p>
<pre><code>In [4]: import numpy as np
In [5]: x=np.empty(5)

In [6]: x.fill(8)

In [7]: x
Out[7]: array([ 8.,  8.,  8.,  8.,  8.])
</code></pre>
</div>
<span class="comment-copy">You can multiply lists: <code>[1] * 3 -&gt; [1, 1, 1]</code>.</span>
<span class="comment-copy">the usual name for unused variables is <code>_</code>, unless you can get rid of it</span>
<span class="comment-copy">although sometimes <code>_</code> is for localizing strings... and other times it is a autopopulated context variable provided by the python shell ...</span>
<span class="comment-copy">@njzk2 and @Joran: I've always seen double-underscore <code>__</code> used as a "junk" variable, specifically to avoid clashing with other uses of single-underscore <code>_</code>, like the interactive interpreter and the <a href="https://docs.python.org/3/library/gettext.html#gettext.install" rel="nofollow noreferrer"><code>gettext</code> module</a>.  As a bonus, while the leading underscore makes it invisible to <code>from &lt;module&gt; import *</code>, it's not quite long enough to trigger <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer">class-private name mangling</a>.</span>
<span class="comment-copy">I had no clue this was a thing... Time to hit the basics</span>
<span class="comment-copy">@AdamHughes As Joran Beasley said in his answer, the list is several references to the same object. So if the object can be mutated (like a list or dict), then the changes to one element be reflected for every other element (as they are the same object). However, this is safe if the object is immutable (such as strings or numbers, or a tuple).</span>
<span class="comment-copy">Thanks for pointing that out, I wouldn't have realized that at all.</span>
