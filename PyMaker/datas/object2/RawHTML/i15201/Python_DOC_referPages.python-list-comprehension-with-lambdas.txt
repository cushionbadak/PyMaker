<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/452610/how-do-i-create-a-list-of-python-lambdas-in-a-list-comprehension-for-loop">How do I create a list of Python lambdas (in a list comprehension/for loop)?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I'm running Python 3.4.2, and I'm confused at the behavior of my code. I'm trying to create a list of callable polynomial functions with increasing degree:</p>
<pre><code>bases = [lambda x: x**i for i in range(3)]
</code></pre>
<p>But for some reason it does this:</p>
<pre><code>print([b(5) for b in bases])
# [25, 25, 25]
</code></pre>
<p>Why is <code>bases</code> seemingly a list of the last lambda expression, in the list comprehension, repeated? </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem, which is a <a href="http://eev.ee/blog/2011/04/24/gotcha-python-scoping-closures/" rel="noreferrer">classic
"gotcha"</a>, is
that the <code>i</code> referenced in the lambda functions is <a href="https://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules">not looked up until the
lambda function is called</a>. At that time, the value of <code>i</code> is the last value it
was bound to when the <code>for-loop</code> ended, i.e. <code>2</code>.</p>
<p>If you bind <code>i</code> to a default value in the definition of the <code>lambda</code> functions, then each <code>i</code> becomes a local variable, and its default value is evaluated and bound to the function at the time the lambda is <em>defined</em> rather than called.</p>
<p>Thus, when the lambda is called, <code>i</code> is now looked up in the <em>local scope</em>, and its default value is used:</p>
<pre><code>In [177]: bases = [lambda x, i=i: x**i for i in range(3)]

In [178]: print([b(5) for b in bases])
[1, 5, 25]
</code></pre>
<p>For reference:</p>
<ul>
<li><a href="http://docs.python.org/tutorial/classes.html#python-scopes-and-namespaces" rel="noreferrer">Python scopes and namespaces</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>a more 'pythonic' approach:<br/>
using <strong>nested functions</strong>:</p>
<pre><code>def polyGen(degree):
    def degPolynom(n):
        return n**degree
    return degPolynom

polynoms = [polyGen(i) for i in range(5)]
[pol(5) for pol in polynoms]
</code></pre>
<p>output:</p>
<blockquote>
<p>&gt;&gt; [1, 5, 25, 125, 625]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As an alternate solution, you could use a partial function:</p>
<pre><code>&gt;&gt;&gt; bases = [(lambda i: lambda x: x**i)(i) for i in range(3)]
&gt;&gt;&gt; print([b(5) for b in bases])
[1, 5, 25]
</code></pre>
<p>The only advantage of that construction over the classic solution given by @unutbu is that way, you cannot introduce sneaky bugs by calling your function with the wrong number of arguments:</p>
<pre><code>&gt;&gt;&gt; print([b(5, 8) for b in bases])
#             ^^^
#             oups
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;listcomp&gt;
TypeError: &lt;lambda&gt;() takes 1 positional argument but 2 were given
</code></pre>
<hr/>
<p>As suggested by Adam Smith in a comment bellow, instead of using "nested lambda" you could use <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> with the same benefit:</p>
<pre><code>&gt;&gt;&gt; import functools
&gt;&gt;&gt; bases = [functools.partial(lambda i,x: x**i,i) for i in range(3)]
&gt;&gt;&gt; print([b(5) for b in bases])
[1, 5, 25]
</code></pre>
<pre><code>&gt;&gt;&gt; print([b(5, 8) for b in bases])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;listcomp&gt;
TypeError: &lt;lambda&gt;() takes 2 positional arguments but 3 were given
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think the "why this happens" aspect of the question has been answered yet.</p>
<p>The reason that names non-local names in a function are not considered constants is so that these non-local names will match the behaviour of global names. That is, changes to a global name after a function is created are observed when the function is called.</p>
<p>eg.</p>
<pre><code># global context
n = 1
def f():
    return n
n = 2
assert f() == 2

# non-local context
def f():
    n = 1
    def g():
        return n
    n = 2
    assert g() == 2
    return g
assert f()() == 2
</code></pre>
<p>You can see that in both the global and non-local contexts that if the value of a name is changed, then that change is reflected in future invocations of the function that references the name. If globals and non-locals were treated differently then that would be confusing. Thus, the behaviour is made consistent. If you need the current value of a name to made constant for a new function then the idiomatic way is to delegate the creation of the function to another function. The function is created in the creating-function's scope (where nothing changes), and thus the value of the name will not change.</p>
<p>eg.</p>
<pre><code>def create_constant_getter(constant):
    def constant_getter():
        return constant
    return constant_getter

getters = [create_constant_getter(n) for n in range(5)]
constants = [f() for f in getters]
assert constants == [0, 1, 2, 3, 4]
</code></pre>
<p>Finally, as an addendum, functions can modify non-local names (if the name is marked as such) just as they can modify global names. eg.</p>
<pre><code>def f():
    n = 0
    def increment():
        nonlocal n
        n += 1
        return n
    return increment
g = f()
assert g() + 1 == g()
</code></pre>
</div>
<span class="comment-copy">You might find this helpful: <a href="http://eev.ee/blog/2011/04/24/gotcha-python-scoping-closures/" rel="nofollow noreferrer">Gotcha: Python, scoping, and closures</a></span>
<span class="comment-copy">unutbu: Any idea on how to make it work?</span>
<span class="comment-copy">Maybe what you want is <code>bases = lambda x:[x**i for i in range(3)]</code> ?</span>
<span class="comment-copy">@user3467349 that's totally different. Then you'd do <code>base_results = bases(5)</code></span>
<span class="comment-copy">@AdamSmith I see yeah.., then as far as I can see it this is an interpreter err... "retardation". This should <code>raise</code> as invalid (which could be reasonable) or work with proper iterator assignments...</span>
<span class="comment-copy">Neat (+1). It'd be awesome if the answer explained why the original code didn't work, and why this does. Thanks.</span>
<span class="comment-copy">Is there any good reason for python interpreting the code like that? This is rather obfuscated...</span>
<span class="comment-copy">@user3467349: Well, for now, Python uses <a href="http://en.wikipedia.org/wiki/Name_resolution#Static_versus_dynamic" rel="nofollow noreferrer">dynamic name resolution</a>. But <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">the docs state</a>, "the language definition is evolving towards static name resolution", so maybe in the future the rules will change.</span>
<span class="comment-copy">@user3467349 The principle is called <i>closure</i> and out there are people who find this behavior useful.</span>
<span class="comment-copy">But you could replicate the behaviour with <code>bases = [lambda x: x**($n-1) for i in range($n)]</code> (Where $n is a preset value) - so it's unclear why this this particular application <i>needs</i> to function as it does. (If there is a non-obfuscated way to do something it's almost always better to raise an error on the obfuscated way).</span>
<span class="comment-copy">If you're going to build partial functions, you should use <code>functools.partial</code>!</span>
<span class="comment-copy">@Adam Yes. You are right. I've edited my answer accordingly. The one thing that bother me when using <code>partial</code> is that the error message reports a "wrong" number of required positional arguments. But this is a rather minor gotcha for a syntax that is more clear to understand.</span>
<span class="comment-copy">Nice explanation and thanks for telling me about 'nonlocal'!</span>
