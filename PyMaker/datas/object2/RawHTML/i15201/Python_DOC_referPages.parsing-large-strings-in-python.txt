<div class="post-text" itemprop="text">
<p>I am trying to parse a string extract specific words.</p>
<p>The string </p>
<pre><code>{{About|the ALGOL-like programming language|the scripting language formerly named Small|Pawn (scripting language)}}

'''SMALL''', Small Machine Algol Like Language, is a [[computer programming|programming]] [[programming language|language]] developed by Dr. [[Nevil Brownlee]] of [[Auckland University]].

==History==
The aim of the language was to enable people to write [[ALGOL]]-like code that ran on a small machine.  It also included the '''string''' type for easier text manipulation.

SMALL was used extensively from about 1980 to 1985 at [[Auckland University]] as a programming teaching aid, and for some internal projects.  Originally written to run on a [[Burroughs Corporation]] B6700 [[Main frame]] in [[Fortran]] IV, subsequently rewritten in SMALL and ported to a DEC [[PDP-10]] Architecture (on the [[Operating System]] [[TOPS-10]]) and IBM S360 Architecture (on the Operating System VM/[[Conversational Monitor System|CMS]]).

About 1985, SMALL had some [[Object-oriented programming|object-oriented]] features added to handle structures (that were missing from the early language), and to formalise file manipulation operations.

==See also==
*[[ALGOL]]
*[[Lua (programming language)]]
*[[Squirrel (programming language)]]

==References==
*[http://www.caida.org/home/seniorstaff/nevil.xml Nevil Brownlee]

[[Category:Algol programming language family]]
[[Category:Systems programming languages]]
[[Category:Procedural programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Programming languages created in the 1980s]] 
</code></pre>
<p><br/>
I want to extract ALGOL, Lua (programming language), Squirrel(programming language) from the SEE ALSO section. (Exactly these words are to added no brackets or star.)<br/>
I have tried these Approaches <br/>
String split, regular expressions. 
I am still nowhere, 
Help appreciated. </p>
<p><br/><br/>
Code used by me<br/></p>
<pre><code>import urllib.request,json,re

url = "http://en.wikipedia.org/w/api.php?format=json&amp;action=query&amp;titles=SMALL&amp;prop=revisions&amp;rvprop=content"
response = urllib.request.urlopen(url)
str_response = response.readall().decode('utf-8')
obj = json.loads(str_response)
a=str(obj['query']['pages']['1808130']['revisions'][0]['*'])
print(a)
</code></pre>
<p>String is stored in a. </p>
</div>
<div class="post-text" itemprop="text">
<p>If i understood correctly, you need characters between <code>==See also==</code> and <code>==References==</code> excluding those <code>*[]</code> . I named your initial string as <code>my_string</code>.</p>
<pre><code>import re

# Sliced_string will only contain the characters between '==See also==' and '==References=='
sliced_string = re.findall(r'==See also==(.*?)==References==', my_string, re.DOTALL)[-1]

# Removes stars and brackets
for unwanted_char in '[]*':
    sliced_string = sliced_string.replace(unwanted_char, '')

# Creates a list of strings (also removes empty strings)
final_list = sliced_string.split('\n')
final_list = [elem for elem in final_list if elem != '']

print(final_list)
</code></pre>
<p><strong>Edit</strong>: Converted string to a list.</p>
<p>Code works correctly assuming there is only one occurrence of <code>==See also==</code> and <code>==References==</code> in given string.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print  re.findall(r"\*\[\[([^\]]*)\]\]",re.findall(r"==See also==((?:\s+\*\[\[(?:[^\]]*)\]\])+)",x)[0])
</code></pre>
<p>Apply this directly and send your string stored in x.</p>
</div>
<span class="comment-copy">What have you tried <i>exactly</i>? I'd say you could split the string into lines, extract all lines between <code>==See also==</code> and the next section (or end of file) and then apply a suitable regular expression to every line.</span>
<span class="comment-copy">it's not json, so how could that work?</span>
<span class="comment-copy">How do you @FrerichRaabe suggest i extract all lines between ==See Also== and the next section ? using regular expression ?? I wrote a regular expression for the lines in the middle. i.e. "\W\W\W[a-z,A-Z\W]+\W\W"</span>
<span class="comment-copy">Does the job perfectly... Could you explain the regex you have applied ? I am not used to such complicated regex</span>
<span class="comment-copy">Firstly, you should use raw strings like <code>r'something'</code> instead of <code>'something'</code>.   Now about the regex; parenthesis indicate which part of the match you want <code>findall</code> to return (it will match the whole pattern, but only return the parenthesis content).   Dot <code>.</code> means <i>any character excluding a new line</i>. If <code>re.DOTALL</code> is used as flag, then it ll match new lines as well.    Star <code>*</code> means <i>from 0 to infinite characters</i>. If it's <code>*?</code> then it will match as few as possible before it reaches <code>==References==</code>.</span>
<span class="comment-copy">For more details you can check <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a>, or ask.</span>
<span class="comment-copy">(Just to make it clear, i meant using raw strings for regex patterns, not in general)</span>
