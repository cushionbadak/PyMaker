<div class="post-text" itemprop="text">
<p>How can I replace <code>*args</code> and <code>**kwargs</code> with the real signature in the documentation of decorated functions?</p>
<p>Let's say I have the following decorator and decorated function:</p>
<pre><code>import functools

def mywrapper(func):
    @functools.wraps(func)
    def new_func(*args, **kwargs):
        print('Wrapping Ho!')
        return func(*args, **kwargs)
    return new_func

@mywrapper
def myfunc(foo=42, bar=43):
    """Obscure Addition

    :param foo: bar!
    :param bar: bla bla
    :return: foo + bar

    """
    return foo + bar
</code></pre>
<p>Accordingly, calling <code>print(myfunc(3, 4))</code> gives us:</p>
<pre><code>Wrapping Ho!
7
</code></pre>
<p>So far so good. I also want my library containing <code>myfunc</code> properly documented with Sphinx.
However, if I include my function in my sphinx html page via:</p>
<pre><code>.. automodule:: mymodule
    :members: myfunc
</code></pre>
<p>It will actually show up as:</p>
<h2>myfunc(*args, **kwargs)</h2>
<p>Obscure Addition</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>foo</strong>: bar!</li>
<li><strong>bar</strong>: bla bla</li>
</ul></li>
<li><strong>Returns:</strong>
 foo + bar</li>
</ul>
<p>How can I get rid of the generic <code>myfunc(*args, **kwargs)</code> in the title? This should be replaced by <strong>myfunc(foo=42, bar=43)</strong>. How can I change sphinx or my decorator <code>mywrapper</code> such that the default keyword arguments are preserved in the documentation?</p>
<p><strong>EDIT</strong>:</p>
<p>As pointed out this question has been asked before, but the answers are not so helpful. </p>
<p>However, I had an idea and wonder if this is possible. Does Sphinx set some environment variable that tells my module that it is actually imported by Sphinx? If so, I could simply monkey-patch my own wrappers. If my module is imported by Sphinx my wrappers return the original functions instead of wrapping them. Thus, the signature is preserved.</p>
</div>
<div class="post-text" itemprop="text">
<p>I came up with a monkey-patch for <code>functools.wraps</code>.
Accordingly, I simply added this to the <code>conf.py</code> script in my project documentation's sphinx <code>source</code> folder:</p>
<pre><code># Monkey-patch functools.wraps
import functools

def no_op_wraps(func):
    """Replaces functools.wraps in order to undo wrapping.

    Can be used to preserve the decorated function's signature
    in the documentation generated by Sphinx.

    """
    def wrapper(decorator):
        return func
    return wrapper

functools.wraps = no_op_wraps
</code></pre>
<p>Hence, when building the html page via <code>make html</code>, <code>functools.wraps</code> is replaced with this decorator <code>no_op_wraps</code> that does absolutely nothing but simply return the original function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You ordinarily can't.
That is because the variable names used as parameters in the wrapped function are not even present on the wrapped function  - so Sphinx do not know about them.</p>
<p>That is a known complicated issue in Python - so much that recent versions - including not only Python 3, but also Python 2.7 included a <code>__wrapped__</code> attribute on class decorated that make the proper use from <code>functools.wraps</code> -
that way, upon inspecting the decorated function one is able to know about the actual wrrapped function by looking at <code>__wrapped__</code>. Unfortunatelly, Sphinxs ignores the <code>__wrapped__</code>, and show the info on the wrapper function instead.</p>
<p>SO, one thing to do is certainly to report this as a bug to the Sphinx project itself - it should take <code>__wrapped__</code> in account. </p>
<p>A meantime workaround for that would be to change the wrapper function to actually include more information about the wrapped - like its signature - 
so you could write another function to be called in place of "functools.wraps"  for your project, which does just that: pre-pend the 
function signature to its docstring, if any. 
Unfortunatelly, retrieving the function signatures in Python older than 3.3 is tricky - (for 3.3 and newer, check <a href="https://docs.python.org/3/library/inspect.html#inspect-signature-object" rel="nofollow">https://docs.python.org/3/library/inspect.html#inspect-signature-object</a> ) - but anyway, for a naive form, you could write another version of "wraps" along:</p>
<pre><code>def wraps(original_func):
   wrap_decorator = functools.wraps(original_func)
   def re_wrapper(func):
       wrapper = wrap_decorator(func)
       poorman_sig = original_func.__code__.co_varnames[
                         :original_func.__code__.co_argcount]
       wrapper.__doc__ = "{} ({})\n\n{}".format (
            original_func.__name__, ", ".join(poorman_sig),
            wrapper.__doc__) 
       return wrapper
   return re_wrapper
</code></pre>
<p>And use that instead of "functools.wraps". It would at least add a line with the parameter names, (but not th e defalt values) as first line in the docs.</p>
<p>---Hmm..maybe it would be easier just to patch Sphinx to use <code>__wrapped__</code> before getting this done right.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3687046/python-sphinx-autodoc-and-decorated-members">Python Sphinx autodoc and decorated members</a></span>
<span class="comment-copy">Sorry did not find the question. Yes it is the exact same one. But the answers are not very helpful I am afraid. I don't want to tediously manually add all decorated functions to my sphinx document.</span>
<span class="comment-copy">This is... frightening.  I sure hope Sphinx doesn't call <code>functools.wraps()</code> anywhere in its own codebase.</span>
<span class="comment-copy">This doesn't work for me in <code>conf.py</code>, though it doe (rather uselessly) if I put it right before my definitions of wrappers. Is there a special place in <code>conf.py</code> that this needs to be?</span>
<span class="comment-copy">I put it at the end of <code>conf.py</code>. But I guess you have to be careful to include it before any other module is imported that makes use of <code>functools.wraps</code> in terms of <code>from functools import wraps</code>.</span>
<span class="comment-copy">I guess I could extract the function's default arguements using <code>inspect</code>  and <code>inspect.getargspec(myfunc)</code>?! But still pre-pending this information to the docs would not get rid of the wrong title.</span>
<span class="comment-copy">I created a new github issue for this problem: <a href="https://github.com/sphinx-doc/sphinx/issues/1711" rel="nofollow noreferrer">github.com/sphinx-doc/sphinx/issues/1711</a></span>
