<div class="post-text" itemprop="text">
<p>I found a very strange behavior in the Enum class in Python. So the enumerated type is simple:</p>
<pre><code>from enum import Enum
Analysis = Enum('Analysis', 'static dynamic')
</code></pre>
<p>So I use this enumerated type in for step objects so that they store it in the attribute analysis, as follows:</p>
<pre><code>class Step:
    def __init__(self):
        self.analysis = None
        self.bcs = []
</code></pre>
<p>Very simple so far, so when I have a few of these steps in a list, then I try to see the enumerated type and it has been assigned correctly. But they are not equal:</p>
<pre><code># loop over steps
for s, step in enumerate(kwargs['steps']):
    print(kwargs)
    print(step)
    print(step.analysis)
    print("test for equality: ",(step.analysis == Analysis.static))
    quit()
</code></pre>
<p>which prints</p>
<pre class="lang-none prettyprint-override"><code>{'mesh': &lt;fem.mesh.mesh.Mesh object at 0x10614d438&gt;,
 'steps': [&lt;hybrida.fem.step.Step object at 0x10614d278&gt;,
           &lt;hybrida.fem.step.Step object at 0x10616a710&gt;,
           &lt;hybrida.fem.step.Step object at 0x10616a390&gt;]}
Step:
  analysis: Analysis.static
  bcs: [&lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a0f0&gt;,
        &lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a320&gt;,
        &lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a3c8&gt;,
        &lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a470&gt;,
        &lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a518&gt;,
        &lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a5c0&gt;,
        &lt;hybrida.fem.conditions.dirichlet.Dirichlet object at 0x10616a668&gt;]
Analysis.static
test for equality:  False
</code></pre>
<p>This is not correct, but I have no ideas on how to debug this.</p>
<p><strong>UPDATE</strong></p>
<p>Following the suggestion by @martineau, I created an <code>IntEnum</code> instead and that solved my problem. Yet, I don't understand why the normal <code>Enum</code> doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the comments, you say:</p>
<blockquote>
<p>The input file contains many steps, and <strong>every time I add a new step I
  have to set up the analysis type</strong></p>
</blockquote>
<p>If I understand you correctly, you're saying that you create a new <code>Enum</code> object each time you add a new step. This may be why you're seeing your "bug". The values of two different <code>Enum</code> objects, despite having the same name and order, do not necessarily compare as equal. For example:</p>
<pre><code>import enum
Analysis1 = enum.Enum("Analysis", "static dynamic")
Analysis2 = enum.Enum("Analysis", "static dynamic")
</code></pre>
<p>But:</p>
<pre><code>&gt;&gt;&gt; Analysis1.static == Analysis2.static
False
</code></pre>
<p>This happens because the equality operator is not defined for <code>Enum</code> objects, as far as I can tell, so the default behavior of checking <code>id</code>s is used.</p>
<p>As @martineau suggests in the comments, one way of avoiding this issue is to instead use the <code>IntEnum</code> type, which subclasses <code>int</code>, and therefore defines the equality operator in terms of the value of the <code>Enum</code>, not the <code>id</code>:</p>
<pre><code>import enum
Analysis1 = enum.IntEnum("Analysis", "static dynamic")
Analysis2 = enum.IntEnum("Analysis", "static dynamic")
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; Analysis1.static == Analysis2.static
True
</code></pre>
<h2>Why have <code>Enum</code> <em>and</em> <code>IntEnum</code>?</h2>
<p>It may seem at first glance that <code>IntEnum</code> is <em>always</em> what we want. So what's the point of <code>Enum</code>?</p>
<p>Suppose you want to enumerate two sets of items, say, fruits and colors. Now, "orange" is both a fruit, and a color. So we write:</p>
<pre><code>Fruits = enum.IntEnum("Fruits", "orange apple lemon")
Colors = enum.IntEnum("Colors", "orange red blue")
</code></pre>
<p>But now:</p>
<pre><code>&gt;&gt;&gt; Fruits.orange == Colors.orange
True
</code></pre>
<p>But, philosophically speaking, "orange" (the fruit) is not the same as "orange" (the color)! Shouldn't we be able to distinguish the two? Here, the subclassing of <code>int</code> by <code>IntEnum</code> works against us, as both <code>Fruits.orange</code> and <code>Colors.orange</code> equate to <code>1</code>. Of course, as we saw above, comparison of <code>Enum</code>s compares <code>id</code>s, not values. Since <code>Fruits.orange</code> and <code>Colors.orange</code> are unique objects, they do not compare as equal:</p>
<pre><code>Fruits = enum.Enum("Fruits", "orange apple lemon")
Colors = enum.Enum("Colors", "orange red blue")
</code></pre>
<p>So that:</p>
<pre><code>&gt;&gt;&gt; Fruits.orange == Colors.orange
False
</code></pre>
<p>and we no longer live in a world where some colors are things that you can find in the produce section of your local grocery store.</p>
</div>
<span class="comment-copy">I read a file. I tried to come up with a minimalistic example, but it works fine so I have no idea on what's wrong.</span>
<span class="comment-copy">If I do it the way you suggested I get <code>AttributeError: static</code>. See <a href="http://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python">this post</a>.</span>
<span class="comment-copy">Oh, I see, I tried with the different <code>enum</code> package. Maybe you should add this to your question.</span>
<span class="comment-copy">What different enum package? The package I'm using is stated in the post.</span>
<span class="comment-copy">So how <i>do</i> you set <code>step.analysis</code>? Add the relevant code to your question please.</span>
<span class="comment-copy">Thanks for your answer. I did a <code>grep</code> search, and there's only one point in the code where I create the enum: <code>fem/definitions.py:Analysis = Enum('Analysis', 'static dynamic')</code>. So I import the Analysis from the <code>definitions.py</code> file.</span>
<span class="comment-copy">@aaragon I'd heavily bet that that is still what is happening. If you check the <code>id</code> of <code>step.analysis</code> and <code>Analysis.static</code>, I'm guessing you'll see that they're different. That is, they're two different objects. Are you comparing <code>Enum</code>s that you've unpickled?</span>
<span class="comment-copy">You're right! I'm not using unpickled Enums. I checked the ids just after assignment: <code>print(id(self.steps[-1].analysis)); print(id(Analysis.static))</code> and it gives me the same number: 4329054048. Later on I do the same: <code>print(id(step.analysis)); print(id(Analysis.static))</code> and the second id is different: 4393709864. Why is this happening? The entire point of comparing enums is to be able to do which comparison on integer values (coming from a C++ world).</span>
<span class="comment-copy">@aaragon: You may be able to avoid the problem by using the <a href="https://docs.python.org/3/library/enum.html#intenum" rel="nofollow noreferrer"><code>IntEnum</code></a> class which is derived from <code>int</code>.</span>
<span class="comment-copy">Well that solved my problem, but it doesn't fix the issue. Is that a bug in the <code>Enum</code> python class?</span>
