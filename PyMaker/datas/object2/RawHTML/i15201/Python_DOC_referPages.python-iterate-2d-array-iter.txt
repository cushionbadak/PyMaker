<div class="post-text" itemprop="text">
<p>I am trying to create a 2D Array class and want to make the matrix iterable. Does anyone know how to go about doing this? I am a new to classes in python and still getting the hang of things. Also, how would <strong>str</strong> be implemented in my main? If i just use print(customMatrix) will that go and use the <strong>str</strong> method?</p>
<p>Heres what I'm working on. I know some of it isn't correct :)</p>
<pre><code>class Array2D():
    def __init__(self, height, width):
        self._width = width
        self._height = height
        self.matrix = [[None]*height for _ in range(width)]

    def width(self):
        return self._width

    def height(self):
        return self._height

    def set(self, row, col, element):
        self.matrix[row][col] = element

    def get(self, row, col):
        return self.matrix[row][col]

    def row(self, row_no):
        rowList = []
        for item in self.matrix[row_no][item]:
            rowList.append(item)

    def column(self, col_no):
        colList = []
        for item in self.matrix[item][col_no]:
            colList.append(item)

    def __str__(self):
        #for row in self.matrix:
            #print (row)
        return (str(self.matrix))

    def __iter__(self):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually there is a <code>yield</code> keyword which is handy in this case, It can be thought of as a return statement which saves the previous state while returning anything ,so when you call the method it first yields <code>self.matrix[0][0]</code> on the second call to this method it would yield <code>self.matrix[0][1]</code> and so on..</p>
<pre><code>class Array2D():
    def __init__(self, height, width):
        self._width = width
        self._height = height
        self.matrix = [[None]*height for _ in range(width)]

    def width(self):
        return self._width

    def height(self):
        return self._height

    def set(self, row, col, element):
        self.matrix[row][col] = element

    def get(self, row, col):
        return self.matrix[row][col]

    def row(self, row_no):
        rowList = []
        for item in self.matrix[row_no][item]:
            rowList.append(item)

    def column(self, col_no):
        colList = []
        for item in self.matrix[item][col_no]:
            colList.append(item)

    def __str__(self):
    return_str = ""
    for i in xrange(self._height):
        for j in xrange(self._width):
            return_str+=str(self.matrix[i][j])+"    " #4 space between each element
        return_str+="\n"
    return return_str

    def __iter__(self):
        for i in xrange(self._height):
            for j in xrange(self._width):
                yield self.matrix[i][j]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def __iter__(self):
    for x in xrange(self.width):
         for y in xrange(self.height):
            yield self.matrix[x][y]
</code></pre>
<p>Read up on generators and the yield keyword, they're fun to use!</p>
</div>
<span class="comment-copy">Im getting 'IndexError: list index out of range' whenever the <b>str</b> method is called. any ideas?</span>
<span class="comment-copy">Sorry for the inconvenience, I fixed it</span>
<span class="comment-copy">This is working on your system? I am getting that <b>str</b> is returning a non-string type.</span>
<span class="comment-copy">I always thought <b>str_</b> was supposed to return a string, not actually print something. I changed it to return str(self.matrix[i][j]) + "    " and now it just prints out the first "none". For some reason it is not looping through</span>
<span class="comment-copy">This should get your job done I guess . @ncerice</span>
<span class="comment-copy">awesome, did not know about yield. How can I iterate the 2D list to print a string containing each item? I want it to be formatted like a matrix (new line after each row)</span>
<span class="comment-copy">implemented <code>__str__</code> in my answer you can checkout @ncerice</span>
<span class="comment-copy">@ncerice Note: using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> method you can define <code>__iter__</code> simply as: <code>def __iter__(self): return chain.from_iterable(self.matrix)</code>. You should definitely look at that module, it has a lot of very useful functions to deal with iterables.</span>
