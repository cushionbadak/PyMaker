<div class="post-text" itemprop="text">
<p>I am trying to implement a timeout exception handler if a function call is taking too long.</p>
<p><strong>EDIT</strong>: In fact, I am writing a Python script using subprocess, which calls an old C++ program with arguments. I know that the program hangs from time to time, not returning anything. That's why I am trying to put a time limit and to move on to next call with different argument and etc.</p>
<p>I've been searching and trying to implement it, but it doesn't quite work, so I wish to get some help. What I have so far is:</p>
<pre><code>#! /usr/bin/env python

import signal

class TimeOutException(Exception):
    def __init__(self, message, errors):
        super(TimeOutException, self).__init__(message)
        self.errors = errors

def signal_handler(signum, frame):
    raise TimeOutException("Timeout!")

signal.signal(signal.SIGALRM, signal_handler)
signal.alarm(3)

try:
    while True:
        pass

except TimeOutException:
    print "Timed out!"

signal.alarm(0)
</code></pre>
<p><strong>EDIT</strong>: The Error message I receive currently is "TypeError: <strong>init</strong>() takes exactly 3 arguments (2 given)</p>
<p>Also, I would like ask a basic question regarding the except block. what's the role difference between the code right below "except TimeOutException" and the code in the "Exception handler"? It seems both can do the same thing?</p>
<p>Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>if a function call is taking too long</p>
</blockquote>
<p>I realize that this might not be obvious for inexperienced developers, but the methods applicable for approaching this problem entirely depend on what you are doing in this "busy function", such as:</p>
<ul>
<li><p>Is this a heavy computation? If yes, which Python interpreter are you using? CPython or PyPy? If CPython: does this computation only use Python bytecode or does it involve function calls outsourced to compiled machine code (which may hold Python's Global Interpreter Lock for quite an uncontrollable amount of time)?</p></li>
<li><p>Is this a lot of I/O work? If yes, can you abort this I/O work in an arbitrary state? Or do you need to properly clean up? Are you using a certain framework such as gevent or Twisted?</p></li>
</ul>
<p><strong>Edit:</strong>
So, it looks you are just spawning a subprocess and wait for it to terminate. Great, that is actually one of the most simple problems to implement a timeout control for. Python (3) ships a corresponding feature! :-) Have a look at </p>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.call</a></p>
<blockquote>
<p>The timeout argument is passed to Popen.wait(). If the timeout
  expires, the child process will be killed and then waited for again.
  The TimeoutExpired exception will be re-raised after the child process
  has terminated.</p>
</blockquote>
<p>Edit2:</p>
<p>Example code for you, save this to a file and execute it with Python 3.3, at least:</p>
<pre><code>import subprocess


try:
    subprocess.call(['python', '-c', 'print("hello")'], timeout=2)
except subprocess.TimeoutExpired as e:
    print("%s was terminated as of timeout. Its output was:\n%s" % (e.cmd, e.output))


try:
    subprocess.call(['python'], timeout=2)
except subprocess.TimeoutExpired as e:
    print("%s was terminated as of timeout. Its output was:\n%s" % (e.cmd, e.output))
</code></pre>
<p>In the first case, the subprocess immediately returns. No timeout exception will be raised. In the second case, the timeout expires, and your controlling process (the process running above's script) will attempt to terminate the subprocess. This succeeds. After that, the <code>subprocess.TimeoutExpired</code> is raised and the exception handler deals with it. For me the output of the script above is <code>['python'] was terminated as of timeout. Its output was:
None</code>:</p>
</div>
<span class="comment-copy">You say that "it doesn't quite work".  Could you please be more specific?  Are you getting an unexpected error? Are you not getting any error (including the expected one)?  Something else?</span>
<span class="comment-copy">Have updated my answer.</span>
<span class="comment-copy">Apparently, I am not able to use <code>subprocess.call</code> with <code>stdout=PIPE</code>, which I need :s</span>
<span class="comment-copy">Actually, what I am doing is calling another C++ program, which is old and buggy and I am using Python as a scripting language. I'll edit the question.</span>
<span class="comment-copy">So, you are using subprocess? <code>subprocess</code> provides a Timeout control.</span>
<span class="comment-copy">Oh, so it might be as simple as replacing my <code>subprocess.Popen</code> command with <code>subprocess.call</code> with timer argument added to it?</span>
<span class="comment-copy">Right, and you need to wrap your <code>call()</code> with a <code>subprocess.TimeoutExpired</code> catcher.</span>
<span class="comment-copy">Sadly, I don't think I can use this ... I am using Python 2.6 on an old machine and the subprocess.TimeoutExpired is new on Python 3.3 I think :s ... or maybe I am doing something wrong... sad face*</span>
