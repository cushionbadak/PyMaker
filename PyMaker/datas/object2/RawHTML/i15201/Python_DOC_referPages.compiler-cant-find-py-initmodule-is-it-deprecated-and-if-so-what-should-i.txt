<div class="post-text" itemprop="text">
<p>I am attempting to write a C extension for python. With the code (below) I get the compiler warning:</p>
<pre><code>implicit declaration of function ‘Py_InitModule’
</code></pre>
<p>And it fails at run time with this error:</p>
<pre><code>undefined symbol: Py_InitModule
</code></pre>
<p>I have spent literally hours searching for a solution with no joy. I have tried multiple minor changes to syntax, I even found a post suggesting the method has been deprecated. However I find no replacement. </p>
<p>Here is the code:</p>
<pre><code>#include &lt;Python.h&gt;

//a func to calc fib numbers
int cFib(int n)
{
    if (n&lt;2) return n;
    return cFib(n-1) + cFib(n-2);
}


static PyObject* fib(PyObject* self,PyObject* args)
{
    int n;
    if (!PyArg_ParseTuple(args,"i",&amp;n)) 
        return NULL;    
    return Py_BuildValue("i",cFib(n));
}

static PyMethodDef module_methods[] = {
    {"fib",(PyCFunction) fib, METH_VARARGS,"calculates the fibonachi number"},
    {NULL,NULL,0,NULL}
};

PyMODINIT_FUNC initcModPyDem(void)
{
    Py_InitModule("cModPyDem",module_methods,"a module");
}
</code></pre>
<p>If it helps here is my setup.py :</p>
<pre><code>from distutils.core import setup, Extension

module = Extension('cModPyDem', sources=['cModPyDem.c'])
setup(name = 'packagename', 
    version='1.0',
    description = 'a test package',
    ext_modules = [module])
</code></pre>
<p>And the test code in test.py :</p>
<pre><code>import cModPyDem

if __name__ == '__main__' :

    print(cModPyDem.fib(200))
</code></pre>
<p>Any help would be much, much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code you have would work fine in Python 2.x, but <code>Py_InitModule</code> is no longer used in Python 3.x.  Nowadays, you create a <a href="https://docs.python.org/3/c-api/module.html#c.PyModuleDef"><code>PyModuleDef</code></a> structure and then pass a reference to it to <a href="https://docs.python.org/3/c-api/module.html#c.PyModule_Create"><code>PyModule_Create</code></a>.</p>
<p>The structure would look like:</p>
<pre class="lang-c prettyprint-override"><code>static struct PyModuleDef cModPyDem =
{
    PyModuleDef_HEAD_INIT,
    "cModPyDem", /* name of module */
    "",          /* module documentation, may be NULL */
    -1,          /* size of per-interpreter state of the module, or -1 if the module keeps state in global variables. */
    module_methods
};
</code></pre>
<p>And then your <code>PyMODINIT_FUNC</code> function would look like:</p>
<pre class="lang-c prettyprint-override"><code>PyMODINIT_FUNC PyInit_cModPyDem(void)
{
    return PyModule_Create(&amp;cModPyDem);
}
</code></pre>
<p>Note that the name of the <code>PyMODINIT_FUNC</code> function must be of the form <code>PyInit_&lt;name&gt;</code> where <code>&lt;name&gt;</code> is the name of your module.</p>
<p>I think it would be worthwhile if you read <a href="https://docs.python.org/3/extending/extending.html">Extending</a> in the Python 3.x documentation.  It has a detailed description of how to build extension modules in modern Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ran into the same problem with Py_InitModule(). I started with the aforementioned Python 3 docs, specifically the "Extending and Embedding the Python Interpreter" doc. But that doc's chapter entitled "A Simple Example"  leaves out details. So. I googled this scipy lecture:</p>
<p><a href="http://www.scipy-lectures.org/advanced/interfacing_with_c/interfacing_with_c.html" rel="nofollow">http://www.scipy-lectures.org/advanced/interfacing_with_c/interfacing_with_c.html</a></p>
<p>which is in many ways more suitable for someone new to Python-C API extensions ... except it has not been updated for Python v3. So ... consult the scipy lecture, and the Python 3 docs, and this StackOverflow discussion, culling the pertinent information from each for your needs.</p>
</div>
<span class="comment-copy">what version of Python are you compiling against?</span>
<span class="comment-copy">Sorry, yes I am compiling with python3</span>
<span class="comment-copy">Excellent - code you provided works as is except one minor change - PyMODINIT_FUNC PyInit_cModPyDem(void){} - is the correct way. Thanks, and yes it was worth going through the docs.</span>
<span class="comment-copy">In <code>return PyModule_Create(&amp;ModPyDem);</code>, the correct would be <code>return PyModule_Create(&amp;cModPyDem);</code>?</span>
<span class="comment-copy">@Macabeus - Yes, thanks for catching that.</span>
