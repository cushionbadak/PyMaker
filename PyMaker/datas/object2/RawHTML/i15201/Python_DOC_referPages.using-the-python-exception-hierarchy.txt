<div class="post-text" itemprop="text">
<p>Python offers an extensive <a href="https://docs.python.org/3.4/library/exceptions.html#exception-hierarchy" rel="nofollow">list of built-in exceptions</a>.</p>
<p>It appears to me that most of the built-in exceptions are intended to be raised only by the interpreter or by Python's built-in functions.</p>
<p>So, which of these built-in exceptions should be raised in user code? Does the guidance differ between Python 2.7 and 3.x?</p>
<p>Coming from .NET, I believed this to be an important question. For .NET, Microsoft provides explicit guidance for what exceptions to throw and <strong><em>not</em></strong> to throw in <a href="https://msdn.microsoft.com/en-us/library/ms229007.aspx" rel="nofollow">Using Standard Exception Types</a>.</p>
<p>For Python, it seems to me intuitively and from examples that I have seen that the following built-in exceptions would be appropriate to raise in user code:</p>
<pre class="lang-none prettyprint-override"><code>IndexError
LookupError
NotImplementedError
TypeError
ValueError
</code></pre>
<p>...but these would <em>not</em> as each indicates a type of system failure:</p>
<pre class="lang-none prettyprint-override"><code>ArithmeticError
    FloatingPointError
    OverflowError
    ZeroDivisionError
MemoryError
OSError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python programmer is given a lot of flexibility with respect to exceptions that can be raised from user code. However, that flexibility doesn't mean that "anything goes." From the version 3 documentation for the Python standard library, the article <a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">5. Built-in Exceptions</a> offers this general guidance.</p>
<p>On what exceptions a programmer can raise:</p>
<blockquote>
<p>User code can raise built-in exceptions. This can be used to test an
  exception handler or to report an error condition “just like” the
  situation in which the interpreter raises the same exception; but
  beware that <strong>there is nothing to prevent user code from raising an
  inappropriate error.</strong> <em>(emphasis mine)</em></p>
</blockquote>
<p>On programmer-defined exceptions:</p>
<blockquote>
<p>The built-in exception classes can be subclassed to define new
  exceptions; programmers are encouraged to derive new exceptions from
  the <a href="https://docs.python.org/3/library/exceptions.html#Exception" rel="nofollow noreferrer">Exception</a> class or one of its subclasses, and not from
  <a href="https://docs.python.org/3/library/exceptions.html#BaseException" rel="nofollow noreferrer">BaseException</a>. More information on defining exceptions is
  available in the Python Tutorial under <a href="https://docs.python.org/3/tutorial/errors.html#tut-userexceptions" rel="nofollow noreferrer">User-defined Exceptions</a>.</p>
</blockquote>
<p>Clause <a href="https://docs.python.org/3/library/exceptions.html#base-classes" rel="nofollow noreferrer">5.1. Base classes</a> suggests that <strong>base class exceptions</strong> should <em>not</em> typically be raised:</p>
<blockquote>
<p>The following exceptions are used mostly as base classes for other
  exceptions.</p>
<p><strong>BaseException</strong>, <strong>Exception</strong>, <strong>ArithmeticError</strong>, <strong>BufferError</strong>, <strong>LookupError</strong></p>
</blockquote>
<p>Instead, per the guidance in Clause <a href="https://docs.python.org/3/library/exceptions.html#concrete-exceptions" rel="nofollow noreferrer">5.2. Concrete exceptions</a>, it is <strong>concrete exceptions</strong> that <em>should</em> typically be raised:</p>
<blockquote>
<p>The following exceptions are the exceptions that are usually raised.</p>
<p><strong>AssertionError</strong>, <strong>AttributeError</strong>, <strong>EOFError</strong>, ... <strong>OSError</strong>, ..., <strong>ZeroDivisionError</strong></p>
</blockquote>
<p>So, for instance, instead of raising <strong>ArithmeticError</strong>, consider raising one of its derived classes: <strong>FloatingPointError</strong>, <strong>OverflowError</strong>, and <strong>ZeroDivisionError</strong>. (Or, perhaps a class that you derive from <strong>ArithmeticError</strong>.)</p>
<p>(And see clause <a href="https://docs.python.org/3/library/exceptions.html#os-exceptions" rel="nofollow noreferrer">5.2.1. OS exceptions</a> for more on <strong>OSError</strong>.)</p>
<p>And finally, on <strong>warning messages</strong> from the article <a href="https://docs.python.org/3/library/warnings.html#module-warnings" rel="nofollow noreferrer">29.5. warnings — Warning control</a>:</p>
<blockquote>
<p>Warning messages are typically issued in situations where it is useful
  to alert the user of some condition in a program, where that condition
  (normally) doesn’t warrant raising an exception and terminating the
  program. For example, one might want to issue a warning when a program
  uses an obsolete module.</p>
<p>...</p>
<p>User code can define additional warning categories by subclassing one
  of the standard warning categories. A warning category must always be
  a subclass of the <a href="https://docs.python.org/3/library/exceptions.html#Warning" rel="nofollow noreferrer">Warning</a> class.</p>
</blockquote>
</div>
<span class="comment-copy">Do you ask for opinions or stats? Besides the very link you provide says: "<i>User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; [...]</i>". It just makes sense, that those used by the intepreter are there, because they are needed anyways. I really have troubles finding the goal of this question. The only sense is to run some grep or something on some large projects.</span>
<span class="comment-copy">Not adding this as an answer since it's just my opinion, but other than possibly DeprecationWarning I would just stick to subclassing Exception with your own custom exceptions (it's only two lines of code, after all)</span>
<span class="comment-copy">@luk32: Please see my edit and my motivation for asking. I did not intend this question to be opinion-based.</span>
<span class="comment-copy">@Moritz: Your answer could potentially lead to another question: <i>"When should I define my own exception type instead of using a built-in exception type?"</i></span>
<span class="comment-copy">This is an opinion, but... IMO it's python, everything is dynamic, it's like cloud of electrons, there no absolutely wrong or right, there are better and worse approaches, which when you apply them will turn out right or wrong, good or bad. I don't understand why would you not throw Arithmetic exceptions if you were implementing e.g. vector class. The latter part of the quote says "<i>[...] but beware that there is nothing to prevent user code from raising an inappropriate error.</i>" The documentation explicitly says, user code might use them exceptions, and even might abuse them.</span>
<span class="comment-copy">The guidance is quite hard to follow, but the answer is obviously more correct than mine was.</span>
<span class="comment-copy">@FilipHaglund By "hard to follow," I'm not sure if you are referring to the Python documentation itself, or my attempt to summarize it. That said, the guidance given in the Python docs appears to me to be looser and less precise than that given by Microsoft for .NET programmers. (For the latter, see the linked article in my question.)</span>
<span class="comment-copy">The Python documentation itself. That rule is complicated enough that I'm going to have trouble remembering it for future code reviews.</span>
