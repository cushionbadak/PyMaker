<div class="post-text" itemprop="text">
<p>I wrote a static method in python which takes time to compute but I want it to compute just one time and after that return the computed value.
What should I do ?
here is a sample code :</p>
<pre><code>class Foo:
    @staticmethod
    def compute_result():
         #some time taking process 

Foo.compute_result() # this may take some time to compute but store results
Foo.compute_result() # this method call just return the computed result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def evaluate_result():
    print 'evaluate_result'
    return 1

class Foo:
    @staticmethod
    def compute_result():
        if not hasattr(Foo, '__compute_result'):
            Foo.__compute_result = evaluate_result()
        return Foo.__compute_result 

Foo.compute_result()
Foo.compute_result()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think what you want to do is called <code>memoizing</code>. 
There are several ways to do it with decorators, one of them is using <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow"><code>functools</code></a> (Python 3) or some <a href="http://www.python-course.eu/python3_memoization.php" rel="nofollow">short handwritten code</a> if you only care for hashable types (also for Python 2).</p>
<p>You can annotate multiple decorators for one method.</p>
<pre><code>@a
@b
def f():
   pass
</code></pre>
</div>
