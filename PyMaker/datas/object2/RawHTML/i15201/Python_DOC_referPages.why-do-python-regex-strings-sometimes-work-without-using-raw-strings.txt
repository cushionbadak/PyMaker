<div class="post-text" itemprop="text">
<p>Python recommends using raw strings when defining regular expressions in the <code>re</code> module. From the <a href="https://docs.python.org/2/library/re.html#module-re" rel="nofollow">Python documentation</a>:</p>
<blockquote>
<p>Regular expressions use the backslash character ('\') to indicate special forms or to allow special characters to be used without invoking their special meaning. This collides with Python’s usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write '\\' as the pattern string, because the regular expression must be \, and each backslash must be expressed as \ inside a regular Python string literal.</p>
</blockquote>
<p>However, in many cases this is not necessary, and you get the same result whether you use a raw string or not:</p>
<pre><code>$ ipython

In [1]: import re

In [2]: m = re.search("\s(\d)\s", "a 3 c")

In [3]: m.groups()
Out[3]: ('3',)

In [4]: m = re.search(r"\s(\d)\s", "a 3 c")

In [5]: m.groups()
Out[5]: ('3',)
</code></pre>
<p>Yet, in some cases this is not the case:</p>
<pre><code>In [6]: m = re.search("\s(.)\1\s", "a 33 c")

In [7]: m.groups()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-12-84a8d9c174e2&gt; in &lt;module&gt;()
----&gt; 1 m.groups()

AttributeError: 'NoneType' object has no attribute 'groups'

In [8]: m = re.search(r"\s(.)\1\s", "a 33 c")

In [9]: m.groups()
Out[9]: ('3',)
</code></pre>
<p>And you must escape the special characters when not using a raw string:</p>
<pre><code>In [10]: m = re.search("\\s(.)\\1\\s", "a 33 c")

In [11]: m.groups()
Out[11]: ('3',)
</code></pre>
<p>My question is why do the non-escaped, non-raw regex strings work at all with special characters (as in command [2] above)?</p>
</div>
<div class="post-text" itemprop="text">
<p>The example above works because <code>\s</code> and <code>\d</code> are not escape sequences in python.  According to the docs: </p>
<blockquote>
<p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the string. </p>
</blockquote>
<p>But it's best to just use raw strings and not worry about what is or isn't a python escape, or worry about changing it later if you change the regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is because <code>\s</code> and <code>\d</code> are not escape sequences:</p>
<pre><code>&gt;&gt;&gt; print('\s')
\s
&gt;&gt;&gt; print('\d')
\d
&gt;&gt;&gt;
</code></pre>
<p>So, they are treated literally as <code>\s</code> and <code>\d</code>.  <code>\1</code> however <em>is</em> an escape sequence:</p>
<pre><code>&gt;&gt;&gt; print('\1')
☺
&gt;&gt;&gt;
</code></pre>
<p>This means that it is being interpreted as <code>☺</code> instead of <code>\1</code>.</p>
<p>For a complete list of Python's escape sequences, see <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer">String and Bytes literals</a> in the documentation.</p>
</div>
