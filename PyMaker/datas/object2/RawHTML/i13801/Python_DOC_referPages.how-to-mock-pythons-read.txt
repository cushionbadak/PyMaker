<div class="post-text" itemprop="text">
<p>I'm trying to test the <code>read()</code> method in the following class:</p>
<pre><code>class Channel(sam.Sam):
  def __open(self):
    try:
      self.__channel = open('%s/channel.ini' % os.path.dirname(os.path.realpath(__file__)), 'r+')
    except Exception as e:
      traceback.print_exc(file = sys.stdout)
      raise e

  def read(self):
    try:
      self.__open()
      return JSONEncoder().encode({
        "status": True,
        "channel": self.__channel.read().strip()
      })
    except Exception as e:
      traceback.print_exc(file = sys.stdout)
      return JSONEncoder().encode({
        "status": False
      })
    finally:
      self.__close()
</code></pre>
<p>As I understand it, I should be mocking the <code>file.read()</code> method (in <code>self.__channel.read()</code>, or maybe the <code>os.open()</code> method, but none of the examples I've found have the call to <code>os.open()</code> or <code>file.read()</code> deep inside a class.</p>
<p>I already tried <code>__builtin__.read = MagicMock(return_value="something")</code>, and many variations thereof, but not one of them even make sense. I'm kind of lost as to how to even start this.</p>
<p>Is this even the right way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Mock the <code>open</code> function; you can use the <a href="https://docs.python.org/3/library/unittest.mock.html#mock-open" rel="nofollow noreferrer"><code>mock_open()</code> utility function</a> to provide a suitable mock:</p>
<pre><code>from unittest.mock import mock_open

with patch('your_module.open', mock_open(read_data=JSON_TEST_DATA), create=True) as m:
    result = Channel().read()
    assert m.assert_called_once_with(expected_file_name)
</code></pre>
<p>The <code>patch()</code> call creates a new global <code>open</code> object in your <code>your_module</code> namespace, so when the <code>Channel.__open()</code> method runs it'll find <em>that</em> object rather than the <code>open()</code> built-in function.</p>
<p>By passing in a <code>read_data</code> argument to <code>mock_open()</code>, you can dictate what is returned by the <code>self.__channel.read()</code> call.</p>
</div>
<span class="comment-copy">Thanks that worked!</span>
