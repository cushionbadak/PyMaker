<div class="post-text" itemprop="text">
<p>I wanted to create the consumer and producer thread in python simultaneously, where producer thread will append the queue and consumer thread retrieves the item which stored in the queue. And I need to start the consumer thread along with producer. Consumer thread should wait till the queue gets an item. And it should terminate when there is no item in queue. I am new to python, please help on this.</p>
<p>Requirements:</p>
<p>If there is a list of 10 numbers, producer thread should insert the queue with one item, and consumer thread should retrieve the number. Both thread should start simultaneously  .</p>
<pre><code>from queue import Queue
import threading
import time

class producer(threading.Thread):

    def __init__(self, list_of_numbers):
        threading.Thread.__init__(self)
        self.list_items = list_of_numbers

    def run(self):
        for i in self.list_items:
            queue.put(str(i))

class consumer(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while queue.not_empty:
            queue_ret = queue.get()
            print("Retrieved", queue_ret)


queue = Queue()
producers = producer([10,20,5,4,3,2,1])
consumers = consumer()

producers.start()
consumers.start()
producers.join()
consumers.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just put a special item once you are done:</p>
<pre><code>_im_done = object()

class producer(threading.Thread):
    def run(self):
        '''feed the consumer until you are done'''
        queue.put(_im_done)

class consumer(threading.Thread):
    def run(self):
        while True:
            queue_ret = queue.get()
            if queue_ret is _im_done:
                break
            '''normal execution'''
</code></pre>
<p>If there are multiple consumers, then you have to put the item back before you stop:</p>
<pre><code>class consumer(threading.Thread):
    def run(self):
        while True:
            queue_ret = queue.get()
            if queue_ret is _im_done:
                queue.put(_im_done)
                break
            '''normal execution'''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/queue.html" rel="nofollow">queue module</a> directly. The documentation contains an example for your use case. As a side note, the module is named <code>Queue</code> in Python 2.</p>
<p>However threading in Python won't get your program any faster if it is CPU bound, in this case you may use <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing module</a> instead (in IO bound cases threading may be more viable since threads are often cheaper). Mutiprocessing module also provides a safe queue implementation named <code>multiprocessing.Queue</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>queue.get()</code> is blocking. If there are no items in queue it will just get stuck there. You should use <code>while True: queue.get(block=False)</code> and handle Empty exception and exit.</p>
<p>Ok full code to clear confusion</p>
<pre><code>from Queue import Queue, Empty
import threading
import time

started = False
running = True

class producer(threading.Thread):

    def __init__(self, list_of_numbers):
        threading.Thread.__init__(self)
        self.list_items = list_of_numbers

    def run(self):
        started = True
        for i in self.list_items:
            queue.put(str(i))
        running = False

class consumer(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while not started:
            sleep(0)

        while running:
            try:
                queue_ret = queue.get(block=False)
            except Empty:
                sleep(0)
                continue
            print("Retrieved", queue_ret)


queue = Queue()
producers = producer([10,20,5,4,3,2,1])
consumers = consumer()

producers.start()
consumers.start()
producers.join()
consumers.join()
</code></pre>
</div>
<span class="comment-copy">What did you try ?</span>
<span class="comment-copy">I have tried with Queue, but I was not able to terminate the consumer thread.</span>
<span class="comment-copy">What @FunkySayu said. Also, have you looked into a multiprocessing queue for this task? Python handles this exact scenario.</span>
<span class="comment-copy">what does your code look like</span>
<span class="comment-copy">I have used threading for this. But consumer thread fail sometimes if its starts earlier than producer thread, and it gets queue empty, And I have also tried with the condition in thread.</span>
<span class="comment-copy">Thats great and its working fine. Thank you!</span>
<span class="comment-copy">Thank you, it works perfectly fine now.</span>
<span class="comment-copy">The consumer could get scheduled before the producer produces anything. Then it would exit immediately. Also the production could take longer that the consumption. Then this solution would also fail.</span>
<span class="comment-copy">@Andrey , I have one more issue when using the above code, what if I consumer thread starts earlier than producer and it will find queue empty and gets exit. Is there any way to handle using 'condition'.</span>
<span class="comment-copy">@Kay that was about stopping thread and yes this is only correct way to consumer threads properly. Because OP's code is not thread safe. If there are 2 consumer threads, they can get into race condition over last item and other thread will get stuck forever.</span>
<span class="comment-copy">@SrikanthBhandary see my edit</span>
