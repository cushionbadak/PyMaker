<div class="post-text" itemprop="text">
<p>What (if anything) is actually different between using a name in a nested function and passing a name to a nested function? If there's no difference, which is preferred by convention?</p>
<pre><code>def foo(bar):
    def put():
        bar.append('World!')
        print(', '.join(bar))
    put()
foo(['Hello'])
</code></pre>
<p>versus</p>
<pre><code>def foo(bar):
    def put(bar):
        bar += ['World!']
        print(', '.join(bar))
    put(bar)
foo(['Hello'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The difference is that in the first one, bar variable is in a scope of the parent function, it can be used in the child function , unless you do assignment on it (This would be the case something similar to using <code>global</code> variables in function) . Example -</p>
<pre><code>&gt;&gt;&gt; def foo(bar):
...     def put():
...         bar = bar + ['World']
...         print(', '.join(bar))
...     put()
...
&gt;&gt;&gt;
&gt;&gt;&gt; foo(['Hello'])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in foo
  File "&lt;stdin&gt;", line 3, in put
UnboundLocalError: local variable 'bar' referenced before assignment
</code></pre>
<p>In this case if you want to use the <code>bar</code> and assign to it as well, you need to use the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow"><code>nonlocal</code></a> keyword , Example -</p>
<pre><code>&gt;&gt;&gt; def foo(bar):
...     def put():
...         nonlocal bar
...         bar = bar + ['World!']
...         print(', '.join(bar))
...     put()
...
&gt;&gt;&gt; foo(['Hello'])
Hello, World!
</code></pre>
<hr/>
<p>Whereas in the second one, bar is a local variable to the <code>put()</code> function (because its an argument to it) and can be assigned without the above <code>UnboundLocalError</code> , Example -</p>
<pre><code>&gt;&gt;&gt; def foo(bar):
...     def put(bar):
...         bar = bar + ['World!']
...         print(', '.join(bar))
...     put(bar)
...
&gt;&gt;&gt;
&gt;&gt;&gt; foo(['Hello'])
Hello, World!
</code></pre>
<p>I would prefer explicitly passing the required arguments as done in the second case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're only talking about nested functions, and not closures, unless you have a specific reason to have it be nested, I would recommend defining each function in the module scope:</p>
<pre><code>def put(bar):
    bar += ['World!']
    print(', '.join(bar))


def foo(bar):
    put(bar)


foo(['Hello'])
</code></pre>
<p>If for some reason you do need it to be nested, it's better to pass in <code>bar</code> explicitly. However, if you do think you need it to be nested, ask about your reasoning first; there's a good chance that you don't. :)</p>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/questions/1261875/python-nonlocal-statement" title="python nonlocal statement">stackoverflow.com/questions/1261875/python-nonlocal-statement</a></span>
<span class="comment-copy">As the Zen of Python dictates, "Explicit is better than implicit.". In this case, explicitly passing the argument is clearer than having to guess where <code>bar</code> suddenly came from.</span>
<span class="comment-copy">Are you only talking about nested functions, and not closures? Meaning, are you not intending to return <code>put</code> as the return value of <code>foo</code>?</span>
<span class="comment-copy">@Cyphase I am not talking about closures, unless that influences the choice between the alternatives. Thanks for clarifying.</span>
<span class="comment-copy">Ian, I'll say upfront that I agree with @Wolph that explicit is better than implicit. That said though, is there a reason you need a nested function at all as opposed to defining it on it's own? That's the better option IMO.</span>
<span class="comment-copy">If you don't assign to <code>bar</code> in the second case (either by using <code>bar.append</code> or <code>+=</code>) then <code>bar</code> is not local, right? Its value will change in the scope of foo after <code>put(bar)</code> as well. So in my snippets ... effectively no difference?</span>
<span class="comment-copy">in second case, bar is always local to the inner function, irrespective of whether you assign or not. But yes in your particular example, bar being local or not , does not really make a difference.</span>
