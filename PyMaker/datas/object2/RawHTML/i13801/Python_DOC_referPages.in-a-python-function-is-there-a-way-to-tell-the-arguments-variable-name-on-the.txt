<div class="post-text" itemprop="text">
<p>I am trying to create a logger function:</p>
<pre><code>def logger(someVariable): 
    # some code that prints the name of someVariable 
</code></pre>
<p>So when I call the function:</p>
<pre><code>logger(myvarA)        # should output the string 'myvarA'
logger(someobj.varB)  # should output the string 'someobj.varB'
logger(myarr[3])      # should (probably) output 'myarr[3]'
</code></pre>
<p>Not sure if all or even any of these cases are possible? The use case for this is to have a simple function in iPython Notebook to log any variables for their values without having to type something like below:</p>
<pre><code>logger(myVarA,'myVarA')
logger(myarr[i],'myarr[{}]'.format(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The inspect module (<a href="https://docs.python.org/3/library/inspect.html#inspect.getframeinfo" rel="nofollow">https://docs.python.org/3/library/inspect.html#inspect.getframeinfo</a>) will also give you the code context.  You simply need to parse that to get the text of what was passed.  With only a single variable, it's pretty easy to do.  Here's a sample.</p>
<pre><code>import inspect
import re

def handle_nested_parens(v):
   parens = 0
   output = ""
   for c in v:
       if c == ")":
           parens = parens - 1
           if parens &lt; 0:
               return output
       output += c
       if c == "(":
           parens = parens + 1
   return output

def logger(v):
   currentframe = inspect.currentframe()
   code_context = inspect.getouterframes(currentframe,1)[1][4][0]
   variable = handle_nested_parens(re.sub(r".*logger\((.*)",r"\1", code_context))
   print("{0} =&gt; {1}".format(variable, v))


def testing(a):
   return(a)

def submain(a):
   ab = (1, 2, a)
   logger(testing(ab))
   return 15

def main():
   xyz = "hello"
   logger(xyz)
   logger(submain(xyz))


if __name__ == '__main__':
    a = 5
    logger(a)
    main()
</code></pre>
<p>It outputs</p>
<pre><code>a =&gt; 5
xyz =&gt; hello
testing(ab) =&gt; (1, 2, 'hello')
submain(xyz) =&gt; 15
</code></pre>
</div>
<span class="comment-copy">There is a way, but it's extremely hacky, and this is almost certainly an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>.</span>
<span class="comment-copy">I described the use case: how to log variable values without having to pass the variable name explicitly? The described "logger" is supposed to save a variable name and its value into a file or print onto console.</span>
<span class="comment-copy">This and similar questions have been answered already, for example see <a href="http://stackoverflow.com/questions/582056/getting-list-of-parameter-names-inside-python-function" title="getting list of parameter names inside python function">stackoverflow.com/questions/582056/â€¦</a>.</span>
<span class="comment-copy">@TrisNefzger, thanks, but not really. That solution show the argument list names, but I want to get caller side argument name. (i.e., the feeding variable name).</span>
<span class="comment-copy">awesome! Thanks!</span>
