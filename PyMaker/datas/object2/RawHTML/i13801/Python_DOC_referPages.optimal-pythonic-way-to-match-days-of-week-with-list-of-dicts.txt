<div class="post-text" itemprop="text">
<p>I got following piece of code:</p>
<pre><code>mon = tue = wed = thu = fri = sat = sun = bh = None
for ot in shop_data['opening_time']:
    if ot['day'] == 'Monday':
        mon = ot
    elif ot['day'] == 'Tuesday':
        tue = ot
    elif ot['day'] == 'Wednesday':
        wed = ot
    elif ot['day'] == 'Thursday':
        thu = ot
    elif ot['day'] == 'Friday':
        fri = ot
    elif ot['day'] == 'Saturday':
        sat = ot
    elif ot['day'] == 'Sunday':
        sun = ot
    elif ot['day'] == 'Bank holidays':
        bh = ot
</code></pre>
<p>The structure of ot variable is either: </p>
<pre><code>ot = {'day': 'Monday', 'closed': True}
</code></pre>
<p>or</p>
<pre><code>ot = {
      'day': choices.get(operating_time.day),
      'open_time': operating_time.open_time,
      'close_time': operating_time.close_time
     }
</code></pre>
<p>and are used to describe opening hours of the shop, rendered in template</p>
<p>I would like to assign correct ot from a list to correct day of week in a better way</p>
<p>What is the python way to do that?</p>
<p><strong>EDIT</strong></p>
<p>That's the piece of code before "day of week" matching </p>
<pre><code>shop_operating_time = OperatingTime.objects.filter(
            place=place).order_by('day')
    shop_operating_time_list = []
    choices = dict((x, y) for x, y in DAY_CHOICES)
    days = choices.itervalues()

    operating_time_day = set()
    for operating_time in shop_operating_time:
        data = {
            'day': choices.get(operating_time.day),
            'open_time': operating_time.open_time,
            'close_time': operating_time.close_time,
        }
        shop_operating_time_list.append(data)
        operating_time_day.add(choices.get(operating_time.day))
    remaing_days = set(days) - operating_time_day
    for day in remaing_days:
        data = {
            'day': day,
            'closed': True
        }
        shop_operating_time_list.append(data)
    shop_data = {
        'opening_time': shop_operating_time_list
     }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd create a dictionary instead of 8 variables:</p>
<p>opening_times = {'mon': None, 'tue': None, ...}</p>
<p>Then you can easily assign based on the key. You can also use a class and <a href="https://docs.python.org/3.5/library/functions.html#setattr" rel="nofollow">setattr</a>:</p>
<pre><code>day = 'bh' if ot['day'] == 'Bank Holidays' else ot['day'].lower()[:3]
setattr(opening_times, day, ot)
</code></pre>
<p>Finally, you might even use exec (<a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow">only in Python 2</a>, and it's slow!):</p>
<pre><code> exec("%s = ot" % var_name)
</code></pre>
<p>Modifying <code>locals</code> is <a href="https://docs.python.org/3.4/library/functions.html#locals" rel="nofollow">not a good idea</a> (thanks DSM!), even if it seems to work (sometimes).</p>
</div>
<span class="comment-copy">What are you doing with the day-of-the-week variables anyway?</span>
<span class="comment-copy">@Useless: they are used in template to represent opening hours for a "shop", I updated the question</span>
<span class="comment-copy">So it isn't clear there's any need to create local variables for them? You could just build a simple dictionary <code>{ 'Monday':None, 'Tuesday':('08:00','17:00'), ...}</code> and use that?</span>
<span class="comment-copy">@Useless yeah, but they are created in a bit complicated way. First I create a list with opening_time entries from db, then check which days of a week are not filled yet and generate "closed" entries. Updated the question.</span>
<span class="comment-copy">Modifying locals() this way doesn't always work and is specifically warned against <a href="https://docs.python.org/3.4/library/functions.html#locals" rel="nofollow noreferrer">in the docs</a>.</span>
<span class="comment-copy">yep; long, homogenous switch statements always scream dict</span>
<span class="comment-copy">Sorry about the confusion. I've done my homework and updated my answer. Don't modify <code>locals</code>, ever, and don't expect <code>exec</code> to do so either, if you're on Python 3.</span>
