<div class="post-text" itemprop="text">
<p>I have lists like:</p>
<pre><code>['a', '2', 'b', '1', 'c', '4']
['d', '5', 'e', '7', 'f', '4', 'g', '6']
</code></pre>
<p>And I want to make a dictionary consist of keys as letters and values as numbers. I mean:</p>
<pre><code>{'a': 2, 'b': 1, 'c': 4, 'd':5, 'e':7, 'f':4, 'g':6}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try:</p>
<pre><code>&gt;&gt;&gt; l = ['a', '2', 'b', '1', 'c', '4']
&gt;&gt;&gt; it = iter(l)
&gt;&gt;&gt; dict(zip(it, it))
{'a': '2', 'c': '4', 'b': '1'}
</code></pre>
<p>First you create an iterator out of the list. Then with zip of the iterator with itself you take pair of values from the list. Finally, with <code>dict</code> you transform these tuples to your wanted dictionary.</p>
<p>If you also want to do the string to number conversion, then use:</p>
<pre><code>{x: int(y) for x, y in zip(it, it)}
</code></pre>
<p><strong>EDIT</strong></p>
<p>If you don't want to use <code>zip</code> then:</p>
<pre><code>{x: int(next(it)) for x in it}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = ['a', '2', 'b', '1', 'c', '4']
d = {k:v for k,v in zip(l[::2], l[1::2])}
</code></pre>
<p>Or if you want the numbers to be actual numbers:</p>
<pre><code>l = ['a', '2', 'b', '1', 'c', '4']
d = {k:int(v) for k,v in zip(l[::2], l[1::2])}
</code></pre>
<p>Use <code>float(v)</code> instead of <code>int(v)</code> if the numbers have the potential to be floating-point values instead of whole numbers.</p>
<p>Without using any <a href="https://docs.python.org/3/library/functions.html" rel="nofollow">built-in functions</a>:</p>
<pre><code>l = ['a', '2', 'b', '1', 'c', '4']
d = {}
l1 = l[::2]
l2 = l[1::2]
idx = 0
while 1:
    try:
        d[l1[idx]] = l2[idx]
        idx += 1
    except IndexError:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split the lists into two, one containing the letters and the other containing the keys, with</p>
<pre><code>key_list = old_list[::2]
value_list = old_list[1::2]
</code></pre>
<p>Then you can loop over the two lists at once with <code>zip</code> and you can make the dictionary.</p>
</div>
<span class="comment-copy">Dictonaries are not ordered by default, so you cant really do that, unless you want to make an OrderedDict</span>
<span class="comment-copy">Also what is your question? What have you tried yourself? Where are you stuck?</span>
<span class="comment-copy">Do you mean to treat the list as a sequence of interleaved keys and values? I.e., the first list should produce the result <code>{'a': 2,  'b': 1, 'c': 4}</code> ?</span>
<span class="comment-copy">Brilliant! I like this better than the slicing I was playing around with.</span>
<span class="comment-copy">Thank you so much. I got the idea but I can only use slicing and range stuff, not those built-in functions.</span>
<span class="comment-copy">@kristofagotaa Why can't you use built-ins? A solution without any built-ins is going to be uglier (possibly a lot uglier, depending on whether the requirement is absolute and whether you want to convert the values into numbers).</span>
<span class="comment-copy">This has some good information, but the attempt at answering the question with its edited requirement of no built-ins uses three built-ins (<code>iter()</code>, <code>next()</code>, and <code>int()</code>, although that last one could be omitted).</span>
<span class="comment-copy">@TigerhawkT3 The problem states not to use zip after the second or third edit. By the way great answer from you. I upvoted it even though I would prefer you to resist the temptation.</span>
<span class="comment-copy">Has the disadvantage to the iterator approach that it makes copies of the two halves of the list: <code>l[::2], l[1::2]</code></span>
<span class="comment-copy">@smci - True, but with the edit to the question that forbids built-in functions, it may be necessary.</span>
<span class="comment-copy">@TigerhawkT3 so you solved his homework. Does it worth it?</span>
<span class="comment-copy">@JuniorCompressor - I don't know how to respond constructively to that.</span>
<span class="comment-copy">Oh, crap, more homework. Then the question was kinda artificial.</span>
<span class="comment-copy">As Tigerhawk has said more elegantly and more quickly.</span>
