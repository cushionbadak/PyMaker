<div class="post-text" itemprop="text">
<p>I want to convert dictionary of lists to list of tuple<br/>
Here is an example: entry data</p>
<pre><code>d = {
u'x_axis': [1,2,3,7,8,9],
u'y_axis': [5,6,5,6,5,6],
u'z_axis': [1,2,1,2,1,2],
}
</code></pre>
<p>What I want to have is:</p>
<pre><code>l = [
(1,5,1),
(2,6,2),
(3,5,1),
(7,6,2),
(8,5,1),
(9,6,2),
]
</code></pre>
<p>The lists in dictionary are same length.</p>
<p>So as you can see, x_axis is in 1st possition in every tuple etc.</p>
<p><p>A bit like rotation it by -90 degrees</p>
<p><p>Edit.1<br/> 
I want to have the same order of elements in tuples as order of keys and number of keys is not defined by default. So I could have write keys to some var like:
keys = d.keys()
if I do:
l = here what I want with vars in tuples in order of keys-list</p>
</p></p></div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; d = {
...     u'x_axis': [1,2,3,7,8,9],
...     u'y_axis': [5,6,5,6,5,6],
...     u'z_axis': [1,2,1,2,1,2],
... }
&gt;&gt;&gt; list(zip(d['x_axis'], d['y_axis'], d['z_axis']))
[(1, 5, 1), (2, 6, 2), (3, 5, 1), (7, 6, 2), (8, 5, 1), (9, 6, 2)]
</code></pre>
<p><code>list(..)</code> is not needed in Python 2.x. (In Python 2.x, <code>zip</code> returns a list, in Python 3.x, <code>zip</code> returns an iterator)</p>
<p><strong>UPDATE</strong></p>
<p>Using pre-defined keys:</p>
<pre><code>&gt;&gt;&gt; keys = 'x_axis', 'y_axis', 'z_axis'  # OR keys = sorted(d)
&gt;&gt;&gt; list(zip(*(d[key] for key in keys)))
[(1, 5, 1), (2, 6, 2), (3, 5, 1), (7, 6, 2), (8, 5, 1), (9, 6, 2)]
</code></pre>
<p>NOTE: <code>keys = d.keys()</code> will not work because Python dictionary does not guarantee key order.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> function :</p>
<pre><code>&gt;&gt;&gt; zip(*d.values())
[(5, 1, 1), (6, 2, 2), (5, 3, 1), (6, 7, 2), (5, 8, 1), (6, 9, 2)]
</code></pre>
<p>If you care about the order you should pass the values by a custom order to <code>zip</code> function.for example :</p>
<pre><code>zip(d['x_axis'], d['y_axis'], d['z_axis'])
</code></pre>
<p>Or use an <code>collections.OrderedDict</code> if you want to use <code>values()</code> and unpacking :</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d=OrderedDict([(u'x_axis', [1, 2, 3, 7, 8, 9]),(u'y_axis', [5, 6, 5, 6, 5, 6]), (u'z_axis', [1, 2, 1, 2, 1, 2])])
&gt;&gt;&gt; 
&gt;&gt;&gt; zip(*d.values())
[(1, 5, 1), (2, 6, 2), (3, 5, 1), (7, 6, 2), (8, 5, 1), (9, 6, 2)]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">This is a little "do my homework for me". You should let us know what you have tried.</span>
<span class="comment-copy">I've downvoted this question, as it seems like a homework question, to which you have not provided any information about your own attempts to solve. Stack Overflow is not a place to get your homework done. The question can be improved by adding information about what you have tried. If you didn't try anything before posting; do so next time!</span>
<span class="comment-copy">This doesn't keep the <code>x,y,z</code> ordering, which may be important, even if not explicitly stated by the op.</span>
<span class="comment-copy">@VincenzoPii Yep,updated!</span>
<span class="comment-copy">how to do it if I do not know axises names and number. I can remember axises names in array by d.key() and create array like yours by iterating over d, but how to do it more elegant</span>
<span class="comment-copy">@Micha≈ÇPiotrStankiewicz If you don't know the key names the best way is using an order dict to store your items instead of a simple dictionary!</span>
