<div class="post-text" itemprop="text">
<p>I am using the following code to find out which of the two numbers has a maximum value:</p>
<pre><code>maximum = max(2.3,2.300000000001) 
print maximum
</code></pre>
<p>But the output I get is <code>2.3</code> and not <code>2.300000000001</code>. Can anyone explain why this happens?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't worry - <code>max</code> isn't broken, and <code>maximum</code> indeed holds <code>2.300000000001</code>. <code>print</code>, however, rounds it when printing. You could use <a href="https://docs.python.org/2/library/functions.html#func-repr"><code>repr</code></a> to prove that:</p>
<pre><code>&gt;&gt;&gt; maximum = max(2.3,2.300000000001) 
&gt;&gt;&gt; print maximum
2.3
&gt;&gt;&gt; print repr(maximum)
2.300000000001
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow">the doc</a>:</p>
<blockquote>
<p><strong>14. Floating Point Arithmetic: Issues and Limitations</strong></p>
<p>Itâ€™s easy to forget that the stored value is an approximation to the
  original decimal fraction, because of the way that floats are
  displayed at the interpreter prompt. Python only prints a decimal
  approximation to the true decimal value of the binary approximation
  stored by the machine. If Python were to print the true decimal value
  of the binary approximation stored for 0.1, it would have to display</p>
<p><code>&gt;&gt;&gt; 0.1</code></p>
<p><code>0.1000000000000000055511151231257827021181583404541015625</code></p>
<p>That is more digits than most people find useful, so Python keeps the
  number of digits manageable by displaying a rounded value instead</p>
<p><code>&gt;&gt;&gt; 0.1</code></p>
<p><code>0.1</code></p>
</blockquote>
<p>Answer: result you get is fine, but <code>print</code> rounds it.</p>
<p>You can check the actual value with <a href="https://docs.python.org/2/library/functions.html#func-repr" rel="nofollow">repr()</a>:</p>
<pre><code>maximum = max(2.3,2.300000000001) 
print repr(maximum)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python print command truncates numbers automatically. There's some explanations in the comments above. If you want it to print the full value, try using <code>print "%13f" % maximum</code> to show you the full value</p>
</div>
<div class="post-text" itemprop="text">
<p>In your case, as said by mureinik, only print was the cause of the problem. A more direct demonstration is :</p>
<pre><code>&gt;&gt;&gt; a = 2.300000000001
&gt;&gt;&gt; a
2.300000000001
&gt;&gt;&gt; print(a)
2.3
</code></pre>
<p>But beware, Python uses underlying floating point of its platform and it has not an inifinite accuracy. As a rule of thumb, only 16 decimal digits are accurate:</p>
<pre><code>&gt;&gt;&gt; b = 2.300000000000000001
&gt;&gt;&gt; b
2.3
&gt;&gt;&gt; c = 2.3
&gt;&gt;&gt; b == c
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The "absolute or relative difference" check is implemented by code equivalent to the following Python code:(<a href="https://code.google.com/codejam/apactest/faq.html#case_1" rel="nofollow">https://code.google.com/codejam/apactest/faq.html#case_1</a>)</p>
<pre><code>def IsApproximatelyEqual(x, y, epsilon):
  """Returns True iff y is within relative or absolute 'epsilon' of x.

  By default, 'epsilon' is 1e-6.
  """
  # Check absolute precision.
  if -epsilon &lt;= x - y &lt;= epsilon:
    return True

  # Is x or y too close to zero?
  if -epsilon &lt;= x &lt;= epsilon or -epsilon &lt;= y &lt;= epsilon:
    return False

  # Check relative precision.
  return (-epsilon &lt;= (x - y) / x &lt;= epsilon
       or -epsilon &lt;= (x - y) / y &lt;= epsilon)
</code></pre>
<p>It would be good to check this thing as well. 
When python comes out with output, there is some range of ignorance when dealing with real numbers. </p>
</div>
<span class="comment-copy">The output you get is 2.300000000001. <code>print</code> rounds it for you.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a></span>
<span class="comment-copy">Good explanation here <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">Floating Point Arithmetic: Issues and Limitations</a> about why the print function truncates float values.</span>
<span class="comment-copy">use repr() its built in function in python</span>
