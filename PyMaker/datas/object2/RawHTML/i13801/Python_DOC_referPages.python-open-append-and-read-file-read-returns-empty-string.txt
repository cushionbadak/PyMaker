<div class="post-text" itemprop="text">
<p>Noticed an odd behavior when attempting to call <code>read()</code> on a file opened in <code>a+</code> mode (Python 3.4.1) </p>
<p><strong>As seen here</strong><br/>
<a href="https://stackoverflow.com/questions/2757887/file-mode-for-creatingreadingappendingbinary">File mode for creating+reading+appending+binary</a><br/>
It's possible to open a file in read/append mode <em>supposedly</em>. </p>
<p><strong>However</strong><br/>
This code:</p>
<pre><code>with open("hgrc", "a+") as hgrc:
            contents=hgrc.read()
</code></pre>
<p>returns <code>contents={str}''</code>. Which is unexpected based upon the answer posted above. <br/>
Now, the following code </p>
<pre><code>with open("hgrc", "r+") as hgrc:
            contents=hgrc.read()
</code></pre>
<p>returns <code>contents={str}'contents of hgrc.....'</code>, which is expected, but doesn't give us the option to append to the file.</p>
<p><strong>According to the specs</strong><br/><br/>
<a href="https://docs.python.org/2/library/functions.html#open" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#open</a></p>
<p><code>Modes 'r+', 'w+' and 'a+' open the file for updating (reading and writing);</code>
<code>note that 'w+' truncates the file. Append 'b' to the mode to open the file</code> <code>in binary mode, on systems that differentiate between binary and text</code> <code>files; on systems that don’t have this distinction, adding the 'b' has no</code> <code>effect.</code></p>
<p><strong>Which means</strong> <br/>When we open a file in <code>a+</code> mode, we should be able to call <code>read()</code> on it and get the contents of the file back, correct?
Thoughts? Opinions? Etc??</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a+</code> opens the file at the end for appending. You need to call <code>.seek(0)</code> on it if you want to then read in its contents, but at that point you might as well just use <code>r+</code>, because that opens the file at the start.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a Python 2 vs. Python 3 issue.</p>
<p><code>open()</code> with <code>a+</code> behaves differently in the two Python versions. (Note: You reveal you're using Python <em>3.4.1</em>, but you're quoting the documentation for Python <em>2</em>!)</p>
<p>(In fact, the behavior you're looking for (in "<em>Which means</em>") works as intended with Python 2. I think they changed the behavior, because "appending" means "file pointer at end of file" to many folks.)</p>
<hr/>
<h2>Let's test this with Python3 ...</h2>
<pre><code>$ python3
Python 3.4.3 (default, Jul 28 2015, 18:20:59) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; lic = open('LICENSE', 'a+')
&gt;&gt;&gt; lic.read()
''
&gt;&gt;&gt; # Hmmm, no content? EOF, obviously. Let's reset the file pointer ...
&gt;&gt;&gt; lic.seek(0)
0
&gt;&gt;&gt; lic.read()
'Apache License\nVersion 2.0, January 2004\n...'
</code></pre>
<h2>Same thing with Python2 ...</h2>
<pre><code>$ python
Python 2.7.6 (default, Jun 22 2015, 17:58:13) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; lic = open('LICENSE', 'a+')
&gt;&gt;&gt; lic.read()
'Apache License\nVersion 2.0, January 2004\n...'
&gt;&gt;&gt; lic.seek(0)
&gt;&gt;&gt; lic.read()
'Apache License\nVersion 2.0, January 2004\n...'
</code></pre>
<p><strong>Conclusion:</strong> You're safe using the <code>seek(0)</code> <em>always</em> after opening a file with <code>a+</code>, regardless to which Python version you use. This seems to be specific to the <code>a+</code> mode.</p>
<hr/>
<h2>Why does a system call behave differently across two Python versions?</h2>
<p>One would think file manipulation is a system call, hence it's handled by the operating system. This is different with Python, as it looks according to the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">Python documentation</a>:</p>
<blockquote>
<p><strong>Note:</strong> Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent.</p>
</blockquote>
<p>BTW, this behavior has been <a href="http://bugs.python.org/issue22651" rel="nofollow">reported as a bug</a> on the Python bug tracker.</p>
</div>
<span class="comment-copy">see if my <a href="http://stackoverflow.com/questions/31598929/reading-a-file-in-c-different-behavior-for-r-and-a-flags/31599072#31599072">answer here</a> helps. It's on the <code>C</code> thread, but it should apply just as well</span>
<span class="comment-copy">If one of the answers below fixes your issue, you should accept it (click the check mark next to the appropriate answer). That does two things. It lets everyone know your issue has been resolved to your satisfaction, and it gives the person that helps you credit for the assist. <a href="http://meta.stackexchange.com/a/5235">See here</a> for a full explanation.</span>
<span class="comment-copy">It helps to actually remember to click the button (;</span>
<span class="comment-copy">.seek(0) works. I wanted to be able to open the file to append and conditionally append a line to that file if it does not already contain that line. Alternatively, I could go as simple as 'r' if I simply needed to read. Perfect. Thanks!</span>
<span class="comment-copy">Will accept in 8 minutes... lol</span>
<span class="comment-copy">@AndrewSmiley All good. :) Just glad I could help!</span>
<span class="comment-copy">Note that this is true only for Python 3. In Python 2 <code>a+</code> opens the file for appending, and rewinds the file pointer. Of course, a <code>.seek(0)</code> doesn't do any harm in Python 2, but it's not strictly needed.</span>
<span class="comment-copy">@Peterino I did not know that, I don't use 2.x much. Good to know, thank you!</span>
