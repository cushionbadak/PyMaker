<div class="post-text" itemprop="text">
<p>I have a class that looks like this:</p>
<pre><code>class myClass(object):
     def __init__(self, arg1):
         self.arg1 = arg1
         self.build_connection()

     def build_connection(self):
         if self.arg1 != 'foo':
             raise Exception('ohno')
         &lt;more code that could potentially raise an exception&gt;
</code></pre>
<p>I would like to test the build_connection function within the class, but I'm not sure what the best way / most Pythonic way of doing that would be. I realize that I could create the object and mock out the various functions called in build_connection, but I was wondering if there was a way to test build_connection independently of the object being created, ie I don't want to necessarily do something like this:</p>
<pre><code> try:
     class = myClass('foo')
 except Exception:
     self.fail('should have initialized correctly')
</code></pre>
<p>I'd rather do something more like this:</p>
<pre><code> myclass = myClass('bar')
 # mock various properties in build_connection
 myclass.build_connection()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to test <code>build_connection</code> without otherwise instantiating the class, mock the object itself.</p>
<pre><code>mock_instance = mock.Mock()
# set up necessary attributes here
myClass.build_connection(mock_instance)
# examine mock_instance
</code></pre>
</div>
<span class="comment-copy">I'm not sure, what's wrong with the first test? That's exactly how other code would use the class, so that part should work and be tested as such.</span>
<span class="comment-copy">You can use the <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises" rel="nofollow noreferrer"><code>TestCase.assertRaises()</code> method</a> to test for exceptions, if your code should raise one.</span>
<span class="comment-copy">@MartijnPieters there's nothing necessarily wrong with it, I was just trying to decouple it.</span>
<span class="comment-copy">You don't need to decouple it; it is part of the unit under test; you are testing the <code>myClass</code> unit here.</span>
