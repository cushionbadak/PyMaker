<div class="post-text" itemprop="text">
<p>On Code Academy there is this course where in the example they show</p>
<pre><code>def speak(message):
    return message

if happy():
    speak("I'm happy!")
elif sad():
    speak("I'm sad.")
else:
    speak("I don't know what I'm feeling.")
</code></pre>
<p>The above example will <strong>NOT</strong> be related to the rest of the code I show. That was just an example for the <code>if</code> statement. Now I was under the impression that when ever writing an <code>if</code> statement it had to end in an <code>():</code>like the above example.</p>
<p>However when doing the assignments this does not work:</p>
<pre><code>def shut_down(s):
    if s == "yes"():
        return "Shutting down"
    elif s == "no"():
        return "Shutdown aborted"
    else:
        return "Sorry"
</code></pre>
<p>However this works:</p>
<pre><code>def shut_down(s):
    if s == "yes":
        return "Shutting down"
    elif s == "no":
        return "Shutdown aborted"
    else:
        return "Sorry"
</code></pre>
<p>My question is how come the <code>()</code> is not needed next to the <code>"yes"</code> and <code>"no</code>" but <code>:</code>is still needed. I thought whenever writing an <code>if</code> statement it will automatically have to end with <code>():</code>. In that very first example, that's how it is shown. Do you understand my confusion.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the example given, <code>happy()</code> and <code>sad()</code> are functions, and as such require parentheses. The <code>if</code> itself does not need parentheses at the end (and it shouldn't have them)</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>if</code> has nothing to do with <code>()</code></p>
<p><code>happy</code> is a function. <code>happy()</code> is a call to that function. So, <code>if happy():</code> tests if the <code>happy</code> function returns true when called.</p>
<p>In other words, <code>if happy(): speak("I'm happy!")</code> is equivalent to</p>
<pre><code>result_of_happy = happy()
if result_of_happy:
    speak("I'm happy!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As has been mentioned <code>happy() / sad()</code> are functions so they require <code>()</code>. In example two of your question you are comparing your value to the string <code>"yes"</code> because it is a string it does not require <code>()</code>.</p>
<p>Within an <code>if</code> statement you can use parentheses to make the code more readable and ensure certain operations are evaluated before others.</p>
<pre><code>if (1+1)*2 == 4:
    print 'here'
else:
    print 'there'
</code></pre>
<p>Differs from:</p>
<pre><code>if 1+1*2 == 4:
    print 'here'
else:
    print 'there'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because string objects are not callable so what are you expecting then:</p>
<p>Then use <code>lambda</code> not that efficient tho:</p>
<pre><code>def shut_down(s):
    if (lambda: s == "yes")():
        return "Shutting down"
    elif (lambda: s == "no")():
        return "Shutdown aborted"
    else:
        return "Sorry"
</code></pre>
</div>
<span class="comment-copy">No, that's not the case. See <a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements" rel="nofollow noreferrer">what the official tutorial says about the <code>if</code> statement</a>.</span>
<span class="comment-copy">It looks like you have a fundamental misunderstanding about <a href="https://docs.python.org/3.4/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">functions</a> and <a href="https://docs.python.org/3.4/tutorial/controlflow.html#if-statements" rel="nofollow noreferrer"><code>if</code> statements</a>.</span>
<span class="comment-copy">Happy and sad are probably <a href="http://stackoverflow.com/a/19131217/5031339">functions</a></span>
<span class="comment-copy">@chrisaycock I think you're thinking of a different kind of assignment than the OP</span>
