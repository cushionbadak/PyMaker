<div class="post-text" itemprop="text">
<p>I have a directory structure:</p>
<pre><code>/somedir
    /x
        A.py
        B.py
/anotherdir
    /y
        C.py
</code></pre>
<p><code>B</code> imports <code>A</code>. This works when I run <code>B.py</code> from <code>somedir/x/</code>. However, in <code>C.py</code> when I try to import <code>B.py</code> and then run </p>
<pre><code>$&gt; python C.py
</code></pre>
<p>It complains about <code>A</code> not being found. I can add <code>somedir/x/</code> to the pythonpath so that when I run <code>C.py</code>, it can find <code>B</code> and also <code>A</code>. But, I am concerned if there will be another A in a different directory (<code>diffdir/z/A</code>) I use which might conflict with the pythonpath that includes <code>somedir/x/A</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am guessing the basic issue you are getting is because of the change to <code>intra-package references</code> between Python 2.x and Python 3.x. From <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow">documentation</a> -</p>
<blockquote>
<p><strong>6.4.2. Intra-package References</strong></p>
<p>When packages are structured into subpackages (as with the sound package in the example), you can use absolute imports to refer to submodules of siblings packages. For example, if the module <code>sound.filters.vocoder</code> needs to use the echo module in the <code>sound.effects</code> package, it can use from <code>sound.effects import echo</code> .</p>
</blockquote>
<p>Basically, if you are importing <code>B</code> and <code>B</code> imports a sibling, in Python 3.x you would need to use absolute path to import <code>A</code> in <code>B</code> . From what you said , that you are importing <code>B</code> as - </p>
<pre><code>import somedir.x.B
</code></pre>
<p>Then in <code>B</code> you would need to import <code>A</code> as -</p>
<pre><code>import somedir.x.A
</code></pre>
<hr/>
<p>Or you can also try -</p>
<pre><code>from . import A
</code></pre>
</div>
<span class="comment-copy">Can you give a clearer picture of how the directory structure looks like? is C completely in a different directory?</span>
<span class="comment-copy">that is correct, C is in a completely different directory.</span>
<span class="comment-copy">can you show code how B is imported in C ?</span>
<span class="comment-copy">import somedir.x.B</span>
<span class="comment-copy">Thanks, I think B having to know the structure of its parents directories somewhat seems to be confusing. Generally, B should be able to find all its immediate neighbors without knowing their parents. Maybe from . import A will work in B.</span>
<span class="comment-copy">Not actually, you see when you had to import B as <code>somedir.x.B</code> , it indicated that the framework/application in which B exists, starts at <code>somedir</code> . So if <code>B</code> wants to access anything within it it needs to use the same package structure.</span>
