<div class="post-text" itemprop="text">
<p>While searching the <a href="https://docs.python.org/3.3/" rel="nofollow noreferrer"><em>Python Documentation</em></a> I found the <em>equivalent python implementation</em> of Pythons build-in <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip()</code> function</strong></a>.</p>
<p>Instead of catching a <em><a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="nofollow noreferrer"><code>StopIteration</code></a> exception</em> which signals that there are no further items produced by the iterator <strong>the author(s) use an <code>if</code> statement</strong> to check if the returned <em>default value</em> form <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> equals <code>object()</code> ("<code>sentinel</code>") and stop the generator:</p>
<pre><code>def zip(*iterables):
    # zip('ABCD', 'xy') --&gt; Ax By
    sentinel = object()
    iterators = [iter(it) for it in iterables]
    while iterators:
        result = []
        for it in iterators:
            elem = next(it, sentinel)

            if elem is sentinel:
                return

            result.append(elem)
        yield tuple(result)
</code></pre>
<p><em>I wonder now if there is <strong>any difference between the exception catching or an <code>if</code> statement</strong> as used by the Python Docs?</em></p>
<p>Or better, as <a href="https://stackoverflow.com/users/4954037/hiro-protagonist"><em>@hiro protagonist</em></a> pointed out:<br/><strong><em>What's wrong with using a <code>try</code> statement</em></strong> considering <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> <a href="https://stackoverflow.com/a/11360880/4594443">(Easier to ask for forgiveness than permission)</a> in Python?</p></div>
<div class="post-text" itemprop="text">
<p>You mean as opposed to this?</p>
<pre><code>def zip2(*iterables):
    # zip('ABCD', 'xy') --&gt; Ax By
    iterators = [iter(it) for it in iterables]
    while iterators:
        result = []
        for it in iterators:
            try:
                elem = next(it)
            except StopIteration:
                return

            result.append(elem)
        yield tuple(result)
</code></pre>
<p>interesting question... i'd have preferred this alternative version - especially considering <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer"><em>EAFP</em></a> (Easier to ask for forgiveness than permission.)</p>
<p>even if try/except is slower than the if statement; this happens once only - as soon as the first iterator is exhausted.</p>
<p>it may be worth noting that this is not the actual implementaion in python; just an implementation that is <em>equivalent</em> to the real implementation.</p>
<hr/>
<p><strong>UPDATE</strong> according to comments:</p>
<p>note that <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">PEP 479</a> suggests to <code>return</code> from the generator and not raise <code>StopIteration</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally raising exceptions is always considered an expensive operation in any programming language. There are plenty of websites to read why is that and I'm not going to go into details on what it involves.</p>
<p>From <a href="https://docs.python.org/2/faq/design.html#how-fast-are-exceptions" rel="nofollow">Python Docs</a>.</p>
<blockquote>
<p>A try/except block is extremely efficient if no exceptions are raised. Actually catching an exception is expensive.</p>
</blockquote>
<p>Both using <code>if/else</code> and <code>try/catch</code> has its advantages and disadvantages depending on the situation.</p>
<ul>
<li>For example <code>try/catch</code> is used mostly for cases where an exception is a <strong>rare event</strong> (e.g. the code will succeed in almost all cases).</li>
<li>In your example you know the loop will throw an exception every time it is invoked, which makes it very inefficient to use <code>try/catch</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>When you see equivalent python code in the docs the goal of such code is to be easy to understand.  <code>if</code> is easy to understand, while <code>try/except</code> is a higher-level construct.</p>
<p>Functionally, there is no difference.  Performance-wise, there may be a small, but probably insignificant, difference.</p>
<p>As far as actual coding goes, different people think in different ways, so use whichever method makes more sense to you. The times when LBYL and EAFP actually make a difference is when a race condition can exist -- and there is no such condition here.</p>
</div>
<span class="comment-copy"><code>try:  elem = next(it); except StopIteration:Â raise</code>: catching the exception doesn't add anything useful here, you can just leave it out.</span>
<span class="comment-copy">@Evert: Thanks :) yes thats true. I just copied the snipped form <i>hiro protagonist</i> and did what  <i>Dunes</i> mentioned. Should I except the exception and return or not as mentioned in <i>PEP 479</i> ?</span>
<span class="comment-copy">Be sure to note that the code you link to is <i>equivalent to</i> not actual. The actual code for <code>zip</code> is certainly written in C</span>
<span class="comment-copy">@dawg: Therefor I wrote <i>"python implementation"</i>. But yes to make it clear I will add it.</span>
<span class="comment-copy">PEP 479 was new to me as well (kudos to @hiroprotagonist), and from what I read there, yes, catch the exception and <code>return</code>. Note that the PEP specifies a transition from Python 3.5 to 3.7 (using a <code>__future__</code> import), so it may not make sense with your current Python version.</span>
<span class="comment-copy">Yes exactly :) Thanks for pointing out <i>EAFP</i>!</span>
<span class="comment-copy">Don't catch the <code>StopIteration</code>. You're in an generator already, let it rise up out of the generator to signify the generator is exhausted.</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">PEP 479</a> suggests otherwise... if i understand correctly not catching it would work for now but cease to work in future versions.</span>
<span class="comment-copy">I'd forgotten about that PEP. However, it's not going to be enforced until version 3.7.</span>
<span class="comment-copy">@hiroprotagonist: I agree. Why do you not change your answer to "a real answer" (Add PEP, delete first line ...)? ;)</span>
<span class="comment-copy">Many thanks for your answer :) But what do you think of <i>@hiro protagonist</i> arguments?</span>
<span class="comment-copy">His argument is absolutely valid. I can only guess if the author used <code>if</code> instead of <code>StopIteration</code> exception by accident or he actually considered that the <code>zip</code> function will in almost all cases do a very small number of iterations where <code>if</code> would be more efficient. Generally I'm used to using Exceptions for ... well Exception situations rather than checks and triggers.</span>
<span class="comment-copy">"<i>... the author used <code>if</code> instead of <code>StopIteration</code> exception by accident or he actually considered that the <code>zip</code> function will in almost all cases do a very small number of iterations ...</i>" -- This might be the reason. :D</span>
