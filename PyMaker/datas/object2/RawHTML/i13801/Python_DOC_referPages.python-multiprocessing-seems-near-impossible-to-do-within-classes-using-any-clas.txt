<div class="post-text" itemprop="text">
<p>I have an alogirithm that I am trying to parallelize, because of very long run times in serial. However, the function that needs to be parallelized is inside a class. <code>multiprocessing.Pool</code> seems to be the best and fastest way to do this, but there is a problem. It's target function <em>can not</em> be a function of an object instance. Meaning this; you declare a <code>Pool</code> in the following way:</p>
<pre><code>import multiprocessing as mp
cpus = mp.cpu_count()
poolCount = cpus*2
pool = mp.Pool(processes = poolCount, maxtasksperchild = 2)
</code></pre>
<p>And then actually use it as so:</p>
<pre><code>pool.map(self.TargetFunction, args)
</code></pre>
<p>But this throws an error, because object instances cannot be pickled, as the <code>Pool</code> function does to pass information to all of its child processes. But I <em>have</em> to use <code>self.TargetFunction</code></p>
<p>So I had an idea, I would create a new Python file named <code>parallel</code> and simply write a couple of functions without putting them in a class, and call those functions from within my original class (of whose function I want to parallelize)</p>
<p>So I tried this:</p>
<pre><code>import multiprocessing as mp

def MatrixHelper(args):
    WM = args[0][0]
    print(WM.CreateMatrixMp(*args))
    return WM.CreateMatrixMp(*args)

def Start(sigmaI, sigmaX, numPixels, WM):

    cpus = mp.cpu_count()
    poolCount = cpus * 2
    args = [(WM, sigmaI, sigmaX, i) for i in range(numPixels)]
    print('Number of cpu\'s to process WM:%d'%cpus)

    pool = mp.Pool(processes = poolCount, maxtasksperchild = 2)
    tempData = pool.map(MatrixHelper, args)

    return tempData
</code></pre>
<p>These functions are not part of a class, using <code>MatrixHelper</code> in <code>Pool</code>s <code>map</code> function works fine. But I realized while doing this that it was no way out. The function in need of parallelization (<code>CreateMatrixMp</code>) expects an object to be passed to it (it is declared as <code>def CreateMatrixMp(self, sigmaI, sigmaX, i)</code>)</p>
<p>Since it is not being called from within its class, it doesn't get a <code>self</code> passed to it. To solve this, I passed the <code>Start</code> funtion the calling object itself. As in, I say <code>parallel.Start(sigmaI, sigmaX, self.numPixels, self)</code>. The object <code>self</code> then becomes <code>WM</code> so that I will be able to finally call the desired function as <code>WM.CreateMatrixMp()</code>.</p>
<p>I'm sure that that is a very sloppy way of coding, but I just wanted to see if it would work. But nope, pickling error again, the <code>map</code> function cannot handle any objects instances at all. </p>
<p>So my question is, why is it designed this way? It seems useless, it seems to be completely disfunctional in any program that uses classes at all. </p>
<p>I tried using <code>Process</code> rather than <code>Pool</code>, but this requires the array that I am ultimately writing to to be shared, which requires processes waiting for eachother. If I don't want it to be shared, then I have each process write its own smaller array, and do one big write at the end. But <em>both</em> of these result in <em>slower</em> run times than when I was doing this serially! Pythons builtin <code>multiprocessing</code> seems absolutely useless!</p>
<p>Can someone please give me some guidance as to how to actually save time with multiprocessing, in the context of my tagret function being inside a class? I have read on posts here to use <code>pathos.multiprocessing</code> instead, but I am on Windows, and am working on this project with multiple people who all have different set ups. Having everyone try to install it would be inconveinient.</p>
</div>
<div class="post-text" itemprop="text">
<p>The essence of how <code>multiprocessing</code> works is that it spawns sub-processes that receive parameters to run a certain function. In order to pass these arguments, it needs that they are, well, <em>passable</em>: non-exclusive to the main process, s.a. sockets, file descriptors and other low-level, OS related stuff.</p>
<p>This translates into "need to be <code>pickle</code>able or <em>serializable</em>".</p>
<p>On the same topic, parallel processing works best when you (can) have self-contained divisions of a problem. I can tell you want to share some sort of input/stream/database source, but this will probably create a bottleneck that you'll have to tackle at some point (at least, from the "python script" side, rather than the "OS/database" side. Fortunately, you have to tackle it early now.</p>
<p>You can re-code your classes to spawn/create these non-pickable resources when neeeded rather than at start</p>
<pre><code>def targetFunction(self, range_params):
  if not self.ready():
    self._init_source()
  #rest of the code
</code></pre>
<p>You kinda tackled the problem the other way around (initialized an object based on params). And yes, parallel processing comes with a cost.</p>
<p>You can see the <a href="https://docs.python.org/3/library/multiprocessing.html#programming-guidelines" rel="nofollow"><code>multiprocessing</code> programming guidelines</a> for an even more thorough insight on this matter.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was having a similar issue with trying to use multiprocessing within a class. I was able to solve it with a relatively easy workaround I found online. Basically you use a function outside of your class that unwraps/unpacks the method inside your function that you're trying to parallelize. Here are the two websites I found that explain how to do it.</p>
<p><a href="http://qingkaikong.blogspot.com/2016/12/python-parallel-method-in-class.html" rel="nofollow noreferrer">Website 1 (joblib example)</a></p>
<p><a href="http://www.rueckstiess.net/research/snippets/show/ca1d7d90" rel="nofollow noreferrer">Website 2 (multiprocessing module example)</a></p>
</div>
<span class="comment-copy">You can find an answer here: <a href="http://stackoverflow.com/questions/32321324/pool-within-a-class-in-python" title="pool within a class in python">stackoverflow.com/questions/32321324/â€¦</a></span>
