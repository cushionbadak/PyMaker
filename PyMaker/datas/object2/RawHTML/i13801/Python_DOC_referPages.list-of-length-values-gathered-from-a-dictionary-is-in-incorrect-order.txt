<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1653970/does-python-have-an-ordered-set">Does Python have an ordered set?</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>This is my code:</p>
<pre><code>chile_ranks = {'ghost': 1, 'habanero': 2, 'cayenne': 3}
rank_dict = {rank: name for name, rank in chile_ranks.items()}
chile_len_set = {len(name) for name in rank_dict.values()}
print(rank_dict)
print(chile_len_set)
</code></pre>
<p>Output:</p>
<pre><code>{1: 'ghost', 2: 'habanero', 3: 'cayenne'}
set([8, 5, 7])
</code></pre>
<p>I wanted to print the length of item values respectively as they are arranged in the dictionary, but they are appended to the set in an arbitrary manner. It should be like:</p>
<pre><code>set([5, 8, 7])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no reason to make a <code>set</code> here unless you want to throw away duplicates (which <code>set</code>s do), which would result in no recorded value for something like <code>'spicy'</code> (same length as <code>'ghost'</code>). If you want to print the lengths, I would recommend doing so directly from the original dictionary. However, dictionaries are arbitrarily-ordered just like <code>set</code>s are, so you'll have to sort it:</p>
<pre><code>&gt;&gt;&gt; chile_ranks = {'ghost': 1, 'habanero': 2, 'cayenne': 3}
&gt;&gt;&gt; rank_dict = {rank: name for name, rank in chile_ranks.items()}
&gt;&gt;&gt; chile_len_set = {len(name) for name in rank_dict.values()}
&gt;&gt;&gt; print(rank_dict)
{1: 'ghost', 2: 'habanero', 3: 'cayenne'}
&gt;&gt;&gt; print(chile_len_set)
{8, 5, 7}
&gt;&gt;&gt; print(*(len(rank_dict[key]) for key in sorted(rank_dict)))
5 8 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sets have no defined order. This is impossible without writing your own print function, which for example could use <code>sorted</code>.</p>
<blockquote>
<p>A set object is an <strong>unordered</strong> collection of distinct hashable objects.<br/>
<a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset</a></p>
</blockquote>
<p>If you want to maintain the order, you might want to use normal lists. Uniqueness will need to be assured in some other way, for example checking your list before updating it.</p>
</div>
<span class="comment-copy"><code>set</code>s aren't ordered. but you can use <a href="http://code.activestate.com/recipes/576694/" rel="nofollow noreferrer">this recipe</a> for an <code>OrderedSet</code>.</span>
<span class="comment-copy">Native Python dictionaries aren't ordered either, so wanting to arrange the length values in the same order as they are in the dictionary makes little sense. You could use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> to create some that are, however.</span>
<span class="comment-copy">I got it.The desired output can be also by attained mapping it to a list <code>chile_len_list = [len(name) for name in rank_dict.values()]</code></span>
<span class="comment-copy">@PiyushSinha - The only difference between that and your non-working solution is that it outputs to a <code>list</code> instead of a <code>set</code>. Creating a sequence from an unordered collection produces an ordering just as arbitrary as creating an unordered collection from an unordered collection. That's why I used <code>sorted()</code>. Without <code>sorted()</code> (or some other ordering algorithm), your results will still be unstable.</span>
<span class="comment-copy">and how does this <code>sorted()</code> method works?how does it preserve the order?</span>
<span class="comment-copy">Which vesion of python did you use?</span>
<span class="comment-copy">Dictionaries and <code>set</code>s are arbitrarily-ordered in any version of Python. When you create one, there is no order to preserve. The <code>sorted</code> function <i>creates</i> order. Once again, <i>you are not working with ordered sequences</i>.</span>
