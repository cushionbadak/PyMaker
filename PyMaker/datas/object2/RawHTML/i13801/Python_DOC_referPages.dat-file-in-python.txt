<div class="post-text" itemprop="text">
<p>I'am doing a project in python using OpenCV. I have to store a large amount of integer data(features of images in the database) in a separate file. I can use .txt file but it stores integer values as strings. 
Is there any way that I can store integer values directly as integers in python like .dat file in MATLAB.?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/struct.html" rel="nofollow">struct</a> to pack the integers in a bytes format and write them to a dat file.</p>
<p>With integers, this will result in a file that contains 4 bytes per integer, which would save a bit of space (over text format) if you have very large numbers. If you have smaller numbers, a csv format may be better.</p>
<pre><code>import struct

data = [1,2,3,4,5,6,7,8,9]

with open('data.dat', 'wb') as data_file:
    data_file.write(struct.pack('i'*len(data), *data))
</code></pre>
<p>Then to read it back in</p>
<pre><code>with open('data.dat', 'rb') as data_file:
    values = struct.unpack('i'*len(data), data_file.read())
</code></pre>
</div>
<span class="comment-copy">What do you mean <i>"integer values directly as integers"</i>?!</span>
<span class="comment-copy">I mean that if I try to store 5 in .txt file, it will be stored as a character, not integer.</span>
<span class="comment-copy">What's an <i>"integer"</i>, though? Are you talking about binary representation? How many bits per number?</span>
<span class="comment-copy">Please show the work you have already done.</span>
<span class="comment-copy">the integers are probably in a <code>numpy</code> array. You could use its serialization methods e.g., something like <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.savez_compressed.html#numpy.savez_compressed" rel="nofollow noreferrer"><code>numpy.savez_compressed()</code></a>. Otherwise,see <a href="http://stackoverflow.com/q/17244488/4279">reading struct in python from created struct in c</a> -- the writing is even simpler, just call <code>file.write(array_with_c_types)</code>.</span>
<span class="comment-copy">it is probably inefficient for image data with millions of pixels. There are <a href="http://stackoverflow.com/questions/31833610/dat-file-in-python#comment51653849_31833610">other options</a></span>
<span class="comment-copy">It probably is. The most efficient and compressed format is probably the image itself.</span>
