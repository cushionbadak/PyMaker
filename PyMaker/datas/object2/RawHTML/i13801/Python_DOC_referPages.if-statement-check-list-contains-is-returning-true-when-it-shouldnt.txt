<div class="post-text" itemprop="text">
<p>I have a list which contains the values:</p>
<pre><code>['1', '3', '4', '4']
</code></pre>
<p>I have an if statement which will check if the values are contained within the list then output a statement:</p>
<pre><code>if "1" and "2" and "3" in columns:
    print "1, 2 and 3"
</code></pre>
<p>Considering the list doesn't contain value "2", it should not print the statement, however it is:</p>
<p><strong>Output:</strong></p>
<pre><code>1, 2 and 3
</code></pre>
<p>Can someone explain why this is the case? Is it the way Python reads the list that is making this occur?</p>
</div>
<div class="post-text" itemprop="text">
<p>It gets evaluated in order of <a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a>:</p>
<pre><code>if "1" and "2" and ("3" in columns):
</code></pre>
<p>Expands into:</p>
<pre><code>if "1" and "2" and True:
</code></pre>
<p>Which then evaluates <code>("1" and "2")</code> leaving us with:</p>
<pre><code>if "2" and True
</code></pre>
<p>Finally:</p>
<pre><code>if True:
</code></pre>
<p>Instead you can check if the <code>set</code> of strings are a subset of <code>columns</code>:</p>
<pre><code>if {"1", "2", "3"}.issubset(columns):
    print "1, 2 and 3"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's two general rules to keep in mind in order to understand what's happening:</p>
<ul>
<li><strong>a boolean operator always <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow">returns the result of the evaluation of one operand</a></strong></li></ul></div>
<span class="comment-copy"><code>in</code> precedes over <code>and</code>. when in doubt, add parenthesis.</span>
<span class="comment-copy">Maybe it would be better to say that <b><code>"1" and "2" and "3"</code> returns <code>"3"</code></b> and <b><code>"3" in columns</code> returns <code>True</code></b>. This is because "<i>neither <code>and</code> nor <code>or</code> restrict the value and type they return to False and True, but rather return the last evaluated argument</i>". <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">see the docs</a> :)</span>
<span class="comment-copy">@elegent Ah you're of course correct. I was just thinking in terms of "Truthiness", but what you're saying is what is actually happening.</span>
<span class="comment-copy">As it stands, this explanation is wrong, for the reasons elegent stated. Considering it's the top voted and accepted answer, please take the time to correct it, otherwise we're misinforming people. If you don't mind, I'll be happy to do it</span>
<span class="comment-copy">I am sorry! <b>My explanation is wrong too!!</b> Please see @goncalopp <a href="http://stackoverflow.com/a/31784924/4594443">answer</a></span>
<span class="comment-copy">I'm impressed by everyone's dedication, I've updated the answer accordingly.</span>
<span class="comment-copy">Yah :) there we go :D Should I delete my answer? :)</span>
<span class="comment-copy">@elegent I don't think you should delete your answer - now that you've corrected the operator precedence, I think it's the quickest to understand for people who already have a good understanding of python</span>
<span class="comment-copy">Thanks :) I will link to your answer! If you don't mind you could upvote my last comment for @KitSunde answer, which says that my first comment is wrong -- so everybody can see it immediately.</span>
