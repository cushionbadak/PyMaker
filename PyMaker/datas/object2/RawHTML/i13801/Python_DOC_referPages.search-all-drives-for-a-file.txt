<div class="post-text" itemprop="text">
<p>I have the name of a file and I want to find it on whatever Drive it is. I can use a recursive search, but I need a root directory to start with. For most computers, the root is "C:\". But there are some that have changed the letter, or some that have more than one (eg. C,D...).</p>
<p>So, I need to find a way to know all the Drives in a computer, so I can search through each one. I need to find the letters programmatically without user input.</p>
<p>I know I can use "diskpart", but it requires an administrator access, something my code will not have. There is also "wmic", but I don't know if the computer has the right folder in the PATH.</p>
<p>So, the question is how can I do a recursive search in a computer which I don't know the letters of the drives or how many are there? Or is there another way to find the path of a file in a computer?</p>
</div>
<div class="post-text" itemprop="text">
<p>I have a solution that requires you run as an administrator, but does not require you install any other tools. I then have an alternative, messy solution that you can run even without any of these privileges. I'll start with the cleaner one.</p>
<p>This script will find you the drives:</p>
<pre><code>import subprocess

driveStr = subprocess.check_output("fsutil fsinfo drives")
driveStr = driveStr.strip().lstrip('Drives: ')
drives = driveStr.split()
</code></pre>
<p>Basically, <code>fsutil fsinfo drives</code> is a commandline command that will return the letters of existing drives on your computer. So you can get that result with <code>check_output</code> and then strip away the unnecessary characters, because it will return a string like <code>'\r\nDrives: C:\\ D:\\ \r\n'</code>. Then you can split the list and you'll have a list of drives like this:</p>
<pre><code>['C:\\', 'D:\\']
</code></pre>
<p>You can then loop over those drives to recursively search for a file.</p>
<pre><code>import os

def find_file(target, folder):
    for f in os.listdir(folder):
        path = os.path.join(folder, f)
        if os.path.isdir(path):
            result = find_file(target, path)
            if result is not None:
                return result
            continue
        if f == target:
            return path
</code></pre>
<p>This function will basically loop over every file in the folder it's provided, it first checks if the file is a folder with <code>isdir</code>, and runs recursively on any folders it finds. If it's not a folder, it will check for the file named <code>target</code> and return its path when found. You can combine these two parts pretty simply:</p>
<pre><code>for drive in drives:
    filepath = find_file(target, drive)
    if filepath is not None:
        break
</code></pre>
<p>However, if you're unable to run as administrator, there is another way that's not as nice. Basically you could just loop over all the possible drive names and check if they exist, like this:</p>
<pre><code>drives = ['{}:\\' for letter in 'CDEFGHIJKLMNOPQRSTUVWXYZ']
for drive in drives:
    if os.path.isdir(drive):
        filepath = find_file(target, drive)
        if filepath is not None:
            break
</code></pre>
<p>This will check if each drive exists as a directory and search each one that does. Note this will include networked paths and I believe USBs/external hard drives, while the alternative method does not.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding correctly you know the name of the file.</p>
<p>Using <code>os.path.abspath('myfile.txt')</code> should return the full path.</p>
<p>Afterwards you can use the <code>os.path.dirname</code> to get only the directory.</p>
<p>According to documentation os.path should be cross-platform: <a href="https://docs.python.org/3/library/os.path.html#module-os.path" rel="nofollow">https://docs.python.org/3/library/os.path.html#module-os.path</a> but I haven't tried it on Windows.</p>
</div>
<span class="comment-copy">You could use <code>os.path.abspath('blank')</code> to figure out the current drive, it would return a path like <code>C:/Python27/blank</code>. But are you trying to determine what multiple drives are?</span>
<span class="comment-copy">Hi tamird14, I see that you have a good idea (recursive search), so I dare say your problem is finding the letter of the HD. I suggest you change the title of your question accordingly.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/4006740/4374739">This answer</a> helps if you have win32api installed</span>
<span class="comment-copy">And using for example: <code>os.getcwd</code> can give you access to the letter of the current drive.</span>
<span class="comment-copy">@SuperBiasedMan my goal is to find the path of the file.</span>
<span class="comment-copy">If the code doesn't run as an administrator, what can I do?</span>
<span class="comment-copy">@tamird14 Windows makes this hard with User Account Control (UAC), and I'm not that familiar with it so I'm not sure how to work around it. There's a method that involves installing Python's <code>win32api</code> if you want to go that route.</span>
<span class="comment-copy">@tamird14 I came up with a less than ideal way to test if the directories exist, check out the last part of my edited answer.</span>
<span class="comment-copy">There's no reason to require admin access just to get the user's logical drives. Just use ctypes to call <a href="https://msdn.microsoft.com/en-us/library/aa364972" rel="nofollow noreferrer"><code>GetLogicalDrives</code></a>, which returns the drive bitmask. For example: <code>import ctypes;</code> <code>dmask = ctypes.windll.kernel32.GetLogicalDrives();</code> <code>drives = [chr(ord('A') + n) for n in range(26) if (dmask &gt;&gt; n) &amp; 1]</code>.</span>
<span class="comment-copy">Also, use <code>os.walk</code> to walk over the files on each drive. In Python 3.5 <a href="https://docs.python.org/3.5/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> is reimplemented to use the new <code>os.scandir</code> function, which makes it many times faster on Windows.</span>
<span class="comment-copy">No, the OP wants to recursively search in every folder of a given hard drive for the file.</span>
