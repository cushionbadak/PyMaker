<div class="post-text" itemprop="text">
<p>When reading in a file line-by-line using the classic <code>for line in filename:</code> approach, how do you concatenate each line into one string (or one string per list) based on a specific character symbol (e.g., <code>$</code>).  For example:</p>
<p>My input:</p>
<pre><code>$asdfasdfasdfasdfasdfasdf
ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSD
LKAJSDLJFALSJDFLJALSJDFLASDLFJLAJSDLFJALSDFAS
LLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKS
ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJF
$aWEOUUEWOEUowuerotueworutowueortuo
ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSD
LKAJSDLJFALoqiweoituoiwueoruweuroouqweoruuqowuieoFAS
LLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKS
ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs
</code></pre>
<p>My desired output:</p>
<pre><code>'ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSDLKAJSDLJFALSJDFLJALSJDFLASDLFJLAJSDLFJALSDFASLLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKSALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJF'
'ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSDLKAJSDLJFALoqiweoituoiwueoruweuroouqweoruuqowuieoFASLLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKSALKSDJLFKJSLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs'
</code></pre>
<p>OR</p>
<pre><code>['ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSDLKAJSDLJFALSJDFLJALSJDFLASDLFJLAJSDLFJALSDFASLLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKSALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJF']
['ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSDLKAJSDLJFALoqiweoituoiwueoruweuroouqweoruuqowuieoFASLLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKSALKSDJLFKJSLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs']
</code></pre>
<p>Notice that any lines beginning with the <code>$</code> symbol were removed and used as the breaking point of string concatenation line-by-line.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex.<a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow"><code>re.finditer</code></a> will returns an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow"><em>iterator</em></a> contains all the desire lines then you can use a list comprehension and <code>str.replace</code> method to replace the newlines with empty string :</p>
<pre><code>&gt;&gt;&gt; s="""$asdfasdfasdfasdfasdfasdf
... ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSD
... LKAJSDLJFALSJDFLJALSJDFLASDLFJLAJSDLFJALSDFAS
... LLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKS
... ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJF
... $aWEOUUEWOEUowuerotueworutowueortuo
... ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSD
... LKAJSDLJFALoqiweoituoiwueoruweuroouqweoruuqowuieoFAS
... LLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKS
... ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs
... """
&gt;&gt;&gt; 
&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; li=re.finditer(r'\$[^\n]*([^$]+)',s)
&gt;&gt;&gt; [i.group(1).replace('\n','') for i in li]
['ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSDLKAJSDLJFALSJDFLJALSJDFLASDLFJLAJSDLFJALSDFASLLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKSALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJF',
 'ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSDLKAJSDLJFALoqiweoituoiwueoruweuroouqweoruuqowuieoFASLLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKSALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import io

data = io.StringIO('''$asdfasdfasdfasdfasdfasdf
ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSD
LKAJSDLJFALSJDFLJALSJDFLASDLFJLAJSDLFJALSDFAS
LLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKS
ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJF
$aWEOUUEWOEUowuerotueworutowueortuo
ABCSLKDJFLAJSDJLAJSDLFJALJSDLKJLAJLSKDJFLAJSD
LKAJSDLJFALoqiweoituoiwueoruweuroouqweoruuqowuieoFAS
LLASJLKDFJLASDFASKLDFLASDFJALSDJFLAJSDLFJALKS
ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs''')


strings = []
strg = ''
for line in data:
    if line.startswith('$'):
        if strg:
            strings.append(strg)
            strg = ''
        continue
    else:
        strg += line.strip()
if strg:
    strings.append(strg)   

print(strings)
</code></pre>
</div>
<span class="comment-copy">why not read in whole file and then break it to pieces?</span>
<span class="comment-copy">I'm getting <code>TypeError: initial_value must be unicode or None, not str</code></span>
<span class="comment-copy"><code>initial_value</code>? there is no such identifier in the python code above...</span>
<span class="comment-copy"><code>Traceback (most recent call last):   File "myfile.py", line 12, in &lt;module&gt;     ALKSDJLFKJASLDJFLAJSDLFJALSJDFLJASLDJJASDLFJFsdfs''') TypeError: initial_value must be unicode or None, not str</code>.  I ran this both in IPython notebook and the command-line.  Same error with both attempts.</span>
<span class="comment-copy">did you change/rename something? because again: <code>initial_value</code> does not appear in the code above.</span>
<span class="comment-copy">"initial_value" is from the io.StringIO module.  As it says, it's complaining about the value it's trying to convert being a string rather than unicode.  The reason you're getting different results is that in Python3 but not Python2 str holds unicode values.  To make it work in Python2, simply precede the string with "u": data = io.StringIO(u'''$asdfasd ...</span>
