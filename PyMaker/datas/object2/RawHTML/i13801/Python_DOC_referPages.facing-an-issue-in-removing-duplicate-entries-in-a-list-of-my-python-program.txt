<div class="post-text" itemprop="text">
<p>The below program is for entering the values to a list and print the list again after removing the duplicate entries... Can someone please have a look and let me know what would be the error in the program?</p>
<pre><code>print ("Enter the Numbers into List \n")
list = []
n = int(input(""))
while n &lt;= 1000:
    list.append(n)
    n = int(input(""))

m = len(list)
for i in range (0,m-1):
    for j in range (i+1,m):
        if list[i] == list[j]:
            list.remove(j)
        else:
            pass

print (list)
</code></pre>
<p>When I run the program it gives below error:</p>
<pre class="lang-none prettyprint-override"><code>File "python", line 23, in &lt;module&gt;
    ValueError: list.remove(x): x not in list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as you keep deleting the elements the length of list keeps decreasing and the index you are accessing might not be accessible</p>
<p>instead do something like</p>
<pre><code>list(set(t))
</code></pre>
<p>and dont name your lists as the "list" keyword</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems with your code.</p>
<p>The first is your assumption that <code>list.remove()</code> takes an index as its argument. It doesn't remove an element by <em>index</em>, but by <em>value</em> (see <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow">the method's documentation</a>). The second is that if you modify a list as you iterate over it you may well find that this messes up your indexing:</p>
<pre><code>&gt;&gt;&gt; for i in range(len(lst)):
...     if i == 2:
...         del lst[i]
...     else:
...         print(lst[i])
...
1
2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 5, in &lt;module&gt;
IndexError: list index out of range
</code></pre>
<p>The third (minor) issue is that you are using the name of a built-in type (<code>list</code>) as a variable in your code, which will "shadow" the built-in type, making it inaccessible.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of problems in your solution:</p>
<p>The one you run into is that the <code>remove</code> method removes the first element that matches the argument, but you use the index of the element as argument which does not need to be one of the element. Instead if you want to remove an element by index you should use <code>del mylist[index]</code> instead.</p>
<p>Second you're trying to modify an list while iterating through it and that's not a good thing, you will probably not getting the result from that that you expect.</p>
<p>Also a aestetically questionable construct is calling your list <code>list</code>, that name is already used by the type <code>list</code>. By doing so you run into the problem that you can't use the builtin <code>list</code> anymore and that could be confusing. </p>
<p>The pythonic way to do this is to use the library functions and not reinventing the wheel (and of course not calling your list <code>list</code>):</p>
<pre><code>import collections

mylist[:] = list(collections.OrderedDict.fromkeys(mylist).keys())
</code></pre>
<p>What it does is using <code>OrderedDict</code> which retains the order of the keys to put the element into and then create a list from that and then put it in the original list.</p>
<p>That solution however assumes that the items are hashable, which might not be the case. Otherwise the only solution is to iterate twice through the list as Cunningham's answer shows (which is therefore slower).</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to remove <code>j</code> not what is in <code>list[j]</code>, you also need to make a copy of the list and remove from that, when you remove elements you change the size of the list so apart from an index error you will try to remove elements that are not there:</p>
<pre><code>m = len(lst)
out = lst[:]
for i in range(m - 1):
    for j in range(i + 1, m-1):
        if lst[i] == lst[j]:
            out.remove(lst[j])

print(out)
</code></pre>
<p>To remove from the original list, you can use a set and reversed:</p>
<pre><code>seen = set()
for ele in reversed(lst):
    if ele  in seen:
        lst.remove(ele)
    seen.add(ele)

print(lst)
</code></pre>
<p>Or use an OrderedDict:</p>
<pre><code>from collections import OrderedDict

print(list(OrderedDict.fromkeys(lst).keys()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple way using comprehension would be assuming your list name is <code>l</code> to avoid clashing with the type <code>list</code>:</p>
<pre><code>l = [ l[i] for i in range(len(l)) if l[i] not in l[:i] ]
</code></pre>
<p>It avoids a name clash with the builtin type list, and modifying a list that you are iterating, and is still O(n<sup>2</sup>/2)</p>
</div>
<span class="comment-copy">On error is that you're trying to remove the index of the list instead of the element itself. To remove by index you just use <code>del list[j]</code>, but still you need to avoid modifying the list while iterating over it too.</span>
<span class="comment-copy">@ alpheus it worked.. can you pls explain what that funcation actualy does?</span>
<span class="comment-copy">a set in mathematics is a collection of distinct objects in python when you pass a list object to the set method it converts it into a set <code>set(t)</code>automatically removing those duplicate elements now when you can convert the set to list by passing that same set to the list method <code>list(s)</code> where s is the set</span>
<span class="comment-copy">make sense..thnx a lot for the input.....</span>
