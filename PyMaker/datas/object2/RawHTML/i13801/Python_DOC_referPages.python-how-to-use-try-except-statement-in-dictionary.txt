<div class="post-text" itemprop="text">
<p>I was trying to do this, but It didn't work.  Just to clarify I want value to equal list[0] if it exists.  Thanks.</p>
<pre><code>    dictionary = {
    try:
        value : list[0],
    except IndexError:
        value = None
    }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'd have to put the <code>try..exept</code> <em>around</em> the assigment; you cannot put it inside an expression like you did:</p>
<pre><code>try:
    dictionary = {value: list[0]}
except IndexError:
    dictionary = {value: None}
</code></pre>
<p>Alternatively, move the assignment to a separate set of statements:</p>
<pre><code>dictionary = {value: None}
try:
    dictionary[value] = list[0]
except IndexError:
    pass
</code></pre>
<p>or explicitly test for the length of <code>list</code> so you can just select <code>None</code> with a conditional expression:</p>
<pre><code>dictionary = {
    value: list[0] if list else None,
}
</code></pre>
<p>where the <code>if list</code> test is true if the list object is not empty.</p>
<p>You could also use the <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow"><code>itertools.izip_longest()</code> function</a> (<a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>itertools.zip_longest()</code></a> in Python 3) to pair up keys and values; it'll neatly cut off at the <em>shortest sequence</em>, and fill in <code>None</code> values for the missing elements:</p>
<pre><code>from itertools import izip_longest
dictionary = dict(izip_longest(('key1', 'key2', 'key3'), list_of_values[:3]))
</code></pre>
<p>Here, if <code>list_of_values</code> does not have 3 values, then their matching keys are set to <code>None</code> automatically:</p>
<pre><code>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; list_of_values = []
&gt;&gt;&gt; dict(izip_longest(('key1', 'key2', 'key3'), list_of_values[:3]))
{'key3': None, 'key2': None, 'key1': None}
&gt;&gt;&gt; list_of_values = ['foo']
&gt;&gt;&gt; dict(izip_longest(('key1', 'key2', 'key3'), list_of_values[:3]))
{'key3': None, 'key2': None, 'key1': 'foo'}
&gt;&gt;&gt; list_of_values = ['foo', 'bar']
&gt;&gt;&gt; dict(izip_longest(('key1', 'key2', 'key3'), list_of_values[:3]))
{'key3': None, 'key2': 'bar', 'key1': 'foo'}
&gt;&gt;&gt; list_of_values = ['foo', 'bar', 'baz']
&gt;&gt;&gt; dict(izip_longest(('key1', 'key2', 'key3'), list_of_values[:3]))
{'key3': 'baz', 'key2': 'bar', 'key1': 'foo'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can actually use the 'in' keyword to see if something exists as a key in a dictionary</p>
<pre><code>if list[0] in dictionary:
    value = list[0]
else:
    value = None
</code></pre>
<p>Just a note, avoid using 'list' as a variable name.</p>
<p>Here's what you're trying to do I'm assuming:</p>
<pre><code>new_dictionary = dict()
if list[0] in dictionary:
    new_dictionary['value'] = list[0]
else:
    new_dictioanry['value'] = None
</code></pre>
</div>
<span class="comment-copy">You need to post more surrounding code (what is <code>list</code>?)  I think you are confusing a piece of logic that should exist in a function or method somewhere (getting <code>value</code>) with the <code>dict</code> datatype.  Try posting a complete but very short program, that prints output, and describe what output you expect.</span>
<span class="comment-copy">I see, thanks.  Is there a more efficient way to do this say if I'm checking multiple list elements?</span>
<span class="comment-copy">@PiccolMan: are we talking about extracting the first element for all of those, or is this for different indices from the same list?</span>
<span class="comment-copy">The third part "if list else None" works excellently for my case.  Thank you so much.</span>
<span class="comment-copy">Sorry I don't think I was clear enough, I don't want to check if list[0] is in dictionary.  I want to check if there is even an index of 0 for list, and if so, then make value = list[0].  And thanks for your suggestion.</span>
<span class="comment-copy">Oh, in that case you could check if the length of the list is greater than or equal to 1.  <code>if len(list) &gt;= 1: do what you need to do</code></span>
<span class="comment-copy">Thank you for your help, I have fixed my problem.</span>
