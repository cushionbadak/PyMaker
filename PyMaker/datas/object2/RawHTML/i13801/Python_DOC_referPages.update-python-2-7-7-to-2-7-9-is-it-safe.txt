<div class="post-text" itemprop="text">
<p>I'm going to update from Python 2.7.7 to 2.7.9 (or better 2.7.10) version. Since I have many projects in progress I have to be very careful. </p>
<p>My question is - is it safe to update to the 2.7.9/10 version? Will everything work as usual? </p>
<p>Is it enough if I just download the msi from <a href="https://www.python.org/downloads/" rel="nofollow">python official web</a> and install it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Minor version upgrades (i.e. 2.7.x to 2.7.y) of Python are generally backwards-compatible, with low risk of things breaking.</p>
<p>See <a href="https://hg.python.org/cpython/raw-file/15c95b7d81dc/Misc/NEWS" rel="nofollow">https://hg.python.org/cpython/raw-file/15c95b7d81dc/Misc/NEWS</a> for all the details between 2.7.9 to 2.7.10. There are similar ChangeLog entries between each minor version.</p>
<p>You should have a rollback strategy (with an estimated timeline) on how to revert to 2.7.7 if something goes wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.7.9 in particular has several potentially breaking changes. From the <a href="https://www.python.org/downloads/release/python-279/" rel="nofollow">release page</a>:</p>
<blockquote>
<p>Python 2.7.9 includes several significant changes unprecedented in a "bugfix" release:</p>
<ul>
<li>The entirety of <a href="https://docs.python.org/3/library/ssl.html" rel="nofollow">Python 3.4's ssl module</a> has been backported for Python 2.7.9. See <a href="https://www.python.org/dev/peps/pep-0466/" rel="nofollow">PEP 466</a> for justification.</li>
<li>HTTPS certificate validation using the system's certificate store is now enabled by default. See <a href="https://www.python.org/dev/peps/pep-0476/" rel="nofollow">PEP 476</a> for details.</li>
<li>SSLv3 has been disabled by default in [httplib and its reverse dependencies due to the <a href="https://www.imperialviolet.org/2014/10/14/poodle.html" rel="nofollow">POODLE attack</a>.</li>
</ul>
</blockquote>
<p>These changes have caused some compatibility problems:</p>
<ol>
<li>Libraries like gevent that monkey-patch SSL had to be updated. (See <a href="https://github.com/gevent/gevent/issues/477" rel="nofollow">here</a>.)</li>
<li>Code that was insecure (e.g., it didn't validate certificates) but still functioned due to insecure defaults will no longer work.</li>
</ol>
<p>Issues such as #1 can be solved with updating affected libraries, and for #2, "obviously broken" is probably better than "appears to work but not secure," but these problems are worth being aware of.</p>
<p>If you're not doing SSL/TLS, I don't think you'll have to worry about any of this.</p>
</div>
<span class="comment-copy">Why don't you use <code>virtualenv</code> and have a particular Python version for each one of your projects? (Unless I didn't understand your question.) With Python one can usually have several versions installed and use the one you need when needed, or have several environments (normally one per project) and activate it when needed.</span>
<span class="comment-copy">Thank you for the answer. I've installed 2.7.10 and everything seems to work correctly.</span>
<span class="comment-copy">Although minor releases are generally backwards-compatible, 2.7.9 's SSL-related security changes make it something of an exception.</span>
