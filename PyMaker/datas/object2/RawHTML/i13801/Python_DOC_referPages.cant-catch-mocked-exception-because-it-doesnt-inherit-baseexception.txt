<div class="post-text" itemprop="text">
<p>I'm working on a project that involves connecting to a remote server, waiting for a response, and then performing actions based on that response.  We catch a couple of different exceptions, and behave differently depending on which exception is caught.  For example:</p>
<pre><code>def myMethod(address, timeout=20):
    try:
        response = requests.head(address, timeout=timeout)
    except requests.exceptions.Timeout:
        # do something special
    except requests.exceptions.ConnectionError:
        # do something special
    except requests.exceptions.HTTPError:
        # do something special
    else:
        if response.status_code != requests.codes.ok:
            # do something special
        return successfulConnection.SUCCESS
</code></pre>
<p>To test this, we've written a test like the following</p>
<pre><code>class TestMyMethod(unittest.TestCase):

    def test_good_connection(self):
        config = {
            'head.return_value': type('MockResponse', (), {'status_code': requests.codes.ok}),
            'codes.ok': requests.codes.ok
        }
        with mock.patch('path.to.my.package.requests', **config):
            self.assertEqual(
                mypackage.myMethod('some_address',
                mypackage.successfulConnection.SUCCESS
            )

    def test_bad_connection(self):
        config = {
            'head.side_effect': requests.exceptions.ConnectionError,
            'requests.exceptions.ConnectionError': requests.exceptions.ConnectionError
        }
        with mock.patch('path.to.my.package.requests', **config):
            self.assertEqual(
                mypackage.myMethod('some_address',
                mypackage.successfulConnection.FAILURE
            )
</code></pre>
<p>If I run the function directly, everything happens as expected.  I even tested by adding <code>raise requests.exceptions.ConnectionError</code> to the <code>try</code> clause of the function.  But when I run my unit tests, I get </p>
<pre class="lang-none prettyprint-override"><code>ERROR: test_bad_connection (test.test_file.TestMyMethod)
----------------------------------------------------------------
Traceback (most recent call last):
  File "path/to/sourcefile", line ###, in myMethod
    respone = requests.head(address, timeout=timeout)
  File "path/to/unittest/mock", line 846, in __call__
    return _mock_self.mock_call(*args, **kwargs)
  File "path/to/unittest/mock", line 901, in _mock_call
    raise effect
my.package.requests.exceptions.ConnectionError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "Path/to/my/test", line ##, in test_bad_connection
    mypackage.myMethod('some_address',
  File "Path/to/package", line ##, in myMethod
    except requests.exceptions.ConnectionError:
TypeError: catching classes that do not inherit from BaseException is not allowed
</code></pre>
<p>I tried to change the exception I was patching in to <code>BaseException</code> and I got a more or less identical error.</p>
<p>I've read <a href="https://stackoverflow.com/a/18163759/3076272">https://stackoverflow.com/a/18163759/3076272</a> already, so I think it must be a bad <code>__del__</code> hook somewhere, but I'm not sure where to look for it or what I can even do in the mean time.  I'm also relatively new to <code>unittest.mock.patch()</code> so it's very possible that I'm doing something wrong there as well.</p>
<p>This is a Fusion360 add-in so it is using Fusion 360's packaged version of Python 3.3 - as far as I know it's a vanilla version (i.e. they don't roll their own) but I'm not positive of that.</p>
</div>
<div class="post-text" itemprop="text">
<p>I could reproduce the error with a minimal example:</p>
<p>foo.py:</p>
<pre><code>class MyError(Exception):
    pass

class A:
    def inner(self):
        err = MyError("FOO")
        print(type(err))
        raise err
    def outer(self):
        try:
            self.inner()
        except MyError as err:
            print ("catched ", err)
        return "OK"
</code></pre>
<p>Test without mocking :</p>
<pre><code>class FooTest(unittest.TestCase):
    def test_inner(self):
        a = foo.A()
        self.assertRaises(foo.MyError, a.inner)
    def test_outer(self):
        a = foo.A()
        self.assertEquals("OK", a.outer())
</code></pre>
<p>Ok, all is fine, both test pass</p>
<p>The problem comes with the mocks. As soon as the class MyError is mocked, the <code>expect</code> clause cannot catch anything and I get same error as the example from the question :</p>
<pre><code>class FooTest(unittest.TestCase):
    def test_inner(self):
        a = foo.A()
        self.assertRaises(foo.MyError, a.inner)
    def test_outer(self):
        with unittest.mock.patch('foo.MyError'):
            a = exc2.A()
            self.assertEquals("OK", a.outer())
</code></pre>
<p>Immediately gives :</p>
<pre><code>ERROR: test_outer (__main__.FooTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "...\foo.py", line 11, in outer
    self.inner()
  File "...\foo.py", line 8, in inner
    raise err
TypeError: exceptions must derive from BaseException

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;pyshell#78&gt;", line 8, in test_outer
  File "...\foo.py", line 12, in outer
    except MyError as err:
TypeError: catching classes that do not inherit from BaseException is not allowed
</code></pre>
<p>Here I get a first <code>TypeError</code>that you did not have, because I am raising a mock while you forced a true exception with <code>'requests.exceptions.ConnectionError': requests.exceptions.ConnectionError</code> in config. But the problem remains that <strong>the <code>except</code> clause tries to catch a mock</strong>.</p>
<p>TL/DR: as you mock the full <code>requests</code> package, the <code>except requests.exceptions.ConnectionError</code> clause tries to catch a mock. As the mock is not really a <code>BaseException</code>, it causes the error.</p>
<p>The only solution I can imagine is not to mock the full <code>requests</code> but only the parts that are not exceptions. I must admit I could not find how to say to mock <em>mock everything except this</em> but in your example, you only need to patch <code>requests.head</code>. So I think that this should work :</p>
<pre><code>def test_bad_connection(self):
    with mock.patch('path.to.my.package.requests.head',
                    side_effect=requests.exceptions.ConnectionError):
        self.assertEqual(
            mypackage.myMethod('some_address',
            mypackage.successfulConnection.FAILURE
        )
</code></pre>
<p>That is : only patch the <code>head</code> method with the exception as side effect.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just ran into the same issue while trying to mock <code>sqlite3</code> (and found this post while looking for solutions).</p>
<p>What <a href="https://stackoverflow.com/a/31873937/27088" title="Serge">Serge</a> said is correct:  </p>
<blockquote>
<p>TL/DR: as you mock the full requests package, the except requests.exceptions.ConnectionError clause tries to catch a mock. As the mock is not really a BaseException, it causes the error. </p>
<p>The only solution I can imagine is not to mock the full requests but only the parts that are not exceptions. I must admit I could not find how to say to mock <em>mock everything except this</em> </p>
</blockquote>
<p>My solution was to mock the entire module, then set the mock attribute for the exception to be equal to the exception in the real class, effectively "un-mocking" the exception.  For example, in my case:</p>
<pre><code>@mock.patch(MyClass.sqlite3)
def test_connect_fail(self, mock_sqlite3):
    mock_sqlite3.connect.side_effect = sqlite3.OperationalError()
    mock_sqlite3.OperationalError = sqlite3.OperationalError
    self.assertRaises(sqlite3.OperationalError, MyClass, self.db_filename)
</code></pre>
<p>For <code>requests</code>, you could assign exceptions individually like this:</p>
<pre><code>    mock_requests.exceptions.ConnectionError = requests.exceptions.ConnectionError
</code></pre>
<p>or do it for all of the <code>requests</code> exceptions like this:</p>
<pre><code>    mock_requests.exceptions = requests.exceptions
</code></pre>
<p>I don't know if this is the "right" way to do it, but so far it seems to work for me without any issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>For those of us who need to mock an exception and can't do that by simply patching <code>head</code>, here is an easy solution that replaces the target exception with an empty one:</p>
<p>Say we have a generic unit to test with an exception we have to have mocked:</p>
<pre><code># app/foo_file.py
def test_me():
    try:
       foo()
       return "No foo error happened"
    except CustomError:  # &lt;-- Mock me!
        return "The foo error was caught"
</code></pre>
<p>We want to mock <code>CustomError</code> but because it is an exception we run into trouble if we try to patch it like everything else. Normally, a call to <code>patch</code> replaces the target with a <code>MagicMock</code> but that won't work here. Mocks are nifty, but they do not behave like exceptions do. Rather than patching with a mock, let's give it a stub exception instead. We'll do that in our test file.</p>
<pre><code># app/test_foo_file.py
from mock import patch


# A do-nothing exception we are going to replace CustomError with
class StubException(Exception):
    pass


# Now apply it to our test
@patch('app.foo_file.foo')
@patch('app.foo_file.CustomError', new_callable=lambda: StubException)
def test_foo(stub_exception, mock_foo):
    mock_foo.side_effect = stub_exception("Stub")  # Raise our stub to be caught by CustomError
    assert test_me() == "The error was caught"

# Success!
</code></pre>
<p>So what's with the <code>lambda</code>? The <code>new_callable</code> param calls whatever we give it and replaces the target with the return of that call. If we pass our <code>StubException</code> class straight, it will call the class's constructor and patch our target object with an exception <em>instance</em> rather than a <em>class</em> which isn't what we want. By wrapping it with <code>lambda</code>, it returns our class as we intend.</p>
<p>Once our patching is done, the <code>stub_exception</code> object (which is literally our <code>StubException</code> class) can be raised and caught as if it were the <code>CustomError</code>. Neat!</p>
</div>
<div class="post-text" itemprop="text">
<p>I faced a similar issue while trying to mock the <a href="https://github.com/amoffat/sh" rel="nofollow noreferrer">sh</a> package. While sh is very useful, the fact that all methods and exceptions are defined dynamically make it more difficult to mock them. So following the recommendation of the <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow noreferrer">documentation</a>:</p>
<pre><code>import unittest
from unittest.mock import Mock, patch


class MockSh(Mock):
    # error codes are defined dynamically in sh
    class ErrorReturnCode_32(BaseException):
        pass

    # could be any sh command    
    def mount(self, *args):
        raise self.ErrorReturnCode_32


class MyTestCase(unittest.TestCase):
    mock_sh = MockSh()

    @patch('core.mount.sh', new=mock_sh)
    def test_mount(self):
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just ran into the same problem when mocking <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a>.</p>
<p>I get the error:</p>
<blockquote>
<p>TypeError: catching classes that do not inherit from BaseException is not allowed</p>
</blockquote>
<p>When trying to catch a <code>struct.error</code> raised from <code>struct.unpack</code>.</p>
<p>I found that the simplest way to get around this in my tests was to simply set the value of the error attribute in my mock to be <code>Exception</code>. For example</p>
<p>The method I want to test has this basic pattern:</p>
<pre><code>def some_meth(self):
    try:
        struct.unpack(fmt, data)
    except struct.error:
        return False
    return True
</code></pre>
<p>The test has this basic pattern.</p>
<pre><code>@mock.patch('my_module.struct')
def test_some_meth(self, struct_mock):
    '''Explain how some_func should work.'''
    struct_mock.error = Exception
    self.my_object.some_meth()
    struct_mock.unpack.assert_called()
    struct_mock.unpack.side_effect = struct_mock.error
    self.assertFalse(self.my_object.some_meth()
</code></pre>
<p>This is similar to the approach taken by @BillB, but it is certainly simpler as I don't need to add imports to my tests and still get the same behavior. To me it would seem this is the logical conclusion to the general thread of reasoning in the answers here.</p>
</div>
<span class="comment-copy">FWIW I was able to work around this by using <a href="http://stackoverflow.com/a/28507806/3076272">stackoverflow.com/a/28507806/3076272</a>, but I'd rather find out why this was happening.</span>
<span class="comment-copy">Is <code>requests</code> here your own module or is it the  <code>requests</code> module from <a href="http://www.python-requests.org/" rel="nofollow noreferrer">python-requests.org</a> ?</span>
<span class="comment-copy">The one from python-requests.org</span>
<span class="comment-copy">awesome detailed answer! +1!</span>
<span class="comment-copy">Fantastic answer, wish I could give more upvotes.</span>
<span class="comment-copy">You can also set the right exception to your mock: <code>from requests.exceptions import COnnectionError; mocked_requests.exceptions.ConnectionError = ConnectionError</code></span>
<span class="comment-copy">Out of curiosity, why would you ever need to mock an exception?</span>
<span class="comment-copy">@Dannnno: Good question. We'd mock an exception for the same reason we mock anything -- to prevent its logic from running in our unit test. Normally, exceptions just inherit the base exception class and don't do anything else. In this case mocking them is pointless because the exception we pull out and the exception we replace it with are logically identical, but every now and then someone builds an exception that does have some logic and, in that rare case, it's nice to be able to mock it out.</span>
<span class="comment-copy">I'm just having a really hard time imagining a situation where an exception should he doing any logic that is worth mocking. If possible could you expand on what's happening? I'm actually working on a patch for this issue and if I were able to give a justifying reason for it that would help a lot.</span>
<span class="comment-copy">Ultimately, your imagination is right. There really isn't a good reason an error based exception should have logic worth stubbing -- that should be handled in the try block imo. But sometimes you get to work with other folk's code who don't understand the principle of separation of concerns.   If the exception is not worth mocking/stubbing, then I would import the exception into my test file, raise it with mock's <code>side_effect</code> and either let the unit catch the exception or assert it was uncaught with <code>self.assertRaises</code>.</span>
<span class="comment-copy">I think it is worth mentioning, though, that <code>raise</code>'s main function is to work with an <code>Exception</code> class to exit the call stack -- which doesn't necessarily mean an error occurred. Some libraries (usually web frameworks) take advantage of this behavior to control the flow of the program on a higher level than just <code>if</code> and <code>while</code>. In these cases, there is often logic worth avoiding in a unit test</span>
