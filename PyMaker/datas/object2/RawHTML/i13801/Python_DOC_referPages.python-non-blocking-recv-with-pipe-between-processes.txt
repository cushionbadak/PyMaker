<div class="post-text" itemprop="text">
<p>Seen this line of code but could not find documentation</p>
<pre><code>self.conn.setblocking(0)
</code></pre>
<p>The question is, how do you poll a pool of pipes without blocking?
Got a parent process that needs to communicate with some unstable child processes and wish to poll and check periodically if they've something to say. Do not wish to block if they decide they need more time before they have something new to say. Will this magically do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is most likely what you were looking at: <a href="https://docs.python.org/2/library/socket.html#socket.socket.setblocking" rel="nofollow">https://docs.python.org/2/library/socket.html#socket.socket.setblocking</a></p>
<p>You don't give much detail so I'm not exactly sure what you are trying to do, but usually when you have a number of sockets that you want to poll, you will use <a href="https://docs.python.org/2/library/select.html#select.select" rel="nofollow">select</a> (see these <a href="http://pymotw.com/2/select/" rel="nofollow">examples</a> from PyMOTW).</p>
</div>
<div class="post-text" itemprop="text">
<p>Creating a pipe will return two connection objects. A connection object offers the polling functionality, where you can check if there is anything to read. Polling functionality allows you to specify a timeout to wait for.</p>
<p>If you have a group of connection objects that you are waiting on, then you can use multiprocessing.connection.wait(), or the non-multiprocessing version of it. </p>
<p>For details , see 
<a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Connection" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Connection</a>
which will show you the connection object details. Look at the poll function</p>
</div>
<span class="comment-copy">Is a pipe between processes a socket as well?</span>
<span class="comment-copy">Not sure which pipes you are talking about, but that is a socket function so self.conn is almost certainly a socket.  Most "pipes" will be implemented underneath by some sort of socket too.</span>
<span class="comment-copy">Ended up using select and it works perfectly with pipes for our needs</span>
<span class="comment-copy">I would upvote this if someone could provide some minimum example code. Getting an error on windows and the documentation is conflicted (some places says select works on win but poll doesn't, some places says unix only for all). If we had some known working code I could check to see if it's a platform issue or what I'm missing :)</span>
