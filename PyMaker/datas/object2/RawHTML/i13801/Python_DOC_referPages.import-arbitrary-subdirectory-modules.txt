<div class="post-text" itemprop="text">
<p>Present situation:</p>
<ul>
<li>I have a script: <code>program.py</code>.</li>
<li>I have a directory: <code>/imports</code>. Which contains an arbitrary amount of modules in subdirectories.</li>
<li><p>Python's package directory syntax is being used.</p>
<pre><code>__init__.py
program.py
/imports
    __init__.py
    /module a
        __init__.py
        other_files.py
    /module b
        __init__.py
        other
</code></pre></li>
</ul>
<p></p>
<p>Intention:</p>
<ul>
<li><code>program.py</code> should import every subdirectory in <code>/imports</code>.</li>
<li><code>program.py</code> needs object access to the modules. For example, <code>imports['name'].Service()</code>.</li>
</ul>
<p></p>
<p>Remark: I don't feel like illustrating my purpose or questioning the design choice. I'm using the above workaround.<br/>
The problem is described below.</p>
<p>Â </p>
<p><strong>The existing code:</strong></p>
<pre><code>import os


modules = []
IMPORT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'imports')
to_import = [name for name in os.listdir(IMPORT_PATH) if os.path.isdir(os.path.join(IMPORT_PATH, name))]
modules = [__import__('imports.' + x) for x in to_import]
print modules
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[&lt;module 'imports' from '/code/test/imports/__init__.pyc'&gt;, &lt;module 'imports' from '/code/test/imports/__init__.pyc'&gt;]
</code></pre>
<p><strong>Desired output:</strong></p>
<pre><code>[&lt;module 'B' from '/code/test/imports/B'&gt;, &lt;module 'C' from '/code/test/imports/C'&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Problem identified: The <code>fromlist=[]</code> argument for <code>__import__()</code> is missing. See <a href="https://stackoverflow.com/q/2724260/2825347">Why does Python's __import__ require fromlist?</a> for elaboration.</p>
<p><strong>Corrected example:</strong></p>
<pre><code>modules = {}
IMPORT_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'imports')
to_import = [name for name in os.listdir(IMPORT_PATH) if os.path.isdir(os.path.join(IMPORT_PATH, name))]
for x in to_import:
    modules[x] = __import__('imports.' + x, fromlist=['*'])
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'C': &lt;module 'imports.C' from '/code/test/imports/C/__init__.pyc'&gt;, 
'B': &lt;module 'imports.B' from '/code/test/imports/B/__init__.pyc'&gt;}
</code></pre>
<p><strong>Achieved result:</strong></p>
<ul>
<li>Now <code>modules[dir_name].Service()</code> can be used in <code>program.py</code>.</li>
</ul>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer"><code>__import__</code></a></span>
<span class="comment-copy">import x wouldn't work because import doesnt take a variable. Try <code>__import__</code> or using <code>importlib.import_module</code></span>
