<div class="post-text" itemprop="text">
<p>I am using Django 1.8. I wrote the following code to test that a <code>pre_save</code> hook works correctly, but this code seems very inelegant. Is this the "proper way" to write this type of unit test?</p>
<pre><code>class PreSaveTests(TestCase):
    def test_pre_save_hook(self):
        person = Person(name="Joe")
        person.save()
        person2 = Person.objects.get(pk = person.pk)
        # Confirm that the pre_save hook ran.
        # The hook sets person.is_cool to True.
        self.assertEqual(person2.is_cool, True)
</code></pre>
<p>This works fine, but it seems ugly.</p>
<p>The really ugly part is that <code>person</code> and <code>person2</code> are the same database object. The only difference is that <code>person2</code> was retrieved from the database.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're doing in your test is perfectly fine. You can however simplify / improve it a little in my opinion.</p>
<p>I think you should use factories (you can use <code>FactoryBoy</code>). This way you won't have to update your test when you add/remove mandatory fields on your model. Also, you can remove irrelevant information from your test. In this case, the fact that the person name is <code>Joe</code> is completely irrelevant.</p>
<p>You can replace:</p>
<pre><code>person = Person(name="Joe")
person.save()
</code></pre>
<p>with:</p>
<pre><code>person = PersonFactory.create()
</code></pre>
<p>As Daniel mentioned, you don't need to reload the Person instance. So you don't have to do this:</p>
<pre><code>person2 = Person.objects.get(pk = person.pk)
</code></pre>
<p>Finally, a small tip, you can use <code>assertTrue</code> instead of <code>assertEquals(something, True)</code>:</p>
<pre><code>class PreSaveTests(TestCase):

    def test_pre_save_hook(self):
        person = PersonFactory.create()
        self.assertTrue(person.is_cool)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, I'm not sure why you think that's ugly: seems a perfectly reasonable way to test this functionality.</p>
<p>However, you could definitely make it simpler. Although Django instances don't have identity - that is, two instances retrieved from the database separately won't share modifications until they are saved and retrieved - when the pre-save hook runs, it modifies the existing instance. So in fact <code>person</code> <em>will</em> get the modification to set <code>is_cool</code>, so there is no need to retrieve and check <code>person2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could directly check the property in the query, without actually getting an object:</p>
<pre><code>class PreSaveTests(TestCase):
    def test_pre_save_hook(self):
        person = Person(name="Joe")
        person.save()
        # Confirm that the pre_save hook ran.
        # The hook sets person.is_cool to True.
        self.assertTrue(
            Person.objects.filter(pk = person.pk, is_cool=True).exists()
        )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that's a good way to test simple functionality. However, a "by the book" unit test would be better defined by mocking the database functionality. 
This way you can unit test your methods without caring about what the database is doing. </p>
<p>I normally do this with the mock library (included in 3.x). Without going into much detail as it's has been described in other answers, you can use a patch to mock the model you're testing (Person) and then make it return something.</p>
<p>Take a look at mock-django as well, it provides lots of functionality related to this, <a href="https://pypi.python.org/pypi/mock-django" rel="nofollow">https://pypi.python.org/pypi/mock-django</a> and here <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">https://docs.python.org/3/library/unittest.mock.html</a></p>
<p>I can't test this (and I'll make it more explicit that I'd normally) for Python 3. Inside a unittest class, you can create a test like this.</p>
<pre><code># first patch your class
@patch('my_app_name.models.Person')
def test_my_person(self, person_mock)
    person_mock.objects = MagicMock()
    person_mock.objects.configure_mock(get.return_value='guy_number_1')
    # then you can test your method. For example if your method change the guy name.
    self.assertEquals(my_method('guy_number_1'), 'GUY_NUMBER_1')
</code></pre>
<p>The code is not the best but the idea is that you're mocking the database, so if your database connection brakes, your unittest don't (as it should be because you aren't testing Django functionality nor your database connection).</p>
<p>This has been useful for me when doing automatic building and testing without having to deploy a test database. Then you can add integration tests to cover your database functionality.</p>
<p>I'll extend the explanation if it isn't clear enough.</p>
<p>Useful things sometimes overlooked in mock are the configure method, side_effect for mocking exceptions and sometimes you will need to reload your module to apply the patches.</p>
</div>
<span class="comment-copy">Unless you want to verify that you didn't accidentally implemented a <a href="https://docs.djangoproject.com/en/1.8/ref/signals/#post-save" rel="nofollow noreferrer">post-save</a> hook (that'd affect <i>only</i> the instance, I'd assume) instead of a pre-save hook.</span>
<span class="comment-copy">das-g has correctly figured out why I load person2 from the database. I want to be <i>sure</i> the change is in the database, not just on the Python object. Using a post_save hook accidentally would be unlikely, but maybe there is some other strange error that will cause this unit test to fail. I want the unit test to be thorough, I want it to catch errors that I can only barely imagine.</span>
<span class="comment-copy">In some cases this could be a valid point. Why did it get down-voted?</span>
<span class="comment-copy">@zoom-pro Could you show some code for that particular example? You would mock the <code>save()</code> method and make it call the <code>pre_save</code> hook? In that case won't the test test nothing at all? ex: the hook could be removed and the tests would still pass...</span>
<span class="comment-copy">@zoom-pro thanks. So you would test directly the method called before saving without hitting the database - which is great - but the issue remains: if the hook is removed, that test would still pass. Also, if the value doesn't fit the is_cool constraints, the test will pass as well. I don't see a point having that unit test + an integration test.</span>
<span class="comment-copy">"if your database connection brakes, your unittest don't" =&gt; have you ever had such an issue?</span>
<span class="comment-copy">Most of the time happens when doing automatic building, testing, deployment. The most typical one is that psycopg2 fails to install (it's quite fragile). Then, it's quite handy to be able to run your unittests regardless from what the db is doing so you can quickly debug the issue.</span>
<span class="comment-copy">Oh I see - well in most cases you probably want to use SQLite, no?</span>
