<div class="post-text" itemprop="text">
<p>When I use WTForms to define a form, I can add a <code>validate_&lt;field name&gt;</code> method to the subclass, and WTForms knows to use it to validate the named field.  I find this interesting because the name of the method depends on the name of the field class attribute.  How does it figure this out?</p>
<pre><code>class UploadForm(Form):
    image = FileField("image file")
    submit = SubmitField("Submit")

    def validate_image(self,field):
        if field.data.filename[-4:].lower() != ".jpg":
            raise ValidationError("nope not allowed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>WTForms inspects the class when it is called (calling a class creates an instance: <code>form = Form()</code>) and records the fields and their names.  Then during validation, it looks if the instance has a method <code>validate_&lt;field_name&gt;</code>.</p>
<p>Within <a href="https://github.com/wtforms/wtforms/blob/2.0.2/wtforms/form.py#L195-L199" rel="nofollow"><code>FormMeta.__call__</code></a>, it uses the <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow"><code>dir</code></a> function to list the names defined on the class object and record the fields.</p>
<pre><code>for name in dir(cls):  # look at the names on the class
    if not name.startswith('_'):  # ignore names with leading _
        unbound_field = getattr(cls, name)  # get the value
        if hasattr(unbound_field, '_formfield'):  # make sure it's a field
            fields.append((name, unbound_field))  # record it
</code></pre>
<p>Within <a href="https://github.com/wtforms/wtforms/blob/2.0.2/wtforms/form.py#L305-L308" rel="nofollow"><code>Form.validate</code></a> it uses the <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow"><code>getattr</code></a> function to try to get the value of the name <code>validate_&lt;field name&gt;</code> for each field it recorded.</p>
<pre><code>for name in self._fields:  # go through recorded field names
    # get method with name validate_&lt;field name&gt; or None
    inline = getattr(self.__class__, 'validate_%s' % name, None)
    if inline is not None:  # if there is such a method record it
        extra[name] = [inline]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All members of all Python types are actually hashtables (<code>dict</code>s) and all type information is reified at runtime. So you can inspect any Python class from code.</p>
<p>As a quick interactive example:</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...   my_attribute = 'Something'
... 
&gt;&gt;&gt; dir(Foo)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'my_attribute']
&gt;&gt;&gt; Foo.__dict__
dict_proxy({'__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__module__': '__main__', 'my_attribute': 'Something', '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;, '__doc__': None})
&gt;&gt;&gt; [x for x in Foo.__dict__ if not x.startswith('__')]
['my_attribute']
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Not sure if this is how Flask is doing it per se, but look at <a href="https://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a>.</span>
<span class="comment-copy">have you tried flask-wtforms? is this how they do it?</span>
<span class="comment-copy">@Zion: I don't know if this is how Flask actually does it. But the point is that all the type information is there at runtime. As I understand it, the question you asked isn't "how does Flask do this?" it's "how do web frameworks <b>like</b> Flask know names of user defined class attributes?" The answer, simply put, is because names of user defined class attributes are part of the class object itself.</span>
<span class="comment-copy">my bad. my bad. yeah thank you for this.  this certainly has shed light on that mystery for me.</span>
