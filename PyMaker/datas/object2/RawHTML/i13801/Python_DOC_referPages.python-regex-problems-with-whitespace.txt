<div class="post-text" itemprop="text">
<p>I'm trying to do a python regular expression that looks for lines formatted as such ([edit:] without new lines; the original is all on one line):  </p>
<pre><code>&lt;MediaLine Label="main-video" xmlns="ms-rtcp-metrics"&gt;
  &lt;OtherTags...&gt;&lt;/OtherTags&gt;
&lt;/MediaLine&gt;
</code></pre>
<p>I wish to create a capture group of the body of this XML element (so the <code>OtherTags...</code>) for later processing.<br/>
Now the problem lies in the first line, where <code>Label="main-video"</code>, and I would like to not capture <code>Label="main-audio"</code></p>
<p>My initial solution is as such:</p>
<pre><code>m = re.search(r'&lt;MediaLine(.*?)&lt;/MediaLine&gt;', line)
</code></pre>
<p>This works, in that it filters out all other non-<code>MediaLine</code> elements, but doesn't account for video vs audio. So to build on it, I try simply adding  </p>
<pre><code>m = re.search(r'&lt;MediaLine Label(.*?)&lt;/MediaLine&gt;', line)
</code></pre>
<p>but this won't create a single match, let alone being specific enough to filter audio/video. My problem seems to come down to the space between <code>line</code> and <code>Label</code>. The two variations I can think of trying both fail:</p>
<pre><code>m = re.search(r'&lt;MediaLine L(.*?)&lt;/MediaLine&gt;', line)
m = re.search(r'&lt;MediaLine\sL(.*?)&lt;/MediaLine&gt;', line)
</code></pre>
<p>However, the following works, without being able to distinguish audio/video:  </p>
<pre><code>m = re.search(r'&lt;MediaLine\s(.*?)&lt;/MediaLine&gt;', line)
</code></pre>
<p>Why is the 'L' the point of failure? Where am I going wrong? Thanks for any help.</p>
<p>And to add to this preemptively, my goal is an expression like this:  </p>
<pre><code>m = re.search("&lt;MediaLine Label=\"main-video\"(?:.*?)&gt;(?P&lt;payload&gt;.*?)&lt;/MediaLine&gt;", line)
result = m.group('payload')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By default, <code>.</code> doesn’t match a newline, so your initial solution didn't work either.  To make <code>.</code> match a newline, you need to use the <a href="https://docs.python.org/3/library/re.html#re.DOTALL" rel="nofollow"><code>re.DOTALL</code></a> flag (aka <code>re.S</code>):</p>
<pre><code>&gt;&gt;&gt; m = re.search("&lt;MediaLine Label=\"main-video\"(?:.*?)&gt;(?P&lt;payload&gt;.*)&lt;/MediaLine&gt;", line, re.DOTALL)
&gt;&gt;&gt; m.group('payload')
'\n  &lt;OtherTags...&gt;&lt;/OtherTags&gt;\n'
</code></pre>
<p>Notice there’s also an extra <code>?</code> in the first group, so that it’s not greedy.</p>
<p>As another comment observes, the best thing to parse XML is an XML parser.  But if your particular XML is sufficiently strict in the tags and attributes that it has, then a regular expression can get the job done.  It will just be messier.</p>
</div>
<span class="comment-copy">Consider using XML parser instead.</span>
<span class="comment-copy">Unfortunately, these lines are all mixed in with thousands of other non-XML lines. I guess after the first match I could then try to parse the XML. I'll look into it. Thanks</span>
<span class="comment-copy">Thanks for the comment. In the actual file, this is all on one line, and there are no new-lines. The first solution did work. I'll update the question. Ignoring the new line problem, any tips? Thanks again.</span>
<span class="comment-copy">@JustinMcBride Make all the quantifiers lazy in the regex in your question.</span>
