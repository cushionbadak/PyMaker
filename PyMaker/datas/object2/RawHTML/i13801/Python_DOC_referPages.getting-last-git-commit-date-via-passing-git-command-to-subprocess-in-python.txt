<div class="post-text" itemprop="text">
<p>I have a script in which I just need to retrieve the date in the format <code>2015-07-28</code> of the last git commit. </p>
<p>but using <code>git log -1 --pretty=format:"%ci"</code> in terminal if I get <code>Tue Jul 28 16:23:24 2015 +0530</code> then if I am trying to </p>
<p>pass this as string to <code>subprocess.Popen</code> like </p>
<p><code>subprocess.Popen('git log -1 --pretty=format:"%cd"' shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE))</code></p>
<p>but this throws me error <code>TypeError: %c requires int or char</code> which I guess python things we are passing a char to %c while that was for getting date using git command.</p>
<p>I need this date to be concatenated to a string a my python script.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error message does not correspond to your code: the code in question would produce <code>SyntaxError</code>, not <code>TypeError</code>. </p>
<p>You don't need <code>shell=True</code>. To get git's output, you could use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output()</code> function</a>:</p>
<pre><code>from subprocess import check_output

date_string = check_output('git log -1 --pretty=format:"%ci"'.split()).decode()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code is missing <code>,</code>, and there is an extra <code>)</code>:</p>
<pre><code>proc = subprocess.Popen(
    'git log -1 --pretty=format:"%cd"',
    shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output = proc.stdout.read()
proc.wait()
</code></pre>
<p>After getting the output of the command, you can use <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime" rel="nofollow"><code>datetime.datetime.strptime</code></a> to convert the string to <code>datetime</code> object, and convert it to the  format you like using <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.strftime" rel="nofollow"><code>datetime.datetime.strftime</code></a>:</p>
<pre><code>import datetime
dt = datetime.datetime.strptime(output.rsplit(None, 1)[0], '%a %b %d %H:%M:%S %Y')
print(output)
print(dt.strftime('%Y-%m-%d'))
</code></pre>
</div>
<span class="comment-copy">There should be a comma before the <code>shell=True</code> in your call to <code>Popen</code>.</span>
<span class="comment-copy"><a href="http://gitpython.readthedocs.org/en/latest/reference.html#git.cmd.Git.execute" rel="nofollow noreferrer">gitpython.readthedocs.org/en/latest/â€¦</a> - try using this. It basically takes care of Popen, so all you have to do is providing command. GitPython seems to be a mature lib, and it is available on PyPI.</span>
<span class="comment-copy">what do you use <code>decode()</code> for ?</span>
<span class="comment-copy">@san: <code>.decode()</code> is used to decode bytes, to get Unicode string (Python 3 compatibility e.g., so that <code>print(date_string)</code> would produce <code>"2015-03-15 13:54:34 -0700"</code> instead of <code>b'"2015-03-15 13:54:34 -0700"'</code>)</span>
<span class="comment-copy">thank you , I see using <code>decode()</code> is very useful. I now have to update many places of the cakes I have baked in past.</span>
<span class="comment-copy">the code promotes bad practice: you don't need <code>shell=True</code>, don't use <code>std*=PIPE</code> unless you read from the pipe (use DEVNULL if you need to suppress the output instead), the return code should not be ignored, you don't need 3 function calls: <a href="http://stackoverflow.com/a/31763421/4279"><code>check_output()</code> makes appropriate calls for you.</a></span>
<span class="comment-copy">@J.F.Sebastian : just a quick one more question for my knowledge, when you said "unless you read from the pipe" What does pipe refers to? is it the buffer that holds information before its being passed from one process to other ?</span>
<span class="comment-copy">@san: yes, a pipe connects processes usually (one process writes, another process reads). Pipe is not a buffer but pipe <i>has</i> a buffer. Pipes are accessible from Python via <code>proc.stdout</code>, <code>proc.stderr</code> file objects. <code>proc.stdout.read()</code> reads from the pipe associated with git's stdout. <code>.communicate()</code> method, <code>check_output()</code> function read from the pipe implicitly.</span>
