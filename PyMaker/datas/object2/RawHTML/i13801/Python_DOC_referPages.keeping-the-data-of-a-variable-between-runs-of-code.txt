<div class="post-text" itemprop="text">
<p>For a school project I am making a hangman game in Python. Right now my code picks a word from a dictionary like so:</p>
<pre><code>WordList = ["cat", "hat", "jump", "house", "orange", "brick", "horse", "word"]
word = WordList[random.randint(0, len(WordList) - 1)]
</code></pre>
<p>right now the list of words has to be set within the code before running it, but I added the ability to add words to the list while running it:</p>
<pre><code>if command == "add":
    while True:
        print("type a word to add to the dictionary")
        print("type /b to go back to game")
        add = raw_input("word: ")

        if add != "/b":
            WordList = WordList + [add]

            print add, "added!"
        else:
            print("returning to game")
            break
</code></pre>
<p>however, once I exit the code, the added words are obviously not saved, so I would either have to manually add all the words to the list, or add a bunch of words to the list once the code starts every time. so I am wondering if there is a simple way that I can have the variable save after the code is finished, so that WordList will keep the added words next time the code starts. the program I use to write python is Jetbrains PyCharm, if that makes a difference. Apologies for any un-optimal code, I'm new to code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply pickle the data you want to keep persistent. Since your use case doesn't require very complex data storage, pickling is a very good option. A small example:</p>
<pre class="lang-py prettyprint-override"><code>import pickle

WordList = ["cat", "hat", "jump", "house", "orange", "brick", "horse", "word"]

# do your thing here, like
Wordlist.append("monty");

#open a pickle file
newfile = 'mypickle.pk'

with open(newfile, 'wb') as fi:
  # dump your data into the file
  pickle.dump(Wordlist, fi)
</code></pre>
<p>Later when you need to use it again, just load it up:</p>
<pre class="lang-py prettyprint-override"><code>#load your data back to memory when you need it
with open(newfile, 'rb') as fi:
  WordList = pickle.load(fi)
</code></pre>
<p>Ta-da! You have data persistence now. More reading <a href="https://docs.python.org/3/library/pickle.html" rel="noreferrer">here</a>. A few important pointers:</p>
<ol>
<li>Notice the <code>'b'</code> when I use <code>open()</code> to open a file. I like to use pickle files as binaries. This helps avoid problems with some complex object structures when you pickle them.</li>
<li>I used the <code>with</code> command. This ensures that a file is safely closed once all my work with the file is done. This helps prevent my pickles being accidentally accessed or overwritten.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You have to use persistent storage: write the words in a file when you add them and retrieve them from this file when the program starts.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you exit the code you stop the process. For this reason you lose all data. You have to add the words keeping the script alive. The suggestion is to use a server that processing all your calls (example: <a href="http://flask.pocoo.org/" rel="nofollow">http://flask.pocoo.org/</a>) or to use the python command <strong>input</strong> (<a href="https://en.wikibooks.org/wiki/Python_Programming/Input_and_Output" rel="nofollow">https://en.wikibooks.org/wiki/Python_Programming/Input_and_Output</a>).</p>
<p>But remember... if you stop the process you lose all data, it is normal.</p>
<p>Otherwise, before stopping your script, you have to save all the data into a file or database and load them when the script starts.</p>
</div>
<span class="comment-copy"><code>raw_input</code> has been renamed to <code>input</code> in <code>Python3</code>. see <a href="https://www.python.org/dev/peps/pep-3111/" rel="nofollow noreferrer">python.org/dev/peps/pep-3111</a></span>
<span class="comment-copy">As an addition, I'm not sure how complicated this questions answer is, and I'm not sure if it merits its own question, but is there a way to use the code to "edit itself"? like, if i wanted to make the add function physically change the actual code, in the "WordList = " line, so that rather than saving the variable, it changes the text in the actual code.</span>
<span class="comment-copy">Thanks, this was exactly what I was looking for! you were a great help.</span>
<span class="comment-copy">Can you remove the semi-colon after the append statement? Also, avoid using uppercase for names in python.</span>
