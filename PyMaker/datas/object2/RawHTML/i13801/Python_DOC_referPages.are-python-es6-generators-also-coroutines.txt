<div class="post-text" itemprop="text">
<p>My understanding of the generators in Python and ECMAScript is that they are more capable than ordinary generators. For example, both allow for values to passed back into the generator via <code>next()</code>, and they both allow yielding from another generator (<code>yield from</code> in Python and <code>yield *</code> in ES6), two things that aren't needed in generators.</p>
<p>So, given this extended functionality, are generators as implemented in Python and ES6 for all intents and purposes the same as coroutines? Are there any differences?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow">PEP 380</a> on <code>yield from</code>:</p>
<blockquote>
<p>A Python generator is a form of coroutine, but has the limitation that it can only yield to its immediate caller.</p>
</blockquote>
<p>From the <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">python docs on coroutines</a></p>
<blockquote>
<p>A coroutine is a generator that follows certain conventions. For
  documentation purposes, all coroutines should be decorated with
  @asyncio.coroutine, but this cannot be strictly enforced.</p>
</blockquote>
<p>Generators are a form of limited co-routine. The same should be true for the ES2015 generators.</p>
</div>
<span class="comment-copy">Notice that yielding from another generator is not really a feature; all generators can do this. <code>yield*</code> is just syntactic sugar.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/q/715758/1048572">Coroutine vs Continuation vs Generator</a></span>
