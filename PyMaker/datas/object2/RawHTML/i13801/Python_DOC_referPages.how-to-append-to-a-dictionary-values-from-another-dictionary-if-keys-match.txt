<div class="post-text" itemprop="text">
<p>let's say I have two dictionaries</p>
<pre><code>dict_1 ={'A': 'a', 'B':'b', 'C': 'c', 'D':'d', 'E':'e','F':f}
dict_2 ={'A': None, 'G': None, 'H': None, 'I': None,'L': None}
</code></pre>
<p>I'd like a function that returns the second dictionary as </p>
<pre><code>dict_2 ={'A': 'a', 'G': None, 'H': None, 'I': None,'L': None}
</code></pre>
<p>which is matching the keys of dict_1 against those in dict_2. If one matches replace the value in dict_2 with the value in dict_1 for that key. Otherwise nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to do this by iterating over <code>dict_2</code>'s items and using <code>dict_1.get()</code> providing default value as <code>dict_2</code> corresponding value -</p>
<pre><code>&gt;&gt;&gt; dict_1 ={'A': 'a', 'B':'b', 'C': 'c', 'D':'d', 'E':'e','F':f}
&gt;&gt;&gt; dict_2 ={'A': None, 'G': None, 'H': None, 'I': None,'L': None}
&gt;&gt;&gt; for k,v in dict_2.items():
...     dict_2[k] = dict_1.get(k,v)
...
&gt;&gt;&gt; dict_2
{'G': None, 'H': None, 'I': None, 'L': None, 'A': 'a'}
</code></pre>
<hr/>
<p>Same using dict comprehension -</p>
<pre><code>&gt;&gt;&gt; dict_1 ={'A': 'a', 'B':'b', 'C': 'c', 'D':'d', 'E':'e','F':f}
&gt;&gt;&gt; dict_2 ={'A': None, 'G': None, 'H': None, 'I': None,'L': None}
&gt;&gt;&gt; dict_2 = {k:dict_1.get(k,v) for k,v in dict_2.items()}
&gt;&gt;&gt; dict_2
{'G': None, 'H': None, 'I': None, 'L': None, 'A': 'a'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way is to find the common keys, and iterate over them like this:</p>
<pre><code>dict_1 ={'A': 'a', 'B':'b', 'C': 'c', 'D':'d', 'E':'e','F':f}
dict_2 ={'A': None, 'G': None, 'H': None, 'I': None,'L': None}

for key in set(dict_1.iterkeys()) &amp; set(dict_2.iterkeys()):
    dict_2[key] = dict_1[key]
</code></pre>
<p>This should be much less computational expensive if it's relatively few common entries compared to the total number of entries in the dictionaries.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use dict comprehension  and <code>if else</code> to do it :</p>
<pre><code>dict_1 ={'A': 'a', 'B':'b', 'C': 'c', 'D':'d', 'E':'e','F':f}
dict_2 ={'A': None, 'G': None, 'H': None, 'I': None,'L': None}
dict_2={a : dict_1[a] if a in dict_1 else dict_2[a] for a in dict_2.keys() }
print dict_2
</code></pre>
<p><strong>output:</strong></p>
<pre><code>{'A': 'a', 'H': None, 'I': None, 'L': None, 'G': None}
</code></pre>
<p>But this creates a new dict object  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>dict.viewkeys</code> to find the common keys:</p>
<pre><code>dict_1 ={'A': 'a', 'B':'b', 'C': 'c', 'D':'d', 'E':'e','F':'f'}
dict_2 ={'A': None, 'G': None, 'H': None, 'I': None,'L': None}

for k in dict_1.viewkeys() &amp; dict_2.viewkeys():
    dict_2[k] = dict_1[k]

print(dict_2)
{'A': 'a', 'H': None, 'I': None, 'L': None, 'G': None}
</code></pre>
<p>For python3 just use <code>.keys</code> as it returns a <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow">dictionary-view-object</a> not a list:</p>
<pre><code>for k in dict_1.keys() &amp; dict_2.keys():
    dict_2[k] = dict_1[k]

print(dict_2)
</code></pre>
</div>
<span class="comment-copy">This is by far the best answer.</span>
