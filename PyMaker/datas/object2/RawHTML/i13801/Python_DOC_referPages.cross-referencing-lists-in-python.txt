<div class="post-text" itemprop="text">
<p>I am trying to make a function that takes an input, compares that input to a list of lists and returns an item from another list with the same number of objects.</p>
<p>Example:</p>
<pre><code>list_1=[[1,2,3],[4,5],[6,7,8]]

list_2=['a','b','c']
</code></pre>
<ul>
<li><p>If <code>input</code> is 1, 2 or 3 function returns <code>'a'</code></p></li>
<li><p>If <code>input</code> is 4 or 5 function returns <code>'b'</code></p></li>
<li><p>If <code>input</code> is 6, 7 or 8 function returns <code>'c'</code></p></li>
</ul>
<p>I'm new to python and have been thinking about the problem for a while and looking around for clues with no results. Any tips/clues that might help me figure this out would be appreciated! Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can loop through each list in <code>list_1</code> and check if the input is in one. If it is, you can print the corresponding index of <code>list_2</code> (assuming it is composed only of single values), which you obtain by using enumerate in the loop.</p>
<pre><code>input = 1
for idx,i in enumerate(list_1):
    if input in i:
        return list_2[idx]
</code></pre>
<p>In this case, I returned <code>'a'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a> is a function that combines ("zips together") lists.</p>
<p>It will generate pairs from each list:</p>
<pre><code>&gt;&gt;&gt; combined = zip(list_1, list_2)
[([1, 2, 3], 'a'), ([4, 5], 'b'), ([6, 7, 8], 'c')]
&gt;&gt;&gt; test_key = 5
&gt;&gt;&gt; for keys, value in combined:
...     if test_key in keys:
...          print value
'b'
</code></pre>
<p>Additional preprocessing would let you look up the value directly. For example, you could write all the keys (from the first list) for a given value (from the second list) into a <code>dict</code>.</p>
<pre><code>&gt;&gt;&gt; value_dict = {}
&gt;&gt;&gt; for keys, value in combined:
...     for key in keys:
...         value_dict[key] = value
&gt;&gt;&gt; value_dict
{1: 'a', 2: 'a', 3: 'a', 4: 'b', 5: 'b', 6: 'c', 7: 'c', 8: 'c'}
&gt;&gt;&gt; value_dict[5]
'b'
&gt;&gt;&gt; value_dict.get(42, "not found")
"not found"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The function:</p>
<pre><code>def find_list_two_value(value, list_1, list_2):
    for i in list_1:
        if value in i:
            return list_2[list_1.index(i)]
    return none
</code></pre>
<p><em>note: you may want to add some error handling to it. <a href="https://docs.python.org/2/library/exceptions.html#exceptions.IndexError" rel="nofollow">Index Error</a></em></p>
<p>Test run: </p>
<pre><code>list_1 = [[1,2,3],[4,5],[6,7,8]]
list_2 = ['a','b','c']
print find_list_two_value(6, list_1, list_2)

output: c
</code></pre>
<p>Docs:
<a href="https://wiki.python.org/moin/ForLoop" rel="nofollow">For loop</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To be more flexible, you could make an alphabet list (at least for this example) at the beginning of the function. </p>
<pre><code>def crossRef(inList, inputNum):
    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
                'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 
                's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

    i = 0
    for listItem in inList:
        if inputNum in listItem:
            return alphabet[i]
        i += 1
    return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do what you're looking for:</p>
<pre><code>def crossReferenceInLists(input, list1, list2):
    for index, item in enumerate(list1):
        if input not in item:
            continue

        try:
            return list2[index]
        except IndexError:
            return None

    return None


print(crossReferenceInLists(2, [[1, 2, 3], [4, 5], [6, 7, 8]], ['a', 'b', 'c']))
print(crossReferenceInLists(7, [[1, 2, 3], [4, 5], [6, 7, 8]], ['a', 'b', 'c']))
</code></pre>
<blockquote>
<p>$ python so.py</p>
<p>a</p>
<p>c</p>
</blockquote>
</div>
<span class="comment-copy">Are those numbers always the same?  Are they static variables?</span>
<span class="comment-copy">In this scenario the lists will contain static variables.</span>
<span class="comment-copy">This is fantastic! Very concise and does exactly what I had in mind.</span>
<span class="comment-copy">This is very good. I removed the list_1 and list_2 from the input and defined them globally. I had also intended to add error handling like in your note. Thanks!</span>
