<div class="post-text" itemprop="text">
<p>Recently, I learned art of string formatting in Python 2.7.
I decided to play with floating point numbers. <br/>
Came across an awkward looking solution, as written below.<br/></p>
<pre><code>print "%.0f"%45.5000000 #46
print "%.0f"%0.5000000 #0

#Why??
</code></pre>
<p>BUT</p>
<pre><code>print int(round(45.5000000)) #46
print int(round(0.5000000)) #1
</code></pre>
<p>Please help me understand, why this behavior is shown by <code>%f</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The internal implementation for the <code>%.0f</code> string format uses a <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even" rel="nofollow">round-half-even</a> rounding mode.</p>
<p>In Python 2, the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow"><code>round()</code></a> function uses <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero" rel="nofollow">round-away-from-zero</a>.  In Python 3, that <a href="https://docs.python.org/3/whatsnew/3.0.html#builtins" rel="nofollow">was changed</a> to round-half-even making it consistent with string formatting.</p>
<p>FWIW, the <a href="https://docs.python.org/3/library/decimal.html#module-decimal" rel="nofollow">decimal module</a> offers you a choice of rounding modes if you want more control than afforded by <code>round()</code> or by string formatting.  The <a href="https://docs.python.org/3/library/decimal.html#rounding-modes" rel="nofollow">decimal rounding modes</a> are: ROUND_05UP ROUND_CEILING ROUND_DOWN ROUND_FLOOR ROUND_HALF_DOWN ROUND_HALF_EVEN ROUND_HALF_UP ROUND_UP. </p>
</div>
<span class="comment-copy">Can you explain "round-half-even" some more? In particular, why it produces the OPs results.</span>
<span class="comment-copy">@Quirliom <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even" rel="nofollow noreferrer">en.wikipedia.org/wiki/Rounding#Round_half_to_even</a></span>
<span class="comment-copy">@Quirliom look up "bankers rounding", by rounding .5 to the nearest even number will average the sum of all the rounded values to be most correct. If they all rounded up over millions of transactions the sum would have a lot of error</span>
