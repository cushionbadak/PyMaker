<div class="post-text" itemprop="text">
<p>I'm trying to program a calculator in python for a while now and there is a problem with my entry that I can't solve it although I don't see any problem with it. </p>
<p>so here is an example for my code: </p>
<pre><code>from Tkinter import *

window =Tk()
window.title("Calculator")
#creating an entry
string=StringVar
entry = Entry(window, width=40,textvariable=string )
entry.grid(row=0, column=0, columnspan=6, ipady=10)
entry.focus()


#basically I have a function for creating buttons but here I will do it the traditional way.

num_one=Button(window,text="1",width=2,height=2,padx=20,pady=20,)
num_one.grid(row=1,column=0,padx=1,pady=1)

#crating an index for the calculator
index=0
#creating a function to insert the number one to the entry in the index position and then add one to the index

def print_one(index):
    entry.insert(index,"1")

binding the num_one button to the function above

num_one.bind("Button-1",print_one(index))
</code></pre>
<p>Now the problem is that the string "1" should be entered to the entry only if I click n the num_one button, but when I start the program automatically the number "1" goes into the entry.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lots of issues that I noticed in your code -</p>
<ol>
<li><p><code>string=StringVar</code> - You need to call it like <code>StringVar()</code> , otherwise you are just setting <code>StringVar</code> class (not its object) to `string.</p></li>
<li><p>When you do -</p>
<pre><code>num_one.bind("Button-1",print_one(index))
</code></pre>
<p>You actually call the function first and bind the return value , you should instead bind the function object (without calling it) , Example -</p>
<pre><code>num_one.bind("&lt;Button-1&gt;",print_one)
</code></pre></li>
<li><p>For binding the function to left mouse click, you need to bind to <code>&lt;Button-1&gt;</code> (notice the <code>&lt;</code> and <code>&gt;</code> at the ends) not <code>Button-1</code> .</p></li>
<li><p>In your function, the first parameter you will recieve (the function that is bound) is the event object , not the next index. You can instead use something like -</p>
<pre><code>string.set(string.get() + "1")
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>As Anand says, there are various problems with your current code, both in the syntax &amp; the design.</p>
<p>I'm not sure why you want to track the Entry's index yourself, since the Entry widget already does that. To insert text at the current cursor position you can use <code>Tkinter.INSERT</code> in the <code>entry.insert()</code> method call.</p>
<p>It looks like you intend to write a separate callback function for each of the number buttons. That's unnecessary, and it could get messy.</p>
<p>The code below shows a way to use a single callback function for multiple buttons. We attach the button's number as an attribute to the button itself. The callback function can easily access that number because the Event object argument that the callback is called with contains the widget that activated it as an attribute.</p>
<p>Note that my code uses <code>import Tkinter as tk</code> rather than <code>from Tkinter import *</code>. Sure, it makes the code a little more long-winded, but it prevents name collision. </p>
<pre><code>import Tkinter as tk

window = tk.Tk()
window.title("Calculator")

entry_string = tk.StringVar()
entry = tk.Entry(window, width=40, textvariable=entry_string)
entry.grid(row=0, column=0, columnspan=6, ipady=10)
entry.focus()

def button_cb(event):
    entry.insert(tk.INSERT, event.widget.number)

for i in range(10):
    y, x = divmod(9 - i, 3)
    b = tk.Button(window, text=i, width=2, height=2, padx=20, pady=20)
    b.grid(row=1+y, column=2-x, padx=1, pady=1)
    #Save this button's number so it can be accessed in the callback
    b.number = i
    b.bind("&lt;Button-1&gt;", button_cb)

window.mainloop()
</code></pre>
<p>Ideally, GUI code should go into a class, as that makes it easier for the widgets to share data, and it tends to make the code neater.</p>
</div>
<span class="comment-copy">thank you! I didn't understood your explanation in number 4. can you try explain it again to me?</span>
<span class="comment-copy">Check here - <a href="http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm" rel="nofollow noreferrer">effbot.org/tkinterbook/tkinter-events-and-bindings.htm</a> You do not get <code>index</code> as the first parameter when the button is clicked. Instead you can get the data and then set it back after adding <code>1</code> .</span>
<span class="comment-copy">thanks man! fixed the problem! in the function I needed to give it "event" as a parameter and then declare index as a global variable insert the number one to the entry and add one to the index.</span>
<span class="comment-copy">Ok cool, also, if the answer was helpful for you . I would like to advice you  to accept the answer (by clicking on the tick mark on the left side of the answer) , it would be helpful for the community.</span>
<span class="comment-copy">sure man :) thank you!</span>
<span class="comment-copy">Wow man that is really make the code much easier! the only thing I don't recognize in your code is divemode(). what does it do with the values inside?</span>
<span class="comment-copy">@TheTechGuy: <code>divmod()</code> is a built-in function that does integer division. It returns the quotient and remainder as a tuple. See the official Python <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer">functions</a> docs for more info.</span>
