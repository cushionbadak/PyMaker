<div class="post-text" itemprop="text">
<p>When I run this in terminal, I never see anything until 30 seconds after starting when it prints:</p>
<pre><code>killed 9
</code></pre>
<p>After the first time, I added the <code>print(i)</code> to <strong>line 23</strong> to see what's going on, but it never even prints the first number. There is something going on here that I don't understand. After changing the for loop to very small numbers, it works fine. I can't change the range of the loop because these are the exact numbers I need to look at. What should I do?</p>
<pre><code>  6 def isPandigital(digits):                                                       
  7     sortedDigits = sorted(digits)                                               
  8     numDigits = len(sortedDigits)                                               
  9                                                                                 
 10     if len(set(sortedDigits)) != numDigits:                                     
 11         return False                                                            
 12                                                                                 
 13     for i in range(1, numDigits + 1):                                           
 14         if i != sortedDigits[i - 1]:                                            
 15             return False                                                        
 16                                                                                 
 17     return True                                                                 
 18                                                                                 
 19 primes = [2, 3, 5, 7, 11, 13, 17]                                               
 20 total = 0                                                                       
 21                                                                                 
 22 for i in range(1234567890, 9876543210 + 1):                                     
 23     print(i)                                                                    
 24     digits = [int(dig) for dig in str(i)]                                       
 25     numDigits = 10                                                              
 26                                                                                 
 27     if isPandigital(digits):                                                    
 28         for i in range(numDigits - 3):                                          
 29             newNum = int(''.join(map(str, digits[i:i + 3])))                    
 30             if not (newNum % primes[i] == 0):                                   
 31                 break                                                           
 32         else:                                                                   
 33             total += i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using the generator (xrange) instead of a list (range), i.e, </p>
<pre><code>for i in xrange(1234567890, 9876543210 + 1): 
</code></pre>
</div>
<span class="comment-copy">What python version are you using?</span>
<span class="comment-copy"><code>range</code> allocates memory to hold the list in python 2.x, which is why people use the iterator <code>xrange</code> instead.  python 3 changed this.</span>
<span class="comment-copy">@Jose In 3 a Range is a class with instances of immutable ranges, so yeah its like a generator.  <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#typesseq-range</a></span>
<span class="comment-copy">It's sort of like a generator in that it's lazy, but it doesn't have to actually generate values it doesn't need, and it doesn't get exhausted.</span>
<span class="comment-copy">Is this from Project Euler? Problem 41? :)</span>
<span class="comment-copy">I was actually running in 2.7.6, but running in 3.4.1 actually solved my problem. Does 3.4.1 automatically use a generator instead of malloc for the range? Is that why running in 3 would work?</span>
<span class="comment-copy">Python 3 uses a <a href="http://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3">different <code>range</code> entirely</a>. Python 2's <code>range</code> (and even <code>xrange</code> to an extent) are basically na√Øve implementations.</span>
