<div class="post-text" itemprop="text">
<p>I am using Python3.2 that ships with Debian on the latest Raspberry Pi:</p>
<pre><code>try:
   headers = {
      'Content-Type': 'application/json',
      'Connection': 'close',
   }
   s = requests.session()
   s.keep_alive = False

   response = s.get('http://example.com/', headers=headers, timeout=1)
except Exception as e:
   s.close()
   print(repr(e))
</code></pre>
<p>The server doesn't reply in time, so the script times out, and raises the Exception.  However the client then leaves the connection lingering open.</p>
<p>I would like the connection to close after a timeout occurs?</p>
<p>I understand the concept at the TCP protocol level, however I don't see any documentation online for how to do something as simple as this in python-requests.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming you're seeing these connections in something like tcpdump.</p>
<p>TCP connections linger (in the kernel) by design, for a period of time. There's really nothing you can do about it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Wrap it in a <code>with</code> statement, then move the <code>s.close()</code> to a <code>finally:</code> after the <code>except</code>:</p>
<pre><code>with requests.session() as s:
    s.keep_alive = False
    try:
       headers = {
          'Content-Type': 'application/json',
          'Connection': 'close',
       }

       response = s.get('http://example.com/', headers=headers, timeout=1)
    except Exception as e:
       print(repr(e))
    finally:
       s.close()
</code></pre>
<p>The <code>s.close()</code> will run every time, whether it succeeds or fails. the <code>with</code> statement should provide the extra insurance since the whole thing will run in that context</p>
</div>
<span class="comment-copy">No I am not talking about that.  The TCP connection stays open, meaning data can still be sent.</span>
<span class="comment-copy">How do you know this? You're not describing what you're actually seeing. If the script you've shown is in its entirety, then you're absolutely wrong - when the process closes, the socket is closed.  Please elaborate on your actual observations, and not what you think is happening.</span>
<span class="comment-copy">Well actually this question would be irrelevant if the script quit immediately after running, as you are correct, all open connections would be closed when the process quits.  The code I posted is running in a script that runs continuously.  As to how I know that – I have diagnostic software that I wrote myself and have been using for the past 10 years with great success.  And if I kill the script process, all “timed out” connections which were established by requests are closed immediately.</span>
<span class="comment-copy">Can you please just indicate <i>what facilities you're using to conclude that the socket is still open?</i>  How can I possibly know what your custom tool is doing?  Just run <code>$ netstat -tnp</code> and please add the output to your original question.</span>
<span class="comment-copy">Ok.  Netstat shows ESTABLISHED.  If I terminate the script, it shows TIME_WAIT.</span>
<span class="comment-copy">Sorry but this doesn't answer the question. <code>s.close()</code> is called when the timeout occurs, but it doesn't seem to solve the problem.  I am not even sure if <code>s.close()</code> is correct.</span>
<span class="comment-copy">it should be in the finally anyway to start with... since you want it closed every time.. I misunderstood the question.</span>
<span class="comment-copy">edited but untested... <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> - the with clause should eliminate the need for the <code>close</code> but you can leave it in - no harm</span>
