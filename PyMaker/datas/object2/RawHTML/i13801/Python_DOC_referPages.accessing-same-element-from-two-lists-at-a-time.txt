<div class="post-text" itemprop="text">
<p>In Python if I have 2 lists of the same length and want to pass corresponding elements to a function, how do I do this? For example I want item n from list 1 and item n from list 2 to be passed to someFunction().
In pseudocode and with arrays it would look like this</p>
<pre><code>arr1;
arr2;
for(int i=0; i &lt; arr1.length; i++)
    val = someFunction(arr1[i], arr2[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is how you would rewrite your example using proper Python code:</p>
<pre><code>arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
for a, b in zip(arr1, arr2):
    val = some_function(a, b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I have two lists:</p>
<pre><code>arr1 = ['a', 'b', 'c']
arr2 = ['1', '2', '3']
</code></pre>
<p>And I want to loop over them so they are accessing the element at the same index, I would do this:</p>
<pre><code>for i in range(len(list1)):
    val = someFunction(arr1[i], arr2[i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python it would be something like this:</p>
<pre><code>for x in xrange(len(arr1)):
    val = someFunction(arr1[x], arr2[x])
</code></pre>
</div>
<span class="comment-copy"><code>for i, j in zip(lst1, lst2): func(i,j)</code></span>
<span class="comment-copy">Will <code>a</code> and <code>b</code> always have the same value?</span>
<span class="comment-copy"><code>a</code> and <code>b</code> are the actual values in the two arrays, not indices.</span>
<span class="comment-copy">@Celeritas <code>a</code> and <code>b</code> will have the same index number - always. <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a> used with <code>zip</code> may also interest you.</span>
<span class="comment-copy">@Celeritas They will have the same relative positions but only the same values if the values at that same relative position are the same.</span>
<span class="comment-copy">@Celeritas Hopefully, the corrected code is less confusing now.</span>
