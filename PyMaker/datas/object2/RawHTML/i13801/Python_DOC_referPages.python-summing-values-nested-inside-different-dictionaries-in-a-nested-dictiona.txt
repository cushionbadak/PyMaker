<div class="post-text" itemprop="text">
<p>I have a nested dictionary called "high_low_teams_in_profile" which looks like this:</p>
<pre><code>{   
    m_profile1:
        {
            team_size1:
                {   
                    low: 1,

                    high: 1

                },
            team_size2:
                {   
                    low: 1,

                    high: 1

                }
        },
    m_profile2:
        {
            team_size1:
                {   
                    low: 1,

                    high: 1

                },
            team_size2:
                {   
                    low: 1,

                    high: 1

                }

        }   
}
</code></pre>
<p>And I want to get {m_profile1: 4, m_profile2: 4}</p>
<p>What is the most eloquent way to do it in python?
Right now I have the following:</p>
<pre><code>new_num_teams_in_profile = {}
for profile in high_low_teams_in_profile:
    new_num_teams_in_profile[profile]= dict((team_size, sum(high_low_teams_in_profile[profile][team_size].values())) for team_size in high_low_teams_in_profile[profile])

new_num_teams_in_profile= dict((profile, sum(new_num_teams_in_profile[profile].values())) for profile in new_num_teams_in_profile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if I'd say it's the most Pythonic, but it's the most <a href="https://stackoverflow.com/tags/functional-programming/info"><em>functional</em></a>:</p>
<pre><code>p = high_low_teams_in_profile
{ prof:sum(p[prof][team][hl]
           for team in p[prof]
           for hl in p[prof][team])
  for prof in p}
</code></pre>
<p>The arguments of <code>sum</code> is a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> and the outer <code>{ prof:sum(...) for prof in p}</code> is a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary comprehension</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>While this may not be the most pythonic, the following code should work and is more readable than your original version. Note the <code>iteritems()</code> method, which allows access to both the keys and values of the dict, while <code>itervalues()</code>, as the name suggests, only iterates the values of the dict.</p>
<pre><code>final = {}
for key, sizes in high_low_teams_in_profile.iteritems():
    total = 0
    for value in sizes.itervalues():
        s = sum(value.itervalues())
        total += s

    final[key] = total

print final
</code></pre>
<p>In addition, you could use the following. While it is a shorter number of lines, it is slightly more difficult to read.</p>
<pre><code>final = {}
for key, sizes in high_low_teams_in_profile.iteritems():
    total = sum([sum(value.itervalues()) for value in sizes.itervalues()])
    final[key] = total

print final
</code></pre>
</div>
<span class="comment-copy">Oh nice! I like this one =) neat and concise!</span>
