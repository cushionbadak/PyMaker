<div class="post-text" itemprop="text">
<p>So let's consider that I have the following array:</p>
<pre><code>arr1 = [[1,1],[2,1]]
</code></pre>
<p>Now, I construct the following function:</p>
<pre><code>def func(mylist):                                                                                                                                             
    print(mylist)                                                                                                                                             
    List = list(mylist)                                                                                                                                       
    for i in range(2):                                                                                                                                        
        for j in range(2):                                                                                                                                    
            List[i][j]=0                                                                                                                                      
    print mylist                                                                                                                                              
    print List                                                                                                                                                
    return mylist            
</code></pre>
<p>Then, when I call my function on my arr1, the initial array is modified (mylist).
This is really strange behaviour, because I'm doing a copy of mylist and only
modifying the copied array List. Anyone can explain to me what is happening? </p>
</div>
<div class="post-text" itemprop="text">
<p>Don't know why people downvoted this questions, as is quite valid.</p>
<p>Now, consider this:</p>
<pre><code>&gt;&gt;&gt; mylist1 = [(1,2), (3,4)]
&gt;&gt;&gt; mylist2 = list(mylist1)

&gt;&gt;&gt; mylist1
[(1, 2), (3, 4)]
&gt;&gt;&gt; mylist2
[(1, 2), (3, 4)]

&gt;&gt;&gt; mylist2[0] = (0, 0)

&gt;&gt;&gt; mylist1
[(1, 2), (3, 4)]
&gt;&gt;&gt; mylist2
[(0, 0), (3, 4)]
</code></pre>
<p>As you can see, the <code>list()</code> creates a copy of the list, but this copy is not a "deep" copy and if the list contains mutable objects (lists, dictionaries, or objects) the copy will just copy the reference to those objects instead of the content on them. For example:</p>
<pre><code>&gt;&gt;&gt; mylist1 = [[1,2], [3,4]]
&gt;&gt;&gt; mylist2 = list(mylist1)
&gt;&gt;&gt; mylist2[0][0] = 0
&gt;&gt;&gt; mylist2
[[0, 2], [3, 4]]
&gt;&gt;&gt; mylist1
[[0, 2], [3, 4]]
</code></pre>
<p>That is because the reference to the first element list got copied to the new list, not it's content or a full copy of the list, it still is the same list.</p>
<p>As already mentioned, use <code>copy.deepcopy</code>:</p>
<p><a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow">https://docs.python.org/3/library/copy.html#copy.deepcopy</a></p>
<p>You can read there:</p>
<blockquote>
<p>The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):</p>
<ul>
<li>A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.</li>
<li>A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.</li>
</ul>
</blockquote>
<p>Another option for your special case is to use a list comprehension like this:</p>
<pre><code>&gt;&gt;&gt; mylist1 = [[1,2], [3,4]]
&gt;&gt;&gt; mylist2 = [list(elem) for elem in mylist1] # &lt; This one
&gt;&gt;&gt; mylist1
[[1, 2], [3, 4]]
&gt;&gt;&gt; mylist2
[[1, 2], [3, 4]]
&gt;&gt;&gt; mylist2[0][0] = 0
&gt;&gt;&gt; mylist1
[[1, 2], [3, 4]]
&gt;&gt;&gt; mylist2
[[0, 2], [3, 4]]
</code></pre>
<p>This will also copy the list that are elements.</p>
</div>
<span class="comment-copy"><code>list()</code> only creates a shallow copy, use <code>copy.deepcopy</code>.</span>
<span class="comment-copy">your indentation and naming is all over the place</span>
<span class="comment-copy">@Ashwini Chaudhary Ok, thanks. That fixes the problem. Sorry for the stupid question.</span>
<span class="comment-copy">I don't know why people downvoted so furiously on this one, formatting on SO is not so obvious to new-comers.</span>
<span class="comment-copy">Thanks by the way for the formatting part. I'll try to do better next time ;-)</span>
