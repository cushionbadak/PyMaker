<div class="post-text" itemprop="text">
<p>I am trying to loop through a pipe delimited text file and parse the parameters per column to an sql file:
i need column 1 and 3 to parse to the sql file.</p>
<p>Text file<br/>
557438| |ZZCS0|ZZ<br/>
557439| |ZZJM|ZZ</p>
<pre><code>fileHandle = open('/tmp/so_insert_report20150804.txt', 'r')
for line in fileHandle:
    fields = line.split('|')

    os.system("prosql -n /psd_apps/700p6/cus/so_insert.enq" fields[0] fields[2])

fileHandle.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Better use a context manager to open the file: use the "with". Also, I suggest you to use the <code>subprocess.check_call</code> function instead of <code>os.system</code> like this:</p>
<pre><code>from subprocess import check_call

with open('/tmp/so_insert_report20150804.txt') as fd:
    for line in fd:
        c1, c2, c3, c4 = line.strip().split('|')
        check_call(['prosql', '-n', '/psd_apps/700p6/cus/so_insert.enq', c1, c3])
</code></pre>
<p>Check the subprocess module at:</p>
<p><a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">https://docs.python.org/3/library/subprocess.html</a></p>
<p>By the way, as I suspect you're planning to modify a DB it is better to perform the calls in a more transactional way, that is, validating the tokens before performing the call like this:</p>
<pre><code>from subprocess import check_call

def validatec1(c1):
    return str(int(c1))

def validatec3(c3):
    c3 = c3.strip()
    if not c3:
        raise Exception('Column 3 {} is empty'.format(c3))
    if not c3.startswith('ZZ'):
        raise Exception('Invalid value for c3 {}'.format(c3))
    return c3

batch = []

with open('/tmp/so_insert_report20150804.txt') as fd:
    for lnum, line in enumerate(fd, 1):
        try:
            c1, c2, c3, c4 = line.strip().split('|')
            batch.append((validatec1(c1), validatec3(c3)))
        except Exception as e:
            print('Error processing input file at line {}:\n{}'.format(lnum, line))
            raise e

for v1, v2 in batch:
    check_call(['prosql', '-n', '/psd_apps/700p6/cus/so_insert.enq', v1, v2])
</code></pre>
</div>
<span class="comment-copy">Does the abve code work? What is the issue?</span>
<span class="comment-copy">thank you so much, legend! first  answer works perfectly, I tried the second code with validation and i get the following errors: Traceback (most recent call last): TypeError: execv() arg 2 must contain only strings</span>
<span class="comment-copy">Yeah, validatec1 and validatec3 function were example functions, adapt them to your real needs. I corrected the validatec1 that were returning and int instead of a string, and thus causing that error. It should work now. Again, adapt them to your validation needs.</span>
