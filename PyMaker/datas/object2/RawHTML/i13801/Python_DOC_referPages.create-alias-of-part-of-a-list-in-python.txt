<div class="post-text" itemprop="text">
<p>Is there a way to get an alias for a part of a list in python?</p>
<p>Specifically, I want the equivalent of this to happen:</p>
<pre><code>&gt;&gt;&gt; l=[1,2,3,4,5]
&gt;&gt;&gt; a=l
&gt;&gt;&gt; l[0]=10
&gt;&gt;&gt; a
[10, 2, 3, 4, 5]
</code></pre>
<p>But what I get is this:</p>
<pre><code>&gt;&gt;&gt; l=[1,2,3,4,5]
&gt;&gt;&gt; a=l[0:2]
&gt;&gt;&gt; l[0]=10
&gt;&gt;&gt; a
[1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If numpy is an option:</p>
<pre><code>import  numpy as np

l = np.array(l)

a = l[:2]

l[0] = 10

print(l)
print(a)
</code></pre>
<p>Output:</p>
<pre><code>[10  2  3  4  5]
[10  2]
</code></pre>
<p>slicing with basic indexing returns a view  object with numpy so any change are reflected in the <a href="http://docs.scipy.org/doc/numpy/glossary.html#term-view" rel="noreferrer">view</a> object</p>
<p>Or use a <a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="noreferrer">memoryview</a> with an <a href="https://docs.python.org/3/library/array.html#array.array" rel="noreferrer">array.array:</a></p>
<pre><code>from array import array

l = memoryview(array("l", [1, 2, 3, 4,5]))

a = l[:2]

l[0]= 10
print(l.tolist())

print(a.tolist())
</code></pre>
<p>Output:</p>
<pre><code>[10, 2, 3, 4, 5]
[10, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could embed each element into its own mutable data structure (like a <code>list</code>).</p>
<pre><code>&gt;&gt;&gt; l=[1,2,3,4,5]
&gt;&gt;&gt; l = [[item] for item in l]
&gt;&gt;&gt; l
[[1], [2], [3], [4], [5]]
&gt;&gt;&gt; a = l[:2]
&gt;&gt;&gt; a
[[1], [2]]
&gt;&gt;&gt; l[0][0] = 10
&gt;&gt;&gt; l
[[10], [2], [3], [4], [5]]
&gt;&gt;&gt; a
[[10], [2]]
</code></pre>
<p>However, I recommend trying to come up with a solution to your original issue (whatever that was) that doesn't create issues of its own.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is a view of the original list, so that any modifications are reflected in the original list. This is doable with the array in the numpy package:</p>
<pre><code>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; x = numpy.array([1, 2, 3])
&gt;&gt;&gt; y = x[2:]
&gt;&gt;&gt; y[0] = 999
&gt;&gt;&gt; x
array([  1,   2, 999])
</code></pre>
</div>
<span class="comment-copy">Slicing creates a new <code>list</code>. If you had two <code>list</code>s of different sizes, how could they be the same list, i.e., have the same address?</span>
<span class="comment-copy">I guess you could embed each element into its own <code>list</code>, but that would be so hacky. You probably have an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>.</span>
<span class="comment-copy">numpy did the trick! thanks</span>
