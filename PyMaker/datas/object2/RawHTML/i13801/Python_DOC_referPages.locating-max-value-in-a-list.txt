<div class="post-text" itemprop="text">
<p>I'm very new to Python programming and I've been tasked by an online friend to write code to solve the following problem:</p>
<p>'imagine a board game and you have to roll 2 dices.Write a program to roll the dices 100 times and find out which value (of both dices) appears most'</p>
<p>My attempt below kind of works in the sense that I'm able to ascertain the max frequency of two dice faces added together but not the actual dice thrown.(e.g. the total '9' was the most frequently thrown).</p>
<p>I'm sure there are plenty of ways of accomplishing the above so do excuse my very first attempt at coding!</p>
<pre><code>import random
results = []

freq_2 = 0
freq_3 = 0
freq_4 = 0
freq_5 = 0
freq_6 = 0
freq_7 = 0
freq_8 = 0
freq_9 = 0
freq_10 = 0
freq_11 = 0
freq_12 = 0

for i in range(100):
    face1 = random.randrange(1,7)
    face2 = random.randrange(1,7)
    value = face1 + face2
    if value == 2:
        freq_2 += 1
    if value == 3:
        freq_3 += 1
    if value == 4:
        freq_4 += 1
    if value == 5:
        freq_5 += 1
    if value == 6:
        freq_6 += 1
    if value == 7:
        freq_7 += 1
    if value == 8:
        freq_8 += 1
    if value == 9:
        freq_9 += 1
    if value == 10:
        freq_10 += 1
    if value == 11:
        freq_11 += 1
    if value == 12:
        freq_12 += 1

results.append(freq_2)
results.append(freq_3)
results.append(freq_4)
results.append(freq_5)
results.append(freq_6)
results.append(freq_7)
results.append(freq_8)
results.append(freq_9)
results.append(freq_10)
results.append(freq_11)
results.append(freq_12)

print max(results)
print freq_2, freq_3, freq_4, freq_5, freq_6, freq_7, freq_8, freq_9,        freq_10, freq_11, freq_12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections</code></a> provides <code>Counter</code> which makes this task easy:</p>
<pre><code>from random import choice
from collections import Counter

dice = range(1,7)
freq = Counter([choice(dice) + choice(dice) for i in range(100)])

print freq
print freq.most_common(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would redo much of it, reducing the amount of variables you're using.</p>
<p>rather than a separate variable for each <code>freq_#</code>, use a list:</p>
<pre><code>freqs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] # 12 zeroes
for i in range(100):
    face1 = random.randrange(1,7)
    face2 = random.randrange(1,7)
    value = face1 + face2
    freqs[value] += 1
</code></pre>
<p>This way, you also will not have to individually append each <code>freq_#</code> to a list afterwards.</p>
<p>Once this list is filled with its values, you can use a few simple python calls to find the data you'd like:</p>
<blockquote>
<p>'The most frequent throw was 9 and it occurred 21 times'</p>
</blockquote>
<p>The most frequent throw will be the index with the highest number in the list.</p>
<pre><code>max_freq = max(freqs) # amount of times this number was thrown
</code></pre>
<p>the number that was rolled will be represented by the index of the max</p>
<pre><code>most_frequent_roll = freqs.indexOf(max_freq) # the number that was thrown that many times.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to write explicitly all the cases. For such a task python <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">dictionaries</a> are very useful. </p>
<p>I won't solve the problem for you, but give you a hint how you could implement this using dictionaries:</p>
<pre><code># define a dictionary to hold the counts (just for a single dice here)
counts = {nbr_dots: 0 for nbr_dots in range(1, 7)}
# this will look like {1:0, 2:0, ...}

# now whenever you get a certain count (say 2 here) you can increment the value of 
# this count by 1 like so:
counts[2] += 1
# now counts looks like: {1:0, 2:1, ...}
</code></pre>
<p>If then you want to get the key (so the count) that appeared the most:</p>
<pre><code>most_frequent = max(counts, key=lambda k: counts[k])
# and the number of times it appeared:
nbr_observations = counts[most_frequent]
</code></pre>
<p>Hope this minimal example helps to get you started.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are good, but if for some reason you don't want to use them, then here is a simple loop that does the job after you have calculated the result.</p>
<pre><code>maximum = 0
for i in range(len(results)):
    if results[i] &gt; maximum:
        maximum = results[i]
        itemAt = i
print('The most frequent throw was: '+ str(results[itemAt]))
print('It occured %d times' % maximum)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you must do to find the value of each die is you must compose another for loop which records when the value of each face is a certain number, and then increase the frequency of that value: </p>
<pre><code>face_freq_2 = 0
face_freq_3 = 0
face_freq_4 = 0
face_freq_5 = 0
face_freq_6 = 0
face_freq_7 = 0
face_freq_8 = 0
face_freq_9 = 0
face_freq_10 = 0
face_freq_11 = 0
face_freq_12 = 0

for j in range(100):

face_value1 = random.randrange(1,7)
face_value2 = random.randrange(1,7)
value1 = face_value1
value2 = face_value2


if (value1 == value2) and (value1 == 1):
    face_freq_2 += 1
if (value1 == 1 and value2 == 2) or (value1 == 2 and value2 == 1):
    face_freq_3 += 1
if (value1 == value2) and (value1 == 2):
    face_freq_4 += 1
elif (value1 == 1 and value2 == 3) or (value1 == 3 and value2 == 1):
    face_freq_4 += 1
if (value1 == 1 and value2 == 4) or (value1 == 4 and value2 == 1):
    face_freq_5 += 1
elif (value1 == 2 and value2 == 3) or (value1 == 3 and value2 == 2):
    face_freq_5 += 1
if (value1 == value2 and value1 == 3):
    face_freq_6 += 1
elif (value1 == 1 and value2 == 5) or (value1 == 5 and value2 == 1):
    face_freq_6 += 1
elif (value1 == 2 and value2 == 4) or (value1 == 4 and value2 == 2):
    face_freq_6 += 1
</code></pre>
<p>From this you get the picture of what you must do, for as the values increase you will need more elif statements in addition to the initial if statement. Yes, it is a bit tedious but it should yield the desired results.</p>
</div>
<span class="comment-copy">This appears functional.  Is there anything going wrong?</span>
<span class="comment-copy">Thanks for the reply but what I'm trying to achieve is to know which variable contains the max value in the list. For example if freq_5 is the highest I would want the program to say for example 'The most frequent throw was 9 and it occurred 21 times'</span>
<span class="comment-copy">I recommend storing the counts of each dice roll in a data structure so you don't have to define and keep track of each individually.  Imagine a similar scenario where you have to keep track of random occurrences of 100 unique possible events.</span>
<span class="comment-copy">@brandaemon see my answer as an example.</span>
<span class="comment-copy">If you are very new to Python: here I use a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to fill the list I give to <code>Counter</code>.</span>
<span class="comment-copy">Thanks everyone for all their input. Although some of it was way beyond my current skills it certainly has opened up a world of possibilities to extend my knowledge base.</span>
<span class="comment-copy">You can further shorten the <code>freqs</code> definition to <code>freqs = [0] * 12</code></span>
<span class="comment-copy">Thanks for all the help but I'm more confused then I started with! Collections seem to be good but how was I meant to know this even existed???</span>
<span class="comment-copy">@DazzyStar I know it can be quite confusing if you are very new to this. Personally I would recommend you to first start using only basic data structures (lists, tuples, dicts, ...) and once you are familiar with those move to more complex elements like <code>collections</code>. <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Here</a> is an introduction to pythons basic data structures. If you will continue with python it certainly makes sense to spend some time to understand them.</span>
<span class="comment-copy">Thanks jojo. You should consider becoming a private online tutor!</span>
<span class="comment-copy">@DazzyStar you are welcome! :P I will consider your advise if ever I loose my job.</span>
<span class="comment-copy">Can I pm or email you jojo? I don't have any contact details for you though.</span>
