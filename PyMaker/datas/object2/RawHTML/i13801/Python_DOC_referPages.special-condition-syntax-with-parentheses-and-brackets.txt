<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/21533525/pythons-syntactical-sugar-gone-wrong">Python's syntactical sugar gone wrong</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Is there any explanation about the following Python condition syntax?</p>
<pre><code>&gt;&gt;&gt; a = 10
&gt;&gt;&gt; s = (0, 1)[a&lt;10]
&gt;&gt;&gt; print s
0
&gt;&gt;&gt; a = -10
&gt;&gt;&gt; s = (0, 1)[a&lt;10]
&gt;&gt;&gt; print s
1
</code></pre>
<p>It seems to work like an <code>if</code> statement. Why does this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <a href="https://docs.python.org/2/library/functions.html#bool"><code>bool</code></a> is a subclass of <a href="https://docs.python.org/2/library/functions.html#int"><code>int</code></a>.</p>
<pre><code>&gt;&gt;&gt; issubclass(bool, int)
True
</code></pre>
<p>In other word, <code>False</code> is equal to 0, and <code>True</code> is equal to 1:</p>
<pre><code>&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; True == 1
True
</code></pre>
<p>So they can be used as a index:</p>
<pre><code>&gt;&gt;&gt; ['No', 'Yes'][False]  # ['No', 'Yes'][0]
'No'
&gt;&gt;&gt; ['No', 'Yes'][True]   # ['No', 'Yes'][1]
'Yes'
</code></pre>
<p>The expression <code>a &lt; 10</code> yields <code>True</code> or <code>False</code> based on the value of <code>a</code>. So <code>(0, 1)[a &lt; 10]</code> will yield <code>0</code> or <code>1</code> accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>(0, 1)</code> is a 2-element <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow">tuple</a>. You can access its values using the <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow">index accessors</a> <code>[0]</code> and <code>[1]</code> like this:</p>
<pre><code>&gt;&gt;&gt; (0, 1)[0]
0
&gt;&gt;&gt; (0, 1)[1]
1
</code></pre>
<p>Now, in Python, the boolean values <a href="https://docs.python.org/3/library/constants.html#True" rel="nofollow"><code>True</code></a> and <a href="https://docs.python.org/3/library/constants.html#False" rel="nofollow"><code>False</code></a> are actually instances of <code>int</code> (because <code>bool</code> is a subtype of <code>int</code>):</p>
<pre><code>&gt;&gt;&gt; issubclass(bool, int)
True
&gt;&gt;&gt; isinstance(True, int)
True
&gt;&gt;&gt; isinstance(False, int)
True
</code></pre>
<p>The int values of <code>True</code> and <code>False</code> are <code>1</code> and <code>0</code>:</p>
<pre><code>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; False == 0
True
</code></pre>
<p>So you can actually use them two access the elements in your 2-element tuple:</p>
<pre><code>&gt;&gt;&gt; (0, 1)[False]
0
&gt;&gt;&gt; (0, 1)[True]
1
</code></pre>
<p>And that explains why specifying a condition there—which returns a boolean—will work as well.</p>
<p>This is also mentioned in the <a href="https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values" rel="nofollow">documentation</a> (emphasis mine):</p>
<blockquote>
<p>Boolean values are the two constant objects <code>False</code> and <code>True</code>. They are used to represent truth values (although other values can also be considered false or true). <strong>In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively.</strong></p>
</blockquote>
</div>
<span class="comment-copy">This would be written by anyone sane as <code>s = 1 if a &lt; 10 else 0</code>! Related: <a href="http://stackoverflow.com/a/470376/3001761">stackoverflow.com/a/470376/3001761</a></span>
