<div class="post-text" itemprop="text">
<p>Say I have a dict:</p>
<pre><code>foo = {'a': 1}
</code></pre>
<p>Both <code>list(foo)</code> and <code>foo.keys()</code> return the same thing. What's the difference between the two?</p>
</div>
<div class="post-text" itemprop="text">
<p>One difference is in Python 3. <code>foo.keys()</code> returns an iterator of the keys, which is what <code>foo.iterkeys()</code> does in Python 2, while <code>list(foo)</code> returns a list of the keys.</p>
<p>As noted below, <code>foo.keys()</code> doesn't exactly return an iterator in Python 3. It returns a <code>dict_keys</code> object (or view) which, among its operations, allows iteration. You can also do fun things such as set operations and multiple iteration. It still has the concept of lazy evaluation which makes iterators so powerful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python3:</p>
<p>from the official <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">documentation</a></p>
<blockquote>
<p>Calling foo.keys() will return a dictionary view object. It supports
  operations like membership test and iteration, but its contents are
  not independent of the original dictionary – it is only a view.</p>
</blockquote>
<p>in fact, </p>
<pre><code>type(foo.keys())
</code></pre>
<p>gives</p>
<pre><code>&lt;class 'dict_keys'&gt;
</code></pre>
<p>whereas in Python 2 both</p>
<pre><code>type(list(foo))
type(foo.keys())
</code></pre>
<p>give</p>
<pre><code>&lt;type 'list'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no real difference in python 2, which is why I suspect <code>dict.keys</code> changed to return a view in python3 and <code>dict.viewkeys</code> was removed.</p>
<p>In python 3:</p>
<pre><code>In [3]: foo = dict((k,k) for k in range(4))

In [4]: foo
Out[4]: {0: 0, 1: 1, 2: 2, 3: 3}

In [5]: foo.keys?
Type:        builtin_function_or_method
String form: &lt;built-in method keys of dict object at 0x7f45d8667708&gt;
Docstring:   D.keys() -&gt; a set-like object providing a view on D's keys

In [6]: foo.keys()
Out[6]: dict_keys([0, 1, 2, 3])

In [7]: type(foo.keys())
Out[7]: dict_keys

In [8]: for i in foo.keys():
   ...:     del foo[i]
   ...:     
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-8-659d5446ab29&gt; in &lt;module&gt;()
----&gt; 1 for i in foo.keys():
      2     del foo[i]
      3 

RuntimeError: dictionary changed size during iteration

In [9]: for i in list(foo):
    del foo[i]

In [10]: foo
Out[10]: {}
</code></pre>
<p>The last two things are basically the thing you need to know about the difference between <code>dict.keys</code> and <code>list(dictionary)</code> in python<strong>3</strong>. <code>dict.keys</code> is <em>just</em> a view of the keys, so checking <code>item in dictionary.keys()</code> is O(1), but you can't iterate over <code>dictionary.keys()</code> and modify the dictionary at the same time.</p>
<p>They are both iterators, in that they both implement <code>__iter__</code>.</p>
</div>
<span class="comment-copy">In python3, <code>foo.keys()</code> returns a <code>view</code></span>
<span class="comment-copy">Note that <code>list()</code> call will basically iterate over the returned object from <code>__iter__</code>, so in case you override <code>dict</code>'s <code>__iter__</code> in a class and then call <code>.keys()</code> and <code>list()</code> on it then only the <code>list()</code> call will run the new <code>__iter__</code>.</span>
<span class="comment-copy">In Python 2, <code>list(foo)</code> essentially calls <code>foo.iterkeys()</code> and creates a list from its contents, insomuch as <code>foo.iterkeys()</code> and <code>iter(foo)</code> return the same object.</span>
<span class="comment-copy">Yes , Check documentation as well - <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a> - The last point in footnotes. <code>dict.keys()</code> returns a dictionary view object (not iterator).</span>
<span class="comment-copy"><code>list(foo)</code> gives you an entire new list object, right? That is why you can remove items from it, me thinks :)</span>
<span class="comment-copy">Yeah, which is why you can iterate over that and delete from the dictionary.</span>
<span class="comment-copy">What is the <code>foo.keys?</code> notation? It doesn't seem to work here for me.</span>
<span class="comment-copy">It's <a href="http://ipython.org/" rel="nofollow noreferrer">ipython</a> magic, see the fourth bullet point here: <a href="http://pages.physics.cornell.edu/~myers/teaching/ComputationalMethods/python/ipython.html" rel="nofollow noreferrer">pages.physics.cornell.edu/~myers/teaching/ComputationalMethods/…</a> . It's basically equivalent to calling <code>help(foo.keys)</code></span>
