<div class="post-text" itemprop="text">
<p>For example, calling <code>consec(2, [2, 2, 3, 9, 9, 10, 1, 6, 6])</code> returns {2<code>, 9, 6}</code>. I cannot use anything in <code>itertools</code>, all I can use is <code>next</code> and <code>iter</code> and I cannot make a secondary list to track the values or use len.</p>
<p>Here's what I have so far:</p>
<pre><code>consec(n,iterable):

result = set()
count = 0
y = iter(iterable)
j = iter(iterable)
next(j)
try:
    while True:
        for x in y:
            if x in result:
                 continue
            for m in range(n):
                if x == next(j):
                    count += 1
                    if count == n-1:
                        result.add(x)
                else:
                    count = 0
                    break
except StopIteration:
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It should be pretty easy to do this with a simple <code>for</code> loop over the values in the iterable. Just count how many times in a row you've see the current value and when it reaches <code>n</code>, add it to the results:</p>
<pre><code>def consec(n, iterable):
    result = set()
    prev = None # use object() here instead if None could be a value in the iterable
    count = 0
    for item in iterable:
        if item == prev:
            count += 1
            if count == n:
                result.add(prev)
        else:
            prev = item
            count = 1
    return result
</code></pre>
<p>I don't bother to avoid repeated counting of the same value, since the <code>set</code> will ignore any duplicate values added to it.</p>
<p>If you need to use a <code>while</code> loop for some reason, you can always convert the <code>for</code> loop into one.</p>
<p>The <code>for</code> loop:</p>
<pre><code>for item in iterable:
    stuff(item)
</code></pre>
<p>is almost equivalent to:</p>
<pre><code>it = iter(iterable)
try:
    while True:
        item = next(it)
        stuff(item)
except StopIteration:
    del it
</code></pre>
<p>The only difference between the two versions is the existence of the <code>it</code> variable during the iteration. (The iterator used by a <code>for</code> loop is never bound to a variable name.)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def consec(n,l):
    return set(ele for i,ele in enumerate(l[:-1]) if all(ele == j for j in l[i:i+n]))
</code></pre>
<p>Or  use range and index instead of slicing:</p>
<pre><code>def consec(n,l):
     return set(ele for i, ele in enumerate(l[:-n+1]) if all(ele == l[j] for j in range(i,i+n)))
</code></pre>
<p>If you have to use next,use an inner loop in range n-1, see if all next n - 1 and prev  are equal and add to the set if the loop finishes:</p>
<pre><code>def consec(n,l):
    it = iter(l)
    prev = next(it)
    st = set()
    while prev != "":
        for i in range(n-1):
            ele = next(it,"")
            if ele != prev or ele == "":
                break
            prev = ele
        else:
            st.add(ele)
        prev = ele
    return st
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do it recursively:</p>
<pre><code>GlobalCons = 2
def recurse(list, previous, consecCount):
  if(list == []):
    return []  
  if(consecCount != GlobalCons and previous == list[0]):
    return recurse(list[1:], list[0], consecCount + 1)
  if(consecCount == GlobalCons previous == list[0]):
    return [previous] + recurse(list[1:], list[0], consecCount + 1)
  else:
    return recurse(list[1:], list[0], 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>def consec(n, iterable):
    return [k for k, g in itertools.groupby(iterable) if len(list(g)) == n]
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; consec(2, [2, 2, 3, 9, 9, 10, 1, 6, 6])
[2, 9, 6]
</code></pre>
<p>Edit: Whoops, I guess I read "I cannot use anything in itertools" as "I found nothing in itertools that I can use", but you probably meant "I am not allowed to". Anyway, I'll leave this here for those who <em>can</em> use stuff from <code>itertools</code>...</p>
</div>
