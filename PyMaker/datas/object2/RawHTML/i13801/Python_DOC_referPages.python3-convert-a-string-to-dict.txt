<div class="post-text" itemprop="text">
<p>I have this string which I wish to convert to a dict:</p>
<pre><code>class_="template_title" height="50" valign="bottom" width="535"
</code></pre>
<p>to basically change it to something like: </p>
<pre><code>dict(class_='template_title', height='50', valign='bottom', width='535')
</code></pre>
<p>Nothing more complicated but I believe there is multiple steps in this problem. Would be nice if you could explain the solution or link to some documentation  :)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to create a dictionary object from that string, you can use the <code>dict</code> function and a generator expression which splits the string based on whitespaces and then by <code>=</code>, like this</p>
<pre><code>&gt;&gt;&gt; data = 'class_="template_title" height="50" valign="bottom" width="535"'
&gt;&gt;&gt; dict(item.split('=') for item in data.split())
{'width': '"535"', 'height': '"50"', 'valign': '"bottom"', 'class_': '"template_title"'}
</code></pre>
<p>This follows from the examples in <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="noreferrer">this documentation section</a>. So, if you pass an iterable which gives two elements on every iteration, then <code>dict</code> can use that to create a dictionary object.</p>
<p>In this case, we first split the string based on whitespace characters with <code>data.split()</code> and then we split every string based on <code>=</code>, so that we will get key, value pairs.</p>
<p><strong>Note:</strong> If you are sure that the data will not have <code>"</code> character anywhere inside the string, then you can replace that first and then do the dictionary creation operation, like this</p>
<pre><code>&gt;&gt;&gt; dict(item.split('=') for item in data.replace('"', '').split())
{'width': '535', 'height': '50', 'valign': 'bottom', 'class_': 'template_title'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not familiar with Python 3, so this may not be the most elegant solution, but this approach would work.</p>
<p>First split the string by spaces. <code>list_of_records = string.split()</code></p>
<p>This returns a list that in your case would look like this:</p>
<p><code>['class_="template_title"', 'height="50"', 'valign="bottom"', 'width="535"']</code></p>
<p>Then iterate through the list and split each element by '='.</p>
<pre><code>for pair in list_of_records:
    key_val = pair.split('=')
    key = pair[0]
    val = pair[1]
</code></pre>
<p>Now in the body of the loop, just add it to the dictionary.</p>
<pre><code>d[key] = val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look this way, View <a href="http://ideone.com/bkcEol" rel="nofollow"><strong>LIVE</strong></a></p>
<pre><code>ori = 'class_="template_title" height="50" valign="bottom" width="535"'
final = dict()
for item in ori.split():
    pair = item.split('=')
    final.update({pair[0]: pair[1][1:-1]})
print (final)
</code></pre>
<p>Output:</p>
<pre><code>{'class_': 'template_title', 'valign': 'bottom', 'width': '535', 'height': '50'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you <em>don't</em> have the variables defined as a string. You just have variables.  </p>
<p>You can look into the following functions,</p>
<ul>
<li>dir() will give you the list of in scope variables:</li>
<li>globals() will give you a dictionary of global variables</li>
<li>locals() will give you a dictionary of local variables</li>
</ul>
<p>These will give you the dictionary which you can manipulate, filter, all sort of things.  </p>
<p>Something like this,</p>
<pre><code>class_m="template_title" 
height_m="50" 
valign_m="bottom" 
width_m="535"

allVars = locals()
myVars = {}
for key,val in allVars.items():
    if key.endswith('_m'):
        myVars[key] = val

print(myVars)
</code></pre>
</div>
<span class="comment-copy">Hello @bob could you check other answer might be help you. Thanks</span>
