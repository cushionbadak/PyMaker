<div class="post-text" itemprop="text">
<p>I would like to know the Pythonic way to write a generator expression that takes the first <code>n</code> elements of an infinite generator <code>g</code>. Currently, I am doing this:</p>
<pre><code>(x for x,_ in zip(g,range(n)))
</code></pre>
<p>Is there a more Pythonic way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><strong><code>islice</code></strong></a></p>
<p>To wrap the islice in a function would make a lot of sense, the code is much shorter than my alternative below:</p>
<pre><code>from itertools import islice

def first_n(iterable, n):
    return islice(iterable, 0, n)
</code></pre>
<p>and usage:</p>
<pre><code>&gt;&gt;&gt; first_n(xrange(100), 10)
&lt;itertools.islice object at 0xffec1dec&gt;
&gt;&gt;&gt; list(first_n(xrange(100), 10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p><strong>alternative</strong></p>
<p>here's an alternative:</p>
<pre><code>def first_n(iterable, n):
    it = iter(iterable)
    for _ in xrange(n):
        yield next(it)
</code></pre>
<p>and usage:</p>
<pre><code>&gt;&gt;&gt; first_n(xrange(100), 10)
&lt;generator object first_n at 0xffec73ec&gt;
&gt;&gt;&gt; list(first_n(xrange(100), 10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>itertools.islice(g,0,10)
</code></pre>
<p>should do it?</p>
<p>you might need <code>list(itertools.islice(g,0,10))</code>   (since it returns an iterator)</p>
</div>
<span class="comment-copy">whoops the iterable argument I had in the wrong spot</span>
