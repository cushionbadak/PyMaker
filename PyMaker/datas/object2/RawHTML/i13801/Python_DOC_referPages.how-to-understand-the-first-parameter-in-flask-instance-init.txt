<div class="post-text" itemprop="text">
<p>When create a Flask instance , we always use <code>__name__</code> as the first arguments,
but why?</p>
<pre><code>class flask.Flask(import_name, static_path=None, static_url_path=None,static_folder='static', template_folder='templates', instance_path=None, instance_relative_config=False)
</code></pre>
<p>The official document says that first parameter is used to find resource,how? </p>
</div>
<div class="post-text" itemprop="text">
<p>The import name is used to resolve the directory where the Flask application is installed (see the <a href="https://github.com/mitsuhiko/flask/blob/7f3867491570746a4c14bdaa5bd59ec1b64cbfea/flask/helpers.py#L626" rel="nofollow"><code>get_root_path</code></a> function in <a href="https://github.com/mitsuhiko/flask/blob/7f3867491570746a4c14bdaa5bd59ec1b64cbfea/flask/helpers.py#L626" rel="nofollow">flask/helpers.py</a>).  This makes it possible for things like <code>render_template</code>, <code>send_static_file</code>, and relative file paths in <code>config</code> to resolve to files in the application's folder without needing a file path to be provided.</p>
<p>Consider an extremely simple Python app <em>without</em> this functionality:</p>
<h3>simple_app.py</h3>
<pre><code>print("Running simple_app")

with open('the-folder/simple.file', 'r') as f:
    for line in f:
        print(f)
</code></pre>
<h3>simple.file</h3>
<pre><code>Hello
World!
</code></pre>
<p>And a directory structure looking like this:</p>
<pre><code>some-path/
    simple-app/
        simple_app.py
        the-folder/
            simple.file
</code></pre>
<p>If we start Python while our current working directory is <code>simple-app/</code> everything will work just fine:</p>
<pre><code>simple-app$ python simple_app.py
Running simple_app
Hello
World!
</code></pre>
<p>But if we move up one folder and try again:</p>
<pre><code>some-path$ python simple-app/simple_app.py
Traceback (most recent call last):
IOError: [Errno 2] No such file or directory: 'the-folder/simple.file'
</code></pre>
<p>The same thing happens when we move down one folder.  However, if we could get the location of <code>simple_app.py</code> on the file system, we could then <code>os.join</code> the directory in which <code>simple_app.py</code> was installed with <code>the-folder/simple.file</code></p>
<pre><code>with open(os.join(SIMPLE_APP_DIR, 'the-folder/simple.file', 'r') as f:
</code></pre>
<p>And our working directory wouldn't matter, since we would always be dealing with an absolute path.  This is what Flask does, and this is why it needs the <code>__name__</code> passed in.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__name__</code> should not always be used as the first argument particularly if the application is in a package instead of a single module, then its 'usually recommended to hardcode the package name' in order to simplify debugging with the Flask-SQLAlchemy extension for example. For reference see the section on 'About the First Parameter' in <a href="http://flask.pocoo.org/docs/0.10/api/" rel="nofollow">http://flask.pocoo.org/docs/0.10/api/</a>.</p>
<p>In the case when using a package there is a way to avoid hardcoding the package name with a special configuration which forces <code>__name__</code> to resolve to the package name as desribed in <a href="http://flask.pocoo.org/docs/0.10/patterns/packages/" rel="nofollow">Larger Applications</a>. First, note that a Python package is not simply a directory containing modules which are Python source files; it must also contain an <code>__init__.py</code> file (except for <a href="https://docs.python.org/3/reference/import.html#namespace-packages" rel="nofollow">Python3 namespace packages</a>). One function of <code>__init__.py</code> files is to prevent unintentional namespace conflicts as mentioned in <a href="http://www.network-theory.co.uk/docs/pytut/Packages.html" rel="nofollow">An Introduction to Python: Section 6.4</a>. In the case of flask, its convenient to define a flask app in a package's <code>__init__.py</code> in order to enable use of <code>__name__</code> since in that case it resolves to the package name which is identical to the package's base directory name and has a file attribute with which its absolute pathname can be determined. A working flask/Python3 project demonstrating this configuration is available at <a href="https://goo.gl/aHM8nH" rel="nofollow">flaskdemo</a>.</p>
<p>Regarding understanding the first parameter in flask instance initialization, first of all if its missing and there are no remaining arguments, then when attempting to run the flask app it immediately fails with "TypeError: <code>__init__()</code> missing 1 required positional argument: 'import_name'".  Second, if a nonexistent pathname is provided for it, then the application's and its resources root is set to the cwd (current working directory) and attempts to access resources would fail unless they are in the cwd which is not necessarily always the case and a limitation anyway.</p>
<p>Further details can be obtained by examining the flask sources, particularly app.py as well as helpers.py. In an Anaconda3 installation they are located in Lib\site-packages\flask. From a brief review, what I found is that class Flask is defined in app.py and its 
<code>__init__</code> method begins with:</p>
<pre><code>def __init__(self, import_name, static_path=None, static_url_path=None,
                 static_folder='static', template_folder='templates',
                 instance_path=None, instance_relative_config=False):
    _PackageBoundObject.__init__(self, import_name, template_folder=template_folder)
...
</code></pre>
<p>class _PackageBoundObject is defined in helpers.py and it has an <code>open_resource()</code> function
that returns <code>open(os.path.join(self.root_path, resource), mode)</code> where </p>
<pre><code>self.root_path = get_root_path(self.import_name)
</code></pre>
<p>The root in <code>root_path</code> refers to 'the path of a package or the folder that contains a module'. <code>get_root_path</code> goes though a series of attempts to resolve it starting with the module name if its available and has a file attribute. In all cases absent exceptions it returns an absolute pathname which defaults to cwd if it has not been already been resolved with a module name when<code>pkgutil.get_loader(import_name) == None</code> or <code>import_name == '__main__'</code>, which happens when running a flask app interactively instead of from a file. </p>
</div>
<div class="post-text" itemprop="text">
<p>It is explained in the Quick Start section of docs.</p>
<p><a href="http://flask.readthedocs.org/en/latest/quickstart/#a-minimal-application" rel="nofollow">http://flask.readthedocs.org/en/latest/quickstart/#a-minimal-application</a></p>
<p>Quoting from the docs</p>
<blockquote>
<p>The first argument is the name of the application’s module or package. If you are using a single module (as in this example), you should use <code>__name__</code> because depending on if it’s started as application or imported as module the name will be different (<code>__main__</code> versus the actual import name). This is needed so that Flask knows where to look for templates, static files, and so on.</p>
</blockquote>
</div>
<span class="comment-copy">but what  I don't understand is that when I print <code>__name__</code> in app.py, it only show <code>__main__</code> with no path information, so how Flask locate the application 's path in the filesystem.</span>
<span class="comment-copy">It looks up the <code>__file__</code> attribute - see the linked file</span>
<span class="comment-copy">Yes，I have  checked the documents too. But what I don't understand is that if the application is in a package or a single module. Isn't  a module in a package?</span>
<span class="comment-copy">A module does not have to be in a package and a package is not just a directory (except for Python 3 namespace packages).  See <a href="http://stackoverflow.com/questions/7948494/whats-the-difference-between-a-python-module-and-a-python-package" title="whats the difference between a python module and a python package">stackoverflow.com/questions/7948494/…</a> for more information about modules vs packages. Additional information about this, configuring flask packages and how the first argument of flask instance initialization is used (or abused) are in my answer.</span>
