<div class="post-text" itemprop="text">
<pre><code>if 'force' in kwargs and kwargs['force'] is True:
</code></pre>
<p>It feels like there should be a better way of writing this condition since I'm repeating both the key and variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://codereview.stackexchange.com/users/50391/emanuele-paolini">@EmanuelePaolini</a> provided a great answer, there's another thing that I want to nitpick. You don't need to to check if something is true. For example, your code block would become this:</p>
<pre><code>if 'force' in kwargs and kwargs['force']:
</code></pre>
<p>And <a href="https://codereview.stackexchange.com/users/50391/emanuele-paolini">@EmanuelePaolini's</a> solution would become this:</p>
<pre><code>if kwargs.get('force'):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you really do want to check if the returned keyword argument <code>is True</code>, here's another slightly different way:</p>
<pre><code>if kwargs.get('force', False) is True:
</code></pre>
<p>I think adding the <code>False</code> argument is a little bit more explicit/clear to the reader. </p>
<p>Using the above, EVERY value returned by the <code>get</code> method will cause the clause to be skipped except for when it contains a value of <code>True</code>. </p>
<p>However, Python is very nice when it comes to type casting to boolean - very often it simply isn't necessary to explicitly check <code>is True</code>. If this is the case, you can simply do this: </p>
<pre><code>if kwargs.get('force', False):
</code></pre>
<p>Doing it this way, the statement reduces to <code>if False</code> in only a handful of cases. Here are some of them (possibly not all - though <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">the docs says</a> this covers all of them):</p>
<ul>
<li><code>False</code></li>
<li><code>None</code> - Python's null value</li>
<li><code>[]</code>, <code>()</code>, <code>{}</code>, <code>set()</code> - an empty container like a <code>list</code>, <code>tuple</code>, <code>dict</code>, or <code>set</code></li>
<li><code>''</code> or <code>""</code> - an empty string</li>
<li><code>0</code>, <code>0.0</code> - any numerical that is equivalent to zero</li>
<li>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value <code>False</code>.</li>
</ul>
<p>In this case, EVERY value returned by the <code>get</code> method will cause the clause to be executed except for when it contains a value that evaluates to <code>False</code>, such as one of the examples above. Any other value will evaluate to <code>True</code>. (Side note: containers that contain values which evaluate to <code>False</code> nonetheless evaluate to <code>True</code>, e.g., <code>[None, None]</code> or <code>(0, 0)</code> or <code>{False, False}</code>; this can be unexpected for inexperienced Python users).</p>
<p>If you want the key added to <code>kwargs</code> with a value of <code>False</code> at the point in time you check for it: </p>
<pre><code>if kwargs.setdefault('force', False):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better way:</p>
<pre><code>if kwargs.get('force') is True:
</code></pre>
<p>relies on the fact that <code>kwargs.get('force') is None</code> if <code>'force' not in kwargs'.</code></p>
</div>
<span class="comment-copy"><code>if kwargs.get('force', False):</code>, maybe? (documentation on <code>get</code> here: <a href="http://www.tutorialspoint.com/python/dictionary_get.htm" rel="nofollow noreferrer">tutorialspoint.com/python/dictionary_get.htm</a>)</span>
<span class="comment-copy">@NightShadeQueen No, because <code>kwargs.get('force', False)</code> will return <code>False</code> if <code>'force'</code> is found in <code>kwargs</code>.</span>
<span class="comment-copy">No, it just returns <code>False</code> if 'force' is NOT in kwargs. <code>{'a':'b'}.get('a', False)</code> returns <code>'b'</code>, for example.</span>
<span class="comment-copy">How do you know that the OP doesn't need to check if something is True? The code you propose is not equivalent to the one provided by the OP.</span>
<span class="comment-copy">@EmanuelePaolini The OP is explicitly checking if <code>kwargs["force"]</code> is <code>True</code>, so it can be shortened.</span>
<span class="comment-copy">If kwargs['force'] == 1 the condition kwargs['force'] is satisfied while (kwargs['force'] is True) is not satisfied.</span>
<span class="comment-copy">This is not equivalent to the condition given by the OP. See comments on @Ethan Bierlein answer.</span>
<span class="comment-copy">@EmanuelePaolini  Technically, you're right. However, since OP has a high rep and this is the first question OP has ever asked tagged Python, I surmised that OP probably is an inexperienced Python user. Since checking for <code>is True</code> in Python is kind of unusual, I was extrapolating that what OP really wants to do is check it the usual way. I should be more explicit about this, though.</span>
<span class="comment-copy">@EmanuelePaolini I edited to make my assumptions more explicit.</span>
