<div class="post-text" itemprop="text">
<p>I see there are similar questions here, but nothing that has totally helped me. 
I've also looked at the official documentation on namespaces but can't find anything that is really helping me, perhaps I'm just too new at XML formatting.
I understand that perhaps I need to create my own namespace dictionary? Either way, here is my situation:</p>
<p>I am getting a result from an API call, it gives me an XML that is stored as a string in my Python application. </p>
<p>What I'm trying to accomplish is just grab this XML, swap out a tiny value (The b:string value user ConditionValue/Default but that's irrelevant to this question)
and then save it as a string to send later on in a Rest POST call.</p>
<p>The source XML looks like this:</p>
<pre><code>&lt;Context xmlns="http://Test.the.Sdk/2010/07" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"&gt;
&lt;xmlns i:nil="true" xmlns="http://schema.test.org/2004/07/Test.Soa.Vocab" xmlns:a="http://schema.test.org/2004/07/System.Xml.Serialize"/&gt;
&lt;Conditions xmlns:a="http://schema.test.org/2004/07/Test.Soa.Vocab"&gt;
    &lt;a:Condition&gt;
        &lt;a:xmlns i:nil="true" xmlns:b="http://schema.test.org/2004/07/System.Xml.Serialize"/&gt;
        &lt;Identifier&gt;a23aacaf-9b6b-424f-92bb-5ab71505e3bc&lt;/Identifier&gt;
        &lt;Name&gt;Code&lt;/Name&gt;
        &lt;ParameterSelections/&gt;
        &lt;ParameterSetCollections/&gt;
        &lt;Parameters/&gt;
        &lt;Summary i:nil="true"/&gt;
        &lt;Instance&gt;25486d6c-36ba-4ab2-9fa6-0dbafbcf0389&lt;/Instance&gt;
        &lt;ConditionValue&gt;
            &lt;ComplexValue i:nil="true"/&gt;
            &lt;Text i:nil="true" xmlns:b="http://schemas.microsoft.com/2003/10/Serialization/Arrays"/&gt;
            &lt;Default&gt;
                &lt;ComplexValue i:nil="true"/&gt;
                &lt;Text xmlns:b="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;
                    &lt;b:string&gt;NULLCODE&lt;/b:string&gt;
                &lt;/Text&gt;
            &lt;/Default&gt;
        &lt;/ConditionValue&gt;
        &lt;TypeCode&gt;String&lt;/TypeCode&gt;
    &lt;/a:Condition&gt;
    &lt;a:Condition&gt;
        &lt;a:xmlns i:nil="true" xmlns:b="http://schema.test.org/2004/07/System.Xml.Serialize"/&gt;
        &lt;Identifier&gt;0af860f6-5611-4a23-96dc-eb3863975529&lt;/Identifier&gt;
        &lt;Name&gt;Content Type&lt;/Name&gt;
        &lt;ParameterSelections/&gt;
        &lt;ParameterSetCollections/&gt;
        &lt;Parameters/&gt;
        &lt;Summary i:nil="true"/&gt;
        &lt;Instance&gt;6364ec20-306a-4cab-aabc-8ec65c0903c9&lt;/Instance&gt;
        &lt;ConditionValue&gt;
            &lt;ComplexValue i:nil="true"/&gt;
            &lt;Text i:nil="true" xmlns:b="http://schemas.microsoft.com/2003/10/Serialization/Arrays"/&gt;
            &lt;Default&gt;
                &lt;ComplexValue i:nil="true"/&gt;
                &lt;Text xmlns:b="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;
                    &lt;b:string&gt;Standard&lt;/b:string&gt;
                &lt;/Text&gt;
            &lt;/Default&gt;
        &lt;/ConditionValue&gt;
        &lt;TypeCode&gt;String&lt;/TypeCode&gt;
    &lt;/a:Condition&gt;
&lt;/Conditions&gt;
</code></pre>
<p></p>
<p>My job is to swap out one of the values, retaining the entire structure of the source, and use this to submit a POST later on in the application. </p>
<p>The problem that I am having is that when it saves to a string or to a file, it totally messes up the namespaces:</p>
<pre><code>&lt;ns0:Context xmlns:ns0="http://Test.the.Sdk/2010/07" xmlns:ns1="http://schema.test.org/2004/07/Test.Soa.Vocab" xmlns:ns3="http://schemas.microsoft.com/2003/10/Serialization/Arrays" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
&lt;ns1:xmlns xsi:nil="true" /&gt;
&lt;ns0:Conditions&gt;
&lt;ns1:Condition&gt;
&lt;ns1:xmlns xsi:nil="true" /&gt;
&lt;ns0:Identifier&gt;a23aacaf-9b6b-424f-92bb-5ab71505e3bc&lt;/ns0:Identifier&gt;
&lt;ns0:Name&gt;Code&lt;/ns0:Name&gt;
&lt;ns0:ParameterSelections /&gt;
&lt;ns0:ParameterSetCollections /&gt;
&lt;ns0:Parameters /&gt;
&lt;ns0:Summary xsi:nil="true" /&gt;
&lt;ns0:Instance&gt;25486d6c-36ba-4ab2-9fa6-0dbafbcf0389&lt;/ns0:Instance&gt;
&lt;ns0:ConditionValue&gt;
&lt;ns0:ComplexValue xsi:nil="true" /&gt;
&lt;ns0:Text xsi:nil="true" /&gt;
&lt;ns0:Default&gt;
&lt;ns0:ComplexValue xsi:nil="true" /&gt;
&lt;ns0:Text&gt;
&lt;ns3:string&gt;NULLCODE&lt;/ns3:string&gt;
&lt;/ns0:Text&gt;
&lt;/ns0:Default&gt;
&lt;/ns0:ConditionValue&gt;
&lt;ns0:TypeCode&gt;String&lt;/ns0:TypeCode&gt;
&lt;/ns1:Condition&gt;
&lt;ns1:Condition&gt;
&lt;ns1:xmlns xsi:nil="true" /&gt;
&lt;ns0:Identifier&gt;0af860f6-5611-4a23-96dc-eb3863975529&lt;/ns0:Identifier&gt;
&lt;ns0:Name&gt;Content Type&lt;/ns0:Name&gt;
&lt;ns0:ParameterSelections /&gt;
&lt;ns0:ParameterSetCollections /&gt;
&lt;ns0:Parameters /&gt;
&lt;ns0:Summary xsi:nil="true" /&gt;
&lt;ns0:Instance&gt;6364ec20-306a-4cab-aabc-8ec65c0903c9&lt;/ns0:Instance&gt;
&lt;ns0:ConditionValue&gt;
&lt;ns0:ComplexValue xsi:nil="true" /&gt;
&lt;ns0:Text xsi:nil="true" /&gt;
&lt;ns0:Default&gt;
&lt;ns0:ComplexValue xsi:nil="true" /&gt;
&lt;ns0:Text&gt;
&lt;ns3:string&gt;Standard&lt;/ns3:string&gt;
&lt;/ns0:Text&gt;
&lt;/ns0:Default&gt;
&lt;/ns0:ConditionValue&gt;
&lt;ns0:TypeCode&gt;String&lt;/ns0:TypeCode&gt;
&lt;/ns1:Condition&gt;
&lt;/ns0:Conditions&gt;
</code></pre>
<p>I've narrowed the code down to the most basic form and I'm still getting the same results so it's not anything to do with how I'm manipulating the file normally:</p>
<pre><code>import xml.etree.ElementTree as ET
import requests

get_context_xml = 'http://localhost/testapi/returnxml' #returns first XML example above.
source_context_xml = requests.get(get_context_xml)

Tree = ET.fromstring(source_context_xml)

#Ensure the original namespaces are intact.
for Conditions in Tree.iter('{http://schema.test.org/2004/07/Test.Soa.Vocab}Condition'): 
    print "success"

with open('/home/memyself/output.xml','w') as f:
    f.write(ET.tostring(Tree))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace" rel="nofollow noreferrer">register</a> the prefix and the namespace before you do <code>fromstring()</code> (Reading the xml) to avoid the default namespace prefixes (like <code>ns0</code> and <code>ns1</code> , etc.) .</p>
<p>You can use the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace" rel="nofollow noreferrer"><code>ET.register_namespace()</code></a> function for that, Example -</p>
<pre><code>ET.register_namespace('&lt;prefix&gt;','http://Test.the.Sdk/2010/07')
ET.register_namespace('a','http://schema.test.org/2004/07/Test.Soa.Vocab')
</code></pre>
<p>You can leave the <code>&lt;prefix&gt;</code> empty if you do not want a prefix.</p>
<hr/>
<p>Example/Demo -</p>
<pre><code>&gt;&gt;&gt; r = ET.fromstring('&lt;a xmlns="blah"&gt;a&lt;/a&gt;')
&gt;&gt;&gt; ET.tostring(r)
b'&lt;ns0:a xmlns:ns0="blah"&gt;a&lt;/ns0:a&gt;'
&gt;&gt;&gt; ET.register_namespace('','blah')
&gt;&gt;&gt; r = ET.fromstring('&lt;a xmlns="blah"&gt;a&lt;/a&gt;')
&gt;&gt;&gt; ET.tostring(r)
b'&lt;a xmlns="blah"&gt;a&lt;/a&gt;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off, <a href="https://stackoverflow.com/tour">welcome</a> to the StackOverflow network! Technically <a href="https://stackoverflow.com/users/795990/anand-s-kumar">@anand-s-kumar</a> is correct. However there was a minor misuse of the <code>toString</code> function, and the fact that namespaces might not always be known by the code or the same between tags or XML files. Also, inconsistencies between the <code>lxml</code> and <code>xml.etree</code> libraries and Python 2.x and 3.x make handling this difficult.</p>
<p>This function iterates through all of the children elements in the XML tree <code>tree</code> that is passed in, and then edits the XML tags to remove the namespaces. Note that by doing this, some <strong>data may be lost</strong>.</p>
<pre><code>def remove_namespaces(tree):
    for el in tree.getiterator():
        match = re.match("^(?:\{.*?\})?(.*)$", el.tag)
        if match:
            el.tag = match.group(1)
</code></pre>
<p>I myself just ran into this problem, and hacked together a quick solution. I tested this on about 81,000 XML files (averaging around 150 MB each) that had this problem, and all of them were fixed. Note that this isn't exactly an optimal solution, but it is relatively efficient and worked quite well for me.</p>
<p><strong>CREDIT:</strong> Idea and code structure originally from <a href="http://homework.nwsnet.de/releases/45be/" rel="nofollow noreferrer">Jochen Kupperschmidt</a>.</p>
</div>
<span class="comment-copy">You tagged the question with "lxml". Did you try it? I think most if not all of the problems will go away if you do. lxml is similar to ElementTree, but leaves your namespaces alone.</span>
<span class="comment-copy">Thanks  I'm confused on what values to set for the prefixes.  Looking at all the declarations throughout the original XML, how can I correlate which prefix to assign to which namespace?  <code>xmlns="http://Test.the.Sdk/2010/07" xmlns="http://schema.test.org/2004/07/Test.Soa.Vocab" xmlns:a="http://schema.test.org/2004/07/System.Xml.Serialize" xmlns:a="http://schema.test.org/2004/07/Test.Soa.Vocab" xmlns:b="http://schemas.microsoft.com/2003/10/Serialization/Arrays" xmlns:b="http://schema.test.org/2004/07/System.Xml.Serialize" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"</code></span>
<span class="comment-copy">Assign the prefix after the <code>:</code> to the namespace, if no such item in the <code>xmlns</code> line, then set the prefix as empty. Example - <code>b</code> for <code>http://schemas.microsoft.com/2003/10/Serialization/Arrays</code> and <code>b</code> for <code>http://schema.test.org/2004/07/System.Xml.Serialize</code> . But you can also specify your own prefixes, which are more readable (the source xml seems to be using same prefix for multiple namespaces , which though valid, may not be good for readability) .</span>
<span class="comment-copy">Unfortunately I can't get it to save in the exact same format it's opened as.  Now it added a larger declaration of prefixes and kept the ns0  There is no way to make the ETree just keep the formatting the way it was opened?</span>
<span class="comment-copy">Is it still <code>ns0</code> and <code>ns1</code> ? And you did add the namesapces before reading the xml right? As suggested - <i>before you do fromstring() (Reading the xml)</i></span>
<span class="comment-copy">Correct, the first lines in my script are: <code>ET.register_namespace('', 'http://Telestream.Vantage.Sdk/2010/07') ET.register_namespace('i', 'http://www.w3.org/2001/XMLSchema-instance') ET.register_namespace('', 'http://schemas.datacontract.org/2004/07/Telestream.Soa.Vocabulary') ET.register_namespace('b', 'http://schemas.datacontract.org/2004/07/System.Xml.Serialization') ET.register_namespace('a', 'http://schemas.datacontract.org/2004/07/System.Xml.Serialization') ET.register_namespace('a', 'http://schemas.datacontract.org/2004/07/Telestream.Soa.Vocabulary') </code></span>
<span class="comment-copy">Thanks and very interesting. I am going to submit a POST through a REST API and I am not sure if the receiving node will accept it without namespaces. That would be ideal if it ignores them. I'll see what I can whip up. Thanks.</span>
