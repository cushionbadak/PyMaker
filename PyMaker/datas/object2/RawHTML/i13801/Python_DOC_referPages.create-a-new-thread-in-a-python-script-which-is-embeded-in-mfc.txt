<div class="post-text" itemprop="text">
<p>I'm designed a small tool with MFC and python. 
In this program, I use C++ to cooperate with python API. </p>
<p>I need: </p>
<ol>
<li>C++ function A calls Py_Initialize(), and then call python function B with Python API. </li>
<li>In the python script Python function B starts a new python thread E, which will create a new file and make some output to this file. </li>
<li>Then C++ function F calls Py_Finalize(). End. </li>
</ol>
<p>But things works unexpectedly. 
B can be called, but E will not start. After calling F, Py_Finalize() is called, then E will start and create the new file. </p>
<p>I'm wondering what's wrong with this? It seems python is blocked by C++. Does this related with python GIL? If so, what should I do? </p>
</div>
<div class="post-text" itemprop="text">
<p>I solved the problem and would like to paste it here if someone else needs. </p>
<ol>
<li>After A calls Py_Initialize(), PyEval_InitThreads() is also needed. </li>
<li>After A calls Python function B, GIL needs to be released by PyEval_ReleaseThread(PyThreadState_Get()). Then thread E can startup. </li>
<li>After E is over, PyGILState_Ensure() should be called in C++ to get back the lock. </li>
</ol>
</div>
<span class="comment-copy">Is your C++ code waiting for the Python code?  Is it <a href="https://docs.python.org/3/c-api/init.html#releasing-the-gil-from-extension-code" rel="nofollow noreferrer">holding the GIL</a> while doing so?</span>
<span class="comment-copy">Also, what is "D"?</span>
<span class="comment-copy">Thanks for your response.  'D' is a typo and it should be E. And I modified the question. :).. B will return after it create the new thread. C++ can get the return value of B. But F will be called later. Should C++ release the lock during the interval between B and F?</span>
<span class="comment-copy">I'm rather shocked that Python is capable of running any code whatsoever after you call Py_Finalize()...  In any event, Python code will not run while the GIL is held.</span>
<span class="comment-copy">I rechecked the code and noticed: In F, I called Py_XDECREF(pModule) (pModule is defined in A as  pModule = PyImport_ImportModule(PYTHON_NAME)) and then Py_Finalize(). After Py_XDECREF is called, the file is created, but no output in the file. After Py_Finalize is called, output appears....Is this normal....?</span>
