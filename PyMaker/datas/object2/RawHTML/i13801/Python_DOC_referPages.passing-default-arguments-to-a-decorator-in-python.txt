<div class="post-text" itemprop="text">
<p>I am trying to find a way to pass my functions default arguments to the decorator. I have to say I am fairly new to the decorator business, so maybe I just don't understand it properly, but I have not found any answers yet.</p>
<p>So here my modified example from the python functools.wraps manual page.</p>
<pre><code>from functools import wraps
def my_decorator(f):
    @wraps(f)
    def wrapper(*args, **kwds):
            print 'Calling decorated function'
            print 'args:', args 
            print 'kwargs:', kwds   
            return f(*args, **kwds)
    return wrapper

@my_decorator
def example(i, j=0):
    """Docstring"""
    print 'Called example function'

example(i=1)
</code></pre>
<p>I want the <code>j=0</code> to be passed, too. So that the output should be:</p>
<pre><code>Calling decorated function
args: ()
kwargs: {'i': 1, 'j': 0}
Called example function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get default argument values by using <code>__defaults__</code> special attribute.</p>
<pre><code>def my_decorator(f):
@wraps(f)
def wrapper(*args, **kwds):
    print('def args values', f.__defaults__)
    return f(*args, **kwds)
return wrapper
</code></pre>
<p>Reference: look for <code>__defaults__</code> in <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy</a></p>
<blockquote>
<p>A tuple containing default argument values for those arguments that have defaults, or None if no arguments have a default value</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Default argument is part of function signature. Its not exists in decorator call.</p>
<p>So to use it in wrapper you need to get it out like shown in <a href="https://stackoverflow.com/questions/12627118/get-a-function-arguments-default-value">this</a> question.</p>
<pre><code>import inspect

def get_default_args(func):
    signature = inspect.signature(func)
    return {
        k: v.default
        for k, v in signature.parameters.items()
        if v.default is not inspect.Parameter.empty
    }

def my_decorator(f):
    @wraps(f)
    def wrapper(*args, **kwds):
            print('Calling decorated function')
            print('args:', args)
            kwargs = get_default_args(f)
            kwargs.update(kwds)
            print('kwargs:', kwargs)
            return f(*args, **kwds)
    return wrapper

@my_decorator
def example(i, j=0):
    """Docstring"""
    print('Called example function')

example(i=1)
</code></pre>
<p>Output:</p>
<pre><code>Calling decorated function
args: ()
kwargs: {'i': 1, 'j': 0}
Called example function
</code></pre>
</div>
<span class="comment-copy"><code>j=0</code> <i>is</i> passed, but <b>not inside <code>wrapper</code></b>. If you <code>print i, j</code> inside <code>example</code>, you'll see that it is there. You could use e.g. <code>inspect.getargspec(f)</code> to see what defaults are set on the function being decorated, but why do you need to access the default in <code>wrapper</code>?</span>
<span class="comment-copy">I know its passed into <code>example</code>, but I need <code>j</code> to be passed to the <code>wrapper</code> because it is needed for calculations i am doing with with many several functions. But generally using <code>inspect.getargspec(f)</code> would work, thank you.</span>
<span class="comment-copy">But this doesnt work!</span>
