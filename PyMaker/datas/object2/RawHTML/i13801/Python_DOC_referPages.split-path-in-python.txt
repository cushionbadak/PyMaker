<div class="post-text" itemprop="text">
<p>How I could split this: </p>
<pre><code>C:\my_dir\repo\branch
</code></pre>
<p>to:</p>
<pre><code>['C:\my_dir', rest_part_of_string]
</code></pre>
<p>where <code>rest_part_of_string</code> can be one string or could be splitted every <code>\</code>. I don't care about rest, i just want first two elements together.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/howto/regex.html" rel="nofollow">regular expression</a> (<a href="https://docs.python.org/2/library/re.html" rel="nofollow"><code>re</code> module documentation</a>):</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; print(re.match(r'[^\\]+\\[^\\]+', r'C:\my_dir\repo\branch').group())
C:\my_dir

&gt;&gt;&gt; re.findall(r'[^\\]+\\[^\\]+|.+', r'C:\my_dir\repo\branch')
['C:\\my_dir', '\\repo\\branch']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could split the path on <code>\</code> and rejoin based on index:</p>
<pre><code>&gt;&gt;&gt;my_path = r'C:\my_dir\repo\branch'
&gt;&gt;&gt;split_path = ["\\".join(my_path.split("\\")[:2]), "\\".join(my_path.split("\\")[2:])]
['C:\\my_dir', 'repo\\branch']

&gt;&gt;&gt; first, last = "\\".join(x.split("\\")[:2]), "\\".join(x.split("\\")[2:])
&gt;&gt;&gt; print first, last
C:\my_dir repo\branch
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>python 3.4 has methods for that (note the forward slashes instead of the backslashes (or double the backslashes))</p>
<p><a href="https://docs.python.org/3/library/pathlib.html#pure-paths" rel="nofollow">pathlib documentation</a></p>
<pre><code># python 3.4
from pathlib import Path

p  = Path('C:/my_dir/repo/branch')

print(p.parent)
print(p.name)
</code></pre>
<p>for what you need <code>parts</code> is interesting:</p>
<pre><code>print(p.parts)
# -&gt; ('C:', 'my_dir', 'repo', 'branch')
print('\\'.join(p.parts[:2]), ' -- ', '\\'.join( p.parts[2:])) 
# -&gt; C:\my_dir  --  repo\branch
</code></pre>
<p>in python 2.7 this needs a bit more work:</p>
<pre><code>import os

p = 'C:/my_dir/repo/branch'

def split_path(path):
    parts = []
    while 1:
        path, folder = os.path.split(path)
        if folder:
            parts.append(folder)
        else:
            if path:
                parts.append(path)
            break
    parts.reverse()
    return parts

parts = split_path(p)
print('\\'.join(parts[:2]), ' -- ', '\\'.join(parts[2:]))
# -&gt; C:\my_dir  --  repo\branch
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need <a href="https://docs.python.org/2/library/os.path.html#os.path.dirname" rel="nofollow"><code>os.path.dirname()</code></a> (or <code>os.path.split</code>), applied recursively or iteratively, until you cannot go up in the directory hierarchy further.</p>
<p>In general the functions provided by <code>os.path</code> should work better that re-invented wheels, due to better cross-platform support.  There are a large number of primitives from which you can build your own path-manipulating function.</p>
</div>
<span class="comment-copy">use  raw strings?? r"C:\my_dir\repo\branch"  <a href="https://pythonconquerstheuniverse.wordpress.com/2008/06/04/gotcha-%E2%80%94-backslashes-in-windows-filenames/" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">wow, nice. Thank you for solution.</span>
<span class="comment-copy">@MateuszSzyma≈Ñski, Welcome to Stack Overflow! There are people who have tried to answer your question. If this helped you, you can tell the community so by <a href="http://meta.stackoverflow.com/a/5235">accepting the answer</a> that was most useful for you.</span>
<span class="comment-copy">Yeah, but i have to wait about 1 hour before i can do it. And yesterday i had no access to SO. Thanks :)</span>
<span class="comment-copy">pathlib has been backported to Python 2 as <a href="https://pypi.org/project/pathlib2/" rel="nofollow noreferrer">pathlib2</a></span>
