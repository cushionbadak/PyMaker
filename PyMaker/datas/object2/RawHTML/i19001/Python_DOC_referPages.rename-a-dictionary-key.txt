<div class="post-text" itemprop="text">
<p>Is there a way to rename a dictionary key, without reassigning its value to a new name and removing the old name key; and without iterating through dict key/value?
<br/><br/>In case of OrderedDict, do the same, while keeping that key's position.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a regular dict, you can use:</p>
<pre><code>mydict[new_key] = mydict.pop(old_key)
</code></pre>
<p>For an OrderedDict, I think you must build an entirely new one using a comprehension.  </p>
<pre><code>&gt;&gt;&gt; OrderedDict(zip('123', 'abc'))
OrderedDict([('1', 'a'), ('2', 'b'), ('3', 'c')])
&gt;&gt;&gt; oldkey, newkey = '2', 'potato'
&gt;&gt;&gt; OrderedDict((newkey if k == oldkey else k, v) for k, v in _.viewitems())
OrderedDict([('1', 'a'), ('potato', 'b'), ('3', 'c')])
</code></pre>
<p>Modifying the key itself, as this question seems to be asking, is impractical because dict keys are usually <em>immutable</em> objects such as numbers, strings or tuples.  Instead of trying to modify the key, reassigning the value to a new key and removing the old key is how you can achieve the "rename" in python.  </p>
</div>
<div class="post-text" itemprop="text">
<p>best method in 1 line:</p>
<pre><code>&gt;&gt;&gt; d = {'test':[0,1,2]}
&gt;&gt;&gt; d['test2'] = d.pop('test')
&gt;&gt;&gt; d
{'test2': [0, 1, 2]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a check for <code>newkey!=oldkey</code>, this way you can do:</p>
<pre><code>if newkey!=oldkey:  
    dictionary[newkey] = dictionary[oldkey]
    del dictionary[oldkey]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use this <a href="http://code.activestate.com/recipes/576669/" rel="noreferrer"><code>OrderedDict recipe</code></a> written by Raymond Hettinger and modify it to add a <code>rename</code> method, but this is going to be a O(N) in complexity:</p>
<pre><code>def rename(self,key,new_key):
    ind = self._keys.index(key)  #get the index of old key, O(N) operation
    self._keys[ind] = new_key    #replace old key with new key in self._keys
    self[new_key] = self[key]    #add the new key, this is added at the end of self._keys
    self._keys.pop(-1)           #pop the last item in self._keys
</code></pre>
<p>Example:</p>
<pre><code>dic = OrderedDict((("a",1),("b",2),("c",3)))
print dic
dic.rename("a","foo")
dic.rename("b","bar")
dic["d"] = 5
dic.rename("d","spam")
for k,v in  dic.items():
    print k,v
</code></pre>
<p><strong>output:</strong></p>
<pre><code>OrderedDict({'a': 1, 'b': 2, 'c': 3})
foo 1
bar 2
c 3
spam 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A few people before me mentioned the <code>.pop</code> trick to delete and create a key in a one-liner.</p>
<p>I personally find the more explicit implementation more readable:</p>
<pre><code>d = {'a': 1, 'b': 2}
v = d['b']
del d['b']
d['c'] = v
</code></pre>
<p>The code above returns <code>{'a': 1, 'c': 2}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Other answers are pretty good.But in python3.6, regular dict also has order. So it's hard to keep key's position in normal case.</p>
<pre><code>def rename(old_dict,old_name,new_name):
    new_dict = {}
    for key,value in zip(old_dict.keys(),old_dict.values()):
        new_key = key if key != old_name else new_name
        new_dict[new_key] = old_dict[key]
    return new_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even if its a list of dict just convert it to string.</p>
<p><strong>NOTE</strong> : Make sure you dont have values name same as key name.</p>
<p>Might work for someone</p>
<pre><code>import json
d = [{'a':1,'b':2},{'a':2,'b':3}]
d = json.loads(json.dumps(d).replace('"a"','"newKey"'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am using @wim 's answer above, with dict.pop() when renaming keys, but I found a gotcha.  Cycling through the dict to change the keys, without separating the list of old keys completely from the dict instance, resulted in cycling new, changed keys into the loop, and missing some existing keys. </p>
<p>To start with, I did it this way:</p>
<pre><code>for current_key in my_dict:
    new_key = current_key.replace(':','_')
    fixed_metadata[new_key] = fixed_metadata.pop(current_key)
</code></pre>
<p>I found that cycling through the dict in this way, the dictionary kept finding keys even when it shouldn't, i.e., the new keys, the ones I had changed!  I needed to separate the instances completely from each other to (a) avoid finding my own changed keys in the for loop, and (b) find some keys that were not being found within the loop for some reason.</p>
<p>I am doing this now:</p>
<pre><code>current_keys = list(my_dict.keys())
for current_key in current_keys:
    and so on...
</code></pre>
<p>Converting the my_dict.keys() to a list was necessary to get free of the reference to the changing dict.  Just using my_dict.keys() kept me tied to the original instance, with the strange side effects.</p>
</div>
<span class="comment-copy">what exactly do you mean by "without reassigning its value to a new name and removing the old name key"?  the way i see it, that is the definition of renaming a key, and all of the answers below reassign the value and remove the old key name. you have yet to accept an answer, so perhaps these haven't accomplished what you're seeking?</span>
<span class="comment-copy">You really need to specify version number(s).  <b><a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">As of Python 3.7, the language spec now guarantees that dicts follow insertion order</a></b>. That also makes OrderedDict mostly obsolete (unless a) you want code that also backports to 2.x or 3.6- or b) you care about the issues listed in <a href="https://stackoverflow.com/questions/50872498/will-ordereddict-become-redundant-in-python-3-7"><i>Will OrderedDict become redundant in Python 3.7?</i></a>). And back in 3.6, dictionary insertion order was guaranteed by the CPython implementation (but not the language spec).</span>
<span class="comment-copy">For python 3.5, I think <code>dict.pop</code> is workable for an OrderedDict based on my test.</span>
<span class="comment-copy">Nope, <code>OrderedDict</code> will preserve insertion order, which is not what the question asked about.</span>
<span class="comment-copy">You are right, my mistake.</span>
<span class="comment-copy">what if you have <code>d = {('test', 'foo'):[0,1,2]}</code> ?</span>
<span class="comment-copy">@PetrFedosov, then you do <code>d[('new', 'key')] = d.pop(('test', 'foo'))</code></span>
<span class="comment-copy">This answer came <i>two years</i> after wim's answer which suggests the exact same thing, with no additional information. What am I missing?</span>
<span class="comment-copy">@AndrasDeak the difference between a dict() and an OrderedDict()</span>
<span class="comment-copy"><a href="https://stackoverflow.com/revisions/16475444/1">wim's answer in its initial revision from 2013</a>, there have only been additions since. The orderedness only comes from OP's criterion.</span>
<span class="comment-copy">this works beautifully, but does not maintain the original order because the new key gets added at the end by default (in python3).</span>
<span class="comment-copy">@szeitlin you shouldn't rely on <code>dict</code> order, even if python3.6+ intializes it in ordered form, previous versions don't and it's not really a feature just an afteraffect of how py3.6+ dicts were change. Use <code>OrderedDict</code> if you care about order.</span>
<span class="comment-copy">Thanks @Granitosaurus, I did not need you to explain that to me. That was not the point of my comment.</span>
<span class="comment-copy">@szeitlin your comment implied that the fact that it changes the dict order matters in some way, shape or form when in reality no one should rely on dictionary order so this fact is completely irrelevant</span>
<span class="comment-copy">Looks like a very good approach, but how can I add that to my script?</span>
<span class="comment-copy">@MERose Add the Python file somewhere in your module search path and import <code>OrderedDict</code> from it. But I would recommend: Create a class that inherits from <code>OrderedDict</code> and add a <code>rename</code> method to it.</span>
<span class="comment-copy">Seems like OrderedDict has since been rewritten to use a doubly-linked list, so there's probably still a way to do this, but it requires a lot more acrobatics. :-/</span>
