<div class="post-text" itemprop="text">
<p>Maybe some already asked this but I didn't find it and I wanted to know how to embed variables into a string in Python. I usually do it like this:</p>
<pre><code>print('Hi, my name is %s and my age is %d' %(name, age))
</code></pre>
<p>But sometimes is confusing and with ruby it would be like this</p>
<pre><code>puts('Hi, my name is #{name} and my age is #{age}')
</code></pre>
<p>Is there any way to do in Python like I to it in Ruby?</p>
</div>
<div class="post-text" itemprop="text">
<p>From Python 3.6 onwards, you can use an <a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer"><em>Formatting string literal</em></a> (aka <em>f-strings</em>), which takes any valid Python expression inside <code>{...}</code> curly braces, followed by optional formatting instructions:</p>
<pre><code>print(f'Hi, my name is {name} and my age is {age:d}')
</code></pre>
<p>Here <code>name</code> and <code>age</code> are both simple expressions that produce the value for that name.</p>
<p>In versions preceding Python 3.6, you can use <a href="http://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a>, paired with either <a href="http://docs.python.org/3/library/functions.html#locals()" rel="nofollow noreferrer"><code>locals()</code></a> or <a href="http://docs.python.org/3/library/functions.html#globals()" rel="nofollow noreferrer"><code>globals()</code></a>:</p>
<pre><code>print('Hi, my name is {name} and my age is {age}'.format(**locals()))
</code></pre>
<p>As you can see the format is rather close to Ruby's. The <code>locals()</code> and <code>globals()</code> methods return namespaces as a dictionary, and the <code>**</code> keyword argument splash syntax make it possible for the <code>str.format()</code> call to access all names in the given namespace.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; name = 'Martijn'
&gt;&gt;&gt; age = 40
&gt;&gt;&gt; print('Hi, my name is {name} and my age is {age}'.format(**locals()))
Hi, my name is Martijn and my age is 40
</code></pre>
<p>Note however that explicit is better than implicit and you should really pass in <code>name</code> and <code>age</code> as arguments:</p>
<pre><code>print('Hi, my name is {name} and my age is {age}'.format(name=name, age=age)
</code></pre>
<p>or use positional arguments:</p>
<pre><code>print('Hi, my name is {} and my age is {}'.format(name, age))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use:</p>
<pre><code>dicta = {'hehe' : 'hihi', 'haha': 'foo'}
print 'Yo %(hehe)s %(haha)s' % dicta
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative way that uses exactly Ruby's syntax for the format string:</p>
<pre><code>import string
class RubyTemplate(string.Template):
    delimiter = '#'
</code></pre>
<p>Used as:</p>
<pre><code>&gt;&gt;&gt; t = RubyTemplate('Hi, my name is #{name} and my age is #{age}')
&gt;&gt;&gt; name = 'John Doe'
&gt;&gt;&gt; age = 42
&gt;&gt;&gt; t.substitute(**locals())
'Hi, my name is John Doe and my age is 42'
</code></pre>
<p>You can then create a function such as:</p>
<pre><code>def print_template(template, vars):
    print(RubyTemplate(template).substitute(**vars))
</code></pre>
<p>And use it as:</p>
<pre><code>&gt;&gt;&gt; print_template('Hi, my name is #{name} and my age is #{age}', locals())
Hi, my name is John Doe and my age is 42
</code></pre>
<hr/>
<p>On a side note: even python's <code>%</code> allow this kind of interpolation:</p>
<pre><code>&gt;&gt;&gt; 'Hi, my name is %(name)s and my age is %(age)d' % locals()
'Hi, my name is John Doe and my age is 42'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str.format</code> is the new way to do it, but this also works:</p>
<pre><code>print('Hi, my name is %(name)s and my age is %(age)d' % {
   'name': name,
   'age': age,
})
</code></pre>
<p>Which is really the same as this, if the variables already exist:</p>
<pre><code>print('Hi, my name is %(name)s and my age is %(age)d' % locals())
</code></pre>
</div>
<span class="comment-copy">Actually this looks more complicated, I'm looking for something simple.</span>
<span class="comment-copy">@AndresOrozco I never stated this was simpler, I just wanted to provide an alternative that matches ruby's "template syntax".</span>
<span class="comment-copy">Yeah, But I was asking for something simple, like in Ruby.</span>
<span class="comment-copy">@AndresOrozco The short answer for your question, which stated more clearly is "does python provide <i>automatic</i> string interpolation?", the answer is <i>no</i> and there is no way to do that. You can use <code>str.format</code>, use <code>%(name)s</code> but you must <i>always</i> pass explicitly the objects to interpolate. The only way to do automatic string interpolation is to hack the bytecode of functions to automatically insert the calls to <code>str.format</code>, but you probably cannot guarantee it will work correctly most of the time.</span>
<span class="comment-copy">Okay, Thank you.</span>
