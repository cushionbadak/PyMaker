<div class="post-text" itemprop="text">
<p>I have some bash code which <a href="https://github.com/adamatan/rmf" rel="nofollow">moves files and directory to <code>/tmp/rmf</code> rather than deleting them</a>, for safety purposes.</p>
<p>I am migrating the code to Python to add some functionality. One of the added features is checking the available size on <code>/tmp</code> and asserting that the moved directory can fit in <code>/tmp</code>.</p>
<p>Checking for available space is done using <a href="http://docs.python.org/2/library/os.html#os.statvfs" rel="nofollow">os.statvfs</a>, but how can I measure the disk usage of the moved directory?</p>
<p>I could either call <code>du</code> using <code>subprocess</code>, or recursively iterate over the directory tree and sum the sizes of each file. Which approach would be better?</p>
</div>
<div class="post-text" itemprop="text">
<p>This should do the trick:</p>
<pre><code>import os
path = 'THE PATH OF THE DIRECTORY YOU WANT TO FETCH'
os.statvfs(path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you might want to reconsider your strategy. Two reasons:</p>
<ol>
<li><p>Checking if you can move a file, asserting you can move a file, and then moving a file provides a built-in race-condition to the operation. A big file gets created in /tmp/ after you've asserted but before you've moved your file.. Doh.</p></li>
<li><p>Moving the file across filesystems will result in a huge amount of overhead. This is why on OSX each volume has their own 'Trash' directory. Instead of moving the blocks that compose the file, you just create a new inode that points to the existing data.</p></li>
</ol>
<p>I'd consider how long the file needs to be available and the visibility to consumers of the files. If it's all automated stuff happening on the backend - renaming a file to 'hide' it from computer and human consumers is easy enough in most cases and has the added benefit of being an atomic operation)</p>
<p>Occasionally scan the filesystem for 'old' files to cull and rm them after some grace period. No drama. Also makes restoring files a lot easier since it's just a rename to restore.</p>
</div>
<span class="comment-copy">See this: <a href="http://stackoverflow.com/questions/1392413/calculating-a-directory-size-using-python" title="calculating a directory size using python">stackoverflow.com/questions/1392413/â€¦</a></span>
<span class="comment-copy">This will only work in linux/Unix: <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer">Availability: Unix.</a></span>
<span class="comment-copy">statvfs can only give FS info not just a single path</span>
