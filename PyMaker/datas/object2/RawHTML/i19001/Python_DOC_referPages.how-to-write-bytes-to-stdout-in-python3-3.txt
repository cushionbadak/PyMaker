<div class="post-text" itemprop="text">
<p>A test file named == a.py ==</p>
<pre><code>import os

if __name__ == '__main__':
    for x in range(0,1000):
        try:
            os.sys.stdout.buffer.write(b"hello\r\n")
            os.sys.stdout.buffer.flush()
        except OSError:
            pass
</code></pre>
<p>It is ok when it runs alone. But there is problem in following case:</p>
<ol>
<li>Run python a.py | more</li>
<li>Press ctrl+c to exit</li>
</ol>
<p>Then I got Exception OSError: OSError(22, 'Invalid argument') in &lt;_io.TextIOWrapper name='' mode='w' encoding='cp936'&gt; ignored</p>
<p>I have catch the OSError already around the os.sys.stdout.buffer operations, but it still goes wrong.</p>
<p>If i don't use os.sys.stdout.buffer.flush, then there's no error message. If I just use print(), everything is OK.</p>
<p>So how to write bytes to the stdout correctly?</p>
<p>I am using Windows 7 64 bit and Python 3.3.0 32 bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/os.html#os.fdopen" rel="nofollow noreferrer"><code>os.fdopen</code></a> to reopen stdout with different mode. You can get the file number for stdout with <a href="https://docs.python.org/3/library/io.html#io.IOBase.fileno" rel="nofollow noreferrer"><code>sys.stdout.fileno()</code></a>.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; fp = os.fdopen(sys.stdout.fileno(), 'wb')
&gt;&gt;&gt; fp.write(b'Hello, world')
12
&gt;&gt;&gt; sys.stdout.mode
'w'
&gt;&gt;&gt; fp.mode
'wb'
&gt;&gt;&gt; fp.flush()
Hello, world&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/908331/how-to-write-binary-data-in-stdout-in-python-3">How to write binary data in stdout in python 3?</a></span>
<span class="comment-copy">It's interesting to notice that this works fine both for python 2 and 3.</span>
<span class="comment-copy">You should add <code>closefd=False</code> if using <code>os.fdopen()</code> as a context manager, to avoid it closing the <code>sys.stderr</code> file and then not being able to print errors from there onwards in your script.</span>
