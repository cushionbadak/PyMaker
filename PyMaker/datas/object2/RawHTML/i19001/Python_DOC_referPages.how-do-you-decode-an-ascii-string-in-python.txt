<div class="post-text" itemprop="text">
<p>For example, in your python shell(IDLE):</p>
<pre><code>&gt;&gt;&gt; a = "\x3cdiv\x3e"
&gt;&gt;&gt; print a
</code></pre>
<p>The result you get is:</p>
<pre><code>&lt;div&gt;
</code></pre>
<p>but if <code>a</code> is an ascii encoded string:</p>
<pre><code>&gt;&gt;&gt; a = "\\x3cdiv\\x3e" ## it's the actual \x3cdiv\x3e string if you read it from a file
&gt;&gt;&gt; print a
</code></pre>
<p>The result you get is:</p>
<pre><code>\x3cdiv\x3e
</code></pre>
<p>Now what i really want from <code>a</code> is <code>&lt;div&gt;</code>, so I did this:</p>
<pre><code>&gt;&gt;&gt; b = a.decode("ascii")
&gt;&gt;&gt; print b
</code></pre>
<p>BUT surprisingly I did NOT get the result I want, it's still: </p>
<pre><code>\x3cdiv\x3e
</code></pre>
<p>So basically what do I do to convert <code>a</code>, which is <code>\x3cdiv\x3e</code> to <code>b</code>, which should be <code>&lt;div&gt;</code>?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = rb"\x3cdiv\x3e"
&gt;&gt;&gt; a.decode('unicode_escape')
'&lt;div&gt;'
</code></pre>
<p>Also check out some interesting <a href="http://docs.python.org/3/library/codecs.html#standard-encodings" rel="noreferrer">codecs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>With <strong><em>python 3.x</em></strong>, you would adapt Kabie answer to</p>
<pre><code>a = b"\x3cdiv\x3e"
a.decode('unicode_escape')
</code></pre>
<p>or </p>
<pre><code>a = b"\x3cdiv\x3e"
a.decode('ascii')
</code></pre>
<p>both give</p>
<pre><code>&gt;&gt;&gt; a
b'&lt;div&gt;'
</code></pre>
<p>What is <code>b</code> prefix for ?</p>
<blockquote>
<p>Bytes literals are always prefixed with 'b' or 'B'; they produce an
  instance of the bytes type instead of the str type. They may only
  contain ASCII characters; bytes with a numeric value of 128 or greater
  must be expressed with escapes.</p>
</blockquote>
</div>
<span class="comment-copy">WHere are you getting the string "a" from, and how?  I suspect something about how you're getting the input is confused.  "Decode" in  Python refers to converting from 8 bits to full Unicode; it has nothing to do with language-specific escape sequences like backslashes an such.</span>
<span class="comment-copy">@LeeDanielCrocker: Read it from a html source file.</span>
<span class="comment-copy">That's still not enough information. Where's the code that read it, and where's the input file, and how did the input file get created?  There's really no reason to have the backslash-encoded strings in a string that way unless you're doing something unusual.</span>
<span class="comment-copy">@LeeDanielCrocker: It's everywhere. Mostly used in javascript, encoded to hide an iframe, in case you are interested: <a href="http://ddecode.com/hexdecoder/?results=9bd91cc904cac5ec26673e7adf9157f8" rel="nofollow noreferrer">ddecode.com/hexdecoder/â€¦</a></span>
<span class="comment-copy">That page you point to is using Javascript's "unescape" method, which claims to use URL-encoding, but URL-encoding doesn't use the backslash codes.  So it's some format unique to Javascript. I can't find it documented anywhere, and in fact some resources I found specifically don't work with the \x notation. You'll still have to be more specific about where you're getting your input.</span>
<span class="comment-copy">Thanks a lot mate!! Exactly what I'm looking for!!</span>
