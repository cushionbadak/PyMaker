<div class="post-text" itemprop="text">
<p>There is this code:</p>
<pre><code>def f():
  return 3
  return (i for i in range(10))

x = f()
print(type(x)) # int

def g():
  return 3
  for i in range(10):
    yield i

y = g()
print(type(y)) # generator
</code></pre>
<p>Why <code>f</code> returns <code>int</code> when there is return generator statement? I guess that <code>yield</code> and generator expression both returns generators (at least when the statement <code>return 3</code> is removed) but are there some other rules of function compilation when there is once generator expression returned and second time when there is <code>yield</code> keyword inside?</p>
<p>This was tested in Python 3.3</p>
</div>
<div class="post-text" itemprop="text">
<p>As <em>soon</em> as you use a <code>yield</code> statement in a function body, it becomes a generator. Calling a generator function just returns that generator object. It is no longer a normal function; the generator object has taken over control instead.</p>
<p>From the <a href="http://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow"><code>yield</code> expression documentation</a>:</p>
<blockquote>
<p>Using a <code>yield</code> expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.</p>
<p>When a generator function is called, it returns an iterator known as a generator. That generator then controls the execution of a generator function. The execution starts when one of the generatorâ€™s methods is called.</p>
</blockquote>
<p>In a regular function, calling that function immediately switches control to that function body, and you are simply testing the result of the function, set by it's <code>return</code> statement. In a generator function, <code>return</code> still signals the end of the generator function, but that results in a <code>StopIteration</code> exception being raised instead. But until you call one of the 4 generator methods (<code>.__next__()</code>, <code>.send()</code>, <code>.throw()</code> or <code>.close()</code>), the generator function body is not executed at all.</p>
<p>For your specific function <code>f()</code>, you have a regular function, that <em>contains</em> a generator. The function itself is nothing special, other that that it exits early when <code>return 3</code> is executed. The generator expression on the next line stands on its own, it does not influence the function in which it is defined. You can define it without the function:</p>
<pre><code>&gt;&gt;&gt; (i for i in range(10))
&lt;generator object &lt;genexpr&gt; at 0x101472730&gt;
</code></pre>
<p>Using a generator expression produces a generator object, just like using <code>yield</code> in a function, then calling that function produces a generator object. So you could have called <code>g()</code> in <code>f()</code> with the same result as using the generator expression:</p>
<pre><code>def f():
    return 3
    return g()
</code></pre>
<p><code>g()</code> is still a generator function, but using it in <code>f()</code> does <em>not</em> make <code>f()</code> a generator function too. Only <code>yield</code> can do that.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def f():
  return 3
  return (i for i in range(10))
</code></pre>
<p>is the same as </p>
<pre><code>def f():
  return 3
</code></pre>
<p>The second return statement never gets executed, just by having a generator expression within <code>f</code> <strong>does not</strong> make it a generator.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def f():
  return 3
  #unreachable code below
  return (i for i in range(10))
</code></pre>
<p>I believe what you meant is:</p>
<pre><code>def f():
  yield 3
  yield from (i for i in range(10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Returning a generator doesn't make <code>f</code> a generator function.  A generator is just an object, and generator objects can be returned by any function.  If you want <code>f</code> to be a generator function, you have to use <code>yield</code> inside the function, as you did with <code>g</code>.</p>
</div>
<span class="comment-copy">Your g() method is incorrect, you can't mix return and yield in the same function, you get an error. Paste the real code.</span>
<span class="comment-copy">@LennartRegebro: You can, in fact, mix return and yield in the same function. In Python 3.2 and earlier, you cannot return a <i>value</i> (that is a <code>SyntaxError</code>), but in Python 3.3 and up, you even can do that too. See <a href="http://stackoverflow.com/q/16780002">Return in generator together with yield in Python 3.3</a></span>
<span class="comment-copy">Ah, OK, didn't know that.</span>
