<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1265665/how-can-i-check-if-a-string-represents-an-int-without-using-try-except">How can I check if a string represents an int, without using try/except?</a>
<span class="question-originals-answer-count">
                    15 answers
                </span>
</li>
</ul>
</div>
<p>I have an application that has a couple of commands.
When you type a certain command, you have to type in additional info about something/someone.
Now that info has to be strictly an integer or a string, depending on the situation.</p>
<p>However, whatever you type into Python using raw_input() actually is a string, no matter what, so more specifically, how would I shortly and without try...except see if a variable is made of digits or characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion you have two options:</p>
<ul>
<li><p>Just try to convert it to an <code>int</code>, but catch the exception:</p>
<pre><code>try:
    value = int(value)
except ValueError:
    pass  # it was a string, not an int.
</code></pre>
<p>This is the Ask Forgiveness approach.</p></li>
<li><p>Explicitly test if there are only digits in the string:</p>
<pre><code>value.isdigit()
</code></pre>
<p><a href="http://docs.python.org/2/library/stdtypes.html#str.isdigit"><code>str.isdigit()</code></a> returns <code>True</code> only if all characters in the string are digits (<code>0</code>-<code>9</code>).</p>
<p>The <code>unicode</code> / Python 3 <code>str</code> type equivalent is <a href="https://docs.python.org/2/library/stdtypes.html#unicode.isdecimal"><code>unicode.isdecimal()</code></a> / <a href="https://docs.python.org/3/library/stdtypes.html#str.isdecimal"><code>str.isdecimal()</code></a>; only Unicode decimals can be converted to integers, as not all digits have an actual integer value (<a href="http://codepoints.net/U+00B2">U+00B2 SUPERSCRIPT 2</a> is a digit, but not a decimal, for example).</p>
<p>This is often called the Ask Permission approach, or Look Before You Leap. </p></li>
</ul>
<p>The latter will not detect all valid <code>int()</code> values, as whitespace and <code>+</code> and <code>-</code> are also allowed in <code>int()</code> values. The first form will happily accept <code>'  +10  '</code> as a number, the latter won't.</p>
<p>If your expect that the user <em>normally</em> will input an integer, use the first form. It is easier (and faster) to ask for forgiveness rather than for permission in that case.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want to check what it is:</p>
<pre><code>&gt;&gt;&gt;isinstance(1,str)
False
&gt;&gt;&gt;isinstance('stuff',str)
True
&gt;&gt;&gt;isinstance(1,int)
True
&gt;&gt;&gt;isinstance('stuff',int)
False
</code></pre>
<p>if you want to get ints from raw_input</p>
<pre><code>&gt;&gt;&gt;x=raw_input('enter thing:')
enter thing: 3
&gt;&gt;&gt;try: x = int(x)
   except: pass

&gt;&gt;&gt;isinstance(x,int)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/2/library/stdtypes.html#str.isdigit"><code>isdigit</code> method of the <code>str</code> type</a> returns <code>True</code> iff the given string is nothing but one or more digits.  If it's not, you know the string should be treated as just a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on your definition of shortly, you could use one of the following options:</p>
<ul>
<li><code>try: int(your_input); except ValueError: # ...</code></li>
<li><a href="http://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><code>your_input.isdigit()</code></a></li>
<li>use a <a href="https://stackoverflow.com/questions/8586346/python-regex-for-integer">regex</a></li>
<li>use <a href="https://pypi.python.org/pypi/parse" rel="nofollow noreferrer"><code>parse</code></a> which is kind of the opposite of <code>format</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Don't check. Go ahead and assume that it is the right input, and catch an exception if it isn't.</p>
<pre><code>intresult = None
while intresult is None:
    input = raw_input()
    try: intresult = int(input)
    except ValueError: pass
</code></pre>
</div>
<span class="comment-copy">You could do: <code>"0".isdigit()</code>. Documentation: <a href="http://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#str.isdigit</a></span>
<span class="comment-copy">Checking an object's type in Python is a bad idea - it makes Python's dynamic nature less useful. <i>It's easier to ask for forgiveness than permission.</i></span>
<span class="comment-copy">Why the aversion to <code>try</code>..<code>except</code> here? This is <i>exactly</i> what you'd use exception handling <i>for</i>.</span>
<span class="comment-copy">Mostly because I don't understand try...except...</span>
<span class="comment-copy">isinstance (in answer below) is a good way to go in the case of just needing to know whether the content of a variable is a string or integer. This can happen when a user option can be either.</span>
<span class="comment-copy">The are other options. Better say that those two options are just what you would recommend yourself.</span>
<span class="comment-copy">@android: The other options are overkill for most situations. Yet, quantified it.</span>
<span class="comment-copy">The problem is that I don't really understand try...except, so if you could explain it more thoroughly, that would be great.</span>
<span class="comment-copy">@user2154354: Operations can throw exceptions; these cut through the normal flow of code, they 'fall down' through the stack; functions immediately return, until something 'catches' the exception. The <code>try:</code>..<code>except:</code> statement does the catching. <code>int()</code> can throw a <code>ValueError</code> exception, but we specifically catch it again to detect that the string was not convertable to an integer. See the <a href="http://docs.python.org/2/tutorial/errors.html" rel="nofollow noreferrer">Python tutorial</a> for more details.</span>
<span class="comment-copy">@Veedrac: indeed, pointed out now.</span>
<span class="comment-copy">Use basestring instead of str, to catch unicode, see <a href="http://stackoverflow.com/questions/1979004/what-is-the-difference-between-isinstanceaaa-basestring-and-isinstanceaaa" title="what is the difference between isinstanceaaa basestring and isinstanceaaa">stackoverflow.com/questions/1979004/â€¦</a></span>
<span class="comment-copy">That's perfect for me, it works for positive and negative numbers ... cool, thanks</span>
<span class="comment-copy">isdigit() retunrs False for negative numbers</span>
