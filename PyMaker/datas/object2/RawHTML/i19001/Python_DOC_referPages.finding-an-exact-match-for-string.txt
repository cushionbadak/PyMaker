<div class="post-text" itemprop="text">
<p>I used the following function to find the exact match for words in a string.   </p>
<pre><code>def exact_Match(str1, word):
    result = re.findall('\\b'+word+'\\b', str1, flags=re.IGNORECASE)
    if len(result)&gt;0:
        return True
    else:
        return False

exact_Match(str1, word)
</code></pre>
<p>But I get an exact match for both words "award" and "award-winning" when it only should be award-winning for the following string.</p>
<pre><code>str1 = "award-winning blueberries"
word1 = "award"
word2 = "award-winning"
</code></pre>
<p>How can i get it such that re.findall will match whole words with hyphens and other punctuations?</p>
</div>
<div class="post-text" itemprop="text">
<p>Make your own word-boundary:</p>
<pre><code>def exact_Match(phrase, word):
    b = r'(\s|^|$)' 
    res = re.match(b + word + b, phrase, flags=re.IGNORECASE)
    return bool(res)
</code></pre>
<p>copy-paste from here to my interpreter:</p>
<pre><code>&gt;&gt;&gt; str1 = "award-winning blueberries"
&gt;&gt;&gt; word1 = "award"
&gt;&gt;&gt; word2 = "award-winning"
&gt;&gt;&gt; exact_Match(str1, word1)
False
&gt;&gt;&gt; exact_Match(str1, word2)
True
</code></pre>
<p>Actually, the casting to <code>bool</code> is unnecessary and not helping at all. The function is better off without it:</p>
<pre><code>def exact_Match(phrase, word):
    b = r'(\s|^|$)' 
    return re.match(b + word + b, phrase, flags=re.IGNORECASE)
</code></pre>
<hr/>
<p>note: <code>exact_Match</code> is pretty unconventional casing. just call it exact_match.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your initial method is that <code>'\\b'</code> does not denote the zero-width assertion search that your looking for. (And if it did, I would use <code>r'\b'</code> instead because backslashes can become a real hassle in regular expressions - <a href="http://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow">see this link</a>)</p>
<p>From <a href="http://docs.python.org/3/howto/regex.html#more-metacharacters" rel="nofollow">Regular Expression HOWTO</a></p>
<p><code>\b</code></p>
<p><code>Word boundary. This is a zero-width assertion that matches only at the beginning or end of a word. A word is defined as a sequence of alphanumeric characters, so the end of a word is indicated by whitespace or a non-alphanumeric character.</code></p>
<p>Because <code>-</code> is a non-alphanumeric character, your findall regular expression will find <code>award</code> in <code>award-wining</code> but not in <code>awards</code>.</p>
<p>Depending on your searched phrase, I would also think of using <code>re.findall</code> instead of <code>re.match</code> as suggested by Elazar. In your example <code>re.match</code> works, but if the word you are looking for is nested anywhere beyond the beginning of the string, <code>re.match</code> will not succeed. </p>
</div>
<span class="comment-copy">thanks for the comment. However, it doesn't seem to work. I put the code in and it's returning None for all cases.</span>
<span class="comment-copy">@lost9123193 you probably did not copy the code, or made some changes. It works for me, and I have copied it from here.</span>
