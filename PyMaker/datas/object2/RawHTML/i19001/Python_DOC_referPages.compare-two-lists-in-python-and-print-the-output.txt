<div class="post-text" itemprop="text">
<p>Hi I have a list of lists and I need to compare a value of each list with another one extracted from an XML file. The structure is similar to this:</p>
<pre><code>[('example', '123', 'foo', 'bar'), ('example2', '456', 'foo', 'bar'), ...]
</code></pre>
<p>I need to compare the second value of each list with the values in the XML:</p>
<pre><code>for item in main_list:
    for child in xml_data:
        if item[4] == child.get('value'):
            print item[4]
</code></pre>
<p>The problem is that the main_list has a huge ammount of lines (1000+) and this multiplied by the values from the xml (100+) results in a lot of iterations becoming this method unefficient.</p>
<p>Is there a way to do this efficiently?</p>
<p>Regards.</p>
</div>
<div class="post-text" itemprop="text">
<p>A membership check on a set will be significantly faster than manually iterating and checking:</p>
<pre><code>children = {child.get('value') for child in xml_data}
for item in main_list:
    if item[4] in children:
        print(item[4])
</code></pre>
<p>Here we construct the set with a simple <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">set comprehension</a>.</p>
<p>Note that it may be worth swapping what data is in the set - if <code>main_list</code> is longer, it will be more efficient to make the set of that data.</p>
<pre><code>items = {item[4] for item in main_list}
for child in xml_data:
    value = child.get('value')
    if value in items:
        print(value)
</code></pre>
<p>These both also only do the processing on the data once, rather than each time a check is made.</p>
<p>Note that a set will <em>not</em> handle duplicate values or order on the set side - if that is important, this isn't a valid solution. This version will only use the order/duplicates from the data you are iterating over. If that isn't valid, then you can still process the data beforehand, and use <a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a> to iterate a little quicker.</p>
<pre><code>items = [item[4] for item in main_list]
children = [child.get('value') for child in xml_data]

for item, child in itertools.product(items, children):
    if item == child:
        print(item)
</code></pre>
<p>As Karl Knechtel points out, if you really don't care about order to duplicates <em>at all</em>, you can just do a set intersection:</p>
<pre><code>for item in ({child.get('value') for child in xml_data} &amp;
             {item[4] for item in main_list}):
    print(item)
</code></pre>
</div>
<span class="comment-copy">If we really don't care about duplicates, why not make <i>both</i> sets and take the intersection?</span>
<span class="comment-copy">@KarlKnechtel Yup, it depends on the use case. I'll add that in.</span>
<span class="comment-copy">Thank you, for the response, now it works much faster. I used the second solution and is fine for my case. Regards</span>
