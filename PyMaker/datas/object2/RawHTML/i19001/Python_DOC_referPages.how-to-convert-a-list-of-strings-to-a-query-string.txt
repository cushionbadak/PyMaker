<div class="post-text" itemprop="text">
<p>I have list of values:</p>
<pre><code>md5 = ['1111', '3333', '44444', '555555', '56632423', '23423514', '2342352323']
</code></pre>
<p>I want to concatenate them into a <a href="http://en.wikipedia.org/wiki/Query_string" rel="nofollow">Query String</a>:</p>
<pre><code>'md5=1111&amp;md5=3333&amp;md5=44444&amp;md5=555555&amp;md5=56632423&amp;md5=23423514&amp;md5=2342352323'
</code></pre>
<p>What is the best way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're building a query string, it's better to use a function from the standard library that's specifically designed to do so:</p>
<ul>
<li><a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow"><code>urllib.parse.urlencode()</code></a> (in Python 3)</li>
<li><a href="https://docs.python.org/2/library/urllib.html#urllib.urlencode" rel="nofollow"><code>urllib.urlencode()</code></a> (in Python 2)</li>
</ul>
<p>... than to muck around with <code>str.join()</code>. Here's how you'd use it:</p>
<pre><code>from urllib.parse import urlencode # Python 3
# from urllib import urlencode # Python 2

md5 = ['1111', '3333', '44444', '555555', '56632423', '23423514', '2342352323']
urlencode([("md5", x) for x in md5])
</code></pre>
<p>Result:</p>
<pre><code>'md5=1111&amp;md5=3333&amp;md5=44444&amp;md5=555555&amp;md5=56632423&amp;md5=23423514&amp;md5=2342352323'
</code></pre>
<p>Alternatively (thanks to Jon Clements in the <a href="http://chat.stackoverflow.com/transcript/message/22210823#22210823">Python chatroom</a>), you can pass a dictionary to urlencode and the parameter <code>doseq=True</code>:</p>
<pre><code>urlencode({'md5': md5}, doseq=True)
</code></pre>
<p>... which produces the same result. This is explained in the documentation linked above:</p>
<blockquote>
<p>The value element in itself can be a sequence and in that case, if the optional parameter <em>doseq</em> is evaluates to <em>True</em>, individual <code>key=value</code> pairs separated by <code>'&amp;'</code> are generated for each element of the value sequence for the key. The order of parameters in the encoded string will match the order of parameter tuples in the sequence.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>md5s = '&amp;'.join('md5='+m for m in md5)
</code></pre>
<p>The part inside the parentheses is a generator expression, which gives you <code>'md5='+m</code> for each <code>m</code> in the original list.</p>
<p>The <code>join</code> function takes that expression and links it into one big string, putting an <code>&amp;</code> between each pair.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>join()</code>:</p>
<pre><code>md5=['1111','3333','44444','555555','56632423','23423514','2342352323']
print 'md5=' + '&amp;md5='.join(md5)
</code></pre>
</div>
<span class="comment-copy">You might first want to try looking at some of the related questions, such as <a href="http://stackoverflow.com/questions/4481724/convert-a-list-of-characters-into-a-string">this one</a>. :)</span>
<span class="comment-copy">In the future, you should give higher-level information. Are you building a query string to use in a URL? If so, tell us that, <i>then</i> give us the example, instead of starting at the lowest level. See <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">What is the XY problem?</a> for why you'll generally get better answers that way (although this time, you got lucky and Zero Piraeus guessed for you).</span>
<span class="comment-copy">Yeah, if he's building a query string (very likely), this is definitely the best way to do it. You might want to add the fact that it's <code>urllib.parse.urlencode</code> instead of <code>urllib.urlencode</code> in Python 3.x.</span>
<span class="comment-copy">@abarnert Done :-)</span>
<span class="comment-copy">That doesn't give him the output he asked for.</span>
<span class="comment-copy">I need to add &amp; mark between each index</span>
<span class="comment-copy">@abarnert: I have updated my answer.</span>
<span class="comment-copy">OK, now it works, butâ€¦ it's a little odd. If you use <code>join</code> for the part that joins up elements, everything makes sense. If you try to use it for additional string processing, you end up with fencepost problems where you need to add an extra <code>md5=</code> at the beginning (your answer) or remove a <code>&amp;</code> at the end (ljlozano's answer), which makes it a lot easier to get something wrong.</span>
