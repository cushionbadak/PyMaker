<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1347791/unicode-error-unicodeescape-codec-cant-decode-bytes-cannot-open-text-file">“Unicode Error ”unicodeescape" codec can't decode bytes… Cannot open text files in Python 3</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>What does this error message mean?</p>
<blockquote>
<p>SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 123-125: truncated \uXXXX escape</p>
</blockquote>
<p>I get this error reported at a position in the comments, which contain only non-Unicode chars.</p>
<p>The problematic code is the following:</p>
<pre><code>""" loads Font combinations from a file
#
# The font combinations are saved in the format:
% -&gt; Palatino, Helvetica, Courier
\usepackage{mathpazo}                 %% --- Palatino (incl math)
\usepackage[scaled=.95]{helvet}       %% --- Helvetica (Arial)
\usepackage{courier}                  %% --- Courier
\renewcommand{\fontdesc}{Palatino, Arial, Courier}
% &lt;-------------------
#
# with "% -&gt;" indicating the start of a new group
# and "% &lt;" indicating the end.
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's worth noting that the "problematic code" is not technically a comment, but a multiline string which will be evaluated during bytecode compilation.</p>
<p>Depending in its location in the source file, it may end up in a <a href="http://www.python.org/dev/peps/pep-0257/" rel="nofollow">docstring</a>, so it has to be syntactically valid.</p>
<p>For example...</p>
<pre><code>&gt;&gt;&gt; def myfunc():
...     """This is a docstring."""
...     pass
&gt;&gt;&gt; myfunc.__doc__
'This is a docstring.'
&gt;&gt;&gt; help(myfunc)
Help on function myfunc in module __main__:

myfunc()
    This is a docstring.
</code></pre>
<p>There's no true multiline comment delimiter in Python, so if you don't want it to be evaluated, use several single-line comments...</p>
<pre><code># This is my comment line 1
# ...line 2
# etc.
def myfunc():
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the others have said, it's trying to parse <code>\usepackage</code> as a Unicode escape and failing because it's invalid. The way around this is to escape the backslash:</p>
<pre><code>"""\\usepackage""
</code></pre>
<p>Or to use a <a href="http://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">raw string</a> instead:</p>
<pre><code>r"""\usepackage"""
</code></pre>
<p><a href="http://www.python.org/dev/peps/pep-0257/" rel="nofollow">PEP 257</a>, which covers docstring conventions, suggests the latter.</p>
</div>
<div class="post-text" itemprop="text">
<p>It means that the \uXXXX escape sequence in the data you are decoding is invalid. Specifically it means it's to short. Most likely you have the text '\U' somewhere in the text, but not followed by a Unicode character number.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 strings are Unicode, so it attempts to decode the '\u' escapes. So, even though you are trying to use a string as a comment, it will still attempt to decode it.</p>
<p>An actual comment, such as:</p>
<pre><code>#\usepackage{mathpazo}
</code></pre>
<p>will not be decoded.</p>
<p>If you notice it's in the class of <code>SyntaxError</code>s, which means that even if it's 'unreachable code', it raises a flag.</p>
</div>
<span class="comment-copy">I wanted to include the code as well, but stackoverflow refused to except the question with the code because of a to low quality question ...</span>
<span class="comment-copy">Put it on <a href="http://gist.github.com" rel="nofollow noreferrer">Gist</a></span>
<span class="comment-copy">perhaps invalid escape code</span>
<span class="comment-copy">The code the that is problematic is a comment, nothing that even shall be executed. In that sense it is different.</span>
<span class="comment-copy">Another good question is why you are using 'unicodeescape' as the encoding for the file. I think that's the fundamental error. UTF-8 is likely to be a better choice.</span>
<span class="comment-copy">or raw string literals: <code>r"\uxxxxx"</code></span>
<span class="comment-copy">@J.F.Sebastian Well, it sounds like the OP doesn't actually want to use docstrings, so I figured it'd be simplest just to use regular single-line comments, since that's the only way to prevent Python from attempting to evaluate the 'comment' block. I guess I could add that in, although it's already mentioned in Cairnarvon's answer.</span>
<span class="comment-copy">Yes, my comment includes the line <code>\usepackage{mathpazo}                 %% --- Palantino (incl math)</code>. But why is a comment parsed ?</span>
<span class="comment-copy">@MatthiasPospiech: a docstring is not a comment.</span>
<span class="comment-copy">Ok, I have no idea what a docstring is, but that makes it clear why the error is raised.</span>
<span class="comment-copy">@MatthiasPospiech: I assume decoding is done before parsing in any case, so I wouldn't be surprised if comments give the same error.</span>
