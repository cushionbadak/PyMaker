<div class="post-text" itemprop="text">
<p>I have this portion of a class that takes a whole number and a fraction and add them together.</p>
<pre><code>def __add__(self, g):
       whole_add=self.whole_number + g.whole_number
       numerator = (self.fraction.numerator * g.fraction.denominator ) + (g.fraction.numerator * self.fraction.denominator)
       denominator = self.fraction.denominator * g.fraction.denominator
       f=Fraction(numerator,denominator)
       return '{} and {}'.format(whole_add,f)

fraction_1 = Fraction(3, 4)
fraction_2 = Fraction(2, 3)
mixed_num_1 = MixedNumber(2, fraction_1)
mixed_num_2 = MixedNumber(1, fraction_2)
print(mixed_num_1 + mixed_num_2)
</code></pre>
<p>The outcome of this is 3 and 17/12, when it should be 4 and 5/12, I am not sure how to do this, I assume with an if the fraction is &gt;= 1. Any help would be much appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using the <a href="http://docs.python.org/2/library/fractions.html" rel="nofollow"><code>fractions</code> library</a>, ou can just sum everything, then take the <code>int()</code> portion of the fraction:</p>
<pre><code>def __add__(self, g):
    summed = sum((self.whole_number, g.whole_number, self.fraction, g.fraction))
    whole = int(summed)
    remainder = summed - whole
    return '{} and {}'.format(whole, remainder)
</code></pre>
<p>The <code>Fraction()</code> class implements <code>__add__</code> for you, you can just sum up integers and <code>Fraction()</code> objects and it all works as it should.</p>
<p>Demo using constants:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; summed = sum((2, 1, Fraction(3, 4), Fraction(2, 3)))
&gt;&gt;&gt; whole = int(summed)
&gt;&gt;&gt; remainder = summed - whole
&gt;&gt;&gt; '{} and {}'.format(whole, remainder)
'4 and 5/12'
</code></pre>
<p>One little-known but handy factoid is that Python the <code>int()</code> type has both <code>.numerator</code> and <code>.denominator</code> attributes, that the <code>fractions.Fraction()</code> class makes use of. If you are <em>not</em> using the <code>fractions</code> library, you can make use of that yourself:</p>
<pre><code>def __add__(self, g):
    summed = 0
    for v in (self.whole_number, g.whole_number, self.fraction, g.fraction):
        summed = Fraction(summed.numerator * v.denominator +
                          v.numerator * summed.denominator,
                          summed.denominator * v.denominator)
    whole = summed._numerator // summed._denominator
    remainder = Fraction(summed.numerator * whole.denominator -
                         whole.numerator * summed.denominator,
                         summed.denominator * whole.denominator)
    return '{} and {}'.format(whole, remainder)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to "fix" your version would be to deal with the improper fraction directly:</p>
<pre><code>   whole_add=self.whole_number + g.whole_number
   numerator = (self.fraction.numerator * g.fraction.denominator ) + (g.fraction.numerator * self.fraction.denominator)
   denominator = self.fraction.denominator * g.fraction.denominator
   whole_add += numerator // denominator
   numerator -= numerator % denominator
   f=Fraction(numerator,denominator)
   return '{} and {}'.format(whole_add,f)
</code></pre>
<p>Although there are more efficient ways of doing this addition more directly.</p>
</div>
<span class="comment-copy">First, I assume you're doing this as a learning exercise. If not, you almost certainly want to use the <a href="http://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer"><code>fractions</code></a> library that comes with the stdlib (unless you, e.g., need something faster, in which case you probably want to wrap up some optimized C/Fortran/assembly library).</span>
<span class="comment-copy">Check after every calculation. When the numerator is larger than the denominator, adjust the numerator and <code>whole_number</code>.</span>
<span class="comment-copy">+1 to @alexis. But also remember to take care of negative mixed numbers! Also, you probably want to return a <code>MixedNumber</code> from <code>__add__</code>, not a string.</span>
<span class="comment-copy">Do you know why the <code>IntType</code> has these two attributes?</span>
<span class="comment-copy">@Satoru.Logic: See <a href="http://www.python.org/dev/peps/pep-3141/" rel="nofollow noreferrer">PEP 3141</a>; numbers have been unified and all have <code>.numerator</code> and <code>.denominator</code> attributes. For <code>int</code> values these are just the number itself and 1, respectively.</span>
<span class="comment-copy">@Martijin Pieters Thanks ;)</span>
