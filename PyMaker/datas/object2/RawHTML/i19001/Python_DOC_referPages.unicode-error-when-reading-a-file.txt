<div class="post-text" itemprop="text">
<p>This is my first post on here, so I don't hope this isn't in the wrong topic or something, but I've run into a somewhat unusual problem with a Python app I'm writing.  </p>
<p>Basically, what I'm trying to get it to do is to read from a text file and insert part of it into a Tkinter text widget.  The text file contains the usual "\n" line breaks, but when I run the code I get this bizarre error that I haven't been able to cook up a workaround for:</p>
<p>(BTW, sorry for the lousy set-up here... not sure how to work this new code-entering system; it seems to "play by its own rules" and have its own syntax, so I just copied/pasted it below:</p>
<pre><code>    Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\Python33\lib\idlelib\run.py", line 107, in main
    seq, request = rpc.request_queue.get(block=True, timeout=0.05)
  File "C:\Python33\lib\queue.py", line 175, in get
    raise Empty
queue.Empty
</code></pre>
<p>During handling of the above exception, another exception occurred:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Python33\lib\tkinter\__init__.py", line 1442, in __call__
    return self.func(*args)
  File "C:\Users\Owner\Desktop\Python projects\The Ultimate Joke Book.py", line 89, in search
    results.create()
  File "C:\Users\Owner\Desktop\Python projects\The Ultimate Joke Book.py", line 31, in create
    joke = linecache.getline('Jokes/jokelist.txt',x)
  File "C:\Python33\lib\linecache.py", line 15, in getline
    lines = getlines(filename, module_globals)
  File "C:\Python33\lib\linecache.py", line 41, in getlines
    return updatecache(filename, module_globals)
  File "C:\Python33\lib\linecache.py", line 127, in updatecache
    lines = fp.readlines()
  File "C:\Python33\lib\codecs.py", line 300, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbf in position 627: invalid start byte
</code></pre>
<p>So the function that caused the problem -- just a "linecache.getline" used in a <code>for</code> loop -- works perfectly when there is no "\" in the text, but for whatever reason it doesn't like the "\" and starts spittin' errors. : /</p>
<p>So tonight I've spent nearly an hour on the "docs" (<a href="http://docs.python.org/3/howto/unicode.html" rel="nofollow">http://docs.python.org/3/howto/unicode.html</a>), reading all the history and basic concept of unicode, but it was loaded with assumed knowledge and while it was informative and helpful on a concept-only level, it didn't seem to do much in terms of practical information and potential solutions.</p>
<p>The only solution I can come up with to defeat this annoying little bug is to use "/n" instead and programmatically split the strings into an array (or a "list" as they seem to be called in Python), then use a loop to break it up into more than 1 line... but that sounds like a lot of unnecessary steps, especially if there is a common workaround already in existence.  So I would appreciate any insights on how to solve this particularly mysterious problem.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The data that the UTF-8 decoder has been given is not UTF-8. That's why you get the error. You need to give us the code that fails and some data examples to explain exactly what is happening.</p>
<p>The character in question is "Â¿" in Latin-1 and CP-1252. Perhaps this is a Spanish text written on a Windows machine? In that case, specify the encoding when opening the file.</p>
</div>
<span class="comment-copy">You're not likely to get a good answer unless you explain which lines of code in your program are mentioned in these stacktraces.</span>
<span class="comment-copy"><code>\xbf</code> is an upside-down question mark (in UTF-8).   Are you sure it is the <code>\n</code> that is the issue?  What else is in the file?  What is the encoding of the file?  Can you provide a self-contained example that demonstrates the problem?</span>
<span class="comment-copy">@BrenBarn: No it's not. It's an upside down question mark in Latin-1, though. ;-) It is invalid UTF-8, which is why he got the error.</span>
<span class="comment-copy">There is no wrong topics in here, only wrong tagging. But you did it ok ;-)</span>
<span class="comment-copy">does it work if you use <code>open()</code> instead of <code>linecache</code>? e.g., call once: <code>lines = open(r"path\to\file.txt").readlines()</code> and later <code>joke = lines[x]</code>. <code>linecache</code> is designed to work with  Python source files so it might use a different default character encoding.</span>
<span class="comment-copy">Well, I do speak Spanish and run Windows, but the text was all in English. : )</span>
<span class="comment-copy">Sorry, still learning the quirks of this comment system.  Let me break my reply down for you. : )  Ok, so to answer the questions (they will have to come as 2 replies due to a limit): Although I do speak Spanish and use Windows, the text was in English.  As far as the string is concerned, I've confirmed that the "\" is the problem because it works fine when I delete it.</span>
<span class="comment-copy">The code that causes the error, like I said is a simple "linecache.getline".  I didn't do any encoding to the text file or try to tell Python to do any encoding... it almost sounds like something in python isn't compatible with text files? (I mean the internal stuff that's still way over my head).  Do I need to save the file as another format, or somehow change the text file's encoding to a different encoder?  Or is it comething I can do in Python (change how it reads the text, or maybe do a "replace" to find the /n's and replaces with chr(_)?  Anyway thanks again for your help. :)</span>
<span class="comment-copy">@user2403876: The problem is that you are using the wrong encoding when opening the file. Full stop. I can help you figure out the encoding if you post two things: 1. The text with a copy-paste from the editor. 2. The same text as it is displayed by Python when opened in binary format (with the 'b' flag).</span>
<span class="comment-copy">Okay... I'm going to need to research how to do anything in "binary format" before I can answer that, but I appreciate that you tried.  I understand the general concept on a very basic level of what binary means (the 0s and 1s) but beyond that I'm afraid I'm a bit out of my league.  I guess my next question would be, where did you guys learn all this?  I've seen a lot of tutorials on the basics of Python, but this is something completely different (basics of the underlying byte code or something?)... Anyway like I said, thanks anyway.</span>
