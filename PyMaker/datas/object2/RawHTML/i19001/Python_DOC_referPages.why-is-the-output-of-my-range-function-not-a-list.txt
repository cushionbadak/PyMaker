<div class="post-text" itemprop="text">
<p>According to the Python documentation, when I do range(0, 10) the output of this function is a list from 0 to 9 i.e. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]. However the Python installation on my PC is not outputting this, despite many examples of this working online.</p>
<p>Here is my test code...</p>
<pre><code>test_range_function = range(0, 10)
print(test_range_function)
print(type(test_range_function))
</code></pre>
<p>The output of this I'm thinking should be the list printed, and the type function should output it as a list. Instead I'm getting the following output...</p>
<pre><code>c:\Programming&gt;python range.py
range(0, 10)
&lt;class 'range'&gt;
</code></pre>
<p>I haven't seen this in any of the examples online and would really appreciate some light being shed on this.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>range</code> and other functional-style methods, such as <code>map</code>, <code>reduce</code>, and <code>filter</code>, return iterators in Python 3.  In Python 2 they returned lists.</p>
<p><a href="http://docs.python.org/3.0/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="noreferrer">What’s New In Python 3.0</a>:</p>
<blockquote>
<p><code>range()</code> now behaves like <code>xrange()</code> used to behave, except it works with
  values of arbitrary size. The latter no longer exists.</p>
</blockquote>
<p>To convert an iterator to a list you can use the <code>list</code> function:</p>
<pre><code>&gt;&gt;&gt; list(range(5)) #you can use list()
[0, 1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually you do not need to materialize a range into an actual list but just want to iterate over it. So especially for larger ranges using an iterator saves memory.</p>
<p>For this reason <a href="http://docs.python.org/3.3/library/functions.html#func-range" rel="noreferrer"><code>range()</code></a> in Python 3 returns an iterator instead (as <a href="http://docs.python.org/2/library/functions.html#xrange" rel="noreferrer"><code>xrange()</code></a> did in Python 2). Use <code>list(range(..))</code> if you want an actual list instead for some reason.</p>
</div>
<span class="comment-copy">Have you read python doc for 3.x version? To get a list, you have to do <code>list(range(0, 10))</code>.</span>
<span class="comment-copy">This was a change from 2.x to 3, documented here: <a href="http://docs.python.org/3.0/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">docs.python.org/3.0/whatsnew/…</a> .  Most of the time you're better off with an iterator anyway, but arbauthc's comment shows to create the list if you do need it.</span>
<span class="comment-copy">If you're looking at the <a href="http://docs.python.org/3/index.html" rel="nofollow noreferrer">Python documentation online</a>, always make sure you're reading the documentation for the version you're using. There's a little option menu in the upper-left corner of every page that shows, e.g., "2.7.5", which you can change to "3.3".</span>
<span class="comment-copy">Thanks for all the responses, I feel stupid not looking at the correct Python documentation but hopefully I won't make that mistake again!</span>
<span class="comment-copy">@FiveAlive: Well, <i>I</i> still make that mistake even though I know better. (Why is this <code>print</code> function printing a tuple when I'm passing it two values, neither of which is a tuple?!) How else do you think we all recognized the problem so quickly? :)</span>
<span class="comment-copy">+1, This explains the reason for the change and why it's better. One small, subtle distinction - <code>range()</code> in 3.x returns an iterable, not an iterator. It has some advantages over a straight up iterator, like it's not exhausted when it's looped over, and it's a sequence, so you can slice it, etc... <code>range(10)[:5] == range(0, 5)</code>.</span>
<span class="comment-copy">… and it also implements an O(1) <code>__contains__</code>. so when novices write <code>5 in range(1, 21, 2)</code> (as they always have), it's no longer a mistake, but instance good and perfectly idiomatic code.</span>
