<div class="post-text" itemprop="text">
<p>I have Python 2.7 and 3.3 installed on Windows, and Python 2.7 and 3.2mu installed on Linux.
How would I write a Python script that is able to be used on both Windows and Linux, using version 2.X or 3.X?</p>
<p>I'm looking for maybe a few lines of code that will check to see what the current operating system is, and use Python 3.X in whatever directory it's in for the rest of the script.</p>
<p>I was thinking somewhere along the lines of:</p>
<pre><code>if operating_system == Windows:
    run rest of script with C:\python_directory3.X\python
elif operating_system == Linux:
    run rest of script with /usr/bin/python3.X
</code></pre>
<p>Does code like this exist, or will I have to make a different script for both operating systems?</p>
</div>
<div class="post-text" itemprop="text">
<p>On UNIX systems, <a href="http://www.python.org/dev/peps/pep-0394/" rel="nofollow">Python commands should be named as prescribed in PEP-394</a>, so using a shebang is the best solution:</p>
<pre><code>#!/usr/bin/env python2
</code></pre>
<p>or </p>
<pre><code>#!/usr/bin/env python3
</code></pre>
<p>As appropriate, at the top of your file.</p>
<p>Under Windows, it's a little less well defined. Since version 3.3, <a href="http://docs.python.org/dev/using/windows.html#launcher" rel="nofollow">a launcher</a> should be included with Python, as described in <a href="http://www.python.org/dev/peps/pep-0397/" rel="nofollow">PEP-397</a>. This, however, doesn't help older versions.</p>
<p>If you want to be sure under Windows, many people use py2exe, Cx_Freeze, or other similar tools to produce executables that include the interpreter. This may be a valid solution in some cases.</p>
<p>A good idea is to add a check to your code (checking the version of the interpreter), and give a clear, easy-to-understand message that they are using the wrong version of Python, perhaps with a link on how to solve that issue. This won't magically solve anything, but it means that if all else fails, the user gets a chance to understand what is going wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can identify the OS in which the script is running using os module or sys module. Both shows different results, but similar:</p>
<pre><code>import os
os.name #"posix" for linux "nt" for windows
# or 
import sys
sys.platform # "linux2" for linux
</code></pre>
</div>
<span class="comment-copy">Since the OP <i>has</i> Python 3.3 installed on Windows, the launcher will take care of it just by using the shebang line, right?</span>
<span class="comment-copy">@MartijnPieters I'm not a Windows user, but from what I gather, yes. The only issue is that potentially, others don't have 3.3 installed, so it's not a complete solution. I'd argue coupling it with a decent error message when run in a 2.x interpreter is about as good as you can do though.</span>
<span class="comment-copy">See <a href="http://docs.python.org/3/using/windows.html#shebang-lines" rel="nofollow noreferrer">docs.python.org/3/using/windows.html#shebang-lines</a></span>
<span class="comment-copy">@Lattyware Thanks for the help! Cx_Freeze is pretty cool.</span>
<span class="comment-copy">@MartijnPieters Thanks for the documents. Knowledge!</span>
<span class="comment-copy">Just an aside, you can always get absolute path to the running Python executable with <code>sys.executable</code>.</span>
