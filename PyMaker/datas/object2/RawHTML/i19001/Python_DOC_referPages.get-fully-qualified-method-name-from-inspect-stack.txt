<div class="post-text" itemprop="text">
<p>I have trouble completing the following function:</p>
<pre><code>def fullyQualifiedMethodNameInStack(depth=1):
    """
    The function should return &lt;file&gt;_&lt;class&gt;_&lt;method&gt; for the method in the 
    stack at specified depth.
    """
    fileName=inspect.stack()[depth][1]
    methodName=inspect.stack()[depth][3]
    class= """ please help!!! """
    baseName=os.path.splitext( os.path.basename( fileName ) )[0]
    return '{0}_{1}_{2}'.format( baseName, className, methodName )
</code></pre>
<p>As you can see I want the class name of the method being executed. The stack that inspect returns only has the method name, and I do not know how to find the class belonging to the method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are always looking at a <em>function</em> context; the method context is already gone by the time the function executes. Technically speaking, <a href="http://docs.python.org/2/howto/descriptor.html#functions-and-methods" rel="nofollow">functions act as descriptors</a> when accessed as attributes on an instance (<code>instance.method_name</code>), which return a method object. The method object then, when called, in turn calls the original function with the instance as the first argument. Because this all happens in C code, no trace of the original method object remains on the Python stack.</p>
<p>The stack only needs to keep track of namespaces and the code to be executed for the local namespace. The original function object is no longer needed for these functions, only the attached code object still retains the name of the original function definition for traceback purposes.</p>
<p>If you <em>know</em> the function to be a method, you could search for a <code>self</code> local name. If present, <code>type(self)</code> is the class of the <em>instance</em>, which is not necessarily the class the method was defined on.</p>
<p>You would then have to search the class and it's bases (looping over the <code>.__mro__</code> attribute) to try and locate what class defined that method.</p>
<p>There are a few more snags you need to take into account:</p>
<ul>
<li><p>Naming the first argument of a method <code>self</code> is only a convention. If someone picked a different name, you won't be able to figure that out without parsing the Python source yourself, or by going up another step in the stack and trying to deduce from <em>that</em> line how the function was called, then retrieve the method and it's <code>.im_self</code> attribute.</p></li>
<li><p>You only are given the original name of the function, under which it was defined. That is not necessarily the name under which it was invoked. Functions are first-class objects and can be added to classes under different names.</p></li>
<li><p>Although a function was passed in <code>self</code> and was defined as part of a class definition, it could have been invoked by <em>manually</em> passing in a value for <code>self</code> instead of the usual route of the method (being the result of the function acting as a descriptor) passing in the <code>self</code> reference for the caller.</p></li>
</ul>
<p>In Python 3.3 and up, the situation is marginally better; function objects have a new <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions" rel="nofollow"><code>__qualname__</code> attribute</a>, which would include the class name. The problem is then that you still need to locate the function object from the parent stack frame.</p>
</div>
<span class="comment-copy">1) You can only see functions, not methods, 2) you can only make an educated guess as to the type of the instance. That is not the same thing as the class the method was originally defined on. Is that enough?</span>
<span class="comment-copy">Well I was hoping that there would be a possibility to find out which class the function is defined in without having to guess. What is the most educated guess I can take?</span>
<span class="comment-copy">@MartijnPieters I'm intrigued about point 2. <code>inspect.stack()</code> only seems to consistently return function names, not the function objects.</span>
<span class="comment-copy">@millimoose: Exactly, the stack only records the name of the currently executing function. That is also not necessarily the name under which it was accessed.</span>
<span class="comment-copy">@MartijnPieters That's kind of surprising, I'd have expected the actual function object to be there somewhere. Although even that probably wouldn't be perfect, especially considering that I assume the Python interpreter ends up "unwrapping" bound-method objects first.</span>
