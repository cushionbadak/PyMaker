<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/526125/why-is-python-ordering-my-dictionary-like-so">Why is python ordering my dictionary like so? [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/4458169/in-what-order-does-python-display-dictionary-keys">In what order does python display dictionary keys? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I was wondering in what order does the dictionary in python store key : value pairs. I wrote the following in my python shell but I can't figure out what is the reason for the order it is storing the key : value pairs.</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['a'] = 8
&gt;&gt;&gt; d['b'] = 8
&gt;&gt;&gt; d
{'a': 8, 'b': 8}
&gt;&gt;&gt; d['c'] = 8
&gt;&gt;&gt; d
{'a': 8, 'c': 8, 'b': 8}
&gt;&gt;&gt; d['z'] = 8
&gt;&gt;&gt; d
{'a': 8, 'c': 8, 'b': 8, 'z': 8}
&gt;&gt;&gt; d['w'] = 8
&gt;&gt;&gt; d
{'a': 8, 'c': 8, 'b': 8, 'z': 8, 'w': 8}
</code></pre>
<p>I also tried the same thing with different values for the same keys. But the order remained the same. Adding one more key : value pair gives another result that just can't make out. Here it is :</p>
<pre><code>&gt;&gt;&gt; d[1] = 8
&gt;&gt;&gt; d
{'a': 8, 1: 8, 'c': 8, 'b': 8, 'w': 8, 'z': 8}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is: in an implementation-defined order. You can't rely and shouldn't expect any particular order, and it can change after changing the dictionary in a supposedly-irrelevant manner.</p>
<p>Although not directly, it's somehow explained in <a href="http://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow">Dictionary view objects</a>:</p>
<blockquote>
<p>Keys and values are iterated over in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionaryâ€™s history of insertions and deletions. If keys, values and items views are iterated over with no intervening modifications to the dictionary, the order of items will directly correspond.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Elements are stored based on the hash of their key.  The documentation states that a <a href="http://docs.python.org/2/library/stdtypes.html#typesmapping" rel="nofollow">key must be a hashable type</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries do not have a predictable order as their keys are stored by a hash.  If you need order, use a <code>list</code> or <code>collections.OrderedDict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a <a href="http://en.wikipedia.org/wiki/Hash_Table" rel="nofollow">hash table</a>. The keys are partially ordered by their hash value <code>hash(key)</code>, but the actual traversal order of the dictionary can depend on the order that elements were inserted, the number of elements in the dictionary, and possibly other factors. You should never count on it being anything in particular.</p>
</div>
<span class="comment-copy">There is no guaranteed ordering; insertions and deletions and the key values determine the ordering.</span>
<span class="comment-copy">dictionaries are unordered in python, where as lists and tuples are, @Indradhanush Gupta you got a good link in comment</span>
<span class="comment-copy">@IndradhanushGupta: Sure, replaying the same insertions means you see the same order again. But if you add a few deletions, then you <i>could</i> end up with a different order. Use a different Python version or different Python implementation (IronPython, Jython, PyPy) and you could get a different order altogether.</span>
<span class="comment-copy">@IndradhanushGupta: See <a href="http://stackoverflow.com/a/15479974">Why the order in Python dictionaries is arbitrary?</a></span>
<span class="comment-copy">And with recent changes in CPython, you don't even need to change anything. Just running the same program with the same parameters with the same Python implementation can yield different orders due to hash randomization.</span>
