<div class="post-text" itemprop="text">
<p>I have a string:</p>
<pre><code>a = "sky high"
</code></pre>
<p>and a file in csv style that I have opened and converted to list:</p>
<pre><code>mylist = [["sky high",'77'],["sky high and high",'88']]
</code></pre>
<p>I want to check if the string exist in the first position in every list. But, if I do this:</p>
<pre><code>for row in mylist:
    if a in row[0]:
       print row[1]
</code></pre>
<p>it will give me result <code>77 88</code> instead of just <code>77</code>. I don't know why I can't use if <code>a == row[0]</code> as it will produce no result. Have any idea what to do?</p>
<p>EDIT:</p>
<p>So actually my code looks like this:</p>
<pre><code>data = open("text.qrel",'rb')
new = []
for row in data:
    d = row[:-1].split(',')

    if a == d[0]:
       new.append(d[1])
</code></pre>
<p>and it doesn't work!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try running this through an interactive visualizer, like <a href="http://pythontutor.com/visualize.html#" rel="nofollow">this one</a>. When you can't do that for some reason, at least try experimenting in the normal interactive interpreter, or printing out intermediate results in your program.</p>
<hr/>
<p>When <code>a</code> is "sky high", and <code>row</code> is <code>["sky high and high",'88']</code>, that means <code>row[0]</code> is <code>"sky high and high"</code>, so <code>a in row[0]</code> is <code>True</code>.</p>
<p>That's why (if you fix it to use <code>[1]</code> instead of <code>[2]</code>) it will print both <code>77</code> and <code>88</code>.</p>
<p>Try this at the interactive interpreter (or the visualizer):</p>
<pre><code>&gt;&gt;&gt; a = "sky high"
&gt;&gt;&gt; mylist = [["sky high",'77'],["sky high and high",'88']]
&gt;&gt;&gt; row = mylist[1]
&gt;&gt;&gt; row[0]
"sky high and high"
&gt;&gt;&gt; a in row[0]
True
</code></pre>
<hr/>
<p>Meanwhile, you say "I don't know why I can't use <code>if a == row[0]</code> as it will produce no result."</p>
<p>But if you use <code>a == row[0]</code> it <em>won't</em> produce no result; it will produce <code>77</code>.</p>
<p>Try this at the interactive interpreter (or in the online visualizer):</p>
<pre><code>&gt;&gt;&gt; a = "sky high"
&gt;&gt;&gt; mylist = [["sky high",'77'],["sky high and high",'88']]
&gt;&gt;&gt; for row in mylist:
...     if a == row[0]:
...         print row[1]
77
</code></pre>
<p>So, you must have a bug in some other part of the code. Show us the version that you claim isn't working, and we can find the bug.</p>
<hr/>
<p>Most likely, the problem with your real code is that <code>row</code> (or, actually, <code>d</code>) is not actually <code>["sky high", '77']</code>, but something with extra characters in it:</p>
<pre><code>data = open("text.qrel",'rb')
new = []
for row in data:
    d = row[:-1].split(',')
</code></pre>
<p>Let's say <code>text.qrel</code> looked like this:</p>
<pre><code>sky high , 77
</code></pre>
<p>This would make <code>d[0]</code> be <code>"sky high "</code> (with a space), not <code>"sky high"</code>.</p>
<p>Or:</p>
<pre><code>"sky high",'77'
</code></pre>
<p>Then <code>d[0]</code> would be <code>'"sky high"'</code> (with extra quotes), not <code>"sky high"</code>.</p>
<p>You could show us an extract of that CSV file, or have your code print out each row and show us what it prints; otherwise, we're just guessing.</p>
<p>You can try to fix things manually. For example, to handle both of the above cases, instead of this:</p>
<pre><code>d = row[:-1].split(',')
</code></pre>
<p>… you'd do:</p>
<pre><code>def remove_quotes(x):
    if x[0] == '"' and x[-1] == '"': return x[1:-1]
    elif x[0] == "'" and x[-1] == "'": return x[1:-1]
    else: return x
for row in data:
    d = [remove_quotes(col.strip()) for col in row[:-1].split(',')]
</code></pre>
<p>If you don't understand list comprehensions, this line:</p>
<pre><code>d = [remove_quotes(col.strip()) for col in row[:-1].split(',')]
</code></pre>
<p>… is a shortcut for:</p>
<pre><code>d = []
for col in row[:-1].split(','):
    d.append(remove_quotes(col.strip())
</code></pre>
<p>You already have the <code>[:-1]</code> to remove the trailing <code>\n</code> and the <code>split(',')</code> to split into two columns. But instead of just using the columns as-is, on each one, I call <code>strip()</code> to remove any extra whitespace at the edges (which turns out not to matter in your specific case, but it is a common problem in CSVs), and then call <code>remove_quotes</code> on the result to remove any matched pairs of quotes, and use <em>that</em> for the column value.</p>
<p>As you can see, that's tedious and complicated.</p>
<p>And there are still plenty of common cases it won't handle.</p>
<p>This is exactly why you usually want to use <a href="http://docs.python.org/3/library/csv.html" rel="nofollow">the <code>csv</code> module</a> instead of trying to parse CSV files yourself:</p>
<pre><code>for d in csv.reader(data):
</code></pre>
<p>Now, <code>d[0]</code> will be <code>"sky high"</code>.</p>
<p>If your CSV files aren't quite "standard"-enough for CSV to handle out-of-the-box, you can give a dialect object, or just some format parameters, to the <code>reader</code>, and it's still usually easier than trying to build it from scratch yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are asking it if the string <code>sky high</code> is in the first string in each row, not if the string is in the row. This code should do what you want:</p>
<pre><code>for row in mylist:
    if a == row[0]:
       print row[1]
</code></pre>
<p>This only outputs <code>77</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your example, you would need to use <code>row[1]</code>. Then it should work with <code>==</code>.<br/>
<code>in</code> checks if a string <em>is in</em> another string, and "sky high and high" contains "sky high", so that's correct.</p>
<pre><code>&gt;&gt;&gt; a = "sky high"
&gt;&gt;&gt; mylist = [["sky high",'77'],["sky high and high",'88']]
&gt;&gt;&gt; for row in mylist:
...     if a == row[0]:
...         print row[1]
77
</code></pre>
<p>You could also use list comprehension for something as simple as this, if you like one-liners:</p>
<pre><code>&gt;&gt;&gt; [row[1] for row in mylist if a == row[0]][0]
'77'
</code></pre>
</div>
<span class="comment-copy">Please show us the code where you try to use <code>if a == row[0]</code>. Because that will work, unless you do something else wrong.</span>
<span class="comment-copy">@abarnert I have edit my actual code</span>
<span class="comment-copy">OK, your problem is most likely that you're not parsing the CSV file correctly. You have to either show us (the relevant lines of) the CSV file, or have your code print out each <code>row</code> and show us what it says. But my guess is that either the columns are quoted, or that there's extra spaces. See my answer for how to deal with that.</span>
<span class="comment-copy">And this is why, in the future, you should show us a sample of real code (with relevant data) that actually doesn't work, so we don't have to spend 40 minutes going back and forth, frustrating you with followup questions and incorrect answers, before figuring things out. See <a href="http://sscce.org" rel="nofollow noreferrer">SSCCE</a> for some tips.</span>
<span class="comment-copy">Sorry for the inconvenience and thanks for the help :)</span>
<span class="comment-copy">a="sky high"; row=["sky high and high",'88']; a in row is False because although a is in row[0], it is not an element of row.</span>
<span class="comment-copy">@BBrown: Copied and pasted from the wrong place; fixed. (But you're quoting from my sample code, which was already correct, not from the place I had it wrong, which is odd…)</span>
<span class="comment-copy">@abarnert so now I know the problem, when I print the list, it's actually ['"sky high"','77'] with double quote because the original data is "sky high",77. and the reason I'm doing d = row[:-1].split(',') is because if i didn't state row[:-1], it will produce a list ['"sky high"','77'\n] with newline at the back. But I don't really understand your solution for the remove quotes</span>
<span class="comment-copy">@FynnMahoney: Do you not understand the <code>remove_quotes</code> function, or the list comprehension that uses it? I edited the answer to try to explain what it's doing. But meanwhile, have you tried using <code>csv.reader</code> instead of trying to do it the hard way?</span>
<span class="comment-copy">@abarnert: I was quoting from your prose, which you've fixed. :-)</span>
