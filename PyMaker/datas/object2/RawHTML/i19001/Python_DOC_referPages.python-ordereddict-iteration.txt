<div class="post-text" itemprop="text">
<p>Why does my python OrderedDict get initialized 'out of order'?</p>
<p>The solution here is less intriguing than the explanation.   There's something here I just don't get, and perhaps an expanation would help others as well as me.</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict

&gt;&gt;&gt; spam = OrderedDict(s = (1, 2), p = (3, 4), a = (5, 6), m = (7, 8))

&gt;&gt;&gt; spam
OrderedDict([('a', (5, 6)), ('p', (3, 4)), ('s', (1, 2)), ('m', (7, 8))])

&gt;&gt;&gt; for key in spam.keys():
...    print key    
...
#  this is 'ordered' but not the order I wanted....
a
p
s
m

# I was expecting (and wanting):
s
p
a
m
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/3/library/collections.html#ordereddict-objects" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>The OrderedDict constructor and <code>update()</code> method both accept keyword arguments, but their order is lost because Python’s function call semantics pass-in keyword arguments using a regular unordered dictionary.</p>
</blockquote>
<p>So initialization loses the ordering, because it's basically calling a constructor with <code>**kwargs</code>.</p>
<p><strong>Edit:</strong> In terms of a <em>solution</em> (not just an <em>explanation</em>)—as pointed out <a href="https://stackoverflow.com/questions/16553506/python-ordereddict-iteration/16553551#comment23781738_16553551">in a comment by the OP</a>, passing in a single list of tuples <em>will</em> work:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; spam = OrderedDict([('s',(1,2)),('p',(3,4)),('a',(5,6)),('m',(7,8))])
&gt;&gt;&gt; for key in spam:
...     print(key)
...
s
p
a
m
&gt;&gt;&gt; for key in spam.keys():
...     print(key)
...
s
p
a
m
</code></pre>
<p>This is because it's only getting a single argument, a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Chris Krycho gave a good explanation of why things fail. </p>
<p>If you look at the repr() of an OrderedDict you get a hint at how to impart order from the beginning: You need to use a list of (key, value) pairs to preserve the order of the keys given by the list.</p>
<p>Here's one I did earlier:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; spamher = OrderedDict(s=6, p=5, a=4, m=3, h=2, e=1, r=0)
&gt;&gt;&gt; spamher
OrderedDict([('h', 2), ('m', 3), ('r', 0), ('s', 6), ('p', 5), ('a', 4), ('e', 1)])
&gt;&gt;&gt; 
&gt;&gt;&gt; list(spamher.keys())
['h', 'm', 'r', 's', 'p', 'a', 'e']
&gt;&gt;&gt; 
&gt;&gt;&gt; spamher = OrderedDict([('s', 6), ('p', 5), ('a', 4), ('m', 3), ('h', 2), ('e', 1), ('r', 0)])
&gt;&gt;&gt; list(spamher.keys())
['s', 'p', 'a', 'm', 'h', 'e', 'r']
&gt;&gt;&gt; 
</code></pre>
<p>(It just so happened that in Python v3.3.0 your original example of <code>spam</code> kept the keys in their original order from the outset. I changed to <code>spamher</code> to get arounf this).</p>
</div>
<div class="post-text" itemprop="text">
<p>As the <a href="https://stackoverflow.com/a/16553551/1612701">other</a> <a href="https://stackoverflow.com/a/16554551/1612701">answers</a> have mentioned, trying to pass a dict to OrderedDict or using keyword arguments doesn't preserve the order.  Passing in tuples is kinda ugly, though, and this is Python.  It should be beautiful.</p>
<p>You can <strike>ab</strike>use <code>__getitem__</code> on a class in order to have dict-like syntax for creating OrderedDict "literals":</p>
<pre><code>from collections import OrderedDict
class OD(object):
    """This class provides a nice way to create OrderedDict "literals"."""
    def __getitem__(self, slices):
        if not isinstance(slices, tuple):
            slices = slices,
        return OrderedDict((slice.start, slice.stop) for slice in slices)
# Create a single instance; we don't ever need to refer to the class.
OD = OD()
</code></pre>
<p>Now you can use dict-like syntax to create an OrderedDict:</p>
<pre><code>spam = OD['s': (1, 2), 
          'p': (3, 4), 
          'a': (5, 6), 
          'm': (7, 8)]
assert(''.join(spam.keys()) == 'spam')
</code></pre>
<p>This works because inside the square brackets, Python creates <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer">slice</a> literals, which happen to look like dict syntax if you squint a little.</p>
<p>The <code>OD</code> class could benefit from error checking, but this demonstrates how it can work.</p>
</div>
<span class="comment-copy">"kwargs" are not ordered.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/15711755/converting-dict-to-ordereddict">Converting dict to OrderedDict</a></span>
<span class="comment-copy">so that's why this works:        OrderedDict([('s',(1,2)),('p',(3,4)),('a',(5,6)),('m',(7,8))]  in this case the constructor is getting a single argument, a [list]  thanks</span>
<span class="comment-copy">This is solved with Python 3.6 right? from the docs - Changed in version 3.6: With the acceptance of PEP 468, order is retained for keyword arguments passed to the OrderedDict constructor and its update() method.</span>
<span class="comment-copy">@chris-krycho, the out-of-place order is preserved later right?</span>
