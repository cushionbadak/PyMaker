<div class="post-text" itemprop="text">
<p>Say I have an array/list of things I want to compare. In languages I am more familiar with, I would do something like</p>
<pre><code>for (int i = 0, i &lt; mylist.size(); i++)
    for (int j = i + 1, j &lt; mylist.size(); j++)
        compare(mylist[i], mylist[j])
</code></pre>
<p>This ensures we only compare each pair once. For some context, I am doing collision detection on a bunch of objects contained in the list. For each collision detected, a small 'collision' object describing the collision is appended to a list, which another routine then loops through resolving each collision (depending on the nature of the two colliding objects). Obviously, I only want to report each collision once.</p>
<p>Now, what is the pythonic way of doing this, since Python favors using iterators rather than looping over indices?</p>
<p>I had the following (buggy) code:</p>
<pre><code>for this in mylist:
    for that in mylist:
        compare(this, that)
</code></pre>
<p>But this clearly picks up each collision twice, which lead to some strange behavior when trying to resolve them. So what is the pythonic solution here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course this will generate each pair twice as each <code>for</code> loop will go through every item of the list.</p>
<p>You could use some <a href="http://docs.python.org/3/library/itertools.html" rel="noreferrer">itertools</a> magic here to generate all possible combinations:</p>
<pre><code>import itertools
for a, b in itertools.combinations(mylist, 2):
    compare(a, b)
</code></pre>
<p><a href="http://docs.python.org/3/library/itertools.html#itertools.combinations" rel="noreferrer"><code>itertools.combinations</code></a> will pair each element with each other element in the iterable, but only once.</p>
<hr/>
<p>You could still write this using index-based item access, equivalent to what you are used to, using nested <code>for</code> loops:</p>
<pre><code>for i in range(len(mylist)):
    for j in range(i + 1, len(mylist)):
        compare(mylist[i], mylist[j])
</code></pre>
<p>Of course this may not look as nice and pythonic but sometimes this is still the easiest and most comprehensible solution, so you should not shy away from solving problems like that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.combinations(mylist, 2)</code></p>
<pre><code>mylist = range(5)
for x,y in itertools.combinations(mylist, 2):
    print x,y

0 1
0 2
0 3
0 4
1 2
1 3
1 4
2 3
2 4
3 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> on the outer loop and using the index to slice the list on the inner loop is pretty Pythonic:</p>
<pre class="lang-py prettyprint-override"><code>for index, this in enumerate(mylist):
    for that in mylist[index+1:]:
        compare(this, that)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>This code will count frequency and remove duplicate elements:</strong></p>
<pre><code>from collections import Counter

str1='the cat sat on the hat hat'

int_list=str1.split();

unique_list = []
for el in int_list:

    if el not in unique_list:
        unique_list.append(el)
    else:
        print "Element already in the list"

print unique_list

c=Counter(int_list)

c.values()

c.keys()

print c
</code></pre>
</div>
<span class="comment-copy">I am not sure what "compare" means. What I would do is tu put one list in a hash table and then will do a loop over the second list. At each iteration I will make a lookup for the comparison.</span>
<span class="comment-copy">Great! Thanks for the explanation and links. I wasn't aware of the itertools module, but it looks handy.</span>
<span class="comment-copy">@poke <code>name 'compare' is not defined</code> how can I remedy this?</span>
<span class="comment-copy">@3kstc I took that from the question. Replace that by whatever you want to do with each pair of items.</span>
<span class="comment-copy">@poke - blonde moment - sorry! works like a charm with <code>print()</code></span>
<span class="comment-copy">If you want index, just add <code>index=range(len(mylist))</code> and <code>for a, b in itertools.combinations(index, 2):</code> then <code>compare(mylist[a], mylist[b])</code>. Now you can use the index to get the element from <code>mylist</code>.</span>
<span class="comment-copy">This is really helpful. Thanks.</span>
