<div class="post-text" itemprop="text">
<p>Let assume that I have simple code.</p>
<pre><code>list = [1,3,4,5,6,7,8]

for i, val in enumerate(list):
        print(val)
</code></pre>
<p>I would like to start from <code>i=2</code>. How do this in the simplest way? </p>
<p>Something like <code>for(int i=2; i&lt;list.lenght; i++)</code> in <code>java</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either use a normal loop over the index:</p>
<pre><code>lst = [1, 3, 4, 5, 6, 7, 8]
for i in range(2, len(lst)):
    val = lst[i]
    print(val)
</code></pre>
<p>Or you skip the first elements:</p>
<pre><code>lst = [1, 3, 4, 5, 6, 7, 8]
for i, val in enumerate(lst):
    if i &lt; 2:
        continue
    print(val)
</code></pre>
<p>A third option would be to use <a href="http://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow">itertools.islice</a> to skip the first element. This would allow you to keep the indexes as 0, 1, … although you skipped an element:</p>
<pre><code>for i, val in enumerate(itertools.islice(lst, 2, None)):
    print(i, val) # would begin with 1 3, then 2 4, …
</code></pre>
<p>As your iterable is a list, you can use list indexing for this as well:</p>
<pre><code>for i, val in enumerate(lst[2:]):
    print(i, val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [1]: for i,val in enumerate(list[2:]):
            print(val)
   .... 
4
5
6
7
8
</code></pre>
</div>
<span class="comment-copy">One more good advice: don't use <code>list</code> as variable name, since it is a built-in type.</span>
<span class="comment-copy">For the second way couldn't you do something like: <code>lst[2:]</code>?</span>
<span class="comment-copy">@squiguy For the second? Not if you want the original indexes to work.</span>
<span class="comment-copy">That's true. I just thought since the poster wanted to <i>start</i> from there, you could do that.</span>
<span class="comment-copy">If your Python is not too old you can pass a starting index to <code>enumerate</code> as a second argument, making the <code>islice</code> method the winner (to me anyway).</span>
