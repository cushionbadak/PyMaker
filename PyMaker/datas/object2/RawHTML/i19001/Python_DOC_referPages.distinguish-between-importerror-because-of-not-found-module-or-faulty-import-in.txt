<div class="post-text" itemprop="text">
<p>I have a few modules in python, which are imported dynamicly and all have the same structur (plugin.py, models.py, tests.py, ...). In the managing code i want to import those submodules, but for example models.py or tests.py is not mandatory. (So i could have <code>plugin_a.plugin</code> and <code>plugin_a.tests</code> but only <code>plugin_b.plugin</code>). </p>
<p>I can check if the submodule exists by</p>
<pre><code>try:
    __import__(module_name + ".tests")
except ImportError:
    pass
</code></pre>
<p>That will fail, if <code>module_name+".tests"</code> is not found, but it will also fail if the <code>tests</code>-module itself will try to import something, which is not found, for example because of a typo.
Is there any way to check if the module exists, without importing it or make sure, the <code>ImportError</code> is only raised by one specific import-action?</p>
</div>
<div class="post-text" itemprop="text">
<p>You know what the import error message will look like if the module doesn't exist so just check for that:</p>
<pre><code>try:
    module = module_name + '.tests'
    __import__(module)
except ImportError, e:
    if e.args and e.args[0] == 'No module named ' + module:
        print(module, 'does not exist')
    else:
        print(module, 'failed to import')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can see from the <em>length of the traceback</em> how many levels deep the import failed. A missing <code>.test</code> module has a traceback with just one frame, a direct dependency failing has two frames, etc.</p>
<p>Python 2 version, using <a href="https://docs.python.org/2/library/sys.html#sys.exc_info" rel="nofollow"><code>sys.exc_info()</code></a> to access the traceback:</p>
<pre><code>import sys


try:
    __import__(module_name + ".tests")
except ImportError:
    if sys.exc_info()[-1].tb_next is not None:
        print "Dependency import failed"
    else:
        print "No module {}.tests".format(module_name)
</code></pre>
<p>Python 3 version, where <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow">exceptions have a <code>__traceback__</code> attribute</a>:</p>
<pre><code>try:
    __import__(module_name + ".tests")
except ImportError as exc:
    if exc.__traceback__.tb_next is not None:
        print("Dependency import failed")
    else:
        print("No module {}.tests".format(module_name))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; def direct_import_failure(name):
...     try:
...         __import__(name)
...     except ImportError:
...         return sys.exc_info()[-1].tb_next is None
... 
&gt;&gt;&gt; with open('foo.py', 'w') as foo:
...     foo.write("""\
... import bar
... """)
... 
&gt;&gt;&gt; direct_import_failure('bar')
True
&gt;&gt;&gt; direct_import_failure('foo')
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following on from: <a href="https://stackoverflow.com/questions/14050281/how-to-check-if-a-python-module-exists-without-importing-it">How to check if a python module exists without importing it</a></p>
<p>The <a href="https://docs.python.org/2/library/imp.html" rel="nofollow noreferrer"><code>imp.find_module</code></a> function will either return a 3-element tuple (file, pathname, description) or raise an ImportError. </p>
<p>It will not raise an error if there is a problem with the module, only if it doesn't exist.</p>
<p>The python docs suggest that you should first find and import the package and then use its <strong>path</strong> in second <code>find_module</code>, doing this recursively if necessary. </p>
<p>This seems a little messy to me. </p>
<p>The function below will check for the existence of a given module, at any level of relative import (<code>module.py</code>, <code>package.module.py</code>, <code>package.subpackage.module.py</code> etc.).</p>
<p><code>imp.find_module</code> returns an open file, which you could use in <code>imp.load_module</code>, but this, too seems a little clunky, so I close the file so that it can be imported outside of the function.</p>
<p>Note that this isn't perfect. if you are looking for <code>package.subpackage.module</code> but actually <code>package.subpackage</code> is a valid module it will also return true.</p>
<pre><code>import imp
import importlib

def module_exists(modulename):
    modlist = modulename.split('.')
    pathlist = None
    for mod in modlist:
        print mod
        try:
            openfile, pathname, desc = imp.find_module(mod,pathlist)
            pathlist = [pathname]
        except ImportError:
            print "Module '{}' does not exist".format(mod)
            return(False)
        else:
            print 'found {}'.format(openfile)
            if openfile:
                openfile.close()
                return(True)

if __name__ == '__main__':
    mymodule = 'parrot.type.norwegian_blue'
    if module_exists(mymodule):
        importlib.import_module(mymodule)
</code></pre>
<p>Note also that I'm using <code>importlib.import_module</code> instead of <code>__import__</code>. </p>
<p>Finally, note that <a href="https://docs.python.org/2/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> is Python 2.7 and upwards</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there any way to check if the module exists, without importing it
  or make sure, the ImportError is only raised by one specific
  import-action?</p>
</blockquote>
<p>There could be multiple reasons why <code>ImportError</code> fails because importing will evaluate the module; if there is a syntax error the module will fail to load.</p>
<p>To check if a module exists without loading it, use <a href="https://docs.python.org/2/library/pkgutil.html#pkgutil.find_loader" rel="nofollow"><code>pkgutil.find_loader</code></a>, like this:</p>
<pre><code>&gt;&gt;&gt; pkgutil.find_loader('requests')
&lt;pkgutil.ImpLoader instance at 0x9a9ce8c&gt;
&gt;&gt;&gt; pkgutil.find_loader('foo')
</code></pre>
<p>It will return either a <code>ImpLoader</code> instance, or <code>None</code> if the package is not importable. You can get further details from the <code>ImpLoader</code> instance, like the path of the module:</p>
<pre><code>&gt;&gt;&gt; pkgutil.find_loader('django').filename
'/usr/local/lib/python2.7/dist-packages/django'
</code></pre>
</div>
<span class="comment-copy">Thanks, that worked. I'm a little bit concerned about depending on the exact wording of the error-message, but maybee i just check if the module is in the error-string:)</span>
<span class="comment-copy">@Daishy - yeah, could result in non-obvious failure later. Just account for submodules. module.tests.froob contains module.tests but shouldn't match your test.</span>
<span class="comment-copy">Cute. This seems like the most flexible and reliable answer so far.</span>
<span class="comment-copy">I made a little library for this: <a href="https://pypi.python.org/pypi/optional_import" rel="nofollow noreferrer">pypi.python.org/pypi/optional_import</a></span>
<span class="comment-copy">How does this work for relative imports?</span>
<span class="comment-copy">Hmm good point, sorry, I missed that.</span>
<span class="comment-copy">Updated code to better support any level of relative imports.</span>
<span class="comment-copy">Nice, although this still isn't a general solution because it doesn't support relative imports. (<code>ImportError: Relative module names not supported</code>)</span>
