<div class="post-text" itemprop="text">
<p>I am creating a program where you enter the password, and you can play games. In one of my definitions <code>riddle()</code>, It tells me <code>d1</code>, <code>d2</code>, <code>d3</code>, <code>d4</code>, and <code>d5</code> are being referenced before they are defined, but to the best of my knowledge they have already been defined. Also when this was still working, i tried to make it that solving a task would make it say it had been completed, but when I completed one, it still said that 1 was incomplete and so on. I need a fix for both of these problems.</p>
<pre><code>def riddle():
    d1 = 'n'
    d2 = 'n'
    d3 = 'n'
    d4 = 'n'
    d5 = 'n'
    def compcheck():
        print('There are 5 tasks to complete. Enter a number to see task.')
        if d1 in ('y'):
            t1 = 'Completed.'
        if d2 in ('y'):
            t2 = 'Completed.'
        if d3 in ('y'):
            t3 = 'Completed.'
        if d4 in ('y'):
            t4 = 'Completed.'
        if d5 in ('y'):
            t5 = 'Completed.'
        if d1 in ('n'):
            t1 = 'Incomplete.'
        if d2 in ('n'):
            t2 = 'Incomplete.'
        if d3 in ('n'):
            t3 = 'Incomplete.'
        if d4 in ('n'):
            t4 = 'Incomplete.'
        if d5 in ('n'):
            t5 = 'Incomplete.'
        print ('1 is ' + t1)
        print ('2 is ' + t2)
        print ('3 is ' + t3)
        print ('4 is ' + t4)
        print ('5 is ' + t5)
    def solve():
        compcheck()
        if d1 and d2 and d3 and d4 and d5 in ['y']:
            print ('The password is 10X2ID 4TK56N H87Y8G.')
        tasknumber = input().lower()
        if tasknumber in ('1'):
            print('Fill in the blanks: P_tho_ i_ a c_d_ng lan_u_ge. (No spaces. Ex: ldkjfonv)')
            task1ans = input().lower()
            if task1ans in ['ysoinga']:
                d1 = 'y'
            solve()
        if tasknumber in ('2'):
            print('Is the shape of a strand of DNA: A): a Lemniscate, B): a Hyperboloid, C): a Double Helix, or D): a Gömböc.')
            task2ans = input().lower()
            if task2ans in ['c']:
                d2 = 'y'
            solve()
        if tasknumber in ('3'):
            print ('What is the OS with a penguin mascot?')
            task3ans = input().lower()
            if task3ans in ('linux'):
                d3 = 'y'
            solve()
        if tasknumber in ('4'):
            print('')
        if tasknumber in ('5'):
            print('')
    solve()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Inside the <code>solve</code> function, you are <em>assigning</em> to the <code>d1</code>, <code>d2</code>, etc. variables. That makes those variables local to that function, but you also try to test their contents at the start.  This is where your error comes from.</p>
<p>You'd have to declare those variables <a href="http://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="nofollow"><code>nonlocal</code></a>:</p>
<pre><code>def solve():
    nonlocal d1, d2, d3, d4, d5
</code></pre>
<p>You may want to use a list instead:</p>
<pre><code>d = ['n'] * 5
t = ['Incomplete' if x == 'n' else 'Complete' for x in d]
for i, x in enumerate(t, 1):
    print('{} is {}'.format(i, x)
</code></pre>
<p>and </p>
<pre><code>if tasknumber == '1':
    print('Fill in the blanks: P_tho_ i_ a c_d_ng lan_u_ge. (No spaces. Ex: ldkjfonv)')
    answer = input().lower()
    if answer == 'ysoinga':
        d[0] = 'y'
    solve()
</code></pre>
<p>This has the added advantage that now you no longer need a <code>nonlocal</code> keyword either; you are no longer assigning to <code>d</code> but to the <em>indices</em> contained <em>in</em> <code>d</code>. You are mutating <code>d</code>, not replacing it with another value.</p>
<p>Other remarks; the line:</p>
<pre><code>if d1 and d2 and d3 and d4 and d5 in ['y']:
</code></pre>
<p>also won't work; I think you meant that to be:</p>
<pre><code>if d1 == 'y' and d2 == 'y' and d3 == 'y' and d4 == 'y' and d5 == 'y':
</code></pre>
<p>but with a list that could be:</p>
<pre><code>if all(x == 'y' for x in d):
</code></pre>
<p>or perhaps </p>
<pre><code>if d == ['y'] * 5:
</code></pre>
<p>When testing for a specific string, use <code>== 'value to test for'</code>, not <code>in ['value to test for']</code>. The latter works but has to do <em>two</em> things; loop over the list and test for equality on each element. <code>==</code> goes straight for the equality test.</p>
</div>
<span class="comment-copy">+1 for <code>nonlocal</code>, though it's worth noting that it isn't available in Python 2 (not that that's a problem for a <code>Python 3</code> tagged question). I'll also go a bit beyond you to say that most of the <code>string1 in string2</code> or <code>string1 in [string2]</code> calls are inappropriate, even where they work. That first expression checks if <code>string1</code> is a substring of <code>string2</code>, while the second checks if string1 equals any of the strings in the list (of which there is only one, making it an awkward way to do an equality check). To test strings for equality, just use <code>==</code>.</span>
<span class="comment-copy">@Blckknght: Was just editing all that in. :-)</span>
