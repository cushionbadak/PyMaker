<div class="post-text" itemprop="text">
<p>There is code:</p>
<pre><code>class A:  
  @staticmethod
  def g():
    A.__z = 4

print(dir(A))
A.g()
print(dir(A)) # A has attribute _A__z
A.__m = 5
print(dir(A)) # A has attribute _A__z and __m
</code></pre>
<p>Why the name <code>__m</code> is not mangled to <code>_A__m</code> but <code>__z</code> is?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the <a href="http://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">Python tutorial</a> puts it:</p>
<blockquote>
<p>This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.</p>
</blockquote>
<p>Name mangling occurs at compilation time for code that is lexically inside of a <code>class</code> statement. It doesn't occur for code outside of <code>class</code> statements. It doesn't occur for code in functions that are defined outside a <code>class</code> statement and then added to the class object. It doesn't occur for code dynamically executed by a <code>exec</code> or <code>eval</code> call inside a <code>class</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Exactly because you declared it outside the class, and name mangling happens inside classes.</p>
</div>
