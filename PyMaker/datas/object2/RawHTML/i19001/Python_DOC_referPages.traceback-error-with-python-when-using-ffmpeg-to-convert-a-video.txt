<div class="post-text" itemprop="text">
<p>The simple way my script runs is the user provides a folder location and a filetype and glob.glob() finds the files with the filetype provided and adds them to a list. It then uses a for loop and goes through the list and converts each video. But it doesn't like when I try to run my ffmpeg command. Any help would be awesome. I'm also using Win 7 64 bit with 64 bit ffmpeg and Python 3.3
Here's the error:</p>
<pre><code>OS Error
Traceback (most recent call last):
  File "C:\Python33\lib\subprocess.py", line 1106, in _execute_child
    startupinfo)
FileNotFoundError: [WinError 2] The system cannot find the file specified

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\user\Workspace\PythonConverter\HTMLandPythonConverter\Converter.py", line 77, in &lt;module&gt;
    massConvert(fileNames)
  File "C:\Users\user\Workspace\PythonConverter\HTMLandPythonConverter\Converter.py", line 47, in massConvert
    convertVideotoNewFormat('.mp4', x)
  File "C:\Users\user\Workspace\PythonConverter\HTMLandPythonConverter\Converter.py", line 61, in convertVideotoNewFormat
    myFile = subprocess.Popen(ffmpegString)#, stdout=subprocess.PIPE, stderr=subprocess.PIPE
  File "C:\Python33\lib\subprocess.py", line 820, in __init__
    restore_signals, start_new_session)
  File "C:\Python33\lib\subprocess.py", line 1112, in _execute_child
    raise WindowsError(*e.args)
FileNotFoundError: [WinError 2] The system cannot find the file specified
</code></pre>
<p>Here is my code:</p>
<pre><code>import subprocess
from subprocess import call
import glob

fileNames = []
fileLocation = {}
filetype = {}
def convertString(location):
    s = list(location)
    for i in range(len(s)):
        if s[i] in '\\':
            s[i] = '/'

    if s[len(s)-1] != '/':
        s.append('/')
    location = "".join(s)
    return location

def convertStringBack(stringTo):
    s = list(stringTo)
    for i in range(len(s)):
        if s[i] in '/':
            s[i] = '\\'
    stringTo = "".join(s)
    return stringTo

def fileTypeTester():
    FieldType = '*' + input('What\'s the file type we are converting from?')
    typeSplit = list(FieldType)
    if typeSplit[1] != '.':
        typeSplit.insert(1,'.')
    FieldType = "".join(typeSplit)
    if FieldType not in ['*.flv','*.kdb']:
        print('Not a valid file type')
    else:
        return FieldType
    return None

def massConvert(listOfFiles):
    print('Starting Conversion')
    for x in listOfFiles:
        #x = convertStringBack(x)
        print('Converting ' + x + ' to .mp4')
        convertVideotoNewFormat('.mp4', x)
    print('Finished File Conversion')


def convertVideotoNewFormat(newFormat, fileLoc):
    newFilePath = fileLoc[0:len(fileLoc)-4]
    ffmpegString = ["ffmpeg64","-i", fileLoc,"-qscale","0","-ar","22050","-vcodec","libx264",newFilePath,newFormat]
    try:
        subprocess.check_call(newFilePath)
    except OSError:
        print('OS Error')
    except subprocess.CalledProcessError:
        print('Subprocess Error')
    myFile = subprocess.Popen(ffmpegString)
    print(myFile)

#This will replace old HTML flv object tag with new video tag, but it is yet to be implemented
def replaceHTML():
    pass

fileLocation = input('What is the path of the files you\'d like to convert?')
fileLocation = convertString(fileLocation)
fileType = fileTypeTester()
fileNames = glob.glob(fileLocation + fileType)
massConvert(fileNames)
</code></pre>
<p>I've looked around and most of the tutorials are in 2.7 the code is 3.3 and I can't find a tutorial to use ffmpeg for 3.3. My ffmpeg is set to 'ffmpeg64' on my PATH. </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>First:</p>
<pre><code>def convertVideotoNewFormat(newFormat, fileLoc):
    newFilePath = fileLoc[0:len(fileLoc)-4]
    ffmpegString = ["ffmpeg64","-i", fileLoc,"-qscale","0","-ar","22050","-vcodec","libx264",newFilePath,newFormat]
    try:
        subprocess.check_call(newFilePath)
    except OSError:
        print('OS Error')
    except subprocess.CalledProcessError:
        print('Subprocess Error')
</code></pre>
<p>This part cannot possibly do anything useful. The <code>newFilePath</code> is a path you've made by stripping the last 4 characters off a video file. You can't run the program at that path, because (unless you get very, very unlucky) there is no such problem.</p>
<p>That explains the first <code>OSError</code>.</p>
<hr/>
<p>For the second error, it's telling you that <code>ffmpeg64</code> isn't on your <code>PATH</code>. You say that it <em>is</em> on your <code>PATH</code>, but there is no other way that you could get that error from <a href="http://hg.python.org/cpython/file/cd9141a4f999/Lib/subprocess.py#l1099" rel="nofollow">that line of code</a>. You can look up what <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682425%28v=vs.85%29.aspx" rel="nofollow"><code>CreateProcess</code></a> does if you want.</p>
<p>There are three common reasons for this:</p>
<ol>
<li>You've used <code>SET</code> to modify the <code>PATH</code> in a particular cmd.exe session (DOS prompt), but you're running code in a different DOS prompt, or running GUI code, or for some other reason have a different session.</li>
<li>You've used the control panel to modify <code>PATH</code> for your user, but you're running the Python script as a different user (e.g., as part of a WSGI service).</li>
<li>You haven't modified <code>PATH</code> at all; you're relying on the fact that you've <code>cd</code>'d into the same directory as <code>ffmpeg64</code>, and <code>.</code> is on the default <code>PATH</code> in Windows.</li>
</ol>
<hr/>
<p>As a side note, this:</p>
<pre><code>newFilePath = fileLoc[0:len(fileLoc)-4]
</code></pre>
<p>… is the same as:</p>
<pre><code>newFilePath = fileLoc[:-4]
</code></pre>
<p>… except that it's harder to read, and less robust (it will raise an exception if <code>fileLoc</code> is under 4 characters wrong), and slower and easier to get wrong. </p>
<p>But really, if you want to strip off an extension, you don't want <em>either</em>. If you have <code>foobar.mpeg</code>, do you really want to turn that into <code>foobar..mp4</code>? Use the <a href="http://docs.python.org/3/library/os.path.html" rel="nofollow"><code>os.path</code></a> module to munge paths:</p>
<pre><code>newFilePath, ext = os.path.splitext(fileLoc)
</code></pre>
<hr/>
<p>While we're at it, you've got some other problems in your code:</p>
<pre><code>myFile = subprocess.Popen(ffmpegString)
print(myFile)
</code></pre>
<p><code>subprocess.Popen</code> creates a subprocess object, which you are eventually going to have to <code>wait</code> on. Printing it out won't do anything particularly useful.</p>
<p>If you want to do the conversions one at a time, waiting for each one to finish before doing the next, use <code>check_call</code>, not <code>Popen</code> here.</p>
<p>If you want to kick them all off in parallel, <code>return myFile</code> here, and then do something like this:</p>
<pre><code>children = []
for x in listOfFiles:
    print('Converting ' + x + ' to .mp4')
    children.append(convertVideotoNewFormat('.mp4', x))
for child in children:
    child.wait()
print('Finished File Conversion')
</code></pre>
</div>
<span class="comment-copy">Are you <i>sure</i> that <code>ffmpeg64</code> is on your <code>PATH</code>? (And are you sure that the <code>PATH</code> in the DOS prompt you're looking at is the same <code>PATH</code> that Python is seeing? If you just <code>SET</code> it at the prompt, it only affects non-GUI programs that you run from that same prompt.)</span>
<span class="comment-copy">Also, 2.7 <code>subprocess</code> code pretty much runs unchanged in 3.3 (as long as you're not trying to pass non-ASCII characters as parameters, which you're not). So, your tutorials should be fine.</span>
<span class="comment-copy">Thanks for helping my nub self out, I'm really new to python and appreciate your help.</span>
<span class="comment-copy">I'm having the same issue with ffmpeg, I didn't command prompt it into the path, I used the advanced system settings  -&gt; environment Variables and added to the PATH with ';C:\ffmpeg\bin' and it's in that file. <a href="http://imgur.com/8jUo1qH" rel="nofollow noreferrer">Picture 1</a> and <a href="http://imgur.com/4BjHKkb" rel="nofollow noreferrer">Picture 2</a></span>
<span class="comment-copy">First, in your Picture 2, there's no program called <code>ffmpeg64</code> there. There's an <code>ffmpeg</code>, but that's not the same name.</span>
<span class="comment-copy">Also, how are you testing the Python script? If you already had a command prompt open before editing the advanced system settings, and are using that one to run the script, it will still see the old values; you have to open a new command prompt to run the script in.</span>
<span class="comment-copy">I'm using an eclipse plugin called PyDev to edit and run the code. I changed it to make it easier, and I switched computers.</span>
