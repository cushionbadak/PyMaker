<div class="post-text" itemprop="text">
<p>I'm using Python with wxPython for writing an app.</p>
<p>The method I'm considering to accomplish this may not be the best - if that's the case, let me know because I'm open to refactoring.</p>
<p>Right now, I have one GUI form. The main program start point instantiates an instance of the GUI form then runs wx.mainLoop(), which causes the app's main initial thread to block for the lifetime of the app.</p>
<p>We of course know that when events happen in the UI, the UI thread runs the code for them.</p>
<p>Now, I have another thread - a worker thread. This thread needs to sit idle, and then when something happens in the UI thread, e.g. a button is clicked, I want the worker thread to stop idling and do something else - run a function, say.</p>
<p>I can't envision this right now but I could see as the app gets more complex also having to signal the worker thread while it's actually busy doing something. </p>
<p>I have two questions about this setup:</p>
<ol>
<li><p>How can I make my worker thread idle without using up CPU time? Doing something like <code>while True: pass</code> will suck CPU time, while something like <code>while True: time.sleep(0.1)</code> will not allow instantaneous reaction to events. </p></li>
<li><p>What's the best way to signal into the worker thread to do something? I don't want the UI thread to execute something, I want the worker thread to be signaled, by the UI thread, that it should change what it's doing. Ideally, I'd have some way for the worker thread to register a callback with the UI itself, so that when a button is clicked or any other UI Event happens, the worker thread is signalled to change what it's doing.</p></li>
</ol>
<p>So, is this the best way to accomplish this? And what's the best way to do it?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>First: Do you actually need a background thread to sit around idle in the first place?</p>
<p>On most platforms, starting a new thread is cheap. (Except on Windows and Linux, where it's <em>supercheap</em>.) So, why not just kick off a thread whenever you need it? (It's just as easy to keep around a list of threads as a single thread, right?)</p>
<p>Alternatively, why not just create a <a href="http://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer"><code>ThreadPoolExecutor</code></a>, and just submit jobs to it, and let the executor worry about when they get run and on which thread. Any time you can just think in terms of "tasks that need to get run without blocking the main thread" instead of "worker threads that need to wait on work", you're making your life easier. Under the covers, there's still one or more worker threads waiting on a queue, or something equivalent, but that part's all been written (and debugged and optimized) for you. All you have to write are the tasks, which are just regular functions.</p>
<p>But, if you want to write explicit background threads, you can, so I'll explain that.</p>
<hr/>
<blockquote>
<p>How can I make my worker thread idle without using up CPU time? … What's the best way to signal into the worker thread to do something?</p>
</blockquote>
<p>The way to idle a thread until a value is ready is to wait on a synchronization object. On any modern OS, waiting on a synchronization object means the operating system stops giving you any CPU time until the object is ready for you.*</p>
<p>There are a variety of different options you can see in the <code>Threading</code> module docs, but the obvious one to use in most cases like this is a <a href="http://docs.python.org/2/library/threading.html#condition-objects" rel="nofollow noreferrer"><code>Condition</code></a>. The way to signal the worker thread is then to <code>notify</code> the <code>Condition</code>.</p>
<p>However, often a <a href="http://docs.python.org/2/library/queue.html#Queue.Queue" rel="nofollow noreferrer"><code>Queue</code></a> is a lot simpler. To wait on a <code>Queue</code>, just call its <code>get</code> method with <code>block=True</code>. To signal another thread to wake up, just <code>put</code> something on the <code>Queue</code>. (Under the covers, a <code>Queue</code> wraps up a <code>list</code> or <code>deque</code> or other collection, a <code>Lock</code>, and a <code>Condition</code>, so you just tell it what you want to do—check for a value, block until there's a value, add a value—instead of dealing with waiting and signaling and protecting the collection.)</p>
<p>See the answer to <a href="https://stackoverflow.com/questions/16452517/controlling-ui-elements-in-wxpython-using-threading/16452674#16452674">controlling UI elements in wxPython using threading</a> for how to signal in both directions, from a worker thread to a UI thread and vice-versa.</p>
<hr/>
<blockquote>
<p>I'd have some way for the worker thread to register a callback with the UI itself, so that when a button is clicked or any other UI Event happens, the worker thread is signalled to change what it's doing.</p>
</blockquote>
<p>You can do it this way if you want. Just pass <code>self.queue.put</code> or <code>def callback(value): self.value = value; self.condition.notify()</code> or whatever as a callback, and the GUI thread doesn't even have to know that the callback is triggering another thread.</p>
<p>In fact, that's a pretty nice design that may make you very happy later, when you decide to move some code back and forth between inline and background-threaded, or move it off to a child process instead of a background thread, or whatever.</p>
<hr/>
<blockquote>
<p>I can't envision this right now but I could see as the app gets more complex also having to signal the worker thread while it's actually busy doing something.</p>
</blockquote>
<p>But what do you want to happen if it's busy?</p>
<p>If you just want to say "If you're idle, wake up and do this task; otherwise, hold onto it and do it whenever you're ready", that's exactly what a <code>Queue</code>, or an <code>Executor</code>, will do for you automatically.</p>
<p>If you want to say, "If you're idle, wake up, otherwise, don't worry about it", that's what a <code>Condition</code> or <code>Event</code> will do.</p>
<p>If you want to say, "If you're idle, wake up and do this, otherwise, cancel what you're doing and do this instead", that's a bit more complicated. You pretty much need to have the background thread periodically check an "interrupt_me" variable while it's busy (and put a <code>Lock</code> around it), and then you'll set that flag as well as notifying the <code>Condition</code>… although in some cases, you can merge the idle and busy cases into a single <code>Condition</code> or <code>Event</code> (by calling an infinite <code>wait()</code> when idle, and a quick-check <code>wait(timeout=0)</code> when busy).</p>
<hr/>
<p>* In some cases—e.g., a Linux <code>futex</code> or a Windows <code>CriticalSection</code>—it may actually spin off a little bit of CPU time in some cases, because that happens to be a good optimization. But the point is, you're not <em>asking</em> for any CPU time until you're ready to use it.</p>
</div>
<span class="comment-copy">I like the "One last thing to think about:..." section.</span>
<span class="comment-copy">@PreludeAndFugue: Should I move that nearer to the top? I'm pretty sure that's how <i>I'd</i> solve the problem (although without knowing what his actual background tasks are, it's only "pretty sure"). But it's not directly what he asked.</span>
<span class="comment-copy">Yes, I think so.</span>
<span class="comment-copy">@PreludeAndFugue: OK, done. Thanks for the advice.</span>
