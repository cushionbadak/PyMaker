<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9798407/is-there-a-logical-difference-between-not-and-without-is">Is there a logical difference between 'not ==' and '!= (without is)</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I wondered what'd be the difference between these two pieces of code:</p>
<pre><code>while choice != "y" and choice != "n":
while not choice == "y" and not choice == "n":
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first uses the object’s <a href="http://docs.python.org/3/reference/datamodel.html#object.__ne__" rel="nofollow noreferrer"><code>__ne__</code></a> method, while the second uses the object’s <a href="http://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> method and negates its result.</p>
<p>While both methods should pair their result so <code>a == b</code> implies <code>not a != b</code> this is actually not required or enforced.</p>
<blockquote>
<p>There are no implied relationships among the comparison operators. The truth of <code>x==y</code> does not imply that <code>x!=y</code> is false. Accordingly, when defining <code>__eq__()</code>, one should also define <code>__ne__()</code> so that the operators will behave as expected.</p>
</blockquote>
<p>In your case, where <code>choice</code> is a string (I guess?) it does not make a real difference. The built-in types all ensure the inverse relationship between <code>==</code> and <code>!=</code>. So the only difference is really how understandable it is when looking at the code. And I personally prefer the more concise first version.</p>
</div>
<span class="comment-copy">One's easier to type. I'd imagine it's more efficient as well.</span>
<span class="comment-copy">@Volatility More efficient for humans to read, aye. Any performance difference is either not measurable, or at least negligible ;-)</span>
<span class="comment-copy">Well, apparently when I've tried it gave me a completely different result. With the first option If I'd wrote something different between "Y" and "N" it would run the code, istead with the second option it would not - for some reason.</span>
<span class="comment-copy">@GiamPy No, <code>is</code> and <code>is not</code> are identity comparisons, while <code>==</code> and <code>!=</code> are equality comparisons. They are not required to yield the same result and definitely do not work for strings. For example <code>'a{}'.format('b') is 'ab'</code> is false, while <code>'a{}'.format('b') == 'ab'</code> is true.</span>
<span class="comment-copy">@GiamPy No. <code>is not</code> is a different operator than <code>!=</code>. (and <code>is</code> is a different operator than <code>==</code>). Generally you may think of <code>==</code> and <code>!=</code> as examining the <b>contents</b> of objects, whereas <code>is</code> and <code>is not</code> check literally whether the operands <b>are the exact same object</b>. This is usually useful for comparing to single-instance values like <code>None</code>, <code>True</code> and <code>False</code>. For example <code>0 is False</code> evaluates to False, while <code>0 == False</code> evaluates to True (because the integer value of False is 0.)</span>
