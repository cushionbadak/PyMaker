<div class="post-text" itemprop="text">
<p>I have this:</p>
<pre><code>d1 = OrderedDict([('a', '1'), ('b', '2')])
</code></pre>
<p>If I do this:</p>
<pre><code>d1.update({'c':'3'})
</code></pre>
<p>Then I get this:</p>
<pre><code>OrderedDict([('a', '1'), ('b', '2'), ('c', '3')])
</code></pre>
<p>but I want this:</p>
<pre><code>[('c', '3'), ('a', '1'), ('b', '2')]
</code></pre>
<p>without creating new dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no built-in method for doing this in Python 2. If you need this, you need to write a <code>prepend()</code> method/function that operates on the <code>OrderedDict</code> internals with O(1) complexity.</p>
<p>For Python 3.2 and later, you <strong>should</strong> use the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="noreferrer"><code>move_to_end</code></a> method. The method accepts a <code>last</code> argument which indicates whether the element will be moved to the bottom (<code>last=True</code>) or the top (<code>last=False</code>) of the <code>OrderedDict</code>.</p>
<p>Finally, if you want a quick, dirty and <em>slow</em> solution, you can just create a new <code>OrderedDict</code> from scratch.</p>
<p>Details for the four different solutions:</p>
<hr/>
<h1>Extend <code>OrderedDict</code> and add a new instance method</h1>
<pre><code>from collections import OrderedDict

class MyOrderedDict(OrderedDict):

    def prepend(self, key, value, dict_setitem=dict.__setitem__):

        root = self._OrderedDict__root
        first = root[1]

        if key in self:
            link = self._OrderedDict__map[key]
            link_prev, link_next, _ = link
            link_prev[1] = link_next
            link_next[0] = link_prev
            link[0] = root
            link[1] = first
            root[1] = first[0] = link
        else:
            root[1] = first[0] = self._OrderedDict__map[key] = [root, first, key]
            dict_setitem(self, key, value)
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; d = MyOrderedDict([('a', '1'), ('b', '2')])
&gt;&gt;&gt; d
MyOrderedDict([('a', '1'), ('b', '2')])
&gt;&gt;&gt; d.prepend('c', 100)
&gt;&gt;&gt; d
MyOrderedDict([('c', 100), ('a', '1'), ('b', '2')])
&gt;&gt;&gt; d.prepend('a', d['a'])
&gt;&gt;&gt; d
MyOrderedDict([('a', '1'), ('c', 100), ('b', '2')])
&gt;&gt;&gt; d.prepend('d', 200)
&gt;&gt;&gt; d
MyOrderedDict([('d', 200), ('a', '1'), ('c', 100), ('b', '2')])
</code></pre>
<hr/>
<h1>Standalone function that manipulates <code>OrderedDict</code> objects</h1>
<p>This function does the same thing by accepting the dict object, key and value. I personally prefer the class:</p>
<pre><code>from collections import OrderedDict

def ordered_dict_prepend(dct, key, value, dict_setitem=dict.__setitem__):
    root = dct._OrderedDict__root
    first = root[1]

    if key in dct:
        link = dct._OrderedDict__map[key]
        link_prev, link_next, _ = link
        link_prev[1] = link_next
        link_next[0] = link_prev
        link[0] = root
        link[1] = first
        root[1] = first[0] = link
    else:
        root[1] = first[0] = dct._OrderedDict__map[key] = [root, first, key]
        dict_setitem(dct, key, value)
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; d = OrderedDict([('a', '1'), ('b', '2')])
&gt;&gt;&gt; ordered_dict_prepend(d, 'c', 100)
&gt;&gt;&gt; d
OrderedDict([('c', 100), ('a', '1'), ('b', '2')])
&gt;&gt;&gt; ordered_dict_prepend(d, 'a', d['a'])
&gt;&gt;&gt; d
OrderedDict([('a', '1'), ('c', 100), ('b', '2')])
&gt;&gt;&gt; ordered_dict_prepend(d, 'd', 500)
&gt;&gt;&gt; d
OrderedDict([('d', 500), ('a', '1'), ('c', 100), ('b', '2')])
</code></pre>
<hr/>
<h1>Use <code>OrderedDict.move_to_end()</code> (Python &gt;= 3.2)</h1>
<p><a href="https://docs.python.org/3/whatsnew/3.2.html#collections" rel="noreferrer">Python 3.2 introduced</a> the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="noreferrer"><code>OrderedDict.move_to_end()</code></a> method. Using it, we can move an existing key to either end of the dictionary in O(1) time.</p>
<pre><code>&gt;&gt;&gt; d1 = OrderedDict([('a', '1'), ('b', '2')])
&gt;&gt;&gt; d1.update({'c':'3'})
&gt;&gt;&gt; d1.move_to_end('c', last=False)
&gt;&gt;&gt; d1
OrderedDict([('c', '3'), ('a', '1'), ('b', '2')])
</code></pre>
<p>If we need to insert an element and move it to the top, all in one step, we can directly use it to create a <code>prepend()</code> wrapper (not presented here).</p>
<hr/>
<h1>Create a new <code>OrderedDict</code> - slow!!!</h1>
<p>If you don't want to do that and <strong>performance is not an issue</strong> then easiest way is to create a new dict:</p>
<pre><code>from itertools import chain, ifilterfalse
from collections import OrderedDict


def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

d1 = OrderedDict([('a', '1'), ('b', '2'),('c', 4)])
d2 = OrderedDict([('c', 3), ('e', 5)])   #dict containing items to be added at the front
new_dic = OrderedDict((k, d2.get(k, d1.get(k))) for k in \
                                           unique_everseen(chain(d2, d1)))
print new_dic
</code></pre>
<p><strong>output:</strong></p>
<pre><code>OrderedDict([('c', 3), ('e', 5), ('a', '1'), ('b', '2')])
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT (2019-02-03)</strong>
<em>Note that the following answer only works on older versions of Python. More recently, <code>OrderedDict</code> has been rewritten in C. In addition this does touch double-underscore attributes which is frowned upon.</em></p>
<p>I just wrote a subclass of <code>OrderedDict</code> in a project of mine for a similar purpose. <a href="https://gist.github.com/jaredks/6276032" rel="nofollow noreferrer">Here's the gist</a>.</p>
<p>Insertion operations are also constant time <code>O(1)</code> (they don't require you to rebuild the data structure), unlike most of these solutions.</p>
<pre><code>&gt;&gt;&gt; d1 = ListDict([('a', '1'), ('b', '2')])
&gt;&gt;&gt; d1.insert_before('a', ('c', 3))
&gt;&gt;&gt; d1
ListDict([('c', 3), ('a', '1'), ('b', '2')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to make a new instance of <code>OrderedDict</code>. If your keys are unique:</p>
<pre><code>d1=OrderedDict([("a",1),("b",2)])
d2=OrderedDict([("c",3),("d",99)])
both=OrderedDict(list(d2.items()) + list(d1.items()))
print(both)

#OrderedDict([('c', 3), ('d', 99), ('a', 1), ('b', 2)])
</code></pre>
<p>But if not, beware as this behavior may or may not be desired for you:</p>
<pre><code>d1=OrderedDict([("a",1),("b",2)])
d2=OrderedDict([("c",3),("b",99)])
both=OrderedDict(list(d2.items()) + list(d1.items()))
print(both)

#OrderedDict([('c', 3), ('b', 2), ('a', 1)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you know you will want a 'c' key, but do not know the value, insert 'c' with a dummy value when you create the dict.</p>
<pre><code>d1 = OrderedDict([('c', None), ('a', '1'), ('b', '2')])
</code></pre>
<p>and change the value later.</p>
<pre><code>d1['c'] = 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is now possible with move_to_end(key, last=True)</p>
<pre><code>&gt;&gt;&gt; d = OrderedDict.fromkeys('abcde')
&gt;&gt;&gt; d.move_to_end('b')
&gt;&gt;&gt; ''.join(d.keys())
'acdeb'
&gt;&gt;&gt; d.move_to_end('b', last=False)
&gt;&gt;&gt; ''.join(d.keys())
'bacde'
</code></pre>
<p><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you need functionality that isn't there, just extend the class with whatever you want:</p>
<pre><code>from collections import OrderedDict

class OrderedDictWithPrepend(OrderedDict):
    def prepend(self, other):
        ins = []
        if hasattr(other, 'viewitems'):
            other = other.viewitems()
        for key, val in other:
            if key in self:
                self[key] = val
            else:
                ins.append((key, val))
        if ins:
            items = self.items()
            self.clear()
            self.update(ins)
            self.update(items)
</code></pre>
<p>Not terribly efficient, but works:</p>
<pre><code>o = OrderedDictWithPrepend()

o['a'] = 1
o['b'] = 2
print o
# OrderedDictWithPrepend([('a', 1), ('b', 2)])

o.prepend({'c': 3})
print o
# OrderedDictWithPrepend([('c', 3), ('a', 1), ('b', 2)])

o.prepend([('a',11),('d',55),('e',66)])
print o
# OrderedDictWithPrepend([('d', 55), ('e', 66), ('c', 3), ('a', 11), ('b', 2)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use a different structure altogether, but there are ways to do it in <strong>python 2.7</strong>.</p>
<pre><code>d1 = OrderedDict([('a', '1'), ('b', '2')])
d2 = OrderedDict(c='3')
d2.update(d1)
</code></pre>
<p>d2 will then contain</p>
<pre><code>&gt;&gt;&gt; d2
OrderedDict([('c', '3'), ('a', '1'), ('b', '2')])
</code></pre>
<p>As mentioned by others, in <strong>python 3.2</strong> you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="nofollow noreferrer"><code>OrderedDict.move_to_end('c', last=False)</code></a> to move a given key after insertion.</p>
<blockquote>
<p><strong>Note:</strong> Take into consideration that the first option is slower for large datasets due to creation of a new OrderedDict and copying of old values.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>FWIW Here is a quick-n-dirty code I wrote for inserting to an arbitrary index position.  Not necessarily efficient but it works in-place.</p>
<pre><code>class OrderedDictInsert(OrderedDict):
    def insert(self, index, key, value):
        self[key] = value
        for ii, k in enumerate(list(self.keys())):
            if ii &gt;= index and k != key:
                self.move_to_end(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest adding a <code>prepend()</code> method to this pure Python <a href="https://code.activestate.com/recipes/576693/" rel="nofollow noreferrer">ActiveState recipe</a> or deriving a subclass from it. The code to do so could be a fairly efficient given that the underlying data structure for ordering is a linked-list.</p>
<h3>Update</h3>
<p>To prove this approach is feasible, below is code that does what's suggested. As a bonus, I also made a few additional minor changes to get to work in both Python 2.7.15 and 3.7.1.</p>
<p>A <code>prepend()</code> method has been added to the class in the recipe and has been implemented in terms of another method that's been added named <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="nofollow noreferrer"><code>move_to_end()</code></a>, which was added to <code>OrderedDict</code> in Python 3.2. </p>
<p><code>prepend()</code> can also be implemented directly, almost exactly as shown at the beginning of @Ashwini Chaudhary's <a href="https://stackoverflow.com/a/16664932/355230">answer</a>—and doing so would likely result in it being slightly faster, but that's been left as an exercise for the motivated reader...</p>
<pre><code># Ordered Dictionary for Py2.4 from https://code.activestate.com/recipes/576693

# Backport of OrderedDict() class that runs on Python 2.4, 2.5, 2.6, 2.7 and pypy.
# Passes Python2.7's test suite and incorporates all the latest updates.

try:
    from thread import get_ident as _get_ident
except ImportError:  # Python 3
#    from dummy_thread import get_ident as _get_ident
    from _thread import get_ident as _get_ident  # Changed - martineau

try:
    from _abcoll import KeysView, ValuesView, ItemsView
except ImportError:
    pass

class MyOrderedDict(dict):
    'Dictionary that remembers insertion order'
    # An inherited dict maps keys to values.
    # The inherited dict provides __getitem__, __len__, __contains__, and get.
    # The remaining methods are order-aware.
    # Big-O running times for all methods are the same as for regular dictionaries.

    # The internal self.__map dictionary maps keys to links in a doubly linked list.
    # The circular doubly linked list starts and ends with a sentinel element.
    # The sentinel element never gets deleted (this simplifies the algorithm).
    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].

    def __init__(self, *args, **kwds):
        '''Initialize an ordered dictionary.  Signature is the same as for
        regular dictionaries, but keyword arguments are not recommended
        because their insertion order is arbitrary.

        '''
        if len(args) &gt; 1:
            raise TypeError('expected at most 1 arguments, got %d' % len(args))
        try:
            self.__root
        except AttributeError:
            self.__root = root = []  # sentinel node
            root[:] = [root, root, None]
            self.__map = {}
        self.__update(*args, **kwds)

    def prepend(self, key, value):  # Added to recipe.
        self.update({key: value})
        self.move_to_end(key, last=False)

    #### Derived from cpython 3.2 source code.
    def move_to_end(self, key, last=True):  # Added to recipe.
        '''Move an existing element to the end (or beginning if last==False).

        Raises KeyError if the element does not exist.
        When last=True, acts like a fast version of self[key]=self.pop(key).
        '''
        PREV, NEXT, KEY = 0, 1, 2

        link = self.__map[key]
        link_prev = link[PREV]
        link_next = link[NEXT]
        link_prev[NEXT] = link_next
        link_next[PREV] = link_prev
        root = self.__root

        if last:
            last = root[PREV]
            link[PREV] = last
            link[NEXT] = root
            last[NEXT] = root[PREV] = link
        else:
            first = root[NEXT]
            link[PREV] = root
            link[NEXT] = first
            root[NEXT] = first[PREV] = link
    ####

    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):
        'od.__setitem__(i, y) &lt;==&gt; od[i]=y'
        # Setting a new item creates a new link which goes at the end of the linked
        # list, and the inherited dictionary is updated with the new key/value pair.
        if key not in self:
            root = self.__root
            last = root[0]
            last[1] = root[0] = self.__map[key] = [last, root, key]
        dict_setitem(self, key, value)

    def __delitem__(self, key, dict_delitem=dict.__delitem__):
        'od.__delitem__(y) &lt;==&gt; del od[y]'
        # Deleting an existing item uses self.__map to find the link which is
        # then removed by updating the links in the predecessor and successor nodes.
        dict_delitem(self, key)
        link_prev, link_next, key = self.__map.pop(key)
        link_prev[1] = link_next
        link_next[0] = link_prev

    def __iter__(self):
        'od.__iter__() &lt;==&gt; iter(od)'
        root = self.__root
        curr = root[1]
        while curr is not root:
            yield curr[2]
            curr = curr[1]

    def __reversed__(self):
        'od.__reversed__() &lt;==&gt; reversed(od)'
        root = self.__root
        curr = root[0]
        while curr is not root:
            yield curr[2]
            curr = curr[0]

    def clear(self):
        'od.clear() -&gt; None.  Remove all items from od.'
        try:
            for node in self.__map.itervalues():
                del node[:]
            root = self.__root
            root[:] = [root, root, None]
            self.__map.clear()
        except AttributeError:
            pass
        dict.clear(self)

    def popitem(self, last=True):
        '''od.popitem() -&gt; (k, v), return and remove a (key, value) pair.
        Pairs are returned in LIFO order if last is true or FIFO order if false.

        '''
        if not self:
            raise KeyError('dictionary is empty')
        root = self.__root
        if last:
            link = root[0]
            link_prev = link[0]
            link_prev[1] = root
            root[0] = link_prev
        else:
            link = root[1]
            link_next = link[1]
            root[1] = link_next
            link_next[0] = root
        key = link[2]
        del self.__map[key]
        value = dict.pop(self, key)
        return key, value

    # -- the following methods do not depend on the internal structure --

    def keys(self):
        'od.keys() -&gt; list of keys in od'
        return list(self)

    def values(self):
        'od.values() -&gt; list of values in od'
        return [self[key] for key in self]

    def items(self):
        'od.items() -&gt; list of (key, value) pairs in od'
        return [(key, self[key]) for key in self]

    def iterkeys(self):
        'od.iterkeys() -&gt; an iterator over the keys in od'
        return iter(self)

    def itervalues(self):
        'od.itervalues -&gt; an iterator over the values in od'
        for k in self:
            yield self[k]

    def iteritems(self):
        'od.iteritems -&gt; an iterator over the (key, value) items in od'
        for k in self:
            yield (k, self[k])

    def update(*args, **kwds):
        '''od.update(E, **F) -&gt; None.  Update od from dict/iterable E and F.

        If E is a dict instance, does:           for k in E: od[k] = E[k]
        If E has a .keys() method, does:         for k in E.keys(): od[k] = E[k]
        Or if E is an iterable of items, does:   for k, v in E: od[k] = v
        In either case, this is followed by:     for k, v in F.items(): od[k] = v

        '''
        if len(args) &gt; 2:
            raise TypeError('update() takes at most 2 positional '
                            'arguments (%d given)' % (len(args),))
        elif not args:
            raise TypeError('update() takes at least 1 argument (0 given)')
        self = args[0]
        # Make progressively weaker assumptions about "other"
        other = ()
        if len(args) == 2:
            other = args[1]
        if isinstance(other, dict):
            for key in other:
                self[key] = other[key]
        elif hasattr(other, 'keys'):
            for key in other.keys():
                self[key] = other[key]
        else:
            for key, value in other:
                self[key] = value
        for key, value in kwds.items():
            self[key] = value

    __update = update  # let subclasses override update without breaking __init__

    __marker = object()

    def pop(self, key, default=__marker):
        '''od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.
        If key is not found, d is returned if given, otherwise KeyError is raised.

        '''
        if key in self:
            result = self[key]
            del self[key]
            return result
        if default is self.__marker:
            raise KeyError(key)
        return default

    def setdefault(self, key, default=None):
        'od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od'
        if key in self:
            return self[key]
        self[key] = default
        return default

    def __repr__(self, _repr_running={}):
        'od.__repr__() &lt;==&gt; repr(od)'
        call_key = id(self), _get_ident()
        if call_key in _repr_running:
            return '...'
        _repr_running[call_key] = 1
        try:
            if not self:
                return '%s()' % (self.__class__.__name__,)
            return '%s(%r)' % (self.__class__.__name__, self.items())
        finally:
            del _repr_running[call_key]

    def __reduce__(self):
        'Return state information for pickling'
        items = [[k, self[k]] for k in self]
        inst_dict = vars(self).copy()
        for k in vars(MyOrderedDict()):
            inst_dict.pop(k, None)
        if inst_dict:
            return (self.__class__, (items,), inst_dict)
        return self.__class__, (items,)

    def copy(self):
        'od.copy() -&gt; a shallow copy of od'
        return self.__class__(self)

    @classmethod
    def fromkeys(cls, iterable, value=None):
        '''OD.fromkeys(S[, v]) -&gt; New ordered dictionary with keys from S
        and values equal to v (which defaults to None).

        '''
        d = cls()
        for key in iterable:
            d[key] = value
        return d

    def __eq__(self, other):
        '''od.__eq__(y) &lt;==&gt; od==y.  Comparison to another OD is order-sensitive
        while comparison to a regular mapping is order-insensitive.

        '''
        if isinstance(other, MyOrderedDict):
            return len(self)==len(other) and self.items() == other.items()
        return dict.__eq__(self, other)

    def __ne__(self, other):
        return not self == other

    # -- the following methods are only used in Python 2.7 --

    def viewkeys(self):
        "od.viewkeys() -&gt; a set-like object providing a view on od's keys"
        return KeysView(self)

    def viewvalues(self):
        "od.viewvalues() -&gt; an object providing a view on od's values"
        return ValuesView(self)

    def viewitems(self):
        "od.viewitems() -&gt; a set-like object providing a view on od's items"
        return ItemsView(self)

if __name__ == '__main__':

    d1 = MyOrderedDict([('a', '1'), ('b', '2')])
    d1.update({'c':'3'})
    print(d1)  # -&gt; MyOrderedDict([('a', '1'), ('b', '2'), ('c', '3')])

    d2 = MyOrderedDict([('a', '1'), ('b', '2')])
    d2.prepend('c', 100)
    print(d2)  # -&gt; MyOrderedDict([('c', 100), ('a', '1'), ('b', '2')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I got an infinity loop while trying to print or save the dictionary using <a href="https://stackoverflow.com/users/846892/ashwini-chaudhary">@Ashwini Chaudhary</a> answer with Python <code>2.7</code>. But I managed to reduce his code a little, and got it working here:</p>
<pre><code>def move_to_dict_beginning(dictionary, key):
    """
        Move a OrderedDict item to its beginning, or add it to its beginning.
        Compatible with Python 2.7
    """

    if sys.version_info[0] &lt; 3:
        value = dictionary[key]
        del dictionary[key]
        root = dictionary._OrderedDict__root

        first = root[1]
        root[1] = first[0] = dictionary._OrderedDict__map[key] = [root, first, key]
        dict.__setitem__(dictionary, key, value)

    else:
        dictionary.move_to_end( key, last=False )
</code></pre>
</div>
<span class="comment-copy">i think you should redesign your programm</span>
<span class="comment-copy">"An OrderedDict is a dict that remembers the order that keys were first inserted." @ZagorulkinDmitry is right :) (<a href="http://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs.python.org/2/library/…</a>)</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/38987/how-can-i-merge-union-two-python-dictionaries-in-a-single-expression?rq=1" title="how can i merge union two python dictionaries in a single expression">stackoverflow.com/questions/38987/…</a></span>
<span class="comment-copy">@IARI If you are referring to <code>move_to_end</code> then there's no Python 3 tag on the question, <code>move_to_end</code> works only in Python 3.2+. I will update my answer to include the Python 3 based solution. Much thanks for update though!</span>
<span class="comment-copy">@m000 Why <code>O(n)</code>?</span>
<span class="comment-copy">@AshwiniChaudhary Since Python 3 has already added <code>move_to_front</code>, maybe it is better to implement a <code>move_to_front</code> method instead of a separate <code>prepend</code> method? This will make your code more portable if you ever need to support both Python 2 and Python 3 from the same code-base.</span>
<span class="comment-copy">What's the reason behind <code>dict_setitem=dict.__setitem__</code> as a param to <code>prepend</code>? Why would/should one pass a different setter?</span>
<span class="comment-copy">There must be a <b>bug</b> in <code>ordered_dict_prepend</code> above. Calling <code>ordered_dict_prepend(d, 'c', 100)</code> twice and trying to print the resulting dict (by simply entering <code>d</code> in Python's console) results in Python process keep grabbing memory. Tested with Python 2.7.10</span>
<span class="comment-copy">I get <code>TypeError: '_Link' object does not support indexing</code> when using this on Python 3.4.</span>
<span class="comment-copy">It also doesnt work with python 3.5: AttributeError: 'ListDict' object has no attribute '_OrderedDict__map'</span>
<span class="comment-copy">This no longer works because <code>OrderedDict</code> has been <a href="https://bugs.python.org/issue16991" rel="nofollow noreferrer">rewritten in C</a> as of Python 3.5, and this subclass committed the taboo of mucking about with internals (actually reversing name mangling to access __ properties).</span>
<span class="comment-copy">In python3, the items method no longer returns a list, but rather a view, which acts like a set. In this case you'll need to take the set union since concatenating with + won't work:  dict(x.items() | y.items())</span>
<span class="comment-copy">@TheDemz I thought set union would not preserve the order, thus making the final order of the items in the resulting <code>OrderedDict</code> unstable?</span>
<span class="comment-copy">@max Yes its unstable.  The objects returned from dict.keys(), dict.values(), and dict.items() are called dictionary views. They are lazy sequences that will see changes in the underlying dictionary. To force the dictionary view to become a full list use list(dictview). See Dictionary view objects. <a href="https://docs.python.org/3.4/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">docs.python.org/3.4/library/…</a></span>
<span class="comment-copy">Is there way to insert into an ordereddict such that the elements are still sorted(increasing/decreasing).</span>
<span class="comment-copy">An ordered dict is not sorted by any property of the items.  It is ordered by insertion order, which has nothing to do with the items themselves.  In CPthon 3.6 and in Python 3.7, all dicts are so ordered and there is little reason to use an OrderedDict.</span>
