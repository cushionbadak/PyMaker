<div class="post-text" itemprop="text">
<p>At present(May 2013), there are three release versions, all released on may 15</p>
<ul>
<li>python 3.3.2</li>
<li>python 3.2.5</li>
<li>python 2.7.5</li>
</ul>
<p>I can understand the need for 2.x and 3.x branches but why are there seperate 3.3.x and 3.2.x versions?</p>
</div>
<div class="post-text" itemprop="text">
<p>In <a href="http://www.python.org/download/" rel="noreferrer">this</a> link is says <code>The current production versions are 2.7.5 and 3.3.2.</code>.</p>
<p>And if you look <a href="http://www.python.org/download/releases/3.2.5/" rel="noreferrer">here</a> it says:</p>
<blockquote>
<p>Python 3.2.5 was released on May 15th, 2013. This release fixes a few regressions found in Python 3.2.4, and is planned to be the final 3.2 series bug-fix release.</p>
</blockquote>
<p>So you should use 2.7.5 or 3.3.2, but if you <em>need</em> (I don't know why) 3.2.* you have a bug-fixed version.</p>
</div>
<div class="post-text" itemprop="text">
<p>As wim points out, 3.2.5 is not a current production version, but I assume you're wondering why there were <em>three</em> versions released on 15 May 2013? That is why is the 3.2.x branch still being maintained? </p>
<p>Remember that each 3.n step introduces new features while 3.n.x releases are fixes to existing versions. 3.2.5 is thus a set of bugfixes to 3.2.4 while the 3.3.x branch includes new features not present in 3.2.4. Because new features are, inherently, more likely to introduce new bugs, the maintenance of the older branch allows you a higher stability choice if, for example, you're just putting together a new public release of your webserver and don't want to risk new bugs being introduced by the current branch.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a question of python's versioning strategy. Quote from <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29#Development" rel="nofollow">python's wikipedia article</a>:</p>
<blockquote>
<p>CPython's public releases come in three types, distinguished by which
  part of the version number is incremented:</p>
<ul>
<li>Backwards-incompatible versions, where code is expected to break
  and must be manually ported. The first part of the version number is
  incremented. These releases happen infrequentlyâ€”for example, version
  3.0 was released 8 years after 2.0.  </li>
<li>Major or "feature" releases, which are largely compatible but introduce new features. The second
  part of the version number is incremented. These releases are
  scheduled to occur roughly every 18 months, and each major version is
  supported by bugfixes for several years after its release.</li>
<li>Bugfix releases, which introduce no new features but fix bugs. The
  third and final part of the version number is incremented. These
  releases are made whenever a sufficient number of bugs have been fixed
  upstream since the last release, or roughly every 3 months. Security
  vulnerabilities are also patched in bugfix releases.</li>
</ul>
</blockquote>
<p>So, 3.3 compared to 3.2 introduced <a href="http://docs.python.org/3/whatsnew/3.3.html" rel="nofollow">new major features</a>, that's why it's in a separate "branch".</p>
<p>Also see:</p>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0392/" rel="nofollow">Python 3.2 Release Schedule</a></li>
<li><a href="http://python.org/dev/peps/pep-0398/" rel="nofollow">Python 3.3 Release Schedule</a></li>
<li><a href="http://www.python.org/dev/peps/pep-0429/" rel="nofollow">Python 3.4 Release Schedule</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You should read bit <a href="http://en.wikipedia.org/wiki/Software_versioning" rel="nofollow">about version numbers</a>. The last digit means, simplified, no new features only bug fixes. So folks who use Python 3.2 can installed a newer revision without changing anything in the behavior of Python.</p>
</div>
<span class="comment-copy">Maintenance versions. Not everyone can upgrade to 3.3 yet, but the previous version is supported too. If there ever are security issues found in 3.2, there may be a 3.2.6 release still, until 3.4 is released (at which point 3.3 is the maintenance release).</span>
<span class="comment-copy">See <a href="http://www.python.org/dev/peps/pep-0392/" rel="nofollow noreferrer">python.org/dev/peps/pep-0392</a>, <a href="http://www.python.org/dev/peps/pep-0373/" rel="nofollow noreferrer">python.org/dev/peps/pep-0373</a> and <a href="http://www.python.org/dev/peps/pep-0398/" rel="nofollow noreferrer">python.org/dev/peps/pep-0398</a> for the current release schedules for these releases.</span>
<span class="comment-copy">I don't see why this question was closed. Its not like I asked which version was better.</span>
<span class="comment-copy">Agreed it is not constructive. It is perhaps too localized; but the answers can apply to any future combinations of releases (e.g. 3.3.x and 3.4.x, etc.).</span>
