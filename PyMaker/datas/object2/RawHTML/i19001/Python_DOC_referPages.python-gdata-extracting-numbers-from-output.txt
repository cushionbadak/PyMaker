<div class="post-text" itemprop="text">
<p>I'm still new to Python and I've been working with a script to get system info from my Raspberry Pi, like cpu temp and such and import it to a google doc spreadsheet. My goal is to extract the numbers from the output, which is in the form <code>temp=54.1'C</code>. I need the numbers alone to be able to graph the data over time...</p>
<p>I'm using:</p>
<pre><code>import gdata.spreadsheet.service
import os
import subprocess
import re

email = 'myemail@gmail.com'
password = 'mypassword'

spreadsheet_key = 'sjdaf;ljaslfjasljdgasjdflasdjfgkjvja'
worksheet_id = '1'

def temp():
   command = "/opt/vc/bin/vcgencmd measure_temp"
   proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
   output = proc.stdout.read()
   return output

def main():
   spr_client = gdata.spreadsheet.service.SpreadsheetsService()
   spr_client.email = email
   spr_client.password = password
   spr_client.ProgrammaticLogin()

   dict = {}
   dict['temp'] = temp()

   entry = spr_client.InsertRow(dict, spreadsheet_key, worksheet_id)

if __name__ == '__main__':
      try:
         main()
      except:
         print "Insert Row Failed!"
</code></pre>
<p>This above gives the standard result. I've tried tinkering with re.findall(), but can't get either the right placement or right combination of conditions (r,'/d+', s and other things) to get it to return only the number 54.1... I basically end up with "Insert Row Failed"</p>
<p>Any guidance would be appreciated. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You were on the right track using <code>re</code>; your best bet (assuming the decimal can be arbitrary, etc.) is something like this:</p>
<pre><code>import re

def temp():
    command = "/opt/vc/bin/vcgencmd measure_temp"
    proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    output = proc.stdout.read()

    # Build the regex. Use () to capture the group; we want any number of
    # digits \d or decimal points \. that is preceded by temp= and
    # followed by 'C
    temp_regex = re.compile(r'temp=([\d\.]*)\'C')
    matches = re.findall(temp_regex, output)   # now matches = ['54.1']

    temp = float(matches[0])
    return temp
</code></pre>
<p>The regex captures any combination of numbers and decimal places (e.g. <code>12.34.56</code> would get matched); you could restrict it if necessary to only allow a single decimal place, but that's more work than it appears to be worth, if you can trust that the data you're getting back is well-formed. If you do want the number to be more precise, you could compile the regex like this (for at least one numeral preceding the decimal place and exactly one following it):</p>
<pre><code>temp_regex = re.compile(r'temp=(\d+.\d)\'C')
</code></pre>
<p>Again, we capture the expression using the parentheses (captured groups are <a href="http://docs.python.org/3/library/re.html#re.findall" rel="nofollow">returned</a> by findall), but this time, increase the specificity of what we're looking for. This will capture any number like <code>123.4</code> but not <code>.4</code> and not <code>123.</code> If you find that you need to broaden it out a bit but still want only one decimal place:</p>
<pre><code>temp_regex = re.compile(r'temp=(\d+.\d+)\'C')
</code></pre>
<p>That will capture any number with at least one numeral proceeding and following the decimal, so <code>1234.5678</code> would match but <code>1234.</code> would not and <code>.1234</code> would not.</p>
<p>As an alternative to using <code>re.findall()</code>, you might use <code>re.match()</code>, which returns <a href="http://docs.python.org/3/library/re.html#match-objects" rel="nofollow">match objects</a>. Then your usage would look something like this (using the direct method, rather than pre-compiling the string:</p>
<pre><code>match = re.match(r'temp=(\d+.\d+)\'C', output)
if match:
    temp = float(match.group(1))   # get the first matching group captured by ()
else:
    pass   # You should add some error handling here
</code></pre>
<p>One of the things this makes clearer than the way I had <code>re.findall()</code> above is that if nothing is captured, you have an issue, and you need to figure out how to handle it.</p>
<hr/>
<p>You can look at other ways to vary that up at <a href="http://www.regular-expressions.info/" rel="nofollow">Regular-Expressions.info</a>, easily the best site I've found on the web for a quick resource on the topic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, I've already spent too much time messing with this. I couldn't seem to get the <code>output = proc.stdout.read()</code> to give me anything. I tried dozens of combinations of <code>re</code> with no luck.</p>
<p>Then I started looking at the replace() method. And it might not be the slickest way to go, but I know the output will always be in the form  of "temp=XX.X'C" (with X being numbers), so I just ended up doing this:</p>
<pre><code>def temp():
   command = "/opt/vc/bin/vcgencmd measure_temp"
   proc = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
   output = proc.stdout.read()
   output1 = output.replace("temp=","")
   output2 = output1.replace("'C","")
   return output2
</code></pre>
<p>and it worked! It shows up in the Google Spreadsheet as a number just as I needed.</p>
<p>Thanks for the help on this anyway, I'll keep trying to implement <code>re</code> in other applications and maybe I'll find out why I couldn't get it to work with this.</p>
</div>
<span class="comment-copy">When you say, "the standard result," presumably you mean <code>Insert Row Failed!</code>, yes? I don't see anywhere in this particular snippet that you're doing anything to search for the <code>temp</code> key you describe; did you forget some of the code?</span>
<span class="comment-copy">well, by standard result, I mean the "temp=54.1'C" that's noted in the first paragraph. when I start to try to insert re.findall() in various positions and configurations, I get the exception...</span>
<span class="comment-copy">the command is "/opt/vc/bin/vcgencmd measure_temp" which you can just type in a terminal and it gives the temp=54.1'C. The way this script is set up, It's giving me that text string in a cell in my google doc. Then it continues to add a row and print the result every time it is run... which is what I want. I set it up in a crontab and I get data on a timer...</span>
<span class="comment-copy">Ah, I see. So you're needing to add some processing to get the value (e.g. <code>54.1</code>, though it could presumably be a semi-arbitrary decimal) from the string returned by the command line function, correct?</span>
<span class="comment-copy">yes, and I believe that the tempurature will have one decimal</span>
<span class="comment-copy">Thanks for taking the time to post the examples. Unfortunately, I can't seem to implement them. I've tried all three forms, tried trimming it down removing the float. I'll keep trying, I guess I'll do some reading about 're.compile()', most examples I've seen here just use 're.findall()' directly... maybe I have too many instances of 'temp' in the code that's messing it up?</span>
<span class="comment-copy">Ok, running the re.findall in IDLE, it keeps giving me a syntax error because of the 'C', I have to figure out how to get it to disregard that first tickmark (')</span>
<span class="comment-copy">If you have <code>temp</code> repeatedly, that may indeed mess it up, which is why I included the <code>'C</code>. Note that the pattern actually escapes the quotation mark: <code>\'</code>. I tested this one exactly against your pattern, and it worked fine.  You don't <i>have</i> to use <code>re.compile()</code>; I did it because it makes it easier to see what step you're on. Also, you can use <code>re.match()</code> instead of <code>re.findall()</code>, which may actually make for nicer behavior; I'll add a note on how to do that to the question.</span>
<span class="comment-copy">If you can give me a longer version of the string it returns, I can make sure the regex is working against it properly.</span>
<span class="comment-copy">Thanks, I'll check this out (at work) when I can, I'll have to ssh in to my Pi and try it out... longer version of the string it returns? Are we talking the "temp=54.1'C"? The only extra thing that's returned is some spaces or a line break, which I've been removing with 'output = output.replace("\n","")' I'm still wondering if I should be using double quotes instead of single. I seem to have both throughout the script. Should it be uniform?</span>
