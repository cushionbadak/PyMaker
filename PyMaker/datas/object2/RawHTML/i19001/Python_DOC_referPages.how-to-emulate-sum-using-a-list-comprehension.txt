<div class="post-text" itemprop="text">
<p>Is it possible to emulate something like sum() using <a href="http://en.wikipedia.org/wiki/List_comprehension#Python">list comprehension</a> ?</p>
<p>For example - I need to calculate the product of all elements in a list :</p>
<pre><code>list = [1, 2, 3]
product = [magic_here for i in list]

#product is expected to be 6
</code></pre>
<p>Code that is doing the same : </p>
<pre><code>def product_of(input):
   result = 1
   for i in input:
      result *= i
   return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No; a list comprehension produces a list that is just as long as its input. You will need one of Python's other functional tools (specifically <code>reduce()</code> in this case) to <a href="http://en.wikipedia.org/wiki/Fold_%28higher-order_function%29" rel="noreferrer">fold</a> the sequence into a single value.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; nums = [1, 2, 3]
&gt;&gt;&gt; reduce(mul, nums)
6
</code></pre>
<p><sub>On Python 3 you will need to add this import: <code>from functools import reduce</code></sub></p>
<p><a href="https://stackoverflow.com/questions/2638478/recursive-list-comprehension-in-python"><strong>Implementation Artifact</strong></a></p>
<p>In Python <code>2.5</code> / <code>2.6</code> You could use <code>vars()['_[1]']</code> to refer to the list comprehension currently under construction. This is <strong>horrible</strong> and should <strong>never</strong> be used but it's the closest thing to what you mentioned in the question (<em>using a list comp to emulate a product</em>). </p>
<pre><code>&gt;&gt;&gt; nums = [1, 2, 3]
&gt;&gt;&gt; [n * (vars()['_[1]'] or [1])[-1] for n in nums][-1]
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension always creates another list, so it's not useful in combining them (e.g. to give a single number). Also, there's no way to make an assignment in list comprehension, unless you're super sneaky.</p>
<p>The only time I'd ever see using list comprehensions as being useful for a sum method is if you only want to include specific values in the list, or you don't have a list of numbers:</p>
<pre><code>list = [1,2,3,4,5]
product = [i for i in list if i % 2 ==0] # only sum even numbers in the list
print sum(product)
</code></pre>
<p>or another example":</p>
<pre><code># list of the cost of fruits in pence
list = [("apple", 55), ("orange", 60), ("pineapple", 140), ("lemon", 80)]
product = [price for fruit, price in list]
print sum(product)
</code></pre>
<hr/>
<p>Super sneaky way to make an assignment in a list comprehension</p>
<pre><code>dict = {"val":0}
list = [1, 2, 3]
product = [dict.update({"val" : dict["val"]*i}) for i in list]
print dict["val"] # it'll give you 6!
</code></pre>
<p>...but that's horrible :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; reduce(lambda x, y: x*y, a)
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I complement the answer of Ignacio Vazquez-Abrams with some code that uses the <code>reduce</code> operator of Python. </p>
<pre><code>list_of_numbers = [1, 5, 10, 100]
reduce(lambda x, y: x + y, list_of_numbers)
</code></pre>
<p>which can also be written as</p>
<pre><code>list_of_numbers = [1, 5, 10, 100]

def sum(x, y):
    return x + y

reduce(sum, list_of_numbers)
</code></pre>
<p>Bonus: Python provides this functionality in the built-in <code>sum</code> function. This is the most readable expression imo. </p>
<pre><code>list_of_numbers = [1, 5, 10, 100]
sum(list_of_numbers)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; reduce(int.__mul__,[1,2,3])
6

C:\Users\Henry&gt;python -m timeit -s "" "reduce(int.__mul__,range(10000))" 
1000 loops, best of 3: 910 usec per loop

C:\Users\Henry&gt;python -m timeit -s "from operator import mul" "reduce(mul,range(10000))"
1000 loops, best of 3: 399 usec per loop

C:\Users\Henry&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Found the magic on <a href="http://code.activestate.com/recipes/436482/" rel="nofollow">http://code.activestate.com/recipes/436482/</a>.</p>
<pre><code>&gt;&gt;&gt; L=[2, 3, 4]
&gt;&gt;&gt; [j for j in [1] for i in L for j in [j*i]][-1]
24
</code></pre>
<p>It should be the logic like the following code.</p>
<pre><code>L=[2, 3, 4]
P=[]
for j in [1]:
    for i in L:
        for j in [j*i]:
            P.append(j)
print(P[-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to achieve by using lambda with list comprehension
Since we can't assign a value in list comprehension we go with lambda</p>
<p>Solution:</p>
<pre><code>&gt;&gt;&gt; (lambda number_list, sum=0:[sum for number in number_list for sum in [sum + number]][-1])([1, 2, 3, 4, 5])
&gt;&gt;&gt; 15
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/595374/whats-the-python-function-like-sum-but-for-multiplication-product">What's the Python function like sum() but for multiplication? product()?</a></span>
<span class="comment-copy">Thank you for the first sentence. It's the answer I was looking for.</span>
<span class="comment-copy">in Python 3 it is the <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools</a> module</span>
<span class="comment-copy">egads, that's just...I don't event know.</span>
<span class="comment-copy">thats actually kinda neat ... I had no idea you could do that (And no Idea when or why you would ever want to) ... but cool all the same</span>
<span class="comment-copy">+1 for your even sneakier approach to getting a result thank mine ;-)</span>
<span class="comment-copy">+1 for mentioning the last method is horrible as well :)</span>
<span class="comment-copy">I think you meant x+y not x*y... although both give the same result for your test data</span>
<span class="comment-copy">This was flagged as VLQ. Constructs an entire list, then takes just one value - so vastly inefficient and not technically "emulate with list comprehension" (which is impossible for the reasons stated in top answers). This could do as an "anti-example" but it's so bad I'm inclined to recommend deletion.</span>
