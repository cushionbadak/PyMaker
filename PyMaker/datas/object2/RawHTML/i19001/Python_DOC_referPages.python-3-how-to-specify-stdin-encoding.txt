<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2737966/how-to-change-the-stdin-encoding-on-python">How to change the stdin encoding on python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>While porting code from Python 2 to Python 3, I run into this problem when reading UTF-8 text from standard input. In Python 2, this works fine:</p>
<pre><code>for line in sys.stdin:
    ...
</code></pre>
<p>But Python 3 expects ASCII from <em>sys.stdin</em>, and if there are non-ASCII characters in the input, I get the error:</p>
<blockquote>
<p>UnicodeDecodeError: 'ascii' codec can't decode byte .. in position ..: ordinal not in range(128)</p>
</blockquote>
<p>For a regular file, I would specify the encoding when opening the file:</p>
<pre><code>with open('filename', 'r', encoding='utf-8') as file:
    for line in file:
        ...
</code></pre>
<p>But how can I specify the encoding for standard input? Other SO posts (e.g. <a href="https://stackoverflow.com/questions/2737966/how-to-change-the-stdin-encoding-on-python">How to change the stdin encoding on python</a>) have suggested using</p>
<pre><code>input_stream = codecs.getreader('utf-8')(sys.stdin)
for line in input_stream:
    ...
</code></pre>
<p>However, this doesn't work in Python 3. I still get the same error message. I'm using Ubuntu 12.04.2 and my locale is set to en_US.UTF-8.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 does <em>not</em> expect ASCII from <code>sys.stdin</code>. It'll open <code>stdin</code> in text mode and make an educated guess as to what encoding is used. That guess may come down to <code>ASCII</code>, but that is not a given. See the <a href="http://docs.python.org/3/library/sys.html#sys.stdin" rel="noreferrer"><code>sys.stdin</code> documentation</a> on how the codec is selected.</p>
<p>Like other file objects opened in text mode, the <code>sys.stdin</code> object derives from the <a href="http://docs.python.org/3/library/io.html#io.TextIOBase" rel="noreferrer"><code>io.TextIOBase</code> base class</a>; it has a <code>.buffer</code> attribute pointing to the underlying buffered IO instance (which in turn has a <code>.raw</code> attribute).</p>
<p>Wrap the <code>sys.stdin.buffer</code> attribute in a new <a href="http://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="noreferrer"><code>io.TextIOWrapper()</code> instance</a> to specify a different encoding:</p>
<pre><code>import io
import sys

input_stream = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')
</code></pre>
<p>Alternatively, set the <a href="http://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING" rel="noreferrer"><code>PYTHONIOENCODING</code> environment variable</a> to the desired codec when running python.</p>
<p>From Python 3.7 onwards, you can also <a href="https://docs.python.org/3.7/library/io.html#io.TextIOWrapper.reconfigure" rel="noreferrer">reconfigure the existing <code>std*</code> wrappers</a>, provided you do it at the start (before any data has been read):</p>
<pre><code># Python 3.7 and newer
sys.stdin.reconfigure(encoding='utf-8')
</code></pre>
</div>
<span class="comment-copy">What's the nearest equivalent for python2.6?</span>
<span class="comment-copy">@bukzor: Next option: open the file descriptor directly with <code>io.open()</code>; <code>0</code> is <code>stdin</code>: <code>io.open(0)</code> returns a <code>TextIOWrapper()</code> object.</span>
<span class="comment-copy">@MartijnPieters: That works pretty great! Thanks! Whole script: <a href="http://paste.pound-python.org/show/xoUPpsfFhtKssXBzLxBd/" rel="nofollow noreferrer">paste.pound-python.org/show/xoUPpsfFhtKssXBzLxBd</a>  Deleting my previous failures.</span>
<span class="comment-copy">you could call <code>sys.stdin.detach()</code> instead of <code>sys.stdin.buffer</code>. Though a preferable solution is to leave the source code along and to configure the environment instead (locale, PYTHONIOENCODING).</span>
<span class="comment-copy">@alvas: to read binary? See <a href="//stackoverflow.com/q/2850893">Reading binary data from stdin</a></span>
