<div class="post-text" itemprop="text">
<p>I am trying to change the text string from the form of <code>file1</code> to <code>file01</code>.  I am really new to python and can't figure out what should go in 'repl' location when trying to use a pattern.  Can anyone give me a hand?</p>
<pre><code>text = 'file1 file2 file3'

x = re.sub(r'file[1-9]',r'file\0\w',text) #I'm not sure what should go in repl.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try this:</p>
<pre><code>&gt;&gt;&gt; import re    
&gt;&gt;&gt; text = 'file1 file2 file3'
&gt;&gt;&gt; x = re.sub(r'file([1-9])',r'file0\1',text)
'file01 file02 file03'
</code></pre>
<p>The brackets wrapped around the <code>[1-9]</code> captures the match, and it is the first match. You will see I used it in the replace using <code>\1</code> meaning the first catch in the match.</p>
<p>Also, if you don't want to add the zero for files with 2 digits or more, you could add <code>[^\d]</code> in the regexp:</p>
<pre><code>x = re.sub(r'file([1-9](\s|$))',r'file0\1',text)
</code></pre>
<hr/>
<p>A bit more of a generic solution now that I'm revisiting this answer using <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer"><code>str.format()</code></a> and a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer"><code>lambda</code></a> expression:</p>
<pre><code>import re
fmt = '{:03d}'                 # Let's say we want 3 digits with leading zeroes
s = 'file1 file2 file3 text40'
result = re.sub(r"([A-Za-z_]+)([0-9]+)", \
                lambda x: x.group(1) + fmt.format(int(x.group(2))), \
                s)
print(result)
# 'file001 file002 file003 text040'
</code></pre>
<p>A bit of details about the lambda expression:</p>
<pre><code>lambda x: x.group(1) + fmt.format(int(x.group(2)))
#         ^--------^   ^-^        ^-------------^
#          filename   format     file number ([0-9]+) converted to int
#        ([A-Za-z_]+)            so format() can work with our format
</code></pre>
<p>I am using the expression <code>[A-Za-z_]+</code> assuming the filename contains letters and underscores only besides the training digits. Do pick a more appropriate expression if required.</p>
</div>
<div class="post-text" itemprop="text">
<p>To match files with single digit on the end, use a word boundary <code>\b</code>:</p>
<pre><code>&gt;&gt;&gt; text = ' '.join('file{}'.format(i) for i in range(12))
&gt;&gt;&gt; text
'file0 file1 file2 file3 file4 file5 file6 file7 file8 file9 file10 file11'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'file(\d)\b',r'file0\1',text)
'file00 file01 file02 file03 file04 file05 file06 file07 file08 file09 file10 file11'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>its also possible to use \D|$ while checking for two digits presence with file, which decides whether to replace file to file0 or not</p>
<p>the following code will also help to achieve the required.</p>
<p>import re</p>
<p>text = 'file1 file2 file3 file4 file11 file22 file33 file1'</p>
<p>x = re.sub(r'file([0-9] (\D|$))',r'file0\1',text)</p>
<p>print(x)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use groups to capture the parts that you wish to keep, then use those groups in the replacement text.</p>
<pre><code> x = re.sub(r'file([1-9])',r'file0\1',text)
</code></pre>
<p>The matching group is created by including <code>( )</code> in the regex search. You can then use it with <code>\group</code>, or <code>\1</code> in this case since we want the first group inserted.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the following will help you.  It is beneficial in that it will only insert a '0' where there is a single digit after 'file' (via boundary ['\b'] special character inclusion):</p>
<pre><code>text = 'file1 file2 file3'

findallfile = re.findall(r'file\d\b', text)

for instance in findallfile:
    textwithzeros = re.sub('file', 'file0', text)
</code></pre>
<p>'textwithzeros' should now be a new version of the 'text' string with '0' before each number.  Try it out!</p>
</div>
<span class="comment-copy">You need to at least do <code>([^\d]|$)</code> in the last example there, or you can't match the last occurrence in a string.</span>
<span class="comment-copy">@melwil Thanks, fixed it now :)</span>
<span class="comment-copy">Now you are matching too much in group 1, you are including the space in the group, which makes <code>file1 file2</code> become <code>file01file02</code>.</span>
<span class="comment-copy">@melwil This time, I tested it beforehand and it works better than the previous <code>file([1-9])([^\d]|$)</code>. The previous one would eat a space because of <code>[^\d]</code> and I would have had to add more characters to compensate that, while this one tackles both issues at the same time.</span>
<span class="comment-copy">Ah yes, you are of course putting the space back. Sorry for about that.</span>
