<div class="post-text" itemprop="text">
<p>As far as I know, in C &amp; C++, the priority sequence for NOT AND &amp; OR is NOT&gt;AND&gt;OR. But this doesn't seem to work in a similar way in Python. I tried searching for it in the Python documentation and failed (Guess I'm a little impatient.). Can someone clear this up for me?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's NOT, AND, OR, from highest to lowest according to the documentation
<a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">https://docs.python.org/3/reference/expressions.html#operator-precedence</a></p>
<p>Here is the complete precedence table, lowest precedence to highest. A row has the same precedence and chains from left to right</p>
<ol>
<li>lambda</li>
<li>if â€“ else</li>
<li>or</li>
<li>and</li>
<li>not x</li>
<li>in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==</li>
<li>|</li>
<li>^</li>
<li>&amp;</li>
<li>&lt;&lt;, &gt;&gt;</li>
<li>+, -</li>
<li>*, /, //, %</li>
<li>+x, -x, ~x</li>
<li>**</li>
<li>x[index], x[index:index], x(arguments...), x.attribute</li>
<li>(expressions...), [expressions...], {key: value...}, {expressions...}</li>
</ol>
<p>EDIT: Had the wrong precedence</p>
</div>
<div class="post-text" itemprop="text">
<p><code>not</code> binds tighter than <code>and</code> which binds tighter than <code>or</code> as stated in the <a href="http://docs.python.org/3.3/reference/expressions.html#operator-precedence" rel="noreferrer">language reference</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following test to figure out the precedence of <code>and</code> and <code>or</code>.</p>
<p>First, try <code>0 and 0 or 1</code> in python console</p>
<p>If <code>or</code> binds first, then we would expect <code>0</code> as output.</p>
<p>In my console, <code>1</code> is the output. It means <code>and</code> either binds first or equal to <code>or</code> (maybe expressions are evaluated from left to right).</p>
<p>Then try <code>1 or 0 and 0</code>.</p>
<p>If <code>or</code> and <code>and</code> bind equally with the built-in left to right evaluation order, then we should get <code>0</code> as output.</p>
<p>In my console, <code>1</code> is the output. Then we can conclude that <code>and</code> has higher priority than <code>or</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of the boolean operators the precedence, from weakest to strongest, is as follows:</p>
<ol>
<li><code>or</code></li>
<li><code>and</code></li>
<li><code>not x</code></li>
<li><code>is not</code>; <code>not in</code></li>
</ol>
<p>Where operators are of equal precedence evaluation proceeds from left to right.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <em>no good reason</em> for Python to have <em>other</em> priority sequence of those operators than <em>well established one</em> in (almost) all other programming languages, including C/C++.</p>
<p>You may find it in <em>The Python Language Reference</em>, part 6.16 - Operator precedence, downloadable (for the current version and packed with all other standard documentation) from <a href="https://docs.python.org/3/download.html" rel="nofollow noreferrer">https://docs.python.org/3/download.html</a>, or read it online here: <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">6.16. Operator precedence</a>.</p>
<p>But there is still something in Python which can mislead you: The <em>result</em> of <code>and</code> and <code>or</code> operators may be <em>different</em> from <code>True</code> or <code>False</code> - see <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">6.11 Boolean operations</a> in the same document.</p>
</div>
<span class="comment-copy">Can you give an example where the operator precedence doesn't work like you think it does?</span>
<span class="comment-copy">That's the relative order, yes, but which one has higher precedence?</span>
<span class="comment-copy">Whoops, had that confused my self. Thanks!</span>
<span class="comment-copy">Note that <code>**</code> has some exceptions noted in a footnote when it comes to precedence over arithmetic operators.</span>
<span class="comment-copy">This confuses the mathematician in me: in arithmetic, we would say it has precedence over arithmetic operators. On its right, the <code>**</code> operator does not have precedence over arithmetic operations, but it has on its left... For example, <code>5*2**2 == 5*(2**2)</code>. However it is right to say that <code>2**-1 == 2**(-1)</code>.</span>
<span class="comment-copy">Sorry your #2 is technically correct but still very misleading. First of all, the doc doesn't seem to change. Secondly, your opinion #2 (suggesting <code>and</code> &amp; <code>not x</code> is evaluated from left to right) is technically equivalent to the official effect, but that is simply because when in "cond1 and not cont2", python has to calculate cont2 first by default.</span>
<span class="comment-copy">Thanks @RayLuo, but it wasn't  even <i>technically</i> correct.  I was placing meaning in the incorrectly rendered lines dividing the rows in that table.  Looking at the 2.7 doc <i>today</i> <code>or</code> and <code>and</code> appear to be in the same cell using <i>Firefox</i> but not <i>Opera</i> .  The difference in precedence between <code>or</code> and <code>and</code> is obvious (eg.  <code>1 or 0 and 0</code> vs <code>(1 or 0) and 0</code>) that between <code>and</code> and <code>not x</code> not so much for the reason you give.  I'll repair my answer to reflect what the documentation <i>actually</i> says.</span>
