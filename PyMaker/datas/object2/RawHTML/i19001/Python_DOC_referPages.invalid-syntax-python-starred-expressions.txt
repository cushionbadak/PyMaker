<div class="post-text" itemprop="text">
<p>I am trying to unpack set of phone numbers from a sequence, python shell in turn throws an invalid syntax error. I am using python 2.7.1. Here is the snippet</p>
<pre><code> &gt;&gt;&gt; record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212')
 &gt;&gt;&gt; name, email, *phone-numbers = record
 SyntaxError: invalid syntax
 &gt;&gt;&gt;
</code></pre>
<p>Please explain. Is there any other way of doing the same?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using Python 3 specific syntax in Python 2.</p>
<p>The <code>*</code> syntax for extended iterable unpacking in assignments is not available in Python 2.</p>
<p>See <a href="http://docs.python.org/3/whatsnew/3.0.html#new-syntax">Python 3.0, new syntax</a> and <a href="http://www.python.org/dev/peps/pep-3132/">PEP 3132</a>.</p>
<p>Use a function with <code>*</code> splat argument unpacking to simulate the same behaviour in Python 2:</p>
<pre><code>def unpack_three(arg1, arg2, *rest):
    return arg1, arg2, rest

name, email, phone_numbers = unpack_three(*user_record)
</code></pre>
<p>or use list slicing.</p>
</div>
<div class="post-text" itemprop="text">
<p>This new syntax was <a href="https://docs.python.org/3.0/whatsnew/3.0.html#new-syntax" rel="noreferrer">introduced in Python 3</a>. So, it'll raise error in Python 2.</p>
<p>Related PEP: <a href="https://www.python.org/dev/peps/pep-3132/" rel="noreferrer">PEP 3132 -- Extended Iterable Unpacking</a></p>
<pre><code>name, email, *phone_numbers = user_record
</code></pre>
<p>Python 3:</p>
<pre><code>&gt;&gt;&gt; a, b, *c = range(10)
&gt;&gt;&gt; a
0
&gt;&gt;&gt; b
1
&gt;&gt;&gt; c
[2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Python 2:</p>
<pre><code>&gt;&gt;&gt; a, b, *c = range(10)
  File "&lt;stdin&gt;", line 1
    a,b,*c = range(10)
        ^
SyntaxError: invalid syntax
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That functionality is only available in Python 3, an alternative is:</p>
<pre><code>name, email, phone_numbers = record[0], record[1], record[2:]
</code></pre>
<p>Or something like:</p>
<pre><code>&gt;&gt;&gt; def f(name, email, *phone_numbers):
        return name, email, phone_numbers

&gt;&gt;&gt; f(*record)
('Dave', 'dave@example.com', ('773-555-1212', '847-555-1212'))
</code></pre>
<p>but that is pretty hacky IMO</p>
</div>
