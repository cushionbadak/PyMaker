<div class="post-text" itemprop="text">
<p>I would like to generate uniformly distributed random numbers between 0 and 0.5, but truncated to 2 decimal places.</p>
<p>without the truncation, I know this is done by</p>
<pre><code>import numpy as np
rs = np.random.RandomState(123456)
set = rs.uniform(size=(50,1))*0.5
</code></pre>
<p>could anyone help me with suggestions on how to generate random numbers up to 2 d.p. only? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>float</code> cannot be truncated (or rounded) to 2 decimal digits, because there are many values with 2 decimal digits that just cannot be represented exactly as an IEEE double.</p>
<p>If you really want what you say you want, you need to use a type with exact precision, like <a href="http://docs.python.org/3/library/decimal.html" rel="nofollow"><code>Decimal</code></a>.</p>
<p>Of course there are downsides to doing that—the most obvious one for <code>numpy</code> users being that you will have to use <code>dtype=object</code>, with all of the compactness and performance implications. </p>
<p>But it's the only way to actually do what you asked for.</p>
<p>Most likely, what you actually <em>want</em> to do is either Joran Beasley's answer (leave them untruncated, and just round at print-out time) or something similar to Lauritz V. Thaulow's answer (get the closest approximation you can, then use explicit epsilon checks everywhere).</p>
<p>Alternatively, you can do implicitly fixed-point arithmetic, as David Heffernan suggests in a comment: Generate random integers between 0 and 50, keep them as integers within <code>numpy</code>, and just format them as fixed point decimals and/or convert to <code>Decimal</code> when necessary (e.g., for printing results). This gives you all of the advantages of <code>Decimal</code> without the costs… although it does open an obvious window to create new bugs by forgetting to shift 2 places somewhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>decimals are not truncated to 2 decimal places ever ... however their string representation maybe</p>
<pre><code>import numpy as np
rs = np.random.RandomState(123456)
set = rs.uniform(size=(50,1))*0.5

print ["%0.2d"%val for val in set]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>np.random.randint(0, 50, size=(50,1)).astype("float") / 100
</code></pre>
<p>That is, create random integers between 0 and 50, and divide by 100.</p>
<p><strong>EDIT:</strong></p>
<p>As made clear in the comments, this will not give you <em>exact</em> two-digit decimals to work with, due to the nature of float representations in memory. It may look like you have the exact float <code>0.1</code> in your array, but it definitely <em>isn't</em> exactly <code>0.1</code>. But it <em>is</em> very very close, and you can get it closer by using a "double" datatype instead.</p>
<p>You can postpone this problem by just keeping the numbers as integers, and remember that they're to be divided by 100 when you use them.</p>
<pre><code>hundreds = random.randint(0, 50, size=(50, 1))
</code></pre>
<p>Then at least the roundoff won't happen until at the last minute (or maybe not at all, if the numerator of the equation is a multiple of the denominator).</p>
</div>
<div class="post-text" itemprop="text">
<p>I managed to find another alternative:</p>
<pre><code>import numpy as np
rs = np.random.RandomState(123456)
set = rs.uniform(size=(50,2))
for i in range(50):
    for j in range(2):
        set[i,j] = round(set[i,j],2)
</code></pre>
</div>
<span class="comment-copy">Are you aware that decimal <code>0.1</code> <i>doesn't exist</i> as a <code>float</code>?</span>
<span class="comment-copy">yes, i believe i should have clarified that i wanted it rounded off to 2 significant figures. (within numerical precision)</span>
<span class="comment-copy">@mtigger: I think you're missing the point. If you round <code>0.10</code> to 2 significant figures and store it in a <code>float</code> (or numpy <code>f8</code>), you get <code>0.100000000000000005551115</code>. And the next smaller <code>float</code> is less than <code>0.10</code>. There is no value equal to <code>0.10</code> in IEEE double.</span>
<span class="comment-copy">@mtigger: Well, that's <i>impossible</i>. <code>0.10</code> can <i>not</i> be stored in a <code>float</code>. It will always be an approximation. In Python 2.6, you can see this (in higher versions it's hidden but still there): Type <code>.1</code> at the prompt and see that it's represented as <code>0.10000000000000001</code> (which is still just an approximation).</span>
<span class="comment-copy">Generate random integers and interpret them with an implicit shift of 100. Or use a decimal data type.</span>
<span class="comment-copy">thank you, this cleared up some misconceptions I had about floats and decimals.</span>
<span class="comment-copy">@mtigger: Here's the obligatory link to <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>.</span>
<span class="comment-copy"><code>Decimal</code>s <i>can be</i> truncated to 2 decimal places; it's <code>float</code>s that can't.</span>
<span class="comment-copy">meh semantics :P (but yeah I know Decimal is an exact representation type :P)</span>
<span class="comment-copy">float behavior does not guarantee only two decimal places here ...</span>
<span class="comment-copy">@Joran Wow, that's fast feedback. Have you tested this? My tests all return only two or one decimal places.</span>
<span class="comment-copy">yes! I was just trying that out. thanks!</span>
<span class="comment-copy">@LauritzV.Thaulow: There are many values with two decimal places that cannot be represented exactly as a float (IEEE double). So, you may get the closest float to the value you wanted, and it may even <code>repr</code> and <code>str</code> as the value you wanted… but when you do arithmetic with it, or just compare it with <code>==</code>, it may not be the value you wanted. You have to use an exact-precision type like <code>Decimal</code> if you really want two decimal places.</span>
<span class="comment-copy">Also, this doesn't solve the problem because sampling from a normal distribute won't generate integers (though you could round the distribution so it does).  A more general idea of a solution along these lines would be (for x~Norm(params)), <code>int(round(x*100))/100</code>.</span>
<span class="comment-copy">Why not just use <code>np.around(rs.uniform(size=(50,2)) * 0.5, decimals=2)</code> then? It's faster, it works the same, and has the same technical drawback that my solution has, as noted in <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html#numpy.around" rel="nofollow noreferrer">the docs</a>: <i>Results may also be surprising due to the inexact representation of decimal fractions in the IEEE floating point standard</i>.</span>
