<div class="post-text" itemprop="text">
<p>Is the following behavior defined in Python's documentation (Python 2.7)?</p>
<pre><code>&gt;&gt;&gt; '{:20}'.format(1e10)                                                        
'       10000000000.0'
&gt;&gt;&gt; '{:20g}'.format(1e10)
'               1e+10'
</code></pre>
<p>In fact, the first result surprises me: the <a href="http://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow">documentation</a> indicates that not indicating the format type ('f', 'e', etc.) for floats is equivalent to using the general format 'g'. This example shows that this does not seem to be the case, so I'm confused.</p>
<p>Maybe this is related to the fact that "A general convention is that an empty format string ("") produces the same result as if you had called str() on the value."? In fact:</p>
<pre><code>&gt;&gt;&gt; str(1e10)
'10000000000.0'
</code></pre>
<p>However, in the case of the <code>{:20}</code> format, the format string is <em>not</em> empty (it is <code>20</code>), so I'm confused.</p>
<p>So, is this behavior of <code>{:20}</code> defined precisely in the documentation? Is the precise behavior of <code>str()</code> on floats precisely defined (<code>str(1e11)</code> has an exponent, but not <code>str(1e10)</code>…)?</p>
<p>PS: My goal is to format <a href="http://pythonhosted.org/uncertainties/" rel="nofollow">numbers with an uncertainty</a> so that the output is very close to what floats would give (presence or not of an exponent, etc.). However, I'm having a hard time finding the exact formatting rules.</p>
<p>PPS: <code>'{:20}'.format(1e10)</code> gives a result that differs from the string formatting <code>'{!s:20}'.format(1e10)</code>, where the string is flushed to the left (as usual for string) instead of to the right.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @blckknght explains in comments, <code>'{:20}'</code> specifies a string width of 20; to specify float precision you need a decimal point before it: <code>{:.20}</code> or <code>{:.20g}</code>. </p>
<p>As to why the number is formatted as it is, OP said it: "A general convention is that an empty format string ("") produces the same result as if you had called str() on the value." That's what you're getting, space-padded as per the format string (it's empty as to the number format, and the format can accommodate the full <code>str</code> representation).</p>
</div>
<span class="comment-copy">Do you mean your <code>20</code> to be the string width, rather than the float precision? If you want the latter, you need a decimal point before it: <code>{:.20}</code> or <code>{:.20g}</code>.</span>
<span class="comment-copy">Also, which version of Python are you using? <a href="http://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">The docs for Python 3</a> have a different explanation of what happens if you don't provide a presentation type: <code>Similar to 'g', except with at least one digit past the decimal point and a default precision of 12. This is intended to match str(), except you can add the other format modifiers.</code></span>
<span class="comment-copy">Uurgh. Yes, this is all well-defined, fairly carefully thought out, and unlikely to change.  There's also reasonably complete test coverage for most of this behaviour.  OTOH, it's not at all well documented, I'm afraid.  So if you want to know whether you can rely on this behaviour, then the answer is 'yes'.  If you're looking for a really good description of exactly what the behaviour is, then I'm afraid that the source is your best bet.</span>
<span class="comment-copy">And as @Blckknght says: the Python version matters.  E.g., for Python &gt;= 3.2, <code>str</code> and <code>repr</code> are identical for floats, so <code>str(1e11)</code> has no exponent.</span>
<span class="comment-copy">I'd consider submitting a (documentation) bug report :)</span>
<span class="comment-copy">The idea of the question is not to specify float <i>precision</i> but to specify the <i>width</i> of the float representation. So <code>.20</code> formats are not relevant here. The real question is where in the document (if anywhere) is the behavior of the "no presentation type" form <code>{:20}</code> described. My understanding is that the documentation says that it should be <code>g</code>, for floats, but the code in the question shows that the string form is used instead, which is strange.</span>
<span class="comment-copy">@EOL In which case, the answer is in the question: "A general convention is that an empty format string ("") produces the same result as if you had called str() on the value."</span>
<span class="comment-copy">The problem is precisely the format string <code>:20</code> is actually <i>not</i> empty… The <i>presentation type</i> is empty, though, but then the documentation for float formatting says that the type should be like <code>g</code>, which is not the case.</span>
<span class="comment-copy">@EOL It's empty as to the formatting of the number AND the format it specifies can accomodate the full <code>str</code> representation.</span>
<span class="comment-copy">@EOL You're seeing a mystery where there is none: the default is what you get from <code>str</code>. It would be surprising if it were any different.</span>
