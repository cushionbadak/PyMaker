<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<ul>
<li>Keys that must be in dict</li>
<li><p>Keys that are optional for dict</p>
<ol>
<li>how can I check if the keys that must be there in a dictionary are there or not?</li>
<li>how can I check if any of the optional keys is there in the dictionary or not?</li>
</ol></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/2/library/stdtypes.html#dictionary-view-objects" rel="nofollow">dictionary views</a> and sets:</p>
<pre><code>missing = set(required) - some_dict.viewkeys()
optional_present = some_dict.viewkeys() &amp; optional
</code></pre>
<p>Sets, like dictionaries, make membership testing cheap and fast, and set operations make it easy to test if items are present or not. You really want to make <code>required</code> and <code>optional</code> be sets to starts with.</p>
<p>For example, <a href="http://docs.python.org/2/library/stdtypes.html#set.difference" rel="nofollow">subtraction on sets</a> calculates the difference, so <code>missing</code> is set to the difference between the <code>required</code> list and what keys are in the dictionary.</p>
<p>Using the <a href="http://docs.python.org/2/library/stdtypes.html#set.intersection" rel="nofollow"><code>&amp;</code> operator on sets</a> (normally binary AND) gives you the intersection, so <code>optional_present</code> gives you what keys in the dictionary are also in the <code>optional</code> sequence (doesn't have to be a set in this case, but using a set there would make sense).</p>
<p>For testing individual keys you can still use <code>key in some_dict</code>, but using set operations avoids excessive looping.</p>
<p>Note that <a href="http://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow"><code>dict.viewkeys()</code></a> is  specific to Python (added in Python 2.7); in Python 3, the dictionary enumeration methods <a href="http://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow"><code>.keys()</code></a>, <a href="http://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow"><code>.values()</code></a> and <a href="http://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow"><code>.items()</code></a> return dictionary views by default and the <code>.view*()</code> methods are gone.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>key in your_dict</code> for the first case and set difference will solve the second one. Dicts can behave like sets using <code>dict.viewkeys()</code> (<code>dict.keys()</code> in py3x):</p>
<p>You can use <code>all()</code> to check if all the keys in a list are present in a dict.</p>
<pre><code>all(key in your_dict for key in keys)
</code></pre>
<p>Set difference:</p>
<pre><code>your_dict.viewkeys() - set(keys) 
</code></pre>
</div>
<span class="comment-copy">hey thats nice..!! my name came up on the edit for the first time!!</span>
<span class="comment-copy">It's also worth noting that in Py3k <code>dict.keys()</code> works like <code>dict.viewkeys()</code> which no longer exists</span>
<span class="comment-copy">The first line, the subtraction, looks backwards. Wouldn't you want to subtract/remove "required" from the dict? Meaning: <code>missing = some_dict.view() - set(required)</code> (Python3 syntax)</span>
<span class="comment-copy">@ahogen: no, because then you get the keys that are <i>extra</i>, over and on top of the required keys. You want all keys that are in the <code>required</code> set, but which are not in the dictionary, which is what the expression in my answer achieves.</span>
