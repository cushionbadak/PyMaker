<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/448271/what-is-init-py-for">What is __init__.py for?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>When creating a Python package, I am told to create a blank file called <strong>init</strong>.py. What I don't understand is why I need to create this file. The <code>distutils</code> build script doesn't modify it, so five builds later it's still blank. What is it's purpose?</p>
</div>
<div class="post-text" itemprop="text">
<p>It a signal to Python that the folder is a package, not just a folder. 
It also contains initialization code that is run when the package is <code>import</code>ed into a script.</p>
<p>See <a href="http://docs.python.org/3/tutorial/modules.html#packages">the docs on the subject</a> for more. The most relevant extract:</p>
<blockquote>
<p>The <code>__init__.py</code> files are required to make Python treat the
  directories as containing packages; this is done to prevent
  directories with a common name, such as <code>string</code>, from unintentionally
  hiding valid modules that occur later on the module search path. In
  the simplest case, <code>__init__.py</code> can just be an empty file, but it can
  also execute initialization code for the package or set the <code>__all__</code>
  variable, described later.</p>
</blockquote>
</div>
<span class="comment-copy">You really should at least look at the tutorial when you don't understand something. It's there for a reason.</span>
<span class="comment-copy">@abarnert - The tutorial I was using (<a href="http://guide.python-distribute.org/quickstart.html" rel="nofollow noreferrer">guide.python-distribute.org/quickstart.html</a>) didn't mention what it was for, just to create it.</span>
<span class="comment-copy">That tutorial is for setting up your packages to be shared with other people. It more or less assumes that you already understand how packages work on a basic level.</span>
<span class="comment-copy">A cause for misunderstanding here is “package”: a Python package is a directory that can be imported as a module and contains other modules; this is related to imports, not to packaging.</span>
<span class="comment-copy">@ÉricAraujo: It's a little confusing to novices that the same term is used for "directory that can be imported as a module" and for "thing you install from, e.g., PyPI, which may be a module, a package, or more than one of the above".</span>
