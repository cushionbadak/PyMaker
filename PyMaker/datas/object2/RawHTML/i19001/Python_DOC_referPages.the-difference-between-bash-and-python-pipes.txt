<div class="post-text" itemprop="text">
<p>I have the following three python scripts:</p>
<p>parent1.py</p>
<pre><code>import subprocess, os, sys

relpath = os.path.dirname(sys.argv[0])
path = os.path.abspath(relpath)
child = subprocess.Popen([os.path.join(path, 'child.lisp')], stdout = subprocess.PIPE)
sys.stdin = child.stdout
inp = sys.stdin.read()
print(inp.decode())
</code></pre>
<p>parent2.py:</p>
<pre><code>import sys
inp = sys.stdin
print(inp)
</code></pre>
<p>child.py:</p>
<pre><code>print("This text was created in child.py")
</code></pre>
<p>If i call parent1.py with:</p>
<pre><code>python3 parent1.py
</code></pre>
<p>it gives me like expected the following output:</p>
<pre><code>This text was created with child.py
</code></pre>
<p>if i call parent2.py with:</p>
<pre><code>python3 child.py | python3 parent2.py
</code></pre>
<p>i get the same output. But in the first example i get the output of child.py as bytes and in the second i get it directly as a string. Why is this? Is it just a difference between python and bash pipes or is there something i could do otherwise to avoid this?</p>
</div>
<div class="post-text" itemprop="text">
<p>When python opens <code>stdin</code> and <code>stdout</code>, it detects what encoding to use and uses <a href="http://docs.python.org/3/library/io.html#text-i-o" rel="nofollow">text I/O</a> to give you unicode strings.</p>
<p>But <code>subprocess</code> does not (and can not) detect the encoding of the subprocess you start, so it'll return bytes. You can use a <a href="http://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow"><code>io.TextIOWrapper()</code> instance</a> to wrap the <code>child.stdout</code> pipe to provide unicode data:</p>
<pre><code>sys.stdin = io.TextIOWrapper(child.stdout, encoding='utf8')
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/3999114/linux-pipe-into-python-ncurses-script-stdin-and-termios?answertab=votes#tab-top">try this</a></span>
<span class="comment-copy">Yep.  I'd like to add that there is just one kind of pipes in the OS and that's used by bash and Python just the same.  The interpretation of a stream can be different, and Python distinguishes the two cases; in one it interprets the input as bytes, in the other as string/unicode.</span>
<span class="comment-copy">Thanks that worked. If i now want to do something like 'cat /bin/bash | parent2.py' it raises an UnicodeDecodeError because sys.stdin.read() doesn't return bytes. Is there a way to go around this?</span>
<span class="comment-copy">@Alfe: Well, it still <i>interprets</i> the input as bytes in both cases, it just automatically wraps the stream in a <code>TextIOWrapper</code> for you in the latter case. You can get at the underlying byte stream, or manually attach your own wrapper, in either case. But still, a useful point.</span>
<span class="comment-copy">@IchUndNichtDu: <code>sys.stdin</code> is just a regular <code>TextIOWrapper</code> like anything else. (Try printing its <code>repr</code>.) So, you can get at the bytes inside it in all the usual ways. For example, you can get its <code>fileno()</code> and <code>os.read()</code> from that (but don't mix up reads from both the wrapper and the fileno!).</span>
<span class="comment-copy">@IchUndNichtDu: you could try to see if the object has an <code>encoding</code> attribute; if not, you need to wrap it; <code>if not hasattr(fileobj, 'encoding'): fileobj = io.TextIOWrapper(fileobj, encoding=...)</code>.</span>
