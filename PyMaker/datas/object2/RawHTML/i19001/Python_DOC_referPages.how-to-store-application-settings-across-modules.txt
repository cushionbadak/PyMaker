<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15992387/how-to-save-application-settings-in-a-config-file">How to save application settings in a config file?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I received a project from developer who left our company. Not too complex, but it doesn't look very nice.
So here is the question:
Application has some modules and one is "settings" which stores some app. options (not all possible options, lets say just two: <code>foo</code> and <code>bar</code>).
When application is started it reads options from command line (using argparse):</p>
<pre><code>parser.add_argument('--foo', action='store_true')
parser.add_argument('--bar', action='store_true')
parser.add_argument('--baz', action='store_true')
</code></pre>
<p>And then it performs this nasty thing:</p>
<pre><code>for name, val in parser.parse_args(sys.argv[1:])._get_kwargs():
    setattr(sys.modules['settings'], name, val)
</code></pre>
<p>First: I think this is dirty, non-pythonic hack. And second, it is simply inconvenient to use such code, because when I need to use <code>settings.baz</code>, IDE complaints that it doesn't exist.
The intention of this hack is to make options parsed from command line available in all modules that are used in application further.</p>
<p>I'm thinking about something like singleton pattern, but I only used it once in PHP, and don't know if this correct solution in python. And even if it is, can someone show example?</p>
<p>I'm noob in python and on SO, please be kind to me :)
Thanks.</p>
<p>p.s. I'm sorry for possible mistakes in my English</p>
</div>
<div class="post-text" itemprop="text">
<p>Modules in Python <em>are</em> singleton objects, and using one to store the settings used by the other modules would be a very Pythonic</p>
<p>The second line of the "nasty thing" is just setting the attributes of a module named <code>settings</code> and so isn't that bad. What's worse is the <code>_get_kwargs()</code> part of the first line which is accessing a private attribute of the <code>argparse.Namespace</code> object returned by <code>parser.parse_args()</code> to get the names and values of the settings parsed from the command-line. A slightly better way to do it might be something like this:</p>
<pre><code>import settings  # possibly empty .py file

for name, val in vars(parser.parse_args(sys.argv[1:])).iteritems():
    setattr(settings, name, val)
</code></pre>
<p>However this won't fix your IDE problems because the IDE doesn't know the name of settings added dynamically. A simple way to fix that would be to define all the possible attributes with some kind of default values in a <code>settings.py</code> module instead of having an empty one.</p>
<p>The first time a module is <code>import</code>ed an entry for it is added to the <code>sys.modules</code> dictionary with its name as the key and an instance of <code>types.ModuleType</code> as a value. Subsequent <code>import</code>s will first check to see if an entry for it already exists and will skip reloading  the file if it does -- which is why I claim they're basically singleton objects. Modifications made to its attributes will immediately be visible to other modules that have imported it or do so afterwards, so it's generally a good data sharing mechanism within an application.</p>
</div>
<div class="post-text" itemprop="text">
<p>Look this <a href="https://pypi.python.org/pypi/config/0.3.7" rel="nofollow">Config (A hierarchical, easy-to-use, powerful configuration module for Python )</a></p>
<p><a href="http://www.red-dove.com/config-doc/" rel="nofollow">Detailed doc &amp; examples</a></p>
</div>
<span class="comment-copy">This is a duplicat. It was answered in this topic <a href="http://stackoverflow.com/questions/15992387/python-settings-file">stackoverflow.com/questions/15992387/python-settings-file</a></span>
<span class="comment-copy">That's not a duplicate at all - the other one is about config files, this one is about run-time module configuration.</span>
<span class="comment-copy">This is what I was looking for. Additionally I found this <a href="http://docs.python.org/2/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">link</a>, which just confirms your answer. Regarding the "nasty thing" - you are right, the most confusing thing was usage of private method. Thanks for the hint with <code>vars</code>. And of course thank you for detailed explanation of how all these works.</span>
<span class="comment-copy">It's good to see they've explicitly documented this usage of modules in the FAQ. Although <code>sys.modules</code> purpose is to provide a module caching mechanism, the implementation makes them particularly well suited for exchanging data among modules within the application.</span>
<span class="comment-copy">FWIW There's also a section titled <a href="https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">How do I share global variables across modules?</a> in the current Python 3 documentation that has the same advice (call it the "canonical" way to do this sort of thing).</span>
<span class="comment-copy">Yeah, I saw this module, but it's rather about cool config format than what I need. I fact, the question is how to share config across all modules in application. No matter if these options from config file or command line. Probably I don't see eviden things and this module has what I need, but please note, I'm noob in python (and don't have too much experience in programming at all). So it would be nice if you can point me how to use it in my case.</span>
