<div class="post-text" itemprop="text">
<p>Research is at the bottom, read before -1'ing... Thanks.</p>
<p>I have to write a Python script that runs SQL queries. I made a main class and called SQLQuery. Each SQLQuery instance represents a query. The script must be structured like this:</p>
<pre><code>class SQLQuery(object):

     def __init___(self, string_myQuery)...

instance1 = SQLQuery(SQLQuery1)...

instance2 = SQLQuery(SQLQuery2)...
</code></pre>
<p>As a user requirement, the instances <em>must</em> be in the same file as the class (so I can't just make each instance a main and execute that file separately), and each instance <em>must</em> be executed with Linux console commands. I can execute the entire script with a simple python SQLQuery.py but I need to execute each instance separately. The queries will be executed every day, automatically, so I don't need a terminal UI tree. It should be executed with a command similar to this:</p>
<pre><code>python SQLQuery.py -inst1
</code></pre>
<p>will execute instance1.</p>
<pre><code>python SQLQuery.py -inst2
</code></pre>
<p>will execute instance2.</p>
<p>I have researched how to execute Python scripts with Linux commands and most of the articles are about calling commands from the Python script. However, I found <a href="http://docs.python.org/2/using/cmdline.html" rel="nofollow">this article</a> from the Python documentation. It suggests adding -m, so:</p>
<pre><code>python SQLQuery.py -m inst1
</code></pre>
<p>This would let me set my main with a console command, but it doesn't work since the instances aren't modules. And since the instances <em>must</em> be in the same file as the class, I can't just import them as a module when I execute SQLQuery.py with a console command.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ignoring all the irrelevancies, it sounds like your problem is that you have a bunch of global objects named <code>instance1</code>, <code>instance2</code>, <code>instance3</code>, etc., and you want to call some method on one of them based on a command-line parameter whose value will be similar to, but not identical to, the instance names.</p>
<p>That's probably not a good idea… but it's not that hard:</p>
<pre><code>if __name__ == '__main__':
    inst = sys.argv[1] # will be 'inst1', 'inst13', etc.
    inst_number = inst[5:] # so '1', '13', etc.
    inst_name = 'instance' + inst_number
    instance = globals()[inst_name]
    instance.execute()
</code></pre>
<hr/>
<p>A much better way to do the same thing is to put the <code>instance</code> globals into a list or dict that you can index.</p>
<p>For example, let's say instead of <code>instance1</code>, <code>instance2</code>, etc., you've got an <code>instances</code> dict, with <code>instances['1']</code>, <code>instances[2]</code>, etc. Now instead of this:</p>
<pre><code>inst_name = 'instance' + inst_number
instance = globals()[inst_name]
instance.execute()
</code></pre>
<p>… you just do this:</p>
<pre><code>instances[inst_number].execute()
</code></pre>
<hr/>
<p>Also, instead of coming up with a command-line parameter that has extra stuff in it that you have to parse and throw away, and has no more meaning for a human reader than for your code, why not just take a number?</p>
<pre><code>python myscript.py 12
</code></pre>
<p>Or, alternatively, use <a href="http://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow"><code>argparse</code></a> to create an argument that can be used in all of the obvious ways:</p>
<pre><code>python myscript.py --instance=12
python myscript.py --instance 12
python myscript.py -i12
python myscript.py -i 12
</code></pre>
<p>Either way, your code gets the string <code>'12'</code>, which it can then use to look up the function, as above.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have the wrong syntax for the <code>-m</code> option.  Suppose you have the following file named <code>foo.py</code>:</p>
<pre><code>import sys
print 'First arg is: ', sys.argv[1]
</code></pre>
<p>Then you would call it like this:</p>
<pre><code>$ python -m foo bar
First arg is:  bar
</code></pre>
<p>Note that the ".py" extension is omitted.  You can then use the command line argument to decide which object to use or use the <code>argparse</code> or <code>optparse</code> module to handle the argument.</p>
</div>
<span class="comment-copy">Why don't you just pass a command-line argument to the script that tells it which instance to run?</span>
<span class="comment-copy">The structure you presented makes no sense. <code>SQLQuery</code> has itself as a base class, and also takes itself as an <code>__init__</code> argument? Also, what are <code>MainClass</code> and <code>SQLQuery1</code>?</span>
<span class="comment-copy">Also, where does that document suggest adding <code>-m</code>? It describes how <code>-m</code> works as an argument to <code>python</code> itself, where it means to find and execute a module by name; that doesn't imply anything at all about what <code>-m</code> should means as an argument to your script.</span>
<span class="comment-copy">check out <a href="http://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer">docs.python.org/2/library/argparse.html</a>, build a command line interface</span>
<span class="comment-copy">martineau, that's what I'm trying to do. You have described my question. abarnert, that is irrelevant.</span>
<span class="comment-copy">Thanks, I would upvote it if I had more rep. Everyone else just picked apart irrelevancies and downvoted me because they they couldn't find the research I did at the bottom of the post. I guess next time I'll put my research all at the top.  I'll try to put the instances in a dictionary. That seems like the simplest and cleanest solution, and it doesn't have to be human-readable since the command will be run by the server every day on a timer.</span>
<span class="comment-copy">@JaneGoodall: As the questioner, it's more important to accept the right answer—or comment on the best one to explain how it can be improved before it's worth accepting—than to upvote.</span>
<span class="comment-copy">Thank you bogatron, but I cannot call an external file. It's a user requirement.</span>
<span class="comment-copy">Perhaps I'm not understanding your question.  I'm not suggesting you call an external file. The <code>foo.py</code> file above is your <code>SQLQuery.py</code> file.  You use the command line argument to decide which object to use within the file. If you are trying to make command line calls to create new objects within an existing python process, then you should consider the python <code>multiprocessing</code> module, which will enable you to easily set up a server process that you can access from the command line to create new objects within a module.</span>
