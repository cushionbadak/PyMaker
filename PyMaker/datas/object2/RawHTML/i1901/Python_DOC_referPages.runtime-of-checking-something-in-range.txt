<div class="post-text" itemprop="text">
<p>I want to check if m in between l and h.
I can write</p>
<pre><code>if m&lt;=h and m&gt;=l
</code></pre>
<p>or</p>
<pre><code>m in range(l,h+1)
</code></pre>
<p>The latter one looks better, but does it take more than O(1) time?</p>
</div>
<div class="post-text" itemprop="text">
<p><em>O(1)</em>:</p>
<pre><code>if m&lt;=h and m&gt;=l:
    ...
</code></pre>
<p><em>O(n)</em> in Python 2, but <a href="https://stackoverflow.com/a/30081470/674039"><em>O(1)</em> in Python 3</a>: </p>
<pre><code>if m in range(l, m+1):
    ...
</code></pre>
<p>Better style:</p>
<pre><code>if low &lt;= m &lt;= high:
    ...
</code></pre>
<p>Note: The behaviour is <strong>different</strong> if m can be a non-integer (consider a float, for example).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's better to use the first one but you can rewrite it like it:</p>
<pre><code>if 1&lt;=m&lt;=h
</code></pre>
<p>The function <code>range</code> create a list and <code>in</code> searches if m is in that list. It's worse in performance that two comparisons.</p>
<p>That only applies to python 2, in python 3 both ways are optimal.</p>
</div>
<span class="comment-copy">That should be <code>m in range(l,h+1)</code>.</span>
<span class="comment-copy"><code>x in range()</code> is much slower than checking against two integers.</span>
<span class="comment-copy">What python version?  In python 2, you're creating a list of those elements.  If l and m are far apart, that's a lot of memory to use and throw away.  In python 3 the range class does this under the hood in very fast time without creating the full list.</span>
<span class="comment-copy">Relevant:  <a href="https://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3?rq=1" title="why is 1000000000000000 in range1000000000000001 so fast in python 3">stackoverflow.com/questions/30081275/â€¦</a></span>
<span class="comment-copy"><code>x in range(y, z)</code> is constant time in Python 3. In Python 2, it is linear time</span>
<span class="comment-copy">Thanks but why does the last one work? How is it evaluated?</span>
<span class="comment-copy">@FelixYan The evaluation is documented <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">It's worth noting that <code>m in range(l, m+1)</code> and <code>low &lt;= m &lt;= high</code> are not equivalent if <code>m</code> is a non-integer value (eg. <code>m = 1.5</code>). For example, if <code>low = 0</code> and <code>high = 3</code> then the range test will return false and the comparison operator test will return true.</span>
<span class="comment-copy">@Dunes  This <i>is</i> already noted in the answer</span>
<span class="comment-copy">Apologies, I must have skipped reading the note.</span>
<span class="comment-copy">Not in python 3.  In python 3 the range class does not create a list in memory.  Nor does it search it in linear time.</span>
