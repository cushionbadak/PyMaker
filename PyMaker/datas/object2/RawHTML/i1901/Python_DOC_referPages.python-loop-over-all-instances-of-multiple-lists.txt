<div class="post-text" itemprop="text">
<p>Is there a better way for looping over every combination of multiple lists in Python? For example...</p>
<pre><code>list1 = [1,2,3,4]
list2 = [6,7,8]

for i in list1:
   for j in list2:
      print(str(i) + ", " + str(j))

1, 6
1, 7
1, 8
2, 6
2, 7
2, 8
3, 6
3, 7
3, 8
4, 6
4, 7
4, 8
</code></pre>
<p>I ask because I would like to break out of both loops once a value is found. I do not want to use a bool flag to break out of the top level loop. All answers I have seen so far say to use zip, but that is not the same thing. zip would produce the following.</p>
<pre><code>1, 6
2, 7
3, 8
</code></pre>
<p>If you use map, you get the following, which is also not what I am looking for.</p>
<pre><code>1, 6
2, 7
3, 8
4, None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> like so:</p>
<pre><code>list1 = [1,2,3,4]
list2 = [6,7,8]
find_this_value = (1, 8)

found_value = False
for permutation in itertools.product(list1, list2):
    if permutation == find_this_value:
        found_value = True
        break

if found_value:
    pass  # Take action
</code></pre>
<p><code>itertools.product</code> returns a generator with all of the possible permutations of the 2 lists. Then, you simply iterate over those, and search until you find the value you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using a list comprehension</p>
<pre><code>[(x, y) for x in [1,2,3,4]
 for y in [6,7,8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use <code>itertools.product</code> as suggested in another answer, you can wrap it in a function and return:</p>
<pre><code>list1 = [1,2,3,4]
list2 = [6,7,8]

def findNumbers(x, y):
    for i in list1:
       for j in list2:
          print(str(i) + ", " + str(j))
          if (x, y) == (i, j):
              return (x, y)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; findNumbers(2, 7)
1, 6
1, 7
1, 8
2, 6
2, 7
(2, 7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to know where you were in the scan when the break condition arose, you can use  list comprehensions and <code>enumerate</code> together</p>
<pre><code>for i,a,j,b in [ x+y for x in enumerate([11,12,13,14]) for y in enumerate([16,17,18]) ]:
    print( i,a,j,b)
    if a==13 and b==17: break
print(i,j) # get 2 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>product</code> function.</p>
<p>You can read more in <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">here</a></p>
<blockquote>
<p>Roughly equivalent to nested for-loops in a generator expression</p>
</blockquote>
<pre><code>import itertools
print (list(itertools.product(list1, list2)))
# [(1, 6), (1, 7), (1, 8), (2, 6), (2, 7), (2, 8), (3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (4, 8)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might like to see <code>product</code> used in a simple code.</p>
<ul>
<li>In this case <code>product</code> is an iterator that returns elements of the cross-product of <code>list1</code> and <code>list2</code> one at a time.</li>
<li>Within the <code>for</code>-loop we watch for the appearance of a certain pair, and <code>break</code> out of the loop if and when we encounter it.</li>
</ul>
<p>--</p>
<pre><code>&gt;&gt;&gt; list1 = [1,2,3,4]
&gt;&gt;&gt; list2 = [6,7,8]
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for i, j in product(list1, list2):
...     if (i,j)==(2,7):
...         print (i,j)
...         break
...     
2 7
</code></pre>
</div>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>!</span>
<span class="comment-copy"><code>itertools.product</code></span>
<span class="comment-copy">What is the value you're looking for? Like <code>i == &lt;x&gt;</code> and <code>j == &lt;y&gt;</code>? What are <code>&lt;x&gt;</code> and <code>&lt;y&gt;</code> in your case?</span>
<span class="comment-copy">I like this answer the best because it gives the solution in the most straight forward way. However, I like the answers that suggest using a function as well. They hold to the single responsibility principle and solves the problem. Maybe a combination of both is the best solution...</span>
