<div class="post-text" itemprop="text">
<p>I have a directory with a lot of files (~1.4M) from a data-dump and I want to sort them into subdirectories to create batches of smaller size.
Due to the large number of files in the directory I want to batchify, I want to avoid having to <code>os.listdir(...)</code> everything in the directory and then test all of the results if they are a directory or not.</p>
<p>My idea until now is to use <code>os.walk(...)</code> to check this.</p>
<p>Is there a more pythonic/efficient way to achieve what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to <code>os.listdir()</code>, you can use <code>os.scandir()</code> on Python 3.5+.  This returns an iterator of <code>DirEntry</code> objects and does not recurse into sub-directories as is the case with <code>os.walk</code>.</p>
<p>Here's an example from the <a href="https://docs.python.org/3.5/library/os.html#os.scandir" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>for entry in os.scandir(path):
   if not entry.name.startswith('.') and entry.is_file():
       print(entry.name)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/glob.html#glob.iglob" rel="nofollow noreferrer"><code>glob.iglob</code></a>? <code>os.walk</code> will also descent into subdirectories, while <code>glob.(i)glob</code> will not.</span>
