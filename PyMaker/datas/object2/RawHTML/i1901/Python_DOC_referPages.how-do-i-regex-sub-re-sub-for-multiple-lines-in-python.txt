<div class="post-text" itemprop="text">
<p>I am trying to replace two separate lines in a file using regular expressions. </p>
<p>Each 'with open("release.spec", "w")' statement works if used on it's own, but if used together, It only updates the second one, and not the first. </p>
<pre><code>import re
import time

ver = time.strftime('%Y.%m')
ts = time.strftime('%a %b %d %Y')

with open("release.spec", "r") as spec_file:
    lines = spec_file.readlines()

with open("release.spec", "w") as spec_file:
    for line in lines:
        spec_file.write(re.sub(r'^Version.*$', 'Version\t\t ' + ver, line))

with open("release.spec", "w") as spec_file:        
    for line in lines:   
        spec_file.write(re.sub(r'^%changelog', '%changelog\n' + \
            '* ' + ts + ' Linux Admin &lt;root@localhost&gt;\n' + \
            '- Release cycle ' + ver \
            , line))
</code></pre>
<p>Why does it not substitute on both lines? What would an easier method be to write both statements, preferable in one open write statement? If I try something like the following, it duplicates each line.</p>
<pre><code>with open("release.spec", "w") as spec_file:
    for line in lines:
        spec_file.write(re.sub(r'^Version.*$', 'Version\t\t ' + ver, line))
        spec_file.write(re.sub(r'^%changelog', '%changelog\n' + \
            '* ' + ts + ' Linux Admin &lt;root@localhost&gt;\n' + \
            '- Release cycle ' + ver \
            , line))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Each time you open a file in a <code>w</code> based mode, <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">the file is truncated</a> (emptied, reduced to zero bytes) and you're rewriting it from scratch. So you perform the first replacement, writing the results to the file (but not keeping them in memory), close the file, then reopen it for write and throw away everything you just wrote.</p>
<p>The solution is to perform each replacement one at a time in memory, <em>then</em> write <em>once</em>. Using your attempted code, but removing the double-write in favor of storing the first stage of substitution in memory, then reusing it for the next stage:</p>
<pre><code>with open("release.spec", "w") as spec_file:
    for line in lines:
        # Store result of first modification...
        modified_line = re.sub(r'^Version.*$', 'Version\t\t ' + ver, line)
        # Perform second modification on result of first, then write result
        spec_file.write(re.sub(r'^%changelog', '%changelog\n' + \
            '* ' + ts + ' Linux Admin &lt;root@localhost&gt;\n' + \
            '- Release cycle ' + ver \
            , modified_line))
</code></pre>
</div>
<span class="comment-copy">Thank you for the explanation, makes perfect sense.Completely forgot that the line was coming from the older value, and not updated as it writes to file  in the first statement.</span>
