<div class="post-text" itemprop="text">
<p>So I am working on a <code>Customer class</code> that is supposed to be wrapper for some other classes that retrieve information about a specific customer from a server and from online, as below. </p>
<pre><code>class Customer:
    def __init__(self, name):
        self.name = name

    @property
    @lru_cache()
    def online_info(self):
       print('retrieving customer online info')
       return Online().search_result(for=self)

    @property
    @lru_cache()
    def server_info(self):
      print('retrieving customer server info')
      return Server().search_result(for=self)
</code></pre>
<p>The online and server calls have to be <code>@property</code> decorated. The problem I am facing is when trying to cache the <code>online_info</code> and <code>server_info</code> calls. The cache would somehow have to be at a class level so that even if a news customer is instantiated, the <code>lru_cache</code> wold remember previous calls from other instantiations for the same name call. Note my print statements. This is the behavious I am trying to achieve:</p>
<pre><code>&gt;&gt;&gt; cutomer1 = Customer('John')
&gt;&gt;&gt; customer1.online_info
retrieving customer online info
John Smith has the following info bla bla bla ....

&gt;&gt;&gt; cutomer2 = Customer('John')
&gt;&gt;&gt; customer2.online_info # this one will not be calling the function, lru_cache will return the value saved from customer1.online_info
John Smith has the following info bla bla bla ....
</code></pre>
<p>Can someone explain how I achieve this behaviour? Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of caching the property values on the class, I would recommend re-using the same <code>Customer</code> instance for each "John", so that</p>
<pre><code>&gt;&gt;&gt; Customer('John') is Customer('John')
True
</code></pre>
<p>This would make <code>Customer</code> a singleton of sorts. Singleton implementations can be found aplenty in this question: <a href="https://stackoverflow.com/q/6760685/1222951">Creating a singleton in Python</a>. Borrowing one of those implementations gives us a pseudo-singleton metaclass like this:</p>
<pre><code>class NameSingleton(type):
    def __init__(cls, *args, **kwargs):
        cls._instances = {}

    def __call__(cls, name, *args, **kwargs):
        try:
            return cls._instances[name]
        except KeyError:
            instance = super().__call__(name, *args, **kwargs)
            cls._instances[name] = instance
            return instance
</code></pre>
<p>Use this as the metaclass for <code>Customer</code> and you're done:</p>
<pre><code>class Customer(metaclass=NameSingleton):
    def __init__(self, name):
        self.name = name

    ...
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; Customer('John') is Customer('John')
True
&gt;&gt;&gt; Customer('John') is Customer('not John')
False
</code></pre>
</div>
<span class="comment-copy">What if I do <code>Customer('not John').online_info</code>? Should that also use the cached value?</span>
<span class="comment-copy">@Aran-Fey in that case no, because 'no John' was never called before</span>
<span class="comment-copy">You can't use <code>lru_cache</code> on properties, or at least, there is <i>no point in using <code>lru_cache</code> there</i> even if you got your decorator order right (which is incorrect as it is now). <code>lru_cache</code> works by looking at the <i>arguments to a function</i>, and here all you have is... nothing, as properties don't take arguments.</span>
<span class="comment-copy">@Aran-Fey if however you would have another Customer('no John').online info, after initial 'no John' then the values for the second 'no John' will be pulled from the cache and not from the property call</span>
<span class="comment-copy">@MartijnPieters That's not right. There's the <code>self</code> argument. The code works perfectly fine if the decorators are swapped.</span>
<span class="comment-copy">that is an interesing built. However, I am a bit reluctant to use this code because up the chain I am making multiple Customers from a pandas dataframe, then calling the server_info and online_info on multiple threads and I afraid that with a singleton and multithreading, they might stunble on each other</span>
<span class="comment-copy">@callmeGuy Well, the worst thing that could happen is that two threads create a John at the same time, and end up with two different John instances. Every caching mechanism has that problem though, whether you're caching <code>Customer</code> instances or property values. If it's a problem, you can wrap the <code>Customer</code> constructor in a <a href="https://docs.python.org/3/library/threading.html#threading.Lock" rel="nofollow noreferrer"><code>threading.Lock</code></a>.</span>
<span class="comment-copy">so if i am creating 2 Customers in the same time and they happen to be of the same value, then the cache will be useless. Is there such thing as a global cache?</span>
<span class="comment-copy">@callmeGuy This <i>is</i> a global cache, but it's not thread-safe. It just needs a lock.</span>
