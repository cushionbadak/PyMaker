<div class="post-text" itemprop="text">
<p>I wrote this code to remove duplicate elements and tried to use <code>remove</code> when finding duplicates while adding elements to dictionary. Can anyone please explain how this <code>remove</code> works in this context because I am unclear at times how remove functions with a dictionary. Small part of code is below. </p>
<pre><code>def remove_duplicates(a = [1,1,3,4,5,6,6,6,6,121,45,6,3,4]):
    b = []
    mapped = {}
    for i in a:
        try:
            mapped.get(i)
            mapped.remove(i)
        except:
            mapped[i] = i
    for j in mapped:
        b.append(j)
    return b
</code></pre>
<p>output is <code>[1, 3, 4, 5, 6, 121, 45]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is <code>remove</code> doesn't work, because <code>dict</code>s don't have a <code>remove</code> method. So you'd always get an <code>AttributeError</code>, but by catching and ignoring <em>all</em> exceptions, you never see it, making:</p>
<pre><code>    try:
        mapped.get(i)
        mapped.remove(i)
    except:
        mapped[i] = i
</code></pre>
<p>equivalent to a slower version of:</p>
<pre><code>    mapped[i] = i
</code></pre>
<p>(except if you're unlucky, it might also silence critical exceptions like <code>KeyboardInterrupt</code>s too).</p>
<p>This whole function is kind of ridiculous mind you. The same behavior could be achieved with:</p>
<pre><code>def remove_duplicates(a = [1,1,3,4,5,6,6,6,6,121,45,6,3,4]):
    return list(dict.fromkeys(a))
</code></pre>
<p>Traditionally, it would be <code>return list(set(a))</code>, but <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="nofollow noreferrer">since 3.6 and higher provide ordered <code>dict</code>s</a>, using <code>dict.fromkeys</code> means you preserve the order in which values were first observed, while still discarding duplicates (on 3.5 and earlier, <code>set</code> vs <code>dict.fromkeys</code> won't matter; <code>dict.fromkeys</code> might be a little slower or use a little more memory, but the behavior will be roughly the same).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to remove duplicates from a list and don't care about order, a simple way is to use <code>set</code>.</p>
<pre><code>removed_duplicates = set(my_list)
</code></pre>
<p>Where <code>my_list</code> is the list you want to de-dedupe. A side-effect of this is that you'll lose order, but that may not matter for you.</p>
<p>This is basically what you are doing, except you are constructing a map from each element to itself, which is equivalent to a set.</p>
</div>
<span class="comment-copy">I don't believe that remove is a method on dict</span>
<span class="comment-copy">Blanket excepts are rarely a good idea in Python. Great point.</span>
<span class="comment-copy">The original code <i>won't</i> lose order on 3.6 or higher, thanks to using <code>dict</code>s (which became ordered as an <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict" rel="nofollow noreferrer">implementation detail in 3.6</a>, and as <a href="https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights" rel="nofollow noreferrer">a language guarantee in 3.7</a>). <code>list(dict.fromkeys(my_list))</code> would preserve order while deduping the same way the OP's code does though.</span>
<span class="comment-copy">I was trying to avoid methods and do with as much basic logic as possible, hence came with this idea. Thanks for that.</span>
<span class="comment-copy">@ShadowRanger that's good to know!</span>
