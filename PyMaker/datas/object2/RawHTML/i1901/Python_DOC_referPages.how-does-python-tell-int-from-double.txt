<div class="post-text" itemprop="text">
<p>So in our lecture slide on assembly we had:</p>
<blockquote>
<p>High-level language data types of C, A, and B determine the correct
  circuit from among several choices (integer, floating point) to use to
  perform “+” operation</p>
</blockquote>
<p>Now in languages like Python, I do not specify the type of the variable. I was wondering how does the language compiles (interprets, I think is what it does) down into assembly and chooses the right circuit?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>At the interpreter level it's fairly easy to tell the difference between an integer (34), a floating point number (34.24), and a string ("Thirty-Four").  The full list of types can be seen at <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html</a> .</p>
<p>Once the type is known, it's easy to tell what operation is needed.  A separate function (<code>__add__</code>) is defined for each class, and the interpreter (written in C for standard Python) will do the arithmetic.  C is typed and it's (comparatively) easy for the compiler to be translated to machine code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every Python variable is a reference to an object.  That object includes the type information of the variable.  For instance, just walk through a few of the possibilities as we repeatedly reassign the value and type of <code>x</code> "on the fly":</p>
<pre><code>for x in [1, 1.0, "1", [1]]:
    print(x, type(x))
</code></pre>
<p>Output:</p>
<pre><code>1 &lt;class 'int'&gt;
1.0 &lt;class 'float'&gt;
1 &lt;class 'str'&gt;
[1] &lt;class 'list'&gt;
</code></pre>
<p>If you're wondering how Python can tell that <code>1</code> is an int and <code>1.0</code> is a float, that's obvious from the input string.  A language processor typically contains a tokenizer that can discriminate language tokens, and another module that interprets those tokens within the language syntax.  int and float objects have different token formats ... as do strings, punctuation, identifiers, and any other language elements.</p>
<p>If you want to learn more about that level of detail, research how to parse a computer language: most of the techniques are applicable to most languages.</p>
</div>
<div class="post-text" itemprop="text">
<p>As n.m. commented below your post, variables do not have a type in Python. Values do.</p>
<p>As far as how integer vs float is determined when you type the following:</p>
<pre><code>x = 1.5
y = 2
</code></pre>
<p>This is determined during the parsing stage. Compiled and interpreted languages actually start off in the same manner.</p>
<p>The general flow when code is sent to an interpreter/compiler is as follows:</p>
<pre><code>[source code] --&gt; lexical analyzer --&gt; [tokens] --&gt; parser --&gt; [abstract syntax tree] --&gt;
</code></pre>
<p>The parser step examines tokens like 'x' '=' '1.5' and looks for patterns which indicate different types of literals like ints, floats, and strings. By the time the actual interpreter/compiler gets the abstract syntax tree (tree representation of your program), it already knows that the value stored in x (1.5) is a float.</p>
<p>So just to be clear, this part of the process is conceptually the same for intepreters and compilers.</p>
</div>
<span class="comment-copy">Python variables don't have types. Python <i>values</i> have types. Each value has type information stored <i>as data</i> together with the value proper. Because type information is data, the interpreter can examine it it and select an appropriate operation.</span>
<span class="comment-copy">Further to @n.m.'s point, you'll note that <code>type("text")</code>, <code>type(123)</code>, and <code>type(1.23)</code> will return class <code>str</code>, <code>int</code> and <code>float</code> respectively.  The <i>values</i> you are assigning to a variable tells the interpreter what type your variable is gonna be.</span>
<span class="comment-copy">Python does not operate by choosing circuits.</span>
<span class="comment-copy">@user2357112: I suspect that the term "circuits" is an overshoot, perhaps from a language problem.</span>
<span class="comment-copy">The little question mark in the upper right hand corner of the text input box opens up some links to formatting help. I used the <code>code</code> format.</span>
