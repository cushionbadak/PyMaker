<div class="post-text" itemprop="text">
<p>I'm trying to code a little script that checks whether a file passed as a command line parameter is well or badly parenthesized.</p>
<p>I've created an exception to handle the functions stop point but can not seem to raise it properly.</p>
<p>When I test the code in a Python interpreter, it seems to work (ie it recognizes it should the raise the exception, but when I test my file with the sample files I have (that are badly parenthesized), it still prints out that it was successfully checked </p>
<p>Do you have any ideas ?</p>
<p>Best,</p>
<p>Code :</p>
<pre><code>import sys
from stack import *


class BracketException(Exception) :
    """
    Exception qui gère les problèmes de parenthesage : mauvaise parenthèse,
    mauvais placement etc...
    """

    def __init__(self, char, lineNumber, charNumber) :
        self.char = char
        self.lineNumber = lineNumber
        self.charNumber = charNumber

    def __str__(self) :
        return(self.char + " at line " + str(self.lineNumber) + " char " + str(self.charNumber))


def checker(file) :
    lineNumber = 1
    charNumber = 1

    stacked = Stack()
    openers = ["(", "[", "{"]
    closers = [")", "]", "}"]

    inChannel = open(file, "r")

    for line in file :
        for char in line :
            if char in openers :
                stacked.push([char, lineNumber, charNumber])
                print(stacked.top())
            elif char in closers :
                try :
                    if openers[closers.index(char)] == stacked.top()[0] :
                        stacked.pop()
                    else :
                        raise BracketException(char, lineNumber, charNumber)
                except StackEmptyError :
                    raise BracketException(char, lineNumber, charNumber)

            charNumber += 1
        charNumber = 1
        lineNumber += 1

    inChannel.close()

    if not stacked.is_empty() :
        raise BracketException(stacked.top()[i] for i in range(3))

def __main__() :

    try :
        fichier = sys.argv[1]
        checker(fichier)
        print("it's checked !")
    except BracketException as ex :
        print(ex)
    except IndexError :
        print("Wrong number of parameters")
    except Exception as e :
        print(e)

if __name__ == "__main__" :
    __main__()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are iterating over the given file name, not the created filehandle. File names probably have no unbalanced brackets in them, hence no exception.</p>
<blockquote>
<pre><code>def checker(file) :
    lineNumber = 1
    charNumber = 1

    stacked = Stack()
    openers = ["(", "[", "{"]
    closers = [")", "]", "}"]

    inChannel = open(file, "r")  # file handle is inChannel

    for line in file :  #  iterating over file name, not file handle
</code></pre>
</blockquote>
<p>You should switch to</p>
<pre><code>with open(file, "r") as inChannel:
    for line in inChannel :
</code></pre>
<p>to make sure to close the file even if you get exceptions thrown - its the prefered way of file handling, see <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs.python.org - reading and writing files</a></p>
<hr/>
<p>I am unable to test this (no stack module - if needed I use lists for that), but this should be faster:</p>
<pre><code>def checker(filename) :
    lineNumber = 1
    charNumber = 1

    stacked = Stack()

    openers = set( "{[(")  # sets are better suited for test of "in"
    closers = set( "}])")  # same

    # mapping between closing bracket at hand and what should be on the stack
    # also faster then .index()ing into a list
    open_for_close = { ")":"(","}":"{","]":"[" }

    with open(filename, "r") as f:
        for line in f:            # iterate over the filehandle 
            for char in line:
                if char in openers:
                    stacked.push([char, lineNumber, charNumber])
                    print(stacked.top())
                elif char in closers:
                    try :
                        if open_for_close[char] == stacked.top()[0] :
                            stacked.pop()
                        else :
                            raise BracketException(char, lineNumber, charNumber)
                    except StackEmptyError :
                        raise BracketException(char, lineNumber, charNumber)
                charNumber += 1
            charNumber = 1
            lineNumber += 1

    if not stacked.is_empty() :
        raise BracketException(stacked.top()[i] for i in range(3))
</code></pre>
</div>
<span class="comment-copy">Can you show one of your sample files that fails to produce an exception?</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem.   We should be able to paste your posted code into a text file and reproduce the problem you described.</span>
<span class="comment-copy">Thanks, this is really helpful !</span>
