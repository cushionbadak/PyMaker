<div class="post-text" itemprop="text">
<p>I have a best practice question relating to iterating over a JSON file in Python using try/except statements. </p>
<p>I have a JSON file that looks like this (vastly simplified for the question):</p>
<pre><code>"results": [
      {
       "listingId":"1"
       "address":"123 Main st"
       "landsize":"190 m2"
      },
      {
       "listingId":"2"
       "address":"345 North st"
       "state":"California"
      }
  ]
</code></pre>
<p>As I stated, this is super simplified, (in my actual problem there are about 30 key value pairs I am interested in, and thousands of records) The challenge is, that even though the keys are pretty consistent (it's always around the same 30), occasionally there will be a missing key/value pair. </p>
<p>If one or two or 10 are missing, I will want the rest of the record to be written out, so my approach at the moment is using a try/catch statement for each key value pair, which seems to strike me as a very inefficient way of checking this, and I am sure there is a better way.</p>
<p>My code looks (kind of) like this (which i am sure is not the best way to do this):</p>
<pre><code>for i in range(len(JSON_data["results"])):
   try:
      print "ListingID=" + JSON_data["results"][i]["listingId"]
   except KeyError:
      print "ListingID is unknown"

   try:
      print "Address=" + JSON_data["results"][i]["address"]
   except KeyError:
      print "Address is unknown"

   try:
      print "landsize=" + JSON_data["results"][i]["landsize"]
   except KeyError:
      print "landsize is unknown"

   try:
      print "state =" + JSON_data["results"][i]["state"]
   except KeyError:
      print "state is unknown"
</code></pre>
<p>Any advice appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code> method</a> to avoid having to catch an exception:</p>
<pre><code>listing_id = JSON_data["results"][i].get("listingId")
</code></pre>
<p>which returns <code>None</code> or a different default, passed in as the second argument. You can also check if the key is present first:</p>
<pre><code>if 'listingId' in JSON_data["results"][i]:
    # the key is present, do something with the value
</code></pre>
<p>Next, you want to <em>not use <code>range()</code> here</em>. You would be much better off looping directly over the <code>results</code> list, so you can directly refer to the dictionary without the whole <code>JSON_data["results"][i]</code> prefix each time:</p>
<pre><code>for nesteddict in JSON_data["results"]:
    if 'listingId' in nesteddict:
        listing_id = nesteddict['nesteddict']
</code></pre>
<p>Next, rather than hard-code all the keys you check, use a loop over a list of keys:</p>
<pre><code>expected_keys = ['listingId', 'address', 'landsize', ...]

for nesteddict in JSON_data["results"]:
    for key in expected_keys:
        if key not in nesteddict:
            print(key, 'is unknown')
        else:
            value = nesteddict[key]
            print('{} = {}'.format(key, value)
</code></pre>
<p>If you don't need to print that a key is missing, then you could also make use of <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer"><em>dictionary views</em></a>, which act as sets. Sets support intersection operations, so you could ask for the intersection between your expected keys and the available keys:</p>
<pre><code># note, using a set here now
expected_keys = {'listingId', 'address', 'landsize', ...}

for nesteddict in JSON_data["results"]:
    for key in nesteddict.keys() &amp; expected_keys:  # get the intersection
        # each key is guaranteed to be in nesteddict
        value = nesteddict[key]
        print('{} = {}'.format(
</code></pre>
<p>This <code>for</code> loop only ever deals with keys both in <code>nesteddict</code> <em>and</em> in <code>expected_keys</code>, nothing more.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could loop through the key names too - meaning you only have 1 try/except. Since it’s in a loop, it repeats the same code for each key, changing the key name each cycle.</p>
<pre><code>for i in range(len(JSON_data["results"])):
    for key in ('listingId', 'address', 'landsize', 'state'):
        try:
            print '{}: {}'.format(key, JSON_data["results"][i][key])
        except KeyError:
            print '{} is unknown'.format(key)
</code></pre>
<p>If I’m not mistaken, you could also make your code cleaner by iterating over the results directly:</p>
<pre><code>for result in JSON_data['results']:
    ...
</code></pre>
<p>And where you write <code>JSON_data['results'][i]</code>, change it to simply <code>result</code>. </p>
<p><em>Note: you mentioned your actual data is much more complex than this. It may make sense to either store the key names externally (or at least somewhere else) if there are many of them. You could create a file of key names and create a list of the names by doing...</em></p>
<pre><code>with open('key_names.txt', 'r') as f:
    key_names = [line.strip() for line in f]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the method I would use for iterating over a json object and listing out the values I want. Also please ensure that you're json objects are properly formatted before posting here.</p>
<pre><code>import json


def import_data():
    data = """
    {
"results": [
      {
       "listingId":"1",
       "address":"123 Main st",
       "landsize":"190 m2"
      },
      {
       "listingId":"2",
       "address":"345 North st",
       "state":"California"
      }
  ]
}
"""
    return data

def format_Data():
    data = import_data()
    data = json.loads(data)
    array = []
    print data
    for data_item in data['results']:
        for key, value in data_item.items():
            if key == 'listingId':
                listingId = value
                print ('ListingID= {}').format(listingId)
            elif key == 'address':
                address = value
                print ('Address= {}').format(address)
            elif key == 'landsize':
                landsize = value
                print ('Landsize= {}').format(landsize)
            elif key == 'state':
                state = value
                print ('State= {}').format(state)
</code></pre>
<p>Output:</p>
<pre><code>{u'results': [{u'landsize': u'190 m2', u'listingId': u'1', u'address': u'123 Main st'}, {u'state': u'California', u'listingId': u'2', u'address': u'345 North st'}]}
Landsize= 190 m2
ListingID= 1
Address= 123 Main st
State= California
ListingID= 2
Address= 345 North s
</code></pre>
<p>t</p>
</div>
<span class="comment-copy">Really seems like a good opportunity to put your list of keys into an actual Python list, then use a <code>for</code> loop to iterate over them. This reduces the code inside your example loop to about four lines, with only a single <code>try/except</code> block.</span>
<span class="comment-copy">Awesome answer, thanks. I have made your initial suggested changes, much cleaner (and probably faster/efficient)... will explore what you're suggesting with dictionary views... I am not at all familiar with these.</span>
<span class="comment-copy">(Also, followup question, using the expected_keys list, how do I cater for nested keys?)... I am sure I will figure it out, but just wondered if you had the solution.</span>
<span class="comment-copy">That'd usually require more tailored approaches; for a nested object perhaps use <code>if 'specifickey' in nesteddict:</code> then handle that specific nested object with a separate set of keys to expect.</span>
<span class="comment-copy">Thanks for the answer, @n-chauhan appreciate your concise response</span>
