<div class="post-text" itemprop="text">
<p>What I'm trying to create are a set of server and client scripts; the server script prompts a user for raw input, stores that input in a dictionary and converts it to json with the <code>json.dumps()</code> function. The converted dictionary is then stored in the <code>jasonFile</code> variable which is then sent to the client. The json dictionary is working but I'm struggling with the networking side of things.</p>
<p>Here is my server code:</p>
<pre><code>def Main():
host = '0.0.0.0'
port = 5000
s.bind((host, port))
s.listen(5)

print "Server Started"


while True:
    addr = s.accept()
    print "Client Connected from IP: " + str(addr)
    serverMessage = "Connection Established: Would you like to download the Json dictionary?"
    s.send(serverMessage)
    clientReply = s.recv(1024)
    if clientReply in ['Y', 'y', 'Yes', 'yes', 'YES']:
        s.send(jasonFile)
        s.close()
    else:
        print "Connection from " + addr + " closed!"
        s.send("Connection Error!")
        s.close()
</code></pre>
<p>And here is my client code:</p>
<pre><code>def Main():
    host = raw_input("Please enter the server IP you wish to connect to: ")
    port = 5000

    #define client to use socket module to connect via IPV4 and TCP only
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((host, port))

    serverMessage = client.recv(1024)
    print serverMessage

    clientReply = raw_input("Type 'Yes' To download dictionary")
    if clientReply in ['Y', 'Yes', 'y', 'yes', 'YES']:
            client.send(clientReply)
            jasonRecv = client.recv(1024)
            print jasonRecv
    else:
            client.close()
            print "Disconnected from server!"
</code></pre>
<p>I haven't gotten as far as converting the json data back to a string on the client yet because the server throws me an error when the client tries to connect.</p>
<p>The error message I get from IDLE is:</p>
<pre><code>Server Started
Client Connected from IP: (&lt;socket._socketobject object at 0x000000000401E048&gt;, ('127.0.0.1', 34375))

Traceback (most recent call last): File "D:/Server.py", line 105, in &lt;module&gt;
Main()

File "D:/Server.py", line 94, in Main
s.send(serverMessage)

error: [Errno 10057] A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied
</code></pre>
<p>I thought I was defining the address to send data to in the <code>addr</code> variable, but apparently not?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>conn, addr = s.accept()
...
conn.send(serverMessage)
</code></pre>
<p>i.e. replace <code>s.</code> calls with <code>conn.</code> which represents the accepted socket connection from the client.</p>
<p>From the <a href="https://docs.python.org/3.7/library/socket.html" rel="nofollow noreferrer">Python socket API</a>:</p>
<blockquote>
<p>socket.accept()</p>
<p>Accept a connection. The socket must be bound to an address and listening for connections. 
  The return value is a pair (conn, address) where conn is a new socket
  object usable to send and receive data on the connection, and address
  is the address bound to the socket on the other end of the connection.</p>
</blockquote>
<p>Examples are provided at the end of the page.</p>
<p>Also see the <a href="https://docs.python.org/3/howto/sockets.html" rel="nofollow noreferrer">Python Socket Programming Howto</a></p>
</div>
<span class="comment-copy">This worked great! Thanks very much! Any chance you can give me a bit of an explanation as to why s.accept() needs the two variables? Or point me in the direction of a good book where I can learn more? =D</span>
<span class="comment-copy">I've expanded on the answer. There's plenty of tutorials available. Just google python server socket example</span>
