<div class="post-text" itemprop="text">
<pre><code>list = [
    {'a': 'a_first', 'b': 'b_first'},
    {'a': 'a_sec', 'b': 'b_sec'},
    {'a': 'a_third', 'b': 'b_third'}
]
</code></pre>
<p>I want to know value <code>'b_sec'</code> is in list's key <code>'b'</code>.</p>
<p>Example:</p>
<pre><code>if 'b_sec' is in list's value of 'b':
    print('found')
</code></pre>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>, Python's built-in function to check if a condition holds for, well, <code>any</code> out of many. <code>any</code> breaks early and avoids spurious iterations once the first truthy element is encountered:</p>
<pre><code>if any(d.get('b') == 'b_sec' for d in lst):  # do not use 'list' as a name
    # do stuff
</code></pre>
<p>Using <code>d.get('b')</code> instead of <code>d['b']</code> is more robust as it won't raise an error if <code>'b'</code> is not in one of the dicts. Note, that if by any chance, the value you are looking for were <code>None</code>, you would have to provide a different default value to <code>get</code>, e.g. <code>d.get('b', '')</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; 'b_sec' in [d['b'] for d in list]
True
&gt;&gt;&gt; 'b_fourth' in [d['b'] for d in list]
False
</code></pre>
</div>
<span class="comment-copy">using <code>get</code> without a fallback value kinda defeats the purpose, doesn't it?</span>
<span class="comment-copy">@Ev.Kounis That makes <code>None</code> the implicit fallback, which is fine since <code>None != 'b_sec'</code></span>
<span class="comment-copy">Thank you, it helped me</span>
