<div class="post-text" itemprop="text">
<p>I am looking for the most efficient way to update a list.</p>
<p>I have a variable <code>self.myGlobalList = []</code></p>
<p>I also have a recursive function that on each one of its calls is going to generate a new list with coordinates. </p>
<p>Say in the first iteration, I obtain the following list:</p>
<pre><code>[(1,1), (21,22), (84,6)]
</code></pre>
<p>Since <code>self.myGlobalList</code> does not contain any of those coordinates, I will append them to it:</p>
<pre><code>for elem in generatedList:
   if elem not in self.myGlobalList:
      self.myGlobalList.append(elem);
</code></pre>
<p>Then, on the second iteration I obtain a new generated list:</p>
<pre><code>[(1,1), (21,22), (9,18), (71, 89), (13, 21)]
</code></pre>
<p>Now my code will again go through each element of the newly generated list and check if any are missing from <code>self.myGlobalList</code>, and if yes, append them.  The result should contain the new elements:</p>
<pre><code>[(1,1), (21,22), (84,6), (9,18), (71, 89), (13, 21)]
</code></pre>
<p>So far so good, everything works fine. </p>
<p>However, my lists can contain more than 500 000+ coordinates. In terms of efficiency, will this method be sufficient, and are there any suggestions you could offer in order to optimise it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Make each <code>generated_list</code> into a set, and then just keep performing <code>union</code> on the set.  The repeated code should go into a loop.</p>
<pre><code>myGlobal = set()

generated_list = [(1,1), (21,22), (84,6)]
myGlobal = myGlobal.union(set(generated_list))
print(myGlobal)

generated_list = [(1,1), (21,22), (9,18), (71, 89), (13, 21)]
myGlobal = myGlobal.union(set(generated_list))
print(myGlobal)
</code></pre>
<p>Output:</p>
<pre><code>{(21, 22), (1, 1), (84, 6)}
{(21, 22), (71, 89), (84, 6), (9, 18), (1, 1), (13, 21)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For instance you could do something like this (<em>toy example</em>):</p>
<pre><code>iterations = [
    [(1, 1), (21, 22), (84, 6)], [(1, 1), (21, 22), (9, 18), (71, 89), (13, 21)]]

global_set = set()
global_list = []
for iteration in iterations:
    for pair in iteration:
        if pair not in global_set:
            global_list.append(pair)
            global_set.add(pair)

print(global_list)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[(1, 1), (21, 22), (84, 6), (9, 18), (71, 89), (13, 21)]
</code></pre>
<p><strong>Explanation</strong> </p>
<p>The expression <code>if pair not in global_set</code> is <code>O(1)</code> (that is it takes constant time to check if an element is present), in the other hand <code>if pair not in global_list</code> would take <code>O(n)</code> to check if an element is present.</p>
<p><strong>Further</strong></p>
<ol>
<li>Python <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a>.</li>
<li><a href="https://stackoverflow.com/questions/2831212/python-sets-vs-lists/17945009#17945009">List vs Set</a></li>
</ol>
</div>
<span class="comment-copy">You could use a set</span>
<span class="comment-copy">You <i>should</i> use a set, unless the order of points is important.</span>
<span class="comment-copy">@Chris_Rands:  No -- legacy of the production code from which I adapted this.  I updated the code; thanks.</span>
<span class="comment-copy">this worked like a charm. Thank you.</span>
