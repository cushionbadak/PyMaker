<div class="post-text" itemprop="text">
<p>Is there any built-in methods that are part of lists that would give me the first and last index of some value, like:</p>
<pre><code>verts.IndexOf(12.345)
verts.LastIndexOf(12.345)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sequences have a method <code>index(value)</code> which returns index of first occurrence - in your case this would be <code>verts.index(value)</code>. </p>
<p>You can run it on <code>verts[::-1]</code> to find out the last index. Here, this would be <code>len(verts) - 1 - verts[::-1].index(value)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>i1 = yourlist.index(yourvalue)</code> and <code>i2 = yourlist.rindex(yourvalue).</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>If you are searching for the index of the last occurrence of <code>myvalue</code> in <code>mylist</code>:</p>
<pre><code>len(mylist) - mylist[::-1].index(myvalue) - 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a small helper function:</p>
<pre><code>def rindex(mylist, myvalue):
    return len(mylist) - mylist[::-1].index(myvalue) - 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This method can be more optimized than above</p>
<pre class="lang-python prettyprint-override"><code>def rindex(iterable, value):
    try:
        return len(iterable) - next(i for i, val in enumerate(reversed(iterable)) if val == value) - 1
    except StopIteration:
        raise ValueError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python lists have the <a href="https://docs.python.org/3.7/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer"><code>index()</code></a> method, which you can use to find the position of the <em>first</em> occurrence of an item in the list. Note that <code>list.index()</code> raises <code>ValueError</code> when the value is not found in the list, so you may want to wrap it in <code>try</code>/<code>except</code>:</p>
<pre><code>def index(lst, value):
    try:
        return lst.index(value)
    except ValueError:
        return None

print(index([1, 2, 3], 2))  # 1
print(index([1, 2, 3], 4))  # None
</code></pre>
<p>To find the position of the <em>last</em> occurrence of an item in the list in an efficient way you can use this function:</p>
<pre><code>def rindex(lst, value):
    for i, v in enumerate(reversed(lst)):
        if v == value:
            return len(lst) - i - 1  # return the index in the original list
    return None    

print(rindex([1, 2, 3], 3))     # 2
print(rindex([3, 2, 1, 3], 3))  # 3
print(rindex([3, 2, 1, 3], 4))  # None
</code></pre>
</div>
<span class="comment-copy">Maybe you should read up on lists in the Python docs: <a href="http://docs.python.org/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">docs.python.org/library/stdtypes.html#mutable-sequence-types</a>. I think that will be a lot faster than asking lots of questions.</span>
<span class="comment-copy">I am reading them too, but knowing nothing about python makes things harder. I find its syntax very cryptic.</span>
<span class="comment-copy">If your lists are sorted, then you might want to check out the bisect module &lt;<a href="http://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">docs.python.org/3/library/bisect.html</a>&gt;.</span>
<span class="comment-copy">See the brilliant answer by Dikei here using the built-in functions enumerate and reversed: <a href="http://stackoverflow.com/questions/9836425/equivelant-to-rindex-for-lists-in-python" title="equivelant to rindex for lists in python">stackoverflow.com/questions/9836425/â€¦</a></span>
<span class="comment-copy">Thanks, how do you perform list[::-1]?  verts[::-1]?</span>
<span class="comment-copy">yep, i've edited the answer</span>
<span class="comment-copy">Btw verts[::-1] just reverses the list, right? So I have to compensate for the index, right?</span>
<span class="comment-copy">sure, it'll be: len(verts) - 1 - verts[::-1].index(value)</span>
<span class="comment-copy">Python <i>strings</i> have <code>rindex</code>, but lists don't.</span>
<span class="comment-copy">Sorry, you are right. I forgot that lists don't have rindex. You need to reverse the list.</span>
<span class="comment-copy">True, but 'rindex' is what a lot of readers are looking for ...</span>
<span class="comment-copy">This will throw a <code>ValueError</code> if <code>myvalue</code> is not present in <code>mylist</code>.</span>
<span class="comment-copy">"Optimized" in the sense of being more space-efficient, but it's about 50% slower.</span>
