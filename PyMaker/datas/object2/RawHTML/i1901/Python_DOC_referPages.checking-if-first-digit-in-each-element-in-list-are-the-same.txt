<div class="post-text" itemprop="text">
<p>How would I check if the first digits in each element in a list are the same? </p>
<pre><code>for i in range(0,len(lst)-1):
     if lst[i] == lst[i+1]:
          return True
</code></pre>
<p>I know that this checks for if the number before is equal to the next number in the list, but I just want to focus on the first digit.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>math.log10</code> and floor division to calculate the first digit. Then use <code>all</code> with a generator expression and <code>zip</code> to test adjacent elements sequentially:</p>
<pre><code>from math import log10

def get_first(x):
    return x // 10**int(log10(x))

L = [12341, 1765, 1342534, 176845, 1]

res = all(get_first(i) == get_first(j) for i, j in zip(L, L[1:]))  # True
</code></pre>
<p>For an explanation of how this construct works, see <a href="https://stackoverflow.com/a/48869036/9209546">this related answer</a>. You can apply the same logic via a regular <code>for</code> loop:</p>
<pre><code>def check_first(L):
    for i, j in zip(L, L[1:]):
        if get_first(i) != get_first(j):
            return False
    return True

res = check_first(L)  # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> as a generator for the first character(s) of your numbers:</p>
<pre><code>&gt;&gt;&gt; l = [1, 10, 123]
&gt;&gt;&gt; all(str(x)[0] == str(l[0])[0] for x in l)
True
</code></pre>
<p>The list comprehension</p>
<pre><code>&gt;&gt;&gt; [str(x)[0] for x in l]
</code></pre>
<p>creates a list</p>
<pre><code>['1', '1', '1']
</code></pre>
<p>which sounds as if this should be enough. But <code>all</code> processes <em>boolean</em> values, and the boolean value of a string is always <code>True</code>, except when the string is empty. That means that it would also consider <code>['1','2','3']</code> to be <code>True</code>. You need to add a comparison against a constant value -- I picked the first item from the original list:</p>
<pre><code>&gt;&gt;&gt; [str(x)[0] == str(l[0])[0] for x in l]
[True, True, True]
</code></pre>
<p>whereas a list such as <code>[1,20,333]</code> would show</p>
<pre><code>['1', '2', '3']
</code></pre>
<p>and</p>
<pre><code>[True, False, False]
</code></pre>
<p>You can adjust it for a larger numbers of digits as well:</p>
<pre><code>&gt;&gt;&gt; all(str(x)[:2] == str(l[0])[:2] for x in l)
False
&gt;&gt;&gt; l = [12,123,1234]
&gt;&gt;&gt; all(str(x)[:2] == str(l[0])[:2] for x in l)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>lst = [12, 13, 14]


def all_equals(l):
    return len(set(e[0] for e in  map(str, l))) == 1

print all_equals(lst)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>True
</code></pre>
<p><strong>Explanation</strong></p>
<p>The function <code>map(str, l)</code> converts all elements in the list to string then with <code>(e[0] for e in map(str, l))</code> get the first digit of all the elements using a generator expression. Finally feed  the generator into the set function this will remove all duplicates, finally you have to check if the length of the set is 1, meaning that all elements were duplicates.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a boolean predicate on a list like this, you want a solution that returns <code>False</code> as soon as a conflict is found -- solutions that convert the <em>entire</em> list just to find the first and second item didn't match aren't good algorithms.  Here's one approach:</p>
<pre><code>def all_same_first(a):
    return not a or all(map(lambda b, c=str(a[0])[0]: str(b)[0] == c, a[1:]))
</code></pre>
<p>Although at first glance this might appear to violate what I said above, the <code>map</code> function is lazy and so only hands the <code>all</code> function what it needs as it needs it, so as soon as some element doesn't match the first (initial-digit-wise) the boolean result is returned and the rest of the list isn't processed.</p>
<p>Going back to your original code:</p>
<blockquote>
<p>this checks for if the number before is equal to the next
  number in the list</p>
</blockquote>
<pre><code>for i in range(0,len(lst)-1):
     if lst[i] == lst[i+1]:
          return True
</code></pre>
<p>This doesn't work, as you claim.  To work properly, it would need to do:</p>
<pre><code>for i in range(0, len(lst) - 1):
     if lst[i] != lst[i + 1]:
          return False

return True
</code></pre>
<p>Do you see the difference?</p>
</div>
<span class="comment-copy">How many digits you need to check?</span>
<span class="comment-copy">1, the first digit in each element in a list</span>
<span class="comment-copy">By calling the argment to <code>all()</code> a <i>list comprehension</i>, you are underselling (and misexplaining) this solution.  If it were a list comprehension, this would be a bad solution as it would process an entire list and then pass it on, as your explanation says.  But it's a <i>generator</i> expression and, combined with <code>all</code>, has the nice property that it will return as soon as it encounters a mismatch, if any, rather than continue to process the entire list.  Though you might consider <code>for x in l[1:]</code> to avoid one unnecessary comparison.</span>
<span class="comment-copy">My concern with a solution like this is if we have a thousand element list, but the first two elements are <code>[1, 2, ...]</code> it'll still process all one thousand elements into strings and extract th first digit to decide the result.  An efficient solution should return <code>False</code> on the first conflict and ignore what hasn't been seen yet.</span>
