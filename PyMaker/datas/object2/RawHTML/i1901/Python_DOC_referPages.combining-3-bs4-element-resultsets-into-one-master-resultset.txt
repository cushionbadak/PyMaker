<div class="post-text" itemprop="text">
<p>I am writing a Python script to scrape the top 100 games from metacritic.com. </p>
<p>I used the bs4 findAll() to create a ResultSet for the list of elements with {"class":"product_row game"}.</p>
<p>When I checked len(prods) it returned "98". Upon inspection I noticed that the first and last elements on the list have {"class":"product_row game first"}  and {"class":"product_row game last"} respectively. </p>
<p>My plan was to create 3 separate ResultSet's and combine them, but I cannot find the resources online to do this. Is it feasible/smart to do it this was? If so, a pointer would be appreciated. If not, how should I change my approach?</p>
<p>Thanks in advance,
Gavin :)</p>
<pre><code>from urllib.request import Request, urlopen
from bs4 import BeautifulSoup as soup

url = 'https://www.metacritic.com/browse/games/score/metascore/all/all/filtered?sort=desc'

req = Request(url, headers={'User-Agent': 'Mozilla/5.0'})

web_byte = urlopen(req).read()
webpage = web_byte.decode('utf-8')
urlopen(req).close()

page_soup = soup(webpage, "html.parser")

prod_f = page_soup.findAll("div", {"class":"product_row game first"})
prods = page_soup.findAll("div", {"class":"product_row game"})
prod_l = page_soup.findAll("div", {"class":"product_row game last"})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can combine them all into one ResultSet by adding one line:  </p>
<pre><code>prods.extend([prod_f, prod_l])
</code></pre>
<p>If you run <code>print(len(prods))</code>, it now has all 100 items</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am writing a Python script to scrape the top 100 games from
  metacritic.com.</p>
</blockquote>
<pre><code>divs = page_soup.find_all('div',{'class':'product_rows'})
temp_df = pd.DataFrame(columns=['A','B','C','D','E'])

pos = 0
for row in divs[0].find_all('div',{'class':'product_row'}):
    data = []
    for item in row.find_all('div',{'class':'product_item'}):
        clean_data = item.text.strip() 
        clean_data = clean_data.replace('\n',' ')
        data.append(clean_data)
    temp_df.loc[pos] = data  
    pos+=1

print(temp_df.head())
</code></pre>
<p>Output</p>
<pre><code>       A   B                                                  C          D  \
0  1.  99  The Legend of Zelda: Ocarina of Time          ...  User: 9.1   
1  2.  98  Tony Hawk's Pro Skater 2                      ...  User: 7.4   
2  3.  98  Grand Theft Auto IV                           ...  User: 7.5   
3  4.  98  Red Dead Redemption 2                         ...  User: tbd   
4  5.  98  SoulCalibur                                   ...  User: 8.7   

              E  
0  Nov 23, 1998  
1  Sep 20, 2000  
2  Apr 29, 2008  
3  Oct 26, 2018  
4   Sep 8, 1999
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do not mention why you want to combine the three. But if you want to iterate through all the elements, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>import itertools

node_iterator = itertools.chain([prod_f], prods, [prod_l])
for node in node_iterator:
    do_whatever_with(node)
</code></pre>
<p>Note that <code>find()</code> returns a <code>Tag</code> object, while <code>findAll()</code> returns a <code>ResultSet</code> object that can be iterated over to yield <code>Tag</code> objects. Since <code>itertools.chain</code> expects all arguments to be iterables, I create a list of <code>Tag</code> objects using <code>[prod_f]</code>/<code>[prod_l]</code> in the code example above.</p>
</div>
<div class="post-text" itemprop="text">
<p>If what you are after is simply "get all divs that has class product_row and class game", then using a CSS selector is likely the best approach:</p>
<pre><code>prods = page_soup.select('div.product_row.game')
</code></pre>
<p>Documentation links:</p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class" rel="nofollow noreferrer">https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class</a></li>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors" rel="nofollow noreferrer">https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors</a></li>
</ul>
</div>
<span class="comment-copy">why do you want to create three different Results sets.. since all the data points can be obtained with a simple findAll with class name "product_row"</span>
<span class="comment-copy">@SarthakNegi is it possible to do this? I thought that the class would have to match up perfectly in order for the findAll() to work. How would I write the finaAll() to include all three so?</span>
<span class="comment-copy">Sorted . thanks all :)</span>
<span class="comment-copy">I tried this, but it didn't work len(prods) is 98, but after the appends it becomes 3; not 100</span>
<span class="comment-copy">Sick! thanks a million. Was grinding all day on this. TY!</span>
<span class="comment-copy">clean_data = clean_data.replace('\n',' ')  Brilliant touch. cheers</span>
<span class="comment-copy">Good points on the find() and pointing out that I did not provide a reason - sorry about that. I was to keep them in a bs4 object so I can loop through them and write the titles , scores and release dates to a csv</span>
<span class="comment-copy">OK I see. So given the example code above you can do exactly that.</span>
