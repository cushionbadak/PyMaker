<div class="post-text" itemprop="text">
<p>I have a number.</p>
<p>num = 5</p>
<p>I want to create a pattern of  question marks i.e <strong>'(?,?,?,....n times)'</strong> where n is the number.</p>
<p>in this case the output should be string containing <strong>5</strong>  Question marks seperated by comma.</p>
<pre><code>(?,?,?,?,?)    #dtype str
</code></pre>
<p>I tried it using the below method:</p>
<pre><code>q = '?'
q2 = '('+q
num = 5

for i in range(num-1):
    q2 += ','+q
q3 = q2+')'
print(q3)
&gt;&gt;&gt; (?,?,?,?,?) 
</code></pre>
<p>But it seems very lengthy and naive, is there any pythonic way of doing it? preferably a one liner?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>s = '({})'.format(','.join('?' for _ in range(5)))
print(s)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>(?,?,?,?,?)
</code></pre>
<p>Or:</p>
<pre><code>s = '({})'.format(','.join('?' * 5))
</code></pre>
<p><strong>Explanation</strong> </p>
<ol>
<li>The first approach creates a generator using <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a> them using <code>','</code> finally it surrounds them with parenthesis using the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">format</a> method.</li>
<li>The second approach is a variation of the first, instead of using a generator expression it creates a string of 5 <code>'?'</code> (i.e. <code>'?????'</code>), as strings are iterables you can use them in join.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can try:</p>
<pre><code>&gt;&gt;&gt; '('+','.join(num*["?"])+')'
'(?,?,?,?,?)'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here you go</p>
<pre><code>'(' + ','.join('?'*num) + ')'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print(f"({','.join(['?'] * n)})")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would assemble the string using f-string syntax, as it allows to use a higher level abstraction after the more basic logic is sorted out:</p>
<pre><code>q = '?'
n = 5
s = ",".join(q*n)  # You get a string without parenthesis: '?,?,?,?,?'
print(f'({s})') # Here you are adding the parenthesis
</code></pre>
<p>There are several ways to do it. In the end, it all comes to readability and, sometimes, performance. Both F-strings and <code>.join()</code> tend to be efficient ways to build strings.</p>
<p>You cam merge it into a one-liner if you want it:</p>
<pre><code>q = '?'
n = 5
print(f'({",".join(q*n)})')
</code></pre>
</div>
<span class="comment-copy"><code>q3 = num * ('?',)</code></span>
<span class="comment-copy">An appeal to all the people who answered below: while responding quickly with an answer is good, just providing a single line of code without explaining or documenting it is a bad practice. The answers here will be read by visitors of this question for years to come. Undocumented solutions doesn't help much if they can't be extended to similar and more complicated problems.</span>
<span class="comment-copy">Giving a solution without explaining or documenting it is not a good approach. Try explaining your solution.</span>
<span class="comment-copy">Giving a solution without explaining or documenting it is not a good approach.</span>
