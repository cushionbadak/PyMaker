<div class="post-text" itemprop="text">
<p>I was debugging my debug module, and I rely on a try ... catch to detect TypeError and format correctly log my message, then, I noticed that when dictionaries are passed, Python does not raise the traditional exception.</p>
<pre><code>&gt;&gt;&gt; 'var' % {1: 'variable'}
'var'
&gt;&gt;&gt; 'var' % (1,)
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
</code></pre>
<p>This is a minimal example with the logging module:</p>
<pre><code>import logging

class SmartLogRecord(logging.LogRecord):

    def _getMessage(self, remaining_arguments):

        try:

            if self.args:
                remaining_arguments.append( self.msg % self.args )

            else:
                remaining_arguments.append( self.msg )

            return False

        except TypeError as error:
            last = self.args[-1]
            self.args = self.args[:-1]
            remaining_arguments.append( str( last ) )

            if len( self.args ):
                return True

            else:
                remaining_arguments.append( self.msg )
                return False

    def getMessage(self):
        """
        Return the message for this LogRecord.

        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        """
        remaining_arguments = []
        self.msg = str( self.msg )

        while self._getMessage( remaining_arguments ): pass
        return " ".join( reversed( remaining_arguments ) )

logging.setLogRecordFactory(SmartLogRecord)

var = 'SmartLogRecord'
logging.warn('I am a', var)

dumb = {1: 'variable'}
logging.warn('I am a', dumb)
</code></pre>
<p>Running it you get:</p>
<pre><code>WARNING:root:I am a SmartLogRecord
WARNING:root:I am a
</code></pre>
<p>As you can notice, the last <code>dumb</code> message was lost.</p>
<hr/>
<p>As a work around for this problem I come up with the following solution:</p>
<pre><code>import logging

class SmartLogRecord(logging.LogRecord):

    def _getMessage(self, remaining_arguments):

        try:
            args = self.args

            if args:

                if isinstance( args, dict ):
                    new_msg = self.msg % args

                    if new_msg == self.msg:
                        remaining_arguments.append( str( args ) )
                        remaining_arguments.append( new_msg )

                    else:
                        remaining_arguments.append( new_msg )

                else:
                    remaining_arguments.append( self.msg % args )

            else:
                remaining_arguments.append( self.msg )

            return False

        except TypeError as error:
            self.args = args[:-1]
            remaining_arguments.append( str( args[-1] ) )

            if len( args ) - 1 &gt; 0:
                return True

            else:
                remaining_arguments.append( self.msg )
                return False

    def getMessage(self):
        """
        Return the message for this LogRecord.

        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        """
        remaining_arguments = []
        self.msg = str( self.msg )

        while self._getMessage( remaining_arguments ): pass
        return " ".join( reversed( remaining_arguments ) )

logging.setLogRecordFactory(SmartLogRecord)

var = 'SmartLogRecord'
logging.warn('I am a', var)

dumb = {1: 'variable'}
logging.warn('I am a', dumb)
</code></pre>
<p>Which runs correctly: </p>
<pre><code>WARNING:root:I am a SmartLogRecord
WARNING:root:I am a {1: 'variable'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the observed behaviour is in line with <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer">docs</a>.</p>
<blockquote>
<p>If format requires a single argument, values may be a single non-tuple
  object. [5] Otherwise, values must be a tuple with exactly the number
  of items specified by the format string, or a single mapping object
  (for example, a dictionary).</p>
</blockquote>
<p>Note [5]:</p>
<blockquote>
<p>To format only a tuple you should therefore provide a singleton tuple
  whose only element is the tuple to be formatted.</p>
</blockquote>
<p>This explains that a tuple is accepted only if it exactly matches format string requirements. A tuple with one item which itself is not a tuple cannot possibly match any format string and always raise an exception.</p>
<p>It also explains that a dict is always accepted as a type, but may produce other errors.</p>
<hr/>
<p>And just for the case I'm wrong, there is a catch-all possibility that you have just discovere another "quirk". They warn explicitly:</p>
<blockquote>
<p>The formatting operations described here exhibit a variety of quirks
  that lead to a number of common errors (such as failing to display
  tuples and dictionaries correctly). Using the newer formatted string
  literals or the str.format() interface helps avoid these errors.</p>
</blockquote>
</div>
<span class="comment-copy">OT: Do you really want to introduce a spelling error into your module to save two characters for the name of your variable? <code>remaing</code> really hurts my eyes and it is bad practice too.</span>
<span class="comment-copy">I just had misspelled the name and did not noticed.</span>
