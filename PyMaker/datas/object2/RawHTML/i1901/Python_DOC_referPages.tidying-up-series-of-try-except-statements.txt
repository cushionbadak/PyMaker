<div class="post-text" itemprop="text">
<p>I've written a script to pipe through data from the Kustomer API to our database, and although it works fine its a bit messy, was wondering if there's a more elegant solution to this. I'm defining the row of results im pushing through as a dictionary then pushing to MySQL, but the messy part comes when some of these values aren't available in the JSON all the time.</p>
<p>This has resulted in a try / except statements for each data point that may or may not be missing. </p>
<p>Is there a better way of doing this? Code below. </p>
<pre><code>    try:
        record_data = {
            'id': record['id'],
            'created_at': str(datetime.strptime(record['attributes']['createdAt'], '%Y-%m-%dT%H:%M:%S.%fZ'))[:-7],
            'last_activity_at': str(datetime.strptime(record['attributes']['lastActivityAt'], '%Y-%m-%dT%H:%M:%S.%fZ'))[:-7],
            'first_marked_done': None,
            'last_marked_done': None,
            'assigned_team': record['attributes']['assignedTeams'][0] if record['attributes']['assignedTeams'] != [] else None,
            'conversation_type': None,
            'conversation_category': None,
            'conversation_subcategory': None,
            'message_count': record['attributes']['messageCount'],
            'note_count': record['attributes']['noteCount'],
            'satisfaction': record['attributes']['satisfaction'],
            'status': None,
            'email': 1 if len(list(filter(lambda x: x == 'email', record['attributes']['channels']))) &gt; 0 else 0,
            'chat': 1 if len(list(filter(lambda x: x == 'chat', record['attributes']['channels']))) &gt; 0 else 0,
            'priority': record['attributes']['priority'],
            'direction': 'outbound' if record['attributes']['direction'] == 'out' else 'in',
            'nlp_score': None,
            'nlp_sentiment': None,
            'waiting_for': None,
            'sla_breach': None,
            'sla_status': None,
            'breached_sla': None,
            'breached_at': None
        }
        try:
            record_data['status'] = record['attributes']['status']
        except KeyError:
            pass
        try:
            record_data['conversation_type'] = record['attributes']['custom']['typeStr']
            record_data['conversation_category'] = str(record['attributes']['custom']['categoryTree']).split('.')[0]
            record_data['conversation_subcategory'] = str(record['attributes']['custom']['categoryTree']).split('.')[1] if len(str(record['attributes']['custom']['categoryTree']).split('.')) &gt; 1 else None
        except KeyError:
            pass
        try:
            record_data['waiting_for'] = record['attributes']['custom']['typeStr']
        except KeyError:
            pass
        try:
            record_data['first_marked_done'] = str(datetime.strptime(record['attributes']['firstDone']['createdAt'], '%Y-%m-%dT%H:%M:%S.%fZ'))[:-7]
            record_data['last_marked_done'] = str(datetime.strptime(record['attributes']['lastDone']['createdAt'], '%Y-%m-%dT%H:%M:%S.%fZ'))[:-7]

        except KeyError:
            pass
        try:
            record_data['sla_breach'] = 0 if record['attributes']['sla']['breached'] is False else 1
            record_data['sla_status'] = record['attributes']['sla']['status']
            if record_data['sla_breach'] == 1:
                try:
                    record_data['breached_sla'] = record['attributes']['sla']['breach']['metric']
                    record_data['breached_at'] = record['attributes']['sla']['breach']['at']
                except KeyError:
                    for m in record['attributes']['sla']['metrics']:
                        try:
                            if record['attributes']['sla']['metrics'][m]['breachAt'] == record['attributes']['sla']['summary']['firstBreachAt']:
                                record_data['breached_sla'] = m
                                record_data['breached_at'] = str(datetime.strptime(record['attributes']['sla']['summary']['firstBreachAt'], '%Y-%m-%dT%H:%M:%S.%fZ'))[:-7]
                        except KeyError:
                            pass
        except KeyError:
            record_data['sla_breach'] = 0
        print(record_data)
        self.db.insert_update(KustomerConversations(**record_data))

    except KeyError:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you should try, where possible, to use <code>dict.get</code> with a default value specified. Next you can consider <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer"><code>contextmanager</code></a> to make your code significantly cleaner. Consider this:</p>
<pre><code>try:
    record_data['status'] = record['attributes']['status']
except KeyError:
    pass
try:
    record_data['conversation_type'] = record['attributes']['custom']['typeStr']
except KeyError:
    pass
try:
    record_data['waiting_for'] = record['attributes']['custom']['typeStr']
except KeyError:
    pass
try:
    record_data['first_marked_done'] = record['attributes']['firstDone']['createdAt']
except KeyError:
    pass
</code></pre>
<p>Now rewritten, you can ensure <em>consistent</em> error handling without repeating logic:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def error_handling():
    try:
        yield
    except KeyError:
        pass

with error_handling():
    record_data['status'] = record['attributes']['status']
with error_handling():
    record_data['conversation_type'] = record['attributes']['custom']['typeStr']
with error_handling():
    record_data['waiting_for'] = record['attributes']['custom']['typeStr']
with error_handling():
    record_data['first_marked_done'] = record['attributes']['firstDone']['createdAt']
</code></pre>
<p>You can define an arbitrary number of functions like <code>error_handling</code> for various rules you wish to apply.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use function, that give you element from nested dicts, and doesn't raise an exception, if it doesnt' exists.</p>
<p>Like this quick draft:</p>
<pre><code>def get_nested_dict_value(src_dict, *nested_keys, **kwargs):
    """
    Get value of some nested dict by series of keys with default value.
    Example:
    instead of: 
        x = data['a']['b']['c']['d']
    use
        x = get_nested_dict_value(data, 'a', 'b', 'c', 'd')
    or, if you need some non-None default value, add default=xxx kwarg:
        x = get_nested_dict_value(data, 'a', 'b', 'c', 'd', default=0)
    """
    default = kwargs.get("default", None)
    pointer = src_dict
    i = 0
    for key in nested_keys:
        i += 1
        if key in pointer:
            pointer = pointer[key]
            if i == len(nested_keys):
                return pointer
        else:
            return default
</code></pre>
<p>So, instead of:</p>
<pre><code>try:    
    record_data['conversation_type'] = record['attributes']['custom']['typeStr']
except Exception:
    pass
</code></pre>
<p>You just type:</p>
<pre><code>record_data['conversation_type'] = get_nested_dict_value(record, 'attributes', 'custom', 'typeStr')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The different naming conventions on the input and output sides make it hard to beat the clarity of explicit assignments.  Preserving the <strong>exact semantics</strong> of your version (<em>e.g.</em>, that it doesn't assign <code>conversation_category</code> in the absence of a <code>typeStr</code> even if <code>categoryTree</code> is available) excludes certain choices (like making a data structure to loop over with a <code>try</code>/<code>except</code> on <em>each</em> access); you might be able to do better with more assumptions about your input data.</p>
<p>Nonetheless, in addition to the <code>dict.get</code> <a href="https://stackoverflow.com/questions/53006095/tidying-up-series-of-try-except-statements#comment92916047_53006095">already</a> <a href="https://stackoverflow.com/a/53006381/8586227">mentioned</a>, you can use builtins (<code>any</code>, <code>or</code>, and <code>dict</code>) and introduce a helper function and a few temporary variables to make the code much more readable:</p>
<pre><code># this gives one digit of the hour for me...?
def ptime(s): return str(datetime.strptime(s,'%Y-%m-%dT%H:%M:%S.%fZ'))[:-7]

try:
    attr=record['attributes']
    cust=attr.get('custom',{})  # defer KeyErrors into the below
    record_data = dict(
        id = record['id'],
        created_at = ptime(attr['createdAt']),
        last_activity_at = ptime(attr['lastActivityAt']),
        first_marked_done = None,
        last_marked_done = None,
        assigned_team = attr['assignedTeams'][0] or None,
        conversation_type = None,
        conversation_category = None,
        conversation_subcategory = None,
        message_count = attr['messageCount'],
        note_count = attr['noteCount'],
        satisfaction = attr['satisfaction'],
        status = attr.get('status'),
        email = int(any(x == 'email' for x in attr['channels'])),
        chat = int(any(x == 'chat' for x in attr['channels'])),
        priority = attr['priority'],
        direction = 'outbound' if attr['direction'] == 'out' else 'in',
        nlp_score = None,
        nlp_sentiment = None,
        waiting_for = cust.get('typeStr'),
        sla_breach = 0,
        sla_status = None,
        breached_sla = None,
        breached_at = None
    )
    try:
        record_data['conversation_type'] = cust['typeStr']
        cat=str(cust['categoryTree']).split('.')
        record_data['conversation_category'] = cat[0]
        record_data['conversation_subcategory'] = cat[1] if len(cat) &gt; 1 else None
    except KeyError: pass
    try:
        record_data['first_marked_done'] = ptime(attr['firstDone']['createdAt'])
        record_data['last_marked_done'] = ptime(attr['lastDone']['createdAt'])
    except KeyError: pass
    try:
        sla=attr['sla']
        record_data['sla_breach'] = 0 if sla['breached'] is False else 1
        record_data['sla_status'] = sla['status']
        if record_data['sla_breach'] == 1:
            try:
                record_data['breached_sla'] = sla['breach']['metric']
                record_data['breached_at'] = sla['breach']['at']
            except KeyError:
                for m,v in sla['metrics'].items():
                    try:
                        v=v['breachAt']
                        if v == sla['summary']['firstBreachAt']:
                            record_data['breached_sla'] = m
                            record_data['breached_at'] = ptime(v)
                    except KeyError: pass
    except KeyError: pass
    print(record_data)
    self.db.insert_update(KustomerConversations(**record_data))

except KeyError: pass
</code></pre>
<p>While you might have a policy against it, in this case I recommend writing the remaining <code>except KeyError: pass</code> clauses on one line each: it helps the visual bracketing of the tentative code.</p>
</div>
<span class="comment-copy">dict.get(key, default = None)</span>
<span class="comment-copy">Oh man, I can't follow the logic of all that :) I think the suggestion by @SebastianLoehner is probably correct: try make use of <code>.get()</code> to access keys since it won't throw <code>KeyError</code> but simply return <code>None</code>. That said, it's not so easy for nested keys. Is the response structure really this unpredictable?</span>
<span class="comment-copy">Thanks, this worked perfectly!</span>
