<div class="post-text" itemprop="text">
<p>I have a class <code>student</code> with attribute <code>name</code> like this:</p>
<pre><code>class student(object):
    def __init__(self, name):
        self.name = name
</code></pre>
<p>Now if I want some sub-attributes, like first name, middle name and last name, should I use a tree-like structure:</p>
<pre><code>class student(object):
    ...
        self.name.first = first_name
        self.name.middle = middle_name
        self.name.last = last_name
</code></pre>
<p>or change the attribute flatly to 3 attributes</p>
<pre><code>class student(object):
    ...
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 20 -- The Zen of Python</a> advises that flat is better than nested.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a>:</p>
<pre><code>from collections import namedtuple
class student(object):
    name_type = namedtuple('name', ['first_name', 'middle_name', 'last_name'])
    def __init__(self, name: name_type):
        self.name = name
</code></pre>
<p>so that:</p>
<pre><code>s = student(student.name_type('John', 'Jack', 'Smith'))
print(s.name.first_name, s.name.middle_name, s.name.last_name)
</code></pre>
<p>outputs:</p>
<pre><code>John Jack Smith
</code></pre>
</div>
<span class="comment-copy">If <code>name</code> is not an object with some meaningful methods (for example nice <code>__repr__</code>) then use the second approach.</span>
<span class="comment-copy">It depends on what you are trying to do and how you want to do it</span>
<span class="comment-copy">I agree with @timgeb, an example of a place you would use the first method is say you have a <code>Person</code> class and you have a <code>Head</code> class, then it would be meaningful to have something like <code>Head.eyeColor</code>, and <code>Head.hairColor</code>. In your specific example it doesn't seem necessary.</span>
<span class="comment-copy">@timgeb In this example it's trivial but in my real code it is meaningful, problem is I've not seen tree-like attributes anywhere? Usually it's <code>self.name</code> + a method, rather than sub-attribute starts with dot.</span>
<span class="comment-copy">@ElyFialkoff I think that is a good answer to this question if you also include an example when you shouldn't do tree like</span>
<span class="comment-copy">The questions is if you should ;)</span>
<span class="comment-copy">True that. It's really a matter of opinion IMHO. Voting to close then.</span>
