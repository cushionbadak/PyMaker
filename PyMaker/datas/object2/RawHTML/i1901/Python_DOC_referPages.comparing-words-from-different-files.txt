<div class="post-text" itemprop="text">
<p>I am new to Python and stuck on a problem. I have written code to identify total word counts as well as unique word counts of multiple files (in this case the .txt files are chapters of a book: sample text from file1 "It has been disputed at what period of time the causes of variability, whatever they may be, generally act; whether during the early or late period of development of the embryo, or at the instant of conception."; sample text from file2 "Finally, then, varieties have the same general characters as species, for they cannot be distinguished from species, except, firstly, by the discovery of intermediate linking forms"). </p>
<p>I can't find any examples online of how to compare the words between files. I need to identify the number of words that are shared between the files and the number of words that are unique to each file (relative to the other file(s)). My final output should include 7 numbers: total word count for file1 and file2, unique word count for file1 and file2, # of words shared between file1 and file2, # of words in file1 but not in file2, and lastly # of words in file2 but not in file1. I know I have to use set() to do this, but I am not understanding how.</p>
<pre><code>import glob
from collections import Counter

path = "c-darwin-chapter-?.txt"

wordcount = {}

for filename in glob.glob(path):
  with open("c-darwin-chapter-1.txt", 'r') as f1, open("c-darwin-chapter-2.txt", 'r') as f2:
      f1_word_list = Counter(f1.read().replace(',','').replace('.','').replace("'",'').replace('!','').replace('&amp;','').replace(';','').replace('(','').replace(')','').replace(':','').replace('?','').lower().split())

      print("Total word count per file: ", sum(f1_word_list.values()))
      print("Total unique word count: ", len(f1_word_list))

      f2_word_list = Counter(f2.read().replace(',','').replace('.','').replace("'",'').replace('!','').replace('&amp;','').replace(';','').replace('(','').replace(')','').replace(':','').replace('?','').lower().split())

      print("Total word count per file: ", sum(f2_word_list.values()))
      print("Total unique word count: ", len(f2_word_list))

#if/main commented out but final code must use if/main and loop
#if __name__ == '__main__':
#   main()
</code></pre>
<p>Desired output:</p>
<pre><code>Total word count
   Chapter1 = 11615
   Chapter2 = 4837

Unique word count
   Chapter1 = 1991
   Chapter2 = 1025

Words in Chapter1 and Chapter2: 623
Words in Chapter1 not in Chapter2: 1368
Words in Chapter2 not in Chapter1: 402
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You read in both files and convert the read text into lists/sets. Using sets you can use set-operators to calculate intersections/differences between them:</p>
<blockquote>
<pre><code>s.intersection(t)    s &amp; t    new set with elements common to s and t  
s.difference(t)      s - t    new set with elements in s but not in t
</code></pre>
<p>An explanatory table of set-operations can be found here: <a href="https://docs.python.org/2/library/sets.html#set-objects" rel="nofollow noreferrer">Doku 2.x / valid for 3.7 as well</a></p>
</blockquote>
<p>Demo:</p>
<pre><code>file1 = "This is some text in some file that you can preprocess as you " +\
        "like. This is some text in some file that you can preprocess as you like."

file2 = "this is other text about animals and flowers and flowers and " +\
        "animals but not animal-flowers that has to be processed as well"

# split into list - no .lower().replace(...) - you solved that already
list_f1 = file1.split() 
list_f2 = file2.split()

# create sets from list (case sensitive)
set_f1 = set( list_f1 )
set_f2 = set( list_f2 )

print(f"Words: {len(list_f1)} vs {len(list_f2)} Unique {len(set_f1)} vs {len(set_f2)}.")
# difference
print(f"Only in 1: {set_f1-set_f2} [{len(set_f1-set_f2)}]")
# intersection
print(f"In both {set_f1&amp;set_f2} [{len(set_f1&amp;set_f2)}]")
# difference the other way round
print(f"Only in 2:{set_f2-set_f1} [{len(set_f2-set_f1)}]")
</code></pre>
<p>Output:</p>
<pre><code>Words: 28 vs 22 Unique 12 vs 18.
Only in 1: {'like.', 'in', 'you', 'can', 'file', 'This', 'preprocess', 'some'} [8]
In both {'is', 'that', 'text', 'as'} [4]
Only in 2:{'animals', 'not', 'but', 'animal-flowers', 'to', 'processed',
           'has', 'be', 'and', 'well', 'this', 'about', 'other', 'flowers'} [14]
</code></pre>
<hr/>
<p>You are already handling the file reading and "unifying" to lower case - I left that out here. The output uses string interpolation syntax for python 3.6: see <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498</a></p>
</div>
<span class="comment-copy">You should include the two text samples in your question as well (as text, not images), as well as your desired output.</span>
<span class="comment-copy">The text files are chapters of a book (that are VERY long), and I've been told in the past not to post very long questions so that is why I did not include it. Will update to include desired output</span>
<span class="comment-copy">I would just include <i>small</i> samples of the text, so that those answering have data to work with.</span>
<span class="comment-copy">Okay I will update the question to reflect that; thank you!</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>class set([iterable])</code></a>. Relevant <a href="https://stackoverflow.com/questions/52805310/finding-the-intersection-of-the-paired-typed-lists-collection-of-strings-in-py">finding-the-intersection-of-the-paired-typed-lists-collection-of-strings-in-py</a></span>
