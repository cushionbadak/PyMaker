<div class="post-text" itemprop="text">
<p>If I run this code, I'v got the subject error message. But why? And how to avoid it getting the <code>C</code> class having its parents slots?</p>
<pre><code>class A():
        __slots__ = ['slot1']

class B():
        __slots__ = ['slot2']

class C(A, B):
        __slots__ = []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply speak, you just cannot do it.</p>
<p>As stated in <a href="https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots" rel="nofollow noreferrer">Documentation</a>,</p>
<blockquote>
<p>Multiple inheritance with multiple slotted parent classes can be used, but only one parent is allowed to have attributes created by slots (the other bases must have empty slot layouts) - violations raise TypeError.</p>
</blockquote>
<p>The idea behind <code>__slots__</code> is to reserve specific <em>slots</em> for each attribute in the memory layout of your instances. <code>A</code> and <code>B</code> are trying to reserve the same part of their memory layout for the <code>slot1</code> and <code>slot2</code> attributes, and <code>C</code> can't have the same memory reserved for two attributes. It's just not compatible.</p>
<hr/>
<p><strong>Thanks for JCode metioned in comment, the following method is modified to be correct.</strong></p>
<p>But there is always the way, I personally prefer to use a common base contained all required slots if <code>__slots__</code> is necessary while there is multiple inherited class.</p>
<pre><code>import pympler.asizeof
class base():
    __slots__ = ['a','b']

class A(base):
    __slots__ = []

class B(base):
    __slots__ = []

class C(A,B):
    __slots__ = []

class D():
    pass

#Update
bb = base()
bb.a = 100
bb.b = 100
print(pympler.asizeof.asizeof(bb))
a = A()
a.a = 100
a.b = 100
print(pympler.asizeof.asizeof(a))
c = C()
c.a = 100
c.b = 100
print(pympler.asizeof.asizeof(c))
d = D()
d.a = 100
d.b = 100
print(pympler.asizeof.asizeof(d))
</code></pre>
<p><strong>Update</strong>
The 4 values will be 88, 88, 88, 312. Though <code>__slots__</code> reserved.</p>
</div>
<div class="post-text" itemprop="text">
<p>It had (in my opinion) a silly workaround.
That's why no <code>TypeError</code> is raised when <code>__slots__</code> is empty, and having an empty <code>__slots__</code> attribute preserves the "wondered" python behaviour what warns when assigning to an attribute not defined in <code>__slots__</code>.</p>
<p>So, consider the following <em>metaclass</em>:</p>
<pre><code>class SlotBase(type):
    def __new__(cls,name,bases,dctn):
        if ('_slots_' in dctn) and not ('__slots__' in dctn):
            dctn['__slots__'] = []
        elif '__slots__' in dctn:
            for base in bases:
                if hasattr(base,'_slots_'):
                    dctn['__slots__'] += getattr(base,'_slots_')
        return super().__new__(cls,name,bases,dctn)
</code></pre>
<p>An then deploy on base classes.</p>
<pre><code>class A(metaclass=SlotBase):

    _slots_=['slot1'] #fake __slots__ attribute

    classPropertyA = 'Some silly value'

    def functA(self):
        print('I\'m functA')

class B(metaclass=SlotBase):

    _slots_=['slot2'] #fake __slots__ attribute

    classPropertyB = 'Some other silly value'

    def functB(self):
        print('I\'m functB')

class C(A,B):
    __slots__ = []

    classPropertyC = 'Just another silly value'
</code></pre>
<p>If we execute following code</p>
<pre><code>c=C()
c.classPropertyC
c.classPropertyA
c.functA()
c.functB()
c.slot1='Slot exists then assignment is accepted'
c.slot3='Slot does not exists then assignment couldn\'t be accepted'
</code></pre>
<p>This produces following output</p>
<pre><code>Just another silly value
Some silly value
I'm functA
I'm functB
Traceback (most recent call last):
  File "/tmp/slots.py", line 41, in &lt;module&gt;
    c.slot3='Slot does not exists then assignment couldn\'t be accepted'
AttributeError: 'C' object has no attribute 'slot3'
</code></pre>
</div>
<span class="comment-copy">As explained in this comment ( <a href="https://stackoverflow.com/questions/10857515/cannot-inherit-from-multiple-classes-defining-slots#comment91059965_10857515" title="cannot inherit from multiple classes defining slots%23comment91059965_10857515">stackoverflow.com/questions/10857515/â€¦</a> ) it seems to collide with a low level design of python objects structure what makes incompatible work with slots and multiple inheritance together.</span>
<span class="comment-copy">Yep, related: <a href="https://mail.python.org/pipermail/python-list/2004-December/293157.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-list/2004-December/293157.html</a></span>
<span class="comment-copy">There's a similar question <a href="https://stackoverflow.com/questions/10857515/cannot-inherit-from-multiple-classes-defining-slots">here</a>, but the answers are completely useless.</span>
<span class="comment-copy">You are terribly right. I tried to do using metaclasses but is a no way out, definitely. Thank you very much.</span>
<span class="comment-copy">Please @MatrixTai, can you help me considering the pros and cons of my own answer? (is down below)</span>
<span class="comment-copy">@MatrixTai You don't have <code>__slots__</code> in <code>A</code> and <code>B</code> so you aren't using this feature at all. <code>C().x = 100</code> doesn't fail.</span>
<span class="comment-copy">@MatrixTai You don't get it. <code>__slots__</code> aren't inherited. The thing is that if <code>C().x = 100</code> doesn't fail when <code>x</code> is not listed in any <code>__slots__</code> means that the feature doesn't work. You miss one <code>__slots__</code> in <code>B</code> class hierarchy and you have <code>__dict__</code> available again in subclasses of <code>B</code>. Just run your code in interpreter and assign <code>C().x</code>.</span>
<span class="comment-copy">@MatrixTai Just add empty <code>__slots__</code> to <code>A</code> and <code>B</code>. The thing I'm talking about is in the doc you've linked: "However, child subclasses will get a <code>__dict__</code> and <code>__weakref__</code> unless they also define <code>__slots__</code> (which should only contain names of any additional slots)." I understand you may missed it because the doc is poorly written IMO.</span>
<span class="comment-copy">Please @MatrixTai, can you help me considering the pros and cons of my own answer?</span>
<span class="comment-copy">Nope, you can't do this, class A and B won't have any slots in this sense. You cannot assign <code>__slots__</code> after class build. You may do this, only when you never use class A, B individually.</span>
