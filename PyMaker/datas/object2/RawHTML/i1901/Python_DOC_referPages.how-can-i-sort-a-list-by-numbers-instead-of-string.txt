<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>import glob, os
outdir = './output/'
nstring = 'testdat_2014-12-31'
nfilelist = sorted(glob.glob((outdir+'/*{}*.nc').format(nstring)))
</code></pre>
<p>from which I get <code>nfilelist</code>:</p>
<pre><code>['testdat_2014-12-31-21_H1.nc',
 'testdat_2014-12-31-21_H10.nc',
 'testdat_2014-12-31-21_H11.nc',
 'testdat_2014-12-31-21_H12.nc',
 'testdat_2014-12-31-21_H2.nc',
 'testdat_2014-12-31-21_H3.nc',
 'testdat_2014-12-31-21_H4.nc',
 'testdat_2014-12-31-21_H5.nc',
 'testdat_2014-12-31-21_H6.nc',
 'testdat_2014-12-31-21_H7.nc',
 'testdat_2014-12-31-21_H8.nc',
 'testdat_2014-12-31-21_H9.nc']
</code></pre>
<p>The H1-H12 numbers at the end reflect how I want to sort it. But right now, H10-H12 is sandwiched in the middle. How can I sort from H1-H12?</p>
<p>Regex isn't my strong suit and I'm unable to move forward.</p>
<p>I tried splitting and got this far:</p>
<pre><code>nfilelist[0].split('_')[-1].split('.')
['H1', 'nc']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want them to sort them by <em>int value</em> you could use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a> in the following way:</p>
<pre><code>import re

nfiles  = ['testdat_2014-12-31-21_H1.nc',
 'testdat_2014-12-31-21_H10.nc',
 'testdat_2014-12-31-21_H11.nc',
 'testdat_2014-12-31-21_H12.nc',
 'testdat_2014-12-31-21_H2.nc',
 'testdat_2014-12-31-21_H3.nc',
 'testdat_2014-12-31-21_H4.nc',
 'testdat_2014-12-31-21_H5.nc',
 'testdat_2014-12-31-21_H6.nc',
 'testdat_2014-12-31-21_H7.nc',
 'testdat_2014-12-31-21_H8.nc',
 'testdat_2014-12-31-21_H9.nc']

result = sorted(nfiles, key=lambda x: int(re.search('H(\d+)\.nc', x).group(1)))

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['testdat_2014-12-31-21_H1.nc', 'testdat_2014-12-31-21_H2.nc', 'testdat_2014-12-31-21_H3.nc', 'testdat_2014-12-31-21_H4.nc', 'testdat_2014-12-31-21_H5.nc', 'testdat_2014-12-31-21_H6.nc', 'testdat_2014-12-31-21_H7.nc', 'testdat_2014-12-31-21_H8.nc', 'testdat_2014-12-31-21_H9.nc', 'testdat_2014-12-31-21_H10.nc', 'testdat_2014-12-31-21_H11.nc', 'testdat_2014-12-31-21_H12.nc']
</code></pre>
<p><strong>Explanation</strong></p>
<p>The pattern <code>'H(\d+)\.nc'</code> means match any group of digits <code>(\d+)</code> preceded by an <code>H</code> and followed by <code>.nc</code>. and use <code>.group(1)</code> to get the group of digits. Then transform the groups of digits into an <code>int</code> and use them as a key for sorted.</p>
<p><strong>No regex</strong></p>
<p>If you want to avoid regex altogether use the following function as key:</p>
<pre><code>def key(element):
    digits = (ix for ix in element.split('_')[-1] if ix.isdigit())
    return int(''.join(digits))

result = sorted(nfiles, key=key)

print(result)
</code></pre>
<p><strong>Note</strong></p>
<p>Finally if you want to sort by the string value simply remove the calls to the int function.</p>
</div>
<div class="post-text" itemprop="text">
<p>The names that you sort have a simple and regular structure; you can survive without invoking regex. Sort the names by taking the first part of a name after the "_H", then the first part of it before the ".", and converting the result to an integer:</p>
<pre><code>sorted(nfilelist, 
       key=lambda x: int(x.split("_H")[1].split(".")[0]))
#['testdat_2014-12-31-21_H1.nc', 'testdat_2014-12-31-21_H2.nc', 
# 'testdat_2014-12-31-21_H3.nc', 'testdat_2014-12-31-21_H4.nc', 
# 'testdat_2014-12-31-21_H5.nc', 'testdat_2014-12-31-21_H6.nc', 
# 'testdat_2014-12-31-21_H7.nc', 'testdat_2014-12-31-21_H8.nc', 
# 'testdat_2014-12-31-21_H9.nc', 'testdat_2014-12-31-21_H10.nc', 
# 'testdat_2014-12-31-21_H11.nc', 'testdat_2014-12-31-21_H12.nc']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this without using a regex</p>
<pre><code>result = sorted(nfilelist, key=lambda x: (len(x), x))
</code></pre>
<p>This key first compares these filenames with the idea that</p>
<ol>
<li>Longer numbers are larger</li>
<li>If numbers are the same length then comparing numbers or strings is the same</li>
</ol>
<p>Speed comparison with other answers here:</p>
<pre><code>| Method            | Timing                       |
+-------------------+------------------------------+
| Using natsort     | 219 µs  ± 1.13 µs per loop   |
| Daniel's regex    | 14.2 µs ± 434  ns per loop   |
| Daniel's no-regex | 14.2 µs ± 101  ns per loop   |
| DYZ's split based | 7.50 µs ± 240  ns per loop   |
| This answer       | 2.77 µs ± 46.6 ns per loop   |
</code></pre>
<p>Timings were obtained using <code>%timeit</code> in iPython3.7 running on 2.7 GHz Intel Core i7</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>sorted()</code> function use the <code>natsorted()</code> one from the <a href="https://natsort.readthedocs.io/en/master/index.html" rel="nofollow noreferrer">natsort</a> module:</p>
<pre><code>import natsort        # pip install natsort

nfilelist = natsort.natsorted(glob.glob((outdir+'/*{}*.nc').format(nstring)))
</code></pre>
<p>(The name <code>natsort</code> means <em>natural sort</em> - as opposed to the <em>lexicographical</em> one.)</p>
</div>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside" title="how to correctly sort a string with a number inside">stackoverflow.com/questions/5967500/…</a></span>
<span class="comment-copy">@maximusdooku do you want to sort by int value or string value?</span>
<span class="comment-copy">This solution will fail if you have a file named testdat_2018-12-31-21_H0.nc ;)</span>
<span class="comment-copy">@LakshayGarg According to the OP, this is not possible: <code>nstring = 'testdat_2014-12-31'</code>.</span>
<span class="comment-copy">You are correct. I missed that part</span>
