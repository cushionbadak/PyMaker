<div class="post-text" itemprop="text">
<p>I'm writing a class that has a bunch of member functions that all call the same function with different parameters. The way I have it written right now is like:</p>
<pre><code>class ExampleClass:
    def a_function(self,args):
        do_something

    def func1(self):
        return self.a_function(arg1)

    def func2(self):
        return self.a_function(arg2)
        .
        .
        .  
</code></pre>
<p>This seems incredibly redundant and is a pain to deal with since it takes up so much space. Is this the best way to deal with class functions that all have the same structure or is there a better way to deal with this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since functions are first class objects in Python you can create and return one inside of another. This means you could do define a helper function and use it inside the class to get rid of some of the boilerplate code:</p>
<pre><code>class ExampleClass:
    def a_function(self, *args):
        print('do_something to {}'.format(args[0]))

    def _call_a_function(arg):
        def func(self):
            return self.a_function(arg)
        return func

    func1 = _call_a_function(1)
    func2 = _call_a_function(2)
    func3 = _call_a_function(3)


if __name__ == '__main__':
    example = ExampleClass()
    example.func1() # -&gt; do_something to 1
    example.func2() # -&gt; do_something to 2
    example.func3() # -&gt; do_something to 3
</code></pre>
<p>If you're using a fairly recent version of Python, you don't even have to write the helper function because there's a built-in one named <a href="https://docs.python.org/3/library/functools.html#functools.partialmethod" rel="nofollow noreferrer"><code>partialmethod</code></a>:</p>
<pre><code>from functools import partialmethod  # Requires Python 3.4+

class ExampleClass2:
    def a_function(self, *args):
        print('do_something to {}'.format(args[0]))

    func1 = partialmethod(a_function, 1)
    func2 = partialmethod(a_function, 2)
    func3 = partialmethod(a_function, 3)
</code></pre>
</div>
<span class="comment-copy">Why don't you pass the parameter as an argument to the method? <code>def func1(self, some_arg): return self.a_function(some_arg)</code></span>
<span class="comment-copy">Or just even make <code>a_function</code> directly accessible. What's the purpose of the multiple methods?</span>
<span class="comment-copy">I dont want whoever is using this class to have to know what arguments they need to pass in to call 'a_function'</span>
<span class="comment-copy">I don't understand your use case.  Why do you have this extra layer in your design?  It appears that any call to <code>obj.func1</code> should be replaced by the <code>a_function</code> equivalent.</span>
<span class="comment-copy">i see what the OP means "I dont want whoever is using this class to have to know...". It does make sense. But in that case, your goal is to provide separate func1, func2, etc. to the users, probably with very intuitive function names. So i don't see there is anyway you can avoid individually defining them</span>
<span class="comment-copy">i was just about to suggest this idea. nice example code</span>
<span class="comment-copy">Is this a way of dealing with a standard design pattern? It seems to me that <code>a_function</code> does too much.</span>
<span class="comment-copy">@roganjosh: Not sure what you mean by "standard design pattern" nor about <code>a_function</code> doing too much. Creating a function that encapsulates a repeated sequence of processing is a "design patthern" that's as old as the hills. There are also other ways of implementing it in Python, I simply picked what I felt was the most obvious one.</span>
<span class="comment-copy">A function should do one thing. The fact that all of these helper methods end up calling the same method but with different arguments suggests to me that <code>a_function</code> does an awful lot of different things. If it didn't, you'd surely expose it directly and explain how it handles different inputs. Then <code>a_function</code> should call different functions based on its input. All I'm envisioning is that <code>a_function</code> has some mega body that handles all different functionality within itself.</span>
<span class="comment-copy">@roganjosh: Well, the <code>_call_a_function()</code> function only has one purpose. It's hard to say much about <code>a_function()</code> itself other than it apparently accepts an argument which can have different values, something which is very, very common and doesn't, in general, indicate how much or what kind of processing is going to occur within the function accepting it.</span>
