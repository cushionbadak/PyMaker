<div class="post-text" itemprop="text">
<p>Additional explanation:</p>
<p>What I want to achieve is </p>
<pre><code>call(function,(*args,*toomanyargs)) == (function(*args),*toomanyargs)
call(function_with_varargs,(*args))) == (function_with_varargs(*args))
</code></pre>
<p>what's the pythonic way to achieve this</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find out how many positional arguments a function accepts by accessing the <code>.__code__.co_argcount</code> attribute:</p>
<pre><code>&gt;&gt;&gt; function = lambda a, b, c: a+b+c
&gt;&gt;&gt; function.__code__.co_argcount
3
</code></pre>
<p>However, that doesn't respect varargs:</p>
<pre><code>&gt;&gt;&gt; function = lambda *a: a
&gt;&gt;&gt; function.__code__.co_argcount
0
</code></pre>
<p>So the more robust solution is to use <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer"><code>inspect.signature</code></a>:</p>
<pre><code>import inspect

def call(function, args):
    # count the positional arguments
    params = inspect.signature(function).parameters.values()
    if any(param.kind == inspect.Parameter.VAR_POSITIONAL for param in params):
        arg_count = len(args)
    else:
        POSITIONAL_KINDS = {inspect.Parameter.POSITIONAL_ONLY,
                            inspect.Parameter.POSITIONAL_OR_KEYWORD}
        arg_count = sum(1 for param in params if param.kind in POSITIONAL_KINDS)

    # take as many arguments as the function accepts
    remainder = args[arg_count:]
    args = args[:arg_count]

    return (function(*args),) + tuple(remainder)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; function = lambda a, b, c: a+b+c
&gt;&gt;&gt; args = range(5)
&gt;&gt;&gt; call(function, args))
(3, 3, 4)
&gt;&gt;&gt; 
&gt;&gt;&gt; function = lambda a, b, c, *d: a+b+c
&gt;&gt;&gt; args = range(5)
&gt;&gt;&gt; call(function, args))
(3,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to use <code>locals()</code> (<a href="https://stackoverflow.com/questions/33073652/check-the-number-of-parameters-passed-in-python-function">Check the number of parameters passed in Python function</a>; <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#locals</a>), and do some math in the body of each function to figure out how many args are left over (unused). You can then return a result which includes a tuple of the unused arguments.</p>
</div>
<span class="comment-copy">Are you passing in a function as an argument?</span>
<span class="comment-copy"><code>call</code> would take 1 function and 1 tuple and pass as many arguments to the function and make a new tuple from the result and the arguments that weren't passed to the function.</span>
<span class="comment-copy">That only works <i>inside</i> the function. It doesn't let you inspect the number of parameters from the outside.</span>
<span class="comment-copy">Oh I get what you're saying now. I guess my (clarified) suggestion would be to write the functions you are passing to <code>call()</code> to just take all of the *args and deal with them appropriately.</span>
<span class="comment-copy">Because the <code>call</code> function wants to find out how many arguments <code>function</code> accepts.</span>
