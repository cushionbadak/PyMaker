<div class="post-text" itemprop="text">
<p>I'm looking for a way to define properties conditionally in python.
The idea was to define the property inside a try/except block</p>
<pre><code>class PyObject(SomeOtherObj):

    def __init__(self, dbaObj):

        super(SomeOtherObj, self).__init__()

        self._CreateAttributes()

    def _CreateAttributes(self):

        try:
            self.GetProperty("MyProperty") #This method comes from the parent
        except:
            pass
        else:
            @property
            def MyProperty(self):
                return self.GetProperty("MyProperty")

            @MyProperty.setter
            def MyProperty(self, value):
                return self.ModifyProperty("MyProperty", value) #This method comes from the parent
</code></pre>
<p>I don't know which properties are defined inside the parent object, hence I need something that builds properties conditionally. Any other solution is also welcome.</p>
<p>[EDIT] Another attempt...however not only the attribute gets created anyway, but trying to accessing it throws an infinite recursion error</p>
<pre><code>class PyObject(SomeOtherObj):

    def __init__(self, dbaObj):

        super(SomeOtherObj, self).__init__()

        @property
        def MyProperty(self):
            try:
                return self.GetProperty("MyProperty")
            except:
                del self.MyProperty

        @MyProperty.setter
        def MyProperty(self, value):
             return self.ModifyProperty("MyProperty", value) #This method comes from the parent

         @MyProperty.deleter
         def MyProperty(self):
              self.__delattr__(self.MyProperty)
</code></pre>
<p>[EDIT2] I have a method inside the parent that allows me to know which are the properties. For the sake of the example let's suppose I have a method <code>ListAttributes</code> in the <code>SomeOtherObj</code> C++ class which returns a list of the attributes names (strings) dynamically created by the Parent class.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can think of python classes as namespace for code, with special binding. It's you can write pretty much anything in class body (think a loop, for extra craziness), and it will be executed on class import (in module import, really). The only problem you have is that you don't have easy access to parent classes in child class closure (without using metaclasses).</p>
<p>So, if you need to make quick and dirty patch, you can actually make <code>try/except</code> like:</p>
<pre><code>class Child(Parent):
    try:
        Parent.get_property
        @property
        def my_property(self):
            return self.get_property()

        @my_property.setter
        def my_property(self, value):
            self.set_property(value)
    except:
        pass
</code></pre>
<p>First issue with this — parent class is hard-coded, if you change inheritance, you need to change implementation. This is actually bad design, but if you're hardly constraint, may it's ok for you.</p>
<p>Bigger issue, tho, is that such interface is hell to use. In most cases, if you provide property/method, your users will expect class to have this. It's no fun to constantly use <code>if/else</code> or <code>try/except</code> just because some parent class somewhere missing method. And this part can't be fixed the way you have it now.</p>
<p>So, main thing to consider — what's the situation, when parent class behaviour is unknown? If it's known for users on install time, consider providing two different child classes, no surprises inside.</p>
<p>If it's known in runtime only, why even bother checking for this? Users will still use</p>
<pre><code>try:
    child_obj.my_property
except AttributeError:
    ...
</code></pre>
<p>to catch your flappy interface, but the fun thing is missing parent getter will produce same exception, so simple </p>
<pre><code>class Child(Parent):
    @property
    def my_property(self):
        return self.get_property()

    @my_property.setter
    def my_property(self, value):
        self.set_property(value)
</code></pre>
<p>will be used pretty much the same</p>
</div>
<div class="post-text" itemprop="text">
<p>First point: the <code>@decorator</code> syntax is nothing magical, it's just syntactic sugar, so </p>
<pre><code>@decorator
def func():
    pass
</code></pre>
<p>is actually just a convenient shortcut for:</p>
<pre><code>def func():
    pass
func = decorator(func)
</code></pre>
<p>Second point: the <code>property</code> type is a generic (and rather simple - here again, no magic involved) implementation of <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">the <code>descriptor</code> protocol</a>. Descriptors only "work" when resolved as class attributes, so setting properties as instance attributes will not work, period (looking them up will return the descriptor object itself, it will not invoke the descriptor's <code>__get__</code> and <code>__set__</code> methods).</p>
<p>Third point: your code is not even setting the created properties as instance attributes (which wouldn't work anyway), they are just plain <strong>local</strong> names that only exist during the <code>_CreateAttributes</code> method execution. </p>
<p>None of this will solve your problem - you'd have to provide more context for someone to post a solution garanteed to work for your concrete use case (based on how this C++ parent class is actually implemented etc) - but at least you now know why your attempts fail.</p>
<p>EDIT:</p>
<blockquote>
<p>I have a method inside the parent that allows me to know which are the properties. For the sake of the example let's suppose I have a method ListAttributes in the SomeOtherObj C++ class which returns a list of the attributes names (strings) dynamically created by the Parent class.</p>
</blockquote>
<p>If that's a classmethod or staticmethod, you can use a class decorator to create the properties (or, to reduce boilerplate, a custom descriptor):</p>
<pre><code>class Parent(object):
    def __init__(self):
        self._props = {"foo": 42, "bar": None}

    @classmethod
    def ListAttributes(cls):
        return ["foo", "bar"]

    def GetProperty(self, name):
        return self._props[name]

    def ModifyProperty(self, name, value):
        self._props[name] = value


class Prop(object):
    def __init__(self, name):
        self.name = name

    def __get__(self, instance, cls):
        return instance.GetProperty(self.name)

    def __set__(self, instance, value):
        instance.ModifyProperty(self.name, value)

def setprops(cls):
    parent = cls.__bases__[0]
    for name in parent.ListAttributes():
        setattr(cls, name, Prop(name))
    return cls

@setprops
class Child(Parent):
    pass


c = Child()
print("foo : {}".format(c.foo))
print("bar : {}".format(c.bar))

c.bar = "yay!"
print("bar: {}".format(c.bar))
</code></pre>
<p>If <code>Parent.ListAttributes</code> is an instance method then you can still use the <code>__getattr__</code> and  <code>__setattr__</code> special methods:</p>
<pre><code>class Parent2(object):
    def __init__(self):
        self._props = {"foo": 42, "bar": None}

    def ListAttributes(self):
        return ["foo", "bar"]

    def GetProperty(self, name):
        return self._props[name]

    def ModifyProperty(self, name, value):
        self._props[name] = value


class Child2(Parent2):
    def __getattr__(self, name):
        if name in self.ListAttributes():
            return self.GetProperty(name)
        raise AttributeError("object {} has no attribute {}".format(type(self), name))

    def __setattr__(self, name, value):
        if name in self.ListAttributes():
            self.ModifyProperty(name, value)
        super(Child2, self).__setattr__(name, value)



c = Child2()
print("foo : {}".format(c.foo))
print("bar : {}".format(c.bar))

c.bar = "yay!"
print("bar: {}".format(c.bar))

# check we didn't break the default __setattr__
c.baaz = "ok"
print("baaz: {}".format(c.baaz))
</code></pre>
<p>Beware: <code>__getattr__</code> is only invoked as a last resort if all other lookups failed so it's mostly harmless, but <code>__setattr__</code> is the default attribute setter, so you have to make sure you use it wisely.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about that:</p>
<pre><code>class A:
    def stuff(self):
        pass

a = A()   


if hasattr(a, 'another'):
    print(a.another)
else:
    A.another = property(lambda self: 1)
    print(a.another)
</code></pre>
<p>You can simply patch class by setting a property in a runtime</p>
<pre><code>Result: 1
</code></pre>
</div>
<span class="comment-copy">"I don't know which properties are defined inside the parent object" =&gt; how is this possible ? You just have to read the doc for the parent class (or just the source code).</span>
<span class="comment-copy">It's a C++ factory which launches other C++ objects based on a variable input...I don't have really much control on it. However I think this is independent of my question (which could be of theoretical interest as well)</span>
<span class="comment-copy">Ok, makes sense.</span>
<span class="comment-copy">This was very useful, thanks. I have a clearer view of the matter.</span>
<span class="comment-copy">I added an EDIT to my original post</span>
<span class="comment-copy">@mg91 I updated my answer appropriately. I cannot garantee this will work with your own Parent class but it does have a chance to.</span>
