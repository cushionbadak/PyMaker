<div class="post-text" itemprop="text">
<p>I was trying to generate all the permutations of 128 bits and store them in some kind of structure. I found some useful information about it in other Stack Overflow questions using: </p>
<pre><code>keys = map(''.join,itertools.product('01',repeat=n)) 
</code></pre>
<p>The problem is that this solution is useful only for enough small values of <code>n</code> since it stores the values in a list as strings and therefore each bit in the sequence will be a byte, meaning that each permutation would be 128 bytes long</p>
<p>With such a high value like <code>n=128</code>, storing all the permutations as strings is not possible. (My computer runs out of memory when executing <code>itertools.product()</code> with <code>n=128</code>). Whereas storing the permutations as raw bytes would mean having 16 bytes for each permutation.</p>
<p>My question is how to archive the same results as <code>intertools.product</code> but dealing with bytes. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>perms = [ x for x in range(0, 2**128)]
</code></pre>
</div>
<span class="comment-copy"><code>map</code> in Python-3.x does not store the values in a <code>list</code>. Besides <code>2**128</code> elements is many enough to break your system, regardless of how they are stored. Even if every permutation were only a single bit, you'd need more than <code>10**25 Terabyte</code>.</span>
<span class="comment-copy">I'm sure it's possible to do what you ask, however you shouldn't be running out of memory unless you're trying have all the permutations in memory at once (by using something like <code>list(keys)</code>. This is because <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> returns an <b><i>iterator</i></b> object. If you just iterate through it with something like <code>for value in keys:</code> then only one (128 character string) will be create at a time.</span>
<span class="comment-copy">@martineau You might not run out of space then, but you'll surely run out of time =)</span>
<span class="comment-copy">@schwobaseggl: Good point. Unless they have a really, really, really fast computer... <code>;Â¬)</code></span>
<span class="comment-copy">victor: Just out of curiosity, what are you planning on doing with all these permutations?</span>
<span class="comment-copy">Or better, don't!</span>
<span class="comment-copy">Seriously doubt there'll be enough computer memory to store the 340,282,366,920,938,463,463,374,607,431,768,211,456 elements in the resulting list.</span>
