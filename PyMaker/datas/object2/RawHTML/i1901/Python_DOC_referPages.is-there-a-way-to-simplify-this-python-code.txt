<div class="post-text" itemprop="text">
<p>I am still in the "any technology sufficiently advanced..." phase of learning to program. This code seems clunky, and hard to update if needed. Is there a better way to go about this? It just looks completely bonkers to me, but it works... so yay? </p>
<p>It takes a variable from TKinter radial 1-16, and uses it select the grade1 ect variable. The grade1 variable then link to sheet names on gspread. </p>
<pre><code>def go():
    subject = v.get()
    if  subject == 1:
        subject = grade1
    elif  subject == 2:
        subject = grade2    
    elif  subject == 3:
        subject = grade3
    elif  subject == 4:
        subject = grade4  
    elif  subject == 5:
        subject = grade5
    elif  subject == 6:
        subject = grade6
    elif  subject == 7:
        subject = grade7
    elif  subject == 8:
        subject = grade8
    elif  subject == 9:
        subject = grade9
    elif  subject == 10:
        subject = grade10    
    elif  subject == 11:
        subject = grade11
    elif  subject == 12:
        subject = grade12 
    elif  subject == 13:
        subject = grade13
    elif  subject == 14:
        subject = grade14
    elif  subject == 15:
        subject = grade15
    elif  subject == 16:
        subject = grade16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do not keep 16 different variables for <code>grade**</code>! Use one list:</p>
<pre><code>grades = [1, 2, 3, ...]  # or whatever your values are
</code></pre>
<p>Then all you need to do is:</p>
<pre><code>subject = grades[v.get() - 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of defining 16 separate grade1...grade16 variables, you could store them in a list like <code>grades=[grade1,...,grade16]</code> and then set subject as <code>subject = grades[v.get()-1]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Or use dictionary:</p>
<pre><code>d={1:grade1,2:grade2 ... 16:grade16}
print(d[v.get()])
</code></pre>
<p>You will get desired grade.</p>
<p>You have to have a dictionary with keys of all possible <code>v.get()</code> values, and values of the grades you want for each key, so then you get the <code>v.get()</code> key in the dictionary, then get it's value, by using <code>d[v.get()]</code>, now you've got the desired grade.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are few ways to get around it.</p>
<pre><code># 1. Using the `list` data type
def go():
    grade_list = [grade1, grade2, ... grade16]
    subject = [grade_list[v.get() - 1]]


# 2. Using the `eval` 
def go():
       subject = v.get()
       if subject in range(1, 17):
           subject = eval("grade" + str(subject))
</code></pre>
<p>The first method is considered better code. However, there is another way of using
<code>eval</code> keyword. It treats the code inside as an expression. Since only the number part of the variable changes. However, <code>eval</code> is not the best way I recommend. For more, refer to this page <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">Why is using 'eval' a bad practice?</a></p>
</div>
<span class="comment-copy">Thank you, this worked. I have done something similar with other things, but this did not clue in for me. Amazing thanks.</span>
<span class="comment-copy">As a rule of thumb: whenever you attach a <code>…2</code> to any variable name, you should pause and think about what you're actually doing.</span>
<span class="comment-copy">so for my TK radial buttons can I do something similar?       but1= Radiobutton(root,text=grade[0],padx=5, variable=v, value =1,command= go)     but2= Radiobutton(root,text=grade[1],padx=5, variable=v, value =2,command= go)     but3= Radiobutton(root,text=grade[2],padx=5, variable=v, value =3,command= go)</span>
<span class="comment-copy">Sure… <code>buttons = [Radiobutton(...), Radiobutton(...), ...]</code>.</span>
<span class="comment-copy">is there a big difference between a list and dictionary? or is just the indexing is inside of the dictionary?</span>
<span class="comment-copy">@CalvinHobbes It's actually not indexing it's getting key, then it's value, <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#dictionaries</a></span>
<span class="comment-copy">@CalvinHobbes Can upvote if you want :-)</span>
<span class="comment-copy">When iterating through a list it's <code>O(n)</code> However, a dictionary is <code>O(1)</code> because it <code>dictionary</code> uses <code>hash</code></span>
<span class="comment-copy">Please don't recommend <code>eval</code> to fix a bad program/data structure.</span>
<span class="comment-copy">I've edited that eval is not the best way around it :)</span>
