<div class="post-text" itemprop="text">
<p>I'm trying to get a list of maximum values ​​of columns in a matrix without Numpy. I'm trying to write tons of codes but can't find the wanted output.</p>
<p>Here is my code:</p>
<pre><code>list=[[12,9,10,5],[3,7,18,6],[1,2,3,3],[4,5,6,2]]

list2=[]

def maxColumn(m, column):   
    for row in range(len(m)):
        max(m[row][column])  # this didn't work
        x = len(list)+1 
    for column in range(x):
        list2.append(maxColumn(list, column))

print(list2)
</code></pre>
<p>And here is the wanted output:</p>
<pre><code>[12, 9, 18, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, never name your lists <code>list</code> as it renders <code>list</code> data structure of python useless in the downstream code.</p>
<p>The code with comments:</p>
<pre><code>my_list=[[12,9,10,5],[3,7,18,6],[1,2,3,3],[4,5,6,2]]

def maxColumn(my_list):

    m = len(my_list)
    n = len(my_list[0])

    list2 = []  # stores the column wise maximas
    for col in range(n):  # iterate over all columns
        col_max = my_list[0][col]  # assume the first element of the column(the top most) is the maximum
        for row in range(1, m):  # iterate over the column(top to down)

            col_max = max(col_max, my_list[row][col]) 

        list2.append(col_max)
    return list2

print(maxColumn(my_list))  # prints [12, 9, 18, 6]
</code></pre>
<p>Also, though you have specifically mentioned for a no-numpy solution, but in numpy it is as simple as this:</p>
<pre><code>list(np.max(np.array(my_list), axis=0))
</code></pre>
<p>Which just says, convert <code>my_list</code> to a numpy array and then find the maximum along the columns(axis=0 means you move top to down in your array).</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built-in <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> which allows you to transpose<sup>1</sup> your list of lists:</p>
<pre><code>L = [[12,9,10,5], [3,7,18,6], [1,2,3,3], [4,5,6,2]]

def maxColumn(L):    
    return list(map(max, zip(*L)))

res = maxColumn(L)

[12, 9, 18, 6]
</code></pre>
<p><sup>1</sup> The official description for what <code>zip</code> does:</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>One approach is to iterate over rows and keep maximum value on every position (column):</p>
<pre><code>lst = [[12, 9, 10, 5], [3, 7, 18, 6], [1, 2, 3, 3], [4, 5, 6, 2]]

answer = lst[0]
for current in lst[1:]:
    answer = [max(x, y) for x, y in zip(answer, current)]

print(answer)
</code></pre>
<p>Output:</p>
<pre><code>[12, 9, 18, 6]
</code></pre>
<p>Another approach is first to build columns from the given list of rows and then simply find maximum in every column.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use this function:</p>
<pre><code>def max_col(my_list):

result = []
i = 0

while i &lt; len(my_list[0]):

    max_val = my_list[0][i]
    j = 1

    while j &lt; len(my_list):

        if my_list[j][i] &gt; max_val:
            max_val = my_list[j][i]

        j += 1

    result.append(max_val)
    i += 1

return(result)
</code></pre>
</div>
<span class="comment-copy">Welcome, could you start by fixing the indentation?</span>
