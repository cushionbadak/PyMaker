<div class="post-text" itemprop="text">
<p>Why is this code wrong :</p>
<pre><code>def parrot_trouble(talking, hour):
  if talking == True and hour &lt; 7 or hour &gt; 20:
    return True
  else : 
    return False
</code></pre>
<p>And why is this code right:</p>
<pre><code>def parrot_trouble(talking, hour):
  if talking == True and (hour &lt; 7 or hour &gt; 20):
    return True
  else : 
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look at the case <code>parrot_trouble(False, 21)</code>:</p>
<p>It should return <code>False</code>, but it returns <code>True</code> in the first version.</p>
<p>And that's because first version of code is treated as:</p>
<pre><code>def parrot_trouble(talking, hour):
  if (talking == True and hour &lt; 7) or hour &gt; 20:
    return True
  else : 
    return False
</code></pre>
<p>First condition (in parenthesis) is not met here, but it doesn't matter as the second is met, and between them you use <code>or</code>. This won't happen in the second version, as when the parrot is not talking, we have no trouble.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first function is not necesarally wrong, it is just ambiguous. You have to know if the <code>and</code> or the <code>or</code> statement is evaluated first to know the result.</p>
<p>The second function is very clear in how the condition is evaluated and therefore easier to read than the first.</p>
<p>It is also part of the ZEN of Python (<a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0020/</a>):
"In the face of ambiguity, refuse the temptation to guess."</p>
</div>
<div class="post-text" itemprop="text">
<p>Parenthesis execute their code first, but that isn't something that you want here. Not is first, but isn't applicable here. And is second and or is last. Parenthesis don't work so as expected. But it is not wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">Operator precedence</a> to your rescue. Look there for more details.<br/>
In your case, the first one translates to  <strong>"(if this and this) or that"</strong> because <code>and</code> has higher precedence. And the second one is self explanatory.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although you are not specifying what correct means, the difference between the 2 implementations is that the and operator or operators have a different precedence. This means that with out paranthesis the and is evaluated first.
See operator precedence in:
<a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The precedence order of the <code>and</code> is greater as compare to <code>or</code>.</p>
<p>In the first block of code, the <code>talking == True and hour &lt; 7</code> expression is evaluated first &amp; its subsequent result will be <code>or</code> with <code>hour &gt; 20</code> expression.</p>
<p>In the second block of code, the <code>hour &lt; 7 or hour &gt; 20</code> expression is evaluated first due to inner-round brackets &amp; its subsequent result will be <code>and</code> with <code>talking == True</code> expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>As is the case in most programming languages as well as <a href="https://www.conservapedia.com/Boolean_algebra#Order_of_Operations" rel="nofollow noreferrer">Boolean algebra</a>, the <code>and</code> operator has a higher precedence than the <code>or</code> operator in Python. So if you want the <code>or</code> operation to be evaluated before the <code>and</code> operation within the same expression, you would need to put parentheses around the <code>or</code> operation.</p>
<p>You can refer to the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">Operator precedence</a> section of Python's documentation for details.</p>
</div>
<span class="comment-copy">What do you mean by "right" and "wrong"? How do you call the function? What is the expected output? What is the actual output? And please read about <a href="http://stackoverflow.com/help/how-to-ask">how to ask good questions</a>, as well as <a href="https://codeblog.jonskeet.uk/2012/11/24/stack-overflow-question-checklist/" rel="nofollow noreferrer">this question checklist</a>. Lastly learn how to create a <a href="http://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable Example</a>.</span>
<span class="comment-copy">well it's in codingbat warmup 1 parrot trouble if you could check it out that would be wonderful.</span>
<span class="comment-copy">Well i mean the output is different if i don't put the parenthesis in the if statement</span>
<span class="comment-copy">Related: <a href="//stackoverflow.com/q/16679272">Priority of the logical statements NOT AND &amp; OR in python</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/16679272/priority-of-the-logical-statements-not-and-or-in-python">Priority of the logical statements NOT AND &amp; OR in python</a></span>
<span class="comment-copy">so the one in the parenthesis is evaluated first ?</span>
<span class="comment-copy">for the case <code>parrot_trouble(False, 21)</code> the code above gives you <code>False</code> in the first two conditions (in parenthesis) and <code>True</code> in the third. Having <code>False or True</code> will always return <code>True</code> and in your case the outcome should be <code>False</code></span>
<span class="comment-copy">and yes, without parenthesis it will 'look at' <code>and</code> first, then the result with <code>or</code></span>
<span class="comment-copy"><code>and</code> has a higher precedence than <code>or</code>, as pointed out in the link by @Aran-Fey</span>
<span class="comment-copy">@Piotrek great answer, also @s0meth1ngg I would simplify a way the function is implemented: <code>def parrot_trouble(talking, hour): return talking and (hour &lt; 7 or hour &gt; 20)</code></span>
<span class="comment-copy">so what's the difference if i dont put the parenthesis in the if statement?</span>
<span class="comment-copy">in the function evaluation there is no difference. The difference is in the readability of your code</span>
<span class="comment-copy">My problem is this : We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return True if we are in trouble.</span>
<span class="comment-copy">And when i type the first one it doesnt work the same as the 2nd one i dont know why</span>
<span class="comment-copy">Please read this tutorial: <a href="https://www.tutorialspoint.com/python/logical_operators_example.htm" rel="nofollow noreferrer">tutorialspoint.com/python/logical_operators_example.htm</a></span>
