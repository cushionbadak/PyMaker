<div class="post-text" itemprop="text">
<p>I've read that there is no strict enforcement of Encapsulation in Python. <strong>slots</strong> is generally used for purposes of <strong>faster attribute access</strong> and <strong>memory savings</strong> as reflected in <a href="https://stackoverflow.com/questions/472000/usage-of-slots">here</a>. However can encapsulation be enforced strictly with the usage of slots and decorators as shown in the following code:</p>
<pre><code>class GetSet(object):

__slots__ = ["attrval"]
def __init__(self,value):
    self.attrval = value

@property
def var(self):
    #print 'getting the "var" attribute'
    return self.attrval

@var.setter
def var(self,value):
    #print 'setting the "var" attribute'
    self.attrval = value

@var.deleter
def var(self):
    #print 'deleting the "var" attribute'
    self.attrval = None
</code></pre>
<p>An instance of GetSet won't have dynamic variable setting(due to slots) and also the setter and getter methods would invoke the method definitions in the class. Isn't encapsulation invoked entirely?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I've read that there is no strict enforcement of Encapsulation in Python.</p>
</blockquote>
<p>Because attributes are public always. And they can be reached no matter what you do, even if you use <code>__</code> member prefix:</p>
<pre><code>class GetSet(object):

    __slots__ = ["__attrval"]
    def __init__(self,value):
        self.__attrval = value

    @property
    def var(self):
        print 'getting the "var" attribute'
        return self.__attrval

    @var.setter
    def var(self,value):
        print 'setting the "var" attribute'
        self.__attrval = value

    @var.deleter
    def var(self):
        #print 'deleting the "var" attribute'
        self.__attrval = None

obj = GetSet(100)
# print obj.__attrval # error
# obj.__attrval = 200 # error
print obj._GetSet__attrval # got it.
</code></pre>
<p>You just encapsulate by convention, you use single <code>_</code> to signal your library code users that's a private member and they respect you, because otherwise their client-code can face consequences in the future.</p>
<p>Properties are convenient because they allow you to avoid completely getters and setters. If you need them later you can add a property.</p>
</div>
<span class="comment-copy">Could you explain how you came up with <code>print obj._GetSet__attrval</code>, also what did you mean by "Properties are convenient because they allow you to avoid completely getters and setters. If you need them later you can add a property."  Also, is there anyway to bypass slots for dynamically initializing attributes.Thanks a lot for the answer.</span>
<span class="comment-copy">It's called name mangling. Please read section <a href="https://docs.python.org/3/tutorial/classes.html?highlight=mangling" rel="nofollow noreferrer">9.6 Private Variables</a></span>
<span class="comment-copy">@P.SaiPrasanth: for the remaining, I mean in Python you usually add members to class that you know are public, but you don't care. If latter you need to make members read-only, or member validation, or access interception you change the member name to <code>_membername</code> to make clear it should not be accessed from outside, and then you use the property decorator to add a property named <code>membername</code>. The client code still works with no changes and you get "getter/setter" functionality behing the scenes.</span>
