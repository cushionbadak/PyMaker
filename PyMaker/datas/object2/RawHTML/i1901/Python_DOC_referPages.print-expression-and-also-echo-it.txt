<div class="post-text" itemprop="text">
<p>I mean to define a function <code>print_echo</code> that replaces <code>print</code>, such that in addition to printing the result of an expression it prints the expression itself. </p>
<p>If I simply pass the expression as a string and use <code>eval</code> inside <code>print_echo</code>, it will not know any variable local to the caller function.
My current code is</p>
<pre><code>def print_echo( expr ) :
    result = eval( expr )
    print( expr + ' =&gt; ' + str( result ) + ' ' + str( type( result ) ) )
    return
</code></pre>
<p>But when using</p>
<pre><code>def my_func( params ) :
    a = 2
    print_echo( "a" )
</code></pre>
<p>I get (no surprise)</p>
<pre><code>NameError: name 'a' is not defined
</code></pre>
<p>I mean to get</p>
<pre><code>    a =&gt; 2 &lt;type 'int'&gt;
</code></pre>
<p>I conceived two ways of working around this. </p>
<ol>
<li><p>Use a Python like alternative for C preprocessor macros. 
Something like <a href="https://stackoverflow.com/questions/36491714/c-preprocessor-macro-equivalent-for-python">C Preprocessor Macro equivalent for Python</a></p></li>
<li><p>Pass all local variables to print_echo.
Something like <a href="https://stackoverflow.com/questions/3136915/passing-all-arguments-of-a-function-to-another-function">Passing all arguments of a function to another function</a></p></li>
</ol>
<p>Since I find inconvenient aspects for each of the two,
<strong>Is there any alternative to these?</strong></p>
<p>Note that expr is a generic expression, not necessarily the name of a variable. </p>
</div>
<div class="post-text" itemprop="text">
<p>Important Note: There can be more error handling to this case.
For more info, you can see <strong>inspect</strong> and explore it further.
<a href="https://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer">https://docs.python.org/2/library/inspect.html</a></p>
<pre><code>import inspect

# NOTE: this only prints the local variables to the function
def print_echo( *expr ) :

    frame = inspect.currentframe().f_back # see the previous frame and what all variable it's previous caller knows
    values = inspect.getargvalues(frame)[3]
    print values # just to understand what it is, remove it later
    for e in expr:
        try:
            result = values[e]
        except KeyError:
            eval(e) # see the globally defined variables, if not found local to previous function.
        print( str(e) + ' =&gt; ' + str( result ) + ' ' + str( type( result ) ) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a> only takes the global namespace, and the namespace local to where it is called, into account.</p>
<p>In your case, you need the namespace of where <code>print_echo</code> is called (i.e., the "parent" namespace of where <code>eval</code> is called) as the local namespace, which you can get by using the <a href="https://docs.python.org/3/library/inspect.html?highlight=locals#types-and-members" rel="nofollow noreferrer"><code>inspect</code></a> module and pass to <code>eval</code> as an argument.</p>
<pre><code>import inspect

def print_echo(expr):
    outer_locals = inspect.currentframe().f_back.f_locals
    result = eval(expr, globals(), outer_locals)
    print(expr, '=&gt;', result, type(result))

a = 2
print_echo('a')

def f():
    b = 3
    print_echo('b')

f()
</code></pre>
<p>Python 3 output:</p>
<pre class="lang-none prettyprint-override"><code>a =&gt; 2 &lt;class 'int'&gt;
b =&gt; 3 &lt;class 'int'&gt;
</code></pre>
</div>
<span class="comment-copy">I think i understand, but can you provide a toy example to illustrate desired input and output?</span>
<span class="comment-copy">@Chris_Rands is right. Give us some examples to better understand. Based on what I understood, traceback may help.. See this answer, <a href="https://stackoverflow.com/a/2553524/2895956">stackoverflow.com/a/2553524/2895956</a></span>
<span class="comment-copy">@Chris_Rands - I posted from a mobile, so it was hard to format and add code I had in my PC. Now I am completing.</span>
<span class="comment-copy">@SujayKumar - I do not see clearly how your link would help here.</span>
<span class="comment-copy">Cannot reproduce. For me this works as you expect. What Python version are you using? (edit: it works for me for both Python 2.7 and 3.5)</span>
<span class="comment-copy">It would be better to use the outer frame's globals (<code>f_globals</code>) and not those of <code>print_echo</code> (which just so happen to be the same in your example).</span>
<span class="comment-copy">@Dunes You mean replacing <code>globals()</code> by <code>f_back.f_globals</code>?</span>
