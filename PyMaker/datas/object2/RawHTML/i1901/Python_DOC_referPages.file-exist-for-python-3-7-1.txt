<div class="post-text" itemprop="text">
<p>in my project I'm doing, I've always used this part of the script to check if a file existed or not:</p>
<pre><code>path = os.path.join("myfile.txt")
conf = Path(path)
try:
    lc = conf.resolve()
except FileNotFoundError:
    print("new")
else:
    print("load")
</code></pre>
<p>It always worked (I used Python 3.4). Now, for some reason, I wanted to change the interpreter and use Python 3.7.1</p>
<p>Now, I only get printed "load", regardless of whether the file exists or not.
How should I solve?</p>
</div>
<div class="post-text" itemprop="text">
<p>The behavior of <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve" rel="noreferrer"><code>Path.resolve()</code></a> changed in Python 3.6; you now need to pass <code>strict=True</code> to make it fail when the file doesn't exist.</p>
<p>But it's probably easier to use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.exists" rel="noreferrer"><code>Path.exists()</code></a> instead. (Or <a href="https://docs.python.org/3/library/os.path.html#os.path.exists" rel="noreferrer"><code>os.path.exists()</code></a> if you want to work with path strings rather than <code>Path</code> objects.)</p>
</div>
<span class="comment-copy">+1, using an failure / exception for a regular feature is  (checking if a file exists) is always a bad idea.</span>
<span class="comment-copy">More than anything else, I needed a safe way to determine if a file existed or not. This is because I used it mainly to load or create a configuration file at the beginning of the script. I had found this method, so I did not know about this change in Python 3.6</span>
<span class="comment-copy">The file verification was normally found in <code>__init__</code> in a class that took care of the configuration file.</span>
<span class="comment-copy">@BlackFenix06 why not just try always opening the file for reading and create it if you get a <code>FileNotFoundError</code> exception during that?</span>
<span class="comment-copy">@ZainanVictorZhou Well, Python is less particular about that than other languages (in particular contrast to C++ where throwing an exception entails significant overhead). But I do agree that ways of doing things that don't involve throwing an exception are usually preferable.</span>
