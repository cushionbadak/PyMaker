<div class="post-text" itemprop="text">
<p>I am writing a RESTful api using Flask and Flask-SQLalchemy, as well as Flask-Login. I have a model <code>Users</code> that's initialized like:</p>
<pre><code>class Users(UserMixin, db.Model):
    __tablename__ = "users"
    # STATIC Standard required info
    id = db.Column("id", db.Integer, primary_key = True)
    public_id = db.Column("public_id", db.String(50), unique = True)
    email = db.Column("email", db.String(50), unique = True)
    username = db.Column("username", db.String(20), unique = True)
    password = db.Column("password", db.String(20))

    # DYNAMIC Standard required info
    lat = db.Column("lat", db.Float)
    lon = db.Column("lon", db.Float)
</code></pre>
<p>There are other elements in the table but the lat and lon are most relevant. I have a method <code>distanceMath()</code> that takes in the currently logged in user's latitude and longitude, as well as a latitude and longitude from the table to calculate distance between them. But I can't figure out how to access the table values during the following query that calls <code>distanceMath</code> without receiving a syntax error:</p>
<pre><code>lat1 = current_user.lat
lon1 = current_user.lon
users = Users.query.filter(distanceMath(lat1, Users.lat, lon1, Users.lon)==1)
    output = []
    for user in users:
        data = {}
        data["username"] = user.username
        output.append(data)
    return str(output)
</code></pre>
<p>Just in case, here's the <code>distanceMath</code> method:</p>
<pre><code># Haversine Distance
def distanceMath(lat1, lat2, lon1, lon2):
    distance = math.acos(math.sin(math.radians(lat1))*math.sin(math.radians(lat2))) + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.cos(math.radians(lon1)-math.radians(lon2))
    return distance
</code></pre>
<p>An example of the error is:</p>
<pre><code>TypeError: must be real number, not InstrumentedAttribute
</code></pre>
<p>Which, in my understanding, is essentially saying that <code>User.lat</code> and <code>User.lon</code> don't refer to a float or even a number, and instead an attribute to a table. My question is how to actually use what lat and lon are equal to (In the database they are equal to 37.7 and -122.4 respectively). </p>
</div>
<div class="post-text" itemprop="text">
<p>Your intuition is correct and the error is the result of passing SQLAlchemy's instrumented attributes to Python's <code>math</code> library functions, which have no clue what to do with such.</p>
<p>In order to query based on distance you can either fetch all the data from the database and filter in Python (usually not desired), or send the operation to the DBMS in the query for evaluation. The trick is then to form a suitable SQL expression. Instead of calling Python's math functions you need to create <a href="https://docs.sqlalchemy.org/en/latest/core/functions.html" rel="nofollow noreferrer">SQL function expressions using <code>func</code></a>:</p>
<pre><code># Bind math as a keyword argument and provide Python's math module as the default
def distanceMath(lat1, lat2, lon1, lon2, math=math):
    distance = math.acos(math.sin(math.radians(lat1))*math.sin(math.radians(lat2))) + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.cos(math.radians(lon1)-math.radians(lon2))
    return distance
</code></pre>
<p>and in the view:</p>
<pre><code>users = Users.query.filter(distanceMath(lat1, Users.lat, lon1, Users.lon, math=db.func) == 1)
</code></pre>
<p>You could also <a href="https://stackoverflow.com/a/51018368/2681632">wrap the distance calculations</a> in a <a href="https://docs.sqlalchemy.org/en/latest/orm/extensions/hybrid.html" rel="nofollow noreferrer">hybrid attribute</a> that would handle either producing an SQL expression or performing the calculation on instances in Python.</p>
<p>But there is a problem: SQLite does not have the required math functions by default. It does allow <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function" rel="nofollow noreferrer">creating custom functions</a> easily, though. Such operations should be handled once when a connection is created by the pool for the first time:</p>
<pre><code>import math
from sqlalchemy import event

# Before anything else DB related is performed:
event.listens_for(db.get_engine(), 'connect')
def create_math_functions_on_connect(dbapi_connection, connection_record):
    dbapi_connection.create_function('sin', 1, math.sin)
    dbapi_connection.create_function('cos', 1, math.cos)
    dbapi_connection.create_function('acos', 1, math.acos)
    dbapi_connection.create_function('radians', 1, math.radians)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I solved it by taking the distanceMath function and placing it into my Users model class and passing it "self" and "math", as well as referring to the table values accordingly: </p>
<pre><code>    def distanceMath(self, lat1, lon1, math=math):
        distance = math.acos(math.sin(math.radians(lat1))*math.sin(math.radians(self.lat))) + math.cos(math.radians(lat1))*math.cos(math.radians(self.lat))*math.cos(math.radians(lon1)-math.radians(self.lon))
        return distance
</code></pre>
<p>Then when performing the query, just pass in the current_user as the Users instance, and everything works perfectly:</p>
<pre><code>    users = Users.query.filter(current_user.distanceMath(lat1, lon1) == 1).all()
</code></pre>
</div>
<span class="comment-copy">"without receiving a syntax error": please include the error in the post as well. I took the liberty of editing your post some, but kept for example the indentation error in the view (?) code.</span>
<span class="comment-copy">Also, you could perhaps get some ideas from this answer: <a href="https://stackoverflow.com/a/51018368/2681632">stackoverflow.com/a/51018368/2681632</a>. The trick is to form an SQL expression evaluated in the database.</span>
<span class="comment-copy">Added an example of a syntax error. ****EDIT**** Also currently trying ideas from that link, will update.</span>
<span class="comment-copy">To be exact, that is not a syntax error :). Also you don't need to include "***** EDIT *****" when you edit. SO is not a forum and if you can improve your question as a whole (and make it useful for future readers as well), the better.</span>
<span class="comment-copy">Lol, yeah, sorry haven't slept yet.</span>
