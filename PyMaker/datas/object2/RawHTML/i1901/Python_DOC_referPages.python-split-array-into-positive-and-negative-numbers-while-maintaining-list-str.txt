<div class="post-text" itemprop="text">
<p>I've got this issue where I have to split a list of negative and positive numbers while keeping the list structure.</p>
<blockquote>
<p>Zeros are considered positive</p>
</blockquote>
<p><b>Example:</b></p>
<p>Input data</p>
<pre><code>[1,  1,  1, -2, -2, -2,  1,  1,  1, -2, -2, -2,  1,  1,  1]
</code></pre>
<p>Output data</p>
<pre><code>[[1,  1,  1], [-2, -2, -2], [1,  1,  1], [-2, -2, -2], [1,  1,  1]]
</code></pre>
<p>Could anyone please send me in a good direction of which would be a good approach to solve this problem? </p>
<p>I've looked into <code>np.split</code> with a condition or slicing with condition but no luck with that either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without further research I would go with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer">itertools.groupby</a> from the standard library. Maybe there is a better solution though.</p>
<pre><code>import itertools
vals = [1,  1,  1, -2, -2, -2,  1,  1,  1, -2, -2, -2,  1,  1,  1]
splitted = [list(g) for i, g in itertools.groupby(vals,lambda x: x&lt;0)]
</code></pre>
<p>As stated in the comments you will have to choose what to do with 0 and adjust the lambda accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use pandas:</p>
<pre><code>import pandas as pd
l = [1,  1,  1, -2, -2, -2,  1,  1,  1, -2, -2, -2,  1,  1,  1]
s = pd.Series(l)
s.groupby(s.diff().ne(0).cumsum()).agg(list).tolist()
</code></pre>
<p>Output:</p>
<pre><code>[[1, 1, 1], [-2, -2, -2], [1, 1, 1], [-2, -2, -2], [1, 1, 1]]
</code></pre>
<p>Another solution using numpy:</p>
<pre><code>np.split(l, np.diff(l).nonzero()[0]+1)
</code></pre>
<p>Output:</p>
<pre><code>[array([1, 1, 1]),
 array([-2, -2, -2]),
 array([1, 1, 1]),
 array([-2, -2, -2]),
 array([1, 1, 1])]
</code></pre>
</div>
<span class="comment-copy">Show your own effort and code to solve the problem (as properly formatted text in the question)</span>
<span class="comment-copy">what happens with 0s?</span>
<span class="comment-copy">@MichaelButscher Thanks for the comments unfortunately still kind of a newbie to python. If mabye someone would be so kind to only send me in the good direction by for example saying look into np.split or something thanks in advance</span>
<span class="comment-copy">Could you provide some background? Looks like it could be an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>.</span>
<span class="comment-copy">@Georgy The original problem is that i have to identify a peak (shape) in some sound. So my idea was to check the max of every wave in the peak.  I agree my solution may be a bit far fetched only by lack of time and prototype reasons this was the first idea to came up in my mind. If ofcourse you have any tips for me please let me know I am fairly new to all of this.</span>
