<div class="post-text" itemprop="text">
<p>Let us suppose we have the following structure:</p>
<pre><code>outer_module.py|
               |subfolder|
                         |__init__.py
                         |inner_module.py
                         |foo.py
</code></pre>
<p>In <code>outer_module.py</code> we'd have:</p>
<pre><code>from subfolder.inner_module import X
</code></pre>
<p>In <code>inner_module.py</code> we'd have:</p>
<pre><code>from foo import Y
</code></pre>
<p>Then I get a <code>ModuleNotFoundError: No module named 'foo'</code> running the <code>outer_module.py</code>. How can I import this submodule that imports a submodule without getting a ModuleNotFoundError?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>from foo</code> imports from a <strong>top level</strong> module <code>foo</code>. You need to explicitly qualify that you are looking for a module in the same package.</p>
<p>Use <code>.foo</code> to indicate you are importing from the same package:</p>
<pre><code>from .foo import Y
</code></pre>
<p>You can also specify an absolute path, but then you have to include the package name:</p>
<pre><code>from subfolder.foo import Y
</code></pre>
<p>Quoting from the <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow noreferrer"><code>import</code> statement documentation</a>:</p>
<blockquote>
<p>When specifying what module to import you do not have to specify the absolute name of the module. When a module or package is contained within another package it is possible to make a relative import within the same top package without having to mention the package name. By using leading dots in the specified module or package after from you can specify how high to traverse up the current package hierarchy without specifying exact names. One leading dot means the current package where the module making the import exists. Two dots means up one package level. Three dots is up two levels, etc. So if you execute <code>from . import mod</code> from a module in the <code>pkg</code> package then you will end up importing <code>pkg.mod</code>. If you execute <code>from ..subpkg2 import mod</code> from within <code>pkg.subpkg1</code> you will import <code>pkg.subpkg2.mod</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In <code>inner_module.py</code>, either use a relative or absolute import:</p>
<pre><code>from .foo import Y

# or

from subfolder.foo import Y
</code></pre>
<p>Documentation links:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#intra-package-references</a></li>
<li><a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a></li>
</ul>
</div>
