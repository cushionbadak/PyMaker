<div class="post-text" itemprop="text">
<p>I have to make a function that given a text of concatenated words without spaces and a list that both contains words that appear and do not appear in said text. </p>
<p>I have to create a tuple that contains a new list that only includes the words that are in the text in order of appearance and the word that appears the most in the text. If there are two words that appear the most number of times, the function will chose one on an alphabetical order (if the words appear like <code>"b"=3,"c"=3,"a"=1,</code> then it will chose <code>"b"</code>)  </p>
<p>Also I have to modify the original list so that it only includes the words that are not in the text without modifying its order. </p>
<p>For example if I have a </p>
<pre><code>list=["tree","page","law","gel","sand"]
text="pagelawtreetreepagepagetree"`
</code></pre>
<p>then the tuple will be</p>
<pre><code>(["page","tree","law"], "page") 
</code></pre>
<p>and list will become</p>
<pre><code>list=["gel","sand"]
</code></pre>
<p>Now I have done this function but it's incredibly slow, can someone help?</p>
<pre><code>ls=list

def es3(ls,text):
   d=[]
   v={}
   while text:
       for item in ls:
           if item in text[:len(item)]:
               text=text[len(item):]
               if item not in d:
                   d+=[item]
                   v[item]=1
               else:
                   v[item]+=1
   if text=="": 
       p=sorted(v.items())       
       f=max(p, key=lambda k: k[1])
       M=(d,f[0])
       for b in d:
           if b in lista:
               ls.remove(b)
       return (M)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python strings are immutable - if you modify them you create new objects. Object creation is time/memory inefficient - almost all of the times it is better to use lists instead.</p>
<p>By creating a list of all possible <code>k</code>-lenght parts of <code>text</code> - <code>k</code> being the (unique) lenghts of the words you look for ( 3 and 4 in your list) you create all splits that you could count and filter out that are not in your word-set:</p>
<pre><code># all 3+4 length substrings as list - needs 48 lookups to clean it up to whats important
['pag', 'page', 'age', 'agel', 'gel', 'gela', 'ela', 'elaw', 'law', 'lawt', 'awt', 
 'awtr', 'wtr', 'wtre', 'tre', 'tree', 'ree', 'reet', 'eet', 'eetr', 'etr', 'etre', 
 'tre', 'tree', 'ree', 'reep', 'eep', 'eepa', 'epa', 'epag', 'pag', 'page', 'age', 
 'agep', 'gep', 'gepa', 'epa', 'epag', 'pag', 'page', 'age', 'aget', 'get', 'getr', 
 'etr', 'etre', 'tre', 'tree']
</code></pre>
<p>Using a set for "is A in B" checks makes the coder faster as well - sets have O(1) lookup - list take the longer the more lements are in it (worst case: n). So you eliminate all words from the <code>k</code>-lenght parts list that do not match any of the words you look for (i.e. <code>'eter'</code>):</p>
<pre><code># whats left after the list-comprehension including the filter criteria is done
['page', 'gel', 'law', 'tree', 'tree', 'page', 'page', 'tree']
</code></pre>
<p>For counting iterables I use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a> - a specialiced dictionary .. that counts things. It's <code>most_common()</code> method returns sorted tuples (key,count) sorted by most occured first which I format to a return-value that matches your OP.</p>
<p>One version to solve it respection overlapping results:</p>
<pre><code>from collections import Counter

def findWordsInText(words,text):
    words = set(words) # set should be faster for lookup
    lens = set(len(w) for w in words)

    # get all splits of len 3+4 (in this case) from text
    splitted = [text[i:i+ll] for i in range(len(text)-min(lens)) for ll in lens 
                if text[i:i+ll] in words] # only keep whats in words

    # count them
    counted = Counter(splitted)

    # set-difference
    not_in = words-set(splitted)

    # format as requested: list of words in order, most common word
    most_common = counted.most_common()
    ordered_in = ( [w for w,_ in most_common], most_common[0][0] )

    return list(not_in), ordered_in

words = ["tree","page","law","gel","sand"]

text = "pagelawtreetreepagepagetree"

not_in, found = findWordsInText(words,text)

print(not_in)
print(found)
</code></pre>
<p>Output:</p>
<pre><code>['sand']
(['page', 'tree', 'gel', 'law'], 'page')
</code></pre>
</div>
<span class="comment-copy">dont call lists list - or by other built-in names, they get shadowed and are no longer usable</span>
<span class="comment-copy">please use speaking names for variables - what is <code>d</code> what is <code>v</code> what is <code>p</code> <code>f</code> <code>M</code></span>
<span class="comment-copy">Why are you modifying <code>text</code> at all? Also, how should the code behave if you have overlapping strings, like <code>ls=['tree','eel','law']</code> and <code>text='treelaw'</code>?</span>
<span class="comment-copy">d is the new list, v is a dictionary, f is the max value of the dictionary and M is the tuple</span>
<span class="comment-copy">I'm modifying text so that I don't have overlapping strings. For example with ls=['tree','eel','law']  and text='treelaw' , the function will first find tree , than eliminate it so that I have text='law' and then find law.</span>
