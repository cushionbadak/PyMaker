<div class="post-text" itemprop="text">
<p>I'm trying to build a simple DSL (domain specific language) in Python3 for a special kind of testing. The DSL infrastructure will define some commands for testing and then it will run external Python scripts written in terms of those commands, but also potentially containing any other valid Python.</p>
<p>The first problem is to run the external scripts independently, without accumulating side effects from one script to another as the scripts are executed in a loop.</p>
<p>The second problem is to execute functions (e.g., <code>on_setup()</code>) defined in the external scripts themselves. These functions need to be executed at the DSL interpreter level.</p>
<p>Here is skeleton code for the testing framework ("cutest.py"):</p>
<pre><code># DSL command
def test(title):
    print("test:", title)
    try:
        on_setup() # function from the current test
    except:
        print("on_setup() not found")

# DSL command
def expect(str):
    print("expect:", str)

# other DSL commands...

def main():
    import glob
    scripts = glob.glob("test*.py")
    for fname in scripts:
        print("*******", fname)
        try:
            exec(open(fname).read(), globals())
        except:
            print("errors in script:", fname)

if __name__ == "__main__":
    main()
</code></pre>
<p>And here is "test_1.py" script:</p>
<pre><code>def on_setup():
    print("test_1.py:on_setup")

test("My first test")
expect("foo")
</code></pre>
<p>And finally, here is "test_2.py" script:</p>
<pre><code>test("My second test")
expect("bar")
</code></pre>
<p>Note that the "test_2.py" does <strong>NOT</strong> define its <code>on_setup()</code> function.</p>
<p>Now, when I run <code>python cutest.py</code> in the directory with <code>test_1.py</code> and <code>test_2.py</code>, I get the following output:</p>
<pre><code>******* test_1.py
test: My first test
test_1.py:on_setup
expect: foo
******* test_2.py
test: My second test
test_1.py:on_setup
expect: bar
</code></pre>
<p>The problem is that the output from <code>test_2.py</code> shows "test_1.py:on_setup" (a side effect from running <code>test_1.py</code>, whereas it should show "on_setup() not found", because <code>on_setup()</code> is not defined in <code>test_2.py</code>.</p>
<p>In my skeleton code "cutest.py", I used the Python <code>exec(.., globals())</code> call, but perhaps the problems can be solved using <code>__import__()</code> or some other mechanism.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found an acceptable way to make it work, and I'd like to know what Python gurus think of it.</p>
<p>So, here is the modified "DSL interpreter" code ("cutest.py"):</p>
<pre><code># DSL command
def test(title):
    print("test:", title)
    global glb_dict
    try:
        glb_dict['on_setup']() # function from the current test
    except:
        print("on_setup() not found")

# DSL command
def expect(str):
    print("expect:", str)

# other DSL commands...

def main():
    import glob
    scripts = glob.glob("test*.py")
    global glb_dict
    for fname in scripts:
        glb_dict = {
            "test": test,
            "expect": expect
            # other commands...
        }
        print("*******", fname)
        try:
            exec(open(fname).read(), glb_dict)
        except:
            print("errors in script:", fname)

if __name__ == "__main__":
    main()
</code></pre>
<p>The first change is to use a global dictionary <code>glb_dict</code> instead of <code>globals()</code>. The <code>glb_dict</code> dictionary is initialized for each test script, so that any side effects are removed from the previous run.</p>
<p>The second change is the call to the test-specific <code>on_setup()</code> function, which now goes from the <code>glb_dict</code> dictionary, like this: <code>glb_dict['on_setup']()</code>.</p>
<p>The modified <code>cutest.py</code> code executes the same two test scripts as follows:</p>
<p>python cutest.py</p>
<pre><code>******* test_1.py
test: My first test
test_1.py:on_setup
expect: foo
******* test_2.py
test: My second test
on_setup() not found
expect: bar
</code></pre>
<p>Specifically: (1) it finds the "test_1.py:on_setup" function and (2) it does not find the "on_setup" function in test_2.py (because it does not exist).</p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a> instead of <code>exec</code> and import the module into a variable instead of the global namespace.</span>
<span class="comment-copy">How do I actually use importlib in this case? How do I handle the dependencies from the test framework to the test scripts (commands) and from the test scripts to the framework (on_setup())?</span>
<span class="comment-copy">Your largest problem is that the test code will always be run at import time of test file. You can not run <code>on_setup()</code> before. To change that all test have be inside a function.</span>
<span class="comment-copy">The test scripts are not running <code>on_setup()</code>, they merely define it. But, as I understand your comment, you suggest wrapping the whole test script in a function. This complicates a bit the structure of test scripts, which I'd like to keep as simple as possible.</span>
