<div class="post-text" itemprop="text">
<p>I have a list in python with a few string entries. I want to compare this list with a word (say <code>thing</code>), and find the index of the entry in the list of which the chosen word is a part.</p>
<p>For example, letâ€™s consider the following list:</p>
<pre><code>lst = ['one_word', 'something', 'another_word']
word = 'thing'
</code></pre>
<p>Here <code>thing</code> is a part of the entry <code>something</code> in list <code>lst</code>. So, the index that I want is 1. </p>
<p>I checked <a href="https://stackoverflow.com/questions/3847472/get-index-of-character-in-python-list">this post</a>. But, it requires the word to exactly match the entry in the list. My case is different. The entry in the list <code>lst</code> can have suffix or prefix (or both), after or before the word under consideration. </p>
<p>How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to pair elements with their indexes and use a common substring-check with <code>in</code>:</p>
<pre><code>lst = ['one_word', 'something', 'another_word']
word = 'thing'

# 1: get all indexes
[i for i, s in enumerate(lst) if word in s]  # [1]

# 2: get only the first index (or None)
next((i for i, s in enumerate(lst) if word in s), None)  # 1
</code></pre>
<p>The first option uses a conditional <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to build a <code>list</code> of all "word-containing indexes". 
The second option uses <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> with an appropriate <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> and default value.</p>
<p>If you want to check only for true pre-/suffixes instead of substrings, you can substitute <code>word in s</code> with <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>s.startswith(word)</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#str.endswith" rel="nofollow noreferrer"><code>s.endswith(word)</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could simply loop over the list and check the word you search for against all the words in the list:</p>
<pre><code>lst = ['one_word', 'something', 'another_word']
word = 'thing'


def word_in_list(lst, word):
    for i, w in enumerate(lst):
        if word in w:
            return i
    # python3:
    # raise ValueError(f'word "{word}" not in list')
    # python2:
    raise ValueError('word "{}" not in list'.format(word))

print(word_in_list(lst, word))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Though elegant approaches &amp; answers already in place but just like to add Without enumerate():</p>
<pre><code>&gt;&gt;&gt; lst = ['one_word', 'something', 'another_word']
&gt;&gt;&gt; word = "thing"

&gt;&gt;&gt; listIndex = [lst.index(i) for i in lst if word in i]
&gt;&gt;&gt; listIndex 
[1]
</code></pre>
<p>Or Simply</p>
<pre><code>&gt;&gt;&gt; [lst.index(i) for i in lst if word in i]
[1]
</code></pre>
<p>Note: This is likely to run in O(n^2), whereas using enumerate will be O(n)</p>
</div>
<span class="comment-copy">schwobaseggl: Thank you so much for the wonderful answer. It is extremely helpful. I tested it; it works like a charm.</span>
<span class="comment-copy">hiro protagonist: Thanks for your help. I am using Python 2.7. The ValueError statement gives an error for me.</span>
<span class="comment-copy">@LingGuo ok, added the python 2 version.</span>
<span class="comment-copy">I just update the answer to match the requirement and to get downvote removed :)</span>
