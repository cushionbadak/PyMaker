<div class="post-text" itemprop="text">
<p>I am trying to create an extension module for Python in C++ using SWIG, which can return a Numpy array to Python. This numpy array is multidimensional and each cell can have a value or a list of values(int 64, [int32, int32] etc]. I am able to return a normal array to Python from C++. Could anyone guide me how to proceed with this? I come across numpy.i, <strong>arrayinterface</strong>, typemaps and I am not quite sure how to begin with. Could someone please guide me in this regard? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the Numpy C API is a good approach. You can still use SWIG. But I would advice strongly against using SWIG typemaps, they are very complicated. Instead you can accept and return Numpy arrays as PyObject* pointer in your SWIG'ed signature and build/extract them using the C API. SWIG will wrap this correctly.</p>
<p>If this is your first Python extension, make sure you read the <a href="https://docs.python.org/3/c-api/intro.html" rel="nofollow noreferrer">Python C API intro</a>. At the very least, you need to know the API contract for reference counting.</p>
<p>Another option would be to implement the <a href="https://docs.python.org/3/c-api/buffer.html#bufferobjects" rel="nofollow noreferrer">buffer protocol</a> API which is understood by numpy.</p>
<p>Yet another option is <a href="https://www.boost.org/doc/libs/1_64_0/libs/python/doc/html/numpy/index.html" rel="nofollow noreferrer">Boost.Python</a> if you don't like C code into a C++ world. I don't have experience with it. Personally I like the Python C API for its low complexity.</p>
</div>
<span class="comment-copy">Should I begin with Numpy C API?</span>
<span class="comment-copy">Thank you so much for your response. I shall do some research based on your suggestions. I come to think that PyArray_SimpleNewFromData would help me accomplish it.</span>
