<div class="post-text" itemprop="text">
<p><strong>The problem:</strong></p>
<p>I have this list of specific time, for example:</p>
<pre><code>repeat = ['8:15','14:28','19:43','1:21']
</code></pre>
<p>Now I am trying to create a function that would output a list of <em>n</em> number of datetime objects like this:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; 
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2018, 10, 30, 17, 5, 55, 908000) # 2018-10-30 17:05:55
&gt;&gt;&gt; 
&gt;&gt;&gt; output = magic(repeat, how_many=3) # &lt;---
&gt;&gt;&gt; output
[datetime.datetime(2018, 10, 30, 19, 43), datetime.datetime(2018, 10, 31, 1, 21), datetime.datetime(2018, 10, 31, 8, 15)]
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; for i in output:
&gt;&gt;&gt;     print( i.strftime("%Y-%m-%d %H:%M:%S") )

2018-10-30 19:43:00
2018-10-31 01:21:00
2018-10-31 08:15:00
</code></pre>
<p><strong>My progress:</strong></p>
<p>So I tackled this issue with this solution:</p>
<pre><code>def next(datetime_object, repeat):
    # this function should calculate the next datetime from the datetime_object

    return next_datetime_object

def magic(repeat, how_many=10):
    converted = []
    for i in repeat:
        converted.append( datetime.datetime.strptime(i, '%H:%M') )

    now = datetime.datetime.now()

    output = [ next(now,converted) ]

    while len(output) &lt; how_many:
        output.append(
            next(output[-1] ,converted)
            )

    return output
</code></pre>
<p>Though I got stuck in creating this function <code>next()</code> which should calculate the next datetime object.</p>
<p>Also if anyone has any other alternative solution that is better than mine, please share it with me.</p>
<hr/>
<p><strong>Edit 1 (just for clarification)</strong></p>
<p>Input: <code>repeat = ['8:15','14:28','19:43','1:21']</code></p>
<p>Function: <code>magic(repeat, how_many=3)</code></p>
<p>Output: <code>[ datetime.datetime(2018, 10, 30, 19, 43), datetime.datetime(2018, 10, 31, 1, 21), datetime.datetime(2018, 10, 31, 8, 15) ]</code></p>
<p>Note: the output is dependent on the current <code>datetime.datetime.now()</code>. In the example above, the current time was <code>datetime.datetime(2018, 10, 30, 17, 5, 55, 908000)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You'd want to create <a href="https://docs.python.org/3/library/datetime.html#datetime.time" rel="nofollow noreferrer"><code>datetime.time()</code></a> objects, then make the sequence cyclic with <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle()</code></a> and <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.combine" rel="nofollow noreferrer">combine</a> these with <a href="https://docs.python.org/3/library/datetime.html#datetime.date" rel="nofollow noreferrer"><code>datetime.date</code> objects</a>:</p>
<pre><code>import datetime
from itertools import cycle, product, repeat
from bisect import bisect

def datetime_series(*timestrings, reference=None):
    times = sorted(datetime.time(*map(int, t.split(':'))) for t in timestrings)
    if reference is None:
        reference = datetime.datetime.now()
    date, tnow = reference.date(), reference.time()

    next_pos = bisect(times, tnow)  # index of next time object to use
    times = cycle(times + [None])
    for _ in range(next_pos):  # skip forward across the time objects
        next(times)

    for time in times:
        if time is None:
            # next day
            date += datetime.timedelta(days=1)
            time = next(times)
        yield datetime.datetime.combine(date, time)
</code></pre>
<p>The above uses <code>None</code> as a sentinel to detect that a the date value needs to be incremented a step, and the time strings are accepted as separate arguments, and you can pass in a different reference date (the default is to use <em>now</em>).</p>
<p>It's also an endless a generator, so you can iterate over it step by step, or use <code>itertools.slice()</code> to limit the number of results.</p>
<p>Personally, I'd alter make the function accept <code>datetime.time()</code> objects rather than pass in strings, so you just sort the arguments without having to parse and go from there.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2018, 10, 30, 17, 39, 46, 91967)
&gt;&gt;&gt; m = datetime_series('8:15', '14:28', '19:43', '1:21')
&gt;&gt;&gt; next(m)
datetime.datetime(2018, 10, 30, 19, 43)
&gt;&gt;&gt; next(m)
datetime.datetime(2018, 10, 31, 1, 21)
&gt;&gt;&gt; m = datetime_series('8:15', '14:28', '19:43', '1:21')
&gt;&gt;&gt; ten_results = list(islice(m, 10))
&gt;&gt;&gt; pprint(ten_results)
[datetime.datetime(2018, 10, 30, 19, 43),
 datetime.datetime(2018, 10, 31, 1, 21),
 datetime.datetime(2018, 10, 31, 8, 15),
 datetime.datetime(2018, 10, 31, 14, 28),
 datetime.datetime(2018, 10, 31, 19, 43),
 datetime.datetime(2018, 11, 1, 1, 21),
 datetime.datetime(2018, 11, 1, 8, 15),
 datetime.datetime(2018, 11, 1, 14, 28),
 datetime.datetime(2018, 11, 1, 19, 43),
 datetime.datetime(2018, 11, 2, 1, 21)]
&gt;&gt;&gt; question_1 = datetime.datetime(2008, 7, 31, 21, 26, 37)  # https://meta.stackexchange.com/a/30138
&gt;&gt;&gt; question_1_series = datetime_series('8:15', '14:28', '19:43', '1:21', reference=question_1)
&gt;&gt;&gt; pprint(list(islice(question_1_series, 10)))
[datetime.datetime(2008, 8, 1, 1, 21),
 datetime.datetime(2008, 8, 1, 8, 15),
 datetime.datetime(2008, 8, 1, 14, 28),
 datetime.datetime(2008, 8, 1, 19, 43),
 datetime.datetime(2008, 8, 2, 1, 21),
 datetime.datetime(2008, 8, 2, 8, 15),
 datetime.datetime(2008, 8, 2, 14, 28),
 datetime.datetime(2008, 8, 2, 19, 43),
 datetime.datetime(2008, 8, 3, 1, 21),
 datetime.datetime(2008, 8, 3, 8, 15)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>another solution is to create date time objects till it reaches the how_many. Then sort it and return the first how_many items.</p>
<p>Sample code is</p>
<pre><code>import datetime as dt

def magic(repeat, how_many=3):
    output = []
    now = dt.datetime.now()
    next_day = now
    while len(output) &lt; how_many:
        nextFormated = next_day.strftime("%Y-%m-%d")
        next_times = [dt.datetime.strptime(nextFormated + " " + s, "%Y-%m-%d %H:%M") for s in repeat if dt.datetime.strptime(nextFormated + " " + s, "%Y-%m-%d %H:%M") &gt; now]
        next_day += dt.timedelta(days=1)
        output = output + next_times
    output.sort()
    return output[:how_many]

repeat = ['8:15','14:28','19:43','1:21']
op = magic(repeat, 10)
print(dt.datetime.now())
print(op)
</code></pre>
<p>Output is</p>
<pre><code>2018-10-30 23:07:52.635834
[datetime.datetime(2018, 10, 31, 1, 21), datetime.datetime(2018, 10, 31, 8, 15), datetime.datetime(2018, 10, 31, 14, 28), datetime.datetime(2018, 10, 31, 19, 43), datetime.datetime(2018, 11, 1, 1, 21), datetime.datetime(2018, 11, 1, 8, 15), datetime.datetime(2018, 11, 1, 14, 28), datetime.datetime(2018, 11, 1, 19, 43), datetime.datetime(2018, 11, 2, 1, 21), datetime.datetime(2018, 11, 2, 8, 15)]
[Finished in 0.1s]
</code></pre>
</div>
<span class="comment-copy">Can you provide which is the expected output based on the input?</span>
<span class="comment-copy">Check the <i>Edit 1</i>. Expected output is a list of datetime objects.</span>
<span class="comment-copy">How should one choose the output datetimes based on the current datetime, at random? Or should one take the date from the current datetime and then output up to 4 datetimes taking from the list in order?</span>
<span class="comment-copy">In order. So basically, the list shows <i>allowed</i> times. And I need to get list of the NEAREST (CLOSEST) <i>allowed</i> time.</span>
<span class="comment-copy">and the list is in order from the nearest allowed time to the furthest.</span>
