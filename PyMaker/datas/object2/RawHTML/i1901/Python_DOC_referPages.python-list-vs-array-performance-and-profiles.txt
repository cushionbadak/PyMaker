<div class="post-text" itemprop="text">
<blockquote>
<p>This question, It's more for a discussion about the <code>array</code> vs <code>list</code> in python, and If It's worth the while changing a code base from <code>list</code>'s fo numbers to <code>arrays</code>'s. 
  This is using python standard modules not <code>numpy</code>.</p>
</blockquote>
<p>I was looking at the <code>array</code> module, from the python standard library, and It caught my attention, that I could very well do some "simple" numerical analysis and number crunching replacing my lists of numbers with arrays of doubles or floats, (depending on the case).</p>
<p>Does anyone that have experience with python's <code>array</code> object could share a comparison or why they choose to use them? I'm still having trouble with this decision. </p>
<p>My concern here, is If I can use in some way arrays of arrays, or list of arrays, and if that would boost my performance, right now I have lists of lists of numbers, and I'm trying to use python with no dependencies so no numpy. </p>
<p>If I'm correct the python <code>list</code> object internally It's a dynamic array, I'm not sure about that. </p>
<p>I ran this test using <code>size = sys.getsizeof</code> and <code>array = array.array</code>, I know that this may not be great comparison, but still It raises some questions. </p>
<pre><code>&gt;&gt;&gt; for i in range(0, 100, 5):
...     test = [1.0*j for j in range(i)]
...     a = array('f', test)
...     print(f"{i} | {size(a)} | {size(test)}")

len|array|list
---|-----|----
 0 |  32 |  36 
 5 |  52 |  68 
10 |  72 | 100 
15 |  92 | 100 
20 | 112 | 136
25 | 132 | 136
30 | 152 | 176
35 | 172 | 176
40 | 192 | 220
45 | 212 | 220
50 | 232 | 268
55 | 252 | 268
60 | 272 | 324
65 | 292 | 324
70 | 312 | 324
75 | 332 | 388
80 | 352 | 388
85 | 372 | 388
90 | 392 | 460
95 | 412 | 460
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your main concern is performance and you are dealing with numbers then Python's <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer" title="official python 3 array docs">array</a> module will be your answer. From the official Python 3 docs:</p>
<blockquote>
<p>This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined: <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer" title="official python 3 array docs">Type Code Table</a>.</p>
</blockquote>
<p>This type constraint is done to allow an efficient array implementation on the interpreter side, CPython for example. The type codes are a bridge between being <em>dynamically typed</em> (Python) and <em>statically typed</em> (C in case of CPython).</p>
<p>Otherwise using a <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a>, you will usually take some performance loss since a list can handle all types. I should caveat that the performance loss is negligible for smaller data-sets/operation rates.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since your main concern is performance and you are dealing with numbers then Python's <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer" title="official python 3 array docs">array</a> module will be your answer. From the official Python 3 docs:</p>
<blockquote>
<p>This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined: <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer" title="official python 3 array docs">Type Code Table</a>.</p>
</blockquote>
<p>This type constraint is done to allow an efficient array implementation on the interpreter side, CPython for example. The type codes are a bridge between Python being <em>dynamically typed</em> and C being <em>statically typed</em> (in case of CPython).</p>
<p>Otherwise using a <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a>, you will usually take some performance loss since a list can handle all types. I should caveat that the performance loss is negligible for smaller data-sets/operation rates.</p>
</div>
<span class="comment-copy">Arrays are flat sequences, lists are containers. Lists store references. Lists can be nested and hold any type, even mixed types. Arrays can't. For pure numbers, arrays are fine.</span>
<span class="comment-copy">but what about 2d arrays, that should be a list of lists ? or what? or an array, but with indexing such as <code>i, j =&gt; i + j*(i_max)</code> , so I can emulate the matrix, with an array?</span>
<span class="comment-copy">for 2d arrays you'd use numpy :)</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/176011/python-list-vs-array-when-to-use">Python List vs. Array - when to use?</a></span>
