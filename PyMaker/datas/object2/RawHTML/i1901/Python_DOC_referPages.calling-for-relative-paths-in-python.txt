<div class="post-text" itemprop="text">
<p>I have this below Python script that fetches a file from one location and copies that to another Target location. The below code works just fine if I define the paths with the absolute locations.</p>
<p>I am trying to rather define this using variables, which when done does not execute the script. There is no error that is thrown but the code does not seem to be executed.</p>
<p>Code:</p>
<pre><code>Path_from = r'/Users/user/Desktop/report'
Path_to = r'/Users/user/Desktop/report'

for root, dirs, files in os.walk((os.path.normpath(Path_from)), topdown=False):
        for name in files:
            if name.endswith('{}.txt'.format(date)):
                print
                "Found"
                SourceFolder = os.path.join(root, name)
                shutil.copy2(SourceFolder, Path_to)
</code></pre>
<p>I want to change the code from</p>
<pre><code>Path_from = r'/Users/user/Desktop/report'
</code></pre>
<p>to</p>
<pre><code>base_path = /Users/user/Desktop/
Path_from = r'base_path/{}'.format(type)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend you leave all the current working directory concerns to the user - if they want to specify a relative path, they can enter into the directory to which it relates before invoking the python and providing relative paths.  </p>
<p>This is what just about every linux tool and program does - rarely do they take a 'base path', but rather leave the job of providing valid paths relative to the current directory ( or absolute ) to the user.  </p>
<p>If you're dedicated to the idea of taking another parameter as the relative path, it should be pretty straightforward to do.  Your example doesn't have valid python syntax, but it's close:</p>
<pre><code>$ cat t.py
from os.path import join
basepath="/tmp"
pathA = "fileA"
pathB = "fileB"
print(join(basepath,pathA))
print(join(basepath,pathB))
</code></pre>
<p>note however that this prevents an absolute path being provided at script execution time.  </p>
<p>You could use a format instead, </p>
<pre><code>basepath="/tmp"
pathA = "fileA"
pathB = "fileB"
print( "{}/{}".format(basepath, pathA) )
print( "{}/{}".format(basepath, pathB) )
</code></pre>
<p>But then you're assuming that you know how to join paths on the operating system in question, which is why <code>os.path.join</code> exists. </p>
</div>
<div class="post-text" itemprop="text">
<p>If I'm reading this right, you could use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>, specifically <code>pathlib.Path</code> code would look like</p>
<pre><code>from pathlib import Path
import re
import shutil

path_from = Path("/") / "Users" / "user" / "Desktop" # Better IMO
# path_from = Path("/Users/user/Desktop")
path_to = Path("/") / "Users" / "user" / "OtherDesktop"

datename = "whatever"

for x in path_from.glob("*.txt"):
    if re.search(r"{}$".format(datename), x.stem): # stem is whatever is before the extension 
    # ex. something.txt -&gt; something

        shutil.copy(str(path_from / x.name), str(path_to / x.name))
</code></pre>
</div>
<span class="comment-copy">you need the r in base_path because the forward slash</span>
<span class="comment-copy">forward slashes aren't special characters, do they really need raw string literals? <a href="https://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-flags-do-and-what-are-raw-string-literals" title="what exactly do u and r string flags do and what are raw string literals">stackoverflow.com/questions/2081640/â€¦</a> . Backslashes sure but not forward slashes, right?</span>
<span class="comment-copy">@clearshot66 I have tried including r' before bath_path as well but no luck.  base_path = r'/Users/user/Desktop/'</span>
<span class="comment-copy">r'base_path/{}' is a raw string literal containing the same characters you used as a variable 'base_path', but it doesn't add the <i>value</i> of <code>base_path</code> in the string.  I'm not sure what <code>.format(type)</code> is supposed to mean but I'm just going to assume the last bit of your code example is was not faithfully copied into the question.</span>
<span class="comment-copy">thanks I realized where I was going wrong all this while.</span>
