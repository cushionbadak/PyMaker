<div class="post-text" itemprop="text">
<p>I'm using Pyodbc in Python to run some SQL queries. What I'm working with is actually longer than this, but this example captures what I'm trying to do:</p>
<pre><code>connection = pyodbc.connect(...)
cursor = connection.cursor(...)

dte = '2018-10-24'

#note the placeholders '{}'
query = """select invoice_id
    into #output 
    from table1 with (nolock) 
    where system_id = 'PrimaryColor' 
    and posting_date = '{}' 

    insert into #output
    select invoice_id
    from table2 with (nolock)
    where system_id = 'PrimaryColor'
    and posting_date = '{}'"""

#this is where I need help as explained below
cursor.execute(query.format(dte, dte))

output = pd.read_sql("""select *
                 from #output"""
                 , connection)
</code></pre>
<p>In the above, since there are only two <code>'{}'</code>, I'm passing <code>dte</code> to <code>query.format()</code> twice. However, in the more complicated version I'm working with, I have 19 <code>'{}'</code>, so I'd imagine this means I need to pass '<code>dte'</code> to <code>'query.format{}'</code> 19 times. I tried passing this as a list, but it didn't work. Do I really need to write out the variable 19 times when passing it to the function? </p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with the comments, <a href="https://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.read_sql.html" rel="nofollow noreferrer">pandas.read_sql</a> has a params argument which prevent from sql injection.</p>
<p>See <a href="https://stackoverflow.com/questions/24408557/pandas-read-sql-with-parameters">this post</a> to understand how to use it depending on the database.</p>
<p><a href="https://github.com/mkleehammer/pyodbc/wiki/Cursor" rel="nofollow noreferrer">Pyodbc</a> has the same parameter on the execute method. </p>
<blockquote>
<pre><code># standard 
cursor.execute("select a from tbl where b=? and c=?", (x, y))

# pyodbc extension 
cursor.execute("select a from tbl where b=? and c=?", x, y)
</code></pre>
</blockquote>
<hr/>
<p>To answer to the initial question, even if it is bad practice for building SQL queries : </p>
<blockquote>
<p>Do I really need to write out the variable 19 times when passing it to the function? </p>
</blockquote>
<p>Of course you don't :   </p>
<pre><code>query = """select invoice_id
into #output 
from table1 with (nolock) 
where system_id = 'PrimaryColor' 
and posting_date = '{dte}' 

insert into #output
select invoice_id
from table2 with (nolock)
where system_id = 'PrimaryColor'
and posting_date = '{dte}'""".format(**{'dte': dte})
</code></pre>
<p>or : </p>
<pre><code>query = """select invoice_id
into #output 
from table1 with (nolock) 
where system_id = 'PrimaryColor' 
and posting_date = '{0}' 

insert into #output
select invoice_id
from table2 with (nolock)
where system_id = 'PrimaryColor'
and posting_date = '{0}'""".format(dte)
</code></pre>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">Python 3.6+</a> : </p>
<pre><code>query = f"""select invoice_id
into #output 
from table1 with (nolock) 
where system_id = 'PrimaryColor' 
and posting_date = '{dte}' 

insert into #output
select invoice_id
from table2 with (nolock)
where system_id = 'PrimaryColor'
and posting_date = '{dte}'"""
</code></pre>
<p>Note the usage of f before """ ... """</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using a <code>UNION ALL</code> query to avoid the temp table needs and <a href="https://github.com/mkleehammer/pyodbc/wiki/Getting-started" rel="nofollow noreferrer">parameterization</a> where you set qmark placeholders and in a subsequent step bind values to them. And being the same value multiply the parameter list/tuple by needed number:</p>
<pre><code>dte = '2018-10-24'

# NOTE THE QMARK PLACEHOLDERS
query = """select invoice_id    
           from table1 with (nolock) 
           where system_id = 'PrimaryColor' 
             and posting_date = ? 

           union all

           select invoice_id
           from table2 with (nolock)
           where system_id = 'PrimaryColor'
             and posting_date = ?"""

output = pd.read_sql(query, connection, params=(dte,)*2)
</code></pre>
</div>
<span class="comment-copy">Thank you guys, i've edited</span>
<span class="comment-copy">@roganjosh thanks, i mixed up because he uses pandas as well. Edited</span>
<span class="comment-copy">Thank you! This did it!</span>
