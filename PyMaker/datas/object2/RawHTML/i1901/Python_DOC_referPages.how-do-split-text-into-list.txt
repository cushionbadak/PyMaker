<div class="post-text" itemprop="text">
<p>My data is :</p>
<pre><code>['I1 I2 I5', 'I2 I4', 'I2 I3', 'I1 I2 I4', 'I1 I3', 'I2 I3', 'I1 I3', 'I1 I2 I3 I5', 'I1 I2 I3']
</code></pre>
<p>but I want it like this:</p>
<pre><code>[['I1','I2', 'I5'], ['I2', 'I4'], ['I2' ,'I3'], ['I1',' I2', 'I4'], ['I1', 'I3'], ['I2', 'I3'], ['I1',' I3'], ['I1', 'I2','I3', 'I5'], ['I1', 'I2', 'I3']]
</code></pre>
<p>How can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>data = ['I1 I2 I5', 'I2 I4', 'I2 I3', 'I1 I2 I4', 'I1 I3', 'I2 I3', 'I1 I3', 'I1 I2 I3 I5', 'I1 I2 I3']

split_data = [item.split() for item in data]

print(split_data)
&gt;&gt;&gt;[['I1', 'I2', 'I5'], ['I2', 'I4'], ['I2', 'I3'], ['I1', 'I2', 'I4'], ['I1', 'I3'], ['I2', 'I3'], ['I1', 'I3'], ['I1', 'I2', 'I3', 'I5'], ['I1', 'I2', 'I3']]
</code></pre>
<p>The <code>split()</code> function of the string class separates a string into an array of strings. If you specify a string input in split, it will split the string according to the input. i.e. if your data was comma separated you could do:</p>
<pre><code>print('I1,I2,I5'.split(',')) 
&gt;&gt;&gt;['I1', 'I2', 'I5']
</code></pre>
<p>but by default, with no input, <code>split()</code> separates on white space and does <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow noreferrer">some smart things</a> around what happens if multiple spaces are present.</p>
<p>We then use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to create a list from using split on each of the elements of data.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy

mylist = ['I1 I2 I5', 'I2 I4', 'I2 I3', 'I1 I2 I4', 'I1 I3', 'I2 I3', 'I1 I3', 'I1 I2 I3 I5', 'I1 I2 I3']
myarray = numpy.asarray(mylist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can simply iterate over your initial list and split each item string with whitespace.
Then, you just append your split results to a new list.
Here is a sample code : </p>
<pre><code>inital = ['I1 I2 I5', 'I2 I4', 'I2 I3', 'I1 I2 I4', 'I1 I3', 'I2 I3', 'I1 I3', 'I1 I2 I3 I5', 'I1 I2 I3']

results = []
for i in inital:
    split = i.split(' ')
    results.append(splited)

print(results)
</code></pre>
<p>Best</p>
</div>
<span class="comment-copy">You should explain what you're providing instead of dropping a "try". You know, explain that what you're using is list comprehension, that it builds a list in place, <code>.split()</code> by default, without separator argument splits on whitespace, yada yada.</span>
<span class="comment-copy">I've added more detail as requested. I felt your suggested edit went into too much detail into list comprehension which was not the focus of the question and might confuse matters, so have written my own edit to address your concerns. Hope this is clearer.</span>
<span class="comment-copy">I use this function and I get my answer , thank you~</span>
<span class="comment-copy">-1 because not only it doesn't explain anything, it implies that you need to install, relatively to the problem the user is having, a bloated library. You don't need additional 9.9MB to split a string in Python, you know... Also this is what I get as a result <code>array(['1 2 3', 'a b c'], dtype='&lt;U5')</code>, it literally doesn't even do anything, just converts it to numpy array.</span>
<span class="comment-copy">Just a side note: This is a very similar solution already given by Andrew McDowell, but without using list comprehension and explicitely splitting by space. Also it's <i>splitted</i> not <i>splited</i>.</span>
