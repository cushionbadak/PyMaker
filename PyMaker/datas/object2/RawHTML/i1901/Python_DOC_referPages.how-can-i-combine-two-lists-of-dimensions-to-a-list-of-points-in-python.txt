<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2407398/how-to-merge-lists-into-a-list-of-tuples">How to merge lists into a list of tuples?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/1885300/how-to-join-lists-element-wise-in-python">How to join lists element-wise in Python?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Suppose I have:</p>
<pre><code>x1 = [1, 2, 3, 4]
x2 = [1, 4, 9, 16]
</code></pre>
<p>How can I combine them to points:</p>
<pre><code>points = [[1,1],[2,4], ...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>.</p>
<pre><code>&gt;&gt;&gt; X1 = [1, 2, 3, 4]
&gt;&gt;&gt; X2 = [1, 4, 9, 16]
&gt;&gt;&gt; 
&gt;&gt;&gt; [list(pair) for pair in zip(X1, X2)]
&gt;&gt;&gt; [[1, 1], [2, 4], [3, 9], [4, 16]]
</code></pre>
<p>If there's no particular reason to have the elements be lists, just use <code>zip</code> on its own to produce an iterator (Python 3) or list (Python 2) of tuples.</p>
<pre><code>&gt;&gt;&gt; list(zip(X1, X2)) # or just zip(X1, X2) in Python 2
&gt;&gt;&gt; [(1, 1), (2, 4), (3, 9), (4, 16)]
</code></pre>
<p>And if you don't even need all of these pairs in memory at the same time, for example if all you want to do is iterate over them, don't build a list. In Python 3, <code>zip</code> produces an iterator.</p>
<pre><code>&gt;&gt;&gt; pairs = zip(X1, X2)
&gt;&gt;&gt; for pair in pairs:
...:    print(pair)
...:    
(1, 1)
(2, 4)
(3, 9)
(4, 16)
&gt;&gt;&gt; 
&gt;&gt;&gt; pairs = zip(X1, X2)
&gt;&gt;&gt; next(pairs)
&gt;&gt;&gt; (1, 1)
&gt;&gt;&gt; next(pairs)
&gt;&gt;&gt; (2, 4)
</code></pre>
<p>Finally, if you want the Python 3 <code>zip</code> in Python 2, use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer"><code>izip</code></a> from <code>itertools</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want the <code>zip</code> function:</p>
<pre><code>&gt;&gt;&gt; for pair in zip(x1, x2):
...    print(pair)
...
(1, 1)
(2, 4)
(3, 9)
(4, 16)
&gt;&gt;&gt;
</code></pre>
<p>It yields a sequence of tuples, each containing a value from each of the arguments - in this case, with two arguments, you get two-element tuples.</p>
<p>If you really need lists, use</p>
<pre><code>for pair in zip(x1, x2):
    print(list(pair))
</code></pre>
<p>Also, be careful because if all the arguments aren't exactly the same length <code>zip</code> silently drops any values remaining after the shortest argument is exhausted.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>zip</code> with <code>map</code> for iterating through lists simultaneously:</p>
<pre><code>x1 = [1, 2, 3, 4]
x2 = [1, 4, 9, 16]

print(list(map(list, zip(x1, x2))))
# [[1, 1], [2, 4], [3, 9], [4, 16]]
</code></pre>
<p><code>zip(x1, x2)</code> returns a tuple of zipped values. We use <code>map</code> to convert these tuples to list to match with desired output. Since, <code>map</code> in Python 3 generates a map object, we cast it to list again to match with the desired output.</p>
</div>
<span class="comment-copy">It could be duplicated, but the title of the other questions is not that straightforward. So I didn't find them.</span>
<span class="comment-copy">This seems a little clumsy, and the <code>map</code> makes it harder to understand. There are easier ways to produce the needed lists. How about <code>list([a, b] for (a, b) in zip(x1,x2))</code> for example.</span>
<span class="comment-copy">@holdenweb, <code>map</code> is never harder to understand atleast to me. Moreover, if your list is significantly large, this can perform lazy operation which is handy at times.</span>
<span class="comment-copy">As can the generator expression <code>([a, b] for (a, b) in zip(x1,x2))</code> unless I am mistaken. <code>map</code> isn't the hammer that turns all Python problems into nails!</span>
