<div class="post-text" itemprop="text">
<p>Can a data frame column (Series) of lists be used as a conditional check within a dictionary? </p>
<p>I have a column of lists of words (split up tweets) that I'd like to feed to a vocab dictionary to see if they all exist - if one does not exist, I'd like to skip it, continue on and then run a function over the existing words.</p>
<p>This code produces the intended result for one row in the column, however, I get a "unhashable type list" error if I try to apply it to more than one column.</p>
<pre><code>w2v_sum = w2v[[x for x in train['words'].values[1] if x in w2v.vocab]].sum()
</code></pre>
<p>Edit with reproducible example:</p>
<pre><code>df = pd.DataFrame(data={'words':[['cow','bird','cat'],['red','blue','green'],['low','high','med']]})

d = {'cow':1,'bird':4,'red':1,'blue':1,'green':1,'high':6,'med':3}
</code></pre>
<p>Desired output is total (sum of the words within dictionary):</p>
<pre><code>total   words
0   5   [cow, bird, cat]
1   3   [red, blue, green]
2   9   [low, high, med]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do what you want:</p>
<pre><code>import pandas as pd
df = pd.DataFrame(data={'words':[['cow','bird','cat'],['red','blue','green'],['low','high','med']]})

d = {'cow':1,'bird':4,'red':1,'blue':1,'green':1,'high':6,'med':3}
</code></pre>
<p>EDIT:</p>
<p>To reflect the lists inside the column, see this nested comprehension:</p>
<pre><code>list_totals = [[d[x] for x in y if x in d] for y in df['words'].values]
list_totals = [sum(x) for x in list_totals]
list_totals
[5, 3, 9]
</code></pre>
<p>You can then add list_totals as a column to your pd.</p>
</div>
<div class="post-text" itemprop="text">
<p>One solution is to use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and a list comprehension:</p>
<pre><code>from collections import Counter

d = Counter({'cow':1,'bird':4,'red':1,'blue':1,'green':1,'high':6,'med':3})

df['total'] = [sum(map(d.__getitem__, L)) for L in df['words']]

print(df)

                words  total
0    [cow, bird, cat]      5
1  [red, blue, green]      3
2    [low, high, med]      9
</code></pre>
<p>Alternatively, if you always have a fixed number of words, you can split into multiple series and use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.applymap.html" rel="nofollow noreferrer"><code>pd.DataFrame.applymap</code></a>:</p>
<pre><code>df['total'] = pd.DataFrame(df['words'].tolist()).applymap(d.get).sum(1).astype(int)
</code></pre>
</div>
<span class="comment-copy">can you add some data</span>
<span class="comment-copy">@J.Doe edited with data</span>
<span class="comment-copy">I have a list within each entry, not just a single word - so I still receive an unhashable type List error.</span>
<span class="comment-copy">I see. I adjusted the answer to reflect your data.</span>
