<div class="post-text" itemprop="text">
<p>This script takes whatever is inputted and formats it into a <code>"1/1"</code> type format.</p>
<p>It works with the first two <code>elif</code> statements, but when moving onto the third it still assigns the <code>2/</code> infront of the numbers. It's supposed to jump to <code>3/</code> and <code>4/</code> as you see below.</p>
<p>Your help is greatly appreciated.</p>
<pre><code>import re

port = input("Enter port number:")

if bool(re.search('\/', port)) == True:
    p = port

elif int(port) &lt;= 48:
    port = "1/" + str(port)

elif int(port) &gt;= 53 &lt;= 100:
    port = "2/" + str(port)

elif int(port) &gt;= 105 &lt;= 152:
    port = "3/" + str(port)

elif int(port) &gt;= 157 &lt;= 204:
    port = "4/" + str(port)

print(port)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is where you're trying to chain comparisons:</p>
<pre><code>elif int(port) &gt;= 53 &lt;= 100:
</code></pre>
<p>This checks to see if <code>int(port) &gt;= 53</code> and <code>53 &lt;= 100</code>. Since <code>53 &lt;= 100</code> is always true, this block will catch anything where <code>int(port) &gt;= 53</code>. What I assume you mean to do is:</p>
<pre><code>elif 53 &lt;= int(port) &lt;= 100:
</code></pre>
<p>This will only catch the cases where <code>int(port)</code> is between 53 and 100 (inclusive). You'll need to make similar changes to the rest of the <code>elif</code> blocks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your error is here:</p>
<pre><code>elif int(port) &gt;= 53 &lt;= 100:
</code></pre>
<p>This translates to (you can read about <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained comparisson operators</a>):</p>
<pre><code>elif int(port) &gt;= 53 and 53 &lt;= 100:
</code></pre>
<p>and will allways be <code>True</code> because of the second part; so thats why the later <code>elif</code> never get reached.</p>
<hr/>
<p>My suggestion:</p>
<pre><code>port = input("Enter port number:")
int_port = int(port)    # so we don't repeat the same operation multiple unnecessary times

if bool(re.search('\/', port)):
    pass
elif int_port &lt;= 48:
    port = "1/" + port
elif 53 &lt;= int_port &lt;= 100:
    port = "2/" + port
elif 105 &lt;= int_port &lt;= 152:
    port = "3/" + port
elif 157 &lt;= int_port &lt;= 204:
    port = "4/" + port

print(port)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You got your if-conditionals mixed up. Fix:</p>
<pre><code>def getPort(port):

    # https://stackoverflow.com/questions/12265451/ask-forgiveness-not-permission-explain
    # only convert to int once, if that does not work check for / else bail out
    try:
        p = int(port)
    except ValueError:
        if "/" in port: # no need for regex
            return port
        else:
            raise ValueError("Port either integer or somthing with / in it")

    if p &lt;= 48:               # 49-52 are not covered
        port = "1/" + port

    elif  53 &lt;= p &lt;= 100:     # move the condition between, the way you did it theyre True
        port = "2/" + port    # no matter because 53 &lt;= 100 all the time

    elif 105 &lt;= p &lt;= 152:     # 101-104 are not covered
        port = "3/" + port

    elif 157 &lt;= p &lt;= 204:     # 152-156 are not covered
        port = "4/" + str(port)

    else:
        raise ValueError("Port either integer or somthing with / in it")

    return port

for p in ["1","54","99","121","180","47/11","2000"]:
    try:
        print(getPort(p))
    except ValueError as e:
        print (e)
</code></pre>
<p>Output:</p>
<pre><code># Input: ["1","54","99","121","180","47/11","2000"]

1/1
2/54
2/99
3/121
4/180
47/11
Port either integer or somthing with / in it
</code></pre>
<hr/>
<p>You got some missing port ranges, 50 f.e. is not covered and would result in ValueError.</p>
</div>
<span class="comment-copy"><code>port = "1/" + str(port)</code>   ... port is a str already...</span>
<span class="comment-copy">where do you use the variable p? I see you assigning it (when re.search yields a True), but never using it.</span>
<span class="comment-copy">This script is a small portion of what will later be used.  That's why you see the p variable.  I couldn't move on until figuring these steps out first.</span>
<span class="comment-copy">This did it.  Awesome!</span>
<span class="comment-copy">@PatrickArtner I don't think so. I added a link to the python docs in my answer and the third paragraph in that linked section shows it using an <code>AND</code>.</span>
<span class="comment-copy">I was wrong, sorry.</span>
