<div class="post-text" itemprop="text">
<p>Receive a dict and return a new ordered dict </p>
<p><strong>A json returned from an api:</strong></p>
<pre><code>{
    'host': '192.168.0.1',
    'name': 'my_new_name',
    'port': 443,
    'something_more': 'hello'
}
</code></pre>
<p><strong>The goal:</strong></p>
<pre><code>{
    'name': 'my_new_name',
    'something_more': 'hello',
    'host': '192.168.0.1',
    'port': 443
}
</code></pre>
<p>there is some way where I can define the order of keys?</p>
<p>For example to achieve this order on <strong>goal</strong>:</p>
<pre><code>key_order = ('name', 'something_more', 'host', 'port')
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.7 or later*, you can specify the order of items in your dict, because insertion order is preserved. Create a new dictionary and insert the items in whatever order you like:</p>
<pre><code>def reorder_items(d, keys):
    d = d.copy() #we're going to destructively modify d, so make a copy first
    result = {}
    for key in keys:
        if key in d:
            result[key] = d.pop(key)
    #the user might not have supplied all the keys belonging to d, 
    #so insert anything we haven't touched yet
    result.update(d)
    return result

d = {
    'host': '192.168.0.1',
    'name': 'my_new_name',
    'port': 443,
    'something_more': 'hello'
}

desired_key_order = ('name', 'something_more', 'host', 'port')
goal = reorder_items(d, desired_key_order)
print(goal)
</code></pre>
<p>Result:</p>
<pre><code>{'name': 'my_new_name', 'something_more': 'hello', 'host': '192.168.0.1', 'port': 443}
</code></pre>
<p>(*you can also do this in CPython 3.6, but this is an implementation detail which should not be relied upon)</p>
<p>Prior to 3.7, you can't directly control how items in a dict are ordered. But you can use the <code>collections.OrderedDict</code> type. Use the function in the previous code block, switching out <code>result = {}</code> with <code>result = collections.OrderedDict()</code>.</p>
<hr/>
<p>A more concise (albeit slightly opaque) approach is:</p>
<pre><code>result = {key:d[key] for category in (desired_key_order, d.keys()) for key in category if key in d}
#or, for versions prior to 3.7,
result = collections.OrderedDict((key, d[key]) for category in (desired_key_order, d.keys()) for key in category if key in d)
</code></pre>
<p>This takes advantage of the fact that dict comprehensions and OrderedDict can be constructed with duplicate keys, while staying in order in relation to the first appearance of each key.</p>
<p>This is still a little longer than jpp's solution, since it is trying to be a bit more error-tolerant. It works even if <code>d</code> contains keys that <code>desired_key_order</code> doesn't, and vice-versa. Items whose order is not specified will appear in the result after items that do have a specified order.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension to feed a list of tuples to <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict

d = {'host': '192.168.0.1', 'name': 'my_new_name',
     'port': 443, 'something_more': 'hello'}

key_order = ('name', 'something_more', 'host', 'port')
res = OrderedDict([(k, d[k]) for k in key_order])

OrderedDict([('name', 'my_new_name'),
             ('something_more', 'hello'),
             ('host', '192.168.0.1'),
             ('port', 443)])
</code></pre>
<p>Works for Python 2.x onwards. For Python 3.7+, you can rely on insertion ordering and use a regular dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/collections.html#ordereddict-objects" rel="nofollow noreferrer">Ordered Dictionary</a> is the thing you need my friend.]</p>
<pre><code>from collections import OrderedDict
d = OrderedDict([
('name', 'my_new_name'),
('something_more', 'hello'),
('host', '192.168.0.1'),
('port', 443)
])
</code></pre>
<p>Edit: this only works in Python 3.6+. Also feed the <code>OrderedDict</code> with a list of tuples instead of a dictionary to maintain the order of key-value pairs.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're on Python &lt;3.7, <code>OrderedDict</code> preserves the order of the items:</p>
<pre><code>from collections import OrderedDict

d = OrderedDict([
        ('name', 'my_new_name'),
        ('something_more', 'hello'),
        ('host', '192.168.0.1'),
        ('port', 443)
    ])

# OrderedDict([('name', 'my_new_name'), ('something_more', 'hello'), ('host', '192.168.0.1'), ('port', 443)])
</code></pre>
</div>
<span class="comment-copy">What version of Python are you using? 3.7 has user-definable dict order, but anything earlier and you might be out of luck.</span>
<span class="comment-copy">What have you tried? Do you know about the enumerate method? You could use the enumerate method on the key_order tuple to get the index and element at each index to get values from the json returned by the API.</span>
<span class="comment-copy">Is the goal to print the dictionary that way or actually store it that way?  Basically what are you trying to accomplish with the order?</span>
<span class="comment-copy">@Kevin I'm using python 3.6.3</span>
<span class="comment-copy">@user1234 you just restated what you already said with no additional information.</span>
<span class="comment-copy">or you could simply do <code>goal={k: d[k]for k in ('name', 'something_more', 'host', 'port')}</code> if on 3.7+.</span>
<span class="comment-copy">This solution is preferable over my own if you're certain that <code>key_order</code> contains every key that might appear in <code>d</code>. If <code>d</code> contains keys that <code>key_order</code> doesn't, they wont' appear in the result. I went a little out of my way to ensure the result dict is the same size as the input dict, but this may be unnecessary if the input has a reliable and well-known structure.</span>
<span class="comment-copy">@Kevin, Yep, your solution is certainly more general. I implied a bit from OP's example data.</span>
<span class="comment-copy">This only works on Python 3.6+</span>
<span class="comment-copy">@EdgarR.Mondrag√≥n Thanks for pointing out. I appreciate it!</span>
