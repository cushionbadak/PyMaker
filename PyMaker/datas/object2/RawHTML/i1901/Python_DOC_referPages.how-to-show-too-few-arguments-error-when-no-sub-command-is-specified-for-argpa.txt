<div class="post-text" itemprop="text">
<p>An example script:</p>
<pre><code>import argparse

def main(args=None):
    parser = argparse.ArgumentParser(prog='PROG')

    subparsers = parser.add_subparsers(help='sub-command help')

    parser_a = subparsers.add_parser('a', help='a help')
    parser_a.add_argument('--foo', choices='ABC', help='foo help')

    parser_b = subparsers.add_parser('b', help='b help')
    parser_b.add_argument('--baz', choices='XYZ', help='baz help')

    args = parser.parse_args(args)

if __name__ == '__main__':
    main()
</code></pre>
<p>With Python2:</p>
<pre><code>$ python2 test.py
usage: PROG [-h] {a,b} ...
PROG: error: too few arguments
</code></pre>
<p>This is what I want, when missing sub command in command line, the script prompt an error of missing argument, and prompt me with a brief usage message.</p>
<p>But with Python3:</p>
<pre><code>$ python3 test.py
# nothing happens
</code></pre>
<p>It doesn't prompt any help about the usage and exit silently (though I can use <code>python3 test.py -h</code> to get the help messages). How can I change the code to make it works like the python2 way and make it compatible for both Python2 and Python3? </p>
<p>So in Python2, it can detect missing sub command error and quit early, but not for Python3. The problem for me is I have many code after <code>parser.parse_args(args)</code> that relies on the parsed args, it works for python2, and I find this issue when migrate it to Python3, if no sub command is specified in command line, these code will raise error, I need a way to detect that there is sub command specified in command line, and should not break the script to run under python2.</p>
<p>One possible solution for me could be check whether the parsed 'args' is empty, but it doesn't work for me because my script has some global options like:</p>
<pre><code>parser.add_argument('--go', choices='123', help='global option help')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the 3.7 docs the subcommands section, <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#sub-commands</a>, includes</p>
<blockquote>
<ul>
<li>required - Whether or not a subcommand must be provided, by default False.</li>
</ul>
</blockquote>
<p>This is missing in earlier v3 versions, but you can use</p>
<pre><code>subparsers.required = True
</code></pre>
<p>Also make sure you include a <code>dest='cmd'</code> (or your choice) so the error message can name the missing subparsers command.</p>
<p>Subparsers used to be required (since under the covers the argument is a positional which normally required).  But with a change in Py3 in how required arguments were tested and reported, subparsers fell through the cracks.  So Py3 subparsers have been not-required for some time.  Adding the <code>required</code> parameter gives you the option of fixing that (the default False is nod toward that awkward interim case).</p>
<pre><code>In [525]:     parser = argparse.ArgumentParser(prog='PROG')
     ...: 
     ...:     subparsers = parser.add_subparsers(help='sub-command help', dest='
     ...: cmd')
     ...:     subparsers.required = True
     ...:     parser_a = subparsers.add_parser('a', help='a help')
     ...:     parser_a.add_argument('--foo', choices='ABC', help='foo help')
     ...: 
     ...:     parser_b = subparsers.add_parser('b', help='b help')
     ...:     parser_b.add_argument('--baz', choices='XYZ', help='baz help')
     ...: 
     ...:     args = parser.parse_args([])
     ...: 
     ...: 
usage: PROG [-h] {a,b} ...
PROG: error: the following arguments are required: cmd
</code></pre>
</div>
<span class="comment-copy">Try renaming the program to something other than <code>test.py</code> just to save yourself headaches later. I see your Python 3 result on both 3.6.5 and 2.7.15.</span>
<span class="comment-copy">I don't think the script name has anything to do with the results, and my testing under python3.6.6 and python2.7.15 show me different results as what I described in my question.</span>
<span class="comment-copy">You're right, it won't, but it's not wise to shadow the names of standard library packages is all. I merely reported my own results as a data point.</span>
<span class="comment-copy">Great, thanks for your answer, it works for me.</span>
