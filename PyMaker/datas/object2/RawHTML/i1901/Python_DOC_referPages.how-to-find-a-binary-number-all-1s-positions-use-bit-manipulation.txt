<div class="post-text" itemprop="text">
<p>For example, I have a number 210 or 11010010 in binary, the 2nd 5th 7th and 8th position is 1, so the result is [2, 5, 7, 8].</p>
<p>What is the fastest way to find that?</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Convert the number to binary:</p>
<pre><code>&gt;&gt;&gt; format(210, 'b')
'11010010'
</code></pre></li>
<li><p>Use a list comprehension and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to find the indices of the 1s:</p>
<pre><code>&gt;&gt;&gt; [i for i, digit in enumerate(reversed('11010010'), 1) if digit == '1'] 
[2, 5, 7, 8]
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Just loop over your binary number to get the result.</p>
<pre><code>a=format(210, 'b')
x=[]
for i in range(0,len(a)):
    if a[i] == '1':
        x.append(i+1)
</code></pre>
<p>1 position is [1, 2, 4, 7]</p>
</div>
<div class="post-text" itemprop="text">
<p>The fastest way is to precompute all combinations (only 256 of them) by whatever method, and store in a list (of lists).</p>
<hr/>
<p>You can build the list by appending 1 to all entries, then 2 to every other entries, then 3 to every fourth entries, and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>A solution in C++.</p>
<pre><code>#include&lt;iostream&gt;
using namespace std;
int main()
{
    int n=10;
    int counter=1;
    while(n)
    {
        if(n&amp;1==1)
        {
            cout&lt;&lt;counter&lt;&lt;" ";
        }
         n=n&gt;&gt;1;
        counter++;
    }

}
</code></pre>
<p>Read a bit about bitwise shift and &amp; operator, to understand the solution properly.</p>
</div>
<span class="comment-copy">Please pick <i>one</i> programming language, the one you're working with.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/31127824/what-are-pythons-equivalent-of-javascripts-reduce-map-and-filter">What are Python's equivalent of Javascript's reduce(), map(), and filter()?</a></span>
