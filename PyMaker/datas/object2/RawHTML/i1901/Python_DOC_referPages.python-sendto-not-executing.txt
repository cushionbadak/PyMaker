<div class="post-text" itemprop="text">
<p>I have a program that accepts coordinates over UDP, moves some equipment around, and then replies when the job is done.</p>
<p>I seem to have the same issue as this guy:</p>
<p><a href="https://stackoverflow.com/questions/31308318/python-sendto-doesnt-seem-to-send">Python sendto doesn't seem to send</a></p>
<p>My code is here:</p>
<pre><code>import socket
import struct
import traceback
def main():


    sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    sock.bind(('',15000))
    reply_sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)


    while True:
        try:
            data,addr = sock.recvfrom(1024)
            if data is not None:
                try:
                    coords = struct.unpack('&gt;dd',data)

                    #Stuff happens here 

                    print(f'moved probe to {coords}')

                    reply_sock.sendto(bytearray.fromhex('B'),('10.0.0.32',15001))
                except:
                    traceback.print_exc()
                    try:
                        reply_sock.sendto(bytearray.fromhex('D'),('10.0.0.32',15001))
                    except:
                        traceback.print_exc()
                    break
        except:
            pass
</code></pre>
<p>The program behaves as though the sendto call is just passed over; it accepts the packet, executes the print statements, and loops back around (It can execute the loop multiple times but never replies).  I'm looking at wireshark and no packets are ever sent outbound.  No errors are ever thrown.</p>
<p>Any ideas why this is happening?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p>The string must contain two hexadecimal digits per byte, with ASCII
  whitespace being ignored.</p>
</blockquote>
<p>So this happens:</p>
<pre><code>$ python3
Python 3.6.6 (default, Sep 12 2018, 18:26:19) 
[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; bytearray.fromhex('B')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: non-hexadecimal number found in fromhex() arg at position 1
&gt;&gt;&gt; 
</code></pre>
<p>Try this:</p>
<pre><code>reply_sock.sendto(bytearray.fromhex('0B'),('10.0.0.32',15001))
</code></pre>
<p>if that's what you mean.</p>
<p>Note that your <code>except</code> is catching <em>all</em> the exceptions, not just the ones you're expecting, so you're not seeing the error you're causing. Consider using something like <code>except OSError</code> here instead.</p>
<p>Also, think about reducing the amount of code in your <code>try</code> sections:</p>
<pre><code>coords = struct.unpack('&gt;dd',data)

#Stuff happens here 

print(f'moved probe to {coords}')

bytes_to_send = bytearray.fromhex('0B')
try:
    reply_sock.sendto(bytes_to_send,('10.0.0.32',15001))
except IOError as e1:
    print(e1)
    traceback.print_exc()

    bytes_to_send = bytearray.fromhex('0D')
    try:
        reply_sock.sendto(bytes_to_send,('10.0.0.32',15001))
    except IOError as e2:
        print(e2)
        traceback.print_exc()
        break
</code></pre>
<p>This way you're protecting <em>only</em> the code which you want to.</p>
</div>
<span class="comment-copy">You don't print any traceback for your outer try so you're potentially hiding the issue</span>
<span class="comment-copy">Thanks a lot, that extra digit did the trick.  But I'm confused by your explanation of my except statement.  If except is catching all errors, why didn't it catch the issue?</span>
<span class="comment-copy">Looking at the code, you said you're seeing the <code>print()</code> so it's getting there. Then I'd expect the first call to <code>bytearray.fromhex</code> to drop you into the first <code>except</code> section, so you get to <code>traceback.print_exc()</code> and then the next <code>try</code> section would hit another error with <code>bytearray.fromhex</code> so you'd go into the next <code>except</code> section and reach another <code>traceback.print_exc()</code>. Does that fit with what you see?</span>
<span class="comment-copy">The alternative I suggested it would have caused the <code>ValueError</code> from the <code>bytearray.fromhex</code> not to have been trapped, so you'll have noticed it before, rather than it being hidden, and you assuming that the <code>sendto</code> was causing the problem.</span>
<span class="comment-copy">So I'm guessing what happened is that if you noticed an error taking place, you didn't realise that it was a <code>ValueError</code> caused by <code>bytearray.fromhex</code>, rather than an <code>OSError</code> caused by <code>sendto</code>. That's why it's often helpful to put as little as possible into <code>try</code> sections and/or be really specific about what you're catching.</span>
<span class="comment-copy">I took a look at the exception documentation; what didn't make sense to me was that traceback.print_exc() wasn't printing anything.  This was the source of my confusion.  Why didn't the exception end up getting printed?</span>
