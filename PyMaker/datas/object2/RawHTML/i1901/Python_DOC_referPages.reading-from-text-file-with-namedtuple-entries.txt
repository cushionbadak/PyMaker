<div class="post-text" itemprop="text">
<p>I have a problem. I had a list consisting of namedtuples. I wrote this list to a file.txt. Now i want to read it back. I found out here that json is recommended for converting it beforehand and than saving it. But I need a solution for my already saved file. My textfile looks like this:</p>
<pre><code>file.txt:

[Hello(i=0, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0),...]
[Hello(i=1, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0),...]
[Hello(i=2, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0),...]
[Hello(i=3, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0),...]
</code></pre>
<p>If i use the split-method, it is almost as I want it to be, but as expected as strings:</p>
<pre><code>lines = input_data.split('\n')
lines
['[Hello(i=0, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0),...]','[Hello(i=1,...),...],...]']
</code></pre>
<p>Thank you very much guys!</p>
</div>
<div class="post-text" itemprop="text">
<p>As much as I hate promoting <code>eval()</code>, this must be one of those rare cases when any alternative solution is even worse.</p>
<pre><code>line = "[Hello(i=3, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0)]"
# Original definition, I assume
Hello = namedtuple('Hello', ['i','time','x','y'])
data = eval(line)
#[Hello(i=3, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0)]
</code></pre>
<p><strong>NB</strong> You should not use <code>eval</code> in any situation when the data that you read was not previously produced and saved by <em>yourself</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to parse your file as text, and extract the information using text manipulation techniques.</p>
<p>You could use a <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expression</a> here:</p>
<pre><code>import re

hello_pattern = re.compile(r'Hello\(i=(\d+), time=(\d+), x=(\d+), y=(\d+)\)')
</code></pre>
<p>This pattern matches the representation of your namedtuple values, and gives you access to the numbers for each values, albeit as strings:</p>
<pre><code>&gt;&gt;&gt; line = '[Hello(i=0, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0),...]'
&gt;&gt;&gt; hello_pattern.findall(sample)
[('0', '0', '0', '0'), ('0', '0', '0', '0')]
</code></pre>
<p>You can then convert those strings to integers again and recreate the instances; for a single line the list comprehension would be:</p>
<pre><code>[Hello(*map(int, match)) for match in hello_pattern.findall(line)]
</code></pre>
<p>and a demo of this on the same line:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Hello = namedtuple('Hello', 'i time x y')
&gt;&gt;&gt; [Hello(*map(int, match)) for match in hello_pattern.findall(sample)]
[Hello(i=0, time=0, x=0, y=0), Hello(i=0, time=0, x=0, y=0)]
</code></pre>
<p>So the complete solution would be:</p>
<pre><code>import re
from collections import namedtuple

Hello = namedtuple('Hello', 'i time x y')  # or import your own ready definition
hello_pattern = re.compile(r'Hello\(i=(\d+), time=(\d+), x=(\d+), y=(\d+)\)')

data = []
with open('file.txt') as inputfile:
    for line in inputfile:
        recovered = [
            Hello(*map(int, match))
            for match in hello_pattern.findall(line)
        ]
        data.append(recovered)
</code></pre>
</div>
<span class="comment-copy">Please use comments to give feedback to answers; question posts are just there for the question. Answerers donâ€™t get a notification for edits made to a question.</span>
<span class="comment-copy">I disagree that the alternatives are worse. Rather strongly.</span>
<span class="comment-copy">@MartijnPieters It depends on the definition of "worse," which is opinion-based :)</span>
<span class="comment-copy">No, there are objective criteria: <code>eval()</code> brings a security risk that is not needed in this context, because the input is perfectly regular and can thus be parsed with dedicated tools.</span>
<span class="comment-copy">@MartijnPieters Since the data were previously saved by the OP, this is <i>exactly</i> the context in which <code>eval</code> does not bring any security risks.</span>
<span class="comment-copy">There is also the <i>future</i> security risks that <code>eval()</code> poses when taught without further context to new programmers. <b>Always</b> include the full picture and always try to find alternatives. Unless someone fully understands what <code>eval()</code> does and doesn't do, it should be avoided. Just like cryptography and SQL without parameters.</span>
