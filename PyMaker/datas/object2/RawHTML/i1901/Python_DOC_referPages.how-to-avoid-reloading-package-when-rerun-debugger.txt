<div class="post-text" itemprop="text">
<p>Because I imported many packages, every time when I run my script in debug mode, it takes around a minute for me to hit my first line of code. </p>
<p>I run in debug mode many times a day, so I spend quite a bit time waiting. </p>
<p>Is there any way to speed it up?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to speed up the development cycle is to preserve your Python process so you
only need to load the packages once.</p>
<p>Instead of <em>running the script</em>, <a href="https://www.scipy-lectures.org/intro/language/reusing_code.html" rel="nofollow noreferrer">package the script itself as a module</a>. 
Open an interactive python (or perhaps <a href="https://ipython.org/" rel="nofollow noreferrer">IPython</a>) session, import your module, then
"run the script" by calling its main function.</p>
<p>If you make changes to the script, you will only have to reload your
module. Since the other modules are already loaded, this should be relatively
quick. Since <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">Python modules are cached</a>, importing the same module a second time is essentially instantaneous. </p>
<p>In Python, reloading can be done <a href="https://stackoverflow.com/q/437589/190597">this way</a>.
Or you could configure IPython to automatically reload modules or packages when they change <a href="https://stackoverflow.com/a/5399339/190597">this way</a>. IPython also has some nice debugging features, such as <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-pdb" rel="nofollow noreferrer">%pdb</a>, which will drop you into a debugger whenever an uncaught exception is raised.</p>
<hr/>
<p>So instead of your script.py looking like this:</p>
<pre><code>import xyz

statement1
statement2
statement3
</code></pre>
<p>You'd modify it to look like</p>
<pre><code>import xyz

def main():
    statement1
    statement2
    statement3

# This allows you to still run your module as a script:
if __name__ == '__main__':
    main()   
</code></pre>
<p>Then, at the interactive Python session prompt, you'd type</p>
<pre><code>&gt;&gt;&gt; import script   
&gt;&gt;&gt; script.main()
</code></pre>
<p>to run the script.</p>
</div>
<span class="comment-copy">How are you importing packages? for example are you doing "import json" or "from json import loads" Obviously the latter is much quicker as it only imports what you need.</span>
<span class="comment-copy">I could envision writing a small wrapper to load the imports and parse input from the terminal to a call to <code>exec</code>. This is a hacky solution and probably the wrong answer. you would run the wrapper like a normal python script and then use it to call the script you are testing.</span>
<span class="comment-copy">I am doing from json import loads. The problem is I am importing from other folk's package which also imports someone else' package. They might doing improt *, but I have no control over this..</span>
