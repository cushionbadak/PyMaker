<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14692690/access-nested-dictionary-items-via-a-list-of-keys">Access nested dictionary items via a list of keys?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>If I have a nested dictionary
<code>mydict={'a1':{'b1':1}, 'a2':2}</code>
and a list of indexes <code>index = ['a1', 'b1']</code> leading to an inner value, is there a pythonic / one-liner way to get that value, i.e. without resorting to a verbose loop like:</p>
<pre><code>d = mydict
for idx in index:
    d = d[idx]
print(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a>.</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; mydict = {'a1':{'b1':1}, 'a2':2}
&gt;&gt;&gt; keys = ['a1', 'b1']
&gt;&gt;&gt; reduce(dict.get, keys, mydict)
1
</code></pre>
<p><code>dict.get</code> is a function that takes two arguments, the <code>dict</code> and a key (and another optional argument not relevant here). <code>mydict</code> is used as the initial value.</p>
<p>In case you ever need the intermediary results, use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>.</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; list(accumulate([mydict] + keys, dict.get))
[{'a1': {'b1': 1}, 'a2': 2}, {'b1': 1}, 1]
</code></pre>
<p>Unfortunately, the function does not take an optional <code>initializer</code> argument, so we are prepending <code>mydict</code> to <code>keys</code>.</p>
</div>
<span class="comment-copy"><code>mydict[index[0]][index[1]]</code> seems to be what you are asking for.</span>
