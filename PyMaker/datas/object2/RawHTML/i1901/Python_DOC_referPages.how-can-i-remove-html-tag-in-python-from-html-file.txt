<div class="post-text" itemprop="text">
<p><strong>Summary:</strong> What regex string would I use to remove  tags in a HTML document?
Although, this may be a duplicate from a previous answer: <a href="https://stackoverflow.com/questions/11412758/how-to-remove-only-html-tags-in-a-string">How to remove only html tags in a string?</a> and <a href="https://stackoverflow.com/questions/4878452/remove-html-tags-in-string">Remove HTML tags in String</a>, I can not programme in those languages fully yet, so this is why I am asking the question.</p>
<p>I am completing a Python Exercise by Google: <a href="https://developers.google.com/edu/python/exercises/baby-names" rel="nofollow noreferrer">https://developers.google.com/edu/python/exercises/baby-names</a>
it requires you two parse HTML data using regex (the HTML is structured so it is easier). I've been having problems removing the tags surrounding the data:</p>
<pre><code>   def extract_names(filename):
  """
  Given a file name for baby.html, returns a list starting with the year string
  followed by the name-rank strings in alphabetical order.
  ['2006', 'Aaliyah 91', Aaron 57', 'Abagail 895', ' ...]
  """
  # +++your code here+++
  #open and read file
  file = open(filename,'r')
  HTML = file.read()
  #html file
  #print(HTML)

  #extract date
  date = re.search(r'(Popularity in )([\d]+)',HTML)
  print('Date: ',date.group(2))

  #find rank and name remove html tags
  ranking_tags = re.findall(r'&lt;td&gt;[\d]&lt;/td&gt;',HTML)
  rankings = []
  name_tags = re.findall(r'&lt;td&gt;[a-z]&lt;/td&gt;',HTML,re.IGNORECASE)
  names = []

  for value in ranking_tags:
      rankings.append(re.sub('[&lt;td&gt;&lt;/td&gt;]','',value))

  for value in name_tags:
    names.append(re.sub('[&lt;td&gt;&lt;/td&gt;]','',value))
  print(rankings)
  print(names)
</code></pre>
<p>Currently, my regex does not replace the tags, as they're wrong. I have already tried teaching myself how to remove the tags to no avail:
<a href="http://www.cbs.dtu.dk/courses/27610/regular-expressions-cheat-sheet-v2.pdf" rel="nofollow noreferrer">http://www.cbs.dtu.dk/courses/27610/regular-expressions-cheat-sheet-v2.pdf</a>
and
<a href="https://www.tutorialspoint.com/python/python_reg_expressions.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/python_reg_expressions.htm</a>
as well as looking at other sights before writing this.</p>
<p>Any suggestions would be much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>regex</code> is not required and to get the job done you can check existing implementations.</p>
<h2>Django's <code>strip_tags</code>:</h2>
<p><a href="https://github.com/django/django/blob/master/django/utils/html.py#L183" rel="nofollow noreferrer">https://github.com/django/django/blob/master/django/utils/html.py#L183</a></p>
<pre><code>def _strip_once(value):
    """
    Internal tag stripping utility used by strip_tags.
    """
    s = MLStripper()
    s.feed(value)
    s.close()
    return s.get_data()


@keep_lazy_text
def strip_tags(value):
    """Return the given HTML with all tags stripped."""
    # Note: in typical case this loop executes _strip_once once. Loop condition
    # is redundant, but helps to reduce number of executions of _strip_once.
    value = str(value)
    while '&lt;' in value and '&gt;' in value:
        new_value = _strip_once(value)
        if len(new_value) &gt;= len(value):
            # _strip_once was not able to detect more tags
            break
        value = new_value
    return value
</code></pre>
<p>You can modify that implementation.</p>
<h2>Python Standard Library and its <code>xml</code> module</h2>
<p><a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">https://docs.python.org/3/library/xml.etree.elementtree.html</a></p>
<p>It contains examples on how to use it properly.</p>
<h2>Use <code>lxml</code> package</h2>
<p><a href="https://lxml.de/api/lxml.etree-module.html#strip_tags" rel="nofollow noreferrer">https://lxml.de/api/lxml.etree-module.html#strip_tags</a></p>
<p>Example usage:</p>
<pre><code>strip_tags(some_element,
    'simpletagname',             # non-namespaced tag
    '{http://some/ns}tagname',   # namespaced tag
    '{http://some/other/ns}*'    # any tag from a namespace
    Comment                      # comments (including their text!)
    )
</code></pre>
</div>
<span class="comment-copy">I could use this. But the point of the exercise was to try and use regexes.</span>
