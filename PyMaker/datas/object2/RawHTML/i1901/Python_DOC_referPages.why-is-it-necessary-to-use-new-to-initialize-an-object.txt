<div class="post-text" itemprop="text">
<p>I'm trying to make a game in Python using pygame, but I accidentally had disabled the error checking in PyCharm. As a result, this is how I tried to initialize a <code>Vector2</code>:</p>
<pre><code>self.vel = pg.Vector2(0, 0)
self.acc = pg.Vector2(0, self.GRAVITY)
</code></pre>
<p>After I re-enabled the error checking, PyCharm gave me an error message, telling me to use <code>pg.Vector2.__new__(0, 0)</code> instead. After I did, the error message disappeared and the code worked.</p>
<p>Now for the actual question: </p>
<p>While the error messages were disabled, I wrote a lot of bad code like the example above. Strange enough, the code actually ran fine. The game could init and run properly, even while half the code had errors.</p>
<p>Could someone explain to me why the example above works, yet why it is considered bad?</p>
<p>Full code:</p>
<pre><code>import pygame as pg
from game.settings import *


class Player(pg.sprite.Sprite):
    """
    I'm a docstring hurr durr
    """

    ACCELERATION = 60 / FPS  # dummy value
    FRICTION = 1  # dummy value
    GRAVITY = 1  # dummy value
    LIFE = 5

    def __init__(self, x, y, h, w):
        super().__init__()

        self.x = x  # x position
        self.y = y  # y position
        self.h = h  # height
        self.w = w  # width

        self.vel = pg.Vector2.__new__(0, 0)
        self.acc = pg.Vector2.__new__(0, self.GRAVITY)

        self.rect = pg.Rect(x, y, w, h)

        self.image = pg.Surface(w, h)
        self.image.fill(RED)
        # self.image = pg.image.load("../resources/player.*")

    def update(self):
        # key updates
        keys = pg.key.get_pressed()
        if keys[pg.K_LEFT]:
            self.acc.x -= self.a
        if keys[pg.K_RIGHT]:
            self.acc.x += self.a
        # test jumping function
        if keys[pg.K_SPACE]:
            self.vel.y = -20

        # friction
        self.acc.x -= self.vel.x * self.FRICTION

        # update vel and pos
        self.vel.x += self.acc.x
        self.x += self.vel.x

        self.vel.y += self.acc.y
        self.y += self.vel.y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that PyCharm doesn't know what the real signature of the <code>__init__</code> method should be, because the file is distributed as a <a href="https://docs.python.org/3/faq/windows.html#is-a-pyd-file-the-same-as-a-dll" rel="nofollow noreferrer">.pyd</a> file (like a .dll). You can verify this by using the "Go to... Declaration" (Ctrl+B) function in pycharm on <code>pg.Vector2</code> in your code, and then on <code>pygame.math.Vector2</code> in pyame's <code>__init__.py</code> until you reach the code of <code>pygame.math</code>.  Here you'll see a declaration like this:</p>
<pre><code>def __init__(self): # real signature unknown; restored from __doc__
    pass
</code></pre>
<p>Observe also the note at the top of this <code>math.py</code> file:</p>
<pre><code># from C:\Users\User\AppData\Local\Programs\Python\Python35\lib\site-packages\pygame\math.cp35-win_amd64.pyd
# by generator 1.145
</code></pre>
<p>PyCharm is doing its best to try and generate something that looks like the actual code, but it is just a guess.</p>
<p>In short, you are right and pycharm is wrong in this case.</p>
<p>The exact same type of problem is described here:</p>
<p><a href="https://stackoverflow.com/questions/38384206/why-do-some-built-in-python-functions-only-have-pass">Why do some built-in Python functions only have pass?</a></p>
</div>
<span class="comment-copy">Can we see a bit more context, please? Where <i>are</i> those 2 lines of code you posted? Is that in an <code>__init__</code> method? Or in a <code>__new__</code> method? Can we have a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>?</span>
<span class="comment-copy">@Aran-Fey done.</span>
<span class="comment-copy">I can't see any such errors (or warnings) though.</span>
<span class="comment-copy">Sounds wrong to use <code>__new__</code> explicitly in this case. What exactly is PyCharms warning message? And what version of PyCharm do you use (and also which plugins)?</span>
<span class="comment-copy">Unexpected argument(s) Possible callees: Vector2(self: Vector2) Vector2.__new__(*args, **kwargs)</span>
