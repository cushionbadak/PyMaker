<div class="post-text" itemprop="text">
<p>I have a large Python program running on a Raspberry Pi, and every week or two it will get overloaded and throw an out of memory error.  I want to trap those errors and call a shell script "kill-and-relaunch.sh" (code below) that will kill the running Python processes and re-launch the program...so it needs to run the shell command as an entirely separate process. Two questions: (1) what is the best method to call the shell that will survive killing the original Python process; and (2) where would I put the error trapping code in a Python program that is already running in multiple processes...do I need to have the error trapping in each process?</p>
<p>Here is the shell command I want to call:</p>
<pre><code>kill $(ps aux | grep '[p]ython -u home_security.py' | awk '{print $2}')
cd ~/raspsecurity
source ~/.profile
workon py3cv34
nohup python -u home_security.py &amp;
</code></pre>
<p>Thank you for any suggestions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> might help?</p>
<pre><code>import subprocess

# do something

try:

    # trap the anticipated error zone

except:  # Best if you catch the specific error anticipated instead of catch-all.

    # log the error if you wish
    subprocess.run(my_ps_script)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could fire your shell script in a cronjob and add the error (or all) output in an file (as described here <a href="https://stackoverflow.com/a/7526988/7727137">https://stackoverflow.com/a/7526988/7727137</a>). </p>
</div>
