<div class="post-text" itemprop="text">
<pre><code>try:
    target = int(input("Please enter the ammount you are looking for :"))
except ValueError:
    print("wrong value please enter a number")
    target = int(input("Please enter the ammount you are looking for :"))
found = False
location = [] # I want to use this list as position argument for another array passed from another function. is it possible?


for pos in range(0, len(wydatki)):
    if wydatki[pos] == target:
        found=True
        location.append(pos)

if found==True:
    #prints the locations in the list that the target was found
    print (target,"\nappears in the following locations: ",months[location])
else:
    print (target,"\nwas not found in the list.")
</code></pre>
<p><strong>months[location]</strong> &lt;------ I would like to use list called location that holds more than one variable to print onto screen values assigned to positions in list called months is it possible?</p>
<p>As normally you can only use single variable to point to position in array?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can if you change your output a bit:</p>
<pre><code>target = 42
location = []
# 42 occures at positions 3,6,8
#           0 1 2 3  4 5 6  7 8  9
wydatki = [ 1,2,3,42,4,5,42,6,42,8]

#         pos: 01234567890
months = list("abcdefghijk")

# get the positions unsing enumerate
for pos,value in enumerate(wydatki):
    if value == target:
        location.append(pos)

if location: # empty lists are False, lists with elements are True
    #prints the locations in the list that the target was found
    print (target,"\nappears in the following locations: ", 
           ','.join( (months[a] for a in location) ) )
else:
    print (target,"\nwas not found in the list.")
</code></pre>
<p>Output:</p>
<pre><code>42 
appears in the following locations:  d,g,i
</code></pre>
<p>Essentially you need to plug and join all month-entries into a string - f.e. using a generator expression inside a <code>","join( ... )</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you noticed, you can't pass a list and use it as the index.</p>
<p>You'd have to loop over each index, or build one complete string and print that. </p>
<p>For example</p>
<pre><code>print(target,"\nappears in the following locations: ", end="")
for index in location:
    print(months[index], end=" ")
print("")
</code></pre>
<p>the <code>end=""</code> means that print will add an empty string at the end, instead of the usual new line.</p>
<p>Also, you could improve your code in two other ways.</p>
<p>The boolean <code>found</code> could correspond to the list <code>location</code> having any values in it, so </p>
<pre><code>if location: # an empty list evaluates to False
  print("Found")
else:
  print("Not found")
</code></pre>
<p>And your input could look like this instead</p>
<pre><code>target = None
done = False
while not done:
  try:
    target = int( input("Please enter the amount you are looking for:") )
    done = True
  except ValueError:
    print("Wrong value, input a number.")
</code></pre>
<p>so the user can fail multiple times and the program won't proceed.</p>
</div>
<span class="comment-copy">I'm having trouble understanding your question. Would you like to be able to print the location of items from an array, using indices from a list? Like if you had a list <code>a = ['apple', 'banana', 'carrot']</code> and another list of indices <code>b = [0, 2]</code>, you would get <code>apple, carrot</code>?</span>
<span class="comment-copy">you beauty, thanks</span>
<span class="comment-copy">Quick question Patrick why changing  for pos in range(0, len(wydatki)): to : for pos,value in enumerate(wydatki): is it just making code more efficient? or does it serve any other purpouse?</span>
<span class="comment-copy">@ChefJ: because it feels clumsy to do it. If I need positions while iterating an iterable I use <code>enumerate(iterable)</code> wich gives me position AND value without need to index back into my iterable usign the index. Same for <code>found=True</code> - its simply not needed - you declare a variable that captures if something was put into <code>location</code> - you can instead simply use <code>location</code> itself - if there is anything in it, it is <code>True</code>, else it is <code>False</code>: see <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth-value-testing</a></span>
<span class="comment-copy">appreciate it just starting off with python 5 weeks in so all is new.</span>
<span class="comment-copy">@ChefJ if you want to read about input validation as well, read up on <a href="https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">Asking user for input until they give a valid response</a> - if you are new you might want to go to the [python] tab and switch to <b>Votes</b> (<a href="https://stackoverflow.com/questions/tagged/python?sort=votes&amp;pageSize=50">stackoverflow.com/questions/tagged/…</a>) - the first 100 or so are a really great read of does and donts - same for the python-3.x tag : <a href="https://stackoverflow.com/questions/tagged/python-3.x?sort=votes&amp;pageSize=50">stackoverflow.com/questions/tagged/…</a> - they are highest ranked Q&amp;A topics</span>
