<div class="post-text" itemprop="text">
<p>I would like to iterate over a subset of the following enum</p>
<pre><code>class Items(enum.Enum):
    item1 = 0
    item2 = 1
    item3 = 2
    item4 = 3
    item5 = 4
    itm66 = 5
    item7 = 6
    item8 = 7
</code></pre>
<p>Say I want to:</p>
<pre><code>for item in (Items.item1, Items.item2, Items.item3, Items.item4):
        print(item.value)
</code></pre>
<p>is there a shortcut? or do I need to list each item to iterate over?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>itertools.islice</code> you can iterate through a slice of your <code>Enum</code> class </p>
<pre><code>from enum import Enum
from itertools import islice

class Items(Enum):
    item1 = 0
    item2 = 1
    item3 = 2
    item4 = 3
    item5 = 4
    itm66 = 5
    item7 = 6
    item8 = 7

for i in islice(Items, 4):
    print(i.value)

# 0 
# 1 
# 2
# 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python enums can have methods. I'd suggest you write a method that returns an iterable. Probably a set, in this case:</p>
<pre><code>class Items(enum.Enum):
    item1 = 0
    item2 = 1
    item3 = 2
    item4 = 3
    item5 = 4
    itm66 = 5
    item7 = 6
    item8 = 7

    @classmethod
    def the_best_ones(cls):
        return cls.item1, cls.item2, cls.item3, cls.item4
</code></pre>
<p>Then:</p>
<pre><code>for item in Items.the_best_ones():
    print(item.value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing built-in to <code>Enum</code> to iterate over a subset, but since you can use <code>list</code> on them:</p>
<pre><code>&gt;&gt;&gt; list(Items)[:4]
[&lt;Items.item1: 0&gt;, &lt;Items.item2: 1&gt;, &lt;Items.item3: 2&gt;, &lt;Items.item4: 3&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>do I need to list each item to iterate over?</p>
</blockquote>
<p>No - <code>Enum</code> classes are iterables, each value has attributes <code>.name</code> and <code>.value</code>, so you can filter on either as you see fit. For example:</p>
<pre><code>for v in Items:
    if v.value &gt; 3:
       break
    print(v.name, v.value)

=&gt; 
item1 0
item2 1
item3 2
item4 3
</code></pre>
<blockquote>
<p>is there a shortcut? </p>
</blockquote>
<p>Depends on what you want to do. Here are a few ways you could use the fact that Enums are iterables:</p>
<ul>
<li><code>sorted(Items, key=lambda v: v.value)[:4]</code> =&gt; get the first 4 elements as sorted by their ordinal value</li>
<li><code>filter(lambda e: e.value &lt; 5, Items)</code> =&gt; get all items with an ordinal value &lt; 5</li>
<li><code>{v.name: v.value for v in Items if v.value &lt; 4}</code> =&gt; get a dictionary of all name/value pairs given a filter</li>
</ul>
<p>etc.</p>
<p><em>Note</em></p>
<p>According to the <a href="https://docs.python.org/3.7/library/enum.html#iteration" rel="nofollow noreferrer">documentation</a> you can get the Enums ordered dictionary by <code>Items.__members__</code> and thus you could use <code>.items</code> on that to get the key/value mappings. However what you get as the value (in the dictionary) is in fact an object instance that has the <code>.name</code> and <code>.value</code> attributes.</p>
<pre><code>Items.__members__
=&gt; 
mappingproxy({'item1': &lt;Items.item1: 0&gt;,
              'item2': &lt;Items.item2: 1&gt;,
              'item3': &lt;Items.item3: 2&gt;,
              'item4': &lt;Items.item4: 3&gt;)
# so you could write
for k, v in Items.__members__.items():
    if v &gt; 3:
       break
    print(k, v.value)
</code></pre>
<p>However I find the first method more intuitive.</p>
</div>
<span class="comment-copy">I don't understand what you're asking. What you want to iterate over seems arbitrary and dependent on this example.</span>
<span class="comment-copy">You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><b><code>itertools.islice</code></b></a> perhaps: <code>for item in islice(Items, 4)</code></span>
