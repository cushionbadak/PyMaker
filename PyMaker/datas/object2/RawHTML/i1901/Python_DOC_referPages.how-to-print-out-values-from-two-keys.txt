<div class="post-text" itemprop="text">
<p>So I have trouble to print out two value that are from a list that I have created. </p>
<p>Basically I did a list of:</p>
<pre><code>[
  {
    'Numbers': '1',
    'Name': 'Hello'
  },
  {
    'Numbers': '2',
    'Name': 'There'
  },
  {
    'Numbers': '3',
    'Name': 'Stack'
  },
  {
    'Numbers': '4',
    'Name': 'OVerflow'
  }
]
</code></pre>
<p>Right now if I basically call that function which is</p>
<p>names_number() </p>
<p>It would give me that values.</p>
<p>So of course you would use a for loop which will print each of these for its own so in that case a loop that looks like:</p>
<p>for i in names_number():
      print(i)</p>
<p>That would give me:</p>
<pre><code>{'Numbers': '1', 'Name': 'Hello'}
{'Numbers': '2', 'Name': 'There'}
{'Numbers': '3', 'Name': 'Stack'}
</code></pre>
<p>The problem now is that I want it to print out only</p>
<pre><code>1 Hello
2 There
3 Stack
</code></pre>
<p>and I have no idea how I would in that case print out just the values of each of this everytime it for loops. I would appreciate any tip or solution on how I can continue to make a output like I wish above </p>
</div>
<div class="post-text" itemprop="text">
<p>The default separator for <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a> is a single whitespace, so you use a simple <code>for</code> loop:</p>
<pre><code>for d in L:
    print(d['Numbers'], d['Name'])
</code></pre>
<p>Or using f-strings (Python 3.6+):</p>
<pre><code>for d in L:
    print(f"{d['Numbers']} {d['Name']}")
</code></pre>
<p>Here's a convoluted functional solution:</p>
<pre><code>from operator import itemgetter

fields = ('Numbers', 'Name')
print(*(f'{num} {name}' for num, name in map(itemgetter(*fields), L)), sep='\n')

1 Hello
2 There
3 Stack
4 OVerflow
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about that:</p>
<pre><code>for dct in lst:
  print('{} {}'.format(dct['Numbers'], dct['Name']))
</code></pre>
<p>which produces the desired:</p>
<pre><code>1 Hello
2 There
3 Stack
4 OVerflow
</code></pre>
<hr/>
<p>Note that if you did not care about the order of the items (<code>1 Hello</code> or <code>Hello 1</code>), or if you are using Python 3.6+ you can use the more elegant:</p>
<pre><code>for dct in lst:
  print('{} {}'.format(*dct.values()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would probably do something like this:</p>
<pre><code>item_list = [
  {
    'Numbers': '1',
    'Name': 'Hello'
  },
  {
    'Numbers': '2',
    'Name': 'There'
  },
  {
    'Numbers': '3',
    'Name': 'Stack'
  },
  {
    'Numbers': '4',
    'Name': 'OVerflow'
  }
]

for item in item_list:
    print (" ".join([item["Numbers"], item["Name"]]))
</code></pre>
<p>Which produces:</p>
<pre><code>1 Hello
2 There
3 Stack
4 OVerflow
</code></pre>
<p>Pretty much looping the list, and the printing out the key/value pairs.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do it like this:</p>
<pre><code>for doc in lst:
    print(doc['Numbers'], doc['Name'])
</code></pre>
<p>Wich produces the desired out</p>
</div>
<span class="comment-copy">You have same <code>keys</code> so just iterate over the list and keep printing the values</span>
<span class="comment-copy">Just a <i>tad</i> overkill on the functions for such a trivial task...</span>
<span class="comment-copy">@Idlehands, Ha, but you get to learn a little in the process about... f-strings, sequence unpacking, generator comprehensions, <code>map</code>, <code>itemgetter</code>, <code>sep</code> argument :D</span>
<span class="comment-copy">No doubt! Had no idea about <code>itemgetter</code>, and now that I look again there's a certain beauty behind an insane solution that doesn't use loops or list comprehension (which can pretty much be done in one line if you eliminate <code>fields</code>)</span>
<span class="comment-copy">I used the f-string. It was the easiest to understand. I totally forgot that I could use d['Numbers'] from a list aswell which was totally miss by me! But I really liked how you "overkilled" the last step. It would be nice if you could explain it abit more because its totally lost for me! @jpp</span>
<span class="comment-copy">consider running the code before posting anything. Here.<a href="https://ibb.co/gm7xBV" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">How does the link help here? If you have some valid answer post it in here with output as well. You had a terrible answer before editing it. You have some solution without any explanation which again is of no use. <a href="https://stackoverflow.com/help/how-to-answer">stackoverflow.com/help/how-to-answer</a> Cheers</span>
<span class="comment-copy">The code before the editing works fine too, but I noticed it wasn't appropriate because it was storing an array, but it works fine. Anyway, I'm new in here, so  thank you for your feedback, I'll try my best the next time. Have a nice day!</span>
