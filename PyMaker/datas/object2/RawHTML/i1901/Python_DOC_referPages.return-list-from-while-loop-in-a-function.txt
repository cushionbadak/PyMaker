<div class="post-text" itemprop="text">
<p>I'm trying to return a list <code>my_list</code> created within function <code>make_list</code> to use in the function <code>print_elems</code>. </p>
<p>I keep getting the error </p>
<blockquote>
<p>my_list is not defined</p>
</blockquote>
<p>for when I ask to print it, after calling "make_list". </p>
<p>What am I doing incorrectly in trying to return "my_list"?</p>
<pre><code>def make_list():
    my_list = []
    print("Enter \"-999\" to return list.")
    x = int(input("Enter a number: "))
    while x != -999:
        my_list.append(x)
        x = int(input("Enter a number: "))
    return my_list

def print_elems(user_list):
    print(user_list, sep=' ')


make_list()
print(my_list)
print_elems(my_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to access the <em>local</em> variable <code>my_list</code>. You have to use the returned value instead by assigning it to a variable:</p>
<pre><code>some_name = make_list()  # assign function result to variable
print(some_name)
print_elems(some_name)
</code></pre>
<p>On a side note, you probably want to slightly modify <code>print_elems</code>:</p>
<pre><code>def print_elems(user_list):
    print(*user_list, sep=' ')
</code></pre>
<p>The <code>*</code> <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacks</a> the list and passes its elements to the <code>print</code> function. Otherwise, when passing a single positional argument to <code>print</code>, the <code>sep</code> parameter will never be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to assign the return of your function to a variable:</p>
<pre><code>tata = make_list()
print(tata)
</code></pre>
<p>The variable <code>my_list</code> is destroyed when you leave the scope of your function that defined it. That is why you return it.</p>
<hr/>
<p>See <a href="https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules">Short Description of the Scoping Rules?</a> and <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">PyTut: Scopes and namespaces</a></p>
</div>
<span class="comment-copy">Thanks for the extra info! I was just starting to look into that</span>
<span class="comment-copy">Ohhh I see, thanks I should've noticed that!</span>
