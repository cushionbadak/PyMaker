<div class="post-text" itemprop="text">
<p>I'm learning TCP and was trying out a client/server program. My server side is working, but on my client side, I can't connect successfully to the server side.</p>
<p><strong>Error Codes on my Client Side</strong></p>
<p><em>First Error:</em></p>
<p>Traceback (most recent call last):
  File "tcpclient.py", line 13, in 
    clientSocket.connect((serverName, serverPort))
TypeError: str, bytes or bytearray expected, not list</p>
<p><em>Second Error:</em> </p>
<p>Traceback (most recent call last):
  File "tcpclient.py", line 34, in 
    clientSocket.send(clientSentence.encode(), serverAddress)
TypeError: an integer is required (got type tuple)</p>
<p><strong>Server Code</strong>: This code runs successfully.</p>
<pre><code>import sys
from socket import*

serverSocket = socket(AF_INET, SOCK_STREAM)
serversys = sys.argv

if len(serversys) == 1: 
    serverPort = 9999
else:
    serverPort = serversys[1]
    serverPort = int(serverPort)

serverSocket.bind(('', serverPort)) 
serverSocket.listen(1)
print ("The server is ready to receive.")

while True:
    connectionSocket, addr = serverSocket.accept()
    print ("Connection accepted from: ", addr)

    clientSentence = connectionSocket.recv(1024).decode()


    clientSentence, clientAddress = serverSockset.recv(1024)
    clientSentence.decode()
    connectionSocket.close()

    if clientSentence[0].decode() == 'U':
        serverSentence = clientSentence.upper()
        connectionSocket.send(serverSentence[1:].encode(), clientAddress)
        connectionSocket.close()
    elif clientSentence[0].decode() == 'L':
        serverSentence = clientSentence.lower()
        connectionSocket.send(serverSentence[1:].encode(), clientAddress)
        connectionSocket.close()
    elif clientSentence[0].decode() == 'I':
        serverSentence = clientSentence.title()          
        connectionSocket.send(serverSentence[1:].encode(), clientAddress)
        connectionSocket.close()
</code></pre>
<p><strong>Client</strong>: This is where the two errors occur.</p>
<pre><code>import sys
from socket import*

clientSocket = socket(AF_INET, SOCK_STREAM)

clientsys = sys.argv
serverName = clientsys[1:]
serverPort = clientsys[2:]

clientSocket.connect((serverName, serverPort)) #First Error

serverPort = [int(serverPort) for serverPort in serverPort]
serverAddress = (serverName, serverPort)

sentenceChoice = input("Enter U for UPPERCASE SENTENCE, L for lowercase sentence, \nor I for Initial Caps Sentence: ")
sentence = input("Enter sentence: ")

clientSentence = sentenceChoice+sentence

clientSocket.send(clientSentence.encode(), serverAddress) #Second Error
serverSentence = clientSocket.recv(1024)
print('From Server: ', serverSentence.decode())
clientSocket.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your first error is caused by you using a list slice for the server name and port. Change to this:</p>
<pre><code>serverName = clientsys[1]
serverPort = clientsys[2]
</code></pre>
<p>Your second error is because <code>socket.send()</code> doesn't accept the <code>serverAddress</code> tuple parameter (where you thinking of <code>socket.sendto()</code>? Either way, you can fix by simply removing the parameter:</p>
<pre><code>clientSocket.send(clientSentence.encode())
</code></pre>
<p>Link to <code>socket.send</code> docs: <a href="https://docs.python.org/3/library/socket.html#socket.socket.send" rel="nofollow noreferrer">https://docs.python.org/3/library/socket.html#socket.socket.send</a></p>
</div>
<div class="post-text" itemprop="text">
<p>are you sure it's supposed to be clientsys[2:] not clientsys[2] ? </p>
</div>
<div class="post-text" itemprop="text">
<p>The reason the error is occurring is that you are using list slicing to find the server and port from <code>sys.argv</code>:</p>
<pre><code>clientsys[1:]
clientsys[2:]
</code></pre>
<p>The result of a list slicing operation is always a list:</p>
<pre><code>l = [1, 2, 3]
&gt;&gt;&gt;l[1:]
[2, 3]
&gt;&gt;&gt;print(l[2:])
&gt;&gt;&gt;[3]
</code></pre>
<p>Instead, use indexing:</p>
<pre><code>serverName = clientsys[0]
serverPort = clientsys[1]
</code></pre>
</div>
<span class="comment-copy">Print out <code>clientsys[1:]</code> and see what it actually is!</span>
<span class="comment-copy">@KlausD. It prints out: []</span>
<span class="comment-copy">Doesn't look like a server name.</span>
<span class="comment-copy">No it doesn't. I'll try setting the server name equal to local host</span>
<span class="comment-copy">For the first error, I changed it but still receive the error: IndexError: list index out of range</span>
<span class="comment-copy">Are you running your python command with args? For example if your script is named sock.py you should be running <code>python sock.py &lt;serverName&gt; &lt;serverPort&gt;</code></span>
<span class="comment-copy">So I fixed it and when running the client I enter "pthyon3 tcpclient.py localhost 9999" and it works, but then I receive the error from the server terminal window of a connection error:   File "tcpserver.py", line 29, in &lt;module&gt;     clientSentence, clientAddress = serverSocket.recv(1024) OSError: [Errno 57] Socket is not connected</span>
<span class="comment-copy">@anonymous_s I think you need to remove this line <code>clientSentence, clientAddress = serverSocket.recv(1024)</code>. You should only be calling <code>.bind()</code>, <code>.listen()</code>, or <code>.accept()</code> for you server socket, in most cases. This socket only accepts connections and won't contain any data for you to read.</span>
<span class="comment-copy">When I take out the colon I receive an out of Index error. The same goes for client sys[1:]. File "tcpclient.py", line 11, in &lt;module&gt;     serverPort = clientsys[2] IndexError: list index out of range</span>
<span class="comment-copy">have you supplied args when you run client.py ?</span>
<span class="comment-copy">I don't think I have. When I run client sys[1:] it outputs: []</span>
<span class="comment-copy">Should I remove sys.argv completely?</span>
