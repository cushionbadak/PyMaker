<div class="post-text" itemprop="text">
<p>How do i code this effectively?</p>
<p>Aim: <code>[ [2,2],[3,4],[3,4] ]</code></p>
<p>First Try:</p>
<pre><code>[ [2,2],[[3,4]]*2 ]
</code></pre>
<p>--&gt; <code>[[2, 2], [[3, 4], [3, 4]]]</code> #this is one nested list to much</p>
<p>Second Try:</p>
<pre><code>[ [2,2],[3,4]*2 ]
</code></pre>
<p>--&gt; <code>[[2, 2], [3, 4, 3, 4]]</code> #there is one nest missing</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5 or newer, you can use <code>*iterable</code> inside a <code>[...]</code> list displays (the literal syntax to create a list object) to have the iterable expanded to new elements. Because you are adding repeated copies of a nested list object, you do <em>not</em> want to use multiplication to generate those copies, however, because <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow noreferrer">multiplication doesn't create copies</a>.</p>
<p>So you can use a generator expression here with a loop to create new list objects each iteration step:</p>
<pre><code>l = [[2, 2], *([3, 4] for _ in range(2))]
</code></pre>
<p>For <em>just two copies</em> that's really overkill, but perhaps you have more complex data. For this simple case, I'd just use <code>[[2, 2], [3, 4], [3, 4]]</code>.</p>
<p>You can use the syntax multiple times, and mix in more lists:</p>
<pre><code>l = [
    [2, 2],
    *([3, 4] for _ in range(2)),
    *([42, 81, 117] for _ in range(7)),
    [45, 44, 43],
]
</code></pre>
<p>Using a generator expression avoids creating additional intermediary lists that are then discarded again.</p>
<p>The <code>*iterable</code> syntax is called <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow noreferrer"><em>iterable unpacking</em></a>, and extends to tuples and sets as well, and you can do the same with <code>**mapping</code> syntax in dictionary displays.</p>
<p>If you are using an older Python release (such as Python 2), you <em>really</em> want to upgrade. Python 2.7 is only receiving bug fixes and security updates now, and only until the end of 2019. Python 3.4 and older are entirely unsupported now. But if you are stuck, your only option is to use multiple lines, to expand on the initial list object with <code>+=</code> or <code>list.expand()</code>, or use <code>list.append()</code> to add individual elements:</p>
<pre><code>l = [[2, 2]]
l += ([3, 4] for _ in range(2))
l += ([42, 81, 117] for _ in range(7))
l.append([45, 44, 43])  # or maybe use `l += [45, 44, 43],` *with* that comma at the end!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension and unpacking with <code>*</code>:</p>
<pre><code>a = [ [2,2],*[[3,4] for _ in range(2)]]
#[[2, 2], [3, 4], [3, 4]]
</code></pre>
<p>Proof it works:</p>
<pre><code>print(list(map(id, a)))
# [4859792328, 4859369864, 4859792008]
</code></pre>
</div>
<span class="comment-copy">Is there a rule to which numbers are in there?</span>
<span class="comment-copy">um, why not just <code>[ [2,2],[3,4],[3,4] ]</code>? What exactly is the problem you are trying to solve? What is your input?</span>
<span class="comment-copy">Using <code>*2</code> will lead to unexpected behavior, because you will have two references to the same list <code>[3,4]</code>. So any modification to one of them will also affect the other.</span>
<span class="comment-copy">There is no rule for the numbers. But the input for the nested lists in real life is more complicated. ;)</span>
<span class="comment-copy">@SDahm And there might be a better option. But it depends on the context really. And readability comes before most.</span>
