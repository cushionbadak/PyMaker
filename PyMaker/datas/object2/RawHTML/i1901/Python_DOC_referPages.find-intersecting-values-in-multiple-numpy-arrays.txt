<div class="post-text" itemprop="text">
<p>I have 100 large arrays &gt; 250,000 elements each. I want to find common values that are found in these arrays. I know that there are not going to be values that are found in all 100 arrays, but a small number values will be found in multiple arrays (I suspect 10-30%). I want to find which values are found with the highest frequency across these arrays. (Side point: arrays have no duplicates)</p>
<p>I know that I can loop through the arrays and eventually find them, but that will take a while. I also know about the <code>np.intersect1d</code> function, but I that only gives values that are found within all of the arrays, whereas I'm looking for values that are only going to be in around 20 of the 100 arrays. </p>
<p>My best bet is use the <code>np.intersect1d</code> function and loop through all possible combinations of the arrays, which would definitely take a while, but not as long as simply looping through all 250,000 x 100 values.
Example: </p>
<pre><code>array_1 = array([1.98,2.33,3.44,,...11.1)
array_2 = array([1.26,1.49,4.14,,...9.0)
array_2 = array([1.58,2.33,3.44,,...19.1)
array_3 = array([4.18,2.03,3.74,,...12.1)
.
.
. 
array_100= array([1.11,2.13,1.74,,...1.1)
</code></pre>
<p>No values in all 100, Is there a value that can be found in 30 different arrays? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can either use <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.unique.html" rel="nofollow noreferrer"><code>np.unique</code></a> with the <code>return_counts</code> keyword, or a vanilla Python <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>.</p>
<p>The first option works if you can concatenate your arrays into a single 250k x 100 monolith, or even string them out over after the other:</p>
<pre><code>unq, counts = np.unique(monolith, return_counts=True)
ind = np.argsort(counts)[::-1]
unq = unq[ind]
counts = counts[ind]
</code></pre>
<p>This will leave you with an array containing all the unique values, and the frequency with which they occur.</p>
<p>If the arrays have to remain separate, use <code>collections.Counter</code> to accomplish the same task. In the following, I assume that you have a list containing your arrays. It would be very pointless to have a hundred individually named variables:</p>
<p>c = Counter()
   for arr in arrays:
       c.update(arr)</p>
<p>Now <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>c.most_common</code></a> will give you the most common elements and their counts.</p>
</div>
<span class="comment-copy">Are all the arrays the same size? Can you have one large 250k x 100 array?</span>
<span class="comment-copy">No they are not, usually range from 220,000-280,000</span>
<span class="comment-copy">Great Idea! Thank you for your response, I'll give it a try!</span>
<span class="comment-copy">@Danny. Updated</span>
<span class="comment-copy">The proper way to thank is by selecting the answer by clicking on the check mark next to it.</span>
