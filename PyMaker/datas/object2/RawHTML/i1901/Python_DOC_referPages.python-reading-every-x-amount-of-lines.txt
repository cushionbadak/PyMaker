<div class="post-text" itemprop="text">
<p>What I want is to have 5 threads reading the contents of a file, line by line.
The first thread must read the line, and I want the threads to read every 5 lines starting at different points.</p>
<pre><code>(Index Pos)
t1 reads &gt;&gt;&gt; 0, 5, 10, 15
t2 reads &gt;&gt;&gt; 1, 6, 11, 16
</code></pre>
<p>And so on.</p>
<p>Currently I've tried to use modulus to do it, however there are issues where prime numbers such as 15 cause issues. This isn't the final piece I had, however it's what I'm showing as what I'm using is awful and doens't make sense.</p>
<pre><code>def function(n):#Function to generate hash
  count = n
  for line in open('wordlist.txt'):#For each line in a file do this
    if count % 2 == 0:
      linex = line.strip()
      hashed = hashlib.md5(linex.encode()).hexdigest()
      #print(line + ":" + hashed)
      count += 1
    else:
      count += 1
</code></pre>
<p>Long story short, I need some help and I'll be incredibly thankful to the person that helps me sort out this issue.</p>
<p>Just looking for something to iterate over the lines of a text file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of what I was suggesting. This process stdin,
sending lines to a collection of five workers.  The first worker will
get lines 0, 5, 10, 15, etc., the second worker will get 1, 6, 11, 16,
etc, and so forth.</p>
<pre><code>import itertools
import queue
import sys
import threading


class Worker(threading.Thread):
    def __init__(self, id, q, **kwargs):
        self.id = id
        self.q = q
        super().__init__(daemon=True, **kwargs)

    def run(self):
        while True:
            # Receive another (line_number, line) tuple from the
            # main thread.
            ln, line = self.q.get()
            if ln == -1:
                break

            print('thread {} processing line {}: {}'.format(self.id, ln, line))


def main():
    workers = []
    queues = []

    # create workers, and for each worker create a queue that will
    # be used to pass data to the worker.
    for i in range(5):
        q = queue.Queue()
        w = Worker(i, q)
        workers.append(w)
        queues.append(q)
        w.start()

    # create a "cycle": an infinite iterator that will loop over
    # the list of queues.
    q_cycle = itertools.cycle(queues)
    for ln, line in enumerate(sys.stdin):
        q = next(q_cycle)
        q.put((ln, line))

    # tell the workers to exit
    for q in queues:
        q.put((-1, None))

    # wait for workers to finish
    for w in workers:
        w.join()


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">I think your best bet is to have a <i>single</i> thread read the file, and then pass lines off to worker threads (e.g. using a queue).</span>
<span class="comment-copy">Would you be able to explain what each line would do, I haven't worked with itertools or queue before</span>
<span class="comment-copy">I've tried to comment lines that aren't just vanilla Python, including the use of the <code>cycle</code> iterator.  You can find docs for that <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">here</a>. A <code>queue.Queue</code> object is just a FIFO queue that can be used to pass data between threads. Docs <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">here</a>. Let me know if you have specific questions.</span>
