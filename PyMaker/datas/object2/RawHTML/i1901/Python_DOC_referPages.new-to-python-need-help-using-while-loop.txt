<div class="post-text" itemprop="text">
<p>The <strong>assignment</strong>:</p>
<p>Write an interactive application in Python to display a
simple menu to the user. Have them pick a choice for a <em>boy (b)</em>, <em>girl (g)</em>, or <em>quit (q)</em> to quit
the program. The program should keep looping until the user chooses to quit. 
This application will use loops and conditions to accomplish the task.Your program should output the average boy score and average girl score. </p>
<p>The <strong>code</strong>:</p>
<pre><code> letter= input(" type (b) for Boy (g) for Girl or (q) for quit")
 boycount= 0
 girlcount=0


while(letter != 'q'):
   if  letter == 'b':
       print("Enter score for boy")
       scoreB= float(input())
       boycount = boycount +1
       letter=input(" type (b) for Boy (g) for Girl or (q) for quit")

if letter == 'g':
    print("enter score fo Girl")
    scoreG = float(input())
    girlcount= girlcount +1
    letter=input(" type (b) for Boy (g) for Girl or (q) for quit")

else:

   print("the average for the girls is",scoreG/girlcount)
   print("the average for the boys is",scoreB/boycount)
</code></pre>
<hr/>
<p>Not sure what to do being new to python. I understand what I need to do and the error messages I get but implementing it in python is where I am getting stuck.</p>
<p>The <strong>errors</strong> I have gotten: <em>after inputting a value for b and trying to input another for b i get an error saying scoreG isnt defined</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, the biggest problem was the indentation.</p>
<p>This should work:</p>
<pre><code>letter= input(" type (b) for Boy (g) for Girl or (q) for quit")
boycount= 0
girlcount=0
scoreB = 0
scoreG = 0

while True:
   if  letter == 'b':
       print("Enter score for boy")
       scoreB += float(input())
       boycount = boycount +1
       letter=input(" type (b) for Boy (g) for Girl or (q) for quit")
   elif letter == 'g':
       print("enter score fo Girl")
       scoreG += float(input())
       girlcount= girlcount +1
       letter=input(" type (b) for Boy (g) for Girl or (q) for quit")
   elif letter == 'q':
       print("the average for the girls is",scoreG/girlcount)
       print("the average for the boys is",scoreB/boycount)
       exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is indeed an indentation problem (or a logic flow problem). For most programming languages that wouldn't matter, but it is essential in python.</p>
<p>Here's what your code is actually doing:</p>
<pre><code># initialize boycount and girlcount
while(letter != 'q'):
    # do some stuff inside the while loop
    # do some stuff inside the while loop
    if letter == 'b':
        # increment boycount

    # do some stuff inside the while loop
# do some stuff after the while loop

# letter must be 'q' now that the while loop ended
if letter == 'g':
    # increment girlcount
    # this will never happen, because letter cannot be 'g' here
else:
    # print summary
    # this will always happen because letter is 'q'
</code></pre>
<p>Here's what your code should be doing:</p>
<pre><code># initialize boycount and girlcount
while(letter != 'q'):
    # do some stuff inside the while loop
    # do some stuff inside the while loop
    if letter == 'b':
        # increment boycount
    if letter == 'g':
        # increment girlcount
    # do some stuff inside the while loop
# do some stuff after the while loop
# letter must be 'q' now that the while loop ended
# print summary
</code></pre>
<p>Unlike most other programming languages, python requires indentation to define the scope of a compound block of statements. I sometimes use a do-nothing <code>pass</code> statement with a comment to show my intention:</p>
<pre><code># initialize boycount and girlcount
while(letter != 'q'):
    # do some stuff inside the while loop
    if letter == 'b':
        # increment boycount
    pass # end if
    if letter == 'g':
        # increment girlcount
    pass # end if
pass # end while
# print summary
</code></pre>
<p>The <code>pass</code> statement is just a placeholder that does nothing, but it helps me make the intended control flow clearer, and that can help me detect design errors.</p>
<p>Another diagnostic tool you can use is the print() statement.</p>
<pre><code># initialize boycount and girlcount
print("start of while letter loop")
while(letter != 'q'):
    # do some stuff inside the while loop
    if letter == 'b':
        print("letter b: increment boycount")
        # increment boycount
    pass # end if
    if letter == 'g':
        print("letter g: increment girlcount")
        # increment girlcount
    pass # end if
pass # end while
print("end of while letter loop")
# print summary
</code></pre>
<p>When you test the program with those print statements included, you will be able to confirm that each command does what you expect. After you've verified the logic works, you can just put a <code>#</code> in front of the print statement to turn it into a comment.</p>
<p>Just for completeness, the official <a href="https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming" rel="nofollow noreferrer">python tutorial</a> mentions</p>
<blockquote>
<p>The body of the loop is indented: indentation is Pythonâ€™s way of
  grouping statements</p>
</blockquote>
</div>
<span class="comment-copy">first get your indentation right.</span>
<span class="comment-copy">Well if it's correct then you have no problem. Next.</span>
<span class="comment-copy">the indentation isn't the problem its not knowing what to do next / fix in order to make my code fit the criteria</span>
<span class="comment-copy">@isaacfuller I think what @Julien meant was: the way the indent appears now would be functionally wrong wrt what you're trying to achieve - it will only process inputs for "b"; and afterwards, for "q" because it's the <code>else</code> clause outside the loop. The code for "g" will never be reached. And because of that, <code>scoreG</code> - which is only set when the input is "g" will never get set/created. FYI, <code>scoreB</code> and <code>scoreG</code> should both be initialised to <code>0</code> <i>before</i> the loop, since it's possible that the input will never be "b" or "g" or both (like "q" on the first try); then neither will be set.</span>
<span class="comment-copy">You can (<i>should</i>) replace the <code>exit()</code> in the last line with <code>break</code>. That way, if there's more code after the loop, it will get executed; even if it's not part of the OP's code. And generally, <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer"><code>break</code> is how you'd exit loops</a>.</span>
