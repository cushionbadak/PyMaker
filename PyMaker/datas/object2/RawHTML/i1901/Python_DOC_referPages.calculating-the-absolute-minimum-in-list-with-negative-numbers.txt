<div class="post-text" itemprop="text">
<p>I have a list like this-</p>
<pre><code>list=[137,136,135,134,119,118,-14,-89,-208,-291,-491,-513,-596,-699]
</code></pre>
<p>Now I want to calculate the minimum number in the list irrespective of sign but in the final answer the sign should be retained.</p>
<p>For example here the answer would be -14.</p>
<p>Right now I am first splitting the list into positive and negative and calculating the minimum and maximum respectively and then comparing the absolute and returning the answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min()</code></a> function with the <code>key</code> argument:</p>
<pre><code>&gt;&gt;&gt; lst = [137,136,135,134,119,118,-14,-89,-208,-291,-491,-513,-596,-699]
&gt;&gt;&gt; min(lst, key=abs)
-14
</code></pre>
<p>If multiple items are 'minimal' (e.g. <code>-14</code> and <code>14</code>), this will return the first one encountered. If you need to handle tie cases, you could use a tuple as a key, e.g.:</p>
<pre><code>&gt;&gt;&gt; lst = [14,137,136,135,134,119,118,-14,-89,-208,-291,-491,-513,-596,-699]
&gt;&gt;&gt; min(lst, key=lambda x: (abs(x), x))
-14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To solve for tie cases use:</p>
<pre><code>a = [137,136,135,134,119,118, 14, -14,-208,-291,-491,-513,-596,-699]
min(a, key=lambda x: (abs(x), x))
#-14
</code></pre>
<p>Because in this case pure <code>abs</code> would return <code>14</code> as it comes before.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sorted(lst, key=lambda x: (abs(x), x))[0] # better solution would be to use min()
</code></pre>
<p>with key argument you can specify how it should be sorted. So in this case it will be sorted on the basis of absolute values.
For example </p>
<p><code>lst = [137,136,135,134,119,118, 14, -14,-208,-291,-491,-513,-596,-699]</code></p>
<p>Then it will be sorted on the basis of abs(x) where x would be every element in the list and hence would return <code>14</code> and then <code>-14</code> as absolute values of both would be <code>14</code> and there comes the role of second argument in the tuple to resolve the ties. So keeping second argument with sign will treat -14 over 14 as <code>-14 &lt; 14</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'll do </p>
<pre><code>-min([abs(x) for x in lst if x &lt; 0])
</code></pre>
</div>
<span class="comment-copy">Beat me to it :) +1</span>
<span class="comment-copy">and for tie cases?</span>
<span class="comment-copy">yes, indeed it is a nice solution!</span>
<span class="comment-copy">Awesome solution. @ubuntu_noob it will be still minimum so tie cases does not matter</span>
<span class="comment-copy">@mad_ sign matters in my case</span>
<span class="comment-copy">This works, but has time compexity <code>O(n log n)</code> instead of <code>O(n)</code> of <code>min()</code>. I.e. it will be slower for bigger lists.</span>
<span class="comment-copy">@EugeneYarmash I know it can't beat other answers on complexity grounds but I wanted to point out how key works in general so posted the answer.</span>
<span class="comment-copy">Nope wont work if <code>list</code> contains only positive numbers. Also dont use <code>list</code> as variable names it shadows the built-ins.</span>
