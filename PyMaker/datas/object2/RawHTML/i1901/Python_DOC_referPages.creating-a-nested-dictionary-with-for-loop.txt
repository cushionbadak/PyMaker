<div class="post-text" itemprop="text">
<p>I have a csv file and Im trying to create a nested dictionary that looks like this:</p>
<pre><code>contacts = {"Tom": {"name": "Tom Techie",
                    "phone": "123 123546",
                    "email": "tom@tom.fi",
                    "skype": "skypenick"},

            "Mike": {"name": "Mike Mechanic",
                     "phone": "000 123546",
                     "email": "mike@mike.fi",
                     "skype": "-Mike-M-"}}
</code></pre>
<p>etc</p>
<p>And this is what I have written:</p>
<pre><code>file = open("csv","r")
d = {}
for i in file:

    f = i.strip()
    x = f.split(";")

    if x[4] != "":
        d.update({x[0] : {"name":x[1],
                      "phone":x[2],
                      "email":x[3],
                      "skype":x[4]}})

    else:
        d.update ({x[0] : {"name": x[1],
                       "phone": x[2],
                       "email": x[3]}})
</code></pre>
<p>However it prints the dict as a normal dictionary with the updates as keys when they should be like stated above.</p>
<p>EDIT:
First lines of the csv:</p>
<pre><code>key;name;phone;email;skype
Tom;Tom Techie;123 123546;tom@tom.fi;skypenick
Mike;Mike Mechanic;000 123456;mike@mike.fi;-Mike-M-
Archie;Archie Architect;050 987654;archie@archie
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pd.read_csv()</code> and <code>to_dict()</code>:</p>
<pre><code>import pandas as pd

contacts = pd.read_csv('test.csv', sep=';').set_index('key').to_dict(orient='index')
</code></pre>
<p>Yields:</p>
<pre><code>{'Tom': {'name': 'Tom Techie', 'phone': '123 123546', 'email': 'tom@tom.fi', 'skype': 'skypenick'}, 'Mike': {'name': 'Mike Mechanic', 'phone': '000 123456', 'email': 'mike@mike.fi', 'skype': '-Mike-M-'}, 'Archie': {'name': 'Archie Architect', 'phone': '050 987654', 'email': 'archie@archie', 'skype': nan}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like the <code>pandas</code> answer, but if you don't want a 3rd party library, use the built-in <code>csv</code> module:</p>
<pre><code>import csv
from pprint import pprint

D = {}
with open('csv',newline='') as f:
    r = csv.DictReader(f,delimiter=';')
    for line in r:
        name = line['key']
        del line['key']
        D[name] = dict(line)

pprint(D)
</code></pre>
<p>Output:</p>
<pre><code>{'Archie': {'email': 'archie@archie',
            'name': 'Archie Architect',
            'phone': '050 987654',
            'skype': None},
 'Mike': {'email': 'mike@mike.fi',
          'name': 'Mike Mechanic',
          'phone': '000 123456',
          'skype': '-Mike-M-'},
 'Tom': {'email': 'tom@tom.fi',
         'name': 'Tom Techie',
         'phone': '123 123546',
         'skype': 'skypenick'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> to achieve your goal:</p>
<pre><code>file = """key;name;phone;email;skype
Tom;Tom Techie;123 123546;tom@tom.fi;skypenick
Mike;Mike Mechanic;000 123456;mike@mike.fi;-Mike-M-
Archie;Archie Architect;050 987654;archie@archie""".splitlines()

d = {}
h = None
for i in file: # works the same for your csv-file
    # first row == header, store in h
    if h is None:
        h = i.strip().split(";")[1:]
        continue # done for first row

    x = i.strip().split(";")

    # zip pairs the read in line with the header line to get tuples
    # wich are fed into the dict constructor that creates the inner dict
    d[x[0]] = dict(zip(h,x[1:]+[""])) # no default for skype

    # use this instead if you want the skype key always present with empty default
    # d[x[0]] = dict(zip(h,x[1:]+[""]))  

print(d)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> discards the elements of the longer list - you won't need any checks for that.</p>
<p>Output:</p>
<pre><code>{'Tom':   {'name': 'Tom Techie', 'phone': '123 123546', 
           'email': 'tom@tom.fi', 'skype': 'skypenick'}, 
 'Mike':   {'name': 'Mike Mechanic', 'phone': '000 123456', 
            'email': 'mike@mike.fi', 'skype': '-Mike-M-'}, 
 'Archie': {'name': 'Archie Architect', 'phone': '050 987654', 
            'email': 'archie@archie'}}
</code></pre>
<p>If you use the commented line, the data will get a default value of <code>''</code> for the skype - works only b/c skype is the last element of the splitted line</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dict comprehension! Assuming the data is something like <img alt="this here..." src="https://i.stack.imgur.com/gebuM.png"/></p>
<pre><code>with open("df.csv", "r") as file:
  d = {x.split(";")[0]:{
      "name": x.split(";")[2], 
      "phone": x.split(";")[3],
      "email": x.split(";")[1], 
      "skype": x.split(";")[4][:-1] # Slice off trailing newline
  } for x in file}
  d.pop("")
</code></pre>
<p>We want to open files using <code>with</code> whenever possible to benefit from Python's context management. See <a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0343/</a> for fundamental understanding of the <code>with</code> statement.</p>
<p>Since the key <code>""</code> only appears once at the head of the csv, we can pop it at the end and avoid performing a comparison at every iteration. A dict comprehension accomplishes the same thing you wanted to achieve with <code>d.update</code>.</p>
<p>More about comprehensions: 
<a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>
<p>Edit: refactoring to remove the repetitive calls to <code>.split</code> can look something like this:</p>
<pre><code>def line_to_dict(x, d):
  x = x.split(";")
  d[x[0]] = {
      "name": x[2], 
      "phone": x[3],
      "email": x[1], 
      "skype": x[4][:-1] # Slice off trailing newline
  }

with open("df.csv", "r") as file:
  d = {}
  for x in file:
    line_to_dict(x, d)
  d.pop("")
</code></pre>
</div>
<span class="comment-copy">Your question has insufficient infomration to a) run the code, b) reproduce the problem, c) help you.</span>
<span class="comment-copy">You should at least provide the first few lines of the csv file</span>
<span class="comment-copy">Edited first lines of cv to opening post</span>
