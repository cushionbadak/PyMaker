<div class="post-text" itemprop="text">
<p>Why does this:</p>
<pre><code>seq = [(1, 2), (3, 4), (5, 6)]
print(() in seq)
</code></pre>
<p>return <code>False</code>? How can I check if there's a tuple, or even a generic sequence, inside a sequence with no specific values, <a href="https://stackoverflow.com/questions/9654523/how-to-check-whether-a-tuple-exists-in-a-python-list">as in this answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>()</code> is an empty tuple. <code>seq</code> does not contain an empty tuple.</p>
<p>You want</p>
<pre><code>&gt;&gt;&gt; seq = [(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; any(isinstance(x, tuple) for x in seq)
True
</code></pre>
<p>For a generic sequence you can use</p>
<pre><code>&gt;&gt;&gt; from collections import abc
&gt;&gt;&gt; any(isinstance(x, abc.Sequence) for x in seq)
True
</code></pre>
<p>However, lots of objects are informally treated as sequences but neither implement the full protocol <code>abc.Sequence</code> defines nor register as a virtual subclass of <code>Sequence</code>. </p>
<p>Read <a href="https://stackoverflow.com/a/34928016/3620003">this excellent answer</a> for additional information.</p>
<p>You can find a question about detecting sequences <a href="https://stackoverflow.com/questions/2937114/python-check-if-an-object-is-a-sequence">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are checking is the existence of an empty tuple in the list.</p>
<p>You can check the type instead.  </p>
<pre><code>def has_tuple(seq):    
    for i in seq:
        if isinstance(i, tuple):
            return True
    return False
</code></pre>
</div>
<span class="comment-copy">Will the list be arbitrarily nested?  Or just flat as in your example?</span>
<span class="comment-copy">What you are checking is existence of an empty tuple in the list.  You can check type instead.</span>
<span class="comment-copy">Why did you expect that to work? Really. I don't understand what made you think that might work. It doesn't seem to have just been a wild guess, as you seem legitimately confused about the fact it doesn't work. What was the thought process that led you to think it might do what you want? If you find yourself confused about this sort of thing, you should ask <i>yourself</i> that question and have an answer for it before posting. If you do, you'll often find that there's something you thought was true but aren't actually sure, and if you go check, then you will probably not even need to post.</span>
<span class="comment-copy">I believe <code>abc.Iterable</code> is also useful here</span>
<span class="comment-copy">@cat Unfortunately, not really. I wrote in detail about why checking against <code>abc.Iterable</code> is unreliable <a href="https://stackoverflow.com/a/36407550/3620003">here</a>.</span>
<span class="comment-copy">Curious: does <code>any()</code> operate greedily, stopping at first <code>True</code>-thy occurrence?</span>
<span class="comment-copy">@BradSolomon yes, <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>  is lazy.</span>
<span class="comment-copy">@timgeb I had deliberately provided pseudocode to encourage OP to implement it himself/herself.</span>
<span class="comment-copy">I'm sorry if you did not like the edit. Feel free to roll it back.</span>
