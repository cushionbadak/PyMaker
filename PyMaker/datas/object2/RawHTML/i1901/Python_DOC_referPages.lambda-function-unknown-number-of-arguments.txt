<div class="post-text" itemprop="text">
<p>Currently, this is how I resolve a "and" function using lambda with two arguments:</p>
<pre><code>custom_function = lambda a, b: a and b
</code></pre>
<p>But how can I resolve an unknown number of arguments, like:</p>
<pre><code>custom_function = lambda a, b, c, d, ...: what now?
</code></pre>
<p>Anybody had this issue before?</p>
<p>Thanks and Greetings!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use "*args":</p>
<pre><code>&gt;&gt;&gt; custom_function = lambda *args: all(args)
&gt;&gt;&gt; custom_function(1, 2, 3)
True
&gt;&gt;&gt; custom_function(1, 2, 3, 0)
False
</code></pre>
<p>Which indeed is the same as just using "all":</p>
<pre><code>&gt;&gt;&gt; all(1, 2, 3)
True
&gt;&gt;&gt; all(1, 2, 3, 0)
False
</code></pre>
<p>To be general, you can use "functools.reduce" to use any "2-parameters" function with any number of parameters (if their order doesn't matter):</p>
<pre><code>import operator
import functools

c = lambda *args: functools.reduce(operator.and_, args)
</code></pre>
<p>(same results as before)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">argument unpacking via the <code>*</code> operator</a> to process any number of arguments. You would have to resort to <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce</code></a> (Python2) or <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> (Python3) in order to combine them all with <code>and</code> in a single expression (as needed by the lambda):</p>
<pre><code>from functools import reduce  # only Py3

custom_function = lambda *args: reduce(lambda x, y: x and y, args, True)
</code></pre>
<p>Note: this is not the same as <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a>, like many here suggest:</p>
<pre><code>&gt;&gt;&gt; all([1,2,3])
True
&gt;&gt;&gt; 1 and 2 and 3
3
&gt;&gt;&gt; custom_function(1,2,3)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just using the all function?</p>
<pre><code>a = 1
b = 2
c = None
args = [a, b, c]
print (all(args))
# False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, use <code>*args</code> to store an unknown number of arguments as a tuple. </p>
<p>Second, <code>all(args)</code> only return <code>Ture</code> or <code>False</code> but <code>and</code> operation may return value (<a href="https://stackoverflow.com/questions/47007680/strange-use-of-pythons-and-or-operator">Here</a> is why). So we need to use <code>reduce</code>.</p>
<p>Here is the solution:</p>
<pre><code>custom_function = lambda *args: reduce(lambda x,y: x and y, args)
</code></pre>
<p>Test 1: arguments are Ture or False</p>
<pre><code>&gt;&gt;&gt; custom_function(True,False,True,False)
False
&gt;&gt;&gt; custom_function(True,True,True)
True
</code></pre>
<p>Test 2: arguments are values</p>
<pre><code>&gt;&gt;&gt; custom_function(1,2,3,4,3,2)
2
&gt;&gt;&gt; custom_function('a','b','d','s')
's'
</code></pre>
<p>Test 3: arguments are a combination of bool and values</p>
<pre><code>&gt;&gt;&gt; custom_function(1,2,True,4,3,2)
2
&gt;&gt;&gt; custom_function(1,2,False,4,3,2)
False
</code></pre>
<p>Note the three tests are correct according to the definition of Logical <strong>AND</strong> (and):</p>
<blockquote>
<p>Return the first Falsey value if there are any, else return the last
  value in the expression.</p>
</blockquote>
</div>
<span class="comment-copy">BTW, the "all" builtin function just does that</span>
<span class="comment-copy">@Don The <code>all</code> function does <b>not</b> do just that.</span>
<span class="comment-copy">yea, but how can i map this to my lambda as i dont know the exact number of arguments?</span>
<span class="comment-copy">@Creativecrypter *args means that you can pass any number of parameters</span>
<span class="comment-copy">and if would need to do "or" operation on unknown number of arguments?</span>
<span class="comment-copy">You use <code>x or y</code> instead of <code>x and y</code> in the inner lambda.</span>
