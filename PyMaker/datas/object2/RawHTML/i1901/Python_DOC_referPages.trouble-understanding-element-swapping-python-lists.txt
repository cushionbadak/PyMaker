<div class="post-text" itemprop="text">
<p>In Python, I've seen two variable values swapped using this syntax:</p>
<pre><code>left, right = right, left
</code></pre>
<p>Is this considered the standard way to swap two variable values or is there some other means by which two variables are by convention most usually swapped?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while
  evaluating an assignment, the right-hand side is evaluated before the
  left-hand side.</p>
<p><a href="http://docs.python.org/3/reference/expressions.html#evaluation-order" rel="noreferrer">http://docs.python.org/3/reference/expressions.html#evaluation-order</a></p>
</blockquote>
<p>That means the following for the expression <code>a,b = b,a</code> :   </p>
<ul>
<li>the right-hand side <code>b,a</code> is evaluated, that is to say a tuple of two elements is created in the memory. The two element are the objects designated by the identifiers <code>b</code> and <code>a</code>, that were existing before the instruction is encoutered during an execution of program</li>
<li>just after the creation of this tuple, no assignement of this tuple object have still been made, but it doesn't matter, Python internally knows where it is </li>
<li>then, the left-hand side is evaluated, that is to say the tuple is assigned to the left-hand side</li>
<li>as the left-hand side is composed of two identifiers, the tuple is unpacked in order that the first identifier <code>a</code> be assigned to the first element of the tuple (which is the object that was formely <strong>b</strong> before the swap because it had name <code>b</code>)<br/>
and the second identifier <code>b</code> is assigned to the second element of the tuple (which is the object that was formerly <strong>a</strong> before the swap because its identifiers was <code>a</code>)</li>
</ul>
<p>This mechanism has effectively swapped the objects assigned to the identifiers <code>a</code> and <code>b</code></p>
<p>So, to answer your question: YES, it's the standard way to swap two identifiers on two objects.<br/>
By the way, the objects are not variables, they are objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is the standard way to swap two variables, yes.</p>
</div>
<div class="post-text" itemprop="text">
<p>I know three ways to swap variables, but <code>a, b = b, a</code> is the simplest. There is</p>
<h2>XOR (for integers)</h2>
<pre class="lang-python prettyprint-override"><code>x = x ^ y
y = y ^ x
x = x ^ y
</code></pre>
<p>Or concisely, </p>
<pre><code>x ^= y
y ^= x
x ^= y
</code></pre>
<h2>Temporary variable</h2>
<pre class="lang-python prettyprint-override"><code>w = x
x = y
y = w
del w
</code></pre>
<h2>Tuple swap</h2>
<pre class="lang-python prettyprint-override"><code>x, y = y, x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would not say it is a standard way to swap because it will cause some unexpected errors.</p>
<pre><code>nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]
</code></pre>
<p><code>nums[i]</code> will be modified first and then affect the second variable <code>nums[nums[i] - 1]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Does not work for multidimensional arrays, because references are used here.</p>
<pre><code>import numpy as np

# swaps
data = np.random.random(2)
print(data)
data[0], data[1] = data[1], data[0]
print(data)

# does not swap
data = np.random.random((2, 2))
print(data)
data[0], data[1] = data[1], data[0]
print(data)
</code></pre>
<p>See also <a href="https://stackoverflow.com/questions/14933577/swap-slices-of-numpy-arrays/14933939#14933939">Swap slices of Numpy arrays</a></p>
</div>
<span class="comment-copy">@eyquem: it simply comes down to whether <a href="https://stackoverflow.com/questions/tagged/order-of-evaluation">order-of-evaluation</a> is defined by the language for a tuple/list assignment. Python does, most older languages don't.</span>
<span class="comment-copy">Is the simplest and the only one that is not obfuscated.</span>
<span class="comment-copy">The XOR does not swap "variables". It swaps integer variables. (Or the few other types properly implementing XOR operator)  Furthermore, since according to Rogalski's answer, the Tuple Swap is optimised in the interpreter, there is really nothing against it. Short, clear, and fast.</span>
<span class="comment-copy">XOR issue can be avoided by + - operator use, but still I feel best is a, b = b, a <code>code</code> x = x+y y = x-y x = x-y <code>code</code></span>
<span class="comment-copy">You have the problem in almost any programming language, that is is not safe to use swap(a,b), if a depends on b or vice versa. For example, swap(a,b) might be expanded to: <code>var c=a</code>, <code>a=b</code>, <code>b=c</code>. And then, the last assignment will use the new value of <code>a</code> to evaluate the adress of b.</span>
<span class="comment-copy">This is indeed a special feature (or bug) of the numpy library.</span>
