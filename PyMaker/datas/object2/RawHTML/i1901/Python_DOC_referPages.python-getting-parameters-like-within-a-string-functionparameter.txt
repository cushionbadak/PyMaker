<div class="post-text" itemprop="text">
<p>I'm trying to get the type of MySQL columns, and I'm retrieving them as strings in python. They are not really functions but datatypes that can be or can't be signed.</p>
<p>example:</p>
<pre><code>someString = 'bigint(20)'
</code></pre>
<p>needed from the string <code>someString</code>:</p>
<pre><code>datatype = {'type': 'bigint', 'length': 20 }
</code></pre>
<p>if type has no specitfed limit or can't be signed</p>
<pre><code>someString = 'text'
</code></pre>
<p>needed from the string <code>someString</code>:</p>
<pre><code>datatype = {'type': 'bigint', 'length': None }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A regular expression can directly extract the fields you describe:</p>
<pre><code>&gt;&gt;&gt; re.match(r'^(?P&lt;type&gt;[^(]+)(?:\((?P&lt;length&gt;\d+)\))?$', 'bigint(20)').groupdict()
{'type': 'bigint', 'length': '20'}
</code></pre>
<ul>
<li><code>^</code> and <code>$</code> match the start and end of the string.</li>
<li><code>(?P&lt;type&gt;...+)</code> capture a group named <code>type</code>
<ul>
<li><code>[^(]+</code> matches one or more characters that are <em>not</em> <code>(</code></li>
</ul></li>
<li><code>(?:\(...\))?</code> matches an optional group contained in parentheses

<ul>
<li><code>(?P&lt;length&gt;...)</code> capture a group named <code>length</code>
<ul>
<li><code>\d+</code>  matches one or more digits</li>
</ul></li>
</ul></li>
</ul>
<p>Note that you may want to pre-compile the regular expression if you need it often. See the documentation for <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Python's builtin regular expression module</a>.</p>
<hr/>
<p>If you want to avoid regular expressions, you can also use string methods. This allows you to partition and strip the input step by step:</p>
<pre><code>def parse_type(literal):
    name, _, length = literal.partition('(')
    if not length:
        return {'type': name, 'length': None}
    return {'type': name, 'length': length.strip(')')}
</code></pre>
<p>This trades speed and robustness against readability.</p>
<hr/>
<p>Note that in <em>both</em> cases, you get the <code>length</code> as a string, not integer. You must convert it explicitly:</p>
<pre><code>result = parse_type('bigint(20)')
result['length'] = int(result['length']) if result['length'] is not None else None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An important thing to note here is that <code>bigint(20)</code> means an 8-byte integer that is padded to 20 <em>characters</em> in length when displayed, and <em>not</em> a 20-byte integer.</p>
<p>You can use the <code>cursor</code> object to easily fetch this information by using the <code>descrption</code> attribute. It provides meta information about the column types of the last query that was executed. eg.</p>
<pre><code>from mysql.connector import FieldType

cursor = ...    

cursor.execute("&lt;some query&gt;")
rows = cursor.fetchall()

for desc in cursor.description:
    col_name = desc[0]
    col_type = desc[1] # would be a number representing bigint in your case
    col_display_length = desc[2] # would be 20 in your case
    col_internal_size = desc[3] # number of bytes used to store the field (8 for bigint)
    print("Column {} has type {} with width {}".format(
        col_name, 
        FieldType.get_info(col_type), # convert the number to type information
        col_display_length
    ))
</code></pre>
<p>You can find out more about the contents of the descriptions here: <a href="https://www.python.org/dev/peps/pep-0249/#cursor-attributes" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0249/#cursor-attributes</a></p>
</div>
<span class="comment-copy">So what have you tried so far? Do you have problems writing a regex? Did string partitioning fail?</span>
<span class="comment-copy">is there something similar to php preg_match in python?</span>
<span class="comment-copy">that's awesome, thanks!</span>
<span class="comment-copy">thanks, I already got the description from a query. What do u thing is better?</span>
<span class="comment-copy">I would avoid parsing strings, especially with regexes, as they can be harder to understand. Whatever is building the type string that you are parsing is likely using type information that the description object is exposing, so it seems wasteful to build and parse the string as an intermediary step.</span>
