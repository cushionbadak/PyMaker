<div class="post-text" itemprop="text">
<pre><code>if [conditional]:
    program
else:
    program_alternative
</code></pre>
<p>How can I redefine the symbol I use for if? What if I would like to use a unicode character -- is this allowable in python? e.g. ≸ in the place of the string "if".</p>
<p>Is there any way to operate on this syntax? Can I say something like <code>type(if)</code> or perhaps <code>type(__if__)</code>?</p>
<p>I know that python permits variables to have unicode names but what if I especially want to make my code unreadable. </p>
<p>Or, is this something done by the parser that cannot be influenced? </p>
</div>
<div class="post-text" itemprop="text">
<p>That is correct: "[<code>if</code> is ..] <em>something done by the parser that cannot be influenced</em>".</p>
<p>For clarification, <code>if</code> is a <a href="https://www.programiz.com/python-programming/keywords-identifier#key" rel="nofollow noreferrer"><em>reserved keyword</em></a> for a specific grammar construct, as defined by the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">Python language</a>. In general, reserved words <em>cannot</em> be used as identifiers and have special parsing rules and behavior.</p>
<p>As such, <code>type(if)</code> is not even syntactically valid and will fail to parse: the program is invalid / illegal / made-up Python and the presented question of "does <code>if</code> have a type?" is not applicable.</p>
<blockquote>
<p>We cannot use a keyword as variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language.</p>
</blockquote>
<p>There is no special "if protocol" and <code>__if__</code> is an undeclared identifier.</p>
</div>
<div class="post-text" itemprop="text">
<p>In cpython (other implementations <em>may</em> vary, but I doubt in this regard), the <code>if</code> keyword is specified literally in the grammar (<a href="https://github.com/python/cpython/blob/master/Grammar/Grammar#L72" rel="nofollow noreferrer">for example</a>).  Everything else (including the parser) is built from this file.</p>
<p>You <em>could</em> rebuild a cpython interpreter from scratch after changing <code>if</code> to something else... but I'm not sure of the usefulness of it.</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <code>help</code> at first (unrelated):</p>
<pre><code>&gt;&gt;&gt; help('if')
The "if" statement
******************

The "if" statement is used for conditional execution:

   if_stmt ::= "if" expression ":" suite
               ( "elif" expression ":" suite )*
               ["else" ":" suite]

It selects exactly one of the suites by evaluating the expressions one
by one until one is found to be true (see section Boolean operations
for the definition of true and false); then that suite is executed
(and no other part of the "if" statement is executed or evaluated).
If all expressions are false, the suite of the "else" clause, if
present, is executed.

Related help topics: TRUTHVALUE

&gt;&gt;&gt; 
</code></pre>
<p>So anything that that does <code>SyntaxError</code> to you for doing <code>type</code>, means no good type for it, (so basically no-typed)</p>
<p>So See the color of those functions in your interpreter, then remember not to get type out of those :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in keyword for the conditional operator "if" must be used as-implemented according to the docs: <a href="https://docs.python.org/3.7/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">https://docs.python.org/3.7/reference/lexical_analysis.html#keywords</a></p>
</div>
<span class="comment-copy">Security through obscurity is not security.</span>
<span class="comment-copy"><code>if</code> is a reserved keyword, part of a statement. It doesn't have a <code>type</code>. It is not a string. It is source code</span>
<span class="comment-copy">You could translate the file on your own (ie map from ≸ to if) and then use <code>eval(compile(....))</code>. But then translation program would be readable. If I were you, I'd think about alternate approaches to solve the underlying problem than this particular approach.</span>
<span class="comment-copy">Why would you want to make your code unreadable? If your code was "unreadable" but I wanted to know what your code did, I'd just skip looking at the source and just instrument/debug the interpreter directly.</span>
<span class="comment-copy">@MichaelMacAskill This was not meant to be used for security purposes, more to the effect of creating unreadable code, or for application in code obfuscation challenges -- for fun :)</span>
<span class="comment-copy">I think this answer focuses more on <code>if</code> not being a type instead of trying to attack the actual problem (as Michael rightly pointed out -- security through obscurity doesn't work).</span>
<span class="comment-copy">@UltraInstinct It does, <i>on purpose</i>: this answers the question asked (which was presented in several different ways). If the OP wishes to use the information to backup and try again, they can choose to re-define their question(s).</span>
<span class="comment-copy">I'll give in: this answers what's asked in the question title. It's very obvious that OP wants to replace the tokens in the grammar. And it's their mistake to think this is somehow connected to the type (and that tokens have type). But how useful is the answer? Not really, sorry.</span>
<span class="comment-copy">"And let's not evaluate the usefulness of the question by the words in it."—what other <i>possible</i> way is there to evaluate it?</span>
<span class="comment-copy">I think that this answers the question I intended, despite my failure to communicate it well. @UltraInstinct my hope in gaining understanding of type would be to learn how to manipulate it.</span>
<span class="comment-copy">Changing <code>Grammar/Grammar</code> is the most important part of changing Python's grammar, but it's <a href="https://devguide.python.org/grammar/" rel="nofollow noreferrer">not the only part</a>.</span>
<span class="comment-copy">"you could rebuild a cpython interpreter" hmmmmmmmm. I think this may solve the problem that I am having, thanks!</span>
