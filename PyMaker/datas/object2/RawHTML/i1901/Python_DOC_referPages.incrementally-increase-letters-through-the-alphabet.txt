<div class="post-text" itemprop="text">
<p>So I have been trying to create a simple bruteforce script for a php form (on my own local webserver of course), It essentially works by inputting data into the from an list through a for loop. Here is the problem; if my list is: <code>list = ['a','b','c','d','e','f','g']</code> and my for loop looks something like this:</p>
<pre><code>for i in list:
   r = request.post(url, values) #posts the values
   if 'id=correct' in open('output.txt').read(): #check if it works
      print("logged in") 
      #if it works, it would print this, if not, 
      #it will retry with the next element in the list
</code></pre>
<p>The problem is, this will work for only one letter passwords (as it only cycles through the list once). My question is; how would I get it so that once it cycles through the list once, it will start the for loop again except with two elements from list(ie, aa,ab,ac,ad,ae,ef etc.)</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can treat this as a base conversion problem by incrementing a number and converting it to base 7 (the length of your list):</p>
<pre><code>def convert(n, lst):
    s = ''
    while True:
        s = lst[n % len(lst)] + s
        if n &lt; len(lst):
            break
        n = n // len(lst) - 1
    return s
</code></pre>
<p>so that:</p>
<pre><code>lst = ['a','b','c','d','e','f','g']
print(convert(0, lst))
print(convert(6, lst))
print(convert(7, lst))
print(convert(8, lst))
print(convert(55, lst))
print(convert(56, lst))
print(convert(57, lst))
</code></pre>
<p>outputs:</p>
<pre><code>a
g
aa
ab
gg
aaa
aab
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding correctly, you can use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a>.</p>
<pre><code>import itertools

lst = ['a','b','c','d']
for x in range(1, len(lst)): 
    passwords = list(itertools.product(lst, repeat=x))
    for password in passwords:
        print(''.join(password))
</code></pre>
</div>
<span class="comment-copy">See answers to this question.<a href="https://stackoverflow.com/questions/7074051/what-is-the-best-way-to-generate-all-possible-three-letter-strings" title="what is the best way to generate all possible three letter strings">stackoverflow.com/questions/7074051/â€¦</a> Basically all you need to do is generate all 1-n combinations where n is the max length your password field accepts and try them one by one. Don't try printing the results of the map, you'll run out of memory for large values of n.</span>
<span class="comment-copy">you also probably want to be checking <code>r.content</code> for the server response</span>
<span class="comment-copy">Worked perfectly! Thanks for the quick response and clear answer :)</span>
<span class="comment-copy">I think OP is rather looking for something like <code>itertools.product(lst, repeat=x)</code></span>
<span class="comment-copy">@tobias_k I thought that originally, then settled on permutations since it seems the most logical for a brute-force attack?</span>
<span class="comment-copy">But this will never find the most common password of all, <code>password</code>, due to the two <code>s</code></span>
<span class="comment-copy">@tobias_k I think you're probably right on balance, edited thanks :)</span>
<span class="comment-copy">@tobias_k also a valid point, but I wonder if the OP is aware of how quickly this brute-force approach will become untestable with scale. From their starting point, I'm not sure they're really going for an all-out implementation and they should be using other methods if they really want to test this.</span>
