<div class="post-text" itemprop="text">
<p>I have a class with a method that looks like this:</p>
<pre><code># self.stop_event -&gt; threading.Event
def run(self):
    while not self.stop_event.wait(3):  # i.e. repeat every 3 sec
        pass  # do stuff
</code></pre>
<p>The idea is that several of these are run in their own thread and at some point one thread does <code>stop_event.set()</code>, which naturally stops all others. I want to switch to asyncio for this, because the tasks in <code>run</code> are mostly sleeping and doing IO. Thus, I got to:</p>
<pre><code># self.stop_event -&gt; asyncio.Event
async def run(self):
    while not self.stop_event.is_set():
        await asyncio.sleep(3)
        pass  # do stuff
</code></pre>
<p>The problem is that the <code>asyncio.Event</code> cannot be waited on, so when it is set, there are at most 3 seconds to wait before the method completes. This is a problem, because the sleep time may be minutes. Currently, I am working around this by wrapping the <code>run</code> in an <code>asyncio.Task</code> and then cancelling it like <code>event_loop.call_soon(the_task.cancel)</code>.</p>
<p>I want to ask if there is a better way to achieve the above? Is there a way I can wait on an <code>asyncio.Event</code> with a timeout somehow, similar to the <code>threading.Event</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a way I can wait on an <code>asyncio.Event</code> with a timeout somehow, similar to the <code>threading.Event</code>?</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for" rel="noreferrer"><code>asyncio.wait_for</code></a> makes it convenient to add timeout to any coroutine. An emulation of <code>threading.Event.wait</code> with timeout could look like this:</p>
<pre><code>async def event_wait(evt, timeout):
    try:
        await asyncio.wait_for(evt.wait(), timeout)
    except asyncio.TimeoutError:
        pass
    return evt.is_set()
</code></pre>
<p>This allows a <code>run</code> almost exactly like the one that used <code>threading.Event</code>:</p>
<pre><code>async def run(self):
    while not await event_wait(self.stop_event, 3):
        pass  # do stuff
</code></pre>
</div>
<span class="comment-copy">IIRC, you can build something like Curio's <code>timeout_after</code> function pretty easily for <code>asyncio</code>, but it ends up being a little heavier (because you have to wrap it in a <code>Future</code> and then <code>wait</code> that with a timeout). Anyway, with that, you can do <code>await timeout_after(3, self.stop_event.wait)</code>, which gets what you want. I can try to dig up my implementation if you're interested and can't figure it out from that hint, but probably not until tomorrowâ€¦</span>
<span class="comment-copy">I found the source and will check it out, thanks.</span>
<span class="comment-copy">Neat solution, cheers!</span>
<span class="comment-copy">@IvanKalchev Thanks. I considered creating a Python pull request that adds the optional timeout to <code>asyncio.Event.wait</code>, but then I noticed that the timeout is <a href="https://docs.python.org/3/library/asyncio-sync.html" rel="nofollow noreferrer">intentionally left out</a>, with the documentation explicitly pointing to <code>asyncio.wait_for</code>. So this answer is pretty much the way it's intended to be done.</span>
<span class="comment-copy">Do you happen to know why a separate method is used for this?</span>
<span class="comment-copy">@IvanKalchev I think the idea was that those <i>timeout</i> arguments all over the place are simply not <b>needed</b> in asyncio because you can just use <code>asyncio.wait_for</code> or <code>future.cancel</code>, and so on. This is not the case with threads, where timeout arguments are actually necessary because interrupting a thread is not supported (for good reasons, and not only in Python). Since asyncio is about blocking calls and waiting, pretty much every coroutine would have to support a <i>timeout</i> argument, so the devs decided to omit all of them and provide a generic <code>asyncio.wait_for</code> instead.</span>
<span class="comment-copy">@IvanKalchev I think that was a bad decision in the case of <code>Event</code>, <code>Condition</code>, etc., which were otherwise written to closely model their <code>threading</code> counterparts, but for what it's worth, the decision was intentional, it's not a mere oversight. Someone sufficiently interested in the matter should argue on the bug tracker that the <i>timeout</i> arguments be implemented for <code>Event.wait</code> and others that have them.</span>
