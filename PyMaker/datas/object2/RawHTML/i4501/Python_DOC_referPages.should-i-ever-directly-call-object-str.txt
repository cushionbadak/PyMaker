<div class="post-text" itemprop="text">
<p>I'm writing a class in Python and I'm writing a <code>__str__()</code> function so my print statements can print string representations of instances of that class. Is there ever a reason to directly do something like this:</p>
<pre><code>myObj = Foo(params)
doSomething(myObj.__str__())
</code></pre>
<p>It feels like since there are other neater ways to do this, it would be a bad idea (or at least, not proper style) to directly call <code>__str__()</code>. That said, I can't find a website specifically saying not to.</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, dunder methods define how an object behaves in a particular context. They aren't intended to be used directly. (The major exception being when you are overriding a dunder method inherited from a parent class.)</p>
<p>In the case of <code>__str__</code>, there are <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">three documented uses</a>; it is used by the built-in functions <code>str</code>, <code>format</code>, and <code>print</code> so that (roughly speaking)</p>
<ol>
<li><code>str(myObj) == myObj.__str__()</code></li>
<li><code>format("{}", myObj) == format("{}", myObj.__str__())</code></li>
<li><code>print(myObj) == print(myObj.__str__())</code>.</li>
</ol>
<p>The key here is that <code>__str__</code> allows code that <em>isn't</em> built-in to Python to work with these functions; the <code>__str__</code> method provides the common interface all three can use.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>myObj.__str__()
</code></pre>
<p>is the same as</p>
<pre><code>str(myObj)
</code></pre>
<p>unless someone has the bad idea to hide <code>str</code> built-in by reassigning its name:</p>
<pre><code>str = lambda x: None
</code></pre>
<p>in which case only the first approach would work. But in the general case, it's better to avoid calling those dunder methods directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a custom string representation of your class, implement <code>__str__</code> in your class definition, and then you can call it using <code>str(myObj)</code> which will call your method. Calling <code>__str__</code> will be the same, but isn't as clean I'd say.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is the correct way of representing the object in print statements and logs, but I don't see why you'd ever do </p>
<pre><code>myObj = Foo(params)
doSomething(myObj.__str__())
</code></pre>
<p>over</p>
<pre><code>myObj = Foo(params)
doSomething(myObj)
</code></pre>
<p>Passing the object as a string to the function seems unnecessary, as it'd be easier to access it's attributes if you passed the object and <strong>said function can also call <code>myObj.__str__()</code> itself</strong>.</p>
</div>
<span class="comment-copy">It's a bad idea, but a very common thing to do, since <code>str</code> is the most common name for a string variable, and causes a very hard to detect bug.</span>
<span class="comment-copy">yes. Bad idea. Python experienced coders don't do that mistake :) you can extend the example to <code>list</code> and <code>dict</code>...</span>
<span class="comment-copy">*any mistake ;)</span>
<span class="comment-copy">no we don't, <i>never</i> :)</span>
<span class="comment-copy">This is a good point but I think it's less applicable to my core question.</span>
