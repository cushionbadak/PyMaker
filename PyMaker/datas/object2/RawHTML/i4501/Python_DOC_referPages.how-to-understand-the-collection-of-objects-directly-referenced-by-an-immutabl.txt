<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python documentation</a>:</p>
<blockquote>
<p>An object of an immutable sequence type cannot change once it is
  created. (If the object contains references to other objects, these
  other objects may be mutable and may be changed; however, the
  collection of objects directly referenced by an immutable object
  cannot change.)</p>
</blockquote>
<p>While the first part of the original quote is understandable, I don't quite get the last sentence. How can I understand the phrase: "directly referenced by an immutable object"?</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the best way to explain this will be an example.</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = (a, a)
</code></pre>
<p><code>b</code> is a tuple -- an immutable sequence. However, the objects it contains are lists, which are mutable.</p>
<p>It's possible to modify the mutable objects in the collection:</p>
<pre><code>&gt;&gt;&gt; a.append(4)
&gt;&gt;&gt; b
([1, 2, 3, 4], [1, 2, 3, 4])
</code></pre>
<p>However, it isn't possible to change which objects exist in <code>a</code>, because it's immutable. The first and second elements of <code>a</code> will always refer to the same list, and there's no way to change that.</p>
</div>
<div class="post-text" itemprop="text">
<p>It means that an immutable <code>tuple</code> can reference a mutable object, e.g. a <code>list</code>, which can be changed, while the tuple itself is unchanged. </p>
<pre><code>my_list = [1, 2, 3]
my_tuple = ('a', my_list)

print(my_tuple)
&gt;&gt;&gt; ('a', [1, 2, 3])

my_list.append(4)

print(my_tuple)
&gt;&gt;&gt; ('a', [1, 2, 3, 4])
</code></pre>
</div>
<span class="comment-copy">Thanks, I understand this example, but I still don't catch a phrase: "directly referenced by an immutable object". Isn't a in this example directly referenced by b?</span>
<span class="comment-copy">@ig-melnyk The writing is a bit confusing. They mean that the <i>collection</i> of objects -- that is, which objects are included, and where -- cannot be modified. The objects themselves can be modified if their type allows for it.</span>
<span class="comment-copy">Oh, thanks. It was really confusing. Can we say that this just the same as "Identities of the immutable object always remain the same"?</span>
<span class="comment-copy">Thanks, I understand this example, but I still don't catch a phrase: "directly referenced by an immutable object". Isn't a in this example directly referenced by b?</span>
<span class="comment-copy">Reading the following blog post by Luciano Ramalho, author of "Fluent Python", will help: <a href="https://standupdev.com/wiki/doku.php?id=python_tuples_are_immutable_but_may_change" rel="nofollow noreferrer">standupdev.com/wiki/â€¦</a>.</span>
<span class="comment-copy">Thanks for an interesting post, though I think I understood the first part of the paragraph. It's more about the meaning of one phrase I have problem with</span>
