<div class="post-text" itemprop="text">
<p>There is a list with elements of similar nature (4 7's,3 5's, etc.) that I want to insert in right left order into a another list ().</p>
<pre><code>newlst = []
lst = [7, 7, 7, 7, 5, 5, 5, 3, 3, 3, 2, 2]
</code></pre>
<p>So the first thing being inserted into newlst is the group of 7's:</p>
<pre><code>newlst = [7,7,7,7]
</code></pre>
<p>Subsequently, the group of 5's is inserted into the list on the right:</p>
<pre><code>newlst = [7, 7, 7, 7, 5, 5, 5]
</code></pre>
<p>And then the group of 3's is inserted on the left, and after that the group of 2's is inserted on the right. The final list looks like this</p>
<pre><code>newlst = [3, 3, 3, 7, 7, 7, 7, 5, 5, 5, 2, 2]
</code></pre>
<p>In order to add elements in the list on a right left basis, I did this:</p>
<pre><code>for i in lst:
    lst.insert(0,i)
 else:
    lst.append(i)
</code></pre>
<p>The insert method inserts elements into the 0 index (which is the right of the list) and append adds elements at the end of the list (which is the left of the list). However, I'm having problems adding the group of elements into the newlst. To that end, I thought using a dictionary would be a good idea.</p>
<pre><code>myDict = {2: 2, 3: 3, 5: 3, 7: 4}
</code></pre>
<p>EDIT:</p>
<pre><code>for k, v in myDict.items():
    if k in lst:
        for i in range(v):
            lst.append(i)
        else:
            lst.insert(0,i)
</code></pre>
<p>The intention of this dictionary is for each key, I want to insert the key value 'x' times, e.g. the key 7, would be inserted 4 times: [7,7,7,7]. Is there a way to achieve this in Python so I can get the output newlist: [3, 3, 3, 7, 7, 7, 7, 5, 5, 5, 2, 2] ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish this pretty easily with a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">deque</a>, along with <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">cycle</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">groupby</a></p>
<pre><code>from collections import deque
from itertools import groupby, cycle

#creates a deque object
d = deque()

#creates a repeating iterator to alternate function calls
c = cycle([d.extendleft, d.extend])

lst = [7, 7, 7, 7, 5, 5, 5, 3, 3, 3, 2, 2]
for _, items in groupby(lst):
    #calls the alternated function to extend the items 
    next(c)(items)

print(list(d))

&gt;&gt;&gt; [3, 3, 3, 7, 7, 7, 7, 5, 5, 5, 2, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is your initial code:</p>
<pre><code>newlst = []
lst = [7, 7, 7, 7, 5, 5, 5, 3, 3, 3, 2, 2]
myDict = {2: 2, 3: 3, 5: 3, 7: 4}
for k, v in myDict.items():
    if k in lst:
        for i in range(v):
            lst.append(i)
        else:
            lst.insert(0,i)
</code></pre>
<p>You have a few major problems here:</p>
<ol>
<li><code>k</code> is always in <code>lst</code>, by definition. That means your check is not a valid way to alternate.</li>
<li>Your data is getting appended/prepended to <code>lst</code> instead of <code>newlst</code>.</li>
<li>A <code>dict</code> is a hash-table. This means that the order of the keys will pretty much never be in the order you defined them in.</li>
</ol>
<p>The first item can be solved through enumeration:</p>
<pre><code>for i, (k, v) in enumerate(myDict.items()):
    if i % 2:
        newlst = [k] * v + newlst
    else:
        newlst += [k] * v
</code></pre>
<p>I've fixed the list you are appending to, and am using <code>[k] * v</code> to construct the prepended/appended list. <code>newlst += [k] * v</code> is equivalent to <code>newlst.extend([k] * v)</code>. However, keep in mind that <code>newlst = [k] * v + newlst</code> creates a new list object rather than concatenating in-place.</p>
<p>The third item can be fixed using <a href="https://docs.python.org/3/library/collections.html#ordereddict-objects" rel="nofollow noreferrer"><code>OrderedDict</code></a> instead of a regular <code>dict</code>:</p>
<pre><code>from collections import OrderedDict
...
myDict = OrderedDict([(2, 2), (3, 3), (5, 3), (7, 4)])
</code></pre>
<p>That will make the keys run in the order that you want. In fact, you don't need to construct <code>myDict</code> by hand at all. You can combine <code>OrderedDict</code> with a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> to get the exact same result dynamically. The recipe for this is given in the <code>OrderedDict</code> <a href="https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>from collections import Counter, OrderedDict
...
class OrderedCounter(Counter, OrderedDict):
    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))
    def __reduce__(self):
        return self.__class__, (OrderedDict(self),)

myDict = OrderedCounter(lst)
</code></pre>
<p>All this is pretty verbose and not very efficient. As <a href="https://stackoverflow.com/a/49680993/2988730">@Wondercricket's answer</a> points out, you can use the functions in <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> to perform the same task using generators.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you want to do?</p>
<pre><code>list = [7, 7, 7, 7, 5, 5, 5, 3, 3, 3, 2, 2]

def list_to_answerlist(list, default=[]):
    if not list:
        return default
    else:
        result = []
        direction = True                      # Insert Direction: True = Insert Left / False = Insert Right
        actual_group = list[0]
        for element in list:
            if (element != actual_group):
                direction = not direction     # Change Insert Direction
                actual_group = element        # Update Actual Group
            if direction:                     # Insert Left
                result.insert(0,element)
            else:                             # Insert Right
                result.append(element)
        return result

new_list = list_to_answerlist(list)           # output = [3, 3, 3, 7, 7, 7, 7, 5, 5, 5, 2, 2]
</code></pre>
</div>
<span class="comment-copy">While your question appears to have some code, there is no actual attempt to solve the problem being shown. The loop you show is complete nonsense, and you don't provide any context for how you run it. This really looks like fishing for free code.</span>
<span class="comment-copy">@MadPhysicist okay, will make some edits</span>
<span class="comment-copy">Now your loop is even more nonsense. It's not even valid Python any more</span>
<span class="comment-copy">Why do you keep checking <code>if k in lst</code> and then operating on <code>lst</code>? Do you want to actually do something with the new list? What do you expect <code>i k in lst</code> to do? You either need to think this through before posting, or to explain your thoughts if you've already done that.</span>
<span class="comment-copy">@MadPhysicist if k (for example: 2 ) is in the list, I want to append that value 4 times.</span>
<span class="comment-copy">This is very neat.</span>
<span class="comment-copy">Oh, I honestly didn't realize I was appending/inserting the wrong list</span>
