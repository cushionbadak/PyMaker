<div class="post-text" itemprop="text">
<p>The concept is simple. I want to create a list of 26 by 26 and fill it with the alphabet. Except that each time, I have to shift one letter to the right.</p>
<p>Example: </p>
<ol>
<li>A, B, C, E, F, G...</li>
<li>Z, A, B, C, E, F, G...</li>
<li>Y, Z, A, B, C, E, F, G... </li>
</ol>
<p>I made this code which works but it displayed the basic alphabet at the end. Looks like the array is resseted to the basic alphabet.</p>
<pre><code>alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
import numpy as np
Tableau=np.empty((26,26),dtype='&lt;U1')

for k in range(len(alphabet)):
    for i in range(len(alphabet)):
        if i + k &gt;= len(alphabet):
            i += k - len(alphabet)
        else:
            i += k

        Tableau[k][i] = alphabet[i]
        print(Tableau[k][i])
        print(alphabet[i], "\n")
</code></pre>
<p>I get  <code>['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R'
 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z']</code>  26 times instead of getting the right result.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are over thinking it, there is no need to use numpy here.
To shift a letter, just get the latest letter, remove it from the list and add it on the front, eg:</p>
<pre><code>alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
final_result = []
for i in range(len(alphabet)):
    el = alphabet[-1] # Get the first letter
    alphabet.pop() # Remove the latest letter
    alphabet = [el] + alphabet # Update the list, setting the first letter as the latest
    final_result.append(alphabet) # Append to the list containing the rotated alphabet
</code></pre>
<p>Note that: There are other ways to solve this issue, just demonstrated a way which is readable and easy to understand.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>`Matrix = [[chr(ord('A')+(x-y)%26) for x in range(26)] for y in range(26)]`
</code></pre>
<p>It uses a few tricks. First of all, list comprehension to make the 2D array. You don't need <code>numpy</code>. Second of all, it uses modulo arithmetic, <code>chr()</code> and <code>ord()</code>.</p>
<pre><code>`Matrix = [[x for x in range(26)] for y in range(26)]`
</code></pre>
<p>This will give you an array with each row:</p>
<pre><code>`[0,1,2,...]`


`Matrix = [[(x-y) for x in range(26)] for y in range(26)]`
</code></pre>
<p>Does the shift for each row, but goes out of the 0-26 range</p>
<pre><code>`[
[0,1,2,...]
[-1,0,1,2,...]
[-2,-1,0,1,2,...]
...
]`

`Matrix = [[((x-y)%26) for x in range(26)] for y in range(26)]`
</code></pre>
<p>Using mod 26, we put our numbers into the 0-25 range. </p>
<p>Now it's just a question of turning 0-25 into A-Z. </p>
<p>The built-ins <code>chr()</code> and <code>ord()</code> help you there.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem may be simpler than you're making it:</p>
<pre><code>import numpy as np

ALPHABET = list("ABCDEFGHIJKLMNOPQRSTUVWXYZ")

LENGTH = len(ALPHABET)

tableau = np.empty((LENGTH, LENGTH), dtype='&lt;U1')

for i in range(LENGTH):
    for j in range(LENGTH):
        k = (j - i) % LENGTH

        tableau[i][j] = ALPHABET[k]

print(tableau)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">deque</a> has a rotate method; turn your list into a deque; append the deque (as a list) to the final list; rotate; repeat 25 times.</p>
<pre><code>import collections
alphabet=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
alphabet = collections.deque(alphabet)
final = []
for _ in range(26):
    final.append(list(alphabet))
    alphabet.rotate()
</code></pre>
</div>
<span class="comment-copy">What do you mean by basic alphabet ?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/4528740/wrapping-around-a-python-list-as-a-slice-operation" title="wrapping around a python list as a slice operation">stackoverflow.com/questions/4528740/â€¦</a></span>
<span class="comment-copy">This prints the output similar to what the OP shows but the actual goal was, "create a list of 26 by 26 and fill it with the alphabet."  This solution leaves behind no data structure of that description.</span>
