<div class="post-text" itemprop="text">
<p>Example data:</p>
<pre><code>array(
  [[ 1.,  1.],
   [ 2.,  1.],
   [ 0.,  1.],
   [ 0.,  0.],
   [ 0.,  0.]])
</code></pre>
<p>with a desired result of </p>
<pre><code>&gt;&gt;&gt; [0.,0.]
</code></pre>
<p>ie) The most common pair.</p>
<p>Approaches that don't seem to work:</p>
<p>Using <a href="https://docs.python.org/3/library/statistics.html#statistics.mode" rel="nofollow noreferrer"><code>statistics</code></a> as numpy arrays are unhashable.</p>
<p>Using <code>scipy.stats.mode</code> as this returns the mode over each axis, eg) for our example it gives</p>
<pre><code>mode=array([[ 0.,  1.]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this efficiently with <code>numpy</code> using the <code>unique</code> function:</p>
<pre><code>pairs, counts = np.unique(a, axis=0, return_counts=True)
print(pairs[counts.argmax()])
</code></pre>
<p>Returns: <code>[ 0.  0.]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One way via the standard library is to use <code>collections.Counter</code>.</p>
<p>This gives you both the most common pair and the count. Use <code>[0]</code> index on <code>Counter.most_common()</code> to retrieve the highest count.</p>
<pre><code>import numpy as np
from collections import Counter

A = np.array(
  [[ 1.,  1.],
   [ 2.,  1.],
   [ 0.,  1.],
   [ 0.,  0.],
   [ 0.,  0.]])

c = Counter(map(tuple, A)).most_common()[0]

# ((0.0, 0.0), 2)
</code></pre>
<p>The only complication is you need to convert to <code>tuple</code> as <code>Counter</code> only accepts hashable objects.</p>
</div>
<span class="comment-copy">jic anyone needs to know, for .argmax() ~ "In case of multiple occurrences of the maximum values, the indices corresponding to the first occurrence are returned."</span>
<span class="comment-copy">Note the <code>axis</code> argument is only available in (fairly recent) <code>numpy</code> v.1.13.</span>
