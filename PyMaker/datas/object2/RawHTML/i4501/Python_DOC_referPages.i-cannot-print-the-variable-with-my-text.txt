<div class="post-text" itemprop="text">
<p>I'm trying just to create a simple line of code but I can not seem to figure out how to print a string and a variable at the same time. If someone could plz help me that would be great.</p>
<pre><code>day = 1

print ("Day Number: ("+day+")")  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Three ways:</p>
<pre><code>print("Day Number: {}".format(day))

print("Day Number: %d" %day)

print("Day Number:", day)
# Note: if using python 2, this last one needs to be without parentheses, 
# or the parentheses will show up in your output too. 
# But this is the least flexible way anyways.
</code></pre>
<p>All result in <code>Day Number: 1</code>. Personally, I Prefer the <code>.format()</code> way, and there are lots of options you can use with it. See the <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">docs</a> for more information. For more information on the use of the <code>%</code> formatter, see the section <a href="https://docs.python.org/release/3.1.5/library/stdtypes.html#old-string-formatting-operations" rel="nofollow noreferrer">Old String Formatting Operations</a>, but also note that they say it is <strong>obsolete</strong>, and they recommend the <code>.format()</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert your variable to a string in order to add it to other strings</p>
<pre><code>day = 1
print("Day Number: (" + str(day) + ")")  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>day = 1

print ("Day Number: ("+str(day)+")") 

print ("Day Number: ( %s ) " % day ) 
</code></pre>
<p>The top one explicitly casts the day into a string. The second one uses the <code>%</code> operator to put the data into the string. In Python, <code>int</code> cannot be cast to <code>str</code> implicitly.</p>
</div>
<span class="comment-copy">try: <code>print("Day Number: {}".format(day))</code></span>
<span class="comment-copy">Check out more info on formatting: <a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></span>
<span class="comment-copy">Thanks! that solved the problem</span>
<span class="comment-copy">New and improved <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer"><i>f-strings</i></a>: <code>f'Day Number: {day}'</code></span>
<span class="comment-copy">No need to explicitly cast to string, just use <code>format</code> or <code>%</code> -1</span>
<span class="comment-copy">I noticed your solution, this is mine. It works. Is it the best solution, no it is not.</span>
<span class="comment-copy">Why post it if it isn't the best solution? To concatenate with + is a bad habit, especially when there's much better options.</span>
<span class="comment-copy">I gave a possible solution to the OP. Others are more than welcome to offer their answers, the OP can then select which is best suited for him. Your -1 is just a testament to the toxicity of some of the users. If you have an answer, provide it. In the context of this code the ideal solution would be <code>print("Day Number: (1)")</code>. What's the purpose of initializing and storing a value in memory in this context?</span>
<span class="comment-copy">Sorry, I know you have the best of intentions but it's still a bad answer teaching bad habits. You don't have to search hard why that is: <a href="https://softwareengineering.stackexchange.com/questions/304445/why-is-s-better-than-for-concatenation" title="why is s better than for concatenation">softwareengineering.stackexchange.com/questions/304445/â€¦</a></span>
