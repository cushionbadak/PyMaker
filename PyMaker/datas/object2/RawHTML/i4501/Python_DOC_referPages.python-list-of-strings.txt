<div class="post-text" itemprop="text">
<p>Given a list of strings, return a list with the strings in sorted order, except group all the strings that begin with 'x' first.</p>
<p>For instance:</p>
<pre><code>['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] 
</code></pre>
<p>yields</p>
<pre><code>['xanadu', 'xyz', 'aardvark', 'apple', 'mix']  
</code></pre>
<p>Hint: this can be done by making 2 lists and sorting each of them before combining them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> with a custom key function:</p>
<pre><code>your_list = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark', 'ball']

result = sorted(your_list, key=lambda word: (not word.startswith('x'), word))

print(result)  # ['xanadu', 'xyz', 'aardvark', 'apple', 'ball', 'mix']
</code></pre>
<p>The key function creates tuples like <code>(True, 'apple')</code> which the <code>sorted</code> function uses to determine sort order. Words that start with "x" will have <code>False</code> as the first value in the tuple, and other words will have <code>True</code> instead:</p>
<pre><code>your_list = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark', 'ball']

print([(not word.startswith('x'), word) for word in your_list])
# [(True, 'mix'), (False, 'xyz'), (True, 'apple'), (False, 'xanadu'),
#  (True, 'aardvark'), (True, 'ball')]
</code></pre>
<p>Since <code>False &lt; True</code>, this guarantees that all words starting with "x" are sorted first.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can sort the 2 different lists and return the concatenation of the 2, like this :</p>
<pre><code>def my_sorting(words):
    x_words = [w for w in words if w and w[0] == 'x']
    o_words = [w for w in words if w and w[0] != 'x']

    return sorted(x_words) + sorted(o_words)
</code></pre>
<p>To call the function:</p>
<pre><code>l = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] 
sorted_l = my_sorting(l)
print(sorted_l)
</code></pre>
<p>The result is :</p>
<pre><code>['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more pythonic way:</p>
<pre><code>sorted([b for b in a if b[0]=='x']) + sorted([c for c in a if c[0]!='x'])
</code></pre>
<p>First we separate the list into two lists, those starting with X and those that don't. then we sort and join them together.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def front_x(words):
  # +++your code here+++
  l = len(words)
  i = 0
  new_words = []
  no_words = []
  while i &lt;l:
    m = words[i]
    if m[0] == 'x':
      #print('yes',m)

      new_words.append(words[i])
      #print('new',new_words)
    else:
        no_words.append(words[i])

    i = i+1
  new_words.reverse()
  no_words.reverse()

  return new_words + no_words
</code></pre>
</div>
<span class="comment-copy">Stackoverflow does not provide homework solution. Please include what you have tried so far to solve the problem.</span>
<span class="comment-copy">you're right ! Done.</span>
<span class="comment-copy">This function never sorts anything... Change those <code>.reverse()</code> calls to <code>.sort()</code>.</span>
<span class="comment-copy">pyhton encourages using list comprehension for filtering the list and built in functions for sorting.</span>
<span class="comment-copy">@AmiHeines A single loop is more efficient than two list comprehensions, so it's justifiable to use a loop here.</span>
<span class="comment-copy">@Aran-Fey May be so, but less lines of code and simpler code makes it more apparent and obvious what you're trying to achieve. This also reduces the bugs per code ratio and helps with future maintainability.  Remember: premature optimization is the root of all evil</span>
