<div class="post-text" itemprop="text">
<pre><code>d={'a':'Apple','b':'ball','c':'cat'}
</code></pre>
<p>The above dictionary I have and I want my Output like the below-mentioned result</p>
<pre><code>res="a=Apple,b=ball,c=cat"
</code></pre>
<p>Is it possible in a pythonic way then please answer it I have tried various method but did not get desired output?</p>
</div>
<div class="post-text" itemprop="text">
<p>Read your dictionary as key/value pairs (<a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer"><code>dict.items()</code></a>) and then just format them in a string you like:</p>
<pre><code>d = {'a': 'Apple', 'b': 'ball', 'c': 'cat'}

res = ",".join(("{}={}".format(*i) for i in d.items()))  # a=Apple,c=cat,b=ball
</code></pre>
<p>The order, tho, cannot be guaranteed for a <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a>, use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict()</code></a> if order is important.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to iterate via <code>dict.items</code> and use multiple <code>str.join</code> calls.</p>
<pre><code>d = {'a':'Apple','b':'ball','c':'cat'}

res = ','.join(['='.join(i) for i in d.items()])

# 'a=Apple,b=ball,c=cat'
</code></pre>
<p>If you need items ordered by key, use <code>sorted(d.items())</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def format_dict(d):
    vals = list(d.values())
    return "={},".join(d.keys()).format(*vals) + "={}".format(vals[-1])

d = {'a': 'Apple', 'b': 'ball', 'c': 'cat'}
format_dict(d)  # -&gt; 'a=Apple,b=ball,c=cat'
</code></pre>
<p>This joins all the keys into a large string containing replacement fields that we then format passing the dict values as args. There wasn't a trailing replacement field so we concatenate the last value in the dictionary to our large string.</p>
</div>
<span class="comment-copy">what did you try? please share your past work</span>
<span class="comment-copy">It worked order is not a problem</span>
<span class="comment-copy">@SamreshKumarJha - Prior to Python 3.6 (at least on CPython) dictionaries were not guaranteed to preserve order. In fact, they are only guaranteed to preserve insert order in CPython implementation of Python 3.6 - interpreter wide guarantee comes only with Python 3.7. Everything not guaranteed to run on CPython 3.6+ or a general Python 3.7+ interpreter should not count on <code>dict</code> being ordered.</span>
