<div class="post-text" itemprop="text">
<p>I'd like to verify that all objects contained in a given list are instances of <code>int</code> (or some other class, or set of classes).</p>
<p>For example, I can do this:</p>
<pre>
my_list = [1, 2, 3, 4]

for i in my_list:
  if not isinstance(i, int):
    raise Exception('Found a non-int!')
</pre>
<p>Is there a faster way than iterating over the list?  Do I need to extend the list class to contain a set of each added class or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can combine <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all()</a> with <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">isinstance()</a> like this</p>
<pre><code>a = [1, 2, 3, 4]

# return true
print(all(isinstance(i, int) for i in a))

b = [1, 2, 3, 4.5]

# return false
print(all(isinstance(i, int) for i in b))

#for list of instances
c = ['hello', 2, 3, 4]

#return true
print(all(isinstance(i, (int, str)) for i in c))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let me try again. My initial answer was concise but, alas, WRONG. On the same sort of theme it occurred to me to substitute a construction involving <code>lambda</code>. Correct result. Perhaps this would achieve the required results faster?</p>
<pre><code>&gt;&gt;&gt; my_list = [0,2,3,4]
&gt;&gt;&gt; all(map(lambda x: type(x)==int, my_list))
True
</code></pre>
<p>Accordingly I timed the two approaches:</p>
<pre><code>s = '''\
my_list = [0, 2, 3, 4]
for i in my_list:
    if not isinstance(i, int):
        raise Exception('Found a non-int!')'''

print (timeit.timeit(s))

s = '''\
my_list = [0,2,3,4]
all(map(lambda x: type(x)==int, my_list))'''

print (timeit.timeit(s))
</code></pre>
<p>with the following output:</p>
<pre><code>0.6864084666728032
1.3789049683458745
</code></pre>
<p>Not only is the approach based on <code>map</code> not faster it takes twice as long. Undaunted (or pig headed if you like) I thought that there might be some sort of setup time that explains the performance of 'my' approach. So I tried a much bigger list.</p>
<pre><code>s = '''\
my_list = list(range(2000))
for i in my_list:
    if not isinstance(i, int):
        raise Exception('Found a non-int!')'''

print (timeit.timeit(s))

s = '''\
my_list = list(range(2000))
all(map(lambda x: type(x)==int, my_list))'''

print (timeit.timeit(s))
</code></pre>
<p>with the following results:</p>
<pre><code>305.03338925738615
478.1060787659975
</code></pre>
<p>Once again, the approach using <code>map</code> and <code>lambda</code> is much slower.</p>
<hr/>
<p>(I'm going to try to forget that I wrote this.)</p>
<p>Concisely:</p>
<pre><code>&gt;&gt;&gt; my_list = [1,2,3,4]
&gt;&gt;&gt; all(map(int, my_list))
True
</code></pre>
<p>In Python, a list can contain items of any type.</p>
<pre><code>&gt;&gt;&gt; a_list = [1, 'b', 5, 7]
</code></pre>
</div>
<span class="comment-copy">I should have learned by now that it's worth doing timings. I've updated my answer.</span>
<span class="comment-copy">This is wrong. Consider <code>my_list = [0,2,3,4]</code>.</span>
