<div class="post-text" itemprop="text">
<p>I have the format
<code>day/month/year</code></p>
<p>And I have a task to define a function that takes a <code>date</code> and returns the date with 1 day increased
Example:</p>
<p><code>next_day("13/1/2018")</code> returns <code>14/1/2018</code></p>
<p><code>next_day("31/3/2018")</code> returns <code>1/4/2018</code></p>
<p>How can I do that, I don't know how to do this when the function takes <code>date</code> not <code>day</code>, <code>month</code>, <code>year</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one way using the 3rd party <code>dateutil</code> library and <code>datetime</code> from the standard library.</p>
<pre><code>import datetime
from dateutil import parser

def add_day(x):
    try:
        new = parser.parse(x) + datetime.timedelta(days=1)
    except ValueError:
        new = parser.parse(x, dayfirst=True) + datetime.timedelta(days=1)
    return new.strftime('%d/%m/%Y').lstrip('0').replace('/0', '/')

add_day('13/1/2018')  # '14/1/2018'
add_day('31/3/2018')  # '1/4/2018'
</code></pre>
<p>Trying to perform the same logic with <code>datetime</code> will be more restrictive, which is probably not what you want since it's not obvious you can guarantee the format of your input dates.</p>
<p><strong>Explanation</strong></p>
<ul>
<li>Try parsing sequentially with month first (default), then day first.</li>
<li>Add a day using <code>datetime.timedelta</code>.</li>
<li>Use string formatting to remove leading zeros.</li>
</ul>
<p><strong>Pure <code>datetime</code> solution</strong></p>
<pre><code>import datetime

def add_day(x):
    try:
        new = datetime.datetime.strptime(x, '%m/%d/%Y') + datetime.timedelta(days=1)
    except ValueError:
        new = datetime.datetime.strptime(x, '%d/%m/%Y') + datetime.timedelta(days=1)
    return new.strftime('%d/%m/%Y').lstrip('0').replace('/0', '/')

add_day('13/1/2018')  # '14/1/2018'
add_day('31/3/2018')  # '1/4/2018'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this function to return the current date at least.</p>
<p>extension Date {</p>
<pre><code>var withWeekDayMonthDayAndYear: String {
    let formatter = DateFormatter()
    formatter.timeZone = TimeZone(abbreviation: "EST")
    formatter.dateFormat = "EEEE, MMMM dd, yyyy"
    return formatter.string(from: self)
}
</code></pre>
<p>Then use the extension..
((Date().withWeekDayMonthDayAndYear))</p>
<p>It's a start..</p>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html</a></span>
<span class="comment-copy">Can you be more precise in what you don't know how to do?</span>
<span class="comment-copy">Step 1: Google "python parse date string". Step 2: Google "python add 1 day to date". Step 3: Google "python convert date to string". Step 4: Profit.</span>
<span class="comment-copy">@Robáµ© I need to convert the <code>date</code> as it will be a string so I can split it into day/month/year without changing it from being a string.</span>
<span class="comment-copy">Why would you want to not change it from being a string? A <code>datetime</code>/<code>date</code> object would be much easier to deal with.</span>
<span class="comment-copy">I like it but the second ValueError should raise an error I'd say.</span>
<span class="comment-copy">Thanks, this really helped, but can't I do this with python 2? dateutil is a python 3 function.</span>
<span class="comment-copy">@MarwanKhaled, sure I've added that.</span>
<span class="comment-copy">This question is for <a href="https://stackoverflow.com/questions/tagged/python">python</a>, which your answer does not appear to be written in...</span>
