<div class="post-text" itemprop="text">
<p>I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:</p>
<pre><code>x = 0
y = 1
z = 3
mylist = []

if x or y or z == 0 :
    mylist.append("c")
if x or y or z == 1 :
    mylist.append("d")
if x or y or z == 2 :
    mylist.append("e")
if x or y or z == 3 : 
    mylist.append("f")
</code></pre>
<p>which would return a list of </p>
<pre><code>["c", "d", "f"]
</code></pre>
<p>Is something like this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>
<pre><code>if x == 1 or y == 1 or z == 1:
</code></pre>
<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>
<p>You can shorten that using a containment test against <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">a tuple</a>:</p>
<pre><code>if 1 in (x, y, z):
</code></pre>
<p>or better still:</p>
<pre><code>if 1 in {x, y, z}:
</code></pre>
<p>using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="noreferrer">a <code>set</code></a> to take advantage of the constant-cost membership test (<code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>
<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>
<p>This is due to <a href="http://docs.python.org/2/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>
<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do. </p>
<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href="http://docs.python.org/2/reference/expressions.html#boolean-operations" rel="noreferrer">boolean expressions</a> for details on what Python considers false in a boolean context).</p>
<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>
<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is more easily addressed with a dictionary structure like:</p>
<pre><code>x = 0
y = 1
z = 3
d = {0: 'c', 1:'d', 2:'e', 3:'f'}
mylist = [d[k] for k in [x, y, z]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Previous Solution:</strong> As stated by Martijn Pieters, the correct, and fastest, format is:</p>
<pre><code>if 1 in {x, y, z}:
</code></pre>
<p>The one major issue that does not seem to be addressed is that you want your output list to include each letter after a true if statement. <br/><br/>Using only Martijn Pieters' advice you would now have:</p>
<pre><code>if 0 in {x, y, z}:
    Mylist.append("c")
elif 1 in {x, y, z}:
    Mylist.append("d")
...
</code></pre>
<p><strong>Problem:</strong> The first if statement would return true, and you would never get to the following elif statement. So your list would simply return:</p>
<pre><code>["c"]
</code></pre>
<p>What you want is to have separate if statements so that python will read each statement whether the former were true or false. Such as:</p>
<pre><code>if 0 in {x, y, z}:
    Mylist.append("c")
if 1 in {x, y, z}:
    Mylist.append("d")
if 2 in {x, y, z}:
    Mylist.append("e")
...
</code></pre>
<p>This will work, but 'if' you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a 'for' loop:</p>
<pre><code>numToLetters = {0:"c", 1:"d", 2:"e", 3:"f"}
for number in numToLetters:
    if number in {x, y, z}:
        Mylist.append(numToLetters[number])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The direct way to write <code>x or y or z == 0</code> is</p>
<pre><code>if any(map((lambda value: value == 0), (x,y,z))):
    pass # write your logic.
</code></pre>
<p>But I dont think, you like it. :)
And this way is ugly.</p>
<p>The other way (a better) is:</p>
<pre><code>0 in (x, y, z)
</code></pre>
<p>BTW lots of <code>if</code>s could be written as something like this</p>
<pre><code>my_cases = {
    0: Mylist.append("c"),
    1: Mylist.append("d")
    # ..
}

for key in my_cases:
    if key in (x,y,z):
        my_cases[key]()
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you ARE very very lazy, you can put the values inside an array. Such as</p>
<pre><code>list = []
list.append(x)
list.append(y)
list.append(z)
nums = [add numbers here]
letters = [add corresponding letters here]
for index in range(len(nums)):
    for obj in list:
        if obj == num[index]:
            MyList.append(letters[index])
            break
</code></pre>
<p>You can also put the numbers and letters in a dictionary and do it, but this is probably a LOT more complicated than simply if statements. That's what you get for trying to be extra lazy :)</p>
<p>One more thing, your </p>
<pre><code>if x or y or z == 0:
</code></pre>
<p>will compile, but not in the way you want it to. When you simply put a variable in an if statement (example)</p>
<pre><code>if b
</code></pre>
<p>the program will check if the variable is not null. Another way to write the above statement (which makes more sense) is </p>
<pre><code>if bool(b)
</code></pre>
<p>Bool is an inbuilt function in python which basically does the command of verifying a boolean statement (If you don't know what that is, it is what you are trying to make in your if statement right now :))</p>
<p>Another lazy way I found is :</p>
<pre><code>if any([x==0, y==0, z==0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check if a value is contained within a set of variables you can use the inbuilt modules           <code>itertools</code> and <code>operator</code>.</p>
<p>For example:</p>
<p>Imports:</p>
<pre><code>from itertools import repeat
from operator import contains
</code></pre>
<p>Declare variables:</p>
<pre><code>x = 0
y = 1
z = 3
</code></pre>
<p>Create mapping of values (in the order you want to check):</p>
<pre><code>check_values = (0, 1, 3)
</code></pre>
<p>Use <code>itertools</code> to allow repetition of the variables:</p>
<pre><code>check_vars = repeat((x, y, z))
</code></pre>
<p>Finally, use the <code>map</code> function to create an iterator:</p>
<pre><code>checker = map(contains, check_vars, check_values)
</code></pre>
<p>Then, when checking for the values (in the original order), use <code>next()</code>:</p>
<pre><code>if next(checker)  # Checks for 0
    # Do something
    pass
elif next(checker)  # Checks for 1
    # Do something
    pass
</code></pre>
<p>etc...</p>
<p>This has an advantage over the <code>lambda x: x in (variables)</code> because <code>operator</code> is an inbuilt module and is faster and more efficient than using <code>lambda</code> which has to create a custom in-place function.</p>
<p>Another option for checking if there is a non-zero (or False) value in a list:</p>
<pre><code>not (x and y and z)
</code></pre>
<p>Equivalent:</p>
<pre><code>not all((x, y, z))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this will handle it better:</p>
<pre><code>my_dict = {0: "c", 1: "d", 2: "e", 3: "f"}

def validate(x, y, z):
    for ele in [x, y, z]:
        if ele in my_dict.keys():
            return my_dict[ele]
</code></pre>
<p>Output:</p>
<pre><code>print validate(0, 8, 9)
c
print validate(9, 8, 9)
None
print validate(9, 8, 2)
e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Set is the good approach here, because it orders the variables, what seems to be your goal here. <code>{z,y,x}</code> is <code>{0,1,3}</code> whatever the order of the parameters.</p>
<pre><code>&gt;&gt;&gt; ["cdef"[i] for i in {z,x,y}]
['c', 'd', 'f']
</code></pre>
<p>This way, the whole solution is O(n).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use if, else statements following is another solution:</p>
<pre><code>myList = []
aList = [0, 1, 3]

for l in aList:
    if l==0: myList.append('c')
    elif l==1: myList.append('d')
    elif l==2: myList.append('e')
    elif l==3: myList.append('f')

print(myList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All of the excellent answers provided here concentrate on the specific requirement of the original poster and concentrate on the <code>if 1 in {x,y,z}</code> solution put forward by Martijn Pieters.<br/>
What they ignore is the broader implication of the question:<br/>
<strong>How do I test one variable against multiple values?</strong><br/>
The solution provided will not work for partial hits if using strings for example:<br/>
Test if the string "Wild" is in multiple values</p>
<pre><code>&gt;&gt;&gt; x = "Wild things"
&gt;&gt;&gt; y = "throttle it back"
&gt;&gt;&gt; z = "in the beginning"
&gt;&gt;&gt; if "Wild" in {x, y, z}: print (True)
... 
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; x = "Wild things"
&gt;&gt;&gt; y = "throttle it back"
&gt;&gt;&gt; z = "in the beginning"
&gt;&gt;&gt; if "Wild" in [x, y, z]: print (True)
... 
</code></pre>
<p>for this scenario it's easiest to convert to a string</p>
<pre><code>&gt;&gt;&gt; [x, y, z]
['Wild things', 'throttle it back', 'in the beginning']
&gt;&gt;&gt; {x, y, z}
{'in the beginning', 'throttle it back', 'Wild things'}
&gt;&gt;&gt; 

&gt;&gt;&gt; if "Wild" in str([x, y, z]): print (True)
... 
True
&gt;&gt;&gt; if "Wild" in str({x, y, z}): print (True)
... 
True
</code></pre>
<p>It should be noted however, as mentioned by <code>@codeforester</code>, that word boundries are lost with this method, as in:    </p>
<pre><code>&gt;&gt;&gt; x=['Wild things', 'throttle it back', 'in the beginning']
&gt;&gt;&gt; if "rot" in str(x): print(True)
... 
True
</code></pre>
<p>the 3 letters <code>rot</code> do exist in combination in the list but not as an individual word. Testing for " rot " would fail but if one of the list items were "rot in hell", that would fail as well.<br/>
The upshot being, be careful with your search criteria if using this method and be aware that it does have this limitation.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {0:'c', 1:'d', 2:'e', 3: 'f'}
x, y, z = (0, 1, 3)
print [v for (k,v) in d.items() if x==k or y==k or z==k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code may be helpful</p>
<pre><code>L ={x, y, z}
T= ((0,"c"),(1,"d"),(2,"e"),(3,"f"),)
List2=[]
for t in T :
if t[0] in L :
    List2.append(t[1])
    break;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One line solution:</p>
<pre><code>mylist = [{0: 'c', 1: 'd', 2: 'e', 3: 'f'}[i] for i in [0, 1, 2, 3] if i in (x, y, z)]
</code></pre>
<p>Or:</p>
<pre><code>mylist = ['cdef'[i] for i in range(4) if i in (x, y, z)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try the method shown below. In this method, you will have the freedom to specify/input the number of variables that you wish to enter.</p>
<pre><code>mydict = {0:"c", 1:"d", 2:"e", 3:"f"}
mylist= []

num_var = int(raw_input("How many variables? ")) #Enter 3 when asked for input.

for i in range(num_var): 
    ''' Enter 0 as first input, 1 as second input and 3 as third input.'''
    globals()['var'+str('i').zfill(3)] = int(raw_input("Enter an integer between 0 and 3 "))
    mylist += mydict[globals()['var'+str('i').zfill(3)]]

print mylist
&gt;&gt;&gt; ['c', 'd', 'f']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can be done easily as </p>
<pre><code>for value in [var1,var2,var3]:
     li.append("targetValue")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you're building some kind of Caesar cipher.</p>
<p>A much more generalized approach is this:</p>
<pre><code>input_values = (0, 1, 3)
origo = ord('c')
[chr(val + origo) for val in inputs]
</code></pre>
<p>outputs</p>
<pre><code>['c', 'd', 'f']
</code></pre>
<p>Not sure if it's a desired side effect of your code, but the order of your output will always be sorted.</p>
<p>If this is what you want, the final line can be changed to:</p>
<pre><code>sorted([chr(val + origo) for val in inputs])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To test multiple variables with one single value: <code>if 1 in {a,b,c}:</code></p>
<p>To test multiple values with one variable: <code>if a in {1, 2, 3}:</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you need direct formula for output bits set.</p>
<p>x=0 or y=0 or z=0   is equivalent to x<em>y</em>z = 0</p>
<p>x=1 or y=1 or z=1   is equivalent to (x-1)<em>(y-1)</em>(z-1)=0</p>
<p>x=2 or y=2 or z=2   is equivalent to (x-2)<em>(y-2)</em>(z-2)=0</p>
<p>lets map to bits: 'c':1 'd':0xb10 'e':0xb100 'f':0xb1000</p>
<p>relation of isc:</p>
<p>if xyz=0 then isc=1 else isc=0</p>
<p>use math if formula <a href="https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&amp;t=315" rel="nofollow noreferrer">https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&amp;t=315</a></p>
<p>[c]: (xyz=0 and isc=1) or (((xyz=0 and isc=1) or (isc=0)) and (isc=0))</p>
<p>[d]: ((x-1)(y-1)(z-1)=0 and isc=2) or (((xyz=0 and isd=2) or (isc=0)) and (isc=0))</p>
<p>...</p>
<p>connect these formulas by following logic:</p>
<p>logic and is sum of squares of equations</p>
<p>logic or is product of equations</p>
<p>and you'll have total equation</p>
<p>express sum and you have total formula of sum</p>
<p>then sum&amp;1 is c, sum&amp;2 is d, sum&amp;4 is e, sum&amp;5 is f</p>
<p>after this you may form predefined array where index of string element would correspond to ready string.</p>
<p>array[sum] gives you the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>The most mnemonic way of representing your pseudo-code in Python would be:</p>
<pre><code>x = 0
y = 1
z = 3
mylist = []

if any(v == 0 for v in (x, y, z)):
    mylist.append("c")
if any(v == 1 for v in (x, y, z)):
    mylist.append("d")
if any(v == 2 for v in (x, y, z)):
    mylist.append("e")
if any(v == 3 for v in (x, y, z)):
    mylist.append("f")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use dictionary :</p>
<pre><code>x = 0
y = 1
z = 3
list=[]
dict = {0: 'c', 1: 'd', 2: 'e', 3: 'f'}
if x in dict:
    list.append(dict[x])
else:
    pass

if y in dict:
    list.append(dict[y])
else:
    pass
if z in dict:
    list.append(dict[z])
else:
    pass

print list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will going to help you</p>
<pre><code>def test_fun(val):
    x = 0
    y = 1
    z = 2
    myList = []
    if val in (x, y, z) and val == 0:
        myList.append("C")
    if val in (x, y, z) and val == 1:
        myList.append("D")
    if val in (x, y, z) and val == 2:
        myList.append("E")

test_fun(2);
</code></pre>
</div>
<span class="comment-copy">use <code>1</code> in (tuple)</span>
<span class="comment-copy">When you want to evaluate a list of statements in a any/all manner you can use <code>any</code>/<code>all</code> functions. For example: <code>all([1, 2, 3, 4, False])</code> will return False <code>all([True, 1, 2, 3])</code> will return True <code>any([False, 0, 0, False])</code> will return False <code>any([False, 0, True, False])</code> will return True</span>
<span class="comment-copy">I did a summary post based on answers here:  <a href="https://medium.com/codervlogger/python-how-to-test-multiple-variables-against-a-value-7338857b1fec" rel="nofollow noreferrer">medium.com/codervlogger/…</a></span>
<span class="comment-copy">I wouldn't be so quick to go for the <code>set</code> version.  Tuple's are very cheap to create and iterate over.  On my machine at least, tuples are faster than sets so long as the size of the tuple is around 4-8 elements.  If you have to scan more than that, use a set, but if you are looking for an item out of 2-4 possibilities, a tuple is still faster!  If you can arrange for the most likely case to be first in the tuple, the win is even bigger: (my test: <code>timeit.timeit('0 in {seq}'.format(seq=tuple(range(9, -1, -1))))</code>)</span>
<span class="comment-copy">@dequestarmappartialsetattr: In Python 3.3 and up, the set is stored as a constant, bypassing the creation time altogether, eliminating the creation time. Tuples <i>can</i> be cheap to create as Python caches a bundle of them to avoid memory churn, making that the biggest difference with sets here.</span>
<span class="comment-copy">@dequestarmappartialsetattr: If you time <i>just</i> the membership test, for integers sets and tuples are equally fast for the ideal scenario; matching the first element. After that tuples lose out to sets.</span>
<span class="comment-copy">@MartijnPieters: Using the <code>set</code> literal notation for this test isn't a savings unless the contents of the <code>set</code> literal are also literals, right? <code>if 1 in {x, y, z}:</code> can't cache the <code>set</code>, because <code>x</code>, <code>y</code> and <code>z</code> could change, so either solution needs to build a <code>tuple</code> or <code>set</code> from scratch, and I suspect whatever lookup savings you might get when checking for membership would be swamped by greater <code>set</code> creation time.</span>
<span class="comment-copy">@ShadowRanger: yes, peephole optimisation (be it for <code>in [...]</code> or <code>in {...}</code>) only works if the contents of the list or set are immutable literals too.</span>
<span class="comment-copy">Or even <code>d = "cdef"</code> which leads to <code>MyList = ["cdef"[k] for k in [x, y, z]]</code></span>
<span class="comment-copy">or <code>map(lambda i: 'cdef'[i], [x, y, z])</code></span>
<span class="comment-copy">@MJM the output order is not determined by the dict, it is determined by the order  of the list <code>[x, y, z]</code></span>
<span class="comment-copy">Aside from the list comprehension which I'm not yet fully accustomed to, most of us had the same reflex: build that dict !</span>
<span class="comment-copy">In your example of the <code>dict</code> instead of a key, you will get errors because the return value of <code>.append</code> is <code>None</code>, and calling <code>None</code> gives an <code>AttributeError</code>.  In general I agree with this method, though.</span>
<span class="comment-copy">the dict instead of a key is wrong, you will get Mylist=['c', 'd'] when the dictionary get initialized even if you commented out "for..loop" part</span>
<span class="comment-copy">This doesn't answer the OP's question.  It only covers the first case in the provided example.</span>
<span class="comment-copy">You should add a description of what your code accomplishes and how it does it. Short answers using only code is discouraged</span>
<span class="comment-copy">With the "convert to a string" approach, we lose the word boundaries and the <code>in</code> check may not do the right thing.</span>
<span class="comment-copy">@codeforester Your point is a fair one and I'll mention it in the answer.</span>
<span class="comment-copy">This may append same more then once this. Set?</span>
