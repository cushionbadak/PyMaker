<div class="post-text" itemprop="text">
<p>I, like many python programmers find the command line arguments for python described <a href="https://docs.python.org/2.7/using/cmdline.html" rel="nofollow noreferrer">here</a> very useful. specifically "-i" which keeps the python interpreter running after a program finishes for a stack trace.  How can I use these with an exe file compiled with py2exe?  Not to be confused with regular argument parsing in an exe file. If you came looking for that, find it <a href="https://stackoverflow.com/questions/9497370/making-exe-file-from-python-that-uses-command-line-arguments">here</a>.
My first thought was to try:</p>
<pre><code>pyprogram.exe -i -foo -bar
</code></pre>
<p>but that didn't work.
it should be noted that </p>
<pre><code>pyprogram.exe -foo -bar
</code></pre>
<p>does in fact work for me.
what I am looking for is the .exe equivalent of </p>
<pre><code>python -i pyprogram.py foo bar
</code></pre>
<p>Failing to find an implementation that works for all of the python command line options, what could I do just to make the "-i" argument work?  it is the most important to have as an option in my executable.</p>
</div>
<div class="post-text" itemprop="text">
<p>I did not find anything on the <a href="http://www.py2exe.org/" rel="nofollow noreferrer">py2exe wiki</a> about passing arguments like <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-i" rel="nofollow noreferrer"><code>-i</code></a> (to enter interactive mode after execution).</p>
<p><hr/>
One might be able to discover information about the argument handling in the <a href="https://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe/" rel="nofollow noreferrer">py2exe source files</a>.<br/>
<em>Update:</em> It indeed looks like py2exe does not handle any command line options like the normal interpreter does, instead it just <a href="https://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe-3/source/start.c#l410" rel="nofollow noreferrer">passes</a> them to the script. But it does <a href="https://sourceforge.net/p/py2exe/svn/HEAD/tree/trunk/py2exe-3/source/start.c#l159" rel="nofollow noreferrer">handle</a> the respective environment variable, which can be used as shown below.</p>
<hr/>
<p>However, as a workaround, you could try to <a href="https://ss64.com/nt/set.html" rel="nofollow noreferrer">set</a> the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONINSPECT" rel="nofollow noreferrer"><code>PYTHONINSPECT</code> Environment variable</a>:</p>
<blockquote>
<p>If this is set to a non-empty string it is equivalent to specifying the -i option.</p>
</blockquote>
<p>E.g. run <code>set PYTHONINSPECT=TRUE</code> before running the program.</p>
<p>But, probably even better, this can be done from within the Python script:</p>
<blockquote>
<p>This variable can also be modified by Python code using os.environ to force inspect mode on program termination.</p>
</blockquote>
<p>Here's a little test script for <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow noreferrer">os.environ</a> (also <a href="https://docs.python.org/3/library/os.html#os.putenv" rel="nofollow noreferrer">os.putenv</a>):</p>
<pre><code>import os
one = os.environ
os.putenv("PYTHONINSPECT", "TRUE")
two = os.environ

os.environ["PYTHONINSPECT"] = "TRUE"
three = os.environ
print(one)
print(two)
print(three)
print( set(one.items()) ^ set(two.items()) )
print( set(one.items()) ^ set(three.items()) )
</code></pre>
<p>The behaviour is a little weird: there does not seem to be a difference, and it seems to only last until you exit the interactive mode:</p>
<pre><code>G:\&gt;py test.py &gt; test.txt
&gt;&gt;&gt; exit()

G:\&gt;set PYTHONINSPECT
Environment variable PYTHONINSPECT not defined
</code></pre>
<p>The contents of <code>test.txt</code> are:</p>
<pre><code>environ({'ALLUSERSPROFILE': 'C:\\ProgramData', ... 'PYTHONINSPECT': 'TRUE'})
environ({'ALLUSERSPROFILE': 'C:\\ProgramData', ... 'PYTHONINSPECT': 'TRUE'})
environ({'ALLUSERSPROFILE': 'C:\\ProgramData', ... 'PYTHONINSPECT': 'TRUE'})
set()
set()
</code></pre>
<p>But it seems to work either way (double check the documentation for yourself to ensure you are not corrupting your environment variables), so you could even implement an <code>-i</code> argument for yourself like:</p>
<pre><code>import sys, os
if len(sys.argv) &gt; 1 and sys.argv[1] == '-i':
    os.putenv("PYTHONINSPECT", "TRUE")
    #os.environ["PYTHONINSPECT"] = "TRUE"
    print("interactive")
else:
    print("normal")
</code></pre>
<p>which runs as follows</p>
<pre><code>G:\&gt;py test.py
normal

G:\&gt;py test.py -i
interactive
&gt;&gt;&gt; quit()

G:\&gt;set PYTHONINSPECT
Environment variable PYTHONINSPECT not defined
</code></pre>
<hr/>
<p>Trying with py2exe and <a href="https://www.python.org/downloads/release/python-343/" rel="nofollow noreferrer">Python 3.4.3</a> (newer versions are apparently not supported and <a href="https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe">you get an IndexError</a>):</p>
<p>setup.py:</p>
<pre><code>from distutils.core import setup
import py2exe
setup(console=['test.py'])
</code></pre>
<p>Get py2exe</p>
<pre><code>G:\&gt;c:\Python34\Scripts\pip.exe install py2exe
You are using pip version 6.0.8, however version 10.0.0b2 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
Collecting py2exe
  Using cached py2exe-0.9.2.2-py33.py34-none-any.whl
Installing collected packages: py2exe

Successfully installed py2exe-0.9.2.2
</code></pre>
<p>Run py2exe    </p>
<pre><code>G:\&gt;c:\Python34\python.exe setup.py py2exe
running py2exe

  3 missing Modules
  ------------------
? readline                            imported from cmd, code, pdb
? win32api                            imported from platform
? win32con                            imported from platform
Building 'dist\test.exe'.
Building shared code archive 'dist\library.zip'.
Copy c:\windows\system32\python34.dll to dist
Copy c:\Python34\DLLs\_hashlib.pyd to dist\_hashlib.pyd
Copy c:\Python34\DLLs\pyexpat.pyd to dist\pyexpat.pyd
Copy c:\Python34\DLLs\select.pyd to dist\select.pyd
Copy c:\Python34\DLLs\unicodedata.pyd to dist\unicodedata.pyd
Copy c:\Python34\DLLs\_ctypes.pyd to dist\_ctypes.pyd
Copy c:\Python34\DLLs\_socket.pyd to dist\_socket.pyd
Copy c:\Python34\DLLs\_lzma.pyd to dist\_lzma.pyd
Copy c:\Python34\DLLs\_ssl.pyd to dist\_ssl.pyd
Copy c:\Python34\DLLs\_bz2.pyd to dist\_bz2.pyd
</code></pre>
<p>Test </p>
<pre><code>G:\&gt;dist\test.exe
normal

G:\&gt;dist\test.exe -i
interactive
&gt;&gt;&gt; sys.exit()
</code></pre>
<p>Does not seem to have changed the environment variables permanently:</p>
<pre><code>G:\&gt;set PYTHONINSPECT
Environment variable PYTHONINSPECT not defined
</code></pre>
<hr/>
<p>Also works with <a href="https://stackoverflow.com/a/113014/1619432">single exe</a>:</p>
<pre><code>from distutils.core import setup
import py2exe
setup(
    options = {'py2exe': {'bundle_files': 1, 'compressed': True}},
    console = [{'script': "test.py"}],
    zipfile = None,
)
</code></pre>
</div>
<span class="comment-copy">Worked for the <code>-i</code> argument. thanks alot</span>
