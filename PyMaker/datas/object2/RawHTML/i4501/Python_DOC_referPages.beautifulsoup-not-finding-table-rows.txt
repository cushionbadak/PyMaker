<div class="post-text" itemprop="text">
<p>I'm trying to scrape the info from <a href="http://www.cbssports.com/golf/leaderboard/pga-tour/1186083/houston-open" rel="nofollow noreferrer" title="CBS sports">CBSsports.com golf tournament results</a> but using beautiful soup returns only one of four table rows <code>&lt;tr&gt;</code> from the first of two <code>&lt;tbody&gt;</code> children of the <code>&lt;table&gt;</code>. </p>
<p>Inspecting in google chrome returns:
<a href="https://i.stack.imgur.com/IEKna.png" rel="nofollow noreferrer">Screenshot of chrome inspect</a></p>
<p>While beautiful soup returns:</p>
<pre><code>  &lt;table cellpadding="2" cellspacing="1" class="data" defaultsort="currentpos" enablesort="true" id="Leaderboard" onsort="Leaderboard.sort" width="620"&gt;
         &lt;tr class="label" recordid="{id}"&gt;&lt;/tr&gt;
  &lt;/table&gt;
</code></pre>
<p>I've tried both the <code>html</code> and the <code>lxml parsers</code> to make the soup and tried both <code>requests.get</code> and <code>urllib.requests</code> to open the connection to the site but all result in the same. Any ideas what I'm doing wrong?</p>
<p>The final desired output, I would like to be able to pull most of the data from the table and put into a pandas dataframe but I should be able to figure that out once i can access each of the table data points.</p>
</div>
<div class="post-text" itemprop="text">
<p>On the page you scrape, <code>div#Leaderboard</code> doesn't contain any rows until javascript running in your browser renders them. Neither standalone <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer"><code>requests</code></a> nor <a href="https://docs.python.org/3/library/urllib.request.html" rel="nofollow noreferrer"><code>urllib.request</code></a> does that for you. I recommend you this package <a href="https://github.com/kennethreitz/requests-html" rel="nofollow noreferrer">requests-html</a> created by the author of very popular <a href="https://github.com/requests/requests" rel="nofollow noreferrer">requests</a>.</p>
<pre><code>from requests_html import HTMLSession

session = HTMLSession()
r = session.get('http://www.cbssports.com/golf/leaderboard/pga-tour/1186083/houston-open')
r.html.render()
table = r.html.find('#Leaderboard', first=True)
</code></pre>
<p>Now the table contains rows, we can get them with the code below:</p>
<pre><code>rows = table.find("tr[id^='Leaderboard']")
</code></pre>
<p>As you can see we successfully found the rows:</p>
<pre><code>&gt;&gt;&gt; len(rows)
144
</code></pre>
<p>There were several rows that you are probably not interested in such as: title, highlight, label and adRow. That's why I used <code>tr[id^='Leaderboard']</code> selector to filter them. It targets all <code>tr</code> with ids that starts with <code>Leaderboard</code> (e.g. id of the first row containing data is <code>Leaderboard401338</code>). You can read more about <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors" rel="nofollow noreferrer">substring matching attribute selectors</a> or about CSS selectors in general <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you view source of the page then you will find that table with <code>id="Leaderboard"</code> does not contain actual rows with player data but are rendered using javascript.<br/>
<code>requests.get</code> or <code>urllib.request</code> is used to perform HTTP Requests so javascript rendering is not performed by these (your browser does that for you).<br/>
To fetch the data you have to use some framework which renders data.You can checkout <a href="https://splash.readthedocs.io/en/stable/" rel="nofollow noreferrer">Splash</a>.<br/>
Using scrapy with splash is also an option.</p>
</div>
<span class="comment-copy">Worked Brilliantly. Thanks!</span>
