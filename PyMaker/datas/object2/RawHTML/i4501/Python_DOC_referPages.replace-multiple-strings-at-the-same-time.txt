<div class="post-text" itemprop="text">
<p>Lets say I have this string "abcd"</p>
<p>Now I want to replace all 'a's with a 'd' and I want to replace all 'd's with an 'a'. The problem is that string.replace does not work in this situation.</p>
<p>"abcd".replace('a','d').replace('d','a') </p>
<blockquote>
<p>abca</p>
</blockquote>
<p>Expected output is "dbca"</p>
<p>How would I acheive this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>.translate()</code>.</p>
<blockquote>
<p>Return a copy of the string in which each character has been mapped through the given translation table.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#str.translate</a></p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; "abcd".translate(str.maketrans("ad","da"))
'dbca'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension to switch the values that you want</p>
<pre><code>x = "abcd"
''.join(['d' if i == 'a' else 'a' if i == 'd' else i for i in x])
</code></pre>
<blockquote>
<p>'dbca'</p>
</blockquote>
<hr/>
<p>Without a list</p>
<pre><code>x = "abcd"
''.join('d' if i == 'a' else 'a' if i == 'd' else i for i in x)
</code></pre>
<blockquote>
<p>'dbca'</p>
</blockquote>
<hr/>
<h1>Timing</h1>
<pre><code>In [1]: x = "abcd"*10000000

In [2]: %timeit ''.join('d' if i == 'a' else 'a' if i == 'd' else i for i in x)
5.78 s ± 152 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)

In [3]: %timeit ''.join(['d' if i == 'a' else 'a' if i == 'd' else i for i in x])
4.49 s ± 157 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
<p>It turns out the list comprehension is slightly faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can try python replace recipe :</p>
<pre><code>string_word="abcd"

data=list(string_word)
replace_index=list({j:i for j,i in enumerate(data) if i=='a' or i=='d'}.keys())

data[replace_index[0]],data[replace_index[1]]=data[replace_index[1]],data[replace_index[0]]

print("".join(data))
</code></pre>
<p>output:</p>
<pre><code>dbca
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/3411771/multiple-character-replace-with-python" title="multiple character replace with python">stackoverflow.com/questions/3411771/…</a></span>
<span class="comment-copy">@HarshaW Similar, but not by a lot. Read the question carefully.</span>
<span class="comment-copy">You don't need the list, you can just use a comprehension.  Creating a list will always hurt performance</span>
<span class="comment-copy">@chrisz what do you mean by "a comprehension"  here? List comprehensions create lists</span>
<span class="comment-copy">@juanpa.arrivillaga he doesn't need the brackets, they hurt performance.  <code>''.join('d' if i == 'a' else 'a' if i == 'd' else i for i in x)</code> works perfectly fine.  I should have said, "you can just use a generator"</span>
<span class="comment-copy">@JahKnows I was indeed wrong, list is better here. <a href="https://stackoverflow.com/questions/37782066/list-vs-generator-comprehension-speed-with-join-function" title="list vs generator comprehension speed with join function">stackoverflow.com/questions/37782066/…</a>  My apologies</span>
<span class="comment-copy">No, actually, generally unless your list would be very large a list comprehension will beat or match a <i>generator expression</i>. In the particular case of passing to <code>str.join</code> a list is created under the hood anyway.</span>
