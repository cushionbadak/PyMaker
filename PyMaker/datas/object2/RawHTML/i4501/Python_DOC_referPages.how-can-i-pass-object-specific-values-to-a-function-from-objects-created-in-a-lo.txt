<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/18510403/passing-argument-to-a-function-via-a-button-in-tkinter-starnge-behaviour-in-loo">Passing argument to a function via a Button in Tkinter, starnge behaviour in loop</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have searched deeply for a solution to this problem, but, being new to Python and tkinter, it is difficult to find solutions to problems in a language you are largely unfamiliar with. I hope this is not a repeat question.</p>
<p>Suppose I create a series of buttons in tkinter, each of which will sequentially display a letter of the alphabet, defined as such:</p>
<pre><code>from string import ascii_uppercase as alphabet
from tkinter import Button
blockLetterButtons = []
for i in range(0,26):
    blockLetterButtons.append(Button(competitorSelectionFrame, 
    text=alphabet[i], command=some_function(alphabet[i])))
</code></pre>
<p>Somewhere below this in the <code>for</code> loop is a <code>.grid(...)</code> for all of these. </p>
<p>The function that is being referenced in the <code>command</code> attribute is as the following:</p>
<pre><code>def some_function(letter):
    print(letter)
</code></pre>
<p>So I recognize two problems with my code:</p>
<ol>
<li>The function in the <code>command</code> attribute is executing immediately upon running the code, because I am specifying a function call rather than a function name.</li>
<li>Even if that was the proper way to call the function with a parameter, using <code>alphabet[i]</code> wouldn't work, because it would pass whatever the value of <code>i</code> is upon click, and not whatever <code>i</code> was upon execution of the <code>for</code> loop.</li>
</ol>
<p>So my questions are the following:</p>
<ol>
<li>How can I specify a function in the <code>command</code> attribute and pass to that function with a parameter?</li>
<li>How can I specify that parameter to be the letter of the alphabet specific to that button, without defining a button explicitly for every letter?</li>
</ol>
<p>I am fairly certain I could use a list comprehension to solve the second problem, perhaps a dictionary with the key equal to the letter and the value equal to the button, but then I still wouldn't know how to get the key value from the button on its own.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use a higher order function (a function that returns a function). To demonstrate, I will not use tkinter but the principle is the same:</p>
<pre><code>In [25]: def some_func_maker(letter):
    ...:     def some_func():
    ...:         print(letter)
    ...:     return some_func
    ...:

In [26]: buttons = []

In [27]: from string import ascii_uppercase as alphabet

In [28]: for i in range(26):
    ...:     buttons.append(some_func_maker(alphabet[i]))
    ...:

In [29]: for b in buttons: b()
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
</code></pre>
<p>Note, you can inline this if you don't want to keep a <code>some_func_maker</code> around using a lambda:</p>
<pre><code>In [37]: buttons = []
    ...: for c in alphabet:
    ...:     buttons.append(
    ...:         (lambda x: lambda: some_function(x))(c)
    ...:     )
    ...:

In [38]: for b in buttons: b()
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
</code></pre>
<p>A common trick is that is less verbose is to use a default-argument with your lambda, however, I consider this more hacky, although it is quite common in Python:</p>
<pre><code>In [43]: buttons = []
    ...: for c in alphabet:
    ...:     buttons.append(
    ...:         lambda x=c: some_function(x)
    ...:     )
    ...:

In [44]: buttons[0]()
A

In [45]: buttons[1]()
B

In [46]: buttons[-1]()
Z
</code></pre>
<p>Note also, it is consider an antipattern to use <code>for i in range(n): some_iterable[i]</code> when you can simply iterate over the iterable instead. Usually, you just want the actual value, so you just do <code>for x in some_iterable</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://en.wikipedia.org/wiki/Currying" rel="nofollow noreferrer"><em>Currying</em></a> is the practice of passing some arguments to a function to produce a new function which can be called later but "remembers" its earlier arguments. You can use this technique to pass the state.</p>
<pre><code>def some_function(letter):
    def f():
        print(letter)
    return f

...

command = some_function(alphabet[i])
</code></pre>
<p>So <code>some_function(alphabet[i])()</code> would call the function, but only using one set of parentheses simply stores the value for later.</p>
</div>
<span class="comment-copy"><code>command=lambda i=i: some_function(alphabet[i])</code> is the idiomatic solution.  The lambda makes a function that can be called later without needing any parameters; the parameter <code>i</code> with a default captures the value of the outer <code>i</code> at the moment the lambda is defined, so each button gets its distinct value.</span>
<span class="comment-copy">That is certainly the idiomatic way, and much more concise than my answer. May I suggest posting that as an answer yourself?</span>
<span class="comment-copy">@jasonharper This solution worked perfectly, thank you. So the lambda generates a function for each Button, and does so for the current instance of i in the loop. What exactly does i=i do? Is that the parameter for the function created by lambda?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code> already exists for this purpose</a>. <code>command=partial(print, alphabet[i])</code> would work without defining new currying utility functions.</span>
<span class="comment-copy">Strictly speaking, this is not currying, but partial application, <a href="https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application" rel="nofollow noreferrer">I believe</a>, but I frequently get the two confused anyway...</span>
