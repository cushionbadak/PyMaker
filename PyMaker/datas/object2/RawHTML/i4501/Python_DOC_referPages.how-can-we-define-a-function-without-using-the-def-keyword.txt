<div class="post-text" itemprop="text">
<p>It's possible to define a class without using the <code>class</code> keyword.<br/>
The following ...</p>
<pre><code>get_i = lambda self: self.i    
get_i.__name__ = 'get_i'
get_i.__qualname__ = 'Klass2.get_i'
dct = dict(a=1, i=4, get_i=get_i)    
Klass2 = type('Klass2', (SuperK,), dct)
</code></pre>
<p>... produces the same end result as:</p>
<pre><code>class Klass1(SuperK):
    a = 1
    i = 4
    def get_i(self):
        return self.i
</code></pre>
<p>How can we do something similar for functions? That is, how can we define a function without using the <code>def</code> or <code>lambda</code> keywords? What might a pure-python implementation of <code>dehf</code> look like if the following two pieces of code created identical <code>foo</code>s?</p>
<pre><code>def foo(bar):
    bar += 934
    return bar

foo = dehf(blah, blah, blah, blah, [...])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create functions by calling the <a href="https://docs.python.org/3/library/types.html#types.FunctionType" rel="nofollow noreferrer"><code>types.FunctionType</code></a> constructor. Keep in mind however that this constructor is undocumented and implementation specific. In CPython, we can figure out the constructor arguments by calling <code>help(types.FunctionType)</code>:</p>
<pre><code>class function(object)
 |  function(code, globals[, name[, argdefs[, closure]]])
 |  
 |  Create a function object from a code object and a dictionary.
 |  The optional name string overrides the name from the code object.
 |  The optional argdefs tuple specifies the default argument values.
 |  The optional closure tuple supplies the bindings for free variables.
</code></pre>
<p>To create a code object, we can use <a href="https://docs.python.org/3/library/functions.html#compile" rel="nofollow noreferrer"><code>compile</code></a>:</p>
<pre><code>code = compile('print(5)', 'foo.py', 'exec')
function = types.FunctionType(code, globals())

function()  # output: 5
</code></pre>
</div>
<span class="comment-copy">You used <code>lambda</code> to define the function in the class. Why do you think you can define a function without <code>lambda</code>?</span>
<span class="comment-copy">The use cases for creating a class with <code>type</code> are rather rare (like meta-classes). but why would you want to create a function without <code>def</code> or <code>lambda</code>?</span>
<span class="comment-copy">Well I suppose if you want to make your code unmaintanable this might be a good idea. But IRL what good reason might you have to want to use such obtuse ways of defining a class or a function?</span>
<span class="comment-copy">@Chris_Rands @barny One use-case is to create functions at with run-time-generated names. For example, suppose we want to create a function named <code>baz</code> at runtime, but we don't know that its going to be named <code>baz</code> when we write our code. As such, we can't simply write <code>def baz(*args):</code>. Maybe there's a decorator which outputs a function named, "<code>pretty_</code>&lt;<code>foo</code>&gt;," where &lt;foo&gt; is the function passed into the decorator. You can write, <code>func.__name__ = "pretty_" + foo.__name__</code>, but there are other use-cases for constructing functions without the <code>def</code>-keyword which aren't as easily dealt with.</span>
<span class="comment-copy">If your question is about creating function names dynamically, then ask that question instead, you can still use <code>def</code> e.g. <a href="https://stackoverflow.com/questions/13184281/python-dynamic-function-creation-with-custom-names" title="python dynamic function creation with custom names">stackoverflow.com/questions/13184281/â€¦</a> Currently it feels like an XY problem</span>
<span class="comment-copy">Interesting, but does this not feel like an XY problem, why would you do this?</span>
<span class="comment-copy">@Chris_Rands No idea, you'd have to ask the OP. Maybe it's just simple curiosity :)</span>
<span class="comment-copy">I have a use case, kind of. I have a module where I generate a set of functions at module scope. It works fine, except it totally confuses the IDE and code validation tools. So I needed to add a stub for each of the functions, and those stubs can be represented more compactly with something like your example.</span>
