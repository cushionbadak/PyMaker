<div class="post-text" itemprop="text">
<p>Suppose I need to create 10 functions called add1, add2, ..., add10. For each <em>i</em>, addi takes in an integer <em>x</em> and outputs <em>x+i</em>. </p>
<p>Python gave me a NameError when I tried the following and evaluated add2(10).</p>
<pre><code>for i in range(10):
    def addi(x):
        return x + (i+1)
</code></pre>
<p>I know the above code is wrong, since the addi functions I've defined aren't mutable; I'm pretty sure all I've done is redefine addi 10 times. How can these 10 functions be quickly defined?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>functools.partial</code> combined with a dictionary in this situation.</p>
<p>I assume what you <em>really</em> want to do is more complex, since multiple functions are not necessary for this specific task.</p>
<pre><code>from functools import partial

def add(x, i):
    return x + i

d = {f'add{k}': partial(add, i=k) for k in range(1, 10)}

d['add3'](5)  # 8
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li>It is good practice to store a variable number of related objects in a specially defined dictionary.</li>
<li><code>functools.partial</code> is a higher order function which returns an input function with selected argument(s) fixed.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Functions aren't mutable in general; but they may have references to data that is. In your snippet, this reference is a little unclear, but <code>i</code> only occurs once in the function body, as a read. It therefore reads from some outer scope, typically the function or module your <code>for</code> loop is contained within. Because this happens to be a shared context, every <code>addi</code> function will end up with the same <code>i</code>. </p>
<p>Another issue is that you're using the name <code>addi</code> on every iteration, and the function never appeared under another name. So whatever <code>addi</code> functions were defined earlier are lost. This leads us to the third question; why would you want to create names (such as function names) dynamically? It's almost always better to use a collection, such as the <code>d</code> dictionary in jpp's answer. Otherwise, what code would even refer to the functions you created? </p>
<p>All that said, it is still possible to do what you asked for, albeit very strange. Here's one way:</p>
<pre><code>def addfunc(n):
    def addn(x):
        return x+n
    return addn

for i in range(1,10):
    globals()['add{}'.format(i)] = addfunc(i)
</code></pre>
<p>This abuses <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals</code></a> to inject dynamically created names into the module's namespace, and nests each of these functions within another to create the namespaces holding their individual <code>n</code> values. Another classic hack was using a default argument, and <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">partial application</a> of <a href="https://docs.python.org/3/library/operator.html#operator.add" rel="nofollow noreferrer"><code>operator.add</code></a> is a neater functional style. </p>
</div>
<div class="post-text" itemprop="text">
<p>A solution:</p>
<pre><code>from types import FunctionType
from copy import copy

def copy_function(fn, name):
    return FunctionType(
    copy(fn.func_code),
    copy(fn.func_globals),
    name=name,
    argdefs=copy(fn.func_defaults),
    closure=copy(fn.func_closure)
)

for i in range(10):
    name = 'add' + str(i)
    def _add(x):
        return x + (i+1)
    globals()[name] = copy_function(_add, name)


print add1(2) # 4
print add3(8) # 12 
</code></pre>
<p>Using the copy function from <a href="https://stackoverflow.com/a/34796018/7529716">https://stackoverflow.com/a/34796018/7529716</a></p>
</div>
<div class="post-text" itemprop="text">
<p>does this help?</p>
<pre><code>def createFunc(i):
  def func(x):
    return x + (i+1)
  return func
</code></pre>
<p>Then just create the functions and store them in a array:</p>
<pre><code>add = [createFunc(i) for i in range(10)]
print add[0](1)  # 1+(0+1) = 2
print add[0](2)  # 2+(0+1) = 3
print add[2](10) # 10+(2+1) = 13
print add[2](11) # 11+(2+1) = 14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others have noted, it's questionable if you should do this in production code. However, for educational purposes, here's how to do it by generating function names and and injecting them in the global namespace:</p>
<pre><code>&gt;&gt;&gt; def f(x, i):
...     return x + i + 1
... 
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; for i in range(10):
...     globals()['add%s' % i] = partial(f, i=i)
... 
&gt;&gt;&gt; add8(5)
14
&gt;&gt;&gt; add3(5)
9
</code></pre>
<p><code>functools.partial</code> implements <a href="https://en.wikipedia.org/wiki/Currying" rel="nofollow noreferrer">currying</a> in Python to create a copy of a single function definition where each copy "hardcodes" one or more of the function arguments.</p>
</div>
<span class="comment-copy">Why would you want multiple functions that increases each return by 1 in reference of the previous function? This feels like an XY problem. what are you using it for? Maybe there's a better solution out there for you.</span>
<span class="comment-copy">@MooingRawr I'm learning about generic operators right now. The current homework involves defining five binary operators (on \C \times \Z) by first representing the integer as a complex number, then using the appropriate binary operator on \C. This resulted in a lot of similar looking functions, so I was hoping for a way to shorten my code.</span>
<span class="comment-copy">while this is doing something similar to what OP wants, it's not exactly what OP wants since it seems like OP wants 10 different stand alone functions, rather than 10 functions stored in a dictionary :\</span>
<span class="comment-copy">@MooingRawr, but there <i>are</i> 10 different functions, I just store them in a dictionary because this makes much more sense. Remember <code>partial</code> returns a function.. try this: <code>callable(d['add3'])  # True</code></span>
<span class="comment-copy">Yes but you are missing the point of my comment. While what you are doing is still creating 10 functions and storing them in a dictionary. OP never requested storing in a dictionary, OP seems to be asking if there's a better way of just doing <code>def add1:... def add2:...</code> While I agree with your solution, I don't agree with the fact that it's the solution to the current question.</span>
<span class="comment-copy">@BoarGules, I'm well aware. It's just an extremely bad idea. I'd rather not propagate the practice, even if it's technically the "right" answer.</span>
<span class="comment-copy">@Jessica It's not a good idea because it creates functions dynamically, but they can only be called by static code (otherwise the code wouldn't know what to call), so what's the point of them being dynamic? Creating them dynamically makes the code hard to read (you can't easily search for the function definition) and gives IDEs unnecessary trouble in their efforts to help you. You save tedious, repetitive coding, but programming sometimes entails tedious and careful repetition. The effort and skill would be better spent speeding up the coding (clever search/replace, macros, whatever).</span>
<span class="comment-copy">Yeah, I was aware of how <code>addi</code> is being redefined with each iteration, so my attempt would result in a function <code>addi</code> that adds 10. I've only just learnt about dictionaries and wasn't aware they could be used this way, so thanks!</span>
