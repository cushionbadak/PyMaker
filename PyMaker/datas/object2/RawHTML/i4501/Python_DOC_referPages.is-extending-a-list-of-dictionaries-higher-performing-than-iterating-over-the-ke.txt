<div class="post-text" itemprop="text">
<p>When helping my co-worker troubleshoot a problem I saw something I was unaware python did. When compared to other ways of doing this I am curious where the performance and time complexity stacks up and the best approach is for sake of performance.</p>
<p><strong>what my co-worker did that prompted this question:</strong></p>
<pre><code>list_of_keys = []
test_dict = {'foo': 1, 'bar': [1, 2, 3, 4, 5]}
list_of_keys.extend(test_dict)

print(list_of keys)
</code></pre>
<blockquote>
<p>['foo', 'bar']</p>
</blockquote>
<p>vs other examples I have seen:</p>
<pre><code>list_of_keys = []
test_dict = {'foo': 1, 'bar': [1, 2, 3, 4, 5]}
for i in test_dict.keys():
    list_of_keys.append(i)
</code></pre>
<p>and</p>
<pre><code>keys = list(test_dict)
</code></pre>
<p>which one of these is shown to be the most beneficial and the most pythonic for the sake of simply appending keys. which one yields the best performance? </p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">the docs</a> explain, <code>s.extend(t)</code>:</p>
<blockquote>
<p>extends <code>s</code> with the contents of <code>t</code> (for the most part the same as <code>s[len(s):len(s)] = t</code>)</p>
</blockquote>
<p>OK, so that isn't very clear as to whether it should be faster or slower than calling <code>append</code> in a loop. But it is a little fasterâ€”the looping is happening in C rather than in Python, and it can use some special optimized code for adding onto the list because it knows you're not touching the list at the same time.</p>
<p>More importantly, it's a lot simpler, more readable, and harder to get wrong.</p>
<hr/>
<p>As for starting with an empty list and then extending it (or appending to it), there's no good reason to do that. If you already have a list with some values in it, and want to add the dict keys, then use <code>extend</code>. But if you just want to create a list of the keys, just do <code>list(d)</code>.</p>
<hr/>
<p>As for <code>d.keys()</code> vs. <code>d</code>, there's really no difference at all. Whether you iterate over a <code>dict</code> or its <code>dict_keys</code> view, you get the exact same values iterated, even using the exact same <code>dict_keyiterator</code>. The extra call to <code>keys()</code> does make things a tiny bit slower, but that's a fixed cost, not once per element, so unless your dicts are tiny, you won't see any noticeable difference.</p>
<p>So, do whichever one seems more readable in the circumstances. Generally speaking, the only reason you want to loop over <code>d.keys()</code> is when you want to make it clear that you're iterating over a dict's keys, but it isn't obvious from the surrounding code that <code>d</code> is a <code>dict</code>.</p>
<hr/>
<p>Among other things, you also asked about complexity.</p>
<p>All of these solutions have the same (linear) complexity, because they all do the same thing under the covers: for every keys in the dictionary, append it to the end of a list. That's one step per key, and the complexity of each step is amortized constant (because Python lists expand exponentially), so the title time is <code>O(N)</code> where <code>N</code> is the length of the dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>After @thebjorn mentioned the module. seems that calling extend is fastest</p>
<p>It seems that list() is the most pythonic for sake of readability and cleanliness.</p>
<p>the most beneficial seems dependent on use-case. but more or less doing this is redundant as mentioned in a comment. This was discovered from a mistake and i got curious.</p>
<pre><code>timeit.timeit("for i in {'foo': 1, 'bar': [1, 2, 3, 4, 5]}.keys():[].append(i)", number=1000000)
0.6147394659928977

timeit.timeit("[].extend({'foo': 1, 'bar': [1, 2, 3, 4, 5]})", number=1000000)
0.36140396299015265

timeit.timeit("list({'foo': 1, 'bar': [1, 2, 3, 4, 5]})", number=1000000)
0.4726199270080542
</code></pre>
</div>
<span class="comment-copy">Use the <code>timeit</code> module to find out..</span>
<span class="comment-copy">@thebjorn another thing i was unaware existed, thanks my dude!</span>
<span class="comment-copy">using on only one iteration, last one seems the fastest, but you should timeit over 1m iterations to get accurate results</span>
<span class="comment-copy">It's worth noting that under the covers, anything you do to make a list out of the dict's keys has to be iterating those keys. The only question is whether you do it explicitly, or wrapped up inside some function or method (which might be implemented in C, and might have some special optimizations you can't easily reproduce).</span>
<span class="comment-copy">"performant" is a noun that means "a performer".</span>
<span class="comment-copy">as mentioned above this was discovered out of a mistake. he was intending to append the dict but mistakenly used extend. i personally would be iterating over the keys, not making them a new list.</span>
<span class="comment-copy">Which version of Python did you use?</span>
<span class="comment-copy">@sophros Python3</span>
