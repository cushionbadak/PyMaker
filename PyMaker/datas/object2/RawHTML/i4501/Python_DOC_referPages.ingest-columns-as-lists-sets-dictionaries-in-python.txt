<div class="post-text" itemprop="text">
<p>Given a csv file where some columns contain lists, sets or dictionaries like
one with the structure below:</p>
<pre><code>| user_id| items                   | methods        | dict_col      |
|--------|-------------------------|----------------|---------------|
| ID01   | [potato, apple, potato] | {card, cash}   | {F: [AB, CD]} |
| ID02   | [carrots, papaya]       | {bitcoin, card}| {F: [AB, CD]} |
</code></pre>
<p>Is there a way to ingest it in Python in tabular way where the type of the values in those columns in maintained?</p>
<p>If not, what is the best approach to convert them back to list, set, dictionaries?</p>
<p>The question stems from the fact that once one has a DataFrame with this structure and it is saved into a csv, when the csv is loaded back with pandas.read_csv(), the values inside those columns are no longer lists,set or dictionaries.</p>
<p>Below the code to recreate the scenario explained above.</p>
<pre><code>import pandas as pd

# Create dummy example
df = pd.DataFrame({'user_id': ['ID01', 'ID02'], 'items': [['potato',   'apple', 'potato'],['carrots', 'papaya']],
              'methods': [{'card', 'cash'}, {'bitcoin', 'card'}],
               'dict_col': [{'F': ['AB', 'CD']}, {'F': ['AB', 'CD']}]})
df[['user_id', 'items', 'methods', 'dict_col']]

type(df.iloc[0]['dict_col']) # Return a dict

df.to_csv('dummy_table.csv', index = False)
# Reload the table
df_loaded = pd.read_csv('dummy_table.csv')

"""
Line below returns a str and not a dict as in the original dataframe.   How we go back to the original datatypes 
(e.g. list, dict, set)in a pythonic way?
"""
type(df_loaded.iloc[0]['dict_col'])
</code></pre>
<p><strong>Attempt after Kyle J. comment on trying with cvs.DictReader</strong>
<br/>I tried with DictReader, but the objective was not met. However, I am not sure this is what the Kyle had in mind.</p>
<h1>Attempt with DictReader</h1>
<pre><code>import csv
import pandas as pd
df = pd.DataFrame()
with open('dummy_table.csv', newline = '') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        df = pd.concat([df, pd.DataFrame(row, index = [0])], axis = 0)
type(df.iloc[0]['dict_col']) # Still a str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if the standard csv module performs in the same fashion, specifically to solve your problem you should try </p>
<pre><code>import ast

###your original code####

dict_value = ast.literal_eval(df_loaded.iloc[0]['dict_col'])
type(dict_value)
</code></pre>
</div>
<span class="comment-copy">Can you edit your question with an extract of your csv file (e.g. as you see it in a text editor)?</span>
<span class="comment-copy">Have you tried the standard csv python module? specifically csv.dictreader() <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.DictReader</a></span>
<span class="comment-copy">@jpp based on your note, I added the code to recreate the scenario. In this way not only the extract can be reproduced, but time is saved for anybody that wants to take a look a this question. If this is not ok, happy to edit again.</span>
<span class="comment-copy">@datapug, looks good. I upvoted your question. This may not be straightforward. It's certainly <i>not ideal</i> to be storing dictionaries and lists in csv files in this way. I would ditch the idea and try a different structure for your data. But just my opinion.</span>
<span class="comment-copy">I would suggest using a database like mysql or Postgres that handles json values and returns them appropriately, you would have to convert a dict to a json using json.dumps(dict) to input the data, python then treats a json data as dictionaries pretty simply. mysql is really simple to learn and if you use the mysql workbench its almost as simple as using excel and you can export all data into csv file pretty simply if need be.</span>
