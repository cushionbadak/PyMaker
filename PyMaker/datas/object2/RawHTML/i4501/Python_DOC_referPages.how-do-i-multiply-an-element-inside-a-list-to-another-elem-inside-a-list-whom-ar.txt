<div class="post-text" itemprop="text">
<pre><code>&gt; a = [1,2,3,4,5]  
&gt; b = [1,2,3,4,5]  
&gt; answer = [2,6,9,16,25]
&gt;[e for e in a if a in b]  #at this point, i'm lost. sorry i'm new
</code></pre>
<p>What do I do after this? I want to multiply the elem in a if it's the same as the elem in b then check if the answer is in answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a fantastic function in python called <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> that's a bit easier to understand then a list comprehension.</p>
<p>What <code>zip</code> does is allow you to iterate over all three lists at the same time, take a look at the following example:</p>
<pre><code>A = [1,2,3,4,5]  
B = [1,2,3,4,5]  
answers = [2,6,9,16,25]

for a, b, answer in zip(A, B, answers):

    # Check if the element in a is the same as b
    if a == b:
        # Multiply them together
        mult = a * b
        # Check if a*b is answer
        if mult == answer:
            print('{} * {} equals {}.  Hooray!'.format(a, b, answer))
        else:
            print('{} * {} does not equal {} '.format(a, b, answer))
    else:
        print('{} does not equal {}'.format(a, b))
</code></pre>
<p>Notes:</p>
<ul>
<li><p>This assumes that <code>A</code> <code>B</code> and <code>answers</code> are all the same length</p></li>
<li><p>It doesn't check that <code>mult</code> is anywhere in <code>answers</code>, only that it's at the exact same index as the <code>a</code> &amp; <code>b</code> multiplied.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Try using "zip" like this:</p>
<pre><code>&gt;&gt;&gt; [c*d for c,d in zip(a,b)]
[1, 4, 9, 16, 25]
</code></pre>
<p>Then you can compare that result list against the answer list you provided. A good way would be to do a truthy comparison like so, again using zip:</p>
<pre><code>&gt;&gt;&gt; res = [c*d for c,d in zip(a,b)]
&gt;&gt;&gt; [x==y for x,y in zip(res, answer)]
[False, False, True, True, True]
</code></pre>
<p>if you merely want to check if each answer exists anywhere in the answer list, use "in" instead:</p>
<pre><code>&gt;&gt;&gt; res = [c*d for c,d in zip(a,b)]
&gt;&gt;&gt; [x in answer for x in res]
[False, False, True, True, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to achieve what you are looking for is:</p>
<pre><code>result = filter(lambda x: x in answer, (x**2 for x in a for y in b if x == y ))

print(list(result))
</code></pre>
<p>This approach does not consider the order or the index of the elements.</p>
<p>If you also need to consider the position of the elements in <code>a</code> and <code>b</code> and intend to only compare elements with the same index then you can use:</p>
<pre><code>result = filter(lambda x: x in answer, (x**2 for x,y in zip(a,b) if x == y))
</code></pre>
<p>Using the generator expression you can compare the elements in <code>a</code> with the elements in <code>b</code>. Since they have to be equal you can use <code>x**2</code> to get the result of their multiplication. The results can be filtered using the python <code>filter</code> which returns only elements which are in the <code>answer</code> array.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would keep it simple and use something like this:</p>
<pre><code>a =[1,2,3,4,5]
b =[1,2,3,4,5]
answer = [2,6,9,16,25]

computed_aswers = [val_1*val_1 for val_1 in a if val_1 in b]
available_answers = [ans for ans in computed_aswers if ans in answer]

print(available_answers)
</code></pre>
<p>Output would be:</p>
<pre><code>[9, 16, 25]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are happy using a 3rd party library, <code>numpy</code> is convenient for this task.</p>
<pre><code>import numpy as np

a = np.array([1,2,3,4,5])
b = np.array([1,2,3,4,5])
answer = np.array([2,6,9,16,25])

res = a*b
# array([ 1,  4,  9, 16, 25])

### check by position ###
check = res == answer
# array([False, False,  True,  True,  True], dtype=bool)

### check if in answer ###
check2 = np.in1d(res, answer)
# array([False, False,  True,  True,  True], dtype=bool)
</code></pre>
<p>Relevant: <a href="https://stackoverflow.com/questions/993984/why-numpy-instead-of-python-lists">Why NumPy instead of Python lists?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>a = [1, 2, 3, 4, 5]  
b = [1, 2, 3, 4, 5]
answer = [2, 6, 9, 16, 25]
</code></pre>
<p>Another approach is using <code>numpy.multiply</code>:</p>
<pre><code>import numpy as np
result = [a == b for a, b in zip(answer, np.multiply(a, b))]
print(result)  # [False, False, True, True, True]
</code></pre>
<p>Or, instead of list comprehension for element-wise equality testing, using <code>np.equal</code>:</p>
<pre><code>import numpy as np
result = np.equal(np.multiply(a, b), answer)
print(result)  # [False, False, True, True, True]
</code></pre>
<p>Or, simply falling back on the <code>==</code> operator for a numpy array and a same-sized list (-&gt; element-wise comparison):</p>
<pre><code>import numpy as np
result = np.multiply(a, b) == answer
print(result)  # [False, False, True, True, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>Here the program solution is in Perl.

Assume the given 4 digits number is abcd.

Where 

d is in unit position
c is in 10th position
b is in 100th position
a is in 1000th position

abcd * abcd = xxxxabcd. This is what condition placed in the question, where x can be any single digit unsigned integer.

Last 4 digits are formed as given below
1* (d*d) = Unit Position
10 * (2*c*d) + overflow digit from unit position = 10th Position 
100 * ( 2*b*d + c*c )  + overflow digit from 10th position = 100th Position
1000 * ( 2*a*d + 2*b*c ) + overflow digit from 100th position = 1000th Position.

if (d*d mod 10) equals d then d can end with 1,5,6 or 0. (eg. 1 * 1 = 1, 5 * 5 = 25, 6 * 6 = 36, 10 * 10 = 100)

So any number ends with 2,3,4,7,8,9 cannot give the expected result. Hence we can eliminate those numbers. Hence 60% of the numbers need not be checked.




#!perl
for( $str = 1000; $str &lt; 10000; $str++ )
{
    $temp = $str;
    $d = $temp % 10;

    if( $d == 1 || $d == 5 || $d == 6 || $d == 0 )
    {

        $a = int($temp / 1000);
        $temp = $temp % 1000;

        $b = int($temp / 100);
        $temp = $temp % 100;

        $c = int($temp / 10);

        #This step can still be optimized 
        $sum = ( $d*$d + 10 * (2 * $c * $d ) + 100* (2 * $b * $d + $c * $c) + 1000* (2 * ( $a * $d + $b * $c )) ) % 10000;

        if( $sum == $str )
        {
            print "\nAnswer is $str";
            print "\nSquare of $str is " . $str*$str;
        }

    }
}
</code></pre>
</div>
<span class="comment-copy"><code>res = [a * b if a == b else a for a, b in zip(a, b)]; [x == y for x, y in zip(res, answer)]</code>.</span>
<span class="comment-copy">Do you care more about relative positions of the elements, or just that they have the same value? The way I originally read this was looking at the same position in each list.</span>
<span class="comment-copy">I get it now, but this is the tricky part. Let's say I got the answer now, and I want to check if the element in a is equal to some part of the answer.  let's say 12^2 = 144 but i want to know if 144 has the number 12 in it, like literally number 12.  This is the problem I want to solve. Think of a  4 digit whole number "x" when multiplied to itself, you'll get 8 digit whole number who's 4 last digit number is equal to "x"</span>
<span class="comment-copy">@RenzoAldridgeQuiballo I created a different <a href="https://stackoverflow.com/questions/49673030/find-the-a-4-digit-number-whos-square-is-8-digits-and-last-4-digits-are-the-ori/49673031#49673031">question &amp; answer for that question</a></span>
<span class="comment-copy"><i>". . .if it's the same as the elem in b. . ."</i>.</span>
<span class="comment-copy">Ah, good point. Misread that bit.</span>
<span class="comment-copy">In my opinion, if you are going to use <code>numpy</code>, you should fully vectorise your solution (i.e. no list comprehension), cf my answer.</span>
<span class="comment-copy">@jpp yes that is indeed probably more appropriate, thanks for the feedback.</span>
