<div class="post-text" itemprop="text">
<p>I'm having some difficulty in understanding how python converts between int and byte data types and specifically why it isn't consistent with representing it as hexadecimal numbers.</p>
<p>Consider the following where I convert the number 13 into a 2 byte representation:</p>
<pre><code>&gt;&gt;&gt; (13).to_bytes(2, byteorder='big')
b'\x00\r'
</code></pre>
<p>Why does it use the character <code>r</code> in the second byte location? </p>
<p>In this case I would have expected it to output:</p>
<pre><code>b'\x00\xD'
</code></pre>
<p>Doing the reverse in both cases outputs the correct answer.</p>
<pre><code>&gt;&gt;&gt; int.from_bytes(b'\x00\x0D', byteorder='big')
13
&gt;&gt;&gt; int.from_bytes(b'\x00\r', byteorder='big')
13
</code></pre>
<p>And both have the correct number of bytes</p>
<pre><code>&gt;&gt;&gt; len(b'\x00\x0D')
2
&gt;&gt;&gt; len(b'\x00\r')
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a difference between <code>bytes</code> and a hexadecimal representation. <code>bytes</code> is a datatype; hexadecimal is a way of representing bit patterns on the screen.</p>
<p>A <code>bytes</code> is an immutable sequence of 8-bit values. The interpreter displays it, where possible, as characters or as string escape sequences, and where not possible, in hexadecimal. The corresponding literal is called a byte<em>string</em>. In other words, hexadecimal is a sort of last resort. You can construct the <code>bytes</code> <code>b'ABC'</code> using hexadecimal notation: <code>b'\x41\x42\x43'</code> but the interpreter will still report it as <code>b'ABC'</code>. That is no different from the way quotes are handled:</p>
<pre><code>&gt;&gt;&gt; a = "ABC"
&gt;&gt;&gt; a
'ABC'
&gt;&gt;&gt; a = 'AB\'C'
&gt;&gt;&gt; a
"AB'C"
</code></pre>
<p>The interpreter has a standard way of displaying its data and takes no account of the way you entered that data in the first place. This isn't a roundtrip failure, because no information is lost. You are seeing an <em>equivalent</em> representation rather than the <em>same</em> representation, is all.</p>
<p>If you want to see a hexadecimal representation then you should ask for it explicitly, instead of relying on the interpreter's default way of displaying a particular datatype. </p>
<pre><code>&gt;&gt;&gt; fmt = '\\x{0:02X}\\x{1:02X}'
&gt;&gt;&gt; print(fmt.format(*((13).to_bytes(2, byteorder='big'))))
\x00\0D
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are some special escape sequences which are so common that they are not explicitly represented with their hex values:</p>
<pre><code>\a &lt;-&gt; \x07  alert
\b &lt;-&gt; \x08  backspace
\t &lt;-&gt; \x09  tab (horizontal)
\n &lt;-&gt; \x0A  new line
\v &lt;-&gt; \x0B  vertical tab
\f &lt;-&gt; \x0C  formfeed
\r &lt;-&gt; \x0D  carriage return
\" &lt;-&gt; \x22  "
\' &lt;-&gt; \x27  '
\\ &lt;-&gt; \x5C  \
</code></pre>
<p>you find a full list of escape sequences and how they work <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">here</a>.
Note that there is also <code>\0 &lt;-&gt; \x00</code> in the C language.</p>
</div>
<span class="comment-copy">From <a href="https://www.asciitable.com" rel="nofollow noreferrer">asciitable.com</a> you can see that <code>\r</code> is actually <code>13</code> however, I have never seen it being used in hex representation... It seems to me that it is a shortcut of <code>\0x0D</code></span>
<span class="comment-copy">A better explanation maybe: <a href="https://stackoverflow.com/a/40983245/3727050">stackoverflow.com/a/40983245/3727050</a></span>
<span class="comment-copy">The <code>bytes</code> type is trying (and yet failing) to be 'helpful' when it produces a representation of its contents. If all your original <code>int</code> values align with printable ascii, then the representation will look like a string. Otherwise it looks like escaped hex and control codes.</span>
<span class="comment-copy">Thanks for that, makes things a bit clearer to me now. Using your example for <code>b'\x41\x42\x43'</code> actually outputs <code>b'ABC'</code>. So in this case the interpreter seeks to display as this as a sequence of characters and can do, so displays it as <code>b'ABC'</code></span>
<span class="comment-copy">So I suppose they only default to an ascii character to shorten the print out length of a byte?</span>
<span class="comment-copy">I guess the main purpose of this is not really to shorten the output length, rather the keys to hit on the key board or even more likely to make strings more readable which contain mostly text but with some of these control characters, mostly <code>\n</code> and <code>\t</code></span>
