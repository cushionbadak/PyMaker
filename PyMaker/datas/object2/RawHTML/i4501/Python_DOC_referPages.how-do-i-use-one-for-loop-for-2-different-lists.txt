<div class="post-text" itemprop="text">
<p>I want to print out a sentence inside of a for loop where a different iteration of the sentence prints out for each different situation i.e. I have two different lists: student_result_reading and student_name</p>
<pre><code>student_result_reading = []
student_name = []

while True:

   student_name_enter = input("Please enter student name: ")
   student_name.append(student_name_enter)

   student_enter = int(input("Please enter student result between 0 - 100%: "))
   student_result_reading.append(student_enter)

   continueask = input("Would you like to enter someone else? ")
   if continueask == "yes":
          continue
   else:
          break

for studread, studentname in student_result_reading, student_name:
   print("Student Name: {} | Test Name: Reading Test | Percentage Score: {}".format(studentname, studread))     
</code></pre>
<p>Here are my two issues:</p>
<ol>
<li><p>When I enter 2 or more names, they are not formatted correctly.</p></li>
<li><p>When I enter 1 name, I get an error.</p></li>
</ol>
<p>Any help as to any solutions is appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer">built-in function <code>zip</code> </a> for that:</p>
<pre><code>for studread, studentname in zip(student_result_reading, student_name):
   print("Student Name: {} | Test Name: Reading Test | Percentage Score: {}".format(studentname, studread))
</code></pre>
<p>Also, if you are using Python 2, you, probably, encountering problem, with this two lines:</p>
<pre><code>student_name_enter = input("Please enter student name: ")
</code></pre>
<p>and</p>
<pre><code>continueask = input("Would you like to enter someone else? ")
</code></pre>
<p>I.e., if you enter something like <code>student name</code> as input for student name, you will get <code>SyntaxError</code> or <code>NameError</code>. Reason is, in Python 2, <code>input</code> function expects valid Python expression, in you case, string, like <code>"student name"</code>, not simply <code>student name</code>. For later expression to be valid input, you can use function <code>raw_input</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer to access array elements by index, like this:</p>
<pre><code>for x in range(len(student_name)):
    print("Student Name: {} | Test Name: Reading Test | Percentage Score: {}".format(student_name[x], student_result_reading[x]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not experienced in python much but what you could do i keep a counter for the number of students ,say count_students</p>
<pre><code>For students in range(0,count_students):
        print(student_name[student] + " ")
        print(student_result[student] + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code will only fluke out and work if you enter in exactly two students. The main issue is a misunderstanding of the for loop at the end.</p>
<pre><code>for x, y in [1,2],[4,3]:
    print(x,y)
</code></pre>
<p>Will print</p>
<pre><code>1,2
4,3
</code></pre>
<p>It will not print</p>
<pre><code>1,4
2,3
</code></pre>
<p>as you would like. This answers why you see incorrect formatting when you enter exactly two students. You'll want to use zip to join the two lists as pointed out in another answer. </p>
<pre><code>zip([1,2],[4,3]) will equal [(1,4),(2,3)] 
</code></pre>
<p>so your for loop will work as intended.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error is generated by use this: "input" </p>
<p>i reeplaced by "raw_input".</p>
<p>you can paste and run this code.</p>
<pre><code>student_result_reading = []
student_name = []

while True:

   # student_name_enter = input("Please enter student name: ")
   student_name_enter = raw_input("Please enter student name: ")
   student_name.append(student_name_enter)

   # student_enter = int(input("Please enter student result between 0 - 100%: "))
   student_enter = int(raw_input("Please enter student result between 0 - 100%: "))
   student_result_reading.append(student_enter)

   # continueask = input("Would you like to enter someone else? ")
   continueask = raw_input("Would you like to enter someone else? ")

   if continueask == "yes":
          continue
   else:
          break

# for studread, studentname in student_result_reading, student_name:
#    print("Student Name: {} | Test Name: Reading Test | Percentage Score: {}".format(studentname, studread))
for studread, studentname in zip(student_result_reading, student_name):
   print("Student Name: {} | Test Name: Reading Test | Percentage Score: {}".format(studentname, studread))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>student_result_reading = {}
#Create a dictionary to store the students name, and their score 


while True:
       student_name_enter = input('Please enter a student name: ')
       #Ask the user for a student name 

       student_enter = int(input('Please enter a student result between 0 - 100%: '))
       #Have the user enter an integer for the student score

       student_result_reading[str(student_name_enter)] = student_enter
       #Make the key of the dict element the students name, value the students score

       continue_ask = input('Please enter yes to continue, or enter (q) to quit: ')
       #Prompt user to enter q to quit

       #If prompt == q, break out of the loop
       if continue_ask == 'q':
             break

for student, score in student_result_reading.items():
           #Use the .items() method of the dict to get the key, and corresponding value for each element in list 
           print('Student name: {0} | Test Name: Reading Test | Percentage Score: {1}'.format(student, score))
</code></pre>
<p>To simplify this, you can add the student name in a dictionary, instead of utilizing two lists. We still run the while loop and ask for the user input for the student name and the student score. Then I Alter the dictionary by adding a key that will be the students name, and set the value equal to the students score. We can then prompt the user to continue, or exit the loop by entering q. We can use the .items() method of a dictionary to iterate over each key and its corresponding value. Then we get the output that you are looking for in the same dictionary, instead of two separate lists, with the student names being the keys, and the student scores being the values. Here is the output: </p>
<pre><code> Please enter a student name: Random Student
 Please enter a student result between 0 - 100%: 90
 Please enter another student name and score, or enter (q) to quit: yes
 Please enter a student name: Random Student2
 Please enter a student result between 0 - 100%: 75
 Please enter another student name and score, or enter (q) to quit: q
 Student name: Random Student | Test Name: Reading Test | Percentage Score: 90
 Student name: Random Student2 | Test Name: Reading Test | Percentage Score: 75
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let me explain it by a much simpler example:</p>
<pre><code>pets = ['cat', 'dog']
ages = [5, 7]

for pet, age in pets, ages:
    print(pet, age)
</code></pre>
<p>What gets printed here is:</p>
<pre><code>cat dog
5 7
</code></pre>
<p>The crucial question is what actually happens here. It turns out that <code>pets, ages</code> is actually a tuple. Expressions separated by commas are called <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer"><code>expression-lists</code></a>.</p>
<p>It is a tuple that contains 2 lists, it looks exactly like that: <code>(['cat', 'dog'], [5, 7])</code>. So when you iterate over it, next interesting thing happens :) Iterable unpacking!</p>
<p>Basically what happens now is:</p>
<pre><code>pet, age = ['cat', 'dog']
</code></pre>
<p>And in the next iteration:</p>
<pre><code>pet, age = [5, 7]
</code></pre>
<p>That's how you got originally surprising output.</p>
<p>The reason for the second issue you encountered is if you supply only one name, in the first iteration this happened (let's still use the example with pets):</p>
<pre><code>pet, age = ['python']
</code></pre>
<p><code>ValueError: need more than 1 value to unpack</code></p>
<p>To fix both issues, you can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">built-in <code>zip</code> function</a>.</p>
<pre><code>for studentname, studread in zip(student_name, student_result_reading):
   print('Student Name: {} | Test Name: Reading Test | Percentage Score: {}'.format(studentname, studread))
</code></pre>
<p>To format output you can also use so-called <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-strings</code></a>, they're available since Python 3.6</p>
<pre><code>for studentname, studread in zip(student_name, student_result_reading):
   print(f'Student Name: {studentname} | Test Name: Reading Test | Percentage Score: {studread}')
</code></pre>
</div>
<span class="comment-copy">can you show the errors?</span>
<span class="comment-copy">That was a bit of a mind bender. It only "works" when you have 2 entries in each list (lets say Bob and Carol) because <code>student_result_reading, student_name</code> would be a tuple of 2 item lists <code>[["Bob", 45], ["Carol", 96])</code>. You can see that by <code>print((student_result_reading, student_name))</code></span>
<span class="comment-copy">Clearly I need to explore the built-ins some more!  Glad I stumbled upon this question.</span>
