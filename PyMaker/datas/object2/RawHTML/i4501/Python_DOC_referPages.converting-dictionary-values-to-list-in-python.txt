<div class="post-text" itemprop="text">
<p>Suppose I have a dictionary (dict) with keys and values as below: </p>
<blockquote>
<p>print(dict) </p>
</blockquote>
<pre><code>{'AAA': {'', '111', '222'}, 'BBB': {'222', '999', '555'}}
</code></pre>
<p>I want to extract the values from the dictionary in the form of a single string, i.e. <code>type(values) = str</code>, such as:</p>
<pre><code>values = '111', '222', '999', 555'
</code></pre>
<p>but what I am getting is below under <code>dict.values()</code>:</p>
<blockquote>
<p>dict.keys() </p>
</blockquote>
<pre><code>dict_keys(['AAA', 'BBB'])
</code></pre>
<blockquote>
<p>dict.values() </p>
</blockquote>
<pre><code>dict_values([{'', '111', '222'}, {'222', '999', '555'}])
</code></pre>
<p>How can I achieve the required result?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> to do this:</p>
<pre><code>In [92]: from itertools import chain

In [93]: dct = {'AAA': {'', '111', '222'}, 'BBB': {'222', '999', '555'}}

In [94]: {x for x in chain(*dct.values()) if x}
Out[94]: {'111', '222', '555', '999'}
</code></pre>
<p>If you want to convert this output to a single string, just use an <code>str()</code> call on it, or use <code>", ".join(x for x in chain(*dct.values()) if x)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is what you are after if you want them output as a single string:</p>
<pre><code>mydict = {'AAA': {'', '111', '222'}, 'BBB': {'222', '999', '555'}}

out = []
for keys, values in mydict.items():
    [out.append(i) for i in values if i!='']

out = ','.join(set(out))

print(out)

print(type(out))
</code></pre>
<p>Outputs:</p>
<pre><code>555,222,111,999

&lt;class 'str'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you want something like</p>
<pre><code>d = dict()
d[0] = '0'
str(d)
</code></pre>
<p>?</p>
<p>String manipulations are fairly straightforward after that</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>extend</code> method:</p>
<pre><code>values = []
for key in some_dict:
    values.extend(list(some_dict[key]))
</code></pre>
<p>If you need to delete the empty strings, use:</p>
<pre><code>values = list(filter(None, values))
</code></pre>
<p>See <a href="https://www.google.cz/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings&amp;ved=2ahUKEwjT3vfbjZ_aAhUNGewKHUX1DlUQjjgwAHoECAkQAQ&amp;usg=AOvVaw27yHKdnBgIOmkDT7HtpAki" rel="nofollow noreferrer">this SE entry</a></p>
<p>Then you can convert it to a tuple if you wish :)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is another way to do without import any module.</p>
<pre><code>dict = {'AAA': {'', '111', '222'}, 'BBB': {'222', '999', '555'}}
result = []
print([[result.append(item) or item for item in one_set if item] for one_set in dict.values()])
print(','.join(result)) #all non '' elements
print(','.join(set(result))) #all non '' and non duplicated elements
</code></pre>
<p>Output:</p>
<pre><code>[['222', '111'], ['222', '999', '555']]
222,111,222,999,555
222,999,555,111
[Finished in 0.181s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try list comprehension in one line :</p>
<pre><code>data={'AAA': {'', '111', '222'}, 'BBB': {'222', '999', '555'}}

print(set([k for i,j in data.items() for k in j if k]))
</code></pre>
<p>output:</p>
<pre><code>{'222', '999', '111', '555'}
</code></pre>
</div>
<span class="comment-copy">That does not outputs a string...adding this will <code>', '.join(y for y in {x for x in chain(*d.values()) if x})</code></span>
<span class="comment-copy">@drec4s I know it doesn't; Op says he wants <code>values = '111', '222', '999', 555'</code>, so the requirements aren't clear on that front. But I have made changes so that OP can call <code>str</code> on the set to get the values as a single string.</span>
<span class="comment-copy">OP clearly states he wants the output in "the form of a single string"...</span>
<span class="comment-copy">Nevertheless, this is the most efficient way to do it. +1</span>
<span class="comment-copy">This won't work, the values are a set not a list. While your approach is in the right direction, you can explore set.add method and correct the code</span>
<span class="comment-copy">Conversion added.</span>
<span class="comment-copy">not to be pedantic, but this won't output the correct result again. The value '222' will repeat twice, which it doesn't in the case of <code>set</code>s :)</span>
