<div class="post-text" itemprop="text">
<p>I am able to run a background function using <code>multiprocessing.Process</code> with the start method <code>fork</code>. For some reason, I need this child process to start a new environment when running. So I set the start method to <code>spawn</code> via <code>multiprocessing.set_start_method('spawn')</code> and run the job via <code>job.start()</code> I get the following error:</p>
<pre><code>Can't pickle &lt;class 'module'&gt;: attribute lookup module on builtins failed
</code></pre>
<p>However, I do not use pickle for anything within the function that I am calling. What could I be doing wrong? Is there a general rule of thumb that I should have followed when running processes in <code>spawn</code> mode?</p>
<p>FYI: I am on a machine with Ubuntu 16.04</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a general rule of thumb...</p>
</blockquote>
<p>Yes. You ran into this documented restriction:</p>
<p><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html</a></p>
<blockquote>
<p>There are a few extra restriction which donâ€™t apply to the fork start method.</p>
<p>More picklability</p>
<p>Ensure that all arguments to Process.<strong>init</strong>() are picklable. Also, if you subclass Process then make sure that instances will be picklable when the Process.start method is called.</p>
</blockquote>
<p>You are running on ubuntu, so <code>fork</code> is probably the right answer. If there is a requirement you need to address which <code>fork</code> is incompatible with, then you will want to clearly document the details as the first part of choosing an improved solution.</p>
</div>
<span class="comment-copy"><code>multiprocessing</code> uses <code>pickle</code> to transport data between processes.  In 'spawn' mode this is the only way that any data gets to a process; 'fork' at least allows pre-generated data to be shared without being pickled.  I'm guessing you're using some sort of dynamically-defined class, which presents difficulties with pickling.</span>
<span class="comment-copy">Stick to basic types in the <code>Process</code> class and whatever function / parameters it runs. Have that function call a different function that does all of its own imports of the fancy stuff.</span>
