<div class="post-text" itemprop="text">
<p>Suppose such a dict with multiple items:</p>
<pre><code>d = {'foo':['c', 'a', 't'], 'bar':['d', 'o', 'g']}
</code></pre>
<p>I'd like to produce </p>
<pre><code>    l = ['c', 'a', 't', 'd', 'o', 'g']
    In [75]: l = []
        ...: for i in d.values():
        ...:     l.extend(i)
        ...: print(l)
    ['c', 'a', 't', 'd', 'o', 'g']
</code></pre>
<p>Try to implement it within one line using <code>extend</code> method.</p>
<pre><code>    In [76]: [ [].extend(i) for i in d.values() ]
    Out[76]: [None, None]
    In [79]: [ list().extend(i) for i in d.values()]
    Out[79]: [None, None]
</code></pre>
<p>What's the principles behind list comprehension to output <code>[None, None]</code> ?</p>
<p>It's facile to be achieved by </p>
<pre><code>    In [78]: [i for j in d.values() for i in j]
    Out[78]: ['c', 'a', 't', 'd', 'o', 'g']
</code></pre>
<p>Is it possible to be done with <code>extend</code> methond in single line?</p>
</div>
<div class="post-text" itemprop="text">
<p>straight answer: The result you desire can not be constructed in one line with <code>extend</code></p>
<p>As many already mentioned in comment <code>extend</code> modifies list and returns None. </p>
<p>You are not getting result because you wrote:
<code>[].extend(i)</code> in list comprehension</p>
<p>for each iteration your code will construct new list element <code>[]</code> and extend it with iteration value <code>i</code> you passed but it isn't stored anywhere so your code will perform operation but you won't get desire result because you didn't constructed a list before to avoid it you need to write code like this:</p>
<pre><code>l=[]  # create a list first
[l.extend(i) for i in d.values()]  # for each iteration list l will be extended
print(l)  # ['c', 'a', 't', 'd', 'o', 'g']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This comply with the principle of <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation" rel="nofollow noreferrer">Commandâ€“query separation - Wikipedia</a> devised by Bertrand Meyer.<br/>
It states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both.</p>
<p><a href="https://en.wikipedia.org/wiki/Design_by_contract" rel="nofollow noreferrer">Design by contract - Wikipedia</a></p>
<p><a href="https://en.wikipedia.org/wiki/Fluent_interface" rel="nofollow noreferrer">Fluent interface - Wikipedia</a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/7507289/unexpected-behavior-of-extend-with-a-list-in-python">Unexpected Behavior of Extend with a list in Python</a></span>
<span class="comment-copy"><code>extend</code> method updates the existing list(the list which calls the extend ) and returns <code>None</code>.</span>
<span class="comment-copy"><code>extend</code> modifies the list in-place and  the return value of <code>extend</code> is None</span>
<span class="comment-copy">TypeError: list() takes at most 1 argument (2 given) @Norrius</span>
<span class="comment-copy">@Tool If you want a one-liner, this should do: <code>import itertools; list(itertools.chain(*d.values()))</code>. <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.chain" rel="nofollow noreferrer">Docs.</a> Note that the order of elements in <code>.values()</code> might be not well-defined.</span>
