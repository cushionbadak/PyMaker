<div class="post-text" itemprop="text">
<p>Suppose I have a <code>speak</code> function:</p>
<pre><code>def speak():
    print("moo")
</code></pre>
<p>I can disassemble it as one usually does, with <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow noreferrer"><code>dis.dis</code></a>:</p>
<pre><code>&gt;&gt;&gt; dis.dis(speak)
  2           0 LOAD_GLOBAL              0 (print)
              3 LOAD_CONST               1 ('moo')
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE
</code></pre>
<p>But I want to destruct the code object associated with the <code>speak</code> function into a sequence of instructions, and then compile these back.
With the help of <a href="https://docs.python.org/3/library/dis.html#dis.Bytecode" rel="nofollow noreferrer"><code>dis.Bytecode</code></a>, I can get a sequence of <a href="https://docs.python.org/3/library/dis.html#dis.Instruction" rel="nofollow noreferrer"><code>dis.Instruction</code></a>s that represents the code object:</p>
<pre><code>&gt;&gt;&gt; bytecode = dis.Bytecode(speak)
&gt;&gt;&gt; for instruction in bytecode:
...     print(instruction)
... 
Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='print', argrepr='print', offset=0, starts_line=2, is_jump_target=False)
Instruction(opname='LOAD_CONST', opcode=100, arg=1, argval='moo', argrepr="'moo'", offset=3, starts_line=None, is_jump_target=False)
Instruction(opname='CALL_FUNCTION', opcode=131, arg=1, argval=1, argrepr='1 positional, 0 keyword pair', offset=6, starts_line=None, is_jump_target=False)
Instruction(opname='POP_TOP', opcode=1, arg=None, argval=None, argrepr='', offset=9, starts_line=None, is_jump_target=False)
Instruction(opname='LOAD_CONST', opcode=100, arg=0, argval=None, argrepr='None', offset=10, starts_line=None, is_jump_target=False)
Instruction(opname='RETURN_VALUE', opcode=83, arg=None, argval=None, argrepr='', offset=13, starts_line=None, is_jump_target=False)
</code></pre>
<p>Is there a straightforward way to compile these <code>Instruction</code> objects into the original code object?</p>
<p>For instance, I'm looking for a <code>compile_back</code> function that would take a sequence of instructions and output an <code>exec</code>utable code object:</p>
<pre><code>&gt;&gt;&gt; code_object = compile_back(dis.get_instructions(speak))
&gt;&gt;&gt; exec(code_object)
moo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The sequence of <code>Instruction</code> objects from <code>dis.Bytecode</code> is not enough to reconstruct a code object. A code object isn't just a sequence of instructions; it includes plenty of other data, like the argument count, the size of the evaluation stack, flags indicating various properties, etc. Most of these things are (briefly) described in a <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="nofollow noreferrer">table</a> in the <code>inspect</code> module docs, but there's even some <a href="https://www.python.org/dev/peps/pep-0523/#expanding-pycodeobject" rel="nofollow noreferrer">"scratch space"</a> not accessible through ordinary means.</p>
<p><code>Instruction</code> objects would be enough to recover a lot of a code object's information, but not all. With some dangerous assumptions, you might be able to get something that usually works, but it'd be better to keep more of the information from the original code object in the first place.</p>
<p>In any case, there's no <em>straightforward</em> way.</p>
</div>
