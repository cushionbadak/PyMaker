<div class="post-text" itemprop="text">
<p>I made a script in Linux to dynamically auto-copy into folders through the <code>subprocess</code> module:</p>
<pre><code>import sys
import subprocess


script = sys.argv
name = str(script[0])
print name

for i in range(0,10):
  fold = 'Lombriz'+str(i)
  subprocess.call(['mkdir',fold])
  subprocess.call(['cp',name,fold])
</code></pre>
<p>However when I try to execute this same script in the windows <code>cmd</code> by placing the correct windows commands, it throws the following error:</p>
<pre class="lang-none prettyprint-override"><code>Error: subprocess.call subprocess.call (['mkdir', fold])
  [Error 2]: The system can not find the specified file.
</code></pre>
<p>After that I had to do the same script with the module <code>os.system</code> and it worked perfectly on windows.</p>
<p>My question is: Does the subprocess module not work in Windows?
Can one only use <code>os.system</code> in Windows?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> works just fine on Windows.</p>
<p>But on any platform, <code>subprocess</code> can't call programs that don't exist. And there is no program named <code>mkdir</code> (or <code>MKDIR.EXE</code>) on Windows. When you type that into a command prompt, it's handled as a special built-in command by <code>cmd.exe</code>.</p>
<p>And, even if it did exist, you wouldn't be calling it, because from the error message you clearly passed <code>' mkdir'</code>, with a space before the <code>m</code>, and there's no program with than name on any system.</p>
<p>If you read the docs for <code>subprocess</code>, you can see that there are two ways around this:</p>
<ul>
<li>Pass <code>shell=True</code>, so the command will be executed by the shell (<code>cmd.exe</code>), similar to <code>os.system</code> but better in a variety of ways. Usually when you use this flag, you want to use a string rather than a list of arguments with this like <code>run(f'mkdir {fold}', shell=True)</code></li>
<li>Explicitly call <code>cmd.exe</code>, like <code>run(['cmd', '/C', 'mkdir', fold])</code></li>
</ul>
<p>However, there's really no reason to use either <code>os.system</code> or <code>subprocess</code> here. If you want to make a directory, just call <a href="https://docs.python.org/3/library/os.html#os.mkdir" rel="nofollow noreferrer"><code>os.mkdir</code></a> (or, if you want to do it recursively, <a href="https://docs.python.org/3/library/os.html#os.makedirs" rel="nofollow noreferrer"><code>os.makedirs</code></a>. That's cross-platform, and about as simple as possible. And similarly, instead of running <code>cp</code> on Unix and <code>copy</code> on Windows, you can just <a href="https://docs.python.org/3/library/shutil.html#shutil.copyfile" rel="nofollow noreferrer"><code>shutil.copyfile</code></a> or its variants.</p>
</div>
<span class="comment-copy">Of course <code>subprocess</code> works on Windows. If you take a brief glance at <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">the docs</a>, there's extensive information about the differences between Windows and POSIX, which would hardly be there if the module didn't work on Windows. Also, you'd get an <code>ImportError</code> if it didn't exist on Windows.</span>
<span class="comment-copy">Then why do I throw error when using subprocess in windows?</span>
