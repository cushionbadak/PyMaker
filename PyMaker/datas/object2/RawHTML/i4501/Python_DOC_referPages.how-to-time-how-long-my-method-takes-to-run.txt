<div class="post-text" itemprop="text">
<p>I have a program that has multiple methods. I would like to measure how long it takes for each method to run when they are called. </p>
<p>For example</p>
<pre><code>def func1:
  blah

def func2:
  blah


def main:
  call func1 and func2 and measure their times
</code></pre>
<p>is there an easy way to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I find the following piece of re-usable code handy when testing functions.</p>
<pre><code>import timeit    

def timed_function(f, *args, **kwargs):
    myname = str(f).split(' ')[1]
    def new_func(*args, **kwargs):
        timer1 = timeit.default_timer()
        result = f(*args, **kwargs)
        timer2 = timeit.default_timer()
        delta = timer2 - timer1
        print('Function {} Time = {:6.3f}ms'.format(myname, delta*1000))
        return result
    return new_func
</code></pre>
<p>You can use it to decorate any function and then it will print the original function's name and execution time every time you run it.</p>
<p>Something like this:</p>
<pre><code>@timed_function
def func1():
    return sum([0.5 for i in range(10000)])

y = func1()
</code></pre>
<p>Code output:
<code>
Function func1 Time =  0.849ms
</code></p>
<p>[I got the idea from <a href="http://docs.micropython.org/en/v1.9.3/pyboard/reference/speed_python.html#identifying-the-slowest-section-of-code" rel="nofollow noreferrer">here</a>.]</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a code timing setup I wrote for myself, I use python 2.7</p>
<pre><code>#!python2

import timeit

runs = 100
totalTime = 0.0; average = 0.0
testTimes = []

for i in range(runs):
    startTimer = timeit.default_timer()

    # &gt;&gt;&gt;&gt;&gt; code to be tested goes here &lt;&lt;&lt;&lt;&lt;

    endTimer = timeit.default_timer()

    timeInterval = endTimer - startTimer
    testTimes.append(timeInterval)
    totalTime += timeInterval

    # running below statement causes each run longer to complete
    # print '\n', '%1.4f' % timeInterval + ' seconds'

print
print '   Total time:', '%1.4f' % totalTime + ' seconds'
print 'Shortest time:', '%1.4f' % min(testTimes) + ' seconds'
print ' Longest time:', '%1.4f' % max(testTimes) + ' seconds'
print ' Average time:', '%1.4f' % (totalTime / runs) + ' seconds'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're running code from a separate file, <code>perf_counter</code> is the way to go. For example,</p>
<pre><code>from time import perf_counter

def main():
    start = perf_counter()
    # Do stuff.
    print(perf_counter() - start)
</code></pre>
<p>If you're testing code in the shell, there's an even easier way: the <code>timeit</code> module. It has two main functions: <code>timeit</code> and <code>repeat</code>. The former is simply a timer, the latter returns a list of times for different trials. <a href="https://docs.python.org/3/library/timeit.html?highlight=timeit#module-timeit" rel="nofollow noreferrer">https://docs.python.org/3/library/timeit.html?highlight=timeit#module-timeit</a>
Just make sure to pass <code>globals()</code> as the <code>globals</code> argument if you're using imported functions!</p>
</div>
<span class="comment-copy">Take a look at this post to see how it is done. <a href="https://stackoverflow.com/a/25823885/9610015">stackoverflow.com/a/25823885/9610015</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1557571/how-do-i-get-time-of-a-python-programs-execution">How do I get time of a Python program's execution?</a></span>
