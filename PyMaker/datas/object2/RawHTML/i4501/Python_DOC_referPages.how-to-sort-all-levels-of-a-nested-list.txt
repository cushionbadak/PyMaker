<div class="post-text" itemprop="text">
<p>I have a table that I want to convert to an indented outline document using the "depth" column as indent value and the "pos" column as each element's relative position within its level of the hierarchy</p>
<p>So, this: <a href="https://i.stack.imgur.com/gtf6t.png" rel="nofollow noreferrer">table</a></p>
<p>Converted to this: <a href="https://i.stack.imgur.com/gl5iG.png" rel="nofollow noreferrer">outline</a></p>
<p>I am able to parse the table into a python dictionary:</p>
<pre><code>d = {
223:{'name':'fruit', 'pos':'1',
    634:{'name':'apple', 'pos':'1',
        945:{'name':'red','pos':'2'},
        306:{'name':'round','pos':'1'},
        847:{'name':'sweet','pos':'3'},
        },
    835:{'name':'banana', 'pos':'3',
        751:{'name':'long','pos':'1'},
        607:{'name':'yellow','pos':'2'},
        },
    515:{'name':'orange', 'pos':'2',
        397:{'name':'orange','pos':'2'},
        248:{'name':'round','pos':'1'},
        },
    }
}
</code></pre>
<p>And I know how to sort a list or dictionary if it's not nested:</p>
<pre><code>d = {
223:{'name':'apple', 'pos':'1'},
945:{'name':'banana','pos':'3'},
847:{'name':'orange','pos':'2'},
}

sort = sorted(d.keys(), key=lambda x: (d[x]['pos']))
</code></pre>
<p>But what I am confused about is how to loop through the nested levels and do sorting on each level.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you have have strings and lists at the same level. Python won't let you compare these:</p>
<pre><code>&gt;&gt;&gt; 'abc' &lt; [1]
TypeError: '&lt;' not supported between instances of 'str' and 'list'
</code></pre>
<p>If you come up with a rule for what you want to do with these, you can write a <a href="https://docs.python.org/3/howto/sorting.html#key-functions" rel="nofollow noreferrer">key function</a> to apply that rule. For example, let's say we want to sort lists before strings. We could sort each element <code>x</code> as if it were the pair <code>(type(x).__name__, x)</code>:</p>
<pre><code>&gt;&gt;&gt; ('str', 'abc') &lt; ('list', [1])
False
</code></pre>
<p>A bit hacky, but it works, and since you haven't specified how you want to handle this, I'm going to go with that key function.</p>
<p>For your actual answer, you'll need to add on to that key function to use <code>int(lst[1])</code> for 2-element lists, or something like that (it's not entirely clear how you want to distinguish between the "special" lists and normal nested ones), but I'll leave that for you to do.</p>
<hr/>
<p>Now, we just need to sort recursively. </p>
<hr/>
<p>If you want to do it in-place, you just sort the list, then, for each element, if it's a list, nested-sort it. Again, you'll want to add in some rule for special-casing those 2-element lists, but I'm not sure what rule you want, so you can figure it out for yourself.</p>
<p>You might want to change things to sort every mutable sequence, not just lists, or… well, whatever seems appropriate.</p>
<pre><code>def nested_sort(lst):
    lst.sort(key=lambda x: (type(x).__name__, x))
    for elem in lst:
        if isinstance(elem, list):
            nested_sort(elem)
</code></pre>
<hr/>
<p>If you want a sorted copy instead, the recursion is even easier. Again, you'll have to write your own code for the special-case lists, and now you have even more options for types to handle as nested (e.g., maybe all sequences except string types?), but here's the basic idea:</p>
<pre><code>def nested_sorted(lst):
    if not isinstance(lst, list): return lst
    return sorted(map(nested_sorted, lst), 
                  key=lambda x: (type(x).__name__, x))
</code></pre>
</div>
<span class="comment-copy">Have you come up with this structure on your own or you can use a different one? If so, could you give some background about the problem/goal and the dictionary structure you mentioned?</span>
<span class="comment-copy">'<i>I want to sort</i>' - what did you try? What did not work? Please post your code and any relevant error messages.</span>
<span class="comment-copy">How you are sorting the second nested list in order [2,1,4,1,2] ?? and third is [3,1,2] , is this your custom sorting?</span>
<span class="comment-copy">First, don't call your list <code>list</code>; that hides the name of the type—which is even more important than usual here, as you're likely to want to use <code>ininstance(element, list)</code> in the code.</span>
<span class="comment-copy">Second, you have both strings and lists at the same level in some of your sublists. How do you want those sorted? By default, Python will refuse to compare those elements and raise a <code>TypeError</code>. You need to come up with a rule (like "put all strings before all lists") before you can implement it.</span>
