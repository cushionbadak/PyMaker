<div class="post-text" itemprop="text">
<p>I have the below data frame. The status column stores the value as a list.</p>
<p>df</p>
<pre><code>   STATUS     
1 [REQUESTED, RECEIVED]
2 [XYZ]
3 [RECEIVED]
</code></pre>
<p>When I try the below logic:</p>
<pre><code>df['STATUS'].str.upper().isin(['RECEIVED'])
</code></pre>
<p>It gives me </p>
<pre><code>1 False
2 False
3 False
</code></pre>
<p>But I am expecting</p>
<pre><code>1 True
2 False
3 True
</code></pre>
<p>as we have the value <code>RECEIVED</code> at rows 1 and 3</p>
</div>
<div class="post-text" itemprop="text">
<p>For a simple check like this, you can join the list of strings and use <code>contains</code>.</p>
<p>EDIT:
To account for the difference between <code>RECEIVED</code> and <code>RECEIVED CASH</code>, you can join the lists with a unique character (such as <code>'='</code>) AND surround the resulting string with the same character, and then check for <code>=RECEIVED=</code>.</p>
<pre><code>('=' + df['STATUS'].str.join('=') + '=').str.contains('=RECEIVED=')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's possible you mean something like</p>
<pre><code>&gt;&gt;&gt; df.STATUS.astype(str).str.upper().str.contains('RECEIVED')
1 True
2 False
3 False
</code></pre>
<p>(Your example has a typo, incidentally - 1. has RECEIVED and 3. has RECIEVED.)</p>
<p>as <code>isin</code> is the opposite of what is meant by your example.</p>
</div>
<div class="post-text" itemprop="text">
<p>Data from jde</p>
<pre><code>df = pd.DataFrame({'STATUS': [['REQUESTED', 'RECEIVED'], ['XYZ'], ['RECEIVED']]},
                  index=[1, 2, 3])
df.STATUS.apply(lambda x : 'RECEIVED' in x)
Out[11]: 
1     True
2    False
3     True
Name: STATUS, dtype: bool
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's hard to operate directly with list values. You can concatenate the strings into one, using some separator character, and then check the condition:</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'STATUS': [['REQUESTED', 'RECEIVED'], ['XYZ'], ['RECEIVED']]},
                  index=[1, 2, 3])
print(df['STATUS'].str.join('|').str.contains('RECEIVED'))
</code></pre>
<p>Output:</p>
<pre><code>1     True
2    False
3     True
Name: STATUS, dtype: bool
</code></pre>
<p>A more efficient option would be to replace the strings with numerical flags. This can be done really nicely since Python 3.6 using <a href="https://docs.python.org/3/library/enum.html#flag" rel="nofollow noreferrer"><code>enum.Flag</code></a>.</p>
<pre><code>import enum
import pandas as pd

class Status(enum.Flag):
    REQUESTED = enum.auto()
    RECEIVED = enum.auto()
    XYZ = enum.auto()

df = pd.DataFrame({'STATUS': [Status.REQUESTED | Status.RECEIVED, Status.XYZ, Status.RECEIVED]}, index=[1, 2, 3])
print(df['STATUS'] &amp; Status.RECEIVED)
</code></pre>
<p>Or, if you already have a data frame with strings:</p>
<pre><code>import enum
import pandas as pd
from functools import reduce

class Status(enum.Flag):
    REQUESTED = enum.auto()
    RECEIVED = enum.auto()
    XYZ = enum.auto()

df = pd.DataFrame({'STATUS': [['REQUESTED', 'RECEIVED'], ['XYZ'], ['RECEIVED']]}, index=[1, 2, 3])
df['STATUS_ENUM'] = df['STATUS'].apply(lambda v: reduce(lambda a, b: a | Status[b], v, Status(0)))
print(df['STATUS_ENUM'] &amp; Status.RECEIVED)
</code></pre>
</div>
<span class="comment-copy">It looks like you have a typo in 3. - it should be RECEIVED and not RECIEVED.</span>
<span class="comment-copy">I am reconsidering the usage of contains as it fails to distinguish between ~RECEIVED~ and ~RECEIVED CASH~</span>
<span class="comment-copy">I updated my answer.  Hope this method helps</span>
<span class="comment-copy">it gives me the error <code>Series object has no attribute contains</code></span>
<span class="comment-copy">Are you sure you placed <code>.str</code> after <code>upper()</code>?</span>
<span class="comment-copy">but in this question i saw something similar about isin <a href="https://stackoverflow.com/questions/19960077/how-to-implement-in-and-not-in-for-pandas-dataframe" title="how to implement in and not in for pandas dataframe">stackoverflow.com/questions/19960077/â€¦</a></span>
<span class="comment-copy">@TomJMuthirenthi Yes, that is the exact opposite than this question, no? In that question, each of the series elements is a single string, and the point is to check if this string is in a list. Here each series element is a list, and the point is to check if the list <i>contains</i> a string. LMK if I'm missing something.</span>
<span class="comment-copy">So, how can we write the equivalent for a df <code>select * from df where col in (5,6)</code> ? Please help.</span>
<span class="comment-copy">I am reconsidering the usage of <code>contains</code> as it fails to distinguish between <code>RECEIVED</code> and <code>RECEIVED CASH</code></span>
<span class="comment-copy">@TomJMuthirenthi Yes, this approach has that kind of limitations... You could do something like <code>contains('RECEIVED|')</code>, but you would need to append a <code>|</code> to each row after <code>join</code>...</span>
