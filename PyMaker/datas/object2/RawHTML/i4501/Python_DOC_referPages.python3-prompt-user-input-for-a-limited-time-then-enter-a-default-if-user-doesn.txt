<div class="post-text" itemprop="text">
<p>Python3: I'm trying to allow a user a given amount of time to enter a response into an input, but after a given amount of time if they haven't entered anything, I want to abort the input and assign a default value to the variable that is storing the input, or otherwise feed default values into the input statement after the given time period.  </p>
<p>I've tried this:  </p>
<pre><code>from threading import Timer
timeout = 2
t = Timer(timeout, print, ["\nSorry, time is up"])
t.start()
answer = input("You have 2 seconds to answer:")
t.cancel()
print(answer)
</code></pre>
<p>from a different stack overflow post, but the problem is that the interpreter still prompts the user for input even after the final line is executed and <code>answer</code> is printed, and this won't work for what I'm trying to do (essentially, a command line game that needs to keep going when the player isn't giving it input but update when it does receive input).</p>
<p>What is the best way to do this? I know python doesn't really have a timeout function or something like that, but is there any way to achieve this via system commands or a module?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several plausible approaches (some of which are probably Unix-specific):</p>
<ol>
<li>Read the input in a <code>subprocess</code> that can be <code>kill</code>ed after the timeout.  (Many functions, including <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a>, accept a <code>timeout</code> parameter to automate this.)</li>
<li>Use <code>alarm</code> or similar to send your own process a signal (and install a <code>signal</code> handler that throws an exception).</li>
<li>Have another thread <code>close</code> the descriptor being read after the timeout; this sounds drastic but is generally said to work, so long as you don’t accidentally <code>open</code> a file on the closed descriptor before restoring it with <code>dup2</code>.</li>
<li>Read the input with lower-level facilities like non-blocking <code>read</code> and <code>select</code>—which will unfortunately disable nice things like <code>readline</code>.</li>
</ol>
<p>In any case, you have to decide what to do with incomplete but non-empty input entered before the timeout.  The terminal driver will likely transfer it invisibly to the next input prompt by default.</p>
</div>
<span class="comment-copy">I'm currently developing on Windows, but trying to design the code to be cross-platform to OS X. How would you go about implementing the <code>subprocess</code> method you suggested?</span>
<span class="comment-copy">@AndrewMistele: I edited in a trivial pointer to the documentation.</span>
