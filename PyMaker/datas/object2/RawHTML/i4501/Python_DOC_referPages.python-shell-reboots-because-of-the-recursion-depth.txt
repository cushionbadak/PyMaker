<div class="post-text" itemprop="text">
<p>I attempted to make my own breadth-first sudoku-solving program using recursion in python. For now the code runs up untill the 5th line of the easy sudoku I use as an example. Obviously I tried to enlarge the recursiondepth, but now instead of crashing, the kernel or shell reboots with the larger sys.setrecursion value. Mabye there is a mistake in my code, or python simply doesn't allow this type of recursion. Any help would be greatly appreciated. Thanks! </p>
<p>P.S.: I realise I could've done things more efficiently and some things are not necessary, but I just want to resolve the recursion problem and then I will smoothen things out. Again: Thank you!</p>
<p>Here is the code:</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-css lang-css prettyprint-override"><code>import numpy as np
import copy
import sys

sys.setrecursionlimit(10000)

task = np.array([[7, 9, 0, 0, 0, 0, 3, 0, 0],
                  [0, 0, 0, 0, 0, 6, 9, 0, 0], 
                  [8, 0, 0, 0, 3, 0, 0, 7, 6],
                  [0, 0, 0, 0, 0, 5, 0, 0, 2], 
                  [0, 0, 5, 4, 1, 8, 7, 0, 0], 
                  [4, 0, 0, 7, 0, 0, 0, 0, 0], 
                  [6, 1, 0, 0, 9, 0, 0, 0, 8], 
                  [0, 0, 2, 3, 0, 0, 0, 0, 0],
                  [0, 0, 9, 0, 0, 0, 0, 5, 4]])

task_sol = copy.deepcopy(task)

def algorithm2(i=None, j=None, number=None):
    if i == 6:
        return task_sol
    if i is None and j is None:
        i, j = 0, 0
    if task[i, j] != 0:
        if j == 8:
            j = 0
            return algorithm2(i+1, j)
        else:
            return algorithm2(i, j+1)
    if number is None:
        if task_sol[i, j] == 0:
            number = 1
        else:
            number = task_sol[i, j]+1
    if i &gt; 8:
        return task_sol
    if number &gt; 9:
        if j == 0:
            j = 8
            amount = 1
            while task[i-amount, j] != 0:
                amount += 1
            temp_number = task_sol[i-amount, j]
            task_sol[i-amount, j] = 0
            return algorithm2(i-amount, j, temp_number+1)
        else:
            amount = 1
            while task[i, j-amount] != 0:
                amount += 1
            temp_number = task_sol[i, j-amount]
            task_sol[i, j-amount] = 0
            return algorithm2(i, j-amount, temp_number+1)
    if number_check(i, j, number) is False:
        return algorithm2(i, j, number+1)
    else:
        task_sol[i, j] = number
        if j == 8:
            j = 0
            return algorithm2(i+1, j)
        else:
            return algorithm2(i, j+1)
        
def number_check(i, j, number):
    if number in task_sol[i:i+1, :]:
        return False
    if number in task_sol[:, j:j+1]:
        return False
    new_i, new_j = i//3, j//3
    if number in task_sol[new_i*3:(new_i+1)*3, new_j*3:(new_j+1)*3]:
        return False
    return True

print(algorithm2())</code></pre>
</div>
</div>
</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>sys</code> module:</p>
<p><code>sys.setrecursionlimit(limit)</code></p>
<p><a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html#sys.setrecursionlimit</a></p>
<p>Note:</p>
<blockquote>
<p>"This should be done with care, because a too-high limit can lead to a crash."</p>
</blockquote>
</div>
<span class="comment-copy">I did this, as you can see in the code, yet it still doesn't work.</span>
<span class="comment-copy">@wurtle what was the original recursion limit?</span>
<span class="comment-copy">the recursion limit was 2000 with sys.getrecursionlimit()</span>
<span class="comment-copy">There aren't many options here. If you increase the limit continually, one of two things will happen: 1) the program will succeed at a certain limit. 2) the program will crash. The latter means that you must optimize your code in order to proceed any further</span>
<span class="comment-copy">Okay thank you, I will try to optimize it. Do you think if I would just work iteratively instead of recursively it would work better?</span>
