<div class="post-text" itemprop="text">
<p>So I have a string which is a function like</p>
<pre><code>code = """def somefn(x):
    return x + x
    y = somefn(z)"""
</code></pre>
<p>and I am trying to run this in another function like</p>
<pre><code>def otherfn(codestr):
    z = 2
    exec(codestr)
    return y

otherfn(code)
</code></pre>
<p>but it gives me the error:</p>
<blockquote>
<p>Traceback (most recent call last):
  File "C:/Users/Admin/Desktop/heh.py", line 11, in 
  otherfn(code)
  File "C:/Users/Admin/Desktop/heh.py", line 9, in otherfn
  return y
  NameError: name 'y' is not defined</p>
</blockquote>
<p>it works fine outside the function like</p>
<p><code>z=2
exec(codestr)
print(y)</code></p>
<p>it finds y just fine but not sure why it is bugging out when it is in the function.</p>
<p>How can I fix this? Is it something to do with globals() and locals()? Using Python 3.6 btw.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems with your code. First of all, you have an indentation problem - the <code>y</code> gets 'defined' inside the <code>somefn()</code> function, after the <code>return</code> so it never actually gets the chance to get onto the stack. You need to redefine your <code>code</code> to :</p>
<pre><code>code = """def somefn(x):
    return x + x
y = somefn(z)"""
</code></pre>
<p>But that's just the tip of the iceberg. The greater issue is that <code>exec()</code> cannot modify the local scope of a function. This is due the fact that Python doesn't use a <code>dict</code> for lookup of variables in the local scope so all changes from the <code>exec()</code> do not get reflected back to the stack to enable lookup. This causes a <em>weird</em> issue where <code>exec()</code> seemingly changes the <code>locals()</code> dictionary, but Python still throws a <code>NameError</code>:</p>
<pre><code>def otherfn(codestr):
    z = 2
    exec(codestr)
    print(locals()["y"])  # prints 4
    return y  # NameError

otherfn(code)
</code></pre>
<p>This is an intended behavior, as explained in the <a href="https://bugs.python.org/issue4831" rel="nofollow noreferrer">issue4831</a>, and further pontificated in the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">official docs</a>:</p>
<blockquote>
<p><strong>Note</strong>: The default <em>locals</em> act as described for function <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a> below: modifications to the default <em>locals</em> dictionary should not be attempted. Pass an explicit <em>locals</em> dictionary if you need to see effects of the code on <em>locals</em> after function <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec()</code></a> returns. </p>
</blockquote>
<p>But if you have to reflect the changes you can just do a post-exec local scope update:</p>
<pre><code>def otherfn(codestr):
    z = 2
    locals_ = locals()
    exec(codestr, globals(), locals_)
    y = locals_["y"]
    return y

otherfn(code)
</code></pre>
</div>
