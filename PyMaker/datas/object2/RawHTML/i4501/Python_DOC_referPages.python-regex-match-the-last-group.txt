<div class="post-text" itemprop="text">
<p>I have a string that looks like this:</p>
<pre><code>a = '2017-11-02T00:00:10'
</code></pre>
<p>I want to match the last group, which is <code>10</code> in my string. </p>
<p>So, something like this: <code>2017-11-02T00:00:</code> and <code>10</code></p>
<p>I tried <code>re.match(r':\d+$', a)</code>, <code>re.match(r':00$', a)</code>, <code>re.match(r':00+$', a)</code></p>
<p>But none of them seems to work. Can anyone please explain why my regex expression isn't working, and how to capture the last group from my string?</p>
<ul>
<li>The output can be lenient as long as I can confirm that the last millisecond equals <code>10</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This problem doesn't need regex and can be solved easily with .split()</p>
<pre><code>a = '2017-11-02T00:00:10'
milliseconds = a.split(':')[-1]
print(milliseconds)
&gt;&gt;&gt;"10"
</code></pre>
<p>Timing:</p>
<pre><code>%timeit '2017-11-02T00:00:10'.split(':')[-1]
265 ns ± 3.86 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<p>If you really want to take the regex route which is a lot slower:</p>
<pre><code>import re
a = '2017-11-02T00:00:10'

m = re.findall(r"\d+$", a)
print(m[0])
&gt;&gt;&gt;10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because <a href="https://docs.python.org/3/library/re.html#search-vs-match" rel="nofollow noreferrer"><code>re.match()</code> implicitly anchors at the beginning of the string</a>, meaning it only succeeds if the match appears there.  Because it anchors at the beginning of the string but not the end of the string, this behavior can be confusing.  You may find it simpler to always use <code>re.search()</code> instead of <code>re.match()</code>, and to use <code>^</code> and/or <code>$</code> when you need anchoring.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regular expression is generally not the best solution (in term of perfs). If there are tools for do the job you should use them. Here's <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer">datetime.strptime</a> is your friend:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; date = datetime.strptime('2017-11-02T00:00:10', '%Y-%m-%dT%H:%M:%S')
&gt;&gt;&gt; date
datetime.datetime(2017, 11, 2, 0, 0, 10)
&gt;&gt;&gt; date.second
10
</code></pre>
<p>Timing:</p>
<pre><code>%timeit datetime.strptime('2017-11-02T00:00:10', '%Y-%m-%dT%H:%M:%S').second
10.7 µs ± 1.84 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<p>See also <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">strftime() and strptime() Behavior</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may try this too</p>
<pre><code>import re
a= '2017-11-02T00:00:10'
splrex=re.compile(r':(?=\d+$)')
print(splrex.split(a))                # output:  ['2017-11-02T00:00', '10']

regx=re.compile(r'^(.*)(\b\d+)$')
m= regx.match(a)
print(m.group(1),m.group(2))          # output:  2017-11-02T00:00: 10
</code></pre>
</div>
<span class="comment-copy">Thanks for adding the times :)</span>
