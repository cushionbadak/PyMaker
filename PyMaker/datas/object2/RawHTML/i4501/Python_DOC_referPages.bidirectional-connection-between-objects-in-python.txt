<div class="post-text" itemprop="text">
<p>Is there any smart way in Python to make bidirectional connections between objects?<br/>
It's many-to-many type of connection. Take a look at this sample picture:</p>
<p><img alt="picture" src="https://i.stack.imgur.com/yBqIu.png"/></p>
<p>All of the objects visible on the picture are also objects in my program. 
What I would like to achieve is that whenever I do something like <code>print(object.connetions)</code> I get a list of all connected objects.
So looking at the sample picture when I do <code>print(N2.connections)</code> it lists R6,Jolie etc. Similarly <code>print(AB.connections)</code> prints P1...3, P8..0. </p>
<p>What I currently implemented is one-way connection using list(), so that I am only able to print connections of AB object - it stores all connected objects(P1...3, P8..0) in a list.</p>
<p>I know that one of the possible solutions is to add such a connection lists to all objects, but it would require two lists and two <code>append()</code> operations for every single connection.</p>
<p>Do you now any other smart method to implement such functionality?</p>
</div>
<div class="post-text" itemprop="text">
<p>You will need data structures both on the "outgoing" object and on the "incoming" object. Both structures could be lists, and grow with <code>append</code>, no matter - but the important thing is to have specialized methods on the objects to handle the connections on both sides - otherwise it would soon get out of hand to keep all sides in sync.</p>
<p>That said, one nice way to go would be to make your objects to attend the "MutableMapping" protocol, by inheriting from   <code>collections.abc.MutableMapping</code> : that way, with a few methods that are easy to get right you get the full functionality one gets  out of a Python native dict. </p>
<p>And then, have in all your objects an internal real dictionary  to keep all connections - keep along with each key, that might be an object id or any unique filed, a reference to the other object, as well as whether it is outgoing or incoming reference - that is, metadata for the edge connecting both objects - and further implement an explict "delete" method so that an object can erase itself from all listed connections if it is to be removed; (also, depending on your scenario, you might want to use weakrefs to point to the other objects)</p>
<p>Check the docs at:
<a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.abc.html</a></p>
<p>You only have to implement the <code>__getitem__, __setitem__, __delitem__, __iter__, __len__</code> methods and have <code>__setitem__</code> and <code>__delitem__</code> operate both on self and on the other object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're doing simple graph analysis. And as such, you could use <a href="https://networkx.github.io/documentation/stable/index.html" rel="nofollow noreferrer"><code>networkx</code></a>. With it you can have unidirectional or bidirectional graphs. You translate your information to nodes and edges. In such way you can verify easily adjacent nodes (your objects). You can give a look to the <a href="https://networkx.github.io/documentation/stable/tutorial.html" rel="nofollow noreferrer">tutorial</a>, it should be quite fun/interesting if you have never tried it before.</p>
<p>Additionally, you can do a lot of analysis, not only the adjacent nodes, but you can do operations such as shortest path from one node to another, graph centrality, assortativity, flow analysis, etc.</p>
</div>
<span class="comment-copy">Maybe just use an adjacency matrix? Constant time lookup at the cost of space in memory.</span>
<span class="comment-copy">You could use a dictionary rather than a list to speed up the lookup times. And what is wrong with two <code>append()</code> operations? Many Python implementations of graphs (networks) use this data type and accept the two appends.</span>
<span class="comment-copy">I don't mean that append () is wrong, what I mean is that when I add connection between Ob1 and Ob2 in that case I need to do Ob1.connections.append(Ob2) and Ob2.connections.append(Ob1). I was wondering if there is prettier solution.</span>
<span class="comment-copy">Not really, because these connections exist solely in the semantics of your program, not at the language level.</span>
<span class="comment-copy">Perhaps you should add a method to the objects, that links them both ways?</span>
