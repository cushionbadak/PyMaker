<div class="post-text" itemprop="text">
<p>I'm exploring the REPL and I noticed the <code>__builtins__</code> module.</p>
<p>I entered</p>
<pre><code>&gt;&gt;&gt; __builtins__.
</code></pre>
<p>and hit Tab, then Python REPL showed me a list of builtin <strong>identifiers</strong>, including <code>abs</code>, <code>len</code>, <code>zip</code> and <code>True</code>, <code>False</code>, <code>None</code> etc.</p>
<p>The first test passed without doubt:</p>
<pre><code>&gt;&gt;&gt; __builtins__.zip is zip
True
</code></pre>
<p>But the second one didn't:</p>
<pre><code>&gt;&gt;&gt; __builtins__.None is None
   File "&lt;stdin&gt;", line 1
    __builtins__.None is None
                    ^
SyntaxError: invalid syntax
</code></pre>
<p>Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>We can observe this change in the language from the keywords list of <a href="https://docs.python.org/2/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">Python 2</a> and <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">Python 3</a>. <code>False</code>, <code>None</code> and <code>True</code> were added as keywords to avoid confusion should someone e.g. try to overwrite one of them. </p>
<pre><code>&gt;&gt;&gt; False=True
&gt;&gt;&gt; False
True
</code></pre>
<p>This is valid, but highly misleading, Python 2. Python 3 responds differently:</p>
<pre><code>&gt;&gt;&gt; False=True
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to keyword
</code></pre>
<p>The History of Python has a writeup on <a href="http://python-history.blogspot.se/2013/11/story-of-none-true-false.html" rel="nofollow noreferrer">the story of None, True and False</a>.
Here's another <a href="https://stackoverflow.com/questions/18050815/why-were-true-and-false-changed-to-keywords-in-python-3">stack overflow question</a> on the topic. Another effect of this change is that the compiler knows precisely which objects they are, and doesn't need a namespace lookup when they're referenced. </p>
<p>Python 2:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile("True","foo.py","eval"))
  1           0 LOAD_NAME                0 (True)
              3 RETURN_VALUE
</code></pre>
<p>Python 3:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile("True","foo.py","eval"))
  1           0 LOAD_CONST               0 (True)
              3 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>None</code> is a keyword. As such, it can not be used with the dot notation, much like how <code>__builtins__.True</code>, <code>__builtins__.class</code> and <code>__builtins__.def</code> are also a syntax error.</p>
<p>This can be bypassed by using <code>getattr</code>:</p>
<pre><code>print(getattr(__builtins__, 'None') is None)
# True
print(getattr(__builtins__, 'False') is False)
# True
print(getattr(__builtins__, 'True') is True)
# True
</code></pre>
<p>Unlike <code>abs</code>, <code>len</code>, <code>zip</code> etc (which are top-level functions), <code>None</code>, <code>True</code> and <code>False</code> are keywords in Python 3 (see <a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#keywords</a>).</p>
<p>In Python 2 <code>True</code> and <code>False</code> where not keywords (just a built-in name/constant) (See <a href="https://docs.python.org/2/reference/lexical_analysis.html#keywords" rel="nofollow noreferrer">https://docs.python.org/2/reference/lexical_analysis.html#keywords</a>) so you called reassign to them. As mention above this is impossible in Python 3 since they became keywords.</p>
<p>Also see this question: <a href="https://stackoverflow.com/questions/13401563/true-false-assignment-in-python-2-x">True=False assignment in Python 2.x</a></p>
<p>With that said, one can still mess around with <code>__builtins__.True</code> in Python 3, but it will not affect the actual <code>True</code> as it used to be in Python 2:</p>
<pre><code>print(getattr(__builtins__, 'True'))
# True
setattr(__builtins__, 'True', False)
print(getattr(__builtins__, 'True'))
# False
print(True)
# True
</code></pre>
</div>
<span class="comment-copy"><code>class</code> and <code>def</code> <b>do not</b> show up in the list when I hit Tab after entering <code>__builtins__.</code>.</span>
<span class="comment-copy">@iBug why does it matter? for what it's worth, <code>True</code> and <code>False</code> do show up but still cause a syntax error</span>
<span class="comment-copy">Neither <code>class</code> nor <code>def</code> are names bound to objects. Keywords and names are two different sets; their intersection includes <code>None</code>, <code>True</code> and <code>False</code>.</span>
