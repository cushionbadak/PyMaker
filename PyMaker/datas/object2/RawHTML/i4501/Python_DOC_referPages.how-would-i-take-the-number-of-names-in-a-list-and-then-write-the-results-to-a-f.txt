<div class="post-text" itemprop="text">
<p>I am fairly new to python and am having difficulties with this (most likely simple) problem. I'm accepting a file with the format. </p>
<pre><code>name_of_sports_team    year_they_won_championship
</code></pre>
<p>e.g.,</p>
<pre><code>1991    Minnesota
1992    Toronto
1993    Toronto
</code></pre>
<p>They are already separated into a nested list [year][name]. I am tasked to add up all the repetitions from the list and display them as such in a new file.</p>
<pre><code>Toronto    2 
Minnesota    1
</code></pre>
<p>My code is as follows-</p>
<pre><code>def write_tab_seperated(n):
    '''
    N is the filename
    '''

    file = open(n, "w")

    # names are always in the second position?
    data[2] = names

    countnames = () 
    # counting the names 
    for x in names:
    # make sure they are all the same    
    x = str(name).lower()
        # add one if it shows. 
        if x in countnames:
            countnames[x] += 1
        else:
            countnames[x] = 1
    # finish writing the file 
    file.close
</code></pre>
<p>This is so wrong its funny, but I planned out where to go from here:</p>
<ul>
<li>Take the file </li>
<li>separate into the names list</li>
<li>add 1 for each repetition </li>
<li>display in name(tab)number format</li>
<li>close the file.</li>
</ul>
<p>Any help is appreciated and thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I understand through your explanation, the following is my piece of code:</p>
<pre><code>#input.txt is the input file with &lt;year&gt;&lt;tab&gt;&lt;city&gt; data
with open('input.txt','r') as f:
    input_list =[x.strip().split('\t') for x in f]

output_dict = {}
for per_item in input_list:
    if per_item[1] in output_dict:
        output_dict[per_item[1]] += 1
    else:
        output_dict[per_item[1]] = 1

#output file has &lt;city&gt;&lt;tab&gt;&lt;number of occurence&gt;
file_output = open("output.txt","w")
for per_val in output_dict:
    file_output.write(per_val + "\t" + str(output_dict[per_val]) + "\n")
</code></pre>
<p>Let me know if it helps. </p>
</div>
<div class="post-text" itemprop="text">
<p>There's a built-in datatype that's perfect for your use case called <a href="https://docs.python.org/3/library/collections.html#counter-objects" rel="nofollow noreferrer">collections.Counter</a>.</p>
<p>I'm assuming from the sample I/O formatting that your data file columns are tab separated.  In the question text it looks like 4-spaces — if that's the case, just change <code>'\t'</code> to <code>'    '</code> or <code>' '*4</code> below.</p>
<pre><code>with open('data.tsv') as f:
    lines = (l.strip().split('\t') for l in f.readlines())
</code></pre>
<p>Once you've read the data in, it really is as simple as passing it to a Counter and specifying that it should create counts on the values in the second column.</p>
<pre><code>from collections import Counter

c = Counter(x[1] for x in lines)
</code></pre>
<p>And printing them back out for reference:</p>
<pre><code>for k, v in c.items():
    print('{}\t{}'.format(k, v))
</code></pre>
<p>Output:</p>
<pre><code>Minnesota   1
Toronto 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One of the great things about python is the huge number of packages. For handling tabular data, I'd recommend using <a href="https://pandas.pydata.org" rel="nofollow noreferrer"><code>pandas</code></a> and the <a href="https://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow noreferrer"><code>csv</code></a> format:</p>
<pre><code>import pandas as pd

years = list(range(1990, 1994))
names = ['Toronto', 'Minnesota', 'Boston', 'Toronto']

dataframe = pd.DataFrame(data={'years': years, 'names': names})

dataframe.to_csv('path/to/file.csv')
</code></pre>
<p>That being said, I would still highly recommend to go through your code and learn how these things are done from scratch.</p>
</div>
<span class="comment-copy">hey @Speter, do you want to restructure the code or leave it as similar as possible?</span>
<span class="comment-copy">@PeterDolan I have no preference, seeing that there is a good chance I am going down the wrong rabbit hole.</span>
<span class="comment-copy">I added an example using python's counter datatype which is really useful here</span>
<span class="comment-copy">great answer. nitpicking, but how about <code>for l in f.read().strip().split('\n')</code> -&gt; <code>for l in f.readlines() if l</code></span>
<span class="comment-copy">The one caveat that gets me with <code>readlines()</code> is that it leaves the trailing <code>\n</code> on each line, but yeah overall, that's a bit cleaner — I just updated it to use that, and also replaced the list comprehensions with generators.</span>
<span class="comment-copy">i'm not sure this answers the question - doesn't the OP want to read data from disk and inspect it? You're snippet writes data to disk.</span>
<span class="comment-copy">His function is called <code>write_tab_seperated()</code>, so I'm fairly sure he wants to write.</span>
