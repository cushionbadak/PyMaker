<div class="post-text" itemprop="text">
<p>How do you get the very next list within a nested list in python?</p>
<p>I have a few lists:</p>
<pre><code>charLimit = [101100,114502,124602]

conditionalNextQ = [101101, 101200, 114503, 114504, 124603, 124604]`

response = [[100100,4]
,[100300,99]
,[1100500,6]
,[1100501,04]
,[100700,12]
,[100800,67]
,[100100,64]
,[100300,26]
,[100500,2]
,[100501,035]
,[100700,9]
,[100800,8]
,[101100,"hello"]
,[101101,"twenty"] ... ]

for question in charLimit:
    for limitQuestion in response:
        limitNumber = limitQuestion[0]
        if question == limitNumber:
            print(limitQuestion)
</code></pre>
<p>The above code is doing what I want, i.e. printing the list instances in <code>response</code> when it contains one of the numbers in <code>charlimit</code>. However, I also want it to print the immediate next value in <code>response</code> also.</p>
<p>For example the second-to-last value in <code>response</code> contains <code>101100</code> (a value thats in <code>charlimit</code>) so I want it to not only print  </p>
<pre><code>101100,"hello"
</code></pre>
<p>(as the code does at the moment)</p>
<p>but the very next list also (and only the next)</p>
<pre><code>101100,"hello"
101101,"twenty"
</code></pre>
<p>Thank is advance for any help here. Please note that <code>response</code> is a verrrrry long list and so I'm looking to make things fairly efficient if possible, although its not crucial in the context of this work. I'm probably missing something very simple but cant find examples of anyone doing this without using specific indexes in very small lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>enumerate</code></p>
<p><strong>Ex:</strong></p>
<pre><code>charLimit = [101100,114502,124602]
conditionalNextQ = [101101, 101200, 114503, 114504, 124603, 124604]
response = [[100100,4]
,[100300,99]
,[1100500,6]
,[1100501,04]
,[100700,12]
,[100800,67]
,[100100,64]
,[100300,26]
,[100500,2]
,[100501,035]
,[100700,9]
,[100800,8]
,[101100,"hello"]
,[101101,"twenty"]]

l = len(response) - 1
for question in charLimit:
    for i, limitQuestion in enumerate(response):
        limitNumber = limitQuestion[0]
        if question == limitNumber:
            print(limitQuestion)
            if (i+1) &lt;= l:
                print(response[i+1])
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[101100, 'hello']
[101101, 'twenty']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would eliminate the loop over <code>charLimit</code> and loop over <code>response</code> instead. Using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> in this loop allows us to access the next element by index, in the case that we want to print it:</p>
<pre><code>for i, limitQuestion in enumerate(response, 1):
    limitNumber = limitQuestion[0]

    # use the `in` operator to check if `limitNumber` equals any
    # of the numbers in `charLimit`
    if limitNumber in charLimit:
        print(limitQuestion)

        # if this isn't the last element in the list, also
        # print the next one
        if i &lt; len(response):
            print(response[i])
</code></pre>
<p>If <code>charLimit</code> is very long, you should consider defining it as a <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> instead, because sets have faster membership tests than lists:</p>
<pre><code>charLimit = {101100,114502,124602}
</code></pre>
</div>
<span class="comment-copy">You can try <code>enumerate</code>, as already suggested; however, I wonder whether you should reconsider your data structures. It looks like the values in <code>charLimit</code>, <code>conditionalNextQ</code>, and <code>response</code> are some type of ID and that you are hunting through <code>response</code> to find a matching ID. If so, your code might be greatly simplified (and perhaps made faster) with more appropriate data structures -- for example, a dict where the data is keyed by those IDs.</span>
<span class="comment-copy">thanks @FMc this was the first approach, although there are instances in the data where there are multiple ID's contained within the 'master' ID, similar in fact to the nested list in python, but nested ID's. It got a bit messy, but I might revisit it :)</span>
<span class="comment-copy">that doesn't seem to work... i get only the results that match <code>charlimit</code> as before</span>
<span class="comment-copy">sorry, correction, i get IndexError: list index out of range</span>
<span class="comment-copy">Updated snippet. Can you try now?</span>
<span class="comment-copy">perfect, thank you @Rakesh</span>
