<div class="post-text" itemprop="text">
<p>I am looking for a quick way to type in a time and then python convert it into other timezones ( maybe up to 10 different timezones )</p>
<p>Sorry. I am not familar with time in python at all, if someone could put me in the right direction I would really appreciate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have found that the best approach is to convert the "moment" of interest to a utc-timezone-aware datetime object (in python, the timezone component is not required for <a href="https://docs.python.org/3/library/datetime.html#module-datetime" rel="noreferrer">datetime</a> objects).</p>
<p>Then you can use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="noreferrer">astimezone</a> to convert to the timezone of interest (<a href="https://stackoverflow.com/a/2090122/2697658">reference</a>).</p>
<pre><code>from datetime import datetime
import pytz

utcmoment_naive = datetime.utcnow()
utcmoment = utcmoment_naive.replace(tzinfo=pytz.utc)

# print "utcmoment_naive: {0}".format(utcmoment_naive) # python 2
print("utcmoment_naive: {0}".format(utcmoment_naive))
print("utcmoment:       {0}".format(utcmoment))

localFormat = "%Y-%m-%d %H:%M:%S"

timezones = ['America/Los_Angeles', 'Europe/Madrid', 'America/Puerto_Rico']

for tz in timezones:
    localDatetime = utcmoment.astimezone(pytz.timezone(tz))
    print(localDatetime.strftime(localFormat))

# utcmoment_naive: 2017-05-11 17:43:30.802644
# utcmoment:       2017-05-11 17:43:30.802644+00:00
# 2017-05-11 10:43:30
# 2017-05-11 19:43:30
# 2017-05-11 13:43:30
</code></pre>
<p>So, with the moment of interest in the local timezone (a time that <a href="https://stackoverflow.com/questions/10997577/python-timezone-conversion/18646797#comment40107516_18646797">exists</a>), you convert it to utc like this (<a href="https://stackoverflow.com/a/7065242/2697658">reference</a>).</p>
<pre><code>localmoment_naive = datetime.strptime('2013-09-06 14:05:10', localFormat)

localtimezone = pytz.timezone('Australia/Adelaide')

try:
    localmoment = localtimezone.localize(localmoment_naive, is_dst=None)
    print("Time exists")

    utcmoment = localmoment.astimezone(pytz.utc)

except pytz.exceptions.NonExistentTimeError as e:
    print("NonExistentTimeError")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://pytz.sourceforge.net/" rel="noreferrer">pytz</a></p>
<pre><code>from datetime import datetime
from pytz import timezone

fmt = "%Y-%m-%d %H:%M:%S %Z%z"
timezonelist = ['UTC','US/Pacific','Europe/Berlin']
for zone in timezonelist:

    now_time = datetime.now(timezone(zone))
    print now_time.strftime(fmt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert a time in one timezone to another timezone in Python, you could <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer">use <code>datetime.astimezone()</code></a>:</p>
<pre><code>time_in_new_timezone = time_in_old_timezone.astimezone(new_timezone)
</code></pre>
<p>Given <code>aware_dt</code> (a <code>datetime</code> object in some timezone), to convert it to other timezones and to print the times in a given time format:</p>
<pre><code>#!/usr/bin/env python3
import pytz  # $ pip install pytz

time_format = "%Y-%m-%d %H:%M:%S%z"
tzids = ['Asia/Shanghai', 'Europe/London', 'America/New_York']
for tz in map(pytz.timezone, tzids):
    time_in_tz = aware_dt.astimezone(tz)
    print(f"{time_in_tz:{time_format}}")
</code></pre>
<p><sup>If <code>f""</code> syntax is unavailable, you could replace it with <code>"".format(**vars())</code></sup></p>
<p>where you could set <code>aware_dt</code> from the current time in the local timezone:</p>
<pre><code>from datetime import datetime
import tzlocal  # $ pip install tzlocal

local_timezone = tzlocal.get_localzone()
aware_dt = datetime.now(local_timezone) # the current time
</code></pre>
<p>Or from the input time string in the local timezone:</p>
<pre><code>naive_dt = datetime.strptime(time_string, time_format)
aware_dt = local_timezone.localize(naive_dt, is_dst=None)
</code></pre>
<p>where <code>time_string</code> could look like: <code>'2016-11-19 02:21:42'</code>. It corresponds to <code>time_format = '%Y-%m-%d %H:%M:%S'</code>.</p>
<p><code>is_dst=None</code> forces an exception if the input time string corresponds to a non-existing or ambiguous local time such as during a DST transition. You could also pass <code>is_dst=False</code>, <code>is_dst=True</code>. See links with more details at <a href="https://stackoverflow.com/q/31977563/4279">Python: How do you convert datetime/timestamp from one timezone to another timezone?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For Python timezone conversions, I use the <a href="http://taaviburns.ca/presentations/what_you_need_to_know_about_datetimes/" rel="nofollow noreferrer">handy table</a> from the PyCon 2012 <a href="https://us.pycon.org/2012/schedule/presentation/255/" rel="nofollow noreferrer">presentation</a> by Taavi Burns.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please note: The first part of this answer is or version 1.x of pendulum. See below for a version 2.x answer.</p>
<p>I hope I'm not too late!</p>
<p>The <a href="https://pendulum.eustace.io/docs/" rel="nofollow noreferrer">pendulum</a> library excels at this and other date-time calculations.</p>
<pre><code>&gt;&gt;&gt; import pendulum
&gt;&gt;&gt; some_time_zones = ['Europe/Paris', 'Europe/Moscow', 'America/Toronto', 'UTC', 'Canada/Pacific', 'Asia/Macao']
&gt;&gt;&gt; heres_a_time = '1996-03-25 12:03 -0400'
&gt;&gt;&gt; pendulum_time = pendulum.datetime.strptime(heres_a_time, '%Y-%m-%d %H:%M %z')
&gt;&gt;&gt; for tz in some_time_zones:
...     tz, pendulum_time.astimezone(tz)
...     
('Europe/Paris', &lt;Pendulum [1996-03-25T17:03:00+01:00]&gt;)
('Europe/Moscow', &lt;Pendulum [1996-03-25T19:03:00+03:00]&gt;)
('America/Toronto', &lt;Pendulum [1996-03-25T11:03:00-05:00]&gt;)
('UTC', &lt;Pendulum [1996-03-25T16:03:00+00:00]&gt;)
('Canada/Pacific', &lt;Pendulum [1996-03-25T08:03:00-08:00]&gt;)
('Asia/Macao', &lt;Pendulum [1996-03-26T00:03:00+08:00]&gt;)
</code></pre>
<p><a href="https://stackoverflow.com/q/13866926/131187">Answer</a> lists the names of the time zones that may be used with pendulum. (They're the same as for pytz.)</p>
<p>For version 2:</p>
<ul>
<li><code>some_time_zones</code> is a list of the names of the time zones that might be used in a program</li>
<li><code>heres_a_time</code> is a sample time, complete with a time zone in the form '-0400'</li>
<li>I begin by converting the time to a pendulum time for subsequent processing</li>
<li>now I can show what this time is in each of the time zones in <code>show_time_zones</code></li>
</ul>
<p>...</p>
<pre><code>&gt;&gt;&gt; import pendulum
&gt;&gt;&gt; some_time_zones = ['Europe/Paris', 'Europe/Moscow', 'America/Toronto', 'UTC', 'Canada/Pacific', 'Asia/Macao']
&gt;&gt;&gt; heres_a_time = '1996-03-25 12:03 -0400'
&gt;&gt;&gt; pendulum_time = pendulum.from_format('1996-03-25 12:03 -0400', 'YYYY-MM-DD hh:mm ZZ')
&gt;&gt;&gt; for tz in some_time_zones:
...     tz, pendulum_time.in_tz(tz)
...     
('Europe/Paris', DateTime(1996, 3, 25, 17, 3, 0, tzinfo=Timezone('Europe/Paris')))
('Europe/Moscow', DateTime(1996, 3, 25, 19, 3, 0, tzinfo=Timezone('Europe/Moscow')))
('America/Toronto', DateTime(1996, 3, 25, 11, 3, 0, tzinfo=Timezone('America/Toronto')))
('UTC', DateTime(1996, 3, 25, 16, 3, 0, tzinfo=Timezone('UTC')))
('Canada/Pacific', DateTime(1996, 3, 25, 8, 3, 0, tzinfo=Timezone('Canada/Pacific')))
('Asia/Macao', DateTime(1996, 3, 26, 0, 3, 0, tzinfo=Timezone('Asia/Macao')))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
import pytz

def convert_datetime_timezone(dt, tz1, tz2):
    tz1 = pytz.timezone(tz1)
    tz2 = pytz.timezone(tz2)

    dt = datetime.datetime.strptime(dt,"%Y-%m-%d %H:%M:%S")
    dt = tz1.localize(dt)
    dt = dt.astimezone(tz2)
    dt = dt.strftime("%Y-%m-%d %H:%M:%S")

    return dt
</code></pre>
<p>-</p>
<ul>
<li><code>dt</code>: date time string</li>
<li><code>tz1</code>: initial time zone</li>
<li><code>tz2</code>: target time zone</li>
</ul>
<p>-</p>
<pre><code>&gt; convert_datetime_timezone("2017-05-13 14:56:32", "Europe/Berlin", "PST8PDT")
'2017-05-13 05:56:32'

&gt; convert_datetime_timezone("2017-05-13 14:56:32", "Europe/Berlin", "UTC")
'2017-05-13 12:56:32'
</code></pre>
<p>-</p>
<pre><code>&gt; pytz.all_timezones[0:10]
['Africa/Abidjan',
 'Africa/Accra',
 'Africa/Addis_Ababa',
 'Africa/Algiers',
 'Africa/Asmara',
 'Africa/Asmera',
 'Africa/Bamako',
 'Africa/Bangui',
 'Africa/Banjul',
 'Africa/Bissau']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.2+ <a href="https://github.com/andrewcooke/simple-date" rel="nofollow">simple-date</a> is a wrapper around pytz that tries to simplify things.</p>
<p>If you have a <code>time</code> then</p>
<pre><code>SimpleDate(time).convert(tz="...")
</code></pre>
<p>may do what you want.  But timezones are quite complex things, so it can get significantly more complicated - see the <a href="https://github.com/andrewcooke/simple-date" rel="nofollow">the docs</a>.</p>
</div>
<span class="comment-copy">beware, local time may be ambiguous and the given string might not correspond to any existing time e.g., due to DST transitions. Provide <code>localize(is_dst=None)</code> if you want to raise an exception in such cases.</span>
<span class="comment-copy">Thanks I edited the answer.</span>
<span class="comment-copy">Code updated (python 3, timezones).</span>
<span class="comment-copy">note: it prints <i>different</i> time moments in <i>different</i> timezones. OP asks about <b>the same</b> time moment in different timezones.</span>
<span class="comment-copy">@jfs No it doesn't - I just ran this and it printed <code>2018-07-12 13:46:17 UTC+0000</code>, <code>2018-07-12 06:46:17 PDT-0700</code>, and <code>2018-07-12 15:46:17 CEST+0200</code>, all of which represent the same instant in time.</span>
<span class="comment-copy">@MarkAmery: try to add microseconds to the <code>fmt</code> (<code>"%f"</code>) to see that the time instances are different.</span>
<span class="comment-copy">@jfs Ah, I misunderstood your comment! I thought you were asserting that the moments represented completely different moments in time (i.e. hours apart), not just that they were separated by the few microseconds between the <code>datetime.now(...)</code> calls.</span>
<span class="comment-copy">AttributeError: 'function' object has no attribute 'strptime'</span>
<span class="comment-copy">@SethConnell: Please see edit.</span>
<span class="comment-copy">Pendulum is amazing, but keep in mind the output might not be compatible with whatever you want to do next, for example Pandas dataframes.</span>
