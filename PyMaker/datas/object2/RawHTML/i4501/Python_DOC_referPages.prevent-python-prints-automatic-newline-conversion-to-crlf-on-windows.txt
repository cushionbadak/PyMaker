<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/34960955/print-lf-with-python-3-to-windows-stdout">Print LF with Python 3 to Windows stdout</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I'd like to pipe text with unix-like EOL (LF) from Python via Windows CMD (console). However, Python seems to automatically convert single newlines into Windows-style <a href="https://en.wikipedia.org/wiki/Newline" rel="nofollow noreferrer">end-of-line (EOL)</a> characters (i.e. <code>\r\n</code>, <code>&lt;CR&gt;&lt;LF&gt;</code>, <code>0D 0A</code>, <code>13 10</code>):</p>
<pre><code>#!python3
#coding=utf-8
import sys
print(sys.version)
print("one\ntwo")
# run as py t.py &gt; t.txt
</code></pre>
<p>results in </p>
<pre><code>3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)]
one
two
</code></pre>
<p>or in hexadecimal <code>... 6F 6E 65 <b>0D 0A</b> 74 77 6F <b>0D 0A</b></code></p>
<p>The second EOL is because
<a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code></a> defaults to <code>end='\n'</code>, but it also does the conversion.</p>
<p>There is no <code>newline</code> argument or property for print like there is for <code>open()</code>, so how can this be controlled?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>See this answer:</strong> <a href="https://stackoverflow.com/a/34997357/1619432">https://stackoverflow.com/a/34997357/1619432</a></p>
<hr/>
<p><a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code></a> usually writes to <a href="https://docs.python.org/3/library/sys.html#sys.stdout" rel="nofollow noreferrer"><code>sys.stdout</code></a>. The following are excerpts of the documentation, for non-interactive mode:</p>
<ul>
<li><blockquote>
<p>stdout is used for the output of print() </p>
</blockquote></li>
<li><blockquote>
<p>sys.stdout: File object used by the interpreter for standard ... output </p>
</blockquote></li>
<li><blockquote>
<p>These streams are regular text files like those returned by the open() function.</p>
</blockquote></li>
<li><blockquote>
<p>character encoding on Windows is ANSI</p>
</blockquote></li>
<li><blockquote>
<p>standard streams are ... block-buffered like regular text files.</p>
</blockquote></li>
<li><blockquote>
<p>Note<br/>
  To write or read binary data from/to the standard streams, use the
  underlying binary buffer object. For example, to write bytes to stdout, 
  use sys.stdout.buffer.write(b'abc').</p>
</blockquote></li>
</ul>
<p>Let's try this direct approach first:</p>
<pre><code>import sys
print("one\ntwo")
sys.stdout.write('three\nfour')
sys.stdout.buffer.write(b'five\nsix')
</code></pre>
<p>results in </p>
<pre><code>five\n
sixone\r\n
two\r\n
three\r\n
four
</code></pre>
<p>The buffer write seems to work as desired, although it's "messing" with the output order.</p>
<p>Flushing before writing to the buffer directly helps:</p>
<pre><code>import sys
print("one\ntwo")
sys.stdout.write('three\nfour')
sys.stdout.flush()
sys.stdout.buffer.write(b'five\nsix')
</code></pre>
<p>results in</p>
<pre><code>one\r\n
two\r\n
three\r\n
fourfive\n
six
</code></pre>
<p>But still it's not "fixing" print(). Back to the file objects / streams / text files (short info on <a href="https://docs.python.org/3/reference/datamodel.html#index-53" rel="nofollow noreferrer">IO objects in Python Data model</a>):</p>
<p><a href="https://docs.python.org/3/glossary.html#term-text-file" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-text-file</a></p>
<blockquote>
<p>A file object able to read and write str objects. Often, a text file actually accesses a byte-oriented datastream and handles the text encoding automatically. Examples of text files are files opened in text mode ('r' or 'w'), sys.stdin, sys.stdout, and instances of io.StringIO.</p>
</blockquote>
<p>So (how) can the sys.stdout <em>file</em> be reconfigured or reopened to control the newline behaviour? And what exactly is it?</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; type(sys.stdout)
&lt;class '_io.TextIOWrapper'&gt;
</code></pre>
<p>Docs: <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer">class io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False)</a>:</p>
<blockquote>
<p><strong>newline</strong> controls how line endings are handled. It can be None, '',
  '\n', '\r', and '\r\n'.<br/>
  It works as follows:<br/>
  When reading input from the stream, if newline is None, universal newlines mode is enabled. 
  Lines in the input can end in '\n', '\r', or '\r\n', and these are translated into '\n' before being returned to the caller.<br/>
  If it is '', universal newlines mode is enabled, but line endings are returned to the caller untranslated.<br/>
  If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.</p>
<p>When <strong>writing</strong> output to the stream, if newline is None, any '\n' characters written are <em>translated to the system default line separator</em>, <strong>os.linesep</strong>.<br/>
  If newline is '' or '\n', no translation takes place.<br/>
  If newline is any of the other legal values, any '\n' characters written are translated to the given string.</p>
</blockquote>
<p>Let's see:</p>
<pre><code>&gt;&gt;&gt; sys.stdout.newline = "\n"
&gt;&gt;&gt;
</code></pre>
<p>OK, and what about</p>
<pre><code>import sys
sys.stdout.newline = '\n'
print("one\ntwo")
</code></pre>
<p>Does not work:</p>
<pre><code>one\r\n
two\r\n
</code></pre>
<p>because the property does not exist:</p>
<pre><code>&gt;&gt;&gt; sys.stdout.newline
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: '_io.TextIOWrapper' object has no attribute 'newline'
</code></pre>
<p>Which I should have checked earlier .. </p>
<pre><code>&gt;&gt;&gt; vars(sys.stdout)
{'mode': 'w'}
</code></pre>
<p>So really, there's no <code>newline</code> attribute for us to redefine.</p>
<p>Any useful methods?</p>
<pre><code>&gt;&gt;&gt; dir(sys.stdout)
['_CHUNK_SIZE', '__class__', '__del__', '__delattr__', '__dict__', 
'__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', 
'__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', 
'__init__', '__init_subclass__', '__iter__', '__le__', '__lt__',
'__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', 
'__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 
'_checkClosed', '_checkReadable', '_checkSeekable', '_checkWritable', 
'_finalizing', 'buffer', 'close', 'closed', 'detach', 'encoding', 
'errors', 'fileno', 'flush', 'isatty', 'line_buffering', 'mode', 
'name', 'newlines', 'read', 'readable', 'readline', 'readlines',
'seek', 'seekable', 'tell', 'truncate', 'writable', 'write', 
'writelines']
</code></pre>
<p>Not really.</p>
<p>But we can at least replace the default interface to the buffer end specify the required newline character(s):</p>
<pre><code>import sys, io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, newline='\n' )
print("one\ntwo")
</code></pre>
<p>which finally results in </p>
<pre><code>one\n
two\n
</code></pre>
<p><s>To restore, just reassign <code>sys.stdout</code> to a copy you made. Or, apparently not recommended, use the internally kept <a href="https://docs.python.org/3/library/sys.html#sys.__stdout__" rel="nofollow noreferrer"><code>sys.__stdout__</code></a> to do that.</s></p>
<p><strong>Warning</strong>: See <a href="https://stackoverflow.com/questions/49709309/prevent-python-prints-automatic-newline-conversion-to-crlf-on-windows/49709310?noredirect=1#comment86436472_49709310"><code>eryksun</code>'s comment</a> below, this requires some care. Use his solution instead (link below):</p>
<hr/>
<p>It seems it might also be possible to reopen the file, see <a href="https://stackoverflow.com/questions/34447623/wrap-an-open-stream-with-io-textiowrapper">Wrap an open stream with io.TextIOWrapper</a> for inspiration, and this answer <a href="https://stackoverflow.com/a/34997357/1619432">https://stackoverflow.com/a/34997357/1619432</a> for the implementation.</p>
<hr/>
<p>If you want to take a closer look, check out the Python (CPython) sources:
<a href="https://github.com/python/cpython/blob/master/Modules/_io/textio.c" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Modules/_io/textio.c</a></p>
<hr/>
<p>There's also <a href="https://docs.python.org/3/library/os.html#os.linesep" rel="nofollow noreferrer">os.linesep</a>, let's see if it's really "\r\n" for Windows:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.linesep
'\r\n'
&gt;&gt;&gt; ",".join([f'0x{ord(c):X}' for c in os.linesep])
'0xD,0xA'
</code></pre>
<p>Could this be redefined?</p>
<pre><code>#!python3
#coding=utf-8
import sys, os
saved = os.linesep
os.linesep = '\n'
print(os.linesep)
print("one\ntwo")
os.linesep = saved
</code></pre>
<p>It can in the interactive mode, but apparently not otherwise:</p>
<pre><code>\r\n
\r\n
one\r\n
two\r\n
</code></pre>
<hr/>
</div>
<span class="comment-copy">See <a href="https://stackoverflow.com/q/34960955/132240">Print LF with Python 3 to Windows stdout</a>.</span>
<span class="comment-copy">@StevenRumbalski Damn, thanks.</span>
<span class="comment-copy">No problem. I advise not deleting the question.  Your question will help people find the other one.</span>
<span class="comment-copy">@StevenRumbalski Wouldn't dream of it, this took forever to compile - only "closing". The previous answer is much more concise and provides background information.</span>
<span class="comment-copy">Take care with restoring <code>sys.stdout</code>. By default, deallocating the new <code>TextIOWrapper</code> will close the buffer and thus usually the stdout file descriptor. Define it as <code>new_stdout = io.TextIOWrapper(sys.stdout.buffer, newline='\n', encoding=sys.stdout.encoding, errors=sys.stdout.errors);</code> <code>old_stdout, sys.stdout = sys.stdout, new_stdout</code>. Then to reassign use <code>sys.stdout = old_stdout</code>, and before deallocating the new one, call <code>new_stdout.detach()</code>, so it won't close the underlying buffer. Or, if you have an fd, you can <code>open</code> it, either with <code>closefd=False</code> or a <code>dup</code> of the fd.</span>
<span class="comment-copy">@eryksun Thanks for the warning, I'll add a link to your comment and will probably just use your <code>open</code> solution instead.</span>
