<div class="post-text" itemprop="text">
<p>I'm trying to create functions inside of a loop:</p>
<pre><code>functions = []

for i in range(3):
    def f():
        return i

    # alternatively: f = lambda: i

    functions.append(f)
</code></pre>
<p>The problem is that all functions end up being the same. Instead of returning 0, 1, and 2, all three functions return 2:</p>
<pre><code>print([f() for f in functions])
# expected output: [0, 1, 2]
# actual output:   [2, 2, 2]
</code></pre>
<p>Why is this happening, and what should I do to get 3 different functions that output 0, 1, and 2 respectively?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're running into a problem with <em>late binding</em> -- each function looks up <code>i</code> as late as possible (thus, when called after the end of the loop, <code>i</code> will be set to <code>2</code>).  </p>
<p>Easily fixed by forcing early binding: change <code>def f():</code> to <code>def f(i=i):</code> like this:</p>
<pre><code>def f(i=i):
    return i
</code></pre>
<p>Default values (the right-hand <code>i</code> in <code>i=i</code> is a default value for argument name <code>i</code>, which is the left-hand <code>i</code> in <code>i=i</code>) are looked up at <code>def</code> time, not at <code>call</code> time, so essentially they're a way to specifically looking for early binding.</p>
<p>If you're worried about <code>f</code> getting an extra argument (and thus potentially being called erroneously), there's a more sophisticated way which involved using a closure as a "function factory":</p>
<pre><code>def make_f(i):
    def f():
        return i
    return f
</code></pre>
<p>and in your loop use <code>f = make_f(i)</code> instead of the <code>def</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<h2>The Explanation</h2>
<p>The issue here is that the value of <code>i</code> is not saved when the function <code>f</code> is created. Rather, <code>f</code> looks up the value of <code>i</code> when it is <em>called</em>.</p>
<p>If you think about it, this behavior makes perfect sense. In fact, it's the only reasonable way functions can work. Imagine you have a function that accesses a global variable, like this:</p>
<pre><code>global_var = 'foo'

def my_function():
    print(global_var)

global_var = 'bar'
my_function()
</code></pre>
<p>When you read this code, you would - of course - expect it to print "bar", not "foo", because the value of <code>global_var</code> has changed after the function was declared. The same thing is happening in your own code: By the time you call <code>f</code>, the value of <code>i</code> has changed and been set to <code>2</code>.</p>
<h2>The Solution</h2>
<p>There are actually many ways to solve this problem. Here are a few options:</p>
<ul>
<li><h3>Force early binding of <code>i</code> by using it as a default argument</h3>
<p>Unlike local variables (like <code>i</code>), default arguments are evaluated immediately when the function is defined:</p>
<pre><code>for i in range(3):
    def f(i=i):  # &lt;- right here is the important bit
        return i

    functions.append(f)
</code></pre>
<p>To give a little bit of insight into how/why this works: A function's default arguments are stored as an attribute of the function; thus the <em>current</em> value of <code>i</code> is snapshotted and saved.</p>
<pre><code>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; def f(i=i):
...     pass
&gt;&gt;&gt; f.__defaults__  # this is where the current value of i is stored
(0,)
</code></pre></li>
<li><h3>Use a function factory to capture the current value of <code>i</code> in a closure</h3>
<p>The root of your problem is that <code>i</code> is a variable that can change. We can work around this problem by creating <em>another</em> variable that is guaranteed to never change - and the easiest way to do this is a <em>closure</em>:</p>
<pre><code>def f_factory(i):
    def f():
        return i  # i is now a *local* variable of f_factory and can't ever change
    return f

for i in range(3):           
    f = f_factory(i)
    functions.append(f)
</code></pre></li>
<li><h3>Use <code>functools.partial</code> to bind the current value of <code>i</code> to <code>f</code></h3>
<p><a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="noreferrer"><code>functools.partial</code></a> lets you attach arguments to an existing function. In a way, it too is a kind of function factory.</p>
<pre><code>import functools

def f(i):
    return i

for i in range(3):    
    f_with_i = functools.partial(f, i)  # important: use a different variable than "f"
    functions.append(f_with_i)
</code></pre></li>
</ul>
</div>
<span class="comment-copy">as a reminder to myself: <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#late-binding-closures" rel="nofollow noreferrer">docs.python-guide.org/en/latest/writing/gotchas/â€¦</a></span>
<span class="comment-copy">how do you know how to fix these things?</span>
<span class="comment-copy">@alwbtc it's mostly just experience, most people have faced these things on their own at some point.</span>
