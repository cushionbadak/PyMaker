<div class="post-text" itemprop="text">
<p>I recently came across this way of slicing a list in Python. I've never seen this one before, so I would like to understand this clearly. </p>
<p>I have a list <code>["Peter", "James", "Mark"]</code> and if I slice it using the boolean value <code>False</code> it returns <code>Peter</code> and if I slice using <code>True</code> it returns <code>James</code>, as given below</p>
<ul>
<li><code>["Peter", "James", "Mark"][False] =&gt; Peter</code></li>
<li><code>["Peter", "James", "Mark"][True] =&gt; James</code></li>
</ul>
<p>I would like to know what happens here and what is this method called as? </p>
</div>
<div class="post-text" itemprop="text">
<p>The datamodel hook here is the <a href="https://www.python.org/dev/peps/pep-0357/" rel="nofollow noreferrer"><code>__index__</code></a> magic method:</p>
<pre><code>&gt;&gt;&gt; True.__index__()
1
&gt;&gt;&gt; False.__index__()
0
</code></pre>
<p>The value returned by on obj's <code>__index__</code> is used when accessing with <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">subscripting</a>, allowing arbitrary objects to be used with slices:</p>
<pre><code>x[obj]
</code></pre>
<p>This is somewhat independent of the fact that <code>bool</code> is a subclass of <code>int</code>!  You may achieve the same with any object.</p>
<pre><code>&gt;&gt;&gt; class A:
...     def __index__(self):
...         return 1
...     
&gt;&gt;&gt; 'ab'[A()]
'b'
</code></pre>
<p>Whether <code>__index__</code> is resolved for <code>int</code> subclasses depends on implementation detail.</p>
<p>CPython 3.7.1:</p>
<pre><code>&gt;&gt;&gt; class MyInt(int):
...     def __index__(self):
...         return 1
... 
&gt;&gt;&gt; '01'[MyInt(0)]
'0'
</code></pre>
<p>PyPy 5.0.1:</p>
<pre><code>&gt;&gt;&gt;&gt; class MyInt(int):
....     def __index__(self):
....         return 1
....         
&gt;&gt;&gt;&gt; '01'[MyInt(0)]
'1'
</code></pre>
<p>PyPy behaves correctly according to the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python datamodel</a>.  Looks like CPython is taking a shortcut / performance optimization.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>bool</code> class is derived from of <code>int</code>
Hence <code>True=1</code> and <code>False=0</code></p>
<p><code>print (True + True)</code> will give an output <code>2</code></p>
<p>So on a list <code>['peter', 'john', 'abhi'][True]</code> returns 2nd element of the list i.e. <code>john</code></p>
</div>
<span class="comment-copy">@xg.plt.py, I was wrong. Have a look at wim's answer below.</span>
<span class="comment-copy">A <code>MyInt</code> is already an int, so Python doesn't actually need to perform a conversion to int. I'd say both results are consistent with the data model.</span>
