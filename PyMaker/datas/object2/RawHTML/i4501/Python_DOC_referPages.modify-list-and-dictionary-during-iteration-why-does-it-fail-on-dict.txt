<div class="post-text" itemprop="text">
<p>Let's consider this code which iterates over a <strong>list</strong> while removing an item each iteration:</p>
<pre><code>x = list(range(5))

for i in x:
    print(i)
    x.pop()
</code></pre>
<p>It will print <code>0, 1, 2</code>. Only the first three elements are printed since the last two elements in the list were removed by the first two iterations.</p>
<p>But if you try something similar on a <strong>dict</strong>:</p>
<pre><code>y = {i: i for i in range(5)}

for i in y:
    print(i)
    y.pop(i)
</code></pre>
<p>It will print <code>0</code>, then raise <code>RuntimeError: dictionary changed size during iteration</code>, because we are removing a key from the dictionary while iterating over it.</p>
<p>Of course, modifying a list during iteration is bad. But why is a <code>RuntimeError</code> not raised as in the case of dictionary? Is there any good reason for this behaviour?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the reason is simple. <code>list</code>s are ordered, <code>dict</code>s (prior to Python 3.6/3.7) and <code>set</code>s are not. So modifying a <code>list</code>s as you iterate may be not advised as best practise, but it leads to <em>consistent, reproducible, and guaranteed</em> behaviour.</p>
<p>You could use this, for example let's say you wanted to split a <code>list</code> with an even number of elements in half and reverse the 2nd half:</p>
<pre><code>&gt;&gt;&gt; lst = [0,1,2,3]
&gt;&gt;&gt; lst2 = [lst.pop() for _ in lst]
&gt;&gt;&gt; lst, lst2
([0, 1], [3, 2])
</code></pre>
<p>Of course, there are much better and more intuitive ways to perform this operation, but the point is it works.</p>
<p>By contrast, the behaviour for <code>dict</code>s and <code>set</code>s is totally implementation specific since the iteration order may change depending on the hashing.</p>
<p>You get a <code>RunTimeError</code> with <code>collections.OrderedDict</code>, presumably for consistency with the <code>dict</code> behaviour. I don't think any change in the <code>dict</code> behaviour is likely after Python 3.6 (where <code>dict</code>s are guaranteed to maintain insertion ordered) since it would break backward compatibility for no real use cases.</p>
<p>Note that <code>collections.deque</code> also raises a <code>RuntimeError</code> in this case, despite being ordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>It wouldn't have been possible to add such a check to lists without breaking backward compatibility. For dicts, there was no such issue.</p>
<p>In the old, pre-iterators design, <code>for</code> loops worked by calling the sequence element retrieval hook with increasing integer indices until it raised IndexError. (I would say <code>__getitem__</code>, but this was back before type/class unification, so C types didn't have <code>__getitem__</code>.) <code>len</code> isn't even involved in this design, and there is nowhere to check for modification.</p>
<p>When iterators were introduced, the dict iterator had the size change check from <a href="https://github.com/python/cpython/commit/59d1d2b434e8cf79e8b1321f148254c68f56c1f7" rel="noreferrer">the very first commit that introduced iterators to the language</a>. Dicts weren't iterable at all before that, so there was no backward compatibility to break. Lists still went through the old iteration protocol, though.</p>
<p><a href="https://github.com/python/cpython/commit/14bd6de0ec6468487598f4ad4c14aa0a2742e641" rel="noreferrer">When <code>list.__iter__</code> was introduced</a>, it was purely a speed optimization, not intended to be a behavioral change, and adding a modification check would have broken backward compatibility with existing code that relied on the old behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionary uses insertion order with an additional level of indirection, which causes hiccups when iterating while keys are removed and re-inserted, thereby changing the order and internal pointers of the dictionary.</p>
<p>And this problem is not fixed by iterating <code>d.keys()</code> instead of <code>d</code>, since in Python 3, <code>d.keys()</code> returns a dynamic view of the keys in the <code>dict</code> which results in the same problem. Instead, iterate over <code>list(d)</code> as this will produce a list from the keys of the dictionary that will not change during iteration</p>
</div>
<span class="comment-copy">if it could be implemented for lists, that would certainly be a life-saver.</span>
<span class="comment-copy">This is something I’ve been curious about for a while too. The behaviour is documented but not justified at <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#for</a>. Might just be for <i>*handwave*</i> performance reasons? Or a conservative choice from one point of view – allowing the operation because it can be allowed, whereas it would never make sense on dicts pre-3.6 given that they were unordered.</span>
<span class="comment-copy">I could think of cases where you would want to add to a list while iterating over it, somewhat like a queue.</span>
<span class="comment-copy">looking at <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c" rel="nofollow noreferrer">dict source code</a> iterating on keys doesn't seem trivial, like <i>at all</i>.</span>
<span class="comment-copy">It might also have something to do with order. If you append to a list while iterating over it it's clear where the inserted item goes and when its being iterated over. A standard dictionary doesn't have an order.</span>
<span class="comment-copy">note that the exception is still here with python 3.6</span>
<span class="comment-copy">@Jean-FrançoisFabre yes, and I don't think that will change, added a few more thoughts into my answer</span>
<span class="comment-copy">Interesting, a learnt something as I often do from your answers, but would you agree with my answer also about the ordered nature of the structures being important or not?</span>
<span class="comment-copy">@Chris_Rands: Well, it definitely makes list modification during iteration a lot more predictable than what can happen with dicts, but the behavior is still weird and not very useful. It's also inefficient or impossible to replicate the same behavior with other ordered data structures that don't support random access by index. I wouldn't consider the ordering to be a convincing reason for lists to support modification during iteration.</span>
<span class="comment-copy">Thanks, I guess the followup question is, why did't they take the opportunity to change this when introducing Python 3 (where breaking backward-compatibility would have been okay)?</span>
<span class="comment-copy">@Chris_Rands: I don't have mailing list discussions to cite or anything, so I can only offer generic speculation: probably there was no one to push for it and do the work, or they tried it and decided the performance hit wasn't worth it.</span>
