<div class="post-text" itemprop="text">
<p>Positional parameters with <code>nargs='+'</code> or <code>nargs=&lt;integer&gt;</code> are required, meaning that <code>argparse</code> gives an error if the parameter is not specified at least once. However, no error is given if the user calls the program with the <code>-h|--help</code> option, regardless of whether the positional parameters were specified.</p>
<p><strong>How can I implement custom options like <code>-h</code> that do not require positional parameters to be set, while still requiring positional parameters for all other options?</strong></p>
<p>For example, if let's say my program has the following (or similar) usage text:</p>
<pre><code>usage: PROG [-h] [-o] [-u] positional
</code></pre>
<p>How can I implement the following behaviour:</p>
<ul>
<li>calling <code>PROG</code> with no options and no positionals is an error</li>
<li>calling <code>PROG</code> with <code>-u</code> and no positionals is an error</li>
<li>calling <code>PROG</code> with only positionals is allowed</li>
<li>calling <code>PROG</code> with <code>-h</code> or <code>-o</code> is allowed regardless of whatever else is specified</li>
</ul>
<h1>My code</h1>
<p>This meets all requirements except the last one, namely <code>-o</code> still requires the positional parameter to be specified.</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

parser.add_argument('positional', nargs=1)
parser.add_argument('-o', action='store_true')
parser.add_argument('-u', action='store_true')

args = parser.parse_args()

print(args)
</code></pre>
<p>Does <code>argparse</code> have a built-in way to say that <code>positional</code> is not required <strong>iff</strong> <code>-o</code> is specified, or must this behaviour be implemented manually?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Manual methods</h1>
<p>Set <code>nargs='?'</code> or <code>nargs='*'</code> for the positional parameter (i.e. make it optional), and then add the following lines immediately after <code>args = parser.parse_args()</code>:</p>
<pre><code>if not args.o and args.positional is None:
    parser.error("the following arguments are required: positional")
</code></pre>
<p>Or add these lines, courtesy of <a href="https://stackoverflow.com/a/42656974/4421959">this answer</a>:</p>
<pre><code>if len(sys.argv) == 1:
    # display help message when no args are passed.
    parser.print_help()
    sys.exit(1)
</code></pre>
<p>This simply prints the help message if no options or positional parameters were specified. This behaviour is consistent with many command line programs, e.g. <code>git</code>.</p>
<p>Of course, making <code>positional</code> optional will affect the usage message:</p>
<pre><code>usage: PROG [-h] [-o] [-u] [positional]
</code></pre>
<p>If you really don't want this to happen you can override the usage method like this:</p>
<pre><code>parser = argparse.ArgumentParser(usage="%(prog)s [-h] [-o] [-u] positional")
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/argparse.html#mutual-exclusion" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#mutual-exclusion</a> works with one positional (? or *).  For fancier interactions you'll need to do your own testing after parsing.  Before imposing complex requirements on your users, think about how you'll explain them.  Ideally the single <code>usage</code> line should encode all such requirements.</span>
<span class="comment-copy">When using <code>nargs='?'</code> or '*' for positionals, it's a good idea to specify a <code>default</code> parameter.</span>
<span class="comment-copy">Consider making '-u' a plain <code>store</code>, taking a value.  That could simplify the requirements.</span>
