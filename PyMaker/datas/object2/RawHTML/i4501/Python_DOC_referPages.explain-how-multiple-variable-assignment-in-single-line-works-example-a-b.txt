<div class="post-text" itemprop="text">
<p>Say I have this Python code</p>
<pre><code>def fib2(n):   # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while b &lt; n:
        result.append(b)
        a, b = b, a+b
    return result
</code></pre>
<p>For <code>n=1000</code> this prints:</p>
<pre><code>1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
</code></pre>
<p>But I don't understand why it's <code>1 1 2 3</code>.</p>
<p>The issue is with this line:</p>
<pre><code>a, b = b, a+b
</code></pre>
<p>What is the order of execution? 
The two options I see are:</p>
<p><strong>1</strong>:</p>
<pre><code>a = b
b = a+b
</code></pre>
<p><strong>2</strong>:</p>
<pre><code>b = a+b
a = b
</code></pre>
<p>But neither gives me the correct result when I try it manually.
What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>None of the two options you shared actually describe the working of:</p>
<pre><code>a, b = b, a+b
</code></pre>
<p>Above code assigns <code>a</code> with the value of <code>b</code>. And <code>b</code> with the older value of <code>a+b</code> (i.e. in <code>a+b</code> the older value of <code>a</code>). You may consider it as an equivalent of:</p>
<pre><code>&gt;&gt;&gt; temp_a, temp_b = a, b
&gt;&gt;&gt; a = temp_b
&gt;&gt;&gt; b = temp_a + temp_b
</code></pre>
<p><strong>Example:</strong> Dual variable assignment in one line:</p>
<pre><code>&gt;&gt;&gt; a, b = 3, 5
&gt;&gt;&gt; a, b = b, a+b
&gt;&gt;&gt; a
5
&gt;&gt;&gt; b
8
</code></pre>
<p>Equivalent Explicit Logic:</p>
<pre><code>&gt;&gt;&gt; a, b = 3, 5
&gt;&gt;&gt; temp_a, temp_b = a, b
&gt;&gt;&gt; a = temp_b
&gt;&gt;&gt; b = temp_a + temp_b
&gt;&gt;&gt; a
5
&gt;&gt;&gt; b
8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The order of operations in <code>a, b = b, a+b</code> is that the tuple <code>(b, a+b)</code> is constructed, and then that tuple is assigned to the variables <code>(a, b)</code>.  In other words, the right side of the assignment is entirely evaluated before the left side.</p>
<p>(Actually, starting with Python 2.6, no tuple is actually constructed in cases like this with up to 3 variables - a more efficient series of bytecode operations gets substituted.  But this is, by design, not a change that has any observable differences.)</p>
</div>
<div class="post-text" itemprop="text">
<p>It's python standard way to swap two variables, Here is a working example to clear your doubt,</p>
<blockquote>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while
    evaluating an assignment, the right-hand side is evaluated before the
    left-hand side.</p>
</blockquote>
<p><a href="http://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">http://docs.python.org/3/reference/expressions.html#evaluation-order</a></p>
</blockquote>
<pre><code>a=[1,2,3,4,5]

for i,j in enumerate(a):
    if i==1:
        a[i-1],a[i]=a[i],a[i-1]

print(a)
</code></pre>
<p>output:</p>
<pre><code>[1, 2, 3, 4, 5]
</code></pre>
<p>For more info , <a href="https://www.programiz.com/python-programming/examples/swap-variables" rel="nofollow noreferrer">read this tutorial</a> </p>
</div>
<span class="comment-copy">"But I don't understand why it's <code>1 1 2 3</code>" - ummm, that's the Fibonacci sequence, what's the problem?</span>
<span class="comment-copy">I know it's Fibonacci. I know this is the answer. I don't understand how the code does it due to the assignment line I mentioned.</span>
<span class="comment-copy">Thanks. Where does the tutorial of Python explain this? This is not trivial</span>
