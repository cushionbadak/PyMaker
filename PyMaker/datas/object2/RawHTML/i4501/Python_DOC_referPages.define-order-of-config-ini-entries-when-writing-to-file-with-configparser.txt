<div class="post-text" itemprop="text">
<p>I'm using the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">Python configparser</a> to generate <code>config.ini</code> files to store my scripts configuration. The config is generated by code, but the point of the file is, to have an external way to change the programmatically generated config at later stages. So the file needs to be well readable and config options should be easy to find. The sections in configparser are a nice way to ensure that, however within a section, the entries seem to be ordered randomly. For example this code:</p>
<pre><code>import configparser
config = configparser.ConfigParser()

config['DEFAULT'] = {
    'shuffle': 'True',
    'augment': 'True',
    # [... some other options ...] 
    'data_layer_type' : 'hdf5',     
    'shape_img' : '[1024, 1024, 4]',    
    'shape_label' : '[1024, 1024, 1]', 
    'shape_weights' : '[1024, 1024, 1]' 
}

with open('config.ini', 'w') as configfile:
    config.write(configfile)
</code></pre>
<p>generates a <code>config.ini</code>-File with the order:</p>
<pre class="lang-none prettyprint-override"><code>[DEFAULT]
shape_weights = [1024, 1024, 1]
# [... some of the other options ...] 
shuffle = True
augment = True
data_layer_type = hdf5
# [... some of the other options ...] 
shape_img = [1024, 1024, 4]
# [... some of the other options ...] 
shape_label = [1024, 1024, 1]
</code></pre>
<p>i.e. the entries are neither in alphabetic nor in any other recognizable order. But I want order, e.g. the shape options all in the same place and not distributed for the user to browse...</p>
<p><a href="https://stackoverflow.com/questions/1134071/keep-configparser-output-files-sorted">Here</a> it is stated that the unordered behavior was fixed in Python 3.1 to use ordered dicts by default, but I am using Python 3.5.2 and get unordered entries. Is there a flag I need to set or a way to sort the dict so that it will result in (at least) alphabetically sorted entries?</p>
<p><strong>Is there a way to define order of the entries when programmatically generating the <code>config.ini</code> with the configparser?</strong> (Python 3.5)</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is not that <code>configparser</code> isn't using <code>OrderedDict</code>s internally, it's that you're making an unordered literal and assigning that.</p>
<p>Notice how this is not ordered:</p>
<pre><code>&gt;&gt;&gt; x = {
...     'shuffle': 'True',
...     'augment': 'True',
...     # [... some other options ...] 
...     'data_layer_type' : 'hdf5',     
...     'shape_img' : '[1024, 1024, 4]',    
...     'shape_label' : '[1024, 1024, 1]', 
...     'shape_weights' : '[1024, 1024, 1]' 
... }
&gt;&gt;&gt; for k in x:
...     print(k)
... 
shuffle
augment
shape_img
shape_label
shape_weights
data_layer_type
</code></pre>
<p>(This changes as an implementation detail in python3.6 as part of a "small dicts" optimization (all dicts become ordered) -- likely to be standardized as part of python3.7 due to convenience)</p>
<p>The fix here is to make sure you're assigning <code>OrderedDict</code>s all the way through:</p>
<pre><code>config['DEFAULT'] = collections.OrderedDict((
    ('shuffle', 'True'),
    ('augment', 'True'),
    # [... some other options ...] 
    ('data_layer_type', 'hdf5'),     
    ('shape_img', '[1024, 1024, 4]'),    
    ('shape_label', '[1024, 1024, 1]'), 
    ('shape_weights', '[1024, 1024, 1]'), 
))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The configparser seems to use OrderedDicts by default (since Python 2.7 / 3.1), which makes <code>ConfigParser(dict_type=OrderedDict)</code> obsolete. However this doesn't order entries by default, one still has to do that manually (at least in my case).</p>
<p>I found code to do that <a href="https://stackoverflow.com/a/41243181/6409572">here</a> and added ordering defaults as well:</p>
<pre><code>import configparser
from collections import OrderedDict

# [...] define your config sections and set values here

#Order the content of DEFAULT section alphabetically
config._defaults = OrderedDict(sorted(config._defaults.items(), key=lambda t: t[0]))

#Order the content of each section alphabetically
for section in config._sections:
    config._sections[section] = OrderedDict(sorted(config._sections[section].items(), key=lambda t: t[0]))

# Order all sections alphabetically
config._sections = OrderedDict(sorted(config._sections.items(), key=lambda t: t[0] ))
</code></pre>
</div>
<span class="comment-copy">try using a <code>collections.OrderedDict</code></span>
<span class="comment-copy">I did: <code>from collections import OrderedDict</code> and then <code>config = configparser.ConfigParser(dict_type=OrderedDict)</code>, but that didn't help. The output is still unordered (and also different each time running the code).</span>
<span class="comment-copy">your problem is the dict you're assigning.  a dictionary literal is unordered (in cpython3.5 and below).  You want <code>config['DEFAULT'] = collections.OrderedDict(&lt;&lt;&lt;iterable of tuples&gt;&gt;&gt;)</code></span>
<span class="comment-copy">aye, that makes sense - so the problem is that I'm actually assigning "unordered" dicts to ordered dicts when doing <code>config['DEFAULT'] = { ... }</code>. you want to make that into an answer that I can accept?</span>
