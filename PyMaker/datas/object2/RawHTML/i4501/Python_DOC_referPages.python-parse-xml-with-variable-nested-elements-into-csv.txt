<div class="post-text" itemprop="text">
<p>Desperately need help. I am a beginner to Python and have tried for days (and nights) to do this with no success. Have large xml file which has elements (ie. accounts) that has subelements (ie. attributes) with variable sub-sub-elements (ie. attributeValue). Since the sub-sub-element is variable I don't know how to get it to drill down as far as it needs to pickup everything and put it into .csv.
So per account, there could be many  records.  I want a row with the account id, followed by the attribute name, then attribute value.  One account could have many rows if they have many attributes.</p>
<p>Any help you can provide is much appreciated! :) </p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;rbacx&gt;
  &lt;namespace namespaceName="ABC RSS : xxxxxxx" namespaceShortName="RSS" /&gt;
  &lt;attributeValues /&gt;
  &lt;accounts&gt;
    &lt;account id="AAGALY2"&gt;
      &lt;name&gt;AAGALY2&lt;/name&gt;
      &lt;endPoint&gt;ABCD&lt;/endPoint&gt;
      &lt;domain&gt;ABCD&lt;/domain&gt;
      &lt;comments /&gt;
      &lt;attributes&gt;  ### one account can have many attribute records
        &lt;attribute name="appUserName"&gt;
          &lt;attributeValues&gt;
            &lt;attributeValue&gt;
              &lt;value&gt;&lt;![CDATA[A, Agglya]]&gt;&lt;/value&gt;
            &lt;/attributeValue&gt;
          &lt;/attributeValues&gt;
        &lt;/attribute&gt;
        &lt;attribute name="costCentre"&gt;
          &lt;attributeValues&gt;
            &lt;attributeValue&gt;
              &lt;value&gt;&lt;![CDATA[6734]]&gt;&lt;/value&gt;
            &lt;/attributeValue&gt;
          &lt;/attributeValues&gt;
        &lt;/attribute&gt;
        &lt;attribute name="App ID"&gt;
          &lt;attributeValues&gt;
            &lt;attributeValue&gt;
              &lt;value&gt;&lt;![CDATA[AAGALY2]]&gt;&lt;/value&gt;
            &lt;/attributeValue&gt;
          &lt;/attributeValues&gt;
        &lt;/attribute&gt;
        &lt;attribute name="Last Access Date"&gt;
          &lt;attributeValues&gt;
            &lt;attributeValue&gt;
              &lt;value&gt;&lt;![CDATA[00000000]]&gt;&lt;/value&gt;

etc......
</code></pre>
<p>Would like csv to look like this:</p>
<pre><code>AcctName   Endpoint     Domain     AttribName     AttribValue
AAGALY2     ABCD        ABCD       appUserName    A, Agalya
AAGALY2     ABCD        ABCD       CostCentre     333333
AAGALY2     ABCD        ABCD       App ID         AAGALY2
AAGALY2     ABCD        ABCD       Jobtemplate    A12-can read
JSMITH1     EFG         ABCD       appUserName    J, Smith
JSMITH1     ABCD        ABCD       CostCentre     12345
JSMITH1     ABCD        ABCD       Jobtemplate    A22-perm to write
ZZMITH3     EFG         GHI        appUserName    Z, Zmith
ZZMITH3     EFG         GHI        CostCentre     3456
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have found <a href="https://pypi.python.org/pypi/xmltodict" rel="nofollow noreferrer">xmltodict</a> to be a really simple way to get through xml parsing if xml etree isn't helping.</p>
<p>So what your code may look like:</p>
<pre><code>import xmltodict
import csv

xmldict = xmltodict.parse(yourxml)

f = csv.writer(open('yourcsv.csv', "w"))

#write field names to file keys of the dict, or you can specify the ones you outlined in your output eg.
f.writerow(xmldict.keys())

#write the contents
for key in xmldict:
    f.writerow(key['attrs'], key['attrs'] etc. etc.)
</code></pre>
<p>You will obviously have to map based on the nesting of your xml and access the 'attrs' you want, but it should be quite straight forward through the dict structure. Hope this helps!</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer"><code>xml.etree.ElementTree</code></a>. It's well documented and has many examples. Good luck</span>
<span class="comment-copy">I tried the code but wasn't able to install the xmltodict.  Kept getting error message.  After some more research, found the "getiterate()" which worked really well.  It walks through the whole structure. Thanks for your help.</span>
