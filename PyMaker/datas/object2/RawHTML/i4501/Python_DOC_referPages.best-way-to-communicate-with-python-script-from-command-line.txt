<div class="post-text" itemprop="text">
<p>I apologize if this is a duplicate but my search terms didn't find me what I was looking for. </p>
<p>I only ever 'kill' my python script using its linux process id.</p>
<p>This has served me well but now I need to pickle certain things right before terminating. </p>
<p>What is the best practice for communicating with a running Python script from the linux command line? Is there a library I should know about?</p>
<p>Example action would be sending a terminate command to the running script, but also can see uses in the near future for modifying config variables etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to install signal handlers: <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">https://docs.python.org/3/library/signal.html</a>, for example, for <code>SIGHUP</code> (the hang up signal)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>kill</code> command in linux/unix sends signal to the process and process handles signal (except <code>SIGSTP</code> and <code>SIGKILL</code>). So by saying killing process you are just sending <code>SIGKILL</code> signal. </p>
<p>So for better terminating the script you should use other signal (for example <code>SIGINT</code> this acts like pressing <kbd>CTRL</kbd>+<kbd>C</kbd> in terminal) and handling this signal by assigning signal handler in your script. For more info about signal handlers use <a href="https://docs.python.org/2/library/signal.html" rel="nofollow noreferrer">this link</a>.</p>
<p>By assigning signal handlers you can ignore signal or use your own custom action like: clean up process and exit or something else.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no single best way. Depending on your requirements, you might choose between</p>
<ul>
<li>Signals. A single signal can communicate a few bits of information (with one signal, one bit; with two signals, two bits, because you can choose which one yon send, etc) and it's one-way; but it's reasonably real-time and asynchronous, so excellent for quick and easy one-way communications, perhaps as out-of-band information in addition to, or on top of, something more complex.</li>
<li>Shared memory is quick and efficient two-way communications but nontrivial to use in practice, and obviously constrained to processes running on the same host.</li>
<li>Sockets are very versatile and reasonably efficient for communication over a network, and reasonable for moderate amounts of data even on the same host.</li>
</ul>
<p>This is pretty U*x-centric; Windows programmers tend to use threading and thus shared memory IPC a lot more. </p>
</div>
<span class="comment-copy">What exactly have you tried already ?</span>
<span class="comment-copy">I have found results suggesting the Sockets module but this seems like it would involve quite a few lines of code.</span>
<span class="comment-copy">Basic sockets is just a few lines of code for a simple client but the server side or p2p will be slightly more involved, yes. If you can use an existing server for some simple existing protocol (HTTP is popular because it's popular [sic]) you could build something fairly sophisticated with a small amount of new code.</span>
