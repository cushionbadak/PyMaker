<div class="post-text" itemprop="text">
<p>I haven't done OOP in Python for a while, so I was doing a quick review of a few features that I'd forgotten how to use. When I arrived at name mangling in the Python Tutorial (<a href="https://docs.python.org/3/tutorial/classes.html#private-variables-and-class-local-references" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#private-variables-and-class-local-references</a>), I copied the example so I could play around with it, and it didn't work! I went over it again to make sure I hadn't entered any typos, and then copied and pasted it, but it told me I was passing the wrong number of arguments. I've either made an incredibly stupid mistake or something bizarre has happened. Does anyone have insight into why this happened? I'm using the latest version: 3.6.5.</p>
<p>Just so you can verify I entered everything correctly, here's my attempt to name mangle:</p>
<pre><code>class Mapping:
    def __init__(self, iterable):
        self.items_list = []
        self.__update(iterable)

    def update(self, iterable):
        for item in iterable:
            self.items_list.append(item)

    __update = update   # private copy of original update() method

class MappingSubclass(Mapping):

    def update(self, keys, values):
        # provides new signature for update()
        # but does not break __init__()
        for item in zip(keys, values):
            self.items_list.append(item)

def main():
    foo = MappingSubclass(['a'], ['b'])

if __name__ == "__main__":
    main()
</code></pre>
<p>and here is the exception raised:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Hanni/OneDrive/Documents/Programs/Python/temp.py", line 24,     in &lt;module&gt;
    main()
  File "C:/Users/Hanni/OneDrive/Documents/Programs/Python/temp.py", line 21, in main
    foo = MappingSubclass(['a'], ['b'])
TypeError: __init__() takes 2 positional arguments but 3 were given
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So every function in a class has self as the first parameter. This parameter is automatically filled as a reference to the instance of the object. When you call</p>
<pre><code>foo = MappingSubclass(['a'], ['b'])
</code></pre>
<p>You are really calling:</p>
<pre><code>__init__(foo, ['a'], ['b'])
</code></pre>
<p><strong>self is not an argument that you fill in when calling class functions, it is stored as a reference to the instance of the class you are referring to</strong></p>
<p>Since you defined init to take only two arguments, self and iterable, and you provided three arguments, you get an error. </p>
</div>
<span class="comment-copy">As it says in the relevant section of the tutorial, name mangling should have allowed me to declare <code>update</code> in <code>MappingSubclass</code> with a different signature.</span>
<span class="comment-copy">The issue isn't your definition. The issue is that you are putting in too many extra parameters. Switch ['a'], ['b'] with ['a', 'b'] and your code will work fine</span>
<span class="comment-copy">Very simply put, you only allow MappingSubclass to be constructed with one argument, but you put in two</span>
<span class="comment-copy">I see what I was doing wrong now. I can use <code>foo.update</code> as defined in <code>MappingSubclass</code> after <code>foo</code> is initialized, but the fact that <code>Mapping.__init__</code> calls the original <code>update</code> is unchanged. This was driving me crazy, so thank you.</span>
<span class="comment-copy">glad to help :)</span>
