<div class="post-text" itemprop="text">
<p>Currently I have the following lists:</p>
<pre><code>counter = [13]
instruments = ['3\t     ---', '2\t    /   \\', '1\t   /     \\', '0\t---       \\       ---', '-1\t           \\     /', '-2\t            \\   /', '-3\t             ---']
score = ['|*************|']
</code></pre>
<p>What I am trying to do is to replace the characters in the instruments list with the characters from the score list (excluding the <code>|</code>).</p>
<p>I am currently experiencing the following issues</p>
<p>The characters are being replaced row by row, rather than column by column. </p>
<p>Instrument List:</p>
<pre><code>3        ---
2       /   \
1      /     \
0   ---       \       ---
-1             \     /
-2              \   /
-3               ---
</code></pre>
<p>Score List:</p>
<pre><code>|*************|
</code></pre>
<p>EXPECTED OUTPUT:</p>
<pre><code>3        ***
2       *   *
1      *     *
0   ***       *       
-1             *     
-2              *   
-3               
</code></pre>
<p>Current Output:</p>
<pre><code>3        ***
2       *   *
1      *     *
0   ***       *       **
-1                  
-2                 
-3               
</code></pre>
<p>This is how I am currently replacing the characters in the <code>instruments</code> list:</p>
<pre><code>for elements in counter:
    current_counter = elements
    count = 0
    for elements in instrument_wave:
        amplitude, form = elements.split('\t')
        for characters in form:
            if characters in ['-', '/', '\\']:
                form = form.replace(characters, '*', 1)
                count += 1
            if count == current_counter:
                break
        for characters in form:
            if characters in ['-', '/', '\\']:
                form = form.replace(characters, '')
        if '-' not in amplitude:
            amplitude = ' ' + amplitude
        new_wave = amplitude + "\t" + form
        waveform.append(new_wave)
</code></pre>
<p>Any help would be appreciated, especially with regards to how I should fix my replace character to make it go column by column rather than row by row.</p>
</div>
<div class="post-text" itemprop="text">
<p>To solve your first issue, you need to iterate via columns. </p>
<p>If you zip the lists (via <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a>, as they are not all the same length), you can then go through them in order and truncate the result:</p>
<pre><code>import itertools

cols = list(itertools.zip_longest(*lst, fillvalue=" "))
for i in range(3, 17):  # skip negative signs
    cols[i] = "".join(cols[i]).replace('-', '*', 1)
    cols[i] = "".join(cols[i]).replace('/', '*', 1)
    cols[i] = "".join(cols[i]).replace('\\', '*', 1)
fixed = map("".join, zip(*cols[:17]))  # no need to zip longest

for l in fixed:
    print(l)
</code></pre>
<p>See a working example on <a href="https://repl.it/repls/PrimeWatchfulFreesoftware" rel="nofollow noreferrer">repl.it</a>, which outputs:</p>
<pre><code>3        ***     
2       *   *    
1      *     *   
0   ***       *  
-1             * 
-2              *
-3   
</code></pre>
<p>Note it does pad the lists out with spaces, so you may want to <code>.strip()</code> the results if it isn't just for printing. Adapting that to your score input I'll leave up to you.</p>
<p>Another option, which is probably clearer:</p>
<pre><code>def convert_and_truncate(lst, cutoff):
    result = []
    for str in lst:
        str = str[0] + str[1:].replace('-', '*')  # skip the negative signs
        str = str.replace('/', '*')
        str = str.replace('\\', '*')
        result.append(str[:cutoff])  # truncate
    return result
</code></pre>
<p>Because we're truncating the rest of the list, it doesn't matter that replace is changing them all.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without itertools, instead self padding to longest part in list:</p>
<pre><code>counter = [16]
instruments = ['3\t     ---', '2\t    /   \\', '1\t   /     \\', '0\t---       \\       ---', '-1\t           \\     /', '-2\t            \\   /', '-3\t             ---']
score = ['|*************|']


# get longes part list
maxL = max ( len(p) for p in instruments)

#enlarge all to max length
instrum2 = [k + ' '* (maxL-len(k)) for k in instruments]

# mask out leading - to ~ (we reverse it later)
instrum3 = [k if k[0] != '-' else '~'+''.join(k[1:]) for k in instrum2]

# transpose and join to one lengthy sentence, #### are where we later split again
trans = '####'.join(map(''.join,zip(*instrum3)))


# replace the right amount of /-\ with * after that, replace with space instead   
cnt = 0
maxCnt = score[0].count('*')
result = []
for t in trans:
    if t in '/-\\':
        if cnt &lt; maxCnt:
            result.append('*')
            cnt+=1
        else:
            result.append(' ')
    else:
        result.append(t)

# resultlist back to string and split into columns again
result2 = ''.join(result)
trans2 = result2.split('####')

# transpose back to rows and make - correct
trans3 = [''.join(k).replace('~','-') for k in zip(*trans2 )] 

for p in trans3:
    print(p)
</code></pre>
<p>Output:</p>
<pre><code>3        ***             
2       *   *            
1      *     *           
0   ***       *          
-1             *        
-2              *       
-3                     
</code></pre>
</div>
<span class="comment-copy">For the first part, probably easiest to just swap your axis with a nested for loop, do your stuff, and swap it back.</span>
<span class="comment-copy">Can you supply a better example of what input/output you are expecting? It's unclear from the above.</span>
<span class="comment-copy">I have made some changes to the examples provided. Please let me know if that helps.</span>
<span class="comment-copy">@Nathan could you please advice as to how I would swap my axis?</span>
<span class="comment-copy">It's still unclear how you expect <code>score</code> to generate your result. The 2nd example seems to be unrelated to the original problem and makes the problem even more complex. It's very likely the second part should be a whole different question, as it is (solution wise) unrelated.</span>
<span class="comment-copy">Thank you. Is there a way to do this without using <code>intertools</code>. I do not have any experience with it whatsoever.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools</code></a> is only being used to extend the builtin <code>zip()</code> functionality. It works just like zip, except it pads the short columns with the <code>fillvalue</code> instead of truncating.</span>
<span class="comment-copy">Thank you. I will play around with this and see how it works.</span>
<span class="comment-copy">For some reason when I try to implement itertools it works BUT I get a <code>-</code> for the very first start. <a href="https://imgur.com/a/Bqn8W" rel="nofollow noreferrer">imgur.com/a/Bqn8W</a></span>
<span class="comment-copy">you likely need to adjust the <code>range(3, 17)</code>. I hard coded values which will be dynamically changed via your score.</span>
<span class="comment-copy">This prints an additional 8 characters that are not supposed to be there. This was my first solution as well, to the problem, but the output is not what is required.</span>
<span class="comment-copy">@NaumanShahid  fixed.</span>
