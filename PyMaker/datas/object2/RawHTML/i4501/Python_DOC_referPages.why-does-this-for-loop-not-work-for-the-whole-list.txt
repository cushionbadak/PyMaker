<div class="post-text" itemprop="text">
<p>trying to build my first game for a python course I'm doing.
How would i get this for-loop to iterate through the entire list changing each value to the word 'bull'?
Thank you!</p>
<p>Input:</p>
<pre><code>a = [1,2,3,4]
b = [1,2,3,4]

for x in a:
    if x in b:
        b[x] = 'bull'

print (a)
print (b)
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 3, 4]
[1, 'bull', 3, 'bull']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a more interesting problem than it first appears.</p>
<pre><code>for x in a:
</code></pre>
<p>will iterate over 1,2,3,4.</p>
<pre><code>if x in b:
   b[x] = 'bull'
</code></pre>
<p>checks if 1,2,3,4, respectively, are in <code>b</code>, and sets <code>b[x]</code> to <code>bull</code>.
Since Python is zero-based indexed, what a simple guess would expect to see is this:</p>
<pre><code>b = [1,'bull','bull','bull']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
IndexError: list assignment index out of range
</code></pre>
<p>Instead you see this:</p>
<pre><code>b = [1, 'bull', 3, 'bull']
</code></pre>
<p>What gives? And what is zero-based indexing?</p>
<p>Zero-based indexing just means that, if you want the first element of something, you call it at index 0. In other words, if <code>a = [1,2,3,4]</code>, then <code>a[1]</code> gives <code>2</code>, and <code>a[0]</code> gives <code>1</code>. Confusing, and there are debates among some computer scientists whether this is actually the best way to do it. Some languages, like Fortran and Julia, have one-based indexing, so something like what you're trying to do would actually work there.</p>
<p>Now back to the problem: let's go loop-by-loop.</p>
<p>On your first loop, <code>x = 1</code>, so <code>x in b</code> evaluates to <code>True</code> and <code>b[1] = 'bull'</code> evaluates to: <code>b = [1,'bull',3,4]</code>.</p>
<p>On your second loop, <code>x = 2</code>, <em>but</em> <code>x in b</code> evaluates to <em>False</em>! Remember that <code>b = [1,'bull',3,4]</code>, so there's no longer a 2 in <code>b</code>, and it skips element assignment!</p>
<p>On the third loop, <code>3 in b</code> is <code>True</code>, so now <code>b[3] = 'bull'</code> and <code>b = [1,'bull',3,'bull']</code>.</p>
<p>On the fourth loop, there is no 4 in <code>b</code>, so nothing happens.</p>
<hr/>
<p>For what you're trying to accomplish instead, you can approach this in one of two ways:</p>
<pre><code>for (i,x) in enumerate(a):
    if x in b:
        b[i] = 'bull'
</code></pre>
<p>In this method, <code>i</code> is initialized at 0, and increased by one each loop. So <code>i</code> will span: <code>0,1,2,3</code>. Perfect for zero-based indexing!</p>
<p>Another approach is to do this:</p>
<pre><code>for x in a:
    if x in b:
        b[x-1] = 'bull'
</code></pre>
<p>When <code>x</code> is 1, <code>x-1</code> gives you <code>0</code>, and remember that <code>b[0] = 1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to check if elements at corresponding index of two lists are same. </p>
<pre><code>a = [1,2,3,4]
b = [1,2,3,4]

for x, y in zip(a, b):
    if x == y:
        b[x-1] = 'bull'

print (a)  # [1, 2, 3, 4]
print (b)  # ['bull', 'bull', 'bull', 'bull'] 
</code></pre>
<p><strong>Note</strong>: List indices start from <code>0</code>. So, you need to assign <code>bull</code> to index <code>x-1</code> of <code>b</code>.</p>
<p>Lastly if you need a <strong>1-liner</strong>:</p>
<pre><code>b = ['bull' if x == y else y for x, y in zip(a, b)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <code>x</code> is <code>1</code>, then <code>b[x] = 'bull'</code> will write to <code>x[1]</code>, but the position of <code>1</code> in the <code>a</code> list is actually <code>a[0]</code>.</p>
<p>What you want is to use the <em>indexes</em> of the values of <code>a</code> to manipulate the corresponding values in <code>b</code>:</p>
<pre><code>for index, value in enumerate(a):
    if b[index] == value:
        b[index] = 'bull'
</code></pre>
<p>If you actually want to replace the value in <code>b</code>, regardless of its index, you need to find the index to manipulate first:</p>
<pre><code>for value in a:
    try:
        index = b.index(value)
    except ValueError:
        continue
    b[index] = 'bull'
</code></pre>
<p>Or, even shorter, use a list comprehension:</p>
<pre><code>b = ['bull' if x in a else x for x in b]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try the below basic code.</p>
<pre><code>a = [1,2,3,4]
b = [1,2,3,4]
c=[]
c=b
i=0
for x in a:
    print (x)
    if x in c:
        c[i] = 'bull'
        i=i+1

print (a)
print (c)
</code></pre>
</div>
<span class="comment-copy">Python is 0-indexed, so you'd have to change your code to <code>b[x-1] = 'bull'</code></span>
<span class="comment-copy">You're using <code>x</code> as a value of the list <i>and</i> as an index of the list...</span>
<span class="comment-copy">You've got a bunch of great explanations below, but if all you really wanted to do was change the values in <code>b</code> to <code>"bull"</code> you don't need the list <code>a</code> at all: <code>b = ['bull' for x in b]</code> OR <code>b = ['bull']*len(b)</code>.</span>
<span class="comment-copy">@pault The end goal was to have that value change to 'bull' if it exists in list A also, not just to change everything to 'bull'.</span>
<span class="comment-copy">great explanation!  one last little tidbit:  on loop 0, index 1 is changed to 'bull' ... it was previously 2.  On loop 1, it searches for <code>2 in b</code>... there's no 2 now because 2 was replaced by <code>bull</code>!  on loop 2, b[3] (which is 4) is changed to bull.  Thus on loop 3, it searches for <code>4</code> in <code>b</code>... but <code>4</code> was replace by <code>bull</code>.  Thus the results: loop0: <code>[1, "bull", 2, 3]</code> loop1: <code>[1, "bull", 2, 3]</code> loop2: <code>[1, "bull", 2, "bull"]</code> loop3: <code>[1, "bull", 2, "bull"]</code></span>
<span class="comment-copy">You beat me to it! Adding it in now.</span>
<span class="comment-copy">Thank you this really cleared it up for me and help me understand it!</span>
