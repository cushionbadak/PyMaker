<div class="post-text" itemprop="text">
<p>I was wondering if anyone could help provide some insight on the following problem that I am currently struggling with.</p>
<p>Let's assume that you have a file that contains the following characters:</p>
<pre><code>|**********|
</code></pre>
<p>You have another file that contains a pattern, such as:</p>
<pre><code>       -
      /-\
     /---\
    /-----\
   /-------\
</code></pre>
<p>How would you go about replacing the characters in the pattern with the characters from the first file BUT at the same time - you can only print the specific number of *'s that are in the first file.</p>
<p>Once you have printed say the 10 stars, in total, you have to STOP printing.</p>
<p>So it would be something like:</p>
<pre><code>    *
   ***
  *****
 *
</code></pre>
<p>Any hints or tips or help would be greatly appreciated.</p>
<p>I have been using .replace() to replace all of the characters in the pattern with the '*' but I am unable to print the specific amount only.</p>
<pre><code>for ch in ['-', '/', '\\']:
   if ch in form:
       form = form.replace(ch, '*')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my aestric file(<strong>aestricks.txt</strong>), which contains:</p>
<pre><code>************
</code></pre>
<p>And pattern file (<strong>pattern.txt</strong>), which contains:</p>
<pre><code>    -
   /-\
  /---\
 /-----\
/-------\
</code></pre>
<p>And here's <strong>the code</strong>. I know it can be optimized a little more, but I am posting the basic one:</p>
<pre><code>file1 = open("aestricks.txt","r")

file1 = file1.read()

t_c = len(file1)

form = open("pattern.txt","r")

form = form.read()

form1 = form

count = 0

for ch in form1:
    if ch in ['-','/', '\\']:
        form = form.replace(ch, '*', 1)
        count += 1

    if count == t_c:
        break

for ch in form1:
    if ch in ['-','/', '\\']:
        form = form.replace(ch, '')

print(form)
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>   *
  ***
 *****
***
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">expressions</a> and <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>sub()</code></a> function from <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a> module.</p>
<p><code>sub()</code> takes an optional <code>count</code> argument that indicates the maximal number of pattern occurrences to be replaced.</p>
<pre><code>import re

with open('asterisks.txt') as asterisks_file, open('ascii_art.txt') as ascii_art_file:
    pattern = re.compile(r'['   # match one from within square brackets:
                         r'\\'  # either backslash
                         r'/'   # or slash
                         r'-'   # or hyphen
                         r']')

    # let n be the number of asterisks from the first file
    n = asterisks_file.read().count('*')

    # replace first n matches of our pattern (one of /\- characters)
    replaced_b = pattern.sub('*', ascii_art_file.read(), n)

    # replace rest of the /\- characters with spaces (based on your example)
    result = pattern.sub(' ', replaced_b)
    print(result)
</code></pre>
<p><strong>OUTPUT:</strong></p>
<blockquote>
<pre><code>   *
  ***
 *****
*
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Instead of replacing every character at once you can replace items one at a time and use some count on number of replacements. <br/>
But str object doesn't support item assignment at specific index, so you have to convert the str object into list first. Then do your operations and convert back to str again.
you can write something like this.</p>
<pre><code>characters = ['-', '/', '\\'] 
count = 0  
a = list(form)           # convert your string to list
for i in range(len(a)):
    if a[i] in characters and count &lt; 10:   # iterate through each character
        a[i] = '*'                          # replace with '*'
        count += 1                          #  increment count
 result =  "".join(a)                       # convert list back into str
 print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
file1 = open("file1.txt", "r") 
s=file1.read()
starcount=s.count('*')
file2 = open("file2.txt", "r") 
line = re.sub(r'[-|\\|/]', r'*', file2.read(), starcount)
line = re.sub(r'[-|\\|/]', r'', line)
print(line)
</code></pre>
<p><strong>Syntax of <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">sub</a></strong></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; help(re.sub)
Help on function sub in module re:

sub(pattern, repl, string, count=0, flags=0)
    Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used.
</code></pre>
<p><strong>Output</strong></p>
<pre><code>       *
      ***
     *****
    *
</code></pre>
<p><strong>Demo</strong></p>
<blockquote>
<p><a href="https://repl.it/repls/ObeseNoteworthyDevelopment" rel="nofollow noreferrer">https://repl.it/repls/ObeseNoteworthyDevelopment</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You just need to keep track of the number of * in the input line and then continue to replace the dashes until the counter runs out. Once the counter runs out then replace the remaining dashes with empty strings.</p>
<pre><code>def replace(p, s):
  counter = len(s) - 2
  chars = ['\\', '/', '-']
  i = 0
  for c in p:
    if c in chars:
        p = p.replace(c, '*', 1)
        i += 1
    if i == counter:
        break

  p = p.replace('\\', '')
  p = p.replace('/', '')
  p = p.replace('-', '')

  return p



if __name__ == '__main__':
  stars = '|**********|'
  pyramid = r'''
    -
   /-\
  /---\
 /-----\
/-------\ '''
  print(pyramid)
  print(replace(pyramid, stars))
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>   *
  ***
 *****
*
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
inp = open('stars.txt', 'r').read()
count = len(inp.strip('|')) #stripping off the extra characters from either end

pattern = open('pattern.txt', 'r').read() # read the entire pattern
out = re.sub(r'-|/|\\', r'*', pattern, count=count) # for any of the characters in '-' or '|' or '\', replace them with a '*' only **count** number of times.
out = re.sub(r'-|/|\\', r'', out) # to remove the left out characters
print (out)
</code></pre>
<p>Added one more re.sub line to remove the left out characters if any.</p>
</div>
<span class="comment-copy">Where's the code, that you wrote?</span>
<span class="comment-copy">I have updated the question to show the replace code, but it is literally very basic replacing of characters in the pattern to '*'</span>
<span class="comment-copy">What is the format of your input and output?</span>
<span class="comment-copy">Why didn't the top <code>-</code> get replaced?  Why were the <code>/</code> and `\` stripped out?  Why wasn't the whitespace replaced?  In short, it's not really clear what the rules are for your replacement.</span>
<span class="comment-copy">Thanks for the comment @MrT. I will remember that the next time! But I think the code I have written is pretty straight forward. Edited the answer anyways!</span>
