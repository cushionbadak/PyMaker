<div class="post-text" itemprop="text">
<p>I am working on django project.where user can upload a csv file and stored into database.Most of the csv file i saw 1st row contain header and then under the values but my case my header presents on column.like this(<a href="https://i.stack.imgur.com/vIBHj.png" rel="nofollow noreferrer">my csv data</a>)
I did not understand how to save this type of data on my django model.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can transpose your data. I think it is more appropriate for your dataset in order to do real analysis. Usually things such as <code>id values</code> would be the row index and the names such <code>company_id, company_name, etc</code> would be the columns. This will allow you to do further analysis (mean, std, variances, ptc_change, group_by) and use pandas at its fullest. Thus said:</p>
<pre><code>import pandas as pd
df = pd.read_csv('yourcsvfile.csv')
df2 = df.T
</code></pre>
<p>Also, as @H.E. Lee pointed out. In order to save your model to your database, you can either use the method <code>to_sql</code> in your dataframe to save in mysql (e.g. your connection), if you're using mongodb you can use <code>to_json</code> and then import the data, or you can manually set your function transformation to your database.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <em>flip</em> it with the built-in CSV module quite easily, no need for cumbersome modules like <code>pandas</code> (which in turn requires NumPy...)... Since you didn't define the Python version you're using, and this procedure differs slightly between the versions, I'll assume Python 3.x:</p>
<pre><code>import csv

# open("file.csv", "rb") in Python 2.x
with open("file.csv", "r", newline="") as f:  # open the file for reading
    data = list(map(list, zip(*csv.reader(f))))  # read the CSV and flip it
</code></pre>
<p>If you're using Python 2.x you should also use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer"><code>itertools.izip()</code></a> instead of <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> and you don't have to turn the <code>map()</code> output into a list (it already is).</p>
<p>Also, if the rows are uneven in your CSV you might want to use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a> (<a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>itertools.izip_longest()</code></a> in Python 2.x) instead.</p>
<p>Either way, this will give you a 2D list <code>data</code> where the first element is your <em>header</em> and the rest of them are the related data. What you plan to do from there depends purely on your DB... If you want to deal with the data only, just skip the first element of <code>data</code> when iterating and you're done.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given your data it may be best to store each row as a string entry using <a href="https://docs.djangoproject.com/en/2.0/ref/models/fields/#textfield" rel="nofollow noreferrer">TextField</a>. That way you can be sure not to lose any structure going forward.</p>
</div>
<span class="comment-copy">so you need to construct suitable object first or you can write your own parser</span>
<span class="comment-copy">That's a screenshot of a spreadsheet but once you export it you won't have a traditional csv where each column is one data type. You can use the csv module to break out the cells but you'll need to write your own parser above that. It will need to read in multiple lines and build data columns from multiple rows. Unless that's an ad=hoc spreadsheet that is not following any hard-and-fast rules. Then you'll have to fix it by hand.</span>
<span class="comment-copy">I recommend taking a look at pandas library for transforming csv data. You can for example read csv, transform it and save to db. All with pandas</span>
<span class="comment-copy">SKip every row's <code>0</code> the element, that's it.</span>
<span class="comment-copy">How to skip every row's  0 element.please give some instruction. Anup Yadav</span>
<span class="comment-copy">I am with silgon on organizing your csv data by loading the data into pandas as dataframe and swap the rows for columns, vice versa (transpose). And then I would add on to actually answer your question (silgon you may actually want to edit this in and i can upvote your ans) on how to save into django models : use pandas df.to_sql() with the right db connectors. to do this you can refer to stefan's excellent answer here <a href="https://stackoverflow.com/questions/37688054/saving-a-pandas-dataframe-to-a-django-model" title="saving a pandas dataframe to a django model">stackoverflow.com/questions/37688054/â€¦</a></span>
<span class="comment-copy">Thanks  silgon and H.E.Lee.</span>
<span class="comment-copy">You're welcome. And thanks @H.E.Lee, I complemented the answered based on your comment.</span>
<span class="comment-copy">Thanks @zwer i already done your instruction.It's work fine.I need some suggestion on my_csv_data.when i flip it  multiple date fields treated as a column.My data has indicator column which has different indicator name,under the indicator name you can see date wise values on it.In that case how to handle this.</span>
