<div class="post-text" itemprop="text">
<p>In Python, is there any benefit of making a Thread and then join() over normal blocking process? For example, is this code:  </p>
<pre><code>def sleep():
    time.sleep(5)

print "start..."
t = threading.Thread(target=sleep)
t.start()
t.join()
print "end..."
</code></pre>
<p>any better than this:  </p>
<pre><code>def sleep():
    time.sleep(5)

print "start..."
sleep()
print "end..."
</code></pre>
<p>Is there any use-case or situation where one of it is better than the other?</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, if you join on a single thread there is not much benefit over a non-threaded approach.</p>
<p>The only thing I can think of is that you can specify a timeout for <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow noreferrer"><code>join</code></a> to limit the time a computation may take. This is also possible without threads, but it would require you to modify the target function (to periodically check whether the time limit has been reached). Using a timeout for <code>join</code> is transparent to the underlying function.</p>
<p>Obviously, if you have more than one thread then joining one or more of them is drastically different than a single-threaded program, since the threads then work in parallel while only the main thread waits for the join to complete.</p>
</div>
<span class="comment-copy">None of these two is better because they both make no sense. Please illustrate your question with a real problem.</span>
<span class="comment-copy">Calling <code>join(timeout)</code> will <i>not</i> limit the time that a computation in a background thread may take.  It only will limit the amount of time that the calling thread is willing to wait for it.</span>
<span class="comment-copy">@jameslarge you are correct and I was sloppy. Thanks for the clarification! After <code>join(timeout)</code> returns, one needs to call <code>is_alive</code> to check whether the thread is still running and (if it is) stop it -- ideally in a cooperative way <a href="https://stackoverflow.com/q/323972/857390">or forcefully</a>.</span>
