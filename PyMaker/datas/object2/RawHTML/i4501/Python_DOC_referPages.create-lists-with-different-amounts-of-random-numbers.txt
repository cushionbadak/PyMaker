<div class="post-text" itemprop="text">
<p>I am needing to create lists of random numbers (being either 0 or 1) with different lengths. I need lists with lengths of 10 numbers, 20 numbers, etc. all the way to 500. This is what I have:</p>
<pre><code>import random
list1 = []
for x in range(10,501,10):
    list1.append(random.randint(0,1))
    print(list1)
    list1.clear()
</code></pre>
<p>So I'm getting 50 lists of only one random number. I understand that the range() is my problem because it is only an iterator, so what would I do to avoid writing 50 for loops to get all of these lists?</p>
</div>
<div class="post-text" itemprop="text">
<p>The only way to generate 50 lists of random numbers (short of writing out all those commands sequentially) is to go through 50 loops generating the numbers.  The standard way to do this in most programming languages is with nested loops.  Some languages have features, or <a href="https://stackoverflow.com/a/49592472/4637583">available libraries</a> that can make this easier to write and/or more effecient. Python has a feature called <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>list comprehension</code></a>s that make creating lists very easy and convenient.</p>
<pre><code>import random
[random.randint(0,1) for _ in range(10)]
</code></pre>
<p>They can also be nested to accomplish your task.</p>
<pre><code>import random
[[random.randint(0,1) for _ in range(x)] for x in range(10,501,10)]
</code></pre>
<p><strong>Timing:</strong></p>
<pre><code>from random import randint
from timeit import timeit

def lc():
    return [[randint(0,1) for _ in range(x)] for x in range(10,501,10)]

def forloop():
    outer = []
    for x in range(10,501,10):
        inner=[]
        for _ in range(x):
            inner.append(randint(0,1))
        outer.append(inner)
    return outer

print(timeit(lc,number=100))  # 9.2758308192958
print(timeit(forloop,number=100)) # 9.44730854274725
</code></pre>
<p>Hmmm.  I was under the impression that list comps had more of a speed advantage over for loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>A more efficient solution is to use <code>numpy</code>. See <em><a href="https://stackoverflow.com/questions/993984/why-numpy-instead-of-python-lists">Why NumPy instead of Python lists?</a></em></p>
<pre><code>import numpy as np

res = [np.random.randint(0, 2, x) for x in range(10, 501, 10)]
</code></pre>
<p>This creates a list of arrays of binary values, with arrays of length 10, 20, ... , 490, 500.</p>
<p>Any answer which claims nested list comprehensions are <em>efficient</em> for this task should note that they are ~100x slower versus <code>numpy</code> in this instance.</p>
<p><strong>Benchmarking</strong></p>
<pre><code>import numpy as np
import random

def method_np():
    return [np.random.randint(0, 2, x) for x in range(10, 501, 10)]

def method_lst():
    return [[random.randint(0,1) for _ in range(x)] for x in range(10,501,10)]

%timeit method_np()    # 359 Âµs
%timeit method_lst()   # 37.3 ms
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need nested loops:</p>
<pre><code>import random
list1 = []
for x in range(10,501,10):
    for e in range(x):
        list1.append(random.randint(0,1))
    print(list1)
    list1.clear()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess this solves your problem:     </p>
<pre><code>   import random
        lists = []
        for x in range(10,501,10):
            l = []
            for _ in range(x):
                l.append(random.randint(0,1))
            lists.append(l)
    print(lists)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Issues :</strong> 
There are 2 issues with your code first one is <strong>range()</strong> and second one is indent of   <code>print(list1) list1.clear()</code> .</p>
<p><strong>Fixed Code :</strong></p>
<pre><code>import random
list1 = []
ranges = [10,501,10]
for y in ranges:
    for x in range(0,y):
        list1.append(random.randint(0,1))
    print(list1)
    list1.clear()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since it seems you simply need the list printed out, you can use a list comprehension to generate the list of a certain length.</p>
<pre><code>import random
max_list_len = 500
for l in range(1, max_list_len + 1):
    print([random.randint(0, 1) for i in range(0, l)])
</code></pre>
</div>
<span class="comment-copy">why not use <code>random</code> in the <code>range()</code>?  And  move the <code>print</code> and <code>.clear()</code> outside the loop?</span>
<span class="comment-copy">Nope, I see nothing wrong with this answer, list comprehensions are fast, and upto a certain point beat numpy hands down in performance. Numpy just has too much overhead to be reasonably performant for small data. This just happens to be one unhappy scenario where <code>random.randint</code> is the bottleneck. Well, big deal, there are ways around that.</span>
<span class="comment-copy">Why would you introduce numpy here? As far as we're aware, speed isn't even a concern.</span>
<span class="comment-copy">Let's flip the question around. Why would you use nested loops to add items to lists one by one when you can use a purpose-built library to vectorise this?</span>
<span class="comment-copy">Maybe because numpy is not part of the Python standard library, and the potential hassle to install it and get started with it are simply not worth it for a relatively trivial problem like this one.</span>
<span class="comment-copy">I would counter to say, <i>as soon as</i> you want / need to perform numerical Python work, you should install <code>numpy</code>.</span>
<span class="comment-copy">I was thinking nested loops and attempted and failed so this is exactly what I was looking for thank you!</span>
