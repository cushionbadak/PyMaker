<div class="post-text" itemprop="text">
<p>I am trying to convert strings to datetime objects. These strings are stored in csv columns. The file being huge I want to multiprocess it.</p>
<p>My code looks like this :</p>
<pre><code>def conv_datetime(file):
   return ([pd.to_datetime(j[3]) for j in file])

if __name__ == "__main__":
   n = 0
   file = pd.read_csv("csv_file",header=None,chunksize=200,skiprows=n)
   n += 200
   pro = mp.Process(target=conv_datetime,args=(file,))
   pro.deamon = False
   pro.start()
   pro.join()
</code></pre>
<p>I am getting :</p>
<pre><code>AttributeError     
Traceback (most recent call last)
&lt;ipython-input-1-5d16d82af0d2&gt; in &lt;module&gt;()
     15     pro = mp.Process(target=conv_datetime,args=(file,))
     16     pro.deamon = False
---&gt; 17     pro.start()
     18     pro.join()
     19 

C:\ProgramData\Anaconda33\lib\multiprocessing\process.py in start(self)
    103                'daemonic processes are not allowed to have children'
    104         _cleanup()
--&gt; 105         self._popen = self._Popen(self)
    106         self._sentinel = self._popen.sentinel
    107         # Avoid a refcycle if the target function holds an indirect

C:\ProgramData\Anaconda33\lib\multiprocessing\context.py in _    Popen(process_obj)
    221     @staticmethod
    222     def _Popen(process_obj):
--&gt; 223         return  _default_context.get_context().Process._Popen(process_obj)
    224 
    225 class DefaultContext(BaseContext):

C:\ProgramData\Anaconda33\lib\multiprocessing\context.py in _Popen(process_obj)
    320         def _Popen(process_obj):
    321             from .popen_spawn_win32 import Popen
--&gt; 322             return Popen(process_obj)
    323 
    324     class SpawnContext(BaseContext):

C:\ProgramData\Anaconda33\lib\multiprocessing\popen_spawn_win32.py in __init__(self, process_obj)
     63             try:
     64                 reduction.dump(prep_data, to_child)
---&gt; 65                 reduction.dump(process_obj, to_child)
     66             finally:
     67                 set_spawning_popen(None)

C:\ProgramData\Anaconda33\lib\multiprocessing\reduction.py in dump(obj, file, protocol)
     58 def dump(obj, file, protocol=None):
     59     '''Replacement for pickle.dump() using ForkingPickler.'''
---&gt; 60     ForkingPickler(file, protocol).dump(obj)
     61 
     62 #

AttributeError: Can't pickle local object '_make_date_converter.&lt;locals&gt;.converter'
</code></pre>
<p>Before someone gives me a solution for the code, it would be really helpful if can get some insight into how daemon processes work.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the <a href="https://github.com/python/cpython/blob/master/Lib/multiprocessing/process.py#L110" rel="nofollow noreferrer"><code>multiprocessing/process.py</code></a> code (you don't seem to be using Python 3.6, so the line numbers are a bit different, but this part of the code is unchanged), you can see pretty clearly that the string about daemon processes isn't relevant; it's just part of an <code>assert</code> that your code managed to get past without any problems, before failing for a completely unrelated reason a few lines later.</p>
<hr/>
<p>The actual problem is on that line 105, and it's explained in the error message:</p>
<pre><code>AttributeError: Can't pickle local object '_make_date_converter.&lt;locals&gt;.converter'
</code></pre>
<p>You're trying to pass an object to a child process that can't be pickled. This is explained a bit in the <code>multiprocessing</code> docs, e.g., under <a href="https://docs.python.org/3/library/multiprocessing.html#programming-guidelines" rel="nofollow noreferrer">Programming Guidelines</a>, although those docs assume you understand what "pickle" means, and that you've read quite a bit of the earlier sections of the documentation. You really should read those earlier sections, and look up <code>pickle</code> in the docs as well, but the basic idea is this:</p>
<p>The <code>multiprocessing</code> module uses the <code>pickle</code> module to pass arguments to functions, return values from functions, put values on queues, etc. The <code>pickle</code> module can only handle data types that are designed to be pickled. So, some types can't be passed around with <code>multiprocessing</code>.</p>
<p>In this case, there should be a very easy workaround: Just pass the filename, and let the child process read it. Of course that won't work for more complicated cases, but if it works for yours, keep it simple.</p>
<p>For more complicated cases, the usual solution with Pandas is to replace the standard pickler with a third-party library like <code>dill</code> or <code>cloudpickle</code> that knows more about Pandas and can coerce it into shape to pass over the network. (Or, sometimes, to replace <code>multiprocess</code> itself with a third-party library like <code>dask</code>.) This isn't that hard to learn, but you do need to look over the options, pick one, and read about how to hook it in, which you may not want to do if it's not needed.</p>
<hr/>
<p>If you're still interested in what daemon processes are anyway, see <a href="https://docs.python.org/3/library/multiprocessing.html#process-and-exceptions" rel="nofollow noreferrer">Processes</a> in the reference docs. But the short version is that a daemon process, in this context, is one that doesn't get <code>join</code>edâ€”in other words, you don't wait for it to finish when the main process finishes, as you do with a normal process.</p>
</div>
<span class="comment-copy">I'm sorry. I've added the entire error statement.</span>
<span class="comment-copy">No problem; now that you've edited it, this is a good question.</span>
<span class="comment-copy">Could you give me some reference mini projects/github links that have worked on similar thong I am trying to do?</span>
<span class="comment-copy">Sorry, I don't know of any off-hand. I think some of the examples for <code>dill</code> are very close to what you're doing, if you want to use it in place of the standard <code>pickle</code>, though.</span>
<span class="comment-copy">By the way, you seem to be using a pretty old version of Anaconda. If s, can you upgrade? Over the past couple years, there have been a few improvements to <code>multiprocessing</code> in Python 3, and also Anaconda has added new pre-installed packages (including <code>dill</code> and <code>cloudpickle</code>).</span>
