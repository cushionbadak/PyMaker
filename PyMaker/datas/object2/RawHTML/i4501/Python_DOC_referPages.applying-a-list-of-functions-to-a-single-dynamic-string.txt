<div class="post-text" itemprop="text">
<p>I'm creating a small python app that formats a file's name to a set of rules. I'm having problems finding a way of applying a list of general formatting functions to the <strong>same string</strong>. I want to apply one function, then another, then another.</p>
<p>I've managed to find a way that works, but I feel that it's very <em>clumsy</em>.</p>
<p>Here I have a list of lists that includes one function and a dictionary of the kwargs. (All of these functions have a "text" parameter that is not included in the dictionary).</p>
<pre><code>functions = [
[SRF.change, {'old': '.', 'new': ' '}],
[SRF.surround, {'value': SU.get_year}],
[SRF.remove, {'chars': '[],'}],
[SRF.capitalize_words, {}],
[SRF.remove_including, {'value': 'mp4'}]]
</code></pre>
<p>I then pass it into the <code>custom_rename</code> function. It loops over the list of functions and applies it to the "text" variable. As you can see, the variable changes every time <code>func(text, **kwargs)</code> is called.</p>
<pre><code>def custom_rename(text, functions_list):

    # Apply a list of functions to a string
    for func_list in functions_list:
        func = func_list[0]  # Function
        kwargs = func_list[1]  # Dictionary
        try:
            text = func(text, **kwargs)
        except AttributeError:
            pass

    return text
</code></pre>
<p>Is there a more elegant way of doing this? I, for example, do not like that I have to know that the function is in position [0] and the dictionary is in [1].</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of storing <code>[function, arguments]</code> lists, you can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> to create callables with the arguments already baked in:</p>
<pre><code>from functools import partial

functions = [
    partial(SRF.change, old='.', new=' '),
    partial(SRF.surround, value=SU.get_year),
    partial(SRF.remove, chars='[],'),
    SRF.capitalize_words,
    partial(SRF.remove_including, value='mp4')
]
</code></pre>
<p>Now your <code>custom_rename</code> function can be simplified to this:</p>
<pre><code>def custom_rename(text, functions_list):
    # Apply a list of functions to a string
    for func in functions_list:
        try:
            text = func(text)
        except AttributeError:
            pass

    return text
</code></pre>
</div>
<span class="comment-copy">take a look at reduce <code>from functools import reduce</code></span>
<span class="comment-copy">Wow, exactly what I needed, thank you so much!</span>
