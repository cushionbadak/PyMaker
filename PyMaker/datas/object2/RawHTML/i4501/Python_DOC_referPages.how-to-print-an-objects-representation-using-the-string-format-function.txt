<div class="post-text" itemprop="text">
<p>I'm creating a Money class, and I'd like to pass the object directly to the string format() function and get the money representation with 2 decimals and the currency symbol.</p>
<p>What method should I override to print with the string format function? Overriding <strong>str</strong> and <strong>repr</strong> did not work.</p>
<pre><code>from decimal import Decimal


class Money(Decimal):
    def __str__(self):
        return "$" + format(self, ',.2f')

    def __repr__(self):
        return "$" + format(self, ',.2f')

m = Money("123.44")
print(m) # $123.44. Good.
m        # $123.44. Good.
print("Amount: {0}".format(m)) # 123.44. Bad. I wanted $123.44
print(f"Amount: {m}") # 123.44. Bad. I wanted $123.44
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can give your class a <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="noreferrer"><code>__format__</code> method</a>; in this case just call overridden version:</p>
<pre><code>def __format__(self, spec):
    spec = spec or ',.2f'  # set a default spec when not explicitly given
    return '$' + super().__format__(spec)
</code></pre>
<p>From the linked documentation:</p>
<blockquote>
<p>Called by the <code>format()</code> built-in function, and by extension, evaluation of formatted string literals and the <code>str.format()</code> method, to produce a “formatted” string representation of an object. The <code>format_spec</code> argument is a string that contains a description of the formatting options desired. The interpretation of the <code>format_spec</code> argument is up to the type implementing <code>__format__()</code>, however most classes will either delegate formatting to one of the built-in types, or use a similar formatting option syntax.</p>
</blockquote>
<p>You'll want to drop your <code>__str__</code> and <code>__repr__</code> implementations now, or at least not add another <code>'$'</code> on top of the one <code>__format__</code> now adds (which <code>format(self, ...)</code> will trigger).</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; class Money(Decimal):
...     def __format__(self, spec):
...         spec = spec or ',.2f'  # set a default spec when not explicitly given
...         return '$' + super().__format__(spec)
...
&gt;&gt;&gt; m = Money("123.44")
&gt;&gt;&gt; print("Amount: {0}".format(m))
Amount: $123.44
&gt;&gt;&gt; print(f"Amount: {m}")
Amount: $123.44
</code></pre>
</div>
<span class="comment-copy">If you want to force repr you can use <code>f'{m!r}'</code>.</span>
<span class="comment-copy">By the way, you probably don't actually want to override <code>repr</code> this way. Normally, a <code>repr</code> either looks like (a) source code to recreate the object (e.g., <code>Money("123.44")</code>), or (b) something in angle brackets that cannot be interpreted as anything but a repr (like <code>&lt;Money value=Decimal('123.44')&gt;</code>).</span>
<span class="comment-copy">@PaulPanzer That's not what he's asking for.</span>
<span class="comment-copy">@abarnert well, it's a comment, not an answer ;-)</span>
<span class="comment-copy">He will obviously need to change his <code>__str__</code> and <code>__repr__</code> methods to not add an extra <code>$</code> on top of <code>format(self)</code> then.</span>
