<div class="post-text" itemprop="text">
<p>I'm having trouble figuring out how to randomly generate strings.</p>
<p>I currently work with <code>import random</code> before creating a set of <code>list</code>s before <code>choiceint = random.randint(1,X)</code>. Beyond that I am stuck.</p>
<p>What I want the code to do is select strings from two lists and then create a new string.</p>
<p>For example <code>list1 = ["bannana flavour"]</code> <code>list2 = ["milk"]</code></p>
<p>and then it would get "bannana flavour" and "milk" and create "bannana flavoured milk".</p>
<p>This would pick from a larger pool to generate the string but I'm clueless as to how generate semi-random strings.</p>
<p>I don't know if this is achievable but the idea is to generate an item from the options in a list and then place it in another list.</p>
<p>If this isn't possible, or isn't possible without a large amount of non user friendly code, I would like to know as, while it is unfavourable, I do have the alternative of using a <code>random.randint(1,X)</code> and then list out all the possible combinations <code>random.randint = 1:</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Random has methods to get 1 or more things from a list, with/without duplicates:</p>
<ul>
<li><a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer">random.choice(iterable)</a> : draws 1 from list</li>
<li><a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer">random.choices(iterable,k=number)</a> : draws number things from the list, with duplicates</li>
<li><a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer">random.sample(iterable,k=number)</a> : draws number things from the list, no duplicates</li>
</ul>
<p>To get all combinations between two lists you do not need any randomness, you can use a list comprehension to get all possibilities. If you have two lists of dozends of options it is not wise to generate all combinations, just draw one from each list and return that single combination as result - needs less space to store it.</p>
<pre><code>import random 

def getAllPossibleWins(to,co):
    """Create all combinations of t and c as list of strings"""
    return [f'{c} {t}' for t in to for c in co] 

def getWin():
    """Returns a string with a randomized win."""
    toys = ['cow','hare','car','plane']  # 1000 options
    cols = ['red','green','blue']        # 1000 options

    # instead of creating 1000000 combinations and draw once from it, draw from 1000 twice
    return f'You win a {random.choice(cols)} {random.choice(toys)}.'

print(getWin())
print(getWin())
print(getWin())

print(getAllPossibleWins(toys,cols))
</code></pre>
<p>Output:</p>
<pre><code>You win a blue plane. 
You win a red car. 
You win a green cow.

['red cow', 'green cow', 'blue cow', 'red hare', 'green hare', 'blue hare', 'red car', 
 'green car', 'blue car', 'red plane', 'green plane', 'blue plane']
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2030053/random-strings-in-python">Random strings in Python</a></span>
<span class="comment-copy">This isn't at all clear as written. You have two single-element lists, and I can't guess whether you're real problem is picking randomly out of each (presumably larger) list, or picking two out of (presumably more than two) lists, or something else. And I have no idea what the <code>X</code> is in <code>random.randint(1,X)</code> that you mention a few times. And what does "semi-random" meant? Please read the <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> section in the help and try to provide an example that actually demonstrates your problem.</span>
<span class="comment-copy">"X" represents a random integer, I didn't think specifying a defined number necessary. and by semi random I mean I don't want it to randomly select characters to use, its semi-random because if it was truly random it would have a literally limitless number of outputs rather than the stricter defined ones I want.</span>
<span class="comment-copy">grammar, spelling</span>
