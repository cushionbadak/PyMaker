<div class="post-text" itemprop="text">
<p>I have a string where I want to output random ints of differing size using Python's built-in format function.</p>
<p>IE:  "{one_digit}:{two_digit}:{one_digit}"
Yields:  "3:27:9"</p>
<p>I'm trying:</p>
<pre><code>import random

"{one_digit}:{two_digit}:{one_digit}".format(one_digit=random.randint(1,9),two_digits=random.randint(10,99))
</code></pre>
<p>but this always outputs... </p>
<pre><code>"{one_digit}:{two_digit}:{one_digit}".format(one_digit=random.randint(1,9),two_digit=random.randint(10,99))
&gt;&gt;&gt;'4:22:4'

"{one_digit}:{two_digit}:{one_digit}".format(one_digit=random.randint(1,9),two_digit=random.randint(10,99))
&gt;&gt;&gt;'7:48:7'

"{one_digit}:{two_digit}:{one_digit}".format(one_digit=random.randint(1,9),two_digit=random.randint(10,99))
&gt;&gt;&gt;'2:28:2'

"{one_digit}:{two_digit}:{one_digit}".format(one_digit=random.randint(1,9),two_digit=random.randint(10,99))
&gt;&gt;&gt;'1:12:1'
</code></pre>
<p>Which is as expected since the numbers are evaluated before hand.  I'd like them to all be random, though.  I tried using a lambda function but only got this:</p>
<pre><code>"test{number}:{number}".format(number=lambda x: random.randint(1,10))
</code></pre>
<p>But that only yields</p>
<pre><code>"test{number}:{number}".format(number=lambda x: random.randint(1,10))

&gt;&gt;&gt;'test&lt;function &lt;lambda&gt; at 0x10aa14e18&gt;:&lt;function &lt;lambda&gt; at 0x10aa14e18&gt;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off: <code>str.format</code> is the wrong tool for the job, because it doesn't allow you to generate a different value for each replacement.</p>
<p>The correct solution is therefore to implement your own replacement function. We'll replace the <code>{one_digit}</code> and <code>{two_digit}</code> format specifiers with something more suitable: <code>{1}</code> and <code>{2}</code>, respectively.</p>
<pre><code>format_string = "{1}:{2}:{1}"
</code></pre>
<p>Now we can use regex to substitute all of these markers with random numbers. Regex is handy because <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> accepts a replacement function, which we can use to generate a new random number every time:</p>
<pre><code>import re

def repl(match):
    num_digits = int(match.group(1))
    lower_bound = 10 ** (num_digits - 1)
    upper_bound = 10 * lower_bound - 1
    random_number = random.randint(lower_bound, upper_bound)
    return str(random_number)

result = re.sub(r'{(\d+)}', repl, format_string)
print(result)  # result: 5:56:1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>import random

r = [1,2,3,4,5]

','.join(map(str,(random.randint(-10**i,10**i) for i in r)))
</code></pre>
<p>The first two params(-10** i, 10**i) are low and upper bound meanwhile size=10 is the amount of numbers).</p>
<p>Example output: <code>'-8,45,-328,7634,51218'</code></p>
<hr/>
<p>Explanation:</p>
<p>It seems you are looking to join random numbers with <code>,</code>. This can simply be done using <code>','.join([array with strings])</code>, e.g. <code>','.join(['1','2'])</code> which would return <code>'1,2'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What about This?</p>
<pre><code>'%s:%s:%s' % (random.randint(1,9),random.randint(10,99),random.randint(1,9))
</code></pre>
<p>EDIT : meeting requirements.</p>
<pre><code>a=[1,2,2,1,3,4,5,9,0] # our definition of the pattern (decimal range)
b= ''
for j in enumerate(a):
    x=random.randint(10**j,10**(j+1)-1)
    b = b + '%s:' % x
print(b)
</code></pre>
<p>sample:</p>
<blockquote>
<blockquote>
<blockquote>
<p>print (b)
      31:107:715:76:2602:99021:357311:7593756971:1:</p>
</blockquote>
</blockquote>
</blockquote>
</div>
<span class="comment-copy">You are repeating 1st and 3rd. Just make them separate!</span>
<span class="comment-copy">@AntonvBR this is a simplified example - for what I'm doing, I have to have hundreds of random integers in the string, making it cumbersome to have separate variables for each.</span>
<span class="comment-copy">Show me your expected output and I'll help you!</span>
<span class="comment-copy">I'm not totally clear on what you're trying to do.. but you can just pass enough random numbers to format? <code>"test{}:{}".format(*random.sample(range(1,11), 2))</code></span>
<span class="comment-copy">@miradulo I'm pretty sure you want <code>random.choices(range(1,11), k=2)</code> (to choose with replacement rather than without). But otherwise, to the extent that I think I know what the OP wants here, I think you've got the right answer.</span>
<span class="comment-copy">Awesome!  Exactly what I need</span>
<span class="comment-copy">Accepted answer :)</span>
<span class="comment-copy">It works, but the issue is that they are all between -10000 and 10000, which makes always a 4 digit number.  I need differing ranges all over the place like in my pasted example.</span>
<span class="comment-copy">I want to define them like in my example, {one_digit},{seven_digit},{twelve_digit} etc</span>
<span class="comment-copy">@dmcmulle A very easy way to do this would be to put the values in an array and then loop through them. 2 lines and that's it.</span>
<span class="comment-copy">@dmcmulle You accepted a really strange answer in my opinion. But if you are happy with it that's fine!!! :)</span>
<span class="comment-copy">It works yep, but I have lots and lots of numbers to generate - here is a sample of the string I need to output (this is 1/8th of it) <code>2,-36,-400,5,1,9,1,4,8,3,7,5,2012945834811,-104890,58004,5,5,3205,6,2,4,9,8,4,09,-7,-9,7682880,3,-12,-053,2,5,8,-75,-684,-6,8,-75,-697,1,0,1,4,8,4,6-6,3,-95,-98,-0,4,-84,-22,07,7,-43,-758,27738278,3,-12,-065,60823,4,-23</code></span>
<span class="comment-copy">got it! I modified the answer with the proper code.</span>
