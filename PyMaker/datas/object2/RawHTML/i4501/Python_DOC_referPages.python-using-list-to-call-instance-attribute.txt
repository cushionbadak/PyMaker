<div class="post-text" itemprop="text">
<p>I am trying to use elements in a list for class instances.  I'm not sure if I'm using the right terminology since I'm new to python, but here's an example in code:</p>
<pre><code>list = ['one', 'two', 'three']

class numbers:
    def __init__(self, letter):
        self.letter = letter

one = numbers('a')
</code></pre>
<p>I am trying to use the list to do something like this:</p>
<pre><code>print(list[0].letter)
</code></pre>
<p>This doesn't seem to work because list[0] is a string.  Is there a work around?  Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your list you create 3 strings:</p>
<pre><code>list = ['one', 'two', 'three']
</code></pre>
<p>Then you create an object of the type numbers:</p>
<pre><code>one = numbers('a')
</code></pre>
<p>This new object is not part of your list. So when you access <code>list[0]</code> you get back the string <code>'one'</code></p>
<p>You need to create the objects before adding them to the list, then create the list.</p>
<pre><code>one = numbers('a')
two = numbers('b')
list_ = [one, two]
list_[0].letter
'a'
</code></pre>
<p>The part you were confusing is the string <code>'one'</code> and the object reference for <code>one</code> variable are not the same thing. The latter is an object, and it has the letter attribute. The former is just a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You really don't want to do what you're asking for. Ned Batchelder has <a href="https://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html" rel="nofollow noreferrer">a great explanation of why</a>. I have <a href="http://stupidpythonideas.blogspot.com/2013/05/why-you-dont-want-to-dynamically-create.html" rel="nofollow noreferrer">a not as great one</a>.</p>
<p>But if you've read those, and you're convinced you actually do have one of those rare cases where it really is the right thing to do, the way to look up a global variable by name is to use the <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals</code></a> function to get the global namespace as a dictionary, then look it up there:</p>
<pre><code>&gt;&gt;&gt; lst = ['one', 'two', 'three']
&gt;&gt;&gt; one = numbers('a')
&gt;&gt;&gt; globals()[lst[0]].letter
'a'
</code></pre>
<hr/>
<p>Notice that you could do this a lot more easily, and a lot more readably, if you just created and used a dictionary in the first place:</p>
<pre><code>&gt;&gt;&gt; dct = {'one': numbers('a'), 'two': numbers('b'), 'three': numbers('c')}
&gt;&gt;&gt; dct['one'].letter
'a'
&gt;&gt;&gt; dct[lst[0]].letter
'a'
</code></pre>
<p>And, besides being more readable and more explicit, it's also more powerful, because you can build any dict you want, not just whatever <code>globals</code> has. You can even build the dict and the numbers together in one fell swoop:</p>
<pre><code>&gt;&gt;&gt; numbers = (numbers(letter) for letter in string.ascii_lowercase)
&gt;&gt;&gt; dct = dict(zip(lst, numbers))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like this?</p>
<pre><code>one = numbers('a')
two = numbers('b')
three = numbers('c')
list = [one, two, three]
</code></pre>
<p>And the result is below.</p>
<pre><code>&gt;&gt;&gt; print(list[0].letter)
a
</code></pre>
</div>
<span class="comment-copy">its getattr , also answered on below link:  <a href="https://stackoverflow.com/questions/4821104/python-dynamic-instantiation-from-string-name-of-a-class-in-dynamically-imported" title="python dynamic instantiation from string name of a class in dynamically imported">stackoverflow.com/questions/4821104/…</a></span>
<span class="comment-copy">you didn't set <code>list[0]</code> to the created object <code>one</code> so it's still a str, which doesn't have any attributes.</span>
<span class="comment-copy">@RehanAzher How is <code>getattr</code> going to help here? There's no object with an attribute named <code>'one'</code> anywhere in his code.</span>
<span class="comment-copy">`[numbers("a"), numbers("b")]'</span>
<span class="comment-copy">I have a gut feeling that what you really want is an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a>. Ignore me if I'm wrong.</span>
<span class="comment-copy">No, rebinding <code>one</code> will <i>not</i> change <code>list_[0]</code>.</span>
<span class="comment-copy">@abarnert you are right. I got confused myself. removed it from my answer and thank you for your comment.</span>
<span class="comment-copy">You want to assign them values after they are in the list?</span>
<span class="comment-copy">I'm trying to avoid assigning anything to the elements in my list as they are being used elsewhere in my actual code.</span>
<span class="comment-copy">Well you can't create a list with non-existent objects, so you have to create them first. If you need to keep to change them and don't want to do it on the actual elements create a copy of these objects.</span>
<span class="comment-copy">Nice workaround using globals, but it really looks wrong to access an object this way.</span>
<span class="comment-copy">@Vinny Yes, and I'm pretty sure it's <i>deliberate</i> that this looks wrong. Python is forcing you to highlight to the reader that you're doing something weird by making it look weird. (Compare to Tcl, where this would be perfectly idiomatic, and… that's part of the reason we're using Python right now instead of Tcl.)</span>
<span class="comment-copy">Dictionaries will definitely work, thanks @abarnert!</span>
<span class="comment-copy">it doesn't explain the problem</span>
