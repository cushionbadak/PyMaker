<div class="post-text" itemprop="text">
<p>Is there anyway for the warnings.warn() function to be caught be a caller while still executing the rest of the code after the warn() call? The problem I am having is that function b will warnings.warn() if something happens, and then I want the rest of that function to finish its job and return a list of what it actually did. If a warning was thrown, I want to catch it, email it to someone, and continue on when I call that function from another module, but that isn't happening. here is what it looks like in code:</p>
<pre><code>import warnings
def warn_function(arg_1):
    if arg_1 &gt; 10:
        warnings.warn("Your argument was greater than 10.")
    return arg_1 - 5

with warnings.catch_warnings():
    warnings.filterwarnings("error")
    try:
        answer = warn_function(20)
    except Warning:
        print("A warning was thrown")
    finally:
        print(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, warnings can warn without exiting out of a function. But the way you're trying to do things just isn't going to work.</p>
<p>Using <a href="https://docs.python.org/3/library/warnings.html#temporarily-suppressing-warnings" rel="nofollow noreferrer"><code>catch_warnings</code></a> with <a href="https://docs.python.org/3/library/warnings.html#the-warnings-filter" rel="nofollow noreferrer">the <code>"error"</code> action</a> means you're explicitly asking Python to raise every warning as an exception. And the Python exception model doesn't have any way to resume from the point where an exception was thrown.</p>
<p>You <em>can</em> reorganize your code to provide explicit ways to "do the rest" after each possible warnings, but for non-trivial cases you either end up doing a ton of work, or building a hacky continuation-passing mechanism.</p>
<hr/>
<p>The right way to handle your use case is <a href="https://docs.python.org/3/library/logging.html#logging.captureWarnings" rel="nofollow noreferrer"><code>logging.captureWarnings</code></a>. This way, all warnings go to a logger named <code>'py.warnings'</code> instead of through the normal warning path. You can then configure a log handler that sends these warnings to someone via email, and you're done.</p>
<p>And of course once you've built this, you can use the exact same handler to get emails sent from high-severity log messages to other loggers, or to add in runtime configuration so you can turn up and down the email threshold without deploying a whole new build of the server, and so on.</p>
<hr/>
<p>If you're not already using <code>logging</code>, it may be easier to hook warnings manually. As <a href="https://docs.python.org/3/library/warnings.html#module-warnings" rel="nofollow noreferrer">the <code>warnings</code> introduction</a> explains:</p>
<blockquote>
<p>The printing of warning messages is done by calling <code>showwarning()</code>, which may be overridden; the default implementation of this function formats the message by calling <code>formatwarning()</code>, which is also available for use by custom implementations.</p>
</blockquote>
<p>Yes, Python is encouraging you to monkeypatch a stdlib module. The code to do this looks something like:</p>
<pre><code>def showwarning(message, category, filename, lineno, file=None, line=None):
    fmsg = warning.formatwarning(message, category, filename, lineno, line)
    # send fmsg by email
warning.showwarning = showwarning
</code></pre>
</div>
