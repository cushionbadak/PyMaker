<div class="post-text" itemprop="text">
<p>I'm trying to learn how to make GUI with tkinter in Python and I'm getting an error that my callback function is undefined. Basically I want a grid of white squares and when you click on the square it will become red.</p>
<pre><code>from tkinter import *

root = Tk()

class Application(Frame):
    def __init__(self, master, *args, **kwargs):
        Frame.__init__(self, master, *args, ** kwargs)
        self.createWidgets()

    def mouse_click(self):
        self.squares.bg = 'red'

    def createWidgets(self):
        for i in range(10):
            for j in range(10):
                self.squares = Button(self, height = 3, width = 7, bg = 'white',
                                      command = lambda: mouse_click())
                self.squares.grid(row = i, column = j)

Application(root).grid()
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple problems in your code.</p>
<ol>
<li><code>mouse_click</code> is an instance method, so it must be referenced as <code>self.mouse_click</code>.</li>
<li>You're overwriting <code>self.squares</code> in each iteration of your loop, so in the end it references the last button you created. This isn't useful and can be removed.</li>
</ol>
<p>The clean way to solve this is to rewrite the <code>mouse_click</code> method to take a button as an argument:</p>
<pre><code>def mouse_click(self, square):
    square['bg'] = 'red'
</code></pre>
<p>And then give each button's <code>command</code> function a reference to the button itself. This can be done with <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>:</p>
<pre><code>def createWidgets(self):
    for i in range(10):
        for j in range(10):
            square = Button(self, height = 3, width = 7, bg = 'white')
            square['command'] = functools.partial(self.mouse_click, square)
            square.grid(row = i, column = j)
</code></pre>
<p>This makes it so that the button's click event handler receives the button as an argument. With these two changes, everything works as intended.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>ommand = lambda: self.mouse_click()</code>.</p>
<p>However, that does not solve all the problems. The other problem is that you are creating a 2D grid of buttons but are storing only the last of them in your class.</p>
<p>The line</p>
<pre><code>                self.squares = Button(...)
</code></pre>
<p>stores only one button. You end up storing a handle to the last <code>Button</code>. The other <code>Button</code>s that you created in previous steps are lost to your class.</p>
<p>Here's my suggestion (not verified):</p>
<pre><code>class Application(Frame):
   def __init__(self, master, *args, **kwargs):
      Frame.__init__(self, master, *args, ** kwargs)
      self.createWidgets()

   def mouse_click(self, i, j):
      self.squares[i][j].bg = 'red'

   def createWidgets(self):

      # Creeate a 2D array that contains None in all the elements.
      self.squares = [[None for x in range(10)] for y in range(10)]

      # Fill up the array.
      for i in range(10):
         for j in range(10):
            # Create a button and display it in the i-th row and j-th
            # column in a grid.
            button = Button(self,
                            height = 3,
                            width = 7,
                            bg = 'white',
                            command = lambda: self.mouse_click(i, j))
            button.grid(row = i, column = j)

            # Store the button for the callback function
            self.squares[i][j] = button
</code></pre>
</div>
<span class="comment-copy">I suspect the missing <code>self</code> is the culprit. Use <code>command = lambda: self.mouse_click()</code></span>
<span class="comment-copy">Thanks. I added in the self but the square still doesn't change color. The function is defined though. When I added a call to print, it worked, but the color didn't change.</span>
<span class="comment-copy">I edited your question to remove the tangential request for off-site resources; such questions are off-topic for Stack Overflow, and your post should just contain a single question anyway.</span>
<span class="comment-copy">One question. Why did you never have to call self on square?</span>
<span class="comment-copy">@Jonathan Umm, I assume you mean "why is it called <code>square</code> and not <code>self.square</code> in your program?". That's because I didn't make it an attribute of <code>self</code>. In my program the button is just a local variable. I don't have to store the button anywhere, because it's already baked into the button command.</span>
<span class="comment-copy">Not exactly sure what you mean by store the button somewhere. I thought the button was stored in the variable square. When would I need to call the buttons variable with self?</span>
<span class="comment-copy">@Jonathan Yes it's stored in <code>square</code>, but that variable stops existing when the <code>createWidgets</code> function ends. Not sure how to answer your question though. You store things in attributes if your class needs access to them. You can use attributes to exchange data between two methods of the same class. But I don't need to do that, so I'm not storing the buttons in an attribute.</span>
<span class="comment-copy">I think I understand. Thanks for all the help.</span>
<span class="comment-copy">This has the same problem as my code where the button won't turn red. Also this only makes a 10 by 1 grid.</span>
