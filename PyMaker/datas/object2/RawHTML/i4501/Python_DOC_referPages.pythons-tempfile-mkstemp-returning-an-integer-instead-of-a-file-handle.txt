<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp" rel="nofollow noreferrer">https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp</a>, </p>
<blockquote>
<p><code>mkstemp()</code> returns a tuple containing an OS-level handle to an open file (as would be returned by <code>os.open()</code>) and the absolute pathname of that file, in that order.</p>
</blockquote>
<p>However, from these shell commands, it looks like the first member of the tuple is an integer, not a file handle:</p>
<pre><code>In [18]: temp = tempfile.mkstemp(suffix='.html')

In [19]: temp
Out[19]: (17, '/var/folders/dc/nv4yxcrd0zqd2dtxlj281b740000gn/T/tmpktmb2gjg.html')

In [20]: type(temp[0])
Out[20]: int
</code></pre>
<p>Do I have to get the file handle by using <code>open(temp[1])</code>? Why is it not returning a file handle?</p>
</div>
<div class="post-text" itemprop="text">
<p>That’s expected behaviour, because OS-level <a href="https://en.wikipedia.org/wiki/File_descriptor" rel="nofollow noreferrer">file handles</a> are integers.</p>
<p>There are  <a href="https://docs.python.org/3/library/os.html#file-descriptor-operations" rel="nofollow noreferrer">several functions in the <code>os</code> module</a> that’ll accept such integers:</p>
<blockquote>
<p>These functions operate on I/O streams referenced using file descriptors.</p>
<p>File descriptors are small integers corresponding to a file that has been opened by the current process. For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2. Further files opened by a process will then be assigned 3, 4, 5, and so forth. The name “file descriptor” is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors.</p>
</blockquote>
<p>They are not Python file objects but you could create a Python file object for a given descriptor with <a href="https://docs.python.org/3/library/io.html#io.FileIO" rel="nofollow noreferrer"><code>io.FileIO()</code></a>.</p>
<p>However, if all you wanted was a temporary file as a Python file object, just stick to the higher-level functions of the <code>temp</code> module, such as <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile" rel="nofollow noreferrer"><code>tempfile.TemporaryFile()</code></a>.</p>
</div>
<span class="comment-copy">If you want an actual file-like <i>object</i>, not a file <i>handle</i> (aka file <i>descriptor</i>, a plain <code>int</code>), use the higher level classes, <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer">like <code>tempfile.NamedTemporaryFile</code></a>. That will get you an open file object, and the <code>.name</code> attribute of the object will provide the name. Bonus: When closed, the temp file is automatically deleted for you (or if you want to keep it, you construct with <code>delete=False</code>; it's up to you to delete it or not). <code>NamedTemporaryFile</code> is implemented in terms of <code>mkstemp</code>, so it's equally secure.</span>
