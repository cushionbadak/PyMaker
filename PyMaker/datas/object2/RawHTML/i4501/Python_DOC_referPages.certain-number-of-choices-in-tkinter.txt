<div class="post-text" itemprop="text">
<p>I made a checkbar in Tkinter with many items but I want the user can only choose the equal or less than a certain number of items. This is my current code:</p>
<pre><code>from tkinter import *

class Checkbar(Frame):
    def __init__(self, parent=None, picks=[], side=LEFT, anchor=W):
        Frame.__init__(self, parent)

        self.vars = []
        for pick in picks:
            var = IntVar()
            chk = Checkbutton(self, text=pick, variable=var)
            chk.pack(side=side, anchor=anchor, expand=YES)
            self.vars.append(var)

    def state(self):
        return [var.get() for var in self.vars]


root = Tk()

lng = Checkbar(root, range(10))
lng.pack(side=TOP,  fill=BOTH)

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The checkbar needs attributes for the maximum and current number of buttons checked.  You then need a command that is called each time a checkbutton is clicked.  The command is called without arguments <em>after</em> the variable is changed.</p>
<p>If possible, code should be posted without dependency on as external file.  In this case, just pass a list of strings.  (I copied before Aran-Fey's edit.)</p>
<pre><code>from tkinter import *

def checkmax(bar, var):
    # called after the intvar is changed
    def _check():
        print(bar.numpicks, var.get())
        if var.get():  # checked
            if bar.numpicks &lt; bar.maxpicks:
                bar.numpicks += 1
            else:
                var.set(0)
        else:             # unchecked
            bar.numpicks -= 1
    return _check


class Checkbar(Frame):
   def __init__(self, parent=None, picks=[], maxpicks=2, side=LEFT, anchor=W):
      Frame.__init__(self, parent)
      self.maxpicks = maxpicks
      self.numpicks = 0
      self.vars = []
      for pick in picks:
         var = IntVar()
         chk = Checkbutton(self, text=pick, variable=var,
                           command=checkmax(self, var))
         chk.pack(side=side, anchor=anchor, expand=YES)
         self.vars.append(var)


   def state(self):
        return map((lambda var: var.get()), self.vars)



if __name__ == '__main__':
   root = Tk()
   lng = Checkbar(root, ['a', 'b', 'c', 'd'], 2)

   lng.pack(side=TOP,  fill=BOTH)

   lng.config(relief=GROOVE, bd=2)

   def allstates():
      print( list(lng.state() ) )

   Button(root, text = 'Quit', command = root.quit).pack(side = RIGHT)
   Button(root, text = 'submit', command = allstates).pack(side = RIGHT)
   root.mainloop()
</code></pre>
<p>You should add a label as to the max number that can be checked.</p>
<p>Added note: When the Python IntVar is passed as the Checkbutton variable, it is replaced by a _tkinter.Tcl_Obj that does not have the .get and .set methods.  So the command needs a reference to the IntVar instance as chk['variable'].get does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be done by disabling all unchecked CheckButtons when the maximum number of CheckButtons is checked. Disabling the CheckButtons improves the user-friendlyness, because it gives the user a visual clue that no more buttons can be checked. If we didn't disable the CheckButtons, the user might be confused why nothing happens when he tries to click a CheckButton.</p>
<hr/>
<p>For the implementation of this feature, we have to connect a callback function to each CheckButton. The callback functions counts how many buttons are checked, and disables or enables the other buttons accordingly.</p>
<p>The first thing we have to do is to rewrite the <code>__init__</code> method. The <code>Checkbar</code> needs a new parameter how many Checkbuttons can be checked at the same time. We also have to connect the callback function to each CheckButton. I used <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> to bind the checkbutton's variable to the callback function.</p>
<pre><code>def __init__(self, parent=None, picks=[], maxselect=1, side=tk.LEFT,
                   anchor=tk.W):
    super().__init__(parent)

    self.maxselect = maxselect

    # store all variables and checkbuttons; the callback function
    # needs access to them
    self._vars = []
    self._checkbuttons = []

    for pick in picks:
        var = tk.IntVar()
        # bind the callback function to each checkbutton
        chk = tk.Checkbutton(self, text=pick, variable=var,
                             command=partial(self._var_toggled, var))
        chk.pack(side=side, anchor=anchor, expand=tk.YES)

        self._vars.append(var)
        self._checkbuttons.append(chk)
</code></pre>
<p>Now all that's left is to implement the callback function. It simply needs to count how many checkbuttons are checked, and enable or disable them accordingly:</p>
<pre><code>def _var_toggled(self, var):
    # count how many checkbuttons are checked
    num = sum(v.get() for v in self._vars)

    if num == self.maxselect:
        # if we're at maxselect, disable all unchecked checkbuttons
        for var, chk in zip(self._vars, self._checkbuttons):
            if not var.get():
                chk['state'] = tk.DISABLED
    else:
        # otherwise, re-enable all checkbuttons
        for chk in self._checkbuttons:
            chk['state'] = tk.NORMAL
</code></pre>
<p>(The <code>var</code> parameter comes from the <code>functools.partial</code> we used earlier.)</p>
<hr/>
<p>The complete code:</p>
<pre><code>from functools import partial
import tkinter as tk

class Checkbar(tk.Frame):
    def __init__(self, parent=None, picks=[], maxselect=1, side=tk.LEFT,
                       anchor=tk.W):
        super().__init__(parent)

        self.maxselect = maxselect

        # store all variables and checkbuttons; the callback function
        # needs access to them
        self._vars = []
        self._checkbuttons = []

        for pick in picks:
            var = tk.IntVar()
            # bind the callback function to each checkbutton
            chk = tk.Checkbutton(self, text=pick, variable=var,
                                 command=partial(self._var_toggled, var))
            chk.pack(side=side, anchor=anchor, expand=tk.YES)

            self._vars.append(var)
            self._checkbuttons.append(chk)

    def _var_toggled(self, var):
        # count how many checkbuttons are checked
        num = sum(v.get() for v in self._vars)

        if num == self.maxselect:
            # if we're at maxselect, disable all unchecked checkbuttons
            for var, chk in zip(self._vars, self._checkbuttons):
                if not var.get():
                    chk['state'] = tk.DISABLED
        else:
            # otherwise, re-enable all checkbuttons
            for chk in self._checkbuttons:
                chk['state'] = tk.NORMAL
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally would use a single list of lists.</p>
<p>I can assign the <code>Checkbutton()</code> and the corresponding <code>IntVar()</code> to a list inside of a list.</p>
<p>This will allow me to check each index for the IntVar() status and lock or unlock the checkbuttons accordingly.</p>
<p>Take a look at the below code and let me know if you have any questions.</p>
<pre><code>from tkinter import *

class Checkbar(Frame):
    def __init__(self, parent=None, picks=[], side=LEFT, anchor=W):
        Frame.__init__(self, parent)

        self.vars = []

        for pick in picks:
            var = IntVar()
            # appending self.vars with a list of 2 objects at each index.
            self.vars.append([Checkbutton(self, text=pick, command=self.check_count, variable = var), var])
            self.vars[pick][0].grid(row=0, column=pick)
            self.vars[pick][0].bind("&lt;Configure&gt;")

    # each time a Checkbutton is selected this method runs.
    def check_count(self):
        counter = 0
        # if the Checkbutton being looked at is check it will add a counter
        for cbtn in self.vars:
            if cbtn[1].get() == 1:
                counter += 1
        # if the counter reaches 3 then all Checkbuttons not selected will grey out.
        if counter == 3:
            for cbtn in self.vars:
                if cbtn[1].get() != 1:
                    cbtn[0].config(state="disabled")
        # if counter not 3 then all Checkbuttons are normal.
        else:
            for cbtn in self.vars:
                cbtn[0].config(state="normal")


if __name__ == "__main__":
    root = Tk()
    Checkbar(root, range(10)).pack(fill=BOTH)
    root.mainloop()
</code></pre>
</div>
<span class="comment-copy">So what should happen if the user tries to select more checkbuttons than allowed? Should another button be deselected? Should an error message pop up?</span>
<span class="comment-copy">We will need to know the desired outcome in order to help. You can go several directions with this.</span>
<span class="comment-copy">@Aran-Fey sorry about that. I want the user can't choose any more after that. but if deselect some then can choose other buttons.</span>
