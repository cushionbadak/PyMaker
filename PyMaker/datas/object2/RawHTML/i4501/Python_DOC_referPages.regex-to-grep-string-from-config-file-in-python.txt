<div class="post-text" itemprop="text">
<p>I have config file which contains network configurations something like given below. </p>
<pre><code>LISTEN=192.168.180.1 #the network which listen the traffic 
NETMASK=255.255.0.0
DOMAIN =test.com
</code></pre>
<p>Need to grep the values from the config. the following is my current code.</p>
<pre><code>import re
with open('config.txt') as f:
      data = f.read()
      listen =  re.findall('LISTEN=(.*)',data)
      print listen
</code></pre>
<p>the variable  listen contains</p>
<blockquote>
<p>192.168.180.1 #the network which listen the traffic</p>
</blockquote>
<p>but I no need the commented information but sometimes comments may not exist like other "NETMASK"</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to this using regular expressions I would suggest changing it to <code>LISTEN=([^#$]+)</code></p>
<p>Which should match anything up to the pound sign opening the comment or a newline character.</p>
</div>
<div class="post-text" itemprop="text">
<p>I come up with solution which will have common regex and replace "#".</p>
<pre><code>import re
data = '''
LISTEN=192.168.180.1 #the network which listen the traffic
NETMASK=255.255.0.0
DOMAIN =test.com
'''
#Common regex to get all values
match =  re.findall(r'.*=(.*)#*',data)

print "Total match found"
print match

#Remove # part if any
for index,val in enumerate(match):
    if "#" in val:
        val = (val.split("#")[0]).strip()
        match[index] = val

print "Match after removing #"
print match
</code></pre>
<p><strong>Output :</strong></p>
<pre><code>Total match found
['192.168.180.1 #the network which listen the traffic', '255.255.0.0', 'test.com']

Match after removing #
['192.168.180.1', '255.255.0.0', 'test.com']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>data = """LISTEN=192.168.180.1 #the network which listen the traffic"""
import re
print(re.search(r'\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}', data).group())
&gt;&gt;&gt;192.168.180.1
print(re.search(r'[0-9]+(?:\.[0-9]+){3}', data).group())
&gt;&gt;&gt;192.168.180.1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my experience regex is slow runtime and not very readable. I would do:</p>
<pre><code>with open('config.txt') as f:
    for line in f:
        if not line.startswith("LISTEN="):
            continue
        rest = line.split("=", 1)[1]
        nocomment = rest.split("#", 1)[0]
        print nocomment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the better approach is to read the whole file as the format it is given in. I wrote a couple of tutorials, e.g. for <a href="https://stackoverflow.com/a/42054860/562769">YAML</a>, <a href="https://stackoverflow.com/questions/41585078/how-do-i-read-and-write-csv-files-with-python/41585079#41585079">CSV</a>, <a href="https://stackoverflow.com/questions/12309269/how-do-i-write-json-data-to-a-file/37795053#37795053">JSON</a>.</p>
<p>It looks as if this is an INI file.</p>
<h2>Example Code</h2>
<h3>Example INI file</h3>
<p>INI files need a header. I assume it is <code>network</code>:</p>
<pre><code>[network]
LISTEN=192.168.180.1 #the network which listen the traffic 
NETMASK=255.255.0.0
DOMAIN =test.com
</code></pre>
<h3>Python 2</h3>
<pre><code>#!/usr/bin/env python

import ConfigParser
import io

# Load the configuration file
with open("config.ini") as f:
    sample_config = f.read()
config = ConfigParser.RawConfigParser(allow_no_value=True)
config.readfp(io.BytesIO(sample_config))

# List all contents
print("List all contents")
for section in config.sections():
    print("Section: %s" % section)
    for options in config.options(section):
        print("x %s:::%s:::%s" % (options,
                                  config.get(section, options),
                                  str(type(options))))

# Print some contents
print("\nPrint some contents")
print(config.get('other', 'use_anonymous'))  # Just get the value
</code></pre>
<h3>Python 3</h3>
<p>Look at <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer"><code>configparser</code></a>:</p>
<pre><code>#!/usr/bin/env python

import configparser

# Load the configuration file
config = configparser.RawConfigParser(allow_no_value=True)
with open("config.ini") as f:
    config.readfp(f)

# Print some contents
print(config.get('network', 'LISTEN'))
</code></pre>
<p>gives:</p>
<pre><code>192.168.180.1 #the network which listen the traffic
</code></pre>
<p>Hence you need to parse that value as well, as INI seems not to know <code>#</code>-comments.</p>
</div>
<span class="comment-copy">Split the text found using split iwith "#" and keep the first part of it.</span>
<span class="comment-copy">It can be , but I believe it can solve by the regex itself. if it is possible I no need to write another line of code to split it.</span>
<span class="comment-copy">Regex is a complex tool. I suggest you study it thoroughly before attempting to use it. Also regex is not very efficient, so maybe you should consider just using "split" as @Rao mentions.</span>
<span class="comment-copy">It won't work with configuration which don't have comments.</span>
<span class="comment-copy">It does as can be seen here: <a href="https://regex101.com/r/JyDV7m/1" rel="nofollow noreferrer">regex101.com/r/JyDV7m/1</a></span>
<span class="comment-copy">The output of <code>re.findall('NETMASK=([^#$]+)',data)</code> is ['255.255.0.0\nDOMAIN =test.com'], it is wrong.</span>
<span class="comment-copy">You should improve your answer and add an explanation, what your code does and why this solves the problem of the OP.</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion.</span>
