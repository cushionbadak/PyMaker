<div class="post-text" itemprop="text">
<p>Let's say I have a list of list contains tabs character:</p>
<pre><code>mylist = [['line 1', '&lt;a href="//&lt;% serverNames[0].getHostname() %&gt;:'],
          ['line 2', '     &lt;% master.getConfiguration()&gt;']]
</code></pre>
<p>When I save the list into <code>CSV</code> file, the <code>tab</code> in the code at line 2 will be written <code>\t</code>. </p>
<pre><code>line | code
-----------------------------------------------------
   1 | &lt;a href="//&lt;% serverNames[0].getHostname() %&gt;:
   2 | \t   &lt;% master.getConfiguration()&gt;
</code></pre>
<p>I need this as it is because I want to compare the code with other lists. So, I don't want to replace the tab with other characters such as spaces.</p>
<p>The code I have written:</p>
<pre><code>with open('codelist.csv', 'w') as file:
   header = ['line','code']
   writers = csv.writer(file)
   writers.writerow(header)
   for row in mylist:
      writers.writerow(row)
</code></pre>
<p>How to solve this kind of problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>I can't reproduce the exact error in either Python2 or Python3 but I have a guess about what <em>might</em> be going on.</p>
<p>According to the documentation for <code>csv.writer</code>, <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer">located here</a>, </p>
<blockquote>
<p>All other non-string data are stringified with str() before being written.</p>
</blockquote>
<p>Note moreover that the python <code>str</code> function induces precisely the behavior you describe if you supply a string containing an actual tab character:</p>
<pre><code> &gt;&gt;&gt; str('  ')
 '\t'
</code></pre>
<p>Of course, what you have is string data, but, but the documentation above doesn't really say what <em>other</em> means.  Here's what I found in the implementation of <code>writerows</code> in <code>_csv.c</code>, <a href="https://github.com/python/cpython/blob/master/Modules/_csv.c" rel="nofollow noreferrer">located here</a>:</p>
<pre><code>    if (PyUnicode_Check(field)) {
        append_ok = join_append(self, field, quoted);
        Py_DECREF(field);
    }
    else if (field == Py_None) {
        append_ok = join_append(self, NULL, quoted);
        Py_DECREF(field);
    }
    else {
        PyObject *str;

        str = PyObject_Str(field);
        Py_DECREF(field);
        if (str == NULL) {
            Py_DECREF(iter);
            return NULL;
        }
        append_ok = join_append(self, str, quoted);
        Py_DECREF(str);
    }
</code></pre>
<p>So I suspect what's going on here is that somehow your list contains string data in a format that's not recognized as a unicode string, and which consequently fails the <code>PyUnicode_Check</code> branch in the test, gets sent through <code>str</code> (referred to as <code>PyObject_Str</code> in the C code), and consequently gets the escape sequence embedded.</p>
<p>So you might want to check how that data is getting into your lists.</p>
<p>Alternatively, maybe the source I'm looking at there doesn't correspond to the version of Python you're using, and you're using a version that, say, just runs <em>everything</em> through <code>str</code>.</p>
</div>
<span class="comment-copy">Couldnt reproduce this. output is without \t in my machine.</span>
<span class="comment-copy">can you try replacing <code>'     '</code> with <code>\t</code> in the <code>mylist[1]</code></span>
<span class="comment-copy">No, I can't. I tried to replace using <code>mylist[1].replace("\t",'   ')</code>. It works!! The <code>\t</code> was removed, but when I compared with other list contains tabs, it is assumed to be different. It should be similar.</span>
<span class="comment-copy">try <code>mylist[1].replace('    ',"\t")</code></span>
