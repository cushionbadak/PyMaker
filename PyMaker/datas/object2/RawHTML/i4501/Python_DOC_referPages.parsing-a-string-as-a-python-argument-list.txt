<div class="post-text" itemprop="text">
<h2>Summary</h2>
<p>I would like to parse a string that represents a Python argument list into a form that I can forward to a function call.</p>
<h2>Detailed version</h2>
<p>I am building an application in which I would like to be able to parse out argument lists from a text string that would then be converted into the <code>*args,**kwargs</code> pattern to forward to an actual method. For example, if my text string is:</p>
<pre><code>"hello",42,helper="Larry, the \"wise\""
</code></pre>
<p>the parsed result would be something comparable to:</p>
<pre><code>args=['hello',42]
kwargs={'helper': 'Larry, the "wise"'}
</code></pre>
<p>I am aware of Python's <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">ast</a> module, but it only seems to provide a mechanism for parsing entire statements. I can sort of fake this by manufacturing a statement around it, e.g.</p>
<pre><code>ast.parse('f("hello",42,helper="Larry, the \"wise\"")'
</code></pre>
<p>and then pull the relevant fields out of the <code>Call</code> node, but this seems like an awful lot of roundabout work.</p>
<p>Is there any way to parse just one known node type from a Python AST, or is there an easier approach for getting this functionality?</p>
<p>If it helps, I only need to be able to support numeric and string arguments, although strings need to support embedded commas and escaped-out quotes and the like.</p>
<p>If there is an existing module for building lexers and parsers in Python I am fine with defining my own AST, as well, but obviously I would prefer to just use functionality that already exists and has been tested correct and so on.</p>
<p><strong>Note</strong>: Many of the answers focus on how to store the parsed results, but that's not what I care about; it's the parsing itself that I'm trying to solve, ideally without writing an entire parser engine myself.</p>
<p>Also, my application is already using <a href="http://jinja.pocoo.org/" rel="nofollow noreferrer">Jinja</a> which has a parser for Python-ish expressions in its own template parser, although it isn't clear to me how to use it to parse just one subexpression like this. (This is unfortunately not something going into a template, but into a custom Markdown filter, where I'd like the syntax to match its matching Jinja template function as closely as possible.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>ast.parse</code> is your best option.</p>
<p>If the parameters were separated by whitespace, we could use <a href="https://docs.python.org/3/library/shlex.html#shlex.split" rel="nofollow noreferrer"><code>shlex.split</code></a>:</p>
<pre><code>&gt;&gt;&gt; shlex.split(r'"hello" 42 helper="Larry, the \"wise\""')
['hello', '42', 'helper=Larry, the "wise"']
</code></pre>
<p>But unfortunately, that doesn't split on commas:</p>
<pre><code>&gt;&gt;&gt; shlex.split(r'"hello",42,helper="Larry, the \"wise\""')
['hello,42,helper=Larry, the "wise"']
</code></pre>
<p>I also thought about using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>, but that doesn't support keyword arguments:</p>
<pre><code>&gt;&gt;&gt; ast.literal_eval(r'"hello",42')
('hello', 42)
&gt;&gt;&gt; ast.literal_eval(r'"hello",42,helper="Larry, the \"wise\""')
Traceback (most recent call last):
  File "&lt;unknown&gt;", line 1
    "hello",42,helper="Larry, the \"wise\""
                     ^
SyntaxError: invalid syntax
</code></pre>
<p>I couldn't think of any python literal that supports both positional and keyword arguments.</p>
<hr/>
<p>In lack of better ideas, here's a solution using <a href="https://docs.python.org/3/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>ast.parse</code></a>:</p>
<pre><code>import ast

def parse_args(args):
    args = 'f({})'.format(args)
    tree = ast.parse(args)
    funccall = tree.body[0].value

    args = [ast.literal_eval(arg) for arg in funccall.args]
    kwargs = {arg.arg: ast.literal_eval(arg.value) for arg in funccall.keywords}
    return args, kwargs
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; parse_args(r'"hello",42,helper="Larry, the \"wise\""')
(['hello', 42], {'helper': 'Larry, the "wise"'})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re</code> and a simple class to keep track of the tokens:</p>
<pre><code>import re
class Akwargs:
   grammar = r'"[\w\s_]+"|"[\w\s,_"]+"|\d+|[a-zA-Z0-9_]+|\='
   def __init__(self, tokens):
      self.tokens = tokens
      self.args = []
      self.kwargs = {}
      self.parse()
   def parse(self):
      current = next(self.tokens, None)
      if current:
         check_next = next(self.tokens, None)
         if not check_next:
            self.args.append(re.sub('^"+|"+$', '', current))
         else:
            if check_next == '=':
               last = next(self.tokens, None)
               if not last:
                   raise ValueError("Expecting kwargs key")
               self.kwargs[current] = re.sub('^"|"$', '', last)
            else:
               self.args.extend(list(map(lambda x:re.sub('^"+|"+$', '', x), [current, check_next])))
         self.parse()

s = '"hello",42,helper="Larry, the \"wise\""'
tokens = iter(re.findall(Akwargs.grammar, s))
params = Akwargs(tokens)
print(params.args)
print(params.kwargs)
</code></pre>
<p>Output:</p>
<pre><code>['hello', '42']
{'helper': 'Larry, the "wise"'}
</code></pre>
<p>Full tests:</p>
<pre><code>strings = ['23,"Bill","James"', 'name="someone",age=23,"testing",300','"hello","42"',  "hello=42", 'foo_bar=5']
new_data = [(lambda x:[getattr(x, i) for i in ['args', 'kwargs']])(Akwargs(iter(re.findall(Akwargs.grammar, d)))) for d in strings]
</code></pre>
<p>Output:</p>
<pre><code>[[['23', 'Bill', 'James'], {}], [['testing', '300'], {'age': '23', 'name': 'someone'}], [['hello', '42'], {}], [[], {'hello': '42'}], [[], {'foo_bar': '5'}]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not entirely what you wanted, but it comes close.</p>
<pre><code>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--helper')
&gt;&gt;&gt; kwargs,args = parser.parse_known_args(["hello",'42','--helper="Larry, the \"wise\""'])
&gt;&gt;&gt; vars(kwargs)
{'helper': '"Larry, the "wise""'}
&gt;&gt;&gt; args
['hello', '42']
</code></pre>
</div>
<span class="comment-copy">Do you need to use the ast library or would you also consider alternative solutions?</span>
<span class="comment-copy">Have you considered using <code>ast.literal_eval() </code> from the ast library? <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">Here is the documentation.</a></span>
<span class="comment-copy">@FilippoCosta I stated in the question I'm fine with using something else; the AST module was merely an example of one way of doing it.</span>
<span class="comment-copy">@PedroLobito I'm not looking for a command line argument parser (of which Python already has several), I'm looking for a Python expression arglist parser</span>
<span class="comment-copy">@A.Wenn <code>literal_eval</code> seems to parse only a single literal, and not a whole set of them. It might be useful as a building block for the full solution but it doesn't quite get me to where I need to be (for example it doesn't know how to consume just one literal as a token)</span>
<span class="comment-copy">Thanks, that <code>ast.parse</code> approach is pretty much what I was expecting to have to do. I'm hoping someone else has a simpler approach but this might be what I end up accepting.</span>
<span class="comment-copy">That said it looks like for the bigger picture of what I'm trying to do I might be better off just writing a parser/lexer with <a href="http://www.dabeaz.com/ply/" rel="nofollow noreferrer">PLY</a>. But this definitely gets me on the right path for a shorter-term solution!</span>
<span class="comment-copy">You'll need to work on that regex. This doesn't parse <code>"hello","42"</code> or <code>"hello=42"</code> or <code>foo_bar=5</code> correctly.</span>
<span class="comment-copy">@Aran-Fey Please see my recent edit.</span>
<span class="comment-copy">Well, it parses <code>"hello","42"</code> correctly now, but the other two still don't work as expected. <code>"hello=42"</code> should be a single string instead of a keyword argument, and <code>foo_bar=5</code> is split into <code>['foo', 'bar', '=', '5']</code>. There's also <code>"escaped \" quote"</code>, which is incorrectly split into two arguments. I don't think regex is the right approach for this task, really. It's more trouble than it's worth.</span>
<span class="comment-copy">@Aran-Fey The grammar just needs to be updated as these types of input come to light. I do agree, however, that regex is probably not powerful enough.</span>
<span class="comment-copy">This doesn't really answer my question at all?</span>
<span class="comment-copy">It is a response to the problem statement <i>I would like my result to be something like...</i>. It appears that there isn't a satisfactory answer to the question <i>How do I use <code>ast</code> to do this?</i> so all I was doing was asking you to consider the problem from a different angle.</span>
<span class="comment-copy">The problem I was stating wasn't "I would like my result to be something like," it was "I would like to parse this string"</span>
<span class="comment-copy">Excuse me, you question contains exactly that phrase. I cut'n'pasted it.</span>
<span class="comment-copy">Yes but context matters. The "something like" was an example of how the output of the function could look, but it's the <i>input</i> that's important. Anyway I've edited the question several times to clarify, so please reread it.</span>
