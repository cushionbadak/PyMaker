<div class="post-text" itemprop="text">
<p>I have a parent function which should run 2 tests on a data set.
if any of these tests fail parent function should return fail. I want to run these 2 tests asynchronously with <strong>asyncio</strong> and as soon as one of the tests failed, parent function should return fail and cancel the other test. <br/>
I'm new to <em>asyncio</em> and read some examples with the condition <a href="https://www.programcreek.com/python/example/85359/asyncio.Condition" rel="nofollow noreferrer">here</a> but couldn't figure out how to write asyncio with conditions.<br/>
so far I could handle it by throwing exceptions in any test that has been failed. <br/>
here is my basic code:</p>
<pre><code>async def test1(data):
    # run some test on data and return true on pass and throw exception on fail

async def test2(data):
    # run some test on data and return true on pass and throw exception on fail


ioloop = asyncio.get_event_loop()
tasks = [ioloop.create_task(test1(data)), ioloop.create_task(test2(data))]
finished, unfinished = ioloop.run_until_complete(asyncio.wait(tasks, return_when=asyncio.FIRST_EXCEPTION))
</code></pre>
<p>but I don't think it's a proper way to handle conditions. <br/>
so I want a basic example of how to create and handle conditions with <em>ayncio</em>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>as soon as one of the tests failed, parent function should return fail and cancel the other test.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer"><code>asyncio.gather</code></a> does that automatically:</p>
<pre><code>loop = asyncio.get_event_loop()
tasks = [loop.create_task(test1(data)), loop.create_task(test2(data))]
try:
    loop.run_until_complete(asyncio.gather(*tasks))
except FailException:  # use exception raised by the task that fails
    print('failed')
</code></pre>
<p>When any task executed in <code>asyncio.gather</code> raises an exception, all other tasks will be canceled using <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel" rel="nofollow noreferrer"><code>Task.cancel</code></a>, and the exception will be propagated to the awaiter of <code>gather</code>. You don't need a <code>Condition</code> at all, cancellation will automatically interrupt whatever blocking operation the tasks were waiting on.</p>
<p>Conditions are needed when a task that is otherwise idle (or many such tasks) needs to wait for an event that can happen in some other task. In that case it waits on a condition and is <em>notified</em> of it occurring. If the task is just going about its business, you can cancel it any time you like, or let functions like <code>asyncio.gather</code> or <code>asyncio.wait_for</code> do it for you.</p>
</div>
