<div class="post-text" itemprop="text">
<p>In the snippet below I have a segment of code that is currently acting as I want it to:</p>
<pre><code>def weave_iterable(*iters):
    return ''.join('{}'.format('{}'*len(chars)).format(*chars) for chars in zip(*iters))

&gt;&gt;&gt; string1 = 'aeim'
&gt;&gt;&gt; string2 = 'bfjn'
&gt;&gt;&gt; string3 = 'cgko'
&gt;&gt;&gt; string4 = 'dhlp'
&gt;&gt;&gt; string5 = '----'
&gt;&gt;&gt; iterable_args = (string1, string2, string3, string4, string5)
&gt;&gt;&gt; weave_iterable(*iterable_args)
'abcd-efgh-ijkl-mnop-'
</code></pre>
<p>However, I am wondering if there is a more efficient and/or more Pythonic way of formatting text that is being returned by my <code>weave_iterable</code> function?  Specifically, I'm wondering if there is any way I can avoid using <code>.format()</code> twice, due to the unknown number of arguments passed into this function.  I am developing in Python 2.7, but would be happy with an answer in Python 3.x</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.4/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to group corresponding elements of your iterables and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertool.chain</code></a> to flat the resulting grouped iterables. Then you can directly pass the result to <code>join</code> method:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; l = ['aeim', 'bfjn', 'cgko','dhlp','----']
&gt;&gt;&gt; "".join(chain(*zip(*l)))
&gt;&gt;&gt; 'abcd-efgh-ijkl-mnop-'
</code></pre>
<p>Your function will become</p>
<pre><code>&gt;&gt;&gt; def weave_iterable(*iters):
       return "".join(chain(*zip(*iters)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can invoke <code>''.join()</code> once more to avoid the <code>{}*len(xx)</code>.</p>
<pre><code>return ''.join(''.join(chars) for chars in zip(*iters))
</code></pre>
<p>Full program:</p>
<pre><code>def weave_iterable(*iters):
    return ''.join(''.join(chars) for chars in zip(*iters))

string1 = 'aeim'
string2 = 'bfjn'
string3 = 'cgko'
string4 = 'dhlp'
string5 = '----'
assert weave_iterable(string1, string2, string3, string4, string5) == 'abcd-efgh-ijkl-mnop-'
</code></pre>
<p>Aside: If you always want hyphen-separated clusters of letters, you can specify that with <code>'-'.join(...)</code>, like so:</p>
<pre><code>def weave_iterable(*iters):
    return '-'.join(''.join(chars) for chars in zip(*iters))

string1 = 'aeim'
string2 = 'bfjn'
string3 = 'cgko'
string4 = 'dhlp'
assert weave_iterable(string1, string2, string3, string4) == 'abcd-efgh-ijkl-mnop'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also <code>interleave</code> the strings and <code>intersperse</code> the dash at intervals using the <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> third-party library:</p>
<pre><code>import more_itertools as mit


s1 = "aeim"
s2 = "bfjn"
s3 = "cgko"
s4 = "dhlp"

"".join(mit.intersperse("-", mit.interleave(s1, s2, s3, s4), n=4)) + "-"
# 'abcd-efgh-ijkl-mnop-'
</code></pre>
</div>
<span class="comment-copy">does the formatter '-' differ?</span>
<span class="comment-copy"><code>string5</code> was purely to demonstrate an example, but thanks for pointing out that I should absolutely have a <code>sep</code> argument.  My question specifically refers to the formatting inside the <code>.join()</code> function.</span>
