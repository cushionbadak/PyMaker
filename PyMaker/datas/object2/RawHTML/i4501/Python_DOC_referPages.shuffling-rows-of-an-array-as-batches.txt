<div class="post-text" itemprop="text">
<p>I have an array of dimension <code>(m,n)</code>. The values in the first column of the array is common to a certain subset of rows, and I would like to randomly shuffle the rows of the entire array while keeping together the rows that share the same value in the first column.</p>
<p>If I use <code>numpy.random.shuffle()</code> it shuffles all rows indiscriminately. But I want to ensure all rows with the same value in the first column remain together sequentially in the array. Any ad-hoc methods that I could create seem a bit cumbersome, but here is essentially my goal: </p>
<p><strong>Example</strong></p>
<p>input:</p>
<pre><code>array([[  120325,  0.053, 4.23],
       [  120325,  32.232, 5.2],
       [  321,  243.4, 454],
       [  321,  4533.4, 232],
       [  321,  23.5, 108],
       [  27,  0, 454],
       [  27,  10, 32.0]])
</code></pre>
<p>output (which should be randomly shuffled in batches):</p>
<pre><code>array([[  321,  243.4, 454],
       [  321,  4533.4, 232],
       [  321,  23.5, 108],
       [  27,  0, 454],
       [  27,  10, 32.0],
       [  120325,  0.053, 4.23],
       [  120325,  32.232, 5.2]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> to accomplish this:</p>
<pre><code>x = [[  120325,  0.053, 4.23],
       [  120325,  32.232, 5.2],
       [  321,  243.4, 454],
       [  321,  4533.4, 232],
       [  321,  23.5, 108],
       [  27,  0, 454],
       [  27,  10, 32.0]]

together = [list(i) for _, i in itertools.groupby(x, operator.itemgetter(0))]
# [[[120325, 0.053, 4.23], [120325, 32.232, 5.2]], [[321, 243.4, 454], [321, 4533.4, 232], [321, 23.5, 108]], [[27, 0, 454], [27, 10, 32.0]]]

random.shuffle(together)
final = [i for j in together for i in j]

print(final)
</code></pre>
<p>Output (several runs):</p>
<pre><code>[[321, 243.4, 454], [321, 4533.4, 232], [321, 23.5, 108], [27, 0, 454], [27, 10, 32.0], [120325, 0.053, 4.23], [120325, 32.232, 5.2]]

[[120325, 0.053, 4.23], [120325, 32.232, 5.2], [321, 243.4, 454], [321, 4533.4, 232], [321, 23.5, 108], [27, 0, 454], [27, 10, 32.0]]

[[27, 0, 454], [27, 10, 32.0], [120325, 0.053, 4.23], [120325, 32.232, 5.2], [321, 243.4, 454], [321, 4533.4, 232], [321, 23.5, 108]]
</code></pre>
</div>
<span class="comment-copy">so you want the groups of the first column to remain the same?</span>
<span class="comment-copy">Yes, exactly. I want to keep rows with the first column in groups, and essentially randomly shuffle those groups together. I was thinking about making each group a sub-array, and then shuffling these sub-arrays as I can assign a single value to it and then replace it at the end with the full sub-array. But I'm curious about efficient implementations of this problem.</span>
