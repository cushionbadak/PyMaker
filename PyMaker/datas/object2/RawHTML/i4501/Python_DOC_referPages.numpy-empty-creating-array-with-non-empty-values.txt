<div class="post-text" itemprop="text">
<p>I'm currently taking some classes on algorithms and data structures and using Python to implement some of the stuff I've been studying.</p>
<p>At the moment I'm implementing a Stack based on a fixed-size array. Given the particularities of python I opted to use numpy.empty().</p>
<p>For a test I've written I'm basically pushing 9 elements into the stack. Up to that point everything is ok because the resulting array has the 9 elements plus space for another 7.</p>
<p>I started popping elements out and when I reach the critical point of just having 4 elements in an array, I expect the array to copy the elements into a new array of size 8.</p>
<p>The thing is that when I create this new array, instead of being created with empty values is already populated.</p>
<p><a href="https://i.stack.imgur.com/MGjqR.png" rel="nofollow noreferrer">Here an image of my terminal at that specific step when debugging with PDB</a></p>
<p>Is there anything I'm missing out?</p>
<p>EDIT: Seems like if I use Python 3 everything works as expected, this is just the case for Python 2 </p>
<pre><code>class StackV2(object):
"""
This is the Stack version based on fixed size arrays
"""
def __init__(self):
    self.array = numpy.empty(1, dtype=str)
    self.size = 0

def push(self, value):
    self.array[self.size] = value
    self.size += 1
    if len(self.array) == self.size:
        self._resize_array(len(self.array) * 2)

def pop(self):
    self.array[self.size - 1] = ""
    self.size -= 1
    if len(self.array) == (4 * self.size):
        self._resize_array(len(self.array) / 2)

def _resize_array(self, factor):
    new_array = numpy.empty(factor, dtype=str)
    print(new_array)
    index = 0
    for i in range(0, self.size):
        new_array[index] = self.array[i]
        index += 1
    self.array = new_array
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Short answer</h1>
<p>Use <code>numpy.zeros</code> instead of <code>numpy.empty</code> to get rid of the surprise garbage values in your new arrays.</p>
<h1>details</h1>
<p>The arrays created by <code>numpy.zeros</code> have all of their elements initialized to a "zero value". For arrays with <code>dtype=str</code>, this will be the empty string <code>''</code>. </p>
<p>From the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.empty.html" rel="nofollow noreferrer">Numpy docs</a>:</p>
<blockquote>
<p>Notes</p>
<p>empty, unlike zeros, does not set the array values to zero, and may therefore be marginally faster. On the other hand, it requires the user to manually set all the values in the array, and should be used with caution.</p>
</blockquote>
<p>The fact that it works in Python 3 (but not Python 2) is <a href="https://en.wikipedia.org/wiki/Undefined_behavior" rel="nofollow noreferrer">undefined behavior</a>. Basically, it's a quirk of the implementation which the Numpy developers didn't plan. The best practice is to not rely on such things in your code. As you've seen, the outcome of an undefined behavior is not guaranteed to be consistent across versions, implementations, different computers that you run your code on, etc.</p>
<p>Also, it sounds like you might be a little bit confused about how Numpy arrays work. A numpy array starts off at a fixed size when you create it. This is unlike a normal Python list <code>[]</code>, which grows dynamically as you add values to it.</p>
<p>Also, you don't need both <code>index</code> and <code>i</code> in <code>_resize_array</code>. Just use one or the other, like this:</p>
<pre><code>for i in range(self.size):
    new_array[i] = self.array[i]
</code></pre>
<p>Aside from that your code is fine.</p>
</div>
<span class="comment-copy">Aside from your main question, I think regular python lists would be more appropriate for this task overall. You don't seem to be doing anything array-worthy (vectorized calculations, for example). Creating arrays is expensive. Depending on exactly how this works, you might also use a <a href="https://docs.python.org/3/library/collections.html#deque-objects" rel="nofollow noreferrer"><code>deque</code></a></span>
<span class="comment-copy">This task is related with a course on Algorithms I'm taking, that's why I'm not using regular lists (Algorithms Part I, Princeton [MOOC] ).  Course is using Java but I'm trying to code everything in Python</span>
<span class="comment-copy">Pure-python "arrays" exist too, but I've never seen them used tbh. I think this possibly comes down to terminology; a <code>list()</code> might be considered the python "array". Numpy arrays were invented to solve a very different type of problem.</span>
<span class="comment-copy">Did you read, and understand, the docs for <code>np.empty</code>? Practice using it in an interactive session with various shapes and dtypes.</span>
<span class="comment-copy">In Py3 the values of <code>np.empty(n, int)</code> or <code>float</code> <code>dtype</code> are likely to be random, just garbage that was left over in a block of memory.  For <code>str</code> dtypes it appears to initial them to blank, ''.  But don't count it.  The docs say that you should count on filling all elements of an <code>empy</code> yourself.  <code>np.empty</code> is not the same as list empty, '[]'.</span>
