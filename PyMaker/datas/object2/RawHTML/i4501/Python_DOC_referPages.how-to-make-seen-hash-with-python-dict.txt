<div class="post-text" itemprop="text">
<p>In Perl one can do this:</p>
<pre><code>my %seen;

foreach my $dir ( split /:/, $input ) {
        $seen{$dir}++;
}
</code></pre>
<p>This is a way to remove duplicates by keeping track of what has been "seen".  In python you cannot do:</p>
<pre><code>seen = {}

for x in ['one', 'two', 'three', 'one']:
    seen[x] += 1
</code></pre>
<p>The above python results in <code>KeyError: 'one'</code>.</p>
<p>What is python-y way of making a 'seen' hash?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> for getting this behavior. The catch is that you need to specify the datatype for defaultdict to work for even those keys which don't have a value:</p>
<pre><code>In [29]: from collections import defaultdict

In [30]: seen = defaultdict(int)

In [31]: for x in ['one', 'two', 'three', 'one']:
    ...:     seen[x] += 1

In [32]: seen
Out[32]: defaultdict(int, {'one': 2, 'three': 1, 'two': 1})
</code></pre>
<p>You can use a Counter as well:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; seen = Counter()
&gt;&gt;&gt; for x in ['one', 'two', 'three', 'one']: seen[x] += 1
... 
&gt;&gt;&gt; seen
Counter({'one': 2, 'three': 1, 'two': 1})
</code></pre>
<p>If all you need are uniques, just do a set operation: <code>set(['one', 'two', 'three', 'one'])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a>:</p>
<pre><code>&gt;&gt;&gt; seen=set(['one', 'two', 'three', 'one'])
&gt;&gt;&gt; seen
{'one', 'two', 'three'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you unroll <code>seen[x] += 1</code> into <code>seen[x] = seen[x] + 1</code>, the problem with your code is obvious: you're trying to access <code>seen[x]</code> before you've assigned to it. Instead, you need to check if the key exists first:</p>
<pre><code>seen = {}

for x in ['one', 'two', 'three', 'one']:
    if x in seen:
        seen[x] += 1  # we've seen it before, so increment
    else:
        seen[x] = 1  # first time seeing x
</code></pre>
</div>
<span class="comment-copy">Look into collections.Counter</span>
<span class="comment-copy">You're doing two different things in both examples: the Perl code is assigning 1 if seen whereas the python code is incrementing.  Your python code would work like the perl if you remove the add operator</span>
<span class="comment-copy">How is adding new keys on the fly easier with <code>defaultdict</code>? If you did the same thing with <code>Counter</code> it would work the same way. It would also be a bit simpler (no need to specify a function that returns <code>0</code>, or to know that <code>int</code> with no arguments does that), and more efficient, and clearer as to its purpose.</span>
<span class="comment-copy">@abarnert My bad.. I seem to have mistakenly remembered that Counter dict did not support missing keys (the docs are silent that it does).. Have corrected the answer..</span>
