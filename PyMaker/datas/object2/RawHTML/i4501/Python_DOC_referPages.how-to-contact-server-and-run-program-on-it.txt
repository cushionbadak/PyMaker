<div class="post-text" itemprop="text">
<p><strong>Background:</strong></p>
<p>I need to run a program on a remote server without logging into the server. The server would only allow people to contact it, not to see what files are on it or login.</p>
<p>The server has in it a <code>.py</code> and an installation of <code>Python</code>. That file has the hardcoded login credentials to a database that I do not want users of the local machine program to see.</p>
<p>I would like to contact the server, pass it arguments and request it to run the program with them.</p>
<p>The reason is I don't want my program on the local machine to store the login credentials for the server, so I dont want to <code>ssh</code> because that would again require some form of localized credentialing which leaves the credentials exposed to the users at some point (and I never want them to see them).</p>
<p>Traditionally when I am making remote machine calls, its to an exposed API through the <code>requests</code> or <code>http.client</code> libraries; from what I can find, this may require the <code>socket</code> library, and that is a library I am not very familiar with and couldn't seem to find examples of what I am trying to do.</p>
<p><strong>Server code:</strong></p>
<pre><code>import sys
from pymongo import MongoClient

usr = 'user_login'
pwd = 'user_pass'

client = MongoClient('mongodb://' + usr + ':' + pwd +'@host:port')
db = client['some_db']
db.add_user(sys.argv[1], sys.argv[2])
</code></pre>
<p><strong>Question(s):</strong></p>
<ol>
<li><em>How can I do a one way request to a server containing a script file and pass it arguments?</em></li>
<li><em>Is this the appropriate way to handle ensuring users cannot see admin credentials?</em></li>
</ol>
<p>Question 2 is somewhat out of scope here, because the underlying problem is that the program needs to create a new user account on a database, but you must be logged in with an authorized account to do so. If I hardcoded or stored credentials in a file that the local machine could see, then a savvy user could debug the program and see what they are. </p>
<p>I figured putting them on a server where nobody can see the files, just ask the server to run them, would be a safe bet and ensure security.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you need seems to be a typical HTTP endpoint. Things to read and consider:</p>
<ul>
<li>A simplest web framework, like <a href="http://webpy.org/docs/0.3/tutorial" rel="nofollow noreferrer"><code>web.py</code></a>. Or you can run your program as a <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface#Using_CGI_scripts" rel="nofollow noreferrer">CGI script</a>, no matter the language.</li>
<li>A config file that would keep the credentials of the mongodb admin user. <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">Read it</a> every time your program runs.</li>
<li>The hardest part: <em>a proper authorization layer</em> on top of your script. Else anyone will be able to run it. At the very least, basic http auth, or token bearer auth.</li>
<li>Unless it's inside your tiny private trusted VPN with built-in encryption, <em>serve your endpoint over HTTPS.</em> Since it will be fronted by a web server anyway (either as a pass-through, or via uwsgi), just use the fact that your web server already does HTTPS (and <a href="https://letsencrypt.org/" rel="nofollow noreferrer">it does</a>, right?).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>a simple example </p>
<pre><code>from flask import Flask, request
app = Flask(__name__)

@app.route("/adduser")
def hello():
  user = request.args.get("user")
  pwd = request.args.get("pwd")

  client = MongoClient('mongodb://' + usr + ':' + pwd +'@host:port')
  db = client['some_db']
  db.add_user(user, pwd)
  return "user inserted"

if __name__ == '__main__':
  app.run()
</code></pre>
<p>and making the following request <a href="http://localhost:5000/adduser?user=root&amp;pwd=1234" rel="nofollow noreferrer">http://localhost:5000/adduser?user=root&amp;pwd=1234</a></p>
<p>on top of that you can use POST over SSL (HTTPS) so the data will be encrypted and transmitted in the request body instead the url (like GET) this suppose to be sufficient, security wise </p>
</div>
<span class="comment-copy">take a look at Flask <a href="http://flask.pocoo.org/" rel="nofollow noreferrer">flask.pocoo.org</a></span>
<span class="comment-copy">If you want to build a custom network service, you either need the socket libraries, or some higher-level (and maybe easier to use) framework that builds on sockets. That’s just inherent in what you’re asking to do.</span>
<span class="comment-copy">You can piggyback on some existing server, but anything you do is basically like using <code>sshd</code>. For example, you can set up a drop directory, share it write-only with <code>samba</code>, then trigger the script any time someone adds a new file there—but then you just have to manage SMB credentials instead of SSH credentials, so what have you bought?</span>
<span class="comment-copy">The local machine is running a client side application, not a web application. So the client needs to check the database if the user exists, otherwise register and create. If I had a config file with the client, wouldnt the users just be able to capture the variables or just inspect the config file? The trouble comes from the fact that the programs code is open source, but I dont want database login credentials to come with the open source part. For this, I think that a CGI solution may be good solution. Can you send arguments to a CGI script?</span>
<span class="comment-copy">If you need to invoke your script on the same host, why can't it just be invoked directly, as an executable?</span>
<span class="comment-copy">Hmm, valid point. Suppose I wanted to leverage the server I already have available. The database resides on a server somewhere else, so I figured that a remote script on my server could be executed (if needed) by the user client, then the remote script would update the database and the user would never see the credentials I wish to hide.</span>
<span class="comment-copy">The application is a client side application that checks the database. It will allow the user to create an account but that requires authorized credentials. I want to supply the code to the program as open source, but not the login credentials (i.e. the script that sits in the server to create an account. Does this information change your answer? Im not familiar with Flask, but would this file just sit on the server and I would replace <code>localhost:5000</code> with the proper address? Do I name this file <code>adduser.py</code>?</span>
