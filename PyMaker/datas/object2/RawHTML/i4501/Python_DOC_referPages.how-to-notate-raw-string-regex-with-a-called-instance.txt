<div class="post-text" itemprop="text">
<p>I know how Python use "r" as the raw string notation in regular expression:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/12871066/what-exactly-is-a-raw-string-regex-and-how-can-you-use-it">What exactly is a “raw string regex” and how can you use it?</a></li>
<li><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re - Regular expression operations</a></li>
</ul>
<p>However, I'd like to apply that in a while loop like:</p>
<pre><code>while i &lt; len(organized_texts) and j &lt; len(frag_texts):
    if re.match(frag_texts[j], organized_texts[i]):
        # If frag_texts[j] matches the beginning of organized_texts[i]
        # Do things
</code></pre>
<p>The problem is that <code>frag_texts[j]</code> can contain literal "(" and that's where <code>re.match(frag_texts[j], organized_texts[i])</code> blows up with <em>error: missing ), unterminated subpattern at position 2</em>.</p>
<p>Apparently I can do neither <code>rfrag_texts[j]</code> nor <code>\frag_texts[j]</code>. I've tried <code>re.match("r'{}'".format(frag_texts[j]), organized_texts[i])</code> but it gives me the same error too. What options do I have now?</p>
</div>
<div class="post-text" itemprop="text">
<p>Raw strings aren't a different data type - they are just an alternative way to write certain strings, making it less complex to express literal string values in your program code. Since regular expressions often contain backslashes, raw strings are frequently used as it avoids the need to write <code>\\</code> for each backslash.</p>
<p>If you want to match arbitrary text fragments then you probably shouldn't be using regular expressions at all. I'd take a look at the <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>startswith</code> string method</a>, since that just does a character-for-character comparison and is therefore much faster. And there's also the equivalent of <code>re.search</code>, should you need it, using the <code>in</code> keyword.</p>
<p>You might be interested in <a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/" rel="nofollow noreferrer">this article</a> by a regular expression devotee. Regular expressions are indeed great, but they shouldn't be the first tool you reach for in string matching problems.</p>
<p>If it became necessary for some reason to use regexen than you 'd be interested in the <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code> method,</a>, which will quote special characters so they are interpreted as standard characters rather than having their standard regex meaning.</p>
</div>
<span class="comment-copy">Is <code>frag_texts</code> a list of pattern strings from your source code, or a list of pattern strings you loaded out of a file or input from the user or something similar?</span>
<span class="comment-copy">If your strings contain unmatched parentheses, then they <i>aren't regular expressions</i>, and you should stop treating them as such.  Try <code>if organized_texts[i].startswith(frag_texts[j]):</code> instead.</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> to turn escape any special characters in a string to use it in a regex. But if you're going to escape the entire pattern, there's no reason to use <code>re</code> in the first place—just do <code>if frag_texts[j] in organized_texts[i]:</code> or <code>if organized_texts[i].startswith(frag_texts[j]):</code> or some other simple string operation. If you have a pattern that's made by filling in a template in a raw string literal with user strings, then you want to <code>re.escape</code> the user strings.</span>
