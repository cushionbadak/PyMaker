<div class="post-text" itemprop="text">
<p>Given the following string: </p>
<p><code>mystring = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</code></p>
<p>The goal is to swap out a character position range with other characters. </p>
<p>For example, swap out characters 20-24 with <code>ABCDE</code>. 
The result would look like:</p>
<p><code>XXXXXXXXXXXXXXXXXXXABCDEXXXXXXXXXXXXXXX</code></p>
<p>Testing: </p>
<pre><code>mystring = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
mystring[20:24] = 'ABCDE'
</code></pre>
<p>I get the error: <code>TypeError: 'str' object does not support item assignment</code></p>
<p><strong>The end goal is a reusable function such as:</strong> </p>
<pre><code>def replace_chars(some_string, start_char, end_char, replace_string):
    if len(replace_string) == (end_char_pos - start_char_pos + 1):
        some_string[start_char:end_char] = replace_string
    else:
        print "replace string invalid length"
        sys.exit(1)
    return mystring

new_string = replace_chars('XYZXYZ', 2, 4, 'AAA')
</code></pre>
<p>I realize that it's possible to pad out the unchanged range into a new string: </p>
<pre><code>mystring = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
mystring = mystring[0:19] + 'ABCDE' + mystring[25:38]
</code></pre>
<p>However that will force more calculation and since this will be happening thousands of times against lines in a file. The different lines will be different length and will be different character positions to swap. Doing this seems like it would be a long workaround where I should just be able to insert direct into the character positions in-place. </p>
<p>Appreciate any help, thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>strings are immutable (unchangeable).  But you can index and join items.</p>
<pre><code>mystring = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
mystring = 'ABCDE'.join([mystring[:20],mystring[24:]])
</code></pre>
<blockquote>
<p>'XXXXXXXXXXXXXXXXXXXXABCDEXXXXXXXXXXXXXX'</p>
</blockquote>
<p>Do be careful as the string length "ABCDE" and the number of items you omit between mystring[:20], mystring[24:] need to be the same length.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable in python! You'll have to split the string into three pieces and concatenate them together :) </p>
<pre><code>mystring = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
new_str = "ABCDE"
first_piece = mystring[0:20]
third_piece = mystring[24:len(mystring)]
final_string = first_piece + new_str + third_piece
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not strictly possible in python, but consider using <a href="https://docs.python.org/3/library/stdtypes.html#bytearray" rel="nofollow noreferrer">bytearray</a> a similar structure to a string in python, with a key difference being mutability</p>
<pre><code>In [52]: my_stuff = bytearray('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')

In [53]: my_stuff = my_stuff[0:19] + "abcd" + my_stuff[25:38]

In [54]: print my_stuff
XXXXXXXXXXXXXXXXXXXabcdXXXXXXXXXXXXX
</code></pre>
<p>There are some key things you should know when using a bytearray, you can see some of them <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-mutable" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As much as you think you should be able to assign to individual characters of a string, <code>'str' object does not support item assignment</code> says you can't.</p>
</div>
<span class="comment-copy">Is this code meant to be used in biology?</span>
<span class="comment-copy">How is this an improvement over OP's "workaround"?</span>
<span class="comment-copy">@ScottHunter I haven't timed it, but I imagine that <code>''.join</code> is faster than string concatenation for long strings.</span>
<span class="comment-copy">Does that take into account the time spent <i>making</i> the list?</span>
<span class="comment-copy">If you're worried about performance, you could get a slight improvement by skipping the list and doing <code>mystring = 'ABCDE'.join([mystring[:20],mystring[24:]])</code></span>
<span class="comment-copy">This seems to be the cleanest method, really like the <code>join()</code> to pad the replacement string. Very similar to my workaround but cleaner.  Will also add safety checks to ensure the replacement matches the character range.</span>
<span class="comment-copy">Isn't this just what OP posted as a "workaround" without naming the first and third pieces?</span>
<span class="comment-copy">I think they realize that they can't. They're looking for a solution that is allowed, but will produce the result they want.</span>
<span class="comment-copy">"I should just be able to insert direct into the character positions in-place" suggests otherwise.  OP <i>has</i> a solution to produce the desired result, but doesn't like its mechanics.</span>
