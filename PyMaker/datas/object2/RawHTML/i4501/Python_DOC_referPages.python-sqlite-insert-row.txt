<div class="post-text" itemprop="text">
<p>I have more than 100 rows of data and it would be really messy to have a line for insert table for every row. So I am trying to somehow quicken how I insert rows into my sqlite database. So I came up with the following:</p>
<pre><code>def insert_item(obj):
    with db:
        c.execute("INSERT INTO Database VALUES (\
                   :First, :Last, :Item1, :Item2)",
                  {'First': obj.First,
                   'Last': obj.Last,
                   'Item1': obj.Item1,
                   'Item2': obj.Item2})

obj_1 = ('John', 'Doe', 4, 5)
obj_2 = ('Jane', 'Doe', 6, 8)
...
obj_106 = ('Johnathan', 'Doe', 9, 1)

d = {}
for x in range(1, 107):
    row = (d["obj_{0}".format(x)])
    insert_item(row)
</code></pre>
<p>However, it returned with this error:</p>
<pre><code> row = (d["obj_{0}".format(x)])
KeyError: 'obj_1'
</code></pre>
<p>Not sure what went wrong, the string is returning the correct value that I want but the function is not working.</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>You define a bunch of tuples, then an empty <code>dict</code> then try to access a value in said empty <code>dict</code>.  What you want to do is to load those tuples into that <code>dict</code> (or a <code>list</code>) to start.  </p>
<pre><code>d={obj_1 : ('John', 'Doe', 4, 5),
   obj_2 : ('Jane', 'Doe', 6, 8),
   ...
   obj_106 : ('Johnathan', 'Doe', 9, 1)}

for x in range(1, 107):
    row = (d["obj_{0}".format(x)])
    insert_item(row)
</code></pre>
<p>Or, even better</p>
<pre><code>d = [('John', 'Doe', 4, 5),
     ('Jane', 'Doe', 6, 8),
      ...
     ('Johnathan', 'Doe', 9, 1)]

for row in d:
    insert_item(row)
</code></pre>
<p>You really should read up on how to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>executemany</code> for Bulk inserts. Insert all the objects as <code>tuples</code> in <code>list</code>
eg. </p>
<pre><code>My_list = [('John', 'Doe', 4, 5),('Jane', 'Doe', 6, 8).....]

c.executemany("INSERT INTO Database ('First,'Last','item1,'item2') VALUES (?,?,?,?)",(My_list)) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found a way to loop through the INSERT INTO with locals()</p>
<pre><code> def insert_item(obj):
    with db:
        c.execute("INSERT INTO Database VALUES (\
                   :First, :Last, :Item1, :Item2)",
                  {'First': obj.First,
                   'Last': obj.Last,
                   'Item1': obj.Item1,
                   'Item2': obj.Item2})

obj_1 = ('John', 'Doe', 4, 5)
obj_2 = ('Jane', 'Doe', 6, 8)
...
obj_106 = ('Johnathan', 'Doe', 9, 1)

for num in range(1, 107):
        row = locals()["obj_" + str(num)]
        insert_item(row)
</code></pre>
<p>This works perfectly, just that you need to manually key in the range.</p>
</div>
<span class="comment-copy">Isn't the dictionary <code>d</code> empty at the point in your code where you're trying to lookup 'obj_1'?</span>
