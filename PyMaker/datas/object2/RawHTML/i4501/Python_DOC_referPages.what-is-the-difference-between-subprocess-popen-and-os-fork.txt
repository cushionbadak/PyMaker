<div class="post-text" itemprop="text">
<p>It seems like <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">subprocess.Popen()</a> and <a href="https://docs.python.org/3/library/os.html#os.fork" rel="nofollow noreferrer">os.fork()</a> both are able to create a child process. I would however like to know what the difference is between both. When would you use which one? I tried looking at their source code but I couldn't find fork()'s source code on my machine and it wasn't totally clear how Popen works on Unix machines.</p>
<p>Could someobody please elaborate?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.Popen</code> let's you execute an arbitrary program/command/executable/whatever in its own process.</p>
<p><code>os.fork</code> only allows you to create a child process that will execute <strong>the same script from the exact line</strong> in which you called it. As its name suggests, it "simply" forks the current process into 2.</p>
<p><code>os.fork</code> is only available on Unix, and <code>subprocess.Popen</code> is cross-platfrom.</p>
</div>
<div class="post-text" itemprop="text">
<p>So I read the documentation for you. Results:</p>
<ul>
<li><p><code>os.fork</code> only exists on Unix. It creates a child process (by cloning the existing process), but that's all it does. When it returns, you have two (mostly) identical processes, both running the same code, both returning from <code>os.fork</code> (but the new process gets <code>0</code> from <code>os.fork</code> while the parent process gets the PID of the child process).</p></li>
<li><p><code>subprocess.Popen</code> is more portable (in particular, it works on Windows). It creates a child process, but you must specify another program that the child process should execute. On Unix, it is implemented by calling <code>os.fork</code> (to clone the parent process), then <code>os.execvp</code> (to load the program into the new child process). Because <code>Popen</code> is all about executing a program, it lets you customize the initial environment of the program. You can redirect its standard handles, specify command line arguments, override environment variables, set its working directory, etc. None of this applies to <code>os.fork</code>.</p></li>
</ul>
<p>In general, <code>subprocess.Popen</code> is more convenient to use. If you use <code>os.fork</code>, there's a lot you need to handle manually, and it'll only work on Unix systems. On the other hand, if you actually want to clone a process and <em>not</em> execute a new program, <code>os.fork</code> is the way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Subprocess.popen()</strong> spawns a new OS level process.</p>
<p><strong>os.fork()</strong> creates another process which will resume at exactly the same place as this one. So within the first loop run, you get a fork after which you have two processes, the "original one" (which gets a pid value of the PID of the child process) and the forked one (which gets a pid value of 0).</p>
</div>
<span class="comment-copy">The difference is the actual difference between opening a process, and forking it. Have a look at : <a href="https://stackoverflow.com/questions/2483041/what-is-the-difference-between-fork-and-thread" title="what is the difference between fork and thread">stackoverflow.com/questions/2483041/â€¦</a></span>
<span class="comment-copy">@Rohi Your link explains the difference between threads and processes. It has nothing to do with this question.</span>
<span class="comment-copy">If you understand what a process is (Which is fairly straightforward), all you really need is to read what fork does to understand the difference between the two (Which is explained really well in the answers). So I disagree @melpomene</span>
<span class="comment-copy">@Rohi What do you mean, difference? <code>fork</code> is the system call that creates a process on Unix.</span>
<span class="comment-copy">I meant the difference between the non-unix way to the unix way. The non-unix way is very straightforward, so not much explaining is necessary. @melpomene</span>
<span class="comment-copy"><code>So I read the documentation for you</code> Snarkiness cost you an upvote there. If you have the answer, just give it without the sarcasm.</span>
<span class="comment-copy">@mypetlion Where do you see sarcasm here?</span>
<span class="comment-copy">"<b>Subprocess.popen()</b> spawns a new OS level process." That's not very helpful because that's exactly what <code>os.fork</code> does, too.</span>
