<div class="post-text" itemprop="text">
<p>I'm new to unit testing and I am writing a class to model the behavior of a pinhole camera.</p>
<p>I have several unit tests in Python using the unittest module, and my Camera class has a lookAt method which makes it look at a certain point, i.e it rotates the camera frame such that it points at the target.
I also have a method which projects a 3D point into the camera's picture.</p>
<p>My scenario here is that i first test the lookAt method, then if the test passes, i use the lookAt method to make my camera look at a cube and then project that cube onto my camera's picture (the projection is the thing to test here).</p>
<p>Is there a possibility in the unittest module for me to run a test in another test? Or should i just make a lookAt matrix by hand and then test the projection separately(I think this would be the best practice here)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">skipIf decorator</a> and applying it to your dependent tests based on a condition set in your first test.</p>
<pre><code>@unittest.skipIf(condition, reason)
</code></pre>
<p>For example (from the above link):</p>
<pre><code>    @unittest.skipIf(mylib.__version__ &lt; (1, 3),
                 "not supported in this library version")
</code></pre>
<p>There is also <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.subTest" rel="nofollow noreferrer">subTest()</a>, but the docs describe the purpose of subTest as being for "When some of your tests differ only by a some [sic] very small differences."</p>
</div>
<span class="comment-copy">You can use 2 asserts in the same test function. If the first one fails, then that test will stop and the second one won't get evaluated.</span>
<span class="comment-copy">I might go with Seaman's answer though, seems simpler and straight-forward, as there doesn't seem to be a possibility for me to control what order the tests are ran other than the order in which they are written. On a side note, i believe it is better to manually write the expected output of a lookAt function and use it in my projection test function, that way tests do not depend on one another.</span>
<span class="comment-copy">Which pattern you use depends on how you want the results represented. Multiple asserts in a single test still roll up as 1 test that passed or failed, and anything after the first assertion failure will not be executed. If you want more granular results indicating the result of each, then you'll want to model them as separate tests.</span>
<span class="comment-copy">I agree with you as i believe that is the best approach.</span>
