<div class="post-text" itemprop="text">
<p>I am creating a call in DRF to POST to the site. I am a bit confused why I get this error. I do not understand why this expects it to be a str. I know there are similiar posts but they still elude be to the solution. </p>
<p><strong>Error</strong></p>
<pre><code>AttributeError: 'str' object has no attribute 'id'
[03/Apr/2018 10:55:12] "POST /api/user/UserProfile/1/ HTTP/1.1" 500 83982
</code></pre>
<p><strong>serializer.py</strong> looks like and if I remove instance.id i get the same error but just for the next line. </p>
<pre><code>from rest_framework import serializers
from api.models import UserProfile
from django.contrib.auth.models import User


class UserProfileSerializer(serializers.Serializer):
    # id = serializers.UUIDField()
    class Meta:
        model = UserProfile

    def create(self, validated_data):
        return UserProfile.objects.create(**validated_data)

    def update(self, instance, validated_data):
        instance.id = validated_data.get('profile_id', str(instance.id))
        instance.user_id = validated_data.get('user_id', instance.user_id)
        instance.save()
        return instance
</code></pre>
<p><strong>View</strong></p>
<pre><code>@csrf_exempt
def user_profile_list(request, user_id):
    try:
        userid = user_id
    except userid.DoesNotExist:
        return HttpResponse(status=404)

    if request.method == 'GET':
        uprofile = UserProfile.objects.all().values()
        list2 = list(uprofile)
        return JsonResponse(list2, safe=False)

    elif request.method == 'POST':
        data = JSONParser().parse(request)
        serializer = UserProfileSerializer(userid, data=data)
        if serializer.is_valid():
            serializer.save()
            return JsonResponse(serializer.data, status=201)
        return JsonResponse(serializer.errors, status=400)
</code></pre>
<p><strong>urls.py</strong></p>
<pre><code>url(r'^api/user/UserProfile/(?P&lt;user_id&gt;[0-9]+)/$', userprofile.user_profile_list),
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You passed to serializer <code>userid</code> instead of user object. To update object with serializer, you should pass instance as first argument. Change view to this:</p>
<pre><code>elif request.method == 'POST':
    data = JSONParser().parse(request)
    user = User.objects.get(id=userid)
    serializer = UserProfileSerializer(user, data=data)
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>AttributeError</strong></p>
<p>The issue lies in the line <code>serializer = UserProfileSerializer(userid, data=data)</code> where you're passing <code>userid</code> to the serializer instead of a user <em>or</em> user profile instance, I say <em>or</em> because the logic is not very clear to me (using a UserProfileSerializer but updating User instance?).</p>
<p><strong>Improvements</strong></p>
<p>What you are trying to accomplish with your code can be done in an easier way:</p>
<ol>
<li>Use a <a href="http://www.django-rest-framework.org/api-guide/serializers/#modelserializer" rel="nofollow noreferrer">ModelSerializer</a> instead of a Serializer</li>
<li>Use a <a href="http://www.django-rest-framework.org/api-guide/viewsets/#modelviewset" rel="nofollow noreferrer">ModelViewSet</a> instead of a function-based view (<code>user_profile_list</code>)</li>
</ol>
<p>A generic version using ModelSerializer and ModelViewSet would be something along the following lines:</p>
<p>serializers.py</p>
<pre><code>from rest_framework import serializers
from api.models import UserProfile


class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        # preferably listing the fields to avoid any code breaking
        # if you add fields to the model later on
        fields = '__all__'
</code></pre>
<p>views.py</p>
<pre><code>from rest_framework import viewsets

from api.serializers import UserProfileSerializer
from api.models import UserProfile


class UserProfileViewSet(viewsets.ModelViewSet):
    queryset = UserProfile.objects.all()
    serializer_class = UserProfileSerializer
</code></pre>
<p>I highly recommend going through <a href="http://www.django-rest-framework.org/tutorial/quickstart/" rel="nofollow noreferrer">DRF's official tutorial</a>, it will save you alot of development time if you understand which parts of your app are already implemented in DRF and can be directly used with little code. </p>
</div>
<span class="comment-copy">The error message is clear, debug your code and see why <code>instance</code> is getting a <code>str</code>.</span>
<span class="comment-copy">django noob....no clue how to do that</span>
<span class="comment-copy">Please read <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">the debugger docs</a> then, it's a good tool to know!</span>
