<div class="post-text" itemprop="text">
<p>I need to swap the max and min in a list of distinct numbers. Like so:</p>
<p>Example input</p>
<pre><code>3 4 5 2 1
</code></pre>
<p>Example output</p>
<pre><code>3 4 1 2 5
</code></pre>
<p>I figured using this would make the most sense:</p>
<pre><code>a = [3, 4, 5, 2, 1]
a[a.index(max(a))], a[a.index(min(a))] = min(a), max(a)
</code></pre>
<p>However, it seems to work on some lists of distinct numbers but not others (including the given example). I have no idea why. Can anyone see the bug?</p>
</div>
<div class="post-text" itemprop="text">
<p>In multiple assignments, Python calculates all of the right hand side parts, left to right, then assigns them one by one to the left hand side parts, left to right (see <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer">the language reference</a> for details). So:</p>
<pre><code>a = [3, 4, 5, 2, 1]
a[a.index(max(a))], a[a.index(min(a))] = min(a), max(a)

a = [3, 4, 5, 2, 1]
a[a.index(max(a))], a[a.index(min(a))] = 1, max(a)

a = [3, 4, 5, 2, 1]
a[a.index(max(a))], a[a.index(min(a))] = 1, 5

a = [3, 4, 5, 2, 1]
a[a.index(5)], a[a.index(min(a))] = 1, 5

a = [3, 4, 5, 2, 1]
a[2], a[a.index(min(a))] = 1, 5

a = [3, 4, 1, 2, 1]
a[a.index(min(a))] = 5

a = [3, 4, 1, 2, 1]
a[a.index(1)] = 5

a = [3, 4, 1, 2, 1]
a[2] = 5
# ^ uh oh

a = [3, 4, 5, 2, 1]
</code></pre>
<p>If the minimum value is <em>before</em> the maximum value this works fine, because we always replace the first occurrence of the minimum value and that turns out to be the original one. </p>
<p>To fix it, just calculate the indices separately <em>before</em> doing the swap. </p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use this function to help you permuting min and max. In the distinct-list case, it'll work. If you have duplicates, it would also handle them.</p>
<pre><code>def swap_min_max(l):
    max_value = max(l)
    min_value = min(l)

    # get all potential indices
    idx_min = [i for i,e in enumerate(l) if e==min_value]
    idx_max = [i for i,e in enumerate(l) if e==max_value]

    # replace values
    for idx in idx_min:
        l[idx] = max_value
    for idx in idx_max:
        l[idx] = min_value

    return l

&gt;&gt;&gt;&gt; swap_min_max([4, 5, 5, 2, 1, 1])
[4, 1, 1, 2, 5, 5]

&gt;&gt;&gt;&gt; swap_min_max([3, 4, 5, 2, 1])
[3, 4, 1, 2, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use this solution if number are distinct.</p>
<pre><code>def swap(a) :
  max_index=a.index(max(a))
  min_index=a.index(min(a))
  ma=max(a)
  mi=min(a)
  a[max_index]=mi
  a[min_index]=ma
a=[3,4,5,2,1]
swap(a)
print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All you need is index no of max and min which you can find by index method: </p>
<pre><code>data=[3,4, 5, 2, 1]

max_va=data.index(max(data))
min_va=data.index(min(data))

data[max_va],data[min_va]=data[min_va],data[max_va]

print(data)
</code></pre>
<p>output:</p>
<pre><code>[3, 4, 1, 2, 5]
</code></pre>
</div>
<span class="comment-copy">Can you add an example where it is not working?</span>
<span class="comment-copy">No, all the lists have distinct numbers as stated in the question</span>
<span class="comment-copy">Calculate the indices first, otherwise you're recalculating <code>a.index(min(a))</code> <i>after you've written that value over <code>max(a)</code></i>. This will fail for any input where the min appears after the max.</span>
<span class="comment-copy">@KeyurPotdar see edit</span>
<span class="comment-copy">The question says: <i>I need to swap the max and min in a list of <b>distinct numbers</b></i></span>
<span class="comment-copy">That's right, my bad, I was a little too quick. Although <i>distinct numbers</i> is just a subcase of my answer -- which might still be useful, no ?</span>
