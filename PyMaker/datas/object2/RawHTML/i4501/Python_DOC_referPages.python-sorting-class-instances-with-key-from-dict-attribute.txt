<div class="post-text" itemprop="text">
<p>I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:</p>
<pre><code>&gt;&gt;&gt; ut
[&lt;Tag: 128&gt;, &lt;Tag: 2008&gt;, &lt;Tag: &lt;&gt;, &lt;Tag: actionscript&gt;, &lt;Tag: addresses&gt;,
 &lt;Tag: aes&gt;, &lt;Tag: ajax&gt; ...]
</code></pre>
<p>Each object has a count:</p>
<pre><code>&gt;&gt;&gt; ut[1].count
1L
</code></pre>
<p>I need to sort the list by number of counts descending.</p>
<p>I've seen several methods for this, but I'm looking for best practice in Python.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># To sort the list in place...
ut.sort(key=lambda x: x.count, reverse=True)

# To return a new list, use the sorted() built-in function...
newlist = sorted(ut, key=lambda x: x.count, reverse=True)
</code></pre>
<p>More on <a href="http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys" rel="noreferrer">sorting by keys »</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>A way that can be fastest, especially if your list has a lot of records, is to use <code>operator.attrgetter("count")</code>. However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then:</p>
<pre><code>try: import operator
except ImportError: keyfun= lambda x: x.count # use a lambda if no operator module
else: keyfun= operator.attrgetter("count") # use operator since it's faster than lambda

ut.sort(key=keyfun, reverse=True) # sort in-place
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Readers should notice that the key= method:</p>
<pre><code>ut.sort(key=lambda x: x.count, reverse=True)
</code></pre>
<p>is many times faster than adding rich comparison operators to the objects. I was surprised to read this (page 485 of "Python in a Nutshell"). You can confirm this by running tests on this little program:</p>
<pre><code>#!/usr/bin/env python
import random

class C:
    def __init__(self,count):
        self.count = count

    def __cmp__(self,other):
        return cmp(self.count,other.count)

longList = [C(random.random()) for i in xrange(1000000)] #about 6.1 secs
longList2 = longList[:]

longList.sort() #about 52 - 6.1 = 46 secs
longList2.sort(key = lambda c: c.count) #about 9 - 6.1 = 3 secs
</code></pre>
<p>My, very minimal, tests show the first sort is more than 10 times slower, but the book says it is only about 5 times slower in general. The reason they say is due to the highly optimizes sort algorithm used in python (<strong>timsort</strong>).</p>
<p>Still, its very odd that .sort(lambda) is faster than plain old .sort(). I hope they fix that.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from operator import attrgetter
ut.sort(key = attrgetter('count'), reverse = True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Object-oriented approach</strong></p>
<p>It's good practice to make object sorting logic, if applicable, a property of the class rather than incorporated in each instance the ordering is required.</p>
<p>This ensures consistency and removes the need for boilerplate code. </p>
<p>At a minimum, you should specify <code>__eq__</code> and <code>__lt__</code> operations for this to work. Then just use <code>sorted(list_of_objects)</code>.</p>
<pre><code>class Card(object):

    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit

    def __eq__(self, other):
        return self.rank == other.rank and self.suit == other.suit

    def __lt__(self, other):
        return self.rank &lt; other.rank

hand = [Card(10, 'H'), Card(2, 'h'), Card(12, 'h'), Card(13, 'h'), Card(14, 'h')]
hand_order = [c.rank for c in hand]  # [10, 2, 12, 13, 14]

hand_sorted = sorted(hand)
hand_sorted_order = [c.rank for c in hand_sorted]  # [2, 10, 12, 13, 14]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks much like a list of Django ORM model instances.</p>
<p>Why not sort them on query like this:</p>
<pre><code>ut = Tag.objects.order_by('-count')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add rich comparison operators to the object class, then use sort() method of the list.<br/>
See <a href="http://docs.python.org/reference/datamodel.html#object.__lt__" rel="noreferrer">rich comparison in python</a>.</p>
<hr/>
<p><strong>Update</strong>: Although this method would work, I think solution from Triptych is better suited to your case because way simpler.</p>
</div>
<span class="comment-copy">Dupe: <a href="http://stackoverflow.com/questions/157424/python-2-5-dictionary-2-key-sort" title="python 2 5 dictionary 2 key sort">stackoverflow.com/questions/157424/…</a>, <a href="http://stackoverflow.com/questions/222752/sorting-a-tuple-that-contains-tuples" title="sorting a tuple that contains tuples">stackoverflow.com/questions/222752/…</a>, <a href="http://stackoverflow.com/questions/327191/in-python-is-there-a-one-line-pythonic-way-to-get-a-list-of-keys-from-a-dictiona" title="in python is there a one line pythonic way to get a list of keys from a dictiona">stackoverflow.com/questions/327191/…</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">Sorting HOW TO</a> for those who are looking for more info about sorting in Python.</span>
<span class="comment-copy">No problem. btw, if muhuk is right and it's a list of Django objects, you should consider his solution. However, for the general case of sorting objects, my solution is probably best practice.</span>
<span class="comment-copy">On large lists you will get better performance using operator.attrgetter('count') as your key. This is just an optimized (lower level) form of the lambda function in this answer.</span>
<span class="comment-copy">Thanks for the great answer. In case if it is a list of dictionaries and 'count' is one of its key then it needs to be changed like below : ut.sort(key=lambda x: x['count'], reverse=True)</span>
<span class="comment-copy">Here I would use the variable name "keyfun" instead of "cmpfun" to avoid confusion. The sort() method does accept a comparison function through the cmp= argument as well.</span>
<span class="comment-copy">This doesn't seems to work if the object has dynamically added attributes, (if you've done <code>self.__dict__ = {'some':'dict'}</code> after the <code>__init__</code> method). I don't know why it sould be different, though.</span>
<span class="comment-copy">@tutuca: I've never replaced the instance <code>__dict__</code>. Note that "an object having dynamically added attributes" and "setting an object's <code>__dict__</code> attribute" are almost orthogonal concepts. I'm saying that because your comment seems to imply that setting the <code>__dict__</code> attribute is a requirement for dynamically adding attributes.</span>
<span class="comment-copy">@tzot: I'm looking right at this: <a href="https://github.com/stochastic-technologies/goatfish/blob/master/goatfish/models.py#L168" rel="nofollow noreferrer">github.com/stochastic-technologies/goatfish/blob/master/…</a> and using that iterator here: <a href="https://github.com/TallerTechnologies/dishey/blob/master/app.py#L28" rel="nofollow noreferrer">github.com/TallerTechnologies/dishey/blob/master/app.py#L28</a> raises attribute error. Maybe because of python3, but still...</span>
<span class="comment-copy">@tzot: if I understand the use of <code>operator.attrgetter</code>, I could supply a function with any property name and return a sorted collection.</span>
<span class="comment-copy">This is a much smarter solution given the original use case imo - I think this should be the highest voted answer.</span>
<span class="comment-copy">It is, but using django-tagging, so I was using a built-in for grabbing a Tag set by usage for a particular query set, like so:  Tag.objects.usage_for_queryset(QuerySet, counts=True)</span>
