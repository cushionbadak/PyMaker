<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33582162/confused-about-backslashes-in-regular-expressions">Confused about backslashes in regular expressions [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am new to Python. Can someone tell me what is the difference between these two regex statements (re.findall(r"\d+","i am aged 35")) and (re.findall("\d+","i am aged 35")).</p>
<p>I had the understanding that the raw string in the first statement will make "\d+" inactive because that is the primarily role of a raw string - to make escape characters inactive.  In other words "\d+" will not be a meta character for finding/searching/matching digits if a raw string is used. However, I now see that both statements return the same result. </p>
</div>
<div class="post-text" itemprop="text">
<p>Both the Python parser <em>and</em> the regular expression parser handle escape sequences. This means that any escape sequence that <em>both engines</em> support must either use double slashes, or you use a raw string literal so the Python parser doesn't try to interpret escape sequences.</p>
<p>In this case, <code>\d</code> has no meaning to <em>Python</em>, so the backslash is left in place for the <code>re</code> module to handle. So <em>here specifically</em>, there is no difference between the two snippets.</p>
<p>However, if you needed to match a <em>literal backslash</em> before other text like <code>section</code> in your regular expression, without raw strings, you'd have to use <code>'\\\\section'</code> to define the pattern! That's because the Python interpreter would see <code>'\\section'</code> as an escape sequence producing a single backslash, and then the regular expression parser sees the start of the escape sequence <code>\s</code>.</p>
<p>See the <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow noreferrer">section on backslashes and raw string literals</a> in the Python regular expression HOWTO.</p>
</div>
<span class="comment-copy">Required reading: <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow noreferrer">docs.python.org/3/howto/regex.html#the-backslash-plague</a></span>
<span class="comment-copy">Hi There, Thank you. I am still unable to understand why would i need to use '\\\\' to match a literal backslash in a string.</span>
<span class="comment-copy">@PankajKulkarni: <code>'\section'</code> is not a valid Python escape, so you get <code>'\section'</code> in the regex, which sees <code>\s</code>, a metacharacter. <code>'\\section'</code> becomes a single <code>` in the value, so </code>'\section'` is passed to the regex engine, which still sees <code>\s</code>, a meta-character. Only <code>'\\\\section'</code> becomes the value <code>\\section</code>, so now the regex engine sees <code>\` as a literal backslash separate from the </code>section` part.</span>
