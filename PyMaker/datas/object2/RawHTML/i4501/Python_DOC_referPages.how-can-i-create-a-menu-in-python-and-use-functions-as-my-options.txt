<div class="post-text" itemprop="text">
<p>I hope you're doing great! I would really appreciate if you help me with this problem of mine. I wrote this code that creates dictionary based on user's input, then updates it, sorts by keys and values, finds if the item is in the dictionary, counts the number of unique values and, finally, saves the original dictionary to the .txt file. The code itself works fine, but I wanted to present it as a menu so that user could choose what he/she would want to do next, but when I tried to just call the functions from the menu it didn't work and now I have no idea how to do it properly. Could you explain how I can do that? Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>1) Add a menu function, I only did the first three so that you can get the idea (you can do the rest of them), for example.</p>
<pre><code>def menu():
    print '1) Create a dictionary'
    print '2) Update the dictionary'
    print '3) Sort the dictionary'
    task = raw_input('Enter the number to perform the corresponding task: ')

    if task == '1':
        user_dict = creating_dictionary()

    elif task == '2':
        try:
            updating_dictionary(user_dict)

        except UnboundLocalError:
            print "A dictionary doesn't exist, you'll have to create one\n"
            creating_dictionary()

    elif task == '3':
        try:
            sorting_dictionary(user_dict)

        except UnboundLocalError:
            print "A dictionary doesn't exist, you'll have to create one\n"
            creating_dictionary()
</code></pre>
<p>2) add <code>menu()</code> as your first statement in <code>main()</code></p>
<p>3) at the end of every function add a call to <code>menu()</code></p>
<p>4) If you set it up correctly then the only call you'll need in <code>main()</code> is <code>menu()</code>. You'll be able to delete all of the other function calls since at the end of every function you'll be calling <code>menu()</code>.</p>
</div>
<span class="comment-copy">Have you tried printing the names of functions (hard coded as string in print) and get the input from user. You can also use a while loop on top of it to keep it moving.</span>
<span class="comment-copy">If you're trying to create a user-friendly interface, you might want to look into <a href="https://docs.python.org/3/library/tkinter.html" rel="nofollow noreferrer">Tkinter</a>.</span>
<span class="comment-copy">What sort of menu are you looking for? What's not working? If the overall business logic of managing the dictionary is not critical to the problem please try to remove or stub them. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">@RaoSahab That was my second thought, but it would not work either... Maybe I coded it wrong??</span>
<span class="comment-copy">@Vero Weller --- Start your program by requiring the user to make a dictionary such as you did here: <code>user_dict = creating_dictionary()</code> and then give them menu options for the other tasks and pass the dictionary around as required.</span>
