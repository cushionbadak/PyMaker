<div class="post-text" itemprop="text">
<p>My target is to get a list of consecutive numbers, repeated accordingly with the initial list values. Lets say I have: </p>
<pre><code>initialList=[1,2,3,5]
</code></pre>
<p>And I want to get:</p>
<pre><code>targetList=[0,1,1,2,2,2,3,3,3,3,3]
</code></pre>
<p>...I'm totally new with Python, sorry for this -probably- very first steps question. Tried many searchs but the results didn't match with my needs, unfortunately. Thank you very much in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The newbie-friendly solution is to use two loops:</p>
<pre><code>result = []
number = 0
for repeat in initialList:
    for _ in range(repeat):
        result.append(number)
    number += 1

print(result)  # [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]
</code></pre>
<hr/>
<p>If you prefer one-liners for whatever reason, you can combine <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a> and <a href="https://docs.python.org/3/library/functions.html#func-range" rel="noreferrer"><code>range</code></a> to get</p>
<pre><code>result = [num for num, repeat in enumerate(initialList) for _ in range(repeat)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IMO, this is a more maintainable functional solution:</p>
<pre><code>initialList = [1, 2, 3, 5]

def listify(x):
    return [x]

# create sub-lists [[0], [1], [2], [3], ...]
sublists = map(listify, range(len(initialList)))

# attach to each sub-list the repititions required [([0], 1), ([2], 2), ...]
sublists_with_rep_spec = zip(sublists, initialList)

# create repetitions based on initialList (using list multiplication)
sublists_with_repetitions = starmap(operator.mul, sublists_with_rep_spec)

# flatten everything out
result = chain.from_iterable(sublists_with_repetitions)

print(list(result))
</code></pre>
<p>Note that this is all lazy (on python3) so everything will "happen" only when you actually call <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way using <code>repeat</code> and <code>chain.from_iterable</code></p>
<pre><code>from itertools import repeat, chain

list(chain.from_iterable((repeat(idx, num)) for idx, num in enumerate(initialList)))

[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>enumerate</code>:</p>
<pre><code>initialList=[1,2,3,5]
final_result = [i for b in [[c]*d for c, d in enumerate(initialList)] for i in b]
</code></pre>
<p>Output:</p>
<pre><code>[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution</p>
<pre><code>&gt;&gt;&gt; initialList=[1,2,3,5]
&gt;&gt;&gt; sum(([num]*count for num, count in enumerate(initialList)), [])
[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another easy way:</p>
<pre><code>from functools import reduce

initialList = [1,2,3,5]
targetList = [[index]*item for index, item in enumerate(initialList)]
targetList = reduce(lambda x,y: x+y, targetList)
print(targetList)
# [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is possible via <code>itertools</code>, if you wish to remove the need for nested logic. <code>itertools</code> is part of the standard library.</p>
<p>For improving your understanding of Python, I recommend you see <a href="https://stackoverflow.com/a/49613385/9209546">@Ajax1234's solution</a> for some nested list comprehensions.</p>
<pre><code>from itertools import chain

initialList = [1,2,3,5]

targetList = list(chain.from_iterable([i]*j for i, j in enumerate(initialList)))

# [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3]
</code></pre>
<p><strong>Note</strong>: you can replace <code>[i]*j</code> with <code>itertools.repeat(i, j)</code> or <code>numpy.repeat(i, j)</code> if you use <code>numpy</code>. The former may be preferable as it is lazy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Very simple solution using <code>sum</code> and <code>enumerate</code></p>
<pre><code>initialList = [1, 2, 3, 5]

targetList  = sum((times*[index] for index, times in enumerate(initialList)), [])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this approach:</p>
<pre><code>data=[[i]*initialList[i] for i,j in enumerate(initialList)]

print([k for i in data for k in i])
</code></pre>
<p>Just for fun I tried with lambda :</p>
<pre><code>initialList=[1,2,3,5]

print(list(map(lambda x:[x]*initialList[x],range(0,len(initialList)))))
</code></pre>
<p>lambda result is in nested list.</p>
</div>
<span class="comment-copy">Have you got any attempts yet that you can show us? Where are you tripping up?</span>
<span class="comment-copy">Thank you very much! Most of these solutions worked fine for me. THANKS!</span>
<span class="comment-copy">No need for the listcomp, a genexp will suffice.</span>
<span class="comment-copy">just did <code>list</code> to display the results but yes you can remove the <code>list</code> and still iterate over results as you wish, although the purpose of the final result is not mentioned so it is unclear</span>
<span class="comment-copy">I wasn't talking about <code>list</code>, I was talking about the list comprehension you used -- the square brackets.</span>
<span class="comment-copy">good catch edited</span>
<span class="comment-copy">Using <code>sum</code> to flatten lists is horrible performance-wise. Really really bad. Use <code>chain.from_iterable</code> from <code>itertools</code></span>
<span class="comment-copy">the reduce is horrible performance-wise, it is also the same as <code>sum(targetlist, [])</code> (again, horrible) - use <code>chain.from_iterable</code>.</span>
<span class="comment-copy">@ReutSharabani There are many answers using <code>chain</code>, I thought I should not duplicate mine.</span>
<span class="comment-copy">The current code creates linearily many intermediate lists. It is extremely wasteful.</span>
<span class="comment-copy">Much better performant solution - using <code>itertools.chain.from_iterable</code> instead of <code>sum</code>:  <code>itertools.chain.from_iterable(times*[index] for index, times in enumerate(initialList))</code> (need to <code>import itertools</code> and you get back an <code>iterator</code> instead of a <code>list</code> but that's negligible)</span>
