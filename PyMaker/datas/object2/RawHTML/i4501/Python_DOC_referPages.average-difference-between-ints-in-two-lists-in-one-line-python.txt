<div class="post-text" itemprop="text">
<p>There are two non-empty lists, containing only ints, both have the same length.  </p>
<p>Our function needs to return the average <strong>absolute</strong> difference between ints of same index.<br/>
For example, for the lists <code>[1, 2, 3, 4]</code> and <code>[1, 1, 1, 1]</code>, the answer will be <code>1.5</code>.<br/>
The function needs to be completed in one line.  </p>
<p>I had a little something that does that, but as you can probably guess, it's not a one-liner:  </p>
<pre><code>def avg_diff(a, b):
    sd = 0.0
    for x, y in zip(a, b):
        sd += abs(x - y)
    return sd / len(a)
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4 we got some <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">statistic functions</a> in the standard library, including <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a>.</p>
<p>Using this function and a generator-expression:</p>
<pre><code>from statistics import mean

a = [1, 2, 3, 4]
b =  [1, 1, 1, 1]

mean(abs(x - y) for x, y in zip(a, b))
# 1.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [1, 2, 3, 4]
b = [1, 1, 1, 1]

sum([abs(i - j) for i, j in zip(a,b)]) / float(len(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are happy to use a 3rd party library, <code>numpy</code> provides one way:</p>
<pre><code>import numpy as np

A = np.array([1, 2, 3, 4])
B = np.array([1, 1, 1, 1])

res = np.mean(np.abs(A - B))
# 1.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the in-built <code>sum</code> and <code>len</code> functions on list:</p>
<pre><code>lst1 = [1, 2, 3, 4]
lst2 = [1, 1, 1, 1]
diff = [abs(x-y) for x, y in zip(lst1, lst2)]  # find index-wise differences
print(sum(diff)/len(diff))    # divide sum of differences by total
# 1.5
</code></pre>
</div>
<span class="comment-copy">hint, use:  lambda</span>
<span class="comment-copy">are you comfortable with using a 3rd party library (e.g. <code>numpy</code>?)</span>
<span class="comment-copy">I think your answer can be found in this post: <a href="https://stackoverflow.com/questions/4362586/sum-a-list-of-numbers-in-python" title="sum a list of numbers in python">stackoverflow.com/questions/4362586/…</a></span>
<span class="comment-copy">I <i>hate</i> the statistics module. If you look at the code it's insanely complex and has the really strange requirement that the precision of the result is equal to the precision of the inputs, something we very rarely care about in statistics. <code>from statistics import mean as stats_mean</code> --- <code>def py_mean(x):    return sum(x) / len(x)</code>  --- <code>%timeit stats_mean(x) # 137 ms ± 1.63 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code> --- <code>%timeit py_mean(x) #  359 µs ± 4.44 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</code></span>
<span class="comment-copy">@FHTMitchell I admit to not using it normally, either, because I usually have <code>numpy.array</code>s. I just knew that it existed and it does make for a nice one-line solution, as requested by OP. I guess the price for it also supporting <code>Decimal</code> and <code>Fraction</code> is that insanely complex implementation and a speed-hit compared to the straight-forward implementation.</span>
<span class="comment-copy">Yeah same, I just think it's another case of the stdlib trying to include something currently done by a third party but somehow managing to do it much worse -- see <code>attrs</code> and <code>dataclasses</code>.  For reference <code>%timeit np_mean(x) # 2.31 ms ± 41.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code>but that does have a list passed to it. For an array: <code>%timeit np_mean(y) #  63.1 µs ± 1.57 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)</code></span>
<span class="comment-copy">you don't need to make a list comprehension, just use a generator expression: <code>sum(i - j for i, j in zip(a, b)) / len(a)</code></span>
<span class="comment-copy">I know exactly why he used it :) Thanks Shahaf and everyone, I completely forgot about the existence of sum.</span>
<span class="comment-copy">@Guy And why is that? Because I don't.</span>
