<div class="post-text" itemprop="text">
<p>Why does the bit length of 0 return 0 and not 1?</p>
<pre><code>&gt;&gt;&gt; int(0).bit_length()
0

&gt;&gt;&gt; int(2).bit_length()
2
</code></pre>
<p>2 in binary is 0x10 which represents two bits, doesn't zero in binary still techincally take up 1 bit since its representation in hex is 0x0?</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python documentation states</p>
<blockquote>
<p>More precisely, if x is nonzero, then x.bit_length() is the unique
  positive integer k such that 2**(k-1) &lt;= abs(x) &lt; 2**k. Equivalently,
  when abs(x) is small enough to have a correctly rounded logarithm,
  then k = 1 + int(log(abs(x), 2)).<br/>
  If x is zero, then x.bit_length()
  returns 0.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#int.bit_length</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Please read documentation on <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html</a>
It is explained.
That's how the function works. if you send it 0, it'll output 0</p>
<blockquote>
<p>If x is zero, then x.bit_length() returns 0.</p>
</blockquote>
</div>
<span class="comment-copy">These are theoretical bounds. In practice, all integers are represented by some number of bytes, so you could just as well ask why <code>bit_length()</code> doesn't always return a non-zero multiple of 8.</span>
