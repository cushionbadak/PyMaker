<div class="post-text" itemprop="text">
<p>This question comes from a hackerrank question from basic data types. When I run</p>
<pre><code>max(map(int, range(5)))
</code></pre>
<p>I get the right output of 4, however when I do</p>
<pre><code>if __name__ == '__main__':
    n = int(input()) #this line seems irrelevant to my question, but it was present in the original question so I have included it here for completeness
    arr = map(int, input().split())
    print(max([x for x in arr if x &lt; max(arr)]))
</code></pre>
<p>and give input</p>
<pre><code>5
2 3 6 6 5
</code></pre>
<p>the result is 2. However if I first cast the map object to a list I get the correct answer of 5. This is further bewildering as when I replace the print argument with</p>
<pre><code>print(max(arr))
</code></pre>
<p>it gives the correct answer of 6, so clearly max works, but I'm guessing something in the list comprehension breaks on map objects for some reason. This is especially supported by the fact that if I do</p>
<pre><code>print([x for x in arr if x &lt; max(arr)])
</code></pre>
<p>I get 2. More testing with other less ordered lists shows that the last statement seems to always return list(arr)[0], so ultimately I expect the issue is with the list comprehension on the map objects. So ultimately what I'd like to know is</p>
<ul>
<li>How does Python 3.5.x deal with map objects and list comprehensions which is causing the failure?</li>
<li>Is there any way to successfully process the map object in a straightforward way with a comprehension that does not involve casting?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The return value of <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> in Python 3 is not a list, but an iterable object. It can easily be turned into a list, but if you use it directly, it can't be iterated multiple times. If you iterate it once in order for <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> to be calculated, you have used it up, and you won't get all the items again.</p>
<p>In Python 2, <code>map</code> built a list for you, so you didn't get the option of lazily evaluating the items inside it. In Python 3, you can pass it to the <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer"><code>list</code></a> function to get a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <code>map</code> gives you an <a href="https://docs.python.org/2/glossary.html#term-iterator" rel="nofollow noreferrer"><em>iterator</em></a>. So <code>arr</code> gives you the numbers 2, 3, 6, 6 and 5 <strong>once</strong>. When you do  <code>[x for x in arr if x &lt; max(arr)]))</code>, the <code>for x in arr</code> asks <code>arr</code> for its next element, which is <code>2</code>, and assigns that to <code>x</code>. Then the <code>max(arr)</code> goes over the remaining numbers (3, 6, 6 and 5) and returns the maximum, which is <code>6</code>. Since <code>2</code> is less than <code>6</code>, it ends up in your result. Then the <code>for x in arr</code> goes again, and since <code>arr</code> already went through everything, we're finished. So that's why your result is <code>[2]</code>.</p>
<p>You're wrong about the list always containing the first element, though. If you for example enter <code>4 3 2 1</code>, then the resulting list is <em>empty</em> (because <code>4</code> isn't less than the maximum of 3, 2 and 1).</p>
</div>
<span class="comment-copy">OK, that makes sense, so basically the list data type allows for multiple iterations. I did some testing with other iteration operations like comprehension without max and it seems to hold up. Thanks for your time! (I'll accept once the time lock is over)</span>
<span class="comment-copy">That's fantastic. I appreciate the added information!</span>
