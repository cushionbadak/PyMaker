<div class="post-text" itemprop="text">
<p>I am using <strong>python 2.7</strong> + <strong>virtualenv version 1.10.1</strong> for running myproject projects. Due to some other projects requirement I have to work with other version of python(<strong>Python 3.5</strong>) and <strong>Django 1.9</strong>. For this I have installed python in my user directory. Also I have dowloaded and installed virtualenv( <strong>version - 15.1.0</strong>) into my user directory. 
But whenever I am trying to create virtual env I am getting the below error</p>
<pre><code>python virtualenv/virtualenv.py myproject
</code></pre>
<hr/>
<pre><code>Using base prefix '/home/myuser/python3'
New python executable in /home/mount/myuser/project_python3/myproject/bin/python
ERROR: The executable /home/mount/myuser/project_python3/myproject/bin/python is not functioning
ERROR: It thinks sys.prefix is '/home/myuser/python3' (should be '/home/mount/myuser/project_python3/myproject')
ERROR: virtualenv is not compatible with this system or executable
</code></pre>
<p>Can anybody tell what I am doing wrong with this </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.6+, the pyvenv module is deprecated. Use the following one-liner instead:</p>
<pre><code>python3 -m venv &lt;myenvname&gt;
</code></pre>
<p>This is the <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer">recommended way</a> to create virtual environments by the Python community.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python already ships with its builtin "virtualenv" called <code>venv</code> since version 3.3.  You no longer need to install or download the <code>virtualenv</code> scripts for Python 3.3+.</p>
<p><a href="https://docs.python.org/3/library/venv.html" rel="noreferrer">https://docs.python.org/3/library/venv.html</a></p>
<p>Check that your installation provided the <code>pyvenv</code> command that should take care of creating the "virtualenv".  Arguments are similar to the classic virtualenv project.</p>
<pre><code>$ pyvenv --help
usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
            [--upgrade] [--without-pip]
            ENV_DIR [ENV_DIR ...]

Creates virtual Python environments in one or more target directories.

positional arguments:
  ENV_DIR               A directory to create the environment in.

optional arguments:
  -h, --help            show this help message and exit
  --system-site-packages
                        Give the virtual environment access to the system
                        site-packages dir.
  --symlinks            Try to use symlinks rather than copies, when symlinks
                        are not the default for the platform.
  --copies              Try to use copies rather than symlinks, even when
                        symlinks are the default for the platform.
  --clear               Delete the contents of the environment directory if it
                        already exists, before environment creation.
  --upgrade             Upgrade the environment directory to use this version
                        of Python, assuming Python has been upgraded in-place.
  --without-pip         Skips installing or upgrading pip in the virtual
                        environment (pip is bootstrapped by default)

Once an environment has been created, you may wish to activate it, e.g. by
sourcing an activate script in its bin directory.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I install it using the command (for Python 3.x), </p>
<pre><code>$ python3 -m venv env
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Install virtualenvwrapper on top of virtualenv to simplify things.
Follow the blog to install in easy steps: <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/#virtualenvwrapper" rel="nofollow noreferrer">virtualenvwrapper</a></p>
<p>Steps to create it:</p>
<ol>
<li>mkvirtualenv -p /usr/bin/python3 </li>
<li>Install packages using - pip install package_name</li>
<li><code>workon</code> - activates the virtualenv, <code>deactivate</code> - deactivates the viirtualenv</li>
</ol>
</div>
<span class="comment-copy">It's not clear which Python you are using when you run <code>python virtualenv/virtualenv.py myproject</code>. Is <code>python</code> here your system Python (2.7) or your local Python (3.5)?</span>
<span class="comment-copy">Did you use the correct pip, i.e. pip3, to install virtualenv version - 15.1.0?</span>
<span class="comment-copy">I always find <a href="http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">these docs</a> helpful.</span>
<span class="comment-copy">@Chris I  am using python3.5</span>
<span class="comment-copy">@PM2Ring I have used the command python -m pip &lt;virtualenv package&gt;</span>
<span class="comment-copy">This script is deprecated in Python 3.6+, although the module still exists. The recommended use is: <code>python3 -m venv &lt;myenvname&gt;</code></span>
<span class="comment-copy">@user73657 I am using python 3.5 . But if i run the command pyenv its saying command not found</span>
<span class="comment-copy">@user73657 pyenv is not available in 3.5.3</span>
<span class="comment-copy">@Anish, the script isn't <code>pyenv</code> but <i><code>pyvenv</code></i>.</span>
<span class="comment-copy">Great, @Anish! Please remember to <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accept</a> answers that solve your problem.</span>
<span class="comment-copy">How will adding a wrapper around <code>virtualenv</code> help if <code>virtualenv</code> itself isn't working?</span>
<span class="comment-copy">This is a repeated answer. This is also an incorrect answer. virtualenv is deprecated, this is a wrapper around virtualenv</span>
