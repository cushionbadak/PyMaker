<div class="post-text" itemprop="text">
<p>I am trying to retrieve the 'Now Playing' information from <a href="http://radioplayer.magic.co.uk/live" rel="nofollow noreferrer">http://radioplayer.magic.co.uk/live</a> using Python and Beautiful Soup.</p>
<p>I can see the text in a web browser and can copy and paste it so I am assuming this text is downloaded from somewhere, when I look at the page from Beautiful Soup I can't see the text or even where it might be coming from.</p>
<p>I am a beginner at this so please be gentle! </p>
<p>Thanks in advance for sharing your knowledge and experience.</p>
<p>ADDITIONAL INFORMATION: I am using Python 3 on a raspberry pi</p>
</div>
<div class="post-text" itemprop="text">
<p>The content of <em>Now Playing</em> div is loaded dynamically by making an <strong>AJAX</strong> request and that is why it is not included in the source page you will received. </p>
<p>What you can do is imitating the ajax request made and fetching the response from there.</p>
<p>This is how you can achieve this : </p>
<pre><code>import requests
import json

main_url = "http://radioplayer.magic.co.uk/live/"
ajax_url = "http://ps1.pubnub.com/subscribe/sub-eff4f180-d0c2-11e1-bee3-1b5222fb6268/np_4/0/14901814159272341?uuid=ef978c6c-2edf-4ff5-910a-39765d038427"
re = requests.get(ajax_url).content
playing_list = json.loads(re)[0]
max_time = 0
playing_now_dict = {}

for playings in playing_list : 
    if int(playings['start_time']) &gt; max_time  : 
        playing_now_dict = playings
print(playing_now_dict.get('title', ''))
print(playing_now_dict.get('artist', ''))
</code></pre>
<p>This currently prints : </p>
<pre><code>Young Hearts Run Free
Candi Staton
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like a task for python and selenium: <a href="http://selenium-python.readthedocs.io/" rel="nofollow noreferrer">http://selenium-python.readthedocs.io/</a> (this enables you to control the browser and do whatever you can do manually, e.g. select displayed text)</p>
<p>(Warinng - the Firefox plugin is somewhat picky about the version, last stable version in Ubuntu works only with Firefox up to 45)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to stick to using a headless browser (e.g. <a href="https://docs.python.org/3/library/urllib.html" rel="nofollow noreferrer"><code>urllib</code></a>, <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer"><code>requests</code></a>) then you will have to monitor the network calls while loading the website and get the exact URI (&amp; necessary form data?) to use in python.</p>
<p>OR you could use <a href="http://selenium-python.readthedocs.io/" rel="nofollow noreferrer"><code>python-selenium</code></a> which will work exactly like the browser. Once you load the page, you can use <code>driver.page_source</code> to parse the source through BeautifulSoup.</p>
<p>Also, if you are lucky, maybe the website has an API (json/xml) that lets you fetch what you want without going through the hassle of parsing the raw source.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using selenium is usually more difficult to install than to actually use. For example, you could try the following out first on a normal PC:</p>
<pre><code>from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

url = "http://radioplayer.magic.co.uk/live/"
browser = webdriver.Firefox(firefox_binary=FirefoxBinary())
browser.get(url)
soup = BeautifulSoup(browser.page_source, 'html.parser')
playlist = soup.find(id='playlist')

print playlist.find('span', class_='artist').text
print playlist.find('span', class_='title').text
</code></pre>
<p>This would give you something like:</p>
<pre><code>Level 42
Running In The Family
</code></pre>
<p>You will need to investigate which browser driver will be compatible on a Raspberry Pi.</p>
</div>
<span class="comment-copy">You will have to monitor the network calls while loading the website and get the exact URI (&amp; necessary form data?) to use in python. OR you could use python-selenium which will work exactly like the browser and do <code>webdriver.get_source</code>.</span>
<span class="comment-copy">@AshishNitinPatil - That looks like an answer.</span>
<span class="comment-copy">Thank you so much, This was very simple to implement and use. For some reason I had to change re = requests.get(ajax_url).content to re = requests.get(ajax_url).content.decode('utf-8') to make it work. I am now going to try and learn <i>why</i> it works</span>
<span class="comment-copy">You are welcome! Don't forget to accept one of the answers by clicking on the grey tick button under the up/down buttons.</span>
<span class="comment-copy">I've accepted one. (It's this one)</span>
<span class="comment-copy">I am not expecting everyone to do the work for me, so can someone point me in a direction where I can learn how to ascertain the ajax url  as in this answer but for different (but very similar) web sites.</span>
<span class="comment-copy">Just a heads up... Don't hardcode <code>ps1.</code> into your source code. Please use just <code>ps.</code>. And you shouldn't expose your sub-key.</span>
<span class="comment-copy">Thanks for the quick response. selenium sounds promising. I am programming in python on a raspberry pi. Will selenium work on this platform?</span>
<span class="comment-copy">I have searched for an API and I don't think they provide this. It seams like selenium might be the answer. I have only had a quick look at the documentation so far and it seems quite complicated. I am not worried if a bit of learning is needed (learning is fun) but my first impression is that this might be like using a sledge hammer to crack a nut,</span>
<span class="comment-copy">Depends on the use case. Selenium is basically a browser, so it will be heavy to run. It should be possible to run it on raspberry pi, but can't say for sure. If you want to avoid using selenium, look at the network calls and see what urls are being requested by your browser, maybe you'll get lucky and find the right one for the "Now playing" data.</span>
<span class="comment-copy">Thank you for your answer. It looks simple to implement. I will try it out as soon as I have access to a <i>normal</i> PC</span>
