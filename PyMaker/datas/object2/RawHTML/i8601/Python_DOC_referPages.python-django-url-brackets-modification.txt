<div class="post-text" itemprop="text">
<p>I am trying to write a Python script which will replace the brackets with: </p>
<p><code>(</code> -&gt; <code>%28</code> <br/>
<code>)</code> -&gt; <code>%29</code> <br/></p>
<p>I found that the django module in Python can do this using the function iri_to_uri. For example I want to convert <code>https://example.com/pat(da35dd40)/index.html</code> into <code>https://example.com/pat%28da35dd40%29/index.html</code> but for some reason my script doesn't work: </p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
from django.utils.encoding import iri_to_uri

print uri_to_iri(https://example.com/pat(da35dd40)/index.html)
</code></pre>
<p>And it reports invalid syntax, if I put the URL into quotes it doesn't transform the brackets. The ultimate goal is this script to process an input from the user and escape all special characters, so that the script could be processed by other processes. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try using the <code>quote</code> from <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="nofollow noreferrer">urllib</a>. It makes the url safe to be passed around.</p>
<p>Just be careful and keep the <code>http://</code> out, only parse the url without the protocol. (Thanks @MariusSiuram for reminding of this)</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to @FernandoCezar, I found the solution. The code below will not interpret the characters defined after safe so it will correctly convert the link:  <code>urllib.quote('https://example.com/pat(da35dd40)/index.html', safe=':''/')</code> </p>
</div>
<span class="comment-copy">Yes, obviously that is invalid syntax because anything like that needs to be a string.</span>
<span class="comment-copy">I am no expert, but it seems that parenthesis are considered ok by Django. I assume that RFC 3987 says so, otherwise you can send a bug report to Django. If you try to add a space, you will see that <code>iri_to_uri</code> works as expected.</span>
<span class="comment-copy">that is correct <i>but</i> caution! the protocol part should be take into account separately (that is, do not try to <code>quote</code> the full <a href="https://example.com/pat.../" rel="nofollow noreferrer">example.com/pat...</a> and instead use <code>example.com/pat...</code> or simply <code>/pat...</code>.</span>
<span class="comment-copy">@MariusSiuram The problem is that when I parse the whole URL it transcripts the <code>:</code> into <code>%3A</code>. So the full link is <code>https%3A//example.com/pat%28da35dd40%29/index.html</code> instead of <code>https://example.com/pat%28da35dd40%29/index.html</code></span>
<span class="comment-copy">As he said, you should keep the <code>http://</code> out of the quote. I'll update the answer to include this.</span>
<span class="comment-copy">but that will fail for a url like <code>http://example.com/pat(28:34)/index.html</code>. Not very generic in that sense.</span>
<span class="comment-copy">@MariusSiuram but the odds the link itself to contain double point is very little, so this solution is working for me. I guess the other option is to convert the string into list and to ignore the first 8 elements and apply the urllib.quote from the 9th char onwards. This is also not an optimal solution.</span>
