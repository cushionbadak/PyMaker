<div class="post-text" itemprop="text">
<p>Im new at programming and i was wondering how can i open a notepad document so the user can type on it. I already know that you can use</p>
<pre><code>variablename  = open("filename.txt","w")
</code></pre>
<p>to open and write on a file but instead of writing on python i wanted the file to open directly so the user can type on the actual file not in python shell.
So far i know that i have to use</p>
<pre><code>import os
os.?????(filename.txt)
</code></pre>
<p>but i dont know how to make the file pop up so the user can enter data. can somebody help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>This easiest approach using <code>os</code> is to use os.system to run a shell script:</p>
<pre><code>import os
os.system("notepad filename.txt")
</code></pre>
<p>Or using <code>subprocess.Popen</code> which is usually the recommended way:</p>
<pre><code>import subprocess
subprocess.Popen(["notepad","filename.txt"])
# the concepts of both my methods is they run a shell script calling notepad to run filename.txt
</code></pre>
<p>But I believe only Windows has the Notepad application. </p>
<p>You can also use the suggested method from the comments:</p>
<pre><code>import subprocess
subprocess.run(["notepad","filename.txt"])
</code></pre>
<p>But that only works in Python 3.5+</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.system("start notepad.exe &lt;path/to/file&gt;")
</code></pre>
<p>This will pop-up Notepad. If the file doesn't exist, there will be a prompt asking if you'd like to create it.</p>
</div>
<span class="comment-copy">If the file association on Windows is setup so that <code>.txt</code> files open <code>notepad</code> then you can "execute" the text file using  <code>subprocess.run</code> and set <code>shell=True</code>.  That will run whichever program is associated with that file extension, so it works for office documents as well (will open Word, Excel, etc.).  That will only work on Windows though.</span>
<span class="comment-copy"><i>The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle.</i>  from <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html</a></span>
<span class="comment-copy">Thank you really helpful :)</span>
