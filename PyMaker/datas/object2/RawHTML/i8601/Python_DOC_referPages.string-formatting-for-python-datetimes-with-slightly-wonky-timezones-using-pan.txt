<div class="post-text" itemprop="text">
<p>I am having trouble parsing timestamps for my data using Pandas.</p>
<p>An example of the datetime format that I am trying to parse looks like <code>2012-05-02 01:00:00-05:00</code>.  From the Pandas docs I was driven to the relevant <a href="https://docs.python.org/3.6/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">Python datetime formatting</a> docs which suggested that I should use a formatting string similar to <code>%Y-%m-%d %H:%M:%S%z</code>.</p>
<p>I used the formatting string as follows...</p>
<pre><code>fmts = {"variable_name": `%Y-%m-%d %H:%M:%S%z`}
df = pd.read_sql_query("SELECT * FROM some_table", con=some_engine, parse_dates=fmts)
</code></pre>
<p>This solution returned a the Dataframe but failed to parse the requested columns. I think this is because the timezone component of my data has an unexpected colon! For the example that I given the timezone is <code>-05:00</code> and the <code>%z</code> formatting string expects <code>-0500</code>.</p>
<p>Any thoughts on how to approach this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can cook up a function to convert your date string format.  Then it can be applied to the column to convert to datetimes.  This function can return timezone <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">aware or naive timestamps</a>.</p>
<p><strong>Code:</strong></p>
<pre><code>import datetime as dt
import pytz

def convert_to_datetime(tz=None):
    """ Convert our custom timezone representation to a datetime

    Timestamp looks like: 2012-05-02 01:00:00-05:00

    :param tz: None, returns UTC relative Naive
               True, returns timezone aware timestamp in UTC
               &lt;tz&gt;, returns timezone aware timestamp in given timezone 
    :return: returns a processing function that can be passed to apply()  
    """

    def func(datetime_string):
        time = datetime_string[:19]
        tz_str = datetime_string[19:]

        # parse the timezone offset to minutes and seconds
        tz_offset = int(
            tz_str[0] + str(int(tz_str[1:3]) * 60 + int(tz_str[4:])))

        # return a datetime that is offset
        result = dt.datetime.strptime(time, '%Y-%m-%d %H:%M:%S') - \
                 dt.timedelta(minutes=tz_offset)

        if tz is not None:
            result = result.replace(tzinfo=pytz.UTC)

            if tz is not True:
                result = result.astimezone(tz)
        return result

    return func
</code></pre>
<p><strong>Test Code:</strong></p>
<pre><code>df = pd.DataFrame([
    '2012-05-02 01:00:00-05:00',
    '2012-05-02 03:00:00-05:00'],
    columns=['timestamp'])

df['zulu_no_tz'] = df.timestamp.apply(convert_to_datetime())
df['utc_tz'] = df.timestamp.apply(convert_to_datetime(tz=True))
df['local_tz'] = df.timestamp.apply(convert_to_datetime(
    tz=pytz.timezone('US/Central')))
print(df)
</code></pre>
<p><strong>Test Results:</strong></p>
<pre><code>                   timestamp          zulu_no_tz                    utc_tz  \
0  2012-05-02 01:00:00-05:00 2012-05-02 06:00:00 2012-05-02 06:00:00+00:00   
1  2012-05-02 03:00:00-05:00 2012-05-02 08:00:00 2012-05-02 08:00:00+00:00   

                   local_tz  
0 2012-05-02 01:00:00-05:00  
1 2012-05-02 03:00:00-05:00
</code></pre>
<p><strong>Use <code>dateutil</code>:</strong></p>
<p>If you have access to <a href="https://labix.org/python-dateutil" rel="nofollow noreferrer"><code>dateutil</code></a> you can use their parsing code.  This is a replacement for the <code>func</code> above and it handles your date format just fine.</p>
<pre><code>import dateutil

def func(datetime_string):
    result = dateutil.parser.parse(datetime_string).astimezone(pytz.UTC)

    if tz is None:
        result = result.replace(tzinfo=None)
    elif tz is not True:
        result = result.astimezone(tz)
    return result
</code></pre>
<p>You can also use the <code>dateutil.parser</code> naked in <code>apply()</code> as:</p>
<pre><code>import dateutil
df.timestamp.apply(dateutil.parser.parse)
</code></pre>
<p>I am not a huge fan of this style because it applies a fixed offset timezone, which means that it is not daylight savings aware.  I personally prefer either daylight savings aware or simply UTC.</p>
</div>
