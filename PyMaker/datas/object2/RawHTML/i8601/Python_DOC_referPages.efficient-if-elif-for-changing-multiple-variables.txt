<div class="post-text" itemprop="text">
<p>I have several variables, some of which I need to change on a certain condition.</p>
<pre><code>test = 'foo'
a, b, c = None, None, None
if test == 'foo':
    a = 1
elif test == 'bar':
    b = 2
else:
    c = 3
</code></pre>
<p>I'd like to use the dict approach described <a href="https://stackoverflow.com/questions/17166074/most-efficient-way-of-making-an-if-elif-elif-else-statement-when-the-else-is-don">here</a>, but how can I modify it to change multiple variables? I want it to work like this:</p>
<pre><code>options = {'foo': ('a',1), 'bar': ('b',2)}
reassign_variables(options,test, ('c',3))
</code></pre>
<p>Or can this not be done without creating a function and hard-coding all of the conditions in separately?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will change variables in the module's global namespace</p>
<pre><code>&gt;&gt;&gt; options = {'foo': ('a',1), 'bar': ('b',2)}
&gt;&gt;&gt; 
&gt;&gt;&gt; def reassign_variables(options, test, default):
...     var, val = options.get(test, default)
...     globals()[var] = val
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; a, b, c = None, None, None
&gt;&gt;&gt; reassign_variables(options, "foo", ('c',3))
&gt;&gt;&gt; a,b,c
(1, None, None)
&gt;&gt;&gt; reassign_variables(options, "baz", ('c',3))
&gt;&gt;&gt; a,b,c
(1, None, 3)
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update</code></a> method like so, if I get you right:</p>
<pre><code>test = 'foo'
options.update({test:('a',12)})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can resign the values back to variables</p>
<pre><code>a,b,c = None, None, None
options = {'foo': (1,b,c), 'bar': (a,1,c)}
default = (a,b,1)
test = 'foo'
a,b,c = options.get(test,default)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://stackoverflow.com/questions/9437726/how-to-get-the-value-of-a-variable-given-its-name-in-a-string">this</a>, you can access variables by name using globals(). Applying this method to the problem you are trying to solve, all you have to do is use your default value in the call to options.get</p>
<pre><code>test = 'foo'
options = {'foo': ('a', 1), 'bar': ('b', 2)}
default = ('c', 3)
var_name, var_value = options.get(test, default)
globals()[var_name] = var_value
</code></pre>
<p>If the variables are members of an object, you can use setattr as explained <a href="https://stackoverflow.com/questions/1167398/python-access-class-property-from-string">here</a>.</p>
</div>
<span class="comment-copy">what do you want options to be after your reassign_variables()</span>
<span class="comment-copy">Why is <code>'c'</code> not in the <code>options</code> dictionary?  It could have a key of  (for example) <code>'default'.</code></span>
<span class="comment-copy">@niklas I want them to remain the same, but I want r_v() to change variables specified in options</span>
<span class="comment-copy">Not sure what you want, but <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update</code></a> might be what you're looking for.</span>
<span class="comment-copy">How do you want the <code>else</code> condition handled?</span>
<span class="comment-copy">This is not scalable, as you would have to modify N-1 tuples every time and adding an extra one</span>
<span class="comment-copy">It works, but the answer given by @tdelaney has better handling of the default case and gives it as a function as the OP suggested</span>
<span class="comment-copy">This provides a two-line solution that does not require the creation of a function</span>
<span class="comment-copy">The 4 lines you had when I first commented weren't as elegant. (Edits are stored Pablo) Your current 2 lines are the same that in the function, so this answer now provides nothing new except from not using a function. The OP  gave a function template the other answer complies with, while yours doesn't.</span>
