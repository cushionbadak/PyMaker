<div class="post-text" itemprop="text">
<p>I have written 5 methods which do some stuffs and will return <code>True</code> or <code>False</code> based on the stuffs. By calling those method I will assign the return value to separate variables and I want to compare those return values and if 5 out of 3 methods return True then I have to do some other stuffs else different stuffs. </p>
<pre><code>def method1():
   # stuffs
   return True

def method2():
   #stuffs
   return False

def method3():
   #stuffs
   return True

def method4():
   #stuffs
   return True

def method5():
   #stuffs
   return True 

var1 = method1()
var2 = method2()
var3 = method3()
var4 = method4()
var5 = method5()
</code></pre>
<p>now I have to do comparison for these variable values and out of 3 are True then have to do some stuffs.</p>
<p>I found <code>not()</code> or <code>any()</code> in if statements but that is not suitable for my situation. So is there any other function which will help me to take it forward?</p>
<p>Looking for generic way which should work on python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Store teh result of all your methods in a list.
Count the number of True!</p>
<pre><code>if [method1(),method2(),method3(),method4(),method5()].count(True) == n:
    pass
</code></pre>
<p>This should do!
Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>How about use
<code>
results = [var1, var2, var3, var4, var5]
if len(v for v in results if v) &gt;= 3:
    ...
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can add those variables into a list and use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum</a> (True = 1, False = 0).</p>
<pre><code>if sum([var1, var2, var3, var4, var5]) &gt;= 3:
    #do stuffs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way of solving your problem:</p>
<pre><code>values = [var1, var2, var3, var4, var5]
if values.count(True) &gt;= 3:
    # do something
</code></pre>
<p>I think this approach is easy to reason about, which is why I stayed away from multiple list comprehensions.</p>
<p>Happy coding!</p>
</div>
<span class="comment-copy">List comprehension is awesome! That should work.</span>
