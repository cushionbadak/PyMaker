<div class="post-text" itemprop="text">
<p>I'm attempting to write a function with python that will take an list of strings that I have defined and display them as a single string that is and HTML unordered list of said strings. So far my code is:</p>
<pre><code>def pizzatoppings(self):
    toppings = ['mushrooms', 'peppers', 'pepparoni', 'steak', 'walnuts', 'goat cheese', 'eggplant', 'garlic sauce'];
    for s in toppings:
        ul += "&lt;li&gt;"+str(s)+"&lt;/li&gt;"
        ul += "&lt;/ul&gt;"
        return ul
</code></pre>
<p>When I attempt to run this however I get no traceback and nothing happens. Does anyone know why this is happening? I know this is probably a trivial question but I've searched for answers and cannot find a solution. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like that:</p>
<pre><code>def print_ul(elements):
    print("&lt;ul&gt;")
    for s in elements:
        ul = "&lt;li&gt;" + str(s) + "&lt;/li&gt;"
        print(ul)
    print("&lt;/ul&gt;")

toppings = ['mushrooms', 'peppers', 'pepparoni', 'steak', 'walnuts', 'goat cheese', 'eggplant', 'garlic sauce'];
print_ul(toppings)
</code></pre>
<p>There were some problems with your original code: </p>
<ul>
<li>you did not <em>call</em> the function, so no wonder it didn't do anything</li>
<li>even if you did, the function did not actually <em>print</em> anything, it just returned some values</li>
<li>the function didn't really take arguments, so it was not re-usable at all</li>
</ul>
<p>A better (IMO) solution would be to have a function generating the HTML code, and printing the result:</p>
<pre><code>def ulify(elements):
    string = "&lt;ul&gt;\n"
    for s in elements:
        string += "&lt;li&gt;" + str(s) + "&lt;/li&gt;\n"
    string += "&lt;/ul&gt;"
    return string

print(ulify(['thing', 'other_thing']))
</code></pre>
<p>You can also read about <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>. It would make working with lists simpler:</p>
<pre><code>def ulify(elements):
    string = "&lt;ul&gt;\n"
    string += "\n".join(["&lt;li&gt;" + str(s) + "&lt;/li&gt;" for s in elements])
    string += "\n&lt;/ul&gt;"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you are trying to build a website. Why don't you use a template engine, like Jinja 2 for this, instead of printing a HTML snippet from a function? For that you will need a Python web application, plausibly written in one of web frameworks. I'd go for <a href="http://flask.pocoo.org/" rel="nofollow noreferrer">Flask</a> here, it's simple to start working with and Jinja is a default template engine for Flask.</p>
<p>If you just want to generate static HTML files, I would recommend <a href="http://pythonhosted.org/Frozen-Flask/" rel="nofollow noreferrer">Frozen-Flask</a>, which allows you to generate static HTML files that can be hosted without a need to deploy any Python web application on your server. Just copy generated files to your hosting and you are ready to go.</p>
<p>If you still want to just print a HTML snippet, your code should be something like Ealhad posted in his answer.</p>
<p>Also, you original code contains a few problems:</p>
<pre><code>def pizzatoppings(self):
    # you don't need semicolons in Python
    toppings = ['mushrooms', 'peppers', 'pepparoni', 'steak', 'walnuts', 'goat cheese', 'eggplant', 'garlic sauce']
    # you need to initialize a "ul" variable
    ul = "&lt;ul&gt;"
    for s in toppings:
        ul += "&lt;li&gt;"+str(s)+"&lt;/li&gt;"
    # following two lines where indented too much. In Python, indentation defines a block of code
    ul += "&lt;/ul&gt;"
    return ul
</code></pre>
</div>
<span class="comment-copy">How are you running it?</span>
<span class="comment-copy">I am saving the file as pizzatoppings.py and running it in my terminal window with <code>$ python pizzatoppings.py</code></span>
<span class="comment-copy">I can't believe I was forgetting to call the function, thanks for your help I've marked your answer as correct.</span>
<span class="comment-copy">@NoOrangeJuice I'm glad! I can help you improve it a bit if you want ;)</span>
<span class="comment-copy">Using a function to generate the code looks much simpler actually, thanks again!</span>
<span class="comment-copy">It's simpler indeed, and much more composable. You can use the generated text in other functions, or even print to a file instead of you terminal. Functions are good, use them! (and especially those which are already built-in!)</span>
<span class="comment-copy">I'm actually more familiar with template engines, and I agree they are much simple to use. However I'm trying to write the html snippet as a proof of concept kind of thing.</span>
