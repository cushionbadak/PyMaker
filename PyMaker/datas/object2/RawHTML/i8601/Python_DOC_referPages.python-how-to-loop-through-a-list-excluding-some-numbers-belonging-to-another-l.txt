<div class="post-text" itemprop="text">
<p>I need to loop through a list "A" of 100.000 elements. But I need to skip some of them, in particlular I want to skip the elements which are written into another list "B".
What is the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a filter:</p>
<pre><code>a = [0, 1, 2, 3, 4]
b = [1, 2]
list(filter(lambda el: el not in b, a))
# [0, 3, 4]
</code></pre>
<p>If you need to iterate on the elements, drop the <code>list</code> wrapping the filter:</p>
<pre><code>for el in filter(lambda el: el not in b, a):
    do_something()
</code></pre>
<p>Alternatively, the same can be achieved with a list comprehension, which is essentially the same semantically:</p>
<pre><code>[el for el in a if el not in b]
# [0, 3, 4]
</code></pre>
<p>Keep in mind that in both those versions, you'll be performing a linear search on the elements of b.
If that list is pretty long, this might get really slow.
A more efficient method (as suggested in the comments) would be to make b a set rather than a list.
This only requires the elements of b to be <a href="https://docs.python.org/3/glossary.html" rel="nofollow noreferrer">hashable</a>.</p>
<pre><code>bset = set(b)
[el for el in a if el not in bset]
# [0, 3, 4]
</code></pre>
</div>
<span class="comment-copy">Make a set from <code>B</code>, and check if each element is <code>in B</code>.</span>
<span class="comment-copy">Have you written any code?</span>
<span class="comment-copy"><code>B = set(B); only_in_A = [x for x in A if x not in B]</code>... Or if you don't care about multiple repeated values in <code>A</code>, then convert <code>A</code> to a <code>set</code>.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/16548176/what-is-the-best-way-to-iterate-over-a-python-list-excluding-certain-values-and">What is the best way to iterate over a python list, excluding certain values and printing out the result</a></span>
<span class="comment-copy">What's best depends on what you mean with "best" (runtime? memory? code niceness?) and the contents of the lists (sizes? sorted?) and the desired iteration order.</span>
