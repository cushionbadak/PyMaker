<div class="post-text" itemprop="text">
<p>I am trying to create a python script that will iterate through a folder structure, find folders named 'bravo', and modify the xml files contained within them.</p>
<p>In the xml files, I want to modify the 'location' attribute of a tag, called 'file'. Such as: </p>
<pre><code>&lt;file location="e:\one\two"/&gt;
</code></pre>
<p>I just need to change the drive letter of the file path from ‘e’  to ‘f’. So that it will read:</p>
<pre><code>&lt;file location="f:\one\two"/&gt;
</code></pre>
<p>However...</p>
<p>The name of these xml files are unique, so I cannot search for the exact xml file name. Instead I am searching by the xml file type.</p>
<p>Also, there are other xml files in my folder structure, <em>without the ‘file’ tag reference</em>, that I wish to ignore. </p>
<p>The only constant is that the xml files I want to modify are all stored in folders named, ‘bravo’. </p>
<p>I also wish to create a log file that lists all the xml files and their filepaths which have successfully been updated (and preferably the ones that failed).</p>
<p>Using answers to similar questions on this site, I have cobbled together the following script.</p>
<p>In its current state, the script trys to modify every xml files it finds. I have not been able to successfully add code that only searches folders called, ‘bravo'.</p>
<p>When the script modifies an xml file, not in a 'bravo' folder, it errors because these files do not contain a 'file' tag.</p>
<p>Please could someone help me to correct my script (or create a new one).</p>
<p>Here is an example of the folder structure...</p>
<p><a href="https://i.stack.imgur.com/Rot7i.jpg" rel="nofollow noreferrer">My folder structure</a></p>
<p>And my script so far...</p>
<pre><code>from xml.dom import minidom
   import os

   # enter the directory where to start search for xml files...

   for root, dirs, files in os.walk("c:/temp"):
       for file in files:
           #search for xml files...
           if file.endswith(".xml"):
               xml_file = file

               xmldoc = minidom.parse(os.path.join(root, xml_file))

               # in the xml file look for tag called "file"...
               file_location = xmldoc.getElementsByTagName("file")
               # i don't understand the next line of code, but it's needed
               file_location = file_location[0]

               # 'location_string' is a variable for the 'location' path of the file tag in the xml document
               location_string = (file_location.attributes["location"].value)

               # the new drive letter is added to the location_string to create 'new_location'
               new_location = "f" + location_string[1:]

               # replace the 'location' value of the file tag with the new location...
               file_location.attributes["location"].value = new_location

               # write the change to the original file
               with open((os.path.join(root, xml_file)),'w') as f:
               f.write(xmldoc.toxml())
               print "%s has been updated!" % (os.path.join(root, xml_file))
               # add updated file name to log...
               log_file = open("filepath_update_log.txt", "a")
               log_file.write("%s\n" % (os.path.join(root, xml_file)))
               log_file.close
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Test if the directory name fits, before your second loop. You'd have to get the last directory in the path first. As in: <a href="https://stackoverflow.com/questions/3925096/how-to-get-only-the-last-part-of-a-path-in-python">How to get only the last part of a path in Python?</a></p>
<pre><code>if os.path.basename(os.path.normpath(root)) == "bravo":
</code></pre></li>
<li><p>You could use the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.html</a> module for logging.</p></li>
<li><p>If you only want to replace a single letter, then maybe you can directly replace it instead of parsing xml. As suggested in: <a href="https://stackoverflow.com/a/17548459/7062162">https://stackoverflow.com/a/17548459/7062162</a></p>
<pre><code>def inplace_change(filename, old_string, new_string):
    # Safely read the input filename using 'with'
    with open(filename) as f:
        s = f.read()
        if old_string not in s:
            print('"{old_string}" not found in  {filename}.'.format(**locals()))
            return

    # Safely write the changed content, if found in the file
    with open(filename, 'w') as f:
        print('Changing "{old_string}" to "{new_string}" in {filename}'.format(**locals()))
        s = s.replace(old_string, new_string)
        f.write(s)
</code></pre></li>
</ol>
</div>
<span class="comment-copy">Thanks heaps...Your point 1 worked a treat and I'll read up on the logging module.</span>
