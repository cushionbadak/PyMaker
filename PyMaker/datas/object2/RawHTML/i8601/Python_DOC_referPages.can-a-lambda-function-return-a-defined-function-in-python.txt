<div class="post-text" itemprop="text">
<p>I want to return a comparison function from a lambda function and use it depending on the type of the input. Is there a way to do it?</p>
<pre><code>def p12(p):
    f = lambda p: compare_nr if type(p) == int else compare_str
    return f
if __name__ == '__main__':
    cmp1 = p12(0)
    cmp1(2,3)
    cmp2 = p12('')
    cmp2('Mississippi','fall')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a way to do it (in Python 3) without using a <code>lambda</code>: <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledispatch</code></a>. With this, you can create a <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer">single-dispatch generic function</a>:</p>
<blockquote>
<p>A form of generic function dispatch where the implementation is chosen
  based on the <strong>type</strong> of a single argument.</p>
</blockquote>
<p>[<em>Emphasis mine</em>]</p>
<p>It adds overloaded implementations to the function which are called depending on the <strong><code>type</code></strong> of the first argument, and fortunately, your <code>p12</code> function takes only one argument.</p>
<pre><code>from functools import singledispatch

@singledispatch
def p12(p):
     ...

@p12.register(int)
def _(p):
     '''compare integers'''
     ...

@p12.register(str)
def _(p):
     '''compare strings'''
     ...
</code></pre>
<hr/>
<pre><code>p12(0) # calls integer dispatch
p12('') # calls string dispatch
</code></pre>
<p>And you can still add more candidate functions for other Python types to overload <code>p12</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem encountered was that I returned the actual <strong>lambda</strong> function instead of the <strong>defined</strong> one.</p>
<pre><code>def p12(p):
    f = lambda p: compare_nr if type(p) == int else compare_str

    #here was the problem
    #return f
    return f(p)
if __name__ == '__main__':
    cmp1 = p12(0)
    cmp1(2,3)
    cmp2 = p12('')
    cmp2('Mississippi','fall')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could alternatively replace lambda with a higher order function and do the same.</p>
<pre><code>def p12(p):
    if type(p) == int :
        return compare_nr
    else:
        return compare_str

if __name__ == '__main__':
    cmp1 = p12(0)
    cmp1(2,3)
    cmp2 = p12('')
    cmp2('Mississippi','fall')
</code></pre>
</div>
<span class="comment-copy">Yeah sure, what isn't working? As an aside a <code>lambda</code> shouldn't be used if you are going to name it anyway... it defeats the entire <i>purpose</i> of an <b>anonymous function</b>.</span>
<span class="comment-copy">yeah just remove <code>lambda</code>.</span>
<span class="comment-copy">What do you mean you aren't allowed???</span>
<span class="comment-copy">Asking someone to complete the challenge for you defeats the entire purpose.</span>
<span class="comment-copy">If you're a novice, your first resource should be books and tutorials, not posting a new question.</span>
