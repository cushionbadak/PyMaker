<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/204017/how-do-i-execute-a-program-from-python-os-system-fails-due-to-spaces-in-path">How do I execute a program from Python? os.system fails due to spaces in path</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>Now Consider the following idea 
I'm declaring a <code>if/elif</code> type to run the program
Such as :</p>
<pre><code>number=int(input("Enter a number :"))

If number ==0
Run program.py

Elif number ==1
Run Program2.py

Else number ==2
Run Program3.py
</code></pre>
<p>Now clearly the command run <code>program.py</code> doesn't work so what should I do to make it execute <code>program.py</code> incase it is selected and close the main program where we are choosing the number?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways to run external code. There is <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> and <code>os.system()</code> to run any other program on the disc, then there is <code>exec</code> to run a code you have as a string or code object, then there is <code>eval</code> that is kinda similar to <code>exec</code> but accepts only a string and allows to supply globals and locals. Those are all builtins.</p>
<p>But you probably don't really want to run external scripts as scripts. It creates all sorts of problems with correctly passing <code>sys.argv</code> to them, and making sure they get correct stdin/stdout and everything. Nine times out of ten you're better off creating a series of functions (perhaps in other files), importing them and calling those.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should consider to learn about subprocesses: <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html</a></p>
<p>Popen option is one of the most useful ones for stuff like that.</p>
<pre><code>number=int(input("Enter a number :"))
If number == 0:
  subprocess.Popen([sys.argv[0], param]) 
Elif number ==1:
  subprocess.Popen([program2.py, param]) 
Else number ==2:
  subprocess.Popen([program3.py, param]) 
</code></pre>
<p>Note: Number 0 would open the same file you are using to call the new processes, just in case you ever need to "clone" your own program.</p>
<p><strong>Edit:</strong> Linux and windows will require you to do this differently, as:</p>
<pre><code>if platform.system() == "Linux":
  subprocess.Popen([sys.argv[0], param])
else:
  subprocess.Popen(["python", sys.argv[0], param])
</code></pre>
</div>
<span class="comment-copy">"Nine times out of ten you're better off creating a series of functions (perhaps in other files), importing them and running those." Agreed! Although, more "running" should be "calling" to be more accurate.</span>
<span class="comment-copy">Good point! Edited the answer.</span>
