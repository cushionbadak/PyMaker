<div class="post-text" itemprop="text">
<p>I have a directory and file structure like this:</p>
<pre><code>vunit_multi/
    alfa/
        run.py
        ...
    bravo/
        run.py
        ...
</code></pre>
<p>The VUnit <code>run.py</code> can run separately.</p>
<p>Is there any nice way to combine these multiple separate VUnit runs into a single run with a combined status report?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's say your alfa and bravo run scripts looks something like this</p>
<pre><code>from os.path import join, dirname
from vunit import VUnit

prj = VUnit.from_argv()

root = dirname(__file__)
lib = prj.add_library("alfa_lib")
lib.add_source_files(join(root, "*.vhd"))

prj.main()
</code></pre>
<p>Now arrange your script to this</p>
<pre><code>from os.path import join, dirname
from vunit import VUnit

def create_test_suite(prj):
    root = dirname(__file__)
    lib = prj.add_library("alfa_lib")
    lib.add_source_files(join(root, "*.vhd"))

if __name__ == '__main__':
    prj = VUnit.from_argv()
    create_test_suite(prj)
    prj.main()
</code></pre>
<p>The if statement at the bottom means that the last three lines are executed if the file is called as a script (so you can still use it to test alfa) but not if the file is imported as a module into another script.</p>
<p>Now put a new run script like this in the top-level directory (<code>vunit_multi</code>)</p>
<pre><code>from os.path import join, dirname
from vunit import VUnit
from glob import glob
import imp

def create_test_suites(prj):
    root = dirname(__file__)
    run_scripts = glob(join(root, "*", "run.py"))

    for run_script in run_scripts:
        file_handle, path_name, description = imp.find_module("run", [dirname(run_script)])
        run = imp.load_module("run", file_handle, path_name, description)
        run.create_test_suite(prj)
        file_handle.close()

prj = VUnit.from_argv()
create_test_suites(prj)
prj.main()
</code></pre>
<p><code>create_test_suites</code> will find all run scripts and then iterate over those scripts. Each script file will be imported as a module to get access to the <code>create_test_suite</code> function. The function is called with the <code>prj</code> created in this top-level script to add the libraries and files specified for the module.</p>
<p>Now if you run the top-level script it will see all module testbenches.</p>
<p>Note: There are newer modules than <code>imp</code> that you can use but <code>imp</code> also works in older Python versions.</p>
</div>
<span class="comment-copy">This is probably better asked on VUnit's Gitter channel, which is linked from their site on Github. It's a very good support channel.</span>
<span class="comment-copy">@BrianDrummond: Thanks, I will take a look at that.</span>
<span class="comment-copy">Please report your solution as a self answers if the VUnit team could help you out.</span>
<span class="comment-copy">@Paebbels: Will do that when I get to dig further into this; for now I made a quick work around with an additional Python script calling VUnit for each test bench.</span>
<span class="comment-copy">To expand on the note about <code>imp</code> at the bottom of your answer, the preferred module to use for Python 3.4+ is <code>importlib</code> <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="nofollow noreferrer">docs.python.org/3/library/importlib.html#module-importlib</a></span>
