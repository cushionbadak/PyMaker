<div class="post-text" itemprop="text">
<p>Can you help me shorten this python code involving list comprehensions? In my current code, the variable <code>e_col</code> is not utilized. What I don't know yet is how can I utilize this <code>e_col</code> variable. Here's the code:</p>
<pre><code>e_rows = (10,34)
e_col = (4,6,8,10,13,15,17,19)
inst = 'A'

test_list = [inst+'_r'+str(e_rows[0])+'c'+str(i) for i in range(4,12,2)]
test_list.extend([inst+'_r'+str(e_rows[0])+'c'+str(i) for i in range(13,21,2)])
test_list.extend([inst+'_r'+str(e_rows[1])+'c'+str(i) for i in range(4,12,2)])
test_list.extend([inst+'_r'+str(e_rows[1])+'c'+str(i) for i in range(13,21,2)])

print(test_list)
</code></pre>
<p>When I ran this code, it returns:</p>
<pre><code>['A_r10c4', 'A_r10c6', 'A_r10c8', 'A_r10c10', 'A_r10c13', 'A_r10c15', 'A_r10c17', 'A_r10c19', 'A_r34c4', 'A_r34c6', 'A_r34c8', 'A_r34c10', 'A_r34c13', 'A_r34c15', 'A_r34c17', 'A_r34c19']
</code></pre>
<p>I also looked into <code>itertools.product</code> but I can't understand how it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>list comprehension can do "product" with nested loops, pure Python, no libs</p>
<pre><code>test_list = [inst+'_r'+str(j)+'c'+str(i) for j in e_rows for i in e_col]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like the basic structure of your elements is:</p>
<pre><code>'A_r{}c{}'  # {} are the placeholders for str.format
</code></pre>
<p>Then you just need the row and column numbers, for which <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> certainly seems like a good bet:</p>
<pre><code>from itertools import product

test_list = ['A_r{}c{}'.format(row, col) for row, col in product(e_rows, e_col)]
</code></pre>
<p>Which gives the same output:</p>
<pre><code>&gt;&gt;&gt; test_list
['A_r10c4', 'A_r10c6', 'A_r10c8', 'A_r10c10', 'A_r10c13', 'A_r10c15', 'A_r10c17', 'A_r10c19', 'A_r34c4', 'A_r34c6', 'A_r34c8', 'A_r34c10', 'A_r34c13', 'A_r34c15', 'A_r34c17', 'A_r34c19']
</code></pre>
<p>It's not clear why you used two <code>range</code>s rather than just <code>e_col</code>.</p>
</div>
<span class="comment-copy">Could you describe a bit of what's actually going on here? What's the purpose of this?</span>
<span class="comment-copy">I got my intended results list, like I have shown in the above description. I want to shorten the code and to utilize the <code>e_col</code> tuple</span>
<span class="comment-copy">Thanks. This one of yours is very neat in the code.</span>
<span class="comment-copy">Thanks for your answer and for the one liner code. However, in real application, <code>A</code> in the resulting list is also a variable (i.e <code>inst</code>). How can I modify your answer to take that into consideration?</span>
<span class="comment-copy">@Meeyaw that's a pretty simple tweak, I'm sure you can manage that without further help.</span>
<span class="comment-copy">Ok. Thanks by the way. And yes, i know how to tweak that. Thanks again.</span>
