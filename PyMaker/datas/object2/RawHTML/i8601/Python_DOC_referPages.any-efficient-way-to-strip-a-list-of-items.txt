<div class="post-text" itemprop="text">
<p>By "strip" I don't mean strip for each item, I mean remove items, for instance, </p>
<pre><code>a = [None, "a", "b", "c", None, None, None]
b = ["4", "4", "a", "b", "c", "4", "4"]
c = ["4", "4", "a", "4", "b", "c", "4", "4"]
</code></pre>
<p>what I want to keep is</p>
<pre><code>["a", "b", "c"] # for the first two
["a", "4", "b", "c"] # for the last one
</code></pre>
<p>by such a method or function, </p>
<pre><code>a.strip(None)  # or strip(a, None)   
b.strip("4")  # or strip(b, "4")
</code></pre>
<p>I think I can do it using a for loop with a flag to detect the two ends, but I thought it may be not pythonic. </p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no built-in functionality for this. But there are about a million different ways to handle it. I would suggest using <a href="https://docs.python.org/3.6/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer">itertools.dropwhile</a> on the original list, reverse the result, and do it again:</p>
<pre><code># import the dropwhile function from the itertools module
from itertools import dropwhile

# create a function for this operation
def striplist(l, rem):

        # first, iterate over the list forwards, removing leading occurrences
        # dropwhile returns an iterator, so convert the result to a list
        l = list(dropwhile(lambda x: x == rem, l))
        # then reverse it and do it again to strip the trailing occurrences
        l = list(dropwhile(lambda x: x == rem, l[::-1]))

        return l[::-1] # return the result back in the original order

a = [None, "a", "b", "c", None, None, None]
b = ["4", "4", "a", "b", "c", "4", "4"]
c = ["4", "4", "a", "4", "b", "c", "4", "4"]

print(striplist(a, None))
print(striplist(b, "4"))
print(striplist(c, "4"))
</code></pre>
<p>The result:</p>
<blockquote>
<p>['a', 'b', 'c']<br/>
  ['a', 'b', 'c']<br/>
  ['a', '4', 'b', 'c']  </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension would be more fast and convenient way
Since its one line there is no need to have separate function</p>
<pre><code>a =  [elem for elem in a if elem != None]
b =  [elem for elem in b if elem != '4']
</code></pre>
<p>Though if you insist on a function you could simply wrap this in function</p>
<pre><code>def strip(l, item):
  return [i for i in l if i != item]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>itertools.dropwhile</code></a> to generate a new list which has the items at beginning removed. Then you could just loop while last item on the list is one that you want to remove and delete it:</p>
<pre><code>from itertools import dropwhile

def lstrip(l, item=None):
    l = list(dropwhile(lambda x: x == item, l))
    while l and l[-1] == item:
        del l[-1]

    return l

a = [None, "a", "b", "c", None, None, None]
b = ["4", "4", "a", "b", "c", "4", "4"]
c = ["4", "4", "a", "4", "b", "c", "4", "4"]

print(lstrip(a))
print(lstrip(b, '4'))
print(lstrip(c, '4'))
</code></pre>
<p>Output:</p>
<pre><code>['a', 'b', 'c']
['a', 'b', 'c']
['a', '4', 'b', 'c']
</code></pre>
<p>Above will run in <strong>O(n)</strong> time. If you don't care about the performance you could just replace <code>dropwhile</code> with another while loop that will delete items from the beginning.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code uses the <code>pop()</code> method of lists to remove anything that matches <code>item</code> from the beginning and end of the list.</p>
<pre><code>a = [None, "a", "b", "c", None, None, None]
b1 = ["4", "4", "a", "b", "c", "4", "4"]
b2 = ["4", "4", "a", "4", "b", "c", "4", "4"]

def strip(l, item=None):
    while l[0] == item:
        l.pop(0)
    while l[-1] == item:
        l.pop()
    return l

print(strip(a))
print(strip(b1,'4'))
print(strip(b2,'4'))
</code></pre>
<p>running it produces the requested output:</p>
<pre><code>['a', 'b', 'c']
['a', 'b', 'c']
['a', '4', 'b', 'c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you want the behavior of the strip function but for lists, I'd recommend the following solution:</p>
<pre><code>from itertools import dropwhile, takewhile

def strip(item, lst):
  tmp = list(dropwhile(lambda el: el == item, lst))
  tmp =  list(dropwhile(lambda el: el == item, tmp[::-1]))
  return tmp
</code></pre>
<p>This works by first stripping every occurrence of <code>item</code> from the <em>left</em> side of <code>lst</code>. We then flip the list around and, by doing so, strip every occurrence of <code>item</code> from the <em>right</em> side of the list. We finally flip the list back around again to its original ordering and return the list. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to do something  like this:</p>
<pre><code>list=['a',4,4,4]
def strip(list,no):
    while (1):
        try:
            del list[list.index(no)]
        except:
            break
    return list
print strip(list,4)
</code></pre>
</div>
<span class="comment-copy">Is it supposed to operate like <code>str.strip</code>, where it only removes from the ends, or should it remove internal values? That is, what does stripping <code>None</code> from <code>[None, 1, None, 2, None]</code> produce?</span>
<span class="comment-copy">Yeah, I have updated the question. Thanks for figuring it out.</span>
<span class="comment-copy">@Lerner I'm still not exactly sure what you want. Do you want to have the behavior of <code>str.strip()</code>? Or do you want to remove all instances of your value from the list?</span>
<span class="comment-copy">It's just like the strip method of str but for the list items.</span>
<span class="comment-copy">Firstly, this will delete all instances of the given item, not just the ones at the ends. Secondly, it's bad practice to mask a built-in like <code>list</code>. Thirdly, finding an item's index and then using <code>del</code> means you should be using the list's <code>remove</code> method instead.</span>
