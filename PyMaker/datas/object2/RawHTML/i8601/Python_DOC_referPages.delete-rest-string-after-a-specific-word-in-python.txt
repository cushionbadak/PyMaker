<div class="post-text" itemprop="text">
<p>I want to delete  words in the string if <code>\x</code> comes in that word. I am trying this</p>
<pre><code>text = "Joe is \xd8\xae\xd8\xa7\ a boy."
sep = "\x"
rest = text.split(sep, 1)[0]
print(rest) 
</code></pre>
<p>But it gives;</p>
<blockquote>
<p>SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-1: truncated \xXX escape</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Update: You clarified that you're really trying to remove non-printable characters from a string.</p>
<pre><code>import re

text = "Joe is \xd8\xae\xd8\xa7\ a boy."
#                              ^
#            stray backslash --|
sep = r'[^\x20-\x7e]' # Any non-printable character
rest = re.sub(sep, '', text)
# rest = 'Joe is \\ a boy.'
print(rest)
# Joe is \ a boy.
</code></pre>
<p>The backslash is there because it's in your input.</p>
<hr/>
<p>Python is trying to interpret the <code>\x</code> in the string below as a command to insert a character using a hexadecimal value.</p>
<pre><code>    sep = "\x"
         ^
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-1: truncated \xXX escape
</code></pre>
<p>To fix it, either escape the backslash like this:</p>
<pre><code>sep = "\\x"
</code></pre>
<p>Or better, use a raw string like this:</p>
<pre><code>sep = r"\x"
</code></pre>
<p>which tells Python not to expand the <code>\x</code> inside the string.</p>
<hr/>
<p>If you're trying to split on non-printable characters...</p>
<pre><code>import re

text = "Joe is \xd8\xae\xd8\xa7\ a boy."
# Not(^) a printable ascii character (0x20 - 0x7e)
sep = r'[^\x20-\x7e]'
first_part, rest = re.split(sep, text, maxsplit=1)
print(first_part)
</code></pre>
<hr/>
<p>If you're really looking for a literal <code>'\x'</code>...</p>
<pre><code># Raw (r'') strings will not evaluate your backslash in this
# string.
sep = r'\x'
first_part, rest = text.split(sep, maxsplit=1)
print(first_part)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"\x" is not consider as charater you should make a raw string of your test string to make "\x" consider as character :</p>
<pre><code>text = r"Joe is \xd8\xae\xd8\xa7\ a boy."
sep = r"\x"
rest = text.split(sep, 1)[0]
print(rest) 
</code></pre>
<p><strong>EDIT</strong> </p>
<p>to have <code>Joe is a boy</code> :</p>
<pre><code>text = r"Joe is \xd8\xae\xd8\xa7\ a boy."
sep = r"\x"
text=text.split(" ")
rest=[i for i in text if sep not in i]
output=" ".join(rest)
print(output) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>IF YOU WANT TO PRINT ONLY VALID ASCII CHARACTERS</strong></p>
<pre><code>text = "Joe is \xd8\xae\xd8\xa7\ a boy."
filtered = ''

for x in text:
    try:
        x.encode('ascii')
        filtered += x
    except:
        continue
print(filtered)
</code></pre>
<p>output</p>
<blockquote>
<p>Joe is \ a boy.</p>
</blockquote>
<p>If you want to filter only valid alphabetic characters you can use .isalpha(). If you want to allow numeric characters too, you can use .isalnum() instead of .isalpha(). <em>\x</em> is an escape character so you method will not work.</p>
<pre><code>text = "Joe is \xd8\xae\xd8\xa7\ a boy."
filtered = ''

for x in text:
    if x.isalpha() or x.isspace():
        filtered += x
print(filtered)
</code></pre>
<p>output </p>
<blockquote>
<p>Joe is  a boy</p>
</blockquote>
<p><strong>Update</strong></p>
<blockquote>
<p>Edit
  <strong>If the above two method does not work for you individually and if you only want <em>Joe is a boy</em> as output</strong></p>
</blockquote>
<pre><code>text = "Joe is \xd8\xae\xd8\xa7\ a boy."
filtered = ''

for x in text:
    try:
        x.encode('ascii')
        filtered += x
    except:
        continue
print(filtered)
new_filtered = ''

for x in filtered:
    if x.isalpha() or x.isspace():
        new_filtered += x
print(new_filtered)
</code></pre>
<p>Output</p>
<blockquote>
<p>Joe is a boy</p>
</blockquote>
<p>you can also use regular expression</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>r</code> with the string to treat it as a raw string. So the escape codes will be ignored.</p>
<pre><code>text = r"Joe is \xd8\xae\xd8\xa7\ a boy."
sep = r"\x"
list=text.split(" ")
t=" "
for i in list:
        temp=i.split(sep)
        if len(temp) &lt; 2:
                t+=' '+i
print t
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>Joe is a boy.
</code></pre>
</div>
<span class="comment-copy">the \x things are unicode escapes not literal \x's in your string. \x followed by nothing is an invalid escape so python complains.</span>
<span class="comment-copy"><code>\x</code> is not really in your string... XY problem? do you want to filter out "bizarre" chars from your output?</span>
<span class="comment-copy">one workaround is to use raw strings... <code>text = r"Joe is \xd8\xae\xd8\xa7\ a boy."</code> and <code>sep = r"\x"</code> see <a href="https://docs.python.org/3/reference/lexical_analysis.html#strings" rel="nofollow noreferrer">docs.python.org/3/reference/lexical_analysis.html#strings</a> for a table on escape sequences...</span>
<span class="comment-copy">Please update your question for what you really want/mean. Your comments about expected output of <code>Joe is a boy</code> do not match your question. Also, do you want the <code>.</code> at the end of the sentence? and how about the extra backslash all by itself before " a boy."?</span>
<span class="comment-copy">What if I need <code>Joe is a boy</code> as a output ?</span>
<span class="comment-copy">the output is wrong. On my IDE it is printing as <code>Joe is ØØ a boy</code> but i need <code>Joe is a boy</code></span>
<span class="comment-copy">use the updated program i gave, where checking for ascii char is done</span>
<span class="comment-copy">your program is printing <code>Joe is ØØ a boy</code>. which is wrong.</span>
<span class="comment-copy">which one of the above two methods you tried? first one or second one?</span>
<span class="comment-copy">First program is printing <code>Joe is \ a boy.</code> and second program <code>Joe is ØØ a boy</code>.</span>
<span class="comment-copy">I need <code>Joe is a boy</code> as a output</span>
<span class="comment-copy">@waqas try this now</span>
