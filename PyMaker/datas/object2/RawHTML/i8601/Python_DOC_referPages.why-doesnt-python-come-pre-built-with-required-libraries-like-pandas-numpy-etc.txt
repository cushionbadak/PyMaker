<div class="post-text" itemprop="text">
<p>What is the reason packages are distributed separately?</p>
<ul>
<li>Why do we have separate 'add-on' packages like pandas, numpy? </li>
<li>Since these modules seem so important, why are these not part of Python itself?</li>
</ul>
<p>Are the the "single distributions" of Python to come pre-loaded?</p>
<ul>
<li><p>If it's part of design to keep the 'core' separate from additional functionality, still in that case it should at least come 'pre-imported' as soon as you start Python.</p></li>
<li><p>Where can I find such distributions if they exist?</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Many of these tools, including core Python, are separately developed and distributed by different team, so it is up to aggregators to curate them and put them into a single distribution.  Here are some notable examples:</p>
<ul>
<li>The <a href="https://www.continuum.io/downloads" rel="nofollow noreferrer">Anaconda distribution</a> from Continuum Analytics</li>
<li>The <a href="https://www.enthought.com/products/canopy/" rel="nofollow noreferrer">Canopy distribution</a> from Enthought</li>
<li><a href="http://www.activestate.com/activepython" rel="nofollow noreferrer">ActivePython</a> from ActiveState</li>
<li><a href="https://python-xy.github.io/" rel="nofollow noreferrer">PythonXY</a> for scientific programming</li>
<li><a href="https://winpython.github.io/" rel="nofollow noreferrer">WinPython</a> for Windows</li>
<li><a href="https://wiki.python.org/moin/PyIMSL%20Studio" rel="nofollow noreferrer">PyIMSL Studio</a> from Rogue Wave Software</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can make the interactive interpreted launch with "pre-imported" modules, as well as with pre-run code, using <a href="https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file" rel="nofollow noreferrer">The Interactive start-up file</a>.<br/>
Alternatively, you can use <a href="https://docs.python.org/3/tutorial/appendix.html#the-customization-modules" rel="nofollow noreferrer">The Customization modules</a> to pre-run code on every invocation of python.<br/><br/>
Regarding whether pandas and numpy should be part of the standard library - it's a matter of opinion.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit like asking "Why doesn't every motor come with a car around it?"  </p>
<p>While a car without a motor is pretty useless, the inverse doesn't hold: Most motors aren't even used for cars. Of course one could try selling a complete car to people who want to have a generator, but they wouldn't buy it.<br/>
Also the people designing cars might not be the best to build a motor and vice versa. </p>
<p>Similarly with python. Most python distributions are not used with numpy, scipy or pandas. Distributing python with those packages would create a massive overhead. </p>
<p>However, there is of course a strong demand for prebuilt distributions which combine those modules with a respective python and make sure everything interacts smoothly. Some examples are Anaconda, Canopy, python(x,y), winpython, etc. So an end user who simply wants a car that runs, best chooses one of those, instead of installing everything from scratch. Other users who do want to always have the newest version of everything might choose to tinker them together themselves.  </p>
</div>
<div class="post-text" itemprop="text">
<p>PyPi currently has over 100,000 libraries available. I'm sure someone thinks each of these is important.</p>
<p>Why do you need or want to pre-load libraries, considering how easy a <code>pip install</code> is especially in a virtual environment?</p>
</div>
<span class="comment-copy">There are too many "important" libraries that should be prebuilt in that case. Beyond numerical computation etc... What you need is a special distribution of python, <i>e.g.</i> anaconda.</span>
<span class="comment-copy">Python has been around far longer than pandas and numpy . Whether to include them is simply a matter of judgement. However, if you'd rather deal with a more streamlined install, look into anaconda.  Anaconda installs python along with many other non standard libraries. It's intended to be a one stop shop for many of the scientific computing community.</span>
<span class="comment-copy">You don't want to blow things up or bloat the language too much by including gazillian Python packages into the core language. Btw, not all these packages are overseen by Guido, the BDFL. So, it's upto him &amp; Python core committee to decide. On a side note, as an engineer it's up to him/her to know how to patch things up.</span>
<span class="comment-copy">They're great libraries but they're also 800-pound gorillas. You can already achieve a lot with Python and its standard libraries. Keep in mind that Python is not only used on desktops but also on embedded, Raspberry Pi, TV receivers... Those small appliances don't need pandas or numpy.</span>
<span class="comment-copy">Python is used for a lot of things besides numerical work and data series.  Full stack web servers use packages like <code>Django</code> or <code>flask</code>.  Most of Python utilities in Linux distributions don't need these addons.  Look at the Python tag, and compare its statistics with the related ones.</span>
