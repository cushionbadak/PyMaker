<div class="post-text" itemprop="text">
<p>I have a dataset that looks like this:</p>
<pre><code>Male    Name=Tony;  
Female  Name=Alice.1; 
Female  Name=Alice.2;
Male    Name=Ben; 
Male    Name=Shankar; 
Male    Name=Bala; 
Female  Name=Nina; 
###
Female  Name=Alex.1; 
Female  Name=Alex.2;
Male    Name=James; 
Male    Name=Graham; 
Female  Name=Smith;  
###
Female  Name=Xing;
Female  Name=Flora;
Male    Name=Steve.1;
Male    Name=Steve.2; 
Female  Name=Zac;  
###
</code></pre>
<p>I want to the change the list so it looks like this:</p>
<pre><code>Male    Name=Class_1;
Female  Name=Class_1.1;
Female  Name=Class_1.2;
Male    Name=Class_1;
Male    Name=Class_1;
Male    Name=Class_1; 
Female  Name=Class_1;
###
Female  Name=Class_2.1; 
Female  Name=Class_2.2; 
Male    Name=Class_2; 
Male    Name=Class_2; 
Female  Name=Class_2;  
###
Female  Name=Class_3; 
Female  Name=Class_3; 
Male    Name=Class_3.1; 
Male    Name=Class_3.2; 
Female  Name=Class_3;
###
</code></pre>
<p>Each name has to be changed to the class they belong to. 
I noticed that in the dataset, each new class in the list is denoted by a ‘###’. 
So I can split the data set into blocks by ‘###’ and count the instances of ###. Then use regex to look for the names, and replace them by the count of ###. </p>
<p>My code looks like this: </p>
<pre><code>blocks = [b.strip() for b in open('/file', 'r').readlines()]
pattern = r'Name=(.*?)[;/]'
prefix = 'Class_'
triple_hash_count = 1

for line in blocks:
    match = re.findall(pattern, line)
    print match

for line in blocks:
    if line == '###':
        triple_hash_count += 1
        print line 
    else: 
        print(line.replace(match, prefix + str(triple_hash_count))) 
</code></pre>
<p>This doesn’t seem to do the job - no replacements are made. </p>
</div>
<div class="post-text" itemprop="text">
<p>When running the code you provided, I got the following traceback output:</p>
<pre><code>print(line.replace(match, prefix + str(triple_hash_count))) 
TypeError: Can't convert 'list' object to str implicitly
</code></pre>
<p>The error happens because <code>type(match)</code> evaluates to a list. When I inspect this list in PDB, it's an empty list. This is because <code>match</code> has gone out of scope by having two for-loops. So let's combine them as such:</p>
<pre><code>for line in blocks:
    match = re.findall(pattern, line)
    print(match)

    if line == '###':
        triple_hash_count += 1
        print(line) 
    else: 
        print(line.replace(match, prefix + str(triple_hash_count)))
</code></pre>
<p>Now you're getting content in <code>match</code>, but there's still a problem: the return type of <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a> is a list of strings. <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace(...)</code></a> expects a single string as its first argument.</p>
<p>You could cheat, and change the offending line to <code>print(line.replace(match[0], prefix + str(triple_hash_count)))</code> -- but that presumes that you're sure you're going to find a regular expression match on every line that isn't <code>###</code>. A more resilient way would be to check to see that you have the match before you try to call <code>str.replace()</code> on it.</p>
<p>The final code looks like this:</p>
<pre><code>for line in blocks:
    match = re.findall(pattern, line)
    print(match)

    if line == '###':
        triple_hash_count += 1
        print(line) 
    else:
        if match: 
            print(line.replace(match[0], prefix + str(triple_hash_count)))
        else:
            print(line)
</code></pre>
<hr/>
<p>Two more things:</p>
<ol>
<li>On line 11, you mistook the variable name. It's <code>triple_hash_count</code>, not <code>hash_count</code>. </li>
<li>This code won't actually change the text file provided as input on line 1. You need to write the result of <code>line.replace(match, prefix + str(triple_hash_count))</code> back to the file, not just print it.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The problem is rooted in the use of a second loop (as well as a mis-named variable).  This will work.</p>
<pre><code>import re

blocks = [b.strip() for b in open('/file', 'r').readlines()]
pattern = r'Name=([^\.\d;]*)'
prefix = 'Class_'
triple_hash_count = 1

for line in blocks:

    if line == '###':
        triple_hash_count += 1
        print line     
    else:
        match = re.findall(pattern, line)
        print line.replace(match[0], prefix + str(triple_hash_count)) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While you already have your answer, you can do it in just a couple of lines with regular expressions (it could even be a one-liner but this is not very readable):</p>
<pre><code>import re
hashrx = re.compile(r'^###$', re.MULTILINE)
namerx = re.compile(r'Name=\w+(\.\d+)?;')

new_string = '###'.join([namerx.sub(r"Name=Class_{}\1".format(idx + 1), part) 
                for idx,part in enumerate(hashrx.split(string))])
print(new_string)
</code></pre>
<h3>What it does:</h3>
<ol>
<li>First, it looks for <code>###</code> in a single line with the anchors <code>^</code> and <code>$</code> in <code>MULTILINE</code> mode.</li>
<li>Second, it looks for a possible number after the <code>Name</code>, capturing it into group 1 (but made optional as not all of your names have it).</li>
<li>Third, it splits your string by <code>###</code> and iterates over it with <code>enumerate()</code>, thus having a counter for the numbers to be inserted.</li>
<li>Lastly, it joins the resulting list by <code>###</code> again.</li>
</ol>
<h3>As a one-liner (though not advisable):</h3>
<pre><code>new_string = '###'.join(
                [re.sub(r'Name=\w+(\.\d+)?;', r"Name=Class_{}\1".format(idx + 1), part) 
                for idx, part in enumerate(re.split(r'^###$', string, flags=re.MULTILINE))])
</code></pre>
<h3>Demo</h3>
<p><strong><a href="http://ideone.com/sE4zlB" rel="nofollow noreferrer">A demo</a></strong> says more than thousands words.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/16720541/python-string-replace-regular-expression">Python string.replace regular expression</a></span>
<span class="comment-copy">If you're actually using curly quotes, that's not valid Python syntax. Are you programming in Word or something?</span>
<span class="comment-copy">what does this mean? Oh no sorry, I copied my code from a text file to here. Silly</span>
<span class="comment-copy">Hi will - the answers on the posts you suggested are not particularly helpful for me</span>
<span class="comment-copy">Close your file!</span>
<span class="comment-copy">This solution also replaces the '.1' and so on</span>
<span class="comment-copy">Your answer is correct, but OP's regex needed a tweak to address the lines with the trailing '.1', '.2', etc</span>
<span class="comment-copy">@PaulBack I noticed that you put that change in your post. But I'd recommend <code>pattern = r'Name=([^\.\d;]*)</code> so that it doesn't ingest the period between the name and the uniqueness counter.</span>
<span class="comment-copy">Nice catch. I made the change.</span>
<span class="comment-copy">the <code>\d</code> and <code>*</code> in the regex <code>[^\.\d;]*</code> are not required! This: <code>r'=(.*?)[\.;]'</code> does all it needs</span>
