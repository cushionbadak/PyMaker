<div class="post-text" itemprop="text">
<p>I have a list of letters, I want to see if these letters appear in a list of states. If they do appear, I want to know which letter appears and in which position it appears. I want to store it in a variable so I can then compare it to another string. Below is my example code:</p>
<pre><code>    letters = ['a','b','c','d','e']
    states = ['minnesota','new york','florida']
    found_states = [] 

    for letter in letters:
        for state in states:
            if letter in state:
            found_states.append(state)
            #Here instead of appending to a list
            #I want to find the position of each letter
            #without losing the letter itself
            found_letter = {'e':4,'a':8} #desired result for minnesota
            #i want to use found_letter variable to perform additional
            #if statements
    print(found_states)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>!</p>
<blockquote>
<p>List comprehensions provide a concise way to create lists. Common
  applications are to make new lists where each element is the result of
  some operations applied to each member of another sequence or
  iterable, or to create a subsequence of those elements that satisfy a
  certain condition.</p>
</blockquote>
<p>For every s in states, for every character, check if its present in your letters list. If found, then you can get the index and the character in a list without losing its order!</p>
<pre><code>&gt;&gt;&gt; [(s,[(index,c) for index,c in enumerate(s) if c in letters]) for s in states]
[('minnesota', [(4, 'e'), (8, 'a')]), ('new york', [(1, 'e')]), ('florida', [(5, 'd'), (6, 'a')])]
</code></pre>
<p>If you break down the list comprehension, </p>
<pre><code>&gt;&gt;&gt; [s for s in states] 
['minnesota', 'new york', 'florida']

&gt;&gt;&gt; [[c for index,c in enumerate(s)] for s in states] 
[['m', 'i', 'n', 'n', 'e', 's', 'o', 't', 'a'], ['n', 'e', 'w', ' ', 'y', 'o', 'r', 'k'], ['f', 'l', 'o', 'r', 'i', 'd', 'a']]

&gt;&gt;&gt; [[(index,c) for index,c in enumerate(s)] for s in states]
[[(0, 'm'), (1, 'i'), (2, 'n'), (3, 'n'), (4, 'e'), (5, 's'), (6, 'o'), (7, 't'), (8, 'a')], [(0, 'n'), (1, 'e'), (2, 'w'), (3, ' '), (4, 'y'), (5, 'o'), (6, 'r'), (7, 'k')], [(0, 'f'), (1, 'l'), (2, 'o'), (3, 'r'), (4, 'i'), (5, 'd'), (6, 'a')]]

&gt;&gt;&gt; [(s,[(index,c) for index,c in enumerate(s)]) for s in states]
[('minnesota', [(0, 'm'), (1, 'i'), (2, 'n'), (3, 'n'), (4, 'e'), (5, 's'), (6, 'o'), (7, 't'), (8, 'a')]), ('new york', [(0, 'n'), (1, 'e'), (2, 'w'), (3, ' '), (4, 'y'), (5, 'o'), (6, 'r'), (7, 'k')]), ('florida', [(0, 'f'), (1, 'l'), (2, 'o'), (3, 'r'), (4, 'i'), (5, 'd'), (6, 'a')])]
</code></pre>
<p>To make access of elements much easier, you can use dict comprehension!</p>
<pre><code>&gt;&gt;&gt;res =  {s:[(index,c) for index,c in enumerate(s) if c in letters] for s in states}
&gt;&gt;&gt; print res
{'minnesota': [(4, 'e'), (8, 'a')], 'new york':[(1, 'e')], 'florida':[(5, 'd'), (6, 'a')]}
</code></pre>
<p>So when you wan to access for one state say 'florida'</p>
<pre><code>&gt;&gt;&gt; print res['florida']
[(5, 'd'), (6, 'a')]
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this: </p>
<pre><code>found_letter = {}
i = 0
for letter in letters:
    i=i+1
    for state in states:
        if letter in state:
            found_states.append(state)
            if letter in found_letter:
                found_letter[letter].append(i)
            else:
                found_letter[letter] = []
                found_letter[letter].append(i)
print(found_states)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this to get a list of all indices of the letter</p>
<pre><code>state = 'ohio'
letter = 'o'
occurences = [i for i, c in enumerate(state) if c == letter]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a lot of approaches :)</p>
<pre><code>list_of_letters = ['a', 'b', 'c', 'd', 'e', 'n']
states = ['minnesota', 'new york', '

    def search_letters(letters):
        found_states = {}
        for letter in letters:
            for state in states:
                for i, char in enumerate(state):
                    if char in letter:
                        found_states.setdefault(state, []).append(letter + ":" + str(i + 1))
        return found_states
</code></pre>
<p>After you use:</p>
<pre><code>print search_letters(list_of_letters)
</code></pre>
<p>You will receive something like:</p>
<pre><code>{'new york': ['e:2', 'n:1'], 'florida': ['a:7', 'd:6'], 'minnesota': ['a:9', 'e:5', 'n:3', 'n:4']}
</code></pre>
<p>So you will receive something like you described in the description of this issue.
Of course you can sort the lists of a particular dictionary key, if you want.</p>
</div>
<span class="comment-copy">What if the letter appears twice, like <code>'a b a'</code>?</span>
<span class="comment-copy">then i would want a:1, b:2, a:3 etc.</span>
<span class="comment-copy">but you can associate only <b>one</b> value to a key, so a key cannot appear twice in a dictionary...</span>
<span class="comment-copy">what it didnt have to be a dictionary? for example the word 'amaze', could i get a variable x = 'aae' instead and deal with losing the position? My main goal is to get the letters in the names and not lose their order</span>
<span class="comment-copy">possibly a key with a list of indexes? So 'amaze' would look like [{'key':'a', 'index': {0,2} }, {'key':'m', 'index: {1} } ...] Then you have all your index for each unique char, and can even run a length on index if you want to know how many occurrences there are of that letter in the word</span>
<span class="comment-copy">Thanks, this is what I was looking for. Are these just list inside of list?</span>
<span class="comment-copy">I've added the edits. Hope it helps you to understand the code!</span>
<span class="comment-copy">How would I access the characters, for instance for minnesota. If I wanted to access the 'e' and the 'a', what kind of statement would I use?</span>
<span class="comment-copy">I've added the edits! Hope it helps!</span>
<span class="comment-copy">occurences = [i for i, c in enumerate(states) if c == letters] print(occurences) I get back an empty list</span>
<span class="comment-copy">It should work. I edited and inserted an example.</span>
<span class="comment-copy">your numbers are not correct. 0 starts indexes in most everything I know of</span>
<span class="comment-copy">But as I understood, author needs position of each letter in a particular word. Because python counts every iteratable variable from zero, I add 1 to each index of letter inside the word. To summing up, if I have a word: "gant" and I'm searching of the letter: "g", I would expect to receive 1 instead of 0. If the author prefer to receive python's indexes, just delete 1 from str(i + 1)) statement.</span>
<span class="comment-copy">yes and position starts at 0. so the first occurrence of e in 'New York' is 1. That is the index= position. Ex. try this code <code>print('New York'[2])</code> you will get w not e. Also look at his found letter examples and the selected answer examples; you see the same as I am saying, not what you are.</span>
<span class="comment-copy">Edward :) Look at my code again, I added 1 to index to receive proper values. I pasted output from the trace, so this is proper code.</span>
<span class="comment-copy">why would you have someone add +1 to index? Especially when they will be using it later on "i want to use found_letter variable to perform additional if statements", because then you just have to then delete 1.</span>
