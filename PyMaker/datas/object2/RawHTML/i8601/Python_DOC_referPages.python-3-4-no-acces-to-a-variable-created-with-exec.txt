<div class="post-text" itemprop="text">
<p>With Python 3.4 and in a function, this piece of code appears:</p>
<pre><code>ch0 = 'dico[\''+ ans +'\']' # dico is a dictionary and ans is a key of this dictionary

print('test')
print(list(locals()))

exec('keys2 = list(' + ch0 + ')', locals())

print(list(locals()))
print(locals()['keys2'])

print('keys2:', keys2)
</code></pre>
<p>This is the output:</p>
<pre><code>test
['dico', 'save', 'keys0', 'LOG_FILENAME', 'ch0', 'flag', 'completer', 'k', 'ans', 'keys1']
['dico', 'save', 'keys0', 'LOG_FILENAME', 'ch0', 'flag', 'completer', 'k', 'ans', 'keys1', '__builtins__', 'keys2']
['General informations', 'Experiments parameters', 'Calculated parameters']
Traceback (most recent call last):
  File "/data_1/dataGestion.py", line 189, in consult_db
    print('keys2:', keys2)
NameError: name 'keys2' is not defined
</code></pre>
<p>As expected we observe the creation of the keys2 variable in the local scope, and this variable contains well the expected values (['General informations', 'Experiments parameters', 'Calculated parameters']) as seems to indicate the dictionary returned by locals(). But it is not possible to access  this keys2 variable (name 'keys2' is not defined !!!!). Why ?</p>
<hr/>
<p>EDIT 1: We seen that Keys2 is in the local scope because in the code of the above question:</p>
<pre><code>print(list(locals()))
</code></pre>
<p>and</p>
<pre><code>print(locals()['keys2'])
</code></pre>
<p>return:</p>
<pre><code>['dico', 'keys0', 'save', 'k', 'ans', 'keys1', '__builtins__', 'flag', 'LOG_FILENAME', 'keys2', 'ch0', 'completer']
['General informations', 'Experiments parameters', 'Calculated parameters']
</code></pre>
<p>BUT !!! why if I change the above code with:</p>
<pre><code>ch0 = 'dico[\''+ ans +'\']' # dico is a dictionary and ans is a key of this dictionary
print('test')

exec('keys2 = list(' + ch0 + ')', locals())

keys2 = locals()['keys2']

print('keys2:', keys2)
</code></pre>
<p>The keys2 variable is not created, as we can see with again the NameError exception raised:</p>
<pre><code>Traceback (most recent call last):
  File "/data_1/IRM/amigo/src/IRMAGE_python_modules/IRMAGE_dataGestion.py", line 191, in consult_db
    print('keys2:', keys2)
NameError: name 'keys2' is not defined
</code></pre>
<hr/>
<p>EDIT 2: By continuing to play with exec() and locals() ... Considers the follow piece of code:</p>
<pre><code>ch0 = 'dico[\''+ ans +'\']' # dico is a dictionary and ans is a key of this dictionary
print('test')

namespace = locals()

print(list(namespace))
print(list(locals()))
print(list(globals()))

exec('keys2 = list(' + ch0 + ')', namespace)

keys2 = namespace['keys2']
print()

print(list(namespace))
print(list(locals()))
print(list(globals()))

print('keys2:', keys2)
</code></pre>
<p>The output is:</p>
<pre><code>test
['ch0', 'ans', 'completer', 'save', 'keys0', 'keys1', 'k', 'flag', 'dico', 'LOG_FILENAME']
['ch0', 'ans', 'completer', 'save', 'keys0', 'keys1', 'k', 'flag', 'dico', 'LOG_FILENAME', 'namespace']
['__spec__', 'nbLigne', 'remove', 'listdir', 'getSampleStyleSheet', 'Paragraph', '__builtins__', 'system', 'upvivification', '__package__', 'exit', '__doc__', 'AutoVivification', 'recupParameter', 'verSofts', 'logging', 'revivification', 'renameComment', 'unvivification', 'creatExpParameter', 'rlcompleter', 'consult_db', 'makedirs', 'datetime', 'isdir', 'recupCover', 'MyCompleter', 'verifFichier', 'dico2txt', 'para2dic', 'readlineComp', '__name__', '__file__', 'anonym', '__cached__', '__loader__']

['ch0', 'ans', 'completer', 'save', 'keys0', 'keys1', 'k', 'flag', 'dico', 'LOG_FILENAME', 'namespace', '__builtins__', 'keys2']
['ch0', 'ans', 'completer', 'save', 'keys0', 'keys1', 'k', 'flag', 'dico', 'LOG_FILENAME', 'namespace', '__builtins__', 'keys2']
['__spec__', 'nbLigne', 'remove', 'listdir', 'getSampleStyleSheet', 'Paragraph', '__builtins__', 'system', 'upvivification', '__package__', 'exit', '__doc__', 'AutoVivification', 'recupParameter', 'verSofts', 'logging', 'revivification', 'renameComment', 'unvivification', 'creatExpParameter', 'rlcompleter', 'consult_db', 'makedirs', 'datetime', 'isdir', 'recupCover', 'MyCompleter', 'verifFichier', 'dico2txt', 'para2dic', 'readlineComp', '__name__', '__file__', 'anonym', '__cached__', '__loader__']
keys2: ['Calculated parameters', 'General informations', 'Experiments parameters']
</code></pre>
<p>With this result I understand that the dictionary (namespace) passed as argument with exec() is used to find the variables in the scope of the function exec(), but also this dictionary (namespace) contains all the variables created after the execution of exec(). This is understood, but I do not yet undersatnd why in the EDIT 1, keys2 = locals()['keys2'] is not working  while  keys2 = namespace['keys2'] is working in this EDIT 2 ?</p>
<hr/>
<p>EDIT 3: By continuing to play with exec() and locals() ... Considers the follow piece of code:</p>
<pre><code>ch0 = 'dico[\''+ ans +'\']' # dico is a dictionary and ans is a key of this dictionary
print('test')

print(list(locals()))
print(list(globals()))

exec("global keys2; keys2 = list(" + ch0 + "); print('\\n** keys2 inside exec function: {}'.format(keys2))", locals())

print()

print(list(locals()))
print(list(globals()))

print('keys2:', keys2)
</code></pre>
<p>The output is:</p>
<pre><code>test
['ch0', 'LOG_FILENAME', 'k', 'flag', 'save', 'ans', 'keys0', 'dico', 'completer', 'keys1']
['recupCover', 'MyCompleter', '__name__', 'para2dic', 'readlineComp', 'upvivification', 'listdir', 'verifFichier', 'recupParameter', 'system', 'remove', '__doc__', 'nbLigne', 'renameComment', '__spec__', '__file__', 'anonym', 'creatExpParameter', '__package__', 'isdir', 'revivification', 'exit', '__loader__', 'makedirs', 'datetime', 'consult_db', 'Paragraph', '__cached__', '__builtins__', 'AutoVivification', 'getSampleStyleSheet', 'unvivification', 'rlcompleter', 'logging', 'verSofts', 'dico2txt']

** keys2 inside exec function: ['Experiments parameters', 'Calculated parameters', 'General informations']

['ch0', 'LOG_FILENAME', 'k', 'flag', 'save', 'ans', 'keys0', 'dico', 'completer', 'keys1', '__builtins__', 'keys2']
['recupCover', 'MyCompleter', '__name__', 'para2dic', 'readlineComp', 'upvivification', 'listdir', 'verifFichier', 'recupParameter', 'system', 'remove', '__doc__', 'nbLigne', 'renameComment', '__spec__', '__file__', 'anonym', 'creatExpParameter', '__package__', 'isdir', 'revivification', 'exit', '__loader__', 'makedirs', 'datetime', 'consult_db', 'Paragraph', '__cached__', '__builtins__', 'AutoVivification', 'getSampleStyleSheet', 'unvivification', 'rlcompleter', 'logging', 'verSofts', 'dico2txt']
Traceback (most recent call last):
  File "/data_1/IRM/amigo/src/IRMAGE_python_modules/IRMAGE_dataGestion.py", line 206, in consult_db
    print('keys2:', keys2)
NameError: name 'keys2' is not defined
</code></pre>
<p>So ... even if we define keys2 as a global variable in the exec() function, it is not in the global scope as returns the globals() after the exec() function ... I confess that some things miss me ...</p>
</div>
<div class="post-text" itemprop="text">
<p>As documented in the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code> documentation for Python 3</a>:</p>
<blockquote>
<p>Note: The default locals act as described for function locals() below: modifications to the default locals dictionary should not be attempted. Pass an explicit locals dictionary if you need to see effects of the code on locals after function exec() returns.</p>
</blockquote>
<p>You can't create new local variables with <code>exec</code> on Python 3. Local variable lookup completely ignores the attempt.</p>
</div>
<span class="comment-copy">There is a pretty clear warning in the <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">docs for <code>locals</code></a> that <code>The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</code> But you should almost certainly not even be using <code>exec</code> anyway. What are you trying to accomplish? This sounds like the XY problem.</span>
<span class="comment-copy">Your code wants to perform <code>key2 = list(dico[ans])</code> ? Why not just todo it? Also, you'd benefit from learning about the <code>format</code> method for strings.</span>
<span class="comment-copy">Rmk 1: Thanks for the xy problem concept that I did not know before !!! I think I need to use exec in my case because I need, in a big srcipt (that I can't reproduce here in totality !), to go in a dictionary of dictionaries and where I don't know before where I'am (number of [x], dico['toto']['titi'][['tata']['tete'], so 4 [x]) and what is the keys for each level (the value of x).</span>
<span class="comment-copy">Rmk 2: So my idea, that was working very well with Python 2.7 !!! (but I am trying to migrate to Python 3.4 and in this case exec is not a statement but a function !) is to define a growing string. In the example of my question ch0 is the first stage :  ch0 = 'dico[\''+ ans +'\']', then in the script this string is growing with ch0 = ch0 + '[\''+ ans +'\']' (where ans is each time a new stage).</span>
<span class="comment-copy">Rmk 3: And if we need to see for example all the keys at a level, with Python 2.7 I just need to do exec 'keys2 = ' + ch0 + '.keys()'. But in python 3.4 this is not possible and I try to work around with something like  exec('keys2 = list(' + ch0 + ')') ... But I discovered at this time that may be I have not well understood the local and global variable concept ...</span>
<span class="comment-copy">Well, you can create new <i>global</i> variables.</span>
<span class="comment-copy">As I said in my above comments, it is possible that I do not understood really the locals() and globals() ... and may be the interaction between them and the exec() ... Sometimes the depth is greater than what we think a priori !!! So thanks for all your comments and answer !!! I need now to digest all this ... and I will go back with a solution ... or a new silly question   :-))</span>
