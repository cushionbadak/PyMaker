<div class="post-text" itemprop="text">
<p>I have coded my custom Django middleware in the <a href="https://docs.djangoproject.com/en/1.10/topics/http/middleware/" rel="noreferrer">1.10 style</a>, similar to this:</p>
<pre><code>class MyMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response
        # some initialization stuff here

    def __call__(self, request):
        # Code executed before view functions are called. 
        # Purpose of this middeware is to add new attribute to request

        # In brief:
        request.new_attribute = some_function_returning_some_object()
        response = self.get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response
</code></pre>
<p>Note, that this middleware is being threaten as a separate Python module, not belonging to any particular application in my project, but living outside and being installed like any other package, via pip. It does not work itself, but only if installed in Django app.  </p>
<p>It works fine, however, I would like to test it. What I've made so far is something like this in <code>my_tests.py</code>:</p>
<pre><code>from my_middleware_module import MyMiddleware
# some @patches
def test_mymiddleware():
    request = Mock()
    assert hasattr(request, 'new_attribute') is False # passes obviously
    # CALL MIDDLEWARE ON REQUEST HERE
    assert hasattr(request, 'new_attribute') is True # I want it to pass
</code></pre>
<p>I don't know how to call middleware on <code>request</code> variable to modify it. I think it would be much easier if I used function-like middleware style, but what if I'm stuck with what I have and I am supposed ony to write tests, without modifying middleware?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are not calling neither the constructor of <code>MyMiddleware</code> neither invoking the <code>__call__</code> magic method by invoking the instance of a <code>MyMiddleware</code> object.</p>
<p>There are many ways to test the behaviour that you described, I can think of this one:</p>
<p>First, I slightly modified your example to be self contained:</p>
<pre><code>class MyMiddleware(object):
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        request.new_attribute = some_function_returning_some_object()
        import ipdb; ipdb.set_trace()
        response = self.get_response(request)
        return response

def some_function_returning_some_object():
    return 'whatever'
</code></pre>
<p>Next, I created the tests by actually creating the Middleware object and invoking the newly created object as it was a function (so <code>__call__</code> is run)</p>
<pre><code>from mock import patch, Mock
from middle import MyMiddleware
import unittest


class TestMiddleware(unittest.TestCase):

    @patch('middle.MyMiddleware')
    def test_init(self, my_middleware_mock):
        my_middleware = MyMiddleware('response')
        assert(my_middleware.get_response) == 'response'

    def test_mymiddleware(self):
        request = Mock()
        my_middleware = MyMiddleware(Mock())
        # CALL MIDDLEWARE ON REQUEST HERE
        my_middleware(request)
        assert request.new_attribute == 'whatever'
</code></pre>
<p>Here there are some useful links: </p>
<ul>
<li><p>Difference between __call__ and __init__ in another SO question: <a href="https://stackoverflow.com/questions/14103903/init-or-call">__init__ or __call__?</a></p></li>
<li><p>Where to patch from the python docs: <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#where-to-patch</a></p></li>
<li><p>pytest docs: <a href="http://docs.pytest.org/en/latest/contents.html" rel="nofollow noreferrer">http://docs.pytest.org/en/latest/contents.html</a></p></li>
<li><p>ipdb intro, useful for debugging: <a href="https://www.safaribooksonline.com/blog/2014/11/18/intro-python-debugger/" rel="nofollow noreferrer">https://www.safaribooksonline.com/blog/2014/11/18/intro-python-debugger/</a></p></li>
</ul>
</div>
