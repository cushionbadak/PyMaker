<div class="post-text" itemprop="text">
<p>here is my example</p>
<pre><code>class MyClass(Enum):
    x=[1,3,5]
    y=[2,5,7]
    w=[33,49]
</code></pre>
<p>I would like to write method that will give me a list of ALL lists from enum. For that example it should return </p>
<pre><code>[[1,3,5], [2,5,7], [33,49]]
</code></pre>
<p>I tried something like this:</p>
<pre><code>listWithValues= [ z.value for z in MyClass]
</code></pre>
<p>But as you can guess it didnt work. Thanks for any helpful advices.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the comments it sounds like you want a method on the class that will return a list of all the values.  Try this:</p>
<pre><code>    @classmethod
    def all_values(cls):
        return [m.value for m in cls]
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; MyClass.all_values()
[[1, 3, 5], [2, 5, 7], [33, 49]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a full example of what you want. This method will always return every list in the enumeration and ignore every other variable.</p>
<pre><code>import enum


class MyClass(enum.Enum):
    x = [1, 2, 3]
    y = [4, 5, 6]
    z = "I am not a list"
    w = ["But", "I", "Am"]

    @classmethod
    def get_lists(cls):
        """ Returns all the lists in the Enumeration"""
        new_list = []

        for potential_list in vars(cls).values():  # search for all of MyClass' attributes
            if (isinstance(potential_list, cls)  # filter out the garbage attributes
                    and isinstance(potential_list.value, list)  # only get the list attributes
                    and len(potential_list.value) != 0):  # only get the non-empty lists

                new_list.append(potential_list.value)

        return new_list


print(MyClass.get_lists())
</code></pre>
</div>
<span class="comment-copy">what does Enum look like?</span>
<span class="comment-copy">Seems to work for me...</span>
<span class="comment-copy">What's <b>wrong</b> with your output, from the provided list comprehension you put in your question?</span>
<span class="comment-copy">@Mateusz no, it isn't, because running <i>your exact code</i> is giving the output you say you want. So what output are you getting?</span>
<span class="comment-copy">@kindall in fact, it is <a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="nofollow noreferrer">documented</a> that "Enumerations support iteration, in definition order".</span>
