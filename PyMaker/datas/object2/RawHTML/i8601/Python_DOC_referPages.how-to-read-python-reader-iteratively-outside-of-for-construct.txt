<div class="post-text" itemprop="text">
<p>I wrote this code and it prints rows sequentially:</p>
<pre><code>with open(filename, 'r') as csvfile:
    rder = csv.reader(csvfile, delimiter=',')
    for row in rder:
        print(row)
</code></pre>
<p>Is it possible to access <code>rder</code> with <code>hasNext</code> and <code>next</code> fashion, i.e. without <code>for</code> construct? For example, how to skip first row?</p>
<p>The question is general, I would like to understand, what does it mean to be able to stay before <code>in</code>. In Java this means being of <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html" rel="nofollow noreferrer"><code>Iterable</code></a> interface and I can easily find it's documentation and know, what I can do with it. </p>
<p>In Python there is no information that I can find about what is returned by the <code>reader</code> function and I don't know what I can do with it except <a href="https://docs.python.org/3.4/library/csv.html#csv.reader" rel="nofollow noreferrer">what is written in example</a>. And that example is written to only use it with <code>for</code>.</p>
<p>Can I choose to choose something else?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>csv.reader</code> returns an <a href="https://wiki.python.org/moin/Iterator" rel="nofollow noreferrer">iterator</a>.</p>
<p><strong>The iterator can be used in a <code>for</code> loop via <code>in</code>:</strong></p>
<p>So this:</p>
<pre><code>import csv
rder = csv.reader(my_csv(), delimiter=' ')
for row in rder:
    print(row)
</code></pre>
<p>gives:</p>
<pre><code>['A', 'header', 'row']
['some', 'data']
['some', 'more', 'data']
['A', 'footer']
</code></pre>
<p><strong>The iterator can be read inside the for loop using <code>next()</code>:</strong></p>
<p>If we need to consume a row inside of the for loop we can do:</p>
<pre><code>rder = csv.reader(my_csv(), delimiter=' ')
for row in rder:
    print(row)
    print('Grabbed one:', next(rder))
</code></pre>
<p>To give:</p>
<pre><code>['A', 'header', 'row']
Grabbed one: ['some', 'data']
['some', 'more', 'data']
Grabbed one: ['A', 'footer']
</code></pre>
<p><strong>The iterator can also be used outside of the for loop:</strong></p>
<pre><code>rder = csv.reader(my_csv(), delimiter=' ')
print('first one:', next(rder))
print('second one:', next(rder))
for row in rder:
    print(row)
</code></pre>
<p>Will give:</p>
<pre><code>first one: ['A', 'header', 'row']
second one: ['some', 'data']
['some', 'more', 'data']
['A', 'footer']
</code></pre>
<p><strong>Test Data:</strong></p>
<pre><code>from io import StringIO

def my_csv():
    return StringIO('\n'.join([x.strip() for x in u"""
        A header row
        some data
        some more data
        A footer
    """.split('\n')[1:-1]]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/csv.html#csv.reader" rel="nofollow noreferrer">csv.reader</a> returns an iterator based on the underlying objects iterator protocol. It will not work as an iterator if the underlying object does not support iteration. </p>
<p>If you use a text file, that is based on what is causing <code>next</code> to function for a text file (usually a <code>\n</code> sequence but not always...)</p>
<p>You <em>can</em> write a loop Python that is not based on the <code>for</code> protocol. Instead, you use <code>try/except</code> and catch the <code>StopIteration</code> exception:</p>
<pre><code>with open('file.csv') as csvfile:
    rder = csv.reader(csvfile)
    while True:
        try:
            row=next(rder)  
            print row
        except StopIteration:
            break   
</code></pre>
<p>But specifically, to get a header, it is probably better to do:</p>
<pre><code>with open('file.csv') as csvfile:
    rder = csv.reader(csvfile)
    header=next(rder)
    print header
    for row in rder:
        print row
</code></pre>
<p>Or, with Python3 you can shorten that to:</p>
<pre><code>with open('/tmp/file.csv') as csvfile:
    rder = csv.reader(csvfile)
    header, *rows=[row for row in rder]
</code></pre>
<p>But you can also use a non-file object, like a string with csv and records separate by a separate delimiter:</p>
<pre><code>&gt;&gt;&gt; s='A,B,C|1,2,3|4,5,6'
&gt;&gt;&gt; import csv
&gt;&gt;&gt; for row in csv.reader(s.split("|")):
...    print row
... 
['A', 'B', 'C']
['1', '2', '3']
['4', '5', '6']
</code></pre>
<p>In this case, <code>next</code> is moving to the next list element that is the result of the <code>.split()</code></p>
</div>
<span class="comment-copy"><code>rder</code> is an iterator.  See: <a href="http://stackoverflow.com/questions/19151/build-a-basic-python-iterator" title="build a basic python iterator">stackoverflow.com/questions/19151/build-a-basic-python-iterator</a></span>
<span class="comment-copy">How would I know, that <code>reader()</code> returns iterator? Usage in <code>for</code> implies this?</span>
<span class="comment-copy">Yes, <code>for ... in X</code> implies <code>X</code> is an iterator of some sort.  Python has a fairly rich variety of things which can be iterated over.</span>
<span class="comment-copy"><code>X</code> being usable in <code>for whatever in X</code> implies that <code>X</code> is an <i>iterable</i>. That might be an iterator (which wouldn't count as an iterable in Java), or it might be some sort of reusable iterable like a list or a Python 3 range object.</span>
<span class="comment-copy"><code>rder</code> is not inherently an iterator; it is only an iterator because Python can use a text fie (and many other objects that return strings) as an iterator.</span>
<span class="comment-copy">Bleh, SO Docs. Just looking at the first paragraph of what the link goes to, I can already see several mistakes. The <a href="https://docs.python.org/3/" rel="nofollow noreferrer">real Python docs</a> aren't the greatest, but they're usually better than that.</span>
