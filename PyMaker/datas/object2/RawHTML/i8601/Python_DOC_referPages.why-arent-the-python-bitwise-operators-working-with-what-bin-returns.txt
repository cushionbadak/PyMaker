<div class="post-text" itemprop="text">
<p>I've been doing some work with bitwise operators, which usually begins by using bin() to convert integers. I've been getting an error at each try.</p>
<pre><code>foo = 5
binfoo = bin(foo)
bar = ~(binfoo)
</code></pre>
<p>The last line is where we get messed up.</p>
<pre><code>Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: bad operand type for unary ~: 'str'
</code></pre>
<p>if bin() returns a string then what are these bitwise operators expecting?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>~</code> unary bitwise operator require <em>integer input</em>. From the <a href="https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="nofollow noreferrer"><em>Unary arithmetic and bitwise operations</em> section</a> of the <em>Expressions</em> chapter of the Python reference documentation:</p>
<blockquote>
<p>The unary <code>~</code> (invert) operator yields the bitwise inversion of its <strong>integer argument</strong>. The bitwise inversion of <code>x</code> is defined as <code>-(x+1)</code>. It only applies to integral numbers.</p>
</blockquote>
<p>Bold emphasis mine.</p>
<p>Applying <code>~</code> to <code>5</code> works just fine:</p>
<pre><code>&gt;&gt;&gt; ~5
-6
</code></pre>
<p>The <code>bin()</code> function only returns a <em>string</em> object with the binary representation of a number. Think of this as a debugging tool, something that can quickly show you what bits are set and not set for an integer number. To actually manipulate bits, you still need an integer.</p>
</div>
<span class="comment-copy">The bitwise operators are expecting integers, try <code>~foo</code>. The <code>bin</code> function is for creating a binary <i>string representation</i>, for output.</span>
<span class="comment-copy">Because <code>bin()</code> returns a string, not an integer number (bitwise operators work on <i>integers</i>, not strings).</span>
<span class="comment-copy">Under the hood integers <i>are</i> bit patterns -- which the bitwise operators work on directly. They don't work on the string representation of those bit patterns. Why do you think that bitwise operators "usually begin" with using <code>bin()</code>? In fact -- they <i>never</i> begin that way. Still -- this is a useful question in the sense that it is a fairly natural question for someone new to programming to ask. I don't think that it deserves a downvote.</span>
