<div class="post-text" itemprop="text">
<p>Score updates consumes a dictionary (see Example) and produces another dict with the value of the string, corresponding to the value of the letters from the dict Scoring. The output looks like Final(see below).
This is what I have so far and I'm unsure on how I'm supposed to loop through the string to calculate the sum of it.</p>
<p>Hope you are able to help. Thank you</p>
<pre><code>Example = {'Dallas':"WWLT", 'Seattle':"LLTWWT"}
Final = {'Dallas':5, 'Seattle':6}

def score_updates(weekly_result):
    Scoring = { 'W': 2, 'T': 1, 'L': 0}    
    d = {}
    total = 0
    teams = weekly_result.keys()
    for t in weekly_result:
        total += Scoring[t]
    return d[teams].append(total)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you already had a dict <code>Scoring</code>, you could just use a dict comprehension with <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>. </p>
<pre><code>def score_updates(d):
    return {k: sum(map(Scoring.__getitem__, v)) for k, v in d.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to enumerate the values along with the keys. Then you can just map each character in the value to its number and sum that</p>
<pre><code>def score_updates(weekly_result):
    Scoring = { 'W': 2, 'T': 1, 'L': 0}    
    d = {}
    for team, outcomes in weekly_result.items():
        d[team] = sum(Scoring[outcome] for outcome in outcomes)
    return d

Example = {'Dallas':"WWLT", 'Seattle':"LLTWWT"}
Final = {'Dallas':5, 'Seattle':6}

test = score_updates(Example)
print("Worked?", test == Final)
</code></pre>
</div>
<span class="comment-copy">Dict comprehension would be more pythonic. :)</span>
<span class="comment-copy">Can you turn this into a runnable example so we can all test the same thing?</span>
<span class="comment-copy">Can you explain your choice of <code>.__getitem__</code> over the <code>.get</code>? Is there a relative advantage?</span>
<span class="comment-copy">@TemporalWolf <code>get</code> yields <code>None</code> for missing keys, so if you had a character in your string that wasn't in <code>Scoring</code> you'd probably get a <code>TypeError</code> on the summation... whereas <code>__getitem__</code> just raises a <code>KeyError</code>. More clear to me.</span>
