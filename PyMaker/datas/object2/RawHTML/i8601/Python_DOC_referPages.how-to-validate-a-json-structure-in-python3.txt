<div class="post-text" itemprop="text">
<p>I am using Python3.5 and Django for a web api.When I refer to input, I refer to a HTTP request parameters. I have a parameter where I am expecting a JSON data which I need to validate before processing further.</p>
<p>I have a base json structure that the input has to be in.
Example,</p>
<pre><code>{
  "error": "bool",
  "data": [
      {
        "name": "string",
        "age": "number"
      },
      {
        "name": "string",
        "age": "number"
      },
      ...
    ]
}
</code></pre>
<p>The above <code>JSON</code> represents the structure that I want my input to be in. The keys are predefined, and the value represents the datatype of that key that I am expecting. I came across a Python library(<a href="https://pypi.python.org/pypi/jsonschema" rel="nofollow noreferrer">jsonschema</a>) that does this validation, but I can't find any documentation where it works with dynamic data. i.e. the objects inside the JSON array 'data' can be of any number, of course this is the most simple scenario I came up with for explaining the basic requirement. In cases like these, how can I validate my <code>json</code>?</p>
<p>The solution <a href="https://stackoverflow.com/questions/8975124/django-python-validate-json">here</a> didn't help because it's just checking if the json is proper or not based on the Django model. My json has no relation with Django model. Its a simple json structure. It still doesn't tell me how to validate dynamic object</p>
</div>
<div class="post-text" itemprop="text">
<p>JSON Schema is a specification for validating JSON; jsonschema is just a Python library that implements it. It certainly does allow you to specify that a key can contain any number of elements.</p>
<p>An example of a JSON Schema that validates your code might be:</p>
<pre><code>{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "error",
    "data"
  ],
  "properties": {
    "error": {
      "type": "boolean"
    },
    "data": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          }
        }
      }
    }
  }
}
</code></pre>
<p>See <a href="https://spacetelescope.github.io/understanding-json-schema/" rel="nofollow noreferrer">https://spacetelescope.github.io/understanding-json-schema/</a> for a good overview</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look into the documentation of <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">Python's JSON API</a>. I believe <code>json.tool</code> is what you're looking for, however there are a couple of other ways to validate JSON using that API.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/8975124/django-python-validate-json">Django/ python validate JSON</a></span>
<span class="comment-copy">@AjaySingh No, the solution there, just checking if the json is proper or not based on the Django model. My json has no relation with Django model. Its a simple json structure. It still doesn't tell me how to validate dynamic object.</span>
<span class="comment-copy">This looks legit, I will try it out tomorrow and get back. Thanks!</span>
<span class="comment-copy">Shouldn't <code>false</code> be surrounded by quotes?</span>
<span class="comment-copy">No, why should it be? It's a Boolean, not a string; the bool values in JavaScript (and json) are <code>true</code> and <code>false</code>.</span>
<span class="comment-copy">I was asking because I tried to build the schema to validate against, and <code>false</code> doesn't quite work in Py. :D</span>
<span class="comment-copy">If you construct this as a Python dict, you'll need to use Python types, so it will be <code>False</code>. When you dump it to json, it'll be converted to <code>false</code>.</span>
<span class="comment-copy">Lemmi have a look.</span>
<span class="comment-copy">Looks like <code>json.tool</code> is a command line function</span>
