<div class="post-text" itemprop="text">
<p>Isit possible to loop through the objects of class person and extract the attributes?</p>
<p>so for e.g. from below code after looping the output would be for each object as such 
Object mike, name-Mike, age-20</p>
<pre><code>class Person(object):
    def__init__(self,name,age):
    self.name = name
    self.age = age


mike = Person('Mike',20)
john = Person('John',20)
jack = Person('Jack',20)
adam = Person('Adam',20)
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Python classes don't automatically track all their instances.  You can use a class attribute to track them yourself if you need to:</p>
<pre><code>class Person(object):
    people = []

    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.people.append(self)
</code></pre>
<p>Even better would be to have a separate object that tracked people.  The Person.people attribute here is a single global value for the process, which can limit the usability and testability of the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>To loop the attributes of a given instance, I think you're looking for the builtin function <code>vars</code>:</p>
<pre><code>&gt;&gt;&gt; mike = Person('Mike', 20)
&gt;&gt;&gt; vars(mike)
{'age': 20, 'name': 'Mike'}
</code></pre>
<p>To loop through all instances of a given class is not possible, unless you add some code to maintain the list of instances yourself.  </p>
</div>
<div class="post-text" itemprop="text">
<p>if my understanding is right, you are asking about looping the class person
then it can be done like this.</p>
<pre><code>class person(object):
    def __init__(self,name,age):
        self.name=name
        self.age=age
for name,age in {'mike':20,'john':20,'jack':20}.iteritems():
    p = person(name,age)
    print ('I am %s my age is %d' %(p.name,p.age))
</code></pre>

## answer

<p>I am mike my age is 20
I am john my age is 20
I am jack my age is 20</p>
</div>
<span class="comment-copy">That could potentially be a <a href="https://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer">weak reference</a>, so that instances <i>only</i> being tracked by the class can be released.</span>
<span class="comment-copy">Hi thanks however prints the location of each object and not the name of object and its attributes, i don't know if this could be extracted by having the location or not?</span>
<span class="comment-copy">You have to print the individual attributes, or define  a <code>__repr__</code> method in your class that prints then - check the docs: <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__repr__</a></span>
<span class="comment-copy">thanks for making me aware about this function, it can be quite useful in certain situations but does not serve my purpose for this issue.</span>
<span class="comment-copy">thanks for your response. In this solution however you'd have to list the attributes of every object you've instantiated manually so its not directly looping through class.</span>
