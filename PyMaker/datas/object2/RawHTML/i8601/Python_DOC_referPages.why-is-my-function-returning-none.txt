<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/21471876/python-function-returning-none">Python Function Returning None</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I built a calculation and it works:</p>
<pre><code>num = input("How many numbers would you like to add? ") 

list = []
for x in range(num):
    list.append(input('Number: '))

a = 0
for x in list:

    a=a+x
    print a
</code></pre>
<p>But when I try to make a function on of this, simply doesn't work. Can you please direct me?</p>
<pre><code>list = []

def adding():
    num = input("How many numbers would you like to add? ") 

    for x in range(num):

        list.append(input('Number: '))

        a = 0
        for x in list:
            a=a+x

print adding()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Functions without explicit <code>return</code>s or empty <code>return</code>s will return <code>None</code>.</p>
<pre><code>&gt;&gt;&gt; def foo():
...     print("Hello")
...
&gt;&gt;&gt; f = foo()
Hello
&gt;&gt;&gt; f is None
True
</code></pre>
<p>If you don't want this, use a <code>return</code> at the end of your function to return some value.</p>
<hr/>
<p>Some other tips.</p>
<h2>Make your function only do one thing:</h2>
<p>Currently your function is getting input, creating a list, <em>and</em> summing everything. This is a lot. You'll find that if you make your functions smaller, you'll get some nice benefits. You might consider something like this:</p>
<pre><code>def prompt_for_number_of_inputs():
    return int(input("How many elements are there in the list? ")

def prompt_for_elements(num_elements):
    return [int(input("Enter a number: ")) for _ in range(num_elements)]

def sum_elements_in_list(li):
    return sum(li)
</code></pre>
<p>so you might use it like this:</p>
<pre><code>num_elements = prompt_for_number_of_inputs()
my_list = prompt_for_elements(num_elements)
print("The sum of all the elements is {0}".format(sum_elements_in_list(my_list))
</code></pre>
<h3>Don't shadow Python built-ins:</h3>
<p>If you call your variables the same thing as Python builtins, you'll find yourself in trouble. See here:</p>
<pre><code>&gt;&gt;&gt; a = list()
&gt;&gt;&gt; a
[]
&gt;&gt;&gt; list = [1,2,3]
&gt;&gt;&gt; a = list()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not callable
</code></pre>
<p>Normally <code>list()</code> would create an empty list (as seen above), but this is impossible because you've bound an object to the name <code>list</code>. Look at other builtins which could be shadowed <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not returning anything.<br/>
Your indentation is incorrect.<br/>
You shouldn't use python builtins as variable names (<code>list</code>).<br/>
(Note: <code>_</code> is often used as a disposable variable)</p>
<pre><code>def adding():
    num = int(raw_input("How many numbers would you like to add? ")) 
    lst = []

    for _ in range(num):
        lst.append(int(raw_input('Number: ')))

    a = 0
    for x in lst:
        a += x
    return a
</code></pre>
<p>You don't really need the second loop as <code>return sum(lst)</code> would do the same thing.<br/>
Alternatively, you don't need <code>lst</code> at all:</p>
<pre><code>def adding():
    num = int(raw_input("How many numbers would you like to add? ")) 

    a = 0
    for _ in range(num):
        x = int(raw_input('Number: '))
        a += x
    return a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I changed your variable name for the list as it shadows the built-in name and added the return statement. Works as you intended it to.</p>
<pre><code>sumlist = []

def adding():
    num = input("How many numbers would you like to add? ") 

    for x in range(int(num)):

        sumlist.append(int(input('Number: ')))

        a = 0
        for x in sumlist:
            a=a+x

    return a

print(adding())
</code></pre>
</div>
<span class="comment-copy">1) you need to use <code>return</code> from the function 2) please do not call a list <code>list</code> since you override the function of the same name</span>
<span class="comment-copy">If you want your function to return something, it needs to have a return statement.</span>
<span class="comment-copy">"Does not work" is not very helpful. What doesn't work? How doesn't it work?</span>
<span class="comment-copy">What do you mean <i>"doesn't work"</i>? You don't <code>return</code> anything, why wouldn't it return <code>None</code>?</span>
<span class="comment-copy">In Py2 <code>input()</code> is generally considered unsafe as it evaluates the input, use <code>int(raw_input(...))</code>.</span>
<span class="comment-copy">You should put <code>sumlist</code> inside the function, otherwise you're playing with a global variable, which is totally preventable here.</span>
