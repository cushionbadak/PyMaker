<div class="post-text" itemprop="text">
<p>Could you explain why the following code snippet doesn't work?</p>
<pre><code>class A:
    @staticmethod
    def f():
        print('A.f')

    dict = {'f': f}

def callMe(g):
    g()

callMe(A.dict['f'])
</code></pre>
<p>It yields</p>
<pre><code>TypeError: 'staticmethod' object is not callable
</code></pre>
<p>Interesingly, changing it to</p>
<pre><code>class A:
    @staticmethod
    def f():
        print('A.f')

    dict = {'f': f}

def callMe(g):
    g()

callMe(A.f)
</code></pre>
<p>or to</p>
<pre><code>class A:
    @staticmethod
    def f():
        print('A.f')

    dict = {'f': lambda: A.f()}

def callMe(g):
    g()

callMe(A.dict['f'])
</code></pre>
<p>gives the expected result</p>
<pre><code>A.f
</code></pre>
<p>As far as I see the behaviour is the same in Python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>f</code> object inside <code>A</code> is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a>, not the static method itself -- it <em>returns</em> the staticmethod when called with an instance of A;  read the link, and look up the "descriptor protocol" for more info on how this works. The method itself is stored as the <code>__func__</code> attribute of the descriptor.</p>
<p>You can see this for yourself:</p>
<pre><code>&gt;&gt;&gt; A.f
&lt;function A.f at 0x7fa8acc7ca60&gt;
&gt;&gt;&gt; A.__dict__['f']
&lt;staticmethod object at 0x7fa8acc990b8&gt;
&gt;&gt;&gt; A.__dict__['f'].__func__ # The stored method
&lt;function A.f at 0x7fa8acc7ca60&gt;
&gt;&gt;&gt; A.__dict__['f'].__get__(A) # This is (kinda) what happens when you run A.f
&lt;function A.f at 0x7fa8acc7ca60&gt;
</code></pre>
<p>Also note that you can use <code>A.__dict__</code> to access the <code>f</code> descriptor object, you don't need to make your own dictionary to store it. </p>
</div>
<div class="post-text" itemprop="text">
<p>The staticmethod object is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a>, and you need to access it as an attribute (of the class) for the descriptor mechanism to take effect.  The staticmethod object itself is not callable, but the result of its <code>__get__</code> is callable.  See also <a href="https://bugs.python.org/issue20309" rel="nofollow noreferrer">this Python bug discussion</a>.</p>
</div>
