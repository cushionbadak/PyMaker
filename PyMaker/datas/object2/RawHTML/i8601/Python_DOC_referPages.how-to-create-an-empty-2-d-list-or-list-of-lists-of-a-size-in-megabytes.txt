<div class="post-text" itemprop="text">
<p>how to create an empty 2 d list or list of lists of a size in megabytes. main purpose is it can store data in Mbs but while iterating it should not process empty sub sub lists. </p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want a data structure like this: <code>[[], [], []]</code>, ultimately. Let's call that final data structure <code>master</code>. There are two ways to interpret your question, then:</p>
<p>1) the "size" of just <code>master</code> itself (and not the objects to which it refers) should be <em>n</em> megabytes.</p>
<p>2) the size of <code>master</code> plus the size of every object contained within should be <em>n</em> megabytes.</p>
<p>These are two slightly different problems. If you just wanted to add empty lists to <code>master</code> until the size of <strong><code>master</code></strong> reached <em>n</em> MB, then you could do something like this.</p>
<pre><code>def init_empty_array(mb):
    byte = mb*(10**6)
    master = []
    size = getsizeof(master)
    while size &lt; byte:
        master.append([])
        size = getsizeof(master)
    return master
</code></pre>
<p><a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow noreferrer"><code>sys.getsizeof</code></a> returns the size of an object in bytes, so that's why we convert the passed <code>mb</code> (megabytes) parameter to bytes. Then we create an empty, "master" list and grab its size (which is 64 bytes in Python). After that, we just append to <code>master</code> empty lists until we reach the desired size. You could really just initiate <code>size</code> as 64 and then add 8 for each additional list, instead of using <code>sys.getsizeof</code>.</p>
<p>Notice, however, that the ultimate size of <code>master</code> likely will not correspond with the size you would expect from appending <em>k</em> lists to <code>master</code>. That's because <code>sys.getsizeof</code> only measures the size of <code>master</code> itself, and not the lists contained therein. Consider this:</p>
<pre><code>&gt;&gt;&gt; from sys import getsizeof
&gt;&gt;&gt; getsizeof([])
64
&gt;&gt;&gt; getsizeof([[]])
72
</code></pre>
<p>Well, look at that. The size, in bytes, of <code>[]</code> (an empty list) is 64 bytes. If we nest an empty list inside of a formerly-empty list, call the outer list <code>arr</code>, then the size of <code>arr</code> becomes 72. Each additional object (<code>str</code>, <code>list</code>, <code>set</code>, etc.) added to <code>arr</code> adds 8 bytes to the size of <code>arr</code>. But there's still technically an empty list inside of <code>[[]]</code>, right? It's up to you whether you want to account for the size (64 bytes) of each empty list inside your master list. </p>
<p>To get both the size of <code>master</code> and the objects contained within, you can try something like this:</p>
<pre><code>def init_empty_array(mb):
    byte = mb*(10**6)
    master = []
    size = 64
    while size &lt; byte:
        master.append([])
        size += 64 + 8
    return master
</code></pre>
<p>We add 64 bytes for the additional list, and 8 for the additional size added to <code>master</code> from that list. </p>
<p>Please note that, depending on how many megabytes you pass (e.g. 2.53 versus 2.0), your final <code>master</code> list may or may not be <em>exactly</em> the size of <code>mb</code> that you pass (that's because we can't append a fraction of a list; it's either 64 bytes or nothing).</p>
<p>Depending on whether <code>mb</code> is a strict upper or lower limit, you can adjust where <code>master</code>'s size falls (i.e. add some modular arithmetic in there to find the maximum or minimum number of lists for a given number of megabytes).</p>
<p>And, suppose you wanted to fill a list with <em>whatever</em> until its size reached <em>n</em> MB. You could use the recursive memory footprint function <a href="https://code.activestate.com/recipes/577504/" rel="nofollow noreferrer">here</a> to measure the size of everything in that list (whether the objects within are <code>str</code>, <code>set</code>, <code>list</code>, <code>dict</code>, or <code>tuple</code>, or any combination of those classes).</p>
<p>As you can see, there's lots of room above for your own interpretation and tweaking, but this should give you a good start.</p>
</div>
<span class="comment-copy">Your question is unclear to me. What do you mean with "<i>of a size in megabytes</i>"?</span>
<span class="comment-copy">In Python you do not need to pre-allocate memory for a list when you define it. Or do you want to define a large empty structure like <code>[[],[],[]]</code>...</span>
<span class="comment-copy">if your data is numeric, I would suggest <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html" rel="nofollow noreferrer">numpy arrays</a> for their better performance, and lower memory overhead. Assigning <code>nan</code> to values not yet written is a good way of representing data currently still missing</span>
<span class="comment-copy">actually I am trying to fetch a data from a log file. and storing the intermediate data in a list of lists. when the input file is smaller, program runs fine but when the input file is of a bigger size, it doesn't show any data in that list. when I am storing this intermediate data in a file, program runs fine, but i want to store data in the list itself.</span>
<span class="comment-copy">thanks, actually I am trying to fetch a data from a log file. and storing the intermediate data in a list of lists. when the input file is smaller, program runs fine but when the input file is of a bigger size, it doesn't show any data in that list. when I am storing this intermediate data in a file, program runs fine, but i want to store data in the list itself.</span>
