<div class="post-text" itemprop="text">
<p>The document in this link says that randint should not be used to generate cryptography keys:
<a href="https://docs.python.org/2/library/random.html" rel="nofollow noreferrer">https://docs.python.org/2/library/random.html</a></p>
<p>I am trying to understand why and how can an attacker break a crypto system based on such a key. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses a pseudo-random number generator (prng) to create "random" numbers to be utilized by your program. These numbers are generated from mathematical algorithms that only appear to be random. The algorithm that python uses is Mersenne Twister. As noted in the documentation:</p>
<blockquote>
<p>Python uses the Mersenne Twister as the core generator. It produces
  53-bit precision floats and has a period of 2**19937-1. The underlying
  implementation in C is both fast and threadsafe. The Mersenne Twister
  is one of the most extensively tested random number generators in
  existence. However, being completely deterministic, it is not suitable
  for all purposes, and is completely unsuitable for cryptographic
  purposes.</p>
</blockquote>
<p>As mentioned, the purpose of the algorithm is to both be fast and as "random" as possible. Notice the second sentence mentions the "period" of the algorithm. Because computers are not perfect and only have a finite amount of memory, they can only produce so many "random" numbers based on this algorithm. The period is the number of prng states that the machine can reach before it begins to repeat itself (<a href="https://softwareengineering.stackexchange.com/questions/273105/why-is-the-period-of-a-pseudorandom-number-generator-important">https://softwareengineering.stackexchange.com/questions/273105/why-is-the-period-of-a-pseudorandom-number-generator-important</a>). Coupled with this, python decides what "state" to use or what "seed" to use based on the internal features of the machine you are running the program on. (See the documentation on random.seed)</p>
<blockquote>
<p>random.seed(a=None)¶ Initialize internal state of the random number
  generator.</p>
<p>None or no argument seeds from current time or from an operating
  system specific randomness source if available (see the os.urandom()
  function for details on availability).</p>
</blockquote>
<p>Because of this, an attacker could recreate and determine the sequencing and future states of the prng in your program using brute force and basic knowledge of the machine that you are running the application on. I am by no means an expert on psuedo-random number generation algorithms, but hopefully this gives you a grasp on the subject :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>random</code> module is using time based random, which is designed for modelling and simulation, not security or cryptography.</p>
<p>The attackers can understand when the key created and it really help them to potentially brute-force your secret key.</p>
<p><strong>In python 3 you have the</strong> <code>secrets</code> <strong>module to resolve this issue.</strong></p>
<p><a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer">secrets documenation</a></p>
</div>
<span class="comment-copy">Exactly, you should use the secrets module</span>
<span class="comment-copy">'Since the concept of a "random" number doesn't truly exist in the real world...'  Many people would disagree with you on this.  As a professional statistician, I'm one of them.  Many of my quantum physicist friends would also dispute your claim.  May I strongly suggest you remove that, since it isn't necessary for the remainder of your post?</span>
<span class="comment-copy">@pjs Thank you for the feedback, I greatly appreciate it! I certainly am not an expert on quantum physics, so I will not dispute you or your fellow physicists. Could you provide a brief explanation or link to support your claim? I would gladly like to provide evidence to your suggestion if anyone questions my opinions in the future.</span>
<span class="comment-copy">I'm not a physicist, I'm a statistician.  By our standards, anything that cannot be predicted with certainty qualifies as random, and outcomes that are currently unknown and not <i>a priori</i> determined can/should be modeled as randomness.  For the physicists perspective, see <a href="http://www.nature.com/nature/journal/v464/n7291/edsumm/e100415-06.html" rel="nofollow noreferrer">nature.com/nature/journal/v464/n7291/edsumm/e100415-06.html</a>.  Also, check out Heisenberg's uncertainty principle, which proved you couldn't simultaneously know with certainty both the position and velocity of an object: <a href="http://abyss.uoregon.edu/~js/21st_century_science/lectures/lec14.html" rel="nofollow noreferrer">abyss.uoregon.edu/~js/21st_century_science/lectures/lec14.html</a></span>
<span class="comment-copy">Bottom line - once you acknowledge any aspect of a system's state to be unknowable, then the subsequent states cannot be predicted with certainty even if the system's behavior is mechanistic.  The reason most PRNGs are not acceptable for crypto is that with a sufficiently long set of observations, their internal state can be deduced with certainty.</span>
<span class="comment-copy">Yet another link you might find interesting: <a href="http://www.askamathematician.com/2009/12/q-do-physicists-really-believe-in-true-randomness/" rel="nofollow noreferrer">askamathematician.com/2009/12/…</a></span>
<span class="comment-copy">The source code here says that it will be seeded with os.urandom if it is available... <a href="https://hg.python.org/cpython/file/2.7/Lib/random.py" rel="nofollow noreferrer">hg.python.org/cpython/file/2.7/Lib/random.py</a>  ..Does that mean it is secure if os.urandom is available?</span>
<span class="comment-copy">Absolutely not. It means that it's depend on your OS type.</span>
<span class="comment-copy">@surbhi No, it is still insecure because the state of the PRNG can be determined with sufficient # of observations, which would allow you to predict future random numbers even without knowing the seed. If os.urandom is available and secure, random.randint is secure if you seed it before every call (but you might as well just call os.urandom directly in that case).</span>
