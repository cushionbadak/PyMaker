<div class="post-text" itemprop="text">
<p>I have a "main.py" python script. I want to handle two arguments for one option when I run my script in command line.</p>
<p>For example, I will write the following command in my terminal:</p>
<pre><code>python main.py --interval 2 4
</code></pre>
<p>I want to be able to get these 2 arguments (2 and 4) for this specific option (--interval) in my program.</p>
<p>"main.py" program:</p>
<pre><code>from sys import argv
from getopt import getopt, GetoptError


try:
    opts, args = getopt(argv[1:], "i:", ["interval="])
except GetoptError:
    print("usage: main.py --interval &lt;start value&gt; &lt;end value&gt;")
    exit(2)

for opt, arg in opts:
    if opt in ("-i", "--interval"):
        print("Start value: " + arg + ", end value: " + "?")
</code></pre>
<p>You can see in the last line of the program, I put a question mark at the place I would get the second argument for the "--interval" option.</p>
<p>The result I want should be:</p>
<pre><code>Start value: 2, end value: 4
</code></pre>
<p>I know for this simple example I could just use argv[1] for the option, argv[2] and argv[3] for the arguments. But I would like to know if it is possible to do it with "getopt" library and if yes, if it is the proper way to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> module in the standard library has an example just like this:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                    help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='sum the integers (default: find the max)')

args = parser.parse_args()
print(args.accumulate(args.integers))
</code></pre>
<p>In your example, you can simply replace the <code>nargs='+'</code> argument with <code>nargs=2</code>. Doing that produces the following usage message on my terminal (pass the <code>-h</code> flag to get usage):</p>
<pre><code>usage: tmp.py [-h] [--sum] N N
</code></pre>
</div>
<span class="comment-copy">Have you considered using <code>argparse</code>? <i>"Users who are unfamiliar with the C <code>getopt()</code> function or who would like to write less code and get better help and error messages should consider using the <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow noreferrer"><code>argparse</code></a> module instead."</i></span>
<span class="comment-copy">Thanks to this thread, I'm definitely going to take a long look at argparse.   However, if you are devoted to using getopt, you should know that an option takes at most one argument.    So, you could <i>cheat</i> if you really wanted to move on quickly ( read that as, you don't care about quality ) .  The cheat in this case is passing the interval as a space delimited string.   This is tough on operators, but they could run your program as: <code>program.py --interval="2 4"</code>.  Of course, your code would have to split the option.  You would also need to have suitable documentation.</span>
<span class="comment-copy">@Mark, I generally use argparse pretty successfully for parsing this stuff so I haven't tried anything else. However, I've heard good things about <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer">click</a>, and Google recently open sourced <a href="https://github.com/google/python-fire" rel="nofollow noreferrer">python-fire</a>. You might want to try them if <code>argparse</code> doesn't scratch your itch.</span>
