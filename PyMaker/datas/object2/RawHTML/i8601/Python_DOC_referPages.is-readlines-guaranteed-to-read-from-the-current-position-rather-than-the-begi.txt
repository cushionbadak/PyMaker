<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>with open('test.txt', 'w') as f:
    for i in range(5):
        f.write("Line {}\n".format(i))

with open('test.txt', 'r') as f:
    f.readline()
    for line in f.readlines():
        print(line.strip())
</code></pre>
<p>This outputs</p>
<pre><code>Line 1
Line 2
Line 3
Line 4
</code></pre>
<p>That is, <code>f</code> has an internal iterator and <code>f.readline()</code> consumes the first line and <code>f.readlines()</code> reads all other lines till the end of file. <strong>Is this expected/guaranteed from a language point of view?</strong> </p>
<p>The only information I found is from <a href="https://docs.python.org/3.3/tutorial/inputoutput.html" rel="nofollow noreferrer">docs.python.org</a>,</p>
<blockquote>
<p>If you want to read all the lines of a file in a list you can also use <code>list(f)</code> or <code>f.readlines()</code>.</p>
</blockquote>
<p>which I feel is ambiguous.</p>
</div>
<div class="post-text" itemprop="text">
<p>Two reasons to believe that <code>readlines()</code> reading from the current position instead of from the beginning of the file is 'guaranteed':</p>
<ol>
<li><p>Per the docs, <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open</code></a> returns a <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">file object</a> which per the glossary means something that implements the contract defined in the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer"><code>io</code></a> module. The <code>io</code> module docs tell us that <a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow noreferrer"><code>.readlines()</code></a> will</p>
<blockquote>
<p>Read and return a list of lines from the stream.</p>
</blockquote>
<p>Note also that the term "stream position" is used frequently throughout the <code>io</code> docs. I suppose I have to admit that the docs don't 100% unambiguously and explicitly say that <code>readlines()</code> will start reading from the current stream position rather than from the beginning of the file (or the middle, or a random position, or a position that varies depending upon the day of the week). However, I think it's fair to say that - given that it's established in the <code>io</code> docs that streams have positions - any interpretation other than reading from the current stream position would be perverse, even if we didn't have any real-life implementations to look at.</p></li>
<li><p>It's what CPython does, and CPython is widely understood to be Python's official reference interpreter (as noted in the docs at, for example, <a href="https://docs.python.org/devguide/#other-interpreter-implementations" rel="nofollow noreferrer">https://docs.python.org/devguide/#other-interpreter-implementations</a>).</p></li>
</ol>
<p>Maybe that argument isn't quite as formal or rigorous as an equivalent argument could be that looked at the specs of, say, C, C++, or ECMAScript. If that troubles you, then too bad, because you're not going to find that level of formality in the Python world. Python's docs are its specification, but they're <em>also</em> documentation meant for ordinary developers working in the language, and as a consequence don't define behaviour quite as anally as the formal standards of other languages tend to. When in doubt, interpret the docs in the most natural way and presume that Python will follow the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" rel="nofollow noreferrer">principle of least astonishment</a>, and if that doesn't provide enough certainty, trust the CPython reference interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<p>When they mention that trick in the documentation, they don't expect that you fiddle with the iterator first.</p>
<p>Yes, this is expected (and useful, when you want to skip a title line for instance, then read the rest of the lines).</p>
<p>If you want to be sure to read all the lines just rewind the file prior to calling <code>readlines</code>:</p>
<pre><code>f.seek(0)
lines = f.readlines()
</code></pre>
<p>The documentation is a bit scarce about <code>readlines</code> not rewinding the file. I did quite a lot of googling, it just seems implied &amp; natural. If you're not still convinced, you have to take a look at the source code (<code>bytesio.c</code> from Python 3.6.1 source):</p>
<pre><code>static PyObject *
_io_BytesIO_readlines_impl(bytesio *self, PyObject *arg)
/*[clinic end generated code: output=09b8e34c880808ff input=691aa1314f2c2a87]*/
{
    Py_ssize_t maxsize, size, n;
    PyObject *result, *line;
    char *output;

    CHECK_CLOSED(self);

    if (PyLong_Check(arg)) {
        maxsize = PyLong_AsSsize_t(arg);
        if (maxsize == -1 &amp;&amp; PyErr_Occurred())
            return NULL;
    }
    else if (arg == Py_None) {
        /* No size limit, by default. */
        maxsize = -1;
    }
    else {
        PyErr_Format(PyExc_TypeError, "integer argument expected, got '%s'",
                     Py_TYPE(arg)-&gt;tp_name);
        return NULL;
    }

    size = 0;
    result = PyList_New(0);
    if (!result)
        return NULL;

    output = PyBytes_AS_STRING(self-&gt;buf) + self-&gt;pos;
    while ((n = scan_eol(self, -1)) != 0) {
        self-&gt;pos += n;
</code></pre>
<p>I stopped pasting just after the readline loop started. On the line above, we see that the code is using the current <code>self-&gt;pos</code> value of the object. And it is not reset in the beginning of the code.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's what the readlines() is supposed to do.</p>
</div>
<span class="comment-copy">Do you have any resource to back up your claim?</span>
