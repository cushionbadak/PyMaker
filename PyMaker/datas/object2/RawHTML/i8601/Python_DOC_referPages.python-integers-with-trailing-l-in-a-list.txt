<div class="post-text" itemprop="text">
<p>So I have a list:</p>
<p><code>['x', 3, 'b']</code></p>
<p>And I want the output to be:</p>
<p><code>[x, 3, b]</code></p>
<p>How can I do this in python?</p>
<p>If I do <code>str(['x', 3, 'b'])</code>, I get one with quotes, but I don't want quotes.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2:</p>
<pre><code>mylist = ['x', 3, 'b']
print '[%s]' % ', '.join(map(str, mylist))
</code></pre>
<p>In Python 3 (where <code>print</code> is a builtin function and not a syntax feature anymore):</p>
<pre><code>mylist = ['x', 3, 'b']
print('[%s]' % ', '.join(map(str, mylist)))
</code></pre>
<p>Both return:</p>
<pre><code>[x, 3, b]
</code></pre>
<p>This is using the <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map()</code></a> function to call str for each element of <em>mylist</em>, creating a new list of strings that is then joined into one string with <a href="https://docs.python.org/3/library/stdtypes.html?highlight=join#str.join" rel="noreferrer"><code>str.join()</code></a>. Then, the <code>%</code> string formatting operator substitutes the string in instead of <code>%s</code> in <code>"[%s]"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python3:</p>
<pre><code>print('[',end='');print(*L, sep=', ', end='');print(']')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is simple code, so if you are new you should understand it easily enough.</p>
<pre><code>    mylist = ["x", 3, "b"]
    for items in mylist:
        print(items)
</code></pre>
<p>It prints all of them without quotes, like you wanted.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using only print:</p>
<pre><code>&gt;&gt;&gt; l = ['x', 3, 'b']
&gt;&gt;&gt; print(*l, sep='\n')
x
3
b
&gt;&gt;&gt; print(*l, sep=', ')
x, 3, b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>map</code>, I'd recommend using a generator expression with the capability of <code>join</code> to accept an iterator:</p>
<pre><code>def get_nice_string(list_or_iterator):
    return "[" + ", ".join( str(x) for x in list_or_iterator) + "]"
</code></pre>
<p>Here, <code>join</code> is a member function of the string class <code>str</code>. It takes one argument: a list (or iterator) of strings, then returns a new string with all of the elements concatenated by, in this case, <code>,</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can delete all unwanted characters from a string using its <a href="http://docs.python.org/library/stdtypes.html?highlight=translate#str.translate" rel="noreferrer"><code>translate()</code> method</a> with <code>None</code> for the <em><code>table</code></em> argument followed by a string containing the character(s) you want removed for its <em><code>deletechars</code></em> argument.</p>
<pre><code>lst = ['x', 3, 'b']

print str(lst).translate(None, "'")

# [x, 3, b]
</code></pre>
<p>If you're using a version of Python before 2.6, you'll need to use the <code>string</code> module's <code>translate()</code> function instead because the ability to pass <code>None</code> as the <em><code>table</code></em> argument wasn't added until Python 2.6. Using it looks like this:</p>
<pre><code>import string

print string.translate(str(lst), None, "'")
</code></pre>
<p>Using the <code>string.translate()</code> function will also work in 2.6+, so using it might be preferable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an interactive session showing some of the steps in @TokenMacGuy's one-liner. First he uses the <code>map</code> function to convert each item in the list to a string (actually, he's making a new list, not converting the items in the old list). Then he's using the string method <code>join</code> to combine those strings with <code>', '</code> between them. The rest is just string formatting, which is pretty straightforward. (Edit: this instance is straightforward; string formatting in general can be somewhat complex.)</p>
<p>Note that using <code>join</code> is a simple and efficient way to build up a string from several substrings, much more efficient than doing it by successively adding strings to strings, which involves a lot of copying behind the scenes.</p>
<pre><code>&gt;&gt;&gt; mylist = ['x', 3, 'b']
&gt;&gt;&gt; m = map(str, mylist)
&gt;&gt;&gt; m
['x', '3', 'b']
&gt;&gt;&gt; j = ', '.join(m)
&gt;&gt;&gt; j
'x, 3, b'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Using <code>.format</code> for string formatting,</strong></p>
<pre><code>mylist = ['x', 3, 'b']
print("[{0}]".format(', '.join(map(str, mylist))))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[x, 3, b]
</code></pre>
<hr/>
<p><strong>Explanation:</strong></p>
<ol>
<li><code>map</code> is used to map each element of the list to <code>string</code> type.</li>
<li>The elements are joined together into a string with <code>,</code> as separator.</li>
<li>We use <code>[</code> and <code>]</code> in the print statement to show the list braces.</li>
</ol>
<p>Reference: 
<a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer"><code>.format</code> for string formatting PEP-3101</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is another way... maybe a little bit more labourious...</p>
<pre><code>mylist = ['x', 3, 'b']
print('[', end='')
print(*myList, sep=', ', end='')
print(']')
</code></pre>
<p>You will remove ´\n´and this way you can concatenate the strings.</p>
</div>
<span class="comment-copy">Thank you that works great. Can you explain a bit in detail on what are you doing in the second line? I am new to python.</span>
<span class="comment-copy">He is using the <code>map</code> function to call <code>str</code> for each element of <code>mylist</code>, creating a new list of strings that he then joins into one string with <code>str.join</code>. Then, he uses the <code>%</code> string formatting operator to substitute the string in instead of <code>%s</code> in <code>"[%s]"</code>.</span>
<span class="comment-copy">Another way to do it that's maybe a bit more modern:  <code>"[{0}]".format(", ".join(str(i) for i in mylist))</code></span>
<span class="comment-copy">i tend to prefer <code>map(f, xs)</code> (or <code>imap</code> in python2.x) over <code>(f(x) for x in xs)</code>, when <code>f</code> is a predefined callable; that tends to execute fewer bytecodes, and is usually more compact.  Certainly <i>dont</i> <code>map(lambda x:..., xs)</code> thats much worse than <code>(... for x in xs)</code></span>
<span class="comment-copy">@user1767754: really?  Link?</span>
<span class="comment-copy">what does print(*L) do here?</span>
<span class="comment-copy">@sandeeps: see <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#calls</a></span>
<span class="comment-copy">I am confused by this. Is the long data type filtering the list somehow?</span>
<span class="comment-copy">This answer was already given.</span>
<span class="comment-copy">A good optimization for Python 2, since map returns a list in 2.x. It returns a generator in 3.x, so it doesn't help as much there.</span>
<span class="comment-copy">I would do return <code>", ".join( str(x) for x in list_or_iterator).join('[]')</code></span>
<span class="comment-copy">@eyquem: Clever, I've not seen join used like that before. Still, that is a little more opaque to a beginner (since you're using the property that a string is an iterable container of one-character strings).</span>
<span class="comment-copy">Alas : <code>lst = ["it isn't", 3, 'b']</code> ==&gt; <code>["it isnt", 3, b]</code> and also with <code>lst = ['it isn\'t', 3, 'b']</code></span>
<span class="comment-copy">@eyquem: Yes, avoiding the deletion of characters that are actually be part of your data (rather than strictly being used to delimit it) would naturally require slightly more elaborate/different logic if it's a possibility.</span>
<span class="comment-copy">where? not here...</span>
