<div class="post-text" itemprop="text">
<p>Seems like the strptime function of the datetime class is limited to 6 digits when it comes parsing fractional seconds with %f (<a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a>)</p>
<p>Just wondering if there is a "decent" workaround other than writing myself regular expressions all the way just in order to achieve pretty much the same thing that is already implemented for one more  additional digit.</p>
<p>Same has already been reported here: <a href="https://github.com/getsentry/sentry/issues/1610" rel="nofollow noreferrer">https://github.com/getsentry/sentry/issues/1610</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you have a fixed input format, you could just cut off the remaining bits:</p>
<pre><code>&gt;&gt;&gt; s = '2015-07-15T11:39:37.0341297Z'
&gt;&gt;&gt; s[:26]
'2015-07-15T11:39:37.034129'
&gt;&gt;&gt; datetime.strptime(s[:26], '%Y-%m-%dT%H:%M:%S.%f')
datetime.datetime(2015, 7, 15, 11, 39, 37, 34129)
</code></pre>
</div>
<span class="comment-copy">I thought about that too, seems there is not real workaround out there for making datetime time part dealing with fractional microseconds / nanoseconds</span>
<span class="comment-copy">Due to how the microseconds are internally stored (as microseconds :P), I don't think it would be possible for the datetime module to support higher precisions.</span>
