<div class="post-text" itemprop="text">
<p>Is it possible to use <code>mv</code> in Windows python. 
I want to use <code>mv --backup=t *.pdf ..\</code> to make copies of existing file but don't want to overwrite them, and Windows <code>move</code> command does not supports suffixes with existing files.</p>
<p>I can run my script with <code>mv</code> command in Windows Bash or CygWin but not on <code>cmd</code> or <code>powershell</code>. 
So is it possible to use Linux commands in Windows python?</p>
<p>EDIT: i'm using python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>well I tried a different approach to rename the existing files with a random hex at the end on the 'name'</p>
<p>and i'm pretty much satisfied with it :D</p>
<p><code>if os.path.isfile('../%s.pdf' % name) == True:
    os.system('magick *.jpg pdf:"%s".pdf' % name_hex)
else: 
    os.system('magick *.jpg pdf:"%s".pdf' % name)</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.rename(src, dst)</code></p>
<p>Rename the file or directory src to dst. If dst is a directory, OSError will be raised. On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). <strong>On Windows,</strong> if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file.</p>
<p>or <code>shutil.move(src, dst)</code></p>
<p>Recursively move a file or directory (src) to another location (dst).</p>
<p>If the destination is an existing directory, then src is moved inside that directory. If the destination already exists but is not a directory, it may be overwritten depending on os.rename() semantics.</p>
<p>If the destination is on the current filesystem, then os.rename() is used. Otherwise, src is copied (using shutil.copy2()) to dst and then removed.</p>
<p>If I got you right both will work for you.</p>
<p>by the way I know that when you install git you can enable Linux commands inside your CMD during the installation. (pay attention to checkbox there), but I'm not sure how it will behave and integrate with your scripts.</p>
</div>
<span class="comment-copy">If you are running windows 10 this is the purpose behind WSL (Windows Subsystem Linux). To turn it on type bash in the terminal. Note that it may not be installed by default and would be in the add windows features section of the control panel</span>
<span class="comment-copy">Why not to use the <code>shutil.move()</code>?</span>
<span class="comment-copy">You can mark one of the answers as accepted by clicking on the hollow check mark next to the up/downvotes so it turns solid green. You can undo later if you change your mind.</span>
<span class="comment-copy">This is not a forum and a question is not a "thread".</span>
<span class="comment-copy"><code>os.rename</code> doesn't move across file systems in Windows Python 3.3+. To move across file systems and avoid overwriting an existing file, use <code>shutil.move</code> with <code>dst</code> as the target directory.</span>
<span class="comment-copy">In total I have to agree with you, except the issue I don't know which python version @Kamil Mirza using. to cross platfrom between os use <code>os.replace()</code> on Python3. <a href="https://docs.python.org/3/library/os.html#os.replace" rel="nofollow noreferrer">docs.python.org/3/library/os.html#os.replace</a></span>
<span class="comment-copy"><code>os.replace</code> shouldn't be used. Use <code>shutil.move</code> with a try-except. For Windows the exception handler can simply use <code>os.rename</code> in a loop, incrementing the numbered backup name until the rename succeeds; then retry the move. For Unix creating the backup isn't that simple since <code>os.rename</code> replaces the destination.</span>
