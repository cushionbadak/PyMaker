<div class="post-text" itemprop="text">
<p>I inherited some code that looks like this:</p>
<pre><code>Python -&gt; File -&gt; Modern Fortran -&gt; File -&gt; Python
</code></pre>
<p>where each File contains a simple array of reals.</p>
<p>I now need to run this program many times and the I/O is hurting me. I want to omit the files and read the Python output into Fortran and read the Fortran output back into Python. </p>
<p>I can omit the first file by calling the Fortran routine from Python and providing the reals as a series of string arguments. </p>
<pre><code>## This Python script converts a to a string and provides it as 
## an argument to the Fortran script test_arg

import subprocess

a = 3.123456789
status = subprocess.call("./test_arg " + str(a), shell=True)
</code></pre>
<hr/>
<pre><code>!! This Fortran script reads in a string argument provided by the 
!! above Python script and converts it back to a real.

program test_arg

  character(len=32) :: a_arg
  real*8      :: a, b

  call get_command_argument(1,a_arg)
  read(a_arg,*), a
  print*,a

  b = a*10

end program test_arg
</code></pre>
<p>What would a working code snippet look like to output the variable 'b' into another Python script without using an intermediate file?</p>
<p>I've read about f2py, but the amount of refactoring involved in turning the inherited Fortan scripts into Python modules is more than what I want to do. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you could rebuild the Fortran code as a library, you could use that from Python using in several ways.</p>
<ul>
<li>Using <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a>. See e.g. the example at <a href="http://www.walkingrandomly.com/?p=85" rel="nofollow noreferrer">walking randomly</a>.</li>
<li>Using <a href="http://cython.org/" rel="nofollow noreferrer">cython</a>. See e.g <a href="https://maurow.bitbucket.io/notes/calling_fortran_from_python.html" rel="nofollow noreferrer">example 1</a> and <a href="http://www.legi.grenoble-inp.fr/people/Pierre.Augier/how-to-call-fortran-from-python.html" rel="nofollow noreferrer">example 2</a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I've found that what suits my needs is the following:</p>
<pre><code>## Sends a0 as a string to fortran script.
## Receives stdout from fortran, decodes it from binary to ascii,
## splits up values, and converts to a numpy array.

from subprocess import *
from decimal import Decimal as Dec

a0 = 3.123456789

proc = subprocess.Popen(["./test_arg", str(Dec(a0))], stdout=subprocess.PIPE)
out, err= proc.communicate()
result = np.array(out.decode('ascii').split(), dtype=float)
</code></pre>
</div>
<span class="comment-copy">Don't create Fortran program, create a subroutine. Or create a subroutine instead of  the main program as an interface to the most part of  the Fortran code.</span>
<span class="comment-copy">You can have the fortran write its output to stdout (<code>write(*,*)b</code> ) and you should be able to read the result via subprocess. The fortran needs to be "clean", not writing anything else to stdout. (Actualy integrating the code is better, but this is simple)</span>
<span class="comment-copy">I just want to add be careful when using <code>shell = True</code> it poses risks</span>
<span class="comment-copy">Thanks. Below the subprocess command that calls the fortran script, can I put another subprocess command that reads stdout from fortran's write(<i>,</i>)? Would you be able to provide a minimum working example?</span>
<span class="comment-copy">reading from process: <a href="http://stackoverflow.com/q/2082850/1004168">stackoverflow.com/q/2082850/1004168</a>. to get rid of shell you pass the arguments as a list, not one string.</span>
<span class="comment-copy">Or <a href="https://stackoverflow.com/questions/tagged/f2py">f2py</a>... But first he has to move on from the program to a subroutine.</span>
