<div class="post-text" itemprop="text">
<p>So I'm new to Python and I'm having difficulty understanding how to manipulate files and such. Currently I've been trying to assign the lines in my file into a list by splitting it at commas. I'm using this code:</p>
<pre><code>with open('grades.txt','r') as f:
    data=f.read()
    data=data.split(',')
    print(data)
</code></pre>
<p>The problem I have now is the output is this: </p>
<pre><code>['22223333', ' Michael Gill', ' 49\n23232323', ' Nicholas Smith', ' 62\n18493214', ' Kerri Morgan', ' 75\n00015542', ' Donald Knuth', ' 90\n00000001', ' Alan Turing', ' 100']
</code></pre>
<p>my question is, how do I remove the \n from my output and also how would i go about splitting the values separated by the \n (for example, 49\n23232323, i would like it to be split like '49','23232323').It is my understanding(which is not a lot) that you can't split a list nor can you assign 2 variables for splitting a file, so how would I split the file by commas and '\n'? </p>
<p>The ideal output would be:</p>
<pre><code>['22223333', 'Michael Gill', '49', '23232323', 'Nicholas Smith', '62', '18493214', 'Kerri Morgan', '75', '00015542', 'Donald Knuth', '90', '00000001', 'Alan Turing', '100']
</code></pre>
<p>The grades.txt file consists of:</p>
<pre class="lang-none prettyprint-override"><code>22223333, Michael Gill, 49   
23232323, Nicholas Smith, 62  
18493214, Kerri Morgan, 75  
00015542, Donald Knuth, 90  
00000001, Alan Turing, 100
</code></pre>
<p>Also, is it possible to split only certain lines/words in a file into a list? (i.e. a file containing (1,2,3,4,a,b,c,d,5,4,3,d,r) and splitting the numbers into one list and the letters into another?)</p>
</div>
<div class="post-text" itemprop="text">
<p>i'd do something like this:</p>
<pre><code>with open('grades.txt','r') as f:
    data=f.read()
    data=data.replace("\n", ",").split(',')
    print(data)
</code></pre>
<p>thus replacing every <code>\n</code> with commas</p>
<p>if you want to have numbers in one list and words in another just create two list and sort them using the function <code>.isdigit()</code> like this:</p>
<pre><code>words = []
numbers = []

for element in data:
    if element.replace(" ", "").isdigit(): numbers.append(element)
    else: words.append(element)
</code></pre>
<p>another way to do it is using <code>try</code> and <code>except</code>:</p>
<pre><code>for element in data:
    try:
        int(element.replace(" ", ""))
        numbers.append(element)
    except:
        words.append(element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As someone mentioned in the comments, perhaps the better approach would be to use the <strong>csv</strong> module.  But that requires you to learn/understand Python dictionaries - however dictionaries are a great data structure and very useful in many cases.</p>
<pre><code>from csv import DictReader as dr
data_from_file = []
with open(my_file.csv,'rb') as fh:
    my_reader = dr(fh)
    column_headings = my_reader.fieldnames
    for row in my_reader:
        data_from_file.append(row)
</code></pre>
<p>The result is a list of dictionaries.  Each line in the list corresponds to a row in the initial file.  But instead of the data just being some object without specific identity - assuming you have column headings <strong>id, name and age</strong> in your original file the results would look like</p>
<pre><code>[{'id:':'22223333', 'name': 'Michael Gill', 'age': '49'} . . .]
</code></pre>
<p>the column_headings object is a list of the original column headings from the file if you wanted to manipulate/explore those.  Of course the next question is how to save your data as a CSV file.  There are a number of Q&amp;A here on how to use the DictWriter method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it in this way as well</p>
<pre><code>list1 = ['22223333', ' Michael Gill', ' 49\n23232323', ' Nicholas Smith', ' 62\n18493214', ' Kerri Morgan', ' 75\n00015542', ' Donald Knuth', ' 90\n00000001', ' Alan Turing', ' 100']

list2=[]
for x in xrange(len(list1)):
    list1[x] = list1[x].split('\n')

list2 = sum(list1, [])    
print(list2) 
</code></pre>
<p>output would be</p>
<pre><code>['22223333', ' Michael Gill', ' 49', '23232323', ' Nicholas Smith', ' 62', '18493214', ' Kerri Morgan', ' 75', '00015542', ' Donald Knuth', ' 90', '00000001', ' Alan Turing', ' 100']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use Python's <a href="https://docs.python.org/3/library/itertools.html?highlight=chain#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain()</code></a> function as follows:</p>
<pre><code>from itertools import chain

with open('grades.txt','r') as f:
    data = list(chain.from_iterable(line.split() for line in f.readlines()))
    print(data)
</code></pre>
<p>This would display <code>data</code> as:</p>
<pre><code>['22223333,', 'Michael', 'Gill,', '49', '23232323,', 'Nicholas', 'Smith,', '62', '18493214,', 'Kerri', 'Morgan,', '75', '00015542,', 'Donald', 'Knuth,', '90', '00000001,', 'Alan', 'Turing,', '100']        
</code></pre>
<p>This uses <code>readlines()</code> to first read each of your lines in. This has the benefit of removing the newlines, giving you a list of lines. For each line, it use <code>split()</code> to create a list of entries, and then flattens all of the lists into a single list to give you the required results using the <code>chain()</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect those newlines are there separating rows and you would be better off:</p>
<pre><code>with open('grades.txt', 'r') as f:
    for row in f.readlines():
        data = row.split(',')
        print(data)
</code></pre>
<p>If you want to have a single, long tuple, you can do that instead by concatenating the results of the operation</p>
</div>
<span class="comment-copy">You might take a look at the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module.</span>
<span class="comment-copy">What you describe as <i>ideal</i> does not seem so ideal to me. You are losing information on the lines. <code>[('22223333', 'Michael Gill', '49'), ('23232323', 'Nicholas Smith', '62'), ('18493214', 'Kerri Morgan', '75'), ('00015542', 'Donald Knuth', '90'), ('00000001', 'Alan Turing', '100')]</code> looks more ideal. Every tuple is a line.</span>
<span class="comment-copy">I don't follow your last question. Could you show how this "split" file should exactly look based on your <code>grades.txt</code> file.</span>
<span class="comment-copy">@MartinEvans the last question is just a side question, nothing related to the grades.txt,I was just curious to know more on splitting files into lists</span>
<span class="comment-copy">Thanks, so much, your really helped. For the second part, I was using the numbers and letters as an example(though knowing the isdigit() function is gonna be really useful) I was wondering if there is a way to split specific things into a list from a file, lets say file 'test' is:(A,a,b,c,d,f) and i want to split only A,b and f into list_1 and ignore the rest. Is there a way to do this?</span>
<span class="comment-copy">you can use their index like this: <code>my_list = list[:2]+list[-1]</code>  but if i were you i'd post another question @ShageenderanSapai</span>
<span class="comment-copy">You don't <i>have</i> to use the dictionary form. You could throw away the first row like OP is currently doing and just treat the remaining rows as lists of anonymous elements.</span>
