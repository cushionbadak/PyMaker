<div class="post-text" itemprop="text">
<p>I am trying to access a variable declared in another function, but I got </p>
<pre><code>ERROR:
AttributeError: 'Myclass1' object has no attribute 'myDictIn'
</code></pre>
<p>The code I used is as follows:</p>
<pre><code>class Myclass1(object):
    def __init__(self):
        pass
    def myadd(self): 
        x=self.myDictIn # tried accessing variable declared in another function
        return x
    def mydict(self):  #variable declared in this function
        myDictIn={1:[1,2,3,4],3:[4,5,6,7]}
        self.myDictIn= myDictIn
        return myDictIn
inst=Myclass1() # Created instance
inst.myadd() # Accessing function where I am using an variable declared in another function
</code></pre>
<p>Also I tried declaring it as global</p>
<pre><code> def mydict(self):  #variable declared in this function
        global myDictIn
        myDictIn={1:[1,2,3,4],3:[4,5,6,7]}
        self.myDictIn= myDictIn
        return myDictIn
</code></pre>
<p>but still got same ERROR</p>
<p>Please help me ....
Actually I need to access an variable generated in one function and use it within another Function....Also
I tried.....</p>
<ol>
<li>Declaring as class variable (before <strong>init</strong> and after declaring class name)</li>
<li>Declaring that variable within <strong>init</strong>
Those 2 approaches lead to further errors </li>
</ol>
<p>So I must be able to access varibale generated within one function and use it in another function. Please assist me to find an answer</p>
</div>
<div class="post-text" itemprop="text">
<p>Your instance never calls the method mydict.  Remember that python is interpreted line-by-line the self.myDictIn will not be assigned at that point.</p>
<p>Instead, why don't you write self.myDictIn= .... in the constructor?</p>
</div>
<div class="post-text" itemprop="text">
<p>In myadd(self), declare myDictIn as global. As you know variables need to be declared/assigned before using it. If programme encounters myDictIn before assigned, it throws the error. So please declare myDictIn before programme encounters myDictIn. </p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you just need a <code>getter</code> and <code>setter</code> here, you can use python <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer"><code>properties</code></a> to do that:</p>
<pre><code>class Myclass1(object):
    def __init__(self, dict_value):
        self.myDictIn = dict_value

    @property
    def myDictIn(self):
      print(self.__myDictIn)
      return self.__myDictIn

    @myDictIn.setter
    def myDictIn(self, value):
        if not isinstance(value, dict):
            raise TypeError("dict_value must be a dict")
        self.__myDictIn = value

dict_value = {1: [1, 2, 3 ,4], 3: [4, 5, 6, 7]}
inst = Myclass1(dict_value)
inst.myDictIn # {1: [1, 2, 3 ,4], 3: [4, 5, 6, 7]}
</code></pre>
<p>This way, you can still change the value of <code>MyDictIn</code> easily</p>
<pre><code>inst.myDictIn = {1: [1, 2, 3]}
inst.myDictIn # {1: [1, 2, 3]}
</code></pre>
</div>
<span class="comment-copy">What do you mean "typecast to know the size of the list"? Can you give a <i>complete example</i>? And why don't you just not "convert to array then append to the list" and work with the array?</span>
<span class="comment-copy">You appear to be interested in <code>A[0]</code>, not <code>A</code>. How did <code>A</code> get defined in the first  place?</span>
<span class="comment-copy">Also, there is not "typecast" operator in Python. Although the term is used in the general sense of "convert this object to an object of another type," I don't think this usage is really helpful, and it isn't like type-casting in languages like Java or C.</span>
<span class="comment-copy">Thanks Juanpa, I mean "typecast to know the size of the list"? I intend to measure the number of elements in A  Can you give a complete example? The code is very lengthy 1000 lines  I want to extract only 5000 elements in every item eg: temp=A[0] # Access first item in the above eg temp[0:5000] # expected output</span>
<span class="comment-copy">Thanks The Doc,  I made it and declared within <b>init</b>. The output I received is as expected.      def __init__(self):         self.myDictIn = {1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}  What if, the variable must be used after assignment from another function....Is there a possibilities ?     def mydict(self):           myDictIn = {1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}         return myDictIn</span>
<span class="comment-copy">That's fine as long as you're absolutely sure that you don't try and access the self.myDictIn property before you've declared it.  It is more unusual to declare class variables in a method other than the <b>init</b> although sometimes you have to.   However, you'd better declare self.DictIn = {} at least in the <b>init</b> constructor and some other function somewhere else fills it in.</span>
<span class="comment-copy">If we declare  self.myDictIn={}  then whenever you call myDictIn within any function then the answer will always be  {}  What if,....I want to reflect the modification made by another function within a function</span>
<span class="comment-copy">Thanks unMask and I would like to let you the output I got by making it global.....   class Myclass1(object):     def __init__(self):         pass      def myadd(self):          x = self.myDictIn         print(x)         return x      def mydict(self):         global myDictIn         myDictIn = {1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}         self.myDictIn = myDictIn         return myDictIn  inst = Myclass1() inst.myadd()  expected output: {1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}  actual output: AttributeError: 'Myclass1' object has no attribute 'myDictIn'</span>
<span class="comment-copy">You've declared global myDictIn in mydict instead of myadd</span>
<span class="comment-copy">Thanks Max however I am still unable to print myDictIn variable within myadd....  class Myclass1(object):     def __init__(self):         self.myDictIn = None      def myadd(self):          x = self.myDictIn         print(x)         return x      def mydict(self):         myDictIn = {1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}         self.myDictIn = myDictIn         return myDictIn  inst = Myclass1() inst.myadd()  Actual Output: None  Expected Output: {1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}</span>
<span class="comment-copy">Yes because you have to run the method <code>mydict</code> first. You should call in the <code>__init__</code> method. I will update my answer if you struggle to do it</span>
<span class="comment-copy">Max, Actually I need to access an variable generated in one function and use it within another Function....Also I tried declaring as class variable (before <b>init</b> and after declaring class name) Additionally I tried using within <b>init</b> Those 2 approach lead to further errors   So I must be able to access varibale generated within one function and use it in another function</span>
<span class="comment-copy">You can use <code>self.myDictIn</code> in every methods of the class <code>MyClass1</code>. Do you need to use the variable outside the class? Please provide an example of what you are trying to do.</span>
<span class="comment-copy">class Myclass1(object):     def __init__(self):         pass     def myadd(self):          x = self.__myDictIn         print(x)     def mydict(self):           self.__myDictIn={1: [1, 2, 3 ,4] ,3 : [4, 5, 6, 7]}         return self.myDictIn inst = Myclass1() inst.myadd()  Output: AttributeError  Please let me know why this didnt work inspite of declaring a variable as __myDictIn.</span>
