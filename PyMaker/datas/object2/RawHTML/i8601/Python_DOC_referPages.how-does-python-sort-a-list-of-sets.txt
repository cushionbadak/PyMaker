<div class="post-text" itemprop="text">
<p>Python sorts lists of tuples by looking at the elements of the tuples, in order. Since sets are unordered, how does Python sort a list of sets?</p>
<p>Edit: <a href="https://stackoverflow.com/questions/1517347/about-pythons-built-in-sort-method">The question and accepted answer in this post</a> are more general and the document given is very in-depth. My question is not a duplicate.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regardless of what's in a list, the elements' <code>__lt__</code> methods are the only comparison methods consulted.  For sets, <code>a &lt; b</code> means "<code>a</code> is a proper subset of <code>b</code>", which isn't enough to define a total order.  That's why the result is, in general, undefined.  It may be any permutation of the original list consistent with which pairs of list elements the implementation happens to apply <code>__lt__</code> to.</p>
<p>If, for every pair of sets in the list, one is in fact a proper subset of the other, then the list will be sorted from smallest (cardinality) set to largest.  Otherwise little can be said.  For example:</p>
<pre><code>&gt;&gt;&gt; sorted([{5, 6}, {3, 4}, {5}, {3}])  # nothing changes
[{5, 6}, {3, 4}, {5}, {3}]
</code></pre>
<p>What happens is a consequence of undefined implementation details.  Since I wrote <code>list.sort()</code>, I know what happens in this case, but it's not guaranteed to always work this way:</p>
<p>First the implementation asks "is <code>{3, 4} &lt; {5, 6}</code>?".  No, so the order of the first two elements is consistent with being sorted already.  It next asks "is <code>{5} &lt; {3, 4}</code>?".  No, so the first three elements appear to be already sorted.  Finally it asks "is <code>{3} &lt; {5}</code>?".  No again, so the original list's entire order is consistent with being already sorted, and nothing changes.</p>
<p>A future implementation may, e.g., ask "is <code>{5} &lt; {5, 6}</code>?" at some point, and since "yes" decide <code>{5}</code> needs to appear before <code>{5, 6}</code>.  So the result is simply not defined.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets are partially ordered, so</p>
<blockquote>
<p>the output of the list.sort() method is undefined for lists of sets.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#set</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__le__</code> operator on sets define the partial ordering "<strong>subset</strong>". Therefore the sorted order is undefined.</p>
<p><code>{3} &lt; {5}</code> is false, but so is <code>{5} &lt; {3}</code> so the sort algorithm will usually not rearrange them.</p>
<p>Citation from <a href="https://docs.python.org/3/library/stdtypes.html?highlight=sets#set" rel="nofollow noreferrer">Python3 documentaton about sets</a>:</p>
<blockquote>
<p>The subset and equality comparisons do not generalize to a total ordering function. For example, any two nonempty disjoint sets are not equal and are not subsets of each other, so all of the following return False: <code>a&lt;b, a==b, or a&gt;b</code>.</p>
<p>Since sets only define partial ordering (subset relationships), the output of the list.sort() method is undefined for lists of sets.</p>
</blockquote>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1517347/about-pythons-built-in-sort-method">About Python's built in sort() method</a></span>
<span class="comment-copy">If you had tried it out you would see that it does not.</span>
<span class="comment-copy">@Ev.Kounis Depends on the test case. For example, <code>sorted([{1,2,3,4}, {1,2}, {1}, {1,2,3}])</code> does give me <code>[{1}, {1, 2}, {1, 2, 3}, {1, 2, 3, 4}]</code> as expected.</span>
<span class="comment-copy">Unless the subset relation happens to be a strict weak order on the particular sets in your list. Then the results are defined.</span>
<span class="comment-copy">but <code>{5} &lt; {5,6}</code> is true, what is the exact rule here?</span>
<span class="comment-copy">The rule is (proper) subset. If all elements in A also is in B, then we have either A==B or A&lt;B.</span>
