<div class="post-text" itemprop="text">
<p>I am trying to print out all possible combinations of the elements in a list.</p>
<pre><code>import random

def fun(lst, run):
    i = 0
    while i &lt; run:
        newList = lst
        NewNumbers = newList[-1:] + newList[:-1] #shifts each element in the to the right
        lst = NewNumbers
        print(lst)
        i += 1

fun([1, 2, 0], 3)
</code></pre>
<p>As the initial list [1, 2, 0]. This programme produces the output</p>
<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
[0, 1, 2]
[2, 0, 1]
[1, 2, 0]
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
</code></pre>
<p>I have had to physically change the list from [1, 2, 0] to something else like [1, 1, 0] to get the other possible combinations</p>
<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
[0, 1, 1]
[1, 0, 1]
[1, 1, 0]
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
</code></pre>
<p>and then go on to change the list to <code>[2, 2, 0], [0, 0, 2]</code> etc. to get other combinations and this is very time consuming and not easy to do once I increase the list to 4 elements like <code>[1, 2, 0, 1]</code></p>
<p>I have been able to find a way to do this using python's intertools</p>
<pre><code>import itertools
def fun(lst):
        all_possible_combinations = set(itertools.product(lst, repeat=3)) #repeat = number of elements
        return all_possible_combinations
print(fun([0, 1, 2]))
</code></pre>
<p>This produces exactly what I am looking for, it generates all the possible types of combinations of the elements 0, 1, 2</p>
<pre><code>{(0, 1, 1), (0, 1, 2), (1, 0, 0), (1, 0, 1), (0, 2, 1), (1, 0, 2), (0, 2, 0), (0, 2, 2), (2, 0, 1), (1, 2, 0), (2, 0, 0), (1, 2, 1), (0, 0, 2), (1, 2, 2), (2, 0, 2), (0, 0, 1), (0, 0, 0), (2, 1, 2), (1, 1, 1), (1, 1, 0), (2, 2, 2), (2, 1, 0), (2, 2, 1), (2, 1, 1), (1, 1, 2), (2, 2, 0), (0, 1, 0)}
</code></pre>
<p>I am trying to produce all these combinations through a loop that goes through iterations e.g. first iteration (0, 1, 1) then second iteration (0, 1, 2) as shown below:</p>
<pre><code>(0, 1, 1)
(0, 1, 2) 
(1, 0, 0)
(1, 0, 1) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A pure python equivalent of <a href="https://docs.python.org/2.7/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product()</a> is shown in the docs:</p>
<pre><code>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can look at the code for itertools product here: <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.product</a></p>
<p>If you want your function to have the same variable names as yours, here's a modified version of the product code to do what you want:</p>
<pre><code>def fun(lst, run):
    pools = [lst] * run
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield(tuple(prod))

print(list(fun([1, 2, 0], 3)))
</code></pre>
<p>output:</p>
<pre><code>[(1, 1, 1), (1, 1, 2), (1, 1, 0), (1, 2, 1), (1, 2, 2), (1, 2, 0), (1, 0, 1), (1, 0, 2), (1, 0, 0), (2, 1, 1), (2, 1, 2), (2, 1, 0), (2, 2, 1), (2, 2, 2), (2, 2, 0), (2, 0, 1), (2, 0, 2), (2, 0, 0), (0, 1, 1), (0, 1, 2), (0, 1, 0), (0, 2, 1), (0, 2, 2), (0, 2, 0), (0, 0, 1), (0, 0, 2), (0, 0, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this method uses recursive function to generate the list of all combinations, then u can iterate over it.</p>
<pre><code>def product(lst, current, rslt):
    if len(current) &gt;= len(lst) - 1:
        for item in lst:
            rslt += [current + [item]]
    else:
        for item in lst:
            product(lst, current + [item], rslt)

rslt = []
product([0, 1, 2], [], rslt)
for p in rslt:
    print p
</code></pre>
</div>
<span class="comment-copy">The question already contains this answer, they are trying to do it with a loop</span>
