<div class="post-text" itemprop="text">
<p>I got tired of typing </p>
<pre><code>grep "{search term}" ~/.bash_history
</code></pre>
<p>to search terms in my previous bash history. so i just wrote out this python script and put it in /usr/bin/local so I only have to type</p>
<pre><code>hist {search term}
</code></pre>
<p>And I get a list of all lines in the bash history that used that search term. </p>
<p>Here's the script:</p>
<pre><code>#hist
#!/usr/bin/python

import subprocess
import sys

subprocess.call("grep " + sys.argv[1] + " ~/.bash_history", shell=True)
</code></pre>
<p>It works great for the most part. However I noticed that if I type</p>
<pre><code>hist "-L"
</code></pre>
<p>I get the below errors:</p>
<pre><code>File "/usr/local/bin/hist", line 6, in &lt;module&gt;
subprocess.call("grep " + sys.argv[1] + " ~/.bash_history", shell=True)
  File "/usr/lib/python2.7/subprocess.py", line 523, in call
return Popen(*popenargs, **kwargs).wait()
  File "/usr/lib/python2.7/subprocess.py", line 1392, in wait
pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)
  File "/usr/lib/python2.7/subprocess.py", line 476, in _eintr_retry_call
return func(*args)
</code></pre>
<p>How can I fix this aspect, and what are some best practices for these kinds of scripts in general?</p>
</div>
<div class="post-text" itemprop="text">
<p>To make a more robust command line program with Python, consider using a library for handling arguments. As of writing this answer, the most popular are <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">Argparse</a>, <a href="http://docopt.org/" rel="nofollow noreferrer">Docopt</a>, and <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer">Click</a>. They all have their own flavor, and it's up to you and your use-case which one is the best fit.</p>
<p><a href="https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/" rel="nofollow noreferrer">This article</a> does a fairly good comparison of the basic usage of all three.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solutions:</p>
<p>@jDo:
Use CTRL+R for searching bash history</p>
<p>@Julien:
Use Argparse, Docopt or Click for robust python command-line parsing</p>
<p>Thanks everyone.</p>
</div>
<span class="comment-copy">Why not <a href="http://unix.stackexchange.com/questions/73498/how-to-cycle-through-reverse-i-search-in-bash">CTRL+R?</a></span>
<span class="comment-copy">I didn't know that CTRL+R was possible. Thanks!</span>
<span class="comment-copy">Those look promising. Thanks for the links!</span>
