<div class="post-text" itemprop="text">
<p>Today I tried an enumeration with aenum (like in this answer: <a href="https://stackoverflow.com/a/1695250/4720441">https://stackoverflow.com/a/1695250/4720441</a>):</p>
<p><code>orientation = Enum('red', 'yellow', 'green', 'orange')</code> </p>
<p>but this generated an error in the aenum library:</p>
<blockquote>
<p>File "C:\Python\27\lib\site-packages\aenum__init__.py", line 1417,
  in _get_mixins_
      issubclass(base, Enum) and TypeError: issubclass() arg 1 must be a class</p>
</blockquote>
<p>How can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The various ways to create an Enum using call syntax are:</p>
<pre><code># starts at 1
SomeEnum = Enum('SomeEnum', 'member1 member2 member3')

# starts at 1
SomeEnum = Enum('SomeEnum', ['member1', 'member2', 'member3'])

# values manually assigned
SomeEnum = Enum('SomeEnum', [('member1', 3), ('member2', 4), ('member3', 5)])

# values manually assigned
SomeEnum = Enum('SomeEnum', {'member1': 6, 'member2': 7, 'member3': 8})

# starts at 9
SomeEnum = Enum('SomeEnum', 'member1 member2 member3', start=9)
</code></pre>
<p>This is the same across the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">stdlib version</a>, <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code></a>, and <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a><sup>1</sup>.  The <a href="https://pypi.python.org/pypi/enum" rel="nofollow noreferrer"><code>enum</code></a><sup>2</sup> package is an old-style library.</p>
<hr/>
<p><em>The stdlib versions contain</em>:</p>
<h2>3.4</h2>
<ul>
<li>Enum</li>
<li>IntEnum</li>
<li>unique</li>
</ul>
<h2>3.6</h2>
<ul>
<li>Flag</li>
<li>IntFlag</li>
</ul>
<p>*<code>enum34</code> is the same as the 3.4 stdlib.</p>
<h2><code>aenum</code></h2>
<p><em>contains the above, plus</em>:</p>
<ul>
<li>OrderedEnum - members can be compared against each other</li>
<li>AutoNumberEnum - value is automatically generated</li>
<li>MultiValueEnum - members can be looked up with have multiple values</li>
<li>NoAliasEnum - duplicates are unique, not aliases</li>
</ul>
<p>and various helpers to manipulate the construction of enumerations:</p>
<ul>
<li>skip - prevents attributes from becoming enum members (attribute stays the same)</li>
<li>constant -- to prevent attributes from becoming enum members (attribute becomes a type of read-only property)</li>
<li>extend_enum - add new members to an existing enumeration (useful when the Enum is built in stages)</li>
</ul>
<p><em>And extra related types</em>:</p>
<ul>
<li>NamedConstant - No enumeration fanciness, just a value with a name</li>
<li>NamedTuple - similar to the stdlib <code>namedtuple</code>, but built using metaclasses instead of <code>eval</code></li>
</ul>
<hr/>
<p><sup>1</sup> Disclosure:  I am the primary author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a> library.</p>
<p><sup>2</sup> The author of the older <code>enum</code> library also helped with the stdlib version.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>aenum.Enum</code> is not constructed like this (see <a href="https://bitbucket.org/stoneleaf/aenum" rel="nofollow noreferrer">https://bitbucket.org/stoneleaf/aenum</a>). </p>
<p>Instead you should be passing in a first argument containing the Enum name, and a second argument corresponding to a space separated list of enum keys you want enumerated. </p>
<p>E.g. </p>
<pre><code>orientation = Enum('red', 'yellow green orange')
</code></pre>
<p><strong>Note on the answer at <a href="https://stackoverflow.com/a/1695250/4720441">https://stackoverflow.com/a/1695250/4720441</a></strong></p>
<p>In this answer, the poster creates an <code>enum</code> function, which combines it's arguments into a <code>dict</code>, and then passes that dict to the standard Enum constructor (as the third argument). </p>
</div>
<span class="comment-copy">The answer you linked to details a couple different ways -- you are trying to use an old-style way with the new <code>Enum</code>s.</span>
<span class="comment-copy">I could only find the detailed documentation on <code>https://bitbucket.org/stoneleaf/aenum/src/default/aenum/doc/aenum.rst</code>.</span>
<span class="comment-copy">So the example in the linked answer is wrong then? Sorry, but I'm not understanding your explanation. Like this: Enum(orientation, 'red'  'yellow' 'green' 'orange')</span>
<span class="comment-copy">No, the answer there also uses a single space-delimited string for the enum values.</span>
<span class="comment-copy">They add an <code>enum</code> method that takes multiple <b>args</b> and combines them into a dict, then calling the other form of the standard constructor which takes a dict as a third argument.</span>
<span class="comment-copy">Alright now I kind of understand: orientation = Enum('orientation', 'red yellow green orange')  Because strangely, after installing also the "enum" package, my initial Enum works. That confuses me.</span>
