<div class="post-text" itemprop="text">
<p>I'm trying to mock <code>subprocess.Popen</code>. When I run the following code however, the mock is completely ignored and I'm not sure why</p>
<p>Test Code:</p>
<pre><code>def test_bring_connection_up(self):
    # All settings should either overload the update or the run method
    mock_popen = MagicMock()
    mock_popen.return_value = {'communicate': (lambda: 'hello','world')}
    with patch('subprocess.Popen', mock_popen):
        self.assertEqual(network_manager.bring_connection_up("test"), "Error: Unknown connection: test.\n")
</code></pre>
<hr/>
<p>Module Code:</p>
<pre><code>from subprocess import Popen, PIPE
# ........
def list_connections():
    process = Popen(["nmcli", "-t", "-fields", "NAME,TYPE", "con", "list"], stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate() # &lt;--- Here's the failure
    return stdout
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're not patching in the right place.  You patch where <code>Popen</code> is defined:</p>
<pre><code>with patch('subprocess.Popen', mock_popen):
</code></pre>
<p>You need to patch where <code>Popen</code> is imported, i.e. in the "Module Code" where you have written this line: </p>
<pre><code>from subprocess import Popen, PIPE
</code></pre>
<p>I.e., it should look something like:</p>
<pre><code>with patch('myapp.mymodule.Popen', mock_popen):
</code></pre>
<p>For a quick guide, read the section in the docs: <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">Where to patch</a>.  </p>
</div>
<span class="comment-copy">What if you would change your import from <code>from subprocess import Popen</code> to <code>import subprocess</code> and then use <code>subprocess.Popen</code> in place of <code>Popen</code>?</span>
<span class="comment-copy">I get the same result as above</span>
<span class="comment-copy">Wait.. But how would I do that? the module will have it's own imports, right? If this is only for testing, how do I tell it to have different imports? Should I pass variables telling the module it's in testing mode and to import different information?</span>
<span class="comment-copy">No, you don't modify the library code for the purposes of test.  You modify the test code to patch in the library code.  Please read the guide I've linked.</span>
