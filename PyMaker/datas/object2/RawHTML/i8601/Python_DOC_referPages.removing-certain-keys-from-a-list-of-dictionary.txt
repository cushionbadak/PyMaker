<div class="post-text" itemprop="text">
<pre><code>[{'YEAR': 2016.0, 'DOY': 310.0, 'temperature': 12.55, 'min_temp': 10.61, 'max_temp': 14.19, 'field_id': 1, 'date': Timestamp('2016-11-05 00:00:00')}, {'YEAR': 2016.0, 'DOY': 311.0, 'temperature': 14.89, 'min_temp': 12.6, 'max_temp': 17.49, 'field_id': 1, 'date': Timestamp('2016-11-06 00:00:00')}]
</code></pre>
<p>In the above list of dictionaries, I want to only retain the foll. keys in this list: <code>['YEAR', 'temperature']</code></p>
<p>From <a href="https://stackoverflow.com/questions/3420122/filter-dict-to-contain-only-certain-keys">Filter dict to contain only certain keys?</a>, I can filter the dict to only certain keys like this:</p>
<pre><code>new_dict = { your_key: old_dict[your_key] for your_key in your_keys }
</code></pre>
<p>-- UPDATE:
The soln should also work if a key from <code>your_key</code> does not exist in the dictionary</p>
</div>
<div class="post-text" itemprop="text">
<p>Combine <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with dict comprehension to get a list of dictionaries:</p>
<pre><code>&gt;&gt;&gt; lst = [{'YEAR': 2016.0, 'DOY': 310.0, 'temperature': 12.55,
            'min_temp': 10.61, 'max_temp': 14.19, 'field_id': 1,
            'date': Timestamp('2016-11-05 00:00:00')},
           {'YEAR': 2016.0, 'DOY': 311.0, 'temperature': 14.89,
            'min_temp': 12.6, 'max_temp': 17.49, 'field_id': 1,
            'date': Timestamp('2016-11-06 00:00:00')}]
&gt;&gt;&gt; keys_to_retain = ['YEAR', 'temperature']
&gt;&gt;&gt; [{key: d[key] for key in keys_to_retain} for d in lst]
[{'YEAR': 2016.0, 'temperature': 12.55}, {'YEAR': 2016.0, 'temperature': 14.89}]
</code></pre>
<p><strong>UPDATE</strong> according to the question change</p>
<p>To make the dict comprehension work even if key from your_key does not exist in the dictionary, use <code>if</code> clause:</p>
<pre><code>[{key: d[key] for key in keys_to_retain if key in d} for d in lst]
                                        ^^^^^^^^^^^
</code></pre>
<p>Alternatively, if you want the result dicitonaries have default value for missing key, you can use <code>dict.get</code> with default value instead of <code>dict[..]</code>:</p>
<pre><code>[{key: d.get(key, 'default_value') for key in keys_to_retain} for d in lst]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more solution using pop</p>
<pre><code>mydict = [{'YEAR': 2016.0, 'DOY': 310.0, 'temperature': 12.55, 'min_temp': 10.61, 'max_temp': 14.19, 'field_id': 1}, 
          {'YEAR': 2016.0, 'DOY': 311.0, 'temperature': 14.89, 'min_temp': 12.6, 'max_temp': 17.49, 'field_id': 1}]

filter_list = ['YEAR','temperature']

# get all the keys to be removed. 
c =  list(set(mydict[0].keys())-set(filter_list))

# remove all the key,value for each dict in the list
[i.pop(cc) for i in mydict for cc in c]
print mydict
</code></pre>
<p>results in </p>
<pre><code>[{'temperature': 12.55, 'YEAR': 2016.0}, {'temperature': 14.89, 'YEAR': 2016.0}]
</code></pre>
</div>
<span class="comment-copy"><code>[{ your_key: subdict[your_key] for your_key in your_keys } for subdict in dict_list ]</code></span>
<span class="comment-copy">thanks @JohnGalt and @juanpa, your soln does not work if a key in <code>your_key</code> does not exist in the dictionary</span>
<span class="comment-copy">Quick fix: <code>[{ your_key: subdict[your_key] for your_key in your_keys if your_key in subdict} for subdict in dict_list ]</code></span>
