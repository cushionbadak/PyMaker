<div class="post-text" itemprop="text">
<p>Getting error for December month.  </p>
<blockquote>
<p>ValueError: month must be in 1..12</p>
</blockquote>
<pre><code>def last_day_of_month(ds):
    cur_ds = datetime.strptime(ds, '%Y-%m-%d')
    next_month = datetime(year=cur_ds.year, month=cur_ds.month+1, day=1)
    last_day_month = next_month - timedelta(days=1)
    return datetime.strftime(last_day_month, '%Y-%m-%d')

print last_day_of_month('2016-12-01')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't make a <code>datetime</code> with a month of 13. So you have to find a way to fix it. A simple solution is to convert the incremented month to an extra year:</p>
<pre><code># Reduce 12 to 1, 0 and all other #s to 0, #
extrayear, month = divmod(cur_ds.month, 12)
# Add 1 or 0 to existing year, add one to month (which was reduced to 0-11)
next_month = datetime(year=cur_ds.year + extrayear, month=month + 1, day=1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In line 3 <code>month=cur_ds.month+1</code> you are giving 13th month which is not valid. If you want to calculate last day of a given month you could also use month range from calendar library.</p>
<pre><code>&gt;&gt;import calendar
&gt;&gt;year, month = 2016, 12
&gt;&gt;calendar.monthrange(year, month)[1]
31
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're passing in <code>12</code> as current month, then adding one to get <code>next_month</code>, making it <code>13</code>.  Check for the <code>12</code> case and set <code>month=1</code> instead.</p>
</div>
<span class="comment-copy">Clearly if the month is December (12), then <code>month=cur_ds.month+1</code> would be 13, right? And clearly 13 is not an allowable month, just as the error says?</span>
<span class="comment-copy">Yes, is there way I can handle other than using if condition</span>
<span class="comment-copy">You could use <code>% 12</code>, couldn't you?</span>
<span class="comment-copy">Thanks. That works</span>
<span class="comment-copy">Ooh, solving the real problem directly. I approve. Upvoted. I always forget <a href="https://docs.python.org/3/library/calendar.html" rel="nofollow noreferrer">the <code>calendar</code> module</a> even exists.</span>
<span class="comment-copy">lol yeah, that's my daily life, writing something up then realizing there is a module for that :/</span>
<span class="comment-copy">Could be worse. Could already exist, but your legacy code base can't use it. Or it's created a month after you finish writing it. I had both, when a 2.7 code base needed to be able to cache stack traces cheaply (so they could be output later if a debug scenario came up). I basically invented <a href="https://docs.python.org/3/library/traceback.html#traceback.StackSummary" rel="nofollow noreferrer"><code>traceback.StackSummary(lookup_lines=False)</code></a> a month before 3.5 released (and of course, I couldn't use <code>StackSummary</code> even then, because the codebase was 2.7 and too painful to move to 3.x). Sigh... :-)</span>
