<div class="post-text" itemprop="text">
<p>I think the intentions of this code are clear. I want to have in X all possible input words, with each digit being an element in a list. The following code works for 4 digits, but it gets unsustainable for bigger words. How can I make it more scalable? Let's assume I want the words of n digits instead of four.</p>
<pre><code>d = [0,1]
X = [[x1,x2,x3,x4] for x1 in d for x2 in d for x3 in d for x4 in d]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> for that:</p>
<pre><code><b>from itertools import product</b>

d = [0,1]
x = [list(t) for t in <b>product(d,repeat=4)</b>]</code></pre>
<p>This gives:</p>
<pre><code>&gt;&gt;&gt; x
[[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1]]
</code></pre>
<p>And by modifying <code>repeat=</code> to for instance <code>5</code> you get all possible 5-digit lists.</p>
<p>In case you do not need lists - the elements are not supposed to be altered - tuples can be used, and in that case you can drop the <code>list(..)</code> construction:</p>
<pre><code># list of tuples

from itertools import product

d = [0,1]
x = <b>list(</b>product(d,repeat=4)<b>)</b></code></pre>
<p>This generates:</p>
<pre><code>&gt;&gt;&gt; x
[(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 1, 0, 0), (0, 1, 0, 1), (0, 1, 1, 0), (0, 1, 1, 1), (1, 0, 0, 0), (1, 0, 0, 1), (1, 0, 1, 0), (1, 0, 1, 1), (1, 1, 0, 0), (1, 1, 0, 1), (1, 1, 1, 0), (1, 1, 1, 1)]
</code></pre>
<p>Note that <code>product(..)</code> itself <strong>is a generator</strong>: it generates the elements <strong>lazily</strong>. This can be useful if the number of resulting elements will be huge and you can process them <em>one-at-a-time</em>. In that case you thus better do not construct a list. You can for instance use:</p>
<pre><code><b>for</b> tup <b>in product(d,repeat=4)</b>:
    print(tup)</code></pre>
<p>To print all tuples. Although the effect would be the same as with a <code>for tup in x:</code>, now the memory usage <em>can</em> be lower (it depends on the implementation of the garbage collector in the interpreter): since not all tuples have to be in memory at the <em>same time</em>. The next tuple the generator emit can possibly <em>reuse</em> the memory the previous tuple took since that place is now vacant (at least given you do not store the tuples in a list, etc.)</p>
</div>
<span class="comment-copy">The generator thing is interesting. Would something like <code>[0,0,1,1] in product(d,repeat=4)</code> work then?</span>
<span class="comment-copy">@DaniMedina: I wrote a small code fragment to demonstrate a possible usage of the generator.</span>
