<div class="post-text" itemprop="text">
<p>i have attached numpy-array to nodes in a networkx graph. How to store the graph in gexf-format on disk? (without the numpy vector, as its just something intermediate...)</p>
<pre><code>def create():
    G = nx.Graph()
    for i in range(256):
        G.add_node(i, vector=np.arange(20))
    for i in range(1,20):
        for j in range(1,256, 10):
            G.add_edge(i,j)

    temp = tempfile.mktemp(suffix=".gexf")
    print("dumping G = (V: %s, E: %s) to disk %s"
        % (len(G.nodes()), len(G.edges()), temp))
    nx.write_gexf(G, temp)
</code></pre>
<p>However, this breaks. I'm new to python, but to me it seems like the ndarray is not serializable?! So, how to tell networkx to ignore that node attribute?</p>
<pre><code>File "...lib\site-packages\networkx\readwrite\gexf.py", line 430, in add_attributes
    attr_id = self.get_attr_id(make_str(k), self.xml_type[val_type],
KeyError: &lt;type 'numpy.ndarray'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a library like the native <a href="http://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a>, or <a href="http://www.h5py.org/" rel="nofollow noreferrer"><code>h5py</code></a> for HDF5, to serialize your graph object. For example you can do:</p>
<pre><code>import pickle

with open("pickle_file", "wb") as f:
    pickle.dump(create(), f)
</code></pre>
<p>The pickled graph can be loaded back into Python by:</p>
<pre><code>with open("pickle_file", "rb") as f:
    G = pickle.load(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I solved this by removing the property "vector" from the data items:</p>
<pre><code>for (n,d) in G.nodes(data=True):
    del d["vector"]
</code></pre>
<p>full MWE:</p>
<pre><code>def create():
    G = nx.Graph()
    for i in range(256):
        G.add_node(i, vector=np.arange(20))
    for i in range(1,20):
        for j in range(1,256, 10):
            G.add_edge(i,j)

    temp = tempfile.mktemp(suffix=".gexf")
    print("dumping G = (V: %s, E: %s) to disk %s"
        % (len(G.nodes()), len(G.edges()), temp))
    for (n,d) in G.nodes(data=True):
        del d["vector"]
    nx.write_gexf(G, temp)
</code></pre>
</div>
<span class="comment-copy">uhm, but then i wont be able to load it in gephi ;)</span>
<span class="comment-copy">You didn't specify that in your question ;)</span>
<span class="comment-copy">i updated the question. so, thanks for pointing that one out.</span>
