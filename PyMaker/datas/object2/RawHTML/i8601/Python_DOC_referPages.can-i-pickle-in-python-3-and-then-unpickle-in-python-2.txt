<div class="post-text" itemprop="text">
<p>The problem I'm trying to solve is the following: I have a <code>networkx</code>graph that I would like to draw as a <a href="https://networkx.github.io/documentation/networkx-1.9/examples/drawing/circular_tree.html" rel="nofollow noreferrer">circular tree</a>. This requires <code>Graphviz</code> and either <code>PyGraphviz</code> or <code>Pydot</code>, which are not available for Python 3.</p>
<p>I'm considering the option of serialising the graph-object in python 3, and then de-serialising it in a python 2 environment where I could draw it. It's, however, unclear to me what the potential issues are with this type of approach since I cannot assume that the respective objects are similar in both environments.</p>
<p>Apart from actually trying this out (I currently have no python 2 environment on my machine), is there any way to find out if this is possible? Or would it simply make more sense to follow a different route by either exporting to a different format (e.g. gephy), and perhaps even doing the drawing outside of python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can dump data in Python 3 to load it again in Python 2. You probably want to set <code>fix_imports</code>, as well as use a protocol lower than 3. From the <a href="https://docs.python.org/3/library/pickle.html#pickle.dump" rel="nofollow noreferrer"><code>pickle.dump()</code> documenation</a>:</p>
<blockquote>
<p>If <em>fix_imports</em> is true and <em>protocol</em> is less than 3, pickle will try to map the new Python 3 names to the old module names used in Python 2, so that the pickle data stream is readable with Python 2.</p>
</blockquote>
<p>Protocol version 2 is supported in Python 2.3 - 2.7.</p>
<p>However, consider some of the alternatives:</p>
<ul>
<li><p>There are three Graphviz packages that support Python 3:</p>
<ul>
<li><p><a href="https://pypi.python.org/pypi/graphviz" rel="nofollow noreferrer"><code>graphviz</code> module</a> supports Python 3.3 and up.</p></li>
<li><p><code>pydot</code> has supported Python 3 since version 1.2.0, released July 2016. They project <a href="https://github.com/erocarrera/pydot/blob/master/.travis.yml" rel="nofollow noreferrer">tests every commit on Python 3.5</a>.</p></li>
<li><p><code>PyGraphviz</code> has supported Python 3 since version 1.3, released September 2015. The project <a href="https://github.com/pygraphviz/pygraphviz/blob/master/.travis.yml" rel="nofollow noreferrer">tests on 3.5 and 3.6</a>.</p></li>
</ul></li>
<li><p>Use a different serialisation format. JSON should be able to handle a graph just fine.</p></li>
</ul>
</div>
<span class="comment-copy">the best way would be to make your object state compatible with standard python structures and use <code>json</code> to serialize. No surprises.</span>
<span class="comment-copy">Upgrading a project to Python 3 is <i>not that hard anymore</i>. Consider creating a pull request for either PyGraphviz or Pydot to add support?</span>
<span class="comment-copy">The reverse question: <a href="http://stackoverflow.com/questions/28218466/unpickling-a-python-2-object-with-python-3" title="unpickling a python 2 object with python 3">stackoverflow.com/questions/28218466/â€¦</a></span>
<span class="comment-copy"><code>graphviz</code> is available for Python 3 though</span>
<span class="comment-copy">json definitely seems to be an option, as explained in this <a href="http://stackoverflow.com/questions/3162909/method-to-save-networkx-graph-to-json-graph">question</a></span>
