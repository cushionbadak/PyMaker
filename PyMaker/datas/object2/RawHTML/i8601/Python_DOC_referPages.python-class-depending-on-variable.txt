<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9143948/changing-the-class-type-of-a-class-after-inserted-data">Changing the class type of a class after inserted data</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Is there a way to change objects class dynamically depending on passed variable? For example:</p>
<pre><code>class Parent:
    def __init__(self, variable):
        ...
        some magic
        ...

class ChildA:
    pass

class ChildB:
    pass


cls=Parent('a')
cls.__class__
&lt;class '__main__.ChildA'&gt;

cls=Parent('b')
cls.__class__
&lt;class '__main__.ChildB'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done in a <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__new__#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a> method for the Parent class.  It gets to make the decisions about what object is really created:</p>
<pre><code>class Parent(object):
    def __new__(cls, selector):
        if selector == 'a':
            return object.__new__(A)
        else:
            return object.__new__(B)

class A(Parent):
    letters = 'aaaaa'

class B(Parent):
    letters = 'bbbbb'

a = Parent('a')
print(a.letters)
b = Parent('b')
print(b.letters)
</code></pre>
<p>The output proves that it works:</p>
<pre><code>aaaaa
bbbbb
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define a conditional check if, else  in the <code>__new__</code> function of class parent prior to the <code>__init__</code>.</p>
<pre><code>class Parent(Object):
   def __new__(self,s):
       if s=='a':
         return object.__new__(childA)
       else:
         return object.__new__(childB)
class childA(Parent):
   pass
class childB(Parent):
   pass
</code></pre>
</div>
<span class="comment-copy">Consider whether these should actually be separate classes at all, and if they should be, consider whether it might be better to create instances through a factory function of some sort instead of <code>Parent(whatever)</code>.</span>
<span class="comment-copy">A simple google search brought up <a href="http://stackoverflow.com/questions/9143948/changing-the-class-type-of-a-class-after-inserted-data">this</a>. Google is your friend.</span>
<span class="comment-copy">Anyone downvoting a python core developer answer should have the courage to explain <i>why</i> they think this is a bad answer.</span>
