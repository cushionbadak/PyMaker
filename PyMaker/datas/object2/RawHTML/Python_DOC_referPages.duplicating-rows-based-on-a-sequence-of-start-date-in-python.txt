<div class="post-text" itemprop="text">
<p>I would like to duplicate the rows in a data frame by creating a sequence of <strong>n</strong> dates from the start date.</p>
<p>My input file format.</p>
<pre><code>col1 col2    date
1    5    2015-07-15
2    6    2015-07-20
3    7    2015-07-25
</code></pre>
<p>My expected output.</p>
<pre><code>col1 col2     date
1   5       2015-07-15
1   5       2015-07-16
1   5       2015-07-17
1   5       2015-07-18
1   5       2015-07-19
2   6       2015-07-20
2   6       2015-07-21
2   6       2015-07-22
2   6       2015-07-23
2   6       2015-07-24
3   7       2015-07-25
3   7       2015-07-26
3   7       2015-07-27
3   7       2015-07-28
3   7       2015-07-29
</code></pre>
<p>I have to create a sequence of dates with a day difference. </p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>df['date'] = pd.to_datetime(df['date'])

n = 15
#create date range by periods
idx = pd.date_range(df['date'].iat[0], periods=n)
#create DatetimeIndex with reindex and forward filling values
df = (df.set_index('date')
        .reindex(idx, method='ffill')
        .reset_index()
        .rename(columns={'index':'date'}))
print (df)

         date  col1  col2
0  2015-07-15     1     5
1  2015-07-16     1     5
2  2015-07-17     1     5
3  2015-07-18     1     5
4  2015-07-19     1     5
5  2015-07-20     2     6
6  2015-07-21     2     6
7  2015-07-22     2     6
8  2015-07-23     2     6
9  2015-07-24     2     6
10 2015-07-25     3     7
11 2015-07-26     3     7
12 2015-07-27     3     7
13 2015-07-28     3     7
14 2015-07-29     3     7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Import packages</p>
<pre><code>from datetime import datetime as dt
from datetime import timedelta
import numpy as np
</code></pre>
<p>Then create the date range as a <code>df</code>:</p>
<pre><code>base = dt(2015, 7, 15)
arr = np.array([base + timedelta(days=i) for i in range(15)])
df_d = pd.DataFrame({'date_r' : arr})
</code></pre>
<p>Change the datatype of the original df if you have not:</p>
<pre><code>df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')
</code></pre>
<p>and merge with the original df, and sort by date ascending:</p>
<pre><code>df_merged = df.merge(df_d, how='right', left_on='date', right_on='date_r')
df_merged.sort_values('date_r', inplace=True)
</code></pre>
<p>you will get this df:</p>
<pre><code>    col1  col2       date     date_r
0    1.0   5.0 2015-07-15 2015-07-15
3    NaN   NaN        NaT 2015-07-16
4    NaN   NaN        NaT 2015-07-17
5    NaN   NaN        NaT 2015-07-18
6    NaN   NaN        NaT 2015-07-19
1    2.0   6.0 2015-07-20 2015-07-20
7    NaN   NaN        NaT 2015-07-21
8    NaN   NaN        NaT 2015-07-22
9    NaN   NaN        NaT 2015-07-23
10   NaN   NaN        NaT 2015-07-24
2    3.0   7.0 2015-07-25 2015-07-25
11   NaN   NaN        NaT 2015-07-26
12   NaN   NaN        NaT 2015-07-27
13   NaN   NaN        NaT 2015-07-28
14   NaN   NaN        NaT 2015-07-29
</code></pre>
<p>Now, you will just need to forward fill using <code>fillna(method='ffill').astype(int)</code>:</p>
<pre><code>df_merged['col1'] = df_merged['col1'].fillna(method='ffill').astype(int)
df_merged['col2'] = df_merged['col2'].fillna(method='ffill').astype(int)
</code></pre>
<p>for completeness sake, rename the columns to get the original intended df back:</p>
<pre><code>df_merged = df_merged[['col1', 'col2', 'date_r']]
df_merged.rename(columns={'date_r' : 'date'}, inplace=True)
</code></pre>
<p>for cosmetic purposes:</p>
<pre><code>df_merged.reset_index(inplace=True, drop=True)
print(df_merged)
</code></pre>
<p>to yield finally:</p>
<pre><code>    col1  col2       date
0      1     5 2015-07-15
1      1     5 2015-07-16
2      1     5 2015-07-17
3      1     5 2015-07-18
4      1     5 2015-07-19
5      2     6 2015-07-20
6      2     6 2015-07-21
7      2     6 2015-07-22
8      2     6 2015-07-23
9      2     6 2015-07-24
10     3     7 2015-07-25
11     3     7 2015-07-26
12     3     7 2015-07-27
13     3     7 2015-07-28
14     3     7 2015-07-29
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>more generic way would be stretching out your time index and filling NaN with previous values.</p>
<p>try this,</p>
<pre><code>df['date']=pd.to_datetime(df['date'])
print(df.set_index('date').asfreq('D').ffill().reset_index())
</code></pre>
<p>O/P:</p>
<pre><code>         date  col1  col2
0  2015-07-15   1.0   5.0
1  2015-07-16   1.0   5.0
2  2015-07-17   1.0   5.0
3  2015-07-18   1.0   5.0
4  2015-07-19   1.0   5.0
5  2015-07-20   2.0   6.0
6  2015-07-21   2.0   6.0
7  2015-07-22   2.0   6.0
8  2015-07-23   2.0   6.0
9  2015-07-24   2.0   6.0
10 2015-07-25   3.0   7.0
</code></pre>
</div>
<span class="comment-copy">Why your last date is 29th? Please mention when to stop logic for above.</span>
<span class="comment-copy"><b>n</b> is fixed in my question. I will have weekly level data. I need to create a sequence of 'n' dates by duplicating the rest of the columns. I just give you an example.</span>
