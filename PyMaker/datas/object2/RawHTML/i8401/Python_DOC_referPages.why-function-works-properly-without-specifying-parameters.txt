<div class="post-text" itemprop="text">
<p>In the below code, I don't understand why <code>download_progress_hook</code> works without passing parameters when it is called from within the <code>maybe_download</code> method.</p>
<p>The definition of <code>download_progress_hook</code> states that there are three parameters that have to be passed: <code>count, blockSize, totalSize</code>.
But, when the <code>download_progress_hook</code> is called from <code>maybe_download</code> there are no parameters passed. Why doesn't it fail?</p>
<p>Here is the full code:</p>
<pre><code>url = 'http://commondatastorage.googleapis.com/books1000/'
last_percent_reported = None
data_root = '.' # Change me to store data elsewhere

def download_progress_hook(count, blockSize, totalSize):
  """A hook to report the progress of a download. This is mostly intended for users with
  slow internet connections. Reports every 5% change in download progress.
  """
  global last_percent_reported
  percent = int(count * blockSize * 100 / totalSize)

  if last_percent_reported != percent:
    if percent % 5 == 0:
      sys.stdout.write("%s%%" % percent)
      sys.stdout.flush()
    else:
      sys.stdout.write(".")
      sys.stdout.flush()

    last_percent_reported = percent

def maybe_download(filename, expected_bytes, force=False):
  """Download a file if not present, and make sure it's the right size."""
  dest_filename = os.path.join(data_root, filename)
  if force or not os.path.exists(dest_filename):
    print('Attempting to download:', filename) 
    filename, _ = urlretrieve(url + filename, dest_filename, reporthook=download_progress_hook)
    print('\nDownload Complete!')
  statinfo = os.stat(dest_filename)
  if statinfo.st_size == expected_bytes:
    print('Found and verified', dest_filename)
  else:
    raise Exception(
      'Failed to verify ' + dest_filename + '. Can you get to it with a browser?')
  return dest_filename

train_filename = maybe_download('notMNIST_large.tar.gz', 247336696)
test_filename = maybe_download('notMNIST_small.tar.gz', 8458043)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I get everything, but the point where the function <code>download_progress_hook</code> gets called from within function <code>maybe_download</code></p>
</blockquote>
<p>That's where you went wrong. The function is <em>not being called</em>. It is only being referenced. There is no <code>(...)</code> call expression there.</p>
<p>Python functions are first-class objects, you can pass them around or assign them to other names:</p>
<pre><code>&gt;&gt;&gt; def foo(bar):
...     return bar + 1
...
&gt;&gt;&gt; foo
&lt;function foo at 0x100e20410&gt;
&gt;&gt;&gt; spam = foo
&gt;&gt;&gt; spam
&lt;function foo at 0x100e20410&gt;
&gt;&gt;&gt; spam(5)
6
</code></pre>
<p>Here <code>spam</code> is another reference to the function object <code>foo</code>. I can call that function object through that other name too.</p>
<p>So the following expression:</p>
<pre><code>urlretrieve(
    url + filename, dest_filename,
    reporthook=download_progress_hook) 
</code></pre>
<p>doesn't <em>call</em> <code>download_progress_hook</code>. It merely gives that function object to the <code>urlretrieve()</code> function, and it is <em>that code</em> that'll call <code>download_progress_hook</code> somewhere (passing in the required arguments).</p>
<p>From the <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve" rel="noreferrer"><code>URLOpener.retrieve</code> documentation</a> (which ultimately handles that hook):</p>
<blockquote>
<p>If <em>reporthook</em> is given, it must be a function accepting three numeric parameters: A chunk number, the maximum size chunks are read in and the total size of the download (-1 if unknown). It will be called once at the start and after each chunk of data is read from the network.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>import urllib.request
import os

class Progress:
def __init__(self):
    self.old_percent = 0

def download_progress_hook(self, count, blockSize, totalSize):
    percent = int(count * blockSize * 100 / totalSize)
    if percent &gt; self.old_percent:
        self.old_percent = percent
        os.system('cls')
        print(percent, '%')
    if percent == 100:
        os.system('cls')
        print('done!')

title = 'title'
url_mp4 = 'https://url'
progress = Progress()
urllib.request.urlretrieve(url_mp4, title + '.mp4', reporthook=progress.download_progress_hook)
</code></pre>
</div>
<span class="comment-copy">You mean in <code>urlretrieve(..., reporthook=download_progress_hook</code>)`? The function is <b>not being called there</b>.</span>
<span class="comment-copy">Thanks a lot Martijn.</span>
