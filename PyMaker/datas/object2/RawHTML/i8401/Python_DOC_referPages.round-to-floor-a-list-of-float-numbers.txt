<div class="post-text" itemprop="text">
<p>I want to round the float numbers in a list to floor in python, I tried <code>math.floor([i])</code>, the error is: <code>a float is required</code> and I also tried <code>math.trunc([i])</code>, I received this error: <code>AttributeEror_trunc</code>.
I couldb't find any proper code to solve this problem. Any help would be appreciated!</p>
<p>Here is the code that I have so far:</p>
<pre><code>with open ("G:\Speed\\december.sorted.movement.Sample.txt", 'r') as f:
    firs_line = f.readline()
    split=firs_line.split ("\t")

    Speed = [r.split()[5] for r in f]
    Speedf=[]
    for item in Speed:
        Speedf.append(float(item))

    denominator= 8677.8   
    i = [x/denominator for x in Speedf]

    import math
    v= math.floor([i])
    #print v [:5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/math.html#math.floor" rel="nofollow noreferrer"><code>math.floor()</code></a> only accepts a single float value argument (or an object with a <code>__floor__()</code> method). To apply it (or another callable taking a single argument) to a whole list you can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>s as shown below:</p>
<pre><code>import math

with open ('G:\\Speeds\\december.sorted.movement.Sample.txt', 'r') as f:
    first_line = f.readline()
    split = first_line.split('\t')

    Speeds = [float(line.split()[5]) for line in f]
    denominator = 8677.8
    v = [math.floor(sp/denominator) for sp in Speeds]
    print v[:5]
</code></pre>
<p>If you don't need the <code>Speeds</code> list for anything else, you could even combine the two list comprehensions into one and do things like this (although it's less readable):</p>
<pre><code>with open ('G:\\Speeds\\december.sorted.movement.Sample.txt', 'r') as f:
    first_line = f.readline()
    split = first_line.split('\t')

    denominator = 8677.8
    v = [math.floor(float(line.split()[5])/denominator) for line in f]
    print v[:5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/math.html#math.floor" rel="nofollow noreferrer"><code>math.floor</code></a> requires a float value. But you seem to be passing a list of list instead. </p>
<p>You can use list comprehension: </p>
<pre><code>v = [math.floor(float(x)) for x in i]
</code></pre>
<p>That should get a list of rounded values from <code>i</code>. </p>
<p>You can also work the <code>map</code> function:</p>
<pre><code>list(map(lambda x: math.floor(float(x)), i))
</code></pre>
</div>
<span class="comment-copy">Are you trying to get the floor of each number in list <code>i</code>? If so, why not do <code>v = [math.floor(x/denominator) for x in Speedf]</code>?</span>
<span class="comment-copy">The standard-library <code>math.floor</code> doesn't take lists, unlike <code>numpy.floor</code>. This paradigm is true for much of the standard library, as NumPy is Matlab-esque in its acceptance of arrays for functions like <code>numpy.sqrt</code>.</span>
<span class="comment-copy">Is there a reason not to use floor division in the first place? <code>i = [x // denominator for x in Speedf]</code></span>
<span class="comment-copy">Thanks for simplifying my code, I liked how you write it. I tried the code but the floor part doesn't return the correct answer. It just return the float result of the division. Do you have any idea why?</span>
<span class="comment-copy">This is 5 items in Speeds List : [0.6910234249841702, 59.13584700914624, 1.9605857061766796, 2.668716642021207, 1.311176241044252] And this is what it returns as values in v list: [0.0, 0.006798958261310471, 0.00011523658070017747, 0.00023047316140035494, 0.00011523658070017747]  , all of them should round to 0, but they don't.</span>
<span class="comment-copy">Ahh, I see the problem. Give me a minute and I'll update my answer—it was taking the <code>floor()</code> of <code>speed</code> not <code>speed/denominator</code>.</span>
