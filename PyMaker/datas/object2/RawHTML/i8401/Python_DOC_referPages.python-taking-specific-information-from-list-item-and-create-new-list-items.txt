<div class="post-text" itemprop="text">
<p>I am using list in my first python project.</p>
<pre><code>data_items = [{"ID":0x1111,  "Description":"data1",  "Writable":"FALSE"},
      {"ID":0x2222,  "Description":"data2",  "Writable":"TRUE"},
      {"ID":0x3333,   "Description":"data3", "Writable":"FALSE"}, 
      {"ID":0x4444,   "Description":"data4", "Writable":"TRUE"}]
</code></pre>
<p>I want to use another list name "new_data_items" and display only TRUE conditions like below example:How to write for loop for this</p>
<pre><code>new_data_items = [{"ID":0x2222,  "Description":"data2",  "Writable":"TRUE"},
          {"ID":0x4444,   "Description":"data4", "Writable":"TRUE"}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like the following:</p>
<pre><code>new_data_items = []
for item in data_items:
    if item['Writable'] == 'TRUE':
        new_data_items.append(item)
</code></pre>
<p>But list comprehensions would be quicker and less verbose:</p>
<pre><code>new_data_items = [item for item in data_items if item['Writable'] == 'TRUE']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> to do that:</p>
<pre><code>filter(lambda x: x['Writable'] == 'TRUE', data_items)
</code></pre>
<p>Note that filter returns an iterator so you may also want to convert that to a list:</p>
<pre><code>list(filter(lambda x: x['Writable'] == 'TRUE', data_items))
</code></pre>
<p>If the 'Writable' field may not be present for some records replace indexing with <code>.get</code>:</p>
<pre><code>list(filter(lambda x: x.get('Writable') == 'TRUE', data_items))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use python list compression</p>
<pre><code>[_ for _ in data_items if _.get('Writable') == 'TRUE']
</code></pre>
<p>Chk this link : <a href="https://repl.it/HEyl/0" rel="nofollow noreferrer">https://repl.it/HEyl/0</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>data_items = [{"ID":0x1111,  "Description":"data1",  "Writable":"FALSE"},
  {"ID":0x2222,  "Description":"data2",  "Writable":"TRUE"},
  {"ID":0x3333,   "Description":"data3", "Writable":"FALSE"},
  {"ID":0x4444,   "Description":"data4", "Writable":"TRUE"}]

new_data = list()
for element in data_items:
    value = element.get('Writable')
    if not value == "FALSE":
        new_data.append(element)

print new_data
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/3013449/list-filtering-list-comprehension-vs-lambda-filter">List filtering: list comprehension vs. lambda + filter</a></span>
<span class="comment-copy"><code>[item for item in data_items if item.get("Writable") == "TRUE"]</code></span>
<span class="comment-copy">This is slower than comprehension and more verbose than filtering with a lambda</span>
<span class="comment-copy">As @JaredSmith points out, a list comprehension would be much more quick.</span>
<span class="comment-copy">Working as expected...</span>
<span class="comment-copy">Just curious, why would you use <code>_</code>? <code>_</code> is usually used for unneeded variables.</span>
<span class="comment-copy">_ is used for temporary variables in python. When you don't care about variable name then its best to use '_' instead of using i,j</span>
<span class="comment-copy">@Himanshudua actually I think Erik is right. Underscore usually indicates a variable that will not be used.</span>
<span class="comment-copy">@IvayloStrandjev I don't know that</span>
<span class="comment-copy"><code>_</code> isn't used for temporary variables. You can use <code>x, _, z = coordinates</code> if you don't care about <code>y</code> for example. But using <code>_</code> for an important variable makes your code less readable.</span>
