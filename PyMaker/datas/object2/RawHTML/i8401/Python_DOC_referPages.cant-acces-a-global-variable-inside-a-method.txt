<div class="post-text" itemprop="text">
<p>I have a problem that when i try to use a global variable inside a method, an error is produced ("local variable 'b' referenced before assignment").
Why is this not the case when the variable is an element of a list?</p>
<p>this works fine:</p>
<pre><code>a = [1]
def a_add():
    a[0] += 1

a_add()
print(a)
</code></pre>
<p>but this doesn't:</p>
<pre><code>b = 1
def b_add():
    b += 1

b_add()
print(b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you try to assign something to <code>b</code> Python does a <code>LOAD_FAST</code> which is in relation to locals. You need to add <code>global b</code> before trying to use <code>b</code>.</p>
<pre><code>def b_add():
    global b
    b += 1
</code></pre>
<p>From the other point of view of:</p>
<pre><code>def b_add():
    print(b)
</code></pre>
<p>Python instead does a <code>LOAD_GLOBAL</code> which loads in relation to globals. Thus when you did <code>a[0]</code> it first does <code>LOAD_GLOBAL</code> for <code>a</code> and then subsequently stores the value.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">official FAQ page</a> has detailed explanation for this error:</p>
<pre><code>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def foo():
...     print(x)
...     x += 1
&gt;&gt;&gt; foo()
Traceback (most recent call last):
...
UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>
<blockquote>
<p>This is because when you make an assignment to a variable in a scope, that variable becomes local to that scope and shadows any similarly named variable in the outer scope. Since the last statement in foo assigns a new value to x, the compiler recognizes it as a local variable. Consequently when the earlier print(x) attempts to print the uninitialized local variable and an error results. </p>
</blockquote>
<p>And for code:</p>
<pre><code>a = [1]
def a_add():
    a[0] += 1

a_add()
print(a)
</code></pre>
<p>It just reads value from and assigns value to the first slot of the <code>global</code> array, so there's no problem.</p>
</div>
<span class="comment-copy">Thank you! Do you know why this wasn't needed for the list?</span>
<span class="comment-copy">@Solim take a look at my edit.</span>
<span class="comment-copy">Ok, that makes sense. Thank you once more :)</span>
<span class="comment-copy">Glad to help @Solim</span>
