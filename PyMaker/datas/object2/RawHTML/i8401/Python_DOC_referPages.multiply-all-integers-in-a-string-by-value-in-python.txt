<div class="post-text" itemprop="text">
<p>I need to multiply every integer in a string by another number, such that </p>
<pre><code>In [1]: mystring = '2 apple trees yield 4 apples'
In [2]: myfunction(mystring, by = 2)

Out[3]:'4 apple trees yield 8 apples'
</code></pre>
<p>With a string like that, it isn't so bad to use regex reassemble the desired output but I would like to be able to handle this situation:</p>
<pre><code>In [1]: mystring = '(((((A:1,B:1):1,C:2):2,D:4):2,(((E:1,F:1):1,G:2):2,H:4):2):2,(((I:1,J:1):1,K:2):2,L:4):4):8;'
In [2]: myfunction(mystring, by = 0.5)

Out[3]:'(((((A:0.5,B:0.5):0.5,C:1):1,D:2):1,(((E:0.5,F:0.5):0.5,G:1):1,H:2):1):1,(((I:0.5,J:0.5):0.5,K:1):1,L:2):2):4;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">re.sub</a> to replace all the integers.</p>
<pre><code>def myfunction(mystring, by):
    return re.sub(
        re.compile("\d+"), 
        lambda matchobj: str(int(matchobj.group(0))*by), 
        mystring
        )

mystring = "(((((A:1,B:1):1,C:2):2,D:4):2,(((E:1,F:1):1,G:2):2,H:4):2):2,(((I:1,J:1):1,K:2):2,L:4):4):8;"
myfunction(mystring, by = 0.5)
'(((((A:0.5,B:0.5):0.5,C:1.0):1.0,D:2.0):1.0,(((E:0.5,F:0.5):0.5,G:1.0):1.0,H:2.0):1.0):1.0,(((I:0.5,J:0.5):0.5,K:1.0):1.0,L:2.0):2.0):4.0;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>from itertools import groupby

mystring = '(((((A:12,B:1):1,C:2...H:4):2):2'
multiplier = 5

groups = []
for is_digit, g in groupby(mystring, lambda x: x.isdigit()):
    group = ''.join(g)
    if is_digit:
        group = str(int(group) * multiplier)
    groups.append(group)

multiplied = ''.join(groups)
print(multiplied)

#(((((A:24,B:2):2,C:4):4,D:8):4
</code></pre>
</div>
<span class="comment-copy">is this homework ?</span>
<span class="comment-copy">Where is your code and what problem are you having with it?</span>
<span class="comment-copy">Split the string by <code>'(\d)+'</code>, collect the list of fragments. <code>findall()</code> numbers in the original string using the same re, convert each fragment to int, multiply, convert back to str (use list comprehension). Now, zip both lists and flatten the result.</span>
<span class="comment-copy">You have a string representation of an actual data structure. Parse it, define and apply an appropriate mapping function to the result, then re-encode that to a new string.</span>
<span class="comment-copy">See <a href="http://ideone.com/kLMzHl" rel="nofollow noreferrer">this demo</a>, you may use a more sophisticated logic in the lambda or a callback method.</span>
<span class="comment-copy">See, you have <code>C:1.0</code> while OP expects <code>C:1</code>.</span>
<span class="comment-copy">@WiktorStribi≈ºew both are the same number, that should not be a problem</span>
<span class="comment-copy">Either works and a fully generalized method, like the above, that can return floats is better than just ints for my specific use.</span>
<span class="comment-copy">@IanGilman  Glad that it solved your problem.</span>
<span class="comment-copy">you don't need to call <code>list</code> on <code>g</code>, <code>join</code> accept any iterable...</span>
<span class="comment-copy">@Copperfield: that's right, updated.</span>
<span class="comment-copy">this produces another (incorrect) result on my computer. Are you sure this works correctly?</span>
<span class="comment-copy">I just ran it again... Did you use a different string? I tried with a few different ones, and always get correct results.</span>
<span class="comment-copy">maybe he mean that your sample program and your sample output don't match, otherwise this work as expected</span>
