<div class="post-text" itemprop="text">
<p>I have implemented an algorithm in C++ and inside the implementation I count some statistics, like cache misses, instructions, branch misses etc. This information is printed in the end with <code>cout</code>.  However I would also like to know how much space the implementation is using. I use <code>subprocess</code> as follows:</p>
<pre><code>result = subprocess.check_output(['/usr/bin/time', '-v','./program',input])
</code></pre>
<p>unfortunately only the output from <code>./program</code> is stored in <code>result</code> and not the output of <code>/usr/bin/time</code> as well. Here is one possible output from <code>/usr/bin/time</code>:</p>
<pre><code>User time (seconds): 3.41
    System time (seconds): 0.06
    Percent of CPU this job got: 99%
    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:03.48
    Average shared text size (kbytes): 0
    Average unshared data size (kbytes): 0
    Average stack size (kbytes): 0
    Average total size (kbytes): 0
    Maximum resident set size (kbytes): 344016
    Average resident set size (kbytes): 0
    Major (requiring I/O) page faults: 0
    Minor (reclaiming a frame) page faults: 72338
    Voluntary context switches: 1
    Involuntary context switches: 6
    Swaps: 0
    File system inputs: 0
    File system outputs: 0
    Socket messages sent: 0
    Socket messages received: 0
    Signals delivered: 0
    Page size (bytes): 4096
    Exit status: 0
</code></pre>
<p>I am only interested in <code>Maximum resident set size (kbytes):</code>. If I could somehow store this big text inside <code>result</code>, then I was hoping that I could parse it. But the output is not stored at all in <code>result</code>, it is simply printed. What is the best way to approach this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>time</code> outputs to STDERR, so you need to redirect that to STDOUT, or capture it separately. From the <a href="https://linux.die.net/man/1/time" rel="nofollow noreferrer"><code>time</code> command manpage</a>:</p>
<blockquote>
<p>When <em>command</em> finishes, <strong>time</strong> <strong><em>writes a message to standard error</em></strong> giving timing statistics about this program run.</p>
</blockquote>
<p><strong><em>Bold italic</em></strong> emphasis mine.</p>
<p>Redirecting is done with <code>stderr=subprocess.STDOUT</code>:</p>
<pre><code>result = subprocess.check_output(
    ['/usr/bin/time', '-v', './program', input],
    stderr=subprocess.STDOUT)
</code></pre>
<p>or use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a> to capture the two streams separately:</p>
<pre><code>result = subprocess.run(
    ['/usr/bin/time', '-v', './program', input],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout = result.stdout
time_output = result.stderr
</code></pre>
<p><code>subprocess.run()</code> is new in Python 3.5 and up; use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen()</code></a> directly if you have an older Python version (and consider upgrading ASAP):</p>
<pre><code>process = subprocess.Popen(
    ['/usr/bin/time', '-v', './program', input],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, time_output = process.communicate()
</code></pre>
</div>
