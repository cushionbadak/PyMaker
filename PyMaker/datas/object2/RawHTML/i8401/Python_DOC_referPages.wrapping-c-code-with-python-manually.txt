<div class="post-text" itemprop="text">
<p>I have a main file(main.cpp) and a header file(nodes.hpp). The main file takes N(any positive integer) as input argument and by using the functions of header file it gives output say 'x &amp; y' (both double).</p>
<p><strong>Note:</strong> </p>
<ol>
<li>Both main and header files are written in C++.</li>
<li>Both main and header files instead of using data structues as arrays,vectors, make use of Eigen Library.</li>
</ol>
<p>I have to write a python wrapper for them, I have working knowledge of python but have never used any wrapper. </p>
<p>Can anybody please refer or give some notes about using python wrpper for such code? </p>
</div>
<div class="post-text" itemprop="text">
<p>Use Boost.Python.  Here is my tutorial, previously on SO Docs.</p>
<hr/>
<p><strong>Using Boost.Python</strong></p>
<p>Things are easy when you have to use a C++ library in a Python project. Just you can use Boost.</p>
<p>First of all here is a list of components you need:</p>
<ul>
<li>A CMakeList.txt file, because you're going to use CMake.</li>
<li>The C++ files of the C++ project.</li>
<li>The python file - this is your python project.</li>
</ul>
<p>Let's start with a small C++ file. Our C++ project has only one method which returns some string "This is the first try". Call it <em>CppProject.cpp</em></p>
<pre><code>char const *firstMethod() {
    return "This is the first try.";
}

BOOST_PYTHON_MODULE(CppProject) {
    boost::python::def("getTryString", firstMethod); // boost::python is the namespace
}
</code></pre>
<p>Have a CMakeLists.txt file a below:</p>
<pre><code>cmake_minimum_required(VERSION 2.8.3)
FIND_PACKAGE(PythonInterp)
FIND_PACKAGE(PythonLibs)
FIND_PACKAGE(Boost COMPONENTS python)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})

PYTHON_ADD_MODULE(NativeLib CppProject)
FILE(COPY MyProject.py DESTINATION .) # See the whole tutorial to understand this line
</code></pre>
<p>By this part of the tutorial everything is so easy. you can import the library and call method in your python project. Call your python project <em>MyProject.py</em>.</p>
<pre><code>import NativeLib
print (NativeLib.getTryString)
</code></pre>
<hr/>
<p>In order to run your project follow the instructions below:</p>
<ul>
<li>Create a directory with the name <em>build</em>.</li>
<li>Enter into that directory.</li>
<li>Give the command <code>cmake -DCMAKE_BUILD_TYPE=Release ..</code></li>
<li><code>make</code></li>
<li><code>python MyProject.py</code>. Now, you have to see the string which the method in your C++ project returns.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here are your options:</p>
<ol>
<li><p>You can use <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a>, and I consider this the cleanest solution, because you convert your program to a shared library that can be called by any other software, not only Python. You, though, have to write a C-interface for your program yourself.</p></li>
<li><p>You can use <a href="https://docs.python.org/3.5/extending/extending.html" rel="nofollow noreferrer">Python C-Extension</a>, and I consider this the worst solution, because it's very low level, and prone to memory leaks, and costs lots of time to implement one function, and is Python-version dependent. Basically this is good to start a Python interpreter inside your C++. You can create PyObjects (which is the main building block of any Python type) and deal with them insdie C/C++.</p></li>
<li><p>You can use <a href="http://www.swig.org/" rel="nofollow noreferrer">SWIG</a>, where it automatically creates the the interface that you have to create with ctypes through an interface file that you define. People say it's very good, but the documentation is not as good.</p></li>
<li><p>You can use <a href="http://www.boost.org/doc/libs/1_62_0/libs/python/doc/html/index.html" rel="nofollow noreferrer">Boost.Python</a>, which is good, but it has a very ugly build system with bjam. If you can manage to bypass that, then it's even better than ctypes. I'm a big boost fan, but bjam is why I don't use this.</p></li>
</ol>
<p>What I do typically is ctypes. I trust it because it emphasizes the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">single-reponsibility principle</a>. The library has a job that's separate from the interface (the C-interface), which is also separate from your Python script that uses that interface and exposes "the easy functionality" to the user.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another tool for C++ wrapper generation is <a href="https://github.com/google/clif/" rel="nofollow noreferrer">CLIF</a>. Released in 2017,  Google uses this for most everything these days.  We no longer allow new SWIG wrappers to be written for Python internally.</p>
<p>It is built on top of Clang for the C++ parsing and requires relatively idiomatic modern C++ API use (unsurprisingly following <a href="https://google.github.io/styleguide/" rel="nofollow noreferrer">Google's Style Guide</a>) rather than any attempt to allow you to shoot yourself in the foot via SWIG's "support everything poorly" approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with official documentation:</p>
<p><a href="https://docs.python.org/2/extending/extending.html" rel="nofollow noreferrer">https://docs.python.org/2/extending/extending.html</a></p>
<p>this link will provide you simple example of how to include a cpp module and use it from the python interpreter, or if this is possible try with Cython: <a href="http://cython.org/" rel="nofollow noreferrer">http://cython.org/</a></p>
<p>Cython will allow you to write C-like, Python-like code which will be translated to CPP compiled and then will be easily accessible from the Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://www.boost.org/doc/libs/1_63_0/libs/python/doc/html/index.html" rel="nofollow noreferrer">Boost.Python</a></p>
<p>or go with the Python <a href="https://docs.python.org/2/extending/extending.html" rel="nofollow noreferrer">native interface</a></p>
<p>I would recommend Boost.Python if you already have Boost set up. </p>
</div>
<span class="comment-copy">Maybe start by <a href="https://docs.python.org/3/extending/index.html" rel="nofollow noreferrer">reading the documentation</a>, which also mentions some 3rd party tools you could investigate.</span>
<span class="comment-copy">One of the nicest and most modern libs would be <a href="https://github.com/pybind/pybind11" rel="nofollow noreferrer">pybind11</a> (which is getting more popular each day). Without much experience, this besides cython is the only one i tried and it worked great. Boost.Python is generally considered nice to use compared to the heavy-stuff like SWIG and co. but it's bounded by boost's build-tools. This is what pybind11 gets rid of if you are able to use a modern c++ compiler!</span>
