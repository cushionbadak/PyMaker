<div class="post-text" itemprop="text">
<p>I'm trying to write a Python GUI program with tkinter.</p>
<p>I want to make two thread. One runing with the main_form function to keep tkinter from keep update and loop (avoid "Not Responding").</p>
<p>The other, when the button1 (btn1) is clicked make function sci_thread() start running and start thread2 that execute the main_scikit with long time code.</p>
<p>But tkinter keep Not Responding. </p>
<p>Below is my code:</p>
<pre><code>import threading

class class_one:
    def main_scikit(seft):
        ######
        code_take_loooong_time
        ######
    def save(seft):
        pass

    def main_form(seft):
        root = Tk(  )
        root.minsize(width=300, height=500)
        ent1 = Entry(width=30)
        ent1.grid(row=0,column=1,padx = 10,pady=5)
        bnt1 = Button(root,text = "Start",command=lambda : seft.sci_thread())
        bnt1.grid(row=5,column=0,padx = 10) 

        root.update() 
        root.mainloop()

    def sci_thread(seft):
        maincal = threading.Thread(2,seft.main_scikit())
        maincal.start()

co = class_one()
mainfz = threading.Thread(1,co.main_form());
mainfz.start() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your app is unresponsive because your <em>target</em> parameter executed when declared and result of that passed as <em>target</em>. And, obviously, because of that you GUI is unresponsive while <code>code_take_loooong_time</code> being executed in GUI's thread. To deal with it  - get rid of redundant parentheses.</p>
<p>Try this snippet:</p>
<pre><code>import threading

try:
    import tkinter as tk
except ImportError:
    import Tkinter as tk


class class_one:
    def main_scikit(self):
        ######
        # code_take_loooong_time
        # same as sleep
        threading.Event().wait(5)
        # some print
        self.print_active_threads_count()

        ######
    def save(self):
        pass

    def main_form(self):

        self.root = tk.Tk()
        self.root.minsize(width=300, height=500)
        self.ent1 = tk.Entry(self.root, width=30)
        self.ent1.grid(row=0, column=1, padx=10, pady=5)
        self.bnt1 = tk.Button(self.root, text="Start", command=self.sci_thread)
        self.bnt1.grid(row=5, column=0, padx=10)

        self.root.update()
        self.root.mainloop()

    def sci_thread(self):
        maincal = threading.Thread(target=self.main_scikit)
        maincal.start()

    def print_active_threads_count(self):
        msg = 'Active threads: %d ' % threading.active_count()

        self.ent1.delete(0, 'end')
        self.ent1.insert(0, msg)
        print(msg)


co = class_one()
mainfz = threading.Thread(target=co.main_form)
mainfz.start() 
</code></pre>
<p><em>Links:</em></p>
<ul>
<li><a href="https://stackoverflow.com/questions/5767228/why-is-button-parameter-command-executed-when-declared">Similar problem with a tkinter button's parameter</a></li>
<li><a href="https://stackoverflow.com/questions/706721/how-do-i-pass-a-method-as-a-parameter-in-python">More general: How to pass a method as an parameter</a></li>
<li><a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">Threading docs</a></li>
</ul>
<p><em>P.S.:</em>
Also, be careful when you start a tkinter application <em>not in the main thread</em> because tkinter expects (in general) that <code>mainloop</code> is outer-most loop possible and that all Tcl commands invoked from the same thread. So there can be many and more synchronisation problem with all that, <a href="https://stackoverflow.com/questions/26703502/threads-and-tkinter-python-3">even if you just trying to quit GUI</a>!
In conclusion, maybe <a href="https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python">this</a> and <a href="https://stackoverflow.com/questions/17466561/best-way-to-structure-a-tkinter-application">that</a> would give you some new ideas.</p>
</div>
<span class="comment-copy">@erosennin113, please, make your code runnable for peeps, you can't declare threads like that, but try <code>mainfz = threading.Thread(target=co.main_form)</code> instead. I don't know what's your <code>code_take_loooong_time</code> really is, but with proper thread's declaration and with some time loops in <code>main_scikit</code> it works just fine - GUI is responsible and I can create as many threads as I want with it. So spend some time on your code, make it complete and confirm that problem not there anymore, deal?</span>
<span class="comment-copy">Thank you @CommonSense Sorry i can't post the code here , I'm working on scikit-learn and in the <code>code_take_loooong_time</code> is some data analysis  function take about 500-2000s . and during that time i have some print function to report in a text field on the GUI . But the UI is not responding as the time <code>code_take_loooong_time</code> take . At the end, everything is ok print function excute .</span>
<span class="comment-copy">did you read my advice about declaring threads properly? First of all you need only one parameter <code>target</code> and target must be a <i>callable</i>. In other words, your scikit-learn 's routine gets called and executed before thread's start. Same as cause why you're using lambda when declare your button - just to prevent execution of that function.</span>
<span class="comment-copy">Ty @CommonSense but , I can't make is work :(( , i declared just like you say . The other part , how i can prevent the scikit won't executed before thread's start .</span>
