<div class="post-text" itemprop="text">
<p>Using optparse, I currently have:</p>
<pre><code>opts, args = parser.parse_args(sys.argv[1:])
</code></pre>
<p>which is then feeding into a function that accepts opts:</p>
<pre><code>func(opts,sys.argv)
</code></pre>
<p>I'm trying to now use argparse, but the formatting for argparse is different:</p>
<pre><code>args = parser.parse_args(sys.argv[1:])
</code></pre>
<p>which doesn't allow me to feed the opts into the function. </p>
<p>I was wondering if there's any way to use argparse while maintaining opts to feed into the function.</p>
<p>I'm using Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>The end of the <code>argparse</code> docs page describes the basic differences.</p>
<pre><code>opts, args = parser.parse_args(sys.argv[1:])

args = parser.parse_args(sys.argv[1:])
</code></pre>
<p>In <code>optparse</code>, all flagged arguments are captured in the <code>opts</code> variable.  Everything else is in the <code>args</code> list.</p>
<p>In <code>argparse</code>, both flagged (also called optionals) and positionals are collected in the <code>args</code> Namespace</p>
<p><code>parse_known_args</code> gives an output that is closer to <code>optparse</code>:</p>
<pre><code>args, extras = parser.parse_known_args(sys.argv[1:])
</code></pre>
<p><code>extras</code> are strings that it can't parse; roughly corresponding to the 2nd variable returned by <code>optparse</code>.</p>
<p>Fire up an interactive shell, define a couple of parsers, and play with the different arguments.  And of course print the outputs ('opts','args','extras') to see what they produce.</p>
<p>If you have further questions, include sample parsers and outputs in your question.  </p>
<hr/>
<pre><code>In [3]: aparser=argparse.ArgumentParser()
In [4]: aparser.add_argument('-f');
In [5]: aparser.add_argument('bar');

In [6]: oparser=optparse.OptionParser()
In [7]: oparser.add_option('-f')
</code></pre>
<p>optparse parsing:</p>
<pre><code>In [22]: opts, rest = oparser.parse_args('-f one two'.split())
In [23]: opts
Out[23]: &lt;Values at 0xaca3a02c: {'f': 'one'}&gt;
In [24]: rest
Out[24]: ['two']
In [25]: opts.f
Out[25]: 'one'
</code></pre>
<p>argparse parsing</p>
<pre><code>In [26]: args = aparser.parse_args('-f one two'.split())
In [27]: args
Out[27]: Namespace(bar='two', f='one')
In [28]: args.f
Out[28]: 'one'
In [29]: args.bar
Out[29]: 'two'
</code></pre>
<p>parse_known_args:</p>
<pre><code>In [30]: args, extras = aparser.parse_known_args('-f one two three'.split())
In [31]: args
Out[31]: Namespace(bar='two', f='one')
In [32]: extras
Out[32]: ['three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>argparse</code> in a very similar way to <code>optparse</code>. From <a href="https://docs.python.org/3/library/argparse.html#name-or-flags" rel="nofollow noreferrer">the documentation</a> you can see that you just need to prefix arguments with either <code>-</code> or <code>--</code> and it becomes an optional parameter.</p>
<p>Here's an example from the documentation:</p>
<pre class="lang-python prettyprint-override"><code>parser = argparse.ArgumentParser()
parser.add_argument('-f', '--foo')
parser.add_argument('bar')
args = parser.parse_args
</code></pre>
<p>Additionally, you can change the <a href="https://docs.python.org/3/library/argparse.html#prefix-chars" rel="nofollow noreferrer">prefix chars</a> if your program needs to have options that are prefixed by different charaters:</p>
<pre class="lang-python prettyprint-override"><code>parser = argparse.ArgumentParser(prefix_chars='+')
parser.add_argument('+f', '++foo')
parser.add_argument('bar')
args = parser.parse_args
</code></pre>
</div>
