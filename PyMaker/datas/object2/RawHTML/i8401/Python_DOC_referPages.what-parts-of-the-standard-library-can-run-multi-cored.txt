<div class="post-text" itemprop="text">
<p>I am learning multi-threaded Python (CPython). I'm aware of the GIL and how it limits threading to a single core (in most circumstances).</p>
<p>I know that I/O functionality can be run multi-cored, however I have been unable to find a list of what parts of the standard library can be run across multiple cores. I believe that urllib can be run multi cored, allowing downloading on a thread on a separate core (but have been unable to find confirmation of this in the docs).  </p>
<p>What I am trying to find out is, which parts of the standard library will run multi-core, as this doesn't seem to be specified in the documentation. </p>
<p>Taken from the docs:</p>
<blockquote>
<p>However, some extension modules, either standard or third-party, are designed so as to release the GIL when doing computationally-intensive tasks such as compression or hashing. Also, the GIL is always released when doing I/O.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>With the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> package you can write truly parallel programs where separate processes run on different cores. There is no limitation to which libraries (standard or not) each sub-process can use.</p>
<p>The tricky part about multi-process programming is when the processes need to exchange information (e.g., pass each other values, wait for each other to finish with a certain task). The <code>multiprocessing</code> package contains several tools for that.</p>
</div>
<span class="comment-copy">none of it can be run multi-core except you spam processes, if you are talking about threads, all of it can run multithreaded, altough you will not have better speed performance but in I/O operations.</span>
<span class="comment-copy">Thanks @DanielSanchez. So I know that multi threading Python doesn't gain you much except when performing I/O where the Global interpreter Lock is released. I also know this is the case when performing specific heavy tasks -- see my edit. What I don't know is which parts of the Python standard library release the lock and allow for multi-core threading.</span>
