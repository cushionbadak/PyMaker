<div class="post-text" itemprop="text">
<p>Lets say you have a module which contains</p>
<pre><code>myfile = open('test.txt', 'r')
</code></pre>
<p>And the 'test.txt' file is in the same folder. If you'll run the module, the file will be opened successfully.
Now lets say you import that module from another one which is in another folder. The file won't be searched in the same folder as the module where that code is.
So how to make the module search files with relative paths in the same folder first?
There are various solutions by using "<code>__file__</code>" or "<code>os.getcwd()</code>", but I'm hoping there's a cleaner way, like same special character in the string you pass to open() or file().</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution is to use <code>__file__</code> and it's pretty clean:</p>
<pre><code>import os

TEST_FILENAME = os.path.join(os.path.dirname(__file__), 'test.txt')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For normal modules loaded from <code>.py</code> files, the <a href="https://docs.python.org/3/reference/import.html#__file__" rel="nofollow noreferrer"><code>__file__</code></a> should be present and usable. To join the information from <code>__file__</code> onto your relative path, there's a newer option than <code>os.path</code> interfaces available since 2014:</p>
<pre><code>from pathlib import Path

here = Path(__file__).parent
with (here/'test.txt').open() as myfile:
    ...
</code></pre>
<p><a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> was added to Python in 3.4 - see <a href="https://www.python.org/dev/peps/pep-0428/" rel="nofollow noreferrer">PEP428</a>.  For users still on Python 2.7 wanting to use the same APIs, a <a href="https://pypi.org/project/pathlib2/" rel="nofollow noreferrer">backport is available</a>.</p>
<p>Users interested to apply the most modern approaches available should consider moving to <a href="https://importlib-resources.readthedocs.io/en/latest/" rel="nofollow noreferrer">importlib-resources</a> rather than joining data files relative to the source tree.  Currently, few users have the luxury of restricting compatibility to Python 3.7+ only, so I mention this as a heads-up to those who like to be at the cutting edge.</p>
</div>
<span class="comment-copy">What's the problem with <code>os.getcwd()</code>?</span>
<span class="comment-copy"><code>os.getcwd()</code> returns the path of the first module, which imported that module, or imported another one which imported it. The first module might be in many directories up or down. So it doesn't seem very elegant to type <code>os.getcwd()+'something/somethingelse/yetanother/finallyhere'</code></span>
<span class="comment-copy">+1, indeed ! You can even just <code>import os.path</code>.</span>
<span class="comment-copy"><code>import os.path</code> is pointless, when you do <code>import os</code>, the module imports <code>os.path</code> for you (<code>os</code> is special that way). One could use <code>from os import path</code> but it's not common in case of the <code>os</code> module. It's very probable he already has <code>import os</code> in his module or will need one soon. Therefore, <code>import os</code> is almost always the best choice.</span>
<span class="comment-copy">I guess this is as clean as you can get. Anything more would be asking to change how the official Python interpreter works.</span>
<span class="comment-copy">Thanks for the extra tip about importlib. +1</span>
