<div class="post-text" itemprop="text">
<p>I have the following project structure:</p>
<pre><code>tests/
└── messenger/
    └── messaging_test.py
app/
├── __init__.py
├── models.py
└── messenger/
    ├── __init__.py
    └── messaging.py
</code></pre>
<p>Inside <code>messaging.py</code> module there's a function <code>send_schedule</code> with the following lines:</p>
<pre><code>talks = models.Talk.query.all()
raise ValueError(str(talks))  # the debug output
</code></pre>
<p>I'm trying to patch the <code>models.Talk.query.all()</code> call. Inside <code>messaging_test.py</code> there's the following test:</p>
<pre><code>@patch('app.models.Talk.query.all')
def test_send_schedule(self, all_query_mock):
    all_query_mock.return_value = []
    for talk_id in range(1, 6):
        talk_mock = MagicMock(id=talk_id, title=str(talk_id), speaker_facebook_id=1)
        all_query_mock.return_value.append(talk_mock)
    with vcr.use_cassette('vcr_cassettes/send_schedule.yaml'):
        response = messaging.send_schedule(self.access_token, self.user_id)

    self.assertTrue('recipient_id' in response)
    self.assertTrue('message_id' in response)
    self.assertEqual(response['recipient_id'], self.user_id)
</code></pre>
<p>When I run the test with <code>python3 -m pytest tests/messenger/messaging_test.py</code> command, <code>ValueError</code> outputs an empty list, which signifies that the call wasn't patched. Can you suggest a fix to that?</p>
<p>What did I do to solve the issue:</p>
<ul>
<li>Read <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">"Where to patch"</a> paragraph of documentation. This led me to suspicion that <code>pytest</code> runs my tests in a weird way.</li>
<li>Tried to use <code>pytest-mock</code> but failed to figure out how to use it with <code>unittest.TestCase</code>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Okay, I clearly have done a bad research on this. There was no problem with <code>pytest</code> module. In order to fix the issue, I needed to patch <code>app.models.Talk</code>, not the strange <code>app.models.Talk.query.all</code>. After I patched the class, I simply added the properties I needed:</p>
<pre><code>    @patch('app.models.Talk')
def test_send_schedule(self, talk_class_mock):
    talk_mocks = []
    for talk_id in range(1, 6):
        talk_mock = MagicMock(id=talk_id, title=str(talk_id), speaker_facebook_id=1)
        talk_mocks.append(talk_mock)
    query_mock = MagicMock(all=MagicMock(return_value=talk_mocks))
    talk_class_mock.query = query_mock
    with vcr.use_cassette('vcr_cassettes/send_schedule.yaml'):
        response = messaging.send_schedule(self.access_token, self.user_id)

    self.assertTrue('recipient_id' in response)
    self.assertTrue('message_id' in response)
    self.assertEqual(response['recipient_id'], self.user_id)
</code></pre>
</div>
