<div class="post-text" itemprop="text">
<p>My Python3 utility has a function that doesn't work (unless it's placed within selected directories, where it can then run the non-python <code>pdflatex</code> scripts successfully).  I want to run the utility from a set location on any of the template.tex files I have, stored in various other locations. </p>
<p>The Python utility prompts the user to select a <code>pdflatex</code> template file from an absolute path using a tkinter.filedialog GUI, then runs the user's selected <code>pdflatex</code>script using, for example: <code>os.system("pdflatex /afullpath/a/b/c/mytemplate.tex")</code> </p>
<p>Python's <code>os.system</code> runs <code>pdflatex</code>, which then runs its <code>mytemplate.tex</code> script.  <code>mytemplate.tex</code> has numerous inputs written with relative paths like <code>./d/another.tex</code>.</p>
<p>So, the Python utility works fine as long as it's in the exact same path as  <code>/afullpath/a/b/c/mytemplate.tex</code> that the user selects.  Otherwise <code>pdflatex</code> can't finds its own input files.  <code>pdflatex</code> delivers an error message like: <code>! LaTeX Error: File ./d/another.tex not found</code> because the execution path is relative to the Python script and not the <code>pdflatex</code> script.</p>
<p>[<code>pdflatex</code> needs to use relative paths because the folders with its .tex files get moved around, as needed.]</p>
<p>I found the following similar case on Stack Overflow, but I don't think the answers are geared towards this situation: <a href="https://stackoverflow.com/questions/918154/relative-paths-in-python">Relative Paths In Python -- Stack Overflow</a></p>
</div>
<div class="post-text" itemprop="text">
<p>By referring to other files with relative paths like <code>./d/another.tex</code>, your <code>mytemplate.tex</code> file is assuming (and requiring) that <code>pdflatex</code> is only run on it from the same directory that <code>mytemplate.tex</code> is located in.  You thus need to satisfy this requirement by changing to the directory containing <code>mytemplate.tex</code> before calling <code>os.system</code>:</p>
<pre><code>input_file = '/afullpath/a/b/c/mytemplate.tex'
olddir = os.getcwd()
os.chdir(os.path.dirname(input_file))
os.system('pdflatex ' + input_file)
os.chdir(olddir)
</code></pre>
<p>Even better is to use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.call</code></a>, as it handles the change of directory for you and isn't vulnerable to shell quoting issues:</p>
<pre><code>subprocess.call(['pdflatex', input_file], cwd=os.path.dirname(input_file))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>subprocess.run</code> instead of <code>os.system</code> and pass in the <code>cwd</code> parameter as the directory of the latex script.</p>
<p>See the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> docs here, and look at the <code>cwd</code> parameter for <code>subprocess.Popen</code>.</p>
<p>Example:</p>
<pre><code>subprocess.run(["pdflatex", "/afullpath/a/b/c/mytemplate.tex"], cwd="/afullpath/a/b/c/")
</code></pre>
</div>
<span class="comment-copy">I don't think changing Python's own working directory is a good idea.</span>
