<div class="post-text" itemprop="text">
<p>I have python to generate a random code, in this case, "Lucy", and it prints as follows:</p>
<pre><code>L
Lu
Luc
Lucy
</code></pre>
<p>I don't understand how it works, can someone explain?</p>
<pre><code>import sys
mysteryString = sys.argv[1]
print("~ testing with mysteryString = {} ~".format(mysteryString))

#Above code was provided for me

charCount = ""
for mysteryChar in mysteryString:
    charCount = charCount + mysteryChar
    print(charCount)
</code></pre>
<p>Why is the charCount initialized outside the loop? Why does it print the characters the way it does?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why charCount is initialized outside of the loop is because of scope.</p>
<p>A variable defined in the main part of the body belongs to the "global" scope. This means that it can be accessed by anything else throughout the file.</p>
<p>But a variable that is defined inside a function/loop is "local" to that function. This means that it only exists and is accessible from the point at which it is defined until the end of the function.</p>
<p>When we use the assignment operator (=) inside a function, its default behavior is to create a new local variable â€“ unless a variable with the same name is already defined in the local scope.</p>
<p>So essentially, when we declare it inside of the loop as demonstrated below. It is re-initalizing the variable to = "" each time it loops through which is why it only prints out one character at a time. </p>
<p>I.e. </p>
<pre><code>"" + "L"
reintialize charCount = ""
"" + "U"
etc
</code></pre>
<p><strong>Variable declared outside loop:</strong></p>
<p><a href="https://i.stack.imgur.com/GRYYL.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/GRYYL.png"/></a></p>
<p><strong>Variable declared inside loop:</strong></p>
<p><a href="https://i.stack.imgur.com/2NFMA.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2NFMA.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>charCount = ""
for mysteryChar in mysteryString:
    charCount = charCount + mysteryChar
    print(charCount)
</code></pre>
<p>What this does is initialise a variable <code>charCount</code> which is your string. </p>
<p>Then we have a for loop. What this does is iterate through each letter of your string. </p>
<p>Then it will get the original string (which starts off blank) and adds a letter at a time.</p>
<p>Then print displays it. </p>
<p>The reason for declaring outside the loop is so that you can concatenation each letter to it.</p>
<p>Trying to do the <code>charCount = charCount + mysteryChar</code> when <code>charCount</code> doesn't exist will throw and error. So you create a blank string outside so that you can do this:</p>
<pre><code>"" + "L"  
"L" + "U"  
"LU" + "C"  
"LUC" + "Y"  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer">Python's Official Documentation - 8.3 The for Statement</a></p>
<blockquote>
<p>"The for statement is used to iterate over the elements of a sequence (such as a string, tuple or list)..."</p>
</blockquote>
<p>In your example of code, <code>"Lucy"</code> is the string. The string is the sequence. The characters that compose it (i.e. <code>"L", "u", "c", "y"</code>) are the "elements of a sequence."</p>
<p>I'm going to walk through your code line-by-line to see if it helps.</p>
<p>1.You assign <code>sys.argv[1]</code> to the variable <code>mysteryString</code>. Your <code>sys.argv[1]</code> is the string <code>"Lucy"</code>.</p>
<pre><code>mysteryString = sys.argv[1]
</code></pre>
<p>2.The program takes the variable <code>mysteryString</code>, formats the string with it, and prints the output.</p>
<pre><code>print("~ testing with mysteryString = {} ~".format(mysteryString))

Output: ~ testing with mysterString = Lucy ~
</code></pre>
<p>3.This line initializes the variable <code>charCount</code>. Note that it is empty.</p>
<pre><code>charCount = ""
</code></pre>
<p>4.This line marks the beginning of the for-statement (aka for-loop). The for-statement iterates (or "loops over") every element in the provided sequence. In order to loop over a sequence, you must assign each element in it to a variable. Here, that variable is <code>mysteryChar</code>. The first element of the sequence (i.e. the character <code>"L"</code>) is assigned to variable <code>mysteryChar</code>.</p>
<pre><code>for mysteryChar in mysteryString:
</code></pre>
<p>If it helps, you can think of what is happening at this point as:</p>
<pre><code>mysteryChar = "L"
</code></pre>
<p>5.This line does a couple of cool things. First, it takes the value of <code>charCount</code> and adds it to the value of <code>mysteryChar</code>. Second, it assigns the values of <code>charCount</code> and <code>mysteryChar</code> to <code>charCount</code>.</p>
<pre><code>    charCount = charCount + mysteryChar
</code></pre>
<p>Remember when in step 3, we assigned the variable <code>charCount</code> to an empty string?</p>
<pre><code>charCount = ""
</code></pre>
<p>After step 5 executes:</p>
<pre><code>charCount = "L"
</code></pre>
<p>6.This line prints <code>charCount</code>.</p>
<p>Code:</p>
<pre><code>print(charCount)
</code></pre>
<p>Output:</p>
<pre><code>L
</code></pre>
<p>7.Now, try to follow the code.</p>
<p>Code:</p>
<pre><code>charCount = ""
for mysteryChar in mysteryString:
    charCount = charCount + mysteryChar
    print(charCount)
</code></pre>
<p>Output:</p>
<pre><code>L
</code></pre>
<p>8.Continue to next iteration of the loop.</p>
<p>Code:</p>
<pre><code>mysterString = "Lucy"
# Note: Before the second iteration of the loop, charCount = "L"
# This is because in the first iteration of the loop,
# "L" was added &amp; assigned to the variable charCount
charCount = ""
for mysteryChar in mysteryString:
    charCount = charCount + mysteryChar
    print(charCount)
</code></pre>
<p>Output:</p>
<pre><code>Lu
</code></pre>
<p>9.Continue to the next iteration of the loop</p>
<p>Code:</p>
<pre><code>mysterString = "Lucy"
# Note: Before the third iteration of the loop, charCount = "Lu"
# This is because in the second iteration of the loop,
# "u" was added &amp; assigned to the variable charCount
# At that point, charCount = "Lu"
charCount = ""
for mysteryChar in mysteryString:
    charCount = charCount + mysteryChar
    print(charCount)
</code></pre>
<p>Output:</p>
<pre><code>Luc
</code></pre>
<p>10.This is all of the for-loop's output.</p>
<p>Output:</p>
<pre><code>L
Lu
Luc
Lucy
</code></pre>
<p>Question:</p>
<blockquote>
<p>"Why does it print the characters the way it does"</p>
</blockquote>
<p>The for-loop prints the characters the way it does because it loops over each element in the sequence individually.</p>
<p>First Iteration Output:</p>
<pre><code>L
</code></pre>
<p>Second Iteration Output:</p>
<pre><code>Lu
</code></pre>
<p>Third Iteration Output:</p>
<pre><code>Luc
</code></pre>
<p>Fourth Iteration Output:</p>
<pre><code>Lucy
</code></pre>
<p>I started working on learning python about a year ago, so this stuff is relatively new to me, too. Welcome critiques / corrections if my explanation is misinformed.</p>
</div>
<span class="comment-copy">If <code>charCount = ""</code> was done in the loop then only the current character would be printed.</span>
<span class="comment-copy">I suggest to to try visualising your code <a href="http://www.pythontutor.com/visualize.html#mode=edit" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Thank you Jonathan, I was banging my head on the desk over that for entirely too long this morning!</span>
<span class="comment-copy">Thank you JustCarty, that makes a lot of sense!</span>
<span class="comment-copy">This is awesome, thanks for breaking it down like that!</span>
<span class="comment-copy">No sweat; hope it gets you up and running again - stick with it!</span>
