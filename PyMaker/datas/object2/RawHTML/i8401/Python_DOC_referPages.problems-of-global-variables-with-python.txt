<div class="post-text" itemprop="text">
<p>I created a small program that shows a window and asks passwords, ids, to check if the user is saved in a database. If password is correct, then it affects <code>True</code> to a boolean named <code>mdp_valide</code> ('password_is_valid' in english) which was <code>False</code> before, and destroys the window of connexion. It's a function that changes that value, so I used a <code>global</code> statement at the top of the function. However, when it closes the window, the value <code>mdp_valide</code> is back to <code>False</code>
Here's some code to help you understand</p>
<p>First, the main program that will call the other function:</p>
<pre><code>while 1:
    mdp_valide, utilisateur_en_cours = fenetre_connection(False, None)
    print ('in the main', mdp_valide, utilisateur_en_cours)
    if not mdp_valide:
        sys.exit()
    else :
        lancer_messagerie(utilisateur_en_cours)
</code></pre>
<p>Then, the function which is not working:</p>
<pre><code>def fenetre_connection (mdp_val, utilisateur):
    mdp_valide = mdp_val
    utilisateur_en_cours = utilisateur

    root_co = Tk ()

    # .... Lots of stuff

    def verification():
        mdp_co = mot_de_passe.get()
        global mdp_valide
        global utilisateur_en_cours

        if mdp_co == recuperer_donnee_utilisateur (identifiant_utilisateur_co, 'mot_de_passe'): # check if the password is the one of the database

            print ('condition checked')
            mdp_valide = True
            utilisateur_en_cours = identifiant_utilisateur_co
            print ("before destroying : ", mdp_valide, utilisateur_en_cours)
            root_co.destroy()
            print ("after destroying : ", mdp_valide, utilisateur_en_cours)
        else:
            return 1

    Button(Frameboutons_co, text="Valider", font='Cambria', command = verification).pack(side=RIGHT) #Bouton qui verifie la validité du pseudo et du mot de passe


    root_co.mainloop()

    print ('before return : ', mdp_valide)

    return mdp_valide
</code></pre>
<p>Test :</p>
<pre><code>before destroying:  True guil23
after destroying :  True guil23
before return :  False None
in the main : False None
</code></pre>
<p>The problem is here : the function verification () does change the value of mdp_valide into <code>True</code>, but after returning the value, it's back to <code>False</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that in <code>fenetre_connection</code>, <code>mdp_valide</code> is not global. So it is a local variable. Then in <code>verification</code>, you use <code>global mdp_valide</code>, so that one is a global variable.</p>
<p>When <code>verification</code> finishes, you return the local variable from <code>fenetre_connection</code>.</p>
<p>In python 3 you can use <code>nonlocal</code>: <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement</a></p>
<p>In python 2, you can declare <code>mdp_valide</code> as global in <code>fenetre_connection</code> so that both variables are in the global scope, and therefore are the same</p>
</div>
<span class="comment-copy">I don't see <code>global mdp_valide</code> in the function <code>fenetre_connection</code>. That might be your problem.</span>
<span class="comment-copy">Er I removed it, sorry. But it was in the original post. I  put it back</span>
<span class="comment-copy">Actually, it was already there, but you might habe been mistaken by the wrong indentation. I corrected it</span>
<span class="comment-copy">Here is a shorter version that illustrate the problem: <a href="https://repl.it/HDdW" rel="nofollow noreferrer">repl.it/HDdW</a></span>
<span class="comment-copy">This is related: <a href="http://stackoverflow.com/questions/13099908/python-tkinter-return-value-from-function-used-in-command" title="python tkinter return value from function used in command">stackoverflow.com/questions/13099908/…</a></span>
<span class="comment-copy">Thanks, it seems to be working again. (I used the global because the nonlocal was a bit over complicated :) ).</span>
<span class="comment-copy">But still, I don't understand how is that possible. Is not global supposed to take the variable which is somewhere "above" ?</span>
<span class="comment-copy">@Guil23 - <code>global</code> does not mean "somewhere" above, but <i>specifically</i> at the module level.</span>
<span class="comment-copy">As I had understood, when you have : [Spacename1 : somevariable, [Spacename2]], and you want to access somevariable within Spacename2, using global gives you that access</span>
<span class="comment-copy">@Guil23 in your case, you had: a different <code>mdp_valide</code> in global and in <code>fenetre_connection</code> (local) (that would be connexion, btw). In <code>verification</code>, you are using the global one.</span>
