<div class="post-text" itemprop="text">
<p>I use Python 2.7 and I have a task to write a function that calculates factorial using multiple threads. I tried to do that using traditional recursive approach, like</p>
<pre><code>def factorial(n):
    if n &lt; 1:
        return 1
    else:
        return n * factorial(n - 1)
</code></pre>
<p>But it seems that this way doesn't suite for multithreading. Are there any ways to calculate factorial using multiple threads?</p>
</div>
<div class="post-text" itemprop="text">
<p>In multi-threading applications it is best to minimize the data dependencies that exists between the different threads.</p>
<p>In the recursive solution for factorials that you have mentioned it is hard to find calculations that do not depend on the results of other calculations.</p>
<p>A distinct approach would be to split the factorial in multiple parts.
For example, for two threads one could do something like this:</p>
<p><code>n! = [1 * 2 * 3 * .. * (n/2)] * [(n/2 + 1) * ... * n]</code></p>
<p>The first thread would calculate the value:</p>
<p><code>v1 = 1 * 2 * 3 * .. * (n/2)</code></p>
<p>The second thread would calculate:</p>
<p><code>v2 = (n/2 + 1) * ... * n</code></p>
<p>And afterwards, when both threads are finished, the main thread would compute <code>n! = v1 * v2</code>.</p>
<p>This can be generalized to use <code>k</code> threads by splitting the input factorial into <code>k</code> different parts instead of just two, as in the above example.</p>
</div>
<div class="post-text" itemprop="text">
<p>I really like <a href="https://stackoverflow.com/a/43274344/1025391">the idea presented in the other answer</a>.</p>
<p>When the factorial is <a href="https://stackoverflow.com/q/595374/1025391">computed as the product</a> of the numbers [1, n]:</p>
<pre><code>numbers = range(1,n+1)
</code></pre>
<p>You can produce the numbers to be processed by the workers using slicing. For example:</p>
<pre><code>slices = [numbers[i::nworkers] for i in range(nworkers)]
# using n = 10 and nworkers = 3, this produces:
# [[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]
</code></pre>
<p><a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.map" rel="nofollow noreferrer">Map</a> this to a <a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">process pool</a>, and then reduce the results of these products to get your final solution.</p>
<p>Don't use the <a href="https://docs.python.org/2/library/threading.html#module-threading" rel="nofollow noreferrer">threading</a> module to implement this. This is a CPU bound task, that would be blocked by the <a href="https://docs.python.org/2/glossary.html#term-global-interpreter-lock" rel="nofollow noreferrer">Global Interpreter Lock</a>. The <a href="https://docs.python.org/2/library/multiprocessing.html#introduction" rel="nofollow noreferrer">multiprocessing</a> module uses processes instead of threads to side-step this.</p>
</div>
<div class="post-text" itemprop="text">
<p>A factorial is just a multiplication of a sequence of numbers. Since multiplication is <a href="https://en.wikipedia.org/wiki/Associative_property" rel="nofollow noreferrer">associative</a>, you can multiply the numbers in any order. More specifically, you can split the sequence into any number of parts any way you like, multiply the parts independently, then combine the results.</p>
<p>Due to CPython's <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">GIL</a>, you'll probably end up running a single thread at a time but the essence of the task is perhaps to simply practice thread synchronization.</p>
<p><a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading.Thread</code></a> and <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer"><code>queue.Queue</code></a> look like the right tools for the job. I'll give you two examples of possible implementations:</p>
<ul>
<li>Create a single <code>Queue</code> and a number of <code>Thread</code> object, each of which would

<ul>
<li>multiply a predefined range of numbers, then</li>
<li>push the result into the queue.</li>
</ul></li>
<li>start the threads and wait for them to finish</li>
<li>in the main thread, multiply all the numbers in the queue</li>
</ul>
<p>Another, more interesting implementation is:</p>
<ul>
<li>push all the numbers to multiply into a <code>Queue</code></li>
<li><p>create a number of threads, each of which would</p>
<ul>
<li>start with an internal state of 1</li>
<li>take a number from the <code>Queue</code> if it can (i.e. without blocking)</li>
<li>multiply the state by it</li>
</ul></li>
<li><p>The interesting part here is how to proceed after the queue is empty:</p>
<ul>
<li>threads can simply push the result into some other <code>Queue</code> and quit, leaving it up to the main thread do the final multiplication after all the threads quit</li>
<li><p>instead, a thread may push the result back to the queue and quit. But then, you need to somehow make sure that not all threads quit before the final result is obtained (and pushed into the queue).</p>
<ul>
<li><p>one way to do this is to keep track in an interlocked counter how many partial results have been pushed to the queue and prevent a thread from quitting if it detects it is to process the last one:</p>
<pre><code>#at initialization
partial_results_lock = threading.Lock()
partial_results_left=&lt;number of threads&gt;

# in the thread, if the queue is empty
with partial_results_lock:
    queue.push(state)
    state=1
    partial_results_left-=1
    if partial_result_left!=0: return # after we start over and push
                                      #the final result, the counter will become -1
&lt;start over&gt;
</code></pre></li>
</ul></li>
</ul></li>
</ul>
</div>
<span class="comment-copy">What a weird task. Are there more specifics or did it just say "use threads"?</span>
<span class="comment-copy">have you checked this <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">wiki.python.org/moin/GlobalInterpreterLock</a> ?</span>
<span class="comment-copy">@timgeb <b>Here's the task itself, without changes:</b> Write a function that computes a large factorial using multiple threads</span>
<span class="comment-copy">@Surajano Maybe they simply want the students to practice synchronization.</span>
<span class="comment-copy">Your result will massively overflow before making any use of any threads.</span>
