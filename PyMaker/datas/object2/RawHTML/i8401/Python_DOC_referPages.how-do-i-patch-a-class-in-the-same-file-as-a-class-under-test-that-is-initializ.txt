<div class="post-text" itemprop="text">
<p>(Nota bene: This is heavily modified from the original question, to include details I erroneously elided.)</p>
<p>This is the (summarized) file (<code>common.py</code>) I'm testing. It contains a decorator (derived from the <a href="https://pypi.python.org/pypi/Decorum" rel="nofollow noreferrer"><code>Decorum</code> library</a>) that calls a class method on another object(<code>A</code>): I want to patch out <code>A</code>, because that code makes an external call I'm not testing.</p>
<pre><code>from decorum import Decorum


class A:
    @classmethod
    def c(cls):
        pass


class ClassyDecorum(Decorum):
    """Hack to allow decorated instance methods of a class object to run with decorators.
    Replace this once Decorum 1.0.4+ comes out.
    """

    def __get__(self, instance, owner):
        from functools import partial
        return partial(self.call, instance)


class B(Decorum):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def init(self, *args, **kwargs):
        A.c()
        return super().init(*args, **kwargs)
</code></pre>
<p>I'd like to <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>@patch</code></a> class <code>A</code> in my unittest, to isolate and check <code>B.d()</code>'s functionality. This is my unittest (located in <code>test/test_common.py</code>):</p>
<pre><code>class BDecoratedClass(MagicMock):

    @B
    def dummy_func(self):
        return "Success"

class TestB(TestCase):
    @patch('unittest_experiment.A', autospec=True)
    def test_d(self, mock_a):
        b = BDecoratedClass()
        b.dummy_func()
        mock_a.c.assert_called_once_with()  # Fails
</code></pre>
<p>Debugging the above, I see that <code>A</code> is never actually mocked: the code proceeds into <code>A</code>'s code, so it makes sense that <code>mock_a</code> is never called, and thus the assertion fails. However, I'd like to properly monkey patch <code>A</code>. This approach works if I'm monkey patching an import that exists in <code>common.py</code>, but apparently not if the class is defined there?</p>
<p>Note that I think this is likely an issue of <em>where</em> I'm patching, that is <code>@patch('common.A', autospec=True)</code> should more likely be something like <code>@patch('where.python.actually.finds.A.when.B.calls.A', autospec=True)</code>. But I'm very unclear on how to determine if that is the case, and if so, what the correct path is. For instance, <code>@patch('BDecorated.common.A', autospec=True)</code> does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to <a href="https://stackoverflow.com/users/2357112/user2357112">@user2357112</a>, I arrived at this solution. Caveat: I don't know if this is standard or 'best' practice, but it seems to work.</p>
<p>First, move the <code>BDecoratedClass</code> to it's own file in <code>test/dummy.py</code>. Then change the test to this:</p>
<pre><code>class TestB(TestCase):
    @patch('common.A', autospec=True)
    def test_d(self, mock_a):
        from test.dummy import BDecoratedClass

        b = BDecoratedClass()
        b.dummy_func()
        mock_a.c.assert_called_once_with()  # Succeeds
</code></pre>
<p>This forces the patch to execute prior to the import of the dummy class being decorated. It's a little weird because the import is inside the function, but for a test that seems fine.</p>
<p><em>Bigger Caveat</em>:</p>
<p>This only works for the first test that imports something from the module where, in this case <code>BDecoratedClass</code> imports from. At that juncture everything else in the class has been loaded and cannot be patched.</p>
</div>
<span class="comment-copy">@wim The original sample code was too simplified. My bad. I've updated with an appropriate minimal, testable, verifiable example.</span>
<span class="comment-copy">This sounds like you've got some sort of import weirdness you're not showing us. For example, if <code>A</code> is actually defined in a different file and <code>from</code> imported, or if you've made one of the common mistakes with packages and ended up with the same file getting imported as two modules.</span>
<span class="comment-copy">What is <code>b.d</code>? I don't see any such method.</span>
<span class="comment-copy">@user2357112 I've replicated the exact example above: the classes are in the files as indicated. I agree, though, that it appears the module being mocked is 'somewhere different' than the module being called in <code>init()</code>.</span>
<span class="comment-copy">Unfortunately, I don't.</span>
