<div class="post-text" itemprop="text">
<p>I was just looking around the function (hypernym_distances()) and when I saw the result of all the possible hypernyms there were two "entity.n.01" elements with different distances,what is the reason for it ? could anyone please explain about this?</p>
<p>In Python:</p>
<blockquote>
<p><code>print([{i[0] : i[1]} for i in wn.synset('person.n.01').hypernym_distances()])</code></p>
</blockquote>
<p>This above code will display all hypernyms that lead to final term 'entity' is displayed.</p>
<p>The output is :</p>
<blockquote>
<p>[{Synset('entity.n.01'): 3}, {Synset('object.n.01'): 4}, {Synset('physical_entity.n.01'): 5}, {Synset('organism.n.01'): 1}, {Synset('person.n.01'): 0}, {Synset('entity.n.01'): 6}, {Synset('living_thing.n.01'): 2}, {Synset('physical_entity.n.01'): 2}, {Synset('causal_agent.n.01'): 1}, {Synset('whole.n.02'): 3}]</p>
</blockquote>
<p>This is a name-value pair containing the synset which is one of the hypernym of the the specified word.</p>
<p>Could anyone explain what is the reason for the appearing of the 'entity.n.01' two times in the output.</p>
<p><strong>{Synset('entity.n.01'): 6}</strong></p>
<p><strong>{Synset('entity.n.01'): 3}</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>When code is obtuse, break them down.</p>
<p>Also, try not to use one-liner, they usually have no computational speed ups other than just how fast you can type them.</p>
<h1>Know what you're iterating through</h1>
<p>So let's break the down.</p>
<p>In the complicated print of a list comprehension that creates a dictionary for every element the list iteration, we see:</p>
<pre><code>print([{i[0] : i[1]} for i in wn.synset('person.n.01').hypernym_distances()])
</code></pre>
<p>It looks like the loop itself can be simplified. First set a variable to keep the synset. (I assume that you would want the same operation on several synsets instead of only using it only on <code>person.n.01</code>):</p>
<pre><code>person = wn.synset('person.n.01')
</code></pre>
<p>Now let's see what <code>person.hypernym_distances()</code> returns:</p>
<pre><code>&gt;&gt;&gt; person.hypernym_distances()
{(Synset('person.n.01'), 0), (Synset('organism.n.01'), 1), (Synset('whole.n.02'), 3), (Synset('physical_entity.n.01'), 5), (Synset('causal_agent.n.01'), 1), (Synset('entity.n.01'), 3), (Synset('living_thing.n.01'), 2), (Synset('physical_entity.n.01'), 2), (Synset('entity.n.01'), 6), (Synset('object.n.01'), 4)}
</code></pre>
<p>The data structure of <code>person.hypernym_distances()</code> is already a set of tuple where the first element is the hypernym and the second element is the distance. And <code>Synset('entity.n.01')</code> should only occur once in <code>person.hypernym_distances()</code> since it's <code>set</code> type.</p>
<h1>Unpacking iterable of tuples/iterables in a loop</h1>
<p>When iterating through a tuple, you can easily "unpack" it (see <a href="https://stackoverflow.com/questions/7558908/unpacking-a-list-tuple-of-pairs-into-two-lists-tuples">Unpacking a list / tuple of pairs into two lists / tuples</a> and <a href="https://stackoverflow.com/questions/1663807/how-can-i-iterate-through-two-lists-in-parallel-in-python">How can I iterate through two lists in parallel?</a>) </p>
<pre><code> &gt;&gt;&gt; from nltk.corpus import wordnet as wn
&gt;&gt;&gt; wn.synset('person.n.01')
Synset('person.n.01')
&gt;&gt;&gt; person = wn.synset('person.n.01')
&gt;&gt;&gt; person.hypernym_distances()
{(Synset('person.n.01'), 0), (Synset('organism.n.01'), 1), (Synset('whole.n.02'), 3), (Synset('physical_entity.n.01'), 5), (Synset('causal_agent.n.01'), 1), (Synset('entity.n.01'), 3), (Synset('living_thing.n.01'), 2), (Synset('physical_entity.n.01'), 2), (Synset('entity.n.01'), 6), (Synset('object.n.01'), 4)}
&gt;&gt;&gt; for ss, count in person.hypernym_distances():
...     print (ss,'\t', count)
... 
Synset('person.n.01')    0
Synset('organism.n.01')      1
Synset('whole.n.02')     3
Synset('physical_entity.n.01')   5
Synset('causal_agent.n.01')      1
Synset('entity.n.01')    3
Synset('living_thing.n.01')      2
Synset('physical_entity.n.01')   2
Synset('entity.n.01')    6
Synset('object.n.01')    4
</code></pre>
<p>By iterating through the list of tuples in the above way you avoid the ugly <code>(i[0], i[1]) for i in iterable_of_tuples</code> syntax. Instead do <code>(a,b) for a,b in iterable_of_tuples</code>.</p>
<h1>List vs Dict comprehension</h1>
<p>It seems like you are trying to put the tuples from <code>person.hypernym_distances()</code> into a dictionary where the key is the synset and the value is the count. </p>
<p>I guess the mistake comes when you're tripped between <code>list comprehension</code> and <code>dictionary comprehension</code>. There isn't a need to create a new dictionary for every element in <code>person.hypernym_distances()</code>. Instead, I think the dictionary comprehension is what you're looking for, i.e.:</p>
<pre><code>&gt;&gt;&gt; {ss:count for ss, count in person.hypernym_distances()}
{Synset('object.n.01'): 4, Synset('whole.n.02'): 3, Synset('living_thing.n.01'): 2, Synset('organism.n.01'): 1, Synset('entity.n.01'): 6, Synset('person.n.01'): 0, Synset('causal_agent.n.01'): 1, Synset('physical_entity.n.01'): 2}
</code></pre>
<h1>Casting list of tuples into dictionary</h1>
<p>Actually, if the dictionary above is what you want given an iterable of tuples with 2 items per tuple, casting the iterable into a dictionary would automatically set the first item in the tuple as the key and the second as the value:</p>
<pre><code>&gt;&gt;&gt; dict(person.hypernym_distances())
{Synset('object.n.01'): 4, Synset('whole.n.02'): 3, Synset('living_thing.n.01'): 2, Synset('organism.n.01'): 1, Synset('entity.n.01'): 6, Synset('person.n.01'): 0, Synset('causal_agent.n.01'): 1, Synset('physical_entity.n.01'): 2}
</code></pre>
<h1>See also</h1>
<p>There're high performance containers data structures in native python that can handle these, they come with nifty functions too. See <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html</a></p>
</div>
<span class="comment-copy">Welcome to StackOverflow, please take a look at <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a>.  Could you format your code and rephrase your question? It's unclear what you're asking about?</span>
<span class="comment-copy">Ok sure :) !@alvas</span>
