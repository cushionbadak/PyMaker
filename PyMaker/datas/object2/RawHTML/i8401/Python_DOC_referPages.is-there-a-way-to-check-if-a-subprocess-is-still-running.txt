<div class="post-text" itemprop="text">
<p>I'm launching a number of subprocesses with subprocess.Popen in Python.
I'd like to check whether one such process has completed. I've found two ways of checking the status of a subprocess, but both seem to force the process to complete.
One is using process.communicate() and printing the returncode, as explained <a href="https://stackoverflow.com/questions/14043030/checking-status-of-process-with-subprocess-popen-in-python">here</a>.
Another is simply calling process.wait() and checking that it returns 0.</p>
<p>Is there a way to check if a process is still running without waiting for it to complete if it is?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Ouestion</strong>: ... a way to check if a process is still running ...  </p>
</blockquote>
<p>You can do it for instance:  </p>
<pre><code>p = subprocess.Popen(...
"""
A None value indicates that the process hasn't terminated yet.
"""
poll = p.poll()
if poll == None:
  # p.subprocess is alive
</code></pre>
<p><a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="noreferrer">Python Â» 3.6.1 Documentation popen-objects</a> </p>
<p><strong><em>Tested with Python:3.4.2</em></strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>Doing the </p>
<pre><code>myProcessIsRunning = poll() is None 
</code></pre>
<p>As suggested by the main answer, is the recommended way and the simplest way to check if a process running. (and it works in jython as well)</p>
<p>If you do not have the process instance in hand to check it.
Then use the operating system TaskList / Ps processes.</p>
<p>On windows, my command will look as follows:</p>
<pre><code>filterByPid = "PID eq %s" % pid
        pidStr = str(pid)
        commandArguments = ['cmd', '/c', "tasklist", "/FI", filterByPid, "|", "findstr",  pidStr ]
</code></pre>
<p>This is essentially doing the same thing as the following command line:</p>
<pre><code>cmd /c "tasklist /FI "PID eq 55588" | findstr 55588"
</code></pre>
<p>And on linux, I do exactly the same using the:</p>
<pre><code>pidStr = str(pid)
commandArguments = ['ps', '-p', pidStr ]
</code></pre>
<p>The ps command will already be returning error code 0 / 1 depending on whether the process is found. While on windows you need the find string command.</p>
<p>This is the same approach that is discussed on the followig stack overflow thread:</p>
<p><a href="https://stackoverflow.com/questions/21460775/verify-if-a-process-is-running-using-its-pid-in-java">Verify if a process is running using its PID in JAVA</a></p>
<p>NOTE:
If you use this approach, remeber to wrap your command call in<br/>
    try:
      foundRunningProcess = subprocess.check_output(argumentsArray, **kwargs)
      return True
    except Exception as err:
      return False</p>
<p>Note, be careful if you are developing with VS Code and using pure Python and Jython.
On my environment, I was under the illusion that the poll()  method did not work because a process that I suspected that must have ended was indeed running.
This process had launched Wildfly. And after I had asked for wildfly to stop, the shell was still waiting for user to  "Press any key to continue . . .".</p>
<p>In order to finish off this process, in pure python the following code was working:</p>
<pre><code>process.stdin.write(os.linesep)
</code></pre>
<p>On jython, I had to fix this code to look as follows:</p>
<pre><code>print &gt;&gt;process.stdin, os.linesep
</code></pre>
<p>And with this difference the process did indeed finish.
And the jython.poll() started telling me that the process is indeed finished.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use subprocess.check_output to have a look at your output.</p>
<p>Try this code:</p>
<pre><code>import subprocess
subprocess.check_output(['your command here'], shell=True, stderr=subprocess.STDOUT)
</code></pre>
<p>Hope this helped!</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.poll" rel="nofollow noreferrer"><code>Popen.poll()</code></a>?</span>
<span class="comment-copy">@asongtoruin that prints None, even when the process is finished.</span>
<span class="comment-copy">It should stop printing <code>None</code> once the process is finished. How are you calling your subprocess?</span>
<span class="comment-copy">subprocess.Popen(["python", scriptname], stdout = open(os.devnull, 'w'))</span>
<span class="comment-copy">I can do p.poll(). This returns None even after the process is done. I know this because the script I call produces an output file which appears, and still this returns None. Also, I can print p.wait() which gives 0, but printing p.poll() afterwards still gives None.</span>
<span class="comment-copy">Semantics, but I believe <code>if poll is None</code> is the preferred way of writing it.</span>
<span class="comment-copy">@asong: Please explain the difference <code>is</code> and <code>==</code>, sometimes dealing with <code>None</code> will not behaving as expected.</span>
<span class="comment-copy">Argh, sorry, I had made a mistake and used poll on a new process just after creating it, rather than on an old one. p.poll() is indeed the way to do it (None while it's running, 0 when it completes successfully).</span>
<span class="comment-copy">It Also Works With Python 2.7.10</span>
