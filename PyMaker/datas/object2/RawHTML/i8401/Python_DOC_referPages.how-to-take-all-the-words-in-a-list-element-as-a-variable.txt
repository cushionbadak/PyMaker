<div class="post-text" itemprop="text">
<p>I have the following program, in which I am trying to pass a list of elements to consecutive Google searches:</p>
<pre><code>search_terms = ['Telejob (ETH)', 'Luisa da Silva','The CERN Recruitment Services']
for el in search_terms:
    webpage = 'http://google.com/search?q='+el)
    print('xxxxxxxxxxxxxxxxxxx')
    print(webpage)
</code></pre>
<p>Unfortunately my program is not taking ALL the words in each list item, but taking only the first one, giving me this output:</p>
<pre><code>http://google.com/search?q=Telejob (ETH)
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=Luisa da Silva
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=The CERN Recruitment Services
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=The Swiss National Science Foundation
</code></pre>
<p>Altough you can see the whole item with every word being added to the search above, when I verify the link, it is going concatenating as element ONLY the first word of each item, as such:</p>
<pre><code>http://google.com/search?q=Telejob
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=Luisa
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=The
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=The
</code></pre>
<p>What am I doing wrong and what's the solution to concatenate ALL the words in each list item to the google search?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>This line:</p>
<pre><code>webpage = 'http://google.com/search?q='+el)
</code></pre>
<p>should be split and joined with a %20 joiner:</p>
<pre><code>webpage = 'http://google.com/search?q='+'%20'.join(el.split()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer">urllib.parse.urlencode</a> in python3. For python2 you can use <a href="https://docs.python.org/2/library/urllib.html#urllib.urlencode" rel="nofollow noreferrer">urllib.urlencode</a>.</p>
<pre><code>import urllib

search_terms = ['Telejob (ETH)', 'Luisa da Silva','The CERN Recruitment Services']
for el in search_terms:
    query = urllib.parse.urlencode({'q': el})  # urllib.urlencode({'q': el})
    webpage = 'http://google.com/search?{}'.format(query)
    print('xxxxxxxxxxxxxxxxxxx')
    print(webpage)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Neither of these answers address the base issue: you need to encode the entire string as a url.</p>
<p>I chose <a href="https://docs.python.org/2/library/urllib.html#urllib.quote" rel="nofollow noreferrer"><code>urllib.quote()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; for term in search_terms:
    print urllib.quote(term)
Telejob%20%28ETH%29
Luisa%20da%20Silva
The%20CERN%20Recruitment%20Services
</code></pre>
<p>Notice the <code>()</code> are also encoded, as will any other strange characters that might bork your query.</p>
<p>In your case, it would be: </p>
<pre><code>webpage = 'http://google.com/search?q=' + urllib.quote(el))
</code></pre>
<p>the equivalent in Py3:</p>
<pre><code>from urllib import parse
for term in search_terms:
    print(parse.quote(term))
</code></pre>
<p>so</p>
<pre><code>webpage = 'http://google.com/search?q=' + parse.quote(el))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The thing is that URLs need to be percent-encoded, there are characters with special meaning in URLs, for example:</p>
<ul>
<li><code>#</code>: goes to a certain position in the page</li>
<li><code>/</code>: I think you know what this one does...</li>
</ul>
<p>You should use <code>quote()</code> to fix that, and just remember that:</p>
<ul>
<li><code>urllib.quote()</code> is for Python2</li>
<li><code>url.parse.quote()</code> is for Python3</li>
</ul>
<p>Here are some examples for Python3:</p>
<pre class="lang-python prettyprint-override"><code>from urllib.parse import quote


quote('/bars/will/stay/intact')
#'/bars/will/stay/intact'

quote('/bars/wont/stay/intact', safe='')
#'%2Fbars%2Fwont%2Fstay%2Fintact' #Actually, everything will be encoded here

quote('()ñ´ ç')
#'%28%29%C3%B1%C2%B4%20%C3%A7'
</code></pre>
<p>So you code is now:</p>
<pre><code>search_terms = ['Telejob (ETH)', 'Luisa da Silva','The CERN Recruitment Services']
for el in search_terms:
    webpage = 'http://google.com/search?q='+quote(el)
    print('xxxxxxxxxxxxxxxxxxx')
    print(webpage)
</code></pre>
<p>As <code>search_terms</code> could include other characters that won't be escaped by <code>quote('something')</code>, you'll have to use its safe argument:</p>
<pre><code>search_terms = ['Telejob (ETH)', 'Luisa da Silva','The CERN Recruitment Services']
for el in search_terms:
    webpage = 'http://google.com/search?q='+quote(el, safe='')
    print('xxxxxxxxxxxxxxxxxxx')
    print(webpage)
</code></pre>
<p>This last one, outputs:</p>
<pre><code>xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=Telejob%20%28ETH%29
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=Luisa%20da%20Silva
xxxxxxxxxxxxxxxxxxx
http://google.com/search?q=The%20CERN%20Recruitment%20Services
</code></pre>
<p>I would suggest you to see: <a href="https://docs.python.org/3/library/urllib.parse.html#url-quoting" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.parse.html#url-quoting</a> for further information (See? a <code>#</code> character!)</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe your problem is with url-encoding.</p>
<p>To allow spaces in the URLs they are place by '%20'</p>
<p>Try changing your links to be like</p>
<p><a href="https://www.google.com/search?q=The%20CERN%20Recruitment%20Services" rel="nofollow noreferrer">https://www.google.com/search?q=The%20CERN%20Recruitment%20Services</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Google queries have the format <strong><a href="https://www.google.com/search?q=keyword_1+...+keyword_N" rel="nofollow noreferrer">https://www.google.com/search?q=keyword_1+...+keyword_N</a></strong> so you should format your query like so:</p>
<pre><code>search_terms = ["Telejob (ETH)", "Luisa da Silva","The CERN Recruitment Services"]
for search_term in search_terms:
    query = "+".join(search_term.split())
    url = "http://google.com/search?q=" + query
</code></pre>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/19353368/passing-string-variable-with-spaces">here</a>. Different language, same problem, same solution.</span>
<span class="comment-copy">I am new. What's the disadvantage of using this method over urllib from Evans Murithi above?</span>
<span class="comment-copy">My solution specifically deals with spaces. It has less coverage than the URL lib solution, but doesn't require an import... I'm just answering the question directly without much more context... either answer could be right depending on the needs of the asker.</span>
<span class="comment-copy">I am new. What's the advantage of using this method over the joint method described by JacobIRR below?</span>
<span class="comment-copy">Lets say you have special characters <code>ñ´ç</code> in your string, the use of concatenation <code>+</code> will not encode it. <code>urllib</code> will encode it to <code>q=%C3%B1%C2%B4%C3%A7</code></span>
<span class="comment-copy">Traceback (most recent call last):   File "C:/Users/SK/PycharmProjects/untitled/another_temperase.py", line 13, in &lt;module&gt;     print(urllib.quote(el)) AttributeError: module 'urllib' has no attribute 'quote'</span>
<span class="comment-copy">@skeitel for Py3, you'll need to <code>from urllib import parse</code> and use <code>parse.quote()</code> instead or use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer">urllib.parse.urlencode()</a>, as Evans Murithi explained</span>
<span class="comment-copy">@skeitel The thing is that in Python 3 it's not <code>urllib.quote()</code>, but <code>url.parse.urlencode()</code></span>
<span class="comment-copy">Although <code>urllib.parse.quote()</code> still will work in Py3... I'll update</span>
<span class="comment-copy">My bad, I meant <code>urllib.parse.quote()</code> and I got confused</span>
<span class="comment-copy">Unicode-encoding? I think you mean URL-encoding</span>
