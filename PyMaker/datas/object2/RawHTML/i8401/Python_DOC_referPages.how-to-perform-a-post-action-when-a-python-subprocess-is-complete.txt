<div class="post-text" itemprop="text">
<p>I have a python script that creates a subprocess to run indexing operations (logstash to elasticsearch).</p>
<p>the code snippet is as follows,</p>
<pre><code>process = subprocess.Popen([logstash, '-f', sample.conf],
                                   stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</code></pre>
<p>I do not call process.wait(), as the subprocess I'm creating needs to run independent of the rest of the script. </p>
<p>But I do have to update the database record when the subprocess is complete. The indexing operation that I am running does not allow me to create a post job call that will allow me to update the database.</p>
<p>How can I handle this with python subprocess? I do store the PIDs of the jobs in a text file, but I'd like to have a trigger in place that knows when the subprocess is complete to execute the next script. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you appear to stash the <code>process</code> variable somewhere, later you can check its <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode" rel="nofollow noreferrer"><code>returncode</code> attribute</a> after calling its <code>poll</code> method.</p>
<p>If the process has completed then its <code>returncode</code> value won't be <code>None</code> and you can update your database.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create your process in a thread. You can <code>wait</code> from the thread, so you get the output, and it's non-blocking </p>
<pre><code>import threading
import subprocess

def run_command():
    p = subprocess.Popen([logstash, '-f', sample.conf],
                               stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    output = p.stdout.read()
    p.wait()
    # now your command has ended, do whatever you like
</code></pre>
<p>and in your main thread:</p>
<pre><code>t = threading.Thread(target=run_command)
t.start()
# continue with main processing
</code></pre>
</div>
<span class="comment-copy">this is similar to what I have mentioned in my post, I store the PID in a text file with which I can check whether the subprocess is complete or not. checking the returncode will have to be done by executing another script later which is not I intend to do. I want to post action to be automated (should run as soon as the subprocess is complete).</span>
<span class="comment-copy">Are you saying you want your program to start a number of processes and then terminate? And that you want to run a database update after each subprocess terminates? Where do you imagine (i.e. in what process context) that the post-completion code would run?</span>
<span class="comment-copy">That's right, the main python script executes the indexing operations as subprocesses. "Where do you imagine (i.e. in what process context) that the post-completion code would run?" this is exactly where I'm stuck. The subprocess calls a certain program/file that cannot be modified, hence I cannot include the post-completion script to update the db there. I was hoping if the subprocess would have a callback, perhaps there is a more pythonic way to do this.</span>
<span class="comment-copy">Callbacks are no use unless the callback and the code performing the callback run in the same process. Your only hope is to define a shell script that runs the logstash and then performs a database update command that only runs on successful completion. Something like <code>logstash -f sample.conf &amp;&amp; update-the-database</code></span>
<span class="comment-copy">this looks like the write approach to me. but executing the above code throws an error "TypeError: 'Popen' object is not iterable". It looks like creating a subprocess inside a subprocess is not allowed. Have you successfully tested the above code?</span>
<span class="comment-copy">sorry, typo! fixed. I haven't tested that, but it's very similar to things I have written, which works.</span>
<span class="comment-copy">Thanks, the errors did disappear. However if I execute the above code, once the main thread code is complete the script hangs on the terminal until the subprocess is complete. How do I let the subprocess run and exit the main thread (as in make the command line active again)?</span>
