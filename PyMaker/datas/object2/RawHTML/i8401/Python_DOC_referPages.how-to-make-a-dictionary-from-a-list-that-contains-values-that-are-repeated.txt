<div class="post-text" itemprop="text">
<p>I am new to python and I have struggling for a while in trying to convert the following list into a dictionary. </p>
<pre><code>lst = ['AB_MK1230', 'MK12303', 86.17, 'AB_MK1230', 'MK12302', 89.99, 
'AB_MK1230', 'MK12301', 93.82, 'AB_MK1230', 'MK12301', 94.81, 'AB_MK1230', 
'MK12303', 87.5, 'AB_MK1230', 'MK12302', 94.67, 'AB_MK1230', 'MK12302', 90.32, 
'AB_MK1230',  'MK12303', 89.26, 'AB_MK1230',  'MK12301', 91.75,'AB_MK1230', 
'MK12302', 88.54, 'AB_MK1230', 'MK12303', 92.5,'AB_MK1230', 'MK12301', 93.49, 
'AB_MK1230', 'MK12301', 86.47,'AB_MK1230', 'MK12302', 84.79,'AB_MK1230', 
'MK12303', 86.57,'AB_MK1230', 'MK12301', 79.24,'AB_MK1230', 'MK12302', 80.34, 
'AB_MK1230', 'MK12303', 76.88] 
</code></pre>
<p>AB_MK1230 is the parent sector and MK12303, MK12301 and MK12302 are the child sectors. My output is to have a dictionary with the key of each child sector and the parent sector and float values as the values for that key, something like the following.</p>
<pre><code>dict = {MK12301: AB_MK1230, 93.82, 94.81, 91.75, 93.49, 86.47, 79.24
        MK12302: AB_MK1230, 89.99, 94.67, 90.32, 88.54, 84.79, 80.34
        MK12303: AB_MK1230, 86.17, 87.50, 89.26, 92.50, 86.57, 76.88 }
</code></pre>
<p>I have read some documentation from <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=dictionaries" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html?highlight=dictionaries</a> but I still can't figure out the solution.</p>
<p>How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>We iterate over the list, unpacking three items at a time in <code>(parent, child, value)</code>-order. Using <code>(parent, child)</code> as a key into a dictionary we then add the value into a <code>set</code>.</p>
<pre><code>import itertools
import collections

lst = ['AB_MK1230', 'MK12303', 86.17, 'AB_MK1230', 'MK12302', 89.99, 
'AB_MK1230', 'MK12301', 93.82, 'AB_MK1230', 'MK12301', 94.81, 'AB_MK1230', 
'MK12303', 87.5, 'AB_MK1230', 'MK12302', 94.67, 'AB_MK1230', 'MK12302', 90.32, 
'AB_MK1230',  'MK12303', 89.26, 'AB_MK1230',  'MK12301', 91.75,'AB_MK1230', 
'MK12302', 88.54, 'AB_MK1230', 'MK12303', 92.5,'AB_MK1230', 'MK12301', 93.49, 
'AB_MK1230', 'MK12301', 86.47,'AB_MK1230', 'MK12302', 84.79,'AB_MK1230', 
'MK12303', 86.57,'AB_MK1230', 'MK12301', 79.24,'AB_MK1230', 'MK12302', 80.34, 
'AB_MK1230', 'MK12303', 76.88]

d = collections.defaultdict(set)
for parent, child, value in itertools.zip_longest(*[iter(lst)]*3, fillvalue=None):
    d[(parent, child)].add(value)
</code></pre>
<p>d is now a dictionary like</p>
<pre><code>defaultdict(set,
            {('AB_MK1230', 'MK12301'): {79.24,
              86.47,
              91.75,
              93.49,
              93.82,
              94.81},
             ('AB_MK1230', 'MK12302'): {80.34,
              84.79,
              88.54,
              89.99,
              90.32,
              94.67},
             ('AB_MK1230', 'MK12303'): {76.88,
              86.17,
              86.57,
              87.5,
              89.26,
              92.5}})
</code></pre>
<p>It's not entirely clear how your final data structure is supposed to look like. If you only want <code>parent</code> as the top-level key, you can use a nested <code>defaultdict</code>...</p>
</div>
<span class="comment-copy"><a href="https://meta.stackoverflow.com/questions/274630/should-we-add-a-do-my-work-for-me-close-reason">What have you tried? What's the specific problem? (c)(r)(tm)</a></span>
<span class="comment-copy">0)your target <code>dict</code> is not a valid Python data structure 1) each iteration, read 3 items from a list and process them as necessary</span>
<span class="comment-copy">But does this same principle that you mentioned apply for 100K records where the records for parent and child vary? I did not put the code I tried because it did not simply get me to any clue to my final solution.</span>
<span class="comment-copy">Thanks a lot!!! This worked like a charm and this the solution that I was trying to achieve.</span>
<span class="comment-copy">One question I have on this data structure: Can it get the values in the order they appear? That is, {('AB_MK1230', 'MK12301'): 93.82, 94.81, 91.75, 93.49, 86.47, 79.24}, (...,...): {...}}</span>
<span class="comment-copy">Instead of <code>d = collections.defaultdict(set)</code> use <code>d = collections.defaultdict(list)</code> and instead of <code>d[(parent, child)].add(value)</code> use <code>d[(parent, child)].append(value)</code></span>
<span class="comment-copy">Your solution worked perfectly!</span>
