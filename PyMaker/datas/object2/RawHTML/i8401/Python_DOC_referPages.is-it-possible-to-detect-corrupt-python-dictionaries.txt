<div class="post-text" itemprop="text">
<p>I have a data file saved using the shelve module in python 2.7 which is somehow corrupt. I can load it with <code>db = shelve.open('file.db')</code> but when I call <code>len(db)</code> or even <code>bool(db)</code> it hangs, and I have to kill the process.</p>
<p>However, I am able to loop through the entire thing and create a new non-corrupt file: </p>
<pre><code>db = shelve.open('orig.db')
db2 = shelve.open('copy.db')
for k, v in db.items():
    db2[k] = v
db2.close() # copy.db will now be a fully working copy
</code></pre>
<p>The question is, how can I test the dict and avoid the hang?</p>
<p>BTW, I still have the original file, and it exhibits the same behaviour when copied to other machines, in case someone also wants to help me get to the bottom of what's actually wrong with the file in the first place!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm unaware of any inspection methods other than <a href="https://docs.python.org/3/library/dbm.html#dbm.whichdb" rel="nofollow noreferrer">dbm.whichdb()</a>. For debugging a possible <a href="https://stackoverflow.com/questions/23582489/python-pickle-protocol-choice">pickle protocol</a> mismatch in a manner that allows you to timeout long running tests maybe try:</p>
<pre><code>import shelve
import pickle
import dbm
import multiprocessing
import time
import psutil

def protocol_check():
    print('orig.db is', dbm.whichdb('orig.db'))
    print('copy.db is', dbm.whichdb('copy.db'))
    for p in range(pickle.HIGHEST_PROTOCOL + 1):
        print('trying protocol', p)
        db = shelve.open('orig.db', protocol=p)
        db2 = shelve.open('copy.db')
        try:
            for k, v in db.items():
                db2[k] = v
        finally:
            db2.close()
            db.close()
        print('great success on', p)

def terminate(grace_period=2):
    procs = psutil.Process().children()
    for p in procs:
        p.terminate()
    gone, still_alive = psutil.wait_procs(procs, timeout=grace_period)
    for p in still_alive:
        p.kill()

process = multiprocessing.Process(target=protocol_check)
process.start()
time.sleep(10)
terminate()
</code></pre>
</div>
<span class="comment-copy">Not sure on the inspection, maybe try opening with some different protocols <a href="http://stackoverflow.com/questions/23582489/python-pickle-protocol-choice" title="python pickle protocol choice">stackoverflow.com/questions/23582489/â€¦</a> also do it in a subprocess that you can time out</span>
<span class="comment-copy">unfortunately whichdb() returns 'dbhash' for both the working and corrupt dbs. also, whichdb is in whichdb module for python2.7. I like the idea about the timeout though.</span>
