<div class="post-text" itemprop="text">
<p>It seems like realpath() does not resolve symlink (not shortcut - *.lnk) in Windows. I found an open bug for python3 here: <a href="https://bugs.python.org/issue9949" rel="nofollow noreferrer">https://bugs.python.org/issue9949</a></p>
<p>Is there any workaround? I'm mostly interested in Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python function <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path.realpath()</code></a> returns the canonical path of the given path, eliminating simlinks.</p>
<p>On Windows 7, this function <a href="https://bugs.python.org/issue9949" rel="nofollow noreferrer">does not work as expected</a> as it fails to follow symbolic links (created with <a href="https://technet.microsoft.com/fr-fr/library/cc753194(v=ws.10).aspx" rel="nofollow noreferrer">mklink</a>. Since the bug has been opened for more than 7 years, I started looking for a workaround.</p>
<p>The solution I found was to replace</p>
<pre><code>realpath = os.path.realpath(path)
</code></pre>
<p>by</p>
<pre><code>realpath = path if not os.path.islink(path) else os.readlink(path)
</code></pre>
<p>Function <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer"><code>os.readlink()</code></a> does work correctly on Windows 7.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://pypi.org/project/jaraco.windows" rel="nofollow noreferrer">jaraco.windows project</a> supplies <code>jaraco.windows.filesystem.get_final_path</code> which may be what you're looking for. With the 3.9 release, it also has a <code>jaraco.windows.filesystem.backports</code> module, which presents the <code>realpath</code> function as proposed for that Python bug. Please give one or both of those functions a try and report back how it works.</p>
<p>If the <code>realpath</code> function works well for you, there is a <code>patch_os_module</code>, which as its name suggests, can patch the <code>os</code> module such that <code>os.path.realpath</code> has the behavior from the backport. At the time of this writing, it doesn't do that, but if that would be useful for your use-case, I'd be happy to add it.</p>
<p>Feel free to contribute to the project in Github. And please excuse the docs - they don't build properly on a Unix system such as RTD.</p>
</div>
<span class="comment-copy">Looks like the recommended approach is to delegate to Windows Shell, see <a href="http://stackoverflow.com/questions/397125/reading-the-target-of-a-lnk-file-in-python">Reading the target of a .lnk file in Python?</a> and maybe click through the links <a href="http://stackoverflow.com/q/6805881/699305">here</a>.</span>
<span class="comment-copy">This answer is about shortcuts (*.lnk files). But I'm looking for reading actual Windows symlinks. Windows command: <code>mklink</code></span>
<span class="comment-copy">I'm using Python 2</span>
<span class="comment-copy">Your best bet might be to look at one of the <a href="https://bugs.python.org/review/9949/patch/13878/51626" rel="nofollow noreferrer">patches</a> submitted for that bug (along with the context in the bug tracker) and see if you can pull that code into your own project. (Be aware of licensing issues.)</span>
<span class="comment-copy">How much of that patch do you need? If you just want to resolve a link whose target exists and is accessible to the current user, then you can use ctypes to call <code>CreateFile</code> and <code>GetFinalPathNameByHandle</code>, without too much effort.</span>
<span class="comment-copy">The workaround is not quite the same, because it will only follow a symlink for the full path - e.g. if <code>/foo</code> is a symlink to <code>/bar</code>, <code>realpath('/foo/qux')</code> would give you <code>'/bar/qux'</code> (where it works). It works well enough for many use cases, though.</span>
