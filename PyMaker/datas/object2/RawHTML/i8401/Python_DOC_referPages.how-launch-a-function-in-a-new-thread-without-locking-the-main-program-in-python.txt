<div class="post-text" itemprop="text">
<p>I'm trying to launch a function in a new thread because the function makes something not related to the main program. </p>
<p>I tried to do this with multiprocessing module as:</p>
<pre><code>import multiprocessing
import time

def mp_worker(a):
    #time.sleep(a)
    print('a:' +str(a))
    return



for k in range(5):
    p = multiprocessing.Process(target= mp_worker , args=(k,))
    p.start()
    print('keep going :' + str(k))
</code></pre>
<p>But I have a bunch of error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "C:\Anaconda3\lib\multiprocessing\spawn.py", line 106, in spawn_main
    exitcode = _main(fd)
  File "C:\Anaconda3\lib\multiprocessing\spawn.py", line 115, in _main
prepare(preparation_data)
  File "C:\Anaconda3\lib\multiprocessing\spawn.py", line 226, in prepare
_fixup_main_from_path(data['init_main_from_path'])
  File "C:\Anaconda3\lib\multiprocessing\spawn.py", line 278, in _fixup_main_from_path
run_name="__mp_main__")
  File "C:\Anaconda3\lib\runpy.py", line 254, in run_path
pkg_name=pkg_name, script_name=fname)
  File "C:\Anaconda3\lib\runpy.py", line 96, in _run_module_code
mod_name, mod_spec, pkg_name, script_name)
  File "C:\Anaconda3\lib\runpy.py", line 85, in _run_code
exec(code, run_globals)
  File "C:\Users\Maxime\PycharmProjects\NeuralMassModelSofware_Pyqt5\dj.py", line 14, in &lt;module&gt;
p.start()
  File "C:\Anaconda3\lib\multiprocessing\process.py", line 105, in start
self._popen = self._Popen(self)
  File "C:\Anaconda3\lib\multiprocessing\context.py", line 212, in _Popen
return _default_context.get_context().Process._Popen(process_obj)
  File "C:\Anaconda3\lib\multiprocessing\context.py", line 313, in _Popen
return Popen(process_obj)
  File "C:\Anaconda3\lib\multiprocessing\popen_spawn_win32.py", line 34, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "C:\Anaconda3\lib\multiprocessing\spawn.py", line 144, in get_preparation_data
_check_not_importing_main()
  File "C:\Anaconda3\lib\multiprocessing\spawn.py", line 137, in _check_not_importing_main
is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
    current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
    child processes and you have forgotten to use the proper idiom
    in the main module:

        if __name__ == '__main__':
            freeze_support()
            ...

    The "freeze_support()" line can be omitted if the program
    is not going to be frozen to produce an executable.
</code></pre>
<p>Someone knows how I can launch whatever function I want in a new thread and be sure that the main program is still running normally? I'm a little lost with multiprocessing, I admit that :)
I aim to launch some displays (graphical or print I don't know yet) for the user in new threads without interrupting the main program.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are doing isn't <code>multithreading</code>, it's <code>muliprocessing</code>.<br/>
Change. </p>
<pre><code>multiprocessing.Process(...
</code></pre>
<p>with.  </p>
<pre><code>threading.Thread(...   
</code></pre>
<p><strong>Python Â» 3.6.1 Documentation</strong>: <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer">threading.Thread</a><br/>
SO Q&amp;A: <a href="https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python">multiprocessing-vs-threading-python</a></p>
<p>Beside this, you can overcome the Error adding a <code>time.sleep(0.2)</code>after <code>start(...</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is what I am getting when running the code you have provided: </p>
<pre><code>python3.6 -u "multiprocessingError_Cg.py"
keep going :0
a:0
keep going :1
keep going :2
a:1
a:2
keep going :3
keep going :4
a:3
a:4
&gt;Exit code: 0
</code></pre>
<p>So the answer to your question is that you have to look for the cause of the trouble with multiprocessing elsewhere, but not in the section of code listed in your question. </p>
<p>Take a close look at what was provided in answers and comments <a href="https://stackoverflow.com/questions/43336019/how-to-limit-the-amount-of-time-a-function-can-run-for-add-a-timeout">here</a> - maybe it could help also in your case? </p>
<p>Here what was said in comments to one of the answers there: </p>
<p><code>Dave: Would this work if beBusyFor (in your case mp_worker) uses multiprocessing internally?</code></p>
<p><code>@Dave just try it out and report back here if it worked. Haven't tested such a case yet, so my opinion that it should work leaving some mess of processes with no parents doesn't matter here and therefore shouldn't be taken in consideration.</code></p>
<p><code>Dave: **No cigar ending child processes unfortunately** :(</code></p>
</div>
<span class="comment-copy">Thanks for your answer but it raise an error :  AttributeError: module 'multiprocessing' has no attribute 'Thread'</span>
<span class="comment-copy">@ymmx: Sorry, should read <code>threading.Thread(...</code></span>
<span class="comment-copy">Thanks that works now. I'm a bit confuse though. What is the major difference between those two modules. They seem so close to each other.</span>
<span class="comment-copy">Thanks for your answer. I've got python3.5. Do you think I need to upgrade python and multiprocessing package to face my issue? Still don't understand why this appends !!</span>
