<div class="post-text" itemprop="text">
<p>I am trying to do a profanity check test. The code I have written so far is</p>
<pre><code>import urllib.request  

def read_text ():
    file = open (r"C:\Users\Kashif\Downloads\abc.txt")
    file_print = file.read ()
    print (file_print)
    file.close ()
    check_profanity (file_print)

def check_profanity (file_print):
    connection = urllib.request.urlopen ("http://www.purgomalum.com/service/containsprofanity?text="+file_print)
    output = connection.read ()
    print ("The Output is "+output)
    connection.close ()
    read_text ()
</code></pre>
<p>But I get the error below</p>
<blockquote>
<p>urllib.error.HTTPError: HTTP Error 400: Bad Request</p>
</blockquote>
<p>I don't know what I am going wrong. </p>
<p>I am using Python 3.6.1</p>
</div>
<div class="post-text" itemprop="text">
<p>The HTTP error you're getting is usually a sign of something bad in the way you are requesting data to the server. According to the <a href="https://tools.ietf.org/html/rfc2616#section-10.4.1" rel="nofollow noreferrer">HTTP Spec</a>:</p>
<blockquote>
<p><strong>400 Bad Request</strong></p>
<p>The request could not be understood by the server due to malformed
  syntax. The client SHOULD NOT repeat the request without modifications</p>
</blockquote>
<p>In concrete in your example, the problem seems to be with the lack of URL encoding of the data you're sending in the URL. You should try using the method <code>quote_plus</code> from the <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus" rel="nofollow noreferrer">urllib.parse</a> module to make your request acceptable:</p>
<pre><code>from urllib.parse import quote_plus

...

encoded_file_print = quote_plus(file_print)
url = "http://www.purgomalum.com/service/containsprofanity?text=" + encoded_file_print
connection = urllib.request.urlopen(url)
</code></pre>
<p>If that doesn't work then the problem might be with the contents of your file. You can try it first with a simple example, to verify your script works and then try using the file's content afterwards.</p>
<p>Apart from the above, there's also a couple of other issues with your code:</p>
<ol>
<li>No spaces needed between methods and brackets: <code>file.close ()</code> or <code>def read_text ():</code> and so on.</li>
<li>Decode the content after reading it to convert bytes to a string: <code>output = connection.read().decode('utf-8')</code></li>
<li><p>The way you're calling the methods creates a circular dependency. <code>read_text</code> calls <code>check_profanity</code> that in the end calls <code>read_text</code> that calls <code>check_profanity</code>, etc. Remove the extra method calls and just use <code>return</code> to return the output of a method:</p>
<pre><code>content = read_text()
has_profanity = check_profanity(content)
print("has profanity? %s" % has_profanity)
</code></pre></li>
</ol>
</div>
<span class="comment-copy">you should include the stack trace from the error.</span>
<span class="comment-copy">Please also include the contents of abc. Probably there is some issues in the file itself.</span>
<span class="comment-copy">Thanks for helping me out, it works perfectly. I just have another question. I have seen this same program working perfectly in python 2.7. Are the changes you mentioned due to the change in version? I am completely beginner therefore I don't know much</span>
<span class="comment-copy">Hm I don't think so. The changes I made with using <code>quote_plus</code> were necessary for the request to be correctly sent to the server. I don't see how this could work differently on Python 2.7. If you have that code around send it and I can try it out</span>
