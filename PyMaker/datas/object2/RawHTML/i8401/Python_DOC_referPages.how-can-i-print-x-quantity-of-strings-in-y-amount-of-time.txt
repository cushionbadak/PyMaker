<div class="post-text" itemprop="text">
<p>Is really bothering me to try figure this out. I can explain myself:
I need for example, to print 5 strings per second, so in 1 second I need to print those 5 strings, and the next second another 5.
How can I divide the amount of time a loop (as I think it should be) runs in a second, so I can print the 5 strings in that time, and printed in equaly amount of time?</p>
<pre><code>["text1", "text2", "text3", "text4", "text5"]
</code></pre>
<p>each one printed in 200ms?</p>
<p>how can I control in a loop the time of each iteration?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time

start=time.time()    
for k in tablestrings:
    print k
    time.sleep(0.2)
</code></pre>
<p>will work fine, but might give you some problems if you're looking for high precision</p>
<pre><code>import time

start=time.time()    
for k in range(len(tablestrings)):
    release=False
    while not release:
        if time.time()&gt;start+0.2*k:
            release=True
    print tablestrings[k]
</code></pre>
<p>should derive less from the 1 print every 0.2 seconds rule</p>
</div>
<div class="post-text" itemprop="text">
<p>Try something like:</p>
<pre><code>import time

texts = ["text1", "text2", "text3", "text4", "text5"]

for text in texts:
  print(text)
  time.sleep(0.2)
</code></pre>
<p><a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">https://docs.python.org/2/library/time.html</a> for Python 2. </p>
<p><a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">https://docs.python.org/3/library/time.html</a> for Python 3.</p>
</div>
<span class="comment-copy">I'll try and let you know</span>
<span class="comment-copy">Your code now works well in the Python console. It works less will in an IPython console, probably due to buffering. To work there you should add a line to flush the output buffer <code>sys.stdout.flush()</code> just after the print statement. That does improve the printing but is not yet perfect.</span>
<span class="comment-copy">Thanks, in the end I just iterate on k integer and I call tablestrings[k]. Your suggestion was more elegant but since it seems to be a bit less universal I stick to my ugly habits.</span>
