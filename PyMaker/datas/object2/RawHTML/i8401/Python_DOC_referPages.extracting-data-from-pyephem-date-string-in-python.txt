<div class="post-text" itemprop="text">
<p>I want to extract the sunrise hour and if I do the following</p>
<pre><code>sun = ephem.Sun()
r1 = home.next_rising(sun)
print ("Visual sunrise %s" % r1)
risehr = r1[10:12]
print ("Rise Hour = %s" % risehr)
</code></pre>
<p>I got the error</p>
<pre><code>&gt;&gt;'ephem.Date' object has no attribute '__getitem__'
</code></pre>
<p>I can print the string <code>r1</code> but not extract from it (?)
I tried solutions from similar problem posts on extraction but couldn't make any progress, apologies if this appears to be a double post.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I understand your question you want to print only hour of sunrise. <code>r1</code> is object of <a href="http://rhodesmill.org/pyephem/date.html" rel="nofollow noreferrer">ephem.Date type</a>. You could make it with brute force</p>
<pre><code>...
risehr = str(r1)[10:12]
...
</code></pre>
<p>or you could convert <code>r1</code> object to <code>datetime</code>, and <code>datetime</code> to <code>str</code> representation</p>
<pre><code>...
risehr = r1.datetime().strftime('%H') 
...
</code></pre>
<p>or convert it to <code>tuple</code> first</p>
<pre><code>...
risehr = r1.tuple()[3]
...
</code></pre>
<p>All available options you could read at <a href="http://rhodesmill.org/pyephem/date.html" rel="nofollow noreferrer">this page</a> in section <code>Conversions</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>@kvorobiev answered the question of how to extract from a string representation of your data. But the other half of your question was the error: </p>
<p><code>'ephem.Date' object has no attribute '__getitem__'</code></p>
<p>According to the <a href="http://rhodesmill.org/pyephem/quick.html#transit-rising-setting" rel="nofollow noreferrer">PyEphem documentation</a> for the <code>next_rising()</code> function, </p>
<blockquote>
<p>If the search is successful, returns a Date value.</p>
</blockquote>
<p><a href="http://rhodesmill.org/pyephem/quick.html#dates" rel="nofollow noreferrer">Furthermore, <code>Date</code> objects have an important property</a>:</p>
<blockquote>
<p>Dates are stored and returned as floats. Only when printed, passed to str(), or formatted with '%s' does a date express itself as a string giving the calendar day and time.</p>
</blockquote>
<p>When you gave the command <code>risehr = r1[10:12]</code>, the Python interpreter attempted to get call <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">Date.<strong>getattr</strong>()</a> to get the fields from a Date object corresponding to the slice <code>10:12</code>. Without that method, slicing has no meaning to a Date object.</p>
<p>But all is not lost! You can still get the <code>Date</code> object's time information:</p>
<blockquote>
<p>Call .tuple() to split a date into its year, month, day, hour, minute, and second.</p>
</blockquote>
<p>You can then slice this tuple as needed to get the hour:</p>
<p><code>hour = r1.tuple()[3]</code></p>
<p>Or exhaustively:</p>
<p><code>year, month, day, hour, minute, second = r1.tuple()</code></p>
</div>
<span class="comment-copy">when you print it it's converted to a string, like <code>str(r1)</code>, do you want to take a slice of that? I.E. <code>str(r1)[10:12]</code></span>
<span class="comment-copy">where is the assignment statement for <code>home</code>?</span>
<span class="comment-copy">Sorry, 'home' is my lat/long def</span>
<span class="comment-copy">Many thanks. Brute force works fine, I'll try the more elegant method too.</span>
<span class="comment-copy">@Geo You are welcome)</span>
<span class="comment-copy">The tuple approach seems really neat. I've learnt a lot from all the helpful responses to my simple problem. Many thanks everyone for the very informative feedback.</span>
