<div class="post-text" itemprop="text">
<p>Is there any difference in performance between a one-liner like the one in the example below, or the for loop? Here's a snippet of code that I was using to do stuff:</p>
<pre><code># convert to integer, subtract 1, and change to 0 if number is &lt; 0
tile_ids =  map(lambda x: max(int(x)-1, 0), child[0].text.split(','))
</code></pre>
<p>Is it better to do that, or write out this:</p>
<pre><code>for tile_id in child[0].text.split(','):
    tile_id = int(tile_id) - 1
    if tile_id &lt; 0:
        tile_id = 0
</code></pre>
<p>Also, is there a reason to use one over the other?</p>
</div>
<div class="post-text" itemprop="text">
<p>For this specific case, you don't gain so much in terms of performance using a <code>map</code> instead of a for-loop. Probably, using the map is a bit worse than the latter approach, since you are implicitly using "extra-stuff" that, in this case, is not very useful.</p>
<p>The "map-approach" can be very useful when you have the capabilities to parallelize tasks. In that case you can surely achieve better performances than a plain for-loop.</p>
<p>I prefer the second version, thanks to readability. Another way is to use a list-comprehension:</p>
<p><code>title_ids = [max(int(x)-1,0) for x in child[0].text.split(',')]
</code></p>
</div>
<span class="comment-copy">Third option, the middle ground: <code>tile_ids = [max(int(x) - 1, 0) for x in child[0].text.split(',')]</code></span>
<span class="comment-copy">List comprehensions are faster. If they can fit on one line, use them over the <code>for</code> loop option, otherwise consider readability first and use the loop. <code>map()</code> with <code>lambda</code> is generally slower (lots of function frames created for all the map calls); use <code>map()</code> when you have a native function / method.</span>
<span class="comment-copy">You could find the difference in performance yourself using the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> module.  As for a reason to prefer one over the other, the readability of the second would be a good enough reason for me.</span>
<span class="comment-copy">Also bear in mind that while <code>map</code> returns a list in Python 2 it returns an iterator in Python 3, so if you want a list then you'd need to wrap it in a <code>list</code> call so it makes more sense to use a list comp. Also (as Martijn said), doing it with a list  comp (or traditional <code>for</code> loop) instead of <code>map</code> saves an extra level of function call on every item; Python function calls are relatively slow compared to C function calls.</span>
<span class="comment-copy">@PM2Ring I don't need a list, which is why I used map.</span>
