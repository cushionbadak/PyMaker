<div class="post-text" itemprop="text">
<p>I'm trying to decrypt a file with a gpg executable on a windows 2012 server. Currently the script accesses the 'try' block but then stays there indefinitely. The file is roughly 500mb in size so anything it should take &lt; 10min to decrypt. The longest I've let it run for is an hour. Here is the code for this:</p>
<pre><code># decrypt the pgp file
comm = (gpg + ' --batch --passphrase passphrase --homedir='+current_path
           +' -o ' + zip_name +' --decrypt ' + file_name)

try:
    subp = subprocess.check_call(comm, stdout=PIPE, stdin=PIPE, stderr=STDOUT)
    stdout_data, stderr_data = subp.communicate()
    print stdout_data, stderr_data
except subprocess.CalledProcessError as e:
    print e.output
    logger.update('Error', process, runtime=0, error=e)
    raise Exception('Error Decrypting File')
</code></pre>
<p>Not included, but the key has been imported.</p>
<p>Is there anything I can add/remove or do differently to 1) get a better idea of what's going on within the host system (the windows server) and 2) to not run indefinitely and report back useful information as to why it was running indefinitely.</p>
<p>Let me know if any clarification is needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>From python's documentation for <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_call" rel="nofollow noreferrer"><code>subprocess.check_call()</code></a>:</p>
<blockquote>
<p>Note: Do not use <code>stdout=PIPE</code> or <code>stderr=PIPE</code> with this function. The child process will block if it generates enough output to a pipe to fill up the OS pipe buffer as the pipes are not being read from.</p>
</blockquote>
<p>Considering you are trying to decrypt 500MB, I think it safe to say you will hit the pipe size limit. I suggest you to replace <code>PIPE</code> with an open file descriptor or an existing file object.</p>
<p>BTW, I am a bit surprised with the way you build your command line, it is my understanding that <code>subprocess.check_call</code> expects a list of strings, rather than a string itself.</p>
<pre><code>command = [gpg, "--batch", "--passphrase passphrase", "--homedir=current_path",
           "-o", "zip_name", "--decrypt", file_name]
</code></pre>
<p>Starting from version 3.3, a timeout option was added to many function of the <code>subprocess</code> module. You might find it useful to debug your issue.</p>
</div>
<span class="comment-copy">Maybe unrelated, by why do you have <code>stdin=PIPE</code> ? gpg may be waiting on something to be fed and just block.</span>
<span class="comment-copy">Also you should not have your whole commandline in one string, use the program name and individual arguments for everything. You'll run into argument parsing problems on the gpg side otherwise.</span>
<span class="comment-copy">You don't <i>have</i> to pass in a list, but it's decidedly an improvement here.  See also <a href="http://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess" title="actual meaning of shell true in subprocess">stackoverflow.com/questions/3172470/â€¦</a></span>
