<div class="post-text" itemprop="text">
<p>I'm trying to replace the for loop below by a map function,
I assume it must be something like map(inBetween, <code>input.split("\n")</code>) but when I do it my hours dictionary stays unchanged. I feel like it's not even entering the function. </p>
<p>Does someone know how to make it work? </p>
<pre><code>#!/usr/local/bin/python3.5

input='''5
1 8
2 3
4 23
4 6
2 23'''

hours = {}
for time in range(1,25):
    hours[time] = 0
def inBetween(line):
    print(line)
    current = int(line.split(" ")[0])
    while current &lt; int(line.split(" ")[1]):
        hours[current] +=1
        current += 1
for entree in range(1, int(input.split("\n")[0])+1):
        inBetween(input.split("\n")[entree])

print(hours)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As Willem Van Onsem already said in a comment, <code>map</code> is lazy in Python 3. Instead of applying the function to all items immediately and returning a list, as was the case in Python 2, <code>map</code> will return a generator instead which you need to iterate over in order to actually perform the transformation:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; def square(x):
        print('Calculating square of', x)
        return x * x

&gt;&gt;&gt; res = map(square, lst)
&gt;&gt;&gt; res
&lt;map object at 0x0000029C2E4B2CC0&gt;
</code></pre>
<p>As you can see, the function does not run, and <code>res</code> is some “map object” instead (which is the map generator). We have to iterate this generator first in order to actually generate the values and call the function:</p>
<pre><code>&gt;&gt;&gt; for x in res:
        print(x)

Calculating square of 1
1
Calculating square of 2
4
Calculating square of 3
9
</code></pre>
<p>If you want to get a list back, you can also just call <code>list()</code> on the result to immediately call the function for every element:</p>
<pre><code>&gt;&gt;&gt; list(map(square, lst))
Calculating square of 1
Calculating square of 2
Calculating square of 3
[1, 4, 9]
</code></pre>
<hr/>
<p>Note though, that your case is not really suited for <code>map</code>. As far as I can tell from your code and your input, the first line of your input is a single number that contains the amount of lines that follow which need to be processed.</p>
<p>So in your case, unless you want to actively ignore that first line (and just handle <em>every</em> line), you shouldn’t use <code>map</code> here.</p>
<p>However, you can make your code a lot simpler (and more efficient) by storing the results from those <code>split</code> calls. For example:</p>
<pre><code>lines = input.split('\n')
for i in range(1, int(lines[0]) + 1):
    inBetween(lines[i])
</code></pre>
<p>Here, you’re just splitting the input <em>once</em> instead of once on every iteration.</p>
<p>As for your <code>inBetween</code> function, you can also use a for loop here which makes it a bit simpler:</p>
<pre><code>def inBetween(line):
    # using a tuple unpacking to get both values from the line at once
    start, stop = line.split(' ') 
    for h in range(int(start), int(stop)):
        hours[h] += 1
</code></pre>
<p>Finally, there isn’t actually any benefit from your <code>inBetween</code> function here. Since it’s mutating global state (the <code>hours</code> dictionary), it’s not really useful outside of its exact context, so you could simply inline the functionality here. You could then even extract the logic, so you get a function that just processes the input and returns you that <code>hours</code> dictionary. Combined with <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> this can actually look pretty nice:</p>
<pre><code>from collections import defaultdict
def getHours(lines):
    hours = defaultdict(int)
    for i in range(1, int(lines[0]) + 1):
        start, stop = lines[i].split(' ')
        for h in range(int(start), int(stop)):
            hours[h] += 1
    return dict(hours)
</code></pre>
<p>And that’s already everything:</p>
<pre><code>&gt;&gt;&gt; getHours(input.split('\n'))
{ 1: 1,  2: 3,  3: 2,  4: 4,  5: 4,  6: 3,  7: 3,  8: 2,  9: 2, 10: 2,
 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 20: 2,
 21: 2, 22: 2 }
</code></pre>
</div>
<span class="comment-copy">That's because a <code>map</code> in python-3.x works <i>lazy</i>, materialize it with <code>list(map(..))</code></span>
