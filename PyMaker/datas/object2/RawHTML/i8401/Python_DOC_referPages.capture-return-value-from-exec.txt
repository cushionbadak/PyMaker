<div class="post-text" itemprop="text">
<p><strong><code>yaml</code> file:</strong></p>
<pre><code>$ cat ec2_attr.yml

treeroot:
    branch1:
        name: Node 1
        snap: |
          def foo():

              from boto3.session import Session
              import pprint

              session = Session(region_name='us-east-1')
              client = session.client('rds')

              resp = client.describe_db_cluster_snapshots(
                  SnapshotType='manual',
              )

              filtered = [x for x in resp['DBClusterSnapshots'] if x[
                  'DBClusterSnapshotIdentifier'].startswith('xxxxx')]
              latest = max(filtered, key=lambda x: x['SnapshotCreateTime'])
              print(latest['DBClusterSnapshotIdentifier'])

          foo()        
    branch2:
        name: Node 2
</code></pre>
<p><strong>Code:</strong></p>
<pre><code>import yaml
import pprint

with open('./ec2_attr.yml') as fh:
    try:
        yaml_dict = yaml.load(fh)
    except Exception as e:
        print(e)
    else:
        exec("a = yaml_dict['treeroot']['branch1']['snap']")
        print('The Value is: %s' % (a))
</code></pre>
<p><strong>Actual Output:</strong></p>
<pre><code>The Value is: def foo():

    from boto3.session import Session
    import pprint

    session = Session(region_name='us-east-1')
    client = session.client('rds')

    resp = client.describe_db_cluster_snapshots(
        SnapshotType='manual',
    )

    filtered = [x for x in resp['DBClusterSnapshots'] if x[
        'DBClusterSnapshotIdentifier'].startswith('xxxxx')]
    latest = max(filtered, key=lambda x: x['SnapshotCreateTime'])
    print(latest['DBClusterSnapshotIdentifier'])

foo()  
</code></pre>
<p><strong>Expected output:</strong></p>
<pre><code>xxxxx-xxxx-14501111111-xxxxxcluster-2gwe6jrnev8a-2017-04-09
</code></pre>
<p>If I use <code>exec</code> as <code>exec(yaml_dict['treeroot']['branch1']['snap'])</code>, Then it does print the value that I want, but I cannot capture that value into a variable. I understand that <code>exec</code> return value is <code>None</code>. However, I am trying to do something exactly similar to <a href="https://stackoverflow.com/a/23917810/1251660">https://stackoverflow.com/a/23917810/1251660</a>, and it is not working in my case.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>exec</code> like this:</p>
<pre><code>import yaml
import pprint

with open('./a.yaml') as fh:
    try:
        yaml_dict = yaml.load(fh)
    except Exception as e:
        print(e)
    else:
      a = {}
      exec(yaml_dict['treeroot']['branch1']['snap'], {}, a)
      print('The Value is: %s' % (a['foo']()))
</code></pre>
<p>And change your YAML to this:</p>
<pre><code>treeroot:
  branch1:
      name: Node 1
      snap: |
        def foo():
            return("test")

  branch2:
      name: Node 2
</code></pre>
<p>Actually, You can use <code>exec(str, globals, locals</code>)</p>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html#globals" rel="nofollow noreferrer">globals()</a></li>
<li><a href="https://docs.python.org/2/library/functions.html#locals" rel="nofollow noreferrer">locals()</a></li>
</ul>
<p>The built-in functions <code>globals()</code> and <code>locals()</code> return the current global and local dictionary, respectively, which may be useful to pass around for use as the second and third argument to <code>exec()</code>.</p>
<p>Also, You can read <a href="https://late.am/post/2012/04/30/the-exec-statement-and-a-python-mystery.html" rel="nofollow noreferrer">The exec Statement and A Python Mystery</a> and <a href="http://www.diveintopython.net/html_processing/locals_and_globals.html" rel="nofollow noreferrer">locals and globals</a></p>
</div>
<span class="comment-copy">Perfect. This is what I needed. Could you explain what's going on here. I am not able to interpret <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#exec</a> correctly.</span>
<span class="comment-copy">@slayedbylucifer I tried to explain a little more  :)</span>
