<div class="post-text" itemprop="text">
<p>I have many 3*2 matrices(A1,A2,A3..), and each of the 3*2 is a draw. In the case two draws, we have a 3*4 ( we horizontally stack each draw of A1,A2). Clearly, it is easier for me to draw the 3*4 matrix (A) as a larger matrices once instead of draw a 3*2 over and over again.</p>
<p>But I need to perform a matrix multiplication for each draw(each A1,A2...) to a matrix B. Say A1*B, and A2*B ...AN*B</p>
<pre><code>#each draw of the 3*2 matrix
A1 = np.array([[ 0,  1],
              [ 4,  5],
              [ 8,  9]])

A2 = np.array([[ 2,  3],
              [ 6,  7],
              [ 10, 11]])

# A is [A1,A2]
# Easier to draw A once for all  (the larger matrix)
A = np.array([[ 0,  1,  2,  3],
              [ 4,  5,  6,  7],
              [ 8,  9, 10, 11]])

b = np.array([[ 0,  1],
              [ 4,  5]
              ])

desired output
array([[ 4,  5, 12, 17],
       [20, 29, 28, 41],
       [36, 53, 44, 65]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can reshape matrix A to 2 columns so that it is conformable to <code>b</code>, do the matrix multiplication, and then reshape it back:</p>
<pre><code>np.dot(A.reshape(-1, 2), b).reshape(3, -1)

#array([[ 4,  5, 12, 17],
#       [20, 29, 28, 41],
#       [36, 53, 44, 65]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are unsure about how to store/stack the incoming arrays, one way would be stacking those as a <code>3D</code> array, such that the each of those incoming arrays are <em>index-able</em> by its first axis -</p>
<pre><code>a = np.array((A1,A2))
</code></pre>
<p>Sample run -</p>
<pre><code>In [143]: a = np.array((A1,A2))

In [144]: a.shape
Out[144]: (2, 3, 2)
           |-----------------&gt; axis of stacking
</code></pre>
<p>Then, to get the equivalent output of matrix-multiplications of each incoming array with <code>b</code>, we could use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html" rel="nofollow noreferrer"><code>np.tensordot</code></a> on the <code>3D</code> stacked array <code>a</code> with <code>b</code>, thus losing the last axis from <code>a</code> and first from <code>b</code> in the sum-reduction, like so -</p>
<pre><code>out = np.tensordot(a,b,axes=((2),(0)))
</code></pre>
<p>Let's have a look at the output values and compare against each matrix-multiplication with <code>A1</code>, <code>A2</code>, etc. -</p>
<pre><code>In [138]: out[0]
Out[138]: 
array([[ 4,  5],
       [20, 29],
       [36, 53]])

In [139]: out[1]
Out[139]: 
array([[12, 17],
       [28, 41],
       [44, 65]])

In [140]: A1.dot(b)
Out[140]: 
array([[ 4,  5],
       [20, 29],
       [36, 53]])

In [141]: A2.dot(b)
Out[141]: 
array([[12, 17],
       [28, 41],
       [44, 65]])
</code></pre>
<p>Thus, essentially with this stacking operation and later on <code>tensordot</code> we have :</p>
<pre><code>out[0], out[1], .... = A1.dot(b), A2.dot(b), ....
</code></pre>
<p><strong>Alternative to <code>np.tensordot</code> -</strong></p>
<p>We could use a simpler version with <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.matmul.html" rel="nofollow noreferrer"><code>np.matmul</code></a>, to get the same output as with <code>tensordot</code> -</p>
<pre><code>out = np.matmul(a,b)
</code></pre>
<p>On Python 3.5, there's an even simpler version that replaces <code>np.matmul</code>, the <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465" rel="nofollow noreferrer"><code>@ operator</code></a> -</p>
<pre><code>out = a @ b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even if not needed for the calculation <code>einsum</code> can help us think through the problem:</p>
<pre><code>In [584]: np.einsum('ij,jk-&gt;ik', A1,b)
Out[584]: 
array([[ 4,  5],
       [20, 29],
       [36, 53]])
In [585]: np.einsum('ij,jk-&gt;ik', A2,b)
Out[585]: 
array([[12, 17],
       [28, 41],
       [44, 65]])
</code></pre>
<p><code>A</code> is (3,4), which won't work with the (2,2) <code>b</code>.  Think of it as trying work with a doubled <code>j</code> dimension: <code>'i(2j),jk-&gt;i?k'</code>.  But what if we inserted an axis?  'imk,jk-&gt;imk'?  Or added the extra dimension to <code>i</code>?</p>
<pre><code>In [587]: np.einsum('imj,jk-&gt;imk', A.reshape(3,2,2),b)
Out[587]: 
array([[[ 4,  5],
        [12, 17]],

       [[20, 29],
        [28, 41]],

       [[36, 53],
        [44, 65]]])
</code></pre>
<p>The numbers are there, just the shape is (3,2,2).</p>
<pre><code>In [590]: np.einsum('imj,jk-&gt;imk', A.reshape(3,2,2),b).reshape(3,4)
Out[590]: 
array([[ 4,  5, 12, 17],
       [20, 29, 28, 41],
       [36, 53, 44, 65]])
</code></pre>
<p>Or you could build <code>A</code> from the start so that <code>mij,jk-&gt;mik</code> works (<code>@Divaker</code>)</p>
<p><code>@Psidom</code>:</p>
<pre><code>np.einsum('ij,jk-&gt;ik', A.reshape(3,2,2).reshape(-1,2) ,b).reshape(3,-1)
</code></pre>
<p>`@piRSquared':</p>
<pre><code>'kj,jI-&gt;kI`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shift you perspective.  You are locking yourself into <code>3 x 2</code> unnecessarily.</p>
<p>You can think of <code>A1</code> and <code>A2</code> as <code>2x3</code> instead, then <code>A</code> would be</p>
<pre><code>array([[ 0,  4,  8,  2,  6, 10],
       [ 1,  5,  9,  3,  7, 11]])
</code></pre>
<p>Then take the transpose of <code>b = b.T</code></p>
<pre><code>array([[0, 4],
       [1, 5]])
</code></pre>
<p>So that you can do you operation</p>
<pre><code>b @ A

array([[ 4, 20, 36, 12, 28, 44],
       [ 5, 29, 53, 17, 41, 65]])
</code></pre>
<p>Let your "draws" look like this</p>
<pre><code>A = np.random.randint(10, size=(2, 9))
A

array([[7, 2, 1, 0, 9, 9, 1, 0, 2],
       [8, 6, 1, 6, 6, 2, 4, 2, 9]])

b @ A

array([[32, 24,  4, 24, 24,  8, 16,  8, 36],
       [47, 32,  6, 30, 39, 19, 21, 10, 47]])

â€‹
</code></pre>
</div>
<span class="comment-copy">What do you mean by "draw'?</span>
<span class="comment-copy">@juanpa.arrivillaga,  A1,A2..... are drawn from some distributions, they are similar.</span>
<span class="comment-copy">So you want <code>np.hstack([A1.dot(b), A2.dot(b)])</code> but using <code>A</code> instead?</span>
<span class="comment-copy">Is there a reason you have to stack the draws horizontally? You'll want your A matrix to be of the shape (n_draws, 3, 2) so you can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html" rel="nofollow noreferrer">numpy.dot</a> to vectorize. Numpy's random-generators should all accept a 3-d input shape</span>
<span class="comment-copy"><i>elementwise</i> operations should be the same. I think @psrtjohn is right. This is broadcasting behavior, no?</span>
<span class="comment-copy">I'll be revisiting this one.  I want to get good with einsum.</span>
