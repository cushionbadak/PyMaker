<div class="post-text" itemprop="text">
<p>I have a large string of a novel that I downloaded from Project Gutenberg. I am trying to save it to my computer, but I'm getting a UnicodeEncodeError and I don't know how to fix or ignore it.</p>
<pre><code>from urllib import request

# Get the text
response = request.urlopen('http://www.gutenberg.org/files/2701/2701-0.txt')
# Decode it using utf8
raw = response.read().decode('utf8')
# Save the file
file = open('corpora/canon_texts/' + 'test', 'w')
file.write(raw)
file.close()
</code></pre>
<p>This gives me the following error:</p>
<pre><code>UnicodeEncodeError: 'charmap' codec can't encode character '\ufeff' in position 0: character maps to &lt;undefined&gt;
</code></pre>
<p>First, I tried to remove the BOM at the beginning of the file:</p>
<pre><code># We have to get rid of the pesky Byte Order Mark before we save it
raw = raw.replace(u'\ufeff', '')
</code></pre>
<p>but I get the same error, just with a different position number:</p>
<pre><code>UnicodeEncodeError: 'charmap' codec can't encode characters in position 7863-7864: character maps to &lt;undefined&gt;
</code></pre>
<p>If I look in that area I can't find the offending characters, so I don't know what to remove:</p>
<pre><code>raw[7850:7900]
</code></pre>
<p>just prints out:</p>
<pre><code>'   BALLENA,             Spanish.\r\n     PEKEE-NUEE-'
</code></pre>
<p>which doesn't look like it would be a problem.</p>
<p>So then I tried to skip the bad lines with a try statement:</p>
<pre><code>file = open('corpora/canon_texts/' + 'test', 'w')
try:
    file.write(raw)
except UnicodeEncodeError:
    pass
file.close()
</code></pre>
<p>but this skips the entire text, giving me a file of 0 size.</p>
<p>How can I fix this?</p>
<p>EDIT:</p>
<p>A couple people have noted that '\ufeff' is utf16. I tried switching to utf16:</p>
<pre><code># Get the text
response = request.urlopen('http://www.gutenberg.org/files/2701/2701-0.txt')
# Decode it using utf16
raw = response.read().decode('utf-16')
</code></pre>
<p>But I can't even download the data before I get this error:</p>
<pre><code>UnicodeDecodeError: 'utf-16-le' codec can't decode byte 0x0a in position 1276798: truncated data
</code></pre>
<p>SECOND EDIT:</p>
<p>I also tried decoding with utf-8-sig as suggested in <a href="https://stackoverflow.com/questions/17912307/u-ufeff-in-python-string">u'\ufeff' in Python string</a> because that includes BOM, but then I'm back to this error when I try to save it:</p>
<pre><code>UnicodeEncodeError: 'charmap' codec can't encode characters in position 7863-7864: character maps to &lt;undefined&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Decoding and re-encoding a file just to save it to disk is pointless. Just write out the bytes you have downloaded, and you will have the file on disk:</p>
<pre><code>raw = response.read()
with open('corpora/canon_texts/' + 'test', 'wb') as outfile:
    outfile.write(raw)
</code></pre>
<p>This is the only reliable way to write to disk <em>exactly</em> what you downloaded.</p>
<p>Sooner or later you'll want to read in the file and work with it, so let's consider your error. You didn't provide a full stack trace (always a bad idea), but your error is during <em>encoding</em>, not decoding. The decoding step succeeded. The error must be arising on the line <code>file.write(raw)</code>, which is where the text gets encoded for saving. But to what encoding is it being converted? Nobody knows, because you opened <code>file</code> without specifying an encoding! The encoding you're getting depends on your location, OS, and probably the tides and weather forecast. In short: Specify the encoding.</p>
<pre><code>text = response.read().decode('utf8')
with open('corpora/canon_texts/' + 'test', 'w', encoding="utf-8") as outfile:
    outfile.write(text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>U + feff is for <a href="https://en.wikipedia.org/wiki/Byte_order_mark#UTF-16" rel="nofollow noreferrer" title="UTF-16">UTF-16</a>. Try that instead.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>.decode(encoding="utf-8", errors="strict")</code></a> offers error handling as a built-in feature:</p>
<blockquote>
<p>The default for errors is <code>'strict'</code>, meaning that encoding errors raise a <code>UnicodeError</code>. Other possible values are <code>'ignore'</code>, <code>'replace'</code> and any other name registered via <code>codecs.register_error()</code>, see section <code>Error Handlers</code>.</p>
</blockquote>
<p>Probably the safest option is</p>
<pre><code>decode("utf8", errors='backslashreplace')
</code></pre>
<p>which will escape encoding errors with a backslash, so you have a record of what failed to decode.</p>
<p>Conveniently, your Moby Dick text contains no backslashes, so it will be quite easy to check what characters are failing to decode.</p>
<p>What is strange about this text is the website says it is in <code>utf-8</code>, but <code>\efeff</code> is the BOM for <code>utf-16</code>. Decoding in <code>utf-16</code>, it looks like your just having trouble with the very last character <code>0x0a</code> (which is a utf-8 line ending), which can probably safely be dropped with</p>
<pre><code>decode("utf-16", errors='ignore')
</code></pre>
</div>
<span class="comment-copy">Because <code>\ufeff</code> is the BOM for utf-16 and you're trying to decode it as utf-8.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/17912307/u-ufeff-in-python-string">u'\ufeff' in Python string</a></span>
<span class="comment-copy">If you want to see what characters are causing the exception, try <code>ascii(raw[7850:7900])</code>. There might be an unusual white-space character or a soft hyphen or the like, which you can't see with the standard <code>repr()</code> form.</span>
<span class="comment-copy">Yeah, that's it: the default for the output encoding in the OP's environment is apparently some 8-bit encoding, as the error message ('charmap' codec) suggests, which can't handle some characters used. The input encoding should be 'utf-8-sig' though, since the BOM is not something you want to have in a decoded string.</span>
<span class="comment-copy">Saving it to disk using your approach works, but when I try to read it with your code it wipes the file and the variable text is just an empty string</span>
<span class="comment-copy">I think you are confused about the process of reading and writing files. Opening a file in "w" or "wb" mode will indeed immediately wipe out its prior contents. To read a file, open it in "r" mode (or with no mode, which defaults to "r"); read the Python tutorial on <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">input and output</a> for the rest. Anyway <i>this</i> question was about how to download a file and save it to disk. Use Notepad (or another editor) to confirm that the above code works and the file is downloaded. If you then have problems reading your files, ask a new question.</span>
<span class="comment-copy">This gives me a new error, which I've edited my question to include.</span>
<span class="comment-copy">The character <code>'\ufeff'</code> is the BOM, but since this is a decoded string, you can't say it is the BOM for UTF-16. (The BOM for UTF-16 [big endian] is, if you want, the byte sequence <code>b'\xfe\xff'</code>.) The BOM shouldn't be present in a decoded string, though, so the correct input encoding is probably <code>utf-8-sig</code>. If the input was UTF-16, as you suspect, then decoding with UTF-8 would have immediately failed, since <code>b'\xfe\xff'</code> is not a valid UTF-8 byte sequence.</span>
