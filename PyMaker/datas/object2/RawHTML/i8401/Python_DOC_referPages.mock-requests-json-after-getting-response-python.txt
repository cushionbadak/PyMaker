<div class="post-text" itemprop="text">
<p>I have test</p>
<pre><code>class MyTests(TestCase):

    def setUp(self):
        self.myclient = MyClient()

    @mock.patch('the_file.requests.json')
    def test_myfunc(self, mock_item):
        mock_item.return_value = [
                    {'itemId': 1},
                    {'itemId': 2},
        ]
        item_ids = self.myclient.get_item_ids()
        self.assertEqual(item_ids, [1, 2])
</code></pre>
<p>in the file I have</p>
<pre><code>import requests

class MyClient(object):

    def get_product_info(self):
            response = requests.get(PRODUCT_INFO_URL)
            return response.json()
</code></pre>
<p>My goal is to mock <code>get_product_info()</code> to return the <code>return_value</code> data in the test. I have tried mocking <code>requests.json</code> and <code>requests.get.json</code>, both error out on no attribute, I've mocked <code>the_file.MyClient.get_product_info</code> which doesn't cause error but doesn't work, it returns the real data.</p>
<p>How can I mock this <code>get_product_info</code> which uses requests library? Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to just patch <code>get_product_info()</code>.</p>
<pre><code>from unittest.mock import patch


class MyClient(object):
    def get_product_info(self):
        return 'x'

with patch('__main__.MyClient.get_product_info', return_value='z'):
    client = MyClient()
    info = client.get_product_info()
    print('Info is {}'.format(info))
    # &gt;&gt; Info is z
</code></pre>
<p>Just switch <code>__main__</code> to the name of your module. You might also find <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object" rel="nofollow noreferrer"><code>patch.object</code></a> useful.</p>
</div>
