<div class="post-text" itemprop="text">
<p>I understand that __init__() is called automatically when you create a class like <code>newThread = MyThread(property)</code> and run() is triggered by <code>newthread.start()</code>. What I am looking for is something that is called automatically before a thread terminates, so I don't have to explicitly call <code>self.cleanUp()</code> before each return statement.</p>
<pre><code>class MyThread(Thread): 

    def __init__(self, property): 
        Thread.__init__(self)
        self.property = property

    def cleanUp(self):
        # Clean up here

    def run(self):
        # Do some stuff
        self.cleanUp() # Current work around
        return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this is by making the <code>Thread</code> subclass also a <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="nofollow noreferrer">context manager</a>. This will effectively make <code>__exit__()</code> the special method you want triggered.</p>
<p>The following shows what I'm proposing. Note: I renamed the <code>property</code> argument you were passing the constructor because <code>property</code> is the name of a Python built-in.</p>
<pre><code>from threading import Thread
import time

TEST_THREAD_EXCEPTION = False  # change as desired

class MyThread(Thread):

    def __init__(self, attribute):
        Thread.__init__(self)
        self.attribute = attribute

    def cleanup(self):
        # Clean up here
        print('  cleaning up after thread')

    def run(self):
        if TEST_THREAD_EXCEPTION:
            raise RuntimeError('OOPS!')  # force exception
        print('  other thread now running...')
        time.sleep(2)  # Do something...

    def __enter__(self):
        try:
            self.run()
        except Exception as exc:
            print('Error: {} exception raised by thread'.format(exc))
            raise  # reraise the exception
        return self

    def __exit__(self, *args):
        self.cleanup()

print('main thread begins execution')
with MyThread('hello') as thread:
    print('doing other things in main thread while other thread is running')
print('main thread continuing...')
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>main thread begins execution
  other thread now running...
doing other things in main thread while other thread is running
  cleaning up after thread
main thread continuing on...
</code></pre>
<p>If you change <code>TEST_THREAD_EXCEPTION</code> to <code>True</code>, <code>cleanup()</code> <strong>won't</strong> be called since the thread didn't run successfully—although you could change that if you wished, but may also need to ensure that it doesn't get called twice. Here's what the code above does in that case:</p>
<pre class="lang-none prettyprint-override"><code>main thread begins execution
Error: OOPS! exception raised by thread
Traceback (most recent call last):
  File "opposite_init.py", line 37, in &lt;module&gt;
    with MyThread('hello') as thread:
  File "opposite_init.py", line 27, in __enter__
    self.run()
  File "opposite_init.py", line 21, in run
    raise RuntimeError('OOPS!')  # force exception
RuntimeError: OOPS!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the problem you're trying to solve is that you don't want to add code to each of your <code>run()</code> methods to call your cleanup function, then I'd suggest making a custom subclass of <code>Thread</code> which does that for you. Something like this, perhaps:</p>
<pre><code>class CleanupThread(Thread):
    def cleanup(self):
        # Override this method in your subclasses to do cleanup
        pass

    def run2(self):
        # Override this method in your subclasses instead of run()
        pass

    def run(self):
        # Do *not* override this in your subclasses. Override run2() instead.
        try:
            self.run2()
        finally:
            self.cleanup()
</code></pre>
<p>Of course, you're free to rename <code>run2</code> to something that makes sense for you.</p>
<p>Python does not offer a built-in equivalent of this, if that's what you're looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the <a href="https://mail.python.org/pipermail/python-list/2013-August/654291.html" rel="nofollow noreferrer">Python mailing list</a>, <code>__del__</code> shouldn't be considered the opposite, but you can use the <code>with</code> syntax, which is a <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="nofollow noreferrer"><em>context manager</em></a></p>
<blockquote>
<p>you cannot be sure that an object's destructor (<code>__del__()</code> ) will ever
  be called.  If you want to make sure that a particular object gets
  processed, one approach is the with- syntax.</p>
</blockquote>
<p>Or you can also look into the try...finally clause, in which the finally statement will always get run.</p>
<pre><code>class MyThread(Thread): 

    def __init__(self, property): 
        Thread.__init__(self)
        self.property = property

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print('starting cleanup')
        # Clean up here

    def run(self):
        # Do some stuff
        return

# not now you can call it like this:
with MyThread("spam") as spam:
    print("The thread is running")
    # you can also do stuff here
</code></pre>
<p>You can use the try...finally clause like so:</p>
<pre><code>class MyThread(Thread): 

    def __init__(self, property): 
        Thread.__init__(self)
        self.property = property

    def cleanUp(self):
        # Clean up here
        print('starting cleanup')

    def run(self):
        # Do some stuff
        return

try:
    spam = MyThread('spam')
    print('The thread is running')
finally:
    spam.cleanUp()
</code></pre>
</div>
<span class="comment-copy">Why don't you just use the <code>try: ... finally: ...</code> construct?</span>
<span class="comment-copy">While <code>__del__()</code> is considered the opposite, there can be issues with when it is called. I would look at context managers, for use in the <code>with</code> clause.</span>
<span class="comment-copy">As far as I can tell, your example doesn't actually run anything in a separate thread -- it just calls MyThread's <code>run</code> method from the main thread. Is this intentional? It doesn't seem to be what OP is asking for.</span>
<span class="comment-copy">Furthermore, <code>__exit__</code> is only called if <code>__enter__</code> actually returns normally. If the <code>run</code> method would throw an exception instead, then <code>__exit__</code> wouldn't be called.</span>
<span class="comment-copy">@Dolda2000: It's intentional in the sense that it's just an example (and all the OP provided in their code)—which I understood to be "something that is called automatically before a thread terminates".</span>
<span class="comment-copy">@Dolda2000: <code>__exit__()</code> <i>is</i> called when an exception occurs and controls how it will be handled depending on its return value—read the documentation.</span>
<span class="comment-copy">Yes, but as I said, <code>__exit__</code> is only called if <code>__enter__</code> has returned normally.</span>
<span class="comment-copy">You need to define <code>__enter__</code> as well if you want <code>spam</code> to be assigned a useful value.</span>
