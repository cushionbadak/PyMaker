<div class="post-text" itemprop="text">
<p>Started a Python project, wrote some hundred lines of code, created a handful of classes, got immediate satisfaction, everything worked nicely.</p>
<p>Returning to the project a few months later, I am hopelessly lost. Worse than spaghetti: the code now looks to me like a chaotic collection of a hundred class member functions. Most of these functions are only two to tens lines long; their working and their purpose are perfectly clear - except that I have no clue what are the data types of the function arguments, of the return value(s), and of the involved class member variables. Therefore I am unable to get the large picture how my classes are interrelated.</p>
<p>How to proceed in such a situation? How to obtain a high-level overview as would be provided by .h headers in C++? How to insert that information into the source file so that the next time I need not to redo this research?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> where appropriate goes a long way.</p>
<p>Example quoted from the PEP:</p>
<pre><code>def complex(real=0.0, imag=0.0):
    """Form a complex number.

    Keyword arguments:
    real -- the real part (default 0.0)
    imag -- the imaginary part (default 0.0)
    """
    if imag == 0.0 and real == 0.0:
        return complex_zero
    ...
</code></pre>
<p>Such strings get added as a <code>__doc__</code> special attribute to the function/method, which you can access from python. Directly, or with the pydoc module. As a bonus, such documentation is available directly from python console, using <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer"><code>help(something)</code></a>. You should also look into <a href="http://www.sphinx-doc.org/en/stable/" rel="nofollow noreferrer">sphinx-doc</a>, which is the tool used for documenting python itself. It's not in-source, but it's tailored for documenting python code and overall pretty convenient.</p>
<p>As for your concern about actual types, usually you don't name specific types. They do not matter. What matters is what you can do with them, because python code normally uses <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">duck typing</a>. That is: you don't care what your argument is, as long as you can call its <code>foo</code> method and access its <code>bar</code> attribute and they behave as you expect.</p>
</div>
<span class="comment-copy">Using <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">docstrings</a> where appropriate goes a long way.</span>
<span class="comment-copy">Your advise to use verbose docstrings addresses coding discipline <i>ex ante</i>. My question is more about how to analyze a given mess <i>ex post</i>.</span>
<span class="comment-copy">Alas, there is not much you can do except run the code with debugger and follow it.</span>
