<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/18171739/unicodedecodeerror-when-reading-csv-file-in-pandas-with-python">UnicodeDecodeError when reading CSV file in Pandas with Python</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>what i am trying is  reading a csv to make a dataframe---making changes in a column---again updating/reflecting changed value into same csv(to_csv)- again trying to read that csv to make another dataframe...there i am getting an error </p>
<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe7 in position 7: invalid continuation byte
</code></pre>
<p>my code is </p>
<pre><code> import pandas as pd
 df = pd.read_csv("D:\ss.csv")
 df.columns  #o/p is Index(['CUSTOMER_MAILID', 'False', 'True'], dtype='object')
 df['True'] = df['True'] + 2     #making changes to one column of type float
 df.to_csv("D:\ss.csv")       #updating that .csv    
 df1 = pd.read_csv("D:\ss.csv")   #again trying to read that csv

UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe7 in position 7: invalid continuation byte
</code></pre>
<p>So please suggest how can i avoid the error and be able to read that csv again to a dataframe.</p>
<p>I know somewhere i am missing "encode = some codec type" or "decode = some type" while reading and writing to csv.</p>
<p>But i don't know what exactly should be changed.so need help.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Known encoding</h1>
<p>If you know the encoding of the file you want to read in, 
you can use </p>
<pre><code>pd.read_csv('filename.txt', encoding='encoding')
</code></pre>
<p>These are the possible encodings:
<a href="https://docs.python.org/3/library/codecs.html#standard-encodings">https://docs.python.org/3/library/codecs.html#standard-encodings</a></p>
<h1>Unknown encoding</h1>
<p>If you do not know the encoding, you can try to use chardet, however this is not guaranteed to work. It is more a guess work.</p>
<pre><code>import chardet
import pandas as pd

with open('filename.csv', 'rb') as f:
    result = chardet.detect(f.read())  # or readline if the file is large


pd.read_csv('filename.csv', encoding=result['encoding'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One simple solution is you can open the csv file in an editor like Sublime Text and save it with 'utf-8' encoding. Then we can easily read the file through pandas.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is that error happening on your first read of the data, or on the second read after you write it out and read it back in again? My guess is that it's actually happening on the <em>first</em> read of the data, because your CSV has an encoding that isn't UTF-8.</p>
<p>Try opening that CSV file in Notepad++, or Excel, or LibreOffice. Does your data source have the รง (C with cedilla) character in it? If it does, then that 0xE7 byte you're seeing is probably the รง encoded in either Latin-1 or Windows-1252 (called "cp1252" in Python).</p>
<p>Looking at <a href="http://pandas.pydata.org/pandas-docs/version/0.16.2/generated/pandas.read_csv.html" rel="noreferrer">the documentation</a> for the Pandas <code>read_csv()</code> function, I see it has an <code>encoding</code> parameter, which should be the name of the encoding you expect that CSV file to be in. So try adding <code>encoding="cp1252"</code> to your <code>read_csv()</code> call, as follows:</p>
<pre><code>df = pd.read_csv(r"D:\ss.csv", encoding="cp1252")
</code></pre>
<p>Note that I added the character <code>r</code> in front of the filename, so that it will be considered a "raw string" and backslashes won't be treated specially. That way you don't get a surprise when you change the filename from <code>ss.csv</code> to <code>new-ss.csv</code>, where the string <code>D:\new-ss.csv</code> would be read as <code>D</code>, <code>:</code>, newline character, <code>e</code>, <code>w</code>, etc.</p>
<p>Anyway, try that encoding parameter on your first <code>read_csv()</code> call and see if it works. (It's only a guess, since I don't know your actual data. If the data file isn't private and isn't too large, try posting the data file so we can see its contents -- that would let us do better than just guessing.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you'll get this error. I have work around with this problem, by opening csv file in notepad++ and changing the encoding throught Encoding menu -&gt; convert to UTF-8. Then saving the file. Then again running python program over it.</p>
<p>Other solution is using codecs module in python for encoding-decoding of files. I haven't used that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Above method used by importing and then detecting file type works
import chardet</p>
<pre><code>import pandas as pd
import chardet
with open('filename.csv', 'rb') as f:
    result = chardet.detect(f.read())  # or readline if the file is large


pd.read_csv('filename.csv', encoding=result['encoding'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am new to python. Ran into this exact issue when I manually changed the extension on my excel file to .csv and tried to read it with read_csv. However, if I opened the excel file and saved as csv file instead it seemed to work. </p>
</div>
<span class="comment-copy">to import chardet will i have to install any package? because i am getting error in importing this module.   package name please.Thanks</span>
<span class="comment-copy">Yes, <code>pip install chardet</code>.</span>
<span class="comment-copy">chardet.detect() is very slow. I use Python 3.6, and <code>pd.read_csv('filename.csv', encoding='Latin-1')</code> works perfect for me.</span>
<span class="comment-copy"><b>If</b> you <b>know</b> the encoding it's always better to state it. If you do not know and your file is large you can try giving chardet not the full file <code>f.read ()</code> but a smaller part, e.g. <code>f.read(1024**2)</code> for the first megabyte .</span>
<span class="comment-copy">Yes, that also solved my similiar problem.</span>
<span class="comment-copy">Definitely the simplest :)</span>
<span class="comment-copy">Thanks,as you can see my first read does not give me any error also to_csv is a success.But the error arise while trying second read.may be, while i am trying to save that csv by to_csv i should give some encdoe or decode type so taht in my second read i can read with same encoding type.please correct me.</span>
<span class="comment-copy">@Satya - The <code>to_csv</code> function also takes an <code>encoding</code> parameter, so you could also try specifying <code>to_csv(filename, encoding="utf-8")</code> (I highly recommend using UTF-8 as your encoding everywhere, if you have the choice) before reading it with <code>read_csv(filename, encoding="utf-8")</code>. But since UTF-8 is already the default, I don't know if that will make much difference.</span>
<span class="comment-copy">@Satya - Actually, I was wrong just now. If you're using Python 3, UTF-8 is the default for <code>to_csv</code>. But if you're using Python 2, it's NOT the default -- so adding the <code>encoding="utf-8"</code> parameter to all your <code>to_csv()</code> calls is definitely a good idea.</span>
<span class="comment-copy">@rmunn-i am using python 3.4.1 and tried  1st read with encoding = 'utf-8', then to_csv with encoding = 'utf-8' and in 2nd read encoding = 'utf-8',,,,,still getting same error in 2nd read.please correct me if i should use UTF-8.</span>
<span class="comment-copy">@Satya - Are you really, REALLY sure that it's the 2nd read that's failing? Because there's no reason for it to fail, and if it's really the 1st read that's failing, you'd get the same error message. It might be that this whole time, you've had a bad input file and not known it. I'd suggest that you put a <code>print("First read was successful")</code> line in your code after the first <code>read_csv</code> call, then make sure you actually see those words in the output. Just to be really, <b>REALLY</b> sure.</span>
<span class="comment-copy">I used the code above and got this error "UnicodeDecodeError: 'charmap' codec can't decode byte 0x8d in position 5356: character maps to &lt;undefined&gt;"</span>
