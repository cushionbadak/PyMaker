<div class="post-text" itemprop="text">
<p>So i have the following objects:</p>
<pre><code>import os
import sys
import json

class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, P):
            return json.dumps(obj.__dict__)
        # Let the base class default method raise the TypeError
        return json.JSONEncoder.default(self, obj)

class P(object):
    def __init__(self):
        self.name = "Unknown"
        self.id = 1
        self.lst = []

    def showName(self):
        print(self.name)
        for item in self.lst:
            item.showName()

    def add(self, p):
        self.lst.append(p)

    def serialize(self):
        return json.dumps(self, cls=ComplexEncoder)

class PFirst(P):
    def __init__(self):
        P.__init__(self)
        self.name = "First"
        self.id = 2

p1 = PFirst()
p1.showName()

p = P()
p.add(p1)
p.showName()

print(p.serialize())
</code></pre>
<p>I want to make a json which reprezents the attributes of object <code>p</code> but i receive the following error:</p>
<pre><code>TypeError: &lt;__main__.PFirst object at 0x000002AA287F1438&gt; is not JSON serializable
</code></pre>
<p>Can someone please help me?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>        return json.dumps(obj.__dict__)
</code></pre>
<p>You are calling <code>json.dumps</code> with the default encoder again, which surely don't know how to deal with <code>P</code> objects. If you do want to call <code>json.dumps</code>, use:</p>
<pre><code>        return json.dumps(obj.__dict__, cls=type(self))
#                                     ^~~~~~~~~~~~~~~~
</code></pre>
<p>However! If the print the result, we see the result is double-encoded as a string:</p>
<pre><code>"{\"name\": \"Unknown\", \"id\": 1, \"lst\": [\"{\\\"name\\\": \\\"First\\\", \\\"id\\\": 2, \\\"lst\\\": []}\"]}"
</code></pre>
<p>If you check the <code>ComplexEncoder</code> example, and also the <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder.default" rel="nofollow noreferrer">documentation of <code>default()</code></a>, we will note that it should return a "serializable object", not the serialized string. So you should really write:</p>
<pre><code>class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, P):
            return obj.__dict__         # &lt;-----
        return json.JSONEncoder.default(self, obj)
</code></pre>
<p>Output:</p>
<pre><code>{"name": "Unknown", "id": 1, "lst": [{"name": "First", "id": 2, "lst": []}]}
</code></pre>
</div>
<span class="comment-copy">Yes, it works. Thank you very much</span>
