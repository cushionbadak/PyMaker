<div class="post-text" itemprop="text">
<p>I have a list of dates <strong>(ListA)</strong> each entry in which represents an occurrence. How do I make a time series out of the list in python3?  A sequence of dates would be on the X axis, and the frequency of each date would be on the Y</p>
<pre><code>ListA = [2016-04-05, 2016-04-05, 2016-04-07, 2016-09-10, 
         2016-03-05, 2016-07-11, 2017-01-01]
</code></pre>
<p>Desired Output: </p>
<pre><code>[2016-04-05, 2], [2016-04-06, 0], [2016-04-07, 1],
[2016-04-08, 0], ……………… .., [2017-01-01, 1]
</code></pre>
<p>Desired Format of output: </p>
<pre><code>[[Date, Frequency],....,*]
</code></pre>
<p>I have the <em>Date</em> code as:</p>
<pre><code>Date=pd.date_range('2016-04-05', '2017-01-01', freq='D')
Print(Date)
</code></pre>
<p>Which gives:</p>
<blockquote>
<p>[2016-04-05, 2016-04-06, 2016-04-07,....,]</p>
</blockquote>
<p>I need something like the code below to step through <em>Date</em> above to get the <em>frequency</em> for each date.</p>
<pre><code>for item in ListA:
    if item&gt;=Date[0] and item&lt;Date[1]:
        print(ListA.count(item))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> from the <code>collections</code> module this is very straight forward:</p>
<p><strong>Code:</strong></p>
<pre><code>dates = [
    '2016-04-05',
    '2016-04-05',
    '2016-04-07',
    '2016-09-10',
    '2016-03-05',
    '2016-07-11',
    '2017-01-01'
]

from collections import Counter
counts = Counter(dates)
print(sorted(counts.items()))
</code></pre>
<p><strong>Results:</strong></p>
<pre><code>[('2016-03-05', 1), ('2016-04-05', 2), 
 ('2016-04-07', 1), ('2016-07-11', 1), 
 ('2016-09-10', 1), ('2017-01-01', 1)]
</code></pre>
<p><strong>Build a list over <code>pandas.DatetimeIndex</code>:</strong></p>
<p>To build a list of lists over a range of dates is easy enough because a <code>Counter</code> will return <code>0</code> when indexed with a value for which the count is zero.</p>
<pre><code># pandas date range
dates = pd.date_range('2016-04-05', '2017-01-01', freq='D')

# counter for date we need counted
counts = Counter(pd.to_datetime(dates))

# build a list using a list comprehension of counts at all dates in range
date_occurence_sequence = [[d, counts[d]] for d in dates]
</code></pre>
<p><strong>Add to per day dataframe:</strong></p>
<p>And since you seem to be using <code>pandas</code> let's insert the occurrence counts into a data frame indexed per day.</p>
<pre><code>import pandas as pd
index = pd.date_range('2016-04-05', '2017-01-01', freq='D')
df = pd.DataFrame([0] * len(index), index=index)
df.update(pd.DataFrame.from_dict(Counter(pd.to_datetime(dates)), 'index'))

print(df.head())
</code></pre>
<p><strong>Results:</strong></p>
<pre><code>              0
2016-04-05  2.0
2016-04-06  0.0
2016-04-07  1.0
2016-04-08  0.0
2016-04-09  0.0
</code></pre>
</div>
<span class="comment-copy">Thanks Stephen for that module. The thing is it needs to count the dates that have no occurrences like [2016-04-06, 0]. I guess I can append the time series dates to the ListA, do the Counter, then subtract them all by 1.</span>
<span class="comment-copy">Since you had a <code>pandas</code> function in some of your example, I added some <code>pandas</code> code to get your desired zero occurrences.</span>
