<div class="post-text" itemprop="text">
<p>I'm using <code>Ubuntu 16.04</code>, and I always use <code>python3 -m vevn venv</code> to create my Python's virtual environment and <code>source venv/bin/active</code> to activate it.</p>
<p>I've made sure my global system environment's pip3 is in the latest version which is, for example, <code>9.0.1</code>, but every time I create a virtual environment by using the command as described above, the initial venv's pip3 version is always the older one, for example, <code>8.1.1</code>, which makes the system remind me to upgrade my pip3 every time.</p>
<p>I've tried <code>sudo apt-get install --upgrade python3-venv</code> in my system environment but everything is in the newest version.</p>
<p>How can I make Python3's venv uses the same version of pip3 as my system's one so that I don't have to upgrade my pip3 every time I create a virtual environment? How is the version of the venv's pip3 be decided?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>There was a similar <a href="https://stackoverflow.com/questions/32296580/pyvenv-installs-wrong-pip-version">question</a> regarding <code>pyvenv</code>, the predecessor of <code>venv</code>.
Here's the relevant part of the answer:</p>
<blockquote>
<p>Ensurepip package won't download from the internet or grab files from anywhere else, because all required components are already included into the package. Doing so would add security flaws and is thus unsupported.</p>
</blockquote>
<p>The package doesn't get updated as often as <code>pip</code> does.</p>
<p>I solved the issue with a hotkey set up with the following command: </p>
<p><code>$ python3 -m venv venv &amp;&amp; source venv/bin/activate &amp;&amp; pip3 install --upgrade pip</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I managed to install the latest version on my Windows. But this method <strong>may cause security issues</strong>. <em>Be aware what you are doing</em> before you try this one.</p>
<p>I only tested it on Python 3.5.2 on Windows. Better not try it if you are using Python2.x.</p>
<p>First, to figure out what version your <code>venv</code> using. Use:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import venv
&gt;&gt;&gt; print(inspect.getsource(venv))
[the source of venv goes here]
</code></pre>
<p>And you will find that in the defination of function <code>_setup_pip</code>:</p>
<pre><code>def _setup_pip(self, context):
    """Installs or upgrades pip in a virtual environment"""
    # We run ensurepip in isolated mode to avoid side effects from
    # environment vars, the current directory and anything else
    # intended for the global Python environment
    cmd = [context.env_exe, '-Im', 'ensurepip', '--upgrade',
                                                '--default-pip']
    subprocess.check_output(cmd, stderr=subprocess.STDOUT)
</code></pre>
<p>This function tells us that the pip is install by another python package called <code>ensurepip</code>. So we will go to the source of <code>ensurepip</code> by using:</p>
<pre><code>&gt;&gt;&gt; import ensurepip
&gt;&gt;&gt; print(inspect.getsource(ensurepip))
[the source of ensure pip goes here]
</code></pre>
<p>In the first few lines of the source, your will get:</p>
<pre><code>_SETUPTOOLS_VERSION = "20.10.1"
_PIP_VERSION = "8.1.1"
</code></pre>
<p>This is the version info the <code>ensurepip</code> bundled with. But only change this two lines will only cause the failure because you haven't change the local .whl package. So where are the .whl package located? Here it is, inside the source in the function <code>bootstrap</code>:</p>
<pre><code>def bootstrap(*, root=None, upgrade=False, user=False,
              altinstall=False, default_pip=False,
              verbosity=0):
    ...
    with tempfile.TemporaryDirectory() as tmpdir:
    # Put our bundled wheels into a temporary directory and construct the
    # additional paths that need added to sys.path
    additional_paths = []
    for project, version in _PROJECTS: # *pay attention to these lines*
        wheel_name = "{}-{}-py2.py3-none-any.whl".format(project, version)
        whl = pkgutil.get_data(
            "ensurepip",
            "_bundled/{}".format(wheel_name),
        )
        with open(os.path.join(tmpdir, wheel_name), "wb") as fp:
            fp.write(whl)

        additional_paths.append(os.path.join(tmpdir, wheel_name))
    ...
</code></pre>
<p>Notice the line what I commented. So this tell us, the .whl files located in <code>ensure/_bundled/</code> directory, you may also use <code>inspect.getsourcefile(ensurepip)</code>. What I got is <code>'c:\\python35\\lib\\ensurepip\\__init__.py'</code>.</p>
<p>Go to this directory, you got two files: <code>pip-8.1.1-py2.py3-none-any.whl</code>, <code>setuptools-20.10.1-py2.py3-none-any.whl</code>.</p>
<p>What I wrote above is just for you to understand what we are doing, <strong>so following is what you need to do</strong>:</p>
<ol>
<li>Go to <code>/your/python/lib/dir/ensurepip/_bundled/</code>.</li>
<li><p>download pip wheel file with command, I got <code>pip-9.0.1-py2.py3-none-any.whl</code>:</p>
<p><code>$ pip download pip</code></p></li>
<li><p>Edit the source of <code>ensurepip</code>. In the <code>ensurepip/__init__.py</code>, edit like this and save it:</p>
<pre><code># _PIP_VERSION = "8.1.1" # comment this line 
_PIP_VERSION = "9.0.1" # add this line
</code></pre></li>
<li><p>Now you make it. To check the pip version:</p>
<pre><code>$ python -m venv testpip
$ cd testpip
$ .\Scripts\activate.bat (in Linux, use '$ source ./bin/activate' instead.)
(testpip) $ pip --version
pip 9.0.1 from the \your\venv\testpip\lib\site-packages (python 3.5)
</code></pre></li>
</ol>
<p><em>Be aware don't do the same with <code>setuptools</code> because it has some other dependencies which make it more complicated.</em></p>
<p>Happy hacking :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Create your venv <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">using --system-site-packages</a>:</p>
<pre><code>python3 -m venv --system-site-packages venv
</code></pre>
<p>And you'll be using your system's pip3.</p>
</div>
