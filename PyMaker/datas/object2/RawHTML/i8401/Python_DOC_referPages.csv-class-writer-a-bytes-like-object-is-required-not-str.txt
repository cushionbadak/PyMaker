<div class="post-text" itemprop="text">
<p>For a personal project I'm trying to upgrade the <strong>paterns</strong> package to Python 3. 
Actually I'm running the test:db.py,  but I'm stuck with the following error in the <strong>'__init__.py'</strong> file, on a csv class:</p>
<p>This is the code snippet od the <strong>save()</strong> function:
there, we dfine <strong>s</strong> as a <strong>BytesIO()</strong> stream, so the function is asked to stream bytes to a <em>self</em> csv file.
The error comes from the line: </p>
<pre><code>w.writerows([[csv_header_encode(name, type) for name, type in self.fields]])

TypeError: a bytes-like object is required, not 'str' ( below, also the code for this function)
</code></pre>
<p>it's supposed that csv_header_encode to deliver bytes, and I checked this and it does, but somehow, in its conversion to list it changes to 'str'.
And if I change the <strong>s</strong> encoding to StringsIO then the complaining comes from</p>
<pre><code> f.write(BOM_UTF8)
</code></pre>
<p>Any help will be appreciated.</p>
<pre><code>def save(self, path, separator=",", encoder=lambda v: v, headers=False, password=None, **kwargs):
    """ Exports the table to a unicode text file at the given path.
        Rows in the file are separated with a newline.
        Columns in a row are separated with the given separator (by default, comma).
        For data types other than string, int, float, bool or None, a custom string encoder can be given.
    """
    # Optional parameters include all arguments for csv.writer(), see:
    # http://docs.python.org/library/csv.html#csv.writer
    kwargs.setdefault("delimiter", separator)
    kwargs.setdefault("quoting", csvlib.QUOTE_ALL)
    # csv.writer will handle str, int, float and bool:
    s = BytesIO()
    w = csvlib.writer(s,  **kwargs)
    if headers and self.fields is not None:
        w.writerows([[csv_header_encode(name, type) for name, type in self.fields]])
    w.writerows([[encode_utf8(encoder(v)) for v in row] for row in self])
    s = s.getvalue()
    s = s.strip()
    s = re.sub("([^\"]|^)\"None\"", "\\1None", s)
    s = (s if not password else encrypt_string(s, password)).encode('latin-1')
    f = open(path, "wt")
    f.write(BOM_UTF8)
    f.write(s)
    f.close()

def csv_header_encode(field, type=STRING):
    # csv_header_encode("age", INTEGER) =&gt; "age (INTEGER)".
    t = re.sub(r"^varchar\(.*?\)", "string", (type or ""))
    t = t and " (%s)" % t or ""
    return "%s%s" % (encode_utf8(field or ""), t.upper())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may be trying to write to a <code>BytesIO</code> object, but <code>csv.writer()</code> deals in <em>strings</em> only. From the <a href="https://docs.python.org/3/library/csv.html#writer-objects" rel="nofollow noreferrer"><code>csv</code> writer objects documentation</a>:</p>
<blockquote>
<p>A row must be an iterable of <strong>strings or numbers</strong></p>
</blockquote>
<p>Emphasis mine. <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer"><code>csv.writer()</code></a> also requires a <em>text</em> file to write to; the object produces strings:</p>
<blockquote>
<p>[...] converting the userâ€™s data into <strong>delimited strings</strong> on the given file-like object.</p>
</blockquote>
<p>Either use an <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><code>io.StringIO</code> object</a> instead, or wrap the <code>BytesIO</code> object in an <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer"><code>io.TextIOWrapper</code> object</a> to handle encoding for you. Either way, you'll need to pass in Unicode text to <code>csv.writer()</code>.</p>
<p>Because you are later on treating the <code>s.getvalue()</code> data as <em>strings</em> again (using regular expressions defined as strings, and using encoding to Latin-1), you probably want to write to text file (so <code>StringIO</code>).</p>
<p>That <code>f.write(BOM_UTF8)</code> fails is a <em>separate issue</em>. <code>f</code> was opened in text mode (<code>'wt'</code>) so expects strings, not <code>bytes</code>. If you want to write 
 text to a file encoded as UTF-8 with an UTF-8 BOM at the start you can use the <code>utf-8-sig</code> encoding when opening the file:</p>
<pre><code>open(path, 'w', encoding='utf-8-sig')
</code></pre>
<p>Generally, you appear to be mixing bytes and strings in all the wrong ways. Leave text <em>as text</em> for as long as possible, and only encode at the last possible moment. Here that moment would be when writing to the file at location <code>path</code>, and you can leave the encoding entirely to the file object.</p>
</div>
<span class="comment-copy">Can you show us an example of why you need the <code>re.sub("([^\"]|^)\"None\"", "\\1None", s)</code> replacement? This looks likely to break your CSV output for quoted values.</span>
<span class="comment-copy">Ah, you are trying to <i>unquote</i> <code>None</code> strings? A proper CSV reader will <i>remove</i> the quotes again anyway, why the bother? You probably should not use <code>csv.QUOTE_ALL</code>, and just leave quoting to the writer.</span>
<span class="comment-copy">This is original code. As I said, I was just trying to upgrade it with minimal mods.</span>
<span class="comment-copy">Right. As I said, changing to <b>StringIO</b> solves the first error and raises the second. I changed the open method as you sugested{ f = open(path, "w",  encoding='utf-8-sig') } but then it comes the error: { write() argument must be str, not bytes}</span>
<span class="comment-copy">@FSRubyc: which is why we ask people to create a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> of a problem, and ask separate questions about separate issues.</span>
<span class="comment-copy">@FSRubyc: yes, as I state in my answer, <i>keep everything as text</i>, not bytes.</span>
<span class="comment-copy">@FSRubyc: also, why are you attempting to encode something as Latin-1 bytes but prepend it with a UTF-8 BOM? Pick an encoding and stick to it. Preferably leave it to the file object to handle encoding.</span>
<span class="comment-copy">Thanks Martijin for your time. Well, somtimes you win and sometimes you learn.</span>
