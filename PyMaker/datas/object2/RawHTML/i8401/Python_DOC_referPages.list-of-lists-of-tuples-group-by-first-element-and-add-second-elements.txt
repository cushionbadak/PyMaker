<div class="post-text" itemprop="text">
<p>Let's say I have the following list of lists of tuples:</p>
<pre><code>tuples = [
             [ 
                 ('2017-04-11', '2000000.00'), 
                 ('2017-04-12', '1000000.00'), 
                 ('2017-04-13', '3000000.00')
             ],
             [
                 ('2017-04-12', '472943.00'), 
                 ('2017-04-13', '1000000.00')
             ]
             # ...
         ]
</code></pre>
<p>How would I go about grouping them based off of the first element (date) and adding the other element.</p>
<p>For instance I'd like something like this:</p>
<pre><code>tuples = [('2017-04-11', '2000000.00'), ('2017-04-12', '1472943.00'), ('2017-04-13', '4000000.00')],
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution using <code>itertools.chain.from_iterable</code>, <code>itertools.groupby</code> and <code>sum</code> functions:</p>
<pre><code>import itertools, operator

tuples = [
         [('2017-04-11', '2000000.00'), ('2017-04-12', '1000000.00'), ('2017-04-13', '3000000.00')],
         [('2017-04-12', '472943.00'), ('2017-04-13', '1000000.00')]
         ]

result = [(k, "%.2f" % sum(float(t[1]) for t in g)) 
          for k,g in itertools.groupby(sorted(itertools.chain.from_iterable(tuples)), operator.itemgetter(0))]

print(result)
</code></pre>
<p>The output:</p>
<pre><code>[('2017-04-11', '2000000.00'), ('2017-04-12', '1472943.00'), ('2017-04-13', '4000000.00')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, flat a list of tuples out of a list of lists of tuples, and then use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>,</p>
<pre><code>import itertools 
import operator

lists = [
         [('2017-04-11', '2000000.00'), ('2017-04-12', '1000000.00'), ('2017-04-13', '3000000.00')],
         [('2017-04-12', '472943.00'), ('2017-04-13', '1000000.00')]
         ]

# Step 1: Flat a list of tuples out of a list of lists of tuples
list_tuples = [t for sublist in lists for t in sublist]
'''
[('2017-04-11', '2000000.00'), ('2017-04-12', '1000000.00'), ('2017-04-13', '3000000.00'), ('2017-04-12', '472943.00'), ('2017-04-13', '1000000.00')]
'''

# Step 2: Groupby
results = list()

for key, group in itertools.groupby(sorted(list_tuples), operator.itemgetter(0)):
    s = sum(float(t[1]) for t in group)
    results.append((key, s))

print(results)
#[('2017-04-11', 2000000.0), ('2017-04-12', 1472943.0), ('2017-04-13', 4000000.0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My way is to convert the nested list to flat list and iterate it:</p>
<pre><code>t = [
         [('2017-04-11', '2000000.00'), ('2017-04-12', '1000000.00'), ('2017-04-13', '3000000.00')],
         [('2017-04-12', '472943.00'), ('2017-04-13', '1000000.00')]
         ]
a={}

for i,j in sum(t,[]):
    a[i]=a[i]+float(j) if i in a else float(j)

print(a)
</code></pre>
<p>Output:</p>
<pre><code>{'2017-04-11': 2000000.0, '2017-04-13': 4000000.0, '2017-04-12': 1472943.0}
</code></pre>
<p>If you want a list, you can use <code>[(k,v) for k,v in a.items()])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Flattening the list then using defaultdict:</p>
<pre><code>from collections import defaultdict

flattened_tuples = [item for sublist in tuples for item in sublist]

result = defaultdict(float)
for date, value in flattened_tuples:
    result[date] += float(value)
print(result)
</code></pre>
<p>returns
<code>{'2017-04-11': 2000000.0, '2017-04-12': 1472943.0, '2017-04-13': 4000000.0}</code></p>
</div>
<span class="comment-copy">So you've posted your input and your expected result. But where's your approach on solving the problem on your own? Please post your code and tell us where you got stuck.</span>
<span class="comment-copy">By seeing expected output could not understand clear. But: Make group identity as key and create a dictionary out of that. <code>{ "group-identity", [your-list-mentioned-above] }</code>. create data in this format using python. Is this what you looking for?</span>
<span class="comment-copy">I've asked a question, because I tried numerous solutions and couldn't get it to work. I tried map, itertools.izip_longest without any luck @mpf82</span>
