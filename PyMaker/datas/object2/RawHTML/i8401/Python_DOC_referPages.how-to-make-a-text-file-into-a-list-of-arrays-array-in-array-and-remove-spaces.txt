<div class="post-text" itemprop="text">
<p>For example I have a txt file:</p>
<pre class="lang-none prettyprint-override"><code>3 2 7 4
1 8 9 3
6 5 4 1
1 0 8 7
</code></pre>
<p>On every line there are 4 numbers and there are 4 lines. At end of lines there's \n (except the last one). The code I have is:</p>
<pre><code>f = input("Insert file name: ")
file = open(f, encoding="UTF-8")
</code></pre>
<p>What I want is the text file to become <code>[[3,2,7,4],[1,8,9,3],[6,5,4,1],[1,0,8,7]]</code>.</p>
<p>I have tried everything, I know the answer is probably really simple, but I just really give up after an hour of attempts. Tried <code>read()</code>, <code>readlines()</code>, <code>split()</code>, <code>splitlines()</code>, <code>strip()</code> and whatever else I could find on the internet. So many can't even make a difference between them...</p>
</div>
<div class="post-text" itemprop="text">
<p>Once you opened the file, use this one-liner using <code>split</code> as you mentionned and nested list comprehension:</p>
<pre><code>with open(f, encoding="UTF-8") as file:   # safer way to open the file (and close it automatically on block exit)
    result = [[int(x) for x in l.split()] for l in file]
</code></pre>
<ul>
<li>the inner listcomp splits &amp; converts each line to integers (making an array of integers)</li>
<li>the outer listcomp just iterates on the lines of the file</li>
</ul>
<p>note that it will fail if there are something else than integers in your file.</p>
<p>(as a side note, <code>file</code> is a built-in in python 2, but not anymore in python 3, however I usually refrain from using it)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do like this,</p>
<pre><code>[map(int,i.split()) for i in filter(None,open('abc.txt').read().split('\n'))]
</code></pre>
<p>Line by line execution for more information</p>
<pre><code>In [75]: print open('abc.txt').read()
3 2 7 4

1 8 9 3

6 5 4 1

1 0 8 7
</code></pre>
<p><code>split</code> with newline.</p>
<pre><code>In [76]: print open('abc.txt').read().split('\n')
['3 2 7 4', '', '1 8 9 3', '', '6 5 4 1', '', '1 0 8 7', '']
</code></pre>
<p>Remove the unnecessary null string.</p>
<pre><code>In [77]: print filter(None,open('abc.txt').read().split('\n'))
['3 2 7 4', '1 8 9 3', '6 5 4 1', '1 0 8 7']
</code></pre>
<p><code>split</code> with spaces</p>
<pre><code>In [78]: print [i.split() for i in filter(None,open('abc.txt').read().split('\n'))]
[['3', '2', '7', '4'], ['1', '8', '9', '3'], ['6', '5', '4', '1'], ['1', '0', '8', '7']]
</code></pre>
<p>convert the element to <code>int</code></p>
<pre><code>In [79]: print [map(int,i.split()) for i in filter(None,open('abc.txt').read().split('\n'))]
[[3, 2, 7, 4], [1, 8, 9, 3], [6, 5, 4, 1], [1, 0, 8, 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following uses a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to create a list-of-lists. It reads each line from the file, splits it up using whitespace as a delimiter, uses the <code>map</code> function to create an iterator that returns the result of calling the <code>int</code> integer constructor on each of the string elements found in the line this way, and lastly creates a sub-list from that. </p>
<p>This process is repeated for each line in the file, each time resulting is a sub-list of the final list container object.</p>
<pre><code>f = input("File name? ")
with open(f, encoding="UTF-8") as file:
    data = [list(map(int, line.split())) for line in file]
print(data)  # -&gt; [[3, 2, 7, 4], [1, 8, 9, 3], [6, 5, 4, 1], [1, 0, 8, 7]]
</code></pre>
</div>
<span class="comment-copy">Always use <code>with</code> statement for opening the files. It will close the file object at the end of the block automatically. Beside, you should use consider using <code>csv</code> module which is more suitable for this case. Read your file with <code>csv</code> and it will gives you an iterable contain all lines splitted. Then <code>list(reader_object)</code> will give  you the desire result.</span>
<span class="comment-copy">looks like a duplicate, but not easy to find an original solving this. This is a good question because the title says it all, and the body is short &amp; documented enough. Great first post.</span>
<span class="comment-copy">Do you think you'd be able to add to the body of your answer to give a description of how your code functions?</span>
<span class="comment-copy">@George: Sure, see updated answer.</span>
