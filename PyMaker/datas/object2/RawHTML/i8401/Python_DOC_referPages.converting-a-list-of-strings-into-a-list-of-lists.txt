<div class="post-text" itemprop="text">
<p>I have a list of strings, that I'm trying to convert into a list of lists. My 
list of strings looks like this. </p>
<pre><code>['[[try', 'not', 'become', 'man', 'success', 'but', 'rather', 'try', 
'become', 'man', 'value]', '[look', 'deep', 'into', 'nature', 'and', 'then', 
'you', 'will', 'understand', 'everything', 'better]', '[the', 'true', 
'sign', 'intelligence', 'not', 'knowledge', 'but', 'imagination]', '[we', 
'cannot', 'solve', 'our', 'problems', 'with', 'the', 'same', 'thinking', 
'used', 'when', 'created', 'them]', '[weakness', 'attitude', 'becomes', 
'weakness', 'character]', '["you', 'cant', 'blame', 'gravity', 'for', 
'falling', 'love"]', '[the', 'difference', 'between', 'stupidity', 'and',
'genius', 'that', 'genius', 'has', 'its', 'limits]]']
</code></pre>
<p>My <strong>desired output</strong> would look like this:</p>
<pre><code> [[['try', 'not', 'become', 'man', 'success', 'but', 'rather', 'try',
 'become', 'man', 'value], [look', 'deep', 'into', 'nature', 'and', 'then',
 'you', 'will', 'understand', 'everything', 'better], [the', 'true', 'sign', 
 'intelligence', 'not', 'knowledge', 'but', 'imagination], [we', 'cannot', 
 'solve', 'our', 'problems', 'with', 'the', 'same', 'thinking', 'used', 
 'when', 'created', 'them], [weakness', 'attitude', 'becomes', 'weakness', 
 'character], ["you', 'cant', 'blame', 'gravity', 'for', 'falling', 'love"],
 [the', 'difference', 'between', 'stupidity', 'and', 'genius', 'that', 
 'genius', 'has', 'its', 'limits']]]
</code></pre>
<p>My output currently looks like this:</p>
<pre><code> [['[', '[', 't', 'r', 'y'], ['n', 'o', 't'], ['b', 'e', 'c', 'o', 'm', 
 'e'], ['m', 'a', 'n'], ['s', 'u', 'c', 'c', 'e', 's', 's'], ['b', 'u', 
 't'], ['r', 'a', 't', 'h', 'e', 'r'], ['t', 'r', 'y'], ['b', 'e', 'c', 'o', 
 'm', 'e'], ['m', 'a', 'n'], ['v', 'a', 'l', 'u', 'e', ']'], ['[', 'l', 'o', 
 'o', 'k'], ['d', 'e', 'e', 'p'], ['i', 'n', 't', 'o'], ['n', 'a', 't', 'u',
 'r', 'e'], ['a', 'n', 'd'], ['t', 'h', 'e', 'n'], ['y', 'o', 'u'], ['w', 
 'i', 'l', 'l'], ['u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd'], ['e', 
 'v', 'e', 'r', 'y', 't', 'h', 'i', 'n', 'g'], ['b', 'e', 't', 't', 'e', 
 'r', ']'], ['[', 't', 'h', 'e'], ['t', 'r', 'u', 'e'], ['s', 'i', 'g', 
 'n'], ['i', 'n', 't', 'e', 'l', 'l', 'i', 'g', 'e', 'n', 'c', 'e'], ['n', 
 'o', 't'], ['k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e'], ['b', 'u', 't'], 
 ['i', 'm', 'a', 'g', 'i', 'n', 'a', 't', 'i', 'o', 'n', ']'], ['[', 'w', 
 'e'], ['c', 'a', 'n', 'n', 'o', 't'], ['s', 'o', 'l', 'v', 'e'], ['o', 'u',
 'r'], ['p', 'r', 'o', 'b', 'l', 'e', 'm', 's'], ['w', 'i', 't', 'h'], ['t', 
 'h', 'e'], ['s', 'a', 'm', 'e'], ['t', 'h', 'i', 'n', 'k', 'i', 'n', 'g'], 
 ['u', 's', 'e', 'd'], ['w', 'h', 'e', 'n'], ['c', 'r', 'e', 'a', 't', 'e', 
 'd'], ['t', 'h', 'e', 'm', ']'], ['[', 'w', 'e', 'a', 'k', 'n', 'e', 's', 
 's'], ['a', 't', 't', 'i', 't', 'u', 'd', 'e'], ['b', 'e', 'c', 'o', 'm', 
 'e', 's'], ['w', 'e', 'a', 'k', 'n', 'e', 's', 's'], ['c', 'h', 'a', 'r', 
 'a', 'c', 't', 'e', 'r', ']'], ['[', '"', 'y', 'o', 'u'], ['c', 'a', 'n', 
 't'], ['b', 'l', 'a', 'm', 'e'], ['g', 'r', 'a', 'v', 'i', 't', 'y'], ['f', 
 'o', 'r'], ['f', 'a', 'l', 'l', 'i', 'n', 'g'], ['l', 'o', 'v', 'e', '"', 
 ']'], ['[', 't', 'h', 'e'], ['d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 
 'e'], ['b', 'e', 't', 'w', 'e', 'e', 'n'], ['s', 't', 'u', 'p', 'i', 'd', 
 'i', 't', 'y'], ['a', 'n', 'd'], ['g', 'e', 'n', 'i', 'u', 's'], ['t', 'h',
  'a', 't'], ['g', 'e', 'n', 'i', 'u', 's'], ['h', 'a', 's'], ['i', 't', 
  's'], ['l', 'i', 'm', 'i', 't', 's', ']', ']']]
</code></pre>
<p>Here is the text file's contents:</p>
<pre><code>Try not to become a man of success, but rather try to become a man of value. 
Look deep into nature, and then you will understand everything better.
The true sign of intelligence is not knowledge but imagination. 
We cannot solve our problems with the same thinking we used when we created them. 
Weakness of attitude becomes weakness of character.
You can't blame gravity for falling in love. 
The difference between stupidity and genius is that genius has its limits.
</code></pre>
<p>Here's the code I have written thus far:</p>
<pre><code>Info = [[line.strip()] for line in Info] 
#Turns original list into lists of lists breaking at each new line
Info_Str = str(Info) #Converts list into string to manipulate easier
Info_Str = Info_Str.lower() #Converts all characters to lowercase
Info_Str = Info_Str.replace(".", "")
Info_Str = Info_Str.replace("!", "")
Info_Str = Info_Str.replace("?", "")
Info_Str = Info_Str.replace(":", "")
Info_Str = Info_Str.replace(",", "")
Info_Str = Info_Str.replace(";", "")
Info_Str = Info_Str.replace("'", "")
Info_Str = Info_Str.replace("-", "")
#The above functions remove all punctuation will leaving the '[]' for the lists
Info_Str = Info_Str.split()
Info_List = Info_Str
New_List = [item for item in Info_List if not item.isdigit()] #Removes all numbers
for word in New_List[:]: #Removes words if their length is less than 3 characters 
    if len(word) &lt; 3:
        New_List.remove(word)
print(New_List) #List of Strings
List_Lists = [list(line) for line in New_List]
print(List_Lists)
</code></pre>
<p>I know it's not very elegant, I haven't been coding for very long</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you're trying to do</p>
<pre><code>all_lines = []
keep=set('qazwsxedcrfvtgbyhnujmikolp QAZWSXEDCRFVTGBYHNUJMIKOLP')
for line in Info:
    line = str(line)
    line = ''.join(filter(keep.__contains__, line))
    line = line.split()
    for word in line:
        if len(word)&lt;3:
            line.remove(word)
    all_lines.append(line)
print (all_lines)
</code></pre>
<p>result:</p>
<pre><code>[['Try', 'not', 'become', 'man', 'success', 'but', 'rather', 'try', 'become', 'man', 'value'],
 ['Look', 'deep', 'into', 'nature', 'and', 'then', 'you', 'will', 'understand', 'everything', 'better'],
 ['The', 'true', 'sign', 'intelligence', 'not', 'knowledge', 'but', 'imagination'],
 ['cannot', 'solve', 'our', 'problems', 'with', 'the', 'same', 'thinking', 'used', 'when', 'created', 'them'],
 ['Weakness', 'attitude', 'becomes', 'weakness', 'character'],
 ['You', 'cant', 'blame', 'gravity', 'for', 'falling', 'love'],
 ['The', 'difference', 'between', 'stupidity', 'and', 'genius', 'that', 'genius', 'has', 'its', 'limits']]
</code></pre>
<p>credit to @AdamSmith for pointing out the following change to make things more readable and simple:</p>
<pre><code>import string
keep=set(string.ascii_lowercase + string.ascii_uppercase + " ")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>Info_Str = str(Info) #Converts list into string to manipulate easier
</code></pre>
<p>I think converting your list into a string makes things harder, not easier.</p>
<p>I'd probably do something like:</p>
<pre><code>def remove_special_characters(s):
    for c in ".!?:,;'-0123456789":
        s = s.replace(c, "")
    return s

lines = []
with open("data.txt") as file:
    for line in file:
        words = []
        for word in line.split():
            word = word.lower()
            word = remove_special_characters(word)
            if len(word) &gt;= 3:
                words.append(word)
        lines.append(words)
print(lines)
</code></pre>
<p>Result (newlines added by me for added readability):</p>
<pre><code>[['Try', 'not', 'become', 'man', 'success', 'but', 'rather', 'try', 'become', 'man', 'value'], 
['Look', 'deep', 'into', 'nature', 'and', 'then', 'you', 'will', 'understand', 'everything', 'better'], 
['The', 'true', 'sign', 'intelligence', 'not', 'knowledge', 'but', 'imagination'], 
['cannot', 'solve', 'our', 'problems', 'with', 'the', 'same', 'thinking', 'used', 'when', 'created', 'them'], 
['Weakness', 'attitude', 'becomes', 'weakness', 'character'], 
['You', 'cant', 'blame', 'gravity', 'for', 'falling', 'love'], 
['The', 'difference', 'between', 'stupidity', 'and', 'genius', 'that', 'genius', 'has', 'its', 'limits']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get a list of all your words excluding any spaces and special characters, you can use the regular expression <code>\w+</code> (at least one word-character) in combination with <code>findall()</code>:</p>
<pre><code>import re

text = '''Try not to become a man of success, but rather try to become a man of value. 
Look deep into nature, and then you will understand everything better.
The true sign of intelligence is not knowledge but imagination. 
We cannot solve our problems with the same thinking we used when we created them. 
Weakness of attitude becomes weakness of character.
You can't blame gravity for falling in love. 
The difference between stupidity and genius is that genius has its limits.'''


re.findall(r'\w+', text)
â†’ ['Try', 'not', 'to', 'become', 'a', 'man', 'of', 'success', 'but', 'rather', 'try', 'to', 'become', 'a', 'man', 'of', 'value', 'Look', 'deep', 'into', 'nature', 'and', 'then', 'you', 'will', 'understand', 'everything', 'better', 'The', 'true', 'sign', 'of', 'intelligence', 'is', 'not', 'knowledge', 'but', 'imagination', 'We', 'cannot', 'solve', 'our', 'problems', 'with', 'the', 'same', 'thinking', 'we', 'used', 'when', 'we', 'created', 'them', 'Weakness', 'of', 'attitude', 'becomes', 'weakness', 'of', 'character', 'You', 'can', 't', 'blame', 'gravity', 'for', 'falling', 'in', 'love', 'The', 'difference', 'between', 'stupidity', 'and', 'genius', 'is', 'that', 'genius', 'has', 'its', 'limits']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick answer using regex:</p>
<pre><code>import re
messy_list = ['[[try', 'not', 'become', 'man', 'success', 'but', 
    'rather', 'try', 
    'become', 'man', 'value]', '[look', 'deep', 'into', 'nature', 
    'and', 'then', 
    'you', 'will', 'understand', 'everything', 'better]', '[the', 
    'true', 
    'sign', 'intelligence', 'not', 'knowledge', 'but', 'imagination]', '[we', 
    'cannot', 'solve', 'our', 'problems', 'with', 'the', 'same', 'thinking', 
    'used', 'when', 'created', 'them]', '[weakness', 'attitude', 'becomes', 
    'weakness', 'character]', '["you', 'cant', 'blame', 'gravity', 'for', 
    'falling', 'love"]', '[the', 'difference', 'between', 'stupidity', 'and',
    'genius', 'that', 'genius', 'has', 'its', 'limits]]'
]
# clean up double quotes in items of list
messy_list = [item.replace("\"", "") for item in messy_list]
# find word pattern in a string
pattern = re.compile(r"(\w+)")
# replace word pattern by adding single quotes before and after each word
clean_string = pattern.sub(r"\g\'&lt;1&gt;\'",  ",".join(messy_list))
# evaluate a string
print eval(clean_string)
</code></pre>
<p>And the result is:</p>
<pre><code>"[['try','not','become','man','success','but','rather','try','become','man','value'],['look','deep','into','nature','and','then','you','will','understand','everything','better'],['the','true','sign','intelligence','not','knowledge','but','imagination'],['we','cannot','solve','our','problems','with','the','same','thinking','used','when','created','them'],['weakness','attitude','becomes','weakness','character'],['you','cant','blame','gravity','for','falling','love'],['the','difference','between','stupidity','and','genius','that','genius','has','its','limits']]"
</code></pre>
</div>
<span class="comment-copy">Where does this list of strings come from? It looks like you've simply split a string representation of nested lists on <code>', '</code>, rather than use e.g. <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to actually parse it.</span>
<span class="comment-copy">Show code we can help with...</span>
<span class="comment-copy"><code>ast.literal_eval</code> or some kind of parsing a step before anything you've provided here is most likely the solution, as Jon eluded to.</span>
<span class="comment-copy">It looks like you are presenting us the already messed up in-between result of your attempt to parse something. Please post the original.</span>
<span class="comment-copy">How did you get from <a href="http://stackoverflow.com/q/43316865/3001761">here</a>, where you basically just needed to split the items in the list, to what you've shown above? It looks like you made a list, which is what you actually needed, but then turned it into a string representation and split it back up. Don't just give a code dump, provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Thank you, I was able to get my desired output</span>
<span class="comment-copy">for what it's worth, you should prefer <code>keep = set(string.ascii_lowercase + string.ascii_uppercase + " ")</code> That makes it much more obvious to everybody that you haven't missed a letter.</span>
<span class="comment-copy">@AdamSmith this gives me a NameError: name 'string' is not defined when I try it</span>
<span class="comment-copy">(that's because you have to import <code>string</code>, which is part of the stdlib)</span>
<span class="comment-copy">@AdamSmith o ok</span>
<span class="comment-copy">This does not appear to be the output OP wants. He seems to want <code>[line.split() for line in text.splitlines()]</code> or something like that. Certainly at least nested two deep.</span>
<span class="comment-copy">I think the OP has not found the right way to express what exactly he wants. I hope you agree that a 3-times nested list with one item is not useful. So from what could be useful to him I forged this answer so it can at least be a base to work on.</span>
<span class="comment-copy">I think this is useful, but it's not the answer to the question he's asking. That said, since you can combine this with other things he has to do (e.g. <code>[word.lower() for word in re.findall(r"\w{3,}", text)]</code>) it might end up being better than the implementation he has in mind already. Still: <code>[[word.lower() for word in sentence if len(word) &gt;= 3] for sentence in text.splitlines()]</code> isn't too scary.</span>
