<div class="post-text" itemprop="text">
<p>Can anyone please explain the below implementation:</p>
<pre><code>item = dict((i.tag, (type(i.text) == str and i.text.strip() or i.text)) for i in r if i.tag != "tid_item")
</code></pre>
<p>The values I am getting in various variables:</p>
<pre><code>r is something like : &lt;Element 'Rows' at 0x0000000003DA4540&gt;
i.tag : resultNum
i : &lt;Element 'resultNum' at 0x0000000003EA45A0&gt;
i.text : 1
</code></pre>
<p>I am python novice and I am unable to understand how forloop is used within dictionary as values are also absurd.</p>
<p>Thanks for help!</p>
</div>
<div class="post-text" itemprop="text">
<p>let's make first the code clearer:</p>
<pre><code>dict(               #  constructor
    (i.tag,         #  key
         (type(i.text) == str and i.text.strip() or i.text)     # value
    ) 
    for i in r                  # driver of the generator
    if i.tag != "tid_item"      # conditional selector
)
</code></pre>
<p>What you have here, is not yet a dictionary, but a constructor of a dictionary, using a generator. After this is run, the variable <code>item</code> it is assigned to will contain a dictionary</p>
<p>the for loop inside this constructor is the generator to create all the elements: it loops over all elements in r, if it satisfies the condition, then it will create a tuple ( key, value) -&gt; creating a 'on-the-fly' list of elements.</p>
<p>The boolean selector for the 'value' is also simple if we write it differently:</p>
<pre><code>value = i.text.strip() if (type(i.text) == str) else i.text
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, lets decompose your example:</p>
<pre><code>item_init = ((i.tag, (type(i.text) == str and i.text.strip() or i.text)) for i in r if i.tag != "tid_item")
item = dict(item_init)
</code></pre>
<p>Now, if you look at the definition of the type <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer"><code>dict</code></a>  in python (<code>help(dict)</code>), you will see that a dict object can be initialized with an <code>iterable</code> of (key, value) pairs. The <code>item_init</code> variable contains a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> and yield an iterable of tuples.</p>
<p>Next, look at the expression <code>(i.tag, (type(i.text) == str and i.text.strip() or i.text))</code>. You may not understand the second part of the expression because it looks like a boolean operation but is actually a conditionnal assignment operation which means:</p>
<blockquote>
<p>if <code>type(i.text)</code> is <code>str</code> then assign <code>i.text.strip()</code> else, assign <code>i.text</code></p>
</blockquote>
<p>Finally, the <code>item_init</code> object is a generator of 2-uples where, for each element of r, the first part is the tag and the second is the text (stripped, if necessary). The tag will be used as keys and the text as values in the final dict object.</p>
</div>
<span class="comment-copy">check out list Comprehensions for python. a usefull link is <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">secnetix.de/olli/Python/list_comprehensions.hawk</a></span>
<span class="comment-copy">@NikosVitaTopiko Bit misleading as there's no list comprehension here.</span>
<span class="comment-copy">Same principle, though, see <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">PEP 289 - Generator Expressions</a>. I voted to close as too broad, though this could also be marked as a duplicate of <a href="http://stackoverflow.com/questions/34835951/what-does-list-comprehension-mean-how-does-it-work-and-how-can-i-use-it">What does "list comprehension" mean and how do I use it</a> or some generator expression equivalent.</span>
