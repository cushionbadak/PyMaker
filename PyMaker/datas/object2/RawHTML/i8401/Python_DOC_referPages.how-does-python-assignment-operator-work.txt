<div class="post-text" itemprop="text">
<p>I write a linked list，when I use multiple assignment ,the result is strange。What's the different between python and javascript?</p>
<p>The sample python code</p>
<pre class="lang-py prettyprint-override"><code>class ListNode(object):
def __init__(self, x):
    self.val = x
    self.next = None

node=ListNode(0)
node=node.next=ListNode(10)
#expect node.next=ListNode(10) node=node.next
print(node ==node.next) # True why? 
</code></pre>
<p>The same logic JavaScript code </p>
<pre><code>function ListNode(val){
    this.val=val;
    this.next=null;
}
var node=new ListNode(0);
node=node.next=new ListNode(10)
console.log(node==node.next) //false
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, evaluation is in reverse order. Therefore this:</p>
<pre><code>node = node.next = ListNode(10)
</code></pre>
<p>is the same as this:</p>
<pre><code>node = ListNode(10)
node.next = node
</code></pre>
<p>So, you have to reverse order of elements before last assignment:</p>
<pre><code>node.next = node = ListNode(10)
# same as:
node.next = ListNode(10)
node = node.next
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually you're reassigning <code>node</code> to be equal to <code>node.next</code>, so <code>node == node.next</code> will always be <code>True</code> because those two variables are pointing at the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you are trying to accomplish with the line:</p>
<pre><code>node = node.next = ListNode(10)
</code></pre>
<p>If you just do:</p>
<pre><code>node.next = ListNode(10)
</code></pre>
<p>You will get the result you want</p>
<pre><code>in [1]: node=ListNode(0)

In [2]: node.val
Out[2]: 0

In [3]: node.next = ListNode(10)

In [4]: node.val
Out[4]: 0

In [5]: node.next.val
Out[5]: 10

In [6]: node == node.next
Out[6]: False    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The assignment operation is evaluated from right to left:</p>
<pre><code>node.next = ListNode(10)
node = node.next
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/17740639/how-does-this-chain-assignment-works">how does this chain assignment works?</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/7601823/how-do-chained-assignments-work">How do chained assignments work?</a></span>
<span class="comment-copy">The assignment <code>node.next = node = ListNode(10)</code> is the equivalent of <code>tmp = ListNode(10); node.next = tmp; node = tmp</code>, with the tmp variable hidden. The answer as written suggests that <code>node</code> isn't changed by the assignment, which isn't correct.</span>
<span class="comment-copy">@Craig Thanks. Fixed. :)</span>
<span class="comment-copy">@Craig  where can I know the assignment detail,I can't find in the Python Tutorial</span>
<span class="comment-copy">@shenli - It's in the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">documentation</a> <i>An assignment statement evaluates the expression list ... and assigns the single resulting object to each of the target lists, <b>from left to right</b></i> (emphasis mine). I would avoid using this construction for anything other than simple initialization. You see how much confusion it can cause. H/T: <a href="https://stackoverflow.com/questions/14056146/status-of-chained-assignment-in-python" title="status of chained assignment in python">stackoverflow.com/questions/14056146/…</a></span>
<span class="comment-copy">@Craig I see, thanks a lot</span>
<span class="comment-copy">This is no what's happening!</span>
