<div class="post-text" itemprop="text">
<p>Several Python structures seem to need a sentinel (probably in order to know when to "stop"). But why do some, like arrays of <code>PyMethodDef</code>, have a sentinel element initialized with multiple <code>NULL</code>s?</p>
<p>For example <a href="https://github.com/python/cpython/blob/master/Python/bltinmodule.c#L2560" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre class="lang-c prettyprint-override"><code>static PyMethodDef zip_methods[] = {
    {"__reduce__",   (PyCFunction)zip_reduce,   METH_NOARGS, reduce_doc},
    {NULL,           NULL}           /* sentinel */
};
</code></pre>
<p>Why does the last <code>PyMethodDef</code> in the "sentinel array" have the two <code>NULL</code>s? Why not just 1? Or given that <code>__reduce__</code> has 4 entries why not 4 <code>NULL</code>s as sentinel element?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think it does. For two reasons:</p>
<p>1) In the Python source code it only checks the name against NULL.</p>
<p>As far as I'm aware, <code>PyMethodDef</code> arrays are used in two places: when attaching methods to a type, and when attaching methods to a module.</p>
<p>To find the relevant bit of code start by noting that all types go through <code>PyType_Ready</code> and most modules go through <code>PyModule_Init</code> so start the search there. <code>PyModule_Create</code> forwards to <code>PyModule_Create2</code>. In <code>PyType_Ready</code> the methods get dealt with by the internal function <a href="https://github.com/python/cpython/blob/8e1ddbd592c3aaf02a58789771f891c0101c6e05/Objects/typeobject.c#L5071" rel="nofollow noreferrer"><code>add_methods</code></a>. In <code>PyModule_Create2</code> there is all call to <a href="https://github.com/python/cpython/blob/18b250f844bf8b2d1a81c2d2dcc74e850364fe35/Objects/moduleobject.c#L211" rel="nofollow noreferrer"><code>PyModule_AddFunctions</code></a> which is actually a <a href="https://docs.python.org/3/c-api/module.html#c.PyModule_AddFunctions" rel="nofollow noreferrer">public function</a> if you want to do low level stuff yourself and which in turn calls the internal function <code>_add_methods_to_object</code>.</p>
<p>Both of these internal functions have a for loop to loop over the methods and add them to the relevant dictionary. In <a href="https://github.com/python/cpython/blob/18b250f844bf8b2d1a81c2d2dcc74e850364fe35/Objects/moduleobject.c#L139" rel="nofollow noreferrer">both</a> <a href="https://github.com/python/cpython/blob/8e1ddbd592c3aaf02a58789771f891c0101c6e05/Objects/typeobject.c#L4654" rel="nofollow noreferrer">cases</a> the condition to continue looping is <code>meth-&gt;ml_name!=NULL</code>.</p>
<p>Therefore, at least currently, only the name is checked.</p>
<p>2) <a href="https://stackoverflow.com/questions/10828294/c-and-c-partial-initialization-of-automatic-structure">In both C and C++ partial initialization guarantees that the remaining fields are zero/default initialized</a>. Therefore just initializing the first element of the sentinel to 0 ensures that all the other elements are initialized to 0. You can even just use <code>{}</code>.</p>
<p>(As a side note, Python uses this automatic zero initialization a lot with the large structs it defines, for example <a href="https://docs.python.org/3/c-api/typeobj.html" rel="nofollow noreferrer"><code>PyTypeObject</code></a> which is huge and which you rarely bother filling in completely.)</p>
<p>After writing this answer I found that this had <a href="https://stackoverflow.com/questions/30359255/python-sentinel-in-c-extension">already been discussed</a>.</p>
<hr/>
<p>So in summary - Python only checks the <code>ml_name</code> (although that's an implementation detail so I guess could change in future if they find a use for a <code>NULL</code> name with a non-<code>NULL</code> method), and C automatically zeros the sentinel anyway. I don't know why the convention appears to be to set two elements, but there's something to be said from following convention.</p>
</div>
<span class="comment-copy">@Olaf Why remove the C tag? It's C code I'm investigating here after all.</span>
<span class="comment-copy">"<i>I realize that c needs a sentinel to know when it has to "stop"</i>" - That's wrong and no requirement of the language, nor used for most arrays in C.</span>
<span class="comment-copy">@Olaf question is about <i>CPython</i> implementation, which <b>is</b> implemented in C... While post introduction may contain some invalid presumptions, actual <i>question</i> asked does not deserve such reaction (IMHO).</span>
<span class="comment-copy">@Olaf I may be mistaken but <code>static PyMethodDef zip_methods[]</code> creates a C array of <code>PyMethodDef</code> structs and the last one (sentinel) contains two NULLs. I think this has more to do with <code>C</code> or the <code>python-C-API</code> than with python itself, right? However I tried to re-formulate the question, I hope it's clearer now.</span>
<span class="comment-copy">There's a least <a href="https://github.com/python/cpython/blob/65c5b096ac2c6608d296f1603cd4792086108c95/Python/import.c#L3368" rel="nofollow noreferrer">one example</a> of a single-element sentinel in Python 2.7 (gone in 3.x). The <a href="https://docs.python.org/2.7/extending/extending.html#the-module-s-method-table-and-initialization-function" rel="nofollow noreferrer">docs</a>  (<a href="https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function" rel="nofollow noreferrer">Py3</a>) want you to use <code>{NULL, NULL, 0, NULL}</code>, which happens basically nowhere. Of course: <a href="http://stackoverflow.com/questions/30359255/python-sentinel-in-c-extension"><code>{}</code></a></span>
