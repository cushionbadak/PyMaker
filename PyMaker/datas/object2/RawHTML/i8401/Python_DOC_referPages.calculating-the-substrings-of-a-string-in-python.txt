<div class="post-text" itemprop="text">
<p>I have a simple string "abc". Now I have to write Python code for creating all possible unique substrings, except the empty string, from this string.</p>
<p>The answer should be as follows:
a
b
c
ab
ac
bc
abc</p>
<p>I wrote something like this :</p>
<pre><code>def getsubstrings(str):
    sub = []
    length = len(str)
    for i in range(length):
        for j in range(i,length):
            sub.append(str[i:j+1])
    sub.sort()
    return sub

str = "abc"
print (getsubstrings(str))
</code></pre>
<p>But this is probably the wrong way , since it is not giving expected results.</p>
<p>Can someone please help me with an efficient solution.</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The build-in itertools library (<a href="https://docs.python.org/3.6/library/itertools.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/itertools.html</a>) has some wonderful functions that you can use. Basically you want to get the possible combinations of letters, for different length of strings. </p>
<p>So the code sample below loops over the size of the string: (1,2,3), gets all possible combinations for that particular size, and "chains", or appends them. The functions from itertools use iterators, which means that the final answer isn't stored in memory, but created when you need the values. For larger strings this will use much less RAM.</p>
<pre><code>from itertools import chain, combinations
s='abc'
list(chain(*[combinations(s,x) for x in range(1,len(s)+1)]))

&gt;&gt;&gt; [('a',), ('b',), ('c',), ('a', 'b'), ('a', 'c'), ('b', 'c'), ('a', 'b', 'c')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>combnations will help you to achieve the result</p>
<pre><code>data= 'abc'
from itertools  import combinations

for num in xrange(1,len(data)+1):
    for i in combinations(data,num):
        print ''.join(i)

a
b
c
ab
ac
bc
abc     
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertool combinations</a> to create combinations of different length.</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; s = "abc"
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for l in range(1, len(s)+1):
...     for c in combinations(s,l):
...         result.append(c)
... 
&gt;&gt;&gt; print result
[('a',), ('b',), ('c',), ('a', 'b'), ('a', 'c'), ('b', 'c'), ('a', 'b', 'c')]
</code></pre>
<p>You can later change format of result, for example:</p>
<pre><code>&gt;&gt;&gt; result = [''.join(r) for r in result]
&gt;&gt;&gt; print result
['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc']
</code></pre>
</div>
<span class="comment-copy">the <code>itertools</code> modules has a function that does that.</span>
<span class="comment-copy">You are looking for <a href="https://docs.python.org/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutation</code></a>.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/104420/how-to-generate-all-permutations-of-a-list-in-python">How to generate all permutations of a list in Python</a></span>
<span class="comment-copy">Why is everyone talking about permutations?  The OP explains his desired output, and it doesn't include anything like "ba" or "cab".</span>
