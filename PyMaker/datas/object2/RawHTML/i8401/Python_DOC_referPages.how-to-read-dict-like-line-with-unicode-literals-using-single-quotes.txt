<div class="post-text" itemprop="text">
<p>Looking for an efficient way to read a dict-type line containing unicode keys/values which themselves contain one or more single quotes. For example, consider a file with the following single line of text:</p>
<pre><code>{u'price': 180.45, u'item': u'Black Jacket Men's Small'}
</code></pre>
<p>What is the most efficient way to read this line into a python dict object? I've gotten around it by using regex replace but want to make sure there's not some simpler tool for this.</p>
<p>Edit: This is very different from <a href="https://stackoverflow.com/questions/1894269/convert-string-representation-of-list-to-list-in-python">this question</a> about lists because it deals with single-quote unicode literals that contain problematic single quotes inside the string values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> for this.</p>
<p>As the docs explain: </p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.</p>
</blockquote>
<p>As long as your values are one of those, this is a good solution.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1894269/convert-string-representation-of-list-to-list-in-python">Convert string representation of list to list in Python</a></span>
<span class="comment-copy">As mentioned, that's not a valid string representation of a python <code>dict</code> - the apostrophe in "men's" should have been escaped. Is that an error in your description, or is the line really like that? If so, its not going to be easy to parse as it isn't python.</span>
<span class="comment-copy">Unfortunately it is really like that, so I guess that answers my question. Thanks @tdelaney</span>
<span class="comment-copy">This gets hard if commas and colons can be in the text (e.g., <code>u'Black Jacket: Men's Small'</code>). If not you could split on comma then split on colon and then do a bit of cleanup.</span>
<span class="comment-copy">This is not always unambiguously solvable. Consider what the dictionary would look like if the string <code>u"foo': 100, u'bar"</code> was printed as key (using single quotes despite the internal apostrophes).</span>
<span class="comment-copy"><code>u'Black Jacket Men's Small'</code> isn't a valid string though.</span>
<span class="comment-copy">Hmm, good point. @eperks, what's generating that list? From the <code>u</code> prefixes and single quotes it does look as if it's a stringified Python dictionary, but Python would deal with the single quote by using double quotes around that item.</span>
<span class="comment-copy">@DanielRoseman I don't actually know how it was created so can't shed any light on that.</span>
