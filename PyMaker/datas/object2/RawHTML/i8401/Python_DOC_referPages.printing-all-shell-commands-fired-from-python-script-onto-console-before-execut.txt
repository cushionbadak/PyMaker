<div class="post-text" itemprop="text">
<p>I have a moderately large python script that executes a lot of shell commands from within itself. I would like to print all these commands to screen before executing it, so that I can trace the control flow of the python script. </p>
<p>Now, the script uses multiple commands to actually execute shell commands, including system() from os module, and call(), popen() and check_output() from subprocess module. What might be the easiest way to do this? </p>
<p>I was thinking of a wrapper function that prints the shell command argument before executing it, but I don't know how to write a generic one that can call the correct call/Popen or other command as per user discretion. And we also have to keep in mind that these calls take in different number and type of arguments.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Build and install a <a href="https://docs.python.org/3/glossary.html#term-decorator" rel="nofollow noreferrer"><em>decorator</em></a> for the various calls you wish to intercept. Because even the "builtin" functions are first-class objects, you can replace them with logging versions:    </p>
<pre><code>import os

def log_wrap(f):
    def logging_wrapper(*args, **kwargs):
        print("Calling {} with args: {!r}, kwargs: {!r}".format(f.__name__, args, kwargs))
        return f(*args, **kwargs)

    return logging_wrapper

os.system("echo 'Hello, world!'")
os.system = log_wrap(os.system)
os.system("echo 'How do you like me now?!'")
</code></pre>
<p>This code, when run (python3) prints:</p>
<pre><code>$ python test.py
Hello, world!
Calling system with args: ("echo 'How do you like me now?!'",), kwargs: {}
How do you like me now?!
</code></pre>
<p>Note that between the first and second calls to <code>os.system</code>, I replaced the <code>os.system</code> function with one that prints a log message before passing the arguments along to the original function.  You can print your log message to a file, or (better yet) call the <code>logging</code> module, or invoke the <code>pdb</code> debugger, or whatever you like...</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to start a child process, but log your behavior, you will need to record child process stdout, stderr,</p>
<pre><code>import subprocess as sp
import datetime
dt=datetime.datetime.now().strftime("%Y%m%d%H%M00")
ofd = open("res.sql","w+")
efd = open("log/cmd-{}.log".format(dt),"a+")
</code></pre>
<p>Suppose you are constructing a command (example, mysqldump) and you have the database, table, and credentials filenames (db, tbl, cnf) loaded. You want to print the command you are about to executed,</p>
<pre><code>args = ["mysqldump","--defaults-extra-file="+cnf,"--single-transaction","--quick",db,tbl]
print " ".join(args)
</code></pre>
<p>Now, assume you have opened output and error files above (ofd, efd),</p>
<pre><code>proc = sp.Popen(args, shell=False, stdin=sp.PIPE, stdout=ofd, stderr=efd)
stdout,stderr = proc.communicate
rc = proc.wait()
if rc&gt;0: print "error",rc,"dbdump failed"
else: print "result",stdout,stderr
</code></pre>
<p>Remember to close ofd, efd.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import commands

commands = r'''find .'''
result = commands.getstatusoutput(command)[0]
print("Command: {}\nresult: {}".format(command,result))
</code></pre>
</div>
<span class="comment-copy">Thanks! Exactly what I was looking for (Y)</span>
<span class="comment-copy">It's hardly a good answer for the question. The OP certainly knows how to use <code>print</code>, the question is how not to edit large codebase inserting <code>print</code>s everywhere.</span>
<span class="comment-copy">@phd Yes, but not one that warrants deletion. You're not judging the correctness of the answer, but rather whether it is suitable for the site. I'd recommend looking at <a href="https://meta.stackoverflow.com/questions/287563/youre-doing-it-wrong-a-plea-for-sanity-in-the-low-quality-posts-queue">You're doing it wrong: A plea for sanity in the Low Quality Posts queue</a>.</span>
