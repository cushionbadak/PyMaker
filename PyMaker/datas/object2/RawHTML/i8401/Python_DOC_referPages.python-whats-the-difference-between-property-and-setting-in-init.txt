<div class="post-text" itemprop="text">
<p>Couldn't quite get a straight answer from other threads on this one:</p>
<p>In Python, what's the main difference between using</p>
<pre><code>class Foo(object):
  def __init__(self, x):
    self.x = x
</code></pre>
<p>and</p>
<pre><code>class Foo(object):
  def __init__(self, x):
    self._x = x

  @property
  def x(self):
    return self._x
</code></pre>
<p>By the looks of it using @property in this way makes x read-only.. but maybe someone has a better answer? Thanks /Fred</p>
</div>
<div class="post-text" itemprop="text">
<p>For your example, yes this allows you to have read-only attributes. Further, properties can allow you to seem to have more attributes than you actually do. Consider a circle with <code>.radius</code> and <code>.area</code>. The area can be calculated based on the radius, rather than having to store both</p>
<pre><code>import math

class Circle(object):
    def __init__(self, radius):
        self.radius = radius

    @property
    def area(self):
        return math.pi * (self.radius ** 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>property</code> decorator implementation uses the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a>, which is how we do data encapsulation in Python OOP. A descriptor is:</p>
<blockquote>
<p>In general, a descriptor is an object attribute with “binding
  behavior”, one whose attribute access has been overridden by methods
  in the descriptor protocol. Those methods are <code>__get__()</code>, <code>__set__()</code>,
  and <code>__delete__()</code>. If any of those methods are defined for an object,
  it is said to be a descriptor.</p>
</blockquote>
<p>Typically, in other OOP languages you use getters and setters. You'll frequently see people coming from, say, Java writing a Python class like this:</p>
<pre><code>class A(object):
    def __init__(self, x, y):
        self._x = x
        self._y = y
    def getX(self):
        return self._x
    def getY(self):
        return self._y
    def setX(self, x):
        self._x = x
    def setY(self, y):
        self._y = y
    def some_method_that_uses_attributes(self):
        return self.getX() + self.getY()
</code></pre>
<p>This is very much <em>not</em> how you would do things in Python. The point of getters and setters is to provide data encapsulation. We encapsulate access to a data attribute by wrapping that in a getter and setter. Then, if we ever want to add something, say, make sure <code>x</code> is never set to a value below 10 (as a contrived example), we simply change the way <code>setX</code> is implemented, and we don't have to modify the rest of our code. In Python, however, we would write the above class as follows:</p>
<pre><code>class A(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def some_method_that_uses_attributes(self):
        return self.x + self.y
</code></pre>
<p>A person coming from Java might recoil in horror: "You aren't properly encapsulating your class! This will become a maintenance nightmare!"</p>
<p>Nope, because we have descriptors/properties:</p>
<pre><code>class A(object):
    def __init__(self, x, y):
        self._x = x
        self.y = y
    @property
    def x(self):
        return self._x
    @x.setter
    def x(self, val):
        if val &gt; 10:
            self._x = val
        else:
            raise ValueError("x must be greater than 10")
    def some_method_that_uses_attributes(self):
        return self.x + self.y
</code></pre>
<p>And now, we don't have to refractor every method that uses <code>self.x</code>, like <code>some_method_that_uses_attributes</code>. This is nice because it lets us avoid writing a bunch of boilerplate code, and implementing descriptors is relatively straightfoward in the cases where we <em>do</em> need it. Also, this makes our code nice and pretty, without <code>self.get_this()</code> and <code>self.set_that(3)</code> all over the code, and the much more readable <code>self.this</code> and <code>self.that = 3</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Check out this SO post on Python properties - it refers to getters/setters specifically but the answers break down a lot more about them and I believe everything you want to know is in there: <a href="https://stackoverflow.com/questions/6618002/python-property-versus-getters-and-setters">Python @property versus getters and setters</a></p>
</div>
<span class="comment-copy">Don't say that <code>property</code> implements descriptor protocol (misleading and incorrect).  Rather, <code>property</code> implementation uses descriptor protocol.</span>
<span class="comment-copy">@wim Will correct and update.</span>
