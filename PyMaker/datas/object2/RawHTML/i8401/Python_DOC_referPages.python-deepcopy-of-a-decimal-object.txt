<div class="post-text" itemprop="text">
<p>I'm struggling to deepcopy() a class containing a Decimal value. So I tried deep copying a Decimal object on its own and that failed too. What am I misunderstanding here?</p>
<pre><code>from copy import deepcopy
from decimal import Decimal

## Deepcopy an array ##
a = [1,2,3,4]
b = deepcopy(a)
a is b
# False

## Deep copy a Decimal ##
a = Decimal('0.123')
b = deepcopy(a)
a is b
# True

## Deepcopy a class containing a Decimal ##
class A(object):
    def __init__(self, dec):
        self.myDecimal = Decimal(dec)

a = A('0.123')
b = deepcopy(a)
a is b
# False

a.myDecimal is b.myDecimal
# True
</code></pre>
<p>The class copies but the decimal reference remains the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>copy</code> module will not produce copies of immutable objects, that'd be very inefficient. <code>decimal.Decimal()</code> objects are immutable, so they just return <code>self</code> for copy operations:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; d = Decimal()
&gt;&gt;&gt; d.__copy__() is d
True
&gt;&gt;&gt; d.__deepcopy__({}) is d
True
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/decimal.html" rel="noreferrer"><code>decimal</code> module documentation</a>:</p>
<blockquote>
<p>A decimal number is immutable.</p>
</blockquote>
<p>Because they are immutable, there is <em>no point</em> in creating a copy; everywhere you could use the copy, you could safely use the original <em>too</em>, but without wasting the memory on two completely identical objects that can never diverge.</p>
</div>
<span class="comment-copy">Ah, thanks! So a new assignment to either copy creates a new object, and the other reference will still point to the old one.</span>
<span class="comment-copy">@switch_on: mutable structures that contain immutable objects will still be copied, but just share references to those immutable objects. Your first example, deep-copying a list, produces a second list object whose values are all references to the exact same integer objects the other list contains.</span>
