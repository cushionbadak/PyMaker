<div class="post-text" itemprop="text">
<p>I am new to python and have only started working with files. I am wondering how to combine the data of two files into one list using list comprehension to read and combine them.</p>
<pre><code>#for instance line 1 of galaxies = I
#line 1 of cycles = 0
#output = [IO] (list)
</code></pre>
<p>This is what I have so far. Thanks in advance!</p>
<pre><code> comlist =[line in open('galaxies.txt') and line in open('cycles.txt')]
</code></pre>
<p>Update:</p>
<pre><code> comlist = [mylist.append(gline[i]+cline[i]) for i in range(r)]
</code></pre>
<p>However, this is only returning none</p>
</div>
<div class="post-text" itemprop="text">
<p>Like this:</p>
<pre><code>#from itertools import chain

def chainer(*iterables):
    # chain('ABC', 'DEF') --&gt; A B C D E F
    for it in iterables:
        for element in it:
            yield element

comlist = list(chainer(open('galaxies.txt'), open('cycles.txt')))
print(comlist)
</code></pre>
<p>Although leaving files open like that isn't generally considered a good practice.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>zip</code> to combine iterables</p>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#zip</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If its only 2 files why do you want to use comprehension together? Something like this would be easier:</p>
<pre><code>[l for l in open('galaxies.txt')]+[l for l in open('cycles.txt')]
</code></pre>
<p>The question is, what if you had <code>n</code> files? lets say in a list ... <code>fileList = ['f1.txt', 'f2.txt', ... , 'fn.txt']</code>. Then you may consider <code>itertools.chain</code></p>
<pre><code>import itertools as it
filePointers = map(open, fileList)
lines = it.chain(filePointers)
map(close, filePointers)
</code></pre>
<p>I haven't tested it, but this should work ...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>f1 = open('galaxies.txt')
f2 = open('cycles.txt')
</code></pre>
<p>If you want to combine them by alternating the lines, use <code>zip</code> and comprehension:</p>
<pre><code>comlist = [line for two_lines in zip(f1, f2) for line in two_lines]
</code></pre>
<p>You need two iterations here because the return value from zip is itself an iterable, in this case consisting of two lines, one from f1 and one from f2.  You can combine two iterations in a single comprehension as shown.</p>
<p>If you want to combine them one after the other, use "+" for concatenation:</p>
<pre><code>comlist = [line for line in f1] + [line for line in f2]
</code></pre>
<p>In both cases, it's a good practice to close each file:</p>
<pre><code>f1.close()
f2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve your task within <code>lambda</code> and <code>map</code>:</p>
<p>I assume a data in <code>in_file</code> (first file) like this :</p>
<pre><code>1 2
3 4
5 6
7 8
</code></pre>
<p>And a data in <code>in_file2</code> (second file) like this:</p>
<pre><code>hello there!
</code></pre>
<p>And with this piece of code:</p>
<pre><code># file 1
a = "in_file"
# file 2
b = "in_file2"
f = lambda x,y: (open(x, 'r'),open(y, 'r'))
# replacing "\n" with an empty string
data = [k for k in map(lambda x:x.read().replace("\n",""), f(a,b))]
print(data)
</code></pre>
<p>The output will be:</p>
<p><code>['1 23 45 67 8', 'hello there!']</code></p>
<p>However, it's not a good practice to leave an opened files like this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using only list comprehensions:</p>
<pre><code>[line for file in (open('galaxies.txt'), open('cycles.txt')) for line in file]
</code></pre>
<p>However it is bad practice to leave files open and hope the GC cleans it up. You should really do something like this:</p>
<pre><code>import fileinput
with fileinput.input(files=('galaxies.txt', 'cycles.txt')) as f:
    comlist = f.readlines()
</code></pre>
<p>If you want to strip end of line characters a good way is with <code>line.rstrip('\r\n')</code>.</p>
</div>
<span class="comment-copy">why list comprehension? working with file or another I/O in list comprehensions doesn't seem to be a good idea</span>
<span class="comment-copy">Agreed. You could just <code>comlist = open('galaxies.txt').readlines() + open('cycles.txt').readlines()</code></span>
<span class="comment-copy">it will be better to use context managers and <code>with</code> statement</span>
<span class="comment-copy">It is unfortunately what my instructor specified.</span>
<span class="comment-copy">Sheila: You need to <a href="https://stackoverflow.com/posts/43335449/edit">edit</a> your question and describe what all the constraints are which have been placed on the desired solutionâ€”like whether and what modules may be imported, does it have to be one line of code, if not, can it define and use helper functions, etc. I also wonder what the output should be if one or both of the input files consist of more than one line.</span>
<span class="comment-copy">Unfortunately, we are not allowed to import functions not directed by the instructor. I appreciate the help though.</span>
<span class="comment-copy">@Sheila: There's a recipe in the <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">Hence combine as opposed to append.</span>
<span class="comment-copy">I'm sorry, I should have made myself more clear. The data from the two files are meant to be appended, in the order of the original files.</span>
<span class="comment-copy">That's ok @SheilaEvans, I didn't want to assume you had extra requirements. At least now you know <code>zip</code> combines if you didn't already.</span>
<span class="comment-copy">Thanks! Shows that I actually need to read code properly before I submit an answer ...</span>
<span class="comment-copy">I appreciate the suggestion. When I use this method, I am getting /n characters in my list. Is there any way to get rid of these while still using the one line list comprehension?</span>
<span class="comment-copy">I added a remark about how to do that. If you know how list comprehensions work you'll figure out where to put it ;)</span>
