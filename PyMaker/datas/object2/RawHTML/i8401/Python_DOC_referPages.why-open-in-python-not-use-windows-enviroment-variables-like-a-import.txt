<div class="post-text" itemprop="text">
<p>I have a file on my desktop, with the full path:</p>
<blockquote>
<p>C:\Users\Evgeny\Desktop\f.py</p>
</blockquote>
<p>but python was ran from:</p>
<blockquote>
<p>C:\Users\Evgeny</p>
</blockquote>
<p>The problem is, that I can't do <code>exec(open('f.py').read())</code></p>
<p>I include the first path to enviroment variables, but it doesn't work.
For example, when I do </p>
<p><code>import f</code> it works completely okay.</p>
<p><a href="https://i.stack.imgur.com/Dgtlm.png" rel="nofollow noreferrer">enter image description here</a></p>
<p>Can it be possible to run the open('f.py') from another directory  not using full path to the file?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>open()</code> is a tool to open <em>any file on the filesystem</em>. It is not a tool to find Python modules.</p>
<p>Python's import machinery is fairly complex (it can be extended, adjusting how modules are found or loaded) and out of the box supports cached bytecode files with different extensions (<code>.pyc</code>, <code>.pyd</code>, in a <code>__bytecache__</code> directory or not), loading from <code>.zip</code> files, and loading native extensions, all from a series of configurable directories listed on <code>sys.path</code>. This machinery is also there to allow you to override modules with different versions, simply by putting them in a different location on the search path.</p>
<p>The vast majority of use-cases for the <code>open()</code> function, however, do not need this machinery, you want to open your cat pictures from your Desktop, and not have to worry about the <code>cat.py</code> module in a different directory.</p>
<p>You can re-use the module resolution behaviour of the import machinery by using <a href="https://docs.python.org/3/library/importlib.html#importlib.util.find_spec" rel="nofollow noreferrer">the <code>importlib.util.find_spec()</code> module</a>:</p>
<pre><code>from importlib.util import find_spec

module_spec = find_spec('f')
if module_spec is not None:
    with open(module_spec.origin) as module_source:
        exec(module_source.read())
</code></pre>
<p>This does require that your <code>Desktop</code> folder is on your <code>sys.path</code> module search path.</p>
</div>
<span class="comment-copy">Because <code>open()</code> is not a tool to find executables or loadable code. If you used <code>cat f.py</code> in the shell, it would not find the file either.</span>
<span class="comment-copy">You'll have to replicate the search work Python does; look at the <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code> module</a>. Python does a <i>lot</i> of work under the hood to find the right module.</span>
<span class="comment-copy">Thank you a lot for your fast reply! Now I understand how <code>open()</code> works.</span>
