<div class="post-text" itemprop="text">
<p>How to set a limit on the maximum amount of time a function can run for?
For example, using <code>time.sleep</code> as a placeholder function, how to limit the amount of time <code>time.sleep</code> can run to a maximum of 5 mins (300 seconds)?</p>
<pre><code>import time

try:
    # As noted above `time.sleep` is a placeholder for a function 
    # which takes 10 minutes to complete.
    time.sleep(600)
except:
    print('took too long')
</code></pre>
<p>That is, how can <code>time.sleep(600)</code> above be limited and interrupted after 300 seconds?</p>
</div>
<div class="post-text" itemprop="text">
<p>On POSIX you have a simple and clean solution available in <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer"><code>signal</code></a> module.  </p>
<pre><code>import signal
import time

class Timeout(Exception):
    pass

def handler(sig, frame):
    raise Timeout

signal.signal(signal.SIGALRM, handler)  # register interest in SIGALRM events

signal.alarm(2)  # timeout in 2 seconds
try:
    time.sleep(60)
except Timeout:
    print('took too long')
</code></pre>
<p>Caveats:  </p>
<ul>
<li>Does not work on all platforms, e.g. Windows.  </li>
<li>Does not work in threaded applications, only the main thread. </li>
</ul>
<p>For other readers where the caveats above are a deal breaker, you will need a more heavyweight approach.  The best option is usually to run the code in a separate process (or possibly a thread), and terminate that process if it takes too long.  See <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> module for example.  </p>
</div>
<div class="post-text" itemprop="text">
<p>One of currently probably preferred options to accomplish what you want is usage of Pythons </p>
<blockquote>
<p>multiprocessing  ( especially its <strong>proc.join(timeoutTime)</strong> method )</p>
</blockquote>
<p>module ( see <a href="https://docs.python.org/3.3/library/multiprocessing.html" rel="nofollow noreferrer">tutorial</a> )</p>
<p>Just copy/paste the code example below and run it. Does it what you are after?</p>
<pre><code>def beBusyFor(noOfSeconds):
    import time
    print("    beBusyFor() message: going to rest for", noOfSeconds, "seconds")
    time.sleep(noOfSeconds)
    print("    beBusyFor() message: was resting", noOfSeconds, "seconds, now AWAKE")

import multiprocessing

noOfSecondsBusy = 5; timeoutTime  = 3
print("--- noOfSecondsBusy = 5; timeoutTime  = 3 ---")
proc = multiprocessing.Process(target=beBusyFor, args=(noOfSecondsBusy, ))
print("Start beBusyFor()")
proc.start()
print("beBusyFor() is running")
proc.join(timeoutTime)
if proc.is_alive():
    print(timeoutTime, "seconds passed, beBusyFor() still running, terminate()" )
    proc.terminate()
else:
    print("OK, beBusyFor() has finished its work in time.")
#:if    

print()

noOfSecondsBusy = 2; timeoutTime  = 3
print("--- noOfSecondsBusy = 2; timeoutTime  = 3 ---")
proc = multiprocessing.Process(target=beBusyFor, args=(noOfSecondsBusy, ))
print("Start beBusyFor()")
proc.start()
print("beBusyFor() started")
proc.join(timeoutTime)
if proc.is_alive():
    print(timeoutTime, "seconds passed, beBusyFor() still running, terminate()" )
    proc.terminate()
else:
    print("OK, beBusyFor() has finished its work in time.")
#:if    
</code></pre>
<p>it outputs:</p>
<pre><code>--- noOfSecondsBusy = 5; timeoutTime  = 3 ---
Start beBusyFor()
beBusyFor() is running
    beBusyFor() message: going to rest for 5 seconds
3 seconds passed, beBusyFor() still running, terminate()

--- noOfSecondsBusy = 2; timeoutTime  = 3 ---
Start beBusyFor()
beBusyFor() started
    beBusyFor() message: going to rest for 2 seconds
    beBusyFor() message: was resting 2 seconds, now AWAKE
OK, beBusyFor() has finished its work in time.
</code></pre>
<p>Another known to me option is using a </p>
<blockquote>
<p><strong>decorator function</strong> and the <strong>signal module</strong></p>
</blockquote>
<p>Checkout the <a href="http://www.saltycrane.com/blog/2010/04/using-python-timeout-decorator-uploading-s3/" rel="nofollow noreferrer">web page with origin of the code</a> I have provided here (only one small adjustment was necessary to make it run on Python 3.6):</p>
<pre><code>import signal

class TimeoutError(Exception):
    def __init__(self, value = "Timed Out"):
        self.value = value
    def __str__(self):
        return repr(self.value)

def timeout(seconds_before_timeout):
    def decorate(f):
        def handler(signum, frame):
            raise TimeoutError()
        def new_f(*args, **kwargs):
            old = signal.signal(signal.SIGALRM, handler)
            signal.alarm(seconds_before_timeout)
            try:
                result = f(*args, **kwargs)
            finally:
                signal.signal(signal.SIGALRM, old)
            signal.alarm(0)
            return result
        # new_f.func_name = f.func_name
        new_f.__name__ = f.__name__
        return new_f
    return decorate

# Try it out:

import time

@timeout(5)
def mytest():
    print( "mytest() message:  Started" )
    for i in range(1,10):
        time.sleep(1)
        print( "mytest() message:  %d seconds have passed" % i )

try:
    mytest()
except TimeoutError as e:
    print("stopped executing mytest() because it", e)

print("continuing script execution past call of mytest()")
</code></pre>
<p>The code above outputs: </p>
<pre><code>mytest() message:  Started
mytest() message:  1 seconds have passed
mytest() message:  2 seconds have passed
mytest() message:  3 seconds have passed
mytest() message:  4 seconds have passed
stopped executing mytest() because it 'Timed Out'
continuing script execution past call of mytest()
</code></pre>
</div>
<span class="comment-copy">The options are platform dependent.  What platform are you on?</span>
<span class="comment-copy">Ubuntu 16.04 linux</span>
<span class="comment-copy">Use a signal. See the example at the bottom of <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">docs.python.org/3/library/signal.html</a></span>
<span class="comment-copy">Would this still stop the function inside <code>try</code> if that function used multiprocessing internally?</span>
<span class="comment-copy">See Caveat #2.  It only works in the main thread.</span>
<span class="comment-copy">Would this work if <code>beBusyFor</code> uses multiprocessing internally?</span>
<span class="comment-copy">@Dave just try it out and report back here if it worked. Haven't tested such a case yet, so my opinion that it should work leaving some mess of processes with no parents doesn't matter here and therefore shouldn't be taken in consideration.</span>
<span class="comment-copy">No cigar ending child processes unfortunately :(</span>
