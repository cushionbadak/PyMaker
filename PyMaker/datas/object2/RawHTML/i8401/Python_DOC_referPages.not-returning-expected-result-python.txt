<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3484721/phone-number-regular-expression-regex-in-python">Phone Number Regular Expression (Regex) in Python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<pre><code>def isPhoneNumber(text):
   if len(text) != 12:
      return False
   for i in range(0, 3):
      if not text[i].isdecimal():
         return False
   if text[3] != '-' or text[3] != '':
         return False
   for i in range(4, 7):
      if not text[i].isdecimal():
        return False
    if text[7] != '-':
       return False
   for i in range(8, 12):
        if not text[i].isdecimal():
           return False
   return True

print('444-444-4444 is a phone number: ')
print(isPhoneNumber('473-927-2847'))
print('Moshi moshi is a phone number:')
print(isPhoneNumber('Moshi moshi'))
print('8478473948 is a phone number:')
print(isPhoneNumber('847847-3948'))
</code></pre>
<p>They all return false now. How come? Why does the third 'if' statement not return proper value? It should return true for both first function call and third function call. How would I go about getting this to work? Checking for non-space in between digits 0 through 7 along with checking for hyphen, and returning false if either is not found. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if text[3] != '-' or text[3] != '':
</code></pre>
<p>One of those two conditions <em>must</em> be True, so you're returning <strong>False</strong> regardless of the input.  I think you want an <strong>and</strong> there, as well as a character in the second condition (which is True under any input you give).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>text[3]</code> always evaluates to something, so the expression <code>text[3] != ''</code> always evaluates to <code>True</code>.</p>
<p>So, the third if statement always runs the <code>return False</code> statement.</p>
<p>Deleting that part (making your if statement <code>if text[3] != '-':</code>) makes your program work properly for the first test case.</p>
<p>Also, it looks like you're trying to make the dash optional - this'll break your hard-coded indices for the rest of the function, so you'll need an if block. Something like:</p>
<pre><code>def isPhoneNumber(text):
   for i in range(0, 3):
      if not text[i].isdecimal():
         return False
   if text[3] == '-':
      for i in range(4, 7):
         if not text[i].isdecimal():
            return False
      for i in range(8, 12):
        if not text[i].isdecimal():
           return False
      return True
   elif text[3].isdecimal():
      for i in range(4, 6):
         if not text[i].isdecimal():
            return False
      for i in range(7, 11):
        if not text[i].isdecimal():
           return False
      return True
   else:
      return False
</code></pre>
<p>General note: for this use case, look into using <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expressions</a>, which will let you specify the format of a phone number without all this string indexing.</p>
<p>The regex <code>\d{3}-?\d{3}-\d{3}</code> works in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems likely to me that the solution you are looking for is more general than one proposed.  Of course, if this looks too long, just look at my solution toward the bottom and refer back as needed, but I hope to be helpful.</p>
<p>So, there are a few problems:</p>
<p>First, as I understand it (and hopefully I'm right, otherwise the other answers are perfect) it looks like there are some basic categories of strings you want to accept:</p>
<ol>
<li>Fully hyphenated phone numbers like <code>'444-444-4444'</code></li>
<li>Non-hyphenated phone numbers like <code>'4444444444'</code> </li>
<li>Phone numbers with mixed hyphenation like <code>'444-4747635'</code> or <code>'847847-3948'</code> from your example above.</li>
</ol>
<p>Unfortunately only the fully hyphenated variety has 12 characters.</p>
<p>Thus, the line <code>if len(text) != 12:</code> will immediately cause potential phone numbers having either mixed hyphenation or no hyphenation to be
rejected.</p>
<p>Instead, staying consistent with your style, try <code>if len(text) &lt; 10 or len(text) &gt; 12:</code>.  This eliminates all strings that are simply too long or
too short.</p>
<p>Another problem, as addressed in the other answers, stems from your always <code>True</code> check: <code>if text[3] != '-' or text[3] != ''</code>.  The second
expression <code>text[3] != ''</code> will always have the value <code>True</code>, meaning the
function can only return <code>False</code>.</p>
<p>Perhaps the rationale for that approach involved believing that checking that the character at a particular index was <code>''</code> could allow one to treat the rest of the string as if the characters were one index further along, perhaps also feeling like a check that no other unwanted character is there.  Those are very speculative ideas on my part, but, either way, they  seem potentially reasonable but do not work.</p>
<p>To proceed in a way similar to your original version, using variables to iterate through the string may be more useful than using literals, since we can have more flexibility that way in terms of which indices we investigate in which ways.  One variable, call it <code>i</code>, can point to where you are in the string, while another, say <code>j</code>, can point to where you need to stop to do another kind of check.</p>
<p>I included a fully (I think) flexible version of your function, built mostly with the same approach and style that you used in mind.  I believe this version allows for the cases in which neither hyphen is present, as well as when just the second is missing, which I do not believe the solution by APerson above addressed (perhaps rightfully).</p>
<p>If you did want the more flexible version, here is one possible implementation:</p>
<pre><code>def isPhoneNumber(text):
   i = 0
   j = 0
   if len(text) &lt; 10 or len(text) &gt; 12:
      return False
   while i &lt; 3:
      if not text[i].isdecimal():
         return False
      i += 1
   if text[i] == '-':
      i += 1
   j = i + 3
   while i &lt; j:
      if not text[i].isdecimal():
         return False
      i += 1
   if text[i] == '-':
      i += 1
   j = len(text)          # or j = i + 4 for consistency
   while i &lt; j:
      if not text[i].isdecimal():
         return False
      i += 1
   return True
</code></pre>
<p>Of course, as APerson mentioned, <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expressions</a> are a much more concise way to solve pattern matching problems like this.  (They would make it trivial to deal with a more general phone number space with things like parentheses or spaces).</p>
<p>If APerson's interpretation of the space of phone numbers is correct, that
answer should be preferred. However, if I'm right, then the regex
<code>\d{3}-?\d{3}-?\d{3}</code> would be correct.</p>
</div>
<span class="comment-copy">The indentation seems off... errant space?</span>
<span class="comment-copy">but even when I add <code>or not text[3].isdecimal return False</code> it still does not return expected value.</span>
<span class="comment-copy">@user3567030 Try my answer, I added some code that makes it work for the third test case</span>
<span class="comment-copy">okay yeah thats true i get it now.</span>
