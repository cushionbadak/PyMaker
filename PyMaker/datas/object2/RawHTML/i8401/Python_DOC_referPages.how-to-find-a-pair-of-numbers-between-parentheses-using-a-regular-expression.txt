<div class="post-text" itemprop="text">
<p>I have the following string with some text / numbers in it. There is always a <code>()</code> with two numbers in between. These two numbers need to be extracted.
The string looks like this:</p>
<pre><code>s = 'sadfdaf dsf4as d a4d34s ddfd (54.4433,-112.3554) a45 6sd 6f8 asdf'
</code></pre>
<p>I need a regular expression for solving that. 
Pseudo code like this</p>
<ol>
<li><p>search <code>s</code> for <code>(</code> and check if number is next char</p></li>
<li><p>Extract numbers until <code>,</code></p></li>
<li>Extract second number until <code>)</code></li>
</ol>
<p>I found the following solution from <a href="https://stackoverflow.com/questions/4289331/python-extract-numbers-from-a-string">stackoverflow</a></p>
<pre><code>print re.findall("[-+]?\d+[\.]?\d*[eE]?[-+]?\d*", schoolAddressString) 
</code></pre>
<p>which returns: <code>['4', '4', '34', '54.4433', '-112.3554', '45', '6', '6', '8']</code></p>
<p>So I need to have this expression to only consider numbers between <code>()</code> with something like<code>^(</code> and <code>$(</code>.</p>
<p>How is this done exactly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply use a <em>regex</em> to <strong>capture the elements between brackets</strong>, and then parse these using <code>.split(',')</code> and <code>float</code> to parse them to floats. Like:</p>
<pre><code>for match in re.findall(r'(?&lt;=\().*?(?=\))',schoolAddressString):
    a,b = map(float,match.split(','))
    # do something with a and b, for example
    print([a,b])
</code></pre>
<p>This prints:</p>
<pre><code>&gt;&gt;&gt; for match in re.findall(r'(?&lt;=\().*?(?=\))',schoolAddressString):
...     a,b = map(float,match.split(','))
...     # do something with a and b, for example
...     print([a,b])
... 
[54.4433, -112.3554]
</code></pre>
<p>Furthermore here you parse a <code>float</code>. Therefore I think that the parsing will be <em>less</em> error prone: there will be more patterns that <em>can</em> be parsed, and the parsing is probably done correctly.</p>
<p>The result of the <code>map(..)</code> is a list. So in case there can be an <em>arbitrary</em> number of values between the brackets, you can use <code>values = map(..)</code> and then process the elements in <code>values</code>.</p>
<h1>Float pattern</h1>
<p>The pattern the <code>float(..)</code> constructor can parse is described in <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<pre><code>sign           ::=  "+" | "-"
infinity       ::=  "Infinity" | "inf"
nan            ::=  "nan"
numeric_value  ::=  floatnumber | infinity | nan
numeric_string ::=  [sign] numeric_value

floatnumber     ::=  pointfloat | exponentfloat
pointfloat      ::=  [digitpart] fraction | digitpart "."
exponentfloat   ::=  (digitpart | pointfloat) exponent
digitpart       ::=  digit (["_"] digit)*
fraction        ::=  "." digitpart
exponent        ::=  ("e" | "E") ["+" | "-"] digitpart

digit           ::=  "0"..."9"
</code></pre>
</blockquote>
<p>So the "added" value of using the constructor is that underscores are allowed as well (to separate <em>groups</em> of digits), and furthermore values like <code>infinity</code>, <code>inf</code> and <code>nan</code> are also allowed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this?</p>
<pre><code>for segment in re.findall("[(][^)]*[)]", s):
    print re.findall("[-+]?\d+[\.]?\d*[eE]?[-+]?\d*", segment) 
</code></pre>
<p>Note that this works no matter how many numbers are in each segment, or how they are separated, which is more flexible than it sounds like you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're variable s is a string you can use the split method (<a href="https://docs.python.org/2/library/string.html#string.split" rel="nofollow noreferrer">docs python</a>)
You can make a code like that :</p>
<pre><code>s = 'sadfdaf dsf4as d a4d34s ddfd (54.4433,-112.3554) a45 6sd 6f8 asdf'
s_without_beginning = s.split('(')[1]
s_without_extremeties = s_without_beginning.split(')')[0]
numbers = s_without_extremeties.split(',')
</code></pre>
<p>This will return :</p>
<p>numbers =</p>
<pre><code>['54.4433', '-112.3554']
</code></pre>
<p>But you have to be sure the separators are always ( , )</p>
</div>
<span class="comment-copy"><code>\((yourpattern),(yourpattern)\)</code> seems quite accurate to me.</span>
<span class="comment-copy">The found pattern matches exponential format. If your data source does not use this, anything starting from <i>[eE]...</i> may be left out.</span>
<span class="comment-copy">thanks for this comprehensive answer</span>
<span class="comment-copy">thanks for your answer</span>
<span class="comment-copy">thanks for your answer</span>
