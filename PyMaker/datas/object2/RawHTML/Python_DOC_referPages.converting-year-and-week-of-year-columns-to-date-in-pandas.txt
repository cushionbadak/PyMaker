<div class="post-text" itemprop="text">
<h3>Desired way</h3>
<p>In order to convert two columns with year and week of year into date I would expect to do something like:</p>
<pre><code>df['formatted_date'] = df.year*100+df.weekofyear
df['date'] = pd.to_datetime(df['formatted_date'], format='%Y%w')
</code></pre>
<p>However, it does not work, giving <strong>ValueError</strong>:</p>
<pre><code>ValueError: unconverted data remains: 01
</code></pre>
<h3>Workaround</h3>
<p>The workaround, I have found is converting week of year into a day of year and working with year-dayofyear <code>%Y%j</code> format:</p>
<pre><code>df['formatted_date'] = df.year*1000+df.weekofyear*7-6 
df['date'] = pd.to_datetime(df['formatted_date'], format='%Y%j')
</code></pre>
<p>The first line becomes ugly, but this works fine. Week of year is in the range (00,53). 
Any ideas, why is the elegant way not working?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need combine <code>%w</code> for day of week - <a href="https://stackoverflow.com/a/17087427">explanation</a> with <code>%W</code> for week:</p>
<p><a href="http://strftime.org/" rel="nofollow noreferrer">http://strftime.org/</a> for <code>%W</code>:</p>
<blockquote>
<p>Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</p>
</blockquote>
<p>And for <code>%w</code>:</p>
<blockquote>
<p>Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</p>
</blockquote>
<hr/>
<pre><code>df = pd.DataFrame({'year':[2015, 2018],
                   'weekofyear':[10,12]})

dates = df.year*100+df.weekofyear
@adde
df['date'] = pd.to_datetime(dates.astype(str) + '0', format='%Y%W%w')
print (df)

   year  weekofyear  formatted_date       date
0  2015  10          201510         2015-03-15
1  2018  12          201812         2018-03-25
</code></pre>
<p>Another solution:</p>
<pre><code>#added 0 only for demontration, you can remove it
df['formatted_date'] = df.year * 1000 + df.weekofyear * 10 + 0
df['date'] = pd.to_datetime(df['formatted_date'], format='%Y%W%w')
print (df)

   year  weekofyear  formatted_date       date
0  2015  10          2015100        2015-03-15
1  2018  12          2018120        2018-03-25
</code></pre>
</div>
<span class="comment-copy">thanks, worked great!</span>
