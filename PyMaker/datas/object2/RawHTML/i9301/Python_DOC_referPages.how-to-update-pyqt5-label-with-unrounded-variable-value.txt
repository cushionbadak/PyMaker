<div class="post-text" itemprop="text">
<p>I keep track of some variables that are very small (smaller than 1) and would like to update a label on the screen with their value. However, the labels stay at 0 (sometimes they go to 1) even though the value of the variable is smaller than 1. </p>
<p>How do I tell my program to explicitly print an unrounded value?</p>
<p>Here is my code:</p>
<pre><code>import sys
import random
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import (QApplication, QLabel, QWidget)
from PyQt5.QtGui import QPainter


class MouseTracker(QWidget):
    distance_from_target = 0
    mouse_x_pos = 0
    mouse_y_pos = 0
    target_x_pos = 0
    target_y_pos = 0
    target_x_velocity = 0
    target_y_velocity = 0
    target_x_acceleration = 0
    target_y_acceleration = 0

    def __init__(self, parent=None):
        super(MouseTracker, self).__init__(parent=parent)
        self.initUI()
        self.setMouseTracking(True)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.changePosition)
        self.timer.start(1)

    def changePosition(self):
        random.seed()
        self.target_x_acceleration = random.randint(-10, 10) / 100
        self.target_y_acceleration = random.randint(-10, 10) / 100

        self.target_x_velocity += self.target_x_acceleration
        self.target_y_velocity += self.target_y_acceleration

        self.target_x_pos += self.target_x_velocity
        self.target_y_pos += self.target_y_velocity

        self.distance_from_target = round(
            ((self.mouse_y_pos - self.target_y_pos) ** 2 + (self.mouse_x_pos - self.target_x_pos) ** 2) ** 0.5)
        self.label.setText(
            'Mouse: (%d : %d)' % (self.mouse_x_pos, self.mouse_y_pos) + "   Distance from target: " + str(self.distance_from_target)
            + "\nTarget position: (%d : %d)" % (self.target_x_pos, self.target_y_pos)
            + "\nTarget velocity: (%d : %d)" % (self.target_x_velocity, self.target_y_velocity)
            + "\nTarget acceleration: (%d : %d)" % (self.target_x_acceleration, self.target_y_acceleration))
        self.update()

    def initUI(self):
        self.setGeometry(200, 200, 1000, 500)
        self.setWindowTitle('Mouse Tracker')
        self.label = QLabel(self)
        self.label.resize(500, 100)
        self.show()

    def mouseMoveEvent(self, event):
        self.mouse_x_pos = event.x()
        self.mouse_y_pos = event.y()
        self.update()

    def mousePressEvent(self, event):
        self.target_x_velocity = 0
        self.target_y_velocity = 0
        self.target_x_acceleration = 0
        self.target_y_acceleration = 0 
        self.target_x_pos = event.x()
        self.target_y_pos = event.y()
        self.distance_from_target = round(
            ((self.mouse_y_pos - self.target_y_pos) ** 2 + (self.mouse_x_pos - self.target_x_pos) ** 2) ** 0.5)
        self.update()

    def paintEvent(self, event):
        q = QPainter()
        q.begin(self)
        q.drawLine(self.mouse_x_pos, self.mouse_y_pos, self.target_x_pos, self.target_y_pos)
        q.drawEllipse(self.target_x_pos - self.distance_from_target, self.target_y_pos - self.distance_from_target, self.distance_from_target*2, self.distance_from_target*2)

app = QApplication(sys.argv)
w = MouseTracker()
sys.exit(app.exec_())
</code></pre>
<p>The variables in question are <code>target_x_velocity</code>, <code>target_y_velocity</code>, <code>target_x_acceleration</code>, and <code>target_y_acceleration</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You must change <code>%d</code> to <code>%f</code>, the first shows only the whole part, while the second shows it in floating format. You can also change to <code>"%.Xf"</code>, where <code>X</code> is the number of decimal places to display.</p>
<p><strong>More Information:</strong></p>
<p><a href="https://i.stack.imgur.com/XTwlS.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/XTwlS.png"/></a></p>
<p>Complete Code:</p>
<pre><code>import sys
import random
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import (QApplication, QLabel, QWidget)
from PyQt5.QtGui import QPainter


class MouseTracker(QWidget):
    distance_from_target = 0
    mouse_x_pos = 0
    mouse_y_pos = 0
    target_x_pos = 0
    target_y_pos = 0
    target_x_velocity = 0
    target_y_velocity = 0
    target_x_acceleration = 0
    target_y_acceleration = 0

    def __init__(self, parent=None):
        super(MouseTracker, self).__init__(parent=parent)
        self.initUI()
        self.setMouseTracking(True)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.changePosition)
        self.timer.start(1)

    def changePosition(self):
        random.seed()
        self.target_x_acceleration = random.randint(-10, 10) / 100
        print(self.target_x_acceleration)
        self.target_y_acceleration = random.randint(-10, 10) / 100

        self.target_x_velocity += self.target_x_acceleration
        self.target_y_velocity += self.target_y_acceleration

        self.target_x_pos += self.target_x_velocity
        self.target_y_pos += self.target_y_velocity

        self.distance_from_target = round(
            ((self.mouse_y_pos - self.target_y_pos) ** 2 + (self.mouse_x_pos - self.target_x_pos) ** 2) ** 0.5)
        self.label.setText(
            'Mouse: (%d : %d)' % (self.mouse_x_pos, self.mouse_y_pos) + "   Distance from target: " + str(self.distance_from_target)
            + "\nTarget position: (%d : %d)" % (self.target_x_pos, self.target_y_pos)
            + "\nTarget velocity: (%f : %f)" % (self.target_x_velocity, self.target_y_velocity)
            + "\nTarget acceleration: (%f : %f)" % (self.target_x_acceleration, self.target_y_acceleration))
        self.update()

    def initUI(self):
        self.setGeometry(200, 200, 1000, 500)
        self.setWindowTitle('Mouse Tracker')
        self.label = QLabel(self)
        self.label.resize(500, 100)
        self.show()

    def mouseMoveEvent(self, event):
        self.mouse_x_pos = event.x()
        self.mouse_y_pos = event.y()
        self.update()

    def mousePressEvent(self, event):
        self.target_x_velocity = 0
        self.target_y_velocity = 0
        self.target_x_acceleration = 0
        self.target_y_acceleration = 0 
        self.target_x_pos = event.x()
        self.target_y_pos = event.y()
        self.distance_from_target = round(
            ((self.mouse_y_pos - self.target_y_pos) ** 2 + (self.mouse_x_pos - self.target_x_pos) ** 2) ** 0.5)
        self.update()

    def paintEvent(self, event):
        q = QPainter()
        q.begin(self)
        q.drawLine(self.mouse_x_pos, self.mouse_y_pos, self.target_x_pos, self.target_y_pos)
        q.drawEllipse(self.target_x_pos - self.distance_from_target, self.target_y_pos - self.distance_from_target, self.distance_from_target*2, self.distance_from_target*2)

app = QApplication(sys.argv)
w = MouseTracker()
sys.exit(app.exec_())
</code></pre>
<p>Output:</p>
<p><a href="https://i.stack.imgur.com/QudpW.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/QudpW.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>In python 3.0 the <code>%</code> string formatting operator is replaced by a new system for string formatting operations. The % operator is still supported but deprecated since python 3.1, see <a href="https://docs.python.org/release/3.0/whatsnew/3.0.html" rel="nofollow noreferrer">What's new in Python 3</a>. Details see in <a href="http://www.python.org/dev/peps/pep-3101" rel="nofollow noreferrer">PEP3101</a> and <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">Format String Syntax</a>.   </p>
<p>I have implemented some examples of the new style syntax in your string, the first line in the simplest form of the new syntax, the braces are placeholders for the parameters of <code>format()</code>:</p>
<pre><code>'Mouse: ({} : {})'.format(self.mouse_x_pos, self.mouse_y_pos) + "   Distance from target: " + str(self.distance_from_target)
</code></pre>
<p>the second line with numbered parameters:</p>
<pre><code>+ "\nTarget position: ({0} : {1})".format(self.target_x_pos, self.target_y_pos)
</code></pre>
<p>the third line parameters formatted as decimalnumber:</p>
<pre><code>+ "\nTarget velocity: ({:.4f} : {:.8f})".format(self.target_x_velocity, self.target_y_velocity)
</code></pre>
<p>and the last line signed („+“ sign shown in every case, „-“ sign only shown is -)</p>
<pre><code>+ "\nTarget acceleration: ({0:+.6f} : {1:-.8f})".format(self.target_x_acceleration, self.target_y_acceleration))
</code></pre>
<p>for further details see links above</p>
</div>
<span class="comment-copy">The <code>%</code> syntax has not been deprecated. There are currently no plans as to when or even if it will be removed from the language, as is made clear in the PEP you linked to (see the Backwards Compatibility section).</span>
<span class="comment-copy">@ekhumoro: I am not quite sure, that text is published 16-Apr-2006. I think, it is outdated by the other link published December-4-2008, <a href="https://docs.python.org/release/3.0/whatsnew/3.0.html#pep-3101-a-new-approach-to-string-formatting" rel="nofollow noreferrer">docs.python.org/release/3.0/whatsnew/…</a></span>
<span class="comment-copy">PEPS are kept up-to-date as required (see the Post-History). The docs for 3.0 are irrelevant. If you want to know whether a feature is deprecated or not, just test it using the <a href="https://docs.python.org/3.6/using/cmdline.html#cmdoption-W" rel="nofollow noreferrer">warnings option</a>: <code>python3 -Wall -c '"%s" % False'</code>. There's probably a discussion somewhere on python-dev about scrapping the plans to deprecate <code>%</code> formatting. It seems highly unlikely that it will ever be removed in Python 3 now, since it would potentially break a huge amount of code for no good reason.</span>
<span class="comment-copy">i'm learning every day on SO :-)</span>
<span class="comment-copy">PS: <a href="https://mail.python.org/pipermail/python-dev/2012-February/116789.html" rel="nofollow noreferrer">here's one python-dev thread</a> that makes it pretty clear that <code>%</code> formatting is not going away.</span>
