<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31566500/python-setting-two-variable-values-separated-by-a-comma-in-python">Python: setting two variable values separated by a comma in python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Can someone please explain to me what line 4 is doing?</p>
<pre><code>1 def fib2(n):  # return Fibonacci series up to n
2 ...     """Return a list containing the Fibonacci series up to n."""
3...     result = []
4...     a, b = 0, 1  #this line
5...     while a &lt; n:
6...         result.append(a)
7...         a, b = b, a+b
8...     return result    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you describe is <a href="http://interactivepython.org/courselib/static/thinkcspy/Lists/TupleAssignment.html" rel="noreferrer"><em>tuple assignment</em></a>:</p>
<pre><code>a, b = 0, 1
</code></pre>
<p>is equivalent to <code>a = 0</code> and <code>b = 1</code>.</p>
<p>It can however have interesting effects if you for instance want to swap values. Like:</p>
<pre><code>a,b = b,a
</code></pre>
<p>will first construct a tuple <code>(b,a)</code> and then untuple it and assign it to <code>a</code> and <code>b</code>. This is thus not equivalent to:</p>
<pre><code>#not equal to
a = b
b = a
</code></pre>
<p>but to (using a temporary):</p>
<pre><code>t = a
a = b
b = t
</code></pre>
<p>In general if you have a comma-separated list of variables left of the assignment operator and an expression that generates a tuple, the tuple is unpacked and stored in the values. So:</p>
<pre><code>t = (1,'a',None)
a,b,c = t
</code></pre>
<p>will assign <code>1</code> to <code>a</code>, <code>'a'</code> to <code>b</code> and <code>None</code> to <code>c</code>. Note that this is not syntactical sugar: the compiler does not look whether the number of variables on the left is the same as the length of the tuple on the right, so you can return tuples from functions, etc. and unpack them in separate variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the purposes of reading, all it's doing is setting <code>a</code> and <code>b</code>, so that <code>a</code> = 0 and <code>b</code> = 1.  Similarly, in line 7, it's setting <code>a</code> to <code>b</code> and <code>b</code> to the sum of <code>a</code> and <code>b</code>.</p>
<p>More specifically, it's setting tuples.  Tuples are invariant, in that once they're created, their values can't change.  Tuples are pervasive in python - you see them almost everywhere.</p>
<p>Typically, you would expect a tuple to be in parenthesis, e.g. <code>(a, b) = (0, 1)</code> would read more cleanly, but they are such a large feature of python that the parenthesis are optional (unless you're constructing a tuple as an argument to a function, and then you need the extra parenthesis to differentiate between a single tuple and multiple arguments.  I.e. you would have to say <code>foo((a, b))</code> to pass a tuple to foo, as <code>foo(a, b)</code> would pass two arguments to it.)</p>
<p>Tuples can be any length.  You can write <code>a, b, c, d, e = 0, 1, 2, 3, 4</code>, or you can have a function return a tuple, e.g.: <code>ret1, ret2, ret3 = foobar(1)</code></p>
</div>
<span class="comment-copy">line 4 is basically <code>a = 0</code> and <code>b = 1</code> but shorten</span>
<span class="comment-copy">It is assigning 0 and 1 to <code>a</code> and <code>b</code> respectively (so <code>a</code> gets 0 and <code>b</code> gets 1)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">I've always known it as tuple packing/unpacking, or more generally <i>sequence unpacking</i>. See <a href="https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">Tuples and Sequences</a></span>
<span class="comment-copy">Remember functions and class methods can return tuples too. For example: <code>def myfunc(): return 2,4</code> can be used as <code>a, b = myfunc()</code> which will make <code>a = 2</code> and <code>b = 4</code> or <code>myfunc()[0]</code> which will return <code>2</code>.</span>
<span class="comment-copy">@AndrejŽukov-Gregorič: that's why in the last code fragment I explicitly first constructed a tuple and stored it into <code>t</code>: such that one can reason this is no syntactical sugar, but actually tuple unpacking.</span>
<span class="comment-copy">Yep +1 :) - just added that comment so that people see tuple returning functions.</span>
