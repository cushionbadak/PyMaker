<div class="post-text" itemprop="text">
<p>I've been told that in python 3.x it's possible to add a separator between strings that you repeat using multiplication, for example..</p>
<pre><code>c = "rabble"

print(c * 5, sep = ' | ')
</code></pre>
<p>I would like it to print out "rabble" 5 times with the string <code>|</code> in between each repeat.</p>
<p>It keeps printing the repeated string, but without the separator character. I'm having trouble finding info regarding the use of sep in this specific situation. What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the effect you want, but it doesn't really have much to do with multiplication <em>per se</em>.</p>
<p>The <code>sep</code> argument to <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code></a> provides a separator between the non-keyword arguments - for example:</p>
<pre><code>&gt;&gt;&gt; print("spam", "eggs", "ham", sep=" | ")
spam | eggs | ham
</code></pre>
<p>You could just pass <code>c</code> to <code>print()</code> 5 times to get the output you're looking for:</p>
<pre><code>&gt;&gt;&gt; c = "rabble"
&gt;&gt;&gt; print(c, c, c, c, c, sep=" | ")
rabble | rabble | rabble | rabble | rabble
</code></pre>
<p>... but that's clunky, and no use if you don't know in advance how many times you'll want <code>c</code> to appear.</p>
<p>To get around this problem, you can use <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">argument unpacking</a> â€“ a special syntax to pass a list or other sequence to a function as though the items in it were being passed as individual arguments:</p>
<pre><code>&gt;&gt;&gt; s = ["spam", "eggs", "ham"]
&gt;&gt;&gt; print(*s)  # notice the *
spam eggs ham
</code></pre>
<p>To get the result you're looking for, you can construct a list on the fly from 5 copies of <code>c</code>, and pass that list with the argument unpacking notation:</p>
<pre><code>&gt;&gt;&gt; print(*([c] * 5), sep = ' | ')
rabble | rabble | rabble | rabble | rabble
</code></pre>
<p>Notice that you're multiplying a list containing <code>c</code> by five, rather than <code>c</code> itself. You might find it helpful to check out what <code>print(*(c * 5), sep = ' | ')</code> actually does, and to try and work out why (hint: strings are also sequences).</p>
</div>
<span class="comment-copy">Thanks Zero, I tried the code at the end (using argument unpacking without putting c in a list) and it prints out each letter of the string "rabble" with the '|' string separating each one. I think I have a better understanding of the original problem, which is that print(c*5) simply concatenates 5 strings and provides no breaking point into which the '|' string can be inserted. When using argument unpacking, each letter is its own item, and in lists each string is its own item between both of which a separator can be inserted. Thanks again.</span>
