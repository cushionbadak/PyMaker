<div class="post-text" itemprop="text">
<p>This is my code:</p>
<pre><code>def fun(x, y, b=None, c=None): 
    print(x,' ',y,' ',b,' ',c)
</code></pre>
<p>I am calling it as <code>fun(1, b=2, c=4)</code> and getting error <code>TypeError: fun() takes at least 2 arguments (3 given)</code>.
I know this error is because of incorrect number of positional and keyword arguments.</p>
<p>Instead of this, I want whenever I call my function with incorrect no. of arguments, it should tell me which argument is provided.
For example: for above case it should say something like "argument y is nor provided".</p>
<p>Can I write a decorator for this purpose?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I want to handle this error and prompt error like it requires these (names) positional arguments. Is it possible to write a decorator for this?</p>
</blockquote>
<p>I did a bit of research and came across the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module. Perhaps something along these lines will suffice? Right now I'm catching <code>TypeError</code> and printing a message, but you may prefer throwing a new <code>TypeError</code> that contains the message instead.</p>
<pre><code>import inspect
from functools import wraps


def inspect_signature(f):
    signature = inspect.signature(f)

    @wraps(f)
    def decorator(*args, **kwargs):
        try:
            f(*args, **kwargs)
        except TypeError:
            print('Failed to call "{}" with signature {}. Provided args={} and kwargs={}.'.format(
                f.__name__, signature, args, kwargs))

    return decorator


@inspect_signature
def func(foo, bar):
    print('Called successfully with foo={}, bar={}'.format(foo, bar))
    pass


if __name__ == '__main__':
    func(foo='a', bar='b')
    func(foo='a')
    func('a', 'b', 'c')
</code></pre>
<p><strong>Output</strong></p>
<pre class="lang-none prettyprint-override"><code>Called successfully with foo=a, bar=b
Failed to call "func" with signature (foo, bar). Provided args=() and kwargs={'foo': 'a'}.
Failed to call "func" with signature (foo, bar). Provided args=('a', 'b', 'c') and kwargs={}.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>fun</code> as defined need to get between 2 and 4 argument, as it has two mandatory arguments and two optional arguments. You did not provide one of the two mandatory ones:</p>
<pre><code>fun(1, b=2, c=4) # What about the argument y?
</code></pre>
<p>You need to call it using one of the next forms:</p>
<pre><code>fun(1, 2)
fun(1, 2, b=3)
fun(1, 2, c=4)
fun(1, 2, b=3, c=4)
</code></pre>
<hr/>
<p>If you want notification about insufficient arguments, you can use <code>args</code> and <code>kwargs</code>:</p>
<pre><code>def fun(*args, **kwargs):

    if len(args) &lt; 2:
        print("Need at least two arguments!"); return
    if len(args) &gt; 2 or len(kwargs) &gt; 2:
        print("Too much arguments supplied!"); return

    x, y = args
    a, b = kwargs.get('a', None), kwargs.get('b', None)

    print(x, y, a, b)
</code></pre>
</div>
<span class="comment-copy">Please post your code otherwise we can't help.</span>
<span class="comment-copy">It's not clear what you want to happen instead. Please clarify " I want to handle this error and prompt error like it requires these (names) positional arguments."</span>
<span class="comment-copy">I am using python 2.7. It does not support inspect.signature()</span>
<span class="comment-copy">@python_user (1) Please don't use Python 2. Let it die. (2) What about <code>inspect.getargspec</code>? I tried that first but it said it was deprecated.</span>
<span class="comment-copy">One thing more, how can I preserve function signature?</span>
<span class="comment-copy">@python_user What do you mean?</span>
<span class="comment-copy">try to print <code>inspect.getargspec(func)</code> after your function call. You willl get empty argspec like this<code>ArgSpec(args=[], varargs='args', keywords='kwargs', defaults=None)</code>.</span>
