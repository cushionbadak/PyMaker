<div class="post-text" itemprop="text">
<p>I have a db record created with Django with a ‘created_at' field in the format 'timestamp with time zone': 2017-01-13 14:12:18.307877+00:00. </p>
<p>I need to check if 30 seconds have elapsed between that time and now.
Should I first convert it to epoch time ? If yes how, without being hit by timezone issues ?</p>
</div>
<div class="post-text" itemprop="text">
<p>With the string </p>
<pre><code>2017-01-13 14:12:18.307877+00:00
</code></pre>
<p>we can use the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.datetime.strptime</code></a> function to produce a <code>datetime</code> object that we can then do time arithmetic with.</p>
<p>First, we remove the last <code>:</code>, because the format for timezones that <code>datetime</code> uses is <code>+0000</code> not <code>+00:00</code>.  Then we hand that string to <code>strptime</code> along with a format string.</p>
<pre><code>from datetime import datetime, timedelta
s = '2017-01-13 14:12:18.307877+00:00'
s = s[:-3]+s[-2:]
pat = '%Y-%m-%d %H:%M:%S.%f%z'
then = datetime.strptime(s, pat)
if datetime.now(then.tzinfo) - then &lt; timedelta(0, 30): 
    print("It has been less than 30 seconds")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If this is a datetime object, then you can subtract another datetime object and get a timedelta, where you can ask elapsed time.</p>
<p><code>d1 = datetime(2017, 1, 1) # create datetime at 2017-01-01T00:00</code></p>
<p><code>d0 = datetime.now()</code></p>
<p><code>diff = (d0 - d1).seconds</code></p>
<p><code>if diff &gt; 30:</code></p>
<p><code>pass</code></p>
<p>The datetime method takes an optional tzinfo, which you can use the set the timezone. This is just a subclass of datetime.tzinfo </p>
<p>Example with GMT +1</p>
<pre><code> class GMT1(tzinfo):
     def utcoffset(self, dt):
         return timedelta(hours=1) + self.dst(dt)
     def dst(self, dt):
         # DST starts last Sunday in March
         d = datetime(dt.year, 4, 1)   # ends last Sunday in October
         self.dston = d - timedelta(days=d.weekday() + 1)
         d = datetime(dt.year, 11, 1)
         self.dstoff = d - timedelta(days=d.weekday() + 1)
         if self.dston &lt;=  dt.replace(tzinfo=None) &lt; self.dstoff:
             return timedelta(hours=1)
         else:
             return timedelta(0)
     def tzname(self,dt):
          return "GMT +1"
</code></pre>
<p>Then you can do</p>
<pre><code>d0 = datetime(2017, 1, 1, tzinfo=GMT1())
</code></pre>
</div>
<span class="comment-copy">Use the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a> module to convert to a datetime object then you can subtract and compare.</span>
<span class="comment-copy">If you remove the <code>:</code> from the time zone, then this is <code>datetime.datetime.strptime('2017-01-13 14:12:18.307877+0000', '%Y-%m-%d %H:%M:%S.%f%z')</code></span>
<span class="comment-copy">Does this respect timezones though?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">@Tagc it uses the default one defined by the running OS. But i updated the answer to take into count timezone.</span>
