<div class="post-text" itemprop="text">
<p>I am new to this, and unsure why this is not working. I have looked for similar problems, but it doesn't seem to help me. The equation is <code>Sn=-7*Sn-1-1*Sn-2</code>, with initial values <code>S0=0</code> and <code>S1=1</code></p>
<pre><code>def s_recursive(n):
    if n==0:
        a=0
        return a
    elif n==1:
        a=1
        return a
    else:
        a=(s_recursive(-7*(n-1))-s_recursive(-1*(n-2)))
        return a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Solution</h1>
<p>You're confusing <code>-7*s(n-1)</code> with <code>s(-7*(n-1))</code> :</p>
<pre><code>def s_recursive(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return -7*s_recursive(n-1)-s_recursive(n-2)

print s_recursive(7)
#=&gt; 105937
print s_recursive(8)
#=&gt; -726103
</code></pre>
<h1>Explanation</h1>
<p>Whatever the (positive) <code>n</code> is, the recursive parameters will decrease toward <code>0</code> and <code>1</code>, so the recursion will reach an end.</p>
<p>For <code>5</code> as start value, it calculates <code>s_recursive</code> for <code>n=</code>:</p>
<pre><code>5
4
3
2
1
0
1
2
1
0
3
2
1
0
1
</code></pre>
<p>and the result is <code>2255</code>.</p>
<p>Note that <code>s_recursive(2)</code> is calculated 3 times. With large <code>n</code>, it would be a good idea to keep a <code>dict</code> of calculated results.</p>
<h1>Your code</h1>
<p>In your code, calling <code>-7*(n-1)</code> recursively was the problem. With <code>n=7</code> as start value, it calculated <code>s_recursive</code> for <code>n</code>:</p>
<pre><code>7
-42
301
-2100
14707
-102942
720601
-5044200
35309407
-247165842
1730160901
-12111126300
84777884107
-593445188742
4154116321201
-29078814248400
203551699738807
-1424861898171642
9974033287201501
-69818233010410500
488727631072873507
-3421093417510114542
23947653922570801801
-167633577457995612600
1173435042205969288207
...
</code></pre>
</div>
<span class="comment-copy">Can you show us some errors / traceback ?</span>
<span class="comment-copy">Looks like you put in a double negative there; <code>-1*Sn-2</code> is not the same as <code>-s_recursive(-1*(n-2))</code>..</span>
<span class="comment-copy">The recursive call is wrong. <code>a=(s_recursive(-7*(n-1))-s_recursive(-1*(n-2)))</code> should be <code>a=(-7*s_recursive(n-1)-s_recursive(n-2))</code></span>
<span class="comment-copy">You never reach<code>0</code> or <code>1</code> because you keep inverting <code>n</code> with multiplication; +4 becomes -29 becomes 210; so you only are going to see <b>larger</b> <code>n</code>, not smaller.</span>
<span class="comment-copy">Eric Duminil has repaired your code, but it will still be rather slow for <code>n &gt; 25</code> or so, due to the double recursion, but you can speed it up considerably by <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow noreferrer">memoizing</a>. The simplest way to do that in Python 3 is to use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a>.</span>
<span class="comment-copy">OP code, with <code>print n</code> as first line inside the method, and called with <code>s_recursive(7)</code>. <code>n=3</code> was wrong in the answer. Thanks</span>
