<div class="post-text" itemprop="text">
<p>My issue here is that the code filters out the even numbers correctly which is what I want, however it stops at seven and doesn't display number 9  which is what I would expect it to do. I've tried going over my code but I can't seem to find the issue    </p>
<pre><code>def remove_even(numbers) :
    new_list = []
    for i in range(0,len(numbers)-1) :
        if i % 2 != 0 :
            new_list.append(i)
    return new_list
l = [1,2,3,4,5,6,7,8,9,10]
print(remove_even(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should just directly loop through your values instead of indices</p>
<pre><code>for i in numbers:
</code></pre>
<p>Otherwise if you wanted to use <code>range</code> you would have to index into your <code>list</code></p>
<pre><code>for i in range(0, len(numbers)):
    if numbers[i] % 2 != 0 :
        new_list.append(numbers[i])
</code></pre>
<p>For brevity, list comprehensions are well-suited for this type of task</p>
<pre><code>&gt;&gt;&gt; new_list = [num for num in l if num % 2 == 1]
&gt;&gt;&gt; new_list
[1, 3, 5, 7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[k for k in l if k %2]
</code></pre>
<p>Is a simple <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> that returns</p>
<pre><code>[1, 3, 5, 7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because you are starting your range() function of your for loop from 0 and ending at len(numbers)-1 (which is 9 in your case), python range() already will run till end-1: </p>
<p>for eg: </p>
<pre><code>for i in range(0,9):
    print(i)
</code></pre>
<p>will print no's:
0
1
2
3
4
5
6
7
8</p>
<p>and that's why your 9 is not here in the output.</p>
<p>you don't have to start your loop from 0.
If you are starting from 0 you can arrange your for loop like this:</p>
<p>1)</p>
<pre><code>for i in range(0, len(numbers)+1)
</code></pre>
<p>2)Or you can code like more pythonic way.</p>
<pre><code>def remove_even(numbers) :
    new_list = []
    for i in numbers :
        if i % 2 != 0 :
            new_list.append(i)
    return new_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#simpliest way of doing it
mylist = [1,2,3,4,5,6,7,8,9,10,11]
for x in mylist:
    if x % 2 == 1: #this displays odd numbers
        print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>numbers = [1,2,3,4,5,6,7,8,9,10]

odds = [i for i in numbers if i%2!=0]
</code></pre>
</div>
<span class="comment-copy">Please check before asking <a href="http://stackoverflow.com/questions/4039374/how-can-i-return-the-odd-numbers-of-a-list-using-only-recursion-in-python" title="how can i return the odd numbers of a list using only recursion in python">stackoverflow.com/questions/4039374/â€¦</a></span>
<span class="comment-copy">just use a list comprehension to create your list. <code>no_even = [x for x in range(n) if x % 2 != 0]</code></span>
<span class="comment-copy">You are looping through the indices, you need to replace <code>i</code> inside loop with <code>numbers[i]</code>.</span>
<span class="comment-copy">why did my answer and for that matter all answers here get down voted? mine was in fact the first answer to propose this solution and according to the op it's the correct one because the accepted answer has the same solution?</span>
<span class="comment-copy">Using recursion in Python for this task is crazy. The only reason to do this recursively is as an exercise in recursion, and I suspect that the OP isn't quite at that stage yet.</span>
<span class="comment-copy">Whoever down voted please comment the reason</span>
<span class="comment-copy">The two methods you describe are not equivalent in the slightest.</span>
