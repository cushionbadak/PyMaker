<div class="post-text" itemprop="text">
<p>If I have a function that needs to return <code>n</code> random elements from a list, I may want to check if the number of elements in the list is larger than the sample I'm asking for, that is:</p>
<pre><code>mysample = []

def rnd(n):
    if len(mysample) &lt; n:
        return False
    return random.sample(mysample, n)
</code></pre>
<p>In this case I returned <code>False</code> if the number of elements asked for is larger than the number we have.</p>
<p>Is this good practice? The place where we're calling <code>rnd()</code> is expecting a list to be returned, not a boolean, so it doesn't feel right to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's actually no need to do this, <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample</code> does it for you (see end of its documentation)</a>:</p>
<blockquote>
<p>If the sample size is larger than the population size, a <code>ValueError</code> is raised.</p>
</blockquote>
<p>In order to answer you question too, though, you'd usually want to raise an exception in these cases, not return something. If you don't, a user won't always realize an error has actually occurred (and an error should never pass silently). </p>
</div>
<div class="post-text" itemprop="text">
<p>Expanding a little on Jim Fasarakis-Hilliard's answer ...</p>
<p>Returning special values in exceptional cases is error-prone, because any code calling your function then has to guard against the special case:</p>
<pre><code>x = rnd(n)
if x == False:
    # deal with it
else:
    # do what you wanted to in the first place
</code></pre>
<p>Note that if <code>False</code> is your special value, you can't just say <code>if not x: ...</code> because that would catch an empty list, which is a valid return value in the "usual" case. Subtleties like this are common with special return values, and you can't assume that calling code will always anticipate them.</p>
<p>If the calling code neglects to guard against your special value, errors become harder to track down:</p>
<pre><code>x = rnd(n)
#
# ... do some stuff ...
#
y = len(x)  # Aargh, TypeError ... where did that happen?
</code></pre>
<p>If you raise an exception instead:</p>
<pre><code>def rnd(n):
    if len(mysample) &lt; n:
        raise ValueError('n must be no larger than size of mysample')
    return random.sample(mysample, n)
</code></pre>
<p>... any error will happen where <code>rnd()</code> is called, with a helpful error message. If the exceptional case needs to be guarded against, the code to do so is more explicit (and less prone to subtle edge cases):</p>
<pre><code>try:
    x = rnd(n)
except ValueError:
    # deal with it
# all is well, continue as normal
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mysample = []

def rnd(n):
    if len(mysample) &lt; n:
        return []
    return random.sample(mysample, n)
</code></pre>
<p>Just return an empty list, when you need to check, use:</p>
<pre><code>if rnd():
    pass
</code></pre>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while
  condition or as operand of the Boolean operations below. The following
  values are considered false:</p>
<p><code>None</code></p>
<p><code>False</code></p>
<p>zero of any numeric type, for example, <code>0</code>, <code>0.0</code>, <code>0j</code>.</p>
<p>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</p>
<p>any empty mapping, for example, <code>{}</code>.</p>
</blockquote>
</div>
<span class="comment-copy">You'd better <code>raise</code> an exception.</span>
<span class="comment-copy">This doesn't allow the client to distinguish between a potentially valid call to <code>rnd</code> where <code>mysample</code> happens to be empty or <code>n</code> happens to be 0; and an invalid call perhaps due to a programming error which should raise an exception to flag the developer's attention.</span>
