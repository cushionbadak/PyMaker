<div class="post-text" itemprop="text">
<p>Seems both executes a subprocess and create a pipe to do in/out, just that the <code>subprocess</code> is newer.</p>
<p>My question is, is there any function that <code>subprocess.Popen</code> can do while <code>os.popen</code> cannot, so that we need the new module <code>subprocess</code>? </p>
<p>Why Python language didn't choose to enhance <code>os.popen</code> but created a new module?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: Never use <code>os.popen</code>, always use <a href="https://docs.python.org/3/library/subprocess.html" rel="noreferrer"><code>subprocess</code></a>!</p>
<p>As you can see from the Python 2.7 <a href="https://docs.python.org/2/library/os.html#os.popen" rel="noreferrer"><code>os.popen</code> docs</a>:</p>
<blockquote>
<p>Deprecated since version 2.6: This function is obsolete. Use the
  <code>subprocess</code> module. Check especially the <a href="https://docs.python.org/2/library/subprocess.html#subprocess-replacements" rel="noreferrer">Replacing Older Functions
  with the subprocess
  Module</a> section.</p>
</blockquote>
<p>There were various limitations and problems with the old <code>os.popen</code> family of functions. And as the docs mention, the pre 2.6 versions weren't even reliable on Windows.</p>
<p>The motivation behind <code>subprocess</code> is explained in <a href="https://www.python.org/dev/peps/pep-0324" rel="noreferrer">PEP 324 -- subprocess - New process module</a>:</p>
<blockquote>
<p><strong>Motivation</strong></p>
<p>Starting new processes is a common task in any programming language,
  and very common in a high-level language like Python. Good support for
  this task is needed, because:</p>
<ul>
<li><p>Inappropriate functions for starting processes could mean a
  security risk: If the program is started through the shell, and
  the arguments contain shell meta characters, the result can be
  disastrous. [1]</p></li>
<li><p>It makes Python an even better replacement language for
  over-complicated shell scripts.</p></li>
</ul>
<p>Currently, Python has a large number of different functions for
  process creation.  This makes it hard for developers to choose.</p>
<p>The subprocess module provides the following enhancements over
  previous functions:</p>
<ul>
<li><p>One "unified" module provides all functionality from previous
  functions.</p></li>
<li><p>Cross-process exceptions: Exceptions happening in the child
  before the new process has started to execute are re-raised in
  the parent.  This means that it's easy to handle exec()
  failures, for example.  With popen2, for example, it's
  impossible to detect if the execution failed.</p></li>
<li><p>A hook for executing custom code between fork and exec.  This
  can be used for, for example, changing uid.</p></li>
<li><p>No implicit call of /bin/sh.  This means that there is no need
  for escaping dangerous shell meta characters.</p></li>
<li><p>All combinations of file descriptor redirection is possible.
  For example, the "python-dialog" [2] needs to spawn a process
  and redirect stderr, but not stdout.  This is not possible with
  current functions, without using temporary files.</p></li>
<li><p>With the subprocess module, it's possible to control if all open
  file descriptors should be closed before the new program is
  executed.</p></li>
<li><p>Support for connecting several subprocesses (shell "pipe").</p></li>
<li><p>Universal newline support.</p></li>
<li><p>A communicate() method, which makes it easy to send stdin data
  and read stdout and stderr data, without risking deadlocks.
  Most people are aware of the flow control issues involved with
  child process communication, but not all have the patience or
  skills to write a fully correct and deadlock-free select loop.
  This means that many Python applications contain race
  conditions.  A communicate() method in the standard library
  solves this problem.</p></li>
</ul>
</blockquote>
<p>Please see the PEP link for the Rationale, and further details.</p>
<p>Aside from the safety &amp; reliability issues, IMHO, the old <code>os.popen</code> family was cumbersome and confusing. It was almost impossible to use correctly without closely referring to the docs while you were coding. In comparison, <code>subprocess</code> is a godsend, although it's still wise to refer to the docs while using it. ;)</p>
<p>Occasionally, one sees people recommending the use of <code>os.popen</code> rather than <code>subprocess.Popen</code> in Python 2.7, eg <a href="http://essays.ajs.com/2011/02/python-subprocess-vs-ospopen-overhead.html" rel="noreferrer">Python subprocess vs os.popen overhead</a> because it's faster. Sure, it's faster, but that's because it doesn't do various things that are vital to guarantee that it's working safely!</p>
<hr/>
<p>FWIW, <a href="https://docs.python.org/3/library/os.html#os.popen" rel="noreferrer"><code>os.popen</code> itself still exists in Python 3</a>, however it's safely implemented via <code>subprocess.Popen</code>, so you might as well just use <code>subprocess.Popen</code> directly yourself. The other members of the <code>os.popen</code> family no longer exist in Python 3. The <code>os.spawn</code> family of functions still exist in Python 3, but the docs recommend that the more powerful facilities provided by the <code>subprocess</code> module be used instead.</p>
</div>
<span class="comment-copy">See <a href="https://www.python.org/dev/peps/pep-0324/" rel="nofollow noreferrer">python.org/dev/peps/pep-0324</a> Motivation &amp; Rationale sections: protect against some security risks, —Åross-process exceptions, better operations with file descriptor, etc.</span>
