<div class="post-text" itemprop="text">
<p>I've seen several post related to this, but no clear answer. Let's say I want to print the string <code>s=u'\xe9\xe1'</code> in a terminal which only supports ASCII (e.g., <code>LC_ALL=C; python3</code>). Is there any way to configure the following as default behaviour:</p>
<pre><code>import sys
s = u'\xe9\xe1'
s = s.encode(sys.stdout.encoding, 'replace').decode(sys.stdout.encoding)
print(s)
</code></pre>
<p>I.e., I want to the string to print something - even garbage - rather than raising an exception (UnicodeEncodeError). I'm using python3.5.</p>
<p>I would like to avoid writing this for all of my strings which may contain UTF-8.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do one of three things:</p>
<ul>
<li><p>Adjust the error handler for <code>stdout</code> and <code>stderr</code> with the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING" rel="nofollow noreferrer"><code>PYTHONIOENCODING</code> environment variable</a>:</p>
<pre><code>export PYTHONIOENCODING=:replace
</code></pre>
<p>note the <code>:</code>; I didn't specify the codec, only the error handler.</p></li>
<li><p>Replace the <code>stdout</code> <code>TextIOWrapper</code>, setting a different error handler:</p>
<pre><code>import sys
import io

sys.stdout = io.TextIOWrapper(
    sys.stdout.buffer, encoding=sys.stdout.encoding, 
    errors='replace',
    line_buffering=sys.stdout.line_buffering)
</code></pre></li>
<li><p>Create a separate <code>TextIOWrapper</code> instance around <code>sys.stdout.buffer</code> and pass that in as the <code>file</code> argument when printing:</p>
<pre><code>import sys
import io

replacing_stdout = io.TextIOWrapper(
    sys.stdout.buffer, encoding=sys.stdout.encoding, 
    errors='replace',
    line_buffering=sys.stdout.line_buffering)

print(s, file=replacing_stdout)
</code></pre></li>
</ul>
</div>
<span class="comment-copy">This is exactly what I was looking for - much appreciated! (I went with option 2)</span>
