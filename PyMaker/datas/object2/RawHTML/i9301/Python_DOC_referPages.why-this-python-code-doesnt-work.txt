<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>Can you help me with this code? </p>
<pre><code>s = [1, 1, 3, 3, 2, 2, 2, 2, 1, 1, 2, 2, 2]

def group(s):
    lst = []
    temp_lst = []
    for i in s:
        if len(temp_lst) == 0:
            temp_lst.append(i)
            continue
        if temp_lst[0] == i:
            temp_lst.append(i)
        else:
            lst.append(temp_lst)
            del temp_lst[:]
            temp_lst.append(i)
    return lst
</code></pre>
<p>It returns: </p>
<pre><code>[[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]
</code></pre>
<p>Why? </p>
<p>My desired output is: </p>
<pre><code>[[1, 1], [3, 3], [2, 2, 2, 2], [1, 1], [2, 2, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works: Replaced <code>del temp_lst[:]</code> by <code>temp_lst = []</code></p>
<pre><code>s = [1, 1, 3, 3, 2, 2, 2, 2, 1, 1, 2, 2, 2]

def group(s):
    lst = []
    temp_lst = []
    for i in s:
        if len(temp_lst) == 0:
            temp_lst.append(i)
            continue
        if temp_lst[0] == i:
            temp_lst.append(i)
        else:
            lst.append(temp_lst)
            temp_lst = []
            temp_lst.append(i)
    lst.append(temp_lst)
    return lst

print group(s)
</code></pre>
<p>Output:</p>
<pre><code>[[1, 1], [3, 3], [2, 2, 2, 2], [1, 1], [2, 2, 2]]
</code></pre>
<p>What <code>del temp_lst[:]</code> does is that it deletes all entries of the list. The key to understand here is that you operate by reference and you need to point <code>temp_list</code> to a new list so you don't operate on the old list you just put into <code>lst</code></p>
<p>Doing <code>temp_list = []</code> leaves the old list (which you just inserted into <code>lst</code>) and assigns the variable (you can think of a pointer) to a new empty list which is not associated with the just inserted list.</p>
<p>As jonrsharpe correctly notes above a better solution would be <code>itertools.groupby</code>:</p>
<pre><code>s = [1, 1, 3, 3, 2, 2, 2, 2, 1, 1, 2, 2, 2]
[list(l[1]) for l in itertools.groupby(s)]
</code></pre>
<p>Output:</p>
<pre><code>[[1, 1], [3, 3], [2, 2, 2, 2], [1, 1], [2, 2, 2]]
</code></pre>
</div>
<span class="comment-copy">You are filling the outer list with references to the same inner list; <code>del tmp_lst[:]</code> empties the existing list, you never create a new one. Also note that <code>itertools.groupby</code> would help you out.</span>
<span class="comment-copy">Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>: <code>[list(g) for _, g in groupby(s)]</code></span>
<span class="comment-copy">Thank you very much, I understand it now!</span>
<span class="comment-copy">@a_z_s you welcome, I added the <code>groupby</code> solution, which is what python offers out of the box, it's most probably better to use this solution instead</span>
<span class="comment-copy">@a_z_s oh and you forgot to add the last <code>temp_lst</code> into <code>lst</code>, I corrected that in the code above as well</span>
