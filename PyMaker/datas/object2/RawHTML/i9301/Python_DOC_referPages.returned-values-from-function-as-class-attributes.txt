<div class="post-text" itemprop="text">
<p>Say I have a function and a class like this,</p>
<pre><code>&gt;&gt;&gt; def something():
...     x = 5 
...     y = 6
...     return x, y

&gt;&gt;&gt; class SomethingElse():
...     def __init__(self, x, y):
...             self.x = x
...             self.y = y
...             print(x+y)
... 
</code></pre>
<p>I want to pass what my function returns as attributes to my class, is this possible to do? Since I when I call my function I get it as only 1 attribute.</p>
<pre><code>&gt;&gt;&gt; S = SomethingElse(5, 6)
11
&gt;&gt;&gt; S1 = SomethingElse(something)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __init__() missing 1 required positional argument: 'y'
</code></pre>
<p>What I actually want is,</p>
<pre><code>&gt;&gt;&gt; S1 = SomethingElse(something)
11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the splat (<em>or "unpacking"</em>) operator <code>*</code>, like so </p>
<pre><code>&gt;&gt;&gt; SomethingElse(*something())
11
</code></pre>
<p>This can be seen in <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a> in the Python tutorial, and is usually referred to as argument unpacking. </p>
</div>
<div class="post-text" itemprop="text">
<p>You have a few options. </p>
<p>This <strong>makes <code>y</code> an optional argument.</strong> Call it using <code>SomethingElse(something())</code> or <code>SomethingElse(5, 6)</code>.</p>
<pre><code>class SomethingElse():
     def __init__(self, x, y=None):
         if y is None:
             x, y = *x
         self.x = x
         self.y = y
         print(x + y)
</code></pre>
<p>This <strong>defines a helper function <code>make_kind</code> that returns a new instance of <code>SomethingElse</code></strong> entirely. You can call it using <code>SomethingElse.make_kind()</code>; no <code>self</code> paremeter is needed.</p>
<pre><code>class SomethingElse():
     def __init__(self, x, y):
         self.x = x
         self.y = y
         print(x + y)

     @staticmethod
     def make_kind():  
          x = 5 
          y = 6
          return SomethingElse.__init__(x, y)
</code></pre>
<p>Learn more about <a href="https://docs.python.org/3.5/library/functions.html#staticmethod" rel="nofollow noreferrer"><code>@staticmethod</code></a> on the official Python 3.5 Docs.</p>
</div>
<span class="comment-copy">I don't think this really addresses the question at all.</span>
<span class="comment-copy">@juanpa.arrivillaga why not? Just "I don't think this really addresses the question at all" is not helpful.</span>
<span class="comment-copy">The question is how to pass a tuple to a constructor. Your first option really makes no sense and should be replaced by the use of a splat operator. Your second option makes assumptions about the design - it may be a valid solution, but again, doesn't answer the question as asked.</span>
<span class="comment-copy">I will stick with the first answer, unpacking the list.</span>
<span class="comment-copy">@noɥʇʎԀʎzɐɹƆ operator overloading? How so? And why is that a good thing? I'm pretty sure it is a SyntaxError anyway. And using it like<code>SomethingElse(something) </code> is <i>definitely</i> wrong, since <code>something</code> is a function object.</span>
