<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/730764/how-to-properly-ignore-exceptions">How to properly ignore exceptions</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/40102786/how-not-to-stop-the-execution-of-other-function-in-python-in-case-of-exception-e">How not to stop the execution of other function in python in case of Exception/Error</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>Generally, <code>try/except</code> clauses are used to handle errors and exceptions, catch them and act accordingly. But suppose, there is a script and the user is not sure where the exceptions can be raised. Now instead of applying try/except everywhere, is there any module or decorator which can catch any exception to occur and simply let the program not break?</p>
<p>Edit : This can not be a duplicate of try/except question. Of course I am aware of it and can apply it to all the possible places I know the exception may occur. I'm specifically looking for some module or a decorator which deals with exception handling. A builtin function which is called just before an error is raised would solve the problem too.</p>
</div>
<div class="post-text" itemprop="text">
<p>The proper way to handle exceptions is to use a <code>try</code>/<code>except</code> block surrounding the piece of code in which the exception could be raised. Sometimes this means wrapping your <code>main()</code> function (or whatever function runs the entire program) in a <code>try</code>/<code>except</code> block. That's fine. If you want to ignore the exception entirely, you can use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress</code></a>, which is also fine and saves you a couple lines of code.</p>
<p>Now, if for some reason you need to react to uncaught exceptions and you are not able to surround the relevant piece of code with <code>try</code>/<code>except</code>, you can set <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer"><code>sys.excepthook</code></a> to a function that accepts the exception info as arguments and implements whatever handling you want, e.g. logging the exception. This is a fairly crude mechanism and I wouldn't recommend using it under normal circumstances, though. (And as far as I know, it cannot prevent the exception from being raised, if that's what you're asking - it can only give you a chance to run some of your own code before the stack unwinds and the program ends.)</p>
</div>
<span class="comment-copy">let the program not break?  but what will it do instead of "not breaking". What you're asking exists, just can't put a name on it for now.</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre Suppose there is a loop running to do some task over a bunch of lists. Now one of the times a list element is of unexpected type which the user is not aware of. But the main priority is to skip it, do not quit the program and proceed with the rest of the list elements.</span>
<span class="comment-copy">In the duplication suggestion, there's an answer talking about <code>suppress</code> context manager. I think that's what you need. <code>from contextlib import suppress</code></span>
<span class="comment-copy">In the accepted answer to <a href="http://stackoverflow.com/questions/40102786/how-not-to-stop-the-execution-of-other-function-in-python-in-case-of-exception-e">How not to stop the execution of other function in python in case of Exception/Error</a>, example to create custom decorator to suppress error is mentioned</span>
<span class="comment-copy">This kind of thing is ok during development / debugging, but you shouldn't be doing it in production code. A program that raises random exceptions in random places is not to be trusted. Of course, it's perfectly fine for a program to raise expected exceptions, after all, that's a core feature of EAFP design, but they should be handled explicitly.</span>
<span class="comment-copy">Semi-serious answer <a href="https://github.com/ajalt/fuckitpy" rel="nofollow noreferrer">github.com/ajalt/fuckitpy</a></span>
