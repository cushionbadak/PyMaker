<div class="post-text" itemprop="text">
<p>i have a question, but it is difficult to explain for me:</p>
<p>I have a application (let call it abc), that have their own console - this soncole runs via CMD like this:
    <code>abc console console.xml</code>
abc console start in the same window, but instead <code>C:\&gt;</code>, i get only <code>&gt;</code> - rest is like CMD.</p>
<p>I know that i can run cmd commands i.e like this:</p>
<pre><code>self.full_path = 'dir /b'
self.pipe = check_output(self.full_path, shell=True, universal_newlines=True).strip()
</code></pre>
<p>but, when i try to do that:</p>
<pre><code>self.full_path = 'abc console console.xml'
self.pipe = check_output(self.full_path, shell=True, universal_newlines=True).strip()
</code></pre>
<p>nothing has happen, console freeze. I've tried to add some more commands, to check if despite "freeze" i can do something, like export some xml, but nothing happends.</p>
<p>Is there any way to pass any commands to abc?</p>
</div>
<div class="post-text" itemprop="text">
<p>If your application is sufficiently simple, it will likely accept commands through its standard input. If you run it directly in the shell, it gets its standard input directly from input you provide yourself (unless you use redirection).</p>
<p>But if you run it as a subprocess from another Python program and you want to automate its input, you have to tell your Python code to feed that input into the application's stdin channel.</p>
<p>There are a couple of ways to do that with the <code>subprocess</code> module. Assuming you want to provide a single or a group of commands to your application only once, without reacting on later output, timing sensitive actions or user interaction, you can indeed use <code>check_output()</code>:</p>
<pre class="lang-py prettyprint-override"><code>import subprocess

external_command = 'abc console console.xml'
pass_command = 'twiddle knob\n'

output = subprocess.check_output(external_command, shell=True,
                                 universal_newlines=True,
                                 input=pass_command)
</code></pre>
<p>Note that you pass a string to the <code>input</code> parameter that includes all the commands you want to send in one go, delimited by newlines (hence the <code>\n</code>).</p>
<p>You can build that string from a list of commands, if you want: <code>pass_command = '\n'.join(command_list) + '\n'</code></p>
<p>If you need a more flexible way of feeding input into your application, you can use the <code>stdin=</code> parameter instead and pass it a file object or file descriptor. Or rather use <code>Popen()</code> for a more flexible interface.</p>
<p>Also note that <code>check_output()</code> doesn't return a pipe, but a string with all the output. So you need to make sure that your application ends by itself (or by sending it a command that makes it quit), otherwise <code>check_output()</code> will wait forever. If you cannot or don't want to make it quit immediately, you need to use the more flexible <code>Popen()</code> interface and write / read as required.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to Blubberdiblub, i was able to make this:</p>
<pre><code>    print("\nStarting ABC console")
    self.pass_start = Popen(self.run_abc, shell=True, cwd=self.full_path, stdin=PIPE, universal_newlines=True)
    sleep(20) #becouse consol starts about 15 seconds

    print("\nExport application")
    self.pass_start.stdin.write(self.export_app)
    sleep(2)

    self.pass_start.kill()
</code></pre>
<p>Mayby it is not perfect, and more advanced users could do that better, but in this way i'm able to open abc console, and pass there  few commands, than close this console.</p>
</div>
<span class="comment-copy">You should clarify how this application gets their commands from the user. What exactly does it mean that it has "its own console"? Do you talk to it line based in a question-answer style? Or does it present you with a character-based interface, i.e. putting stuff at certain character cell locations of the console, line editing, formatting and stuff like that? Your example code in your question should also call <code>abc</code> then, not <code>dir</code>. Describe what problems you're having when you do that. Ideally, you should also fix the spelling: <a href="http://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a></span>
<span class="comment-copy">Hi, please find out more details in 1st post</span>
<span class="comment-copy">To be honest, i've tried few different approach, and i can't figure it out. <code>self.start_abc = Popen(self.run_abc, shell=True, cwd=self.full_path, universal_newlines=True, stdin=self.command_to_abc)</code>. I've added <code>cwd</code>, becouse i can start abc only from specific directory. In <code>self.command_to_abc</code> there is simple commad, returning file output - this file is not created, so whole doesn't work</span>
<span class="comment-copy">@Fangir what file are you referring to when you say "this file is not created"? Isn't the output of the external program going to its stdout (which is generally not a file)?</span>
<span class="comment-copy">I've tried for test, to pass command to abc console, that generates xml file. File wasn't created, additionaly, i've run program from CMD, and that was output: <code>AttributeError: 'str' object has no attribute 'fileno'</code></span>
<span class="comment-copy">@Fangir well, you have to read up on the <a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="nofollow noreferrer">documentation of Popen()</a>, as it's not used the same way as <code>check_output()</code>. The latter is very simplified, whereas you have to use a pipe to feed input into a subprocess started with <code>Popen()</code>. You cannot pass your commands directly to the <code>Popen()</code> call as a string. You can use <code>communicate()</code> once you have set up your Popen instance, if you want the total output at once, otherwise you can read and write the pipes yourself.</span>
<span class="comment-copy">Note that the <code>write()</code> method just returns the number of characters written. So if you don't really need that value, you could omit the <code>self.export_application = </code> part.</span>
<span class="comment-copy">didn't think about that - even less amount of code (above edited version) - thank you!</span>
