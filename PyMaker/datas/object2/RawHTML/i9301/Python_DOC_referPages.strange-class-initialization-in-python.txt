<div class="post-text" itemprop="text">
<p>In the python library <a href="https://github.com/sam-cox/pytides" rel="nofollow noreferrer">pytides</a>, I came across a strange method to <strong>initialize</strong> a class (the <a href="https://github.com/sam-cox/pytides/blob/master/pytides/tide.py" rel="nofollow noreferrer">Tide</a> class and its <a href="https://github.com/sam-cox/pytides/wiki/How-to-use-the-NOAA's-published-Harmonic-Constituents-in-Python-with-Pytides" rel="nofollow noreferrer">initialization </a>).
I reproduced below a simplified version of the code :</p>
<pre><code>import numpy as np

class Foo(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y

class Foobar(object):
    dtype = np.dtype([('fooObj', object),
                      ('A', float),
                      ('B', float)])

    def __init__(self,model):
        '''model: an ndarray of type Foobar.dtype '''
        self.model = model


# initialize a Foobar object
myFoos = [Foo(4,3),Foo(4,9),Foo(0,2)]
A = [2,3,4]
B = [8,9,0]
model = np.zeros(len(myFoos), dtype = Foobar.dtype)
model['fooObj'] = myFoos     #what is that?!?
model['A'] = A
model['B'] = B
myFoobar = Foobar(model=model)
</code></pre>
<p>As I understand, the dtype variable in Foobar is a global variable, but I don't understand what's the point to have it. Is it just here to provide a convenient way to initialize Foobar? Moreover the Foobar class needs an array of Foobar.dtype at construction, is not a sort of cyclic call (which should crash)?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Foobar.dtype</code> is a class attribute.</p>
<p>That is a variable which is attached to the definition of the class not a single instance of the class. If you're familiar with other popular object-oriented languages, this concept is very similar to a static variables in Java and C#.</p>
<p>Python docs which explains in more detail <a href="https://docs.python.org/3/tutorial/classes.html#class-objects" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#class-objects</a></p>
<hr/>
<p>Considering class Foobar in the example you've provided:</p>
<p><code>Foobar</code> is a class</p>
<p><code>myFoobar</code> is an instance of <code>Foobar</code></p>
<p>let's pretend that there's another instance too: <code>yourFoobar</code></p>
<p>then <code>myFoobar</code> and <code>yourFoobar</code> (and any other instances) may need to be able to have access to some data (in this case a definition of a <code>numpy</code> datatype) which is the same for all instances of <code>Foobar</code>. Thus there's an argument that it should be associated to the class rather than each individual instance. (However there are also arguments that class attributes / static variables do more harm than good: <a href="https://stackoverflow.com/questions/7026507/why-are-static-variables-considered-evil">Why are static variables considered evil?</a>)</p>
<p>i.e. avoiding a way of writing it where you allocate each instance of Foobar its own instance of the same numpy dtype definition, such as...</p>
<pre><code>class Foobar(object):
    def __init__(self,model):
        '''model: an ndarray of type self.dtype '''
        self.model = model
        self.dtype = np.dtype([('fooObj', object),
                      ('A', float),
                      ('B', float)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There isn't much that is strange about this initialization, <code>dtype</code> holds the types <code>Foobar</code> requires for the numpy array it receives durings its initialization (<code>model</code>). It's a class attribute, not a global one, so it is shared by all instances of the <code>Foobar</code> class.</p>
<p>The way <code>model</code> is initialized might seem odd, but it is just initializing <code>model</code> based on the name that specifies the field, this might be best demonstrated by printing out <code>model</code> in between the steps:</p>
<pre><code>model['fooObj'] = myFoos
print(model)
array([(&lt;__main__.Foo object at 0x7f125ed93828&gt;, 0.0, 0.0),
       (&lt;__main__.Foo object at 0x7f125ed93940&gt;, 0.0, 0.0),
       (&lt;__main__.Foo object at 0x7f125ed93240&gt;, 0.0, 0.0)], 
      dtype=[('fooObj', 'O'), ('A', '&lt;f8'), ('B', '&lt;f8')])
</code></pre>
<p>adds the values for the <code>'fooObj'</code> object type. While:</p>
<pre><code>model['A'] = A
model['B'] = B
</code></pre>
<p>adds the values for the <code>float</code> types <code>'A'</code> and <code>'B'</code> respectively.</p>
</div>
<span class="comment-copy">The <code>dtype</code> variable in <code>Foobar</code> is <i>not</i> a global variable, it's a class attribute, which is shared by all instances of the <code>Foobar</code> class.</span>
<span class="comment-copy">Thanks @Richard. I think I was confused by the name of the variable (dtype). The Python doc make it clearer.</span>
