<div class="post-text" itemprop="text">
<p>Happy examples:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

czech = u'Leo≈° Jan√°ƒçek'.encode("utf-8")
print(czech)

pl = u'Zdzis≈Çaw Beksi≈Ñski'.encode("utf-8")
print(pl)

jp = u'„É™„É≥„Ç∞ Â±±Êùë Ë≤ûÂ≠ê'.encode("utf-8")
print(jp)

chinese = u'‰∫îË°å'.encode("utf-8")
print(chinese)

MIR = u'–ú–∞—à–∏–Ω–∞ –¥–ª—è –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –†–∞—Å—á—ë—Ç–æ–≤'.encode("utf-8")
print(MIR)

pt = u'Minha L√≠ngua Portuguesa: √ß√°√†'.encode("utf-8")
print(pt)
</code></pre>
<p>Unhappy output:</p>
<pre><code>b'Leo\xc5\xa1 Jan\xc3\xa1\xc4\x8dek'
b'Zdzis\xc5\x82aw Beksi\xc5\x84ski'
b'\xe3\x83\xaa\xe3\x83\xb3\xe3\x82\xb0 \xe5\xb1\xb1\xe6\x9d\x91 \xe8\xb2\x9e\xe5\xad\x90'
b'\xe4\xba\x94\xe8\xa1\x8c'
b'\xd0\x9c\xd0\xb0\xd1\x88\xd0\xb8\xd0\xbd\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\x98\xd0\xbd\xd0\xb6\xd0\xb5\xd0\xbd\xd0\xb5\xd1\x80\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xa0\xd0\xb0\xd1\x81\xd1\x87\xd1\x91\xd1\x82\xd0\xbe\xd0\xb2'
b'Minha L\xc3\xadngua Portuguesa: \xc3\xa7\xc3\xa1\xc3\xa0'
</code></pre>
<p>And if I print them like this:</p>
<pre><code>jp = u'„É™„É≥„Ç∞ Â±±Êùë Ë≤ûÂ≠ê'
print(jp)
</code></pre>
<p>I get:</p>
<pre><code>Traceback (most recent call last):
  File "x.py", line 5, in &lt;module&gt;
    print(jp)
  File "C:\Python34\lib\encodings\cp850.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_map)[0]
UnicodeEncodeError: 'charmap' codec can't encode characters in position
0-2: character maps to &lt;undefined&gt;
</code></pre>
<p>I've also tried the following from <a href="https://stackoverflow.com/questions/5419/python-unicode-and-the-windows-console">this question</a> (And other alternatives that involve <code>sys.stdout.encoding</code>):</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import sys

def safeprint(s):
    try:
        print(s)
    except UnicodeEncodeError:
        if sys.version_info &gt;= (3,):
            print(s.encode('utf8').decode(sys.stdout.encoding))
        else:
            print(s.encode('utf8'))

jp = u'„É™„É≥„Ç∞ Â±±Êùë Ë≤ûÂ≠ê'
safeprint(jp)
</code></pre>
<p>And things get even more cryptic:</p>
<pre><code>œÄ√¢¬¨œÄ√¢‚îÇœÄ√©‚ñë œÉ‚ñí‚ñí¬µ¬•√¶ Œ¶‚ñì‚ÇßœÉ¬°√â
</code></pre>
<p><a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">And the docs were not very helpful</a>.</p>
<p>So, what's the deal with Python 3.4, Unicode, different languages and Windows? Almost all possible examples I could find, deal with Python 2.x.</p>
<p>Is there a general and cross-platform way of printing ANY Unicode character from any language in a decent and non-nasty way in Python 3.4?</p>
<p>EDIT:</p>
<p>I've tried typing at the terminal:</p>
<pre><code>chcp 65001
</code></pre>
<p>To change the code page, <a href="https://stackoverflow.com/questions/388490/unicode-characters-in-windows-command-line-how">as proposed here</a> and in the comments, and it did not work (Including the attempt with sys.stdout.encoding)</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem <strike>is</strike><strong>was</strong> (see Python 3.6 update below) with the Windows console, which supports an ANSI character set appropriate for the region targeted by your version of Windows.  Python throws an exception by default when unsupported characters are output.</p>
<p>Python can read an <a href="https://docs.python.org/3.4/using/cmdline.html#envvar-PYTHONIOENCODING" rel="nofollow noreferrer">environment variable</a> to output in other encodings, or to change the error handling default.  Below, I've read the console default and change the default error handling to print a <code>?</code> instead of throwing an error for characters that are unsupported in the console's current code page.</p>
<pre><code>C:\&gt;chcp
Active code page: 437   # Note, US Windows OEM code page.

C:\&gt;set PYTHONIOENCODING=437:replace

C:\&gt;example.py
Leo? Jan√°?ek
Zdzis?aw Beksi?ski
??? ?? ??
??
?????? ??? ?????????? ????????
Minha L√≠ngua Portuguesa: √ß√°√†
</code></pre>
<p>Note the US OEM code page is limited to ASCII and some Western European characters.</p>
<p>Below I've instructed Python to use UTF8, but since the Windows console doesn't support it, I redirect the output to a file and display it in Notepad:</p>
<pre><code>C:\&gt;set PYTHONIOENCODING=utf8
C:\&gt;example &gt;out.txt
C:\&gt;notepad out.txt
</code></pre>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/2jt15.png"/></p>
<p>On Windows, its best to use a Python IDE that supports UTF-8 instead of the console when working with multiple languages.  If only using one language, select it as the system locale in the <code>Region and Language</code> control panel and the console will support the characters of that language.</p>
<h2>Update for Python 3.6</h2>
<p>Python 3.6 now uses Windows Unicode APIs to write directly to the console, so the only limit is the console font's support of the characters.  The following code works in a US Windows console.  I have a Chinese language pack installed, it even displays the Chinese and Japanese if the console font is changed.  Even without the correct font, replacement characters are shown in the console.  Cut-n-paste to an environment such as this web page will display the characters correctly.</p>
<pre><code>#!python3.6
#coding: utf8
czech = 'Leo≈° Jan√°ƒçek'
print(czech)

pl = 'Zdzis≈Çaw Beksi≈Ñski'
print(pl)

jp = '„É™„É≥„Ç∞ Â±±Êùë Ë≤ûÂ≠ê'
print(jp)

chinese = '‰∫îË°å'
print(chinese)

MIR = '–ú–∞—à–∏–Ω–∞ –¥–ª—è –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –†–∞—Å—á—ë—Ç–æ–≤'
print(MIR)

pt = 'Minha L√≠ngua Portuguesa: √ß√°√†'
print(pt)
</code></pre>
<p>Output:</p>
<pre><code>Leo≈° Jan√°ƒçek
Zdzis≈Çaw Beksi≈Ñski
„É™„É≥„Ç∞ Â±±Êùë Ë≤ûÂ≠ê
‰∫îË°å
–ú–∞—à–∏–Ω–∞ –¥–ª—è –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –†–∞—Å—á—ë—Ç–æ–≤
Minha L√≠ngua Portuguesa: √ß√°√†
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update:</strong> <a href="https://stackoverflow.com/a/32176732/4279">Since Python 3.6, the code example that prints Unicode strings directly should just work now (even without <code>py -mrun</code>)</a>.</p>
<hr/>
<p>Python can print text in multiple languages in Windows console whatever <code>chcp</code> says:</p>
<pre><code>T:\&gt; py -mpip install win-unicode-console
T:\&gt; py -mrun your_script.py
</code></pre>
<p>where <code>your_script.py</code> prints Unicode directly e.g.:</p>
<pre><code>#!/usr/bin/env python3
print('≈° √°ƒç')      # cz
print('≈Ç ≈Ñ')       # pl
print('„É™„É≥„Ç∞')     # jp
print('‰∫îË°å')      # cn
print('—à —è –∂—Ö —ë') # ru
print('√≠ √ß√°√†')    # pt
</code></pre>
<p>All you need is to configure the font in your Windows console that can display the desired characters.</p>
<p>You could also run your Python script via IDLE without installing non-stdlib modules:</p>
<pre><code>T:\&gt; py -midlelib -r your_script.py
</code></pre>
<p>To write to a file/pipe, use <code>PYTHONIOENCODING=utf-8</code> as <a href="https://stackoverflow.com/a/30540470/4279">@Mark Tolonen suggested</a>:</p>
<pre><code>T:\&gt; set PYTHONIOENCODING=utf-8
T:\&gt; py your_script.py &gt;output-utf8.txt 
</code></pre>
<p>Only the last solution supports non-BMP characters such as <a href="https://codepoints.net/U+1F612" rel="nofollow noreferrer">üòí (U+1F612 UNAMUSED FACE)</a> -- <code>py -mrun</code> can write them but Windows console displays them as boxes even if the font supports corresponding Unicode characters (though you can copy-paste the boxes into another program, to get the characters).</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/q/28521944">python3 print unicode to windows xp console encode cp437</a> looks applicable, as does <a href="http://stackoverflow.com/q/507123">python 3.0, how to make print() output unicode?</a>.</span>
<span class="comment-copy">Your console is not configured for Unicode output; <a href="http://en.wikipedia.org/wiki/Code_page_850" rel="nofollow noreferrer">CP850</a> cannot handle all that much.</span>
<span class="comment-copy">I think the problem is not in Python but in the Windows console which will have only one code page, which is by default not a unicode one. Try <code>chcp 65001</code> to set it to UTF-8 code page. Taken from <a href="http://stackoverflow.com/questions/388490/unicode-characters-in-windows-command-line-how">Unicode characters in Windows command line</a>.</span>
<span class="comment-copy">I expect to get the same thing I've put inside the strings.</span>
<span class="comment-copy">The Windows console can print Unicode strings just fine (assuming the font supports it), using <code>WriteConsoleW</code>. But Python doesn't use that, see <a href="https://bugs.python.org/issue1602" rel="nofollow noreferrer">bugs.python.org/issue1602</a>.</span>
<span class="comment-copy">The Windows console can print arbitrary Unicode strings using <code>WriteConsoleW</code> (limited by font support and not handling non-BMP characters correctly, though). Python doesn't use that function; see <a href="https://bugs.python.org/issue1602" rel="nofollow noreferrer">bugs.python.org/issue1602</a> for some discussion.</span>
<span class="comment-copy">Python 3.6: you need to configure the console: right click on the top of the windows (of the cmd or the python IDLE), in default/font choose the "Lucida console".</span>
<span class="comment-copy">@Guillaume That won't help for Chinese/Japanese.  I installed the Chinese Language pack in Windows 10 and then new console fonts were available.  The SimSun fonts looked good and supported all six of the languages above.</span>
<span class="comment-copy">@MarkTolonen thanks for this explanation!</span>
<span class="comment-copy">How would you do the interactive versions? I guess Python is <code>python -i -m run</code>, but I cannot figure out ipython, even though it's stated on win-unicode-console's page that it's integrated.</span>
<span class="comment-copy">@zsero: <a href="https://github.com/Drekin/win-unicode-console/tree/9652bb146379485d78f6c7534638f3701d651324#usage" rel="nofollow noreferrer">the docs show several approaches</a> e.g., <code>py -i -m run c:\path\to\ipython</code>. You could also use qtconsole interface or <a href="http://ipython.org/notebook.html" rel="nofollow noreferrer">a web-browser-based notebook</a>. If it doesn't work for you; ask a separate question about what do you want to do with <code>ipython</code> and what fails exactly.</span>
<span class="comment-copy">@eryksun: no. Notice that <code>py -mrun</code> is used.</span>
<span class="comment-copy">@sebastian I guess I solved my issue with your help. Your answer is  bite confusing: as a python 3.6 user I did not understood if I should ignore or take into account what you write bellow it. If it is the case a kind of "for the previous version:" would make it more clear. Thanks for your patience!</span>
<span class="comment-copy">Lucida console doesn't support Chinese or Japanese either.</span>
