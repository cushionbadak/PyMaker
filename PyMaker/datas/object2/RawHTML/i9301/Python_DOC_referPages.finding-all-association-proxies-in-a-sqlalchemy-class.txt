<div class="post-text" itemprop="text">
<p>I know an easy way to get all proper SQLA columns from a class A (that inherits from db.Model) - I can do <code>A.__table__.columns</code> at runtime. However, A also has several association proxies, and I don't know of an elegant way to get a list of those (other than just running on all of the class' attributes).
Is there maybe a way to use SQLA's inspect for this?</p>
<p>I'm using python 2.7 and Flask-SQLAlchemy.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a way using the <a href="http://docs.sqlalchemy.org/en/latest/core/inspection.html" rel="nofollow noreferrer">runtime inspection API</a>. With it you wouldn't even need to poke at the internals of <code>A</code> through <code>__table__</code>:</p>
<pre><code>from sqlalchemy import inspect

inspect(A).columns
</code></pre>
<p>For a list of association proxies you could for example do</p>
<pre><code>from sqlalchemy.ext.associationproxy import ASSOCIATION_PROXY

proxies = [desc for desc in inspect(A).all_orm_descriptors
           if desc.extension_type is ASSOCIATION_PROXY]
</code></pre>
<p><a href="http://docs.sqlalchemy.org/en/latest/orm/mapping_api.html#sqlalchemy.orm.mapper.Mapper.all_orm_descriptors" rel="nofollow noreferrer"><code>all_orm_descriptors</code></a> is a collection of <code>InspectionAttr</code> attributes, which includes mapped attributes as well as attributes declared by extensions. To differentiate between extensions, and non-extensions, inspect the <a href="http://docs.sqlalchemy.org/en/latest/orm/internals.html#sqlalchemy.orm.base.InspectionAttr.extension_type" rel="nofollow noreferrer"><code>InspectionAttr.extension_type</code></a> constant attribute.</p>
</div>
<span class="comment-copy">@everilae Thanks, that helped a lot! I wasn't familiar with <code>all_orm_descriptors</code>.   One thing, however, that I had to work around was the fact that the association proxy objects returned from the inspection were partial. I couldn't access most of their attributes (like <code>remote_attr</code> or <code>local_attr</code>), as I'd get an error stating that: <code>Class object expected, got 'None'.</code>  I worked around it by getting the name of the proxy, and then using <code>getattr</code>.  Any further suggestions maybe?</span>
<span class="comment-copy">The error is raised if you try to access <code>attr</code>, <code>remote_attr</code>, or <code>local_attr</code> of the <code>AssociationProxy</code> <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor object</a> before you've first accessed it through the model class or an instance. Descriptors don't get a reference to the class they are bound to during class construction. Instead the class and possible instance are passed to <code>__get__</code> method of the descriptor when accessed, like doing <code>the_proxy.__get__(None, A)</code>. The <code>AssociationProxy</code> instance seems to store a reference on 1st call, after which you can access the <code>attr</code> etc.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/howto/descriptor.html#invoking-descriptors" rel="nofollow noreferrer">Invoking Descriptors</a> for further details about how they do their thing.</span>
<span class="comment-copy">Thanks for another clarification! I ended up doing what you've suggested - calling <code>desc.__get__(None, cls)</code>, and this seems to work fine.</span>
