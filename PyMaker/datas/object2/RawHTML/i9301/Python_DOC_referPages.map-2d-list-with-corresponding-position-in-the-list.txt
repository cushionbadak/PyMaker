<div class="post-text" itemprop="text">
<p>I have following 2D-Array like:</p>
<pre><code>[['4470', '4753.5', '5682', '4440', '6113.5', '3661.5', '7555.3', '6090.3', '5147.3', '4296'], ['4468.5', '4742.5', '5297', '5501.8', '5061.3', '2933.5', '6367.5', '6053.8', '5654.3', '3793.3']]
</code></pre>
<p>I want to transform it to a new list with each element mapped to its position in the overall list like:</p>
<pre><code>[[('1','4470'),('2', '4753.5'), ...], [('11', '4468.5'), ...]]
</code></pre>
<p>Position in next sub-list should be the next value from the previous sub-list. Also, the length of each sub-list is same.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to achieve this, you may use <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow noreferrer"><strong><code>enumerate()</code></strong></a> with <em>nested list comprehension</em> expression as:</p>
<pre><code>my_list = [['4470', '4753.5', '5682', '4440', '6113.5', '3661.5', '7555.3', '6090.3', '5147.3', '4296'], ['4468.5', '4742.5', '5297', '5501.8', '5061.3', '2933.5', '6367.5', '6053.8', '5654.3', '3793.3']]
sub_list_len = len(my_list[0])  # all the sub-lists are of constant length

new_list = [[(str(i), j) for i, j in enumerate(sub_list, n*sub_list_len+1)] \
                 for n, sub_list in enumerate(my_list)]
</code></pre>
<p>Final value hold by <code>new_list</code> will be:</p>
<pre><code>[[('1', '4470'), ('2', '4753.5'), ('3', '5682'), ('4', '4440'), ('5', '6113.5'), ('6', '3661.5'), ('7', '7555.3'), ('8', '6090.3'), ('9', '5147.3'), ('10', '4296')], [('11', '4468.5'), ('12', '4742.5'), ('13', '5297'), ('14', '5501.8'), ('15', '5061.3'), ('16', '2933.5'), ('17', '6367.5'), ('18', '6053.8'), ('19', '5654.3'), ('20', '3793.3')]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>def list2tupple(array):
    return_list = []
    for item in array:
        for iteration, value in enumerate(item):
            return_list.append((str((iteration+1)), str(value)))
    return return_list
</code></pre>
<p><strong>Exapmle</strong>:</p>
<pre><code>a = [['a']]
print(list_tupple(a))
output: [('1', 'a')]
</code></pre>
<p>You could use list comprehension for this, but I think this is clearer.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wanted to give you an example as simple as it gets, I created a new list, and counter to know which key I'm on.</p>
<p>I iterate my_list through each sub-list, than I iterate through each sub-list item.</p>
<p>Than I'm creating a tuple which I'll append to a new list.</p>
<pre><code>    my_list = [['4470', '4753.5', '5682', '4440', '6113.5', '3661.5', '7555.3', '6090.3', '5147.3', '4296'],
           ['4468.5', '4742.5', '5297', '5501.8', '5061.3', '2933.5', '6367.5', '6053.8', '5654.3', '3793.3']]

new_list = []
count = 1  # the key
for sub_list in my_list:  # gets both of the sub lists
    for item in sub_list:  # gets the items in each list
        new_list.append((str(count), item))  # appends a tuple to a new list
        count += 1
</code></pre>
<p>Since your question included the words: key and value I will add another way to arrange my_list to key and value inform of <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>.</p>
<pre><code>my_list = [['4470', '4753.5', '5682', '4440', '6113.5', '3661.5', '7555.3', '6090.3', '5147.3', '4296'],
           ['4468.5', '4742.5', '5297', '5501.8', '5061.3', '2933.5', '6367.5', '6053.8', '5654.3', '3793.3']]

new_dict = {}  # new dictionary
count = 1  # the key
for sub_list in my_list:  # gets both of the sub lists
    for item in sub_list:  # gets the items in each list
        new_dict[count] = item  # appends key and value to the dict
        count += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Same thing but different - using <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer">itertools.count</a>.</p>
<pre><code>import itertools

a = [['4470', '4753.5', '5682',  .....]]

item_nbrs = itertools.count(1)
def tuples(iterable):
    for thing in iterable:
        yield (next(item_nbrs), thing)

z = [list(tuples(iterable)) for iterable in a]
</code></pre>
<hr/>
<p>A bit more functional:</p>
<pre><code>item_nbrs = itertools.count(1)
f = map(tuples, a)
g = map(list, f)
h = list(g)
</code></pre>
<p>or</p>
<pre><code>item_nbrs = itertools.count(1)
k = list(map(list, map(tuples, a)))


&gt;&gt;&gt; z == h == k
True
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on his own. A good way to show this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (console output, tracebacks, etc.). The more detail you provide, the more answers you are likely to receive. Check the <a href="http://stackoverflow.com/tour">FAQ</a> and <a href="http://stackoverflow.com/help/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">Also, your question is not clear. Are you saying you want to replace each string in that 2D array with a 2-tuple that includes the original string and an increasing integer in string format? Does that increasing integer key reset for each list in the overall list, or does it increase over the entire list?</span>
<span class="comment-copy">Obviously it is clear how u can see it xD</span>
<span class="comment-copy">Please, dont make any Hatespeeches. It shows that u want makeyourself very important</span>
<span class="comment-copy">Please edit the question to clarify that that second sublist should be starting with 1 or will continue with the number from the previous sub-list</span>
<span class="comment-copy">Good answer-- that's certainly one way to do it. Unfortunately I think it would be unusual for a beginner to pull off a one-liner like that.</span>
<span class="comment-copy">Oh thx, but it should started with 11 on the second list and not with 1 again. Can u help me?</span>
<span class="comment-copy">@Okalj Are all the sub-lists of the same length?</span>
<span class="comment-copy">@MoinuddinQuadri Yes, it is</span>
<span class="comment-copy">@Okalj check edit.</span>
<span class="comment-copy">I edited it to work for a 2-D array.</span>
