<div class="post-text" itemprop="text">
<p><code>in</code> operator in Python is a membership operator that tests for membership in a sequence. </p>
<p><strong>Description of <code>in</code> operator</strong></p>
<blockquote>
<p>Evaluates to true if it finds a variable in the specified sequence and false otherwise.</p>
</blockquote>
<p>Now consider the code:</p>
<pre><code>&gt;&gt;&gt;s = 'HELLO'
&gt;&gt;&gt;char = 'M'
&gt;&gt;&gt;char in s
False
&gt;&gt;&gt;for char in s:
....    print(char)
H
E
L
L
O
</code></pre>
<p>Please correct me here:
I think the statement <code>for char in s</code> should check for <code>'M'</code> in <code>'HELLO'</code> which should be evaluated to <code>False</code> and the loop should be terminated. But here, instead of checking for the membership, it is assigning every character to the variable <code>char</code> and thus the loop is printing the every character.
My question is, how <code>in</code> operator can be used other than checking the membership?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>in</code> keyword is used in two different contexts:</p>
<ul>
<li>Membership test</li>
<li>Iteration</li>
</ul>
<p>The first, as you said, checks if something belongs to a sequence, by calling that sequence's <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__</code></a>. When using this syntax, a boolean value is returned.</p>
<pre><code>x = 1
l = [0, 1, 2]
if x in l:
    print("x is in l")
else:
    print("x is not in l")
</code></pre>
<pre>&gt; x is in l</pre>
<p>Since <code>in</code> looks for the <code>__contains__</code> method, <code>x in seq</code> is valid as long as <code>seq</code> implements a <code>__contains__</code> method. You can implement this, even though it does not make logical sense, regarding the concept of membership.</p>
<pre><code>class Foo:
    def __contains__(self, x):
        return x == 12

f = Foo()
if 12 in f:
    print("12 is in f")</code></pre>
<pre>&gt; 12 is in f</pre>
<hr/>
<p>The second is actually more often used. According to an <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">iteration protocol</a>, it enumerates the elements of an iterable object, so that actions can be performed on them.</p>
<p>You can iterate over a list:</p>
<pre><code>l = [0, 1, 2]
for x in l:
    print(x)</code></pre>
<pre>&gt; 0
&gt; 1
&gt; 2</pre>
<p>Over a string:</p>
<pre><code>s = "hello"
for c in s:
    print(c)</code></pre>
<pre>&gt; h
&gt; e
&gt; l
&gt; l
&gt; o</pre>
<p>And over any object implementing the <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code></a> method, as long as the latter returns an object that implements the <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" rel="nofollow noreferrer"><code>__next__</code></a> method.</p>
<p>The following example is a basic (not to say "poor") <code>range</code>-like class, whose you can iterate over the instances.</p>
<pre><code>class Bar:
    def __init__(self, first, last):
        self.first = first
        self.last = last
        self.current = first

    def __iter__(self):
        return self

    def __next__(self):
        if self.current == self.last:
            raise StopIteration
        result = self.current
        self.current += 1
        return result

b = Bar(0, 5)
for i in b:
    print(i)</code></pre>
<pre>&gt; 0
&gt; 1
&gt; 2
&gt; 3
&gt; 4</pre>
<p>A lot of native types are iterable: <a href="https://docs.python.org/3.6/library/stdtypes.html#dict" rel="nofollow noreferrer">dictionaries</a>, <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">ranges</a>, <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">sets</a>...</p>
<hr/>
<p>Semantically speaking, it makes sense to use the same <code>in</code> word for both contexts. "Is this thing in that stuff?" is a valid question, as long as "stuff" is a collection, which is capable of containing things. Henceforth, "do this for every thing in that stuff" seems pretty natural.</p>
<p>Hence the use of "in" for both contexts.</p>
<p>This is however quite a simplification of the reality, which is actually more vast. I invite you to read the <a href="https://docs.python.org/3/index.html" rel="nofollow noreferrer">documentation</a>, and for an in-depth understanding of the <code>in</code> keyword, read <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">Python's grammar</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>any object that has the __contains__() method can use the "in" operator. by using the dir() function or the hasattr() function you can check if you can use the "in" operator on that object</p>
<pre><code>&gt;&gt;&gt;dir(hw)
[...,__contains__,...]
&gt;&gt;&gt;hasattr(hw,"__contains__")
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The main thing you need to think here is that the keyword <code>in</code> if you use it in a <code>for</code> loop then it'll redefine char or every line in the loop.</p>
<p>so to test every character individually in a loop you'd need:</p>
<pre><code>s = 'HELLO'
char = 'M'
for chr in s:
    if char in chr:
        print chr
</code></pre>
<p>but that's kind of pointless. You might as well use <code>if char=chr</code></p>
<p>But you can test for characters in list elements like this so:</p>
<pre><code>s = ['HELLO', 'MIKE', 'BOB']
char = 'M'
for word in s:
    if char in word:
        print word
</code></pre>
<p>would test every list element for the presence of "M"</p>
</div>
<span class="comment-copy">The main thing you need to think here is that the keyword <code>n</code> if you use it in for then it'll redefine char or every line in the loop.</span>
<span class="comment-copy">did you mean <code>if chr in char:</code> in the next-to last line of your second example or am I understanding it wrong?</span>
<span class="comment-copy">char is "M", chr is element in the list, so it's the right way round,</span>
<span class="comment-copy">I'll rename those variables to make more sense</span>
<span class="comment-copy">thanks, that makes it a lot more clear,</span>
