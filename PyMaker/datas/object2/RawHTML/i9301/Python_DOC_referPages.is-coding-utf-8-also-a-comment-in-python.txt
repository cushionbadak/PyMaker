<div class="post-text" itemprop="text">
<p>As we use <code>#</code> for inserting comments in Python, then how does Python takes:</p>
<pre><code># -*- coding: utf-8 -*-
</code></pre>
<p>differently?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is also a comment. <em>And</em> the contents of that comment carry special meaning if located at the top of the file, in the first two lines.</p>
<p>From the <a href="https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations"><em>Encoding declarations</em> documentation</a>:</p>
<blockquote>
<p>If a comment in the first or second line of the Python script matches the regular expression <code>coding[=:]\s*([-\w.]+)</code>, this comment is processed as an encoding declaration; the first group of this expression names the encoding of the source code file. The encoding declaration must appear on a line of its own. If it is the second line, the first line must also be a comment-only line.</p>
</blockquote>
<p>Note that it doesn't matter what codec should be used to read the file, as far as comments are concerned. Python would normally ignore <em>everything</em> after the <code>#</code> token, and in all accepted source code codecs the <code>#</code>, encoding declaration and line separator characters are encoded exactly the same as they are all supersets of ASCII. So all the parser has to do is read one line, scan for the special text in the comment, read another if needed, scan for the comment, then configure the parser to read data according to the given codec.</p>
<p>Given that the comment is required to be either the first or second in the file (and if it is the second line, the first line must be a comment too), this is entirely safe, as the configured codec can only make a difference to non-comment lines anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations">encoding declarations</a> in the Python Reference Manual:</p>
<blockquote>
<p>If a <strong>comment</strong> <em>in the first or second line</em> of the Python script matches the regular expression <code>coding[=:]\s*([-\w.]+)</code>, this <strong>comment</strong> is processed as an encoding declaration; the first group of this expression names the encoding of the source code file. </p>
</blockquote>
<p><sub>(Emphasis mine)</sub></p>
<p>So yes, it is a comment, a special one. It is special in that the parser will try and act on it and not ignore it as it does for comments not in the first or second line. Take, for example, an unregistered encoding declaration in a sample file <code>decl.py</code>:</p>
<pre><code># # -*- coding: unknown-encoding -*-
print("foo")
</code></pre>
<p>If you try and run this, Python will try and process it, fail and complain:</p>
<pre><code>python decl.py 
  File "decl.py", line 1
SyntaxError: encoding problem: unknown-encoding
</code></pre>
</div>
<span class="comment-copy">this actually happens often with software. They actually do some elementary parsing of comments and look for specific commands. Another example i have in mind is Hypermesh but i am sure there are many more.</span>
<span class="comment-copy">You can think of it as a preprocessor that runs before the parser that peeks at the file and decides how it should be decoded. Then the parser itself starts and skips the line because its a comment. Some unixy text editors do the same thing to know how the editor should open the file.</span>
<span class="comment-copy">@Ev.Kounis Perhaps the most prominent example: <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Shebang_(Unix)</a></span>
<span class="comment-copy">It's worth noting that the <code>-*-</code> parts are completely optional, as far as Python is concerned, but including them seems to be customary. <a href="https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations" rel="nofollow noreferrer">The docs</a> say it "is recognized also by GNU Emacs", which suggests that that's where it comes from (an example of what @tdelaney was saying about text editors), but I've seen it (and used it myself) in code that was never touched by Emacs.</span>
<span class="comment-copy">@MartijnPieters: I've got it! <b>If</b> you're using IDLE on Python 2, and <b>if</b> your file contains non-ASCII characters (as mine often did if I added a copyright line), then it will prompt you to add an encoding declaration, using the Emacs <code>-*-</code> style. So that's where I picked it up from.</span>
<span class="comment-copy">So the real question becomes: why do we use <code># -*- coding: X -*-</code> instead of <code># coding: X</code>?</span>
<span class="comment-copy">@J.C.Leit√£o: you don't have to. <i>Anything that matches the regular expression</i> would work. But if you are using Emacs as your editor, then that comment also informs that editor what codec to use.</span>
<span class="comment-copy">` what codec the file is saved as` shouldn't be <code>what encoding the file is saved as</code>?</span>
<span class="comment-copy">@ShravilPotdar: There's loads. There is the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" rel="nofollow noreferrer">shebang line</a> that Unix systems use, and the <a href="https://docs.python.org/3/using/windows.html#shebang-lines" rel="nofollow noreferrer">Windows <code>py</code> launcher</a> will look at the same info. As mentioned, many editors can be configured using text in comments (not just what codec to use, but many other aspects as well, see the <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html" rel="nofollow noreferrer">emacs</a> and <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#modeline" rel="nofollow noreferrer">vim</a> docs). There are probably more.</span>
<span class="comment-copy">@R.M.: no, multi-byte codecs are not supported, for this very reason. From <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">PEP 263</a>: <i>Any encoding which allows processing the first two lines in the way indicated above is allowed as source code encoding, this includes ASCII compatible encodings as well as certain multi-byte encodings such as Shift_JIS. It does not include encodings which use two or more bytes for all characters like e.g. UTF-16. The reason for this is to keep the encoding detection algorithm in the tokenizer simple.</i></span>
<span class="comment-copy">But if you were to register <code>unkown-encoding</code> as an encoding, say, with a <code>.pth</code> file, then that codec is actually loaded and used. This provides a very nice and interesting opportunity for pre-parse code processing.</span>
<span class="comment-copy">Indeed @MartijnPieters I mainly added that as a code example that Python processes the declaration, not to make any other claims for it.</span>
<span class="comment-copy"><a href="https://github.com/dropbox/pyxl" rel="nofollow noreferrer">github.com/dropbox/pyxl</a> would be an example of what @MartijnPieters is referring to.</span>
