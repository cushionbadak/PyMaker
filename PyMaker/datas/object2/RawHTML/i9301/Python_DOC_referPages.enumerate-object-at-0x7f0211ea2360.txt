<div class="post-text" itemprop="text">
<p>I ran the following code in Python3.5.2 and got the corresponding output </p>
<pre><code>&gt;&gt;&gt; example = ['a','b','c','d','e']
&gt;&gt;&gt; enumerate(example)
&lt;enumerate object at 0x7f0211ea2360&gt;
</code></pre>
<p>I'm unable to understand what is the meaning of this output.Why didn't the output come like this</p>
<pre><code> (0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e') 
</code></pre>
<p>When i used a list to contain these tuples the output was satisfactory</p>
<pre><code>&gt;&gt;&gt; list(enumerate(example))
[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e')]
</code></pre>
<p>Note : I'm a newbie in python and when i posted this question i didn't know about map function so i didn't refer this question 
<a href="https://stackoverflow.com/questions/40015439">Why does map return a map object instead of a list in Python 3?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>That's purely a choice of design in Python 3 because <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><strong><code>enumerate</code></strong></a> is often used in loops/list comprehension, so no need to generate a full-fledged list and allocate memory for a temporary object which is very likely to be unused afterwards.</p>
<p>Most people use <code>for i,e in enumerate(example):</code> so they don't even notice the generator aspect, and the memory/CPU footprint is lower.</p>
<p>To get an actual <code>list</code> or <code>set</code>, you have to explicitly force the iteration like you did.</p>
<p>(note that as opposed to <code>range</code>, <code>zip</code> or <code>map</code>, <code>enumerate</code> has always been a generator, even in python 2.7, good choice from the start)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l1 = ['a','b','c','d','e']
for i in enumerate(l1):
   print i
</code></pre>
</div>
<span class="comment-copy">because <code>enumerate</code> is an iterable. The values are generated on demand.</span>
<span class="comment-copy">If you followed a tutorial based on Python 2, that may be the reason for your confusion: This behaviour has been introduced with Python 3. In that case, you should probably switch to a different tutorial.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/40015439/why-does-map-return-a-map-object-instead-of-a-list-in-python-3">Why does map return a map object instead of a list in Python 3?</a> (It's the same principle and answers discuss more generally than <code>map</code>)</span>
<span class="comment-copy">@JonasSchäfer not for <code>enumerate</code>, no. It has always been a generator.</span>
<span class="comment-copy">@BhargavRao doing some polishing ? :)</span>
<span class="comment-copy">@Jean-FrançoisFabre, I did not get you.</span>
<span class="comment-copy">doesn't matter it was a joke about polishing bad posts.</span>
