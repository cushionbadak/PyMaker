<div class="post-text" itemprop="text">
<p>I have a list of dictionaries in the following format:</p>
<pre><code>list = [
{'name':'bob','age':12},
{'name':'jill','age':34}
]
</code></pre>
<p>I want to remove the first dictionary where the <code>name</code> equals a value. Is there a better way of doing this?</p>
<pre><code>value = 'bob'
for dict in list:
    if dict['name'] == value:
        list.remove(dict)
        break
</code></pre>
<p>Output:</p>
<pre><code>list = [
{'name':'jill','age':34}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = [
{'name':'bob','age':12},
{'name':'jill','age':34}
]

value = 'bob'

for i, item in enumerate(list1):
  if item['name'] == value:
    list1.pop(i)
    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a perfect <code>pandas</code> problem.  <code>pandas</code> is part of the <code>PyData</code> suite (I think) and it's widely accepted.  I would use it for this type of problem fosho. </p>
<pre><code>Python 3.5.2 |Anaconda custom (x86_64)| (default, Jul  2 2016, 17:52:12)
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; query_list = [ {'name':'bob','age':12}, {'name':'jill','age':34} ]
&gt;&gt;&gt; DF = pd.DataFrame(query_list)
&gt;&gt;&gt; DF
     age  name
0   12   bob
1   34  jill
&gt;&gt;&gt; mask = DF["name"] != "bob"
&gt;&gt;&gt; mask
0    False
1     True
Name: name, dtype: bool
&gt;&gt;&gt; DF2 = DF.loc[mask,:]
&gt;&gt;&gt; DF2
     age  name
1   34  jill
&gt;&gt;&gt; DF2.to_dict()
{'age': {1: 34}, 'name': {1: 'jill'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a one liner, you could use a generator expression with <code>next()</code>, which short-circuits once you've found the first item to remove, and then use <code>list.remove()</code>:</p>
<pre><code>l.remove(next(d for d in l if d['name'] == value))
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; l = [{'name':'bob','age':12},{'name':'jill','age':34}]
&gt;&gt;&gt; value = 'bob'
&gt;&gt;&gt; l.remove(next(d for d in l if d['name'] == value))
&gt;&gt;&gt; l
[{'name': 'jill', 'age': 34}]
</code></pre>
<p>Note this will raise a <code>StopIteration</code> is the <code>value</code> is not found, which can be avoided, but it's a bit longer because although <code>next()</code> has a default argument, <code>list.remove()</code> does not:</p>
<pre><code>&gt;&gt;&gt; l = [{'name':'bob','age':12},{'name':'jill','age':34}]
&gt;&gt;&gt; value = 'bob'
&gt;&gt;&gt; value_to_remove = next((d for d in l if d['name'] == value), None)
&gt;&gt;&gt; 'Value not in list' if value_to_remove is None else l.remove(value_to_remove)
&gt;&gt;&gt; l
[{'name': 'jill', 'age': 34}]
&gt;&gt;&gt; value_to_remove = next((d for d in l if d['name'] == value), None)
&gt;&gt;&gt; 'Value not in list' if value_to_remove is None else l.remove(value_to_remove)
'Value not in list'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From python's documentation on dictionaries. </p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#dict</a></p>
<p>d.clear() will clear all the values of a dictionary. </p>
<pre><code>value = 'bob'
for dict in list:
    if dict['name'] == value:
        #Empty dictionary of all values, will now return {}
        dict.clear()
        break
</code></pre>
<p>If the dictionary is in a list of others, you can simply pop it out of the list or delete it like this.</p>
<pre><code>list2 = [x for x in list1 if x != {}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would create a separate utility function to do it. The following first determines which (if any) dictionaries meet the criteria, and then <code>pop</code>s (deletes) the first one found.</p>
<pre><code>from operator import itemgetter

people = [
    {'name': 'bob', 'age': 12},
    {'name': 'jill', 'age': 34},
    {'name': 'bob', 'age': 14},
]

def remove(name, seq):
    """Remove first dictionary in seq with 'name' entry equal to name."""
    matches = [i for i,n in enumerate(map(itemgetter('name'), seq)) if n == name]
    if matches:
        seq.pop(matches[0])


remove('bob', people)
print(people)  # -&gt; [{'name': 'jill', 'age': 34}, {'name': 'bob', 'age': 14}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = [
     {'name': 'bob', 'age':12},
     {'name': 'jill', 'age':34}
]

map(lambda d: d.pop('name', 0) if d['name'] == 'bob' else d, list1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion using <code>filter</code> is the most pythonic way:</p>
<pre><code>new_list = filter(lambda x: x['name'] != value, original_list)
</code></pre>
<p>However this doesn't remove from the original list and creates a new one in memory. Assigning <code>old_list = filter(...)</code> mimics removing from the original one (in the local scope at least) however there is still the memory overhead. For small lists (and most cases) this won't play a role. If it does then the following might be more appropriate:</p>
<pre><code>for item in original_list:
    if item['name'] == value:
        original_list.remove(item)
        break
</code></pre>
</div>
<span class="comment-copy">Your example only deletes the <code>name</code> key, not the entire dictionary.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/11277432/how-to-remove-a-key-from-a-python-dictionary">How to remove a key from a python dictionary?</a></span>
<span class="comment-copy">It's a bad practice to overwrite default <code>list</code></span>
<span class="comment-copy">You might want to try <code>list.remove(dict)</code>. (But was @Kh40tiK pointed out <code>list</code> and <code>dict</code> are "reserved" names, so you better choose different ones.)</span>
<span class="comment-copy">@lol: can you turn the dict into something like dict(bob=12, jill=34)? This way you never have duplicate names in the first place</span>
<span class="comment-copy">Doesn't meet the requirement of only deleting first that matches.</span>
<span class="comment-copy">This doesn't remove from the original list. And in your example you can use <code>filter</code>.</span>
<span class="comment-copy">@RemcoGerlich . Thanks. Updated my answer.</span>
<span class="comment-copy">I like this better than @Chris_Rands because it is easier to read.</span>
<span class="comment-copy">I'd say using <code>pandas</code> for such a simple task is an overkill.</span>
<span class="comment-copy">Depends on how big the dictionary is though.  If this is a toy example of a text file that's 500 MB then it would be better to do it this way.   I try to avoid <code>for-loops</code> whenever I can after watching Jake Vanderplas's video <a href="https://www.youtube.com/watch?v=EEUXKG97YRw" rel="nofollow noreferrer">youtube.com/watch?v=EEUXKG97YRw</a></span>
<span class="comment-copy">Well you got a point here. When data sets are large I agree that you might want to work with professional tools (where <code>pandas</code> comes in just right). Because the question doesn't reveal the dimension of the problem a simpler solution might be more appropriate. But in any case your answer has an educational value, so I row back on my previous statement. Using <code>pandas</code> for this task one learns about a nice tool on the way, overkill or not!</span>
<span class="comment-copy">But the OP explicitly asks about the pythonic way. I love <code>pandas</code> and all, but there are some things about it that are, well, not exactly pythonic.  The construction <code>DF.loc[mask,:]</code> for example doesn't even look like Python if taken out of context.</span>
<span class="comment-copy">This is true, it does ask for the most pythonic which I think is @a_guest 's answer with <code>filter</code>.  When I think of <code>pythonic</code> I think of <code>python</code> and the main components of the <a href="http://image.slidesharecdn.com/1idanielrodriguez-160614230356/95/connecting-python-to-the-spark-ecosystem-3-638.jpg?cb=1465945555" rel="nofollow noreferrer">pydata ecosystem</a>.  The new macbook pros ship with <code>NumPy</code> already installed which starts to blur the lines of <code>pythonic</code>.</span>
<span class="comment-copy">I'm confused as to why you didn't do: <code>value_to_remove = next((d for d in l if d['name'] == value), None)</code>, and then <code>l.remove(value_to_remove) if value_to_remove != None</code></span>
<span class="comment-copy">" Assigning <code>old_list = filter(...)</code> " wil NOT have the same effect as modifying the list in place if there's any other reference to the list.  Not to say it's a good idea to modify in place a list which is shared but that's another question ;)</span>
