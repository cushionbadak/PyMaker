<div class="post-text" itemprop="text">
<p>I have a list of dates: </p>
<pre><code>dates = ["Jan2016","Feb2016","Mar2016"]
</code></pre>
<p>I want to convert these dates to a <em>datetime format</em> i.e Jan2016 = 201601</p>
<p>My first thought was to create a dict of months and their associated numbers and then map that over the list. </p>
<pre><code>months = {"Jan":1,"Feb":2,"Mar":3}
</code></pre>
<p>Here is my current code:</p>
<pre><code>dates = ["Jan2016","Feb2016","Mar2016"]
dic   = {"Jan":1, "Feb":2,"Mar":3}

month = []
year  = []

for date in dates:
    month.append(date[:3])
    year.append(date[3:])


month = [dic[n] if n in dic else n for n in month]

d = dict(zip(month,year))

print(d)
</code></pre>
<p>The output of this code is a dict like so:</p>
<pre><code>{1: '2016', 2: '2016', 3: '2016'}
</code></pre>
<p>What is the most pythonic solution to this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>As @Martijin commented, you can not have a datetime as <code>201601</code>, but if you want a string instead, you can use <code>strptime</code> and <code>strftime</code> from datetime module to convert:</p>
<pre><code>dates = ["Jan2016","Feb2016","Mar2016"]

from datetime import datetime

[datetime.strftime(datetime.strptime(d, "%b%Y"), "%Y%m") for d in dates]

# ['201601', '201602', '201603']
</code></pre>
<hr/>
<p>In case you are not familiar with <em>conversion specification</em>, <code>%b</code> stands for month abbreviation names, <code>%Y</code> Year with century, <code>%m</code> Month as decimal number(0-12)</p>
</div>
<div class="post-text" itemprop="text">
<p>hello you can try with  a map()</p>
<pre><code>months = {"Jan":"01", "Feb":"02", "Mar":"03"}
dates = ["Jan2016","Feb2016","Mar2016"]
list = map(lambda x :x[3:] + months[x[:3]], dates)
</code></pre>
<p>ouput:</p>
<blockquote>
<p>['201601', '201602', '201603']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following:</p>
<pre><code>from datetime import datetime

datetime.strptime('Jan2016', '%b%Y')
</code></pre>
<p>For your list, you can combine the above with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; res = [datetime.strptime(d, '%b%Y') for d in dates]
&gt;&gt;&gt; [datetime.strftime(d, "%Y%m") for d in res]
['201601', '201602', '201603']
</code></pre>
<p><strong>Note:</strong> Since the day is missing in your dates list, 1 would be used for day (for <code>res</code> items).</p>
</div>
<span class="comment-copy">A datetime implies that there is a day and a time too. You only have a month and year.</span>
<span class="comment-copy">Why a dictionary? What should happen with <code>['Jan2015', 'Jan2016']</code>?</span>
<span class="comment-copy">This is true. For this example the day and time is inconsequential as long as the months are formatted correctly.</span>
<span class="comment-copy">You should remove <code>import datetime</code> since it is unused.</span>
<span class="comment-copy">@Harvey Right. Thanks for pointing out.</span>
