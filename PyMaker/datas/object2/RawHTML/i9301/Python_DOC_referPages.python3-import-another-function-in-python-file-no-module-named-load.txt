<div class="post-text" itemprop="text">
<p>In the PyCharm editor, I have a python application named <code>project3</code> with the following directory structure. The file <code>load.py</code> just has a function (not class py file) <code>def read():</code>, <code>mip.py</code> is a py class file, and has own function method. </p>
<pre><code> Project
  |
  +---- project1
  |
  +---- project2
  |
  +---- project3
          |
          +---- cnn.py
          +---- load.py
          +---- mip.py
</code></pre>
<p>In the <code>cnn.py</code>, I want to import the <code>load</code> and <code>mip</code> file which I intend to use. My import code is as follows;</p>
<pre><code>import load
from mip import f1
</code></pre>
<p>But I get the error:</p>
<pre><code>No module named load
Unresolved reference 'mip'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In pycharm you must add <code>project3</code> (and any other directories containing modules) as a root containing sources.</p>
<p>Right click on your <code>project3</code> directory and in the context menu select: <strong>Mark Directory as</strong> &gt; <strong>Sources Root</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/27746248/how-do-i-inform-pycharm-of-the-location-of-custom-modules">A similar question</a> was answered, and since I don't have much experience with PyCharm, I'll avoid commenting on how you should go about it within the IDE.</p>
<p>Instead, I'll refer you in the direction of <a href="https://docs.python.org/3/tutorial/modules.html?highlight=__init__.py#packages" rel="nofollow noreferrer">the package docs</a>:</p>
<blockquote>
<p>The <code>__init__.py</code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.</p>
</blockquote>
<p>The easiest solution is to just add a blank file named <code>__init__.py</code> in the same directory:</p>
<blockquote>
<p>In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <a href="https://docs.python.org/3/tutorial/modules.html?highlight=__all__#importing-from-a-package" rel="nofollow noreferrer"><code>__all__</code></a> variable, described later.</p>
</blockquote>
<p>In the IDE, you may be able to do this by simply creating a new file in the project, naming it <code>__init__.py</code> and saving it, then restarting PyCharm.</p>
<p>If you'd like to do (or just read about) more complicated things with python modules and packages, you can see <a href="https://docs.python.org/3/library/distutils.html#module-distutils" rel="nofollow noreferrer"><code>distutils</code></a>.</p>
</div>
<span class="comment-copy">mip or mlp? sense typo... also, add <code>__init__.py</code> in that folder.</span>
<span class="comment-copy">Sorry, it is mip. how to add <i>init</i>.py</span>
<span class="comment-copy">Why pycharm need this setting?</span>
