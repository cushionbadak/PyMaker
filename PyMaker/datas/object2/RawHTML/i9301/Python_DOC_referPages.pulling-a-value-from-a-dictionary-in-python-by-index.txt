<div class="post-text" itemprop="text">
<pre><code>def max_n_min(dic):
dic_list = dic.items()[0]
max = min = dic_list
for value in dic.values():
    if value &gt; max:
        max = value
    if value &lt; min:
        min = value
return(max, min) 

 &lt;ipython-input-16-5837f0a5d1aa&gt; in max_n_min(dic)
  1 #Sums births for a requested periods
  2 def max_n_min(dic):    
----&gt; 3     dic_list = dic.values()[0]
  4     max = min = dic_list
  5     for value in dic.values()    
TypeError: 'dict_values' object does not support indexing
</code></pre>
<p>I'm making a function that takes the values of the keys in a dictionary as input, and outputs the max and min of those values. All values and keys are integers. I want to set the default max and min as the value of the first key, but for some reason it's giving me the above TypeError. This is strange to me because in <a href="https://stackoverflow.com/questions/4326658/python-index-a-dictionary#">this</a> thread, it seems to be the recommended solution. </p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>dict.values()</code> returns a object of <code>dict_values</code> type. In order to make this work, you have to type-cast it to list (or tuple) as:</p>
<pre><code>list(dic.values())[0]
</code></pre>
<p>Sample run:</p>
<pre><code>&gt;&gt;&gt; my_dict = {1: 2, 3: 4}

# Your syntax; raising error
&gt;&gt;&gt; my_dict.values()[1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'dict_values' object does not support indexing

# type-casted to list; works fine
&gt;&gt;&gt; list(my_dict.values())[1]
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do the same shorter using internals:</p>
<pre class="lang-py prettyprint-override"><code>def max_n_min(dic):
    return (max(dic.values()), min(dic.values()))
</code></pre>
</div>
<span class="comment-copy">can you show the <code>dic</code> contents?</span>
<span class="comment-copy">Your usage of the word <b>values</b> is confusing.</span>
<span class="comment-copy">Dictionaries are unorderd, so you have no guarantee that the "first" value will be the same.</span>
<span class="comment-copy">The comment you reference uses a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict</a></span>
<span class="comment-copy">Thank you very much for your prompt response. As this is my first post, i feel very enthusiastic about continuing to use stack overflow as a reference.</span>
<span class="comment-copy">This is <b>dangerous</b>: <code>dct.values()</code> is inherently <b>unordered</b>. Each time you call it you can get a different order.</span>
<span class="comment-copy">That's true. I just helped you finding the issue you faced. In case you want to maintain the order, you definitely should not be using <code>dict.values()</code> of normal <code>dict</code>. However, you may prevent yourself from it via using <code>collections.OrderedDict</code> whose <code>dict.values()</code> returns the ordered response</span>
<span class="comment-copy">For the purposes of this program I actually prefer unordered to ordered.</span>
