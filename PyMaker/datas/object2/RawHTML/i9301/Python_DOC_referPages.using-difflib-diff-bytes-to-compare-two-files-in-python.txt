<div class="post-text" itemprop="text">
<p>Let's say I want to compare file a and file b with the <code>difflib.diff_bytes</code> function, how would I do this? </p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>In the following I will assume you have Python 3.x (specifically 3.5).<br/>
Let's analyze the documentation to try to understand the function:  </p>
<blockquote>
<p><strong>difflib.diff_bytes</strong>(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n')<br/>
  Compare a and b
  (lists of bytes objects) using dfunc; yield a sequence of delta lines
  (also bytes) in the format returned by dfunc. dfunc must be a
  callable, typically either unified_diff() or context_diff().</p>
<p>Allows you to compare data with unknown or inconsistent encoding. All
  inputs except n must be bytes objects, not str. Works by losslessly
  converting all inputs (except n) to str, and calling dfunc(a, b,
  fromfile, tofile, fromfiledate, tofiledate, n, lineterm). The output
  of dfunc is then converted back to bytes, so the delta lines that you
  receive have the same unknown/inconsistent encodings as a and b.</p>
</blockquote>
<p>First thing to notice is the distinction done between bytes objects and str(ing) objects. Then every input arguments except <code>n</code> must bytes objects.  </p>
<p>So the key is that you use this function and pass byte objects to it, not strings. So, if you have a string, you should use the <code>b</code> prefix in Python, which will produce an instance of the bytes type and not of the str(ing) type.<br/>
I suggest you to read<br/>
<a href="https://stackoverflow.com/questions/6269765/what-does-the-b-character-do-in-front-of-a-string-literal">What does the 'b' character do in front of a string literal?</a><br/>
<a href="https://docs.python.org/3.3/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">string_literals</a><br/>
so I will not further explain that part.<br/>
Since I found the documentation on <code>difflib.diff_bytes</code> to be a bit cryptic, I decided to look directly at the code that CPython itself uses to test that function.<br/>
This is a good exercise that helps to understand how to use this function.<br/>
The code for testing <code>difflib.diff_bytes</code> is located (giving you're using Python 3.5) in<br/>
<a href="https://github.com/python/cpython/blob/3.5/Lib/test/test_difflib.py" rel="nofollow noreferrer">test_difflib</a> </p>
<p>Let's check one example in that file to understand what happens. </p>
<pre><code>def test_byte_content(self):


 # if we receive byte strings, we return byte strings
    a = [b'hello', b'andr\xe9']     # iso-8859-1 bytes
    b = [b'hello', b'andr\xc3\xa9'] # utf-8 bytes

    unified = difflib.unified_diff
    context = difflib.context_diff

    check = self.check
    check(difflib.diff_bytes(unified, a, a))
    check(difflib.diff_bytes(unified, a, b))

    # now with filenames (content and filenames are all bytes!)
    check(difflib.diff_bytes(unified, a, a, b'a', b'a'))
    check(difflib.diff_bytes(unified, a, b, b'a', b'b'))

    # and with filenames and dates
    check(difflib.diff_bytes(unified, a, a, b'a', b'a', b'2005', b'2013'))
    check(difflib.diff_bytes(unified, a, b, b'a', b'b', b'2005', b'2013'))

    # same all over again, with context diff
    check(difflib.diff_bytes(context, a, a))
    check(difflib.diff_bytes(context, a, b))
    check(difflib.diff_bytes(context, a, a, b'a', b'a'))
    check(difflib.diff_bytes(context, a, b, b'a', b'b'))
    check(difflib.diff_bytes(context, a, a, b'a', b'a', b'2005', b'2013'))
    check(difflib.diff_bytes(context, a, b, b'a', b'b', b'2005', b'2013'))
</code></pre>
<p>So as you can see, a and b are lists that contain each file's contents. Then the program defines two variables, which represent the <code>dfunc</code> argument to the function. Notice also the "b" prefix. <code>difflib.diff_bytes</code> will return the delta lines as byte objects. Then you have to write your own function to check that.<br/>
One example of that is contained in another test within that file that also includes in the diff the filename:  </p>
<pre><code>def test_byte_filenames(self):
    # somebody renamed a file from ISO-8859-2 to UTF-8
    fna = b'\xb3odz.txt'    # "Å‚odz.txt"
    fnb = b'\xc5\x82odz.txt'

    # they transcoded the content at the same time
    a = [b'\xa3odz is a city in Poland.']
    b = [b'\xc5\x81odz is a city in Poland.']

    check = self.check
    unified = difflib.unified_diff
    context = difflib.context_diff
    check(difflib.diff_bytes(unified, a, b, fna, fnb))
    check(difflib.diff_bytes(context, a, b, fna, fnb))

    def assertDiff(expect, actual):
        # do not compare expect and equal as lists, because unittest
        # uses difflib to report difference between lists
        actual = list(actual)
        self.assertEqual(len(expect), len(actual))
        for e, a in zip(expect, actual):
            self.assertEqual(e, a)

    expect = [
        b'--- \xb3odz.txt',
        b'+++ \xc5\x82odz.txt',
        b'@@ -1 +1 @@',
        b'-\xa3odz is a city in Poland.',
        b'+\xc5\x81odz is a city in Poland.',
    ]
    actual = difflib.diff_bytes(unified, a, b, fna, fnb, lineterm=b'')
    assertDiff(expect, actual)
</code></pre>
<p>As you can see now, the filename is included in the delta lines as byte objects.</p>
</div>
<span class="comment-copy">I don't see a reference to <code>diff_bytes</code> anywhere in the documentation for <code>difflib</code>, either in Python 2.x or 3.x. You'll need to clarify your question a bit...</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/difflib.html" rel="nofollow noreferrer">docs.python.org/3/library/difflib.html</a></span>
<span class="comment-copy">Ah... my <code>python3</code> is still 3.4.x - that routine was added in 3.5...</span>
<span class="comment-copy">Thank you! This is very helpful</span>
