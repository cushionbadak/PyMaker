<div class="post-text" itemprop="text">
<p>While experimenting with patching a context manager at runtime, I noticed that the following code does not behave as I expected:</p>
<pre><code>class B:
    def __enter__(self):
        print('normal')
    def __exit__(self, *stuff):
        pass

    def modify(self, x):
        def other(self):
             print('not normal: ', x)
        self.__enter__ = other.__get__(self, type(self))

def main():
    b = B()
    b.__enter__()
    b.modify('hi')
    b.__enter__()
    with b:
        print('in with')
    b.__enter__()

if __name__ == '__main__':
    main()
</code></pre>
<p>Executed, this prints:</p>
<pre><code>normal
not normal:  hi
normal
in with
not normal:  hi
</code></pre>
<p>While the first part of <code>main</code>, with the explicit calls to <code>__enter__</code>, behaves as expected (the method <em>is</em> correctly modified), the <code>with</code>-statement seems to ignore this.</p>
<p>After some search, I found that the according <a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">PEP 343</a> shows an example translation, which explains the behaviour; namely, the translation of the <code>with mgr: ...</code> internally uses something like</p>
<pre><code>type(mgr).__enter__(mgr)
</code></pre>
<p>instead of a direct method call, like I was doing above.</p>
<p>And I was wondering why that is done. Is it just to prevent people like me from messing around, or is there a deeper reason?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is something called <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">special method lookup</a> defined in the language description. Basically, this kind of lookup (using <code>type(obj).__method__(obj)</code>) happens for all "magic methods"; two reasons are given:</p>
<ul>
<li>Performance optimizations are possible</li>
<li>There are cases with only work correctly with this variant, namely when special lookup defers to the type (like, <code>int.__hash__</code> being not the same thing as <code>type(int).__hash__</code>, which we usually really want)</li>
</ul>
</div>
<span class="comment-copy">I may not have fully understood the second argument. So improve it, if you want.</span>
