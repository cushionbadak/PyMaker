<div class="post-text" itemprop="text">
<p>I'm trying to make an API to create custom maps on a game I made, but shelve just writes blank lists and dictionarys.</p>
<p>I try to store it like that:
"name" for the shown name of the map
"name_1" for the name that is treated as variable
"textures" for the filepath of the texture
"wind" for the amount of wind that's blowing</p>
<p>Heres my code:</p>
<pre><code>import tkinter.filedialog as tfd
import shelve
import shutil as os

file1 = shelve.open("info")

if "written" in file1:
    pass
else:
    file1["name"] = []
    file1["name_1"] = []
    file1["textures"] = {}
    file1["wind"] = {}
    file1.close()
    file1 = shelve.open("info")

name = input("Name: ")

name1 = input("Name zur Variablenspeicherung: ")

wind = input("Wind (*-*): ")

print("WÃ¤hle eine 1200x820 GIF-Datei als Hintergrund aus")
texture = tfd.askopenfilename()
os.copy(texture,"textures/"+texture.split("/")[-1].split("\\")[-1])
texture = "custom/textures/"+texture.split("/")[-1].split("\\")[-1]

print("Schreibe Datei...")

file1["name"].append(name)
file1["name_1"].append(name1)
file1["textures"][name1] = texture
file1["wind"][name1] = [int(wind.split("-")[0]),int(wind.split("-")[1])]
file1["written"] = 1

file1.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>shelve</code> will write out changes to keys when you <em>set that key</em>. It can't detect changes to values. Appending to a list or assigning to a key on a dictionary that is <em>value</em> is going to go undetected.</p>
<p>From the <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow noreferrer"><code>shelve</code> documentation</a>:</p>
<blockquote>
<p>Because of Python semantics, <strong>a shelf cannot know when a mutable persistent-dictionary entry is modified</strong>. By default modified objects are written only when assigned to the shelf (see Example). If the optional <code>writeback</code> parameter is set to <code>True</code>, all entries accessed are also cached in memory, and written back on <code>sync()</code> and <code>close()</code>; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).</p>
</blockquote>
<p><em>Bold emphasis mine.</em></p>
<p>Either set the <code>writeback</code> parameter to <code>True</code> (and accept the downsides):</p>
<pre><code>file1 = shelve.open("info", writeback=True)
</code></pre>
<p>or assign back to the key explicitly:</p>
<pre><code>names = file1["name"]
names.append(name)
file1["name"] = names
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to open your file with <code>writeback=True</code>:</p>
<pre><code>file1 = shelve.open("info",  writeback=True)
</code></pre>
<p>From the <a href="https://docs.python.org/3.5/library/shelve.html?highlight=shelve#module-shelve" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified. By default modified objects are written only when assigned to the shelf (see Example). <strong>If the optional <code>writeback</code> parameter is set to True, all entries accessed are also cached in memory, and written back on <code>sync()</code> and <code>close()</code>;</strong> this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).</p>
</blockquote>
</div>
<span class="comment-copy">Thanks, I'll try that.</span>
