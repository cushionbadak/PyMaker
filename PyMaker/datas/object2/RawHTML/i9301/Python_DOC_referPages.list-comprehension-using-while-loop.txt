<div class="post-text" itemprop="text">
<p>Is there a way to use a while loop in a list comprehension.</p>
<p>For example, I have a single line Fibonacci generator:</p>
<pre><code>[int(((1+(5**0.5))**n-(1-(5**0.5))**n)/(2**n*(5**0.5))) for n in range(100)]
</code></pre>
<p>but I'd like it to stop at a certain outcome, rather than just run a certain number of times. (i.e. all Fibonacci sequence numbers below 4,000,000)</p>
<p>This is a question about list-comprehension, not about lists in general.</p>
<p>The more generic phrasing might be this:</p>
<pre><code>[(formula using incrementing variable) 
    for incrementing variable while (result is less than specified amount)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>python don't have such feature of using <code>while</code> in a comprehension (which is like a map combined with filter), but you can accomplished that using other tools like making a function that do what you desire or using your best friend the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a> module. For example</p>
<p>example 1, with itertools</p>
<pre><code>&gt;&gt;&gt; from itertools import takewhile
&gt;&gt;&gt; def fib():
        fk,fk1 = 0,1
        while True:
            yield fk
            fk, fk1 = fk1, fk + fk1


&gt;&gt;&gt; list(takewhile(lambda fn:fn&lt;100,fib()))
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
&gt;&gt;&gt; 
</code></pre>
<p>example 2, with a function</p>
<pre><code>&gt;&gt;&gt; def fib_while(tope):
        fk,fk1 = 0,1
        while fk &lt; tope:
            yield fk
            fk,fk1 = fk1, fk + fk1


&gt;&gt;&gt; list(fib_while(100))
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
&gt;&gt;&gt;    
</code></pre>
<hr/>
<p>oh, I forgot to mention, but your formula for getting the Fibonacci numbers, even if mathematical correct, is doom to fail to get the real value for a large enough n, because <a href="https://stackoverflow.com/q/588004/5644961">floating point arithmetic rounding errors</a></p>
<p>the point of divergence is very easy to found (using the above <code>fib</code>)</p>
<pre><code>&gt;&gt;&gt; def fib_float(n):
        return int(((1+(5**0.5))**n-(1-(5**0.5))**n)/(2**n*(5**0.5)))

&gt;&gt;&gt; [n for n,f in zip(range(100),fib()) if f!=fib_float(n)] )
[72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
&gt;&gt;&gt;
</code></pre>
<p>so for all n&gt;=72 what you get are not Fibonacci numbers...</p>
<p>if you only care for all numbers in the sequence below 4,000,000 then that is not a problem of course as the limit is n=33</p>
</div>
<span class="comment-copy">Have a look at this answer: <a href="http://stackoverflow.com/questions/31003486/stopping-list-selection-in-python-2-7" title="stopping list selection in python 2 7">stackoverflow.com/questions/31003486/â€¦</a></span>
<span class="comment-copy">Yes, there's a way. Have you even tried to write the <code>while</code> loop?</span>
<span class="comment-copy">You can use a generator expression instead of a list comprehension, and then loop over it until some point, or use <code>itertools.takewhile()</code>.</span>
<span class="comment-copy">That said, using the explicit formula for the Fibonacci numbers is completely pointless if you want to generate them one by one anyway.  Just use the recursion relation in a while loop.</span>
<span class="comment-copy">The point isn't to complete the desired exercise, but rather to ask if there is a way to nest the while loop into the list comprehension. I get that you can do this with a lambda, I'm just wondering if a while statement can be placed in this phrasing.  I've tried it a couple of different ways and keep getting syntax errors based on the while.</span>
<span class="comment-copy">Yeah, I ran that range and realized that problem as well.  Thanks for the considered response. This is the answer I was looking for, that a list comprehension isn't going to be useful in any case looking for a function to stop when a certain result comes up.</span>
