<div class="post-text" itemprop="text">
<p>How to convert a human readable time with the format <code>20.12.2016 09:38:42,76</code> to Unix timestamps in <strong>milliseconds</strong>? I found a lot of similar questions, but didn't found this specific question/answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 this can be done in 2 steps:</p>
<ol>
<li>Convert timestring to <code>datetime</code> object</li>
<li>Multiply the timestamp of the <code>datetime</code> object by 1000 to convert it to milliseconds.</li>
</ol>
<p>For example like this:</p>
<pre><code>from datetime import datetime

dt_obj = datetime.strptime('20.12.2016 09:38:42,76',
                           '%d.%m.%Y %H:%M:%S,%f')
millisec = dt_obj.timestamp() * 1000

print(millisec)
</code></pre>
<p>Output:</p>
<pre><code>1482223122760.0
</code></pre>
<p><code>strptime</code> accepts your timestring and a format string as input. The timestring (first argument) specifies <em>what</em> you actually want to convert to a <code>datetime</code> object. The format string (second argument) specifies the actual <em>format</em> of the string that you have passed.</p>
<p>Here is the explanation of the format specifiers from the <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">official documentation</a>:</p>
<ul>
<li><code>%d</code> - Day of the month as a zero-padded decimal number.</li>
<li><code>%m</code> - Month as a zero-padded decimal number.</li>
<li><code>%Y</code> - Year with century as a decimal number</li>
<li><code>%H</code> - Hour (24-hour clock) as a zero-padded decimal number.</li>
<li><code>%M</code> - Minute as a zero-padded decimal number.</li>
<li><code>%S</code> - Second as a zero-padded decimal number.</li>
<li><code>%f</code> - Microsecond as a decimal number, zero-padded on the left.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>For Python2.7 - modifying MYGz's answer to not strip milliseconds:</p>
<pre><code>from datetime import datetime

d = datetime.strptime("20.12.2016 09:38:42,76", "%d.%m.%Y %H:%M:%S,%f").strftime('%s.%f')
d_in_ms = int(float(d)*1000)
print(d_in_ms)

print(datetime.fromtimestamp(float(d)))
</code></pre>
<p>Output:</p>
<pre><code>1482248322760
2016-12-20 09:38:42.760000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to parse your time format using <a href="https://docs.python.org/3/library/datetime.html#datetime.date.strftime" rel="nofollow noreferrer">strptime</a>.</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; ts, ms = '20.12.2016 09:38:42,76'.split(',')
&gt;&gt;&gt; ts
'20.12.2016 09:38:42'
&gt;&gt;&gt; ms
'76'
&gt;&gt;&gt; dt = datetime.strptime(ts, '%d.%m.%Y %H:%M:%S')
&gt;&gt;&gt; time.mktime(dt.timetuple())*1000 + int(ms)*10
1482223122760.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python2.7</p>
<p>You can format it into seconds and then multiply by 1000 to convert to millisecond.</p>
<pre><code>from datetime import datetime

d = datetime.strptime("20.12.2016 09:38:42,76", "%d.%m.%Y %H:%M:%S,%f").strftime('%s')
d_in_ms = int(d)*1000
print(d_in_ms)

print(datetime.fromtimestamp(float(d)))
</code></pre>
<p>Output:</p>
<pre><code>1482206922000
2016-12-20 09:38:42
</code></pre>
</div>
<span class="comment-copy">You need to provide an appropriate format string to <code>datetime.datetime.strptime</code>. See <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">Hey, thanks. Unfortunately I got the error "AttributeError: 'datetime.datetime' object has no attribute 'timestamp'". Possibly because I am using Python 2.7?</span>
<span class="comment-copy">Yes. Use MYGz's answer for Python 2.7</span>
<span class="comment-copy">Hey, thanks! I copy and paste your code and got a "ValueError: Invalid format string".</span>
<span class="comment-copy">@Tom Python version? It's working for me on Python2.7.6</span>
<span class="comment-copy">I am using Python 2.7.12.</span>
<span class="comment-copy">That strips out the ,76 though so it does not solve the problem.</span>
<span class="comment-copy">Thanks for a python 2.7 answer</span>
