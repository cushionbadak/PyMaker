<div class="post-text" itemprop="text">
<p>I'm trying to convert a timestamp with a specific timezone(Europe/Paris) to a datetime format in UTC. 
From my laptop it works with the solution below but when I'm executing my code in a remote server(AWS- Lambda function in Ireland), I've a shift of 1 hour because the local timezone of the server is different from mine. 
How can I have a code who can work on my laptop and at the same time in a remote server(dynamically handle local timezone)? </p>
<pre><code>import pytz
import datetime

def convert_timestamp_in_datetime_utc(timestamp_received):
    utc = pytz.timezone('UTC')
    now_in_utc = datetime.datetime.utcnow().replace(tzinfo=utc).astimezone(pytz.UTC)
    fr = pytz.timezone('Europe/Paris')
    new_date = datetime.datetime.fromtimestamp(timestamp_received)
    return fr.localize(new_date, is_dst=None).astimezone(pytz.UTC)
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what <code>timestamp_received</code> is, but I think what you want is <code>utcfromtimestamp()</code></p>
<pre><code>import pytz
from datetime import datetime

def convert_timestamp_in_datetime_utc(timestamp_received):
    dt_naive_utc = datetime.utcfromtimestamp(timestamp_received)
    return dt_naive_utc.replace(tzinfo=pytz.utc)
</code></pre>
<p>For completeness, here is another way to accomplish the same thing by referencing <a href="http://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer"><code>python-dateutil</code></a>'s <code>tzlocal</code> time zone:</p>
<pre><code>from dateutil import tz
from datetime import datetime
def convert_timestamp_in_datetime_utc(timestamp_received):
    dt_local = datetime.fromtimestamp(timestamp_received, tz.tzlocal())

    if tz.datetime_ambiguous(dt_local):
        raise AmbiguousTimeError

    if tz.datetime_imaginary(dt_local):
        raise ImaginaryTimeError

    return dt_local.astimezone(tz.tzutc())


class AmbiguousTimeError(ValueError):
    pass

class ImaginaryTimeError(ValueError):
    pass
</code></pre>
<p>(I added in the <code>AmbiguousTimeError</code> and <code>ImaginaryTimeError</code> conditions to mimic the <code>pytz</code> interface.) Note that I'm including this just in case you have a similar problem that needs to make reference to the local time zone for some reason - if you have something that will give you the right answer in UTC, it's best to use that and then use <code>astimezone</code> to get it into whatever local zone you want it in.</p>
<p><strong>How it works</strong></p>
<p>Since you expressed that you were still a bit confused about how this works in the comments, I thought I would clarify why this works. There are two functions that convert timestamps to <code>datetime.datetime</code> objects, <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.fromtimestamp(timestamp, tz=None)</code></a> and <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.utcfromtimestamp(timestamp)</code></a>:</p>
<ol>
<li><p><code>utcfromtimestamp(timestamp)</code> will give you a <em>naive</em> <code>datetime</code> that represents the time in UTC. You can then do <code>dt.replace(tzinfo=pytz.utc)</code> (or any other <code>utc</code> implementation - <code>datetime.timezone.utc</code>, <code>dateutil.tz.tzutc()</code>, etc) to get an aware datetime and convert it to whatever time zone you want.</p></li>
<li><p><code>fromtimestamp(timestamp, tz=None)</code>, when <code>tz</code> is not <code>None</code>, will give you an <em>aware</em> <code>datetime</code> equivalent to <code>utcfromtimestamp(timestamp).replace(tzinfo=timezone.utc).astimezone(tz)</code>. If <code>tz</code> is <code>None</code>, instead of converting too the specified time zone, it converts to your local time (equivalent to <code>dateutil.tz.tzlocal()</code>), and then returns a <em>naive</em> <code>datetime</code>.</p></li>
</ol>
<p>Starting in Python 3.6, you can use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer"><code>datetime.datetime.astimezone(tz=None)</code></a> on <em>naive</em> datetimes, and the time zone will be assumed to be system local time. So if you're developing a Python &gt;= 3.6 application or library, you can use <code>datetime.fromtimestamp(timestamp).astimezone(whatever_timezone)</code> or <code>datetime.utcfromtimestamp(timestamp).replace(tzinfo=timezone.utc).astimezone(whatever_timezone)</code> as equivalents.</p>
</div>
<span class="comment-copy">I'm not sure I understand the question - how is this failing? What is "timestamp_received"? The only reason I can imagine this failing is if the timestamp is a timestamp in <i>local time</i>.</span>
<span class="comment-copy">It's a timestamp extracted from a French website which is based on the local timezone(Europe/Paris). When I executed this function, the return datetime has a shift of one hour if I executed it on my laptop or by a Lambda function. I'm suppose the problem is that "datetime.datetime.fromtimestamp" is based on the local timezone...</span>
<span class="comment-copy">Thanks a lot Paul, it works with the first solution! Still really confusing for me the datetime/timestamp manipulation with different timezone :(</span>
<span class="comment-copy">@Matt I updated my answer, hopefully that clarifies what's going on.</span>
<span class="comment-copy">thanks alot for your explanation! It's more clear now for me.</span>
