<div class="post-text" itemprop="text">
<p>I've got an open source python command line program that runs on Python 2.7, Python3+, and is cross platform.</p>
<p>I'm trying to package it up into an executable for my windows users more easily. The source for this package is up on Github here: <a href="https://github.com/stormpath/stormpath-cli" rel="nofollow noreferrer">https://github.com/stormpath/stormpath-cli</a></p>
<p>I'm trying to package my Python program up using <a href="https://pyinstaller.readthedocs.io/en/stable/" rel="nofollow noreferrer">pyinstaller</a>, but am having issues.</p>
<p>I'm running the following commands from a Windows 8 box:</p>
<pre><code>$ pyinstaller --onefile setup.py
</code></pre>
<p>This successfully generates an EXE file for me, but when I go to run it, I get the following errors:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "setup.py", line 4, in &lt;module&gt;
  File "c:\python27\Lib\site-packages\PyInstaller\loader\pyimod03_importers.py", line 389, in load_module
    exec(bytecode, module.__dict__)
  File "site-packages\setuptools\__init__.py", line 160, in &lt;module&gt;
  File "site-packages\setuptools\monkey.py", line 93, in patch_all
  File "site-packages\setuptools\monkey.py", line 145, in patch_for_msvc_specialized_compiler
  File "importlib\__init__.py", line 37, in import_module
ImportError: No module named msvc
Failed to execute script setup
</code></pre>
<p>For testing purposes, to help narrow the issue down, I created a <code>test.py</code> script that contains the following code:</p>
<pre><code>print('hello, world!')
</code></pre>
<p>And then packaged that into an exe as well:</p>
<pre><code>$ pyinstaller --onefile test.py
</code></pre>
<p>When I run this resulting exe, everything works great! Hello world is output as expected.</p>
<p>I believe what's happening is that I'm not telling pyinstaller how to properly 'detect' that my project is a python package, and not a single file script.</p>
<p>I've read through the docs a lot, and have googled around, but haven't found a way to specify a package for pyinstaller to analyze.</p>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>While I think it is a perfectly reasonable thing to do, it looks like PyInstaller simply doesn't support building an application from a package (with <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>__main__.py</code></a>).</p>
<p>See <a href="https://github.com/pyinstaller/pyinstaller/issues/2560" rel="nofollow noreferrer">https://github.com/pyinstaller/pyinstaller/issues/2560</a>.</p>
<p>As a workaround, you can write a small stub (outside of the package) that does the same the same thing as your <code>__main__.py</code>. Then point PyInstaller at that.</p>
</div>
<span class="comment-copy">I don't think you should be pointing to the setuptools script. That's just for installing it, you should instead point towards the module stormpath-cli. <code>main.py</code> may need to be renamed to <code>__main__.py</code> I believe this issue is coming up because setuptools does some dynamic system-specific stuff and when it's bundled it can't access it properly...</span>
<span class="comment-copy">Yah, I agree. I think this is the problem. Just not sure what I <i>should</i> point it to :o How will it know how to install the script to the correct place without a setup script? oO</span>
<span class="comment-copy">It won't, the exe created will be the functioning program. When you run it, it won't install, it will just execute the stormpath-cli. I.E. an all-in-one portable app. I think it's a lot easier to do that, then bundle that exe inside of an installer. (Which really could just be a batch file adding it to path, moving it to the proper program directory, etc) I don't think setuptools was ever intended to run from a frozen environment and without going into it I can imagine there being a lot of problems there. I think setuptools checks if the python path is read-only, among other things.</span>
<span class="comment-copy">PyInstaller is for installing a "Python <b>application</b> and all its dependencies into a single package", not for installing a Python package. You need to use something else, like the <a href="https://docs.python.org/2/library/distutils.html#module-distutils" rel="nofollow noreferrer"><code>distutils</code></a> package, to do that.</span>
<span class="comment-copy">@martineau A Python package <i>can be</i> an application -- just add <code>__main__.py</code> and now you can "run" a package.</span>
<span class="comment-copy">Note that instead of adding yet another file you can simple use <code>__main__.py</code> as your script for PyInstaller, and make sure that all imports are absolute (not relative). This is <a href="https://github.com/pyinstaller/pyinstaller/issues/2560#issuecomment-377917879" rel="nofollow noreferrer">mentioned in a comment</a> on GitHub.</span>
