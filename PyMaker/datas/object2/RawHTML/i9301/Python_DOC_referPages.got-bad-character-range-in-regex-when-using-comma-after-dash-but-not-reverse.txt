<div class="post-text" itemprop="text">
<p>I have tried this command in python console:</p>
<pre><code>re.match('^\&lt;.+\&gt;([\w\s-,]+)\&lt;.+\&gt;$', 'Carrier-A')
</code></pre>
<p>and I got:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/re.py", line 141, in match
    return _compile(pattern, flags).match(string)
  File "/usr/lib/python2.7/re.py", line 251, in _compile
    raise error, v # invalid expression
sre_constants.error: bad character range
</code></pre>
<p>but when I use:</p>
<pre><code>re.match('^\&lt;.+\&gt;([\w\s,-]+)\&lt;.+\&gt;$', 'Carrier-A')
</code></pre>
<p>no error is being returned.</p>
<p>What is it that I should consider about character sequences?</p>
</div>
<div class="post-text" itemprop="text">
<p>A dash <code>-</code>, when used within square brackets <code>[]</code>, has a special meaning: it defines a range of characters. E.g., <code>[\s-,]</code> means "any character from <code>\s</code> to <code>,</code>" (which is not possible). <em>However</em>, the dash does not have the special meaning if it is either the first or the last character in the square brackets. That's why your second regex is correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>the character <code>-</code> stands for specifying the range of characters within a character class, which works based on the ASCII number of the characters. So the left side must always have a lower ASCII number than the right side. And whenever your regex doesn't meet this criteria python will raise that error. Which in this case your range is completely meaningless, since it's <code>\s-,</code> which means any character between whitespaces and comma! which is obviously wrong!</p>
<p>And if you want to use the hyphen character literally you have two options in python first is escaping the characters with a backslash, like <code>[\w\s\-,]</code> and the second one is putting it at the leading or trailing of other characters within character-class, as you did. <code>[\w\s,-]</code> </p>
<p>Read more <a href="http://www.regular-expressions.info/charclass.html" rel="nofollow noreferrer">http://www.regular-expressions.info/charclass.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, the <code>-</code> (minus sign) is used to provide character ranges inside <code>[]</code>, so that's why you got error when using:</p>
<p><code>re.search('^\&lt;.+\&gt;([\w\s-,]+)\&lt;.+\&gt;$', 'Carrier-A')</code> as if you were saying there is a character range from <code>\s</code> to <code>,</code> which is not correct.</p>
<p>Whereas in your second expression, <code>([\w\s,-]+</code>, there is no character ranges since the <code>-</code> is at the end of your characters class (between <code>[]</code>), which generates no issues.</p>
<p>The reason as to why character ranges starting or ending with <code>\s</code> does not work as quoted from <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Python's doc</a>:</p>
<blockquote>
<p><code>\s</code></p>
<p>For Unicode (str) patterns: Matches Unicode whitespace characters
  (which includes [ \t\n\r\f\v], and also many other characters, for
  example the non-breaking spaces mandated by typography rules in many
  languages). If the ASCII flag is used, only [ \t\n\r\f\v] is matched
  (but the flag affects the entire regular expression, so in such cases
  using an explicit [ \t\n\r\f\v] may be a better choice). For 8-bit
  (bytes) patterns: Matches characters considered whitespace in the
  ASCII character set; this is equivalent to [ \t\n\r\f\v].</p>
</blockquote>
</div>
<span class="comment-copy">I think the correct answer to that is because <code>\s</code> is itself a range of characters, so you can not use it as a start or end character range, check my answer to understand more thoroughly.</span>
<span class="comment-copy">Why is it wrong? Space has ascii value of 32 and comma has 44. <a href="http://ascii.cl/" rel="nofollow noreferrer">ascii.cl</a></span>
<span class="comment-copy">@MYGz: <code>\s</code> is not just space, but a shorthand for "any kind of whitespace" (including tabs, carriage returns, line feeds etc.). So it doesn't correspond to a single ASCII value/Unicode code point.</span>
<span class="comment-copy">Why is it wrong? Space has ascii value of 32 and comma has 44.  <a href="http://ascii.cl/" rel="nofollow noreferrer">ascii.cl</a></span>
<span class="comment-copy">@MYGz It's not only the "space" it's a whitespace modifier, which will match all whitespaces include tab, space, etc. Which makes it ambiguous in this context.</span>
<span class="comment-copy">Why is it wrong? Space has ascii value of 32 and comma has 44. <a href="http://ascii.cl/" rel="nofollow noreferrer">ascii.cl</a></span>
<span class="comment-copy">The reason is simple, IMHO, <code>\s</code> does not represent a single character, but as per <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code>'s doc</a>: "Unicode whitespace characters (which includes <b>[ \t\n\r\f\v]</b>, and also many other characters, for example the non-breaking spaces mandated by typography rules in many languages)", So how can someone makes a character range with <code>\s</code> ?</span>
<span class="comment-copy">That makes sense. Update it in your answer.</span>
<span class="comment-copy">@MYGz, updated accordingly, thanks for the head's up :)</span>
