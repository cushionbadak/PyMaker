<div class="post-text" itemprop="text">
<p>I've been trying to convert this specific date format to a string in Python like so:</p>
<pre><code>datetime.strptime(‘2017-01-12T14:12:06.000-0500’,'%Y-%m-%dT%H:%M:%S.%f%Z')
</code></pre>
<p>But it doesn't work.  </p>
<p>What am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<h1>Solution for Python 2.7</h1>
<p>From the comments it became clear that OP needs a solution for Python 2.7.</p>
<p>Apparently, there's no <code>%z</code> in strptime for python 2.7 even though <a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">the documentation claims the contrary</a>, the raised error is <code>ValueError: 'z' is a bad directive in format '%Y-%m-%dT%H:%M:%S.000%z'</code>.</p>
<p>To solve this, you need to parse the date without timezone first and add the timezone later. Unfortunately you need to subclass <code>tzinfo</code> for that. This answer is based on <a href="https://stackoverflow.com/a/23122493/119861">this answer</a></p>
<pre><code>from datetime import datetime, timedelta, tzinfo

class FixedOffset(tzinfo):
    """offset_str: Fixed offset in str: e.g. '-0400'"""
    def __init__(self, offset_str):
        sign, hours, minutes = offset_str[0], offset_str[1:3], offset_str[3:]
        offset = (int(hours) * 60 + int(minutes)) * (-1 if sign == "-" else 1)
        self.__offset = timedelta(minutes=offset)
        # NOTE: the last part is to remind about deprecated POSIX GMT+h timezones
        # that have the opposite sign in the name;
        # the corresponding numeric value is not used e.g., no minutes
        '&lt;%+03d%02d&gt;%+d' % (int(hours), int(minutes), int(hours)*-1)
    def utcoffset(self, dt=None):
        return self.__offset
    def tzname(self, dt=None):
        return self.__name
    def dst(self, dt=None):
        return timedelta(0)
    def __repr__(self):
        return 'FixedOffset(%d)' % (self.utcoffset().total_seconds() / 60)

date_with_tz = "2017-01-12T14:12:06.000-0500"
date_str, tz = date_with_tz[:-5], date_with_tz[-5:]
dt_utc = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S.%f")
dt = dt_utc.replace(tzinfo=FixedOffset(tz))
print(dt)
</code></pre>
<p>The last line prints:</p>
<pre><code>2017-01-12 14:12:06-05:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error was that you used <code>%Z</code> instead of <code>%z</code>. From the <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">documentation</a>, you should use <code>%z</code> to match e.g. <code>(empty), +0000, -0400, +1030</code></p>
<pre><code>import datetime

result = datetime.datetime.strptime('2017-01-12T14:12:06.000-0500','%Y-%m-%dT%H:%M:%S.%f%z')

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>2017-01-12 14:12:06-05:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Task:</strong></p>
<p>"convert this specific date format to a string in Python"</p>
<pre><code>import datetime  
</code></pre>
<p><strong>Solution:</strong></p>
<p>First modify your <code>datetime.strptime</code> code as follows:</p>
<pre><code>  obj = datetime.datetime.strptime('2017-01-12T14:12:06.000-0500','%Y-%m-%dT%H:%M:%S.%f%z')
</code></pre>
<p><a href="http://strftime.org" rel="nofollow noreferrer">This</a> is a useful site for your reference and will help you modify the output as per your preference.  </p>
<p>Then use <code>strftime</code> to convert it to a string:</p>
<pre><code>obj.strftime("%b %d %Y %H:%M:%S")
</code></pre>
<p>Out:</p>
<pre><code>'Jan 12 2017 14:12:06'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming Python 3, the format <code>%f</code> may not be a valid format character for <code>strptime</code> on your platform.  The <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>strptime</code> docs</a> reference <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer"><code>strftime</code></a> for the formats, and <code>%f</code> isn't in <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer">the <code>strftime</code> list</a>.  However, the <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">format string reference</a> says that </p>
<blockquote>
<p>The full set of format codes supported varies across platforms, because Python calls the platform C library’s strftime() function, and platform variations are common.</p>
</blockquote>
<p>On my test system, which is Cygwin with Py 3.4.5, I used:</p>
<pre><code>import datetime
datetime.datetime.strptime('2017-01-12T14:12:06.000-0500','%Y-%m-%dT%H:%M:%S.%f%Z')
</code></pre>
<p>and got </p>
<pre><code>ValueError: time data '2017-01-12T14:12:06.000-0500' does not match format '%Y-%m-%dT%H:%M:%S.%f%Z'
</code></pre>
<p>I checked the man pages for <code>strftime(3)</code> and found that I don't have <code>%f</code>, and <code>%z</code> should be lowercase.  I therefore used</p>
<pre><code>datetime.datetime.strptime('2017-01-12T14:12:06.000-0500','%Y-%m-%dT%H:%M:%S.000%z')
#          straight quotes ^ not curly                  ^
#                                                      literal .000 (no %f) ^^^^ 
#                                                                  lowercase %z ^^
</code></pre>
<p>and got a successful parse.</p>
<p><strong>Edit</strong> @Tagc found that <code>%f</code> worked fine running under Python 3.5 in PyCharm on a Windows 10 machine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Having date as the input str:</p>
<pre><code>from dateutil import parser
parsed_date = parser.parse(date)
</code></pre>
<p><a href="https://dzone.com/articles/python-transforming-twitter" rel="nofollow noreferrer">python-transforming-twitter</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't have timezone information, replacing the '%Z' with 'Z' works in Python 3.</p>
<pre><code>datetime.strptime('2010-10-04T03:41:22.858Z','%Y-%m-%dT%H:%M:%S.%fZ')
# datetime.datetime(2010, 10, 4, 3, 41, 22, 858000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if it is a string, e.g. load from a JSON file, you can try </p>
<pre><code>date = '2017-01-12T14:12:06.000-0500'

print(date = date[:10]+" "+date[11:19])
</code></pre>
<p>returns:</p>
<pre><code>2017-01-12 14:12:06
</code></pre>
</div>
<span class="comment-copy">Welcome to the site!  Check out the <a href="https://stackoverflow.com">tour</a> and <a href="https://stackoverflow.com/help/how-to-ask/">"How to ask"</a> for more about asking questions that will attract quality answers.  Please <a href="https://stackoverflow.com/posts/41684991/edit">edit your question</a> to show the output or error message you get, compared to what you expect.  Thanks!  <b>Also</b>, use straight quotes <code>''</code>, not curly quotes.</span>
<span class="comment-copy">Thank you @hansaplast this was exactly what I needed since I'm working with an ancient version of Python :P</span>
<span class="comment-copy">well.. I wouldn't call python 2.7 ancient, it's still widely used by people who don't want to do the switch to python 3 (or their modules don't support python 3 yet)</span>
<span class="comment-copy">The problem is I'm using python 2.6 and it doesn't seem to recognize %z:</span>
<span class="comment-copy">This is incorrect. <code>%f</code> is a valid format character according to the documentation. <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">@Tagc It actually depends on which documentation you read, and it turns out it's platform-specific.  Please see edited answer.</span>
<span class="comment-copy">Ah okay. I'm confused so I'll lift my downvote. FWIW the <code>%f</code> worked fine for me running under Python 3.5 in PyCharm on a Windows 10 machine.</span>
<span class="comment-copy">@Tagc Thanks!  Yes, I was unpleasantly surprised to discover the internal inconsistency in the documentation.  Thanks for the extra data!</span>
