<div class="post-text" itemprop="text">
<p>How to remove the variables in python to clear ram memory in python?</p>
<p><strong>R</strong> :</p>
<pre><code>a = 2 
rm(a)
</code></pre>
<p><strong>python</strong>:</p>
<pre><code>a= 2
</code></pre>
<p>How to clear the single variables or a group of variables?</p>
</div>
<div class="post-text" itemprop="text">
<p>python memory cleanup is managed by the garbage collector. on CPython it is based on reference counting. 
you can call the garbage collector explicitly like this:</p>
<pre><code>import gc
gc.collect()
</code></pre>
<p>this can be done after calling a function that uses large variables in terms of ram.
Note that you do not have to call this function explicitly as the garbage collector will be called eventually to free up ram automatically.</p>
<p>if you still want to explicitly remove a variable you can use the <a href="https://docs.python.org/2/tutorial/datastructures.html#the-del-statement" rel="nofollow noreferrer">del</a> statement (as written before) like this:</p>
<pre><code>x = [1, 2, 3]
i = 42
s = 'abc'

del s  # delete string
del x[1]  # delete single item in a list
del x, i  # delete multiple variables in one statement
</code></pre>
<h2>del statement</h2>
<p>to better understand what <code>del</code> does and its limitations lets take a look at how python stores variables on ram.</p>
<pre><code>x = [1, 2, 3]
</code></pre>
<p>the above code creates a reference between the name <code>x</code> to the list <code>[1, 2, 3]</code> which is stored on the heap. <code>x</code> is just a pointer to that list.</p>
<pre><code>x = [1, 2, 3]
y = x
x is y  # True
</code></pre>
<p>in this example we have the reference <code>x</code> and the list on the heap <code>[1, 2, 3]</code>, but what is this new <code>y</code> variable? its just another pointer, meaning now we have two pointers to the same <code>[1, 2, 3]</code> list.</p>
<p>returning to the <code>del</code> statement, if we delete one variable it wont affect the list or the other variable</p>
<pre><code>x = [1, 2, 3]
y = x
del x
print(y)  # prints [1, 2, 3]
</code></pre>
<p>so here we will not free up the list, only decrease the reference counting to the list but we still have <code>y</code> pointing to it.</p>
<p>to overcome this we can use the <a href="https://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer">weakref</a> module to point <code>y</code> to the list and when <code>x</code> is deleted the list is also deleted.</p>
<h2>Bottom line</h2>
<ul>
<li>use <code>gc.collect()</code> after heavy memory functions</li>
<li>use <code>del x, y</code> to delete all pointers to a specific object to free it up</li>
<li>use <code>weakref</code> module to avoid holding objects on the ram after all other references to them are deleted</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>del</code></p>
<pre><code>&gt;&gt;&gt; a=2
&gt;&gt;&gt; del a
&gt;&gt;&gt; a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
</code></pre>
</div>
<span class="comment-copy">Thanks. What about functions? Is it working also with del?</span>
<span class="comment-copy">How to do that for group of variables can we delete 5 variables at a time</span>
<span class="comment-copy">@konerunikhil Did you try something like the following: given <code>a = 3</code> and <code>b = {'a': 1, 'b': 2}</code>, then <code>del a, b</code> ? This deletes <code>a</code> and <code>b</code>.</span>
