<div class="post-text" itemprop="text">
<p>I want to do something like <code>String.Format("[{0}, {1}, {2}]", 1, 2, 3)</code> which returns:</p>
<pre><code>[1, 2, 3]
</code></pre>
<p>How do I do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The previous answers have used % formatting, which is being phased out in Python 3.0+.  Assuming you're using Python 2.6+, a more future-proof formatting system is described here:</p>
<p><a href="http://docs.python.org/library/string.html#formatstrings" rel="noreferrer">http://docs.python.org/library/string.html#formatstrings</a></p>
<p>Although there are more advanced features as well, the simplest form ends up looking very close to what you wrote:</p>
<pre><code>&gt;&gt;&gt; "[{0}, {1}, {2}]".format(1, 2, 3)
[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it three ways:</p>
<hr/>
<p>Use Python's automatic pretty printing:</p>
<pre><code>print [1, 2, 3]   # Prints [1, 2, 3]
</code></pre>
<p>Showing the same thing with a variable:</p>
<pre><code>numberList = [1, 2]
numberList.append(3)
print numberList   # Prints [1, 2, 3]
</code></pre>
<hr/>
<p>Use 'classic' string substitutions (ala C's printf). Note the different meanings here of % as the string-format specifier, and the % to apply the list (actually a tuple) to the formatting string. (And note the % is used as the modulo(remainder) operator for arithmetic expressions.)</p>
<pre><code>print "[%i, %i, %i]" % (1, 2, 3)
</code></pre>
<p>Note if we use our pre-defined variable, we'll need to turn it into a tuple to do this:</p>
<pre><code>print "[%i, %i, %i]" % tuple(numberList)
</code></pre>
<hr/>
<p>Use Python 3 string formatting. This is still available in earlier versions (from 2.6), but is the 'new' way of doing it in Py 3. Note you can either use positional (ordinal) arguments, or named arguments (for the heck of it I've put them in reverse order. </p>
<pre><code>print "[{0}, {1}, {2}]".format(1, 2, 3)
</code></pre>
<p>Note the names 'one' ,'two' and 'three' can be whatever makes sense.)</p>
<pre><code>print "[{one}, {two}, {three}]".format(three=3, two=2, one=1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for string formatting, which in python is based on the sprintf function in C.</p>
<pre><code>print "[%s, %s, %s]" % (1, 2, 3)
</code></pre>
<p>For a complete reference look here:
    <a href="http://docs.python.org/library/stdtypes.html#string-formatting" rel="nofollow noreferrer">http://docs.python.org/library/stdtypes.html#string-formatting</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To print elements sequentially use {} without specifying the index</p>
<pre><code>print('[{},{},{}]'.format(1,2,3))
</code></pre>
<p>(works since python 2.7 and python 3.1)</p>
</div>
<div class="post-text" itemprop="text">
<p>You haven't formulated yourself very commendably, but I'll venture a guess this is what you're looking for:</p>
<pre><code>foo = "Hello"
bar = "world"
baz = 2
print "%s, %s number %d" % (foo, bar, baz)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that this combination is missing :P</p>
<pre><code>"[{0}, {1}, {2}]".format(*[1, 2, 3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have lot of solutions :)</p>
<p><strong>simple way (C-style)</strong>:</p>
<pre><code>print("[%i, %i, %i]" %(1, 2, 3))
</code></pre>
<p><strong>Use <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">str.format()</a></strong></p>
<pre><code>print("[{0}, {1}, {2}]", 1, 2, 3)
</code></pre>
<p><strong>Use <a href="https://docs.python.org/3/library/string.html#string.Template.template" rel="nofollow noreferrer">str.Template()</a></strong></p>
<pre><code>s = Template('[$a, $b, $c]')
print(s.substitute(a = 1, b = 2, c = 3))
</code></pre>
<p>You can read <a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101 -- Advanced String Formatting</a></p>
</div>
<div class="post-text" itemprop="text">
<p>PEP 498 which landed in <code>python 3.6</code> added literal string interpolation, which is basically a shortened form of <code>format</code>.</p>
<p>You can now do:
</p>
<pre><code>f"[{1}, {2}, {3}]"
</code></pre>
<p>Common other uses I find useful are:</p>
<pre><code>pi = 3.141592653589793
today = datetime(year=2018, month=2, day=3)

num_2 = 2     # Drop assigned values in
num_3 = "3"   # Call repr(), or it's shortened form !r
padding = 5   # Control prefix padding
precision = 3 #   and precision for printing


f"""[{1},
     {num_2},
     {num_3!r},
     {pi:{padding}.{precision}},
     {today:%B %d, %Y}]"""
</code></pre>
<p>Which will produce:</p>
<pre><code>"[1,\n     2,\n     '3',\n      3.14,\n     February 03, 2018]"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't know how many items are in list, this aproach is the most universal</p>
<pre><code>&gt;&gt;&gt; '[{0}]'.format(', '.join([str(i) for i in [1,2,3]]))

'[1, 2, 3]'
</code></pre>
<p>It is mouch simplier for list of strings</p>
<pre><code>&gt;&gt;&gt; '[{0}]'.format(', '.join(['a','b','c']))
'[a, b, c]'
</code></pre>
</div>
<span class="comment-copy">in <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">python 3.6+</a> you can use <code>f"[{1}, {2}, {3}]"</code></span>
<span class="comment-copy">Also, in Python 3.1, there's no need to specify the ordinals. "[{}, {}, {}]".format(1, 2, 3)</span>
<span class="comment-copy">The ordinals are also optional in in Python 2.7</span>
<span class="comment-copy">Do you have a reference which documents that % formatting is being phased out in Python 3.0+? It's still in 3.3 - see <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">docs.python.org/3/library/…</a> - and while the docs say that the newer <code>format</code> method is preferred, it doesn't say that the % operator is being phased out.</span>
<span class="comment-copy">@Day According to the Python 3.0 What's New document (<a href="http://docs.python.org/release/3.0/whatsnew/3.0.html#pep-3101-a-new-approach-to-string-formatting" rel="nofollow noreferrer">docs.python.org/release/3.0/whatsnew/…</a>): "the % operator is still supported; it will be deprecated in Python 3.1 and removed from the language at some later time."  Given the popularity of %, maybe this won't actually happen, but at least it's something to be aware of.</span>
<span class="comment-copy">For completeness, using the "classic" style, you can also do: <code>print "[%(one)i, %(two)i, %(three)i]" % {'three':3,'two':2,'one':1}</code></span>
<span class="comment-copy">Thanks, what does the last % signifies? Also do you have to write the type of the way it should be printed like in C++ with s, d, f, etc?</span>
<span class="comment-copy">Yep. int = %d, float = %f (and there's precision, so look at the reference)</span>
<span class="comment-copy">Thanks, what does the last % signifies? Also do you have to write the type of the way it should be printed like in C++ with s, d, f, etc?</span>
<span class="comment-copy">I'll refer you to DNS' answer above which is superior: <a href="http://stackoverflow.com/questions/517355/string-formatting-in-python/517471#517471" title="string formatting in python">stackoverflow.com/questions/517355/string-formatting-in-python/…</a></span>
