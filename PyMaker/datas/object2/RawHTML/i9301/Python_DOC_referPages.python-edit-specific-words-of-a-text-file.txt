<div class="post-text" itemprop="text">
<p>My program is a basic Tkinter game with a scoreboard type system. This system stores the username and the number of attempts each user has had in a text file.</p>
<p>For example, when it is the user's first time, it appends their name to the end of the text file as   [joe_bloggs, 1] with joe_bloggs being the username and 1 being the number of attempts. As its the user's first time, it's 1.</p>
<p>I am trying to look for a way to 'update' or change the number '1' to increment by 1 each time. This text file stores all the users, i.e [Joe,1] [example1, 1] [example2, 2] in that format.</p>
<p>Here is the code I currently have: </p>
<pre><code>write = ("[", username, attempts ,"]")

if (username not in filecontents): #Searches the file contents for the username    
    with open("test.txt", "a") as Attempts:    
        Attempts.write(write)
        print("written to file")  

else:
    print("already exists")
    #Here is where I want to have the mechanism to update the number. 
</code></pre>
<p>Thanks in advance. </p>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution would be using the <a href="https://docs.python.org/3/library/shelve.html?module-shelve" rel="nofollow noreferrer"><code>shelve</code></a> module of the standard library:</p>
<pre><code>import shelve

scores = shelve.open('scores')
scores['joe_bloggs'] = 1
print(scores['joe_bloggs'])
scores['joe_bloggs'] += 1
print(scores['joe_bloggs'])
scores.close()
</code></pre>
<p>Output:</p>
<pre><code>1
2
</code></pre>
<p>Next session:</p>
<pre><code>scores = shelve.open('scores')
print(scores['joe_bloggs'])
</code></pre>
<p>Output:</p>
<pre><code>2
</code></pre>
<blockquote>
<p>A “shelf” is a persistent, dictionary-like object. The difference with “dbm” databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python objects — anything that the pickle module can handle. This includes most class instances, recursive data types, and objects containing lots of shared sub-objects. The keys are ordinary strings.</p>
</blockquote>
<p>You can convert the whole content into a dictionary:</p>
<pre><code>&gt;&gt;&gt; dict(scores)
{'joe_bloggs': 2}
</code></pre>
<p>Adapted to your use case:</p>
<pre><code>username = 'joe_bloggs'

with shelve.open('scores') as scores:  
    if username in scores: 
        scores[username] += 1 
        print("already exists")
    else:
        print("written to file")  
        scores[username] = 1 
</code></pre>
<p>If you don't always want to check if the user is already there, you can use a <code>defaultdict</code>. First, create the file:</p>
<pre><code>from collections import defaultdict
import shelve

with shelve.open('scores', writeback=True) as scores:
    scores['scores'] = defaultdict(int)
</code></pre>
<p>Later, you just need to write <code>scores['scores'][user] += 1</code>:</p>
<pre><code>username = 'joe_bloggs'

with shelve.open('scores', writeback=True) as scores:  
    scores['scores'][user] += 1
</code></pre>
<p>An example with multiple users and increments:</p>
<pre><code>with shelve.open('scores', writeback=True) as scores:
    for user in ['joe_bloggs', 'user2']:
        for score in range(1, 4):
            scores['scores'][user] += 1
            print(user, scores['scores'][user])
</code></pre>
<p>Output:</p>
<pre><code>joe_bloggs 1
joe_bloggs 2
joe_bloggs 3
user2 1
user2 2
user2 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use standard <a href="https://docs.python.org/2/library/configparser.html#examples" rel="nofollow noreferrer">ConfigParser</a> module to persist simple application states. </p>
</div>
<span class="comment-copy">@MYGz Currently, they're separated by a space. Thanks</span>
<span class="comment-copy">For your use case Mike's solution is more appropriate.</span>
<span class="comment-copy">I see. How is it different than pickle?</span>
<span class="comment-copy">It is (like a) a dictionary.</span>
<span class="comment-copy">This solution is more simpler IMO.</span>
