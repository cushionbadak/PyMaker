<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/455612/limiting-floats-to-two-decimal-points">Limiting floats to two decimal points</a>
<span class="question-originals-answer-count">
                    22 answers
                </span>
</li>
</ul>
</div>
<p>I wrote a very simple code in Python.
I need to print all the numbers between <code>1</code> and <code>5</code> (including <code>1</code> and <code>5</code>) in steps of <code>0.1</code>. The integers should be without the suffix <code>.0</code>, i.e. the output should be:</p>
<pre><code>0
0.1
0.2
...
1
1.1
...
...
5
</code></pre>
<p>Here is my code:</p>
<pre><code>for i in range(0,51):
    if i%10==0:
        z=int(i/10)
        print (z)
    else:
        print (i*0.1)
</code></pre>
<p>Here is my output:</p>
<pre><code>0
0.1
0.2
0.30000000000000004
0.4
0.5
0.6000000000000001
0.7000000000000001
0.8
0.9
1
1.1
1.2000000000000002
1.3
1.4000000000000001
1.5
1.6
1.7000000000000002
1.8
1.9000000000000001
2
2.1
2.2
2.3000000000000003
2.4000000000000004
2.5
2.6
2.7
2.8000000000000003
2.9000000000000004
3
3.1
3.2
3.3000000000000003
3.4000000000000004
3.5
3.6
3.7
3.8000000000000003
3.9000000000000004
4
4.1000000000000005
4.2
4.3
4.4
4.5
4.6000000000000005
4.7
4.800000000000001
4.9
5
</code></pre>
<p>I don't need all this zeros <code>.000000001</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Taking advantage of Python's string formatting capabilities, you can reduce your whole loop to one line:</p>
<pre><code>for i in range(0, 51):
    print('{:.{deci}f}'.format(i*0.1, deci=min(1, i%10)))
</code></pre>
<p>Output:</p>
<pre><code>0
0.1
0.2
...
0.8
0.9
1
1.1
1.2
...
1.8
1.9
2
2.1
2.2
...
4.8
4.9
5
</code></pre>
<h3>Explanation</h3>
<p>This gives you <code>0</code> for multiples of 10 for <code>i</code> and <code>1</code> for others:</p>
<pre><code>&gt;&gt;&gt; i = 10
&gt;&gt;&gt;  min(1, i%10)
0
&gt;&gt;&gt; i = 8
&gt;&gt;&gt; min(1, i%10)
1
</code></pre>
<p>Now, you can use this for the keyword argument <code>deci</code> to determine the number of decimals in your output:</p>
<pre><code>&gt;&gt;&gt; '{:.{deci}f}'.format(1.99, deci=1)
'2.0'
&gt;&gt;&gt; '{:.{deci}f}'.format(1.99, deci=0)
'2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can print the floating point numbers rounded to 1 digit after the decimal point like so:</p>
<pre><code>d = 1.12343214 
"{:.1f}".format(d)
&gt;&gt; 1.1
</code></pre>
<p>The second line formats d as a string representation of a float number rounded with 1 digit(comming from the <code>.1</code>) after the decimal point. </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use round or format </p>
<pre><code>for i in range(0,51):
    if i%10==0:
        z=int(i/10)   
    else:
        z= (i*0.1)
    print '%.1f' % round(z, 1)
    print format(z, '.1f')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change your last line into:</p>
<pre><code>print ( "%.1f" % (i*0.1) )
</code></pre>
<p>This will format your numbers showing only one decimal position.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(0,51):
    if i%10==0:
        z= round(i/10)
        print (z)
    else:
        i = i * 0.1
        print ("%.1f" % i)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
2
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3
3.1
3.2
3.3
3.4
3.5
3.6
3.7
3.8
3.9
4
4.1
4.2
4.3
4.4
4.5
4.6
4.7
4.8
4.9
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(0,51):
    if i%10==0:
        z=int(i/10)
        print (z)
    else:
        print ("%.1f" % (i*0.1))
</code></pre>
<p>you can use the <code>%.1f</code> notation. That will limit the number of decimals to be printed</p>
<p>OUTPUT</p>
<pre><code>0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
2
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
3
3.1
3.2
3.3
3.4
3.5
3.6
3.7
3.8
3.9
4
4.1
4.2
4.3
4.4
4.5
4.6
4.7
4.8
4.9
5
</code></pre>
</div>
<span class="comment-copy">Read about <code>floats</code>; then for your solution use <code>round()</code></span>
<span class="comment-copy">Or use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module</span>
<span class="comment-copy">Why the downvotes?</span>
<span class="comment-copy">Please note this code will not work in python 3</span>
