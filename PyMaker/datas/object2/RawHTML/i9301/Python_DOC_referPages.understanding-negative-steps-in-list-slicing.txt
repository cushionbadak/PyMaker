<div class="post-text" itemprop="text">
<p>I am trying to understand the following behavior and would welcome any references (especially to official docs) or comments.</p>
<p>Let's consider a list:</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3,4,5,6]
</code></pre>
<p>This works as expected</p>
<pre><code>&gt;&gt;&gt; x[-1:-4:-1] 
[6, 5, 4]
</code></pre>
<p>But I am surprised the following is empty:</p>
<pre><code>&gt;&gt;&gt;  x[0:-4:-1] 
[]
</code></pre>
<p>Consequently, I am surprised the following is not empty</p>
<pre><code>&gt;&gt;&gt; x[0:-len(x)-1:-1]
&gt; [1]
</code></pre>
<p>especially given that</p>
<pre><code>&gt;&gt;&gt; x[0:-len(x):-1] 
[]
</code></pre>
<p>and also that</p>
<pre><code>&gt;&gt;&gt; x[0:-len(x)-1] 
[]
</code></pre>
<p>is empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>The fact that</p>
<pre><code>&gt; x[-1:-4:-1] 
[6, 5, 4]
&gt; x[0:-4:-1] 
[]
</code></pre>
<p>should not surprise you! It is fairly obvious that you can slice a list from the last to the fourth-last element in backwards steps, but not from the first element.</p>
<p>In</p>
<pre><code>x[0:i:-1]
</code></pre>
<p>the <code>i</code> must be <code>&lt; -len(x)</code> in order to resolve to an index <code>&lt; 0</code> for the result to contain an element.
The syntax of slice is simple that way: </p>
<pre><code>x[start:end:step]
</code></pre>
<p>means, the slice starts at <code>start</code> (here: <code>0</code>) and ends <strong>before</strong> <code>end</code> (or the index referenced by any negative <code>end</code>). <code>-len(x)</code> resolves to <code>0</code>, ergo a slice starting at <code>0</code> and ending at <code>0</code> is of length <code>0</code>, contains no elements. <code>-len(x)-1</code>, however, will resolve to the actual <code>-1</code>, resulting in a slice of length <code>1</code> starting at <code>0</code>.</p>
<p>Leaving <code>end</code> empty in a backward slice is more intuitively understood:</p>
<pre><code>&gt; l[2::-1]
[3, 2, 1]
&gt; l[0::-1]
[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was pointed to the reference implementation (hattip to the Anonymous Benefactor) and found that it is fairly straightforward to understand the behavior from there. To be complete, IMHO this behavior is unintuitive, but it nevertheless is well defined and matches the reference implementation.</p>
<p>Two CPython files are relevant, namely the ones describing <a href="https://github.com/python/cpython/blob/master/Objects/listobject.c#L2401-L2452" rel="nofollow noreferrer">list_subscript</a> and <a href="https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L236-L276" rel="nofollow noreferrer">PySlice_AdjustIndices</a>. When retrieving a slice from a list as in this case, <strong>list_subscript</strong> is called. It calls <strong>PySlice_GetIndicesEx</strong>, which in turn calls <strong>PySlice_AdjustIndices</strong>.
Now <strong>PySlice_AdjustIndices</strong> contains simple if/then statements, which adjust the indices. In the end it returns the length of the slice. To our case, the lines</p>
<pre><code>if (*stop &lt; 0) {
    *stop += length;
    if (*stop &lt; 0) {
        *stop = (step &lt; 0) ? -1 : 0;
    }
}
</code></pre>
<p>are of particular relevance. After the adjustment, <code>x[0:-len(x)-1:-1]</code> becomes <code>x[0:-1:-1]</code> and the length 1 is returned. However, when <code>x[0:-1:-1]</code> is passed to adjust, it becomes <code>x[0:len(x)-1:-1]</code> of length 0. In other words, <code>f(x) != f(f(x))</code> in this case.</p>
<p>It is amusing to note that there is the following comment in <strong>PySlice_AdjustIndices</strong>:</p>
<pre><code>/* this is harder to get right than you might think */
</code></pre>
<p>Finally, note that the handing of the situation in question is not described in the python <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x[0:-4:-1]
</code></pre>
<p>go from 0 to 2 using -1 steps?</p>
</div>
<span class="comment-copy">Thanks for the answer, but I still don't get it. You write that -len(x)-1 resolves to -1. Could you please elaborate on how it resolves to -1 and why, since for me -len(x)-1 seems to equal -7. Is it related to the fact that x[0] == x[-len(x)]?</span>
<span class="comment-copy">Yeah. Any negative number <code>-i</code> used as an index or slice param on a sequence <code>seq</code> resolves to the actual index <code>len(seq) - i</code>. Thus for a <code>list</code> of length <code>6</code>, <code>l[0:-7:-1]</code> is a slice from <code>0</code> to <code>-1</code> (<code>6 - 7</code>) in backwards steps. For any backwards slice containing the first element (index <code>0</code>), you have to pick <code>end &lt; -len(seq)</code> or leave it empty: <code>seq[start::-1]</code>!</span>
