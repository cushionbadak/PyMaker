<div class="post-text" itemprop="text">
<p>I am running sequential code in a loop that is doing various computations, and occasionally printing out results that I monitor in the console. </p>
<p>What I'd like to do is be able to hit keyboard buttons, while the program is running, and then save and process that input (e.g. as a command to change some parameter) on the next start iteration of that loop. </p>
<p>Here's the structure of the code I'm running: </p>
<pre><code>for i in range(0, itrs):
    # ideally at the start of each loop: 
    # check to see if user pressed keybutton during prev loop itr, 
    # but don't wait / poll for it! 

    # userKeyInput = checkIfUserPressedKey()
    # param = modify(userKeyInput)

    doSequentialComputation(param)
</code></pre>
<p>Would the solution involve some notion of threading or interrupt? I could probably come up with a solution that involves file I/O, which wouldn't be terrible, but I was thinking maybe Python has something simpler that would work. </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want python to do two things at once (get user input and compute) at the same time the easiest thing to do is use separate threads (separate processes are harder and not necessary in this instance). The high level <code>threading</code> library is quite easy to get started with and I suggest a once-over of the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">docs</a>, but here's a quick example:</p>
<pre><code>from threading import Thread,Lock
import time

class globalVars():
    pass

G = globalVars() #empty object to pass around global state
G.lock = Lock() #not really necessary in this case, but useful none the less
G.value = 0
G.kill = False

def foo(n): #function doing intense computation
    for i in range(n):
        if G.kill:
            G.kill = False
            return
        time.sleep(n) #super intense computation
        with G.lock:
            G.value += i

t = Thread(target=foo, args=(10,))
t.start()

def askinput():
    #change to raw_input for python 2.7
    choice = input("1: get G.value\n2: get t.isAlive()\n3: kill thread\nelse: exit\ninput: ")
    if choice == "1":
        with G.lock:
            print(G.value)
    elif choice == "2":
        print(t.is_alive())
    elif choice == "3":
        G.kill = True
    else:
        return 0
    return 1

while askinput():
    pass</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a thread to run the <code>doSequentialComputation</code> function and pass <code>param</code> to it as a thread argument:</p>
<pre><code>import threading
t = threading.Thread(target=doSequentialComputation, args=(param,))
t.daemon = True
t.start()
</code></pre>
<p>Any modification to <code>param</code> in the main thread will be seen by the code in the thread. Be sure to protect access to <code>param</code> using a <code>threading.Lock</code>:</p>
<pre><code>param_lock = threading.Lock()
userKeyInput = checkIfUserPressedKey()
with param_lock:
    parm = modify(userKeyInput)
</code></pre>
<p>Putting it all together:</p>
<pre><code>import threading

class Parameter(object):
    pass

def doSequentialComputation(param, param_lock):
    itrs = 1000
    param_copy = None
    with param.lock:
        param_copy = param
    for i in range(0, itrs)
        with param.lock:
            if param.has_changed:
                param_copy = param
                param.has_changed = False
        compute(param_copy)

def main():
    param = Parameter()
    param.has_changed = False
    param.lock = threading.Lock()
    args=(param, param_lock)
    compute_thread = threading.Thread(target=doSequentialComputation, args=args)
    compute_thread.daemon = True
    compute_thread.start()
    while True:
        userKeyInput = checkIfUserPressedKey()
        with param.lock:
            param = modify(userKeyInput, param)
            param.has_changed = True
</code></pre>
<p>The <code>Parameter</code> class allows us to create an object to which we can add arbitrary attributes.</p>
</div>
<span class="comment-copy">you need a thread running in parallel</span>
<span class="comment-copy">look in internet for <code>getch()</code> - it is not standard command and may not work with some consoles.</span>
<span class="comment-copy">possible duplication: <a href="http://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user">Python read a single character from the user</a></span>
<span class="comment-copy">@furas I don't think it's about getting the character... I think he needs to know how to get it to work simultaneously.</span>
<span class="comment-copy">@Aaron <code>getch()</code> doesn't block code - it doesn't wait for key - so you can use it in loop and do other thing simultaneously</span>
