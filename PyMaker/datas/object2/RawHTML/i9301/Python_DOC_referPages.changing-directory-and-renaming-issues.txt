<div class="post-text" itemprop="text">
<p>What I'm hoping to accomplish is to scan all the files in the specified directory and remove the numbers that is contained in the name. The problem is I can't change the directory with the code that is below.</p>
<p>I'm currently in the Udacity Full Stack Nanodegree Program so if anyone can help me out that is also in the program that would be a plus.</p>
<p>Here is the code:</p>
<pre><code>import os

def rename_files():
    #(1) Get file names from a folder
    file_list = os.listdir("/Users/bill/Documents/web/LocalServer/prank")
    #print (file_list)
    saved_path = os.getcwd()
    print("Our current working directory is " + saved_path)
    os.chdir('/Users/bill/Documents/web/LocalServer/prank')
    print("Our current working directory is ", saved_path)
    #(2) For each file, rename filename
    for file_name in file_list:
        #print("Old Name - " + file_name)
        #print("New Name - " + file_name.translate("0123457689"))
        os.rename(file_name, file_name.translate("0123457689"))
    os.chdir(saved_path)
    print("Our current working directory is ", saved_path)

rename_files()
</code></pre>
<p>Here is the output I get:</p>
<pre class="lang-none prettyprint-override"><code>Our current working directory is /Users/bill/Documents/web/LocalServer
Our current working directory is  /Users/bill/Documents/web/LocalServer
Our current working directory is  /Users/bill/Documents/web/LocalServer
</code></pre>
<p><strong>Update 1:</strong></p>
<p>I've finally changed directories but I still can't rename files. (Ex: 68chicago.jpg to chicago.jpg)</p>
<p>Here is my current code:</p>
<pre><code>import os

def rename_files():
    #(1) Get file names from a folder 
    file_list = os.listdir("/Users/bill/Documents/web/LocalServer/prank")
    #print (file_list)
    saved_path = os.getcwd()
    print("Our current working directory is " + saved_path)
    os.chdir('/Users/bill/Documents/web/LocalServer/prank')
    new_path = os.getcwd()
    print("Our current working directory is ", new_path)
    #(2) For each file, rename filename
    for file_name in file_list:
        #print("Old Name - " + file_name)
        #print("New Name - " + file_name.translate("0123457689"))
        os.rename(file_name, file_name.translate("0123457689"))
    print("Our current working directory is ", new_path)

rename_files()
</code></pre>
<p>Here is my current output: </p>
<pre><code>Our current working directory is /Users/bill/Documents/web/LocalServer
Our current working directory is  /Users/bill/Documents/web/LocalServer/prank
Our current working directory is  /Users/bill/Documents/web/LocalServer/prank
</code></pre>
<p><strong>Update 2:</strong></p>
<p>I've finally solved the problem thanks to @Dan.</p>
<p>Here is his code:</p>
<pre><code>import os
def rename_files():
    #(1) Get file names from a folder 
    file_list = os.listdir("/Users/bill/Documents/web/LocalServer/prank")
    #print (file_list)
    saved_path = os.getcwd()
    print("Our current working directory is " + saved_path)
    os.chdir('/Users/bill/Documents/web/LocalServer/prank')
    new_path = os.getcwd()
    print("Our current working directory is ", new_path)
    #(2) For each file, rename filename
    for file_name in file_list:
        #print("Old Name - " + file_name)
        #print("New Name - " + file_name.translate("0123457689"))
        os.rename(file_name, ''.join([i for i in file_name if not i.isdigit()])) # This works on my machine
    os.chdir(saved_path)
    print("Our current working directory is ", saved_path)
rename_files()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you want to change to a dir and then change back to the first directory?  If that's the case you want something like this:</p>
<pre><code>import os

def rename_files():
    #(1) Get file names from a folder
    file_list = os.listdir("/Users/bill/Documents/web/LocalServer/prank")
    #print (file_list)
    saved_path = os.getcwd()
    print("Our current working directory is " + saved_path)
    os.chdir('/Users/bill/Documents/web/LocalServer/prank')
    new_path = os.getcwd()
    print("Our current working directory is ", new_path)
    #(2) For each file, rename filename
    for file_name in file_list:
        #print("Old Name - " + file_name)
        #print("New Name - " + file_name.translate("0123457689"))
        os.rename(file_name, ''.join([i for i in file_name if not i.isdigit()])) # This works on my machine

    os.chdir(saved_path)
    print("Our current working directory is ", saved_path)

rename_files()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you use <code>.translate()</code> incorrectly. It does not change the file names at all, so rename actually renames X into X:</p>
<pre><code>'68chicago.jpg'.translate('0123457689')
# '68chicago.jpg'
</code></pre>
<p>Try using list comprehension:</p>
<pre><code>def clean_name(name):
  return ''.join(x for x in name if not x.isdigit())
# 'chicago.jpg'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version that doesn't require changing the current directory.  Just specify the directory where files are to be renamed.  If you specify the full path to the old and new name changing the directory isn't required.</p>
<p>This also shows how to use <code>translate</code> properly.  <code>maketrans</code> takes one, two, or three parameters (see <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">docs</a>).  The three-parameter version takes two strings of equal length for 1:1 translating, plus a third parameter of characters to delete.  It returns a dictionary suitable to be used with <code>translate</code>.</p>
<pre><code>import os

def rename_files(directory):
    xlat = str.maketrans('','','0123457689')
    file_list = os.listdir(directory)
    for file_name in file_list:
        old_name = os.path.join(directory,file_name)
        new_name = os.path.join(directory,file_name.translate(xlat))
        os.rename(old_name,new_name)

rename_files('/Users/bill/Documents/web/LocalServer/prank')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The primary problem is your code isn't using the <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate()</code></a> method in the proper manner—your need to pass it a translation table for it to work.</p>
<p>This following works and avoids renaming files that don't need to be (i.e. doesn't rename them to their current name). This takes a little extra processing, but is probably faster that performing a useless OS-level operation.</p>
<p><strong>Note:</strong> A more robust solution would also need to handle any exceptions the <code>os.rename()</code> call might raise—which definitely could occur for a number of reasons. </p>
<p>For example: </p>
<ul>
<li>Perhaps a file with the translated name already exists.</li>
<li>All the characters of the original file get removed, so the new file name is the empty string.</li>
<li>File permissions or attribute prevent renaming.</li>
<li>etc.</li>
</ul>
<p>The code:</p>
<pre><code>from contextlib import contextmanager
import string
import os

@contextmanager
def temp_cd(path):
    """Temporarily change the current directory to path, yield, then restore it."""
    saved_path = os.getcwd()
    yield
    os.chdir(saved_path)

def rename_files(path):
    TRANS_TABLE = str.maketrans(dict.fromkeys(string.digits))
    with temp_cd(path):
        for file_name in os.listdir(path):
            if any(ch in file_name for ch in string.digits):
#                os.rename(file_name, file_name.translate(TRANS_TABLE))
                print(file_name, '-&gt;', file_name.translate(TRANS_TABLE))

rename_files("/Users/bill/Documents/web/LocalServer/prank")
</code></pre>
</div>
<span class="comment-copy">You print the same variable <code>saved_path</code> three times. Surely, its value does not change. But the cwd does.</span>
<span class="comment-copy">The reason I'm printing three times is to see if the path changes which does not even though I'm putting <code>os.chdir('/Users/bill/Documents/web/LocalServer/prank')</code>.    Can you please guide me on what I'm doing wrong?</span>
<span class="comment-copy"><code>saved_path = os.getcwd()</code> is the only assignment statement that affects the variable <code>saved_path</code>. The value of the variable does not change anymore. Changing the directory does not automatically change the value of this (or any other) variable.</span>
<span class="comment-copy">check what <code>print("The new current working directory is ", os.getcwd())</code> shows?</span>
<span class="comment-copy">Ahh I see I know what you mean. So, now I added this code <code>new_path = os.getcwd()</code> right after changing the directory and I do get the new path but I still can't change the filenames.</span>
<span class="comment-copy">Hey dan thanks for your input. I actually just want to go inside the specified directory. Select all the files in the folder and change their names by removing the numbers that is in front of them (Ex: 68chicago.jpg &gt; chicago.jpg).  I've succesfully changed directories but I can't rename the files and I'm not sure why after being able to change directories.</span>
<span class="comment-copy">I just ran this code on my machine except I used: os.rename(file_name, "blah") and it worked as expected so something else must be going on here.  I've never used translate before, what are you expecting that to do?</span>
<span class="comment-copy">Well originally the instructor had his code as <code>os.rename(file_name, file_name.translate(None ,"0123457689"))</code> but I get an error of <code>os.rename(file_name, file_name.translate(None, "0123457689")) TypeError: translate() takes exactly one argument (2 given)</code></span>
<span class="comment-copy">Yea, I can't get the translation call to work.  I would use something like new_filename = ''.join([i for i in file_name if not i.isdigit()]).  I've edited my code snippet above it should work now</span>
<span class="comment-copy">Thank you so much!!! It worked. I will have to evaluate the code to make it stick into my head but thank you so much!!</span>
<span class="comment-copy">Hmm strange. The udacity lesson that I've watched used that function to rename the filename but of course the guy was using python 2.7.x and I'm using 3.6.0.  What is the proper way of renaming a filename using the latest python version 3.6.x?</span>
<span class="comment-copy">Hmm, I'm having some trouble using this method as I have to rename about 55 files that are in the folder.</span>
<span class="comment-copy">So what? Create a function that takes a file name and returns its name with all digits removed.</span>
<span class="comment-copy">Yeah, I'm currently working on a way to use the provided code but I'm trying to implement a loop that scans all of the files and renames it on how I originally have it instead of just calling the function for each file. Thanks for the code though!</span>
<span class="comment-copy">Wow, I really like this alternative solution because it is much more short and looks more elegant looking. Thanks @Mark Tolonen!</span>
<span class="comment-copy">Hey @martineau thank you for taking the time for writing down a solution. It's a unique approach on solving the issue and it does solve my problem. Thank you!</span>
