<div class="post-text" itemprop="text">
<p>I would like to define an Integer class in python, where an Integer (called y) can be related to another Integer (called x) and get updated automatically when this Integer x changes. More concretely I would like to have the following behavior</p>
<pre><code>&gt;&gt;&gt; x = Integer(7)
&gt;&gt;&gt; y = x + 2
&gt;&gt;&gt; print y
9
&gt;&gt;&gt; x.set(9)
&gt;&gt;&gt; print y
11
&gt;&gt;&gt; z = x + y
&gt;&gt;&gt; y.set(10)
&gt;&gt;&gt; print z
19
</code></pre>
<p>I realize that one can do this in sympy but I am interested in implementing this myself. I would be grateful if someone can please point out how one would go about this in the simplest manner? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've not used Sympy before but here's my attempt:</p>
<pre><code>class Integer(object):
    def __init__(self, value_or_callback):
        if isinstance(value_or_callback, int):
            self._value_callback = lambda: value_or_callback
        else:
            self._value_callback = value_or_callback

    @property
    def value(self):
        return self._value_callback()

    def set(self, new_value):
        self._value_callback = lambda: new_value

    def __add__(self, other):
        if isinstance(other, int):
            return Integer(lambda: self.value + other)
        elif isinstance(other, Integer):
            return Integer(lambda: self.value + other.value)
        else:
            raise TypeError(other)

    def __radd__(self, other):
        return self.__add__(other)

    def __repr__(self):
        return str(self.value)


if __name__ == '__main__':
    x = Integer(7)
    y = x + 2
    print(y)

    x.set(9)
    print(y)

    z = x + y
    y.set(10)
    print(z)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>9
11
19
</code></pre>
</div>
<span class="comment-copy">...do you have a question? To get that behaviour you have to at least provide the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">data model</a> hooks, in this case <code>__add__</code>. For "dependent" objects they would have to keep references to each other; you're aware of sympy, why not look at how they implement it?</span>
<span class="comment-copy">Define a class and start adding useful methods. To be even remotely useful you would need to do things like implement <code>__add__</code> etc.</span>
<span class="comment-copy">Thanks for the clear answer. This works brilliantly and I learnt something new!</span>
