<div class="post-text" itemprop="text">
<p>Say we have a number of elements <code>E</code> and a number of sets <code>S</code>.</p>
<p>We need to assign elements to sets so that:</p>
<ol>
<li>All sets roughly contain the same number of elements (minimum
difference in set size between the smallest and largest set)</li>
<li>The number of elements per set should be as small as possible.</li>
<li>Each element needs to be assigned to <em>at least</em> a minimum % of sets of the total. This % is specified for each element (this
implies that elements are course be assigned to multiple sets
accordingly)</li>
</ol>
<p>Note that (1) and (2) are problem objectives, and in some instances there is a tradeoff between them. I'm effectively looking for a mathematical formulation / solution that parameterizes this tradeoff. Meanwhile (3) is just a problem constraint. </p>
<p>How do we find an optimal assignment? Does this problem have a name in the literature? In case it matters, I'm specifically looking for a solution in Python.</p>
<hr/>
<p>As an example, say we have 3 sets and 10 elements, each of them specifying the  <em>min.</em> fraction of sets as follows:</p>
<pre><code>0     97.844356
1     48.006223
2     99.772135
3     16.899074
4      0.111023
5      1.028894
6      5.315590
7    100.000000
8     99.838698
9     93.323315
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just rotate infinitely over the sets in order to determine the next set to assign to. Then for each element calculate how many sets it should be assigned to and then do the assignment accordingly:</p>
<pre><code>from itertools import cycle
from math import ceil

elems = [
    [0, 97.844356],
    [1, 48.006223],
    [2, 99.772135],
    [3, 16.899074],
    [4, 0.111023],
    [5, 1.028894],
    [6, 5.315590],
    [7, 100.000000],
    [8, 99.838698],
    [9, 93.323315]
]

def assign(elements, n):
    sets = [[] for _ in range(n)]
    gen = (e for e, p in elements for _ in range(ceil(p*n/100)))

    for s, e in zip(cycle(sets), gen):
        s.append(e)

    return sets

print(assign(elems, 3))
</code></pre>
<p>Output:</p>
<pre><code>[[0, 1, 2, 4, 7, 8, 9], [0, 1, 2, 5, 7, 8, 9], [0, 2, 3, 6, 7, 8, 9]]
</code></pre>
<p>In above <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>cycle</code></a> is used to iterate infinitely over the target sets. <code>gen</code> is a generator that returns the minimum amount of elements to add based on the probabilities:</p>
<pre><code>&gt;&gt;&gt; n = 3
&gt;&gt;&gt; gen = (e for e, p in elems for _ in range(ceil(p*n/100)))
&gt;&gt;&gt; list(gen)
[0, 0, 0, 1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]
</code></pre>
<p>Finally <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is used to generate <code>(target set, element)</code> tuples which are then assigned within a loop.</p>
</div>
<span class="comment-copy">When there are only 3 sets, i.e. <code>S=3</code>, specifying min fraction as <code>0.111023</code> or <code>1.028894</code> does not make sense, as it is strictly equivalent to 33.</span>
<span class="comment-copy">Thanks @DmitriChubarov, that's why they are min. fractions, but I understand your point.</span>
<span class="comment-copy">The objectives 1(minimal difference) and 3(minimal number of elements) are contradictory: suppose we have a feasible solution that satisfies the constraint 2 (minimal % of sets) that has #(set1) = #(set2) &gt; #(set3). Should we add an element to set3 to improve objective 1 or leave as it is to preserve objective 3?</span>
<span class="comment-copy">Yes @DmitriChubarov Technically the problem admits a  parameterization of this tradeoff (a relative weighting between both objectives), as with many multi-objective problems in mathematical optimization (i.e. with penalties for each objective). I'll clarify the post.</span>
<span class="comment-copy">Thanks @niemmi. This is phenomenal. Do you happen to know if there is a name for this problem in the literature?</span>
<span class="comment-copy">@AmelioVazquez-Reina I have no idea what the name could be, just came up with the solution when I read the problem.</span>
