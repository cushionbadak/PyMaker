<div class="post-text" itemprop="text">
<p>I have a python script with this list:</p>
<pre><code>blocks = [
  "item-1",
  "item-2",
  "item-3.0;item-3.1;item-3.2"
]
</code></pre>
<p>I have tried this:</p>
<pre><code>for (i, block) in enumerate(blocks):
  if ";" in block:
    [blocks.insert(i, c) for c in block.split(";")]
  else:
    blocks.insert(i, block)
</code></pre>
<p>To get this:</p>
<pre><code>blocks = [
  "item-1",
  "item-2",
  "item-3.0",
  "item-3.1",
  "item-3.2"
]
</code></pre>
<p>Unfortunately my code keeps overwriting the the elements in the list, and I'm left with this:</p>
<pre><code>blocks = [
  "item-1",
  "item-2",
  "item-3.2"
]
</code></pre>
<p>How can I modify the script to allow me to split a string inside of a list and then insert the new sub-strings into the position of the original string without overwriting the other elements in the list?</p>
</div>
<div class="post-text" itemprop="text">
<p>It would probably be easier to make a new list:</p>
<pre><code>blocks = [
  "item-1",
  "item-2",
  "item-3.0;item-3.1;item-3.2"
]

new_blocks = []

for block in blocks:
    for c in block.split(";"):
        new_blocks.append(c)

 # new_blocks = ['item-1', 'item-2', 'item-3.0', 'item-3.1', 'item-3.2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>split will return a list, you don't need to check if ';' is in the block:</p>
<pre><code>In [34]: [ii.split(';') for ii in blocks]
Out[34]: [['item-1'], ['item-2'], ['item-3.0', 'item-3.1', 'item-3.2']]
</code></pre>
<p>So now the only thing you need is to add all the list together, with the function sum. </p>
<pre><code>sum( [ii.split(';') for ii in blocks] ,  [])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a new list to hold the results instead of modifying the original list while looping through it:</p>
<pre><code>result = []
for block in blocks:
    result.extend(block.split(";"))

result
# ['item-1', 'item-2', 'item-3.0', 'item-3.1', 'item-3.2']
</code></pre>
<hr/>
<p>Inspired by @Jblasco's answer, you can also use <code>chain</code>:</p>
<pre><code>from itertools import chain
list(chain.from_iterable(block.split(';') for block in blocks))

# ['item-1', 'item-2', 'item-3.0', 'item-3.1', 'item-3.2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may achieve this via using <em>nested list comprehension</em> expression:</p>
<pre><code>blocks = [
   "item-1",
   "item-2",
   "item-3.0;item-3.1;item-3.2"
]

my_list = [a for b in blocks for a in b.split(';')]
</code></pre>
<p>where content hold by <code>my_list</code> will be:</p>
<pre><code>['item-1', 'item-2', 'item-3.0', 'item-3.1', 'item-3.2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in place editing of lists while iterating over it is not a good idea.</p>
<p>As the other answers say, make a new list. If you're into list comprehensions (and make your head explode a little), try this:</p>
<pre><code>blocks = [
  "item-1",
  "item-2",
  "item-3.0;item-3.1;item-3.2"
]
[substr for block in blocks for substr in block.split(';')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>';'.join(blocks).split(';')
</code></pre>
<p>out:</p>
<pre><code>['item-1', 'item-2', 'item-3.0', 'item-3.1', 'item-3.2']
</code></pre>
<p>Just <code>join</code> the list together and <code>split</code> again.</p>
<p>And in the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">Document</a>, <code>sum</code> a list is not recommended:</p>
<blockquote>
<p>For some use cases, there are good alternatives to sum(). The
  preferred, fast way to concatenate a sequence of strings is by calling
  ''.join(sequence). To add floating point values with extended
  precision, see math.fsum(). <strong>To concatenate a series of iterables,
  consider using <code>itertools.chain()</code>.</strong></p>
</blockquote>
</div>
<span class="comment-copy">Why don't have a new list, append them all in a new list.</span>
<span class="comment-copy">you don't even need <code>i</code> nor <code>enumerate</code> anymore here.</span>
