<div class="post-text" itemprop="text">
<p>One of the things that has confused me when studying best software engineering practices is how to handle methods in classes that don't alter or otherwise interact with the state.</p>
<p>In <a href="http://loup-vaillant.fr/articles/deaths-of-oop" rel="nofollow noreferrer">this article</a> I like how the author discusses the separation of data and logic. But in trying to apply this in practice, I have cases where I have an odd-out function outside the class that doesn't change the state of the object but isn't really relevant outside the object.</p>
<p>For example:</p>
<pre><code>def inspect_color(color):
    if color == 'brown':
        return 'Similar to chocolate'

class Dog(object):

   def __init__(self, color):
       self.color = color

   def play_in_mud(self):
       self.color = 'brown'
       results = inspect_color(self.color)
</code></pre>
<p>vs.</p>
<pre><code>class Dog(object):

   def __init__(self, color):
       self.color = color

   def play_in_mud(self):
       self.color = 'brown'
       results = self.inspect_color()

    def inspect_color(self):
        if self.color == 'brown':
            return 'Similar to chocolate'
</code></pre>
<p>Is there a general software engineering principle or best practice (from any reasonable paradigm) that suggests which of these approaches should be followed? For multiple reasons my intuition tells me that the top one is better, except doing this: <code>inspect_color(self.color)</code> bothers me, so I am unsure. I did some reading but didn't find a clear answer on best practices for cases like these.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is what a <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">staticmethod</a> is good for.</p>
<blockquote>
<p>A static method does not receive an implicit first argument.</p>
</blockquote>
<pre><code>class Dog(object):

    def __init__(self, color):
        self.color = color

    def play_in_mud(self):
        self.color = 'brown'
        results = self.inspect_color(self.color)
        return results

    @staticmethod
    def inspect_color(color):
        if color == 'brown':
            return 'Similar to chocolate'
</code></pre>
<p>You can use it just like a function:</p>
<pre><code>&gt;&gt;&gt; Dog.inspect_color('brown')
'Similar to chocolate'
</code></pre>
<p>and in your method:</p>
<pre><code>&gt;&gt;&gt; dog = Dog('red')
&gt;&gt;&gt; dog.play_in_mud()
'Similar to chocolate'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't really a full answer, but I don't quite have a high enough rep to just make a comment.  I'm no expert on OOP best practices, but my gut feeling is that the colour analysis function would be best implemented as an interface, because that way the specifics of the implementation can be left up to the given class, but there can be some degree of standardisation across classes.</p>
<p>Turns out Python doesn't really do interfaces though apparently (<a href="https://stackoverflow.com/questions/2124190/how-do-i-implement-interfaces-in-python">according to this</a>).  Others who know better about the <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" rel="nofollow noreferrer">SOLID principles</a> could advise better than I.</p>
</div>
<span class="comment-copy">This is probably off-topic because it is based too much on opinion, but for what it's worth, it is my opinion that the first one is better. Class bloat is baaaad.</span>
<span class="comment-copy">Thanks for the thoughts. Any suggestions on a better place for the question? I was hoping there was a best-practice that was less opinion based, but good point.</span>
<span class="comment-copy">Why does this bother you? — I used to think the same, but the reason was just irrational conditioning that “good” OOP meant always writing <code>obj.method()</code>. And that’s simply not true. There’s no objective reason it’s bad, other than habit (and, to be honest, the fact that it creates a non-uniform syntax for calling functions on things; but that is true in Python anyway, so it doesn’t apply here).</span>
<span class="comment-copy">@jstaker7 Can you change the question so that's it's not "which is better?" You provide a specific example but as another commenter said, this is totally opinion based.</span>
<span class="comment-copy">Sure thing. Just made changes to make it more specific and less opinion based.</span>
<span class="comment-copy">I don’t think (or rather, I don’t agree) that this is a good use for a static method. The method has nothing to do with <code>Dog</code>; only with <code>color</code>. It simply doesn’t belong in <code>Dog</code>. It <i>may</i> belong in the same module but certainly not in the class.</span>
<span class="comment-copy">Maybe this due to the example but the alternative the OP has are either an external function or an instance method with <code>self</code> as first argument. Putting both together would make a static method, I think.</span>
<span class="comment-copy">...or just use an external function.</span>
<span class="comment-copy">You're right, OP's example is contrived and <code>inspect_colour</code> would make sense as a function defined elsewhere, so as to avoid violation of the Single Responsibility Principle (<b>S</b>OLID). I use static methods in Python just like I'd use them in Java or C# - to implement functionality specific to a class that does not need to reference the instance (i.e. <code>self</code>).</span>
