<div class="post-text" itemprop="text">
<p>I am using PyCharm (Python 3) to write a Python function which accepts a dictionary as an argument with <code>attachment={}</code>.</p>
<pre><code>def put_object(self, parent_object, connection_name, **data):
    ...

def put_wall_post(self, message, attachment={}, profile_id="me"):
    return self.put_object(profile_id, "feed", message=message, **attachment)
</code></pre>
<p>In the IDE, <code>attachment={}</code> is colored yellow. Moving the mouse over it shows a warning.</p>
<blockquote>
<p><strong>Default arguments value is mutable</strong></p>
<p>This inspection detects when a mutable value as list or dictionary is
  detected in a default value for an argument.</p>
<p>Default argument values are evaluated only once at function definition
  time, which means that modifying the default value of the argument
  will affect all subsequent calls of the function.</p>
</blockquote>
<p>What does this mean and how can I resolve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't alter the "mutable default argument" or pass it anywhere where it could be altered just ignore the message, because there is nothing to be "fixed".</p>
<p>In your case you <em>only</em> unpack (which does an implicit copy) the "mutable default argument" - so you're safe.</p>
<p>If you want to "remove that warning message" you could use <code>None</code> as default and set it to <code>{}</code> when it's <code>None</code>:</p>
<pre><code>def put_wall_post(self,message,attachment=None,profile_id="me"):
    if attachment is None:
        attachment = {}

    return self.put_object(profile_id,"feed",message = message,**attachment)
</code></pre>
<hr/>
<p>Just to explain the "what it means": Some types in Python are immutable (<code>int</code>, <code>str</code>, ...) others are mutable (like <code>dict</code>, <code>set</code>, <code>list</code>, ...). If you want to change immutable objects another object is created - but if you change mutable objects the object remains the same but it's contents are changed.</p>
<p>The tricky part is that class variables and default arguments are created when the function is loaded (and only once), that means that any changes to a "mutable default argument" or "mutable class variable" are permanent:</p>
<pre><code>def func(key, value, a={}):
    a[key] = value
    return a

&gt;&gt;&gt; print(func('a', 10))  # that's expected
{'a': 10}
&gt;&gt;&gt; print(func('b', 20))  # that could be unexpected
{'b': 20, 'a': 10}
</code></pre>
<p>PyCharm probably shows this Warning because it's easy to get it wrong by accident (see for example <a href="https://stackoverflow.com/q/1132941/5393381">“Least Astonishment” and the Mutable Default Argument</a> and all linked questions). However, if you did it on purpose (<a href="https://stackoverflow.com/questions/9158294/good-uses-for-mutable-function-argument-default-values">Good uses for mutable function argument default values?</a>) the Warning could be annoying.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can replace mutable default arguments with <code>None</code>. Then check inside the function and assign the default:</p>
<pre><code>def put_wall_post(self, message, attachment=None, profile_id="me"):
    attachment = attachment if attachment else {}

    return self.put_object(profile_id, "feed", message=message, **attachment)
</code></pre>
<p>This works because <code>None</code> evaluates to <code>False</code> so we then assign an empty dictionary.</p>
<p>In general you may want to explicitly check for <code>None</code> as other values could also evaluate to <code>False</code>, e.g. <code>0</code>, <code>''</code>, <code>set()</code>, <code>[]</code>, etc, are all <code>False-y</code>. If your default isn't <code>0</code> and is <code>5</code> for example, then you wouldn't want to stomp on <code>0</code> being passed as a valid parameter:</p>
<pre><code>def function(param=None):
    param = 5 if param is None else param
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to remove the warning is to change {} to dict().  This will retain the existing method logic, requiring only a change in the parameter defaults.  As follows:</p>
<pre><code>def put_wall_post(self, message, attachment=dict(), profile_id="me"):
    return self.put_object(profile_id, "feed", message=message, **attachment)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To rephrase the warning: every call to this function, if it uses the default, will use the same value.  So long as you never change that value, the fact that it is mutable won't matter.  But if you <em>do</em> change it, then subsequent calls will start with the <em>modified</em> value, which is probably not what you want.</p>
<p>One solution to avoid this issue would be to have the default be a immutable value, and set the parameter to <code>{}</code> if that default is used:</p>
<pre><code>def put_wall_post(self,message,attachment=None,profile_id="me"):
    if attachment==None:
        attachment={}
    return self.put_object(profile_id,"feed",message = message,**attachment)
</code></pre>
</div>
<span class="comment-copy">Do you want it to not be mutable?</span>
<span class="comment-copy">@juanpa.arrivillaga the user is (poorly) asking about PyCharm's inspection giving him/her a compiler warning s/he was not expecting.</span>
<span class="comment-copy">@Vincenzzzochi yes, but what about it? Asking what does it mean? A non-mutable alternative? How do idiomatically have mutable default arguments that don't get retained on subsequent calls? There isn't enough detail in the question.</span>
<span class="comment-copy">@juanpa.arrivillaga The user's question was "how do I make this warning go away?" We both know that there could potentially be a bug shown in his/her code, but the question asked was obvious, and you were trying to pry.</span>
<span class="comment-copy">@Vincenzzzochi you think I'm "prying"? how is asking for a well-formed question "prying"? If someone doesn't want questions about their question, they shouldn't ask questions. In any event, it is best for the OP to clarify what their question is exactly rather than making assumptions, even though in this case I believe you have a <i>reasonable</i> interpretation.</span>
<span class="comment-copy">Would this affect variables defined in <code>__init__</code> upon class creation? For example: <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element" rel="nofollow noreferrer"><code>ElementTree.Element(tag, attrib={}, **extra)</code></a></span>
<span class="comment-copy">@StevenVascellaro Yes. However the first thing they do is <a href="https://github.com/python/cpython/blob/v3.6.4/Lib/xml/etree/ElementTree.py#L171" rel="nofollow noreferrer"><code>copy</code>ing it</a>. That way they work with a copy and don't risk mutating the default argument.</span>
<span class="comment-copy">Or shorter type <code>attachment = attachment or {}</code> instead of <code>if attachment is None: attachment = {}</code></span>
<span class="comment-copy">@GeorgiiOleinikov There are some subtle differences between those two, for example the <code>is None</code> approach would not silently convert false-y values to empty dictionaries (e.g. if someone passed in <code>False</code>). I would also go with the <code>or {}</code> approach but <b>also</b> add some documentation or type-hints so that it's obvious what should be passed in. Note that I also proposed that approach on the other answer (<a href="https://stackoverflow.com/questions/41686829/warning-about-mutable-default-argument-in-pycharm/41686973?noredirect=1#comment70571249_41686977" title="warning about mutable default argument in pycharm">stackoverflow.com/questions/41686829/…</a>) - but there both are actually equivalent.</span>
<span class="comment-copy">or even shorter <code>attachment = attachment or {}</code></span>
<span class="comment-copy">@MSeifert I never found that short circuit very readable, and I wouldn't expect others to understand my code if I used it. I think coming from a C++ background I expect Boolean expressions to produce true/false. Maybe I need to train myself to not be repulsed by it (c:</span>
<span class="comment-copy">Both versions have a problem. If the parameter is an empty string (or an empty list) the function will replace it with an empty dictionary. The might or might not be intended.</span>
<span class="comment-copy">@Matthias the function expects a dictionary. If you're passing it something else you have bigger problems.</span>
<span class="comment-copy">@PeterWood: Depending on the function I might be able to pass something else (keyword: <i>duck typing</i>). But you're right: in this special context the usage of a string or a list would be an error.</span>
