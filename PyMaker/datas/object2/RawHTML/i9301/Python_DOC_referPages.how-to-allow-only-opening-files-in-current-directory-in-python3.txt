<div class="post-text" itemprop="text">
<p>I am writing a simple file server in Python. The filename is provided by the client and should be considered untrusted. How to verify that it corresponds to a file inside the current directory (within it or any of its subdirectories)? Will something like:</p>
<pre><code>pwd=os.getcwd()
if os.path.commonpath((pwd,os.path.abspath(filename))) == pwd:
    open(filename,'rb')
</code></pre>
<p>suffice?</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert the filename to a canonical path using <a href="https://docs.python.org/3/library/os.path.html#os.path.realpath" rel="nofollow noreferrer"><code>os.path.realpath</code></a>, get the directory portion, and see if the current directory (in canonical form) is a prefix of that:</p>
<pre><code>import os, os.path

def in_cwd(fname):
    path = os.path.dirname(os.path.realpath(fname))
    return path.startswith(os.getcwd())
</code></pre>
<p>By converting <code>fname</code> to a canonical path we handle symbolic links and paths containing <code>../</code>. </p>
<hr/>
<p><strong>Update</strong></p>
<p>Unfortunately, the above code has a little problem. For example, </p>
<pre><code>'/a/b/cd'.startswith('/a/b/c')
</code></pre>
<p>returns <code>True</code>, but we definitely <em>don't</em> want that behaviour here! Fortunately, there's an easy fix: we just need to append <code>os.sep</code> to the paths before performing the prefix test. The new version also handles any OS pathname case-insensitivity issues via <a href="https://docs.python.org/3/library/os.path.html#os.path.normcase" rel="nofollow noreferrer"><code>os.path.normcase</code></a>.</p>
<pre><code>import os, os.path

def clean_dirname(dname):
    dname = os.path.normcase(dname)
    return os.path.join(dname, '')

def in_cwd(fname):
    cwd = clean_dirname(os.getcwd())
    path = os.path.dirname(os.path.realpath(fname))
    path = clean_dirname(path)
    return path.startswith(cwd)
</code></pre>
<p>Thanks to DSM for pointing out the flaw in the previous code.</p>
<hr/>
<p>Here's a version that's a little more efficient. It uses <a href="https://docs.python.org/3/library/os.path.html#os.path.commonpath" rel="nofollow noreferrer"><code>os.path.commonpath</code></a>, which is more robust than appending <code>os.sep</code> and doing a string prefix test.</p>
<pre><code>def in_cwd(fname):
    cwd = os.path.normcase(os.getcwd())
    path = os.path.normcase(os.path.dirname(os.path.realpath(fname)))
    return os.path.commonpath((path, cwd)) == cwd
</code></pre>
</div>
<span class="comment-copy">what about <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve" rel="nofollow noreferrer">docs.python.org/3/library/pathlib.html#pathlib.Path.resolve</a> ?</span>
<span class="comment-copy">This is a pretty good solution. I tried running it with my test cases and it seems to fail for the non-existent file case, though (e.g. <code>foo.py</code>). As in it returns true instead of false. Edit: but that may not matter. OP seems happy to let <code>open</code> potentially receive (and throw exceptions) when receiving non-existent files. So +1.</span>
<span class="comment-copy">@Tagc I've just updated my answer, so I need to update my previous comment too. :) If <code>in_cwd</code> returns <code>True</code> you can then test if the file actually exists if you want to serve the file. There's actually a benefit in having <code>in_cwd</code> returning <code>True</code> on valid paths for files that don't yet exist: you can use it to validate a proposed path for a file that's being saved to the cwd.</span>
<span class="comment-copy">This also has the problem that if <code>fname</code> is the current directory name, this succeeds, when it should fail. ie <code>in_cwd("cwd_folder") -&gt; True.</code> Considering the input is untrusted, we should not give details of internal folder names.</span>
<span class="comment-copy">@TheMatt Fair point, and it also returns True if <code>fname</code> is a subdirectory in the current directory tree. But we can use <code>isdir</code> or <code>isfile</code> from <code>os.path</code> to handle those cases.</span>
