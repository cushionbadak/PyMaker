<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2960772/how-do-i-put-a-variable-inside-a-string">How do I put a variable inside a string?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I have make a set of names in this form: <code>'s1', 's2', ..., 's100'</code>. I thought I can do that easily via looping:</p>
<pre><code>for i in range(100):
    print ('s'.format(i+1))
</code></pre>
<p><code>format</code> here does not append the numbers. I only get <code>ss..ss</code> without the numbers being concatenated in single quote. I know how to do this in Java but I am not that much expert in Python. Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to have a <em>placeholder</em> in the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">format string</a>:</p>
<blockquote>
<p>Perform a string formatting operation. The string on which this method
  is called can contain literal text or <em>replacement fields delimited by
  braces {}</em>. Each replacement field contains either the numeric index of
  a positional argument, or the name of a keyword argument.</p>
</blockquote>
<pre><code>for i in range(100):
    print ('s{0}'.format(i+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use 3.6, then you can take advantage of the new 'Literal String Interpolation', and do the following:</p>
<pre><code>for i in range(100):
    print(f's{i + 1}')
</code></pre>
<p>For more details on this feature, check out <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498 -- Literal String Interpolation</a></p>
</div>
<span class="comment-copy">I sense an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>. Why do you want to do this?</span>
<span class="comment-copy">Also, couldn't you have read the documentation for the function you're trying to use?</span>
<span class="comment-copy">or just use concatenation <code>print 's'+str(i)</code>  -- python2.x</span>
<span class="comment-copy">This works GREAT. Thank you so much</span>
<span class="comment-copy">Unfortunately, I have to use Python 2x since my simulation supports it. Is there a workaround of that?</span>
<span class="comment-copy">in that case, just do what @alecxe suggested.</span>
