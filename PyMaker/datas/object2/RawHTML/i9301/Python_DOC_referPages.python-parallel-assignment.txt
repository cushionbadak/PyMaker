<div class="post-text" itemprop="text">
<p>Trying to figure out how this parallel assignment works. The full code can be found <a href="https://raw.githubusercontent.com/erdman/alt-python3-halite-starter/150142612fda57219a64e4632208ddaac16ce60f/ProductionBot.py" rel="nofollow noreferrer">here</a>. (Raw Github python file). Here is what I'm having issues with:</p>
<pre><code>def assign_move(square):

    # Parallel Assignment
    target, direction = max(
        ((neighbor, direction) for direction, neighbor in enumerate(game_map.neighbors(square))
                                if neighbor.owner != myID),
                                default = (None, None),
                                key = lambda t: t[0].production)
</code></pre>
<p>I'll break it down as much as I know, but I'm probably doing something wrong.</p>
<pre><code>target, direction = max(iterable, default, key)
</code></pre>
<p>Are we assigning target, and direction to the same thing? I thought parallel assignment was something like <code>x, y = 5, 6</code></p>
<p>Now if we look at the <code>iterable</code>, it is the following:</p>
<pre><code>iterable = ((neighbor, direction) for direction, neighbor in enumerate(game_map.neighbors(square)) if neighbor.owner != myID)
</code></pre>
<p>How can we have <code>(neighbor , direction)</code> before the for loop? What does the <code>if</code> statement here do? Do we not need anything below the if block to run if <code>neighbor.owner != myID</code>?</p>
<p>If the iterator is empty, we will return <code>None, None</code> as seen below?</p>
<pre><code>default = (None, None),
</code></pre>
<p>And this is the function we are using to determine the max?</p>
<pre><code>key = lambda t: t[0].production)
</code></pre>
<p>Background if needed:
This is code for a bot to be played in the game <a href="https://halite.io/" rel="nofollow noreferrer">Halite</a>. It is a prebuilt bot found in this <a href="https://github.com/erdman/alt-python3-halite-starter" rel="nofollow noreferrer">GitHub repo</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>max</code> function here return the maximum <code>tuple</code> of <code>(direction , neighbors)</code> with respect to <code>neighbor.production</code> ( as we understand this from <code>key</code>) and neighbors are allowed to participate in this iterate if <code>neighbor.owner != myID</code> happens , and if iterator was empty <code>default = (None, None)</code> will be <code>target</code> and <code>directions</code> values , so <code>target</code> is the <code>neighbor</code> with most <code>production</code> at the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Whenever there are multiple variables on the left of an assignment, the right side is required to be a sequence with exactly that many elements, which are unpacked into the individual variables.</p>
<p>Sometimes, the right side explicitly builds that sequence: for example, <code>x, y = 5, 6</code> is technically the construction of the tuple <code>(5, 6)</code>, followed by its unpacking.  (Actually, since Python 2.6 the tuple construction gets eliminated here, but that's an internal optimization that should never be relevant to you.)</p>
<p>However, ANY source of a sequence of the correct length is valid on the right side.  In your <code>target, direction = max(...)</code> example, <code>max</code> is choosing an element from a list of 2-element tuples <code>(neighbor, direction)</code>.  The "largest" one of these (as defined by the <strong>key=</strong> parameter) is returned and unpacked into target and direction.</p>
</div>
<span class="comment-copy">That's not a <code>for</code> loop with an <code>if</code> statement; it's a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension with a filter</a></span>
<span class="comment-copy">Ahh perfect! I had no idea what to even search for for that part.</span>
<span class="comment-copy">@Hamms: Genex, not LC. No square brackets.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams would it be <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expression</a> then?</span>
<span class="comment-copy">@Loaf: Correct.</span>
<span class="comment-copy">if it was <code>t[1].production</code> it would be <code>direction.production</code>?</span>
<span class="comment-copy">Yeah , assume <code>t</code> here is your <code>tuple</code> so first element is <code>neighbor</code> and second is <code>direction</code> , and it wont return an error if <code>direction</code> class had a <code>production</code> member.</span>
<span class="comment-copy">Perfect! Thanks for the explanation. That makes a lot more sense along with realize that <code>for</code> and <code>if</code> isnt' a for loop or an if/else statement.</span>
<span class="comment-copy">Thanks! I didn't initially think about <code>max(...)</code> returning anything but a single value.</span>
