<div class="post-text" itemprop="text">
<p>I have a list of numbers in a column like </p>
<pre><code>10,12,13
</code></pre>
<p>I wanted to write a python program which can add these numbers in the following way: <code>10+12=22, 10+13=23, 12+13=25</code>
Can anybody give any suggestion how to do it.
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>combinations</code> from <code>itertools</code> this can be done rather trivially. For a list <code>a</code>, you can get all of the sums of <code>n</code> elements like this</p>
<pre><code>from itertools import combinations

def sum_of_size(a, n):
    return map(sum, combinations(a, n))
</code></pre>
<p><strong>Edit</strong>: If you are using python 3, then use this instead</p>
<pre><code>from itertools import combinations

def sum_of_size(a, n):
    return list(map(sum, combinations(a, n)))
</code></pre>
<p>With your example</p>
<pre><code>sum_of_size([10, 12, 13], 2)
# =&gt; [22, 23, 25]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you didnt want to use itertools for some reason you could achieve this, this way. I have assumed what you want to do by the example result you have given:-</p>
<pre><code>ColumnOfNumbers = [10,12,13]

def ListAddition(ColumnOfNumbers):

    #check if the list is longer than one item
    if len(ColumnOfNumbers)&lt;=1:
        return "List is too short"

    #Define an output list to append results to as we iterate
    OutputList = []
    #By removing a number from the list as we interate we stop double results
    StartNumber = 0

    #Create a function to iterate - this is one less than the length of the list as we need pairs.
    for x in range(len(ColumnOfNumbers)-1):
        #Remove the first number from the list and store this number
        StartNumber = ColumnOfNumbers[0]
        ColumnOfNumbers.pop(0)

        #Iterate through the list adding the first number and appending the result to the OutputList
        for y in ColumnOfNumbers:
            OutputList.append(StartNumber + y)
    return OutputList

#Call the List Addition Function 
print (ListAddition(ColumnOfNumbers))
</code></pre>
<p>If you want to get python to generate this list from a file which is a column of numbers then try this:-</p>
<pre><code>ColumnOfNumbers = []
file1 = open('test.dat','r')
for line in file1:
    ColumnOfNumbers.append(int(line))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This might work (Using Python 2.7):</p>
<pre><code>x = [10,12,13]
for i in range(len(x)):
    for j in range(i+1, len(x)):
        print x[i],' + ', x[j], ' = ', x[i]+x[j]
</code></pre>
<p>Output:</p>
<pre><code>10  +  12  =  22
10  +  13  =  23
12  +  13  =  25
</code></pre>
<p><strong>Updated:</strong>
Assuming the file has a line: 10, 12, 13</p>
<pre><code>import csv

f = open("test.dat", 'r')
try:
    reader = csv.reader(f)
    for row in reader:
        # convert array of string to int
        # http://stackoverflow.com/a/7368801/5916727
        # For Python 3 change the below line as explained in above link
        # i.e. results = list(map(int, results))
        results = map(int, row)
        for i in range(len(results)): 
            for j in range(i+1, len(results)): 
                print (results[i]+results[j])
finally:
    f.close()
</code></pre>
</div>
<span class="comment-copy">You look like you want to sum all of the combinations of a list of size 2.</span>
<span class="comment-copy">take a look at <code>itertools.combinations()</code></span>
<span class="comment-copy">Are these numbers stored as text in a file or are they already in a python list?  Either way, you'll want to use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a></span>
<span class="comment-copy">Make two nested for. If the first has index i, the second has j=(i+1). And sum list[i]+list[j]</span>
<span class="comment-copy">f=open('test.dat',"r").read() #with open('test.out', 'w') as out_file: sum=0 for k in range (0,2):     for j=(k+1):         p = f(k)+f(j) print (p)</span>
<span class="comment-copy">Can replace map with list comp. <code>[sum(x) for x in combinations(a, n)]</code> looks a bit more readable. And is more efficient.</span>
<span class="comment-copy">@MYGz How is it more efficient? I thought map and list comp were the same complexity.</span>
<span class="comment-copy">Someone was quoting Guido the other day for being more efficient. I have tested only once, list comp was a bit faster on python3. Will have to do some more digging if that's the case. I'm not 100% sure.</span>
<span class="comment-copy">@MYGz That's fine. I'm now very interested in this. I had always assumed that they would be the same because they pretty much act the same, at least in Python 2. I guess in Python 3 you could say there is a bigger difference because <code>map</code> creates a <code>map</code> object.</span>
<span class="comment-copy">Perhaps I'll write <code>map(sum, list)</code> after reading this answer: <a href="http://stackoverflow.com/a/6407222/4082217">stackoverflow.com/a/6407222/4082217</a></span>
<span class="comment-copy">I did something like this f=open('test.dat',"r").read() for i in range(len(f)):     for j in range(i+1, len(f)):         print (f[i]+f[j]) but not working</span>
<span class="comment-copy">Can you please explain, what did you get for output?</span>
<span class="comment-copy">i have a file with list of numbers in a column. The three numbers i mentioned as a test case, practically there are 11 numbers. I want to read those numbers in python and then want to do the operation as you mentioned. I can put all 11 numbers in x =[10, 12, 13, 18, 19...] but I felt it's better to read it from a file and then do the operation. If i put 11 numbers like x =[10, 12, 13, 18, 19...] I am getting the correct output but if i read the same numbers from a file and use the same coe then it's giving some nasty results</span>
<span class="comment-copy">I added the updated part, may be this will work.</span>
<span class="comment-copy">for i in range(len(results)): TypeError: object of type 'map' has no len()</span>
