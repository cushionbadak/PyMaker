<div class="post-text" itemprop="text">
<p>I have a class that I want to be able to do bitwise operations on in some cases.</p>
<pre><code>class Measurement(object):
    def __init__(self, value = None, category = None, measure = None):
        self.value = value
        self.category = category
        self.measure = measure    

    def __nonzero__(self):
        return self.value.__nonzero__()

    def __or__(self, other):
        return self.__nonzero__() | other

a = False
b = Measurement(True)
</code></pre>
<p>At this point <code>c = b | a</code> works, but <code>c = a | b</code> gives a type error. How do I get it to work both ways?</p>
<p>Also, is there a more elegant way to do this; for example, I had hoped that by just defining <code>__nonzero__</code>, I might get the right behaviour, but that's not the case.</p>
<p>I'm using Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>By also defining <code>__ror__</code>, as shown below, I get the right behaviour. The second part of the question still stands, however. Is there a more elegant way?</p>
<pre><code>def __ror__(self, other):
    return self.__or__(other)
</code></pre>
</div>
<span class="comment-copy">Aha, this reminds me of a similar question I saw solved. It was about implementing a multiplication operation for a custom Vector class, and the solution was to override <code>__rmul__</code> (and make it call <code>__mul__</code> with the arguments switched). I wonder if there's a similar solution for this.</span>
<span class="comment-copy">@Tagc yes. Here is the <a href="https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">relevant documentation</a>.</span>
<span class="comment-copy">This is the way it's suppose to be done. Explicit is better than implicit and all that...</span>
<span class="comment-copy"><code>__ror__</code>...I knew it.</span>
<span class="comment-copy">No there isn't a better way.  You could potentially define <code>self.__ror__ = self.__or__</code>, but I think that would just be more confusing</span>
