<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16819222/how-to-return-dictionary-keys-as-a-list-in-python">How to return dictionary keys as a list in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>So I have a dictionary which is like - </p>
<pre><code> {'gaining': 34, 'Tinga': 42, 'small': 39, 'legs,': 13,}. 
</code></pre>
<p>Is there a way in which i can print it out so that it becomes a list like - </p>
<pre><code> [ gaining, Tinga, small, legs ] 
</code></pre>
<p>So that only the keys are printed and not the values that go along it. Also is there a way to make the dictionary not work in arbitrary order - such that if two keys are repeated instead of giving it the value of the last one, we give it the value of the first one? </p>
<p>eg;    </p>
<pre><code>   {'gaining' : 34, 'Tinga' : 42, 'small : 39, 'legs,' : 13 'gaining' : 20}
</code></pre>
<p>When printed </p>
<pre><code>   print dict['gaining']
</code></pre>
<p>The output comes as </p>
<pre><code>   34 
</code></pre>
<p>instead of coming as </p>
<pre><code>   20
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Printing the keys is straightforward. In Python 3:</p>
<pre><code>d = {'gaining': 34, 'Tinga': 42, 'small': 39, 'legs,': 13,}
print(list(d.keys()))
</code></pre>
<p>In Python 2, <code>dict.keys</code> already returns a list instead of a special view object, so you can do</p>
<pre><code>print d.keys()
</code></pre>
<p>You can set values in a dict without overwriting previous keys using the <code>setdefault</code> method. This method sets the value of a key only if it is not already present in the <code>dict</code>. The only catch is that it only handles one key at a time, so you would need to put it in a loop or do it sequentially: </p>
<pre><code>d.setdefault('gaining', 34)
d.setdefault('Tinga', 42)
d.setdefault('small', 39)
d.setdefault('legs', 13)
d.setdefault('gaining', 20)
print (d['gaining'])

34
</code></pre>
<p>OR</p>
<pre><code>i = [('gaining', 34), 
     ('Tinga', 42), 
     ('small', 39), 
     ('legs', 13), 
     ('gaining', 20)]
for k, v in i:
    d.setdefault(k, v) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries can't have two identical keys by definition. You should <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">read the python docs</a> to understand how they really work.</p>
<p>To answer your question: </p>
<pre class="lang-py prettyprint-override"><code>d = {'gaining': 34, 'Tinga': 42, 'small': 39, 'legs': 13}
d.keys()
</code></pre>
<p>which will return</p>
<pre><code>dict_keys(['legs', 'gaining', 'Tinga', 'small'])
</code></pre>
<p>If you <em>really</em> want to print them in the exact format you specified: </p>
<pre><code>print('[' + ', '.join(d.keys()) + ']')
</code></pre>
<p>which will return</p>
<pre><code>[legs, gaining, Tinga, small]
</code></pre>
<p>Note that dictionaries are unsorted by definition, so the exact output may vary.</p>
</div>
<div class="post-text" itemprop="text">
<p>dict.keys() would suffice to achieve the first thing you asked.</p>
<p>Your second question is a bit tricky. You see, dictionaries store key value pairs, and there is this notion that <em>a dictionary has <strong>unique</strong>  keys.</em>  So, you can not put multiple values corresponding to a key in the manner you described.</p>
<p>Instead, what you can do is defining each value in the dict to be a list, and appending new values for a key to the list for that key. (i.e. dict[key]) Then, when you try to read a random value of a key, you can pick a random value from the list dict[key].</p>
</div>
<div class="post-text" itemprop="text">
<p>This will get you keys in a list</p>
<pre><code>keyList = [x for x,y in d.items()]
</code></pre>
</div>
<span class="comment-copy">Dictionaries can't have duplicate keys.</span>
<span class="comment-copy">@Andy Is there no way at all around it?</span>
<span class="comment-copy">The keys are available as a list as <code>.keys()</code></span>
<span class="comment-copy">Duplicate key is not a problem.  It is just the way dictionaries work.</span>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (output, tracebacks, etc.). The more detail you provide, the more answers you are likely to receive. Check the <a href="http://stackoverflow.com/tour">FAQ</a> and <a href="http://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">How is <code>[k for k in d.keys()]</code> different from <code>d.keys()</code> or <code>list(d.keys())</code>?</span>
<span class="comment-copy">@DYZ I guess it isn't but could make it easier to adapt it to other print formats?</span>
<span class="comment-copy">... or just use <code>.keys()</code></span>
<span class="comment-copy">That's called <code>d.keys()</code>.</span>
<span class="comment-copy">yes that's obvious :) only giving another option to poster to get more understanding about dictionaries, lists and iteration.</span>
