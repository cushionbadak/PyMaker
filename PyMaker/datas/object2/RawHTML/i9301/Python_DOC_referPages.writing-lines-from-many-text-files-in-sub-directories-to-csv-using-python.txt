<div class="post-text" itemprop="text">
<p>I want to derive some statistics out of a large amount of data files that all reside in their own folder. Using python, I want to create a single csv file, look for the data files starting from a root folder at a fairly high level (new folders are added all the time), and write a row with some key values from every file. </p>
<p>I've done this before using the <code>os.walk()</code> method combined with <code>writerows()</code>, but it's giving me problems this time around. When I run the code below, (with a file called XY.txt in my D:/temp/ folder) I get an error that reads: <em>'unexpected unindent'</em> at the line that reads <code>wr = csv.writer(f,lineterminator='\n',dialect='excel')</code> </p>
<p>I have moved the indentation around but that just moves the mentioned error with it. Can anybody advise me on how to achieve the desired row writing?</p>
<pre><code>import csv, os, math

fname = 'Output.csv'

f = open(fname, 'w') #truncate existing file or generate new one
f.write("count&gt;0.7\n")
merged_files = list()


# look for data files, in sub-folders down from D:/temp
for root, dirs, files in os.walk('D:/temp', topdown=False):
    for name in files:
        if name.startswith('XY') and name.endswith('.txt'):
            try:
                fp = open(root+'/'+name)
                #create a list for storing relevant data from .txt file
                csvRows = list()
                for line in fp:
                    content = line.split()
                    size = float(content[3])
                    #count lines with value over 0.7 in fourth column
                    if size &gt; 0.7: 
                        total1 = total1 + 1
                fp.close()
            finally:
                csvRows = [total1]
                merged_files.append(csvRows)

# write new row to file.
wr = csv.writer(f,lineterminator='\n',dialect='excel') 
wr.writerows(merged_files)

f.close()
</code></pre>
<p>I'm setting this up with rows so I can extract many more items from the .txt file, but I have not included those in the code above for clarity. </p>
<p>*updated code to reflect answer: now the <code>try:</code> sequence is ended with the <code>finally:</code> statement, in which all the information collected during the <code>for</code> loop is written to a line.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>try</em> attempts to run the block of code, if it fails then it runs the block of code in <em>except</em>. There is an optional <em>finally</em> clause which runs irrespective of whether the code in <em>try</em> succeeds.</p>
<p>For example, the function in the following code snippet will return 2 when executed</p>
<pre><code>def checktry():
   try: 
       return 1
   finally:
       return 2
</code></pre>
<p>I would recommend an <em>except</em> clause which would print out a helpful message if the code fails.</p>
<pre><code>except Exception as inst:                                                       
    print(inst)
</code></pre>
<p>Reference : <a href="https://docs.python.org/3/tutorial/errors.html#exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#exceptions</a></p>
</div>
<span class="comment-copy">You have a  <code>try</code> without an <code>except</code> or <code>finally</code> clause.</span>
<span class="comment-copy">Don't concatenate folders and files if you call os. Use os.path.join: <code>os.path.join(root, name)</code>.</span>
<span class="comment-copy">Thanks Parfait, I used the os.path.join and it works fine. However, is there a functional reason to do so? The previous code had the same effect.</span>
<span class="comment-copy">thank you for pointing this out. The script works wonderfully now. I will update the question page for future reference.</span>
<span class="comment-copy">No problem @skleijn Please upvote the answer if you find it helpful</span>
