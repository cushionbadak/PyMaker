<div class="post-text" itemprop="text">
<p>I'd like to understand how to use the optional parameter <code>blocking</code> in the method <a href="https://docs.python.org/3/library/sched.html#sched.scheduler.run" rel="nofollow noreferrer"><code>scheduler.run(blocking=True)</code></a>. Any practical/real-world example would be very helpful.</p>
<p>Based on the research I've done so far, the intention of the <code>blocking</code> optional argument is for non-blocking or async applications<sup>[1]</sup><sup>[2]</sup>. Below is the main run loop of the schduler (from the python 3.6 library <a href="https://github.com/python/cpython/blob/master/Lib/sched.py#L138-L155" rel="nofollow noreferrer"><code>sched.py</code></a>). Following through the code, I notice that whenever <code>blocking</code> is set to <code>False</code>, immediately returns the time difference between target time and current time, unless the target time had passed, in which case the action would be executed.</p>
<pre><code>while True:
    with lock:
        if not q:
            break
        time, priority, action, argument, kwargs = q[0]
        now = timefunc()
        if time &gt; now:
            delay = True
        else:
            delay = False
            pop(q)
    if delay:
        if not blocking:
            return time - now
        delayfunc(time - now)
    else:
        action(*argument, **kwargs)
        delayfunc(0)   # Let other threads run
</code></pre>
<p>Seems to me the non-blocking design requires me to keep running the scheduler until the queue is clean. Thus, I'm thinking about maintaining a task queue myself and keep pushing the <code>scheduler.run</code> task into the queue (like the code below.) Is this a  desirable design? What is the proper way of using the non-blocking scheduler?</p>
<pre><code>def action():
    print('action at: ', datetime.now())

if __name__ == '__main__':
    s = sched.scheduler(time.time)
    target_time = datetime.now() + timedelta(seconds=5)
    s.enterabs(target_time.timestamp(), 1, action)
    run = functools.partial(s.run, blocking=False)
    taskq = deque()
    taskq.append(run)
    while taskq:
        task = taskq.popleft()
        result = task()
        print(result)
        if result:
            taskq.append(run)
            time.sleep(1)

    print('end tasks')
</code></pre>
<p>[1] <a href="https://docs.python.org/release/3.3.0/whatsnew/3.3.html#sched" rel="nofollow noreferrer">Whatâ€™s New In Python 3.3</a></p>
<p>[2] <a href="http://bugs.python.org/issue13449" rel="nofollow noreferrer">Issue13449: sched - provide an "async" argument for run() method</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Old question, but I just implemented something which used the nonblocking version pretty effectively.</p>
<p>When <code>blocking = True</code> in <code>sched.scheduler.run</code>, it will call the delayfunc for the time difference until the next event.</p>
<p>This may be undesirable if your application, at <code>t = 0</code>, schedules an event <code>A</code> for <code>t = 10</code>, but another thread, at <code>t = 1</code>, schedules an event <code>B</code> for <code>t = 5</code>. In this case, </p>
<pre><code>s = sched.scheduler(time.time)
# Spawn threads which enter A and B into s
while True:
    s.run(True)
</code></pre>
<p>if your main thread is just calling <code>sched.scheduler.run(blocking=True)</code> in a loop, at <code>t = 0</code> it will call <code>delayfunc(10)</code> because it only sees that it has 10 time units left until <code>A</code>. The main thread won't wake up until t = 10, at which point it will see that it missed <code>B</code>, run <code>B</code> 5 time units late, and then run <code>A</code> after <code>B</code>.</p>
<p>To solve this, you can change the main thread to look like this:</p>
<pre><code>s = sched.scheduler(time.time)
# Spawn threads which enter A and B into s
while True:
    next_ev = s.run(False)
    if next_ev is not None:
        time.sleep(min(1, next_ev))
    else:
        time.sleep(1)
</code></pre>
<p>This code will catch up on all present events, then sleep until the next event, or if there is no next event or if the next event is too far ahead, will sleep for 1 second.</p>
<p>Ideally, scheduler would be implemented with a condition variable for if a new event reaches the front of the priority queue, and it could wait on that variable instead of just sleeping until the next event. This would be the most efficient and most time accurate.</p>
</div>
<span class="comment-copy">Why don't you try it and see?</span>
<span class="comment-copy">@martineau I added some code for demonstration. Thanks for the comment. I think this makes my question easier to understand.</span>
<span class="comment-copy">Your premise is wrong. The first event to run will be the one closest to <code>t0</code>. The order in which you <code>enter()</code> the events doesn't matter. Try this to check this is true: <code>import sched, time; s = sched.scheduler(time.time, time.sleep); s.enter(10, 0, print, argument=('test',)); s.enter(5, 0, print, argument=('test2',)); s.run()</code>. You will see <code>test2</code> is printed 5 seconds before <code>test</code>. It wouldn't be much of a scheduler otherwise ;)</span>
<span class="comment-copy">This is a single threaded example. By waiting to run, it knows when the next event is before it starts to sleep. The issue is that if you enter the second event after doing a blocking run in another thread, it will sleep until the first event, regardless of events you schedule before then after the run starts.</span>
