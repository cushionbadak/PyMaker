<div class="post-text" itemprop="text">
<p>I am using python 3.6 and got some problems to calculate date. </p>
<p>I have a list composed of date elements like below:</p>
<pre><code>dates = [['2017','01','15'], ['2017','01','14'], ['2017','01','13'],...]
</code></pre>
<p>I would like to make it to time format and calculate the days from today.</p>
<p>How can I fix my code?</p>
<p>Below is my code:</p>
<pre><code>dates = [['2017', '01', '15'], ['2017', '01', '14'], ['2017', '01', '13']]

for date in dates:
    date_cand = "-".join(date)
    date_cand_time = time.strptime(date_cand,"%Y-%m-%d")
    (datetime.date.today() - datetime.date(date_cand_time)).days
</code></pre>
<p>I have this error message now:</p>
<pre><code>TypeError: an integer is required (got type time.struct_time)
</code></pre>
<p>The result that I would like to have is:</p>
<pre><code>4
5
6
</code></pre>
<p>Please help me to work this out.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>date_cand_time</code> is not an integer, it is a <em>tuple</em> with integers. You can't just pass that to the <code>datetime.date()</code> object. You'd have to pass in the first 3 elements as separate arguments instead:</p>
<pre><code>(datetime.date.today() - datetime.date(*date_cand_time[:3])).days
</code></pre>
<p>The <code>*</code> tells Python to apply the values of the <code>lst_reg_date_cand_time[:3]</code> expression as separate arguments.</p>
<p>However, I'd not take a detour via <code>time.strptime()</code>; just map the 3 strings to integers and pass them in directly:</p>
<pre><code>date_cand = datetime.date(*map(int, date))
(datetime.date.today() - date_cand).days
</code></pre>
<p>The arguments to <code>datetime.date()</code> are, after all, <code>year</code>, <code>month</code> and <code>day</code>, in the same order you have your strings.</p>
<p>If you <em>must</em> use <code>strptime</code>, then use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.datetime.strptime()</code></a> and extract the <code>date</code> object from that:</p>
<pre><code>date_cand = datetime.datetime.strptime("-".join(date), "%Y-%m-%d")
(datetime.date.today() - date_cand.date()).days
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dates = [['2017','01','15'], ['2017','01','14'], ['2017','01','13']]
&gt;&gt;&gt; for date in dates:
...     # using map, produces a date
...     date_cand = datetime.date(*map(int, date))
...     print(date_cand, (datetime.date.today() - date_cand).days)
...     # using datetime.datetime.strptime, produces a datetime
...     date_cand = datetime.datetime.strptime("-".join(date), "%Y-%m-%d")
...     print(date_cand, (datetime.date.today() - date_cand.date()).days)
...
2017-01-15 4
2017-01-15 00:00:00 4
2017-01-14 5
2017-01-14 00:00:00 5
2017-01-13 6
2017-01-13 00:00:00 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code seems to work. Note that I use <code>datetime.strptime</code> instead of <code>time.strptime</code>, in case that makes any difference:</p>
<pre><code>from datetime import datetime


def parse_dates(dates_array):
    today = datetime.today()
    for date_array in dates_array:
        date = datetime.strptime('-'.join(date_array), '%Y-%m-%d')
        yield (today - date).days


if __name__ == '__main__':
    dates = [['2017', '01', '15'], ['2017', '01', '14'], ['2017', '01', '13']]
    for days_from_today in parse_dates(dates):
        print(days_from_today)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>4
5
6
</code></pre>
<p><strong>Caveat</strong></p>
<p>I move the calculation of <code>today</code> outside the for loop for minor performance benefits, but this will cause the code to break if you leave this code running past midnight. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>This Python 2 / Python 3 code is a combination of Martijn's and Tagc's answers.</p>
<pre><code>from datetime import datetime

def parse_dates(dates_array):
    today = datetime.today()
    for d in dates_array:
        yield (today - datetime(*map(int, d))).days

if __name__ == '__main__':
    dates = [
        ['2017', '01', '15'], 
        ['2017', '01', '14'], 
        ['2017', '01', '13'],
    ]
    for d in parse_dates(dates):
        print(d)
</code></pre>
<p><strong>output</strong></p>
<pre><code>4
5
6
</code></pre>
<p>As Tagc said, if the date may change while this code is running then you need to move <code>today = datetime.today()</code> inside the <code>for</code> loop.</p>
<hr/>
<p>Here's essentially the same thing, without a function:</p>
<pre><code>from datetime import datetime

dates = [
    ['2017', '01', '15'], 
    ['2017', '01', '14'], 
    ['2017', '01', '13'],
]

today = datetime.today()

for d in dates:
    delta = (today - datetime(*map(int, d))).days
    print(delta)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since datetime.date was using in your code for delta calculation, here is a clean way of doing what you want.</p>
<pre><code>import datetime 
dates = [['2017', '01', '15'], ['2017', '01', '14'], ['2017', '01', '13']]
today = datetime.date.today()
for date in dates:
    year,month,day = [int(s) for s in date] #convert to int and assign to vars : year, month, day
    date_cand_time = datetime.date(year,month,day) #convert date to datetime.date
    delta = (today - date_cand_time).days #calculate the day delta
    print delta
</code></pre>
<p>Output</p>
<pre><code>4
5
6
</code></pre>
</div>
<span class="comment-copy">In case people are wondering, *map(int,date) maps date into type int. Effectively converts date strings into ints. * operator then splat the list into positional arguments. <a href="http://stackoverflow.com/questions/5239856/foggy-on-asterisk-in-python" title="foggy on asterisk in python">stackoverflow.com/questions/5239856/foggy-on-asterisk-in-python</a></span>
