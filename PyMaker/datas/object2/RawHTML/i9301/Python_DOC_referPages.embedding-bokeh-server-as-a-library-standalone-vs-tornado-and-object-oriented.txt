<div class="post-text" itemprop="text">
<p>I refer to the <a href="http://bokeh.pydata.org/en/latest/docs/user_guide/server.html#embedding-bokeh-server-as-a-library" rel="nofollow noreferrer">Bokeh's Documentation</a> which describes how to embedding Bokeh server as a library. There are several example python there, specifically one for "<a href="https://github.com/bokeh/bokeh/blob/0.12.4/examples/howto/server_embed/standalone_embed.py" rel="nofollow noreferrer">standalone</a>" and one for "<a href="https://github.com/bokeh/bokeh/blob/0.12.4/examples/howto/server_embed/tornado_embed.py" rel="nofollow noreferrer">Tornado</a>", yet both use Tornado.
My questions are:</p>
<ol>
<li>What's the conceptual difference if both use Tornado? Why is it called standalone? (I don't know Tornado very well).</li>
<li>Can I use a class object-oriented design for coding the GUI rather than a function with global variables, like in the given examples (see <code>modify_doc</code> method in both examples and inner methods which refer to variables in outer scope).</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Like most other Web servers, Bokeh's built-in <code>Bokeh.server.server.Server</code> needs an event loop to run on. In the first, "standalone" example, it's running (or "piggybacking" as the docs say) on top of Tornado's <code>IOLoop</code>, but the actual application logic is handled by Bokeh's internal <code>Application</code> object. (I believe it might be possible to use some other event loop, like the one from Python 3's <a href="https://docs.python.org/3/library/asyncio-eventloop.html" rel="nofollow noreferrer"><code>asyncio</code></a>, but I haven't tested it.) The second example, however, is using <a href="http://tornado.readthedocs.io/en/stable/webframework.html" rel="nofollow noreferrer">Tornado's Web framework</a> to route the requests instead.</p></li>
<li><p>The example function is not using global variables -- it (or rather the internal callback function) is simply taking advantage of Python's closure mechanism so it can return a callback function to the Bokeh's <code>FunctionHandler</code>. I am not that familiar with Bokeh, but apparently there is a number of different ways you can modify the document -- <code>FunctionHandler</code>, <code>CodeHandler</code>, <code>ScriptHandler</code>, <code>NotebookHandler</code> etc. In Python, a class is an executable like any other function, so I can easily see passing one to <code>FunctionHandler</code> (which should really be called <code>CallableHandler</code>).</p></li>
</ol>
</div>
