<div class="post-text" itemprop="text">
<p>I'm currently doing a hackerrank problem. </p>
<p>The objective is to find the cubes of the first <code>n</code> Fibonacci numbers. The user inputs <code>n</code>. So for example, if the user inputs 5, the output should be [0, 1, 1, 8, 27], since the first five Fibonacci numbers are [0, 1, 1, 2, 3].</p>
<p>I've written the following code:</p>
<pre><code>cube = lambda x: x**3 # complete the lambda function 

def fibonacci(n):
    # return a list of fibonacci numbers
    initiallist = []
    for i in range(n):
        if i &lt; 2:
            initiallist += [i]          
        else:
            initiallist += [initiallist[-1] + initiallist[-2]]
    return initiallist
</code></pre>
<p>I'm given the following code (which I cannot edit):</p>
<pre><code>if __name__ == '__main__':
    n = int(input())
    print(map(cube, fibonacci(n)))
</code></pre>
<p>The problem is that my code fails the test cases because it returns a map object instead of a list. How can I ensure it returns a list instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just add <code>list()</code>,</p>
<pre><code>if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))
</code></pre>
<p>I undeleted my comment because this is the is solution to map object, I don't think you can modify it before you actually called. as Ewoud said, <code>map</code> function acts differently in python3 and python2.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just put list(...) around it, so</p>
<pre><code>print(list(map(cube, fibonacci(n))))
</code></pre>
<p>(I havent tested the rest of your code)</p>
<p>Edit: If you are not to change the main function you either have to change the print or map function or use python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can't edit the <strong>main</strong> function then use Python2.X instead of Python3.x. In Python3.x, map() function return iterator.</p>
<p>Here's [a link] <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#map</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This should give you more than you need. I added a few extra bits like looping  and input validation just in case. Hope this helps</p>
<p>General Formula
F(n) = F(n-1) + F(n-2)</p>
<p>Get User input</p>
<pre><code>    def get_user_input():
        while True:
            try:
                nums_in_list = int(input("Enter the amout of numbers you want in the fibonacci list: "))

                if nums_in_list &lt; 1:
                    print("Please enter a number greater than 0.")
                    continue

                return nums_in_list

            except ValueError:
                print ("Please enter an integer.")
</code></pre>
<p>Create Fabonacci List based on user input</p>
<pre><code>    def genterate_list(user_input):
        fab_list = [0]
        if user_input == 1:
            return fab_list
        elif user_input == 2:
            fab_list.append(1)
            return fab_list
        else:
            count = 1
            while user_input &gt; count:
                if count == 2:
                    fab_list.append(1)
                elif count &gt; 2:
                    fab_list.append(fab_list[count - 2] + fab_list[count - 3])

                count += 1
        return fab_list
</code></pre>
<h1>Extra Add in to loop the program</h1>
<pre><code>def loop_program():
    while True:
        opts = ['y', 'Y', 'N', 'n']

        loop = input("Would you like to run the program again (y/n): ")

        if loop not in opts:
            print("Please select (y/n): ")
            continue
        elif loop == 'N' or loop == 'n':
            return "N"
        else:
            return "Y"
</code></pre>
<p>Main section:
Calls the functions defined above
Displays the outputs.</p>
<pre><code>    if __name__ == '__main__':
        while True:
            original = genterate_list(get_user_input())
            print("Original Fabonacci")

            for x in original:
                print(x)

            cube_funtion = lambda value : value ** 3
            cube_result = map(cube_funtion, original)
            print("Cubed Values")
            list(map(print, cube_result))
            if loop_program() == "N":
                break
</code></pre>
</div>
<span class="comment-copy">if you can't change code in <code>__main__</code> then you can only use <code>Python 2</code> instead of <code>Python 3</code> to get correct result. (or maybe overwrite function <code>map</code>)</span>
<span class="comment-copy">How does it work with Python 2?</span>
<span class="comment-copy">In Python 2 the map function returns a list instead of a map object, so this should work as is.</span>
<span class="comment-copy">Thanks so much! That clarifies</span>
<span class="comment-copy">The user can not edit anything in the __main__</span>
<span class="comment-copy">Oh, my bad. I will edit.</span>
<span class="comment-copy">Once again, the user can not edit that line of code.</span>
