<div class="post-text" itemprop="text">
<p>I found the following code online, added the list created and the attempt to print the length</p>
<pre><code>from __future__ import print_function
import socket
import struct
import sys
import os
import webbrowser
import json
import urllib

# We want unbuffered stdout so we can provide live feedback for
# each TTL. You could also use the "-u" flag to Python.

class flushfile(file):
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()

sys.stdout = flushfile(sys.stdout)


def main(dest_name):
    dest_addr = socket.gethostbyname(dest_name)
    port = 33434
    max_hops = 30
    icmp = socket.getprotobyname('icmp')
    udp = socket.getprotobyname('udp')
    ttl = 1
    IPlist = []

    while True:
        recv_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)
        send_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, udp)
        send_socket.setsockopt(socket.SOL_IP, socket.IP_TTL, ttl)

        # Build the GNU timeval struct (seconds, microseconds)
        timeout = struct.pack("ll", 5, 0)

        # Set the receive timeout so we behave more like regular traceroute
        recv_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, timeout)

        recv_socket.bind(("", port))
        sys.stdout.write(" %d  " % ttl)
        send_socket.sendto("", (dest_name, port))
        curr_addr = None
        curr_name = None
        finished = False
        tries = 1
        while not finished and tries &gt; 0:
            try:
                _, curr_addr = recv_socket.recvfrom(512)
                finished = True
                curr_addr = curr_addr[0]
            except socket.error as (errno, errmsg):
                tries = tries - 1
                sys.stdout.write("* ")

        send_socket.close()
        recv_socket.close()

        if not finished:
            pass

        if curr_addr is not None:
            IPlist.append(curr_addr)
            print(len(IPlist))

        ttl += 1
        if curr_addr == dest_addr or ttl &gt; max_hops:
            break

if __name__ == "__main__":
    main('google.com')
</code></pre>
<p>It is sample code to simulate the functionality of <code>traceroute</code>. </p>
<p>I am trying to add (by using <code>append</code>) all the resulting IP addresses stored in <code>curr_addr</code> to a list. I am trying to check the length of the list at that line to be sure it keeps growing. </p>
<p>Every time I run it, I get this error:</p>
<pre><code> 1  Traceback (most recent call last):
  File "traceroute.py", line 96, in &lt;module&gt;
    main('google.com')
  File "traceroute.py", line 84, in main
    print(len(IPlist))
ValueError: I/O operation on closed file
</code></pre>
<p>Do ignore the above line numbers as I have removed commented code out before posting.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is unsurprisingly with your <code>flushfile</code> class.</p>
<p>The problem is that <code>flushfile</code> inherits from <code>file</code>, and its <code>closed</code> attribute defaults to <code>True</code>. Thus, when you try to <code>print()</code> to <code>sys.stdout</code>, it thinks <code>sys.stdout</code> has been closed.</p>
<p>You have several options:</p>
<ol>
<li><strong>Stop using <code>flushfile</code>.</strong> It's broken. As mentioned in the comments, the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print()</code> function</a> takes an optional <code>flush</code> paramter. Just use it instead:</li>
</ol>
<pre><code> print("This will be flushed even without a newline", end=None, flush=True)
</code></pre>
<ol start="2">
<li><strong>Change the <code>flushfile</code> base class from <code>file</code> to <code>object</code>.</strong> As I said, the <code>file.closed</code> property defaults to <code>True</code>, and can't be manually set. Empirically, it's good enough for <code>sys.stdout</code> to have have just a <code>write</code> method if you only want to <code>print()</code> to it.</li>
</ol>
</div>
<span class="comment-copy">Why are you opening / closing the socket every iteration of the loop?</span>
<span class="comment-copy">@JonathonReinhart That portion of the code is not mine. I do not understand it completely and am slowly attempting to. My only code is the list and trying to obtain the length of it. Maybe I should state that in the main post</span>
<span class="comment-copy">Why are you messing around with <code>sys.stdout</code> and that <code>flushfile</code> stuff instead of just adding <code>flush=True</code> to the relevant <code>print()</code> calls?</span>
<span class="comment-copy">@TigerhawkT3 Those were already in the code. At the moment I do not understand the code enough to answer your question.</span>
<span class="comment-copy">In that case, you should be asking the author, as this is not SO's intended purpose.</span>
<span class="comment-copy">Thank you. This fixed my problem.</span>
<span class="comment-copy">Which option did you choose? I highly recommend option 1. Also, please remember to up-vote any answers that help you, and accept the answer that best solves your problem.</span>
<span class="comment-copy">I went with the first option. Removed flushfile class and replaced all sys.stdout.write() with print()</span>
