<div class="post-text" itemprop="text">
<p>I need a way to determine the space remaining on a disk volume using python on linux, Windows and OS X. I'm currently parsing the output of the various system calls (df, dir) to accomplish this - is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import ctypes
import os
import platform
import sys

def get_free_space_mb(dirname):
    """Return folder/drive free space (in megabytes)."""
    if platform.system() == 'Windows':
        free_bytes = ctypes.c_ulonglong(0)
        ctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(dirname), None, None, ctypes.pointer(free_bytes))
        return free_bytes.value / 1024 / 1024
    else:
        st = os.statvfs(dirname)
        return st.f_bavail * st.f_frsize / 1024 / 1024
</code></pre>
<p>Note that you <em>must</em> pass a directory name for <code>GetDiskFreeSpaceEx()</code> to work
(<code>statvfs()</code> works on both files and directories). You can get a directory name
from a file with <code>os.path.dirname()</code>.</p>
<p>Also see the documentation for <a href="https://docs.python.org/3/library/os.html#os.fstatvfs" rel="noreferrer"><code>os.statvfs()</code></a> and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa364937(v=vs.85).aspx" rel="noreferrer"><code>GetDiskFreeSpaceEx</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Install <a href="https://pypi.org/project/psutil/" rel="nofollow noreferrer">psutil</a> using <code>pip install psutil</code>. Then you can get the amount of free space in bytes using:</p>
<pre class="lang-python prettyprint-override"><code>import psutil
print(psutil.disk_usage(".").free)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://pypi.python.org/pypi/WMI/">wmi</a> module for windows and os.statvfs for unix</p>
<p>for window</p>
<pre><code>import wmi

c = wmi.WMI ()
for d in c.Win32_LogicalDisk():
    print( d.Caption, d.FreeSpace, d.Size, d.DriveType)
</code></pre>
<p>for unix or linux</p>
<pre><code>from os import statvfs

statvfs(path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you dont like to add another dependency you can for windows use ctypes to call the win32 function call directly. </p>
<pre><code>import ctypes

free_bytes = ctypes.c_ulonglong(0)

ctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(u'c:\\'), None, None, ctypes.pointer(free_bytes))

if free_bytes.value == 0:
   print 'dont panic'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A good cross-platform way is using psutil: <a href="http://pythonhosted.org/psutil/#disks" rel="nofollow">http://pythonhosted.org/psutil/#disks</a>
(Note that you'll need psutil 0.3.0 or above).</p>
</div>
<div class="post-text" itemprop="text">
<p>From Python 3.3 you can use <a href="https://docs.python.org/3/library/shutil.html#shutil.disk_usage" rel="noreferrer">shutil.disk_usage("/").free</a> from standard library for both Windows and UNIX :)</p>
</div>
<div class="post-text" itemprop="text">
<h1>If you're running python3:</h1>
<p>Using <code>shutil.disk_usage()</code>with <code>os.path.realpath('/')</code> name-regularization works:</p>
<pre><code>from os import path
from shutil import disk_usage

print([i / 1000000 for i in disk_usage(path.realpath('/'))])
</code></pre>
<p>Or</p>
<pre><code>total_bytes, used_bytes, free_bytes = disk_usage(path.realpath('D:\\Users\\phannypack'))

print(total_bytes / 1000000) # for Mb
print(used_bytes / 1000000)
print(free_bytes / 1000000)
</code></pre>
<p>giving you the total, used, &amp; free space in MB.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://man.he.net/?section=all&amp;topic=df" rel="nofollow noreferrer">df</a> as a cross-platform way. It is a part of <a href="http://www.gnu.org/software/coreutils/" rel="nofollow noreferrer">GNU core utilities</a>. These are the core utilities which are expected to exist on every operating system. However, they are not installed on Windows by default (Here, <a href="http://getgnuwin32.sourceforge.net/" rel="nofollow noreferrer">GetGnuWin32</a> comes in handy).</p>
<p><em>df</em> is a command-line utility, therefore a wrapper required for scripting purposes.
For example: </p>
<pre><code>from subprocess import PIPE, Popen

def free_volume(filename):
    """Find amount of disk space available to the current user (in bytes) 
       on the file system containing filename."""
    stats = Popen(["df", "-Pk", filename], stdout=PIPE).communicate()[0]
    return int(stats.splitlines()[1].split()[3]) * 1024
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2.7/library/os.html" rel="nofollow noreferrer">os.statvfs()</a> function is a better way to get that information for Unix-like platforms (including OS X). The Python documentation says "Availability: Unix" but it's worth checking whether it works on Windows too in your build of Python (ie. the docs might not be up to date).</p>
<p>Otherwise, you can use the <a href="http://sourceforge.net/projects/pywin32/" rel="nofollow noreferrer">pywin32</a> library to directly call the <a href="http://msdn.microsoft.com/en-us/library/aa364937(VS.85).aspx" rel="nofollow noreferrer">GetDiskFreeSpaceEx</a> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Below code returns correct value on windows</p>
<pre><code>import win32file    

def get_free_space(dirname):
    secsPerClus, bytesPerSec, nFreeClus, totClus = win32file.GetDiskFreeSpace(dirname)
    return secsPerClus * bytesPerSec * nFreeClus
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I Don't know of any cross-platform way to achieve this, but maybe a good workaround for you would be to write a wrapper class that checks the operating system and uses the best method for each.</p>
<p>For Windows, there's the <a href="http://aspn.activestate.com/ASPN/docs/ActivePython/2.2/PyWin32/win32api__GetDiskFreeSpaceEx_meth.html" rel="nofollow noreferrer">GetDiskFreeSpaceEx</a> method in the win32 extensions.</p>
</div>
<span class="comment-copy">See this recipe here: <a href="http://code.activestate.com/recipes/577972-disk-usage/?in=user-4178764" rel="nofollow noreferrer">code.activestate.com/recipes/577972-disk-usage/?in=user-4178764</a></span>
<span class="comment-copy"><code>.f_bfree</code> is total number of free blocks in the file system. It should be multiplied by <code>.f_bsize</code> to get number of bytes.</span>
<span class="comment-copy">At least on OS X Lion / Python 2.7 I noticed that multiplying by <code>.f_bsize</code> gives a much too large value as <code>f_bsize</code> is the <i>preferred</i> block size while <code>.f_frsize</code> is the <i>fundamental</i> block size and gives the correct value. On my linux test system both values are identical and thus <code>.f_frsize</code> should work all the time.</span>
<span class="comment-copy">Works to get available disk on Android Phone, plugged via USB to a Windows system, running the script on Windows. Great.</span>
<span class="comment-copy">@J.F.Sebastian It depends on what you want. It is possible for Linux to reserve space for root. If you want to include this space, use f_bfree. If you want to get the number of blocks available to a user, then use f_bavail. Maybe someone can say if and how quotas are treated?</span>
<span class="comment-copy">I have three <i>niggles</i> with the above: 1/ The docstring is wrong it returns space in Mbytes &amp; 2/ I never like seeing more than one return statement, (too much time as a tester I guess), so would store the result in a returned value, 3/ Whole MB or decimal MB may make a difference to some people.</span>
<span class="comment-copy">Why this is not the best answer?</span>
<span class="comment-copy">I think because psutil wasn't always available through pypi.</span>
<span class="comment-copy">I agree this a great answer. I fixed the stale link to <code>psutil</code>. Since <code>disk_usage.free</code> typically returns a huge 64b integer, I suggest you also want to show people <code>disk_usage.percent</code>. <code>psutil.disk_usage(".").percent &lt; 99.9</code> seems clearer to me...</span>
<span class="comment-copy">I can't believe how far I had to go down this question to find someone mentioning the WMI. All these crazy people using ctypes to call Windows C APIs directly when they could just use the WMI?</span>
<span class="comment-copy">@CraigRinger Yes, you are right. We should use the right tool to do the right thing. Most of the common management tasks for window have already been wrapped with win api in wmi. We don't have to remake the wheel. :^D</span>
<span class="comment-copy">Why not <code>psutil</code> handle it?</span>
<span class="comment-copy">This is why I love stackoverflow.  I did not even know about the WMI module and it worked flawlessly.</span>
<span class="comment-copy">@Fr0zenFyr yes, that's another good option for handle this task.</span>
<span class="comment-copy">cross platform??</span>
<span class="comment-copy">This would be the best answer, but unfortunately psutil is not installable via pip.</span>
<span class="comment-copy">psutil is now available from pypi and most other sources including debian packages.</span>
<span class="comment-copy">I don't understand why people downvote. For example this answer may be useful to somebody. Anyway it is a good supplement for the other pupe-Pythonic solutions. If anybody doesn't like the answer is no reason to downvote it. As I understand, downvotes are for downright wrong answers. This one is not.</span>
<span class="comment-copy">@ovgolovin Up vote this answer and It is good know an other way to do the same thing.</span>
<span class="comment-copy">os.statvfs() doesn't work on Windows (Python 2.5.2 -- current production version).</span>
<span class="comment-copy">not cross platform</span>
