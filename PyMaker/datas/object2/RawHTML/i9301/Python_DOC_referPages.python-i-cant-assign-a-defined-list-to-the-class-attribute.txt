<div class="post-text" itemprop="text">
<pre><code>class Runner:
    """
    information of registered runners
    Attributes:
        @type email: str
        email of the registered runner
        @type category: str
        the speed they estimate that they can finish the race
        @type list: clist
        the list of runners in the same category

    """
    under_twenty_min = []
    under_thirty_min = []
    under_forty_min = []
    forty_and_above = []

    def __init__(self, email, category):
        """Register the email and the speed estimation of runners

            @type self: Runner
            @type email: str
            @type speed: int
            @type category:str
            @type clist: list
            @rtype: list

        &gt;&gt;&gt;runner1=Runner('gerhard@mail.utoronto.ca','under 40 min')
        &gt;&gt;&gt;runner1.email
        'gerhard@gmail.utoronto.ca'
        &gt;&gt;&gt;runner1.category
        'under 40 min'
        """
        self.email = email
        self.category = category
        if category=='under 20 min':
            self.clist=under_twenty_min
        elif category=='under 30 min':
            self.clist = under_twenty_min
        elif  category=='under 40 min':
            self.clist = under_forty_min
        elif category=='40 min and over':
            self.clist = forty_and_over
        renew(self,clist)
        return clist
</code></pre>
<p>basically i have to return a list of runners with the same speed category when initialize a runner, but I can't assign the lists I defined above to the class attribute, is there anyway to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to explicitly specify the class when accessing class variables:</p>
<pre><code>if category == 'under 20 min':
    self.clist = Runner.under_twenty_min
elif category == 'under 30 min':
    self.clist = Runner.under_twenty_min
elif category == 'under 40 min':
    self.clist = Runner.under_forty_min
elif category == '40 min and over':
    self.clist = Runner.forty_and_over
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dict, set each catgory name as a key and the value is a list of all the runners in that category.<br/>
here is a simple implementation </p>
<pre><code>from collections import defaultdict

#runners is a list of all your runners

def get_runners_by_cat():
    d = defaultdict(list)
    for runner in runners:
        dict[runner.category].append(runner)
    return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are couple of things you have to modify in your code:</p>
<ol>
<li>The indentation of the <code>init</code> method needs to be indented within the class definition.</li>
<li>As @Tamas points out you need to explicitly state that the variables are class variable.</li>
<li>As @taoufik mentions, it might be convenient to define a dictionary instead.</li>
<li>A <code>init</code> method should not return anything (except <code>None</code>). Since your requirement is to return the runners, you could add an additional method as @taofik suggested (or you can just print them once created as shown below).</li>
</ol>
<p>Here's an updated version of the code. Hope it helps.</p>
<pre><code>class Runner:
    """
    information of registered runners
    Attributes:
        @type email: str
        email of the registered runner
        @type category: str
        the speed they estimate that they can finish the race
        @type list: clist
        the list of runners in the same category

    """
    clist = {
        'under_twenty_min': [],
        'under_thirty_min': [],
        'under_forty_min':[],
        'forty_and_above': []
    }

    def __init__(self, email, category):
        """Register the email and the speed estimation of runners

            @type self: Runner
            @type email: str
            @type speed: int
            @type category:str
                @type clist: list
            @rtype: list

        &gt;&gt;&gt;runner1=Runner('gerhard@mail.utoronto.ca','under 40 min')
        &gt;&gt;&gt;runner1.email
        'gerhard@gmail.utoronto.ca'
            &gt;&gt;&gt;runner1.category
        'under 40 min'
        """
        self.email = email
        self.category = category

        if category=='under 20 min':
            Runner.clist['under_twenty_min'].append(self)
            print Runner.clist['under_twenty_min']
        elif category=='under 30 min':
            Runner.clist['under_thirty_min'].append(self)
            print Runner.clist['under_thirty_min']
        elif  category=='under 40 min':
            Runner.clist['under_forty_min'].append(self)
            print Runner.clist['under_forty_min']
        elif category=='40 min and over':
            Runner.clist['forty_and_above'].append(self)
            print Runner.clist['forty_and_above']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#get class name, convert it to class object
if category=='under 20 min':
    self.clist= eval(self.__class__.__name__).under_twenty_min
elif category=='under 30 min':
    self.clist = eval(self.__class__.__name__).under_thirty_min
elif  category=='under 40 min':
    self.clist = eval(self.__class__.__name__).under_forty_min
elif category=='40 min and over':
    self.clist = eval(self.__class__.__name__).forty_and_above
</code></pre>
</div>
<span class="comment-copy">to acceess class namespace attributes use this notation <code>self.clist=Runner.under_twenty_min</code></span>
<span class="comment-copy"><code>return clist</code> --&gt; <code>return self.clist</code> and <code>renew(self,clist)</code> --&gt; <code>renew(self,self.clist)</code>.   You should probably show us <code>renew</code> - is it a method of the class or a <i>standalone</i> function?</span>
<span class="comment-copy">It's odd that ```__init__``  needs to return a list - <a href="http://stackoverflow.com/a/2491831/2823755">stackoverflow.com/a/2491831/2823755</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__init__</a></span>
<span class="comment-copy">You can also use <code>self.__class__</code> and/or <code>@classproperty</code> for a more dynamic behavior</span>
