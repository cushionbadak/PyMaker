<div class="post-text" itemprop="text">
<p>I was wondering how I could limit something like this too use only 10 threads at one time</p>
<pre><code>with open("data.txt") as f:
    for line in f:
        lines = line.rstrip("\n\r")
        t1 = Thread(target=Checker, args=("company"))
        t1.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use Python's <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer">ThreadPoolExecutor</a> with max_workers argument set to 10.</p>
<p>Something like this:`</p>
<pre><code>pool = ThreadPoolExecutor(max_workers=10)
with open("data.txt") as f:
    for line in f:
        lines = line.rstrip("\n\r")
        pool.submit(Checker,"company")

pool.shutdown(wait=True)
</code></pre>
<p>The <code>pool</code> will automatically allocate threads as needed, limiting maximum number of allocation to 10. The first argument in <code>pool.submit()</code> is the function name, the arguments are simply passed as comma-separated values.</p>
<p><code>pool.shutdown(wait=True)</code> waits for all threads to complete execution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>ThreadPoolExecutor</code> and tell it that you want 10 threads. </p>
<pre><code>def your_function_processing_one_line(line):
    pass  # your computations

with concurrent.futures.ThreadPoolExecutor(10) as executor:
    result = executor.map(your_function_processing_one_line, [line for line in f])
</code></pre>
<p>...and you will have all the results in <code>result</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>(for both Python 2.6+ and Python 3)</p>
<p>Use the <code>threadPool</code> from <code>multiprocessing</code> module:</p>
<pre><code>from multiprocessing.pool import ThreadPool
</code></pre>
<p>The only thing is that it is not well documented...</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this nested loop to cap threads to a variable.
This code relies on a preset array of commands to process.
I have borrowed some elements from other answers for thread launch.</p>
<pre><code>import os, sys, datetime, logging, thread, threading, time
from random import randint

# set number of threads
threadcount = 20

# alltests is an array of test data

numbertests = len(alltests)
testcounter = numbertests

# run tests
for test in alltests:
    # launch worker thread
    def worker():
        """thread worker function"""
        os.system(command)
        return
    threads = []
    t = threading.Thread(target=worker)
    threads.append(t)
    t.start()
    testcounter -= 1
    # cap the threads if over limit
    while threading.active_count() &gt;= threadcount:
        threads = threading.active_count()
        string = "Excessive threads, pausing 5 secs - " + str(threads) 
        print (string)
        logging.info(string)
        time.sleep(5)

# monitor for threads winding down
while threading.active_count() != 1:
    threads = threading.active_count()
    string = "Active threads running - " + str(threads) 
    print (string)
    logging.info(string)
    time.sleep(5)
</code></pre>
</div>
<span class="comment-copy">Just monitor the threads alive and block until one of the threads exits if there are 10 of them or more.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1787397/how-do-i-limit-the-number-of-active-threads-in-python">How do I limit the number of active threads in python?</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/3033952/python-thread-pool-similar-to-the-multiprocessing-pool">Python thread pool similar to the multiprocessing Pool?</a></span>
<span class="comment-copy">what if multiple params ?</span>
<span class="comment-copy">This is also possible. Take a look at <a href="https://stackoverflow.com/questions/6785226/pass-multiple-parameters-to-concurrent-futures-executor-map/6976772#6976772">this nice answer</a>.</span>
