<div class="post-text" itemprop="text">
<p>In modern versions of Ppython one can have static type analysis using function annotations, according to <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a>. This is made easy through the typing module.</p>
<p>Now I'm wondering how I would give a "type hint" towards a "filestream".</p>
<pre><code>def myfunction(file: FILETYPE):
    pass

with open(fname) as file:
    myfunction(file)
</code></pre>
<p>What would I insert as <code>FILETYPE</code>?</p>
<p>Using <code>print(type(file))</code> returns <code>&lt;class '_io.TextIOWrapper'&gt;</code> which isn't clear at all.</p>
<p>Isn't there a generic "file" type?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you want <a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="noreferrer"><code>io.IOBase</code></a>, "[t]he abstract base class for all I/O classes, acting on streams of bytes."</p>
<p>Note that this includes also in-memory streams like <code>io.StringIO</code> and <code>io.BytesIO</code>. Read the documentation on the <a href="https://docs.python.org/3/library/io.html" rel="noreferrer">module <code>io</code></a> for details.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>typing.IO</code>, <code>typing.TextIO</code>, and <code>typing.BinaryIO</code> to represent different types of I/O streams. To quote the <a href="https://docs.python.org/3/library/typing.html#typing.io" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p><em>class</em> typing.<strong>io</strong> </p>
<p>    Wrapper namespace for I/O stream types.  </p>
<p>    This defines the generic type <code>IO[AnyStr]</code> and aliases <code>TextIO</code> and <code>BinaryIO</code> for<br/>
      respectively <code>IO[str]</code> and <code>IO[bytes]</code>. These represent the
  types of I/O streams such<br/>
      as returned by <a href="https://docs.python.org/3/library/functions.html#open" rel="noreferrer"><code>open()</code></a>.</p>
<p>    These types are also accessible directly as <code>typing.IO</code>, <code>typing.TextIO</code>, and<br/>
      <code>typing.BinaryIO</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Either this:</p>
<pre><code>from typing import TextIO # or IO or BinaryIO

def myfunction(file: TextIO ):
    pass
</code></pre>
<p><strong>OR</strong> this</p>
<pre><code>from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from typing import TextIO # or IO or BinaryIO

def myfunction(file: 'TextIO'):
    pass
</code></pre>
<p>The second approach would avoid to import the class during execution. Although python would still have to import <code>TYPE_CHECKING</code> during execution, it is a good practice to avoid importing classes for type hinting only:  (1) doesn't get executed (just parsed), and (2) it could avoid cyclic import. </p>
</div>
<span class="comment-copy">Must the annotation refer to a physical file on disk, or can it also include file-like objects like <code>StringIO</code>?</span>
<span class="comment-copy">Just as a comment: while this is the "best" answer I might get. The problem is still not solved with this. A lot of things depend on _io._base and derivatives from that. There is no "generic" top layer for both <code>_io._base</code> and <code>io.base</code> though?</span>
<span class="comment-copy">@paul23 I don't understand what you mean. AFAIK <code>io.IOBase</code> is the best type hint towards a "bytestream" and every file-like object that can be created using the standard library is an instance of it. If <code>IOBase</code> does not match your idea of a bytestream or you have a use case where it's not a good type hint you might want to edit your question and explain why.</span>
<span class="comment-copy">for example if you open a in memory byte stream with BytesIO; This derives from <code>_BufferedIOBase</code> which derives from <code>_IOBase</code></span>
<span class="comment-copy">@paul23 How is that a problem? Just in case you didn't notice,  <code>io.BytesIO</code> also inherits from <code>io.IOBase</code>.</span>
