<div class="post-text" itemprop="text">
<p>I am using <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a> for making copies of generators which yield dictionaries and pass the iterated dictionaries to functions that I don't have control about and that may modify the dictionaries. Thus, I would like to pass <em>copies</em> of the dictionaries to the functions, but all the tees yield just references to the same instance.</p>
<p>This is illustrated by the following simple example:</p>
<pre><code>import itertools

original_list = [{'a':0,'b':1}, {'a':1,'b':2}]
tee1, tee2 = itertools.tee(original_list, 2)

for d1, d2 in zip(tee1, tee2):
    d1['a'] += 1
    print(d1)
    d2['a'] -= 1
    print(d2)
</code></pre>
<p>The output is:</p>
<pre><code>{'b': 1, 'a': 1}
{'b': 1, 'a': 0}
{'b': 2, 'a': 2}
{'b': 2, 'a': 1}
</code></pre>
<p>While I would like to have:</p>
<pre><code>{'b': 1, 'a': 1}
{'b': 1, 'a': -1}
{'b': 2, 'a': 2}
{'b': 2, 'a': 0}
</code></pre>
<p>Of course, in this example there would be many ways to work around this easily, but due to my specific use case, I need a version of <code>itertools.tee</code> that stores copies of all iterated objects in the queues of the tees instead of references to the original.</p>
<p>Is there a straightforward way to do this in Python or would I have to re-implement <code>itertools.tee</code> in a non-native and, hence, inefficient way?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no need to rework <code>tee</code>. Just wrap each generator produced by <code>tee</code> in a <code>map(dict, ...)</code> generator:</p>
<pre><code>try:
    # use iterative map from Python 3 if this is Python 2
    from future_builtins import map
except ImportError:
    pass

tee1, tee2 = itertools.tee(original_list, 2)
tee1, tee2 = map(dict, tee1), map(dict, tee2)
</code></pre>
<p>This automatically produces a shallow copy of each dictionary as you iterate. </p>
<p>Demo (using Python 3.6):</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; original_list = [{'a':0,'b':1}, {'a':1,'b':2}]
&gt;&gt;&gt; tee1, tee2 = itertools.tee(original_list, 2)
&gt;&gt;&gt; tee1, tee2 = map(dict, tee1), map(dict, tee2)
&gt;&gt;&gt; for d1, d2 in zip(tee1, tee2):
...     d1['a'] += 1
...     print(d1)
...     d2['a'] -= 1
...     print(d2)
...
{'a': 1, 'b': 1}
{'a': -1, 'b': 1}
{'a': 2, 'b': 2}
{'a': 0, 'b': 2}
</code></pre>
</div>
