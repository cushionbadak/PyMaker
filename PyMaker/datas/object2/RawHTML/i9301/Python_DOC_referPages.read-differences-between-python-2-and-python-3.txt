<div class="post-text" itemprop="text">
<p>With the following MWE:</p>
<pre><code>with open('a','w') as f:
    f.write('\r')
with open('a','r') as f:
    print(ord(f.read()))
</code></pre>
<p>I get the following output:</p>
<pre><code>$ python2 test.py 
13
$ python3 test.py 
10
</code></pre>
<p>Can you explain why? <code>13</code> is the expected decimal number of <code>\r</code> in ascii and UTF-8 as far as I can tell.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#open">Python 3's <code>open</code></a> defaults to universal newlines mode (<code>newline=None</code>), while <a href="https://docs.python.org/2/library/functions.html#open">Python 2's <code>open</code></a> only enables universal newlines mode if the mode string include <code>U</code>.</p>
<p>In universal newlines mode, a sequence <code>\r</code> (old Mac), <code>\n</code> (UNIX) or <code>\r\n</code> (DOS/Windows) are all recognized as newlines, and automatically converted to <code>\n</code> so line endings have a consistent representation to simplify string manipulation.</p>
<p>If you want universal newlines in Python 2, you can either use the mode string to enable it or <a href="https://docs.python.org/2/library/io.html#io.open">use <code>io.open</code></a>, which is a near exact equivalent of Python 3's built-in <code>open</code> (<code>io.open</code> on Python 3 is just another way to say <code>open</code>).</p>
<p>If you want to disable universal newlines handling on Python 3, pass <code>open</code> an argument of <code>newline=''</code> (for universal recognition for the purposes of breaking lines when reading/iterating, but no translation of line endings) or <code>newline='\n'</code> (for example) to mean only <code>\n</code> is recognized as a line ending at all, and again, no translation of line endings is performed. Passing <code>newline=''</code> is required to properly handle certain file formats; the <code>csv</code> module performs its own line ending handling, and <code>newline=''</code> ensures no information is lost before it reaches the <code>csv</code> reader.</p>
</div>
<span class="comment-copy"><code>ord('\n')</code> will give you 10. ShadowRanger has explained the reasons.</span>
<span class="comment-copy">great, thanks. I thought we were over this 'old mac' stuff by now...</span>
<span class="comment-copy">@noleti: We will never, ever be over it. I expect to go to my grave with most languages created before 2010 or based on pre-2010 languages still treating <code>\r</code> specially, and quite a few new languages continuing to do so out of habit. It's not like <code>\r</code> is commonly used on its own anyway; if people are seeing it in text inputs, it's either hacky console control redirected to a file, or it was intended to act as a newline; either way, treating it as a newline is going to be more reasonable than ignoring it in most cases.</span>
