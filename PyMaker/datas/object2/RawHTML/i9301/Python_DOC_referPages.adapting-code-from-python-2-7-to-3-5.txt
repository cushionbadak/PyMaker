<div class="post-text" itemprop="text">
<p>I'm trying to reload a module I have already imported in Python 3. I know that you only need to import once and executing the <code>import</code> command again won't do anything. </p>
<p>Executing <code>reload(foo)</code> is giving this error:</p>
<pre><code>Traceback (most recent call last):
    File "(stdin)", line 1, in (module)
    ...
NameError: name 'reload' is not defined
</code></pre>
<p>What does the error mean?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#reload" rel="noreferrer"><code>reload</code></a> is a builtin in Python 2, but not in Python 3, so the error you're seeing is expected.</p>
<p>If you truly must reload a module in Python 3, you should use either:</p>
<ul>
<li><a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="noreferrer"><code>importlib.reload</code></a> for Python 3.4 and above</li>
<li><a href="https://docs.python.org/3/library/imp.html#imp.reload" rel="noreferrer"><code>imp.reload</code></a> for Python 3.0 to 3.3 (deprecated since Python 3.4 in favour of <a href="https://docs.python.org/3/library/importlib.html" rel="noreferrer"><code>importlib</code></a>) </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>For &gt;= Python3.4:</em></strong></p>
<pre><code>import importlib
importlib.reload(module)
</code></pre>
<p><strong><em>For &lt;= Python3.3:</em></strong></p>
<pre><code>import imp
imp.reload(module)
</code></pre>
<p><strong><em>For Python2.x:</em></strong></p>
<p>Use the in-built <code>reload()</code> function.</p>
<pre><code>reload(module)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import imp
imp.reload(script4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To expand on the previously written answers, if you want a single solution which will work across Python versions 2 and 3, you can use the following:</p>
<pre><code>try:
    reload  # Python 2.7
except NameError:
    try:
        from importlib import reload  # Python 3.4+
    except ImportError:
        from imp import reload  # Python 3.0 - 3.3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>
I recommend using the following snippet as it works in all python versions (requires <code>six</code>):</p>
<pre class="lang-py prettyprint-override"><code>from six.moves import reload_module
reload_module(module)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For python2 and python3 compatibility, you can use:</p>
<pre><code># Python 2 and 3
from imp import reload
reload(mymodule)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You deleted your __builtins__ variable. </p>
<p>How to fix this? Don't delete __builtins__.</p>
<blockquote>
<p>Also can someone explain step by step what that error message means?</p>
</blockquote>
<p>It means python can't find the function "reload".</p>
<blockquote>
<p>reload (script4.py)</p>
</blockquote>
<p>This is incorrect. if you did "import script4", then you must do "reload(script4)"</p>
</div>
<span class="comment-copy">This answer makes it sound like it's bad to reload a module in Python 3. What's the thinking behind this?</span>
<span class="comment-copy">Reloading is always problematic.  Reloading updates module variables, but does not remove old ones, so if you rename something the old name will still exist.  If you change class definitions, existing objects will still have the old type.  Finally, some modules run code at import time that isn't designed to run twice.  So it is better to avoid reloading, but frequently very convenient.</span>
<span class="comment-copy">I would say that it is <i>often</i> problematic, but not <i>always</i>.  To be sure, I think the valid use cases for writing <code>reload</code> into a script are <i>very</i> rare indeed, and those employing that sort of dark art are unlikely to be reading this comment.  However, if you are developing a module and using an IPython console to test it interactively, then <code>reload</code> can be handy in that work flow.  As @Evan said, though, watch out for import-time side-effects.  In general, I would say to avoid <code>reload</code>ing someone else's modules.  <code>reload</code>ing your own makes sense during design-time.</span>
<span class="comment-copy">I use Jupyter notebook for my work, and in order to keep things tidy, I put work that should require minimum revisions into importable packages.  However, those things sometimes need revisions, and reloading is absolutely the right thing to do, since my notebook kernel is holding in memory calculations that took, literally, all day to compute.</span>
<span class="comment-copy">Deprecated since Python 3.4 - use <code>importlib</code> instead.</span>
<span class="comment-copy">Isn't moving from Python 2 to 3 so much fun?</span>
<span class="comment-copy">very helpful! thanks.</span>
<span class="comment-copy">@speedplane I am having fun since past 7 days :P</span>
<span class="comment-copy">This works in Python 3.7 (and earlier), but is depricated as @Alex Martelli wrote below.    Use Alleo's answer 'from six.moves import reload_module'</span>
<span class="comment-copy">i am getting the same error but my <b>builtins</b>  exists</span>
<span class="comment-copy">Where is the part where he's deleting <code>__builtins__</code></span>
