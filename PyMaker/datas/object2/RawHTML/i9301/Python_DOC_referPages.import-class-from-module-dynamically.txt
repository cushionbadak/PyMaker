<div class="post-text" itemprop="text">
<p>I have class called <code>'my_class'</code> placed in <code>'my_module'</code>. And I need to import this class. I tried to do it like this:</p>
<pre><code>import importlib
result = importlib.import_module('my_module.my_class')
</code></pre>
<p>but it says:</p>
<pre><code>ImportError: No module named 'my_module.my_class'; 'my_module' is not a package
</code></pre>
<p>So. As I can see it works only for modules, but can't handle classes. How can I import a class from a module?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is expecting <code>my_module</code> to be a package containing a module named <code>'my_class'</code>. If you need to import a class, or an attribute in general, dynamically, just use <code>getattr</code> after you import the module:</p>
<pre><code>cls = getattr(import_module('my_module'), 'my_class')
</code></pre>
<p>Also, yes, it does only work with modules. Remember <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="noreferrer"><code>importlib.import_module</code></a> is a wrapper of the internal <a href="https://docs.python.org/3/library/importlib.html#importlib.__import__" rel="noreferrer"><code>importlib.__import__</code></a> function. It doesn't offer the same amount of functionality as the full <code>import</code> statement which, coupled with <code>from</code>, performs an attribute look-up on the imported module.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import importlib
import logging

logger = logging.getLogger(__name__)


def factory(module_class_string, super_cls: type = None, **kwargs):
    """
    :param module_class_string: full name of the class to create an object of
    :param super_cls: expected super class for validity, None if bypass
    :param kwargs: parameters to pass
    :return:
    """
    module_name, class_name = module_class_string.rsplit(".", 1)
    module = importlib.import_module(module_name)
    assert hasattr(module, class_name), "class {} is not in {}".format(class_name, module_name)
    logger.debug('reading class {} from module {}'.format(class_name, module_name))
    cls = getattr(module, class_name)
    if super_cls is not None:
        assert issubclass(cls, super_cls), "class {} should inherit from {}".format(class_name, super_cls.__name__)
    logger.debug('initialising {} with params {}'.format(class_name, kwargs))
    obj = cls(**kwargs)
    return obj
</code></pre>
</div>
<span class="comment-copy">Avoid code-only answers. Add some text to describe what is going on for people who might not understand it. Also, using <code>hasattr</code> with an <code>assert</code> is counter-intuitive; let <code>getattr</code> throw its exception instead.</span>
