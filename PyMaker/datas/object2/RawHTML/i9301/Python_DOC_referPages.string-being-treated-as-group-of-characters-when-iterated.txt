<div class="post-text" itemprop="text">
<p>First, I've sorted out my issue when I found this:
<a href="https://stackoverflow.com/questions/20968823/in-python-iterate-over-each-string-in-a-list">in python: iterate over each string in a list</a></p>
<p>Originally I was getting what I thought was weird behavior when I would iterate over a "list" with a single string.  In those instances, the string was being treated as a group of characters, and the iteration was sequentially returning each character in the string.</p>
<p>Being new to Python, I did not realize there's a somewhat strict difference between using [] and () to define a list.  My list definitions were using ().  However, when the lists would contain more than one string, the iteration was return each complete string sequentially.  To illustrate:</p>
<pre><code>list = ('string')
for i in list:
    print i
</code></pre>
<p>Output:</p>
<pre><code>s
t
r
i
n
g
</code></pre>
<p>But if i do this, that is, add a second string to the () group:</p>
<pre><code>list = ('string','another string')
for i in list:
    print i
</code></pre>
<p>It gets treated as if I used [] (as you're supposed to).  Output:</p>
<pre><code>string
another string
</code></pre>
<p>Now, I get the expected behavior either way if I use [] to define my lists, so that's what I'm doing now.  I just thought this was interesting behavior.</p>
<p>Can someone point me towards some documentation that explains the way Python interprets parens, especially relative to strings? </p>
<p>I didn't see anything in the Python docs for data structures:
<a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html</a></p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because parentheses don't define lists.  They sometimes define tuples <code>(a, b)</code>, which are similar to lists, but even in the code you provide, that is not a tuple.</p>
<pre><code>('string')
</code></pre>
<p>Is a parenthesized expression.  It's value is <code>'string'</code>.</p>
<pre><code>('string',)
</code></pre>
<p>Is a 1-tuple that contains a single element, the string <code>'string'</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>In the first case, the parenthesis are ambiguous. Do you mean a single element tuple or do you mean a parenthesized expression? The Python parser assumes parenthesized expression. You then are iterating over the string:</p>
<pre><code>&gt;&gt;&gt; li = ('string')
&gt;&gt;&gt; li
'string'
</code></pre>
<p>This is in contrast to creating a list literal or set literal with a single string literal since there is no ambiguity what you mean:</p>
<pre><code>&gt;&gt;&gt; ['string']
['string']
&gt;&gt;&gt; {'string'}
set(['string'])
</code></pre>
<p>In the second case, you are creating a tuple with two elements and then iterating over that tuple:</p>
<pre><code>&gt;&gt;&gt; li = ('string','another string')
&gt;&gt;&gt; li
('string', 'another string')
</code></pre>
<p>If you want the first case to act like the second case, add a comma to create a one element tuple:</p>
<pre><code>&gt;&gt;&gt; li = ('string',)
&gt;&gt;&gt; li
('string',)
</code></pre>
<p>Or, you do not have to use parenthesis to define a tuple:</p>
<pre><code>&gt;&gt;&gt; 'string','another string'
('string', 'another string')
&gt;&gt;&gt; 'string',
('string',)
</code></pre>
<p>The tuple constructor in this case is the comma which allows this idiom in Python for swapping values without a temporary variable:</p>
<pre><code>&gt;&gt;&gt; a='string'
&gt;&gt;&gt; b='another string'
&gt;&gt;&gt; a,b=b,a
&gt;&gt;&gt; a
'another string'
&gt;&gt;&gt; b
'string'
</code></pre>
<hr/>
<p>(And please do not use <code>list</code> as a variable name. That redefines the <code>list</code> function...)</p>
</div>
<span class="comment-copy">Please don't use <code>list</code> as a variable name. That trashes the reference to the <code>list</code> function</span>
<span class="comment-copy">In Python strings are sequences of characters and characters are one character strings. <code>list</code>s are also sequences (of anything) and sometimes it can seem difficult to tell them apart.</span>
<span class="comment-copy">Note that <code>tuples</code> are immutable. Elements cannot be added or removed. True <code>list</code> objects are denoted with brackets <code>[ 1, 2, 3 ]</code>, and unlike parenthesis, <code>[ 1 ]</code> is actually a 1-element list</span>
<span class="comment-copy">thank you for that.  And yes, typically I would not do something like that with variable names, this was just quick and dirty pseudo-ish code.  :)</span>
