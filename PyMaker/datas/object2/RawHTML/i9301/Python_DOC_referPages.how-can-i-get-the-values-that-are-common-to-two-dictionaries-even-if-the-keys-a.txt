<div class="post-text" itemprop="text">
<p>Starting from two different dictionaries:</p>
<pre class="lang-py prettyprint-override"><code>dict_a = {'a': 1, 'b': 3, 'c': 4, 'd': 4, 'e': 6}
dict_b = {'d': 1, 'e': 6, 'a': 3, 'v': 7}
</code></pre>
<p>How can I get the common values even if they have different keys? Considering the above dictionaries, I would like to have this output:</p>
<pre class="lang-py prettyprint-override"><code>common = [1, 3, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create sets from the values:</p>
<pre><code>list(set(dict_a.values()) &amp; set(dict_b.values()))
</code></pre>
<p>This creates an intersection of the unique values in either dictionary:</p>
<pre><code>&gt;&gt;&gt; dict_a = {'a': 1, 'b': 3, 'c': 4, 'd': 4, 'e': 6}
&gt;&gt;&gt; dict_b = {'d': 1, 'e': 6, 'a': 3, 'v': 7}
&gt;&gt;&gt; list(set(dict_a.values()) &amp; set(dict_b.values()))
[1, 3, 6]
</code></pre>
<p>Unfortunately, we can't use <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary views</a> here (which can act like sets), because dictionary values are not required to be unique. Had you asked for just the keys, or the key-value pairs, the <code>set()</code> calls would not have been necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>commom = [item for item in dict_b.values() if item in dict_a.values()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The intersection expression <code>&amp;</code> requires 2 sets but the method counterpart can work with any iterable, like dict.values. So here is another version of the Martijn Pieters solution :</p>
<pre><code>list(set(dict_a.values()).intersection(dict_b.values()))
</code></pre>
<p>My 2 cents :)</p>
</div>
<span class="comment-copy">+ 1 Thanks, your solution also works but I think it could be slower than the one proposed by @Martijn Pieters.</span>
