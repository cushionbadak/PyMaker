<div class="post-text" itemprop="text">
<p>I need to find out how to format numbers as strings. My code is here:</p>
<pre><code>return str(hours)+":"+str(minutes)+":"+str(seconds)+" "+ampm
</code></pre>
<p>Hours and minutes are integers, and seconds is a float.  the str() function will convert all of these numbers to the tenths (0.1) place.  So instead of my string outputting "5:30:59.07 pm", it would display something like "5.0:30.0:59.1 pm".</p>
<p>Bottom line, what library / function do I need to do this for me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Formatting in Python is done via the <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting" rel="noreferrer">string formatting (<code>%</code>) operator</a>:</p>
<pre><code>"%02d:%02d:%02d" % (hours, minutes, seconds)
</code></pre>
<p>/Edit: There's also <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="noreferrer">strftime</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting in Python 2.6, there is an alternative: the <code>str.format()</code> method. Here are some examples using the existing string format operator (<code>%</code>):</p>
<pre><code>&gt;&gt;&gt; "Name: %s, age: %d" % ('John', 35) 
'Name: John, age: 35' 
&gt;&gt;&gt; i = 45 
&gt;&gt;&gt; 'dec: %d/oct: %#o/hex: %#X' % (i, i, i) 
'dec: 45/oct: 055/hex: 0X2D' 
&gt;&gt;&gt; "MM/DD/YY = %02d/%02d/%02d" % (12, 7, 41) 
'MM/DD/YY = 12/07/41' 
&gt;&gt;&gt; 'Total with tax: $%.2f' % (13.00 * 1.0825) 
'Total with tax: $14.07' 
&gt;&gt;&gt; d = {'web': 'user', 'page': 42} 
&gt;&gt;&gt; 'http://xxx.yyy.zzz/%(web)s/%(page)d.html' % d 
'http://xxx.yyy.zzz/user/42.html' 
</code></pre>
<p>Here are the equivalent snippets but using <code>str.format()</code>:</p>
<pre><code>&gt;&gt;&gt; "Name: {0}, age: {1}".format('John', 35) 
'Name: John, age: 35' 
&gt;&gt;&gt; i = 45 
&gt;&gt;&gt; 'dec: {0}/oct: {0:#o}/hex: {0:#X}'.format(i) 
'dec: 45/oct: 0o55/hex: 0X2D' 
&gt;&gt;&gt; "MM/DD/YY = {0:02d}/{1:02d}/{2:02d}".format(12, 7, 41) 
'MM/DD/YY = 12/07/41' 
&gt;&gt;&gt; 'Total with tax: ${0:.2f}'.format(13.00 * 1.0825) 
'Total with tax: $14.07' 
&gt;&gt;&gt; d = {'web': 'user', 'page': 42} 
&gt;&gt;&gt; 'http://xxx.yyy.zzz/{web}/{page}.html'.format(**d) 
'http://xxx.yyy.zzz/user/42.html'
</code></pre>
<p>Like Python 2.6+, all Python 3 releases (so far) understand how to do both. I shamelessly ripped this stuff straight out of <a href="http://amzn.com/0132269937" rel="noreferrer">my hardcore Python intro book</a> and the slides for the Intro+Intermediate <a href="http://cyberwebconsulting.com" rel="noreferrer">Python courses I offer</a> from time-to-time. <code>:-)</code></p>
<p><strong>Aug 2018 UPDATE</strong>: Of course, now that we have <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">the f-string feature in 3.6</a>, we need the equivalent examples of <em>that</em>, yes another alternative:</p>
<pre><code>&gt;&gt;&gt; name, age = 'John', 35
&gt;&gt;&gt; f'Name: {name}, age: {age}'
'Name: John, age: 35'

&gt;&gt;&gt; i = 45
&gt;&gt;&gt; f'dec: {i}/oct: {i:#o}/hex: {i:#X}'
'dec: 45/oct: 0o55/hex: 0X2D'

&gt;&gt;&gt; m, d, y = 12, 7, 41
&gt;&gt;&gt; f"MM/DD/YY = {m:02d}/{d:02d}/{y:02d}"
'MM/DD/YY = 12/07/41'

&gt;&gt;&gt; f'Total with tax: ${13.00 * 1.0825:.2f}'
'Total with tax: $14.07'

&gt;&gt;&gt; d = {'web': 'user', 'page': 42}
&gt;&gt;&gt; f"http://xxx.yyy.zzz/{d['web']}/{d['page']}.html"
'http://xxx.yyy.zzz/user/42.html'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Python 2.6+</h2>
<p>It is possible to use the <code>format()</code> function, so in your case you can use:</p>
<pre><code>return '{:02d}:{:02d}:{:.2f} {}'.format(hours, minutes, seconds, ampm)
</code></pre>
<p>There are multiple ways of using this function, so for further information you can check the <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer">documentation</a>.</p>
<h2>Python 3.6+</h2>
<p>f-strings is a new feature that has been added to the language in Python 3.6. This facilitates formatting strings notoriously:</p>
<pre><code>return f'{hours:02d}:{minutes:02d}:{seconds:.2f} {ampm}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use C style string formatting:</p>
<pre><code>"%d:%d:d" % (hours, minutes, seconds)
</code></pre>
<p>See here, especially: <a href="https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html" rel="nofollow noreferrer">https://web.archive.org/web/20120415173443/http://diveintopython3.ep.io/strings.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use following to achieve desired functionality</p>
<pre><code>"%d:%d:d" % (hours, minutes, seconds)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>str()</em> in python on an integer will <strong>not</strong> print any decimal places.</p>
<p>If you have a float that you want to ignore the decimal part, then you can use str(int(floatValue)).</p>
<p>Perhaps the following code will demonstrate:</p>
<pre><code>&gt;&gt;&gt; str(5)
'5'
&gt;&gt;&gt; int(8.7)
8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have a value that includes a decimal, but the decimal value is negligible (ie: 100.0) and try to int that, you will get an error.  It seems silly, but calling float first fixes this.</p>
<p>str(int(float([variable])))</p>
</div>
<span class="comment-copy">The code in the question uses "str()", the code in Konrad's answer doesen't. So here is a simple example: <code>myFloat = 4.55</code> <code>myString = '%d' % (myFloat)</code> <code>print myString</code></span>
<span class="comment-copy">For other instances using floats (if you want to show decimals) you should use <code>%f</code> instead of <code>%d</code></span>
<span class="comment-copy">@jocull True but this method is deprecated in favour of <code>str.format</code> anyway, and there format strings work entirely different.</span>
<span class="comment-copy">In my opinion, <code>str.format()</code> is the right answer here, especially <code>'{:.2f}'.format(3.145159)</code>. Nice answer!</span>
<span class="comment-copy"><a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></span>
<span class="comment-copy">how's your "answer" related to the question?</span>
<span class="comment-copy">@SilentGhost is correct: rather than another "answer," this response should've been posted as a comment to the OP.</span>
