<div class="post-text" itemprop="text">
<p>What is the intended way to change directory using the Python <code>pathlib</code> <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">(Documentation)</a> functionality?</p>
<p>Lets assume I create a <code>Path</code> object as follows:</p>
<pre><code>from pathlib import Path
path = Path('/etc')
</code></pre>
<p>Currently I just know the following, but that seems to undermine the idea of <code>pathlib</code>.</p>
<pre><code>import os
os.chdir(str(path))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the comments I realized that <code>pathlib</code> does not help changing directories and that directory changes should be avoided if possible.</p>
<p>Since I needed to call bash scripts outside of Python from the correct directory, I opted for using a context manager for a cleaner way of changing directories similar to this <a href="https://stackoverflow.com/a/431747/911441">answer</a>:</p>
<pre><code>import os
import contextlib
from pathlib import Path

@contextlib.contextmanager
def working_directory(path):
    """Changes working directory and returns to previous on exit."""
    prev_cwd = Path.cwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(prev_cwd)
</code></pre>
<p>A good alternative is to use the <code>cwd</code> parameter of the <code>subprocess.Popen</code> class as in this <a href="https://stackoverflow.com/a/1685166/911441">answer</a>.</p>
<p>If you are using Python &lt;3.6 and <code>path</code> is actually a <code>pathlib.Path</code>, you need <code>str(path)</code> in the <code>chdir</code> statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the Python 3.6 or above, <code>os.chdir()</code> can deal with <code>Path</code> object directly. In fact, the <code>Path</code> object can replace most <code>str</code> paths in standard libraries.</p>
<blockquote>
<p>os.<strong>chdir</strong>(path) Change the current working directory to path.</p>
<p>This function can support specifying a file descriptor. The descriptor
  must refer to an opened directory, not an open file.</p>
<p>New in version 3.3: Added support for specifying path as a file
  descriptor on some platforms.</p>
<p>Changed in version 3.6: Accepts a <a href="https://docs.python.org/3/glossary.html#term-path-like-object" rel="nofollow noreferrer">path-like object</a>.</p>
</blockquote>
<pre><code>import os
from pathlib import Path

path = Path('/etc')
os.chdir(path)
</code></pre>
<p>This may help in the future projects which do not have to be compatible with 3.5 or below.</p>
</div>
<div class="post-text" itemprop="text">
<p>For those who do not fear <a href="https://github.com/jaraco/path.py" rel="nofollow noreferrer">a third-party library</a>:</p>
<p><code>$ pip install path.py</code></p>
<p>then:</p>
<pre><code>from path import Path

# Changing the working directory:
with Path("somewhere"):
    # cwd in now `somewhere`
    ...
</code></pre>
<p>or if you want to do it without the context manager:</p>
<pre><code>Path("somewhere").cd()
# cwd in now `somewhere`
</code></pre>
</div>
<span class="comment-copy">changing the current directory is rarely a good idea anyway. Why do you need to change directory for?</span>
<span class="comment-copy">There is a small bash script I want to rewrite in Python. That way I can handle errors more easily than calling an external bash script.</span>
<span class="comment-copy">you don't have to use <code>pathlib</code> if you don't need it - <code>os.chdir('/etc')</code></span>
<span class="comment-copy">I feel like <code>pathlib</code> leads to more elegant code. But since <code>cd</code> is not elegant by any means, I might as well go with <code>os.chdir('/etc')</code>?</span>
<span class="comment-copy"><code>pathlib</code> is module to work with paths, not to change directory.</span>
<span class="comment-copy">Yes, that is very nice indeed. I hope the Python community either accepts <code>pathlib.Path</code> anywhere or abandons it altogether.</span>
