<div class="post-text" itemprop="text">
<p>i have this scenario</p>
<pre><code>x=['a','b','c']   #Header
y=[(1,2,3),(4,5,6)]   #data
</code></pre>
<p>I need to create below structure</p>
<pre><code>[{'a':1, 'b':2, 'c':3}, {'a':4, 'b':5, 'c':6}]
</code></pre>
<p>Any better way of doing this(like a python expert)</p>
<pre><code>rows=[]
for row in range(0,len(y)):
    rec={}
    for col in range(0, len(x)):
        rec[x[col]]=y[row][col]
    rows.append(rec)    
print(rows)
</code></pre>
<p>above code will give the desired result, but i am looking for a one liner solution some thing like below</p>
<pre><code>rows=list( ( {x[col]:y[row][col]} for row in range(0,len(y)) for col in range(0, len(x)) ) )
</code></pre>
<p>output: </p>
<pre><code>[{'a': 1}, {'b': 2}, {'c': 3}, {'a': 4}, {'b': 5}, {'c': 6}]
</code></pre>
<p>but this gives list as individual dict's rather than a combined dict. Any ideas???</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write a generator that iterates over data. Then for each item in data use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to generate iterable of <code>(header, value)</code> tuples that you pass to <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer"><code>dict</code></a>:</p>
<pre><code>&gt;&gt;&gt; x = ['a','b','c']
&gt;&gt;&gt; y = [(1,2,3),(4,5,6)]
&gt;&gt;&gt; gen = (dict(zip(x, z)) for z in y)
&gt;&gt;&gt; list(gen)
[{'a': 1, 'c': 3, 'b': 2}, {'a': 4, 'c': 6, 'b': 5}]
</code></pre>
<p><strong>Update</strong> The example above uses <em>generator expression</em> instead of <code>list</code> since the code writing CSV would only need one row at a time. Generating the full list would require much more memory with no benefit.</p>
</div>
<span class="comment-copy">why the generator?  a list comprehension does what's asked for: <code>[dict(zip(x,v)) for v in y]</code></span>
<span class="comment-copy">i'm sure the generator is in case OP has a large dataset and would like to optimize for memory efficiency. otherwise there's no issue</span>
<span class="comment-copy">@f5r5e5d Added reasoning for generator expression to answer</span>
<span class="comment-copy">Thank you, this is perfect.</span>
