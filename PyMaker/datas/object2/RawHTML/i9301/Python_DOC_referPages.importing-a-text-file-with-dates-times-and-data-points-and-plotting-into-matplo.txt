<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33397107/python-parsing-date-with-strptime">Python parsing date with strptime</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm starting out as a Research Assistant at a lab at UMD and I am having trouble with the coding aspect of the work. I am running python 2.7.12 w/ Anaconda 4.2.0. I was given a text file with the task of reading it into python and graphing it using matplotlib. The text file is in this format </p>
<blockquote>
<p>20170109 001203 379.00 22824.13 1.00</p>
</blockquote>
<p>where the last two columns can be ignored, the first is the date, the second is the time in <code>HH:MM:SS</code>. and the third column is <code>ppm (parts per million)</code>. </p>
<p>I have been able to read the data into python but have not figured out how to differentiate the first two columns as dates and times. I am thinking of doing something using datetime but am not sure what inputs I should use. From there I would like to plot the data with time (both <code>yyyy MMM dddd</code> and <code>HH MM SS</code>) on the x-axis, and ppm on the y-axis, using matplotlib through numpy.</p>
</div>
<div class="post-text" itemprop="text">
<p>To obtain the interesting part of the input, you can slice the input string</p>
<pre><code>input = '20170109 001203 379.00 22824.13 1.00'

input_date = input[:15]
print(input_date)

input_ppm = input[16:23]
print(input_ppm)
</code></pre>
<p>Later, use <code>strptime</code> function to parse a string into date with time.</p>
<pre><code>import datetime
dt = datetime.datetime.strptime(input_date, '%Y%m%d %H%M%S')
print(dt)
</code></pre>
<p>Now you can use <code>dt</code> as x-axis points. To see how to use dates in Matplotlib, you can check this <a href="http://matplotlib.org/examples/pylab_examples/date_demo2.html" rel="nofollow noreferrer">Matplotlib example</a>.</p>
<p>Good luck!</p>
<p><strong>EDIT</strong>
To read the file with multiple lines, you can use <code>readlines()</code> which will create a list. You can loop over that list to extract each line and parse it to date &amp; time.</p>
<p>Whole code now will look like this:</p>
<pre><code>import datetime

with open('filename.txt') as f:
    content = f.readlines()
# content is now a list of text line strings

# remove whitespaces, e.g. newline character
content = [x.strip() for x in content] 

for input in content:
    input_date = input[:15]
    print(input_date)

    input_ppm = input[16:23]
    print(input_ppm)

    dt = datetime.datetime.strptime(input_date, '%Y%m%d %H%M%S')
    print(dt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would start by splitting up the text file:</p>
<pre><code>text = '20170109 001203 379.00 22824.13 1.00'
texts = text.split(" ")
print(texts)
</code></pre>
<p>Then you could extract it bit by bit with date:</p>
<pre><code>date = datetime.strptime(texts[0], '%Y%m%d')
print("The day is {}".format(date.day))
time = datetime.strptime(texts[1], '%H%M%S')
print("The minute is {}".format(time.minute))
ppm = texts[2]
print("ppm is {}".format(ppm))
</code></pre>
<p>If you get stuck in the plotting you should open up a new question. I recommend going here <a href="http://matplotlib.org/gallery.html" rel="nofollow noreferrer">http://matplotlib.org/gallery.html</a> and clicking on a plot you like. It will provide all the code you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming all the date strings are going to have the same format...</p>
<pre><code>from datetime import datetime

input = "20170109 001203 379.00 22824.13 1.00"

list = input.split(" ") #Split the input into parts where blank space is the delimiter
date_and_time = str([' '.join(list[:2])]) #Merge the first item with the second and convert to string
#Insert all the white spaces we need to then convert to date time object
date_and_time = date_and_time[2:6]+' '+date_and_time[6:8]+' '+date_and_time[8:10]+' '+date_and_time[11:13]+' '+date_and_time[13:15]+' '+date_and_time[15:-2]

datetime_object = datetime.strptime(date_and_time, '%Y %m %d %H %M %S')
print (datetime_object)
</code></pre>
<p>The reason this is tricky is because you need to somehow differentiate between the different units of time when you do your string -&gt; date conversion. Code is very crude but it should provide some insight to your issue.</p>
</div>
<span class="comment-copy">Look at <a href="https://docs.python.org/3.5/library/csv.html" rel="nofollow noreferrer">csv</a>!</span>
<span class="comment-copy">You’re looking for the <code>strptime</code> method—there’s an example of how to use it in <a href="http://stackoverflow.com/questions/33397107/python-parsing-date-with-strptime">this question</a> and the <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">Thank you so much for this, this is a great start. The problem I'm running into now is that this works great for doing one line at a time but the text file contains multiple lines. Is there a way to do this in bulk so the entire file is read into this format? thanks in advance!</span>
<span class="comment-copy">@SebastianSuarez I edited the answer to add the information you asked for. Basically you read a file to a list of strings. Then you wrap previously used code with for loop. If it was helpful, you can sign it as an accepted answer</span>
