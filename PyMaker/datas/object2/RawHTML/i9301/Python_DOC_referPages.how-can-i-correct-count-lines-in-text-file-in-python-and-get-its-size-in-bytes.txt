<div class="post-text" itemprop="text">
<p>I have trouble to get correct values for an exercise with the following instructions.
Write a function that open a file for reading and returns the number of bytes and newlines('\n').</p>
<p>I should get values for <code>def readFile(tmp.txt)</code> is <code>(12, 4)</code>, but I got <code>(11, 5)</code>.</p>
<p>Where I am doing wrong and could you explain me in great details why is that.</p>
<pre><code>def readFile(filename):
    f = open(filename, 'r')
    size = 0 # Total size in bytes of all lines in a text file
    lines = 0 # Total number of lines
    buf = f.readline() # Read a line    
    while buf != "":
        buf = f.readline() # Read a line
        size += len(buf)
        lines += 1  # Count lines
    f.close  # Close a file              

    return (size, lines) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>os.path.getsize(filename) will return the number of bytes, see <a href="https://docs.python.org/3/library/os.path.html#os.path.getsize" rel="nofollow noreferrer">here</a>. With file.read() the entire contents of the .txt file can be read and returned, see <a href="https://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">here</a>. You can then use the method .count("\n") to count the number of occurrences of \n. I recommend reading the paragraphs on .close() and using the with keyword as well (see previous link).</p>
<p>Note: The following code snippets assume that tmp.txt is in the same folder as the .py file.</p>
<pre><code>import os


def read_file(filename):
    nr_of_bytes = os.path.getsize(filename)
    with open(filename, "r") as file:
        nr_of_newlines = file.read().count("\n")
    return nr_of_bytes, nr_of_newlines

print(read_file("tmp.txt"))
</code></pre>
<p>Shorter version:</p>
<pre><code>import os


def read_file(filename):
    with open(filename, "r") as file:
        nr_of_newlines = file.read().count("\n")
    return os.path.getsize(filename), nr_of_newlines

print(read_file("tmp.txt"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finaly I managed to get correct result. Here is a code, perhaps with unusual approach since some inbuilt functions mentioned above does not work while coding in Pyschool website.</p>
<pre><code>    def readFile(filename):
    f = open(filename, 'r')
    string1 = f.read()  # Read file
    size = len(string1) # Getting file size, assuming length of a string represent 
                        # file size (python 2.x)
    f.close             # We close file temporarily, once we read all bytes,
                        # we cannot read file again (based on my experience with Python, perhaps I am wrong)

    d = open(filename, 'r')      # Again we open same file
    lines = d.read().count("\n") # Counting '\n'
    d.close                      # We close file

    return (size, lines)         # Return result
</code></pre>
</div>
<span class="comment-copy">Can you share the contents of the tmp.txt you mentioned?</span>
<span class="comment-copy">Why are you throwing away the first <code>buf</code> that you read?</span>
<span class="comment-copy">Also, do the instructions say that you can't use inbuilt functions to do these things? Because os.path.getsize('tmp.txt') and open('tmp.txt','r').read().count('\n') would totally do the job otherwise.</span>
<span class="comment-copy">@PrateekDewan No, your first example would not work. He needs to get the size of the file <i><b>in bytes</b></i>. You example only returns the length of the file as a string.</span>
<span class="comment-copy">Yes, my bad. os.path.getsize(filepath) should do it.</span>
<span class="comment-copy">Updated my answer.</span>
<span class="comment-copy">Thank you all for a help.</span>
