<div class="post-text" itemprop="text">
<p>I am using python getters and setters, but I don't like using a dummy variable to store the value. For example, a simple getter and setter in python might be defined like so:</p>
<pre><code>class Foo(object):

    def get_bar(self):
        print('getting bar')
        return self._bar

    def set_bar(self,variable):
        print('setting bar')
        self._bar = variable

    bar = property(get_bar,set_bar)
</code></pre>
<p>Which makes bar work like a normal everyday attribute, except that it executes a print statement every time someone sets or reads it:</p>
<pre><code>&gt;&gt;&gt; my_fave_foo = Foo()
&gt;&gt;&gt; my_fave_foo.bar = 5
setting bar
&gt;&gt;&gt; print(my_fave_foo.bar)
getting bar
5
</code></pre>
<p>Until, that is, future me decides to use introspection to look at the attributes of my favorite Foo:</p>
<pre><code>&gt;&gt;&gt; print(my_fave_foo.__dict__)
{'_bar': 5}
</code></pre>
<p>This bugged me, even though I know it wasn't really a big problem, so I did this instead -</p>
<pre><code>class Foo(object):

    def get_bar(self):
        print('getting bar')
        return self.__dict__['bar']

    def set_bar(self,variable):
        print('setting bar')
        self.__dict__['bar'] = variable

    bar = property(get_bar,set_bar)
</code></pre>
<p>Which has the expected behavior</p>
<pre><code>&gt;&gt;&gt; my_fave_foo = Foo()
&gt;&gt;&gt; my_fave_foo.bar = 5
setting bar
&gt;&gt;&gt; my_fave_foo.bar
getting bar
5
&gt;&gt;&gt; print(my_fave_foo.__dict__)
{'bar': 5}
</code></pre>
<p>My question is: <strong>why is this a bad idea?</strong> Other people, for example in response to this question:</p>
<p><a href="https://stackoverflow.com/questions/2627002/whats-the-pythonic-way-to-use-getters-and-setters">What's the Pythonic way to use Getters and Setters?</a></p>
<p>Recommend the underscore convention. I get the feeling that there is something wrong with what I did, but I don't know what it is. So please tell me, <strong>What will go wrong with this?</strong></p>
<p>I will quickly note that this is a toy example, in my actual code there is a real reason to be using getters and setters.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am using python getters and setters, but I don't like using a dummy variable to store the value. </p>
</blockquote>
<p>Why not? The value has to live somewhere, and it is logically an instance variable. Python doesn't have public/private.</p>
<blockquote>
<p>Until, that is, future me decides to use introspection to look at the attributes of my favorite Foo:</p>
</blockquote>
<p>Don't do that then. <a href="http://docs.python-guide.org/en/latest/writing/style/#we-are-all-responsible-users" rel="nofollow noreferrer">We are all responsible users</a>.</p>
<blockquote>
<p>so I [named the instance variable the same as the property]. why is this a bad idea?</p>
</blockquote>
<p>Now you're relying on the fact that the property takes precedence over the dictionary item in order to understand this code. If the dictionary item and the property have <em>different names</em>, then it will be obvious to the introspecting user that some special behavior will be invoked.</p>
<blockquote>
<p>What will go wrong with this?</p>
</blockquote>
<p>Your code is misleading and will confuse you the next time you look at it.</p>
<p>If you like, you can use <code>self.__bar</code> for the internal state, which mangles the name to <code>self._Foo__bar</code>, which is a defense against clashes caused by subclasses. See <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">The Python Tutorial / Private Variables</a>.</p>
</div>
<span class="comment-copy">can't you use simply <code>self.bar</code> without all this getter/setter ?</span>
<span class="comment-copy">I wouldn't exactly call mutating the class in a constructor a "simple" exampleâ€¦</span>
<span class="comment-copy">Your indentation is off a bit... are you doing the <code>setattr</code> inside the <code>__init__</code>? Typically this is done once at the class level and not per-instance.</span>
<span class="comment-copy">Add prints to your getter and setter. You'll see that once you do <code>my_fave_boo.bar = 5</code>, the instance namespace now has a local variable called <code>bar</code> referencing an integer and the getters and setters aren't called any more.</span>
<span class="comment-copy">@tdelaney, I was doing it inside <code>__init__</code> - changing to the syntax to <code>bar = property(...,...)</code> outside of <code>__init__</code> seems to be the correct method?</span>
