<div class="post-text" itemprop="text">
<p>I'm really curious about <code>:s</code> format string in Python 3. <a href="https://docs.python.org/3/library/string.html#format-string-syntax">The documentation</a> says <code>!s</code> is <strong>conversion</strong> and that <code>:s</code> is <code>format_spec</code>.</p>
<p>It also says <code>!s</code> will apply <code>str()</code>, but it doesn't say anything similar about <code>:s</code>. I think there's no significant difference between them, but I want to be sure. Can anyone clarify these?</p>
<p>Some code example:</p>
<pre><code>print("{!s}".format("this"))
print("{:s}".format("that"))
# I want to be sure that these two are processed identically internally
</code></pre>
<p>It's still confusing, but let me wrap up with my own (layperson's) words.</p>
<ol>
<li><code>type("whatever".format)</code> is always <code>str</code>.</li>
<li>Use <code>!s</code> if you want convert the object into <code>str</code> before formatting.</li>
<li><code>:s</code> means that the object(or the converted object) will be treated as <code>str</code> during some internal formatting process. It's the default <code>format_spec</code>.</li>
</ol>
<p>Is anything wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>!s</code>, and its brethren <code>!a</code> and <code>!r</code> apply <code>str()</code>, <code>ascii()</code> and <code>repr()</code> respectively <strong>before</strong> interpolation and formatting. These are called <em>conversion flags</em>, and are part of the <a href="https://docs.python.org/3/library/string.html#format-string-syntax"><em>Format String Syntax</em> spec</a>, not the <a href="https://docs.python.org/3/library/string.html#formatspec">per-field formatting spec</a> applied to values when interpolating:</p>
<blockquote>
<p>The <em>conversion</em> field causes a type coercion <strong>before formatting</strong>. Normally, the job of formatting a value is done by the <code>__format__()</code> method of the value itself. <strong>However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting.</strong> By converting the value to a string before calling <code>__format__()</code>, the normal formatting logic is bypassed.</p>
</blockquote>
<p>Bold emphasis mine.</p>
<p><code>:s</code> only applies afterwards to the conversion result (or the original object if no conversion had been applied), and only if the <code>__format__</code> method for the type of object supports that formatting option. Usually, only objects of type <code>str</code> support this formatter; it's there as the default, mostly because the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language"><em>Format Specification Mini-Language</em></a> allows for the existence of a type character and because the older  <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting"><code>%</code> <code>printf</code>-style formatting</a> had a <code>%s</code> format. If you tried to apply the <code>s</code> type to an object that doesn't support it, you'd get an exception.</p>
<p>Use <code>!s</code> (or <code>!a</code> or <code>!r</code>) when you have an object that is not itself a string and either doesn't support formatting otherwise (not all types do) or would format differently from their <code>str()</code>, <code>ascii()</code> or <code>repr()</code> conversions:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __str__(self):
...         return "Foo as a string"
...     def __repr__(self):
...         return "&lt;Foo as repr, with åéæ some non-ASCII&gt;"
...     def __format__(self, spec):
...         return "Foo formatted to {!r} spec".format(spec)
...
&gt;&gt;&gt; print("""\
... Different conversions applied:
... !s: {0!s:&gt;60s}
... !r: {0!r:&gt;60s}
... !a: {0!a:&gt;60s}
... No conversions: {0:&gt;50s}
... """.format(Foo()))
Different conversions applied:
!s:                                    Foo as a string
!r:             &lt;Foo as repr, with åéæ some non-ASCII&gt;
!a:    &lt;Foo as repr, with \xe5\xe9\xe6 some non-ASCII&gt;
No conversions: Foo formatted to '&gt;50s' spec
</code></pre>
<p>Note: <em>all</em> formatting specified by the format spec are the responsibility of the <code>__format__</code> method; the last line does not apply the alignment operation in the <code>&gt;50s</code> formatting spec, the <code>Foo.__format__</code> method only used it as literal text in a formatting operation (using a <code>!r</code> conversion here).</p>
<p>For the converted values, on the other hand, the <code>str.__format__</code> method is used and the output is aligned to the right in a 50 character wide field, padded with spaces on the left.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're unlucky you used strings as the value to be formatted. Using pretty much any other object you'd get how these aren't the same.</p>
<p>In (as much as I can) layman's terms:</p>
<ul>
<li>The absence or existence of the conversion flag specifies <em>the type of the value we going to format</em> and, by extent, who's <code>__format__</code> we'll be calling. As Martjin points out, by using this we can bypass certain behavior and treat the value more generically (like a string). It comes in three different flavors that correspond to the three different ways an object can choose to represent itself as a string.</li>
<li>The type specifier, coupled with other specifiers, specifies <em>how the type we have should finally be presented</em>. For strings there isn't a rich set of options (a string is presented as is) but, for types like <code>int</code>s, you can have different presentations.</li>
</ul>
<p>I do think, though, that <code>type</code> is probably a confusing name to give this specifier.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation, <em><a href="https://docs.python.org/3.1/library/string.html#format-string-syntax" rel="nofollow noreferrer" title="Python String Formatting">Python String Formatting</a></em>:</p>
<blockquote>
<p>The field_name is optionally followed by a conversion field, which is preceded by an exclamation point '!', and a format_spec, which is preceded by a colon ':'.</p>
</blockquote>
<p>So no, it's not the same.</p>
<p>For example:</p>
<p>If you want to print a float as a string, you need a conversion (float → string).</p>
<pre><code>"{!s}".format(2.1457)
&gt;&gt;&gt; 2.1457
type("{!s}".format(2.1457))
&gt;&gt;&gt; &lt;type 'str'&gt;
</code></pre>
<p>If you don't use the conversion mark, you will get an error.</p>
<pre><code>"{:s}".format(2.1457)
&gt;&gt;&gt; ValueError: Unknown format code 's' for object of type 'float'
</code></pre>
</div>
<span class="comment-copy">"Conversion field" speaks for itself.</span>
<span class="comment-copy"><code>"..".format(..)</code> is <b>always</b> a string. Your <code>type()</code> demo makes little sense in this context, as it will <i>always be the same</i> regardless of what formatting specs or conversions have been applied to the formatted objects.</span>
<span class="comment-copy">Also, there are other format spec types that'll raise exceptions, even when you applied a <code>!s</code> conversion, like <code>i</code>.</span>
