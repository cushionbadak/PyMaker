<div class="post-text" itemprop="text">
<p>I have a very simple problem that I have been unable to find the solution to, so I thought I'd try my "luck" here.</p>
<p>I have a string that is created using variables and static text altogether. It is as follows:</p>
<pre><code>filename_gps = 'id' + str(trip_id) + '_gps_did' + did + '_start' + str(trip_start) + '_end' + str(trip_end) + '.json'
</code></pre>
<p>However my problem is that pylint is complaining about this string reprensentation as it is too long. And here is the problem. How would I format this string representation over multiple lines without it looking weird and still stay within the "rules" of pylint?</p>
<p>At one point I ended up having it looking like this, however that is incredible "ugly" to look at:</p>
<pre><code>filename_gps = 'id' + str(
    trip_id) + '_gps_did' + did + '_start' + str(
                trip_start) + '_end' + str(
                trip_end) + '.json'
</code></pre>
<p>I found that it would follow the "rules" of pylint if I formatted it like this:</p>
<pre><code>filename_gps = 'id' + str(
    trip_id) + '_gps_did' + did + '_start' + str(
    trip_start) + '_end' + str(
    trip_end) + '.json'
</code></pre>
<p>Which is much "prettier" to look at, but in case I didn't have the "str()" casts, how would I go about creating such a string?</p>
<p>I doubt that there is a difference between pylint for Python 2.x and 3.x, but if there is I am using Python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use so many <code>str()</code> calls. Use <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">string formatting</a>:</p>
<pre><code>filename_gps = 'id{}_gps_did{}_start{}_end{}.json'.format(
    trip_id, did, trip_start, trip_end)
</code></pre>
<p>If you do have a long expression with a lot of parts, you can create a longer logical line by using <code>(...)</code> parentheses:</p>
<pre><code>filename_gps = (
    'id' + str(trip_id) + '_gps_did' + did + '_start' +
    str(trip_start) + '_end' + str(trip_end) + '.json')
</code></pre>
<p>This would work for breaking up a string you are using as a template in a formatting operation, too:</p>
<pre><code>foo_bar = (
    'This is a very long string with some {} formatting placeholders '
    'that is broken across multiple logical lines. Note that there are '
    'no "+" operators used, because Python auto-joins consecutive string '
    'literals.'.format(spam))
</code></pre>
</div>
<span class="comment-copy">Thanks for clarifying! I didn't know you could use parenthesis for string representations.   I already did know about string formatting. I'm using it multiple times in my code already. Furthermore I didn't know you could omit numbers in the string format, e.g. <code>"some_string{0}".format(pass)</code>. I guess the above shared code was just a remnant from before I learned it, and for some reason I didn't think of if. Lol.</span>
