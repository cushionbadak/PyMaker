<div class="post-text" itemprop="text">
<p>I want to kind of implement my own <code>struct.pack</code> specific function to pack an IP string (i.e. "192.168.0.1") to a 32-bit packed value, without using the <code>socket.inet_aton</code> built in method.</p>
<p>I got so far:</p>
<pre><code>ip = "192.168.0.1"
hex_list = map(hex, map(int, ip.split('.')))
# hex list now is : ['0xc0', '0xa8', '0x0', '0x01']
</code></pre>
<p><strong>My question is:</strong>
How do I get from that <code>['0xc0', '0xa8', '0x0', '0x01']</code> to <code>'\xc0\xa8\x00\x01'</code>, (this is what I'm getting from <code>socket.inet_aton(ip)</code>?</p>
<p>(<strong>And also</strong> - How is it possible that there is a NUL (<code>\x00</code>) in the middle of that string? I think I lack some understanding of the <code>\x</code> format)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use string comprehension to format as you like:</p>
<pre><code>ip = "192.168.0.1"
hex_list = map(int, ip.split('.'))
hex_string = ''.join(['\\x%02x' % x for x in hex_list])
</code></pre>
<p>or as a one liner:</p>
<pre><code>hex_string = ''.join(['\\x%02x' % int(x) for x in ip.split('.')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative:</p>
<p>Can you use <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code></a> and <a href="https://docs.python.org/3.2/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>to_bytes</code></a> <sub>(python 3.2)</sub>?</p>
<pre><code>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; address = ipaddress.IPv4Address('192.168.0.1')
&gt;&gt;&gt; address_as_int = int(address)
&gt;&gt;&gt; address_as_int.to_bytes(4, byteorder='big')
b'\xc0\xa8\x00\x01'
</code></pre>
<p>Note that you may actually only need the integer.</p>
<p>Can be shorter obviously, but wanted to show all steps clearly :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Based loosely off @Stephen's answer but returns a string with the actual bytes rather than a string with literal slashes:</p>
<pre><code>def pack_ip(ip):
    num_list = map(int, ip.split('.'))
    return bytearray(num_list)

src_ip = pack_ip('127.0.0.255')
print(repr(src_ip))
</code></pre>
<p>Works in Python 2 and 3. Returns a <code>b''</code> rather than a string, matching best practice for Python3.</p>
</div>
<span class="comment-copy">I tried that, but I get '\\xc0\\xa8\\x00\\x01' which is not equal to  '\xc0\xa8\x00\x01' . Is it the same?</span>
<span class="comment-copy">the <code>\\ </code> is just Python's way of showing you a single <code>\ </code>. change the <code>'\\x%02x'</code> to <code>r'\x%02x'</code> and note that you get the same result.</span>
<span class="comment-copy">I know that, but will it be the same when I send this address over? Will it be the same as the value recieved by <code>socket.inet_aton</code>?</span>
<span class="comment-copy">escaping strings is somewhat of a black art.  the answer is: it depends.  Every step along the way you have the potential for someone to interpret the string and thus need some sort of escaping.  I was simply answering your question of how to get the indicated string.</span>
<span class="comment-copy">Thanks for your answer!</span>
<span class="comment-copy">Thank you for your answer!</span>
