<div class="post-text" itemprop="text">
<p>I have two functions func1 and func2 that are specific implementations of func0 that YIELDS its result:</p>
<pre><code>def func0(parameter, **kwargs):
    #do sth with kwargs and parameter
    yield result # result is html
</code></pre>
<p>how should I refer to func0 inside the "specific" functions to make them yield their results? Is return ok?</p>
<pre><code>def func1(**kwargs):
    return func0(parameter=1, **kwargs)

def func2(**kwargs):
    return func0(parameter=2, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use <code>return</code>, then <code>func1</code> will return the generator that is <code>func0</code>. Alternatively, if you use <code>yield from</code>, then the wrapping function becomes a generator itself, yielding the individual items from <code>func0</code>. The yielded elements are the same in both cases.</p>
<pre><code>def func1(**kwargs):
    return func0(parameter=1, **kwargs)

def func2(**kwargs):
    yield from func0(parameter=1, **kwargs)
</code></pre>
<p>Note how <code>func1</code> returns a <code>func0</code>-generator, while <code>func2</code> returns a <code>func2</code>-generator.</p>
<pre><code>&gt;&gt;&gt; func1()
&lt;generator object func0 at 0x7fe038147ea0&gt;
&gt;&gt;&gt; func2()
&lt;generator object func2 at 0x7fe038147ee8&gt;
&gt;&gt;&gt; list(func1()) == list(func2())
True
</code></pre>
<p>Note that <code>yield from</code> was introduced in Python 3. In Python 2, you can achieve the samy by yielding from a loop.</p>
<pre><code>def func2(**kwargs):
    for x in func0(parameter=1, **kwargs):
        yield x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.3+, the normal way would be to use <code>yield from</code>. From <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p>PEP 380 adds the yield from expression, allowing a generator to delegate part of its operations to another generator. This allows a section of code containing yield to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.</p>
</blockquote>
<p>For Python 2.7 that's not possible, however. Here's an alternative that works instead:</p>
<pre><code>def base_squared_generator(parameter):
    yield parameter ** 2


def two_squared_generator():
    yield next(base_squared_generator(parameter=2))


def three_squared_generator():
    yield next(base_squared_generator(parameter=3))


print(next(two_squared_generator()))
print(next(three_squared_generator()))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>4
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how i would do it:</p>
<pre><code>def func0(a):
    yield a**2

from functools import partial

func1 = partial(func0, a=1)
func2 = partial(func0, a=10)
print(next(func1()))  # prints 1
print(next(func2()))  # prints 100
</code></pre>
<p>You can take a look at <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>partial</code></a> there. As i said in the comments it essentially clones your function with some of its required parameters already set.</p>
<hr/>
<p>So if <code>func0</code> <em>yields</em> so do its partials <code>func1</code> and <code>func2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are returning generators from the functions.
You need to read about generator, it's not long, anyway is here a way to use it:</p>
<pre><code>gen = func1(args...)
res = gen.next()  # python 2
</code></pre>
<p>or 
    res = next(gen)  # python 2 and 3</p>
</div>
<span class="comment-copy">If you use <code>return</code>, then <code>func1</code> will return the generator that is <code>func0</code>; if you use <code>yield from</code>, then it will yield the individual items from <code>func0</code>. The result seems to be the same in both cases.</span>
<span class="comment-copy">Take a look at <code>partial</code> (<a href="https://docs.python.org/2/library/functools.html" rel="nofollow noreferrer">docs.python.org/2/library/functools.html</a>). It creates an instance of a function with some of the required parameters already set.</span>
<span class="comment-copy">@tobias_k I suggested <code>yield from</code> but then I noticed OP was asking about Python 2 specifically. <code>yield from</code> was introduced in Python 3.3</span>
<span class="comment-copy">BTW, any particular reason you are using <code>yield</code> in the first place instead of <code>return</code> for returning a single result? Seems a bit unusual to me.</span>
<span class="comment-copy">yes, I am yielding html to be able to redirect after the html content has been displayed. I've used this solution: <a href="http://stackoverflow.com/questions/33788909/doing-auto-redirect-using-cherrypy" title="doing auto redirect using cherrypy">stackoverflow.com/questions/33788909/â€¦</a></span>
<span class="comment-copy">If there's anything wrong about my answer, please drop a comment so I can fix it.</span>
<span class="comment-copy">thanks for this answer. Unfortunately I cannot accept multiple answers but I've upvoted yours</span>
<span class="comment-copy">Just go with whatever works for you best. This proved to be an XY problem; you didn't need <code>yield</code> to begin with.</span>
