<div class="post-text" itemprop="text">
<p>I have a function in a file that receives different types of parameters (int, strings, dictionaries, lists...)</p>
<p>Usually I call this function from another one, passing the right parameters, but I would like to also be able to call it from the console (for testing purposes)</p>
<p>The problem is that the input arguments are stored as strings, so I cannot directly pass them to the function.</p>
<p>Is there a way of automatically passing the parameters from the console to the function keeping the correct format?</p>
<pre><code>import sys

def myfunction(mystring, myint, mydict, mylist):
    # check that types are correct
    assert type(mystring) is str
    assert type(myint) is int
    assert type(mydict) is dict
    assert type(mylist) is list

    # print input parameters
    print mystring
    print myint 
    print mydict
    print mylist

def main(args):
    print args
    myfunction(*args)   # pass the parameters to the function

if __name__ == '__main__':
    main(sys.argv[1:])  # discard 1st element which is the filename
</code></pre>
<p>To call my function from console I just do:</p>
<pre><code>python myfile.py "hello" 5 {'age':30} [1,2,3,4]
</code></pre>
<p>The first <code>assert</code> succeds since it expects a string, but the second one fails since it expects an int.</p>
<p>The <code>print args</code> from the main function returns <code>['hello', '5', '{age:30}', '[1,2,3,4]']</code>  (so arguments have been parsed correctly, but they are stored as strings).</p>
<p>I just need to convert them to the right format.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could pass them as a python list:</p>
<pre><code>python myfile.py "['hello',5,{'age':30},[1,2,3,4]]"
</code></pre>
<p>and then get the arguments using <code>ast.literal_eval</code></p>
<pre><code>import ast,sys
if __name__ == '__main__':
    args = ast.literal_eval(sys.argv[1])
    main(args)
</code></pre>
<p>Now <code>args</code> is a <code>list</code> worth <code>['hello', 5, {'age': 30}, [1, 2, 3, 4]]</code></p>
<p>To be really portable between shells (windows, Linux), the above approach is preferred: double quotes to protect the argument, simple quotes to protect strings. Doing it the other way round works with Linux/MSYS shells but not with Windows (single quotes are not really quotes in windows)</p>
</div>
<span class="comment-copy">Perhaps, you can use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> library</span>
<span class="comment-copy">Worked. I added some verification that the input param is a string containing a list with parameters in the correct format before calling the function.</span>
