<div class="post-text" itemprop="text">
<p>I want to have real tabs in a print but <code>\t</code> only puts spaces.
Eg:</p>
<pre><code> first:ThisIsLong         second:Short
 first:Short         second:ThisIsLong
 first:ThisIsEvenLonger         second:Short
</code></pre>
<p>How would i fix it so i can have all the firsts and all the seconds lined up. Eg:</p>
<pre><code> first:ThisIsLong         second:Short
 first:Short              second:ThisIsLong
 first:ThisIsEvenLonger   second:Short
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use formatting to align the strings instead. For example, you can tell python that the first column should be 20 characters long, and the second should be 10, left aligned.</p>
<p>For example:</p>
<pre><code>string_one = 'first:ThisIsLong'
string_two = 'second:Short'

print( '{:&lt;20s} {:&lt;10s}'.format(string_one, string_two) )
</code></pre>
<p>will print:</p>
<pre><code>first:ThisIsLong     second:Short
</code></pre>
<p>The first formatting descriptor (<code>{:&lt;20s}</code>) here is saying:</p>
<p><code>'&lt;'</code> left align, <code>20</code> at least 20 characters, <code>s</code> because it's a string</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using tab (<code>\t</code>), I suggest to use string formatting using <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="noreferrer">printf-style formatting</a> or <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format</code></a>:</p>
<pre><code>rows = [
    ['first:ThisIsLong', 'second:Short'],
    ['first:Short', 'second:ThisIsLong'],
    ['first:ThisIsEvenLonger', 'second:Short'],
]
for first, second in rows:
    print('%-25s %s' % (first, second))
</code></pre>
<p>or</p>
<pre><code>print('{:&lt;25} {}'.format(first, second))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python <code>print</code> function sends strings to standard output. What standard output does with those strings depends on the output device. The default interpretation of <code>\t</code> is to advance to the next <a href="https://en.wikipedia.org/wiki/Tab_stop" rel="nofollow">tab stop</a>, which by convention is the character position which is the next multiple of 8 after the position in which <code>\t</code> occurs (counting character positions from the left beginning with 0). </p>
<p>For example, if I run:</p>
<pre><code>babynames = [('kangaroo', 'joey'), ('fox', 'kit'), ('goose','gosling')]
for x,y in babynames: print(x + '\t' + y)
</code></pre>
<p>I get:</p>
<pre><code>kangaroo        joey
fox     kit
goose   gosling
</code></pre>
<p>I got the above in IDLE. <code>kangaroo</code> occupies columns 0-7. <code>\t</code> is in column 8, hence the next multiple of 8 (the next tab stop) <em>after</em> the tab is in column 16 -- which is indeed where you see <code>joey</code>. In the next two lines -- the next tab stop after the first word is in column 8. This shows that (at least in the IDLE shell) Python <em>is</em> using real tabs.</p>
<p>Tabs in this sense are somewhat annoying. They can only be used to align variable-length string data with a certain amount of annoying difficulty. As others have indicated the solution is to not use tabs but instead use <code>format</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Compute the maximum width needed for each column and then use string formatting to compose a format which specifies the desired width:</p>
<pre><code>data = [['first:ThisIsLong', 'second:Short'],
        ['first:Short', 'second:ThisIsLong'],
        ['first:ThisIsEvenLonger', 'second:Short']]

widths = [max([len(item) for item in col]) for col in zip(*data)]
fmt = ''.join(['{{:{}}}'.format(width+4) for width in widths])
for row in data:
    print(fmt.format(*row))
</code></pre>
<p>yields</p>
<pre><code>first:ThisIsLong          second:Short         
first:Short               second:ThisIsLong    
first:ThisIsEvenLonger    second:Short         
</code></pre>
</div>
<span class="comment-copy">sorry \t not \n im new here still getting used to stack overflow</span>
<span class="comment-copy">The sort of thing that you show is the sort of thing that you expect with real tabs</span>
<span class="comment-copy">real tabs snap to a point</span>
<span class="comment-copy">But -- not always to the point that you expect. See my answer.</span>
<span class="comment-copy">how would I do this if string one is not always the same</span>
<span class="comment-copy">@ewan if you have a reasonable estimate of the what the longest string will be, then just plug that number into the format descriptor <code>{:&lt;100s}</code> otherwise you'll have to figure out the max. string length and use that</span>
<span class="comment-copy">tip: you can format a format descriptor to add the length dynamically: <code>'{:&lt;%ds}' % 100</code> will output <code>{:&lt;100s}</code></span>
<span class="comment-copy">thank you this helped alot</span>
<span class="comment-copy">I just tested it and \t for me only adds 8 spaces</span>
<span class="comment-copy">actually sorry it dose work but for what im using it for it dosent</span>
<span class="comment-copy">@ewan Some IDEs have an option which automatically converts tabs to spaces, perhaps enabled as a default. This might be what you are seeing. Different editors/shells handle <code>\t</code> differently. It really has little to do with Python per se. Check out the editor options in whatever you are using.</span>
<span class="comment-copy">its not a editor problem its the api im using</span>
