<div class="post-text" itemprop="text">
<p>I'm very new to Python (and very rusty on scripting, my last trials were bash and Perl in 2001 or so), have tried searching SO already -- but honestly didn't even know what to look for. I'm fairly sure it's trivial - and I'm a bit ashamed.</p>
<p>I have a fairly large CSV file (approx 26k rows), in a tab-separated format:</p>
<pre class="lang-none prettyprint-override"><code>name, current_value, current_pct, change_pct
ItemA 2452434324     7,70%        -1,19
ItemB 342331         2,40%        -0,45
ItemC 32412123       3,90%        3,87
ItemD 0              0            -4,52
ItemE 12318231       14,80%       0
ItemA 542312134      1,60%        0,11
ItemC 2423423425     11,21%       -0,01
ItemE 3141888103     30,00%       0
ItemB 78826          1,01%        12,01
ItemA 89937          0,04%        0
...
</code></pre>
<p>There's total of approx 300 "Items" (repeating, but in various order, and sometimes only appearing once-or-twice), each of them has a "current value" (integer, from 0 to approx 1000 million (or 1 billion/milliard)), current percentage value (not interesting to me at the moment), and percentage change from last reading (different file, not interesting to me at the moment).
What I want to achieve is a sum of '<code>change_pct</code>' column for each <code>Item</code>, so for aforementioned example result would be:</p>
<pre class="lang-none prettyprint-override"><code>name    total_pct_change
ItemA   -1,08
ItemB   11,56
ItemC   3,86
ItemD   -4,52
ItemE   0
</code></pre>
<p>I was planning to create a list of <code>items</code> then just sum the values of <code>row[3]</code> for these, but I fail miserably.
What I have until now:</p>
<pre><code>import csv, sys, string
xlsfile = sys.argv[1]
with open(xlsfile, 'rb') as f:
    reader = csv.reader(f, delimiter='\t')
    item = row[0]
    pct_change = row[3]
    # this is where I draw a blank
    # was thinking of something akin to
    #   foreach item do sum(pct_change)
    # but that's obviously wrong
    print item, sum_pct_change
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A pandas solution that works:</p>
<pre><code>import pandas as pd

with open(xlsfile) as fobj:
    header = [entry.strip() for entry in next(fobj).split(',')]

data = pd.read_csv(xlsfile, delim_whitespace=True, decimal=',', names=header, skiprows=1)
summed = data.groupby(by=['name'])['change_pct'].sum()

print(summed)
</code></pre>
<p>Output:</p>
<pre><code>name
ItemA    -1.08
ItemB    11.56
ItemC     3.86
ItemD    -4.52
ItemE     0.00
Name: change_pct, dtype: float64
</code></pre>
<p><strong>EDIT</strong></p>
<p>If your file is <code>;</code>-separated. This should work:</p>
<pre><code>data = pd.read_csv('pct2.csv', sep=';', decimal=',')
summed = data.groupby(by=['name'])['change_pct'].sum()
print(summed)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://pandas.pydata.org/pandas-docs/stable/" rel="nofollow noreferrer">Pandas</a> is a great tool for working with tabular data. </p>
<p>Here, you'd do:</p>
<pre><code>import pandas as pd

data = pd.read_csv('path_to_your_file', sep='\t', header=0, decimal=',')

summed = data.groupby(by=['name'])['change_pct'].sum()

summed.to_csv('name_of_output_file', sep='\t')
</code></pre>
<p>A few gotchas to look out for: if you have white space in the column names, you'll need to either clean that up, or use the exact column names in the above code (e.g. <code>' name     '</code> instead of <code>'name'</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

with open(xlsfile) as fobj:
    next(fobj)   # throw away first line
    res = defaultdict(float)
    for line in fobj:
        values = line.split()  #  split at whitespace
        #  use value of first column as key
        #  take value of last column  replace `,` by `.` and convert to `float`
        #  and use as value
        res[values[0]] += float(values[-1].replace(',', '.'))

print(res)
</code></pre>
<p>Output:</p>
<pre><code>defaultdict(float,
            {'ItemA': -1.0799999999999998,
             'ItemB': 11.56,
             'ItemC': 3.8600000000000003,
             'ItemD': -4.52,
             'ItemE': 0.0})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a fairly readable way to do it that converts each row read into a <code>namedtuple</code> to simplify field access:</p>
<pre><code>from collections import namedtuple
import csv
import sys

xlsfile = sys.argv[1]

# define field names for easy access
Record = namedtuple('Record', 'name, current_value, current_pct, change_pct')

totals = {}  # dictionary to hold totals

with open(xlsfile, 'rb') as f:
    reader = csv.reader(f, delimiter='\t')
    next(reader)  # skip over header row
    for rec in (Record._make(row) for row in reader):
        totals[rec.name] = (totals.get(rec.name, 0.0) + float(rec.change_pct))

print('name      total_change_pct')
for item in sorted(totals.items()):
    print('{:5}     {:.2f}'.format(item[0], item[1]))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>name      total_change_pct
ItemA     -1.08
ItemB     11.56
ItemC     3.86
ItemD     -4.52
ItemE     0.00
</code></pre>
</div>
<span class="comment-copy">Use a dictionary to hold the running total for each item name.</span>
<span class="comment-copy">Have you looked into python package <code>pandas</code>?. <a href="http://pandas.pydata.org" rel="nofollow noreferrer">pandas.pydata.org</a></span>
<span class="comment-copy">decimal=',' is a good catch</span>
<span class="comment-copy">Here, I got the error "KeyError: 'name'", and wasn't sure how to deal with it. Tried changing my CSV column name to "blahblah" (and changing script to data.groupby(by=['blahblah'])... but that just threw the KeyError for blahblah. Nevertheless, Metropolis' solution (and your decimal=...) helped. Thanks again.</span>
<span class="comment-copy">Did you try my full solution including the <code>with open(xlsfile) as fobj:     header = [entry.strip() for entry in next(fobj).split(',')]</code>?</span>
<span class="comment-copy">Tried that, then changed 'split' to (';') - and it kinda worked. Gave me output similar to: <code>ItemX;622300;0,30%;0,00           NaN</code> <code>ItemX;7718636;3,80%;0,00          NaN</code> <code>ItemX;9432450;4,60%;0,00          NaN</code> which I guess means my CSV formatting is at fault.</span>
<span class="comment-copy">My code works for the file you posted. If you use <code>;</code> instead of` <code>,</code> in the real file , of course it cannot work.</span>
<span class="comment-copy">Wohoo! Thanks. Had to add <code>decimal=','</code> and then everything went smoothly. Other solutions were giving me errors, like "ValueError: invalid literal for float(): -1,19" (for <code>namedtuple</code>); the <code>defaultdict</code> worked like charm but wasn't sure how to deal with the output. Thanks again!</span>
<span class="comment-copy">I'll include that detail in my answer.</span>
