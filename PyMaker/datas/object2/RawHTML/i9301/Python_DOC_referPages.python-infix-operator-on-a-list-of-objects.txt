<div class="post-text" itemprop="text">
<p>I'm using a library for mathematical optimization (PICOS) in a jupyter notebook. </p>
<p>In PICOS, the symbols <code>//</code> and <code>&amp;</code> are infix operators for vertical and horizontal concatenation, to build matrices out of blocks. Note that I cannot use <code>numpy.bmat</code> because the blocks are not numpy objects.</p>
<p>If I have a list of blocks, say <code>[A,B,C]</code>, I would form a matrix by concatenating them horizontally with the notation <code>A &amp; B &amp; C</code>, for instance. The problem arises when the list contains hundreds of symbols and I cannot build the matrix by hand. Is there a simple way of interposing an infix between each symbol in a list?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>'&amp;'.join([A,B,C])
</code></pre>
<p>or</p>
<pre><code>' &amp; '.join([A,B,C])
</code></pre>
<p>if you want spaces between the <code>&amp;</code></p>
<p>EDIT:</p>
<p>also wrap it inside <code>eval</code></p>
<pre><code>eval(' &amp; '.join([A,B,C]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I should have been less hasty. I just did it with a recursive function:</p>
<pre><code>def concat_horizontal(lst):
if len(lst) == 2:
    return lst[0] &amp; lst[1]
else:
    return concat_horizontal([lst[0] &amp; lst[1]] + lst[2:]) 
</code></pre>
<p>and an analogous one for the vertical concatenation. Yay, recursion!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the built-in <code>reduce</code> metafunction (<a href="https://docs.python.org/2.7/library/functions.html#reduce" rel="nofollow noreferrer">Python 2.7 docu</a>, <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">Python 3 docu</a>) with the <a href="https://docs.python.org/library/operator.html#operator.and_" rel="nofollow noreferrer"><code>operators.and_(a, b)</code></a> representing the <code>&amp;</code> infix operator as a function of two arguments:</p>
<pre><code>from functools import reduce
from operators import and_

def concat_horizontal(iterable_of_affine_expressions):
    return reduce(and_, iterable_of_affine_expressions)
</code></pre>
</div>
<span class="comment-copy">Iterate through the blocks, adding to a counter block each iteration.</span>
<span class="comment-copy">How does this help? You are making strings here...</span>
<span class="comment-copy">Oops. Didn't realize it shouldn't be a string. You could wrap it in <code>eval</code> I suppose.</span>
<span class="comment-copy">Using <code>eval</code> is generally not good advice. It probably wouldn't hurt in this instance, but it certainly wouldn't be performant. The proper solution is to iterate!</span>
<span class="comment-copy"><code>join</code> complains that it was expecting a string</span>
<span class="comment-copy">Recursion is your first instinct? Why not a <i>for-loop</i>???</span>
<span class="comment-copy">I'm not a programmer, my instinct is all off. Besides, recursion is beautiful!</span>
