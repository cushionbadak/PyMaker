<div class="post-text" itemprop="text">
<p>I made a simple scoring system for Farkle (a dice game). I'm a beginning student in Python, and have some questions on how to do certain things. First of all I'm having trouble finding out how to have my code check my list (dicegroup) for any kind of matching sequence. I'd like to have it check, specifically, for four of a kind without me having to go in and manually set what happens when there are for of a number for each number. What's the easiest way to do this?</p>
<p>Any general feedback on the code is also appreciated. </p>
<pre><code>from __future__ import print_function
from collections import Counter
import random


onescore = 0
twoscore = 0
threescore = 0
fourscore = 0
fivescore = 0
fivesinglesscore = 0
sixscore = 0
fourofakind = 0
scorelist = []

##ROLLING THE DICE##
def roll():
    dice = (1,2,3,4,5,6)
    dice1 = random.choice(dice)
    dice2 = random.choice(dice)
    dice3 = random.choice(dice)
    dice4 = random.choice(dice)
    dice5 = random.choice(dice)
    dice6 = random.choice(dice)

    global onescore,twoscore,threescore,fourscore,fivescore,fivesinglesscore,sixscore,fourofakind
    onescore = 0
    twoscore = 0
    threescore = 0
    fourscore = 0
    fivescore = 0
    fivesinglesscore = 0
    sixscore = 0
    fourofakind = 0

    dicegroup = [dice1,dice2,dice3,dice4,dice5,dice6]
    print ('Your rolls are',dicegroup)

    dicenum = Counter(dicegroup)
    onescore = dicenum[1] * 100
    print ('There are',dicenum[1],'ones. This gives you', onescore, 'points.')

    fivesinglesscore = dicenum[5] * 50
    print ('There are',dicenum[5],'fives. This gives you', fivesinglesscore, 'points.')

    if dicenum[2] == 3:
        twoscore = 200
        print ('There are',dicenum[2],'twos. This gives you', twoscore, 'points.')
    if dicenum[3] == 3:
        threescore = 300
        print ('There are',dicenum[3],'threes. This gives you', threescore, 'points.')
    if dicenum[4] == 3:
        fourscore = 400
        print ('There are',dicenum[4],'fours. This gives you', fourscore, 'points.')
    if dicenum[5] == 3:
        fivescore = 500
        print ('There are',dicenum[5],'fives. This gives you', fivescore, 'points.')
    if dicenum[6] == 3:
        sixscore = 600
        print ('There are',dicenum[6],'sixes. This gives you', sixscore, 'points.')
    if dicenum[any] == 4:
        fourofakind = 1000
        print ('You have four of a kind. This is worth', fourofakind, 'points.')

roll()

##SCORE PROCESSING
finalscore = onescore + twoscore + threescore + fivescore + fivesinglesscore + sixscore + fourofakind
print (finalscore)
scorelist.append(finalscore)
print ('')
print ('Score list is:')
print (scorelist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check 4 of a kind:</p>
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> from the <code>collections</code> module, we can create a dictionary that counts all the unique items for us in a list:</p>
<pre><code>from collections import Counter

x = [1,2,3,4,5,6,76,5,234,123,4,123,312,3,5,245,123,123,1,51,35,123,123,1,23,1,1,1,1,1,12,32,31,23]

print(Counter(x))
#Counter({1: 8, 123: 6, 5: 3, 3: 2, 4: 2, 23: 2, 32: 1, 2: 1, 6: 1, 31: 1, 12: 1, 234: 1, 76: 1, 51: 1, 245: 1, 312: 1, 35: 1})
</code></pre>
<p>Now all we need to do is filter by however many <code>x of a kind</code> you want by doing. We can achieve this by creating a list comprehensions that filters out all the values and only keep what we want, in this case if the count is equal to <code>4</code></p>
<pre><code>from collections import Counter

x = [1,2,3,4,5,6,76,5,234,123,4,123,312,3,5,245,123,123,1,51,35,123,123,5,1,23,1,1,1,1,1,12,32,31,23]

answer = [a for a,b in Counter(x).items() if b == 4]
print(answer)
#[5] 
</code></pre>
<p>Now we get back a list of all the items that has a count of 4.</p>
<hr/>
<p>To check 4 in a row:</p>
<pre><code>x = [1,2,3,4,5,6,76,5,234,123,4,123,312,3,5,245,123,123,1,51,35,123,123,1,23,1,1,1,1,1,12,32,31,23]

for i in range(len(x)):
    to_check = x[i:i+4]
    if to_check.count(to_check[0]) == 4:
        print('found it {0}, position {1} to position {2}'.format(to_check[0], i, i+4))
</code></pre>
<p>This will check 4 in a row in a list. It takes a chunk of size 4 from the list at a time, and checks if everything in that list is the same. If it is, it prints out the item and position. You can change it to fit your program.</p>
<p><a href="https://docs.python.org/3.5/tutorial/datastructures.html" rel="nofollow noreferrer"><code>count()</code></a> works on a list and you pass in what you want to count in the list. In this case we want to count the first item in our sliced out list, since we want to check if it's all the same, we see if the count is equal to 4.</p>
<p>Note: This treats <code>[1,2,2,2,2,2]</code> as 2, four in a row items since it's the first set of 2s and the second set of 2's. If you only want to treat it as 1 set of 4 in a row you can modify the code as following:</p>
<pre><code>x = [1,2,3,4,5,6,76,5,234,123,4,123,312,3,5,245,123,123,1,51,35,123,123,1,23,1,1,1,1,1,12,32,31,23]

i = 0
while i &lt; len(x):
    to_check = x[i:i+4]
    if to_check.count(to_check[0]) == 4:
        print('found it {0}, position {1} to position {2}'.format(to_check[0], i, i+4))
        i += 4
    else:
        i += 1
</code></pre>
<p>Using a <code>while loop</code> we can control the flow of <code>i</code> better than a <code>for loop</code>. If we find the 4 in a row, we skip to the end of the 4 in a row.</p>
</div>
<span class="comment-copy">StackOverflow is a question and answer site, not a code review site. You should ask a specific question that has a specific answer. There are other forums to ask for code review (for example reddit.com/r/learnprogramming)</span>
<span class="comment-copy">@Metropolis Fair enough. I misunderstood the purpose of the site slightly (though I think the question I asked is relevant despite that). Thanks for informing me.</span>
