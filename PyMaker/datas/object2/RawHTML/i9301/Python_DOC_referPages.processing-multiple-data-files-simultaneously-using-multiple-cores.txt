<div class="post-text" itemprop="text">
<p>I have multiple data files that I process using python Pandas libraries. Each file is processed one by one, and only one logical processor is used when I look at Task manager (it is at ~95%, and the rest are within 5%)</p>
<p>Is there a way to process data files simultaneously?
If so, is there a way to utilize the other logic processors to do that?</p>
<p>(Edits are welcome)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can process the different files in different threads or in different processes. </p>
<p>The good thing of python is that its framework provides tools for you to do this:</p>
<pre><code>from multiprocessing import Process

def process_panda(filename):
    # this function will be started in a different process
    process_panda_import()
    write_results()

if __name__ == '__main__':
    p1 = Process(target=process_panda, args=('file1',))
    # start process 1
    p1.start() 
    p2 = Process(target=process_panda, args=('file2',))
    # starts process 2
    p2.start() 
    # waits if process 2 is finished
    p2.join()  
    # waits if process 1 is finished
    p1.join()  
</code></pre>
<p>The program will start 2 child-processes, which can be used do process your files. 
Of cource you can do something similar with threads.</p>
<p>You can find the documentation here:
<a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/2/library/multiprocessing.html</a></p>
<p>and here:</p>
<p><a href="https://pymotw.com/2/threading/" rel="nofollow noreferrer">https://pymotw.com/2/threading/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If your file names are in a list, you could use this code:</p>
<pre><code>from multiprocessing import Process

def YourCode(filename, otherdata):
    # Do your stuff

if __name__ == '__main__':
    #Post process files in parallel
    ListOfFilenames = ['file1','file2', ..., 'file1000']
    ListOfProcesses = []
    Processors = 20 # n of processors you want to use
    #Divide the list of files in 'n of processors' Parts
    Parts = [ListOfFilenames[i:i + Processors] for i in xrange(0, len(ListOfFilenames), Processors)]

    for part in Parts:
        for f in part:
            p = multiprocessing.Process(target=YourCode, args=(f, otherdata))
            p.start()
            ListOfProcesses.append(p)
        for p in ListOfProcesses:
            p.join()
</code></pre>
</div>
<span class="comment-copy"><a href="https://www.youtube.com/watch?v=Bv25Dwe84g0" rel="nofollow noreferrer">Thinking About Concurrency video</a></span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">multiprocessing.pool</a></span>
<span class="comment-copy">@swenzel beat me to it. was going to type the exact thing</span>
<span class="comment-copy">Quick note: it looks like Python threads won't use multiple cores, according to: <a href="http://stackoverflow.com/questions/7542957/is-python-capable-of-running-on-multiple-cores" title="is python capable of running on multiple cores">stackoverflow.com/questions/7542957/â€¦</a>. The <code>multiprocessing</code> library will use it, though.</span>
<span class="comment-copy">Great information, thanks for sharing it!</span>
<span class="comment-copy">@KimKulling, Tank you for the code and the additional links :)</span>
<span class="comment-copy">Take a look at <code>concurrent.futures.ProcessPoolExecutor</code> - the same idea, but carefully thught of, and with corner cases, and such - <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">docs.python.org/3/library/concurrent.futures.html</a></span>
<span class="comment-copy">Thanks! But, unfortunately, it does not seem to be available for Python 2.7...</span>
<span class="comment-copy">Python 2.7 is seven years old now - and it was already  somewhat old  when it was released, as Python 3 was alrady around. the OP does not mention he is using Python2. (of course an answer suggesting concurrent.futures would have to mention it is Python 3 only)</span>
<span class="comment-copy">You are right. I should have specified. I'm using python 3.5</span>
<span class="comment-copy">@Diego, thank you for the answer</span>
