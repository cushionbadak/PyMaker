<div class="post-text" itemprop="text">
<p>Is it possible to have python 2.7 print something at a specific time of the day. For example if I ran the program at 15:06 and coded it to print "Do task now" at 15:07 it prints it. So no matter what time you ran the program once it hit 15:07 it would print "Do task now." In addition is it possible to have it print every week at this time?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest installing the library schedule, if you're able to.</p>
<p>Use <code>pip install schedule</code></p>
<p>Your code would look like this if utilizing schedule:</p>
<pre><code>import schedule
import time

def task():
    print("Do task now")

schedule.every().day.at("15:07").do(task)

while True:
    schedule.run_pending()
    time.sleep(1)
</code></pre>
<p>You can adjust <code>time.sleep(1)</code> as necessary to sleep for longer if a 1s interval is too long. Here is the <a href="https://pypi.python.org/pypi/schedule" rel="nofollow noreferrer">schedule library page</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not using <code>cron</code>, then the general solution is to find the time remaining until you need the event to occur, have the program sleep for that duration, then continue execution.</p>
<p>The tricky part is to have the program find the next occurrence of a given time. There are some modules for this, but you could also do it with plain code for a well-defined case where it is only a fixed time of day.</p>
<pre><code>import time

target_time = '15:07:00'
current_epoch = time.time()

# get string of full time and split it
time_parts = time.ctime().split(' ')
# replace the time component to your target
time_parts[3] = target_time
# convert to epoch
future_time = time.mktime(time.strptime(' '.join(time_parts)))

# if not in the future, add a day to make it tomorrow
diff = future_time - current_epoch
if diff &lt; 0:
    diff += 86400

time.sleep(diff)
print 'Done waiting, lets get to work'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While python is not ideal to schedule something; there are better tools out there. Yet, if this is desired to be done in <strong>python</strong> below is a way to implement it:</p>
<p><strong>Prints at <em><code>scheduled_time</code></em> of 11AM:</strong></p>
<pre><code>import datetime as dt
scheduled_time = dt.time(11,00,00,0)
while 1==1:
    if (scheduled_time &lt; dt.datetime.now().time() and 
       scheduled_time &gt; (dt.datetime.now()- dt.timedelta(seconds=59)).time() ):
        print "Now is the time to print"
        break
</code></pre>
<blockquote>
<p>There are two <code>if conditions</code> with an intent to print within one minute; a shorter duration can be chosen. But the <code>break</code> immediately after <code>print</code> ensures that <code>print</code> is executed only once.</p>
</blockquote>
<p>You would need to extrapolate this so that code is run across days.</p>
<p>Refer: <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><em><code>datetime</code></em> Documentation</a></p>
</div>
<span class="comment-copy">Yes python can do that.</span>
<span class="comment-copy">Thank you @StephenRauch but how would I code this?</span>
<span class="comment-copy">I would suggest investigating the datetime module. <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html</a></span>
<span class="comment-copy">I wouldn't use python to schedule the operation. Your operating system already has tools to run any application at a specific time</span>
<span class="comment-copy">@cricket_007 there could be good reasons the user needs this, we just don't know and we can't assume that it's for scheduling tasks.</span>
<span class="comment-copy">Won't this be running the thread at 100% CPU until <code>break</code>?</span>
