<div class="post-text" itemprop="text">
<pre><code>for i in range(0,10,-1):
     print (i)
</code></pre>
<p>Why the  above program prints nothing ,i expect it to print at least 0
According to 
"for i in range(start, end, iterator)" definition ,it evaluates first element and then uses iterator to get to next element.
So in theory the Example code snippet should first take 0 and print it and then next element is evaluated as -1 which is not in 0-10 then it should bail out </p>
</div>
<div class="post-text" itemprop="text">
<p>With a negative "<code>step</code>", python keeps on yielding<sup>1</sup> elements while the current value is greater than <code>end</code>.  In this case, you start at <code>0</code>.  <code>0</code> is not greater than or equal to <code>10</code> so python's done and nothing gets yielded.</p>
<hr/>
<p><sup><sup>1</sup>This is a simplification of course -- <code>range</code> returns a <code>range</code> object on python3.x which is an indexable sequence type so it doesn't exactly <code>yield</code>, but the basic idea is the same ...</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>There is no evaluation of the first element by the <code>range()</code> call, and Python's <code>range()</code> function will not return anything if <code>step</code> is negative and <code>start + i * step</code> is not greater than <code>stop</code>.  For your example, <code>start = 0 + 0 * -1</code> is not greater than <code>stop = 10</code>, so your <code>range</code> call returns the empty list, and your <code>for</code> loop has nothing to iterate over.</p>
<pre><code>$ python -c 'print(range(0,10,-1))'
[]
</code></pre>
<p><code>range()</code>'s <a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>range(stop)</p>
<p>range(start, stop[, step])</p>
<p>This is a versatile function to create lists containing arithmetic progressions. It is most often used in for loops. The arguments must be plain integers. If the step argument is omitted, it defaults to 1. If the start argument is omitted, it defaults to 0. The full form returns a list of plain integers [start, start + step, start + 2 * step, ...]. If step is positive, the last element is the largest start + i * step less than stop; if step is negative, the last element is the smallest start + i * step greater than stop. step must not be zero (or else ValueError is raised). Example:</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Third argument in <code>range</code> is <a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow noreferrer"><code>step</code></a></p>
<p>In range you can give <code>step</code> as <code>1</code>, <code>2</code> etc. </p>
<p>When you give <code>-1</code>, it will not do step in <code>reverse</code>.</p>
<p>If you want to print reverse order you can try </p>
<pre><code>&gt;&gt;&gt; range(10)[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, the range function works with the arguments <code>range(StartingValue, EndingValue, Step)</code> the problem you have is that you are assigning a negative step to a situation where the StartingValue is less than EndingValue. Since this is the case, it never enters the loop, because the end value has already been reached, and exceeded.</p>
<p>To fix this, just reverse the first two values: <code>for I in range(10,0,-1)</code> . Think of it as if you were saying it in a sentence, such as <code>FOR each ITEM in the RANGE of 10 to 0 decreasing by 1</code></p>
</div>
<span class="comment-copy">"For a negative step, the contents of the range are still determined by the formula r[i] = start + step*i, but the constraints are i &gt;= 0 and r[i] &gt; stop." <a href="https://docs.python.org/3/library/stdtypes.html#ranges" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#ranges</a></span>
<span class="comment-copy">You're asking Python to go from 0 to 10 by -1. But when you add -1 to 0 you get -1, and so on; you will never get to 10 no matter how many times you add -1. So what you're trying to do makes no sense, and Python has rules in place to prevent it.</span>
<span class="comment-copy"><code>print(*range(10, 0, -1))</code>  works as aready mentioned.  range() will count in reverse, you just have to give a valid start, end for a negative increment</span>
