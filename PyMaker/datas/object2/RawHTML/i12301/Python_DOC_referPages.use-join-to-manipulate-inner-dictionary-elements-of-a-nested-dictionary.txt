<div class="post-text" itemprop="text">
<p>I have a question. I tried to put together information from other questions but with no success.
Assume I have data in the following format:</p>
<pre><code>file_list = ["f1", "f2", "f3"]
inner_dict = {1: "one", 2: "two", 3: "three"}
outer_dict = {}

for f in file_list:
     outer_dict[f] = inner_dict
</code></pre>
<p>My aim is to print (to be saved into a file) in the following way:</p>
<pre><code>f1, 1, one
f1, 2, two
f1, 3, three
f2, 1, one
f2, 2, two
f2, 3, three
f3, 1, one
f3, 2, two
f3, 3, three
</code></pre>
<p>To this aim, I started focusing on the items of <code>outer_dict</code>, and I managed to print them separately, but I am not sure how to further join (and, more importantly, if this is the most direct way to go).</p>
<pre><code>for key, value in outer_dict.items():
    inn_keys = value.keys()
    inn_values = value.values()
    b1 = "\n".join([str(x) for x in inn_keys] )
    b2 = "\n".join([str(x) for x in inn_values] )
</code></pre>
<p>Thanks for any suggestions.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code>string_list = []

for el1 in file_list:
    for el2 in inner_dict.items():
        string_list.append(", ".join([el1, str(el2[0]), el2[1]]))

print(string_list)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['f1, 1, one', 
 'f1, 2, two', 
 'f1, 3, three', 
 'f2, 1, one', 
 'f2, 2, two', 
 'f2, 3, three', 
 'f3, 1, one', 
 'f3, 2, two',
 'f3, 3, three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Patching your code to work will look something like this:</p>
<pre><code>b1 = ""
for key, value in outer_dict.items():
    b1 += "\n".join([','.join([key,str(k),v]) for k, v in value.items()]) + '\n'
</code></pre>
<p><strong>But</strong>, I think you did it way more complicated than it should be in python, a much simpler solution will be using nested loops:</p>
<pre><code>s = ""
for f in file_list:
    for k,v in inner_dict.items():
        s+= ','.join([f,str(k),v]) + "\n"
</code></pre>
<p>I'm sure you can figure out a one-liner that will do this for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Double <a href="https://docs.python.org/2/library/string.html#string.join" rel="nofollow"><strong><code>join</code></strong></a> can be used in your case, remember to convert your <strong><code>ints</code></strong> to <strong><code>str</code></strong>:   </p>
<pre><code>print '\n'.join([', '.join([e1] + [str(e) for e in e2]) for e1, e2 in zip(file_list, inner_dict.items())])

f1, 1, one
f2, 2, two
f3, 3, three
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Seems like the other answers assume a deterministic order in the dictionary. But dictionaries <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">do not have a deterministic order</a>. In fact, you can set <code>hash_randomization</code> in Python 2. Just start with the command line option <code>-R</code>:</p>
<pre><code>python -R
</code></pre>
<p>This is the <a href="https://stackoverflow.com/questions/14956313/dictionary-ordering-non-deterministic-in-python3">default in Python 3</a>.</p>
<p>So to make this work more reliably and also with Python 3, sort the keys of the inner dictionary. Since it is used many times, sort it only once and re-use it in all iterations over the file list:</p>
<pre><code>from __future__ import print_function

file_list = ["f1", "f2", "f3"]
inner_dict = {1: "one", 2: "two", 3: "three"}

inner_list = [', '.join([str(key), inner_dict[key]]) for key in sorted(inner_dict)]

for fname in file_list:
    for inner in inner_list:
        print('{}, {}'.format(fname, inner))
</code></pre>
<p>Output:</p>
<pre><code>f1, 1, one
f1, 2, two
f1, 3, three
f2, 1, one
f2, 2, two
f2, 3, three
f3, 1, one
f3, 2, two
f3, 3, three
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you wanted to save it to a csv file, see if this helps. You can use <code>OrderedDict</code> if the order matters.</p>
<pre><code>from collections import OrderedDict
import csv


file_list = ["f1", "f2", "f3"]
inner_dict = {1: "one", 2: "two", 3: "three"}
outer_dict = OrderedDict()

for f in file_list:
    outer_dict[f] = inner_dict

rows = []
for i,k in outer_dict.items():
    for m,n in k.items():
        rows += [[str(x) for x in [i, m, n]]]

with open('test.csv', 'w') as f:
    _csv = csv.writer(f, escapechar=' ', quoting=csv.QUOTE_NONE)
    [_csv.writerow(row) for row in rows]
</code></pre>
<p>The test.csv file would look so:</p>
<pre><code>f1,1,one
f1,2,two
f1,3,three
f2,1,one
f2,2,two
f2,3,three
f3,1,one
f3,2,two
f3,3,three
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this oneliner- just concatenate tuples (i.e. <code>[(i,)+j for j in inner_dict.items() for i in file_list]</code>) and flatten the list of tuples into a simple list.</p>
<pre><code>[item for sublist in [(i,)+j for j in inner_dict.items() for i in file_list] for item in sublist]
</code></pre>
<p>Output-</p>
<pre><code>['f1', 1, 'one', 'f2', 1, 'one', 'f3', 1, 'one', 'f1', 2, 'two', 'f2', 2, 'two', 'f3', 2, 'two', 'f1', 3, 'three', 'f2', 3, 'three', 'f3', 3, 'three']
</code></pre>
<p>N.B. Better to use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> in case of maintaining order using dictionary.</p>
</div>
<span class="comment-copy">Hi, thanks for the answer, I would need to print as I posted in the question, (so 3 values per row separated by a comma) as I would like to save each row in a csv file.</span>
<span class="comment-copy">Also I would take the chance to understand how .join() works in this specific example.</span>
<span class="comment-copy"><code>"separator".join(iterable)</code> joins the strings of the passed in <code>iterable</code> using the <code>separator</code> string.</span>
<span class="comment-copy">The final output is not what I would need, check out the initial question, thanks, S. (basically I need the outer key "repeated" for all the respective items).</span>
