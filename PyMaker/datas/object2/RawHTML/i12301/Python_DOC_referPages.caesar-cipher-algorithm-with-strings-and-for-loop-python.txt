<div class="post-text" itemprop="text">
<p>The assignment is to write a Caesar Cipher algorithm that receives 2 parameters, the first being a String parameter, the second telling how far to shift the alphabet. The first part is to set up a method and set up two strings, one normal and one shifted. I have done this. Then I need to make a loop to iterate through the original string to build a new string, by finding the original letters and selecting the appropriate new letter from the shifted string. I've spent at least two hours staring at this one, and talked to my teacher so I know I'm doing some things right. But as for what goes in the while loop, I really don't have a clue. Any hints or pushes in the right direction would be very helpful so I at least have somewhere to start would be great, thank you.</p>
<pre><code>def cipher(x, dist):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    shifted = "xyzabcdefghijklmnopqrstuvw"
    stringspot = 0
    shiftspot = (x.find("a"))
    aspot = (x.find("a"))
    while stringspot &lt; 26:
        aspot = shifted(dist)
        shifted = 
        stringspot = stringspot + 1
        ans = 
    return ans

print(cipher("abcdef", 1))
print(cipher("abcdef", 2))
print(cipher("abcdef", 3))
print(cipher("dogcatpig", 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are some pushes and hints:</p>
<ol>
<li><p>You should validate your inputs. In particular, make sure that the shift distance is "reasonable," where reasonable means something you can handle. I recommend &lt;=25.</p></li>
<li><p>If the maximum shift amount is 25, the letter 'a' plus 25 would get 'z'. The letter 'z' plus 25 will go past the end of the alphabet. But it wouldn't go past the end of TWO alphabets. So that's one way to handle wrap-around.</p></li>
<li><p>User @zondo, in his solution, handles upper-case letters. You didn't mention if you want to handle them or not. You may want to clarify that with your teacher.</p></li>
<li><p>If you know about dictionaries, you might want to build one to make it easy to map the old letters to the new letters. </p></li>
<li><p>You need to realize that strings are treated as tuples or lists - you can index them. I don't see you doing that in your code.</p></li>
<li><p>You can get an "ASCII code" number for a letter using <a href="https://docs.python.org/3/library/functions.html?highlight=ord#ord" rel="nofollow"><code>ord()</code></a>. The numbers are arbitrary, but both upper and lower case numbers are packed together tightly in ranges of 26. This means you can do math with them. (For example, <code>ord('a')</code> is 97. Not super useful. But <code>ord('b') - ord('a')</code> is 1, which might be good to know.)</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>alphabet</code> and <code>shifted</code> are supposed to be a mapping between the original stream and the ciphertext. The loop's job is to iterate over all letters in the stream substitute them. More specifically, the letter in <code>alphabet</code> and the substitute letter in <code>shifted</code> reside at the same index, hence the mapping. In pseudocode:</p>
<pre><code>ciphertext = empty
for each letter in x
    i = index of letter in alphabet
    new_letter = shifted[i]
    add new_letter to ciphertext
</code></pre>
<p>The whole loop can be simplified to a comprehension list, but this shouldn't be your primary concern.</p>
<p>For more direct mapping than doing as in the pseudocode above, look into dictionaries.</p>
<p>Another thing that stands out in your code is the generation of <code>shifted</code>, which should depend on the argument <code>dist</code> so it can't just be hardcoded. So, if <code>dist</code> is 5, the first letter in <code>shifted</code> should be whatever lies at the 0+5 in <code>alphabet</code>, and so on. Hint: modulo operator.</p>
</div>
<span class="comment-copy">you should use debug inside the parts of while loop you do not get, something  like <code>DEBUG = True  def log(s):     if DEBUG:         print s </code> then use log("some string")` inside loop</span>
<span class="comment-copy">Note that: you have set <code>shifted</code> manually, but the string should be different depending on the <code>dist</code> parameter. If <code>dist</code> is 1, <code>shifted</code> should start with a <code>b</code>. You should build <code>shifted</code> dynamically. Also, you're later using <code>shifted</code> with round brackets (as if it's a function), you should use square brackets. Also, <code>x</code> could not have the letter <code>a</code>, e.g. <code>cipher("lol", 1)</code> which should return <code>"mpm"</code>.</span>
<span class="comment-copy">Also, your while loop iterates 26 times. It would be reasonable however to iterate on each letter of <code>x</code> (which could be shorter/langer than 26) so that's likely something you should change. I advise you to try and solve some cases by hand (e.g. what happens when <code>x</code> is 1 letter long? what happens if <code>dist</code> is equal to 0?)</span>
<span class="comment-copy">The results of <code>ord()</code> aren't arbitrary, but you can call them unintuitive to someone who hasn't looked at ascii codes for 10 seconds. I also think bringing this function into the game is more of a nuisance than not. Nothing it can achieve more simply than his <code>alphabet</code> string or <code>string.ascii_lowercase</code>.</span>
