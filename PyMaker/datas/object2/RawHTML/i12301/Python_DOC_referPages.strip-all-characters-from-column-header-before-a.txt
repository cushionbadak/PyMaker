<div class="post-text" itemprop="text">
<p>I have column's named like this:</p>
<pre><code>1:Arnston 2:Berg 3:Carlson 53:Brown
</code></pre>
<p>and I want to strip all the characters before and including <code>:</code>. I know I can rename the columns, but that would be pretty tedious since my numbers go up to 100.</p>
<p>My desired out put is:</p>
<p>Arnston Berg Carlson Brown</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you have a frame looking something like this:</p>
<pre><code>&gt;&gt;&gt; df
   1:Arnston  2:Berg  3:Carlson  53:Brown
0          5       0          2         1
1          9       3          2         9
2          9       2          9         7
</code></pre>
<p>You can use the vectorized string operators to split each entry at the first colon and then take the second part:</p>
<pre><code>&gt;&gt;&gt; df.columns = df.columns.str.split(":", 1).str[1]
&gt;&gt;&gt; df
   Arnston  Berg  Carlson  Brown
0        5     0        2      1
1        9     3        2      9
2        9     2        9      7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
s = '1:Arnston 2:Berg 3:Carlson 53:Brown'
s_minus_numbers = re.sub(r'\d+:', '', s)
</code></pre>
<p>Gets you</p>
<pre><code>'Arnston Berg Carlson Brown'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best solution IMO is to use pandas' <code>str</code> attribute on the columns. This allows for the use of regular expressions without having to import <code>re</code>:</p>
<pre><code>df.columns.str.extract(r'\d+:(.*)')
</code></pre>
<p>Where the regex means: select everything (<code>(.*)</code>) after one or more digits (<code>\d+</code>) and a colon (<code>:</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with a list comprehension:</p>
<pre><code>columns = '1:Arnston 2:Berg 3:Carlson 53:Brown'.split()
print('Before: {!r}'.format(columns))

columns = [col.split(':')[1] for col in columns]
print('After: {!r}'.format(columns))
</code></pre>
<p><strong>Output</strong></p>
<pre>
Before: ['1:Arnston', '2:Berg', '3:Carlson', '53:Brown']
After: ['Arnston', 'Berg', 'Carlson', 'Brown']
</pre>
<p>Another way is with a regular expression using <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub()</code></a>:</p>
<pre><code>import re

columns = '1:Arnston 2:Berg 3:Carlson 53:Brown'.split()

pattern = re.compile(r'^.+:')
columns = [pattern.sub('', col) for col in columns]
print(columns)
</code></pre>
<p><strong>Output</strong></p>
<pre>
['Arnston', 'Berg', 'Carlson', 'Brown']
</pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df = pd.DataFrame({'1:Arnston':[5,9,9],
  '2:Berg':[0,3,2],
  '3:Carlson':[2,2,9] ,
  '53:Brown':[1,9,7]})

[x.split(':')[1] for x in df.columns.factorize()[1]]
</code></pre>
<p>output:</p>
<pre><code>['Arnston', 'Berg', 'Carlson', 'Brown']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html" rel="nofollow"><code>str.replace</code></a> and pass regex expression:</p>
<pre><code>In [52]: df
Out[52]:
   1:Arnston    2:Berg  3:Carlson  53:Brown
0   1.340711  1.261500  -0.512704 -0.064384
1   0.462526 -0.358382   0.168122 -0.660446
2  -0.089622  0.656828  -0.838688 -0.046186
3   1.041807  0.775830  -0.436045  0.162221
4  -0.422146  0.775747   0.106112 -0.044917

In [51]: df.columns.str.replace('\d+[:]','')
Out[51]: Index(['Arnston', 'Berg', 'Carlson', 'Brown'], dtype='object')
</code></pre>
</div>
