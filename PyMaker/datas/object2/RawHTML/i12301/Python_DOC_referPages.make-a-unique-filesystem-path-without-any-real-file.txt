<div class="post-text" itemprop="text">
<p>How should a program generate a unique filesystem path and <em>not</em> create
the filesystem entry?</p>
<p>The <code>tempfile.mktemp</code> function is <a href="https://docs.python.org/3/library/tempfile.html#tempfile.mktemp" rel="nofollow">strongly deprecated</a>, and rightly so because it leaves the program vulnerable to insecure file creation.</p>
<p>In some code (e.g. unit tests) I am calling <code>tempfile.mktemp</code> to
generate a unique path for a filesystem entry that I <em>do not want</em> to
exist on the real filesystem. In this case the filesystem security
concerns are irrelevant because there is no file.</p>
<p>The deprecation of that function is a concern still, because I don't
want code that makes every conscientious reader need to decide whether
the code is a problem. Instead the code should avoid rightly-deprecated
APIs.</p>
<p>It is also prone to that API function disappearing at some point in the
future, because it is explicitly and strongly deprecated.</p>
<p>Other functions provided by <code>tempfile</code> do not serve the need to <em>avoid</em> touching the filesystem at all, just to get a unique path.</p>
<p>So I agree with the deprecation of <code>tempfile.mktemp</code> in general, but the library doesn't appear to provide a replacement for this purpose.</p>
<p>What standard library function should I be using to generate
<code>tempfile.mktemp</code>-like unique paths, and <em>not</em> ever create a real file
by that path?</p>
</div>
<div class="post-text" itemprop="text">
<p>AFAIK there is no such a standard function, which generates a unique name, but doesn't create a file.
Take a look at the internal implementation of the "mktemp" function and create your own one...</p>
<p>Here is the code that might be interesting for you:</p>
<pre><code>class _RandomNameSequence:
    """An instance of _RandomNameSequence generates an endless
    sequence of unpredictable strings which can safely be incorporated
    into file names.  Each string is six characters long.  Multiple
    threads can safely use the same instance at the same time.

    _RandomNameSequence is an iterator."""

    characters = "abcdefghijklmnopqrstuvwxyz0123456789_"

    @property
    def rng(self):
        cur_pid = _os.getpid()
        if cur_pid != getattr(self, '_rng_pid', None):
            self._rng = _Random()
            self._rng_pid = cur_pid
        return self._rng

    def __iter__(self):
        return self

    def __next__(self):
        c = self.characters
        choose = self.rng.choice
        letters = [choose(c) for dummy in range(8)]
        return ''.join(letters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a code maintenance question as much as a programming question. Here is one option to resolve it:</p>
<ul>
<li>create a wrapper function around <code>tempfile.mktemp</code>, with a descriptive name that matches your domain (e.g. something in the vein of <code>create_database_path_name</code>)</li>
<li>in the implementation, write a comment above the <code>tempfile.mktemp</code> invocation explaining why it was carefully weighed, and considered safe for this usage, deprecation notwithstanding.</li>
</ul>
<p>The first step makes sure that the invocation of the deprecated function is contained in only one place. Second step makes sure that one place is well documented for future code review.</p>
<p>If the deprecated function ever disappears from the module, you only have one place to fix, e.g. by copying the original implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reasons for <code>mktemp</code> deprecation is irrelevant to you because you don't plan to ever make the file. It generates random file names and that's what you want. If you are worried about reviewers that don't understand that, a simple comment would do. Alternately, you could create your own file name with something like <code>base64.b64encode(os.urandom(20)).decode('ascii')</code> and not offend their delicate sensibilities. </p>
</div>
<span class="comment-copy">Thank you. I will raise an issue with the Python standard library maintainers, to expose a public API for this.</span>
<span class="comment-copy">@bignose The public API exists, it's called <code>tempfile.mktemp</code>. :) Maybe the maintainers would accept a suggestion to change the name to one that would not bear the burden of familiarity with the <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/mktemp.html" rel="nofollow noreferrer">POSIX <code>mktemp</code></a>, which is similarly deprecated?</span>
<span class="comment-copy">The concern about removal of the deprecated API is not addressed by a comment in the code.</span>
<span class="comment-copy">@bignose - Its not deprecated, there is just a warning that it may be deprecated in the future. OP can always fall back to generating his own random name... but that also illustrates why the "do not use" histrionics are silly. You should know the issue and use when appropriate. Lots of programs use well-known intermediate file names and would benefit by <code>mktemp</code> when a pre-opened file is not appropriate.</span>
<span class="comment-copy">@tdelaney I agree with every word you said, except for the starting sentence; <code>tempfile.mktemp</code> unfortunately really is <i><a href="https://docs.python.org/3/library/tempfile.html#tempfile.mktemp" rel="nofollow noreferrer">deprecated since version 2.3</a></i>. To reinforce the point, it's even listed under a scary "deprecated functions and variables section".</span>
