<div class="post-text" itemprop="text">
<p>I've a queue that is populated by different threads.
I've a thread where I get items from the queue and I send them to another destination. When the last operation fails I want to put again the elements in the queue, but in the bottom of the queue because I want that the dequeuer Thread dequeue them as first priority. Is there a way to do that? Maybe using other class instead of Queue.queue?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow">deque</a>?</p>
<blockquote>
<p>Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here's an implementation -- it's basically <a href="https://hg.python.org/cpython/file/2.7/Lib/Queue.py#l107" rel="nofollow"><code>Queue.put</code> method</a> with <code>self._put(item)</code> replaced by <code>self.queue.appendleft(item)</code></p>
<pre><code>from Queue import Queue

class MyQueue(Queue):
    def putleft(self, item, block=True, timeout=None):
        self.not_full.acquire()
        try:
            if self.maxsize &gt; 0:
                if not block:
                    if self._qsize() == self.maxsize:
                        raise Full
                elif timeout is None:
                    while self._qsize() == self.maxsize:
                        self.not_full.wait()
                elif timeout &lt; 0:
                    raise ValueError("'timeout' must be a non-negative number")
                else:
                    endtime = _time() + timeout
                    while self._qsize() == self.maxsize:
                        remaining = endtime - _time()
                        if remaining &lt;= 0.0:
                            raise Full
                        self.not_full.wait(remaining)
            self.queue.appendleft(item)
            self.unfinished_tasks += 1
            self.not_empty.notify()
        finally:
            self.not_full.release()
</code></pre>
</div>
