<div class="post-text" itemprop="text">
<p>Lately, I've been prototyping a lot of C algorithms in Python. In order to help me make the most accurate models, I tried to create a custom data-type that I could use for seamlessly mixing fixed-width integers (uint8_t and friends) with standard Python math.</p>
<p>Towards that end, I wrote a little custom class that provides modulo-wrapped math and logic functions (to ensure that adding '1' to an 255 will return a value of 0 on an 8-bit variable).</p>
<p>Everything seemed to go smoothly, except that my custom math functions don't seem to get called by the interpreter!
Using the code below:</p>
<pre><code>class MockUint(object):
    @staticmethod
    def __math__(op1, op2, name, width = 128):
        if type(op1) is MockUint:
            width = op1._width
            op1 = int(op1)

        if type(op2) is MockUint:
            width = op2._width if (op2._width &gt; width) else width
            op2 = int(op2)

        mask = 2**width - 1
        result = int.__dict__[name](op1, op2) &amp; mask
        return MockUint(result, width)

    def __init__(self, value=0, width=64):
        self._width = width
        self._value = value

        math_funcs = ['__add__', '__sub__', '__mul__', '__floordiv__',
                      '__mod__', '__divmod__', '__pow__', '__lshift__',
                      '__rshift__', '__and__', '__xor__', '__or__']

        for func in math_funcs:
            setattr(self, func, lambda x, y: self.__math__(x, y, func))

    def __repr__(self):
        return "%d" % self._value

    def __int__(self):
        return self._value
</code></pre>
<p>I get the following results:</p>
<pre><code>&gt; test = MockUint(0, 8)
&gt; test + 4
TypeError: unsupported operand type(s) for +: 'MockUint' and 'int'
</code></pre>
<p>If I manually declare all of the functions with a pattern like,</p>
<pre><code>def __add__(self, op):
    return self.__math__(self, op, '__add__')
</code></pre>
<p>everything seems to work as shown below:</p>
<pre><code>&gt; test = MockUint(0, 8)
&gt; test + 4
4
</code></pre>
<p>I really don't want to clutter up the code with 12 identical methods if I can avoid it. How can I make the interpreter correctly detect that <code>__add__</code> and friends were created during <code>__init__()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow">official documentation</a> magic methods must be defined on the class, not the instance.</p>
<p>You have two options to solve your problem:</p>
<p><strong>1. use old-style classes</strong></p>
<p>In old-style classes (it's not like i recommend to use them) you can define magic methods on the instance and they will work. You only have to change the <code>lambda</code> function, because they are only passed one parameter (<code>self</code> is implicit here)</p>
<pre><code>class Int:
    def __init__(self):
        self.value = ...
        setattr(self, "__add__", lambda other: self.value + other)
</code></pre>
<p><strong>2. define the methods on the class</strong></p>
<pre><code>class Int(object):
    def __init__(self):
        self.value = ...

    @classmethod
    def static_init(cls):
        setattr(cls, "__add__", lambda self, other: self.value + other)

Int.static_init()
</code></pre>
<p>To avoid that extra call to <code>static_init</code> you can create a meta class and add the magic methods in its <code>__init__()</code></p>
<p><strong>2b. with metaclass</strong></p>
<pre><code>class IntMeta(type):
    def __init__(cls, *args):
        setattr(cls, "__add__", lambda self, other: self.value + other)

class Int(object):
    __metaclass__ = IntMeta
    def __init__(self, value):
        self.value = value
</code></pre>
</div>
