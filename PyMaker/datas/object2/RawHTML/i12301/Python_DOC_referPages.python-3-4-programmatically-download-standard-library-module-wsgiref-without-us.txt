<div class="post-text" itemprop="text">
<p>I am using the Bottle micro-web framework within a closed python installation. The standard library of this python install is very limited. Unsurprisingly pip is not there so I can't import pip and go that route.</p>
<p>I can get Bottle to run when I pull wsgiref from a previously installed Python on my computer and copy it into the directory of my running script but that's not a working solution for anyone who wants to run my script. I need to be able to download wsgiref from a suitable source.</p>
<p>The closed python install comes from the The  Sims 4 PC game. This is a script called <code>my_web_app.py</code> that I wrote. <code>bottle.py</code> and the wsgiref directory are in the same folder as <code>my_web_app.py</code> which is in a folder called <code>my_web_mod</code> under <code>\Electronic Arts\The Sims 4\Mods</code>. The below code won't run without The Sims 4 but it's here for anyone to use in case they have the game and want to test.</p>
<pre><code>import sims4.commands
import services

from bottle import route, run
import threading

@route('/siminfo')
def siminfo():
    sim_info = ''

    def logger(msg):
        nonlocal sim_info
        sim_info = msg
    services.active_sim_info().log_sim_info(logger)
    sim_info = sim_info.replace('&lt;', '&amp;lt;')
    sim_info = sim_info.replace('&gt;', '&amp;gt;')
    sim_info = sim_info.replace('\n', '&lt;br/&gt;')
    return sim_info

@route('/test')
def test():
    return "&lt;b&gt;Test!&lt;/b&gt;"

t = threading.Thread(target=run, kwargs=dict(host='localhost', port=8080))
t.daemon = True
t.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try setting up the sys.path from your script before importing anything. 
if wsgiref is next to your script it will might work</p>
<pre><code>import sys, os
sys.path.append(os.path.dirname(__file__))
import bottle
#all the other cool stuff you do...
</code></pre>
</div>
<span class="comment-copy">Can you do <code>python3 -m pip --version</code>? Because then you might be able to install packages though <code>python3 -m pip install package</code>.</span>
<span class="comment-copy">I don't have an executable python. The python runtime is packaged as a Windows DLL.</span>
<span class="comment-copy">Python and its standard library <a href="https://docs.python.org/3/license.html" rel="nofollow noreferrer">are open source</a>, perhaps you could make your own copy of the package you need, and distribute it along with the app?</span>
<span class="comment-copy">Yeah, what @Blckknght said. That may be your best or even only option. Even if you were to use <code>pip</code>, I'm not sure that the PyPI version of <code>wsgiref</code> is usable with Python 3.4. As for programmatically downloading stuff in general, does this custom Python have <code>urllib.request</code>? Could you maybe call out to the system <code>ftp</code> (via <code>os.system()</code> or <code>subprocess</code>)?</span>
<span class="comment-copy">It has the <code>urllib.request</code> module. @Blckknght I totally agree with your solution but I'm worried in a years (possibly longer!) time I'll have an out-of-date copy of that module sitting on a hard-drive / online vcs. I'm assuming here that the wsgiref module gets a few updates every year or so.</span>
