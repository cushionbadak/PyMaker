<div class="post-text" itemprop="text">
<p>I am new to python and couldn't find the answer to this. Referring to the code at the end of the message, can I know what does the part "for item, total in totals.items()" in the line below mean?</p>
<pre><code>rankings = [(total/simSums[item], item) for item, total in totals.items()]
</code></pre>
<p>Also, the code failed and said</p>
<blockquote>
<p>AttributeError: 'dict' object has no attribute 'predictors'</p>
</blockquote>
<p>when I changed all instances of "item(s)" in the code to "predictor(s)". Why is that so?</p>
<pre><code># Return the Pearson correlation coefficient for p1 and p2
def sim_person(prefs, p1, p2):
    # Get the list of shared_items
    si={}
    for item in prefs[p1]:
        if item in prefs[p2]:si[item]=1

    # Find the number of elements 
    n=len(si)

    # if they have no ratings in common, return 0
    if n==0: return 0

    # Add up all the preferences
    sum1 = sum([prefs[p1][it] for it in si])
    sum2 = sum([prefs[p2][it] for it in si])

    # Sum up the squares
    sum1Sq = sum([pow(prefs[p1][it],2) for it in si])
    sum2Sq = sum([pow(prefs[p2][it],2) for it in si])

    # Sum up the products
    pSum = sum([prefs[p1][it]*prefs[p2][it] for it in si])

    # Calculate Person score
    num = pSum - (sum1*sum2/n)
    den = sqrt((sum1Sq - pow(sum1,2)/n)*(sum2Sq - pow(sum2,2)/n))
    if den == 0: return 0

    r = num/den
    return r

# Returns the best matches for person from the prefs dictionary.
# Number of results and similarity function are optional params.
def topMatch(prefs, person, n=5, similarity=sim_person):
    scores = [(similarity(prefs, person, other), other) 
              for other in prefs if other!=person]

    # Sort the list so the highest scores appear at the top
    scores.sort()
    scores.reverse()
    return scores[0:n]

# Gets recommendations for a person by using a weighted average
# of every other user's rankings 
def getRecommendations(prefs, person, similarity=sim_person):
    totals = {}
    simSums = {}
    for other in prefs:
        # don't compare me to myself
        if other == person: continue
        sim = similarity(prefs, person, other)

        # ignore scores of zero of lower
        if sim&lt;=0: continue
        for item in prefs[other]:

            # only score movies I haven't seen yet
            if item not in prefs[person] or prefs[person][item]==0:
                # Similarity * Score
                totals.setdefault(item, 0)
                totals[item]+=prefs[other][item]*sim
                # Sum of similarities
                simSums.setdefault(item, 0)
                simSums[item]+=sim

    # Create the normalized list 
    rankings = [(total/simSums[item], item) for item, total in totals.items()]

    # Return the sorted list 
    rankings.sort()
    rankings.reverse()
    return rankings
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>dict.items</code> iterates over the key-value pairs of a dictionary. Therefore <code>for key, value in dictionary.items()</code> will loop over each pair. This is documented information and you can check it out in the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">official web page</a>, or even easier, open a python console and type <code>help(dict.items)</code>. And now, just as an example:</p>
<pre><code>&gt;&gt;&gt; d = {'hello': 34, 'world': 2999}
&gt;&gt;&gt; for key, value in d.items():
...   print key, value
...
world 2999
hello 34
</code></pre>
<p>The <code>AttributeError</code> is an exception thrown when an object does not have the attribute you tried to access. The class <code>dict</code> does not have any <code>predictors</code> attribute (now you know where to check it :) ), and therefore it complains when you try to access it. As easy as that.</p>
</div>
<span class="comment-copy">Please make sure the indentation is appropriate in any code you post, especially Python code, since the indentation affects the behaviour of Python.</span>
<span class="comment-copy">I think you downvoters are a little bit rough on the newbies.</span>
<span class="comment-copy">@bgusach: My <i>guess</i> is that the downvotes are due to lack of research, since <code>dict.items</code> is pretty easy to find in the docs. OTOH, I suppose the official Python docs can be a bit intimidating if Python is your first programming language, since they are aimed at seasoned programmers.</span>
<span class="comment-copy">@PM2Ring, searching and reading docs is the daily bread of any programmer, but either long time ago or not so long, all of us were that n00b asking the obvious, wihout a clue on where to start. Sometimes people forget that SO is a Q&amp;A site, not a strictly professional Q&amp;A site.</span>
<span class="comment-copy">Thank so much for pointing the way. I had didn't realize that totals.items refers to dict.items and thought it was like a JSON object of sorts. Now I know how to approach such issues in future. Thanks again.</span>
<span class="comment-copy">Happy to help. Don't forget to mark the answer as accepted!</span>
