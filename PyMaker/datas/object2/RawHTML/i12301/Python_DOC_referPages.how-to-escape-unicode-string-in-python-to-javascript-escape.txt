<div class="post-text" itemprop="text">
<p>I have the following string <code>"‚ó£‚õ≠‚ó£‚óÉ‚ú∫‚ñ≤‚ô¢"</code> and I want to make that string into <code>"\u25E3\u26ED\u25E3\u25C3\u273A\u25B2\u2662"</code>. Exactly the same as this site does <a href="https://mothereff.in/js-escapes" rel="nofollow">https://mothereff.in/js-escapes</a></p>
<p>I was wondering if this is possible in python. I have tried allot of stuff from the unicode docs for python but failed miserably.</p>
<p>Example of what I tried before:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: latin-1 -*-

f = open('js.js', 'r').read()

print(ord(f[:1]))
</code></pre>
<p>help would be appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're in python 2, then I'd suspect you're getting something like this: </p>
<pre><code>&gt;&gt;&gt; s = "‚ó£‚õ≠‚ó£‚óÉ‚ú∫‚ñ≤‚ô¢"
&gt;&gt;&gt; s[0]
'\xe2'
</code></pre>
<p>To get to the unicode code points in a UTF-8 encoded file (or buffer), you'll need to <a href="https://docs.python.org/2/library/stdtypes.html#str.decode" rel="nofollow">decode</a> it into a python <a href="https://docs.python.org/2/library/functions.html#unicode" rel="nofollow">unicode</a> object first (otherwise you'll see the bytes that make up the UTF-8 encoding).</p>
<pre><code>&gt;&gt;&gt; s_utf8 = s.decode('utf-8')
&gt;&gt;&gt; s_utf8[0]
u'\u25e3'
&gt;&gt;&gt; ord(s_utf8[0])
9699
&gt;&gt;&gt; hex(ord(s_utf8[0]))
'0x25e3'
</code></pre>
<p>In your case, you can go straight from the ord() to a literal unicode escape with something like this: </p>
<pre><code>&gt;&gt;&gt; "\\u\x" % (ord(s_utf8[0]))
'\\u25e3'
</code></pre>
<p>Or convert the entire string in one go with a list comprehension: </p>
<pre><code>&gt;&gt;&gt; ''.join(["\\u%04x" % (ord(c)) for c in s_utf8])
'\\u25e3\\u26ed\\u25e3\\u25c3\\u273a\\u25b2\\u2662'
</code></pre>
<p>Of course, when you're doing the conversion this way, you're going to display the code points for <em>all</em> the characters in the string. You'll have to decide which code points to show, or the ABCs will be escaped too:  </p>
<pre><code>&gt;&gt;&gt; ''.join(["\\u%04x" % (ord(c)) for c in u"ABCD"])
'\\u0041\\u0042\\u0043\\u0044'
</code></pre>
<p>Or, just use georg's suggestion to let python figure all that out for you. </p>
</div>
<div class="post-text" itemprop="text">
<p>Considering you're using Python 3:</p>
<pre><code>unicode_string="‚ó£‚õ≠‚ó£‚óÉ‚ú∫‚ñ≤‚ô¢"
byte_string= unicode_string.encode('ascii', 'backslashreplace')
print(byte_string)
</code></pre>
<p>See <a href="https://docs.python.org/2/library/codecs.html#codec-objects" rel="nofollow">codecs</a> module documentation for more infotmation.</p>
<p>However, to work with JavaScript notation, there's a special module <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow">json</a>, and then you could achieve the same thing:</p>
<pre><code>import json
unicode_string="‚ó£‚õ≠‚ó£‚óÉ‚ú∫‚ñ≤‚ô¢"
json_string=json.dumps(unicode_string)
print(json_string)
</code></pre>
</div>
<span class="comment-copy">try <code>u"‚ó£‚õ≠‚ó£‚óÉ‚ú∫‚ñ≤‚ô¢".encode('unicode-escape')</code></span>
<span class="comment-copy">This will fail for characters outside the Basic Multilingual Plane (on wide builds, including all Python 3.3+): <code>ord(c)</code> can take more than four hex digits.</span>
<span class="comment-copy">If the target here is JavaScript, it probably doesn't matter. JS's "\u" escapes would require surrogate pairs outside the BMP, and this method won't make them. At that point you should be using <code>json.dumps</code>, i.e.: <code>json.dumps("êåÄêåÅêåÇ") -&gt; "\ud800\udf00\ud800\udf01\ud800\udf02"</code></span>
<span class="comment-copy">I.e., what you said on your comment to @nikita's answer. :)</span>
<span class="comment-copy">+1 for <code>json.dumps</code>: use the right escaper for the job. Python <code>unicode-escape</code> is <i>not</i> the same syntax as JSON/JavaScript (it'll fail for characters outside the Basic Multilingual Plane: Python will say <code>\U00001F4A9</code> where JS wants <code>\uD83D\uDCA9</code>)</span>
