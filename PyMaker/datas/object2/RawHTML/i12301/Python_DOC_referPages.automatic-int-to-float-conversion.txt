<div class="post-text" itemprop="text">
<pre><code>m = 10
x = 5
val = 1
print(type(val))
for i in range(1, x+1):
    val = (val * (m + i)) / (i)
    print(type(val))
    print(val)
</code></pre>
<p>Here initially <code>val</code> is of type <code>int</code> but in the loop it is getting converted to <code>float</code> although I am performing integer by integer division. Why is it so?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to use: <code>//</code></p>
<pre><code>val = (val * (m + i)) // (i)
</code></pre>
<p>And your val will remain being an integer</p>
<p>The behavior of <code>/</code> was changed with this: <a href="https://www.python.org/dev/peps/pep-0238/" rel="nofollow">https://www.python.org/dev/peps/pep-0238/</a></p>
<p>The <code>operator</code> module docs give also a hint about the separation between <code>true division</code> (returning a float) and <code>floor division</code> which returns the floor and therefore an <code>int</code></p>
<p><a href="https://docs.python.org/3/library/operator.html" rel="nofollow">https://docs.python.org/3/library/operator.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It is specified in the <em>Semantics for True division</em> in <strong><a href="https://www.python.org/dev/peps/pep-0238/" rel="nofollow"><code>PEP 238</code></a></strong>:</p>
<blockquote>
<p>True division for <code>int</code>s and <code>long</code>s <strong>will convert the arguments to
    <code>float</code></strong> and then apply a <code>float</code> division.  That is, even <code>2/1</code> will
    return a <code>float</code> (<code>2.0</code>), not an <code>int</code>.  For <code>float</code>s and <code>complex</code>, it       will be the same as classic division.</p>
</blockquote>
<p>So an automatic conversion is performed when an <code>int</code> is found. Note that this is the default behaviour in Python 3. In python 2 you'll need to <code>import</code> from <code>__future__</code> in order to have similar results. </p>
</div>
<span class="comment-copy">might be useful to add that this changed between python2 and python3 in your answer</span>
