<div class="post-text" itemprop="text">
<p>Is there an idiomatic way to implement an "once method", that is: a method whose return value gets evaluated on the first call only?  Something like what the following simplified code does for the return value of <code>x</code>:</p>
<pre><code>class X:
    def __init__(self):
        self._x = None

    def x(self):
        if not self._x:
            self._x = some_expensive_call()
        return self._x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.2, you can use the <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a> decorator (but it may be overkill for what you need):</p>
<pre><code>import functools

@functools.lru_cache(maxsize=1)
def once():
    print("calculating expensive result")
    return "expensive result"

once()
once()
</code></pre>
<p>output:</p>
<pre><code>calculating expensive result         # &lt;- only prints on first call
'expensive result'                   # returned value on first call
'expensive result'                   # &lt;- just return value on second call
</code></pre>
<p>Alternatively, you can write your own decorator:</p>
<pre><code>def cache_result(func):
    def wrapper(*args, **kwds):
        if not wrapper.cached:
            wrapper.value = func(*args, **kwds)
            wrapper.cached = True

        return wrapper.value

    wrapper.cached = False

    return functools.update_wrapper(wrapper, func)
</code></pre>
<p>And use it on any function you want to run only once and cache the result                </p>
<pre><code>@cache_result
def do_once():
    print('doing it once')
    return 'expensive result'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is to give the function itself an attribute which will only be <code>True</code> on the first call.</p>
<pre><code>&gt;&gt;&gt; def once():
...     if once.first_call:
...         print('doing some heavy computation over here...')
...         once.result = 1 + 1
...         once.first_call = False
...     return once.result
... 
&gt;&gt;&gt; once.first_call = True
&gt;&gt;&gt; once()
doing some heavy computation over here...
2
&gt;&gt;&gt; once()
2
</code></pre>
<p>Another option is to (ab)use a mutable default parameter. The advantage is that you don't have to set an attribute on the function after defining it:</p>
<pre><code>&gt;&gt;&gt; def once(state={'first_call':True}):
...     if state['first_call']:
...         print('doing some heavy computation over here...')
...         state['result'] = 1 + 1
...         state['first_call'] = False
...     return state['result']
... 
&gt;&gt;&gt; once()
doing some heavy computation over here...
2
&gt;&gt;&gt; once()
2
</code></pre>
<p><em>edit</em>:</p>
<p>For completeness, if you have instance attributes that should only be computed once, use a property:</p>
<pre><code>class Foo(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        if self._x is None:
            self._x = self._compute_x()
        return self._x

    def _compute_x(self):
        print('doing some heavy computation over here...')
        return 1 + 1
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.x
doing some heavy computation over here...
2
&gt;&gt;&gt; f.x
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you tagged this as Python 3.X, you can also use a <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow noreferrer">function annotation</a> as a state flag:</p>
<pre><code>&gt;&gt;&gt; def f()-&gt;{"state":False}:
...    if f.__annotations__['return']['state']==False:
...       f.__annotations__['return']['state']=True
... 
&gt;&gt;&gt; f.__annotations__
{'return': {'state': False}}
&gt;&gt;&gt; f()
&gt;&gt;&gt; f.__annotations__
{'return': {'state': True}}
</code></pre>
<p>For a class, <a href="https://stackoverflow.com/a/35387411/298607">timgeb method</a> works great. </p>
</div>
<div class="post-text" itemprop="text">
<p>The old-school method is to just have a global that holds the result.</p>
<pre><code>_foo_result = None

def foo():
    global _foo_result
    if _foo_result is None:
        _foo_result = _get_me_some_foo()
    return _foo_result
</code></pre>
<p>If <code>None</code> is a valid result, define an empty class and use that instead</p>
<pre><code>class _FooNone: pass
</code></pre>
</div>
<span class="comment-copy">Besides functions, does <code>functools.lru_cache</code> work for methods, too?</span>
<span class="comment-copy">Yes, it works on methods too.</span>
<span class="comment-copy">Besides functions, does this solution work for methods, too?</span>
<span class="comment-copy">@Elena sure, but inside a class you could and probably should use a property decorator to achieve this result.</span>
