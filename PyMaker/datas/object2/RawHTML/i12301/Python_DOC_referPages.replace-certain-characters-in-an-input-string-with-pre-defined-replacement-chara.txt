<div class="post-text" itemprop="text">
<p>I want to write a program that encodes a word you typed into the console like this:</p>
<p>If You write an A for example it will be replaced with a Z 
or you type T and get a U.</p>
<p>Example:</p>
<pre><code>A --&gt; Z  
T --&gt; U 
H --&gt; F 
</code></pre>
<p>If it's possible can you tell me how to change the word you typed in the console?</p>
<p>Still need help can't figure out how to do it ! </p>
</div>
<div class="post-text" itemprop="text">
<p>That's easy, just define a dictionary which maps characters to their replacement.</p>
<pre><code>&gt;&gt;&gt; replacers = {'A':'Z', 'T':'U', 'H':'F'}
&gt;&gt;&gt; inp = raw_input()
A T H X
&gt;&gt;&gt; ''.join(replacers.get(c, c) for c in inp)
'Z U F X'
</code></pre>
<p>I don't know where exactly you want to go and whether case-sensitivity matters, or if there's a more general rule to determine the replacement character that you did not tell us - but this should get you started.</p>
<p><em>edit</em>:
an explanation was requested:</p>
<p><code>(replacers.get(c, c) for c in inp)</code> is a generator which spits out the following items for the example input:</p>
<pre><code>&gt;&gt;&gt; [replacers.get(c, c) for c in inp]
['Z', ' ', 'U', ' ', 'F', ' ', 'X']
</code></pre>
<p>For each character <code>c</code> in the input string <code>inp</code> we ge the replacement character from the <code>replacers</code> dictionary, or the character itself if it cannot be found in the dictionary. The default value is the second argument passed to <code>replacers.get</code>. </p>
<p>Finally, <code>''.join(some_iterable)</code> builds a string from all the items of an iterable (in our case, the generator), glueing them together with the string <code>join</code> is being called on in between. Example:</p>
<pre><code>&gt;&gt;&gt; 'x'.join(['a', 'b', 'c'])
'axbxc'
</code></pre>
<p>In our case, the string is empty, which has the effect of simply concatenating all the items in the iterable.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from string import maketrans

orginalCharacters = "aeiou"
encodedCharacters = "12345"
trantab = maketrans(orginalCharacters, encodedCharacters)

text = "this is string example";
print text.translate(trantab)
</code></pre>
<p>this will output:</p>
<pre><code>th3s 3s str3ng 2x1mpl2
</code></pre>
<p>Look up the function <strong>translate</strong> for more info</p>
</div>
<div class="post-text" itemprop="text">
<p>timgeb has a great solution; alternatively, you could also use what's on <a href="https://docs.python.org/3/library/random.html" rel="nofollow">this page of the docs</a> and use a <code>for</code> loop to assign a random integer to each letter, and store it in a dictionary (see <code>randint</code>).</p>
<p>This would be more helpful if you want it to change every time you run your program.</p>
</div>
<span class="comment-copy">I edited the title of your question, hopefully this is a bit clearer.</span>
<span class="comment-copy">So you type apple for example and you have a list that shows what letter replaces a for example z and then the console prints out zpple</span>
<span class="comment-copy">It was just an example i'm going to make a table that shows what letter replaces what letter. Actually thanks for the code :) Should help me with my plan.</span>
<span class="comment-copy">I would love to hear the reason for the downvote, such that I can improve my answer.</span>
<span class="comment-copy">@timgeb: I didn't down-vote, but this seems like a straightforward response to me, so +1.</span>
<span class="comment-copy">I seriously don't know who downvoted.. That's the best answer i could get in the internet</span>
<span class="comment-copy">Actually could you explain "''.join(replacers.get(c, c) for c in inp)" i'm new to python and for me it doesn't work properly</span>
<span class="comment-copy">Please describe your solution in a way that remains clear if the page you link to were to go away.</span>
<span class="comment-copy">The asker of the question requested to not post a whole code so they could do it themselves; also since I linked to the Python docs, there's no reason it should actually disappear.</span>
<span class="comment-copy">The documentation is likely to remain available; that particular URL is another story.</span>
<span class="comment-copy">I was unaware that the doc URLs changed frequently enough to warrant direct quoting. If that's the case, I'll come back and edit my answer.</span>
