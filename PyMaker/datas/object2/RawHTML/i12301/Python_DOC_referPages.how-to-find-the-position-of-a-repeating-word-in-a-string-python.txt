<div class="post-text" itemprop="text">
<p>How to get Python to return the position of a repeating word in a string?</p>
<p>E.g. the word "cat" in "the cat sat on the mat which was below the cat" is in the 2nd and 11th position in the sentence.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow"><strong><code>re.finditer</code></strong></a> to find all occurrences of the word in a string and starting indexes:</p>
<pre><code>import re

for word in set(sentence.split()):
    indexes = [w.start() for w in re.finditer(word, sentence)]
    print(word, len(indexes), indexes)
</code></pre>
<p>And using dictionary comprehension:</p>
<pre><code>{word: [w.start() for w in re.finditer(word, sentence)] for word in sentence.split()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will return a dictionary mapping each word in the sentence, which repeates at least once, to the list of word index (not character index)</p>
<pre><code>from collections import defaultdict

sentence = "the cat sat on the mat which was below the cat"

def foo(mystr):
    sentence = mystr.lower().split()
    counter = defaultdict(list)
    for i in range(len(sentence)):
        counter[sentence[i]].append(i+1)

    new_dict = {}
    for k, v in counter.iteritems():
        if len(v) &gt; 1:
            new_dict[k] = v

    return new_dict

print foo(sentence)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following will take an input sentence, take a word from the sentence, and then print the position(s) of the word in a list with a starting index of 1 (it looks like that's what you want from your code).</p>
<pre><code>sentence = input("Enter a sentence, ").lower()
word = input("Enter a word from the sentence, ").lower()
words = sentence.split(' ')
positions = [ i+1 for i,w in enumerate(words) if w == word ]
print(positions)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer simplicity and here is my code below:</p>
<pre><code>sentence = input("Enter a sentence, ").lower()
word_to_find = input("Enter a word from the sentence, ").lower()
words = sentence.split()  ## Splits the string 'sentence' and returns a list of words in it. Split() method splits on default delimiters.

for pos in range(len(words)):
    if word_to_find == words[pos]:   ## words[pos] corresponds to the word present in the 'words' list at 'pos' index position.
        print (pos+1)
</code></pre>
<p>The 'words' consists of the list of all the words present in the sentence. Then after that, we iterate and match each word present at index 'pos' with the word we are looking to find(word_to_find) and if both the words are same then we print the value of pos with 1 added to it.</p>
<p>Hope this is simple enough for you to understand and it serves your purpose.</p>
<p>If you wish to use a list comprehension for the above, then:</p>
<pre><code>words = sentence.split()
positions = [ i+1 for i in range(len(words)) if word_to_find == words[i]]
print (positions)
</code></pre>
<p>Both the above ways are same, just the later gives you a list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>positions= [] 

sentence= input("Enter the sentence please: ").lower() 

sentence=sentence.split( ) 

length=len(sentence))

word = input("Enter the word that you would like to search for please: ").lower() 

if word not in sentence: 
     print ("Error, '"+word+"' is not in this sentence.") 

else: 
     for x in range(0,length):
          if sentence[x]==word: #
               positions.append(x+1)
     print(word,"is at positions", positions)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s="hello fattie i'm a fattie too"
#this code is unsure but manageable
looking word= "fattie"
li=[]
for i in range(len(s)):
    if s.startswith(lw, i):
        print (i)
        space = s[:i].count(" ")
        hello = space+1
        print (hello)
        li.append(hello)
print(li)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list">How to find all occurrences of an element in a list?</a></span>
<span class="comment-copy"><code>string.index</code> returns the first occurrence of a substring in a string. You're also using a for loop that goes from 0 to the length of the sentence <i>in characters</i>, not <i>words</i>.</span>
<span class="comment-copy">Since it's not quite clear from your code, what task are you trying to accomplish?</span>
<span class="comment-copy"><code>[i for i, x in enumerate(s) if s.count(x) &gt; 1]</code></span>
<span class="comment-copy">@MarounMaroun that will give repeated characters, and do so in O(n^2) ew.</span>
<span class="comment-copy">OP doesn't want to give <code>word</code> as an argument, he wants to find repetitive words.</span>
<span class="comment-copy">@MarounMaroun not true. Look at the line <code>word = input("Enter a word from the sentence, ").lower()</code></span>
<span class="comment-copy">My mistake.. Correct.</span>
<span class="comment-copy">Even if that were the case, you could do <code>... for word, count in collections.Counter(sentence) if count &gt; 1]</code></span>
<span class="comment-copy">Your first sentence is <b>very</b> wrong. He's using Python 3.x so <code>raw_input()</code> doesn't even exist anymore...</span>
<span class="comment-copy">go ahead with raw_input() in python3</span>
<span class="comment-copy">My bad wilbur. I just noticed, being a Python 2.x guy. I'll correct immediately.</span>
