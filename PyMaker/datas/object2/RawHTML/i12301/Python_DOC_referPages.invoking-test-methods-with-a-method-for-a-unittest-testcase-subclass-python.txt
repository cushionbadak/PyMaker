<div class="post-text" itemprop="text">
<p>I've been reading <a href="https://docs.python.org/3/library/unittest.html#unittest.main" rel="nofollow">the documentation</a> for the <code>unittest</code> module, but I haven't been able to decipher if it's even possible to do what I'm looking to do. Specifically, I'd like to be able to do something like the following class:</p>
<pre><code>class TestMyCode(unittest.TestCase):

    def test_code(self):
        self.assertTrue(True)

    # Not sure how to do implement this method below
    def run_tests(self):
        # This would run all of the tests in my class
        self.run()
</code></pre>
<p>The reason I would like to do this is because I would like to run my tests from within another Python file. E.g., say I'm writing code in another file:</p>
<pre><code>from test_my_code import TestMyCode
tests = TestMyCode()
# Runs all of the tests from the TestMyCode subclass
tests.run_tests()
</code></pre>
<p>Is this possible?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative to what you are trying to do would be to run the <code>main</code> module shown below. Make sure that the <code>test</code> module is available for import if you wish to run the tests in it. Hope this helps you!</p>
<hr/>
<p><strong>Module:</strong> <code>test</code></p>
<pre><code>import unittest


class TestMyCode(unittest.TestCase):

    def test_code(self):
        self.assertTrue(True)
</code></pre>
<hr/>
<p><strong>Module:</strong> <code>main</code></p>
<pre><code>import test


def run_tests(module):
    module.unittest.main(module.__name__)


if __name__ == '__main__':
    run_tests(test)
</code></pre>
<hr/>
<p><strong>Addendum:</strong> To do what you are requesting, add a method that replicates some of the internal work done by <code>unittest.main</code> to run the tests. The following two modules help to demonstrate how you might go about modifying your <code>TestMyCode</code> class so that it can run tests on itself without outside help.</p>
<hr/>
<p><strong>Module:</strong> <code>test_module</code></p>
<pre><code>import unittest


class TestMyCode(unittest.TestCase):

    def test_code(self):
        self.assertTrue(True)

    @classmethod
    def run_tests(cls):
        test = unittest.defaultTestLoader.loadTestsFromTestCase(cls)
        unittest.TextTestRunner().run(test)
</code></pre>
<hr/>
<p><strong>Module:</strong> <code>main</code></p>
<pre><code>import test_module


def main():
    test_module.TestMyCode.run_tests()


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">I think that I follow what you're saying, but with that solution wouldn't I have to run <code>main.py</code> from the command line? I'd like to be able to run all of the tests from a <code>unittest.TestCase</code> subclass with a single method call within a script.   My thinking behind this is that I could then have a script take a set of commands and then only run certain tests if a command line arg, say <code>--test</code> is called.</span>
<span class="comment-copy">@gr1zzlybe4r Two more modules have been added demonstrating what appears to be a solution to your question. The <code>TestMyCode</code> class has been modified so that tests can be run directly via a method of the class.</span>
<span class="comment-copy">Thank you! This is what I was looking for. Marked the answer as correct.</span>
