<div class="post-text" itemprop="text">
<p>I am new at Python and trying to learn how to use BeautifulSoup to scrape a webpage. For starters, I was just using yahoo.com's HTML code:</p>
<p>view-source:<a href="https://www.yahoo.com/" rel="nofollow">https://www.yahoo.com/</a></p>
<p>I wanted to scrape the list of links starting on row 577 and ending at 633 and get their URL and the title and put it in table in Python. </p>
<p>So far, I have the following:</p>
<pre><code>from bs4 import BeautifulSoup

myURL = "http://www.yahoo.com"
myPage = requests.get(myURL)

yahoo = BeautifulSoup(myPage.content)

print yahoo.prettify()

YahooList = yahoo.find('ul', class_="Pos(r) Miw(1000px) Pstart(9px) Lh(1.7) Reader-open_Op(0) mini-header_Op(0)")
print YahooList
</code></pre>
<p>I am unsure of how to proceed further from this. All the examples I am finding are for web scraping from tables but I am not finding much on how to do it on a list.</p>
<p>Does anyone have any suggestions?</p>
<p>Thanks,
Nick</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need <em>only scrape specific lines</em>, you need <em>get these line</em> before you <em>scrape it</em>. I'd suggest use <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer"><code>str.splitlines()</code></a> and a <strong>list slice</strong> to get them.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; r = requests.get('http://www.yahoo.com')
&gt;&gt;&gt; print('\n'.join(r.text.splitlines()[575:634]))
</code></pre>
<p>The output is:</p>
<pre><code>&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/politics/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:politics;t5:politics;cpos:9;" tabindex="1"&gt;Politics&lt;/a&gt;
&lt;/li&gt;

&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/celebrity/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:celebrity;t5:celebrity;cpos:10;" tabindex="1"&gt;Celebrity&lt;/a&gt;
&lt;/li&gt;

...

&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/travel/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:travel;t5:travel;cpos:22;" tabindex="1"&gt;Travel&lt;/a&gt;
&lt;/li&gt;

&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/autos/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:autos;t5:autos;cpos:23;" tabindex="1"&gt;Autos&lt;/a&gt;
&lt;/li&gt;
</code></pre>
<ul>
<li><p><code>r.text.splitlines()</code> split the HTML source code by lines, and gives a list. </p></li>
<li><p><code>[575:634]</code> is a list slice, which slices the list, and gives lines from <strong>576</strong> to <strong>634</strong>. I added two more lines because without them, the output will be:</p>
<pre><code>    &lt;a href="https://www.yahoo.com/politics/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:politics;t5:politics;cpos:9;" tabindex="1"&gt;Politics&lt;/a&gt;
&lt;/li&gt;

&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/celebrity/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:celebrity;t5:celebrity;cpos:10;" tabindex="1"&gt;Celebrity&lt;/a&gt;
&lt;/li&gt;

...

&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/travel/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:travel;t5:travel;cpos:22;" tabindex="1"&gt;Travel&lt;/a&gt;
&lt;/li&gt;

&lt;li class="D(b)"&gt;
    &lt;a href="https://www.yahoo.com/autos/" class="D(b) Fz(13px) C($topbarMenu) Py(3px) Td(n) Td(u):h"   data-ylk="slk:autos;t5:autos;cpos:23;" tabindex="1"&gt;Autos&lt;/a&gt;
</code></pre>
<p>And which isn't a <em>valid HTML code block</em>.</p></li>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>'\n'.join()</code></a> joins the list by <code>\n</code>, and gives another string which you want.</p></li>
</ul>
<hr/>
<p>After we have the <em>specific lines</em> :</p>
<pre><code>&gt;&gt;&gt; soup = BeautifulSoup('\n'.join(r.text.splitlines()[575:634]), 'html.parser')
&gt;&gt;&gt; for i in soup.find_all('a'):
...     print(i.get('href'))
...     
... 
https://www.yahoo.com/politics/
https://www.yahoo.com/celebrity/
https://www.yahoo.com/movies/
https://www.yahoo.com/music/
https://www.yahoo.com/tv/
https://www.yahoo.com/health/
https://www.yahoo.com/style/
https://www.yahoo.com/beauty/
https://www.yahoo.com/food/
https://www.yahoo.com/parenting/
https://www.yahoo.com/makers/
https://www.yahoo.com/tech/
https://shopping.yahoo.com/
https://www.yahoo.com/travel/
https://www.yahoo.com/autos/
</code></pre>
<p><code>soup.find_all('a')</code> finds all the <code>&lt;a&gt;</code> HTML tags in the string (HTML code block) we have, and gives a list of these tags.</p>
<p>Then, we use <code>for</code> loop over the list, and use <code>i.get('href')</code> to get the <code>href</code> attribute (the link you want) of the <code>&lt;a&gt;</code> tag.</p>
<hr/>
<p>You can also use a <a href="https://stackoverflow.com/questions/34835951/what-does-list-comprehension-in-python-mean-how-does-it-work-and-how-can-i-us/34835952#34835952"><strong>list comprehension</strong></a> to put the result into a list, rather than print it out:</p>
<pre><code>import requests
from bs4 import BeautifulSoup

r = requests.get('http://www.yahoo.com')
soup = BeautifulSoup('\n'.join(r.text.splitlines()[575:634]), 'html.parser')

l = [i.get('href') for i in soup.find_all('a')]
</code></pre>
<p><code>l</code> is the list which you're looking for.</p>
<hr/>
<p>If you also want get the <em>title</em> of these links, you can use <code>i.text</code> to get it. However, there's no <em>table object</em> in Python, I think you mean <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>dict</code></a>:</p>
<pre><code>&gt;&gt;&gt; d = {i.text: i.get('href') for i in soup.find_all('a')}
&gt;&gt;&gt; pprint(d)
{'Autos': 'https://www.yahoo.com/autos/',
 'Beauty': 'https://www.yahoo.com/beauty/',
 'Celebrity': 'https://www.yahoo.com/celebrity/',
 'Food': 'https://www.yahoo.com/food/',
 'Health': 'https://www.yahoo.com/health/',
 'Makers': 'https://www.yahoo.com/makers/',
 'Movies': 'https://www.yahoo.com/movies/',
 'Music': 'https://www.yahoo.com/music/',
 'Parenting': 'https://www.yahoo.com/parenting/',
 'Politics': 'https://www.yahoo.com/politics/',
 'Shopping': 'https://shopping.yahoo.com/',
 'Style': 'https://www.yahoo.com/style/',
 'TV': 'https://www.yahoo.com/tv/',
 'Tech': 'https://www.yahoo.com/tech/',
 'Travel': 'https://www.yahoo.com/travel/'}
&gt;&gt;&gt; d['TV']
'https://www.yahoo.com/tv/'
&gt;&gt;&gt; d['Food']
'https://www.yahoo.com/food/'
</code></pre>
<p>So you can use <code>{i.text: i.get('href') for i in soup.find_all('a')}</code> to get the dict you want.</p>
<p>In this case, <code>i.text</code> (title) is the keys in that dict, for example <code>'TV'</code> and <code>'Food'</code>.</p>
<p>And <code>i.get('href')</code> is the value (links), for example <code>'https://www.yahoo.com/tv/'</code> and <code>'https://www.yahoo.com/food/'</code>.</p>
<p>You can access the value by <code>d[key]</code> as my code above.</p>
</div>
<span class="comment-copy">What do you mean about <i>I wanted to scrape the list of links starting on row 577 and ending at 633</i> ? Do you mean <i>scrape all the link from the 577 line of the HTML source code, to 633 line</i> ?</span>
<span class="comment-copy">Yes, thats exactly what I mean. From the entire webpage, I just want to scrape those specific lines. My apologies if that was unclear in my post.</span>
<span class="comment-copy">Variable names like <code>myURL, YahooList</code> are not Pythonic, PEP-8 recommended names would be <code>my_url</code>, <code>yahoo_list</code> etc.</span>
