<div class="post-text" itemprop="text">
<p>I need multiple threads to access this heapq. So I want to make sure to conduct such operations using heapq.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, using the <code>heapq</code> library is not threadsafe. Use a lock to coordinate access.</p>
<p>Note that the <a href="https://docs.python.org/2/library/heapq.html" rel="nofollow">library documentation</a> links to the <a href="https://hg.python.org/cpython/file/2.7/Lib/heapq.py" rel="nofollow">source code</a>; you can always take a look yourself to see how it behaves. You'll see that the module operates on a regular Python <code>list</code> and there is no locking code.</p>
<p>If all you want is a priority queue, then look no further than the <a href="https://docs.python.org/2/library/queue.html#Queue.PriorityQueue" rel="nofollow"><code>Queue.PriorityQueue()</code> class</a> (renamed to <a href="https://docs.python.org/3/library/queue.html#queue.PriorityQueue" rel="nofollow"><code>queue.PriorityQueue</code></a> in Python 3). It is fully thread-safe.</p>
</div>
<span class="comment-copy">You will have to do the locking, as @martijn-pieters put it - but you might as well use a PriorityQueue instead of re-wiring heapq. <a href="https://docs.python.org/2/library/queue.html" rel="nofollow noreferrer">docs.python.org/2/library/queue.html</a></span>
