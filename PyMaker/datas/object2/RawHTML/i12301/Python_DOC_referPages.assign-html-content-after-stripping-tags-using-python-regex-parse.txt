<div class="post-text" itemprop="text">
<p>I want to assign the content of HTML after I do stripping of the tags. Here is the html that I initially removed tags from:</p>
<pre><code>    &lt;tr class="suite"&gt;
        &lt;td colspan="2" class="totalLabel"&gt;Total&lt;/td&gt;

            &lt;td class="zero number"&gt;0&lt;/td&gt;

            &lt;td class="skipped number"&gt;4&lt;/td&gt;

            &lt;td class="zero number"&gt;0&lt;/td&gt;

        &lt;td class="passRate suite"&gt;
            0%
          &lt;/td&gt;

  &lt;/tr&gt;
</code></pre>
<p>Approach for stripping the tags using regex:</p>
<pre><code>import re
import os

if os.path.isfile(some_html_file):
        with open(some_html_file) as f:
            data = f.read()
before = '&lt;td colspan="2" class="totalLabel"&gt;Total&lt;/td&gt;'
after  = '&lt;/tr&gt;'
start = data.find(before) + len(before)
stop  = data.find(after, start)
d = data[start:stop]

def stripHTMLTags (html):
  text = html
  rules = [
    { r'&gt;\s+' : u'&gt;'},         # remove spaces after a tag opens or closes
    { r'\s+' : u' '},                 # replace consecutive spaces
    { r'[ \t]*&lt;[^&lt;]*?/?&gt;' : u'' },    # remove remaining tags
    { r'^\s+' : u'' }                 # remove spaces at the beginning
  ]

  for rule in rules:
    for (k,v) in rule.items():
      regex = re.compile (k)
      text  = regex.sub (v, text)

  return text

print stripHTMLTags(d)
</code></pre>
<p>Here is the output that I get: <code>0400%</code></p>
<p>However, I want to assign the content of each HTML td tag to the variables 
and <strong><em>so, my expected final output</em></strong> will be:</p>
<pre><code>A = 0
B = 4
C = 0
D = 0%
</code></pre>
<p>What would be the best way to assign these variables? Also, is there a way I can combine the rules for my regular expressions and have simpler form of regex command? Other appoaches using regex would help.</p>
</div>
<div class="post-text" itemprop="text">
<p>To follow the comments and for the completeness sake, here is how you can use the <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow"><code>BeautifulSoup</code> HTML parser</a> to get the total numbers.</p>
<p>The idea is to find the <code>td</code> element with <code>totalLabel</code> class and get the <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-next-siblings-and-find-next-sibling" rel="nofollow">next <code>td</code> siblings</a>:</p>
<pre><code>from bs4 import BeautifulSoup   

data = """
&lt;tr class="suite"&gt;
    &lt;td colspan="2" class="totalLabel"&gt;Total&lt;/td&gt;
    &lt;td class="zero number"&gt;0&lt;/td&gt;
    &lt;td class="skipped number"&gt;4&lt;/td&gt;
    &lt;td class="zero number"&gt;0&lt;/td&gt;

    &lt;td class="passRate suite"&gt;
        0%
    &lt;/td&gt;
&lt;/tr&gt;
"""

soup = BeautifulSoup(data, "html.parser")

totals = [td.get_text(strip=True) 
          for td in soup.find("td", class_="totalLabel").find_next_siblings("td")]
print(totals)
</code></pre>
<p>Prints:</p>
<pre><code>['0', '4', '0', '0%']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Right now you are stripping out all the tag text. You should not do that, because it is the tag text that provides you the structure you need to identify the start and end of each value. What will you do when the numbers are greater than just one digit each? 10384003899 - is that a 103 or a 10 or a 1038 at the front?</p>
<p>Instead, modify your existing framework. Write yourself a regex that can use <em>grouping</em> to extract the value of a single TD element. Something like
<code>&lt;td&gt;(.*)&lt;/td&gt;</code> (except that I guarantee you that doesn't work). Then you can loop over your string, matching that pattern again and again until it fails, appending each match to a list. When you're done, you'll have a list of the values, which you can then manipulate however you like.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>Incomplete Answer (need help for the final step)</em></strong></p>
<p>my_html_file content: </p>
<pre><code>&lt;tr class="suite"&gt;
    &lt;td colspan="2" class="totalLabel"&gt;Total&lt;/td&gt;
    &lt;td class="zero number"&gt;0&lt;/td&gt;
    &lt;td class="skipped number"&gt;4&lt;/td&gt;
    &lt;td class="zero number"&gt;0&lt;/td&gt;

    &lt;td class="passRate suite"&gt;
        0%
    &lt;/td&gt;
&lt;/tr&gt;



import re
import os

if os.path.isfile(my_html_file):
        with open(my_html_file) as f:
            data = f.read()
before = '&lt;td colspan="2" class="totalLabel"&gt;Total&lt;/td&gt;'
after  = '&lt;/tr&gt;'
start = data.find(before) + len(before)
stop  = data.find(after, start)
d = data[start:stop]
m = re.sub(r'\s+', '', d)
r = re.compile('&lt;tdclass="(.*?)"&gt;(.*?)&lt;/td&gt;')
k = r.sub(r'\2\n', m)
print k
</code></pre>
<p>This gets me to:</p>
<pre><code>0
4
0
0%
</code></pre>
<p>How do I assign this output of r.sub(r'\2\n', m) to variables such as:</p>
<pre><code>A = 0
B = 4
C = 0
D = 0%
</code></pre>
<p>Above is what I need.</p>
</div>
<span class="comment-copy">If you want to make use of the HTML structure, don't strip the HTML.  Parse it, using an HTML parsing library.</span>
<span class="comment-copy">I am still in the process of learning how to parse things? Is there a way you can walk me through how to use HTML parsing library for questions like mine?</span>
<span class="comment-copy">@BrenBarn Using regex is important to me - as I will be running such a script on jenkins and using external dependencies(BeautifulSoup, lxml) will involve an overhead of affecting all of my slave machines and getting this done using regex would be really helpful in this case.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags">this question</a>.</span>
<span class="comment-copy">@BrenBarn: depending on what I want to achieve, regex would be really helpful - see my comments above</span>
<span class="comment-copy">alecxe - thanks, this is pretty useful for my learning, however I want to achieve this via regex (knowing BeautifulSoup and lxml are recommended)...if you see my comments to the Austin's response...I am almost there..I am getting output 0, 4, 0, 0% via d = data[start:stop] m = re.sub(r'\s+', '', d) r = re.compile('&lt;tdclass="(.*?)"&gt;(.*?)&lt;/td&gt;') k = r.sub(r'\2\n', m) print k...how do I assign this output of r.sub(r'\2\n', m)...to variables such as A = 0, B = 4, C = 0, D = 0%...</span>
<span class="comment-copy">I am a newbie to the regex, maybe you can walk me through an example of mine?</span>
<span class="comment-copy">The example I gave is a good example of matching a group. But it doesn't allow for extra fields in the opening tag (like <code>class="..."</code>). I see you using regex code in your original, so I'm sure you can figure out how to do that.</span>
<span class="comment-copy">...approach in question followed by.... d = data[start:stop] m = re.sub(r'\s+', '', d)  r = re.compile('&lt;tdclass="(.*?)"&gt;(.*?)&lt;/td&gt;') k = r.sub(r'\2\n', m) print k..............this gets me to 0, 4, 0, 0% in all new four lines (i am using \n)..now the question is how do I assign this output of r.sub(r'\2\n', m)...to variables such as A = 0, B = 4, C = 0, D = 0%...</span>
<span class="comment-copy">If you get a successful <code>re.match()</code>, you can use the <code>.group(n)</code> to extract the value of group n. See <a href="https://docs.python.org/3/library/re.html?highlight=re#match-objects" rel="nofollow noreferrer">the docs on <code>re</code></a> for examples.</span>
