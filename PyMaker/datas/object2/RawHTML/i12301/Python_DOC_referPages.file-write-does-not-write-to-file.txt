<div class="post-text" itemprop="text">
<p>i'm trying to create a def for log file and this is my script:</p>
<pre><code>import sys
import time
path= 'pc_path'
file = path + '\\' + 'test.txt'

files = open(file, 'w')
files.close()

def log(msg):
    time = time.time()
    filess = open(file, 'a')
    filess.write(msg)
    filess.close()

val = 10
val1 = 32
try:
    operazione = val + val1
    print('ok')
    print(operazione)
    msg = operazione
    log(msg)
except:
    sys.exit()
</code></pre>
<p>the script create a txt file but does not write a def() function into txt 
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to write an integer to a file; the <code>file.write()</code> method only accepts strings.</p>
<p>Convert to a string first:</p>
<pre><code>filess.write(str(msg))
</code></pre>
<p>You really should not use a blanket <code>except</code> handler in your code; you really do't want to play Pokemon and catch them all. By doing so you are missing valuable error information. See <a href="https://stackoverflow.com/questions/21553327/why-is-except-pass-a-bad-programming-practice">Why is "except: pass" a bad programming practice?</a></p>
<p>Rather than roll your own, you could just use the <a href="https://docs.python.org/2/library/logging.html" rel="nofollow"><code>logging</code> module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You open a file, and then you close it. You don't write anything in it though, because the function <code>write()</code> fails should anything but a variable of type <code>str()</code> be passed to it! Here is an alternative to <code>write()</code> with fewer restrictions:</p>
<pre><code>with open('file_name.txt', 'w') as file:

    print(variable_you_want_written, file=file, end='\n')
</code></pre>
<p><code>print()</code> function has fewer restrictions and is a better option here as it automatically formats the inputs it receives as a <code>str()</code>, regardless of the initial <code>type()</code>, and excluding functions, instances and generator objects, which would be displayed as, for instance, something like this: <code>&lt;function &lt;lambda&gt; at 0x1089b70d0&gt;</code>. </p>
<p>Additionally, be aware that the visual format to which they are converted (and subsequently displayed or written in a file) may not necessarily be to your liking, so I suggest you do experiment with the results and see what works best in a particular situation. </p>
<p><a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow">Click here</a> for Python 3 docs on <code>print()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Rename the variable <code>time</code> to something like <code>current_time</code> to avoid conflicts with the module <code>time</code>.</p></li>
<li><p>You passed <code>msg</code>, which is an integer, into the method <code>write</code>. You should convert it to a string first: <code>msg = str(operazione)</code></p></li>
</ol>
</div>
<span class="comment-copy">It should write <code>msg</code> to the file, where <code>msg</code> is equal to <code>operazione</code> since <code>msg = operazione</code>.</span>
<span class="comment-copy">If any of the answers given addresses your question, please mark them as such so that the thread is closed and the question appears as answered on the board. Otherwise, please elaborate.</span>
<span class="comment-copy">I suggest using <code>file.write()</code> rather than redirecting stdout of the <code>print()</code> call to a file.</span>
<span class="comment-copy">You can do that. Either is fine. The advantage of <code>print()</code>, however, is that you don't need to induce conversions.</span>
<span class="comment-copy">They do (try to) write something in it. They even use <code>'a'</code> append mode. But calling <code>file.write()</code> with anything but a string is going to fail.</span>
<span class="comment-copy">@MartijnPieters That's right. It does fail. What I meant by not writing was that nothing is actually going through to the file, as the function fails. I phrased it badly, and I will modify.</span>
<span class="comment-copy">Right, <code>print()</code> does accept any type and converts it to a string. You don't need to add <code>end='\n'</code> though, that's the default. You may want to add an explicit explanation as to <i>why</i> <code>print()</code> works better here than using <code>file.write()</code>.</span>
<span class="comment-copy">I would suggest doing <code>msg = str(msg)</code> directly in the <code>log</code> function which would make this function more versatile since casting a string as a string does not change anything.</span>
<span class="comment-copy">These are all very glorious, but they do not address the issue directly. Plus, why would you want to explicitly convert your variable when you can do that implicitly through <code>print()</code> via the interpreter, which is way faster (as it is implemented in C) and considerably less tedious? I'm really asking, cause I keep thinking I'm missing a point here, and I don't like that!</span>
