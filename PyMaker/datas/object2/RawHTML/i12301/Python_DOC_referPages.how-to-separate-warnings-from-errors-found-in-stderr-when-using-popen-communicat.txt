<div class="post-text" itemprop="text">
<p>I used Python's <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow"><code>subprocess.Popen</code></a> to execute a command and capture its output:</p>
<pre><code>p = Popen(cmd, stdout=PIPE, stderr=PIPE,shell=True)
stdout, stderr = p.communicate()
</code></pre>
<p>I want to use <code>stderr</code> to tell users when there was an error and exit my script:</p>
<pre><code>if stderr !='':
    return {'error':stderr}
</code></pre>
<p>But now I've found that <code>stderr</code> can contain warnings that could be safely ignored, so my script should not exit, but continue to finish the job.</p>
<p>Is there a way to separate warnings from errors in <code>stderr</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>univerio is correct, in that there is no specific meaning for any bytes you discover in <code>stderr</code>... think of it as "standard <em>not</em>-output" instead of "standard error".  However, on most operating systems, you can use the process's exit status (or "return code") to skip most of the progress bars and other non-error output.</p>
<p>A <code>Popen</code> object has a field called <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode" rel="nofollow"><code>returncode</code></a>, which is used to store whatever value the subprocess returned when it exited.  This value is <code>None</code> until 1) the process terminates, and 2) you collect its exit status with either the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll" rel="nofollow"><code>poll</code></a> or <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait" rel="nofollow"><code>wait</code></a> methods (at least on Unix-like systems).  Since you're using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>communicate</code></a>, which <em>always</em> does both 1 and 2, <code>p.returncode</code> should always be an integer by the time you care about it.</p>
<p>As a general rule, a <code>0</code> exit status indicates success, while any other value indicates failure.  If you trust the programs you're calling to return proper values, you can use this to skip most of the junk output on <code>stderr</code>:</p>
<pre><code># ...same as before...
stdout, stderr = p.communicate()
if p.returncode and stderr:
    return {'error': stderr}
</code></pre>
<p>If the bytes found in <code>stderr</code> weren't important enough to produce a non-<code>0</code> exit status, they're not important enough for you to report, either.</p>
<p>To test this, you can write a few tiny scripts that produce <code>stderr</code> output and then <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow"><code>exit</code></a>, either successfully or not.</p>
<p><code>warnings.py</code>:</p>
<pre><code>import sys
print('This is spam on stderr.', file=sys.stderr)
sys.exit(0)
</code></pre>
<p><code>errors.py</code>:</p>
<pre><code>import sys
print('This is a real error message.', file=sys.stderr)
sys.exit(1)
</code></pre>
<p>This still leaves the task of separating spinning batons and other progress-report spam from actual error messages, but you'll only have to do that for processes that failed... and maybe not even then, since the "not dead yet!" messages might actually be useful in those cases.</p>
<p>PS:  In Python 3, <code>stdout</code> and <code>stderr</code> will be <code>bytes</code> objects, so you'll want to <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow"><code>decode</code></a> them before treating them like strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>No. If all you have to go on is the data from stderr, you'll have to parse it to see if there are warnings. This is unfortunately specific to each program and fragile.</p>
<p>An example of how you can do this:</p>
<pre><code>if any("warning" not in l.lower() for l in stderr.splitlines()):
     return {'error':stderr}
</code></pre>
<p>You'll have to adapt this heuristic for your particular program.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/warnings.html" rel="nofollow noreferrer">docs.python.org/2/library/warnings.html</a></span>
<span class="comment-copy">THX, your answer seems easy and promising, I can add it. But unfortunately, I cannot reproduce the warning any more. Maybe the program fixed the issue. It's still a bug of my script, it's always happy to see a way to fix it</span>
<span class="comment-copy">@milowang:  I've added two scripts you can use to test this.</span>
<span class="comment-copy"><i>"when it exited"</i> is not entirely correct: <code>returncode</code> is set if you read child's exit status using <code>.wait()</code>, <code>.communicate()</code> (indirectly), <code>.poll()</code> (after the process exited) i.e., it is not enough that <i>"it exited"</i> -- you have to  read its status (until you read its status; it is <a href="http://askubuntu.com/a/427222/3712">zombie</a>).</span>
<span class="comment-copy">@J.F.Sebastian:  I've updated my answer.  It won't really change anything for <i>this</i> user though, because he or she is using <code>communicate</code>, which will always collect the exit status of the subprocess.</span>
<span class="comment-copy">I think that <code>any</code> should be an <code>all</code>:  "If <i>all</i> lines don't have the word "warning", then it's a real error."</span>
<span class="comment-copy">@KevinJ.Chase The assumption is that each line contains a single log message, and that if that line contains the word "warning" then that message should not be counted. Hence, if any line doesn't have "warning", it means it's an error message and should result in an error. Of course, this is kind of a pointless debate because it depends on the output of the imaginary program.</span>
<span class="comment-copy">Gotcha.  I was thinking of it as a single large message, so any appearance of "warning" would downgrade the whole thing to ignorable status.</span>
