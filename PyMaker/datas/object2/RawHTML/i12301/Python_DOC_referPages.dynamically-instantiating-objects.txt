<div class="post-text" itemprop="text">
<p>I'm attempting to instantiate an object from a string. Specifically, I'm trying to change this:</p>
<pre><code>from node.mapper import Mapper
mapper = Mapper(file)
mapper.map(src, dst)
</code></pre>
<p>into something like this:</p>
<pre><code>with open('C:.../node/mapper.py', 'r') as f:
    mapping_script = f.read()

eval(mapping_script)
mapper = Mapper(file)
mapper.map(src, dst)
</code></pre>
<p>The motivation for this seemingly bizarre task is to be able to store different versions of mapping scripts in a database and then retrieve/use them as needed (with emphasis on the polymorphism of the <code>map()</code> method). </p>
<p>The above does not work. For some reason, <code>eval()</code> throws <code>SyntaxError: invalid syntax.</code> I don't understand this since it's the same file that's being imported in the first case. Is there some reason why <code>eval()</code> cannot be used to define classes?</p>
<p>I should note that I am aware of the security concerns around <code>eval()</code>. I would love to hear of alternative approaches if there are any. The only other thing I can think of is to fetch the script, physically save it into the node package directory, and then import it, but that seems even crazier. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec</a>:</p>
<pre><code>exec(mapping_script)
</code></pre>
<p><code>eval()</code> works only for expressions. <code>exec()</code> works for statements. A typical Python script contains statements. </p>
<p>For example:</p>
<pre><code>code = """class Mapper: pass"""
exec(code)
mapper = Mapper()
print(mapper)
</code></pre>
<p>Output:</p>
<pre><code>&lt;__main__.Mapper object at 0x10ae326a0&gt;
</code></pre>
<p>Make sure you either call <code>exec()</code> (Python 3, in Python 2 it is a statement) at the module level. When you call it in a function, you need to add <code>globals()</code>, for example <code>exec(code, globals())</code>, to make the objects available in the global scope and to the rest of the function as discussed <a href="https://stackoverflow.com/questions/12505047/in-python-why-doesnt-an-import-in-an-exec-in-a-function-work">here</a>.</p>
</div>
<span class="comment-copy">It doesn't work. Even though the Mapper class is defined in the mapping_script, the following instantiation call fails and complains that Mapper isn't defined.</span>
<span class="comment-copy">Are you sure you are reading the right file?</span>
<span class="comment-copy">Yeah. I confirmed it via the debugger. I also threw a simple variable definition into the file and that gets defined just fine. The problem seems be related to the fact the Mapper inherits from a base class, and that class does not get imported despite the fact the there's an import statement in mapper.py. I also tried adding the base class import to the script in which exec() is running and that doesn't work either. Still trying to dig into it...</span>
<span class="comment-copy">@Gadzooks34: What Python version are you on? And is this inside a function?</span>
<span class="comment-copy">Is <code>exec</code> within a function? If so, try <code>exec(code, globals())</code> per <a href="http://stackoverflow.com/questions/12505047/in-python-why-doesnt-an-import-in-an-exec-in-a-function-work">this link</a>.</span>
