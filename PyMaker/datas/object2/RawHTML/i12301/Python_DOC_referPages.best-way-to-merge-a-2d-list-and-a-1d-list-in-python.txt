<div class="post-text" itemprop="text">
<p>I need to merge a two dimensional list and a single dimensional list without losing elements.</p>
<p>I used a loop to achieve the result but I'd like to know if there is a better way.</p>
<pre><code>list1 = ["a","b","c","d"]
list2 = [["1","2","3"],["4","5","6"],["7","8"]]
max_column_count = len(list1)
expected_result = [list1]
for row in list2:
    if max_column_count &gt; len(row):
        columns = max_column_count - len(row)
        row += [''] * columns
    expected_result.append(row)
print(expected_result)
</code></pre>
<p>output</p>
<pre><code>[['a', 'b', 'c', 'd'], ['1', '2', '3', ''], ['4', '5', '6', ''], ['7', '8', '', '']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If what you post as output is your expected output, then using <a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.chain" rel="nofollow"><code>chain</code></a> from <code>itertools</code> will be one way to go:</p>
<pre><code>&gt;&gt;&gt; mx_len = len(max([list1,*list2]))
&gt;&gt;&gt; 
&gt;&gt;&gt; mx_len
4
&gt;&gt;&gt; [x+['']*(mx_len-len(x)) for x in itertools.chain([list1], list2)]
[['a', 'b', 'c', 'd'], ['1', '2', '3', ''], ['4', '5', '6', ''], ['7', '8', '', '']]
&gt;&gt;&gt;
&gt;&gt;&gt; #another way by unpacking list2 in a list with list1
&gt;&gt;&gt;
&gt;&gt;&gt; [x+['']*(mx_len-len(x)) for x in itertools.chain([list1, *list2])]
[['a', 'b', 'c', 'd'], ['1', '2', '3', ''], ['4', '5', '6', ''], ['7', '8', '', '']]
</code></pre>
<p>Another way would be a <em>double zipping</em> effect, like transposing both lists using <a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.zip_longest" rel="nofollow"><code>zip_longest</code></a> and fill the missing values with <code>''</code> then zipping again the lists to get back to the original shape, this way:</p>
<pre><code>&gt;&gt;&gt; l1 = itertools.zip_longest(list1, *list2, fillvalue='')
&gt;&gt;&gt; 
&gt;&gt;&gt; l2 = list(zip(*l1))
&gt;&gt;&gt;
&gt;&gt;&gt; l2
[('a', 'b', 'c', 'd'), ('1', '2', '3', ''), ('4', '5', '6', ''), ('7', '8', '', '')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ["a","b","c","d"]
list2 = [["1","2","3"],["4","5","6"],["7","8"]]
list3 = []
list3.append(list1)
list3.append(list2)
&gt;&gt;&gt;
list3 =[['a', 'b', 'c', 'd'], [['1', '2', '3'], ['4', '5', '6'], ['7', '8']]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; list1 = ["a","b","c","d"]
... list2 = [["1","2","3"],["4","5","6"],["7","8"]]
... list3 = [list1] + map(lambda x: x + ['']*(len(list1)-len(x)),list2)
&gt;&gt;&gt; list3
6: [['a', 'b', 'c', 'd'],
 ['1', '2', '3', ''],
 ['4', '5', '6', ''],
 ['7', '8', '', '']]
&gt;&gt;&gt; 
</code></pre>
<p>This is essentially the same as what you're doing, but more terse. If you don't know about the map function, this is a good time to learn (<a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">https://docs.python.org/3/library/functions.html#map</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the resulting list to contain lists of the same size, with padding empty strings:</p>
<pre><code>list1 = ["a","b","c","d"]
list2 = [["1","2","3"],["4","5","6"],["7","8"]]
req_len = len(list1)
result = [list1] + [org + [''*(req_len - len(org))] for org in list2]
print result
</code></pre>
</div>
<span class="comment-copy">Is that your expected output?...if not. post it</span>
<span class="comment-copy">Please specify expected input and output?</span>
<span class="comment-copy">The code above is already doing the job, so the output is the output and the expected output. My question was if there was a better/best way.</span>
<span class="comment-copy">I knew zip_longest would do it but I didn't know how to do with it. Thank you a lot!</span>
<span class="comment-copy">@Sinan√áetinkaya .. sure ..:)</span>
<span class="comment-copy">A bit of explanation would make your contribution more valuable and also conform to the StackOverflow guidelines for posting Answers (see the Help Center)...</span>
