<div class="post-text" itemprop="text">
<p>This is a code for format printing multiple lists:</p>
<pre><code>print("{0[0]:10s} {1[0]:20} {2[0]:5} £{3[0]:6} £{4[0]:&lt;7}".format(gtinlist, desclist, qtylist, pricelist, valuelist))
</code></pre>
<p>This prints the first value of each list 
But as soon as I change it to:</p>
<pre><code>print("{0[0:9]:10s} {1[0:9]:20} {2[0:9]:5} £{3[0:9]:6} £{4[0:9]:&lt;7}".format(gtinlist, desclist, qtylist, pricelist, valuelist))
</code></pre>
<p>And if I put any number in the place of :9 it does not work.
I don't understand why</p>
<p>Help?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to print the 9th position, you can use</p>
<pre><code>"{0[8]:10s}"
</code></pre>
<p>Using</p>
<pre><code>"{0[0:9]:10s}"
</code></pre>
<p>will tell <code>format()</code> to use the key <code>"0:9"</code>, which is a string but lists only have integer keys:</p>
<pre><code>TypeError: list indices must be integers or slices, not str). 
</code></pre>
<p>In python <code>derp[0:9]</code> means, to get a slice of the list <code>derp</code> from <code>key 0</code> to <code>key 8</code>. But <code>format()</code> does not interpret the <code>0:9</code> as python syntax. Format does check if the instance has a <code>__getitem__</code> method and passes the key to it. </p>
<pre><code>&gt;&gt;&gt; class donk():
...     def __getitem__(self, k):
...           return 5
... 
&gt;&gt;&gt; a = donk()
&gt;&gt;&gt; 'bla{0[3]}'.format(a)
'bla5'
</code></pre>
<p>If you want to print the first 8 elements here, maybe separated by comma, you may use:</p>
<pre><code>", ".join(['{:10s}'.format(a) for a in my_list[0:9])
</code></pre>
<p><strong>Additional</strong>: If you want to print all stuff in your arrays on separate lines you can use a for-loop:</p>
<pre><code>for i, gt in enumerate(gtinlist):
    print("{:10s} {:20} {:5} £{:6} £{:&lt;7}".format(gt, desclist[i], stylist[i], priceless[i], valueless[i]))
</code></pre>
<p>In this approach <code>len(gtinlist) &lt;= len(stylist), len(priceless), len(valueless)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Apparently slicing isn't supported there, only integers (which are turned into ints) and everything else will be interpreted as a string index:</p>
<pre><code>&gt;&gt;&gt; class Foo:
        def __getitem__(self, index):
            print('got asked for:', type(index).__name__, repr(index))

&gt;&gt;&gt; x = '{0[3]}'.format(Foo())
got asked for: int 3
&gt;&gt;&gt; x = '{0[3:7]}'.format(Foo())
got asked for: str '3:7'
</code></pre>
<p>How it would look if a slice were requested:</p>
<pre><code>&gt;&gt;&gt; Foo()[3:7]
got asked for: slice slice(3, 7, None)
</code></pre>
<p>I checked <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow"><strong>the docs</strong></a> but couldn't really find an answer, just that <em>"an expression of the form '[index]' does an index lookup using <code>__getitem__()</code>"</em>, which could support slicing. But it doesn't even mention that integers will be turned into ints.</p>
</div>
<span class="comment-copy">Might be a good question if it were minimal (one part instead of five) and complete (what's gtinlist?) See <a href="http://stackoverflow.com/help/mcve">MCVE</a>.</span>
<span class="comment-copy">The GTIN-8 product code is a code which is different for every product. It has 8 digits. I made a list called 'gtinlist' to store the user's typed in GTIN-8 codes.</span>
<span class="comment-copy">Nobody cares. Sorry if I was unclear, but what I asked for is an example value. So that this can actually be tested.</span>
<span class="comment-copy">Had you instead posted for example <code>'{0[0:2]}'.format([5, 6, 7])</code>, then it would have been a good MCVE question (did you not check out the link I gave you?) that's also interesting to others.</span>
<span class="comment-copy">thanks, of course.. added an extra sentence that format would have to parse the expression "0:9"</span>
<span class="comment-copy">We have to produce a receipt which is in this format:                                                    universal prod code - description - quantity - price of 1 item - price * quantity                               I do not want to print the eighth line.                                                                           This receipt extends according to the amount of products the user wants.</span>
<span class="comment-copy">why you write {0[0:9]:10s}??</span>
<span class="comment-copy">I thought that would print all nine products i added</span>
<span class="comment-copy">No it doesn't as I described in the answer, it is not possible this way. You need to create loop.</span>
<span class="comment-copy">It does not support that slicing,  since it would have parse the string first. It just passes it to __getitem__() so list eventually yields the exception.</span>
<span class="comment-copy">No, it clearly does some parsing/conversion. As you can see in my output, the <b>int</b> 3 is asked for, not the string '3'.</span>
<span class="comment-copy">Okay it could do basic parsing like "int(index)" if this does not yield a ValueError it could pass it, otherwise pass it as a string. Something like this may happen, since a['1'] is not supported on lists.</span>
<span class="comment-copy"><a href="http://svn.python.org/projects/python/trunk/Objects/stringlib/string_format.h" rel="nofollow noreferrer">svn.python.org/projects/python/trunk/Objects/stringlib/…</a> the function static <code>PyObject *get_field_object()</code> shows the magic.</span>
