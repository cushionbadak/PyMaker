<div class="post-text" itemprop="text">
<p>I'm looking at BDD with Python. Verification of results is a drag, because the results being verified are not printed on failure.</p>
<p>Compare Behave output:</p>
<pre><code>AssertionError: 
  File "C:\Python27\lib\site-packages\behave\model.py", line 1456, in run
    match.run(runner.context)
  File "C:\Python27\lib\site-packages\behave\model.py", line 1903, in run
    self.func(context, *args, **kwargs)
  File "steps\EcuProperties.py", line 28, in step_impl
    assert vin == context.driver.find_element_by_xpath("//table[@id='infoTable']/tbody/tr[4]/td[2]").text
</code></pre>
<p>to SpecFlow+NUnit output:</p>
<pre><code>Scenario: Verify VIN in Retrieve ECU properties -&gt; Failed on thread #0
    [ERROR]   String lengths are both 16. Strings differ at index 15.
  Expected: "ABCDEFGH12345679"
  But was:  "ABCDEFGH12345678"
  --------------------------^
</code></pre>
<p>Finding failure causes is way faster with the SpecFlow output. To get the variable contents on error, they have to be put into a string manually.</p>
<p>From the <a href="http://lettuce.it/tutorial/simple.html#lettuce-id4" rel="nofollow">Lettuce tutorial</a>:</p>
<pre><code>assert world.number == expected, \
    "Got %d" % world.number
</code></pre>
<p>From the <a href="https://pythonhosted.org/behave/tutorial.html#step-parameters" rel="nofollow">Behave tutorial</a>:</p>
<pre><code>if text not in context.response:
    fail('%r not in %r' % (text, context.response))
</code></pre>
<p>Compare this to <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow">Python unittest</a>:</p>
<pre><code>self.assertEqual('foo2'.upper(), 'FOO')
</code></pre>
<p>resulting in:</p>
<pre><code>Failure
Expected :'FOO2'
Actual   :'FOO'
 &lt;Click to see difference&gt;

Traceback (most recent call last):
  File "test.py", line 6, in test_upper
    self.assertEqual('foo2'.upper(), 'FOO')
AssertionError: 'FOO2' != 'FOO'
</code></pre>
<p>However, the methods from Python unittest cannot be used outside a <code>TestCase</code> instance.</p>
<p>Is there a good way of getting all the niceness of Python unittest integrated into Behave or Lettuce?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://nose.readthedocs.org/en/latest/" rel="nofollow">nose</a> includes a package that takes all the class-based asserts that <code>unittest</code> provides and turns them into plain functions, the module's <a href="https://nose.readthedocs.org/en/latest/testing_tools.html?highlight=nose.tools#module-nose.tools" rel="nofollow">documentation states</a>:</p>
<blockquote>
<p>The nose.tools module provides [...] all of the same <code>assertX</code> methods found in <code>unittest.TestCase</code> (only spelled in <a href="https://www.python.org/dev/peps/pep-0008#function-names" rel="nofollow">PEP 8#function-names</a> fashion, so <code>assert_equal</code> rather than <code>assertEqual</code>).</p>
</blockquote>
<p>For instance:</p>
<pre><code>from nose.tools import assert_equal

@given("foo is 'blah'")
def step_impl(context):
    assert_equal(context.foo, "blah")
</code></pre>
<p>You can ad custom messages to assertions just like you would with the <code>.assertX</code> methods of <code>unittest</code>.</p>
<p>That's what I use for the test suites that I run with Behave.</p>
</div>
<span class="comment-copy">I am using <code>pytest</code> which seems to provide all the needed context information on failure. No need to code printing it out, just make the assertion and let <code>pytest</code> to print it. I would try letuce using with pytest, but I do not have any letuce or behave test case. Can you provide some short selfcontaining example?</span>
<span class="comment-copy">A short self-containing example can be found at the very beginning of the Behave tutorial: <a href="https://pythonhosted.org/behave/tutorial.html" rel="nofollow noreferrer">pythonhosted.org/behave/tutorial.html</a></span>
<span class="comment-copy">Thanks. What would be the <code>nose.tools</code> equivalent of <code>unittest</code>'s <code>self.fail()</code>?</span>
<span class="comment-copy">I don't think <code>nose.tools</code> has a direct equivalent to <code>self.fail()</code>. Is there something that <code>self.fail()</code> does that a plain <code>assert False, "message"</code> does not? It is clear that the <code>self.assertX</code> methods are better than a plain <code>assert</code> because they provide intelligent diagnosis information without having to write custom error messages. I'm not seeing the same advantage for <code>self.fail()</code>.</span>
<span class="comment-copy">fail() is more consistent with the assert_x methods. fail() also signals the intention explicitly to maintenance programmers. Thanks anyway!</span>
