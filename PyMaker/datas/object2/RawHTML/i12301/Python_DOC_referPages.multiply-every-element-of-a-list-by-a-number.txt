<div class="post-text" itemprop="text">
<p>I would like to multiply all elements of a list by a number. I know the other ways to do it but I want to know Why isn't this working? I am getting the very same list as an output.</p>
<pre><code>lst = eval(input('enter a list'))
for num in lst:
     num = num * 2
print(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It isn't working because, you're using <code>for</code> loop on a list and defining/changing the <code>num</code> global variable, not the elements in <code>lst</code> list.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; l = [1, 5, 8]
&gt;&gt;&gt; for num in l:
...     num *= 2
...     
... 
&gt;&gt;&gt; num
16
&gt;&gt;&gt; l
[1, 5, 8]
</code></pre>
<p>In this case, in the first loop, <code>num</code> is <code>1</code> (the first element in <code>l</code>), and sure <code>1 * 2</code> gives <code>2</code>.</p>
<p>Then, <code>num</code> become <code>5</code> since <code>5</code> is the second element in the list. After <code>num * 2</code>, <code>num</code> become <code>10</code>.</p>
<p>In the second <code>for</code> loop, it become <code>8 * 2</code>, <code>16</code>. it doesn't change again because the <code>for</code> loop is ended. </p>
<p>However, you didn't change anything of the list during this loop. Because <code>for</code> only <em>gets</em> the elements in the list, and <em>put it into a temporary variable</em>. </p>
<p>And when you change that <em>temporary variable</em> inside the <code>for</code> loop, you didn't change anything of the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, since you wrote <strong>"I know the other ways to do it but I want to know Why isn't this working?"</strong>, here is your answer: You are only modifying the temporary loop variable <code>num</code>, not the list itself. Try this:</p>
<pre><code>for i, num in enumerate(lst):
     lst[i] = lst[i] * 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not changing the elements of the <code>lst</code>, do it like this:</p>
<pre><code>for num in range(len(lst)):
    lst[num] *= 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Two clean expressions:</p>
<pre><code>In [360]: lst=list(range(10))
</code></pre>
<p>to change in-place:</p>
<pre><code>In [361]: for i,v in enumerate(lst):
   .....:     lst[i]=v*2
   .....:     
In [362]: lst
Out[362]: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</code></pre>
<p>to produce a new list:</p>
<pre><code>In [363]: [v*2 for v in lst]
Out[363]: [0, 4, 8, 12, 16, 20, 24, 28, 32, 36]
</code></pre>
<p>For input I'd prefer explicitly splitting and converting a string:</p>
<pre><code>In [365]: lst = [int(x) for x in input().split()]
10 11 0 1 2 
In [366]: lst
Out[366]: [10, 11, 0, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst=eval(input('enter a list'))
lst=list(map(lambda num:num*2,lst))
print (lst)
</code></pre>
<p>You need to update the lst.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's better to use <a href="https://docs.python.org/3/library/ast.html#ast-helpers" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> then <code>eval</code> due to safety. You could read about it <a href="https://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval">here</a>. You could solve that with <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>import ast
lst = ast.literal_eval(input('enter a list'))
lst = [num*2 for num in lst]
print(lst)
</code></pre>
<p><em>List comprehensions</em> are faster then <code>map</code> with <code>lambda</code>. <strong>Timing</strong>:</p>
<pre><code>lst = list(range(1000))

In [56]: %timeit list(map(lambda num:num*2,lst))
10000 loops, best of 3: 169 us per loop

In [57]: %timeit [num*2 for num in lst]
10000 loops, best of 3: 80.5 us per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As everyone else pointed out, the correct way to do this is by indexing into the list:</p>
<pre><code>myList = range(5)
for i in range(len(myList)):
    myList[i] *= 2
print myList #[0,2,4,..]
</code></pre>
<h2>A Little Bit About Pass By Assignment</h2>
<p>Your loop, which uses the <code>for num in list</code> notation does not modify the list.  Because the loop variable <code>num</code> takes a value of type int at each iteration of the loop, since ints are immutable (i.e its value cannot be changed) in python, <code>num</code> gets a copy of the integer value.  </p>
<p>This changes when the object in the list is mutable and is passed by <strong>reference</strong>.  Consider the following:</p>
<pre><code>class X: 
    def __init__(self):
         self.val = 1

myList = [X() for i in range(5)]
print [element.val for element in myList] #1,1,1,1,1

for el in myList:
    el.val = 2

print [element.val for element in myList] #2,2,2,2,2 
</code></pre>
<p>Now, since myList contains a list of X objects which are mutable, the loop variable <code>el</code> has a <strong>reference</strong> copied into it. The reference points to the same object in memory that the reference in original myList points to.    So when you change the object using the loop variable, the objects referred to in the original myList are also changed.</p>
<p>This <a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">Pass By Reference</a> talks about it in greater depth.</p>
</div>
<span class="comment-copy">You are only updating the loop variable, not the contents of the list...</span>
<span class="comment-copy">Do you need to change <code>lst</code> itself, or will a new list be fine?</span>
<span class="comment-copy">To all the answerers: I think OP knows <i>how to do this</i>, and this question is about <i>why doesn't this work</i> not <i>how can I get this works</i>.</span>
<span class="comment-copy">there are two proper answers to the question with 0 upvotes @KevinGuan</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/8194959/how-to-multiply-individual-elements-of-a-list-with-a-number">How to multiply individual elements of a list with a number?</a></span>
<span class="comment-copy">Not sure why <code>enumerate</code> is being used when <code>range(len(lst))</code> would just iterate over the indices. Is there a reason?</span>
<span class="comment-copy">No, but this is a generic solution that is applicable when you also need the variable <code>num</code>. You could also write <code>lst[i] = num * 2</code> for instance.</span>
<span class="comment-copy">In Python 3.X, <code>map(...)</code> will return a <code>map</code> object that will need to be explicitly converted into a list.</span>
<span class="comment-copy">Thanks for the solution @vks Map makes it very concise,will read about it.</span>
<span class="comment-copy">why downvoted????????</span>
<span class="comment-copy">@vks: I didn't downvote, but maybe because...please check my comment below the question and my answer. By the way, <code>map</code> is slower than <i>list comprehension</i>, please also check <a href="http://stackoverflow.com/a/35355780/5299236">Anton Protopopov's answer</a> about it.</span>
<span class="comment-copy">Besides being mutable, you also have to mutate, which your <code>el.val = 2</code> does do; for completeness, you could mention that <code>el = 2</code> would <i>not</i> update the list element (as you are no longer mutating, but replacing).</span>
