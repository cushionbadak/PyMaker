<div class="post-text" itemprop="text">
<p>Imagin I have three lists like:</p>
<pre><code>l = ['2g_', '3k', '3p']
p = ['3f', '2y_', '4k', 'p']
s = ['12g', 'k_', '3p']
</code></pre>
<p>So:</p>
<pre><code>&gt;&gt;&gt; ''.join(i[1]*int(i[0])+i[2:] if i[0].isdigit() else i for i in l)
'gg_kkkppp'
&gt;&gt;&gt; ''.join(i[1]*int(i[0])+i[2:] if i[0].isdigit() else i for i in p)
'fffyy_kkkkp'
&gt;&gt;&gt; ''.join(i[1]*int(i[0])+i[2:] if i[0].isdigit() else i for i in s)
'2gk_ppp'
</code></pre>
<p>But what in list s:
<code>2gk_ppp</code> must be <code>ggggggggggggk_ppp</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested list comprehension / generator expression with regular expressions.</p>
<pre><code>def join(lst):
    return ''.join((int(n or 1) * c + r 
                    for (n, c, r) 
                    in (re.search(r"(\d*)(\w)(.*)", x).groups() for x in lst)))
</code></pre>
<p>First, use <code>re.search</code> with <code>(\d*)(\w)(.*)</code> to get the (optional) number, the character, and the (optional) rest for each string.</p>
<pre><code>[re.search(r"(\d*)(\w)(.*)", x).groups() for x in lst]
</code></pre>
<p>For your second example, this gives <code>[('3', 'f', ''), ('2', 'y', '_'), ('4', 'k', ''), ('', 'p', '')]</code>. Now, in the outer generator, you can use <code>or</code> to provide a <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow">"default-value"</a> in case the number is <code>''</code> (or use a ternary expression if you prefer: <code>int(n) if n else 1</code>):</p>
<pre><code>[int(n or '1') * c + r 
 for (n, c, r) 
 in (re.search(r"(\d*)(\w)(.*)", x).groups() for x in lst)]
</code></pre>
<p>This gives <code>['fff', 'yy_', 'kkkk', 'p']</code>. Finally, join to get <code>fffyy_kkkkp</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This variant is a little bit more imperative and simple to follow:</p>
<pre><code>import re as regex

def process_template(template):
    result = regex.match('(\d*)(.)(.*)', template)
    if (result.group(1)):
        return int(result.group(1)) * result.group(2) + result.group(3)
    else:
        return result.group(2) + result.group(3)

''.join([process_template(template) for template in ['3f', '2y_', '4k', 'p']])
</code></pre>
</div>
<span class="comment-copy">The problem is that you are not fetching the <code>12</code>, but only the first digit of it. What are you trying to accomplish?</span>
<span class="comment-copy">I want to capture two digits and print in number of them. for example 12g must print g 12 times... like other patterns in l and p lists</span>
<span class="comment-copy">It doesn't wok in digits more than 9... I want increase it till 99</span>
<span class="comment-copy">@MLSC just replace <code>\w+</code> in <a href="http://stackoverflow.com/a/35266372/3297613">this</a> answer to <code>[a-z]</code></span>
<span class="comment-copy">Have a look at regular expressions. "\d+" will match one or more digits (as string, you still have to convert them to a number).</span>
<span class="comment-copy">This is most reliable answer for this thread... Thank you</span>
