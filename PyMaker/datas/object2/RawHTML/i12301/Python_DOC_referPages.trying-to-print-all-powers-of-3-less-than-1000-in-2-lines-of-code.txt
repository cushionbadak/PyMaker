<div class="post-text" itemprop="text">
<p>For an assignment in my CS class I have to print all powers of 3 (1, 3, 9, 27, etc.) less than 1000 using no more than 2 lines of code. I know I could just use</p>
<pre><code>for x in range(7):
    print(3**x)
</code></pre>
<p>because I know that 3^6 is the last power that gives a result under 1000 but I was wondering if there was a way to conditionally check that 3^x is under 1000 before printing still using only 2 lines of code at most. I may just be overthinking it but I want to make sure for my own information.</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually in python we prefer however many lines can give the most readable code.  </p>
<p>So, it's a strange requirement to limit the lines of code like that.  At a guess, your instructor may have been looking for some mathematical insight on how a bound for iteration could be precomputed:</p>
<pre><code>&gt;&gt;&gt; for i in range(1 + int(math.log(1000,3))):
...     print(3**i)
...     
1
3
9
27
81
243
729
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are allowed to use semicolons:</p>
<pre><code>i=3;
while i&lt;1000: print(i);i = i*3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could have found that 6 is the lowest allowed exponent using logs. Here's a one-line solution:</p>
<pre><code>import math
def printer(exp_num, target_num):
    for i in range(int(math.log(target_num, exp_num))+1): print exp_num**i
printer(3, 1000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.takewhile</code> is the correct way to express what you're asking, but it depends on a module which necessarily adds a line.</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; print(list(itertools.takewhile(lambda x: x &lt; 1000, (3**x for x in itertools.count()))))
[1, 3, 9, 27, 81, 243, 729]
</code></pre>
<p>Expressed in a more sane 3-liner format...</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; for x in itertools.takewhile(lambda x: x &lt; 1000, (3**x for x in itertools.count())):
...   print(x)
...
1
3
9
27
81
243
729
</code></pre>
<p>Let's explain what's going on here, starting from the innermost.  Each step builds on the previous.</p>
<p><code>itertools.count()</code> is a generator that produces the numbers <code>1, 2, 3, 4, ...</code> forever.  It's how you express <code>range(infinity)</code>.</p>
<p><code>(3**x for x in itertools.count())</code> is a generator that produces the numbers <code>1, 3, 9, 27, ...</code> forever.</p>
<p><code>itertools.takewhile(lambda x: x &lt; 1000, (3**x for x in itertools.count()))</code> is a generator that produces the numbers <code>1, 3, 9, 27, ...</code> forever <em>while <code>x &lt; 1000</code> is true</em>.</p>
<p>After that it's just a matter of printing the generated numbers.</p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow">The itertools module</a> is a pretty important part of Python, I suggest learning it in general as it solves a lot of problems like this.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from itertools import takewhile, count
&gt;&gt;&gt; print(*map(lambda x: 3**x, takewhile(lambda x: 3**x &lt; 1000, count(0))), sep='\n')
1
3
9
27
81
243
729
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably, if you can work out how to use a <a href="https://en.wikipedia.org/wiki/Ternary_operation" rel="nofollow noreferrer">ternary operator</a>.  <a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">This answer may help</a>, but my best-guess (I don't work in Python) would be along the lines of...</p>
<pre><code>for x in range(10):
    print(3**x) if (3**x) &lt; 1000 else print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>one liner with a list comprehension</p>
<pre><code>print([3 ** x for x in range(7) if 3 ** x &lt; 1000])
</code></pre>
<p>addressing kevin's comment and trying to stick to two lines of code</p>
<pre><code>for i in range(1000):
    print(3 ** i) if (3 ** i) &lt; 1000 else i
</code></pre>
<p>i don't like the else statement</p>
</div>
<span class="comment-copy">Doesn't <code>import math</code> make this 3 lines?</span>
<span class="comment-copy">@cdlane: You could just replace it with <code>__import__("math").log</code>.</span>
<span class="comment-copy">Probably not if it needs to be in 3 lines of code.</span>
<span class="comment-copy">These are two lines of code. However there are 3 statements (not counting the while loop). In my humble opinion: Number of lines != Number of Statements.</span>
<span class="comment-copy">Yes, but that is probably not what his instructor was going for, right?</span>
<span class="comment-copy">no capital If in ternary</span>
<span class="comment-copy">@ghostofrasputin Fixed.  I'm not a Python programmer (but I do know how to check if some feature exists!)</span>
<span class="comment-copy">I think OP is looking for a solution that does not use the hardcoded value <code>7</code> for the range. Suppose you need to find all powers of 17 below 4,815,162,342, and you don't have time to establish an upper bound for your range on paper. What would your code look like then?</span>
