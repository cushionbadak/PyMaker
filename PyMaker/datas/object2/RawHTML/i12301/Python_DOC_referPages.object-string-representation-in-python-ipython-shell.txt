<div class="post-text" itemprop="text">
<p>I have a friendly month class I enjoy that returns an ugly robot friendly string:</p>
<pre><code>In [3]: d = date(2010, 1, 31)

In [4]: m = Month(d)

In [5]: m
Out[5]: &lt;dfa.date_range.Month at 0x7fb4d5793cc0&gt;
</code></pre>
<p>I want <code>m</code> to show something like <code>1-31-2010</code>. I try using <code>unicode</code> and <code>str</code>, just like in django, no dice:</p>
<pre><code>class Month(object):

    def __init__(self, dateobj):
        self.dateobj = dateobj

    # def __unicode__(self):
    #     return self.dateobj

    def __str__(self):
        return self.dateobj

    @property
    def first_day(self):
        return self.dateobj.replace(day = 1)

    @property
    def last_day(self):
        _, days_in_month = monthrange(self.dateobj.year, self.dateobj.month)
        return self.dateobj.replace(day = days_in_month)

    def date_range(self):
        return self.first_day, self.last_day
</code></pre>
<p>For <code>d</code> object, it doesn't implement unicode, but has string. The <code>str</code> and ipython return don't match. I'll open a separate question for that. How can I make my python classes display something useful for the user? Terima kasih</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <em>real</em> issue is that both Python 3 shell and IPython call <code>repr</code> <em>NOT</em> <code>str</code> on your object. Here's a snippet to play with to see:</p>
<pre><code>In [1]: class Car(object):
   ...:     def __str__(self):
   ...:         return 'car str'
   ...:     def __repr__(self):
   ...:         return 'car repr'
   ...:     

In [2]: car = Car()

In [3]: car
Out[3]: car repr
</code></pre>
<p>Without the <code>__repr__</code> defined, IPython would simply output something along <code>&lt;__main__.Car at 0x7f05841b1350&gt;</code> instead of falling back to <code>__str__</code>. </p>
<p>Unless you e.g. explicitly call <code>str(car)</code> or <code>print(car)</code>, in which the <code>__str__</code> will be used.</p>
<p>So, you should define a <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow"><code>__repr__</code></a> in the object.</p>
<blockquote>
<p>What purpose is <code>__str__</code> nowadays then?</p>
</blockquote>
<p>It's not that <code>__repr__</code> replaces <code>__str__</code> in Python 3 or anything, but <code>__str__</code> merely returns a readable reprentation of the object, while <code>__repr__</code> is a more complete unambiguous representation (to the point where you can even reconstruct the object from the <code>__repr__</code> output)</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you could change Month's <strong>str</strong> to this:</p>
<pre><code>def __str__(self):
  return self.dateobj.strftime("%m/%d/%y")
</code></pre>
<p>so it would access the date object and output it with the format you want
Edit: Also, as already posted, you can make the <strong>repr</strong> method and just make it point to the <strong>str</strong> so you always get the same format</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def __str__(self):
    return self.dateobj.strftime("%Y-%m-%d")
</code></pre>
<p>though you could already output the date object's details by <code>d.strftime("%Y-%m-%d")</code></p>
</div>
<span class="comment-copy">ty, what purpose is <b>str</b> nowadays then?</span>
<span class="comment-copy">Hi, I believe <code>__str__</code> on a class in IPython is <i>not</i> enough, because without <code>__repr__</code>,  IPython simply prints somehting like: <code>&lt;__main__.MyClass at 0x7f05841b1350&gt;</code></span>
<span class="comment-copy">I don't think so, see my answer to try it out.</span>
