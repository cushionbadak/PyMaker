<div class="post-text" itemprop="text">
<p>The following is my data set from a text file.</p>
<pre><code>2.1,3.5,1.4,0.2,Iris
4.9,3.0,1.4,0.2,Ilia
3.7,3.2,1.3,0.2,Iridium
</code></pre>
<p>There is a list named: </p>
<pre><code>list_of_keys 
</code></pre>
<p>which holds the following values in the list </p>
<pre><code>['S_Length','S_Width','P_Length','P_Width','Predicate']
</code></pre>
<p>So, the problem is, i want to create a list of dictionary to hold all my data (from the text file) using the <code>list_of_keys as keys</code> for the dictionary as follows:</p>
<pre><code>dict = 
      {'S_Length': 2.1, 'S_Width':3.5 , 'P_Length': 1.4, 'P_Width': 0.2, 'Predicate': Iris},
      {'S_Length': 4.9, 'S_Width':3.0 , 'P_Length': 1.4, 'P_Width': 0.2, 'Predicate': Ilia},
      ... so on!
</code></pre>
<p>what i have up to now:</p>
<pre><code># store all data from the text files as list
all_examples = file.readlines()

for outer_index in range(len(all_examples)):
     for inner_index in range(0, len(list_of_keys)+1):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator function like following:</p>
<pre><code>def func():
    list_of_keys = ['S_Length','S_Width','P_Length','P_Width','Predicate']
    with open('example.txt') as f:
        for line in f:
            yield dict(zip(list_of_keys,line.strip().split(',')))

print(list(func()))
[{'P_Width': '0.2', 'S_Length': '2.1', 'Predicate': 'Iris', 'S_Width': '3.5', 'P_Length': '1.4'}, {'P_Width': '0.2', 'S_Length': '4.9', 'Predicate': 'Ilia', 'S_Width': '3.0', 'P_Length': '1.4'}, {'P_Width': '0.2', 'S_Length': '3.7', 'Predicate': 'Iridium', 'S_Width': '3.2', 'P_Length': '1.3'}]
</code></pre>
<p>you can read the file line by line and split the lines, then create the pairs of keys and values using <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#zip" rel="nofollow"><code>zip</code></a> function and then convert them to a dictionary.</p>
<p>Note that since a file object is an iterator you can iterate over your file object and use <code>with</code> statement to open your file which will close the file at the end of the block.</p>
<p>As another alternative and more pythonic way you can also use <code>csv</code> module to read your text file :</p>
<pre><code>import csv
def func():
    list_of_keys = ['S_Length','S_Width','P_Length','P_Width','Predicate']
    with open('example.txt') as f:
        spamreader = csv.reader(f, delimiter=',')
        return [dict(zip(list_of_keys,row)) for row in spamreader]

print func()
</code></pre>
<p>Here since <code>csv.reader</code> accepts a delimiter argument and returns whole of your lines separated in one iterator you don't need to loop over your file and split it manually.</p>
<p>And if you want to preserve the order you can use <code>collections.OrderedDict</code> in both cases:</p>
<pre><code>from collections import OrderedDict
import csv
def func():
    list_of_keys = ['S_Length','S_Width','P_Length','P_Width','Predicate']
    with open('example.txt') as f:
        spamreader = csv.reader(f, delimiter=',')
        return [OrderedDict(zip(list_of_keys,row)) for row in spamreader]

print func()
[OrderedDict([('S_Length', '2.1'), ('S_Width', '3.5'), ('P_Length', '1.4'), ('P_Width', '0.2'), ('Predicate', 'Iris')]), OrderedDict([('S_Length', '4.9'), ('S_Width', '3.0'), ('P_Length', '1.4'), ('P_Width', '0.2'), ('Predicate', 'Ilia')]), OrderedDict([('S_Length', '3.7'), ('S_Width', '3.2'), ('P_Length', '1.3'), ('P_Width', '0.2'), ('Predicate', 'Iridium')])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You only need to use split and do some iterations.</p>
<p>Try:</p>
<pre><code>list_of_keys = ['S_Length','S_Width','P_Length','P_Width','Predicate']

list_of_dict = []

with open('mydata.txt', "r") as f:
    for line in f.readlines():
        parts = line.strip().split(",")
        mydict = {}
        i = 0
        for k in list_of_keys:
            mydict[k] = parts[i]
            i += 1
        list_of_dict.append(mydict)

print list_of_dict
</code></pre>
<p>Or:</p>
<pre><code>list_of_keys = ['S_Length','S_Width','P_Length','P_Width','Predicate']

list_of_dict = []

with open('mydata.txt', "r") as f:
    for line in f.readlines():
        parts = line.strip().split(",")
        mydict = dict(zip(list_of_keys,parts))
        list_of_dict.append(mydict)

print list_of_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For cleaner code, you could use the function <code>to_dict</code> from pandas:</p>
<pre><code>import pandas as pd

df = pd.read_csv('example.txt')
list_of_keys = ['S_Length','S_Width','P_Length','P_Width','Predicate']
df.columns = list_of_keys

dict = df.to_dict(orient='records')

print dict[0]
{'P_Width': '0.2', 'S_Length': '4.9', 'Predicate': 'Ilia', 'S_Width': '3.0', 'P_Length': '1.4'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If think you have to split the string using <code>,</code>, then using <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow">namedtuple</a> to map each row respectively.</p>
</div>
<span class="comment-copy">For an OP who iterates over a file using <code>range(len())</code> this requires <i>a bit more</i> explanation.</span>
<span class="comment-copy">@bereal Indeed, I just added.</span>
