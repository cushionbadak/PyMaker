<div class="post-text" itemprop="text">
<p>I'm having some issues with my code:</p>
<pre><code>word_list = { "hello" : "1", "bye" : "2"}

sentence= ['hello you, hows things', 'hello, good thanks']

for key, value in word_list.iteritems():
   for i in sentence:
       i = i.replace(key, value)
print i
</code></pre>
<p>Expected output = <code>'1 you, how's things'</code>, <code>'1, good thanks'</code></p>
<p>It currently does not replace any occurrences of <code>hello</code>.  I'm wondering if my sentence loop is correct or not?  Printing <code>i</code> after this prints out exactly what is in <code>sentence</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess the <code>word_list</code>(try to rename the variable to <code>word_dict</code>, I think that is more appropriate) has lots of items, </p>
<pre><code>for index, data in enumerate(sentence):
    for key, value in word_list.iteritems():
        if key in data:
            sentence[index]=data.replace(key, word_list[key])
</code></pre>
<p>working example from <code>ipython</code></p>
<pre><code>In [1]: word_list = { "hello" : "1", "bye" : "2"}

In [2]: sentence = ['hello you, hows things', 'hello, good thanks']

In [3]: for index, data in enumerate(sentence):
   ...:         for key, value in word_list.iteritems():
   ...:                 if key in data:
   ...:                         sentence[index]=data.replace(key, word_list[key])
   ...:             

In [4]: sentence
Out[4]: ['1 you, hows things', '1, good thanks']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ran your code verbatim and it worked, but only prints the last "i". If you move the print into the for loop you get what you expected.</p>
<pre><code>word_list = { "hello" : "1"}

sentence= ['hello you, hows things', 'hello, good thanks']

for key, value in word_list.iteritems():
    for i in sentence:
        i = i.replace(key, value)
        print i
</code></pre>
<p>output:</p>
<pre><code>1 you, hows things
1, good thanks
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using regex:</p>
<pre><code>&gt;&gt;&gt; word_list = { "hello" : "1", "bye" : "2"}
&gt;&gt;&gt; sentence= ['hello you, hows things', 'hello, good thanks']
&gt;&gt;&gt; [re.sub('|'.join(word_list.keys()), lambda x: word_list[x.group()], i) for i in sentence]
['1 you, hows things', '1, good thanks']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The replacement occurs on a variable inside the loop
So nothing is changed in the <code>sentence</code> list
To fix this make a new list with the changed items in it</p>
<pre><code>word_list = { "hello" : "1"}

sentence= ['hello you, hows things', 'hello, good thanks']
newlist=[]

for key, value in word_list.iteritems():
   for i in sentence:
       i = i.replace(key, value)
       newlist.append(i)
print newlist
</code></pre>
<p>Another way with map</p>
<pre><code>word_list = { "hello" : "1"}

sentence= ['hello you, hows things', 'hello, good thanks']
newlist=[]

for key, value in word_list.iteritems():
  newlist=map(lambda x: x.replace(key,value), sentence)
print newlist
</code></pre>
<p>Another way with a list comprehension</p>
<pre><code>word_list = { "hello" : "1"}

sentence= ['hello you, hows things', 'hello, good thanks']
newlist=[]

for key, value in word_list.iteritems():
  newlist=[x.replace(key,value) for x in sentence]
print newlist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>str.replace</code> is problematic, as a word could be a part of another word. Better use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> with regular expression <code>\b\w+\b</code>, with <code>\b</code> being "word boundary", and use a callback function to get the replacement from the dictionary (or the word itself, if it is not in the dict).</p>
<pre><code>&gt;&gt;&gt; word_list = { "hello" : "1", "bye" : "2", 'you': "3"}
&gt;&gt;&gt; sentence= ['hello you, hows things', 'you is not yourself', 'hello, good thanks']
&gt;&gt;&gt; [re.sub(r'\b\w+\b', lambda m: word_list.get(m.group(), m.group()), s) for s in sentence]
['1 3, hows things', '3 is not yourself', '1, good thanks']
</code></pre>
<p>Also, not that by assigning to <code>i</code> within the loop, you are only changing the value bound to the variable <code>i</code>; you are <em>not</em> changing the string in the list! For this, you have to assign to the list element at that index, or use a list comprehension, as in my example.</p>
</div>
<span class="comment-copy">Thanks :) I know where I was going wrong now!</span>
<span class="comment-copy">This, too, can replace words that are parts of other words. Better use <code>\b</code> for word boundaries.</span>
