<div class="post-text" itemprop="text">
<p>I design GUI in Qt Designer, then I load UI-file in my Puthon3 script with the loadUiType method:</p>
<pre><code>class Main(QMainWindow, uic.loadUiType("adc_main_form.ui")[0]):
def __init__(self):
    super(Main, self).__init__()
    self.setupUi(self)
</code></pre>
<p>All works fine. Then I make a little revolution in my form design and it includes a lot of renaming. So I take that UI-file of Qt Designer (XML file) and edit it in a text editor. Maybe I make some typo mistakes. Now I get a message during the start of Python script, on the line self.setupUi(self):</p>
<blockquote>
<p>File "string", line 671, in setupUi </p>
<p>TypeError: argument 1 has unexpected type 'QRadioButton'</p>
</blockquote>
<p>So, some goes wrong in the process of importing the XML file. But the error type tells me not enough to find the error.</p>
<p>I double check all my QRadioButton widgets. No idea.</p>
<p>I open Ui with the Designer - it opens without error messages.</p>
<p>I convert UI into PY (pyiuc5) - no errors.</p>
<p>The <code>.ui</code> file is <a href="https://gist.github.com/KubaO/601b3c867f6d3cd6d9c9" rel="nofollow">here</a>.</p>
<p>What can be the way to find the error in such a closed process as setupUI?</p>
</div>
<div class="post-text" itemprop="text">
<p>In this .ui file the widgets have the same name as the main window's slots. As we subclass the main window, both the widgets and the slots are in the same namespace, so command <code>self.zero_fix = QtWidgets.QRadioButton(self.frame_4)</code> in compiled .ui file overwrite slot <code>zero_fix()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Look at the <em>output</em> generated by <code>pyuic5</code>, at line 671. It should be inside the <code>setupUi</code> method. That's what the error is referring to. <code>uic.loadUiType</code> is generating a Python file on-the-fly. You then attempt to execute it, and it fails at runtime.</p>
<p>Nitpick: Try removing all of the connections from the .ui file. They don't belong there and make the code much harder to maintain, unless the connections are between widgets within the same file. Simply name <code>MainWindow</code> slots in the following format: on_WIDGET_SIGNAL, where WIDGET is the name of the widget, and SIGNAL is the name of the signal, e.g. <code>on_setADC1_clicked</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To answer the specific question about how to debug a file loaded by <code>uic</code>:</p>
<p>When you use a method like <code>loadUiType</code>, it creates the same module that is normally generated by <code>pyuic</code>. But instead of writing this module to disk, it calls <a href="http://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec</code></a> on it, so that the code will be executed dynamically, and the resulting <code>class</code> object can be returned directly.</p>
<p>However, the generated code is not <em>quite</em> identical. When using <code>pyuic</code>, some comment lines are added to the top of the file, and these need to be removed so that the traceback information lines up correctly. To be more specific, the extra lines need to be replaced by a single blank line, so that the top of the module looks like this:</p>
<pre><code>Â     
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
</code></pre>
<p>With that done, the original traceback now gives line 671 as this one:</p>
<pre><code>    self.zero_fix.clicked.connect(MainWindow.zero_fix)
</code></pre>
<p>And the <code>TypeError</code> now makes sense, because <code>self.zero_fix</code> (a radio-button) is now shadowing <code>MainWindow.zero_fix</code> (a slot), due to some bad renaming.</p>
</div>
<span class="comment-copy">Please by steps: 1) I remove all slots from UI file 2) in Python script I name all methods used as signals by your example. 3) I run my script.  Is it right?</span>
<span class="comment-copy">And the same goes for <code>master_set</code>, <code>tare_fix</code>, <code>fast_toggle</code> and any other connection where the name of the object is the same as the name of the slot.</span>
<span class="comment-copy">Yes, you are right. This is the problem. And I began to change names immediately after Kuba Ober suggestion. But the OTHER naming errors continued to cause error messages - so I was lost till steel.ne explained all. Thank you, fellows!</span>
<span class="comment-copy">Since this answer is the best, I want to add a comment "how to check error cause". Actually, you have to check common rules (e.g. naming) and to analyse XML file. The line numbers in .PY file (which can be obtained with pyuic or converter) does not the ones cited in error message. Unfortunately...</span>
<span class="comment-copy">@drvlas. I added another answer to deal with this issue.</span>
<span class="comment-copy">The line 671 is self.toolBar.addAction(self.action_Port) - and I don't see anything wrong with the widget. Now I try to delete slots</span>
<span class="comment-copy">I deleted slots - nothing changed. I deleted connections - well, THAT error is gone, though Python script is not working now. Well, my error is somewhere in connections part of UI-file. The ultimate way is to reinstall all connections from the Designer. But... My question is how to search this type of error.</span>
<span class="comment-copy">Thanks for a tip about naming! And - for a new English word in my vocabulary: BORKED. Now I know what is the result of manual editing of a big XML file :)</span>
<span class="comment-copy">Thank you very much! I intended to clarify those line numbers issue, but you gave a complete explanation already. If the answers of steel.ne and Kuba Ober solved my naming error, you answered the headline question.</span>
