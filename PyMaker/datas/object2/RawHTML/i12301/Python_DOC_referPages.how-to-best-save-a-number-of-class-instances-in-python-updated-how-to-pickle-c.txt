<div class="post-text" itemprop="text">
<p>I'm totally unexperienced in Python persistence.
I tried to use pickles to store some agents for my simulation. 
I got the message "TypeError: can't pickle SwigPyObject objects"
I switched to shelves. I got the same error.
Here is my code. 
I have 5 lists of objects, each list contains many instances of a given class</p>
<pre><code>to_store = [my_regions, my_agents, my_houses, my_families, my_firms]
</code></pre>
<p>I open up a shelve. </p>
<pre><code>boxes = shelve.open((parameters.OUTPUT_PATH + "my_box"))
</code></pre>
<p>And try to save each instance from my 5 lists using a generic key</p>
<pre><code>n = 0
for item in to_store:
    for instance in item:
        boxes[n] = instance
        n += 1
</code></pre>
<p>And then I get the same pickle error
Sorry if it sounds simple. 
But I have never used python storage before (just saving to csv and reading from it).
Thanks.</p>
<p>Here is my Class for an agent:</p>
<p>class Agent(object):</p>
<pre><code># Class for agents. Citizens of the model
# Agents live in families, work in firms, consume
def __init__(self, id, gender, age, qualification, money, firm_id=None, family_id=None, utility=1,
             address=None, distance=None, region_id=None):

    self.id = id
    self.gender = gender
    self.age = age
    self.month = fixed_seed.randrange(1, 13, 1)
    self.qualification = qualification
    self.money = money
    self.firm_id = firm_id
    self.family_id = family_id
    self.utility = utility
    self.address = address
    self.distance = distance
    self.region_id = region_id
</code></pre>
<p>Maybe the problem is a class that contains GDAL/OSGEO geometry?
Here is the code for Govern. region is a shapefile ogr.object</p>
<pre><code>class Govern(object):

def __init__(self, region, index=1, old_index=1, treasure=0, region_gdp=0, pop=0, total_commute=0):

    # region is an OSGEO object that contains Fields and Geometry
    self.region = region
    # Make sure FIELD 0 is Name
    self.name = self.region.GetField(0)
    # Make sure FIELD 1 is IBGE CODE
    self.id = self.region.GetField(1)
    self.index = index
    self.old_index = old_index
    self.treasure = treasure
    self.region_gdp = region_gdp
    self.pop = pop
    self.total_commute = total_commute
</code></pre>
<p>The other classes are similar.
Families and Firms have dictionaries in their <strong>init</strong>()</p>
<pre><code>class Family(object):

def __init__(self, family_id, balance=0, household_id=None, region_id=None, house_price=0, address=None, house=None):
    # Family is a set of agents store in a dictionary keyed by id
    self.family_id = family_id
    self.balance = balance
    self.members = {}
</code></pre>
<p>Here is how I create some firms, for example</p>
<pre><code>def create_firm(num_firms, region, firm_id):
dummy_sector = []
for dummy_firm in range(num_firms):
    address = get_random_point_in_polygon(region)
    total_balance = fixed_seed.randrange(20, 400)
    dummy_sector.append(firms.Firm(firm_id, address, total_balance, region.get_region_id()))
    firm_id += 1
return dummy_sector
</code></pre>
<p>Ok. After all the debate, I guess the problem is the object generated from OSGEO/GDAL. I use: from osgeo import ogr</p>
<p>So, the question should be changed to: how to pickle class instances that contains osgeo.ogr objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>Under the hood <code>shelve</code> uses <code>pickle</code>, so if your objects can not be pickled, <code>shelve</code> can't work with them. </p>
<p>There might be a way to store the information from each object so that it can later be used to reconstruct that object through object instantiation, but we'd need to know the details of the object, and how to create one.</p>
<p>Or, possibly, the objects provide a method to dump them.</p>
<p>The objects being of class <code>SwigPyObject</code> suggests that the objects exist externally to Python, in a C/C++ library.</p>
<p>If possible, provide details of the classes.</p>
</div>
<span class="comment-copy">There is nothing obvious in class <code>Agent</code> that explains where <code>SwigPyObject</code> comes from. Furthermore I can pickle an instance of it if I replace <code>fixed_seed</code> with <code>random</code>: <code>pickle.dumps(Agent(1, 'm', 22, 'qualification', 100))</code> works. So, what is <code>fixed_seed</code>? Can you show an example of creating an <code>Agent</code> that fails to pickle?</span>
<span class="comment-copy"><code>fixed_seed = random.Random (0)</code>   just to keep the same seed through the different modules.</span>
<span class="comment-copy">OK, so how about an example of creating an <code>Agent</code> that can not be pickled due to <code>TypeError: can't pickle SwigPyObject objects</code>? There must be something that is being passed to <code>__init__()</code> that introduces a <code>SwigPyObject</code> object.</span>
<span class="comment-copy">Ok. I introduced the __init__() for region in the question. It does include a osgeo.ogr object (geometry, shapefile by ESRI). The actual boundary of municipalities! Thanks for your time @mhawke</span>
<span class="comment-copy">I was just half done composing almost exactly the same answer ;) <a href="http://www.swig.org/Doc3.0/SWIGDocumentation.html#Python_builtin_types" rel="nofollow noreferrer">swig.org/Doc3.0/SWIGDocumentation.html#Python_builtin_types</a> describes SwigPyObject, and <a href="https://docs.python.org/3/library/pickle.html#pickle-inst" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html#pickle-inst</a> covers pickle unpickleable things.</span>
<span class="comment-copy">My classes are amateuristic built without any sophisticated method. Some varialbes, some methods. I thought any object in python can be sent around easily. I never used SwigPy. So, is there another way to save these objects. The thing is: to run with 57000 agents it takes 3 hours just to create them. I need to create once, and load everytime I make a run. I'll check the documentation of SwigPyObject. Thanks.</span>
<span class="comment-copy">@B_Furtado: you said that you are not using SWIG? Where are the <code>SwigPyObject</code>s coming from? Are you using another module to create your objects?</span>
<span class="comment-copy">I know nothing about SwigPyObject. But I do have a lot of modules. At least a module for each class: agents, firms, households, regions and so on. They are all classes. I instantiate a number of objects of class.Agent, for example and I keep them in my lists: my_agents. Do I have to include a method to each class that makes their instances 'pickleable'? I have been reading about it for the past tow hours and all examples are about pickle for a simple list. My objects are complex. They contain dictionaries, geometry. I just want to store them and picke them up later. Thanks.</span>
<span class="comment-copy">@B_Furtado: it's hard to help without the details about these objects. Are these modules that you have written, or are they 3rd party modules? If the latter, what are they? Can you post a minimal example class implementation for one of these classes?</span>
