<div class="post-text" itemprop="text">
<p>I have a list with words in two languages where each foreign word is followed (on the next row) by its meaning in a known language. Example:</p>
<pre><code>hablar
talk
llamar
call
</code></pre>
<p>Now I wish to create a vocabulary test using queues. My idea is to create 2 queues q1 and q2. All the words start in q1 until each word's meaning has been guessed correctly. If you get a word wrong, the word will get placed in the end of the queue of q1 and if you get it right, it will be moved to q2. When q1 is empty, you move over to q2 and do the same thing, except the words get 'thrown away' when you answer correctly and the test is done once q2 is empty. </p>
<p>The problem is I can't figure out how to create a way to associate the foreign word with the known word. I think I should start like this:</p>
<pre><code>class Wordpair():
    def __init__(self, l1, l2):
        self.lang1 = l1
        self.lang2 = l2

    def __str__(self):
        question=input('What does'+self.lang1+'mean?')
</code></pre>
<p>But I don't know how to test if the preson answers correctly or wrongly. Also, I think I could somehow implement nodes since the meaning of the word (Node) will be the next word (Node.next). I will update as I make progress, but I'd appreciate any tips you have now.<br/>
Edit1: This is how I created the queue:</p>
<pre><code>class Queue:
    def __init__(self):
        self.items = []
    def put(self, item):
        self.items.append(item)
    def get(self):
        return self.items.pop(0)      
    def isempty(self):
        return self.items == []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply compare the user input with the known meaning of the word.</p>
<p>I have written a simple script(Python3) for you to solve this problem, hope it helps!</p>
<pre><code>import queue


class Word(object):

    def __init__(self, foreign_meaning, known_meaning):
        self.foreign_meaning = foreign_meaning
        self.known_meaning = known_meaning


if __name__ == '__main__':
    q1 = queue.Queue()
    q2 = queue.Queue()

    # Put some sample words
    q1.put(Word('hablar', 'talk'))
    q1.put(Word('llamar', 'call'))

    while True:
        if q1.empty():
            print("You have finished all words!")
            break

        word = q1.get() # Get the next word in q1

        ans = input("What is the meaning of `{0}`? ".format(word.foreign_meaning)) # Fetch user input as the answer
        if ans == word.known_meaning:
            print("Correct!")
            q2.put(word)
        else:
            print("Wrong! The meaning of `{0}` is `{1}`".format(word.foreign_meaning, word.known_meaning))
            q1.put(word)
        print()
</code></pre>
<p>Looks like that you are using your own queue implementation.</p>
<p>I have modified my code to fit the question. However, it is strongly recommended that you use the <a href="https://docs.python.org/3/library/queue.html#queue-objects" rel="nofollow">built-in queue module provided by Python3</a> as it is thread safe.</p>
<pre><code>#!/usr/bin/env python


class Queue:

    def __init__(self):
        self.items = []

    def put(self, item):
        self.items.append(item)

    def get(self):
        return self.items.pop(0)

    def isempty(self):
        return self.items == []


class Word(object):

    def __init__(self, foreign_meaning, known_meaning):
        self.foreign_meaning = foreign_meaning
        self.known_meaning = known_meaning


if __name__ == '__main__':
    q1 = Queue()
    q2 = Queue()

    # Put some sample words
    q1.put(Word('hablar', 'talk'))
    q1.put(Word('llamar', 'call'))

    while True:
        if q1.isempty():
            print("You have finished all words!")
            break

        word = q1.get() # Get the next word in q1

        ans = input("What is the meaning of `{0}`? ".format(word.foreign_meaning)) # Fetch user input as the answer
        if ans == word.known_meaning:
            print("Correct!")
            q2.put(word)
        else:
            print("Wrong! The meaning of `{0}` is `{1}`".format(word.foreign_meaning, word.known_meaning))
            q1.put(word)
        print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this case, I would just use a <code>list</code> for each word. I don't think you really need a new class. The program I ended up with is a little long (note this is python 2):</p>
<pre><code>#!/usr/bin/env python

from Queue import Queue

FILENAME='words.txt'

def main():
    q1 = readwords()
    q2 = Queue()

    while (not q1.empty()) or (not q2.empty()):
        if not q1.empty():
            src = 1
            word = q1.get()
        else:
            src = 2
            word = q2.get()
        ans = input('What does "'+word[0]+'" mean? ')
        if ans==word[1]:
            print 'Correct!'
            src += 1
        else:
            print 'Incorrect! "'+word[1]+'"'
        if src==1:
            q1.put(word)
        elif src==2:
            q2.put(word)

    print 'Done! Good job!'

def readwords():
    with open(FILENAME,'r') as f:
        lines = f.readlines()

    first = True
    words = Queue()
    word = [None,None]
    for x in lines:
        if not x.strip():
            continue
        if first:
            word[0] = x.strip()
            first = False
        else:
            word[1] = x.strip()
            first = True
            words.put(word)
            word = [None,None]
    return words

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">I have created my own class called Queue (check my edit in the OP). Can you define the attribute queue in your code? I might be missing it in my class.</span>
<span class="comment-copy">@Lozansky I am using the bulit-in queue module provided by Python3, you can check it here: <a href="https://docs.python.org/3/library/queue.html#queue-objects" rel="nofollow noreferrer">docs.python.org/3/library/queue.html#queue-objects</a></span>
<span class="comment-copy">@Lozansky I have modified the answer and added another script to fit your question.</span>
