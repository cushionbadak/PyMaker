<div class="post-text" itemprop="text">
<p>Since I've learned of the pattern, I've been using</p>
<pre><code>with open('myfile.txt','w') as myfile:
    with contextlib.redirect_stdout(myfile):
        # stuff
        print(...) # gets redirected to file
</code></pre>
<p>This lets me use the print syntax (which I prefer) to write to files and I can easily comment it out to print to screen for debug. However, by doing this, I am removing my ability to both write to file and to the screen, and possibly writing less clear code. Are there any other disadvantages I should know about, and is this a pattern I should be using?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is this a pattern I should be using?</p>
</blockquote>
<p>In this particular case, I do think your pattern is not idiomatic, and potentially confusing to the reader of your code. The builtin <code>print</code> (since this is a Python-3x question) already has a <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>file</code> keyword argument</a> which will do exactly what <code>redirect_stdout</code> does in your example:</p>
<pre><code>with open('myfile.txt', 'w') as myfile:
    print('foo', file=myfile)
</code></pre>
<p>and introducing <code>redirect_stdout</code> only makes your reader wonder why you don't use the builtin feature. (And personally, I find nested <code>with</code> ugly. <code>\</code>-separated <code>with</code> even more ugly.)</p>
<p>As for the ease of commenting out (and for printing to both <code>stdout</code> and a file), well you can have as many <code>print</code> calls as you like, and comment them out as you need</p>
<pre><code>with open('myfile.txt', 'w') as myfile:
    print('foo')
    print('foo', file=myfile)
</code></pre>
<blockquote>
<p>Are there any other disadvantages I should know about</p>
</blockquote>
<p>Nothing definite I can think of, except that it may not be the best solution (as in this case).</p>
<p>EDIT:</p>
<p>From the <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow">doc</a>:</p>
<blockquote>
<p>Note that the global side effect on sys.stdout means that this context
  manager is not suitable for use in library code and most threaded
  applications. It also has no effect on the output of subprocesses.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/7152762/how-to-redirect-print-output-to-a-file-using-python">This question</a>, about how to do exactly what you've been doing has quite a few comments and answers about the drawbacks of redirecting <code>stdout</code>, especially this comment to one of the answers:</p>
<blockquote>
<p>With disk caching performance of the original should be acceptable. This solution however has the drawback of ballooning the memory requirements if there were a lot of output. Though probably nothing to worry about here, it is generally a good idea to avoid this if possible. Same idea as using xrange (py3 range) instead of range, etc. â€“ Gringo Suave</p>
</blockquote>
</div>
<span class="comment-copy">I agree with your assessment here, but it does beg the question -- why have <code>contextlib.redirect_stdout</code> in the first place?  And I think that the answer is so that you can send output of functions that you don't control whereever you want (think about <code>dis.dis</code> for example)</span>
<span class="comment-copy">@mgilson Maybe you need to teach me about the <code>dis.dis</code> example you had in mind. I'm not sure why we don't just use the <code>file</code> argument of that function. The reason I think <code>redirect_stdout</code> exists, though just my guess, is because not every API has a <code>file</code> option like <code>print</code> and <code>dis.dis</code>.</span>
<span class="comment-copy">Well, it appears I choose a poor example.  <a href="https://docs.python.org/2/library/dis.html#dis.dis" rel="nofollow noreferrer">In python2.7, <code>dis.dis</code></a> doesn't have a <code>file</code> argument and I didn't realize they added it sometime in python3.x (probably the same time they added <code>redirect_stdout</code> to <code>contextlib</code> :-P)</span>
<span class="comment-copy">@mgilson If the old <code>dis.dis</code> lacked the <code>file</code> argument (and my Python age isn't old enough to know that), then yeah, I agree that's a use case of <code>redirect_stdout</code>. There probably still exist APIs like that, and so <code>redirect_stdout</code> will be around for while.</span>
<span class="comment-copy">Many good points. I didn't consider the threaded implications.</span>
