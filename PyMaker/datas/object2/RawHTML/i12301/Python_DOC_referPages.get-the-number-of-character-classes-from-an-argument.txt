<div class="post-text" itemprop="text">
<p>The program takes a single string as a command line argument. It should print out the number of character classes contained in that string, e.g. for <code>aBN1</code>.</p>
<pre><code>import sys

a = sys.argv[1]
if a.upper():  
    a = 1
elif a.lower():
    a = a + 1
elif a.digit():
    a = a + 1
else:
    a = a + 1
</code></pre>
<p>I use a for loop to include four character classes: digits, lower case characters, upper case characters and special characters, i.e. everything else. </p>
</div>
<div class="post-text" itemprop="text">
<p>Following <a href="https://stackoverflow.com/questions/35241370/get-number-character-classes-from-an-argument/35242044#35242044">zondo's answer</a>, this is what I came up with:</p>
<pre><code>import sys

s = sys.argv[1]
methods = {str.isdigit: 'd', str.isupper: 'u', str.islower: 'l', (lambda c: (not str.isdigit(c) and not str.isupper(c) and not str.islower(c))):'s'}
result = set()
for c in s:
    for m in methods:
        if m(c):
            result.add(methods[m])
print(len(result))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach but using a <strong>set comprehension</strong> + <strong>next</strong></p>
<pre><code>test_str = 'aBN1*'
methods = {str.isdigit: 'd', str.isupper: 'u', str.islower: 'l'}
result = {
    next((methods[m] for m in methods if m(c)),'s')
    for c in test_str
}
</code></pre>
<p>output:</p>
<pre><code>set(['s', 'u', 'l', 'd'])
</code></pre>
<p>A second one, but this time using <strong>collections.Counter</strong> + <strong>next</strong>:</p>
<pre><code>from collections import Counter
test_str = 'aBN1*'
methods = {str.isdigit: 'd', str.isupper: 'u', str.islower: 'l'}
result = Counter(
    next((methods[m] for m in methods if m(c)), 's')
    for c in test_str
)
</code></pre>
<p>Output:</p>
<pre><code>Counter({'u': 2, 's': 1, 'l': 1, 'd': 1})
</code></pre>
<p>As you can see, there are many ways of doing it, the last one give you how many characters in each character class.</p>
<p>Another way, but this time leveraging the <strong>strings</strong> module of the stdlib:</p>
<pre><code>from string import digits
from string import punctuation
from string import ascii_lowercase
from string import ascii_uppercase

c_classes = {digits: 'd', punctuation: 's', ascii_lowercase: 'l', ascii_uppercase: 'u'}
{c_classes[cclass] for cclass in c_classes for c in test_str if c in cclass}
</code></pre>
<p>output:</p>
<pre><code>set(['s', 'u', 'd', 'l'])
</code></pre>
<p>You can of course use the Counter here as well.
However I believe that the last technique using the string helpers might be heavier in terms of loops because I had to check if the character is in each predefined list. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

if len(sys.argv) != 2:
    print("Usage: %s string" % sys.argv[0], file=sys.stderr)
    sys.exit(1)

methods = {str.isdigit: 0, str.isupper: 0, str.islower: 0}
special = 0
for character in sys.argv[1]:
    old_values = methods.values()
    is_special = 1
    for method in methods:
        if method(character):
            methods[method] = 1
            is_special = 0
    if is_special:
        special = 1

print(sum(methods.values() + [special]))
</code></pre>
</div>
<span class="comment-copy">Your question is unclear, what have you tried so far?</span>
<span class="comment-copy">Im trying to take an argument and see how many character clsses it contains eg aBN1 contains 3 small character upper character and a integer.</span>
<span class="comment-copy">So what have you tried so far? SO is not a "solve my homework" service.</span>
<span class="comment-copy">updated do I need use find module?</span>
<span class="comment-copy">what does lamda do?</span>
<span class="comment-copy">Here you go: <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda-expressions</a></span>
<span class="comment-copy">@DeclanLunney if you find an answer good for you please "Accept" it by clicking on the check-mark next to it</span>
<span class="comment-copy">Is there A more concise way you could do this?</span>
<span class="comment-copy">I haven't gotten anything yet, but I'll work on it.  I think I might be able to do it in only about 6 lines.</span>
<span class="comment-copy">I guess I was a little hasty with that <code>6 lines</code> bit, but this is a little more concise.</span>
