<div class="post-text" itemprop="text">
<p>I'm writing a program to split the words contained in an hashtag.</p>
<p>For example I want to split the hashtags:</p>
<pre class="lang-none prettyprint-override"><code>#Whatthehello #goback
</code></pre>
<p>into:</p>
<pre class="lang-none prettyprint-override"><code>What the hello go back
</code></pre>
<p>I'm having troubles when using <a href="https://docs.python.org/3.5/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> with a functional argument.</p>
<p>The code I've written is:</p>
<pre><code>import re,pdb

def func_replace(each_func):
    i=0
    wordsineach_func=[] 
    while len(each_func) &gt;0:
        i=i+1
        word_found=longest_word(each_func)
        if len(word_found)&gt;0:
            wordsineach_func.append(word_found)
            each_func=each_func.replace(word_found,"")
    return ' '.join(wordsineach_func)

def longest_word(phrase):
    phrase_length=len(phrase)
    words_found=[];index=0
    outerstring=""
    while index &lt; phrase_length:
        outerstring=outerstring+phrase[index]
        index=index+1
        if outerstring in words or outerstring.lower() in words:
            words_found.append(outerstring)
    if len(words_found) ==0:
        words_found.append(phrase)
    return max(words_found, key=len)        

words=[]
# The file corncob_lowercase.txt contains a list of dictionary words
with open('corncob_lowercase.txt') as f:
    read_words=f.readlines()

for read_word in read_words:
    words.append(read_word.replace("\n","").replace("\r",""))
</code></pre>
<p>For example when using these functions like this:</p>
<pre><code>s="#Whatthehello #goback"

#checking if the function is able to segment words
hashtags=re.findall(r"#(\w+)", s)
print func_replace(hashtags[0])

# using the function for re.sub
print re.sub(r"#(\w+)", lambda m: func_replace(m.group()), s)
</code></pre>
<p>The output I obtain is:</p>
<pre class="lang-none prettyprint-override"><code>What the hello
#Whatthehello #goback
</code></pre>
<p>Which is not the output I had expected:</p>
<pre class="lang-none prettyprint-override"><code>What the hello
What the hello go back
</code></pre>
<p>Why is this happening? In particular I've used the suggestion from <a href="https://stackoverflow.com/a/18737964/3646408">this answer</a> but I don't understand what goes wrong in this code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Notice that <code>m.group()</code> returns the entire string that matched, whether or not it was part of a capturing group:</p>
<pre><code>In [19]: m = re.search(r"#(\w+)", s)

In [20]: m.group()
Out[20]: '#Whatthehello'
</code></pre>
<p><code>m.group(0)</code> also returns the entire match:</p>
<pre><code>In [23]: m.group(0)
Out[23]: '#Whatthehello'
</code></pre>
<p>In contrast, <code>m.groups()</code> returns all capturing groups:</p>
<pre><code>In [21]: m.groups()
Out[21]: ('Whatthehello',)
</code></pre>
<p>and <code>m.group(1)</code> returns the first capturing group:</p>
<pre><code>In [22]: m.group(1)
Out[22]: 'Whatthehello'
</code></pre>
<p>So the problem in your code originates with the use of <code>m.group</code> in </p>
<pre><code>re.sub(r"#(\w+)", lambda m: func_replace(m.group()), s)
</code></pre>
<p>since</p>
<pre><code>In [7]: re.search(r"#(\w+)", s).group()
Out[7]: '#Whatthehello'
</code></pre>
<p>whereas if you had used <code>.group(1)</code>, you would have gotten</p>
<pre><code>In [24]: re.search(r"#(\w+)", s).group(1)
Out[24]: 'Whatthehello'
</code></pre>
<p>and the preceding <code>#</code> makes all the difference:</p>
<pre><code>In [25]: func_replace('#Whatthehello')
Out[25]: '#Whatthehello'

In [26]: func_replace('Whatthehello')
Out[26]: 'What the hello'
</code></pre>
<p>Thus, changing <code>m.group()</code> to <code>m.group(1)</code>, and substituting <code>/usr/share/dict/words</code> for <code>corncob_lowercase.txt</code>, </p>
<pre><code>import re

def func_replace(each_func):
    i = 0
    wordsineach_func = []
    while len(each_func) &gt; 0:
        i = i + 1
        word_found = longest_word(each_func)
        if len(word_found) &gt; 0:
            wordsineach_func.append(word_found)
            each_func = each_func.replace(word_found, "")
    return ' '.join(wordsineach_func)


def longest_word(phrase):
    phrase_length = len(phrase)
    words_found = []
    index = 0
    outerstring = ""
    while index &lt; phrase_length:
        outerstring = outerstring + phrase[index]
        index = index + 1
        if outerstring in words or outerstring.lower() in words:
            words_found.append(outerstring)
    if len(words_found) == 0:
        words_found.append(phrase)
    return max(words_found, key=len)

words = []
# corncob_lowercase.txt contains a list of dictionary words
with open('/usr/share/dict/words', 'rb') as f:
    for read_word in f:
        words.append(read_word.strip())
s = "#Whatthehello #goback"
hashtags = re.findall(r"#(\w+)", s)
print func_replace(hashtags[0])
print re.sub(r"#(\w+)", lambda m: func_replace(m.group(1)), s)
</code></pre>
<p>prints </p>
<pre><code>What the hello
What the hello gob a c k
</code></pre>
<p>since, alas, <code>'gob'</code> is longer than <code>'go'</code>.</p>
<hr/>
<p>One way you could have debugged this is to replace the <code>lambda</code> function with a regular function and then add print statements:</p>
<pre><code>def foo(m):
    result = func_replace(m.group())
    print(m.group(), result)
    return result

In [35]: re.sub(r"#(\w+)", foo, s)
('#Whatthehello', '#Whatthehello')   &lt;-- This shows you what `m.group()` and `func_replace(m.group())` returns
('#goback', '#goback')
Out[35]: '#Whatthehello #goback'
</code></pre>
<p>That would focus your attention on </p>
<pre><code>In [25]: func_replace('#Whatthehello')
Out[25]: '#Whatthehello'
</code></pre>
<p>which you could then compare with</p>
<pre><code>In [26]: func_replace(hashtags[0])
Out[26]: 'What the hello'

In [27]: func_replace('Whatthehello')
Out[27]: 'What the hello'
</code></pre>
<p>That would lead you to ask the question, if <code>m.group()</code> returns <code>'#Whatthehello'</code>, what method do I need to return <code>'Whatthehello'</code>. A dive into <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow">the docs</a> then solves the problem.</p>
</div>
<span class="comment-copy">Hmmm.. what is the problem. Why the downvote? It is about programming!!</span>
<span class="comment-copy">It's good to be syntethic but your question should at least be readable. Use English sentences not summaries like "aim: do this. Code: ..; output ..; why? see here".</span>
<span class="comment-copy">@Bakuriu Thanks for the edit! I will that in mind asking again.</span>
<span class="comment-copy">I just wanted to give an example of how to write a good question. You did a good job at providing the complete code with output and what did you expect, but you should put at least a pragraph of text describing what you want to do (maybe why, a little background) and how the code fit into this. In this way your question will be attract more and be more useful.</span>
<span class="comment-copy">Thanks! This is the best explained answer I have read so far.</span>
<span class="comment-copy">Using the interpreter to explain the problem step by step was brilliant. Thanks. Once you understand the problem, the solution just jumps at you. Moreover, you can carry what you understood to your future coding endeavors.</span>
