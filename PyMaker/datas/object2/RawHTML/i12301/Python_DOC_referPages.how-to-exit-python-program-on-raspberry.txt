<div class="post-text" itemprop="text">
<p>My program in python runs on RaspBerry Pi, and instantiates several objects <em>(GPIO inputs and outputs, http server, webSocket, I2C interface, etc..., with thread)</em>.</p>
<p>When exiting my program, I try to clear all the resources, and delete all the instances.
For the network objects, I close listening sockets and so on.
I finish with a <code>sys.exit()</code> call, but program doe not exit and does not returns alone to linux console (I need to press ctrl+z).</p>
<p>Are there some objects that are not released, how to know, and how to force exit ?</p>
<p>Best regards.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm programming for Raspberry Pi with the Kivy library, and I've had a similar problem. The comments in this topic have helped me solve it.</p>
<p>In my case, Kivy uses "Clock()" objects to call a function with certain time intervals, providing the main program loop.</p>
<p>As it turns out, while everything works fine on a PC (in Linux or Windows), on Raspberry Pi you have to manually stop all program loops, otherwise "sys.exit()" will not work.</p>
<p>At first, I had "sys.exit()" command executing at key press. That didn't work for Raspberry. So, instead I used a global variable that would change value when the exit key is pressed, and had its value checked within the program loop, where I then called "sys.exit()" (and "return False", which signals Kivy to destroy the Clock() object).</p>
<p>I've also been using separate Clock() objects for some animations in my program, and I've noticed that if I press exit while an animation is running, my program would freeze without exiting - just as before, because "sys.exit()" was called while some Clock() objects were running.</p>
<p>The bottom line is - if you have trouble with "sys.exit()" on Raspberry Pi, <strong>make sure all program loops in your code are stopped</strong> before calling sys.exit().</p>
<p>As the most simple example, if you have a program running a loop like</p>
<pre><code>while True:
</code></pre>
<p>instead use</p>
<pre><code>while running:
   # where running = True
</code></pre>
<p>then change to "running = False" before calling "sys.exit()".</p>
</div>
<span class="comment-copy">You mention threads: non-daemonic threads aren't killed by <code>sys.exit()</code> and can keep your process alive. You can check for running threads with <a href="https://docs.python.org/3/library/threading.html#threading.active_count" rel="nofollow noreferrer"><code>active_count</code></a> and <a href="https://docs.python.org/3/library/threading.html#threading.enumerate" rel="nofollow noreferrer"><code>enumerate</code></a></span>
<span class="comment-copy">I try your suggest threading.enumerate and leaving threads are: &lt;WriterThread(pydevd.Writer, started daemon 8992)&gt; &lt;Thread(QueueFeederThread, started daemon 4960)&gt; &lt;_Timer(Thread-6, started 652)&gt; &lt;PyDBCommandThread(pydevd.CommandThread, started daemon 7532)&gt; &lt;ReaderThread(pydevd.Reader, started daemon 8784)&gt; &lt;_MainThread(MainThread, started 4180)&gt; &lt;_Timer(Thread-5, started 7384)&gt; I don't know these threads...</span>
<span class="comment-copy">Please edit your question adding these information (so that they are easier to read). As you can see, most of the threads are daemonic, so you can ignore them. The only non-daemonic ones are the two <code>_Timer</code>s. Inspect them (they should have a <code>.function</code> attribute)</span>
<span class="comment-copy">Ok (I had a problem with "enter" key which closed the comment window.. Now I have found the "shift" + "enter").&lt;br/&gt; I don't understand .function attribute. but I have used :&lt;br/&gt;     if type(x) is threading._Timer:         x.cancel() &lt;br/&gt; Right ?</span>
<span class="comment-copy">That way you are cancelling timers: if that's what you want then go ahead. I was suggesting to investigate why those timers were there in the first place. Again: please don't write code/output in comments, edit your question.</span>
