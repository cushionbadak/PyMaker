<div class="post-text" itemprop="text">
<p>I'm new to python and have heard it has some interesting metaprogramming features which I know nothing about. </p>
<p>I'm not sure this exists, but is it possible to load a json file and search for keys that match variables in the existing script, and if there is a match, assign them? </p>
<p>Additionally, if I do make these assignments, is it possible to detect that the loading script (a config script in this case) contains variable names that the json file does not have? In this case I would add these new variable names to the json file and save values, to be loaded on next run. </p>
<p>for example, I'd like to do something where somewhere in the following code, a list of variables attached to the executing script would be put into a list, and that list could then be used to match keys in a json file, and also to assign the variables new values in the executing script. </p>
<pre><code>config.py

MAX_LIMIT = 100
FOO = 'test'
BAR = 'other test'

def get_variable_names():
    return list_of_variables_in_config.py

def load_config():
    vars = get_variable_names()

    with open('config.json') as data_file:  

        config = json.load(config_file)
        for k in config.keys():
            if k in vars:
                vars[k] = config[k]
        for v in vars:
            if not v in config.keys():
                config[v] = vars[v]   

write_config(config)

def print_vars():
    print('MAX_LIMIT = ', MAX_LIMIT)
    print('FOO = ', FOO)
    print('BAR = ', BAR)
</code></pre>
<p>output after running load config:</p>
<pre><code>MAX_LIMIT = 23
FOO = modified var
BAR = other modified var
</code></pre>
<p>is this sort of thing possible? </p>
<p>Thanks in advance </p>
</div>
<div class="post-text" itemprop="text">
<p>Well there is this module, that can be used to import a json file as if it was a python module:</p>
<p><a href="https://github.com/kragniz/json-sempai" rel="nofollow">https://github.com/kragniz/json-sempai</a></p>
<p>But even the author refers to it as an "abomination".</p>
<p>As others have pointed out you could use <code>locals()</code> to get the current local variables and compare that with the JSON data.  Although the docs state that you <em>shouldn't</em> modify <code>locals()</code> it's often possible to get away with it.  Though in your case <code>locals()</code> won't work if you change it inside a function.</p>
<p>You seem to be talking about global/module level variables though.  So you could use the <code>globals()</code> function and that can be written to.</p>
<pre><code>def load_config():
    with open('config.json') as data_file:  
        config = json.load(config_file)
        for k in config.keys():
            if k in globals():
                globals()[k] = config[k]
</code></pre>
<p>Note however it's potentially pretty dangerous - particularly if you can't trust what's in the config file...</p>
</div>
<span class="comment-copy">You can check whether the keys exist in <code>locals()</code>, and if so, replace it..</span>
<span class="comment-copy">hmm, in the python documentation for locals() it says:  "Note The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter."  <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#locals</a>  so that suggests i shouldn't go assigning values here?</span>
<span class="comment-copy">Well, yes, you probably shouldn't do what you intend to do, but maybe <code>globals()</code> would be a "better" choice then.</span>
<span class="comment-copy">also, in just testing out usage of locals(), in trying to print out the names of variables i get a RuntimeError: dictionary changed size during iteration, which suggests any new variables in a for loop also become part of this dictionary.   that seems like an issue if i'm loading and assigning variables in a loop</span>
<span class="comment-copy">Well, you could <code>.copy()</code> the dictionary, and iterate over that copy.</span>
<span class="comment-copy">thanks! i did in fact use globals() as described in some of the comments above.   this isn't for public use other than personal art projects, and won't be accessible via web or remote access, so i think for my use case it's fairly safe. i wrote it up here (still needs some editing and changes for best practice) <a href="https://gist.github.com/zombience/041466993c1c7da3fe4b" rel="nofollow noreferrer">gist.github.com/zombience/041466993c1c7da3fe4b</a></span>
