<div class="post-text" itemprop="text">
<p>I am looking for way to determine the number of characters my binary value takes up. </p>
<p>For example if my values binary values were 4, 20, and 60 I'd get the following results:</p>
<pre><code>bin(4), 0b100 = 3

bin(20), 0b10100 = 5

bin(60), 0b111100 = 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A positive integer <em>n</em> has <em>b</em> bits when 2<sup>b-1</sup> ≤ n ≤ 2<sup>b</sup> – 1. So The number of bits required to represent an integer <em>n</em> is : </p>
<pre><code>floor(log n)+1 # note that base of log is 2
</code></pre>
<p>And since you have <code>0b</code> at the leading you need to add 2 to aforementioned formula.</p>
<p>So it would be :</p>
<pre><code>floor(log n) + 3
</code></pre>
<p>And in python you can use <code>math</code> module like following:</p>
<pre><code>math.floor(math.log(n, 2)) + 3
</code></pre>
<p>Example :</p>
<pre><code>&gt;&gt;&gt; math.floor(math.log(10, 2)) + 3
6.0
&gt;&gt;&gt; 
&gt;&gt;&gt; len(bin(10))
6
&gt;&gt;&gt; math.floor(math.log(77, 2)) + 3
9.0
&gt;&gt;&gt; len(bin(77))
9
</code></pre>
<p>As a more <strong>Pythonic</strong> way you can also use <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow"><code>int.bit_length</code></a> which returns the number of bits needs to represent an integer object. So for get the number of require characters you can add it with 2 : </p>
<pre><code>int.bit_length() + 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = 20
a.bit_length()
&gt;&gt; 5
</code></pre>
</div>
<span class="comment-copy"><code>len(bin(x)) - 2</code></span>
<span class="comment-copy">Also, in recent versions, <code>x.bit_length()</code>.</span>
<span class="comment-copy">Using <code>floor(log(n, 2)) + 1</code> isn't a good idea if you need correct results for larger inputs. For example, it gives the wrong result on my machine for <code>562949953421311</code> (the correct answer is <code>49</code>, but on my machine this formula gives <code>50</code>). In recent Python versions, you can use <code>log2</code>, which is a bit more accurate than <code>log(n, 2)</code>, but there's really no point when the <code>bit_length</code> method is available.</span>
<span class="comment-copy">@MarkDickinsonThanks for edit. Yep that's because of the restricts in calculating the floating point numbers. But at first I thought OP is looking fora mathematical approach and actually I've missed <code>bit_length</code> function.</span>
<span class="comment-copy"><code>bit_length</code> is a method and should be called</span>
