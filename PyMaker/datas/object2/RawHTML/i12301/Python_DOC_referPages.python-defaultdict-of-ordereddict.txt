<div class="post-text" itemprop="text">
<p>I would like to combine <code>OrderedDict()</code> and <code>defaultdict()</code> from <code>collections</code> in one object, which shall be an ordered, default dict. Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following (using a modified version of <a href="http://code.activestate.com/recipes/523034-emulate-collectionsdefaultdict/" rel="noreferrer">this recipe</a>) works for me:</p>
<pre><code>from collections import OrderedDict, Callable

class DefaultOrderedDict(OrderedDict):
    # Source: http://stackoverflow.com/a/6190500/562769
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
           not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __getitem__(self, key):
        try:
            return OrderedDict.__getitem__(self, key)
        except KeyError:
            return self.__missing__(key)

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value

    def __reduce__(self):
        if self.default_factory is None:
            args = tuple()
        else:
            args = self.default_factory,
        return type(self), args, None, None, self.items()

    def copy(self):
        return self.__copy__()

    def __copy__(self):
        return type(self)(self.default_factory, self)

    def __deepcopy__(self, memo):
        import copy
        return type(self)(self.default_factory,
                          copy.deepcopy(self.items()))

    def __repr__(self):
        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,
                                               OrderedDict.__repr__(self))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another possibility, inspired by <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="noreferrer">Raymond Hettinger's super() Considered Super</a>, tested on Python 2.7.X and 3.4.X:</p>
<pre><code>from collections import OrderedDict, defaultdict

class OrderedDefaultDict(OrderedDict, defaultdict):
    def __init__(self, default_factory=None, *args, **kwargs):
        #in python3 you can omit the args to super
        super(OrderedDefaultDict, self).__init__(*args, **kwargs)
        self.default_factory = default_factory
</code></pre>
<p>If you check out the class's MRO (aka, <code>help(OrderedDefaultDict)</code>), you'll see this:</p>
<pre><code>class OrderedDefaultDict(collections.OrderedDict, collections.defaultdict)
 |  Method resolution order:
 |      OrderedDefaultDict
 |      collections.OrderedDict
 |      collections.defaultdict
 |      __builtin__.dict
 |      __builtin__.object
</code></pre>
<p>meaning that when an instance of <code>OrderedDefaultDict</code> is initialized, it defers to the <code>OrderedDict</code>'s init, but this one in turn will call the <code>defaultdict</code>'s methods before calling <code>__builtin__.dict</code>, which is precisely what we want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another solution to think about if your use case is simple like mine and you don't necessarily want to add the complexity of a <code>DefaultOrderedDict</code> class implementation to your code.</p>
<pre><code>from collections import OrderedDict

keys = ['a', 'b', 'c']
items = [(key, None) for key in keys]
od = OrderedDict(items)
</code></pre>
<p><em>(<code>None</code> is my desired default value.)</em></p>
<p>Note that this solution won't work if one of your requirements is to dynamically insert new keys with the default value.  A tradeoff of simplicity. </p>
<p><strong>Update 3/13/17</strong> - I learned of a convenience function for this use case.  Same as above but you can omit the line <code>items = ...</code> and just:</p>
<pre><code>od = OrderedDict.fromkeys(keys)
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([('a', None), ('b', None), ('c', None)])
</code></pre>
<p>And if your keys are single characters, you can just pass one string:</p>
<pre><code>OrderedDict.fromkeys('abc')
</code></pre>
<p>This has the same output as the two examples above.</p>
<p>You can also pass a default value as the second arg to <code>OrderedDict.fromkeys(...)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a simple solution that doesn't require a class, you can just use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="noreferrer"><code>OrderedDict.<strong>setdefault</strong>(<em>key, default=None</em>)</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="noreferrer"><code>OrderedDict.<strong>get</strong>(<em>key, default=None</em>)</code></a>. If you only get / set from a few places, say in a loop, you can easily just setdefault.</p>
<pre><code>totals = collections.OrderedDict()

for i, x in some_generator():
    totals[i] = totals.get(i, 0) + x
</code></pre>
<p>It is even easier for lists with <code>setdefault</code>:</p>
<pre><code>agglomerate = collections.OrderedDict()

for i, x in some_generator():
    agglomerate.setdefault(i, []).append(x)
</code></pre>
<p>But if you use it more than a few times, it is probably better to set up a class, like in the other answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simpler version of @zeekay 's answer is:</p>
<pre><code>from collections import OrderedDict

class OrderedDefaultListDict(OrderedDict): #name according to default
    def __missing__(self, key):
        self[key] = value = [] #change to whatever default you want
        return value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple and elegant solution building on @NickBread. 
Has a slightly different API to set the factory, but good defaults are always nice to have.</p>
<pre><code>class OrderedDefaultDict(OrderedDict):
    factory = list

    def __missing__(self, key):
        self[key] = value = self.factory()
        return value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another simple approach would be to use dictionary <code>get</code> method</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; d['key'] = d.get('key', 0) + 1
&gt;&gt;&gt; d['key'] = d.get('key', 0) + 1
&gt;&gt;&gt; d
OrderedDict([('key', 2)])
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Inspired by other answers on this thread, you can use something like,</p>
<pre><code>from collections import OrderedDict

class OrderedDefaultDict(OrderedDict):
    def __missing__(self, key):
        value = OrderedDefaultDict()
        self[key] = value
        return value
</code></pre>
<p>I would like to know if there're any downsides of initializing another object of the same class in the <strong>missing</strong> method. </p>
</div>
<div class="post-text" itemprop="text">
<p>i tested the default dict and discovered it's also sorted!
maybe it was just a coincidence but anyway you can use the sorted function:</p>
<pre><code>sorted(s.items())
</code></pre>
<p>i think it's simpler</p>
</div>
<span class="comment-copy">Even though you've already accepted a solution, you might want to check-out the somewhat simpler <code>OrderedDefaultdict</code> class I wrote for this <a href="https://stackoverflow.com/questions/4126348/how-do-i-rewrite-this-function-to-implement-ordereddict/4127426#4127426">answer</a>.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/27712226/1484957a0">I wonder why you can't just create a class that inherits <code>OrderedDict </code> and <code>defaultdict</code>?</a></span>
<span class="comment-copy">@drs see my answer below, which does exactly that: <a href="http://stackoverflow.com/a/35968897/1644561">stackoverflow.com/a/35968897/1644561</a></span>
<span class="comment-copy">Deleted my answer, which was similar in thought process but designed on the fly (and hence needed to implement various other functions).</span>
<span class="comment-copy">@Neil G: You probably should just use the built-in <code>callable()</code> function to test <code>default_factory</code>. Using <code>isinstance(default_factory, Callable)</code> actually requires it to have more than just callability -- see the <a href="http://docs.python.org/library/collections.html?highlight=callable#collections.Callable" rel="nofollow noreferrer">docs</a> -- which is all that's is needed here.</span>
<span class="comment-copy">@martineau: You're right.  I believe <code>callable</code> was removed in Python 3.1 and then reinstated in Python 3.2, and I hadn't upgraded yet when I made this edit.  Feel free to make the change.</span>
<span class="comment-copy">@Neil G: Actually <code>callable()</code> was first removed in Python 3.0 and then brought back in Python 3.2. Anyway, consider changing it yourself if you wish (I like my own answer better anyway ;-). I generally tend to shy away from just hopping in and changing someone else's answer, preferring instead to only make comments as I've done here.</span>
<span class="comment-copy">@zeekay: I think you might need to change <code>self.items()</code> into <code>iter(self.items())</code> inside <code>__reduce__</code>. Otherwise, <code>PicklingError</code> exception is raised complaining that fifth argument of the <code>__reduce__</code> must be an iterator.</span>
<span class="comment-copy">This answer, despite its elegance and simplicity, doesn't work in Python3. Since both OrderedDict and defaultdict are implemented in C, you get a TypeError, "multiple bases have instance lay-out conflict."  That's because the C classes have differing, and incompatible, ideas of how to lay out the internal data structures. The accepted answer above works well in Python3, with a few tiny changes (super().__getitem__(... instead of OrderedDict.__getitem_(... ). I'm using Python3.5.</span>
<span class="comment-copy">Interesting, this works correctly in Python 3.4.3  Is there any way to see where the TypeError is coming from in the C code?</span>
<span class="comment-copy">As of Python 3.6 this will be unnecessary, as all <code>dicts</code>, and therefore all <code>defaultdicts</code>, will be ordered. I am ok with it not working on 3.5 ;)</span>
<span class="comment-copy">Though <code>dicts</code> in CPython 3.6 preserve order, it is an implementation detail not to be relied upon, see <a href="http://stackoverflow.com/a/39980548/91243">stackoverflow.com/a/39980548/91243</a>. Use <code>OrderedDict</code> if that is what you want.</span>
<span class="comment-copy">It's now offical Guido approved it.</span>
<span class="comment-copy">Thank you! <code>od = OrderedDict((k, None) for k in iterable)</code></span>
<span class="comment-copy">This assumes your keys are predefined in some iterable though, so downstream objects would need to be aware that adding a new key requires an initial value. To be more precise, you couldn't assume an initial value for something like:      <code>&gt;&gt;&gt; od = OrderedDefaultDict(int)     &gt;&gt;&gt; od['foo'] += 100     OrderedDefaultDict([('foo', 100)])</code>  This case would be correctly handled by a solution like <a href="http://stackoverflow.com/a/35968897/1644561">this one</a>.</span>
<span class="comment-copy">@avyfain That's correct.  For my use case, it was just the initial data so future inserts of keys not previously defined wasn't relevant.  I'll add a note to make the assumption explicit.</span>
<span class="comment-copy">You can even override <code>__init__</code> to catch the "default_factory" of the new items.</span>
<span class="comment-copy">This is an ordered dict where the default value is always another ordered dict. Not really what the question was about.</span>
<span class="comment-copy"><code>sorted</code> is likely different than the insertion order of OrderedDict.</span>
