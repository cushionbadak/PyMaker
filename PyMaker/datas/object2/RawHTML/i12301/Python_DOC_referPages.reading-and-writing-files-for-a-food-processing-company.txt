<div class="post-text" itemprop="text">
<p>I am working on a Python project where a food processing company is trying to calculate its total sales for the year. Python has to read from a text file where its divided into for categories split by commas. The first category is the Type of product, which can be cereal, chocolate candy etc produced by the company. The second category is the brand of the said product, for example, Kaptain Krunch for cereal or Coco Jam for chocolate. The third category is the sales for the last fiscal year(2014) and the last category is sales for this fiscal year(2015). Note that only sales for fiscal year 2015 are to be calculated. The 2014 has no use in this program but it is there.  Here is how the text file looks like. Its name is product.txt</p>
<blockquote>
<p>Cereal,Magic Balls,2200,2344</p>
<p>Cereal,Kaptain Krunch,3300,3123</p>
<p>Cereal,Coco Bongo,1800,2100</p>
<p>Cereal,Sugar Munch,4355,6500</p>
<p>Cereal,Oats n Barley,3299,5400</p>
<p>Sugar Candy,Pop Rocks,546,982</p>
<p>Sugar Candy,Lollipop,1233,1544</p>
<p>Sugar Candy,Gingerbud,2344,2211</p>
<p>Sugar Candy,Respur,1245,2211</p>
<p>Chocolate,Coco Jam,3322,4300</p>
<p>Chocolate,Larkspur,1600,2200</p>
<p>Chocolate,Mighty Milk,1234,2235</p>
<p>Chocolate,Almond Berry,998,1233</p>
<p>Condiments,Peanut Butter,3500,3902</p>
<p>Condiments,Hot Sauce,1234,1560</p>
<p>Condiments,Jelly,346,544</p>
<p>Condiments,Spread,2334,5644</p>
</blockquote>
<p>What we are looking to do is to add the sales for Fiscal year 2015 by products and then the total sales for everything in 2015</p>
<p>The output should look something like the in the written text file</p>
<blockquote>
<p>Total sales for cereal in 2015 : {Insert total number here}</p>
<p>Total sales for Sugar Candy in 2015 : {Insert total number here}</p>
<p>Total sales for Chocolate in 2015 : {Insert total number here}</p>
<p>Total sales for Condiments in 2015 : {Insert total number here}</p>
<hr/>
<p>Total sales for the company in 2015: {Insert total for all the
  products sold in 2015}</p>
</blockquote>
<p>Along with that, it should also print the grand total on the Python run screen in the IDE along with the text file.</p>
<blockquote>
<p>Total sales for the company in 2015: {Insert total for all the
  products sold in 2015}</p>
</blockquote>
<p>Here is my code. I am new to Python and reading and writing files so I can't really say if I am on the right track.</p>
<pre><code>PRODUCT_FILE = "products.txt"
REPORT_FILE = "report.txt"

def main():
    #open the file
    productFile = open(PRODUCT_FILE, "r")
    reportFile = open(REPORT_FILE, "w")

    # reading the file
    proData = extractDataRecord(productFile)
    product = proData[0]
    category = proData[1]
    salesLastYear = prodata[2]
    salesThisYear = proData[3]

    #computing
    product = 0.0
    product = salesThisYear


    productFile.close()
    reportFile.close()

def extractDataRecord(infile) :
   line = infile.readline()
   if line == "" :
      return []
   else :
      parts = line.rsplit(",", 1)
      parts[1] = int(parts[1]) 
      return parts

# Start the program.
main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The short version here is that you're doing this wrong. Never roll your own parsing code if you can help it. I'd suggest taking a look at <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">the built-in <code>csv</code> module</a>, and trying using that to "contract out" the CSV parsing, letting you focus on the rest of the logic.</p>
<p>Simple rewrite and completed code with <code>csv</code>:</p>
<pre><code>import collections
import csv

PRODUCT_FILE = "products.txt"
REPORT_FILE = "report.txt"

def main():
    # Easy way to get a dictionary where lookup defaults to 0
    categorycounts = collections.defaultdict(int)

    #open the files using with statements to ensure they're closed properly
    # without the need for an explicit call to close, even on exceptions
    with open(PRODUCT_FILE, newline='') as productfile,\
         open(REPORT_FILE, "w") as reportfile:
        pcsv = csv.reader(productfile)

        # Sum sales by product type letting csv parse
        # Filter removes empty rows for us; assume all other rows complete
        for category, brand, sales_lastyear, sales_thisyear in filter(None, pcsv):
            categorycounts[category] += int(sales_thisyear)

        # Print categories in sorted order with their total sales
        for category, sales in sorted(categorycounts.items()):
            print('Total sales for', category, 'in 2015:', sales, file=reportfile)

        print('-'*80, file=reportfile) # Separator line between categories and total

        # Sum and print total sales to both file and screen
        totalsales = sum(categorycounts.values())
        print("Total sales for the company in 2015:", totalsales, file=reportfile)
        print("Total sales for the company in 2015:", totalsales)

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Well its is a text file and not a csv so I cannot use that here.</span>
<span class="comment-copy">@Reginald: Are you sure? The extension says .txt, but that looks like CSV (comma-separated value) data. Odds are someone saved it from Excel or something as CSV, but used the wrong extension; the actual extension doesn't matter though, as long as the contents are correct.</span>
<span class="comment-copy">Yes, actually we are given a .txt file and are specifically told to use that.</span>
<span class="comment-copy">@Reginald: What I'm trying to say is that, regardless of the extension, if the file contains CSV data (which your example does), then it's CSV. The extension doesn't matter. It could be <code>.foobarbaz</code> and as long as the contents are CSV, you can use it as such; the <code>csv</code> module doesn't even see the file name (it wraps a file-like object, it doesn't even open the file itself).</span>
<span class="comment-copy">Thank you for the clarification. Is there a way to do this without importing csv? I know this method is really elegant and to the point, but so far we are not taught csv.</span>
