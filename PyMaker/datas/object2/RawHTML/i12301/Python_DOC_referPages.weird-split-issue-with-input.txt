<div class="post-text" itemprop="text">
<p>I have some code that takes numbers separated by spaces from input(). I tried to call .split() on it but for some reason it turns [56 78 90 1 2 3] into [78.0, 90.0, 1.0, 2.0]. Thanks</p>
<pre><code>def insert(self, lst):
    for x in lst.split():
        try:
            self.theList.append(float(x))
        except:
            3+4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"some reason" is that you're calling <code>float</code> which converts the value to <code>float</code> type.</p>
</div>
<div class="post-text" itemprop="text">
<p>It does this because you're using float(x).  Use an integer value if all of your numbers will be integers.  Otherwise, you can expect additional decimal places when using the float function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You start out with the string <code>lst = "[56 78 90 1 2 3]"</code>. It is split by whitespaces giving <code>['[56', '78', '90', '1', '2', '3]']</code>. Notice the brackets in the first and last element!</p>
<p>You then interpret each element as a float which fails on <code>float('[56')</code> and <code>float('3]')</code>, causing the program to enter the <code>except</code> case that you carefully chose to not utilize.</p>
<p>Here is how you would turn an integer string into a proper list that could be iterated over, so that you could reinterpret the numbers as floats for whatever reason you would want that:</p>
<pre><code>import ast
ast.literal_eval(lst.replace(" ", ", ")
</code></pre>
<p>Why are you passing around a bunch of integers as a string anyway? Could you show the place in your code where <code>"[56 78 90 1 2 3]"</code> comes into existence?</p>
</div>
<span class="comment-copy">what are you expecting with the <code>float</code> function? Perhaps you mean to use the <code>int</code> function</span>
<span class="comment-copy">You are explicitly <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer">casting x as a float</a> (<code>float(x)</code>)</span>
<span class="comment-copy">Why would you suggest using a literal_eval (at least it is ast) when <a href="http://stackoverflow.com/questions/1614236/in-python-how-to-i-convert-all-items-in-a-list-to-floats">there are so many other, better, options for this</a>?</span>
<span class="comment-copy">I chose <code>literal_eval()</code> because the input was already in string format. Replacing the brackets in <code>'[56'</code> either by <code>replace()</code> or by sub-scripting just seems like a more roundabout way.</span>
