<div class="post-text" itemprop="text">
<p>I think everyone knows what to do with long-running tasks in django: use celery and relax. But what if I want to get benefits of the websockets with aiohttp (or tornado)?</p>
<p>Let's say I have very CPU bound task which can take from a couple of seconds till multiple (5-10) minutes. It looks like pretty good idea to handle this task in websocket loop and notify user about the progress. No ajax requests, very fast response for short tasks.</p>
<pre><code>async def websocket_handler(request):
    ws = web.WebSocketResponse()
    await ws.prepare(request)

    async for msg in ws:
        if msg.tp == aiohttp.MsgType.text:     
            answer_to_the_ultimate_question_of_life_the_universe_and_everything =\
                long_running_task(msg.data, NotificationHelper(ws))
            ws.send_str(json.dumps({
                'action': 'got-answer',
                'data': answer_to_the_ultimate_question_of_life_the_universe_and_everything,
            }))
    return ws
</code></pre>
<p>But on the other hand, CPU-bound task served in such way blocks entire thread as I understand. If I have 10 workers and 11 clients who wants to use application, 11th client won't be served until the 1st client's task is done.</p>
<p>Maybe, I should run tasks <em>which look big</em> in celery and tasks <em>which look small</em> in the main loop?</p>
<p>So, my question: is there any good design pattern for serving long-running tasks with async server?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just run your long-running CPU-bound task by <code>loop.run_in_executor()</code> and send progress notifications by <code>loop.call_soon_threadsafe()</code>.</p>
<p>If your job is not CPU but IO bound (sending emails for example) you may create a new task by <code>loop.create_task()</code> call. It looks like spawning new thread.</p>
<p>If you cannot use fire-and-forget approach you need to use persistent message broker like RabbitMQ (there is <a href="https://github.com/benjamin-hodgson/asynqp" rel="noreferrer">https://github.com/benjamin-hodgson/asynqp</a> library for communicating with Rabbit in asyncio way).</p>
</div>
<span class="comment-copy"><code>asyncio</code> won't help you with CPU-bound tasks.</span>
<span class="comment-copy">@dirn is it good only for IO-bound tasks and different kind of interaction with server?</span>
<span class="comment-copy">Well asyncio can help, it's livelier if task is hosted in a separate thread (or green thread with yields or subprocess for truly kinky). Obv., there are concerns -- what is ws connection dies? Can there be a data race? What about "truly more requests than resources" -- 503/queue/block/error?</span>
<span class="comment-copy">if the function is picklable, how about using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="nofollow noreferrer"><code>asyncio.run_in_executor</code></a>?</span>
<span class="comment-copy">@shongololo I want to put ws object into function as it is shown in example. So, it looks like it is not pickable, is it?</span>
