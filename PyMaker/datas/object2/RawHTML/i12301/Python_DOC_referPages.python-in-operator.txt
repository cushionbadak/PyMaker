<div class="post-text" itemprop="text">
<p>I am having a bit of trouble with the Python <code>in</code> operator. <code>sltn</code> contains 0, 1, and 2 as I checked in the previous line (with a print, said it contains <code>[0, 1, 2]</code>) but for some reason the <code>if ("0","1","2") in sltn:</code> isn't detecting it.</p>
<p><strong>* SLTN IS AN ARRAY*</strong></p>
<p>Here is my code: </p>
<pre><code>print (sltn)

if ("0","1","2") in sltn:
     kwd1 = True
</code></pre>
<p>Sorry, but the answers don't seem to have solved my problem :/</p>
<p>Hey, for some reason I do not understand this doesn't complete the loop and mark it as true, I have tested for sltn containing 1, 2 and 3, and none of them are detected.</p>
<pre><code>if any(item in sltn for item in ("0", "1", "2")):
    kwd1 = True
</code></pre>
<p><strong><em>Soloution</em></strong></p>
<p>I had to make it from </p>
<pre><code>("0", "1", "2")
</code></pre>
<p>into</p>
<pre><code>[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>if ("0","1","2") in sltn
</code></pre>
<p>You are trying to check whether the <code>sltn</code> list contains the tuple <code>("0","1","2")</code>, which it does not. (It contains 3 integers)</p>
<p>But you can get it done using <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow">#all()</a> :</p>
<pre><code>sltn = [1, 2, 3] # list
tab = ("1", "2", "3") # tuple

print(all(int(el) in sltn for el in tab)) # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>in</code> keyword is a shorthand for calling an object's <code>__contains__</code> method.</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; 2 in a
True
&gt;&gt;&gt; a.__contains__(2)
True
</code></pre>
<p>Thus, <code>("0","1","2") in [0, 1, 2]</code> asks whether the tuple <code>("0", "1", "2")</code> is <em>contained</em> in the list <code>[0, 1, 2]</code>. The answer to this question if <code>False</code>. To be <code>True</code>, you would have to have a list like this:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, ("0","1","2")]
&gt;&gt;&gt; ("0","1","2") in a
True
</code></pre>
<p>Please also note that the elements of your tuple are strings. You probably want to check whether any or all of the elements in your tuple - <em>after converting these elements to integers</em> - are contained in your list. </p>
<p>To check whether all elements of the tuple (as integers) are contained in the list, use</p>
<pre><code>&gt;&gt;&gt; sltn = [1, 2, 3]
&gt;&gt;&gt; t = ("0", "2", "3")
&gt;&gt;&gt; set(map(int, t)).issubset(sltn)
False
</code></pre>
<p>To check whether any element of the tuple (as integer) is contained in the list, you can use</p>
<pre><code>&gt;&gt;&gt; sltn_set = set(sltn)
&gt;&gt;&gt; any(int(x) in sltn_set for x in t)
True
</code></pre>
<p>and make use of the lazy evaluation <code>any</code> performs.</p>
<p>Of course, if your tuple contains strings for no particular reason, just use<br/><code>(1, 2, 3)</code> and omit the conversion to int.</p>
</div>
<div class="post-text" itemprop="text">
<p>To check whether your sequence contains <em>all</em> of the elements you want to check, you can use a generator comprehension in a call to <code>all</code>:</p>
<pre><code>if all(item in sltn for item in ("0", "1", "2")):
    ...
</code></pre>
<p>If you're fine with either of them being inside the list, you can use <code>any</code> instead:</p>
<pre><code>if any(item in sltn for item in ("0", "1", "2")):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you don't want waste time and iterate through all the data in your list, as widely suggested around here, you can do as follows:</p>
<pre><code>a = ['1', '2', '3']
b = ['4', '3', '5']

test = set(a) &amp; set(b)
if test:
    print('Found it. Here it is: ', test)
</code></pre>
<p>Of course, you can do <code>if set(a) &amp; set(b)</code>. I didn't do that for demonstration purposes. Note that you shouldn't replace <code>&amp;</code> with <code>and</code>. They are two substantially different operators. </p>
<p>The above code displays:</p>
<pre><code>Found it. Here it is:  {'3'}
</code></pre>
</div>
<span class="comment-copy">Needs editing cannot understand</span>
<span class="comment-copy">But <code>("0","1","2")</code> <i>isn't</i> in <code>[0, 1, 2]</code>...</span>
<span class="comment-copy">1. Items being in a list is not the same as the tuple of those items being in the list. 2. strings are not numbers.</span>
<span class="comment-copy"><code>if all(x in sltn for x in ("0","1","2")): </code></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/34468983/in-python-how-to-check-all-elements-in-a-tuple-are-in-another">In Python how to check all elements in a tuple are in another</a></span>
<span class="comment-copy">How do I test if it has those units ? Sorry, I am not very advanced at python.</span>
<span class="comment-copy">to test for every member: <code>inside = True;for i in ("0","1","2"): if(i in sltn): continue;else: inside = False;break;</code></span>
<span class="comment-copy">I'm really surprised that everyone has come up with this solution. Iteration for comparison is not valid. It is a very bad practice. What if there were a million rows in the list? The user should sit and wait for half hour?</span>
<span class="comment-copy">In fact this is the only answer about the <code>in</code> operator. +1.</span>
<span class="comment-copy">You should use <code>issubset</code> or <code>issuperset</code> as show in my answer <a href="http://stackoverflow.com/a/34469004/3100115">here</a> instead of using a for loop. <code>set(map(int, t)).issubset(sltn)</code></span>
<span class="comment-copy">Iteration for comparison is not a valid solution. It would take half an hour if the list contained a million entries!</span>
<span class="comment-copy">@PouriaHadjibagheri and user3100115 you are right, updated.</span>
<span class="comment-copy">@G.Armstrong ... and the result is that none of "0", "1", or "2" is an element of <code>sltn</code> because <code>sltn</code> is a list of the integers 0, 1, and 2  - it does not contain any strings. This answer is correct, but I thought that I'd point that out to the OP in case they try it out and don't get the expected result</span>
<span class="comment-copy">Seriously? You wanna iterate through the entire list every time? That's very inefficient. What if the list contained a million entries?</span>
<span class="comment-copy">Membership tests are linear in lists, correct. If there are a million entries, they should probably use a set instead.</span>
<span class="comment-copy">They should use <code>set</code> in the beginning. It's a bad practice to use iterations for comparison, regardless of the length. Now I understand that people may very well do that, but that doesn't make it right!</span>
