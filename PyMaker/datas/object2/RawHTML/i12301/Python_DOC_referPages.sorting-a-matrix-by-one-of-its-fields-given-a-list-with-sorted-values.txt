<div class="post-text" itemprop="text">
<p>I need to join a list and a matrix using python. </p>
<p>The matrix/2d list holds column definitions - column name and datatype. The data is not ordered by the right column positions. </p>
<p>Example:</p>
<pre><code>(Pdb) colmnAndDatatypeMatrix

[('col_b', 'number') , ('col_a','varchar')]
</code></pre>
<p>The list contains only the column names but it is ordered correctly, which is very important for me. </p>
<p>Example:</p>
<pre><code>(Pdb) colmnList
['col_a', 'col_b']
</code></pre>
<p>What I want to perform:</p>
<p>I want to order the matrix/2d list so it will be ordered exactly like the list. The list and matrix, of course,  hold the names of the same columns. </p>
<p>If it was SQL I would just join the two and query the column names from the list (so that the order is kept) and the type from the joined 2d array. </p>
<p>How can I perform this in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the key param of the standar function sorted (available since Python 2.4):</p>
<pre><code>matrix = [('col_b', 'number') , ('col_a','varchar')]
colmnList = ['col_a', 'col_b']

# Sort the matrix using as creiteria the position of the element in colmnList
sorted_matrix = sorted(matrix, key = lambda item: colmnList.index(item[0]))

print(matrix)
print(sorted_matrix)

&gt;&gt;&gt; [('col_b', 'number'), ('col_a', 'varchar')]
&gt;&gt;&gt; [('col_a', 'varchar'), ('col_b', 'number')]
</code></pre>
<p>Ref: <a href="https://wiki.python.org/moin/HowTo/Sorting#Key_Functions" rel="nofollow">Sorting Mini-HOW TO, Key functions</a></p>
<hr/>
<p>Old answer</p>
<p>Going simple, it might be fancier solutions but this solve your problem for sure, just create another matrix using the <code>colmnList</code>.</p>
<pre><code>matrix = [('col_b', 'number') , ('col_a','varchar')]
colmnList = ['col_a', 'col_b']

ordered_matrix = []

for col_name in colmnList:
    for elem in matrix:
        if elem[0] == col_name:
            ordered_matrix.append(elem)
            break # There is no need to iterate again here.


print(matrix)
print(ordered_matrix)

&gt;&gt;&gt; [('col_b', 'number'), ('col_a', 'varchar')]
&gt;&gt;&gt; [('col_a', 'varchar'), ('col_b', 'number')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a quick workaround using <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDicts</code></a> I would suggest the following:</p>
<pre><code>from collections import OrderedDict

# list of tuples (what you called matrix)
m = [('col_b', 'number') , ('col_a','varchar')]

# list with ordered keys (will be used for sorting)
l = ['col_a', 'col_b']

# create OrderedDict from list `m`
od = OrderedDict(m)

# define a function to order the keys of an OrderedDict by a given list
def sort_by_list(d, l):
    for key in l:
        d.move_to_end(key)

# call function defined above in order to sort keys of OrderedDict `od` by list `l`
sort_by_list(od, l)

# print OrderedDict after we sorted the keys
print(od)

# print sorted list/matrix after sorting using workaround with OrderedDict
sorted = list(od.items())
print(sorted)
</code></pre>
<p>Please keep in mind that this approach works only with Python 3.2 and above and is based on this <a href="https://stackoverflow.com/a/23587175/3991125">answer</a>.</p>
</div>
<span class="comment-copy">Are you using numpy matrices?</span>
<span class="comment-copy">@Daenyth no, just regular python lists</span>
<span class="comment-copy">What criteria you use for ordering the list?</span>
<span class="comment-copy">So, you want to sort the list of tuples based on the list with the given column names?</span>
<span class="comment-copy">Thank you very much! Not very efficient, but surely does the job.</span>
<span class="comment-copy">@golosovsky, take a look again to the answer, I think you realy could use that technique.</span>
<span class="comment-copy">thank you very much!!</span>
<span class="comment-copy">thanks for the answer! The only problem is that I'm using python 2.7</span>
<span class="comment-copy">So you might want to take a look at <a href="http://stackoverflow.com/a/35295081/3991125">this answer</a> below.</span>
