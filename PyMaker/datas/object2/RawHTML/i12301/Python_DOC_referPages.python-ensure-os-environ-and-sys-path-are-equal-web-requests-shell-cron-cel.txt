<div class="post-text" itemprop="text">
<p>I want to ensure that <code>os.environ</code> and <code>sys.path</code> are identical for all ways we start the Python interpreter:</p>
<ul>
<li>web requests via Django, and Apache mod_wsgi</li>
<li>Cron jobs</li>
<li>Interactive logins via ssh</li>
<li>Celery jobs</li>
<li>Jobs started via systemd</li>
</ul>
<p>Is there a common way to solve this?</p>
<p>If yes, great: How does it look like?</p>
<p>If no, sad: Everybody solves this on his own. ... What is a good way to solve this?</p>
<p>Operating System: Linux (with systemd support)</p>
<p><strong>Update</strong></p>
<p>More explicit: </p>
<ol>
<li>I want <code>sys.path</code> to be the same in web requests, cron jobs, python started from shell, ...</li>
<li>I want <code>os.environ</code> to be the same in web requests, cron jobs, python started from shell, ...</li>
</ol>
<p><strong>Update2</strong></p>
<p>For systemd we use <a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=" rel="nofollow noreferrer">EnvironmentFile</a></p>
<p><strong>Update3</strong></p>
<p>We use virtualenv</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pypi.python.org/pypi/envdir">envdir</a> python port (<a href="http://cr.yp.to/daemontools/envdir.html">here is the original</a>) for managing the environment variables. </p>
<p>If you are <strong>only</strong> concerned about <strong>Django</strong>, I suggest using envdir from your <code>settings.py</code> programmatically</p>
<p>You can update the environment programmatically (e.g.: in the wsgi file, django's <code>manage.py</code>, <code>settings.py</code>, etc.)</p>
<pre><code>import envdir
import os

# print os.environ['FOO']  # would raise a KeyError

path = '../envdir/prod'
if not os.path.isdir(path):
    raise ValueError('%s is not a dir' % path)
envdir.Env(path)
print os.environ['FOO']
</code></pre>
<p>or you can run the your process through <code>envdir</code> on the command line, e.g.: <code>envdir envs/prod/ python manage.py runserver</code></p>
<p>I suggest creating aliases for python, pip, etc. (as you don't want to overwrite the system's own python), e.g.: <code>alias python-mycorp="envdir /abs/path/to/envs/prod/ python"</code> (or if you prefer, write a full shell script instead of an alias).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>This mapping is captured the first time the os module is imported,
  typically during Python startup as part of processing site.py. Changes
  to the environment made after this time are not reflected in
  os.environ, except for changes made by modifying os.environ directly.</p>
</blockquote>
<p>They all have to use the same interpreter. If they launch by the same user, they probably are.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you can see in the documentation of <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow">sys.path</a>, it is initialized with the environment variable <code>PYTHONPATH</code> and then with an installation dependent default (<a href="https://docs.python.org/3/library/site.html#module-site" rel="nofollow">site</a>). So, they are intended to be different.</p>
<p>But, you can use the <code>-S</code> option during the interpreter invocation: <code>python -S script.py</code> in order to skip some site specific configuration hook. Nevertheless, you will still have the standard library stuff in your  <code>sys.path</code>.</p>
<p>If you really really want <code>os.path['PYTHONPATH'] == sys.path</code>, you should do it explicitly, as the documentation says:</p>
<blockquote>
<p>A program is free to modify this list for its own purposes</p>
</blockquote>
<p>The standard places to put those kind of specific manipulations are:</p>
<ul>
<li>A <code>sitecustomize</code> module, typically created by a system administrator in the site-packages directory, which can do arbitrary configurations.</li>
<li>A <code>usercustomize</code> module, which intention is the same as <code>sitecustomize</code> but only executed if <code>ENABLE_USER_SITE</code> is true.</li>
<li>Customization to the <code>sys.path</code> directly from the script. I.e: <code>sys.path = os.env['PYTHONPATH']</code>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to assume you meant <em>os.environ['PYTHONPATH'] == sys.path</em> , because otherwise I can't understand the question. 
Anyway, the solution would be to use virtualenvs. </p>
<ol>
<li>Setup a virtualenv</li>
<li>Edit the /bin/activate and add entry PYTHONPATH=your-sys-path.</li>
<li>Make sure your mod_wsgi, celery, cron jobs and shell login(bash_login?) all activate the virtualenv when they are started and use the virtualenv/bin/python for execution.</li>
</ol>
<p>Done. </p>
</div>
<span class="comment-copy">Windows or Linux?</span>
<span class="comment-copy">@Keith I updated the question:</span>
<span class="comment-copy">You should fix the question, as @Software Mechanic mention: "I'm going to assume you meant os.environ['PYTHONPATH'] == sys.path".</span>
<span class="comment-copy">@jgomo3 I updated the question. I want sys.path <i>and</i> os.environ to be identical. Sorry os.environ['PYTHONPATH'] == sys.path was not on my mind.</span>
<span class="comment-copy">@guettli Why do you want these to be the same? This sounds like an attempt to solve another problem, perhaps you're having "ImportError"s or "File Not Found"-type errors from the various ways your programs are started? <i>Many</i> of those issues can be solved by using a common virtual environment for your program.</span>
<span class="comment-copy">I have not heard of <code>envdir</code> before. This solves the <code>os.environ</code> part of the question. Thank you very much.</span>
<span class="comment-copy">I think the <code>sys.path</code> part could be solved by <code>envdir</code> as well by setting the <code>PYTHONPATH</code> environment variable. But I think <code>virtualenv</code> is the tool for handling it cleanly.</span>
<span class="comment-copy">I guess the original docs from "D. J. Bernstein" were written for math-freaks, not human beings :-)</span>
<span class="comment-copy">For systemd we use EnvironmentFile <a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile=" rel="nofollow noreferrer">freedesktop.org/software/systemd/man/…</a> A directory and a file for each env-var could be better. But maybe to much in our context.</span>
<span class="comment-copy">I quote: "If they launch by the same user, they probably are.". No, sorry. They are not all equal. They are very different.</span>
<span class="comment-copy">Running python by the same user, on another shell, will invoke a different interpreter?</span>
<span class="comment-copy">The interpreter is the same, but <code>os.environ</code> and <code>sys.path</code> are different.</span>
<span class="comment-copy">The home directory will be the same. I use a .pth file in dist-packages, which is also available to all. So everything may not be identical, but the variables that I want to use are available and identical.</span>
<span class="comment-copy">We run virtualenvs, and still sys.path is different.</span>
<span class="comment-copy">Do you have the PYTHONPATH variable set in activate script of the virtualenv??</span>
<span class="comment-copy">@SoftwareMechanic5 For the wsgi part of the question: We activate the virtualenv according to the docs: <a href="http://modwsgi.readthedocs.org/en/develop/user-guides/virtual-environments.html" rel="nofollow noreferrer">modwsgi.readthedocs.org/en/develop/user-guides/…</a> IIRC the active script does not get executed.</span>
<span class="comment-copy">@guettli: For the wsgi part, perhaps, you could try this. <a href="https://gist.github.com/GrahamDumpleton/b380652b768e81a7f60c" rel="nofollow noreferrer">gist.github.com/GrahamDumpleton/b380652b768e81a7f60c</a></span>
