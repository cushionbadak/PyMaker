<div class="post-text" itemprop="text">
<p>I found the below code from a website while practicing basic python scripting. From the below code I was able to understand the class and instance and first print statement.</p>
<p>But I do not understand the concept used behind second and third print statement. How can an instance(in the below code <code>polly</code>) can be passed as an argument to a class's method? Is there any option in python that we can pass this like that?.</p>
<pre><code>class Pet(object):

    def __init__(self, name, species):
        self.name = name
        self.species = species

    def getName(self):
        return self.name

    def getSpecies(self):
        return self.species

    def __str__(self):
        return "%s is a %s" % (self.name, self.species)

polly = Pet("Polly", "Parrot")

print "Polly is a %s" % polly.getSpecies()
Polly is a Parrot

print "Polly is a %s" % Pet.getSpecies(polly)
Polly is a Parrot

print "Polly is a %s" % Pet.getSpecies()
Traceback (most recent call last):
  File "", line 1, in
  TypeError: unbound method getSpecies() must be called with Pet instance as first argument (got nothing instead)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In fact, <code>instance.instance_method()</code> will turn into <code>TheClass.instance_method(instance)</code> internally, the <code>self</code> refers to the instance itself. so the first and the second versions are equals to each other.</p>
<p>a simple example:</p>
<pre><code>def getSpeciesGlobal(some_object):  # a normal function
    return some_object.species

polly = Pet("Polly", "Parrot")
polly.species   # "Parrot"
getSpeciesGlobal(polly)   # "Parrot"
# if we assign this function to the class.
Pet.getSpeciesGlobal = getSpeciesGlobal
Pet.getSpeciesGlobal(polly)  # "Parrot"

# the original way in your question
polly.getSpecies()  # "Parrot"
Pet.getSpecies(polly)   # "Parrot"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, a class can be treated as a bag of properties. See below:</p>
<pre><code>&gt;&gt;&gt; class Stuff:
...     pi = 3.14
...     def foo(x, y):
...         return x + y
...     bar = lambda s: s * 2
...
&gt;&gt;&gt; Stuff.bar(4)
8
&gt;&gt;&gt; Stuff.foo(5,6)
11
&gt;&gt;&gt; Stuff.pi
3.14
</code></pre>
<p>In this example, <code>Stuff</code> is just a bunch of random objects. So <code>Stuff.bar</code> refers to the actual function <code>bar</code>. Instances of a class have a different behaviour: When a function is accessed, it automatically gets converted to a bound method. This means that the instance is automatically passed as the first argument.</p>
<p>When you call <code>Pet.getSpecies(polly)</code>, <code>polly</code> will be passed in as the <code>self</code> parameter. There's no magic to <code>self</code>, it's just another parameter. The magic is when you access <code>polly.getSpecies</code> and get a <code>&lt;bound method Polly.getSpecies of &lt;__main__.Polly object at 0x7f946cd14b38&gt;</code> instead of a <code>&lt;function Polly.getSpecies at 0x7f946cd1e048&gt;</code>.</p>
<p>There's also the <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow"><code>@classmethod</code></a> decorator, which receives the class as the first argument instead of the instance, as well as making code easier to understand by clearly delimiting class methods and instance methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the second print statement, polly is passed as the self argument to the class method. This happened implicitly in the first print statement. 
On the third print, the class method is called, but there is no actual object with data to act on. </p>
</div>
<span class="comment-copy">Very short: look at <code>self</code>. In the first case, <code>self</code> is implicitly send to <code>getSpecies</code> as the first argument, since <code>getSpecies</code> is called on the instance. <code>self</code> in that case is an instance of <code>Pet</code>, namely <code>polly</code>. In the second case, <code>self</code> is explicitly given as the argument to <code>getSpecies</code>, since the method is not called on a instance but on the class. And that <code>self</code> argument happens to be <code>polly</code>.</span>
<span class="comment-copy">The code in question is Python 2 specific, the behaviour was slightly changed in Python 3 for the 3rd statement; there is no requirement that the unbound method be called with Pet instance specifically.</span>
