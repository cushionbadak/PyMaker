<div class="post-text" itemprop="text">
<p>I am trying to code a word-count program in python. For this, I am using dictionary to store count of the words.</p>
<p>Dictionary is of the format d[int] = [array of words].</p>
<p>Upon adding a word, if word is already present in dict,it removes the word and appends to next key.</p>
<p>Upon executing d[index].append(word), it somehow gets added as a new key. Am I doing something wrong? I am using python 3.4.3 and 2.7.9 on Ubuntu.</p>
<pre><code>def count_words(s, n):
    d = {}
    d[1] = []
    word_array = []
    for word in s.split():
        if word not in word_array:
            d[1].append(word)
            word_array.append(word)
        else:
            keys = list(d.keys())
            for key in keys:
                if word in d[key]:
                    index = key+1
                    d[key].remove(word)
                    if index in d.keys():
                        print ('appending %s at %d on %s' % (word, index, d[index]))
                        d[index].append(word)
                        #print d[index]
                    else:
                        d[index] = list([word])
            print ('%s -&gt; %s' % (word, d))
    print (d)

def test_run():
    """Test count_words() with some inputs."""
    count_words("cat bat mat cat bat cat", 3)
    #print count_words("betty bought a bit of butter but the butter was bitter", 3)
    #print count_words('london bridge is falling down falling down falling down london bridge is falling down my fair lady', 5)

if __name__ == '__main__':
    test_run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem in your code is that you do not break loop</p>
<pre><code>for key in keys:
    if word in d[key]:
        code that removes word from d[key] and inserts it into d[key+1] list
</code></pre>
<p>On certain point of execution dictionary <code>d</code> has following content</p>
<pre><code>{1: ['bat', 'mat'], 2: ['cat']}
</code></pre>
<p>Next word in the sentence is <code>bat</code> so your code does this:</p>
<ol>
<li><p>on the first iteration of the loop it finds <code>bat</code> in <code>d[1]</code>, removes it from there and appends the word into <code>d[2]</code> list (at this point dictionary has proper content);</p></li>
<li><p>on the second iterations it finds <code>bat</code> in <code>d[2]</code> and proceeds with its removal and creation of a new list in <code>d[3]</code>.</p></li>
</ol>
<p>You need to break the loop once you have appended <code>word</code> into <code>d[index]</code></p>
<p>See <a href="http://ideone.com/sROy6m" rel="nofollow">http://ideone.com/sROy6m</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It took me a while to realize what kind of datastructure you're using. It would be more efficient to reverse the order, and use the <code>collections.Counter</code> to count the words; should you need the reverse structure (aka words by count), you can build it later:</p>
<pre><code>from collections import Counter, defaultdict

def words_by_count(s):
    word_counts = Counter(s.split())
    by_count = defaultdict(list)
    for word, count in word_counts.items():
        by_count[count].append(word)

    return by_count

print(words_by_count('cat bat mat cat bat cat'))
</code></pre>
<p>prints:</p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {1: ['mat'], 2: ['bat'], 3: ['cat']})
</code></pre>
</div>
<span class="comment-copy">Btw, 4 space indentations would make the code more readable; <code>index in d.keys()</code> -&gt; <code>index in d</code>, <code>list([word])</code> -&gt; <code>[word]</code></span>
<span class="comment-copy">You might take a look at <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>s.</span>
<span class="comment-copy">There are far better ways to solve this. However, it was just a throwaway code I created to check for something. My question is that is it a bug or programming issue?</span>
<span class="comment-copy">I agree, it was just a throwaway code I created to check for something. However, my question is that is it a bug or programming issue?</span>
