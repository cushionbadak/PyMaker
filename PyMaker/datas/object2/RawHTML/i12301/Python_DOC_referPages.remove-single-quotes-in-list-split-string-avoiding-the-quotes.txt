<div class="post-text" itemprop="text">
<p>Is it possible to split a string and to avoid the quotes(single)? </p>
<p>I would like to remove the single quotes from a list(keep the list, strings and floats inside:</p>
<pre><code>l=['1','2','3','4.5']
</code></pre>
<p>desired output:</p>
<pre><code>l=[1, 2, 3, 4.5]
</code></pre>
<p>next line works neither with int nor float</p>
<pre><code>l=[float(value) for value in ll]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get <code>int</code> or <code>float</code> based on what each value looks like, so <code>'1'</code> becomes <code>1</code> and <code>"1.2"</code> becomes <code>1.2</code>, you can <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow">use <code>ast.literal_eval</code></a> to convert the same way Python's literal parser does, so you have an actual <code>list</code> of <code>int</code>s and <code>float</code>s, rather than a <code>list</code> of <code>str</code> (that would include the quotes when echoed):</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; [ast.literal_eval(x) for x in l]
[1, 2, 3, 4.5]
</code></pre>
<p>Unlike plain <code>eval</code>, this doesn't open security holes since it can't execute arbitrary code.</p>
<p>You could use <code>map</code> for a mild performance boost here (since <code>ast.literal_eval</code> is a built-in implemented in C; normally, <code>map</code> gains little or loses out to list comprehensions), in Py 2, <code>map(ast.literal_eval, l)</code> or in Py3 (where <code>map</code> returns a generator, not a <code>list</code>), <code>list(map(ast.literal_eval, l))</code></p>
<p>If the goal is purely to display the strings without quotes, you'd just format manually and avoid type conversions entirely:</p>
<pre><code>&gt;&gt;&gt; print('[{}]'.format(', '.join(l)))
[1, 2, 3, 4.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The quotes are not part of the strings in your list, so it is not possible to remove them. The output is displaying quotes around the elements of your list to indicate that you are dealing with strings.</p>
<p>You can convert all items in your list <code>['1','2','3','4.5']</code> to floats with</p>
<pre><code>&gt;&gt;&gt; l = ['1','2','3','4.5']
&gt;&gt;&gt; [float(x) for x in l]
[1.0, 2.0, 3.0, 4.5]
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; map(float, l)
[1.0, 2.0, 3.0, 4.5]
</code></pre>
<p>However, this is not "removing the quotes" from the items of your list, it is converting your list of strings to a list of floats. When printed, the floats are not displayed with quotes around them because they are not strings.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>['1','2','3','4.5']

print([int(i) if float(i) % 1 == 0 else float(i) for i in l])

&gt;&gt;&gt; [1, 2, 3, 4, 4.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason your next line doesn't work is because you have an <code>ll</code> instead of an <code>l</code></p>
</div>
<span class="comment-copy"><code>ll</code> ... a typo?</span>
<span class="comment-copy">Why not <code>[int(i) if float(i) % 1 == 0 else float(i) for i in l]</code>?</span>
<span class="comment-copy">i is already of the type <code>float</code> there is no need of calling float on it again</span>
<span class="comment-copy">@danibee I mean, getting rid of the first list comprehension and doing it all in one go.</span>
<span class="comment-copy">edited....thanks</span>
<span class="comment-copy">You could actually answer with a solution rather than point out a typo</span>
<span class="comment-copy">My bad. Your solution is correct (as you can see from the other answers), so I assumed the typo was unnoticed and causing a bug.</span>
<span class="comment-copy">@Prune Actually, this does answer the question. The OP is trying to convert a list of strings (<code>l</code>) into a list of floats using a list-comprehension. The list of strings was <code>l</code>, but the OP accidentally used <code>ll</code> instead.</span>
<span class="comment-copy">Thanks; my problem, then, is with the question, not the answer.  Thanks.  Objection deleted.</span>
