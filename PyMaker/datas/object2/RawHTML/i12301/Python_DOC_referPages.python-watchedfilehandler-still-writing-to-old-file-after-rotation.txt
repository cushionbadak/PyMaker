<div class="post-text" itemprop="text">
<p>I've been using <a href="https://docs.python.org/3/library/logging.handlers.html#watchedfilehandler" rel="nofollow">WatchedFileHandler</a> as my python logging file handler, so that I can rotate my logs with <code>logrotate</code> (on ubuntu 14.04), which you know is what the docs say its for. My <code>logrotate</code> config files looks like</p>
<pre><code>/path_to_logs/*.log {
        daily
        rotate 365
        size 10M
        compress
        delaycompress
        missingok
        notifempty
        su root root
}
</code></pre>
<p>Everything seemed to be working just fine. I'm using logstash to ship my logs to my elasticsearch cluster and everything is great. I added a second log file for my debug logs which gets rotated but is not watched by logstash. I noticed that when that file is rotated, python just keeps writing to <code>/path_to_debug_logs/*.log.1</code> and never starts writting to the new file. If I manually tail <code>/path_to_debug_logs/*.log.1</code>, it switches over instantly  and starts writing to <code>/path_to_debug_logs/*.log</code>.</p>
<p>This seems REALLY weird to me.</p>
<p>I believe what is happening is that logstash is always tailing my non-debug logs, which some how triggers the switch over to the new file after <code>logrotate</code> is called. If <code>logrotate</code> is called twice without a switch over, the log.1 file gets moved and compressed to log.2.gz, which python can no longer log to and logs are lost.</p>
<p>Clearly there are a bunch of hacky solutions to this (such as a cronjob that tails all my logs every now and then), but I feel like I must be doing something wrong.</p>
<p>I'm using <code>WatchedFileHandler</code> and <code>logrotate</code> instead of <code>RotatingFileHandler</code> for a number of reasons, but mainly because it will nicely compress my logs for me after rotation.</p>
<p>UPDATE:</p>
<p>I tried the horrible hack of adding a manual tail to the end of my log rotation config script.</p>
<pre><code>sharedscripts
postrotate
    /usr/bin/tail -n 1 path_to_logs/*.log.1
endscript
</code></pre>
<p>Sure enough this works most of the time, but randomly fails sometimes for no clear reason, so isn't a solution. I've also tried a number of less hacky solutions where I've modified the way <code>WatchFileHandler</code> checks if the file has changed, but no luck.</p>
<p>I'm fairly sure the root of my problem is that the logs are stored on a network drive, which is somehow confusing the file system.</p>
<p>I'm moving my rotation to python with <code>RotatingFileHandler</code>, but if anyone knows the proper way to handle this I'd love to know.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>copytruncate</code> option of logrotate. From <a href="http://www.linuxcommand.org/man_pages/logrotate8.html" rel="nofollow">docs</a></p>
<blockquote>
<p>copytruncate</p>
<p>Truncate  the  original log file in place after creating a copy, instead of moving the old log file and optionally creating a new one,  It  can be used when some program can not be told to close its logfile and thus might continue writing (appending)  to  the previous log file forever.  Note that there is a very small time slice between copying the file and truncating it, so  some  logging  data  might be lost.  When this option is used, the create option will have no effect, as the old log file stays in  place.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>WatchedFileHandler</code> does a rollover when a device and/or inode change is detected in the log file just before writing to it. Perhaps the file which isn't being watched by <code>logstash</code> doesn't see a change in its device/inode? That would explain why the handler keeps on writing to it.</p>
</div>
<span class="comment-copy">I've tried copytruncate before, it ends very badly. While it does cause the new file creation, it causes a really weird python error, where the old log file is full blank space, which shows up as  "\u0000\u0000\u0000..." in logstash, then new log messages are appended to the end. This also has the fun property that your new log file starts with the exact same size as your old one, its just full of nothing.</span>
<span class="comment-copy">Strange, I have used copytruncate with many of python utilities, like python scripts, supervisord, django etc and never faced such issue. When file is truncated its size is set to 0 for me.</span>
<span class="comment-copy">What os are are you running on, maybe its an ubuntu specific problem?</span>
<span class="comment-copy">I have used it with Ubuntu server 12.04 and 14.04.</span>
<span class="comment-copy">Weird. Currently my logs are stored on a network drive and mounted over samba, so maybe that is the difference. I've also had problems with copy truncate on AWS with logs on EBS volumes.</span>
