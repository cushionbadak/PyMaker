<div class="post-text" itemprop="text">
<p>I need to quickly hash a dictionary (a counter), and I’m noticing that python seems to order dictionaries with the same keys in the same order, even if they are constructed differently. In fact the dictionaries seem to be able to survive quite a bit of abuse:</p>
<pre><code>&gt;&gt;&gt; D = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; list(D)
['b', 'c', 'a']
&gt;&gt;&gt; list(D)
['b', 'c', 'a']
&gt;&gt;&gt; list(D)
['b', 'c', 'a']
&gt;&gt;&gt; list(D)
['b', 'c', 'a']
&gt;&gt;&gt; E = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; list(E)
['b', 'c', 'a']
&gt;&gt;&gt; list(E)
['b', 'c', 'a']
&gt;&gt;&gt; list(E)
['b', 'c', 'a']
&gt;&gt;&gt; F = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; G = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
&gt;&gt;&gt; list(G)
['b', 'c', 'a', 'd']
&gt;&gt;&gt; list(G)
['b', 'c', 'a', 'd']
&gt;&gt;&gt; list(G)
['b', 'c', 'a', 'd']
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; F.pop('a')
1
&gt;&gt;&gt; list(F)
['b', 'c']
&gt;&gt;&gt; F['a'] = 2
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; list(F)
['b', 'c', 'a']
&gt;&gt;&gt; H = {'b': 2, 'a': 1, 'c': 3}
&gt;&gt;&gt; list(H)
['b', 'c', 'a']
&gt;&gt;&gt; H = {'b': 2, 'c': 1, 'a': 3}
&gt;&gt;&gt; list(H)
['b', 'c', 'a']
&gt;&gt;&gt; K = {'b': 2, 'c': 1, 'a': 3, 'd': 4}
&gt;&gt;&gt; list(K)
['b', 'c', 'a', 'd']
&gt;&gt;&gt; K = {'b': 2, 'c': 1, 'd': 3, 'a': 4}
&gt;&gt;&gt; list(K)
['b', 'c', 'a', 'd']
</code></pre>
<p>My question is then, if my dictionaries have the same keys and the same values, can I count on the keys being in the same order, at least for the lifetime of that running instance of python?
Note that I’m aware python is a bit incomprehensible in how it decides to order a dictionary, but I want to know if given the same inputs, the same instance of python will return the same key ordering each time.</p>
</div>
<div class="post-text" itemprop="text">
<p>In terms of the language definition, no you cannot rely on stable ordering, because it is not promised in the language definition. </p>
<p>Now, it might be that over the short- and medium-term you will find that this ordering is stable, and this makes sense: computers are deterministic, so it's reasonable to expect the same results from one iteration of the experiment to the next. (however, since they are complex systems, this nondeterministic machine might still produce unexpected results, since you don't know the factors that are determinant) However, this reasoning does not extend to the long-term, which is what you should be programming to, because the language implementation is free to choose any means of ordering those keys that it likes, and to change that choice at any time, as long as the implementation is consistent with the language definition. This means that programs depending on some order remaining stable are subject to breakage if run under different implementations, and they are subject to breakage when the implementation is updated. 
This is not a place you want to be, therefore you should not make any assumptions about the stability of ordering of dictionary keys.</p>
<p>That being said, if you are <em>only</em> concerned about stability <em>just across the lifetime of one running instance of python</em> then this seems like a safe gamble - again, computers are deterministic - but still a gamble. Test carefully against cases rather more complex than the ones you're expecting to encounter, and then decide whether that chopping block looks like a comfortable place to rest your neck. </p>
</div>
<div class="post-text" itemprop="text">
<p>Regular python dicts are not ordered. It is never guaranteed that when you get the list of keys that they will be the order you expect them to be.</p>
<p>If you want to preserve order, use an ordered dict.</p>
<p><a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">https://docs.python.org/2/library/collections.html#collections.OrderedDict</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>if my dictionaries have the same keys and the same values, can I count on the keys being in the same order</p>
</blockquote>
<p>No.</p>
<pre><code>&gt;&gt;&gt; list({'d': 0, 'l': 0})
['d', 'l']

&gt;&gt;&gt; list({'l': 0, 'd': 0})
['l', 'd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given that nobody mentioned this yet, I'll tell you that hash randomization is <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow">enabled by default since Python 3.3</a>.</p>
<p>With hash randomization, the result of <code>hash('abc')</code> is different between each Python run. Because hashes are at the base of dictionaries (they are used to determine the location of the item in the internal array used by <code>dict</code>), there are even fewer guarantees about ordering.</p>
<pre><code>$ python3.5
&gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; list(d)
['a', 'c', 'b']
&gt;&gt;&gt; list(d)
['a', 'c', 'b']

$ python3.5
# new process, new random seed, new ordering
&gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; list(d)
['c', 'a', 'b']
&gt;&gt;&gt; list(d)
['c', 'a', 'b']
</code></pre>
</div>
<span class="comment-copy">Non python specific note: when hash table grows or shrinks it may re-balance buckets and hence change order if items - you may want to experiment with adding/removing items to see if order suddenly change...</span>
<span class="comment-copy">Not reliable. Please dont rely on</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/15479928/why-is-the-order-in-python-dictionaries-and-sets-arbitrary">Why is the order in Python dictionaries and sets arbitrary?</a></span>
<span class="comment-copy">"to change that choice at any time", correct. Important to note here is that the language does not do this because it hates you, but because an unstable ordering is much faster and much more difficult to attack.</span>
<span class="comment-copy">the reason I am considering this is because it it not the end of the world if the key order changes, the program just takes a performance hit because an expensive calculation must be done twice (since it won’t realize it has already been done). But skipping the sorted() step in <code>''.join(k + str(v) for k, v in sorted(D.items(), key = lambda k: k[0]))</code> yields a big savings in performance on the part of the code that fetches the cached values</span>
<span class="comment-copy">That sounds reasonable, and even interesting, but is there any reason you're not considering the use of OrderedDict to ensure consistency?</span>
<span class="comment-copy">What do you mean it broke?</span>
<span class="comment-copy"><code>list({'a': 0, 'e': 0})</code> → <code>['a', 'e']</code>; <code>list({'e': 0, 'a': 0})</code> → <code>['a', 'e']</code> for me. "Python 2.7.11 (default, Jan 11 2016, 21:04:40)"</span>
<span class="comment-copy">I guess we can't even rely on the unreliability :-P. How about the new letters? I checked both Python 2 and 3 this time. Interestingly it's the <i>only</i> pair for me that "works" in both versions.</span>
<span class="comment-copy">[d,l] [l,d] yeah this example works for me, proving that order can be affected when you construct differently; hopes of original poster dashed.</span>
