<div class="post-text" itemprop="text">
<p>I'm using python 3.5.1 and running my file through command prompt on windows. The arguments are being passed after the program is run; ie the program prompts for input based on a previously generated list.</p>
<p>I'm looking to read in multiple numbers on the same line separated by spaces.  Python 2.X it wouldn't have been an issue with raw_input but this is proving to be a challenge.</p>
<pre><code>selection = list(map(int,input("Enter items to archive (1 2 etc):").split(",")))
</code></pre>
<p>If I enter two different numbers on the same line:</p>
<blockquote>
<p>Enter items to archive (1 2 etc):29 30  Traceback (most recent call
  last):   File "G:\Learning\Python\need_to_watch.py", line 15, in
  
       selection = list(map(int,input("Enter items to archive (1 2 etc):").split(",")))   File "", line 1
       29 30
           ^ SyntaxError: unexpected EOF while parsing</p>
</blockquote>
<p>I gave up on a single line and tried just doing it in a loop but I get a different error</p>
<pre><code>data=[]
while True:
        entry = int(input('Item number : '))
        data.append(entry)
        if entry == 'q':
            break
</code></pre>
<p>It tries to evaluate 'q' as a variable even though I haven't eval()'d anything.</p>
<p>This question says to just use input().split() but it would appear that this no longer works....
<a href="https://stackoverflow.com/questions/11404946/accepting-multiple-user-inputs-seperated-by-a-space-in-python-and-append-them-to">accepting multiple user inputs separated by a space in python and append them to a list</a></p>
<p>I could try and catch the EOF exception, but that doesn't seem like the right way to do it, nor should it be necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to pass arguments to a python script, you may want to take a look at argparse instead: <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">https://docs.python.org/3/library/argparse.html</a></p>
<pre><code>import argparse

parser = argparse.ArgumentParser() 
parser.add_argument('integers', type=int, nargs='+')

args = parser.parse_args()
print(args.integers)

python script.py 1 2 3 4
[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>entry = input('Enter items: ')
entry = entry.split(' ')
entry = list(map(int, entry))
print(entry)
</code></pre>
<p>Or more concisely:</p>
<pre><code>entry = list(map(int, input('Enter items: ').split(' ')))
print(entry)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You try to evaluate everything as an <code>int</code> which is obviously not going to work. Try this instead:</p>
<pre><code>data = []

while True:
    entry = input('Item number : ')
    if entry == 'q':
        break

    try:
        data.append(int(entry))
    except:
        print("Not a valid number")
</code></pre>
</div>
<span class="comment-copy">I'm passing the arguments inside the program.  It scans a directory for files matching specifics and prints them all out 1-###.  Then it prompts for the user to input which numbers to perform an action too.  In the example, I wanted to tell the program to do something with entries 29 and 30.</span>
<span class="comment-copy">This is the common answer that everyone recommends and I have already tried it (see OP).  After entering two numbers, it gives me: "SyntaxError: unexpected EOF while parsing"  This works if I use the interpreter, but not if I run it from a .py file.</span>
<span class="comment-copy">What exactly is the input that is not working for you?</span>
<span class="comment-copy">If I type in "1 2" without quotes, I get an EOF error.  If I type in "1 2 3" without quotes I get an invalid syntax error.  It just doesn't like spaces when not run in an interpreter.</span>
<span class="comment-copy">I am running it with <code>python filename.py</code> from the console and it works with the given input.</span>
<span class="comment-copy">Throwing "python" in front of the filename has it work now too.  It was using 2.7's interpreter not the 3.5.  Thanks!</span>
<span class="comment-copy">Instead of <code>try/except</code>, you can use <code>isdigit()</code>. <code>if entry.is_digit(): data.append(q)</code> <code>elif entry == 'q': break</code></span>
