<div class="post-text" itemprop="text">
<p>In free-form languages, sometimes I use indentation to represent some implicit structure in my statements. In the following example, I'm just doing a sequence of <code>prints</code> but the indentation indicates that the first and fourth print statements are "bracketing" the two in the middle.</p>
<pre><code>print("&lt;div&gt;")
  print("hello")
  print("world")
print("&lt;/div&gt;")
</code></pre>
<p>Is there a way to do something similar in Python without triggering an <code>IndentationError: unexpected indent</code>?</p>
<p>So far, the best I could think is to use a vacuous <code>if</code> statement to introduce a new indentation level.</p>
<pre><code>print("&lt;div&gt;")
if True:
  print("hello")
  print("world")
print("&lt;/div&gt;")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I, too, remember sometimes wanting such structure. This is what comes to mind (in C code that allows this mis-indentation):</p>
<pre><code>glBegin(GL_TRIANGLES);
    drawVertices();
glEnd();
</code></pre>
<p>Note that we have a <code>begin</code> and an <code>end</code>, and from here on I'm going to assume that the same happens in your case: you want to denote the beginning and ending of something. Another situation would be opening and closing a file, or even the example in your question. Python has a specific feature for this: <a href="https://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for">context managers</a>. Python's documentation even has an <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer">example</a> with exactly this:</p>
<blockquote>
<p>(this is not recommended as a real way of generating HTML!):</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def tag(name):
    print("&lt;%s&gt;" % name)
    yield
    print("&lt;/%s&gt;" % name)

&gt;&gt;&gt; with tag("h1"):
...    print("foo")
...
&lt;h1&gt;
foo
&lt;/h1&gt;
</code></pre>
</blockquote>
<p>I have to mention that context managers aren't simply a way to restructure your code, they can actually act on exceptions raised from the enclosed code, and execute some code regardless of the exception (e.g. to ensure that a file is closed). With the simple examples using <code>@contextmanager</code> this does not happen because its default behavior is to simply re-raise the exception so no surprises happen.</p>
<hr/>
<p>Other than this, the people you work with will not be happy about the false indentation. If you insist on it, sure, <code>if True</code> is an option.</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, no, indentation is significant in Python.</p>
<p>Some alternatives that you can use are comments and line spacing:</p>
<pre><code>print("start")

print("middle1")
print("middle2")

print("end")
</code></pre>
<p>or</p>
<pre><code># Header
print("start")
# Middle
print("middle1")
print("middle2")
# End
print("end")
</code></pre>
<p>You could also consider breaking your code up into sub-functions, if it makes sense to do so.</p>
<pre><code>def printMiddle():
    print("middle1")
    print("middle2")

print("start")
printMiddle()
print("end")
</code></pre>
<hr/>
<p>However, for the specific use-case of generating nested output (like HTML), I'd suggest using a templating library instead; writing raw HTML via string manipulation can lead to both hassle and bugs (especially when things like escaping of values is involved).</p>
</div>
<span class="comment-copy">I am a bit confused on why you would like to add nesting to your code. I do not think the added indents on the two prints improves the readability. Also this seems to be against the style-code defined in the PEP and python programmers are obsessed about the style-code.</span>
<span class="comment-copy">Well, you can, same as you can write a code in C++ that would not compile. Syntax errors are syntax errors - and in Python indentation IS a part of syntax.</span>
<span class="comment-copy">I want to add nesting because if I print everything flat then there is no way to see the actual structure behind the print statements. Maybe there is a nice way to use an <code>with</code> statement to surround a code block with an a pair of implicit prints? I just noticed that the "bracketing" prints are always the same</span>
<span class="comment-copy">While it doesn't address your question, using template files would be an option. They are basically HTML stripped off the variable parts. Loading them as HTML even gives you syntax highlighting then.</span>
<span class="comment-copy">@UlrichEckhardt: the HTML was just an example. My real question is more general (<a href="http://stackoverflow.com/a/35356921/90511">the answer I accepted</a> has an opengl example that I think better illustrates the problem)</span>
<span class="comment-copy">Thanks! I didn't know it was so easy to build my own context manager.</span>
