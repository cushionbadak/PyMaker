<div class="post-text" itemprop="text">
<p>I'm new to Python and I'm currently solving questions to improve my coding skills. I had come across a questions where I need to find common elements from 3 <code>Lists</code> in python and print the number of common elements. </p>
<p>My code and procedure below:</p>
<pre><code>print "Enter n: "
n = raw_input()
print "Enter the values: "
nlist = map(int, raw_input().split())
print "Enter m: "
m = raw_input()
print "Enter the values: "
mlist = map(int, raw_input().split())
print "Enter k: "
k = raw_input()
print "Enter the values: "
klist = map(int, raw_input().split())
plist = []
qlist = []

for x in range(0,int(n)):
    for y in range(0,int(m)):
        if (nlist[x]==mlist[y]):
            plist.append(nlist[x])

for z in range(0,int(k)):
    for u in range(0,len(plist)):
        if (klist[z]==plist[u]):
            qlist.append(klist[z])

print len(qlist)
</code></pre>
<p>First, I found the common elements from the first two <code>Lists - nlist and mlist</code> and stored them in a new <code>List - plist</code> and then took the third <code>List - klist</code> and found the common elements in the <code>Lists - plist and klist</code> and added them into a new <code>List - qlist</code> and found the length of the final <code>List</code>. I was thinking what if the length of the <code>Lists</code> are very high, say 4000 and two <code>for</code> loops running for 4000 iterations is time consuming as per my understanding. So how can one opitimize such questions and what is a better way to solve these type of questions and what methods can be used to improve the code with better performance and produce output in less time. Please help me in understanding this. Thanks in advance. Your help is much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow">set.intersection</a>:</p>
<pre><code>&gt;&gt;&gt; nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; mlist = [1, 3, 5, 7, 9]
&gt;&gt;&gt; klist = [1, 4, 7, 10]
&gt;&gt;&gt; set(nlist).intersection(mlist)
{1, 3, 5, 9, 7}
&gt;&gt;&gt; set(nlist).intersection(mlist).intersection(klist)
{1, 7}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you store lists as sets, they lose their order but have much faster lookups, so that'd work in this case. Then you can just use list comprehension to check if any value is in all 3 of them. Alternatively you can use set intersection to find the values in each, which may possibly be faster.</p>
<pre><code>nlist = set(nlist)
mlist = set(mlist)
klist = set(klist)

way1 = [i for i in nlist if i in mlist and i in klist]
way2 = list(nlist &amp; mlist &amp; klist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using sets intersection seems to be the best way here. </p>
<pre><code>for s in list(set(list1) &amp; set(list2) &amp; set(list3)):
  print s
</code></pre>
<p>This will print the common elements only.</p>
</div>
<span class="comment-copy">Thank you so much. I completely forgot about <code>intersection</code></span>
<span class="comment-copy">If you have sets, then intersection seems like a more natural way to do it; use the <code>&amp;</code> operator. Also, note that you can't have repeat elements in a set.</span>
<span class="comment-copy">I realised that shortly after writing the first way haha, I didn't add in the bit about repeat elements since is his case he only needs 1 of each value anyway :)</span>
<span class="comment-copy">thanks for it. I'll read about sets and try to implement the concepts of sets.</span>
<span class="comment-copy">Thank you. This helped me understand the better way of solving such type of questions.</span>
<span class="comment-copy">Using sets here, looks very easy, but it's slow. You could have done better using numpy.array.</span>
