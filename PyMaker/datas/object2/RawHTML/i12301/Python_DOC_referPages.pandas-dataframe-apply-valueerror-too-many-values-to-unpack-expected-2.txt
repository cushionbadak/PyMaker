<div class="post-text" itemprop="text">
<p>I just started poking around Python and while I am very excited, it seems that I am far from pythonian thinking.</p>
<p>Here is an example of approach, which has word 'suboptimal' all over.
While this is sufficient for my relatively small dataset, I am wondering how can I write it better way?</p>
<pre><code>import pandas as pd
from pandas import DataFrame

# create sample log data frame
lg = pd.DataFrame(['Access violation at address 00A97...',
                   'Try to edit the splines or change...',
                   'Access violation at address 00F2B...',
                   'Please make sure the main electro...'], columns=['lg_msg'])

# define message classification
err_messages = [['Access violation', 'ACC-VIOL', 'PROG'],
                ['Please make sure th', 'ELE-NOT-PLACED', 'MOD'],
                ['Try to edit the splines', 'TRY-EDIT-SPLINES', 'MOD']]                

# lookup code
def message_code(msg_text):
    for msg in err_messages:
        if msg_text.startswith(msg[0]):
            return msg[1]
    return ''

# lookup type
def message_type(msg_text):
    for msg in err_messages:
        if msg_text.startswith(msg[0]):
            return msg[2]
    return ''               

lg['msg_code'] = lg['lg_msg'].apply(lambda x:  message_code(x))
lg['msg_type'] = lg['lg_msg'].apply(lambda x:  message_type(x))
</code></pre>
<p>I tried creating a single function to calculate log entry code and type at once:</p>
<pre><code>def message_code_type(msg_text):
    for msg in err_messages:
        if msg_text.startswith(msg[0]):
            return (msg[1], msg[2])
    return ('', '')

lg['msg_code'], lg['msg_type'] = lg['lg_msg'].apply(lambda x:  message_code_type(x))
</code></pre>
<p>but getting: </p>
<pre><code>---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-18-72f97d857539&gt; in &lt;module&gt;()
----&gt; 1 lg['msg_code'], lg['msg_code'] = lg['lg_msg'].apply(lambda x:  message_code_type(x))

ValueError: too many values to unpack (expected 2)
</code></pre>
<p>Is there any way to not traverse the dataframe twice?</p>
<p>Any feedback will be appreciated.</p>
<pre><code>import sys
print(sys.version)
3.5.1 |Anaconda 2.4.0 (64-bit)| (default, Jan 29 2016, 15:01:46) [MSC v.1900 64 bit (AMD64)]

pd.__version__
'0.17.1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this using <a href="https://docs.python.org/3.5/library/itertools.html" rel="noreferrer"><code>izip</code></a>  from the itertools module:</p>
<pre><code>from itertools import izip
lg['msg_code'], lg['msg_code'] = izip(*lg['lg_msg'].apply(lambda x:  message_code_type(x)))

In [21]:    lg
Out[21]:
    lg_msg  msg_code
0   Access violation at address 00A97...    PROG
1   Try to edit the splines or change...    MOD
2   Access violation at address 00F2B...    PROG
3   Please make sure the main electro...    MOD
</code></pre>
<p>Sorry, thats for 2.7, you should just be able to use the built-in <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a></p>
<pre><code>lg['msg_code'], lg['msg_type'] = zip(*lg['lg_msg'].apply(lambda x:  message_code_type(x)))

    lg_msg  msg_code    msg_type
0   Access violation at address 00A97...    ACC-VIOL    PROG
1   Try to edit the splines or change...    TRY-EDIT-SPLINES    MOD
2   Access violation at address 00F2B...    ACC-VIOL    PROG
3   Please make sure the main electro...    ELE-NOT-PLACED  MOD
</code></pre>
</div>
<span class="comment-copy">Thanks, will try that!  One thing... my mistake, the two target columns have the same name, which results in a single msg_code column.  Already edited my question.</span>
<span class="comment-copy">edited per your edits :)</span>
<span class="comment-copy">Unfortunately, it seems that there is no itertools for my environment <code>[Anaconda3] C:\Users\[snip]&gt;pip install itertools Collecting itertools Could not find a version that satisfies the requirement itertools (from versions: )   No matching distribution found for itertools</code></span>
<span class="comment-copy">you don't have to import itertools to use <code>zip</code> in python3, it's built-in.  Check out the example in the second link I posted.  This, in particular: <code>x2, y2 = zip(*zip(x, y))</code>.  Here's <a href="http://stackoverflow.com/questions/12356501/pandas-create-two-new-columns-in-a-dataframe-with-values-calculated-from-a-pre">another SO question</a> that uses <code>zip</code> and <code>map</code>.</span>
<span class="comment-copy">That did the trick! Thanks a bunch!</span>
