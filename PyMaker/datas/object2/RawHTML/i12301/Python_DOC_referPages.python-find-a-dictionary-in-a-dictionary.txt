<div class="post-text" itemprop="text">
<p>I have a dictionary with dictionaries as values, like this:</p>
<pre><code>myDict = {'custom_field1': {'label': 'CNAMEs', 'data': 'bar1 bar2' },
          'custom_field2': {'label': 'LocalForward', 'data': '8080:localhost:80' },
          'custom_field3': None,
          'custom_field4': {'label': 'ProxyCommand', 'data': 'ssh -q admin@192.168.1.2 nc -q0 %h 22' },
          'custom_field5': {'label': 'SomeMoreInfos', 'data': 'AboutSomethingElse' },
          'created_by': {'username': 'someperson', 'date': 'recently' },
          'name': 'hostname'
         }
</code></pre>
<p>There are many other key/values in the dict I don't care about. What would be an easy way, to get the data for a custom_field where the label is foo and then the data where label is bar and then the data where label is more?
Because currently I do it like this:</p>
<pre><code>customItem = []
for field in range(1, 10):
    new_field = myDict.get('custom_field%s' % field)
    if new_field is not None:
         customItem.append(new_field)

 for field in customItem:
      if field.get('label') == 'foo' and field.get('data') != '':
           for part in field.get('data').split():
               """do something for each"""
 for field in customItem:
      if field.get('label') == 'bar' and field.get('data') != '':
           print (field.get('data'))
</code></pre>
<p>My general goal is to create an automated ssh_config file for clients, so with the one dict for a host, it will create several ssh_config entries, the result should look like this:</p>
<pre><code>hostname (from label 'name')
   ProxyCommand ssh -q admin@192.168.1.2 nc -q0 %h 22
hostname-fwd (twice, because there was data behind label 'LocalForward') 
   ProxyCommand ssh -q admin@192.168.1.2 nc -q0 %h 22
   LocalForward 8080:localhost:80
bar1 (as found from label 'CNAMEs')
   ProxyCommand ssh -q admin@192.168.1.2 nc -q0 %h 22
bar1-fwd (twice, just because there was data behind label 'bar') 
   ProxyCommand ssh -q admin@192.168.1.2 nc -q0 %h 22
   LocalForward 8080:localhost:80
bar2 (same as with bar1)
   ProxyCommand ssh -q admin@192.168.1.2 nc -q0 %h 22
bar2-fwd
   ProxyCommand ssh -q admin@192.168.1.2 nc -q0 %h 22
   LocalForward 8080:localhost:80
</code></pre>
<p><strong>EDIT</strong> I tried to be more specific with my task now, as just random sampledata is not so easy to understand, sorry. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can index the fields by label, i.e. create a new dict to use for quick lookups by labels. For example:</p>
<pre><code>&gt;&gt;&gt; label2field = {
    field_val['label']: field_key
    for field_key, field_val in myDict.items()
}

&gt;&gt;&gt; label2field['more']
'custom_field4'

&gt;&gt;&gt; myDict[label2field ['foo']]['data']
'bar1 bar2'
</code></pre>
<p><strong>EDIT:</strong> To support <code>None</code> values and strings in <code>myDict</code>, just filter them out when creating the index:</p>
<pre><code>label2field = {
    field_val['label']: field_key
    for field_key, field_val in myDict.items()
    if isinstance(field_val, dict)
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using just the values you can try this</p>
<pre><code>for value in myDict.values():
    #Do a common check for data having usable information
    if isinstance(value, dict) and value['data']:

        if value['label'] == 'foo':
            for part in value['data'].split():
                #For foo parts
                print(part)

        elif value['label'] == 'bar':
            for part in value['data'].split():
                #For bar parts
                print(part)

        #Add more elif label checks if needed
</code></pre>
</div>
<span class="comment-copy">The second part of your question is very unclear, but seems like a separate question from what you've asked in the first part. Please ask each question separately!</span>
<span class="comment-copy">@Andreas Hubert The second part of your question needs a bit more information to answer. Maybe you can try to combine the two into one question</span>
<span class="comment-copy">If you're trying to index records by different fields in the record, you might want to use a proper relational database. For small datasets, just using <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">the <code>sqlite3</code> module</a> could work (and you don't even need a real disk DB; <code>sqlite3</code> supports in-memory databases for transient data by connecting to <code>":memory:"</code>).</span>
<span class="comment-copy">is the second question now understandable? what my goal is here?</span>
<span class="comment-copy">I'm finding it really hard to understand the pseudo code. Can you please try writing the code  (however crude) or better still merge it into your piece of code above?</span>
<span class="comment-copy">If your solution would work as you wrote it, it would be perfect! But I get this with your label2field: &gt;&gt;&gt; label2field = { ...     field_val['label']: field_key ...     for field_key, field_val in myDict.items() ... } Traceback (most recent call last):   File "&lt;stdin&gt;", line 3, in &lt;module&gt;   File "&lt;stdin&gt;", line 3, in &lt;dictcomp&gt; TypeError: 'NoneType' object is not subscriptable</span>
<span class="comment-copy">It's soooo close to my perfect solution! Please give me one more hint! With the sample dict it works, but my dict has also other dicts in it, without "label". e.g. myDict = {'custom_field1': {'label': 'foo', 'data': 'bar1 bar2' }, 'anotherField' = {'user': 'foo', 'name': 'bar'}} Thanks!</span>
<span class="comment-copy">So just filter those out too...</span>
