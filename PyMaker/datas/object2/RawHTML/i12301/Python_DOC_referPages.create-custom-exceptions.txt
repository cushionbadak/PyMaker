<div class="post-text" itemprop="text">
<p>Is there a way to shorten the following scenario so i don't have to use an ugly nested try except statement?</p>
<pre><code>class Error(Exception):
    def __init__(self):
        print("That did not work")
try:
    try:
        gblgbl
    except:
        raise Error
except Error:
    pass
</code></pre>
<p>What i want can be described as following pseudo code:</p>
<pre><code>Try something:
    something
if something went wrong:
    raise Error
catch Error:
    what to do if error occours
</code></pre>
<p>I don't want to raise the error if the try statement succeeds, however if i raise an exception in the exception statement like this:</p>
<pre><code>try:
    gblgbl
except:
    raise Error
except Error:
    pass
</code></pre>
<p>it can't be caught with an other except, since there is already an except that caught the python exception and the interpreter throws a SyntaxError.</p>
<p>Am i missing something obvious?</p>
<p>I'm aware that you probably would never use this in an actual program, but i'm curious about the theory.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no reason to use an exception here. The following (pseudo-)code achieves the same thing.</p>
<pre><code>try:
    gblgbl
except:
    pass
</code></pre>
<p>Note however that it generally is a bad idea to catch all exceptions, since for instance the <code>KeyboardInterrupt</code> Exception will also be caught and the program can thus not be interrupted using <code>Ctrl-c</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>Create custom exceptions?</em></p>
</blockquote>
<p>The <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow">Python Tutorial</a> has a section on <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" rel="nofollow">User-defined Exceptions</a></p>
</div>
<span class="comment-copy">I think this already have an answer through <a href="http://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python" title="proper way to declare custom exceptions in modern python">stackoverflow.com/questions/1319615/â€¦</a></span>
<span class="comment-copy">In addition to the question mentioned by @jefcabatingan <a href="https://www.codementor.io/python/tutorial/how-to-write-python-custom-exceptions" rel="nofollow noreferrer">this blog post</a> might be interesting, too.</span>
<span class="comment-copy">All you're accomplishing is translating <i>any</i> except when <code>gblgbl</code> executes into an <code>Error</code> exception and then immediately handling it. You don't really need the inner exception clause to do that.</span>
<span class="comment-copy">Sure, but i could do things like count the times this exception occurred in a class variable of the Error class.</span>
<span class="comment-copy">But this still misses the point of an exception, which is to signal an error to the caller. Your example could also be achieved with any other counter and does not require a separate <code>try</code>-<code>except</code>.</span>
