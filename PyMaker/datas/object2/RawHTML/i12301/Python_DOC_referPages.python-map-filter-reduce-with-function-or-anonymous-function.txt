<div class="post-text" itemprop="text">
<p>When I do this at command line (same for filter and reduce)</p>
<pre><code>map( lambda x: x+1, [1,2,3,4,5] )
</code></pre>
<p>instead of a list/collection as a result... i got<br/></p>
<p><code>&lt;map object at 0x6ffffe7b630&gt;</code></p>
<p>to obtain the list I have to apply the list() function
same happens if I use a plain old function to replace the lambda...</p>
<p>Why this behavior ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because many of the iteration functions use 'lazy' evaluation. Namely, they don't apply the function immediately all elements of the list. Instead they use a coroutine to apply the function one at a time as the "map object" is iterated.</p>
<p>This is a performance feature when some (but not all) of the items will be iterated, or might not need to be determined all at once. The lambda is applied only as needed. Previous versions of python didn't have this optimization and instead just applied the lambda to everything once <code>map</code> is called.</p>
</div>
<div class="post-text" itemprop="text">
<p>The function <code>map</code> doesn't return a list, but an iterator</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results.</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">documentation for map</a> has more information.</p>
</div>
<span class="comment-copy">Strongly disagree with the 'duplicate' mark... my question has a technical aspect to be explained... the question you pointed just says how to use the method...</span>
<span class="comment-copy">Not a problem, apologies.</span>
<span class="comment-copy">The accepted answer to that question says <i>"In Python 3+, many processes that iterate over iterables return iterators themselves"</i>. That's the technical reason.</span>
<span class="comment-copy">Can you provide a proof of the function being lazy? As far as I know, in the case of <code>map()</code> the algorithm is substantially different to, say, a <code>for</code> loop. The former is some 250 million times faster. A test of <code>map()</code> on a list of 50 million rows, takes 450 ns, and the results are immediately available. On the other hand, a <code>for</code> loop on the same data takes some 1.1 minute.</span>
<span class="comment-copy">I agree the algorithm is different. There may be a bit of a nomenclature misunderstanding about what I mean by "lazy". I mean that it only does work as needed. It doesn't loop over the whole list and apply lambda at each element when <code>map</code> is called instead it waits for the map object to be iterated and applies the lambda to each element as the iterator would yield it.</span>
<span class="comment-copy">Also, downvoting by way of retribution is a sure way to ensure that people don't respond to you the next time you ask why you've been downvoted.</span>
<span class="comment-copy">Just disagree with your answer, sorry. I don't see a proof. I respected your opinion, I expect you respect mine. You're welcome not to answer.</span>
<span class="comment-copy">Good answer...  thx...</span>
<span class="comment-copy">They asked why this happens, not what is the <code>type()</code> of the output.</span>
<span class="comment-copy">it is a good answer... just correct the link... you pasted the description in the url... LOL!!!</span>
<span class="comment-copy">I apparently can't paste this morning. I am going to take a break, thanks ZEE.</span>
