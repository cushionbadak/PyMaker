<div class="post-text" itemprop="text">
<p>I made a function that searches files recursively and I want it to stop recursion when the first file is found:  </p>
<pre><code>def search_file(path):
    for name in os.listdir(path):
        sub = os.path.join(path, name)
        if os.path.isfile(sub):
            return sub#And break recursion
        else:
            search_file(sub)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Return a flag that says whether the file was found.  When you call <code>search_file</code>, return if the return value is True.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are close. You already break recursion when you find the file, the problem is that you didn't propegate that result all the way up the chain. A well-placed print statement would show what went wrong.</p>
<pre><code>import os

def search_file(path):
    for name in os.listdir(path):
        sub = os.path.join(path, name)
        print('peek at: {}'.format(sub))
        if os.path.isfile(sub):
            return sub#And break recursion
        else:
            sub = search_file(sub)
            if sub:
                return sub  
print(search_file('a'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that you need to be able to return a false entry in case it loops all the way down without finding anything. However, you do not want to break out of the for loop if nothing found in one subdirectory without checking the next sub directory. The return will break out of the function, returning the results without having to enter a break.</p>
<pre><code>def search_file(path):
    Initialize results to no file found
    val = False
    sub = None
    for name in os.listdir(path):
        sub = os.path.join(path, name)
        val = os.path.isfile(sub):
        if val:
            return val, sub #And break recursion
        else:
            #check the subdirectory.
            val, sub = search_file(sub)
            # Break out if a valid file was found.
            if val:
                return val, sub
    # No files found for this directory, return a failure
    return val, sub
</code></pre>
<p>On the other hand, if you want to have only one return, you can use a break as follows</p>
<pre><code>def search_file(path):
    Initialize results to No file found
    val = False
    sub = None
    for name in os.listdir(path):
        sub = os.path.join(path, name)
        val = os.path.isfile(sub):
        if val:
            break # break out of the for loop and return
        else:
            #check the subdirectory.
            val, sub = search_file(sub)
            # Break out if a valid file was found.
            if val:
                break
    # Return the True or False results
    return val, sub
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I see a problem of not being able to return a value other than <code>None</code> once into the <code>else:</code> statement. Could you provide broader details describing what you are trying to do?</p>
<p>There is no way to simply exit recursion when you accomplish a task. Each recursive step that was opened must be closed before moving on. The function must return something (<code>None</code> or a value) to its caller.</p>
<p>I'm imagining this being a class method that sets value to an attribute because it doesn't return anything once recursion has begun. <strong>Here's what I would do in the instance that this is a class method</strong>.</p>
<pre><code>def search_file(self, path):
    for name in os.listdir(path):
        sub = os.path.join(path, name)
        if os.path.isfile(sub):
            self.random_attr = sub
            return True  #And break recursion
        elif search_file(sub):
            break
</code></pre>
</div>
<span class="comment-copy">Just so you know: <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">docs.python.org/3/library/os.html#os.walk</a></span>
<span class="comment-copy">How this stops recursion, I want to stop function calls.</span>
<span class="comment-copy">@kuhe: you should try it.  You're giving up too quickly.</span>
<span class="comment-copy">This doesn't work</span>
<span class="comment-copy">@NeilG Did you try it? Is there some use case that doesn't work?</span>
<span class="comment-copy">You always return, so what is the point of the <code>for</code> loop at all?</span>
<span class="comment-copy">@NeilG oops, you're right. added conditional return.</span>
<span class="comment-copy">Good.  I would personally still put a return outside the <code>for</code> loop for legibility.</span>
