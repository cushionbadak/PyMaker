<div class="post-text" itemprop="text">
<p>I've got a little problem:</p>
<p>I have a String in my Database which is called <code>actions</code>.
Now, I'm writing a method, which gets that string from the database 
(that works), and then I want to turn that string into a list.</p>
<p>I know <code>actions.split()</code>, but this didn't work out so well for me, because if my string looks like this:</p>
<pre><code>actions = [
    {u'action': 'visit_testing', u'timestamp': datetime.datetime(2016, 2, 12, 13, 32, 14)},
    {u'action': 'visit_foo', u'timestamp': datetime.datetime(2016, 2, 12, 13, 37, 50)}
]
</code></pre>
<p>I can't use <code>actions.split(', ')</code> because it would mess up the dictionaries inside.</p>
<p>Till now I've got the following code:</p>
<pre><code>timestamp = datetime.now().replace(microsecond=0)
dict = {'timestamp': timestamp, 'action': action}

if self.actions:
    actions_string = str(self.actions)
    actions_stripped = actions_string.strip('[')
    actions_stripped = actions_stripped.strip(']')
    actions_splitted = actions_stripped.split(', ')

    new_action_list = []

    buffer = ''
     for string in actions_splitted:
        if '{' in string:
            buffer = str(string)
        elif '}' in string:
            buffer = buffer + ', ' + str(string)
            new_action_list.append(str(buffer))
            buffer = ''
        else:
            buffer = buffer + ', ' + str(string)
    self.actions = str(buffer)
    self.last_action = datetime.now().replace(microsecond=0)
    self.save()
else:
    self.actions = '['+str(dict)+']'
    self.last_action = datetime.now().replace(microsecond=0)
    self.save()
</code></pre>
<p>Addition: If I run the method when <code>actions</code> is empty, it gives me a list with one dictionary, but if I run it when it already has something in it, if sets actions to <code>""</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be using the <a href="https://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code> module</a> to store valid JSON in your database. You <em>can</em> create a valid <code>action</code> list from that string using <code>exec</code>. But please beware that using <code>exec</code> or <code>eval</code> is a potentially <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow">dangerous practice</a>.</p>
<pre><code>import datetime

stuff = '''
actions = [{u'action': 'visit_testing', u'timestamp': datetime.datetime(2016, 2, 12, 13, 32, 14)}, {u'action': 'visit_foo', u'timestamp': datetime.datetime(2016, 2, 12, 13, 37, 50)}]
'''

exec(stuff)
print(actions)
print(actions[0]['timestamp'])    
</code></pre>
<p><strong>output</strong></p>
<pre><code>[{u'action': 'visit_testing', u'timestamp': datetime.datetime(2016, 2, 12, 13, 32, 14)}, {u'action': 'visit_foo', u'timestamp': datetime.datetime(2016, 2, 12, 13, 37, 50)}]
2016-02-12 13:32:14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use json library.</p>
<pre><code>import json
my_dict_or_list = json.loads(your_string)
</code></pre>
<p>then work with Python objects. You will gain so much time :-D</p>
</div>
<div class="post-text" itemprop="text">
<p>I found a way that works for me:</p>
<pre><code>    timestamp = datetime.datetime.now().replace(microsecond=0)

    if self.actions:
        new_dict = {"timestamp": timestamp, "action": action}
        #tmp_actions = json.loads(self.actions)
        tmp_actions = self.actions
        exec(tmp_actions)
        actions.append(new_dict)
        self.actions = str('actions = '+str(actions))
        self.last_action = datetime.datetime.now().replace(microsecond=0)
        self.save()
    else:
        exec('''actions = ['''+str({"timestamp": timestamp, "action": action})+''']''')
        self.actions = 'actions = '+str(actions)
        self.last_action = datetime.datetime.now().replace(microsecond=0)
        self.save()
</code></pre>
<p>Thanks for all the help.</p>
</div>
<span class="comment-copy">"I have a String in my Database", you have json forced in as a string in your database, it probably needs to be a <code>JSONField</code>or an actual object model</span>
<span class="comment-copy">now i'm getting Expecting property name enclosed in double quotes: line 1 column 3 (char 2)</span>
<span class="comment-copy">json keys in dict are enclosed with double quotes, not simple quote. Can you have your string with these quotes ?</span>
<span class="comment-copy">I tried to change this line dict = {"timestamp": timestamp, "action": action}, but the quotes were changed back into single quotes... can i do .replace("'", '"')?</span>
<span class="comment-copy">It should works but beware of string with escaped quote is your dict (i don't know if you can have some)</span>
<span class="comment-copy">Why use json.loads() on something that's not json?</span>
<span class="comment-copy">This code will get you into trouble one day or another. Image what will happens if someone stores something like "os.system("rm -rf")" in your database...</span>
<span class="comment-copy">@brunodesthuilliers Yea, i know, but I guess I could write a method which checks if the text is "valid" (looks if a specific format is there)</span>
<span class="comment-copy">As far as I'm concerned, I wouldn't bet my system security on this. Seriously, you'd better switch to (at least) json and write a run-once migration script for your current dat.  Or use a properly normalized relational schema storing "actions" in their own table, one row per action.</span>
<span class="comment-copy">Well, I guess I'm going to create its own table then</span>
