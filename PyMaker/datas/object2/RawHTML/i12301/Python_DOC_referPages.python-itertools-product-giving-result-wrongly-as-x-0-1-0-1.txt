<div class="post-text" itemprop="text">
<p>I have a list </p>
<pre><code>e = [['x'], [0, 1], [0, 1, 2]] 
</code></pre>
<p>From this list, I would like to produce below output.</p>
<pre><code>[('x', 0, 0), ('x', 0, 1), ('x', 1, 0), ('x', 1, 1), ('x', 2, 0), ('x', 2,1)]
</code></pre>
<p>Below is the code I used </p>
<pre><code>import itertools
f=[[0], [2], [3]]
e=[['x']if f[j][0]==0 else range(f[j][0]) for j in range(len(f))]
print(e)
List1_=[]
for i in itertools.product(e):
  List1_.append(i)
print(List1_)
</code></pre>
<p>but I am getting output as</p>
<pre><code>[(['x'],), ([0, 1],), ([0, 1, 2],)]
</code></pre>
<p>thanks,
Sans</p>
</div>
<div class="post-text" itemprop="text">
<p>That's what that <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> is for. But you need to change the second and 3rd item in order to create the expected product.</p>
<p>Also note that you need to use <code>*</code> operand for unpacking your nested list. Because <code>product</code> accepts multiple iterable and calculates the product of them. Thus you need to pass your sub lists instead of the whole of your list.</p>
<pre><code>&gt;&gt;&gt; e = [['x'], [0, 1, 2], [0, 1]]   
&gt;&gt;&gt; list(product(*e))
[('x', 0, 0), ('x', 0, 1), ('x', 1, 0), ('x', 1, 1), ('x', 2, 0), ('x', 2, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were not unpacking <code>e</code> in your code:</p>
<pre><code>&gt;&gt;&gt; list(product(e))
[(['x'],), ([0, 1],), ([0, 1, 2],)]
&gt;&gt;&gt; 
&gt;&gt;&gt; list(product(*e))
[('x', 0, 0), ('x', 0, 1), ('x', 0, 2), ('x', 1, 0), ('x', 1, 1), ('x', 1, 2)]
&gt;&gt;&gt;
</code></pre>
<p>Quoting from <a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.product" rel="nofollow">Python Docs</a>:</p>
<blockquote>
<p><code>itertools.product(*iterables, repeat=1)</code> Cartesian product of input
  iterables.</p>
<p>Equivalent to nested for-loops in a generator expression. For example,
  product(A, B) returns the same as ((x,y) for x in A for y in B).</p>
</blockquote>
<p>If order matters to you than, just re-order your <code>e</code> list as :</p>
<pre><code>&gt;&gt;&gt; e = [['x'], [0, 1, 2], [0, 1]]  
</code></pre>
<p>Then you can get your expected output:</p>
<pre><code>&gt;&gt;&gt; list(product(*e))
[('x', 0, 0), ('x', 0, 1), ('x', 1, 0), ('x', 1, 1), ('x', 2, 0), ('x', 2, 1)]
</code></pre>
</div>
