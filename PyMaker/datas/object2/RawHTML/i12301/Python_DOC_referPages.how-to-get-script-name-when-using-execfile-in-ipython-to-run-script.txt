<div class="post-text" itemprop="text">
<p>I have scripts calling other script files but I need to get the filepath of the file that is currently running within the process. </p>
<p>For example, let's say I have three files. Using <a href="http://docs.python.org/library/functions.html#execfile" rel="noreferrer">execfile</a>:</p>
<ul>
<li><code>script_1.py</code> calls <code>script_2.py</code>. </li>
<li>In turn, <code>script_2.py</code> calls <code>script_3.py</code>. </li>
</ul>
<p>How can I get the file name and path of <strong><code>script_3.py</code></strong>, <em>from code within <code>script_3.py</code></em>, without having to pass that information as arguments from <code>script_2.py</code>?</p>
<p>(Executing <code>os.getcwd()</code> returns the original starting script's filepath not the current file's.)</p>
</div>
<div class="post-text" itemprop="text">
<p>p1.py:</p>
<pre><code>execfile("p2.py")
</code></pre>
<p>p2.py:</p>
<pre><code>import inspect, os
print inspect.getfile(inspect.currentframe()) # script filename (usually with path)
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>__file__
</code></pre>
<p>as others have said. You may also want to use <a href="https://docs.python.org/3/library/os.path.html#os.path.realpath" rel="noreferrer">os.path.realpath</a> to eliminate symlinks:</p>
<pre><code>import os

os.path.realpath(__file__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update 2018-11-28:</strong></p>
<p>Here is a summary of experiments with Python 2 and 3. With </p>
<p>main.py - runs foo.py<br/>
foo.py - runs lib/bar.py<br/>
lib/bar.py - prints filepath expressions  </p>
<pre class="lang-none prettyprint-override"><code>| Python | Run statement       | Filepath expression                    |
|--------+---------------------+----------------------------------------|
|      2 | execfile            | os.path.abspath(inspect.stack()[0][1]) |
|      2 | from lib import bar | __file__                               |
|      3 | exec                | (wasn't able to obtain it)             |
|      3 | import lib.bar      | __file__                               |
</code></pre>
<p>For Python 2, it might be clearer to switch to packages so can use <code>from lib import bar</code> - just add empty <code>__init__.py</code> files to the two folders.</p>
<p>For Python 3, <code>execfile</code> doesn't exist - the nearest alternative is <code>exec(open(&lt;filename&gt;).read())</code>, though this affects the stack frames. It's simplest to just use <code>import foo</code> and <code>import lib.bar</code> - no <code>__init__.py</code> files needed.</p>
<p>See also <a href="https://stackoverflow.com/questions/27517003/difference-between-import-and-execfile">Difference between import and execfile</a></p>
<hr/>
<p><strong>Original Answer:</strong></p>
<p>Here is an experiment based on the answers in this thread - with Python 2.7.10 on Windows.</p>
<p><strong>The stack-based ones are the only ones that seem to give reliable results. The last two have the shortest syntax</strong>, i.e. -</p>
<pre><code>print os.path.abspath(inspect.stack()[0][1])                   # C:\filepaths\lib\bar.py
print os.path.dirname(os.path.abspath(inspect.stack()[0][1]))  # C:\filepaths\lib
</code></pre>
<p>Here's to these being added to <strong>sys</strong> as functions! Credit to @Usagi and @pablog</p>
<p>Based on the following three files, and running main.py from its folder with <code>python main.py</code> (also tried execfiles with absolute paths and calling from a separate folder). </p>
<p>C:\filepaths\main.py: <code>execfile('foo.py')</code><br/>
C:\filepaths\foo.py: <code>execfile('lib/bar.py')</code><br/>
C:\filepaths\lib\bar.py:</p>
<pre><code>import sys
import os
import inspect

print "Python " + sys.version
print

print __file__                                        # main.py
print sys.argv[0]                                     # main.py
print inspect.stack()[0][1]                           # lib/bar.py
print sys.path[0]                                     # C:\filepaths
print

print os.path.realpath(__file__)                      # C:\filepaths\main.py
print os.path.abspath(__file__)                       # C:\filepaths\main.py
print os.path.basename(__file__)                      # main.py
print os.path.basename(os.path.realpath(sys.argv[0])) # main.py
print

print sys.path[0]                                     # C:\filepaths
print os.path.abspath(os.path.split(sys.argv[0])[0])  # C:\filepaths
print os.path.dirname(os.path.abspath(__file__))      # C:\filepaths
print os.path.dirname(os.path.realpath(sys.argv[0]))  # C:\filepaths
print os.path.dirname(__file__)                       # (empty string)
print

print inspect.getfile(inspect.currentframe())         # lib/bar.py

print os.path.abspath(inspect.getfile(inspect.currentframe())) # C:\filepaths\lib\bar.py
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # C:\filepaths\lib
print

print os.path.abspath(inspect.stack()[0][1])          # C:\filepaths\lib\bar.py
print os.path.dirname(os.path.abspath(inspect.stack()[0][1]))  # C:\filepaths\lib
print
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is cleaner:</p>
<pre><code>import inspect
print inspect.stack()[0][1]
</code></pre>
<p>and gets the same information as:</p>
<pre><code>print inspect.getfile(inspect.currentframe())
</code></pre>
<p>Where [0] is the current frame in the stack (top of stack) and [1] is for the file name, increase to go backwards in the stack i.e.</p>
<pre><code>print inspect.stack()[1][1]
</code></pre>
<p>would be the file name of the script that called the current frame. Also, using [-1] will get you to the bottom of the stack, the original calling script.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.path.dirname(__file__) # relative directory path
os.path.abspath(__file__) # absolute file path
os.path.basename(__file__) # the file name only
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The suggestions marked as best are all true if your script consists of only one file. </p>
<p>If you want to find out the name of the executable (i.e. the root file passed to the python interpreter for the current program) from a file that may be imported as a module, you need to do this (let's assume this is in a file named <em>foo.py</em>):</p>
<p><code>import inspect</code></p>
<p><code>print inspect.stack()[-1][1]</code></p>
<p>Because the last thing (<code>[-1]</code>) on the stack is the first thing that went into it (stacks are LIFO/FILO data structures).</p>
<p>Then in file <em>bar.py</em> if you <code>import foo</code> it'll print <em>bar.py</em>, rather than <em>foo.py</em>, which would be the value of all of these:</p>
<ul>
<li><code>__file__</code></li>
<li><code>inspect.getfile(inspect.currentframe())</code></li>
<li><code>inspect.stack()[0][1]</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
print os.path.basename(__file__)
</code></pre>
<p>this will give us the filename only. i.e. if abspath of file is c:\abcd\abc.py then 2nd line will print abc.py</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not entirely clear what you mean by "the filepath of the file that is currently running within the process".
<code>sys.argv[0]</code> usually contains the location of the script that was invoked by the Python interpreter.
Check the <a href="https://docs.python.org/2/library/sys.html" rel="nofollow noreferrer">sys documentation</a> for more details.</p>
<p>As @Tim and @Pat Notz have pointed out, the __file__ attribute provides access to</p>
<blockquote>
<p>the file from which the module was
  loaded, if it was loaded from a file</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I have a script that must work under windows environment.
This code snipped is what I've finished with:</p>
<pre><code>import os,sys
PROJECT_PATH = os.path.abspath(os.path.split(sys.argv[0])[0])
</code></pre>
<p>it's quite a hacky decision. But it requires no external libraries and it's the most important thing in my case.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.path.dirname(os.path.abspath(__file__))
</code></pre>
<p>No need for inspect or any other library.</p>
<p>This worked for me when I had to import a script (from a different directory then the executed script), that used a configuration file residing in the same folder as the imported script.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__file__</code> attribute works for both the file containing the main execution code as well as imported modules.</p>
<p>See <a href="https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__" rel="nofollow noreferrer">https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

print sys.path[0]
</code></pre>
<p>this would print the path of the currently executing script</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's just <code>__file__</code>   Sounds like you may also want to checkout the <a href="https://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer">inspect module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>inspect.stack()</code></p>
<pre><code>import inspect,os
inspect.stack()[0]  =&gt; (&lt;frame object at 0x00AC2AC0&gt;, 'g:\\Python\\Test\\_GetCurrentProgram.py', 15, '&lt;module&gt;', ['print inspect.stack()[0]\n'], 0)
os.path.abspath (inspect.stack()[0][1]) =&gt; 'g:\\Python\\Test\\_GetCurrentProgram.py'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
print sys.argv[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>import os,sys
filename=os.path.basename(os.path.realpath(sys.argv[0]))
dirname=os.path.dirname(os.path.realpath(sys.argv[0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get directory of executing script  </p>
<pre><code> print os.path.dirname( inspect.getfile(inspect.currentframe()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To keep the migration consistency across platforms (macOS/Windows/Linux), try:</p>
<p><code>path = r'%s' % os.getcwd().replace('\\','/')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>import os
os.path.dirname(os.path.realpath(__file__))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used the approach with __file__<br/>
<code>os.path.abspath(__file__)</code><br/>
but there is a little trick, it returns the .py file 
when the code is run the first time, 
next runs give the name of *.pyc file<br/>
so I stayed with:<br/>
<code>inspect.getfile(inspect.currentframe())</code><br/>
or<br/>
<code>sys._getframe().f_code.co_filename</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote a function which take into account eclipse <strong>debugger</strong> and <strong>unittest</strong>.
It return the folder of the first script you launch. You can optionally specify the <em>__file__</em> var, but the main thing is that you don't have to share this variable across all your <strong>calling hierarchy</strong>.</p>
<p>Maybe you can handle others stack particular cases I didn't see, but for me it's ok.</p>
<pre><code>import inspect, os
def getRootDirectory(_file_=None):
    """
    Get the directory of the root execution file
    Can help: http://stackoverflow.com/questions/50499/how-do-i-get-the-path-and-name-of-the-file-that-is-currently-executing
    For eclipse user with unittest or debugger, the function search for the correct folder in the stack
    You can pass __file__ (with 4 underscores) if you want the caller directory
    """
    # If we don't have the __file__ :
    if _file_ is None:
        # We get the last :
        rootFile = inspect.stack()[-1][1]
        folder = os.path.abspath(rootFile)
        # If we use unittest :
        if ("/pysrc" in folder) &amp; ("org.python.pydev" in folder):
            previous = None
            # We search from left to right the case.py :
            for el in inspect.stack():
                currentFile = os.path.abspath(el[1])
                if ("unittest/case.py" in currentFile) | ("org.python.pydev" in currentFile):
                    break
                previous = currentFile
            folder = previous
        # We return the folder :
        return os.path.dirname(folder)
    else:
        # We return the folder according to specified __file__ :
        return os.path.dirname(os.path.realpath(_file_))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simplest way is:</p>
<p>in <strong>script_1.py:</strong></p>
<pre><code>import subprocess
subprocess.call(['python3',&lt;path_to_script_2.py&gt;])
</code></pre>
<p>in <strong>script_2.py:</strong></p>
<pre><code>sys.argv[0]
</code></pre>
<p>P.S.: I've tried <code>execfile</code>, but since it reads script_2.py as a string, <code>sys.argv[0]</code> returned <code>&lt;string&gt;</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have always just used the os feature of Current Working Directory, or CWD.  This is part of the standard library, and is very easy to implement.
Here is an example: </p>
<pre><code>    import os
    base_directory = os.getcwd()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most of these answers were written in Python version 2.x or earlier. In Python 3.x the syntax for the print function has changed to require parentheses, i.e. print().</p>
<p>So, this earlier high score answer from user13993 in Python 2.x:</p>
<pre><code>import inspect, os
print inspect.getfile(inspect.currentframe()) # script filename (usually with path)
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
</code></pre>
<p>Becomes in Python 3.x:</p>
<pre><code>import inspect, os
print(inspect.getfile(inspect.currentframe())) # script filename (usually with path)
print(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) ) # script directory
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want just the filename without <code>./</code> or <code>.py</code> you can try this</p>
<pre><code>filename = testscript.py
file_name = __file__[2:-3]
</code></pre>
<p><code>file_name</code> will print testscript
you can generate whatever you want by changing the index inside []</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os

import wx


# return the full path of this file
print(os.getcwd())

icon = wx.Icon(os.getcwd() + '/img/image.png', wx.BITMAP_TYPE_PNG, 16, 16)

# put the icon on the frame
self.SetIcon(icon)
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/7116889/55075">Python <code>__file__</code> attribute absolute or relative?</a></span>
<span class="comment-copy">os.path.realpath(<b>file</b>)</span>
<span class="comment-copy">BEWARE: This call does not give the same result with different environments. Consider accepting Usagi's answer below: <a href="http://stackoverflow.com/a/6628348/851398">stackoverflow.com/a/6628348/851398</a></span>
<span class="comment-copy">@faraday: Could you provide an example? I've answered <a href="http://stackoverflow.com/a/22881871/4279">similar question using <code>inspect.getabsfile()</code></a> and it worked for all cases that I've tried.</span>
<span class="comment-copy">Is indeed @Usagi answer better?</span>
<span class="comment-copy">nah user13993 nailed it far better</span>
<span class="comment-copy">user13993 did indeed nail it. Should be <code>os.path.realpath(__file__)</code></span>
<span class="comment-copy">One needs to be careful with this approach because sometimes <code>__file__</code> returns 'script_name.py', and other times 'script_name.pyc'. So output isn't stable.</span>
<span class="comment-copy">But since we are only using the path of this file that's irrelevant.</span>
<span class="comment-copy">this is weird: when running from command line  <code>"__file__"</code> in quotes (as string)  gives the dir from which cmd is run, but <code>__file__</code>  (without quotes gives the path to the source file ... why is that</span>
<span class="comment-copy">@muon there is no check performed on whether a filename string passed in exists, and since file paths are relative to the cwd, that is what the <code>os.path.realpath</code> function assumes the <code>dir</code> part of the path to be.  <code>os.path.dirname(os.path.realpath(__file__))</code> returns directory with the file. <code>os.path.dirname(os.path.realpath("__file__"))</code> returns cwd. <code>os.path.dirname(os.path.realpath("here_be_dragons"))</code> also returns cwd.</span>
<span class="comment-copy">Do not recommend relying on the position inside the tuple. It's not clear at all what data you're trying to get when reading the code.</span>
<span class="comment-copy"><code>inspect.getfile()</code> returns the <code>__file__</code> attribute if passed a module object. <code>inspect.currentframe()</code> returns the module. Ergo, this is an expensive way of saying <code>__file__</code>.</span>
<span class="comment-copy"><code>inspect.stack()</code> is a pretty expensive function, more so than just <code>inspect.currentframe()</code>, and it too calls <code>inspect.getfile()</code> on a module object.</span>
<span class="comment-copy">I just tried @Pat Notz's comment. I think you could just get the filename through <code>__file__</code>.</span>
<span class="comment-copy">It works well but not for unit test on eclipse, I got /home/user/Softwares/eclipse/plugins/org.python.pydev_4.5.5.201603221110/pysrc</span>
<span class="comment-copy">This is an expensive way of spelling <code>sys.modules['__main__'].__file__</code>, really.</span>
<span class="comment-copy">"print os.path.abspath( <b>file</b> )" and "print inspect.getfile( inspect.currentframe() )" doesn't work when we pass the python program to a win32 exe. Only sys.argv[0] works! :) but you only get the name!</span>
<span class="comment-copy">I had to "import os, sys" for this, but so far it's the best answer that actually returns just the path without a file name at the end of the string.</span>
<span class="comment-copy">This will not produce the desired answer if the current working directory (os.getcwd) is different from the directory in which the file is located.</span>
<span class="comment-copy">How so? Works fine for me in this case. I get the directory the file is located in.</span>
<span class="comment-copy">@IronPillow maybe this answer will help you with what you need. <a href="http://stackoverflow.com/a/41546830/3123191">stackoverflow.com/a/41546830/3123191</a></span>
<span class="comment-copy">sys.path[0] is very useful, but gives the path of script1, not script3 as requested</span>
<span class="comment-copy">At least on OS X, with 2.7, I don't find this does anything reliable. It works if executing directly the same file. Doesn't work from repl, especially from an imported egg</span>
<span class="comment-copy">Ahhh... execfile is tricky.  See my other post about using the inspect module.</span>
<span class="comment-copy">Unfortunately this only works if the script was called with its full path, because it only returns the "first argument" on the command line, which is the calling to the script.</span>
<span class="comment-copy">This is wrong.  This gets you the current path, but not the path of the current file.</span>
<span class="comment-copy">Could you modify your answer so that it applies to the question posed? This answer does not apply to the question "How do I get the path and name <i>of the file that is currently executing?</i>"</span>
<span class="comment-copy">os.getcwd() returns the current WORKING directory of the PROCESS, not the directory of the currently executing file. This might appear to return the correct results but there are plenty of cases where the result would not be the current file's parent directory. Much better to use os.path.dirname(<b>file</b>) as suggested above.</span>
