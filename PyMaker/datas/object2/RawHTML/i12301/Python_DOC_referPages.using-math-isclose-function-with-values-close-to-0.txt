<div class="post-text" itemprop="text">
<p>As we know, due to the binary representation of numbers, this expression evaluates to <code>False</code> (at least in Python):</p>
<pre><code>0.2 + 0.4 == 0.6
</code></pre>
<p>In order to be able to check for equality within numerical errors, the module <code>math</code> offers <code>isclose</code>:</p>
<pre><code>import math
math.isclose(0.2 + 0.4 , 0.6)
</code></pre>
<p>This last expression yields <code>True</code> as expected.</p>
<p>Now <strong>why does this following expression is <code>False</code> again?</strong></p>
<pre><code>math.isclose(0.2 + 0.4 - 0.6 , 0.0)
</code></pre>
<p>It appears that everything compared to <code>0.0</code> is <code>False</code></p>
<pre><code>math.isclose(1.0e-100 , 0.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer can be worked out by reading the <a href="https://docs.python.org/3/library/math.html#math.isclose">documentation</a>.</p>
<blockquote>
<pre><code>math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
</code></pre>
<p>Return True if the values a and b are close to each other and False otherwise.</p>
<p>Whether or not two values are considered close is determined according to given absolute and relative tolerances.</p>
<p>rel_tol is the relative tolerance – it is the maximum allowed difference between a and b, relative to the larger absolute value of a or b. For example, to set a tolerance of 5%, pass rel_tol=0.05. The default tolerance is 1e-09, which assures that the two values are the same within about 9 decimal digits. rel_tol must be greater than zero.</p>
<p>abs_tol is the minimum absolute tolerance – useful for comparisons near zero. abs_tol must be at least zero.</p>
<p>If no errors occur, the result will be: </p>
<pre><code>abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)
</code></pre>
</blockquote>
<p>You use default tolerances which means that a relative tolerance check is used. And the equation above makes it clear why your expressions evaluates false. </p>
<p>Consider the final expression in the question:</p>
<pre><code>math.isclose(1.0e-100 , 0.0)
</code></pre>
<p>Plug these values into the expression from the documentation and we have</p>
<pre><code>1.0e-100 &lt;= max(1.0e-9 * 1.0e-100, 0.0)
</code></pre>
<p>I think it should be obvious that when performing a relative tolerance comparison, using default tolerances, no non-zero value is deemed close to zero. </p>
<p>For very small values you should perhaps use an absolute tolerance. </p>
<p>Or you should re-write the test to avoid comparing against zero. </p>
</div>
<span class="comment-copy">mmph. I did read the documentation and noted that I could set the relative and absolute tolerances. But I somehow missed the default absolute tolerance being 0.0. Perhaps I should go to bed... Thanks David</span>
<span class="comment-copy">For completeness, the <a href="https://www.python.org/dev/peps/pep-0485/#absolute-tolerance-default" rel="nofollow noreferrer">original PEP</a> explains why the absolute tolerance is 0: <i>"The absolute tolerance required to determine if a value is "close" to zero is entirely use-case dependent."</i></span>
