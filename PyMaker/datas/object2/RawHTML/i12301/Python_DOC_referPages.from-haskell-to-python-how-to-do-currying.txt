<div class="post-text" itemprop="text">
<p>I recently started coding in Python and I was wondering if it's possible to return a function that <em>specializes</em> another function.</p>
<p>For example, in Haskell you can create a function that adds 5 to any given number like this:</p>
<pre><code>sumFive = (+5)
</code></pre>
<p>Is it somehow possible in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the other answers are misunderstanding the question. I believe the OP is asking about partial application of a function, in his example the function is <code>(+)</code>.</p>
<p>If the goal isn't partial application, the solution is as simple as:</p>
<pre><code>def sumFive(x): return x + 5
</code></pre>
<p>For partial application in Python, we can use this function: <a href="https://docs.python.org/2/library/functools.html#functools.partial">https://docs.python.org/2/library/functools.html#functools.partial</a></p>
<pre><code>def partial(func, *args, **keywords):
    def newfunc(*fargs, **fkeywords):
        newkeywords = keywords.copy()
        newkeywords.update(fkeywords)
        return func(*(args + fargs), **newkeywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    return newfunc
</code></pre>
<p>Then, we must turn the <code>+</code> operator into a function (I don't believe there's a lightweight syntax to do so like in Haskell):</p>
<pre><code>def plus(x, y): return x + y
</code></pre>
<p>Finally:</p>
<pre><code>sumFive = partial(plus, 5)
</code></pre>
<p>Not nearly as nice as in Haskell, but it works:</p>
<pre><code>&gt;&gt;&gt; sumFive(7)
12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's design does not naturally support the evaluation of a multi-variable function into a sequence of single-variable functions (<em>currying</em>). As other answers point out, the related (but distinct) concept of <a href="https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application" rel="nofollow"><em>partial application</em></a> is more straightforward to do using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>partial</code></a> from the functools module.</p>
<p>However, the <a href="https://pypi.python.org/pypi/PyMonad/" rel="nofollow">PyMonad</a> library supplies you with the tools to make currying possible in Python, providing a "collection of classes for programming with functors, applicative functors and monads."</p>
<p>Use the <code>curry</code> decorator to decorate a function that accepts any number of arguments:</p>
<pre><code>from pymonad import curry

@curry
def add(x, y):
    return x + y
</code></pre>
<p>It is then very easy to curry <code>add</code>. The syntax is not too dissimilar to Haskell's:</p>
<pre><code>&gt;&gt;&gt; add5 = add(5)
&gt;&gt;&gt; add5(12)
17    
</code></pre>
<p>Note that here the <code>add</code> and <code>add5</code> functions are instances of PyMonad's <code>Reader</code> monad class, not a normal Python function object:</p>
<pre><code>&gt;&gt;&gt; add
&lt;pymonad.Reader.Reader at 0x7f7024ccf908&gt;
</code></pre>
<p>This allows, for example, the possibility of using simpler syntax to  compose functions (easy to do in Haskell, normally much less so in Python).</p>
<p>Finally, it's worth noting that the infix operator <code>+</code> is not a Python function: <code>+</code> calls into the left-hand operand's <code>__add__</code> method, or the right-hand operand's <code>__radd__</code> method and returns the result. You'll need to decorate these class methods for the objects you're working with if you want to curry using <code>+</code> (disclaimer: I've not tried to do this yet).</p>
</div>
<div class="post-text" itemprop="text">
<p>Yup.  Python supports lambda expressions:</p>
<pre><code>sumFive = lambda x: x + 5

for i in range(5):
   print sumFive(i),

#OUTPUT 5,6,7,8,9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python functions can return functions, allowing you to create higher-order functions. For example, here is a higher-order function which can specialize a function of two variables:</p>
<pre><code>def specialize(f,a,i):
    def g(x):
        if i == 0:
            return f(a,x)
        else:
            return f(x,a)
    return g
</code></pre>
<p>Used like this:</p>
<pre><code>&gt;&gt;&gt; def subtract(x,y): return x - y

&gt;&gt;&gt; f = specialize(subtract,5,0)
&gt;&gt;&gt; g = specialize(subtract,5,1)
&gt;&gt;&gt; f(7)
-2
&gt;&gt;&gt; g(7)
2
</code></pre>
<p>But -- there is really no need to reinvent the wheel, the module <a href="https://docs.python.org/3.5/library/functools.html" rel="nofollow">functools</a> has a number of useful higher-order functions that any Haskell programmer would find useful, including <code>partial</code> for partial function application, which is what you are asking about.</p>
</div>
<div class="post-text" itemprop="text">
<p>As it was pointed out, python does have <a href="https://docs.python.org/3.5/tutorial/controlflow.html#lambda-expressions" rel="nofollow">lambda functions</a>, so the following does solve the problem: </p>
<pre><code># Haskell: sumFive = (+5)
sumFive = lambda x : x + 5
</code></pre>
<p>I think this is more useful with the fact that python has first class functions (<a href="http://composingprograms.com/pages/16-higher-order-functions.html" rel="nofollow">1</a>,<a href="http://effbot.org/pyfaq/how-do-you-make-a-higher-order-function-in-python.htm" rel="nofollow">2</a>)</p>
<pre><code>def summation(n, term):
    total, k = 0, 1
    while k &lt;= n:
        total, k = total + term(k), k + 1
    return total

def identity(x):
    return x

def sum_naturals(n):
    return summation(n, identity)

sum_naturals(10) # Returns 55
# Now for something a bit more complex
def pi_term(x):
    return 8 / ((4*x-3) * (4*x-1))

def pi_sum(n):
    return summation(n, pi_term)

pi_sum(1e6) # returns: 3.141592153589902
</code></pre>
<p>You can find more on functional programming and python <a href="https://newcircle.com/bookshelf/python_fundamentals_tutorial/functional_programming" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For the most generic Haskell style <em>currying</em>, look at <code>partial</code> from the <code>functools</code> module.</p>
</div>
<span class="comment-copy">Yes. Use lambda.</span>
<span class="comment-copy">That <code>plus</code> function is already in the standard library: <a href="https://docs.python.org/3.5/library/operator.html#operator.add" rel="nofollow noreferrer">docs.python.org/3.5/library/operator.html#operator.add</a></span>
<span class="comment-copy">Partial application is similar to, but distinct from, currying which is what the OP's example shows (I added an answer below showing currying).</span>
<span class="comment-copy">Good stuff here @ajcr !</span>
<span class="comment-copy">@MichalFrystacky: thank you! Glad it was useful :-)</span>
<span class="comment-copy"><code>partial</code> does partial application, not currying. Currying is turning a function <code>(a, b) -&gt; t</code> into a function <code>a -&gt; b -&gt; t</code>. Partial application is turning a function <code>(a, b) -&gt; t</code> into a function <code>b -&gt; t</code> given an <code>a</code>.</span>
