<div class="post-text" itemprop="text">
<p>I'm quite stuck on this one ^^. I have a view in which I use a function named modifier_dico which is inside a file named fonctions.py. The 2 first lines of modifier_dico are as follows :</p>
<pre><code>def modifier_dico(tweet,nom_dico, dico_cat):
    exec('dico= {}')
</code></pre>
<p>My view looks like :</p>
<pre><code>def classer_tweet(request):
    modifier_dico(tweet.text,"dico_status.txt", {})
</code></pre>
<p>When I try to access this view, I get <code>name 'dico' is not defined</code> on Django's debug page.</p>
<p>But when I look at <a href="http://i.stack.imgur.com/XzxJP.jpg" rel="nofollow">the local vars of modifier_dico in the traceback</a>, I have the variable <strong>dico</strong> with the value <strong>{}</strong></p>
<p>It looks like <code>exec()</code> is not working as I expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>You didn't specify what namespace to set the name in, so the name was set in the scope of the <code>fonctions.modifier_dico()</code> function, not <code>classer_tweet()</code>. From the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec()</code> function documentation</a>:</p>
<blockquote>
<p>In all cases, if the optional parts are omitted, the code is executed in the current scope.</p>
</blockquote>
<p>You'd have to pass in a different dictionary for the name to be set in as a second argument:</p>
<pre><code>exec('dico = {}', namespace)
</code></pre>
<p>You can't use <code>exec()</code> to set locals in a function, unless the name was <em>already</em> assigned to in a given function. This is a hard limitation due optimisations to how a local namespace in a function is accessed. From the same documentation:</p>
<blockquote>
<p><strong>Note:</strong> The default <em>locals</em> act as described for function <code>locals()</code> below: modifications to the default <em>locals</em> dictionary should not be attempted. Pass an explicit <em>locals</em> dictionary if you need to see effects of the code on <em>locals</em> after function <code>exec()</code> returns.</p>
</blockquote>
<p>and from the linked <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals()</code> function documentation</a>:</p>
<blockquote>
<p><strong>Note:</strong> The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</p>
</blockquote>
<p>As such you can't use <code>exec()</code> to set additional local variables in your view function. You really should use dictionaries anyway for arbitrary namespaces.</p>
<p>You may still see alterations in the <code>locals()</code> dictionary, but because the function returns a <em>reflection of the actual locals in one direction</em>, that local is not actually available in the function itself. In other words, the actual locals of a function are copied to a dictionary that <code>locals()</code> returns, additions to that dictionary are not copied back:</p>
<pre><code>&gt;&gt;&gt; def no_local_foo():
...     exec('foo = "bar"')
...     print(locals())
...     foo
...
&gt;&gt;&gt; no_local_foo()
{'foo': 'bar'}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in no_local_foo
NameError: name 'foo' is not defined
</code></pre>
</div>
