<div class="post-text" itemprop="text">
<p>I want to detect and store outliers from a list and this is what I am doing</p>
<p>Code:</p>
<pre><code>def outliers(y,thresh=3.5):

    m = np.median(y)
    abs_dev = np.abs(y - m)
    left_mad = np.median(abs_dev[y &lt;= m])
    right_mad = np.median(abs_dev[y &gt;= m])
    y_mad = left_mad * np.ones(len(y))
    y_mad[y &gt; m] = right_mad
    modified_z_score = 0.6745 * abs_dev / y_mad
    modified_z_score[y == m] = 0
    return modified_z_score &gt; thresh

bids = [5000,5500,4500,1000,15000,5200,4900]

z = outliers(bids)
bidd = np.array(bids)
out_liers = bidd[z]
</code></pre>
<p>This gives results as:</p>
<pre><code>out_liers = array([ 1000, 15000])
</code></pre>
<p>Is there a better way to do this, where I don't get the results in array but in a list?
Also please can someone explain me why we used </p>
<blockquote>
<p>thresh=3.5</p>
<p>modified_z_score = 0.6745 * abs_dev / y_mad</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>def outliers_modified_z_score(ys, threshold=3.5):
    ys_arr = np.array(ys)
    median_y = np.median(ys_arr)
    median_absolute_deviation_y = np.median(np.abs(ys_arr - median_y))
    modified_z_scores = 0.6745 * (ys_arr - median_y) / median_absolute_deviation_y
    return (ys_arr[np.abs(modified_z_scores) &gt; threshold]).tolist()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because you are using <code>numpy</code> function. Default type used there is <code>numpy.ndarray</code>, which speeds up the computations. In the case you just need a list as output argument, use <code>tolist()</code> method. </p>
<pre class="lang-py prettyprint-override"><code>z = outliers(bids)
bidd = np.array(bids)
out_liers = bidd[z].tolist()
</code></pre>
</div>
<span class="comment-copy">If you need a list instead of the numpy array, numpy arrays conveniently provide a <code>tolist</code> function: <code>out_liers.tolist()</code>. Your other queries are best answered by the original author of the code.</span>
<span class="comment-copy">Thanks a ton! Also could you explain the values 3.5 and 0.6745</span>
<span class="comment-copy">0.6745 is because <code>E[MAD] = 0.6745 * sigma</code> for normally distributed variables.   Try: <code>x = np.random.normal(size=100000000)</code> then <code>print(np.median(np.abs(x - np.median(x))).mean() / x.std())</code>  3.5 is also found empirically by Iglewicz and Hoaglin (the creators of the outlier test). See: <a href="https://hwbdocuments.env.nm.gov/Los%20Alamos%20National%20Labs/TA%2054/11587.pdf" rel="nofollow noreferrer">hwbdocuments.env.nm.gov/Los%20Alamos%20National%20Labs/TA%2054/â€¦</a></span>
