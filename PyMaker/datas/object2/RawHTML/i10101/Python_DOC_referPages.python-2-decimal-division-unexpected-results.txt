<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1267869/how-can-i-force-division-to-be-floating-point-division-keeps-rounding-down-to-0">How can I force division to be floating point? Division keeps rounding down to 0?</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to do the calculation</p>
<p><img alt="formula" src="https://latex.codecogs.com/gif.latex?%5Csum_%7Bn%3D1%7D%5E%7B%5C10%7D%20%5Cfrac%7B1%7D%7Bn%5E4%7D"/></p>
<p>Using the python decimal module with the following code:</p>
<pre><code>from decimal import *
getcontext().prec = 9
sum = Decimal(0)
for i in range(1,11):
    sum += Decimal(1/(i**4))
print sum
</code></pre>
<p>however, this outputs 1, not a very small fraction like I would expect. I can't find much information here <a href="https://docs.python.org/2/library/decimal.html" rel="nofollow noreferrer">https://docs.python.org/2/library/decimal.html</a> about what  is wrong with the code. My guess is sum is not being used as a Decimal in the loop, but I am unsure how to resolve that.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, don't use <code>sum</code> as a variable name, as it is a built-in.<br/>
And its sort of necessary to provide at least one float for arithmetic if you expect a float-type answer, here:</p>
<pre><code>s = Decimal(0)

for i in range(1,11):
  s += Decimal(1./(i**4)) # dividing 1. or 1.0 instead of just 1
print s
</code></pre>
<p>this gives:</p>
<pre><code>1.08203658
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use Python 2.x, then in the expression: <code>1/(i**4)</code>, the integer devision is used, as result for <code>i=1</code>, it equals to 1 and for all other <code>i&gt;1</code>, it gets 0.</p>
<p>Just add floating point to 1: <code>1./(i**4)</code>, this should fix the problem.</p>
<p>PS In Python 3.x, your code should work as expected, because operator <code>/</code> is defined on floating point numbers, while operator <code>//</code> is defined for integers.</p>
</div>
<span class="comment-copy">If you're using code from a Python 3 textbook in Python 2, skim any of the articles on the key differences. The <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">What's New in Python 3.0</a> or any of the others. Being aware of the differences upfront will save you hours of headscratching...</span>
<span class="comment-copy">Ah, thank you that did the trick. Didn't know about sum or needing to include a float. Thanks for the quick answer I will accept it in 7 minutes</span>
<span class="comment-copy">@kalenpw: Note that even so you're not getting the full precision of the <code>Decimal</code> type since you're only converting a <code>float</code> to <code>Decimal</code> (<i>after</i> the calculation). If you want high precision, you need to do <code>s += Decimal(1)/Decimal(i**4)</code>.</span>
<span class="comment-copy">Yeah this was done in 2.7, I should have included that in the question. Thanks for the tidbit on it working in 3 I will have to start using 3 more often.</span>
