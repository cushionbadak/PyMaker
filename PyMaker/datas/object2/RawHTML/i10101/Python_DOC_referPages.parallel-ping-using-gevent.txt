<div class="post-text" itemprop="text">
<p>I am new to python and I am trying to run this code to want parallel ping of multiple machines.but I can not ping all IP concurrently. seems it run one after another .can some one please guide me on how can i ping multiple server concurrently.</p>
<pre><code>import gevent
import urllib2
import os
from gevent import monkey
monkey.patch_all()


def print_head(i):
    switch='192.168.182.170'
    response = os.system("ping -c 5 " + switch)


jobs = [gevent.spawn(print_head, i) for i  in range(1,10)]
gevent.joinall(jobs, timeout=2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.system</code> is not patched, but <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.call</code></a> is patched; Replace <code>os.system</code> with <code>subprocess.call</code> (You can also use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.run</code></a> if you are using Python 3.5+)</p>
<pre><code>import subprocess

...

def print_head(i):
    switch = '192.168.182.170'
    response = subprocess.call("ping " + switch, shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>os.system("ping -c 5 " + switch)</code> is running synchronously, because the function is blocking. You should try to do it in different processes.</p>
<p>Here is a concurrent code that does the same.</p>
<pre><code>from multiprocessing import Process
import os

def print_head(i):
    switch='192.168.182.170'
    response = os.system("ping -c 5 " + switch)

processes = [Process(target=print_head, args=(i,)) for i in range(1,10)]
for process in processes:
    process.start()
</code></pre>
</div>
<span class="comment-copy">Hey tim, thanks for this solution. but if I  run it for 10000 server, it took near abt 90 seconds . Is there any way I can improve performance on this script that took less then 60 min</span>
<span class="comment-copy">90 seconds per process?</span>
<span class="comment-copy">sorry for the confusion. if i used code like ---processes = [Process(target=print_head, args=(i,)) for i in range(1,10000)] then it took neat ant 90 sec to finish. is there any way it should get closer to 60 sec.</span>
<span class="comment-copy">Can you try using a pool and map? <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy"><code>from multiprocessing import Pool import os  def print_head(i):     switch='192.168.182.170'     response = os.system("ping -c 5 " + switch)  p = Pool(10) p.map(print_head, xrange(10))</code></span>
