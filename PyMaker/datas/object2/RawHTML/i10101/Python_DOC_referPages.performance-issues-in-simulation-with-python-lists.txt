<div class="post-text" itemprop="text">
<p>I'm currently writing a simulation in python 3.4 (miniconda).
The entire simulation is quite fast but the measurement of some simulation data is bloody slow and takes about 35% of the entire simulation time. I hope I can increase the performance of the entire simulation if I could get rid of that bottleneck. I spend quite some time to figure out how to do that but unfortunately with little success. The function MeasureValues is called in every period of the simulation run.</p>
<p>If anybody has an idea how to improve the code, I would be really grateful.</p>
<p>Thank you guys.</p>
<pre><code>def MeasureValues(self, CurrentPeriod):
    if CurrentPeriod &gt; self.WarmUp:
        self.ValueOne[CurrentPeriod] = self.FixedValueOne if self.Futurevalue[CurrentPeriod + self.Reload] &gt; 0 else 0
        self.ValueTwo[CurrentPeriod] = self.VarValueTwo * self.AmountValueTwo[CurrentPeriod]
        self.ValueThree[CurrentPeriod] = self.VarValueThree  * self.AmountValueThree[CurrentPeriod]
        self.SumOfValues[CurrentPeriod] = self.ValueOne[CurrentPeriod] + self.ValueTwo[CurrentPeriod] + self.ValueThree[CurrentPeriod]
        self.TotalSumOfValues += self.SumOfValues[CurrentPeriod]

        self.HelperSumValueFour += self.ValueFour[CurrentPeriod]
        self.HelperSumValueTwo += self.AmountValueTwo[CurrentPeriod]
        self.HelperSumValueFive += self.ValueFive[CurrentPeriod]

        self.RatioOne[CurrentPeriod] = (1 - (self.HelperSumValueFour / self.HelperSumValueFive )) if self.HelperSumValueFive &gt; 0 else 1
        self.RatioTwo[CurrentPeriod] = (1 - (self.HelperSumValueTwo  / self.HelperSumValueFive )) if self.HelperSumValueFive &gt; 0 else 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code looks basic enough that there aren't any obvious gaps for optimisation without substantial restructuring (which I don't know enough about your overall architecture to suggest).</p>
<p>Try installing <a href="http://cython.org/" rel="nofollow"><code>cython</code></a> - I believe nowadays you can install it with <code>pip install cython</code> - then use it to see if you can speed up your code any.</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the comments the function is quite simple, and with the provided code I don't see a way to optimize it directly.</p>
<p>You can try different approaches:</p>
<ol>
<li><a href="http://pypy.org/" rel="nofollow noreferrer">PyPy</a>, this may works depending on your current codebase and external dependecies.</li>
<li><a href="http://cython.org/" rel="nofollow noreferrer">Cython</a> as suggested by <em>holdenweb</em>, but you need to redefine a lot of stuff to be static-typed (using <code>cdef</code>) or nothing will change.</li>
<li>rewrite the function in C as a <a href="https://docs.python.org/3/extending/extending.html" rel="nofollow noreferrer">Python extension</a>, this may take some time, especially if you have no experience in C programming.</li>
</ol>
<p>The <code>PyPy</code> way seems the most reasonable, if it works you will gain a boost for all the simulations code.</p>
</div>
<span class="comment-copy">If you have variables that are named <code>varOne</code>, <code>varTwo</code>, ... <code>varN</code>, that typically means you should have a list of <code>vars</code>. Also, Python conventions use <code>lowercase_separated</code> variable names, not titled <code>CamelCase</code></span>
<span class="comment-copy">That's just due to the simplification of the example :)</span>
<span class="comment-copy">Alright. Well, I'm just seeing some simple math here. Where is the bottleneck?</span>
<span class="comment-copy">The whole function is the bottleneck of my simulation. Everything else is really fast.</span>
<span class="comment-copy">The function look quite simple, only math and some list (?) index-based access, so I don't see the problem there, If you can provide more informations: how did you estimate the function performances? Can you provide the complete code? Can you provide some number that quantify "bloody slow"?</span>
<span class="comment-copy">Either I did it wrong or it doesn't change anything. I installed cython, compiled my simulation skript and run it from a different python skript.</span>
<span class="comment-copy">Is that the right way? I just did it as it is explained in the first example here <a href="http://cython.readthedocs.io/en/latest/src/tutorial/cython_tutorial.html" rel="nofollow noreferrer">cython.readthedocs.io/en/latest/src/tutorial/â€¦</a></span>
