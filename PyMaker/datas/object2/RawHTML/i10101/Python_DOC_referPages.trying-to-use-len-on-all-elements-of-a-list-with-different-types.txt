<div class="post-text" itemprop="text">
<p>I have to code as an assignment, a program which returns a list of the same lenght of the input list with a '*' if the input date isn't in the correct format (gg-mm-yyyy) else it returns the month abbreviation (ex. nov for november). The input is given by the check program.
If I didn't explain it well there is an example</p>
<p>input list -&gt; <code>[1,'10-10-2007', '2-3-1962','home', '31-11-2007']</code></p>
<p>output list -&gt; <code>['*', 'october', '*', '*', '*']</code></p>
<p>Now where's my problem. I'm trying to run something like this</p>
<pre><code>months=[1,'10-10-2007', '2-3-1962','casa', '31-11-2007']
b=['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
c=0
d=10

 if len(months[c]) == d:
    z+=1
    if months[c][3] == 1:
        e=10+months[c][4]
        c=c+1
    else e=months[c][4]
        c=c+1
 else
    c=c+1
    print('*')
print(b[e-1])
</code></pre>
<p>The error I'm getting now is </p>
<pre><code>TypeError: object of type 'int' has no len()
</code></pre>
<p>and I've understood that <code>int</code> can't have length. But how can I translate the <code>int</code> to something that could have length?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are assuming you can use <code>len()</code> on all your elements in the input list, but integers do not have a length.</p>
<p>You could use exception handling to work around such limitations:</p>
<pre><code>try:
    if len(months[c]) == d:
        # ...
except TypeError:
    # not an object with length, can't be a date
</code></pre>
<p>I'd strongly recommend you use the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow"><code>datetime</code> module</a> here instead, and try if parsing with the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow"><code>datetime.datetime.strptime()</code> method</a> succeeds. Again, use exception handling to ignore anything that can't be parsed:</p>
<pre><code>import datetime
import calendar

def extract_month(value):
    try:
        if len(value) != 10:
            return '*'   # only dates of *exactly* 10 characters
        dt = datetime.datetime.strptime(value, '%d-%m-%Y')
        return calendar.month_abbr[dt.month].lower()
    except (ValueError, TypeError):
        return '*'
</code></pre>
<p><code>datetime.datetime.strptime()</code> will raise a <code>TypeError</code> exception when it is passed something that isn't a string, and a <code>ValueError</code> if the value <em>is</em> a string but can't be parsed with the supplied pattern (which here looks for a <code>dd-mm-yyyy</code>-style date).</p>
<p>I used the <a href="https://docs.python.org/3/library/calendar.html#calendar.month_abbr" rel="nofollow"><code>calendar.month_abbr</code> sequence</a> to supply the abbreviated month names; if you need to have full month names, swap that out for <a href="https://docs.python.org/3/library/calendar.html#calendar.month_name" rel="nofollow"><code>calendar.month_name</code></a> (your question expected output uses full names but your code uses abbreviations).</p>
<p>With that function to supply month names) you can trivially convert your input:</p>
<pre><code>outputlist = [extract_month(value) for value in inputlist]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You start with an <em>empty</em> list for outgoing, and just <em>add</em> those "*"/month-name entries afterwards; like:</p>
<pre><code>outgoing = []
outgoing.append( ... whatever ... )
</code></pre>
<p>For that "decision" part - simply don't call <em>len</em> on each entry. Instead, check its type, and work from there. See <a href="https://stackoverflow.com/questions/8964191/test-type-of-elements-python-tuple-list">here</a> for one way of doing that!</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you should first check whether you have a string value to begin with:</p>
<pre><code>if isinstance(months[c], str) and len(months[c])==d:
</code></pre>
<p>Second, and most important, parsing a string and/or comparing against some pattern (i.e. gg-mm-yyyy) is usually done with regular expressions rather than manually. It's quicker and cleaner. I won't give you a complete solution (since this is an assignment), but <a href="https://docs.python.org/3.5/howto/regex.html" rel="nofollow">here</a> you can read more about regular expressions in Python and how to use them, usage examples included. </p>
<p>Hope that helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>len(months[c])</code> you are asking for the <code>c</code>th element of months to get the length from.</p>
<p>Since the first element of <code>months</code> is the <code>int</code>, <code>1</code>, and <code>c == 0</code> you're actually asking:</p>
<pre><code>len(months[c])
# which becomes
len(1)
# This raises a TypeError.
</code></pre>
<p>You are correct, <code>int</code> types don't have lengths like lists or strings, so you've got a few options.</p>
<ol>
<li><p>Make sure everything that goes through is a string</p>
<pre><code>len(str(months[c]))
</code></pre>
<p>the method <code>str()</code> will convert <code>1</code> into <code>"1"</code>.</p></li>
<li><p>Catch your error straight away using <code>try:catch</code></p>
<pre><code>try:
    str_length = len(months[c])
except TypeError:
    # Do something so we know this is invalid
</code></pre></li>
<li><p>Check that your types are <code>str</code> before testing:</p>
<pre><code>if isinstance(months[c], str):
    # do the usual stuff
else:
    # this is invalid
</code></pre></li>
</ol>
<p>That all being said, this isn't your only problem with your code. You're going to be making comparisons later on between strings and integers which will always fail. And some false data can pass through (what if I have a string of length 10 that isn't a proper date?). I'd really suggest reading through some documentation on <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow">python types and comparisons</a>.</p>
</div>
<span class="comment-copy">Your sample output uses the <i>full</i> month name <code>october</code>, but your code uses abbreviations. In my answer I used <code>calendar.month_abbr</code> to provide abbreviated month names, but if you need to have <i>full</i> month names, simply replate the <code>_abbr</code> part with <code>_name</code> to use <a href="https://docs.python.org/3/library/calendar.html#calendar.month_name" rel="nofollow noreferrer"><code>calendar.month_name</code></a>. You may want to clarify what you need.</span>
<span class="comment-copy">Thank you , but the problem with this method is that i get printed both  '10-10-2007' '2-3-1962' , where the second one isn't correct since it should have 02-03 to be correct. is there any way where i can modify it with " '%d-%m-%Y' "</span>
<span class="comment-copy">@over96: <code>2-3-1962</code> is parsed without issue. The leading zeros are optional to <code>datetime.strptime()</code>.</span>
<span class="comment-copy">@over96: or do you mean that the method should return <code>'*'</code> when you get that value instead of <code>mar</code>?</span>
<span class="comment-copy">the method should return '*' when you get that value instead of mar</span>
<span class="comment-copy">@over96: then simply add <code>if len(value) != 10: return '*'</code> right after the <code>try:</code>.</span>
<span class="comment-copy">See my updated answer.</span>
<span class="comment-copy">Also, testing for a type is one option (look before you leap), but catching the exception <i>may</i> be a better solution (ask for forgiveness).</span>
<span class="comment-copy">He has all <i>kinds</i> of elements in his input list. In such a situation, I think is actually <i>better</i> to A) identify those objects that <i>might</i> need conversion B) convert those ... and C) just default "*" for any other.</span>
<span class="comment-copy">It depends on the expected mix which one is better. Testing each element <i>takes time</i>. So does catching the exception if one is raised. So if there are a <i>lot</i> of integers in the list, then testing may be a better option, but that's <i>not a given</i>.</span>
<span class="comment-copy">See <a href="//softwareengineering.stackexchange.com/a/175663">Python Forgiveness vs. Permission and Duck Typing</a> for more details.</span>
