<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I want to create variables dynamically via a while loop in Python. Does anyone have any creative means of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless there is an overwhelming need to create a mess of variable names, I would just use a dictionary, where you can dynamically create the key names and associate a value to each.</p>
<pre><code>a = {}
k = 0
while k &lt; 10:
    &lt;dynamically create key&gt; 
    key = ...
    &lt;calculate value&gt; 
    value = ...
    a[key] = value 
    k += 1
</code></pre>
<p>There are also some interesting data structures in the new 'collections' module that might be applicable:</p>
<p><a href="http://docs.python.org/dev/library/collections.html">http://docs.python.org/dev/library/collections.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>playing with globals() makes it possible:</p>
<pre><code>import random

alphabet = tuple('abcdefghijklmnopqrstuvwxyz')


print '\n'.join(repr(u) for u in globals() if not u.startswith('__'))

for i in xrange(8):
    globals()[''.join(random.sample(alphabet,random.randint(3,26)))] = random.choice(alphabet)

print

print '\n'.join(repr((u,globals()[u])) for u in globals() if not u.startswith('__'))
</code></pre>
<p>one result:</p>
<pre><code>'alphabet'
'random'

('hadmgoixzkcptsbwjfyrelvnqu', 'h')
('nzklv', 'o')
('alphabet', ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'))
('random', &lt;module 'random' from 'G:\Python27\lib\random.pyc'&gt;)
('ckpnwqguzyslmjveotxfbadh', 'f')
('i', 7)
('xwbujzkicyd', 'j')
('isjckyngxvaofdbeqwutl', 'n')
('wmt', 'g')
('aesyhvmw', 'q')
('azfjndwhkqgmtyeb', 'o')
</code></pre>
<p>I used random because you don't explain which names of "variables" to give, and which values to create. Because i don't think it's possible to create a name without making it binded to an object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the exec() method. For example, say you have a dictionary and you want to turn each key into a variable with its original dictionary value can do the following.</p>
<p><strong>Python 2</strong></p>
<pre><code>&gt;&gt;&gt; c = {"one": 1, "two": 2}
&gt;&gt;&gt; for k,v in c.iteritems():
...    exec("%s=%s" % (k,v))

&gt;&gt;&gt; one
1
&gt;&gt;&gt; two
2
</code></pre>
<p><strong>Python 3</strong></p>
<pre><code>&gt;&gt;&gt; c = {"one": 1, "two": 2}
&gt;&gt;&gt; for k,v in c.items():
...    exec("%s=%s" % (k,v))

&gt;&gt;&gt; one
1
&gt;&gt;&gt; two
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Stuffing things into the global and/or local namespaces is not a good idea. Using a dict is so some-other-language-ish ... <code>d['constant-key'] = value</code> just looks awkward. Python is OO. In the words of a master: """Namespaces are one honking great idea -- let's do more of those!"""</p>
<p>Like this:</p>
<pre><code>&gt;&gt;&gt; class Record(object):
...     pass
...
&gt;&gt;&gt; r = Record()
&gt;&gt;&gt; r.foo = 'oof'
&gt;&gt;&gt; setattr(r, 'bar', 'rab')
&gt;&gt;&gt; r.foo
'oof'
&gt;&gt;&gt; r.bar
'rab'
&gt;&gt;&gt; names = 'id description price'.split()
&gt;&gt;&gt; values = [666, 'duct tape', 3.45]
&gt;&gt;&gt; s = Record()
&gt;&gt;&gt; for name, value in zip(names, values):
...     setattr(s, name, value)
...
&gt;&gt;&gt; s.__dict__ # If you are suffering from dict withdrawal symptoms
{'price': 3.45, 'id': 666, 'description': 'duct tape'}
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/faq/programming.html#how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another" rel="nofollow">Keyword parameters</a> allow you to pass variables from one function to another. In this way you can use the key of a dictionary as a variable name (which can be populated in your <code>while</code> loop). The dictionary name just needs to be preceded by <code>**</code> when it is called.</p>
<pre><code># create a dictionary
&gt;&gt;&gt; kwargs = {}
# add a key of name and assign it a value, later we'll use this key as a variable
&gt;&gt;&gt; kwargs['name'] = 'python'

# an example function to use the variable
&gt;&gt;&gt; def print_name(name):
...   print name

# call the example function
&gt;&gt;&gt; print_name(**kwargs)
python
</code></pre>
<p>Without <code>**</code>, <code>kwargs</code> is just a dictionary:</p>
<pre><code>&gt;&gt;&gt; print_name(kwargs)
{'name': 'python'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>NOTE: This should be considered a discussion rather than an actual answer.</strong></p>
<p>An approximate approach is to operate <code>__main__</code> in the module you want to create variables. For example there's a <code>b.py</code>:</p>
<pre><code>#!/usr/bin/env python
# coding: utf-8


def set_vars():
    import __main__
    print '__main__', __main__
    __main__.B = 1

try:
    print B
except NameError as e:
    print e

set_vars()

print 'B: %s' % B
</code></pre>
<p>Running it would output</p>
<pre><code>$ python b.py
name 'B' is not defined
__main__ &lt;module '__main__' from 'b.py'&gt;
B: 1
</code></pre>
<p>But this approach only works in a single module script, because the <code>__main__</code> it import will always represent the module of the entry script being executed by python, this means that if <code>b.py</code> is involved by other code,  the <code>B</code> variable will be created in the scope of the entry script instead of in <code>b.py</code> itself. Assume there is a script <code>a.py</code>:</p>
<pre><code>#!/usr/bin/env python
# coding: utf-8

try:
    import b
except NameError as e:
    print e

print 'in a.py: B', B
</code></pre>
<p>Running it would output</p>
<pre><code>$ python a.py
name 'B' is not defined
__main__ &lt;module '__main__' from 'a.py'&gt;
name 'B' is not defined
in a.py: B 1
</code></pre>
<p>Note that the <code>__main__</code> is changed to <code>'a.py'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>vars()['meta_anio_2012'] = 'translate'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For free-dom:</p>
<pre><code>import random

alphabet = tuple('abcdefghijklmnopqrstuvwxyz')

globkeys = globals().keys()
globkeys.append('globkeys') # because name 'globkeys' is now also in globals()

print 'globkeys==',globkeys
print
print "globals().keys()==",globals().keys()

for i in xrange(8):
    globals()[''.join(random.sample(alphabet,random.randint(3,26)))] = random.choice(alphabet)
del i

newnames = [ x for x in globals().keys() if x not in globkeys ]
print
print 'newnames==',newnames

print
print "globals().keys()==",globals().keys()

print
print '\n'.join(repr((u,globals()[u])) for u in newnames)
</code></pre>
<p>Result</p>
<pre><code>globkeys== ['__builtins__', 'alphabet', 'random', '__package__', '__name__', '__doc__', 'globkeys']

globals().keys()== ['__builtins__', 'alphabet', 'random', '__package__', '__name__', 'globkeys', '__doc__']

newnames== ['fztkebyrdwcigsmulnoaph', 'umkfcvztleoij', 'kbutmzfgpcdqanrivwsxly', 'lxzmaysuornvdpjqfetbchgik', 'wznptbyermclfdghqxjvki', 'lwg', 'vsolxgkz', 'yobtlkqh']

globals().keys()== ['fztkebyrdwcigsmulnoaph', 'umkfcvztleoij', 'newnames', 'kbutmzfgpcdqanrivwsxly', '__builtins__', 'alphabet', 'random', 'lxzmaysuornvdpjqfetbchgik', '__package__', 'wznptbyermclfdghqxjvki', 'lwg', 'x', 'vsolxgkz', '__name__', 'globkeys', '__doc__', 'yobtlkqh']

('fztkebyrdwcigsmulnoaph', 't')
('umkfcvztleoij', 'p')
('kbutmzfgpcdqanrivwsxly', 'a')
('lxzmaysuornvdpjqfetbchgik', 'n')
('wznptbyermclfdghqxjvki', 't')
('lwg', 'j')
('vsolxgkz', 'w')
('yobtlkqh', 'c')
</code></pre>
<p>Another way:</p>
<pre><code>import random

pool_of_names = []
for i in xrange(1000):
    v = 'LXM'+str(random.randrange(10,100000))
    if v not in globals():
        pool_of_names.append(v)

alphabet = 'abcdefghijklmnopqrstuvwxyz' 

print 'globals().keys()==',globals().keys()

print
for j in xrange(8):
    globals()[pool_of_names[j]] = random.choice(alphabet)
newnames = pool_of_names[0:j+1]

print
print 'globals().keys()==',globals().keys()

print
print '\n'.join(repr((u,globals()[u])) for u in newnames)
</code></pre>
<p>result:</p>
<pre><code>globals().keys()== ['__builtins__', 'alphabet', 'random', '__package__', 'i', 'v', '__name__', '__doc__', 'pool_of_names']


globals().keys()== ['LXM7646', 'random', 'newnames', 'LXM95826', 'pool_of_names', 'LXM66380', 'alphabet', 'LXM84070', '__package__', 'LXM8644', '__doc__', 'LXM33579', '__builtins__', '__name__', 'LXM58418', 'i', 'j', 'LXM24703', 'v']

('LXM66380', 'v')
('LXM7646', 'a')
('LXM8644', 'm')
('LXM24703', 'r')
('LXM58418', 'g')
('LXM84070', 'c')
('LXM95826', 'e')
('LXM33579', 'j')
</code></pre>
</div>
<span class="comment-copy">Can you explain "via to a while loop?" I have no idea what that means.</span>
<span class="comment-copy">To solve what problem? Need some context.</span>
<span class="comment-copy">I'm wanting to create a while loop and inside that loop have it create variables over and over until I tell it to stop. Does this make any sense?</span>
<span class="comment-copy">what do you mean 'dynamically create variables?' Dynamically how? Can you just use a dictionary and assign various values of it?</span>
<span class="comment-copy">@Trivikram: Incorrect, the variable scope is the entire function, not just the while loop.</span>
<span class="comment-copy">@Josh and others... Creating an item (key,value) in a dictionary <code>a</code> isn't very different from creating the same in <code>locals()</code> or <code>globals()</code> that are implemented as dictionaries too. I wonder why I have been downvoted by some downvote sniper for my answer creating an item in <code>globals()</code> while the answer of Gintautas Miliauskas is upvoted and this answer that doesn't give the how-to for <code>&lt;dynamically create key&gt; </code> is upvoted 3 times.</span>
<span class="comment-copy">@eyquem I did not give any specific way to create the key because I know nothing about the naming scheme the OP needs in practice. Instead I just gave the most generic and clean scheme possible to solve the problem.</span>
<span class="comment-copy">@eyquem local variables aren't implemented as dictionaries. Almost always, the <code>locals()</code> function creates a dictionary from the local variables but the dictionary doesn't exist unless you call <code>locals()</code>.</span>
<span class="comment-copy">@eyquem, the local namespace is implemented as slots on the stack so the bytecode can reference them directly as offsets in the stack frame (plus free variables which are also included when you call <code>locals()</code>. The exception is in Python 2.x when you use <code>exec</code> inside a function without specifying a local namespace for the exec. I'm not sure offhand where this is documented: it isn't part of the language definition because different implementations can choose differently how to implement the locals namespace.</span>
<span class="comment-copy">This is the best answer. This should be the canonical question as a result.</span>
<span class="comment-copy">The OP needs a way to create many values associated with many names.  He worded that as "dynamically create variables," but using a dictionary is the right way to solve his real problem.</span>
<span class="comment-copy">@Ned Batchelder Maybe the question is misguided. But I think it could be better for him to receive two answers: 1- yes you can do what you want 2- but the way you want to enter in isn't a godd one for this ans that reason. Doing so, the OP would learn two things: that Python is powerfull, and some advice to code correctly. On the contrary, if anybody is prevented to think by his own and to think about a problem, it is a restraint put on brain_storming and reflexion</span>
<span class="comment-copy">I think the reason you are being downvoted is because spamming keys in to the globals dict is generally not considered a best practice. In fact in your own code example, what would you suppose happens if your random key generator were to generate a key that was already in the globals dict (for example the key "alphabet").  Also, I think it was implied by the OPs question that he would need to get his "variables" after they were created. How can he differentiate his dynamic variables from the ones that already existed in global scope using your solution? A separate dict is better in this case.</span>
<span class="comment-copy">It's a good answer. I stumbled upon the answer with a legitimate need to do this, preventing me from having to write a nearly duplicated question.</span>
<span class="comment-copy">It is worth pointing out that this answers provides the way to dynamically create <i>global</i> variables. This means that every variable defined on <code>globals()</code> will go on the module namespace and stay there until the end of the program. Most of the times when one says "variable" they mean a <i>function local</i> variable, which only exists in the context of the execution of a function. In this case <code>globals()</code> is likely not the solution to the problem. Consider explicitly using a dictionary, as in the answer provided by JoshAdel.</span>
<span class="comment-copy">Yes, this would work, but I don't know why you would do this - remember Explicit is better than implicit, and "Readability Counts". This is just a bad idea IMHO.</span>
<span class="comment-copy">@chris-piekarski Thanks for this answer. One reason for wanting to do such thing is when you need to communicate with a 3rd-party software that expects inputs passed as local variables, and at compile time you don't know the variables that it expects (I'm creating a Paraview plugin, for example, and it imposes this kind of constraints).</span>
<span class="comment-copy">Be aware that this will not work in Python 3 within a function execution context. It still is fine in the top level (module) context. If you need to create a module variable, I would suggest editing the <code>globals()</code> dict, or calling <code>setattr()</code> on the module object.</span>
<span class="comment-copy">Let me also underline that, in general, this poses a security risk when the keys or values are provided by external data (user input, a file or anything). The usual warnings when using eval/exec apply. You don't want someone to set the value to <code>"send_me_all_your_private_data()"</code> and get it executed on your machine.</span>
<span class="comment-copy">Actually, this is a very good answer, and the only solution in specific circumstances.  Say you have an array that represents an inventory.  Say this inventory can have containers inside of it, and these containers has an inventory of its own, representing the items the container is holding.  This is the only way that I know of to be able to store INDEXES in a string, and be able to change it, and access different indexes dynamically, e.g. if you change which container you are looking inside of.</span>
<span class="comment-copy">I don't understand what you want to say. Why global and local namespaces are not good ideas ? Because <i>"most namespaces are currently implemented as Python dictionaries"</i> ? and that dictionaries are <i>"some-other-language-ish"</i> ? Why this criticism about dictionaries ?  You think that the namespace of an instance is a better thing to use than a dictionary ?  Well... do you know that:</span>
<span class="comment-copy"><i>"A namespace is a mapping from names to objects. <b>Most namespaces are currently implemented as Python dictionaries</b>, but that's normally not noticeable in any way (except for performance), and it may change in the future. Examples of namespaces are: the set of built-in names (functions such as abs(), and built-in exception names); the global names in a module; and the local names in a function invocation. <b>In a sense the set of attributes of an object also form a namespace.</b> "</i></span>
<span class="comment-copy">(<a href="http://docs.python.org/release/2.5/tut/node11.html#SECTION0011200000000000000000" rel="nofollow noreferrer">docs.python.org/release/2.5/tut/…</a>) The author is GvR himself, it's written in the 2.5 version, but not later, that's why I give this link</span>
<span class="comment-copy">It seems there is no salvation outside dictionaries. Anyway, Python is based on objects and use mappings between the names and the objects everywhere, it's the data model, so it isn't possible to escape to that fact. That's what I think. Am I wrong ?</span>
<span class="comment-copy">By the way: despite my argumentation, I prefer your solution. It's clearer ans simpler than the use of globals(). I like the use of setattr()</span>
<span class="comment-copy">This is the same as doing <code>locals()['meta_anio_2012'] = 'translate'</code>, which won't work in a function and is specifically warned against in the documentation.  It also suffers from many of the problems pointed out in the comments to other answers.</span>
<span class="comment-copy">There is absolutely nothing wrong with using the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer">vars()</a> function to modify an object's variables, but you would need to update it slightly to use it to set the variables to a module (by passing in the module object). <code>vars(sys.modules[__name__])['my_variable'] = 'value'</code> There is nothing wrong with doing this as it fetches the underlying object's <code>__dict__</code>. The only time this may not work is if the object being fetched has write permissions on attributes.</span>
<span class="comment-copy">-1: saying it twice doesn't make it a good idea.  Modifying globals() is bad, and should only be done in very specialized circumstances, usually involving coding tools.  If you need a dynamic set of named values, use a dictionary, it's what they're there for.</span>
<span class="comment-copy">Why add to globals() just to have to turn around and keep a separate list of all the names you dumped in there?  A dictionary will handle all of that for you, in a cleaner, simpler, more understandable, more flexible, and safer way.  Just because you <i>can</i> do something doesn't mean you <i>should</i> do something.</span>
<span class="comment-copy">@Ned Batchelder Downvoting twice doesn't make me undertsand more. I don't pretend that these two codes are perfect arguments: they are only answers to criticism made by free-dom on 2 points. They don't want to prove that it is good to use <code>globals()['X']</code> to create a new object with name <b>X</b> that will be used as following: <code>li.append(X)</code> etc etc;</span>
<span class="comment-copy">@Ned Batchelder Now, thanks to the answer and the CODE of John Machin, I know another manner: creating a new attribute in an instance with the name <b>X</b>, using setattr() : that's fine. Or I understand nothing. Until now, I wrote several codes, and John Machin also, and Duncan gave me precise explanations, while you only  merely contented to downvote twice and to emit dogmatic sentence that <i>Modifying globals() is bad</i> Your downvotes begin to bore me and they don't make me understand</span>
<span class="comment-copy">@Ned Batchelder Moreover, modifying globals() can't be bad in the absolute, since it IS modified when we just wrote <code>v = 48</code> or <code>for i in xrange(20)</code> . I think that it's for a great part because writing <code>globals()["v"] = 48</code> looks long and weird that it is badly considered. But where is the real weirdness in that ? I don'y understand.</span>
