<div class="post-text" itemprop="text">
<p>I am fairly new to Python and have taken the code excerpt below from a book I'm working with. </p>
<p>It is listed below <strong>exactly</strong> as it is written and explained in the book but yet it throws the following error:</p>
<pre><code>TypeError: super() takes at least 1 argument (0 given)
</code></pre>
<p>When I try to give <code>super</code> an argument, it tells me it needs to be of type.</p>
<p>I've searched multiple threads and haven't had any luck yet.</p>
<pre><code>class Car():
    """A simple attempt to represent a car"""

    def __init__(self, make, model, year):
        """Initialize attributes to describe a car"""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0


    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = str(self.year) + ' ' + self.make + ' ' + self.model
        return long_name.title()

class ElectricCar(Car):

    def __init__(self, make, model, year):
        super().__init__(make, model, year)


my_tesla = ElectricCar('tesla', 'model s', 2016)
print(my_tesla.get_descriptive_name())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're running Python 2, not Python 3. <a href="https://docs.python.org/2/library/functions.html#super" rel="nofollow">Python 2's <code>super</code></a> requires at least one argument (the type in which this method was defined), and usually two (current type and <code>self</code>). Only <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">Python 3's <code>super</code></a> can be called without arguments.</p>
<p>Confirm by adding the following to the top of your script, which will report the actual version you're running under:</p>
<pre><code>import sys

print(sys.version_info)
</code></pre>
<p>Note: Since you're not doing anything in <code>ElectricCar</code>'s <code>__init__</code> aside from delegating to <code>Car</code>'s <code>__init__</code> with the same arguments, you can skip defining <code>__init__</code> for <code>ElectricCar</code> entirely. You only need to override <code>__init__</code> with explicit delegation if initializing <code>ElectricCar</code> involves doing something different from initializing a <code>Car</code>, otherwise, <code>Car</code>s initializer is called automatically when initializing a <code>Car</code> subclass that does not define <code>__init__</code>. As written, you could simplify <code>ElectricCar</code> to:</p>
<pre><code>class ElectricCar(Car):
    pass
</code></pre>
<p>and it would behave identically (it would run slightly faster by avoiding the unnecessary interception and delegation of <code>__init__</code>, that's all).</p>
</div>
<div class="post-text" itemprop="text">
<p>In python 2.7 your ElectricCar class would look like this:</p>
<pre><code>class Car(object):
    blah blah blah


class ElectricCar(Car):
    def __init__(self, make, model, year):
        super(ElectricCar, self).__init__(make, model, year)
</code></pre>
</div>
<span class="comment-copy">That is valid Python 3 code, so you're probably using Python 2 if you're having problems.</span>
<span class="comment-copy">^ This is valid Python code, so you're probably using a "version formerly known as python" ...</span>
<span class="comment-copy">And moreover - in Python 2 classes should always inherit from <code>object</code> - otherwise very few mechanisms to access attributes - <code>super</code> inclusive, won't work.</span>
<span class="comment-copy">@jsbueno: Yar. You can do so explicitly, or add <code>__metaclass__ = type</code> near the top of your file (before defining any of your classes) to make all classes defined in it implicitly new-style even on Python 2 (Python 3 ignores <code>__metaclass__</code>, so there is no cost there). In this case though, the problem is that the OP thinks they're on Py3, while actually on Py2, and running the correct version of Python would eliminate the issue.</span>
<span class="comment-copy">That was indeed the issue. Thanks for your help.</span>
