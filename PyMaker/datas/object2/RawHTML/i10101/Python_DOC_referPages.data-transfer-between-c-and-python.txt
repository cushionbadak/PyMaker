<div class="post-text" itemprop="text">
<p>I would like to share memory between C++ and Python.</p>
<p>My problem:</p>
<ol>
<li>I am working with big data sets (up to 6 GB of RAM) in C++. All calculations are done in c++.</li>
<li>Then, I want to "paste" all my results to a Python program. But I can only write my data on disk, and then read that file from Python, which is not efficient. </li>
</ol>
<p>Is there any way to "map" memory corresponding to C++ variables so that I may access the data from Python? I don't want to copy 6GB of data onto a hard drive. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>First path</strong>: I think the more appropriate way for you to go is <a href="https://docs.python.org/3.4/library/ctypes.html" rel="nofollow">ctypes</a>. You can create a shared library, and then load the functions of the shared library in Python, and fill all the data containers you want in Python.</p>
<p>In Windows, you can create a DLL, and in Linux you can create a shared .so library.</p>
<p>Now this has the advantage that this will be independent of your Python version.</p>
<p><strong>Second path</strong>: I think it's less appropriate but you can get it to work, which is the <a href="https://docs.python.org/3.4/extending/extending.html" rel="nofollow">Python C Extension</a>. With this, you can call Python data containers (<code>PyObject</code>s) and fill them inside C.</p>
<p>However, the code you compile here will always need to be linked to Python libraries.</p>
<p><strong>Which one to use?</strong>: </p>
<ul>
<li>Use ctypes if you have some functions you want to call in C/C++, and then do the rest of the work in Python.</li>
<li>Use Python C Extension if you have some functions you want to call in Python, and you want to do the rest in C/C++.</li>
</ul>
<p>With both options, you can transfer huge blocks of memory between C++ and Python without necessarily involving any disk read/write operations.</p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">You may want to search Google/Bing for "InterProcess Communication" (IPC); and you may want to see <a href="http://stackoverflow.com/questions/6915191/simple-ipc-between-c-and-python-cross-platform">this</a> Stackoverflow post</span>
<span class="comment-copy">Depending on how large a code base you have in C++, it might be an idea to use something like <a href="http://cython.org/" rel="nofollow noreferrer">Cython</a>.</span>
<span class="comment-copy">@WhiZTiM thx, currently i am thinking about IPC method: Shared memory, leater about sockets or mapping file to memory.  I know that python dont have pointers, but is there any way to access memory via address ?</span>
<span class="comment-copy">@Bendik about 7k of c++ lines, and it is still growing. atm i am thinking about reading data in python via memory adress</span>
<span class="comment-copy">You might want to <a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">embed the python interpreter</a> in your c++ program, that would allow you to give python code access to its data using <a href="https://docs.python.org/3/c-api/" rel="nofollow noreferrer">python APIs</a>.</span>
<span class="comment-copy">Yup it helps. Thank you, btw great nick.</span>
<span class="comment-copy">@cukier9a7b5 Glad it helps. Btw, there are many wrappers that make using C Extension easier, like Boost and SWIG. Consider these too. I just remember them now. Cheers!</span>
