<div class="post-text" itemprop="text">
<p>I am looking for the most efficient way to count the number of letters in a list. I need something like</p>
<pre><code>word=[h e l l o]

for i in alphabet:
   for j in word:
      if j==i:
         ## do something
</code></pre>
<p>Where <em>alphabet</em> should be the <strong>spanish</strong> alphabet, that is the english alphabet including the special character <em>'ñ'</em>.</p>
<p>I have thought about creating a list of pairs in the form of [[a, 0], [b,1], ...] but I suppose there is a more efficient/clean way.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not actually a dupe as you want to filter to only count characters from a certain set, you can use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a> dict to do the counting  and a set of allowed characters to filter by:</p>
<pre><code>word = ["h", "e", "l", "l", "o"]

from collections import Counter
from string import ascii_lowercase

# create a set of the characters you want to count.
allowed = set(ascii_lowercase + 'ñ')

# use a Counter dict to get the counts, only counting chars that are in the allowed set.
counts = Counter(s for s in word if s in allowed)
</code></pre>
<p>If you actually just want the total sum:</p>
<pre><code>total = sum(s in allowed for s in word)
</code></pre>
<p>Or using a functional approach:</p>
<pre><code>total = sum(1 for _ in filter(allowed.__contains__, word))
</code></pre>
<p>Using  <em>filter</em> is going to be a bit faster for any approach:</p>
<pre><code>In [31]: from collections import Counter
    ...: from string import ascii_lowercase, digits
    ...: from random import choice
    ...: 

In [32]: chars = [choice(digits+ascii_lowercase+'ñ') for _ in range(100000)]

In [33]: timeit Counter(s for s in chars if s in allowed)

100 loops, best of 3: 36.8 ms per loop


In [34]: timeit Counter(filter(allowed.__contains__, chars))
10 loops, best of 3: 31.7 ms per loop

In [35]: timeit sum(s in allowed for s in chars)
10 loops, best of 3: 35.4 ms per loop

In [36]: timeit sum(1 for _ in filter(allowed.__contains__, chars))

100 loops, best of 3: 32 ms per loop
</code></pre>
<p>If you want a case insensitive match, use <em>ascii_letters</em> and add <code>'ñÑ'</code>:</p>
<pre><code>from string import ascii_letters

allowed = set(ascii_letters+ 'ñÑ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is pretty easy:</p>
<pre><code>import collections
print collections.Counter("señor")
</code></pre>
<p>This prints:</p>
<pre><code>Counter({'s': 1, 'r': 1, 'e': 1, '\xa4': 1, 'o': 1})
</code></pre>
</div>
<span class="comment-copy"><code>word.count('ñ')</code> or better <code>Counter(word)</code></span>
<span class="comment-copy">I do not know Spanish. But based on what I got on internet, it has other characters as well apart from just <code>ñ</code>. Check <a href="http://sites.psu.edu/symbolcodes/languages/psu/spanish/" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">@anonymous, <i>Where alphabet should be the spanish alphabet, that is the <b>english</b> alphabet including the special character 'ñ'.</i> That is exactly what  <code>ascii_lowercase + 'ñ'</code> is.</span>
<span class="comment-copy">@anonymous If you are refering to the characters á é í ó ú ü, I am not considering those. If you are considering characters like 'ch' or 'll', these are no longer characters of the spanish alphabet.</span>
<span class="comment-copy">This wouldn't work if <code>word</code> had capital letters in it  - <code>counts = Counter(s.lower() for s in word if s.lower() in allowed)</code> would catch this if needed (at least for the English alphabet)</span>
<span class="comment-copy">@asingtoruin,  <code>map(str.lower, word)</code> or using <code>ascii_letters</code> would do it if that is a requirement.</span>
