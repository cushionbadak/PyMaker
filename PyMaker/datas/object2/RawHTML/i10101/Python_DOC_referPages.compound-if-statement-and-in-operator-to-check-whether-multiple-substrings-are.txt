<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15112125/how-to-test-multiple-variables-against-a-value">How to test multiple variables against a value?</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>I am checking whether two substrings are contained in another string:</p>
<pre><code>if (substr1 and substr2) in str:
    my_func()
</code></pre>
<p>This does not work, the if statement is already being entered when only one substring is part of the string. Can someone explain why?</p>
<p>I found the following workaround, I'd simply like to know why Python behaves that way.</p>
<pre><code>substr_list = [substr1, substr2]
if all(substr in str for substr in substr_list):
    my_func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't work because <code>(substr1 and substr2)</code> return <code>substr2</code> or operand which can convert to False and after this you verify <code>if substr2 in str</code></p>
<pre><code>'' and 'Some string'  # ''
'some value' and 'some value 2' # 'some value 2'
# full example
string_variable = 'some value' and 'some value 2' # You get 'some value 2'
string_variable in substr2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So <code>and</code> works to check if two booleans (<code>True/False</code> values) are <code>True</code>, however <code>(substr1 and substr2)</code> is not a boolean. However, <code>substr1 in str</code> and <code>substr2 in str</code> and both booleans, so you can create a statement:</p>
<pre><code>if substr1 in str and substr2 in str:
    myfunc()
</code></pre>
<p>Now in</p>
<pre><code>substr_list = [substr1, substr2]
if all(substr in str for substr in substr_list):
    my_func()
</code></pre>
<p>The statement <code>(substr in str for substr in substr_list)</code> creates a generator that will return two boolean values. What <code>all</code> does is takes any iterable such a list of generator of booleans and returns a single boolean checking if they are all <code>True</code>. </p>
</div>
<span class="comment-copy"><code>(substr1 and substr2)</code> is a boolean.  Is the result of this expression in your string? No. Then you need to use separate expressions <code>if substr1 in str and substr2 in str:</code></span>
<span class="comment-copy">Intro: <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">shortcircuiting</a>. The items in the parens are evaluated first and only one is taken. Bonus: Do not use <code>str</code> as a name. <code>str</code> is a builtin function which gets shadowed after an assignment to the name.</span>
<span class="comment-copy">@Moses Koledoye: Thank you for introducing me to the term shortcircuiting</span>
<span class="comment-copy">@DavidZemens: Thanks I felt like this was some specific behavior of the <code>in</code> operator</span>
<span class="comment-copy"><b>False</b>: <i>return substr2 or False</i>. It returns one of the operands.  See <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">shortcircuiting</a></span>
<span class="comment-copy">You are right, not False but operand that give False. Edit answer</span>
