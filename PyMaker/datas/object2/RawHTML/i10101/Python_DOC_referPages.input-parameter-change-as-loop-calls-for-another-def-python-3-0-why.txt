<div class="post-text" itemprop="text">
<p>I can just not figure out why my input parameter(board) is changing in the loop..</p>
<p>The def iterate takes in the list "board" from def initiate. And it should do this once, and I checked, it is only calling def initiate once. The problem occurs in the loop "for i in range(0,size()):" in def iterate. Here, the list "old_board" somehow changes. If I have 5 rounds and 5 lists in the list "old_board", the second round changes the values of old_board[1] and so on.. Why is this happening? And how can I solve it?</p>
<p>(Parameter list and list in the loop should be equal)</p>
<p>This is the output:</p>
<p>"This is the parameter list  : [[1, 1, 0, 1, 0], [1, 1, 1, 0, 1], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 0, 1, 0]]</p>
<p>This is the list in the loop: [[1, 1, 0, 1, 0], [1, 1, 1, 0, 1], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 0, 1, 0]]</p>
<p>This is the list in the loop: [[0, 0, 0, 1, 0], [1, 1, 1, 0, 1], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 0, 1, 0]]</p>
<p>This is the list in the loop: [[0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 0, 1, 0]]</p>
<p>This is the list in the loop: [[0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 1], [1, 0, 0, 1, 0]]</p>
<p>This is the list in the loop: [[0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [1, 0, 0, 1, 0]]"</p>
<p>This is the code:</p>
<pre><code>def iterate(board):
    old_board = board
    print('This is the parameter list  :',old_board)
    new_board = board                                       
    living = 0                                                  # Value of alive cells in the future new board

    for i in range(0,size()):                                # Nestled loop that iterate through the old board
        print('This is the list in the loop:',old_board)
        for j in range(0,size()):                            # and sets new values depending on the status of each old cell
            new_value = living_neighbors(i,j,old_board)[1]
            new_board[i][j] = new_value
            living += new_value
    print(new_board)
    print(living) 

    return (living, new_board)
iterate(initiate()[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By doing this</p>
<pre><code>old_board = board
new_board = board 
</code></pre>
<p>You don't create new objects but merely new references to the existing ones. 
You can use the copy module or the syntax suggested by Alex to create new objects.</p>
<pre><code>from copy import deepcopy
old_board = deepcopy(board)
</code></pre>
<p>Here you can find a detailed explanation:
<a href="http://www.python-course.eu/deep_copy.php" rel="nofollow">http://www.python-course.eu/deep_copy.php</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here, you don't copy your list, you just make a new link to existing list</p>
<pre><code>old_board = board
print('This is the parameter list  :',old_board)
new_board = board   
</code></pre>
<p>If you need a copy of it, you should do it like this:</p>
<pre><code>old_board = board[:]
print('This is the parameter list  :',old_board)
new_board = board[:]   
</code></pre>
<p>see <a href="https://docs.python.org/3/faq/programming.html#how-do-i-copy-an-object-in-python" rel="nofollow">FAQ</a></p>
</div>
<span class="comment-copy">old_board = board = new_board etc makes all these variable point to the same list. When you edit that list you will edit them all. If you write something like old_board = board[:] instead this should work</span>
<span class="comment-copy">Great thanks Dawid. This explains it.</span>
<span class="comment-copy">Thanks for your reply, It got me into understanding the problem.</span>
