<div class="post-text" itemprop="text">
<p>I'm trying to do a test run of the <code>logging</code> module's <code>RotatingFileHandler</code> as follows:</p>
<pre><code>import logging
from logging.handlers import RotatingFileHandler

# logging.basicConfig(filename="example.log", level=logging.DEBUG)

logger = logging.getLogger('my_logger')
handler = RotatingFileHandler("my_log.log", maxBytes=2000, backupCount=10)
logger.addHandler(handler)

for _ in range(10000):
    logger.debug("Hello, world!")
</code></pre>
<p>However, with <code>logging.basicConfig</code> line commented out, the resulting <code>my_log.log</code> file contains no data:</p>
<p><a href="https://i.stack.imgur.com/Q3CoP.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Q3CoP.png"/></a></p>
<p>If I comment in the line with <code>logging.basicConfig(filename="example.log", level=logging.DEBUG)</code>, I get the expected <code>my_log.log</code> files with numbered suffixes. However, there is also the <code>example.log</code> which is a (relatively) large file:</p>
<p><a href="https://i.stack.imgur.com/J77C7.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/J77C7.png"/></a></p>
<p>How can I set up the logging so that it only generates the <code>my_log.log</code> files, and not the large <code>example.log</code> file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python provides 5 logging levels out of the box (in increasing order of severity): <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code>. The default one <a href="https://docs.python.org/3/howto/logging.html#what-happens-if-no-configuration-is-provided" rel="noreferrer">is <code>WARNING</code></a>. The docs says, that</p>
<blockquote>
<p>Logging messages which are less severe than <em>lvl</em> will be ignored.</p>
</blockquote>
<p>So if you use <code>.debug</code> with the default settings, you won't see anything in your logs.</p>
<p>The easiest fix would be to use <code>logger.warning</code> function rather that <code>logger.debug</code>:</p>
<pre><code>import logging
from logging.handlers import RotatingFileHandler

logger = logging.getLogger('my_logger')
handler = RotatingFileHandler('my_log.log', maxBytes=2000, backupCount=10)
logger.addHandler(handler)

for _ in range(10000):
    logger.warning('Hello, world!')
</code></pre>
<p>And if you want to change logger level you can use <a href="https://docs.python.org/3/library/logging.html#logging.Logger.setLevel" rel="noreferrer"><code>.setLevel</code></a> method:</p>
<pre><code>import logging
from logging.handlers import RotatingFileHandler

logger = logging.getLogger('my_logger')
logger.setLevel(logging.DEBUG)
handler = RotatingFileHandler('my_log.log', maxBytes=2000, backupCount=10)
logger.addHandler(handler)

for _ in range(10000):
    logger.debug('Hello, world!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found that to obtain the desired behavior one has to use the same name in the <code>basicConfig</code> and <code>RotatingFileHandler</code> initializations:</p>
<pre><code>import logging
from logging.handlers import RotatingFileHandler

logging.basicConfig(filename="my_log.log", level=logging.DEBUG)

logger = logging.getLogger('my_logger')
handler = RotatingFileHandler("my_log.log", maxBytes=2000, backupCount=10)
logger.addHandler(handler)

for _ in range(10000):
    logger.debug("Hello, world!")
</code></pre>
<p>Here, I have chose the same name <code>my_log.log</code>. This results in only the 'size-limited' logs being created:</p>
<p><a href="https://i.stack.imgur.com/85XGh.png" rel="nofollow"><img alt="enter image description here" src="https://i.stack.imgur.com/85XGh.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>All previous answers are correct, here another way of doing the same thing except we use logging config file instead.</p>
<p><strong>logging_config.ini</strong></p>
<p>Here is the config file :</p>
<pre><code>[loggers]
keys=root

[handlers]
keys=logfile

[formatters]
keys=logfileformatter

[logger_root]
level=DEBUG
handlers=logfile

[formatter_logfileformatter]
format=%(asctime)s %(name)-12s: %(levelname)s %(message)s

[handler_logfile]
class=handlers.RotatingFileHandler
level=DEBUG
args=('testing.log','a',10,100)
formatter=logfileformatter
</code></pre>
<p><strong>myScrypt.py</strong></p>
<p>here is simple logging script that uses the above config file</p>
<pre><code>import logging
from logging.config import fileConfig

fileConfig('logging_config.ini')
logger = logging.getLogger()
logger.debug('the best scripting language is python in the world')
</code></pre>
<p><strong>RESULT</strong></p>
<p>here is the result, notice maxBytes is set to 10 but in real life, that's clearly too small.
 (args=('testing.log','a',10,100)</p>
<p><a href="https://i.stack.imgur.com/OjtZA.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/OjtZA.png"/></a></p>
</div>
<span class="comment-copy">At first it wasn't clear to me how this answers the question, but key point is that log messages which are not above the level set for the logger (in the <code>debug()</code>, <code>info()</code>, <code>warning()</code>, <code>error()</code>, <code>exception()</code>, <code>critical()</code> hierarchy) do not get logged (in this case, written to the output file).</span>
<span class="comment-copy">@Kurt, good point, I'll update my answer.</span>
<span class="comment-copy">In my 'real' application, I would actually like to have two loggers: one which prints to the console, and one which is saved to a file. I've read that in such cases, one should not use <code>basicConfig</code>, which is meant for if there is a single logger. So I would still be interested why this code doesn't work without the <code>basicConfig</code> line.</span>
<span class="comment-copy">Look at my answer, it has an explanation, why you code doesn't work without the <code>basicConfig</code> line.</span>
