<div class="post-text" itemprop="text">
<p>Python beginner here. I'm writing a program that uses an infinite loop and allows the user to enter key terms to access different 'tools' or 'modules'.</p>
<p>Within one of these 'modules', the user can enter a value and convert it to binary. I want to:</p>
<ol>
<li>Allow the program to recognize if the value is either an int or a
float and then run code that converts the value to binary </li>
<li>Allow the program to recognize if the value entered is a str and the str says 'back', in which the current loop will be exited.</li>
</ol>
<p>As far as I know this issue is occurring as input() converts whatever is entered to a str automatically (due to: <a href="http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/io.html" rel="nofollow noreferrer">http://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/io.html</a> "First it prints the string you give as a parameter"). </p>
<p>How can I make the code below recognize if the input is a str, float, or int and then execute the relevant if statements? Currently, this part of my code can accept 'back' to exit out of the loop but will take any int or float value as a str, making the program prompt the user to enter a decimal value once more. </p>
<pre><code>    #decimal to binary   
    while search == "d2b":
        dec2bin = input("\nDecimal Value: ")
        if type(dec2bin) == int:
            print("Binary Value: " + "{0:b}".format(dec2bin))
        elif type (dec2bin) == str:
            if dec2bin == "back":
                search = 0
        elif type (dec2bin) == float:
                #code for float to binary goes here
</code></pre>
<p>Edit: not the same as this thread (<a href="https://stackoverflow.com/questions/22214313/python-analyzing-input-to-see-if-its-an-integer-float-or-string">Python: Analyzing input to see if its an integer, float, or string</a>), as a list is used there over input()
E2: cannot seem to use suggested duplicate as a solution to issue. However, a comment in this thread by Francisco has the solution</p>
</div>
<div class="post-text" itemprop="text">
<p>Use exceptions! The <code>int</code> and <code>float</code> functions throw a <code>ValueError</code> exception when they can't convert the value passed.</p>
<pre><code>while search == "d2b":
    dec2bin = input("\nDecimal Value: ")
    try:
        dec2bin = int(dec2bin)
    except ValueError:
        pass
    else:
        print("Binary Value: " + "{0:b}".format(dec2bin))
        continue

    try:
        dec2bin = float(dec2bin)
    except ValueError:
        pass
    else:
        #code for float to binary goes here
        continue

    if dec2bin == "back":
        search = 0
</code></pre>
<p>The order in which you try the conversions is important, since every value passed to <code>int</code> is valid with <code>float</code>, and every value passed to <code>float</code> is a valid to be passed to <code>str</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow"><code>str.isalpha()</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>str.isdigit()</code></a> to achieve this. Hence your code will be as:</p>
<pre><code>while search == "d2b":
    dec2bin = input("\nDecimal Value: ")
    if dec2bin.lstrip("-").isdigit():
        print("Binary Value: " + "{0:b}".format(int(dec2bin))) # OR, simply bin(int(dec2bin))
    elif dec2bin.isalpha():  # OR, isalnum() based on the requirement
        if dec2bin == "back":
            search = 0
    else:
        try:
            _ = float(dec2bin)
        except:
            pass
        else:
            #code for float to binary goes here
</code></pre>
<p>Here, I am using <a href="https://docs.python.org/2/library/string.html#string.lstrip" rel="nofollow"><code>str.lstrip()</code></a> to remove <code>-</code> from the start of the string as <code>.isdigit()</code> can not check for <em>negative number string.</em></p>
<p>Refer <a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow">Python 3: String Methods</a> for complete list of methods available with <code>str</code> objects.</p>
</div>
<span class="comment-copy">The question tagged as duplicate wasn't really. That was how to find the type of objects in a list -- not the type that a string could be converted into.</span>
<span class="comment-copy">This seems to work correctly in my code, thanks. If you don't mind- can floats be formatted to binary in similar ways to how ints can? I'm doing some experimenting now with what I know about formatting and getting errors.</span>
<span class="comment-copy">@CharlieWebb Depends on what you mean by converting a <code>float</code> to binary, maybe <a href="https://stackoverflow.com/questions/16444726/binary-representation-of-float-in-python-bits-not-hex">this</a> answers your question.</span>
<span class="comment-copy">So currently the</span>
<span class="comment-copy">So currently the code formats ints into binary as per:   dec2bin = input("\nDecimal Value: ")     try:         dec2bin = int(dec2bin)     except ValueError:         pass     else:         print("Binary Value: " + "{0:b}".format(dec2bin))         continue  Is something similar possible at the end of the float section of the code? Will I need to convert the float to a str or int? In terms of my own python knowledge reading that thread you linked is a bit of a no go at the moment- I don't understand most of the code in the replies.</span>
<span class="comment-copy">You can have a negative number</span>
<span class="comment-copy">@PadraicCunningham: Updated the answer. Thanks for bringing it to notice.</span>
<span class="comment-copy">I am out of votes so cannot +1, also you might want to look at what isdecimal does ;)</span>
<span class="comment-copy">@PadraicCunningham: I would have. But the machine I am using right now is not having Python 3 installed. Please feel free to edit the answer if I did something wrong.</span>
<span class="comment-copy">OK. I am on my another machine now. You are right. Updated the answer with <i>traditional</i> <code>try/except</code></span>
