<div class="post-text" itemprop="text">
<p>When trying to run the following code:</p>
<pre><code>i = 0
def truc():
    print (i)
    if (False): i = 0
truc()
</code></pre>
<p>it yields an UnboundLocalError, but</p>
<pre><code>i = 0
def truc():
    print (i)
    #if (False): i = 0
truc()
</code></pre>
<p>doesn't.</p>
<p>Is that a wanted behaviour ?</p>
<p>Is there a way to modify the value of a variable without creating a new one ? I could use a dict of one element. It works but it seems ugly:</p>
<pre><code>i = {0 : 0}
def truc():
    print (i[0])
    if (False): i[0] = 0
truc()
</code></pre>
<p>Isn't it a better solution ?</p>
</div>
<div class="post-text" itemprop="text">
<p>just add</p>
<pre><code>global i
</code></pre>
<p>at the beginning of the method <code>truc()</code> to declare that <code>i</code> is global variable</p>
<pre><code>def truc():
    global i
    if (False):
        i = 0
</code></pre>
<p>Take a look at this <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow">topic in Python's FAQ</a> to get more informations</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>i = 0
def truc():
    global i
    print (i)
    if (False): i = 0
truc()
</code></pre>
<p>To refer the outer scope variable of the function, <code>i</code> should be declared as global.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to add <code>global i</code> to the function.</p>
<pre><code>i = 0
def truc():
    global i
    if (False):
        i = 0
</code></pre>
<p>Other ways to handle this problem is:</p>
<p>Making <code>i</code> capitalized you'll be able to access it without the <code>global</code>        however <code>i</code> is then unchangeable which seems like something that isn't appropriate in your case.</p>
<p>Taking <code>i</code> as an argument. This makes the code less messy and easier to debug later.</p>
</div>
<span class="comment-copy">Bad but quick way: add <code>global i</code> to the function. Good way that takes a few more characters: don't change global variables from within a function, instead pass it in as a parameter and return the new value, calling it with <code>i = truc(i)</code>. Much more controllable in the long run.</span>
<span class="comment-copy">return the new value and set the variable equal to the return value, you could also use a class and make it an attribute, just avoid using global.</span>
