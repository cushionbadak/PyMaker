<div class="post-text" itemprop="text">
<p>I'm just starting out with Python and wondering how I would go about sorting this</p>
<p>list from the earliest time to the latest.</p>
<pre><code>('5:00PM','2:00PM','7:00AM','8:45PM','12:00PM')
</code></pre>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3 with standard library only:</p>
<pre><code>import time
hours = ('5:00PM','2:00PM','7:00AM','8:45PM','12:00PM')
format = '%I:%M%p'
time_hours = [time.strptime(t, format) for t in hours]
result = [time.strftime(format, h) for h in sorted(time_hours)]
assert result == ['07:00AM', '12:00PM', '02:00PM', '05:00PM', '08:45PM']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend that you install the PyPi <a href="https://pypi.python.org/pypi/DateTime/4.0.1" rel="nofollow">DateTime</a> package and use those facilities for whatever manipulation you desire.  The problem at hand would look something like:</p>
<pre><code>stamps = ('5:00PM','2:00PM','7:00AM','8:45PM','12:00PM')
DT_stamps = [DateTime(s) for s in stamps]
DT_stamps.sort()
</code></pre>
<p>Implementation details are left as an exercise for the student.  :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>If the times are always going to be in that format, you could split the times into subsections.</p>
<pre><code>x = "12:30PM"
# Use python's string slicing to split on the last two characters
time, day_half = x[:-2], x[-2:]
# Use python's string.split() function to get the difference between hours and minutes
# Because "11" &lt; "2" for strings, we need to convert them to integers
hour, minute = [int(t) for t in time.split(":")]
# Get the remainder because 12 should actually be 0
hour = hour % 12
# Output it as a tuple, which sorts based on each element from left to right
sortable = (day_half, hour, minute)
#: ("PM", 12, 30)
</code></pre>
<p>To wrap it all up, use something like:</p>
<pre><code>def sortable_time(time_str):
    time, day_half = time_str[:-2], time_str[-2:]
    hour, minute = [int(t) for t in time.split(":")]
    hour = hour % 12
    return day_half, hour, minute

# When sorting, use `key` to define the method we're sorting with
# (The returned list however, will be filled with the original strings)
result = sorted(your_time_list, key=sortable_time)
#: ['7:00AM', '12:00PM', '2:00PM', '5:00PM', '8:45PM']
</code></pre>
<p>If you're not guaranteed to have the two letters at the end, or the colon in the middle, you're best off using a library like what is suggested by Prune.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're showing isn't a list of times, it's a tuple of strings. Tuples are immutable and can't be sorted, only mutable collections like lists can be. So first you need to convert your tuple to a list:</p>
<pre><code>times = ['5:00PM','2:00PM','7:00AM','8:45PM','12:00PM']
</code></pre>
<p>You could try sorting this list now, but the strings won't sort the way you expect. Instead, you need to create a custom sort function that will temporarily convert the values in the list to <code>struct_time</code> objects and sort using those.</p>
<pre><code>import time

time_format = '%I:%M%p' # match hours, minutes and AM/PM

def compare_as_time(time_str1, time_str2):
    # parse time strings to time objects
    time1 = time.strptime(time_str1, time_format)
    time2 = time.strptime(time_str2, time_format)

    # return comparison, sort expects -1, 1 or 0 to determine order
    if time1 &lt; time2:
        return -1
    elif time1 &gt; time2:
        return 1
    else:
        return 0
</code></pre>
<p>Now you can call <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow"><code>sorted()</code></a> and pass in your list and your custom comparison function and you'll get a list of strings back, sorted by the time in those strings:</p>
<pre><code>sorted_times = sorted(times, compare_as_time)
</code></pre>
<p><strong>Note for Python 3:</strong> The previous example assumes Python 2. If you're using Python 3, you'll need to convert the comparison function to a <a href="https://docs.python.org/3/glossary.html#term-key-function" rel="nofollow"><code>key function</code></a>. This can be done using <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow"><code>functools.cmp_to_key()</code></a> as follows:</p>
<pre><code>form functools import cmp_to_key

sorted_times = sorted(times, key=cmp_to_key(compare_as_time))
</code></pre>
</div>
<span class="comment-copy">What have you tried? Show your work. Also, these aren't a list of times, they're strings.</span>
<span class="comment-copy">What are your sorting conditions? What you are showing is a tuple and not a list. Have you tried to do this yet? Can you show your code?</span>
<span class="comment-copy">Write a function that returns a 24hr equivalent integer of the times in the list then use it as the key function for <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">list.sort()</a></span>
<span class="comment-copy">This doesn't leave the result with a list of sorted strings.</span>
<span class="comment-copy">OP declared them to be a list of times, not strings, so I chose this tack.  If the true problem is to sort strings, then we'll get a clarification to that effect Real Soon Now.  :-)</span>
<span class="comment-copy">thank you for the response! I believe i'm only allowed to use the standard library.</span>
<span class="comment-copy">No problem @alex756 If any of these responses helped you, don't forget to upvote and mark one of them as correct so others can find the answers.</span>
<span class="comment-copy">Even in Python2 you can just specify the <code>key</code> function. Which would simplify your function to a simple: <code>sorted(times, key=lambda x: time.strptime(x, time_format))</code>. Note: I actually don't like <code>lambdas</code> but in comments it's hard to <code>def</code> functions.</span>
<span class="comment-copy">I intentionally wrote this out long for to illustrate how sorting with a custom comparator works. The OP is trying to learn and apply this so the one liner isn't as helpful.</span>
<span class="comment-copy">If you think it's helpful to illustrate removed features (<code>cmp</code> was removed from sorted in Python3) then please add a Warning that the answer only works with python2. The OP did not specify his version so it's at least probable that your answer does not work for him. :-)</span>
<span class="comment-copy">@MSeifert I've updated the answer to include a Python 3 adaptation.</span>
