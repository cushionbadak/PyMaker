<div class="post-text" itemprop="text">
<p>I started learning about asynchronous code, and I have read a lot, but I just can't seem to find very simple examples to try it by myself and understand it better.</p>
<p>I want to write a simple Python (preferably 3.5) program that does the following:</p>
<p>1) Call the dummy async function <code>dummy()</code> that just waits for a few seconds and returns something<br/>
2) Continue doing stuff until <code>dummy()</code> returns something<br/>
3) Retrieve the return value from <code>dummy()</code> and put in a variable<br/>
4) Proceed on doing stuff</p>
<p>How can I do this?</p>
<p><strong>EDIT:</strong><br/>
Sorry if this wasn't clear, but I know how to do this using threading. I'm aiming for doing this using the <em>async-await</em> statements and the <em>asyncio</em> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>To try to answer your question I've modified one of the example from the asyncio docs to include more of what you are asking for. <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">https://docs.python.org/3/library/asyncio-task.html</a></p>
<pre><code>import asyncio

result2 = 0

async def compute(x, y):
    print("Compute %s + %s ..." % (x, y))
    await asyncio.sleep(1.0)
    result2 = x*y
    return x + y

async def print_sum(x, y):
    result = await compute(x, y)
    print("%s + %s = %s" % (x, y, result))

async def dosomethingelse():
    print("I've got a lovely bunch of coconuts")

loop = asyncio.get_event_loop()
tasks = [print_sum(1, 2),
   dosomethingelse(),
   compute(2, 4)
   ]
loop.run_until_complete(asyncio.wait(tasks))
loop.close()
print(result2)
</code></pre>
<p>If you run the above you should see that dosomethingelse runs, while compute is waiting. </p>
<p>I found asynchronous programming really hard to wrap my mind around. But I think that asyncio is actually much more straightforward than threading or multiprocessing because everything runs in the same memory space and (with simple coroutines like this) the program flow is completely sequential. The first task runs until it hits an <code>await</code>, then the next task gets a chance, and so on. I highly recommend reading through the module documentation, which is quite good and trying to write some examples to explore each topic. Start with coroutines, then chaining, and then callbacks. </p>
<p>EDIT: I'll leave this here as I think it's a good simple example. Comment if you disagree. Note that the <code>yield from</code> syntax is because I was using a slightly older version of python 3 at the time.</p>
<p>I don't remember what tutorial I was reading but here is one of the first asyncio tests I wrote.</p>
<pre><code>import asyncio

@asyncio.coroutine
def my_coroutine(task_name, seconds_to_sleep=3):
    print("{0} sleeping for: {1} seconds".format(task_name, seconds_to_sleep))
    yield from asyncio.sleep(seconds_to_sleep)
    print("{0} is finished".format(task_name))

loop = asyncio.get_event_loop()
tasks = [my_coroutine("task1", 4),
        my_coroutine("task2", 2),
        my_coroutine("task3", 10)]

loop.run_until_complete(asyncio.wait(tasks))
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>to stick to your question (because there are other ways to achieve what you want), a simple answer would be as follows:</p>
<pre><code>import threading
import time


results = []

def dummy():
    time.sleep(2)
    results.append("This function result!")
    return

t = threading.Thread(target=dummy)
t.start()

while t.isAlive():
    print('Something')

print(results)  # ['This function result!']
</code></pre>
</div>
<span class="comment-copy">If you really want to write it yourself, not someone from SO community, you can start reading python documentation on <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a></span>
<span class="comment-copy">Thanks but:how do I keep doing <b>other</b> stuff while the</span>
<span class="comment-copy">Thanks but how do I keep doing <b>other</b> stuff while <code>my_coroutine</code> instances are running? And how do I get the return value when using <code>run_until_complete</code>?</span>
<span class="comment-copy">@user3134477 Every time a coroutine reaches a yield statement the event loop gives execution time to another coroutine.  So your &lt;b&gt;other&lt;/b&gt; stuff just goes into another coroutine.</span>
<span class="comment-copy">@user3134477 one of the great things about coroutines is that they share memory space. That means you can use a global object to store the result.</span>
<span class="comment-copy">That is probably the simplest way to get that functionality, but I believe the OP wanted a solution using <a href="https://docs.python.org/3/reference/compound_stmts.html#coroutine-function-definition" rel="nofollow noreferrer"><code>async</code></a></span>
<span class="comment-copy">@zvone I can't see how you believe that, because  he said "but I just can't seem to find very simple examples to try it by myself and understand it better.", from  this, I understand that he just wants a simple working example that does what  he explained in his question.</span>
<span class="comment-copy">That is my conclusion, based on usage of word <i>async</i>. But the question is not clear. If there was some example of an attempt, it would be easier to understand.</span>
<span class="comment-copy">I agree with you that with an example we can understand what OP is trying to achieve, but for me "asynchronous application" does not mean <code>asyncio</code>.</span>
