<div class="post-text" itemprop="text">
<p>I'm trying to see whether an instance of an attribute already exists for my object. As you can see below, I want to do something if my <code>Dog</code> object has a certain attribute, via the <code>do_something_if_has_aged</code> method. How can I check whether a certain attribute has already been declared? Usually you would check for existence with something like this, which returns <code>False</code>:</p>
<pre><code>obj = None
if obj:
    print(True)
else:
    print(False)
</code></pre>
<p>Here's my minimum reproducible example:</p>
<pre><code>&gt;&gt;&gt; class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def add_years(self, years):
        self.age += years
        self.has_aged = True
    def do_something_if_has_aged(self):
        if self.has_aged:
            print("The dog has aged and is %d years closer to death" % self.years)
        else:
            print("The dog hasn't aged, apparently.")


&gt;&gt;&gt; dog = Dog('Spot', 3)
&gt;&gt;&gt; dog.age
3
&gt;&gt;&gt; dog.do_something_if_has_aged()
Traceback (most recent call last):
  File "&lt;pyshell#193&gt;", line 1, in &lt;module&gt;
    dog.do_something_if_has_aged()
  File "&lt;pyshell#190&gt;", line 9, in do_something_if_has_aged
    if not self.has_aged:
AttributeError: 'Dog' object has no attribute 'has_aged'
&gt;&gt;&gt; dog.add_years(1)
&gt;&gt;&gt; dog.age
4
&gt;&gt;&gt; dog.do_something_if_has_aged()
The dog hasn't aged, apparently.
</code></pre>
<p>Clearly the dog <em>has aged</em>, though.</p>
<p>I apologize if the title doesn't reflect what I'm trying to convey below; I'm new to OOP.</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than test for the attribute, set a default value on the class; if an instance attribute is missing Python looks for a class attribute instead:</p>
<pre><code>class Dog:
    has_aged = False  # default for all instances
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def add_years(self, years):
        self.age += years
        self.has_aged = True  # sets an instance attribute
    def do_something_if_has_aged(self):
        if self.has_aged:
            print("The dog has aged and is %d years closer to death" % self.years)
        else:
            print("The dog hasn't aged, apparently.")
</code></pre>
<p>(note that I had to invert your test, if <code>self.has_aged</code> is <em>true</em> you want to go into the first branch, not the other way around).</p>
<p>Or you can set a default value for the attribute in the <code>__init__</code>:</p>
<pre><code>class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.has_aged = False
    def add_years(self, years):
        self.age += years
        self.has_aged = True
    def do_something_if_has_aged(self):
        if self.has_aged:
            print("The dog has aged and is %d years closer to death" % self.years)
        else:
            print("The dog hasn't aged, apparently.")
</code></pre>
<p>You can also test if an attribute is present with the <a href="https://docs.python.org/3/library/functions.html#hasattr" rel="nofollow"><code>hasattr()</code> function</a>:</p>
<pre><code>def do_something_if_has_aged(self):
    if hasattr(self 'has_aged') and self.has_aged:
        print("The dog has aged and is %d years closer to death" % self.years)
    else:
        print("The dog hasn't aged, apparently.")
</code></pre>
<p>or by using the <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow"><code>getattr()</code> function</a> with a default value:</p>
<pre><code>def do_something_if_has_aged(self):
    if not getattr(self 'has_aged', False):
        print("The dog has aged and is %d years closer to death" % self.years)
    else:
        print("The dog hasn't aged, apparently.")
</code></pre>
<p>However, testing dynamically for attributes should not be the first option you pick; having a class default is much cleaner.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are looking for the <a href="https://docs.python.org/2/library/functions.html#hasattr" rel="nofollow"><code>hasattr</code></a> built-in function:</p>
<pre><code>&gt;&gt;&gt; class Dog(object):
...     pass
...
&gt;&gt;&gt; a = Dog()
&gt;&gt;&gt; hasattr(a, 'age')
False
&gt;&gt;&gt; a.age = 7
&gt;&gt;&gt; hasattr(a, 'age')
True
</code></pre>
<p>In your case, you can modify as follows:</p>
<pre><code>def do_something_if_has_aged(self):
    if hasattr(self, 'has_aged'):
        pass # do your logic
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would rewrite the <code>__init__</code> method to include <code>self.has_aged = False</code> to avoid having to do inspection:</p>
<pre><code>class Dog(object):
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.has_aged = False # Starting value so it is guaranteed to be defined (unless explicitly deleted).
</code></pre>
<p>Now, the rest of your class should work as written. However, if you want to see if an attribute has been defined on an object, you can write this:</p>
<pre><code>class Foo(object):
    def set_bar(self):
        self.bar = True # Define the attribute bar if it is not yet defined.

    def is_bar_set(self):
        return hasattr(self, 'bar')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check if using <code>hasattr</code> is perfectly fine, but in case you are looking for a quick fix for you code, you can do initialize the variable as false before hand:</p>
<pre><code>class Dog:
  has_aged = False
</code></pre>
<p>and also the fix your condition as i think it should be reversed:</p>
<pre><code>def do_something_if_has_aged(self):
  if self.has_aged:    # instead of not self.has_aged
    print("The dog has aged and is %d years closer to death" % self.years)
  else:
    print("The dog hasn't aged, apparently.")
</code></pre>
</div>
<span class="comment-copy">Your condition is the wrong way round: you should do <code>if self.has_aged</code>.</span>
<span class="comment-copy">What's the advantage of <code>has_aged</code> being a class variable instead of an instance variable (defined in <code>__init__</code>)?</span>
<span class="comment-copy">@JosieThompson: there is only one copy of the variable (so a memory advantage); why give all instances the attribute when the default could just be stored on the class?</span>
