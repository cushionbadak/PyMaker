<div class="post-text" itemprop="text">
<p>I want to read the lines from a file and write from a specific line number to another file. I have this script, which writes all the read lines. I need to skip the first four lines and write the rest to another fils. Any ideas?</p>
<pre><code>for k in range (0,16):
    print 'k =',k
    from  abaqus import session
    k=k+1
    print k 
    f1 = open('VY_NM_VR_lin_o1_bonded_results_{k}.txt'.format(k=k))
    #with open('VY_{k}'.format(k=k), 'a') as f1:
    lines = f1.readlines()
    for i, line in enumerate(lines):
        #print i    
        print(repr(line))               
        #if line.startswith(searchquery):
        f2.write(line)
        #f2.write('%s'%listc + "\n")
        i = i+1
        #else :
        #    i = i+1
        #os.close(f1)
    f1.close()

f2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code> is designed for this</a>:</p>
<pre><code>import itertools

with open('VY_NM_VR_lin_o1_bonded_results_{k}.txt'.format(k=k)) as f1:
    # islice w/4 &amp; None skips first four lines of f1, then generates the rest,
    # and writelines can take that iterator directly to write them all out
    f2.writelines(itertools.islice(f1, 4, None))
</code></pre>
<p>If you need to process the lines as you go, then skip <code>writelines</code> and go back to:</p>
<pre><code>    for line in itertools.islice(f1, 4, None):
        ... do stuff with line ...
        f2.write(line)
</code></pre>
<p>Either way, you never even see the first four lines (Python is reading them and discarding them for you seamlessly).</p>
</div>
<span class="comment-copy">Why not just slice the lines? <code>for line in lines[3:]:</code></span>
<span class="comment-copy">In a python for loop, you can use "continue" to jump to the next iteration of the loop. Where might you use that to skip reading some lines? Your "k" corresponds to a line number, doesn't it?</span>
<span class="comment-copy">What @Gator_Python says or <code>while i &lt; 4: continue</code></span>
<span class="comment-copy">@Jacob Panikulam, k refer to the number of the file to be opened.</span>
<span class="comment-copy">Note: This also improves on the original code by not storing all the lines in memory just to write them out again. <code>file.readlines()</code> is code smell; most posters here don't actually need it, they just don't understand that files are already iterators over their lines, and create potentially huge <code>list</code>s of the lines needlessly, when line-by-line processing is far more scalable. This solution will only read a line at a time, and write a line at a time, so peak memory usage is much lower when the file is huge.</span>
<span class="comment-copy">thank you it works. Do you know how also how can I change the writting format? I read the values of two columns and I just want to add a comma "," between the values.</span>
<span class="comment-copy">@GeMa: Well, if you're writing CSV, I suggest wrapping the output file in <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer"><code>csv.writer</code></a> and passing a <code>tuple</code>/<code>list</code> of values to <code>writerow</code> calls. Your code as provided gives no indication as to where the value pairs are coming from though.</span>
<span class="comment-copy">I read .txt files and I want to skip the first four lines and then add a comma beteween the values. The file to open has two columns with values without a comma between them.</span>
<span class="comment-copy">@GeMa: What is between them then? How are they separated? Tabs, fixed number of space(s), variable number of spaces, colons, etc.?</span>
