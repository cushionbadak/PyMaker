<div class="post-text" itemprop="text">
<p>I have a decimal to binary converter as seen below:</p>
<pre><code>print ("Welcome to August's decimal to binary converter.")
while True:
    value = int(input("Please enter enter a positive integer to be converted to binary."))
    invertedbinary = []
    initialvalue = value
    while value &gt;= 1:
        value = (value/2)
        invertedbinary.append(value)
        value = int(value)
    for n,i in enumerate(invertedbinary):
        if (round(i) == i):
            invertedbinary[n]=0
        else:
            invertedbinary[n]=1
    invertedbinary.reverse()
    result = ''.join(str(e) for e in invertedbinary)
    print ("Decimal Value:\t" , initialvalue)
    print ("Binary Value:\t", result)
</code></pre>
<p>The user input is immediately declared as an integer so anything other than numbers entered terminates the program and returns a <code>ValueError</code>. How can I make it so a message is printed instead of the program terminating with a <code>ValueError</code>?</p>
<p>I tried taking the method I used from my binary to decimal converter:</p>
<pre><code>for i in value:
        if not (i in "1234567890"):
</code></pre>
<p>Which I soon realised won't work as <code>value</code> is an integer rather than a string. I was thinking that I could leave the user input at the default string and then later convert it to <code>int</code> but I feel like this is the lazy and crude way. </p>
<p>However, am I right in thinking that anything I try to add after the user input line will not work because the program will terminate before it gets to that line?</p>
<p>Any other suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>What I believe is considered the most <em>Pythonic</em> way in these cases is wrap the line where you might get the exception in a try/catch (or try/except) and show a proper message if you get a <code>ValueError</code> exception:</p>
<pre><code>print ("Welcome to August's decimal to binary converter.")
while True:
    try:
        value = int(input("Please enter enter a positive integer to be converted to binary."))
    except ValueError:
        print("Please, enter a valid number")
        # Now here, you could do a sys.exit(1), or return... The way this code currently
        # works is that it will continue asking the user for numbers
        continue
</code></pre>
<p>Another option you have (but is much slower than handling the exception) is, instead of converting to <code>int</code> immediatly, checking whether the input string is a number using the <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>str.isdigit()</code></a> method of the strings and skip the loop (using the <a href="https://docs.python.org/3/reference/simple_stmts.html#continue" rel="nofollow"><code>continue</code></a> statement) if it's not.</p>
<pre><code>while True:
    value = input("Please enter enter a positive integer to be converted to binary.")
    if not value.isdigit():
        print("Please, enter a valid number")
        continue
    value = int(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to handle the <code>ValueError</code> exception using <code>try/except</code> block. Your code should be like:</p>
<pre><code>try:
    value = int(input("Please enter enter a positive integer to be converted to binary."))
except ValueError:
    print('Please enter a valid integer value')
    continue  # To skip the execution of further code within the `while` loop
</code></pre>
<p>In case user enters any value which can not be converted to <code>int</code>, it will raise <code>ValueError</code> exception, which will be handled by the <code>except</code> Block and will print the message you mentioned.</p>
<p>Read <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">Python: Errors and Exceptions</a> for detailed information. As per the doc, the <code>try</code> statement works as follows:</p>
<ul>
<li>First, the <code>try</code> clause (the statement(s) between the <code>try</code> and <code>except</code> keywords) is executed.</li>
<li>If no exception occurs, the <code>except</code> clause is skipped and execution of the <code>try</code> statement is finished.</li>
<li>If an exception occurs during execution of the <code>try</code> clause, the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, the except clause is executed, and then execution continues after the try statement.</li>
<li>If an exception occurs which does not match the exception named in the <code>except</code> clause, it is passed on to outer <code>try</code> statements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above.</li>
</ul>
</div>
