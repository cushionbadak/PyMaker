<div class="post-text" itemprop="text">
<p>I'm still new to python. 
Do I have to use try: and except ValueError? 
If not when would and should I use them?
Some parts work with and without it
E.g</p>
<pre><code>Def Main_Menu():
    Main_menu_op = input("A.Start \nB.Options \nC.Exit")
    Try:
        if Main_menu_op == "A" or "a":
            Start()

        elif Maim_menu_op == "B" or "b":
            Options()

        elif Main_menu_op == "C" or "c":
            Exit()
    except ValueError:
       print("error")
       Main_menu()
</code></pre>
<p>I just typed this since I'm on my tablet and not my pc so just ignore any mistakes </p>
<p>P.s this is part of a text based game I'm working on </p>
</div>
<div class="post-text" itemprop="text">
<p><code>try</code> <code>except</code> blocks are to enclose code that might produce a runtime error. The optional argument of Error type (in this case you have input <code>ValueError</code>) will change the block so that it will only catch that type of exception. In your example it looks like you are trying to produce an error message if none of the given options are correctly chosen.</p>
<p>As written, none of the if statements will pass if a different input is received, but no exception will be generated. Instead of try:except, you should likely just use an additional <code>else</code> block onto your <code>if</code> statement. True exceptions are generally reserved for exiting the code when it tries to do something illegal like divide by 0. If you wanted to <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" rel="nofollow">create your own</a> custom exception to mimic illegal behavior, you would have to test for when it should be raised (likely with an if statement) then call  <code>raise</code> with your custom exception.</p>
<p>I would also like to point out that in your <code>if</code> and <code>elif</code> conditions, I think you are mistaking the operator precedence of <code>==</code> and <code>or</code>. the equivalence operator: == will be called first because of operator precedence producing either a true or false value then the or will be evaluated. the true or false value will be compared to a non-empty string (<code>'a'</code>, <code>'b'</code>, or <code>'c'</code>) which will always evaluate to true. Instead you could add another == comparison for something like: <code>if Main_menu_op == "A" or Main_menu_op == "a":</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You should only use <code>try</code> and <code>except ...Error</code> (<a href="https://docs.python.org/2.7/tutorial/errors.html" rel="nofollow">documentation</a>) when you know you can safely handle a specific known error.</p>
<p>So if you are expecting a certain error, like a <code>ValueError</code>, you can catch it and handle it instead of having you application crash. Let's say you have a user's input and expect a number:</p>
<pre><code>...
a = raw_input('Please give me a number: ') # input(...) on Python 3.
try:
    number = float(a)
except ValueError:
    print 'You have not given me a valid number, defaulting to 0.'
    number = 0.
# do stuff with number
...
</code></pre>
<p>If you are not expecting an error or are not prepared to handle it (or there's no proper way to handle), you might want to see the error and its trace on the console so you can debug it.</p>
<p>In your example you can use an 'else' to say the command given is not recognised, and ask for another.</p>
</div>
<span class="comment-copy">If you want to recover from the error, you can catch the exception. If you don't want to recover from the error, you don't have to catch the exception.</span>
<span class="comment-copy">Thank you. You have solved another one of my problems as well as this one</span>
<span class="comment-copy">Because lager on when you would select which NPC to ta</span>
<span class="comment-copy">*keep pressing enter sorry .talk to it would always go to the blacksmith</span>
<span class="comment-copy">@A.J.Carruthers another way to accomplish your <code>or</code> statement would be to check if your input selection is in a list of possible commands: <code>if menu_op in ['A', 'a']</code> this might help out if you have more options or longer commands</span>
