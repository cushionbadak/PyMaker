<div class="post-text" itemprop="text">
<p>I have a python class <code>A</code> like this.</p>
<pre><code>class A: 
   def __init__(self, name): 
       self.name = name

   def print_lastname(self, lastname): 
       print(lastname)
</code></pre>
<p>I have to call this code like this.</p>
<pre><code>import B
a = B.A("hello")
a.print_lastname("John")
</code></pre>
<p>Currently, I need to use this <code>A</code> class from my C++ code. I have got this far.</p>
<pre><code>Py_Initialize(); 
string hello = "hello"; 
PyObject *module, *attr, *arg; 
module = PyObject_ImportModule("B"); // import B
attr = PyObject_GetAttrString(module, "A"); // get A from B
arg = PyString_FromString(hello.c_str()); 
instance = PyInstance_New(attr, arg, NULL); // trying to get instance of A with parameter "hello"
Py_Finalize(); 
</code></pre>
<p>But I am getting error </p>
<blockquote>
<p>Exception TypeError: 'argument list must be tuple' in module 'threading' from '/usr/lib64/python2.7/threading.pyc'</p>
</blockquote>
<p>How can I achieve from <code>import</code> statement to <code>a.print_name("John")</code> from C++? 
Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to rewrite the Python class slightly, just so it uses both the argument and member variable.</p>
<pre><code># B.py - test module
class A:
    def __init__(self, name):
        self.name = name

    def print_message(self, message):
        print message + ' ' + self.name
</code></pre>
<p>As for the C++ part, <em>almost</em> everything looks okay. The error you're getting is because the argument to <code>PyInstance_New</code> should be a tuple. There are multiple ways to call functions or methods. Here is a complete example using one of them:</p>
<pre><code>// test.c - test embedding.
void error_abort(void)
{
    PyErr_Print();
    exit(EXIT_FAILURE);
}

int main(int argc, char* argv[])
{
    PyObject* temp, * args, * attr, * instance;

    Py_Initialize();
    if (!(temp = PyString_FromString("John")))
        error_abort();
    if (!(args = PyTuple_Pack(1, temp)))
        error_abort();
    Py_DECREF(temp);

    if (!(temp = PyImport_ImportModule("B")))
        error_abort();
    if (!(attr = PyObject_GetAttrString(temp, "A")))
        error_abort();
    Py_DECREF(temp);

    if (!(instance = PyInstance_New(attr, args, NULL)))
        error_abort();
    if (!PyObject_CallMethod(instance, "print_message", "s", "Hello"))
        error_abort();

    Py_DECREF(args);
    Py_DECREF(attr);
    Py_DECREF(instance);
    Py_Finalize();
    return 0;
}
</code></pre>
<p>For more information see <a href="https://docs.python.org/3/extending/embedding.html#pure-embedding" rel="noreferrer">Python pure-embedding</a>.</p>
</div>
<span class="comment-copy">very awesome! Works like a charm.</span>
<span class="comment-copy">Awesome - thanks dude !</span>
