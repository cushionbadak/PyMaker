<div class="post-text" itemprop="text">
<p>I was doing some performance evaluation using timeit and discovered a performance degredation between python 2.7.10 and python 3.4.3. I narrowed it down to the <code>hash()</code> function:</p>
<p>python 2.7.10:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('for x in xrange(100): hash(x)', number=100000)
0.4529099464416504
&gt;&gt;&gt; timeit.timeit('hash(1000)')
0.044638872146606445
</code></pre>
<p>python 3.4.3:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('for x in range(100): hash(x)', number=100000)
0.6459149940637872
&gt;&gt;&gt; timeit.timeit('hash(1000)')
0.07708719989750534
</code></pre>
<p>That's an approx. 40% degradation! It doesn't seem to matter if integers, floats, strings(unicodes or bytearrays), etc, are being hashed; the degradation is about the same. In both cases the hash is returning a 64-bit integer. The above was run on my Mac, and got a smaller degradation (20%) on an Ubuntu box.</p>
<p>I've also used PYTHONHASHSEED=random for the python2.7 tests and in <em>some</em> cases, restarting python for each "case", I saw the <code>hash()</code> performance get a bit worse, but never as slow as python3.4</p>
<p>Anyone know what's going on here? Was a more-secure, but slower, hash function chosen for python3 ?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two changes in <code>hash()</code> function between Python 2.7 and Python 3.4</p>
<ol>
<li>Adoptions of <em>SipHash</em></li>
<li>Default enabling of <em>Hash randomization</em></li>
</ol>
<hr/>
<p><em>References:</em></p>
<ul>
<li>Since from Python 3.4, it uses <a href="https://131002.net/siphash/" rel="nofollow">SipHash</a> for it's hashing function. Read: <a href="https://lwn.net/Articles/574761/" rel="nofollow">Python adopts SipHash</a></li>
<li>Since Python 3.3 <em>Hash randomization is enabled by default.</em> Reference: <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow"><code>object.__hash__</code></a> (last line of this section). Specifying <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow"><code>PYTHONHASHSEED</code></a> the value 0 will disable hash randomization.</li>
</ul>
</div>
<span class="comment-copy">The hash function is definitely not secure.  It's not intended as a cryptographic hash.  It's main purpose is to be used for <code>dict</code>s and <code>set</code>s.</span>
<span class="comment-copy">Sven: I understand that. Please read the first paragraph: I'm not using it for cryptographic purposes. In fact, I'm not using hash() directly at all, but this is, I believe, the underlying cause of why somedict[someindex] under python3.4 is slower than under python 2.7</span>
<span class="comment-copy">They switched to SipHash in Python 3.4 which is slower than FNV on some data. See <a href="https://bugs.python.org/issue14621" rel="nofollow noreferrer">bugs.python.org/issue14621</a></span>
<span class="comment-copy">@vaultah: Thank you! Throw that in as an "answer" with a reference, and I'll give you an upvote! anonymous: you notice a difference when it's run billions of times. 40% is 40%.</span>
<span class="comment-copy">@ChrisCogdon I was replying to the last question.  The hash is not secure.</span>
<span class="comment-copy">Hash randomization is also enabled by default in every 2.7 release since at least four years.  Moreover, this only affects string hashes, whereas the examples in the OP are hashes of integers, which are not randomized.</span>
<span class="comment-copy">@SvenMarnach: "Hash randomization is also enabled by default in every 2.7 release since at least five years" - uh, what? Do you have a reference for that?</span>
<span class="comment-copy">@user2357112 You are right, it's not enabled by default.  It's just enabled on the platforms I happen to use regularly (even for Python 2.7).  Anyway, this is still irrelevant for the timing differences observed in the original post, since hashes of integers are not randomized.</span>
<span class="comment-copy">Note that hash randomization doesn't make the hashes slower.  A random seed is determined once at startup and included in the hashes.  If it is disabled, 0 is used instead.  There is no speed difference.</span>
<span class="comment-copy">@SvenMarnach: Agree with you. That it is not entirely due to <code>PYTHONHASHSEED</code>, updated the answer</span>
