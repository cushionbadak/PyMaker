<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10666163/how-to-check-if-all-elements-of-a-list-matches-a-condition">How to check if all elements of a list matches a condition?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>What's the most Python way to do this, other than iterating through nested loops and checking if each value is equal to 1?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using <code>numpy</code> you can use its per-element equality check and then call the resulting arrays <code>all</code> method to check if <em>all</em> elements did satisfy the condition:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; c = np.array([[1,2], [3,4]])
&gt;&gt;&gt; (c==1).all()
False
&gt;&gt;&gt; c = np.array([[1,1], [1,1]])
&gt;&gt;&gt; (c==1).all()
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <em>itertoools.chain</em> to iterate over "flattened" list</p>
<pre><code>all(x == 1 for x in itertools.chain(*my_list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using sets:</p>
<pre><code>from itertools import chain
array = [[1,1,1],[1,0,1]]
if set(chain.from_iterable(array)) == {1}:
    print("all ones")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.searchsorted.html" rel="nofollow">np.searchsorted</a> along with <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_along_axis.html" rel="nofollow">np.apply_along_axis</a> to find the elements in any dimensional array. </p>
</div>
<div class="post-text" itemprop="text">
<p>Generator function + <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all</code></a> is probably the way to go.</p>
<pre><code>array_2D = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
all(all(item == 1 for item in items) for items in array_2D)
</code></pre>
<p>Another option would be to first flatten the array, but python has no standard way to do this. But the code would handle any kind of dimensions (If you flatten it deep)!</p>
<hr/>
</div>
<span class="comment-copy">This is a neat alternative, but it might be worth noting that it will not allow short-circuiting in case of first non <code>1</code>-valued element found (as the <code>all</code> or <code>any</code> solutions will).</span>
<span class="comment-copy">This will return <code>True</code> irregardless of the elements in the array. Check <code>array_2D = [[1, 1, 1], 'aadsd', [1, 1, 1]]</code> You're testing for the <i>truthiness</i> of genexps not values. You need to move that inner <code>for</code> behind the first one; more like list flattening</span>
<span class="comment-copy">@MosesKoledoye Oh damn! Corrected it, thank you!</span>
<span class="comment-copy">What's the difference between nested loop and nested comprehension?</span>
<span class="comment-copy">@volcano A comprehension is an expression, so it returns something, which is useful for this, as we can use the result of the comprehension and feed it into <code>all</code>. A loop is a statement, so it doesn't return anything. In python it's idiomatic to use more comprehensions than loops for these kind of things.</span>
<span class="comment-copy">@TN1ck meant than OP did not want nesting</span>
