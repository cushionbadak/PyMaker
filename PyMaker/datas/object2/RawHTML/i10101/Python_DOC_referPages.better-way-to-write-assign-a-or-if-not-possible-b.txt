<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/473099/check-if-a-given-key-already-exists-in-a-dictionary-and-increment-it">Check if a given key already exists in a dictionary and increment it</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>So, in my code I have a dictionary I use to count up items I have no prior knowledge of:</p>
<pre><code>if a_thing not in my_dict:
    my_dict[a_thing] = 0
else:
    my_dict[a_thing] += 1
</code></pre>
<p>Obviously, I can't increment an entry of a value that doesn't exist yet. For some reason I have a feeling (in my still-Python-inexperienced brain) there might exist a more Pythonic way to do this with, say, some construct which allows to assign a result of an expression to a thing and if not possible something else <strong>in a single statement</strong>.</p>
<p>So, does anything like that exist in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks like a good job for <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a>, from <code>collections</code>. Observe the example below:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; d['a'] += 1
&gt;&gt;&gt; d
defaultdict(&lt;class 'int'&gt;, {'a': 1})
&gt;&gt;&gt; d['b'] += 1
&gt;&gt;&gt; d['a'] += 1
&gt;&gt;&gt; d
defaultdict(&lt;class 'int'&gt;, {'b': 1, 'a': 2})
</code></pre>
<p><code>defaultdict</code> will take a single parameter which indicates your initial value. In this case you are incrementing integer values, so you want <code>int</code>.</p>
<p>Alternatively, since you are counting items, you could also (as mentioned in comments) use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a> which will ultimately do all the work for you: </p>
<pre><code>&gt;&gt;&gt; d = Counter(['a', 'b', 'a', 'c', 'a', 'b', 'c'])
&gt;&gt;&gt; d
Counter({'a': 3, 'c': 2, 'b': 2})
</code></pre>
<p>It also comes with some nice bonuses. Like <code>most_common</code>:</p>
<pre><code>&gt;&gt;&gt; d.most_common()
[('a', 3), ('c', 2), ('b', 2)]
</code></pre>
<p>Now you have an order to give you the most common counts. </p>
</div>
<div class="post-text" itemprop="text">
<p>using <code>get</code> method</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['a'] = d.get('a', 0) + 1
&gt;&gt;&gt; d
{'a': 1}
&gt;&gt;&gt; d['b'] = d.get('b', 2) + 1
&gt;&gt;&gt; d
{'b': 3, 'a': 1}
</code></pre>
</div>
<span class="comment-copy">Note that <code>defaultdict(int)</code> is basically <code>collections.Counter()</code></span>
<span class="comment-copy">@vaultah Yeah. Thanks. That <i>should</i> have been the first solution I thought of. I added it.</span>
