<div class="post-text" itemprop="text">
<p>I am trying to do unit testing using pytest. I import source code in my unit test code and test it. But while doing unit test I want to not execute or comment out some part of code in source code. But I cant make changes in source code. So is there any way to comment some block of code in my source code during execution only.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are trying to do strongly suggests that the source code should be refactored, if for any reason unit test cannot be run on it. Whatever solution you will come up with, it will be very fragile. That being said, as @user7056566 pointed out, you can just load it as a string, modify it (e.g. with regex) and then call <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow">exec</a>. </p>
<p>Personally I would ignore the fact that "part of code which I want to ignore is being tested in automated testing". Accept the "performance penalty" and do not modify the source code. That's MUCH worse than a simple overhead. You can never be sure that what you are testing is the legitimate code. Besides, the moment someone modifies the source code, there's a good chance it will break your tests - also in unexpected way (it won't catch the problem).</p>
</div>
<div class="post-text" itemprop="text">
<p>You may 'mock' specific portions of code in your test-case without modifying the source code (that you are importing).</p>
<pre><code>&gt;&gt;&gt; def foo():
...     return 'bar'
... 
&gt;&gt;&gt; foo()
'bar'
&gt;&gt;&gt; from unittest.mock import MagicMock
&gt;&gt;&gt; placeholder = foo
&gt;&gt;&gt; foo = MagicMock(return_value='bat')
&gt;&gt;&gt; foo()
'bat'
&gt;&gt;&gt; foo = placeholder
&gt;&gt;&gt; foo()
'bar'
&gt;&gt;&gt; 
</code></pre>
<p>There are plenty of mocking tools available in python - mocking http calls (REST APIs, etc.). Here's a good starter: <a href="https://blog.fugue.co/2016-02-11-python-mocking-101.html" rel="nofollow">https://blog.fugue.co/2016-02-11-python-mocking-101.html</a></p>
</div>
<span class="comment-copy">How should you ever be able to tell your Unit Test which part to ignore if you cant modify the source code?</span>
<span class="comment-copy">Why would you ever modify the tested source code? The idea of a unit test is to test the source as it is. I'd say this is an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>. Tell us what you actually want to accomplish.</span>
<span class="comment-copy">That part of code which I want to ignore is being tested in automated testing. I can actually ignore that part. That's why I wanted to do this.</span>
<span class="comment-copy">Thanks a lot for the info. I'll consider all your words. I am very new to uni testing. So I was asking this. Ok then. I will try to make my source code more modular and make my unit test life easy. I hope this is better choice.</span>
<span class="comment-copy">I never heard of mocks. Thanks a lot. This is very informative.</span>
<span class="comment-copy">BTW, this looks like something from unittest. Is there anything similar to this in pytest. Else, as unittest is inbuilt in python I will import unittest also. But how would this help me to be able to not execute some part of my source code ?</span>
<span class="comment-copy">There's pytest.mock at <a href="https://pypi.python.org/pypi/pytest-mock/1.2" rel="nofollow noreferrer">pypi.python.org/pypi/pytest-mock/1.2</a> but I haven't tried it. As regards skipping code execution, consider foo() is the API from the source code you imported that you'd like to skip executing. But some portions of source-code use foo(). You'd like that to be replaced (mock-ed) with some pre-defined return value of foo(). MagicMock can help you do that.</span>
