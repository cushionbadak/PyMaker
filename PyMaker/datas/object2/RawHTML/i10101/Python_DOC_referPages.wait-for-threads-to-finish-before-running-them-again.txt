<div class="post-text" itemprop="text">
<p>I am making a program that controls 2 motors through a raspberry Pi. I am running python code and I am wondering how to achieve the following :</p>
<ul>
<li>Run motor1</li>
<li>Run motor2 simultaneously</li>
<li>Wait for both motors to finish</li>
<li>Run motor1</li>
<li>Run motor2 simultaneously</li>
<li><p>etc.</p>
<p>What I have done so far is creating a Thread and using a queue.</p>
<pre><code>class Stepper(Thread):

    def __init__(self, stepper):
        Thread.__init__(self)
        self.stepper = stepper    
        self.q = Queue(maxsize=0)

    def setPosition(self, pos):
        self.q.put(pos)

    def run(self):
        while not self.q.empty():
            item = self.q.get()
            // run motor and do some stuff 

thread_1 = Stepper(myStepper1)
thread_2 = Stepper(myStepper2)
thread_1.start()
thread_2.start()

loop = 10
while(loop):
    thread_1.setPosition(10)
    thread_2.setPosition(30)
    # I want to wait here
    thread_1.setPosition(10)
    thread_2.setPosition(30)
    loop = loop - 1

    thread_1.join()
    thread_2.join()
</code></pre></li>
</ul>
<p>Both thread_1 and thread_2 won't finish at the same time depending of the numbers of steps the motor need to process. 
I have tried to use the Lock() functionality but I am not sure how to correctly implement it. I also thought about re-creating the Threads but not sure if this is the correct solution. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/threading.html#threading.Semaphore" rel="nofollow"><code>Semaphore</code></a> actually:</p>
<pre><code>from threading import Semaphore

class Stepper(Thread):

    def __init__(self, stepper, semaphore):
        Thread.__init__(self)
        self.stepper = stepper
        self.semaphore = semaphore

    def setPosition(self, pos):
        self.q.put(pos)

    def run(self):
        while not self.q.empty():
            try:
                # run motor and do some stuff
            finally:
                self.semaphore.release()  # release semaphore when finished one cycle

semaphore = Semaphore(2)
thread_1 = Stepper(myStepper1, semaphore)
thread_2 = Stepper(myStepper2, semaphore)
thread_1.start()
thread_2.start()

loop = 10
for i in range(loop):
    semaphore.acquire()
    semaphore.acquire()
    thread_1.setPosition(10)
    thread_2.setPosition(30)
    semaphore.acquire()
    semaphore.acquire()  # wait until the 2 threads both released the semaphore
    thread_1.setPosition(10)
    thread_2.setPosition(30)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the thread's <code>join</code> method like so:</p>
<pre><code>thread_1.join() # Wait for thread_1 to finish
thread_2.join() # Same for thread_2
</code></pre>
<p>As per the documentation at <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow">https://docs.python.org/3/library/threading.html#threading.Thread.join</a>:</p>
<blockquote>
<p>A thread can be <code>join()</code>ed many times.</p>
</blockquote>
<p>To run threads repeatedly, you will need to reinitialize the <code>Thread</code> object after each run.</p>
</div>
<span class="comment-copy">Please fix your indents it's disturbance when other reads your code.</span>
<span class="comment-copy">Where do you remove Items from self.q and where do you initialize it like q = Queue()</span>
<span class="comment-copy">Yes, the queue is initialised in the def <b>init</b> like so  : self.q = Queue(maxsize=0) (each thread has its own queue) ; I also do a  item = self.q.get() in my run() method, I will update my code.</span>
<span class="comment-copy">Some try finallys would suit here perfectly, in order to make sure the lock is released.</span>
<span class="comment-copy">@rocksteady true.</span>
<span class="comment-copy">Thanks, I am trying with semaphore, but I am running into problems :   - It seems that when I start() the thread, because the queue is empty, the thread stops, and never run again. (if I call self.run() in the setPosition() for example, the threads won't run simultaneously anymore)   - I can add a while(True) in the run method, but then the thread will never stops and program will never ends.</span>
<span class="comment-copy">He is using join but he does not create Threads anew.</span>
<span class="comment-copy">I am not sure how to "reinitialize the Thread object after each run". Is that just a thread_1 = Stepper(myStepper1) in my while(loop) ? I am not sure if this is the best solution, but again I am new in python code.</span>
