<div class="post-text" itemprop="text">
<p>For example, if the array is [1,2,3,4]
I want the output to be [1,2],[1,3],[1,4],[2,3],[2,4] and [3,4]. </p>
<p>I would like a solution which is better than the brute force method of  using two for loops. How do I implement this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Though the previous answer will give you all pairwise orderings, the example expected result seems to imply that you want all <em>unordered</em> pairs. </p>
<p>This can be done with <code>itertools.combinations</code>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; x = [1,2,3,4]
&gt;&gt;&gt; list(itertools.combinations(x, 2))
[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
</code></pre>
<p>Compare to the other result:</p>
<pre><code>&gt;&gt;&gt; list(itertools.permutations(x, 2))
[(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4), (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

x = [1,2,3,4]

for each in itertools.permutations(x,2):
    print(each)
</code></pre>
<p>Note that itertools is a generator object, meaning you need to iterate through it to get all you want. The '2' is optional, but it tells the function what's the number per combination you want.  </p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow">You can read more here</a></p>
<p>Edited:</p>
<p>As ForceBru said in the comment, you can unpack the generator to print, skipping the for loop together But I would still iterate through it as you might not know how big the generated object will be:</p>
<pre><code>print(*itertools.permutations(x, 2))
</code></pre>
</div>
<span class="comment-copy">There are 2^n pair-wise combinations for a collection of n elements. All solutions will require an exponential amount of time to generate all combinations; a nested for-loop is going to get you within a constant factor of the fastest solution. Unless you were simply looking for something more compact.</span>
<span class="comment-copy">@lungj It's been a while since I've studied math formally, but where are you getting that <code>2^n</code> figure? Ordered pairs are 4! / (4 - 2)! (== 12) and unordered pairs are 4 choose 2 (== 6)</span>
<span class="comment-copy">@brianpck Whoops. Yes, you're right. It's O(n^2).</span>
<span class="comment-copy">One can do <code>print(*itertools.permutations(x, 2))</code> in Python 3.x, which is even shorter.</span>
<span class="comment-copy">@ForceBru Good point, unpacking it, I guess I can add it to the answer too, but I was thinking that there must be a reason why OP needs to generate these (thinking maybe OP will use them in another function call or something)</span>
<span class="comment-copy">@ForceBru <code>permutations</code> returns an iterator, but I'm pretty sure that unpacking it is going to create a (potentially large) object which might actually slow the whole process down (esp. if swapping becomes required).</span>
<span class="comment-copy">@lungj Given that this is a standard library solution, I really don't expect you're going to get better performance using another method.</span>
<span class="comment-copy">Except that this does not give the desired output. You need <code>itertools.combinations</code> instead.</span>
