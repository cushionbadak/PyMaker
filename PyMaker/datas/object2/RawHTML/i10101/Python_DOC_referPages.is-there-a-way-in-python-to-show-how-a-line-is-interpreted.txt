<div class="post-text" itemprop="text">
<p>When running python there is an interpretation question based on</p>
<pre><code>&gt;&gt;&gt; 5 &gt; 25 == False
False
&gt;&gt;&gt; (5 &gt; 25) == False
True
</code></pre>
<p>Since this was a question about order of operation, I would like to actually see how the python interpreter actually handles the two statements. Is there a method to do so?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/ast.html" rel="nofollow"><code>ast</code></a> module can show an abstract syntax tree for an expression or statement:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.dump(ast.parse('5 &gt; 25 == False'))
'Module(body=[Expr(value=Compare(left=Num(n=5), ops=[Gt(), Eq()], comparators=[Num(n=25), NameConsta
nt(value=False)]))])'
&gt;&gt;&gt; ast.dump(ast.parse('(5 &gt; 25) == False'))
'Module(body=[Expr(value=Compare(left=Compare(left=Num(n=5), ops=[Gt()], comparators=[Num(n=25)]), o
ps=[Eq()], comparators=[NameConstant(value=False)]))])'
</code></pre>
<p>The <a href="https://docs.python.org/3/library/dis.html" rel="nofollow"><code>dis</code></a> module can show bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('5 &gt; 25 == False')
  1           0 LOAD_CONST               0 (5)
              3 LOAD_CONST               1 (25)
              6 DUP_TOP
              7 ROT_THREE
              8 COMPARE_OP               4 (&gt;)
             11 JUMP_IF_FALSE_OR_POP    21
             14 LOAD_CONST               2 (False)
             17 COMPARE_OP               2 (==)
             20 RETURN_VALUE
        &gt;&gt;   21 ROT_TWO
             22 POP_TOP
             23 RETURN_VALUE
&gt;&gt;&gt; dis.dis('(5 &gt; 25) == False')
  1           0 LOAD_CONST               0 (5)
              3 LOAD_CONST               1 (25)
              6 COMPARE_OP               4 (&gt;)
              9 LOAD_CONST               2 (False)
             12 COMPARE_OP               2 (==)
             15 RETURN_VALUE
</code></pre>
<p><code>dis</code> can also operate on the the compiled bytecode stored in a function, and also as a standalone utility with <code>python3 -m dis</code>.</p>
<p>Passing a string to <code>dis.dis()</code> is new in Python 3; here are some equivalent ways to call this function:</p>
<pre><code>&gt;&gt;&gt; dis.dis(lambda: 5 &gt; 25 == False)
&gt;&gt;&gt; dis.dis(compile('5 &gt; 25 == False', '', 'eval'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3.5/library/ast.html" rel="nofollow"><code>ast</code></a> module to parse your expression. The resulting parse tree should provide a clue as to how the expression will be evaluated.</p>
</div>
<span class="comment-copy">It's not just order of operations. <code>5 &gt; 25 == False</code> is distinct from both <code>(5 &gt; 25) == False</code> and <code>5 &gt; (25 == False)</code>. It is a shorthand for <code>(5 &gt; 25) &amp;&amp; (25 == False)</code>.</span>
<span class="comment-copy">the dis module maybe?</span>
<span class="comment-copy">You might want at <a href="https://pypi.python.org/pypi/astdump/3.3" rel="nofollow noreferrer">astdump</a>.</span>
<span class="comment-copy">Is this like a homework question or something? Cause I saw 3 posts of the exact question (one got deleted, the other is the dup, and now this) within 2 hours of each other.... Or is the universe so align today.</span>
<span class="comment-copy">@MooingRawr That question got me curious about attempting to actually see the interpreter parsing. In fact I used the code in that question as the example. While an answer to mine would allow someone to answer that question, I am interested in the general method rather than that answer itself.</span>
