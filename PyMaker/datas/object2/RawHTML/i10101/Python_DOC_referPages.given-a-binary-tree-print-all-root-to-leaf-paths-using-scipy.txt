<div class="post-text" itemprop="text">
<p>I'm using the <code>hierarchy.to_tree</code> from scipy, and I'm interested in getting a print out of all root-to-leaf paths:</p>
<p><a href="https://i.stack.imgur.com/Nuzo8.gif" rel="nofollow"><img alt="enter image description here" src="https://i.stack.imgur.com/Nuzo8.gif"/></a></p>
<p><code>
10.8.3
10.8.5
10.2.2
</code></p>
<pre><code>from scipy.cluster import hierarchy
a = hierarchy.to_tree(linkage_matrix)
</code></pre>
<p>I've given it a try</p>
<pre><code>linkage_matrix
[[2, 3, 0.06571365, 2], [0, 10, 0.07951425, 2], [5, 6, 0.09405724, 2], [11, 13, 0.10182075, 3], [1, 12, 0.12900146, 3], [14, 15, 0.13498948, 5], [8, 9, 0.16806049, 2], [7, 16, 0.1887918, 4], [17, 19, 0.2236683, 9], [18, 20, 0.29471335, 11], [4, 21, 0.45878, 12]]

from scipy.cluster import hierarchy
a = hierarchy.to_tree(linkage_matrix)

def parse_tree(tree, path):
    path = path
    if path ==[]:
        path.append(str(tree.get_id()))
    if tree.is_leaf() is False:
        left = tree.get_left()
        left_id = str(left.get_id())
        if left.is_leaf() is False:
            path.append(left_id)
            parse_tree(left, path)
            path.pop()
        else:
            parse_tree(left, path)
        right = tree.get_right()
        right_id = str(right.get_id())
        if right.is_leaf() is False:
            path.append(right_id)
        parse_tree(right, path)
    else:
        path.append(str(tree.get_id()))
        print(('.').join(path)) 
        path.pop()

parse_tree(a, [])
</code></pre>
<p>But obviously my logic is completely wrong, specifically it breaks down when the left node is not a leave (22.21.20.17.15.19.7 should be 22.21.20.19.7). I'm looking for new ways, I have not considered. </p>
<p>For the below example tree, all root-to-leaf paths are: </p>
</div>
<div class="post-text" itemprop="text">
<p>Without looking at your code, you should be doing something like:</p>
<pre><code>print_paths(tree, seen):
    seen = seen
    seen.append(tree.value)
    if not tree.children:
        print(seen)
    else:
        map(print_paths, tree.children)
</code></pre>
<p>Having now seen your code, try something like:</p>
<pre><code>def parse(tree, p):
    path = p[:]
    path.append(str(tree.get_id()))
    if tree.is_leaf():
        print('.'.join(path))
    else: 
        #Here I assume get_left() returns some falsey value for no left child
        left = tree.get_left()
        if left:
            parse(left, path)
        right = tree.get_right()
        if right:
            parse(right, path)
</code></pre>
</div>
<span class="comment-copy">Thanks for giving it a shot, This breaks down in a similar way:  &gt;&gt;&gt; parse(a,[]) 22.4  22.4.21.18.8  22.4.21.18.8.9</span>
<span class="comment-copy">Maybe the problem is the list passed by reference.  I changed <code>path = path</code> to <code>path = p[:]</code> where <code>p</code> is the argument</span>
<span class="comment-copy">oh my god! I think this works, what does p[:] do exactly? is there a link I could read on this topic?</span>
<span class="comment-copy">It's a shallow copy of the list.  It's just a slice of the list that goes from beginning to end, but that means that it doesn't share a reference with the list itself.<a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/introduction.html#lists</a></span>
<span class="comment-copy">Thats the solution man, I spent a day on that Friday! Thanks</span>
