<div class="post-text" itemprop="text">
<p>I need to read local variables from Python in C/C++. When I try to <code>PyEval_GetLocals</code>, I get a NULL. This happens although Python is initialized. The following is a minimal example.</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;Python.h&gt;

Py_Initialize();
PyRun_SimpleString("a=5");
PyObject *locals = PyEval_GetLocals();
std::cout&lt;&lt;locals&lt;&lt;std::endl; //prints NULL (prints 0)
Py_Finalize();
</code></pre>
<p>In <a href="https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetLocals" rel="nofollow">the manual</a>, it says that it returns NULL if no frame is running, but... there's a frame running!</p>
<p><strong>What am I doing wrong?</strong></p>
<p>I'm running this in Debian Jessie.</p>
</div>
<div class="post-text" itemprop="text">
<p>Turns out the right way to access variables in the scope is:</p>
<pre><code>Py_Initialize();
PyObject *main = PyImport_AddModule("__main__");
PyObject *globals = PyModule_GetDict(main);
PyObject *a = PyDict_GetItemString(globals, "a");
std::cout&lt;&lt;globals&lt;&lt;std::endl; //Not NULL
Py_Finalize();
</code></pre>
</div>
<span class="comment-copy">@martineau But even globals returns NULL! Does this mean this is not the appropriate way to get the variables there? Because I already accepted an answer about that. <a href="http://stackoverflow.com/questions/40041498/python-c-extension-extract-parameter-from-the-engine/40041694#40041694" title="python c extension extract parameter from the engine">stackoverflow.com/questions/40041498/â€¦</a></span>
<span class="comment-copy">@martineau verifying that <code>PyRun_SimpleString()</code> is working is very easy. I can print stuff and assign stuff and it works. Would you suggest a fix for that example code?</span>
<span class="comment-copy">@martineau That also returns NULL. I mentioned that in my first response to you :-)</span>
<span class="comment-copy">@martineau Printing <code>a</code> with the command you provided works and prints <code>5</code>. Also printing <code>locals()</code> with <code>print(locals())</code> prints a <code>dict</code> that contains <code>a</code>.</span>
<span class="comment-copy">@martineau :( ...</span>
<span class="comment-copy">Side-note: This leaks a reference; the program will clean up on exit, but if you need to debug reference leaks, this will be one more leak to wade through. Simplest fix is to change <code>PyDict_GetItem(globals, PyUnicode_FromString("a"));</code> to <code>PyDict_GetItemString(globals, "a");</code> which is logically identical, except it manages creating and releasing the <code>PyUnicode</code> object for you, ensuring it's properly <code>DECREF</code>-ed.</span>
<span class="comment-copy">@ShadowRanger Thank you very much! This is an important note, and I updated my code accordingly :) I hope there's no more leaks there.</span>
<span class="comment-copy">Please update your answer so it's doing essentially same thing as what's in your question. Also, the <code>PyModule_GetDict(main)</code> seems like it would cause a compile error since <code>main</code> is undefined.</span>
<span class="comment-copy">@martineau Are you sure that <code>main</code> is undefined?</span>
<span class="comment-copy">Only insofar as the code in your answer goes.</span>
