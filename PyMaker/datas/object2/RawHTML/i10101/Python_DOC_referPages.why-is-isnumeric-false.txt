<div class="post-text" itemprop="text">
<p>According to the <a href="http://www.unicode.org/charts/PDF/U2150.pdf">Official Unicode Consortium code chart</a>, all of these are numeric:</p>
<pre><code>⅐   ⅑   ⅒   ⅓   ⅔   ⅕   ⅖   ⅗   ⅘   ⅙   ⅚   ⅛   ⅜   ⅝   ⅞   ⅟
Ⅰ   Ⅱ   Ⅲ   Ⅳ   Ⅴ   Ⅵ   Ⅶ   Ⅷ   Ⅸ   Ⅹ   Ⅺ   Ⅻ   Ⅼ   Ⅽ   Ⅾ   Ⅿ
ⅰ   ⅱ   ⅲ   ⅳ   ⅴ   ⅵ   ⅶ   ⅷ   ⅸ   ⅹ   ⅺ   ⅻ   ⅼ   ⅽ   ⅾ   ⅿ
ↀ   ↁ   ↂ   Ↄ   ↄ   ↅ   ↆ   ↇ   ↈ   ↉   ↊   ↋
</code></pre>
<p>However, when I ask Python to tell me which ones are numeric, they all are (even <code>⅟</code>) except for four:</p>
<pre><code>In [252]: print([k for k in "⅐⅑⅒⅓⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞⅟ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻⅼⅽⅾⅿↀↁↂↃↄↅↆↇↈ↉↊↋" if not k.isnumeric()])
['Ↄ', 'ↄ', '↊', '↋']
</code></pre>
<p>Those are:</p>
<ul>
<li>Ↄ Roman Numeral Reversed One Hundred</li>
<li>ↄ Latin Small Letter Reversed C</li>
<li>↊ Turned Digit Two</li>
<li>↋ Turned Digit Three</li>
</ul>
<p>Why does Python consider those to be not numeric?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=isnumeric#str.isnumeric" rel="nofollow"><code>str.isnumeric</code></a> is documented to be true for "all characters that have the Unicode numeric value property".</p>
<p>The canonical reference for that property is the <a href="http://www.unicode.org/ucd/" rel="nofollow">Unicode Character Database</a>.  The information we need can be dug out of <a href="http://www.unicode.org/Public/9.0.0/ucd/UnicodeData.txt" rel="nofollow">http://www.unicode.org/Public/9.0.0/ucd/UnicodeData.txt</a> , which is the latest version at time of writing (late 2016) (warning: 1.5MB text file).  It's a little tricky to read (the documentation is in <a href="http://www.unicode.org/reports/tr44/" rel="nofollow">UAX#44</a>). I'm going to show its entry for a character that <em>is</em> numeric first, U+3023 HANGZHOU NUMERAL THREE (<kbd>〣</kbd>)</p>
<pre><code>3023;HANGZHOU NUMERAL THREE;Nl;0;L;;;;3;N;;;;;
</code></pre>
<p>The eighth semicolon-separated field is the "numeric value" property; in this case, its value is 3, consistent with the name of the character.  Python's <code>str.isnumeric</code> is true if and only if this field is nonempty.  It can be interrogated directly using <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.numeric" rel="nofollow"><code>unicodedata.numeric</code></a>.</p>
<p>The <em>third</em> semicolon-separated field is a two-character code giving the "<a href="http://www.unicode.org/reports/tr44/#General_Category_Values" rel="nofollow">general category</a>"; in this case, "Nl".  Most, but not all, of the characters with a numeric value are in one of the "number" categories (first letter of the category code is a N).  The exceptions are all hanzi that, depending on context, may or may not signify a number; see <a href="http://www.unicode.org/reports/tr38/" rel="nofollow">UAX#38</a>.</p>
<p>Now, the characters you are asking about:</p>
<pre><code>2183;ROMAN NUMERAL REVERSED ONE HUNDRED;Lu;0;L ;;;;;N;;;    ;2184;
2184;LATIN SMALL LETTER REVERSED C     ;Ll;0;L ;;;;;N;;;2183;    ;2183
218A;TURNED DIGIT TWO                  ;So;0;ON;;;;;N;;;    ;    ;
218B;TURNED DIGIT THREE                ;So;0;ON;;;;;N;;;    ;    ;
</code></pre>
<p>These characters do <em>not</em> have a numeric value assigned, so Python's behavior is correct-as-documented.</p>
<p>Note: per <a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="nofollow">https://docs.python.org/3.6/whatsnew/3.6.html</a>, Python will only be updated to Unicode 9.0.0 in the 3.6 release; however, AFAICT these characters have not changed in quite some time.</p>
<p>("Why don't these characters have a numeric value?" is a question that only the Unicode Consortium can answer definitively; if you are interested I suggest bringing it up on one of their <a href="http://www.unicode.org/consortium/distlist.html" rel="nofollow">mailing lists</a>.)</p>
</div>
<span class="comment-copy">Because they're not numbers.</span>
<span class="comment-copy">@apokryfos Unicode says they are?  I would argue that <code>⅟</code> is not a number, but Python and Unicode say it is.</span>
<span class="comment-copy">@apokryfos Regardless, your first comment is a bit nonsense. Your second comment is correct.</span>
<span class="comment-copy">@Filip Well, <code>isnumeric</code> never* meant "0-9", so that code was broken all along. (* In any recent version of Python that I'm aware of.)</span>
<span class="comment-copy">@apokryfos UnicodeData.txt does not agree with your claim that these characters are numeric in 9.0.0 - see my answer.  Do you have a reference for your claim?</span>
<span class="comment-copy">Just to confirm that the same behavior can be seen with a current (3.7.0a0 at ab9835) build of CPython (that includes the <a href="https://github.com/python/cpython/commit/a475929bb31052e223bd552996d8ccf68b201a9b" rel="nofollow noreferrer">Unicode 9 update</a>).</span>
<span class="comment-copy">Interesting.  Then I wonder where <a href="https://en.wikipedia.org/wiki/Number_Forms" rel="nofollow noreferrer">Wikipedia</a> gets its information that <code>↊</code>=10 and <code>↋</code>=11.</span>
<span class="comment-copy">@gerrit Per <a href="https://en.wikipedia.org/wiki/Duodecimal" rel="nofollow noreferrer">en.wikipedia.org/wiki/Duodecimal</a> this appears to be a convention that never made it into Unicode.</span>
<span class="comment-copy">@gerrit it's more to do about culture and less to do about actual numbers which is what Unicode is supposed to be helping with. Unicode is not a mathematical standard but rather a linguistic one.</span>
