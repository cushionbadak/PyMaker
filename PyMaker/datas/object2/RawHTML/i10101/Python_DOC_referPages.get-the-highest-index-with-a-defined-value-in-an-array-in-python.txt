<div class="post-text" itemprop="text">
<p>what could be a nice one-liner to get the highest index in a python array whose value is defined (i.e. not None):</p>
<pre><code>f( [None, 1, 5, None, 3, None, None] )
</code></pre>
<p>would return:4 (as the "last" defined element is 4. (with value 3))</p>
<p>Sure a search loop would make the job, but it feels non optimal...</p>
</div>
<div class="post-text" itemprop="text">
<p>Loop over the reversed of the list and return the first valid item's index:</p>
<pre><code>In [70]: next((len(l) - i for i, j in enumerate(l[::-1], 1) if j is not None), 'NOT FOUND')
Out[70]: 4
</code></pre>
<p>Note that since you are looping over the reversed array the correct index would be <code>len(l) - i</code> (if we consider the first index as 1).</p>
<p>If you are looking for a functional and/or more optimized approach you can use <code>numpy</code> and it's <code>where</code> function:</p>
<pre><code>In [1]: import numpy as np

In [2]: lst = [None, 1, 5, None, 3, None, None]

In [4]: np.where(lst)[0][-1]
Out[4]: 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst = [None, 1, 5, None, 3, None, None]

# Nothing will be printed if all elements are None.
print max(i for i,num in enumerate(lst) if num is not None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A relatively Pythonic solution which does not use indices:</p>
<pre><code>a = [None, 1, 5, None, 3, None, None]
index = next(i for i, j in reversed(tuple(enumerate(a))) if j)
</code></pre>
<p>The <code>tuple</code> bugs me, but it is needed as <code>reversed</code> cannot take in a generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another alternative using <code>filter()</code>. </p>
<pre><code>&gt;&gt;&gt; my_list = [None, 1, 5, None, 3, None, None]
&gt;&gt;&gt; filter(lambda x: x[1] is not None, enumerate(my_list))[-1][0]
4
</code></pre>
<p>But this won't work for empty <code>list</code> or list with all <code>None</code>. But in order to handle that, we can use <code>and</code> and <code>or</code> statements (since you need one line solution):</p>
<pre><code>&gt;&gt;&gt; (filter(lambda x: x is not None, my_list) and filter(lambda x: x[1] is not None, enumerate(my_list))[-1][0]) or -1
4
</code></pre>
<p>This expression will return <code>-1</code> for the above mentioned edge cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a generator that iterates on the indices of the list in reverse and tests until a not <code>None</code> value object is reached: </p>
<pre><code>def f(lst):
    try:
        return next(i for i in range(len(lst)-1, 0, -1) if lst[i] is not None)
    except StopIteration:
        print 'no item was found'
        raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the input list is very large, you can use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a> and the built-in <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow"><code>reversed</code></a> to avoid iterating or copying the whole thing:</p>
<pre><code>from itertools import dropwhile

def last_non_none(seq):
    return next(dropwhile(lambda x: x is None, reversed(seq)))
</code></pre>
<p>This will throw <code>StopIteration</code> if there are no non-<code>None</code> values, which I would argue is more pythonic than returning a default. </p>
</div>
<span class="comment-copy">@FranciscoCouzo that's the value, not the index</span>
<span class="comment-copy">Fransico 1) that would return the max of the values, which is not the question, (but it can easily be changed to return the index) but more to the point it does use a loop!. Maybe there is no better way...</span>
<span class="comment-copy">Sorry, I misread the question, I deleted the comment already.</span>
<span class="comment-copy">What if <code>j</code> is <code>0</code>? You need to be explicit: <code>if j is not None</code></span>
<span class="comment-copy">@PeterWood Indeed, good catch! thanks to njzk2 for edit!</span>
<span class="comment-copy">@Kasramvd I guess that is the best answer, though I expected python to have way to do that without looping. Thx for your answers</span>
<span class="comment-copy">@user1159290 how could you possibly do it without looping? You could do it without explicitly writing a loop yourself, e.g. using <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>itertools.dropwhile</code></a>, but there's still a loop in there!</span>
<span class="comment-copy">@jonrsharpe This is what I meant: using some python function ( or a combination of them) not involving visible python looping: such as max() for returning the max value: Of course these functions do loop under the hood, but it is not visible at python level. I thought I was missing something. Maybe not, but many answer where actually intersting!</span>
<span class="comment-copy">No need for max. The last index is the biggest one. <code>[i for i,element in enumerate(l) if element is not None][-1]</code></span>
<span class="comment-copy">Yes. That looks more efficient.</span>
<span class="comment-copy">I'd say this answer is "Pythonic enough" and the easiest one to understand.</span>
