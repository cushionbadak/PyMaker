<div class="post-text" itemprop="text">
<p>Now that <code>__init__.py</code> is <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="nofollow noreferrer">no longer required</a> to make a directory recognized as a package, is it best practice to avoid them entirely if possible? Or are there still well-accepted use cases for <code>__init__.py</code> in python 3.3+?</p>
<p>From what I understand, <code>__init__.py</code> were very commonly used to run code at module import time (<a href="https://stackoverflow.com/a/29509611/336527">for example</a> to encapsulate internal file structure of the package or to perform some initialization steps). Are these use cases still relevant with python 3.3+?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a very good discussion of this in <a href="https://stackoverflow.com/questions/1675734/how-do-i-create-a-namespace-package-in-python#answer-27586272">this answer</a>, and you should probably be familiar with <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">PEP 420</a> to clarify the difference between and <em>regular packages</em> (use <code>__init__.py</code>) and <em>namespace packages</em> (don't).</p>
<p>What I offer by way of answer is a combination of reading, references, and opinion. No claims to being "canonical" or "pythonic" here.</p>
<blockquote>
<p>Are [initialization] use cases still relevant with python 3.3+?</p>
</blockquote>
<p><strong>Yes</strong>. Take your <a href="https://stackoverflow.com/a/29509611/336527">example</a> as a use case, where the package author wants to bring several things into the root package namespace so the user doesn't have to concern themselves with its internal structure.</p>
<p>Another case is creating a <a href="http://chimera.labs.oreilly.com/books/1230000000393/ch10.html#_making_a_hierarchical_package_of_modules" rel="nofollow noreferrer">hierarchy</a> of modules. That reference (O'Reilly) actually says:</p>
<blockquote>
<p>The purpose of the <code>__init__.py</code> files is to include optional initialization code that runs as different levels of a package are encountered.</p>
</blockquote>
<p>They do consider namespace packages in that discussion, but continue:</p>
<blockquote>
<p>All things being equal, include the <code>__init__.py</code> files if youâ€™re just starting out with the creation of a new package.</p>
</blockquote>
<p>So, for your second question,</p>
<blockquote>
<p>is it best practice to avoid <code>__init__.py</code> entirely if possible?</p>
</blockquote>
<p><strong>No</strong>, unless your intent is to create a <em>namespace</em> package rather than a regular package, in which case you <strong>must not</strong> use <code>__init__.py</code>.</p>
<p>Why might you want that? The O'Reilly reference has the clearest <a href="http://chimera.labs.oreilly.com/books/1230000000393/ch10.html#namespacepackage" rel="nofollow noreferrer">example</a> I've seen about why namespace packages are cool, which is being able to <em>collapse</em> namespaces from separate, independently-maintained packages:</p>
<pre><code>foo-package/
    spam/
        blah.py

bar-package/
    spam/
        grok.py
</code></pre>
<p>Which allows</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.extend(['foo-package', 'bar-package'])
&gt;&gt;&gt; import spam.blah
&gt;&gt;&gt; import spam.grok
&gt;&gt;&gt;
</code></pre>
<p>So anyone can extend the namespace with their own code. Cool.</p>
</div>
<span class="comment-copy">The only real reason I see, to keep using <code>__init__.py</code>, is for backwards compatibility.</span>
<span class="comment-copy">@leaf so what about the <a href="http://stackoverflow.com/a/29509611/336527">example</a> I mentioned? What's a canonical way to do this in python 3.3+?</span>
<span class="comment-copy">Then, perhaps, it is best practice to avoid <i>packages</i> whenever possible, and use <i>namespaces</i> instead? Or is there some problem with that approach?</span>
<span class="comment-copy">It seems the advantage of namespace is that they are extensible. Their disadvantage is that you can't have <code>__init__.py</code> in them and therefore can't do some things (like encapsulating the file structure, performing initialization, etc.). Does it sound right?</span>
