<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/39750474/remove-an-even-odd-number-from-an-odd-even-python-list">Remove an even/odd number from an odd/even Python list</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>So I understand placing even numbers in a new list but when there are a number of odd numbers in front I can only seem to call -1? and for an empty string I receive 'nothing' when it should also return -1</p>
<pre><code>def first_even(items):
    """ (list of int) -&gt; int

    Return the first even number from items. Return -1 if items     contains no even numbers.

    &gt;&gt;&gt; first_even([1, 9, 3, 77, 13, 5, 8])
    8
    &gt;&gt;&gt; first_even([7, 1])
    -1
    """
    even = []
    for num in items:
        if num % 2 == 0:
            even.append(num)
        else:
            return -1
    return even[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def first_even(items):
    """ (list of int) -&gt; int

    Return the first even number from items. Return -1 if items     contains no even numbers.

    &gt;&gt;&gt; first_even([1, 9, 3, 77, 13, 5, 8])
    8
    &gt;&gt;&gt; first_even([7, 1])
    -1
    """
    for num in items:
        if num % 2 == 0:
            return num
    return -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>else</code> block will be executed for the first odd number, this will terminate the <code>for</code> and discard all previous <em>appends</em>. Instead you want to return the even number as soon as it is found (you don't need the list) and then move the <code>else</code> to align with the <code>for</code> or outside the <code>for</code>:</p>
<pre><code>def first_even(items):
    for num in items:
        if num % 2 == 0:
            return num
    else:
        return -1
    # or put the default value to return here
</code></pre>
<hr/>
<p>Reference for Python <code>for/else</code> block:</p>
<p><a href="https://stackoverflow.com/questions/37642573/how-can-i-make-sense-of-the-else-statement-in-python-loops/37643358#37643358">How can I make sense of the `else` clause of Python loops?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As others have noted, your <code>else</code> case is causing premature termination, and the use of a <code>list</code> is rather pointless. You could fix all this, see the other answers for minimalist fixes, but there is another option: Let Python built-ins do more of the work for you.</p>
<p><a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow">The <code>next</code> function</a> will return the first item from an iterator, and with a second argument, if the iterator is empty, it returns the second argument instead. So give it a <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow">generator expression</a> that lazily produces all the even numbers in the input, and it will pull the first one and return it. If none are found, the default case will return <code>-1</code> for you:</p>
<pre><code>def first_even(items):
    # x &amp; 1 == 0 is roughly equivalent and might be slightly faster
    return next((x for x in items if x % 2 == 0), -1)
</code></pre>
<p>For the pathological sorts, this might be slightly faster, but it's far less intuitive to people who don't already know Python internals inside and out; I don't recommend it:</p>
<pre><code>from itertools import filterfalse  # ifilterfalse on Py2

def first_even(items):
    # (1).__rand__ is roughly equivalent, and may be faster
    return next(filterfalse((2).__rmod__, items), -1)
</code></pre>
</div>
<span class="comment-copy">Put <code>return -1</code> outside the loop and <code>return num</code> instead of appending</span>
<span class="comment-copy">wrong! you can't have an 'else' without an 'if' at the same indentation level</span>
<span class="comment-copy">@user4421975 Hahaha, I bet you are new to Python. See <a href="http://stackoverflow.com/a/37643358/3125566">stackoverflow.com/a/37643358/3125566</a></span>
<span class="comment-copy">The else is actually redundant.  The only point of adding it would be if the <code>return num</code> was a <code>break</code>, you cannot return from a function twice</span>
<span class="comment-copy">@PadraicCunningham But <code>return num</code> does nearly the same thing as a <code>break</code> except that it returns control to the caller. Looks more like returning from an <code>else</code> branch when the <code>if</code> is not executed.</span>
<span class="comment-copy">@MosesKoledoye, I am not quite sure I follow, removing the else and putting the return outside the loop would behave exactly the same.</span>
<span class="comment-copy">Or <code>if not x % 2</code> which would be slightly faster</span>
<span class="comment-copy">@PadraicCunningham: True. My instinct is actually to write <code>not x % 2</code>, but I try to avoid it in SO answers since the test for <code>0</code> is describing the mathematical test more directly, and the performance difference is roughly 5-10 ns per test. :-)</span>
<span class="comment-copy">I hate typing so that is my excuse ;) You could also <code>not x &amp; 1</code> :)</span>
