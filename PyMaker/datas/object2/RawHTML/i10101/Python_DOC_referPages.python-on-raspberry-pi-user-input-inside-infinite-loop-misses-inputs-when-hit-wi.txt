<div class="post-text" itemprop="text">
<p>I have a very basic <em>parrot</em> script written in Python that simply prompts for a user input and prints it back inside an infinite loop. The Raspberry Pi has a USB barcode scanner attached for the input.</p>
<pre><code>while True:
    barcode = raw_input("Scan barcode: ")
    print "Barcode scanned: " + barcode
</code></pre>
<p>When you scan at a "normal" speed it works reliably and the command output looks like this:</p>
<pre><code>Scan barcode: 9780465031467
Barcode scanned: 9780465031467
Scan barcode: 9780007505142
Barcode scanned: 9780007505142
</code></pre>
<p>But when you really hammer it with many scans in close succession it is possible to make it miss inputs and the command output looks like this:</p>
<pre><code>Scan barcode: 9780141049113
Barcode scanned: 9780141049113
Scan barcode: 9780465031467
Barcode scanned: 9780465031467
Scan barcode: 9780007505142
9780571273188
Barcode scanned: 9780571273188
</code></pre>
<p>Notice how <code>9780007505142</code> was input but never printed back. It got <em>lost</em> in the confusion.</p>
<p>See a video demonstration of my test at: <a href="https://youtu.be/kdsfdKFhC1M" rel="nofollow">https://youtu.be/kdsfdKFhC1M</a> </p>
<p>My question: <strong>Is this an inevitability of using a low powered device like a Pi? Will it always be true that a user with a barcode scanner will be able to <em>out-run</em> the hardware's ability to keep up?</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>You should probably read from <code>stdin</code> directly using code similar to the following:</p>
<pre><code>import os
import sys
import select

stdin_fd = sys.stdin.fileno()
try:
    while True:
        sys.stdout.write("Scan barcode: ")
        sys.stdout.flush()
        r_list = [stdin_fd]
        w_list = list()
        x_list = list()
        r_list, w_list, x_list = select.select(r_list, w_list, x_list)
        if stdin_fd in r_list:
            result = os.read(stdin_fd, 1024)
            result = result.rstrip()
            result = [line.rstrip() for line in result.split('\n')]
            for line in result:
                print "Barcode scanned: %s" % line
except KeyboardInterrupt:
    print "Keyboard interrupt"
</code></pre>
<p>This code should handle the case that multiple lines are read at once. The <code>read</code> buffer size is arbitrary and you might have to change it depending on how much data you need to handle.</p>
</div>
<div class="post-text" itemprop="text">
<p>I know this is a little late, but after a closer look at the raw_input() <a href="https://docs.python.org/2/library/functions.html#raw_input" rel="nofollow">docs</a> I think it is pretty plain that raw_input is not designed to handle multi-line inputs. When it encounters a multi-line input it seems to only read the last line. (as demonstrated by your test). So my question is, how is raw_input getting a multi-line input in the first place? is the delay caused by the python program not being able to process the raw_input fast enough? Or is the delay inside the USB scanner/driver, and as a result it outputs two numbers instantaneously causing raw_input to process the last line without giving it an opportunity to process the first? </p>
</div>
<span class="comment-copy">Java you tried another language? -see what I did there-?</span>
<span class="comment-copy">@Jay No. Do you think there's a real chance that if I run the test in Java I won't be able to out-run it?</span>
<span class="comment-copy">I would say try it for testing purposes. Perhaps its a slow library, perhaps a slow language, perhaps the cpu just cant keepup. I will say that if you use c/c++/java you will have better performance for sure. The problem with c/c++ is that its hard to setup and you might not find the library you are looking for. Java is easier with easier setup with guaranteed performance gains.</span>
<span class="comment-copy">What about reading directly from <a href="https://docs.python.org/3/library/sys.html#sys.stdin" rel="nofollow noreferrer"><code>sys.stdin</code></a>?</span>
<span class="comment-copy">Reading straight from the device would be the next step. The characters <i>obviously</i> are being recognized, otherwise they would not be on screen, would they. Therefore something's fishy with <code>raw_input()</code></span>
