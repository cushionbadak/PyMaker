<div class="post-text" itemprop="text">
<p>I'm reading <a href="https://www.python.org/dev/peps/pep-0338/" rel="nofollow">PEP338</a> .Some words confused me:</p>
<blockquote>
<p>If the module is found, and is of <strong>type</strong> <em>PY_SOURCE</em> or <em>PY_COMPILED</em> , then the command line is effectively reinterpreted from <code>python &lt;options&gt; -m &lt;module&gt; &lt;args&gt;</code> to <code>python &lt;options&gt; &lt;filename&gt; &lt;args&gt;</code> . </p>
</blockquote>
<p>Do modules have types in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Modules can be loaded from <em>different sources</em>. The author refers to 2 specific sources the module was loaded from, see the <a href="https://docs.python.org/3/library/imp.html" rel="nofollow"><code>imp</code> module documentation</a>:</p>
<blockquote>
<p><code>imp.PY_SOURCE</code><br/>
  The module was found as a source file.</p>
<p>[...]</p>
<p><code>imp.PY_COMPILED</code><br/>
  The module was found as a compiled code object file.</p>
<p>[...]</p>
<p><code>imp.C_EXTENSION</code><br/>
  The module was found as dynamically loadable shared library.</p>
</blockquote>
<p>These values are used in the return value of the <a href="https://docs.python.org/3/library/imp.html#imp.get_suffixes" rel="nofollow"><code>imp.get_suffixes()</code> function</a>, among others.</p>
<p>The PEP states that only modules loaded from source (<code>.py</code> files) and from a bytecode cache file (<code>.pyc</code>) are supported; the <code>-m</code> switch does not support C extension modules (typically <code>.so</code> or <code>.dll</code> dynamically loaded libraries).</p>
<p>The resulting module object is still just a module object; the word <em>type</em> in the text you found is not referring Python's type system.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting from the link <a href="https://www.python.org/dev/peps/pep-0338/#proposed-semantics" rel="nofollow">PEP338</a></p>
<blockquote>
<p><strong>Proposed Semantics</strong> 
  The semantics proposed are fairly simple: if -m is
  used to execute a module the PEP 302 <strong>import mechanisms</strong> are used to
  locate the module and retrieve its compiled code, before executing the
  module in accordance with the semantics for a top-level module.</p>
</blockquote>
<p>Now let us refer to the documentation of imp (the import mechanism) and determine the different types of modules that can be imported
<a href="https://docs.python.org/2/library/imp.html#imp.get_suffixes" rel="nofollow">imp.get_suffixes()</a></p>
<blockquote>
<p><strong>imp.get_suffixes()</strong> Return a list of 3-element tuples, each describing
  a particular type of module. Each triple has the form (suffix, mode,
  type), where suffix is a string to be appended to the module name to
  form the filename to search for, mode is the mode string to pass to
  the built-in open() function to open the file (this can be 'r' for
  text files or 'rb' for binary files), and <strong>type is the file type,
  which has one of the values PY_SOURCE, PY_COMPILED, or C_EXTENSION,
  described below.</strong></p>
</blockquote>
<p>and subsequently it explains what the different types are</p>
<blockquote>
<p><strong>imp.PY_SOURCE</strong> The module was found as a source file.</p>
<p><strong>imp.PY_COMPILED</strong> The module was found as a compiled code object file.</p>
<p><strong>imp.C_EXTENSION</strong> The module was found as dynamically loadable shared
  library.</p>
</blockquote>
<p>So, the types mentioned in PEP 338 are nothing but the types of modules that can be imported and of these only PY_SOURCE or PY_COMPILED are the only two types out of the above three the command line is effectively reinterpreted from python  -m   to python    .</p>
</div>
<div class="post-text" itemprop="text">
<p>The <strong>type of module</strong> means the <strong>type of the file</strong> where the module is stored, as python files have some possible types (and extensions.</p>
<p>The most common are compiled python files (<strong>pyc</strong> extension) or the regular, python plain source (<strong>py</strong>). </p>
<p>There are many other <strong>py</strong> file extensions, see the (almost) full list here: <a href="https://stackoverflow.com/a/18032741/6575931">https://stackoverflow.com/a/18032741/6575931</a>. </p>
</div>
<span class="comment-copy">There are <i>types of modules</i>, in that they were sourced from a bytecompiled cache file or from source. The word <i>type</i> is not the same thing as the class of an object.</span>
<span class="comment-copy">See about python file extensions <a href="http://stackoverflow.com/a/18032741/6575931">stackoverflow.com/a/18032741/6575931</a></span>
<span class="comment-copy">Thanks for your nice help,and your answer is great too.</span>
<span class="comment-copy">Thanks for your nice help,i'll read the contens linked</span>
