<div class="post-text" itemprop="text">
<p>I have three lists with elements :</p>
<pre><code>a = [[0,1],[2,3],...]
b = [[5,6],[7,8],...]

c = []
</code></pre>
<p>I want to append elements from <strong>a</strong> and <strong>b</strong> into <strong>c</strong> to get:</p>
<pre><code>c = [ [0,1],[5,6],[2,3],[7,8],.... ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another very simple approach using <em>string slicing</em> (and <strong>most performance efficient</strong>) as:</p>
<pre><code>&gt;&gt;&gt; a = [[0,1],[2,3]]
&gt;&gt;&gt; b = [[5,6],[7,8]]
&gt;&gt;&gt; c = a + b # create a list with size = len(a) + len(b)
&gt;&gt;&gt; c[::2], c[1::2] = a, b  # alternately insert the value
&gt;&gt;&gt; c
[[0, 1], [5, 6], [2, 3], [7, 8]]
</code></pre>
<p>Below is the comparison of results with <code>timeit</code> for the answers mentioned here (Python version: 2.7):</p>
<ol>
<li><p>Using <em>string slicing</em>: 0.586 usec per loop</p>
<pre><code>moin@moin-pc:~$ python -m "timeit" -s "a = [[0,1],[2,3]]; b = [[5,6],[7,8]];" "c = a + b; c[::2], c[1::2] = a, b"
1000000 loops, best of 3: 0.586 usec per loop
</code></pre></li>
<li><p>Using <code>itertools.chain()</code>: 1.89 usec per loop </p>
<pre><code>moin@moin-pc:~$ python -m "timeit" -s "from itertools import chain; a = [[0,1],[2,3]]; b = [[5,6],[7,8]];" "c = list(chain(*zip(a, b)))"
1000000 loops, best of 3: 1.89 usec per loop
</code></pre></li>
<li><p>Using <code>reduce()</code>: 0.829 usec per loop</p>
<pre><code>moin@moin-pc:~$ python -m "timeit" -s "import operator; a = [[0,1],[2,3]]; b = [[5,6],[7,8]];" "c = reduce(operator.concat, zip(a, b))"
1000000 loops, best of 3: 0.829 usec per loop
</code></pre></li>
<li><p>Using <code>list.extend()</code>: 0.824 usec per loop</p>
<pre><code> moin@moin-pc:~$ python -m "timeit" -s "a = [[0,1],[2,3]]; b = [[5,6],[7,8]]; c=[]" "for pair in zip(a,b): c.extend(pair)"
 1000000 loops, best of 3: 0.824 usec per loop
</code></pre></li>
<li><p>Using <code>list.append()</code> twice: 1.04 usec per loop</p>
<pre><code>moin@moin-pc:~$ python -m "timeit" -s "a = [[0,1],[2,3]]; b = [[5,6],[7,8]]; c=[]" "for a_element, b_element in zip(a, b): c.append(a_element); c.append(b_element)"
1000000 loops, best of 3: 1.04 usec per loop
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Basic approach:</p>
<pre><code>&gt;&gt;&gt; a = [[0,1],[2,3]]
&gt;&gt;&gt; b = [[5,6],[7,8]]
&gt;&gt;&gt; c = []
&gt;&gt;&gt; for pair in zip(a,b):
...   c.extend(pair)
... 
&gt;&gt;&gt; c
[[0, 1], [5, 6], [2, 3], [7, 8]]
&gt;&gt;&gt; 
</code></pre>
<p>This breaks if the lengths aren't equal. But you can deal with that case as an exercise.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could <code>zip</code> the two lists and then reduce them to a flat list:</p>
<pre><code>import operator
c = reduce(operator.concat, zip(a, b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the two lists are the same length, the most compact way to do this uses <code>itertools.chain</code> and <code>zip</code>.</p>
<pre><code>from itertools import chain

a = [[0,1],[2,3],[10,11],[12,13]]
b = [[5,6],[7,8],[15,16],[17,18]]

c = [*chain(*zip(a, b))]
print(c)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[[0, 1], [5, 6], [2, 3], [7, 8], [10, 11], [15, 16], [12, 13], [17, 18]]
</code></pre>
<hr/>
<p>As juanpa.arrivillaga mentions in the comments, that syntax will not work on older versions of Python. Instead, you can do</p>
<pre><code>c = list(chain(*zip(a, b)))
</code></pre>
<p>Here's another option, which doesn't use imports or the <code>*</code> splat operator:</p>
<pre><code>c = [u for t in zip(a, b) for u in t]
</code></pre>
<hr/>
<p>If you need to handle input lists of unequal length, take a look at the <code>roundrobin</code> function in <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">Itertools Recipes</a>. Eg,</p>
<pre><code>c = list(roundrobin(a, b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>merged = []
for a_element, b_element in zip(a, b):
    merged.append(a_element)
    merged.append(b_element)
</code></pre>
<p>Unless you have very stringent performance requirements, the simplest approach is the right approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://pythonhosted.org/more-itertools/api.html" rel="nofollow"><code>more_itertools</code></a> which implements the <code>itertools</code> <a href="https://docs.python.org/2/library/itertools.html#recipes" rel="nofollow"><code>roundrobin</code> recipe</a></p>
<pre><code>&gt;&gt;&gt; from more_itertools import roundrobin
&gt;&gt;&gt; a = [[0,1],[2,3]]
&gt;&gt;&gt; b = [[5,6],[7,8]]
&gt;&gt;&gt; list(roundrobin(a, b))
[[0, 1], [5, 6], [2, 3], [7, 8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming len(a) == len(b) and you're adding them one by one in turn:</p>
<pre><code>for i in range(len(a)):
        c.append(a[i])
        c.append(b[i])
</code></pre>
<p>However, I would recommend to use <code>c = deque()</code>. Since deques are much quicker if you are making a lot of appends.</p>
</div>
<span class="comment-copy">do you mean <code>[5,6]</code> instead of <code>[5,3]</code>?</span>
<span class="comment-copy">What if the lists do not have equal length?</span>
<span class="comment-copy">Do you want to add elements from lists <code>a</code> and <code>b</code> one by one in turn?</span>
<span class="comment-copy">Ok. But you really should pass <code>timeit</code> those setup statements using the <code>-s</code> option. FWIW, in Python 3.6 my <code>[*chain(*zip(a, b))]</code> is about 10% faster than my <code>list(chain...)</code>version, and my list comp is slightly faster than that.</span>
<span class="comment-copy">@PM2Ring: Yes, you are right. I missed that. Updated the answer.</span>
<span class="comment-copy">@PM2Ring: I am using <code>Python 2.7</code>, so could not evaluate it for the syntax you mentioned. But I have already mentioned in my answer that my evaluation is for <code>Python 2.7</code></span>
<span class="comment-copy">I think you mean <code>list(chain(*zip(a,b)))</code> although I kind of <i>wish</i> that syntax was supported.</span>
<span class="comment-copy">@juanpa.arrivillaga The code I posted works for me on Python 3.6. But I guess I better add the older syntax to my answer.</span>
<span class="comment-copy">Oh! I should start making more wishes!</span>
<span class="comment-copy">@juanpa.arrivillaga: Python 3.6 is fun. I still haven't explored everything, but format strings (aka f-strings) are extremely addictive. :)</span>
<span class="comment-copy">Select your code and press CTRL+K in order to format it properly.</span>
<span class="comment-copy">It's more complicated to post code from a smartphone.</span>
<span class="comment-copy">Oh well then, I guess you just indented each line with 4 spaces</span>
