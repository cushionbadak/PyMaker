<div class="post-text" itemprop="text">
<p>Alternatively, I tried this, but it doesnt seem to get rid of the rows that have blank spaces (blank rows included in the number of rows I'd like to delete). Meanwhile, the code above appears to get rid of those blank spaces, but there is line termination.</p>
<pre><code>    next(filecsv) for i in range(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/fileinput.html#fileinput.input" rel="nofollow"><code>fileinput.input()</code></a> with the inplace update file option:</p>
<pre><code>from __future__ import print_function
import fileinput

skip_rows = int(input('How many rows to skip? '))
f = fileinput.input('input.csv', inplace=True)
for i in range(skip_rows):
    f.readline()
for row in f:
    print(row, end='')
</code></pre>
<p>This will skip the first <code>skip_rows</code> rows of the input file and overwrite it without you having to manage writing and moving a temporary file.</p>
<p>(You can omit importing <code>print_function</code> if you are using Python 3)</p>
</div>
<div class="post-text" itemprop="text">
<p>There are quite a few ways to grab input from a command line tool (which is what I am inferring you wrote).  Here are a couple:</p>
<p><em>Option 1:</em>  created in a file called out.py
use sys.argv</p>
<pre><code>import sys
arg1 = sys.argv[1]
print("passed in value: %s" % arg1)
</code></pre>
<p>Then run it by passing in an argument (note index 1, script is index 0)</p>
<pre><code>python out.py cell1
passed in value: cell1
</code></pre>
<p><em>Option 2:</em></p>
<p>A potentially better way is to use a commandline tool framework like click:  <a href="http://click.pocoo.org/5/" rel="nofollow">http://click.pocoo.org/5/</a>.  This has almost everything you could ever want to do, and they handle much of the hard logic for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can prompt the user with a simple while loop and listen into <a href="https://docs.python.org/3/library/sys.html#sys.stdin" rel="nofollow">standard input</a> or using the <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow">input()</a> function. </p>
<p>As to your question on how to delete lines in a file, you can read in the file as a list of lines.</p>
<pre><code>lines=[]
with open('input.txt') as f:
    lines=f.readlines()
</code></pre>
<p>You can then write back into the file everything past the lines you want to skip by using <a href="https://docs.python.org/2/tutorial/introduction.html#lists" rel="nofollow">list slicing</a>.</p>
<p>Also I am pretty sure similar questions have been asked before, try to Google or search Stack Overflow for your question or a subset of your question next time.</p>
<p><strong>P.S.</strong> 
I also want to add that if you are reading a very large file, it would be better if you read a line at a time, and outputted to a separate file. For a large enough file, you might run out of RAM to hold the file in memory.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Firstly I have opened up the csv file [...]</p>
</blockquote>
<p>Did you consider to use <a href="http://pandas.pydata.org/" rel="nofollow">pandas</a> to process your data?<br/>
If so, <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow">pandas.read_csv</a>, allows to skip lines using the <code>skiprows</code> parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You will typically use an iterator to read files. You could do something like this:</p>
<pre><code>numToSkip = 3
with open('somefile.txt') as f:
    for i, line in enumerate(f):
        if i &lt; numToSkip : continue

        # Do 'whatnot' processing here
</code></pre>
</div>
<span class="comment-copy">There might be a couple here: <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">docs.python.org/3/library/functions.html</a></span>
<span class="comment-copy">Hey! Thanks so much for the suggestion. It worked out really well, but I'd just like to ask why the 'rows' are so bundled up with each other now?</span>
<span class="comment-copy">For example, it has [1,2,3][4,5,6] etc instead of [4,5,6] being on the bottom of [1,2,3]</span>
<span class="comment-copy">Meaning that the output that i originally printed looks really different to the one before. Like its become more 'horizontal' because of the bundled up rows instead of before if you know what I mean. Any suggestions on how to revert back to the original format whilst maintaining the no. rows skipped? Appreciate it heaps.</span>
<span class="comment-copy">@ynitSed: something to do with line termination. What platform are you running the code on, what sorrt of files are you processing, and how are you viewing the result? Try adding <code>mode='rU' to the </code>fileinput.input()` line. If that doesn't work, try binary: `mode='rb'.</span>
<span class="comment-copy">@ynitSed: also note that I updated the code slightly to use <code>f.readilne()</code> to skip lines because <code>next()</code> will raise an exception if there are fewer than <code>skip_rows</code> lines in the file.</span>
