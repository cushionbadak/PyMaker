<div class="post-text" itemprop="text">
<p>The code I have included below throws the following error:</p>
<pre><code>NameError: name 'Vector2' is not defined 
</code></pre>
<p>at this line: </p>
<pre><code>def Translate (self, pos: Vector2):
</code></pre>
<p>Why does Python not recognize my <code>Vector2</code> class in the <code>Translate</code> method?</p>
<pre><code>class Vector2:

    def __init__(self, x: float, y: float):

        self.x = x
        self.y = y

    def Translate(self, pos: Vector2):

        self.x += pos.x
        self.y += pos.y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because when it encounters <code>Translate</code> (while compiling the class body), <code>Vector2</code> hasn't been defined yet (it is currently compiling, name binding hasn't been performed); Python naturally complains. </p>
<p>Since this is such a common scenario (type-hinting a class in the body of that class), you should use a <em><a href="https://www.python.org/dev/peps/pep-0484/#forward-references" rel="noreferrer">forward reference</a></em> to it by enclosing it in quotes:</p>
<pre><code>class Vector2:    
    # __init__ as defined

    def Translate(self, pos: 'Vector2'):    
        self.x += pos.x
        self.y += pos.y
</code></pre>
<p>Python (and any checkers complying to <code>PEP 484</code>) will understand your hint and register it appropriately. Python does recognize this when <code>__annotations__</code> are accessed through <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="noreferrer"><code>typing.get_type_hints</code></a>:</p>
<pre><code>from typing import get_type_hints

get_type_hints(Vector2(1,2).Translate)
{'pos': __main__.Vector2}
</code></pre>
<hr/>
<p>This has been changed as of Python 3.7; see <a href="https://stackoverflow.com/a/50768146/4952130">abarnert's answer below</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The feature you're asking for is called forward (type) references, and it has been added to Python as of 3.7 (in <a href="https://www.python.org/dev/peps/pep-0563/" rel="nofollow noreferrer">PEP 563</a>).<sup>1</sup> So this is now valid:</p>
<pre><code>from __future__ import annotations
class C:
    def spam(self, other: C) -&gt; C:
        pass
</code></pre>
<p>Notice the <a href="https://www.python.org/dev/peps/pep-0563/#enabling-the-future-behavior-in-python-3-7" rel="nofollow noreferrer"><code>__future__</code> statement</a>. This will be necessary <a href="https://www.python.org/dev/peps/pep-0563/#deprecation-policy" rel="nofollow noreferrer">until 4.0</a>.</p>
<p>Unfortunately, in Python 3.6 and earlier, this feature is not available, so you have to use string annotations, as explained in <a href="https://stackoverflow.com/a/40049081/908494">Jim Fasarakis Hilliard's answer</a>.</p>
<p>Mypy already supports forward declarations, even when run under Python 3.6â€”but it doesn't do you much good if the static type checker says your code is fine but the interpreter raises a <code>NameError</code> when you try to actually run it.</p>
<hr/>
<p><sub>1. This was already discussed as a possible feature in <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP 484</a>, but deferred until later, after people had more experience using forward declarations in annotations. PEP 563/Python 3.7 is that "later".</sub></p>
</div>
<span class="comment-copy">Could you provide me with a good source of information that touches more upon how Python walks through my source? I'm interested about what is going on when Python hasn't defined my class yet when it's going through my instance methods of this same class.</span>
<span class="comment-copy">@Vanitas Hm, you could take a look at <a href="http://eli.thegreenplace.net/2012/06/15/under-the-hood-of-python-class-definitions" rel="nofollow noreferrer">Eli Bendersky's article</a> that looks at class definitions. He's generally written a good set of articles describing how Python does things.</span>
<span class="comment-copy">Had a quick read through the article and some others from Eli Bendersky, also found your article on Type Hinting in Python 3.5. I'll give the articles a good read, thanks for sharing. :)</span>
