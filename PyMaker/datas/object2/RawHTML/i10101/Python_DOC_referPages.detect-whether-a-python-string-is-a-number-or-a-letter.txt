<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15558392/how-to-check-if-character-in-string-is-a-letter-python">How to check if character in string is a letter? Python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/354038/how-do-i-check-if-a-string-is-a-number-float">How do I check if a string is a number (float)?</a>
<span class="question-originals-answer-count">
                    32 answers
                </span>
</li>
</ul>
</div>
<p>How can I detect either numbers or letters in a string? I am aware you use the ASCII codes, but what functions take advantage of them?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Check if string is <em>positive</em> digit (integer) and alphabet</h1>
<p>You may use <a href="https://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="noreferrer"><strong><code>str.isdigit()</code></strong></a> and <a href="https://docs.python.org/2/library/stdtypes.html#str.isalpha" rel="noreferrer"><strong><code>str.isalpha()</code></strong></a> to check whether given string is <em>positive</em> integer and alphabet respectively. </p>
<p>Sample Results:</p>
<pre><code># For alphabet
&gt;&gt;&gt; 'A'.isdigit()
False
&gt;&gt;&gt; 'A'.isalpha()
True

# For digit
&gt;&gt;&gt; '1'.isdigit()
True
&gt;&gt;&gt; '1'.isalpha()
False
</code></pre>
<h1>Check for strings as positive/negative - integer/float</h1>
<p><code>str.isdigit()</code> returns <code>False</code> if the string is a <em>negative</em> number or a float number. For example:</p>
<pre><code># returns `False` for float
&gt;&gt;&gt; '123.3'.isdigit()
False
# returns `False` for negative number
&gt;&gt;&gt; '-123'.isdigit()
False
</code></pre>
<p>If you want to <strong>also check for the <em>negative</em> integers and <a href="https://docs.python.org/3/library/functions.html#float" rel="noreferrer"><code>float</code></a></strong>, then you may write a custom function to check for it as:</p>
<pre><code>def is_number(n):
    try:
        float(n)   # Type-casting the string to `float`.
                   # If string is not a valid `float`, 
                   # it'll raise `ValueError` exception
    except ValueError:
        return False
    return True
</code></pre>
<p>Sample Run:</p>
<pre><code>&gt;&gt;&gt; is_number('123')    # positive integer number
True

&gt;&gt;&gt; is_number('123.4')  # positive float number
True

&gt;&gt;&gt; is_number('-123')   # negative integer number
True

&gt;&gt;&gt; is_number('-123.4') # negative `float` number
True

&gt;&gt;&gt; is_number('abc')    # `False` for "some random" string
False
</code></pre>
<h1>Discard "NaN" (not a number) strings while checking for number</h1>
<p>The above functions will return <code>True</code> for the "NAN" (Not a number) string because for Python it is valid float representing it is not a number. For example:</p>
<pre><code>&gt;&gt;&gt; is_number('NaN')
True
</code></pre>
<p>In order to check whether the number is "NaN", you may use <a href="https://docs.python.org/2/library/math.html#math.isnan" rel="noreferrer"><strong><code>math.isnan()</code></strong></a> as:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; nan_num = float('nan')

&gt;&gt;&gt; math.isnan(nan_num)
True
</code></pre>
<p>Or if you don't want to import additional library to check this, then you may simply check it via comparing it with itself using <code>==</code>. Python returns <code>False</code> when <code>nan</code> float is compared with itself. For example:</p>
<pre><code># `nan_num` variable is taken from above example
&gt;&gt;&gt; nan_num == nan_num
False
</code></pre>
<p>Hence, above <strong>function <code>is_number</code> can be updated to return <code>False</code> for <code>"NaN"</code></strong> as:</p>
<pre><code>def is_number(n):
    is_number = True
    try:
        num = float(n)
        # check for "nan" floats
        is_number = num == num   # or use `math.isnan(num)`
    except ValueError:
        is_number = False
    return is_number
</code></pre>
<p>Sample Run:</p>
<pre><code>&gt;&gt;&gt; is_number('Nan')   # not a number "Nan" string
False

&gt;&gt;&gt; is_number('nan')   # not a number string "nan" with all lower cased
False

&gt;&gt;&gt; is_number('123')   # positive integer
True

&gt;&gt;&gt; is_number('-123')  # negative integer
True

&gt;&gt;&gt; is_number('-1.12') # negative `float`
True

&gt;&gt;&gt; is_number('abc')   # "some random" string
False
</code></pre>
<h1>Allow Complex Number like "1+2j" to be treated as valid number</h1>
<p>The above function will still return you <code>False</code> for the <a href="https://docs.python.org/3/library/stdtypes.html#typesnumeric" rel="noreferrer"><em>complex numbers</em></a>. If you want your <strong><code>is_number</code> function to treat <em>complex numbers</em> as valid number</strong>, then you need to type cast your passed string to <a href="https://docs.python.org/3/library/functions.html#complex" rel="noreferrer"><strong><code>complex()</code></strong></a> instead of <a href="https://docs.python.org/3/library/functions.html#float" rel="noreferrer"><strong><code>float()</code></strong></a>. Then your <code>is_number</code> function will look like:</p>
<pre><code>def is_number(n):
    is_number = True
    try:
        #      v type-casting the number here as `complex`, instead of `float`
        num = complex(n)
        is_number = num == num
    except ValueError:
        is_number = False
    return is_number
</code></pre>
<p>Sample Run:</p>
<pre><code>&gt;&gt;&gt; is_number('1+2j')    # Valid 
True                     #      : complex number 

&gt;&gt;&gt; is_number('1+ 2j')   # Invalid 
False                    #      : string with space in complex number represetantion
                         #        is treated as invalid complex number

&gt;&gt;&gt; is_number('123')     # Valid
True                     #      : positive integer

&gt;&gt;&gt; is_number('-123')    # Valid 
True                     #      : negative integer

&gt;&gt;&gt; is_number('abc')     # Invalid 
False                    #      : some random string, not a valid number

&gt;&gt;&gt; is_number('nan')     # Invalid
False                    #      : not a number "nan" string
</code></pre>
<p><strong><em>PS: Each operation for each check depending on the type of number comes with additional overhead. Choose the version of <code>is_number</code> function which fits your requirement.</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>For a string of length 1 you can simply perform <code>isdigit()</code> or <code>isalpha()</code></p>
<p>If your string length is greater than 1, you can make a function something like..</p>
<pre><code>def isinteger(a):
    try:
        int(a)
        return True
    except ValueError:
        return False
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/2/library/stdtypes.html#string-methods" rel="nofollow noreferrer">this list</a>, particularly <code>str.isdigit()</code> and <code>str.isalpha()</code>.</span>
<span class="comment-copy">This is a wonderfully complete and well-described answer. +1</span>
<span class="comment-copy">Good answer but doesn't handle TypeError exception. Like when you pass a list to the <code>is_number</code> function.</span>
<span class="comment-copy">@Amin That is by design. Functions should not implicitly compress the exceptions. For example, what'll happen if you do <code>float([1, 2, 3])</code> ? IT'll raise <code>TypeError</code> exception</span>
