<div class="post-text" itemprop="text">
<p>So I'm trying to define a function so that the elements of a list</p>
<p><code>elements = ['H', 'N', 'C', 'O']</code> 
equal to the elements in another list in the same positions</p>
<p><code>molarMass = [1.00794, 14.0067, 12.0107, 15.9994]</code></p>
<p>So that H = 1.00794, N = 14.0067, etc..</p>
<p>Edit:
trying to define a function example:
<code>elementMolarMass(elementSymbol)</code>
that when used will look like this 
<code>elementMolarMass('H')</code>
and it returns the corresponding element from the first list and match with the element in the other list that is in the same position
<code>1.00794</code>.
Not sure how to even begin with that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could bind them with dictionary comprehension</p>
<pre><code>    elements = ['H', 'N', 'C', 'O']
    molarMass = [1.00794, 14.0067, 12.0107, 15.9994]

    ElementToMolar = {elements[x]:molarMass[x] for x in range(len(elements))}

    for x in ElementToMolar:
        print (x, ElementToMolar[x])

Which outputs:

    O 15.9994
    H 1.00794
    N 14.0067
    C 12.0107
</code></pre>
<p>Or if you want to abstract it with operations and use / interact with the data further, probably should use a class?</p>
<pre><code>elements = ['H', 'N', 'C', 'O']
molarMass = [1.00794, 14.0067, 12.0107, 15.9994]

class Element(object):
    def __init__(self, Name, Mass):
        self.Name = Name
        self.Mass = Mass

    def __str__(self):
        return "{0.Name} = {0.Mass}".format(self)

def CreateElementsFromLists(elementList, molarMassList):
    if (len(elementList) == len(molarMassList)):        
        return [Element(elementList[x], molarMassList[x]) for x in range(len(elementList))]
    else:
        print ("Lists should have equal length")

elements = CreateElementsFromLists(elements, molarMass)

for element in elements:
    print (element)
</code></pre>
<p>Which will generate a new list of elements that you may use. And output:</p>
<p><code>H = 1.00794
N = 14.0067
C = 12.0107
O = 15.9994</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a dictionary if it works for you:</p>
<pre><code>dict(zip(elements, molarMass))
</code></pre>
<p>It'll give you the result:</p>
<pre><code>{'H': 1.00794, 'C': 12.0107, 'O': 15.9994, 'N': 14.0067}
</code></pre>
<p>Or if you want it as a list of strings:</p>
<pre><code>["{}={}".format(elem[0], elem[1]) for elem in zip(elements, molarMass)]
</code></pre>
<p>Or in one string:</p>
<pre><code>' '.join("{}={}".format(elem[0], elem[1]) for elem in zip(elements, molarMass))
</code></pre>
<p>After your update it's easier to use dictionary like this:</p>
<pre><code>elementMolarMass = dict(zip(elements, molarMass))
print(elementMolarMass['H'])
</code></pre>
<p>Result:</p>
<pre><code>1.00794
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can either build a dict out of it like other answers suggest, or you can use the less efficient list lookup and use the resulting index against the second list:</p>
<pre><code>def elementMolarMass(elementSymbol):
    return molarMass[elements.index(elementSymbol)]


elements.index('N')
Out[35]: 1

elements.index('C')
Out[36]: 2

elements.index('W')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-37-c3eb78ff165e&gt; in &lt;module&gt;()
----&gt; 1 elements.index('W')

ValueError: 'W' is not in list
</code></pre>
</div>
<span class="comment-copy">Are you trying to achieve a dictionary, list of lists/tuples or actual variables? In my opinion a dictionary would be more optimal</span>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a></span>
<span class="comment-copy">@AndrewLi I'm actually just trying to do an assignment and the first part of that is to make the elements in one list equal to the elements in another list which are in proper order already.</span>
<span class="comment-copy">So global variables? You still aren't clear about what you want</span>
<span class="comment-copy">What is the reason you need a function to do it as a dictionary already does this? What other functionality do you required that justifies the function?</span>
<span class="comment-copy">First solution has been posted already in a better form of dict and second solution doesn't do any good, you have to manually supply both Name and Mass which is pointless, how is that different from print("H","=","1.00794") which is much easier and much less verbose?</span>
<span class="comment-copy">From what I can tell he wasn't quite sure what he was looking for, so I provided alternatives. Apologies for not spotting the dict example already. And since he said he wanted to do calculations later I thought a class with element data might future proof him to store more data / methods on his element.</span>
<span class="comment-copy">i don't care about first example, you can much better improve second one so it will look good and solve the problem without manual intervention. I like this part though return "{0.Name} = {0.Mass}".format(self)</span>
<span class="comment-copy">Updated to be more autonomous. Should be able to combine the answers and make whatever he needs from this. Whether that be a list, dictionary, class, list of classes or any other combination.</span>
