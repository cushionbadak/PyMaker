<div class="post-text" itemprop="text">
<p>If I take a simple <code>ListView</code>, and wish to return JSON:</p>
<pre><code>from django.core import serializers
from django.http import JsonResponse
class MyListView(ListView):

def get_queryset(self):
    return Thing.objects.all()

def get(self, request, *args, **kwargs):
    data = serializers.serialize("json", self.get_queryset())
    return JsonResponse(data, status=200, safe=False)
</code></pre>
<p>This will give me "valid" json. However, the json will be delivered like this:</p>
<p><a href="https://i.stack.imgur.com/LxocV.jpg" rel="nofollow noreferrer"><img alt="bad json" src="https://i.stack.imgur.com/LxocV.jpg"/></a></p>
<p>It's not only an eyesore, if you then try to print that (eg via <code>console.log</code>), those <code>"""</code> on lines 2, 8, 11 will become <code>\"</code>. (This has been <a href="https://stackoverflow.com/q/30655567/3790954">noted</a> in other <a href="https://stackoverflow.com/q/19023205/3790954">questions</a>). To parse that json in the browser, you need to run it through <code>JSON.parse</code> twice (or transpile the escaped chars another way).</p>
<p>On the other hand, if I do the below code (and this is my present hack for getting around the problem):</p>
<pre><code>data = list(map(lambda thing: {"pk": thing.pk, &lt;etc&gt;}, self.get_queryset()))
return JsonResponse(data, status=200, safe=False)
</code></pre>
<p>This gives me valid json without the additional <code>"</code> chars (excuse the cat pic):</p>
<p><a href="https://i.stack.imgur.com/GQAPk.jpg" rel="nofollow noreferrer"><img alt="good json" src="https://i.stack.imgur.com/GQAPk.jpg"/></a></p>
<p><strong><em>My question:</em></strong> clearly, the browser is getting different inputs. Yes, they're both valid json (they pass validators) - but the first won't clear <code>JSON.parse()</code>. Is there any way to force the core serializer to conform to the second json output format? At present I'm having to write a lot of boilerplate serializer code that's making my classes look messy.</p>
</div>
<div class="post-text" itemprop="text">
<p>The inbuilt django serializer outputs a <code>String</code>. The django <code>JsonpResponse</code> takes key+value data and stringifies it with the right HTTP headers added. That's fine if you pass a dictionary or list, but if you pass a <code>String</code> that aready has <code>"</code> chars in it (like the output of the core serializer does), <code>JsonResponse</code> blithely escapes the existing <code>"</code> because you can't have <code>"</code> in an unescaped string of course. Yay teamwork.</p>
<p>Obviously, with this deeper understanding of what's going on, it's a bit stupid to expect the serializer to output anything other than a string - that's what serializers do, right?</p>
<p>So then I might think, can I get the JsonResponse encoder to ignore the <code>"</code> somehow in the string? <a href="http://%20https://docs.djangoproject.com/en/1.10/ref/request-response/#jsonresponse-objects" rel="nofollow">JsonResponse in 1.9</a> can <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow">provide encoder arguments</a>.</p>
<p>Yes, but none of the arguments include <code>magically_skip_double_quotes=true</code>, and even if it did it wouldn't be able to parse <code>{"quotation": "\"Fine weather!\" said Bob."}</code> properly.</p>
<p>And at that point, you kind of realise that you actually want to just:</p>
<pre><code>from django.forms import model_to_dict
data = [model_to_dict(thing) for thing in things]
</code></pre>
<p>And that's probably the easiest way of going about it.</p>
</div>
