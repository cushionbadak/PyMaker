<div class="post-text" itemprop="text">
<p>Pardon me if this is a really simple question. I've been at this for hours. I'm trying to read a csv file per row. However on the last row I don't want it to append any "," that's why I had separated the problem in an if-elif statement.</p>
<p>I'm not sure if this is just me sleepy but I can't seem to fix this simple matter. It doesn't enter in any condition yet when I print out the <code>print (iter, row_count , iter &lt; row_count)</code> I'm 100% sure that the last row is False.</p>
<pre><code>   #read csv
   data = csv.reader(open(csvFile, 'rb'), dialect='excel')

   reader = csv.reader(open(csvFile, 'r'), delimiter=",")
   tempData = list(reader)
   row_count = len(tempData)


   #geojson template
   template = \
      '''\
      {
        "type" : "Feature",
        "id" : "%s",
        "geometry" : {
            "type" : "Point",
            "coordinates" : [%s, %s]
        },
        "properties" : {
            "name" : "%s"
         }
      }
      '''

#head of geojson
output = \
    '''
{ "type" : "FeatureCollection",
    "features" : [
    '''

#loop in csv
    iter = 0

    for row in data:
        iter += 1
        print (iter, row_count , iter &lt; row_count)
        if (iter &lt; row_count == True):
            print("TRUE")
            id = row[0]
            name = row[1]
            latitude = row[2]
            longitude = row[3]
            output += template % (row[0], row[3], row[2], row[1])
            output += ","
            print (output)
        elif (iter &lt; row_count == False):
            print("FALSE")
            id = row[0]
            name = row[1]
            latitude = row[2]
            longitude = row[3]
            output += template % (row[0], row[3], row[2], row[1])
            print (output)
 #tail of geojson
output += \
    '''\
    ]
}
    '''

#open geojson file to write output
outFileHandler = open(geojsonFilePath, 'w')
outFileHandler.write(output)

print("Converted to geoJSON")
outFileHandler.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>iter &lt; row_count == True
</code></pre>
<p>and</p>
<pre><code>iter &lt; row_count == False
</code></pre>
<p>don't do what you think they do. </p>
<p>Python syntax allows <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow">chaining of comparisons</a>, so something like </p>
<pre><code>a &lt; x &lt; b
</code></pre>
<p>is equivalent to</p>
<pre><code>(a &lt; x) and (x &lt; b)
</code></pre>
<p>This is a very handy feature, but it means that your <code>iter &lt; row_count == True</code> is equivalent to</p>
<pre><code>(iter &lt; row_count) and (row_count == True)
</code></pre>
<p>So you should change that <code>if</code> statement to</p>
<pre><code>if iter &lt; row_count:
</code></pre>
<p>and change the <code>elif</code> to a plain <code>else:</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Donâ€™t use the <code>if</code> and let <code>join</code> do the work for you:</p>
<pre><code>outputs = []
for row in data:
    id = row[0]
    name = row[1]
    latitude = row[2]
    longitude = row[3]
    outputs.append(template % (row[0], row[3], row[2], row[1]))
output = ','.join(outputs)
</code></pre>
<hr/>
<p>Update:  after seeing your entire snippet, I would recommend letting python do your JSON formatting?  Use <code>json.dump</code></p>
<pre><code>import json

. . . 

outputs = [{ 
    "type" : "Feature",
    "id" : row[0],
    "geometry" : {
        "type" : "Point",
        "coordinates" : [int(row[1]), int(row[2])]
    },
    "properties" : {
        "name" : row[3]
     }        
} for row in data]
output = {
    'features': outputs,
    'type': 'FeatureCollection',
}
with open(geojsonFilePath, 'w') as f:
    json.dump(output, f)
    # if you want pretty formatting, use json.dump(output, f, indent=4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use like this:</p>
<pre><code>(iter &lt; row_count) == True
(iter &lt; row_count) == False
</code></pre>
<p>And read about order of execution in logical expression</p>
<p>And yes, you don't need to use comparaison with False and True</p>
</div>
<div class="post-text" itemprop="text">
<p>Order of operations.</p>
<p>In Python,</p>
<pre><code>&gt;&gt;&gt; 1 &lt; 2 == True
False
</code></pre>
<p>because that resolves as <code>(1 &lt; 2) and (2 == True)</code> or <code>True and False</code></p>
<p>You don't need to compare the result of <code>&lt;</code> to True. Just use it directly, <code>if iter &lt; row_count</code>, and you should be fine.</p>
<p>Also, this is not the best way to do this - most trivially, everything but the prints is the same in both cases, so you could do everything but the prints once and put only the prints in the conditionals. If you're willing to do more refactoring, others have suggested other ways.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this will fix your issue.  Just remove the ',' after you are done iterating through the data </p>
<pre><code>for row in data:
   id = row[0]
   name = row[1]
   latitude = row[2]
   longitude = row[3]
   output += template % (row[0], row[3], row[2], row[1])
   output += ","
   print (output)
 output = output[:-1]
</code></pre>
<p>Additionally, look at <code>enumerate()</code>.  You use it like this</p>
<pre><code>for index, row in enumerate(data):
  &lt;index is your iter&gt;
  &lt;row is the same as your loop&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all you should consider some value for <code>row_count</code> which is not mentioned in the provided code, so in this way you don't need to compare it to <code>True</code> or <code>False</code>. then, it's better to change the iter value after performing <code>if</code> or <code>elif</code></p>
<p><strong>EDIT:</strong>
Therefore <code>ietr</code> is eqaul to <code>row_count</code>. I think it'is not a right way to compare a <strong>Boolean</strong> value like <code>row_count</code> with an <strong>integer</strong> unless you define <code>TRUE</code> or <code>FALSE</code> as macros.</p>
</div>
<span class="comment-copy">A couple of tips: 1) don't use <code>iter</code> as a variable name; it is already the name of a built-in function, and 2) <code>iter &lt; row_count</code> is already a boolean value; you don't need to compare it to <code>True</code> or <code>False</code>.</span>
<span class="comment-copy">Because <code>row_count</code> is not initialized</span>
<span class="comment-copy">@Ssein it's initialized somewhere above my code. I just posted the snippet here which is the main problem...</span>
<span class="comment-copy">@chepner same goes for <code>id</code> - it also shadows a built-in name</span>
<span class="comment-copy">@chepner hehe yep. I wasn't supposed to do that but I was trying all of the options that I can</span>
<span class="comment-copy">hmmm I'll try this approach</span>
<span class="comment-copy">thanks for your suggestion. I'll read up on this. another user also was asking why I'm not using it. I forgot that that part is a small json. Thanks!</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP-8</a> recommends that you <b>don't</b> do that: "Don't compare boolean values to True or False using =="</span>
<span class="comment-copy">Yes, I already added this to the answer, but thank you for the PEP8 link</span>
<span class="comment-copy">yes if I really wanted to do that I guess this is the right way. I do consider not doing the true of false thing @PM2Ring</span>
<span class="comment-copy">thank you for this. I'll check if this resolves my issue.</span>
<span class="comment-copy">I was trying this a while ago and wasn't working. I'm not sure if it's the template or I can't remember if that's the time I started enclosing it in the conditional statements. I'll try this again</span>
