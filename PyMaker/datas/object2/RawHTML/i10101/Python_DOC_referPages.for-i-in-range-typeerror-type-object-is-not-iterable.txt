<div class="post-text" itemprop="text">
<p>Say you have a list value like this: </p>
<p><code>spam = ['apples', 'bananas', 'tofu', 'cats']</code> </p>
<p>Write a function that takes a list value as an argument and returns a string with all the items separated by a comma and a space, with 'and' inserted before the last item. </p>
<p>For example, passing the previous <code>spam</code> list to the function would return <code>'apples, bananas, tofu, and cats'</code>, but your function should be able to work with any list value passed to it</p>
<p>My cod is below. When running, it shows <code>TypeError</code> and <code>print(value, sep = ', ')</code> won't work; They are not separated with comma and space.</p>
<pre><code>def command(arg):
    arg.insert(-1, 'and')
    value = arg
    for i in range:
        print(value, sep =', ')


spam = []
while True:
    print('Enter the list values:')
    listvalue = input()
    if listvalue == '':
        break
    spam = spam + [listvalue]
command(spam)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to specify the range value with <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range(stop)</code>or <code>range(start, stop[, step])</code></a>. Maybe <code>range(len(value))</code> if value is a list.</p>
<p>You get the exception <code>TypeError: 'type' object is not iterable</code> because you are referencing the class <code>range</code> instead of calling it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need a start and an end point for the FOR loop.</p>
<p>eg. this will return "This is printed" 10 times.</p>
<pre><code>for i in range(0,9):
    print("This is printed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code which does that</p>
<pre><code>def listfunction(stringList):
    strings = ''
    j=0
    for i in range(len(stringList)):
        j=i
        if j == (len(stringList)-1):
            strings = strings + 'and ' + str(stringList[i]) + '.'
        else:
            strings = strings + str(stringList[i]) + ',' + ' '
        #print(strings)   
    return strings
</code></pre>
</div>
<span class="comment-copy"><code>for i in range</code> ??? <code>range</code> of what ?</span>
<span class="comment-copy"><code>for i in range</code>… <i>what</i> range exactly…?</span>
<span class="comment-copy">Did anybody say "what range" yet?</span>
<span class="comment-copy">actually <code>range</code> has not been defined in your <code>command</code> function</span>
<span class="comment-copy">i have to print from index[0] to index[-1]. so it will be for i in range(strating list index) to (last list index) right?</span>
<span class="comment-copy">He's <b><i>not</i></b> <i>calling</i> the function, that's the problem…</span>
<span class="comment-copy">Yes I meant he is calling the object not the function, I should make it more clear.</span>
<span class="comment-copy">No, he's trying to <i>iterate a function object</i> (without calling it)…</span>
<span class="comment-copy">@Tiphaine he is <i>_still</i> not calling anything. "calling" means "applying the call operator" (which is the parens), which will activate the <code>__call__</code> method of the object (if it has one of course - else you get a <code>TypeError</code> "object is not callable"). Also, in Python 3, <code>range</code> is a class, not a function.</span>
<span class="comment-copy">@brunodesthuilliers thanks for the precision.</span>
<span class="comment-copy">i have to print from index[0] to index[-1]. so it will be for i in range(strating list index) to (last list index) right?</span>
<span class="comment-copy">yes you should be able to do it that way. personallly if you are wanting to do it like that i would create a variable which is equal to the list length and use the variable for the end point in the for loop just so the code can still run with different lengths of lists</span>
