<div class="post-text" itemprop="text">
<p>I have the following command line tool:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description = "A cool application.")
parser.add_argument('positional')
parser.add_argument('--optional1')
parser.add_argument('--optional2')

args = parser.parse_args()
print args.positionals
</code></pre>
<p>The output of <code>python args.py</code> is:</p>
<pre><code>usage: args.py [-h] [--optional1 OPTIONAL1] [--optional2 OPTIONAL2]
               positional
</code></pre>
<p>however I would like to have:</p>
<pre><code>usage: args.py [-h] positional [--optional1 OPTIONAL1] [--optional2 OPTIONAL2]
</code></pre>
<p>How could I have that reordering?</p>
</div>
<div class="post-text" itemprop="text">
<p>You would either have to provide your own help formatter, or specify an explicit usage string:</p>
<pre><code>parser = argparse.ArgumentParser(
    description="A cool application.",
    usage="args.py [-h] positional [--optional1 OPTIONAL1] [--optional2 OPTIONAL2]")
</code></pre>
<p>The order in the help message, though, does not affect the order in which you can specify the arguments. <code>argparse</code> processes any defined options left-to-right, then assigns any remaining arguments to the positional parameters from left to right. Options and positional arguments can, for the most part, be mixed.</p>
</div>
<div class="post-text" itemprop="text">
<p>With respect to each other the order of <code>positionals</code> is fixed - that's why they are called that.  But <code>optionals</code> (the flagged arguments) can occur in any order, and usually can be interspersed with the postionals (there are some practical constrains when allowing variable length <code>nargs</code>.)</p>
<p>For the <code>usage</code> line, <code>argparse</code> moves the <code>positionals</code> to the end of the list, but that just a display convention.</p>
<p>There have been SO questions about changing that display order, but I think that is usually not needed.  If you must change the display order, using  a custom <code>usage</code> parameter is the simplest option.  The programming way requires subclassing the help formatter and modifying a key method.</p>
</div>
<span class="comment-copy">Could you still run it with your desired output ? Reading the API it says the order doesn't really matter with optional and positional arguments.   <a href="https://docs.python.org/3/howto/argparse.html#combining-positional-and-optional-arguments" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a></span>
