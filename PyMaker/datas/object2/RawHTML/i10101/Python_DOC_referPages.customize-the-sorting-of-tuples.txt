<div class="post-text" itemprop="text">
<p>In <strong>Python 2.x</strong>, I could pass custom function to sorted and .sort functions</p>
<pre><code>&gt;&gt;&gt; x=['kar','htar','har','ar']
&gt;&gt;&gt;
&gt;&gt;&gt; sorted(x)
['ar', 'har', 'htar', 'kar']
&gt;&gt;&gt; 
&gt;&gt;&gt; sorted(x,cmp=customsort)
['kar', 'htar', 'har', 'ar']
</code></pre>
<p>Because, in <em>My</em> language, consonents are comes with this order</p>
<pre><code>"k","kh",....,"ht",..."h",...,"a"
</code></pre>
<p>But In <strong>Python 3.x</strong>, looks like I could not pass <code>cmp</code> keyword</p>
<pre><code>&gt;&gt;&gt; sorted(x,cmp=customsort)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'cmp' is an invalid keyword argument for this function
</code></pre>
<p>Is there any alternatives or should I write my own sorted function too?</p>
<p><sub>Note: I simplified by using "k", "kh", etc. Actual characters are Unicodes and even more complicated, sometimes there is vowels comes before and after consonents, I've done custom comparison function, So that part is ok. Only the problem is I could not pass my custom comparison function to sorted or .sort</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>key</code> argument (and follow the <a href="http://code.activestate.com/recipes/576653-convert-a-cmp-function-to-a-key-function/" rel="noreferrer">recipe</a> on how to convert your old <code>cmp</code> function to a <code>key</code> function).</p>
<p><code>functools</code> has a function <code>cmp_to_key</code> mentioned at <a href="https://docs.python.org/3.6/library/functools.html#functools.cmp_to_key" rel="noreferrer">docs.python.org/3.6/library/functools.html#functools.cmp_to_key</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>key</code> keyword and <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key">functools.cmp_to_key</a> to transform your comparison function:</p>
<pre><code>sorted(x, key=functools.cmp_to_key(customsort))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of a customsort(), you need a function that translates each word into something that Python already knows how to sort.  For example, you could translate each word into a list of numbers where each number represents where each letter occurs in your alphabet.  Something like this:</p>
<pre><code>my_alphabet = ['a', 'b', 'c']

def custom_key(word):
   numbers = []
   for letter in word:
      numbers.append(my_alphabet.index(letter))
   return numbers

x=['cbaba', 'ababa', 'bbaa']
x.sort(key=custom_key)
</code></pre>
<p>Since your language includes multi-character letters, your custom_key function will obviously need to be more complicated.  That should give you the general idea though.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if this will help, but you may check out the <code>locale</code> module.  It looks like you can set the locale to your language and use <code>locale.strcoll</code> to compare strings using your language's sorting rules.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>key</code> argument instead. It takes a function that takes the value being processed and returns a single value giving the key to use to sort by.</p>
<pre><code>sorted(x, key=somekeyfunc)
</code></pre>
</div>
<span class="comment-copy">have you tried just <code>sorted(x)</code>?</span>
<span class="comment-copy">@SilentGhost, To make sure, I just tried again, Of course not working, because <i>my</i> original language is not in the locale list support by Operation Systems to do sorting.</span>
<span class="comment-copy">You can wrap your cmp as a key function. Search the HowToSorting site for cmp_to_key.</span>
<span class="comment-copy">here is something similar <a href="https://stackoverflow.com/questions/49327344/custom-compare-function-in-python3/49327441#49327441" title="custom compare function in python3">stackoverflow.com/questions/49327344/â€¦</a></span>
<span class="comment-copy">+1, looks like the recipe give me a workaround, but I think I am going to lose some performance by passing all the comparison operators <code>&lt; &gt; = </code> to middle man, since my original custom sort is written in C , it had around 1/2x speed of default sort.</span>
<span class="comment-copy">(Just looked at your profile) Your company is blocking access to Google and StackOverflow? How stupid can they get? But about your response: I'd be interested in the actual performance decrease. Can you <code>timeit</code> it?</span>
<span class="comment-copy">I've done some benchmarks, looks like around 4x slower than passing custom C compare function directly.</span>
<span class="comment-copy">What if I need both a key function AND a cmp function? I want to sort a list of dictionaries by a custom key in each dictionary. <code>sorted_rows = sorted(rows, key=itemgetter('name'), cmp=locale.strxfrm)</code> gives TypeError: 'cmp' is an invalid keyword argument for this function, in Python 3.2 :(</span>
<span class="comment-copy">functools has a cmp_to_key function in the standard library: <a href="https://docs.python.org/3.6/library/functools.html" rel="nofollow noreferrer">docs.python.org/3.6/library/functools.html</a></span>
<span class="comment-copy">Should say... key=functools.cmp_to_key(...) ...</span>
<span class="comment-copy">@yuzisee oops, thanks</span>
<span class="comment-copy">Thanks +1, thats ICU way I think. but since <i>my</i> language don't have word seperators and don't have standard romanize rules, it will take time to research I think.</span>
<span class="comment-copy">Thats true for popular languages but <i>my</i> language is not fully supported by Operation Systems, ICU, and unicode.org, so thats out of question, but +1 for good suggestion.</span>
<span class="comment-copy">key only accept one parameter function, cmp have 2 parameters, they are different behavior. and I just tested, got error, because of key keyword only pass one parameter, <code>TypeError: customsort() takes exactly 2 positional arguments (1 given)</code></span>
<span class="comment-copy">That is correct.</span>
<span class="comment-copy">Thanks for taking time to answer btw.</span>
