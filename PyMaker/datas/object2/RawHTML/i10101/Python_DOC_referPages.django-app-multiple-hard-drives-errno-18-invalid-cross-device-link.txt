<div class="post-text" itemprop="text">
<p>I have a Django app on a Debian server and my current site_media directory on the current disk is full. So I want to upload files On a second disk. The path on server is /disk :</p>
<pre><code>        obj = form.save(commit=False)
        obj.user_id = self.request.user.pk
        obj.save()
        initial_path = obj.file.path
        print(initial_path)
        new = settings.MEDIA_ROOT_NEW + obj.file.name
        print(new)
        os.rename(initial_path,new)
        shutil.move(initial_path, new)
</code></pre>
<p>and in my settings.py I have:</p>
<pre><code>        MEDIA_ROOT = os.path.join(PROJECT_PATH, 'site_media/')
        MEDIA_ROOT_NEW = '/disk/site_media/'
</code></pre>
<p>still I get error:
django [Errno 18] Invalid cross-device link</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.rename()</code> may fail <a href="https://docs.python.org/3/library/os.html#os.rename" rel="nofollow noreferrer">across</a> different file systems.</p>
<blockquote>
<p>The operation may fail on some Unix flavors if src and dst are on different filesystems.</p>
</blockquote>
<p><code>shutil.move()</code> <a href="https://docs.python.org/3.4/library/shutil.html#shutil.move" rel="nofollow noreferrer">should</a> work</p>
<blockquote>
<p>If the destination is on the current filesystem, then os.rename() is used. Otherwise, src is copied (using shutil.copy2()) to dst and then removed.</p>
</blockquote>
<p>but you've got a <code>os.rename(initial_path,new)</code> just before your <code>shutil.move(initial_path, new)</code>. Remove the first <code>os.rename()</code> and it should work.</p>
</div>
<span class="comment-copy">Having looked back at this, it would make more sense to simply migrate to the new location rather than have your app save data in the original location, then copy it across. Can you not change <code>MEDIA_ROOT</code> to be <code>/disk/site_media/</code>?</span>
<span class="comment-copy">well you see, we have two disks. First (MEDIA_ROOT) is full. We have to leave it that way. I have to manage to upload the files at the second disk at the MEDIA_ROOT_NEW path and read from that disk as well. Any ideas??</span>
<span class="comment-copy">I think coming up with an appropriate solution would require more than a conversation on SO comments. Without knowing the exact reason as to why you have to keep <code>MEDIA_ROOT</code> as is, I would still recommend "getting a bigger disk, migrating current data from <code>MEDIA_ROOT</code>, and then pointing your app at the new disk." Simpler is better - I can't think of a reason to justify having to reconcile reads and writes to both disks.</span>
<span class="comment-copy">I'm with you! but we are talking about the company where I work. That's why I am trying so much to find a solution.</span>
<span class="comment-copy">First, thank you!</span>
<span class="comment-copy">Soory hit enter there! I did what you said and it worked perfectly. The thing now is that it doesn't read from the /disk/site_media path. I get an error that it didn't find the file</span>
<span class="comment-copy">Without knowing the exact file paths and being able to check the files on the system, it's a little hard to help with that diagnosis other than saying "Are you sure the file exists?". Are you sure that the files it logs out in the print lines exists?</span>
