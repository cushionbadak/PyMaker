<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict
from goody import type_as_str

class Bag:
    def __init__(self, i=None):
        self.bag = []
        if i == None:
            pass  # i is None, do nothing after create empty bag
        elif type(i)==list:
            self.bag.extend(i) # append whole list i into bag with extend method
        else:
            self.bag.append(i) # append single item i into bag 

    def __repr__(self):
        for s in self.bag :
            return s

    def __str__(self):
        for s in self.bag :
            return s

    def __len__ (self):
        if 'Bag()' in self.bag:
            return 0
        else:
            return len(self.bag)
    def unique(self):
        l = []
        if len(self.bag) == 0:
            return 0
        else:
            for x in self.bag:
                if x not in l:
                    l.append(x)
                else:
                    continue
            return len(l)

    def __contains__ (self,i):
        if i in self.bag:
            return True
        else:
            return False

    def count(self,i):
        return self.bag.count(i)

    def add(self,i):
        self.bag.append(i)

    def __add__(self,i):
        for x in i:
           self.bag.append(x)

    def remove(self,i):
        if i not in self.bag:
            raise ValueError
        for x in self.bag:
            if x == i:
                self.bag.remove(x)
                break


    def __eq__ (self,i):
        return self.bag == i 

    def __ne__ (self,i):
        return self.bag != i

    def __iter__(self):
        class PH_iter:
            def __init__(self,i):

                self.l = i

            def add(self,i):
                self.l.append(i)

            def remove(self,i):
                self.l.pop(i)

        return PH_iter(self.l)




if __name__ == '__main__':
#driver tests
import driver
driver.default_file_name = 'bsc1.txt'
#     driver.default_show_exception= True
#     driver.default_show_exception_message= True
#     driver.default_show_traceback= True
driver.driver()
</code></pre>
<p>Bag function generally returns a list. Writing Bag() constructs an empty bag. Writing Bag(['d','a','b','d','c','b','d']) construct a bag with one 'a', two 'b's, one 'c', and three 'd's.</p>
<p>The <strong>iter</strong> method is supposed to be defined in the bag class to add or remove item from the list.  </p>
<p>The input is:</p>
<pre><code># Test iterator
e--&gt;[i for i in sorted(b)]--&gt;['a', 'b', 'b', 'c', 'd', 'd', 'd']
c--&gt;i = iter(b)
c--&gt;b.add('d')
c--&gt;b.remove('a')
e--&gt;[i for i in sorted(b)]--&gt;['b', 'b', 'c', 'd', 'd', 'd', 'd']
e--&gt;[i for i in sorted(x for x in i)]--&gt;['a', 'b', 'b', 'c', 'd', 'd', 'd']
</code></pre>
<p>The error i got is:</p>
<pre><code> 94 # Test iterator
 95 *Error: [i for i in sorted(b)] raised exception AttributeError: 'Bag' object has no attribute 'l'
 96 *Error: i = iter(b) raised exception AttributeError: 'Bag' object has no attribute 'l'
 99 *Error: [i for i in sorted(b)] raised exception AttributeError: 'Bag' object has no attribute 'l'
 100 *Error: [i for i in sorted(x for x in i)] raised exception NameError: name 'i' is not defined
</code></pre>
<p>Can anyone help me to fix the <strong>iter</strong> function to make it work? Many thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>In      <code>__iter__</code>, this line is causing the runtime error</p>
<pre><code>return PH_iter(self.l)
</code></pre>
<p>It should be  </p>
<pre><code>return PH_iter(self.bag)
</code></pre>
<p>And this implementation is going to give you some surprise after iteration because it actually modified the data content of <code>self.bag</code></p>
<p>You can improve it by </p>
<pre><code>def __iter__(self):
    class PH_iter:
        def __init__(self,i):
            self.l = list(i)  # make a copy of the list i
</code></pre>
</div>
<span class="comment-copy">"The iter method is supposed to be defined in the bag class to add or remove item from the list." - that is not at all what <code>__iter__</code> methods are designed for. Are you sure you understand your assignment?</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>object.__iter__</code> specification on python.org</a></span>
<span class="comment-copy">Are you using Python 2.x? If so: <code>class Bag(object):</code></span>
<span class="comment-copy">I changed it and I get the following Error:</span>
<span class="comment-copy">*Error: [i for i in sorted(b)] raised exception TypeError: iter() returned non-iterator of type 'PH_iter'    96 *Error: i = iter(b) raised exception TypeError: iter() returned non-iterator of type 'PH_iter'    99 *Error: [i for i in sorted(b)] raised exception TypeError: iter() returned non-iterator of type 'PH_iter'   100 *Error: [i for i in sorted(x for x in i)] raised exception NameError: name 'i' is not defined</span>
<span class="comment-copy">Do you know what is "iter() returned non-iterator of type 'PH_iter'' supposed to mean?</span>
<span class="comment-copy">Python expects an iterator coming from <code>__iter__</code> method. An iterator is a class that support either <code>next</code> (p2) or <code>__next__</code> (p3). This SO entry should answer your question: <a href="http://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols" title="what exactly are pythons iterator iterable and iteration protocols">stackoverflow.com/questions/9884132/â€¦</a></span>
