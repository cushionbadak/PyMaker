<div class="post-text" itemprop="text">
<p>I have a list of lists that I am trying to write to columns instead of rows.  My list looks like this:</p>
<pre><code>['31 32 31 8', '31 31 32 8', '31 31 31 8', '31 32 31 31']
</code></pre>
<p>I want it to llok like this:</p>
<pre><code>31 31 31 31
32 31 31 32
31 32 31 31
8 8 8 31
</code></pre>
<p>I can get a nice print in rows like this:</p>
<pre><code>with open("text.csv", 'w') as f:
    for x in zip(contents):
        f.write('\t'.join(x)+'\n')
</code></pre>
<p>What I would like to do is get this data in columns</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> for this. Firstly convert your <em>list of string</em> to <em>list of list</em> using <code>str.split()</code>, then iterate over <em>zip</em>ed list. Below is the sample code: </p>
<pre><code>&gt;&gt;&gt; my_list = ['31 32 31 8', '31 31 32 8', '31 31 31 8', '31 32 31 31']
&gt;&gt;&gt; my_list_list = [s.split() for s in my_list]
&gt;&gt;&gt; for item in zip(*my_list_list):
...     print item
...
('31', '31', '31', '31')
('32', '31', '31', '32')
('31', '32', '31', '31')
('8', '8', '8', '31')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, <code>numpy</code> is really good for this kind of stuff. 
<br/>If you have 
<br/><code>test = numpy.array([[31,32,31,8], [31,31,32,8], [31,31,31,8], [31,32,31,31]]</code>
<br/>then you can access the first column by saying
<code>test[:,0]</code> which returns <code>array([31, 31, 31, 31])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow"><code>csv</code></a> module to output the data once you've massaged it into shape with <code>zip()</code>:</p>
<pre><code>import csv

# data is a list of lists    
data = [s.split() for s in ['31 32 31 8', '31 31 32 8', '31 31 31 8', '31 32 31 31']]

with open('text.csv', 'w') as f:    
    writer = csv.writer(f, delimiter='\t')
    writer.writerows(zip(*data))
</code></pre>
<p>This results in a CSV file which uses tab as the delimiter that looks like this:</p>
<pre>
31  31  31  31
32  31  31  32
31  32  31  31
8   8   8   31
</pre>
</div>
<span class="comment-copy">What you have there is a list of strings, not a list of lists.</span>
<span class="comment-copy">A useful thing: if you have a list of columns and want a list of rows, you can swap it by doing <code>zip(*old_list)</code>. e.g. <code>zip(*[(1,3,5,7), (2,4,6,8)]) -&gt; [(1,2), (3,4), (5,6), (7,8)]</code></span>
<span class="comment-copy">perfect!  Even better without imports</span>
