<div class="post-text" itemprop="text">
<p>How do you handle module specific exceptions in Python?</p>
<p>For example, if I wanted to catch an error thrown from the sqlite3 module in python, what would I place in the {} to handle that exception?</p>
<pre><code>import sqlite3

try:
    ...
except {}:
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Checking through the documentation on the sqlite3 module, the following should work</p>
<pre><code>try:
    #code that throws sqlite3.Error exception
catch sqlite3.Error:
    #code to handle error
</code></pre>
<p>That is just one of several errors that this specific module can throw, and each of the errors can be handled by replacing the above <code>sqlite3.Error</code> part with the needed exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>Proper module docs list the module specific exceptions that the module might raise, so module users can understand and possibly catch them.  The <a href="https://docs.python.org/3/library/sqlite3.html#exceptions" rel="nofollow">sqlite3 docs</a> contain this.</p>
<pre><code>12.6.5. Exceptions

exception sqlite3.Warning
    A subclass of Exception.

exception sqlite3.Error
    The base class of the other exceptions in this module.
    It is a subclass of Exception.

exception sqlite3.DatabaseError
    Exception raised for errors that are related to the database.

exception sqlite3.IntegrityError
    Exception raised when the relational integrity of the database
    is affected, e.g. a foreign key check fails. It is a subclass
    of DatabaseError.

exception sqlite3.ProgrammingError
    Exception raised for programming errors, e.g. table not found
    or already exists, syntax error in the SQL statement, wrong
    number of parameters specified, etc. It is a subclass of
    DatabaseError.
</code></pre>
<p>You can catch any of these.  The socket module doc, for instance, has a similar section.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is already here, <a href="https://stackoverflow.com/questions/16201094/how-to-reference-an-exception-class-in-python">How to reference an exception class in Python?</a>, though you wouldn't know it by the title.</p>
<p>I read the question (in the current form) as a bog-simple imported class syntax question. The <a href="https://docs.python.org/3/library/sqlite3.html#exceptions" rel="nofollow noreferrer">SQLLite docs page on exceptions</a> gives an example, but doesn't describe how to implement the SQLLite exceptions explicitly. And it shouldn't. I believe an example should be given on the <a href="https://docs.python.org/3.7/tutorial/errors.html" rel="nofollow noreferrer">Python.org exceptions</a> page, but you won't find even an example there--just this:</p>
<blockquote>
<p><em>"Many standard modules define their own exceptions to report errors
  that may occur in functions they define. More information on classes
  is presented in chapter <a href="https://docs.python.org/3.7/tutorial/classes.html#tut-classes" rel="nofollow noreferrer">Classes</a>."</em></p>
</blockquote>
<p>You follow the link and now you're on page one, paragraph one of <em>Python Classes</em>. *Smack* If you're a novice, you start reading and if you haven't returned to google, then you get to this,</p>
<blockquote>
<p><strong><em>By the way</em></strong> [my emphasis], I use the word attribute for any name following a dot —
  for example, in the expression z.real, real is an attribute of the
  object z. Strictly speaking, references to names in modules are
  attribute references: in the expression modname.funcname, modname is a
  module object and funcname is an attribute of it. In this case there
  happens to be a straightforward mapping between the module’s
  attributes and the global names defined in the module: they share the
  same namespace!</p></blockquote></div>
<span class="comment-copy">You cannot handle it on the level you suggest. Consider reading <a href="https://docs.python.org/2.7/tutorial/errors.html" rel="nofollow noreferrer">Errors and Exceptions</a> part of python docs at least</span>
<span class="comment-copy">@agg3l So you are saying that any error from an action performed by the sqlite3 module cannot be handled?</span>
<span class="comment-copy">No. I meant that it needs (must be) fine-grained control. On the top level you want to handle it, your only option is to catch all base sqlite3 exceptions (if specific base classs exist) or all exceptions, both related and not related to sqlite3. With sequence show in your code, you are catching everything, starting from 'insert error'  to OS access denied..</span>
<span class="comment-copy">@agg3l I have made the question clearer as to what I am looking for.  I understand that as I wrote it I was catching all errors thrown by the code in the try block before the edit.</span>
<span class="comment-copy">It's will simply render syntax error in current form.. Go into reviewing sqlite3 module, looking for base exception class there. This is your only remedy</span>
