<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30825535/split-a-list-into-chunks-determined-by-a-separator">Split a list into chunks determined by a separator</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have to write a function that takes a list(or string) and and object and returns the copy of the list up to but not including the first occurrence of that object, or all the elements if that object is not in the list. </p>
<p>I know I have to use a loop here but what I'm confused at is lists and strings use different methods for finding the index of that object. How can I use that with the loops to get my function up to the first occurrence of that object. </p>
<pre><code>def up_to_first(item, element):
    if type(item) == list:
        index_of_element = item.index(element)
        res = [ ]
        for i in range(0, index_of_element):
            sliced_list = item[0 : index_of_element]

    return sliced_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following function:    </p>
<pre><code>def up_to_first(seq, obj):
    if obj not in seq:
        return seq
    return seq[:seq.index(obj)]
</code></pre>
<p>This will return the <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow">sequence</a> <code>seq</code> if <code>obj</code> is not in that sequence, and will return the sequence up to, but not including <code>obj</code> otherwise. However, this function as it is will break if you are not careful about types. For example, it will work if you are looking for <code>5</code> in <code>[1, 2, 3, 4, 5]</code> (and return <code>[1, 2, 3, 4]</code>), but will raise an error if you look for <code>5</code> in a string.</p>
<pre><code>&gt;&gt;&gt; up_to_first([1, 2, 3], 3)
[1, 2]
&gt;&gt;&gt; up_to_first('abcdef', 'd')
'abc'
&gt;&gt;&gt; up_to_first([1, 2, 3], 'a')
[1, 2, 3]
&gt;&gt;&gt; up_to_first('abcdef', 1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/.../.../test.py", line 2, in up_to_first
    if obj not in seq:
TypeError: 'in &lt;string&gt;' requires string as left operand, not int
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow">itertools</a> already has a feature for this:</p>
<pre><code>def seq_upto(seq, obj):
    return itertools.takewhile(lambda el: el is not obj, iter(seq))
</code></pre>
<p>I'm unclear if you want to match on the <em>identity</em> of an object or its equality (as in the <code>__eq__</code> operator), but in the above lambda I'm using identity.</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; def seq_upto(seq, obj):
...     return itertools.takewhile(lambda el: el is not obj, iter(seq))
...
&gt;&gt;&gt; class foo(object):
...     pass
...
&gt;&gt;&gt; y=seq_upto([0,1,2,3,4,foo,4,3,2], foo)
&gt;&gt;&gt; list(y)
[0, 1, 2, 3, 4]
&gt;&gt;&gt; y=seq_upto(range(5), foo)
&gt;&gt;&gt; list(y)
[0, 1, 2, 3, 4]
</code></pre>
</div>
<span class="comment-copy">Please show your code attempt and we can further guide you in the right direction.</span>
<span class="comment-copy">In addition to showing the code that you have tried so far, could you also give example input and expected output? What kind of <code>object</code> are you referring to? A string, or could it be anything?</span>
<span class="comment-copy">how can i add code</span>
<span class="comment-copy">You paste it in, then you can highlight all of it and use the <code>{}</code> button or CTRL-K to format it</span>
<span class="comment-copy">Also, lists and strings <i>do not</i> use different methods for finding the index of an object: they both use <code>index()</code></span>
<span class="comment-copy">it works fine for strings also</span>
<span class="comment-copy">@SyedNaqi, yes, but it will not work if <code>seq</code> is a string and <code>obj</code> is not. With a little work this case could be handled as well though. Glad it worked for you!</span>
