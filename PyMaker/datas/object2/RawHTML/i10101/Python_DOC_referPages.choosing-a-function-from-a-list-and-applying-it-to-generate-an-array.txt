<div class="post-text" itemprop="text">
<p>OK, I didn't know how to explain it in the title, but here is what I am trying to do (Python):</p>
<p>I have a list of initialized functions, say <code>[foo, bar]</code>, and for every input, I have an associated index of which function to use. Now given an array of inputs <code>X</code>, index array <code>I</code>, I need to generate output array <code>y</code> assuming the conditions above.</p>
<p>My solution:</p>
<pre><code>## These are just example methods, in reality there are complex functions
def foo(x):
    return x
def bar(x):
    return x - 1

f = [foo, bar]
X = [1, 2, 3, 1, 2, 5, 3, 6, 8, 2, 1, 4, 5, 7, 8, 1]
I = [0, 1, 0, 1, 1, 1, 1, 0, 0, 1 ,0, 0, 0, 0, 0, 1]

solution_functions = numpy.take(f, I)
solution_result = [solution_functions[idx](X[idx]) for idx in I]
</code></pre>
<p>My question is there a more efficient way of doing that -- the problem is that if <code>X</code> has thousands of elements, and functions in <code>f</code> are really complex, I will have create too many objects</p>
</div>
<div class="post-text" itemprop="text">
<p>You can certainly simplify the logic by changing to the following:</p>
<pre><code>&gt;&gt;&gt; [f[i](x) for x, i in zip(X, I)]
[1, 1, 3, 0, 1, 4, 2, 6, 8, 1, 1, 4, 5, 7, 8, 0]
</code></pre>
<p>Note that if the length of <code>X</code> and <code>I</code> are different, it will truncate to the shortest length.</p>
<p>The <code>zip</code> function returns an iterator, which will likely make this more memory-efficient. If you expect the same expensive function to be run on the same values multiple times, you can also implement caching, for instance by decorating the functions with <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow"><code>functools.lru_cache</code></a>.</p>
<p>If you plan to loop through these values and don't need them all at the same time, you can make this a generator expression by placing it in parentheses instead of brackets: this will only calculate each value as you need it.</p>
</div>
