<div class="post-text" itemprop="text">
<p>In python 2.7 I could limit the <code>__builtins__</code> namespace used by eval by defining global as <code>{'__builtins__': None}</code>. This does not seem to work in Python 3.5.</p>
<p>Python 2.7 correctly gives the NameError:</p>
<pre><code>In [1]: eval('round', {'__builtins__': None})
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&lt;ipython-input-14-dc1cae9c6b26&gt; in &lt;module&gt;()
----&gt; 1 eval('round', {'__builtins__': None})

&lt;string&gt; in &lt;module&gt;()

NameError: name 'round' is not defined
</code></pre>
<p>Python 3.5 gives the following:</p>
<pre><code>In [1]: eval('round', {'__builtins__': None})
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-9-83a8846287f1&gt; in &lt;module&gt;()
----&gt; 1 eval('round', {'__builtins__': None})

&lt;string&gt; in &lt;module&gt;()

TypeError: 'NoneType' object is not subscriptable
</code></pre>
<p>Both give the correct output for the following:</p>
<pre><code>In [1]: eval('round')
Out[1]: &lt;function round&gt;
</code></pre>
<p>How do I properly limit <code>__builtins__</code> or work around this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can set it to an empty dictionary:</p>
<pre><code>eval('round', {'__builtins__': {}})
</code></pre>
<p>This will reproduce the <code>NameError</code> you got in Python 2.x.  However, sandboxing Python, whether 2 or 3, is an <a href="https://softwareengineering.stackexchange.com/a/191628/153279">inherently hard problem</a>.  If possible, you should use something less powerful like <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a> instead of <code>eval()</code>.</p>
</div>
<span class="comment-copy">Excellent, thanks. Is there another method to evaluate math operations, e.g. '1+1'? AFIK, <code>ast.literal_eval</code> doesn't permit this.</span>
<span class="comment-copy">The other components in <code>ast</code> are powerful enough to build a parser for whatever subset of the language you want... but it may be a significant amount of work, and you need to be very careful about allowing attribute access (i.e. the <code>foo.bar</code> dotted syntax).</span>
