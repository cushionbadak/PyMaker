<div class="post-text" itemprop="text">
<p>What's the simplest way to count the number of occurrences of a character in a string?</p>
<p>e.g. count the number of times <code>'a'</code> appears in <code>'Mary had a little lamb'</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><a href="https://docs.python.org/2/library/stdtypes.html#str.count" rel="noreferrer">str.count(sub[, start[, end]])</a></p>
<p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; sentence = 'Mary had a little lamb'
&gt;&gt;&gt; sentence.count('a')
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/string.html#string.count" rel="noreferrer">count()</a> :</p>
<pre><code>&gt;&gt;&gt; 'Mary had a little lamb'.count('a')
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As other answers said, using the string method count() is probably the simplest, but if you're doing this frequently, check out <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a>:</p>
<pre><code>from collections import Counter
my_str = "Mary had a little lamb"
counter = Counter(my_str)
print counter['a']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions maybe?</p>
<pre><code>import re
my_string = "Mary had a little lamb"
len(re.findall("a", my_string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>myString.count('a');
</code></pre>
<p>more info <a href="http://docs.python.org/library/stdtypes.html" rel="noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>"aabc".count("a")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str.count(a)</code> is the best solution to count a single character in a string. But if you need to count more characters you would have to read the whole string as many times as characters you want to count.</p>
<p>A better approach for this job would be:</p>
<pre><code>from collections import defaultdict

text = 'Mary had a little lamb'
chars = defaultdict(int)

for char in text:
    chars[char] += 1
</code></pre>
<p>So you'll have a dict that returns the number of occurrences of every letter in the string and <code>0</code> if it isn't present.</p>
<pre><code>&gt;&gt;&gt;chars['a']
4
&gt;&gt;&gt;chars['x']
0
</code></pre>
<hr/>
<p>For a case insensitive counter you could override the mutator and accessor methods by subclassing <code>defaultdict</code> (base class' ones are read-only):</p>
<pre><code>class CICounter(defaultdict):
    def __getitem__(self, k):
        return super().__getitem__(k.lower())

    def __setitem__(self, k, v):
        super().__setitem__(k.lower(), v)


chars = CICounter(int)

for char in text:
    chars[char] += 1

&gt;&gt;&gt;chars['a']
4
&gt;&gt;&gt;chars['M']
2
&gt;&gt;&gt;chars['x']
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are very useful if you want case-insensitivity (and of course all the power of regex).</p>
<pre><code>my_string = "Mary had a little lamb"
# simplest solution, using count, is case-sensitive
my_string.count("m")   # yields 1
import re
# case-sensitive with regex
len(re.findall("m", my_string))
# three ways to get case insensitivity - all yield 2
len(re.findall("(?i)m", my_string))
len(re.findall("m|M", my_string))
len(re.findall(re.compile("m",re.IGNORECASE), my_string))
</code></pre>
<p>Be aware that the regex version takes on the order of ten times as long to run, which will likely be an issue only if my_string is tremendously long, or the code is inside a deep loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>This easy and straight forward function might help:</p>
<pre><code>def check_freq(str):
    freq = {}
    for c in str:
       freq[c] = str.count(c)
    return freq

check_freq("abbabcbdbabdbdbabababcbcbab")
{'a': 7, 'b': 14, 'c': 3, 'd': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = 'have a nice day'
symbol = 'abcdefghijklmnopqrstuvwxyz'
for key in symbol:
    print key, a.count(key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>str = "count a character occurance"

List = list(str)
print (List)
Uniq = set(List)
print (Uniq)

for key in Uniq:
    print (key, str.count(key))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><code>count</code></strong> is definitely the most concise and efficient way of counting the occurrence of a character in a string but I tried to come up with a solution using <strong><code>lambda</code></strong>, something like this :</p>
<pre><code>sentence = 'Mary had a little lamb'
sum(map(lambda x : 1 if 'a' in x else 0, sentence))
</code></pre>
<p>This will result in :</p>
<pre><code>4
</code></pre>
<p>Also, there is one more advantage to this is if the sentence is a list of sub-strings containing same characters as above, then also this gives the correct result because of the use of <code>in</code>. Have a look :</p>
<pre><code>sentence = ['M', 'ar', 'y', 'had', 'a', 'little', 'l', 'am', 'b']
sum(map(lambda x : 1 if 'a' in x else 0, sentence))
</code></pre>
<p>This also results in :</p>
<pre><code>4
</code></pre>
<p>But Of-course this will work only when checking occurrence of single character such as <code>'a'</code> in this particular case.</p>
</div>
<div class="post-text" itemprop="text">
<p>"Without using count to find you want character in string" method.</p>
<pre><code>import re

def count(s, ch):

   pass

def main():

   s = raw_input ("Enter strings what you like, for example, 'welcome': ")  

   ch = raw_input ("Enter you want count characters, but best result to find one character: " )

   print ( len (re.findall ( ch, s ) ) )

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>spam = 'have a nice day'
var = 'd'


def count(spam, var):
    found = 0
    for key in spam:
        if key == var:
            found += 1
    return found
count(spam, var)
print 'count %s is: %s ' %(var, count(spam, var))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No more than this IMHO - you can add the upper or lower methods</p>
<pre><code>def count_letter_in_str(string,letter):
    return string.count(letter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Count: </p>
<pre><code>string = "count the number of counts in string to count from."
x = string.count("count")
</code></pre>
<p>x = 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative way to get all the character counts without using <code>Counter()</code>, <code>count</code> and regex</p>
<pre><code>counts_dict = {}
for c in list(sentence):
  if c not in counts_dict:
    counts_dict[c] = 0
  counts_dict[c] += 1

for key, value in counts_dict.items():
    print(key, value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will give you the occurrence of each characters in a string. O/P is also in string format:</p>
<pre><code>def count_char(string1):
string2=""
lst=[]
lst1=[]
for i in string1:
    count=0
    if i not in lst:
        for j in string1:
            if i==j:
                count+=1
        lst1.append(i)
        lst1.append(count)
    lst.append(i)

string2=''.join(str(x) for x in lst1)
return string2 

print count_char("aabbacddaabbdsrchhdsdg")
</code></pre>
</div>
<span class="comment-copy">string.count! That is super convenient</span>
<span class="comment-copy">Why is this better when used frequently? What is the advantage?</span>
<span class="comment-copy">If you want the counts for a lot of the letters in a given string, Counter provides them all in a more succinct form. If you want the count for one letter from a lot of different strings, Counter provides no benefit.</span>
<span class="comment-copy">@BrendenBrown Is there a noticable performance difference?</span>
<span class="comment-copy">For this particular instance, counting characters, I would prefer collections.counter. For finding instances of a specific substring, I would use a regular expression or the str.count() method.  I haven't tested, but there may be a performance difference due to a slight overhead in counting all characters and appending to a dictionary rather than counting occurrences of a single substring.  I would suggest writing a script to generate a very long file to search and then timing execution of each method.</span>
<span class="comment-copy">The advantage when used frequently is that Counter calculates all the counts ONE TIME, which is almost as fast as doing mystring.count('a') one time.  Thus, if you do this 20 times, you are saving maybe 10 times the computation time.   Counter also can tell you if an item is in the string:   for example, if 'a' in counter:</span>
<span class="comment-copy">A fine idea, but overkill in this case.  The string method 'count' does the same thing with the added bonus of being immediately obvious about what it is doing.</span>
<span class="comment-copy">why negative rate, maybe someone needs this kind of code for something similar. my vote up</span>
<span class="comment-copy">This should be downvoted because it is the least efficient way possible to count characters in a string. If the goal is simply to count characters, as the question indicates, it would be hard to find a worse way to do the job. In terms of memory and processor overhead, this solution is definitely to be avoided. No one will ever "need" to use this method to find the count of characters in a string.</span>
<span class="comment-copy">@kiltek Indeed, this little snippet has been useful to me with a regular expression a bit more complex</span>
<span class="comment-copy">good solution when string methods are not available: <code>len(re.findall('1',bin(10)))</code></span>
<span class="comment-copy">You're basically reimplementing <code>Counter</code>, which is already a class in <code>collections</code>.</span>
<span class="comment-copy">@merv Not really. <code>Counter</code> is a more bloated pure Python class and <code>defaultdict</code>'s <code>__missing__</code> is <a href="https://hg.python.org/cpython/file/7272ef213b7c/Modules/_collectionsmodule.c#l1484" rel="nofollow noreferrer">written in C</a>. For a simple task like this (<code>int</code> is also implemented in C) this approach is sligthly faster.</span>
<span class="comment-copy">Regex is overkill if you are just trying to fix case sensitivity. my_sting.lower().count('m') is more performant, more clear, and more succinct.</span>
<span class="comment-copy">You're shadowing <code>str</code>. If you give its name to the variable, <code>str</code> is not a built-in type anymore. Also you are counting fourteen b's fourteen times. You can avoid that simply by changing <code>for c in text</code> with <code>for c in set(text)</code>.</span>
<span class="comment-copy">Why the empty count function? Why the main() function? Why the ugly spaces everywhere? This is NOT a good answer.</span>
<span class="comment-copy">In the example above x is equal 3.</span>
