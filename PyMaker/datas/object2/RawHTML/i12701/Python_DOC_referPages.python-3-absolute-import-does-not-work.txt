<div class="post-text" itemprop="text">
<p>I have a folder with two files: test.py and csv.py .  In test.py I have</p>
<pre><code>import csv
</code></pre>
<p>This imports my csv.py file instead of importing the built-in csv module.</p>
<p>Why? I thought that absolute imports were default in Python 3?</p>
<p>How do I force Python to load the built-in csv module?</p>
<pre><code>from __future__ import absolute_import
</code></pre>
<p>does not help.  Neither does</p>
<pre><code>csv = __import__('csv', level=0)
</code></pre>
<p>which, according to the docs, should "only perform absolute imports".</p>
<p>Renaming csv.py is not an acceptable solution.  Also I'd rather not use the "from module import something" syntax (not that it helps in this case).</p>
<p>(Using Python 3.4.0 on Linux Mint 17.1)</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a top-level <code>csv</code> module, which lives on the <code>.</code> path, so it is found before the built-in module. This is how absolute imports <em>work</em>.</p>
<p>Move your modules into a package if you expected <code>csv</code> to be 'local'. Move your modules into a directory with your package name, and add a <code>__init__.py</code> file (it can be empty). Your <code>csv</code> module is then namespaced as <code>yourpackage.csv</code> and won't be considered as a top-level module.</p>
</div>
<span class="comment-copy"><code>absolute_import</code> is already enabled by default as of 3.0 - see the table at the bottom of <a href="https://docs.python.org/3.5/library/__future__.html" rel="nofollow noreferrer">the <code>__future__</code> docs</a>.</span>
<span class="comment-copy">I thought so too.  So any idea why it doesn't seem to be working for me?</span>
<span class="comment-copy">"How do I force Python to load the built-in csv module?"  Most preferably, don't shadow built-in names.</span>
<span class="comment-copy">That is not an acceptable solution for me.  I don't intend to keep track of the built-in module names in python.</span>
<span class="comment-copy">Also, aren't absolute imports supposed to solve this exact problem?</span>
<span class="comment-copy">I added an empty __init__.py file.  Importing .csv doesn't work.  Neither does importing foldername.csv, where foldername is the name of the folder containing these files.  Where does "yourpackage" come from?</span>
<span class="comment-copy">@uhuygiuhlk: did you create a new directory? A directory with an <code>__init__.py</code> file in it forms a package, but that top-level directory sits on your path, not the modules inside of the package. If you have a script to run this code keep that <i>outside</i> of your directory, and import from the package. This is how for example the <a href="https://docs.python.org/3/library/urllib.html" rel="nofollow noreferrer"><code>urllib</code> packages</a> are organised; you import <code>urllib.request</code> for example, not <code>request</code>.</span>
<span class="comment-copy">@uhuygiuhlk: the script part is important, the directory the script lives in is automatically added to your path, but you <i>do not</i> want the package directory to be added to your path, only the parent directory. So if you have <code>/home/username/python/foo</code> as your package, then you want <code>/home/username/python</code> to be on your path so you can import <code>foo</code> and <code>foo.csv</code>, etc. Put any scripts in <code>/home/username/python</code>.</span>
<span class="comment-copy">I see - thank you!</span>
