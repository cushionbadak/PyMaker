<div class="post-text" itemprop="text">
<p>I am using the <a href="http://pandas.pydata.org/pandas-docs/version/0.17.1/generated/pandas.DataFrame.dropna.html" rel="noreferrer">pandas.DataFrame.dropna</a> method to drop rows that contain NaN. This function returns a dataframe that excludes the dropped rows, as shown in the documentation.</p>
<p>How can I store a copy of the dropped rows as a separate dataframe? Is:</p>
<pre><code>mydataframe[pd.isnull(['list', 'of', 'columns'])]
</code></pre>
<p>always guaranteed to return the same rows that dropna drops, assuming that dropna is called with <code>subset=['list', 'of', 'columns']</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this by indexing the original DataFrame by using the <a href="https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="noreferrer">unary <code>~</code> (invert) operator</a> to give the inverse of the NA free DataFrame.</p>
<pre><code>na_free = df.dropna()
only_na = df[~df.index.isin(na_free.index)]
</code></pre>
<p>Another option would be to use the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.invert.html" rel="noreferrer">ufunc implementation of <code>~</code></a>.</p>
<pre><code>only_na = df[np.invert(df.index.isin(na_free.index))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was going to leave a comment, but figured I'd write an answer as it started getting fairly complicated.
Start with the following data frame:</p>
<pre><code>import pandas as pd
import numpy as np
df = pd.DataFrame([['a', 'b', np.nan], [np.nan, 'c', 'c'], ['c', 'd', 'a']],
              columns=['col1', 'col2', 'col3'])
df
  col1 col2 col3
0    a    b  NaN
1  NaN    c    c
2    c    d    a
</code></pre>
<p>And say we want to <em>keep</em> rows with Nans in the columns <code>col2</code> and <code>col3</code> One way to do this is the following: which is based on the answers from <a href="https://stackoverflow.com/q/13413590/3639023">this post</a></p>
<pre><code>df.loc[pd.isnull(df[['col2', 'col3']]).any(axis=1)]

  col1 col2 col3
0    a    b  NaN
</code></pre>
<p>So this gives us the rows that would be dropped if we dropped rows with Nans in the columns of interest. To keep the columns we can run the same code, but use a <code>~</code> to invert the selection</p>
<pre><code>df.loc[~pd.isnull(df[['col2', 'col3']]).any(axis=1)]

  col1 col2 col3
1  NaN    c    c
2    c    d    a
</code></pre>
<p>this is equivalent to:</p>
<pre><code>df.dropna(subset=['col2', 'col3'])
</code></pre>
<p>Which we can test:</p>
<pre><code>df.dropna(subset=['col2', 'col3']).equals(df.loc[~pd.isnull(df[['col2', 'col3']]).any(axis=1)])

True
</code></pre>
<p>You can of course test this on your own larger dataframes but should get the same answer.</p>
</div>
<span class="comment-copy">I really like this solution to the question. Note that the <code>-</code> has been deprecated in favor of <code>~</code> though.</span>
<span class="comment-copy">This is very close to what I want to achieve, but it doesn't quite work for me the way I'd like it to becauyse it pulls out the <code>na</code>/<code>nan</code> values, regardless of whether there are other values present in the row.  I want to extract only those rows where every value is <code>na</code>/<code>nan</code> - how can this be achieved?</span>
<span class="comment-copy">You can use <code>df.dropna(how='all')</code> to achieve this. see the panda docs for more info <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/â€¦</a></span>
