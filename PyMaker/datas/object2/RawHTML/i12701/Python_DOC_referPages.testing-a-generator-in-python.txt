<div class="post-text" itemprop="text">
<p>I programmed a very simple generator in Python 3.4:</p>
<pre><code>class Gen:
  def __init__(self, xml_lines, attribs):
    #...

  def _get_values(self, xml_line):
    # get only specific "attribs" from a line in a "xml"

  def values(self):
    for line in self.xml_lines:
      yield self._get_values(line)
</code></pre>
<p>The code works when I use a for loop to consume the generated values:</p>
<pre><code>reader = Gen(...):
for v in reader.values():
   print(v)
</code></pre>
<p>But I'm now trying to create a unit test, and for that, I'd need to get each value at a time (outside a loop). I'm trying something like this:</p>
<pre><code>import unittest
#...
reader = Gen(...):
v = reader.values()
self.assertIsNone(v)
</code></pre>
<p>When I try that, I always get a</p>
<pre><code>AssertionError: &lt;generator object next_values at 0x7fe2a5f9e3f0&gt; is not None
</code></pre>
<p>So, when I call the <strong>values</strong> myself, it return something (is it a pointer?) instead of the generated value.</p>
<p>As I'm considering I'm using a basic generator pattern, my question is a little broader then my own code: what's the proper way to test a Python Generator?</p>
</div>
<div class="post-text" itemprop="text">
<p>A generator is meant to be iterated through.  You can use the <a href="https://docs.python.org/2/library/functions.html#next" rel="nofollow">next()</a> function to get the next value of the generator.  Be aware that if your generator has exhausted it's values, it will raise a <a href="https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration" rel="nofollow"><code>StopIteration</code></a> exception.</p>
<pre><code>reader = Gen(...):
values = reader.values()
v = next(values)
self.assertIsNone(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I needed to unit-test a generator myself, so I created this helper function:</p>
<pre><code>def generator_tester(generator_iterator_to_test, expected_values):   
    range_index = 0
    for actual in generator_iterator_to_test:
        assert range_index + 1 &lt;= len(expected_values), 'Too many values returned from range'
        assert expected_values[range_index] == actual
        range_index += 1

    assert range_index == len(expected_values, 'Too few values returned from range'
</code></pre>
<p>Here's an example of using it:</p>
<pre><code>generator_tester(
    Gen(...),
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
)
</code></pre>
</div>
<span class="comment-copy">If you want your class's instances to be iterable you should be implementing <code>__iter__</code> and <code>__next__</code>, see e.g. <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#typeiter</a>. Aside from that, you have the issue that <code>next_value()</code> is creating a brand new generator, not giving you the next value from an existing one (the name is therefore a little misleading).</span>
<span class="comment-copy">@jonrsharpe Got it! I'm changing the method name to reflect your important observation... I was getting the method call wrong. Thanks. But I don't really thing I need the <code>__iter__</code> and <code>__next__</code> methods in this case, as the <code>yield</code> gives me all at once.</span>
<span class="comment-copy">You don't need <code>__next__</code> necessarily, but if you rename he method to <code>__iter__</code> you can then iterate directly over the instance rather than explicitly calling a method to do so.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/37956435/write-unittest-for-function-with-yield">Write unittest for function with yield</a></span>
<span class="comment-copy">Although this will work, I suspect that the OP is hoping for an implementation such that <code>next(reader)</code> would generate <code>None</code>.</span>
<span class="comment-copy">Oh man! I thought I've tried that. Thanks anyway @Brendan. What is strange to me is that I couldn't find any information on the "&lt;generator object...&gt;"... not even a "dir(v)" was helpful! Can you share your source?</span>
<span class="comment-copy">@Nigini [Here[(<a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/2/reference/datamodel.html</a>) -- I can't link directly to the point in the page, but search the page for "generator functions".  They always return an iterator object.  You can call <code>.next()</code> on that object to get the next value (or use the built-in <code>next()</code> function on it).  Possibly one of the things that could be better documented in the python docs.</span>
