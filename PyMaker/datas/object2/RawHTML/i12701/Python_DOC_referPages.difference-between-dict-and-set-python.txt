<div class="post-text" itemprop="text">
<p>So, I know that this,</p>
<pre><code>a = {}  # dict
</code></pre>
<p>Constructs an empty dictionary. Now, I also picked up that this,</p>
<pre><code>b = {1, 2, 3}  # set
</code></pre>
<p>Creates a set. This can easily be verified, as,</p>
<pre><code>&gt;&gt;&gt;print(type(a))
&lt;class 'dict'&gt;

&gt;&gt;&gt;print(type(b))
&lt;class 'set'&gt;
</code></pre>
<p>While I understand what it does, I fail to see <em>why</em> we use the same syntax for both sets and dictionaries. I tried to find some more information about the logic behind this in the <a href="https://docs.python.org/2/library/stdtypes.html#set" rel="noreferrer"><code>set</code></a> and <a href="https://docs.python.org/2/library/stdtypes.html#dict" rel="noreferrer"><code>dict</code></a> sections of the manual, but sadly, I got nothing out of it.</p>
<p>Could anyone explain to me why we do this in this way? Is it for historical reasons, or am I missing something blatantly obvious?</p>
</div>
<div class="post-text" itemprop="text">
<p>There was no <em>set literals</em> in Python 2, historically curly braces only used for dictionaries. Sets could be produced from lists (or any iterables):</p>
<pre><code>set([1, 2, 3])
set([i for i in range(1, 3)])
</code></pre>
<p>Python 3 introduced set literals and comprehensions (see <a href="https://www.python.org/dev/peps/pep-3100/#core-language" rel="noreferrer">PEP-3100</a>) which allows to avoid intermediate lists:</p>
<pre><code>{1, 2, 3}
{i for i in range(1, 3)}
</code></pre>
<p>Empty set form, however reserved for dictionaries as backward compatibility. Check references from PEP-3100, i.e. here: <a href="https://mail.python.org/pipermail/python-3000/2006-April/001286.html" rel="noreferrer">[Python-3000] sets in P3K?</a></p>
<blockquote>
<p>I'm sure we can work something out --- I agree, <code>{}</code> for empty set and <code>{:}</code>
  for empty dict would be ideal, were it not for backward compatibility.  I
  liked the "special empty object" idea when I first wrote the PEP (i.e.,
  have <code>{}</code> be something that could turn into either a set or dict), but one
  of the instructors here convinced me that it would just lead to confusion
  in newcomers' minds (as well as being a pain to implement).</p>
</blockquote>
<p>The <a href="https://mail.python.org/pipermail/python-3000/2006-May/001666.html" rel="noreferrer">following message</a> describes these rules better:</p>
<blockquote>
<p>I think Guido had the best solution.  Use <code>set()</code> for empty sets, use <code>{}</code> 
  for empty dicts, use <code>{genexp}</code> for set comprehensions/displays, use 
  <code>{1,2,3}</code> for explicit set literals, and use <code>{k1:v1, k2:v2}</code> for dict 
  literals.  We can always add <code>{</code>/<code>}</code> later if demand exceeds distaste.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The syntax is <strong>not</strong> the same. Dictionaries used curly braces the first and you specify <em>key-value</em> pairs, where the key and value are separated by a colon:</p>
<pre><code>&gt;&gt;&gt; {'foo': 'bar'}
{'foo': 'bar'}
&gt;&gt;&gt; type(_)
&lt;type 'dict'&gt;
</code></pre>
<p>Sets were added to the language later on, and the <code>{..}</code> curly brace notation only names <em>elements</em>, not pairs:</p>
<pre><code>&gt;&gt;&gt; {'foo'}
set(['foo'])
&gt;&gt;&gt; type(_)
&lt;type 'set'&gt;
</code></pre>
<p>Note that in Python 2, the interpreter echoes the object using the <code>set()</code> callable. That's also how you specify an <em>empty</em> set:</p>
<pre><code>&gt;&gt;&gt; emptyset = set()
</code></pre>
<p>In Python 3, the newer <code>{..}</code> notation is used when echoing the object, unless it is empty:</p>
<pre><code>&gt;&gt;&gt; {'foo'}
{'foo'}
&gt;&gt;&gt; _ - {'foo'}  # difference, removing the one element
set()
</code></pre>
<p>The <code>set()</code> type was added to the Python language in <a href="https://docs.python.org/2/whatsnew/2.4.html#pep-218-built-in-set-objects" rel="noreferrer">version 2.4</a> (see <a href="https://www.python.org/dev/peps/pep-0218" rel="noreferrer">PEP 218</a>), the curly brace syntax for set literals was <a href="https://docs.python.org/3/whatsnew/3.0.html#new-syntax" rel="noreferrer">added in Python 3</a> and <a href="https://docs.python.org/2/whatsnew/2.7.html#python-3-1-features" rel="noreferrer">back-ported to Python 2.7</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The fact that <code>{}</code> is used for an empty dictionary and not for an empty set has largely historical reasons. The syntax <code>{'a': 100, 'b': 200}</code> for dictionaries has been around since the beginning of Python. The syntax <code>{1, 2, 3}</code> for sets was introduced with Python 2.7. Since <code>{}</code> has been used for such a long time it will stay as the way to define an empty dictionary. If Python would have had the new set syntax since the beginning, likely an empty set would be defined with <code>{}</code> and an empty dictionary with <code>{:}</code>.</p>
</div>
<span class="comment-copy">Well, a <code>set</code> is like a <code>dict</code> with keys but no values, and they're both implemented using a hash table. But yes, it's a little annoying that the <code>{}</code> notation denotes an empty <code>dict</code> rather than an empty <code>set</code>, but that's a historical artifact. I've seen a suggestion that <code>{:}</code> <i>should</i> be an empty <code>dict</code> and <code>{}</code> an empty <code>set</code>, but I doubt that'll ever be implemented, as it clashes with too much existing code.</span>
<span class="comment-copy">@PM2Ring, thank you! I'd definitely support that, as I feel the current situation (apart from the language definition, which is very clear about it, I guess) <i>reads</i> as a bit ambiguous.</span>
<span class="comment-copy">FWIW, I find it easy to remember that <code>{}</code> is an empty <code>dict</code> because Python has always had <code>dict</code>s, since they're fundamental to the way Python works: normal object attributes are stored in a <code>dict</code>, and variables behave as if they are name:value pairs in a <code>dict</code> (although they aren't necessarily implemented that way for efficiency reasons). Whereas <code>set</code>s were added to the language quite a while later. (Of course, before then it was always possible to "fake" a set by using a <code>dict</code> with dummy values).</span>
<span class="comment-copy">While all answers posted are really helpful, I personally feel this one best answers my question. Thanks for the references to that PEP, I had not found it myself yet.</span>
<span class="comment-copy">Is indeed available in Py2.7: <a href="https://docs.python.org/3/whatsnew/2.7.html#python-3-1-features" rel="nofollow noreferrer">docs.python.org/3/whatsnew/2.7.html#python-3-1-features</a></span>
<span class="comment-copy">@PadraicCunningham Was missing a ':'. Typo. Sorry. Lost part of my text due to a network problem</span>
<span class="comment-copy">Ah ok, that makes more sense.</span>
<span class="comment-copy">Hopefully newbies recognize that the period typo in your dictionary should be a comma</span>
<span class="comment-copy">@kas Fixed. Thanks.</span>
