<div class="post-text" itemprop="text">
<p>How to add days in epoch time in Python</p>
<pre><code>#lssec -a lastupdate -s root -f /etc/security/passwd 2&gt;/dev/null | cut -f2 -d=
1425917335
</code></pre>
<p>above command giving me epoch time I want to add 90 days in that time. how do I add days in epoch time?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer"><code>datetime</code></a> makes it easy between <code>fromtimestamp</code>, <code>timedelta</code> and <code>timestamp</code>:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; orig = datetime.datetime.fromtimestamp(1425917335)
&gt;&gt;&gt; new = orig + datetime.timedelta(days=90)
&gt;&gt;&gt; print(new.timestamp())
1433693335.0
</code></pre>
<p>On Python 3.2 and earlier, <code>datetime</code> objects don't have a <code>.timestamp()</code> method, so you must change the last line to the less efficient two-stage conversion:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; print(time.mktime(new.timetuple()))
</code></pre>
<p>The two-stage conversion takes ~10x longer than <code>.timestamp()</code> on my machine, taking ~2.5 Âµs, vs. ~270 ns for <code>.timestamp()</code>; admittedly still trivial if you aren't doing it much, but if you need to do it a lot, consider it another argument for using modern Python. :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>If the input is POSIX timestamp then to get +90 days:</p>
<pre><code>DAY = 86400 # POSIX day (exact value)
future_time = epoch_time + 90*DAY
</code></pre>
<p>If you want to work with datetime objects then use UTC timezone:</p>
<pre><code>from datetime import datetime, timedelta

utc_time = datetime.utcfromtimestamp(epoch_time)
future_time = utc_time + timedelta(90)
</code></pre>
<p>Don't use local time for the date/time arithmetic (avoid  naive <code>fromtimestamp()</code>, <code>mktime()</code>, <code>naive_dt.timestamp()</code> if you can help it). To understand when it may fail, read <a href="https://stackoverflow.com/a/26313848/4279">Find if 24 hrs have passed between datetimes - Python</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can you dateutil.parser as well:</p>
<pre><code>since24Hours = datetime.utcnow() - timedelta(days=1)
since24Hours=dateutil.parser.parse(str(since24Hours))
since24Hours = since24Hours.strftime('%s')
since24Hours=int(since24Hours)*1000
</code></pre>
</div>
<span class="comment-copy">my python 2.6 doesn't have <code>&gt;&gt;&gt; print(new.timestamp())</code> function getting error <code>AttributeError: 'datetime.datetime' object has no attribute 'timestamp'</code></span>
<span class="comment-copy">@Satish: Pre-3.3, you can cobble together <code>.timestamp()</code> using <code>time.mktime(x.timetuple())</code>. It's uglier (and you need to <code>import time</code>), but equivalent. Note, you may, depending on source of the timestamp and whether it's using UTC or local time, want to use <code>utcfromtimestamp</code>and <code>utctimetuple</code> instead of the non-UTC functions given.</span>
<span class="comment-copy">Side-note: 2.6? Really? 2.7 has been out for over five years!</span>
<span class="comment-copy">its AIX box :( ....ugh... I have no choice</span>
<span class="comment-copy">@Satish: Wait, what? You couldn't possibly have the same error if you didn't call <code>.timestamp()</code>, and my suggestion was to replace <code>new.timestamp()</code> with <code>time.mktime(new.timetuple())</code>.</span>
