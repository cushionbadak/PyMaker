<div class="post-text" itemprop="text">
<p>Everywhere I search, they say python dictionary's doesn't have any order.
When I run code 1 each time shows a different output (random order). But when I run code 2 it always shows the same sorted output. Why is the dictionary ordered in the second snippet?</p>
<pre><code>   #code 1

    d = {'one': 1, 'two': 2, 'three': 3, 'four': 4}
    for a, b in d.items():
        print(a, b)
   #code 2 

    d = {1: 10, 2: 20, 3: 30, 4: 40}
    for a, b in d.items():
        print(a, b)
</code></pre>
<p><strong>Outputs</strong></p>
<p>code 1:</p>
<pre><code>four 4
two 2
three 3
one 1
</code></pre>
<p>code 1 again:</p>
<pre><code>three 3
one 1
two 2
four 4
</code></pre>
<p>code 2 (always):</p>
<pre><code>1 10
2 20
3 30
4 40
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's related to how hash randomisation is applied. Quoting <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">docs</a> (emphasis mine):</p>
<blockquote>
<p>By default, the <code>__hash__()</code> values of <strong>str</strong>, <strong>bytes</strong> and <strong>datetime</strong>
  objects are “salted” with an unpredictable random value. Although they
  remain constant within an individual Python process, they are not
  predictable between repeated invocations of Python.</p>
</blockquote>
<p>For each subsequent run, your strings (keys in snippet 1) are hashed with different salt value - therefore hash value is also changed. Hash values determine ordering.</p>
<p>For <code>int</code> type, hash function never changes - in fact hash is always equal to integer value.</p>
<pre><code>assert hash(42) == 42
</code></pre>
<p>If hashing function never changes, there is no change in ordering in subsequent runs.</p>
<p>For details in how Python dictionaries are implemented, you may refer to <a href="https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented">How are Python's Built In Dictionaries Implemented</a>.</p>
</div>
<span class="comment-copy">Hash is not always identity on integers.  <code>-1</code> hashes to <code>-2</code> and hash of really big integers has to come down too e.g. <code>hash(10**20)</code></span>
