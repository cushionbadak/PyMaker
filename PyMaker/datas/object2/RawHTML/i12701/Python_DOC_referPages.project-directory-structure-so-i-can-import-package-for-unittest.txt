<div class="post-text" itemprop="text">
<p>I am confused how to structure a project containing a package and a unittest.</p>
<p>I have this directory structure:</p>
<pre><code>TestProject/
├── package
│   ├── constants.py
│   ├── __init__.py
│   ├── package.py
│   └── tests
│       └── test_package.py
└── usage.py
</code></pre>
<p><strong>constants.py</strong></p>
<pre><code>A = 1
</code></pre>
<p><strong>__init__.py</strong></p>
<pre><code>from .package import give_A
</code></pre>
<p><strong>package.py</strong></p>
<pre><code>from .constants import *

def give_A():
    return A
</code></pre>
<p><strong>usage.py</strong></p>
<pre><code>from package import give_A

print(give_A())
</code></pre>
<p><strong>test_package.py</strong></p>
<pre><code>import unittest
from package import give_A

class Test_package(unittest.TestCase):
    def test_simple(self):
        self.assertEqual(give_A(), 1)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>Everything works until I try to run the <code>test_package.py</code> module, which understandably cannot import package:</p>
<pre><code>~/Python/TestProject/package/tests $ python3 test_package.py 
Traceback (most recent call last):
  File "test_package.py", line 3, in &lt;module&gt;
    from package import give_A
ImportError: No module named 'package'
</code></pre>
<p>However, this seems to be preferred structure of package / tests. How can I make it work? Or should I do it completely differently (structure, directories, imports, test execution...)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Either:</p>
<ol>
<li><p>Setup your <code>PYTHONPATH</code> such that <code>TestProject</code> is in it.</p></li>
<li><p>Run tests using unittest like this:</p>
<p><code>~/Python/TestProject $ python3 -m package.tests.test_package</code></p></li>
<li><p>Use unittest commendline interface:</p>
<p><code>~/Python/TestProject $ python3 -m unittest package/tests/test_package.py</code></p></li>
</ol>
<p>For more information see: <a href="https://docs.python.org/3/library/unittest.html#command-line-interface" rel="nofollow">https://docs.python.org/3/library/unittest.html#command-line-interface</a></p>
</div>
<span class="comment-copy">try <code>from package.package import give_A</code>?</span>
<span class="comment-copy"><code>ImportError: No module named package.package</code>. There is no reason why it should work, as package is not in PYTHONPATH, right?</span>
<span class="comment-copy">Where are you trying to run the script from?</span>
<span class="comment-copy">From its directory.</span>
<span class="comment-copy">Try running it from the package directory <code>python3 tests/test_package.py</code></span>
<span class="comment-copy">I get <code>SystemError: Parent module '' not loaded, cannot perform relative import</code> if I try relative import. Adding to <code>PYTHONPATH</code> works, but is that common practice?</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/16981921/relative-imports-in-python-3" title="relative imports in python 3">stackoverflow.com/questions/16981921/…</a> either  you set PYTHONPATH or you need to run with python -m package.tests.test_package.</span>
<span class="comment-copy">That works. Do people expect to run tests like that? Or do people include shell script to run tests?</span>
<span class="comment-copy">The documentation suggest to run tests with the unittest command line interface: <a href="https://docs.python.org/3/library/unittest.html#command-line-interface" rel="nofollow noreferrer">docs.python.org/3/library/unittest.html#command-line-interface</a>. Not sure if that's applicable and works with your example without further tweaks.</span>
<span class="comment-copy">Cool! I have missed that.</span>
