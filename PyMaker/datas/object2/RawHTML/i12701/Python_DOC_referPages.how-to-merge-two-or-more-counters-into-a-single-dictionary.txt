<div class="post-text" itemprop="text">
<p>I have two Counter collections C1 and C2, they have similar data set but different counts (think C1 and C2 as number of apples and oranges a group of people have).</p>
<p>I want to merge these two collections into one dict that looks like</p>
<pre><code>{
Person1: [1, 2],
Person2: [5, 1],
...
}
</code></pre>
<p>I haven't decided what data structure to store the merged counts (perhaps list) in order to easily write them to a csv file with # of apples and oranges being separate columns. There are a lot of tricks I am not aware of in python collections, I am looking for minimal code size. Thanks.</p>
<p>EDIT: From the answers below, I felt that my question is not as clear as I thought, let me elaborate on what exactly what I am looking for:
Let me have two Counter collections c1 and c2:</p>
<pre><code>c1 = [
  ('orange', 10),
  ('apple', 20)
]

c2 = [
  ('orange', 15),
  ('apple', 30)
]
</code></pre>
<p>I want to merge these two collections into a single dict such that it looks like:</p>
<pre><code>merged = {
  'orange': [10, 15],
  'apple': [20, 30]
}
</code></pre>
<p>Or other data structure that can be easily converted and output to csv format.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict()</code></a> from the <a href="https://docs.python.org/3/library/collections.html" rel="nofollow"><code>collections</code></a> module to store the merged result then you use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>chain()</code></a> from the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a> module. What <code>chain</code> is doing here is that it makes an iterator that returns elements from each of your "counter" and let you avoid writing a nested loop.</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; c1 = [
...   ('orange', 10),
...   ('apple', 20)
... ]
&gt;&gt;&gt; c2 = [
...   ('orange', 15),
...   ('apple', 30)
... ]
&gt;&gt;&gt; merged = defaultdict(list)
&gt;&gt;&gt; for item in chain(c1, c2):
...     merged[item[0]].append(item[1])
... 
&gt;&gt;&gt; merged
defaultdict(&lt;class 'list'&gt;, {'apple': [20, 30], 'orange': [10, 15]})
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using pandas:</p>
<pre><code>import pandas as pd
from collections import Counter

c1 = Counter('jdahfajksdasdhflajkdhflajh')
c2 = Counter('jahdflkjhdazzfldjhfadkhfs')


df = pd.DataFrame({'apples': c1, 'oranges': c2})
df.to_csv('apples_and_oranges.csv')
</code></pre>
<p>This works also if the keys of the counters are not all the same. There will be NaNs where the key only appeared in the other counter.</p>
</div>
<span class="comment-copy">Are they guaranteed to have the same keys?</span>
<span class="comment-copy">@LevLevitsky Yes, guaranteed.</span>
