<div class="post-text" itemprop="text">
<p>Let's say I have a list composed of a client number, number of a store, first name, last name and address which in this format:</p>
<pre><code>11, 2, Lisa, Anderson, NewYork

13, 4, John, Smith, Alabama

54, 2, Lucy, Nicholsson, NewYork

etc.
</code></pre>
<p>What is the best way for me to organize this data within python so I can easily access it so I can do stuff like input a client number and have an output with the location, and other derivatives of stuff like that. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://pandas.pydata.org/" rel="nofollow">pandas</a>. It provides database-like (or spreadsheet-like) tables which can be used to store and query data. Like this:</p>
<pre><code>import pandas as pd
df = pd.DataFrame([
        [11, 2, 'Lisa', 'Anderson', 'NewYork'],
        [13, 4, 'John', 'Smith', 'Alabama'],
        [54, 2, 'Lucy', 'Nicholsson', 'NewYork']
         ], columns = ['cl_number', 'store', 'first_name', 'last_name','address'])

df.index=df["cl_number"]
# rows will be indexed with cl_number

df.loc[11]
# returns a record of client with number 11

df.loc[11, 'address']
# returns address of a client with number 11

df[df['address'] == 'NewYork']
# returns a list of all clients with address 'NewYork'
</code></pre>
<p>However, you may also need full-featured database (see <a href="https://docs.python.org/2/library/sqlite3.html" rel="nofollow">SQLite</a>, for example).</p>
</div>
<div class="post-text" itemprop="text">
<p>If your data is reasonably consistent and there isn't so much that you want a fully-fledged database, you can get quite far with a <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a>:</p>
<pre><code>from collections import namedtuple

Client = namedtuple('Client', ('id', 'storeno', 'first_name', 'last_name',
                               'location'))

# Read the data
with open('db.csv') as fi:
    rows = fi.readlines()
db = {}
for row in rows:
    f= row.split(',')
    db[int(f[0])] = Client(int(f[0]), int(f[1]), f[2].strip(),
                           f[3].strip(), f[4].strip())

def find(**kwargs):
    """Return a list of all Clients matching a given set of criteria."""
    matches = []
    for client in db.values():
        for k,v in kwargs.items():
            if getattr(client, k) != v:
                break
        else:
            matches.append(client)
    return matches

# Client with ID 11
print db[11]

# All clients in New York
print find(location='NewYork')
# All clients called Lisa in New York
print find(location='NewYork', first_name='Lisa')
</code></pre>
</div>
<span class="comment-copy">define a <code>class</code> with those attributes, and then create methods which will process and return the information you want.</span>
<span class="comment-copy">I'm fairly sure the <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">Python tutorial</a> goes over every option at your disposal. Did you have a specific problem understanding / applying that?</span>
