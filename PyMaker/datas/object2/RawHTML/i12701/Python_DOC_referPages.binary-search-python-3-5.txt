<div class="post-text" itemprop="text">
<p>I'm trying to write binary search in python 3.5 but it wont work I'm not sure why. </p>
<pre><code>def binarySearch(alist, value):

    first = 0
    last = len(alist)-1
    midpoint = (last//2)
    while binarySearch:
        if value == alist[midpoint]:
            return True and print ("found")
        else:
            if value &lt; midpoint:
                last = midpoint-1
            else:
                if value &gt; midpoint:
                    first = midpoint+1    
binarySearch([1,2,3,4,5,6,7,8],3)
</code></pre>
<p>if I put value as 4 it displays found, if I put anything else nothing happens and its stuck running doing nothing. </p>
<p>Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>User1915011 beat me to my answer. In line with his answer and @wim's comment, I have made the following changes your <code>binarySearch</code> method. </p>
<ol>
<li>Changed the loop to use the <code>found</code> variable</li>
<li>Added an additional assignment to <code>midpoint</code> inside the loop</li>
<li>Ensure the loop terminates by adding <code>first&lt;=last</code></li>
<li><p>Return found after the <code>while</code> loop to indicate success or failure.</p>
<pre><code>def binarySearch(alist, value):

    first = 0
    last = len(alist)-1
    found = False
    while first&lt;=last and not found:
        midpoint = (first + last)//2
        if value == alist[midpoint]:        
            found =  True 
        else:
            if value &lt; alist[midpoint]:
                last = midpoint-1
            else:
                if value &gt; midpoint:
                    first = midpoint+1  
    return found

if binarySearch([1,2,3,4,5,6,7,8],3):
    print "found"
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Your looping condition is just wrong <code>while binarySearch</code>?</li>
<li>You change value of midpoint only once instead you should be changing it every loop iteration. </li>
<li>You compare value with index (midpoint) and should be comparing with
list value (alist[midpoint])</li>
<li>This is wrong: <code>return True and print ("found")</code> it will always return None.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>binary converters are also cool</p>
<pre><code>num = int(input('please enter your number: '))  

list = []  

for i in (128, 64, 32, 16, 8, 4, 2, 1):  
    if num &gt;= i:  
        list.append(1)  
        num = num-i  

else:  
    list.append(0)  
</code></pre>
<p>print(list)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a detailed explanation how it works:</p>
<pre><code>    def binarySearch(array, i):

    ## Binary search is the algorithm which is used to search an element in a sorted array

    ## The time complexity of the binary search is O(log n)
    ## Which means that in an array of length(2^(n-1)) elements we need to look at only n elements
    ## That is why we say that binary search algorithm runs in logarithmic time, which is much faster than linear time

    start = 0
    last = len(array)-1
    result = False

    count = 0 ## to debug

    print("\n******************************************************************\n")
    while(start &lt;= last and not result):

        ## Debugger Begin
        mid = 0
        print("Loop number: ", count)
        print("Start element: ", array[start], " Position of Start Element: ", start)
        print("Last element: ", array[last], "  Position of Last Element: ", last)
        ## Debugger End

        mid = (start + last)//2 ## '//' indicates the floor division(ignores the value after the period) 
        if(array[mid] == i):
            print("***Mid***")
            result = True;
        else:
            if(i &lt; array[mid]):
                print("***The value of the item:",i," we are searching for is LESS than the current middle element***")
                last = mid - 1
            else:
                print("***The value of the item:",i," we are searching for is GREATER than the current middle element***")
                start = mid + 1

        ## Debugger
        count = count+1
        print("Mid element: ", array[mid], "   Position of Mid Element: ", mid, "\n")
        ## Debugger

    print("******************************************************************")
    if(result == True):
        print("\nThe element:",i ,"is in the array")
    else:
        print("\nItem is not in the array")

    return result

## Array you want to search
array = [9, 11, 12, 21, 23, 34, 45, 49, 65, 98]

## Item you want to search in the array
i = 21

print("Searching the element: ",i , "\nIn the Array: ", array)
print("Length of the array is: ", len(array))

## Binary Search
binarySearch(array, i)
</code></pre>
</div>
<span class="comment-copy">You never reassign <code>midpoint</code> in the loop</span>
<span class="comment-copy">@wim   ah ok ill try that</span>
<span class="comment-copy">I realize this is probably for class, but in general, don't write your own binary search. Python already has <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">the <code>bisect</code> module</a> for that exact purpose.</span>
<span class="comment-copy">yeah I understand but it will come up on my exam and they expect me to be able to write it.</span>
<span class="comment-copy">Thanks dude, much appreciated</span>
<span class="comment-copy">@Jaco because you assign midpoint in the loop, there is no need to do it previously</span>
<span class="comment-copy">Thanks @Copperfield, removed the first <code>midpoint</code> assignment</span>
<span class="comment-copy">Quick note, it doesn't recognize the last element with last = len(alist)-1, it recognizes it as the element before last. So on the example given it would think 7 is the last element and not 8? thanks.</span>
<span class="comment-copy"><code>binarySearch([1,2,3,4,5,6,7,8],8)</code> seems to work ? In Python indexing starts at 0, so <code>a[len(a)-1]</code> returns 8 if a = [1,2,3,4,5,6,7,8]</span>
