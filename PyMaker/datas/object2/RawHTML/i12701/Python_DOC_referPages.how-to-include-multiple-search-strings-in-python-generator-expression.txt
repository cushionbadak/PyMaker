<div class="post-text" itemprop="text">
<p>I have a list of files--the first two have the same filename, but different directory paths. A state code (e.g. CA or OK) is also included in the directory path. </p>
<pre><code>files = [r'C:\temp\OK\somefile_1234_nw.tif',
         r'C:\temp\test\CA\somefile_1234_nw.tif',
         r'C:\temp\OK\somefile_9999_nw.tif']
</code></pre>
<p>I can extract the first file with a specific file name using the following generator expression:</p>
<pre><code>search_string = 'somefile_1234_nw.tif'
print next((s for s in files if search_string in s), None)
</code></pre>
<p>How can I extract the file that contains items in two search strings--'CA' and 'somefile_1234_nw.tif'--using my generator expression? Processing efficiency matters in this case, because my scaled-up problem has thousands of items.</p>
<p>The intended output is: </p>
<pre><code>'C:\temp\test\CA\somefile_1234_nw.tif'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean something like this?</p>
<pre><code>&gt;&gt;&gt; next((s for s in files if all(i in s for i in['somefile_1234_nw.tif', 'CA'])), None)
'C:\\temp\\test\\CA\\somefile_1234_nw.tif'
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all()</code></a> checks if all of the elements in an iterator   are <code>True</code>, if they are, return <code>True</code>, otherwise, return <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this should work: </p>
<pre><code>search_strings = ['somefile_1234_nw.tif', 'CA']
print next((s for s in files if all([search_string in s for search_string in search_strings])), None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you are looking for speed then generators may not be the way to go.  Generators are great for several reasons like when you are going to run out of memory or when you have extra processing to do before you get your next answer.</p>
<p>For speed on 1000's of items or even millions of items: You will want to use a pandas series.  (because 1000's of items will fit in memory on your machine.)</p>
<pre><code>import pandas as pd
files = pd.Series([r'C:\temp\OK\somefile_1234_nw.tif',
         r'C:\temp\test\CA\somefile_1234_nw.tif',
         r'C:\temp\OK\somefile_9999_nw.tif'])

pattern2 = 'CA'
pattern1 = 'somefile_1234_nw.tif'

mask1 = files.str.contains(pattern1)
files2 = files[mask1]
mask2 = files2.str.contains(pattern2)
files2[mask2].values
</code></pre>
<p>I would be interested in hearing timings on your data.</p>
</div>
