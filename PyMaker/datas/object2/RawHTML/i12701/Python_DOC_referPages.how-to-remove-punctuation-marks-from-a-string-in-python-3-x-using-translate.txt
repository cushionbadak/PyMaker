<div class="post-text" itemprop="text">
<p>I want to remove all punctuation marks from a text file using .translate() method. It seems to work well under Python 2.x but under Python 3.4 it doesn't seem to do anything. </p>
<p>My code is as follows and the output is the same as input text.</p>
<pre><code>import string
fhand = open("Hemingway.txt")
for fline in fhand:
    fline = fline.rstrip()
    print(fline.translate(string.punctuation))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to create a translation table using <code>maketrans</code> that you pass to the <code>str.translate</code> method.</p>
<p>In Python 3.1 and newer, <code>maketrans</code> is now a <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans">static-method on the <code>str</code> type</a>, so you can use it to create a translation of each punctuation you want to <code>None</code>.</p>
<pre><code>import string

# Thanks to Martijn Pieters for this improved version

# This uses the 3-argument version of str.maketrans
# with arguments (x, y, z) where 'x' and 'y'
# must be equal-length strings and characters in 'x'
# are replaced by characters in 'y'. 'z'
# is a string (string.punctuation here)
# where each character in the string is mapped
# to None
translator = str.maketrans('', '', string.punctuation)

# This is an alternative that creates a dictionary mapping
# of every character from string.punctuation to None (this will
# also work)
#translator = str.maketrans(dict.fromkeys(string.punctuation))

s = 'string with "punctuation" inside of it! Does this work? I hope so.'

# pass the translator to the string's translate method.
print(s.translate(translator))
</code></pre>
<p>This should output: </p>
<pre><code>string with punctuation inside of it Does this work I hope so
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The call signature of str.translate has changed and apparently the parameter deletechars has been removed. You could use</p>
<pre><code>import re
fline = re.sub('['+string.punctuation+']', '', fline)
</code></pre>
<p>instead, or create a table as shown in the other answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3.x ,it can be done using :</p>
<pre><code>import string
#make translator object
translator=str.maketrans('','',string.punctuation)
string_name=string_name.translate(translator)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just compared the three methods by speed. <code>translate</code> is slower than <code>re.sub</code> (with precomilation) in about 10 times. And <code>str.replace</code> is faster than <code>re.sub</code> in about 3 times. By <code>str.replace</code> I mean:</p>
<pre><code>for ch in string.punctuation:                                                                                                     
    s = s.replace(ch, "'") 
</code></pre>
</div>
<span class="comment-copy">This is nicely done. It's unfortunate that the top Google results for this topic are deprecated, slower, or more difficult to follow.</span>
<span class="comment-copy">It seems that <code>string.punctuation</code> does not include quotes. How would we tweak this code to trim by the keys in <code>string.punctuation</code> as well as user specified characters? An or statement?</span>
<span class="comment-copy">@ArashHowaida <code>string.punctuation</code> includes quotes (both double and single) - even in my example it strips out the double quotes. If you want to customize what gets stripped in addition to <code>str.punctuation</code>, just concatenate <code>string.punctuation</code> with a string of characters you also want removed, like <code>translator = str.maketrans({key: None for key in string.punctuation + 'abc'})</code> if you wanted to remove punctuation and any occurrences of the characters <code>a</code>, <code>b</code>, or <code>c</code>.</span>
<span class="comment-copy">My quotes must have some encoding issues, good to know. Thank you!</span>
<span class="comment-copy"><code>str.maketrans('', '', string.punctuation)</code> would also work. There is no need to loop, at any rate, even <code>str.maketrans(dict.fromkeys(string.punctuation))</code> would be better here.</span>
<span class="comment-copy">Perfect, works excellent!</span>
<span class="comment-copy">(@birryree example (<a href="http://stackoverflow.com/a/34294398/1656850">stackoverflow.com/a/34294398/1656850</a>) begs to disagree with your deprecation edict on string.translate ;-)</span>
<span class="comment-copy">You are right. I misunderstood the documentation on that point. Only the call signature has changed: str.translate takes only a table as parameter and no longer deletechars (as seen in birryree's answer). I will edit my answer accordingly.</span>
<span class="comment-copy">This is the only solution I could find that is Python 2.7/3.6 compatible. I could not find any solution to use translate() that would work for both Python 2.7 and 3.6.</span>
<span class="comment-copy">I think you do it wrong I run tests(adopted in translate test part for python3) from <a href="http://stackoverflow.com/a/266162/4249707">stackoverflow.com/a/266162/4249707</a> on Python 3.6.0b4 and like many years ago replace sucks. My results -  sets      : 2.7033574236556888 regex     : 0.9831533581018448 translate : 1.837449918501079 replace   : 5.498765277676284</span>
