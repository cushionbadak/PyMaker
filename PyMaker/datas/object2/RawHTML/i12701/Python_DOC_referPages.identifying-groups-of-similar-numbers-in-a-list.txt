<div class="post-text" itemprop="text">
<p>I have lists of numbers that I'd like to group by similarity. The order of the numbers in the list is fixed and important to preserve.</p>
<p>As an example, here's a visualisation of what I'm trying to achieve:</p>
<p><a href="https://i.stack.imgur.com/IEgHM.png" rel="nofollow noreferrer"><img alt="Black line is the list of numbers, green lines are the identified groups of similar numbers I'd like to identify, corresponding with that section of the list." src="https://i.stack.imgur.com/IEgHM.png"/></a></p>
<p>The black line represents the list of numbers I have. The green lines represent the groupings I would like to identify in this example list.</p>
<p>The order of numbers in the list is important and cannot be changed (e.g. cannot sort ascending or descending). The numbers in the list are not contiguous (i.e. there isn't likely to be a list of <code>6, 6, 6, 6</code>, but probably would be something like <code>5.85, 6.1, 5.96, 5.88</code>).</p>
<p>Is there a method to do this?</p>
<p><strong>Edit</strong>: example values, and desired groupings:</p>
<p><code>[4.1, 4.05, 4.14, 4.01, 3.97, 4.52, 4.97, 5.02, 5.05, 5.2, 5.18, 3.66, 3.77, 3.59, 3.72]</code></p>
<p>would result in an approximate grouping of</p>
<p><code>[(4.1, 4.05, 4.14, 4.01, 3.97, 4.52), (4.97, 5.02, 5.05, 5.2, 5.18), (3.66, 3.77, 3.59, 3.72)]</code></p>
<p>In the grouping above, you could argue that <code>4.52</code> could belong to the first or second group. If visualised as I did in the example above, the groupings would be represented by the green lines. My lists are actually several hundred to several thousand values in length.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from statistics import mean

def ordered_cluster(data, max_diff):
    current_group = ()
    for item in data:
        test_group = current_group + (item, )
        test_group_mean = mean(test_group)
        if all((abs(test_group_mean - test_item) &lt; max_diff for test_item in test_group)):
            current_group = test_group
        else:
            yield current_group
            current_group = (item, )
    if current_group:
        yield current_group

data = [4.1, 4.05, 4.14, 4.01, 3.97, 4.52, 4.97, 5.02, 5.05, 5.2, 5.18, 3.66, 3.77, 3.59, 3.72]

print(list(ordered_cluster(data, 0.5)))
</code></pre>
<p>Output :</p>
<pre><code>[(4.1, 4.05, 4.14, 4.01, 3.97, 4.52), (4.97, 5.02, 5.05, 5.2, 5.18), (3.66, 3.77, 3.59, 3.72)]
</code></pre>
<p>This ensures that each item from a group does not exceed <code>max_diff</code> to the mean of the group. If it does, a new group is started.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> - it combines consecutive elements with same result of given key function (<a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow"><code>round</code></a> in this case):</p>
<pre><code>In [7]: import itertools

In [8]: data = [4.1, 4.05, 4.14, 4.01, 3.97, 4.52, 4.97, 5.02, 5.05, 5.2, 5.18, 3.66, 3.77, 3.59, 3.72]

In [9]: [tuple(xs) for _, xs in itertools.groupby(data, round)]
Out[9]: 
[(4.1, 4.05, 4.14, 4.01, 3.97),
 (4.52, 4.97, 5.02, 5.05, 5.2, 5.18),
 (3.66, 3.77, 3.59, 3.72)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code> to categorize your data based on a specific difference (<code>2</code> in this case) with those preceding item.</p>
<pre><code>from itertools import groupby, chain
from collections import OrderedDict

def grouper(_lst, interval):
    z = zip(_lst,_lst[1:])
    return [OrderedDict.fromkeys(chain.from_iterable(g)).keys() for k,g in groupby(z,key=lambda x:x[1]-x[0]&lt;interval) if k]
</code></pre>
<p>Here I used <code>OrderedDict.fromkeys</code> in order to preserver the unique items in a specific order.</p>
<p>Demo :</p>
<pre><code>test = [0, 1.3, 2.2, 2.9, 6, 7.8, 8, 9.1, 10.4,15, 16, 17.6, 17.7, 18.9]
print(grouper(test, 2))
[[0, 1.3, 2.2, 2.9], [6, 7.8, 8, 9.1, 10.4], [15, 16, 17.6, 17.7, 18.9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A numpy version:</p>
<pre><code>l = [4.1, 4.05, 4.14, 4.01, 3.97, 4.52, 4.97, 5.02, 5.05, 5.2, 5.18, 3.66, 3.77, 3.59, 3.72]

import numpy as np

x = np.array(l)
mask = np.diff(np.round(x))
print(np.split(x, np.where(mask)[0] + 1))
[array([ 4.1 ,  4.05,  4.14,  4.01,  3.97]), array([ 4.52,  4.97,  5.02,  5.05,  5.2 ,  5.18]), array([ 3.66,  3.77,  3.59,  3.72])]
</code></pre>
<p>Or:</p>
<pre><code>import numpy as np

diff = .5
x = np.array(l)
mask = np.abs(x[:-1] - x[1:]) &lt;= diff
print(np.split(x, np.where(~mask)[0] + 1)
[array([ 4.1 ,  4.05,  4.14,  4.01,  3.97]), array([ 4.52,  4.97,  5.02,  5.05,  5.2 ,  5.18]), array([ 3.66,  3.77,  3.59,  3.72])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><a href="https://en.wikipedia.org/wiki/K-means_clustering" rel="nofollow">https://en.wikipedia.org/wiki/K-means_clustering</a></strong>
k-means clustering is a method of vector quantization, originally from signal processing, that is popular for cluster analysis in data mining. k-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.</p>
</div>
<span class="comment-copy">You should add a list of possible values and what the desired output is.</span>
<span class="comment-copy">I have added a sample list.</span>
<span class="comment-copy">@PadraicCunningham Thanks. I had a small bug. Fixed now.</span>
<span class="comment-copy">I found this to be the most versatile solution, thank you.</span>
<span class="comment-copy">Why a downvote?</span>
<span class="comment-copy">Not a really useful answer, especially compared to the other answers here.</span>
