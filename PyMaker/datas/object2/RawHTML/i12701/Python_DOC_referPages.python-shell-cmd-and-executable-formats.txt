<div class="post-text" itemprop="text">
<p>I have used both Python and C for a while. C is good in a way that i can use Windows cmd or anything like that to compile files and easily read command line arguments. However, the only thing that runs python that I know is IDLE which is like an interpreter and doesnt take command-line arguments and it's hard to work with. Is there anything like the C's cmd and a compiler for python 3.x?
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>However, the only thing that runs python that I know is IDLE which is
  like an interpreter </p>
</blockquote>
<p>You can still call <code>python helloworld.py</code> from a command line</p>
<blockquote>
<p>and doesnt take command-line arguments</p>
</blockquote>
<p>It's possible to read commandline arguments from <code>python helloworld.py Alex</code> using:</p>
<pre><code>import sys
name = sys.argv[1] # Gives "Alex", argv[0] would be "helloworld.py"
</code></pre>
<blockquote>
<p>a compiler for python 3.x</p>
</blockquote>
<p><a href="https://pypi.python.org/pypi/py2exe/0.9.2.0" rel="nofollow">py2exe</a> supports Python 3</p>
<p>And finally if you're looking to call commands from your Python code, there is a module called <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess</a></p>
</div>
<div class="post-text" itemprop="text">
<p>if i understand your question , you can do this in python by importing <strong>cmd</strong> , <strong>os</strong></p>
<p>for example :</p>
<pre><code>import os
import cmd
import readline

class Console(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.prompt = "=&gt;&gt; "
        self.intro  = "Welcome to console!"  ## defaults to None

    ## Command definitions ##
    def do_hist(self, args):
        """Print a list of commands that have been entered"""
        print self._hist

    def do_exit(self, args):
        """Exits from the console"""
        return -1

    ## Command definitions to support Cmd object functionality ##
    def do_EOF(self, args):
        """Exit on system end of file character"""
        return self.do_exit(args)

    def do_shell(self, args):
        """Pass command to a system shell when line begins with '!'"""
        os.system(args)

    def do_help(self, args):
        """Get help on commands
           'help' or '?' with no arguments prints a list of commands for which help is available
           'help &lt;command&gt;' or '? &lt;command&gt;' gives help on &lt;command&gt;
        """
        ## The only reason to define this method is for the help text in the doc string
        cmd.Cmd.do_help(self, args)

    ## Override methods in Cmd object ##
    def preloop(self):
        """Initialization before prompting user for commands.
           Despite the claims in the Cmd documentaion, Cmd.preloop() is not  a stub.
         """
        cmd.Cmd.preloop(self)   ## sets up command completion
        self._hist    = []      ## No history yet
        self._locals  = {}      ## Initialize execution namespace for user
        self._globals = {}

     def postloop(self):
        """Take care of any unfinished business.
           Despite the claims in the Cmd documentaion, Cmd.postloop() is not a stub.
        """
        cmd.Cmd.postloop(self)   ## Clean up command completion
        print "Exiting..."

    def precmd(self, line):
        """ This method is called after the line has been input but before
            it has been interpreted. If you want to modifdy the input line
            before execution (for example, variable substitution) do it here.
        """
        self._hist += [ line.strip() ]
        return line

    def postcmd(self, stop, line):
        """If you want to stop the console, return something that evaluates to true.
           If you want to do some post command processing, do it here.
        """
        return stop

    def emptyline(self):    
        """Do nothing on empty input line"""
    pass

    def default(self, line):       
         """Called on an input line when the command prefix is not recognized.
           In that case we execute the line as Python code.
        """
        try:
            exec(line) in self._locals, self._globals
        except Exception, e:
            print e.__class__, ":", e

if __name__ == '__main__':
        console = Console()
        console . cmdloop() 
</code></pre>
<p>this example is for use command lines in python , however you can write your python code and call .py file in cmd by run this command :</p>
<pre><code>python &lt;file_name&gt;.py
</code></pre>
<p>search more for other examples , also see official doc : <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow">cmd â€” Support for line-oriented command interpreters</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the python interpreter as a compiler too to compile your python programs.</p>
<p>Say you have a <code>test.py</code> file which you want to compile; then you can use <code>python test.py</code> to compile the file.</p>
<p>To be true, you are not actually compiling the file, you are executing it line by line (well, call it interpreting)</p>
<p>For command line arguments you can use <code>sys.argv</code> as already mentioned in the above answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Provided on how you have it installed, you can probably just run the python scripts as is, by typing the script file name, for example:</p>
<pre><code>C:\&gt; test.py
</code></pre>
<p>If you have a relatively recent python installation, this will be associated with the python launcher (py.exe) and be equivalent to running</p>
<pre><code>C:\&gt; py test.py
</code></pre>
<p>If you only have one version of python installed this will run it with this, but the python launcher supports multiple ways to customize how it behaves with multiple versions of python.</p>
<p>Additionally, and as stated above, you can run the script with just the python command as well.  The main difference is that running it with the python command allows you to specify exactly which installation gets ran, using the script name alone (or the py.exe version), will allow the system to select which installation gets ran.</p>
</div>
<span class="comment-copy">You can run python scripts in the command prompt with <code>python script.py</code> where <code>script.py</code> is your python script. You may need to add the path to your python.exe to your PATH environment variable in Windows.</span>
