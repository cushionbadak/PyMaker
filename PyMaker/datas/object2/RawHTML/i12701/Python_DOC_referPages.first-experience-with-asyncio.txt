<div class="post-text" itemprop="text">
<p>I am learning <code>python-asyncio</code>, and I'm trying to write a simple model.</p>
<p>I have a function handling tasks. While handling, it goes to another remote service for data and then prints a message.</p>
<p>My code:</p>
<pre><code>dd = 0

@asyncio.coroutine
def slow_operation():
    global dd
    dd += 1
    print('Future is started!', dd)
    yield from asyncio.sleep(10 - dd)  # request to another server
    print('Future is done!', dd)

def add():
    while True:
        time.sleep(1)
        asyncio.ensure_future(slow_operation(), loop=loop)

loop = asyncio.get_event_loop()
future = asyncio.Future()
asyncio.ensure_future(slow_operation(), loop=loop)
th.Thread(target=add).start()
loop.run_forever()
</code></pre>
<p>But this code doesn't switch the context while sleeping in:</p>
<pre><code>yield from asyncio.sleep(10 - dd)
</code></pre>
<p>How can I fix that?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="nofollow">asyncio.ensure_future</a> is not thread-safe, that's why <code>slow_operation</code> tasks are not started when they should be. Use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.call_soon_threadsafe" rel="nofollow">loop.call_soon_threadsafe</a>:</p>
<pre><code>    callback = lambda: asyncio.ensure_future(slow_operation(), loop=loop)
    loop.call_soon_threadsafe(cb)
</code></pre>
<p>Or <a href="https://docs.python.org/3.5/library/asyncio-task.html#asyncio.run_coroutine_threadsafe" rel="nofollow">asyncio.run_coroutine_threadsafe</a> if you're running python 3.5.1:</p>
<pre><code>    asyncio.run_coroutine_threadsafe(slow_operation(), loop)
</code></pre>
<p>However, you should probably keep the use of threads to the minimum. Unless you use a library running tasks in its own thread, all the code should run inside the event loop (or inside an executor, see <a href="https://docs.python.org/3.6/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="nofollow">loop.run_in_executor</a>). </p>
</div>
<span class="comment-copy">ty @Mogsdad for your fixes</span>
