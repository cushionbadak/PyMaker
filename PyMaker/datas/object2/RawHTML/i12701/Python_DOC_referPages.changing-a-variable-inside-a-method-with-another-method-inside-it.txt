<div class="post-text" itemprop="text">
<p>The following code raises an <code>UnboundLocalError</code>:</p>
<pre><code>def foo():
    i = 0
    def incr():
        i += 1
    incr()
    print(i)

foo()
</code></pre>
<p>Is there a way to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>nonlocal</code> statement </p>
<pre><code>def foo():
    i = 0
    def incr():
        nonlocal i
        i += 1
    incr()
    print(i)

foo()
</code></pre>
<p>For more information on this new statement added in python 3.x, go to <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="noreferrer">https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>i</code> as an argument like this:</p>
<pre><code>def foo():
    i = 0
    def incr(i):
        return i + 1
    i = incr(i)
    print(i)

foo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces">9.2. Python Scopes and Namespaces</a>:</p>
<blockquote>
<p>if no <code>global</code> statement is in effect – assignments to names always go into the innermost scope.</p>
</blockquote>
<p>Also:</p>
<blockquote>
<p>The <code>global</code> statement can be used to indicate that particular variables live in the global scope and should be rebound there; the <code>nonlocal</code>statement indicates that particular variables <strong>live in an enclosing scope</strong> and should be rebound there.</p>
</blockquote>
<p>You have many solutions:</p>
<ul>
<li>Pass <code>i</code> as an argument  ✓  (I would go with this one)</li>
<li>Use <code>nonlocal</code> keyword</li>
</ul>
<p>Note that in Python2.x you can access non-local variables but you <strong>can't</strong> change them.</p>
</div>
<div class="post-text" itemprop="text">
<p>People have answered your question but no one seems to address why exactly this is happening. </p>
<blockquote>
<p>The following code raises an <code>UnboundLocalError</code></p>
</blockquote>
<p>So, <strong>why</strong>? Let's take a quote from the <a href="https://docs.python.org/2/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow">FAQ</a>:</p>
<blockquote>
<p>When you make an assignment to a variable in a scope, that variable becomes local to that scope and shadows any similarly named variable in the outer scope.</p>
</blockquote>
<p>Inside your nested function you are performing an assignment with the <code>+=</code> operator. What this means is that <code>i += 1</code> will approximately perform <code>i = i + 1</code> (from a binding perspective). As a result <code>i</code> in the expression <code>i + 1</code> will be searched for in the local scope (because it is used in the assignment statement) for function <code>incr</code> where it will not be found, resulting in an <code>UnboundLocalError: reference before assignment</code> .</p>
<p>There's many ways you can tackle this and python 3 is more elegant in the approach you can take than python 2. </p>
<p><strong><a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow">Python 3 <code>nonlocal</code></a></strong>:</p>
<p>The <code>nonlocal</code> statements tells Python to look for a name in the enclosing scope (so in this case, in the scope of function <code>foo()</code>) for name references:</p>
<pre><code>def foo():
    i = 0
    def incr():
        nonlocal i
        i +=1
    incr()
    print(i)
</code></pre>
<p><strong><a href="https://www.python.org/dev/peps/pep-0232/" rel="nofollow">Function attributes Python <code>2.x</code> and <code>3.x</code>:</a></strong></p>
<p>Remember that functions are first class objects, as such they can store state. Use function attributes to access and mutate function state, the good thing with this approach is it works on <strong>all</strong> pythons and doesn't require <code>global, nonlocal</code> statements.</p>
<pre><code>def foo():
    foo.i = 0
    def incr():
        foo.i +=1
    incr()
    print(foo.i)
</code></pre>
<p><strong><a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow">The <code>global</code> Statement (Python <code>2.x</code>, <code>3.x</code>)</a>:</strong></p>
<p>Really the ugliest of the bunch, but gets the job done:</p>
<pre><code>i = 0
def foo():
    def incr():
        global i
        i += 1
    incr()
    print(i)

foo()
</code></pre>
<hr/>
<p>The option of passing an argument to the function gets the same result but it doesn't relate to mutating the enclosing scope in the sense <code>nonlocal</code> and <code>global</code> are and is more like the function attributes presented. It is creating a new local variable in function <code>inc</code> and then re-binding the name to <code>i</code> with the <code>i = incr(i)</code> but, it does indeed get the job done.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, int are immutable. So you could put your int in a mutable object.</p>
<pre><code>def foo():
    i = 0
    obj = [i]
    def incr(obj):
        obj[0]+=1
    incr(obj)
    print(obj[0])

foo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make <code>i</code> global and use it.</p>
<pre><code>i = 0
def foo():
    def incr():
        global i
        i += 1
    incr()
    print(i)

foo()
</code></pre>
<p>but the most preferred way is to pass <code>i</code> as a param to <code>incr</code></p>
<pre><code>def foo():
    i = 0
    def incr(arg):
        arg += 1
        return arg
    i = incr(i)
    print(i)

foo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could also use a lambda function:</p>
<pre><code>def foo():
  i=0
  incr = lambda x: x+1
  print incr(i)

foo()
</code></pre>
<p>I think the code is cleaner this way</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple function attributes will not work in this case.</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; def foo():
...     foo.i = 0
...     def incr():
...         foo.i +=1
...     incr()
...     print(foo.i)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; foo()
1
&gt;&gt;&gt; foo()
1
&gt;&gt;&gt; foo()
1
</code></pre>
<p>You re assign your foo.i to <code>0</code> for every call of <code>foo</code>.
It better to use <code>hassattr</code>. But code become more complicated.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; def foo():
...     if not hasattr(foo, 'i'):
...         foo.i = 0
...     def incr():
...         foo.i += 1
...         return foo.i
...     i = incr()
...     print(i)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; foo()
1
&gt;&gt;&gt; foo()
2
&gt;&gt;&gt; foo()
3
</code></pre>
<p>Also you can try this idea:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; def foo():
...     def incr():
...         incr.i += 1
...         return incr.i
...     incr.i = 0
...     return incr
... 
&gt;&gt;&gt; a = foo()
&gt;&gt;&gt; a()
1
&gt;&gt;&gt; a()
2
&gt;&gt;&gt; a()
3
&gt;&gt;&gt; a()
4
</code></pre>
<p>May be it is more handy to wrap you incr into decorator.</p>
</div>
<span class="comment-copy">You can pass <code>i</code> as an argument.</span>
<span class="comment-copy">You can update value of <code>i</code> as <code>i = incr()</code></span>
<span class="comment-copy">@MarounMaroun Judgind from this question, Python what, doesn't have closures? 0_o' I'm not familiar with it, though. Or is it because <code>def</code> defines a function in the global namespace? I'm just curious, and don't want to learn Python just for this. :)</span>
<span class="comment-copy">Great answer, as this does not depend on Python 3, like the other <code>nonlocal</code> solutions.</span>
<span class="comment-copy">The name <code>incr</code> is not well chosen for a function that returns one more than its argument without any side effects.</span>
<span class="comment-copy">The name of this functional version of <code>incr</code> should probably be <code>succ</code> :)</span>
<span class="comment-copy">@MarcvanLeeuwen: Huh, seems so. Any good ideas or use <code>succ</code> as Jacob suggested?</span>
<span class="comment-copy">@shooqie: Because by convention names that are (abbreviation for) verbs suggest a procedure called for its side effect, not a pure function called for its return value only, as is the case here. A noun like <code>succ</code>(essor), or even a description <code>one_plus</code>, would be more appropriate here.</span>
<span class="comment-copy">With this approach, it's not necessary to pass <code>obj</code> as an argument to <code>incr</code>; it works fine as a closure.</span>
<span class="comment-copy">@BurhanKhalid on testing it seems to work, please point if I missed anything.</span>
