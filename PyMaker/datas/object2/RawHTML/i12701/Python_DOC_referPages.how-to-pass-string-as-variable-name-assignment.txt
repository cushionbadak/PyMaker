<div class="post-text" itemprop="text">
<p>I have a SDF data file which stores variables names and their values in block format.</p>
<p>The values in side the <code>varNameList</code> are names of variables (strings) corresponding to which a data block is there inside the sdf file and it can be accessed only by giving these variable names.</p>
<p>I read the data file and variables using the following code in ipython</p>
<pre><code>import sdf
import numpy as np
dataFile = sdf.read('0010.sdf')

varNameList = dir(dataFile)  
varSize = np.size(varNameList)  #gives the array size
vName = 'dataFile.'+np.str(varNameList[51])+'.data'
</code></pre>
<p>The outputs of variable names is as follows:</p>
<pre><code>In [71]:varNameList[51]
Derived_Number_Density_electron

In [72]:vName
'dataFile.Derived_Number_Density_electron.data'
</code></pre>
<p>Now, I wish to use this string on the right side of an assignment e.g. </p>
<pre><code>electronDensity = dataFile.Derived_Number_Density_electron.data
</code></pre>
<p>If I write this line in a standard Python program, it reads the data and assigns it to electronDensity.</p>
<p>However, in my simulations, these variables are dynamically created and their names can be found using <code>dir()</code> command as written above. I am not able to create a program line equivalent to</p>
<pre><code>electronDensity = dataFile.Derived_Number_Density_electron.data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>eval</code> to evaluate an expression from a string in Python.  Here's a simple example:</p>
<pre><code>&gt;&gt;&gt; x = 123
&gt;&gt;&gt; y = "x"
&gt;&gt;&gt; z = eval(y)
&gt;&gt;&gt; 
&gt;&gt;&gt; print z
123
</code></pre>
<p>In your case, you can do:</p>
<pre><code>electronDensity = eval(vName)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars</code></a> without argument, you can access local variables as a dictionary. Or you can also use <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow"><code>globals</code></a> or <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals</code></a>.</p>
<p>Mixing with <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow"><code>getattr</code></a> to get arbitrary attribute using attribute name:</p>
<pre><code>vs = vName.split('.')
varname = vs.pop(0)
value = vars()[varname]
for v in vs:
   value = getattr(value, v)

electronDensity = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the answers. I did the following and it worked.
This way, even if I don't know what are the vaiables created in every simulation run, my post-processing python-script will take care of the dynamically created variables at runtime of simulation.</p>
<pre><code>path = '/home/ajit/run/data/0001.sdf'
datafile=sdf.read(path)
varNameList = dir(datafile)   #reads all the variable names
varNameSize = np.size(varNameList)
varName=[0 for i in range(varNameSize]
varData=[0 for i in range(varNameSize]

for i in range (0, varNameSize):
      varName[i] = 'q.'+np.str(varNameList[i])+'.data'
      varData[i] = eval(varName[i])        
</code></pre>
<p>Thanks again.</p>
</div>
<span class="comment-copy"><b><i><code>eval()</code> is very dangerous!!</i></b></span>
