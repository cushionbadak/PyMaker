<div class="post-text" itemprop="text">
<p>I am running a code that has always worked for me. This time I ran it on 2 .csv files: "data" (24 MB) and "data1" (475 MB). "data" has 3 columns of about 680000 elements each, whereas "data1" has 3 columns of 33000000 elements each. When I run the code, I get just "Killed: 9" after some 5 minutes of processing. If this is a memory problem, how to solve it?. Any suggestion is welcome !</p>
<p>This is the code:</p>
<pre><code>import csv
import numpy as np

from collections import OrderedDict # to save keys order

from numpy import genfromtxt
my_data = genfromtxt('data.csv', dtype='S', 
                 delimiter=',', skip_header=1) 
my_data1 = genfromtxt('data1.csv', dtype='S', 
                 delimiter=',', skip_header=1) 

d= OrderedDict((rows[2],rows[1]) for rows in my_data)
d1= dict((rows[0],rows[1]) for rows in my_data1) 

dset = set(d) # returns keys
d1set = set(d1)

d_match = dset.intersection(d1) # returns matched keys

import sys  
sys.stdout = open("rs_pos_ref_alt.csv", "w") 

for row in my_data:
    if row[2] in d_match: 
        print [row[1], row[2]]
</code></pre>
<p>The header of "data" is:</p>
<pre><code>    dbSNP RS ID Physical Position
0   rs4147951   66943738
1   rs2022235   14326088
2   rs6425720   31709555
3   rs12997193  106584554
4   rs9933410   82323721
5   rs7142489   35532970
</code></pre>
<p>The header of "data1" is:</p>
<pre><code>    V2  V4  V5
10468   TC  T
10491   CC  C
10518   TG  T
10532   AG  A
10582   TG  T
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most likely kernel kills it because your script consumes too much of memory.
You need to take different approach and try to minimize size of data in memory. </p>
<p>You may also find this question useful: <a href="https://stackoverflow.com/questions/1053928/very-large-matrices-using-python-and-numpy">Very large matrices using Python and NumPy</a></p>
<p>In the following code snippet I tried to avoid loading huge <code>data1.csv</code> into memory by processing it line-by-line. Give it a try.</p>
<pre class="lang-python prettyprint-override"><code>import csv

from collections import OrderedDict # to save keys order

with open('data.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    next(reader) #skip header
    d = OrderedDict((rows[2], {"val": rows[1], "flag": False}) for rows in reader)

with open('data1.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    next(reader) #skip header
    for rows in reader:
        if rows[0] in d:
            d[rows[0]]["flag"] = True

import sys
sys.stdout = open("rs_pos_ref_alt.csv", "w")

for k, v in d.iteritems():
    if v["flag"]:
        print [v["val"], k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off, create a python script and run the following code to find all Python processes.</p>
<pre><code>import subprocess

wmic_cmd = """wmic process where "name='python.exe' or name='pythonw.exe'" get commandline,processid"""
wmic_prc = subprocess.Popen(wmic_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
wmic_out, wmic_err = wmic_prc.communicate()
pythons = [item.rsplit(None, 1) for item in wmic_out.splitlines() if item][1:]
pythons = [[cmdline, int(pid)] for [cmdline, pid] in pythons]
for line in pythons:
    cv = str(line).split('\\')
    cb=str(cv).strip('"')
    fin = cv[-1]
    if fin[0:11] != 'pythonw.exe':
        print 'pythonw.exe', fin
    if fin[0:11] != 'python.exe':
        print "'python.exe'", fin
</code></pre>
<p>After you have run it, paste the output, here in the questions section, where I will see a notification.</p>
<p>*EDIT</p>
<p>List all process and post them in your answer, use the following:</p>
<pre><code>import psutil
for process in psutil.process_iter():
    print process
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How much memory does your computer have?</p>
<p>You can add a couple of optimizations that will save some memory, and if that's not enough, you can trade-off some CPU and IO for better memory efficiency.</p>
<p>If you're only comparing the keys and don't really do anything with the values, you can extract only the keys:</p>
<pre><code>d1 = set([rows[0] for rows in my_data1])
</code></pre>
<p>Then instead of OrderedDict, you can try using ordered set either from this answer -- <a href="https://stackoverflow.com/a/1653974/86294">Does python has ordered set</a> or using <a href="https://pypi.python.org/pypi/ordered-set" rel="nofollow noreferrer">ordered-set</a> 
module from pypi.</p>
<p>Once you got all the intersecting keys, you can write another program that looks up all the matching values from source csv.</p>
<p>If these optimizations aren't enough, you can extract all the keys from the bigger set, save them into a file, then load keys one-by-one from the file using <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generators</a> so the program you will only keep one set of keys plus one key instead of two sets.</p>
<p>Also I'd suggest using <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">python pickle</a> module for storing intermediate results.</p>
</div>
<span class="comment-copy">Do you run this on your own computer or on some server? In case it runs on a server, maybe there's some script monitoring for processes that are"running amok", calling <code>kill -9</code> on them after some time.</span>
<span class="comment-copy">Hi @tobias_k, I run it on my own laptop</span>
<span class="comment-copy">How do you "get" `Killed: 9"? In the standard output, or in an exception message?</span>
<span class="comment-copy">Hi @D.Everhard, in the standard output: Lucass-MacBook-Air:txt.long lucas$ python match_pos_snp.py Killed: 9</span>
<span class="comment-copy">Thank you @ajsp, I run your code but I don't see any output, at least not in the terminal. The script seems to run fine though.</span>
<span class="comment-copy">There is process somewhere running -9 kill, if you find it you have found your culprit. Were you working on any other code recently? Did you write a script somewhere along the line that kills a PID number?</span>
<span class="comment-copy">See edit and get back to me.</span>
<span class="comment-copy">Post the processes in your original answer!</span>
