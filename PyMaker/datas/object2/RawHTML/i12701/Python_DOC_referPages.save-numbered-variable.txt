<div class="post-text" itemprop="text">
<p>I want to save my list to numbered variable.</p>
<pre><code>myList =[1,2,3,4,5]
</code></pre>
<p>and I want save be like this :</p>
<pre><code>numb1 = myList[1]
numb2 = myList[2]
numb3 = myList[3]
numb4 = myList[4]
numb5 = myList[5]
</code></pre>
<p>I don't want do it manually, because myList contains many elements.
Can you give me suggestion?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply do this via <a href="http://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code></a>:</p>
<pre><code>&gt;&gt;&gt; myList =[1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; for index, value in enumerate(myList, start=1):
...     globals()['numb'+str(index)] = value
...     
... 
&gt;&gt;&gt; numb1
1
&gt;&gt;&gt; numb2
2
&gt;&gt;&gt; numb3
3
&gt;&gt;&gt; numb10
10
&gt;&gt;&gt; 
</code></pre>
<p>But I'd recommend use another dict instead of <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow"><code>globals()</code></a>:</p>
<pre><code>&gt;&gt;&gt; myList =[1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for index, value in enumerate(myList, start=1):
...     d['numb'+str(index)] = value
...     
... 
&gt;&gt;&gt; d['numb1']
1
&gt;&gt;&gt; d['numb2']
2
&gt;&gt;&gt; d['numb10']
10
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a> in which problem X (i.e., referring to elements in a <code>list</code>) is much easier than problem Y (i.e., creating a series of numbered variables corresponding to elements in a <code>list</code>). On top of that, doing this would defeat the entire purpose of using a <code>list</code>. It doesn't take too long to hard-code it for the five elements you showed, but the <code>list</code> with "many elements" you mention should <em>not</em> be given this treatment.</p>
<p>A <code>list</code> holds several objects, generally of a homogeneous type and purpose, like inches of rainfall on each day of the year. This data structure makes it easy to store and process all of these objects together. You can also refer to them individually, by indexing.</p>
<p>Where you are hoping to refer to the first element of <code>myList</code> as <code>numb1</code>, use instead <code>myList[0]</code>. That is the reference that you already have for that object. You do <em>not</em> need to pollute the namespace with a pile of numbered references. The <code>list</code> type is intended precisely for this situation. Please use a <code>list</code>.</p>
</div>
<span class="comment-copy">One problem you'll have is that Python list indexing begins at 0, not 1.  So in your example, you are ignoring the first element, <code>myList[0]</code>, and you'll get an index out-of-range error when attempting to access <code>mylist[5]</code>, which doesn't exist.</span>
<span class="comment-copy">"I want to save my list to numbered variable." This defeats the <i>entire purpose</i> of the <code>list</code> type.</span>
<span class="comment-copy">I can't even close this as a duplicate of <a href="http://stackoverflow.com/questions/1373164/how-do-i-do-variable-variables-in-python">"variable variables"</a> because at least that one wanted to use heterogeneous names. This, however, is just a fake <code>list</code>. There is no reason to do any of this. Use a <code>list</code>.</span>
<span class="comment-copy">Of course there's still the question of whether d['numb10'] has any advantage over myList[9].</span>
<span class="comment-copy">@JayanthKoushik: I think that's an OP's typo, however <code>numb5 = myList[5]</code> raise an error in this case as Tom said in comments. I'm sure that OP wants <code>numb5 = myList[4]</code> which gives <code>numb5 == 5</code>. Also <code>numb1 = myList[0]</code> which gives <code>numb1 == 1</code>.</span>
<span class="comment-copy">@JayanthKoushik - Indeed, there is no advantage to doing that. There are only disadvantages. Referring to a series of homogeneous objects is the whole point of a <code>list</code>.</span>
<span class="comment-copy">Using <code>globals()</code> to create a series of numbered references in a horrifying mimicry of a <code>list</code> is generally a good indicator that something is very wrong.</span>
<span class="comment-copy">@TigerhawkT3: I'd say so, so if OP really want to <code>'numb1'</code> to get <code>myList[1]</code>, then use another dict instead of <code>globals()</code> as I said in answer.</span>
