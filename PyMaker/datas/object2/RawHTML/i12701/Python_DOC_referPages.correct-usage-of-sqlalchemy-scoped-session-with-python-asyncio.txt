<div class="post-text" itemprop="text">
<p>I'm building an app using asyncio. I will be using sqlalchemy as the orm.
From what i understand scoped_session associates a session with a thread so they don't with each other's operations.
Now since asyncio works on a single thread and I believe scoped_session will not work correctly which will cause problems.
What would be the correct way to use sqlalchemy sessions with asyncio?</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer depends on your code.</p>
<p>In general you can use <a href="http://docs.sqlalchemy.org/en/rel_1_0/orm/session_api.html?highlight=sessionmaker#sqlalchemy.orm.session.sessionmaker" rel="nofollow">sessionmaker</a> for creating session factory and using it on your own.</p>
<p>If your code has implicit context you may use <code>scoped_session</code> with custom <code>scopefunc</code> as shown in <a href="http://docs.sqlalchemy.org/en/rel_1_0/orm/contextual.html?highlight=scoped_session#using-custom-created-scopes" rel="nofollow">example</a>.</p>
<p>Implicit context may utilize <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.current_task" rel="nofollow">asyncio.Task.current_task()</a> call but you need to find a way for scoped session destruction also.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you can use sqlalchemy with asyncio. The SQL Alchemy API is all blocking and incompatible with asyncio. <a href="http://techspot.zzzeek.org/2015/02/15/asynchronous-python-and-databases/" rel="nofollow">http://techspot.zzzeek.org/2015/02/15/asynchronous-python-and-databases/</a></p>
<p>You <em>can</em> use SQL Alchemy asynchronously with <a href="http://www.gevent.org/" rel="nofollow">gevent</a> though, as long as you can find a gevent-compatible driver for your database. And gevent greenlents map nicely to <code>scoped_session</code>.</p>
<p>EDIT: actually, it looks like you <em>can</em> use SQL Alchemy with asyncio as long as you can find an asyncio-compatible driver for your database, such as <a href="https://github.com/aio-libs/aiopg" rel="nofollow">https://github.com/aio-libs/aiopg</a> . As for <code>scoped_session</code>, use <code>current_task</code> and destroy it on your web framework's request end.</p>
</div>
<span class="comment-copy">What is the default behaviour for scoped_session destruction? Does it get destroyed when the thread is closed? Wouldn't it also in that case destroy when the task is finished?</span>
<span class="comment-copy"><code>scoped_session</code> has no destructor, sorry. That's why you need signal subscription in the example above.</span>
<span class="comment-copy">What kind of signal subscription do I need to provide in the <code>scopefunc</code> parameter of the scoped_session function, if I am using the <code>aiohttp</code> framework? @AndrewSvetlov</span>
<span class="comment-copy">I'm not looking to make sqlalchemy async. What I want to do is keep the tasks from using the same session at the same time i.e. The tasks should not be sharing sessions.</span>
