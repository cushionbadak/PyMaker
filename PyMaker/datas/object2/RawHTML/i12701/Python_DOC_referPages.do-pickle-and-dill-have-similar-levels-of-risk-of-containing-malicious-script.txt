<div class="post-text" itemprop="text">
<p>Dill is obviously a very useful module, and it seems as long as you manage the files carefully it is relatively safe. But I was put off by the statement:</p>
<blockquote>
<p>Thus dill is not intended to be secure against erroneously or maliciously constructed data. It is left to the user to decide whether the data they unpickle is from a trustworthy source.</p>
</blockquote>
<p>I read in in <a href="https://pypi.python.org/pypi/dill" rel="nofollow">https://pypi.python.org/pypi/dill</a>. It's left to the user to decide how to manage their files. </p>
<p>If I understand correctly, once it has been pickled by dill, you can not <em>easily</em> find out what the original script will do without some special skill.</p>
<p>MY QUESTION IS: although I don't see a warning, <strong>does a similar situation also exist for pickle?</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>Dill is built on top of pickle, and the warnings apply just as much to pickle as they do to dill.</p>
<p>Pickle uses a <em>stack language</em> to effectively execute arbitrary Python code. An attacker can sneak in instructions to open up a backport to your machine, for example. Don't ever use pickled data from untrusted sources.</p>
<p>The <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">documentation</a> includes an explicit warning:</p>
<blockquote>
<p><strong>Warning</strong>: The <code>pickle</code> module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strong>Yes</strong>
<p>
Because Pickle allows you to override the object serialization and deserialization, via</p>
<pre><code>object.__getstate__()
</code></pre>
<blockquote>
<p>Classes can further influence how their instances are pickled; if the
  class defines the method <code>__getstate__()</code>, it is called and the returned
  object is pickled as the contents for the instance, instead of the
  contents of the instance’s dictionary. If the <code>__getstate__()</code> method is
  absent, the instance’s <code>__dict__</code> is pickled as usual.</p>
</blockquote>
<pre><code>object.__setstate__(state)
</code></pre>
<blockquote>
<p>Upon unpickling, if the class defines <code>__setstate__()</code>, it is called
  with the unpickled state. In that case, there is no requirement for
  the state object to be a dictionary. Otherwise, the pickled state must
  be a dictionary and its items are assigned to the new instance’s
  dictionary.</p>
</blockquote>
<p>Because these functions can execute arbitrary code at the user's permission level, it is relatively easy to write a malicious deserializer -- e.g. one that deletes all the files on your hard disk.</p>
</p></div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Although I don't see a warning, does a similar situation also exist for pickle? </p>
</blockquote>
<p>Always, <strong>always</strong> assume that just because someone doesn't state it's dangerous it is <strong>not</strong> safe to use something.</p>
<p>That being said, <a href="https://docs.python.org/2/library/pickle.html" rel="nofollow">Pickle docs</a> do say the same:</p>
<blockquote>
<p><strong>Warning</strong> The <code>pickle</code> module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source. </p>
</blockquote>
<p>So yes, that security risk exists on pickle, too.</p>
<p>To explain the background: pickle and dill restore the state of python objects. In CPython, the default python implementation, this means restoring <code>PyObjects</code> structs, which contain a length field. Modification of that, as an example, leads to funky effects and might have arbitrary effects on your python process' memory.</p>
<p>By the way, even assuming that data is not malicious doesn't mean you can un-pickle or un-dill just about anything that comes e.g. from a different python version. So, to me, that question is a bit of theoretical one: If you need portable objects, you will have to implement a rock-solid serialization/deserialization mechanism that transports the data you need transported, and nothing more or less.</p>
</div>
<span class="comment-copy">I'm the <code>dill</code> author.  you don't need special skills.  You can always inspect the pickle byte code instructions with <code>pickleutils.dis</code>.  That will tell you what's in the code.  It's not going to completely protect you, but you can see if there's some unexpected easter egg inside your object if there are unexpected instructions.  But, yes, only unpickle from trusted sources.</span>
<span class="comment-copy">OK, well reading byte code is a <i>teeny bit</i> special, but doing it is probably a good exercise anyway. Thanks for the clarification, that's very helpful!</span>
<span class="comment-copy">I see. So it could contain python with unintended consequences, python with malicious intent, or malicious instructions added after the pickling?</span>
<span class="comment-copy">@uhoh: Exactly. Don't ever unpickle data that could have been tampered with.</span>
<span class="comment-copy">There are three good answers here - I'm accepting this one on conciseness but <b>I recommend the reader to read the other answers also.</b></span>
<span class="comment-copy">Thanks @gbronner, this is helpful! I can see where to start reading now to dig further into serialization - something I was blissfully ignorant of yesterday!</span>
<span class="comment-copy">The <code>__setstate__</code> method isn't actually pickled, only the data that'll be passed to it and a <i>string</i> reference on how to load that method. You don't need those methods at all to produce a malicious pickle, see <a href="https://www.cs.uic.edu/~s/musings/pickle.html" rel="nofollow noreferrer">cs.uic.edu/~s/musings/pickle.html</a> for examples.</span>
<span class="comment-copy">But to summarise, that blog post uses the <code>marshall</code> module to load fully-formed code objects (functions) from a pickle. It is the ability to re-purpose <i>any existing Python module</i> that makes pickle so powerful, not necessarily the ability for classes to influence how they are pickled and restored.</span>
<span class="comment-copy">Yes indeed it is right there at the top highlighted, and I must have scrolled right past it more than once, on my way to the following subsections. So are more, potentially dangerous  things possible, like os operations intended as file cleanup also having unintended consequences?</span>
<span class="comment-copy">arbitrary code execution, which means <i>arbitrary</i> code execution within your executing user's privileges.</span>
<span class="comment-copy">I see, yikes! Thanks!</span>
