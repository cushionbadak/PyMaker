<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/533905/get-the-cartesian-product-of-a-series-of-lists">Get the cartesian product of a series of lists?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I'm new to Python and I wrote a function:</p>
<pre><code>def f(x, y, z):
    ret = []
    for i in range(x):
        for j in range(y):
            for k in range(z):
                ret.append((i, j, k))
    return ret


print f(2, 3, 4)
</code></pre>
<p>Output:</p>
<pre><code>[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3)]
</code></pre>
<p>But I'm not satisfied with that because I think there must be a shorter implementation.</p>
<p>So could any one give me some hint about that? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> because that is essentially what you are after, the <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow noreferrer">Cartesian product</a></p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product(range(2), range(3), range(4)))
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3)]
</code></pre>
<p>So replacing your existing function you could do</p>
<pre><code>def f(x, y, z):
    return list(product(range(x), range(y), range(z)))
</code></pre>
<p>To remove the number of times you have to type out <code>range</code>, you could accept a single list argument then use a generator expression such as</p>
<pre><code>def f(l):
    return list(product(*(range(i) for i in l)))
</code></pre>
<p>So then you could call it as</p>
<pre><code>&gt;&gt;&gt; f([2,3,4])
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow"><code>list comprehension</code> </a></p>
<pre><code> &gt;&gt;&gt; [(i, j, k) for i in range(2) for j in range(3) for k in range(4)]
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3)]
</code></pre>
<p>You you can write the function like:</p>
<pre><code>def f(x, y, z):
    return [(i, j, k) for i in range(x) for j in range(y) for k in range(z)]
</code></pre>
</div>
<span class="comment-copy">Well, if your code works and you want to improve it, <a href="https://codereview.stackexchange.com/">Code Reviews SE</a> would be a better place for your question. Check what's on-topic questions here and there for more details.</span>
<span class="comment-copy">wow, I had never thought there is such a cool function in python!</span>
<span class="comment-copy">@CoryKarmer the best answer.. ..Awesome</span>
<span class="comment-copy">I find <code>print list(product(range(2), range(2), range(2), range(2)))</code> is correct, but I want to eliminate the repeat <code>range(2)</code>, so I come to <code>print list(product([range(2)] * 4))</code> which output is wrong. Is there any way to eliminate repeat <code>range(2)</code> here?</span>
<span class="comment-copy">itertools is where the cool stuff happens in python :)</span>
<span class="comment-copy">@Sayakiss See my edit, you could modify your function to take a single list argument, will that more flexible for you?</span>
