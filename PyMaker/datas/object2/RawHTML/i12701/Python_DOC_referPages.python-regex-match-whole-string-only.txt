<div class="post-text" itemprop="text">
<p>Is there any easy way to test whether a regex matches an entire string in Python? I thought that putting <code>$</code> at the end would do this, but it turns out that <code>$</code> doesn't work in the case of trailing newlines.</p>
<p>For example, the following returns a match, even though that's not what I want.</p>
<pre><code>re.match(r'\w+$', 'foo\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>\Z</code>:</p>
<p><strong><code>\Z</code></strong></p>
<blockquote>
<p>Matches only at the end of the string.</p>
</blockquote>
<pre><code>In [5]: re.match(r'\w+\Z', 'foo\n')

In [6]: re.match(r'\w+\Z', 'foo')
Out[6]: &lt;_sre.SRE_Match object; span=(0, 3), match='foo'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a negative lookahead assertion to require that the <code>$</code> is not followed by a trailing newline:</p>
<pre><code>&gt;&gt;&gt; re.match(r'\w+$(?!\n)', 'foo\n')
&gt;&gt;&gt; re.match(r'\w+$(?!\n)', 'foo')
&lt;_sre.SRE_Match object; span=(0, 3), match='foo'&gt;
</code></pre>
<p><code>re.MULTILINE</code> is not relevant here; OP has it turned off and the regex is still matching.  The problem is that <code>$</code> <em>always</em> matches <a href="https://docs.python.org/3/library/re.html#re.M" rel="nofollow">right before the trailing newline</a>:</p>
<blockquote>
<p>When [<code>re.MULTILINE</code> is] specified, the pattern character <code>'^'</code> matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character <code>'$'</code> matches at the end of the string and at the end of each line (immediately preceding each newline). By default, <code>'^'</code> matches only at the beginning of the string, and <code>'$'</code> only at the end of the string and <strong>immediately before the newline (if any) at the end of the string.</strong></p>
</blockquote>
<p>I have experimentally verified that this works correctly with <a href="https://docs.python.org/3/library/re.html#re.X" rel="nofollow"><code>re.X</code></a> enabled.</p>
</div>
<div class="post-text" itemprop="text">
<p>To test whether you matched the entire string, just check if the matched string is as long as the entire string:</p>
<pre><code>m = re.match(r".*", mystring)
start, stop = m.span()
if stop-start == len(mystring):
    print("The entire string matched")
</code></pre>
<p>Note: This is independent of the question (which you didn't ask) of how to match a trailing newline. </p>
</div>
<div class="post-text" itemprop="text">
<p>Based on @alexis answer:
A method to check for a fullMatch could look like this:</p>
<pre><code>def fullMatch(matchObject, fullString):
    if matchObject is None:
        return False
    start, stop = matchObject.span()
    return stop-start == len(fullString):
</code></pre>
<p>Where the <code>fullString</code> is the String on which you apply the regex and the <code>matchObject</code> is the result of <code>matchObject = re.match(yourRegex, fullString)</code></p>
</div>
<span class="comment-copy">The defacto standard is <code>\A&lt;your regex&gt;\z</code> Supercedes all modes, etc..</span>
<span class="comment-copy">Arguably a better answer than mine, since this is what <code>\Z</code> is <i>for</i>.</span>
<span class="comment-copy">You've started to test my patience <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">docs.python.org/3/library/re.html#regular-expression-syntax</a></span>
<span class="comment-copy">@BhargavRao, there is no direct link to the <code>\Z</code> so I just stole  the line from the docs,  what's in my answer is pretty much it.</span>
<span class="comment-copy">Argh, you don't need direct link. It comes under the expression syntax. So you can add the link and mention that it is at the end. :P</span>
<span class="comment-copy">@BhargavRao, I think that may well be the least stimulating  piece of documentation in the world!</span>
<span class="comment-copy">Yup, deleted my answer. Misunderstood the OP's goal.</span>
<span class="comment-copy">I think there is an error in the code. I guess <code>len(mystring)</code>  is enough. Subtracting <code>-1</code> seems not to  be correct</span>
<span class="comment-copy">You are right, thanks for catching that. Fixed now.</span>
