<div class="post-text" itemprop="text">
<p>I was trying to remove unwanted characters from a given string using <code>text.translate()</code> in Python 3.4.</p>
<p>The minimal code is:</p>
<pre><code>import sys 
s = 'abcde12345@#@$#%$'
mapper = dict.fromkeys(i for i in range(sys.maxunicode) if chr(i) in '@#$')
print(s.translate(mapper))
</code></pre>
<p>It works as expected. However the same program when executed in Python 3.4 and Python 3.5 gives a large difference.</p>
<p>The code to calculate timings is</p>
<pre><code>python3 -m timeit -s "import sys;s = 'abcde12345@#@$#%$'*1000 ; mapper = dict.fromkeys(i for i in range(sys.maxunicode) if chr(i) in '@#$'); "   "s.translate(mapper)"
</code></pre>
<p>The Python 3.4 program takes <strong><em>1.3ms</em></strong> whereas the same program in Python 3.5 takes only <strong><em>26.4μs</em></strong>. </p>
<p>What has improved in Python 3.5 that makes it faster compared to Python 3.4?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR - <a href="http://bugs.python.org/issue21118" rel="noreferrer">ISSUE 21118</a></strong></p>
<hr/>
<p><strong>The long Story</strong></p>
<p>Josh Rosenberg found out that the <code>str.translate()</code> function is very slow compared to the <code>bytes.translate</code>, he raised an <a href="http://bugs.python.org/issue21118" rel="noreferrer">issue</a>, stating that:</p>
<blockquote>
<p>In Python 3, <code>str.translate()</code> is usually a performance pessimization, not optimization.</p>
</blockquote>
<h3>Why was <code>str.translate()</code> slow?</h3>
<p>The main reason for <code>str.translate()</code> to be very slow was that the lookup used to be in a Python dictionary.</p>
<p>The usage of <code>maketrans</code> made this problem worse. The similar approach using <a href="https://docs.python.org/3/library/functions.html#bytes" rel="noreferrer"><code>bytes</code></a> builds a C array of 256 items to fast table lookup. Hence the usage of higher level Python <code>dict</code> makes the <code>str.translate()</code> in Python 3.4 very slow.</p>
<h3>What happened now?</h3>
<p>The first approach was to add a small patch, <a href="http://bugs.python.org/file34691/translate_writer.patch" rel="noreferrer">translate_writer</a>, However the speed increase was not that pleasing. Soon another patch <a href="http://bugs.python.org/file34731/fast_translate.patch" rel="noreferrer">fast_translate</a> was tested and it yielded very nice results of up to 55% speedup.</p>
<p>The main change as can be seen from the file is that the Python dictionary lookup is changed into a C level lookup.</p>
<p>The speeds now are almost the same as <code>bytes</code></p>
<pre><code>                                unpatched           patched

str.translate                   4.55125927699919    0.7898181750006188
str.translate from bytes trans  1.8910855210015143  0.779950579000797
</code></pre>
<hr/>
<p>A small note here is that the performance enhancement is only prominent in ASCII strings. </p>
<p>As J.F.Sebastian mentions in a <a href="https://stackoverflow.com/questions/34287893/why-is-str-translate-so-fast-in-python-3-5-compared-to-python-3-4-1/34287999?noredirect=1#comment56339043_34287999">comment</a> below, Before 3.5, translate used to work in the same way for both ASCII and non-ASCII cases. However from 3.5  ASCII case is much faster. </p>
<p>Earlier ASCII vs non-ascii used to be almost same, however now we can see a great change in the performance. </p>
<p>It can be an improvement from 71.6μs to 2.33μs as seen in this <a href="https://stackoverflow.com/questions/29998052/deleting-consonants-from-a-string-in-python/29998062#29998062">answer</a>.</p>
<p>The following code demonstrates this </p>
<pre><code>python3.5 -m timeit -s "text = 'mJssissippi'*100; d=dict(J='i')" "text.translate(d)"
100000 loops, best of 3: 2.3 usec per loop
python3.5 -m timeit -s "text = 'm\U0001F602ssissippi'*100; d={'\U0001F602': 'i'}" "text.translate(d)"
10000 loops, best of 3: 117 usec per loop

python3 -m timeit -s "text = 'm\U0001F602ssissippi'*100; d={'\U0001F602': 'i'}" "text.translate(d)"
10000 loops, best of 3: 91.2 usec per loop
python3 -m timeit -s "text = 'mJssissippi'*100; d=dict(J='i')" "text.translate(d)"
10000 loops, best of 3: 101 usec per loop
</code></pre>
<p>Tabulation of the results:</p>
<pre><code>         Python 3.4    Python 3.5  
Ascii     91.2          2.3 
Unicode   101           117
</code></pre>
</div>
<span class="comment-copy">While we're talking about performance, wouldn't it be better to generate your mapper like this: <code>dict.fromkeys(ord(c) for c in '@#$')</code>?</span>
<span class="comment-copy">@ThomasK I found out that this made a significant difference. Yep your way is better.</span>
<span class="comment-copy">Did you mean 50x faster?</span>
<span class="comment-copy">@assylias I did 1300 - 26.4 and then divided by 1300. I got nearly 95%, so I wrote :) It is actually more than 50x faster... But is my calculation wrong? I'm bit weak in math. I'll learn math soon. :)</span>
<span class="comment-copy">you should do it the way round: 26 / 1300 = 2% so the faster version takes only 2% of the time taken by the slower version =&gt; it is 50x faster.</span>
<span class="comment-copy">This is one of the commits: <a href="https://github.com/python/cpython/commit/87056cb061ede3c30952c43970b41cafa112d3bf" rel="nofollow noreferrer">github.com/python/cpython/commit/…</a></span>
<span class="comment-copy">note: ascii vs. non-ascii case may differ significantly in performance. It is not about <code>55</code>%: as <a href="http://stackoverflow.com/a/29998062/4279">your answer shows, the speed up can be <code>1000</code>s%</a>.</span>
<span class="comment-copy">compare: <code>python3.5 -m timeit -s "text = 'mJssissippi'*100; d=dict(J='i')" "text.translate(d)"</code> (ascii) vs. <code>python3.5 -m timeit -s "text = 'm\U0001F602ssissippi'*100; d={'\U0001F602': 'i'}" "text.translate(d)"</code> (non-ascii). The latter is much (10x) slower.</span>
<span class="comment-copy">@J.F. Oh, I understood it now. I ran your code for both 3.4 and 3.5. I am getting Py3.4 faster for non-ascii stuff. Is it by coincidence? The results <a href="http://dpaste.com/15FKSDQ" rel="nofollow noreferrer">dpaste.com/15FKSDQ</a></span>
<span class="comment-copy">Before 3.5, both ascii and non-ascii cases are probably the same for Unicode <code>.translate()</code> i.e.,  ascii case is much faster in Python 3.5 only (you don't need <code>bytes.translate()</code> for performance there).</span>
