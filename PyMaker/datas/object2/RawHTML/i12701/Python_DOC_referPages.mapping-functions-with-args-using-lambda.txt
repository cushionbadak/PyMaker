<div class="post-text" itemprop="text">
<p>Okay this one is confusing. My old piece of code has something like </p>
<pre><code>map(lambda x:x.func1(arg1), other_args_to_be_mapped)
</code></pre>
<p>now I would like to make <code>arg1</code> -&gt; <code>*args</code></p>
<p>while <code>other_args_to_be_mapped</code> stays unchanged.</p>
<p>in <code>func1</code>, the length of arguments will be checked different operations. My questions are</p>
<p>1) which length will be checked? <code>arg1</code> or <code>other_args_to_be_mapped</code></p>
<p>2) in <code>func1</code>, how should I set up the default? It was like</p>
<pre><code>def func1(arg1=something)
</code></pre>
<p>but now with potential multiple arguments, I don't know what to do with the initialization. I want to be able to do something like </p>
<pre><code>def func1(args*=something, something_else)
</code></pre>
<p>Is that even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question correctly, you're looking for <a href="https://stackoverflow.com/questions/919680/can-a-variable-number-of-arguments-be-passed-to-a-function">variable arguments</a>. These can be mixed with fixed arguments, provided you obey a logical ordering (fixed arguments first, then keyword arguments or variable arguments).</p>
<p>For example, the following shows how map to a function that takes in one constant argument and one variable argument. If you would like different behaviour, please provide a concrete example of what you are trying to accomplish</p>
<pre><code>import random

class Foo:

    def get_variable_parameters(self):
        return [1] if random.random() &gt; .5 else [1,2]

    def foo( self, arg, *args ):

        print("Doing stuff with constant arg", arg)

        if len(args) == 1:
            print("Good",args)
        else:
            print("Bad",args)

list(map( lambda x : x.foo( 'Static Argument', *x.get_variable_parameters()), [Foo(),Foo(),Foo()] ))
</code></pre>
<p>We don't know how many arguments are going to be passed to <code>foo</code> (in this trivial case, it's one or two), but the "*" notation accepts any number of objects to be passed</p>
<p>Note I've encapsulated <code>map</code> in <code>list</code> so that it gets evaluated, as in python3 it is a generator. <a href="https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map">List comprehension</a> may be more idiomatic in python. Also don't forget you can always use a simple for loop - an obfuscated or complex <code>map</code> call is far less pythonic than a clear (but several line) for-loop, imo.</p>
<p>If, rather, you're trying to combine multiple arguments in a map call, I would recommend using the same variable argument strategy with the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> function, e.g.,</p>
<pre><code>def foo(a,*b): ...
map(lambda x : foo(x[0],*x[1]), zip(['a','b'],[ [1], [1,2] ]))
</code></pre>
<p>In this case, <code>foo</code> will get called first as <code>foo('a',1)</code>, and then as <code>foo('b',2,3)</code></p>
</div>
<span class="comment-copy">I don't understand what you're asking. "arg1-&gt;*args" what does that mean? Could you provide a <b>concrete example</b> of what you have and what you want it to do?</span>
<span class="comment-copy">It's simply changing <code>arg1</code> (which is a single arg) to <code>*args</code> (which can be one or multiple arguments based on inputs)</span>
<span class="comment-copy">Can you provide a concrete example of what you're trying to do. Something I can plug into a script and run. <a href="http://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">sorry but I can't provide the code as it's part of something else and I don't think I have permission to do it. I'll think about how I can make it more clear though. Thanks for your answer</span>
<span class="comment-copy">You don't have to provide your production code, just create a minimal working example of what you're trying to accomplish</span>
