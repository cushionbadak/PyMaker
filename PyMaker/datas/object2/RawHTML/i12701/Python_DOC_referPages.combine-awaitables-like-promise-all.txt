<div class="post-text" itemprop="text">
<p>In asynchronous JavaScript, it is easy to run tasks in parallel and wait for all of them to complete using <code>Promise.all</code>:</p>
<pre><code>async function bar(i) {
  console.log('started', i);
  await delay(1000);
  console.log('finished', i);
}

async function foo() {
    await Promise.all([bar(1), bar(2)]);
}

// This works too:
async function my_all(promises) {
    for (let p of promises) await p;
}

async function foo() {
    await my_all([bar(1), bar(2), bar(3)]);
}
</code></pre>
<p>I tried to rewrite the latter in python:</p>
<pre><code>import asyncio

async def bar(i):
  print('started', i)
  await asyncio.sleep(1)
  print('finished', i)

async def aio_all(seq):
  for f in seq:
    await f

async def main():
  await aio_all([bar(i) for i in range(10)])

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
loop.close()
</code></pre>
<p>But it executes my tasks sequentially.</p>
<p>What is the simplest way to await multiple awaitables?
Why doesn't my approach work?</p>
</div>
<div class="post-text" itemprop="text">
<p>The equivalent would be using <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="noreferrer"><code>asyncio.wait</code></a>:</p>
<pre><code>import asyncio

async def bar(i):
  print('started', i)
  await asyncio.sleep(1)
  print('finished', i)

async def main():
  await asyncio.wait([bar(i) for i in range(10)])

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
loop.close()
</code></pre>
<blockquote>
<p>Why doesn't my approach work?</p>
</blockquote>
<p>Because when you <code>await</code> each item in <code>seq</code>, you block that coroutine. So in essence, you have synchronous code masquerading as async. If you really <em>wanted</em> to, you could implement your own version of <code>asyncio.wait</code> using <code>loop.create_task</code> or <code>asyncio.ensure_future</code>.</p>
<p><strong>EDIT</strong></p>
<p>As Andrew mentioned, you can also use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="noreferrer"><code>asyncio.gather</code></a>.</p>
</div>
<span class="comment-copy">please mention asyncio.gather too</span>
<span class="comment-copy">Is the main difference between <code>wait</code> and <code>gather</code> that <code>wait</code> allows a <code>timeout</code> argument?</span>
