<div class="post-text" itemprop="text">
<p>I have some strings to be concatenate and the resultant string will be quite long. I also have some variables to be concatenated.</p>
<p>How can I combine both strings and variables so the result would be a multi line string?</p>
<p>The following code throws error.</p>
<pre><code>str = "This is a line" +
       str1 +
       "This is line 2" +
       str2 +
       "This is line 3" ;
</code></pre>
<p>I have tried this too</p>
<pre><code>str = "This is a line" \
      str1 \
      "This is line 2" \
      str2 \
      "This is line 3" ;
</code></pre>
<p>Please suggest a way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways. A simple solution is to add parenthesis:</p>
<pre><code>strz = ("This is a line" +
       str1 +
       "This is line 2" +
       str2 +
       "This is line 3")
</code></pre>
<p>If you want each "line" on a separate line you can add newline characters:</p>
<pre><code>strz = ("This is a line\n" +
       str1 + "\n" +
       "This is line 2\n" +
       str2 + "\n" +
       "This is line 3\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python isn't php and you have no need to put <code>$</code> before a variable name.</p>
<pre><code>a_str = """This is a line
       {str1}
       This is line 2
       {str2}
       This is line 3""".format(str1="blabla", str2="blablabla2")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Python 3: Formatted Strings</h1>
<p>As of <strong>Python 3.6</strong> you can use so called "formatted strings" (or "f strings") to easily insert variables into your strings. Just add an <code>f</code> in front of the string and write the variable inside curly braces (<code>{}</code>) like so:</p>
<pre><code>&gt;&gt;&gt; name = "John Doe"
&gt;&gt;&gt; f"Hello {name}"
'Hello John Doe'
</code></pre>
<p>To split a long string to multiple lines surround the parts with <strong>parentheses</strong> (<code>()</code>) or use a <strong>multi-line string</strong> (a string surrounded by three quotes <code>"""</code> or <code>'''</code> instead of one).</p>
<h3>1. Parentheses</h3>
<p>With parentheses around your strings you can even concatenate them without the need of a <code>+</code> sign in between:</p>
<pre><code>a_str = (f"This is a line \n{str1}\n"
         f"This is line 2 \n{str2}\n"
         "This is line 3") # no variable here, so no leading f
</code></pre>
<p><strong>Good to know:</strong> If there is no variable in a line, there is no need for a leading <code>f</code> for that line.</p>
<p><strong>Good to know:</strong> You could archive the same result with backslashes (<code>\</code>) at the end of each line instead of surrounding parentheses but accordingly to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a> you should prefer parentheses for line continuation:</p>
<blockquote>
<p>Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation.</p>
</blockquote>
<h3>2. Multi-Line String</h3>
<p>In multi-line strings you don't need to explicitly insert <code>\n</code>, Python takes care of that for you:</p>
<pre><code>a_str = f"""This is a line
        {str1}
        This is line 2
        {str2}
        This is line 3"""
</code></pre>
<p><strong>Good to know:</strong> Just make sure you align your code correctly otherwise you will have leading white space in front each line.</p>
<hr/>
<p><strong>By the way:</strong> you shouldn't call your variable <code>str</code> because that's the name of the datatype itself.</p>
<p><strong>Sources for formatted strings:</strong></p>
<ul>
<li><a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">What's new in Python 3.6</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP498</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I would add everything I need to concatenate to a list and then join it on a line break.</p>
<pre><code>my_str = '\n'.join(['string1', variable1, 'string2', variable2])
</code></pre>
</div>
<span class="comment-copy">why do you have <code>$</code> chars in front of your strings... those are not valid python variable names.</span>
<span class="comment-copy">Which python are you using 2.x or 3?</span>
<span class="comment-copy">@ipinak python 2.7.6</span>
<span class="comment-copy">@RNar Just a typo.Got used to php.</span>
<span class="comment-copy">do you want each line to be a separate line (ie: should there be a newline after <code>"this is a line"</code>, and after <code>str1</code>, etc?)</span>
<span class="comment-copy">Don't forget the opening and closing parenthesis!  That stumped me for a bit.</span>
<span class="comment-copy">This will include the leading whitespace on each line, which is different than what the current code does.</span>
<span class="comment-copy">I did not took that in consideration since the initial code provided didn't worked.</span>
<span class="comment-copy">Btw... removing the leading whitespaces is as starting every line at col 1</span>
<span class="comment-copy">This wouldnt solve my purpose.Because I am writing a script to which will take a variable name and generate a getter and setter method for it.SO I would want to write in the sae format.</span>
<span class="comment-copy">@user3290349 this solves the question that you asked, and has room for expanding. If you want it to solve a different purpose, ensure that purpose is stated in your question.</span>
<span class="comment-copy">@user3290349 in python there is no need for getters and setters. I suggest taking a look at python's <code>@property</code> decorator. <a href="https://docs.python.org/2/library/functions.html#property" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#property</a></span>
