<div class="post-text" itemprop="text">
<p>Given that you don't care about the actual output, what is a way to deplete a generator?</p>
<p>The function I use in a map will print on itself, so all I have to do is to get the map to evaluate.</p>
<p>For now, I use <code>list()</code> to do this, but I'm looking for a shorter way.</p>
<p>Arbitrary example:</p>
<pre><code>list(map(print,range(10)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In 3.5, you can abuse the <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448" rel="nofollow">additional unpacking generalizations</a> and replace:</p>
<pre><code>list(map(print,range(10)))
</code></pre>
<p>with:</p>
<pre><code>*map(print,range(10)),
</code></pre>
<p>saving four characters (it produces a <code>tuple</code> of <code>None</code>s).</p>
<p>With 3.4 and earlier, you can (assuming a one character long literal exists which won't exist in the output) do:</p>
<pre><code>0in map(print,range(10))  # tokenizer is fine with no space between 0 and in
</code></pre>
<p>which saves two characters while also avoiding storing any intermediate <code>list</code>s.</p>
<p>If the outputs aren't controlled at all, and you're below 3.5, as others have noted, saving a single character is easy (e.g. just replace <code>list</code> with <code>any</code>, if only "falsy" values possible, <code>all</code> if only "truthy" values possible, or <code>set()</code> for all values, at the expense of storing the <code>set</code>), but the above save a bit more if you have version or generator output guarantees.</p>
<p>Obviously, if you don't need to <code>print</code>, this can shorten even more, since <code>*somegen,</code> will do the work with no pointless <code>print</code>s, requiring only two characters more than referencing the generator in the first place.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Set</code> is one character shorter than <code>list</code>.</p>
<pre><code>set(map(print,range(10)))
</code></pre>
<p>A list comprehension may be better in some cases:</p>
<pre><code>[print(a)for a in range(10)]    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you know that your generator will not contain one of the single-digit integers (for example <code>2</code>) you can deplete it with <code>2 in ...</code> which is one character less than <code>list(...)</code>.</p>
</div>
<span class="comment-copy">Switch to Python 2.7, where <code>map</code> doesn't return a generator. Only half joking ;-)</span>
<span class="comment-copy">Use a <code>for</code>-loop. What's wrong with that? (Also think at the poor souls that will have to read your code! :)</span>
<span class="comment-copy">@AndreaCorbellini OP mentioned it's for code golf.</span>
<span class="comment-copy">@Kevin Then <code>print_function</code> needs to be imported - this ungolfs a lot. :)</span>
<span class="comment-copy">Doesn't this question belong on <a href="http://codegolf.stackexchange.com">programming puzzles and code golf</a>?</span>
<span class="comment-copy">Yea, I'm aware the code in the example is strange, but it was mostly there to produce <code>None</code>'s I don't care about, while still having all the results evaluated. Really to just deplete a generator. <code>*X,</code> is a great solution.</span>
<span class="comment-copy">@PascalvKooten: Ah, so the <code>map</code> was an example of making a generator in the first place, and you were looking for shorter code to exhaust the <code>map</code> than <code>list()</code>, not shortening the <code>map</code> itself or anything. Gotcha. Yeah, I doubt you'll get it down below two characters of overhead. :-)</span>
<span class="comment-copy">Well, for brevity, if you're dropping <code>map</code>, don't use list comprehension. <code>for a in range(10):print(a)</code> is one char shorter after all; you don't need to make a <code>list</code>.</span>
<span class="comment-copy">As I mentioned in <a href="http://stackoverflow.com/a/34495629/364696">my answer</a>, the tokenizer is fine with <code>2in</code> rather than <code>2 in</code>, so that would shave another character.</span>
