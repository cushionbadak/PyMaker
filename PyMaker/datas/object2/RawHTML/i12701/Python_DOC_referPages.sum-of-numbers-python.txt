<div class="post-text" itemprop="text">
<blockquote>
<p>Assume the file containing a series of integers is named numbers.txt and exists on the computers disk. Write a program that reads all of the numbers stored in the file and calculates their total.</p>
</blockquote>
<p>The program is not giving any errors back, but I'm getting the wrong total. I'm getting 5,750,884.00 and should be getting 284.00</p>
<p>This is what I've come up with so far:</p>
<pre><code>def main():
    # Accumulator.
    total=0.0

    try:
        # Open the file
        infile = open('numbers.txt', 'r')
        #read the values from the file and accumulate them.
        for line in infile:
            amount = float(line)
            total+=amount

        # Close the file.
        infile.close()
    except exception as error:
        print(err)
    else:
        # Print the total.
        print(format(total,',.2f'))



main()    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('numbers.txt', 'r') as f:
    print sum([float(x) for x in f.read().splitlines()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using Python 3 (presumably CPython), the absolute fastest solution is:</p>
<pre><code>with open('numbers.txt') as f:
    total = sum(map(float, f))
</code></pre>
<p>In CPython, that pushes all of the work to the C layer (no matter the size of the file, same number of byte codes executed), and streams the file (so peak memory usage doesn't grow with file size).</p>
<p>When summing <code>float</code>s, you may want higher accuracy, which Python provides with <a href="https://docs.python.org/3/library/math.html#math.fsum" rel="nofollow"><code>math.fsum</code></a>:</p>
<pre><code>import math

with open('numbers.txt') as f:
    total = math.fsum(map(float, f))
</code></pre>
<p>It's slightly slower (not meaningfully; a matter of maybe 2% slower, give or take), but in exchange, it doesn't suffer from the additional loss of precision that generic summation of <code>float</code>s would incur due to storing partial sums with progressive rounding error.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>with</code> syntax for managing file closing, and use the <code>sum</code> function to add the items (with a generator expression)</p>
<pre><code>try:
   with open('numbers.txt', 'r') as num_file:
      total = sum(float(l) for l in num_file)
   print('{:.2f}'.format(total))
except OSError as error:
   print('Error! (', error, ')')
except ValueError:
   print('File does not contain valid data')
</code></pre>
</div>
<span class="comment-copy">Ah, I missed the line where you gave the expected output. What input do you give the file?</span>
<span class="comment-copy">Your code looks correct to me; how do you know what the expected output is?</span>
<span class="comment-copy">I copy and pasted this code, created my own numbers.txt and it worked perfectly.</span>
<span class="comment-copy">The only errors I can see here wouldn't interfere with the sum you get; the unhelpful <code>except</code> block uses two different names for the exception it catches, and the file is closed in an exception-unsafe manner.</span>
<span class="comment-copy">Do you get the same answer with this: <code>sum(map(int, open('numbers.txt')))</code>? Or if there could be more than one integer on a line and to ignore anything else; you could <a href="http://stackoverflow.com/a/20024735/4279">use this</a>. Though if lines are not very long and they contain only space-separated integers then <code>sum(i for line in open('numbers.txt') for i in map(int, line.split()))</code> also works.</span>
<span class="comment-copy">Elegant.  Wouldn't this also work, and possibly be more efficient, without the list? Like this: <code>sum(float(x) for x in f.read().splitlines())</code></span>
<span class="comment-copy">@Riccati: Actually, that's still wasteful, since it slurps the whole file into a <code>list</code>, using potentially huge amounts of memory, and delaying <code>sum</code> work until file slurped and split. Even better (basically zero memory overhead) is either <code>sum(float(x) for x in f)</code> or the absolute fastest (in Py3, or Py2 with <code>from future_builtins import map</code> to get Py3 <code>map</code>) <code>sum(map(float, f))</code>. It works even without stripping whitespace and newlines because <code>float</code> ignores leading and trailing whitespace anyway.</span>
<span class="comment-copy">@ShadowRanger  Thanks for the explanation.</span>
<span class="comment-copy">My teacher prefers we use the longer formats that the book gives us that way he knows we aren't just getting our answers from google. Thanks again.</span>
<span class="comment-copy">My teacher prefers we use the longer formats that the book gives us that way he knows we aren't just getting out answers from google. Thanks again. I had program in the wrong folder. Guess I should always double check that. thanks again.</span>
<span class="comment-copy">it is not just "higher accuracy" -- <code>fsum()</code> may return an <i>accurate</i> sum without loss of precision if  IEEE-754 arithmetic is available. Anyway, <code>int</code> should be used here: <i>"Assume the file containing a series of integers."</i> Also, <a href="http://stackoverflow.com/questions/25606833/fastest-way-to-sum-integers-in-text-file#comment40064644_25606833">the task is IO bound</a>. Otherwise, there are <a href="http://stackoverflow.com/questions/9371238/why-is-reading-lines-from-stdin-much-slower-in-c-than-python#comment11966378_9371238">faster ways</a> to <a href="https://goo.gl/Xc6jKC" rel="nofollow noreferrer">read a file line by line than <code>map()</code></a>.</span>
<span class="comment-copy">FYI, you don't need to call <code>.strip()</code>; the <code>float</code> (and <code>int</code>) constructors ignore leading and trailing whitespace already.</span>
<span class="comment-copy">My teacher prefers we use the longer formats that the book gives us that way he knows we aren't just getting out answers from google. Thanks again.</span>
<span class="comment-copy">Cool! I didn't know that.</span>
