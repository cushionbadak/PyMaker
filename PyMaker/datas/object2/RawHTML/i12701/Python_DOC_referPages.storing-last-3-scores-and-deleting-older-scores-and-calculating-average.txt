<div class="post-text" itemprop="text">
<p>I'm making a program which opens and reads a csv file and sorts in following ways:</p>
<ul>
<li>Alphabetical order with each students highest score.</li>
<li>By the highest score, highest to lowest.</li>
<li>Average score, highest to lowest.</li>
</ul>
<p>The program should store the last 3 scores for each student. This is the part where I'm stuck at and need help with. When sorting the file alphabetically the program needs to look at each students last 3 recent scores and select the highest number. Currently, my code only sorts the file in alphabetical order. It does looks at their recent 3 scores and selects the highest one. This is where I need help with.</p>
<p>My code already sorts the scores by highest to lowest however it prints out all the scores each student gained rather than printing their highest score out of their 3 recent score.</p>
<pre class="lang-none prettyprint-override"><code>Andrew 1
Andrew 2
Andrew 3
Andrew 4
Andrew 5
</code></pre>
<p>Lastly I need help calculating the average score for each student. I'm guessing the way it should be done is by, adding Andrew's last 3 score which are 5, 4 and 3 and dividing by 3.</p>
<p>This is my code:</p>
<pre><code>import csv, operator

selected_class = input("Pick a class file, (5, 6 or 7)? ")

print("1. Alphabetical order.")
print("2. Highest to lowest.")
print("3. Average score.")

selected_sorting = input("Pick an option 1, 2, or 3: ")

class_file = "Class " + selected_class + ".csv"
open_file = open(class_file)
csv_file = csv.reader(open_file)

if selected_sorting == "1":
    sorted_name = sorted(csv_file, key=operator.itemgetter(0))
    for i in sorted_name:
        print(i)

elif selected_sorting == "2":
    sorted_results = sorted(csv_file, key=lambda row: int(row[1]), reverse=True)
    for i in sorted_results:
        print(i)

elif selected_sorting == "3":
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I will give some code for demonstration:</p>
<pre><code># -*- coding: utf-8 -*-
import csv
from collections import defaultdict
from statistics import mean

class_file = 'scores.csv'
open_file = open(class_file)
csv_file = csv.reader(open_file)


def main():
    # First, use student name to group by all scores, this will
    # generate structure like this:
    # {
    #     'Andrew': [1, 2, 3, 4, 5]),
    #     'Luck': [10, 20]),
    # }
    score_groups = defaultdict(list)
    for name, score in csv_file:
        score_groups[name].append(int(score))

    # Secondary, use the 3 latest socres only 
    l3_score_groups = [(key, value[-3:]) for key, value in score_groups.items()]

    print('1. Alphabetical order with each students highest score.')
    l3_highest_score_groups = [(key, max(values)) for key, values in l3_score_groups]
    for name, score in sorted(l3_highest_score_groups, key=lambda x: x[0]):
        print(name, score)

    print('2. By the highest score, highest to lowest.')
    l3_highest_score_groups = [(key, max(values)) for key, values in l3_score_groups]
    for name, score in sorted(l3_highest_score_groups, key=lambda x: x[1], reverse=True):
        print(name, score)

    print('3. Average score, highest to lowest.')
    l3_aver_score_groups = [(key, mean(values)) for key, values in l3_score_groups]
    for name, score in sorted(l3_aver_score_groups, key=lambda x: x[1], reverse=True):
        print(name, score)


if __name__ == '__main__':
    main()
</code></pre>
<p>Here are the technicals used above:</p>
<ul>
<li><a href="https://docs.python.org/3.3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code></a>: Useful data structure when doing data-grouping work.</li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow"><code>list-comprehensions</code></a>: Powerful tool for changing/filtering iterable data.</li>
<li><a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow"><code>statistics.mean</code></a>: Caculating mean value of a list.</li>
</ul>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can I suggest you look at pandas (Its part of the anacondas distribution) </p>
<pre><code>import pandas as pd

dataframe = pd.read_csv(' your file ') 

print dataframe.columns

student1 = dataframe[dataframe['studentnamecolumn']=='Andrew']

last3 = student1.sort('examdatecolumnname').iloc[-3:]

avgscore = last3['examscorecolumn'].mean()
</code></pre>
<p>And with combinations of the above you should be able to do most things. For help I suggest reading DataAnalysis for Python, which explains a lot of this</p>
</div>
<span class="comment-copy">Since there doesn't appear to be any kind of time pr date information in the input file, how is the program supposed to determine what the last 3 score are? Also, are the scores for each student grouped together in the input file?</span>
<span class="comment-copy">Unclear whether you mean last occurring or highest, but for the former, you want <code>collections.deque</code> with <code>maxlen=3</code>, for the latter you want <code>heapq.nlargest</code>.</span>
<span class="comment-copy">I've adjusted the code with mine and it works. Thank you. I was wondering, you know for the average, the numbers are too long. Is there a way in which the average numbers can be rounded up to 1 decimal place? So, score 4.66678 becomes 4.7?</span>
<span class="comment-copy">@Hayama your can use built-in function <code>round()</code>, like <code>round(4.66724234, 1)</code>. Google is your friend, :)</span>
