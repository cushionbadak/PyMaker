<div class="post-text" itemprop="text">
<p>I have a python dictionary with similar keys and I want to collect all keys (and values) with the same <strong>first part</strong> (name or title in this case) into a dict or list in order to find the most common values afterwards. As a side-note: I don't know how many copies of a key (with the same first part) exist. Here are 3, but there could be only 2 or more than 3.</p>
<pre><code>{'name=a=AA': (2, 2), 'name=a_copy=AA': (3, 3), 'name=a_copy2=AA': (3, 2), 
 'title=b=AA': (1, 2), 'title=b_copy=AA': (3, 3), 'title=b_copy2=AA': (1, 2)}
</code></pre>
<p>Is this possible? I though about using <code>key.split("=")[0]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Just loop over the key-values and collect them into a dictionary with lists:</p>
<pre><code>results = {}
for key, value in input_dict.items():
    prefix = key.partition('=')[0]
    results.setdefault(prefix, []).append((key, value))
</code></pre>
<p>This splits of the first part using <code>str.partition()</code>; this is faster for the single-split case. You could use <code>key.split('=', 1)[0]</code> as well, however.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>defaultdict</code>:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for key in D:  # this is the original dictionary
...     d[key.split("=")[0]].append(key)
... 
&gt;&gt;&gt; d
defaultdict(&lt;class 'list'&gt;, {'title': ['title=b_copy2=AA', 'title=b_copy=AA', 'title=b=AA'], 'name': ['name=a=AA', 'name=a_copy=AA', 'name=a_copy2=AA']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>ŸêAnother way is to use the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> method and group the keys according to first item of <code>split</code> over <code>=</code>:</p>
<pre><code>&gt;&gt;&gt; d
{'name=a=AA': (2, 2), 'name=a_copy2=AA': (3, 2), 'title=b=AA': (1, 2), 'name=a_copy=AA': (3, 3), 'title=b_copy=AA': (3, 3), 'title=b_copy2=AA': (1, 2)}
&gt;&gt;&gt;
&gt;&gt;&gt; dd = {}
&gt;&gt;&gt; 
&gt;&gt;&gt; for k,v in groupby(d, key=lambda s:s.split('=')[0]):
    if k in dd:
        dd[k].extend(list(v))
    else:
        dd[k] = list(v)
&gt;&gt;&gt; dd
{'name': ['name=a=AA', 'name=a_copy2=AA', 'name=a_copy=AA'], 'title': ['title=b=AA', 'title=b_copy=AA', 'title=b_copy2=AA']}
</code></pre>
</div>
<span class="comment-copy">This is great! Thank you so much!</span>
