<div class="post-text" itemprop="text">
<p>I'm a newbie trying #pythonchallenge, with some help!
I'm in Challenge 8 and a simple command such as:</p>
<pre><code>import bz2
bz2.decompress('BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084')
</code></pre>
<p>Won't work in Python 3X (but it does in Python 2x)</p>
<p>A number of times I had to change from bytes.decode into str and vice-versa, but I'm just at a lost when to change and why.</p>
<p>The other example was in Challenge 6</p>
<pre><code> comments = comments + str(bytes.decode((zip_try.getinfo(f_name).comment)))
</code></pre>
<p>I keep receiving the message TypeError: 'str' does not support the buffer interface</p>
<p>Any help?</p>
<p>I tried different pages to indicate portability from Python 2X to 3X and they say: 'strings are Unicode by default '</p>
<p>What does it mean? That I actually would not have to inform </p>
<pre><code> bytes('my stuff', 'utf-8')
</code></pre>
<p>, right?</p>
<p>Thanks, sorry if it sounds dumb!</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding the problems with the code you posted, the first snippet has to be modified to work with Python 3 as follows:</p>
<pre class="lang-py prettyprint-override"><code>import bz2
bz2.decompress(b'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084')
</code></pre>
<p>The <code>b</code> prefix marks the string literal as a string of bytes rather than the default of Unicode string.</p>
<p>In the second case, <code>ZipFile.getinfo().comment</code> is of <code>bytes</code> type, so you will need to do </p>
<pre class="lang-py prettyprint-override"><code>comments += zip_try.getinfo(f_name).comment.decode()
</code></pre>
<p>assuming that <code>comments</code> is of <code>str</code> type.</p>
<p>As for the Python 2 and 3 text handling in general, it is one of the key differences between them. When starting out, I recommend to start by studying the official <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow">Python 3 Unicode guide</a> first to understand the concepts and to learn the sane way of dealing with strings, bytes and encoding and then read the <a href="https://docs.python.org/2/howto/unicode.html" rel="nofollow">Python 2 version of the same</a> guide to understand its specific quirks.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python 3 you can think of bytes as something similar to python2's str, and str is python2's unicode. In python 3 the default literal is str, if you want to specify a bytes literal, you add a b before the literal. This is what python is asking for in the first case:</p>
<blockquote>
<p>TypeError: a bytes-like object is required, not 'str'</p>
</blockquote>
<p>So it would be:</p>
<pre><code>import bz2
bz2.decompress(b'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084')
</code></pre>
<p>The second case, I don't know without seeing more code, but remember you can convert from bytes to str and back with the encode and decode methods, similarly to python 2 with str and unicode strings. For example, the following line:</p>
<pre><code>'รก'.encode("utf8").decode("utf8")
</code></pre>
<p>would convert the 'รก' str to a bytes encoded in utf8 and back to an str again.</p>
</div>
<span class="comment-copy">Thanks. It did help!</span>
<span class="comment-copy">Thanks. The b' solved the problem, but the answer was still with a preceding b'huge</span>
<span class="comment-copy">The explanation, though, I am not sure I follow. Bytes are similar to str in Python 3 and strings are now Unicode for default. So if the variable looks like bytes, I add b'...</span>
<span class="comment-copy">What about 'str does not suport buffer interface'. It means I would have to ''.encode? Thanks, anyway.</span>
<span class="comment-copy">Why you add b: because this function (bz2.decompress) must receive a bytes-like object. So, it's not about the variable. The other case, as I said, without more code (seeing what type is each variable) I couldn't say, but if the case is similar (you are passing an str where you should pass a bytes) you can convert it using encode, yes.</span>
<span class="comment-copy">Ah. Ok. So depending on the function the argument may ONLY be bytes like. Ok. Thanks I'll read <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">docs.python.org/3/howto/unicode.html</a></span>
