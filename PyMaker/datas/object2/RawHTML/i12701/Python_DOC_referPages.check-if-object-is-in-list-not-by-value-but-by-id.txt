<div class="post-text" itemprop="text">
<p>Consider the following code:</p>
<pre><code>&gt;&gt;&gt; class A(object):
...   def __init__(self, a):
...     self.a = a
...   def __eq__(self, other):
...     return self.a==other.a
... 
&gt;&gt;&gt; a=A(1)
&gt;&gt;&gt; b=A(1)
&gt;&gt;&gt; c=A(2)

&gt;&gt;&gt; a==b
True                   # because __eq__ says so
&gt;&gt;&gt; a==c
False                  # because __eq__ says so
&gt;&gt;&gt; a is b
False                  # because they're different objects

&gt;&gt;&gt; l = [b,c]
&gt;&gt;&gt; a in l
True                   # seems to use __eq__ under the hood
</code></pre>
<p>So, <code>in</code> seems to use <code>__eq__</code> to determine whether or not something is in a container.</p>
<ol>
<li>Where can one find documentation on this behavior?</li>
<li>Is it possible to make <code>in</code> use object identity, a.k.a. <code>a in somelist</code> if the object <code>a</code> is in <code>somelist</code>, and not some other object that compares equal to <code>a</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any()</code> function</a> and a generator expression:</p>
<pre><code>any(o is a for o in l)
</code></pre>
<p>The behaviour of <code>in</code> is documented in the <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow"><em>Common Sequence Operators</em> section</a>:</p>
<blockquote>
<p><code>x in s</code><br/>
<code>True</code> if an item of <em>s</em> <strong>is equal to</strong> <em>x</em>, else <code>False</code></p>
</blockquote>
<p>Bold emphasis mine.</p>
<p>If you must use <code>in</code>, use a wrapper object with a custom <code>__eq__</code> method that uses <code>is</code>, or build your own container where a custom <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow"><code>__contains__</code> method</a> uses <code>is</code> to test against each contained element.</p>
<p>The wrapper could look like this:</p>
<pre><code>class IdentityWrapper(object):
    def __init__(self, ob):
        self.ob = ob
    def __eq__(self, other):
        return other is self.ob
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; IdentityWrapper(a) in l
False
&gt;&gt;&gt; IdentityWrapper(a) in (l + [a])
True
</code></pre>
<p>The container could just use the same <code>any()</code> function outlined above:</p>
<pre><code>class IdentityList(list):
    def __contains__(self, other):
        return any(o is other for o in self)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; il = IdentityList(l)
&gt;&gt;&gt; a in il
False
&gt;&gt;&gt; a in IdentityList(l + [a])
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you do not want to change <code>A</code> behaviour, you may prepare thin wrapper for used container. To change how <code>in</code> operator behaves, magic method <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow"><code>__contains__</code></a> needs to get overridden. Quoting docs:</p>
<blockquote>
<p>Called to implement membership test operators. Should return true if
  item is in self, false otherwise. For mapping objects, this should
  consider the keys of the mapping rather than the values or the
  key-item pairs.</p>
</blockquote>
<p>Sample code:</p>
<pre><code>class A(object):
    def __init__(self, a):
        self.a = a

    def __eq__(self, other):
        return self.a == other.a


class IdentityList(list):
    def __contains__(self, obj):
        return any(o is obj for o in self)

a = A(1)
b = A(1)
c = A(2)
container = [b, c]
identity_container = IdentityList(container)
assert a in container  # not desired output (described in question)
assert a not in identity_container  # desired output
</code></pre>
</div>
<span class="comment-copy">related:  <a href="http://stackoverflow.com/q/29692140/674039">stackoverflow.com/q/29692140/674039</a></span>
<span class="comment-copy">Doesn't <code>in</code> use <code>__contains__</code>?</span>
<span class="comment-copy">@DeepSpace: Yes, and if you're writing a sequence, you're supposed to define <code>__contains__</code> so that it does what this answer describes.</span>
<span class="comment-copy">I think <code>in</code> uses the <code>__contains__</code> method of the container, which in turn uses <code>__eq__</code>.</span>
