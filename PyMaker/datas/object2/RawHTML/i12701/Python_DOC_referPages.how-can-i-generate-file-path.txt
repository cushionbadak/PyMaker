<div class="post-text" itemprop="text">
<p>My script have to work in Linux and Windows.
And the script receive 2 pattern strings as arguments.</p>
<pre><code>A:"C:\test" or "/usr/local/test" (with no suffix)
B:"C:\test\" or "/usr/local/test/" (with suffix "\","/")
</code></pre>
<p>The following code works without problems. But I want not to use specific character "/". Because it close to bug, I think.
Do you have some idea?</p>
<pre><code># -*- coding: utf-8 -*-

import argparse

def parse_args():
    parser = argparse.ArgumentParser(description='This script is ...')
    parser.add_argument('--confdir', type=str, required=True)
    parser.add_argument('--outdir', type=str, required=True)
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_args()
    # "C:/test" or "C:/test/" in Windows
    # "/usr/local/test" or "/usr/local/test/" in Linux
    print(args.confdir)

    f = open(args.confdir + "/" + 'sample.txt')
    print(f.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow"><code>os.path.join</code></a> is the best approach, replacing:</p>
<pre><code>open(args.confdir + "/" + 'sample.txt') 
</code></pre>
<p>with:</p>
<pre><code>open(os.path.join(args.confdir, 'sample.txt'))
</code></pre>
<p><code>os.path.join</code> will properly prevent doubled separators, so it doesn't matter if <code>confdir</code> ends in a slash or not, it will produce output with only a single slash.</p>
<p>In rare circumstances, you may want to work with <a href="https://docs.python.org/3/library/os.html#os.sep" rel="nofollow"><code>os.sep</code> and <code>os.altsep</code></a> instead, but that's uncommon. The main reason you might use them would be to explicitly <code>lstrip</code> away incorrect leading slashes on a path component; trailing slashes don't matter (<code>os.path.join</code> dedups for you), but leading slashes are treated as the beginning of an absolute path, and throw away previous components.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use an object such as <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib.Path</code></a> that takes care of the trailing path separator automatically e.g.:</p>
<pre><code>#!/usr/bin/env python3
import argparse
import pathlib

parser = argparse.ArgumentParser()
parser.add_argument('--confdir', type=pathlib.Path, default='.')
args = parser.parse_args()
print(args.confdir)
path = args.confdir / 'sample.txt'
print(path)
print(path.read_text())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change:</p>
<pre><code>open(args.confdir + "/" + 'sample.txt') 
</code></pre>
<p>to</p>
<pre><code>open(args.confdir + os.sep + "sample.txt')
</code></pre>
</div>
<span class="comment-copy"><code>os.path.join</code> will use the OS specific path separator and <code>os.path.sep</code> will hold the OS specific path separator. On Linux/Unix <code>os.path.sep == '/'</code> and on Windows <code>os.path.sep == '\'</code></span>
<span class="comment-copy">Thank you. Using <code>os.path.join()</code>, I got ideal strings in any case. I'm happy. Thank you very much for detailed information.</span>
<span class="comment-copy">Thank you @J.F. Sebastian, I'll use <code>pathlib.Path</code> next time.</span>
<span class="comment-copy">Thank you for your advice. I didn't know <code>os.sep</code>. Then I'll use it next time. Thank you very much.</span>
