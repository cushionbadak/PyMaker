<div class="post-text" itemprop="text">
<p>I wanted to use a <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="noreferrer">ThreadPoolExecutor</a> from a <a href="https://docs.python.org/3/library/asyncio-task.html" rel="noreferrer">python coroutine</a>, to delegate some blocking network calls to a separate thread. However, running the following code:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import asyncio

def work():
  # do some blocking io
  pass

async def main():
  executor = ThreadPoolExecutor()
  await executor.submit(work)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
loop.close()
</code></pre>
<p>causes error:</p>
<pre><code>TypeError: object Future can't be used in 'await' expression
</code></pre>
<p>Aren't <code>Future</code> objects <em>awaitable</em>? Why does it say they aren't?</p>
<p>How can I <code>await</code> a <code>Future</code> object returned by <code>executor.submit</code>?</p>
<p><em>Python 3.5.0</em></p>
<p><strong>EDIT</strong></p>
<p>Using <code>executor.submit</code> is not my decision. This is used internally by several libraries, like <a href="https://github.com/ross/requests-futures" rel="noreferrer"><code>requests-futures</code></a>. I am searching for a way to interop with those modules from coroutines.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="noreferrer"><code>loop.run_in_executor</code></a>:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import asyncio

def work():
  # do some blocking io
  pass

async def main(loop):
  executor = ThreadPoolExecutor()
  await loop.run_in_executor(executor, work)

loop = asyncio.get_event_loop()
loop.run_until_complete(main(loop))
loop.close()
</code></pre>
<p><strong>EDIT</strong></p>
<p><a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future" rel="noreferrer"><code>concurrent.futures.Future</code></a> object are different from <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future" rel="noreferrer"><code>asyncio.Future</code></a>. The <code>asyncio.Future</code> is intended to be used with event loops and is <em>awaitable</em>, while the former isn't. <code>loop.run_in_executor</code> provides the necessary interoperability between the two.</p>
<p><strong>EDIT #2</strong></p>
<blockquote>
<p>Using executor.submit is not my decision. This is used internally by several libraries, like requests-futures. I am searching for a way to interop with those modules from coroutines.</p>
</blockquote>
<p><strong>EDIT #3</strong></p>
<p>Since python 3.5 (<a href="https://docs.python.org/3.5/library/asyncio-task.html" rel="noreferrer">docs</a>), you can use <code>asyncio.wrap_future(future, *, loop=None)</code> to convert a <code>concurrent.futures.Future</code> to a <code>asyncio.Future</code>.</p>
</div>
<span class="comment-copy">I don't know why the downvote. This certainly works. However I am more interested in <i>why</i> rather than <i>how</i>. Also, I use the futures-requests library, which uses submit internally.</span>
<span class="comment-copy">The simple <i>why</i> is <code>concurrent.futures.Future</code> are not awaitable. You are thinking of <code>asyncio.Future</code>.</span>
<span class="comment-copy">Okay, so we have different types called Future. Is there a conversion between those types?</span>
<span class="comment-copy"><a href="https://github.com/python/asyncio/blob/master/asyncio/futures.py#L445" rel="nofollow noreferrer"><code>asyncio.wrap_future</code></a> might be what you are looking for. Although I'm not sure if it's <i>public</i> or listed anywhere in the docs.</span>
