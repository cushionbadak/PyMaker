<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6586748/parse-comma-separated-csv-file-with-quotes-in-python">parse comma separated csv file with quotes in python</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/15956169/parsing-a-pipe-delimited-file-in-python">Parsing a pipe delimited file in python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<pre><code>|2014|,|H0AK00097|,|N00032846|,|John Cox (R)|,|R|,|AK01|,|    |,| |,|Y|,|C|,|RL|,| |
</code></pre>
<p>I am reading above line in a <code>.txt</code> file by below code.</p>
<pre><code>with open("E:\campaign_finance\CampaignFin14\cands14.txt", "r+") as f:
         data = list(csv.reader(f))
</code></pre>
<p>Is there a way to read this line by also removing <code>|</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Tweaking the dialect settings on the <code>reader</code> initialization should do it. From what your data looks like, it would probably be:</p>
<pre><code>csv.reader(f, quoting=csv.QUOTE_ALL, quotechar='|')
</code></pre>
<p>It's possible you may need to tweak other settings, e.g. <code>doublequote</code>, <code>escapechar</code>, etc., depending on whether vertical pipes can appear in fields, and if so, how they should be escaped. You can read the <a href="https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters">formatting parameters documentation for more info</a>.</p>
</div>
<span class="comment-copy">Side-note: Use <a href="https://docs.python.org/3/reference/lexical_analysis.html#strings" rel="nofollow noreferrer">raw strings</a> for Windows paths (and never end them in a backslash; build paths with <code>os.path.join</code> and you won't need trailing backslashes anyway). Sure, <code>"E:\campaign_finance\CampaignFin14\cands14.txt"</code> works fine. But you'll be unpleasantly surprised when a path component begins with, for example, <code>a</code> (<code>\a</code> is ASCII Bell character), <code>b</code> (ASCII backspace), <code>r</code> (ASCII carriage return), <code>n</code> (ASCII line feed), etc., and Python interprets it as the escape code. Raw strings (string literal prefixed w/<code>r</code>) save you.</span>
<span class="comment-copy">Thanks for the tip</span>
<span class="comment-copy">It is not exactly pipe separated, but you can parse it as csv that use pipe as the quote character.  There is a module for it. For details see the duplicate.</span>
