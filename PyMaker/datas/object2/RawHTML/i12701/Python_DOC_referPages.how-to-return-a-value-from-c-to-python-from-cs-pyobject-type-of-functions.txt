<div class="post-text" itemprop="text">
<p>I was trying to pass a value by calling C file from python and then return that value from C to python again. </p>
<p>My question is how to do this? Can it possible to use return <code>Py_BuildValue(a+b)</code> kind of thing?</p>
<pre><code>#include &lt;Python.h&gt;

static PyObject *
hello_world(PyObject *self, PyObject *noargs)
{
   int a=5,b=10;

   return Py_BuildValue(a+b); //This is Errorus.
}


static PyMethodDef
module_functions[] = {
    { "hello_world", hello_world, METH_NOARGS, "hello world method" },
    { NULL }
};



PyMODINIT_FUNC
inittesty2(void)
{
    Py_InitModule("testy2", module_functions);
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Specify the format of the value:</p>
<pre><code>return Py_BuildValue("i", a+b); // "i" for int
</code></pre>
<p>You can find more format unit <a href="https://docs.python.org/2/c-api/arg.html#c.Py_BuildValue" rel="nofollow">here (<code>Py_BuildValue</code> documentation)</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the explicit constructors for integers <a href="https://docs.python.org/2/c-api/int.html#c.PyInt_FromLong" rel="nofollow"><code>PyInt_FromLong</code></a> or <a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong" rel="nofollow"><code>PyLong_FromLong</code></a> instead.</p>
<p>You can find functions like this for any type you can create with <code>Py_BuildValue</code> and get a little type safety on top.</p>
</div>
