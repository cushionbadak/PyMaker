<div class="post-text" itemprop="text">
<p>I want to debug a warning that occurs well into the code's execution.</p>
<p>A simple breakpoint won't do, because the line that results in the warning executes millions of times without warning before the first warning occurs.</p>
<p>Also, the line where this is happening is in library code (more precisely, in <code>pandas/core/common.py</code>), so my preference is not to modify the code at all.</p>
<p>I just want to stop the program's execution right when it emits the warning, and inspect the stack at this point, either with <code>pdb</code> or with <code>ipdb</code>.</p>
<blockquote>
<p>Is there a way to configure either debugger to automatically enter single-step mode upon the issuing of a warning?</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can write a script <code>dbg.py</code>:</p>
<pre><code>import pdb, warnings, sys
import __builtin__

if __name__ == '__main__':
    args, n = [], len(sys.argv)
    if n &lt; 2:
        sys.exit(1)
    elif n &gt; 2:
        args.append(__builtin__.__dict__[sys.argv[2]])
        if n &gt; 3:
            args.append(int(sys.argv[3]))
    warnings.simplefilter('error', *args)  # treat warnings as exceptions
    try:
        execfile(sys.argv[1])
    except:
        pdb.post_mortem(sys.exc_info()[-1])
</code></pre>
<p>You can then use it to debug your script like that. Pass in your script name as the first argument if you want to run pdb on any warning:</p>
<pre><code>$ python dbg.py yourscript.py
</code></pre>
<p>Pass in warning type as the second argument if you only want pdb to run when some particular type of warning is raised:</p>
<pre><code>$ python dbg.py yourscript.py DeprecationWarning
</code></pre>
<p>Line number as the third argument:</p>
<pre><code>$ python dbg.py yourscript.py DeprecationWarning 342
</code></pre>
<p>You can also rewrite the code using <code>warnings.filterwarnings</code> instead of <code>warnings.simplefilter</code> to make warnings filtering even more flexible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of treating the warning as error, <code>warnings.catch_warnings</code> <a href="https://docs.python.org/3/library/warnings.html#available-context-managers" rel="nofollow noreferrer">link</a> can be used to access warning list and switch execution into PDB session if the scope of code which throws warning can be identified.</p>
<p>However I recommand to start your program with PDB, set a breakpoint to break the execution when detecting warning number change of warning list after the problematic code snippet. You will be benefited if your debugging code snippet is in a loop. </p>
<p>example:</p>
<pre><code>import warnings

with warnings.catch_warnings(record=True) as w:
    warnings.simplefilter('always')
    warningNum = len(w)
    for i in range(someNumber):
        "your code probably throw warning"

        if len(w) != warningNum:
            warningNum = len(w) #set break point here
</code></pre>
<p>run script with <code>python -m pdb yourscript.py</code> and set a breakpoint in line <code>warningNum = len(w)</code>, then execution can be suspended when detecting warning number change.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><a href="https://pypi.python.org/pypi/rpdb/" rel="nofollow">https://pypi.python.org/pypi/rpdb/</a></p>
</blockquote>
<p>i found <code>rpdb</code> very handy to debug such problem, when you have no control of starting the program. what you need is temporarily modify <code>pandas/core/common.py</code> to add </p>
<pre><code>import rpdb
debugger = rpdb.Rpdb(port=12345)
debugger.set_trace()
</code></pre>
<p>when the warning is triggered, the debugger will be there waiting for connection. you then connect to the debugger and inspect the stack.</p>
</div>
<span class="comment-copy">Do you mean basically what happens if you insert <code>import pdb;pdb.set_trace()</code> at that point?</span>
<span class="comment-copy">@Two-BitAlchemist: yes, pretty much, except that, as I wrote, I don't want to actually modify the code being debugged.</span>
<span class="comment-copy">A warning is a warning, not an exception. The debugger will not pick it up. Usually you either change the code to prevent the warning or your suppress it as described here: <a href="https://docs.python.org/2/library/warnings.html" rel="nofollow noreferrer">docs.python.org/2/library/warnings.html</a> . If you need help with a particular warning, just ask!</span>
<span class="comment-copy">If you try to use this you should be aware that in Python 3 the module <code>__builtin__</code> was renamed <code>builtins</code>, more info: <a href="https://stackoverflow.com/questions/9047745/where-is-the-builtin-module-in-python3-why-was-it-renamed" title="where is the builtin module in python3 why was it renamed">stackoverflow.com/questions/9047745/â€¦</a></span>
