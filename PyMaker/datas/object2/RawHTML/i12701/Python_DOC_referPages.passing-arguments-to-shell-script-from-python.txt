<div class="post-text" itemprop="text">
<p>I'm writing a python program which passes arguments to a shell script.</p>
<p>Here's my python code:</p>
<pre><code>import subprocess

Process=subprocess.Popen('./copyImage.sh %s' %s str(myPic.jpg))
</code></pre>
<p>And my "copyImage.sh":</p>
<pre><code>#!/bin/sh

cp /home/pi/project/$1 /home/pi/project/newImage.jpg
</code></pre>
<p>I can run the script on terminal without problems. But when executing the python code, the terminal returned <code>"NameError: name 'myPic' is not defined"</code>.</p>
<p>If I change the syntax to </p>
<pre><code>Process=subprocess.Popen('./copyImage.sh %s' %s "myPic.jpg")
</code></pre>
<p>Then the terminal returned <code>"OSError: [Errno 2] No such file or directory"</code>.</p>
<p>I've followed this: <a href="https://stackoverflow.com/questions/19325761/python-executing-shell-script-with-argumentsvariable-but-argument-is-not-rea">Python: executing shell script with arguments(variable), but argument is not read in shell script</a> but it didn't help.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>subprocess</code> module is expecting a list of arguments, not a space-separated string.  The way you tried caused python to look for a program called <code>"copyImage.sh myPic.jpg"</code> and call it with no arguments, whereas you wanted to look for a program called <code>copyImage.sh</code> and call it with one argument.    </p>
<pre><code>subprocess.check_call(['copyImage.sh', 'myPic.jpg'])
</code></pre>
<p>I also want to mention, since your script simply calls copy in a shell, you should probably cut out the middleman and just use python's <a href="https://docs.python.org/2/library/shutil.html#shutil.copy" rel="nofollow"><code>shutil.copy</code></a> directly.  It's a more appropriate tool than running a subprocess for this task.  </p>
</div>
<div class="post-text" itemprop="text">
<p>The safe and robust way is:</p>
<pre><code>subprocess.Popen(["./copyImage.sh", "myPic.jpg"])
</code></pre>
<p>Your first attempt failed because string literals need quotes in Python. The second one failed because Popen doesn't run a shell by default (the question you link sets <code>Shell=true</code> to do this, but it's fragile and bad).</p>
</div>
<div class="post-text" itemprop="text">
<p>Using os.system call is the way to go as:</p>
<ol>
<li>os.system does find your shell script in the environment</li>
<li>you can append as many arguments as you need to the destination shell script</li>
</ol>
<p>Example:</p>
<pre><code>os.system('myshellscript1 ' + arg1 + ' ' + arg2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While you got 2 answers that show how to use <code>subprocess</code> with an iterable for the arguments and I would recommend going one of those ways, for completeness you can use a string containing the full command if you specify <code>shell=True</code>, but then you're responsible for all the quoting and everything like that for arguments.</p>
<pre><code>Process=subprocess.Popen('./copyImage.sh %s' % shlex.quote("myPic.jpg"), shell=True)
</code></pre>
<p>Note that in addition to adding <code>shell=True</code> I pass the argument through <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex.quote</code></a> to let it handle escaping any special characters to make it a bit safer if the filename came from a user input, otherwise it could include a <code>;</code> and another command to run, for example.  Input like <code>myPic.jpg; rm -rf ~</code> would otherwise cause bad things to happen when executed.</p>
<p>If you don't specify <code>shell=True</code> the subrpocess module will actually be looking for an executable named <code>copyImage.sh myPic.jpg</code> with the space and both words as the name of the executable to run.</p>
<p>Two further notes, for python 2 instead of <code>shlex.quote</code> use <code>pipes.quote</code>.  Also, the shell script above does not quote its arguments, so will not work with names with spaces or other special characters.  It should be modified to quote its variables (which is <a href="https://unix.stackexchange.com/questions/171346/security-implications-of-forgetting-to-quote-a-variable-in-bash-posix-shells">always a good idea</a>):</p>
<pre><code>#!/bin/sh

cp /home/pi/project/"$1" /home/pi/project/newImage.jpg
</code></pre>
<p>With a slightly different script:</p>
<pre><code>#!/bin/bash
printf 'Arg 1 is: %s\n' "$1"
</code></pre>
<p>we can see this work as follows:</p>
<pre><code>subprocess.check_call("./demoScript.sh %s" % shlex.quote("This has ; bad stuff"), shell=True)
</code></pre>
<p>which produces the following output on <code>stdout</code></p>
<pre><code>Arg 1 is: This has ; bad stuff
</code></pre>
</div>
<span class="comment-copy">You can copy the file in python itself. <code>shutil.copy2('/home/pi/project/myPic.jpg', '/home/pi/project/newImage.jpg')</code>. No need to complicate with a subprocess call.</span>
<span class="comment-copy">cool! this is exactly what I need</span>
<span class="comment-copy">Since you have to be responsible for escaping, can you add that to the example?</span>
<span class="comment-copy">@thatotherguy I actually did quote the <code>%s</code> in the argument, but I'll call it out more, oops, that still isn't good enough (see the problem with this approach) let me fix it to actually protect the argument more properly!</span>
<span class="comment-copy">@thatotherguy ok, should be better now, thanks for the prompt!</span>
<span class="comment-copy">Still doesn't work for me for e.g. a filename with spaces.</span>
<span class="comment-copy">@thatotherguy if you are using the op script it would also need to be modified to handle a name with spaces</span>
