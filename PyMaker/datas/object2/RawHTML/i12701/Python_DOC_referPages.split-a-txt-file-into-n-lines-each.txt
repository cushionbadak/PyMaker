<div class="post-text" itemprop="text">
<p>I would like to split a very large .txt file in to equal parts files each part containing N lines. and save it to a folder </p>
<pre><code>with open('eg.txt', 'r') as T:
    while True:
        next_n_lines = islice(T, 300)
        f = open("split" + str(x.pop()) + ".txt", "w")
        f.write(str(next_n_lines))
        f.close()
</code></pre>
<p>But this creates a files with data </p>
<pre><code>" &lt; itertools.islice object at 0x7f8fa94a4940 &gt;" 
</code></pre>
<p>in the <code>txt</code> files.</p>
<p>I would like to preserve the same structure and style maintained in the original <code>txt</code> file.</p>
<p>And this code does not terminate automatically when it reaches end of file as well. If possible I would the code to stop writing to files and quit if 
there is no data left to write.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>iter</code> with <code>islice</code>, taking n lines at a time using enumerate to give your files unique names.   <code>f.writelines</code> will write each list of lines to a new file:</p>
<pre><code>with open('eg.txt') as T:
    for i, sli in enumerate(iter(lambda:list(islice(T, 300)), []), 1):
        with open("split_{}.txt".format(i), "w") as f:
            f.writelines(sli)
</code></pre>
<p>Your code loops forever as you don't include any break condition, using <code>iter</code> with an empty list will mean the loop ends when the iterator has been exhausted. </p>
<p>Also if you wanted to pass an islice object to be written you would just call <code>writelines</code> on it  i.e <code>f.writelines(next_n_lines)</code>, <code>str(next_n_lines)</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is tat <code>itertools.islice</code> returns an iterator and you are writing it's <code>str</code> in your file which is the representation of functions in python (showing the identity of object):</p>
<pre><code>&lt; itertools.islice object at 0x7f8fa94a4940 &gt;
</code></pre>
<p>As a more pythinic way for slicing an iterator to equal parts, you can use following <code>grouper</code> function, which has been suggested by python wiki as <code>itertools recipes</code>:</p>
<pre><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>You can pass your file object as an iterator to function and then loop over the result and writ them to your file:</p>
<pre><code>with open('eg.txt', 'r') as T:
    for partition in grouper(T,300):
        # do anything with `partition` like join the lines 
        # or any modification you like. Then write it in output.
</code></pre>
</div>
<span class="comment-copy">For anyone finding this years down, you need to put this above the code. <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.islice</a></span>
