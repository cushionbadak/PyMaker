<div class="post-text" itemprop="text">
<p>I receive a namespace object from command line arguments.
And I don't want to modify it.
Can I do that or do you have some ideas? </p>
<pre><code># -*- coding: utf-8 -*-

import argparse

def parse_args():
    parser = argparse.ArgumentParser(description='This script is ...')
    parser.add_argument('--confdir', type=str, required=True)
    parser.add_argument('--outdir', type=str, required=True)
    return parser.parse_args()

if __name__ == '__main__':
    mutable_namespace = parse_args()

    # I want to prevent overwrite like that.
    mutable_namespace.confdir = "xxx"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I initially proposed the custom Namespace class, but I like this idea of copying <code>args</code> to a NamedTuple better.</p>
<h2>Namedtuple</h2>
<p>Another option is to copy the values from <code>args</code> to an immutable object/class.  A named tuple might do the job nicely.</p>
<p>Create a namespace</p>
<pre><code>In [1157]: dest=['x','y']
In [1158]: args=argparse.Namespace()
In [1159]: for name in dest:
   ......:     setattr(args, name, 23)
   ......:     
In [1160]: args
Out[1160]: Namespace(x=23, y=23)
</code></pre>
<p>now define a namedtuple</p>
<pre><code>In [1161]: from collections import namedtuple
In [1163]: Foo = namedtuple('Foo',dest)
</code></pre>
<p>You could also get the tuple names from the Namespace itself (after parsing)</p>
<pre><code>Foo = namedtuple('Foo',vars(args).keys())
</code></pre>
<p>create such a tuple with values from <code>args</code>:</p>
<pre><code>In [1165]: foo=Foo(**vars(args))
In [1166]: foo
Out[1166]: Foo(x=23, y=23)
In [1167]: foo.x
Out[1167]: 23
</code></pre>
<p>and it is immutable:</p>
<pre><code>In [1168]: foo.x=34
... 
AttributeError: can't set attribute
</code></pre>
<p>Such a namedtuple cannot be used as a Namespace, since <code>setattr(foo,'x',34)</code> produces the same error. </p>
<p>A clean way to do all of this is to wrap it all in a function:</p>
<pre><code>def do_parse():
   parser = ....
   Foo = namedtuple(...)
   args = parser.parse_args()
   foo = Foo(**vars(args))
   return foo
</code></pre>
<p>The calling code never sees the mutable <code>args</code>, just the immutable <code>foo</code>.</p>
<h2>Custom Namespace class</h2>
<p>To build on <code>Ingaz</code> answer, <code>argparse</code> can use your own <code>Namespace</code> class.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="nofollow">https://docs.python.org/3/library/argparse.html#the-namespace-object</a></p>
<pre><code>class MyNamespace(argparse.Namespace):
    pass
    &lt;customize one or more methods&gt;

anamespace = MyNamespace()
args = parser.parse_args(namespace=anamespace)
</code></pre>
<p>Now <code>args</code> and <code>anamespace</code> reference the same <code>MyNamespace</code> object.  As long as <code>getattr(anamespace, adest)</code> and <code>setattr(anamespace, adest, avalue)</code> work, <code>argparse</code> can use this namespace object.</p>
<p>Now, can you allow <code>setattr(anamespace, 'string', 'value')</code>, but disallow <code>anamespace.string = value</code>?  I think you can, but it will require a good understanding of how the latter expression works.  It may just require customizing <code>.__setattr__</code>, but I haven't studied this aspect of Python in a while.</p>
<p>By design it is possible, and even acceptable to 'monkey patch' the <code>argparse</code> namespace - with a custom class like this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can redefine <code>__setattr__</code> in your mutable_namespace:</p>
<pre><code>class NotMutableException(Exception):pass

class SomeObject(object):
    def init(self):
        self.x = 10
        self.y = 20

some_obj = SomeObject()
some_obj.z = 30

def not_setattr(self, name, value):
    raise NotMutableException

type(some_obj).__setattr__ = not_setattr

some_obj.a = 1000
</code></pre>
</div>
<span class="comment-copy"><i>Lock a variable in Python?</i></span>
<span class="comment-copy">Just... don't modify it? There's nothing like <code>const</code> in Python. The usual philosophy is that if you don't want something done, you just don't do it. It's why we don't have <code>private</code>, either.</span>
<span class="comment-copy">Thank you for the adivice. I see, my idea is not appropriate in Python. I understood very well. I'll change the way. Thank you very much.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/4828080/4279">How to make an immutable object in Python?</a></span>
<span class="comment-copy">As long as you're going to all this trouble, you may as well subclass <code>argparse.ArgumentParser</code> to wrap its <code>parse_args</code> to do the rewrap as an immutable namespace; easier to do that and make your work reusable trivially (users only change the initialization line for the parser and otherwise use it like normal) than to make special <code>do_parse</code> for each use case.</span>
<span class="comment-copy">It depends on whether you need to do this kind of thing repeatedly, or just once or twice.  Subclass <code>ArgumentParser</code> if you need to reuse some new feature repeatedly.  You can still wrap the parser definition/use in a function to cleanly separate parsing from use.</span>
<span class="comment-copy">Thank you very much. I understood there's nothing like 'const' and my way is not appropriate in  Python. This is the way in another languages, I think. I'll follow the Python's way. Thank you for your answer, I learned a lot.</span>
<span class="comment-copy">@ShadowRanger: a more reusable solution is to create a function that converts a <a href="http://stackoverflow.com/a/2597440/4279">Bunch</a>-like object <a href="http://stackoverflow.com/a/22526544/4279">such as <code>argparse.Namespace()</code></a> into a named tuple (it should be straightforward, to create a shallow, non-recursive version).</span>
<span class="comment-copy">If you do this to <code>argparse</code>'s <code>Namespace</code>, you just broke <code>argparse</code> for anything else in the code that might use it in the future. Thought I'd give you a heads up. Monkeypatching core classes to disable them is a <i>big</i> no no.</span>
<span class="comment-copy">@ShadowRanger: OP idea is strange from the beginning. So it have equally strange answers.</span>
<span class="comment-copy">It's not that outlandish of an idea.  You can define your own <code>namespace</code> class.  As long as the parser is allowed to fetch and set attributes with <code>getattr</code> and <code>setattr</code>, it should work.</span>
<span class="comment-copy">Thank you for your advice. I learned a lot.</span>
