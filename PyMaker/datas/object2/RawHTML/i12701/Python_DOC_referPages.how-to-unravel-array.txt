<div class="post-text" itemprop="text">
<p>I need to generate a <code>list</code> for <code>scipy.optimize.minimize</code>'s <code>boundry condition</code>, it should look like this:</p>
<pre><code>bonds = [(0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99),
        (0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99),
        (0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99),]
</code></pre>
<p>I'm wondering if there is any elegant way of doing it?</p>
<p>I tried:</p>
<pre><code>bonds = [[(0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99)] for i in range(3)]
</code></pre>
<p>But this generates</p>
<pre><code>[[(0.0, 0.99), (-30, 30), (-30, 30), (0.0, 30), (0.0, 30), (-0.99, 0.99)],
 [(0.0, 0.99), (-30, 30), (-30, 30), (0.0, 30), (0.0, 30), (-0.99, 0.99)],
 [(0.0, 0.99), (-30, 30), (-30, 30), (0.0, 30), (0.0, 30), (-0.99, 0.99)]]
</code></pre>
<p>How can I remove the inner <code>[]</code>, to <code>unravel</code> the inner arrays into a single one? Or is there any other good way of doing it? </p>
</div>
<div class="post-text" itemprop="text">
<p>you can do:</p>
<pre><code>bonds = [(0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99)] * 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>[i for sublist in bonds for i in sublist]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Other way, using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>chain.from_iterable</code></a> from <code>itertools</code> module:</p>
<pre><code>&gt;&gt;&gt; l = [(0.0, 0.99), (-30, 30), (-30, 30), (0.0, 30), (0.0, 30), (-0.99, 0.99)]
&gt;&gt;&gt; bonds = list(itertools.chain.from_iterable(l*3))
&gt;&gt;&gt; bonds
[0.0, 0.99, -30, 30, -30, 30, 0.0, 30, 0.0, 30, -0.99, 0.99, 0.0, 0.99, -30, 30, -30, 30, 0.0, 30, 0.0, 30, -0.99, 0.99, 0.0, 0.99, -30, 30, -30, 30, 0.0, 30, 0.0, 30, -0.99, 0.99] 
</code></pre>
<p><strong>EDIT</strong>: Comparing the speed of some expression, I've tried the following:</p>
<pre><code>$ python3 -mtimeit -s 'l = [(0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99)]' 'bonds=list(itertools.chain.from_iterable(l*3))'
1000000 loops, best of 3: 1.95 usec per loop
$ python3 -mtimeit -s 'l = [(0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99)]' 'bonds = l*3'
10000000 loops, best of 3: 0.147 usec per loop
$ python3 -mtimeit -s 'l = [(0., 0.99),(-30, 30),(-30, 30),(0., 30),(0., 30),(-0.99, 0.99)]' 'bonds=list(itertools.chain(l*3))'
1000000 loops, best of 3: 0.859 usec per loop
</code></pre>
<p>As one can notice, <code>bonds = l*3</code> is the fastest among the above expressions.</p>
</div>
<span class="comment-copy">Not necessarily what you may want, but a <a href="http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python">reference link</a> for ways to flatten a list of lists.</span>
<span class="comment-copy">@Reti43, thanks, that's another way of thinking this problem. I just didn't think about <code>flat</code> at all.</span>
<span class="comment-copy">Please add some supporting text for this code snippet. Explain why it would solve the OP's problem. Help others to understand.</span>
