<div class="post-text" itemprop="text">
<p>I'm using a <a href="http://flask.pocoo.org/" rel="noreferrer"><code>Flask</code></a> web server to provide an interface to a time-consuming calculation. To increase performance, I want to</p>
<ol>
<li>start the calculation as a <a href="https://docs.python.org/3.4/library/asyncio-subprocess.html" rel="noreferrer">new subprocess</a> to be able to use multiple CPU cores for multiple concurrent calculations</li>
<li>let the calculations run asynchronously using <a href="https://docs.python.org/3.4/library/asyncio.html" rel="noreferrer"><code>asyncio</code></a></li>
</ol>
<p>To call <code>asyncio</code> coroutines from Flask I started using <a href="http://flask-aiohttp.readthedocs.org/en/latest/coroutine.html" rel="noreferrer"><code>flask-aiohttp</code></a>, which is working nicely for simple delay tasks as shown in the examples.
However, I fail to call the asynchronous subprocess from inside Flask:</p>
<pre><code>#!/usr/bin/env python3
# coding: utf-8

from flask import Flask
from flask.ext.aiohttp import AioHTTP, async

import asyncio
from asyncio.subprocess import PIPE

CALC_SCRIPT = './calc'

app = Flask(__name__)
aio = AioHTTP(app)

@app.route('/calc/&lt;int:n&gt;')
@async
def calc(n):
    print('calc({}) called'.format(n))
    create = asyncio.create_subprocess_exec(CALC_SCRIPT, str(n),
                                            stdout=PIPE, stderr=PIPE)
    print('create... ', end='')
    process = yield from create
    print('process created. {!r}, type={}'.format(process,
                                                  type(process)))
    yield from process.wait()
    print('process finished.')

    # yields (stdout, stderr)
    result = '\n'.join(ch.decode().rstrip() for ch in
                        (yield from process.communicate()) if ch)
    return result

if __name__ == '__main__':
    aio.run(app, debug=True)
</code></pre>
<p>The process is being created, but never returns:</p>
<pre><code>GET http://127.0.0.1:5000/calc/5
calc(5) called
creating... process created. &lt;Process 5647&gt;,
    type=&lt;class 'asyncio.subprocess.Process'&gt;
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Reason: running asyncio subprocesses from sub-threads has limits, see asyncio docs <a href="https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-and-threads" rel="nofollow">Subprocess and threads</a>.</p>
<p>Detail: with <code>debug=True</code>, Flask-aiohttp handle requests in a sub-thread started by Werkzeug's <code>run_with_reloader</code>. Turn debug off and your code runs correctly.</p>
<p>Alternatively according to the docs above, Flask-aiohttp should add a call to <code>asyncio.get_child_watcher()</code> right before calling <code>run_with_reloader</code>. With this call, your code runs even with <code>debug=True</code>.</p>
</div>
<span class="comment-copy">I'm sure that you have thought through this already, but what does <i>CALC_SCRIPT</i> do? Are you testing with a simple function, like a factorial or something?</span>
<span class="comment-copy">This might be helpful: <a href="http://stackoverflow.com/questions/24541192/python-asyncio-subprocess-never-finishes" title="python asyncio subprocess never finishes">stackoverflow.com/questions/24541192/â€¦</a></span>
<span class="comment-copy">Yes, <code>CALC_SCRIPT</code> is a <a href="https://gitlab.com/snippets/11746" rel="nofollow noreferrer">slow fibonacci script</a> for testing purposes. I've stumbled over that question you've linked to, but my <a href="https://gitlab.com/snippets/11748" rel="nofollow noreferrer">standalone version</a> is working well.</span>
<span class="comment-copy">Does <code>process.wait()</code> cause the computation to go through? Can you create an <code>asyncio.couroutine</code> outside of the view function, and then call on it in a similar way as you do in the standalone version, within the view function?</span>
