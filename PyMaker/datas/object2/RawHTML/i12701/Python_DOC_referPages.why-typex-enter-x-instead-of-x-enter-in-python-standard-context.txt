<div class="post-text" itemprop="text">
<p>In <a href="https://hg.python.org/cpython/file/003f1f60a09c/Lib/contextlib.py#l304" rel="nofollow noreferrer">contextlib.py</a>, I see the ExitStack class is calling <code>__enter__()</code> method via the type object (<code>type(cm)</code>) instead of direct method calls to the given object (<code>cm</code>).</p>
<p>I wonder why or why not.</p>
<p>e.g.,</p>
<ul>
<li>does it give better exception traces when an error occurs?</li>
<li>is it just specific to some module author's coding style?</li>
<li>does it have any performance benefits?</li>
<li>does it avoid some artifacts/side-effects with complicated type hierarchies?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>First of all, this is what happens when you do <code>with something</code>, it's not just <code>contextlib</code> that looks up special method on the type. Also, it's worth noting that the same happens with other special methods too: e.g. <code>a + b</code> results in <code>type(a).__add__(a, b)</code>.</p>
<p>But why does it happen? This is a question that is often fired up on the python-dev and python-ideas mailing lists. And when I say "often", I mean "very often".</p>
<p>The last one were these: <a href="https://mail.python.org/pipermail/python-ideas/2015-December/037347.html">Missing Core Feature: + - * / | &amp; do not call <strong>getattr</strong></a> and <a href="https://mail.python.org/pipermail/python-ideas/2015-December/037359.html">Eliminating special method lookup</a>.</p>
<p>Here are some interesting points:</p>
<blockquote>
<p>The current behaviour is by design - special methods are looked up as
  slots on the object's class, not as instance attributes. This allows
  the interpreter to bypass several steps in the normal instance
  attribute lookup process.</p>
<p><a href="https://mail.python.org/pipermail/python-ideas/2015-December/037351.html"><em>(Source)</em></a></p>
</blockquote>
<blockquote>
<p>It is worth noting that the behavior is even more magical than this. 
  Even when looked up on the class, implicit special method lookup 
  bypasses <code>__getattr__</code> and <code>__getattribute__</code> of the metaclass.  So the 
  special method lookup is not just an ordinary lookup that happens to 
  start on the class instead of the instance; it is a fully magic lookup 
  that does not engage the usual attribute-access-customization hooks at 
  any level.</p>
<p><a href="https://mail.python.org/pipermail/python-ideas/2015-December/037354.html"><em>(Source)</em></a></p>
</blockquote>
<p>This behavior is also documented on the reference documentation: <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup">Special method lookup</a>, which says:</p>
<blockquote>
<p>Bypassing the <code>__getattribute__()</code> machinery in this fashion provides significant scope for speed optimisations within the interpreter, at the cost of some flexibility in the handling of special methods (the special method must be set on the class object itself in order to be consistently invoked by the interpreter).</p>
</blockquote>
<p>In short, <strong>performance is the main concern</strong>. But let's take a closer look at this.</p>
<p>What's the difference between <code>type(obj).__enter__()</code> and <code>obj.__enter__()</code>?</p>
<p>When you write <code>obj.attr</code>, <code>type(obj).__getattribute__('attr')</code> gets called. The default implementation of <code>__getattribute__()</code> looks for <code>attr</code> into the instance dictionary (i.e. <code>obj.__dict__</code>) and into the class namespace and, failing that, calls <code>type(obj).__getattr__('attr')</code>.</p>
<p>Now, this was a quick explanation and I have omitted some details, however it should give you an idea of how complicated an attribute lookup can be, and how slow it can become. Short circuiting special method lookup surely provides performance improvements, as looking up <code>obj.__enter__()</code> in the "classical" way may be too slow.</p>
</div>
<span class="comment-copy">Thanks for your answer. Still, I wonder why <code>type(a).__add__(a, b)</code> instead of <code>a.__add__(b)</code>. Aren't they same?</span>
<span class="comment-copy">@Achimnol: They're not the same if you assign something to <code>a.__add__</code>.</span>
<span class="comment-copy">@Achimnol: I think I have answered that question as well, but please tell me if I was too vague</span>
<span class="comment-copy">Thanks, I have noticed that Python has "a lot of" abstraction layers such like that. (So using <code>__slots__</code> for container-like classes could improve the performance and reduce memory usage.) In short, the reason is to bypass instance dictionary lookup since usually <code>__enter__</code> and other special methods are defined along with classes (=types). Am I right?</span>
<span class="comment-copy">@Achimnol: you are right</span>
