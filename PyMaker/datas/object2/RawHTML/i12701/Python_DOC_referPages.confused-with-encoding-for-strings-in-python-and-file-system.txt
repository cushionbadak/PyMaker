<div class="post-text" itemprop="text">
<p>I'm studying the learning python. It has a nice chapter for dealing with unicode strings in python.</p>
<p>I only need to clarify whether I have understood it correctly or not. So here's what I've understood.</p>
<p>I found out that <code>python 2.x</code> has <code>str</code> which supports normal text and bytes and it has <code>u'...'</code> literal or <code>unicode()</code> for special text like unicode characters.</p>
<p>On the other hand <code>python 3.x</code> has <code>str</code> which supports unicode text because all the normal text are unicode.</p>
<p>By keeping that in mind if you write like <code>s = 'something'</code> then the <code>s</code> is both normal text and combination of bytes in <code>python 2.x</code> and unicode text in <code>python 3.x</code>.</p>
<p>Now I also read that the files are too encoded as to save something in disk we need numbers and to store wide range of characters we need some encoding technique.</p>
<p>From that here's what we have</p>
<p>In <code>python 3.x</code> all the string literals with single, double and triple quoted strings are encoded to and decoded from with specific transformation format to store in memory(for python interpreter).</p>
<p>On the other hand to store file contents on disk, the operating system follows some encoding technique to store different range of characters. So when we write something on file that are encoded to get a specific code point so that it can save that code point in memory and when we extract information from file that are stored in memory, that are decoded form those code points to characters by using the exact same encoding technique that we have used earlier.</p>
<p>The file content are stored in disk in the form of code points but when we open a file in text editor we see the decoded format of those code points in character form.</p>
<p>That's pretty much it. Are these all correct what I have understood ?
Also I would like to accept any other informative information about unicode if you have.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can read the Unicode howtos:</p>
<ul>
<li><a href="https://docs.python.org/2/howto/unicode.html" rel="nofollow">Python 2</a></li>
<li><a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow">Python 3</a></li>
</ul>
<p>In short:</p>
<h2>Both Python versions have a data type for <em>bytes</em> and a data type for <em>text</em>:</h2>
<pre><code># python 2 (without from future import ...):
bytes = "abcd"
text  = u"abcd"
</code></pre>
<pre><code># python 3:
bytes = b"abcd"
text  = "abcd"
</code></pre>
<p>There are no things as <em>normal text</em> and <em>Unicode text</em>. Just <em>text</em>. You should always use the Unicode strings for text, and bytes for binary data.</p>
<h2>Files store bytes</h2>
<p>A file is always a sequence of bytes. Python 3 will do the decoding if you open the file as text. Because of that you normally have to specify which encoding to use: <code>open('file.txt', encoding='utf-8')</code>. It is a good idea to do the same in Python 2 with for instance <code>io.open</code>.</p>
<h2>Python source files contain Unicode text</h2>
<p>For <strong>Python 3</strong> this is part of the specification: See <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow">2. Lexical analysis</a>:</p>
<blockquote>
<p>Python reads program text as Unicode code points.</p>
</blockquote>
<p>But on disk files are just bytes. Again, Python will decode these bytes to Unicode text. To make sure Python uses the correct encoding, you must declare what encoding is used if it is different than the default encoding (ASCII for Python 2, and UTF-8 for Python 3).</p>
<p>This also tells you how Python handles Unicode string literals. The source code is a sequence of Unicode code points, so your string consists of the code points between the quotes.</p>
<p>Byte literals on the other hand should only contain ASCII characters, those characters are mapped on the bytes 0‚Äì127. Use <code>\x</code> escapes for other bytes. Using other characters may raise a SyntaxError.</p>
<p><strong>Python 2</strong> only specifies that string literals (and comments) may use another encoding than ASCII. But if you follow the conventions above you will get the expected bytes and code points in your byte and unicode strings.</p>
<h2>‚Ä¶but doesn't a file store <em>bytes</em>?</h2>
<p>Yes of course. The concept of a file containing a sequence of Unicode characters is an <strong>abstraction</strong>. A way this abstraction is <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">leaky</a> is the need to declare an encoding, which specifies the mapping between Unicode characters and byte sequences on disk. Your text editor must use the same encoding to save the source code.</p>
<p>Another thing is the Python specification doesn't <em>exactly</em> define a Python source file as consisting of encoded Unicode text. But it is specified in a way that in practice the source file almost always will be such a text file. A consequence of this is that unlike eg. JSON, you can't encode Python source files as UTF-16.</p>
<p>But other than that this abstraction works very well. You can type (or paste) an Unicode character in your text editor, and your string in Python will contain the right character. </p>
<p>test.py</p>
<pre><code>print(unicodedata.name("‚õÑ"))
print(unicodedata.name("üòÇ"))
print("‚õÑ üòÇ") # this line may not work on your platform
</code></pre>
<p>output:</p>
<pre><code>SNOWMAN WITHOUT SNOW
FACE WITH TEARS OF JOY
‚õÑ üòÇ
</code></pre>
<p>(printing the characters directly only works if Python knows how to print Unicode to the console on your platform. On Linux you have a good chance it will work)</p>
<p>Internally, your text editor converts the snowman to bytes, eg. <code>0xe2, 0x9b, 0x84</code> and the Python interpreter will decode those bytes again. But once you set up your editor with the right encoding, this process is hidden and you can just work with Unicode characters.</p>
</div>
<span class="comment-copy">Vote to migrate to Programming as the question is too broad for a concise answer.</span>
<span class="comment-copy">You're almost correct except that it's not the operating system that encodes text; Python writes bytes to the filesystem. If, in Python, you open the file in text mode using Py3's <code>open</code> of Py2's <code>io.open()</code>, you may write Unicode strings, which will be encoded by Python to the given or default encoding.</span>
<span class="comment-copy">I mean the <i>source code</i> are encoded by operating system to store as bytes on secondary storage. yes you are write that when you write text using python to files then that text is encoded by python itself to store it as bytes.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/tokenize.html#tokenize.open" rel="nofollow noreferrer"><code>tokenize.open()</code></a> allows you to get Python source as text but I'm not sure that it is correct to say <i>"Python source files are Unicode text"</i> (you can easily convert it to Unicode text but you can also convert it to AST or bytecode).</span>
<span class="comment-copy">@J.F.Sebastian hmm maybe it is a simplification. But note that (1) <code>b"‚òÉ"</code> is a syntax error, and if your file contains invalid bytes, it won't load. <a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">PEP 0263</a> suggest Python files will be interpreted as Unicode text.</span>
<span class="comment-copy">Correction ‚Äî it will load, but I don't know how it will be interpreted.</span>
<span class="comment-copy">I don't see what you expect <code>b"‚òÉ"</code> to prove. It is not recommended but it is allowed on Python 2. Even if it were forbidden on both Python 2/3; how is it related to <i>"source files are Unicode"</i>? There is no <code>‚òÉ</code> on disk: POSIX uses bytes API for read/write operations. Python can import zip-archives directly but we don't say that Python source is a zipfile. Have you seen that Python language reference says that Python source is Unicode?</span>
<span class="comment-copy">@J.F.Sebastian the PEP contains statements like ‚ÄúThis PEP proposes to introduce a syntax to declare the encoding of a Python source file.‚Äù and ‚ÄúThe complete Python source file should use a single encoding.‚Äù That definitely suggests a Python source file should be a text file with Unicode, and that for example if the encoding is UTF-8 and you have the bytes <code>"\xe2\x98\x83"</code> in the file, the interpreter will interpret that as <i>U+2603</i>, aka "‚òÉ".</span>
