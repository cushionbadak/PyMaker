<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1641219/does-python-have-private-variables-in-classes">Does Python have “private” variables in classes?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p><sub>(I've checked out <a href="https://stackoverflow.com/questions/1641219/does-python-have-private-variables-in-classes">Does Python have “private” variables in classes?</a> -- it asks about classes rather than modules. As such, answers there don't cover <code>import</code> which is what I'm interested in.)</sub></p>
<p>Consider, there is a module called <code>X</code> with variable  <code>y</code>. If any other module tries to <code>import</code> the module <code>X</code>, how to avoid loading the variable <code>y</code> in Python? </p>
<p>For example:</p>
<pre><code># x.py
y=10
</code></pre>
<p>We then use this in some other module:</p>
<pre><code>import x 
print x.y
</code></pre>
<p>How to avoid accessing x.y from the module x.py ? </p>
</div>
<div class="post-text" itemprop="text">
<p>If you do <code>import module</code>, there's no way to hide any global members, and that's intentional: <a href="https://docs.python.org/2/reference/simple_stmts.html#index-44" rel="nofollow noreferrer">the module object returned is the "true" one</a>, the very same that's used by the module's members. <a href="https://stackoverflow.com/questions/2447353/getattr-on-a-module">Dirty hacks like <code>__getattr__</code> are also prohibited for modules.</a> </p>
<p>One way is to mark "internal" entities with a leading underscore to <em>hint the user</em> they are not intended for external use. This isn't necessary for references to other modules imported by yours since the guidelines explicitly discourage external use of them (the only exception is if the referenced module is inaccessible the normal way).</p>
<p>When doing <a href="https://docs.python.org/2/reference/simple_stmts.html#index-48" rel="nofollow noreferrer"><code>from module import *</code></a>, however, you don't get a module reference but import things from it directly into the current namespace. By default, everything except names starting from an underscore is imported. You can override this by defining the <a href="https://docs.python.org/2/reference/simple_stmts.html#index-49" rel="nofollow noreferrer"><code>__all__</code></a> module attribute.</p>
</div>
<div class="post-text" itemprop="text">
<p>In normal use <code>import foo</code> only imports the module once; all other imports see that it has been imported, and doesn't load it again.</p>
<p>Quoth <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow">https://docs.python.org/3/reference/import.html#the-module-cache</a>:</p>
<blockquote>
<p>During import, the module name is looked up in sys.modules and if
  present, the associated value is the module satisfying the import, and
  the process completes. However, if the value is None, then an
  ImportError is raised. If the module name is missing, Python will
  continue searching for the module.</p>
</blockquote>
<p>This has been long been a feature of the interpreter going back <a href="https://docs.python.org/2.7/tutorial/modules.html#more-on-modules" rel="nofollow">at least to version 2.7</a> and probably earlier.</p>
<hr/>
<p>Speaking to your specific question, there is no variable <code>y</code>, there is <code>x.y</code> because that's what you imported. If you do the highly unrecommended <code>from module import *</code> you can end up with a <code>y</code>, but you shouldn't do that.</p>
</div>
<span class="comment-copy">Is there any side-effect on loading variable <code>y</code>? Do you know about the <code>__all__</code> variable?</span>
<span class="comment-copy">@memoselky, yes, I   want to hide particular variable being imported in a module and  I don't know about  <code>__all__</code></span>
<span class="comment-copy">Some example code would vastly improve this question. It is unclear what the precise need is.</span>
<span class="comment-copy">The moderators for this question who marked it as a duplicate of "Does Python have 'private' variables in classes?" apparently don't know Python. This question is NOT a duplicate of that question. The moderators are apparently so ignorant of Python that they don't know the difference between a "class" and a "module". This state of affairs is pretty sad if you ask me. The correct answer, btw, was provided here below by ivan_pozdeev.</span>
