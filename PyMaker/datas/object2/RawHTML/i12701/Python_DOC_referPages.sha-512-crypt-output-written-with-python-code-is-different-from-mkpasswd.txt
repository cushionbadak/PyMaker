<div class="post-text" itemprop="text">
<p>Running <code>mkpasswd -m sha-512 -S salt1234 password</code> results in the following:</p>
<pre><code>$6$salt1234$Zr07alHmuONZlfKILiGKKULQZaBG6Qmf5smHCNH35KnciTapZ7dItwaCv5SKZ1xH9ydG59SCgkdtsTqVWGhk81
</code></pre>
<p>I have this snippet of Python code that I thought would output the same, but isn't:</p>
<pre><code>import hashlib, base64
print(base64.b64encode(hashlib.sha512('password' + 'salt1234').digest()))
</code></pre>
<p>It instead results in:</p>
<pre><code>nOkBUt6l7zlKAfjtk1EfB0TmckXfDiA4FPLcpywOLORZ1PWQK4+PZVEiT4+9rFjqR3xnaruZBiRjDGcDpxxTig==
</code></pre>
<p>Not sure what I am doing wrong.</p>
<p>Another question I have is, how do I tell sha512 function to do custom rounds. It seems to take only 1 argument. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>mkpasswd</code> is a front-end to the <a href="http://linux.die.net/man/3/crypt" rel="noreferrer"><code>crypt()</code> function</a>. I don't think it is a straight-forward SHA512 hash here.</p>
<p>A little research points to the <a href="http://www.akkadia.org/drepper/SHA-crypt.txt" rel="noreferrer">specification for SHA256-crypt and SHA512-crypt</a>, which shows the hash is applied a default 5000 times. You can specify a different number of rounds using the <code>-R</code> switch to <code>mkpasswd</code>; <code>-R 5000</code> indeed gives you the same output:</p>
<pre><code>$ mkpasswd -m sha-512 -S salt1234 -R 5000 password
$6$rounds=5000$salt1234$Zr07alHmuONZlfKILiGKKULQZaBG6Qmf5smHCNH35KnciTapZ7dItwaCv5SKZ1xH9ydG59SCgkdtsTqVWGhk81
</code></pre>
<p>The minimum number of rounds offered by the command-line tool is 1000:</p>
<pre><code>$ mkpasswd -m sha-512 -S salt1234 -R 999 password
$6$rounds=1000$salt1234$SVDFHbJXYrzjGi2fA1k3ws01/D9q0ZTAh1KfRF5.ehgjVBqfHUaKqfynXefJ4DxIWxkMAITYq9mmcBl938YQ//
$ mkpasswd -m sha-512 -S salt1234 -R 1 password
$6$rounds=1000$salt1234$SVDFHbJXYrzjGi2fA1k3ws01/D9q0ZTAh1KfRF5.ehgjVBqfHUaKqfynXefJ4DxIWxkMAITYq9mmcBl938YQ//
</code></pre>
<p>The algorithm is a bit more involved, requiring you to create several digests. You <em>could</em> instead access the C <code>crypt()</code> function through the <a href="https://docs.python.org/3/library/crypt.html#crypt.crypt" rel="noreferrer"><code>crypt.crypt()</code> function</a>, and drive it the same way the <code>mkpasswd</code> commandline does.</p>
<p>It depends on your platform if the <code>SHA512-crypt</code> method is available; the Python 3 version of the <code>crypt</code> module offers a <a href="https://docs.python.org/3/library/crypt.html#crypt.methods" rel="noreferrer"><code>crypt.methods</code> list</a> that tells you what methods your platform supports. Since this use the exact same library <code>mkpasswd</code> uses, your OS obviously does support <code>SHA512-crypt</code> and Python will have access too.</p>
<p>You need to prefix the salt with <code>'$6$</code> to specify the different method. You can specify the number of rounds by adding a <code>'rounds=&lt;N&gt;$'</code> string between the <code>'$6$'</code> string and your salt:</p>
<pre><code>import crypt
import os
import random
import string

def sha512_crypt(password, salt=None, rounds=None):
    if salt is None:
        rand = random.SystemRandom()
        salt = ''.join([rand.choice(string.ascii_letters + string.digits)
                        for _ in range(8)])

    prefix = '$6$'
    if rounds is not None:
        rounds = max(1000, min(999999999, rounds or 5000))
        prefix += 'rounds={0}$'.format(rounds)
    return crypt.crypt(password, prefix + salt)
</code></pre>
<p>This then produces the same output as the <code>mkpasswd</code> command line:</p>
<pre><code>&gt;&gt;&gt; sha512_crypt('password', 'salt1234')
'$6$salt1234$Zr07alHmuONZlfKILiGKKULQZaBG6Qmf5smHCNH35KnciTapZ7dItwaCv5SKZ1xH9ydG59SCgkdtsTqVWGhk81'
&gt;&gt;&gt; sha512_crypt('password', 'salt1234', rounds=1000)
'$6$rounds=1000$salt1234$SVDFHbJXYrzjGi2fA1k3ws01/D9q0ZTAh1KfRF5.ehgjVBqfHUaKqfynXefJ4DxIWxkMAITYq9mmcBl938YQ//'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <a href="https://docs.python.org/2/library/crypt.html" rel="nofollow"><code>crypt.crypt</code></a>:</p>
<pre><code>&gt;&gt;&gt; import crypt
&gt;&gt;&gt; crypt.crypt('password', '$6$' + 'salt1234')
'$6$salt1234$Zr07alHmuONZlfKILiGKKULQZaBG6Qmf5smHCNH35KnciTapZ7dItwaCv5SKZ1xH9ydG59SCgkdtsTqVWGhk81'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a pure python3 implementation of the <code>sha512_crypt</code> function based on the specification. <strong>This is for illustration only, always use <code>crypt.crypt</code> instead!</strong></p>
<pre><code>import hashlib, base64

SHUFFLE_SHA512_INDICES = [
  42, 21,  0,     1, 43, 22,    23,  2, 44,    45, 24,  3,     4, 46, 25,
  26,  5, 47,    48, 27,  6,     7, 49, 28,    29,  8, 50,    51, 30,  9,
  10, 52, 31,    32, 11, 53,    54, 33, 12,    13, 55, 34,    35, 14, 56,
  57, 36, 15,    16, 58, 37,    38, 17, 59,    60, 39, 18,    19, 61, 40,
  41, 20, 62,    63
]

def shuffle_sha512(data):
  return bytes(data[i] for i in SHUFFLE_SHA512_INDICES)

def extend_by_repeat(data, length):
  return (data * (length // len(data) + 1))[:length]

CUSTOM_ALPHABET = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

'''  Base64 encode based on SECTION 22.e)
'''
def custom_b64encode(data, alphabet = CUSTOM_ALPHABET):
  buffer,count,result = 0,0,[]
  for byte in data:
    buffer |= byte &lt;&lt; count
    count += 8
    while count &gt;= 6:
      result.append(buffer &amp; 0x3f)
      buffer &gt;&gt;= 6
      count -= 6
  if count &gt; 0:
    result.append(buffer)
  return ''.join(alphabet[idx] for idx in result)

'''  From http://www.akkadia.org/drepper/SHA-crypt.txt
'''
def sha512_crypt(password, salt, rounds_in = None):
  rounds,rounds_defined = 5000, False
  if rounds_in is not None:
    rounds,rounds_defined = rounds_in, True

  assert 1000 &lt;= rounds &lt;= 999999999
  hash = hashlib.sha512
  salt_prefix = '$6$'
  password = password.encode('utf8')
  salt = salt.encode('ascii')[:16]


  A = hash()             # SECTION 1.
  A.update(password)     # SECTION 2.
  A.update(salt)         # SECTION 3.

  B = hash()             # SECTION 4.
  B.update(password)     # SECTION 5.
  B.update(salt)         # SECTION 6.
  B.update(password)     # SECTION 7.
  digestB = B.digest();  # SECTION 8.

  A.update(extend_by_repeat(digestB, len(password)))  # SECTION 9., 10.

  # SECTION 11.
  i = len(password)
  while i &gt; 0:
    if i &amp; 1:
      A.update(digestB)   # SECTION 11.a)
    else:
      A.update(password)  # SECTION 11.b)
    i = i &gt;&gt; 1

  digestA = A.digest()    # SECTION 12.

  DP = hash()             # SECTION 13.
  # SECTION 14.
  for _ in range(len(password)):
    DP.update(password)

  digestDP = DP.digest()  # SECTION 15.

  P = extend_by_repeat(digestDP, len(password))  # SECTION 16.a), 16.b)

  DS = hash()             # SECTION 17.
  # SECTION 18.
  for _ in range(16 + digestA[0]):
    DS.update(salt)

  digestDS = DS.digest()  # SECTION 19.

  S = extend_by_repeat(digestDS, len(salt))      # SECTION 20.a), 20.b)

  # SECTION 21.
  digest_iteration_AC = digestA
  for i in range(rounds):
    C = hash()                        # SECTION 21.a)
    if i % 2:
      C.update(P)                     # SECTION 21.b)
    else:
      C.update(digest_iteration_AC)   # SECTION 21.c)
    if i % 3:
      C.update(S)                     # SECTION 21.d)
    if i % 7:
      C.update(P)                     # SECTION 21.e)
    if i % 2:
      C.update(digest_iteration_AC)   # SECTION 21.f)
    else:
      C.update(P)                     # SECTION 21.g)

    digest_iteration_AC = C.digest()  # SECTION 21.h)

  shuffled_digest = shuffle_sha512(digest_iteration_AC)


  prefix = salt_prefix   # SECTION 22.a)

  # SECTION 22.b)
  if rounds_defined:
    prefix += 'rounds={0}$'.format(rounds_in)


  return (prefix
    + salt.decode('ascii')               # SECTION 22.c)
    + '$'                                # SECTION 22.d)
    + custom_b64encode(shuffled_digest)  # SECTION 22.e)
  )

actual = sha512_crypt('password', 'salt1234')
expected = '$6$salt1234$Zr07alHmuONZlfKILiGKKULQZaBG6Qmf5smHCNH35KnciTapZ7dItwaCv5SKZ1xH9ydG59SCgkdtsTqVWGhk81'

print(actual)
print(expected)
assert actual == expected
</code></pre>
</div>
<span class="comment-copy"><code>mkpasswd</code> is a front-end to the <a href="http://linux.die.net/man/3/crypt" rel="nofollow noreferrer"><code>crypt()</code> function</a>. I don't think it is a straight-forward SHA512 hash here.</span>
<span class="comment-copy">I think passlib might be closer to what you want <a href="https://pythonhosted.org/passlib/lib/passlib.hash.sha512_crypt.html#" rel="nofollow noreferrer">pythonhosted.org/passlib/lib/passlib.hash.sha512_crypt.html#</a> There is also a big difference between hashlib and crypto(3)</span>
<span class="comment-copy">Spec for SHA512-crypt: <a href="http://www.akkadia.org/drepper/sha-crypt.html" rel="nofollow noreferrer">akkadia.org/drepper/sha-crypt.html</a></span>
<span class="comment-copy">If you want to use passlib you can also specify rounds, to match your current output <code>sha512_crypt.encrypt(password, salt=salt, rounds=5000)</code></span>
<span class="comment-copy">You need to spend the time to read the documentation, information on hashing and and password handling. Security bugs are different, the code may seem to work and yet it is insecure. a bug or misuse may mean that there is no security. You need to understand why and what the code is doing.</span>
<span class="comment-copy">But why doesn't the code I wrote do what I expect it to do. Is the hashlib.sha512 function not the same as SHA-512 crypt? I am trying to understand the SHA-512 crypt algorithm from a high level perspective.</span>
<span class="comment-copy">@user1720897, Read Martijn Pieters' comment.</span>
