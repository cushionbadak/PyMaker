<div class="post-text" itemprop="text">
<p>For example we have a base class called A, and three sub classes called B C D, all inheritance of A. If I want some method only appear in B and C, but not in D. Where should I put this method?</p>
<p>If I put it in A, D will have the method it doesn't need. </p>
<p>If I put it in B and C, I repeat myself.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's meant to be the "same" method visible in both B and C, it sounds like you need to add another class into the hierarchy below A, but above B and C.  Let's call it E.  You'll have D and E as subclasses of A, and B and C as subclasses of E.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no 'standard' way of doing this unlike other languages.<br/>
You can override it so that it raises an exception.</p>
<pre><code>class Human( object ):
    def walk( self ):
        print 'walking...'

class Baby(Human)
    def walk( self ):
        raise NotImplementedError("can't right now")

class Teenager(Human):
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are 2 things that you can do in your concept</p>
<ol>
<li>If all B, C and D need to ineherit from A and there is a method that should not come in D from A, then maybe you need to re-work the what methods need to go in A to avoid this.</li>
<li><p>If still you cannot do any changes in A, and still D needs to inherit from A, then its best to raise the un-implemented/not-supported error like below</p>
<pre><code>class D(object):
"""docstring for D"""
def __init__(self, arg):
    super(D, self).__init__()
    self.arg = arg

def methodThatWasNotSupposedToComeHere(some_params ):
    raise NotImplementedError("This is not supported")
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Python is a very flexible language in this respect.</p>
<p>You can define your method outside of C and D classes scope, and bind it to them separately:</p>
<pre><code>class A(object):
    pass

class B(A):
    pass

def method(self):
    print '%s.method()' % type(self).__name__

class C(A):
    method = method

class D(A):
    method = method

c = C()
d = D()

c.method() # prints "C.method()"
d.method() # prints "D.method()"

print c.method # prints "&lt;bound method C.method of &lt;__main__.C object at 0x????????&gt;&gt;"
print d.method # prints "&lt;bound method D.method of &lt;__main__.D object at 0x????????&gt;&gt;"
</code></pre>
<p>You can introduce a new class that inherits from A, define your method in this class and inherit C and D from this new class. This is the 'classic' OOP approach.</p>
<p>You can implement your method in A and override it in B, telling it to raise some exception. Preferably something else than NotImplementedError as it's intended to be used in abstract classes - AttributeError seems like a better candidate. Note that if you're not going to instantiate A class in your code, it will make sense for A.method to raise NotImplementedError, effectively converting A into an abstract class.</p>
<p>You can resort to duck-typing and simply implement two identical methods in C and D. Python is big on duck-typing, but not big on duplicating code, so this might not be the best solution in this situation.</p>
</div>
<span class="comment-copy">maybe D shouldn't inherit A?</span>
<span class="comment-copy">homework question?</span>
<span class="comment-copy">@Dan yes, kind of new to OOP</span>
<span class="comment-copy">Great, I know you already accepted, but glad you chose @Wyzard. his answer is the traditional answer to OOP that carries across all OO languages</span>
<span class="comment-copy">NotImplementedError is intended for use in abstract classes, though. Some IDE's are going to raise stink about using classes with such methods.</span>
<span class="comment-copy">@Lav <code>intended for use in abstract classes</code> Can you provide some evidence of this?</span>
<span class="comment-copy">Will Python official documentation suffice? :-) Specifically, <a href="https://docs.python.org/2/library/exceptions.html#exceptions.NotImplementedError" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a> and <a href="https://docs.python.org/3/library/exceptions.html#NotImplementedError" rel="nofollow noreferrer">docs.python.org/3/library/exceptions.html#NotImplementedError</a> .</span>
<span class="comment-copy">@SaifAsif Sorry, forgot to include your name in previous comment. Anyway, I was pretty certain that using NotImplementedError in such a fashion also violates at least one PEP and did some extra research, but nope, it's legit. Still doesn't change the fact that anyone looking at your code will immediately assume that a class with NotImplementedError-raising method is an abstract class. No need to create more confusion than there already is. :-)</span>
<span class="comment-copy">Works for me and makes sense</span>
