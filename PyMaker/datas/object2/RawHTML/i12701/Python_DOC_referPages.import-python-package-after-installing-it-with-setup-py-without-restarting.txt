<div class="post-text" itemprop="text">
<p>I have a package that I would like to automatically install and use from within my own Python script.</p>
<p>Right now I have this:</p>
<pre><code>&gt;&gt;&gt; # ... code for downloading and un-targzing

&gt;&gt;&gt; from subprocess import call
&gt;&gt;&gt; call(['python', 'setup.py', 'install'])
&gt;&gt;&gt; from &lt;package&gt; import &lt;name&gt;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named &lt;package&gt;
</code></pre>
<p>Then I can continue like this:</p>
<pre><code>&gt;&gt;&gt; exit()
$ python
&gt;&gt;&gt; from &lt;package&gt; import &lt;name&gt;
</code></pre>
<p>And it works just fine. For some reason, Python is able to pick up the package just fine if I restart after running the <code>setup.py</code> file, but not if I don't. How can I make it work without having the restart step in the middle?</p>
<p>(Also, is there a superior alternative to using <code>subprocess.call()</code> to run <code>setup.py</code> within a python script? Seems silly to spawn a whole new Python interpreter from within one, but I don't know how else to pass that install argument.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on your Python version, you want to look into <a href="https://docs.python.org/2/library/imp.html" rel="nofollow"><code>imp</code></a> or <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow"><code>importlib</code></a>. </p>
<p>e.g. for Python 3, you can do:</p>
<pre><code>from importlib.machinery import SourceFileLoader
directory_name = # os.path to module
# where __init__.py is the module entry point
s = SourceFileloader(directory_name, __init__.py).load_module() 
</code></pre>
<p>or, if you're feeling brave that your Python path knows about the directory:</p>
<pre><code>map(__import__, 'new_package_name')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hope this helps,</p>
<p>I downloaded from seaborn from GitHub.</p>
<p>Through command prompt, cd to downloads\seaborn folder</p>
<pre><code>python install setup.py
</code></pre>
<p>Then using spyder from anaconda, checked if it was installed by running the following in a console</p>
<pre><code>import pip
sorted(["%s==%s" % (i.key, i.version)
     for i in pip.get_installed_distributions()])
</code></pre>
<p>Seeing that it was not there, go to tools and select "Update module names list"</p>
<p>Again trying the previous code in a python console, the lib was still not showing.</p>
<p>Restarting Spyder and trying <code>import seaborn</code> worked.</p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">are you using environments at all?</span>
<span class="comment-copy">@riotburn - Not sure what you're talking about, so I'm guessing no? I normally install everything using <code>pip</code>, just for some reason one SDK I need isn't available via PyPI - instead the company makes you download a .tar.gz from their website and tells you to run <code>setup.py</code> inside.</span>
<span class="comment-copy">+1 on the 'feeling brave' bit - if theres one file wrong in there then the entire import will fall over. I generally go for a loop over the files and import (or import the specific files). I think importlib is only from Python 2.7 and above: <a href="http://stackoverflow.com/questions/34275884/import-python-package-after-installing-it-with-setup-py-without-restarting" title="import python package after installing it with setup py without restarting">stackoverflow.com/questions/34275884/â€¦</a> seems to have a lot more details.</span>
<span class="comment-copy"><code>importlib</code> works on python3.  I use it <a href="https://github.com/tristanfisher/yams/blob/master/yams_api/plugins/dev/__init__.py#L20-L26" rel="nofollow noreferrer">in one of my projects</a>.</span>
<span class="comment-copy">oh yes, i definitely back the use of import lib - its the map bit that I think care is needed around but it all depends how much you trust your imported lib quality. (Sorry- i mispoke, i meant its only from 2.7 upwards... not just only specific 2.7)</span>
<span class="comment-copy">I just noticed one difference thing that changes after I restart python - <code>/usr/lib/python2.7/site-packages/nitro_python-1.0-py2.7.egg</code> gets added to <code>sys.path</code>. Is there some way I can force <code>sys.path</code> to reload without restarting Python? Or would manually inserting that path be my best bet (how can I even find that path in a cross-platform way?)</span>
<span class="comment-copy">Oh, Python 2 -- to refresh <code>sys.path</code>, you can <code>import site; reload(site)</code></span>
