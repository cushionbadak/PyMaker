<div class="post-text" itemprop="text">
<p>I get an UnboundLocalError when I reimport an already imported module in python 2.7. A minimal example is</p>
<pre><code>#!/usr/bin/python

import sys

def foo():
    print sys
    import sys

foo()

Traceback (most recent call last):
  File "./ptest.py", line 9, in &lt;module&gt;
    foo()
  File "./ptest.py", line 6, in foo
    print sys
UnboundLocalError: local variable 'sys' referenced before assignment
</code></pre>
<p>Howver, when the nested import is placed as the first statement in the function definition then everything works:</p>
<pre><code>#!/usr/bin/python

import sys

def foo():
    import sys
    print sys

foo()

&lt;module 'sys' (built-in)&gt;
</code></pre>
<p>Can someone please explain why the first script fails?
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the same as referencing global variable. It is well explained in <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow">Python FAQ</a></p>
<blockquote>
<p>This is because when you make an assignment to a variable in a scope,
  that variable becomes local to that scope and shadows any similarly
  named variable in the outer scope. Since the last statement in foo
  assigns a new value to x, the compiler recognizes it as a local
  variable. Consequently when the earlier print(x) attempts to print the
  uninitialized local variable and an error results.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>What's hard to understand about this situation is that when you import something inside a scope, there is an implicit assignment.  (Actually a re-assignment in this case). </p>
<p>The fact that <code>import sys</code> exists within <code>foo</code> means that, within <code>foo</code>, <code>sys</code> doesn't refer to the global <code>sys</code> variable, it refers to a separate local variable also called <code>sys</code>.</p>
</div>
<span class="comment-copy">If you remove import sys from the function, then also it will work. As there is no sys in the scope of foo() and it will refer to the sys from global scope.</span>
<span class="comment-copy">So the assignment defines the variable for the <i>whole scope</i>, and not only for that and following rows.</span>
