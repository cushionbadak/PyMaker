<div class="post-text" itemprop="text">
<p>I experienced an "AttributeError" with the following Python code:</p>
<pre><code>Def SomeFunc(Self):
    ....
    setattr(Self, "_Some_Attribute", Data)
    ....
    if hasattr(Self, "_Some_Attribute"):
        delattr(Self, "_Some_Attribute")
    ....
</code></pre>
<p>And the AttributeError was raise on the delattr line immediately after the hasattr test was positive. The panic was pretty rare. I would say once in few hundreds times.</p>
<p>SomeFunc() may be called from multiple threads.  Is it possible that another thread get in between the hasattr and delattr to remove the "_Some_Attribute" after the first thread test hasattr positive?</p>
</div>
<div class="post-text" itemprop="text">
<p>When looking up an attribute on an object, python first looks at <code>self</code> and then at the class namespace. So, instance variables and class variables both pass the <code>hasattr</code> test. Such is not the case when deleting attributes. Class variables will not be deleted.</p>
<pre><code>class C(object):

    classvar = 'foo'

    def __init__(self):
        self.instancevar = 'bar'

c = C()
print('hasattr sees instance and class vars', hasattr(c, 'classvar'), hasattr(c, 'instancevar'))
print('delete instance is fine')
delattr(c, 'instancevar')
print('but classvar is not')
delattr(c, 'classvar')
</code></pre>
<p>When run, you get your error</p>
<pre><code>hasattr sees instance and class vars True True
delete instance is fine
but classvar is not
Traceback (most recent call last):
  File "u.py", line 13, in &lt;module&gt;
    delattr(c, 'classvar')
AttributeError: classvar
</code></pre>
<p><em>EDIT</em></p>
<p>With the revised code, I can no longer reproduce. My test case below works without error.</p>
<pre><code>class C(object):
    def test(self):
        setattr(self, '_foo', 'bar')
        if hasattr(self, '_foo'):
            delattr(self, '_foo')
C().test()
print("Test Passed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not clear why the problem occurs in your case. The code snippets you gave are not enough for a conclusive analysis.</p>
<p>However, there is a solution nevertheless!</p>
<p>Instead of:</p>
<pre><code>if hasattr(Self, "_Some_Attribute"):
    delattr(Self, "_Some_Attribute")
</code></pre>
<p>Do this:</p>
<pre><code>try:
    delattr(Self, "_Some_Attribute")
except AttributeError:
    # here you choose what you want to do, some options:
    pass
    print 'delattr failed' if hasattr(Self, "_Some_Attribute") else 'ok'
    assert not hasattr(Self, "_Some_Attribute")
</code></pre>
<p><a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">It is easier to ask for forgiveness than permission.</a></p>
</div>
<span class="comment-copy">Please post actual code.</span>
<span class="comment-copy">Also, please check for duplicate <a href="http://stackoverflow.com/questions/1120927/which-is-better-in-python-del-or-delattr" title="which is better in python del or delattr">stackoverflow.com/questions/1120927/â€¦</a></span>
<span class="comment-copy"><code>hasattr</code> and <code>delattr</code> are all lowercase. Voting to close as typo.</span>
<span class="comment-copy">Sorry about the typo.  The actual code is:                 if hasattr(Self, "_Some_Attribute"):                     delattr(Self, "_Some_Attribute")</span>
<span class="comment-copy">In the other answer you mentioned <i>" The panic was pretty rare. I would say once in few hundreds times. "</i> Is this a multithreaded app? In your real code, is there more processing between the <code>hasattr</code> and <code>delattr</code> that could have logic errors? As stands, your problem is not reproducable.</span>
<span class="comment-copy">Thank you.  This is really good to know.  However, I don't that is my case.  Please see the actual code that I posted.</span>
