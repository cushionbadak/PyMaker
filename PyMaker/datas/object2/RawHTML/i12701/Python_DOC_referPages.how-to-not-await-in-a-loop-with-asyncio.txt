<div class="post-text" itemprop="text">
<p>Here is a toy example that downloads the home page from several websites using asyncio and aiohttp:</p>
<pre><code>import asyncio
import aiohttp

sites = [
    "http://google.com",
    "http://reddit.com",
    "http://wikipedia.com",
    "http://afpy.org",
    "http://httpbin.org",
    "http://stackoverflow.com",
    "http://reddit.com"
]


async def main(sites):
    for site in sites:
        download(site)


async def download(site):
    response = await client.get(site)
    content = await response.read()
    print(site, len(content))


loop = asyncio.get_event_loop()
client = aiohttp.ClientSession(loop=loop)
content = loop.run_until_complete(main(sites))
client.close()
</code></pre>
<p>If I run it, I get:</p>
<pre><code>RuntimeWarning: coroutine 'download' was never awaited
</code></pre>
<p>But I don't want to await it.</p>
<p>In twisted I can do:</p>
<pre><code>for site in sites:
    download(site)
</code></pre>
<p>And If I don't explicitly "yield" or add a callback to the returned Deferred, it just runs without blocking nor complaining. I can't access the result, but in this case I don't need it.</p>
<p>In JS I can do:</p>
<pre><code>site.forEarch(site){
    donwload(site)
}
</code></pre>
<p>And again, it doesn't block nor does it requires anything from my part.</p>
<p>I found a way to do:</p>
<pre><code>async def main(sites):
    await asyncio.wait([download(site) for site in sites])
</code></pre>
<p>But:</p>
<ul>
<li>this is really not obvious to find it out. I it's hard to remember.</li>
<li>it's hard to understand what it does. "waits" seems to say "i block", but does not convey clearly it block for the entire list of coroutine to finish.</li>
<li>you can't pass in a generator, it needs to be a real list, which i feels really unatural in Python.</li>
<li>what if I have only ONE awaitable ? </li>
<li>what if I don't want to wait at all on my tasks, and just schedule them for execution then carry on with the rest of my code ?</li>
<li>it's way more verbose thant twisted and JS solution.</li>
</ul>
<p>It there a better way ?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<ul>
<li>this is really not obvious to find it out. I it's hard to remember.</li>
</ul>
</blockquote>
<p>The documentation on <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">coroutines</a> does make it pretty clear what <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="nofollow"><code>asyncio.wait</code></a>'s purpose is.</p>
<blockquote>
<ul>
<li>it's hard to understand what it does. "waits" seems to say "i block", but does not convey clearly it block for the entire list of coroutine to finish.</li>
</ul>
</blockquote>
<p>Again, see the documentation.</p>
<blockquote>
<ul>
<li>you can't pass in a generator, it needs to be a real list, which i feels really unatural in Python.</li>
</ul>
</blockquote>
<p>Again, see the documentation, specifically <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed" rel="nofollow"><code>asyncio.as_completed</code></a></p>
<blockquote>
<ul>
<li>what if I have only ONE awaitable ?</li>
</ul>
</blockquote>
<p>It should still work.</p>
<blockquote>
<ul>
<li>what if I don't want to wait at all on my tasks, and just schedule them for execution then carry on with the rest of my code ?</li>
</ul>
</blockquote>
<p>Then you can use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="nofollow"><code>asyncio.ensure_furture</code></a>. In fact, <code>asyncio.wait</code> is a <em>convenience</em> function around <code>asyncio.ensure_future</code> (and some other logic).</p>
<blockquote>
<ul>
<li>it's way more verbose thant twisted and JS solution.</li>
</ul>
</blockquote>
<p>Maybe, but that's not a bad thing (from my perspective).</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to schedule a coroutine as a task, use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="noreferrer">asyncio.ensure_future</a>:</p>
<pre><code>for site in sites:
    coro = download(site)
    future = asyncio.ensure_future(coro)
</code></pre>
<p>It replaces the deprecated function <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.async" rel="noreferrer">asyncio.async</a> in version 3.4.4.</p>
<p>Then you can manage those futures using <code>await</code>, <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="noreferrer">asyncio.wait</a> or <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="noreferrer">asyncio.gather</a>.</p>
</div>
<span class="comment-copy">Accepted and upvoted this it does solve my problem. However : the docs are not that obvious (even Guido aknowledge that). And having to go to the doc for such a simple problem is not a sign of good ergonomics. What's more, being more verbose than Twisted and JS, 2 very verbose tech is definitly not a badge of honor. Espcially since rigth now you can run only one eventloop, so not using the default event loop automatically seems overkill. But thanks, it's way more obvious now.</span>
<span class="comment-copy">Fair enough; it's probably obvious to me because I've been using it. I can definitely understand people getting lost in the docs. There are so many sections. The asyncio docs need a tutorial like quick guide, like many of the other modules' doc have.</span>
<span class="comment-copy">I have to agree with @e-satis the docs are tough to follow.</span>
