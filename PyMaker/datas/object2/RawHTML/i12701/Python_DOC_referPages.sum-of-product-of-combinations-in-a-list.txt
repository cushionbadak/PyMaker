<div class="post-text" itemprop="text">
<p>What is the Pythonic way of summing the product of all combinations in a given list, such as:</p>
<pre><code>[1, 2, 3, 4]
--&gt; (1 * 2) + (1 * 3) + (1 * 4) + (2 * 3) + (2 * 4) + (3 * 4) = 35
</code></pre>
<p>(For this example I have taken all the two-element combinations, but it could have been different.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.combinations</code></p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3, 4]
&gt;&gt;&gt; sum([i*j for i,j in list(itertools.combinations(l, 2))])
35
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4]    
&gt;&gt;&gt; import operator
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; sum(itertools.starmap(operator.mul, itertools.combinations(l, 2)))
35
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations(a, 2)</code></a> returns:</p>
<pre><code>&gt;&gt;&gt; list(itertools.combinations(a, 2))
[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
&gt;&gt;&gt; 
</code></pre>
<p>And <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap()</code></a> does:</p>
<blockquote>
<p>Make an iterator that computes the function using arguments obtained from the iterable. Used instead of <code>map()</code> when argument parameters are already grouped in tuples from a single iterable (the data has been “pre-zipped”). </p>
</blockquote>
<p>Finally, use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a>  with a <a href="https://stackoverflow.com/questions/364802/generator-comprehension"><strong>generator comprehension</strong></a> to get the final results. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure about the pythonic way, but you could resolve this problem into a simpler one.</p>
<p>E.g. For a list [a, b, c] =&gt; result can also be written as </p>
<pre><code>( (a + b + c)^2 - (a^2 + b^2 + c^2) ) / 2
</code></pre>
<p>So, it can be written as difference of square of sum of list and sum of squares of list, divided by 2.</p>
<p>You can achieve the same as follows in python:</p>
<pre><code>a = [1,2,3,4]
( (sum(a) ** 2) - sum([x ** 2 for x in a]) ) / 2
</code></pre>
<p>P.S. I know the problem can be solved using itertools and question specifically asks for pythonic way to solve it. I think it would be much easy to do it without trying out all combinations.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is also the sum of the upper triangle of the outer vector product of the array with itself:</p>
<pre><code>import numpy as np
np.triu(np.outer([1,2,3,4],[1,2,3,4]),1).sum()
35
</code></pre>
<p>Step by step it works like this:</p>
<pre><code># outer product
np.outer([1,2,3,4],[1,2,3,4])

array([[ 1,  2,  3,  4],
       [ 2,  4,  6,  8],
       [ 3,  6,  9, 12],
       [ 4,  8, 12, 16]])

# upper triangle
np.triu(np.outer([1,2,3,4],[1,2,3,4]),1)

array([[ 0,  2,  3,  4],
       [ 0,  0,  6,  8],
       [ 0,  0,  0, 12],
       [ 0,  0,  0,  0]])

# then the sum, which is the non-zero elements
np.triu(np.outer([1,2,3,4],[1,2,3,4]),1).sum()
35
</code></pre>
</div>
<span class="comment-copy">do the combinations have to consist of 2 elements?</span>
<span class="comment-copy">I cannot decide which answer to choose as “the answer”. Is Kevin’s approach superior in any way? (Perhaps in a more general setting or whatever.)</span>
<span class="comment-copy">Shouldn't it be <code>sum([i*j for i,j in list(combinations(l, 2))])</code>?</span>
<span class="comment-copy">@blackened: If I was you, I'd accept Avinash's answer, since he's answer is clear and simple than mine. I think my answer was just used more function instead of <code>*</code> operator, it doesn't faster than Avinash, but more complex.</span>
<span class="comment-copy">@JoeR: Nope, no need create another list here.</span>
<span class="comment-copy">@kevin  previous code of mine is fater than the current one. Since I heared that, gen expresion takes more no of loops than list.</span>
<span class="comment-copy">You can also use <code>itertools.starmap</code> in place of <code>reduce</code>: <code>sum(itertools.starmap(operator.mul, itertools.combinations(l, 2)))</code>.</span>
<span class="comment-copy">@chepner: Good point, don't know that before.</span>
