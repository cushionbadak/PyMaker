<div class="post-text" itemprop="text">
<p>When debugging my homework, I realised that I needed to use <code>deepcopy</code> to copy a dictionary. </p>
<p>I expected <code>deepcopy</code> to give me results like (which is true when dealing with a dictionary with lists):</p>
<pre><code>import copy

dict3 = {1 : [1,2,3], 2 : [1,2]}    
dict4 = copy.deepcopy(dict3)        

print dict3                         # {1: [1, 2, 3], 2: [1, 2]}
print dict4                         # {1: [1, 2, 3], 2: [1, 2]}

print dict3 == dict4                # True
</code></pre>
<p>However, I found something like:</p>
<pre><code>import copy

class Fruit(object):
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def __repr__(self):
        return self.color

# Building dict1
dict1 = {}
dict1['apple'] = Fruit('apple', 'red')
dict1['banana'] = Fruit('banana', 'yellow')

# Deep copy dict1 and assign it to dict2
dict2 = copy.deepcopy(dict1)

print dict1           # {'apple': red, 'banana': yellow}
print dict2           # {'apple': red, 'banana': yellow}

print dict1 == dict2  # False
</code></pre>
<p>If I want a copy that gives me a <code>True</code> in the last <code>print</code> statement, what should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that in python, by default, a copy of an object does not compare equal to the original even if they are the "same", for example:</p>
<pre><code>class Fruit(object):
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def __repr__(self):
        return self.color

print Fruit("apple", "red") == Fruit("apple", "red")
# False
</code></pre>
<p>To fix this, you need to tell python how objects of type <code>Fruit</code> should be compared, for example:</p>
<pre><code>class Fruit(object):
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def __repr__(self):
        return self.color

    def __eq__(self, other):
        try:
            if (self.name == other.name) and (self.color == other.color):
                return True
            else:
                return False
        except AttributeError:
            return False
</code></pre>
</div>
<span class="comment-copy">You haven't implemented <code>__eq__</code> on <code>Fruit</code>...</span>
<span class="comment-copy">@jonrsharpe I didn't know that, haha. Thank you so much!</span>
<span class="comment-copy">Thank you so much!</span>
<span class="comment-copy">Just adding a link to built-in comparison rules. It is good to know what Python can compare. For everything else you have tu supply the <code>__eq__</code> as shown in Bi Rico's answer.  <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#value-comparisons</a></span>
