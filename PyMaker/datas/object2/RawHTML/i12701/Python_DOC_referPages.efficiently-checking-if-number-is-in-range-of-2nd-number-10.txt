<div class="post-text" itemprop="text">
<p>I need to write a function which checks if a number is in range of <code>10%</code> from another number.</p>
<p>I wrote this function:</p>
<pre><code>def IsCloseEntough(num1, num2 ):
    percent = num1/100
    if num1-percent &lt; num2 and num2&lt; num1+percent:
       return True;
    else:
       return False;
</code></pre>
<p>It returns <code>True</code> if  <code>num1-10% of num1 &lt; num2 &lt; num1+10%</code>. This solves the problem however it feels like this code isn't very "Python Like". Is there a way to make it simpler? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do </p>
<pre><code>def IsCloseEnough(num1, num2 ):
     return abs(float(num1 - num2) / float(num1)) &lt; 0.1 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0485/" rel="nofollow"><strong>PEP 0485</strong></a> introduced the <strong><a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow"><code>math.isclose()</code></a></strong> function (and it's complex cousin <strong><a href="https://docs.python.org/3/library/cmath.html#cmath.isclose" rel="nofollow"><code>cmath.isclose()</code></a></strong> for making these sort of checks; it also checks for special values such as <code>NaN</code>, <code>Inf</code> et al. <em>The apparent downside is,</em> it <strong>only</strong> appears in <code>Python 3.5</code> from what I know and it's still in it's infancy so it might get some face-lifts in the future. </p>
<p>Basic functionality:</p>
<pre><code>math.isclose(1, 1.09, abs_tol=0.1)
Out[20]: True

math.isclose(1.0, 1.2, abs_tol=0.1)
Out[23]: False

math.isclose(1.0, 0.9, abs_tol=0.1)
Out[24]: True
</code></pre>
<p>This is a built-in (so you could use it efficiently with things like <code>filter()</code> ) that's made to check how close two numerics are and allows for greater flexibility when trying to find approximations. </p>
<p>Internally it uses the <code>abs</code> solutions in a similar manner presented here, take a look at the <a href="https://hg.python.org/cpython/file/tip/Modules/mathmodule.c#l1994" rel="nofollow"><strong><code>C</code> source</strong></a> for yourself, it is most likely as efficient as it can get. (A version of it python can be found <a href="https://github.com/PythonCHB/close_pep/blob/master/is_close.py" rel="nofollow"><code>here</code></a>)</p>
<p>For older versions of Python, you could use the solutions already pointed out or look at how <code>math.isclose()</code> was implemented and get inspired.</p>
<hr/>
<p>Note that in most cases <code>rel_tol</code> should be specified, unless dealing with values near <code>0</code>. Additionally, for cases where array elements should be evaluated, the most efficient use is probably supplied by the <strong><a href="http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.isclose.html#numpy-isclose" rel="nofollow"><code>numpy.isclose()</code></a></strong> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the clearest way is very close to your function, with a few alterations:</p>
<ul>
<li>you check whether the number is within 1%, not within 10%</li>
<li>you can use comparison chaining</li>
<li>you can directly return the result, instead of using an <code>if/else</code></li>
</ul>
<p>Like this:</p>
<pre><code>def isCloseEnough(num1, num2):
    return num1 * 0.9 &lt; num2 &lt; num1 * 1.1
</code></pre>
</div>
<span class="comment-copy">you can do <code>return abs(num1 - num2) &lt; 0.1 * num1</code></span>
<span class="comment-copy">@Drjnker mate you should answer it :)</span>
<span class="comment-copy">you can do also: <code>1 - (num1 / float(num2)) &lt; 0.1</code></span>
<span class="comment-copy">Wouldn't using <code>rel_tol=0.1</code> be more appropriate here than <code>abs_tol</code>? Sure, for <code>num1=1</code> it's the same, but in the general case...</span>
