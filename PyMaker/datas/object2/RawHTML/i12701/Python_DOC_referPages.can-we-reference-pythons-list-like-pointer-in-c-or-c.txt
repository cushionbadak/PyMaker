<div class="post-text" itemprop="text">
<p>I have a large list <code>l</code>. I want to create a view from element 4 to 6. I can do it with sequence slice.</p>
<pre><code>&gt;&gt;&gt; l=range(10)
&gt;&gt;&gt; lv=l[3:6]
&gt;&gt;&gt; lv
[3, 4, 5]
</code></pre>
<p>However lv is copy of a slice of l. If I change the underlying list, lv does not reflect the change.</p>
<pre><code>&gt;&gt;&gt; l[4] = -1
&gt;&gt;&gt; lv
[3, 4, 5]
</code></pre>
<p>Vice versa I want modification on lv reflect in l as well. Other than that the list size are not going to be changed.</p>
<p>I'm not look forward to build a big class to do this. I'm just hoping other Python gurus may know some hidden language trick. Ideally I hope it can like pointer arithmetic in C.</p>
<pre><code>int lv[] = l + 3;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no "list slice" class in the Python standard library (nor is one built-in).  So, you do need a class, though it need not be big -- especially if you're content with a "readonly" and "compact" slice.  E.g.:</p>
<pre><code>import collections

class ROListSlice(collections.Sequence):

    def __init__(self, alist, start, alen):
        self.alist = alist
        self.start = start
        self.alen = alen

    def __len__(self):
        return self.alen

    def adj(self, i):
        if i&lt;0: i += self.alen
        return i + self.start

    def __getitem__(self, i):
        return self.alist[self.adj(i)]
</code></pre>
<p>This has some limitations (doesn't support "slicing a slice") but for most purposes might be OK.</p>
<p>To make this sequence r/w you need to add <code>__setitem__</code>, <code>__delitem__</code>, and <code>insert</code>:</p>
<pre><code>class ListSlice(ROListSlice):

    def __setitem__(self, i, v):
        self.alist[self.adj(i)] = v

    def __delitem__(self, i, v):
        del self.alist[self.adj(i)]
        self.alen -= 1

    def insert(self, i, v):
        self.alist.insert(self.adj(i), v)
        self.alen += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps just use a numpy array:</p>
<pre><code>In [19]: import numpy as np

In [20]: l=np.arange(10)
</code></pre>
<p>Basic slicing numpy arrays <a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#basic-slicing" rel="noreferrer">returns a view</a>, not a copy:</p>
<pre><code>In [21]: lv=l[3:6]

In [22]: lv
Out[22]: array([3, 4, 5])
</code></pre>
<p>Altering <code>l</code> affects <code>lv</code>:</p>
<pre><code>In [23]: l[4]=-1

In [24]: lv
Out[24]: array([ 3, -1,  5])
</code></pre>
<p>And altering <code>lv</code> affects <code>l</code>:</p>
<pre><code>In [25]: lv[1]=4

In [26]: l
Out[26]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do that by creating your own generator using the original list reference.</p>
<pre><code>l = [1,2,3,4,5]
lv = (l[i] for i in range(1,4))

lv.next()   # 2
l[2]=-1
lv.next()   # -1
lv.next()   # 4
</code></pre>
<p>However this being a generator, you can only go through the list once, forwards and it will explode if you remove more elements than you requested with <code>range</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://gist.github.com/mathieucaroff/0cf094325fb5294fb54c6a577f05a2c1" rel="nofollow noreferrer">https://gist.github.com/mathieucaroff/0cf094325fb5294fb54c6a577f05a2c1</a></p>
<p>Above link is a solution based on python 3 range ability to be sliced and
indexed in constant time.</p>
<p>It supports slicing, equality comparsion, string casting (<code>__str__</code>), and
reproducers (<code>__repr__</code>), but doesn't support assigment.</p>
<p>Creating a SliceableSequenceView of a SliceableSequenceView won't slow down
access times as this case is detected.</p>
<h3>sequenceView.py</h3>
<p></p>
<pre><code># stackoverflow.com/q/3485475/can-i-create-a-view-on-a-python-list
try:
    from collections.abc import Sequence
except ImportError:
    from collections import Sequence # pylint: disable=no-name-in-module

class SliceableSequenceView(Sequence):
    """
    A read-only sequence which allows slicing without copying the viewed list.
    Supports negative indexes.
    Usage:
        li = list(range(100))
        s = SliceableSequenceView(li)
        u = SliceableSequenceView(li, slice(1,7,2))
        v = s[1:7:2]
        w = s[-99:-93:2]
        li[1] += 10
        assert li[1:7:2] == list(u) == list(v) == list(w)
    """
    __slots__ = "seq range".split()
    def __init__(self, seq, sliced=None):
        """
        Accept any sequence (such as lists, strings or ranges).
        """
        if sliced is None:
            sliced = slice(len(seq))
        l = looksSliceable = True
        l = l and hasattr(seq, "seq") and isinstance(seq.seq, Sequence)
        l = l and hasattr(seq, "range") and isinstance(seq.range, range)
        looksSliceable = l
        if looksSliceable:
            self.seq = seq.seq
            self.range = seq.range[sliced]
        else:
            self.seq = seq
            self.range = range(len(seq))[sliced]

    def __len__(self):
        return len(self.range)

    def __getitem__(self, i):
        if isinstance(i, slice):
            return SliceableSequenceView(self.seq, i)
        return self.seq[self.range[i]]

    def __str__(self):
        r = self.range
        s = slice(r.start, r.stop, r.step)
        return str(self.seq[s])

    def __repr__(self):
        r = self.range
        s = slice(r.start, r.stop, r.step)
        return "SliceableSequenceView({!r})".format(self.seq[s])

    def equal(self, otherSequence):
        if self is otherSequence:
            return True
        if len(self) != len(otherSequence):
            return False
        for v, w in zip(self, otherSequence):
            if v != w:
                print(v, w)
                return False
        return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong> <code>The object argument must be an object that supports the buffer call interface (such as strings, arrays, and buffers).</code> - so no, sadly.</p>
<p>I think <a href="https://stackoverflow.com/questions/3422685/what-is-python-buffer-type-for">buffer type</a> is what you are looking for.</p>
<p>Pasting example from linked page:</p>
<pre><code>&gt;&gt;&gt; s = bytearray(1000000)   # a million zeroed bytes
&gt;&gt;&gt; t = buffer(s, 1)         # slice cuts off the first byte
&gt;&gt;&gt; s[1] = 5                 # set the second element in s
&gt;&gt;&gt; t[0]                     # which is now also the first element in t!
'\x05' 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As soon as you will take a slice from a list, you will be creating a new list. Ok, it will contain same objects so as long as objects of the list are concerned it would be the same, but if you modify a slice the original list is unchanged.</p>
<p>If you really want to create a modifiable view, you could imagine a new class based on <code>collection.MutableSequence</code></p>
<p>This could be a starting point for a full featured sub list - it correctly processes slice indexes, but at least is lacking specification for negative indexes processing:</p>
<pre><code>class Sublist(collections.MutableSequence):
    def __init__(self, ls, beg, end):
        self.ls = ls
        self.beg = beg
        self.end = end
    def __getitem__(self, i):
        self._valid(i)
        return self.ls[self._newindex(i)]
    def __delitem__(self, i):
        self._valid(i)
        del self.ls[self._newindex(i)]
    def insert(self, i, x):
        self._valid(i)
        self.ls.insert(i+ self.beg, x)
    def __len__(self):
        return self.end - self.beg
    def __setitem__(self, i, x):
        self.ls[self._newindex(i)] = x
    def _valid(self, i):
        if isinstance(i, slice):
            self._valid(i.start)
            self._valid(i.stop)
        elif isinstance(i, int):
            if i&lt;0 or i&gt;=self.__len__():
                raise IndexError()
        else:
            raise TypeError()
    def _newindex(self, i):
        if isinstance(i, slice):
            return slice(self.beg + i.start, self.beg + i.stop, i.step)
        else:
            return i + self.beg
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; a = list(range(10))
&gt;&gt;&gt; s = Sublist(a, 3, 8)
&gt;&gt;&gt; s[2:4]
[5, 6]
&gt;&gt;&gt; s[2] = 15
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 15, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are going to be accessing the "view" sequentially then you can just use itertools.islice(..)<a href="https://docs.python.org/dev/library/itertools.html#itertools.islice" rel="nofollow">You can see the documentation for more info</a>.</p>
<pre><code>l = [1, 2, 3, 4, 5]
d = [1:3] #[2, 3]
d = itertools.islice(2, 3) # iterator yielding -&gt; 2, 3
</code></pre>
<p>You can't access individual elements to change them in the slice and if you do change the list you have to re-call isclice(..).</p>
</div>
<div class="post-text" itemprop="text">
<p>Subclass the <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.SequenceView" rel="nofollow noreferrer"><code>more_itertools.SequenceView</code></a> to affect views by mutating sequences and vice versa.</p>
<p><strong>Code</strong></p>
<pre><code>import more_itertools as mit


class SequenceView(mit.SequenceView):
    """Overload assignments in views."""
    def __setitem__(self, index, item):
        self._target[index] = item
</code></pre>
<p><strong>Demo</strong></p>
<pre><code>&gt;&gt;&gt; seq = list(range(10))
&gt;&gt;&gt; view = SequenceView(seq)
&gt;&gt;&gt; view
SequenceView([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

&gt;&gt;&gt; # Mutate Sequence -&gt; Affect View
&gt;&gt;&gt; seq[6] = -1
&gt;&gt;&gt; view[5:8]
[5, -1, 7]

&gt;&gt;&gt; # Mutate View -&gt; Affect Sequence
&gt;&gt;&gt; view[5] = -2
&gt;&gt;&gt; seq[5:8]
[-2, -1, 7]
</code></pre>
<p><a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> is a third-party library.  Install via <code>&gt; pip install more_itertools</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could <strong><em>edit: not</em></strong> do something like</p>
<pre><code>shiftedlist = type('ShiftedList',
                   (list,),
                   {"__getitem__": lambda self, i: list.__getitem__(self, i + 3)}
                  )([1, 2, 3, 4, 5, 6])
</code></pre>
<p>Being essentially a one-liner, it's not very Pythonic, but that's the basic gist.</p>
<p><strong><em>edit:</em></strong> I've belatedly realized that this doesn't work because <code>list()</code> will essentially do a shallow copy of the list it's passed.  So this will end up being more or less the same as just slicing the list.  Actually less, due to a missing override of <code>__len__</code>.  You'll need to use a proxy class; see <a href="https://stackoverflow.com/questions/3485475/can-i-create-a-view-on-a-python-list/3485507#answer-3485490">Mr. Martelli's answer</a> for the details.</p>
</div>
<span class="comment-copy">@robert How? The <code>memoryview</code> works only for objects with buffer interface and list is not one of them.</span>
<span class="comment-copy">In the example provided here you should use a <code>bytearray</code> instead of a list. You may also wrap the list in <code>bytearray</code>.</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/c-api/buffer.html" rel="nofollow noreferrer">buffer protocol</a>, since the <code>memoryview</code> docs don't link to it.</span>
<span class="comment-copy">Could you do something like <code>def __slice__(self, *args, **kwargs): return (self.alist[self.start:self.start+self.alen]).__slice__(*args, **kwargs)</code> to support things like slicing? Basically passing through the request to a slice created on-demand.</span>
<span class="comment-copy">But if you do <code>alist.insert(0, something)</code> the slice moves! That might or might not be a problem ...</span>
<span class="comment-copy">@Amber, <code>__slice__</code> is not a special method in Python.  Slicing results in calls to <code>__getindex__</code>, <code>__setindex__</code>, <code>__delindex__</code>, so you'd have to typecheck and adjust that (easier for the getting, as your approach will delegate things OK -- harder for setting and deleting, though).</span>
<span class="comment-copy">@Alex: Hm. I could have sworn that there were ways to override slicing (say, to allow for things like 2-dimensional slicing). But I could be wrong. :)</span>
<span class="comment-copy">@Amber, of course you can "override slicing" -- you do that by overriding <code>__getitem__</code> (and maybe the set and del ones as well, for a type with mutable instances), and type-checking / type-switching on the "index" argument (e.g., to allow <code>a[1:2,3:4]</code>, you deal with receiving, as the "index" argument, a tuple with two items, both of them slice objects).</span>
<span class="comment-copy">there is no <code>buffer()</code> builtin in Python 3. <code>memoryview()</code> could be used instead.</span>
<span class="comment-copy">Also, this inspects the in memory bytes of the area  - Python lists do contain objects (which 'in memory' are pointer to the objects ) so - definetelly, this would be  a very wrong approach - One would have to use <code>ctypes</code> , and redo all the Pointer indirection work, as if he was coding in C,  that Python does for free</span>
<span class="comment-copy">This is a direct answer to another question that was closed as a duplicate from this one. As other answers from here were relevant, I prefered add it here</span>
<span class="comment-copy">plus one for making me discover <code>more_itertools</code>, though I won't be using your code</span>
<span class="comment-copy">No worries.  <code>more_itertools</code> is a great toolbox.  I encourage people to explore it.</span>
