<div class="post-text" itemprop="text">
<p>I know in languages such as C, C++, Java and C#, (<a href="https://stackoverflow.com/questions/3374909/do-else-if-statements-exist-in-c">C# example</a>)the <code>else if</code> statement is syntactic sugar, in that it's really just a one <code>else</code> statement followed by an <code>if</code> statement. </p>
<pre><code>else if (conition(s)) { ...
</code></pre>
<p>is equal to </p>
<pre><code>else {
    if (condition(s)) { ...
}
</code></pre>
<p>However, in python, there is a special <code>elif</code> statement. I've been wondering if this is just shorthand for developers or if there is some hidden optimization python can do because of this, such as be interpreted faster? But this wouldn't make sense to me, as other languages would be doing it too then (such as JavaScript). So, my question is, in python is the <code>elif</code> statement just shorthand for the developers to use or is there something hidden that it gains through doing so? </p>
</div>
<div class="post-text" itemprop="text">
<p>When you really want to know what is going on behind the scenes in the interpreter, you can use the <code>dis</code> module.  In this case:</p>
<pre><code>&gt;&gt;&gt; def f1():
...   if a:
...     b = 1
...   elif aa:
...     b = 2
... 
&gt;&gt;&gt; def f2():
...   if a:
...     b = 1
...   else:
...     if aa:
...       b = 2
... 
&gt;&gt;&gt; dis.dis(f1)
  2           0 LOAD_GLOBAL              0 (a)
              3 POP_JUMP_IF_FALSE       15

  3           6 LOAD_CONST               1 (1)
              9 STORE_FAST               0 (b)
             12 JUMP_FORWARD            15 (to 30)

  4     &gt;&gt;   15 LOAD_GLOBAL              1 (aa)
             18 POP_JUMP_IF_FALSE       30

  5          21 LOAD_CONST               2 (2)
             24 STORE_FAST               0 (b)
             27 JUMP_FORWARD             0 (to 30)
        &gt;&gt;   30 LOAD_CONST               0 (None)
             33 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(f2)
  2           0 LOAD_GLOBAL              0 (a)
              3 POP_JUMP_IF_FALSE       15

  3           6 LOAD_CONST               1 (1)
              9 STORE_FAST               0 (b)
             12 JUMP_FORWARD            15 (to 30)

  5     &gt;&gt;   15 LOAD_GLOBAL              1 (aa)
             18 POP_JUMP_IF_FALSE       30

  6          21 LOAD_CONST               2 (2)
             24 STORE_FAST               0 (b)
             27 JUMP_FORWARD             0 (to 30)
        &gt;&gt;   30 LOAD_CONST               0 (None)
             33 RETURN_VALUE        
</code></pre>
<p>It looks like our two functions are using the same bytecode -- So apparently they're equivalent.</p>
<p>Careful though, bytecode is an implementation detail of CPython -- There's no telling that <em>all</em> python implementations do the same thing behind the scenes -- All that matters is that they have the same behavior.  Working through the logic, you can convince yourself that <code>f1</code> and <code>f2</code> should do the same thing regardless of whether the underlying implementation treats it as "syntatic sugar" or if there is something more sophisticated going on.</p>
</div>
<div class="post-text" itemprop="text">
<p>The keyword ‘elif‘ is short for ‘else if’, and is useful to avoid excessive indentation.<a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow">Source</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>elif</code> in Python is syntactic sugar for <code>else if</code> seen in many other languages. That's all.</p>
</div>
<div class="post-text" itemprop="text">
<p>The three following code snippets would all execute using the same logic however all use different syntax.</p>
<pre><code>elif condition: ...
</code></pre>
<pre><code>else if conition { ...
</code></pre>
<pre><code>else {
    if conition { ...
}
</code></pre>
<p>Python's <code>elif</code> is just syntactic sugar for the common <code>else if</code> statement  </p>
</div>
<span class="comment-copy"><code>else if</code> isn't even syntactic sugar (at least in C++). It's the actual bare syntax, not sugar coated. It's just a bit misleading because of the way we choose to write it.</span>
<span class="comment-copy">I haven't encountered the <code>dis</code> module before, thank for pointing it out, I'll read more about it. It might be useful if I'm ever writing a script that needs every performance boost it can get or I'm curious about something like this again.</span>
<span class="comment-copy">@Zequ -- Yeah, it's really good for understanding what the interpreter is doing.  I've never used it in a script -- Only for toy problems to figure out how Python works.  Another useful module for performance is <code>timeit</code> -- Nothing's slow until you actually measure it ;-).</span>
<span class="comment-copy">Yeah, I've had that happen, where the bottleneck of the program turns out to be a completely different part than the one you were optimizing. <code>timeit</code> will be useful :D</span>
<span class="comment-copy">@Zequ:  Have you ever had the bottleneck actually <i>be</i> where you thought it was?  I have; twice - in 35 years.</span>
<span class="comment-copy">I skimmed over that page, didn't notice the statement about the <code>elif</code>. Thank you pointing it out!</span>
<span class="comment-copy">Thank you, I just wanted to confirm that my guess was right</span>
