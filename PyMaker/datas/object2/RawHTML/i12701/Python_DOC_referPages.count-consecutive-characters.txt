<div class="post-text" itemprop="text">
<p><strong>EDITED</strong>
How would I count consecutive characters in Python to see the number of times each unique digit repeats before the next unique digit? I'm very new to this language so I am looking for something simple.</p>
<p>At first I thought I could do something like:</p>
<pre><code>word = '1000'

counter=0
print range(len(word))


for i in range(len(word)-1):
    while word[i]==word[i+1]:
        counter +=1
        print counter*"0"
    else:
        counter=1
        print counter*"1"
</code></pre>
<p>So that in this manner I could see the number of times each unique digit repeats. But this of course falls out of range when <code>i</code> reaches the last value.</p>
<p><strong>In the example above, I would want Python to tell me that 1 repeats 1, and that 0 repeats 3 times.</strong> The code above fails, however, because of my while statement.</p>
<p>I know you can do this with just built-in functions, and would prefer a solution that way. Anyone have any insights?</p>
</div>
<div class="post-text" itemprop="text">
<p>A solution "that way", with only basic statements:    </p>
<pre><code>word="100011010" #word = "1"
count=1
length=""
if len(word)&gt;1:
    for i in range(1,len(word)):
       if word[i-1]==word[i]:
          count+=1
       else :
           length += word[i-1]+" repeats "+str(count)+", "
           count=1
    length += ("and "+word[i]+" repeats "+str(count))
</code></pre>
<p>else:
        i=0
        length += ("and "+word[i]+" repeats "+str(count))
   print (length)</p>
<p>display :</p>
<pre><code>'1 repeats 1, 0 repeats 3, 1 repeats 2, 0 repeats 1, 1 repeats 1, and 0 repeats 1'
</code></pre>
<p>#'1 repeats 1'</p>
</div>
<div class="post-text" itemprop="text">
<h2>Consecutive counts:</h2>
<p>Ooh nobody's posted <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a> yet!</p>
<pre><code>s = "111000222334455555"

from itertools import groupby

groups = groupby(s)
result = [(label, sum(1 for _ in group)) for label, group in groups]
</code></pre>
<p>After which, <code>result</code> looks like:</p>
<pre><code>[("1": 3), ("0", 3), ("2", 3), ("3", 2), ("4", 2), ("5", 5)]
</code></pre>
<p>And you could format with something like:</p>
<pre><code>", ".join("{}x{}".format(label, count) for label, count in result)
# "1x3, 0x3, 2x3, 3x2, 4x2, 5x5"
</code></pre>
<h2>Total counts:</h2>
<p>Someone in the comments is concerned that you want a <em>total</em> count of numbers so <code>"11100111" -&gt; {"1":6, "0":2}</code>. In that case you want to use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

s = "11100111"
result = Counter(s)
# {"1":6, "0":2}
</code></pre>
<h2>Your method:</h2>
<p>As many have pointed out, your method fails because you're looping through <code>range(len(s))</code> but addressing <code>s[i+1]</code>. This leads to an off-by-one error when <code>i</code> is pointing at the last index of <code>s</code>, so <code>i+1</code> raises an <code>IndexError</code>. One way to fix this would be to loop through <code>range(len(s)-1)</code>, but it's more pythonic to generate something to iterate over.</p>
<p>For string that's not absolutely huge, <code>zip(s, s[1:])</code> isn't a a performance issue, so you could do:</p>
<pre><code>counts = []
count = 1
for a, b in zip(s, s[1:]):
    if a==b:
        count += 1
    else:
        counts.append((a, count))
        count = 1
</code></pre>
<p>The only problem being that you'll have to special-case the last character if it's unique. That can be fixed with <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="noreferrer"><code>itertools.zip_longest</code></a></p>
<pre><code>import itertools

counts = []
count = 1
for a, b in itertools.zip_longest(s, s[1:], fillvalue=None):
    if a==b:
        count += 1
    else:
        counts.append((a, count))
</code></pre>
<p>If you do have a truly <em>huge</em> string and can't stand to hold two of them in memory at a time, you can use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>itertools</code> recipe <code>pairwise</code></a>.</p>
<pre><code>def pairwise(iterable):
    """iterates pairwise without holding an extra copy of iterable in memory"""
    a, b = itertools.tee(iterable)
    next(b, None)
    return itertools.zip_longest(a, b, fillvalue=None)

counts = []
count = 1
for a, b in pairwise(s):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Totals (without sub-groupings)</h3>
<pre><code>#!/usr/bin/python3 -B

charseq = 'abbcccdddd'
distros = { c:1 for c in charseq  }

for c in range(len(charseq)-1):
    if charseq[c] == charseq[c+1]:
        distros[charseq[c]] += 1

print(distros)
</code></pre>
<p>I'll provide a brief explanation for the interesting lines.</p>
<pre><code>distros = { c:1 for c in charseq  }
</code></pre>
<p>The line above is a dictionary comprehension, and it basically iterates over the characters in <code>charseq</code> and creates a key/value pair for a dictionary where the key is the character and the value is the number of times it has been encountered so far.</p>
<p>Then comes the loop:</p>
<pre><code>for c in range(len(charseq)-1):
</code></pre>
<p>We go from <code>0</code> to <code>length - 1</code> to avoid going out of bounds with the <code>c+1</code> indexing in the loop's body.</p>
<pre><code>if charseq[c] == charseq[c+1]:
    distros[charseq[c]] += 1
</code></pre>
<p>At this point, every match we encounter we know is consecutive, so we simply add 1 to the character key. For example, if we take a snapshot of one iteration, the code could look like this (using direct values instead of variables, for illustrative purposes):</p>
<pre><code># replacing vars for their values
if charseq[1] == charseq[1+1]:
    distros[charseq[1]] += 1

# this is a snapshot of a single comparison here and what happens later
if 'b' == 'b':
    distros['b'] += 1
</code></pre>
<p>You can see the program output below with the correct counts:</p>
<pre><code>➜  /tmp  ./counter.py
{'b': 2, 'a': 1, 'c': 3, 'd': 4}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You only need to change <code>len(word)</code> to <code>len(word) - 1</code>. That said, you could also use the fact that <code>False</code>'s value is 0 and <code>True</code>'s value is 1 with <code>sum</code>:</p>
<pre><code>sum(word[i] == word[i+1] for i in range(len(word)-1))
</code></pre>
<p>This produces the sum of <code>(False, True, True, False)</code> where <code>False</code> is 0 and <code>True</code> is 1 - which is what you're after.</p>
<p>If you want this to be safe you need to guard empty words (index -1 access):</p>
<pre><code>sum(word[i] == word[i+1] for i in range(max(0, len(word)-1)))
</code></pre>
<p>And this can be improved with <code>zip</code>:</p>
<pre><code>sum(c1 == c2 for c1, c2 in zip(word[:-1], word[1:]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is my simple code for finding maximum number of consecutive 1's in binaray string in python 3:</p>
<pre><code>count= 0
maxcount = 0
for i in str(bin(13)):
    if i == '1':
        count +=1
    elif count &gt; maxcount:
        maxcount = count;
        count = 0
    else:
        count = 0
if count &gt; maxcount: maxcount = count        
maxcount
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unique method:- In case if you are just looking for counting consecutive 1's
Using Bit Magic: The idea is based on the concept that if we AND a bit sequence with a shifted version of itself, we’re effectively removing the trailing 1 from every sequence of consecutive 1s.</p>
<pre><code>  11101111   (x)
&amp; 11011110   (x &lt;&lt; 1)
----------
  11001110   (x &amp; (x &lt;&lt; 1)) 
    ^    ^
    |    |
</code></pre>
<p>trailing 1 removed
So the operation x = (x &amp; (x &lt;&lt; 1)) reduces length of every sequence of 1s by one in binary representation of x. If we keep doing this operation in a loop, we end up with x = 0. The number of iterations required to reach 0 is actually length of the longest consecutive sequence of 1s.</p>
</div>
<div class="post-text" itemprop="text">
<p>If we want to count <strong>consecutive</strong> characters <strong>without looping</strong>, we can make use of <code>pandas</code>:</p>
<pre><code>In [1]: import pandas as pd

In [2]: sample = 'abbcccddddaaaaffaaa'
In [3]: d = pd.Series(list(sample))

In [4]: [(cat[1], grp.shape[0]) for cat, grp in d.groupby([d.ne(d.shift()).cumsum(), d])]
Out[4]: [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('a', 4), ('f', 2), ('a', 3)]
</code></pre>
<p>The key is to find <strong>the first elements</strong> that are different from their previous values and then make proper groupings in <code>pandas</code>:</p>
<pre><code>In [5]: sample = 'abba'
In [6]: d = pd.Series(list(sample))

In [7]: d.ne(d.shift())
Out[7]:
0     True
1     True
2    False
3     True
dtype: bool

In [8]: d.ne(d.shift()).cumsum()
Out[8]:
0    1
1    2
2    2
3    3
dtype: int32
</code></pre>
</div>
<span class="comment-copy">What wrong with using <code>len(word) - 1</code>? Would also think you would need to initialize <code>counter</code> to 1</span>
<span class="comment-copy">OK that actually helps a lot .... I'll keep working and see if I can come up with a solution!</span>
<span class="comment-copy">why dont you add another if clause checking if i is bigger than len(word)</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/34401733/count-number-of-specific-elements-in-between-other-elements-in-list">Count number of specific elements in between other elements in list</a></span>
<span class="comment-copy">If your string was, instead, <code>'100011'</code> what would you want the output to be? My answer assumes <code>[("1", 1), ("0", 3), ("1", 2)]</code> but maybe you want something more nuanced than that?</span>
<span class="comment-copy">@baldr thanks for the <code>list</code> cast edit. I forgot it gives you some funky view instead with no <code>__len__</code> defined. I prefer to sum the generator in those cases rather than building a list to throw away but YMMV</span>
<span class="comment-copy">Isn't this just counting? What if you separate some of the numbers, like <code>11122111</code>?</span>
<span class="comment-copy">@ray Then you get <code>[("1", 3), ("2", 2), ("1", 3)]</code>. The OP wants <i>consecutive</i> characters.</span>
<span class="comment-copy">If you think they want a count of <i>all</i> characters, then you just do <code>collections.Counter(s)</code> and call it a day.</span>
<span class="comment-copy">@AdamSmith: I gave you my +1. I think your answer is good and the use of built-in functionality is also better. It was at least my understanding (before OP's edit) that the OP was interested in an algorithm rather than built-in way of doing it.</span>
<span class="comment-copy">He don't need just a count. He asks for the consecutive chars. Like: <code>aabbbcdefabc</code>: <code>a:2, b:3, c:1, d:1, ...</code></span>
<span class="comment-copy">Replace <code>for c in sentence</code> with <code>for c in zip(sentence, sentence[1:])</code></span>
<span class="comment-copy">@inspectorG4dget: Did something a bit different as that change would not have worked with the previous code.</span>
<span class="comment-copy">@ray: Won't work for <code>abbcccddddaaaaffaaa</code></span>
<span class="comment-copy">@baldr: It produces <code>{'a': 6, 'd': 4, 'f': 2, 'b': 2, 'c': 3}</code>. It looks ok to me. If it won't work, can you be more specific on what, exactly, you think the issue is?</span>
<span class="comment-copy">What I am actually trying to do is something like this:</span>
<span class="comment-copy">This doesn't really answer the question. OP wants to count the number of consecutive characters for each character in the string.</span>
