<div class="post-text" itemprop="text">
<p>I have a bunch of strings written in hours that I want converted to minutes</p>
<p>Some example input strings:</p>
<pre><code>50 hour
5 hrs
3 hours
5hrs
1hour
</code></pre>
<p>I'm trying to come up some regex that will capture all of them and convert the whole thing to an integer that the minute value</p>
<p>The above will turn into:</p>
<pre><code>3000
300
180
300
60
</code></pre>
<p>I'm not too familiar with regex. I started playing around with something like this:</p>
<pre><code>re.sub(r'^\d+[a-z]', 'blah', string)
</code></pre>
<p>However that doesn't appear to catch much at all. Only situations where theres a single digit followed by a letter. Furthermore, I'm not sure how to actually do the conversion into minutes</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> can accpet a replace function instead of a replacement string. The function will be called with match object, and the return value of the function is used as a replacement string.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; strings =[
...     '50 hour',
...     '5 hrs',
...     '3 hours',
...     '5hrs',
...     '1hour',
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; for original in strings:
...     replaced = re.sub(r'(\d+)\s*(?:hours?\b|hrs?\b)',
...                       lambda m: str(int(m.group(1)) * 60),
...                       original)
...     print('{} =&gt; {}'.format(original, replaced))
... 
50 hour =&gt; 3000
5 hrs =&gt; 300
3 hours =&gt; 180
5hrs =&gt; 300
1hour =&gt; 60
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Get first all digits string from the data by regular expression.</li>
<li>use map to convert from String to  Integer.</li>
<li>use join or for look to generate final output.</li>
</ol>
<p><strong>Code</strong>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; data = """50 hour
... 5 hrs
... 3 hours
... 5hrs
... 1hour"""
&gt;&gt;&gt; v = re.findall("([\d]+) *h", data)
&gt;&gt;&gt; v
['50', '5', '3', '5', '1']
&gt;&gt;&gt; v = map(int, v)
&gt;&gt;&gt; v
[50, 5, 3, 5, 1]
&gt;&gt;&gt; [i*60 for i in v]
[3000, 300, 180, 300, 60]
&gt;&gt;&gt; data1 = ""
&gt;&gt;&gt; for i in v:
...     data1 += "\n%s"%(i*60)
... 
&gt;&gt;&gt; print data1

3000
300
180
300
60
&gt;&gt;&gt; 

&gt;&gt;&gt; print '\n'.join([str(i*60) for i in v])
</code></pre>
<p>Best to go with string processing.</p>
</div>
<span class="comment-copy">Is the input always going to be in hours? What else is going to be the same in the input every time?</span>
<span class="comment-copy">Hmm...I'm not sure if this is useful or not, however this will also match <code>111 home</code> or <code>111 has</code>, etc.</span>
<span class="comment-copy">:) yes, regular expression is risky. we can add <code>or</code> condition in re which given by falsetru in his answer. I will go with string processing for such kind of inputs.</span>
