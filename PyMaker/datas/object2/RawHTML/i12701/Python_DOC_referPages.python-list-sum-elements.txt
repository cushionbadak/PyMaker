<div class="post-text" itemprop="text">
<p>I have this list in Python:</p>
<pre><code>[['jhidalgo', 19, u'6,8'],
['jhidalgo', 19, u'5,3'],
['jhidalgo', 20, u'7'],
['jhidalgo', 20, u'0,4'],
['jhidalgo', 20, u'0'],
['jhidalgo', 20, u'1,6'],
['jhidalgo', 21, u'6,9'],
['jhidalgo', 22, u'1,3'],
['jhidalgo', 23, u'6,9'],
['jtern', 19, u'6,9'],
['jtern', 19, u'3,2']
]
</code></pre>
<p>How can I get a list like this?, sum third elements with the same second element and first</p>
<pre><code>[['jhidalgo', 19, u'12,1'],
['jhidalgo', 20, u'9'],
['jhidalgo', 21, u'6,9'],
['jhidalgo', 22, u'1,3'],
['jhidalgo', 23, u'6,9'],
['jtern', 19, u'10,1']
]
</code></pre>
<p>I need to sum the <code>third</code> element by grouping the <code>second</code> and <code>first</code> element. <br/>For example, all the <code>jhidalgo</code> with <code>20</code>...the sum is <code>7+0.4+0+1.6 = 9</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that the values are intended to interpret commas as decimal points, and that all values to be grouped are consecutive, you can use <code>itertools.groupby</code> to good effect here:</p>
<pre><code>import itertools
from math import fsum
from operator import itemgetter

mylist = [...]

summed = [(name, num, fsum(float(x.replace(',', '.')) for x in g))
          for (name, num), g in itertools.groupby(mylist, key=itemgetter(0, 1))]
</code></pre>
<p>Using <code>groupby</code> is the best solution if the data is already consecutive by key (and preserves order without difficulty), but if the values to be grouped are not consecutive, you can either sort (by the same key used for <code>groupby</code>), e.g. running <code>mylist.sort(key=itemgetter(0, 1))</code> before computing <code>summed</code> with <code>groupby</code> as above, or to avoid <code>O(n log n)</code> sort costs, you can use a <code>dict</code> (or for simplicity, <code>defaultdict(float)</code>) to group non-consecutive groups:</p>
<pre><code>from collections import defaultdict

sumdict = defaultdict(float)
for name, num, val in mylist:
    sumdict[name, num] += float(val.replace(',', '.'))

# Side-note: I'd have used tuple/namedtuple for the triples here since the data likely
# shouldn't be mutable, and tuples are the "proper" type for fixed length,
# heterogeneous, immutable data, but the functional difference is minimal
summed = [[name, num, valsum] for (name, num), valsum in sorted(sumdict.items())]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use pandas, It's a great python module for data analysis.</p>
<p>Or:</p>
<pre><code># sorting
d = {}
for name, value, amount in l:
    if (name, value) not in d:
        d[name, value] = 0
    d[name, value] += float(amount.replace(',', '.'))

# rewriting list
result = []
for (k, v), a in d.items():
    result.append([k, v, str(a).replace('.', ',')])
</code></pre>
</div>
<span class="comment-copy">Should the 3rd element be interpreted as a rational number? <code>6.8 + 5.3</code> would sum to <code>12.1</code>, by that interpretation. Did you try anything yourself yet? Where did you get stuck?</span>
<span class="comment-copy">Also, is your input sorted on the first and second column?</span>
<span class="comment-copy">If you posted your attempt as martijin says we could help you :).</span>
<span class="comment-copy">sorry, I have no idea about how to sort it out. I would appreciate any help</span>
<span class="comment-copy">I don't understand what or how are you summing, e.g. how did you get the second result of <code>['jhidalgo', 20, u'9']</code>?</span>
<span class="comment-copy">My program cannot import name fsum. I dont know why</span>
<span class="comment-copy">@Madmartigan: Well, it's not necessary (though it should exist in any Python 2.6 or higher). You can just use plain <code>sum</code> if <code>fsum</code> isn't available, <a href="https://docs.python.org/3/library/math.html#math.fsum" rel="nofollow noreferrer"><code>fsum</code> is just a higher accuracy <code>sum</code> specifically for <code>float</code>s</a>.</span>
<span class="comment-copy">@Madmartigan: Side-note: Most likely cause of <code>fsum</code> not being available is that you named a package <code>math</code> or a module <code>math.py</code> (or a subpackage/submodule if you're on Python 2.x, didn't do <code>from __future__ import absolute_import</code>, and the module importing from <code>math</code> is a sibling to the <code>math</code> subpackage/submodule).</span>
<span class="comment-copy">Thanks again for your help. I wish you all a Merry Christmas and a Happy New Year!</span>
<span class="comment-copy">thanks!, It works fantastically. Now I have to study the code</span>
<span class="comment-copy">OOC, any reason you chose to use nested <code>dict</code>s? <code>dict</code>s can be keyed by a <code>tuple</code> (<code>d[name, value]</code> is perfectly legal), and since we're not using the name grouping separately from the <code>name, value</code> grouping, it seems pointless to nest.</span>
<span class="comment-copy">You're right. Didn't came to my mind.. I edit</span>
