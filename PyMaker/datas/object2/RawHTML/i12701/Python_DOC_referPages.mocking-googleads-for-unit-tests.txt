<div class="post-text" itemprop="text">
<p>I have a service that uses the googleads library in python, I want to unit test these functions but do not know how to go about mocking this aspect.
When I used PHP and Zend Framework it was pretty easy to mock clients, as I could tell what was expected to be called, and mock what was returned, but I do not know how to do this here.</p>
<p>Could you point to a good resource to do learn more about it? 
Here's some example code I'd like to test (get_account_timezone):</p>
<pre><code>from googleads import AdWordsClient
from googleads.oauth2 import GoogleRefreshTokenClient
from dateutil import tz

class AdWords:
    ADWORDS_VERSION = 'v201509'

    def __init__(self, client_id, client_secret, refresh_token, dev_token, customer_id):
        """AdWords __init__ function

        Args:
            client_id (str):        OAuth2 client ID
            client_secret (str):    OAuth2 client secret
            refresh_token (str):    Refresh token
            dev_token (str):        Google AdWords developer token
            customer_id (str):      Google AdWords customer ID
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.refresh_token = refresh_token
        self.dev_token = dev_token
        self.customer_id = customer_id

        oauth2_client = GoogleRefreshTokenClient(
            self.client_id,
            self.client_secret,
            self.refresh_token
        )

        self.client = AdWordsClient(
            self.dev_token,
            oauth2_client,
            'Analytics',
            self.customer_id
        )

    def get_account_timezone(self):
        """Get timezone that current AdWords account is using

        Returns:
            Timezone
        """
        service = self.client.GetService('ManagedCustomerService', self.ADWORDS_VERSION)

        response = service.get({
            'fields': ['DateTimeZone']
        })

        if 'entries' not in response or len(response.entries) != 1:
            return tz.tzutc()

        account_timezone = response.entries[0].dateTimeZone

        return tz.gettz(account_timezone)
</code></pre>
<p>Thank you,</p>
<p>fermin</p>
<p>EDIT: Here's the beginning of the test, I have some questions for it though.
When setting instance = AdWords(...), it is generating a real instance of my AdWords class, instead of taking the mock, I am lost as to how to proceed.
Asserting that GetService is called fails too.</p>
<pre><code>import unittest
import sys
import mock
from os import path
sys.path.append(path.dirname(path.dirname(path.dirname(path.abspath(__file__))))) 
from analytics.services.adwords import AdWords
from dateutil import tz
import xmltodict
import datetime
import googleads

mock_credentials = {
        'client_id': 'aaaa',
        'client_secret': 'bbb',
        'refresh_token': 'ccc',
        'dev_token': 'ddd',
        'customer_id': 'eee',
    }
ADWORDS_VERSION = 'v201509'

mock_timezone_response = {
   "totalNumEntries": 1,
   "Page.Type": "ManagedCustomerPage",
   "entries": 
      {
         "dateTimeZone": "America/Los_Angeles"
      },
 }

class AdWordsServiceTests(unittest.TestCase):
    @mock.patch('googleads.adwords.AdWordsClient', autospec=True)
    @mock.patch('googleads.oauth2.GoogleRefreshTokenClient', autospec=True)
    @mock.patch('dateutil.tz', autospec=True)
    def test_get_account_timezone_mock(self, tz_mock, refresh_token_client_mock, adwords_client_mock):
        adwords_client_instance = mock.Mock()
        adwords_client_mock.return_value = mock_timezone_response
        instance = AdWords(mock_credentials['client_id'], mock_credentials['client_secret'], mock_credentials['refresh_token'], 
            mock_credentials['dev_token'], mock_credentials['customer_id'])
        instance.get_account_timezone()

        assert adwords_client_mock is googleads.adwords.AdWordsClient
        adwords_client_instance.GetService.assert_called_with('ManagedCustomerService', ADWORDS_VERSION)  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is usually really easy to mock stuff in python with mock library. I do not guarantee this is the best way to test this code. Refactoring it can lead to more robust and easier to test code.</p>
<pre><code>import unittest
import mock


class TestCaseName(unittest.TestCase):

    @mock.patch('path_to_module.AdWordsClient', autospec=True)
    @mock.patch('path_to_module.GoogleRefreshTokenClient', autospec=True)
    @mock.patch('path_to_module.tz', autospec=True)
    def test_get_account_timezone(self, tz_mock, adwords_client_mock, grefresh_token_client_mock):
        adwards_client_instance = mock.Mock()
        adwords_client_mock.return_value = test_get_account_timezone
        instance = AdWords(...)
        instance.get_account_timezone()
        adwards_client_instance.GetService.assert_called_with(...)
</code></pre>
<p>You should check the documentation for exact methods of the mock library.</p>
<p>Alternative to mock is <a href="https://pypi.python.org/pypi/doubles/1.1.3" rel="nofollow">https://pypi.python.org/pypi/doubles/1.1.3</a></p>
</div>
<span class="comment-copy">When you patch you should specify the path where you import the object, not where the object is defined. Instead of <code>'googleads.adwords.AdWordsClient'</code> use <code>'path.to.your.module.AdWordsClient'</code>. Check <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html#where-to-patch</a></span>
<span class="comment-copy">thank you for all the help you've provided, i go through the docs and still feel super lost. after fixing the patch, now when we get to instance.get_account_timezone(), self.client does not have a method called GetService, as it's not an instance of AdWordsClient, but my mocked response assigned when i do adwords_client_mock.return_value, is that the way it's supposed to work?  btw, feel free to disregard my questions at any time, its just that im new and my whole team is on vacation, thanks again.</span>
<span class="comment-copy">The idea is self.client is to be a mock object. mock.Mock object should behave as if it has every possible property. Why do you think it doesn't have method GetService?</span>
<span class="comment-copy">well, by assigning the return value of mock_timezone_response (which is a dict), now instance.client is going to be that dict.  if i don't assign a return value then instance.client is this: &lt;NonCallableMagicMock name='AdWordsClient()' spec='AdWordsClient' id='4407946832'&gt; which if i debug...when i get to see what service is, i get: &lt;MagicMock name='AdWordsClient().GetService()' id='4385193040'&gt;  when doing it this way though i get that it was never called.</span>
<span class="comment-copy">also, thinking about it...i have to mock the GetService to return a 'SudsService', and mock that return value to be the mock_timezone_response dict</span>
<span class="comment-copy">thanks for the reply, i was wondering if you could explain a bit better to me what you are doing. the @mock.patch is what is passed to the test function, i believe then, i create a real instance of AdWordsClient to call the function? that part is confusing as I'd think I'd use mocking only</span>
<span class="comment-copy">@mock.patch is a context manager. In the body of this context manager the objects that are referenced by the path in the first parameter are replaced at runtime by a mock object(passed as an argument to the test). You can play with the mock object to get the desired behavior. In the above example when you call  AdWordsClient(...) it will return the mock.Mock object adwards_client_instance object I've created in the test, instead of new real client. Go over the documentation <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html</a> and will get a better understanding how to mock in python.</span>
<span class="comment-copy">thanks for clarifying that, i'll read the docs!</span>
<span class="comment-copy">hey, i added some edits with what i ended up doing, (pretty much what you have done) but still can't figure out how to proceed after reading the docs. instance is a real instance of my AdWords class in this case. am I mixing the mocks? thanks</span>
