<div class="post-text" itemprop="text">
<p>Python doesn't have a method "all" where I can pass a lambda? Or have I missed anything? I'm aware about list comprehension, but how about this?</p>
<pre><code> res = map(....., [True, False, False, ......very long])
 # how to check that all items in "res" are True using a functional approach?
</code></pre>
<p>Yes, there're the ways to check that, but there's no functional way? I want to do something like:</p>
<pre><code>res2 = all(lambda x: x == True, res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no built in function, but you can easily write it yourself by composing <code>map</code> with <code>all</code>:</p>
<pre><code>def all_function(predicate, iterable):
    return all(map(predicate, iterable))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there's no <code>all</code> implementation which accepts a callback, because the same can be expressed using a generator expression. Using the more complex "check if all values are over 5" example for a better sample:</p>
<pre><code>res = map(..)
if all(x &gt; 5 for x in res):
    print('Yes!')
</code></pre>
<p>There's no specific <em>need</em> to provide an alternative implementation of <code>all</code> here, since this pattern can handle anything you want, and Python's mantra is to have <em>one obvious way to do things.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to call <code>all</code> with a functionality like <code>lambda x: x == True</code>. It's a redundant job because <code>all()</code> that's exactly what this functions stands for, but if you want to check the validity of an iterable items adn then use <code>all()</code>, one pythoic way is using a generator expression within <code>all()</code> by calling the custom function on iterable items.</p>
<pre><code>all(func(x) for x in res) 
</code></pre>
<p>Note that the <code>func()</code> should returns a bool value for each item. Or at least a result which interpret as False by python.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>all(function(x) for x in res)</code> is the proper way to use a function with <code>all()</code>, but if you insist on doing it the 'functional way', try <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a>:</p>
<pre><code>list(filter(lambda x: x == True, res)) == res
</code></pre>
</div>
<span class="comment-copy">Why do you need a callback when you're testing for the same thing <code>all</code> is already testing for? If that's not your actual example, a more realistic one would help.</span>
<span class="comment-copy">If you comprehend comprehension, then why not, e.g., <code>all(x &gt; 5 for x in res)</code>? It's not <i>functional</i>, but it works perfectly fine and with the same or better performance characteristics. â€“ Python - <i>one</i> way to do things.</span>
<span class="comment-copy">What preferences? If <code>res</code> really is a <code>list</code> with <code>[True, False, False, ....]</code>, you can just do <code>all(res)</code> and be done. That's the point of <code>all()</code>.</span>
<span class="comment-copy">@AlanCoromano, you do realise we are here to <i>help</i> you? A less pedantic tone will go great lengths to get good, informed answers from us.</span>
<span class="comment-copy">I mean, I guess you could do <code>all((lambda x: x==True)(item) for item in res)</code>, but that could be shortened to <code>all((lambda x: x)(item) for item in res</code>, or, even faster and more readable, <code>all(res)</code>. Functional programming doesn't mean shoehorning functions where they don't belong.</span>
<span class="comment-copy">Wow, this has <b><i>much</i></b> worse performance characteristics than <code>all</code>.</span>
<span class="comment-copy">@deceze: sure, but it can be used with <code>lambda</code>s!</span>
<span class="comment-copy">You could bend over backwards any number of ways to get to the same result, but only a very small handful of these ways are sane. This here isn't.</span>
