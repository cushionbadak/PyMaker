<div class="post-text" itemprop="text">
<p>I'm having some trouble mocking a functiog. Said function is imported and used in <code>run_parsers.py</code> and I'm getting </p>
<pre><code>ImportError: 'No module named run_parsers'
</code></pre>
<p>When I'm attempting to <code>mock.patch</code> <code>run_parsers.py</code>.</p>
<p>Here's my test code in <code>test_run_parsers.py</code></p>
<pre><code>from .. import run_parsers # Used in all my other tests.

def test_node_data_parser_throws_exception(self):
    def parser():
        return NotImplementedError()

    with mock.patch("run_parsers.get_node_paths") as node_paths:
        node_paths.return_value = "node_1"
        run_parsers.get_node_data(parser, "/a/path")
</code></pre>
<p>Here's my repository structure</p>
<pre><code>control_scripts
├── __init__.py
├── README.md
├── run_all_parsers.py
├── run_parsers.py
└── tests
    ├── __init__.py
    ├── test_run_parsers.py
</code></pre>
<p><a href="http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch" rel="nofollow">According to this tutorial I'm supposed to mock where the function is imported.</a> This is why I'm attempting to mock the calling module rather than the module that defines get_node_paths</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if this duplicates your setup exactly, but here is a simple test case that worked for me.</p>
<p>The directory setup is:</p>
<pre><code>c:\work
    \control
        __init__.py
        scripts.py
        \tests
            __inti__.py
            mytests.py

and c:\work is on sys.path
</code></pre>
<p>In the module scripts.py:</p>
<pre><code>def identity(x):
    return x

def do_identity(x):
    return identity(x)
</code></pre>
<p>In mytests.py:</p>
<pre><code>import unittest
from unittest.mock import patch
from control import scripts

class MyTest(unittest.TestCase):

    def test_patch(self):

        with patch('control.scripts.identity') as mymock:
            mymock.return_value = 99
            self.assertEqual(scripts.do_identity(1), 99)

    def test_no_patch(self):

            self.assertEqual(scripts.do_identity(1), 1)            

if __name__ == "__main__":
    unittest.main()
</code></pre>
<p>So what I am trying to do here is to mock the function 'identity' which is called by the function 'do_identity'. Both functions are in the 'scripts' module. This test runs with no errors or failures.</p>
<p>And I can run this from any directory as:</p>
<pre><code>c:\any_directory&gt; python c:\work\control\tests\mytests.py
</code></pre>
</div>
<span class="comment-copy">I see that you are mocking "run_parsers.get_node_paths" but you don't call that function, you call "run_parsers.get_node_data". Is that a typo? Or is "run_parsers.get_node_paths" called by "run_parsers.get_node_data"?</span>
<span class="comment-copy">Another question: did you try (as a test case) using an absolute import "import run_parsers" and making sure that directory "control_scripts" is on your sys.path? This is just to first test that the mock function works as intended, then you can solve the import issues. That's the way I usually try to work these things out.</span>
<span class="comment-copy">@SteveMisuta That's not a typo. I'm attempt to test <code>get_node_data</code> and one of the functions called by <code>get_node_data</code> is <code>get_node_paths</code>.  I haven't checked to see if control_scripts is in the path. I'll have to go look but I'm pretty sure it's not.</span>
<span class="comment-copy"><code>run_parser</code> is not in your class path so patch cannot resolve it. Try <code>mock.patch("control_script.run_parsers.get_node_paths")</code> instead</span>
<span class="comment-copy">At <a href="https://github.com/la10736/SimpleScratchExtension/blob/master/scratch/test/test_components.py" rel="nofollow noreferrer">github.com/la10736/SimpleScratchExtension/blob/master/scratch/…</a> row 726 (I hope). Is an example quite close to your project structure.</span>
<span class="comment-copy">Confirmed that I need to use absolute imports and that he parent directory needed to be on the path. Potentially there's a way to use relative imports in the case but this is the solution I ended up using.</span>
<span class="comment-copy">Great! Lately I've been using full path absolute import statements especially in tests. Then I can run tests as programs or as modules from anywhere, as well as interactive work. Also this method works for both Python 2 &amp; 3 even though they use different import schemes. You just have to structure things as top\pkg\sub1\sub2\mod1.py and make sure top is on sys.path. Then imports like 'from pkg.sub1.sub2 import mod1' or similar will always work. Relative imports have advantages but I seem to get in trouble eventually using them, and I don't have time to be debugging import failures.</span>
<span class="comment-copy">Ran into same issue because I was importing a module from a package (using <code>from x import y</code>) and then trying to mock it like <code>@patch(y...)</code>... <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">The docs</a> mention using <code>package.module.className</code> for "target" but don't really explicitly call out that the "package" is <i>required</i> (ie. must use absolute import path)</span>
