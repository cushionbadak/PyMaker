<div class="post-text" itemprop="text">
<p>I have data like this:</p>
<pre><code>[(1, 11), (1, 31), (1, 41), (1, 61), (1, 71), (2, 2), (3, 3), (3, 13), (3, 23), (3, 43), (3, 53), (3, 73), (3, 83), (5, 5), (7, 7), (7, 17), (7, 37), (7, 47), (7, 67), (7, 97), (9, 19), (9, 29), (9, 59), (9, 79), (9, 89)]
</code></pre>
<p>And I'm trying write it to a file in this pattern:</p>
<pre><code>(1, 11)   (2, 2)   (3, 3)   (5, 5)   (7, 7)   (9, 19)
(1, 31)            (3, 13)           (7, 17)  (9, 29)
(1, 31)            (3, 23)           (7, 37)  (9, 59)
</code></pre>
<p>Here is piece of my code:</p>
<pre><code>def modulo(inputlist, divider):
    tmplist = []
    for item in inputlist:
        for i in range(divider):
            if item % divider == i:
                tmptuple = (i, item)
                tmplist.append(tmptuple)
    return tmplist  

modulo_list = modulo(a, 10)
modulo_list.sort(key=lambda tup:tup[0])

with open ('modulo_primes.csv', 'w') as out:
    csv_out=csv.writer(out)
    csv_out.writerow(['modulo', 'primary'])
    for row in modulo_list:
        csv_out.writerow(row)
</code></pre>
<p>In this case I use csv format, but csv is not necessary needed. I just want to format primary numbers data in column depends on modulo operation (function modulo).</p>
<p>My example is modulo 10 case, but I plan extend this into other values. The "a" variable is a simple list of primes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use  <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby</a> to group the tuples by first element using <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow">itemgetter(0)</a> as the key and <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow">itertools.zip_longest</a> to transpose the data into columns. </p>
<pre><code>l =[(1, 11), (1, 31), (1, 41), (1, 61), (1, 71), (2, 2), (3, 3), (3, 13), (3, 23), (3, 43), (3, 53), (3, 73), (3, 83), (5, 5), (7, 7), (7, 17), (7, 37), (7, 47), (7, 67), (7, 97), (9, 19), (9, 29), (9, 59), (9, 79), (9, 89)]

from itertools import groupby, zip_longest
from operator import itemgetter


with open("out.csv","w") as f:
     r = csv.writer(f,delimiter="\t")
     # itertools.izip_longest for python2
     r.writerows(zip_longest(*(list(v) for k, v in groupby(l, 
                               key=itemgetter(0))),fillvalue="   "))
</code></pre>
<p>out.csv:</p>
<pre><code>(1, 11) (2, 2)  (3, 3)  (5, 5)  (7, 7)  (9, 19)
(1, 31)         (3, 13)         (7, 17) (9, 29)
(1, 41)         (3, 23)         (7, 37) (9, 59)
(1, 61)         (3, 43)         (7, 47) (9, 79)
(1, 71)         (3, 53)         (7, 67) (9, 89)
                (3, 73)         (7, 97)     
                (3, 83)                     
</code></pre>
<p>If you want the columns to align we need to use str.format using the amount of chars that will be in the largest tuple:</p>
<pre><code>mx = max((len(str(t)) for t in l))
with open("out.csv", "w") as f:
    for row in zip_longest(*(list(v) for k, v in groupby(l, key=itemgetter(0))), fillvalue=" "):
        print(row)
        f.write(" ".join("{:&lt;{mx}}".format(str(t), mx=mx) for t in row)+"\n")
</code></pre>
<p>So for input like:</p>
<pre><code>l = [(1, 11), (1, 31), (1, 41), (1, 61), (1, 71), (2, 2), (3, 3), (3, 13), (3, 23), (3, 43), (3, 53), (3, 73), (3, 83),
 (5, 5), (7, 7), (7, 17), (7, 3447), (7, 47), (7, 67444), (7, 97), (9, 19), (9, 29), (9, 59), (9, 79), (9, 899)]
</code></pre>
<p>You'll get:</p>
<pre><code>(1, 11)    (2, 2)     (3, 3)     (5, 5)     (7, 7)     (9, 19)   
(1, 31)               (3, 13)               (7, 17)    (9, 29)   
(1, 41)               (3, 23)               (7, 3447)  (9, 59)   
(1, 61)               (3, 43)               (7, 47)    (9, 79)   
(1, 71)               (3, 53)               (7, 67444) (9, 899)  
                      (3, 73)               (7, 97)              
                      (3, 83)                                    
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> and <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a></span>
<span class="comment-copy">@BhargavRao, thanks, saved me a google  ;)</span>
<span class="comment-copy">Wut? Google? Naw ... docs.python.org/&lt;versionnumber&gt;/library/modulename.html ... :P</span>
<span class="comment-copy">@BhargavRao, takes less time to type itertools ;)</span>
<span class="comment-copy">@PadraicCunningham Thank You for Your answer :)</span>
