<div class="post-text" itemprop="text">
<p>I am using Python 3.4</p>
<p>I have a directory structure that looks this:</p>
<pre><code>A
   B
      c.py
      d.py
      __init__.py
   C
      e.py
      f.py
      __init__.py
   g.py
   __init__.py
</code></pre>
<p>From g.py I can import things from both B and C modules.</p>
<p>I need, in <strong>e.py</strong>, to import something from <strong>c.py</strong></p>
<p>I tried:</p>
<pre><code>import B
</code></pre>
<p>and</p>
<pre><code>from B.c import stuff_I_need
</code></pre>
<p>For both I get the error:</p>
<pre><code>"No module named B".
</code></pre>
<p>I also tried something like:</p>
<pre><code>from A.B.c import stuff_I_need
</code></pre>
<p>I am further confused by the fact with an identical directory structure, I can make the imports I need with Python 2.7.</p>
<p>Can you help me figure out what's going on? </p>
<p>Solution:</p>
<pre><code>PACKAGE_PARENT = '..'
SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))
sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))
</code></pre>
<p>Taken from <a href="https://stackoverflow.com/questions/16981921/relative-imports-in-python-3">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When importing it looks at the the python folder for imports and the files in the local directory. If you want to import a file that is in neither of those, then I suggest using the <code>sys</code> module</p>
<pre><code>import sys
sys.path.append(r'file-path\A') # Folder A
import B.c
</code></pre>
<p>If you don't want to set the full file path then you can also just backtrack to the previous directory with this for the same effect.</p>
<pre><code>sys.path.append('..') # Previous Directory
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to do either</p>
<pre><code>from .B import c
</code></pre>
<p>or</p>
<pre><code>import A.B.c
</code></pre>
<p>Reference:</p>
<ul>
<li><a href="https://docs.python.org/3/whatsnew/2.5.html#pep-328-absolute-and-relative-imports" rel="nofollow">What's New in Python 2.5</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0328/#abstract" rel="nofollow">PEP 328 - Imports: Multi-Line and Absolute/Relative</a></li>
</ul>
</div>
<span class="comment-copy">Alternatively, the package can be installed to site-packages depending on the purposes of <code>A</code>.  But @Steven-Summers is right, it has to be on your python path.</span>
<span class="comment-copy">Thank you for the answer. I did something similar: PACKAGE_PARENT = '..' SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(<b>file</b>)))) sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))</span>
