<div class="post-text" itemprop="text">
<p>Pretty new to python, and the documentation for csv files are a bit confusing.</p>
<p>I have a dictionary that looks like the following:</p>
<p>key1: (value1, value2)</p>
<p>key2: (value1, value2)</p>
<p>key3: (value1, value2)
....</p>
<p>I would like to write these out to a csv file in the format where each line contains the key, followed by the two values.</p>
<p>I would also like to be able to read them back into a dictionary from the file at a later date.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't find enough reasons to use Pandas here for a relatively simple problem. </p>
<p>Note to OP, if you want to store values to file only for the purpose of reading it back, then use JSON instead of CSV. Exporting to CSV should be minimised to the very purpose of interacting with non-technical people (potentially Excel users). </p>
<p>Here is how I will store it in CSV</p>
<pre><code>value1 = 'one'
value2 = 'two'
d = { 
        'key1': (value1, value2), 
        'key2': (value1, value2), 
        'key3': (value1, value2)
    }
CSV ="\n".join([k+','+','.join(v) for k,v in d.items()]) 
#You can store this CSV string variable to file as below
# with open("filename.csv", "w") as file:
    # file.write(CSV)
</code></pre>
<p>This code explains what happens inside the list comprehension.</p>
<pre><code>CSV = ""
for k,v in d.items():
    line = "{},{}\n".format(k, ",".join(v))
    CSV+=line
print CSV 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I highly recommend <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">Pandas</a> for this.</p>
<p>Convert to Pandas DataFrame:</p>
<pre class="lang-py prettyprint-override"><code>import pandas as pd

d = {
    'a': (1, 101),
    'b': (2, 202),
    'c': (3, 303)
}
df = pd.DataFrame.from_dict(d, orient="index")
</code></pre>
<p>Create a CSV file:</p>
<pre class="lang-py prettyprint-override"><code>df.to_csv("data.csv")
</code></pre>
<p>Read the CSV file back as a DataFrame:</p>
<pre class="lang-py prettyprint-override"><code>df = pd.read_csv("data.csv", index_col=0)
</code></pre>
<p>Convert the DataFrame back to the original dictionary format:</p>
<pre class="lang-py prettyprint-override"><code>d = df.to_dict("split")
d = dict(zip(d["index"], d["data"]))
</code></pre>
<p>EDIT: Since you mention that your goal to use the output file in Excel, Pandas <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_excel.html" rel="nofollow noreferrer">to_excel()</a> and <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_excel.html" rel="nofollow noreferrer">read_excel()</a> might be more useful to you since they better-preserve the content between conversions.
Also, you might want skip Excel altogether and use the <a href="http://www.scipy.org/about.html#the-scipy-stack" rel="nofollow noreferrer">standard Python scientific stack</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use pandas, it can be done in one line:</p>
<pre><code>import pandas as pd

dic = {'key1':['v1','v2'], 'key2':['vv','gg']}

pd.DataFrame(dic).T.reset_index().to_csv('myfile.csv', header=False, index=False)
</code></pre>
</div>
<span class="comment-copy">Read this <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a>, try to solve it on your own, come here (if you have trouble) to ask specific questions.</span>
<span class="comment-copy">Why a CSV? If you want to save and load you can look into things like <code>pickle</code> or <code>json</code>. Both have pretty solid dump and load methods, <code>json</code> outbut being user readable.</span>
<span class="comment-copy">I will be using these values in excel to do some calculations on. But will be used across multiple files so that I can keep a running total.</span>
<span class="comment-copy">Provide some code and then provide an example of what you want the output to look like.  I think I can see it but not totally sure.  Further, as already noted, this may not be best suited for the csv module.  Your structure is not a real natural for both reading and writing without knowing a lot about your data.  So specifically you will not be able to read it back into a dictionary without manipulation.  We use csv.DictWriter and csv.DictReader  but too do so we have to make sure our data is structured as a list of dictionaries, the keys are the cheadings and the values are the cell contents</span>
<span class="comment-copy">This looks more like something I can comprehend. So where you have written "for k,v in d.items()", does the v parameter (assuming label for value) automatically pick up that there are 2 values (a tuple) there?  i.e will this print key,value1,value2?</span>
<span class="comment-copy">Yes, the <code>v</code> is assumed for a tuple, <code>",".join</code> means join those tuple varialbes with a comma. I have elaborated the list comprehension with a for-loop. Hope that will be easier and more readable.</span>
<span class="comment-copy">the good way using pandas is to_csv, no need for open command, cf my answer.</span>
<span class="comment-copy">Don't want to sound picky, but does anyone know how to do it with just using naked python? Don't really want to be using other packages as a beginner of python.</span>
<span class="comment-copy">If you are looking for something more minimal in terms of dependencies, then itsneo's answer is probably what you are aiming for.</span>
<span class="comment-copy">I prefer this answer than the selected answer.</span>
<span class="comment-copy">Using <code>index=False</code> maybe helpful for most users.</span>
