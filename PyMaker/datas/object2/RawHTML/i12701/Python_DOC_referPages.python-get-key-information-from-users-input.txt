<div class="post-text" itemprop="text">
<p>I am a totally new Python learner and am trying to write a Python script to analysis my simulation log file, but I am now having some problem get key information from user's input.</p>
<p>First of all, I started my script with:</p>
<pre><code>op = raw_input("pls enter options")
</code></pre>
<p>To get user inputs. I am expected to get some input like:</p>
<pre><code>"+addr=abcdef +tid=12 +time=135000"
</code></pre>
<p><strong>The question is:</strong> how do I pick the key information and assign them into my variables? For example, sign <code>abcdef</code> into my Python variable <code>address = abcdef</code> and integer <code>12</code> to <code>transaction_id = 12</code>?</p>
<p>Additionally, the user is not necessary to give all options, for example: the user can only input <code>+time=135000</code></p>
<p>The other variables that not declared are assigned zero, except variable <code>time = 135000</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Parsing arguments from command line is done with argparse module:</p>
<p><code>myscript.py</code> content:</p>
<pre><code>if __name__ == '__main__':
    import argparse
    args = argparse.ArgumentParser()
    args.add_argument('--addr', type=str, default='0') #Are you sure you want a string '0'?
    args.add_argument('--tid', type=int, default=0) #type=int will ensure user cannot input somethin other than an int
    args.add_argument('--time', type=int, default=135000) #Look at datetime module if you need a timestamp.

    options = args.parse_args() #Parses user command line

    print("My options where : " + str(options))
</code></pre>
<p>Then you can use your script like this:</p>
<pre><code>$ python myscript.py 
My options where : Namespace(addr='0', tid=0, time=135000)

$ python myscript.py --help
usage: myscript.py [-h] [--addr ADDR] [--tid TID] [--time TIME]

optional arguments:
  -h, --help   show this help message and exit
  --addr ADDR
  --tid TID
  --time TIME

$ python myscript.py --addr=abcdef --tid=12 --time=135000
My options where : Namespace(addr='abcdef', tid=12, time=135000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to call your script with command line arguments:</p>
<pre><code>import sys

#Your code here...

if __name__ == '__main__':
    args = sys.argv
    address = args[1] #Starts at index 1, args[0] is the name of the script       
    id = args[2]
    tim = args[3]
</code></pre>
<p>When you call your script you'll specify the parameters like this:</p>
<pre><code>python myScript.py  abcdef 12 135000
</code></pre>
<p>All your parameters will be strings.</p>
</div>
<span class="comment-copy">Would it not be better to have command line arguments/options rather than user inputs? Something you could execute as <code>python myscript.py abcdef 12 135000</code> ? or <code>python myscript.py --addr=abcdef --tid=12 --time=135000</code></span>
<span class="comment-copy">You could use a regex to parse the input, but why don't you just prompt the user three times or use command line arguments?</span>
<span class="comment-copy">@DainDwarf: Can you please explain how do do it, I am a totally new python learner. :(</span>
<span class="comment-copy">@timgeb Well, I think that wastes quite lot time, becasue I will develop more options in the future.</span>
<span class="comment-copy">Hmm...don't know what do you want to do...but <code>a = dict(i.split('=') for i in "+addr=abcdef +tid=12 +time=135000".strip('+').split(' +'))</code> may give you some ideas...and then there's a function called <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a>.</span>
<span class="comment-copy">Ok I will try this one</span>
<span class="comment-copy">Emm.. The problem is that users may not type those arguments in certain order.</span>
