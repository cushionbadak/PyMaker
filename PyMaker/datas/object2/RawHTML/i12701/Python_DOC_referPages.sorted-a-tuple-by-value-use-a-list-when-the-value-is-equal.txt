<div class="post-text" itemprop="text">
<p>I have a list:</p>
<pre><code>test1 = ["a","b","c","d","e","f","g","h","i"]
</code></pre>
<p>And a list of tuples:</p>
<pre><code>test2 = [("c",1),("g",1),("b",1),("e",1),("g",1),("d",10),("a",10)]
</code></pre>
<p>I need sorted the:</p>
<pre><code>[val for (key, val) in test2]
</code></pre>
<p>and when the <code>val</code> is equal the same <code>val</code>'s sorted by the <code>test1</code>:</p>
<pre><code>test3 = [("b",1),("c",1),("e",1),("f",1),("g",1),("a",10),("d",10)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> accepts an optional parameter <code>key</code>. The return value of the function (each item is passed to the function) is used instead of the items themselves.</p>
<pre><code>&gt;&gt;&gt; test1 = ["a","b","c","d","e","f","g","h","i"]
&gt;&gt;&gt; test2 = [("c",1),("g",1),("b",1),("e",1),("g",1),("d",10),("a",10)]
&gt;&gt;&gt; sorted(test2, key=lambda x: (x[1], test1.index(x[0])))
[('b', 1), ('c', 1), ('e', 1), ('g', 1), ('g', 1), ('a', 10), ('d', 10)]
</code></pre>
<p>Given the above key function order will be by the number first, then position in the <code>test1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>dict</code> mapping  each string in test1 to its index so for ties you sort by the index and the lookup is <code>0(1)</code>:</p>
<pre><code>test1 = ["a","b","c","d","e","f","g","h","i"]
inds = dict(zip(test1, range(len(test1))))

test2 = [("c",1),("g",1),("b",1),("e",1),("g",1),("d",10),("a",10)]


print(sorted(test2,key=lambda x: (x[1], inds[x[0]])))
</code></pre>
<p>Output:</p>
<pre><code>[('b', 1), ('c', 1), ('e', 1), ('g', 1), ('g', 1), ('a', 10), ('d', 10)]
</code></pre>
<p>If you actually wanted the strings to be in sorted order you could just use the string itself, using <code>itemgetter</code> instead of a lambda:</p>
<pre><code>test2 = [("c", 1), ("g", 1), ("b", 1), ("e", 1), ("g", 1), ("d", 10), ("a", 10)]
from operator import itemgetter

print(sorted(test2, key=itemgetter(1, 0)))
[('b', 1), ('c', 1), ('e', 1), ('g', 1), ('g', 1), ('a', 10), ('d', 10)]
</code></pre>
</div>
<span class="comment-copy">So what have you tried? What is it working and what isn't ?</span>
<span class="comment-copy">Is <code>itemgetter</code> faster than <code>lambda</code> ?</span>
<span class="comment-copy">@IronFist, yep, itemgetter happens as the c level</span>
