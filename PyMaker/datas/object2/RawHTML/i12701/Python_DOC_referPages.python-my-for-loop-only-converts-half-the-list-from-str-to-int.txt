<div class="post-text" itemprop="text">
<p>I want my code to cycle through each item of the list and convert it from str to int but it only converts half of the list and in an irregular order.
My code:</p>
<pre><code>for item in list:
    list.append(int(item))
    list.remove(item)
print (list)
</code></pre>
<p>For example if list is ['5', '6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8']</p>
<p>The final would be ['6', '8', '5', '4', '2', '8', 3, 6, 2, 6, 5, 5]</p>
<p>Which is only half converted and not in order.</p>
<p>I could do it another way but that is a lot longer so would like to fix this and add to my knowledge about for loops.</p>
<p>My knowledge and experience with Python is tiny, so I most probably won't understand unless it's really basic and jargon is explained.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://www.python.org/dev/peps/pep-0202/" rel="nofollow">list comprehension</a>:</p>
<pre><code>l = ['5', '6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8']

output = [int(i) for i in l]
print(output)
[5, 6, 3, 5, 6, 2, 6, 8, 5, 4, 2, 8]
</code></pre>
<p>If you don't understand list comprehension you could use simple <code>for</code> loop:</p>
<pre><code>l1 = []
for i in l:
     l1.append(int(i))

print(l1)
[5, 6, 3, 5, 6, 2, 6, 8, 5, 4, 2, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both answers above are good but why your code didn't work also should be adressed.</p>
<p>First , you are changing the list while you are iterating on it. This is something you should not do. It will probably cause problems, like in your question.</p>
<p>Second, remove method removes the first element in the list that it encounters which fits the given argument, it also should be used with care.</p>
<p>Third, you should not use list as an variable name. As it is a built-in class.</p>
<pre><code>for item in list:
    print (list)
    list.append(int(item))
    list.remove(item)

# Prints
['5', '6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8']
['6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8', 5]
['6', '5', '6', '2', '6', '8', '5', '4', '2', '8', 5, 3]
['5', '6', '2', '6', '8', '5', '4', '2', '8', 5, 3, 6]
['5', '2', '6', '8', '5', '4', '2', '8', 5, 3, 6, 6]
['2', '6', '8', '5', '4', '2', '8', 5, 3, 6, 6, 5]
['6', '8', '5', '4', '2', '8', 5, 3, 6, 6, 5, 2]
['6', '8', '5', '4', '2', '8', 3, 6, 6, 5, 2, 5]
['6', '8', '5', '4', '2', '8', 3, 6, 5, 2, 5, 6]
['6', '8', '5', '4', '2', '8', 3, 6, 2, 5, 6, 5]
['6', '8', '5', '4', '2', '8', 3, 6, 2, 6, 5, 5]
['6', '8', '5', '4', '2', '8', 3, 6, 2, 6, 5, 5]
['6', '8', '5', '4', '2', '8', 3, 6, 2, 6, 5, 5]
</code></pre>
<p>As you see, not working as expected</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you use something like this:</p>
<pre><code>l = list(map(int, l))
</code></pre>
<p>It simply calls function <code>int</code> on each item from <code>l</code>.
Here's <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">doc</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>While the other two answers give you better ways of converting your list of strings to integers, they really don't answer your question. Your main problem is that you are mutating (altering) the list structure while your <code>for</code> loop operates on it. You <em>should not</em> mutate the list structure (remove elements or append) because the loop iteration variable <code>item</code> gets out of sync. There's no way to re-sync <code>item</code> to the new list structure. </p>
<p>BTW: It's not a random order. It's every other item.</p>
<p>You could write your conversion loop like so, because you're not mutating the structure of the list, only the individual elements:</p>
<pre><code>for i in xrange(len(l)):
    l[i] = int(l[i])
</code></pre>
<p>Don't write it like this:</p>
<pre><code>for item in l:
   item = int(item)
</code></pre>
<p>It doesn't mutate the individual list elements, even though you would think that it does. It has to do with how Python iterators work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>&gt;&gt;&gt; list = ['5', '6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8']
&gt;&gt;&gt; for item in list[:]:
...     list.append(int(item))
...     list.remove(item)
... 
&gt;&gt;&gt; print(list)
[5, 6, 3, 5, 6, 2, 6, 8, 5, 4, 2, 8]
</code></pre>
<p>Explanation: Here we are iterating over a clone of the list but doing operations on the original list.</p>
<p>PS: <code>list</code> is a keyword in python. Its usage as a variable name should be avoided.</p>
</div>
<span class="comment-copy">I don't unserstand that.  What does In and Out do and why the number 211?  I don't know what list comprehension is. Sorry.</span>
<span class="comment-copy">That's just the output of his interpreter, I believe.</span>
<span class="comment-copy">Yes, it's <code>ipython</code>. Edited to delete that with usual <code>print</code> statement</span>
<span class="comment-copy">I tried the second one and the code does not end,  I think it's stuck in an endless loop.</span>
<span class="comment-copy">The first one works (I forgot to test it, sorry)</span>
<span class="comment-copy">Brilliant minds seem to think alike at the same time, appatently.</span>
<span class="comment-copy">I don't know about brilliant, but I know how I learned programming and I have some ideas how others should learn as well. Just trying to help people based on that.</span>
<span class="comment-copy">Thank you guys, I do Python at school and don't know about any of the rules, I've used a for loop about two times in the past and had to teach myself, I appreciate both your help.</span>
<span class="comment-copy">@rockybilly: posting similar answers within moments of each other brilliance.</span>
<span class="comment-copy">&lt;map object at 0x01FC0310&gt; comes up...</span>
<span class="comment-copy">if you're using <code>python 3.x</code> you need to do: <code>list = list(map(int, list))</code>. Because <code>map</code> return iterator</span>
<span class="comment-copy">@AntonProtopopov you are right, I corrected my answer, too much mixing p2 with 3</span>
<span class="comment-copy">TypeError: 'type' object is not iterable</span>
<span class="comment-copy">@XainR list is a list type, try using different names for your variables</span>
<span class="comment-copy">Thanks for mentioning that.  I'll keep it in mind in the future.</span>
<span class="comment-copy">You can change individual elements, <code>list[item] = newvalue</code>. Just don't modify the structure. Or use comprehensions or map. Good Python style avoids <code>for</code>loops as much as possible.</span>
<span class="comment-copy">Ah, ok.  But I can do this for while loops and other ones, right?</span>
<span class="comment-copy">Yes, I suppose you can, if you use <code>xrange</code> to generate the individual indices: <code>for I in xrange(0, len (l)): l[i] = int(l[i])</code>  (Sorry, doing the on my phone, but I think you get the idea.)</span>
