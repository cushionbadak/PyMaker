<div class="post-text" itemprop="text">
<p>I have the following sample data that are stored in a file:</p>
<pre><code>[
  { "keys": ["val1", "val2"], "args": { "arg1": "val1", "arg2": "val2" } },
  { "keys": ["val1", "val2", "val3"], "args": { "arg": "val" } },
  { "keys": ["val"], "args": {} }
]
</code></pre>
<p>As you may realise, this is a <code>list</code> of <code>dictionaries</code>. Each dictionary has key <code>keys</code> contains arbitrary length of list and key <code>args</code> contains a dictionary</p>
<p>How could I parse this sample data back into <code>Python</code> object</p>
<pre><code>with open('file_name') as file:
    source = file.read()

data = how_to_parse(source)

for arr in data:
    print(arr)

# Expected result
# { "keys": ["val1", "val2"], "args": { "arg1": "val1", "arg2": "val2" } }
# { "keys": ["val1", "val2", "val3"], "args": { "arg": "val" } }
# { "keys": ["val"], "args": {} }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The pyparsing wiki includes this example <a href="https://pyparsing.wikispaces.com/file/view/parsePythonValue.py/31712649/parsePythonValue.py" rel="nofollow">https://pyparsing.wikispaces.com/file/view/parsePythonValue.py/31712649/parsePythonValue.py</a> which I implemented at a time when <code>ast.literal_eval</code> was not yet available. Using this code, your expression can be parsed using:</p>
<pre><code>print listItem.parseString("""[
  { "keys": ["val1", "val2"], "args": { "arg1": "val1", "arg2": "val2" } },
  { "keys": ["val1", "val2", "val3"], "args": { "arg": "val" } },
  { "keys": ["val"], "args": {} }
]""")[0]
</code></pre>
<p>which gives:</p>
<pre><code>[{'keys': ['val1', 'val2'], 'args': {'arg1': 'val1', 'arg2': 'val2'}}, 
 {'keys': ['val1', 'val2', 'val3'], 'args': {'arg': 'val'}}, 
 {'keys': ['val'], 'args': {}}]
</code></pre>
<p>There are many more examples at <a href="https://pyparsing.wikispaces.com/Examples" rel="nofollow">https://pyparsing.wikispaces.com/Examples</a> for your self-edification.</p>
</div>
<span class="comment-copy"><code>ast.literal_eval</code></span>
<span class="comment-copy">Tks @AvinashRaj, that is correct answer. However as I am trying to learn <code>pyparsing</code>. I'd like to see an example using that library :)</span>
<span class="comment-copy">Since your data looks like being JSON-formatted you might take a look at the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a> module.</span>
<span class="comment-copy">This example is explained in more detail in this presentation <a href="http://www.ptmcg.com/geo/python/confs/TxUnconf2008Pyparsing.html" rel="nofollow noreferrer">ptmcg.com/geo/python/confs/TxUnconf2008Pyparsing.html</a> - mouse over the lower-right corner to see the presentation navigation icons.</span>
<span class="comment-copy">Thank you for your answer. It's great start for me to learn pyparsing</span>
<span class="comment-copy">Pyparsing is no longer hosted on wikispaces.com. Go to <a href="https://github.com/pyparsing/pyparsing" rel="nofollow noreferrer">github.com/pyparsing/pyparsing</a></span>
