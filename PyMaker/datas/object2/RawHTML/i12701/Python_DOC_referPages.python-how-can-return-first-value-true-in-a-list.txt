<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30330596/is-there-a-built-in-python-function-which-will-return-the-first-true-ish-value-w">Is there a built-in Python function which will return the first True-ish value when mapping a function over an iterable?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/18208730/shortcut-or-chain-applied-on-list">Shortcut OR-chain applied on list</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>like this:<br/>
if list is <code>['', 'a', 'b']</code> return <code>'a'</code><br/>
if list is <code>['', '', '']</code> return <code>''</code><br/>
if list is <code>['a', 'b', 'c']</code> return <code>a</code><br/>
is any method in python to do this?<br/>
I mean don't need I write function myself<br/>
I want a built-in method like <code>var a = b || c</code> in <code>javascript</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Obvious way is to use a generator expression</p>
<pre><code>&gt;&gt;&gt; next(x for x in ['a', 'b', 'c'] if x)
'a'
&gt;&gt;&gt; next(x for x in ['', 'b', 'c'] if x)
'b'
</code></pre>
<p>But - all False raises an exception instead of <code>''</code></p>
<pre><code>&gt;&gt;&gt; next(x for x in ['', '', ''] if x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>You can fix that by providing a default to <code>next</code> like this</p>
<pre><code>&gt;&gt;&gt; next((x for x in ['', '', ''] if x), '')
''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Straight from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code> recipes</a>, the Python endorsed solution (if you're on Py2, replace <code>filter</code> with <code>itertools.ifilter</code> or it won't short circuit properly):</p>
<pre><code>def first_true(iterable, default=False, pred=None):
    """Returns the first true value in the iterable.

    If no true value is found, returns *default*

    If *pred* is not None, returns the first item
    for which pred(item) is true.

    """
    # first_true([a,b,c], x) --&gt; a or b or c or x
    # first_true([a,b], x, f) --&gt; a if f(a) else b if f(b) else x
    return next(filter(pred, iterable), default)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I want a built-in method like var a = b || c in javascript</p>
</blockquote>
<p>Python's <code>or</code> works pretty much the exact same way, so if you would write this in Javascript as</p>
<pre><code>result = arr[0] || arr[1] || arr[2];
</code></pre>
<p>Then you could do the following in Python:</p>
<pre><code>result = l[0] or l[1] or l[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an unusual way using <code>max</code>.</p>
<pre><code>&gt;&gt;&gt; max(['a', 'b', 'c'], key=bool)
'a'
&gt;&gt;&gt; max(['', 'b', 'c'], key=bool)
'b'
&gt;&gt;&gt; max(['', '', ''], key=bool)
''
</code></pre>
<p>Downside is that it doesn't short circuit</p>
</div>
<span class="comment-copy">Also possible duplicate of <a href="https://stackoverflow.com/questions/18208730/shortcut-or-chain-applied-on-list" title="shortcut or chain applied on list">stackoverflow.com/questions/18208730/…</a> , <a href="https://stackoverflow.com/questions/1077307/why-is-there-no-firstiterable-built-in-function-in-python" title="why is there no firstiterable built in function in python">stackoverflow.com/questions/1077307/…</a> , etc.</span>
<span class="comment-copy"><code>key=bool</code> would work as well (with <code>max</code>, I mean, not <code>min</code>-- but the same general idea)</span>
<span class="comment-copy">@DSM, too cool for school :)</span>
<span class="comment-copy">Yeah, as I edited to clarify, you'd need to do <code>max</code> instead.</span>
