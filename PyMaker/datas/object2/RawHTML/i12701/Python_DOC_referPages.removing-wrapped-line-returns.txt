<div class="post-text" itemprop="text">
<p>I want to remove the line returns of a text that is wrapped to a certain width.  e.g.</p>
<pre><code>import re
x = 'the meaning\nof life'
re.sub("([,\w])\n(\w)", "\1 \2", x)
'the meanin\x01 \x02f life'
</code></pre>
<p>I want to return <code>the meaning of life</code>.  What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need escape that <code>\</code> like this:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = 'the meaning\nof life'

&gt;&gt;&gt; re.sub("([,\w])\n(\w)", "\1 \2", x)
'the meanin\x01 \x02f life'

&gt;&gt;&gt; re.sub("([,\w])\n(\w)", "\\1 \\2", x)
'the meaning of life'

&gt;&gt;&gt; re.sub("([,\w])\n(\w)", r"\1 \2", x)
'the meaning of life'
&gt;&gt;&gt;
</code></pre>
<p>If you don't escape it, the output is <code>\1</code>, so:</p>
<pre><code>&gt;&gt;&gt; '\1'
'\x01'
&gt;&gt;&gt; 
</code></pre>
<p>That's why we need use <code>'\\\\'</code> or <code>r'\\'</code>to display a signal <code>\</code> in Python RegEx.</p>
<p>However about that, from <a href="https://stackoverflow.com/a/4025505">this answer</a>:</p>
<blockquote>
<p>If you're putting this in a string within a program, you may actually need to use four backslashes (because the string parser will remove two of them when "de-escaping" it for the <em>string</em>, and then the regex needs two for an escaped regex backslash).</p>
</blockquote>
<p>And <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow noreferrer">the document</a>:</p>
<blockquote>
<p>As stated earlier, regular expressions use the backslash character (<code>'\'</code>) to indicate special forms or to allow special characters to be used without invoking their special meaning. This conflicts with Python's usage of the same character for the same purpose in string literals.</p>
<p>Let's say you want to write a RE that matches the string <code>\section</code>, which might be found in a LaTeX file. To figure out what to write in the program code, start with the desired string to be matched. Next, you must escape any backslashes and other metacharacters by preceding them with a backslash, resulting in the string <code>\\section</code>. The resulting string that must be passed to <code>re.compile()</code> must be <code>\\section</code>. However, to express this as a Python string literal, both backslashes must be escaped again.</p>
</blockquote>
<hr/>
<p>Another way as brittenb suggested, you don't need RegEx in this case:</p>
<pre><code>&gt;&gt;&gt; x = 'the meaning\nof life'
&gt;&gt;&gt; x.replace("\n", " ")
'the meaning of life'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use raw string literals; both Python string literal syntax and regex interpret backslashes; <code>\1</code> in a python string literal is interpreted as an octal escape, but not in a raw string literal:</p>
<pre><code>re.sub(r"([,\w])\n(\w)", r"\1 \2", x)
</code></pre>
<p>The alternative would be to double all backslashes so that they reach the regex engine as such.</p>
<p>See the <a href="https://docs.python.org/2/howto/regex.html#the-backslash-plague" rel="nofollow"><em>Backslash plague</em> section</a> of the Python regex HOWTO.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = 'the meaning\nof life'
&gt;&gt;&gt; re.sub(r"([,\w])\n(\w)", r"\1 \2", x)
'the meaning of life'
</code></pre>
<p>It might be easier just to split on newlines; use the <a href="https://docs.python.org/2/library/stdtypes.html#str.splitlines" rel="nofollow"><code>str.splitlines()</code> method</a>, then re-join with spaces using <a href="https://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code></a>:</p>
<pre><code>' '.join(ex.splitlines())
</code></pre>
<p>but admittedly this won't distinguish between newlines between words and extra newlines elsewhere.</p>
</div>
<span class="comment-copy">Or use a raw string literal.</span>
<span class="comment-copy">@MartijnPieters: Sure, edited.</span>
<span class="comment-copy">You could also just skip the import of <code>re</code> and use <code>x.replace("\n", " ")</code>.</span>
<span class="comment-copy">But that changes all line returns.  I just want the ones sandwiched by letters or commas</span>
<span class="comment-copy">@geotheory: About that <code>str.replace()</code> solution? Seems like you forgot mention it in your question :P</span>
