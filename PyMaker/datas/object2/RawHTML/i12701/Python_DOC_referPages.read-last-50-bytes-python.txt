<div class="post-text" itemprop="text">
<p>I am trying to find a string near the end of a text file. The problem is that the text file can vary greatly in size. From 3MB to 4GB. But everytime I try to run a script to find this string in a text file that is around 3GB, my computer runs out of memory. SO I was wondering if there was anyway for python to find the size of the file and then read the last megabyte of it.</p>
<p>The code I am currently using is as follows, but like I said earlier, I do not seem to have a big enough memory to read such large files.</p>
<pre><code>find_str = "ERROR"
file = open(file_directory)                           
last_few_lines​ = file.readlines()[-20:]   

error​ = False  

for line in ​last_few_lines​:
    if find_str in line:
    ​    error​ = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/stdtypes.html#file.seek" rel="noreferrer">file.seek()</a>:</p>
<pre><code>import os
find_str = "ERROR"
error = False
# Open file with 'b' to specify binary mode
with open(file_directory, 'rb') as file:
    file.seek(-1024 * 1024, os.SEEK_END)  # Note minus sign
    if find_str in file.read():
        error = True
</code></pre>
<p>You must specify binary mode when you open the file or you will get 'undefined behavior.'  Under python2, it might work anyway (it did for me), but under python3 <code>seek()</code> will raise an <code>io.UnsupportedOperation</code> exception if the file was opened in the default text mode. The python 3 docs are <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="noreferrer">here</a>.  Though it isn't clear from those docs, the <code>SEEK_*</code> constants are still in the <code>os</code> module.</p>
<p><strong>Update:</strong> Using <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="noreferrer"><code>with</code> statement</a> for safer resource management, as suggested by Chris Betti.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/2/library/collections.html#deque-recipes" rel="nofollow">tail recipe</a> with a <a href="http://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow">deque</a> to get the last <code>n</code> lines of a large file:</p>
<pre><code>from collections import deque

def tail(fn, n):
    with open(fn) as fin:
        return list(deque(fin, n))
</code></pre>
<p>Now test this.</p>
<p>First create a big file:</p>
<pre><code>&gt;&gt;&gt; with open('/tmp/lines.txt', 'w') as f:
...    for i in range(1,10000000+1):
...       print &gt;&gt; f, 'Line {}'.format(i)  # Python 3: print('Line {}'.format(i), file=f)

# about 128 MB on my machine
</code></pre>
<p>Then test:</p>
<pre><code>print tail('/tmp/lines.txt', 20) 
# ['Line 9999981\n', 'Line 9999982\n', 'Line 9999983\n', 'Line 9999984\n', 'Line 9999985\n', 'Line 9999986\n', 'Line 9999987\n', 'Line 9999988\n', 'Line 9999989\n', 'Line 9999990\n', 'Line 9999991\n', 'Line 9999992\n', 'Line 9999993\n', 'Line 9999994\n', 'Line 9999995\n', 'Line 9999996\n', 'Line 9999997\n', 'Line 9999998\n', 'Line 9999999\n', 'Line 10000000\n']
</code></pre>
<p>This will return the last n lines rather than the last X bytes of a file. The size of the data is the same as the size of lines -- not the size of the file. The <a href="http://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow">file object</a> <code>fin</code> is used as an iterator over lines of the file, so the entire file is not resident in memory all at once. </p>
</div>
<div class="post-text" itemprop="text">
<p>The proposed answer using <code>seek</code> is a correct answer to your question, but I think it's not what you really want to do. Your solution loads the whole file into memory, just to get the last 20 lines. That's the main cause of your problem. The following would solve your memory issue:</p>
<pre><code>for line in file(file_directory):
    if find_str in line:
        error = True
</code></pre>
<p>This will iterate over all lines in the file, but releasing the lines after they have been processed. I would guess, that this solution is already much faster than yours so no further optimization is needed. But if you really want to have just the last 20 lines, but the lines in a <a href="http://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow">deque</a> with a max length of 20.</p>
</div>
<span class="comment-copy">@nkshakya1 I updated the answer.  You don't need <code>with</code> at all; it's just a convenience for closing the file.  I added that at the end in a comment as a reminder to close it if you're finished with it.</span>
<span class="comment-copy">Alternatively if you have jython 2.5 you can add <code>from __future__ import with_statement</code> at the top of your code, then you can use <code>with</code> statements.</span>
<span class="comment-copy">Thanks for the help everyone! I think its working now. For another case, if I have a text file that is 5-10 kB and I want to look at the last 2 kB of it, do i just replace the '-1024 * 1024' with '-2 * 2' ?</span>
<span class="comment-copy">@nkshakya1 Replace with <code>-2 * 1024</code> or just <code>-2048</code>. (1024 = kB)</span>
<span class="comment-copy">Thanks guys! Its finally working!! Really appreciate all the help!</span>
<span class="comment-copy">won't that still load the whole file in memory? (or will it use fin as if it is a generator expression?)</span>
<span class="comment-copy"><code>fin</code> will be used as a generator, so the entire file will not be in memory at the same time.</span>
<span class="comment-copy">No. An open file works like an iterator over lines/strings.</span>
<span class="comment-copy">But, you can't specify an amount of bytes to read back this way? (Or perhaps OP doesn't need that specific 1MB)</span>
<span class="comment-copy">@DaanTimmer: If you specify lines that a variable width, you cannot specify bytes; if you specify bytes of a file that contains variable width lines, you cannot specify exact lines.</span>
<span class="comment-copy">The OP asked quite clearly how to read the last MB of a file.</span>
