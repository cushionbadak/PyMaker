<div class="post-text" itemprop="text">
<p>I have the following function:</p>
<pre><code>    def to_url(self):
    return {
        'ass_cls': self.model.__class__.__name__,
        **{local.name: getattr(self.model.src, remote.name)
           for local, remote in self.model.__class__.src.property.local_remote_pairs},
        **{k: v
           for k, v in self.model.__dict__.items()
           if not k.startswith('_') and k != 'src'},
    }
</code></pre>
<p>How do I convert this piece of code into Python 3.4-compatible?</p>
<p>I believe, the code currently uses <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow">PEP 448 - Additional Unpacking Generalizations</a> right now, which is a Python 3.5 feature.</p>
</div>
<div class="post-text" itemprop="text">
<p>The new <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow">unpacking feature</a> is what won't work in 3.4.</p>
<p>You'll have to use the older, more verbose method of merging dictionaries.</p>
<pre><code>def to_url(self):
    d = {'ass_cls': self.model.__class__.__name__}
    d.update({local.name: getattr(self.model.src, remote.name) 
        for local, remote in self.model.__class__.src.property.local_remote_pairs})
    d.update({k: v for k, v in self.model.__dict__.items()
        if not k.startswith('_') and k != 'src'})
    return d
</code></pre>
</div>
<span class="comment-copy">What's wrong with it as-is? (aside from the indentation...)</span>
<span class="comment-copy">@MattDMo it's using Python 3.5 features :) It isn't going to work in Python 3.4</span>
<span class="comment-copy">There are <b>many</b> ways to do it, here's a one-liner:<code>dict(ass_cls=1, **dict(dict_comp_1, **dict_comp_2))</code>. Basically all you need is a flattened dict at the end combined of keys obtained from all the dicts.</span>
<span class="comment-copy">@omtcyf0 perhaps you could highlight <i>which</i> features, and/or provide the 3.4 error message, so that every reader doesn't have to figure it out themselves.</span>
<span class="comment-copy">So the 3.5 feature is that nested {} syntax.  The expression would clearer if the dictionary was created separately in one or more expressions.</span>
<span class="comment-copy">You could also pass generator expressions (yielding <code>key, value</code> 2-tuples) to <code>update</code> rather than creating the sub-dictionaries with comprehensions. Not sure if it's any faster (though it should use a bit less peak memory) but it seems more natural to me. Just drop the <code>{}</code> and use <code>(k, v)</code> instead of <code>k: v</code>.</span>
