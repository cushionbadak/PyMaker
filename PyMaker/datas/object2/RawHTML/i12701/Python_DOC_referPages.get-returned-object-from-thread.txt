<div class="post-text" itemprop="text">
<p>I'm writing a code that opens 3 Selenium Webdrivers. </p>
<pre><code>from selenium import webdriver
b1 = webdriver.Firefox()
b2 = webdriver.Firefox()
b3 = webdriver.Firefox()
</code></pre>
<p>The browser loading takes a lot of time, and I want to load it parallel.
I though to use threading, but how can I return the b1,b2,b3 from thread?</p>
<p>I mean, if I have this function:</p>
<pre><code>def open_browser():
  return webdriver.Firefox()
</code></pre>
<p>Threading with it will look like:</p>
<pre><code>b1 = threading.Thread(target=open_browser, args=())
</code></pre>
<p>but the returned value, the browser instance, does not set into b1.</p>
<p>How should I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures" rel="nofollow">Futures</a>. They should allow you to run code like this:</p>
<pre><code>N = 3
with ThreadPoolExecutor(max_workers=N) as executor:
    # start three Firefoxes in parallel
    futures = [executor.submit(webdriver.Firefox) for i in range(N)]
    # wait for all of them to be started
    browsers = [f.result() for f in futures]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just put the variable outside the scope</p>
<pre><code>import threading
from selenium import webdriver

b1 = None
b2 = None
b3 = None
b_list = [b1, b2, b3]
url_list = ['https://www.google.com.br/', 'http://stackoverflow.com/', 'https://www.youtube.com/']


def open_browser(b_index, url):
    b_list[b_index] = webdriver.Firefox()
    b_list[b_index].get(url)

thread_list = []
for index, url in zip(range(len(b_list)), url_list):
    thread_list.append(
        threading.Thread(target=open_browser, args=(index, url))
    )

for i in thread_list:
    i.start()

for i in thread_list:
    i.join()

print('finish')

for i in b_list:
    print(i.current_url)
</code></pre>
<p>Another way to optimize is to use <a href="http://phantomjs.org/" rel="nofollow">PhantomJS</a>. It is faster than Firefox.</p>
</div>
<span class="comment-copy">of course not: <code>b1</code> is the Thread object just created. See <a href="https://pymotw.com/2/threading/" rel="nofollow noreferrer">here</a> for reference. BTW, I seriously doubt using threads would make things any better...</span>
<span class="comment-copy">If you are unsatisfied because the Firefox is slow, I recommend you use the PhantomJS</span>
<span class="comment-copy">@Pynchia I just want to load them parallel..</span>
