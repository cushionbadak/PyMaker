<div class="post-text" itemprop="text">
<p>I am trying to return a constantly changing variable in Python 3, the variable is in a while loop, counting to the specified number, changing its value to zero, and starting again.
(e.g 1, 2, 3, 4, 5, <strong>0</strong>, 1, 2, 3, 4, 5, <strong>0</strong>...)
Here is my code:</p>
<pre><code>global x
run = True
def count(l):
    x = 0
    global run
    while run:
        x += 1
        if x == l+1:
            x = 0
        print(x)
</code></pre>
<p>And when I run <code>count(5)</code> It <em>prints</em> the desired results, But 1: I'm trying to find a way to constantly run that loop in the background, and 2: the variable needs to be <em>returned</em>, not printed</p>
<pre><code>GetCount()
</code></pre>
<p>and have it <em>return</em> the desired results.</p>
<p>I have tried adding this to the end of the function:</p>
<pre><code>try:
    return x 
finally: 
    count(l)
</code></pre>
<p>But then it crashes with <em>Maximum recursion depth exceeded during comparison</em></p>
<p>So my questions are, 1: Is there a way to have x be continually returned without reaching Maximum recursion depth?, and 2: If there is, is there also a way to have <code>count()</code> be running in the background, so I can get x's current value, and if so how?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a> can help:</p>
<pre><code>import itertools as it

c = it.cycle(range(6))

for x in range(10):
    print(next(c))
</code></pre>
<p>prints:</p>
<pre><code>0
1
2
3
4
5
0
1
2
3
</code></pre>
<p>Just use <code>next(c)</code> to get the next number.</p>
<pre><code>print(next(c))
</code></pre>
<p>now prints:</p>
<pre><code>4
</code></pre>
<p>because we stopped at <code>3</code> before. You can set your ID value with:</p>
<pre><code>my_id = next(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want is a <em>generator</em> and to <em>yield</em> each value:</p>
<pre><code>def count(l):
    x = 0
    while True:
        yield x
        if x == l:
            x = -1
        x += 1


for i in count(5):
    print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want is to make a generator functions</p>
<blockquote>
<p>It looks like a normal function except that it contains yield expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the next() function.</p>
<p>Usually refers to a generator function, but may refer to a generator iterator in some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity.</p>
</blockquote>
<p>You make a generator in cases where you want a series of value to be calculate in a certain way but don´t need all of then at once because you only need one at a particular time and/or there are too many or even infinite of them.</p>
<p>A generator will remember were if was at the moment of yielding a value and will resume its calculation from that point on went a new value is required.</p>
<p>@Mike Muller already give you the perfect solution to your problem, so how about another example, like the Fibonacci number, there are infinite of them, but you can make a generator that give you all of them like this</p>
<pre><code>def Fib():
    Fn  = 0
    Fn1 = 1
    while True:
        yield Fn
        Fn,Fn1 = Fn1, Fn+Fn1
</code></pre>
<p>this will give you every single Fibonacci number one at the time as you ask for them</p>
<pre><code>&gt;&gt;&gt; fibo=Fib()
&gt;&gt;&gt; for i in range(10):
    print("the",i,"-th fibonacci number is:",next(fibo))


the 0 -th fibonacci number is: 0
the 1 -th fibonacci number is: 1
the 2 -th fibonacci number is: 1
the 3 -th fibonacci number is: 2
the 4 -th fibonacci number is: 3
the 5 -th fibonacci number is: 5
the 6 -th fibonacci number is: 8
the 7 -th fibonacci number is: 13
the 8 -th fibonacci number is: 21
the 9 -th fibonacci number is: 34
&gt;&gt;&gt; next(fibo) #10-th
55
</code></pre>
</div>
<span class="comment-copy">Can you provide any details as to the root desire to return a constantly changing variable?  What is the variable keeping track of, and why do you need to do this constantly vs as needed?</span>
<span class="comment-copy">Please describe your intention with this program because I suspect you need something else instead of "constantly returning values".</span>
<span class="comment-copy">The goal of the program was for me to access it elseware and call count(), to find whatever the current value of x was. For example, if I wanted to append a number to the end of a user-id.</span>
<span class="comment-copy">Is a database table with an auto-incrementing field out of the question?  I guess I should clarify my question with, what is the use case? You want to provide some uniqueness for userids? Why not use guids?</span>
<span class="comment-copy">user-id's what just an example...</span>
<span class="comment-copy">Thank you, you answered both my question's(I did not see the edit)</span>
<span class="comment-copy">Don't need <code>iter</code></span>
<span class="comment-copy">@HaiVu Thanks for the hint. Removed.</span>
<span class="comment-copy"><code>for i in count(5)</code> will result in an infinite loop :-) The solution is correct, btw.</span>
<span class="comment-copy">@HaiVu, yep, that's what the doctor ordered</span>
