<div class="post-text" itemprop="text">
<p>I have a list of integers, in which some are consecutive numbers.</p>
<p>What I have:</p>
<p><code>myIntList = [21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]</code> etc...</p>
<p>What I want:</p>
<pre><code>MyNewIntList = [[21,22,23,24],[0,1,2,3],[0,1,2,3,4,5,6,7]]
</code></pre>
<p>I want to be able to split this list by the element 0, i.e when looping, if the element is 0, to split the list into separate lists.
Then, after splitting <code>myIntList</code> whatever number of times (based on the recurrences of finding the element 0), I want to append each 'split' or group of consecutive integers into a list within a list.</p>
<p>Also would I be able to do the same sort of thing with a 'list of strings' instead of integers?  (Split the main string list into smaller lists based on a reoccurring element)</p>
<p>EDIT: </p>
<p>How would I go about splitting the list by consecutive numbers?  There's a part in my list where it jumps from 322 to 51, there is no 0 in between.  I want to split:</p>
<pre><code>[[...319,320,321,322,51,52,53...]]
</code></pre>
<p>into</p>
<pre><code>[[...319,320,321,322],[51,52,53...]]
</code></pre>
<p>basically, how do I split elements in a list by consecutive numbers?</p>
<p>Posted here:
<a href="https://stackoverflow.com/questions/34277467/split-list-of-integers-by-consecutive-order-into-separate-lists">Split list of lists (integers) by consecutive order into separate lists</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>it  = iter(myIntList)
out = [[next(it)]]
for ele in it:
    if ele != 0:
        out[-1].append(ele)
    else:
        out.append([ele])

print(out)
</code></pre>
<p>Or in a function:</p>
<pre><code>def split_at(i, l):
    it = iter(l)
    out = [next(it)]
    for ele in it:
        if ele != i:
            out.append(ele)
        else:
            yield out
            out = [ele]
    yield out
</code></pre>
<p>It will catch if you have a <code>0</code> at the start:</p>
<pre><code>In [89]: list(split_at(0, myIntList))
Out[89]: [[21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]

In [90]: myIntList = [0,21, 22, 23, 24, 0, 1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7]

In [91]: list(split_at(0, myIntList))
Out[91]: [[0, 21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(I vaguely suspect I've done this before but I can't find it now.)</p>
<pre><code>from itertools import groupby, accumulate

def itergroup(seq, val):
    it = iter(seq)    
    grouped = groupby(accumulate(x==val for x in seq))
    return [[next(it) for c in g] for k,g in grouped]
</code></pre>
<p>gives</p>
<pre><code>&gt;&gt;&gt; itergroup([21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7], 0)
[[21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
&gt;&gt;&gt; itergroup([0,1,2,0,3,4], 0)
[[0, 1, 2], [0, 3, 4]]
&gt;&gt;&gt; itergroup([0,0], 0)
[[0], [0]]
</code></pre>
<p>(That said, in practice I use the <code>yield</code> version of the same loop/branch that everyone else does, but I'll post the above for variety.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use slicing:</p>
<pre><code>myIntList = [21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]
myNewIntList = []
lastIndex = 0
for i in range(len(myIntList)):
    if myIntList[i] == 0:
        myNewIntList.append(myIntList[lastIndex:i])
        lastIndex = i

myNewIntList.append(myIntList[lastIndex:])
print(myNewIntList)
# [[21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
</code></pre>
<p>You can split strings using the <code>str.split</code> function:</p>
<pre><code>s = 'stackoverflow'
s.split('o') # ['stack', 'verfl', 'w'] (removes the 'o's)

import re
[part for part in re.split('(o[^o]*)', s) if part] # ['stack', 'overfl', 'ow'] (keeps the 'o's)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>myIntList = [21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]

new = []
m,j=0,0
for i in range(myIntList.count(0)+1):
    try:
        j= j+myIntList[j:].index(0)
        if m==j:
           j= j+myIntList[j+1:].index(0)+1



        new.append(myIntList[m:j])
        m,j=j,m+j
    except:
        new.append(myIntList[m:])
        break
print new
</code></pre>
<p><strong>output</strong></p>
<pre><code> [[21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
</code></pre>
<p><strong>output2</strong></p>
<pre><code>myIntList = [0,21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]

[[0, 21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can loop through the whole list, appending to a temp list till <code>0</code> is found. Then you again reset the temp list and continue. </p>
<pre><code>&gt;&gt;&gt; myIntList = [21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]
&gt;&gt;&gt; newlist = [] 
&gt;&gt;&gt; templist = []
&gt;&gt;&gt; for i in myIntList:
...      if i==0:
...          newlist.append(templist)
...          templist = []
...      templist.append(i)
... 
&gt;&gt;&gt; newlist.append(templist)
&gt;&gt;&gt; newlist
[[21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
</code></pre>
<p>and for strings you can use the same approach by using the <code>list</code> call</p>
<pre><code>&gt;&gt;&gt; s = "winterbash"
&gt;&gt;&gt; list(s)
['w', 'i', 'n', 't', 'e', 'r', 'b', 'a', 's', 'h']
</code></pre>
<p>Also using <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools</code></a></p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; myIntList = [21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]
&gt;&gt;&gt; temp=[list(g) for k,g in itertools.groupby(myIntList,lambda x:x== 0) if not k]
&gt;&gt;&gt; if myIntList[0]!=0:
...     newlist = [temp[0]] + [[0]+i for i in temp[1:]]
... else:
...     newlist = [[0]+i for i in temp]
... 
&gt;&gt;&gt; newlist
[[21, 22, 23, 24], [0, 1, 2, 3], [0, 1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try:</p>
<pre><code>i = 0
j = 0
loop = True
newList = []

while loop:
    try:
        i = myIntList.index(0, j)
        newList.append(myIntList[j:i])
        j = i + 1
    except ValueError as e:
        newList.append(myIntList[j:])
        loop = False

print newList
[[21, 22, 23, 24], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<span class="comment-copy">Thanks for helping out @PadraicCunningham.  I find definitions helpful.</span>
<span class="comment-copy">Thanks @DSM.  Variety in coding is always useful.  :)</span>
<span class="comment-copy">for some reason I get an ImportError: cannot import name accumulate...Thoughts?</span>
<span class="comment-copy">Nevermind, I changed Python 2 to 3, and it worked.  Thanks</span>
<span class="comment-copy">Thank you kindly!</span>
<span class="comment-copy">try <code>[0,21,22,23,24,0,1,2,3,0,1,2,3,4,5,6,7]</code></span>
<span class="comment-copy">@padraicCunningham I updated code !!</span>
<span class="comment-copy">@MikeIssa Added. Is it what you want?</span>
<span class="comment-copy">@BhargavRao: what if 0 is the first element?  (On your itertools version.)</span>
<span class="comment-copy">@DSM Yep. Did not see that edge case. I will change it soon. Thanks</span>
<span class="comment-copy">@DSM I did it trivially. Please mention if there is any other better way.</span>
<span class="comment-copy">@BhargavRao, you should use a generator expression for the first,  you can call <code>next(gen)</code> to get the first element</span>
