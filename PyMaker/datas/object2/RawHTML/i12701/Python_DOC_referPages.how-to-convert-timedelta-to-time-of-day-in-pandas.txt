<div class="post-text" itemprop="text">
<p>I have a SQL table that contains data of the mySQL <code>time</code> type as follows:</p>
<pre><code>time_of_day
-----------
   12:34:56
</code></pre>
<p>I then use <code>pandas</code> to read the table in:</p>
<p><code>df = pd.read_sql('select * from time_of_day', engine)</code></p>
<p>Looking at <code>df.dtypes</code> yields:</p>
<p><code>time_of_day    timedelta64[ns]</code></p>
<p>My main issue is that, when writing my <code>df</code> to a csv file, the data comes out all messed up, instead of essentially looking like my SQL table:</p>
<pre><code>time_of_day
0 days 12:34:56.000000000
</code></pre>
<p><strong>I'd like to instead (obviously) store this record as a <code>time</code>, but I can't find anything in the pandas docs that talk about a time <code>dtype</code>.</strong> </p>
<p>Does pandas lack this functionality intentionally? Is there a way to solve my problem without requiring janky data casting?</p>
<p>Seems like this should be elementary, but I'm confounded.</p>
</div>
<div class="post-text" itemprop="text">
<p>found a solution, but i feel like it's gotta be more elegant than this:</p>
<pre><code>def convert(x):
    return pd.to_datetime(x).strftime('%H:%M:%S')

df['time_of_day'] = df['time_of_day'].apply(convert)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df['time_of_day'] = pd.to_datetime(df['time_of_day']).apply(lambda x: x.time())
</code></pre>
<p><a href="https://stackoverflow.com/a/41796793/940592">Adapted this code</a></p>
</div>
<div class="post-text" itemprop="text">
<h3>Pandas does not support a <code>time</code> dtype series</h3>
<p>Pandas (and NumPy) do not have a <code>time</code> dtype. Since you wish to avoid Pandas <code>timedelta</code>, you have 3 options: Pandas <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html" rel="nofollow noreferrer"><code>datetime</code></a>, Python <a href="https://docs.python.org/3/library/datetime.html#time-objects" rel="nofollow noreferrer"><code>datetime.time</code></a>, or Python <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str</code></a>. Below they are presented in order of preference. Let's assume you start with the following dataframe:</p>
<pre><code>df = pd.DataFrame({'time': pd.to_timedelta(['12:34:56', '05:12:45', '15:15:06'])})

print(df['time'].dtype)  # timedelta64[ns]
</code></pre>
<h3>Pandas <code>datetime</code> series</h3>
<p>You can use Pandas <code>datetime</code> series and include an arbitrary date component, e.g. today's date. Underlying such a series are integers, which makes this solution the most efficient and adaptable.</p>
<p>The default date, if unspecified, is 1-Jan-1970:</p>
<pre><code>df['time'] = pd.to_datetime(df['time'])

print(df)

#                  time
# 0 1970-01-01 12:34:56
# 1 1970-01-01 05:12:45
# 2 1970-01-01 15:15:06
</code></pre>
<p>You can also specify a date, such as today:</p>
<pre><code>df['time'] = pd.Timestamp('today').normalize() + df['time']

print(df)

#                  time
# 0 2019-01-02 12:34:56
# 1 2019-01-02 05:12:45
# 2 2019-01-02 15:15:06
</code></pre>
<h3>Pandas <code>object</code> series of Python <code>datetime.time</code> values</h3>
<p>The Python <code>datetime</code> module from the standard library supports <code>datetime.time</code> objects. You can convert your series to an <code>object</code> dtype series containing pointers to a sequence of <code>datetime.time</code> objects. Operations will no longer be vectorised, but each underlying value will be represented internally by a number.</p>
<pre><code>df['time'] = pd.to_datetime(df['time']).dt.time

print(df)

#        time
# 0  12:34:56
# 1  05:12:45
# 2  15:15:06

print(df['time'].dtype)
# object

print(type(df['time'].at[0]))
# &lt;class 'datetime.time'&gt;
</code></pre>
<h3>Pandas <code>object</code> series of Python <code>str</code> values</h3>
<p>Converting to strings is only recommended for presentation purposes that are not supported by other types, e.g. Pandas <code>datetime</code> or Python <code>datetime.time</code>. For example:</p>
<pre><code>df['time'] = pd.to_datetime(df['time']).dt.strftime('%H:%M:%S')

print(df)

#        time
# 0  12:34:56
# 1  05:12:45
# 2  15:15:06

print(df['time'].dtype)
# object

print(type(df['time'].at[0]))
# &lt;class 'str'&gt;
</code></pre>
</div>
<span class="comment-copy">what does pandas.to_datetime give?</span>
<span class="comment-copy">it returns <code>1970-01-01 12:34:56</code></span>
<span class="comment-copy">Same issue when mysql column is of type TIME, pandas return TimeDelta. I do not get this behavior when the column type is DATETIME. There's not option in Pandas read_sql method to parse the TIME.</span>
<span class="comment-copy">The issue I think is NumPy hasn't implemented a <code>time</code> class, and Pandas is built on NumPy. So don't think this is natural for Pandas.</span>
<span class="comment-copy"><code>TypeError: &lt;class 'pandas._libs.tslibs.timedeltas.Timedelta'&gt; is not convertible to datetime</code></span>
