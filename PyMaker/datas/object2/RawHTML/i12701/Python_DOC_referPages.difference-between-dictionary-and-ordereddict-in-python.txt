<div class="post-text" itemprop="text">
<p>I am trying to get a sorted dictionary. But the order of the items between <code>mydict</code> and <code>orddict</code> doesn't seem to change.</p>
<pre><code>from collections import OrderedDict

mydict = {'a':1,'b':2,'c':3,'d':4}

orddict = OrderedDict(mydict)

print(mydict,orddict)

# print items in mydict:
print('mydict')
for k,v in mydict.items():
    print(k,v)

print('ordereddict')
# print items in ordered dictionary
for k,v in orddict.items():
    print(k,v)


# print the dictionary keys
# for key in mydict.keys():
#     print(key)


#  print the dictionary values
# for value in mydict.values():
#     print(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An <code>OrderedDict</code> preserves the order elements were inserted:</p>
<pre><code>&gt;&gt;&gt; od = OrderedDict()
&gt;&gt;&gt; od['c'] = 1
&gt;&gt;&gt; od['b'] = 2
&gt;&gt;&gt; od['a'] = 3
&gt;&gt;&gt; od.items()
[('c', 1), ('b', 2), ('a', 3)]
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['c'] = 1
&gt;&gt;&gt; d['b'] = 2
&gt;&gt;&gt; d['a'] = 3
&gt;&gt;&gt; d.items()
[('a', 3), ('c', 1), ('b', 2)]
</code></pre>
<p>So an <code>OrderedDict</code> does not <em>order</em> the elements for you, it <em>preserves</em>  the order you give it.</p>
<p>If you want to "sort" a dictionary, you probably want</p>
<pre><code>&gt;&gt;&gt; sorted(d.items())
[('a', 1), ('b', 2), ('c', 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Ordered dictionaries are just like regular dictionaries but they remember the order that items were inserted. When iterating over an ordered dictionary, the items are returned in the order their keys were first added.</p>
</blockquote>
<p>So it only sorts by order of adding into the dict</p>
<p>You can build an OrderedDict order by key as follow,</p>
<p><code>orddict = OrderedDict(sorted(mydict.items(), key = lambda t: t[0]))</code></p>
<p>or simply as @ShadowRanger mentioned in comment</p>
<p><code>orddict = OrderedDict(sorted(d.items()))</code></p>
<p>If you want to order by value,</p>
<p><code>orddict = OrderedDict(sorted(mydict.items(), key = lambda t: t[1]))</code></p>
<p>More information in <a href="https://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow">8.3.5.1. OrderedDict Examples and Recipes</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Adding on to the answer by Brian, <code>OrderedDict</code> is really great. Here's why:</p>
<ul>
<li><p>You can use it as simple <code>dict</code> object because it supports equality testing with other <code>Mapping</code> objects like <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">collections.counter</a>.</p></li>
<li><p><code>OrderedDict</code> preserves the insertion order as explained by Brian. In addition to that it has a method <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.popitem" rel="nofollow">popitem</a> which returns (key,value) pairs in LIFO order. So, you can also use it as a mapped 'stack'.</p></li>
</ul>
<p>You not only get the full features of a <code>dict</code> but also, some cool tricks.</p>
</div>
<span class="comment-copy">When you construct a <i>dict</i>, the order is <i>not</i> stored. So creating an <code>OrderedDict</code> from a dict will be in the same order the <i>dict</i> was created.</span>
<span class="comment-copy">And to convert a <code>dict</code> to an <code>OrderedDict</code> that (initially) has the keys in sorted order, you'd do: <code>od = OrderedDict(sorted(d.items()))</code>.</span>
<span class="comment-copy">Note that dicts are now insertion ordered by default.</span>
<span class="comment-copy">It does have a price for some aspects in speed and memory.</span>
