<div class="post-text" itemprop="text">
<p>I want to find out how logging should be organised given that I write many scripts and modules that should feature similar logging. I want to be able to set the logging appearance and the logging level from the script and I want this to propagate the appearance and level to my modules and only my modules.</p>
<p>An example script could be something like the following:</p>
<pre><code>import logging
import technicolor
import example_2_module

def main():

    verbose = True

    global log
    log = logging.getLogger(__name__)
    logging.root.addHandler(technicolor.ColorisingStreamHandler())

    # logging level
    if verbose:
        logging.root.setLevel(logging.DEBUG)
    else:
        logging.root.setLevel(logging.INFO)

    log.info("example INFO message in main")
    log.debug("example DEBUG message in main")

    example_2_module.function1()

if __name__ == '__main__':
    main()
</code></pre>
<p>An example module could be something like the following:</p>
<pre><code>import logging

log = logging.getLogger(__name__)

def function1():

    print("printout of function 1")
    log.info("example INFO message in module")
    log.debug("example DEBUG message in module")
</code></pre>
<p>You can see that in the module there is minimal infrastructure written to import the logging of the appearance and the level set in the script. This has worked fine, but I've encountered a problem: other modules that have logging. This can result in output being printed twice, and very detailed debug logging from modules that are not my own.</p>
<p>How should I code this such that the logging appearance/level is set from the script but then used only by my modules?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to set the <code>propagate</code> attribute to <code>False</code> so that the log message does not propagate to ancestor loggers. Here is the documentation for <a href="https://docs.python.org/3/library/logging.html#logging.Logger.propagate" rel="nofollow"><code>Logger.propagate</code></a> -- it defaults to <code>True</code>. So just:</p>
<pre><code>import logging

log = logging.getLogger(__name__)
log.propagate = False
</code></pre>
</div>
