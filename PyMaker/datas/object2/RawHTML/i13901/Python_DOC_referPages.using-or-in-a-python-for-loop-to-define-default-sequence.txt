<div class="post-text" itemprop="text">
<p>I have seen somewhere this usage of a for loop:</p>
<pre><code>def func(seq=None):
    for i in seq or [1, 2, 3]:
       print i

func([3, 4, 5])  # Will print 3, 4, 5
func()           # Will print 1, 2, 3
</code></pre>
<p>It seems that when using or/and when using the "in" keyword it will select the first/last "usable" sequence in order to run the for loop.</p>
<p>I have not seen any official documentation and was wondering how it works and if it's commonly used.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case of <code>or</code> (or <code>and</code> ) operator, when you do -</p>
<pre><code>a or b
</code></pre>
<p>It returns <code>a</code> if a is not a false-like value, otherwise it returns <code>b</code> . <code>None</code> (and empty lists) are false like value.</p>
<p>From <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow">documentation</a> -</p>
<blockquote>
<p>The expression <code>x and y</code> first evaluates <code>x</code>; if <code>x</code> is false, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned.</p>
<p>The expression <code>x or y</code> first evaluates <code>x</code>; if <code>x</code> is true, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned.</p>
<p>(Note that neither and nor or restrict the value and type they return to False and True, but rather return the last evaluated argument. This is sometimes useful, e.g., if <code>s</code> is a string that should be replaced by a default value if it is empty, the expression<code>s or 'foo'</code> yields the desired value. Because not has to invent a value anyway, it does not bother to return a value of the same type as its argument, so e.g., not 'foo' yields False, not ''.)</p>
</blockquote>
<hr/>
<p>Also, in case of <code>for</code> loop, <code>in</code> is actually part of the <code>for</code> loop construct, its not an operator. Documentation for <code>for</code> loop construct <a href="https://docs.python.org/2/reference/compound_stmts.html#for" rel="nofollow">here</a>.</p>
<hr/>
<p>Hence when you do -</p>
<pre><code>for i in seq or [1, 2, 3]:
</code></pre>
<p>It would first evaluate -</p>
<pre><code>seq or [1 , 2, 3]
</code></pre>
<p>And returns the <code>seq</code> list if its not none or empty, so that you can iterate over that. Otherwise, it would return [1, 2, 3] and you would iterate over that.</p>
</div>
<div class="post-text" itemprop="text">
<p>No! It's the operator priority! <code>or</code> before <code>in</code>…<br/>
<a href="https://docs.python.org/3/reference/expressions.html?highlight=precedence#operator-precedence" rel="nofollow">Precedence</a>, §6.15.<br/>
So <code>seq or [1, 2, 3]</code> is evaluated before entering the loop. And seq is <code>None</code>.</p>
</div>
<span class="comment-copy"><code>seq or [1, 2, 3]</code> is roughly equivalent to <code>seq if len(seq) &gt; 0 else [1, 2, 3]</code>, i.e. providing a default in case it gets an empty sequence. See <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#truth-value-testing</a></span>
<span class="comment-copy">@jonrsharpe it's more like <code>seq if bool(seq) else [1,2,3]</code>, with the empty list being <code>False</code>!</span>
<span class="comment-copy">@KarlBarker that's more accurate but probably less helpful!</span>
<span class="comment-copy">Why this -1? I don't understand!</span>
<span class="comment-copy"><code>in</code> is not an operator in that context.</span>
<span class="comment-copy">Well… Look at Python official doc <code>https://docs.python.org/3/reference/expressions.html?highlight=precedence#operator-precedence</code> 6.15. <code>seq or [1, 2, 3]</code> is evaluated before entering in the loop.</span>
<span class="comment-copy">@Clodion You are new to stackoverflow so you will have many -1.</span>
<span class="comment-copy">@mohan3d: Yes, may be! :-). But when I'm on the right way, whatever the reputation, I can show this is the truth (if I'm right!) ;-)</span>
