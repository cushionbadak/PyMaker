<div class="post-text" itemprop="text">
<p>Unlike <code>list.extend(L)</code>, there is no <code>extend</code> function in <code>set</code>. How can I extend a tuple to a set in pythonic way?</p>
<pre><code>t1 = (1, 2, 3)
t2 = (3, 4, 5)
t3 = (5, 6, 7)

s = set()
s.add(t1)
s.add(t2)
s.add(t3)

print s
set([(3, 4, 5), (5, 6, 7), (1, 2, 3)])
</code></pre>
<p>My expected result is:</p>
<pre><code>set([1, 2, 3, 4, 5, 6, 7])
</code></pre>
<p>My solutions is something like:</p>
<pre><code>for item in t1 :
    s.add(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the <code>union</code> method -</p>
<pre><code>t1 = (1, 2, 3)
t2 = (3, 4, 5)
t3 = (5, 6, 7)
s= set()
s = s.union(t1)
s = s.union(t2)
s = s.union(t3)
s
&gt;&gt;&gt; set([1, 2, 3, 4, 5, 6, 7])
</code></pre>
<p>Or as indicated in the comments , cleaner method -</p>
<pre><code>s = set().union(t1, t2, t3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Either:</p>
<pre><code>&gt;&gt;&gt; newSet = s.union(t1, t2, t3)
set([1, 2, 3, 4, 5, 6, 7])
</code></pre>
<p>Or the following, which actually updates without any assignation needed</p>
<pre><code>&gt;&gt;&gt; s.update( t1, t2, t3)
&gt;&gt;&gt; s
set([1, 2, 3, 4, 5, 6, 7])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using the wrong method. <code>add</code> adds a single item, <code>update</code> unions the set with the argument.</p>
<pre><code>t1 = (1, 2, 3)
t2 = (3, 4, 5)
t3 = (5, 6, 7)

s = set()
s.update(t1)
s.update(t2)
s.update(t3)

print s
</code></pre>
</div>
<span class="comment-copy"><code>s = set(t1).union(t2, t3)</code> is a little neater</span>
<span class="comment-copy">@jonrsharpe: <code>set().union(t1, t2, t3)</code> is even cleaner, IMHO, because of the symmetry among the arguments.</span>
<span class="comment-copy">The documentation of <code>union</code> states <code>Return the union of sets as a new set</code>, so it seems to only be defined for <code>set</code> arguments. Do we know that feeding tuples won't result in undefined behavior in the future?</span>
<span class="comment-copy">@goncalopp <i>"Note, the non-operator versions of union(), intersection(), difference(), and symmetric_difference(), issubset(), and issuperset() methods will accept any iterable as an argument."</i> - <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#set-types-set-frozenset</a> (and in the 2.x version)</span>
<span class="comment-copy">@SparkandShine <code>update</code> is in-place (and therefore only works on <code>set</code>, not <code>frozenset</code>), whereas <code>union</code> returns a new <code>set</code></span>
<span class="comment-copy">You only need one call to <code>update</code>, which can accept multiple iterables to add to the set. (<code>s.update(t1, t2, t3)</code>)</span>
<span class="comment-copy">@chepner - like I did with <code>union</code> in my answer :D</span>
<span class="comment-copy">@chepner True, although I wanted to show the symmetry with the poster's code</span>
<span class="comment-copy">@vogomatix I didn't scroll down far enough to see your answer :)</span>
<span class="comment-copy">@chepner: don't worry I didn't see DSM's comment either. :)</span>
