<div class="post-text" itemprop="text">
<p>I already know that if we have a list of two tuples like:</p>
<pre><code>list = (('2', '23', '29', '26'), ('36', '0'))
</code></pre>
<p>by the below command:</p>
<pre><code>new_list = list[0] + list[1]
</code></pre>
<p>it would be;</p>
<pre><code>list = ('2', '23', '29', '26', '36', '0')
</code></pre>
<p>What shall I do if we have a plenty of tuples the below, and I want to use something like loop command? </p>
<pre><code>list = [[list], [list2], [list3], ...]
</code></pre>
<p>I want:</p>
<pre><code>new_list = [list1, list2, list3,...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools.chain</code></a>, and you can simply supply the list as arguments using <code>*</code> to expand them.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a_list = [[1], [2], [3]]
&gt;&gt;&gt; list(chain(*a_list))
[1, 2, 3]
&gt;&gt;&gt; tuple(chain(*a_list))
(1, 2, 3)
</code></pre>
<p>Also do not use pre-defined types such as <code>list</code> as a variable name as this redefines them to not being what they really are, and the parentheses <code>(1, 2...)</code> syntax results in a <code>tuple</code>, not a <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, you are not merging two lists as you say in the question.
What you're doing is making a <em>list of list</em> into a <em>list</em>.</p>
<p>There are many ways you can do this. Apart from the ways listed in other answers, one possible solution could be:</p>
<pre><code>for i in range(0, len(list_of_list)):
    item = list_of_list[i]
    for j in range(0,len(item)):
        new_list = new_list + [item]
</code></pre>
<p>Note: This solution is typically labelled as <em>C - like</em> as it doesn't make use of any Python methods.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; main_list = [[1,2,3],[4,5,6,7],[8,9]]
&gt;&gt;&gt; [item for sublist in main_list for item in sublist]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>This uses a <strong>nested list comprehension</strong> approach. A good explanation of how to read them can be found <a href="http://rhodesmill.org/brandon/2009/nested-comprehensions/" rel="nofollow">here</a>.</p>
<p>Think how you'd do it with regular loops. One outer loop will extract a list and an inner loop will append every element of the list to the result. </p>
<pre><code>&gt;&gt;&gt; newlist = []
&gt;&gt;&gt; for sublist in main_list:
        for item in sublist:
            newlist.append(item)

&gt;&gt;&gt; newlist
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Similarly, in the nested list comprehension above - the <code>for sublist in main_list</code> extracts a sublist, the <code>for item in sublist</code> loops over each item and the <code>item</code> at the beginning of the comprehension does an automatic <code>list.append(item)</code> to the final result. The biggest difference from regular loops is that what you want to get automatically appended to the final result is placed at the beginning. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"> <code>sum()</code> </a>,</p>
<pre><code>&gt;&gt;&gt; tp = ( ('2', '23', '29', '26'), ('36', '0'), ('4', '2') )
&gt;&gt;&gt; newtp = sum(tp, () )
&gt;&gt;&gt; newtp
('2', '23', '29', '26', '36', '0', '4', '2')
</code></pre>
<p>or <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"> <code>itertools</code> </a>,</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; tp = ( ('2', '23', '29', '26'), ('36', '0'), ('4', '2') )
&gt;&gt;&gt; newtp = tuple( chain(*tp) )
&gt;&gt;&gt; newtp
('2', '23', '29', '26', '36', '0', '4', '2')
</code></pre>
<p>or comprehension,</p>
<pre><code>&gt;&gt;&gt; tp = ( ('2', '23', '29', '26'), ('36', '0'), ('4', '2') )
&gt;&gt;&gt; newtp = tuple(i for subtp in tp for i in subtp)
&gt;&gt;&gt; newtp
('2', '23', '29', '26', '36', '0', '4', '2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One simple way is using <code>reduce</code> inbuilt method.</p>
<pre><code>&gt;&gt;&gt; list_vals = (('2', '23', '29', '26'), ('36', '0'))
&gt;&gt;&gt; reduce(lambda x, y: x + y, list_vals)
('2', '23', '29', '26', '36', '0')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this case, all the entries of the list are integers and so it would be easy to use <code>regular expressions</code>. The extra advantage of using regular expressions here is that it will work on any arbitrary nested list vs. chain that does not work when the list is <code>more than 1 degree nested</code>.</p>
<pre><code>import re
alist = [[1], [2],[3]]
results = [int(i) for i in re.findall('\d+', (str(alist)))]
print(results)
</code></pre>
<p>The output is;</p>
<pre><code>&gt;&gt;&gt; [1,2,4]
</code></pre>
<p>So if we are given an <code>ugly</code> arbitrarily nested list like:</p>
<pre><code>a_list = [[1], [2], [3], [1,2,3[2,4,4], [0]], [8,3]]
</code></pre>
<p>we can do;</p>
<pre><code>a_list = [[1], [2], [3], [1,2,3, [2,4,4], [0]], [8,3]]
results = [int(i) for i in re.findall('\d+', (str(a_list)))]
print(results)
</code></pre>
<p>and the output is;</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3, 1, 2, 3, 2, 4, 4, 0, 8, 3]
</code></pre>
<p>Which is arguably more helpful.</p>
</div>
<span class="comment-copy">Those are not lists, they are tuples.</span>
<span class="comment-copy">Search for "flat map" - it will yield results like <a href="http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python" title="making a flat list out of list of lists in python">stackoverflow.com/questions/952914/â€¦</a> (noting that real lists are used here)</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11574195/how-to-merge-multiple-lists-into-one-list-in-python">How to merge multiple lists into one list in python?</a></span>
<span class="comment-copy">Yes. Done. Thank you very much</span>
