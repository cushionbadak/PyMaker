<div class="post-text" itemprop="text">
<p>I must find a way to get the <code>item</code> position when iterating over a list using a <code>for</code> structure</p>
<pre><code>other_list = ["line1", "line2", "line3", ... , "line125k+"]
#contains 125k+ items from a txtFile.readlines()

list = ["item1", "item2", "item3"]
#contains 35 items

dict = {"key1":["value1"], "key2":["value2"], "key3":["value3"]}
#contains 35 items too
</code></pre>
<p>For each <code>value</code> inside my <code>dict</code>, i got a <code>key</code> that have a correspondent <code>item</code> in the <code>list</code>.</p>
<pre><code>list = ["10", "20", "30"]`
dict = {"19":["value1"], "29":["value2"], "39":["value3"]}
</code></pre>
<p>the dict's first key, "19", corresponds to the "10" inside the other list..</p>
<pre><code>Example:
dict[0] corresponds to list[0]
dict[1] corresponds to list[1]
... and so on.
</code></pre>
<p>So <strong>i have to get the item position while using a for structure</strong>, so then i can access the correspondent key in the dict, and use the dict's value in a <code>replace()</code></p>
<pre><code>#replace tax1 value
for item in list:
    pos_item = item.getPosition() # pos_item = getIteratorValue()
    #how can i assign the dict value to a variable?
    dict_value = dict[pos_item][value]
    #use one variable to search and the other as a replacement
    other_list[pos_item].replace("0,00", dict_value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are <em>three</em> issues here, not one. In Python (and most other languages), dictionaries aren't sorted, and <code>replace</code> returns a new string. They <em>have no order</em>. In order to get around this, you can use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>OrderedDict</code></a> and do something like:</p>
<pre><code># The dictionary.
dct = OrderedDict([('key1', 'value1'), ('key2', 'value2')]
for pos_item, (item, dict_values) in enumerate(zip(lst, dct.values())):
   dict_value = dict_values[value]
   other_list[pos_item] = other_list[pos_item].replace('0,00', dict_value)
</code></pre>
<p>Look into <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a>.</p>
<p>Also notice that I renamed <code>dict</code> to <code>dct</code> and <code>list</code> to <code>lst</code>, as <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow"><code>dict</code> and <code>list</code> builtin functions</a>. In addition, there may be a bug in your code, as you are never actually using <code>item</code>; I'm not sure what it's purpose in your code was.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should be helpfull:</p>
<pre><code>list = ["item1", "item2", "item3"]

for i in xrange(len(list)): # len(list) returns length of the list
    print(list[i])
</code></pre>
</div>
<span class="comment-copy">I think it's not possible to get the index in a foreach loop because of the iterator model. The only thing you could do is set a variable to 0 before the loop and increment it every single run...</span>
<span class="comment-copy">dicts have no order so your logic if flawed</span>
<span class="comment-copy">Since dictionaries are not ordered you can not compare its item's position with a list elements!</span>
<span class="comment-copy">Based on what you want to do you have 2 choice, at first use a <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderdDict</code></a> instead of a <code>dict</code> or sort your dict items and work with the sorted result which is not a dictionary anymore and is a list!</span>
<span class="comment-copy">You could use <code>enumerate()</code>, to find out the current position in the iteration . Obviously, using index won't allow to get dict's items</span>
<span class="comment-copy"><code>xrange</code> is Python 2-only.</span>
<span class="comment-copy">There is a <code>python-2.7</code> tag in this question ;-)</span>
<span class="comment-copy">Ah, right. :/ Sorry.</span>
