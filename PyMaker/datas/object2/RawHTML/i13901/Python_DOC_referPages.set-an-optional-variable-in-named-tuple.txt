<div class="post-text" itemprop="text">
<pre><code>from collections import namedtuple

FooT = namedtuple('Foo', 'foo bar')
def Foo(foo=None, bar=None):
  return FooT(foo,bar)

foo = Foo()
foo.foo = 29
throws attribute error
</code></pre>
<p>So, my use case is a datastructure which have optional fields.. but should be able to modify it if desired..</p>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict"><code>defaultdict</code></a> should be appropriate for what you want.  It works by providing it a function on construction which it calls every time an unset element is accessed.  Here's a demo:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(lambda:None)
&gt;&gt;&gt; d['foo'] = 10
&gt;&gt;&gt; d['bar'] = 5
&gt;&gt;&gt; print d['baz']
None
&gt;&gt;&gt; d['baz'] = 15
&gt;&gt;&gt; print d['baz']
15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Tuples are, by definition, immutable. Namedtuples follow this pattern as well.</p>
<p>In python3 it appears there is a SimpleNamespace [1] that you can use. If you want to simply use a read/write datastructure though you could create a class and put constraints on its members.</p>
<p>[1] - <a href="https://stackoverflow.com/questions/5227839/why-python-does-not-support-record-type-i-e-mutable-namedtuple">Why Python does not support record type i.e. mutable namedtuple</a></p>
</div>
<div class="post-text" itemprop="text">
<p>A namedtuple, like a tuple is not modifiable. Since the question is about namedtuple, in some case you may find ok (or sometimes even preferable) to create a new object with the <a href="https://docs.python.org/2/library/collections.html#collections.somenamedtuple._replace" rel="nofollow"><code>_replace</code></a> method. Of course the other references to the same object will be unchanged.</p>
<pre><code>from collections import namedtuple

FooT = namedtuple('Foo', 'foo bar')
def Foo(foo=None, bar=None):
  return FooT(foo,bar)

foo = Foo()
foo = foo._replace(foo=29)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a slight variation on the above answers, why not extend the advice in the <a href="https://docs.python.org/3.5/tutorial/classes.html#odds-and-ends" rel="nofollow">tutorial</a> and have a class that returns None for any undefined attribute?  For example:</p>
<pre><code>class Foo(object):
    def __getattr__(self, name):
        return None
</code></pre>
<p>This is much the same as a defaultdict, but accessible via direct attributes much like a named tuple.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not just use a class?</p>
<pre><code>class Foo(object):

   def __init__(foo=None, bar=None):
     self.foo = foo
     self.bar = bar

foo = Foo()
foo.foo = 29
</code></pre>
</div>
<span class="comment-copy">It's because tuples are immutable, you can't modify them once you created them.</span>
<span class="comment-copy">As enrico pointed out below, immutable does not mean you never need to change data: <code>_replace()</code> can be used to update values and return a new immutable structure.  Check out <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>typing.NamedTuple</code></a> as of 3.6.1 it supports default values.</span>
