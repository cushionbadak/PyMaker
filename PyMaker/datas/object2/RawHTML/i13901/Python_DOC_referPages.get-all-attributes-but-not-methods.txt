<div class="post-text" itemprop="text">
<p>I'm trying to create a function which prints all attributes of my class. It seems to work good but there is a one problem - it prints methods too which I don't want to. </p>
<pre><code> def print_all(self):
            attributes = [attr for attr in dir(self) 
              if not attr.startswith('__')]
            for attr in attributes:
                if getattr(self, attr) == None:
                    continue
                value = str(getattr(self,attr)) 
                print attr + ':' + value
</code></pre>
<p>Could you advise me how to avoid printing methods?</p>
</div>
<div class="post-text" itemprop="text">
<p>you can also use the keys from the class descriptor <code>__dict__</code> e.g.</p>
<pre><code>for key in self.__dict__:
    print(key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def print_all_attrs(some_object):
    for var in dir(some_object):
        if not callable(var):
            print "{} is an attribute".format(var)
</code></pre>
<p><code>callable</code> returns True/False for whether or not you can call the variable like a function. This should even work if the attributes are properties, unless you're doing weirdness like</p>
<pre><code>   class BadObj(object):
        @property
        def x(self):
            return lambda: 3 + 2
</code></pre>
<p>...but you probably weren't doing that anyway.</p>
</div>
<span class="comment-copy">So you only want un<a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable</code></a> attributes? Also, you should test for <code>None</code> by <i>identity</i>, not <i>equality</i> - <code>if foo is None:</code>.</span>
<span class="comment-copy"><code>self.__dict__</code>?</span>
<span class="comment-copy">@jonrsharpe Why should I test it by identity? thanks</span>
<span class="comment-copy">@Milan because <code>None</code> is a singleton.</span>
<span class="comment-copy">@jonrsharpe Could you little elaborate it please? I dont get it because its work.</span>
