<div class="post-text" itemprop="text">
<p>Caveat emptor: I can spell p-y-t-h-o-n and that's pretty much all there is to my knowledge. I tried to take some online classes but after about 20 lectures learning not much, I gave up long time ago. So, what I am going to ask is very simple but I need help:</p>
<p>I have a file with the following structure:</p>
<pre><code>object_name_here:
  object_owner:
    - me@my.email.com
    - user@another.email.com
  object_id: some_string_here
  identification: some_other_string_here
</code></pre>
<p>And this block repeats itself hundreds of times in the same file.
Other than object_name_here being unique and required, all other lines may or may not be present, email addresses can be from none to 10+ different email addresses.</p>
<p>what I want to do is to export this information into a flat file, likes of /etc/passwd, with a twist</p>
<p>for instance, I want the block above to yield a line like this:</p>
<pre><code>object_name_here:object_owner=me@my_email.com,user@another.email.com:objectid=some_string_here:identification=some_other_string_here
</code></pre>
<p>again, the number of fields or length of the content fields are not fixed by any means. I am sure this is pretty easy task to accomplish with python but how, I don't know. I don't even know where to start from.</p>
<p>Final Edit: Okay, I am able to write a shell script (bash, ksh etc.) to parse the information, but, when I asked this question originally, I was under the impression that, python had a simpler way of handling uniform or semi-uniform data structures as this one. My understanding was proven to be not very accurate. Sorry for wasting your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>As jaypb points out, regular expressions are a good idea here. If you're interested in some python 101, I'll give you some simple code to get you started on your own solution.</p>
<p>The following code is a quick and dirty way to lump every six lines of a file into one line of a new file: </p>
<pre><code># open some files to read and write
oldfile = open("oldfilename","r")
newfile = open("newfilename","w")

# initiate variables and iterate over the input file
count = 0
outputLine = ""
for line in oldfile:
    # we're going to append lines in the file to the variable outputLine
    # file.readline() will return one line of a file as a string
    # str.strip() will remove whitespace at the beginning and end of a string
    outputLine = outputLine + oldfile.readline().strip()
    # you know your interesting stuff is six lines long, so
    # reset the output string and write it to file every six lines
    if count%6 == 0:
        newfile.write(outputLine + "\n")
        outputLine = ""
    # increment the counter
    count = count + 1

# clean up
oldfile.close()
newfile.close()
</code></pre>
<p>This isn't exactly what you want to do but it gets you close. For instance, if you want to get rid of " - " from the beginning of the email addresses and replace it with "=", instead of just appending to <code>outputLine</code> you'd do something like </p>
<pre><code>if some condition:
    outputLine = outputLine + '=' + oldfile.readline()[3:]
</code></pre>
<p>that last bit is a python slice, <code>[3:]</code> means "give me everything after the third element," and it works for things like strings or lists.</p>
<p>That'll get you started. Use google and the python docs (for instance, googling "python strip" takes you to the <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow">built-in types page for python 2.7.10</a>) to understand every line above, then change things around to get what you need. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are replacing text substrings with different text substrings, this is a pretty natural place to use regular expressions.</p>
<p>Python, fortunately, has an excellent regular expressions library called <code>re</code>.</p>
<p>You will probably want to heavily utilize</p>
<pre><code>re.sub(pattern, repl, string)
</code></pre>
<p>Look at the documentation here:</p>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow">https://docs.python.org/3/library/re.html</a></p>
<p>Update: Here's an example of how to use the regular expression library:</p>
<pre><code>#!/usr/bin/env python

import re

body = None
with open("sample.txt") as f:
    body = f.read()

# Replace emails followed by other emails
body = re.sub(" * - ([a-zA-Z.@]*)\n * -", r"\1,", body)

# Replace declarations of object properties
body = re.sub(" +([a-zA-Z_]*): *[\n]*", r"\1=", body)

# Strip newlines
body = re.sub(":?\n", ":", body)

print (body)
</code></pre>
<p>Example output:</p>
<pre><code>$ python example.py
object_name_here:object_owner=me@my.email.com, user@another.email.com:object_id=some_string_here:identification=some_other_string_here
</code></pre>
</div>
<span class="comment-copy">First question: Why do you want to use python specifically?</span>
<span class="comment-copy">This file was created to be used with ansible. And since ansible runs python, I thought that would be the natural choice. Second but not too distant from my first reasoning, if someone can explain how the variable/object assignments work in python, maybe it helps me understand the language, but my main concern right now is parsing the file, more than anything else</span>
<span class="comment-copy">also, the file is used in Linux platform. And I want to parse it with tool available here, not on Windows or AS/400 or OpenVMS etc. Some sort of UNIX derivative tool is desired.</span>
<span class="comment-copy">This is basically a regex operation. I'd probably use <code>sed</code></span>
<span class="comment-copy">SO is not a coding or tutorial service, but I recommend starting out by figuring out how to parse this manually. For example: "I'll open the file, then go through it line by line. If a line doesn't start with a space, it's the name of a new object, so I'll create a new object. If a line has an <code>@</code> in it, it's an email. so I'll add it to the current object's owner," and so on. Once you have a reasonable algorithm written out in pseudocode, try to implement it in Python. I don't know what tutorials you've been using, but the <a href="https://docs.python.org/3.4/tutorial" rel="nofollow noreferrer">official one</a> is great.</span>
<span class="comment-copy">Note that regular expressions work pretty much the same whether you use C#, python, sed, or any other tool.</span>
