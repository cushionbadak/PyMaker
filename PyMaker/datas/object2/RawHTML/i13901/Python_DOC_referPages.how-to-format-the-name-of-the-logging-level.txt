<div class="post-text" itemprop="text">
<p>When I start IPython, I see logs like this:</p>
<pre><code>[I 17:03:59.993 NotebookApp] Using MathJax from CDN:       https://cdn.mathjax.org/mathjax/latest/MathJax.js
[W 17:04:00.292 NotebookApp] Terminals not available (error was No    module named terminado)
[I 17:04:00.293 NotebookApp] Serving notebooks from local directory: /home/oleg
[I 17:04:00.293 NotebookApp] 0 active kernels 
[I 17:04:00.293 NotebookApp] The IPython Notebook is running at: http://localhost:8888/
[I 17:04:00.293 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
</code></pre>
<p>Here the levels of messages are slightly formatted, that is, you see <code>I</code> instead of <code>INFO</code>, <code>W</code> instead of <code>WARNING</code> etc. In addition, the brackets are colored. I find this cool and would like to write my logs that way too. However, IPython uses tornado logging system.</p>
<p>I use the <a href="https://pypi.python.org/pypi/colorlog" rel="nofollow noreferrer">colorlog module</a> to color the messages. In order to do the formatting, I subclassed the <code>StreamHandler</code> class, as described here:
 <a href="https://stackoverflow.com/questions/3061924/how-to-get-the-level-of-the-logging-record-in-a-custom-logging-handler-in-python">How to get the level of the logging record in a custom logging.Handler in Python?</a> </p>
<pre><code>class FormatLevelHandler(logging.StreamHandler):
    def emit(self, record):
        record.levelname = record.levelname[0]
        logging.StreamHandler.emit(self, record)
</code></pre>
<p>But when I do this, coloring does not work anymore.</p>
<p>Is there a way to have both logging level name formatting and coloring?
Here is my full code:</p>
<pre><code>import logging
from colorlog import ColoredFormatter
formatter = ColoredFormatter(
    "%(log_color)s[%(levelname)1s %(asctime)s] %(reset)s %(blue)s%(message)s",
    datefmt=None,
    reset=True,
    log_colors={
        'DEBUG':    'cyan',
        'INFO':     'green',
        'WARNING':  'yellow',
        'ERROR':    'red',
        'CRITICAL': 'red,bg_white',
    },
    secondary_log_colors={},
    style='%'
)
logger = logging.getLogger(__name__)

class FormatLevelHandler(logging.StreamHandler):
    def emit(self, record):
        record.levelname = record.levelname[0]
        logging.StreamHandler.emit(self, record)

ch = FormatLevelHandler()
ch.setFormatter(formatter)
logger.addHandler(ch)
logger.setLevel(logging.DEBUG)
logger.info('Hello')
logger.debug('Hi')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do not change the level in <code>handler.emit()</code>. Instead, truncate the level in the format string itself using <code>%(levelname)1.1s</code> (not <code>%(levelname)1s</code> as in your example). </p>
<p>Or you can use the Tornado logging system whether you use the rest of Tornado or not: just call <code>tornado.log.enable_pretty_logging()</code> at the start of your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. While the problem seems quite complex at first, the cause simple: <code>colorlog</code> uses the dictionary you provide to match the levelname <em>after</em> <code>Handler.emit</code>.</p>
<p>Thus, you need to change your dictionary to</p>
<pre><code>log_colors={
        'D': 'cyan',
        'I': 'green',
        'W': 'yellow',
        'E': 'red',
        'C': 'red,bg_white',
    },
</code></pre>
</div>
<span class="comment-copy">Oh, thanks, both solutions (yours and goncalopp's) worked. The problem was that it was difficult to find out about the formatting specifications for <code>%s </code>(while everybody knows them for <code>%d</code>). Could you please show their descriptions in Python documentation?</span>
<span class="comment-copy">They're documented in <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">the same place</a>. For <code>%s</code>, see footnote 5 at the end of the section.</span>
