<div class="post-text" itemprop="text">
<p>I have a script that uses FFMPEG and CMD to cut video files based off of an excel document row by row. I would like python to add a timestamp after it is done with a row. Can you guys please help?</p>
<pre><code>import subprocess as sp, pandas as pd

ffmpeg = 'C:/FFMPEG/bin/ffmpeg.exe' # on Windows
datafile = r'C:\Users\A_Do\Dropbox\1. Projects\2. Python\TM Creator\tm_creator_test1.xlsx'

xl = pd.ExcelFile(datafile,index = False)
df = xl.parse('Sheet1')

def create_tm():
    row_iterator = df.iterrows()
     # take first item from row_iterator
    for i, row in row_iterator:
        infile = row['filename']
        outputfile = row['outputfilename']
        timein = row['timein']
        duration = row['duration']
        decision = row['Create TM?']
        if decision == "Y":
            sp.call(ffmpeg + " -y -i " + infile + " -map 0:0 -map 0:1 -map 0:2 -acodec copy -ss " + str(timein) + " -codec copy -t " + str(duration) + " " + outputfile,shell=True) #this works

        elif decision != decision: #this gets rid of the NaN
            break
        else:
            print "You said you didn't want to make a TM for " + str(infile)

create_tm()
</code></pre>
<p>Thanks!</p>
<p>My final code:</p>
<pre><code>import subprocess as sp, pandas as pd
# (1) new import
from openpyxl import load_workbook
# (2) new import
from datetime import datetime

ffmpeg = 'D:/FFMPEG/bin/ffmpeg.exe' # on Windows
datafile = r'D:\Dropbox\1. Projects\2. Python\TM Creator\tm_creator_test1.xlsx'

# (3) open the file in openpyxl first:
book = load_workbook(datafile)

xl = pd.ExcelFile(datafile,index = False)
df = xl.parse('Sheet1')

def create_tm():
    row_iterator = df.iterrows()
     # take first item from row_iterator
    for i, row in row_iterator:
        infile = row['filename']
        outputfile = row['outputfilename']
        timein = row['timein']
        duration = row['duration']
        decision = row['Create TM?']
        if decision == "Y":
            sp.call(ffmpeg + " -y -i " + infile + " -map 0:0 -map 0:1 -acodec copy -ss " + str(timein) + " -codec copy -t " + str(duration) + " " + outputfile,shell=True) #this works
            # (4) Wherever in the code you want to put the timestamp:
            df.loc[i, 'Timestamp'] = str(datetime.now())
            # (5) This saves the sheet back into the original file, without removing
            # any of the old sheets.
            writer = pd.ExcelWriter(datafile)
            writer.book = book
            writer.sheets = dict((ws.title, ws) for ws in book.worksheets)
            df.to_excel(writer, index=False)
            writer.save()
        elif decision != decision: #this gets rid of the NaN
            break
        else:
            print "You said you didn't want to make a TM for " + str(infile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Applying the answer from <a href="https://stackoverflow.com/questions/20219254/how-to-write-to-an-existing-excel-file-without-overwriting-data">this</a> SO question, here is an updated version of your code, with comments where I made changes:</p>
<pre><code>import subprocess as sp, pandas as pd
# (1) new import
from openpyxl import load_workbook
# (2) new import
from datetime import datetime

ffmpeg = 'C:/FFMPEG/bin/ffmpeg.exe' # on Windows
datafile = r'C:\Users\A_Do\Dropbox\1. Projects\2. Python\TM Creator\tm_creator_test1.xlsx'

# (3) open the file in openpyxl first:
book = load_workbook(datafile)

xl = pd.ExcelFile(datafile,index = False)
df = xl.parse('Sheet1')

def create_tm():
    row_iterator = df.iterrows()
     # take first item from row_iterator
    for i, row in row_iterator:
        infile = row['filename']
        outputfile = row['outputfilename']
        timein = row['timein']
        duration = row['duration']
        decision = row['Create TM?']
        if decision == "Y":
            sp.call(ffmpeg + " -y -i " + infile + " -map 0:0 -map 0:1 -map 0:2 -acodec copy -ss " + str(timein) + " -codec copy -t " + str(duration) + " " + outputfile,shell=True) #this works

        elif decision != decision: #this gets rid of the NaN
            break
        else:
            print "You said you didn't want to make a TM for " + str(infile)

        # (4) Wherever in the code you want to put the timestamp:
        df.loc[i, 'Timestamp'] = str(datetime.now())

    # (5) This saves the sheet back into the original file, without removing
    # any of the old sheets.
    writer = pd.ExcelWriter(datafile)
    writer.book = book
    writer.sheets = dict((ws.title, ws) for ws in book.worksheets)
    df.to_excel(writer)
    writer.save()

create_tm()
</code></pre>
<p>If you'd like more control over the format of your timestamp, consult the docs for <a href="https://docs.python.org/3/library/datetime.html#datetime.date.strftime" rel="nofollow"><code>datetime.datetime.strftime()</code></a>.  Also, I wrote this assuming that your Excel file had other sheets that you would be upset if you lost.  If that is not the case, you don't have to do nearly as much.  You can ignore changes numbered 1 and 3, and replace 5 with <code>df.to_excel(datafile)</code>.</p>
</div>
<span class="comment-copy">Thank you for the reply! You were correct that I had other sheets. I am getting a   TypeError: copy() got an unexpected keyword argument 'font' [Finished in 0.4s with exit code 1]   Can you help me get rid of it?</span>
<span class="comment-copy">I had the same error when testing the code.  There seems to be a bug in Pandas with OpenPyXL version 2.2.  If you install OpenPyXL version 2.1 instead, it works fine.  <code>pip install openpyxl==2.1</code> worked for me, hopefully it'll work on Windows too!</span>
<span class="comment-copy">Here's the link to the <a href="https://github.com/pydata/pandas/issues/10125" rel="nofollow noreferrer">GitHub Issue for Pandas about it</a></span>
<span class="comment-copy">Apparently, openpyxl hasn't had a very steady API since they released 2.0, so Pandas can't really keep up with it.  So maybe you'll want to go back to 2.0 (but I had no problems with 2.1).</span>
<span class="comment-copy">Thanks! This solved the issue! I am a complete newb! where would you put your line to write the code? I try to put it on line 29 but it causes the sheets to get messed up because it adds another index column.</span>
