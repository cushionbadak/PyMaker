<div class="post-text" itemprop="text">
<p>"Trying to unit test my code using <em>unittest.mock</em> python library".
 I have code which is running database queries very similar to this:</p>
<p>app.py: </p>
<pre><code>from flask import g
import mysql.connector
@app.route('/')
def create_table():
    g.db=mysql.connector.connect("credentials")
    cursor = g.db.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS test(id INT NOT NULL  PRIMARY KEY, name VARCHAR(40),email VARCHAR(40) NOT NULL)')
    cursor.close()
      g.db.close()
</code></pre>
<p>I have mocked my g.db using the below method, but from here I am struggling with how to mock <code>cursor.execute()</code> and <code>cursor.close()</code>. Any help would be appreciated.</p>
<pre><code> def testtable():
   with patch('app.mysql.connector') as mock_mysql_connector:
    create_table()
    print g.db
   #mock execute and close#
</code></pre>
<p>On printing  <code>g.db</code> I'm getting <em>Mock</em> name and id, which I believe that means g.db is mocked, but I have no clue how I should mock <code>execute()</code> and <code>close()</code>.</p>
<p>Do I have to do monkey patching?<br/>
If yes, please provide a hint how to monkey patch them?<br/>
If no, then what is another way to mock them? </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/dev/library/unittest.mock.html#patch-multiple" rel="nofollow">patch.multiple</a>:</p>
<pre><code>from mock import patch, DEFAULT

with patch.multiple('app', mysql=DEFAULT, g=DEFAULT) as dict:
    # Mocking
    connector = dict[Í„'mysql'].connector
    db = connector.connect.return_value
    cursor = db.cursor.return_value
    # Run function to test
    create_table()
    # Assertions
    assert dict['g'].db == db
    db.close.assert_called_once_with()
    cursor.close.assert_called_once_with()
    connector.connect.assert_called_once_with("credentials")
</code></pre>
</div>
<span class="comment-copy">What do you want to achieve? Is it about test cases (pytest etc.?)</span>
<span class="comment-copy">@ mstuebner  I am doing unit testing using unittest.mock library of python  and for the purpose of testing instead of hitting  database i want to mock my connection ,execute() and close()</span>
<span class="comment-copy">Thanks Vincent,I have some questions that why   'cursor' is set   to   return_value of 'db.cursor' and what 'return values' i need to set as you mentioned</span>
<span class="comment-copy">Consider reading the <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer">mock module quick guide</a>, the <a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class" rel="nofollow noreferrer">mock class documentation</a> and this <a href="http://www.toptal.com/python/an-introduction-to-mocking-in-python" rel="nofollow noreferrer">introduction to mocking in python</a> to understand how to use mocks.</span>
<span class="comment-copy">i read the documentation and understood that why you are using  cursor = db.cursor.return_value but i am still confuse at where you have mentioned #set return_value.Can you please explain me it little bit?</span>
<span class="comment-copy">Well you could set <code>cursor.execute.side_effect</code> if you want something to happen when <code>cursor.execute</code> is called for instance. But considering the code you want to test, I don't think it is necessary to set any return values, since you're not using the result of <code>cursor.execute</code>.</span>
<span class="comment-copy">i think i got what you are saying.Lets say i have a query cursor.execute'(select 'name' from table)                                                    name=cursor.fetchone()[0]                                                                        return name.                                                                                           so in this case i need to return_value right?like this cursor.execute.return_value='name'</span>
