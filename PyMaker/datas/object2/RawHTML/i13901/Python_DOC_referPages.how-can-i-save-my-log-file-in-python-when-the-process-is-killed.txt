<div class="post-text" itemprop="text">
<p>I am learning the <code>logging</code> module in Python.</p>
<p>However, if I log like this</p>
<pre><code>logging.basicConfig(filename='mylog.log',format='%(asctime)s - %(levelname)s - %(message)s', level=logging.DEBUG)

while 1:
    logging.debug("something")
    time.sleep(1)
</code></pre>
<p>and interrupt the process with control-C event(or the process is killed), nothing I can got from the log file.</p>
<p>Can I save the most logs whatever happens?</p>
<p>————</p>
<h2>EDIT</h2>
<p>the question seem become more complex:</p>
<p>I have imported scipy, numpy, pyaudio in my script, and I got:</p>
<blockquote>
<p>forrtl: error (200): program aborting due to control-C event</p>
</blockquote>
<p>instead of <code>KeyboardInterrupt</code></p>
<p>I have read this question: <a href="https://stackoverflow.com/questions/15457786/ctrl-c-crashes-python-after-importing-scipy-stats">Ctrl-C crashes Python after importing scipy.stats</a></p>
<p>and add these line to my script:</p>
<pre><code>import _thread
import win32api
def handler(dwCtrlType, hook_sigint=_thread.interrupt_main):
    if dwCtrlType == 0: # CTRL_C_EVENT
        hook_sigint()
        return 1 # don't chain to the next handler
    return 0 # chain to the next handler
</code></pre>
<p>then:</p>
<pre><code>try:
    main()
except KeyboardInterrupt:
    print("exit manually")
    exit()
</code></pre>
<p>Now, the script stops without any info if I use ctrl+C. <code>print("exit manually")</code> does not appear. Of course, no logs.</p>
<h2>Solved</h2>
<p>A stupid mistake!
I run the script when working directory is <code>System32</code> and want to find log in the script's path.</p>
<p>After I change the route like this, all is well.</p>
<pre><code>logging.basicConfig(filename=os.path.dirname(sys.argv[0])+os.sep+'mylog.log',format='%(asctime)s - %(levelname)s - %(message)s', level=logging.DEBUG)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you log using <code>logging.debug</code>, <code>logging.info</code>, ..., <code>logging.critical</code>, you're using the <em>root</em> logger. I assume you're not doing anything to configure logging that you haven't shown, so you're running with the out-of-the-box, default configuration. (This is set up for you by the first call to <code>logging.debug</code>, which calls <code>logging.basicConfig()</code>). </p>
<p>The default logging level of the root logger is <code>logging.WARNING</code> (as mentioned in e.g. <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow">https://docs.python.org/3/howto/logging.html#logging-basic-tutorial</a>). Thus, nothing you log with <code>logging.debug</code> or <code>logging.info</code> will appear :) If you change <code>logging.debug</code> to <code>logging.warning</code> (or <code>.error</code> or <code>.critical</code>), you <em>will</em> see logging output. </p>
<p>For your code to work as is, set the logging level of the root logger to <code>logging.DEBUG</code> before the loop:</p>
<pre><code>import logging
import time

# logging.getLogger() returns the root logger
logging.getLogger().setLevel(logging.DEBUG)

while 1:
    logging.debug("something")
    time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the <kbd>CTRL</kbd> + <kbd>C</kbd> event use a <code>try</code>-<code>except</code> to catch the <code>KeyboardInterrupt</code> exception.</p>
</div>
<span class="comment-copy">Without knowing how you have configured the logger, it's hard to tell whether you should get any output at all? As BrianO indicates, <code>logging.debug</code> is by default not logged. And you mention a log file, but the default logging output is <code>sys.stderr</code>, not a file.</span>
<span class="comment-copy">There is also quite a difference between interrupting a process using control-C and a processing being killed. I don't know about Windows (which you appear to be using), but on e.g. *nix, there is a variety of ways to kill a process (that is, a variety of signals can be send to a process that may stop that process). You'll need to be more clear whether you're only talking about control-C (which can be intercepted using <code>except KeyboardInterrupt</code>) or other interrupts.</span>
<span class="comment-copy">@Evert, I found my stupid mistake. Thx for your help!</span>
<span class="comment-copy">@PaleNeutron You're defining the <code>handler</code> function but what about the previous <code>ctypes</code> calls and all that stuff? Also, why are you using <code>_thread</code> instead of <code>thread</code>? You can't do anything if your process is killed.</span>
