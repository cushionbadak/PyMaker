<div class="post-text" itemprop="text">
<p>I have this Python tool written by someone else to flash a certain microcontroller, but he has written this tool for Python 2.6 and I am using Python 3.3.</p>
<p>So, most of it I got ported, but this line is making problems:</p>
<pre><code>data = map(lambda c: ord(c), file(args[0], 'rb').read()) 
</code></pre>
<p>The <code>file</code> function does not exist in Python 3 and has to be replaced with <code>open</code>. But then, a function which gets <code>data</code> as an argument causes an exception: <em>“TypeError: object of type 'map' has no len()”</em>.</p>
<p>But what I see so far in the documentation is, that <code>map</code> has to join iterable types to one big iterable, am I missing something?</p>
<p>What do I have to do to port this to Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map</code></a> returns an iterator. If your function expects a list, the iterator has to be explicitly converted, like this:</p>
<pre><code>data = list(map(...))
</code></pre>
<p>And we can do it simply, like this</p>
<pre><code>with open(args[0], "rb") as input_file:
    data = list(input_file.read())
</code></pre>
<p><code>rb</code> refers to read in binary mode. So, it actually returns the bytes. So, we just have to convert them to a list.</p>
<p>Quoting from the <a href="http://docs.python.org/3/library/functions.html#open" rel="noreferrer"><code>open</code>'s docs</a>,</p>
<blockquote>
<p>Python distinguishes between binary and text I/O. Files opened in
  binary mode (including 'b' in the mode argument) return contents as
  bytes objects without any decoding.</p>
</blockquote>
</div>
<span class="comment-copy">That's odd, <code>map</code> objects should be iterable. Can you post the full traceback?</span>
<span class="comment-copy">You are right, the actuall error message is: <i>TypeError: object of type 'map' has no len()</i></span>
<span class="comment-copy">FYI, there's no reason to call len on a map object, since the underlying object has the same length.</span>
<span class="comment-copy">THis works better, thanks. But as I am reading a binary file, input_file.read() retruns a byte-array and ord causes an exception, as it expects a string</span>
