<div class="post-text" itemprop="text">
<p>I'm kind of a new to python and i'm trying to run a code for a program, but i'm stuck in this part where i need a Function that always keep returning new data, here's a part of the code that always keep returning a zeros!</p>
<pre><code>import time

def forloop():
  for i in range(0,10000):
    return i

while True:
  time.sleep(0.25)
  print(forloop())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>forloop()</code> and do <code>return i</code> inside it, it returns from the function, and the next time you call <code>forloop()</code> it will start from the beginning. What you want to use are generator functions</p>
<p>You can use <code>generator functions</code> for this (using <code>yield</code> statement) to yield the values instead of <code>return</code> .</p>
<p>Example -</p>
<pre><code>def forloop():
  for i in range(0,10000):
    yield i

x = forloop()
while True:
   try :
       time.sleep(0.25)
       print(next(x))
   except StopIteration:
       x = forloop()
</code></pre>
<p><code>next(x)</code> throws <code>StopIteration</code> exception if the generator has been exhausted, in which case we catch that exception and recreate the generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function returns immediately, and each time you call it you start at <code>0</code> again.</p>
<p>You can do what you want with a regular function; use a global and keep incrementing that:</p>
<pre><code>_counter = -1
def increasing():
    global _counter
    _counter += 1
    return counter
</code></pre>
<p>but a <em>better</em> idea would be to use a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow"><em>generator function</em></a>:</p>
<pre><code>def increasing():
    counter = 0
    while True:
        yield counter
        counter += 1
</code></pre>
<p>and you can use that in a loop:</p>
<pre><code>for count in increasing():
    print(count)
    time.sleep(0.25)
</code></pre>
<p>The standard library already includes such a generator: the <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count()</code> function</a> does just that. Together with the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next()</code> function</a> you can pretty much recreate your <code>while</code> loop:</p>
<pre><code>from itertools import count

counter = count()

while True:
    time.sleep(0.25)
    print(next(counter))
</code></pre>
<p>If you wanted to continually loop over the the values 0 through to 9999, then you'd write a custom generator function that does just that:</p>
<pre><code>def count_to_9999_and_restart():
    while True:
        for i in range(10000):
            yield i
</code></pre>
<p>and you can use <em>that</em> generator:</p>
<pre><code>counter = count_to_9999_and_restart()

while True:
    time.sleep(0.25)
    print(next(counter))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using a global variable to keep track of where the function reached inbetween calls:</p>
<pre>
counter = 0
def forloop():
  global counter
  counter += 1
  return counter
</pre>
</div>
<span class="comment-copy">Did you want to produce the numbers 0 through to 9999 (and then start at 0 again perhaps) or did you want to count on ad infinitum?</span>
<span class="comment-copy">I've added a (better) option to re-start counting from 0 each time too.</span>
<span class="comment-copy">Why not just have the generator restart the count each time?</span>
<span class="comment-copy">There are a million ways to go about this, I just used 1 that came to mind.</span>
<span class="comment-copy">Also, the code posted by the OP looks like a MCVE , just to explain his usecase , his actual scenario maybe much more complex, in which case knowing about <code>StopIteration</code> might be handy.</span>
<span class="comment-copy">Many thanks this works best for me :)</span>
<span class="comment-copy">@PadraicCunningham If you are looking at that then even the generator function is not necessary, <code>function</code> as such is not necessary.</span>
<span class="comment-copy">This would not loop from 0-9999 it would just keep incrementing indefinitely</span>
<span class="comment-copy">I assumed it was because they wanted to start with <i>something</i>. The question asks for something that <i>always keeps returning data</i>.</span>
<span class="comment-copy">Well based on the accepted answer they must want to continually restart, they must also like typing unnecessary lines of code.</span>
<span class="comment-copy">Yes, I'm surprised at the choice of accepted answer. Not that I voted on anything posted here myself so far.</span>
