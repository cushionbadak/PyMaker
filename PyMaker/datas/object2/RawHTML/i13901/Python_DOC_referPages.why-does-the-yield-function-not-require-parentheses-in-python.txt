<div class="post-text" itemprop="text">
<p>In Python, I have many times seen the <code>yield</code> function used to create a generator. Both this and the <code>print</code> function technically both perform the action of methods because they return a value. However, during the change from Python 2 to Python 3, the <code>print</code> function gained parentheses like a normal method call, but yield stayed the same. Also, <code>yield</code> gains a yellowish color of a reserved keyword while <code>print</code> is the purple of a reserved method. Why is <code>yield</code> not considered a method and colored this way along with not using parentheses syntax?</p>
<p>(In a similar vein, why does <code>return</code> also lack parentheses?)</p>
<p>Let me add some more stuff, yield and continue are not given parentheses in many other languages as well. I just wanted to know what makes it different other than it is reserved. There are many other reserved methods out there which get parentheses. </p>
</div>
<div class="post-text" itemprop="text">
<p>So I went digging for an answer. <a href="https://www.python.org/dev/peps/pep-0255/" rel="noreferrer">And it turns out, there is one</a>. From PEP 255, the pep that gave us the <code>yield</code> keyword</p>
<blockquote>
<p>Q. Why a new keyword for "yield"?  Why not a builtin function instead?</p>
<p>A. Control flow is much better expressed via keyword in Python, and
         yield is a control construct.  It's also believed that efficient
         implementation in Jython requires that the compiler be able to
         determine potential suspension points at compile-time, and a new
         keyword makes that easy.  The CPython referrence implementation also
         exploits it heavily, to detect which functions <em>are</em> generator-
         functions (although a new keyword in place of "def" would solve that
         for CPython -- but people asking the "why a new keyword?" question
         don't want any new keyword).</p>
<p>Q: Then why not some other special syntax without a new keyword?  For
         example, one of these instead of "yield 3":</p>
</blockquote>
<pre><code>   return 3 and continue
   return and continue 3
   return generating 3
   continue return 3
   return &gt;&gt; , 3
   from generator return 3
   return &gt;&gt; 3
   return &lt;&lt; 3
   &gt;&gt; 3
   &lt;&lt; 3
   * 3
</code></pre>
<blockquote>
<p>A: Did I miss one ?  Out of hundreds of messages, I counted three
         suggesting such an alternative, and extracted the above from them.
         It would be nice not to need a new keyword, but nicer to make yield
         very clear -- I don't want to have to <em>deduce</em> that a yield is
         occurring from making sense of a previously senseless sequence of
         keywords or operators.  Still, if this attracts enough interest,
         proponents should settle on a single consensus suggestion, and Guido
         will Pronounce on it.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> wasn't a function that gained parentheses: it went from being a statement to being a function. <code>yield</code> is still a statement, like <code>return</code>. Syntax highlighting is specific to your development environment.</p>
<p>You can find more information about <a href="https://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python">the difference between expressions and statements here</a>, and more about <a href="https://stackoverflow.com/questions/9307291/difference-between-statement-and-function">the difference between functions and statements here</a>. Also see the documentation on <a href="https://docs.python.org/3.4/reference/simple_stmts.html" rel="nofollow noreferrer">simple statements</a> and <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">compound statements</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>yield</code> is not a function, its an keyword, and it does not require parenthesis according to <a href="https://docs.python.org/2/reference/expressions.html#grammar-token-yield_atom" rel="nofollow">its grammar</a> -</p>
<blockquote>
<p>yield_atom       ::=  "(" yield_expression ")" </p>
<p>yield_expression ::= "yield" [expression_list]</p>
</blockquote>
<p><code>print</code> used to be a statement in Python 2 , but it was changed to being a built-in function in Python 3 using <a href="https://www.python.org/dev/peps/pep-3105/" rel="nofollow">PEP 3105</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> was a <em>keyword</em> defined by the <em>language specification</em> in Python 2, and became a <em>builtin</em> function (defined by the standard library specification) Python 3. <code>yield</code> was, and still is, a <em>keyword</em>.</p>
</div>
<span class="comment-copy">Its not a function</span>
<span class="comment-copy"><i>points at the lack of parens for <code>return</code></i></span>
<span class="comment-copy">Because that's the way the language is specified. You may just as well ask why the keywords are in English rather than Esperanto :-) I'm having difficulty figuring out how an answer will actually be useful to anyone other than as a curiosity.</span>
<span class="comment-copy">Your answer is in <a href="https://www.python.org/dev/peps/pep-0255/" rel="nofollow noreferrer">PEP 255</a>. In the future, if you want to know why something is some way in python, check out the relevant <a href="https://www.python.org/dev/peps/" rel="nofollow noreferrer">PEP</a>.</span>
<span class="comment-copy">Seriously, you differentiate between keywords and functions by their colours?</span>
<span class="comment-copy">Thank you very much for this answer. I just thought that since everything has been logical in programming so far, there has got to be a logic to this one.</span>
<span class="comment-copy">@ytpillai Then thank goodness you are starting with Python and not PHP (or ksh) - else you might lose some hair!</span>
<span class="comment-copy"><a href="http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/" rel="nofollow noreferrer"><i>cough</i></a></span>
<span class="comment-copy">I've heard PHP described as being like a toolbox where everything is just a little... <a href="https://c4.staticflickr.com/8/7226/7095238893_5000f6e57d_b.jpg" rel="nofollow noreferrer">off</a>.</span>
<span class="comment-copy"><code>yield</code> would make no sense to me as a function.  It doesn't behave like a function in any way. It's almost the exact opposite of a function, if you consider the call stack.</span>
<span class="comment-copy">Why are these considered statements?</span>
<span class="comment-copy">Why not the others, and just these?</span>
<span class="comment-copy">Thank you for this answer</span>
<span class="comment-copy">Did people just decide for <code>yield</code> to not get parentheses or is there some sort of logic or origin behind this concept?</span>
<span class="comment-copy">No there is a sort of origin behind <code>print</code> becoming a function, yield as such is not an application level functionality , but <code>print</code> is , most other languages as well have <code>print</code> as a function , so having <code>print</code> as a statement would require interpreter to specially treat it and they did not want to do that.</span>
<span class="comment-copy">Only function calls require parentheses. Please,go look at the python docs.</span>
<span class="comment-copy">Even if it is builtin, there are many other builtin functions like <code>hash()</code> and <code>set()</code> and the universal <code>int()</code>Why do those get parentheses?</span>
<span class="comment-copy">They are <b>functions</b>.</span>
<span class="comment-copy">How does something become a keyword and another thing a function?</span>
<span class="comment-copy">I mean, they both act like a method that takes in data, processes, and gives back a value</span>
<span class="comment-copy">The <code>yield</code> statement does NOT take in data, does NOT process data, and does NOT return a value. You have completely mischaracterized what <code>yield</code> does. What it actually does is, trigger a control flow that causes the function that contains it to return a value (in a specific way that's distinct from non-generator functions). Why are you so mystified that <code>yield</code> isn't a function? It manifestly behaves in a manner entirely unlike a function.</span>
