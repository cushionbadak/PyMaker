<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4693120/use-of-global-keyword-in-python">Use of “global” keyword in Python</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I thought global variables inside a Python function had to be declared <em>global</em>. So why does the following compile and run without error? </p>
<pre><code>#!/usr/bin/env python
text = "why is this seen?"
class Foo:
    def doit(self):
        print(text)
x = Foo()
x.doit()
</code></pre>
<p>I'd appreciate a citation to the Python3 manual if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>You asked for a reference to the Python 3 manual. I've bolded the section that says you don't need to use the <code>global</code> keyword to reference free variables.</p>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html?highlight=global#grammar-token-global_stmt" rel="nofollow">https://docs.python.org/3/reference/simple_stmts.html?highlight=global#grammar-token-global_stmt</a></p>
<blockquote>
<p>7.12. The global statement </p>
<p>global_stmt ::=  "global" identifier ("," identifier)*</p>
<p>The global statement is a declaration which holds for the
  entire current code block. It means that the listed identifiers are to
  be interpreted as globals. It would be impossible to assign to a
  global variable without global, although <strong>free variables may refer to
  globals without being declared global</strong>.</p>
</blockquote>
<p>Note that in most code all of the classes and functions that you reference are globals (or builtins) but you didn't think twice about not needing <code>global print</code> before calling it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its all about <a href="https://docs.python.org/3.3/reference/executionmodel.html#execution-model" rel="nofollow">scope</a>, since <code>text</code> is declared outside, free from any class or function, it can be reached from anywhere. To get a better idea, consider these two examples:</p>
<pre><code>#!/usr/bin/env python
text = "why is this seen?"
class Foo:
    def doit(self):
        text = "this is changed"
        print(text)

x = Foo()
x.doit()
print text
</code></pre>
<p>In the above example, we overwrite the <code>text</code> variable locally, in the <code>Foo</code>, class, but the global instance of text is the same. But in this instance:</p>
<pre><code>#!/usr/bin/env python
text = "why is this seen?"
class Foo:
    def doit(self):
        global text
        text = "this is changed"
        print(text)

x = Foo()
x.doit()
print text
</code></pre>
<p>We declare that we want the <code>global</code> version of text and then we can modify it.</p>
<p><strong>BUT</strong>: <code>global</code> variables are frowned upon, consider using input arguments to functions and returning new values instead of having variable globally accessible everywhere</p>
<p>The right way to do it:</p>
<pre><code>#!/usr/bin/env python

class Foo:
    text = "why is this seen?"
    def doit(self):
        print(self.text)

x = Foo()
x.doit()
</code></pre>
<p>Have <code>text</code> encapsulated in the class!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to specify a variable using <code>global</code> if you just need to access it. You can do that without a <code>global</code>. </p>
<p><strong>Here,</strong> Python will look in the class <code>Foo</code> scope first for the <code>text</code> variable. Since, it does not find the variable <code>text</code> in the <code>Foo</code> class so it will look into outer scope. Now, it finds the variable <code>text</code>, so it uses that value to print the output.</p>
<p>According to <a href="https://docs.python.org/2/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow">Python docs</a>,  at any time during execution, there are at least three nested scopes whose namespaces are directly accessible: </p>
<blockquote>
<ol>
<li>the innermost scope, which is searched first, contains the local names</li>
<li>the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also
  non-global names</li>
<li>the next-to-last scope contains the current module’s global names</li>
<li>the outermost scope (searched last) is the namespace containing built-in names</li>
</ol>
</blockquote>
</div>
<span class="comment-copy">The global keyword is only <i>needed</i> when you are assigning to the global variable inside the function , but if you are assigning to it once, it becomes local variable (even if its used before assignment) .  If you are not assigning to that, python will treat it as the global variable.</span>
<span class="comment-copy">To add to this, the <code>global</code> keyword only needs to be used to <b>change</b> the global variable outside of the current scope</span>
<span class="comment-copy">@muddyfish thanks for the addition :D</span>
<span class="comment-copy">@muddyfish To add to adding to this, it's considered very unpythonic to use <code>global</code>. Your first attempt should be to use <code>return</code> values, using global only when necessary.</span>
<span class="comment-copy">@SuperBiasedMan Isn't the purpose of stackoverflow to educate people on how to do things first and then if they should do those things secondarily?</span>
<span class="comment-copy">@muddyfish Certainly, that's why I'm not suggesting your answer is wrong. I'm just adding more info.</span>
