<div class="post-text" itemprop="text">
<p>Could anybody please answer this?
I'm trying to learn reg expression (re) module and I'm not able to get my head around this one. I'm trying to come up regex to catch all 3 file name formats</p>
<p>Python 3.4.3</p>
<pre><code>&gt;&gt;&gt; re.findall("file[\_-]1","file-1 file_1, file\1")
['file-1', 'file_1']
&gt;&gt;&gt; 
</code></pre>
<p>Why isn't it catching file\1??
I did try two other patterns, neither one worked :( </p>
<pre><code>1. re.findall("file[\\_-]1","file-1 file_1, file\1")
2. re.findall(r"file[\_-]1","file-1 file_1, file\1")
</code></pre>
<p>Thanks,
Sagar</p>
</div>
<div class="post-text" itemprop="text">
<p>Backslashes have meaning in regular expressions, too; <code>\_</code> just means a literal underscore, <strong>not</strong> either an underscore or a backslash. Instead, you need <code>r'...'</code> (raw Python string) <strong>and</strong> <code>\\</code> (literal backslash in regex). Note that the string you're trying to search in should also be a raw literal <em>or</em> have a doubled backslash:</p>
<pre><code>&gt;&gt;&gt; "file-1 file_1, file\1"
'file-1 file_1, file\x01'  # probably not what you expected...
&gt;&gt;&gt; r"file-1 file_1, file\1"
'file-1 file_1, file\\1'
</code></pre>
<p>Therefore you can use:</p>
<pre><code>&gt;&gt;&gt; re.findall(r"file[\\_-]1", r"file-1 file_1, file\1")
        # note ^       ^       ^
['file-1', 'file_1', 'file\\1']
</code></pre>
</div>
<span class="comment-copy">Backslashes have a special meaning in Python strings and regular expressions... see e.g. <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow noreferrer">docs.python.org/3/howto/regex.html#the-backslash-plague</a></span>
<span class="comment-copy"><code>\1</code> in "file\1" is a control character <code>\u0001;</code>. If you really plan to capture it, use <code>print (re.findall("file[\u0001_-]1?","file-1 file_1, file\1"))</code>, but I doubt you need it.</span>
<span class="comment-copy">I was reading the python doc you referred. It was all good until this line "... However, to express this as a Python string literal, both backslashes must be escaped again."  Also when you use backslash inside character sets [ ] their special meaning should go away right.. So my regex can be safely be:     re.findall("file[\ ]1", "file-1 file_1, file\1") .... Of course this doesn't work. Secondly, if I'm using a raw string for regex then the special of characters is omitted automatically correct? So it would be:     re.findall(r"file[]1", "file-1 file_1, file\1") Why raw string + extra \</span>
<span class="comment-copy">@SagarKarale inside the square brackets <i>only the regex special meaning</i> is removed. You still need to either double the backslash or make it a raw string to remove the <i>string literal special meaning</i>.</span>
<span class="comment-copy">Thank you Jon.. Few more examples made it clear... I had to give "string literals" and "regex expression" a little more thought than before...</span>
