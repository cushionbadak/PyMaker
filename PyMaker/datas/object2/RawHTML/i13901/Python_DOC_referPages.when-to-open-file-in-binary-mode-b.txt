<div class="post-text" itemprop="text">
<p>I noticed in <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">the docs</a> they always open a CSV file with ‘wb’. Why the ‘b’? I know b stands for binary mode, but when do you use binary mode (I’d guess CSV file is not binary). If relevant I’m writing to the CSV from results from query by arcpy.da.SearchCursor()</p>
<p>EDIT: just noticed according to <a href="https://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w">this answer</a> <code>wb+</code> is used for writing a binary file. What does including the <code>+</code> do?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>'b'</code> mode, to read/write binary data as is without any transformations such as converting newlines to/from platform-specific values or decoding/encoding text using a character encoding.</p>
<p><code>csv</code> module is special. csv data is text and therefore the text mode would be expected but <code>csv</code> module uses <code>'\r\n'</code> by default to terminate rows on all platforms and <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.lineterminator" rel="noreferrer">it always recognizes both <code>'\r'</code> and <code>'\n'</code> as newlines</a>. If you open the corresponding file in the text mode (with <a href="https://docs.python.org/2/glossary.html#term-universal-newlines" rel="noreferrer">universal newlines</a>)  then you will get <code>'\r\r\n'</code> (corrupted newlines) on Windows (<code>os.linesep == '\r\n'</code> there). That is why Python 2 docs say that you must use the binary mode. In Python 3, the text mode is used but you should pass <code>newline=''</code> to disable <a href="https://docs.python.org/3/glossary.html#term-universal-newlines" rel="noreferrer">universal newlines</a> mode.
You would also want to disable universal newlines if you want to preserve possible newline characters (such as <code>'\r'</code>) embedded in fields.</p>
</div>
<div class="post-text" itemprop="text">
<p>File open default is to use text mode, which may convert '\n' characters to a platform-specific representation on writing and back on reading. </p>
<p>In windows this will modify the line breaks from '\n' to '\r\n' which will create problem opening the CSV file in other applications/platforms.</p>
<p>Thus, when opening a binary file, you should append 'b' to the mode value to open the file in binary mode, which will improve portability. On systems that don’t have this distinction, adding the 'b' has no effect.</p>
<p>Note: 'w+' truncates the file.</p>
<p>Modes 'r+', 'w+' and 'a+' open the file for updating (reading and writing).</p>
<p>As detailed here: <a href="https://docs.python.org/2/library/functions.html#open" rel="nofollow">https://docs.python.org/2/library/functions.html#open</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Ive never recieved a good explanation on why I shouldnt just open ascii files in binary mode. </p>
<p>I have never seen opening a file in binary mode to corrupt the data.</p>
<p>I have seen opening the file in ascii mode, alter or harm the data being retrieved, ergo I and I assume most seasoned python programers in general will open files in binary mode unless we have some sort of guarantee that there is not and never will be binary characters in the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since opening a file in text mode relegates handling of newlines differently based on the operating system to core code, the CVS routine authors must have determined they wanted more control - that they would prefer to handle newlines themselves. This may have allowed them to resolve bugs from inconsistencies encountered processing files under one OS that were created on another OS -- where "text read" altered things problematically in some unique cases. It also may be no bugs were found but they wanted to avoid future possibility. Or, it may also be that since they had to deal with newline considerations anyway, bypassing text processing might be faster. </p>
<p>Logically, since one can't control the OS source of a file being read, then using binary might be the better way to go in general. However, writing a text file one might do well to leave it up to the core routines to handle newlines for the current OS by using text mode.</p>
<p>The "+" is discussed at <a href="https://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w">Confused by python file mode "w+"</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For the Python <code>csv</code> module in particular, the answer is simple: it's required by the documentation.</p>
<blockquote>
<p>If <code>csvfile</code> is a file object, it must be opened with the ‘b’ flag on platforms where that makes a difference.</p>
</blockquote>
<p>Source: <a href="https://docs.python.org/2.7/library/csv.html#csv.reader" rel="nofollow">https://docs.python.org/2.7/library/csv.html#csv.reader</a></p>
</div>
<div class="post-text" itemprop="text">
<p>By using <code>t</code> on non-Posix environments (like MSDOS and MS Windows), the <code>\r\n</code> sequence is transformed into <code>\n</code> on input (and the opposite on output).  <code>b</code> (binary mode) performs no such translation.</p>
<p>Presumably the CSV library deals with carriage returns (probably by ignoring them whenever it encounters them).</p>
<hr/>
<p>Edit:  just noticed a changed question.</p>
<p>Since .CSV files aren't really intended for human readers, the library can output them with <code>\n</code> (linefeed (LF) aka newline) separators only.  They only real downside would be a MSWindows user opening the file with Notepad:  it will display poorly.   The CSV library could also output files with <code>\r\n</code> (CR LF) since most programs defend against MSDOS text file conventions.</p>
<p>Either way, the library can write through <code>b</code> (binary) mode just fine.  It is possible that if opened in <code>t</code> (text) mode, the line separators would have something slightly odd like <code>\r\n\n</code>.  Probably most CSV file parsers ignore the CR, and recognize LF LF as ending a line and following it with an empty (blank) line, which it also ignores.</p>
<p>The <code>+</code> is explained in the <a href="http://man7.org/linux/man-pages/man3/fopen.3.html" rel="nofollow">man page</a>:</p>
<blockquote>
<p><strong>w+</strong>       Open for reading and writing.  The file is created if it does
                not exist, otherwise it is truncated.  The stream is
                positioned at the beginning of the file.</p>
</blockquote>
<p>The difference is that <code>w+</code> allows reading <em>and</em> writing whereas <code>w</code> only allows writing.</p>
</div>
<span class="comment-copy">if there are any non-ascii characters you should use binary mode ... opening in binary mode will never alter or harm your data afaik , however sometimes opening in ascii mode will delete or change characters ... as such I just always open in binary mode (even with ascii data)</span>
<span class="comment-copy">@JoranBeasley: there is not such thing as "ascii mode". Use the term "text mode" instead (the character encoding of a text file can be anything).</span>
<span class="comment-copy">read answers to <a href="http://stackoverflow.com/questions/16208206/confused-by-python-file-mode-w">the question you've linked</a> -- <code>+</code> means that you want both to write <i>and</i> to read from the file.</span>
<span class="comment-copy">To be picky, passing <code>newline=''</code> doesn't disable universal newlines mode. From the <a href="http://example.com" rel="nofollow noreferrer">docs</a>: "If it is '', universal newlines mode is enabled, but line endings are returned to the caller untranslated."</span>
<span class="comment-copy">What is "truncating" a file, does it mean replace?</span>
<span class="comment-copy">It is the opposite. Text mode increases portability of your code  (you can read text written on other platforms, files written locally are understood by platform-specific programs such as <code>notepad.exe</code>). <a href="http://stackoverflow.com/a/31492038/4279"><code>csv</code> is a special case where binary mode is used for text data</a></span>
<span class="comment-copy">Truncate means the file will be created if it doesn't exist and file is overwritten if it exists. So yes in simple term it means replace.</span>
<span class="comment-copy">I agree, "Text mode increases portability and csv is just a special case where binary mode is used for text data".</span>
<span class="comment-copy">to understand why, write <code>open('binary.txt', 'wb').write(b"1\n2\n3\n")</code> and <code>open('text.txt', 'w').write("1\n2\n3\n")</code> and try to open both files in the <code>notepad.exe</code></span>
<span class="comment-copy">because notepad.exe is too dumb to recognise \n as a newline when it is not preceded by \r is not really a good reason for me ... if I write "\n" I expect the file to only contain \n...</span>
<span class="comment-copy">probably by using them as row delimiters (<code>\n</code>) ... good answer though</span>
<span class="comment-copy">whether or not <code>'\r\n'</code> is translated in text mode is platform-dependent (<code>os.linesep</code>). It does on Windows. It doesn't on OS X. You don't need to use <code>'t'</code> mode explicitly (it is passed to stdio functions on Python 2 and therefore it may enable platform-dependent behavior such as recognizing Ctrl+Z as an EOF character on input). <a href="http://stackoverflow.com/a/31492038/4279"><code>csv</code> module always recognized both '\r' and '\n' on input</a></span>
