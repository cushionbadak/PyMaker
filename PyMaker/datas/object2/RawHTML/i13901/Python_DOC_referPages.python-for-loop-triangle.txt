<div class="post-text" itemprop="text">
<p>I'm trying to make a triangle that looks like this</p>
<pre><code>10
11 12
13 14 15
16 17 18 19
20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36 37
38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54
</code></pre>
<p>I am trying to use two for loops with one nested. Here is as close as I have gotten so far.</p>
<pre><code>for j in range(11):
    print(end='\n')
    for i in range(j+1):
        print(i+j,'',end='')
print(end='\n')
</code></pre>
<p>I'm pretty sure I need to create a variable, but not really sure how to incorporate it into the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here you go:</p>
<pre><code>&gt;&gt;&gt; a=range(10, 55)
&gt;&gt;&gt; for i in range(10):
...  print(' '.join(repr(e) for e in a[:i+1]))
...  a = a[i+1:]
...
10
11 12
13 14 15
16 17 18 19
20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36 37
38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about short and simple like this:</p>
<pre><code>k=10
for i in range(9):
    for j in range(i+1):
        print(k, end='')
        k+=1
    print('')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another single for loop based solution:</p>
<pre><code>number = 10

for line_length in range(9):
    print(*range(number, number + line_length + 1))
    number += line_length + 1
</code></pre>
<p>Giving:</p>
<pre><code>10
11 12
13 14 15
16 17 18 19
20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36 37
38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like Maelstrom's short and sweet answer, but if you want to look at it mathematically, you might do something like this instead:</p>
<pre><code>&gt;&gt;&gt; for i in range(1, 10):
...     j = 10 + i * (i - 1) // 2
...     print(*range(j, j + i))  # This line edited per lvc's comment
... 
10
11 12
13 14 15
16 17 18 19
20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36 37
38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use one variable to keep track of the current number and one to keep track of the tier you are on</p>
<pre><code>num = 10;
tier = 1;
tiers = 10;
for i in range(tiers):
    for j in range(tier):
        print(num + " ");
        num = num + 1;
    print("\n");
    tier = tier + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can change the triangle height by adjusting the <code>triangle_height</code> variable and the starting element by changing <code>print_number</code>.</p>
<pre><code>print_number = 10
triangle_height = 9
for level_element_count in range(triangle_height):
    print('\n')
    while level_element_count &gt; -1:
        print(print_number, '', end='')
        print_number += 1
        level_element_count -= 1
print('\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun. </p>
<p>This is related to a common pattern where you divide a given sequence (here, the numbers from 10 to 54, inclusive) into non-overlapping 'windows', to do some analysis on, say, 10 values at a time. The twist here is that each window is one element larger than the last. </p>
<p>This looks like a job for <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">itertools</a>!</p>
<pre><code>import itertools as it

def increasing_windows(i, start=1, step=1):
    '''yield non-overlapping windows from iterable `i`, 
       increasing in size from `start` by `step`.
    '''
    pos = 0
    for size in it.count(start, step):
        yield it.islice(i, pos, pos+size)
        pos += size

for line in it.islice(increasing_windows(range(10, 55)), 9):
    print(*line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>counter = 10
for i in range(10):
    output = ""
    for j in range(i):
        output = output + " " + str(counter)
        counter += 1
    print(output)
</code></pre>
<p>Output:</p>
<pre><code> 10
 11 12
 13 14 15
 16 17 18 19
 20 21 22 23 24
 25 26 27 28 29 30
 31 32 33 34 35 36 37
 38 39 40 41 42 43 44 45
 46 47 48 49 50 51 52 53 54
</code></pre>
<p><strong>Explanation:</strong></p>
<p>First loop controls the width of the triangle and second loop controls the content and hence the height. We need to convert an integer to string and concatenate. We create proper output in a string variable in each iteration of second loop and then display it once it gets finished.The key thing is to iterate second loop according to the first one, i.e. loop it as much as first does</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write a generator:</p>
<pre><code>def number_triangle(start, nrows):
    current = start
    for length in range(1, nrows+1):
        yield range(current, current+length)
        current += length

&gt;&gt;&gt; for row in number_triangle(10, 9):
...     print(*row)
10
11 12
13 14 15
16 17 18 19
20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36 37
38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54

&gt;&gt;&gt; for row in number_triangle(1, 12):
...     print(*row)
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15
16 17 18 19 20 21
22 23 24 25 26 27 28
29 30 31 32 33 34 35 36
37 38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54 55
56 57 58 59 60 61 62 63 64 65 66
67 68 69 70 71 72 73 74 75 76 77 78
</code></pre>
<p>Or you could have an infinite generator and leave it up to the caller to control how many rows to generate:</p>
<pre><code>def number_triangle(start=0):
    length = 1
    while True:
        yield range(start, start+length)
        start += length
        length += 1

&gt;&gt;&gt; nt = number_triangle()
&gt;&gt;&gt; for i in range(15):
...     print(*next(nt))
0
1 2
3 4 5
6 7 8 9
10 11 12 13 14
15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31 32 33 34 35
36 37 38 39 40 41 42 43 44
45 46 47 48 49 50 51 52 53 54
55 56 57 58 59 60 61 62 63 64 65
66 67 68 69 70 71 72 73 74 75 76 77
78 79 80 81 82 83 84 85 86 87 88 89 90
91 92 93 94 95 96 97 98 99 100 101 102 103 104
105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No need for nested loop:</p>
<pre><code>a = range(10, 55)

flag = 0
current = 0

for i, e in enumerate(a):
    print e,
    if flag == i:
        current += 1
        flag = i + 1 + current
        print '\n',
</code></pre>
</div>
<span class="comment-copy">Before the nested loops initialize a variable to the starting value, within the inner most loop print the value and increment it</span>
<span class="comment-copy">I've edited your answer to use the Python 3 print function, as the OP does. Note that you could then simplify your print further, since, being a true function, it can be called like this: <code>print(*a[:i+1])</code>.</span>
<span class="comment-copy">looks good to me !</span>
<span class="comment-copy">Nice.. I was thinking about solving it mathematically like that earlier, but had to rush. :-)</span>
<span class="comment-copy">Instead of the join, you could just do <code>print(*range(j, j+1))</code>.</span>
<span class="comment-copy">Excellent point!  I'm a recovering Python 2 addict.</span>
