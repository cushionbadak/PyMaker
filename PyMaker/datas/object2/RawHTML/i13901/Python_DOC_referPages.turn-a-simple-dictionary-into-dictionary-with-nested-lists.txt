<div class="post-text" itemprop="text">
<p>Given the following data received from a web form:</p>
<pre><code>for key in request.form.keys():
    print key, request.form.getlist(key)

group_name [u'myGroup']
category [u'social group']
creation_date [u'03/07/2013']
notes [u'Here are some notes about the group']
members[0][name] [u'Adam']
members[0][location] [u'London']
members[0][dob] [u'01/01/1981']
members[1][name] [u'Bruce']
members[1][location] [u'Cardiff']
members[1][dob] [u'02/02/1982']
</code></pre>
<p>How can I turn it into a dictionary like this?  It's eventually going to be used as JSON but as JSON and dictionaries are easily interchanged my goal is just to get to the following structure.</p>
<pre><code>event = {
    group_name : 'myGroup',
    notes : 'Here are some notes about the group,
    category : 'social group',
    creation_date : '03/07/2013',
    members : [
        {
            name : 'Adam',
            location : 'London',
            dob : '01/01/1981'
        }
        {
            name : 'Bruce',
            location : 'Cardiff',
            dob : '02/02/1982'
        }
    ]
}
</code></pre>
<p><strong>Here's what I have managed so far.</strong>  Using the following list comprehension I can easily make sense of the ordinary fields:</p>
<pre><code>event = [ (key, request.form.getlist(key)[0]) for key in request.form.keys() if key[0:7] != "catches" ]
</code></pre>
<p>but I'm struggling with the members list.  There can be any number of members.  I think I need to separately create a list for them and add that to a dictionary with the non-iterative records.  I can get the member data like this:</p>
<pre><code>tmp_members = [(key, request.form.getlist(key)) for key in request.form.keys() if key[0:7]=="members"]
</code></pre>
<p>Then I can pull out the list index and field name:</p>
<pre><code>member_arr = []
members_orig = [ (key, request.form.getlist(key)[0]) for key in request.form.keys() if key[0:7] == 

"members" ]
for i in members_orig:
    p1 = i[0].index('[')
    p2 = i[0].index(']')
    members_index = i[0][p1+1:p2]
    p1 = i[0].rfind('[')
    members_field = i[0][p1+1:-1]
</code></pre>
<p>But how do I add this to my data structure.  The following won't work because I could be trying to process <code>members[1][name]</code> before <code>members[0][name]</code>.</p>
<pre><code>members_arr[int(members_index)] = {members_field : i[1]}
</code></pre>
<p>This seems very convoluted.  Is there a simper way of doing this, and if not how can I get this working?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could store the data in a dictionary and then use the <code>json</code> library.</p>
<pre><code>import json
json_data = json.dumps(dict)
print(json_data)
</code></pre>
<p>This will print a json string.</p>
<p>Check out the <a href="https://docs.python.org/3/library/json.html" rel="nofollow">json library here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, convert it to a dictionary, then use json.dumps(), with some optional parameters, to print out the JSON in the format you need:</p>
<pre><code>eventdict = {
    'group_name': 'myGroup',
    'notes': 'Here are some notes about the group',
    'category': 'social group',
    'creation_date': '03/07/2013',
    'members': [
        {'name': 'Adam',
         'location': 'London',
         'dob': '01/01/1981'},
        {'name': 'Bruce',
         'location': 'Cardiff',
         'dob': '02/02/1982'}
        ]
    }

import json

print json.dumps(eventdict, indent=4)
</code></pre>
<p>The order of the key:value pairs is not always consistent, but if you're just looking for pretty-looking JSON that can be parsed by a script, while remaining human-readable, this should work.  You can also sort the keys alphabetically, using:</p>
<pre><code>print json.dumps(eventdict, indent=4, sort_keys=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following python functions can be used to create a nested dictionary from the flat dictionary.  Just pass in the html form output to decode().</p>
<pre><code>def get_key_name(str):
    first_pos = str.find('[')
    return str[:first_pos]

def get_subkey_name(str):
    '''Used with lists of dictionaries only'''
    first_pos = str.rfind('[')
    last_pos = str.rfind(']')
    return str[first_pos:last_pos+1]

def get_key_index(str):
    first_pos = str.find('[')
    last_pos = str.find(']')
    return str[first_pos:last_pos+1]

def decode(idic):
    odic = {} # Initialise an empty dictionary
    # Scan all the top level keys
    for key in idic:
        # Nested entries have [] in their key
        if '[' in key and ']' in key:
            if key.rfind('[') == key.find('[') and key.rfind(']') == key.find(']'):
                print key, 'is a nested list'
                key_name = get_key_name(key)
                key_index = int(get_key_index(key).replace('[','',1).replace(']','',1))
                # Append can't be used because we may not get the list in the correct order.
                try:
                    odic[key_name][key_index] = idic[key][0]
                except KeyError: # List doesn't yet exist
                     odic[key_name] = [None] * (key_index + 1)
                     odic[key_name][key_index] = idic[key][0]
                except IndexError: # List is too short
                     odic[key_name] = odic[key_name] + ([None] * (key_index - len(odic[key_name]) + 1 ))
                     # TO DO: This could be a function
                     odic[key_name][key_index] = idic[key][0]
            else:
                key_name = get_key_name(key)
                key_index = int(get_key_index(key).replace('[','',1).replace(']','',1))
                subkey_name = get_subkey_name(key).replace('[','',1).replace(']','',1)
                try:
                    odic[key_name][key_index][subkey_name] = idic[key][0]
                except KeyError: # Dictionary doesn't yet exist
                    print "KeyError"
                    # The dictionaries must not be bound to the same object
                    odic[key_name] = [{} for _ in range(key_index+1)]
                    odic[key_name][key_index][subkey_name] = idic[key][0]
                except IndexError: # List is too short
                    # The dictionaries must not be bound to the same object
                    odic[key_name] = odic[key_name] + [{} for _ in range(key_index - len(odic[key_name]) + 1)]
                    odic[key_name][key_index][subkey_name] = idic[key][0]
        else:
            # This can be added to the output dictionary directly
            print key, 'is a simple key value pair'
            odic[key] = idic[key][0]
    return odic
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer"><code>import json</code></a></span>
<span class="comment-copy">Using <code>json.dumps()</code> directly on the raw data or even members_orig doesn't group the members into a list.  It just creates individual keys called <code>members[0][name]</code>, <code>members[1][name]</code> etc.</span>
<span class="comment-copy">My question is really about how to get the eventdict dictionary you are showing here.  So, how do I go from the form data in request.form to my dictionary called event or yours called eventdict (they are both the same).  I'm not looking for pretty JSON, I'm looking for JSON that can be loaded into MongoDB.</span>
