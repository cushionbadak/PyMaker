<div class="post-text" itemprop="text">
<p>I have two loops that finds the product of the items in a list. Seen below:</p>
<p>Loop A</p>
<pre><code>product = 1
for i in [1, 2, 4, 8]:
   product *= i
print(product) # result= 64
</code></pre>
<p>Loop B</p>
<pre><code>product = 1
i = iter([1, 2, 4, 8])
while True:
     try:
        product *= next(i)
     except StopIteration:
        break
print(product) # prints: 64
</code></pre>
<p>My question is what happens inside the for-loop that makes an explicit call of an iterator i.e.: iter([1,2,4,8]) necessary ? </p>
<p>Can't python discern that [1,2,4,8] is list hence an iterable as it did in the for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>for</code> statement in python is by definition an iterative loop. The <code>while</code> statement is non-iterative, and so an iterator must be created for it. From the <a href="https://docs.python.org/2/tutorial/controlflow.html" rel="nofollow">documentation</a>:</p>
<p><code>for</code></p>
<blockquote>
<p>Python’s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.</p>
</blockquote>
<p><code>while</code></p>
<blockquote>
<p>The while loop executes as long as the condition (here: <code>True</code>) remains true.</p>
</blockquote>
<p>Loop A and Loop B represent two different ways of accomplishing the same thing, through a different method.</p>
<p><strong>Loop A</strong> uses the <code>for</code> statement to iterate through the given list [1, 2, 4, 8]</p>
<p><strong>Loop B</strong> uses a <code>while</code> statement, which by definition is non-iterative, and continues until given a false condition, or by <code>break</code>.</p>
<p>In order to end the while loop, <strong>Loop B</strong> establishes an iterator across the list with <code>i = iter()</code>. When <code>next(i)</code> reaches the end of the iterator <code>i</code>, it triggers the exception, which uses <code>break</code> to exit the <code>while</code> loop.</p>
<p><strong>Loop A</strong> would be considered by many to be the more pythonic and safer way to compute the product in this manner.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have used <a href="https://docs.python.org/2/library/functions.html#iter" rel="nofollow"><code>iter()</code></a> in <code>while</code> loop which return an <em><a href="https://docs.python.org/2/library/stdtypes.html#iterator-types" rel="nofollow">iterator object</a></em></p></div>
<span class="comment-copy"><code>iter([1,2,4,8]) </code> is in the while not the for loop what are you actually asking, how iter works or how a for loop works?</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">...what? You can <i>see</i> the internal workings, Python is open source, but which distribution?</span>
<span class="comment-copy">I mean with the while loop can't python discern that [1,2,4,8] is a list, hence is an utterable as it did in the for loop.</span>
<span class="comment-copy">For what it matters, what you did in loop A is essentially syntactic sugar for what you did in loop B. Iterating on an iterable with a for loop will create an iterator of the iterable and then <code>next()</code> that iterator until the <code>StopIteration</code> exception is raised at which point the for loop stops iterating.</span>
