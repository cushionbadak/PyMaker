<div class="post-text" itemprop="text">
<p>I have two module with two different classes and their corresponding test classes.</p>
<pre><code> foo.py
 ------
 class foo(object):
     def fooMethod(self):
         // smthg

 bar.py
 ------
 class bar(object):
     def barMethod(self):
         // smthg

 fooTest.py
 ------
 class fooTest(unittest.TestCase):
     def fooMethodTest(self):
         // smthg

 barTest.py
 ------
 class barTest(unittest.TestCase):
     def barMethodTest(self):
         // smthg
</code></pre>
<p>In any, test and source module, file, I <strong>erased</strong> the <code>if __name__ == "__main__":</code> because of increasing coherency and obeying object-oriented ideology.</p>
<p>Like in Java unit test, I'm looking for creating a module to run all unittest. For example,</p>
<pre><code> runAllTest.py
 -------------
 class runAllTest(unittest.TestCase):
    ?????

 if __name__ == "__main__":
    ?????
</code></pre>
<p>I looked for search engine but didn't find any tutorial or example. Is it possible to do so? Why? or How? </p>
<p><em>Note: I'm using eclipse and pydev distribution on windows machine.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a <a href="https://docs.python.org/2/library/unittest.html#organizing-test-code" rel="nofollow noreferrer"><code>TestSuite</code></a> and run all your tests in it's <code>if __name__ == '__main__'</code> block:</p>
<pre><code>import unittest   

def create_suite():
    test_suite = unittest.TestSuite()
    test_suite.addTest(fooTest())
    test_suite.addTest(barTest())
    return test_suite

if __name__ == '__main__':
   suite = create_suite()

   runner=unittest.TextTestRunner()
   runner.run(suite)
</code></pre>
<p>If you do not want to create the test cases manually look at <a href="https://stackoverflow.com/a/1732477/342473">this quesiton/answer</a>, which basically creates the test cases dynamically, or use some of the features of the <code>unittest</code> module like <a href="https://docs.python.org/2/library/unittest.html#test-discovery" rel="nofollow noreferrer">test discovery</a> feature and <a href="https://docs.python.org/2/library/unittest.html#command-line-interface" rel="nofollow noreferrer">command line</a> options ..</p>
</div>
<div class="post-text" itemprop="text">
<p>When running unit tests based on the built-in python unittest module, at the root level of your project run</p>
<pre><code>python -m unittest discover &lt;module_name&gt;
</code></pre>
<p>For the specific example above, it suffices to run</p>
<pre><code>python -m unittest discover .
</code></pre>
<p><a href="https://docs.python.org/2/library/unittest.html" rel="nofollow noreferrer">https://docs.python.org/2/library/unittest.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are looking for is the <a href="https://docs.python.org/2/library/unittest.html#unittest.TestLoader" rel="nofollow noreferrer">TestLoader</a>. With this you can load specific tests or modules or load everything under a given directory. Also, <a href="https://stackoverflow.com/questions/1732438/how-to-run-all-python-unit-tests-in-a-directory">this</a> post has some useful examples using a <code>TestSuite</code> instance.</p>
<p>EDIT: The code I usually have in my test.py:</p>
<pre><code>if not popts.tests:
    suite = unittest.TestLoader().discover(os.path.dirname(__file__)+'/tests')
    #print(suite._tests)

    # Print outline
    lg.info(' * Going for Interactive net tests = '+str(not tvars.NOINTERACTIVE))

    # Run
    unittest.TextTestRunner(verbosity=popts.verbosity).run(suite)
else:
    lg.info(' * Running specific tests')

    suite = unittest.TestSuite()

    # Load standard tests
    for t in popts.tests:
        test = unittest.TestLoader().loadTestsFromName("tests."+t)
        suite.addTest(test)

    # Run
    unittest.TextTestRunner(verbosity=popts.verbosity).run(suite)
</code></pre>
<p>Does two things:</p>
<ol>
<li>If -t flag (tests) is not present, find and load all tests in directory</li>
<li>Else, load the requested tests one-by-one</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="http://www.pydev.org/" rel="nofollow noreferrer">PyDev</a> right click on a folder in Eclipse and choose "Run as-&gt; Python unit-test". This will run all tests in that folder (the names of the test files and methods have to start with "test_".)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you could just run the following command under the folder where your tests files are located:</p>
<pre><code>python -m unittest
</code></pre>
<p>as mentioned here in the <a href="https://docs.python.org/3/library/unittest.html#command-line-interface" rel="nofollow noreferrer">doc</a> that "when executed without arguments Test Discovery is started"</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://nose.readthedocs.org/en/latest/" rel="nofollow">nosetests</a>.</p>
<p>You <em>might</em> need to rename your files; I'm not sure about the pattern nose uses to find the test files but, personally, I use <code>*_test.py</code>. It is possible to specify a custom pattern which your project uses for test filenames but I remember being unable to make it work so I ended up renaming my tests instead.</p>
<p>You also need to follow <a href="https://www.python.org/dev/peps/pep-0328/" rel="nofollow">PEP 328</a> conventions to work with nose. I don't use IDEs with Python but your IDE may already follow it---just read the PEP and check.</p>
<p>With a PEP 328 directory/package structure, you can run individual tests as</p>
<pre><code>nosetests path.to.class_test
</code></pre>
<p>Note that instead of the usual directory separators (<code>/</code> or <code>\</code>), I used dots.</p>
<p>To run <em>all</em> tests, simply invoke <code>nosetests</code> at the root of your project.</p>
</div>
<span class="comment-copy">I would rename the test files to 'test_foo.py' format, and run <code>nosetests</code> in the test directory. <code>nose</code> will autodiscover all the test files and test classes.</span>
<span class="comment-copy">Why the the -1?</span>
