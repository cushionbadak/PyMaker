<div class="post-text" itemprop="text">
<p>I am asking Python to print the minimum number from a column of CSV data, but the top row is the column number, and I don't want Python to take the top row into account. How can I make sure Python ignores the first line?</p>
<p>This is the code so far:</p>
<pre><code>import csv

with open('all16.csv', 'rb') as inf:
    incsv = csv.reader(inf)
    column = 1                
    datatype = float          
    data = (datatype(column) for row in incsv)   
    least_value = min(data)

print least_value
</code></pre>
<p>Could you also explain what you are doing, not just give the code? I am very very new to Python and would like to make sure I understand everything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use an instance of the <code>csv</code> module's <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer" rel="noreferrer"><strong><code>Sniffer</code></strong></a> class to deduce the format of a CSV file and detect whether a header row is present along with the built-in <code>next()</code> function to skip over the first row only when necessary:</p>
<pre><code>import csv

with open('all16.csv', 'r', newline='') as file:
    has_header = csv.Sniffer().has_header(file.read(1024))
    file.seek(0)  # Rewind.
    reader = csv.reader(file)
    if has_header:
        next(reader)  # Skip header row.
    column = 1
    datatype = float
    data = (datatype(row[column]) for row in reader)
    least_value = min(data)

    print(least_value)
</code></pre>
<p>Since <code>datatype</code> and <code>column</code> are hardcoded in your example, it would be slightly faster to process the <code>row</code> like this:</p>
<pre><code>    data = (float(row[1]) for row in reader)
</code></pre>
<p><strong>Note:</strong> the code above is for Python 3.x. For Python 2.x use the following line to open the file instead of what is shown:</p>
<pre><code>with open('all16.csv', 'rb') as file:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To skip the first line just call:</p>
<pre><code>next(inf)
</code></pre>
<p>Files in Python are iterators over lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>You would normally use <code>next(incsv)</code> which advances the iterator one row, so you skip the header. The other (say you wanted to skip 30 rows) would be:</p>
<pre><code>from itertools import islice
for row in islice(incsv, 30, None):
    # process
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In a similar use case I had to skip annoying lines before the line with my actual column names. This solution worked nicely. Read the file first, then pass the list to <code>csv.DictReader</code>.</p>
<pre><code>with open('all16.csv') as tmp:
    # Skip first line (if any)
    next(tmp, None)

    # {line_num: row}
    data = dict(enumerate(csv.DictReader(tmp)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Borrowed from <a href="https://rads.stackoverflow.com/amzn/click/com/B00DQV4GGY" rel="nofollow noreferrer">python cookbook</a>, <br/>
A more concise template code might look like this: </p>
<pre><code>import csv
with open('stocks.csv') as f:
    f_csv = csv.reader(f) 
    headers = next(f_csv) 
    for row in f_csv:
        # Process row ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use csv.DictReader instead of csv.Reader.
If the fieldnames parameter is omitted, the values in the first row of the csvfile will be used as field names. you would then be able to access field values using row["1"] etc</p>
</div>
<div class="post-text" itemprop="text">
<p>The new 'pandas' package might be more relevant than 'csv'. The code below will read a CSV file, by default interpreting the first line as the column header and find the minimum across columns.</p>
<pre><code>import pandas as pd

data = pd.read_csv('all16.csv')
data.min()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, my <a href="http://pyexcel.readthedocs.org/en/v0.0.9/index.html" rel="nofollow">mini wrapper library</a> would do the job as well.</p>
<pre><code>&gt;&gt;&gt; import pyexcel as pe
&gt;&gt;&gt; data = pe.load('all16.csv', name_columns_by_row=0)
&gt;&gt;&gt; min(data.column[1])
</code></pre>
<p>Meanwhile, if you know what header column index one is, for example "Column 1", you can do this instead:</p>
<pre><code>&gt;&gt;&gt; min(data.column["Column 1"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me the easiest way to go is to use range.   </p>
<pre><code>import csv

with open('files/filename.csv') as I:
    reader = csv.reader(I)
    fulllist = list(reader)

# Starting with data skipping header
for item in range(1, len(fulllist)): 
    # Print each row using "item" as the index value
    print (fulllist[item])  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer" rel="nofollow noreferrer">documentation for the Python 3 CSV module</a> provides this example:</p>
<pre><code>with open('example.csv', newline='') as csvfile:
    dialect = csv.Sniffer().sniff(csvfile.read(1024))
    csvfile.seek(0)
    reader = csv.reader(csvfile, dialect)
    # ... process CSV file contents here ...
</code></pre>
<p>The <code>Sniffer</code> will try to auto-detect many things about the CSV file. You need to explicitly call its <code>has_header()</code> method to determine whether the file has a header line. If it does, then skip the first row when iterating the CSV rows. You can do it like this:</p>
<pre><code>if sniffer.has_header():
    for header_row in reader:
        break
for data_row in reader:
    # do something with the row
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use <em>tail</em> to get rid of the unwanted first line:</p>
<pre><code>tail -n +2 $INFIL | whatever_script.py 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just add <strong>[1:]</strong></p>
<p>example below:</p>
<pre><code>data = pd.read_csv("/Users/xyz/Desktop/xyxData/xyz.csv", sep=',', header=None)**[1:]**
</code></pre>
<p>that works for me in iPython</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.X</p>
<p>Handles UTF8 BOM + HEADER</p>
<p>It was quite frustrating that the <code>csv</code> module could not easily get the header, there is also a bug with the UTF-8 BOM (first char in file).
This works for me using only the <code>csv</code> module:</p>
<pre><code>import csv

def read_csv(self, csv_path, delimiter):
    with open(csv_path, newline='', encoding='utf-8') as f:
        # https://bugs.python.org/issue7185
        # Remove UTF8 BOM.
        txt = f.read()[1:]

    # Remove header line.
    header = txt.splitlines()[:1]
    lines = txt.splitlines()[1:]

    # Convert to list.
    csv_rows = list(csv.reader(lines, delimiter=delimiter))

    for row in csv_rows:
        value = row[INDEX_HERE]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because this is related to something I was doing, I'll share here. </p>
<p>What if we're not sure if there's a header and you also don't feel like importing sniffer and other things? </p>
<p>If your task is basic, such as printing or appending to a list or array, you could just use an if statement:</p>
<pre><code># Let's say there's 4 columns
with open('file.csv') as csvfile:
     csvreader = csv.reader(csvfile)
# read first line
     first_line = next(csvreader)
# My headers were just text. You can use any suitable conditional here
     if len(first_line) == 4:
          array.append(first_line)
# Now we'll just iterate over everything else as usual:
     for row in csvreader:
          array.append(row)
</code></pre>
</div>
<span class="comment-copy">Are you aware that you're just creating a generator that returns a <code>1.0</code> for each line in your file and then taking the minimum, which is going to be <code>1.0</code>?</span>
<span class="comment-copy">@Wooble Technically, it's a big generator of <code>1.0</code>. :)</span>
<span class="comment-copy">@Dougal: comment fixed.</span>
<span class="comment-copy">@Wooble good catch - ...<code>datatype(row[column]</code>... is what I guess the OP is trying to achieve though</span>
<span class="comment-copy">i had someone write up that code for me and didnt catch that, so thanks haha!</span>
<span class="comment-copy">Instead of <code>has_header(file.read(1024))</code>, does it make sense to write <code>has_header(file.readline())</code> ?  I see that a lot, but I don't understand how <code>has_reader()</code> could detect whether or not there's a header from a single line of the CSV file...</span>
<span class="comment-copy">@Anto: The code in my answer is based on the "example for Sniffer use" in the <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer" rel="nofollow noreferrer">documentation</a>, so I assume it's the prescribed way to do it. I agree that doing it on the basis of one line of data doesn't seem like it would always be enough data to make such a determination—but I have no idea since <i>how</i> the <code>Sniffer</code> works isn't described. FWIW I've <b>never</b> seen <code>has_header(file.readline())</code> being used and even if it worked most of time, I would be highly suspicious of the approach for the reasons stated.</span>
<span class="comment-copy">Thanks for your input.  Nevertheless it seems that using <code>file.read(1024)</code> <a href="https://stackoverflow.com/a/35757505/1030960">generates errors in python's csv lib</a>: . See also <a href="https://github.com/xesscorp/KiField/issues/17#issuecomment-262871084" rel="nofollow noreferrer">here</a> for instance.</span>
<span class="comment-copy">@Anto: I've never encountered such an error—1024 bytes is not a lot of memory after all—nor has it been a problem for many other folks based on the up-votes this answer has received (as well as the thousands of of people who have read and followed the documentation). For those reasons I strongly suspect something else is causing your issue.</span>
<span class="comment-copy">I ran into this exact same error as soon as I switched from <code>readline()</code> to <code>read(1024)</code>.  So far I've only managed to find people who have switched to readline to solve the csv.dialect issue.</span>
<span class="comment-copy">this answer should be 1th</span>
<span class="comment-copy">Thanks Veedrac. Happy to learn here, can you suggest edits that would solve the problems you cite? My solution gets the job done, but it looks like it could be further improved?</span>
<span class="comment-copy">I gave you an edit that replaces the code with something that should be identical (untested). Feel free to revert if it's not in line with what you mean. I'm still not sure why you're making the <code>data</code> dictionary, nor does this answer really add anything over the accepted one.</span>
<span class="comment-copy">Thanks Veedrac! That looks very efficient indeed. I posted my answer because the accepted one was not working for me (can't remember the reason now). What would be the problem with defining data = dict() and then immediately filling it (as compared to your suggestion)?</span>
<span class="comment-copy">It's not <i>wrong</i> to do <code>data = dict()</code> and fill it in, but it's inefficient and not idiomatic. Plus, one should use dict literals (<code>{}</code>) and <code>enumerate</code> even then.</span>
<span class="comment-copy">FWIW, you should reply to my posts with <code>@Veedrac</code> if you want to be sure I'm notified, although Stack Overflow seems to be able to guess from the username along. (I don't write <code>@Maarten</code> because the answerer will be notified by default.)</span>
<span class="comment-copy">and you can write it in one line too: <code>pd.read_csv('all16.csv').min()</code></span>
