<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3024925/create-a-with-block-on-several-context-managers">Create a “with” block on several context managers? [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>In Python 2.6, we used to format our nested context manager that way:</p>
<pre><code>with nested(
    context1,
    context2
) as a, b:
    pass
</code></pre>
<p>From Python 2.7 and on, <code>nested</code> is deprecated. I've seen lots of example of multiple context manager on a single line, but I can't find a syntax that allow them on multiple lines. How would you do this?</p>
<pre><code># That's working fine
with context1 as a, context2 as b:
    pass

# But how do we make it multine?
# These are not working
with (
    context1,
    context2
) as a, b:
    pass

with context1 as a,
    context2 as b:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Backslash characters</h3>
<blockquote>
<p>Two or more physical lines may be joined into logical lines using
  backslash characters (<code>\</code>)</p>
</blockquote>
<p>(citing the <em><a href="https://docs.python.org/3/reference/lexical_analysis.html#explicit-line-joining" rel="noreferrer">Explicit line joining</a></em> section)</p>
<p>If you want put context managers on different lines, you can make that work by ending lines with backslashes:</p>
<pre><code>with context1 as a,\
     context2 as b:
    pass
</code></pre>
<h3><code>contextlib.ExitStack</code></h3>
<p><a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="noreferrer"><code>contextlib.ExitStack</code></a> is a</p>
<blockquote>
<p>context manager that is designed to make it easy to programmatically
  combine other context managers and cleanup functions, especially those
  that are optional or otherwise driven by input data.</p>
</blockquote>
<p>It's available in Python 3.3 and newer, and allows to enter a variable number of context managers easily. For just two context managers the usage looks like this:</p>
<pre><code>from contextlib import ExitStack

with ExitStack() as es:
    a = es.enter_context(context1)
    b = es.enter_context(context2)
</code></pre>
<h3>Nesting</h3>
<p>It's possible to split a context expression across several <em>nested</em> <code>with</code> statements:</p>
<blockquote>
<p>With more than one item, the context managers are processed as if
  multiple with statements were nested:</p>
<pre><code>with A() as a, B() as b:
</code></pre>
<p>suite is equivalent to</p>
<pre><code>with A() as a:
    with B() as b:
        suite
</code></pre>
</blockquote>
<p>(from <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="noreferrer"><em>The with statement</em></a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a way to creatively use the parentheses and avoid the backslash: parenthesize the expression before <code>as</code>. Not very sightly, though:</p>
<pre><code>with (
  open('/etc/passwd')) as foo, (
  open('/tmp/bar')) as bar:
  pass  # this parses correctly
</code></pre>
<p>It's easy to nest more and more if needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your example is equivalent to:</p>
<pre><code>with context1 as a:
    with context2 as b:
        pass
</code></pre>
<p>which looks nice on two lines.</p>
<p>Reference: <a href="https://docs.python.org/2.7/reference/compound_stmts.html#the-with-statement" rel="nofollow">https://docs.python.org/2.7/reference/compound_stmts.html#the-with-statement</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with context1 as a, \
context2 as b:
pass
</code></pre>
<p>Like any line-break, backslash provides the solution</p>
</div>
<span class="comment-copy">Not sure why this has been flagged as duplicate. The other post don't answer the question. I agree that Python should propose a parenthese based syntax as for the if statement.</span>
<span class="comment-copy">Is this the only syntax - because it's very ugly... :(</span>
<span class="comment-copy">Can't believe I'm saying it but in this instance python syntax is terrible compared to lisp. Multiple assignments in a (let) or other binding form looks completely natural... but this is awkward.</span>
<span class="comment-copy">This is the prettiest solution. Thanks!</span>
<span class="comment-copy">Why would you want to avoid backslashes in this case though? The open parens play essentially the same role here, but it also becomes more cryptic.</span>
<span class="comment-copy">@isarandi: A backslash as line continuation is easier to break when editing than some other things. PEP-8 recommends the use of parens in favor of backslash continuation. BTW the same PEP-8 suggests to use a <code>\</code> exactly with multiple <code>with</code> statements. I personally prefer nesting of <code>with</code>, but added this answer for completeness.</span>
