<div class="post-text" itemprop="text">
<p>First of all, I'd like to clarify the question: it's about the <a href="https://docs.python.org/3/library/functions.html#slice" rel="noreferrer"><code>slice()</code></a> function, <em>not</em> slices of lists or strings like <code>a[5:4:3]</code>.</p>
<p>The docs mention that this function is used in NumPy and give no examples of usage (it's said <em>how to use it</em> but it's not said <em>when to use it</em>). Moreover, I've <em>never</em> seen this function used in any Python program.</p>
<p>When should one use the <code>slice()</code> function when programming in plain Python (without NumPy or SciPy)? Any examples will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a[x:y:z]</code> is gives the same result as <code>a[slice(x, y, z)]</code>. One of the advantage of a <code>slice</code> object is that it can be stored and retrieved later as a single object instead of storing <code>x</code>, <code>y</code>, <code>z</code>.</p>
<p>It is normally used to let the user define their own slice that can be later applied on data, without the need of dealing with many different cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it's not all!</p>
<p>As objects are already mentioned, first you have to know is that slice is a class, <em>not a function</em> returning an object.</p>
<p>Second use of the slice() instance is for passing arguments to <strong>getitem</strong>() and <strong>getslice</strong>() methods when you're making your own object that behaves like a string, list, and other objects supporting slicing.</p>
<p>When you do:</p>
<pre><code>print "blahblah"[3:5]
</code></pre>
<p>That automatically translates to:</p>
<pre><code>print "blahblah".__getitem__(slice(3, 5, None))
</code></pre>
<p>So when you program your own indexing and slicing object:</p>
<pre><code>class example:
    def __getitem__ (self, item):
        if isinstance(item, slice):
            print "You are slicing me!"
            print "From", item.start, "to", item.stop, "with step", item.step
            return self
        if isinstance(item, tuple):
            print "You are multi-slicing me!"
            for x, y in enumerate(item):
                print "Slice #", x
                self[y]
            return self
        print "You are indexing me!\nIndex:", repr(item)
        return self
</code></pre>
<p>Try it:</p>
<pre><code>&gt;&gt;&gt; example()[9:20]
&gt;&gt;&gt; example()[2:3,9:19:2]
&gt;&gt;&gt; example()[50]
&gt;&gt;&gt; example()["String index i.e. the key!"]
&gt;&gt;&gt; # You may wish to create an object that can be sliced with strings:
&gt;&gt;&gt; example()["start of slice":"end of slice"]
</code></pre>
<p>Older Python versions supported the method <strong>getslice</strong>() that would be used instead of <strong>getitem</strong>(). It is a good practice to check in the <strong>getitem</strong>() whether we got a slice, and if we did, redirect it to <strong>getslice</strong>() method. This way you will have complete backward compatibility.</p>
<p>This is how numpy uses slice() object for matrix manipulations, and it is obvious that it is constantly used everywhere indirectly.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Using function semantics) Calling the <code>slice</code> class instantiates a <code>slice</code> object (start,stop,step), which you can use as a slice specifier later in your program:</p>
<pre><code>&gt;&gt;&gt; myname='Rufus'
&gt;&gt;&gt; myname[::-1] # reversing idiom
'sufuR'

&gt;&gt;&gt; reversing_slice=slice(None,None,-1) # reversing idiom as slice object
&gt;&gt;&gt; myname[reversing_slice]
'sufuR'

&gt;&gt;&gt; odds=slice(0,None,2) # another example
&gt;&gt;&gt; myname[odds]
'Rfs'
</code></pre>
<p>If you had a slice you often used, this is preferable to using constants in multiple program areas, and save the pain of keeping 2 or 3 references that had to be typed in
each time.</p>
<p>Of course, it does make it look like an index, but after using Python a while, you learn that everything is not what it looks like at first glance, so I recommend naming your variables better (as I did with <code>reversing_slice</code>, versus <code>odds</code> which isn't so clear.</p>
</div>
<div class="post-text" itemprop="text">
<p>From your question I believe you are looking for an example. So here is what I have when I try to <code>slice</code> a list from <code>range(1, 20)</code> with a step of <strong>3</strong></p>
<pre><code>&gt;&gt;&gt; x = range(1, 20)

&gt;&gt;&gt; x[1:20:3]
[2, 5, 8, 11, 14, 17]

&gt;&gt;&gt; x[slice(1, 20, 3)]
[2, 5, 8, 11, 14, 17]
</code></pre>
</div>
<span class="comment-copy">It is actually a class, which returns a slice object.  See my full answer below.</span>
<span class="comment-copy">Okay, I got it. So, there are no more cases where one could use <code>slice()</code>?</span>
<span class="comment-copy">@ForceBru: As usually in programming,  the uses are only bounded by your creativity ;)</span>
<span class="comment-copy">that's right lol :)</span>
<span class="comment-copy">It's only rarely necessary to create a <code>slice</code> object yourself. The most common situation where you'll use a <code>slice</code> object is when you're writing your own sequence type and want to support slicing of the items it contains. Whenever some other code uses slice notation on your an instance of your class Python will call your <code>__getitem__</code> method with a <code>slice</code> object. (Older versions of Python used a <code>__getslice__</code> method instead of this approach, but that has been deprecated since 2.6, and support for it is gone completely in Python 3.)</span>
<span class="comment-copy">@Blckknght Yeah, good explanation. Didn't saw it in time, so I added an answer. At least it contains an example, so I am not completely copying you. But why on earth you suggest only usage to be with sequence types? You may use it for whatever you want. Doesn't even need to do any slicing at all.</span>
<span class="comment-copy">Edited my answer to avoid calling <code>slice</code> a function.</span>
<span class="comment-copy">How does this relate to the <code>slice</code> function which is what the OP is asking...</span>
<span class="comment-copy">@JonClements fixed answer with the <code>slice</code> function</span>
