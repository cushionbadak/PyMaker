<div class="post-text" itemprop="text">
<p>I need to validate an XML file against an XSD. To accomplish this I would like to use the <a href="http://lxml.de/installation.html" rel="nofollow">lxml library</a>. The problem is that even though I have <code>from lxml import etree</code> and have installed lxml to <code>C:\Python33\Lib\site-packages\lxml\</code>, I'm getting the error </p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\asmithe\Documents\dev1\TestParse.py", line 3, in &lt;module&gt;
    from lxml import etree as ET_l
ImportError: No module named lxml
</code></pre>
<p>Why is this and how do I fix it? I tried adding <code>C:\Python33\Lib\site-packages\lxml\</code> to the PATH variable and it didn't help. I had installed lxml using PIP. </p>
<p>UPDATE: When I run the script through  the interactive terminal (i.e. typing <code>python</code> in cmd) it CAN <code>import lxml</code></p>
<p>Here is a simple script</p>
<pre><code>from lxml import etree

def main():
    print('hi')


if __name__ == "__main__":
    main()
</code></pre>
<p>In cmd I do</p>
<pre><code>C:\Users\dev1\Documents\test&gt;python
Python 3.3.5 (v3.3.5:62cf4e77f785, Mar  9 2014, 10:35:05) [MSC v.1600 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt;
&gt;&gt;&gt; def main():
...     print('hi')
...
&gt;&gt;&gt;
&gt;&gt;&gt; if __name__ == "__main__":
...     main()
...
hi
&gt;&gt;&gt; exit()
</code></pre>
<p>However if I try to run it</p>
<pre><code>&gt; ImportLxml.py
</code></pre>
<p>then I get </p>
<pre><code>C:\Users\dev1\Documents\test&gt;ImportLxml.py
Traceback (most recent call last):
  File "C:\Users\dev1\Documents\XML test\TestImport.py", line 1, in &lt;module&gt;

    from lxml import etree
ImportError: No module named lxml
</code></pre>
<p>Here are all of the pythonic entries in the PATH environment variable</p>
<pre><code>C:\Python33\;
C:\Python33\Scripts;
C:\Python33\Lib\site-packages\lxml\
%ARCGISINSALLDIR%\arcpy;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Configure the <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="nofollow">Python Launcher for Windows</a> to use 3.3.5 as default:</p>
<pre><code>py -3
</code></pre>
<p>Alternately -- assuming you chose to install the Python Launcher when last installing Python -- <a href="https://docs.python.org/3/using/windows.html#from-a-script" rel="nofollow">begin your script with a shebang which the Python Launcher will recognize as requesting Python 3</a>:</p>
<pre><code>#! python3
</code></pre>
<hr/>
<p>If you decided not to install the Python Launcher for Windows when installing Python 3.3, see <a href="https://docs.python.org/3/using/windows.html#executing-scripts-without-the-python-launcher" rel="nofollow">the install documentation</a> for manual steps:</p>
<blockquote>
<p>Associate the correct file group with .py scripts:</p>
<pre><code>assoc .py=Python.File
</code></pre>
<p>Redirect all Python files to the new executable:</p>
<pre><code>ftype Python.File=C:\Path\to\pythonw.exe "%1" %*
</code></pre>
</blockquote>
<p>This can be used to configure the type for <code>Python.File</code> to the Python interpreter of your choice, ie. that for 3.3.5. (As a matter of good practices, <code>Python.File</code> should be pointed at <code>py.exe</code> or <code>python.exe</code>; the <code>pythonw.exe</code> example above is a direct quote from the docs, but a bad practice nonetheless).</p>
<hr/>
<p>Alternately, if you have a <code>py.exe</code> on disk (installed with Python 3.3) but it isn't being used, you can modify those instructions a bit:</p>
<blockquote>
<p>Associate the correct file group with .py scripts:</p>
<pre><code>assoc .py=Python.File
</code></pre>
<p>Redirect all Python files to the new executable:</p>
<pre><code>ftype Python.File=C:\Path\to\py.exe "%1" %*
</code></pre>
</blockquote>
<p>...again, adjusting the path to be appropriate for where you installed Python 3.3.x.</p>
</div>
<span class="comment-copy">Do you have multiple python installations in your system?</span>
<span class="comment-copy">@AnandSKumar yes Python 2.7 and 3.3 (and I intend to be using 3.3). Are you asking if I have multiple installations of lxml? In the folder <code>C:\Python33\Lib\site-packages</code> there are the subfolders <code>lxml</code> and <code>lxml-3.4.4.dist-info</code>.</span>
<span class="comment-copy">Can you do - <code>import sys; sys.version</code> inside the python terminal where you are getting the library import error.</span>
<span class="comment-copy">@AnandSKumar it says 3.3.5. But when I do <code>import lxml</code> from command line python it works.</span>
<span class="comment-copy">how are you running the script? can you add the scrpt as well?</span>
<span class="comment-copy">"Configure the Python Launcher for Windows to use 3.3.5 as default:" I can't figure out how to do this. I've added <code>#! python3</code> and <code>#! C:\python33\python.exe</code> and I tried following <a href="http://www.7tutorials.com/how-set-your-default-programs-windows-7" rel="nofollow noreferrer">these instructions</a> but I can't get it to use python 3 interpreter by default.</span>
<span class="comment-copy">Don't follow those instructions -- follow the Python-specific instructions in the installer. There's a reason I linked 'em.</span>
<span class="comment-copy">you can also, of course, use <code>ftype</code> to associate Python files with <code>py.exe</code>.</span>
<span class="comment-copy">That <code>#! python3</code> doesn't work means that your current association is to (the 2.x) <code>python.exe</code> and not <code>py.exe</code>. You could also rerun the 3.3.5 installer and be sure that you have the launcher checked as an option.</span>
<span class="comment-copy"><code>Python.File</code> should run python.exe (or py.exe), not pythonw.exe (or pyw.exe). The latter is typically associated with .pyw scripts and the <code>Python.NoConFile</code> file type.</span>
