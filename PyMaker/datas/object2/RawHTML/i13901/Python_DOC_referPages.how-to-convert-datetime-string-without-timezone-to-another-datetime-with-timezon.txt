<div class="post-text" itemprop="text">
<p>I can't seem to figure out how to convert a datetime string to another datetime string with timezone. </p>
<p>Here's the example. </p>
<p><code>07/27/2015:06:00 AM</code> to <code>20150727060000 -0400</code></p>
<p>The default timezone would be EST. </p>
<p>Here's my code so far.</p>
<pre><code>from datetime import datetime, timedelta
def _to_datetime(air_date, air_time):
    schedule_time = '{}:{}'.format(air_date, air_time)
    return datetime.strptime(schedule_time,'%m/%d/%Y:%I:%M %p')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>dateutil</code> to add the <code>tzinfo</code> to the <code>datetime</code> object.</p>
<pre><code>from datetime import datetime, timedelta
from dateutil import tz

AmericaNewYorkTz = tz.gettz('America/New_York')

def _to_datetime(air_date, air_time):
    schedule_time = '{}:{}'.format(air_date, air_time)
    return datetime.strptime(schedule_time,'%m/%d/%Y:%I:%M %p').replace(tzinfo=AmericaNewYorkTz)

dt = _to_datetime('07/27/2015', '06:00 AM')
print('DateTime:', dt)
# DateTime: 2015-07-27 06:00:00-04:00
</code></pre>
<p>or as <a href="https://stackoverflow.com/users/4279/j-f-sebastian">J.H. Sebastian</a> pointed out, you can use <code>pytz</code></p>
<pre><code>from datetime import datetime, timedelta
from pytz import timezone

AmericaNewYorkTz = timezone('America/New_York')

def _to_datetime(air_date, air_time):
    schedule_time = '{}:{}'.format(air_date, air_time)
    naiveDateTime = datetime.strptime(schedule_time,'%m/%d/%Y:%I:%M %p') 
    localizedDateTime = AmericaNewYorkTz.localize(naiveDateTime, is_dst=None)
    return localizedDateTime

dt = _to_datetime('05/27/2015', '06:00 AM')
print('DateTime:', dt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>pytz</code> module to work with timezones in Python. To get the local timezone as <code>pytz</code> tzinfo object, you could use <code>tzlocal</code> module:</p>
<pre><code>from tzlocal import get_localzone # $ pip install tzlocal

naive = _to_datetime('07/27/2015', '06:00 AM')
aware = get_localzone().localize(naive, is_dst=None)
print(aware.strftime('%Y%m%d%H%M%S %z'))
# -&gt; 20150727060000 -0400
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add the time zone to the parsed string with <code>%z</code>. This will give it a <a href="https://docs.python.org/3/library/datetime.html#datetime.tzinfo" rel="nofollow"><code>tzinfo</code></a> attribute:</p>
<pre><code>from datetime import datetime, timedelta
def _to_datetime(air_date, air_time):
    schedule_time = '{}:{}'.format(air_date, air_time)
    return datetime.strptime(schedule_time + ' -0400', '%m/%d/%Y:%I:%M %p %z')
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; datetime.strptime('03/19/2015:03:00 PM -0400','%m/%d/%Y:%I:%M %p %z')
datetime.datetime(2015, 3, 19, 15, 0, tzinfo=datetime.timezone(datetime.timedelta(-1, 72000)))
</code></pre>
</div>
<span class="comment-copy">I believe it's <code>%z</code>.</span>
<span class="comment-copy">But the input doesn't have any timezone. The input doesn't have any timezone and the output I want it with EST timezone.</span>
<span class="comment-copy">Then you need to indicate it in some way. How else is it supposed to determine the time zone from a plain string?</span>
<span class="comment-copy"><a href="https://gist.github.com/zed/3838828" rel="nofollow noreferrer"><code>dateutil</code> may fail</a> with timezones that observe DST. <a href="http://stackoverflow.com/a/31686932/4279">Use <code>pytz</code> instead</a>.</span>
<span class="comment-copy"><code>.replace()</code> should not be used either. Instead, <code>localize()</code> or <code>normalize()</code> on the timezone object should be used.</span>
