<div class="post-text" itemprop="text">
<p>I'm trying to get comfortable with mocking in Python and I'm stumbling while trying to mock the following function.</p>
<p><code>helpers.py</code></p>
<pre><code>from path import Path

def sanitize_line_ending(filename):
    """ Converts the line endings of the file to the line endings
        of the current system.
    """
    input_path = Path(filename)

    with input_path.in_place() as (reader, writer):
        for line in reader:
            writer.write(line)
</code></pre>
<p><code>test_helpers.py</code></p>
<pre><code>@mock.patch('downloader.helpers.Path')
def test_sanitize_line_endings(self, mock_path):
    mock_path.in_place.return_value = (1,2)
    helpers.sanitize_line_ending('varun.txt')
</code></pre>
<p>However I constantly get the following error:</p>
<p><code>ValueError: need more than 0 values to unpack</code></p>
<p>Given that I've set the return value to be a tuple, I don't understand why Python is unable to unpack it.</p>
<p>I then changed my code to have <code>test_sanitize_line_endings</code> store print return value of <code>input_path.in_place()</code> and I can see that the return value is a <code>MagicMock</code> object. Specifically it prints something like
<code>&lt;MagicMock name='Path().in_place()' id='13023525345'&gt;</code>
If I understand things correctly, what I want is to have <code>mock_path</code> be the MagicMock which has an in_place function that returns a tuple.</p>
<p>What am I doing wrong, and how can I go about correctly replacing the return value of <code>input_path.in_place()</code> in <code>sanitize_line_ending</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>After much head scratching and attending a meetup I finally came across this <a href="http://alexmarandon.com/articles/python_mock_gotchas/" rel="nofollow">blog post</a> that finally solved my issue.</p>
<p>The crux of the issue is that I was not mocking the correct value. Since I want to replace the result of a function call the code I needed to have written was:</p>
<pre><code>@mock.patch('downloader.helpers.Path')
def test_sanitize_line_endings(self, mock_path):
    mock_path.return_value.in_place.return_value = (1,2)
    helpers.sanitize_line_ending('varun.txt')
</code></pre>
<p>This correctly results in the function being able to unpack the tuple, it then immediately fails since like @didi2002 mentioned this isn't a context manager. However I was focussed on getting the unpacking to work, and after I was able to achieve that replaced the tuple with a construct with the appropriate methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>I struggled with this error <code>ValueError: need more than 0 values to unpack</code> for several hours. But the problem was not in the way I set the mock up (the correct way was described by @varun-madiath <a href="https://stackoverflow.com/a/31847058/1407255">here</a>).</p>
<p>It was in using <code>@mock.patch()</code> decorator:</p>
<p><code>@mock.patch('pika.BlockingConnection')
@mock.patch('os.path.isfile')
@mock.patch('subprocess.Popen')
def test_foo(self, **mocked_connection**, mock_isfile, **mock_popen**):</code></p>
<p>The order of parameters must be reversed! See <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer">python docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To be valid, the return value of input_path.in_place() must be an object that has an __enter__ method that returns a tuple.</p>
<p>This is a (very verbose) example:</p>
<pre><code>def test():
    context = MagicMock()
    context.__enter__.return_value = (1, 2)

    func = MagicMock()
    func.in_place.return_value = context

    path_mock = MagicMock()
    path_mock.return_value = func

    with patch("path.Path", path_mock):
        sanitize_line_ending("test.txt")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this for return tuple from mocked function:</p>
<pre><code>ret = (1, 2)
type(mock_path).return_value = PropertyMock(return_value = ret)
</code></pre>
</div>
<span class="comment-copy">type(mock_path).return_value = PropertyMock(return_value = (1, 2))</span>
