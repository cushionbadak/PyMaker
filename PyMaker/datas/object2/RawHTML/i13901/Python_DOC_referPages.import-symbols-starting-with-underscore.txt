<div class="post-text" itemprop="text">
<p>I'm writing a simple Python library in which I have several "private" functions starting with underscore:</p>
<pre><code>def _a():
    pass

def _b():
    pass

def public_interface_call():
    _a()
    _b()
</code></pre>
<p>This way my library users can simply do <code>from MyLib.Module import *</code> and their namespace won't be cluttered with implementation detail.</p>
<p>However I'm also writing unit tests in which I'd love to test these functions separately and simple importing <em>truly all</em> symbols from my module would be very handy. Currently I'm doing <code>from Mylib.Module import _a _b public_interface_call</code> but I wonder if there's any better/quicker/cleaner way to achieve what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if it was a blackout or something when I wrote that question but today I realized (inspired by <a href="https://stackoverflow.com/questions/31519815/import-symbols-starting-with-underscore#comment51001138_31519815">Underyx's comment</a>) that I can simply do this:</p>
<pre><code>import MyLib.Module

MyLib.Module._a()
MyLib.Module._b()
</code></pre>
<p>Or even to shorten things a little (because I'm a lazy bastard):</p>
<pre><code>import MyLib.Module as mm

mm._a()
mm._b()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow">docs</a>,</p>
<blockquote>
<p>There is even a variant to import all names that a module defines:<br/>
<code>from fibo import *</code><br/>
  ...<br/>
  This imports all names except those beginning with an underscore (_).</p>
</blockquote>
<p>Not sure why this is the case however.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are not making some serious program, you can try this</p>
<pre class="lang-py prettyprint-override"><code>import somemodule
vars = {name: getattr(somemodule, name) for name in
            dir(somemodule) if not name.startswith('__')}
globals().update(vars)
del vars, somemodule
</code></pre>
</div>
<span class="comment-copy">So what's wrong exactly with <code>from Mylib.Module import _a</code>?</span>
<span class="comment-copy">Usage of <code>from … import *</code> is generally considered a pretty bad practice. What I use instead is usually <code>from … import public_interface_call</code> in actual code, and <code>import …</code> for unit tests.</span>
<span class="comment-copy">From a TDD point of view, unit testing "private" methods has a tiny bit of code smell. This isn't a hard and fast rule, but you should really be testing the interfaces of an object. If you find yourself needing to test the non-interface methods, then you probably need to consider that maybe they shouldn't be part of the class at all. I realize these underscored functions aren't necessarily part of a class, but the same logic applies.</span>
<span class="comment-copy">@JoelCornett, notice that it is not about class-methods but about module functions. Also I consider testing private functions as absolutely necessary and not just the API. They are the smallest part of your code and testing should not run your full application and test every possibility but rather small pieces. Btw. what can happen? <i>exclusively</i> testing private functions is of course wrong, but as the OP writes, he wants to test all functions.</span>
<span class="comment-copy">This is the case because modules with a leading underscore are considered private, e.g. should not be used outside of the package. If you really want, you can. But in other languages, these functions would be strictly private, meaning you can't even access them from outside. It's a great thing that import * does not import them.</span>
