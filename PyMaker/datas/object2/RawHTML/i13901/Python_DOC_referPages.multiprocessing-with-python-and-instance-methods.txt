<div class="post-text" itemprop="text">
<p>I'm using <code>scikit-learn</code> to train a <code>KernelDensity</code> with some "advanced" parameters. When evaluating <code>score_samples</code> after an initial fit, the processing takes a long time, and having multiple cores available I was hoping to get some speed improvements. <code>score_samples</code> (taking any length of a sample vector) should be simple to parallelize.</p>
<p>Until now, I tried <code>multiprocessing</code> to get things working. If I run my script (I'm using <code>Pool.map()</code>) I get the error that an instance method is not pickleable.</p>
<p>This is quite obvious, but using sklearn and relying heavily on instance methods, I can't change this behavoiur.</p>
<p>Is there any way to have any sort of multiprocessing that works with sklearn (and instance methods)? I don't mind if python copies the entire memory belonging to the main process (that's manageable) or if I need to submit each block to <code>score_samples</code> from a master program (not elegant, but would do the job).</p>
<p>Any suggestions where I should look?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm just going to guess you're needing to store thread specific state and is why you were wanting to create a processing pool. I'm not sure if this will work with scikit but I'd use threading.local(). It sounds like you're pretty familiar with Python but here is a link <a href="https://docs.python.org/3/library/threading.html#thread-local-data" rel="nofollow">https://docs.python.org/3/library/threading.html#thread-local-data</a> if it helps any.</p>
<p>I took a look at sci-kit and there docs. Have you tried using joblib/joblib.parallel? </p>
</div>
<span class="comment-copy">I'm not familiar with working with scikit but are you attempting to store thread specific information and is why you were using a processing pool?</span>
<span class="comment-copy">I'm author of a serializer (called <code>dill</code>) that can pickle instance methods.  I'm also author or a fork of multiprocessing (called <code>multiprocess</code>) that uses <code>dill</code>.  So, if scikit-learn can use either of those, then you should be able to do what you want.  If that's a "no-go", then if you can put your instance in a different file from the <code>Pool</code>, and <code>multiprocessing</code> should be able to handle it by serializing a reference to the method's namespace.</span>
<span class="comment-copy">Found some other references to dill, that could work. Will try this as soon as possible. @Obj3ctiv3_C_88: No thread specific information needs to be stored and a processing pool seemed like a good idea. Not a requirement though.</span>
<span class="comment-copy">It seems now python3 does support <code>Pool.map(self.method, args)</code></span>
<span class="comment-copy">No, that's not what I need. Maybe I was unspecific with my question, but storing thread local values is not (absolutely) necessary.</span>
<span class="comment-copy">@Maaatt Updated answer, let me know if it needs a little clarification.</span>
<span class="comment-copy">Hello joblib by itself  didn't improve much unfortunately. With everything people mentioned, I ended up a) upgrading to python3.5, using dill (awesome!) and migrating the whole analysis stuff (code and data) to a linux box and using fork. I probably reinvented the wheel, but at least it's working. Problem solved... :-)</span>
