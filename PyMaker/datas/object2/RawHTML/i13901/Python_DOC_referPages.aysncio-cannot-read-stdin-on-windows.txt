<div class="post-text" itemprop="text">
<p>I'm trying to read stdin asynchronously on Windows 7 64-bit and Python 3.4.3</p>
<p>I tried this inspired by an <a href="https://stackoverflow.com/questions/25351999/what-file-descriptor-object-does-python-asyncios-loop-add-reader-expect#answer-25352042">SO answer</a>:</p>
<pre><code>import asyncio
import sys


def reader():
    print('Received:', sys.stdin.readline())


loop = asyncio.get_event_loop()
task = loop.add_reader(sys.stdin.fileno(), reader)
loop.run_forever()
loop.close()
</code></pre>
<p>However, it raises an <code>OSError: [WInError 100381] An operation was attempted on something that is not a socket</code>. </p>
<p>Could a file-like object like <code>stdin</code> be wrapped in a class to give it the API of a socket? I have <a href="https://stackoverflow.com/questions/31511563/file-to-socket-adapter-in-python">asked this question separately</a>, but if the solution is simple please answer here.</p>
<p>Assuming that I cannot wrap a file-like object to make it a socket, I tried using streams as inspired by <a href="https://gist.github.com/nathan-hoad/8966377" rel="nofollow noreferrer">this gist</a>:</p>
<pre><code>import asyncio
import sys


@asyncio.coroutine
def stdio(loop):
    reader = asyncio.StreamReader(loop=loop)
    reader_protocol = asyncio.StreamReaderProtocol(reader)
    yield from loop.connect_read_pipe(lambda: reader_protocol, sys.stdin)


@asyncio.coroutine
def async_input(loop):
    reader = yield from stdio(loop)
    line = yield from reader.readline()
    return line.decode().replace('\r', '').replace('\n', '')


@asyncio.coroutine
def main(loop):
    name = yield from async_input(loop)
    print('Hello ', name)


loop = asyncio.get_event_loop()
loop.run_until_complete(main(loop))
loop.close()
</code></pre>
<p>And that raises a <code>NotImplementedError</code> in <code>asyncio.base_events._make_read_pipe_transport</code></p>
<p>Please advise how to read <code>stdin</code> using <code>asyncio</code> on Windows...</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>NotImplementedError</code> exception is raised because the <a href="https://docs.python.org/3/library/asyncio-eventloop.html#connect-pipes" rel="noreferrer">connect pipes coroutines</a> are not supported by the <code>SelectorEventLoop</code>, which is the default event loop set on <code>asyncio</code>. You need to use a <a href="https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.ProactorEventLoop" rel="noreferrer"><code>ProactorEventLoop</code></a> to support pipes on Windows. However, it would still not work because apparently the <code>connect_read_pipe</code> and <code>connect_write_pipe</code> functions doesn't support <code>stdin</code>/<code>stdout</code>/<code>stderr</code> or files in Windows as Python 3.5.1.</p>
<p>One way to read from <code>stdin</code> with an asynchronous behavior is using a thread with the loop's <code>run_in_executor</code> method. Here is a simple example for reference:</p>
<pre><code>import asyncio
import sys

async def aio_readline(loop):
    while True:
        line = await loop.run_in_executor(None, sys.stdin.readline)
        print('Got line:', line, end='')

loop = asyncio.get_event_loop()
loop.run_until_complete(aio_readline(loop))
loop.close()
</code></pre>
<p>In the example the function <code>sys.stdin.readline()</code> is called within another thread by the <code>loop.run_in_executor</code> method. The thread remains blocked until <code>stdin</code> receives a linefeed, in the mean time the loop is free to execute others coroutines if they existed.</p>
</div>
<span class="comment-copy">Hm, but this seems to be blocking, right? Any way to get this non-blocking?</span>
<span class="comment-copy">@masi <code>aio_readline()</code> is non-blocking, the program by itself is blocking by using <code>run_until_complete()</code>. But you should only use the <code>await loop.run_in_executor(None, sys.stdin.readline)</code> part in your application. The rest is just to exemplify the usage.</span>
