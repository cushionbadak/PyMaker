<div class="post-text" itemprop="text">
<p>I have 23 bits represented as a string, and I need to write this string to a binary file as 4 bytes. The last byte is always 0. The following code works (Python 3.3), but it doesn't feel very elegant (I'm rather new to Python and programming). Do you have any tips of making it better? It seems a for-loop might be useful, but how do I do the slicing within the loop without getting a IndexError? Note that that when I extract the bits into a byte, I reverse the bit-order. </p>
<pre><code>from array import array

bin_array = array("B")
bits = "10111111111111111011110"    #Example string. It's always 23 bits
byte1 = bits[:8][::-1]
byte2 = bits[8:16][::-1]
byte3 = bits[16:][::-1]
bin_array.append(int(byte1, 2))
bin_array.append(int(byte2, 2))
bin_array.append(int(byte3, 2))
bin_array.append(0)

with open("test.bnr", "wb") as f:
    f.write(bytes(bin_array))

# Writes [253, 255, 61, 0] to the file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can treat it as an int, then create the 4 bytes as follows:</p>
<pre><code>&gt;&gt;&gt; bits = "10111111111111111011110"
&gt;&gt;&gt; int(bits[::-1], 2).to_bytes(4, 'little')
b'\xfd\xff=\x00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/struct.html#module-struct" rel="nofollow noreferrer"><code>struct</code></a> module was designed for exactly this sort of thing â€” consider the following in which the conversion to bytes has been broken down into some unnecessary intermediate steps to make understanding it clearer:</p>
<pre><code>import struct

bits = "10111111111111111011110"  # example string. It's always 23 bits
int_value = int(bits[::-1], base=2)
bin_array = struct.pack('i', int_value)
with open("test.bnr", "wb") as f:
    f.write(bin_array)
</code></pre>
<p>A harder-to-read, but shorter, way would be:</p>
<pre><code>bits = "10111111111111111011110"  # example string. It's always 23 bits
with open("test.bnr", "wb") as f:
    f.write(struct.pack('i', int(bits[::-1], 2)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from array import array

bin_array = array("B")
bits = "10111111111111111011110"

bits = bits + "0" * (32 - len(bits))  # Align bits to 32, i.e. add "0" to tail
for index in range(0, 32, 8):
    byte = bits[index:index + 8][::-1]
    bin_array.append(int(byte, 2))

with open("test.bnr", "wb") as f:
    f.write(bytes(bin_array))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can perform the split in one line using <a href="http://docs.python.org/3.3/library/re.html#re.findall" rel="nofollow"><code>re.findall</code></a> method:</p>
<pre><code>&gt;&gt;&gt;bits = "10111111111111111011110"
&gt;&gt;&gt;import re
&gt;&gt;&gt;re.findall(r'\d{1,8}', bits)
['10111111', '11111111', '1011110']
</code></pre>
<p>As an algorithm, you can pad <code>bits</code> to length 32 and then use <code>re.findall</code> method to group it in octects:</p>
<pre><code>&gt;&gt;&gt; bits
'10111111111111111011110000000000'
&gt;&gt;&gt; re.findall(r'\d{8}', bits)
['10111111', '11111111', '10111100', '00000000']
</code></pre>
<p>Your code would be like this:</p>
<pre><code>import re
from array import array

bin_array = array("B")
bits = "10111111111111111011110".ljust(32, '0')  # pad it to length 32

for octect in re.findall(r'\d{8}', bits): # split it in 4 octects
    bin_array.append(int(octect[::-1], 2)) # reverse them and append it

with open("test.bnr", "wb") as f:
    f.write(bytes(bin_array))
</code></pre>
</div>
<span class="comment-copy">+1 I loved this. Too bad Python2.7 doesn't have that feature</span>
<span class="comment-copy">@Jon That is... amazing. Is it possbile to go the other way? Something like: <code>int.from_bytes(b'\xfd\xff=\x00', 'little')</code> and get <code>"10111111111111111011110"</code></span>
<span class="comment-copy">@Olav, yup - format it appropriately: <code>format(int.from_bytes(b'\xfd\xff=\x00', 'little'), '023b')[::-1]</code></span>
<span class="comment-copy">This question gets asked a lot of times on this site, but this is the only reasonable solution out of any of the answers thank you</span>
<span class="comment-copy">@YungGun: <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>int.to_bytes()</code></a> wasn't added to Python until version 3.2, so for compatibility with current and older versions of the language using the <code>struct</code> module, as shown in <a href="https://stackoverflow.com/a/21221295/355230">my answer</a>, might be preferable since it will work in both Python 2.x and 3.x.</span>
<span class="comment-copy">The padding would be more explicit as <code>bits = "10111111111111111011110".ljust(32, '0')</code></span>
<span class="comment-copy">@JonClements Absolutely, thanks for pointing out!</span>
