<div class="post-text" itemprop="text">
<p>I have a complex permutation problem that I'm finding really hard to code.</p>
<p>Bear with me, this might look a little ugly.</p>
<p>I have something of this form:</p>
<pre><code>L = [ [[(1, 2)], [(1, 2),(1, 3)]], [[(2, 3)]] ]
</code></pre>
<p>I want to output all "permutations" like this:</p>
<pre><code>[ [(1,2),(2,3)], [(2,3),(1,2)], [(1,2),(1,3),(2,3)], [(2,3),(1,2),(1,3)] ]
</code></pre>
<p>Intuitively, I need all orderings of the tuples contained in the lists (with no repetition). However, tuples within the same list cannot be together. E.g. For [[(1, 2)], [(1, 2),(1, 3)]], (1,2) and (1,2),(1,3) are in the same list. So an element in the output cannot be (1,2)(1,3)(1,2).</p>
<p>I have some messy code written that does the job, but will require cleanup of the output:</p>
<pre><code>output=[]
for x in input:
    for y in x:
        a=[]
        for x1 in input:
            if x!=x1:
                for y1 in x1:
                    a.append(list(permutations([y,y1],len([y,y1]))))
        output.append(a)
</code></pre>
<p>This would be sufficient, but I also need to be able to do it for inputs like this:</p>
<pre><code>[[[(1, 2)], [(1, 2), (1, 3)]], [[(2, 3)]], [[(4,5),(6,7)]]
</code></pre>
<p>Thus, elements like this would be incuded in the output:</p>
<pre><code>[(4,5),(6,7),(1,2),(2,3)]
</code></pre>
<p>Anybody have any idea how I should approach this? Or any tips?</p>
</div>
<div class="post-text" itemprop="text">
<p>I might be wrong, but from what I understand, you want to do the cartesian product of several ensembles (whose element are themselves ensembles) :</p>
<p>[[(1, 2)], [(1, 2),(1, 3)]] X [[(2, 3)]]</p>
<p>Then for each element of this cartesian product, make all the permutations of the elements it contains, in this example, the elements of the cartesian product are :</p>
<p>([(1, 2)],[(2, 3)])</p>
<p>([(1, 2),(1, 3)], [(2, 3)])</p>
<p>And finally take all the permutations of each elements :</p>
<p>permutations of first element : ([(1, 2)],[(2, 3)]), ([(2, 3)],[(1, 2)])</p>
<p>permutations of second element : ([(1, 2),(1, 3)], [(2, 3)]), ([(2, 3)],[(1, 2),(1, 3)])</p>
<p>If this is what you want, then you can do it with <code>product</code> and <code>permutations</code> from the <code>itertools</code> module (you also need <code>chain</code> to properly turn each permutation in a list of tuples and get the exact output you want) :</p>
<pre><code>from itertools import product, permutations, chain
L = [ [[(1, 2)], [(1, 2),(1, 3)]], [[(2, 3)]] ]

for element in product(*L):
    for permutation in permutations(element):
        print(list(chain(*permutation)))



[(1, 2), (2, 3)]
[(2, 3), (1, 2)]
[(1, 2), (1, 3), (2, 3)]
[(2, 3), (1, 2), (1, 3)]
</code></pre>
<p>You can directly get the list of 'permutations' with list comprehensions :</p>
<pre><code>result = [list(chain(*permutation)) for element in product(*L) for permutation in permutations(element)]
[[(1, 2), (2, 3)],
 [(2, 3), (1, 2)],
 [(1, 2), (1, 3), (2, 3)],
 [(2, 3), (1, 2), (1, 3)]]
</code></pre>
</div>
<span class="comment-copy">This question is quite unclear to me. What do you mean by "permutation", and of which part of the list? What is the significance of the several layers of nesting in the list? What order should the output be in, and how should it be grouped? Can the lists be nested to arbitrary depths? At the moment I can't make head nor tail of what this question is asking and I somewhat doubt anyone else can either.</span>
<span class="comment-copy">Agree with Score_Under. In the second part of the question it looks like you're just trying to get all the unique tuples.</span>
<span class="comment-copy">I do not understand the problem.  It looks like there are base elements that are lists of two integers and maybe you want all permutations of them 1, 2 and 3 at a time without repetition but counting different orderings.  A way to do that is to first create a list of all the uniqe base elements then list their permutations in groups of 1, 2 and 3.  This is easy to do with itertetools.permutations since it takes an argument specifying the group length (called r ffor the tuple length). See <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.permutations</a>.</span>
<span class="comment-copy">@ate50eggs  It is complex and without the accompanying mathematical intuition and visual representation that is obtained from the math background surrounding it. I will go back and try to make it clearer.  Unique tuples is related, but not quite.</span>
<span class="comment-copy">@TrisNefzger Intuitively, I need all orderings of the tuples contained in the lists (with no repetition). However, tuples within the same list cannot be together. E.g. For [[(1, 2)], [(1, 2),(1, 3)]], (1,2) and (1,2),(1,3) are in the same list. So an element in the output cannot be (1,2)(1,3)(1,2).</span>
<span class="comment-copy">Excellent answer. If this doesn't solve the problem completely, it should at least give me a good starting point. Greatly appreciated.</span>
