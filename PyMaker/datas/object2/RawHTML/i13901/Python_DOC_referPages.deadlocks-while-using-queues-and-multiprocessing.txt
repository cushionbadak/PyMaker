<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/26738648/script-using-multiprocessing-module-does-not-terminate">Script using multiprocessing module does not terminate</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I don't understand this part of the multiprocessing doc (<a href="https://docs.python.org/3/library/multiprocessing.html#examples" rel="nofollow">python.org</a>) and I quote:</p>
<p>"An example which will deadlock is the following:</p>
<pre><code>from multiprocessing import Process, Queue

def f(q):
    q.put('X' * 1000000)

if __name__ == '__main__':
    queue = Queue()
    p = Process(target=f, args=(queue,))
    p.start()
    p.join()                    # this deadlocks
    obj = queue.get()
</code></pre>
<p>"
First, why does it block ?
And more surprising, it works perfectly when I try with some smaller values than 1000000 in the definition of f (it works with 10,100,1000,10000, but not with 100000).</p>
<p>Thanks a lot for your help !</p>
</div>
<div class="post-text" itemprop="text">
<p>This example illustrates the behaviour described in <a href="https://docs.python.org/3/library/multiprocessing.html#pipes-and-queues" rel="noreferrer">17.2.2.2.</a></p>
<blockquote>
<p>if a child process has put items on a queue (and it has not used JoinableQueue.cancel_join_thread), then that process will not terminate until all buffered items have been flushed to the pipe.
  This means that if you try joining that process you may get a deadlock unless you are sure that all items which have been put on the queue have been consumed.</p>
</blockquote>
</div>
<span class="comment-copy">Thanks, I understood with both your explanation and the duplicate post. What I don't get is why there is a buffer which gets flushed, and what sets the amount of data after which the data is buffered. But now I can program in peace :)</span>
