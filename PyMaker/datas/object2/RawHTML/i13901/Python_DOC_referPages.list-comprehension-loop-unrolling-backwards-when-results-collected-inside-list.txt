<div class="post-text" itemprop="text">
<p>This is a repost from earlier where I got the answer, but I just am not clear on syntax and would like someone to explain what is going on else I'll just memorize the "rule" here.</p>
<p>This expression works as intended, but gives each character in the matrix back in a single list:</p>
<pre><code>[char for line in grid for i,char in enumerate(line) if len(line[i:])&gt;3]
</code></pre>
<p>If I want to have each character in the matrix remain in it's corresponding list (or row here), I would expect the below code to work (to preserve loop unrolling order where inner loop [rightmost loop in a comprehension]</p>
<pre><code>[[char for line in grid] for i,char in enumerate(line) if len(line[i:])&gt;3]
</code></pre>
<p>This gives a NameError not defined... so I've learned the appropriate structure is:</p>
<pre><code>[[char for i,char in enumerate(line) if len(line[i:])&gt;3] for line in grid]
</code></pre>
<p>I use comprehensions all the time, and I guess I just haven't encountered this yet so it caught me by surprise, but it seems creating the list within the comprehension requires us to essentially reverse the loop order where now the rightmost for statement actually executes first, rather than the left, or reversed from normal list comp syntax.  </p>
<p>I've found several examples online and in books (e.g. squaring every element of a matrix) that confirm the syntax, but they all gloss over the fact that the for loops suddenly reverse order when a list is used to accumulate results inside the comprehension.</p>
<p>Is it a fair statement that for statements are not always executed left/right in a comprehension, given the above?</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax of comprehensions is (for Python 3.x) from <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow">documentation</a> -</p>
<blockquote>
<p>comprehension ::=  expression comp_for</p>
<p>comp_for      ::=  "for" target_list "in" or_test [comp_iter]</p>
<p>comp_iter     ::=  comp_for | comp_if</p>
<p>comp_if       ::=  "if" expression_nocond [comp_iter]</p>
</blockquote>
<p>Where <code>expression</code> can be any expression like - a literal or a mathematical expression or a function call or a tuple or list , or even another list comprehension. Any expression from the list of expressions <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow">here</a>.</p>
<p><code>for</code> loops within a single list comprehension are always executed from left to right , as you can see from the above syntax as well. But we can have nested list comprehensions (that is list comprehension as the expression for another list comprehension, so on) .</p>
<p>When you do - </p>
<pre><code>[[char for i,char in enumerate(line) if len(line[i:])&gt;3] for line in grid]
</code></pre>
<p>There are two list comprehensions (since you are creating a list of lists) a comprehension to create the outer list, and a comprehension to create the inner list.</p>
<p>So the outer list comprehension looks like -</p>
<pre><code>[&lt;inner list comprehension&gt; for line in grid]
</code></pre>
<p>And the inner list comprehension is -</p>
<pre><code>[char for i,char in enumerate(line) if len(line[i:])&gt;3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>no this is an instance of a nested list comprehension, it is fundamentally different</p>
<pre><code>[char for line in grid for i,char in enumerate(line) if len(line[i:])&gt;3]
</code></pre>
<p>is the equivelent of </p>
<pre><code> for line in grid:
     for i,char in enumerate(line):
         if len(line[i:]) &gt; 3:
            new_list.append(char)
</code></pre>
<p>your second example </p>
<pre><code>[[char for i,char in enumerate(line) if len(line[i:])&gt;3] for line in grid]
</code></pre>
<p>is the equivelent of</p>
<pre><code>for line in grid:
    new_list.append([char for i,char in enumerate(line) if len(line[i:])&gt;3])
</code></pre>
<p>within ANY <strong>single</strong> list comprehension, the for statements are <strong>always</strong> from left to right.</p>
</div>
<span class="comment-copy">Could you add some sample inputs and expected outputs?</span>
<span class="comment-copy">no you are doing a new list comprehension inside the outer list comprehension, within any list comprehensions the for statements are always executed left to right</span>
<span class="comment-copy">Thank you both Joran and @Anand - gave it to Anand only because he was a touch faster.  These explanations completely make sense, I think I just needed some more coffee this morning.</span>
<span class="comment-copy">actually I was faster :P but its cool it really doesnt matter :)</span>
<span class="comment-copy">Yah you did comment first... sorry I always feel weird when i have to pick between multiple correct answers!</span>
