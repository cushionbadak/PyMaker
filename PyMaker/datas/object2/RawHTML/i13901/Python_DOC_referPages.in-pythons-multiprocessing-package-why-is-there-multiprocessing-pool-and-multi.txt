<div class="post-text" itemprop="text">
<p>While learning about Python's <code>multiprocessing</code> package (for <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow">Python 3.4</a>), I noticed <code>multiprocessing.Pool</code> is defined in the Class <code>BaseContext</code> in <code>context.py</code>.  This definition is </p>
<pre><code>   def Pool(self, processes=None, initializer=None, initargs=(),
         maxtasksperchild=None):
    '''Returns a process pool object'''
    from .pool import Pool
    return Pool(processes, initializer, initargs, maxtasksperchild,
                context=self.get_context())
</code></pre>
<p>Thus, it ends up calling <code>multiprocessing.pool.Pool</code> defined in <code>pool.py</code>.</p>
<p>Why does the <code>multiprocessing</code> package define both <code>multiprocessing.Pool</code> and <code>multiprocessing.pool.Pool</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>context.py</code> contains OS-dependent code. The <code>Pool</code> and many other values are
defined differently depending on whether <code>sys.platform == 'win32'</code> or not.</p>
<p>The <code>pool.py</code> module contains code related the creation of a Pool <em>given a
context</em>. </p>
<p>By organizing the code in this way, the developer manages to write <code>pool.py</code> in an OS-agnostic way. There are no <code>if sys.platform ...</code> statements in pool.py, for example.</p>
<hr/>
<p>The <code>__init__.py</code> contains:</p>
<pre><code>globals().update((name, getattr(context._default_context, name))
                 for name in context._default_context.__all__)
__all__ = context._default_context.__all__
</code></pre>
<p>which copies values from <code>context._default_context</code> into the <code>multiprocessing</code> packages' namespace. This is how <code>multiprocessing.Pool</code> gets defined.</p>
<p>As a user of the <code>multiprocessing</code> package, you are expected to access the Pool
via <code>multiprocessing.Pool</code>, although it is possible to use
<code>multiprocessing.pool.Pool</code> too.</p>
</div>
<span class="comment-copy">Maybe so you can override its pool manager with your own?</span>
