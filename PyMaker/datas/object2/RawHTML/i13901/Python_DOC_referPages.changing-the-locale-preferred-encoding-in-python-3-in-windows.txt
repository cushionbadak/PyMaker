<div class="post-text" itemprop="text">
<p>I'm using Python 3 (recently switched from Python 2). My code usually runs on Linux but also sometimes (not often) on Windows. According to Python 3 documentation for <a href="https://docs.python.org/3/library/functions.html#open" rel="noreferrer"><code>open()</code></a>, the default encoding for a text file is from <code>locale.getpreferredencoding()</code> if the <code>encoding</code> arg is not supplied. I want this default value to be <code>utf-8</code> for a project of mine, no matter what OS it's running on (currently, it's always UTF-8 for Linux, but not for Windows). The project has many many calls to <code>open()</code> and I don't want to add <code>encoding='utf-8'</code> to all of them. Thus, I want to change the locale's preferred encoding in Windows, as Python 3 sees it.</p>
<p>I found a previous question
"<a href="https://stackoverflow.com/questions/11514414/changing-the-locale-preferred-encoding">Changing the "locale preferred encoding"</a>", which has an accepted answer, so I thought I was good to go. But unfortunately, neither of the suggested commands in that answer and its first comment work for me in Windows. Specifically, that accepted answer and its first comment suggest running <code>chcp 65001</code> and <code>set PYTHONIOENCODING=UTF-8</code>, and I've tried both. Please see transcript below from my cmd window:</p>
<pre><code>&gt; py -i
Python 3.4.3 ...
&gt;&gt;&gt; f = open('foo.txt', 'w')
&gt;&gt;&gt; f.encoding
'cp1252'
&gt;&gt;&gt; exit()

&gt; chcp 65001
Active code page: 65001

&gt; py -i
Python 3.4.3 ...
&gt;&gt;&gt; f = open('foo.txt', 'w')
&gt;&gt;&gt; f.encoding
'cp1252'
&gt;&gt;&gt; exit()

&gt; set PYTHONIOENCODING=UTF-8

&gt; py -i
Python 3.4.3 ...
&gt;&gt;&gt; f = open('foo.txt', 'w')
&gt;&gt;&gt; f.encoding
'cp1252'
&gt;&gt;&gt; exit()
</code></pre>
<p>Note that even after both suggested commands, my opened file's encoding is still <code>cp1252</code> instead of the intended <code>utf-8</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of python3.5.1 this hack looks like this:</p>
<pre><code>import _locale
_locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])
</code></pre>
<p>All files opened thereafter will assume the default encoding to be <code>utf8</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>i know its a real hacky workaround, but you could redefine the <code>locale.getpreferredencoding()</code> function like so:</p>
<pre><code>import locale
def getpreferredencoding(do_setlocale = True):
    return "utf-8"
locale.getpreferredencoding = getpreferredencoding
</code></pre>
<p>if you run this early on, all files opened after (at lest in my testing on a win xp machine) open in utf-8, and as this overrides the module method this would apply to all platforms.</p>
</div>
<span class="comment-copy">Maybe it is just my style but I'd prefer to write a wrapper open() function in which you specify the encoding.</span>
<span class="comment-copy">Don't use <code>chcp 65001</code>. The Windows console does not properly support UTF-8, and it's not doing what you want anyway.  <code>locale.getpreferredencoding</code> has nothing to do with the console codepage; it's based on the Windows locale's ANSI encoding. For example, if you call Win32 <code>CreateFileA</code> (ANSI) instead of <code>CreateFileW</code> (UTF-16), the file path string gets decoded as an ANSI string (e.g. Windows-1252). Windows does not allow UTF-8 to be used as the ANSI character set, and the C runtime also doesn't allow using UTF-8 for a locale.</span>
<span class="comment-copy">@eryksun Thanks for the info, but it has too much Windows-specific jargon for me. I rarely use Windows. All I want is a way to say to either Windows 8 or to Python 3: "Dear Windows 8 / Python 3, Please be informed that all the text files on this computer should be encoded in UTF-8 without exception. Please remember this fact in the future when opening text files. Thanks."</span>
<span class="comment-copy">@walrus, no such thing exists. The native string format on Windows is UTF-16, using 16-bit <code>wchar_t</code> strings. The Windows API only supports 8-bit encodings for the legacy ANSI API, which unfortunately does not allow UTF-8. Python's preferred encoding is simply calling <a href="https://msdn.microsoft.com/en-us/library/dd318070" rel="nofollow noreferrer"><code>GetACP</code></a> to get the ANSI codepage. I sympathize with you and wish that <code>io.TextIOWrapper</code> defaulted to UTF-8 on all platforms (your assumption about Linux isn't always valid, either). As things stand you need a wrapper function, as previously suggested.</span>
<span class="comment-copy">@eryksun Your Windows details are over my head, as before. But you seem confident that there's no way to do what I want, either in Windows 8 or in Python 3. (I wouldn't have necessarily expected that it would be possible, except the previous thread I linked to gave me lots of false hope!) If you want to make an "answer" stating that this is impossible in Windows 8 and in Python 3 (except for hacks, of course), then I will accept that answer.</span>
<span class="comment-copy">Or better yet, <code>utf_8_sig</code> as it will take care of the BOM character that some Windows editors tend to inject into the files even for such an endian-neutral encoding as <code>utf8</code>.</span>
<span class="comment-copy">I tested it on python 3.5.1 and windows 7 and <a href="http://stackoverflow.com/a/34345136/4933641">have a look</a> what I ended up with.</span>
