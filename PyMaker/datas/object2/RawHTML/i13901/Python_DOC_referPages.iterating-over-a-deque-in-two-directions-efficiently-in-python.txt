<div class="post-text" itemprop="text">
<p>I have a deque, let's call it <code>deq</code>. I need to iterate over it from both ends, and I will not be modifying it at all during these iterations.</p>
<p>Naturally, I don't want to create <em>another</em> deque.
I've considered <code>reversed</code>, but I don't know if it actually creates any copies. If, for example, I were write:</p>
<pre><code>reversed_deq = reversed(deq)
</code></pre>
<p>will it reference the exact same memory locations, but simply iterate over it in reverse, without using any more memory/time?</p>
<p>That seems like the logical way to go for a double-ended queue, but I want to make sure I'm not missing anything.</p>
<p>I can't find the code for deque (usually they have a "python equivalent" of these things, but I couldn't find it), and for some reason - no matter what I run - <code>timeit</code> always gives me something between 15 and 16 ns (for everything I try to time, not just this)</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://hg.python.org/cpython/file/3.5/Modules/_collectionsmodule.c" rel="nofollow">C source</a> reversed([deque]) returns a reverse iterator, no copies or memory allocation. [deque].reverse() will reverse it in place. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#reversed" rel="nofollow noreferrer">Python 2</a> and <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer">3</a> documentation states that the <code>reversed()</code> built-in function “returns a reverse <a href="https://docs.python.org/3.4/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a>”. Although an implementation of Python may provide an implementation of <code>collections.deque.__reversed__()</code> that makes copies, there seems to be no reason why it would, since a deque is naturally iterable in both directions.</p>
</div>
<span class="comment-copy">In python you use list for deque, there is no need for anything else. Also, if you want do do something efficienly, you should not use Python for that.</span>
<span class="comment-copy">@HannesKarppila Unfortunately, I have no choice but to use Python, so I'm making the best of a bad situation. And there is no reason for me to use lists, since A. I constantly add elements to the deque, and a list gets reallocated every time, and B. I only need to access the first elements, and - at most - the last 3 elements.</span>
<span class="comment-copy">collections.deque has a built in reverse() method. When you say iterate over it from both ends do you mean iterate once in one direction, then once in the other?</span>
<span class="comment-copy">@csunday95 Yes. I've read the documentation, it says "in place" - which (from what I understand) means without needing to reallocate memory. I just want to verify that they don't also iterate over all the deque and reverse the order (since, from what I understand, each element points to the next and previous element in the implementation). As I've mentioned, I can't find the actual code for the deque, and my <code>timeit</code> function doesn't appear to work properly.</span>
<span class="comment-copy">what operation are you trying to do in both directions?</span>
<span class="comment-copy">Thank you! For some reason I failed to find the source code. Although you linked to the implementation of 3.5, I changed the link to 2.7 and it worked :)</span>
<span class="comment-copy">Ah didn't notice that, seems like something that wouldn't have changed luckily.</span>
