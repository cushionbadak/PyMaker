<div class="post-text" itemprop="text">
<p>i have a list say </p>
<pre><code> chain=[[0, 102], [1, 88], [1, 98],[1, 34],[2, 38], [2, 52],[2,15], [3, 26, 9],[3,5,6],[43, 88], [43, 98], [45, 100], [54, 9], [57, 26, 9], [62, 98]]
</code></pre>
<p>i want combine list starts with 0,1,2...etc into one by removing the repeated numbers, like [1,88,98,34], [2,38,52,15] ,[3,26,9,5,6]etc  i have tried</p>
<pre><code>c1=[]
c2=[]
for i in chain:
    for e in chain:       
        if(e!=i):
            if(i[0]==e[0]):
                c1=i
                c2=e
                c2.remove(c2[0])
                c1+=c2
                chain.remove(i)
                chain.remove(e)
                fam.append(c1)
 print(fam)
</code></pre>
<p>what i got is </p>
<pre><code> [[1, 88, 98], [2, 38, 52], [3, 26, 9, 5, 6], [16, 88, 98], [43, 88, 98]]
</code></pre>
<p>every time c1 get updated with i, it only combine two list....sorry if i am asking silly question.....please correct me.</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend a dictionary.</p>
<pre><code>result = {}
chain =  chain=[[0, 102], [1, 88], [1, 98],[1, 34],[2, 38], [2, 52],[2,15], [3, 26, 9],[3,5,6],[43, 88], [43, 98], [45, 100], [54, 9], [57, 26, 9], [62, 98]]
for item in chain:
    if item[0] in result:
        result[item[0]].append(item[1])
    else:
        result[item[0]] = [item[1]]
</code></pre>
<p> </p>
<pre><code>&gt;&gt;&gt; print(*result.items(), sep='\n')
(0, [102])
(1, [88, 98, 34])
(2, [38, 52, 15])
(3, [26, 5])
(54, [9])
(57, [26])
(43, [88, 98])
(45, [100])
(62, [98])
</code></pre>
<p>If you want, you can turn this into a <code>list</code>:</p>
<pre><code>result_list = [[k] + result[k] for k in sorted(result)]
</code></pre>
<p> </p>
<pre><code>&gt;&gt;&gt; print(*result_list, sep='\n')
[0, 102]
[1, 88, 98, 34]
[2, 38, 52, 15]
[3, 26, 5]
[43, 88, 98]
[45, 100]
[54, 9]
[57, 26]
[62, 98]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools.groupby</code></a></p>
<pre><code>from itertools import groupby
some_groups = [(key, list(val)) 
               for key, val in groupby(chain, lambda x: x[0])]

#some_groups:
#[(0, [[0, 102]]),
# (1, [[1, 88], [1, 98], [1, 34]]),
# (2, [[2, 38], [2, 52], [2, 15]]),
# (3, [[3, 26, 9], [3, 5, 6]]),
# (43, [[43, 88], [43, 98]]),
# (45, [[45, 100]]),
# (54, [[54, 9]]),
# (57, [[57, 26, 9]]),
# (62, [[62, 98]])]
</code></pre>
<p>And then you can form the results as you wish    </p>
<pre><code>results = []
for key, groups in some_groups:
    unique_vals = set(  s for sublist in groups for s in sublist[1:]   )
    results.append( [key]+ list(unique_vals) )

#results:
#[[0, 102],
# [1, 88, 98, 34],
# [2, 52, 38, 15],
# [3, 9, 26, 5, 6],
# [43, 88, 98],
# [45, 100],
# [54, 9],
# [57, 9, 26],
# [62, 98]]
</code></pre>
<h1>Update</h1>
<p>It appears the result should only contain lists that were combined from 2 or more lists. This can be fixed by checking the length before appending</p>
<pre><code>some_groups = [(key, list(val)) 
               for key, val in groupby(chain, lambda x: x[0])]
some_groups = [ (key,groups) for key,groups in some_groups if len(groups) &gt; 1 ] #remove e.g. (0, [[0, 102]] ) from some_groups  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want one list of distinct items, you should consider <code>set</code>.</p>
<pre><code>&gt;&gt;&gt; chain=[[0, 102], [1, 88], [1, 98],[1, 34],[2, 38], [2, 52],[2,15], [3, 26, 9],[3,5,6],[43, 88], [43, 98], [45, 100], [54, 9], [57, 26, 9], [62, 98]]
&gt;&gt;&gt; set(n for sublist in chain for n in sublist)
set([0, 1, 98, 3, 100, 38, 102, 9, 2, 34, 15, 6, 43, 52, 54, 57, 88, 45, 26, 62, 5])
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">This is crazy complicated where both <code>i</code> and <code>e</code> traverse the chain and you're removing things from the chain within the traversal loops.  Instead, you can rewrite this so there's one traversal, collecting elements for the new list, and without removals, which would be much easier.</span>
<span class="comment-copy">Also , are the initial lists always sorted according to the first element of the inner list?</span>
<span class="comment-copy">Hph. I was working on this exact solution when you posted first.</span>
<span class="comment-copy">Good idea, but I don't think I would stuff it all onto one line like that...</span>
<span class="comment-copy">i need only the grouped items .since list [0,102] having no other pair for grouping so it is not considered.</span>
<span class="comment-copy">that is a simple fix which can be accomplished in a number of ways, you can test <code>len(groups)</code> in the for loop and <code>continue</code> if <code>len(groups) == 1</code>. I will, however, post an alternate solution in the answer</span>
