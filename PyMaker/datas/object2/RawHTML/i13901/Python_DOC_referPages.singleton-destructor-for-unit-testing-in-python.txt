<div class="post-text" itemprop="text">
<p>I need to implement Singleton pattern in Python (2.7) and cover code with unit tests.</p>
<p>Below is the code I use:</p>
<pre><code>class Singleton(object):
    def __new__(cls):
        if not hasattr(cls, 'instance'):
             cls.instance = super(Singleton, cls).__new__(cls)
        return cls.instance
</code></pre>
<p>For unit tests to be independent, I need to implement a destructor for this class. How can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just delete the <code>instance</code> attribute:</p>
<pre><code>del Singleton.instance
</code></pre>
<p>If you are subclassing this, you could make it a class method:</p>
<pre><code>@classmethod
def clear_instance(cls):
    del cls.instance
</code></pre>
</div>
<span class="comment-copy">Thanks a lot!  Won't this cause memory leaks?</span>
<span class="comment-copy">@Emons: unless your tests leave other references to the instance around after teardown, no it doesn't.</span>
<span class="comment-copy">sadly, if any caching/memoization happens in your code, this will indeed leak. I am battling a similar problem now in which I cant manage to truly clear my context between tests because references are not a simple structure, and I dont feel like deleting python modules recursively just to clear references..</span>
<span class="comment-copy">@Danku: then you'll have to debug where you are storing another reference to this. You could use the <a href="https://docs.python.org/3/library/gc.html#gc.get_referrers" rel="nofollow noreferrer"><code>gc.get_referrers()</code> function</a>, but take into account that returns objects, not names in a namespace. Still, it can help to figure out what kind of object is still referring to your singleton.</span>
