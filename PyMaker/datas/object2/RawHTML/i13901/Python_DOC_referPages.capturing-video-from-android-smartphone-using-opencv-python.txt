<div class="post-text" itemprop="text">
<p>I have just started learning OpenCV using Python and the first tutorial starts with capturing video using either in built laptop webcam or external webcam. And as it would happen, I have neither. So I thought if it would be possible to use Camera of my Android Smartphone and then capture that video using IP for further processing.</p>
<p>My Smartphone: Moto E</p>
<p>OS: Windows 7</p>
<p>Language: Python</p>
<p>Android Application : IP Webcam</p>
<p>I have searched the net extensively but am unable to find any working solution, so can anyone please guide me on how to capture the video from my smartphone using IP Webcam.</p>
<p>Sorry for posting no code as I am just trending into this field so am completely clueless.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably much harder than what you're expecting, for a variety of reasons.</p>
<p>The first would be bandwidth. A modest stream of <em>raw</em> video (640x480 pixels, 8 bits per channel, 30 frames per second), requires a bandwidth on the order of 200mbps. While USB (2) easily reaches these speeds, you'll be hard pressed to find a wireless connection that does so reliably.</p>
<p>Now you may be thinking</p>
<blockquote>
<p>How come I can watch 1080p internet videos in my phone with no problem whatsoever then?</p>
</blockquote>
<p>Virtually all videos transmitted over a network are compressed using specialized algorithms, such as MPEG4, H.264 and VP8. These algorithms vastly reduce the bandwidth needed to transmit video.</p>
<blockquote>
<p>Great! Then I can just compress the video from my phone live and stream it to my computer</p>
</blockquote>
<p>Not so fast! There's two main problems with that. </p>
<p>The first is that, in order to achieve such a drastic reduction in amount of video data, video compressors (<em>encoders</em>) need to spend a lot of processing power crunching the video. You'll probably find that your phone doesn't have enough CPU power (or dedicated hardware) to encode video at a resolution and frame rate usable for your task.</p>
<p>If you manage to solve that <em>and</em> find a app that does the job, the second problem is that, in order to get the (encoded) video data in OpenCV, you'll need to decode it! You can find readily available software to decode video files, but for decoding a live stream of video, you'll need to program your software to perform the decoding (preferably using a library or <a href="http://answers.opencv.org/question/133/how-do-i-access-an-ip-camera/" rel="noreferrer">OpenCV itself</a>). </p>
<p>At this point, you'll be cursing and regretting you didn't spend the $15 on a webcam (but you'll have learned a lot of interesting stuff in the process :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Android 'IP Webcam' App video stream import to Python OpenCV using urllib and numpy;)</p>
<pre><code>import urllib
import cv2
import numpy as np
import time

# Replace the URL with your own IPwebcam shot.jpg IP:port
url='http://192.168.2.35:8080/shot.jpg'

while True:

    # Use urllib to get the image and convert into a cv2 usable format
    imgResp=urllib.urlopen(url)
    imgNp=np.array(bytearray(imgResp.read()),dtype=np.uint8)
    img=cv2.imdecode(imgNp,-1)

    # put the image on screen
    cv2.imshow('IPWebcam',img)

    #To give the processor some less stress
    #time.sleep(0.1) 

    if cv2.waitKey(1) &amp; 0xFF == ord('q'):
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/dheera/android-wearcamera" rel="nofollow">Here's a repo that does live broadcast of Android Video:</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This thread seams to be old but just want to add my answer. So this is how I was able to achieve the task in python 3.5, OpenCV 3.2 and android app "IP WEB CAM". The url <strong>(<a href="http://192.168.0.103:8080" rel="nofollow noreferrer">http://192.168.0.103:8080</a>)</strong> in the get function is the streaming address provided by ip web cam app.</p>
<pre><code>import requests
import numpy as np
import cv2
while True:
    img_res = requests.get("http://192.168.0.103:8080/shot.jpg")
    img_arr = np.array(bytearray(img_res.content), dtype = np.uint8)
    img = cv2.imdecode(img_arr,-1)

    cv2.imshow('frame', img)
    if cv2.waitKey(1) &amp; 0xFF == ord('q'):
        break
</code></pre>
</div>
<span class="comment-copy">try working on a recorded video (eventually captured with your smartphone). The functions are the same and you can continue your studies. Eventually buy a webcam</span>
<span class="comment-copy">@Miki will opt for that if this fails, but would hope to try this out if its possible. Thanks.</span>
<span class="comment-copy">Nice things to know, thanks for sharing. But I have a question, I am able to   stream videos from mobile to computer using Android App named, Ip Webcam, I was hoping if someone was able to capture it using opencv.</span>
<span class="comment-copy">@Mohit you can, <a href="http://answers.opencv.org/question/133/how-do-i-access-an-ip-camera/" rel="nofollow noreferrer">if you're happy recompiling OpenCV</a></span>
<span class="comment-copy">It's in c++ I am trying to do the same in python :)</span>
<span class="comment-copy">@Mohit I couldn't find a python example, but the (opencv) function names in C++ and python are generally very similar, so it should be a simple matter of reading the documentation. The hard part is probably going to be figuring out how to compile OpenCV (I vaguely recall trying to do that before and giving up after many hours of wasted effort)</span>
<span class="comment-copy">This Wikipedia article (<a href="https://en.wikipedia.org/wiki/IPhone_6" rel="nofollow noreferrer">en.wikipedia.org/wiki/IPhone_6</a>) suggests recent flavors of WiFi can support 200+ Mbps: "Wi-Fi performance has been improved with support for 802.11ac specifications, providing speeds up to 433.0581 Mbit/sâ€”which is up to 3 times faster than 802.11n,[38] along with Wi-Fi Calling support where available." Is this article wrong? Trying to understand limitations on streaming video data to a smartphone so thanks for you help!</span>
<span class="comment-copy">Thanks a bunch!</span>
<span class="comment-copy"><code>urllib</code> is no longer available. Any alternative??</span>
<span class="comment-copy">@Aashish It is not?</span>
<span class="comment-copy">@AniketChowdhury <code>urllib</code> is no longer available in Python 3.x</span>
<span class="comment-copy">@Aashish I don't think that is the case. urllib2 is not available in Python3. <a href="https://docs.python.org/3/library/urllib.html" rel="nofollow noreferrer">docs.python.org/3/library/urllib.html</a></span>
<span class="comment-copy">I agree with the answer above - "This is a very complicated task". Thus the only helpful answer is then to link to a repo where someone has written the hundreds of lines to solve the problem. And has a demo of it working. Why downvote?</span>
