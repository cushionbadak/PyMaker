<div class="post-text" itemprop="text">
<p>I have a dataset <code>df</code> of trader transactions.
I have 2 levels of for loops as follows:</p>
<pre><code>smartTrader =[]

for asset in range(len(Assets)):
    df = df[df['Assets'] == asset]
    # I have some more calculations here
    for trader in range(len(df['TraderID'])):
        # I have some calculations here, If trader is successful, I add his ID  
        # to the list as follows
        smartTrader.append(df['TraderID'][trader])

    # some more calculations here which are related to the first for loop.
</code></pre>
<p>I would like to parallelise the calculations for each asset in <code>Assets</code>, and I also want to parallelise the calculations for each trader for every asset. After ALL these calculations are done, I want to do additional analysis based on the list of <code>smartTrader</code>.</p>
<p>This is my first attempt at parallel processing, so please be patient with me, and I appreciate your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use <code>pathos</code>, which provides a fork of <code>multiprocessing</code>, you can easily nest parallel maps. <code>pathos</code> is built for easily testing combinations of nested parallel maps -- which are direct translations of nested for loops.
It provides a selection of maps that are blocking, non-blocking, iterative, asynchronous, serial, parallel, and distributed.</p>
<pre><code>&gt;&gt;&gt; from pathos.pools import ProcessPool, ThreadPool
&gt;&gt;&gt; amap = ProcessPool().amap
&gt;&gt;&gt; tmap = ThreadPool().map
&gt;&gt;&gt; from math import sin, cos
&gt;&gt;&gt; print amap(tmap, [sin,cos], [range(10),range(10)]).get()
[[0.0, 0.8414709848078965, 0.9092974268256817, 0.1411200080598672, -0.7568024953079282, -0.9589242746631385, -0.27941549819892586, 0.6569865987187891, 0.9893582466233818, 0.4121184852417566], [1.0, 0.5403023058681398, -0.4161468365471424, -0.9899924966004454, -0.6536436208636119, 0.2836621854632263, 0.9601702866503661, 0.7539022543433046, -0.14550003380861354, -0.9111302618846769]]
</code></pre>
<p>Here this example uses a processing pool and a thread pool, where the thread map call is blocking, while the processing map call is asynchronous (note the <code>get</code> at the end of the last line).</p>
<p>Get <code>pathos</code> here: <a href="https://github.com/uqfoundation" rel="nofollow">https://github.com/uqfoundation</a>
or with:
<code>
$ pip install git+https://github.com/uqfoundation/pathos.git@master
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Nested parallelism can be done elegantly with <a href="https://github.com/ray-project/ray" rel="nofollow noreferrer">Ray</a>, a system that allows you to easily parallelize and distribute your Python code.</p>
<p>Assume you want to parallelize the following nested program</p>
<pre><code>def inner_calculation(asset, trader):
    return trader

def outer_calculation(asset):
    return  asset, [inner_calculation(asset, trader) for trader in range(5)]

inner_results = []
outer_results = []

for asset in range(10):
    outer_result, inner_result = outer_calculation(asset)
    outer_results.append(outer_result)
    inner_results.append(inner_result)

# Then you can filter inner_results to get the final output.
</code></pre>
<p>Bellow is the Ray code parallelizing the above code:</p>
<ul>
<li>Use the <code>@ray.remote decorator</code> for each function that we want to execute concurrently in its own process. A remote function returns a future (i.e., an identifier to the result) rather than the result itself. </li>
<li>When invoking a remote function <code>f()</code> the <code>remote</code> modifier, i.e., <code>f.remote()</code> </li>
<li>Use the <code>ids_to_vals()</code> helper function to convert a nested list of ids to values. </li>
</ul>
<p>Note the program structure is identical. You only need to add <code>remote</code> and then convert the futures (ids) returned by the remote functions to values using the <code>ids_to_vals()</code> helper function.</p>
<pre><code>import ray

ray.init()

# Define inner calculation as a remote function.
@ray.remote
def inner_calculation(asset, trader):
    return trader

# Define outer calculation to be executed as a remote function.
@ray.remote(num_return_vals = 2)
def outer_calculation(asset):
    return  asset, [inner_calculation.remote(asset, trader) for trader in range(5)]

# Helper to convert a nested list of object ids to a nested list of corresponding objects.
def ids_to_vals(ids):
    if isinstance(ids, ray.ObjectID):
        ids = ray.get(ids)
    if isinstance(ids, ray.ObjectID):
        return ids_to_vals(ids)
    if isinstance(ids, list):
        results = []
        for id in ids:
            results.append(ids_to_vals(id))
        return results
    return ids

outer_result_ids = []
inner_result_ids = []

for asset in range(10):
    outer_result_id, inner_result_id = outer_calculation.remote(asset)
    outer_result_ids.append(outer_result_id)
    inner_result_ids.append(inner_result_id)

outer_results = ids_to_vals(outer_result_ids)
inner_results = ids_to_vals(inner_result_ids)
</code></pre>
<p>There are a number of advantages of using Ray over the <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> module. In particular, the <strong>same code</strong> will run on a single machine as well as on a cluster of machines. For more advantages of Ray see <a href="https://stackoverflow.com/questions/20548628/how-to-do-parallel-programming-in-python/48177988#48177988">this related post</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>for</code>, use <code>map</code>:</p>
<pre><code>import functools
smartTrader =[]

m=map( calculations_as_a_function, 
        [df[df['Assets'] == asset] \
                for asset in range(len(Assets))])
functools.reduce(smartTradder.append, m)
</code></pre>
<p>From then on, you can try different parallel <code>map</code> implementations s.a. <a href="https://docs.python.org/3/library/multiprocessing.html#introduction" rel="nofollow"><code>multiprocessing</code>'s</a>, or <a href="http://www.grant-olson.net/files/why_stackless.html#tasklets" rel="nofollow"><code>stackless</code>'</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Probably threading, from standard python library, is most convenient approach:</p>
<pre><code>import threading

def worker(id):
    #Do you calculations here
    return

threads = []
for asset in range(len(Assets)):
    df = df[df['Assets'] == asset]
    for trader in range(len(df['TraderID'])):
        t = threading.Thread(target=worker, args=(trader,))
        threads.append(t)
        t.start()
    #add semaphore here if you need synchronize results for all traders.
</code></pre>
</div>
<span class="comment-copy">Try <a href="https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow noreferrer"><code>multiprocessing.Pool</code></a>.</span>
<span class="comment-copy">I am not sure how to call this function when I have nested for loops, can you provide me with a small example please?</span>
