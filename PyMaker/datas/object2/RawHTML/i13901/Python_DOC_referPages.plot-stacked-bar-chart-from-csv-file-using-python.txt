<div class="post-text" itemprop="text">
<p>I have data from a csv file that looks like this:</p>
<pre class="lang-none prettyprint-override"><code>,jobID,hum_starttime,hum_endtime,duration,exit_status,CPU,energy,memory,virt_mem,wall_time
0,525231,29/05/2015 11:53:47,29/05/2015 14:09:16,8129.0,0.0,28:54:56,0,4682480kb,16036608kb,01:13:59
1,504231,08/05/2015 07:46:59,08/05/2015 07:48:55,116.0,0.0,00:00:49,0,2421756kb,2807020kb,00:00:51
</code></pre>
<p>I want to plot the <code>exit_status</code> count (i.e the amount of times <code>exit_status == 1</code> or <code>exit_status == -11</code>) versus <code>start_time</code> in bins of 1 hour. Since there are several distinct <code>exit_status</code> codes, I need to plot it in the form of a <a href="http://matplotlib.org/examples/pylab_examples/bar_stacked.html" rel="nofollow">stacked bar chart</a> where each distinct exit status is given a different color.</p>
<p>Can anyone please help me? I've been stuck on this for 2 days!! Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I would solve it:</p>
<ol>
<li>Read the csv-file. This can be done using the <code>csv</code> module for python</li>
<li>Read and/or convert the date stamps according to your bin size, and iterate through each line, adding to the correct hour bin. I just do it the dirty way and cut the minutes and seconds: <code>row[0][:-5]</code> returns <code>15/07/2015 11</code>, a date and hour to work with.</li>
</ol>
<p>You'll end up with a list <code>status_records</code> which consists of two dicts, representing the two status options, which then contain the hour bins:</p>
<ul>
<li><code>"1"   : {"15/07/2015 11": 3, ...}</code></li>
<li><code>"-11" : {"15/07/2015 11": 0, ...}</code></li>
</ul>
<p>Here's a sample <code>data.csv</code> with some more data (so that you can actually <em>see</em> something, which is difficult with just your 2 entries - I'm using the same date format and the status codes you mentioned):</p>
<pre><code>start_time,exit_status
15/07/2015 11:53:47,1
15/07/2015 11:53:47,1
15/07/2015 11:54:56,1
15/07/2015 12:23:26,-11
15/07/2015 12:27:31,1
15/07/2015 14:01:47,-11
15/07/2015 14:11:56,1
15/07/2015 14:52:47,1
15/07/2015 15:53:23,1
15/07/2015 15:55:11,1
</code></pre>
<p>And here's my code (you'll have to change <code>row[0]</code> etc. to the according rows to work with your csv):</p>
<pre><code>#!/usr/bin/env python
import numpy as np
import matplotlib.pyplot as plt
import csv

# 1. reading the csv
status_records = {'1': {}, '-11': {}}

with open('data.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    # 2. iterate through csv
    for row in reader:
        if row[0] == 'start_time': continue # first line
        hour = row[0][:-5]
        status = row[1]

        # if hour not present, add empty 'slot' in each status bin
        if hour not in status_records[status].keys():
            status_records['1'][hour] = 0
            status_records['-11'][hour] = 0
            status_records[status][hour] = 1 # add the status we just read
        else:
            status_records[status][hour] += 1 # update status-hour bin

status1   = status_records['1'].values()
status2 = status_records['-11'].values()

print status1, status2

N = len(status1)
ind = np.arange(N)
width = 0.35

p1 = plt.bar(ind, status1, width, color='g')
p2 = plt.bar(ind, status2, width, color='r', bottom=status1)

plt.ylabel('# of exit status')
plt.title('Exit status in comparison with time')
plt.yticks(np.arange(0,11,10))
plt.legend((p1[0], p2[0]), ('1', '-11'))
plt.show()
</code></pre>
<p>Output:</p>
<p><img alt="graph" src="https://i.stack.imgur.com/y6gqp.png"/></p>
<p>Improvements: You may want to add some useful labels, and decide wether to show time in which nothing happens (which will maybe clutter the chart with gaps). Also, be aware that as-is the dates should be sorted in the csv, else you have to sort them yourself in the code.</p>
<p>Anyway, this should give you something to start with.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv.reader</code></a> or <code>csv.DictReader</code> is likely to be your friend. You also probably want <code>datetime</code>.</span>
<span class="comment-copy">What part are you stuck on, reading and analyzing the data, or creating a bar chart with matplotlib from that? Might be better to split your question into two separate ones if you're having trouble with both.</span>
<span class="comment-copy">hey adrianus thanks so much, that really helped. i appreciate it... my next problem :P i actually have so many different exit_status' (-12, -11,... 0, 1, 2, ..., 271 etc.) that i need to modify the code so that i have a for loop inside your second if statement and a for loop that plots all the different exit_status' and assigns a unique color to each distinct exit_status. could you help me out? thanks again! (also, and this is extra so dont worry if its too much, i want to normalise all the data to 1. i.e. the #number of exit status' should have a maximum at 1)</span>
<span class="comment-copy">How much different status codes are we talking about? Over 271? With <code>matplotlib.colors</code> you can generate colors via rgb or Hex-codes. If you only have, let's say a dozen codes, just make a <code>dict</code> like <code>status_colors = {'-12': 'r', '-11': 'y', '0': 'r', ...}</code> and use it like <code>color = status_colors[status]</code></span>
<span class="comment-copy">For the normalizing part: Just loop through each status, go through each bin, sum up the items, and then divide each bin by that sum.</span>
<span class="comment-copy">cool thanks. yeah there actually are over 300 status codes so i need a for loop</span>
<span class="comment-copy">Maybe you want to categorize the status codes into different categories with a color each? A chart with 300 colors is hardly readable :-) You're welcome, consider making it the accepted answer if it helped you.</span>
