<div class="post-text" itemprop="text">
<p>I AM LOOKING FOR A BETTER SOLUTION TO THIS PROBLEM:</p>
<p>What I want to do is automatically concatenate words of a book that were separated by line breaks. The code I've tried is:</p>
<pre><code>import nltk
from nltk.tokenize import word_tokenize
import re

with open ('Fr-dictionary.txt') as fr:  #opens the dictionary
dic = word_tokenize(fr.read().lower()) #stores the first dictionary

pat=re.compile(r'[.?\-",:;.?!»’()quls\d]+|\w+(?:-\w+)+') #pattern for 
punctuation, digits and words separated by hyphens (-)
reg= list(filter(pat.match, text))


with open ('fr-text.txt') as tx2:  #opening text containing the 
separated words
    text_input = word_tokenize(tx2.read().lower()) #stores the input 
text

words_it = iter(text_input) 

out_file1=open("finaltext.txt","w") #defining name of output file
valid_words1=[ ] #empty list to append the existing words 
invalid_words1=[ ] #empty list to append the invalid(non-existing)words 


for w in words_it: #looping through the tokenized text
    if w in dic:
        valid_words1.append(w)
    elif w in reg:
        valid_words1.append(w)#appending the valid items 
    else:
        try:
            concatenated = w + next(words_it) #concatenating strings
            if concatenated in dic:
                valid_words1.append(concatenated)#append if valid
        except StopIteration:
                   pass
        else:
           invalid_words1.append(w) #appending the invalid_words

a1=' '.join(valid_words1) #converting list into a string

out_file1.write(a1) #writing the output to a file
out_file1.close()



print(a1) #print list converted into text

print(invalid_words1)
print(len(invalid_words)
</code></pre>
<p>with this code I've:</p>
<p>a) tokenized the text (into a list) and looped throughout the list checking if each item exists in a dictionary (including punctuation)
b) if not, I try to concatenate the two parts of the word, 
c) check if the concatenated output exists in the dictionary and,
d) if so, append to the same list of the valid words, but 
e) if not append to another list with the invalid words. </p>
<p>PROBLEM: The problem is that sometimes the first part of the word to be concatenated is an existing/valid word (exists in the dictionary) and then the program ignores it and does not concatenate with its second part resulting in a text with these errors.  ANY IDEA to resolve this problem? I think the solution could be: loop and append all the words that exist and when a non-existing word appears, the program could go back to the previous, concatenate, check in the dic and then continue...How to do that? </p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if I got your problem but a way to resolve the problem of a step back in a loop with python is just save the last state of the loop, namely:</p>
<pre><code>last = None
for i in list_:
    #do stuff
    last = i
</code></pre>
<p>Or you can use the enumerate function</p>
<pre><code>for index, i in enumerate(list_):
    #do stuff
    previous = list_[index-1]
</code></pre>
</div>
<span class="comment-copy">This seems to me like it is not an iteration error, but a processing error...</span>
<span class="comment-copy">how about i[-1]?</span>
<span class="comment-copy">@NatáliaResende Yes but you have to work a bit more, I updated the answer</span>
<span class="comment-copy">thanks! Yes, I makes sense now using enumerate</span>
