<div class="post-text" itemprop="text">
<p>I have the following list of strings:</p>
<pre><code>['17', ' 5', ' 6', ' 0', ' 0', '', '', '', '', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '', '', '', '', '', '', '', '', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ' 28.68', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1.40']
</code></pre>
<p>This has been parsed from a very messy <code>.txt</code> file. Each set of "blank" entries corresponds to one zero, however I need to record these zeroes as 999s (I essentially need to replace every set of 4 consecutive <code>''</code> with a <code>'999'</code>). What would be the most Pythonic way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from itertools import groupby
... 
... 
... def group_blanks_by_n(lst, n=4):
...     result = []
...     for k, g in groupby(lst):
...         if k == '':
...             quo, rem = divmod(sum(1 for _ in g), n)
...             result.extend(['999'] * quo)
...             result.extend([''] * rem)
...         else:
...             result.extend(g)
...     return result
... 
&gt;&gt;&gt; test = ['17', ' 5', ' 6', ' 0', ' 0', '', '', '', '', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '', '', '', '', '', '', '', '', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ' 28.68', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1.40']
&gt;&gt;&gt; group_blanks_by_n(test, n=4)
['17', ' 5', ' 6', ' 0', ' 0', '999', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '999', '999', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '999', '999', '999', '999', '999', ' 28.68', '999', '999', '999', '999', '999', '999', '999', '999', '', '1.40']
</code></pre>
<hr/>
<p>EDIT:</p>
<p>Added <code>n</code> argument to account for different values (doesn't have to default to <code>4</code>, only chosen to match the question description).</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way of doing it is by converting the list to string using join(), then replace the spaces with 999 and then convert to list again using split()</p>
<pre><code>a = ['17', ' 5', ' 6', ' 0', ' 0', '', '', '', '', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '', '', '', '', '', '', '', '', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ' 28.68', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1.40']

b = '*'.join(a).replace(4*'*',' 999 ').replace('*','')
c = b.split()
print c

['17', '5', '6', '0', '0', '999', '10.11', '10.57', '18.34', '16.41', '13.23', '11.55', '11.56', '999', '999', '12.77', '11.99', '21.88', '22.46', '26.82', '25.71', '27.43', '27.73', '29.44', '999', '999', '999', '999', '999', '28.68', '999', '999', '999', '999', '999', '999', '999', '999', '1.40']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here a little function that does what you need.</p>
<pre><code>a = ['17', ' 5', ' 6', ' 0', ' 0', '', '', '', '', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '', '', '', '', '', '', '', '', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ' 28.68', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1.40']

def f(list):
    r = []
    c = 0
    for item in list:
        if item == '':
            c += 1
            if c == 4:
                r.append('999')
                c = 0
        else:
            c = 0
            r.append(item)
    return r

print f(a)

['17', ' 5', ' 6', ' 0', ' 0', '999', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '999', '999', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '999', '999', '999', '999', '999', ' 28.68', '999', '999', '999', '999', '999', '999', '999', '999', '1.40']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a> (aka: <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a> in Python 3):</p>
<h3>Code:</h3>
<pre><code>import itertools as it
new_list = []
N = 4
blanks = ('',) * N
an_iter = it.izip_longest(*[data[i:] for i in range(N)])
for x in an_iter:
    if x == blanks:
        new_list.append('999')
        for i in range(N-1):
            next(an_iter)
    else:
        new_list.append(x[0])
</code></pre>
<h3>Results:</h3>
<pre><code>['17', ' 5', ' 6', ' 0', ' 0', '999', ' 10.11', ' 10.57', ' 18.34', 
 ' 16.41', ' 13.23', ' 11.55', ' 11.56', '999', '999', ' 12.77', ' 11.99',
 ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44',
 '999', '999', '999', '999', '999', ' 28.68', '999', '999', '999', '999',
 '999', '999', '999', '999', '', '1.40']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The most pythonic way</strong> I guess?</p>
<pre><code>from itertools import groupby

L = ['17', ' 5', '6', ' 0', ' 0', '', '', '', '', ' 10.11', ' 10.57', ' 18.34', ' 16.41', ' 13.23', ' 11.55', ' 11.56', '', '', '', '', '', '', '', '', ' 12.77', ' 11.99', ' 21.88', ' 22.46', ' 26.82', ' 25.71', ' 27.43', ' 27.73', ' 29.44', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ' 28.68', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1.40']

def your_function(L):
    grouped_L = [(k, len(list(g))) for k,g in groupby(L)]
    final_list = [item 
    for x, y in grouped_L 
    for item in repeat(x if y &lt; 4 else '999', y if y &lt; 4 else y // 4)]
    return final_list

print(your_function(L))
</code></pre>
<p>Use <strong>groupby</strong> and <strong>repeat</strong> from <strong>itertools</strong> which produces a list of tuples like this.</p>
<blockquote>
<p>[(k, len(list(g))) for k,g in groupby(L)]</p>
<p>[('17', 1), (' 5', 1), ('6', 1), (' 0', 2), ('', 4),.. <em>and so on</em>]</p>
</blockquote>
<p>where the output is a tuple =&gt; (item, number_of_it's_consecutive_occurrence)</p>
<p>Then again use <strong>List comprehension</strong></p>
<p>Note: <em>(x,y) =&gt; (item, number_of_it's_consecutive_occurrence)</em></p>
<pre><code>final_list = [item 
    for x, y in grouped_L 
    for item in repeat(x if y &lt; 4 else '999', y if y &lt; 4 else y // 4)]
</code></pre>
</div>
<span class="comment-copy">show the expected result</span>
<span class="comment-copy">If one of answers solved your problem, accept it.</span>
<span class="comment-copy">Thank you so much! I forgot to mention that the best solution in my case would be a function, as I will need to do this for different values of "N" (in this case, it was 4). Cheers :)</span>
<span class="comment-copy">@PythonMania I adjusted the code so that different <code>n</code> values can be passed to it. Does that answer your question?</span>
<span class="comment-copy">Sadly does not work if the list starts or ends with 4 trailing <code>''</code>.</span>
<span class="comment-copy">@timgeb I have corrected it, now it does</span>
<span class="comment-copy">well done and very similar to mine which uses a generator expression instead of join to deal with leading/trailing sets of 4 empty strings. 1+</span>
<span class="comment-copy">@alec_djinn It seems like this doesn't return the correct answer. If I understand the question correctly, the end of your <code>c</code> variable should be <code>'999', '', '1.40']</code> but instead is <code>, '9991.40']</code>. Maybe @timgeb missed that before upvoting.</span>
<span class="comment-copy">@DeliriousLettuce Yep, you are right, I check it up asap.</span>
<span class="comment-copy">This version completely misses the single empty string second from the end... <code>'999', '1.40']</code> should be <code>'999', '', '1.40']</code>.</span>
<span class="comment-copy">Your solution doesn't seem to work properly at all. The question was to replace every set of 4 consecutive '' with a '999'. Your solution replaces any amount of consecutive '' with a single '999'. You missed the empty string second from the end and also destroyed the second zero at <code>L[4]</code>.</span>
<span class="comment-copy">Didn't notice that. Was too sleepy back when i posted the answer. Made the correction now with some help from other SO users!</span>
<span class="comment-copy">Your solution does not run because you didn't import <code>itertools.repeat</code>. Even when that import is added, your solution is incorrect. There are 33 <code>''</code>'s in the last consecutive run of empty strings and <code>divmod(33, 4) == (8, 1)</code>. The second last item in <code>final_list</code> should therefore be <code>''</code> (since it's not a group of 4) but your solution misses that completely. As a side note, the lines inside of your <code>final_list</code> list comprehension should be indented.</span>
<span class="comment-copy">@DeliriousLettuce No they need not be indented. That is also a correct way of representing list comprehensions.</span>
<span class="comment-copy">You didn't fix your solution even after I pointed out the bugs. Also, your statement about indentation is not backed up by any source. <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow noreferrer">PEP8 - Indentation</a></span>
