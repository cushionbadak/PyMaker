<div class="post-text" itemprop="text">
<p>So, I am compressing a JSON file.</p>
<pre><code>import json
import gzip
with open('big.json','r') as fid_json:
    # get json as type dict
    json_dict = json.load(fid_json)
    # convert dict to str
    json_str = str(json_dict)
    json_bytes = bytes(json_str,'utf8')
x = gzip.compress(json_bytes)
</code></pre>
<p>So can I decode the compressed byte file?I am trying this</p>
<pre><code>json_str = x.decode('utf-8')
</code></pre>
<p>but this gives an error.</p>
<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte
</code></pre>
<p>I think i am doing something theoretically wrong or can i decode the compressed file?
How can I get a compressed JSON file as i am trying to compress a JSON only? I am using python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are doing two things wrong:</p>
<ul>
<li><p>You are trying to treat <em>compressed data</em> as UTF-8. It is not UTF-8, it is binary data. Decompress <em>first</em>, <strong>then</strong> decode as UTF-8.</p></li>
<li><p>You are not creating compressed JSON. You are creating compressed <strong>Python data representations</strong>. Don't decode the JSON to Python if you want to write compressed JSON.</p></li>
</ul>
<p>You can compress the JSON data directly without decoding; I'd do it in <em>chunks</em> directly to an output file to keep memory usage efficient:</p>
<pre><code>import gzip
import shutil

with open('big.json', 'rb') as fid_json, gzip.open('big.json.gz', 'wb') as out:
    shutil.copyfileobj(fid_json, out)
</code></pre>
<p>Note that I open the input file as <em>binary</em>, there is no reason to decode the data from UTF-8 just to compress it (which opening the file in text mode would do).</p>
<p>To decode the compressed JSON again, using Python, just open the gzipped file with the <a href="https://docs.python.org/3/library/gzip.html" rel="nofollow noreferrer"><code>gzip.open()</code> function</a> again, this time in text mode:</p>
<pre><code>import gzip
import json

with gzip.open('big.json.gz', 'r', encoding='utf8') as fid_json:
    data = json.load(fid_json)
</code></pre>
<p>The GZIP file object that <code>gzip.open()</code> returns handles compression and UTF-8 decoding for you; the <code>json.load()</code> function can decompress the contained JSON document from there.</p>
<p>It is always a good idea to explicitly state the encoding of the file, rather than to rely on your locale being set correctly for every file you open. That said, as of Python 3.6 <code>json.load()</code> will also accept binary input, and detect what UTF encoding was used, so in that case use:</p>
<pre><code>import gzip
import json

with gzip.open('big.json.gz') as fid_json:
    data = json.load(fid_json)
</code></pre>
<p>where the default mode is <code>rb</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>don't</em> need to use the json module at all for this: you could simply compress the JSON file data. However, by loading the JSON into a Python object &amp; converting it back to JSON you can get rid of excess whitespace. You could also perform other transformations, eg ensure that the data is ASCII-safe.</p>
<p>As Martijn said, you should be compressing JSON data <em>not</em> the str representation of the Python object that you loaded with the JSON data. And to decompress that data you need to call the decompress method. <code>.decode('utf-8')</code> decodes UTF-8 bytes to a Unicode string object.</p>
<p>Here's a short demo. To test it, I created this tiny JSON file.</p>
<p><strong>test.json</strong></p>
<pre><code>[
    {
        "name": "PM 2Ring",
        "id": 4014959
    },
    {
        "name": "Dan ish",
        "id": 6390698
    }
]
</code></pre>
<p>And here's the code.</p>
<pre><code>import json
import gzip

fname = 'test.json'

# Load JSON data into a Python object
with open(fname) as fid_json:
    json_dict = json.load(fid_json)

#Convert to a single line JSON string, and encode the string to bytes
json_bytes = json.dumps(json_dict).encode('utf-8')
print(json_bytes)

print('Compressed')
x = gzip.compress(json_bytes)
print(x)
print('Length:', len(x))

print('Decompressed')
new_json = gzip.decompress(x).decode('utf-8')
print(new_json)
print('Length:', len(new_json))

# Load it into a Python object
obj = json.loads(new_json)
print(obj)
</code></pre>
<p><strong>output</strong></p>
<pre><code>b'[{"name": "PM 2Ring", "id": 4014959}, {"name": "Dan ish", "id": 6390698}]'
Compressed
b'\x1f\x8b\x08\x00k\x0e1Y\x02\xff\x8b\xaeV\xcaK\xccMU\xb2RP\n\xf0U0\n\xca\xccKW\xd2QP\xcaL\x01\x8a\x98\x18\x18\x9aX\x9aZ\xd6\xea( \x14\xb9$\xe6)d\x16g\xc0\xd5\x98\x19[\x1a\x98YZ\xd4\xc6\x02\x00v4\x00SI\x00\x00\x00'
Length: 77
Decompressed
[{"name": "PM 2Ring", "id": 4014959}, {"name": "Dan ish", "id": 6390698}]
Length: 73
[{'name': 'PM 2Ring', 'id': 4014959}, {'name': 'Dan ish', 'id': 6390698}]
</code></pre>
<p>Note that the compressed version is actually larger than the compressed data (although both are smaller than the original data). That's to be expected when compressing such a tiny amount of data. </p>
</div>
<span class="comment-copy">Why in heavens name are you compressing <b>Python representations</b>. You should <b>not</b> be using <code>json.load()</code> then <code>str()</code>.</span>
<span class="comment-copy">@MartijnPieters well I am new to this things. My objective is to compress JSON. what should be the approach?</span>
