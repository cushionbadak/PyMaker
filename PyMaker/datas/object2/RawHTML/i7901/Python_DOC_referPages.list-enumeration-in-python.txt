<div class="post-text" itemprop="text">
<p>The snippet below is from a code tracing exercise. </p>
<pre><code>import copy

def ct1(A, B, C, D, E):
    result = [ ]
    # 0 1 2 3 4 5 6 7 8 9
    pairs = [(A,B),(A,C),(A,D),(A,E),(B,C),(B,D),(B,E),(C,D),(C,E),(D,E)]
    for i,pair in enumerate(pairs):
        (L, M) = pair
        if (L is M): result.append(i)
        elif (L == M): result.append(10*i)

    return result
def f(L):
    L[0] += 1
    return L

A = list(range(3))
B = copy.copy(A)
C, D, E = A, B+[ ], f(B)
print(ct1(A, B, C, D, E))
</code></pre>
<p>The part I'm confused about is the enumeration used in the for loop. From the documentation for <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate()</a> it looks like <code>pair</code> should had have values like:</p>
<pre><code>(0, ([0, 1, 2], [1, 1, 2]))
(1, ([0, 1, 2], [0, 1, 2]))
(2, ([0, 1, 2], [0, 1, 2]))
(3, ([0, 1, 2], [1, 1, 2]))
(4, ([1, 1, 2], [0, 1, 2]))
(5, ([1, 1, 2], [0, 1, 2]))
(6, ([1, 1, 2], [1, 1, 2]))
(7, ([0, 1, 2], [0, 1, 2]))
</code></pre>
<p>during the iteration, which means <code>'L'</code> should have values from <code>0</code> through <code>7</code> and <code>'M'</code>, the tuples <code>([0, 1, 2], [1, 1, 2])</code> through <code>([0, 1, 2], [0, 1, 2])</code>. However when I run this code through the debugger, I see both <code>L</code> and <code>M</code> are lists instead. For example, when <code>i = 0, L = [0, 1, 2] and M = [1, 1, 2]</code> and so forth. Can someone please explain what is going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>With the line <code>for i,pair in enumerate(pairs):</code>, <code>i</code> gets the index values in the list <code>pairs</code> and goes from 0 to 9 while <code>pair</code> gets the values from the list <code>pairs</code> one by one. So for <code>i = 0</code>, the <code>pair</code> is <code>([0, 1, 2], [1, 1, 2])</code>. Then you call <code>(L, M) = pair</code> and this means <code>L</code> get the first list while <code>M</code> gets the second list in the tuple. Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course <code>L</code> and <code>M</code> are lists. If you run</p>
<pre><code>pairs = [(A,B),(A,C),(A,D),(A,E),(B,C),(B,D),(B,E),(C,D),(C,E),(D,E)]
for i, pair in enumerate(pairs):
    print(i, pair)
</code></pre>
<p>you will get the desired result. So the tuple you are looking for is saved in <code>pairs</code>. With the line</p>
<pre><code># ...
(L, M) = pair
# ...
</code></pre>
<p>you split up the tuple referenced by <code>pair</code> into its elements, which are – in the first iteration – the two lists referenced by <code>A</code> and <code>B</code>.</p>
<p>The above line essentially means </p>
<pre><code>(L, M) = (A, B)
</code></pre>
<p>which is equivalent to</p>
<pre><code>L, M = A, B
</code></pre>
<p>which in turn means "assign <code>A</code> to <code>L</code> and assign B to <code>M</code>".</p>
</div>
<span class="comment-copy">Read up on <code>unpacking</code>, the tuple from <code>enumerate()</code> has been unpacked into <code>i</code> and <code>pair</code>. You can nest unpacking, so you could have written <code>for i, (L, M) in enumerate(pairs):</code> without the need of <code>pair</code>.</span>
<span class="comment-copy">Makes sense to me now! Thanks for your help.</span>
