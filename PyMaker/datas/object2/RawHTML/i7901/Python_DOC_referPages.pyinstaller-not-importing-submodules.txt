<div class="post-text" itemprop="text">
<p>I cannot seem to get pyinstaller to correctly package a module.</p>
<p><strong>Example module structure</strong></p>
<pre><code>myapp/
      __main__.py
      mysubmodule.py
</code></pre>
<p><strong>Example <code>__main__.py</code> content</strong></p>
<pre><code>"""My __main__.py."""

import myapp.mysubmodule

print("Done")
</code></pre>
<p>If I run <code>python -m myapp</code> it runs with no errors and prints <code>Done</code>. </p>
<p>If I run <code>pyinstaller myapp</code> I get errors stating it's a directory.</p>
<p>If I run <code>pyinstaller myapp/__main__.py</code> it builds but when I execute the <code>dist/__main__/__main__</code> which is generated I get <code>ModuleNotFoundError: No module named 'myapp'</code>.</p>
<p>How can I get pyinstaller to include <code>myapp</code> as a module so it can be imported?</p>
</div>
<div class="post-text" itemprop="text">
<p>Add an <code>__init__.py</code> otherwise <code>myapp</code> it is not a valid module/package.</p>
<p>The missing file is:</p>
<ul>
<li><code>myapp/__init__.py</code></li>
</ul>
<p><strong>EDIT:</strong></p>
<p>You can leave <code>__init__.py</code> empty.</p>
<p>Read the documentation <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">here</a>.</p>
<blockquote>
<p>The <code>__init__.py</code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable, described later.</p>
</blockquote>
</div>
<span class="comment-copy">Any specific reason to not just <code>import mysubmodule</code> in <code>__main__.py</code>?</span>
<span class="comment-copy">Interestingly if I do that <code>python -m myapp</code> stops working but the built version starts working.</span>
<span class="comment-copy">Weird. Just as an experiment, does relative <code>from . import mysubmodule</code> work?</span>
<span class="comment-copy">No with a relative import I get <code>ValueError: Attempted relative import in non-package</code></span>
<span class="comment-copy">Figured it out! Turns out pyinstaller ignores virtualenv, so it was building a python3 application with python2, the import error was a red herring caused by other issues. Fixed by reinstalling pyinstaller with pip3 globally.</span>
<span class="comment-copy">Not necessary since Python 3.3+ I believe</span>
<span class="comment-copy">Sorry I omitted this. I've done that already.</span>
<span class="comment-copy">tell this to pylint and pyinstaller they don't care about this.</span>
<span class="comment-copy">@JacobTomlinson is it working with <code>__init__.py</code>?</span>
<span class="comment-copy">I commented my solution above, however it's pretty specific to my issue. I'm going to accept this answer as it solves the toy example I used in the question.</span>
