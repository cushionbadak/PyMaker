<div class="post-text" itemprop="text">
<p>I have a function for which I would like to go through a list of custom objects (with given midpoints) one at a time and take objects with unique midpoints and put them in a new list.  The following code gives me an error that the list has no attribute called 'midPoint', but I am not sure how to get the code to search the list for objects with matching midpoints. Does anyone have recommendations?</p>
<pre><code>class Obj():
    def __init__(self, midPoint=[0,0]):
        self.midPoint = midPoint

obj1 = Obj(midPoint = [1,1])
obj2 = Obj(midPoint = [2,2])
obj3 = Obj(midPoint = [3,3])
obj4 = Obj(midPoint = [1,1])
obj5 = Obj(midPoint = [2,2])

l = [obj1, obj2, obj3, obj4, obj5]

list_no_duplicates = []

def Delete_duplicates(list1):        
    for i in list1:
        if i.midPoint not in list_no_duplicates.midPoint:
        list_no_duplicates.append(x)

Delete_duplicates(l)
print list_no_duplicates
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> along with <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> function to remove the duplicate entries from your list. For example:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby

&gt;&gt;&gt; [next(obj) for i, obj in groupby(sorted(l, key=lambda x: x.midPoint), lambda x: x.midPoint)]
[Obj: midPoint [1, 1], Obj: midPoint [2, 2], Obj: midPoint [3, 3]]
</code></pre>
<p>Here, I have added the <a href="https://stackoverflow.com/questions/1984162/purpose-of-pythons-repr"><code>__repr__()</code></a> function to your <code>Obj</code> class to display the value of <code>midPoint</code> with your class' object:</p>
<pre><code>def __repr__(self):
    return 'Obj: midPoint {}'.format(str(self.midPoint))
</code></pre>
<p><strong>Note:</strong> This solution won't maintain the order of elements in orginal list. The new list will be sorted based on the value of <code>midPoint</code>.</p>
<hr/>
<p>Below is the complete code for your reference:</p>
<pre><code>from itertools import groupby

class Obj():
    def __init__(self, midPoint=[0,0]):
        self.midPoint = midPoint
    def __repr__(self):
        return 'Obj: midPoint {}'.format(str(self.midPoint))

obj1 = Obj(midPoint = [1,1])
obj2 = Obj(midPoint = [2,2])
obj3 = Obj(midPoint = [3,3])
obj4 = Obj(midPoint = [1,1])
obj5 = Obj(midPoint = [2,2])

l = [obj1, obj2, obj3, obj4, obj5]
# `print(l)` will display:
# [Obj: midPoint [1, 1], Obj: midPoint [2, 2], Obj: midPoint [3, 3], Obj: midPoint [1, 1], Obj: midPoint [2, 2]]

# New list with unique `midPoint`s
new_list = [next(obj) for i, obj in groupby(sorted(l, key=lambda x: x.midPoint), lambda x: x.midPoint)]
# `print(new_list)` will display:
# [Obj: midPoint [1, 1], Obj: midPoint [2, 2], Obj: midPoint [3, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If i understood correctly, this may work as you asked. </p>
<pre><code>class Obj(): 
    def __init__(self, midPoint=[0,0]): 
        self.midPoint = midPoint

obj1 = Obj(midPoint = [1,1])
obj2 = Obj(midPoint = [2,2])
obj3 = Obj(midPoint = [3,3])
obj4 = Obj(midPoint = [1,1])
obj5 = Obj(midPoint = [2,2]) 

l = [obj1, obj2, obj3, obj4, obj5]
list_no_duplicates = [] 

# determines if midpoint already exists in any object inside list_no_duplicates
def midpoint_exists(midpoint):
    for obj in list_no_duplicates:
        if obj.midPoint == midpoint:
            return True
    return False

def Delete_duplicates(list1): 
    for obj in list1:
        # if there are no object with this midPoint, appends
        if not midpoint_exists(obj.midPoint):
            list_no_duplicates.append(obj)

Delete_duplicates(l)
print list_no_duplicates
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.groupby</code></p>
<pre><code>from itertools import groupby
from operator import attrgetter as ga
...
l2 = [next(g) for k, g in groupby(sorted(l, key=ga('midPoint')), key=ga('midPoint'))]
</code></pre>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="//repl.it/embed/ISOl/1.js"&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
</div>
<div class="post-text" itemprop="text">
<p>We can use a dict, with setdefault, using the key as a tuple of the midPoint and the value as a list, which we then append to.</p>
<p>Then we have a dict with a list for each value of midPoint, and we can iterate out the [0]th element:</p>
<pre><code>def Delete_duplicates(list1):
    deduped = {}
    for i in list1:
        deduped.setdefault(tuple(i.midPoint),[]).append(i)
    return [j[0] for i,j in deduped.items()]
</code></pre>
<p>If you want all those with duplicates removed, we can do the same, but return only if our lists length is 1:</p>
<pre><code>def Delete_duplicates(list1):
    deduped = {}
    for i in list1:
        deduped.setdefault(tuple(i.midPoint),[]).append(1)
    return [i for i in list1 if len(deduped[tuple(i.midPoint)]) == 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about the order of the objects in the new list, you may use a <code>dict</code> to achieve this:</p>
<pre><code>new_list = {tuple(obj.midPoint): obj  for obj in l}.values()

# content of `new_list` will be:
# [Obj: midPoint [3, 3], Obj: midPoint [1, 1], Obj: midPoint [2, 2]]
</code></pre>
<p>Create a dictionary with key as tuple of your <code>midPoint</code> value, and values as the object of <code>Obj</code> class. Then call <code>dict.values()</code> method to get the list of values i.e. list of <code>Obj</code> objects in your case.</p>
<p>However, in Python 3.x <code>dict.values()</code> return an object of <code>dict_values</code> type. In order to convert it to list, explicitly type-cast it to <code>list</code> as:</p>
<pre><code>new_list = list(new_list)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4169252/remove-duplicates-in-list-of-object-with-python" title="remove duplicates in list of object with python">stackoverflow.com/questions/4169252/â€¦</a></span>
<span class="comment-copy"><code>list_no_duplicates</code> is a list and doesn't have a <code>midPoint</code> attribute. If you wish to look at this attribute you need to have an <code>Object</code> object at hand. Also, what is <code>x</code> in the <code>list_no_duplicates.append(x)</code> line?</span>
<span class="comment-copy">Do you want to maintain the order of the object in the new list?</span>
<span class="comment-copy">do you want to remove those with &gt;=2 entries, or just keep 1 of them?</span>
<span class="comment-copy">Sorry, I meant i not x in 'list_no_duplicates.append(x)'.  Order does not need to be maintained and I would just like to keep 1 copy of those that are duplicated.  Thanks!</span>
