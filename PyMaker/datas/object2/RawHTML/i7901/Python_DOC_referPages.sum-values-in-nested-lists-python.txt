<div class="post-text" itemprop="text">
<p>I have a list:</p>
<pre><code>l = [['a', 10, 30], ['b', 34, 89], ['c', 40, 60],['d',30,20]]
</code></pre>
<p>where the first item inside each sublist is the name and other two number are marks (sub1 and sub2)</p>
<p>The nested lists can be dynamic, i.e the number of nested lists can change according to function.</p>
<p>What I am looking for is to find </p>
<pre><code>average of subj 1 i.e (10+34+40+30)/4 and 
similarly sub2 (30+89+60+20)/4

also average marks of a: (10+30)/2
average marks of b: (34+89)/2  and so on.
</code></pre>
<p>I tried:</p>
<pre><code>c = 0
for i in range(0,len(list_marks1)):
    c += list_marks1[i][1]
sub_1avg = float(c)/len(list_marks1)
d = 0
for i in range(0,len(list_marks1)):
    d += list_marks1[i][2]
sub_2avg = float(d)/len(list_marks1)
</code></pre>
<p>but this is not correct.</p>
<p>Is there any optimal way to do this? Since the number of subjects in my nested lists can also change.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just use <code>sum</code> and a generator expression:</p>
<pre><code>&gt;&gt;&gt; l= [['a', 10, 30], ['b', 34, 89], ['c', 40, 60],['d',30,20]]
&gt;&gt;&gt; length = float(len(l))  # in Python 3 you don't need the "float"
&gt;&gt;&gt; sum(subl[1] for subl in l) / length 
28.5
&gt;&gt;&gt; sum(subl[2] for subl in l) / length
49.75
</code></pre>
<p>Or even do that inside a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [sum(subl[subj] for subl in l) / length for subj in range(1, 3)]
[28.5, 49.75]
</code></pre>
<p>Similarly for the average of one sublist:</p>
<pre><code>&gt;&gt;&gt; length = float(len(l[0])) - 1
&gt;&gt;&gt; [sum(subl[1:]) / length for subl in l]
[20.0, 61.5, 50.0, 25.0]
</code></pre>
<p>When you have python 3.4 or newer you can replace the <code>sum / length</code> with <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a>:</p>
<pre><code>&gt;&gt;&gt; from statistics import mean
&gt;&gt;&gt; [mean(subl[subj] for subl in l) for subj in range(1, 3)]  
[28.5, 49.75]

&gt;&gt;&gt; [mean(subl[1:]) for subl in l]
[20, 61.5, 50, 25]
</code></pre>
<hr/>
<p>You asked about the best way so I probably should mention that there are packages dedicated for tabular data. For example If you have <code>pandas</code> it's even easier using <code>DataFrame</code> and <code>mean</code>:</p>
<pre><code>&gt;&gt;&gt; import pandas as pd

&gt;&gt;&gt; df = pd.DataFrame(l, columns=['name', 'x', 'y']) 
&gt;&gt;&gt; df[['x', 'y']].mean(axis=0)
x    28.50
y    49.75
dtype: float64

&gt;&gt;&gt; df[['x', 'y']].mean(axis=1)
0    20.0
1    61.5
2    50.0
3    25.0
dtype: float64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A fucnitonal approach:</p>
<pre><code>l= [['a', 10, 30], ['b', 34, 89], ['c', 40, 60],['d',30,20]]
map(lambda x: sum(x)/float(len(x)), zip(*l)[1:])
[28.5, 49.75]
</code></pre>
<p>This way will work for any sublist length</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l= [['a', 10, 30], ['b', 34, 89], ['c', 40, 60],['d',30,20]]
sub1_avg =  sum(n for _,n, _ in l)/float(len(l))
sub2_avg =  sum(n for _,_, n in l)/float(len(l))
student_avgs = [{x[0]: sum(x[1:])//float((len(x)-1))} for x in l]
print "Sub1 avg - {}\nSub2 avg - {}\nstudent avg - {}".format(sub1_avg, sub2_avg, student_avgs)
</code></pre>
<p>sample output</p>
<pre><code>Sub1 avg - 28.5
Sub2 avg - 49.75
student avg - [{'a': 20.0}, {'b': 61.0}, {'c': 50.0}, {'d': 25.0}]
</code></pre>
</div>
<span class="comment-copy">you should consider using <code>dictionary</code> instead for a <i>possibly</i> more complex data type</span>
