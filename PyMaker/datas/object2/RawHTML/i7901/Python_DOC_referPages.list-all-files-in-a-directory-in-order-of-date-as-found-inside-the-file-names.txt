<div class="post-text" itemprop="text">
<p>I have various tar files in a Desktop folder (Ubuntu). </p>
<p>The filename is like this:</p>
<pre><code> esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-**05222017**-4.tar 
</code></pre>
<p>The boldfaced part is the date.  I want to sort the files in date order, most recent first.</p>
<p>Is there a simple python solution for this?</p>
<pre><code>import glob
import datetime
import re

timeformat = "%m%d%Y" 

regex = re.compile("^esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-(\d*\d*)")

def gettimestamp(thestring):

    m = regex.search(thestring)
    return datetime.datetime.strptime(m.groups()[0], timeformat)


list_of_filenames = ['esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05212017-4','esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05202017-4']

for fn in sorted(list_of_filenames, key=gettimestamp):

    print fn
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to parse the date, or even use regex for that matter. If the file names are structured as you say, it's sufficient to do just:</p>
<pre><code>filenames = ['esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05212017-4',
             'esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05202017-4',
             'esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-bad_date-4',]

def parse_date(name, offset=-10):
    try:
        date_str = name[offset:offset+8]
        return int(date_str[-4:] + date_str[:2] + date_str[2:4])
    except (IndexError, TypeError, ValueError):  # invalid file name
        return -1

sorted_list = [x[1] for x in sorted((parse_date(l), l) for l in filenames) if x[0] != -1]
# ['esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05202017-4',
#  'esarchive--James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05212017-4']
</code></pre>
<p><strong>UPDATE</strong> - I've added the offset argument to specify where in the file name begins your date. In the list you've posted it begins 10 characters from the back (default), but if you've had a <code>.tar</code> extension after the name, as in your initial example, you'd account those 4 characters as well and use <code>offset</code> of -14:</p>
<pre><code>names = ['James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05212017-4.tar',
         'James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05202017-4.tar',
         'James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-bad_date-4.tar']

sorted_list = [x[1] for x in sorted((parse_date(l, -14), l) for l in names) if x[0] != -1]
# ['James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05202017-4.tar',
#  'James-AB-Test226-8037affd-06d1-4c61-a91f-816ec9cb825f-05212017-4.tar']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there is not a <em>simple</em> Python function for this.  However, there are reasonably simple building blocks from which you can make a readable solution.</p>
<p>Write a function to extract the date and rearrange it to be useful as a sort key.  Find the last two hyphens in the file name, grab the string between them, and then rearrange the digits in the format yyyymmdd (year-month-day).  Return that string or integer (either will work) as the functional value.</p>
<p>For your main routine, collect all the file names in a list (or make a generator) and sort them, using the value of that function as the sort key.</p>
<p>See the <a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow noreferrer">sorting wiki</a> for some implementation details.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Adam Smith have pointed out, you require the list of files to work with.</p>
<pre><code>import glob, os
import datetime
import re

timeformat = "%m%d%Y" 

regex = re.compile("(\d*\d*)-\d*.tar")

def gettimestamp(thestring):

    m = regex.search(thestring[-14:-1])
    if m:
        return datetime.datetime.strptime(m.groups()[0], timeformat)
    else:
        return None


list_of_filenames = os.listdir('/home/james/Desktop/tarfolder')

for fn in sorted(list_of_filenames, key=gettimestamp):
    print fn
</code></pre>
<p><strong>Edit</strong> As Martineu has noticed, the hash might be different than the one you indicated so it would be easier to discard beginning of the name part in advance.</p>
</div>
<span class="comment-copy">Do you have some code that you've tried?</span>
<span class="comment-copy">Yes, It seems to be working when I have the list_of_filenames variable. Maybe some advice on how to point the variable to my directory? Thats the part im mainly stuck at :(</span>
<span class="comment-copy">@ChetanYadav <a href="https://docs.python.org/3/library/os.html?highlight=os.listdir#os.listdir" rel="nofollow noreferrer"><code>os.listdir</code></a></span>
<span class="comment-copy">Do your files always have a <code>-number</code> at the end of the filename?</span>
<span class="comment-copy">Yes Budo. They do have it.</span>
<span class="comment-copy">Doesn't seem to be working.</span>
<span class="comment-copy">@ChetanYadav - then your file names are differently structured - if you copy the above code verbatim it will work and produce the expected output. It's based on your <code>list_of_filenames</code> list where you didn't put file extensions, for file extensions you'll have to add additional offset to tell the <code>parse_date()</code> function where to look for the date. Check the updated example above.</span>
<span class="comment-copy">I tried yours verbatim. Returns a blank output strangely enough!</span>
<span class="comment-copy">Of course it returns blank output - it's not printing anything, it generates the <code>sorted_list</code>, then you can do whatever you want with it, including printing it.</span>
<span class="comment-copy">Oh yes! Forgive me for the minor oversight! Thank you so much Zwer! It works now! You're a saviour! :)</span>
<span class="comment-copy">Good solution. Just wondering wh this pops up:- Traceback (most recent call last):   File "listfiles.py", line 17, in &lt;module&gt;     for fn in sorted(list_of_filenames, key=gettimestamp):   File "listfiles.py", line 12, in gettimestamp     return datetime.datetime.strptime(m.groups()[0], timeformat) AttributeError: 'NoneType' object has no attribute 'groups'</span>
<span class="comment-copy">Are you using python2.7 or python3?</span>
<span class="comment-copy">@Budo: You need to check <code>if m:</code> before calling <code>m.groups()</code>â€”apparently not all file names have a date in them.</span>
<span class="comment-copy">Using python 2.7</span>
<span class="comment-copy">@martineau or more likely the random bits of hex aren't actually the same between files (<code>8037affd-06d1-4c61-a91f-816ec9cb825f</code> I mean)</span>
