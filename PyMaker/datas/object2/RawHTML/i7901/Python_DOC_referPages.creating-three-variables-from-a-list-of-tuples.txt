<div class="post-text" itemprop="text">
<p>Lets say I have a list of tuples like below</p>
<pre><code>counts=[(0,0,17),(0,0,90)]
</code></pre>
<p>I want to create three variables or lists such as </p>
<pre><code>a b c 
0 0 17 
0 0 90
</code></pre>
<p>I want to do this using List comprehensions. </p>
<p>My count is a result of a map function. I want to assign the values to three different pandas columns as a , b and c. </p>
<p>Suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <em>list comprehension</em> to achieve this. Python has builtin <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> function to unpack the list based on index of the list elements as:</p>
<pre><code>&gt;&gt;&gt; counts=[(0,0,17),(0,0,90)]
&gt;&gt;&gt; a, b, c = zip(*counts)

&gt;&gt;&gt; a
(0, 0)

&gt;&gt;&gt; b
(0, 0)

&gt;&gt;&gt; c
(17, 90)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here you go:</p>
<pre><code>a,b,c = [ [i[j] for i in counts] for j in range(0,3)]
</code></pre>
<p>Note the nested comprehension - <a href="https://spapas.github.io/2016/04/27/python-nested-list-comprehensions/" rel="nofollow noreferrer">here's a good resource</a> describing how they work.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are lots of approaches. If you're intending to work with tabular data, consider using <code>pandas</code></p>
<pre><code>import pandas as pd

counts=[(0,0,17),(0,0,90)]
df = pd.DataFrame(counts)
df.columns=["a", "b", "c"]
</code></pre>
<p>now, in a python shell, df will look like:</p>
<pre><code>Out[3]:
    a   b   c
0   0   0   17
1   0   0   90
</code></pre>
<p>The first column there is the index, essentially a primary key on the table. To recover any of the lists, you would simply do</p>
<pre><code>df.a
</code></pre>
<p>Which produces a Series type, where the values have type int64:</p>
<pre><code>Out[11]:
 0    0
 1    0
Name: a, dtype: int64
</code></pre>
<p>again, the first column shown is the index (zero indexed like a normal python list).</p>
<p>And you can access the values from the Series in a familiar fashion:</p>
<pre><code>df.a[0]

Out[12]:
0
</code></pre>
<p>Finally, if you need to get a list back, you can simply do</p>
<pre><code>a = list(df.a)
</code></pre>
<p>and so forth.</p>
</div>
<div class="post-text" itemprop="text">
<p>If for some reason you want to create variables dynamically, you can update <code>globals()</code> as follows:</p>
<pre><code>counts=[(0,0,17),(0,0,90)]

globals().update({k: t for k, t in zip('abc', zip(*counts))})

# In [23]: c
# Out[23]: (17, 90)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If working with numpy:</p>
<pre><code>import numpy as np

print(np.array(counts).transpose())
</code></pre>
<p>Outputs</p>
<pre><code>[[ 0  0]
 [ 0  0]
 [17 90]]
</code></pre>
<p>And of course, we may unpack the 3x2 array into <code>a</code>, <code>b</code>, and <code>c</code>:</p>
<pre><code>a, b, c = np.array(counts).transpose()
</code></pre>
</div>
<span class="comment-copy">What are <code>a</code>, <code>b</code> and <code>c</code> in the second block ?</span>
<span class="comment-copy">You want <code>a</code> to be a list, <code>b</code> to be a list and <code>c</code> to be a list?</span>
<span class="comment-copy">.. and what should be the values of all of them ?</span>
<span class="comment-copy"><code>a, b, c = zip(counts[0], counts[1])</code>?</span>
<span class="comment-copy">Another way of doing this would be a simple <code>numpy.transpose()</code> if you were working with large amounts of matrix data.</span>
<span class="comment-copy">This is not what I asked. I am not having data as pandas. It's a list of tuples returned by a Python map function. I want to assign that result to three different variables</span>
<span class="comment-copy">You apply that list of tuples as shown. So, you can get what you want here. If you want those three variables to be explicitly lists just finish it off with <code>a = list(df.a)</code> and so on.</span>
<span class="comment-copy">Hm, I'm confused. In your question it now specifically says you <i>do</i> want pandas columns.</span>
