<div class="post-text" itemprop="text">
<p>I want to create a function that takes the following arguments:  </p>
<p><code>my_list</code>: a list of values which can be empty strings, null, floats, int or str </p>
<p><code>zero_val</code> the value that should be the 0th item</p>
<p>Something like:</p>
<pre><code>my_sorter(my_list, zero_val):
    ...
    return my_sorted_list
</code></pre>
<p>with args: </p>
<pre><code>my_list = ["howdy", "ciao", "bonjour", "yo"]
zero_val = "bonjour"
</code></pre>
<p>So in this example, the list should be returned with "bonjour" as the 0th item:</p>
<pre><code>&gt;&gt;&gt; my_list
&gt;&gt;&gt; ["bonjour", "howdy", "ciao", "yo"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>def sorter(zero_val):

    my_list = ["howdy", "ciao", "bonjour", "yo"]

    new_list = [zero_val]

    new_list.extend([i for i in my_list if i != zero_val])

    return new_list
</code></pre>
<p>This algorithm filters my_list by removing all instances of zero_val after assigning zero_val to the first position in the new_list and then extends new_list by the filtered list. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>index()</code></a> to find your first match, and then also for slicing like:</p>
<h3>Code:</h3>
<pre><code>def my_sorter(my_list, zero_val):
    i = my_list.index(zero_val)
    return [zero_val] + my_list[:i] + my_list[i+1:]
</code></pre>
<h3>Test Code:</h3>
<pre><code>print(my_sorter(["howdy", "ciao", "bonjour", "yo"], "bonjour"))
print(my_sorter(["howdy", "ciao", "bonjour", "yo"], "howdy"))
print(my_sorter(["howdy", "ciao", "bonjour", "yo"], "yo"))
</code></pre>
<h3>Results:</h3>
<pre><code>['bonjour', 'howdy', 'ciao', 'yo']
['howdy', 'ciao', 'bonjour', 'yo']
['yo', 'howdy', 'ciao', 'bonjour']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If there's just one occurrence of <code>zero_val</code> in your list, the solution is as simple as</p>
<pre><code>def my_sorter(my_list, zero_val):
    return sorted(my_list, key=lambda x: x != zero_val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works if the item occurs only once: Use <code>remove()</code> to remove the item from the list, which raises a <code>ValueError</code> if it didn't exist in the list, otherwise reinsert it at index 0:</p>
<pre><code>try:
    my_list.remove(zero_val)
except ValueError:
    pass
else:
    my_list.insert(0, zero_val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you have more than one occurrence you can use:</p>
<pre><code>def my_sorter(my_list, zero_val):
    tmp = []
    for _ in xrange(my_list.count(zero_val)):
        tmp.append(zero_val)
    li = [x for x in my_list if x != zero_val]
    return tmp + li
</code></pre>
<p>input:</p>
<pre><code>print my_sorter(["howdy", "ciao", "bonjour", "yo", "bonjour"], 'bonjour')
</code></pre>
<p>output:</p>
<pre><code>['bonjour', 'bonjour', 'howdy', 'ciao', 'yo']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you can use <code>remove</code>, <code>sort</code> and <code>insert</code>, i.e.:</p>
<pre><code>def my_sorter(lst, zero_val):
    if zero_val in lst:
        lst.remove(zero_val);
    lst.sort(); lst.insert(0, zero_val)
    return lst
</code></pre>
<p><a href="https://eval.in/806392" rel="nofollow noreferrer">demo</a></p>
</div>
<span class="comment-copy">What should happen if the value occurs multiple times?</span>
