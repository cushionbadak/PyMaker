<div class="post-text" itemprop="text">
<p>Hi I am trying to plot a numpy array of strings in y axis, for example</p>
<pre><code>arr = np.array(['a','a','bas','dgg','a']) #The actual strings are about 11 characters long
</code></pre>
<p>vs a float array with equal length. The string array I am working with is very large ~ 100 million entries. One of the solutions I had in mind was to convert the string array to unique integer ids, for example,</p>
<pre><code>vocab = np.unique(arr)
vocab = list(vocab)
arrId = np.zeros(len(arr))
for i in range(len(arr)):
    arrId[i] = vocab.index(arr[i])
</code></pre>
<p>and then <code>matplotlib.pyplot.plot(arrId)</code>. But I <strong>cannot</strong> afford to run a for loop to convert the array of strings to an array of unique integer ids. In an initial search I could not find a way to map strings to an unique id without using a loop. Maybe I am missing something, but is there a smart way to do this in python?</p>
<p><strong>EDIT</strong> - </p>
<p>Thanks. The solutions provided use <code>vocab,ind = np.unique(arr, return_index = True)</code> where <code>idx</code> is the returned unique integer array. But it seems like np.unique is O(N*log(N)) according to this ( <a href="https://stackoverflow.com/questions/15637336/numpy-unique-with-order-preserved">numpy.unique with order preserved</a>), but pandas.unique is of order O(N). But I am not sure how to get <code>ind</code> from pandas.unique. plotting data i guess can be done in O(N). So I was wondering is there a way to do this O(N)? perhaps by hashing of some sort?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy.unique</code> used with the <code>return_inverse</code> argument allows you to obtain the inverted index.</p>
<pre><code>arr = np.array(['a','a','bas','dgg','a'])
unique, rev = np.unique(arr, return_inverse=True)

#unique: ['a' 'bas' 'dgg']
#rev: [0 0 1 2 0]
</code></pre>
<p>such that <code>unique[rev]</code> returns the original array <code>['a' 'a' 'bas' 'dgg' 'a']</code>.</p>
<p>This can be easily used to plot the data.</p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt

arr = np.array(['a','a','bas','dgg','a'])
x = np.array([1,2,3,4,5])

unique, rev = np.unique(arr, return_inverse=True)
print unique
print rev
print unique[rev]

fig,ax=plt.subplots()
ax.scatter(x, rev)
ax.set_yticks(range(len(unique)))
ax.set_yticklabels(unique)

plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/oGyMm.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/oGyMm.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>you can factorize your strings:</p>
<pre><code>In [75]: arr = np.array(['a','a','bas','dgg','a'])

In [76]: cats, idx = np.unique(arr, return_inverse=True)

In [77]: plt.plot(idx)
Out[77]: [&lt;matplotlib.lines.Line2D at 0xf82da58&gt;]

In [78]: cats
Out[78]:
array(['a', 'bas', 'dgg'],
      dtype='&lt;U3')

In [79]: idx
Out[79]: array([0, 0, 1, 2, 0], dtype=int64)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the numpy <code>unique</code> funciton to return a unique array of values?</p>
<pre><code>print(np.unique(arr))

['a' 'bas' 'dgg']
</code></pre>
<p><code>collections.counter</code> also return the value and number of counts:</p>
<pre><code>print(collections.Counter(arr))
Counter({'a': 3, 'bas': 1, 'dgg': 1})
</code></pre>
<p>Does this help at all?</p>
</div>
<span class="comment-copy">Would the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> be anything that would interest you? I think it is somewhat faster than your method, but I'm not sure.</span>
<span class="comment-copy">Thanks a lot, an elegant solution! didnt know about return inverse. Feel stupid.</span>
<span class="comment-copy">You don't need to feel stupid because not knowing something. Aquiring knowledge is often about asking the right questions (whether it is asking google or if that doesn't help, asking here).</span>
<span class="comment-copy">Ture. Do you have any comments on the edit?</span>
<span class="comment-copy">My only comment would be that if the difference between O(N) and O(Nlog(N)) matters for you, you're on the wrong track using a matplotlib scatterplot. I somehow doubt that plotting that many points such that speed would matter will then produce a meaningful plot.</span>
<span class="comment-copy">Thanks a lot! This works.</span>
<span class="comment-copy">Sorry then define the unique array as a dictionary to give a unique integer value for each string.</span>
<span class="comment-copy">yes basically i wanted to know  a way to define the unique integer array without using a for loop. I am not sure how to do it after getting the dictionary. Could you please elaborate what you had in mind?</span>
