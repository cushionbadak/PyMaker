<div class="post-text" itemprop="text">
<p>I have a <code>list_of_lists</code> and I want to create a single list with all the elements of all the inner lists. I don't understand why can't use <code>sum</code> to achieve this.</p>
<pre><code>list_of_lists = [['element 1','element 2'],['element 1']]
print(sum(list_of_lists))
&gt;&gt; TypeError: unsupported operand type(s) for +: 'int' and 'list'
</code></pre>
<p>If I use <code>reduce</code> it works fine:</p>
<pre><code>from functools import reduce
print(reduce(lambda x,y: x+y, list_of_lists))
&gt;&gt; ['element 1', 'element 2', 'element 1']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>sum</code> initializes with a default 0. Initialize with an empty list instead:</p>
<pre><code>print(sum(list_of_lists, []))
# ['element 1', 'element 2', 'element 1']
</code></pre>
<p>However, it is not a good idea to flatten lists with <code>sum</code> (<strong>horrible</strong> performance), you could use a nested comprehension or <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> which was created for this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am going to elaborate on @moses-koledoe answer. In order to flatten these lists (effectively, that's what you're trying to achieve), employ <code>itertools.chain</code>.</p>
<pre><code>from itertools import chain    
list_of_lists = [['element 1','element 2'],['element 1']]
list(chain(*list_of_lists))
&gt;&gt; ['element 1', 'element 2', 'element 1']
</code></pre>
<p>If you want to avoid the unpacking syntax (<code>*list_of_lists</code>), use the <code>from_iterable</code> variation of the same functionality:</p>
<pre><code>list(chain.from_iterable(list_of_lists))
&gt;&gt; ['element 1', 'element 2', 'element 1']
</code></pre>
<p>Actually, the second method might be a little more performant on large lists since it doesn't construct an intermediate tuple of args required to call the <code>chain</code> function but works on the provided iterable (which could be a generator) directly.</p>
</div>
<span class="comment-copy">you can't use sum because your lists contain string and not numeric values. In any case why don't you use reduce seeing that it's working? if you don't want duplicate after use reduce you can use list(set(your_list)) <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/datastructures.html</a></span>
<span class="comment-copy">Please read the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">documentation of <code>sum</code></a>.</span>
