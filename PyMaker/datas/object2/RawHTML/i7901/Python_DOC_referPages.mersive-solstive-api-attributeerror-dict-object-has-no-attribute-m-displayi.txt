<div class="post-text" itemprop="text">
<p>I have around 100 machines running Mersive Solstice, which is a wireless display tool. I'm trying to gather a few important pieces of information, in particular the fulfillment ID for the license for each installed instance.</p>
<p>Using the Solstice OpenControl API, found <a href="http://assistly-production.s3.amazonaws.com/194551/kb_article_attachments/101899/Solstice-OpenControl-API-12-15-2016_original.pdf?AWSAccessKeyId=AKIAJNSFWOZ6ZS23BMKQ&amp;Expires=1495638187&amp;Signature=Mze4tDSTiw5gstCisxil3ofpKcE%3D&amp;response-content-disposition=filename%3D%22Solstice-OpenControl-API-12-15-2016.pdf%22&amp;response-content-type=application%2Fpdf" rel="nofollow noreferrer" title="here">here</a>, I whipped up a python script to grab everything I needed using a json GET. However, even when using the example GET from the documentation,</p>
<pre><code>import requests
import json
url = ‘http://ip-of-machine/api/stats’

r = requests.get(url)
jsonStats = json.loads(r.text)
usersConnected = jsonStats.m_statistics.m_connectedUsers
</code></pre>
<p>I encounter:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Python27/test.py", line 7, in &lt;module&gt;
    usersConnected = jsonStats.m_statistics.m_connectedUsers
AttributeError: 'dict' object has no attribute 'm_statistics'
</code></pre>
<p>Which is very confusing. I've found plenty of similar questions on SO regarding this problem, but not one that's been specifically regarding wrong GET requests from the API Reference guide.</p>
<p>Additionally, here is my script:</p>
<pre><code>import requests
import json
from time import sleep

url = 'test'

f = open("ip.txt", "r")
while(url != ""):
    url = f.readline()
    url = url.rstrip('\n')
    print(url)

    try:
        r = requests.get(url)
    except:
        sleep(5)

    jsonConfig = json.loads(r.text)
    displayName = jsonConfig.m_displayInformation.m_displayName
    hostName = jsonConfig.m_displayInformation.m_hostName
    ipv4 = jsonConfig.m_displayInformation.m_ipv4
    fulfillmentId = jsonConfig.m_licenseCuration.fulfillmentId
    r.close()


f.close
</code></pre>
<p>I import the URL's from a text document for easy keeping. I'm able to make the connection to the /api/config JSON, and when the URL is put into a browser it does spit out the JSON records:</p>
</div>
<div class="post-text" itemprop="text">
<p>Json uses "Dicts" which are a type of array. You are just using them in the wrong way. I recommend reading <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Python Data Structures.</a> </p>
<pre><code>Json.Loads() 
</code></pre>
<p>Returns a dictionary not a object. Do:</p>
<pre><code>dict['key']['key']
</code></pre>
<p>Here is how your code should look:</p>
<pre><code>import requests
import json
from time import sleep

url = 'test'

f = open("ip.txt", "r")

while(url != ""):

    url = f.readline()
    url = url.rstrip('\n')
    print(url)

    try:
        response = requests.get(url)
        json_object = json.loads(response .text)
        displayName = json_object['m_displayInformation']['m_displayName']
        hostName = json_object['m_displayInformation']['m_hostName']
        ipv4 = json_object['m_displayInformation']['m_ipv4']
        fulfillmentId = json_object['m_licenseCuration']['fulfillmentId']
    except:
        pass

    response .close()
f.close()
</code></pre>
<p>I hope this was helpful!</p>
</div>
<span class="comment-copy">About 5 minutes ago I decided to switch my notation from dot to bracket, and that certainly did the trick. I came back to self answer, however you described the problem much better than I could have! Cheers!</span>
