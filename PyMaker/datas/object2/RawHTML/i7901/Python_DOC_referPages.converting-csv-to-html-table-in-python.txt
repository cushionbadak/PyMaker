<div class="post-text" itemprop="text">
<p>I'm trying to take data from a .csv file and importing into a HTML table within python.</p>
<p>This is the csv file <a href="https://www.mediafire.com/?mootyaa33bmijiq" rel="nofollow noreferrer">https://www.mediafire.com/?mootyaa33bmijiq</a></p>
<p>Context:<br/>
The csv is populated with data from a football team [Age group, Round, Opposition, Team Score, Opposition Score, Location].  I need to be able to select a specific age group and only display those details in separate tables.  </p>
<p>This is all I've got so far.... </p>
<pre><code>infile = open("Crushers.csv","r")

for line in infile:
    row = line.split(",")
    age = row[0]
    week = row [1]
    opp = row[2]
    ACscr = row[3]
    OPPscr = row[4]
    location = row[5]

if age == 'U12':
   print(week, opp, ACscr, OPPscr, location)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before you begin printing the desired rows, output some HTML to set up an appropriate table structure.</p>
<p>When you find a row you want to print, output it in HTML table row format.</p>
<pre><code># begin the table
print("&lt;table&gt;")

# column headers
print("&lt;th&gt;")
print("&lt;td&gt;Week&lt;/td&gt;")
print("&lt;td&gt;Opp&lt;/td&gt;")
print("&lt;td&gt;ACscr&lt;/td&gt;")
print("&lt;td&gt;OPPscr&lt;/td&gt;")
print("&lt;td&gt;Location&lt;/td&gt;")
print("&lt;/th&gt;")

infile = open("Crushers.csv","r")

for line in infile:
    row = line.split(",")
    age = row[0]
    week = row [1]
    opp = row[2]
    ACscr = row[3]
    OPPscr = row[4]
    location = row[5]

    if age == 'U12':
        print("&lt;tr&gt;")
        print("&lt;td&gt;%s&lt;/td&gt;" % week)
        print("&lt;td&gt;%s&lt;/td&gt;" % opp)
        print("&lt;td&gt;%s&lt;/td&gt;" % ACscr)
        print("&lt;td&gt;%s&lt;/td&gt;" % OPPscr)
        print("&lt;td&gt;%s&lt;/td&gt;" % location)
        print("&lt;/tr&gt;")

# end the table
print("&lt;/table&gt;")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First install pandas:</p>
<pre><code>pip install pandas
</code></pre>
<p>Then run:</p>
<pre><code>import pandas as pd

columns = ['age', 'week', 'opp', 'ACscr', 'OPPscr', 'location']
df = pd.read_csv('Crushers.csv', names=columns)

# This you can change it to whatever you want to get
age_15 = df[df['age'] == 'U15']
# Other examples:
bye = df[df['opp'] == 'Bye']
crushed_team = df[df['ACscr'] == '0']
crushed_visitor = df[df['OPPscr'] == '0']
# Play with this

# Use the .to_html() to get your table in html
print(crushed_visitor.to_html())
</code></pre>
<p>You'll get something like:</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;week&lt;/th&gt;
      &lt;th&gt;opp&lt;/th&gt;
      &lt;th&gt;ACscr&lt;/th&gt;
      &lt;th&gt;OPPscr&lt;/th&gt;
      &lt;th&gt;location&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;34&lt;/th&gt;
      &lt;td&gt;U17&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Banyo&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Home&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;40&lt;/th&gt;
      &lt;td&gt;U17&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Aspley&lt;/td&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Home&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;91&lt;/th&gt;
      &lt;td&gt;U12&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;Rochedale&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Home&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
</div>
<div class="post-text" itemprop="text">
<p>First some imports:</p>
<pre><code>import csv
from html import escape
import io
</code></pre>
<p>Now the building blocks - let's make one function for reading the CSV and another function for making the HTML table:</p>
<pre><code>def read_csv(path, column_names):
    with open(path, newline='') as f:
        # why newline='': see footnote at the end of https://docs.python.org/3/library/csv.html
        reader = csv.reader(f)
        for row in reader:
            record = {name: value for name, value in zip(column_names, row)}
            yield record

def html_table(records):
    # records is expected to be a list of dicts
    column_names = []
    # first detect all posible keys (field names) that are present in records
    for record in records:
        for name in record.keys():
            if name not in column_names:
                column_names.append(name)
    # create the HTML line by line
    lines = []
    lines.append('&lt;table&gt;\n')
    lines.append('  &lt;tr&gt;\n')
    for name in column_names:
        lines.append('    &lt;th&gt;{}&lt;/th&gt;\n'.format(escape(name)))
    lines.append('  &lt;/tr&gt;\n')
    for record in records:
        lines.append('  &lt;tr&gt;\n')
        for name in column_names:
            value = record.get(name, '')
            lines.append('    &lt;td&gt;{}&lt;/td&gt;\n'.format(escape(value)))
        lines.append('  &lt;/tr&gt;\n')
    lines.append('&lt;/table&gt;')
    # join the lines to a single string and return it
    return ''.join(lines)
</code></pre>
<p>Now just put it together :)</p>
<pre><code>records = list(read_csv('Crushers.csv', 'age week opp ACscr OPPscr location'.split()))

# Print first record to see whether we are loading correctly
print(records[0])
# Output:
# {'age': 'U13', 'week': '1', 'opp': 'Waterford', 'ACscr': '22', 'OPPscr': '36', 'location': 'Home'}

records = [r for r in records if r['age'] == 'U12']

print(html_table(records))
# Output:
# &lt;table&gt;
#   &lt;tr&gt;
#     &lt;th&gt;age&lt;/th&gt;
#     &lt;th&gt;week&lt;/th&gt;
#     &lt;th&gt;opp&lt;/th&gt;
#     &lt;th&gt;ACscr&lt;/th&gt;
#     &lt;th&gt;OPPscr&lt;/th&gt;
#     &lt;th&gt;location&lt;/th&gt;
#   &lt;/tr&gt;
#   &lt;tr&gt;
#     &lt;td&gt;U12&lt;/td&gt;
#     &lt;td&gt;1&lt;/td&gt;
#     &lt;td&gt;Waterford&lt;/td&gt;
#     &lt;td&gt;0&lt;/td&gt;
#     &lt;td&gt;4&lt;/td&gt;
#     &lt;td&gt;Home&lt;/td&gt;
#   &lt;/tr&gt;
#   &lt;tr&gt;
#     &lt;td&gt;U12&lt;/td&gt;
#     &lt;td&gt;2&lt;/td&gt;
#     &lt;td&gt;North Lakes&lt;/td&gt;
#     &lt;td&gt;12&lt;/td&gt;
#     &lt;td&gt;18&lt;/td&gt;
#     &lt;td&gt;Away&lt;/td&gt;
#   &lt;/tr&gt;
#   ...
# &lt;/table&gt;
</code></pre>
<p>A few notes:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a> works better than line splitting because it also handles quoted values and even quoted values with newlines</p></li>
<li><p><a href="https://docs.python.org/3/library/html.html#html.escape" rel="nofollow noreferrer"><code>html.escape</code></a> is used to escape strings that could potentially contain character <code>&lt;</code> or <code>&gt;</code></p></li>
<li><p>it is often times easier to worh with dicts than tuples</p></li>
<li><p>usually the CSV files contain header (first line with column names) and could be easily loaded using <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader</code></a>; but the <code>Crushers.csv</code> has no header (the data start from very first line) so we build the dicts ourselves in the function <code>read_csv</code></p></li>
<li><p>both functions <code>read_csv</code> and <code>html_table</code> are generalised so they can work with any data, the column names are not "hardcoded" into them</p></li>
<li><p>yes, you could use pandas <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>read_csv</code></a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_html.html" rel="nofollow noreferrer"><code>to_html</code></a> instead :) But it is good to know how to do it without pandas in case you need some customization. Or just as a programming exercise.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Below function takes filename, headers(optional) and delimiter(optional) as input and converts csv to html table and returns as string.
If headers are not provided, assumes header is already present in csv file.</p>
<h1>Converts csv file contents to HTML  formatted table</h1>
<pre><code>def csv_to_html_table(fname,headers=None,delimiter=","):
    with open(fname) as f:
        content = f.readlines()
    #reading file content into list
    rows = [x.strip() for x in content]
    table = "&lt;table&gt;"
    #creating HTML header row if header is provided 
    if headers is not None:
        table+= "".join(["&lt;th&gt;"+cell+"&lt;/th&gt;" for cell in headers.split(delimiter)])
    else:
        table+= "".join(["&lt;th&gt;"+cell+"&lt;/th&gt;" for cell in rows[0].split(delimiter)])
        rows=rows[1:]
    #Converting csv to html row by row
    for row in rows:
        table+= "&lt;tr&gt;" + "".join(["&lt;td&gt;"+cell+"&lt;/td&gt;" for cell in row.split(delimiter)]) + "&lt;/tr&gt;" + "\n"
    table+="&lt;/table&gt;&lt;br&gt;"
    return table
</code></pre>
<p>In your case, function call will look like:</p>
<pre><code>filename="Crushers.csv"
myheader='age,week,opp,ACscr,OPPscr,location'
html_table=csv_to_html_table(filename,myheader)
</code></pre>
</div>
<span class="comment-copy">you can use <code>pandas</code> library to achieve this. <code>pandas</code> have a method named <code>to_html</code>. Here is link <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_html.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/…</a></span>
