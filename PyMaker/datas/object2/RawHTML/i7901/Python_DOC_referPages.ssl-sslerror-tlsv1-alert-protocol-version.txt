<div class="post-text" itemprop="text">
<p>I'm using the REST API for a <a href="https://www.cisco.com/c/en/us/td/docs/wireless/mse/10-2/api/b_cg_CMX_REST_API_Getting_Started_Guide/b_cg_CMX_REST_API_Getting_Started_Guide_chapter_01.html" rel="noreferrer">Cisco CMX device</a>, and trying to write Python code which makes a GET request to the API for information. The code is as follows and is the same as that in the file except with the necessary information changed.</p>
<pre><code>from http.client import HTTPSConnection
from base64 import b64encode


# Create HTTPS connection
c = HTTPSConnection("0.0.0.0")

# encode as Base64
# decode to ascii (python3 stores as byte string, need to pass as ascii 
value for auth)
username_password = b64encode(b"admin:password").decode("ascii")
headers = {'Authorization': 'Basic {0}'.format(username_password)}

# connect and ask for resource
c.request('GET', '/api/config/v1/aaa/users', headers=headers)

# response
res = c.getresponse()

data = res.read()
</code></pre>
<p>However, I am continuously getting the following error: </p>
<pre><code>Traceback (most recent call last):
  File "/Users/finaris/PycharmProjects/test/test/test.py", line 14, in &lt;module&gt;
    c.request('GET', '/api/config/v1/aaa/users', headers=headers)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/client.py", line 1106, in request
    self._send_request(method, url, body, headers)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/client.py", line 1151, in _send_request
    self.endheaders(body)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/client.py", line 1102, in endheaders
    self._send_output(message_body)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/client.py", line 934, in _send_output
    self.send(msg)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/client.py", line 877, in send
    self.connect()
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/http/client.py", line 1260, in connect
    server_hostname=server_hostname)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py", line 377, in wrap_socket
    _context=self)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py", line 752, in __init__
    self.do_handshake()
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py", line 988, in do_handshake
    self._sslobj.do_handshake()
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/ssl.py", line 633, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:645)
</code></pre>
<p>I also tried updating OpenSSL but that had no effect.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same error and google brought me to this question, so here is what I did, hoping that it helps others in a similar situation.</p>
<p>This is applicable for OS X.</p>
<p>Check in the Terminal which version of OpenSSL I had:</p>
<pre><code>$ python3 -c "import ssl; print(ssl.OPENSSL_VERSION)"
&gt;&gt; OpenSSL 0.9.8zh 14 Jan 2016
</code></pre>
<p>As my version of OpenSSL was too old, the accepted answer did not work.</p>
<p>So I had to update OpenSSL. To do this, I updated Python to the latest version (from version 3.5 to version 3.6) with Homebrew, following some of the steps suggested <a href="https://stackoverflow.com/a/27230127/5802289">here</a>:</p>
<pre><code>$ brew update
$ brew install openssl
$ brew install python3
</code></pre>
<p>Then I was having problems with the PATH and the version of python being used, so I just created a new <code>virtualenv</code> making sure that the newest version of python was taken:</p>
<pre><code>$ virtualenv webapp --python=python3.6
</code></pre>
<p>Issue solved.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only thing you have to do is to install <code>requests[security]</code> in your virtualenv. You should not have to use Python 3 (it should work in Python 2.7). Moreover, if you are using a recent version of macOS, you don't have to use <code>homebrew</code> to separately install OpenSSL either.</p>
<pre><code>$ virtualenv --python=/usr/bin/python tempenv  # uses system python
$ . tempenv/bin/activate
$ pip install requests
$ python
&gt;&gt;&gt; import ssl
&gt;&gt;&gt; ssl.OPENSSL_VERSION
'OpenSSL 0.9.8zh 14 Jan 2016'  # this is the built-in openssl
&gt;&gt;&gt; import requests
&gt;&gt;&gt; requests.get('https://api.github.com/users/octocat/orgs')
requests.exceptions.SSLError: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /users/octocat/orgs (Caused by SSLError(SSLError(1, u'[SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:590)'),))
$ pip install 'requests[security]'
$ python  # install requests[security] and try again
&gt;&gt;&gt; import requests
&gt;&gt;&gt; requests.get('https://api.github.com/users/octocat/orgs')
&lt;Response [200]&gt;
</code></pre>
<p><code>requests[security]</code> allows requests to use the latest version of TLS when negotiating the connection. The built-in openssl on macOS supports TLS v1.2.</p>
<blockquote>
<p>Before you install your own version of OpenSSL, ask this question: how is Google Chrome loading <a href="https://github.com" rel="noreferrer">https://github.com</a>?</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>None of the accepted answers pointed me in the right direction, and this is still the question that comes up when searching the topic, so here's my (partially) successful saga.</p>
<p>Background: I run a Python script on a Beaglebone Black that polls the cryptocurrency exchange Poloniex using the <a href="https://github.com/s4w3d0ff/python-poloniex" rel="noreferrer">python-poloniex</a> library. It suddenly stopped working with the TLSV1_ALERT_PROTOCOL_VERSION error.</p>
<p>Turns out that OpenSSL was fine, and trying to force a v1.2 connection was a huge wild goose chase - the library will use the latest version as necessary. The weak link in the chain was actually Python, which only defined <a href="https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2" rel="noreferrer"><code>ssl.PROTOCOL_TLSv1_2</code></a>, and therefore started supporting TLS v1.2, since version 3.4.</p>
<p>Meanwhile, the version of Debian on the Beaglebone considers Python 3.3 the latest. The workaround I used was to install Python 3.5 from source (3.4 might have eventually worked too, but after hours of trial and error I'm done):</p>
<pre><code>sudo apt-get install build-essential checkinstall
sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tgz
sudo tar xzf Python-3.5.4.tgz
cd Python-3.5.4
./configure
sudo make altinstall
</code></pre>
<p>Maybe not all those packages are strictly necessary, but installing them all at once saves a bunch of retries. The <code>altinstall</code> prevents the install from clobbering existing python binaries, installing as <code>python3.5</code> instead, though that does mean you have to re-install additional libraries. The <code>./configure</code> took a good five or ten minutes. The <code>make</code> took a couple of hours.</p>
<p>Now this still didn't work until I finally ran</p>
<pre><code>sudo -H pip3.5 install requests[security]
</code></pre>
<p>Which also installs <code>pyOpenSSL</code>, <code>cryptography</code> and <code>idna</code>. I suspect <code>pyOpenSSL</code> was the key, so maybe <code>pip3.5 install -U pyopenssl</code> would have been sufficient but I've spent far too long on this already to make sure.</p>
<p>So in summary, if you get TLSV1_ALERT_PROTOCOL_VERSION error in Python, it's probably because you can't support TLS v1.2. To add support, you need at least the following:</p>
<ul>
<li>OpenSSL 1.0.1</li>
<li>Python 3.4</li>
<li>requests[security]</li>
</ul>
<p>This has got me past TLSV1_ALERT_PROTOCOL_VERSION, and now I get to battle with SSL23_GET_SERVER_HELLO instead.</p>
<p>Turns out this is back to the original issue of Python selecting the wrong SSL version. This can be confirmed by using <a href="https://stackoverflow.com/a/14146031/3697870">this</a> trick to mount a requests session with <code>ssl_version=ssl.PROTOCOL_TLSv1_2</code>. Without it, SSLv23 is used and the SSL23_GET_SERVER_HELLO error appears. With it, the request succeeds.</p>
<p>The final battle was to force TLSv1_2 to be picked when the request is made deep within a third party library. Both <a href="https://stackoverflow.com/a/24166498/3697870">this method</a> and <a href="https://lukasa.co.uk/2013/01/Choosing_SSL_Version_In_Requests/" rel="noreferrer">this method</a> ought to have done the trick, but neither made any difference. My final solution is horrible, but effective. I edited <code>/usr/local/lib/python3.5/site-packages/urllib3/util/ssl_.py</code> and changed</p>
<pre><code>def resolve_ssl_version(candidate):
    """
    like resolve_cert_reqs
    """
    if candidate is None:
        return PROTOCOL_SSLv23

    if isinstance(candidate, str):
        res = getattr(ssl, candidate, None)
        if res is None:
            res = getattr(ssl, 'PROTOCOL_' + candidate)
        return res

    return candidate
</code></pre>
<p>to</p>
<pre><code>def resolve_ssl_version(candidate):
    """
    like resolve_cert_reqs
    """
    if candidate is None:
        return ssl.PROTOCOL_TLSv1_2

    if isinstance(candidate, str):
        res = getattr(ssl, candidate, None)
        if res is None:
            res = getattr(ssl, 'PROTOCOL_' + candidate)
        return res

    return candidate
</code></pre>
<p>and voila, my script can finally contact the server again.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe <code>TLSV1_ALERT_PROTOCOL_VERSION</code> is alerting you that the server doesn't want to talk TLS v1.0  to you. Try to specify TLS v1.2 only by sticking in these lines:</p>
<pre><code>import ssl
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)

# Create HTTPS connection
c = HTTPSConnection("0.0.0.0", context=context)
</code></pre>
<p>Note, you may need sufficiently new versions of Python (2.7.9+ perhaps?) and possibly OpenSSL (I have "OpenSSL 1.0.2k  26 Jan 2017" and the above seems to work, YMMV)</p>
</div>
<div class="post-text" itemprop="text">
<p>For Mac OS X</p>
<p>1) Update to Python 3.6.5 using the native app installer downloaded from the official Python language website <a href="https://www.python.org/downloads/" rel="nofollow noreferrer">https://www.python.org/downloads/</a> </p>
<p>I've found that the installer is taking care of updating the links and symlinks for the new Python a lot better than homebrew. </p>
<p>2) Install a new certificate using "./Install Certificates.command" which is in the refreshed Python 3.6 directory </p>
<pre><code>&gt; cd "/Applications/Python 3.6/"
&gt; sudo "./Install Certificates.command"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of July 2018, Pypi now requires that clients connecting to it use TLS 1.2. This is an issue if you're using the version of python shipped with MacOS (2.7.10) because it only supports TLS 1.0. You can change the version of ssl that python is using to fix the problem or upgrade to a newer version of python. Use homebrew to install the new version of python outside of the default library location. </p>
<pre><code>brew install python@2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I got this problem too.
In macos, here is the solution:</p>
<ul>
<li><p>Step 1: brew restall python. now you got python3.7 instead of the old python</p></li>
<li><p>Step 2: build the new env base on python3.7. my path is <code>/usr/local/Cellar/python/3.7.2/bin/python3.7</code></p></li>
</ul>
<p>now, you'll not being disturbed by this problem.</p>
</div>
<span class="comment-copy">See <a href="https://github.com/CiscoDevNet/devnet-express-dna-issues/issues/16" rel="nofollow noreferrer">github.com/CiscoDevNet/devnet-express-dna-issues/issues/16</a>. Looks like you are using an old version of OpenSSL in your Python. This is typically the case if you are on a Mac which shipped with a really old and outdated version of OpenSSL.</span>
<span class="comment-copy">I run into this issue on windows getting binary tools for wemos microcontroller. The cause was that google took me the python 2.7.3 (old) version download page I thought it was the newest... currently the 2.7.14 is the latest and it doesn't have this issue anymore, it works "automatically".</span>
<span class="comment-copy">For folks, who are getting this error <code>[SSL: TLSV1_ALERT_PROTOCOL_VERSION]</code> for all <code>pip install</code>s, it is because of the recent TLS deprecation by Python.org sites. See <a href="https://stackoverflow.com/a/49769015/1526703">this answer</a>.</span>
<span class="comment-copy">The accepted answer itself didn't fully cover it, but in the comments I indirectly mentioned needing to update OpenSSL. Apologies that this wasn't more clear, and thanks for adding this!</span>
<span class="comment-copy">If anyone is still having issues this one really helped me: <a href="https://stackoverflow.com/a/46308535/1526702">stackoverflow.com/a/46308535/1526702</a></span>
<span class="comment-copy">Please refer to my answer below. I resolved my issue by installing <code>requests[security]</code>, without using Python3, or using brew to install openssl.</span>
<span class="comment-copy">upgrading to 3.6 solved it on windows 10 as well. thanks.</span>
<span class="comment-copy">Hi, I cannot update to python3 as the script requires python2.7 (download-deps.py from cocos2dx), any suggestions?</span>
<span class="comment-copy">James, what version of MacOS do you have (<code>sw_vers</code>) ? Does <code>xmlrpclib -&gt; httplib -&gt; ssl</code> work for you, as in <a href="https://stackoverflow.com/questions/24289397/searching-pypi-by-topic/24340416#24340416">searching-pypi-by-topic</a> with <code>pypi = ... https: ...</code> not <code>http</code> ?</span>
<span class="comment-copy">worked like a charm!</span>
<span class="comment-copy">@denis the OS version shouldn't matter as much as the OpenSSL version, which you can get with <code>ssl.OPENSSL_VERSION</code>.</span>
<span class="comment-copy">Thank you @Heath! I confirm that I had the same problem running Python2.7 and trying to connect to Poloniex API, and just running <code>pip install requests[security]</code> solved the problem. No need to upgrade to Python3 :) Much appreciated!</span>
<span class="comment-copy">You have OpenSSL 0.9.8 and TLS 1.2 works? I very much doubt this: TLS 1.2 is only supported since OpenSSL 1.0.1.</span>
<span class="comment-copy">TLS 1.2 didn't work with OpenSSL 0.9.8,  but I changed the interpreter to one which had OpenSSL 1.0.2k and TLS 1.2 worked (and thus the call to the API succeeded).</span>
<span class="comment-copy">@SteffenUllrich ah yes, doing <code>python -c 'import ssl; print(ssl.OPENSSL_VERSION)'</code> confirms that my (homebrew installed) Python is linked with "OpenSSL 1.0.2k  26 Jan 2017". The 0.9.8zh version string I showed was from running <code>openssl version</code>, which must be my older system-wide installation.</span>
<span class="comment-copy">At first this did not work for me (after other methods had not worked either, so I was pretty disillusioned about the prospects of using Python 3) but part of the sudo command's initial failed results suggested that I use sudo's -H flag. Doing so, make a smooth update.</span>
