<div class="post-text" itemprop="text">
<p>Is there any tool, package or module available which give me details of caller and callee function, all function call and system calls?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module:</p>
<blockquote>
<p>The inspect module provides several useful functions to help get
  information about live objects such as modules, classes, methods,
  functions, tracebacks, frame objects, and code objects. For example,
  it can help you examine the contents of a class, retrieve the source
  code of a method, extract and format the argument list for a function,
  or get all the information you need to display a detailed traceback.</p>
<p>There are four main kinds of services provided by this module: type
  checking, getting source code, inspecting classes and functions, and
  examining the interpreter stack.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you want to profile your application you can write your own Stack sampler in less than 20 lines in python.</p>
<pre><code>import collections
import signal

class Sampler(object):
   def __init__(self, interval=0.001):
        self.stack_counts = collections.defaultdict(int)
        self.interval = 0.001

    def _sample(self, signum, frame):
       stack = []
        while frame is not None:
            formatted_frame = '{}({})'.format(frame.f_code.co_name,
                                              frame.f_globals.get('__name__'))
            stack.append(formatted_frame)
            frame = frame.f_back

        formatted_stack = ';'.join(reversed(stack))
        self.stack_counts[formatted_stack] += 1
        signal.setitimer(signal.ITIMER_VIRTUAL, self.interval, 0)

    def start(self):
        signal.signal(signal.VTALRM, self._sample)
        signal.setitimer(signal.ITIMER_VIRTUAL, self.interval, 0)
</code></pre>
<p>Calling Sampler.start() will set the Unix signal ITIMER_VIRTUAL to be sent after the number of seconds specified by interval. This will essentially create a repeating alarm that will run the _sample method.</p>
<p>When the signal fires, the _sample function will save the application’s stack, and keeps track of how many times we’ve sampled that same stack. Frequently sampled stacks correspond to code paths where the application is spending a lot of time.</p>
<p>Code borrowed from <a href="https://www.nylas.com/blog/performance/" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">What sort of details?</span>
<span class="comment-copy">You mean profiling, use <code>cProfile</code></span>
<span class="comment-copy">subprocess / multiprocessing modules will make system calls and os module can help you in track.</span>
<span class="comment-copy">@akashkarothiya, I am looking for static byte code generation and then inspecting all the function and system calls. Thanx in advance.</span>
