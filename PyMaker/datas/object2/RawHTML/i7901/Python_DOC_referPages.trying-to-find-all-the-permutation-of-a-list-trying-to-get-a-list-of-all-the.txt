<div class="post-text" itemprop="text">
<p>here's the code :</p>
<pre><code>L2 = ['+', '-', '*', '/']
combi_operation = [0, 0, 0, 0]
combi2 = []
for x in L2:
    combi_operation[0] = x
    for y in L2:
        combi_operation[1] = y
        for z in L2:
            combi_operation[2] = z
            for w in L2:
                combi_operation[3] = w
                combi2.append(combi_operation)
</code></pre>
<p>this is the value of combi2 at the end : </p>
<p><code>[['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ['/', '/', '/', '/'], ...]</code></p>
<p>when i make a line of code that prints combi_operation like this :</p>
<pre><code>combi_operation = [0, 0, 0, 0]
combi2 = []
for x in L2:
    combi_operation[0] = x
    for y in L2:
        combi_operation[1] = y
        for z in L2:
            combi_operation[2] = z
            for w in L2:
                combi_operation[3] = w
                combi2.append(combi_operation)
                print(combi_operation)
</code></pre>
<p>this is what i get : </p>
<pre><code>['+', '+', '+', '+']
['+', '+', '+', '-']
['+', '+', '+', '*']
['+', '+', '+', '/']
['+', '+', '-', '+']
['+', '+', '-', '-']
['+', '+', '-', '*']
['+', '+', '-', '/']
['+', '+', '*', '+']
['+', '+', '*', '-']
['+', '+', '*', '*']
['+', '+', '*', '/']
['+', '+', '/', '+']
['+', '+', '/', '-']
['+', '+', '/', '*']
['+', '+', '/', '/']
['+', '-', '+', '+']
['+', '-', '+', '-']
['+', '-', '+', '*']
['+', '-', '+', '/']
['+', '-', '-', '+']
['+', '-', '-', '-']
['+', '-', '-', '*']
['+', '-', '-', '/']
['+', '-', '*', '+']
['+', '-', '*', '-']
['+', '-', '*', '*']
['+', '-', '*', '/']
['+', '-', '/', '+']
['+', '-', '/', '-']
['+', '-', '/', '*']
['+', '-', '/', '/']
['+', '*', '+', '+']
['+', '*', '+', '-']
['+', '*', '+', '*']
['+', '*', '+', '/']
['+', '*', '-', '+']
['+', '*', '-', '-']
['+', '*', '-', '*']
['+', '*', '-', '/']
['+', '*', '*', '+']
['+', '*', '*', '-']
['+', '*', '*', '*']
['+', '*', '*', '/']
['+', '*', '/', '+']
['+', '*', '/', '-']
['+', '*', '/', '*']
['+', '*', '/', '/']
['+', '/', '+', '+']
['+', '/', '+', '-']
['+', '/', '+', '*']
['+', '/', '+', '/']
['+', '/', '-', '+']
['+', '/', '-', '-']
['+', '/', '-', '*']
['+', '/', '-', '/']
['+', '/', '*', '+']
['+', '/', '*', '-']
['+', '/', '*', '*']
['+', '/', '*', '/']
['+', '/', '/', '+']
['+', '/', '/', '-']
['+', '/', '/', '*']
['+', '/', '/', '/']
['-', '+', '+', '+']
['-', '+', '+', '-']
['-', '+', '+', '*']
['-', '+', '+', '/']
['-', '+', '-', '+']
['-', '+', '-', '-']
['-', '+', '-', '*']
['-', '+', '-', '/']
['-', '+', '*', '+']
['-', '+', '*', '-']
['-', '+', '*', '*']
['-', '+', '*', '/']
['-', '+', '/', '+']
['-', '+', '/', '-']
['-', '+', '/', '*']
['-', '+', '/', '/']
['-', '-', '+', '+']
['-', '-', '+', '-']
['-', '-', '+', '*']
['-', '-', '+', '/']
['-', '-', '-', '+']
['-', '-', '-', '-']
['-', '-', '-', '*']
['-', '-', '-', '/']
['-', '-', '*', '+']
['-', '-', '*', '-']
['-', '-', '*', '*']
['-', '-', '*', '/']
['-', '-', '/', '+']
['-', '-', '/', '-']
['-', '-', '/', '*']
['-', '-', '/', '/']
['-', '*', '+', '+']
['-', '*', '+', '-']
['-', '*', '+', '*']
['-', '*', '+', '/']
['-', '*', '-', '+']
['-', '*', '-', '-']
['-', '*', '-', '*']
['-', '*', '-', '/']
['-', '*', '*', '+']
['-', '*', '*', '-']
['-', '*', '*', '*']
['-', '*', '*', '/']
['-', '*', '/', '+']
['-', '*', '/', '-']
['-', '*', '/', '*']
['-', '*', '/', '/']
['-', '/', '+', '+']
['-', '/', '+', '-']
['-', '/', '+', '*']
['-', '/', '+', '/']
['-', '/', '-', '+']
['-', '/', '-', '-']
['-', '/', '-', '*']
['-', '/', '-', '/']
['-', '/', '*', '+']
['-', '/', '*', '-']
['-', '/', '*', '*']
['-', '/', '*', '/']
['-', '/', '/', '+']
['-', '/', '/', '-']
['-', '/', '/', '*']
['-', '/', '/', '/']
['*', '+', '+', '+']
['*', '+', '+', '-']
['*', '+', '+', '*']
['*', '+', '+', '/']
['*', '+', '-', '+']
['*', '+', '-', '-']
['*', '+', '-', '*']
['*', '+', '-', '/']
['*', '+', '*', '+']
['*', '+', '*', '-']
['*', '+', '*', '*']
['*', '+', '*', '/']
['*', '+', '/', '+']
['*', '+', '/', '-']
['*', '+', '/', '*']
['*', '+', '/', '/']
['*', '-', '+', '+']
['*', '-', '+', '-']
['*', '-', '+', '*']
['*', '-', '+', '/']
['*', '-', '-', '+']
['*', '-', '-', '-']
['*', '-', '-', '*']
['*', '-', '-', '/']
['*', '-', '*', '+']
['*', '-', '*', '-']
['*', '-', '*', '*']
['*', '-', '*', '/']
['*', '-', '/', '+']
['*', '-', '/', '-']
['*', '-', '/', '*']
['*', '-', '/', '/']
['*', '*', '+', '+']
['*', '*', '+', '-']
['*', '*', '+', '*']
['*', '*', '+', '/']
['*', '*', '-', '+']
['*', '*', '-', '-']
['*', '*', '-', '*']
['*', '*', '-', '/']
['*', '*', '*', '+']
['*', '*', '*', '-']
['*', '*', '*', '*']
['*', '*', '*', '/']
['*', '*', '/', '+']
['*', '*', '/', '-']
['*', '*', '/', '*']
['*', '*', '/', '/']
['*', '/', '+', '+']
['*', '/', '+', '-']
['*', '/', '+', '*']
['*', '/', '+', '/']
['*', '/', '-', '+']
['*', '/', '-', '-']
['*', '/', '-', '*']
['*', '/', '-', '/']
['*', '/', '*', '+']
['*', '/', '*', '-']
['*', '/', '*', '*']
['*', '/', '*', '/']
['*', '/', '/', '+']
['*', '/', '/', '-']
['*', '/', '/', '*']
['*', '/', '/', '/']
['/', '+', '+', '+']
['/', '+', '+', '-']
['/', '+', '+', '*']
['/', '+', '+', '/']
['/', '+', '-', '+']
['/', '+', '-', '-']
['/', '+', '-', '*']
['/', '+', '-', '/']
['/', '+', '*', '+']
['/', '+', '*', '-']
['/', '+', '*', '*']
['/', '+', '*', '/']
['/', '+', '/', '+']
['/', '+', '/', '-']
['/', '+', '/', '*']
['/', '+', '/', '/']
['/', '-', '+', '+']
['/', '-', '+', '-']
['/', '-', '+', '*']
['/', '-', '+', '/']
['/', '-', '-', '+']
['/', '-', '-', '-']
['/', '-', '-', '*']
['/', '-', '-', '/']
['/', '-', '*', '+']
['/', '-', '*', '-']
['/', '-', '*', '*']
['/', '-', '*', '/']
['/', '-', '/', '+']
['/', '-', '/', '-']
['/', '-', '/', '*']
['/', '-', '/', '/']
['/', '*', '+', '+']
['/', '*', '+', '-']
['/', '*', '+', '*']
['/', '*', '+', '/']
['/', '*', '-', '+']
['/', '*', '-', '-']
['/', '*', '-', '*']
['/', '*', '-', '/']
['/', '*', '*', '+']
['/', '*', '*', '-']
['/', '*', '*', '*']
['/', '*', '*', '/']
['/', '*', '/', '+']
['/', '*', '/', '-']
['/', '*', '/', '*']
['/', '*', '/', '/']
['/', '/', '+', '+']
['/', '/', '+', '-']
['/', '/', '+', '*']
['/', '/', '+', '/']
['/', '/', '-', '+']
['/', '/', '-', '-']
['/', '/', '-', '*']
['/', '/', '-', '/']
['/', '/', '*', '+']
['/', '/', '*', '-']
['/', '/', '*', '*']
['/', '/', '*', '/']
['/', '/', '/', '+']
['/', '/', '/', '-']
['/', '/', '/', '*']
['/', '/', '/', '/']
</code></pre>
<p>and i'd like to turn that into a list of list...</p>
<p>how do i proceed? thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to create a new list each time, otherwise you're modifying adding the same list over and over and over. The easiest way to do that is to clone <code>combi_operation</code> each time you append it.</p>
<pre><code>combi2.append(combi_operation[:])
</code></pre>
<p>or</p>
<pre><code>combi2.append(list(combi_operation))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it this way:</p>
<pre><code>L2 = ['+', '-', '*', '/']
combi2 = []
for x in L2:
    for y in L2:
        for z in L2:
            for w in L2:
                combi2.append([x,y,z,w])
</code></pre>
<p>The problem is that you are always modifying the original list, so it modifies the reference you have in combi2. For lists, python stores the references and not the values.</p>
</div>
<div class="post-text" itemprop="text">
<p>The proper way to do this in python is to use the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">product</a> function.</p>
<pre><code>from itertools import product

results = list(product("+-*/", repeat=4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for permutations of a list you can go straigth to itertools:</p>
<pre><code>import itertools
L2 = ['+', '-', '*', '/']
permutations = list(itertools.permutations(L2)) # the result is casted into a list from a generator
</code></pre>
<p>Each element of the resulting list is a tuple, but you can easily cast each element with a comprehension expression</p>
<pre><code>L3 = [list(element) for element in permutations]
</code></pre>
<p>Take a look to the documentation for more info on permutations:</p>
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">https://docs.python.org/2/library/itertools.html#itertools.permutations</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to check out the itertools module from the standard library. What you are making looks like cartesian products. </p>
<p><a href="https://docs.python.org/3.6/library/itertools.html#itertools.product" rel="nofollow noreferrer">https://docs.python.org/3.6/library/itertools.html#itertools.product</a></p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.product('+-*/', repeat=4))
[('+', '+', '+', '+'),
 ('+', '+', '+', '-'),
 ('+', '+', '+', '*'),
 ('+', '+', '+', '/'),
 ('+', '+', '-', '+'),
 ... 
 ('/', '/', '/', '+'),
 ('/', '/', '/', '-'),
 ('/', '/', '/', '*'),
 ('/', '/', '/', '/')]
</code></pre>
<p>Itertools also have combinatoric generator for <a href="https://docs.python.org/3.6/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">permutations</a>, <a href="https://docs.python.org/3.6/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a> and <a href="https://docs.python.org/3.6/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer">combinations with replacement</a>:</p>
<pre><code>product('ABCD', repeat=2)                # AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD
permutations('ABCD', 2)                  # AB AC AD BA BC BD CA CB CD DA DB DC
combinations('ABCD', 2)                  # AB AC AD BC BD CD
combinations_with_replacement('ABCD', 2) # AA AB AC AD BB BC BD CC CD DD
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this:
<code>
from itertools import product
L2 = ['+', '-', '*', '/']
for i in product(L2, repeat=4):
    print(i)
</code></p>
</div>
<span class="comment-copy">okay im editing my post</span>
<span class="comment-copy">thanks! it works! although i'm not sure i understand why it works</span>
<span class="comment-copy">in your original code, <code>combi_append</code> always points to the same list, when you append it to <code>combi2</code>, you just add a reference to the same mutabel list. As you keep changing <code>combi_operation</code>, every single item in combi2 will continue changing, because they are actually pointing to just one single list. This answer will fix that, by making a copy of <code>combi_operation</code> every time you want to append a new combination to <code>combi2</code>. This creates a new list that has no reference to <code>combi_operation</code>.</span>
<span class="comment-copy">This is known as mutability. In python, data types such as dictionaries and lists are mutable. <a href="https://codehabitude.com/2013/12/24/python-objects-mutable-vs-immutable/" rel="nofollow noreferrer">codehabitude.com/2013/12/24/python-objects-mutable-vs-immutable</a></span>
<span class="comment-copy">You can also use a list comprehension <code>[[x, y, z, w] for x in L2 for y in L2 for z in L2 for w in L2]</code></span>
<span class="comment-copy">thx! i tried but it doesnt return me list with duplicate item</span>
<span class="comment-copy">nice! i didn't know there was such a thing, although i'm kind of doing a challenge so im trying to do everything from scratch haha</span>
