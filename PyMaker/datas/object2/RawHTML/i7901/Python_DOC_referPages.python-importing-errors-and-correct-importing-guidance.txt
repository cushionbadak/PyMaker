<div class="post-text" itemprop="text">
<p>My structure is like so</p>
<pre><code>/App
__init__.py
    -/dirA
        -__init__.py
        -a.py
    -/dirB
        -__init__.py
        -b.py
/samy_app
    __init__.py
    settings.py
    urls.py
manage.py 
</code></pre>
<p>Inside of b.py I want to import a.py</p>
<p>So inside of b.py I have </p>
<pre><code>from App.dirA import a
</code></pre>
<p>However the error I'm receiving is "ImportError: No module named 'App'"</p>
<p>I've also tried relative importing with .. but thats not working either. </p>
<p>I would also like to know if I shouldn't put the files in seperate directories like that. It was really for organization. Or should I move them out of the app and place the folders in the same directory as manage.py?</p>
<p>Would really love some help with this. Been trying all day. </p>
<p>sys.path output</p>
<pre><code>['', '/root/django-dev', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/usr/lib/python3.5/lib-dynload', '/usr/lib/python3.5/site-packages', '/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages']
</code></pre>
<p>Thank you everyone for all of the help. Is there maybe something I didnt do when I set up my server? I read the docs and it seems like this import should work without appending any paths...</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe when I've done this, I usually had to do it like this:</p>
<pre><code>from dirA.a import THING_IM_IMPORTING_FROM_A
</code></pre>
<p>where the root of my application would be the <code>App</code> directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are mentioning <code>manage.py</code>, are you using django perhaps ? </p>
<p>Anyway if you are running a script from dirB you will get an error but if you have structure like this:</p>
<pre><code>main.py   
App/
    __init__.py
    dirA/
        __init__.py
        a.py
    dirB
        __init__.py
        b.py
</code></pre>
<p>and in main.py you have 
<code>from App.dirB import b</code></p>
<p>and in <code>b.py</code> you have </p>
<p><code>from App.dirA import a</code> or <code>from ..dirA import a</code> </p>
<p>you should be ok. </p>
<p>In any other case you should probably add ../ ( or absolute path of it ) to your <code>PYTHONPATH</code> </p>
<pre><code>import sys
sys.path.append("../")
</code></pre>
<p>but I think it's not a very good idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>Parent of the <code>App</code> directory should be in <code>PYTHONPATH</code> (or <code>sys.path</code>). If <code>App</code> directory resides in <code>/home/dorian/mega_project</code>, then <code>PYTHONPATH</code> should contain <code>/home/dorian/mega_project</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Edit: I misunderstood the question!</p>
<p>Can you verify /App is a nested directory of a directory on your module search path?</p>
<p>In an interactive session, import sys, and type sys.path. The first entry is the CWD or the directory of the top-level program file. If you don't see a directory there leading up to /App, you'll need to add it, as Python searches this list left-to-right when you're importing a package to find the directory that is its parent. You can either edit the PYTHONPATH environment variable, or create a .pth text file and simply type in the directory leading up to it (i.e., /home/user/Documents/code') and put that in your installation directory for Python, or your site-packages folder.</p>
<p>Once that's done, when you check sys.path you'll see, for example, '/home/user/Documents/code'. And /Apps should be within the code folder in this example.</p>
</div>
<span class="comment-copy">Can you please edit to use indents to show the hierarchy of the files?  I.e., are a and b on the same level?</span>
<span class="comment-copy">@Brad I edited the post</span>
<span class="comment-copy">I get a no module named dirA. Am I missing something in my scripts?</span>
<span class="comment-copy">I also edited my post</span>
<span class="comment-copy">His current import should work as well though, see docs <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">here</a>.  You should be able to use <code>from ..dirA import a</code>.  The absolute import statement should also work.  And <code>App</code> does not need to be in the pythonpath because the import also looks in the directory containing the script.</span>
<span class="comment-copy">Which part isnt a good idea?</span>
<span class="comment-copy">Adding <code>../</code> to your <code>PYTHONPATH</code></span>
<span class="comment-copy">Yes I'm using django</span>
<span class="comment-copy">Than you should have no problem when you are running from the top using <code>manage.py</code> and you shouldn't have main scripts in any of the directories. If you need to run a specific commands use writing custom django manage.py commands like this  <a href="https://docs.djangoproject.com/en/1.11/howto/custom-management-commands/" rel="nofollow noreferrer">docs.djangoproject.com/en/1.11/howto/custom-management-commands</a> Anyway this depends on specifics on your project and needs but you should rethink your directory structure, I guess. All depends on what's in dirA and dirB and which file are you trying to run.</span>
<span class="comment-copy">well the first entry is ' '. is that a problem? haha the second is /root/django-dev</span>
<span class="comment-copy">Which approach is the correct one? edit the PYTHONPATH env variable or creating a .pth text file</span>
<span class="comment-copy">No, '' just means the directory your interactive session is opened in. You'll always see the empty string as the first entry. In fact, if you navigate to the parent directory of /App and open an interactive session, and do your import from there, it should work, too, because your current directory will be the parent of /App.</span>
<span class="comment-copy">Both do the same thing, they're both correct! The PYTHONPATH edit is more common, but I actually like making a simple text file that ends in .pth that I can edit at any time and add multiple lines to for as many different parent directories as I want to add.</span>
<span class="comment-copy">I don't think he should need to edit the pythonpath here.  Read section 6.1.2 directly from the docs <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">here</a>.  Imports search not only the pythonpath but also the directory containing the input script.</span>
