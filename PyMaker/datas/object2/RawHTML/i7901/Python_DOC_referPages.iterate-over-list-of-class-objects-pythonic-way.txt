<div class="post-text" itemprop="text">
<p>I have a list <code>test_cases</code> with class objects. Every object has an attribute called <code>ident</code>. 
I want to iterate over all objects from list and do something with value under <code>ident</code></p>
<p>This is my code:</p>
<pre><code>class TestCase:
    def __init__(self, title, ident, description):
        self.title = title
        self.ident = ident
        self.description = description

test_cases = []
test_cases.append(TestCase(**tc_dict)

i = 0
while i != len(test_cases):
    print test_cases[i].ident
    i += 1
</code></pre>
<p>It works fine, but what I want to ask, if there is more 'pythonic' way for do that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>for</code> loop to iterate over the objects directly (as opposed to iterating over their indexes):</p>
<pre><code>for test_case in test_cases:
    print test_case.ident
</code></pre>
<p>This is the generic way, and should be used 99% of the time when you want to loop over objects. It works perfectly here and is probably the ideal solution.</p>
<p>If you ever do need the indexes, you should use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a>:</p>
<pre><code>for index, test_case in enumerate(test_cases):
    print index, test_case.ident
</code></pre>
<p>It's still looping over the objects, but it's simultaneously receiving their indexes from <code>enumerate</code>.</p>
<hr/>
<p><strong>In your particular use case</strong>, there is another option though. If you have <em>a lot</em> of objects, it might be slow to print them out one by one (calling <code>print</code> is rather expensive). If performance turns out to be an issue, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> to join the values beforehand, and then print it all out once:</p>
<pre><code>print '\n'.join(tc.ident for tc in test_cases)
</code></pre>
<p>I personally recommend the first method, and would only refer to the latter when you need to print out <em>a lot</em> of stuff and actually can see the performance issue with your naked eye.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you can replace your while loop by a for loop</p>
<pre><code>for i in range(len(test_cases)):
    print test_cases[i].indent
</code></pre>
<p>However, looping over an index and accessing an element by using that index is often a code smell in python. Better would simply be to loop over the elements</p>
<pre><code>for test_case in test_cases:
    print test_case.indent
</code></pre>
</div>
<span class="comment-copy">could you provide the test_cases values??(an example of the list)</span>
<span class="comment-copy">Miraculously, I can't find a past SO question about this; nevertheless, it's been discussed at length, e.g. this talk from PyCon 2013. <a href="https://nedbatchelder.com/text/iter.html" rel="nofollow noreferrer">nedbatchelder.com/text/iter.html</a></span>
<span class="comment-copy">nice one Markus, I guess adding a check hasattr(object, 'attribute') in      print '\n'.join(tc.ident for tc in test_cases) will be safe.</span>
<span class="comment-copy">Well you probably shouldn't randomly have objects of different type in your list. OP's example has <code>TestCase</code> class, so if you mix in objects that don't duck along with <code>TestCase</code>, it's quite likely supposed to raise an error.</span>
