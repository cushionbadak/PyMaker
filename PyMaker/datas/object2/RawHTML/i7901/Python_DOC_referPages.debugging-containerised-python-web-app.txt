<div class="post-text" itemprop="text">
<p>I have made this first docker container, and it works as per the <code>Dockerfile</code>.</p>
<pre><code>FROM python:3.5-slim

RUN apt-get update &amp;&amp; \
    apt-get -y install gcc mono-mcs &amp;&amp; \
        apt-get -y install vim &amp;&amp; \
        apt-get -y install nano &amp;&amp; \
            rm -rf /var/lib/apt/lists/*

RUN mkdir -p /statics/js

VOLUME ["/statics/"]

WORKDIR /statics/js

COPY requirements.txt /opt/requirements.txt

RUN pip install -r /opt/requirements.txt

EXPOSE 8080

CMD ["python", "/statics/js/app.py"]
</code></pre>
<p>after running this command:</p>
<blockquote>
<p>docker run -it -p 8080:8080 -v
  ~/Development/my-Docker-builds/pythonReact/statics/:/statics/ -d 
  ciasto/pythonreact:v2</p>
</blockquote>
<p>and when I open the page <code>localhost:8080</code> i get error:</p>
<pre><code>A server error occurred.  Please contact the administrator.
</code></pre>
<p>but if I run <a href="https://github.com/sanfx/pythonReact/blob/master/statics/js/app.py" rel="nofollow noreferrer">this application</a> normally, i.e. not containerised directly on my host machine: it works fine.</p>
<p>So I want to know what is causing server error. How do I debug a python app that runs via container to know what is causing it to not work. or what am I doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Mainly, this:</p>
<pre><code>config.paths['static_files'] = 'statics'
</code></pre>
<p>Should be:</p>
<pre><code>config.paths['static_files'] = '/statics'
</code></pre>
<hr/>
<p>I've got your application up and running with your 'Hello World'</p>
<p>Did these changes:</p>
<p>1) The mentioned <code>config.paths['static_files'] = '/statics'</code></p>
<p>2) This Dockerfile (<strong>removed VOLUME</strong>)</p>
<pre><code>FROM python:3.5-slim

RUN apt-get update &amp;&amp; \
    apt-get -y install gcc mono-mcs &amp;&amp; \
    apt-get -y install vim &amp;&amp; \
    apt-get -y install nano &amp;&amp; \
        rm -rf /var/lib/apt/lists/*

COPY requirements.txt /opt/requirements.txt

RUN pip install -r /opt/requirements.txt

COPY ./statics/ /statics/
COPY app.py /app/app.py
WORKDIR /statics/js

EXPOSE 8080

CMD ["python", "/app/app.py"]
</code></pre>
<p>3) Moved the non-static app.py to a proper place: root of the project.</p>
<p>4) Run with: <code>docker build . -t pyapp</code>, then <code>docker run -p 8080:8080 -it pyapp</code></p>
<p>You should see <code>Serving on port 8080...</code> from terminal output. And <code>Hello World</code> in browser.</p>
<p>I've forked your Github project and did a <a href="https://github.com/sanfx/pythonReact/pull/1" rel="nofollow noreferrer">pull-request</a>.</p>
<hr/>
<p>Edit:</p>
<p>If you need make changes when you develop, run the container with a volume to override the app that is packed in the image. For example:</p>
<pre><code>docker run -v ./static/js/:/static/js -p 8080:8080 -it pyapp
</code></pre>
<p>You can have as many volumes as you want, but the app is already packed in the image and ready to push somewhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer"><code>pdb</code></a> to debug Python code in CLI. To achieve this, you just have to import <code>pdb</code> and call <code>pdb.set_trace()</code> where you would like to have a breakpoint in your Python code. Basically you have to insert the following line where you want a breakpoint:</p>
<pre><code>import pdb; pdb.set_trace()
</code></pre>
<p>Then you have to run your Python code interactively.</p>
<p>You could do that by running <code>bash</code> interactively in your container with</p>
<pre><code>docker run -it -p 8080:8080 -v ~/Development/my-Docker-builds/pythonReact/statics/:/statics/ ciasto/pythonreact:v2 /bin/bash
</code></pre>
<p>and then running manually your app with</p>
<pre><code>root@5910f24d0d8a:/statics/js# python /statics/js/app.py
</code></pre>
<p>When the code will reach the breakpoint, it will pause and a prompt will be shown where you can type commands to inspect your execution.
For more detail about the available commands, you can give a look at <a href="https://docs.python.org/3/library/pdb.html#debugger-commands" rel="nofollow noreferrer">the pdb commands documentation</a>.</p>
<hr/>
<p>Also, I noted that you are building your image using the <code>python:3.5-slim</code> base image which is a (very) light Python image which does not include all is commonly included in a Python distribution.</p>
<p>From <a href="https://hub.docker.com/_/python/" rel="nofollow noreferrer">the Python images page</a>:</p>
<blockquote>
<p>This image does not contain the common packages contained in the default tag and <strong>only contains the minimal packages needed to run python</strong>. Unless you are working in an environment where only the python image will be deployed and you have space constraints, <strong>we highly recommend using the default image</strong> of this repository.</p>
</blockquote>
<p>Maybe using the standard <code>python:3.5</code> image instead would solve your issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a quick tip for debugging containerized applications. If your application is failing with container crashed/stopped. Just launch the container image with <code>CMD/ENTRYPOINT</code> as  <code>/bin/bash</code> then manually start the application once you have the container shell you can debug the application as per normal Linux system. <code>CMD</code> is straightforward to override as per <code>ENTRYPOINT</code> just use <code>--entrypoint</code> flag with <code>docker run</code> command.  </p>
</div>
<span class="comment-copy">Quick question: why would you pack the whole app inside the container ?</span>
<span class="comment-copy">It's one of the main features of docker: pack applications in images and deliver them. If you need to develop and get changes refreshed quickly, you can <code>docker run</code> with a volume. I will add it to the answer</span>
<span class="comment-copy">ok thanks I will give it a try. I  didn't thought I can just jump into the same container and use debugger.</span>
<span class="comment-copy">actually I am fully aware of debugger but whats bothering me is tat the app works if I run on host mac OS machine directly but not on Linux container</span>
<span class="comment-copy">following your steps: I get this message: <code>Default renderer not in renders, automatically switching to kajiki app_globals not provided and lib.app_globals.Globals is not available. helpers not provided and lib.helpers is not available.</code></span>
<span class="comment-copy">you are using the <code>python:3.5-slim</code> image as your Dockerfile base. Did you try with the standard <code>python:3.5</code>?</span>
<span class="comment-copy">tried didn't helped also tried python 3.4 which is most compatible and tested on with <code>dukpy</code> required for rendering javascript. still didn't work, however I am on <code>Debian 4.9.2-10</code> with <code>gcc version 4.9.2</code> .</span>
