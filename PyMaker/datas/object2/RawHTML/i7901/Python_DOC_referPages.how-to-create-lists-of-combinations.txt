<div class="post-text" itemprop="text">
<p>I have generated all possible combinations using elements in a list, as explained <a href="https://stackoverflow.com/questions/17176887/python-get-all-permutation-of-a-list-w-o-repetitions">here</a>. Now, I would like to know how to save each combination as a list.
I get this output:</p>
<pre><code>[('A',),
 ('B',),
 ('A','B')
  ......]
</code></pre>
<p>I would get something like this:</p>
<pre><code>[['A'],['B'],['AB'], ...... ]
</code></pre>
<p>Is there a simple way to implement it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>map</code> like so:</p>
<pre><code>combinations = [('A',),
                ('B',),
                ('A','B')]

combinations_list = map(list, combinations)
</code></pre>
<p>Which would return a <code>generator</code> (Python3) or a <code>list</code> (Python2). If you want a <code>list</code> just cast it to list:</p>
<pre><code>combinations_list = list(map(list, combinations))
</code></pre>
<p>This would convert the inner tuple structure to a list:</p>
<pre><code>[("A"), ("B"), ("A", "B")] -&gt; [["A"], ["B"], ["A", "B"]]
</code></pre>
<p>If you want to also flatten the tuple to get the following result:</p>
<pre><code>[("A"), ("B"), ("A", "B")] -&gt; [["A"], ["B"], ["AB"]]
</code></pre>
<p>You should change the first argument of the <code>map</code> for this:</p>
<pre><code>lambda sub_tuple: ["".join(sub_tuple)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're saying you have a list of tuples, and you want a list of lists, you can convert it using</p>
<pre><code>list_of_lists = [list(t) for t in list_of_tuples]
</code></pre>
<p>or you could use <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>.</p>
<p>In Python 2:</p>
<pre><code>list_of_lists = map(list, list_of_tuples)
</code></pre>
<p>In Python 3:</p>
<pre><code>list_of_lists = list(map(list, list_of_tuples))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following the <a href="https://stackoverflow.com/a/17176932/2454357">example</a> linked by the OP:</p>
<pre><code>from itertools import combinations
lis = ['A', 'B', 'C', 'D']
result = []
for i in range(1, len(lis)+1):  

    result+=[''.join(c) for c in combinations(lis, i)]

print(result)
</code></pre>
<p>gives </p>
<pre><code>['A', 'B', 'C', 'D', 'AB', 'AC', 'AD', 'BC', 'BD', 'CD', 'ABC', 'ABD', 'ACD', 'BCD', 'ABCD']
</code></pre>
<p><strong>EDIT</strong>:</p>
<p>The same as one-liner:</p>
<pre><code>result = [''.join(c) for i in range(1,len(lis)+1) for c in combinations(lis,i)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a list comprehension with <code>str.join</code>:</p>
<pre><code>&gt;&gt;&gt; combinations = [('A',), ('B',), ('A','B')]
&gt;&gt;&gt; [[''.join(comb)] for comb in combinations]
[['A'], ['B'], ['AB']]
</code></pre>
<p>Instead of the list-comprehension you could also use a generator expression:</p>
<pre><code>&gt;&gt;&gt; combs_as_lists = ([''.join(comb)] for comb in combinations)
&gt;&gt;&gt; for comb in combs_as_lists:
...     print(comb)
['A']
['B']
['AB']
</code></pre>
</div>
<span class="comment-copy">First decide if you want each combination as a <b>list</b> or as a <b>string</b> (<code>'AB'</code> is a string, while <code>['A', 'B']</code> is a list of two strings).</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> returns <code>iterator</code> object only in <b>Python 3</b>, in <b>Python 2</b> <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> returns <code>list</code> object (while <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow noreferrer"><code>itertools.imap</code></a> returns iterator)</span>
<span class="comment-copy">You're right, should've pointed it out. I'm getting really used to working only in Python3.</span>
<span class="comment-copy">that's ok, <b>Python 3</b> is great</span>
