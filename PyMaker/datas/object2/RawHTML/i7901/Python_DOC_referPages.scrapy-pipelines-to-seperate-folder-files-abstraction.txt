<div class="post-text" itemprop="text">
<p>I currently finalising a Scrapy project however I have quite a lengthy <code>pipelines.py</code> file.</p>
<p>I noticed that in my <code>settings.py</code> the pipe lines are show as follows (trimmed down):</p>
<pre><code>ITEM_PIPELINES = {
     'proj.pipelines.MutatorPipeline': 200,
     'proj.pipelines.CalculatorPipeline': 300,
     'proj.pipelines.SaveToFilePipeline': 500,
}
</code></pre>
<p>I have tried the following ways to rectify this.</p>
<p>1.) I created a new file/folder and tried referencing it from pipeline in the same manner.</p>
<p>Folder was <code>myPipelines/Test.py</code> with a class name <code>TestPipeline</code> then referenced in pipeline settings as <code>proj.myPipelines.Test.TestPipeline': 100,</code>.</p>
<p>This threw me errors.</p>
<p>I then thought I could export the module and import into my current <code>pipelines.py</code> and it would take the reference from that. I added an empty <code>__init__.py</code> in my <code>myPipelines</code> directory and then added <code>from myPipelines.Test import TestPipeline</code> but scrapy still throws an error of...</p>
<pre><code>Raise NameError("Module '%s' doesn't define any object named '%s'" % (module, name))
exceptions.NameError: Module 'proj.pipelines' doesn't define any object named 'TestPipeline'.
</code></pre>
<p>Many thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you start a scrapy project, you get a directory tree like this:</p>
<pre><code>$ scrapy startproject multipipeline
$ tree
.
├── multipipeline
│   ├── __init__.py
│   ├── items.py
│   ├── middlewares.py
│   ├── pipelines.py
│   ├── settings.py
│   └── spiders
│       ├── example.py
│       └── __init__.py
└── scrapy.cfg
</code></pre>
<p>And the generated <code>pipelines.py</code> looks like this:</p>
<pre><code>$ cat multipipeline/pipelines.py 
# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html


class MultipipelinePipeline(object):
    def process_item(self, item, spider):
        return item
</code></pre>
<p>But your scrapy project can reference any Python class as item pipelines. One option is to convert the generated one-file <code>pipelines</code> module to a package within its own directory, with submodules.
Notice the <code>__init__.py</code> file inside the <code>pipelines/</code> dir:</p>
<pre><code>$ tree
.
├── multipipeline
│   ├── __init__.py
│   ├── items.py
│   ├── middlewares.py
│   ├── pipelines
│   │   ├── __init__.py
│   │   ├── one.py
│   │   ├── three.py
│   │   └── two.py
│   ├── settings.py
│   └── spiders
│       ├── example.py
│       └── __init__.py
└── scrapy.cfg
</code></pre>
<p>The individual modules inside the <code>pipelines/</code> dir could look like this:</p>
<pre><code>$ cat multipipeline/pipelines/two.py 
# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html
import logging


logger = logging.getLogger(__name__)


class MyPipelineTwo(object):
    def process_item(self, item, spider):
        logger.debug(self.__class__.__name__)
        return item
</code></pre>
<p>You can read <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">more about packages here</a>.</p>
<blockquote>
<p>The <code>__init__.py</code> files are required to make Python treat the
  directories as containing packages; this is done to prevent
  directories with a common name, such as string, from unintentionally
  hiding valid modules that occur later on the module search path. In
  the simplest case, <code>__init__.py</code> can just be an empty file, but it can
  also execute initialization code for the package or set the <code>__all__</code>
  variable, described later.</p>
</blockquote>
<p>And your <code>settings.py</code> would contain something like this:</p>
<pre><code>ITEM_PIPELINES = {
    'multipipeline.pipelines.one.MyPipelineOne': 100,
    'multipipeline.pipelines.two.MyPipelineTwo': 200,
    'multipipeline.pipelines.three.MyPipelineThree': 300,
}
</code></pre>
</div>
