<div class="post-text" itemprop="text">
<p>I went ahead and downloaded the latest version of python3 onto my mac from python.org/downloads/, however, I was having trouble using pip in my terminal, so I used Homebrew to install python via the command line. It looks like Homebrew installed a 2.x version. I also know that my mac already has some python2.x version built in. I would like to remove the 2.x versions and only use the python3.6.1 that I have. How can I accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several aspects to your question: invoking different major Python versions, removing unneeded Homebrew-installed packages, and identifying which installation is in use.</p>
<hr/>
<p>Major Python versions, 2 and 3, use different command names to invoke them. The first, <code>python</code>, uses the system default according to your configured <code>PATH</code> environment variable and <em>should</em> default to Python 2, but does not on all systems. Reference: <a href="https://www.python.org/dev/peps/pep-0394/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0394/</a></p>
<p>Instead, <strong>explicitly invoke the version you want</strong>, e.g. by running <code>python3</code>. Note that virtual environments (created by running <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer"><code>python3 -m venv &lt;name&gt;</code></a> or <a href="https://virtualenv.pypa.io/en/stable/userguide/" rel="nofollow noreferrer"><code>virtualenv</code></a>) will create an isolated <em>environment</em> using the Python version of your choice where <code>python</code> will always use that version, and <code>pip</code> will install packages relative to, instead of system-wide, which may avoid the requirement of superuser (<code>sudo</code>) privileges.</p>
<p>Note that Homebrew might not override the default versions provided by the system, requiring you to make changes to your <code>PATH</code> to force Homebrew's versions to be preferred.  After installing a package Homebrew will inform you of this type of information, and you can get the messages later by running: <code>brew info &lt;package&gt;</code></p>
<p>Uninstalling a brew-installed package requires running: <code>brew uninstall &lt;package&gt;</code></p>
<p>For more information, run: <code>brew help</code></p>
<hr/>
<p>As mentioned above, identifying just which Python you're using starts with the <code>PATH</code>. To quickly identify the executable you invoke when typing <code>python</code>, <code>python2</code>, or <code>python3</code> into your shell is by running: <code>which python</code> â€” this can help identify if you're using the Homebrew installed version or the system version, or if you are using a version from an active virtual environment. You can also use <code>which</code> to identify the <code>pip</code> or <code>pip3</code> command location.</p>
<p>This gets you the first part of the equation. The second then boils down to: where does Python think things are?  Invoking it then running the following will tell you exactly where it thinks things (imports) are:</p>
<pre><code>import sys, print
pprint(sys.path)
</code></pre>
<p>This can help track down issues related to why you can't import that package you just installed with <code>pip</code>.</p>
<hr/>
<p>I can <em>highly recommend</em> using a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">virtual environment</a> to isolate your projects from system level packages and differences. Within one, <code>python</code> and <code>pip</code> will basically always behave as expected, as you determined when creating the environment.</p>
</div>
<span class="comment-copy">Honestly, you might want to look into <code>virtualenv</code></span>
