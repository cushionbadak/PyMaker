<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to use <code>inspect</code> like so:</p>
<pre><code>import inspect
import operator

inspect.signature(operator.add)
</code></pre>
<p>however I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "D:\ProgramFiles\Anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 2881, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-82-c98d0a3485c3&gt;", line 1, in &lt;module&gt;
    inspect.signature(operator.__add__)
  File "D:\ProgramFiles\Anaconda3\lib\inspect.py", line 3002, in signature
    return Signature.from_callable(obj, follow_wrapped=follow_wrapped)
  File "D:\ProgramFiles\Anaconda3\lib\inspect.py", line 2752, in from_callable
    follow_wrapper_chains=follow_wrapped)
  File "D:\ProgramFiles\Anaconda3\lib\inspect.py", line 2231, in _signature_from_callable
    skip_bound_arg=skip_bound_arg)
  File "D:\ProgramFiles\Anaconda3\lib\inspect.py", line 2061, in _signature_from_builtin
    raise ValueError("no signature found for builtin {!r}".format(func))
ValueError: no signature found for builtin &lt;built-in function add&gt;
</code></pre>
<p>I found a similar thread on this <a href="https://stackoverflow.com/questions/10920499/get-built-in-method-signature-python">here</a>, however this was a long time ago and the issues have all been marked duplicate and state that they would like to be able to give the C functions a signature definition that would allow the behavior specified in that post, back before 3.4.  The non duplicate page is <a href="http://bugs.python.org/issue17481" rel="nofollow noreferrer">here</a>.  However, despite this, it looks like some C functions are still not <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">inspectable</a> as of 3.6.1.  This doesn't make much sense for operator.add() however, since that doesn't seem like it should delegate to a C function, and even if it did, would be a use case for the previous signature behavior the python bug report brought up earlier (so it confuses me why I can't use <code>inspect.signature</code> for an operator.add.</p>
<p>I'm not looking for 1:1 mapping of args to functions, that simply doesn't work with my setup, which doesn't just include operator functions or builtin, but any function.  I also know I could wrap the functions in another function, however in a general case this means that for each function that has this issue i would need to make a personal wrapper for <code>inspect.signature()</code> to work. I would like to know if what I describe above is possible/ a minimal workaround (say a generalized wrapper where signature of the wrapper would match the signature of the function it wraps in terms of number of arguments), and if not, why not. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>This doesn't make much sense for operator.add() however, since that doesn't seem like it should delegate to a C function</p>
</blockquote>
<p><a href="https://github.com/python/cpython/blob/3.6/Modules/_operator.c" rel="nofollow noreferrer">Well, it does.</a></p>
<p>It looks like the <a href="https://github.com/python/cpython/blob/68a001dd59e2f0c00cb703200e801d0e6be63546/Modules/_operator.c" rel="nofollow noreferrer">current dev branch</a> has changed the <code>_operator</code> module to use Argument Clinic instead of the heavily macro-based implementation from 3.6 and earlier, so <code>inspect.signature</code> will probably work on 3.7. Until then, though, you're stuck with very little introspection.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am somewhat ashamed of this. But waiting for 3.7 was not an option. It works okayish. Of course it is a brutish hack.</p>
<pre><code>import re

def argnum(op):
  try: 
    op()
  except TypeError as e:
    msg = e.args[0]
    if 'argument' in msg:
      match = re.search(R'(\d+)(?!\sgiven)', e.args[0])
      if match: return int(match.group(1))
      elif 'one' in msg: return 1
    raise e
  else:
    return 0
</code></pre>
</div>
<span class="comment-copy">I am curious to know what you are trying to build with this.</span>
<span class="comment-copy">@BurhanKhalid stack based GP</span>
<span class="comment-copy">Huh, well this certainly is a decent answer, though I'm looking more for solutions for 3.6 as I'm probably not going to switch until Anaconda does.  I'll at least upvote this.</span>
