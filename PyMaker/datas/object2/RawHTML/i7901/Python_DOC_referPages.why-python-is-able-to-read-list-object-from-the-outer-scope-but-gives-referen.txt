<div class="post-text" itemprop="text">
<p>I am confused about these code:</p>
<pre><code>def a():
    count1=[0]
    count2=0
    def b():
        count1[0]=count1[0]+1
        count2=count2+1
        print count1,count2
    b()
</code></pre>
<p><code>count1</code> is announced as a list, it works well, while <code>count2</code> in <code>b()</code> will cause <code>referenced before assignment</code> error. Why? </p>
</div>
<div class="post-text" itemprop="text">
<p>In your code <code>count1</code> is the reference of the list and with <code>count1[0]</code> you try to access the 0th index of the <code>count1</code> list. Hence, when you do:</p>
<pre><code>count1[0] = count1[0]+1
</code></pre>
<p>you are accessing the same <code>count1</code> object defined outside the <code>b()</code> function.</p>
<p>But that's not the case with <code>count2</code>. When you do:</p>
<pre><code> count2 = count2 + 1
</code></pre>
<p>You are trying to create a new <code>count2</code> object and in this case <code>b()</code> won't read the value of <code>count2</code> from the outer scope. In order to access the <code>count2</code> from the outer scope, you may use <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer"><strong><code>nonlocal</code></strong></a> keyword (available since Python 3.x). Hence, your code should be as:</p>
<pre><code> # For Python 3.x

 def a():
    count2=0
    def b():
        nonlocal count2
        # ^ used here
        count2 = count2+1
    b()
</code></pre>
<p>But since you are using Python 2.x and <code>nonlocal</code> is not available in it, you may do a workaround via using <code>dict</code> to store <code>count2</code> variable as:</p>
<pre><code> # Workaround for Python 2.x

 def a():
    nonlocal_dict = {   # `dict` to store nonlocal variables
        'count2': 0
    } 
    def b():
        nonlocal_dict['count2'] = nonlocal_dict['count2']+1
        # ^ this `dict` will be available here
    b()
</code></pre>
<hr/>
<p>Please also take a look at:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/8934772/assigning-to-variable-from-parent-function-local-variable-referenced-before-as">Assigning to variable from parent function: “Local variable referenced before assignment”</a></li>
<li><a href="https://stackoverflow.com/questions/9264763/unboundlocalerror-in-python">UnboundLocalError in Python</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>First, you can access but not modify a variable which is beyond current scope. If you really want to do this, you have to use key word <code>nonlocal</code>.</p>
<p>Second, <code>count1</code> is actually a reference of an instance of list object, so if you don't change what it refer, it is not a modification direct to this variable.</p>
<p>Third, <code>count2</code> is a real value, and changing it's value means a modification direct to this variable.</p>
<p>You can test this by replace <code>count1[0]=count[0]+1</code> with <code>count1=list()</code>. It will cause exception too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>b</code> assigns to <code>count2</code>, which implicitly creates <code>count2</code> as a local variable in <code>b</code>, which in turn makes all references to <code>count2</code> in <code>b</code> refer to this local variable. So at this line:</p>
<pre><code>count2 = count2 + 1
#        ^^^^^^
</code></pre>
<p>You're trying to read from a variable that hasn't been initialized yet.</p>
<p><code>count1</code> is different because <code>b</code> only reads from <code>count1</code>; it never assigns to it:</p>
<pre><code>count1[0] = ...
</code></pre>
<p>This reads from <code>count1</code> to get the contained list, then modifies the first element.</p>
</div>
<div class="post-text" itemprop="text">
<p>you need to use nonlocal keyword because in python variable follow LEGB rules means it is first look for local, enclosing, global , Built-in scope. Here you are accessing enclosing variable so you should use nonlocal in front of variable.   </p>
<pre><code>def a():
        count1=[0]
        count2=0
        def b():
            nonlocal count2
            count1[0]=count1[0]+1
            count2=count2+1
            print (count1,count2)
        b()

    a()
</code></pre>
</div>
<span class="comment-copy">There's no difference, but you're doing different things with them. Try <code>count1 = [count1[0] + 1]</code>.</span>
<span class="comment-copy">The variable is not <code>global</code> in this case.</span>
<span class="comment-copy">@MateenUlhaq my bad, should be <code>nonlocal</code>.</span>
