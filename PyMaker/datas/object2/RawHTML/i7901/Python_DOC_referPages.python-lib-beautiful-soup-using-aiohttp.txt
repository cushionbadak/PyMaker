<div class="post-text" itemprop="text">
<p>someone know how to do :</p>
<pre><code>import html5lib
import urllib
from bs4 import BeautifulSoup

soup = BeautifulSoup(urllib.request.urlopen('http://someWebSite.com').read().decode('utf-8'), 'html5lib')
</code></pre>
<p>using aiohttp instead of urllib ?</p>
<p>Thanks ^^</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this:</p>
<pre><code>import asyncio
import aiohttp
import html5lib
from bs4 import BeautifulSoup

SELECTED_URL = 'http://someWebSite.com'

async def get_site_content():
    async with aiohttp.ClientSession() as session:
        async with session.get(SELECTED_URL) as resp:
            text = await resp.read()

    return BeautifulSoup(text.decode('utf-8'), 'html5lib')

loop = asyncio.get_event_loop()
sites_soup = loop.run_until_complete(get_site_content())
print(sites_soup)
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for people who is looking for more answers:
there is another way to run synchronous code in loop: <strong><em>loop.run_in_executor</em></strong>.</p>
<p>More in docs: <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor</a></p>
<p>Example code:</p>
<pre><code>import asyncio
import time

def blocking_func():
    time.sleep(5)
    return 42

async def main(loop):
    result = await loop.run_in_executor(None, blocking_func)
    return result

loop = asyncio.get_event_loop()
loop_result = loop.run_until_complete(main(loop))
print(loop_result) # =&gt; 42
</code></pre>
<p>So, you can <em>await</em> your task like you do it with coroutine</p>
</div>
<span class="comment-copy">I'm curious about why you want to do this.</span>
<span class="comment-copy">Because urllib is blocking. And I need a non-blocking librairy</span>
<span class="comment-copy">I can't offer direct advice about your question. However, I understand that blocking can also arise with timeouts. You might be interested in this page: <a href="http://docs.python-requests.org/en/latest/user/advanced/#asynchronous-requests" rel="nofollow noreferrer">docs.python-requests.org/en/latest/user/advanced/â€¦</a> ('Blocking Or Non-Blocking?' and 'Timeouts')</span>
<span class="comment-copy">It's work perfectly ! Thanks a lot ;)</span>
