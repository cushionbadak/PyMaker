<div class="post-text" itemprop="text">
<p>I wrote a very simple script in python 2.7 called slowcat.py which allows me to <a href="https://en.wikipedia.org/wiki/Cat_(Unix)" rel="nofollow noreferrer">cat</a> a file with a certain byte rate per second. Now the problem is that the rate that's given is doubled on the output stream. So rate=1 byte results in 2 bytes per second and rate=4 bytes results in 8 bytes per second. See the code snippet for the actual program:</p>
<pre><code>#!/usr/bin/env python

import argparse
import time
import sys
import os


def get_configuration():
    """
    Returns a populated configuration
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('file', metavar='FILE', type=argparse.FileType('r'),
                        nargs='?', help="Input file")
    parser.add_argument('--rate', type=int, default=666880,
                        help="Output rate in bytes per second")

    return parser.parse_args()


def main():
    cfg = get_configuration()

    size = os.path.getsize(cfg.file.name)
    bytes_read = 0

    t1 = time.time()
    while True:
        n = min(cfg.rate, size-bytes_read)
        if n &lt;= 0:
            break
        buf = cfg.file.read(n)
        sys.stdout.write(buf)
        sys.stdout.flush()
        bytes_read += n
        t2 = time.time()
        if t2-t1 &lt; 1.0:
            time.sleep(1.0 - (t2-t1))
        t1 = t2


if __name__ == "__main__":
    main()
</code></pre>
<p>Now my question is: <strong>Why is the output rate double of what I pass it on the command line?</strong> If you copy paste the code snippet you can easily try it out on your system e.g. <code>python slowcat.py --rate 2 slowcat.py</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is the <code>t1 = t2</code> at the end of the <code>while</code> loop. That sets <code>t1</code> to the time <em>before</em> the <code>sleep</code> delay, so the next time you test the elapsed time interval it will be more than 1 second, and thus the <code>sleep</code> call will be skipped.</p>
<p>To fix it, change that last line to </p>
<pre><code>t1 = time.time()
</code></pre>
<p>BTW, it may be more accurate to use the new <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer">time.perf_counter()</a> rather than time.time()</p>
</div>
<span class="comment-copy">Bah that's so dumb of me. Thank you.</span>
