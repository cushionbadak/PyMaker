<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1867861/dictionaries-how-to-keep-keys-values-in-same-order-as-declared">Dictionaries: How to keep keys/values in same order as declared?</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I have the following snippet of code which I ran in python2.7.12 and python3.5.2</p>
<pre><code>f = open(file_name,'r')
file_data= f.read()
f.close()
char_list = list(set(file_data))
c = {char:i for i,char in enumerate(char_list)}
x = {i:char for i,char in enumerate(char_list)}
</code></pre>
<p>When ran in python2.7.12 I get the expected result :</p>
<pre><code>    {'a': 0, ' ': 1, 'e': 2, 'i': 3, 'h': 4, '\n': 5, 'o': 6, 'r': 7, 'u': 8, 'w': 9, 'y': 10, '?': 11}
{0: 'a', 1: ' ', 2: 'e', 3: 'i', 4: 'h', 5: '\n', 6: 'o', 7: 'r', 8: 'u', 9: 'w', 10: 'y', 11: '?'}
</code></pre>
<p>In python3.5.2, something strange happens. I sometimes get results such as :</p>
<pre><code> {'h': 1, 'e': 4, 'r': 2, 'i': 3, '?': 0, '\n': 5, ' ': 6, 'u': 7, 'a': 8, 'y': 9, 'o': 10, 'w': 11}
{0: '?', 1: 'h', 2: 'r', 3: 'i', 4: 'e', 5: '\n', 6: ' ', 7: 'u', 8: 'a', 9: 'y', 10: 'o', 11: 'w'}
</code></pre>
<p>In addition, in python3.5.2, but not python2.7.12, each time the program is ran <code>char_list</code> is in a different order. It is in the same order every time for python2.7.12.</p>
<p>In both version of python <code>enumerate</code> returns an object that is iterable. </p>
<p>Why would this strange behavior be happening?</p>
<p>P.S. this also happens when I make a copy of <code>char_list</code> and pass the copy into the second enumerate instead of <code>char_list</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Enumerate is working fine, but when you save the data in a dictionary python does not maintain the order. By default Python dictionaries are unordered and are not guaranteed to keep key/value pairs in the same order they were added. OrderedDict is a good solution for Python as you can read about <a href="https://stackoverflow.com/questions/1867861/python-dictionary-how-to-keep-keys-values-in-same-order-as-declared">here</a>. Also not that in CPython 3.6 dictionaries will maintain order, but this in not guaranteed in the future.</p>
<p>If you want order preserved consider using a lists or tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have been able to replicate both your problem, and, by making the following changes, get the expected output.</p>
<p>There are two changes to make. Firstly, writing <code>char_list = list(set(file_data))</code> stores the data as a set, which is an <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">unordered data type</a> - that is, it will not retain the order it is stored necessarily. Therefore, simply removing the <code>set</code> text will solve the order problem.</p>
<p>As for the new line text appearing in the result, simply append <code>.strip('\n')</code> to your <code>file_data= f.read()</code> line and it will automatically remove that text.</p>
<p>After making the changes and confirming they work, your code would look something like this:</p>
<pre><code>f = open(file_name,'r')
file_data= f.read().strip('\n')
f.close()
char_list = list(file_data)
c = {char:i for i,char in enumerate(char_list)}
x = {i:char for i,char in enumerate(char_list)}
</code></pre>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">Python dicts are not ordered; sort their items if you want easily readable output. Python 3 randomizes dict order to help mitigate certain attacks, and you can turn the same thing on in Python 2 by passing the <code>-R</code> flag or setting <code>PYTHONHASHSEED=random</code> in the environment.</span>
<span class="comment-copy">@Ryan Well <i>technically</i> the CPython interpreter for Python 3.6 does have ordered dictionaries. Although that is an implementation detail, and should not be relied upon.</span>
<span class="comment-copy">Is this  also true for the return of <code>list(set)</code>? That seems to be randomized too.</span>
<span class="comment-copy">@dylan7: Yes, it is.</span>
<span class="comment-copy">I think it's important to note that the ordering is getting shuffled twice, once when you put the letters into a <code>set</code>, and then again when you put the enumerated values into dictionaries. The dictionary shuffling is what determines the order of the keys when you print the dictionaries. The set ordering is what determines the correspondence between the letters and the numbers (since you're <code>enumerate</code>ing a <code>list</code> built from the <code>set</code>). Even in Python 3.6 (where <code>dict</code>s are now preserve order as an implementation detail), <code>set</code>s are still ordered arbitrarily.</span>
