<div class="post-text" itemprop="text">
<p>The problem is relatively simple only that I could not find any 
answer with a google search for terms:</p>
<ol>
<li>How to terminate threads in python </li>
<li>How to end while loop using keyboard input in threads etc</li>
</ol>
<p>So format of the program is this:</p>
<pre><code>import everything necessary

def readingsomething():
      DOING SOME WORK in a infinite while loop and sleep for 1 sec

def readingsomeotherthing():
     DOING SOME WORK  in a infinite while loop and sleep for 2 sec

thread1 = thread.thread(target = readingsomething)

thread2 = thread.thread(target = readingsomeotherthing)

try:     
    thread1.start()
    thread2.start() 

    thread1.join()
    thread2.join()  

except KeyboardInterrupt:

    save a file and sys.exit() 
</code></pre>
<p>So when I run the program everything is smooth except when I
press <kbd>ctrl</kbd> + <kbd>c</kbd> it does not terminate as per keyboardInterrupt</p>
<p>I am losing the data collected as I am unable to save them.</p>
<p>Any suggestions and help will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the synchronized queue <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">Queue</a> as a pipe to send a value to the thread. </p>
</div>
<div class="post-text" itemprop="text">
<p>It is rather unclear what you're trying to do.
You're talking about loops but I see none in your code.</p>
<p>Also, written like that, you will first wait for thread1 to stop, then wait for thread2 to stop, make sure it's what you want.</p>
<p>Put a timeout inside these 'join' calls, otherwise it prevents the listening of exceptions:</p>
<pre><code>thread1.join()
</code></pre>
<p>becomes</p>
<pre><code>thread1.join(10)
</code></pre>
<p>You may want to think about the changes it induces on your code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Working Python 3 example:</p>
<pre><code>from threading import Thread, Event
import time

def readingsomething(stop):
    while not stop.isSet():
        print('readingsomething() running')
        time.sleep(1)

def readingsomeotherthing(stop):
    while not stop.isSet():
        print('readingsomeotherthing() running')
        time.sleep(2)

if __name__ == '__main__':
    stop = Event()
    thread1 = Thread(target=readingsomething, args=(stop,))
    thread2 = Thread(target=readingsomeotherthing, args=(stop,))
    thread1.start()
    thread2.start()

    try:
        thread1.join()
        thread2.join()
    except KeyboardInterrupt:
        print('catched KeyboardInterrupt')
        stop.set()
        #save the file

    print('EXIT __main__')
</code></pre>
<p><strong><em>Tested with Python:3.4.2</em></strong></p>
</div>
<span class="comment-copy">Hi, welcome to Stack Overflow. Please be sure to use <a href="https://stackoverflow.com/editing-help#code">proper formatting</a> when posting so that your code is easier to read for the people who will be helping you.</span>
<span class="comment-copy">kindly properly indent your code - as you execute it. And what exactly is the issue ?</span>
<span class="comment-copy">The code is compiling without errors and executes but it should terminate only pressing ctrl+c but it does not stop and keeps executing i think it is a problem due to sleep commands in the functions</span>
<span class="comment-copy">Thank you for the suggestion, I will try it. The loops are in the function defined.</span>
<span class="comment-copy">Thank you for the suggestion I will try this out.</span>
<span class="comment-copy">Since I am using python3 , key = input ('Press ctrl+c to  terminate') becomes key = eval(input('press ctl+c to terminate') but i keep getting invalid syntax error on c , i trying to find why</span>
<span class="comment-copy">@PradeepBV: Updated my Answer with working example</span>
<span class="comment-copy">Thank you, I was able to resolve the  problem in similar fashion.</span>
