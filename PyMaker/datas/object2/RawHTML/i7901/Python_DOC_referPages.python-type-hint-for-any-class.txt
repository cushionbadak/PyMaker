<div class="post-text" itemprop="text">
<p>I want to type hint the following function:</p>
<pre><code>def get_obj_class(self) -&gt; *class*:
  return self.o.__class__
</code></pre>
<p><code>self.o</code> could be of any type, it's determined at runtime.</p>
<p><code>*class*</code> obviously is not the answer here, because it's invalid syntax. But what <em>is</em> the right answer? I could not find any documentation on this, any help is appreciated.</p>
<hr/>
<p>On a similar note, if I have a function <code>f(cls: *class*)</code> which returns an instance of <code>cls</code>, is there a way to type hint the return value appropriately?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend using a combination of <a href="http://mypy.readthedocs.io/en/stable/generics.html" rel="noreferrer"><code>TypeVar</code></a>, to indicate that your <code>self.o</code> value could be any arbitrary type, and <a href="http://mypy.readthedocs.io/en/stable/kinds_of_types.html#the-type-of-class-objects" rel="noreferrer"><code>Type</code></a>, in the following way:</p>
<pre><code>from typing import TypeVar, Type

T = TypeVar('T')

class MyObj:
    def __init__(self, o: T) -&gt; None:
        self.o = o

    def get_obj_class(self) -&gt; Type[T]:
        return type(self.o)

def accept_int_class(x: Type[int]) -&gt; None:
    pass

i = MyObj(3)
foo = i.get_obj_class()
accept_int_class(foo)    # Passes

s = MyObj("foo")
bar = s.get_obj_class()
accept_int_class(bar)    # Fails
</code></pre>
<p>If you want the type of <code>o</code> to be even more dynamic, you could explicitly or implicitly give it a type of <code>Any</code>.</p>
<hr/>
<p>Regarding your latter question, you'd do:</p>
<pre><code>def f(cls: Type[T]) -&gt; T:
    return cls()
</code></pre>
<p>Note that you need to be careful when instantiating your class -- I don't remember what Pycharm does here, but I do know that mypy currently does not check to make sure you're calling your <code>__init__</code> function correctly/with the right number of params. </p>
<p>(This is because T could be anything, but there's no way to hint what the constructor ought to look like, so performing this check would end up being either impossibly or highly difficult.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this would do the work:</p>
<pre><code>def get_obj_class(self) -&gt; type
    return self.o.__class__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about typing.Type?</p>
<p><a href="https://docs.python.org/3/library/typing.html#typing.Type" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html#typing.Type</a></p>
<p>That seems to fit - since __class_ should always return a type</p>
<p>Yes, this works (even Pycharm does not complain:</p>
<pre><code>import typing


def test(t: object) -&gt; typing.Type:
    return t.__class__

class Dummy(object):
    pass

test(Dummy())
</code></pre>
<p>To your second question: That should be an generic: <a href="https://docs.python.org/3/library/typing.html#user-defined-generic-types" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html#user-defined-generic-types</a></p>
</div>
<span class="comment-copy">I really dislike the need to create a <i>named</i> TypeVar object everytime you want to construct a custom type. I think in my situation I'd rather stick to <code>type</code>. But thank you for introducing this</span>
<span class="comment-copy">@nO_OnE_910 -- you could reuse the same TypeVar variable when defining your generic classes and functions. You might perhaps find that a bit less distasteful since you're introducing only a single named TypeVar object (that you then reuse) instead of one per each generic class or function.</span>
<span class="comment-copy">+ for simplicity, although <code>typing.TypeVar</code> seems like the proper solution</span>
<span class="comment-copy">Why <code>typing.Type</code> and not just <code>type</code>?</span>
<span class="comment-copy">@nO_OnE_910 I prefer to use the typing module to keep a coherent style. Most of my returns are typing.X, so it just seems more natural for me</span>
