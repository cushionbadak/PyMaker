<div class="post-text" itemprop="text">
<p>i am implementing a python class that provides some nested data structure. i want to add support for copying through <code>copy.copy()</code> and deep copying through <code>copy.deepcopy()</code>, which, as the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">docs for the copy module</a> describe, involves writing <code>__copy__()</code> and <code>__deepcopy__</code> special methods.</p>
<p>i know how to teach my class to make a copy of itself, but i want to avoid going through <code>__init__()</code> on the new instance, since <code>__init__()</code> does some things that my copying logic does not want (or need) to do.</p>
<p>what i ended up with is this method, which works as intended:</p>
<pre><code>def __copy__(self):
    cls = type(self)
    obj = cls.__new__(cls)
    # custom copying logic that populates obj goes here
    return obj
</code></pre>
<p>my question is: is calling <code>cls.__new__(cls)</code> the right approach for a <code>__copy__()</code> implementation that wants to skip <code>__init__()</code> for the copy? or is there a more "pythonic" approach that i overlooked?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if this is more pythonic, but you could use a flag.</p>
<pre><code>from collections import Mapping
from copy import copy, deepcopy


class CustomDict(dict, Mapping):
    _run_setup = True

    def __init__(self, *args, **kwargs):
        self._dict = dict(*args, **kwargs)
        if args and isinstance(args[0], CustomDict):
            self._run_setup = args[0]._run_setup
        if self._run_setup:
            print("Doing some setup stuff")
        else:
            try:
                print("Avoiding some setup stuff")
            finally:
                self._run_setup = True

    def __getitem__(self, key):
        return self._dict[key]

    def __iter__(self):
        return iter(self._dict)

    def __len__(self):
        return len(self._dict)

    def __copy__(self):
        self._run_setup = False
        try:
            copied_custom_dict = CustomDict(self)
        finally:
            self._run_setup = True
        return copied_custom_dict
</code></pre>
<p>In the <code>__init__</code> above, the conditional setup stuff is only done if <code>_run_setup = True</code>. The only way to avoid this is by calling <code>CustomDict</code> with the first parameter being an instance of itself with <code>_run_setup = False</code>. This way, it's easy to flip the setup switch in different methods.</p>
<p>The <code>try...finally</code> blocks look clunky to me, but it's a way to make sure every method starts and ends with <code>_run_setup = True</code>.</p>
</div>
<span class="comment-copy">The only alternative I can think of is to remove the stuff you don't want running more than once from <code>__init__</code> and putting it in some other method instead. That way your calling code can choose whether or not to run that part after creating an instance.</span>
<span class="comment-copy">You might add a copy flag parameter to the <code>init</code> so as to differentiate the different initializations. Right now, if you make changes to your class, you would always have to check two methods..</span>
<span class="comment-copy">the __init__() signature is fixed and cannot grow any more (keyword) arguments since the constructor eats all *args and **kwargs to populate the data structure (same behaviour as the dict() constructor).</span>
<span class="comment-copy">It should be possible to pop special kwargs from the dict and handle them separately...right?</span>
<span class="comment-copy">nope, since the constructor takes *args and **kwargs like dict() so __init__() is completely "taken".</span>
<span class="comment-copy">to me it seems that CustomDict(some_other_custom_dict_instance) is perfectly normal so that should exhibit "standard" behaviour. that means "if args and isinstance(args[0], CustomDict):" is not a test that can be used, i think.</span>
<span class="comment-copy">hmm discard my previous comment since the <i>original</i> is temporarily modified to set the flag. that is indeed a way to propagate the flag. but mutating state for a read-only operation <i>feels</i> wrong, and will break with multi-threading.</span>
