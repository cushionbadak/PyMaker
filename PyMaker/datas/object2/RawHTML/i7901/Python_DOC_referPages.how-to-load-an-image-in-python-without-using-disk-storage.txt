<div class="post-text" itemprop="text">
<p>I am writing a flask application that receives two image URLs as parameters. Traditionally, I would download this images on the server local disk and carry out my image processing operations. I am downloading them using following code.</p>
<pre><code>urllib.request.urlretrieve(image1url, image_id + '.jpg')
</code></pre>
<p>After this I read the image using :</p>
<pre><code>original_image = Image.open(image_id + '.jpg')
</code></pre>
<p>and carry out my Image Processing operations like crop and applying a few filters. </p>
<pre><code>original_crop = original_image.crop((x, y, x + width / 3, y + height / 3))
</code></pre>
<p>Also, I use ImageFilter operations on this image. Now this code will be deployed on a server. If i continue this way I will keep downloading and saving images on the disk of the server. Of course, I understand that deleting the images after I am done with my Image Processing operations is one option. But if I get a few 100 calls per second, I might at some point of time use up a lot of space. The application is multi threaded using the call</p>
<pre><code>app.run(threaded=true)
</code></pre>
<p>which works like a charm.</p>
<p>I want to know if there is a way to load an image without using disk storage of the server. Thus reducing the hard disk space requirements of my service. </p>
</div>
<div class="post-text" itemprop="text">
<p>if you don't want to store images in temporary files you can wrap URL content in <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">stream</a> and pass it to <a href="http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.open" rel="nofollow noreferrer"><code>Image.open</code></a></p>
<pre><code>import io
import urllib.request

from PIL import Image

# your avatar URL as example
url = ('https://www.gravatar.com/avatar/3341748e9b07c9854d50799e0e247fa3'
       '?s=328&amp;d=identicon&amp;response=PG&amp;f=1')
content = urllib.request.urlopen(url).read()
original_image = Image.open(io.BytesIO(content))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could move them to a known remote location and fetch them back as needed. Using Amazon S3 or a hosted FTP service like BrickFTP are both easy. S3 is especially cheap since you only pay for what you use -- no monthly fee. Brick is a great service if you want to make access to the images as simple as possible for other applications and users but there is a minimum monthly fee. </p>
</div>
<span class="comment-copy">are you opposed to just finding the image on the filesystem based on its file path and then deleting it when you're done with it?</span>
<span class="comment-copy">This looks beautiful! A silly question but, can i then carry out operations on the 'original_image' as usual ?</span>
<span class="comment-copy">ofc you can, since we have <a href="http://pillow.readthedocs.io/en/3.4.x/reference/Image.html#PIL.Image.Image" rel="nofollow noreferrer"><code>Image.Image</code></a> object we can work with it as usual</span>
<span class="comment-copy">@user2326079: but you definitely should try it yourself and let me know if something went wrong</span>
<span class="comment-copy">Let's call it a wrap. Works like a dream. Thanks, Azat</span>
<span class="comment-copy">Agreed. But I was wondering if there is a way in python itself to load an image at runtime without storing it at all. For example getting a byte array of the image per say ?</span>
<span class="comment-copy">You can store any Python object on disk using the <code>pickle</code> module. That way you can store the result of your conversion and just reload that rather than the image.</span>
