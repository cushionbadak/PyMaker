<div class="post-text" itemprop="text">
<p>Why this for loop is not infinite, Here looping on a list and redefine the list inside the loop</p>
<pre><code>a = [1,2,3,4,5,6,7,8,9]
for i in a:
    print i
    a = [1,2,3,4,5,6,7,8,9]
output : 1,2,3,4,5,6,7,8,9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Roughly speaking, the loop is not infinite because the iterator that <code>i</code> is bound to is bound when the code execution reaches the <code>for . . . in</code> loop.  After that, all successive calls are to <code>iter.next()</code> which will move the existing iterator to the next position regardless of any subsequent redefinition of <code>a</code>.  </p>
<p>Recall that arrays have a built in function called <code>__iter__</code> (or <code>iter</code>).  Then, your <code>for</code> loop is equivalent to :</p>
<pre><code>a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9]
it = iter(a)
try:
    while True:
        print next(it) # for compatibility you may want to use next(it)
        a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
except StopIteration:
    pass
</code></pre>
<p>Note that in the equivalent code above, any changes to <code>a</code> don't affect <code>i</code> since <code>i</code> is already bound to an iterator looping over the first <code>[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</code>.</p>
<p>You can observe this by changing the first value of <code>a</code>:</p>
<pre><code>a = [ 1, 2, 3, 4 ]
for i in a:
    print i
    a = [ 5, 4, 3, 2, 1 ]
</code></pre>
<p>note that <code>a = [ 5, 4, 3, 2, 1 ]</code> doesn't change the existence of the <code>[ 1, 2, 3, 4 ]</code> from the first line since that array already exists in memory.  The subsequent calls each allocate a new array and assign it to <code>a</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>a</code> is not being modified (you are just setting it to the same value), the <code>for</code> loop proceeds as expected. What you are expecting is for the <code>for</code> loop to restart when <code>a</code> is reassigned, but this does not happen. </p>
<p>Instead, to make it infinite, try:</p>
<pre><code>a = [1,2,3,4,5,6,7,8,9]
for i in a:
    print i
    a.append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know, why you need this, but this might help you</p>
<pre><code>a = [1,2,3,4,5,6,7,8,9]
for i in a:
    print i
    a.append(10) #or anything else-))
</code></pre>
<p><a href="http://www.pythontutor.com/visualize.html#mode=edit" rel="nofollow noreferrer">use this tool</a> to see what happens in your code. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can even modify not only the content of the list but event the value of the variable and you will have the same result.</p>
<pre><code>a = [1,2,3,4,5,6,7,8,9]
for i in a:
    print i
    a = "Hello World!"
</code></pre>
<p>In the <code>for</code> the values are loaded so any modification inside the loop will not be taken into consideration.</p>
</div>
<span class="comment-copy">The loop continues regardless if you reassign it during iteration. It doesn't go back to the beginning...</span>
<span class="comment-copy">Why would you expect changing the variable <code>a</code> after it has already initiated the loop to have any effect on the loop?</span>
<span class="comment-copy">@AndrewLi yes you are right, that is the behavior it is showing, But I am excepting a detailed explanation about this.</span>
<span class="comment-copy">@AChampion Why can't experiment in such a way when python is allowing me to do ?</span>
<span class="comment-copy">You can, I'm asking why you think it would affect the already bound loop? E.g. <code>b = a; a = [1, 2, 3]</code> the latter assignment has not effect on <code>b</code>.</span>
<span class="comment-copy">I think this answer does the best at explaining what is going on, but there are a few things I think are more confusing than they need to be. For one, I'd not mix up the <code>i</code> value from the for loop with the iterator that's generating it. Use a different name like <code>it</code> for the iterator. I'd also produce the iterator with the <code>iter</code> builtin, rather than calling the <code>__iter__</code> method directly on the list. I'd also suggest using <code>next(it)</code> rather than <code>it.next()</code>. The builtin <code>next</code> function is much better for forwards compatibility, since Python 3 would require <code>it.__next__()</code>.</span>
<span class="comment-copy">This can also be verified by printing <code>id(a)</code> before the <code>for</code> loop and <code>id(a)</code> after the <code>for</code> loop. Both the memory address will be different. Also in each iteration <code>a</code>'s address inside the for loop may differ.</span>
<span class="comment-copy">Bad idea to change the object you are iterating over: <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#for</a></span>
<span class="comment-copy">I preferer <code>a.append(i)</code>, it brings some pattern to infinity :)</span>
<span class="comment-copy">@AChampion, i know it is bad. actually it is extremely meaningless not even to be bad -))</span>
<span class="comment-copy">@TomR sure, but nothing seems rational when you are dealing with absurdity -)) <a href="https://en.wikipedia.org/wiki/Absurdity" rel="nofollow noreferrer">en.wikipedia.org/wiki/Absurdity</a></span>
