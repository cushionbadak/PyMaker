<div class="post-text" itemprop="text">
<p>There is a list of lists</p>
<pre><code>[[name1, value1], [name2, value2], ...]
</code></pre>
<p>I need to create instances of a class with names name1, name2, and so forth, i.e., with names taken from the <code>list[1][1]</code>,  <code>list[2][1]</code>, etc.
But I can't imagine ways in which this can be implemented.</p>
<p>Class:</p>
<pre><code>class func():
    def __init__(self, visibility, ftype, body):
    ...
</code></pre>
<p>List: </p>
<pre><code>list = [
    ['private', 'Void', 'SetupWheels', 'body'],
    ...
]
</code></pre>
<p>Dictionary:</p>
<pre><code>func_list = {}
</code></pre>
<p>It should look like this: </p>
<pre><code>for i, val in enumerate(c):
    *new key in the dictionary is equal to the value val[2]* = func(val[0], val[1], val[3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To populate a dictionary with instances of a class whose attributes were taken from a list of lists, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code> comprehension</a> like:</p>
<h3>Code:</h3>
<pre><code>func_list = {row[2]: Func(row[0], row[1], row[3]) for row in c}
</code></pre>
<h3>Test Code:</h3>
<pre><code>class Func():
    def __init__(self, visibility, ftype, body):
        self.visibility = visibility
        self.ftype = ftype
        self.body = body

    def __repr__(self):
        return "v:%s f:%s b:%s" % (self.visibility, self.ftype, self.body)

c = [
    ['private', 'Void', 'SetupWheels', 'body'],
    ['private', 'Void', 'SetupWheelx', 'bo8y'],
]

func_list = {row[2]: Func(row[0], row[1], row[3]) for row in c}

print(func_list)
</code></pre>
<h3>Results:</h3>
<pre><code>{'SetupWheelx': v: private f:Void b:body, 'SetupWheels': v: private f:Void b:body}
</code></pre>
</div>
<span class="comment-copy">I suggest that you seriously reconsider what you're trying to do: See <a href="http://stupidpythonideas.blogspot.com/2013/05/why-you-dont-want-to-dynamically-create.html" rel="nofollow noreferrer"><b><i>Why you don't want to dynamically create variables</i></b></a>.</span>
