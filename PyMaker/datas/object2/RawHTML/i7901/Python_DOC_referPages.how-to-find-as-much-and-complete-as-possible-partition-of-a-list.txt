<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>list1 = [5,8]
list2 = [4,4,2,3,6]
</code></pre>
<p>It is easy to get the combination of 5 and 8 in <code>list2</code> by using <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">powerset</a> function</p>
<pre><code>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</code></pre>
<p>8 can be comprised of <code>[4,4]</code> or <code>[2,6]</code>,  but 5 can only be comprised of <code>[2,3]</code>. If I choose <code>[2,6]</code> for 8 , there is no combination for 5 in <code>list2</code>.</p>
<p>How can I get <code>[4,4]</code> for 8 and <code>[2,3]</code> for 5?  I want to choose as much as possible combinations in <code>list2</code> for the numbers in <code>list1</code>. Actually the numbers in <code>list1</code> may be comprised of 3 or more numbers in <code>list2</code>.</p>
<p>The actual problem is more difficult, because may be there are some numbers not used in <code>list1</code> and the numbers in <code>list1</code> may be comprised of 3 or more numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this does what you want:</p>
<pre><code>list1 = [5,8]
list2 = [4,4,2,3,6]


for i in list2:
    for j in list2:
        if i+j in list1:
            print("%d + %d = %d"%(i, j, i+j))
</code></pre>
<p>It tries to create every possible addition and if it's contained in the first list, output it.</p>
<p>Output:</p>
<pre><code>4 + 4 = 8
4 + 4 = 8
4 + 4 = 8
4 + 4 = 8
2 + 3 = 5
2 + 6 = 8
3 + 2 = 5
6 + 2 = 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a concise and efficient way.</p>
<pre><code>import itertools

def combos(a, b):

    matches = []
    for combo in list(itertools.combinations(a, 2)):
        if combo[0] + combo[1] in b:
            matches.append(combo)
return matches    

&gt;&gt; [(4, 4), (2, 3), (2, 6)]
</code></pre>
<p>Here is another way:</p>
<pre><code>def foo(matches, *args):

    matches_dict = {k: [] for k in matches}
    for _, tup in enumerate(*args):
        if sum(tup) in matches:
            matches_dict[sum(tup)].append(tup)
    return matches_dict

&gt;&gt; {5: [(2, 3)], 8: [(4, 4), (2, 6)]}
</code></pre>
<p>Now timing them:</p>
<pre><code>time combos(list2, list1)
CPU times: user 23 µs, sys: 7 µs, total: 30 µs
Wall time: 31 µs

time foo(list1, list(itertools.combinations(list2, 2)))
CPU times: user 33 µs, sys: 9 µs, total: 42 µs
Wall time: 40.1 µs
</code></pre>
<p>Using @moritzg answer, modified to not include dupes,</p>
<pre><code>def fizz(list1, list2):
    matches = []
    for i in list2:
        for j in list2:
            if i+j in list1:
                matches.append((i,j))
    return set(matches)

time fizz(list1, list2)
CPU times: user 26 µs, sys: 13 µs, total: 39 µs
Wall time: 35 µs
</code></pre>
<p>Also I forgot to mention if for you <code>(2,6)</code> differs from <code>(6,2)</code> although it should not, you can switch <code>itertools.combinations</code> to <code>itertools.permutations</code>.</p>
</div>
<span class="comment-copy">what's with the dupes?</span>
<span class="comment-copy">Thank you very much, but if [2,6] is chosen for 8, there is no possible combination left in list2 for 5, that is my problem. I want to choose as much as possible combinations in list2 for the numbers in list1.</span>
<span class="comment-copy">Thank you very much, but if [2,6] is chosen for 8, there is no possible combination left in list2 for 5, that is my problem. I want to choose as much as possible combinations in list2 for the numbers in list1.</span>
