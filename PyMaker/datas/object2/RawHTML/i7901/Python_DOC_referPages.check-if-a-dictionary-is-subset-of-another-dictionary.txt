<div class="post-text" itemprop="text">
<p>I am trying to compare 2 Strings and check if all characters in String <code>a</code> are present in String <code>b</code>. I am currently using the following method by converting the string into a dictionary and comparing it with the other. But there are many chances that it gives a false positive.</p>
<pre><code>x = 'NJITZU THE HANDS OF TIME'
y = 'NinjaGo Masters of Spinjitzu The Hands of Time'
if Counter(x) &lt; Counter(y):
    print 'Yes'
else:
    print 'No'
</code></pre>
<p>Please suggest any better way to do this</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your problem correctly, you don't need to compare dictionaries, but sets:</p>
<pre><code>&gt;&gt;&gt; x = 'NJITZU THE HANDS OF TIME'
&gt;&gt;&gt; y = 'NinjaGo Masters of Spinjitzu The Hands of Time'
&gt;&gt;&gt; set(x).issubset(set(y))
False
</code></pre>
<p>And if you want a case-insensitive compare, you can call <code>lower()</code> on both strings:</p>
<pre><code>&gt;&gt;&gt; set(x.lower()).issubset(set(y.lower()))
True
</code></pre>
<p>You could also compare whole words by using <code>split()</code>:</p>
<pre><code>&gt;&gt;&gt; set(x.lower().split())
set(['of', 'the', 'time', 'njitzu', 'hands'])
&gt;&gt;&gt; set(x.lower().split()).issubset(set(y.lower().split()))
False
&gt;&gt;&gt; set('SPINJITZU THE HANDS OF TIME'.lower().split()).issubset(set(y.lower().split()))
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use the <code>set</code> object. <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=set#set" rel="nofollow noreferrer">Documentation can be found here.</a></p>
<pre><code>x = 'NJITZU THE HANDS OF TIME'
y = 'NinjaGo Masters of Spinjitzu The Hands of Time'
if set(x.lower()) &lt;= set(y.lower()):
    print('Yes')
else:
    print('No')
</code></pre>
<p>The <code>&lt;</code> operator is overloaded to be <code>is_subset</code>.  To get the answer to print "Yes", I've also converted the strings to lowercase.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all</a> function for this. </p>
<pre><code>all(character in y for character in x)
</code></pre>
<p>all() will return true if every element is true and false otherwise. We use <code>in</code> to check if a character is in the string <code>y</code> and we will do this for every <code>character in x</code>.</p>
</div>
<span class="comment-copy">Only note I might add is that it's not clear whether OP wants to include space characters.</span>
<span class="comment-copy">This works fine and is pretty readable. It's much less efficient than using sets, though.</span>
<span class="comment-copy">I wonder, how would numpy all() performance compare to sets?</span>
<span class="comment-copy">The problem is that you have to call <code>character in y</code> for each <code>character in x</code>, and it's expensive to parse the whole <code>y</code> string again and again. Using another <code>all()</code> shouldn't change the <code>O(n*m)</code> complexity. With sets, complexity should be <code>O(n+m)</code>.</span>
<span class="comment-copy">That ... should have been obvious to me. Thanks.</span>
