<div class="post-text" itemprop="text">
<p>I'm writing a decorator to validate some functions. I try to use built-ins as much as possible to do the heavy lifting, but I've been getting stuck on picking which exceptions I should catch when using them.</p>
<p>For example:</p>
<pre><code>def Validated(fun):
    def ValidatedFun(*args, **kwargs):
        try:
            _ = dict(kwargs.get('untrusted_data', ()))
        except ? as e:
            raise BetterError('Additional relevant info') from e
        return fun(*args, **kwargs)
    return ValidatedFun
</code></pre>
<p>I'd like to know:</p>
<ul>
<li>What are the most-derived exceptions that <code>dict</code> (and other built-ins) <strong>explicitly</strong> raise?</li>
<li>Where can I find documentation that lists them? (they aren't on
<a href="https://docs.python.org/" rel="nofollow noreferrer">https://docs.python.org/</a>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>All Python standard types follow the conventions of a few default exceptions. The behaviour is documented <a href="https://docs.python.org/3/library/exceptions.html" rel="noreferrer">for the exceptions</a>, not the types.</p>
<p>For <code>dict</code>, the exceptions are <a href="https://docs.python.org/3/library/exceptions.html#TypeError" rel="noreferrer"><code>TypeError</code></a> and <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="noreferrer"><code>ValueError</code></a>. There are other exception that can be raised at this point, but those are not dependent on the input (<code>MemoryError</code> and <code>KeyboardInterrupt</code>).</p>
<p><code>TypeError</code> indicates that the type of object passed in is not supported; the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="noreferrer"><code>dict</code> documentation</a> documents what types are accepted (mapping or iterable objects), everything else is cause to raise the exception. The accepted types must match certain expectations; if those are not met, a <code>ValueError</code> is raised (correct type, but the value is wrong).</p>
</div>
<div class="post-text" itemprop="text">
<p>there is no list of exception that a specific python function can throw. This is due to python's duck typing. Since you could provide objects of any type as your function parameters, and since these functions could do whatever they want in their implementation, any exception could in principle be raised. Usually, the docs are clear on what exception they rise under specific conditions (e.g. IOError when a file is not found) but this is different from "a list of all exceptions that a function can throw".</p>
<p>I would also advise against your strategy to redirect exceptions into a "BetterError" as you plan, since this hides the original reason and location where the error first occurred. If you really want to provide better error messages, do argument validation in beginning of your function and raise ValueErrors for situations that cannot be excluded but would raise any exception down the line:</p>
<pre><code>if not is_valid_data(untrusted_data) :
    raise ValueError("invalid input")
unused_dict = dict(untrusted_data)
</code></pre>
</div>
<span class="comment-copy">You could trivially try out what exception could be raised, which is why they usually are not documented. For the behaviours described in the documentation, try breaking the expectations.</span>
<span class="comment-copy">@MartijnPieters I'd rather have trustworthy documentation.</span>
<span class="comment-copy">The exceptions are <code>TypeError</code> and <code>ValueError</code>; the first when you pass in an invalid type according to the docs, the other when the type is correct, but expectations are not met.</span>
<span class="comment-copy">Although I trust that you're right, I still want to know where I can reliably find this information in the future.</span>
<span class="comment-copy">Uh, let's not forget the most common dict exception of all: <code>KeyError</code>, raised when you lookup a key not present in the dict</span>
<span class="comment-copy">@SamHartman: but the code posted doesn't do any lookups.</span>
<span class="comment-copy">@SamHartman <code>KeyError</code> won't be raised while <i>creating</i> a dictionary though, like the OP's code <code>dict(untrusted_data)</code></span>
<span class="comment-copy">@BrianRodriguez: you can find it in the exceptions documentation; it is not documented for every callable because that'd be a <i>lot</i> of redundant repetition of the same info.</span>
<span class="comment-copy">I should have mentioned: this is for a decorator which adds such validation to my functions, so it's actually doing exactly that. Furthermore, I <i>don't</i> hide the error, I attach it to the message of the new error.</span>
<span class="comment-copy">@Brian Rodriguez I read the question as asking what errors were raised by the dict class, not just by its constructor.  That is, what errors can I get from the object resulting from <code>dict()</code>.  I agree the question is ambiguous.</span>
<span class="comment-copy">class Untrusted(object) :         def __iter__(self) :             raise ArbitraryException("anyhting can happen")          untrusted_data = Untrusted()     dict(untrusted_data)  Apparently, comments don't support code formatting. Anyway, how could dict know which custom exception its argument, that can overload its iterator method, could taise?</span>
<span class="comment-copy">@harfel I want to know what <code>dict</code> <b>explicitly</b> raises, I don't care if the data itself throws an arbitrary exception. I've updated my post to reflect this.</span>
<span class="comment-copy">you probably have to go to the source code then. at least I would not know another way. Turns out that the constructor explicitly raises TypeError (if an object implements the iterator protocol but cannot be converted into a sequence) and ValueError (for situations like dict([None, 1, "a", False]) ...) <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Objects/dictobject.c</a></span>
