<div class="post-text" itemprop="text">
<p>From the perspective of someone who has written asyncio code but is looking to better understand the inner workings, what is <code>yield from</code>, <code>await</code> and how are those useful for allowing asynchronous code?</p>
<p>There is one <a href="https://stackoverflow.com/questions/9708902/in-practice-what-are-the-main-uses-for-the-new-yield-from-syntax-in-python-3">highly upvoted</a> question asking about the uses of the <code>yield from</code> syntax and <a href="https://stackoverflow.com/questions/31291129/pep-0492-python-3-5-async-keyword">one explaining async and await</a>, but both go in depth about different topics and are not really a concise explanation of the underlying code and how it fits in with asyncio.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short answer:</strong></p>
<p><code>yield from</code> is an old way to wait for asyncio's coroutine.</p>
<p><code>await</code> is an modern way to wait for asyncio's coroutine.</p>
<p><strong>Detailed answer:</strong></p>
<p>Python has generators - special kind of functions that produces a sequence of results instead of a single value. Starting with Python 3.3 <code>yield from</code> expression was added. It <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer">allows</a> one generator to delegate part of its operations to another generator.</p>
<p>Starting with Python 3.4 <code>asyncio</code> module was added to standard library. It allow us to write clear and understandable asynchronous code. While technically asyncio's coroutines could be implemented different ways, in <code>asyncio</code> they were implemented using generators (you can watch for <a href="https://www.youtube.com/watch?v=MCs5OvhV9S4" rel="noreferrer">excellent video</a> where shown how generators can be used to implement coroutines). <code>@asyncio.coroutine</code> was a way to make coroutine from generator and <code>yield from</code> was a way to await for coroutine - just details of implementation.</p>
<p>That's how happened that <code>yield from</code> started to be used for two "different things".</p>
<p>Starting with Python 3.5 (see <a href="https://www.python.org/dev/peps/pep-0492/" rel="noreferrer">PEP 492</a>) coroutines got new syntax. Now you can define coroutine with <code>async def</code> and await for it using <code>await</code> expression. It's not only shorter to write, but also makes clearer to understand that we work with asyncio's coroutines.</p>
<p>If you're using Python 3.5+ you can forget about using <code>yield from</code> for asyncio's coroutines and use <code>await</code> for it.</p>
</div>
<span class="comment-copy">It seems like the second question that you've linked gives a pretty straight forward explanation of how <code>async</code> and <code>await</code> can be used to more succinctly express what you used to need <code>yield from</code> &amp; <code>asyncio.coroutine</code> to express.  I guess I'm not really sure what the question is asking since that example seems to explain it pretty well.  Can you be more specific?</span>
<span class="comment-copy">@mgilson it goes into how <code>await</code> relates to <code>yield from</code> but not actually what <code>yield from</code> does</span>
<span class="comment-copy">They're the same, except <code>await</code> is more <a href="https://www.python.org/dev/peps/pep-0492/" rel="nofollow noreferrer">recent</a> and looks much better</span>
<span class="comment-copy">Holy c**p, @mikhail, I wish I had read this before wasting so much of my time with <code>yield from</code> and <code>@asyncio.coroutine</code>!  Then I read <code>async def</code> and <code>await</code>, and I went "ummmm, I wonder what's the difference".  I wish this were made clearer in <a href="https://www.python.org/dev/peps/pep-3156" rel="nofollow noreferrer">PEP 3156</a>...</span>
<span class="comment-copy">"If you're using Python 3.5+ you can forgot of using yield from for anything except generators and use await for coroutines." &lt;- Don't you just mean coroutines in the narrow context of how <code>asyncio</code> defines them? I'd still have to use <code>yield from foo()</code> if I want to pass control to a self written coroutine <code>foo</code> that uses <code>got_value = yield</code> which you are supposed to manually send values into, right?</span>
<span class="comment-copy">@timgeb yes, you right: I meant only asyncio coroutines. I'll edit answer.</span>
<span class="comment-copy">Thanks. "except generators" should maybe be a little more explicit, you are technically correct that an instance of <code>def foo(): x = yield</code> is of type <code>generator</code> (for historic reasons), but colloquially it's a "<a href="http://www.dabeaz.com/coroutines/" rel="nofollow noreferrer">Beazly-style</a>" coroutine and not really what people think of when saying generator.</span>
<span class="comment-copy">@timgeb thanks, corrected. I think now should be ok :)</span>
