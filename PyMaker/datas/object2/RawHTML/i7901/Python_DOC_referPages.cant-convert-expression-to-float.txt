<div class="post-text" itemprop="text">
<p>I'm trying to learn the ins and outs of symbolic manipulation in python (I'm a beginner).</p>
<p>I have the following basic code, and the output is giving me an error telling me that it "can't convert expression to float".</p>
<p>What's wrong with this code:</p>
<pre><code>from sympy import *
from math import *

def h(x):
    return log(0.75392 * x)

x = symbols('x')
hprime = h(x).diff(x)

print(hprime)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a classic example of what is said in <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP-8</a> about wildcard imports:</p>
<blockquote>
<p>Wildcard imports ( <code>from &lt;module&gt; import *</code> ) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools.</p>
</blockquote>
<p>The problem is that you need to work with <a href="http://docs.sympy.org/dev/modules/functions/elementary.html#sympy.functions.elementary.exponential.log" rel="nofollow noreferrer"><code>sympy.log</code></a> class, but using <a href="https://docs.python.org/3/library/math.html#math.log" rel="nofollow noreferrer"><code>math.log</code></a> function instead which works on <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer"><code>float</code></a> objects, not <a href="http://docs.sympy.org/dev/modules/core.html#sympy.core.symbol.Symbol" rel="nofollow noreferrer"><code>Symbol</code></a> objects.</p>
<p>When you write</p>
<pre><code>from sympy import *
</code></pre>
<p>you are importing in your module namespace everything that <code>sympy</code> package providing at the top level (and there are a lot of stuff, much of that you don't need at all), including <code>sympy.log</code> class.</p>
<p>After next statement</p>
<pre><code>from math import *
</code></pre>
<p>you are importing everything in <code>math</code> module, including <code>math.log</code>, which overwrites previously imported <code>sympy.log</code> class.</p>
<p>Considering this your example may be written like</p>
<pre><code>import sympy


def h(x):
    return sympy.log(0.485022 * x)


x = sympy.symbols('x')
h_x = h(x)
hprime = h_x.diff(x)

print(hprime)
</code></pre>
<p>gives us</p>
<pre><code>1.0/x
</code></pre>
<p><strong>P. S.</strong>: I've removed <code>math</code> import since it is not used in given example.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that both the <code>sympy</code> and the <code>math</code> package define a function called <code>log</code>.</p>
<p>Importing them as <code>from sympy import *</code> and then <code>from math import *</code> overrides the <code>sympy.log</code> with <code>math.log</code>.</p>
<p>Better always use <code>import sympy</code> and then call your functions <code>sympy.log</code> or (if as lazy as me) do <code>import sympy as sym</code> and then <code>sym.log</code>. Be sure to do so with the math package as well. This method will save you a lot of hassle in the future and makes your code easier to understand for others.</p>
</div>
<span class="comment-copy">just remove <code>from math import *</code></span>
<span class="comment-copy">@user46944 I believe the problem is being caused because <code>math</code> is being included after <code>sympy</code>. Just swap the first two lines and you're good to go. Read <a href="https://stackoverflow.com/questions/4092395/python-import-precedence-packages-or-modules">this</a> for more info.</span>
<span class="comment-copy">Yes, it does. It is like redefining a function. The last definition will stick.</span>
<span class="comment-copy">I wish it was that easy, but it is not. I have not looked into the packages, but imagine that <code>math</code> defines a function <code>ln</code> whereas <code>sympy</code> does not. Then you do <code>import math as *</code> and <code>import sympy as *</code>. Now if you call <code>log</code>, then python will use <code>sympy.log</code> since it was called last. But if you call <code>ln</code>, then it will use <code>math.ln</code>, because there is no <code>sympy.ln</code>. You see, importing as * gets confusing really fast.</span>
<span class="comment-copy">@user46944: <b>Python</b> import system is a hard thing at first, but you will get used to it and then understand its awesomeness, i guess</span>
<span class="comment-copy">@user46944: <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">docs</a> is a good place to start</span>
<span class="comment-copy">Yes, you can. You can actually do <code>import sympy as np</code> and <code>import numpy as sym</code>. It's valid python code and the python interpreter will not complain, but it will for sure confuse anyone reading your code (including yourself at some point). So you can, but my advice is DON'T!</span>
