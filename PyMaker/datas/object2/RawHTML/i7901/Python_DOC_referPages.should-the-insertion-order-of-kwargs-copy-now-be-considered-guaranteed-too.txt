<div class="post-text" itemprop="text">
<p>The insertion-order of keyword arguments is now <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep468" rel="nofollow noreferrer">guaranteed to be preserved</a> in the 3.6 version of Python. This has been made possible by a change to the underlying representation of the <code>dict</code> object. </p>
<p>However, it has been stated - <a href="https://www.youtube.com/watch?v=p33CVV29OG8" rel="nofollow noreferrer">somewhat strenuously</a> - that the order preservation of the <code>dict</code> object should not be relied upon in general as of yet. The docs explain the situation this way: </p>
<blockquote>
<p>The order-preserving aspect of this new implementation is considered
  an implementation detail and should not be relied upon (this may
  change in the future, but it is desired to have this new dict
  implementation in the language for a few releases before changing the
  language spec to mandate order-preserving semantics for all current
  and future Python implementations; this also helps preserve
  backwards-compatibility with older versions of the language where
  random iteration order is still in effect, e.g. Python 3.5).</p>
</blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0468/" rel="nofollow noreferrer">PEP 468</a> does not mention anything about copying the keyword arguments. But there are times when one may wish to iterate over a copy of the <code>kwargs</code> arguments (e.g. while mutating <code>kwargs</code> in a for loop):</p>
<pre><code>def i_will_never_fail(**kwargs):
    for thing1,thing2 in zip(kwargs.copy(), kwargs):
        assert thing1==thing2
</code></pre>
<p>My question is: should the order of the object resulting from <code>kwargs.copy()</code> be considered guaranteed as well? Or should this also be considered an implementation detail? Is the <code>OrderedDict</code> <a href="https://twitter.com/raymondh/status/773978885092323328" rel="nofollow noreferrer">only <em>mostly</em> dead</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer would be implementation dependent.</p>
<p>Assuming the highly popular CPython, the answer would be yes. As you can see from the <code>PyDict_Copy</code> function (line 2615) in the <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c" rel="nofollow noreferrer"><code>dictobject.c</code></a> code, along with increasing references for the values, the function starts the copying with the piece </p>
<pre><code>split_copy-&gt;ma_keys = mp-&gt;ma_keys;
</code></pre>
<p>this, after <code>mp</code> had been assigned the dicitionary object (or more exactly, an explicit casting of the original <code>dict</code> into a <code>PyDictObject</code>).</p>
<p>Since the keys preserve their order, and considering the current form of storage (as seen in <a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6">Jim's explanation here</a>), the resulting dictionary should be ordered the same way.</p>
<blockquote>
<p>Again, that is currently considered an <em>implementation detail</em> and you should <strong>not</strong> make any of your code depend on it.</p>
</blockquote>
</div>
<span class="comment-copy">Relevant: <a href="https://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-python-3-6" title="dictionaries are ordered in python 3 6">stackoverflow.com/questions/39980323/â€¦</a></span>
