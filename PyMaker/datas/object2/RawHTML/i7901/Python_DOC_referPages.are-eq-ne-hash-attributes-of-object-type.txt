<div class="post-text" itemprop="text">
<p>In the below list of attributes,</p>
<pre><code>&gt;&gt;&gt; dir(object)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</code></pre>
<p><code>__eq__</code>, <code>__ne__</code> &amp; <code>__hash__</code> are not shown as attributes. They are attributes of meta class <code>type</code></p>
<pre><code>&gt;&gt;&gt; dir(type)
    [... '__eq__', .... '__hash__', ... '__ne__', ...]
&gt;&gt;&gt;
</code></pre>
<p>and <code>object</code> is not in <code>is-a</code> relation with <code>type</code></p>
<pre><code>&gt;&gt;&gt; issubclass(object, type)
    False
&gt;&gt;&gt; issubclass(type, object)
    True
</code></pre>
<p>But, I see these attributes part of <code>object</code>,</p>
<pre><code>&gt;&gt;&gt; object.__eq__
    &lt;method-wrapper '__eq__' of type object at 0x905b80&gt;
&gt;&gt;&gt; object.__ne__
    &lt;method-wrapper '__ne__' of type object at 0x905b80&gt;
&gt;&gt;&gt; object.__hash__
    &lt;slot wrapper '__hash__' of 'object' objects&gt;
&gt;&gt;&gt; 
</code></pre>
<p>This allows,</p>
<pre><code>class X(object):
   pass
</code></pre>
<p><code>class X</code> to override these attributes.</p>
<hr/>
<p><strong>Question:</strong></p>
<p>Are these attributes of <code>object</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The methods in <code>type</code> define how a class behaves, the methods in <code>object</code> implement how instances behave.</p>
<p>Using your subclass of <code>object</code>:</p>
<pre><code>class X(object):
    pass
</code></pre>
<p>Then</p>
<pre><code>X == X
</code></pre>
<p>will call <code>type.__eq__(X, X)</code></p>
<p>But:</p>
<pre><code>X() == X()
</code></pre>
<p>will call <code>object.__eq__(X, X)</code></p>
<p>At least as long you don't override these <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">magic methods</a> (either in your <code>X</code> directly or when you define your own metaclass for <code>X</code>).</p>
<hr/>
<p>If you "go meta", then it's important to know that metaclasses are to classes what instances are to classes:</p>
<pre><code>&gt;&gt;&gt; isinstance(object, type)   # class &amp; metaclass
True

&gt;&gt;&gt; isinstance(X(), X)         # instance &amp; class
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>They are part of the data model customization, called 'magic methods', you have to think of them as an interface for interaction with python functionalities.
Here is all the <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">documentation</a> relating this.</p>
</div>
<span class="comment-copy"><code>type</code> is "the metaclass" of <code>object</code>. :)</span>
<span class="comment-copy"><code>isinstance(object, type)</code> returns <code>True</code></span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/33087797/get-complete-list-of-all-possible-class-attributes">Get complete list of all possible Class Attributes</a></span>
<span class="comment-copy">@OluwafemiSule Hmmm 1) <code>isinstance(X, type)</code> is also returning true.  <code>object</code> is not subclass of <code>type</code> but <code>X</code> is subclass of <code>type</code>. What is going on here? 2) Why should <code>X</code> inherit attributes of <code>type</code></span>
