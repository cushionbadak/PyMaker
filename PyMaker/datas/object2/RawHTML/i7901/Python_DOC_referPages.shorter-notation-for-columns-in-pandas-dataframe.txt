<div class="post-text" itemprop="text">
<p>Take a random DataFrame:</p>
<pre><code>df = pd.DataFrame(np.random.rand(3, 2), columns=['a', 'b'])
</code></pre>
<p>Pandas allows defining new columns in two ways:</p>
<pre><code>df['c'] = df.a + df.b
df['c'] = df['a'] + df['b']
</code></pre>
<p>As the DataFrame name gets longer, this notation becomes less readable.</p>
<p>And then there's the <code>query</code> function:</p>
<pre><code>df.query('a &gt; b')
</code></pre>
<p>It returns the slices of the <code>df</code> that match the condition. </p>
<p>Is there a way to run something like <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html" rel="nofollow noreferrer"><code>DataFrame.query()</code></a> but for operations on the frame?</p>
</div>
<div class="post-text" itemprop="text">
<p>Function <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.eval.html" rel="nofollow noreferrer"><code>DataFrame.eval()</code></a> does exactly this:</p>
<pre><code>df.eval('c = a + b')
</code></pre>
<p>And warning-free assignment:</p>
<pre><code>df.eval('c = a + b', inplace=True)
</code></pre>
<p>More generally, <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.eval.html" rel="nofollow noreferrer"><code>pandas.eval()</code></a>:</p>
<blockquote>
<p>The following arithmetic operations are supported: +, -, *, /, **, %,
  // (python engine only) along with the following boolean operations: |
  (or), &amp; (and), and ~ (not). Additionally, the 'pandas' parser allows
  the use of and, or, and not with the same semantics as the
  corresponding bitwise operators.</p>
</blockquote>
<p>Pandas docs say that <code>eval</code> supports only <a href="https://docs.python.org/3/reference/simple_stmts.html#expression-statements" rel="nofollow noreferrer">Python expression statements</a> (e.g., <code>a == b</code>), but pandas silently supports <code>abs(a - b)</code> and maybe other statements. The rest throw an error. For example:</p>
<pre><code>df.eval('del(a)')
</code></pre>
<p>returns <code>NotImplementedError: 'Delete' nodes are not implemented</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way using <code>assign</code> and <code>add</code>:</p>
<pre><code>df.assign(c=df.a.add(df.b))

          a         b         c
0  0.086468  0.978044  1.064512
1  0.270727  0.789762  1.060489
2  0.150097  0.662430  0.812527
</code></pre>
<p>Note: The assign creates a copy of your dataframe, therefore you aren't distorting the original data. You'll need to reassign to a different variable or back to df.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the dataframe named <code>my_obnoxiously_long_dataframe_name</code></p>
<pre><code>np.random.seed([3,1415])
my_obnoxiously_long_dataframe_name = pd.DataFrame(
    np.random.randint(10, size=(10, 10)),
    columns=list('ABCDEFGHIJ')
)

my_obnoxiously_long_dataframe_name

   A  B  C  D  E  F  G  H  I  J
0  0  2  7  3  8  7  0  6  8  6
1  0  2  0  4  9  7  3  2  4  3
2  3  6  7  7  4  5  3  7  5  9
3  8  7  6  4  7  6  2  6  6  5
4  2  8  7  5  8  4  7  6  1  5
5  2  8  2  4  7  6  9  4  2  4
6  6  3  8  3  9  8  0  4  3  0
7  4  1  5  8  6  0  8  7  4  6
8  3  5  8  5  1  5  1  4  3  9
9  5  5  7  0  3  2  5  8  8  9
</code></pre>
<hr/>
<p>If you want cleaner code, create a temp variable name that's smaller</p>
<pre><code>d_ = my_obnoxiously_long_dataframe_name

d_['K'] = abs(d_.J - d_.D)
d_['L'] = d_.A + d_.B

del d_

my_obnoxiously_long_dataframe_name

   A  B  C  D  E  F  G  H  I  J  K   L
0  0  2  7  3  8  7  0  6  8  6  3   2
1  0  2  0  4  9  7  3  2  4  3  1   2
2  3  6  7  7  4  5  3  7  5  9  2   9
3  8  7  6  4  7  6  2  6  6  5  1  15
4  2  8  7  5  8  4  7  6  1  5  0  10
5  2  8  2  4  7  6  9  4  2  4  0  10
6  6  3  8  3  9  8  0  4  3  0  3   9
7  4  1  5  8  6  0  8  7  4  6  2   5
8  3  5  8  5  1  5  1  4  3  9  4   8
9  5  5  7  0  3  2  5  8  8  9  9  10
</code></pre>
</div>
<span class="comment-copy">My prior criticism was incorrect... You can pass a <code>\n</code> delimited string of formulas.  Also, the <code>float</code> issue I highlighted was specific to my use of <code>abs</code>.  You should include such something like <code>c = a + b\nd = c ** 2</code>.  Note that you can refer to columns created prior in the same string.</span>
<span class="comment-copy">I'd also include some output.  For me, there is something satisfying about seeing the output.</span>
<span class="comment-copy">You used <code>abs</code> in <code>eval()</code> in your unedited answer. Do you have the list of other undocumented statements supported by <code>pandas.eval()</code>?</span>
<span class="comment-copy">@AntonTarasenko I don't have a list handy.  But I know that things like <code>max</code>, <code>min</code>, <code>log</code>, and others do work... note the <code>engine</code> parameter defaults to <code>numexpr</code> <i><code>engine : string or None, default ‘numexpr’, {‘python’, ‘numexpr’}</code></i>  You can <a href="https://pypi.python.org/pypi/numexpr" rel="nofollow noreferrer"><b>find lots more information here</b></a></span>
<span class="comment-copy">Thanks! Now I think the pandas package code must contain the implemented (and not implemented) nodes.</span>
