<div class="post-text" itemprop="text">
<p>I just spent ~30 minutes debugging and double checking Python &amp; C# code, to find out that my struct.pack was writing the wrong data. When I separated this into separate  calls, it works fine.</p>
<p>This is what I had before</p>
<pre><code>file.write(struct.pack("fffHf", kf_time / frame_divisor, kf_in_tangent, kf_out_tangent, kf_interpolation_type, kf_value))
</code></pre>
<p>This is what I have now</p>
<pre><code>file.write(struct.pack("f", kf_time / frame_divisor))
file.write(struct.pack("f", kf_in_tangent))
file.write(struct.pack("f", kf_out_tangent))
file.write(struct.pack("H", kf_interpolation_type))
file.write(struct.pack("f", kf_value))
</code></pre>
<p>Why does the first variation not write the data that I expected? What is so different than writing these separately?</p>
<p>(File is opened in binary mode, platform is 64 bit Windows, Python 3.5)</p>
</div>
<div class="post-text" itemprop="text">
<p>Presumably because, as the <code>struct</code> documentation clearly states:</p>
<blockquote>
<p><strong>Note</strong> By default, the result of packing a given C struct 
      includes pad bytes in order to maintain proper alignment 
      for the C types involved; similarly, alignment is taken 
      into account when unpacking. This behavior is chosen so 
      that the bytes of a packed struct correspond exactly to 
      the layout in memory of the corresponding C struct. To 
      handle platform-independent data formats or omit implicit 
      pad bytes, use standard size and alignment instead of 
      native size and alignment: see <a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow noreferrer">Byte Order, Size, and 
      Alignment</a> for details.</p>
</blockquote>
</div>
<span class="comment-copy">can you provide a MCVE? <i><a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></i></span>
<span class="comment-copy">What platform are you on?  Is this Python 2 or 3?  Did you open the file in binary mode?</span>
<span class="comment-copy">64 bit Windows. Python 3.5. File is opened in Binary mode.</span>
<span class="comment-copy">Yep, that's the reason.  You should add a <code>=</code>, <code>&lt;</code> or <code>&gt;</code> at the beginning of the format string, depending on the endianness you want.</span>
<span class="comment-copy">Here I was thinking the "&lt;/!/&gt;/=" only meant endianness, and had no effect other than that. Thanks!</span>
