<div class="post-text" itemprop="text">
<p>For some reason Im using SqlAlchemy with custom queries:</p>
<pre><code>sql = "SELECT id, shooter_id, value FROM points WHERE match_id = %s ORDER BY value" % match_id
rows = self._session.execute(sql).fetchall()
for (shooter_id, value) in rows:
  r[shooter_id] = value
</code></pre>
<p>with this query i've got this data:</p>
<pre><code>1 100 5.5
3 101 6.4
2 121 8.2
</code></pre>
<p>Not a big deal and it works good on my development PC with Windows, Python 3.6.0 and MariaDb. But when I deploy application to debian jessie with Python 3.4.2 and Mysql problems come: data stop being sorted. In other words I've got:</p>
<pre><code>1 100 5.5
2 121 8.2
3 101 6.4
</code></pre>
<p>Unsorted! </p>
<p>All libaries are the same versions and I have no idea where to look to solve this. Okay, I have different pyton version and DB engine but I dont think it is that.</p>
<p>Help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You store the returned data in a dictionary and when you print the dictionary you get the result in a random order. Use the following snippet to print your dictionary properly:</p>
<pre><code>for key in sorted(r.keys()):
    print(key, r[key])
</code></pre>
<p>If you use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> python will remember the order you entered the keys.</p>
</div>
<span class="comment-copy">Note that you should pretty much never format values to SQL queries with string formatting. Use placeholders. SQLAlchemy even offers tools for using DB-API driver agnostic placeholders with the <code>text()</code> construct. Read <a href="http://docs.sqlalchemy.org/en/latest/core/tutorial.html#using-textual-sql" rel="nofollow noreferrer">docs.sqlalchemy.org/en/latest/core/â€¦</a></span>
