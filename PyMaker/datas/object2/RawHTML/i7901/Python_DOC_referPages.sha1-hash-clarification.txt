<div class="post-text" itemprop="text">
<p>I have the following python code:</p>
<pre><code>from hashlib import sha1
secretString=b"this is the secret string"
publicData=b"x10291434"
hash=sha1(publicData+secretString).hexdigest()
</code></pre>
<p>Now if i send out the <code>publicData</code> and <code>hash</code> for public consumption. Is this safe? I want to check that when the user provides the <code>publicData</code> back it matches the <code>hash</code> i originally sent with my <code>secretKey</code>.</p>
<p>I just wanted to check that I'm doing this correctly</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are trying to do <a href="https://www.wikiwand.com/en/Hash-based_message_authentication_code" rel="nofollow noreferrer">HMAC</a></p>
<p>You should try using something like <a href="https://pythonhosted.org/itsdangerous/" rel="nofollow noreferrer">itsdangerous</a></p>
<pre><code>&gt;&gt;&gt; from itsdangerous import Signer
&gt;&gt;&gt; s = Signer('secret-key')
&gt;&gt;&gt; s.sign('my string')
'my string.wh6tMHxLgJqB6oY1uT73iMlyrOA'
&gt;&gt;&gt; s.unsign('my string.wh6tMHxLgJqB6oY1uT73iMlyrOA')
'my string'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, SHA-1 isn't considered a safe hashing algorithm, so no, it isn't safe.</p>
<blockquote>
<p>SHA-1 is no longer considered secure against well-funded opponents. In 2005, cryptanalysts found attacks on SHA-1 suggesting that the algorithm might not be secure enough for ongoing use,[4] and since 2010 many organizations have recommended its replacement by SHA-2 or SHA-3.[5][6][7] Microsoft,[8] Google,[9] Apple[10] and Mozilla[11][12][13] have all announced that their respective browsers will stop accepting SHA-1 SSL certificates by 2017.</p>
</blockquote>
<p>source: <a href="https://en.wikipedia.org/wiki/SHA-1" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/SHA-1</a></p>
<p>more reading: <a href="https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html" rel="nofollow noreferrer">https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html</a></p>
</div>
<span class="comment-copy">You should use a proper <a href="https://en.wikipedia.org/wiki/Hash-based_message_authentication_code" rel="nofollow noreferrer">HMAC construction</a></span>
<span class="comment-copy">What Dan D said. It's easy to use any of the hashlib hash functions with the standard <a href="https://docs.python.org/3/library/hmac.html" rel="nofollow noreferrer">hmac</a> module. For new code you might as well use a stronger hash, eg SHA-256, although as the Wikipedia article mentions, the HMAC construction is resistant to the kinds of attacks that are possible with simple MD5 or SHA-1 hashing.</span>
<span class="comment-copy">Insterad use an HMAC, see: <a href="https://docs.python.org/2/library/hmac.html#module-hmac" rel="nofollow noreferrer">Keyed-Hashing for Message Authentication</a>.</span>
<span class="comment-copy">Thanks Jakob if i didn't want to use another library can i generate the HMAC with hashlib.pbkdf2_hmac?</span>
<span class="comment-copy">@johhnyB <code>hashlib.pbkdf2_hmac</code> is excellent. Note that it's designed to be slow to act as a barrier to brute-force attacks. Depending on your application, you may not need that amount of security, and a simple HMAC may be adequate.</span>
<span class="comment-copy">Hi PM 2Ring yes I would prefer speed over security on this occasion. I was just reading about the hmac.new(key, msg=None, digestmod=None) python function. Would that be quicker? does it matter if key is just a random string i pick as a secret key? Or does the key also have to be generated in some special way?</span>
<span class="comment-copy">Use <code>hmac.new</code>, a random generated key of sufficient size (128 bits or higher) would be perfect. For the most secure results use SHA-256 or SHA-512 with a key size of 256 or 512 bits.</span>
<span class="comment-copy">Great thanks Maarten and PM for the very informative information</span>
<span class="comment-copy">It's safe enough for what i want it for I read you still need a lot of computing power to break it. And I'm not dealing with very sensitive information here.</span>
<span class="comment-copy">The way you're using SHA-1 in your question code is <i>not</i> safe. But you can easily make it safe by using SHA-1 as the hash in a HMAC. But as I said in my comment on the question, you might as well use SHA-256 in the HMAC.</span>
