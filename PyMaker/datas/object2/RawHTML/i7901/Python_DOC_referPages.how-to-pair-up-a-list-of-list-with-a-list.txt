<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>xy = [[1,2],[3,4],[5,6]]
z = [1,3,5]
</code></pre>
<p>I want to merge them to get:</p>
<pre><code>xyz = [[1,2,1],[3,4,3],[5,6,5]]
</code></pre>
<p>or</p>
<pre><code>xyz = [(1,2,1),(3,4,3),(5,6,5)]
</code></pre>
<p>Here is how I achieve this:</p>
<pre><code>for i,lst in enumerate(xy):
    lst.append(z[i])
xy
</code></pre>
<p>Is there any neater way to do it without using the for loop or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3.5+, you can make use of <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">PEP 448</a>: </p>
<pre><code>xyz = [(*a, b) for a, b in zip(xy, z)]
</code></pre>
<p>This also uses <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> to make it a simple one-liner.</p>
<hr/>
<p>If you do not want to use a <code>for</code> loop at all, there is actually a way using functional programming and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a>, but this is probably not the best way to go (Python does not favor functional programming):</p>
<pre><code>xyz = map(lambda a, b: a + [b], xy, z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may be a neater way:</p>
<pre><code>Ret = [a + [b] for a, b in zip(xy, z)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short <em>list comprehension</em> with <code>enumerate</code> function:</p>
<pre><code>result = [l+[z[k]] for k,l in enumerate(xy)]
print(result)
</code></pre>
<p>The output:</p>
<pre><code>[[1, 2, 1], [3, 4, 3], [5, 6, 5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest list-comprehensions for readability:</p>
<pre><code>[a + [b] for a, b in zip(xy, z)]
</code></pre>
</div>
<span class="comment-copy">You clearly cannot do it without a loop.</span>
