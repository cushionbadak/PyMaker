<div class="post-text" itemprop="text">
<p>Every time I perform an arthetic operation in python, new number objects are created. Wouldn't it be more efficient for the interpreter to perform arithmetic operations with primitive data types rather than having the overhead of creating objects (even for numbers) for arithmetic operations?
 Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it would.</p>
<p>Just like contrived benchmarks prove more or less whatever you want them to prove.</p>
<p>What happens when you add 3 + 23431827340987123049712093874192376491287364912873641298374190234691283764? Well, if you're using primitive types you get all kinds of overflows. If you're using Python objects then it does some long maths, which yeah, is slower than native math, but they're big numbers so you kind of have to deal with that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your right, when you use objects, you have a small overhead which deteriorates efficiency.</p>
<p>But numbers are non-mutable and memory allocation is optimized for small numbers: see the article <a href="http://www.laurentluce.com/posts/python-integer-objects-implementation/" rel="nofollow noreferrer">Python integer objects implementation</a>.</p>
<p>Using objects allows the developer to inherit the number classes <code>int</code>, <code>float</code>, <code>complex</code> and add new, specialized methods.</p>
<p>In Python, a <a href="https://www.python.org/dev/peps/pep-3141/" rel="nofollow noreferrer">type Hierarchy for Numbers</a> is also defined: Number :&gt; Complex :&gt; Real :&gt; Rational :&gt; Integral. That way, you can have features similar to Scheme.</p>
<p>If you need optimization, you can use <a href="http://cython.org/" rel="nofollow noreferrer">Cython</a>. It uses the C language to perform optimizations.</p>
<p>On the other hand, you also have the famous <a href="http://www.numpy.org/" rel="nofollow noreferrer">NumPy</a> for scientific computing with Python. This library is also compiled in C.</p>
<p>If you really want to play with primitive types, there is an <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer"><code>array</code></a> standard packages: Efficient arrays of numeric values.</p>
<p>As a conclusion: We agree that Python numbers are not primitive types, but using objects offer many more possibilities without introducing complexity for the developer, and without too much lose of performance.</p>
</div>
<span class="comment-copy">It would make the language semantics and implementation a lot more complicated and awkward to add non-object datatypes. If efficient numerical computation is your bottleneck, use NumPy, and/or Cython or related tools.</span>
<span class="comment-copy">@user2357112 suggested good choice but if you want your datatypes back use python2.7 instead of 3.x. cause all datatypes are treated as data structure with class and object in python3</span>
<span class="comment-copy">Integer can be of any precision. It is more than a <code>int32</code>â€¦</span>
<span class="comment-copy">@Gahan: Whatever you're trying to say, it doesn't sound like a Python 3 change.</span>
<span class="comment-copy"><i>"Every time I perform an arthetic operation in python, new number objects are created."</i>. What distribution are you using that does that? In CPython, small integers stay in the same memory address throughout the lifetime of the process.</span>
<span class="comment-copy">Although...not perceptibly slower.</span>
