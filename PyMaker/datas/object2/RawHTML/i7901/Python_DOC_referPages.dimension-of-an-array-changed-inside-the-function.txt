<div class="post-text" itemprop="text">
<p>I wrote a function to handle arrays.</p>
<p>I passed the 2D array into the function as "someFunc(*dna)" but inside the function, it turned out to be 3D.</p>
<p>Why has the dimension changed? How can I keep the same dimension of the argument I passed inside the function?</p>
<pre><code>import numpy as np
import random

q=np.random.random((5,4))

def someFunc(*dna):
    return ((np.shape(dna)))

print (q)
print (np.shape(q))
print(someFunc(q))
</code></pre>
<h1>Returns</h1>
<pre><code>[[ 0.87994033  0.85120494  0.75284745  0.48595008]
 [ 0.71889884  0.95544306  0.70028042  0.30932712]
 [ 0.04329341  0.46292282  0.35225021  0.08891277]
 [ 0.9704255   0.92635685  0.56120996  0.19240052]
 [ 0.27435325  0.71029224  0.55805384  0.26967641]]
(5, 4)
(1, 5, 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two issues - what <code>*args</code> does, and what's the shape of a tuple.</p>
<p>The proper use of *arg is to receive elements of a tuple:</p>
<pre><code>def foo(*dna):
    a,b,c = dna
    print(dna, a)
</code></pre>
<p>Giving 3 arguments works, giving 1, even a tuple does not:</p>
<pre><code>In [235]: foo(1,2,3)
(1, 2, 3) 1
In [236]: foo((1,2,3))
...
ValueError: not enough values to unpack (expected 3, got 1)
</code></pre>
<p>Adding a * in the input unpacks them:</p>
<pre><code>In [237]: foo(*(1,2,3))
(1, 2, 3) 1
</code></pre>
<p>Same goes for an array:</p>
<pre><code>In [238]: foo(np.arange(3))
...
ValueError: not enough values to unpack (expected 3, got 1)
In [239]: foo(*np.arange(3))
(0, 1, 2) 0
</code></pre>
<p><code>args</code> is a tuple, regardless of what is provided:</p>
<pre><code>def bar(*args):
    return args

In [241]: bar(1,2,3)
Out[241]: (1, 2, 3)
In [242]: bar((1,2,3))
Out[242]: ((1, 2, 3),)    # note the extra tuple wrapping
In [243]: bar(*(1,2,3))   # unpack as in 241
Out[243]: (1, 2, 3)
In [244]: bar(np.arange(3))
Out[244]: (array([0, 1, 2]),)    # again, the tuple wrapping
In [245]: bar(*np.arange(3))
Out[245]: (0, 1, 2)
</code></pre>
<p>Taking the shape of a tuple amounts to taking the shape of the array formed from the tuple</p>
<pre><code>In [247]: np.shape((np.arange(3),))
Out[247]: (1, 3)
In [249]: np.array((np.arange(3),))
Out[249]: array([[0, 1, 2]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>*dna</code> collects passed arguments into <a href="https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">tuple</a>. So what you have done equals </p>
<pre><code>def someFunc(dna):
    return np.shape([dna]) # Notice extra brackets
</code></pre>
<p>To keep the same dimension, just remove * before <code>dna</code>.</p>
</div>
<span class="comment-copy">Why <code>*dna</code> instead of plain <code>dna</code>?</span>
<span class="comment-copy">BTW, that <code>import random</code> is pointless - you aren't using the standard <code>random</code> module, you are using Numpy's own <code>random</code> function.</span>
<span class="comment-copy">Why do even want a function for this? You can simply access the array's <code>.shape</code> attribute: <code>q.shape</code></span>
<span class="comment-copy">@hpaulj  Because my actual code is really big and i don't want to dump all my code here which is meaning less. I want to unpack all elements inside the array (dna) instead of just playing around with its index or its shape, i referred [here] (<a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>). To have ease of access to the elements (in dna) i want to keep the same dimension of variable "q"</span>
<span class="comment-copy"><code>*dna</code> unpacks a tuple or list, not an array.  Look at <code>dna</code> inside the funcition - it's a 1 element tuple.</span>
<span class="comment-copy">That's perfect. It is really hard to shift from MATLAB to Python without clear idea about python's control flow. Thanks again!  Thanks you all!</span>
<span class="comment-copy">You're burning through this year's parenthesis quota real fast :P</span>
<span class="comment-copy">@AndrasDeak Recycled them. :)</span>
