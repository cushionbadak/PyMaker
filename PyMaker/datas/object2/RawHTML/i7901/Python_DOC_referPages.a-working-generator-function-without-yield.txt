<div class="post-text" itemprop="text">
<p>In Python 3.5 this returns a generator, but there is no <em>yield</em>:</p>
<pre><code>def square(n):
    return (x**2 for x in range(n))

print(square) 
# &lt;function square at 0x7f1ad0990f28&gt;
print(square(10))
# &lt;generator object square.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f1ad08e0af0&gt;
</code></pre>
<p>Apart from being more apparently a generator function, is there a reason to prefer a <em>yield</em>'ed version, like</p>
<pre><code>def square(n):
    for x in range(n): yield x**2

print(square)
# &lt;function square at 0x7f1ac413ed90&gt;
print(square(10))
# &lt;generator object square at 0x7f1ad08e0d58&gt;
</code></pre>
<p>To me they seem to work identically. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your function is indeed not a generator, but this expression <strong>is</strong>: </p>
<pre><code>(x**2 for x in range(n))
</code></pre>
<p>It is a <em>generator expression</em>, see the <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="noreferrer">reference documentation</a>.</p>
<p>Both a generator expression and a function body containing <code>yield</code> result in a generator object. Since both are an <em>object</em>, you can pass it around and return one from a function.</p>
<p>A generator function and the equivalent generator expression are functionally exactly the same. They produce the same bytecode. Pick the one you feel is more readable for your use case.</p>
</div>
<span class="comment-copy">That's it, now I realize what &lt;genexpr&gt; tried to tell me.</span>
