<div class="post-text" itemprop="text">
<p><strong>XML file:</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;
&lt;rdf:RDF xmlns:cim="http://iec.ch/TC57/2008/CIM-schema-cim13#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
&lt;cim:Terminal rdf:ID="A_T1"&gt;
&lt;cim:Terminal.ConductingEquipment rdf:resource="#A_EF2"/&gt;
&lt;cim:Terminal.ConnectivityNode rdf:resource="#A_CN1"/&gt;
&lt;/cim:Terminal&gt;
&lt;/rdf:RDF&gt;
</code></pre>
<p>I want to get the Terminal.ConnnectivityNode element's attribute value  and Terminal element's attribute value also as output from the above xml. I have tried in below way!</p>
<p><strong>Python code:</strong></p>
<pre><code>from elementtree import ElementTree as etree
tree= etree.parse(r'N:\myinternwork\files xml of bus systems\cimxmleg.xml')
cim= "{http://iec.ch/TC57/2008/CIM-schema-cim13#}" 
rdf= "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}"
</code></pre>
<p>Appending the below line to the code </p>
<pre><code>print tree.find('{0}Terminal'.format(cim)).attrib
</code></pre>
<p><strong>output1:</strong> : Is as expected</p>
<pre><code>{'{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID': 'A_T1'}
</code></pre>
<p>If we Append with this below line to above code</p>
<pre><code>print tree.find('{0}Terminal'.format(cim)).attrib['rdf:ID'] 
</code></pre>
<p><strong>output2</strong>: key error in rdf:ID</p>
<p>If we append with this below line to above code   </p>
<pre><code>print tree.find('{0}Terminal/{0}Terminal.ConductivityEquipment'.format(cim))
</code></pre>
<p><strong>output3</strong> None</p>
<p>How to get <strong>output2</strong> as A_T1 &amp;  <strong>Output3</strong> as #A_CN1?</p>
<p>What is the significance of {0} in the above code, I have found that it must be used through net didn't get the significance of it?</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, the <code>{0}</code> you're wondering about is part of the syntax for Python's built-in string formatting facility. <a href="https://docs.python.org/3.4/library/string.html#formatstrings" rel="nofollow noreferrer">The Python documentation has a fairly comprehensive guide to the syntax.</a> In your case, it simply gets substituted by <code>cim</code>, which results in the string <code>{http://iec.ch/TC57/2008/CIM-schema-cim13#}Terminal</code>.</p>
<p>The problem here is that <code>ElementTree</code> is a bit silly about namespaces. Instead of being able to simply supply the namespace prefix (like <code>cim:</code> or <code>rdf:</code>), you have to <strong>supply it in XPath form</strong>. This means that <code>rdf:id</code> becomes <code>{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID</code>, which is very clunky.</p>
<p><code>ElementTree</code> does support <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#parsing-xml-with-namespaces" rel="nofollow noreferrer">a way to use the namespace prefix for finding tags</a>, but <em>not for attributes</em>. This means you'll have to expand <code>rdf:</code> to <code>{http://www.w3.org/1999/02/22-rdf-syntax-ns#}</code> yourself.</p>
<p>In your case, it could look as following (note also that <code>ID</code> is case-sensitive):</p>
<pre><code>tree.find('{0}Terminal'.format(cim)).attrib['{0}ID'.format(rdf)]
</code></pre>
<p>Those substitutions expand to:</p>
<pre><code>tree.find('{http://iec.ch/TC57/2008/CIM-schema-cim13#}Terminal').attrib['{http://www.w3.org/1999/02/22-rdf-syntax-ns#}ID']
</code></pre>
<p>With those hoops jumped through, it works (note that the ID is <code>A_T1</code> and not <code>#A_T1</code>, however). Of course, this is all really annoying to have to deal with, so you could also switch to <a href="https://pypi.python.org/pypi/lxml/3.7.3" rel="nofollow noreferrer">lxml</a> and have it mostly handled for you.</p>
<p>Your third case doesn't work simply because 1) it's named <code>Terminal.ConductingEquipment</code> and not <code>Terminal.ConductivityEquipment</code>, and 2) if you really want <code>A_CN1</code> and not <code>A_EF2</code>, that's the <code>ConnectivityNode</code> and not the <code>ConductingEquipment</code>. You can get <code>A_CN1</code> with <code>tree.find('{0}Terminal/{0}Terminal.ConnectivityNode'.format(cim)).attrib['{0}resource'.format(rdf)]</code>.</p>
</div>
<span class="comment-copy">Nitpick: <code>#A_T1</code> is not found in the XML document. There is only <code>A_T1</code></span>
<span class="comment-copy">sry thanks for the edit</span>
<span class="comment-copy">If the expected result for "output3" is <code>#A_CN1</code>, then the code for that should be <code>print tree.find('{0}Terminal/{0}Terminal.ConnectivityNode'.format(cim)).attrib['{0}resource'.format(rdf)]</code>.</span>
<span class="comment-copy">@mzjn You're right - I didn't even catch the mismatch between selected element and desired attribute. Thanks. Updated!</span>
<span class="comment-copy">thanks a lot obskyr! it  hepled me to move to next level!!</span>
