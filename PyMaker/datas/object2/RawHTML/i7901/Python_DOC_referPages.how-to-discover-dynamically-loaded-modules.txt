<div class="post-text" itemprop="text">
<p>I was attempting to use <code>importlib.util</code> I ended up only importing <code>importlib</code></p>
<pre><code>$ python3.6
&gt;&gt;&gt; import importlib
&gt;&gt;&gt; importlib.util
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: module 'importlib' has no attribute 'util'
</code></pre>
<p>Since I knew there was an <code>importlib.util</code> I then imported the full module name</p>
<pre><code>&gt;&gt;&gt; import importlib.util
&gt;&gt;&gt; importlib.util
&lt;module 'importlib.util' from     '/Users/alexlord/.virtualenvs/python3.6/lib/python3.6/importlib/util.py'&gt;
</code></pre>
<p>This looks like a dynamic module that's only loaded if you directly import it.</p>
<p>This got me wondeirng, how does one discover these dynamically loaded modules? Is there a programmatic way to discover them or do I just need to enumerate the source code?</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, packages do not import modules (or sub-packages).</p>
<p>So:</p>
<pre><code>import importlib
</code></pre>
<p>does not import the module util.</p>
<p>But the developper can choose to do it for you.</p>
<p>For instance:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; 
&gt;&gt;&gt; os.path.pathsep
':'
</code></pre>
<p>To understand everything about modules and packages, there is an <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">excellent tutorial</a>.</p>
<p>Note: you can also meet "namespace packages". See <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">PEP 420</a> for details.</p>
<p><strong>EDIT</strong></p>
<p>To find sub-modules you can use <code>pkg_resources.resource_listdir()</code>:</p>
<pre><code>import pkg_resources

l = [m for m in pkg_resources.resource_listdir('importlib', '.')
     if m.endswith('.py') and not m.startswith('_')]
</code></pre>
<p>You get:</p>
<pre><code>['abc.py', 'machinery.py', 'util.py']
</code></pre>
<p>See <a href="http://setuptools.readthedocs.io/en/latest/pkg_resources.html#basic-resource-access" rel="nofollow noreferrer">Basic Resource Access</a> in the documentation. </p>
<p><strong>EDIT 2</strong></p>
<p>Another way to discover subpackages or submodules is to use <a href="https://docs.python.org/3/library/pkgutil.html" rel="nofollow noreferrer">pkgutil.walk_packages</a>. It is probably the best solution.</p>
<p>For instance:</p>
<pre><code>import pkgutil
import importlib

for i in pkgutil.walk_packages(importlib.__path__):
    print(i)
</code></pre>
<p>You get:</p>
<pre><code>(FileFinder('/var/containers/Bundle/Application/84CF9501-45D6-43E0-9319-886F5DE85176/Pythonista3.app/Frameworks/Py3Kit.framework/pylib/importlib'), '_bootstrap', False)
(FileFinder('/var/containers/Bundle/Application/84CF9501-45D6-43E0-9319-886F5DE85176/Pythonista3.app/Frameworks/Py3Kit.framework/pylib/importlib'), '_bootstrap_external', False)
(FileFinder('/var/containers/Bundle/Application/84CF9501-45D6-43E0-9319-886F5DE85176/Pythonista3.app/Frameworks/Py3Kit.framework/pylib/importlib'), 'abc', False)
(FileFinder('/var/containers/Bundle/Application/84CF9501-45D6-43E0-9319-886F5DE85176/Pythonista3.app/Frameworks/Py3Kit.framework/pylib/importlib'), 'machinery', False)
(FileFinder('/var/containers/Bundle/Application/84CF9501-45D6-43E0-9319-886F5DE85176/Pythonista3.app/Frameworks/Py3Kit.framework/pylib/importlib'), 'util', False)
</code></pre>
</div>
<span class="comment-copy"><code>importlib</code> is a package. Submodules of packages are only loaded once something explicitly imports them (though that explicit import might be somewhere you never see it, depending on the package and submodule.)</span>
<span class="comment-copy"><code>os.path</code> is a bad example, since <code>os</code> isn't actually a package. <code>os</code> directly messes with <code>sys.modules</code> to make <code>os.path</code> behave a little like a package submodule.</span>
<span class="comment-copy">Well, I don't know this detail. Any other example in the standard lib?</span>
<span class="comment-copy">I think <code>os</code> is the only module in the standard library that does the weird things it does. As for examples of packages, <code>collections</code> is a package in Python 3, with <code>collections.abc</code> as a submodule. There's also <code>multiprocessing</code> and a few others.</span>
<span class="comment-copy">So this explains why this behavior happens but my question was more about if there's a mechanism to discover sub-packages or modules other then crawling a file system.</span>
<span class="comment-copy">To find the subpackages you need to crawl the file system anyway. This is how they are found. A good practice can be using <code>pkg_resources</code>.</span>
