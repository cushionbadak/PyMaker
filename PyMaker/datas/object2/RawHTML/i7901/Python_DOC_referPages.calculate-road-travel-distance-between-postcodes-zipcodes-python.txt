<div class="post-text" itemprop="text">
<p>I have a csv file with start and end postcodes (UK equivalent of US zipcodes) and would like to compute simple distance, road travel distance and travel time between the two. I guess the way to go would be to use Google maps in one way or another. I first tried using some spreadhsheet and the following url <a href="http://maps.google.com/maps?saddr=" rel="nofollow noreferrer">http://maps.google.com/maps?saddr=</a>"&amp;B2&amp;"&amp;daddr="&amp;A2&amp;" but </p>
<ol>
<li>I do not know how to retrieve the resulting distance from google maps   </li>
<li>I would like to know some more pythonic way to work this out</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The main issue with finding a distance between 2 postcodes is that they aren't designed for it.</p>
<blockquote>
<p>For the purposes of directing mail, the United Kingdom is divided by
  Royal Mail into postcode areas. -<a href="https://en.wikipedia.org/wiki/List_of_postcode_areas_in_the_United_Kingdom" rel="noreferrer">Wikipedia</a></p>
</blockquote>
<p>A postcode by itself provides no useful information, so you are correct you need help from an external source. The Google maps service at <a href="http://maps.google.com" rel="noreferrer">http://maps.google.com</a> is of no use, as it's not designed for you to retrieve information like this.</p>
<hr/>
<h2>Option 1 - <a href="https://developers.google.com/maps/documentation/distance-matrix/intro" rel="noreferrer">Google Maps API</a></h2>
<p>The Google Maps API is feature packed and will provide you with a lot of options. The link above is to the Distance Matrix API, which will help with working out distances between 2 points. The results from this will be based on travel (so driving distance), this may or may not be what you want.</p>
<h3>Example</h3>
<p><em>Python 3</em></p>
<pre><code>import urllib.request
import json

res = urllib.request.urlopen("https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&amp;origins=SE1%208XX&amp;destinations=B2%205NY").read()
data = json.loads(res.decode())
print(data["rows"][0]["elements"][0]["distance"])
# {'text': '127 mi', 'value': 204914}
</code></pre>
<blockquote>
<p><strong>Note</strong>: Google Maps API is subject to <a href="https://developers.google.com/maps/documentation/distance-matrix/usage-limits" rel="noreferrer">usage limits</a>.</p>
</blockquote>
<h2>Option 2 - Do it yourself with <a href="http://postcodes.io/" rel="noreferrer">postcodes.io</a></h2>
<p>postcodes.io has a nice API backed by a public data set. <a href="http://api.postcodes.io/postcodes/SE18XX" rel="noreferrer">Example lookup</a>. Results are in JSON which can be mapped to a Python dictionary using the <a href="https://docs.python.org/3/library/json.html" rel="noreferrer">json</a> module. The downside here is it provides no way to check distance, so you will have to do it yourself using the Longitude and Latitude returned.</p>
<h3>Example</h3>
<p><em>Python 3</em></p>
<pre><code>import urllib.request
import json

res = urllib.request.urlopen("http://api.postcodes.io/postcodes/SE18XX").read()
data = json.loads(res)
print(data["result"]["longitude"], data["result"]["latitude"])
# -0.116825494204512 51.5057668390097
</code></pre>
<h2>Calculating distance</h2>
<p>I don't want to get too much into this because it's a big topic and varies greatly depending on what you're trying to achieve, but a good starting point would be the <a href="https://en.wikipedia.org/wiki/Haversine_formula" rel="noreferrer">Haversine Formula</a>, which takes into account the curvature of the Earth. However, it assumes the Earth is a perfect sphere (which it's not).</p>
<blockquote>
<p>The haversine formula determines the great-circle distance between two
  points on a sphere given their longitudes and latitudes. Important in
  navigation, it is a special case of a more general formula in
  spherical trigonometry, the law of haversines, that relates the sides
  and angles of spherical triangles.</p>
</blockquote>
<p>Here is an example of it implemented in Python: <a href="https://stackoverflow.com/a/4913653/7220776">https://stackoverflow.com/a/4913653/7220776</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The distance between postal codes can be obtained with the <a href="https://github.com/symerio/pgeocode" rel="nofollow noreferrer">pgeocode</a> library. Unlike the above response, it does not query a web API, and is therefore more suitable for processing large amounts of data,</p>
<pre><code> &gt;&gt;&gt; import pgeocode

 &gt;&gt;&gt; dist = pgeocode.GeoDistance('GB')
 &gt;&gt;&gt; dist.query_postal_code('WC2N', 'EH53')
 536.5  # retured distance in km
</code></pre>
<p>More information about these postal codes, including latitude and longitude, can be queried with,</p>
<pre><code> &gt;&gt;&gt; nomi = pgeocode.Nominatim('GB')
 &gt;&gt;&gt; nomi.query_postal_code(['WC2N', 'EH53'])
   postal_code country code                                     place_name  \
 0        WC2N           GB                                         London   
 1        EH53           GB  Pumpherston, Mid Calder, East Calder, Oakbank   

   state_name state_code     county_name county_code community_name  \
 0    England        ENG  Greater London    11609024            NaN   
 1   Scotland        SCT    West Lothian         WLN            NaN   

   community_code  latitude  longitude  accuracy  
 0            NaN   51.5085  -0.125700       4.0  
 1            NaN   55.9082  -3.479025       4.0
</code></pre>
<p>This uses the <a href="http://download.geonames.org/export/zip/" rel="nofollow noreferrer">GeoNames postal code dataset</a> to get the GPS coordinates, then computes the Haversine (great circle) distance on those. Most countries are supported.</p>
<p>In the particular case of Great Britain, only the outward codes are included in the <code>GB</code> dataset, the full dataset is also available as <code>GB_full</code> but it is currently <a href="https://github.com/symerio/pgeocode/issues/4" rel="nofollow noreferrer">not supported</a> in pgeocode.</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks like the perfect resource for you (they provide lat and long values for each postcode in the UK, in various formats): <a href="https://www.freemaptools.com/download-uk-postcode-lat-lng.htm" rel="nofollow noreferrer">https://www.freemaptools.com/download-uk-postcode-lat-lng.htm</a>
and in particular this CSV file (linked in the same page):
<a href="https://www.freemaptools.com/download/full-postcodes/ukpostcodes.zip" rel="nofollow noreferrer">https://www.freemaptools.com/download/full-postcodes/ukpostcodes.zip</a></p>
<p>Once you match geographical coordinates to each postcode you have (out of the scope of this question), say you'll have a table with 4 columns (i.e. 2 (lat, long) values per postcode). 
You can compute the distances using numpy. Here's an example:</p>
<pre><code>import numpy as np
latlong = np.random.random((3,4))
# Dummy table containing 3 records, will look like this:
# array([[ 0.258906  ,  0.66073909,  0.25845113,  0.87433443],
#        [ 0.7657047 ,  0.48898144,  0.39812762,  0.66054291],
#        [ 0.2839561 ,  0.04679014,  0.40685189,  0.09550362]])
# The following will produce a numpy array with as many elements as your records
# (It's the Euclidean distance between the points)
distances = np.sqrt((latlong[:, 3] - latlong[:, 1])**2 + (latlong[:, 2] - latlong[:, 0])**2)
# and it look like this:
# array([ 0.21359582,  0.405643  ,  0.13219825])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to calculate the distance between two UK postcodes is not to use latitude and longitude but to use easting and northing instead.</p>
<p>Once you have easting and northing you can just use Pythagoras's theorem to calculate the distance, making the maths much simpler.</p>
<ol>
<li><p>Get the easting and northing for the postcodes. You can use <a href="https://www.getthedata.com/open-postcode-geo" rel="nofollow noreferrer">Open Postcode Geo</a> for this.</p></li>
<li><p>Use the below formula to find the distance:</p></li>
</ol>
<p><code>sqrt(pow(abs(easting1 - easting2),2) + pow(abs(northing1 - northing1),2))</code></p>
<p>This example is from MySQL but you should be able to find similar functions in both Excel and Python:</p>
<ul>
<li><code>sqrt()</code>: Find the square root.</li>
<li><code>pow()</code>: Raise to the power of.</li>
<li><code>abs()</code>: Absolute
value (ignore sign).</li>
</ul>
</div>
<span class="comment-copy">Absolutely right. Geographic distance is <b>not</b> the same as Euclidean distance.  For example, longitudinal distance is calculated as a function of the latitude.  This makes sense when you think about travelling from the line of 1 degree East to the line 2 degrees East; at the equator this is well over 50 miles, but very close to the North or South poles it would be a tiny distance.  The Haversine formula accounts for this.  Also see <a href="https://en.wikipedia.org/wiki/Vincenty%27s_formulae" rel="nofollow noreferrer">Vincenty's Formulae</a> for equations on the surface of the Earth.</span>
<span class="comment-copy">@alxwrd thanks! The python code on how to call Google API and read the   JSON is exactly what I was looking for. However, your code did not work for me (python 3.5): data = json.loads(res) was giving me TypeError: the JSON object must be str, not 'bytes'. I now modified your answer to be data = json.loads(res.decode()) and it works as it was supposed to.</span>
<span class="comment-copy">Need to thank you again: I ended up using postcodes.io as well. This answer has been twice useful!</span>
<span class="comment-copy">Using the Euclidean distance is incorrect in this case, Haversine (great-circle) distance should be used instead.</span>
<span class="comment-copy">Agreed. This is an approximate approach.</span>
