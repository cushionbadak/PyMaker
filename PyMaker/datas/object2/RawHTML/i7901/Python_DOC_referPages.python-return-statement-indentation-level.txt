<div class="post-text" itemprop="text">
<p>Following a tutorial where indentation level of second return statement (return False) is right below for loop, so outside of loop.
Shouldn't it be inside the for loop?</p>
<pre><code>import scrabble
letters = "abcdefghijklmnoprstuvwxyz"

def has_a_double(letter):
  for word in scrabble.wordlist:
    if letter + letter in word:
      return True
  return False

for letter in letters:
  if not has_a_double(letter):
    print(letter + " never appears doubled")
</code></pre>
<p>I have another snippet where same indentation level results in incorrect output:</p>
<pre><code>#word_list = ["one", "two", "four"]
#word_list = ["three", "five", "six", "seven", "nine"]
word_list = ["one", "two", "three", "five", "four"]
#word_list = ["one", "two", "three", "five"]
def has_o_in_it(words):
  for word in words:
    if "o" not in word:
      return False
  return True

if has_o_in_it(word_list):
  print("word list has o in it")
else:
  print("word list has no o in it")
</code></pre>
<p>When I run above snippet, result is "word list has no o in it"
Why not put the return statements all under conditional checks?</p>
</div>
<div class="post-text" itemprop="text">
<p>So let's go through the logic of <code>has_o_in_it(words)</code>:</p>
<ol>
<li>There's multiple words so we need to iterate them: <code>for word in words:</code></li>
<li>for <strong>each</strong> word we need to check if it contains 'o': <code>if "o" in word:</code>
<ol>
<li>If word contains "o" we know the list does: <code>return True</code></li>
<li>If word doesn't contain "o" we need to keep checking: <code>continue</code></li>
</ol></li>
<li>If we get through the entire list without <code>returning True</code> we can conclude the list does not contain "o": <code>return False</code>.</li>
</ol>
<p>So the code should look like:</p>
<pre><code>def has_o_in_it(words):
    for word in words:
        if "o" in word:
            return True
        else: 
            continue
    return False
</code></pre>
<p>There are other (more concise ways) to write this code as well (first one is best):</p>
<pre><code># Uses a list comprehension and the any (https://docs.python.org/3/library/functions.html#any) keyword.
def has_o_in_it(words):
    return any("o" in word for word in words)

# Filters the array for only word with o, converts to list and then to 
boolean (empty lists == False).
def has_o_in_it_(words):
    return bool(list(filter(lambda x: "o" in x, words)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have another snippet where same indentation level results in incorrect output</p>
</blockquote>
<p>The output is only incorrect because the logic is flawed. </p>
<p>Step over the list yourself. It'll immediately return False at three and claim no words contain an o. </p>
<p>You shouldn't have a return in the loop. And you could keep track of it instead assuming you are wanting to see all the elements </p>
<pre><code>def has_o_in_it(words):
  seen = False 
  for word in words:
    if "o" in word:
      seen = True 
  return seen
</code></pre>
<p>However, that's very verbose, and could rather be </p>
<pre><code>return any(lambda word: 'o' in word, words) 
</code></pre>
<p>Or </p>
<pre><code>return 'o' in ''.join(words) 
</code></pre>
</div>
<span class="comment-copy">Why do you think it should be inside the loop? It would end the loop on the first iteration, <i>always</i>.</span>
<span class="comment-copy">In other words, by <b>not</b> placing it in the loop you only return <code>False</code> after all items in the loop have been examined. What do you think is more correct?</span>
<span class="comment-copy">I'll assume that tutorial hasn't mentioned the <code>any()</code> function?</span>
<span class="comment-copy">No I haven't encountered any() function yet, but I will be checking it shortly. I guess I was confused as in above words example,my sample word_list lists did not account for possible word ordering combinations. Thank you all for clarifying.</span>
