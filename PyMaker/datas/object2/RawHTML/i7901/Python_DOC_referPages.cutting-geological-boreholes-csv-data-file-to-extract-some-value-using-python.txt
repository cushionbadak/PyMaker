<div class="post-text" itemprop="text">
<p>It's my first question/post so first of all I would like to say THANKS for all great ideas and solutions that I have found in this place.</p>
<p>I have a problem with pretty simple task: I've got a csv file with geophysical measurements of soil/rock electrical resistivity in some grup of boreholes. I have to find rho value at some cutoff level e.g. 5 meters. I have measurement number (m_nr), which is also a layer number, x and y coordinates, ordinate ("o" as meters above sea level), resistivity (rho), layer depth (h) and layer thickness (d). The value of rho which I'm looking for is in the first row of different borehole which meet the condition h &gt;= cutoff. I'm using python 3.6 and that's how my code looks:</p>
<pre><code>file = open('measurement.csv', newline='')
file = csv.reader(file, delimiter=';', quotechar='|')
measurements = list(file)
result = []
cutoff=5
for m_nr, x, y, ordinate, rho, h, d in measurements:
    m_nr = int(m_nr)
    x = int(x)
    y = int(y)
    o = float(ordinate)
    rho = float(rho)
    h = float(h)
    d = float(d)
    if h &gt;= cutoff:
        result.append([x, y, m_nr, o-cutoff, rho, h, d])
</code></pre>
<p>and some output:</p>
<pre><code>[[20456, 10234, 4, 90.0, 2356.0, 7.0, 2.25],
 [20456, 10234, 5, 90.0, 24563.0, 15.0, 8.0],
 [20456, 10234, 6, 90.0, 250.0, 21.0, 6.0],
 [10122, 15678, 3, 108.0, 245.0, 6.0, 2.0],
 [10122, 15678, 4, 108.0, 2356.0, 7.0, 1.0],
 [10122, 15678, 5, 108.0, 24563.0, 15.0, 8.0],
 [30111, 34444, 2, 75.0, 4686.0, 12.0, 11.0],
 [30111, 34444, 3, 75.0, 245.0, 16.0, 4.0],
 [30111, 34444, 4, 75.0, 2356.0, 28.0, 12.0]]
</code></pre>
<p>That's just a test file and I expect that in some near future I will have houndrets of boreholes so effectivity of code matters... For each borehole (different set of x,y) only the first row in the list is the one that I need. I don't know how to extract it from my results and that's where I'm asking for your help.
Regards,
Matsu</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll just go over several things.</p>
<ol>
<li>It's cleaner to open the file using a <code>with</code> statement so you don't have to worry about closing it</li>
<li>You can use the <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>DictReader</code></a> class to make the data accessible more easily. </li>
<li>Don't do <code>list(file)</code>, just iterate over the reader directly. That way you don't have to load the whole thing into memory. </li>
<li>You can keep track of the <code>x, y</code> values and skip the rest after you find a match.</li>
</ol>
<p>Result:</p>
<pre><code>with open('measurement.csv', newline='') as file:
    fieldnames = ['m_nr', 'x', 'y', 'ord', 'rho', 'h', 'd']
    reader = csv.DictReader(file, fieldnames=fieldnames)
    result = []
    last_xy = None
    cutoff=5
    for line in reader:
        xy = int(line['x']), int(line['y'])
        if xy == last_xy:
            continue # skip processing since we already have a match
        h = float(line['h'])
        if h &gt;= cutoff:
            result.append(line)
            last_xy = xy # if we find a match, save the xy
</code></pre>
<p>Finally, if the goal is to put the result into a new CSV file, I'd just have an output file open for writing at the same time and write out the results instead of appending them to a list. That way you never need to have more than a few lines in memory at a time.</p>
</div>
<span class="comment-copy">Check out <code>pandas</code>. It is a data analysis/wrangling library. An excellent guide is <code>Python Data Science Handbook </code> from Jake VanderPlas, which you can find <a href="http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/Index.ipynb" rel="nofollow noreferrer">online</a></span>
<span class="comment-copy">PS, post a few lines of the <code>measurement.csv</code>, then we can help you</span>
<span class="comment-copy">It's just ordinary csv file - rows and columns (m_nr, x, y, ordinate, rho, h, d):						 1	20456	10234	95	4000	0.9	0.9 \n 2	20456	10234	95	4686	2	1.1 \n 3	20456	10234	95	245	4.75	2.75 \n 4	20456	10234	95	2356	7	2.25 \n 5	20456	10234	95	24563	15	8 \n</span>
<span class="comment-copy">Wow, thanks a lot! I've just added few lines to save results in new file and it works great. I'm really thankful!</span>
<span class="comment-copy">@Matsu glad I could help! Please mark the answer as accepted if it solved  your problem.</span>
