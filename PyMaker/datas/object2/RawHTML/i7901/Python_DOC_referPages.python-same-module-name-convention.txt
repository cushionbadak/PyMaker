<div class="post-text" itemprop="text">
<p>In reference to this question:<br/>
<a href="https://stackoverflow.com/questions/15720593/python-two-modules-and-classes-with-the-same-name-under-different-packages">python: Two modules and classes with the same name under different packages</a></p>
<p>Should all modules in a package be uniquely named, regardless of nesting? PEP8 and PEP423 do not seem to address this.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no requirement that names at different levels must be different. Each level is a separate namespace. If <code>foo.utils</code> and <code>foo.bar.utils</code> make sense in your project, just do so.</p>
<p>For example, the Python standard library has <a href="https://docs.python.org/3/library/email.message.html" rel="nofollow noreferrer"><code>email.message</code></a> and <a href="https://docs.python.org/3/library/email.mime.html?highlight=email.mime.message#email.mime.message.MIMEMessage" rel="nofollow noreferrer"><code>email.mime.message</code></a>, and <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.connection" rel="nofollow noreferrer"><code>multiprocessing.connection</code></a>, as well as <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow noreferrer"><code>multiprocessing.dummy.connection</code></a>, and many more:</p>
<pre><code>$ ls ~/Development/Library/cpython/Lib/**/*.py  | grep -v __ | grep -v test_ | xargs basename | sort | uniq -c | grep -v '  1 ' | sort
   2 abc.py
   2 ascii.py
   2 client.py
   2 connection.py
   2 constants.py
   2 dump.py
   2 errors.py
   2 filelist.py
   2 handlers.py
   2 log.py
   2 message.py
   2 parse.py
   2 parser.py
   2 process.py
   2 queues.py
   2 server.py
   2 spawn.py
   2 text.py
   2 tree.py
   3 main.py
   4 config.py
   5 support.py
   6 util.py
</code></pre>
<p>That's all modules that appear inside packages, appear more than once, excluding tests, <code>__init__.py</code> and <code>__main__.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since package is based on the filesystem, you can not, in normal circonstance, have the same packages because files/directories have no duplicate.</p>
<p>You can have the same namespace package, of course.</p>
<p>It is also possible to have the same package/module name in different paths. They are searched in order, so the first win.</p>
</div>
