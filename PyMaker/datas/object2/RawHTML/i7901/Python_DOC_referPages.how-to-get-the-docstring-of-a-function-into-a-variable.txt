<div class="post-text" itemprop="text">
<p>None of these commands will retrieve the docstring of a function and assign it to a variable. How can it be achieved?</p>
<p>I attempted various things. One of which is the <code>help</code> function, but it seems to activate an entire program as opposed to returning a string. I have tried various commands but none of them work to retrieve the docstring.</p>
<pre><code>import PIL

PILCommands=dir('PIL')

ListA=[]
ListB=[]
ListC=[]
ListD=[]
ListE=[]
LisfF=[]
ListG=[]
ListH=[]

for x in PILCommands:
    print(x)
    try:
        ListA.append(x.__doc__)
    except:
        pass
    try:
        ListB.append(x.__doc__())
    except:
       pass
    try:
        ListC.append(str(x))
    except:
        pass
   try:
       ListD.append(help(x))
   except:
       pass
   try:
       ListE.append(eval("x.__doc__"))
   except:
       pass
   try:
       ListF.append(eval("inspect.getdoc(x)"))
   except:
        pass
   try:
        ListG.append(eval("dir(x)"))
   except:
        pass
   try:
        ListH.append(eval("PIL.x.__doc__"))
   except:
        pass

print
print("Command1: x.__doc__")
print(ListA)
print
print("Command1: x.__doc__()")
print(ListB)
print
print("Command1: str(x)")
print(ListC)
print
print("help(x)")
print(ListD)
print
print('Command1: eval("eval("x.__doc__")')
print(ListE)
print
print('Command1: eval("inspect.getdoc(x)")')
print(ListE)
print
print('Command1: eval("dir(x)")')
print(ListG)
print
print('Command1: eval("PIL.x.__doc__")')
print(ListG)
</code></pre>
<p>Answer :</p>
<pre><code>python &lt;&lt; EOF
import inspect
import PIL 
doc = inspect.getdoc(PIL)
print doc
print type(doc)
EOF
</code></pre>
<p>So it has no documentation .</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/inspect.html#inspect.getdoc" rel="nofollow noreferrer"><code>inspect.getdoc</code></a>, that will process the docstring of the object and return it as string:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; doc = inspect.getdoc(I)

&gt;&gt;&gt; print(doc)
This is the documentation string (docstring) of this function .
It contains an explanation and instruction for use . 
</code></pre>
<p>Generally the documentation is stored in the <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="nofollow noreferrer"><code>__doc__</code></a> attribute:</p>
<pre><code>&gt;&gt;&gt; doc = I.__doc__
&gt;&gt;&gt; print(doc)

    This is the documentation string (docstring) of this function .
    It contains an explanation and instruction for use . 
</code></pre>
<p>But the <code>__doc__</code> won't be cleaned: it <em>might</em> contain leading and trailing empty newlines and the indentation <em>may</em> not be consistent. So <code>inspect.getdoc</code> should be the preffered option.</p>
<hr/>
<h3>The following is based on your original question:</h3>
<p>To get the documentation of <code>PIL</code> functions you could use:</p>
<pre><code>&gt;&gt;&gt; import PIL
&gt;&gt;&gt; import inspect

&gt;&gt;&gt; doc = inspect.getdoc(PIL.Image.fromarray)
&gt;&gt;&gt; print(doc)
Creates an image memory from an object exporting the array interface
(using the buffer protocol).

If obj is not contiguous, then the tobytes method is called
and :py:func:`~PIL.Image.frombuffer` is used.

:param obj: Object with array interface
:param mode: Mode to use (will be determined from type if None)
  See: :ref:`concept-modes`.
:returns: An image object.

.. versionadded:: 1.1.6
</code></pre>
<p>To get the documentations of all functions in a module you need to use <code>getattr</code>:</p>
<pre><code>for name in dir(PIL.Image):
    docstring = inspect.getdoc(getattr(PIL.Image, name))  # like this
</code></pre>
<p>To get a list of all docstrings:</p>
<pre><code>list_of_docs = [inspect.getdoc(getattr(PIL, obj)) for obj in dir(PIL)]
</code></pre>
<p>Or if you need to corresponding name then a dict would be better:</p>
<pre><code>list_of_docs = {obj: inspect.getdoc(getattr(PIL, obj)) for obj in dir(PIL)}
</code></pre>
<hr/>
<p>However not everything actually <strong>has a documentation</strong>. For example the <code>PIL.Image</code> module has no docstring:</p>
<pre><code>&gt;&gt;&gt; PIL.Image.__doc__
None
&gt;&gt;&gt; inspect.getdoc(PIL.Image)
None
</code></pre>
<p>and when attempting to get the docstring of an instance you might get surprising results:</p>
<pre><code>&gt;&gt;&gt; inspect.getdoc(PIL.__version__)
str(object='') -&gt; str
str(bytes_or_buffer[, encoding[, errors]]) -&gt; str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
</code></pre>
<p>That's because <code>PIL.__version__</code> is a string instance and simply shows the docstring of its class: <code>str</code>:</p>
<pre><code>&gt;&gt;&gt; inspect.getdoc(str)  # the built-in "str"
str(object='') -&gt; str
str(bytes_or_buffer[, encoding[, errors]]) -&gt; str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
</code></pre>
</div>
<span class="comment-copy"><code>.__doc__</code> would work just fine, but <code>x</code> is a string, the <i>name</i> of the thing, not the thing itself. Try <code>PIL[x].__doc__</code>.</span>
<span class="comment-copy">@jonrsharpe Modules are not subscriptable, but <code>getattr</code> should work fine.</span>
<span class="comment-copy">@MSeifert good point, thanks</span>
<span class="comment-copy">@user2564386 I removed the "fails to import PIL" part of the code because it contained an indentation error and it's not really relevant for the question (see <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>). If I accidentally introduced mistakes - feel free to edit the question again. :)</span>
<span class="comment-copy"><a href="https://stackoverflow.com/q/21553327/216074">Don’t use <code>except: pass</code></a>. And most of those lines won’t ever raise exceptions, so this just adds complexity where no complexity should be.</span>
