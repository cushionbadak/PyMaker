<div class="post-text" itemprop="text">
<p>Im new to python and trying to save raw post data in python into mysql.</p>
<p>I want to iterate over each element in the json that is posted and save all the data to DB.</p>
<p><strong>json list of objects:</strong>  (30 objects with each 11 columns)</p>
<pre><code>[
 {
   "col1":7878,
   "col2":"c004979d3969a86a8fdcda2f92eb39e3",
   "col3":"b000yht23",
    ...
   "col11":2

 },
 {
   "col1":7878,
   "col2":"c004979d3969a86a8fdcda2f92eb39e3",
   "col3":"b000yht23"
    ...
   "col11":43 
 },
 #upto 30 objects
 ....
]
</code></pre>
<p><strong>'json_test' table desc:</strong></p>
<blockquote>
<p>CREATE TABLE <code>json_test</code> (</p>
<pre><code>`col1` varchar(250) NOT NULL,

`col2` varchar(250) NOT NULL,

`col3` varchar(250) NOT NULL,

`col4` varchar(250) NOT NULL,

`col5` varchar(250) NOT NULL,

`col6` varchar(250) NOT NULL,

`col7` varchar(250) NOT NULL,

`col8` varchar(250) NOT NULL,

`col9` varchar(250) NOT NULL,

`col10` varchar(250) NOT NULL,

`col11` varchar(200) NOT NULL
</code></pre>
<p>) ENGINE=InnoDB DEFAULT CHARSET=latin1;</p>
</blockquote>
<p><strong>UPDATED to save data to DB:</strong></p>
<p>My py code looks like:</p>
<pre><code>from flask import Flask, abort, request 
import json
import pymysql

app = Flask(__name__)


@app.route('/foo', methods=['GET','POST']) 
def foo():
    jsonobject=request.json
    if not jsonobject:
        abort(400)

# load- converts JSON source text to a Python value
#readable_json=json.dumps(jsonobject)

#UPDATED with column_names
k=0
for i in jsonobject:
    # Connect to the database
    conn = pymysql.connect(host='10.20.3.4', port=3306, user='root', passwd='', db='python_db')


    try:
        with conn.cursor() as cursor:
            column_names = ['col1','col2','col3',...'col11']
            column_names_str = ', '.join(column_names)
            binds_str = ', '.join('%s' for _ in range(len(column_names)))
            sql=("INSERT INTO `json_test` ({column_names})" \
                  " VALUES({binds})"
            .format(column_names=column_names_str,binds=binds_str))   
            for data_dict in jsonobject:
            values = [data_dict[column_name]
                      for column_name in column_names]

            cursor.execute(sql, values)
            print("Insert successfull!")
            #UPDATED 
            k+=1
            conn.commit()

    finally:
        conn.close()


return "Insert successful"
#return json.dumps(jsonobject)


if __name__ == '__main__':
    app.run(host='10.22.1.168',debug=True,port=7845)
</code></pre>
<p><strong>UPDATED code result:</strong></p>
<p>Only the last record seems to be inserting</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace this mess</p>
<pre><code>#UPDATED with column_names
k=0
for i in jsonobject:
    # Connect to the database
    conn = pymysql.connect(host='10.20.3.4', port=3306, user='root', passwd='', db='python_db')


    try:
        with conn.cursor() as cursor:
            column_names = ['col1','col2','col3',...'col11']
            column_names_str = ', '.join(column_names)
            binds_str = ', '.join('%s' for _ in range(len(column_names)))
            sql=("INSERT INTO `json_test` ({column_names})" \
                  " VALUES({binds})"
            .format(column_names=column_names_str,binds=binds_str))   
            for data_dict in jsonobject:
            values = [data_dict[column_name]
                      for column_name in column_names]

            cursor.execute(sql, values)
            print("Insert successfull!")
            #UPDATED 
            k+=1
            conn.commit()

    finally:
        conn.close()


return "Insert successful"
</code></pre>
<p>with</p>
<pre><code>try:
    with conn.cursor() as cursor:
        columns_names = ['col1', 'col2', 'col3', 'col4', 'col5', 'col6',
                         'col7', 'col8', 'col9', 'col10', 'col11']
        columns_names_str = ', '.join(columns_names)
        binds_str = ', '.join('%s' for _ in range(len(columns_names)))
        for data_dict in jsonobject:
            sql = ("INSERT INTO json_test ({columns_names}) "
                   "VALUES ({binds})"
                   .format(columns_names=columns_names_str,
                           binds=binds_str))
            values = [data_dict[column_name]
                      for column_name in columns_names]
            cursor.execute(sql, values)
        print("Insert successfull!")
        conn.commit()
finally:
    conn.close()
</code></pre>
<hr/>
<h1>Summation</h1>
<ul>
<li><code>k</code> object is redundant,</li>
<li>also name <code>i</code> is unclear and makes me think like it is some kind of index when it is not: it is a <code>dict</code> object,</li>
<li>we don't need to create connection for each object from <code>jsonobject</code> because it is an expensive operation,</li>
<li>we don't need to create <code>sql</code> object on each iteration as well (it remains unchanged),</li>
<li>storing columns names in <code>list</code>/<code>tuple</code> will save us from writing them twice: in a query and in values extraction.</li>
<li><p>creating binds <code>str</code></p>
<pre><code>%s, %s, ...
</code></pre>
<p>dynamically based on number of columns saves us from typo when we've missed/added too many bind aliases</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>json.dumps</code> does the <em>opposite</em> of what you claim; it converts a Python object into a string.</p>
<p>The result of <code>request.json</code> is already a Python datastructure. You don't need to do anything else with it.</p>
</div>
<span class="comment-copy">it will be great to see your <code>json_test</code> table declaration and <code>jsonobject</code> example</span>
<span class="comment-copy">have updated with the table desc and json dicts</span>
<span class="comment-copy">in your table definition <code>col1</code> is <code>varchar</code>, while in jsonobject it has <code>int</code> value, should it be converted to <code>str</code>?</span>
<span class="comment-copy">have you tried to modify given answer with columns names specified?</span>
<span class="comment-copy">read my answer again and find out what was missed</span>
<span class="comment-copy">Thanks for the detailed explanation @Azat, but can u please clarify like what does   [data_dict[column_name] in values do , i mean where is 'column_name'..?</span>
<span class="comment-copy">are you wondering what <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> does, or what?</span>
<span class="comment-copy">i was wondering is it a typo in column_name under values... values = [data_dict[column_name]  column_name or columns_names</span>
<span class="comment-copy">we are getting single <code>column_name</code> from <code>columns_names</code> list, so there is no typo</span>
<span class="comment-copy">so if i need to iterate over all the elementsis it right if i use : for i in jsonobject:   but still i get same error and remove the line readable_json=...</span>
<span class="comment-copy">I have updated the code @Daniel, but data not saving for multiple json objects</span>
