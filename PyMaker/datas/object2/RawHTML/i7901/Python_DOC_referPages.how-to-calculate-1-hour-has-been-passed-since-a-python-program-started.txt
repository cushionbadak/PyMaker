<div class="post-text" itemprop="text">
<p>I would like to ask: how to write a python program to calculate 1 hour has been passed since we started a python program?</p>
<p>I take an example:
- We started the python program at 17:00:00
- After running 1 hour (at 18:00:00), python program will print a message to inform 1 hour has been passed.</p>
<p>I can figure out a python program. Firstly, I record the time at starting the program (called <code>start_time</code>), then I continuously record the next time (called <code>end_time</code>). If the (<code>end_time</code> - <code>start_time</code> == 1 hour), it prints a message.</p>
<p>However it seems the program wastes so much CPU performance! I need a program that take less CPU performance.</p>
<p>EDIT:
I need as below.</p>
<p>I have a thread name <code>wait_an_event_thread</code>. It is a blocking thread. If event <code>trigger</code>  is not set, this thread is blocked.
During blocking time, if 1 hour has been passed, this thread print out a message.
That is my expectation.</p>
<p>Previously, I said that I continuously record next time (call <code>end_time</code>). It meant I intended change from blocking thread to non-blocking thread because I did not know how to print a message in blocked thread if 1 hour has been passed. But it seems non-blocking thread take so much CPU performance.</p>
<p>This is my code:<br/>
MY EXPECTATION: <strong>blocking thread</strong></p>
<pre><code>def wait_an_event_thread(trigger):
    trigger.wait()
    # If 1 hour has been passed, it print a message
    # How to print message if 1 hour has been passed in this blocking thread if the "trigger" event is not set??

trigger  = threading.Event()
wait_an_event_thread = threading.Thread(name='wait_an_event_thread', 
                       target=wait_an_event_thread,
                       args=(trigger,))
wait_an_event_thread.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As it turned out you needed to use the <em>timeout</em> parameter of <a href="https://docs.python.org/2/library/threading.html#threading.Event.wait" rel="nofollow noreferrer"><code>Event.wait()</code></a> and check if the event has been set upon return or not:</p>
<pre><code>def wait_an_event_thread(trigger):
    while not trigger.wait(3600):
        print "1 hour has passed"

    # Do what must be done when triggered

trigger = threading.Event()
the_thread = threading.Thread(name='wait_an_event_thread', 
                              target=wait_an_event_thread,
                              args=(trigger,))
the_thread.start()
</code></pre>
<p>This'll keep on printing the diagnostic message between hour(ish) intervals, if the Event is not set. <code>Event.wait()</code> <a href="https://stackoverflow.com/questions/29082268/python-time-sleep-vs-event-wait/35633484#35633484">might behave badly if your system clock jumps backwards</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import threading

def func():
    #your code here

t = threading.Timer(3600, func)
t.start()
</code></pre>
<p><a href="https://docs.python.org/2.7/library/threading.html?highlight=timer#threading.Timer" rel="nofollow noreferrer">More details in documentation</a> </p>
<p>Thanks to @Ilja Everilä for the corrections and improvements</p>
</div>
<div class="post-text" itemprop="text">
<p>You could take advantage of multi-threading and create a separate thread that runs separately from the rest of the code. That thread simply sleeps for 1h and then prints "1h have been passed" then sleeps again for another hour.</p>
<p>To put it in code form, you will need something like this:
</p>
<pre><code>import time
def print_message_every_interval( threadName, message, interval=3600, ):
   while True:
      time.sleep(interval) #interval in seconds
      print ("%s: %s: %s" % ( threadName, time.ctime(time.time()), message ))
</code></pre>
<p>and in your main() add something like:</p>
<pre><code>  import _thread

  if __name__=="__main__":
   #
   # your init code here
   #
   try:
    _thread.start_new_thread( print_message_every_interval, \
     ("Timer-1h", "One hour have passed", 3600 ) )
   except Exception as e:
    print('could not start new thread')
    print(e)
   #
   # the rest of your code here
   #
</code></pre>
<p>of course there are many multi-threading libraries you can use to make the code look fancy. Like the <code>threading</code> module.</p>
<p>You can find more on this topic here:
<a href="https://www.tutorialspoint.com/python3/python_multithreading.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python3/python_multithreading.htm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest after one hour you use </p>
<pre><code>`time.sleep(t)` 
</code></pre>
<p>where <code>t</code> being as high as possible without affecting your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>start a thread which will call a function  after every hour and print message. 
you can write the code like this with your main function:
import threading</p>
<pre><code>def print():
    print "One Hour has been passed"

t = threading.Timer(3600, print)
t.start()
</code></pre>
<p>This will call the print function after every hour and print the message.</p>
</div>
<span class="comment-copy">You could use a <a href="https://docs.python.org/3/library/threading.html?highlight=timer#threading.Timer" rel="nofollow noreferrer"><code>Timer</code></a>. You also should include a minimal example of what you've tried up till now, so others can better help you.</span>
<span class="comment-copy">I edit my post for my example. Could you read it?</span>
<span class="comment-copy">You have a function and a var with the same name, it causes problems. Also, if you want her help you need to tag her as so @IljaEverilä</span>
<span class="comment-copy">I'm afraid I don't understand what you mean by a blocking thread. Is the trigger an event, condition, or other synchronization object that the thread should wait for (as it seems to do), but it should resume after an hour has passed to inform about it. What should happen after that? Should it continue to wait? Should the program exit? For example <code>Event.wait()</code> accepts a timeout as float seconds, after which it resumes even if the flag has not been set.</span>
<span class="comment-copy">Are you perhaps looking for something like <code>while not trigger.wait(timeout=3600):</code> + the print inside the loop (if using an <code>Event</code>)? In other words: what is <code>trigger</code>?</span>
<span class="comment-copy">Use seconds for compare hours ? Don't need seconds level resolution !</span>
<span class="comment-copy">@dsgdfg blame the nice guys who created the threading module</span>
<span class="comment-copy">Any programmer never use an external timer ! How to handle garbage data, exceptions, errors etc. Function time not equal  to system time. What is event ?</span>
<span class="comment-copy">@dsgdfg You make 0 sense to me. Python handles garbage collection as it always does. Handle exceptions in the callback function. Time skew is a topic on its own.</span>
<span class="comment-copy">@dsgdfg it is a built in module... If you manage to use python without using any modules you are either an extremely good programmer with a ton of time or you have no code other than 'hello world'</span>
<span class="comment-copy">Sleep not good if not in a thread !</span>
<span class="comment-copy">Shouldn't use builtin names</span>
<span class="comment-copy"><code>def print(): print...</code> Try and run this on Python 3, having corrected <code>print ""</code> into <code>print("")</code>, and you'll understand why you never overwrite built-in names ;)</span>
