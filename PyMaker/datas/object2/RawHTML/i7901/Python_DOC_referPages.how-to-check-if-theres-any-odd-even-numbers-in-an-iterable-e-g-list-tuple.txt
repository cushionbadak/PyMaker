<div class="post-text" itemprop="text">
<p>Suppose we're checking if there's any odd numbers in a <code>list</code>. The most direct way is:</p>
<pre><code>def has_odd(L):
    for v in L:
        if v % 2 == 1:
            return True
    return False
</code></pre>
<p>The <code>has_odd</code> function checks if there's any odd numbers in a <code>list</code>, once an odd number is found, it returns <code>True</code>. But this seems a bit verbose. A more concise way using <code>reduce</code> is as follow:</p>
<pre><code>reduce(lambda res, v: res or bool(v), L, False)
</code></pre>
<p>But this will iterate through all elements and is unnecessary, because once an odd number is found the result is surely <code>True</code>.</p>
<p>So, are there any other ways to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>any()</code> function to reduce the verbosity:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; any(n % 2 == 1 for n in l)
True
&gt;&gt;&gt;
</code></pre>
<p>Note however, <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any()</code> is pretty much the same as you had originally just generalized</a>, so don't expect a speed improvement:</p>
<pre><code>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>first of all let's write small indicator function for "oddness" like</p>
<pre><code>def is_odd(number):
    return number % 2
</code></pre>
<p>then we can write our indicator for "has at least one odd number" using <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> with <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow noreferrer"><code>imap</code></a>/<a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a></p>
<ul>
<li><p><strong>Python 2.*</strong></p>
<pre><code>from itertools import imap


def has_odd_number(iterable):
    return any(imap(is_odd, iterable))
</code></pre></li>
<li><p><strong>Python 3.*</strong></p>
<pre><code>def has_odd_number(iterable):
    return any(map(is_odd, iterable))
</code></pre></li>
</ul>
<p>or with <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a></p>
<pre><code>def has_odd_number(iterable):
    return any(is_odd(number) for number in iterable)
</code></pre>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; has_odd_number([0])
False
&gt;&gt;&gt; has_odd_number([1])
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way. you can use <code>not all()</code></p>
<pre><code>&gt;&gt;&gt; l = [2, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; not all(n%2==1 for n in l)
True
</code></pre>
</div>
<span class="comment-copy"><code>any(int(digit) % 2 for digit in str(number))</code></span>
<span class="comment-copy">Obviously if <code>L</code> is a sequence, correct form is <code>any(number % 2 for number in sequence)</code>. I somehow misread a question and  thought you are checking digits in numbers, for numbers in list.</span>
<span class="comment-copy">That <i>could</i> be condensed to <code>any(n % 2 for n in l)</code>, or <code>any(n &amp; 1 for n in l)</code>, but I guess your version is a little more readable.</span>
<span class="comment-copy">@PM2Ring Yes, your right. I'm aware I could've reduced it down even more. But, like you said, I think the version I posted is a bit more readable. And it doesn't really come at that much of a cost.</span>
<span class="comment-copy">I have a little question: in the expression <code>any(n % 2 == 1 for n in l)</code>, is <code>n % 2 == 1 for n in l</code> a <code>generator</code>? Shouldn't it be <code>any((n % 2 == 1 for n in l))</code>?</span>
<span class="comment-copy">@CharlesDong Your right. it is a generator. The reason it does not need parenthesis around it is because it is the sole argument to <code>any()</code>.  If <code>any()</code> took more arguments, the expression need parenthesis around it. <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">Here is what the documentation says</a>: <i>"The parentheses can be omitted on calls with only one argument. See section Calls for details."</i>.</span>
