<div class="post-text" itemprop="text">
<p>I am trying to run a multiprocessing program but for some reason the processes do not start at the same time, they wait for the other one to finish. Below is a piece of the code and some outputs. Could you please advise?
I am running python 2.7 on windows 10 but i tested on python 3.5 Ubuntu as well with the same results.</p>
<p>Even though both processes are running the same function it doesn't matter for me which one finishes first because their results are not tied, I just want to use better the CPU</p>
<pre><code>import multiprocessing
import time
import os

def function(x):
    seq1 = x
    index = 1
    match = False
    t = time.time()

    while match == False:
.........................
       if k==6 :
          match = True

       index = index + 1

def Main():
    x1=raw_input("Please enter first sequence: ")
    seq1=[]
    seq1 = x1.split(",")

    p1 = multiprocessing.Process(target=function(seq1),)
    p1.start()
    p2 = multiprocessing.Process(target=function(seq1),)
    p2.start()

Main()
</code></pre>
<p>Output(I have to wait until P1 finishes and then P2 starts):
P1 started
process id: 4520
Match found in: 30401191 tries
('done by P1 in: ', 1072.0950000286102)
P2 started
process id: 4520
Match found in: 8665524 tries
('done by P2 in: ', 298.375)</p>
</div>
<div class="post-text" itemprop="text">
<p>You are misusing the <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#multiprocessing.Process" rel="nofollow noreferrer"><code>multiprocessing.Process</code></a> class interface. You need to pass the function as a target and the arguments in a list.</p>
<p>Your logic is calling the function and passing its results as a target to the process.</p>
<pre><code>p1 = multiprocessing.Process(target=function, args=(seq1,))
p1.start()
p2 = multiprocessing.Process(target=function, args=(seq1,))
p2.start()
</code></pre>
</div>
<span class="comment-copy">python excutes its programs synchronously. So you can not execute two functions at the same time. but you can achieve it by using <a href="https://docs.python.org/3/library/threading.html#module-threading" rel="nofollow noreferrer">link</a> <i>italic</i> <b>bold</b> <code>threading</code> and multiprocessing</span>
<span class="comment-copy"><code>k</code> is not defined....</span>
<span class="comment-copy">If you're on Windows you need to not call <code>Main</code> at the top level of the module. See <a href="https://docs.python.org/2/library/multiprocessing.html#windows" rel="nofollow noreferrer">the documentation</a>.</span>
