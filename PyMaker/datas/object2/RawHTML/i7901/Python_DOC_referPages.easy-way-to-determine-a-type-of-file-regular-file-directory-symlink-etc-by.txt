<div class="post-text" itemprop="text">
<p>I wanted an easy way to determine a type of path so I googled alot and then I wrote this:</p>
<pre><code>from stat import S_ISREG, S_ISDIR, S_ISLNK
from os import stat, lstat
from os.path import isfile, islink, isdir, lexists, exists
from enum import Enum, auto

class FileTypes(Enum):
    FILE = auto()
    LINK_TO_FILE = auto()
    DIR = auto()
    LINK_TO_DIR = auto()
    BROKEN_LINK = auto()
    NO_SUCH = auto()
    UNDEFINED = auto()

def file_type(filename):
    if lexists(filename):
        if isfile(filename):
            if islink(filename):
                return FileTypes.LINK_TO_FILE
            else:
                return FileTypes.FILE
        else:
            if isdir(filename):
                if islink(filename):
                    return FileTypes.LINK_TO_DIR
                else:
                    return FileTypes.DIR
            else:
                if islink(filename):
                    return FileTypes.BROKEN_LINK
                else:
                    return FileTypes.UNDEFINED
    else:
        return FileTypes.NO_SUCH
</code></pre>
<p>Then I googled more and wrote this:</p>
<pre><code>def file_type2(filename):
    if lexists(filename):
        if exists(filename):
            mode = stat(filename).st_mode
            lmode = lstat(filename).st_mode # os.lstat doesn't follow symlinks
            if S_ISREG(mode) and S_ISREG(lmode):
                return FileTypes.FILE
            elif S_ISREG(mode) and S_ISLNK(lmode):
                return FileTypes.LINK_TO_FILE
            elif S_ISDIR(mode) and S_ISDIR(lmode):
                return FileTypes.DIR
            elif S_ISDIR(mode) and S_ISLNK(lmode):
                return FileTypes.LINK_TO_DIR
            else:
                return FileTypes.UNDEFINED
        else:
            return FileTypes.BROKEN_LINK
    else:
        return FileTypes.NO_SUCH
</code></pre>
<p>Both functions do what I want, but look kinda ugly and I think that I'm missing a simpler solution hiding in some cool python lib.</p>
<p><strong>Question is:</strong> Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>We can make it more consise with utilizing bitmasking inside enum:</p>
<p>Let's assume first value describes if file exists: 0 for existing and 1 for not existing, second one will be symlink: 1 for links and 0 for non-links, third for directory: 1 if it is directory and 0 if it is not, and the last for file in hte same menner.</p>
<p>So if we wanted to describe file that existsand is a symlink to file, we would use <code>0(exists)1(link)0(non-dir)1(file)</code></p>
<p>With using meaningful values we can now consisely chain those values together with results returned from python <code>stat</code> wrapper.</p>
<pre><code>class FileTypes(Enum):
    FILE = 1 #0001
    LINK_TO_FILE = 5 #0101
    DIR = 2 #0010
    LINK_TO_DIR = 6 #0110
    BROKEN_LINK = 4 #0100
    NO_SUCH = 0 #1000
    UNDEFINED = #0000

def file_type(filepath):
    return FileTypes.NO_SUCH if lexists(filepath) else 
        Filetypes(int(
            str(int(islink(filepath)))
          + str(int(isdir(filepath)))
          + str(int(isfile(filepath)))))
</code></pre>
<p>Obviously there is issue of some <code>illegal</code> states like if something would report that it is both directory and file, at that point this will raise exception, it can be modified for different behaviour, but raising exception seems perfectly valid.</p>
<p>Also I've used pretty ugly way of adding together this value, but this is for sake of readibility. You always could do <code>''.join(map(str,map(int,[islink(filepath),isdir(filepath),isfile(filepath)])))</code> or even shorter ways</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> module which has been in stdlib since Python 3.4 (for older pythons use <code>pip install pathlib</code>). It defines the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="nofollow noreferrer"><code>Path</code></a> class which contains methods for both checking types of files as well as <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve" rel="nofollow noreferrer">resolving</a> symlinks. Besides, it provides a pretty convenient API: </p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; path = Path("/etc/") / "passwd"
&gt;&gt;&gt; path
PosixPath('/etc/passwd')
&gt;&gt;&gt; path.is_file()
True
</code></pre>
</div>
