<div class="post-text" itemprop="text">
<p>I have a python class which has multiple methods. I have defined my methods via <code>@staticmethod</code> instance and I want to call other methods of my class from inside my main function(<code>main_function</code>). I think I need <code>self</code> parameter for calling my other functions from my main function and I want to pass this parameter to my <code>main_function</code> when I create an instance of my class. </p>
<pre><code>class myclass:
  @staticmethod
  def function1(param1)
      print "function1"
  @staticmethod
  def main_function(self, param1)
     function1(param1)

my_object = myclass()
my_object.main_function(param1)
</code></pre>
<p>I got this error:</p>
<pre><code>TypeError: main_function() takes exactly 2 arguments (1 given)
</code></pre>
<p>The problem is that I have not <code>self</code> parameter when I create my instance. I tried to remove <code>@staticmethod</code> keyword from my method definition and remove all <code>self</code> parameter using, but this does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Only use <code>@staticmethod</code> if you are creating a function that you'd normally want to tie to specific classes but <em>do not need any other context</em>. For example, the <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="noreferrer"><code>str.maketrans()</code> function</a> is a static method because it is a utility function you'd often use when working with strings, namespacing it to the already-existing <code>str</code> type (which pre-exists as a class) makes sense there.</p>
<p>You appear to be using classes as a <em>namespace</em> instead. Don't do that. Use a module for your functions, and you don't have to worry about the special scoping rules that apply to classes. Only use a class when you need to bundle <em>state</em> with <em>functionality</em>.</p>
<p>If you insist on using classes with static methods <em>anyway</em>, you are stuck with hardcoding the class name everywhere:</p>
<pre><code>class myclass:
    @staticmethod
    def function1(param1)
        print "function1"

    @staticmethod
    def main_function(param1)
        # Want to use other functions in this class? Then you will
        # have to use the full name of the class as a prefix:
        myclass.function1(param1)
</code></pre>
<p>You could make use of <em>classmethods</em> instead so you have a reference to the class object:</p>
<pre><code>class myclass:
    @staticmethod
    def function1(param1)
        print "function1"

    @classmethod
    def main_function(cls, param1)
        # Now you can use the `cls` reference to access other attributes
        cls.function1(param1)
</code></pre>
<p>This has the added advantage that you can use inheritance.</p>
<p>However, using a module is the correct way to organise a set of functions into a namespace. Put everything into a <code>my_module.py</code> file in your package, and use importing;</p>
<pre><code>import my_module

my_module.main_function(param1)
</code></pre>
<p>Now all globals in my_module are bundled into one module object, and no prefixing or <code>cls</code> references are needed.</p>
</div>
<span class="comment-copy">Why are you using a class <b>at all</b> then? Don't use classes as namespaces, use modules for that.</span>
<span class="comment-copy">Yes, that's what <i>modules are for</i>.</span>
<span class="comment-copy">Classes are for creating custom objects that bundle data and functionality. If you don't have <i>state</i>, don't use classes.</span>
<span class="comment-copy">A static method is precisely one which does <i>not</i> take <code>self</code> because it <i>does not need</i> to call other instance methods, or would do so via the class name.</span>
<span class="comment-copy">@Stateless: you haven't shown any reasons so far, so we can't help you there. Without reasoning on your side, I'll just rely on my 20 years of Python development experience instead and tell you that you should use modules, not classes.</span>
<span class="comment-copy">@Martijin, this is a very good answer. This helped me so much and I understood staticmethod and module via this. Thank you.</span>
