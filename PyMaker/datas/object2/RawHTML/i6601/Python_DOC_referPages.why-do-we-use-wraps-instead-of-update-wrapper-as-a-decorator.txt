<div class="post-text" itemprop="text">
<p>Decorator <code>functools.wraps</code> calls method <code>functools.update_wrapper</code>. </p>
<p>I want to understand the need to use <code>wrap</code> instead of <code>update_wrapper</code>.
Why can't we use <code>update_wrapper</code> as decorator instead of using <code>wraps</code>?</p>
<p>For example:</p>
<pre><code>from functools import update_wrapper
def wrap1(func):
    def call_it(*args, **kwargs):
        """wrap func: call_it1"""
        print('before call in call_it1')
        return func(*args, **kwargs)
    return update_wrapper(call_it, func)

@wrap1
def hello1():
    """test hello 1"""
    print('hello world1')

hello1()   
</code></pre>
<p>and  </p>
<pre><code>def wrap3(func):
    @wraps(func)
    def call_it(*args, **kwargs):
        """wrap func: call_it3"""
        print('before call in call_it3')
        return func(*args, **kwargs)
    return call_it

@wrap3
def hello3():
    """test hello 3"""
    print('hello world3')

hello3()    
</code></pre>
<p>work. But why the following doesn't?</p>
<pre><code>def wrap2(func):
    @update_wrapper(wrapped=func) # error, see below
    def call_it(*args, **kwargs):
        """wrap func: call_it2"""
        print('before call in call_it2')
        return func(*args, **kwargs)
    return call_it

@wrap2
def hello2():
    """test hello 2"""
    print('hello world2')

hello2()
</code></pre>
<p>with error</p>
<pre><code>TypeError: update_wrapper() missing 1 required positional argument: 'wrapper'
</code></pre>
<p><a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">The declarations of <code>wraps</code> and <code>update_wrapper</code></a> are:</p>
<pre><code>@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
</code></pre>
<p>and</p>
<pre><code>functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
</code></pre>
<p>The positional argument <code>wrapper</code> is the first argument to <code>update_wrapper</code>, 
so why doesn't the following pick up <code>call_it</code> as <code>wrapper</code> argument to <code>update_wrapper</code>?</p>
<pre><code>@update_wrapper(wrapped=func)
def call_it(*args, **kwargs):
</code></pre>
<p>Is there some way to use <code>update_wrapper</code> as a decorator instead of using <code>wraps</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>@</code> as a decorator basically boils down to this:</p>
<pre><code> @(value)
 def f(...):
     ...
</code></pre>
<p>Being the same as:</p>
<pre><code>def f(...):
    ...

f = (value)(f)
</code></pre>
<p>Now if we apply it to your case:</p>
<pre><code>@update_wrapper(wrapped=func)
def call_it(*args, **kwargs):
    ...
</code></pre>
<pre><code>def call_it(*args, **kwargs):
    ...

call_it = update_wrapper(wrapped=func)(call_it)
</code></pre>
<p>The problem here is that the first time, it is only called with the second argument. It then raises the error immediately.</p>
<p>This is because <code>update_wrapper</code> is not designed to be used as a decorator, but <code>wraps</code> is a decorator (factory).</p>
</div>
