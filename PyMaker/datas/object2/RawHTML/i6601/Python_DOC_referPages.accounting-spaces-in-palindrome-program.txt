<div class="post-text" itemprop="text">
<p>This is a program that accepts a string of words and checks if the words are palindromes and if it is one, it prints it. However if a string has a space in it, my program won't count it as a palindrome (Example: nurses run). What should I be adding to make the program exclude the space, when it's accounting for palindromes?</p>
<p>Palindrome: a word, phrase, or sequence that reads the same backwards as forwards, e.g. 'madam' or 'nurses run'</p>
<pre><code>import sys

strings = []
for s in sys.argv[1:]:
    strings += [s]

def is_palindrome(word):
    if len(word) &lt;= 2 and word[0] == word[-1]:
        return True
    elif word[0] == word[-1]:
        is_palindrome(word[1:-1])
        return True
    else:
        return False


def printpalindromes(strings):
    for s in strings:
        if is_palindrome(s) == True:
            print(s)

printpalindromes(strings)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try stripping out the whitespaces before doing the palindrome check</p>
<pre><code>&gt;&gt;&gt; x = "nurses run"
&gt;&gt;&gt; x.replace(" ", "")
'nursesrun'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer">reversed</a>:</p>
<pre><code>def palindrome(word):
    if ' ' in word:
       word = word.replace(' ', '')
    palindrome = reversed(word)
    for letter, rev_letter in zip(word, palindrome):
        if letter != rev_letter:
            return 'Not Palindrome'
    return 'Palindrome'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is still incorrect in the elif statement. You've added <code>return True</code> when you should actually be returning the response from your recursive call as previously mentioned.</p>
<pre><code>def is_palindrome(word):
    if len(word) &lt;= 2 and word[0] == word[-1]:
        return True
    elif word[0] == word[-1]:
        return is_palindrome(word[1:-1])
    else:
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simpler solution of your problem:</p>
<pre><code>import sys

sys.argv = ["    nurses         ", "       run       "]
word = "".join([s.strip() for s in sys.argv])
print("{} {} palindrome".format(word, "is" if word == word[::-1] else "is not"))
</code></pre>
<p>or you can just create the word out of sys.argv like this:</p>
<pre><code>word = "".join(sys.argv).replace(" ","")
</code></pre>
</div>
<span class="comment-copy">If anything, you're not  <code>return</code>ing the result of the recursive call.</span>
<span class="comment-copy">@MosesKoledoye fixed. Can you check the new edit?</span>
<span class="comment-copy">There is no need for <code>[]</code> in <code>join()</code>, it can handle generator expressions just fine. It also conserves memory.</span>
