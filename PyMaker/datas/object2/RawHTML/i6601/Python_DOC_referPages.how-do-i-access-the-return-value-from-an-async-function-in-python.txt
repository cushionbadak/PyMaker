<div class="post-text" itemprop="text">
<p>If I try running the following code in Python, I get the following error:</p>
<pre><code>async def foo():
    yield 1

async def bar():
    x = await foo()
b=bar()
b.send(None)
</code></pre>
<blockquote>
<p>TypeError: object async_generator can't be used in 'await' expression</p>
</blockquote>
<p>On the other hand, the following code works (and throws a StopIteration, but this is expected):</p>
<pre><code>async def foo():
    pass

async def bar():
    await foo()
b=bar()
b.send(None)
</code></pre>
<p>Why doesn't this work?</p>
<p>I can make it work if I replace <code>foo</code> with:</p>
<pre><code>@coroutine
def foo():
    yield 1
</code></pre>
<p>The problem here is that this seems weird enough that I'm pretty sure this isn't the recommended way of getting this behaviour. Then in most languages you just need async and await, not @coroutine too!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming here that you are using <code>asyncio</code> library.<br/>
I think that the use of the decorator <code>@coroutine</code> is suggested for compatibility reasons with <code>async def</code> functions, </p>
<blockquote>
<p>although this is not strictly enforced.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.coroutine" rel="nofollow noreferrer">asyncio.coroutine documentation</a></p>
<p>Also</p>
<blockquote>
<p><strong>@asyncio.coroutine</strong> Decorator to mark generator-based coroutines. This
  enables the generator use yield from to call async def coroutines, and
  also <strong>enables the generator to be called by async def coroutines, for
  instance using an await expression</strong>.</p>
<p>There is no need to decorate async def coroutines themselves.</p>
</blockquote>
</div>
