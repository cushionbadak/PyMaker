<div class="post-text" itemprop="text">
<p>So I have a list of tuples, for example <code>[('GGG',), ('AAA',), ('BBB',)]</code> and I want to convert it into a list of strings: <code>['GGG' , 'AAA', 'BBB']</code>. </p>
<p>I have tried using a for loop with the join method but cannot get it to work. Any help would be appreciated, Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use a simple list comprehension:</p>
<pre><code>&gt;&gt;&gt; my_list_of_tuples = [('GGG',), ('AAA',), ('BBB',)]
&gt;&gt;&gt; my_list_of_strings = [str(*x) for x in my_list_of_tuples]
&gt;&gt;&gt; my_list_of_strings
['GGG', 'AAA', 'BBB']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a> from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a></p>
<p>e.g.</p>
<pre><code>from itertools import chain
x = [('GGG',), ('AAA',), ('BBB',)]
print(list(chain.from_iterable(x)))
</code></pre>
<p>output </p>
<blockquote>
<p>['GGG', 'AAA', 'BBB']</p>
</blockquote>
<p>The use of <code>list</code> is only to allow printing the output. It forces the lazy object returned from <code>chain.from_iterable</code> to be evaluated immediately. You don't need it if you will later iterate over object.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways you can achieve this. If array is <code>z = [('GGG',), ('AAA',), ('BBB',)]</code>, then:</p>
<p>1) Using <code>zip</code>: <code>list(list(zip(*z))[0])</code></p>
<p>well the other ways have been just written by the other two most recent answers :).</p>
<p>Also, even though it was not asked, but I got interested in performance, and I wanted to share the results of a rather simple benchmark:</p>
<p>Input</p>
<pre><code>z = [('aaa',) for i in range(10000)]
</code></pre>
<p>@Paul Rooney</p>
<pre><code>%timeit itertools.chain.from_iterable(z)
# 129 ns ± 2.52 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
</code></pre>
<p>@COLDSPEED</p>
<pre><code>%timeit [x[0] for x in z]
# 254 µs ± 1.34 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p>@this</p>
<pre><code>%timeit list(zip(*z))[0]
# 272 µs ± 794 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p>@mentalita</p>
<pre><code>%timeit [str(*x) for x in z]
# 809 µs ± 904 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>t=[('GGG',), ('AAA',), ('BBB',)]
str=[]
for each in t:
    str.append(each[0])
print str
</code></pre>
<p>Above one gives list of strings</p>
</div>
<div class="post-text" itemprop="text">
<p>you can just use <code>itertools</code> <code>chain</code> method tested in <code>python2</code> &amp; <code>python3</code></p>
<pre><code>from itertools import chain
data = [('GGG',), ('AAA',), ('BBB',)]
for item in itertools.chain(*data):
    print(item)
</code></pre>
<blockquote>
<p>The itertools.chain method returns <code>chain</code> object, you can get
  elements using <code>list</code> or <code>iterate</code> using <code>for</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>'isinstance</code>' or <code>type()==tuple</code> method can done the job in just one line using list comprehension :</p>
<pre><code> print([j for i in your_list for j in i if isinstance(i,tuple)])
</code></pre>
<p>:)</p>
</div>
<span class="comment-copy">are the elements in the list of tuples ` [(GGG,), (AAA,), (BBB,)]` also strings?</span>
<span class="comment-copy">yeah they are, that's my mistake. I'll update the question.</span>
<span class="comment-copy">just use <code>itertools.chain.from_iterable</code>.</span>
<span class="comment-copy">Surprised no one mentioned: <code>[x[0] for x in items]</code></span>
<span class="comment-copy">I think @mentalita covered that, more or less.</span>
<span class="comment-copy"><code>str</code> is a bad variable name. There is an inbuilt function called that.</span>
<span class="comment-copy">Hope he need simple logic for his task. Any way next time I will take care of variable names also.</span>
