<div class="post-text" itemprop="text">
<p>Suppose I have the following <code>TestCase</code></p>
<pre><code>class TestSomething(unittest.TestCase):
    def test_a(self):
        # Do some testing

    def test_b(self):
        # Do some other testing
</code></pre>
<p>Is it possible for me to run <code>TestSomething.test_a</code> if I have a reference to that test? What I am looking to do is something like:</p>
<pre><code>def run_test(test):
    # Somehow runs the test
    # HERE IS THE PART I AM REALLY STUCK ON

run_test(TestSomething.test_a)
</code></pre>
<p>I know that it's an awkward thing to do for normal unit testing. What I am trying to do is provide a test to be run as an argument to a function decorator. Essentially:</p>
<pre><code>@corresponding_test(TestSomething.test_a)
def my_function_a():
    # Something here
</code></pre>
<p>And then in the decorator basically check if the test for that function passes before running the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>OP clearly stated that the real world use case is more involved, but this still needs saying:</p>
<p><strong>Disclaimer:</strong> This is <strong>not</strong> a good, standard way to run unit tests. If you use this code to run unit tests, you're [probably] doing it wrong.</p>
<p>That said, your question intrigued me, so I went ahead and wrote a working demo for you:</p>
<pre class="lang-py prettyprint-override"><code>"""
The `only_if_test_passes` decorator can be used to run a function if and
only if the argument test (unbound `TestCase` method) passes.
"""

import inspect
from unittest import TestCase, TestResult


class TestError(Exception):
    pass


class MyTests(TestCase):

    def test_pass(self):
        # This passes because nothing went wrong
        pass

    def test_fail(self):
        self.fail('This test will always fail')


def only_if_test_passes(test_method):
    # Comments are computed values when passed MyTests.test_pass
    test_case_class = inspect._findclass(test_method)  # MyTests
    test_case_name = test_case_class.__name__  # 'MyTests'
    test_name = test_method.__name__  # 'test_pass'
    # Introspection for Python 2:
    # test_case_class = test_method.im_class
    # test_case_name = test_case_class.__name__  # Same as for Python 3
    # test_name = test_method.if_func.func_name

    def decorator(fn):
        def decorated(*args, **kwargs):
            test_result = TestResult()
            case = test_case_class(test_name)  # MyTests('test_pass')
            case(test_result)
            if test_result.wasSuccessful():
                return fn(*args, **kwargs)
            else:
                raise TestError('Unit test failed: {}.{}'.format(
                    test_case_name, test_name))
        return decorated
    return decorator


@only_if_test_passes(MyTests.test_pass)
def this_will_run():
    print('This should output')


@only_if_test_passes(MyTests.test_fail)
def this_wont_ever_run():
    print("Don't bother; you'll never see this.")


if __name__ == "__main__":
    this_will_run()
    this_wont_ever_run()
</code></pre>
<p><a href="https://gist.github.com/walterl/4d9b5a383d8440d4d11cd7e1c7027990" rel="nofollow noreferrer">gist</a></p>
<p>The introspection will be a little different in Python 2.</p>
<p>See also: <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase" rel="nofollow noreferrer"><code>unittest.TestCase</code> docs</a></p>
</div>
<span class="comment-copy">This isn't a unit test. Run the you logic in each method , this is most reasonable.</span>
<span class="comment-copy">I'm doing something more complicated than what is written here that requires what I am asking, do you know the answer to the question?</span>
<span class="comment-copy">Can't seem to find <code>inspect._findclass</code>?</span>
<span class="comment-copy">I tested it with Python 3.5.2. If you're trying the Python 2 introspection, other changes will also be needed. I think the source still demonstrates the answer.</span>
<span class="comment-copy">Can you put the source here instead of in a gist just so that it's saved here and not on another site?</span>
