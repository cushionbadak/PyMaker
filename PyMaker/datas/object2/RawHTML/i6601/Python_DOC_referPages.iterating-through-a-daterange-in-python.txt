<div class="post-text" itemprop="text">
<p>Okay so I am relatively new to programming and this has me absolutely stumped. Im scraping data from a website and the data changes every week. I want to run my scraping process each time the data changes starting back on 09-09-2015 and running to current. </p>
<p>I know how to do this easily running thru every number like 0909 then 0910 then 0911 but that is not what I need as that will be requesting way too many requests from the server that are pointless.</p>
<p>Here is the format of the URL
<a href="http://www.myexamplesite.com/?date=09092015" rel="nofollow noreferrer">http://www.myexamplesite.com/?date=09092015</a></p>
<p>I know the simple:</p>
<pre><code>for i in range(startDate, endDate):
    url = 'http://www.myexamplesite.com/?date={}'.format(i)
    driver.get(url)
</code></pre>
<p>But one thing i've never been able to figure out is manipulate pythons dateTime to accurately reflect the format the website uses.</p>
<p>i.e: 
09092015
09162015
09232015
09302015
10072015
...
09272017</p>
<p>If all else fails I only need to do this once so it wouldnt take too long to just ignore the loop altogether and just manually enter the date I wish to scrape from and then just append all of my dataframes together. Im mainly curious on how to manipulate the datetime function in this sense for future projects that may require more data.</p>
</div>
<div class="post-text" itemprop="text">
<p>A good place to start are <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="nofollow noreferrer"><code>datetime</code></a>, <a href="https://docs.python.org/3/library/datetime.html#date-objects" rel="nofollow noreferrer"><code>date</code></a> and <a href="https://docs.python.org/3/library/datetime.html#datetime.timedelta" rel="nofollow noreferrer"><code>timedelta</code></a> objects docs.</p>
<p>First, let's construct our starting date and ending date (today):</p>
<pre><code>&gt;&gt;&gt; from datetime import date, timedelta
&gt;&gt;&gt; start = date(2015, 9, 9)
&gt;&gt;&gt; end = date.today()
&gt;&gt;&gt; start, end
(datetime.date(2015, 9, 9), datetime.date(2017, 9, 27))
</code></pre>
<p>Now let's define the unit of increment -- one day:</p>
<pre><code>&gt;&gt;&gt; day = timedelta(days=1)
&gt;&gt;&gt; day
datetime.timedelta(1)
</code></pre>
<p>A nice thing about dates (<code>date</code>/<code>datetime</code>) and time deltas (<code>timedelta</code>) is they and can be added:</p>
<pre><code>&gt;&gt;&gt; start + day
datetime.date(2015, 9, 10)
</code></pre>
<p>We can also use <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code></a> to get that date in a human-readable form:</p>
<pre><code>&gt;&gt;&gt; "{date.day:02}{date.month:02}{date.year}".format(date=start+day)
'10092015'
</code></pre>
<p>So, when we put all this together:</p>
<pre><code>from datetime import date, timedelta

start = date(2015, 9, 9)
end = date.today()
week = timedelta(days=7)

mydate = start
while mydate &lt; end:
    print("{date.day:02}{date.month:02}{date.year}".format(date=mydate))
    mydate += week
</code></pre>
<p>we get a simple iteration over dates starting with <code>2015-09-09</code> and ending with today, incremented by 7 days (a week):</p>
<pre><code>09092015
16092015
23092015
30092015
07102015
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look here</p>
<p><a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior</a></p>
<p>You can see the table pictured here for formatting dates and times and the usage.</p>
<p>Of course, if the format of the dates changes in the future or you are parsing different strings, you will have to make code changes. There really is no way around that.</p>
</div>
<span class="comment-copy">Ahah! Thank you. timedelta was what I was missing as my increment type.</span>
<span class="comment-copy">You're welcome! Glad I could help.</span>
<span class="comment-copy">Ah thank you this indeed helped with formatting as I simply went with this: startDate = datetime(2015,9,9) formatDate = startDate.strftime("%Y")+startDate.strftime("%m")+startDate.strftime("%d")</span>
