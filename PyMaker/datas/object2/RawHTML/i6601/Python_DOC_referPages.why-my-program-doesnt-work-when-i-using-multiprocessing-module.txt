<div class="post-text" itemprop="text">
<p>I'm tring to learn the multiprocessing module and I found some example code from the internet.
the code is same but the result is different . please help 
<a href="https://i.stack.imgur.com/lqwVT.png" rel="nofollow noreferrer">why my subprogram doesn't work ? </a></p>
</div>
<div class="post-text" itemprop="text">
<p>The only way I can reproduce your problem is if I set the processes to be daemonic:</p>
<pre><code>p1 = Process(target=piao, args=('a',))
p2 = Process(target=piao, args=('b',))
p3 = Process(target=piao, args=('c',))

p1.daemon = True
p2.daemon = True
p3.daemon = True

p1.start()
p2.start()
p3.start()
</code></pre>
<p>A <code>daemon</code> thread will continue to run without blocking the main program from exiting. On my system and Python (2.X) <code>daemon</code> is <code>False</code> by default. But according to the 3.X documentation</p>
<blockquote>
<p>If provided, the keyword-only daemon argument sets the process daemon
  flag to True or False. If None (the default), this flag will be
  inherited from the creating process.</p>
</blockquote>
<p>Meaning that there is a possibility in your Python Shell on Windows to run processes as <code>daemon</code> without explicit specification.</p>
<p>To change this either set the flag to false:</p>
<pre><code>p1.daemon = False
p2.daemon = False
p3.daemon = False
</code></pre>
<p>which has to be done before calling <code>start</code> but in case of Python 3.6 can be done in the command where you invoke the <code>Process</code> object (see <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">this</a>).</p>
<p>Or use <code>join</code>:</p>
<pre><code>p1.daemon = True
p2.daemon = True
p3.daemon = True

p1.start()
p2.start()
p3.start()

p1.join()
p2.join()
p3.join()

print "done"
</code></pre>
</div>
<span class="comment-copy">@atru Maybe it's because I'm not up-to-date with the latest Python, but execution waits for all of the threads to finish before killing the process for me... It does print the end message somewhere in the middle of the start messages, but it waits for all finish messages</span>
<span class="comment-copy">@HyperNeutrino True, it's not <code>join()</code>. I removed my comment. The program works for me though - with end message printed at the beginning.</span>
<span class="comment-copy">@atru well it is <code>join()</code>... that just waits for the thread to finish and kill it, which makes the end message get printed at the end</span>
<span class="comment-copy">@HyperNeutrino Maybe the <code>flush = False</code> in the <code>print</code> function? I can't check that since I don't have Python 3.X... I had this issue on a cluster with MPI in C (no output until the end of the run though, not not at all).</span>
<span class="comment-copy">@HyperNeutrino I have decent experience with threading and MPI ;) this was a quick answer partially in response to users lack of code (as code not as an image).</span>
<span class="comment-copy">Oh that makes sense; nice! I have it an upvote for a detailed explanation ;)</span>
<span class="comment-copy">@HyperNeutrino Thank you! :) It crossed my mind after I gave up :)</span>
