<div class="post-text" itemprop="text">
<p>What is the <em>most efficient</em> way to find the indexes of strings in a list that occur only once?</p>
<pre><code>foo = ['it', 'does', 'it', 'very', 'very', 'well']
bar = ???  # bar = [1, 5]
</code></pre>
<p>I already know about sets, dictionaries and list comprehensions.  The problem I'm trying to solve here is in my production code I have parallel data lists where the index of one is the index of many which can't be changed for historical reasons.</p>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/3/library/collections.html#counter-objects" rel="nofollow noreferrer"><strong>collections.Counter</strong></a> subclass:</p>
<pre><code>import collections

foo = ['it', 'does', 'it', 'very', 'very', 'well']
counts = collections.Counter(foo)
result = [i for i,v in enumerate(foo) if counts[v] == 1]

print(result)
</code></pre>
<p>The output:</p>
<pre><code>[1, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will get what you want. Dictionaries are faster in python</p>
<pre><code>from collections import Counter
foo = ['it', 'does', 'it', 'very', 'very', 'well']
d = dict(Counter(foo))
[i for i,v in enumerate(foo) if counts[v]  == 1]
</code></pre>
<p>You can also use set(foo)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try something like this, especially if the size of your foo list is bigger than in your example above and have lots of duplicates.</p>
<pre><code>seen = set()
[i for i,e in enumerate(foo) if not (e in seen or seen.add(e) or e in foo[i+1:])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It depends on the kind of efficiency you would like to get. You could do this directly in a list comprehension, straightforward and readable:</p>
<blockquote>
<p>bar = [index for index,el in enumerate(foo) if foo.count(el)==1]</p>
</blockquote>
<p>Please see <a href="https://stackoverflow.com/questions/2600191/how-can-i-count-the-occurrences-of-a-list-item-in-python">this</a> for info if you would like to use Counter</p>
</div>
<span class="comment-copy">Why the close votes as "too broad"?  I thought it was well-targeted question that currently has only one good answer.</span>
<span class="comment-copy">Just curious : Why do you mention it's a subclass? Isn't (almost) every class in Python a subclass?</span>
<span class="comment-copy">@EricDuminil, sometimes, I cite from documentation: <i>A Counter is a dict subclass for counting hashable objects.</i>. (of course, every class is a sublcass, except topmost ABC)</span>
<span class="comment-copy">Okay, it sure makes sense if you specify Counter's superclass. Nice answer BTW.</span>
<span class="comment-copy">@EricDuminil, thanks</span>
<span class="comment-copy">There's already an answer with counter. Plus, this code outputs the unique words, not their indices.</span>
<span class="comment-copy">It's readable but slow. Note: I didn't downvote.</span>
