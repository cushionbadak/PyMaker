<div class="post-text" itemprop="text">
<p>I have the following functions to calculate two different things:</p>
<pre><code>def LCM(X0, a, c, m, n):  #Generates "n" numbers of random numbers# with given parameters.
    X = []
    X.append(X0)
    for i in range(n):
        X.append(float((a*X[i]+c) % m))
        X[i] = X[i]/m
    del X[0]
    X[n-1] = X[n-1]/m

    plt.hist(X)
    plt.title("LCM Frequency Histogram")
    plt.show()
    print "For this example, the LCM generated a good quality uniform distribution." 
    print "However, it should be also noted that every 2000 generations," 
    print "the numbers are repeated."
    return X[:10] #Show only the first 10 values of the list.

def exponential(lambdavalue):
    Z =[]
    for i in range(10000):
        Z.append(float(-(1/lambdavalue)*math.log(1-X[i])))
    plt.hist(Z)
    plt.title("Exponential Frequency Histogram")
    plt.show()
    return Z[:10] #Show only the first 10 values of the list.
</code></pre>
<p>In the first function, I calculate the variable <code>X</code> and in the second I find <code>Z</code> based on X and plot its histogram. I am not able to understand how I can pass the variable <code>X</code> to the second function. I am running following for the first function:</p>
<pre><code>LCM(27, 17, 9, 10000, 10000)
</code></pre>
<p>and this for the second:</p>
<pre><code>exponential(10)
</code></pre>
<p>I am also aware I can use some packages to make these things (LCM random generation and exp distr), however, I wanted to make something to practice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are returning the X values from the first function you could pass them to the second function as follows:</p>
<pre><code>X = LCM(27, 17, 9, 10000, 10000)
Z = exponential(X, 10)
</code></pre>
<p>You just need to add an argument to <code>exponential</code> for the X values.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to pass the value returned from the LCM function into a variable so you do-</p>
<pre><code>x = lcm(27, 17, 9, 10000, 10000)
</code></pre>
<p>And then you pass the value of x as an argument into the exponential function as - </p>
<pre><code>x = exponential(10)
</code></pre>
<p>Another way is you can declare a global variable X=[ ] outside both your function and you can use them in both of your functions. Without passing it as an argument in the second.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a global variable in other functions by declaring it as global in each function that assigns to it:</p>
<pre><code>x = 0
def f():
    x = 1
f()
print x #=&gt;0
</code></pre>
<p>and expect 1. Instead, you need do declare that you intend to use the global x:</p>
<pre><code>x = 0
def f():
    global x
    x = 1
f()
print x #=&gt;1
</code></pre>
<p>I hope it will help you. Or at least get you closer to solution.</p>
</div>
<span class="comment-copy">you need to make the variable X global in the first function by using the 'global' keyword. i.e write global X at the very first line inside the first function before writing X=[ ]</span>
<span class="comment-copy">To understand what is going on you might want to do some reading on the scope of variables in Python.  There are lots of tutorials but <a href="http://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html" rel="nofollow noreferrer">this explanation</a> in the documentation is quite good.</span>
<span class="comment-copy">@Bill,  I like <a href="https://docs.python.org/3/tutorial/classes.html#a-word-about-names-and-objects" rel="nofollow noreferrer">section 9.1 and 9.2</a> of the Tutorial and <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">4.2 Naming and Binding</a> of the Language Reference</span>
<span class="comment-copy">@Bill, and wwii thank you so much. I am having one more issue with the histogram in the second function. With the given parameters, I have 6320 values between 0 and 0.1 (including 0.1), 2325 between 0.1 and 0.2, 855 values between 0.2 and 0.3, and so on. However, the histogram does not reflect these numbers correctly. If you may take a look at it, I would really appreciate for your time.</span>
<span class="comment-copy">Another piece of advice if you don't mind.  It is good practice not to include output such as print and plot inside a function that is primarily for calculation since it limits its use. Suggest you put the printing and plotting statements after the function definitions in the main body of the code. Cheers.</span>
<span class="comment-copy"><code>You just need to add a...</code> parameter.</span>
<span class="comment-copy">Thanks @wwii. I just <a href="https://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter" rel="nofollow noreferrer">learned something</a>.</span>
