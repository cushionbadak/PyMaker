<div class="post-text" itemprop="text">
<p>I have a Python script that produces the following output: </p>
<pre><code>31.7
31.71
31.72
31.73
31.74
31.75
31.76
31.77
31.78
31.79
31.8
31.81
31.82
31.83
31.84
31.85
31.86
31.87
31.88
31.89
31.9
31.91
</code></pre>
<p>Please note the numbers <code>31.7</code>, <code>31.8</code>, <code>31.9</code>. </p>
<p>The purpose of my script is to determine numeric palindromes, such as <code>1.01</code>. </p>
<p>The problem with the script (<em>reproduced below</em>) is that it will evaluate numeric palindromes such as <code>1.1</code> as valid- <strong>however</strong>- that is <em>not</em> considered to be valid output in this situation. </p>
<p>Valid output needs to have exactly <strong>two</strong> decimal places. </p>
<p>How to enforce that the numeric output has at least two trailing decimal places, including trailing zeros?</p>
<pre><code>import sys

# This method determines whether or not the number is a Palindrome
def isPalindrome(x):
    x = str(x).replace('.','')
    a, z = 0, len(x) - 1
    while a &lt; z:
        if x[a] != x[z]:
            return False
        a += 1
        z -= 1
    return True

if '__main__' == __name__:

    trial = float(sys.argv[1])

    operand = float(sys.argv[2])

    candidrome = trial + (trial * 0.15)

    print(candidrome)
    candidrome = round(candidrome, 2)

    # check whether we have a Palindrome
    while not isPalindrome(candidrome):
        candidrome = candidrome + (0.01 * operand)
        candidrome = round(candidrome, 2)
        print(candidrome)

    if isPalindrome(candidrome):
        print( "It's a Palindrome! " + str(candidrome) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format</code></a> function. <code>.2</code> refers to the number of digits, and <code>f</code> refers to "float".</p>
<pre><code>if isPalindrome(candidrome):
    print("It's a Palindrome! " + format(candidrome, '.2f'))
</code></pre>
<p>Or:</p>
<pre><code>if isPalindrome(candidrome):
    print("It's a Palindrome! %.2f" % candidrome)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this instead of <code>str(x)</code>:</p>
<pre><code>twodec = '{:.2f}'.format(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>data = """
    1.7
    31.71
    31.72
    31.73
  """
new_data = data.split('\n')
palindromes = [i for i in new_data if len(i) &gt; 3 and i.replace('.', '') == i.replace('.', '')[::-1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = ("%.2f" % x).replace('.','')
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/8568233/print-float-to-n-decimal-places-including-trailing-0s">print float to n decimal places including trailing 0's</a></span>
<span class="comment-copy">does this turn it into a string?</span>
<span class="comment-copy">@s.matthew.english: Yes it does. Something like <code>format(0.666666, '.2f')</code> will return <code>'0.67'</code>.</span>
<span class="comment-copy">but I need it to be as a float so I can pipe it back into the function and make it a palindrome</span>
<span class="comment-copy">I still see the pernicious  non-trailing-zeroers, like this <code>3.2</code></span>
<span class="comment-copy">no- my bad- this is correct in fact</span>
<span class="comment-copy">Code-only answers are discouraged because they do not explain how they resolve the issue in the question. Consider updating your answer to explain what this does and how it addresses the problem - this will help not just the OP but others with similar issues. Please review <a href="https://stackoverflow.com/help/how-to-answer">How do I write a good answer</a></span>
