<div class="post-text" itemprop="text">
<p>In a recent question (<a href="https://stackoverflow.com/questions/46452970/gathering-numerical-data-from-a-string-input">Gathering numerical data from a string input</a>) I was wondering whether this was an acceptable answer. I thought that it would make a better question. Is this kind of representation acceptable as a constant collection? Or is it a misuse of enums? And are there any unexpected consequences from assigning the same value to the different attributes on the enum in Python?</p>
<pre><code>from enum import Enum
class CreditRating(Enum):
     AAA = 0.01
     A = 0.1
     B = 0.1
creditRate = input("Please enter credit rating:")
print(CreditRating[creditRate].value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Enums are <em>associations between unique names and unique values</em>. Using a value more than once is supported, but may not be what you intended it to mean. This is explicitly covered in the documentation, see the <a href="https://docs.python.org/3/library/enum.html#duplicating-enum-members-and-values" rel="nofollow noreferrer"><em>Duplicating enum members and values</em> section</a>:</p>
<blockquote>
<p>[T]wo enum members are allowed to have the same value. Given two members A and B with the same value (and A defined first), B is an alias to A.</p>
</blockquote>
<p>The consequence is that looking up a name by value, will only return the first name:</p>
<pre><code>&gt;&gt;&gt; CreditRating(0.1)
&lt;CreditRating.A: 0.1&gt;
</code></pre>
<p>and when you look at <code>B</code>, you'll be given the <code>A</code> enum object:</p>
<pre><code>&gt;&gt;&gt; CreditRating.B
&lt;CreditRating.A: 0.1&gt;
</code></pre>
<p>If all you wanted to do was map a string to a value, I'd not use an enum, just use a dictionary:</p>
<pre><code>credit_ratings = {
    'AAA': 0.01, 
    'A': 0.1,
    'B': 0.1,
}
# ...
print(credit_ratings[creditRate])
</code></pre>
<p>Use an <code>enum</code> when you need the other features such a definition provides, such as the explicit aliasing, the fact that enum values are singletons (you can use <code>is</code> to test for them) and that you can map both names and values back to enum objects.</p>
</div>
