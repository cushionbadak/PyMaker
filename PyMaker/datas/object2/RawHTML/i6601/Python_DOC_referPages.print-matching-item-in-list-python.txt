<div class="post-text" itemprop="text">
<p>I am just starting to learn python, 
I have a simple question.</p>
<pre><code>l=['aa123','aa122','aa124','bb125','bb180']

#form above list i want to print a result as following:

Group 1
aa123
aa122
aa124

Group 2
bb125
bb180
</code></pre>
<p>and I want that if I update the list with 'cc000', it will print also a 'Group 3'</p>
<p>Thanks and regards,
Giovanni</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code> </p>
<pre><code>j = 0
keyfunc = lambda x:x[:2]

for k,i in groupby(sorted(l, key=keyfunc), key=keyfunc):
     j += 1 
     print("group"+str(j))
     for t in list(i):
         print(t)
</code></pre>
<p>output: </p>
<pre><code>group1
aa123
aa122
aa124
group2
bb125
bb180
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary to better group your values:</p>
<pre><code>import string
from collections import defaultdict
l=['aa123','aa122','aa124','bb125','bb180']
key = {a:b+1 for a, b in zip(string.ascii_lowercase, range(26))}
d = defaultdict(list)
for val in l:
   d[key[val[0]]].append(val)
for a, b in d.items():
   print("Group {}".format(a), b)
</code></pre>
<p>Output:</p>
<pre><code>Group 1 ['aa123', 'aa122', 'aa124']
Group 2 ['bb125', 'bb180']
</code></pre>
<p>Or, using <code>groupby</code> in list comprehension:</p>
<pre><code>import itertools
final_vals = {"Group {}".format(a):list(b) for a, b in itertools.groupby(sorted(l, key=lambda x:x[0]), key=lambda x:x[0])}
print(final_vals)
</code></pre>
<p>Output:</p>
<pre><code>{'Group b': ['bb125', 'bb180'], 'Group a': ['aa123', 'aa122', 'aa124']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>i = ['bb334', 'aa341', 'cc555', 'aa342', 'aa337']
x = []

# Creating new ordered list
for j in range(0, 26):
    for k in i:
        if ord(k[0]) - 97 == j:
        x.append(k)

# Printing out list by groups
current_ord = ord(x[0][0])
counter = 1

print 'Group ' + str(counter) + ':'

for j in x:
    if ord(j[0]) != current_ord:
    current_ord = ord(j[0])
    counter += 1
        print '\nGroup ' + str(counter) + ':'

    print j
</code></pre>
<p>Kind of slow since you're doing an 26 * len(i) iterations to create the sorted list. I'm not sure if this answers your question fully... what happens when an item like 'ab111' is in the list? Will it ignore this?</p>
</div>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">groupby</a></span>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (console output, tracebacks, etc.). The more detail you provide, the more answers you are likely to receive. Check the <a href="https://stackoverflow.com/tour">FAQ</a> and <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">Actually i tried to write a lot of code on it, i did not post it to avoid to generate misunderstanding. I wanted to know form you what would be the best way. i m not looking for a written code, if not i would add an example on my real project. As suggested from Felk i will have a look at groupby.</span>
<span class="comment-copy">@jezrael nice weekend to you too :)</span>
