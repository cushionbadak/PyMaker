<div class="post-text" itemprop="text">
<p>How could I generate all the 2 character combinations containing a-z characters and numbers.</p>
<p>I believe there are 36^2 possibilities.</p>
<p>Thank you</p>
<h2>Solution based on Rhosu's answer:</h2>
<pre><code>import string
alphanum = string.ascii_lowercase + string.digits
combination = []
for val1 in alphanum:
  for val2 in alphanum:
    combination.append(val1+val2)
print(combination)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>import string

alphanum = string.ascii_lowercase + string.digits

combs = [val1+val2 for val1 in alphanum for val2 in alphanum]
</code></pre>
<p>This should give a list of all possible 36^2 two character strings using all letters and numbers.</p>
<p>Edit: modified to use string.digits</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools%20product#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> gives you the cartesian product of N iterables, which is exactly what you're looking for here. You could either do:</p>
<pre><code>import itertools
import string

charset = string.ascii_lowercase + string.digits
#          ^-- a..z                 ^-- 0..9
result = itertools.product(charset, charset)
</code></pre>
<p>Or use the convenience keyword argument <code>repeat</code> to <code>product</code></p>
<pre><code>result = itertools.product(charset, repeat=2)
</code></pre>
<p><code>result</code> is now a <code>itertools.product</code> generator object that produces your result set. If you absolutely need that to be a literal list, you can cast it to list to convert.</p>
<pre><code>result_list = list(result)
</code></pre>
<p>But unless you run over this set more than once, it's unlikely to be necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution without any imports (may not be the ideal solution),</p>
<pre><code>alphabets = [chr(i) for i in range(ord('a'),ord('z')+1)]
numbers = [chr(i) for i in range(ord('0'),ord('9')+1)]

all_chars = alphabets + numbers
combinations = [first + second for first in all_chars for second in all_chars]

print(combinations)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The itertools library provides several tools to do this... If you really want combinations... try this...</p>
<p>Which selects characters from the string <code>abcdef123</code> two characters at a time.</p>
<pre><code>In [29]: from itertools import combinations

In [30]: list(combinations('abcdef123', 2))
[('a', 'b'),
 ('a', 'c'),
 ('a', 'd'),
 ('a', 'e'),
 ('a', 'f'),
 ('a', '1'),
 ('a', '2'),
 ('a', '3'),
 ('b', 'c'),
     ...
 ('f', '1'),
 ('f', '2'),
 ('f', '3'),
 ('1', '2'),
 ('1', '3'),
 ('2', '3')]
</code></pre>
<p>Modify your collection of input characters to suit your needs.</p>
</div>
<span class="comment-copy">Try 2 for loops, one nested within the other. You may have to concatenate the list of numbers and the list of characters together first to make the for loops easy to write.</span>
<span class="comment-copy">Take a look at <code>itertools.product</code></span>
<span class="comment-copy">Thank you - this is exactly what I need. However, I've never come across this type of syntax so I  don't really understand it.   Does the [] signify that combs is an array? And is there a reason why val1+val2 is before the for loop? Sorry - just a bit confusing for me.  I've posted what I think is a replica of your code in my above answer - could you confirm that they are the same thing please?</span>
<span class="comment-copy">@spicyjerry that syntax is called a list comprehension. Look them up! They're a <b><i>super</i></b> important syntactical construct in Python that bear more study than a 600 character comment can give.</span>
<span class="comment-copy">@spicyjerry Yes, the code you added to your question is a very close translation of the list comprehension in Rhosu's answer. List comprehensions may seem strange at first, but once you get used to them you will come to appreciate how great they are. ;) I urge you to spend some time playing around with them, because you will encounter list comprehensions a <i>lot</i> as you deepen your exploration of Python. BTW, there are also set and dictionary comprehensions, and there's also a related thing called a generator expression.</span>
<span class="comment-copy">whoa that's strange. Why convert to ordinal then back to character? <code>alphabets = 'abcdefghijklmnopqrstuvwxyz'; numbers = '0123456789'</code> is equivalent and much easier to read.</span>
<span class="comment-copy">Just dealing with the possibility that a letter may be missing in 'abcdefghijklnopqrstuvwxyz' :-)</span>
<span class="comment-copy">@JaysonChacko A little overkill for something the <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer"><code>string</code></a> module can do for you. That's what modules are for :)</span>
<span class="comment-copy">@JaysonChacko as Wondercricket mentions -- that's why you use the <code>string</code> module. Making the computer do more work (and making the next programmer down the line wonder why YOU did that much work!) is the wrong approach to take.</span>
<span class="comment-copy">I had clearly mentioned in the beginning that it is just a solution without any imports. Edited to make it clear.</span>
<span class="comment-copy">I think the OP wants duplicates items, ie <code>aa</code> and <code>cc</code>, which <code>combinations</code> doesn't provide</span>
<span class="comment-copy">FYI for OP: using <code>combinations_with_replacement</code> instead of <code>combinations</code> will also allow combinations like <code>('a', 'a')</code>. Similarly: <code>itertools.product(string.ascii_lowercase + string.digits, repeat=2)</code> gives <code>[('a', 'a'), ..., ('a', '9'), ('b', 'a'), ..., ('9', '9')]</code></span>
<span class="comment-copy">This also won't yield strings starting with a number and ending with a letter.</span>
