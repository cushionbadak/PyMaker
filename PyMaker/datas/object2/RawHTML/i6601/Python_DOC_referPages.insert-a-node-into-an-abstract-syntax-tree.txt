<div class="post-text" itemprop="text">
<p>The ast module's <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">documentation</a> explains how to replace a node in the AST using the <a href="https://docs.python.org/3/library/ast.html#ast.NodeTransformer" rel="nofollow noreferrer">NodeTransformer</a> class, but does not explain how to insert a new node into the tree.</p>
<p>For example, given this module:</p>
<pre><code>import foo
import bar

class Baz(object):

    def spam(self):
        pass
</code></pre>
<p>I would like to add another import, and set a class variable on <code>Baz</code>.  </p>
<p>How can I create and insert these nodes into the AST? </p>
</div>
<div class="post-text" itemprop="text">
<p>Python ASTs are essentially composed of nested lists, so new nodes can be inserted into these lists once they have been constructed.</p>
<p>First, get the AST that is to be changed:</p>
<pre><code>&gt;&gt;&gt; root = ast.parse(open('test.py').read())

&gt;&gt;&gt; ast.dump(root)
"Module(body=[Import(names=[alias(name='foo', asname=None)]), Import(names=[alias(name='bar', asname=None)]), ClassDef(name='Baz', bases=[Name(id='object', ctx=Load())], body=[FunctionDef(name='spam', args=arguments(args=[Name(id='self', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[])])"
</code></pre>
<p>We can see that the outer Module has a <code>body</code> attribute that contains the top level elements of the module:</p>
<pre><code>&gt;&gt;&gt; root.body
[&lt;_ast.Import object at 0x7f81685385d0&gt;, &lt;_ast.Import object at 0x7f8168538950&gt;, &lt;_ast.ClassDef object at 0x7f8168538b10&gt;]
</code></pre>
<p>Construct an import node and insert:</p>
<pre><code>&gt;&gt;&gt; import_node = ast.Import(names=[ast.alias(name='quux', asname=None)])
&gt;&gt;&gt; root.body.insert(2, import_node)
</code></pre>
<p>Like the root module node, the class definition node has a <code>body</code> attribute that contains its members:</p>
<pre><code>&gt;&gt;&gt; classdef = root.body[-1]
&gt;&gt;&gt; ast.dump(classdef)
"ClassDef(name='Baz', bases=[Name(id='object', ctx=Load())], body=[FunctionDef(name='spam', args=arguments(args=[Name(id='self', ctx=Param())], vararg=None, kwarg=None, defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[])"
</code></pre>
<p>So we construct an assignment node and insert it:</p>
<pre><code>&gt;&gt;&gt; assign_node = ast.Assign(targets=[ast.Name(id='eggs', ctx=ast.Store())], value=ast.Str(s='ham')) 
&gt;&gt;&gt; classdef.body.insert(0, assign_node)
</code></pre>
<p>To finish, fix up line numbers:</p>
<pre><code>&gt;&gt;&gt; ast.fix_missing_locations(root)
&lt;_ast.Module object at 0x7f816812ef90&gt;
</code></pre>
<p>We can verify that our nodes are in place by dumping the root node with <code>ast.dump</code>, or use the unparse<sup>*</sup> tool from the CPython repository to generate source from the AST.</p>
<p>The Python3 unparse script<sup>**</sup> can be found in the <a href="https://github.com/python/cpython/blob/3.7/Tools/parser/unparse.py" rel="nofollow noreferrer">Tools</a> directory of the CPython repository.  In Python2 it was located in the <a href="https://github.com/python/cpython/blob/2.7/Demo/parser/unparse.py" rel="nofollow noreferrer">Demo</a> directory.</p>
<pre><code>&gt;&gt;&gt; from unparse import Unparser
&gt;&gt;&gt; buf = StringIO()
&gt;&gt;&gt; Unparser(root, buf)
&lt;unparse.Unparser instance at 0x7f81685c6248&gt;
&gt;&gt;&gt; buf.seek(0)
&gt;&gt;&gt; print(buf.read())

import foo
import bar
import quux

class Baz(object):
    eggs = 'ham'

    def spam(self):
        pass
&gt;&gt;&gt; 
</code></pre>
<p>When constructing AST nodes, you can get an idea of what the node should look like by using <code>ast.parse</code> and <code>ast.dump</code> (observe that <code>ast.parse</code> wraps the statement in a module):</p>
<pre><code>&gt;&gt;&gt; root = ast.parse('import foo')
&gt;&gt;&gt; ast.dump(root)
"Module(body=[Import(names=[alias(name='foo', asname=None)])])"
</code></pre>
<p><sup>*</sup> Credit to <a href="https://stackoverflow.com/a/3794251/5320906">this answer</a> for documenting the existence of the unparse script.</p>
<p><sup>**</sup> Use the version of the script from the git branch that corresponds to the Python version being used.  For example, using the script from the 3.6 branch on 3.7 code may fail due to differences in the versions' respective grammars.</p>
</div>
