<div class="post-text" itemprop="text">
<p>I'm looking at this minimal valid(?) program:</p>
<pre><code>import sys

def f():
    try:
        raise Exception()
    except Exception:
        raise Exception(), None, sys.exc_info()[2]

f()
</code></pre>
<p>This program executes and behaves as expected , preserving the stack trace of the inner exception, as documented by <code>help("raise")</code>. However, when I run <code>pylint</code> on it, this is what I get:</p>
<pre><code>$ pylint program.py 
************* Module tmp
E:  7, 0: invalid syntax (&lt;string&gt;, line 7) (syntax-error)
</code></pre>
<p>The syntax-error disappears when I remove the second and third expressions to <code>raise</code>.</p>
<p><strong>Is this a bug in pylint, or am I overlooking something?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Your pylint binary testing for Python 3 syntax, your code is valid for Python 2 only. Pylint tests code following the syntax of the Python binary you installed it with (it uses Python's own parser).</p>
<p>In Python 3, you'd use:</p>
<pre><code>raise Exception().with_traceback(sys.exc_info()[2])
</code></pre>
<p>See the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer"><code>raise</code> statement</a> documentation for Python 3.</p>
<p>While your <em>syntax</em> may be correct for Python 2, you are technically using <code>raise</code> wrong. When passing in 3 elements, the first must be a <em>class</em>, not an instance. The second is an instance of that class, the third the traceback:</p>
<pre><code>raise Exception, Exception(), sys.exc_info()[2]
</code></pre>
<p>or you can pass in <code>None</code> for an empty argument list passed to the first (the class) to create an instance:</p>
<pre><code>raise Exception, None, sys.exc_info()[2]
</code></pre>
<p>Your code still happens to work, but only because Python isn't being too strict and takes that first argument as the instance when it is not a class. </p>
<p>If you want to test Python 2 code with pylint, install a copy into your Python 2 binary, and run that version. See <a href="https://stackoverflow.com/questions/23052637/specify-which-python-version-pylint-should-evaluate-for">Specify which python version pylint should evaluate for</a></p>
</div>
<span class="comment-copy">I completely forgot how I had installed pylint with python3, thank you! Regarding using <code>raise</code> wrong, the documentation on my machine explicitly states that <code>If the first object is an instance, the type of the exception is the class of the instance, the instance itself is the value, and the second object must be "None".</code>. Did this happen to change across versions?</span>
