<div class="post-text" itemprop="text">
<p>I am reading through Python and came across various ways to somehow perform overloading in Python(most of them suggested use of <strong>@classmethod</strong>). But I am trying to do something like this as shown in below code. I have kept all the parameters required in the <strong>init</strong> method itself. What all possible problems may arise from my choice of overloading?</p>
<pre><code>class Vehicle(object):
    def __init__(self, wheels=None, engine=None, model=None):
        print("A vehicle is created")
        self.w = wheels
        self.e = engine
        self.m = model
</code></pre>
<p>Now I can create any number of Vehicle objects with different parameters each time. I can say something like:</p>
<pre><code>v = Vehicle(engine=2, wheels='Petrol')
v2 = Vehicle(4, 'Diesel', 'Honda')
</code></pre>
<p>or even</p>
<pre><code>v3 = Vehicle()
</code></pre>
<p>And later I can say something like <code>v3.w = 10 #for truck</code> and it still works.</p>
<p>So my question is: Is it correct way of overloading apart from <strong>@classmethod</strong>? What difficulties can I run in later down the path if I use this kind of code?</p>
</div>
<div class="post-text" itemprop="text">
<p>I just went though this same problem and looking into the documentation on Python 3.6 <code>@classmethod</code> is a decorator that is actually short hand for some deeper programming concepts.  For anyone like me whose just trying to unpack what python is doing here, in C# or Java I would explain <code>@classmethod</code> as a function that creates a delegate typed to a class, points the delegate at such a classes constructor/method, returns that constructor/method, and allows the returned constructor/method to be used in whatever you define below <code>@classmethod</code>.  So essentially, <code>@classmethod</code> is really a syntactical shortcut that does a lot of things.</p>
<p>What OP is doing here is using this syntactic shortcut to create a "factory" which is a very common way of creating instances in many different languages.  </p>
<p>I do think its important however to realize that unlike other simple things that you might do in python, there is a lot going on under the hood here.  While it's not wrong, it might be more efficient to create a simple factory depending on what you want to get out of it.</p>
<p>If you don't have a back ground in any other languages, I could try to simplify the answer by saying that <code>@classmethod</code> it returns a function to the function that you define below it. </p>
<p>Here's the documentation on Python 3.6.  Scroll down to "decorators" to see what it says. </p>
<p><a href="https://docs.python.org/3/glossary.html#term-decorator" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-decorator</a></p>
</div>
<span class="comment-copy">Usually you do not write class methods, unless something really should be defined at <i>class</i> level: this means that the exact instance does not matter, only the behavior of the class should be altered.</span>
<span class="comment-copy">You might take a look at <a href="https://stackoverflow.com/questions/682504/what-is-a-clean-pythonic-way-to-have-multiple-constructors-in-python" title="what is a clean pythonic way to have multiple constructors in python">stackoverflow.com/questions/682504/â€¦</a></span>
<span class="comment-copy">@WillemVanOnsem So my way of "overloading" is good to go?</span>
<span class="comment-copy">But <code>@classmethod</code> and <i>overloading</i> are two (almost) orthogonal concepts.</span>
<span class="comment-copy">I think he's referring to using <code>@classmethod</code>s for factory functions; e.g. <a href="https://stackoverflow.com/a/141777/2587908">stackoverflow.com/a/141777/2587908</a></span>
