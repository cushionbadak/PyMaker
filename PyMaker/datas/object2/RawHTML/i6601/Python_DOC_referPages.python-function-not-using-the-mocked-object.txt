<div class="post-text" itemprop="text">
<p>Coming from a PHP background I have encountered the following issue in writing Python unit tests:</p>
<p>I have function foo that uses a Client object in order to get a response from some other API:</p>
<pre><code>from xxxx import Client
def foo (some_id, token):
    path = 'some/api/path'
    with Client.get_client_auth(token) as client:
        response = client.get(path,params).json()
        results = list(response.keys())
    .............
</code></pre>
<p>For this I have created the following unit test in another python file.</p>
<pre><code>from yyyy import foo
class SomethingTestCase(param1, param2):
    def test_foo(self):
        response = [1,2,3]
        with patch('xxxx.Client') as MockClient:
            instance = MockClient.return_value
            instance.get.return_value = response
        result = foo(1,self.token)
        self.assertEqual(response,result)
</code></pre>
<p>I don't understand why foo isn't using the mocked [1,2,3] list and instead tries to connect to the actual API path in order to pull the real data.</p>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are doing 3 things wrong:</p>
<ul>
<li><p>You are patching the wrong location. You need to patch the <code>yyyy.Client</code> global, because that's how you imported that name.</p></li>
<li><p>The code-under-test is not calling <code>Client()</code>, it uses a different method, so the call path is different.</p></li>
<li><p>You are calling the code-under-test <em>outside the patch lifetime</em>. Call your code in the <code>with</code> block.</p></li>
</ul>
<p>Let's cover this in detail:</p>
<p>When you use <code>from xxxx import Client</code>, you bind a new reference <code>Client</code> in the <code>yyyy</code> module globals to that object. You want to replace that reference, not <code>xxxx.Client</code>. After all, the code-under-test accesses <code>Client</code> as a global in it's own module. See the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer"><em>Where to patch</em> section</a> of the <code>unittest.mock</code> documentation.</p>
<p>You are not <em>calling</em> <code>Client</code> in the code. You are using a class method (<code>.get_client_auth()</code>) on it. You also then use the return value as a context manager, so what is assigned to <code>client</code> is the return value of the <code>__enter__</code> method on the context manager:</p>
<pre><code>with Client.get_client_auth(token) as client:
</code></pre>
<p>You need to mock that chain of methods:</p>
<pre><code>with patch('yyyy.Client') as MockClient:
    context_manager = MockClient.get_client_auth.return_value
    mock_client = context_manager.__enter__.return_value
    mock_client.get.return_value = response
    result = foo(1,self.token)
</code></pre>
<p>You need to call the code under test <em>within the <code>with</code> block</em>, because only during that block will the code be patched. The <code>with</code> statement uses the <code>patch(...)</code> result as a context manager. When the block is entered, the patch is actually applied to the module, and when the block exits, the patch is removed again.</p>
<p>Last, but not least, when trying to debug such situations, you can print out the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls" rel="nofollow noreferrer"><code>Mock.mock_calls</code> attribute</a>; this should tell you what was actually called on the object. No calls made? Then you didn't patch the right location yet, forgot to start the patch, or called the code-under-test when the patch was no longer in place.</p>
<p>However, if your patch did correctly apply, then <code>MockClient.mock_calls</code> will look something like:</p>
<pre><code>[call.get_client_auth('token'),
 call.get_client_auth().__enter__(),
 call.get_client_auth().__enter__().get('some/api/path', {'param': 'value'}),
 call.get_client_auth().__exit__(None, None, None)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to patch the <code>Client</code> object in the file where it is going to be used, and not in its source file. By the time, your test code is ran, the Client object would already have been imported into the file where you are hitting the API.</p>
<pre><code># views.py
from xxxx import Client

# test_file.py
...
with patch('views.Client') as MockClient: # and not 'xxxx.Client'
...
</code></pre>
<p>Moreover, since you're patching a context manager you need to provide a stub.</p>
</div>
<span class="comment-copy">Is assertRaises supposed to get a specific exception? In the real code at some point i have a condition after getting the results that checks the result set for a key.  if the key is found then raises the exception. In the test code:        <code>with patch('yyyyy.Client') as MockClient:             context_manager = MockClient.create_from_token.return_value             mock_client = context_manager.__enter__.return_value             mock_client.get.return_value = response             self.assertRaises(PermissionDenied, foo, 1, self.token)</code> AssertRaises doesn't catch the exeption.</span>
<span class="comment-copy">I can clearly see the logs being triggered near my raise PermissionDenied</span>
<span class="comment-copy">@Susy11: that'd mean that either the <code>foo(1, self.token)</code> call did not raise the exception at that point but before perhaps, or that the <code>PermissionDenied</code> class you have there is not the same <code>PermissionDenied</code> class that was raised. Note that you can use <code>self.assertRaises()</code> as a context manager: <code>with self.assertRaises(PermissionDenied):</code> (next line further indented) <code>foo(1, self.token)</code>.</span>
<span class="comment-copy">@Susy11: if you have two different class objects that are both named <code>PermissionDenied</code>, you can detect this by using <code>try: foo(1, self.token)</code>, <code>except Exception as e: print(id(type(e)), id(PermissionDenied), type(e) is PermissionDenied)</code>. If that prints two identical ids and <code>True</code>, you do have the correct exception class.</span>
<span class="comment-copy">got it working, by having the except block at the the end of the real code the exception was raised but caught and treated. Thank you for the quick answer on this it helped me a great deal understanding mocking in python</span>
