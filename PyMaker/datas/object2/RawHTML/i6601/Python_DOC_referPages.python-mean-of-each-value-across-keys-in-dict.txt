<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/46346388/how-to-make-a-list-of-integers-that-is-the-sum-of-all-the-integers-from-a-set-of">How to make a list of integers that is the sum of all the integers from a set of lists in a dict?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I am having trouble iterating across an entire dictionary to do simple summary statistics (an average) for each element of a value across keys. </p>
<p>My dictionary consists of keys and values that are lists of numbers:</p>
<pre><code>test_dict={'NJ':[20,50,70,90,100],'NY':[10,3,0,99,57],'CT':[90,1000,2,3.4,5]}
</code></pre>
<p>I know that I can access the first value of each key, for instance, by doing the below, but I am having trouble with the obvious next step of adding another for loop to iterate across all elements in the values. </p>
<pre><code>location1=[element[0] for element in test_dict.values()] 
location1_avg=sum(location1)/len(location1)
</code></pre>
<p>My ultimate goal is to have a dictionary with labels as keys (Location 1...i) and the average value across states for that location. So the first key-value would be Location1: 40, and so on. </p>
<p>I have the below attempt, but the error message is 'list index out of range' and i do not know how to iterate properly in this case. </p>
<pre><code>for element in test_dict.values():
    avg=list()
    for nums in element[i]:
        avg[i]=sum(element[i][nums])/len(element[i][nums])
</code></pre>
<p><strong>Adding desired output per requests</strong></p>
<pre><code>soln_dict={'Location1':40,'Location2':351,'Loction3':24,'Loction4':43.24,'Loction5':54}
</code></pre>
<p>Thank you for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just do :</p>
<pre><code>#loop through the dictionary
for key,value in test_dict.items(): 

   #use reduce to calculate the avg
   print(key, reduce(lambda x, y: x + y, test_dict[key]) / len(test_dict[key]))
</code></pre>
<p>This will print :</p>
<pre><code>NJ 66.0
NY 33.8
CT 220.08
</code></pre>
<p><strong>Edit : As per change in OP requirements :</strong></p>
<pre><code>l = list(iter(test_dict.values()))                      #convert values to list
print(l)
#[[20, 50, 70, 90, 100], [10, 3, 0, 99, 57], [90, 1000, 2, 3.4, 5]]
d={}                                                                  #final ditionary
for i in range(len(l[0])): 
   row_list = [row[i] for row in l]                     #get values column-wise
   d['location'+str(i+1)] = sum(row_list)/len(row_list)               #calculate avg

print(d)
#{'location1': 40.0, 'location2': 351.0, 'location3': 24.0, 'location4': 64.13333333333334, 'location5': 54.0}
</code></pre>
<p>Note : the average you have put in question for loaction4 is wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code>test_dict={'NJ':[20,50,70,90,100],'NY':[10,3,0,99,57],'CT':[90,1000,2,3.4,5]}
avg=[sum(element) / len(element) for element in test_dict.values()]
print(avg) # =&gt; [66.0, 33.8, 220.08]
</code></pre>
<p>And for a dictionary:</p>
<pre><code>test_dict={'NJ':[20,50,70,90,100],'NY':[10,3,0,99,57],'CT':[90,1000,2,3.4,5]}
avg={ k:sum(test_dict[k]) / len(test_dict[k]) for k in test_dict}
print(avg) # =&gt; {'NJ': 66.0, 'NY': 33.8, 'CT': 220.08}
</code></pre>
<p><strong>Answer to the edited question:</strong></p>
<p>If the arrays always have a length of 5, use this:</p>
<pre><code>test_dict={'NJ':[20,50,70,90,100],'NY':[10,3,0,99,57],'CT':[90,1000,2,3.4,5]}
avg={}
for i in range(5):
  avg['Location'+str(i+1)] = sum(test_dict[k][i] for k in test_dict)/len(test_dict)
print(avg)
</code></pre>
<p>Output:</p>
<pre><code>{'Location1': 40.0, 'Location2': 351.0, 'Location3': 24.0, 'Location4': 64.13333333333334, 'Location5': 54.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure where your error lies but the <code>i</code> is a dead giveaway for "using indices where it's not useful / harmful".</p>
<p>Your problem has a straight input/output data stream, and is a perfect match for using dictionary comprehension, iterating on the key, values and rebuilding the dict with the mean as value:</p>
<pre><code>test_dict={'NJ':[20,50,70,90,100],'NY':[10,3,0,99,57],'CT':[90,1000,2,3.4,5]}

result = {k:sum(x)/len(x) for k,x in test_dict.items()}

print(result)
</code></pre>
<p>gives:</p>
<pre><code>{'CT': 220.08, 'NJ': 66.0, 'NY': 33.8}
</code></pre>
<p>EDIT: you seem to want a "transposed" version with anonymized keys, in that case, just use the zipped version of the values:</p>
<pre><code>result = {"location{}".format(i):sum(v)/len(v) for i,v in enumerate(zip(*test_dict.values()),1)}
</code></pre>
<p>gives:</p>
<pre><code>{'location3': 24.0, 'location5': 54.0, 'location1': 40.0, 'location2': 351.0, 'location4': 64.13333333333334}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To keep it as simple as possible, I would I suggest:</p>
<pre><code>from statistics import mean

test_dict={'NJ':[20,50,70,90,100],'NY':[10,3,0,99,57],'CT':[90,1000,2,3.4,5]}

# put the data in a list of lists
# (throw away the city names)
l = [seq for seq in test_dict.values()]


# put together 1st values, 2nd values, etc.
r = [mean(i) for i in zip(*l)]
print(r)
</code></pre>
<p>Which gives:</p>
<pre><code>[40, 351, 24, 64.13333333333334, 54]
</code></pre>
<p>I divided to conquer: I turned this dictionary into a list of lists, and then used <a href="https://docs.python.org/3.4/library/functions.html#zip" rel="nofollow noreferrer">zip</a> to put the "columns" together. Since zip expects arguments separated by a comma and not a list, I used the star operator (<code>*</code>) to do the conversion.</p>
<p>I am not sure were one should get the list of places from? Is it just <code>Location_</code> + the index no? (If yes, why not leaving it in a list?)</p>
<p>For the mean function, see the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">statistics</a> package (for Python &gt; 3.4). Otherwise you can write your own:</p>
<pre><code>mean = lambda l: reduce(lambda x, y: x+y, l) / len(l)
</code></pre>
<p>I took inspiration from <a href="https://stackoverflow.com/questions/9039961/finding-the-average-of-a-list">Finding the average of a list</a>. <em>That</em> is perhaps a a little cryptic and it might have been clearer to write a function without <code>reduce</code>, but a one-liner makes it much easier to copy and paste.</p>
<p>If you are in Python 3, import <code>reduce</code> from <code>functools</code>.</p>
</div>
<span class="comment-copy">Can you show what exactly you expect to be the result given the <code>test_dict</code>?</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre I suspect 40 is supposed to be the average of 20, 10, and 90, so the desired result might be a list of 5 numbers, not a dictionary with 3 keys.</span>
<span class="comment-copy">You are right - the desired output is a dictionary with five key-value pairs. The first one would be Location 1: 40</span>
<span class="comment-copy">Thank you - my true desire, as explained better above now, is to get an average for each of the first elements in each value. Please see desired output - appreciate your help.</span>
<span class="comment-copy">@Tony , check the edit</span>
<span class="comment-copy">My reservation about this solution, is that it uses an integer index to loop through data and this not as Pythonic as it could be. But it works and it effectively answers the question.</span>
<span class="comment-copy">Thanks, appreciate your help. Desired output is actually different - I explained it better in original post now.</span>
<span class="comment-copy">@Tony Do the arrays always have a fixed length of 5?</span>
<span class="comment-copy">In this case, yes.</span>
<span class="comment-copy">@Tony See if my edited answer helps.</span>
<span class="comment-copy">Thank you for your help.</span>
<span class="comment-copy">Thank you - that is a nice way to do it. However, my desired output is to get the averages across keys for each element of the value. Please see edit for desired output.</span>
<span class="comment-copy">check my updated solution. Still one-liner</span>
<span class="comment-copy">Thank you - my true desire, as explained better above now, is to get an average for each of the first elements in each value. Please see desired output - appreciate your help.</span>
<span class="comment-copy">Ah OK. That's even easier. I'll modify my answer.</span>
<span class="comment-copy">Okay thank you.</span>
<span class="comment-copy">Well actually, it was not <i>that</i> straightforward (I thought you wanted only the mean of the first column).</span>
