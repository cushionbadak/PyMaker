<div class="post-text" itemprop="text">
<p>I'm trying to convert a float into binary. </p>
<p>I'm using the module struct. For instance, with the value of 3.5, when I execute this line :</p>
<pre><code>struct.pack('&gt;f',3.5)
</code></pre>
<p>I get this :</p>
<pre><code>b'@`\x00\x00'
</code></pre>
<p>I suppose the two x00 x00 represent hexadecimal values for each bytes used but what about the b and '@` ?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no problem - the <code>b''</code> literal is already binary bytes type (an old tradition, since 2.x).</p>
<pre><code>&gt;&gt;&gt; struct.pack('&gt;f',3.5)
b'@`\x00\x00'
&gt;&gt;&gt; a = struct.pack('&gt;f',3.5)
&gt;&gt;&gt; type(a)
&lt;class 'bytes'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The format string <code>'&gt;f'</code> means </p>
<p><code>'f'</code>  IEEE 754 binary32  (4 bytes, like a C float)</p>
<p><code>'&gt;'</code> <a href="https://en.wikipedia.org/wiki/Endianness" rel="nofollow noreferrer">big-endian</a> byte order, standard size</p>
<p>That's documented <a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow noreferrer">here</a>.  The characters <code>@</code> and <code>`</code> are just part of your numeric data (3.5) when represented as <a href="https://en.wikipedia.org/wiki/ASCII" rel="nofollow noreferrer">ASCII</a>.  It's probably more helpful to look at these 4 bytes represented as binary:</p>
<pre><code>&gt;&gt;&gt; format(ord('@'), '08b')
'01000000'
&gt;&gt;&gt; format(ord('`'), '08b')
'01100000'
&gt;&gt;&gt; format(ord('\x00'), '08b')
'00000000'
</code></pre>
<p>So concatenated as a 32-bit float, that's has a binary representation like this:</p>
<pre><code>&gt;&gt;&gt; ''.join(format(x, '08b') for x in b'@`\x00\x00')
'01000000011000000000000000000000'
</code></pre>
<p>To convert the binary representation back to float by hand, read about <a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format" rel="nofollow noreferrer">single-precision floating-point format</a> here, and split it up into components instead of bytes.  This is sign bit, exponent (8 bit unsigned int, <a href="https://en.wikipedia.org/wiki/Offset_binary" rel="nofollow noreferrer">offset-encoded</a>), and fraction (23 bits):</p>
<pre><code>0 10000000 11000000000000000000000
</code></pre>
<p>The exponent here is just 1, because that representation offset by 127:</p>
<pre><code>&gt;&gt;&gt; int('10000000', 2) - 127
1
</code></pre>
<p>The fractional part is like 1.11<sub>2</sub>, i.e.</p>
<pre><code>&gt;&gt;&gt; (2**0 + 2**-1 + 2**-2)*2
3.5
</code></pre>
<p>With a positive sign bit (-1)<sup><strong>0</strong></sup> = 1, and an exponent 1, that's the number 3.5 (and it happens to be one of the numbers which can be represented exactly as a float).  </p>
</div>
<span class="comment-copy">"<i>I'm trying to convert a float into binary.</i>" - Can you give an example of what you mean by "binary"? What sort of output are you seeking?</span>
<span class="comment-copy">The bytes object you received contains the bytes you need. You're just getting confused by how it's displayed. You don't need to fix anything.</span>
<span class="comment-copy">@Robáµ© basically i want to convert a float like 3.5 into a binary value like : 01000000011000000000000000000000 ( in form of string )</span>
<span class="comment-copy">how do i interpret what i see ?</span>
<span class="comment-copy">@oozma This. Is. An. Immutable. Iterable. Of. Ints.</span>
<span class="comment-copy">thanks. exactly what i need. just cant use the format function because we havent learned what that function does in class yet.</span>
<span class="comment-copy">You can get similar information from the built-in function <a href="https://docs.python.org/3/library/functions.html#bin" rel="nofollow noreferrer"><code>bin</code></a>.</span>
<span class="comment-copy">yes. but i cant use that function in class either. again i'll remember it, i will probably need it later</span>
