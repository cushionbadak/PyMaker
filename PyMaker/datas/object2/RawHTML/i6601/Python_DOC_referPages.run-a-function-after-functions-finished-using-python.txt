<div class="post-text" itemprop="text">
<p>suppose I have 5 functions: f1() f2() f3() f4() f5().
I need to run f1 and f2 in parallel. After both finished I need to run f3 and f4 in parallel, then f5 after f3 and f4 finished. Using python.
Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should checkout the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a> library.</p>
<p>Here is an example of what I came up with in python3:</p>
<pre><code>import threading

def f1():
    print('f1')
def f2():
    print('f2')
def f3():
    print('f3')
def f4():
    print('f4')
def f5():
    print('f5')

t1 = threading.Thread(target=f1)
t2 = threading.Thread(target=f2)
t1.start()
t2.start()
t1.join()
t2.join()
t1 = threading.Thread(target=f3)
t2 = threading.Thread(target=f4)
t1.start()
t2.start()
t1.join()
t2.join()
f5()
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><strong>multithreading</strong></a> to achieve what you want. First you need to start two threads to do functions one and two then you can use <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow noreferrer"><code>thread.join()</code></a> to wait for the threads to terminate and then start the other functions. Here is an example of how it could be done:</p>
<pre><code>import threading
l = [f1, f2, f3, f4, f5]
while l:
    if len(l) == 1:
        l.pop()()
    else:
        t1 = threading.Thread(target=l.pop())
        t2 = threading.Thread(target=l.pop())
        t1.start()
        t2.start()
        t1.join()
        t2.join()
</code></pre>
</div>
<span class="comment-copy">Are function f1, f2, f3, f4, f5 are dependent on each other? Is any interchange of data happening between them?</span>
<span class="comment-copy">look into asyncio</span>
<span class="comment-copy">Yes both f3,f4 need data from f1,f2 respectively. and f5 need data from f3 and f4.</span>
<span class="comment-copy">There are many solutions to this: threading and <code>join()</code>, twisted, asyncio, gevent groups...</span>
