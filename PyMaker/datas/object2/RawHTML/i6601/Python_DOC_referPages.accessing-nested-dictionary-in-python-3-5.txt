<div class="post-text" itemprop="text">
<p>I'm importing a nested dictionary from an external file and trying to access values in the deepest level; however, when I try to use <code>for</code> loops I get the following error:</p>
<pre><code>print(country['unicode'])
TypeError: string indices must be integers
</code></pre>
<p>The dictionary I'm importing (from a file <code>emojiFlags.py</code>) looks like this:</p>
<pre><code>flagSet = {'emojiFlagSet': {'Andorra': {'emoji': 'ðŸ‡¦ðŸ‡©', 'unicode': 
'U+1F1E6 U+1F1E9'}, 'Afghanistan': {'emoji': 'ðŸ‡¦ðŸ‡«', 'unicode': 'U+1F1E6 
U+1F1EB'}, ... }}
</code></pre>
<p>etc. etc.</p>
<p>Here are the snippets of code I'm working with:</p>
<pre><code>from emojiFlags import flagSet

# Get country emoji data
for country in flagSet['emojiFlagSet']:
    print(country['unicode'])
</code></pre>
<p>I'm fairly certain I've done something like this on a number of other dictionaries before (and had no problems), and I'm wondering if there's something obvious I'm missing at this point.</p>
<p>Oddly, if I <code>print(flagSet)</code>, my return is <code>emojiFlagSet</code> (the key), not its value (a dictionary); however, if I <code>print(flagSet['emojiFlagSet'])</code> the return is the entire nested dictionary value as it should be. If I instead try</p>
<pre><code>for country in flagSet['emojiFlagSet']:
    print(country)
</code></pre>
<p>I get all of the country names, but, just like with the <code>print(flagSet)</code> statement, I only get the keys and not their nested dictionary values. </p>
<p>My end goal is to simply return the value of the <code>'unicode'</code> keys within each country's dictionary. So, I'd expect to see</p>
<pre><code>U+1F1E6 U+1F1E9
</code></pre>
<p>for the first country, for example. </p>
<p>Strangest of all, if I do</p>
<pre><code>print(flagSet['emojiFlagSet']['Andorra']['unicode'])
</code></pre>
<p>as a simple test, I get exactly what I'm looking for. Any suggestions on where I'm going wrong in my <code>for</code> loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are iterating over the dictionary itself, which yields the <em>keys</em> for that dictionary. In your <code>flagSet['emojiFlagSet']</code> dictionary, those keys are strings (such as <code>'Andorra'</code> and <code>'Afghanistan'</code>).</p>
<p>You wanted the values instead, it is the values that are dictionaries too. Loop over <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer"><code>dict.values()</code></a>:</p>
<pre><code>for country in flagSet['emojiFlagSet'].values():
    print(country['unicode'])
</code></pre>
<p>Note that the fact that you imported the datastructure from another module has no bearing on all of this.</p>
</div>
<span class="comment-copy">Iterate over <code>.values()</code>? <code>print(flagSet[â€˜emojiFlagSetâ€™][country][â€˜unicodeâ€™])</code>?</span>
<span class="comment-copy">@jonrsharpe just saw your comment... thanks for the feedback! It seems this (your second suggestion) is what I've used before and just forgot about it</span>
<span class="comment-copy">Interesting. I haven't worked with dict.values() before (it's been a while since I worked with Python). I just solved my problem by changing my <code>print</code> statement to <code>print(flagSet['emojiFlagSet'][country]['unicode'])</code>. Other than readability issues, is there a performance reason I might use <code>.values()</code> instead?</span>
<span class="comment-copy">@BenjaminAlanWallsten: well, yes, having to do 2 additional item lookups each time in the loop will be a teensy bit slower. Dictionaries are key-value pairs; if all you want are the values, just loop over the values. That's not really Python-specific, by the way; C# and C++ and Java offer dictionaries too (but Java and C++ call them maps).</span>
<span class="comment-copy">That makes sense (and seems so obvious in hindsight - one of the dangers of early stage self-teaching, I suppose). <code>.values()</code> it is then! Much appreciated!</span>
