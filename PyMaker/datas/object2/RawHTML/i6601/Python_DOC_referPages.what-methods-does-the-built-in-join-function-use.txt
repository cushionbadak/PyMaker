<div class="post-text" itemprop="text">
<p>I'm trying to use</p>
<pre><code>a = ''.join((Symbol('a'), Symbol('b'))
</code></pre>
<p>but I get</p>
<pre><code>File "/home/j/_Github-Projects/MiscScripts/string_permutations.py", line 72, in get_permutations
    permutation = Symbol(''.join(permutation))
TypeError: sequence item 0: expected str instance, Symbol found
</code></pre>
<p>The python docs says an iterable is accepted as the parameter for <code>join</code> but that seems to contradict what the exception is telling me.</p>
<p>I tried defining some of the base class methods in <code>Symbol</code> but it didn't help.</p>
<pre><code>def __concat__(self, other):
    return Symbol(self.symbol + other.symbol)
__add__ = __concat__
__and__ = __concat__

def __iconcat__(self, other):
    self.symbol += other.symbol
    return self
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join(iterable) docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow noreferrer">doc</a> also says:</p>
<blockquote>
<p>A TypeError will be raised if there are any non-string values in
  iterable...</p>
</blockquote>
<p>And after all, <code>Symbol('a')</code> is not a String.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, this should do it, not <code>join</code>. </p>
<pre><code>        permutation = functools.reduce(
            lambda x, y: x.concatenate(y),
            permutation)
</code></pre>
<p>The joys of a dynamic language, glance at parameter name, but not realize that only certain value types are accepted.</p>
</div>
<span class="comment-copy">It doesn't matter which methods it uses because it only accepts strings, not <code>Symbol</code>s. You have to create a list of strings from those Symbols if you want to use <code>join</code>.</span>
<span class="comment-copy">It explicitly days right there in the docs that only iterables with all strings will work...</span>
<span class="comment-copy"><i>”that seems to contradict what the exception is telling me”</i> - no, it doesn’t. The exception is telling you that the types of the things <i>inside the iterable</i> are the problem.</span>
<span class="comment-copy">@jonrsharpe but why don't they change the parameter name from <code>iterable</code> to <code>string</code> if only strings are accepted?</span>
<span class="comment-copy">Because the parameter doesn’t have to be a string (which is itself an iterable of strings: the characters), but could be <i>any iterable of strings</i> (e.g. a list, tuple, generator, ...).</span>
