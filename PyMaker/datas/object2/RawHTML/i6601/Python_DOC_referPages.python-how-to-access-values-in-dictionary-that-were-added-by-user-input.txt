<div class="post-text" itemprop="text">
<p>Say I have an empty dictionary that a user adds an arbitrary number of items into.  After the user adds items to the dictionary, I want to then loop through that dictionary and be able to pull values out of it.  What is the best way to access the items in the dictionary since I don't know the name of the key?</p>
<p>For example say I have the following:</p>
<pre><code># my shopping cart that starts off empty
shopping_cart = {}

# user enters how many items they will have in the cart total
total_items = input("How many items will you add to your cart? ")

# User adds both the value and the key of each item to add
for i in total_items:
    name = input("Enter name of item to add: ")
    location = input("Is the item in front, middle, or back of cart? ")

    shopping_cart[name] = location
</code></pre>
<p>At this point I have a <code>shopping_cart</code> dictionary, but I don't have a way to know what the KEYs or VALUEs are.</p>
<p>.....  Now say there is some large string of thousands of characters in random order called <code>random_string</code>.  It looks like "axdfebzsdcdsl<strong>apple</strong>fjdkslaz<strong>pair</strong>....."  Notice how the string is random, but periodically there are names of items like "apple" and "pair".</p>
<p>What I want to do is loop my <code>shopping_cart</code> dictionary and find the next index position within my <code>random_string</code> where the item in my <code>shopping_cart</code> appears.</p>
<p>For example - let's say the user adds 3 items to the shopping cart.  The items are "donkey", "apple", "pair".</p>
<p>What I want to do is read through the <code>random_string</code> in order, and return the dictionary value that appears next in the string.  I.E. in this case, "apple" is the next item in the random string, so it should be returned so I can lookup the value of "apple" in the dictionary and get the location of the item.</p>
<p>I have working code to do everything that is necessary EXCEPT for knowing how to pull the Keys out of the dictionary.  I've copied a line below that essentially shows what I'm trying to accomplish.  The problem is I don't know what <strong>DICT_KEY</strong> is, because it was added by the user.</p>
<p><code>index = random_string.find([DICT_KEY], index)</code></p>
<p>........ Not to confuse things, but I'm considering making an empty list that mirrors the dictionary values.  In other words, when the user adds the item "apple" to the dictionary, I could add it to the dictionary and to the list.  That way I can lookup the item in the dictionary by using it's index position in the list.  seems like a bad way to handle this though, so happy to get any advice you can offer...</p>
<p>As you can see, I'm new at this!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a={'apple':'front','donkey':'middle','pair':'back'}
&gt;&gt;&gt; s='asdfhskdfksjdf;ksjapplefsakdjfskdjfapplesdfksdjdonkeydlkfjsldjfdpair'
&gt;&gt;&gt; {k:[m.start() for m in re.finditer(k,s)] for k in a}
{'pair': [64], 'donkey': [47], 'apple': [18, 35]}
</code></pre>
<p>This one found two <code>apple</code>, one <code>donkey</code> and one <code>pair</code> in the string at indices <code>18</code>/<code>35</code>/<code>47</code>/<code>64</code>.</p>
<hr/>
<p><strong>Explanation</strong><br/>
Follow up on the commands used earlier</p>
<p>Create a new dictionary with the <code>keys</code> I have and assign a constant value.  </p>
<pre><code>&gt;&gt;&gt; a
{'pair': 'back', 'donkey': 'middle', 'apple': 'front'}
&gt;&gt;&gt; {k:0 for k in a}
{'pair': 0, 'donkey': 0, 'apple': 0}
</code></pre>
<p>That allows us to make a dictionary with each key having same value <code>0</code>. <code>a</code> being the dictionary you already made.</p>
<p>Now let's see how we set the values to indices of these words in the big string.</p>
<pre><code>&gt;&gt;&gt; [m.start() for m in re.finditer('apple',s)]
[18, 35]
</code></pre>
<p><a href="https://docs.python.org/2/library/re.html#module-contents" rel="nofollow noreferrer">re.finditer</a> returns as many matches in <code>s</code> for <code>apple</code>.<br/>
For each match <code>m</code> thus found, <a href="https://docs.python.org/2/library/re.html#match-objects" rel="nofollow noreferrer">m.start()</a> returns the start index of the match.<br/>
Now this gives a list of indices where apple is appearing in the string.</p>
<p>Finally if we combine the above two we get a dictionary with our original keys. And values as a list of indices where they appear in the string.</p>
<pre><code>&gt;&gt;&gt; {k:[m.start() for m in re.finditer(k,s)] for k in a}
{'pair': [64], 'donkey': [47], 'apple': [18, 35]}
</code></pre>
<p><strong>UPDATE2</strong><br/>
After new req. in comments</p>
<pre><code>&gt;&gt;&gt; d={k:[m.start() for m in re.finditer(k,s)] for k in a}
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; nd=defaultdict(list)
&gt;&gt;&gt; for k in d:
...   nd[a[k]].extend(d[k])
... 
&gt;&gt;&gt; dict(nd)
{'front': [18, 35], 'middle': [47], 'back': [64]}
</code></pre>
<p>If you do not want to go twice over then..<br/></p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; nd=defaultdict(list)
&gt;&gt;&gt; for k in a:
...   for m in re.finditer(k,s):
...     nd[a[k]].append(m.start())
... 
&gt;&gt;&gt; dict(nd)
{'front': [18, 35], 'middle': [47], 'back': [64]}
</code></pre>
<p><strong>UPDATE3</strong></p>
<pre><code>&gt;&gt;&gt; {(k,a[k]):[m.start() for m in re.finditer(k,s)] for k in a}
{('pair', 'back'): [64], ('apple', 'front'): [18, 35], ('donkey', 'middle'): [47]}
&gt;&gt;&gt; {m.start():(k,a[k]) for k in a for m in re.finditer(k,s)}
{64: ('pair', 'back'), 18: ('apple', 'front'), 35: ('apple', 'front'), 47: ('donkey', 'middle')}
</code></pre>
<hr/>
<p><strong>UPDATED</strong></p>
<p>If indices are more important for you then do the below</p>
<pre><code>&gt;&gt;&gt; {m.start():k  for k in a for m in re.finditer(k,s)}
{64: 'pair', 18: 'apple', 35: 'apple', 47: 'donkey'}
</code></pre>
</div>
<span class="comment-copy"><code>list(my_dict)</code> gives you a list of keys... or just loop directly: <code>for x in my_dict: do_stuff(x)</code>, x will be the keys. It sounds like you don't want a dictionary at all, if you want to loop through it. That <i>defeats the entire purpose of a dictionary</i>.</span>
<span class="comment-copy">I think you might be right that I shouldn't use a dictionary here... But how can I then relate a secondary value with it?  I.E. in the example above I want to know what location each item should be in. Is there a way to accomplish a "link" between those two values in a better way than a dictionary?  Thanks!</span>
<span class="comment-copy">Use two lists, that have that correspondance by index, or use a list of <code>tuple</code>s.</span>
<span class="comment-copy">Um.... Yes! This might be exactly what I'm looking for.  I will ultimately want to order those values so I can identify which value comes "next" as I act on each in sequence.  I don't fully understand what your answer is doing though, so I would REALLY appreciate an explanation.  Thanks so much!</span>
<span class="comment-copy">@occvtech is the explanation ok?</span>
<span class="comment-copy">I think I understand.  So you create the dictionary <code>a</code> just like I did in the OP.  Then you create a second dictionary with the same keys as A, but with values set to '0'. Then with some magic I don't fully understand yet, you are able to use a function re.finditer(x,y) to return the locations where each key is found in the string.  If I'm mostly understanding correctly, I'll just do some reading on ".start()" and  "re.finditer()" to understand better.  Otherwise, this looks EXACTLY like what I wanted to do.  Thanks so much for the explanation!</span>
<span class="comment-copy">I put a note for <code>re.finditer()</code> and <code>MATCH.start()</code>. Also if you play with them independently you would be able to understand what is happening. Also this should help <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list-comprehension</a> and <a href="https://stackoverflow.com/questions/1747817/create-a-dictionary-with-list-comprehension-in-python">dictionary-comprehension</a></span>
<span class="comment-copy">You are awesome.  Thank you so much - I'm off onto testing things now, but not only is this an excellent solution to my problem, but finditer() looks way faster than my old way of using .find()!</span>
