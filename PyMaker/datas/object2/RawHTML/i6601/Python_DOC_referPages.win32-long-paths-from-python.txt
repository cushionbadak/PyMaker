<div class="post-text" itemprop="text">
<p>Note: this question is about the newly supported <a href="https://superuser.com/questions/1119883/windows-10-enable-ntfs-long-paths-policy-option-missing">win32 long paths</a> (available since Windows 10 Version 1607, Build 14352) and not about extended UNC paths starting with <code>\\?\</code>.</p>
<hr/>
<p>I enabled long path support via a group policy and rebooted my PC. I checked in the registry that both <code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\FileSystem\LongPathsEnabled</code> and <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem\LongPathsEnabled</code> are set to <code>1</code>. </p>
<p>Then I opened a Python REPL and tried to create a directory that will exceed the 260-char limit, but failed:</p>
<pre><code>&gt;&gt;&gt; import os

&gt;&gt;&gt; longdirname = 'a' * 300

&gt;&gt;&gt; longdirname
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'

&gt;&gt;&gt; os.makedirs(longdirname)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python27\lib\os.py", line 157, in makedirs
    mkdir(name, mode)
WindowsError: [Error 3] The system cannot find the path specified: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
[Error 3] The system cannot find the path specified: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
</code></pre>
<p>I'm assuming that the long path support somehow didn't take effect here. Why is this and how can I properly enable it so that it works from Python scripts?</p>
<hr/>
<p>Update: I also tried directly calling a Win32 API function via pywin32 that claims <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa363855(v=vs.85).aspx" rel="nofollow noreferrer">in its documentatio</a>n that it should support long paths, but failed again:</p>
<pre><code>&gt;&gt;&gt; import win32file

&gt;&gt;&gt; longname = 'a' * 300

&gt;&gt;&gt; win32file.CreateDirectoryW(longname, None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
error: (3, 'CreateDirectoryW', 'The system cannot find the path specified.')
(3, 'CreateDirectoryW', 'The system cannot find the path specified.')
</code></pre>
<hr/>
<p>Update 2: Also tried creating via individual components:</p>
<pre><code>&gt;&gt;&gt; for i in range(1, 300):
...     win32file.CreateDirectoryW('a', None)
...     os.chdir('a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
error: (206, 'CreateDirectoryW', 'The filename or extension is too long.')
(206, 'CreateDirectoryW', 'The filename or extension is too long.')
</code></pre>
<p>(<code>os.makedirs</code> also won't work in this case)</p>
<hr/>
<p>Update 3: The following batch script will <em>not</em> fail:</p>
<pre><code>@echo off

setlocal enableextensions enabledelayedexpansion

pushd

set /a count = 1
for /L %%i in (1,1,300) do (
  mkdir a
  cd a
  echo %%i
)
endlocal

popd
</code></pre>
<p>So I'm assuming that this is somehow related to Python then.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution is both simple and somewhat disappointing: Python versions prior to 3.6 are not able to take advantage of long paths. <a href="https://docs.python.org/3/using/windows.html#removing-the-max-path-limitation" rel="nofollow noreferrer">3.6 changelist</a>.</p>
<blockquote>
<p>Windows historically has limited path lengths to 260 characters. This meant that paths longer than this would not resolve and errors would result.</p>
<p>In the latest versions of Windows, this limitation can be expanded to approximately 32,000 characters. Your administrator will need to activate the “Enable Win32 long paths” group policy, or set the registry value HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem@LongPathsEnabled to 1.</p>
<p>This allows the open() function, the os module and most other path functionality to accept and return paths longer than 260 characters when using strings. (Use of bytes as paths is deprecated on Windows, and this feature is not available when using bytes.)</p>
<p>After changing the above option, no further configuration is required.</p>
<p>Changed in version 3.6: Support for long paths was enabled in Python.</p>
</blockquote>
<p>To prove that it works, I did the following:</p>
<pre><code>Python 3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; longdir = 'a' * 300
&gt;&gt;&gt; os.makedirs(longdir)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Users\tamas\AppData\Local\Programs\Python\Python36-32\lib\os.py", line 220, in makedirs
    mkdir(name, mode)
OSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
&gt;&gt;&gt; for i in range(1, 300):
...     os.mkdir('a')
...     os.chdir('a')
...
&gt;&gt;&gt; len(os.getcwd())
631
&gt;&gt;&gt;
</code></pre>
<p>The first <code>makedirs</code> call fails because individual components are still limited to 255 characters.</p>
</div>
<span class="comment-copy">I'm wondering if there isn't a limit for the name themselves. Have you tried a long dirname that represents a tree (separated by slashes) ?</span>
<span class="comment-copy">@Jean-FrançoisFabre Good suggestion and I was excited to try it, but unfortunately it does not work - see my update in the post.</span>
<span class="comment-copy">did you try from a classic CMD before trying in python?</span>
<span class="comment-copy">@Jean-FrançoisFabre Great suggestion again, and brings closer to the solution: a batch script will happily create a path of 300 deep directories named <code>a</code>. See my update.</span>
<span class="comment-copy">I'll give it a go tonight if noone answered. I have admin privileges at home :)</span>
<span class="comment-copy">Apparently the docs need to be updated in this section. Bytes paths are no longer deprecated on Windows. 3.6 hard codes the Windows file-system encoding as UTF-8, and internally bytes paths are transcoded to UTF-16LE wide-character strings.</span>
<span class="comment-copy">This was enabled in 3.6 by adding the <code>longPathAware</code> entry to the manifest. MSDN is not very clear that this feature has to be enabled both in the registry and the application manifest.</span>
<span class="comment-copy">@eryksun, at one point I read that Windows didn't actually check the registry setting, only the manifest.  Do you happen to know for sure whether or not the registry setting really is necessary?</span>
<span class="comment-copy">@HarryJohnston, yes, both are required. The initialization of kernelbase.dll first calls <code>kernelbase!BasepIsProcessLongPathAwareByPolicy</code>, which checks the "LongPathsEnabled" registry setting. If it's enabled by policy, next it calls <code>kernelbase!BasepIsProcessLongPathAwareByManifest</code>, which checks the application manifest for the "longPathAware" setting. If the application is long-path aware, it enables the <code>IsLongPathAwareProcess</code> field in the PEB.</span>
<span class="comment-copy">@eryksun, thanks.  Hopefully the registry setting will be on by default in some future version of Windows 10.</span>
