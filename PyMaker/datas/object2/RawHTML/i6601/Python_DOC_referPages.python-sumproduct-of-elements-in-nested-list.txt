<div class="post-text" itemprop="text">
<p>I have two nested lists:</p>
<pre><code>a = [[1,2,3],[2,4,2]]
b = [[5,5,5],[1,1,1]]
</code></pre>
<p>I want to multiply and SUMPRODUCT each group of elements to get</p>
<pre><code>c = [[30],[8]]
</code></pre>
<p>Which result from <code>= [[1*2+2*5+3*5],[2*1,4*1,2*1]]</code></p>
<p>IÂ´ve tried doing:</p>
<pre><code>c = sum(x * y for x, y in zip(a, b))
</code></pre>
<p>But I get "can't multiply sequence by non-int of type 'list'"</p>
<p>Is there a simple list comprehension way to do this avoiding for loops?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Without numpy</strong></p>
<p>A solution with list comprehension, maybe will this:</p>
<pre><code>a = [[1,2,3],[2,4,2]]
b = [[5,5,5],[1,1,1]]

c = [[sum(map(lambda m: reduce(lambda h,i: h * i, m), n))] for n in [zip(x, y) for x, y in zip(a, b)]]
</code></pre>
<p>And show me:</p>
<pre><code>[[30], [8]] 
</code></pre>
<p>Another more clean solution is a simple for loop</p>
<pre><code>a = [[1,2,3],[2,4,2]]
b = [[5,5,5],[1,1,1]]

c = []

for x, y in zip(a, b):
    temp = []
    for m, n in zip(x,y):
        temp.append(m * n)
    c.append([sum(temp)])
</code></pre>
<p>Result:</p>
<pre><code>[[30], [8]]
</code></pre>
<p>Sorry for not readable variable names, I recommend the simple <code>for</code> in this cases</p>
</div>
<div class="post-text" itemprop="text">
<p>You can implement the <code>dotproduct</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a>:</p>
<pre><code>import operator


def dotproduct(vec1, vec2):
    return sum(map(operator.mul, vec1, vec2))
</code></pre>
<p>Code</p>
<pre><code>a = [[1,2,3], [2,4,2]] 
b = [[5,5,5], [1,1,1]]

[[dotproduct(x, y)] for x, y in zip(a, b)]
# [[30], [8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do it with a nested list comprehension but it would be complicated.  Here it is one step at a time.</p>
<pre><code>a = [[1,2,3],[2,4,2]]
b = [[5,5,5],[1,1,1]]
result1 = [[x*y for x, y in zip(r1, r2)] for r1, r2 in zip(a, b)]
c = [[sum(r)] for r in result1]

c
[[30], [8]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Numpy solution</p>
<pre><code>import numpy as np

c = map(lambda x: sum(np.prod((np.array(x)), axis=0)), zip(a,b))

[30, 8]
</code></pre>
<p>If you need to produce <code>[[30], [8]]</code> then</p>
<pre><code>c = map(lambda x: [sum(np.prod((np.array(x)), axis=0))], zip(a,b))
</code></pre>
</div>
<span class="comment-copy">You should instead first try to write it with for loops and add some <code>print</code>s to understand what is going on. When you have understood it, you can rewrite it in a more concise way.</span>
<span class="comment-copy">Umm... How is 1*2+2*5+3*5 = 30? Order of operatations says "multiply, then add" so it should be 2+10+15=27, right?</span>
<span class="comment-copy">It looks like you're trying to do matrix multiplication.  If so, you might want to just start using multi-dimensional arrays in <code>numpy</code>.</span>
<span class="comment-copy">Your code disagrees with your text, it's a nested list comprehension.</span>
<span class="comment-copy">Correction made.  Thanks @Stefan.</span>
<span class="comment-copy">Good point @Stefan.  I can't figure out how to do it without nesting!</span>
<span class="comment-copy">That's not the desired result. And if it were, you could also do <code>(np.array(a) * b).sum(1).tolist()</code>, no? (I'm not sure. I'm a numpy noob)</span>
<span class="comment-copy">To get the exact result you would have to reshape the array.  <code>(np.array(a)*np.array(b)).sum(1).reshape((2,1)).tolist()</code></span>
<span class="comment-copy">or you can just put brackets around the <code>sum</code> function and it will produce <code>[[30], [8]]</code></span>
