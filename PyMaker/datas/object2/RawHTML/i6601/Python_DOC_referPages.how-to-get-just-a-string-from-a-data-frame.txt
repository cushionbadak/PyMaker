<div class="post-text" itemprop="text">
<p>I am trying to define a function with two arguments : df (dataframe), and an integer (employerID) as my arguments. this function will return the full name of the employer.</p>
<p>If the given ID does not belong to any employee, I want to return the string "UNKNOWN" / If no middle name is given only return "LAST, FIRST". / If only the middle initial is given the return the full name in the format "LAST, FIRST M." with the middle initial followed by a '.'.</p>
<pre><code>def getFullName(df, int1):
    df = pd.read_excel('/home/data/AdventureWorks/Employees.xls')
    newdf = df[(df['EmployeeID'] == int1)]
    print("'" + newdf['LastName'].item() + "," + " " + newdf['FirstName'].item() + " " + newdf['MiddleName'].item() + "." + "'")

getFullName('df', 110)
</code></pre>
<p>I wrote this code but came up with two problems :
1) if I don't put quotation mark around df, it will give me an error message, but I just want to take a data frame as an argument not a string.</p>
<p>2) this code can't deal with someone with out middle name. </p>
<p>I am sorry but I used pd.read_excel to read the excel file which you can not access. I know it will be hard for you to test the codes without the excel file, if someone let me know how to create a random data frame with the column names, I will go ahead and change it. Thank you,</p>
</div>
<div class="post-text" itemprop="text">
<p>I created some fake data for this:</p>
<pre><code>           EmployeeID FirstName LastName MiddleName
0          0         a        a          a
1          1         b        b          b
2          2         c        c          c
3          3         d        d          d
4          4         e        e          e
5          5         f        f          f
6          6         g        g          g
7          7         h        h          h
8          8         i        i          i
9          9         j        j       None
</code></pre>
<p><code>EmployeeID</code> 9 has no middle name, but everyone else does.  The way I would do it is to break up the logic into two parts.  The first, for when you cannot find the <code>EmployeeID</code>.  The second manages the printing of the employee's name.  That second part should also have two sets of logic, one to control if the employee has a middle name, and the other for if they don't.  You could likely combine a lot of this into single line statements, but you will likely sacrifice clarity.</p>
<p>I also removed the <code>pd.read_excel</code> call from the function.  If you want to pass the dataframe in to the function, then the dataframe should be created oustide of it.</p>
<pre><code>def getFullName(df, int1):
   newdf = df[(df['EmployeeID'] == int1)]

   # if the dataframe is empty, then we can't find the give ID
   # otherwise, go ahead and print out the employee's info
   if(newdf.empty):
       print("UNKNOWN")
       return "UNKNOWN"
   else:
       # all strings will start with the LastName and FirstName
       # we will then add the MiddleName if it's present
       # and then we can end the string with the final '
       s = "'" + newdf['LastName'].item() + ", " +newdf['FirstName'].item()
       if (newdf['MiddleName'].item()):
           s = s + " " + newdf['MiddleName'].item() + "."
       s = s + "'"
       print(s)
       return s
</code></pre>
<p>I have the function returning values in case you want to manipulate the string further.  But that was just me.</p>
<p>If you run <code>getFullName(df, 1)</code> you should get <code>'b, b b.'</code>.  And for <code>getFullName(df, 9)</code> you should get <code>'j, j'</code>.</p>
<p>So in full, it would be:</p>
<pre><code>df = pd.read_excel('/home/data/AdventureWorks/Employees.xls')
getFullName(df, 1)  #outputs 'b, b b.'
getFullName(df, 9)  #outputs 'j, j'
getFullName(df, 10) #outputs UNKNOWN
</code></pre>
<hr/>
<p>Fake data:</p>
<pre><code>d = {'EmployeeID' : [0,1,2,3,4,5,6,7,8,9],
     'FirstName' : ['a','b','c','d','e','f','g','h','i','j'],
     'LastName' : ['a','b','c','d','e','f','g','h','i','j'],
     'MiddleName' : ['a','b','c','d','e','f','g','h','i',None]}
df = pd.DataFrame(d)
</code></pre>
</div>
<span class="comment-copy">Some sample data in text form would be useful.</span>
<span class="comment-copy">What error are you getting?  The error message would also be helpful.</span>
<span class="comment-copy">error message saying "name 'df' is not defined" if I do not put quotation around df.   also, employeeID (259, 278, 204). FirstName(Be, Garrett, Gabe), MiddleName(T,R,NAN), LastName(Miller, Vargas, Mares)   here is the text form of the data frame.</span>
<span class="comment-copy">The reason you are getting "df is not defined" is that you are not loading your dataframe before you call the function.  So you are passing a variable to your function that does not exist yet.  You should move the <code>pd.read_excel</code> call outside of the function.  Or remove <code>df</code> as a parameter.</span>
<span class="comment-copy">Why does <code>getFullName()</code> have a <code>df</code> parameter if it is not being used?  <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">Defining Functions</a></span>
<span class="comment-copy">It might be useful for the OP to see how to create fake data - they requested as much in the question.</span>
<span class="comment-copy">Good call out.  I think OP edited the question after I started answering.</span>
<span class="comment-copy">what does OP stand for?? im sorry guys. Im kinda new to this. and thanks alot for your help. I wish I can help others out in the near future.</span>
<span class="comment-copy">Original Poster</span>
<span class="comment-copy">I am having this error follow for the one does not have a middlename :coercing to Unicode: need string or buffer, float found</span>
