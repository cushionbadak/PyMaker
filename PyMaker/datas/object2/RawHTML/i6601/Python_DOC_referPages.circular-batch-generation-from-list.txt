<div class="post-text" itemprop="text">
<p>Basically, I would like to create an infinite generator from the given list <code>l</code> with some batch size of <code>batch_size</code>. For example, if I have list of <code>l = [1, 2, 3, 4, 5]</code> and <code>batch_size = 2</code>, I'd like to generate infinite loop of <code>[1, 2]</code>, <code>[3, 4]</code>, <code>[5, 1]</code>, <code>[2, 3]</code>, ... (similar to <a href="https://stackoverflow.com/questions/23416381/circular-list-iterator-in-python">itertool.circular</a> with additional batch size)</p>
<p>My current approach is the following which doesn't give the right solution yet because at the end I just pad the first element of list when I reach the end:</p>
<pre><code>l = [1, 2, 3, 4, 5]

def generator(l, batch_size=2):
    while 1:
        for i in range(0, len(l), batch_size):
            batch = l[i:(i + batch_size)]
            if len(batch) &lt; batch_size:
                batch.extend(l[0: batch_size - len(batch)])
            yield batch

&gt;&gt; gen = generator(l, batch_size=2)
&gt;&gt; next(gen) # [1, 2]
&gt;&gt; next(gen) # [3, 4]
&gt;&gt; next(gen) # [5, 1]
&gt;&gt; next(gen) # [1, 2] &lt;&lt; want [2, 3] instead
</code></pre>
<p>Is there a way to do that in a circular way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you basically want a combination of "take" and <code>cycle</code>:</p>
<pre><code>&gt;&gt;&gt; def circle_batch(iterable, batchsize):
...     it = itertools.cycle(iterable)
...     while True:
...         yield list(itertools.islice(it, batchsize))
...
&gt;&gt;&gt; l = [1, 2, 3, 4, 5]
&gt;&gt;&gt; c = circle_batch(l, 2)
&gt;&gt;&gt; next(c)
[1, 2]
&gt;&gt;&gt; next(c)
[3, 4]
&gt;&gt;&gt; next(c)
[5, 1]
&gt;&gt;&gt; next(c)
[2, 3]
&gt;&gt;&gt; next(c)
[4, 5]
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">recipes in the docs</a> you'll see that <code>take</code> is a basic tool, so using that:</p>
<pre><code>&gt;&gt;&gt; def take(n, iterable):
...     "Return first n items of the iterable as a list"
...     return list(islice(iterable, n))
...
&gt;&gt;&gt; def cycle_batch(iterable, batchsize):
...     it = itertools.cycle(iterable)
...     while True:
...         return take(batchsize, it)
...
&gt;&gt;&gt; l = [1, 2, 3, 4, 5]
&gt;&gt;&gt; c = circle_batch(l, 2)
&gt;&gt;&gt; next(c)
[1, 2]
&gt;&gt;&gt; next(c)
[3, 4]
&gt;&gt;&gt; next(c)
[5, 1]
&gt;&gt;&gt; next(c)
[2, 3]
&gt;&gt;&gt; next(c)
[4, 5]
&gt;&gt;&gt; next(c)
[1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>def generator(l, batch_size=2):
    gen = iter(itertools.cycle(l))
    while 1:
        yield [next(gen) for _ in range(batch_size)]

gen = generator(l, batch_size=2)
</code></pre>
</div>
<span class="comment-copy">Why assign to <code>x</code>...</span>
<span class="comment-copy">@MosesKoledoye no good reason, I can remove it</span>
<span class="comment-copy">Thanks @juanpa.arrivillaga! This work perfectly (it has to be 5 mins before accepting the solution).</span>
<span class="comment-copy">Thanks @schwobaseggl! This works great. I have to accept @juanpa.arrivillaga tho but both solutions work for me :)</span>
<span class="comment-copy">maybe you meant to type <code>cycle</code> not <code>circle</code>?</span>
