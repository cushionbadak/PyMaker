<div class="post-text" itemprop="text">
<p>I am reading the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe for unique_everseen</a>:</p>
<pre><code>def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
</code></pre>
<p>What is the point of defining <code>seen_add = seen.add</code> in the code above?</p>
</div>
<div class="post-text" itemprop="text">
<p>Performance. Using a local name to dereference the method is much faster than an attribute lookup (which has to bind a new method object each time):</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('s.add', 's = set()', number=10**7)
0.4227792940218933
&gt;&gt;&gt; timeit.timeit('seen_add', 's = set(); seen_add = s.add', number=10**7)
0.15441945398924872
</code></pre>
<p>Using a local reference is almost 3 times as fast. Because the <code>set.add</code> is used in a loop, it is worth optimising away the attribute lookup.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's a technique called <a href="https://en.wikipedia.org/wiki/Loop-invariant_code_motion" rel="nofollow noreferrer">"hoisting" or "Loop-invariant code motion"</a>. In essence you do an operation that is executed multiple times but always returns the same value outside the loop instead of in the loop body.</p>
<p>In this case the loop would repeatedly lookup the <code>add</code> attribute of your <code>seen</code> set and create a "bound method". That's actually pretty fast but still an operation that is performed several times inside a loop and always gives the same result. So you <em>can</em> look up the attribute (in this case the bound method) once and store it in a variable to gain some performance.</p>
<p>Note that while this provides a speed-up it's by no means "much". I removed the second branch for this timing to make the code shorter:</p>
<pre><code>from itertools import filterfalse

def unique_everseen(iterable):
    seen = set()
    seen_add = seen.add
    for element in filterfalse(seen.__contains__, iterable):
        seen_add(element)
        yield element

def unique_everseen_without(iterable):
    seen = set()
    for element in filterfalse(seen.__contains__, iterable):
        seen.add(element)
        yield element
</code></pre>
<p>Some exemplaric timings:</p>
<pre><code># no duplicates
a = list(range(10000))
%timeit list(unique_everseen(a))
# 5.73 ms ± 279 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
%timeit list(unique_everseen_without(a))
# 6.81 ms ± 396 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

# some duplicates
import random
a = [random.randint(0, 100) for _ in range(10000)]
%timeit list(unique_everseen(a))
# 1.64 ms ± 12.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
%timeit list(unique_everseen_without(a))
# 1.66 ms ± 16.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

# only duplicates
a = [1]*10000
%timeit list(unique_everseen(a))
# 1.64 ms ± 78.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
%timeit list(unique_everseen_without(a))
# 1.63 ms ± 24.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p>So while you get ~10% speedup in the no duplicates case it's actually almost useless in case you got lots of duplicates.</p>
<p>Actually this recipe shows another example of "hoisting", more specifically the <code>filterfalse(seen.__contains__, iterable)</code>. This looks up the <code>__contains__</code> method of your <code>seen</code> set once and repeatedly calls it inside the <code>filterfalse</code>. </p>
<p>Maybe the take-away should be: Hoisting method lookups is a micro-optimization. It reduces the constant factor of your loop. The speedup may be worth it in certain operations but personally I think it should be used sparingly and only in combination with profiling/benchmarking.</p>
</div>
