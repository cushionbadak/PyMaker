<div class="post-text" itemprop="text">
<p>There appears to be some unexpected behavior when it comes to phantom module loading with <code>urllib</code> on certain systems. The behavior is as follows:</p>
<pre><code>Python 3.5.2 (default, Aug 18 2017, 17:48:00) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']
&gt;&gt;&gt; urllib.foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: module 'urllib' has no attribute 'foo'
&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'error', 'parse', 'request', 'response']
</code></pre>
<p>The unexpected behavior is that the additional names are loaded after only trying to access a bad attribute and getting a <code>AttributeError</code>. On another system with the same python interpreter (Ubuntu 16.04 <code>apt python3</code>) this does not happen:</p>
<pre><code>Python 3.5.2 (default, Nov 17 2016, 17:05:23)
[GCC 5.4.0 20160609] on linux
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']
&gt;&gt;&gt; urllib.foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: module 'urllib' has no attribute 'foo'
&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']
</code></pre>
<p>We have tested on several OSes and interpreters and the only other one that exhibits the unexpected behavior is an Ubuntu 14.04 Python 3.4.0 obtained from <code>apt</code>. On this system, we also verified that it seems to occur when a completely unrelated exceptions is raised as well...</p>
<pre><code>Python 3.4.0 (default, Apr 11 2014, 13:05:18) 
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; raise Exception('uh oh')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Exception: uh oh
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'error', 'parse', 'request', 'response']
</code></pre>
<p>What's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have <a href="https://wiki.ubuntu.com/Apport" rel="nofollow noreferrer">Apport</a> installed, a software package used by Ubuntu to capture software crashes.</p>
<p>The package includes a Python package that installs a <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer"><code>sys.excepthook</code> function</a>; this hook is called whenever an <em>unhandled</em> exception is raised in a Python program. The implementation for that hook indirectly loads <code>urllib.*</code> modules.</p>
<p>By triggering an exception in the interactive interpreter, you triggered the hook, causing the extra Python code to run which adds imports.</p>
<p>See the <a href="http://bazaar.launchpad.net/~apport-hackers/apport/trunk/view/head:/apport_python_hook.py" rel="nofollow noreferrer"><code>apport_python_hook.py</code> source code</a>; when the hook is called, various <code>apport</code> modules are loaded, including <a href="http://bazaar.launchpad.net/~apport-hackers/apport/trunk/view/head:/apport/report.py" rel="nofollow noreferrer"><code>apport.report</code></a> which imports <code>urllib</code> modules.</p>
<p>You can disable the hook by setting <code>enabled = 0</code> in <code>/etc/default/apport</code>.</p>
<p>In future, if you want to see imports take place, you can run Python with the <a href="https://docs.python.org/3/using/cmdline.html#id4" rel="nofollow noreferrer"><code>-v</code> command-line switch</a> or setting the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONVERBOSE" rel="nofollow noreferrer"><code>PYTHONVERBOSE</code> environment variable</a>; that'd have told you that the <code>apport_python_hook</code> module was loaded when you opened Python, and that more modules were loaded when the exception was raised.</p>
</div>
<span class="comment-copy">It's probably a system-level exception handler that logs exceptions. The exception handler loads <code>urllib.*</code> modules.</span>
<span class="comment-copy">What does <code>import sys; print(sys.excepthook)</code> produce? And <code>print(sys.excepthook is sys.__excepthook__)</code>?</span>
<span class="comment-copy">System in question: <code>&lt;function apport_excepthook at 0x7f65c6acf510&gt;</code> and <code>False</code>. "Normal" system: <code>&lt;built-in function excepthook&gt;</code> and <code>True</code>.</span>
