<div class="post-text" itemprop="text">
<p>I want to return a response in django view first then does something after the response.</p>
<p>Let's say I have something like this as example.....</p>
<pre><code>class Res(View):
    def post(self, request):
        data = request.POST
        new_obj = Model.objects.create(name=data.['name'])

        #  what is below does not have to be done RIGHT AWAY, can be done after a response is made
        another_obj = Another()
        another_obj.name = new_obj.name
        another_obj.field = new_obj.field
        another_obj.save()

        # some other looping and a few other new models to save

        return JsonResponse({'status': True})
</code></pre>
<p>So I am wondering if there is a chance to return the response first?  What's above is an example of what I mean.</p>
<p>I am not sure if this can be done in django, if possible, can someone let me know who this can be done</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, that's more of a Python than Django question. As the comments have pointed out, you could implement some sort of asynchronous queue like Celery however this may be a bit of an overkill for your use case.</p>
<p>Consider using plain <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">Python threads</a> instead:</p>
<pre><code>from threading import Thread


def create_another_obj(name, field):
        another_obj = Another()
        another_obj.name = name
        another_obj.field = field
        another_obj.save()

class Res(View):
    def post(self, request):
        data = request.POST
        new_obj = Model.objects.create(name=data['name'])

        # start another thread to do some work, this is non-blocking
        # and therefore the JsonResponse will be returned while it is
        # running!
        thread = Thread(
                     target=create_another_obj,
                     args=(new_obj.name, new_obj.field),
                 )
        thread.start()

        return JsonResponse({'status': True})
</code></pre>
<p>The idea here is to extract the code which you want to run asynchronously into functions and run them in a thread.</p>
</div>
<span class="comment-copy">You can use celery tasks for this.</span>
<span class="comment-copy">Yes, celery is one excellent way to do it. Read about it here: <a href="https://realpython.com/blog/python/asynchronous-tasks-with-django-and-celery/" rel="nofollow noreferrer">realpython.com/blog/python/â€¦</a></span>
<span class="comment-copy">thx thx, I will try this out soon and see how it works.</span>
<span class="comment-copy">by just reading it, I can kind of thinking that I will make what needs to be delayed into a function then <code>.delay</code> it, but I don't really get when does it know to call it though?</span>
<span class="comment-copy">I just saw your response, that seems to be a good idea, which I would give it a try.  Does the <code>thread(target=)</code> has to be a function?  Other than using in this kind of case, there are other cases such as passing objects to S3 which does not require it to be done in order for <code>JsonResponse</code> done.</span>
<span class="comment-copy">Yes, <code>target</code> has to be a function, <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">check out the docs</a>. You can also create a class in which you inherit from <code>Thread</code> and override <code>run()</code>.</span>
