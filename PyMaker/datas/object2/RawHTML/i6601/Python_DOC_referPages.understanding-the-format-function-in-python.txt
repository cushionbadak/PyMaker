<div class="post-text" itemprop="text">
<p>Our team prefers to use format instead of str.format in every case, and while trying to learn how to use format() in Python I  encountered something which I have no idea of why it happened, and this is the problem:</p>
<blockquote>
<p>3.30  What will be displayed by the following code? (note ? represents a blank space)</p>
<pre><code>  print(format("Welcome", "10s"), end = '#')
  print(format(111, "4d"), end = '#')
  print(format(924.656, "3.2f"))
</code></pre>
<ol>
<li><code>???Welcome#?111#924.66</code></li>
<li><code>Welcome#111#924.66</code></li>
<li><code>Welcome#111#.66</code></li>
<li><code>Welcome???#?111#924.66</code></li>
</ol>
</blockquote>
<p>Then answer is 4 somehow. I thought the default alignment was on the LEFT for every format but </p>
<pre><code>print(format("Welcome", "10s"), end = '#')
</code></pre>
<p>is LEFT alignment and </p>
<pre><code>print(format(111, "4d"), end = '#')
</code></pre>
<p>that someow is right alignment?</p>
<p>So this is the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the docs of <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format</code></a>:</p>
<blockquote>
<p>A call to <code>format(value, format_spec)</code> is translated to
  <code>type(value).__format__(value, format_spec)</code>.</p>
</blockquote>
<p><code>format</code> internally calls each type's <code>__format__</code> function. It just so happens that justification for strings is left by default, while for integers is right. You'll see <code>str.format</code> shows you the same thing, because it calls <code>__format__</code> under the hood:</p>
<pre><code>In [1]: '{:10s}|{:4d}'.format('Welcome', 111)
Out[1]: 'Welcome   | 111'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When using format 
For string you add spaces after are from the right and for numbers from the left, it make sense as numbers spacing from right side may confuse with fractions.</p>
<ul>
<li>10s means that if the string is less than 10 digits it will add spaces </li>
<li>4d means that the integer value will be 4 digits</li>
</ul>
<p>check the following code and see how the indentation works:
<code>
print('{:10s}{:4d}'.format('Apple',10))
print('{:10s}{:4d}'.format('Orange',8))
</code></p>
</div>
<span class="comment-copy">Numbers are right-aligned by default so the digits line up. Everything else is left-aligned by default. This is clear in the docs. Read them: <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">docs.python.org/3/library/string.html#formatspec</a></span>
