<div class="post-text" itemprop="text">
<p>I understand that one should not use <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">mutable default parameter value</a> in Python (with some exceptions) because this value is evaluated and stored only once when the function is defined, and not each time the function is later called.</p>
<p>My understanding of that is this (using the example below; please excuse my imprecise language as I'm just a beginner in Python programming, who's stuck at the Function chapter of my textbook because of this):</p>
<pre><code>def f(x = [1, 2, 3]):
    x.append(4)
    print(x)

f()
f()
</code></pre>
<p>1) The function f is defined, and x (local variable in f) assumes the default variable of [1, 2, 3] (even before the function is called)</p>
<p>2) When f() is called, x is still [1, 2, 3] due to no argument passed to it, and x continues having its default value</p>
<p>3) x is modified in place with append, becomes [1, 2, 3, 4], and is printed as such</p>
<p>However, this is where my confusion arises. I'd assume that:</p>
<p>4) When f ends, x is destroyed (in the stack or whatever you'd call it) and is no longer associated with the list object [1, 2, 3, 4]**</p>
<p>5) The list object [1, 2, 3, 4] is reclaimed since there's no variable that refers to it anymore</p>
<p>Therefore,</p>
<p>6) When f() is called the second time, I'd expect Python to output an error since x now no longer has a value associated with it. In other words, how can Python reuse the default value from the last evaluation when it's been reclaimed/destroyed?</p>
<p>Appreciate all your help and explanation!</p>
<p>** this understanding I got from <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Ned Batchelder's page on variable name assignment</a> (see below)
<a href="https://i.stack.imgur.com/VlPVZ.png" rel="nofollow noreferrer"><img alt="Net Batchelder's variable assignment function" src="https://i.stack.imgur.com/VlPVZ.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>While it may seems to you that at the end of the execution x, the default value, is disposed, it is not.</p>
<p>In fact, Python has a global namespace with all the names available for you to use (built-in functions, classes and functions you import or define).</p>
<p>The content of this namespace is made of objects. Function are objects too.</p>
<p>As a test, if you try this in a script or in the python command line, you will see what I mean:</p>
<pre><code>def f(x = [1, 2, 3]):
    x.append(4)
    print(x)
print dir(f)
</code></pre>
<p>you will see the object nature of the function f. As an objects, the default values are referenced in an attribute, <code>f.func_defaults</code>, therefore they are always available and if mutable they retain the changes, giving you side effects with you may not want.</p>
<p>EDIT: in python 3 the attribute has been replaced by <code>f.__defaults__</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There are two references to the list in your case, one is store in the background of the function as the default value to the argument <code>x</code>. </p>
<p>When the function is called without <code>x</code>, a new reference to the <strong>same</strong> list is created as the local variable <code>x</code>. Then you append to the list via the second reference. And after the call, the second reference is garbage collected. The first reference still points to the same list, which has one element more now.</p>
<p>Or in short: there is only one list all the time.</p>
</div>
<span class="comment-copy">Thank you for your explanation bracco23! I tried print(dir(f)), and only saw <code>__defaults__</code> as the relevant attribute. Is this the same as your func_defaults? Perhaps this is due to my running Python 3 and yours Python 2.</span>
<span class="comment-copy">Ah okay <code>func_defaults</code> was indeed replaced by <code>__defaults__</code> in Python 3 (<a href="https://stackoverflow.com/questions/8806530/accessing-the-default-argument-values-in-python" title="accessing the default argument values in python">stackoverflow.com/questions/8806530/â€¦</a>)</span>
<span class="comment-copy">yes, as you may have already guessed by printing it, in python 3 <code>__defaults__</code> is the attribute which references the default values of the parameters.</span>
<span class="comment-copy">I was also surprised at first. but after thinking for a while on that I've got there is no other way to handle that. defaults should be calculated <i>only once</i> since they could be an expression rather simple value. this way it could be really weird if some function was called again and again just to calculate default value.</span>
<span class="comment-copy">Thank you Klaus D.! This really helps me understand this quirk. BTW is the default value reference you mentioned the same thing as bracco23's func_defaults attribute? If so then your 2 answers explain my question perfectly.</span>
<span class="comment-copy">Yes, it is. I did not write about since the implementation change with the Python version and I tried to keep the explanation as simple as possible.</span>
