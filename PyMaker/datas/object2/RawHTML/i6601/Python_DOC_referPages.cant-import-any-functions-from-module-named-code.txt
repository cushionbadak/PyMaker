<div class="post-text" itemprop="text">
<p>I created a module named code: code.py and wrote a simple function:</p>
<pre><code>def main():
    print("simple function")
</code></pre>
<p>I tried dropping this file inside site-packages and when I run:</p>
<pre><code>import code
code.main()
</code></pre>
<p>I get the following error: AttributeError: module 'code' has no attribute 'main'.</p>
<p>Interestingly enough, if I rename the module to foo.py, this code works just fine:</p>
<pre><code>import foo
foo.main()
</code></pre>
<p>Code isn't a reserved word so why can't I name a module code?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/code.html" rel="noreferrer"><code>code</code></a> is a Python module already, that is what is being imported, not your file</p>
</div>
<span class="comment-copy">I actually had no idea of existence of this module. Turns out there's a couple in the <a href="https://docs.python.org/3/py-modindex.html" rel="nofollow noreferrer">python module index</a> that I might conceivably use without knowing.</span>
<span class="comment-copy">Really nice pointing out the python module index. There are a bunch of pretty "common" names in there that I would most likely use without noticing. That's most likely why we should always install modules inside a package, to avoid name conflicts.</span>
