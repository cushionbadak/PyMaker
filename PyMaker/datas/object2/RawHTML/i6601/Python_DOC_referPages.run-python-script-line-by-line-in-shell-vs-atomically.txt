<div class="post-text" itemprop="text">
<p>I'm integrating MicroPython into a microcontroller and I want to add a debug step-by-step execution mode to my product (via a connection to a PC).</p>
<p>Thankfully, MicroPython includes a <strong>REPL</strong> aka <strong>Python shell</strong> functionality: I can feed it one line at a time and execute.</p>
<p>I want to use this feature to single-step on the PC-side and send in the lines in the Python script one-by-one. </p>
<p>Is there <strong><em>ANY</em></strong> difference, besides possibly timing, between running a Python script one line at a time vs <code>python my_script.py</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Passing one line of code at a time on stdin is a <strong>completely</strong> unacceptable alternative to a proper debugger.</p>
<p>Let's say that you want to debug the following:</p>
<pre><code>def foo():                            # 1
    for i in range(10):               # 2
        if i == 5:                    # 3
            raise Exception("Argh!")  # 4
                                      # 5
foo()                                 # 6
</code></pre>
<p>...in a proper step-by-step debugger, the user could use it like so:</p>
<pre><code>break 4
run
</code></pre>
<p>Now, how are you going to do that? If you enter the function in a REPL, the function is defined as one operation, and it runs as one operation. It doesn't stop at line 6. It doesn't let you proceed line-by-line. The same is true of the <code>for</code> loop: Entering the text of the <code>for</code> loop one line at a time doesn't let you step it before the exception is thrown.</p>
<p>If you eliminate the function, and eliminate the loop (generating the code <code>_something = iter(range(10)); i=_something.next()</code>, maybe?), then you need to emulate the effects of scoping. It means you have a hugely different language than the one you're purportedly "debugging".</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know whether MicroPython has compile() and exec() built-in.
But when embeded Python has them and when MCU has enough RAM, then I do the following:</p>
<ol>
<li><p>Send a line to embeded shell to start a creation of variable with multiline string.</p>
<p>'_code = """\'</p></li>
<li><p>Send the code I wish executed (line by line or however)</p></li>
<li><p>Close the multiline string with """</p></li>
<li><p>Send exec command to run the transfered code stored in the variable on MCU and pick up the output.</p></li>
</ol>
<p>If your RAM is small and you cannot transfer whole code at once, you should transfer it in blocks that would be executed. Like functions, loops, etc.</p>
<p>If you can compile bytecode for MicroPython on a PC, then you should be able to transfer it and prepare it for execution. This would use a lot less of RAM.
But whether you can inject the raw bytecode into shell and run it depends on how much MicroPython resembles CPython.</p>
<p>And yep, there are differences. As explained in another answer line by line execution can be tricky. So blocks of code is your best bet.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there <strong><em>ANY</em></strong> difference ...</p>
</blockquote>
<p>Yes.</p>
<p>The code below, for example, works in <code>.py</code> file, but is a <code>SyntaxError</code> in the interactive interpreter:</p>
<pre><code>x = 1
if x == 1:
    pass
x = 2
</code></pre>
<p>There are <em>many</em> other differences, but this alone should be enough to scare you away from the idea.  </p>
</div>
<span class="comment-copy">Let's say you've got a loop. Are you going to have your own interpreter manage flow control? Because otherwise you can't step one line at a time -- either the whole loop runs, or none of it does.</span>
<span class="comment-copy">What that means, in effect, is that you need something much more involved to be able to get the effect of single-stepping: Effectively, you need to inject a new function call at any point where a breakpoint may be set. It's <i>conceivable</i> to do that by instrumenting code (ideally, parsing and programmatically modifying the AST), but that's going to be an awful mess, and approaching the amount of effort you'd need to actually do things <i>right</i> at the VM layer.</span>
<span class="comment-copy">I don't understand this statement: <code>Entering the text of the for loop one line at a time doesn't let you step it before the exception is thrown.</code></span>
<span class="comment-copy">Nvm I get it: it's the whole flow-control issue. Right?</span>
<span class="comment-copy">Right. Once you call <code>foo()</code>, <i>all</i> of <code>foo</code> runs, it doesn't run one line at a time.</span>
<span class="comment-copy">What if I sent it blocks of code? i.e. if-blocks, for-blocks, etc</span>
<span class="comment-copy">Then (1) that means you need to simulate all the effects of entering and leaving function scopes on code (and those aren't always obvious), and (2) the blocks still run all at once, not a line at a time.</span>
<span class="comment-copy">If I did blocks of code, that would get around the issues mentioned?</span>
<span class="comment-copy">It should. But if you are executing block by block, then you will have to keep correcting line numbers when an exception is raised. If you'd really like to execute everything command by command and track the whole progress I am afraid you do not have any other option but to take the code, make AST out of it, include a call to your added tracing function after each command into the AST, compile the AST and then send that bytecode to MCU and run it. It is not so hard to achieve as it sounds.</span>
<span class="comment-copy">I don’t have access to interpreter right now; why does your example fail in shell?</span>
<span class="comment-copy">I already wrote the reason.  It raises a <code>SyntaxError</code>.</span>
<span class="comment-copy">I don’t understand why the syntax error occurs</span>
<span class="comment-copy">It's not just a few corner cases.  You should find a better way to write the debugger, for example by using the <a href="https://docs.python.org/3/library/sys.html#sys.settrace" rel="nofollow noreferrer"><code>system trace function</code></a>.</span>
<span class="comment-copy">@wim, ...unfortunately, it looks like <code>sys.settrace()</code> isn't available in micropython, per <a href="https://github.com/micropython/micropython/issues/3009" rel="nofollow noreferrer">github.com/micropython/micropython/issues/3009</a>. Which does not <i>at all</i> mean I'm endorsing the OP's proposed hackery, as opposed to implementing the necessary VM support properly..</span>
