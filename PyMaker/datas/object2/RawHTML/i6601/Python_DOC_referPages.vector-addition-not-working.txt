<div class="post-text" itemprop="text">
<p>I wrote this code to add vectors. At first glance it looks to be working properly, but I've found that in certain addition problems, vector addition order actually matters, which shouldn't happen. For example, given <code>v1 = Vector(4, 127)</code> <code>v2 = Vector(3, 37)</code> <code>v3 = Vector(2, 290)</code> <code>v4 = Vector(6, 190)</code>, <code>print(v1 + v2 + v3 + v4)</code> yields a different result than <code>print(v1 + v4 + v2 + v3)</code>
Can someone please point out my error and explain why it's wrong?</p>
<pre><code>import math

class Vector():
    def __init__(self, magnitude, direction):
        self.magnitude = round(magnitude, 4)
        self.direction = round(direction % 360, 4)
        self.xc = self.GetXComponent()
        self.yc = self.GetYComponent()

    def __str__(self):
        return "{} at {}°".format(self.magnitude, self.direction)

    def __add__(self, other):
        if other.__class__ == Vector:
            xc = self.xc + other.xc
            yc = self.yc + other.yc
            magnitude = round(math.sqrt(xc ** 2 + yc ** 2), 4)
            direction = round(math.degrees(math.atan(yc / xc)), 4)
            return Vector(magnitude, direction)
        else:
            raise TypeError

    def GetXComponent(self):
        return round(self.magnitude * math.cos(math.radians(self.direction)), 4)

    def GetYComponent(self):
        return round(self.magnitude * math.sin(math.radians(self.direction)), 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>math.atan(x)</code> only has a mathematical range (output) range of π (180°, half a circle). If any of your resulting vectors from addition are in quadrant II or III (x is negative), they will be rotated half-way around the circle.</p>
<p>Use <a href="https://docs.python.org/3/library/math.html#math.atan2" rel="nofollow noreferrer"><code>math.atan2(y, x)</code></a> for the full possible range. That will also eliminate an error you'll get if you had a 90/270° vector that right now would cause a <code>ZeroDivisionError</code>.</p>
<p>Other comments:</p>
<ul>
<li><p>Round once, when you want to output the value. It's a) more code to round <em>everywhere</em>, and b) less precise.</p></li>
<li><p>Using natural units, i.e. radians, or cartesian coordinates internally, might be easier, while still accepting/outputting whatever you want.</p></li>
</ul>
</div>
<span class="comment-copy">I fixed your indenting, check it's what you have. Also, <code>math.atan</code> is likely to be a hazard (look at <code>atan2</code>), and how different are your results, to some decimal places (you're rounding) or much more?</span>
<span class="comment-copy">Why are you rounding? That just throws away accuracy unnecessarily. If you want you can round in the <code>__str__</code> function.</span>
<span class="comment-copy">Simply print <code>v1</code> and <code>v4</code>, are they what you expect?</span>
