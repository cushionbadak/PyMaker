<div class="post-text" itemprop="text">
<p>I'm relatively new to Python and I decided to try and code a relatively simple collatz conjecture where the user enters a number (integer). The code is just a simple function that calls itself. i is a list that should have every number that the function calculates appended to it. I'm new to executing Python scripts and I have tried using the IDLE shell to run the code. It asks me what number I want but when I enter a number nothing is printed? I'm sure I just need to edit a small bit of this code (or maybe it's all wrong yikes) but does anybody have any idea why my script returns nothing? Sorry about this and thanks.
Here's the code:</p>
<pre><code>l = input("Enter a number: ")
l = int(l)
i = []
def collatz(n):
    if n==1:
        return i
    if n%2 == 0:
        n = n/2
        i.append(n)
        return collatz(n)
    else:
        n = ((n*3) + 1) / 2
        i.append(n)
        return collatz(n)
    print(i)
collatz(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are three <code>return</code>s before your <code>print</code> and one of them is inside an <code>else</code> statement, which means that at least one of them will be executed, so your <code>print</code> won't even be reached to be executed, you should move right after the function definition to see something:</p>
<pre><code>def collatz(n):
    print(i) # &lt;= print here
    if n==1:
        ....
</code></pre>
<p>See more about the <a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer"><code>return statement</code></a>. A snippet:</p>
<blockquote>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer"><code>return</code></a> leaves the current function call with the expression list (or <code>None</code>) as return value.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As others have mentioned, all of the execution paths in your function end in a <code>return</code> statement, so that <code>print</code> call is unreachable. So if you want each value of <code>n</code> or <code>i</code> to be printed you need to move the call to somewhere that it <em>will</em> be reachable. ;)</p>
<p>Also, there's a little bit of redundancy in that code. You don't need    </p>
<pre><code>i.append(n)
return collatz(n)
</code></pre>
<p>in both the <code>if</code> and <code>else</code> branches, you can move them outside the <code>if...else</code> block.</p>
<p>Here's a modified version of your code. I've also changed the <code>/</code> operators to <code>//</code> so that the results of the divisions will be integers.</p>
<pre><code>i = []

def collatz(n):
    print(n)
    if n==1:
        return i
    if n%2 == 0:
        n = n // 2
    else:
        n = ((n*3) + 1) // 2
    i.append(n)
    return collatz(n)

# Test

print(collatz(12))
</code></pre>
<p><strong>output</strong></p>
<pre><code>12
6
3
5
8
4
2
1
[6, 3, 5, 8, 4, 2, 1]
</code></pre>
</div>
<span class="comment-copy">The <code>print</code> statement is unreachable - when do you anticipate your program reaching it?</span>
<span class="comment-copy">BTW, since you are dealing with integers you should be using the <code>//</code> floor division operator instead of <code>/</code>, which always returns a float in Python 3.</span>
<span class="comment-copy">Unless you are doing this as an exercise in recursion, a recursive Collatz is probably a bad idea. You will blow the stack with (some) larger numbers.</span>
