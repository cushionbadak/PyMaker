<div class="post-text" itemprop="text">
<p>Similar questions to this have been asked and answered but none dealt with this specific question.</p>
<pre><code>global EXAMPLE_GLOBAL
EXAMPLE_GLOBAL = True


def Setup():
    if EXAMPLE_GLOBAL:
        try:
            #Doing some file io here
        except:
            global EXAMPLE_GLOBAL
            EXAMPLE_GLOBAL = False
</code></pre>
<p>When running this code (Not this code exactly, this is just stripped down to the basic logic.) I get:</p>
<blockquote>
<p>SyntaxWarning: name 'EXAMPLE_GLOBAL' is used prior to global declaration
  global EXAMPLE_GLOBAL</p>
</blockquote>
<p>I was under the impression that to change the value of a global variable you must first specify that you were referencing the global variable when you went to a new scope. Do I need the second 'global EXAMPLE_GLOBAL' in order to make the change to the global or is using the same identifier enough?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I was under the impression that to change the value of a global variable you must first specify that you were referencing the global variable when you went to a new scope</p>
</blockquote>
<p>Yes, that's right. But conventionally, the global statement should go at the opening of that scope. In other words, put it at the top of your function.</p>
<pre><code>EXAMPLE_GLOBAL = True

def Setup():
    global EXAMPLE_GLOBAL
    if EXAMPLE_GLOBAL:
        try:
            #Doing some file io here
        except:
            EXAMPLE_GLOBAL = False
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer">documentation</a> explicitly recommends against referring to a name in a block before using it in a global statement:</p>
<blockquote>
<p>Names listed in a global statement must not be used in the same code block textually preceding that global statement.</p>
</blockquote>
<p>In CPython, violating this principle only produces a warning instead of an error because the parser ignores the specific position of the global directive within a block, but that's an implementation detail and could change in the future.</p>
<p>(Also note that you don't need the <code>global</code> statement on the first line. Every name at the top-level scope is already effectively global in that scope.)</p>
</div>
<span class="comment-copy">put <code>global EXAMPLE_GLOBAL</code> on the first line of <code>Setup()</code> to get rid of the warning</span>
<span class="comment-copy">It's warning you that some of your usages of <code>EXAMPLE_GLOBAL</code> are before your <code>global</code> declaration inside the function. Your code would be clearer if <code>global EXAMPLE_GLOBAL</code> was at the start of your function.</span>
<span class="comment-copy">You are amazing, thank you. In your note are you saying that all globals declared at top level scope don't need to be re-specified at lower scopes? Because this program I'm writing has 10+ globals I'm using in a similar way.</span>
<span class="comment-copy"><i>"are you saying that all globals declared at top level scope don't need to be re-specified at lower scopes"</i> I'm saying the opposite: globals at lower scopes don't need to be declared* at the top level scope. A <code>global</code> statement that's not inside a function/class/etc definition is effectively useless. A global statement effectively says "while we're in this scope, treat this name as though it were in the top level scope", but if you're already in the top level scope, that doesn't change anything. (*and by "declare" I mean "put inside a <code>global</code> statement, not "initially assigned to")</span>
