<div class="post-text" itemprop="text">
<p>Let's say I had a bunch of objects, fathers. So each father would have a bunch of kids. An unbounded number of kids. For each 1 father, there are many kids.</p>
<p>I want to sort each father by the average age of kids.</p>
<p>Since the number of kids can change and their age will increase, I wouldn't necessarily want to hard-code the average age into the father model. I need to have that value dynamically available, cached somehow so it can be quickly sorted by average child age when looking at 100,000 fathers.</p>
<p>Any ideas on how do this efficiently? I'm sure lambdas wouldn't be fast enough or practical.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Calculate and cache (hard-code) "average date of birth" instead of average age and sort by it. It will give you the same result and it won't change unless father gets another kid, then you can just recalculate it for that father. You can find <em>average date</em> like so:</p>
<pre><code>from datetime import datetime

kids_dobs = ['1/2/1990', '3/4/1993', '5/6/1995']
dates = [datetime.strptime(dob, "%d/%m/%Y") for dob in kids_dobs]
timestamps = [date.timestamp() for date in dates]
avg_timestamp = sum(timestamps) / len(timestamps)
avg_date = datetime.fromtimestamp(avg_timestamp)

print(avg_date.strftime("%d/%m/%Y"))  # 02/12/1992
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use sorted and lambda,for example:</p>
<pre><code>sorted(father_list, key=lambda: father: avg_children(father))
</code></pre>
<p>and u can check this:
<a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">How to sorting</a></p>
</div>
<span class="comment-copy"><i>I'm sure lambdas wouldn't be fast enough or practical</i>: then cache the value on the <code>Father</code> instance every time the number of children changes. Sorting never required a hard-coded field value.</span>
<span class="comment-copy">Right, but with 100,000 objects, won't this take like over a minute to run a sort?</span>
