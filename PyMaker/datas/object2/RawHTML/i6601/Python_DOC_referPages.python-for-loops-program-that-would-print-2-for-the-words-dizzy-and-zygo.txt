<div class="post-text" itemprop="text">
<p>I'm confused as to how the words relate to each other, and how that number is calculated in the algorithm. Here's the full problem (I'm supposed to use for loops primarily.  I think I'm supposed to avoid built-in functions.)  </p>
<p>"
For this task, we are providing you several examples of how this program should behave. We are not going to tell you exactly what the program code should contain: but your program should work as follows:</p>
<p>The user enters two strings (on two separate lines) "dizzy" and "zygote". Your program prints out: 2.</p>
<p>The user enters two strings (on two separate lines) "essentialness" and "essence". Your program prints out: 3.</p>
<p>The user enters two strings (on two separate lines) "platypus" and "saltwater crocodile". Your program prints out: 1.</p>
<p>The user enters two strings (on two separate lines) "bar" and "battery". Your program prints out: 0.</p>
<p>The above are examples: your program should behave similarly for any string input. Here are some more example runs:</p>
<blockquote>
<blockquote>
<blockquote>
<p>RESTART: 
      type something, then press return/enter: <strong>definite</strong>
      now type something else, then press return/enter again: <strong>finite</strong>
      the calculated output is <strong>6</strong></p>
<p>RESTART: 
      type something, then press return/enter: <strong>make</strong>
      now type something else, then press return/enter again: <strong>matt</strong>
      the calculated output is <strong>0</strong></p>
<p>RESTART: 
      type something, then press return/enter: <strong>bassline</strong>
      now type something else, then press return/enter again: <strong>linebass</strong>
      the calculated output is <strong>4</strong></p>
<p>RESTART: 
      type something, then press return/enter: <strong>cringing</strong>
      now type something else, then press return/enter again: <strong>ingenious</strong>
      the calculated output is <strong>3</strong></p>
<p>RESTART: 
      type something, then press return/enter: <strong>banana</strong>
      now type something else, then press return/enter again: <strong>nanaimo</strong>
      the calculated output is <strong>4</strong></p>
<p>RESTART: 
      type something, then press return/enter: <strong>superfluous</strong>
      now type something else, then press return/enter again: <strong>tossup</strong>
      the calculated output is <strong>0</strong></p>
<p>"</p>
</blockquote>
</blockquote>
</blockquote>
<p>Here's what I tried (it's not complete + doesn't give the answer):</p>
<pre><code>word1 = input("Please enter a word! ")
word2 = input("Please enter another word! ")
count = 0
backword1 = word1[::-1] 

len1 = int(len(word1))

len2 = int(len(word2))

for i in word1:
   word1[:-1]
   for i in word2:
      word2[1:len2]
         if word1[
</code></pre>
<p>print(count)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do it like this:</p>
<pre><code>def count_back_front(
        text1,
        text2):
    """
    Count the common chars backward for 1st and forward for 2nd strings.

    Args:
        text1 (str): The first input.
        text2 (str): The second input.

    Returns:
        result (int): The number of common characters.

    Examples:
        &gt;&gt;&gt; count_back_front('definite', 'finite')
        6
        &gt;&gt;&gt; count_back_front('make', 'matt')
        0
        &gt;&gt;&gt; count_back_front('bassline', 'linebass')
        4
        &gt;&gt;&gt; count_back_front('cringing', 'ingenious')
        3
        &gt;&gt;&gt; count_back_front('banana', 'nanaimo')
        4
        &gt;&gt;&gt; count_back_front('superfluous', 'tossup')
        0
    """
    for i in range(min(len(text1), len(text2)), -1, -1):
        # : uncomment the following line to see how it works
        # print(i, text1[-i:], text2[:i])
        if text1[-i:] == text2[:i]:
            break
    return i


# get the input data
text1 = input('Please enter first word:  ')
text2 = input('Please enter second word: ')

# calculate the "riddle" number
count = count_back_front(text1, text2)
print('Common chars back/front: {}'.format(count))
</code></pre>
<p>The idea is to:</p>
<ul>
<li>define an index <code>i</code> which start from the maximum length of the two common string and ends at 0 (in <code>range</code> the <code>stop</code> <a href="https://docs.python.org/3/library/stdtypes.html?highlight=range#range" rel="nofollow noreferrer">extreme is excluded</a>, hence you have to use <code>-1</code> as second argument) in <code>-1</code> steps.</li>
<li>check if the last <code>i</code> characters of the first string match the first <code>i</code> characters of the second string: if they do, we can exit the loop</li>
<li>the value of <code>i</code> at the end of the loop will tell us how chars are in common.</li>
</ul>
<p>Notes:</p>
<ul>
<li>I used a function to better separate the code actually doing the computation from the input/output part.</li>
<li>I provided you with a decent <em>docstring</em> (enclosed in <code>"""</code>) in <a href="https://stackoverflow.com/questions/3898572/what-is-the-standard-python-docstring-format#24385103">Google style</a> (it is good practice to always have one).</li>
<li>The code in the <code>Examples</code> section can be <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">tested automatically</a>.</li>
</ul>
</div>
<span class="comment-copy">(1) I have to admit that the first "riddle" is annoying at best. (2) It looks like the the function needs to output the the number of character that are in common between the end of the last string and the beginning of the second string. (3) As you said the program will not work, but can you provide some rationale behind the code you wrote?</span>
<span class="comment-copy">First it asks the user to input 2 different words.  Then I put a variable that makes the first word backwards, so that it could be analyzed from back to front while the other one is analyzed from front to back (I'm guessing that's what's supposed to happen?).  Then it finds the lengths.  I wanted the for loop to compare the two words at each individual character, but then I got super confused...</span>
<span class="comment-copy">the underlying idea seems valid, but for example I do not quite get why you need the first word to be backward and what is the rationale behind some lines like <code>word1[:-1]</code> as they have no effect.</span>
