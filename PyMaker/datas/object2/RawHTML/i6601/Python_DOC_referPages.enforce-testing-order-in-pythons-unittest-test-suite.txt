<div class="post-text" itemprop="text">
<p>I have written code that finds all of the tests that can be run in a package and gathers them into a single test suite. The only thing is that some of the tests are dependent on other tests already being run.</p>
<p>That might seem like bad test architecture but what I'm testing is the startup and shutdown of an application. So I have tests that makes sure everything comes to life appropriately, and then another set of tests that make sure that everything is cleaned up properly. Obviously though, I can't run the shutdown tests until the startup tests have finished. </p>
<p>Is it possible within Python's unittest to say "only run this test if the following is true, otherwise run other tests and come back to me"?</p>
<p>I understand that I could enforce this ordering by explicitly saying run the startup tests, now run the shutdown tests. But I'm using test discovery so that you can write more tests without explicitly having to invoke them so I am trying to avoid doing that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>unittest</code> module requires each test to be able to run independently:  no dependence on other tests running before or after. However, you can depend on other code to run before or after each test by adding <code>setUp()</code> or <code>tearDown()</code> methods to a test class. You can also depend on other code to run before or after a <em>group</em> of tests with <a href="https://docs.python.org/3/library/unittest.html#class-and-module-fixtures" rel="nofollow noreferrer"><code>setUpClass()</code>, <code>setUpModule()</code>, and their tear downs</a>.</p>
<p>I think there's even more flexibility in the PyTest fixtures, but I haven't used them much.</p>
</div>
<span class="comment-copy">If the tests are dependent on one another, they're not unit tests. What you want is an integration test. You should probably write your own testing framework to do this, instead of using <code>unittest</code>, which is specifically for unit testing.</span>
<span class="comment-copy">Have a look at this question: <a href="https://stackoverflow.com/questions/3843171/unit-testing-with-dependencies-between-tests" title="unit testing with dependencies between tests">stackoverflow.com/questions/3843171/â€¦</a> there seems to be demand and supply for those cases.</span>
<span class="comment-copy">Yeah, integration testing is an important part of testing your application. There <i>are</i> packages like <a href="https://pythonhosted.org/proboscis/" rel="nofollow noreferrer"><code>proboscis</code></a> that let tests depend on one another, but this just means a test is only run if the previous test passed. In general you can't (and shouldn't!) pass state between unit tests. You should use an integration testing framework for this. One option is to write a single "unit test" which is an integration test, to use alongside your actual unit tests.</span>
<span class="comment-copy">Unless what I said about <code>proboscis</code> is actually exactly what you're looking for, and you're not passing state between tests. In which case, use that!</span>
