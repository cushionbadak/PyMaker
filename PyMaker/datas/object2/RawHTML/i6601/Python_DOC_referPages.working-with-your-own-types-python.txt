<div class="post-text" itemprop="text">
<p>I am trying to understand the following topic and have some outstanding questions. Can anyone help me?:</p>
<pre><code>class MyObj(object):
    def __init__(self, s):
        self.s = s
    def __repr__(self):
        return '&lt;MyObj(%s)&gt;' % self.s
</code></pre>
<p>====================================</p>
<pre><code>import json
import json_myobj

obj = json_myobj.MyObj('instance value goes here')

print 'First attempt'
try:
    print json.dumps(obj)
except TypeError, err:
    print 'ERROR:', err

def convert_to_builtin_type(obj):
    print 'default(', repr(obj), ')'
    # Convert objects to a dictionary of their representation
    d = { '__class__':obj.__class__.__name__, 
          '__module__':obj.__module__,
          }
    d.update(obj.__dict__)
    return d

print
print 'With default'
print json.dumps(obj, default=convert_to_builtin_type)
</code></pre>
<p>Question: what is the purpose of the following code?</p>
<pre><code>d = { '__class__':obj.__class__.__name__, 
      '__module__':obj.__module__,
      }
d.update(obj.__dict__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think there are two things you need to know to understand this code snippet.</p>
<ol>
<li>JSON serialization and deserialization.</li>
</ol>
<p>JSON is a data-exchange format. Particularly it is text-based, which means if you want to save your data into a text file, you have to determine how to represent your data as the text (The serialization process). Of course, when you load data from a text file, you also need to determine how to parse the text into the memory structure (The deserialization process). Luckily, by default, the <code>json</code> module of python would handle most of the built-in data types, e.g., scalar type, list, dict and etc. But for your case, you have created your own data type, thus you have to specify how to serialize your own data type. This is what function <code>convert_to_builtin_type</code> does.</p>
<ol start="2">
<li>Python data model</li>
</ol>
<p>Now we come across the problem how to serialize the self-defined object <code>Myobj</code>. There is no uniform answer for this question, but the base line is that you can recover your object (deserialize) by the serialized text. In your case:</p>
<pre><code>d = { '__class__':obj.__class__.__name__, 
      '__module__':obj.__module__,
      }
d.update(obj.__dict__)
</code></pre>
<p>The <code>obj.__dict__</code> is a built-in dictionary that stores attributes of <code>obj</code>. You may read the python documentation <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Data Model</a> to understand it. The intention here is try to give enough information to recover <code>obj</code>. For example:</p>
<ul>
<li><code>__class__=&lt;c&gt;</code> provides the name of the class</li>
<li><code>__module__=&lt;m&gt;</code> provides the module to find the class.</li>
<li><code>s=&lt;v&gt;</code> provides the attribute and value of <code>Myobj.s</code></li>
</ul>
<p>With these three, you can recover the object you previously stored. For these hidden (built-in) attributes starting with <code>__</code>, you need to check the python document.</p>
<p>Hope this would be helpful.</p>
</div>
<span class="comment-copy">this is python's object model. take a look at this one: <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html</a></span>
<span class="comment-copy">You basically extract obj properties as a dict, that is my reading.</span>
<span class="comment-copy">I really appreciate your response. Reading it slowly to understand the same. Below is the link which i was trying to understand above: <a href="https://pymotw.com/2/json/" rel="nofollow noreferrer">pymotw.com/2/json</a></span>
<span class="comment-copy">Yes. The link you provided explains your problem as well. Keep in mind that JSON is a text-based data-exchange format, you need to handle the encode and decode process of your own data type.</span>
