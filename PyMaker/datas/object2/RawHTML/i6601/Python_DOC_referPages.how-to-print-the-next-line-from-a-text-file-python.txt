<div class="post-text" itemprop="text">
<p>I am trying to print two lines of text from a text file in python which are next to eachother on a separate line. So the text file looks like this:</p>
<pre><code>Apples
Oranges
Pears
Lemons
</code></pre>
<p>And if someone inputs Apples I would like the program to print out:</p>
<pre><code>Apples
Oranges
</code></pre>
<p>Here is the code I have so far:</p>
<pre><code>file = open('Fruit.txt',"r")
for line in file:
    if InputText in line:
        print(line)
        print(line+1)
        return
file.close() 
</code></pre>
<p>Of course the variable <code>line+1</code> isn't correct but I have left it there to illustrate that the next line of text must also be printed.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your line matches you can call <code>next(input)</code> to generate the following line.
Also if you use the <code>with</code> context manager, you remove the need to close the file and this will clean up the code a little bit</p>
<pre><code>InputText = 'Pears'

with open('Fruit.txt', "r") as input:
    for line in input:
        if InputText in line:
           print(line, end='')
           print(next(input), end='')
           break

&gt;&gt; Pears
&gt;&gt; Lemons
</code></pre>
<p>Or with your original solution:</p>
<pre><code>InputText = 'Apples'

infile = open('Fruit.txt',"r")
for line in infile:
    if InputText in line:
        print(line, end='')
        print(next(infile), end='')
        return
infile.close()

&gt;&gt; Apples
&gt;&gt; Oranges
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a few things that you should consider changing in your code to make it work properly. Starting from the top:</p>
<ol>
<li><p>Consider using the file you open as a <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">context manager</a> in a <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer"><code>with</code></a> statement. To quote the <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">explanation in the docs</a>:</p>
<blockquote>
<p>It is good practice to use the <code>with</code> keyword when dealing with file objects. The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. Using <code>with</code> is also much shorter than writing equivalent <code>try-finally</code> blocks.</p>
</blockquote></li>
<li><p>The file object you are iterating over is an iterator (who'da thunk it?). That means that you can apply the builtin <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> function to it. This will work even if you do not break out of the loop because of the lazy iteration that file objects do. In general, unless you really know what you are doing, calling <code>next</code> on the iterator within a <code>for</code> loop may cause very unexpected results.</p></li>
<li><p>Each line (except possibly the last) will contain a trailing <code>\n</code> character. <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a> normally appends another newline to the strings that it prints. To avoid the double newline, you can add <code>end=''</code> to the arguments of <code>print</code>. <code>end</code> is a keyword-only argument that determines the line ending that <code>print</code> appends to its output.</p></li>
<li><p>You need to clarify what you want to happen when the user enters the word on the last line of the file: <code>'Lemons'</code> in your example. At the moment, using <code>next</code> will raise a <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="nofollow noreferrer"><code>StopIteration</code></a> error. You can catch the error, transform it, or just add a blank line to the end of the file to make sure it does not happen.</p></li>
<li><p>The use of <a href="https://docs.python.org/3/tutorial/controlflow.html?highlight=return%20statement#defining-functions" rel="nofollow noreferrer"><code>return</code></a> is illegal in a module-level loop. If your code is not in a function or method, you should use <a href="https://docs.python.org/3/tutorial/controlflow.html?highlight=return%20statement#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer"><code>break</code></a> to get out of the loop instead of <a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer"><code>return</code></a>.</p></li>
</ol>
<p>Here is what all that looks like in combination:</p>
<pre>
<b>with open('Fruit.txt',"r") as file:</b>
    for line in file:
        if InputText in line:
            print(line<b>, end=''</b>)
            print(<b>next(file)</b><b>, end=''</b>)
            <b>break</b>
</pre>
</div>
<span class="comment-copy">If your code appears in a function, you should make that clear in your example you give. Otherwise, <code>return</code> is illegal.</span>
<span class="comment-copy">A more robust way is <code>next(input)</code>.</span>
<span class="comment-copy">When I Use your suggestion I get the error: TypeError: 'builtin_function_or_method' object is not an iterator</span>
<span class="comment-copy">@RipseedOil rename your variable that you've named <code>file</code> to <code>infile</code> and make sure you call <code>next(infile)</code> - see updates</span>
<span class="comment-copy">just call <code>next(infile)</code> again on the next line, each time you call <code>next(infile)</code> it will read the next line of the file. No need to do <code>next(next())</code></span>
<span class="comment-copy">@AK47. Go ahead and fix up your answer. I think it is actually the better one. I was honestly just point "accumulating". SO won't let me use the word that starts with a "w".</span>
<span class="comment-copy">Great in-depth answer! Wouldn't calling <code>line.strip()</code> be cleaner than <code>end=''</code>?</span>
<span class="comment-copy">@JoeIddon. It really depends on what you are trying to do.</span>
<span class="comment-copy">@Joelddon: <code>line.strip()</code> creates a new string that you don't need, but it really doesn't matter.</span>
<span class="comment-copy">@StevenRumbalski. Technically, I think <code>print</code> is going to create a new string anyway, but yes, you do technically save a tiny bit of memory this way.</span>
<span class="comment-copy">One thing to consider is what happens if <code>InputText</code> matches the last line of the file.  The call to <code>next(file)</code> will raise <code>StopIteration</code>. That can avoided with <code>next(file, "some sensible default")</code> or caught by putting it in a try-except clause.</span>
