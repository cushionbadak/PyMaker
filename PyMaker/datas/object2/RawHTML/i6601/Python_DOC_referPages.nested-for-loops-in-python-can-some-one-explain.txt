<div class="post-text" itemprop="text">
<p>I'm studying how to use for loops and so on and I'm trying to come up with a way to make a string of similar characters sort itself so that no characters are repeated</p>
<pre><code># string of characters
chars = 'abbbababa'
# my idea was to make it an enumerated string
charsnum = enumerate(chars)
# while doing that I discovered the following
chars = 'babbbaba'
for i in charsnum:
    for j in charsnum:
        for z in charsnum:
            for k in charsnum:
                print(i,j,z,k)
# each time I add a loop the string becomes shorter 
(0, 'b') (1, 'a') (2, 'b') (3, 'b')
(0, 'b') (1, 'a') (2, 'b') (4, 'b')
(0, 'b') (1, 'a') (2, 'b') (5, 'a')
(0, 'b') (1, 'a') (2, 'b') (6, 'b')
(0, 'b') (1, 'a') (2, 'b') (7, 'a')
</code></pre>
<p>I know that the first loop <strong>iterates</strong> through all the values in <em>charsnum</em>, but what are the second, third, and so on for loops iterating through? 
Also, what could be a good solution to making my string 'babbbaba' in to a string like 'bababababa' or 'ababababa' where no values repeat. </p>
</div>
<div class="post-text" itemprop="text">
<p>You are asking several <code>for</code> loops to <strong>all</strong> iterate over the same, single iterator. You did not create copies, they share one object. </p>
<p>The outer loop advances the <code>charsnum</code> object by one step, then the next <code>for</code> loop advances it once to start <em>its</em> iteration, and so on. The innermost <code>for</code> loop takes the remaining items to iterate over, and by the time you go back up to the <code>for z</code> loop there is nothing left to iterate over.</p>
<p>You can do the same thing, advancing the iterator like <code>for</code> does, with the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code> function</a>:</p>
<pre><code>&gt;&gt;&gt; chars = 'abbbababa'
&gt;&gt;&gt; charsnum = enumerate(chars)
&gt;&gt;&gt; i = next(charsnum)
&gt;&gt;&gt; j = next(charsnum)
&gt;&gt;&gt; z = next(charsnum)
&gt;&gt;&gt; k = next(charsnum)
&gt;&gt;&gt; i, j, z, k
((0, 'a'), (1, 'b'), (2, 'b'), (3, 'b'))
&gt;&gt;&gt; next(charsnum)  # next k value in the innermost loop
(4, 'a')
&gt;&gt;&gt; # etc. etc.
</code></pre>
<p>You could create separate <code>enumerate()</code> objects for each <code>for</code> loop:</p>
<pre><code>for i in enumerate(chars):
    for j in enumerate(chars):
        for z in enumerate(chars):
            for k in enumerate(chars):
                print(i,j,z,k)
</code></pre>
<p>but that's just more work than you need. For nested loops repeating the same iterable, use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> and tell it to repeat; it'll keep copies as needed:</p>
<pre><code>from itertools import product

for i, j, z, k in product(enumerate(chars), repeat=4):
    print(i, j, z, k)
</code></pre>
<p>This won't eliminate repeated characters, however; this produces the cartesian product of 4 <code>(index, char)</code> tuples out of all possible such tuples from your <code>char</code> string.</p>
<p>You probably want to create permutations form the unique letters, and string out the patterns those make into something the same length:</p>
<pre><code>from itertools import permutations

for pattern in permutations(set(chars)):
    repeat = (len(chars) + 1) // len(pattern)
    result = (''.join(pattern) * repeat)[:len(chars)]
    print(result)
</code></pre>
<p>This produces</p>
<pre><code>babababab
ababababa
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The "problem" is not at the <code>for</code> loops, but at <code>charsnum</code>. The object <code>charsnum</code> is a generator that yelds the next value everytime it is called.</p>
<p>In the first <code>for</code> loop (<code>for j in charsnum</code>) it yelds the first item in <code>chars</code> but in the inner loop (<code>for z in charsnum</code>) <code>charsnum</code> will yeld the next item in <code>chars</code>. So this inner loop will never access the first item in <code>chars</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question and example are really confusing, I <strong>think</strong> this is what you are looking for.</p>
<p>A way easier way to do this is to use a list comprehension, which will iterate through your set of characters in a more compact, pythonic manner.</p>
<pre><code>chars = 'abbbababa'
print( [i for i in chars] )
</code></pre>
<p>Result:</p>
<pre><code>a
b
b
b
a
b
a
b
</code></pre>
<p>Now you can iterate over your indices to check if they are equal to the previous.</p>
<pre><code>win = [i for i in chars]      # Convert chars string to a list of chars
last = ''                     # Create a variable to hold our last result
for i in win:
    if i != last:
        print(i)
    last = i                  # Set last to equal the last char iterated
</code></pre>
<p>Result:</p>
<pre><code>a
b
a
b
a
b
a
</code></pre>
<p>Or if you want to print them out in a single string...</p>
<pre><code>win = [i for i in chars]      # Convert chars string to a list of chars
last = ''                     # Create a variable to hold our last result
newchars = ''
for i in win:
    if i != last:
        newchars += i
    last = i                  # Set last to equal the last char iterated
print(newchars)
</code></pre>
<p>Result</p>
<pre><code>abababa
</code></pre>
</div>
<span class="comment-copy">You basically enter the very same loop all the time, it is not meaningful.</span>
<span class="comment-copy">Hello, thank yo for the help! I'm somewhat new to python and every time problems get more complex and with no computer science background it is a little bit hard. this last part of your code [:len(chars)] in the permutations, it is removing characters from char right because you are slicing it?</span>
<span class="comment-copy">@MauricioCastaneda: yes; the slice is needed because you the number of unique characters in <code>chars</code> does not necessarily divide cleanly into the length of <code>chars</code>. In your example <code>chars</code> is length 9, with 2 unique characters. So the code generates output of length 10 (5 repetitions of 2 characters), then slices that back to 9.</span>
