<div class="post-text" itemprop="text">
<p>I have a list of elements with certain values of type float. I want to iterate over the elements and count them if they are over a certain value, but also only count them if they appear over the treshold value a minimum_count of times. So for example, if a have following input: </p>
<pre><code>list_of_values = [2.0, 2.0, 2.0, 2.0, 0, 0, 2.0, 2.0, 2.0, 0, 0]
treshold_value = 1.0
minimum_count = 4
</code></pre>
<p>the answer should be 4, since the treshold_value 1.0 is consecutively exceeded 4 times only at indexes 0-3. I now have the code below, </p>
<pre><code>for value in list_of_values:
    if value &gt;= treshold_value:
        counter += 1
    if counter &gt;= (minimum_count):
        time_use += 1
    if value &lt; min_treshold_value:
        counter = 0
print(time_use)
</code></pre>
<p>I know there should be some pythonic way to achieve this :)</p>
<p>Edit: The sum of all consecutive subsequence values over the threshold should be counted.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> to help:</p>
<pre><code>from itertools import groupby

def count_runs(list_of_values, threshold_value=1.0, minimum_count=4):
    count = 0
    for k, g in groupby(list_of_values, key=lambda x: x &gt;= threshold_value):
        if k:
            g = list(g)
            if len(g) &gt;= minimum_count:
                count += len(g)
    return count

&gt;&gt;&gt; count_runs([2.0, 2.0, 2.0, 0.0, 0, 0, 2.0, 2.0, 2.0, 0, 0])
0
&gt;&gt;&gt; count_runs([2.0, 2.0, 2.0, 2.0, 0, 0, 2.0, 2.0, 2.0, 0, 0])
4
&gt;&gt;&gt; count_runs([2.0, 2.0, 2.0, 2.0, 0, 0, 3.0, 2.0, 2.0, 2.0, 10.0, 0, 0])
9
</code></pre>
<p>This will provide the count of the number of values that are above the threshold in groups of <code>minimum_count</code> or more. Note that it handles multiple groups that match the criteria.</p>
<p>For example the <code>groupby()</code> for the last example will return the following:</p>
<pre><code>&gt;&gt;&gt; list_of_values = [2.0, 2.0, 2.0, 2.0, 0, 0, 3.0, 2.0, 2.0, 2.0, 10.0, 0, 0]
&gt;&gt;&gt; for k, g in groupby(list_of_values, key=lambda x: x &gt;= threshold_value):
...     print(k, list(g))
... 
True [2.0, 2.0, 2.0, 2.0]
False [0, 0]
True [3.0, 2.0, 2.0, 2.0, 10.0]
False [0, 0]
</code></pre>
<p>Any group of 1 or more values &gt;= the threshold will appear in a group with key <code>True</code>. Only those with a length &gt;= the minimum count will be considered further, where its length will be tallied with other such groups.</p>
<p>This code can be written more succinctly, and far less readably, like this:</p>
<pre><code>def count_runs(list_of_values, threshold_value=1.0, minimum_count=4):
    return sum(count for count in (len(list(g)) for k, g in groupby(list_of_values, key=lambda x: x &gt;= threshold_value) if k) if count &gt;= minimum_count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following use of <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> with a conditional generator and <a href="https://docs.python.org/2/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> with appropriate key function should work:</p>
<pre><code>from itertools import groupby

len(max((list(g) for k, g in groupby(list_ov, key=lambda x: x &gt; threshold) if k), key=len))
</code></pre>
<p><code>groupby</code> groups an iterable by consecutive identical values wrt to the key function. It produces pairs of the key value and according sub-iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p>just iterate over the list and create a dictionary with key = the float number and value = the number of times you encounter this number. and only add to dict floats that are greater then threshold . something like this:</p>
<pre><code>d = {}
for f in   list_of_values :
    if f &gt; treshold:
        if d.get(f,False):
             d[f] +=1
        else:
             d[f] = 1
max = 0
for k,v in d.iteritems():
    if v&gt; max:
        max = v

return max
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you don't care about the order. In this case, <code>groupby</code> isn't correct because it only groups adjacent elements.</p>
<p>You could use a Counter and two list comprehensions to filter values:</p>
<pre><code>list_of_values = [2.0, 2.0, 2.0, 2.0, 0, 0, 3.0, 2.0, 2.0, 2.0, 10.0, 0, 0]
threshold_value = 1.0
minimum_count = 4

from collections import Counter
counter = Counter([x for x in list_of_values if x &gt; threshold_value])
print(counter)
# Counter({2.0: 7, 3.0: 1, 10.0: 1})
print([(x, count) for x, count in counter.items() if count &gt; minimum_count])
# [(2.0, 7)]
</code></pre>
</div>
<span class="comment-copy">what if the <code>list_of_values</code> has <code>1.0</code> as the 1st item? what should be the result?</span>
<span class="comment-copy">Then the counter is incremented by 1, since 1.0 is &gt;= treshold_value. All values &lt; treshold_value should be ignored.</span>
<span class="comment-copy">What if there is more than one run of numbers that satisfy the conditions, e.g. <code>[2.0, 2.0, 2.0, 2.0, 0, 0, 3.0, 2.0, 2.0, 2.0, 10.0, 0, 0]</code>? Should the result be 4, 5, or 9?</span>
<span class="comment-copy">In this case the result should be 9.</span>
<span class="comment-copy">So it's the index for the last appearance of the most represented value over <code>threshold</code>?</span>
<span class="comment-copy">LOL, on a holiday hike with wife and mother... Bored to death, posting from the app on the phone :D must have checked the wiki box</span>
<span class="comment-copy">Haha, enjoy your time with the missus.</span>
<span class="comment-copy">This answer needs some explanation to be more helpful to those that do not already know <code>groupby()</code> etc.</span>
<span class="comment-copy">How do I change this so that it sums all the subsequences over the treshold? I tried to remove the max(). Could you give a quick explanation of how this works? This is awesome, and I understand list comprehensions, but I do not understand how this works :)</span>
<span class="comment-copy">@ConSod <code>sum(len(g) for k, g ...)</code> without the key argument of max (as there is no max call anymore)</span>
<span class="comment-copy">Well, you have a syntax issue with one of your for loops too.</span>
