<div class="post-text" itemprop="text">
<p>The following python code:</p>
<pre><code>import re

line="http://google.com"
procLine = re.match(r'(?&lt;=http).*', line)
if procLine.group() == "":
    print(line + ": did not match regex")
else:
    print(procLine.group())
</code></pre>
<p>does not match successfully, and outputs the following error:</p>
<blockquote>
<p>Traceback (most recent call last):   File
  "C:/Users/myUser/Documents/myScript.py", line 5,
  in 
      if procLine.group() == "": AttributeError: 'NoneType' object has no attribute 'group'</p>
</blockquote>
<p>When I replace the regex with just .* it works fine which suggests it's the regex that is in error, however, on <a href="https://regex101.com/" rel="nofollow noreferrer">https://regex101.com/</a> when I test my regex and string for python flavor it appears to match fine.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you convert your lookbehind to a non-capturing group, this should work:</p>
<pre><code>In [7]: re.match(r'(?:http://)(.*)', line)
Out[7]: &lt;_sre.SRE_Match object; span=(0, 17), match='http://google.com'&gt;

In [8]: _.group(1)
Out[8]: 'google.com'
</code></pre>
<p>The reason a lookbeind does not work is because - as <a href="https://stackoverflow.com/questions/46501800/python-3-regex-lookbehind-not-working/46501837?noredirect=1#comment79958019_46501837">Rawing mentioned</a> - <code>re.match</code> starts looking from the <em>start</em> of the string, so a look<em>behind</em> at the <em>start</em> of a string does not make sense.</p>
<hr/>
<p>If you insist on using a lookbehind, switch to <code>re.search</code>:</p>
<pre><code>In [10]: re.search(r'(?&lt;=http://).*', line)
Out[10]: &lt;_sre.SRE_Match object; span=(7, 17), match='google.com'&gt;

In [11]: _.group()
Out[11]: 'google.com'
</code></pre>
</div>
<span class="comment-copy">You might want to use <code>search</code> instead, check <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">documentation</a>: "Note that patterns which start with positive lookbehind assertions will not match at the beginning of the string being searched; you will most likely want to use the search() function rather than the match() function"</span>
<span class="comment-copy">Thanks, this did work, and I will use this as a workaround, but I will hold off marking it as correct for now to see if someone knows why lookbehinds seem to be failing me.</span>
<span class="comment-copy">@LostCrotchet It's because <code>match</code> applies the regex at the <i>start of the string</i>. A look<i>behind</i> at the start of the string will never work.</span>
<span class="comment-copy">@Rawing It was my suspicion, but I didn't want to write that without being sure. Let me know if it's okay to add that in, or else you can create an answer.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Go ahead. I think whenever someone posts a comment instead of an answer, they're implicitly giving you permission to s̶t̶e̶a̶l̶  use it :)</span>
<span class="comment-copy">@LostCrotchet Pinging you to see this post.</span>
