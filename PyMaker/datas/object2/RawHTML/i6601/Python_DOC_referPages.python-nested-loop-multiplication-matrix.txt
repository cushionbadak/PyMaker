<div class="post-text" itemprop="text">
<p><a href="https://i.stack.imgur.com/IkZEq.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/IkZEq.png"/></a></p>
<p>Evening!</p>
<p>My goal is to get something similar to what is shown above using nested loops. I understand that nested loops are just another loop within another. I know that I must use a range for the top row and side column. However, I’m not sure how to whip up the math equation to output the factors of each number. </p>
<p>This is what I have and I’m seriously struggling. </p>
<pre><code>def main():
  for num in range(10):
    for row in range(9):
        for col in range(9):
            print(num, end=‘’)
    print()
main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The equation is a simple product, <code>x*y</code>, and note, the <code>range</code> iterates over <em>a numerical range already</em>, you don't need <code>num</code>:</p>
<pre><code>&gt;&gt;&gt; for i in range(1, 10):
...     for j in range(1, 10):
...         product = i*j
...         print(f"{product:&gt;3}", end='')
...     print() # just prints a newline
...
  1  2  3  4  5  6  7  8  9
  2  4  6  8 10 12 14 16 18
  3  6  9 12 15 18 21 24 27
  4  8 12 16 20 24 28 32 36
  5 10 15 20 25 30 35 40 45
  6 12 18 24 30 36 42 48 54
  7 14 21 28 35 42 49 56 63
  8 16 24 32 40 48 56 64 72
  9 18 27 36 45 54 63 72 81
</code></pre>
<p>I use f-strings, a nice new feature available in Python 3.6</p>
<p>See the <a href="https://docs.python.org/3.6/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs</a> for the format-specification that I used, <code>{var:&gt;3}</code>, which right justifies your string by 3 spaces. </p>
<p>Also, this is a great reference:</p>
<p><a href="https://pyformat.info/" rel="nofollow noreferrer">https://pyformat.info/</a></p>
<p>Unfortunately, there are <em>three</em> seperate ways of doing string formatting in Python. Quite frankly, f-strings are rapidly becoming my preferred way, and I think it's great if you don't abuse them, since they can take any <em>expression</em></p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest doing this in two steps (it's just more clear). First, generate the 2D matrix, and then print it. To generate the matrix, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow noreferrer">nested list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; M = [[row*col for col in range(1,10)] for row in range(1,10)]
</code></pre>
<p>This is equivalent to the double <code>for</code> loop, but it's easier since you don't have to initialize the matrix <code>M</code>. These are used everywhere in Python, so get used to them quickly! It's fairly easy to understand. For example,</p>
<pre><code>&gt;&gt;&gt; [i for i in range(1,10)]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>This is what the inner loop is doing, but then it multiplies those values by the <code>row</code> value for each row for the outer row.</p>
<p>Then to print, simply loop over the rows in the matrix and <code>join</code> the row together. If you're using Python 3.6+, you can use <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-strings</code> (*literal string interpolation)</a> for printing:</p>
<pre><code>&gt;&gt;&gt; for row in M:
...     print(''.join([f'{val:&gt;4}' for val in row]))
</code></pre>
<p>If you're on an older version of Python, then use string formatting:</p>
<pre><code>&gt;&gt;&gt; for row in M:
...     print(''.join(['{val:&gt;4}'.format(val=val) for val in row]))
</code></pre>
<p>In both cases, <code>:&gt;4</code> means to use a string of fixed width at 4 aligned right, where <code>&gt;</code> means right-align, and <code>4</code> is the fixed width. These both result in:</p>
<pre><code>   1   2   3   4   5   6   7   8   9
   2   4   6   8  10  12  14  16  18
   3   6   9  12  15  18  21  24  27
   4   8  12  16  20  24  28  32  36
   5  10  15  20  25  30  35  40  45
   6  12  18  24  30  36  42  48  54
   7  14  21  28  35  42  49  56  63
   8  16  24  32  40  48  56  64  72
   9  18  27  36  45  54  63  72  81
</code></pre>
<p>But to do it in a single step, not storing the matrix <code>M</code>, you can simply do:</p>
<pre><code>print('\n'.join([''.join([f'{row*col:&gt;4}' for col in range(1,10)]) for row in range(1,10)]))
</code></pre>
<p>Note that <code>join</code> here joins strings together. So in the inner loop, it's joining together all the numbers <code>row*col</code> with their fixed-width right-aligned representation for each column inside a row, and then it's joining together those rows with a new line separator for each row.</p>
</div>
<span class="comment-copy">So the first column is just <code>range(1,10)</code> right? Then the second column is just <code>range(1,10)</code> but multiplied by two, and so on. Or you can view it row-wise instead, it's equivalent. You definitely only need two loops here, not three.</span>
<span class="comment-copy"><code>[[x*i for x in range(1,10)] for i in range(1,10)]</code> will give you the 2-D array.</span>
<span class="comment-copy"><code>print('\n'.join( [' '.join([str(x) for x in row]) for row in arr]))</code></span>
<span class="comment-copy">I’m not quite to that level yet, haha.</span>
<span class="comment-copy"><code>print('\n'.join( [' '.join(['%2d'%(x) for x in row]) for row in arr]))</code> will pretty print</span>
<span class="comment-copy">Any suggestions on how to format since I’m stuck on 3.5 at the moment? I’ve been trying to use the standard format() but I can’t seem to get it to work.</span>
<span class="comment-copy">@GoldDial sure. <code>.format</code> uses numbers that represent the "ith" argument, in the simplest approch <code>"{0:&gt;3}".format(product)</code>, or since you only have 1 argument, you can actually just use <code>"{:&gt;3}".format(product)</code></span>
