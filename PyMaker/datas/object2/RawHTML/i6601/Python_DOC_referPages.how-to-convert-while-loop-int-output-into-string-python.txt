<div class="post-text" itemprop="text">
<p>I am new to using python so I apologize if I do not use the correct terms. I am writing a simple program to where the user inputs a decimal number and the program converts it to a binary number. So far I have:</p>
<pre><code>remainder=0
decimal_number= int(input('Enter the decimal number:'))

while decimal_number != 0:
    (decimal_number, remainder) = divmod(decimal_number,2)
    print(remainder)
</code></pre>
<p>If I input 11, the output looks like</p>
<pre><code>1
1
0
1
</code></pre>
<p>My question is how can I format it to be in one single line, and how can I reverse is so it is written correctly? (ex. from the output shown above to '1011'). I am also aware there is a binary function, but I am not allowed to use it in my program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using </p>
<pre><code>import sys
remainder=0
decimal_number= int(input('Enter the decimal number:'))
    while decimal_number != 0:
    (decimal_number, remainder) = divmod(decimal_number,2)
    sys.stdout.write(str(remainder))
</code></pre>
<p>That should print everything on the same line :)</p>
<p>If you want some explanation, </p>
<p>we import the sys module first which gives us access to the stdout.write() method.</p>
<p>This method doesn't automatically insert a new line so it fits your purpose.
We also convert the integer to string since the sys.stdout.write() method will not accept integer values.</p>
</div>
<div class="post-text" itemprop="text">
<p>To print binary results in a single line use end='' as second argument in the print function to prevent printing a new line after printing the result.
Or you can declare a variable and concatenate the string value of binary result and print is out side of the loop, Like</p>
<pre><code>binaryResult = ''
while decimal_number != 0: 
    (decimal_number, remainder) = divmod(decimal_number,2)
    binaryResult += str(remainder)
print(result)
</code></pre>
<p>Good luck</p>
</div>
<div class="post-text" itemprop="text">
<p>While @Manan's answer will print the values on the same line, it is not very pythonic and does not reverse the result as you require. </p>
<p>I would suggest storing the values you need and then reversing them:</p>
<pre><code>remainder=0

decimal_number= int(input('Enter the decimal number:'))

result = ''
while decimal_number != 0: 
    (decimal_number, remainder) = divmod(decimal_number,2)
    result += str(remainder)
print(result[::-1])
</code></pre>
<p>Alternatively you could repeatedly append to the beginning of your stored result to achieve the reversal:</p>
<pre><code>remainder=0

decimal_number= int(input('Enter the decimal number:'))

result = ''
while decimal_number != 0: 
    (decimal_number, remainder) = divmod(decimal_number,2)
    result = str(remainder) + result
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a simple and clean approach</p>
<pre><code>decimal_number= input('Enter the decimal number:')
binary = bin(decimal_number)
print binary[2:]
</code></pre>
<p>Output</p>
<pre><code>Enter the decimal number:10
1010
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you run following script, be aware the indent.
you will get: 1101</p>
<pre><code>def test():
    remainder=0

    decimal_number= int(input('Enter the decimal number:'))

    while decimal_number != 0: 

        (decimal_number, remainder) = divmod(decimal_number,2)
        print (remainder,end="")         

if __name__ == '__main__':
    test()
</code></pre>
<p>If you have much much bigger binary value need to be reverse, binary tree(data structure) can help with. But list is the easiest way.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">print</a> is a function that accepts keyword <code>end</code> to specify how the end of each output should be handled. The default <code>end</code> argument is the <code>newline</code> character <code>'\n'</code>: <code>end=’\n’</code>, which we can change to be <code>''</code>, essentially nothing.</p>
<p>The other issue to print from most significant bit (LSB) to least significant bit (MSB) could be handled building a list and print it with the <a href="https://www.python.org/dev/peps/pep-0322/" rel="nofollow noreferrer">reversed</a> function.</p>
<p>Putting it all together:</p>
<pre><code>remainder=0

decimal_number= int(input('Enter the decimal number:'))

result = []

while decimal_number != 0: 
    (decimal_number, remainder) = divmod(decimal_number,2)
    result.append(remainder)

for n in reversed(result):
    print(n, end='')
print()
</code></pre>
<p>demo:</p>
<pre><code>Enter the decimal number:11
1011
</code></pre>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">probably use <code>print(remainder, end='')</code></span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/12032214/print-new-output-on-same-line">this question for some good facts about printing</a>. But basically, the <code>print</code> function takes keyword parameters <code>sep</code> and <code>end</code> that default to <code>' '</code> and <code>'\n'</code>, respectively. You can pass <code>print</code> whatever you want...</span>
<span class="comment-copy">Thank you! This gave me the output of '1101', but how do I reverse it to look like '1011'?</span>
<span class="comment-copy">since you are a beginner, I encourage you to try to solve it on your own. Try putting it in a data structure, like a <code>str</code> or even a <code>list</code> of numbers, then try figuring out how to print from the <i>end</i> of the list using a loop and indexing, i.e. <code>my_list[i]</code> is the <i>ith</i> value of <code>my_list</code>.</span>
<span class="comment-copy">@BarbaraJ, if you get the output as a list, you could use the <code>reverse</code> function on the list, like in this answer <a href="https://stackoverflow.com/q/3940128/1248974">How can I reverse a list in python?</a></span>
