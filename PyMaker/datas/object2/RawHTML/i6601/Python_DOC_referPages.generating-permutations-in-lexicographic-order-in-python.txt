<div class="post-text" itemprop="text">
<p>I am struggling with the following, is my code correct and how to test if it works?</p>
<p>Task: <strong>Take a string as a single input argument. You may assume the string consists of distinct lower case letters (in alphabetical order).</strong> You may assume the input is a string of letters in alphabetical order.</p>
<p><strong>Return a list of strings where each string represents a permutation of the input string. The list of permutations must be in lexicographic order.</strong> (This is basically the ordering that dictionaries use. Order by the first letter (alphabetically), if tie then use the second letter, etc.</p>
<ul>
<li>If the string contains a single character return a list containing that string</li>
<li>Loop through all character positions of the string containing the characters to be permuted, for each character:</li>
<li>Form a simpler string by removing the character</li>
<li>Generate all permutations of the simpler string recursively</li>
<li>Add the removed character to the front of each permutation of the simpler
word, and add the resulting permutation to a list</li>
<li>Return all these newly constructed permutations</li>
</ul>
<p>[My code]</p>
<pre><code>def perm_gen_lex(in_string):

    if (len(in_string) &lt;= 1):
        return(in_string)

    # List of all new combinations
    empty_list = []

    # All permutations
    final_perm = perm_gen_lex(in_string[1:])

    # Character to be removed
    remove_char = in_string(0)

    # Remaining part of string
    remaining_string = in_string[1:]

    for perm in final_perm[1:]:
        for i in range(len(in_string) + 1):
            return empty_list.append(perm[:i] + remove_char + perm[i:])

    return empty_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Some variation on this will get you moving:</p>
<pre><code>from itertools import product

def combinations(string):
    return [''.join(i) for i in product(string, repeat = len(string))]

print(combinations("abc"))
</code></pre>
<p>See <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.product</a></p>
</div>
<span class="comment-copy">I'd strongly recommend taking a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a>. One, in real world code, it's what you would use, but two, the documentation for it actually includes the Python code that performs the same task, which might be a useful starting point. About the only difference from your code would be that you'd replace the <code>yield</code>s with <code>append</code>s to your result <code>list</code> (because I'm guessing you haven't covered generator functions yet).</span>
<span class="comment-copy">Take a look at this. Provides good understanding on how to write such an algorithm. <a href="https://stackoverflow.com/questions/1622532/algorithm-to-find-next-greater-permutation-of-a-given-string" title="algorithm to find next greater permutation of a given string">stackoverflow.com/questions/1622532/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1622532/algorithm-to-find-next-greater-permutation-of-a-given-string">Algorithm to find next greater permutation of a given string</a></span>
<span class="comment-copy">I tried to fix you indentation, please check it. But yeah this is a duplicate.</span>
<span class="comment-copy">You just wrapped <code>itertools.product</code> and named it <code>combinations</code> (which it isn't). Actual combinations (order-insensitive) don't help with generating permutations (order-sensitive), and products of a repeated input produce many non-permutation outputs (because they contain an item from the string multiple times, while omitting others). And even if this worked, the OP asked for tips; code without explanation is the opposite of what they need.</span>
<span class="comment-copy">Thank you kindly for your constructive feedback ShadowRinger. Please accept my most humble apologies for the sub par offer of direction.</span>
<span class="comment-copy">I am so lost with what you said, I really have tried understanding this. But I am such a beginner that I cant even follow what your doing.  Im still trying to figure out how to make a unittest</span>
<span class="comment-copy">im confused about this line, What does it do ?...  return [''.join(i) for i in product(string, repeat = len(string))]</span>
<span class="comment-copy">The line is wrapped in [ and ] which means its a list comprehension statement. See here for a good explanation of what that is if you aren't familiar with list comprehension: <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">treyhunner.com/2015/12/python-list-comprehensions-now-in-color</a>. Its a very useful Python concept for writing concise and efficient code and removing for loops.</span>
