<div class="post-text" itemprop="text">
<p>Here is my code:</p>
<pre><code>from abc import ABC
from abc import abstractmethod

class Mamifiero(ABC):
    """docstring for Mamifiero"""
    def __init__(self):
        self.alimentacion = 'carnivoro'

    @abstractmethod
    def __respirar(self):
        print('inhalar... exhalar')


class Perro(Mamifiero):
    """docstring for Perro"""
    def __init__(self, ojos=2,):
        self.ojos = ojos
</code></pre>
<p>I want that <code>perro.respirar()</code> prints <code>'inhalar... exhalar'</code> but when I want to instantiate a Perro class show me this error. I want to know what is wrong with my script</p>
</div>
<div class="post-text" itemprop="text">
<p>By definition (read the docs), an abstract call is a class which CANNOT be instantiated until it has any abstract methods not overridden. So as in the Object-Oriented Programming by design.</p>
<p>You have an abstract method <code>Perro.__respirar()</code> not overridden, as inherited from the parent class. Or, override it with a method <code>Perro.__respirar()</code>, and do something there (maybe even call the parent's method; but not in case it is private with double-underscore, of course).</p>
<p>If you want to instantiate <code>Perro</code>, just do not make that method abstract. Make it normal. Because it also has some implementation, which suggests it is a normal base-class'es method, not an abstract method.</p>
</div>
<span class="comment-copy">What did you <i>think</i> making an abstract method and not implementing it was going to do?</span>
<span class="comment-copy">Did you actually read what <a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod" rel="nofollow noreferrer"><code>@abstractmethod</code></a> does?</span>
<span class="comment-copy">An implementation of an abstract method isn't meant to be inherited; rather, it can be called via something like <code>super().__respirar()</code> from a non-abstract override.</span>
