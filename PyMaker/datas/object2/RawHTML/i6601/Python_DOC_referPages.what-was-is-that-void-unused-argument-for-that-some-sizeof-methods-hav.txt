<div class="post-text" itemprop="text">
<p>Several C types in the CPython source have a <code>__sizeof__</code> method so they can present approximately accurate sizes (in bytes) for instances with <code>sys.getsizeof</code>. </p>
<p>These methods are declared <code>METH_NOARG</code> but some do have a <code>void* whatever</code> argument, for example <code>itertools.product.__sizeof__</code>:</p>
<pre class="lang-c prettyprint-override"><code>static PyObject *
product_sizeof(productobject *lz, void *unused)
{
    Py_ssize_t res;

    res = _PyObject_SIZE(Py_TYPE(lz));
    res += PyTuple_GET_SIZE(lz-&gt;pools) * sizeof(Py_ssize_t);
    return PyLong_FromSsize_t(res);
}

static PyMethodDef product_methods[] = {
    /* ... */
    {"__sizeof__",      (PyCFunction)product_sizeof,      METH_NOARGS,  sizeof_doc},
    {NULL,              NULL}   /* sentinel */
};
</code></pre>
<p>Some have it (e.g. <a href="https://github.com/python/cpython/blob/v3.6.2/Objects/typeobject.c#L3263" rel="nofollow noreferrer">1</a>, <a href="https://github.com/python/cpython/blob/v3.6.2/Modules/mmapmodule.c#L712" rel="nofollow noreferrer">2</a>), while others don't (for example: <a href="https://github.com/python/cpython/blob/v3.6.2/Modules/_pickle.c#L4067" rel="nofollow noreferrer">1</a>, <a href="https://github.com/python/cpython/blob/v3.6.2/Modules/arraymodule.c#L1722" rel="nofollow noreferrer">2</a>). It doesn't seem to make sense to have an argument when you declare it a method without arguments.</p>
<p>Given the name "unused" it seems like it probably had some meaning once but I can't figure out for what. I've tried using "git blame" and reading through some of the related issues but couldn't find anything with respect to this "unused" argument. I also thought it may be related to the "default" argument for <code>sys.getsizeof</code> but that's not passed through to the method - and what would be the point for the method to know what default was given...</p>
<p>I'm interested it: What was the purpose of the argument (and when it became obsolete why wasn't it removed).</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no specific type of function that only takes a single parameter. <a href="https://docs.python.org/3/c-api/structures.html#c.PyCFunction" rel="nofollow noreferrer"><code>PyCFunction</code></a>s always take two as its documentation states:</p>
<blockquote>
<p>Type of the functions used to implement most Python callables in C. Functions of this type take two <code>PyObject*</code> parameters and return one such value.</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/c-api/structures.html#METH_NOARGS" rel="nofollow noreferrer"><code>METH_NOARGS</code></a> case doesn't mean that the function will only have a single parameter, rather, it means that the second parameter will always be <code>NULL</code>: </p>
<blockquote>
<p>The first parameter is typically named self and will hold a reference to the module or object instance. In all cases the second parameter will be <code>NULL</code>.</p>
</blockquote>
<p>you can also see this directly in <a href="https://github.com/python/cpython/blob/2ebc5ce42a8a9e047e790aefbf9a94811569b2b6/Objects/call.c#L626" rel="nofollow noreferrer"><code>call.c:_PyMethodDef_RawFastCallKeywords</code></a> where the call is made:</p>
<pre class="lang-c prettyprint-override"><code>case METH_NOARGS:
    // After snipping checks away
    result = (*meth) (self, NULL);
</code></pre>
<p>There's a number of discussions covering this, see <a href="https://bugs.python.org/issue15402" rel="nofollow noreferrer">here</a>, <a href="https://bugs.python.org/msg42177" rel="nofollow noreferrer">here</a>
and <a href="https://bugs.python.org/issue1648268" rel="nofollow noreferrer">here</a> for some of these.</p>
<hr/>
<p>As for the versions that only have a single argument, as Martijn points out, these use argument clinic to hide that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the comments of Martijn Pieters I was able to find out why the methods have a second argument. Those listed without it had a wrapper function inside the argument clinic files (so it was just "hidden"). And it's not only relevant for <code>__sizeof__</code>, but to all <code>METH_NOARG</code> methods.</p>
<p>The <a href="https://docs.python.org/c-api/structures.html#METH_NOARGS" rel="nofollow noreferrer"><code>METH_NOARG</code> documentation</a> is:</p>
<blockquote>
<p><code>METH_NOARGS</code></p>
<p>Methods without parameters don’t need to check whether arguments are given if they are listed with the <code>METH_NOARGS</code> flag. <strong>They need to be of type <code>PyCFunction</code></strong>. The first parameter is typically named self and will hold a reference to the module or object instance. In all cases the second parameter will be NULL.</p>
</blockquote>
<p>However <a href="https://docs.python.org/c-api/structures.html#c.PyCFunction" rel="nofollow noreferrer"><code>PyCFunction</code>s</a> have two arguments:</p>
<blockquote>
<p><code>PyCFunction</code></p>
<p>Type of the functions used to implement most Python callables in C. <strong>Functions of this type take two PyObject* parameters</strong> and return one such value. If the return value is NULL, an exception shall have been set. If not NULL, the return value is interpreted as the return value of the function as exposed in Python. The function must return a new reference.</p>
</blockquote>
<p>(Emphasis mine)</p>
<p>The corresponding <code>typedef</code> can be found in <a href="https://github.com/python/cpython/blob/v3.6.2/Include/methodobject.h#L18" rel="nofollow noreferrer"><code>methodobject</code></a>:</p>
<pre class="lang-c prettyprint-override"><code>typedef PyObject *(*PyCFunction)(PyObject *, PyObject *);
</code></pre>
<p>So all methods declared inside a <code>PyMethodDef</code> require (at least) two arguments, even if they don't use the second one. That's why it's called "unused", it had never any meaning for the method itself.</p>
</div>
<span class="comment-copy">I don't know all the details yet (I don't have time right now), but the two versions without <code>*unused</code> are <a href="https://www.python.org/dev/peps/pep-0436/" rel="nofollow noreferrer">Argument Clinic</a> implementations. This is almost certainly significant; the generated code would ignore the extra argument.</span>
<span class="comment-copy">Bingo: <a href="https://github.com/python/cpython/blob/v3.6.2/Modules/clinic/_pickle.c.h#L49-L63" rel="nofollow noreferrer">github.com/python/cpython/blob/v3.6.2/Modules/clinic/…</a></span>
<span class="comment-copy">Actually there is a kind of method that takes only <code>self</code>: <a href="https://github.com/python/cpython/blob/v3.6.2/Include/methodobject.h#L23" rel="nofollow noreferrer"><code>PyNoArgsFunction</code></a>. But that seems to be some remnant (<a href="https://bugs.python.org/issue18091" rel="nofollow noreferrer">bugs.python.org/issue18091</a>) ... it's not used anywhere in the CPython source and isn't even undocumented.</span>
<span class="comment-copy">@MSeifert Indeed, see <a href="https://bugs.python.org/issue18091" rel="nofollow noreferrer">here</a> for why that seems to still be there. (P.s freaky how our answers matched so much :-)</span>
<span class="comment-copy">To bad it's not "usable". It would be quite handy for <code>METH_NOARG</code>s. Yeah, and posted almost simultaneously :).</span>
