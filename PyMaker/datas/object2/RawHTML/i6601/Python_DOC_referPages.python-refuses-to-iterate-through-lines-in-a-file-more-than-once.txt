<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10255273/iterating-on-a-file-using-python">Iterating on a file using Python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I am writing a program that requires me to iterate through each line of a file multiple times:</p>
<pre><code>loops = 0
file = open("somefile.txt")
while loops &lt; 5:
    for line in file:
        print(line)
    loops = loops + 1
</code></pre>
<p>For the sake of brevity, I am assuming that I always need to loop through a file and print each line 5 times. That code has the same issue as the longer version I have implemented in my program: the file is only iterated through one time. After that the <code>print(line)</code> file does nothing. Why is this?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because the <code>file = open("somefile.txt")</code> line occurs only once, before the loop. This creates one cursor pointing to one location in the file, so when you reach the end of the first loop, the cursor is at the end of the file. Move it into the loop:</p>
<pre><code>loops = 0
while loops &lt; 5:
    file = open("somefile.txt")
    for line in file:
        print(line)
    loops = loops + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for loop in range(5):
    with open('somefile.txt') as fin:
        for line in fin:
            print(fin)
</code></pre>
<p>This will re-open the file five times. You could <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow noreferrer"><code>seek()</code></a> to beginning instead, if you like.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python file objects are iterators. Like other iterators, they can only be iterated on once before becoming exhausted. Trying to iterate again results in the iterator raising <code>StopIteration</code> (the signal it has nothing left to yield) immediately.</p>
<p>That said, file objects do let you cheat a bit. Unlike most other iterators, you can rewind them using their <code>seek</code> method. Then you can iterate their contents again.</p>
<p>Another option would be to reopen the file each time you need to iterate on it. This is simple enough, but (ignoring the OS's disk cache) it might be a bit wasteful to read the file repeatedly.</p>
<p>A final option would be to read the whole contents of the file into a list at the start of the program and then do the iteration over the list instead of over the file directly. This is probably the most efficient option as long as the file is small enough that fitting its whole contents in memory at one time is not a problem.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>for line in file</code> reads each line once. If you want to start over from the first line, you could for example close and reopen the file. </p>
</div>
<div class="post-text" itemprop="text">
<p>when you iterate once the pointer points to the last line in the file so try to use
file.seek(0) instead of opening the file again and again in the loop</p>
<pre><code>    with open('a.txt','r+')as f:
        for i in range(0,5):
            for line in f:
                print(line)
            f.seek(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Files are treated as generator expressions by default when you iterate through them. If you want to iterate over the file multiple times line by line, you might want to convert the file to something like a list first.</p>
<pre><code>lines = open("somefile.txt").read().splitlines()

for line in lines:
    print(line)
</code></pre>
</div>
