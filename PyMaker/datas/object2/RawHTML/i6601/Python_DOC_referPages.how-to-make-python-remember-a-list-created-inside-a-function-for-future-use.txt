<div class="post-text" itemprop="text">
<p>Below is an iterative calculation of <a href="https://en.wikipedia.org/wiki/Fibonacci_number" rel="nofollow noreferrer">Fibonacci Sequence</a>. </p>
<pre><code>def fibonacci(n):
    if n &lt; 0:
            raise ValueError("invalid index!")
    if n==0:
            return 0
    if n==1:
            return 1

    f = [0,1]
    for i in range(2,n+1):
            f.append(f[i-1] + f[i-2])
    return f[n]
</code></pre>
<p><a href="https://brilliant.org/practice/cs-recursion/?p=3" rel="nofollow noreferrer">Code Source: brilliant.org</a></p>
<p>As it is, the list <code>f</code> is a local variable inside the function and will be recreated and repopulated each time the <code>fibonacci</code> function is called. 
How could this code snippet be rewritten so that Python would not need to recalculate <code>fibonacci(5)</code> once it was called and could use it the next time <code>fibonacci(5)</code> or above was called? I know global variable is one option but what would be the most "Pythonic" way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can store the <code>f</code> in a variable <strong>outside</strong> the scope of the function. For instance:</p>
<pre><code>def memoize_fibonacci():
    f = [0,1]
    def inner_fibonacci(n):
        if n &lt; 0:
                raise ValueError("invalid index!")
        for i in range(len(f),n+1):
                f.append(f[i-1] + f[i-2])
        return f[n]
    return inner_fibonacci
</code></pre>
<p>So each time we inspect the length of <code>f</code>. In case we have not generated the requested index yet, we generate until we obtain the index. Regardless whether we extend the list, we eventually can return <code>f[n]</code>.</p>
<p>Now we can extract the <code>fibonacci</code> function, with:</p>
<pre><code>fibonacci = memoize_fibonacci()
</code></pre>
<p>If we now query twice for the 200'000th element, the second time it is faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can memoize the results using a closure: In this case, the memo dict is created when the function is first executed (usually, when the module is loaded); it is persistent, and is populated as the function is called. </p>
<pre><code>def fibonacci(n, memo={}):
    try: 
        return memo[n]
    except KeyError:
        pass
    if n &lt; 0:
            raise ValueError("fibonacci must be called with positive numbers")
    if n == 0:
        memo[n] = 0 
        return 0
    if n == 1:
        memo[n] = 1
        return 1
    memo[n] = fibonacci(n-1) + fibonacci(n-2)
    return memo[n]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>functools</code> if you're using Python 3.2+.
<a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">https://docs.python.org/3/library/functools.html#functools.lru_cache</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use a python dictionary and check if the key is present and return the result from dictionary or calculate and add the result to the dictionary before returning.</p>
<pre><code>fib_dict = {};

def fibonacci(n):
    if n in fib_dict:
        return fib_dict[n];
    else:
        if n &lt; 0:
            raise ValueError("invalid index!")
        if n==0:
            return 0
        if n==1:
            return 1

        f = [0,1]
        for i in range(2,n+1):
            f.append(f[i-1] + f[i-2])

        fib_dict[n] = f[n];
        return f[n];
</code></pre>
</div>
<span class="comment-copy"><code>global</code> or pass a mutable variable to the function.</span>
<span class="comment-copy">You might want to check better implementation's alternatives: <a href="https://technobeans.com/2012/04/16/5-ways-of-fibonacci-in-python/" rel="nofollow noreferrer">technobeans.com/2012/04/16/5-ways-of-fibonacci-in-python</a></span>
<span class="comment-copy">You should look up memoization. An example here: <a href="https://stackoverflow.com/a/13865482/104349">stackoverflow.com/a/13865482/104349</a></span>
<span class="comment-copy">Does that matter? I don't get this whole <code>pythonic</code> religious bs tbh. If it solves your problem and is a readable and or fast operation, isn't that good? Anyway, yes it's pythonic -.-</span>
<span class="comment-copy">@Torxed global variables are neither fast, thread-safe, nor pythonic (which simply means using the language in the most straight forward and forward thinking manner, and not e.g. like you're used to from another language). There are plenty of people who enjoy hacking code into submission, with no regard for maintainability or reliability, so by all means feel free to do so ;-)</span>
<span class="comment-copy">This is actually faster than using Binet's formula, by quite a margin too(!)</span>
<span class="comment-copy">Thanks, @Willem Van Onsem, would it have made a difference if you did not have the last line <code>fibonacci = memoize_fibonacci</code> and just used <code>memoize_fibonacci</code> as your function? In terms of runtime?</span>
<span class="comment-copy">@Semihcan: yes. Since <code>memoize_fibonacci</code> is <b>not</b> a fibonacci function. It is a factory of Fibonacci functions.</span>
<span class="comment-copy">the memo dict is created when the function definition is executed (normally when the file it resides in is imported), not when the function is called for the first time..</span>
<span class="comment-copy">Correct, thank you for this important precision.</span>
<span class="comment-copy">Due to its recursive nature, this blows up with an initial call of <code>fibonacci(1000)</code>, which other solutions can handle.  The memoization doesn't help with this.  Also, is this technically a closure?  I.e. who's variable is <code>memo</code>?  (Besides increasing Python's stack size, you can also game this one by calling <code>fibonacci(900)</code> before <code>fibonacci(1000)</code> to ease into the answer!)</span>
<span class="comment-copy">This will only work if the function is a recursive one (this one is not). Hence it will ech time recalculate <code>f</code>.</span>
<span class="comment-copy">Good point, you would need to refactor your function. Take a look at this resource <a href="http://book.pythontips.com/en/latest/function_caching.html" rel="nofollow noreferrer">book.pythontips.com/en/latest/function_caching.html</a></span>
<span class="comment-copy">@WillemVanOnsem, I don't agree.  In a properly written (singly, not doubly) recursive solution, on the first call, <code>lru_cache()</code> would provide no advantage.  There would be a win on subsequent calls, but that's also true of an interative solution and is the goal the OP is after.</span>
<span class="comment-copy">@cdlane: yes, but by using recursion work already partially done by a first call, improves the second. Say you call <code>fibonacci(1000)</code>, then this could improve the speed of <code>fibonacci(1001)</code>, since <code>fibonacci(1000)</code> already calculated the sequence up to the 1000-th factor.</span>
<span class="comment-copy">@WillemVanOnsem, understood and thank you.  <code>lru_cache</code> gets tricky with extra, defaulted, arguments which a singly recursive solution uses.</span>
