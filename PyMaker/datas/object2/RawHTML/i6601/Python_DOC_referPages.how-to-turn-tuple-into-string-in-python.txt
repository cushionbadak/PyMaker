<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19641579/python-convert-tuple-to-string">Python convert tuple to string</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>if </p>
<pre><code>original = 'MK320MK180FM340SH230LL2HHH22TGF22',
</code></pre>
<p>Then I have stripped a string list such that looks like this (string --&gt; tuple):</p>
<pre><code>list = {('MK320',), ('MK180',), ('FM340',), ('SH230',), ('LL2',), ('HHH22',), ('TGF22',)}
</code></pre>
<p>I want to get rid of the comma inside the parentheses. That is, I want to make these tuples to be string back again. What I did was:</p>
<pre><code>for i in range(len(list)):
''.join(list[i])
</code></pre>
<p>But it didn't get any better. Then I wanted to pass this to a different command, which is Counter. However, that actually included Counter{(blabla)}, which I didn't really like. What I wished to get a result as a dictionary, looking like this: </p>
<pre><code> {('MK320': 1, 'MK180': 1, 'FM340': 1, 'SH230': 1, 'LL2': 1, 'HHH22' : 1, 'TGF22': 1}
</code></pre>
<p>Which eventually counts the frequency of each product name.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>lst = [('MK320',), ('MK180',), ('FM340',), ('SH230',), ('LL2',), ('HHH22',), ('TGF22',)]
lst = [t[0] for t in lst]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list = {('MK320',), ('MK180',), ('FM340',), ('SH230',), ('LL2',), ('HHH22',), ('TGF22',)}
</code></pre>
<p>That's a set rather than a list.</p>
<p>Please don't use <code>list</code> as a variable name, as there's already a very useful builtin function by that name. I'm going to pretend you named it <code>list1</code>.</p>
<p>It sounds like you want to hoist the elements out of the 1-tuples:</p>
<pre><code>list2 = [elt for elt, in list1]
</code></pre>
<p>Then you could join it with <code>', '.join(list2)</code> as you wish.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know how you are converting your string to the <code>set</code> of <code>tuple</code> you are having. And, why are you even creating it when you don't need it?</p>
<p>You may use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a> module to get the desired list using the <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall(pattern, string)</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re

&gt;&gt;&gt; my_str = 'MK320MK180FM340SH230LL2HHH22TGF22'
&gt;&gt;&gt; re.findall('[A-Za-z]+\d+', my_str)
['MK320', 'MK180', 'FM340', 'SH230', 'LL2', 'HHH22', 'TGF22']
</code></pre>
<p>Then, you may use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collection.Counter</code></a> to get the count. For example:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; word_list = re.findall('[A-Za-z]+\d+', my_str)

&gt;&gt;&gt; Counter(word_list)
Counter({'MK180': 1, 'SH230': 1, 'LL2': 1, 'FM340': 1, 'MK320': 1, 'TGF22': 1, 'HHH22': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>original</code> variable has a comma after it which makes it a tuple. If you want it to be a string, remove the trailing comma.</p>
<pre><code>original = 'MK320MK180FM340SH230LL2HHH22TGF22'
</code></pre>
<p>You haven't shown how you generated the <code>list</code> variable. (Sidenote: don't name variables <code>list</code> or <code>str</code>, it shadows the built-in types.) But you can split this string into separate pieces like so:</p>
<pre><code>import re

original = 'MK320MK180FM340SH230LL2HHH22TGF22'

split_list = re.findall(r'[A-Z]+\d+', original)
</code></pre>
<p>Your <code>list</code> variable is actually a set. The syntax for sets is <code>{item1, item2, item3}</code> while the syntax for lists is <code>[item1, item2, item3]</code>.</p>
<p>If you want to turn every tuple in this set into its first element:</p>
<pre><code>new_list = [item[0] for item in list]
</code></pre>
<p>Finally, if you want to count the instances of each item in this list, you can pass it to <code>collections.Counter</code>.</p>
<pre><code>import re
import collections

original = 'MK320MK180FM340SH230LL2HHH22TGF22'

split_list = re.findall(r'[A-Z]+\d+', original)

count = collections.Counter(split_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may have a typo, or you doing something different from what you've described. Your <code>list</code> is actually a set of tuples. If that's what you meant to create then you can't use indexing as you've shown in your <code>for</code> loop. Given the desired output you're showing, it is also not really clear what you're going for as this is not valid syntax with the parenthesis after the curly brace.</p>
<p>The answer from @Moses-koledoye is the correct one given what you seem to want.</p>
</div>
<span class="comment-copy">A Counter is a dictionary. You access the keys no differently than a regular dict object</span>
<span class="comment-copy">Please show the code that generated the tuples</span>
<span class="comment-copy">And you can create a plain dictionary from a Counter by doing <code>dict(counter)</code></span>
<span class="comment-copy">Is it a list or a dict? It appears <code>list</code> is a dict in your code</span>
<span class="comment-copy">what I am looking for is just to get rid of that ('dd,') form to just ' dd '</span>
<span class="comment-copy">That actually worked, but can you explain more?</span>
<span class="comment-copy">@Mayjunejuly <code>('MK320',)</code> is a <code>tuple</code> with only one element, to get the element you do <code>('MK320',)[0] #=&gt; 'MK320'</code></span>
<span class="comment-copy">Whats elt for elt supposed to mean? Python is still very very new for me.</span>
<span class="comment-copy">I am converting string to set of tuples then doing the same thing over again because the question asks me to do so.</span>
<span class="comment-copy">No it isn't exactly. Slicing in fives does not give the exact results they want.</span>
<span class="comment-copy">Clearly you're right. Didn't realize they weren't all the same length.</span>
