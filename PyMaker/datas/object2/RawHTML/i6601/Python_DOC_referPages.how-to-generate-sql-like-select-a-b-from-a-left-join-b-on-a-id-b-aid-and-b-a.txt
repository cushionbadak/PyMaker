<div class="post-text" itemprop="text">
<p>I have a database "News" created via SQLAlchemy: </p>
<pre><code>class News(Base):
    __tablename__ = "news"
    id = Column(Integer, primary_key = True)
    title = Column(String)
    author = Column(String)
    url = Column(String)
    comments = Column(Integer)
    points = Column(Integer)
    label = Column(String)
</code></pre>
<p>I also have a function <code>f(title)</code>, that gets a string and returns one of 3 variants of strings: 'good', 'maybe' or 'never'. 
I try to get filtered rows:</p>
<pre><code>rows = s.query(News).filter(News.label == None and f(News.title)=='good').all()
</code></pre>
<p>But program fails, raising this error:</p>
<pre><code>raise TypeError("Boolean value of this clause is not defined")
</code></pre>
<p>How can I resolve it? </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is this:</p>
<pre><code>News.label == None and f(News.title) == 'good'
#                  ^^^ here
</code></pre>
<p>Python does not allow overriding the behaviour of boolean <strong>operations</strong> <code>and</code> and <code>or</code>. You can influence them to some extent with <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a> in Python 3 and <a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer"><code>__nonzero__</code></a> in Python 2, but all that does is that it <a href="https://stackoverflow.com/questions/471546/any-way-to-override-the-and-operator-in-python">defines the truth value of your object</a>.</p>
<p>If the objects in question had not implemented <code>__bool__</code> and thrown the error, or the implementation had not thrown, you would've gotten possibly rather cryptic errors due to the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">short-circuiting nature of <code>and</code> and <code>or</code></a>:</p>
<pre><code>In [19]: (News.label == 'asdf') and True
Out[19]: &lt;sqlalchemy.sql.elements.BinaryExpression object at 0x7f62c416fa58&gt;

In [24]: (News.label == 'asdf') or True
Out[24]: True
</code></pre>
<p>because</p>
<pre><code>In [26]: bool(News.label == 'asdf')
Out[26]: False
</code></pre>
<p>This could and would lead to hair pulling in the form of incorrect SQL expressions:</p>
<pre><code>In [28]: print(News.label == 'asdf' or News.author == 'NOT WHAT YOU EXPECTED')
news.author = :author_1
</code></pre>
<p>To produce boolean SQL expressions either use the <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.and_" rel="nofollow noreferrer"><code>and_()</code></a>, <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.or_" rel="nofollow noreferrer"><code>or_()</code></a>, and <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.not_" rel="nofollow noreferrer"><code>not_()</code></a> sql expression functions, or the binary <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operators.Operators.__and__" rel="nofollow noreferrer"><code>&amp;</code></a>, <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operators.ColumnOperators.__or__" rel="nofollow noreferrer"><code>|</code></a>, and <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operators.Operators.__invert__" rel="nofollow noreferrer"><code>~</code></a> operator overloads:</p>
<pre><code># Parentheses required due to operator precedence
filter((News.label == None) &amp; (f(News.title) == 'good'))
</code></pre>
<p>or</p>
<pre><code>filter(and_(News.label == None, f(News.title) == 'good'))
</code></pre>
<p>or pass multiple criterion to a call to <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html#sqlalchemy.orm.query.Query.filter" rel="nofollow noreferrer"><code>Query.filter()</code></a>:</p>
<pre><code>filter(News.label == None, f(News.title) == 'good')
</code></pre>
<p>or combine multiple calls to <code>filter()</code>:</p>
<pre><code>filter(News.label == None).filter(f(News.title) == 'good')
</code></pre>
</div>
<span class="comment-copy">@IljaEveril√§ You should post that as an answer, I almost missed your comment and was already writing the same thing.</span>
<span class="comment-copy">I was trying to find an existing duplicate for this, but to some surprise could not.</span>
