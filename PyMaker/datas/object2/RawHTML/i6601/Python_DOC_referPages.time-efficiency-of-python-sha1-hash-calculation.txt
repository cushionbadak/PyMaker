<div class="post-text" itemprop="text">
<p>For these two ways of calculating a sha1 hash, regards with <strong>time efficiency</strong>, are they the same?</p>
<p>(1) Split the string to small chunks and update the hash multiple times</p>
<pre><code>import hashlib

...
...
sha1 = hashlib.sha1()
sha1.update(chunk1)
sha1.update(chunk2)
...
</code></pre>
<p>(2) Pass the complete string to the hash function and compute the hash only once</p>
<pre><code>import hashlib
...
...
sha1 = hashlib.sha1()
sha1.update(the_complete_string)
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is additional overhead for each chunk:</p>
<ul>
<li>you must split the string</li>
<li>There are python calls into hashlib for each chunk</li>
<li>the hash library must set up to handle each chunk</li>
</ul>
<p>So, there is overhead that scales with the number of chunks.  If you have a constant number of chunks, it probably doesn't matter.
However if you were to split a significant string into one-character chunks and update using each of those one-character chunks, the chunked approach would be significantly slower than  the whole string approach.</p>
<p>That said, there's overhead in combining chunks into a single string or bytes object.  If what you have are chunks, and the only reason you're combining them is for the hash performance, that probably will not save time.</p>
</div>
<span class="comment-copy">I suspect that it's linear time with respect to the total number of bytes hashed, so it would be the same either way. But I'm curious too, if someone can prove it.</span>
<span class="comment-copy"><b>1</b> Note that in Python 3 you cannot pass a text string to the hashlib hash functions, you must pass a bytes object (or a bytearray object). <b>2</b> If you're not going to hash the object in chunks then you might as well avoid the <code>.update</code> calls entirely and just pass the bytes to the constructor, eg <code>sha1 = hashlib.sha1(b'some bytes')</code>.</span>
<span class="comment-copy"><b>3</b> Unless you need to use sha1 for backwards compatibility you should probably avoid it since <a href="https://en.wikipedia.org/wiki/SHA-1" rel="nofollow noreferrer">SHA-1 is no longer considered secure against well-funded opponents</a>. Instead, use a bigger SHA family hash like sha256, or one of the newer functions found in the <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">Python 3 hashlib</a>, eg a SHA3 hash, or BLAKE.</span>
