<div class="post-text" itemprop="text">
<p>I use statistics.mean() to calculate mean from sampled distribution. However, in the following code, the returned value from the following value is rounded integer. If I use numpy.mean() instead, will get the correct float typed results. So what is going on here?</p>
<pre><code>import statistics
from scipy import stats

posterior_sample = stats.beta.rvs(3, 19, size = 1000)
predictive_sample = stats.binom.rvs(100, posterior_sample, size = 1000)
print(statistics.mean(predictive_sample))
print(statistics.mean([(data &gt;= 15).astype(int) for data in predictive_sample]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>statistics.mean</code> does not support the <code>numpy.int64</code> data type.</p>
<p>From the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">docs</a> for <code>statistics</code>:</p>
<blockquote>
<p>Unless explicitly noted otherwise, these functions support int, float,
  decimal.Decimal and fractions.Fraction. Behaviour with other types
  (whether in the numeric tower or not) is currently unsupported. Mixed
  types are also undefined and implementation-dependent. If your input
  data consists of mixed types, you may be able to use map() to ensure a
  consistent result, e.g. map(float, input_data).</p>
</blockquote>
<p>To get around this, you can do as suggested, and convert your data to <code>float</code> before passing to <code>statistics.mean()</code>.</p>
<pre><code>print(statistics.mean(map(float, predictive_sample)))
</code></pre>
<p><strong>Now for the underlying reason behind this behaviour:</strong></p>
<p>At the end of the <a href="https://github.com/python/cpython/blob/3.6/Lib/statistics.py" rel="nofollow noreferrer">source code</a> for <code>statistics.mean</code>, there is a call to <code>statistics._convert</code>, which is meant to convert the returned value to an appropriate type (i.e. Fraction if inputs are fractions, <code>float</code> if inputs are <code>int</code> etc).</p>
<p>A <a href="https://github.com/python/cpython/blob/3.6/Lib/statistics.py#L243" rel="nofollow noreferrer">single line</a> in <code>_convert</code> is meant to catch other data types, and ensure that the returned value is consistent with the provided data (<code>T</code> is the data type for each input value, <code>value</code> is the calculated mean):</p>
<pre><code>try:
    return T(value)
</code></pre>
<p>If your input is <code>numpy.int64</code>, then the <code>_convert</code> function tries to convert the calculated mean to <code>numpy.int64</code> data type. NumPy happily converts a float to an int (rounded down I think). And hence the <code>mean</code> function returns a mean rounded to the nearest integer, encoded as <code>numpy.int64</code>.</p>
<p>If your input data is <code>numpy.float64</code>, then you won't have this problem.</p>
</div>
<span class="comment-copy">A simpler example: <code>statistics.mean([6, 7, 8, 9])</code> and <code>statistics.mean(np.array([6, 7, 8, 9]))</code>.</span>
<span class="comment-copy">Nice catch! Thx!</span>
<span class="comment-copy">if this answers you question, you can mark it as accepted by clicking the hollow check mark under the downvote symbol to show your appreciation :) @rifle123</span>
