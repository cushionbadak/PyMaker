<div class="post-text" itemprop="text">
<p>I played around with the logging module and found some things that are not quite clear to me. </p>
<p>First of all, because it is a big programm I wanted the code to be as simple as possible, therefore use a json config file. </p>
<pre><code>{
"version": 1,
"disable_existing_loggers": false,
"formatters": {
    "simple": {
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    },
    "extra": {"format":"%(asctime)-16s %(name)-8s %(filename)-12s %(lineno)-6s %(funcName)-30s %(levelname)-8s %(message)s",
             "datefmt":"%m-%d %H:%M:%S"}
},

"handlers": {
    "console": {
        "class": "logging.StreamHandler",
        "level": "DEBUG",
        "formatter": "simple",
        "stream": "ext://sys.stdout"
    },

    "info_file_handler": {
        "class": "logging.handlers.RotatingFileHandler",
        "level": "INFO",
        "formatter": "simple",
        "filename": "info.log",
        "maxBytes": 10485760,
        "backupCount": 40,
        "encoding": "utf8"
    },

    "error_file_handler": {
        "class": "logging.handlers.RotatingFileHandler",
        "level": "ERROR",
        "formatter": "simple",
        "filename": "errors.log",
        "maxBytes": 10485760,
        "backupCount": 40,
        "encoding": "utf8"
    }
},


"loggers": {
    "my_module": {
        "level": "ERROR",
        "handlers": ["console"],
        "propagate": "no"
    }
},

"root": {
    "level": "INFO",
    "handlers": ["console", "info_file_handler", "error_file_handler"]
}
</code></pre>
<p>}</p>
<p>This json file is imported and used. It seems to work fine. 
Unfortuantely there are some problems. 
After finishing the code (still working on it) the logger does not close the file. And due to this in the next run he is appending the new run to the old log file. No possibility to delete it or truncate() without problems.
Thus I wanted to remove the handlers writing the files. Unfortunately it seems like logger.handlers is empty, and thus I can not find them anywhere. Probably got an idea? </p>
<p>Also the log files have a major problem. The logger is just appending everything new without starting a new line. Which ends up in an endless one-line log.</p>
<p>main test programme:</p>
<pre class="lang-python prettyprint-override"><code>import sys
import os
import json
import logging.config

import my_module

def setup_logging(
    default_path='logging.json',
    default_level=logging.INFO,
    env_key='LOG_CFG'
):
    """Setup logging configuration

    """
    path = default_path
    value = os.getenv(env_key, None)
    if value:
        path = value
    if os.path.exists(path):
        with open(path, 'rt') as f:
            config = json.load(f)
        logging.config.dictConfig(config)
    else:
        logging.basicConfig(level=default_level)





def main():

    setup_logging()    
    logger = logging.getLogger(__name__)
    logger.info('Startlogging:')


    my_module.foo()    
    b = my_module.Bar()
    b.bar()

    print logger.handlers

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The file is closed when the program exits, but the default mode for logfiles is <code>'a'</code> (append). If you want to truncate the logfile on each run, specify <code>"mode": "w"</code> where you specify the <code>"filename": "XXX.log"</code>.</p>
<p>Not sure why newlines aren't in the logfile. You would need to post a small self-contained test script which exhibits the problem.</p>
</div>
<span class="comment-copy">can you show the code that does the actual logging? have you also looked here? <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">docs.python.org/3/library/logging.html</a></span>
<span class="comment-copy"><code>import logging  &lt;br/&gt;    def foo():  &lt;br/&gt;     logger = logging.getLogger(__name__)  &lt;br/&gt;     logger.info('Hi, foo - info')  &lt;br/&gt;     logger.debug('Hi, foo - debug')  &lt;br/&gt;     logger.error('Hi, foo - error')  &lt;br/&gt;  class Bar(object):  &lt;br/&gt;     def __init__(self, logger=None):  &lt;br/&gt;         self.logger = logger or logging.getLogger(__name__)  &lt;br/&gt;      def bar(self):  &lt;br/&gt;         self.logger.info('Hi, bar - info')  &lt;br/&gt;         self.logger.debug('Hi, bar - debug')  &lt;br/&gt;         self.logger.error('Hi, bar - error')  &lt;br/&gt; </code></span>
<span class="comment-copy">So u basiucally got the whole code now. Think the biggest problem is not closing the handlers at the end. BUt as logger.handlers  returns [] I am not sure how to close them manually</span>
<span class="comment-copy">Unfortunately this also does not work completly. It is still apopending to the older files. But...I think this can probably be solved by closing the file handlers at the end of the code.  Problem here is that logger.handlers already returns [], this I think I can not close them, causing the problems at the end.   Thus I am now looking for the best way to close th file handlers at the end using something like atexit.register(...).</span>
<span class="comment-copy">Also logger.shutdown() is not found as "'Logger' object has no attribute 'shutdown'". But logger.info() and so on is working perfectly fine.</span>
