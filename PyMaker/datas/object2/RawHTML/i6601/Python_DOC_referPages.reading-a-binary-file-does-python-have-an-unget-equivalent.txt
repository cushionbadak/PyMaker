<div class="post-text" itemprop="text">
<p>I am looking for a 2-byte sequence in a binary file that is too large to fit in memory. I can't simply read 2 bytes at a time, because, e.g.</p>
<pre><code>xx xx x1 2x xx
</code></pre>
<p>Likewise, I can't simply look for the first and then see if the second is there, because</p>
<pre><code>xx112xx
</code></pre>
<p>I would really like to be able to do something like:</p>
<pre><code>with open("myfile", "rb") as f:
    byte = f.read(1)
    while byte:
        if byte == b'1':
            if f.read(1) == b'2':
                # success case
            else:
                # put back the latest byte somehow
        byte = f.read(1)
</code></pre>
<p>Is there some feature to do this lookahead work without all the bookkeeping details required to do it myself?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/io.html#io.BufferedReader" rel="nofollow noreferrer"><code>io.BufferedReader()</code> object</a> has a <a href="https://docs.python.org/3/library/io.html#io.BufferedReader.peek" rel="nofollow noreferrer"><code>peek()</code> method</a>:</p>
<blockquote>
<p>Return bytes from the stream without advancing the position. At most one single read on the raw stream is done to satisfy the call. The number of bytes returned may be less or more than requested.</p>
</blockquote>
<p>You get such an object whenever you open a file in binary mode for reading, so you can used it directly in your code:</p>
<pre><code>with open("myfile", "rb") as f:
    for byte in iter(lambda: f.read(1), b''):
        if byte == b'1':
            if f.peek(1) == b'2':
                # success case
</code></pre>
<p>Take into account that the byte we peeked at is still 'in the stream', the next <code>f.read()</code> call will include it. You'd have to issue an explicit <code>f.read(1)</code> if you don't want that.</p>
<p>I replaced your <code>while</code> loop with a <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code> 2-argument call</a> to read the file 1 byte at a time in a <code>for</code> loop.</p>
</div>
