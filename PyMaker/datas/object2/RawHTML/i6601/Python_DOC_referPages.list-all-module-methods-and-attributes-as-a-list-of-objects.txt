<div class="post-text" itemprop="text">
<p>I was trying to dive in python and evaluating some of the builtin functions.
The dir function returns a string list containing the names of all attributes of the given module.
Because of that if I run the following code segment, I get an empty list:</p>
<pre><code>import string
[x for x in dir(string) if callable(x) ]
</code></pre>
<p>Is There other functions or other ways, that I can combine with <code>dir(string)</code> for getting a list of Objects instead of row strings?</p>
<p>my goal is to do something like:</p>
<pre><code>import string
[ x for x in ***(dir(string)) if callable(x) ]
</code></pre>
<p>and not something like the example in <a href="http://www.diveintopython.net/power_of_introspection/index.html#apihelper.divein" rel="nofollow noreferrer">dive in python book</a></p>
<pre><code> methodList = [method for method in dir(object) if callable(getattr(object, method))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>dir()</code> returns a list of <strong>strings</strong>:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; dir(string)
['Formatter', 'Template', '_ChainMap', '_TemplateMetaclass', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_re', '_string', 'ascii_letters', 'ascii_lowercase', 'ascii_uppercase', 'capwords', 'digits', 'hexdigits', 'octdigits', 'printable', 'punctuation', 'whitespace']
</code></pre>
<p>String values are not callable; these are not the actual attribute values, they are the names.</p>
<p>If you wanted to to test those names as attributes on the <code>string</code> module, you'd have to use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr()</code></a>, or use the <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code> function</a> to get the <code>strings</code> namespace as a dictionary:</p>
<pre><code>&gt;&gt;&gt; getattr(string, 'Formatter')
&lt;class 'string.Formatter'&gt;
&gt;&gt;&gt; callable(getattr(string, 'Formatter'))
True
&gt;&gt;&gt; [name for name in dir(string) if callable(getattr(string, name))]
['Formatter', 'Template', '_ChainMap', '_TemplateMetaclass', 'capwords']
&gt;&gt;&gt; [name for name, obj in vars(string).items() if callable(obj)]
['capwords', '_ChainMap', '_TemplateMetaclass', 'Template', 'Formatter']
</code></pre>
<p>The order differs here because <a href="https://stackoverflow.com/questions/15479928/why-is-the-order-in-dictionaries-and-sets-arbitrary">dictionaries are unordered</a> and <code>dir()</code> always sorts the return value. For <em>modules</em>, <code>dir(module)</code> simply returns <code>sorted(vars(module))</code>.</p>
<p>If you wanted the callable objects themselves and not the names, just filter the <em>values</em> of the <code>vars()</code> dictionary:</p>
<pre><code>[obj for obj in vars(string).values() if callable(obj)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>callable(x)</code> checks is <code>x</code> is an object that has a <code>__call__()</code> method. In your case, it doesn't, that's why the comprehension is returning an empty list</p>
</div>
<span class="comment-copy">I didn't link it here, no, but I did consider linking it. My apologies, I did think you had read it. Again, comments are ephemeral. Had you been critical of my post I would not have touched the comments (at most I'd have asked another mod to look at them). I'll ask another to take a look if they feel I was too quick to clean up here. Thing is, if I <i>don't</i> clean up the comments below my own posts when I see them as obsolete, then it can take a long time before they <i>are</i>. I'm just tidying up after myself here.</span>
<span class="comment-copy">Thanks, sounds all reasonable.  No need for another mod to take a look.  I think it was mostly the timinig that bothered me.</span>
<span class="comment-copy">I updated the question, it was bad formulate. Have you an Idea?</span>
<span class="comment-copy">@MohamedEl: there you go.</span>
