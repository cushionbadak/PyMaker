<div class="post-text" itemprop="text">
<p>I have a problem with adding three expressions in my objective function. I used <code>quicksum</code> to build each expression. However, when I try to add them together I get an error that I cannot use +/- operands on class 'generator'.</p>
<p>Here is the last part of my code:</p>
<pre><code># the shipping cost expression
expr_sc = []
for j in J:
    for k in K:
        expr_sc.append(quicksum(r_jk[(j, k)]*x[(i, j, k)]) for i in I)

m.setObjective((quicksum(item_rev) for item_rev in expr_rev) -
               ((quicksum(item_pc) for item_pc in expr_pc) + (quicksum(item_sc) for item_sc in expr_sc)),
               GRB.MAXIMIZE)
</code></pre>
<h1>Update:</h1>
<p>here is the actual problem that I am trying to solve:
<a href="https://i.stack.imgur.com/QFHyM.gif" rel="nofollow noreferrer">Objective Function</a>
The problem is I don't know how to write this expression in Gurobi Python!!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>(quicksum(item_rev) for item_rev in expr_rev)</code> evaluates to a generator expression. </p>
<p>If the one line <code>for</code> loop is inside the parenthesis - <code>(...)</code> - you get a generator object. Here's a small example to illustrate what I mean:</p>
<pre><code>&gt;&gt;&gt; (x for x in range(5)) # shorthand for creating generators
&lt;generator object &lt;genexpr&gt; at 0xb74308ec&gt;
</code></pre>
<p>See <a href="https://docs.python.org/3/howto/functional.html?highlight=generator%20express#generator-expressions-and-list-comprehensions" rel="nofollow noreferrer">docs</a> for more info.</p>
<p>It seems you're trying to pass individual items from given lists to <code>quicksum</code>, but instead you're creating generators, unintentionally.</p>
<p>To fix this error, directly pass the objects to <code>quicksum</code>:</p>
<pre><code>m.setObjective(
    quicksum(expr_rev) - (quicksum(expr_pc) + quicksum(expr_sc)),
    GRB.MAXIMIZE
)
</code></pre>
<p><strong>UPDATE:</strong></p>
<p>There also seems to be a problem at </p>
<pre><code>expr_sc.append(quicksum(r_jk[(j, k)]*x[(i, j, k)]) for i in I)
</code></pre>
<p>Change that line like this:</p>
<pre><code>expr_sc.append(quicksum(r_jk[(j, k)] * x[(i, j, k)] for i in I))
</code></pre>
</div>
<span class="comment-copy">What do you expect using the operator <code>+</code> on the expressions to do? I haven't used <code>quicksum()</code> myself, but from the documentation it says that it returns <code>An expression that represents the sum of the terms in the input list.</code> and from your error I would expect you're getting a generator object returned as explained in section 5.2.6 of <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">The Python Expressions Documentation</a>.</span>
<span class="comment-copy">This seems to defeat the whole point of generators, <i>and</i> it builds two unnecessary lists since <code>quicksum</code> accepts generator arguments.</span>
<span class="comment-copy">@alexis Okay, got your point. Updated the answer. Thanks.</span>
<span class="comment-copy">Generator expressions do not need to be parenthesized if they are the sole argument.</span>
<span class="comment-copy">Also, it might be easier to just use <code>iter</code> to create these generators. But why would that even be done if each object can be passed to <code>quicksum</code> directly?</span>
<span class="comment-copy">@JaredGoguen That's a valid point. I was thinking about that but I chose to keep my code consistent with OP's original code. Nevertheless, I've updated the answer. Thanks.</span>
