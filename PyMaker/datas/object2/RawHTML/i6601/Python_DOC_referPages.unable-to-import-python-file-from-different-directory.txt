<div class="post-text" itemprop="text">
<p>I have the following folder hierarchy.</p>
<pre><code>apriltag
    python
        apriltag.py
my_notebook.ipynb
</code></pre>
<p>I simply want to import <a href="https://github.com/swatbotics/apriltag/blob/master/python/apriltag.py" rel="nofollow noreferrer">apriltag.py</a> into my Jupyter Notebook. I tried doing it this way..</p>
<pre><code>import sys
import os.path

sys.path.append(os.path.dirname(os.path.realpath('__file__')) + "/apriltag/python")

import apriltag
</code></pre>
<p>However, when I try to access a class from <code>apriltag</code>, like so:</p>
<pre><code>print(apriltag.Detector)
</code></pre>
<p>I get the following error:</p>
<pre><code>AttributeError                            Traceback (most recent call last)
&lt;ipython-input-74-d1254ec9a372&gt; in &lt;module&gt;()
     12 import apriltag
     13 
---&gt; 14 print(apriltag.Detector)

AttributeError: module 'apriltag' has no attribute 'Detector'
</code></pre>
<p>Suggesting that the module was not imported correctly. I've tried creating <code>__init__.py</code> at the root of the <code>python</code> directory as well but the same thing occurred.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I'm going to buzz in a little bit early.  I may have the solution to your problem.  If I don't, we can go back to figuring it out.</p>
<p>As you've probably seen, the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">docs</a> say </p>
<blockquote>
<p>The directory containing the script being run is placed at the beginning of the search path, </p>
</blockquote>
<p>Now, you're running my_notebook.ipynb, so it's directory is the very beginning of the search path.  And you probably have an <code>__init__.py</code> file in the apriltag directory that's at the same level.  As such, it's being found as a module, and loaded.  And there are no .py files in that "module", and nothing in your <code>__init__.py</code> there, so it's loading as an empty module.</p>
<p>Instead, don't try modifying the sys.path directory, just make empty <code>__init__.py</code> files in both the apriltag and the python directories.</p>
<p>Then, you should be able to do the following:</p>
<pre><code>from apriltag.python import apriltag
</code></pre>
<p>The apriltag that gets imported should be the one you need.  (And <code>dir(apriltag)</code> will give you much nicer results.)</p>
<p>Generally, I always set up all my code in directories with empty <code>__init__.py</code> and invoke them all with the <code>from</code> syntax.  It made modules a lot easier to handle.</p>
</div>
<span class="comment-copy">Does <code>from apriltag import Detector</code> work?</span>
<span class="comment-copy"><code>dir(apriltag)</code> will probably tell you a lot.</span>
<span class="comment-copy">@TreytenCarey <code>cannot import name 'Detector'</code></span>
<span class="comment-copy">@ScottMermelstein this is the output <code>['__doc__', '__loader__', '__name__', '__package__', '__path__', '__spec__']</code> not sure how to interpret it</span>
<span class="comment-copy">That's an empty module.  The next thing I would check is <code>print(apriltag.__path__)</code>, and see if it's pointing to apriltag/python/apriltag.py, or just apriltag.  (Compare both the results of the dir and the <b>path</b> to what you'd get by inspecting sys or some other thing that imported well.  <code>dir(sys)</code> and <code>print(sys.__path__)</code> would give you an idea of what to expect when it's properly loaded.</span>
<span class="comment-copy">Nailed it -thank you so much!</span>
