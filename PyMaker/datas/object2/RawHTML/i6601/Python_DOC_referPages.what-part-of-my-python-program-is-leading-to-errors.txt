<div class="post-text" itemprop="text">
<pre><code>irounddigits = int(input('how many digits you want to round to'))
stype = input('do you have a float(f) or a fraction(dp)(please select one)')

if stype == "f":
    rtoberounded = float(input('enter the number your want to round'))
    print (round(rtoberounded[`irounddigits]))

else:
    inumerator = int(input(' what is your numerator(integer please)'))
    idemoninator = int(input(' what is your demoninaotr(integer please)'))
    ffinalnumber = inumerator / idemoninator
    rnumber = (round(ffinalnumber[irounddigits]))
    print (rnumber)
</code></pre>
<p>that's my code, but I keep getting errors like 
<code>TypeError: 'float' object is not subscriptable
</code> I've tried searching up what that error means but none of the answers seem to apply to my code </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">round()</a> takes the two parameters (<strong>number</strong> and <strong>number of digits</strong>) separated by comma <code>,</code>:</p>
<blockquote>
<p><strong>round</strong>(<em>number</em>[, <em>ndigits</em>])<br/>
  Return <em>number</em> rounded to <em>ndigits</em> precision after the decimal point.</p>
</blockquote>
<p>Change to: </p>
<pre><code>round(rtoberounded, irounddigits))
</code></pre>
<p>and   </p>
<pre><code>rnumber = (round(ffinalnumber, irounddigits))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this part</p>
<pre><code>round(rtoberounded[irounddigits])
</code></pre>
<p>and this part</p>
<pre><code>round(ffinalnumber[irounddigits])
</code></pre>
<p><code>rtoberounded</code> and <code>ffinalnumber</code> is a float, you can't call it  like an array/list.</p>
<p>I think you misundertsood the <code>[, ndigits]</code> part in the <a href="https://docs.python.org/2/library/functions.html#round" rel="nofollow noreferrer">documentation</a>. It means optional argument.</p>
</div>
<span class="comment-copy">I really wish they'd use normal argument notation when it's representable as a normal Python function (no C built-in weirdness violating the normal rules for Python level function signatures), e.g. <code>round(number, ndigits=0)</code>. The <code>[, ndigits]</code> notation should really only be used when there is no "placeholder" value (the C level function detects presence or absence, so there is no value to pass to mean "no argument"), and/or the optional param is positional only (can't be passed by keyword). Neither case applies here, yet they still used the non-standard signature. Sigh...</span>
<span class="comment-copy">I agree, I was also confused at first</span>
