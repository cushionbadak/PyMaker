<div class="post-text" itemprop="text">
<p>I'm writing a Windows service in Python, using win32service, as described in the top answer of <a href="https://stackoverflow.com/questions/32404">this question</a>. It works.</p>
<p>However, as I write the code, anytime I make a mistake (say, a typo in a variable name), the only feedback I get is that the service dies.</p>
<p>Where can I see the regular python errors?</p>
<p><strong>Edit</strong>: I should have stated that adding a TimedRotatingFileHandler is pretty much the only thing I've added so far - and yes, it works, but it's useless to catch typos or when forgetting to prefix variables names with "self.". I still have to experiment with catching the exceptions but even if I get that to work, in my mind, it's still a workaround, not a true solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest writing the program first, test it out, and then make it into a service.  Otherwise you can try trapping errors and output that to a log file.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best practice is to develop your service using an IDE like <a href="https://www.jetbrains.com/pycharm/download" rel="nofollow noreferrer">PyCharm</a>, that way, it can find a lost of awkwardness (like typo) for you.</p>
<p>It is also really important to add a logging system, and log to a file. Your service is usually executed with a specific user with different privileges, so you must pay attention to the file access rights.</p>
<p>You can use <a href="https://github.com/ActiveState/appdirs" rel="nofollow noreferrer">AppDir</a> Library to calculate the user log directory (see <code>user_log_dir</code> property.</p>
<p>Then, you can create a rotating log with a <a href="https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler" rel="nofollow noreferrer">RotatingFileHandler</a>.</p>
<p>In short:</p>
<pre><code>logger = logging.getLogger("Rotating Log")
logger.setLevel(logging.INFO)

# add a rotating handler
handler = RotatingFileHandler(path, maxBytes=1024**3,  # 1 Mo
                              backupCount=5)
logger.addHandler(handler)
</code></pre>
<p>Of course, this logger must be defined in your "main" function.</p>
<p>Your "main" function must have an exception handler.
You need to catch all the <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">exceptions</a> (except KeyboardInterrupt and SystemExit) and log them.</p>
<p>To summarize:</p>
<pre><code>def main():
    logger = init_logger()
    try:
        main_impl()
    except Exception as exc:
        logger.error("Last chance exception", exc_info=True)
        raise SystemExit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That code uses pywin32. As such, in addition to the standard</p>
<pre><code>python myservice.py install
python myservice.py start
</code></pre>
<p>there's also an</p>
<pre><code>python myservice.py debug
</code></pre>
<p>It won't provide all errors either, but will provide valuable clues in many cases.</p>
</div>
<span class="comment-copy">You could log them couldn't you? Try wrapping it in a try, and in the finally, log the exception.</span>
<span class="comment-copy">A good starting point for logging: <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">docs.python.org/3/howto/logging.html#logging-basic-tutorial</a></span>
<span class="comment-copy">Not exactly what I was looking for, but accepted as the best answer for "exc_info=True", that fulfills 80% of my needs. Thanks.</span>
