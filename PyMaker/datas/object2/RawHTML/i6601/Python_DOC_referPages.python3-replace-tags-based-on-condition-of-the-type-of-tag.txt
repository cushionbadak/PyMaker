<div class="post-text" itemprop="text">
<p>I want all the tags in a text that look like <code>&lt;Bus:1234|Bob Alice&gt;</code> or <code>&lt;Car:5678|Nelson Mandela&gt;</code> to be replaced with <code>&lt;a my-inner-type="CR:1234"&gt;Bob Alice&lt;/a&gt;</code> and <code>&lt;a my-inner-type="BS:5678"&gt;Nelson Mandela&lt;/a&gt;</code> respectively. So basically, depending on the Type whether <code>TypeA</code> or <code>TypeB</code>, I want to replace the text accordingly in a text string using Python3 and regex.</p>
<p>I tried doing the following in python but not sure if that's the right approach to go forward:</p>
<pre><code>import re
def my_replace():
    re.sub(r'\&lt;(.*?)\&gt;', replace_function, data)
</code></pre>
<p>With the above, I am trying to do a regex of the<code>&lt; &gt;</code> tag and every tag I find, I pass that to a function called <code>replace_function</code> to split the text between the tag and determine if it is a <code>TypeA</code> or a <code>TypeB</code> and compute the stuff and return the replacement tag dynamically. I am not even sure if this is even possible using the <code>re.sub</code> but any leads would help. Thank you.</p>
<p>Examples:</p>
<ul>
<li><p><code>&lt;Car:1234|Bob Alice&gt;</code> becomes <code>&lt;a my-inner-type="CR:1234"&gt;Bob Alice&lt;/a&gt;</code></p></li>
<li><p><code>&lt;Bus:5678|Nelson Mandela&gt;</code> becomes <code>&lt;a my-inner-type="BS:5678"&gt;Nelson Mandela&lt;/a&gt;</code></p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is perfectly possible with <code>re.sub</code>, and you're on the right track with using a replacement function (which is designed to allow dynamic replacements). See below for an example that works with the examples you give - probably have to modify to suit your use case depending on what other data is present in the text (ie. other tags you need to ignore)</p>
<pre><code>import re

def replace_function(m):
    # note: to not modify the text (ie if you want to ignore this tag),
    # simply do (return the entire original match):
    # return m.group(0)

    inner = m.group(1)
    t, name = inner.split('|')

    # process type here - the following will only work if types always follow
    # the pattern given in the question
    typename = t[4:]
    # EDIT: based on your edits, you will probably need more processing here
    # eg:
    if t.split(':')[0] == 'Car':
        typename = 'CR'
    # etc

    return '&lt;a my-inner-type="{}"&gt;{}&lt;/a&gt;'.format(typename, name)

def my_replace(data):
    return re.sub(r'\&lt;(.*?)\&gt;', replace_function, data)



# let's just test it
data = 'I want all the tags in a text that look like &lt;TypeA:1234|Bob Alice&gt; or &lt;TypeB:5678|Nelson Mandela&gt; to be replaced with'
print(my_replace(data))
</code></pre>
<p>Warning: if this text is actually full html, regex matching will not be reliable - use an html processor like beautifulsoup. ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably an extension to @swalladge's answer but here we use the advantage of a dictionary, if we know a mapping. (Think replace dictionary with a custom mapping function.</p>
<pre><code>import re    

d={'TypeA':'A',
   'TypeB':'B',
   'Car':'CR',
   'Bus':'BS'}

def repl(m):
  return '&lt;a my-inner-type="'+d[m.group(1)]+m.group(2)+'"&gt;'+m.group(3)+'&lt;/a&gt;'

s='&lt;TypeA:1234|Bob Alice&gt; or &lt;TypeB:5678|Nelson Mandela&gt;'
print(re.sub('&lt;(.*?)(:\d+)\|(.*?)&gt;',repl,s))
print()
s='&lt;Bus:1234|Bob Alice&gt; or &lt;Car:5678|Nelson Mandela&gt;'
print(re.sub('&lt;(.*?)(:\d+)\|(.*?)&gt;',repl,s))
</code></pre>
<hr/>
<p><strong>OUTPUT</strong></p>
<pre><code>&lt;a my-inner-type="A:1234"&gt;Bob Alice&lt;/a&gt; or &lt;a my-inner-type="B:5678"&gt;Nelson Mandela&lt;/a&gt;

&lt;a my-inner-type="BS:1234"&gt;Bob Alice&lt;/a&gt; or &lt;a my-inner-type="CR:5678"&gt;Nelson Mandela&lt;/a&gt;
</code></pre>
<p>Working example <a href="https://repl.it/LrX8/0" rel="nofollow noreferrer">here</a>.</p>
<hr/>
<p><strong>regex</strong><br/>
We capture what we need in 3 groups and refer to them through <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer">match object</a>.Highlighted in bold are the three groups that we captured in the regex.<br/>
<code>&lt;</code><b><code>(.*?)</code></b><b><code>(:\d+)</code></b><code>\|</code><b><code>(.*?)</code></b><code>&gt;</code><br/>
We use these 3 groups in our <code>repl</code> function to return the right string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry this isn't a complete answer but I'm falling asleep at the computer, but this is the regex that'll match either of the strings you provided, <code>(&lt;Type)(\w:)(\d+\|)(\w+\s\w+&gt;)</code>. Check out <a href="https://pythex.org/" rel="nofollow noreferrer">https://pythex.org/</a> for testing your regex stuff.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with:</p>
<pre><code>import re

def get_tag(match):
    base = '&lt;a my-inner-type="{}"&gt;{}&lt;/a&gt;'
    inner_type = match.group(1).upper()
    my_inner_type = '{}{}:{}'.format(inner_type[0], inner_type[-1], match.group(2))
    return base.format(my_inner_type, match.group(3))

print(re.sub(r'\&lt;(\w+):(\d+)\W([^\&gt;]+).*', get_tag, '&lt;Bus:1234|Bob Alice&gt;'))

print(re.sub(r'\&lt;(\w+):(\d+)\W([^\&gt;]+).*', get_tag, '&lt;Car:5678|Nelson Mandela&gt;'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code will work if you have it in the form <code>&lt;Type:num|name&gt;</code>:</p>
<pre><code>def replaceupdate(tag):
    replace = ''
    t = ''
    i = 1
    ident = ''
    name = ''
    typex = ''
    while t != ':':
        typex += tag[i]
        t = tag[i]
        i += 1
    t = ''
    while t != '|':
        if tag[i] == '|':
            break
        ident += tag[i]
        t = tag[i]
        i += 1
    t = ''
    i += 1
    while t != '&gt;':
        name += tag[i]
        t = tag[i]
        i += 1
    replace = '&lt;a my-inner-type="{}{}"&gt;{}&lt;/a&gt;'.format(typex, ident, name)
    return replace
</code></pre>
<p>I know it does not use regex and it has to split the text some other way, but this is the main bulk.</p>
</div>
<span class="comment-copy">It would be helpful if you could also explain what you want the text to be replaced with. For instance, I want '&lt;a my-inner-type="A:1234"&gt;Bob Alice&lt;/a&gt;' to become '&lt;a my-inner-type="A:1234"&gt;John Smith&lt;/a&gt;'</span>
<span class="comment-copy">I'll update my question to make it sound better</span>
<span class="comment-copy">That looks like html... before you get too many more ideas, please read <a href="https://stackoverflow.com/a/1732454/3089519">stackoverflow.com/a/1732454/3089519</a> ;)</span>
<span class="comment-copy">@swalladge Thanks. So what do you propose then ?</span>
<span class="comment-copy">It depends on the context... rereading your question it seems that it's simply plain text with various tags as described - if so, you'll probably get away with a regex solution no problems. Hang on, working on an answer. :)</span>
<span class="comment-copy">This looks like something more accurate. Hold on, let me give it a shot and I will post back :)</span>
<span class="comment-copy">This is super close and really awesome, except for the <code>ID</code> part. But that's okay, I get the idea and aligns exactly what I already did. I cant take it from here. Thanks for the suggestion. Basically I just didn't know about the <code>.group</code> method</span>
<span class="comment-copy">@noobcoder awesome! Glad it was helpful. :) (If it solves your question, please mark the answer as accepted.) Thanks.</span>
<span class="comment-copy">Worked. Accepted</span>
<span class="comment-copy">This is also good, but @swalladge's aligned better with mine and I already accepted his. But this was a neat solution too. I think I will use the dictionary as well. Thanks</span>
<span class="comment-copy">@noobcoder Request you to not split the match string in the function. <code>re.sub</code> returns you the three sections you need neatly! Because you are redoing what <code>re.sub</code> had already partly done.</span>
<span class="comment-copy">This is similar to the regex and is good, but I updated my question examples to articulate better, Jason Fry</span>
<span class="comment-copy">Ahh okay. I see now, well I'll get on to making a set of new code.</span>
<span class="comment-copy">Also you want to have the first and last letter of the type capitalised or what because that is a bit confusing to see as you wanted TypeA -&gt; TypeA but Car -&gt; CR and Bus -&gt; BR.</span>
