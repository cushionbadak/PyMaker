<div class="post-text" itemprop="text">
<p>Within <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.reshape.html" rel="nofollow noreferrer"><code>numpy.ndarray.reshape</code></a>, the <code>shape</code> parameter is an <em>int or tuple of ints</em>, and </p>
<blockquote>
<p>The new shape should be compatible with the original shape. If an
  integer, then the result will be a 1-D array of that length.</p>
</blockquote>
<p>The documentation signature is just:</p>
<pre><code># Note this question doesn't apply to the function version, `np.reshape`
np.ndarray.reshape(shape, order='C')
</code></pre>
<p>In practice the specification doesn't seem to be this strict.  From the description above I would expect to need to use:</p>
<pre><code>import numpy as np
a = np.arange(12)
b = a.reshape((4,3))  # (4,3) is passed to `newshape`
</code></pre>
<p>But instead I can get away with just:</p>
<pre><code>c = a.reshape(4,3)  # Seems like just 4 would be passed to `newshape`
                    #     and 3 would be passed to next parameter, `order`
print(np.array_equal(b,c))
# True
</code></pre>
<p>How is it that I can do this?  I know that if I just simply enter <code>2, 3</code> into a Python shell, it is technically a tuple whether I use parentheses or not.  But the comparison above seems to violate basic laws of how positional parameters are passed to the dict of keyword args.  I.e.:</p>
<pre><code>def f(a, b=1, order='c'):
    print(a)
    print(b)

f((4,3))
print()
f(4,3)

# (4, 3)
# 1
#
# 4
# 3
</code></pre>
<p>...and there are no star operators in <code>reshape</code>.  (Something akin to <code>def f(*a, order='c')</code> above.)</p>
</div>
<div class="post-text" itemprop="text">
<p>With the way that parameters are bound with normal Python methods, it should not work, but the method is not a Python method at all. Numpy is an extension module for CPython, and <code>numpy.ndarray.reshape</code> is actually <a href="https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/methods.c#L173-L211" rel="nofollow noreferrer">implemented in C</a>.</p>
<p>If you look at the implementation, the <code>order</code> parameter is only ever read as a keyword argument. A positional argument will never be bound to it, unlike with a normal Python method where the second positional argument would be bound to <code>order</code>.  The C code tries to build the value for <code>newshape</code> from all of the positional arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's nothing magic going on. The function's signature just doesn't match the documentation. It's documented as</p>
<pre><code>ndarray.reshape(shape, order='C')
</code></pre>
<p>but it's written in C, and instead of doing the C-api equivalent of</p>
<pre><code>def reshape(self, shape, order='C'):
</code></pre>
<p>it does the C-api equivalent of manual <code>*args</code> and <code>**kwargs</code> handling. You can take a look in <a href="https://github.com/numpy/numpy/blob/v1.13.3/numpy/core/src/multiarray/methods.c#L171" rel="nofollow noreferrer"><code>numpy/core/src/multiarray/methods.c</code></a>. (Note that the C-api equivalent of <code>def reshape(self, shape, order='C'):</code> would have the same C-level signature as what the current code is doing, but it would immediately use something like <a href="https://docs.python.org/3/c-api/arg.html" rel="nofollow noreferrer"><code>PyArg_ParseTupleAndKeywords</code></a> to parse the arguments instead of doing manual handling.)</p>
</div>
<span class="comment-copy">It can do this with <code>def foo(*a, order='c')</code></span>
<span class="comment-copy">@JeremyMcGibbon Yes, and if <code>reshape</code> used something like <code>*shape</code>, both of the above alternatives "working" would make more sense.  But there are no star operators in <code>reshape</code>--hence my question.</span>
<span class="comment-copy">The actual signature doesn't match the documentation. There's nothing magic going on, just undocumented behavior.</span>
<span class="comment-copy">@user2357112 Would you say <code>np.ndarray.reshape(*shape, order='c')</code> would be more appropriate then?</span>
<span class="comment-copy">@BradSolomon: Yes, with a note that the shape can either be passed as separate positional args or as a tuple.</span>
