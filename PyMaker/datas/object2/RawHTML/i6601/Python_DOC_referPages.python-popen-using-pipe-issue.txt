<div class="post-text" itemprop="text">
<p>I am trying to replicate this command using python and Popen:</p>
<pre><code>echo "Acct-Session-Id = 'E4FD590583649358F3B712'" | /usr/local/freeradius/bin/radclient -r 1 1.1.1.1:3799 disconnect secret
</code></pre>
<p>When running this from the command line as it is above, I get the expected:</p>
<pre><code>Sent Disconnect-Request Id 17 from 0.0.0.0:59887 to 1.1.1.1:3799 length 44
</code></pre>
<p>I want to achieve the same from a python script, so I coded it like this:</p>
<pre><code>rp1 = subprocess.Popen(["echo", "Acct-Session-Id = 'E4FD590583649358F3B712'"], stdout=subprocess.PIPE)
rp2 = subprocess.Popen(["/usr/local/freeradius/bin/radclient",
                     "-r 1",
                     "1.1.1.1:3799",
                     "disconnect",
                     "secret"],
                     stdin = rp1.stdout,
                     stdout = subprocess.PIPE,
                     stderr = subprocess.PIPE)

rp1.stdout.close()

result = rp2.communicate()

print "RESULT: " + str(result)
</code></pre>
<p>But, I  must be doing this incorrectly as the "result" variable contains the radclient usage info, as if it is called incorrectly:</p>
<pre><code>RESULT: ('', "Usage: radclient [options] server[:port] &lt;command&gt; [&lt;secret&gt;]\n  &lt;command&gt;....
</code></pre>
<p>Anybody any idea where my mistake lies?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Besides <strong>@Rawing</strong> catch of the args typo, you can make it much simpler with a single Popen process. Try this:</p>
<pre><code>rp = subprocess.Popen(["/usr/local/freeradius/bin/radclient",
                     "-r",
                     "1",
                     "1.1.1.1:3799",
                     "disconnect",
                     "secret"],
                     stdin=subprocess.PIPE,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE)

result = rp.communicate("Acct-Session-Id = 'E4FD590583649358F3B712'")
</code></pre>
<p>Using <code>communicate</code> to handle all the I/O prevents possible deadlocks that are possible when explicitly writing to <code>stdin</code> when you also need to read from <code>stdout</code>/<code>stderr</code>.</p>
</div>
<span class="comment-copy">Why are you using a subprocess for the first command? it's just an <code>echo</code></span>
<span class="comment-copy"><code>"-r 1"</code> should be separate arguments: <code>"-r", "1"</code></span>
<span class="comment-copy">@Rawing, that is it! Thanks a million for that!</span>
<span class="comment-copy">But you should really decommission that <code>echo</code> as a subprocess.  Just write the string into the input of the other subprocess with Python means.  This will make everything way simpler.</span>
<span class="comment-copy">@Alfe: Actually, as of Python 3.3, <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer"><code>communicate</code> supports a <code>timeout</code> argument</a> so you can bound the time spent waiting for a response. Yes, it only does a single input/output, so live back-and-forth communication isn't possible, but the only way to do that safely is to use threads or <code>select</code>/<code>selectors</code> module primitives (the same way <code>communicate</code> does) to manage sending and pulling data in a deadlock-free fashion. Much more complicated, but the only way to do it safely without <code>communicate</code>.</span>
<span class="comment-copy">Much better solution: Don't pass <code>bufsize=0</code>, and instead of calling <code>write</code> or <code>close</code>, pass the string you're passing to <code>write</code> to <code>communicate</code> (which, as the name implies, "communicates", passing the argument to the process <code>stdin</code>, but safely, preventing deadlocks which your attempt at unbuffering the process can't prevent).</span>
<span class="comment-copy">You're totally right. I forgot you can pass communicate args; thanks for pointing that</span>
<span class="comment-copy">Yar. One additional note: If this is Py3, the input string should be <code>bytes</code>, not <code>str</code> (so prefix with <code>b</code>).</span>
<span class="comment-copy">I have done that now and it works a charm - much simpler and neater solution. Thanks for that!</span>
