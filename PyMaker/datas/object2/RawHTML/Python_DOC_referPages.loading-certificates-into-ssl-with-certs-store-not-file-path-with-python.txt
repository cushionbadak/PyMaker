<div class="post-text" itemprop="text">
<p>I am using the <code>ssl</code> module in python, specifically this:</p>
<p><a href="https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain" rel="nofollow noreferrer">SSLContext.load_cert_chain</a></p>
<p>Most examples of using this show using file paths as the first two parameters like this:</p>
<p><code>context.load_cert_chain("/path/to/cert.pem", "/path/to/key.pem", password=password)</code></p>
<p>What if these certificates are stored in the Windows certs store? (CA, Root, etc).  Can I still retrieve and then use the file path to pass into the above method?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: It doesn't work easily.</p>
<p>The <code>ssl</code> module offers some access to the Windows certificate store via <code>ssl.enum_certificates</code> but that is pretty limited and does not offer access to the private key (which might even be marked as not-exportable). </p>
<p>The Windows certificate store is automatically used for client connections, to verify the servers certificate. But you cannot easily use it to create a server side context.</p>
<p>If you want to store keys and certificates in the Windows certificate store, you need to use the Windows SSPI (SChannel) APIs to implement the TLS layer. The python <code>ssl</code> module doesn't help in that case. The SSPI provides an API similar to the <code>ssl.SSLObject</code> which wraps the OpenSSL MemoryBIO protocol, so in theory one could implement a <code>ssl.SSLObject</code> on top of the Win32 APIs instead of the Openssl APIs.</p>
<p><a href="https://docs.microsoft.com/en-us/windows/desktop/secauthn/creating-a-secure-connection-using-schannel" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/windows/desktop/secauthn/creating-a-secure-connection-using-schannel</a></p>
</div>
