<div class="post-text" itemprop="text">
<p>Guido van Rossum, in his speech in 2014 on Tulip/Asyncio <a href="http://youtu.be/aurOB4qYuFM?t=53m8s" rel="nofollow noreferrer">shows the slide</a>:</p>
<blockquote>
<p><strong>Tasks vs coroutines</strong></p>
<ul>
<li><p>Compare:</p>
<ul>
<li>res = yield from  some_coroutine(...)</li>
<li>res = yield from Task(some_coroutine(...))</li>
</ul></li>
<li><p>Task can make progress without waiting for it</p>
<ul>
<li>As log as you wait for something else
  
  <ul>
<li>i.e. yield from </li>
</ul></li>
</ul></li>
</ul>
</blockquote>
<p>And I'm completely missing the point.</p>
<p>From my point of view both constructs are identical: </p>
<p>In case of bare coroutine - It gets scheduled, so the task is created anyways, because scheduler operates with Tasks, then coroutine caller coroutine is suspended until callee is done and then becomes free to continue execution.  </p>
<p>In case of <code>Task</code> - All the same - new task is schduled and caller coroutine waits for its completion.</p>
<p>What is the difference in the way that code executed in both cases and what impact it has that developer should consider in practice?</p>
<p>p.s.<br/>
Links to authoritative sources (GvR, PEPs, docs, core devs notes) will be very appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the calling side co-routine <code>yield from coroutine()</code> feels like a function call (i.e. it will again gain control when coroutine() finishes).</p>
<p><code>yield from Task(coroutine())</code> on the other hand feels more like creating a new thread. <code>Task()</code> returns almost instantly and very likely the caller gains control back before the <code>coroutine()</code> finishes.</p>
<p>The difference between <code>f()</code> and <code>th = threading.Thread(target=f, args=()); th.start(); th.join()</code> is obvious, right?</p>
</div>
<div class="post-text" itemprop="text">
<p>The point of using <code>asyncio.Task(coro())</code> is for cases where you <em>don't</em> want to explicitly wait for <code>coro</code>, but you want <code>coro</code> to be executed in the background while you wait for other tasks. That is what Guido's slide means by </p>
<blockquote>
<p>[A] <code>Task</code> can make progress without waiting for it...<strong>as long as you wait
  for something else</strong></p>
</blockquote>
<p>Consider this example:</p>
<pre><code>import asyncio

@asyncio.coroutine
def test1():
    print("in test1")


@asyncio.coroutine
def dummy():
    yield from asyncio.sleep(1)
    print("dummy ran")


@asyncio.coroutine
def main():
    test1()
    yield from dummy()

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
<p>Output:</p>
<pre><code>dummy ran
</code></pre>
<p>As you can see, <code>test1</code> was never actually executed, because we didn't explicitly call <code>yield from</code> on it.</p>
<p>Now, if we use <code>asyncio.async</code> to wrap a <code>Task</code> instance around <code>test1</code>, the result is different:</p>
<pre><code>import asyncio

@asyncio.coroutine
def test1():
    print("in test1")


@asyncio.coroutine
def dummy():
    yield from asyncio.sleep(1)
    print("dummy ran")


@asyncio.coroutine
def main():
    asyncio.async(test1())
    yield from dummy()

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
<p>Output:</p>
<pre><code>in test1
dummy ran
</code></pre>
<p>So, there's really no practical reason for using <code>yield from asyncio.async(coro())</code>, since it's slower than <code>yield from coro()</code> without any benefit; it introduces the overhead of adding <code>coro</code> to the internal <code>asyncio</code> scheduler, but that's not needed, since using <code>yield from</code> guarantees that <code>coro</code> is going to execute, anyway. If you just want to call a coroutine and wait for it to finish, just <code>yield from</code> the coroutine directly.</p>
<p><strong>Side note:</strong></p>
<p>I'm using <code>asyncio.async</code>* instead of <code>Task</code> directly <a href="https://docs.python.org/3/library/asyncio-task.html#task">because the docs recommend it</a>:</p>
<blockquote>
<p>Donâ€™t directly create <code>Task</code> instances: use the <code>async()</code> function or
  the <code>BaseEventLoop.create_task()</code> method.</p>
</blockquote>
<p>* Note that as of Python 3.4.4, <code>asyncio.async</code> is deprecated in favor of <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future"><code>asyncio.ensure_future</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As described in PEP 380, the accepted PEP document that introduced yield from, the expression <code>res = yield from f()</code> comes from the idea of the following loop:</p>
<pre><code>for res in f():
    yield res
</code></pre>
<p>With this, things become very clear: if <code>f()</code> is <code>some_coroutine()</code>, then the coroutine is executed. On the other hand, if <code>f()</code> is <code>Task(some_coroutine())</code>, <code>Task.__init__</code> is executed instead. <code>some_coroutine()</code> is not executed, only the newly created generator is passed as the first argument to <code>Task.__init__</code>.</p>
<p>Conclusion:</p>
<ul>
<li><code>res = yield from some_coroutine()</code> =&gt; coroutine continues execution and returns the next value</li>
<li><code>res = yield from Task(some_coroutine())</code> =&gt; a new task is created, which stores a non-executed <code>some_coroutine()</code> generator object.</li>
</ul>
</div>
<span class="comment-copy">There are no priorities in asyncio at all. For bare coroutine you have to use <code>yield from coro()</code> for coroutine running, in case of task construction like <code>async(coro())</code> will execute coroutine in parallel with others.</span>
<span class="comment-copy">Yes, you are right. Technically <code>yield from coro()</code> executes coroutine immediately, <code>async(coro())</code> schedules execution by <code>loop.call_soon()</code> call.</span>
<span class="comment-copy">Well, it is implementation details . Trollius doesn't use <code>yield from</code> and not fully compatible with asyncio.</span>
<span class="comment-copy">Custom event loops that fully compatible with asyncio utilizes <code>yield from</code> and reuses asyncio.Task which calls <code>loop.call_soon()</code>. Non 100% compatible systems may invite own contracts and have own implementation details.</span>
<span class="comment-copy">Yes, if PyPy will support 3.4 (only 3.2 for now AFAIK) it will work with coroutines in the same way as CPython 3.4 does. At least I think so but cannot guarantee. I'm CPython Core developer, not PyPy one.</span>
