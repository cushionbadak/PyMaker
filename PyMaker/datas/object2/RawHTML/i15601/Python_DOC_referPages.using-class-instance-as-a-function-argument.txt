<div class="post-text" itemprop="text">
<p>Suppose I have something like:</p>
<pre><code>class Dog:
   name = ""
   weight = 0
   def __init__(self,name,wg):
       self.name = name
       self.wg = wg

def feed(pet):
   pet.weight = pet.weight + 5
   if pet.weight &gt; 20:
       print("your dog would get too fat")
   else:
       print("it is safe to feed your dog")

my_dog = Dog("sparky",10)
feed(my_dog)
</code></pre>
<p>Is there anyway to have it so that the changes to pet.weight are not transferred to my_dog.weight?</p>
<p>I want the function to be able to take information from a class instance, perform calculations, and then leave the original instance unchanged.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are reassigning the value of the <code>pet.weight</code> attribute on this line:</p>
<pre><code>pet.weight = pet.weight + 5
</code></pre>
<p>Doing this affects the <code>pet</code> instance even after the code has returned from the <code>feed</code> function.</p>
<p>To fix the problem, simply create a local name that is equal to <code>pet.weight + 5</code> and work with that instead:</p>
<pre><code>def feed(pet):
   weight = pet.weight + 5
   if weight &gt; 20:
       print("your dog would get too fat")
   else:
       print("it is safe to feed your dog")
</code></pre>
<p>Now, we use the value of <code>pet.weight</code> but avoid changing it.</p>
<hr/>
<p>Also, you have defined your class incorrectly.  By doing this:</p>
<pre><code>class Dog:
   name = ""
   weight = 0
</code></pre>
<p>you have made <code>name</code> and <code>weight</code> to be <em>class attributes</em> of <code>Dog</code>.  This means that their values will be shared among all instances of <code>Dog</code> and modifying them will affect all instances.  In other words, all of your <code>Dog</code>s will have the same name and weight.</p>
<p>But then you do:</p>
<pre><code>def __init__(self,name,wg):
    self.name = name
</code></pre>
<p>which overshadows the class attribute <code>name</code> with an <em>instance attribute</em> of the same name.  Unlike class attributes, instance attributes are unique to each instance of a class.  So, <code>weight</code> is still a class attribute (shared by all <code>Dog</code>s) while <code>name</code> is now an instance attribute (unique to each <code>Dog</code>).</p>
<p>I think it would be best if you removed those lines and wrote the <code>Dog</code> class like so:</p>
<pre><code>class Dog:
   def __init__(self, name, weight):
       self.name = name
       self.weight = weight
</code></pre>
<p>Now, <code>name</code> and <code>weight</code> are both instance attributes. Each <code>Dog</code> has a unique name and weight and changing either of those values on one <code>Dog</code> will no longer affect the other <code>Dog</code>s.</p>
<p>For more information on this, you can check out these sources:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow">https://docs.python.org/3/tutorial/classes.html</a></li>
<li><a href="http://www.tutorialspoint.com/python/python_classes_objects.htm" rel="nofollow">http://www.tutorialspoint.com/python/python_classes_objects.htm</a></li>
</ul>
</div>
<span class="comment-copy">In fact, his attributes will not be shared in practice, because he assigns them in <code>__init__</code>.  This will create instance attributes that hide the class attributes. However, you're right that it's better to remove the class attributes, since it can lead to confusing attribute-sharing behavior if the instance attribute is deleted (or if a mutable class attribute is mutated instead of reassigned).</span>
<span class="comment-copy">Right, I have clarified.  I think the OP may have thought that he needed to pre-assign the <code>name</code> and <code>weight</code> attributes before assigning them in <code>__init__</code>.</span>
