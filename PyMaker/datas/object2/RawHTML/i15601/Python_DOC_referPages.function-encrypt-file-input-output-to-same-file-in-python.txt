<div class="post-text" itemprop="text">
<p>i have this script : <a href="http://pastebin.com/JypqErN5" rel="nofollow">http://pastebin.com/JypqErN5</a>
in this moment the function working input output file :</p>
<pre><code>encrypt_file(in_file, out_file, password):
</code></pre>
<p>need input output to same file, simile to this :</p>
<pre><code>encrypt_file(in_file, password):
</code></pre>
<p>im try to make same name input output bat not encrypt file correctly.</p>
<p>the function is this :</p>
<pre><code>def encrypt_file(input_file, output_file, password):
    with open(input_file, 'rb') as in_file, open(output_file, 'wb') as out_file:
        encrypt(in_file, out_file, password)
</code></pre>
<p>how can i make this edits ? thanks all</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't generally read from and write to a file at the same time.</p>
<p>So, you have two basic options.</p>
<hr/>
<p>First, you can read into memory, then encrypt, then write back out. Hopefully you have an <code>encrypt</code> function that works on strings rather than files. Since you've tagged this <code>pycrypto</code>, and all of its engines work on strings, this should be trivial. But if you have to use files, you can usually use <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow"><code>BytesIO</code></a> (or, for 2.x, <code>cStringIO.StringIO</code>), which wraps up a byte string in a file-like object, like this:</p>
<pre><code>def encrypt_file(path, password):
    temp = io.BytesIO()
    with open(path, 'rb') as in_file:
        encrypt(in_file, temp, password)
    with open(path, 'wb') as out_file:
        out_file.write(temp.getvalue())
</code></pre>
<p>This is dead simple, but of course it could be a problem if your files are gigantic.</p>
<hr/>
<p>Or you can write to a <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow"><code>NamedTemporaryFile</code></a>, then <a href="https://docs.python.org/3/library/os.html#os.replace" rel="nofollow"><code>replace</code></a> the original file with the temporary:</p>
<pre><code>def encrypt_file(path, password):
    dir = os.path.dirname(path)
    with open(path, 'rb') as in_file, tempfile.NamedTemporaryFile(dir=dir, delete=False) as out_file:
        encrypt(in_file, temp, password)
    os.replace(temp.name, path)
</code></pre>
<p>This has some major advantages over the other method—it doesn't necessarily take a ton of memory (that depends on how <code>encrypt</code> is written), and there's no chance of leaving behind a partially-written file if you pull the plug (<code>os.replace</code> is atomic—it either happens completely, or not at all). But it's a little more complicated. And, before Python 3.3, there was no <code>replace</code> function. On Unix, <code>rename</code> works just as well. On Windows… well, that's a whole mess.</p>
</div>
<span class="comment-copy">Use the existing function to write to a tempfile. If all goes well, rename and delete.</span>
<span class="comment-copy">Your pastebin link doesn't work. Consider pasting the code here.</span>
