<div class="post-text" itemprop="text">
<p>I came to python from Node.js and I'm accustomed to such error handling:</p>
<pre><code>doSmth(function(err, data) {
    if (err) {
        log(err);
    } else {
        fooSmth(data, function(err, res) {
            if (err) ...
        })
    }
})
</code></pre>
<p>Is it acceptable in Python to handle errors like</p>
<pre><code>def do_smth(arg):
    try:
        data = int(arg)
        return None, data
    except Exception as e:
        logger(e)
        return e, None


err, data = do_smth("1715")
if not err:
    print data
</code></pre>
<p>So that the function always return a tuple with exception and data values:</p>
<p>(None, data) or (Exception, None)</p>
</div>
<div class="post-text" itemprop="text">
<p>The Pythonic way would be to either move the <code>try</code> outside <code>do_smth</code>:</p>
<pre><code>def do_smth(arg):
    return int(arg)

try:
    data = do_smth("1715")
except ValueError: # test for a specific error wherever possible
    logger.exception()
else:
    print data
</code></pre>
<p>or to <code>return None</code> in a failing case:</p>
<pre><code>def do_smth(arg):
    try:
        return int(arg)
    except ValueError:
        logger.exception()

data = do_smth("1715")
if data is not None: # test singletons with is
    print data
</code></pre>
<p>Note that Python generally has a preference for <a href="https://docs.python.org/2.7/glossary.html#term-eafp"><em>"easier to ask for forgiveness than permission"</em></a>-style coding.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although there is no error in your code, you usually don't pass exceptions as arguments into other scopes unless the exception instance will be actually used as data. Exceptions in Python <strong>are lightweight</strong> and they bubble up to render a full traceback, so you must just let them live and happen.</p>
<p>If you expect some kind of exception happen when you call <code>do_smth</code>, just write code to handle it, like this:</p>
<pre><code># Definition
def do_smth(arg):
    return int(arg)


# Usage elsewhere
try:
    data = do_smth(['invalid', 'number'])
except TypeError:
    print('Incompatible type!')
except ValueError:
    print('Not a number.')
else:
    print('Conversion successful.')
</code></pre>
<p>Pro tip: avoid catching just <code>Exception</code>. Always expect specific types of errors, get used to write and raise your own exceptions as well. It helps a lot. <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">Read more</a> about it. ;)</p>
<p>PS: I also come from JavaScript as primary language; I'm sure you'll love Python too. :)</p>
</div>
<span class="comment-copy">Python has a good handling of exceptions, there is no reason to avoid using it just because you are used to another way (which is heavily based on asynchronous programming) from another language.</span>
<span class="comment-copy">If you do it that way you'll end up duplicating the exception handling code everywhere, that's a lot of extra code. Also, when you have exception handling anywhere that isn't the outermost level of your program you should make it as specific as possible and only catch those errors you expect and know how to handle. Don't catch <code>Exception</code> when <code>ValueError</code> will do.</span>
<span class="comment-copy">I like the EAFP mention. :)</span>
<span class="comment-copy">@jonrsharpe I didn't think about that in the case of an exception function returns 'None'. Thanks a lot</span>
<span class="comment-copy">JavaScript -&gt; CoffeeScript -&gt; Python || JavaScript -&gt; Python ?</span>
<span class="comment-copy">I was JavaScript from the rootz, before CoffesScript existed. I like it though, have tried in my latest projects. I'm more [hapilly] CoffeeScript || Python nowadays. :)</span>
