<div class="post-text" itemprop="text">
<p>Why does this not iterate?</p>
<pre><code>import logging
logging.basicConfig(level=logging.DEBUG)

x = []
y = [[] for n in range(0, 1)]
linedata = ["0","1","2"]
x.append( linedata[0] )

d = linedata[1:] 
logging.debug( "d: {}".format(d) )
e = enumerate(d)
logging.debug( list(e) )
for k, v in e:
  logging.debug( "k:{} v:{}".format( k, v ) )
  y[int(k)].append( v )
  #for d in [(0,1)]:
  #logging.debug( "k:{} v:{}".format( d[0], d[1] ) )
  #y[d[0]].append( d[1] )

logging.debug( x )
logging.debug( y )
</code></pre>
<p>Output:</p>
<pre><code>DEBUG:root:d: ['1', '2']
DEBUG:root:[(0, '1'), (1, '2')]
DEBUG:root:['0']
DEBUG:root:[[]]
</code></pre>
<p>Docs:</p>
<ul>
<li><a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow">https://docs.python.org/3/reference/compound_stmts.html#for</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow">https://docs.python.org/3/library/functions.html#enumerate</a></li>
</ul>
<p>Run online: <a href="http://goo.gl/75yuAd" rel="nofollow">http://goo.gl/75yuAd</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Any iterator is "one-shot" in sense that, when it is fully executed, it becomes empty and can't be used anymore. When you called <code>logging.debug( list(e) )</code>, you have used it in the list() function and so exhausted it. So, the following attempt to use it in <code>for</code> cycle gives nothing.</p>
<p>With modified code when enumerate() is called again after this debug, the script behavior gets changed - it raises IndexError on <code>y[int(k)].append( v )</code>; I won't fix this for you but this is enough sign that cycle body begins being executed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>enumerate</code> returns an iterator:</p>
<pre><code>&gt;&gt;&gt; e = enumerate(range(4))
&gt;&gt;&gt; list(e)
[(0, 0), (1, 1), (2, 2), (3, 3)]
&gt;&gt;&gt; list(e)
[]
</code></pre>
<p>Once the end is reached, <code>e.next()</code> raises a <code>StopIteration</code> exception:</p>
<pre><code>&gt;&gt;&gt; e.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>Thus you cannot iterate twice over <code>e</code>. You will have to recreate the iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>this line : </p>
<pre><code>logging.debug( list(e) )
</code></pre>
<p>consumes the iterator, so when you get here:</p>
<pre><code>for k, v in e:
   # ...
</code></pre>
<p><code>e</code> is already exhausted.</p>
</div>
<div class="post-text" itemprop="text">
<p>try this instead: </p>
<pre><code>e = list(enumerate(d))
</code></pre>
</div>
<span class="comment-copy">Try: for k, v in enumerate(d):</span>
<span class="comment-copy">Oh my! Of course..</span>
<span class="comment-copy"><i>"Any iterator is "one-shot" in sense that, when it is fully executed, it becomes empty and can't be used anymore"</i> : this is not true. You can easily write an infinite iterator, and there are a couple ones in <code>itertools</code>, like <code>count()</code>, <code>cycle()</code> and <code>repeat()</code>.</span>
<span class="comment-copy">@brunodesthuilliers That doesn't invalidate the statement. Those are examples of iterators which don't become exhausted.</span>
<span class="comment-copy">@Marcin: half-empty glass vs half-full glass... But Python newcomers should know that not all iterators are finite.</span>
<span class="comment-copy">Could you add some additional information along with your answer?</span>
