<div class="post-text" itemprop="text">
<p>Even if I do not set thread as Daemon, shouldn't the program exit itself once queue.join(), completes and unblocks?</p>
<pre><code>#!/usr/bin/python
import Queue
import threading
import time

class workerthread(threading.Thread):
        def __init__(self,queue):
                threading.Thread.__init__(self)
                self.queue=queue
        def run(self):
                print 'In Worker Class'
                while True:
                        counter=self.queue.get()
                        print 'Going to Sleep'
                        time.sleep(counter)
                        print ' I am up!'
                        self.queue.task_done()
queue=Queue.Queue()

for i in range(10):
        worker=workerthread(queue)
        print 'Going to Thread!'
        worker.daemon=True
        worker.start()
for j in range(10):
        queue.put(j)
queue.join()
</code></pre>
<p>Any help will be highly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>queue.join()</code> in the main thread, all it does is block the main threads until the workers have processed everything that's in the queue. It does not stop the worker threads, which continue executing their infinite loops.</p>
<p>If the worker threads are non-deamon, their continuing execution prevents the program from stopping irrespective of whether the main thread has finished.</p>
</div>
<div class="post-text" itemprop="text">
<p>I encountered the situation too, everything in the queue had been processed, but the main thread blocked at the point of Queue.task_done(), here is code block.</p>
<pre><code>import queue
def test04():
    q = queue.Queue(10)
    for x in range(10):
        q.put(x)

    while q.not_empty:
        print('content---&gt;',q.get())
        sleep(1)
    re = q.task_done()  
    print('state---&gt;',re,'\n')
    q.join()
    print('over \n')

test04()
</code></pre>
</div>
<span class="comment-copy">The first paragraph of your question explains it all. It would help you told us what it is specifically that you find confusing.</span>
<span class="comment-copy">I cant understand the first paragraph! thats where I need help</span>
<span class="comment-copy">All the first paragraph is saying is that the program exits as soon as all non-deamon threads have exited.</span>
<span class="comment-copy">I get it! So if I write worker.daemon=False, that means ?</span>
<span class="comment-copy">One more thing, even if I do not set the thread as Daemon, should not the thread exit automatically once all the queue tasks has been completed&gt;</span>
<span class="comment-copy">Thanks for the clear interpretation! Much appreciated</span>
<span class="comment-copy">as per <a href="https://docs.python.org/3/library/asyncio-queue.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio-queue.html</a> coroutine join() Block until all items in the queue have been gotten and processed.  The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls task_done() to indicate that the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, join() unblocks. So you should call q.task_done()  as many times as you put items in the queue.</span>
