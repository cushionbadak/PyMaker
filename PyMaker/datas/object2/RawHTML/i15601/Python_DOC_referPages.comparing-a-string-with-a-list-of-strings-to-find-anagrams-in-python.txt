<div class="post-text" itemprop="text">
<p>I am trying to work out how to compare a string (str1) with a list of strings (str_list), and then return a list of all the strings in str_list that are anagrams of str1.</p>
<p>I have previously defined a function to compare two strings and print True if they are anagrams of each other, and False if not.</p>
<pre><code>def anagram(str1,str2):
      if sorted(str1) == sorted(str2):
             print (True)
      else:
             print (False)
</code></pre>
<p>I have attempted to start to define the next function but I'm struggling to return the list of strings that are anagrams.</p>
<pre><code>def find_anagrams_in_word_list(str1, str_list):
     str_list = [] #assumed an empty list has to be made first
     str_list = input
     if sorted(str1) in sorted(str_list):
           #return strings that are anagrams
</code></pre>
<p>Not sure if this is how I'm meant to do it as I'm still a beginner, so any pointers would be very helpful!</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The faster way to do this would be to use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a></p>
<pre><code>from collections import Counter
def isAnagram(str1, str2):
    return Counter(str1) == Counter(str2)

def find_anagrams_in_word_list(str1, str_list):
    return [word for word in str_list if isAnagram(str1, word)]
</code></pre>
<p>Note that your <code>isAnagram</code> will not behave as you expect because you only <code>print</code> the value, you do not <code>return</code> it. For you to be able to use your <code>isAnagram</code> function, as I did in my above list comprehension for example, you'd have to do one of the following.</p>
<pre><code>def anagram(str1,str2):
    if sorted(str1) == sorted(str2):
        return True
    else:
        return False
</code></pre>
<p>Or more concisely</p>
<pre><code>def anagram(str1,str2):
    return sorted(str1) == sorted(str2):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generators for that , Also note that the result of <code>sorted</code> function is a list and you need to convert it to string with <code>''.join()</code> and then compare :</p>
<pre><code>def find_anagrams_in_word_list(str1, str_list):
     return [ i for i in str_list if ''.join(sorted(str1)) == ''.join(sorted(i))]
</code></pre>
<p>Demo :</p>
<pre><code>&gt;&gt;&gt; l =['abcd', 'msnd']
&gt;&gt;&gt; find_anagrams_in_word_list('cba',l)
['abcd']
</code></pre>
</div>
<span class="comment-copy">Just a side note.. but writing something like if x: print(True) else: print(False) is exacly the same as print(x). In your case just write print(sorted(str1) == sorted(str2))</span>
<span class="comment-copy">I don't understand what you're trying to do.  You set the input list to empty for some reason, then you set it to a function, and then you try to iterate over it.  <code>''.join(sorted(str1)) in ''.join(sorted(i))</code> isn't a valid anagram test anyway, because <code>'abc'</code> is in <code>'abcd'</code> but they're not anagrams.</span>
<span class="comment-copy">yep , that commands must be out of the function !</span>
<span class="comment-copy">This will not produce the correct result. As @DSM said, it will include substrings of the original word, which are not valid anagrams.</span>
<span class="comment-copy">@Cyber i think i have a miss understanding about anagrams ! can you explain ?</span>
<span class="comment-copy">@Kasra Here is an example of an anagram: "rose" and "sore". They have the same letters in a different order. "ore" and "sore" are NOT anagrams, one is simply a subset of the other.</span>
