<div class="post-text" itemprop="text">
<p>So I have recently started programming python and I have one issue with this code. When the player gets the answer incorrect after using all their lives it should print the answer which it does but only the first time the layer plays i they play again they don't get told the correct answer if the get it wrong. It also does this when the player gets the answer correct. Plus the number the computer chooses stays the same when you use the play again function. Please try and help me but bear in mind my understanding cane be very limited in some aspects of python. I've included lots of comments to help others understand whats going on. I have included my code and what I get in the shell.</p>
<p>Code:</p>
<pre><code>#imports required modules
import random
from time import sleep

#correct number variable created
num = 0
#generates number at random
comp_num = random.randint(1,10)
print('I\'m thinking of a number guess what it is...\n')

#main game code
def main():
    #lives created
    lives = 3
    #correct number variable reset
    num = 0
    while lives &gt;= 1:
        #player guesses
        guess = int(input('Guess: '))
        if comp_num == guess:
            #if correct says well done
            input('\nWell Done! You guessed Correctly!\n')
            #player doesn't get told what the number is if there right
            num = num +1
            break
        elif comp_num &gt;= guess:
            #if guess is too low tells player
            #one live taken for incorrect guess
            lives = lives -1
            print('\nToo low!\n')
            #player is told how many lives they have left
            print('You guessed incorrectly. You have',lives,'live(s) remaining.\n')
        elif comp_num &lt;= guess:
            #if guess is too high tells player
            #one live taken for incorrect guess
            lives = lives -1
            print('\nToo high!\n')
            #player is told how many lives they have left
            print('You guessed incorrectly. You have',lives,'live(s) remaining.\n')

def end():
    #asks player if they want to play again
    play_again = input('Would you like to play again?[Y/N] ')
    while play_again.lower() == 'y':
        #if they do game resets and plays again
        if play_again.lower() == 'y':
            comp_num = random.randint(1,10)
            print('\nI\'m thinking of a number guess what it is...\n')
            main()
            play_again = input('Would you like to play again?[Y/N] ')
            if play_again.lower() == 'n':
                break
    if play_again.lower() == 'n':
        #if they don't game ends
        input('\nOk, Press enter to exit')
        exit()

main()

if num != 1:
        #if player guesses incorrectly they get told the correct awnser
        print('The number I was thinking of was...',comp_num,'!\n')

end()
</code></pre>
<p>SHELL:</p>
<pre><code>I'm thinking of a number guess what it is...

Guess: 5

Well Done! You guessed Correctly!

The number I was thinking of was... 5 !

Would you like to play again?[Y/N] y

I'm thinking of a number guess what it is...

Guess: 5

Well Done! You guessed Correctly!

Would you like to play again?[Y/N] y

I'm thinking of a number guess what it is...

Guess: 5

Well Done! You guessed Correctly!

Would you like to play again?[Y/N] y

I'm thinking of a number guess what it is...

Guess: 5

Well Done! You guessed Correctly!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your function is that you have a global variable named <code>num</code>, but your <code>main</code> function also has a local variable named <code>num</code>. The <code>num += 1</code> line inside <code>main</code> only changes the local variable. But the <code>if num != 1</code> at the end checks the global variable.</p>
<p>To fix this, add a global statement:</p>
<pre><code>def main():
    global num
    # the rest of your code
</code></pre>
<hr/>
<p>Why does this work?</p>
<p>In Python, any time you write an assignment statement (like <code>num = 0</code> or <code>num += 1</code>) in a function, that creates a local variableâ€”unless you've explicitly told it not to, with a <code>global</code> statement.* So, adding that <code>global num</code> means that now, there is no local variable <code>num</code>, so <code>num += 1</code> affects the global instead.</p>
<p>This is explained in more detail in the tutorial section on <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow">Defining Functions</a>.</p>
<p><sub>* Or a <code>nonlocal</code> statement, but you don't want to learn about that yet.</sub></p>
<hr/>
<p>However, there's a better way to fix this. Instead of using a global variable, you can <code>return</code> the value in the local variable. Like this:</p>
<pre><code>def main():
    # your existing code
    return num

# your other functions

score = main()
if score != 1:
    #if player guesses incorrectly they get told the correct awnser
    print('The number I was thinking of was...',comp_num,'!\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok so my friend looked at my code and we solved it together. We have fixed both the number staying the same and being told the correct answer by doing this.</p>
<pre><code>#imports required modules
import random

#correct number variable created
num = 0

#generates number at random
comp_num = random.randint(1,10)

print('I\'m thinking of a number guess what it is...\n')

#main game code
def main():
    #generates number at random
    comp_num = random.randint(1,10)
    #set num as a global variable
    global num
    #lives created
    lives = 3
    while lives &gt;= 1:
        #player guesses
        guess = int(input('Guess: '))
        if comp_num == guess:
            #if correct says well done
            print('\nWell Done! You guessed Correctly!\n')
            break
        elif comp_num &gt;= guess:
            #if guess is too low tells player
            #one live taken for incorrect guess
            lives = lives -1
            print('\nToo low!\n')
            #player is told how many lives they have left
            print('You guessed incorrectly. You have',lives,'live(s) remaining.\n')
            if lives == 0:
                    #if player guesses incorrectly they get told the correct awnser
                    print('The number I was thinking of was...',comp_num,'!\n')
        elif comp_num &lt;= guess:
            #if guess is too high tells player
            #one live taken for incorrect guess
            lives = lives -1
            print('\nToo high!\n')
            #player is told how many lives they have left
            print('You guessed incorrectly. You have',lives,'live(s) remaining.\n')
            if lives == 0:
                    #if player guesses incorrectly they get told the correct awnser
                    print('The number I was thinking of was...',comp_num,'!\n')

def end():
    #asks player if they want to play again
    play_again = input('Would you like to play again?[Y/N] ')
    while play_again.lower() == 'y':
        #if they do game resets and plays again
        if play_again.lower() == 'y':
            comp_num = random.randint(1,10)
            print('\nI\'m thinking of a number guess what it is...\n')
            main()
            play_again = input('Would you like to play again?[Y/N] ')
            if play_again.lower() == 'n':
                break
    if play_again.lower() == 'n':
        #if they don't game ends
        input('Ok, Press enter to exit')
        exit()

#calls main section of game
main()


#calls end of game to give option of playing again and reseting game
end()
</code></pre>
<p>I would like to thank everyone that helped out as with out I still wouldn't be able to see the problem within my code let alone fix it. For this reason I will me marking @abarnert 's answer as the accepted answer as he found the bug. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this code. I did it as a school assignment </p>
<pre><code>import random
print "Welcome to guess my number!"

number = random.randint(1,100)

count = 1
while count &lt;= 5:
    guess = int(raw_input("Guess an integer between 1 and 100 (inclusive): "))
    if guess == number:
        print "Correct! You won in",count,"guesses!"
        break
    if guess &gt; number:
        print "Lower!"
    else:
        print "Higher!"
    count += 1

if count == 6:
    print "Man, you really suck at this game. The number was", number
</code></pre>
</div>
<span class="comment-copy">As a side note: You can use double-quotes around strings, so you don't need to escape apostrophes with backslashes. For example: <code>print("I'm thinking of a number guess what it is...\n")</code>. Also, do you really want all those <code>\n</code> all over the place, giving you a blank line between every line of output?</span>
<span class="comment-copy">You initialise your variables before <code>main</code> and then call <code>main</code> repeatedly (using the same variables). Instead, initialise your variables inside <code>main</code> so they're not reused.</span>
<span class="comment-copy">Thank you @abarnert will change it to double quote marks - I need to have the alternate lines due to poor computer systems at school otherwise it all gets squashed together.</span>
<span class="comment-copy">Thanks @khelwood I will change my code to make this work.</span>
<span class="comment-copy">I have tried both of these but neither of them work I still have the same problem. Also the computer number stays the if the player plays again. Is this because comp_num needs to be set within main()?</span>
<span class="comment-copy">@Hannah_sfc: First, I just tested your code with both changes, and the initial problem definitely does go away. You can <a href="http://goo.gl/fM91c9" rel="nofollow noreferrer">run it online</a> and see for yourself. Meanwhile, yes, the reason <code>comp_num</code> never changes is that you don't have any code that ever sets it after the initial startup. Setting it in <code>main</code> will workâ€”but if you want to leave it as a global, you will need another <code>global</code> statement; otherwise the "number I was thinking of" line will show the wrong value.</span>
<span class="comment-copy">Just a dump of "<i>this code works now"</i> is not a helpful answer; please add an explanation of what the problem was and what exactly you did to fix it.</span>
<span class="comment-copy">abarnets answer is the accepted answer because that was the issue and I have included my code because it shows it in an example.</span>
<span class="comment-copy">Thank you very much. This is similar to the code I started with however my teacher wanted me to variables in as later on when it comes to the exam functions reach the higher mark bands.</span>
<span class="comment-copy">I have a function version of it too. But your program did not have explicit usage of functions.</span>
