<div class="post-text" itemprop="text">
<pre><code>list1 = ['Hello', 10, None]
list2 = [g.lower() for g in list1 if isinstance(g, str)]
list3 = [g.lower() if isinstance(g,str) else g for g in list1]
list4 = [isinstance(g, str) and g.lower() or g for g in list1]
</code></pre>
<p>If I want to convert the string in <code>list</code> to lowercase, I can use the method in <code>list2</code> and the output will be <code>['hello']</code>.  </p>
<p>In addition to this conversion, if I want to keep integers (which is <code>10</code> in this case) and <code>None</code>, the methods in both <code>list3</code> and <code>list4</code> will work and the output will be <code>['hello', 10, None]</code>.  </p>
<p>My question is that I can't understand how the method in <code>list4</code> works.</p>
</div>
<div class="post-text" itemprop="text">
<p>To start, writing code like this:</p>
<pre><code>condition and value1 or value2
</code></pre>
<p>was how people implemented a ternary conditional operator in Python before the:</p>
<pre><code>value1 if condition else value2
</code></pre>
<p><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional expression</a> was introduced in version 2.5 because of <a href="https://www.python.org/dev/peps/pep-0308" rel="nofollow">PEP 0308</a>.  Using the old method is now deprecated in favor of the slightly more efficient and far more readable newer method.</p>
<hr/>
<p>The old method works because of how <code>and</code> and <code>or</code> operate in Python.  Instead of returning boolean results like in most other languages, these operators return values.</p>
<p>Doing <code>a and b</code> returns <code>a</code> if <code>a</code> evaluates to <code>False</code>; otherwise, it returns <code>b</code>:</p>
<pre><code>&gt;&gt;&gt; 0 and 1
0
&gt;&gt;&gt; 1 and 0
0
&gt;&gt;&gt; 1 and 2
2
&gt;&gt;&gt;
</code></pre>
<p>Doing <code>a or b</code> returns <code>a</code> if <code>a</code> evaluates to <code>True</code>; otherwise, it returns <code>b</code>:</p>
<pre><code>&gt;&gt;&gt; 1 or 0
1
&gt;&gt;&gt; 0 or 1
1
&gt;&gt;&gt; 1 or 2
1
&gt;&gt;&gt;
</code></pre>
<p>Also, in case you do not know, <code>0</code> evaluates to <code>False</code> while every other number evaluates to <code>True</code>.</p>
<hr/>
<p>Coming to your code, this:</p>
<pre><code>isinstance(g, str) and g.lower() or g
</code></pre>
<p>is actually interpreted by Python like:</p>
<pre><code>(isinstance(g, str) and g.lower()) or g
</code></pre>
<p>Now if <code>isinstance(g, str)</code> returns <code>False</code> (<code>g</code> is not a string):</p>
<pre><code>(False and g.lower()) or g
</code></pre>
<p><code>False</code> is returned by <code>and</code>:</p>
<pre><code>False or g
</code></pre>
<p>and then <code>or</code> returns <code>g</code>.  Thus, we avoided calling <code>.lower()</code> on a non-string type.</p>
<p>If however <code>isinstance(g, str)</code> returns <code>True</code> (<code>g</code> is a string):</p>
<pre><code>(True and g.lower()) or g
</code></pre>
<p><code>and</code> returns <code>g.lower()</code>:</p>
<pre><code>g.lower() or g
</code></pre>
<p>and then <code>or</code> returns <code>g.lower()</code>, which is fine because <code>g</code> is a string.</p>
<hr/>
<p>Summed up, these two expressions:</p>
<pre><code>g.lower() if isinstance(g,str) else g

isinstance(g, str) and g.lower() or g
</code></pre>
<p>are functionally equivalent.  <strong>But please use the first!!</strong>  The other is terrible for readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting <a href="https://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow"><strong>the doc</strong></a>:</p>
<blockquote>
<p>The expression <code>x and y</code> first evaluates <code>x</code>; if <code>x</code> is false, its
  value is returned; otherwise, <code>y</code> is evaluated and the resulting value
  is returned.</p>
<p>The expression <code>x or y</code> first evaluates <code>x</code>; if <code>x</code> is true, its value is
  returned; otherwise, <code>y</code> is evaluated and the resulting value is
  returned.</p>
</blockquote>
<p>Because of precedence rules, <code>isinstance(g, str) and g.lower() or g</code> is actually evaluated as 
<code>(isinstance(g, str) and g.lower()) or g</code> (multiplication is of higher precedence than addition).</p>
<p>That basically means the following:</p>
<ul>
<li>if <code>isinstance(g, str)</code> is true, result of <code>g.lower()</code> will be taken</li>
<li>otherwise <code>g</code> will be taken</li>
</ul>
<p>As you see, it's the same thing that you have in <code>list3</code> operation.</p>
</div>
<span class="comment-copy">Do not use <code>list</code> as a name. <code>list</code>  is a builtin function and you'd better leave it alone.</span>
<span class="comment-copy">@gboffi So are list, str, dict, tuple, etc all built-in functions?</span>
<span class="comment-copy">Please post the actual code you are using. As it stands, line 2 should give you an error</span>
<span class="comment-copy">you refer to list2 when you create it. I tried it on my machine, it gives an error. You probably need to replace list2 with list in the 2nd line.</span>
<span class="comment-copy">Also, in my python (2.7.3) list2 to list4 are all['hello']. Are you sure your code is correct?</span>
