<div class="post-text" itemprop="text">
<p>I'm trying to run Bazaar version control via Python. I have been using "os.system('')" for this purpose (although I now believe this is not the recommended command to run things via the command prompt).</p>
<p>For one section I want to run the command "BZR commit [file] -m '[text]'". This runs Bazaar and commits the changes made to [file] with the message [text]. When this is run, a few lines of text is printed by Bazaar in the command prompt which basically says if it was successful or not.</p>
<p>Running this command with "os.system('[message]')" (where [message] is the previously mentioned command), the command prompt succesfully carries out the command and prints the relevant lines. I desire to get these lines back in Python to check what was done, etc. This is where my problem is.</p>
<p>I tried something like "result = os.system('[message]')" but this doesn't work (it gives 'result = 3' where 3 is definitely not the output in the command prompt).</p>
<p>I have tried searching for a solution and came across many suggestions regarding 'subprocess' (such as <a href="https://stackoverflow.com/questions/24401391/python-how-to-execute-command-prompt-and-get-the-output-from-it">here</a>). However, these don't seem to work (or at least I'm not getting them to work), and results from using techniques such as using 'Popen' and 'communicate()' to try and get output and errs leads to getting 'None' for both. It could be that I'm just doing something wrong.</p>
<p>Any help would be very appreciated as I feel I'm going around in circles. Also, apologies if this has been solved somewhere, I really did try and find a solution via google, and searching stackoverflow, but was unable to correctly execute them.</p>
<p>If anyone needs any further information in order to help I'd be more than happy to help.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Cyber mentioned, <code>subprocess.check_output</code> is a really easy way of doing it:</p>
<pre><code>import subprocess
file = "foo.txt"
text = "'comment'"
output = subprocess.check_output(["BZR", "commit", file, "-m", text])
print(output)
</code></pre>
<p>Disclaimer: This code will only work with Python 2.7+</p>
</div>
<div class="post-text" itemprop="text">
<p>I do something similar for my python programs using git to grab version information. 
Hopefully, it will work for your version control as well. 
Working example:</p>
<pre><code>from subprocess import Popen, PIPE

p1 = Popen(['git', 'log' , '-n', '1'], stdout=PIPE, shell=False)
msgout = p1.communicate()[0]  
#msgerr = p1.communicate()[1]  # this captures stderr info but you have to rerun p1
print msgout
</code></pre>
</div>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a></span>
<span class="comment-copy">add the subprocess code you have tried and the error output</span>
<span class="comment-copy">You might be able to use <code>with subprocess.Popen().stdout as output:</code>, followed by <code>for line in output:</code> as shown near the end of the script in <a href="http://stackoverflow.com/questions/4415134/python-on-windows-run-multiple-programs-sequentially-in-one-command-prompt/4416529#4416529">this answer</a>.</span>
<span class="comment-copy">Thanks for the help:  I've tried it, it doesn't seem to be working (I'm using Python2.7).  One problem is: BZR seems to be itself python based (or at least similar) so when it's running, if it hits an error it feeds back into the Python script and stops it (thus meaning no 'output' is stored). At least that's how I'm interpreting it.  The other problem is: If it runs the command without issue then it appears to store "" (i.e. an empty string).</span>
<span class="comment-copy">Python errors are printed to <code>stderr</code>, not <code>stdout</code>, hence why it won't store the output if it crashes. You could do something like: <code>output = subprocess.check_output(["/bin/sh","BZR commit foo.txt -m 'comment' 2&gt;&amp;1"])</code>. This will redirect <code>stderr</code> messages to be printed to <code>stdout</code>.</span>
<span class="comment-copy">Actually, that previous suggestion might not work, but the information you are interested in may very well be in <code>stderr</code> and not <code>stdout</code>. Also, you should put the call in a <code>try:except</code> block so that a failed subprocess will not crash your top level program.</span>
<span class="comment-copy">Thanks for the reply.  I have that a try but got a handful of lines of error code which ended with: "WindowsError: [Error 2] The system cannot find the file specified" I can confirm that the file being committed isn't the problem (in terms of being found).   Edit (was trying whilst you added another reply!): That's fair. Yeah I used a try:except block, which to be honest may work in general for what I'm trying to achieve. But I just wanted to try and get the output in case I ever wanted to do something similar but different in the future.</span>
<span class="comment-copy">If you are using Windows, then <code>/bin/sh</code> won't exist as it's a Unix-shell type program (unless you are using <code>cygwin</code>, that is...) You could try putting the path to <code>cmd</code> since you're on windows and try that. Or you could have your python program generate a batch script that writes the output to a file, etc. My only advice would be to get <code>subprocess.check_output</code> working with something simple (like a batch script, python program, cmd, etc.) and then once you've figured out the simple case, apply it to your more complex case.</span>
