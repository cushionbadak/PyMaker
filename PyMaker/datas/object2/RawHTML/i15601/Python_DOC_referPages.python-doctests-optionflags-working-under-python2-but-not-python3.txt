<div class="post-text" itemprop="text">
<p>I have a particular Doctest that is working correctly in python 2.7 but not in python 3.4.</p>
<pre><code>"""
Trying to build a cyclic network (should fail):

    &gt;&gt;&gt; buildCyclicNetwork(False)
    Traceback (most recent call last):
        ...
    NetworkConstructionException: Loop in network graph.
"""

if __name__ == "__main__":
    runModuleTestSuite(__import__('__main__'))
</code></pre>
<p>The testsuite is compiled here, with the options</p>
<pre><code>def runModuleTestSuite(module):
    """Runs a test suite for all local tests."""
    suite = TestSuite([TestLoader().loadTestsFromModule(module)])

    # Add local doctests
    optionflags = ELLIPSIS | NORMALIZE_WHITESPACE | REPORT_ONLY_FIRST_FAILURE 

    try:
        suite.addTest(DocTestSuite(module, optionflags=optionflags))
    except ValueError:
        # No tests have been found in that module.
        pass

    TextTestRunner().run(suite)
</code></pre>
<p>I've tried to use # doctest: +ELLIPSIS in the docstring itself, but this does not solve anything.  I'm puzzled as to why this works under 2.x but not 3.x. The particular problem here is an ellipses eliding the path in the traceback.  When the test fails it outputs:</p>
<pre><code>Expected:
   Traceback (most recent call last):
      ...
   NetworkConstructionException: Loop in network graph.
Got:
   Traceback (most recent call last):
   File "/usr......complete trace path"
   networks.network.NetworkConstructionException: Loop in network graph.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is covered in the documentation. Although the <a href="https://docs.python.org/3/library/doctest.html#doctest.ELLIPSIS" rel="nofollow"><code>ELLIPSIS</code></a> docs don't directly explain it, the next section on <a href="https://docs.python.org/3/library/doctest.html#doctest.IGNORE_EXCEPTION_DETAIL" rel="nofollow"><code>IGNORE_EXCEPTION_DETAIL</code></a> says:</p>
<blockquote>
<p>It will also ignore the module name used in Python 3 doctest reports. Hence both of these variations will work with the flag specified, regardless of whether the test is run under Python 2.7 or Python 3.2 (or later versions) … </p>
<p>Note that <code>ELLIPSIS</code> can also be used to ignore the details of the exception message, but such a test may still fail based on whether or not the module details are printed as part of the exception name. Using <code>IGNORE_EXCEPTION_DETAIL</code> and the details from Python 2.3 is also the only clear way to write a doctest that doesn’t care about the exception detail yet continues to pass under Python 2.3 or earlier (those releases do not support doctest directives and ignore them as irrelevant comments).</p>
</blockquote>
<p>In other words, the problem is that <code>...</code> will not skip over the <code>networks.network.</code> part that 3.x tracebacks print out, this is a known limitation in <code>doctest</code>, and there's no way around it short of using <code>IGNORE_EXCEPTION_DETAIL</code> instead.</p>
<p>If all you want to check is the type, this is actually better—it's simpler, more readable, and harder to get wrong. But what if you want to check the exception value, not just the types? There are hacky workarounds to do that (e.g., replace <code>builtins.isinstance</code> with a function that calls an <code>__instancehook__</code> so you can define a class that's a superclass of only if the value matches), but I don't think those are worth doing. If you really need to distinguish a specific exception, it should probably be a distinct subtype in the first place.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to enable the <a href="https://docs.python.org/3/library/doctest.html#doctest.IGNORE_EXCEPTION_DETAIL" rel="nofollow"><code>IGNORE_EXCEPTION_DETAIL</code></a> flag.  Right now, the exception is failing to match because of the <code>networks.network.</code> garbage at the front of the exception name.</p>
</div>
<span class="comment-copy">As a side note, if you don't care about 2.5 or 3.2 or earlier, you may want to look at a module called <code>docsix</code>, which is an extension to <code>doctest</code> designed to make doctests play nice with 2.6+ and 3.3+. I don't remember if it helps with this particular feature, but it helps at least some things that are frustrating to work around, like letting you write <code>b</code> or <code>u</code> string literals and that will also match bare string reprs on 2.x and 3.x respectively.</span>
<span class="comment-copy">Also, some of the third-party test libraries can collect doctests and run them. I've only used <code>nose</code> (with its doctest plugin), and I only used it to migrate from doctests to external unit tests (while also migrating code from 2.5-2.7 to 2.6+/3.3+), so I can't promise any of them will be better or more configurable, but… it may be worth looking around.</span>
<span class="comment-copy">I'll look into it, some of the other tests that have been problematic have involved the differences in 2.x and 3.x repr, so that might be useful. I was able to get around them in other less elegant ways, but it would be nice to have a less hacked solution. Thanks!</span>
<span class="comment-copy">Thanks for the help. I did try using IGNORE_EXCEPTION_DETAIL (should have put that in the original post) as one of the option flags but it doesn't seem to make a difference. It still returns the full traceback with path.  I've been having problems with other tests in python 3, where ELLIPSIS is used in a more basic context not involving an exception.  I'm beginning to suspect that the optionflags are being ignored altogether, but cannot pinpoint why this would change between language versions.</span>
<span class="comment-copy">Scratch the above. runModuleTestSuite() is called from another file, where the optionflags are passed to individual tests. Using IGNORE_EXCEPTION_DETAIL here passes the test. Thank you!</span>
