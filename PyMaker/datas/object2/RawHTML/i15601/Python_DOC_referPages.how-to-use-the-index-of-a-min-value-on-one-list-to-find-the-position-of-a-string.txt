<div class="post-text" itemprop="text">
<p>I am currently trying write a function to use the position of a min value on one list to reference a string on another list.</p>
<p>I have two list, one with states names and another with floats.  I am using the min method to get the minimum value of the float list.  The problem is, how I use an index to mark the position of that value then use it to return the state that holds the same position on the other list?</p>
<p>This is the code I am currently using, but it does not go all the way through the list before it returns a value, which is way too soon in the list.</p>
<pre><code>def stateheart_min():
    for item in heartdis_flt:
        heartcount=0
        heartcount+=1
        min_index=0
        if item == min(heartdis_flt):
            min_index=heartcount
            return states_fin[min_index:min_index+1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit terse to read, but here is an alternative way to do it. You can use <code>min</code> to find the minimum value in <code>values</code>. Then you can use <code>index</code> to find the index at which the minimum occurs in the list. You can then use that returned index to index the correct element from <code>states</code>.</p>
<pre><code>states = ['NY', 'PA', 'CA', 'MI']
values = [15.0, 17.5, 3.5, 25.4]

&gt;&gt;&gt; states[values.index(min(values))]
'CA'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>index = min(zip(values, range(len(values))))[1]
</code></pre>
<p>This first builds a list of pairs, each having a value as first item and its index as second item.  So when you find the minimum, the first item still has the main impact (the index will only be taken into account if the values are equal).  Taking the index is then done using <code>[1]</code> in the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not entirely sure what you are asking, but a dictionary might be a better choice. Also setting heartcount=0 inside the loop resets the variable back to 0 each iteration. Check your variables inside the loop.</p>
</div>
<span class="comment-copy">wait until after your For item statement to issue the return.</span>
<span class="comment-copy">If you need to keep track of the indices while iterating, use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> - it is designed just for that.  <code>for index, thing in enumerate(iterable): ...</code></span>
<span class="comment-copy">But it unnecessarily <i>searches</i> for the minimum value after it has been computed.</span>
<span class="comment-copy">@Alfe, but it works and is readable and unless the lists are humongus it won't matter.</span>
<span class="comment-copy"><i>Humongus!</i> :-D  Yeah, right, but that's the language's fault.  By giving us a simple-looking but expensive function like the <code>index</code> method of lists, it encourages us to make an unnecessarily expensive call.  I would propose not to fall into that nasty trap.  After all, you don't <i>know</i> the size of OP's lists.  And you don't <i>know</i> whether or not his piece of code will at some time in the future be in use for <i>humongus</i> lists.  I already found such pieces of code in my professional career in legacy code.  I bet the writer of that code never imagined to get <i>humongus</i> lists there either.</span>
<span class="comment-copy">@Alfe Point taken, but regarding <i>"After all, you don't know the size of OP's lists"</i>, he has a list of states, I'll put a solid wager down that the length of the lists is 50 ;)</span>
<span class="comment-copy">Let's hope that everybody reading this Q&amp;A will keep that in mind when applying your proposed solution to his own problem ;-)  But I must agree that the OP's usecase will keep the numbers low enough not to raise any problem here.</span>
<span class="comment-copy">How about <code>min(xrange(len(values)), key=values.__getitem__)</code>?</span>
<span class="comment-copy">Also nice!  It will call <code>values.__getitem__(i)</code> several times during finding the minimum (so if the input is something more complex than a plain list, this should be considered), but in the typical case this will be a better solution.</span>
