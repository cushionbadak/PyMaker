<div class="post-text" itemprop="text">
<p>When I parse this XML with <code>p = xml.parsers.expat.ParserCreate()</code>:</p>
<pre><code>&lt;name&gt;Fortuna D&amp;#252;sseldorf&lt;/name&gt;
</code></pre>
<p>The character parsing event handler includes <code>u'\xfc'</code>.</p>
<p>How can <code>u'\xfc'</code> be turned into <code>u'ü'</code>?</p>
<hr/>
<p>This is the main question in this post, the rest just shows further (ranting) thoughts about it </p>
<p>Isn't Python unicode broken since <code>u'\xfc'</code> shall yield <code>u'ü'</code> and nothing else?
u'\xfc' is already a unicode string, so converting it to unicode again doesn't work!
Converting it to ASCII as well doesn't work.</p>
<p>The only thing that I found works is: (This cannot be intended, right?)</p>
<pre><code>exec( 'print u\'' + 'Fortuna D\xfcsseldorf'.decode('8859') + u'\'')
</code></pre>
<p>Replacing 8859 with utf-8 fails! What is the point of that?</p>
<p>Also what is the point of the Python unicode HOWTO? - it only gives examples of fails instead of showing how to do the conversions one (especially the houndreds of ppl who ask similar questions here) actually use in real world practice.</p>
<p>Unicode is no magic - why do so many ppl here have issues?</p>
<p>The underlying problem of unicode conversion is dirt simple:</p>
<p>One bidirectional lookup table '\xFC' &lt;-&gt; u'ü'</p>
<pre><code>unicode( 'Fortuna D\xfcsseldorf' ) 
</code></pre>
<p>What is the reason why the creators of Python think it is better to show an error instead of simply producing this: <code>u'Fortuna Düsseldorf'</code>?</p>
<p>Also why did they made it not reversible?:</p>
<pre><code> &gt;&gt;&gt; u'Fortuna Düsseldorf'.encode('utf-8')
 'Fortuna D\xc3\xbcsseldorf'
 &gt;&gt;&gt; unicode('Fortuna D\xc3\xbcsseldorf','utf-8')
 u'Fortuna D\xfcsseldorf'    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You <em>already have the value</em>. Python simply tries to make <em>debugging</em> easier by giving you a representation that is ASCII friendly. Echoing values in the interpreter gives you the result of calling <a href="https://docs.python.org/2/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code></a> on the result.</p>
<p>In other words, you are confusing the <em>representation</em> of the value with the value itself. The representation is designed to be safely copied and pasted around, without worry about how other systems might handle non-ASCII codepoints. As such the Python <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">string literal syntax</a> is used, with any non-printable and non-ASCII characters replaced by <code>\xhh</code> and <code>\uhhhh</code> escape sequences. Pasting those strings back into a Python string or interactive Python session will reproduce the exact same value.</p>
<p>As such <code>ü</code> has been replaced by <code>\xfc</code>, because that's the <em>Unicode codepoint</em> for the <a href="http://codepoints.net/U+00FC" rel="nofollow noreferrer">U+00FC LATIN SMALL LETTER U WITH DIAERESIS</a> codepoint.</p>
<p>If your terminal is configured correctly, you can just use <code>print</code> and Python will encode the Unicode value to your terminal codec, resulting in your terminal display giving you the non-ASCII glyphs:</p>
<pre><code>&gt;&gt;&gt; u'Fortuna Düsseldorf'
u'Fortuna D\xfcsseldorf'
&gt;&gt;&gt; print u'Fortuna Düsseldorf'
Fortuna Düsseldorf
</code></pre>
<p>If your terminal is configured for UTF-8, you can also write the UTF-8 bytes directly to your terminal, after encoding explicitly:</p>
<pre><code>&gt;&gt;&gt; u'Fortuna Düsseldorf'.encode('utf8')
'Fortuna D\xc3\xbcsseldorf'
&gt;&gt;&gt; print u'Fortuna Düsseldorf'.encode('utf8')
Fortuna Düsseldorf
</code></pre>
<p>The alternative is for you upgrade to Python 3; there <code>repr()</code> only uses escape sequences for codepoints that have no printable glyphs (control codes, reserved codepoints, surrogates, etc; if the codepoint is not a space but falls in a <a href="https://codepoints.net/search?gc=C" rel="nofollow noreferrer"><code>C*</code></a> or <a href="https://codepoints.net/search?gc=Z" rel="nofollow noreferrer"><code>Z*</code></a> general category, it is escaped). The new <a href="https://docs.python.org/3/library/functions.html#ascii" rel="nofollow noreferrer"><code>ascii()</code> function</a> gives you the Python 2 <code>repr()</code> behaviour still.</p>
</div>
<span class="comment-copy">What version of python are you using? Python 3 has significantly improved unicode support over 2.</span>
<span class="comment-copy">I've suggested an edit for the question, but take a look at <a href="http://stackoverflow.com/help/how-to-ask">How do I ask a good question?</a> Most notably, it's good practice to keep questions to 1 question.</span>
<span class="comment-copy">Ranting about how you don't understand how things work just shows your own ignorance.</span>
<span class="comment-copy">In ranting, you put me in mind of <a href="http://vimeo.com/7403673" rel="nofollow noreferrer">this talk</a>; you want things to be simpler than they can be in reality.</span>
<span class="comment-copy">I believe things might have changed with Python 3, allowing more than just ASCII to be shown in the <code>repr</code>.</span>
<span class="comment-copy">@MarkRansom: yes, Python 3 is more trusting about modern systems being able to handle Unicode. You can always use <code>ascii()</code> instead of <code>repr()</code> to get the Python 2 behaviour.</span>
<span class="comment-copy">Thanks all ! - got it - no need to go to 3 for that...</span>
