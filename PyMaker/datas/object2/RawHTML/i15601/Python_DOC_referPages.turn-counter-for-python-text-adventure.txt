<div class="post-text" itemprop="text">
<p>I have written a python text adventure game and the final thing I want to add is a counter to count the amount of turns taken that will be displayed at the end of the game.</p>
<p>It only needs to count every time the player inputs something but Im not sure how to code this and its a bit embarrassing as im sure this will be a very simple solution </p>
<p>im using python 3.4.1</p>
<pre><code>while True:
    playerInput = input("What do you want to do? ")
    playerInput = playerInput.lower()
    playerWords = playerInput.split(" ", 1)
    verb = playerWords[0]
    if len(playerWords) == 2:
        noun = playerWords[1]
    else:
        noun = ""


    if playerInput == "quit":
        break



    elif playerInput == "look":
        print(roomDescriptions[currentRoom])



    ##--Controls movement--##             
    elif playerInput in dirs:
        playerInput = playerInput[0]
        if "treasure" in invItems and playerInput == "s" and currentRoom == "strangeWall":##--Checks for treasure in inventory before allowing game to be won--##
            print("!!!!Congratulations you have escaped from the dark dungeon!!!!")
            break

        elif playerInput in roomDirections[currentRoom]:
            currentRoom = roomDirections[currentRoom][playerInput]
            print(roomEntrance [currentRoom])
        else:
            print("You can't go that way")



    elif playerInput == "lookdown":##--checks for room items on the ground--##
        printList ("You see;", roomItems[currentRoom])



    elif playerInput == "inventory" or playerInput == "inv":##--Displays inventory items--##
        printList ("You are carrying;", invItems)



    elif verb == "get":##--Controls picking up items and adding them to inventory/removes from room--##
        if noun in roomItems[currentRoom]:
            print("picked up", noun)
            invItems.append(noun)
            roomItems[currentRoom].remove(noun)
        else:
            print("There is nothing to pick up")



    elif verb == "drop":##--Controls dropping items and removing them from the inventory/adds to room items--##
        if noun in invItems:
            print("You drop the", noun)
            roomItems[currentRoom].append(noun)
            invItems.remove(noun)
        else:
            print("You are not carrying", noun)


    elif verb == "use":##--Controls using the lamp and snow boots--##
        if noun in invItems:##--Checks inventory for lamp or snowboots before allowing certain directional movement--##
            if noun == "lamp":
                print("You light the lamp")
                invItems.remove(noun)
                roomDirections["hallMid"]["e"] = "giantNature"

            elif noun == "snowboots":
                print("You put on the snowboots")
                invItems.remove(noun)
                roomDirections["hallMid"]["s"] = "snowRoom"
            else:
                print("You cannot use that")
        else:
            print("You do not have", noun)





    else:
        print ("I don't understand")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without seeing an example of your code, it's pretty much impossible to tell you anything specific that will work in your code.</p>
<p>But I can give you something general that you can probably adapt to fit your code.</p>
<pre><code>class CountedInput(object):
    def __init__(self):
        self.counter = 0
    def input(self, *args):
        self.counter += 1
        return input(*args)

counted_input = CountedInput()
</code></pre>
<p>Now, anywhere in your code that you call <code>input()</code>, you instead call <code>counted_input.input()</code>.</p>
<p>And when you want to display the turn counter, that's just <code>counted_input.counter</code>.</p>
<p>(If you're using Python 2.x, change <code>input</code> to <code>raw_input</code>.)</p>
<hr/>
<p>Now that you've added an example to the question:</p>
<p>This suggestion will work just fine as it is, but you can make things even simpler.</p>
<p>Your whole game is built around a command loop. You call <code>input</code> exactly once per loop. So, all you need to do is count how many times you go around that loop. You can do that like this:</p>
<pre><code>counter = 0
while True:
    counter += 1
    playerInput = input("What do you want to do? ")
    # all the rest of your code
</code></pre>
<p>And now, you just print out or otherwise use <code>counter</code> the same as any other variable. For example:</p>
<pre><code>    elif playerInput == "score":
        print("You have 0/0 points after", counter, "turns")
</code></pre>
<p>(I'm guessing that you don't actually want to troll your players with a <code>score</code> command when you don't keep score, but that should show you the ideal.)</p>
<hr/>
<p>If you want to get clever, there's an even simpler way to do this: Just loop over all the numbers from 1 to infinity. How? The <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>count</code></a> function, which works kind of like <code>range</code> except there's no <code>stop</code> value because it never stops:</p>
<pre><code>from itertools import count

for counter in count(1):
    # the rest of your code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know many would probably not like this idea, as I have seen conflicting views on global variable use, however I would use a global variable for turn count storage and a global function to track it. </p>
<p>For example:</p>
<pre><code>global turn_counter
turn_counter = 0
</code></pre>
<p>Then, when an action is taken, you could do:</p>
<pre><code>turn_counter += 1
</code></pre>
<p>I believe you need to have include the global in your function, however.</p>
<p>Example:</p>
<pre><code>def game_input_handler():
    """ handles all user input """
    global turn_counter

    // game prompt code here
    // if..elif...else for option handling
</code></pre>
</div>
<span class="comment-copy">oh sorry I didn't think you would need to see it, im still a newbie</span>
<span class="comment-copy">@kebab: No problem. It would be a good idea to read the Help on this site; there's some great information on how to ask good questions. But meanwhile, I've updated my answer to handle your more specific problem (and as you can see, it's a lot simpler this way, which is part of the reason it's good to ask more specific questions).</span>
<span class="comment-copy">yea I have its only my third day using the site and only my first semester of python so I do appreciate that you still bare with me while im learning, very much appreciated</span>
<span class="comment-copy">Your first suggestion after seeing my code works perfectly, thanks so much!</span>
<span class="comment-copy">@kebab: Most people on this site are so frustrated with newbies who have no interest in learning how it works that they'll gladly bear with anyone who obviously wants to learn like you do. :)</span>
