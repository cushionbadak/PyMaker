<div class="post-text" itemprop="text">
<p>Consider the following sample code:</p>
<pre><code>data = []
try:
    print data[0]
except IndexError as error:
    print error.message
</code></pre>
<p>There is nothing syntactically wrong (using Python2.7) with the code except that if you run python <a href="https://docs.python.org/2/library/warnings.html#the-warnings-filter" rel="nofollow noreferrer">with  warnings turned on</a>, you would see a <code>DeprecationWarning</code>:</p>
<pre><code>$ python -W always test.py
test.py:5: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
  print error.message
list index out of range
</code></pre>
<p>FYI, this is because <a href="https://stackoverflow.com/questions/1272138/baseexception-message-deprecated-in-python-2-6"><code>.message</code> was deprecated since python2.6 and removed in python3</a>.</p>
<p>Now, I'd like to find all places in the project where <code>.message</code> is called on any exception instance <em>by using static code analysis</em> tools. As an end goal, I'm planning to have this check running as a part of a daily build&amp;test&amp;code quality check task and raise an error if the syntax is still used.</p>
<p>Is it possible? Is it something that <code>pylint</code>, <code>pyflakes</code> or other code analysis tools are capable of?</p>
<hr/>
<p>I found that <a href="https://github.com/jcrocholl/pep8" rel="nofollow noreferrer"><code>pep8</code> tool</a> has several similar checks implemented, for instance, <code>has_key()</code> usage check:</p>
<pre><code>$ cat test.py
my_dict = {}
print my_dict.has_key('test')
$ pep8 test.py
test.py:2:14: W601 .has_key() is deprecated, use 'in'
</code></pre>
<p>As an alternative solution, I can treat all warnings as errors (like suggested <a href="https://stackoverflow.com/a/16457346/771848">here</a>) and make my tests fail but this has its disadvantages:</p>
<ul>
<li>there are other deprecation warnings coming from third-party packages that I cannot fix</li>
<li>strictly speaking, this requires 100% coverage, which is difficult to maintain </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to do this statically, you can use the <code>ast</code> module to parse the code and then scan it for any occurrence of the deprecated code with a subclass of the <code>NodeVisitor</code> class.  Like so:</p>
<pre><code>import ast, sys

class UsingMessageAttr(ast.NodeVisitor):

    error_object_names = []

    def visit_Attribute(self, node):
        if (node.attr == 'message' and 
            hasattr(node.value, 'id') and 
            node.value.id in self.error_object_names):

            print("Danger Will Robinson!!")
            sys.exit(1)

        self.generic_visit(node)

    def visit_ExceptHandler(self, node):
        if node.name is not None:
            self.error_object_names.append(node.name)
            self.generic_visit(node)
            self.error_object_names.pop()
        else:
            self.generic_visit(node)

with open('sourcefile.py', 'r') as f:
    UsingMessageAttr().visit(ast.parse(f.read()))
</code></pre>
<p>This works by using python parse the source file into an AST and then uses the visitor pattern to walk through the entire file and find any instances of the deprecated attribute.  For more information on how this works, see <a href="https://docs.python.org/3/library/ast.html" rel="noreferrer">the python documentation on the ast module</a>.</p>
<p>Note that this won't work if you use something clever to refer to the exception object.  It simply takes the variable name that the exception object was bound to and checks if a <code>message</code> attribute is ever accessed from a variable of the same name inside the body of the exception handler.</p>
</div>
<span class="comment-copy">I guess, in other words, the answer is saying: "No, there is no tool that can help you and you should make it yourself" :) Thank you very much for the pointers!</span>
<span class="comment-copy">@alecxe No problem, I was hoping that someone would come along and give an easy answer (this seems way too hard for something so simple) but that's it.  It isn't that bad though, the code I gave you will probably work just fine as a standalone script (maybe you could get source file names from <code>sys.argv</code> and output line numbers with your error messages).</span>
<span class="comment-copy">Would it be possible to add a custom warning message? (If yes: where/how?) To be displayed e.g. by PyDev</span>
