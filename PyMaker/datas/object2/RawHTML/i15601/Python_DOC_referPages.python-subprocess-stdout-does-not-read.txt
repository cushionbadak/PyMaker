<div class="post-text" itemprop="text">
<p>I am trying to run gnuplot via python. </p>
<p>I can send and run commands but cannot read the warnings or error messages from application. It just waits at here: "self.proc.stdout.readline()".</p>
<p>Here is my entire code:</p>
<pre><code>from subprocess import PIPE, Popen

import fcntl, os

class Gnuplot:
    def __init__(self, debug=True):
        self.debug = debug
        if self.debug:
            print 'Initializing ...\n' 

        self.proc = Popen(['gnuplot','-persist'],stdin=PIPE, stdout=PIPE, stderr=PIPE)  
        fcntl.fcntl(self.proc.stderr.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)

    def communicate(self, cin='\n'):
        self.proc.stdin.write(cin+'\n')
        cout, cerr = '', ''
        print "lol"
        if self.proc.stdout:
            cout = self.proc.stdout.readline()
            self.proc.stdout.close()
            print cout
        elif self.proc.stderr:
            cerr = self.proc.stderr.read()
            self.proc.stderr.close()
            print cerr


if __name__ == '__main__':
    g = Gnuplot()   
    g.communicate("set parameter\n")
    g.communicate("plot sin(x)\n")     
</code></pre>
<p>It just waits at here:</p>
<pre><code>cout = self.proc.stdout.readline()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Warnings and errors generally output on the standard error stream rather than standard output (this stops results getting mixed up with warning messages, for example). Because you are reading from <code>stdout</code> first, and no output is given, you are not getting to the part where you read from <code>stderr</code>.</p>
<p>Note, that <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stderr" rel="nofollow"><code>subprocess</code> recommends against accessing the streams directly</a>:</p>
<blockquote>
<p>Warning: Use communicate() rather than .stdin.write, .stdout.read or
  .stderr.read to avoid deadlocks due to any of the other OS pipe
  buffers filling up and blocking the child process.</p>
</blockquote>
<p>You probably want to use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>process.communicate()</code></a> as suggested. This gives you a tuple of <code>stdout_data, stderr_data</code>, so just grab the second to get your warnings and errors. This sidesteps the issue of having to deal with reading the output manually, and problems like this.</p>
</div>
