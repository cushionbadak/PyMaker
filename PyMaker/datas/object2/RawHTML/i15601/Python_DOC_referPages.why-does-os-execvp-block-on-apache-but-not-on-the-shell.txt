<div class="post-text" itemprop="text">
<p>I'm looking for a way, in plain python (no extra libraries) to kick off a background process that will run after the web page returns.</p>
<p>In the shell, this script below exits, and then prints "Hello World". However, in the browser, it blocks until two.py is finished.</p>
<pre><code>#!/usr/bin/python
import os
import sys

def run():
    program = "python"
    pid = os.fork()
    if not pid:
        os.execvp(program, (program,"two.py"))

run()

print "Content-type: text/html"
print ""
print "Hello, World!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not 100% sure, but I think this is because Apache is not waiting on your process, but on your whole process group.</p>
<p>When you <code>fork</code> a new process, it inherits your process group. And <code>exec</code> doesn't change that. If you want to force it to detach, you have to do so explicitly, e.g., by using <a href="https://docs.python.org/3/library/os.html#os.setpgrp" rel="nofollow"><code>setpgrp</code></a>:</p>
<pre><code>pid = os.fork()
if not pid:
    os.setpgrp()
    os.execvp(program, (program,"two.py"))
</code></pre>
<p>Depending on your platform, this may also mean it gets a new session, meaning it no longer has a controlling terminal, but I don't think you care about that.</p>
<hr/>
<p>However, it might be a better design to rewrite <code>two.py</code> using the <a href="https://pypi.python.org/pypi/python-daemon/" rel="nofollow"><code>daemon</code></a> library. Then, no matter how you spawn it, it'll take care of daemonizing <em>itself</em>. Run it your script or directly, from Apache, or the shell, in the background, whatever, it will never make anyone wait for it, get tangled up with a terminal, zombify, etc.</p>
</div>
<span class="comment-copy">The daemonize worked....I could have saved myself lots of time by doing this as a shell script. But meh...now I have this recipe for life!</span>
