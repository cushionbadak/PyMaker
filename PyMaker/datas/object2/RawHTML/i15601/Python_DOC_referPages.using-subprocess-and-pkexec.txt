<div class="post-text" itemprop="text">
<p>I'm trying to use run a command alongside with pkexec, but is says no such file is found.</p>
<pre><code>process = subprocess.Popen(["pkexec cat", "/dev/input/event4"], stdout=subprocess.PIPE)
for line in iter(process.stdout.readline, ''):
  sys.stdout.write(line)
</code></pre>
<blockquote>
<p>OSError: [Errno 2] No such file or directory</p>
</blockquote>
<p>However, path is okay and the file is there.</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably want to use:</p>
<pre><code>subprocess.Popen(["pkexec", "cat", "/dev/input/event4"])
</code></pre>
<p>Since <code>subprocess.Popen</code> quotes each entry in the list; so your example is the same using this on the commandline:</p>
<pre><code>$ "pkexec cat" /dev/input/event4
</code></pre>
<p>Instead of:</p>
<pre><code>$ pkexec cat /dev/input/event4
</code></pre>
<p>From <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow">the documentation</a> (emphasis mine):</p>
<blockquote>
<p>args is required for all calls and should be a string, or a sequence of program arguments. <strong>Providing a sequence of arguments is generally preferred, as it allows the module to take care of any required escaping and quoting of arguments (e.g. to permit spaces in file names)</strong>. If passing a single string, either shell must be True (see below) or else the string must simply name the program to be executed without specifying any arguments.</p>
</blockquote>
</div>
<span class="comment-copy">You're asking it to search for an executable file named <code>pkexec cat</code> somewhere on your <code>PATH</code>. While it's not <i>impossible</i> that such a thing exists, it's very unlikely. Hence the ENOENT error.</span>
<span class="comment-copy">That was fast, thanks! I'll mark your answer as correct when the time in a few minutes.</span>
<span class="comment-copy">Actually, you <i>can't</i> pass a string instead of a list (unless you also use <code>shell=True</code>, in which case the shell, rather than Python, parses the string). See <code>args</code> under <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">Frequently Used Arguments</a>.</span>
<span class="comment-copy">@abarnert Thanks! I also noticed this when I tested it (since I rarely use it), and removed that remark.</span>
<span class="comment-copy">It's a little misleading to say that "<code>Popen</code> quotes each entry in the list". It doesn't actually use the shell at all. On Unix, it calls one of the <code>exec</code>-family functions directly (I believe <code>execvp</code>, but don't quote me on that), which takes the arguments as an array of separate strings, without any quoting. The way you've written it does get the idea across nicely for novices, though, so maybe it's better to leave it as-is.</span>
