<div class="post-text" itemprop="text">
<p>Is it possible to have this level of customization with the module Tkinter </p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/pjNnq.png"/></p>
<p>These are the tabs of Sublime Text Editor.I want to create this kind of tab with python so is it possible?? If yes then how or should I use another Python GUI Library? I am new with Python can't figure out how to get this work done.
I have read about Tabs Control can be achieved by Notebook Widget of Tkinter but now I'm confused is it possible or not. Kindly help me by telling me what level of customization you can achieve with Tkinter.</p>
<p>EDIT: Dupe: <a href="https://stackoverflow.com/questions/284234/tabs-in-tkinter">Notebook widget in Tkinter</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The library for GUI's that I would recommend is Tkinter.
Tkinter is a very easy to use - up to date module pre-installed with many versions of python. I see you are using Sublime Text, but to get this, you cannot use the Sublime Text Editor, as it is not pre-installed. The regular Python can be downloaded from <a href="https://www.python.org/downloads/" rel="nofollow" title="Python IDLE Download">here</a> After you successfully install Python, which instructions are on the website, than open the application called IDLE. After you open IDLE, go to File - New File, and you should get a new black screen to fill with all your code. A simple GUI can be made by this in Python 2:</p>
<pre><code>from Tkinter import *
#This code above will add Tkinter to your code
root = Tk()
#The code above says that the window we will open is called "root"
root.title("Maq's GUI")
#This code above says the title that will be displayed on the top of your window
root.geometry("200x200")
#The code above this is how big the GUI should be.
root.mainloop()
#The code above starts of all of our code.
</code></pre>
<p>If you are using Python 3, than just replace the uppercase T in Tkinter with a lowercase t, as in Python 3 they 'renamed' many modules, including Tkinter. Do not worry about the lines of code that start with a #, as they do not do anything, they are just helping to explain what this code is. After you learn this, you can learn how to do many other things with the Tkinter module. A list of online sources can be found <a href="http://www.python-forum.org/viewtopic.php?f=25&amp;t=5063" rel="nofollow" title="Thank you Yorik!">here</a>, thanks to Yorik, a moderator from the Python Forums. Personally, I learned to use the Tkinter module from the two websites that I will attach in a comment on this post, I need more reputation :P
The main reason why I based my answer on Tkinter is because Tkinter is pre-shipped with almost every version of Python. It also is a simple GUI maker, but it does have some inabilities, which is expected. </p>
<p>TTK is also a useful widget, which is just Themed Tkinter.
TTK comes with 11 widgets from Tkinter: Button, Checkbutton, Entry, Frame, Label, LabelFrame, Menubutton, PanedWindow, Radiobutton, Scale and Scrollbar
TTK also comes with 6 new widgets: Combobox, Notebook, Progressbar, Separator, Sizegrip and Treeview. </p>
<p>TTK allows to have default style which you can apply to its widgets:</p>
<pre><code>style = ttk.Style()
style.configure("BW.TLabel", foreground="black", background="white")
l1 = ttk.Label(text="Test", style="BW.TLabel")
l2 = ttk.Label(text="Test", style="BW.TLabel")
</code></pre>
<p>You can add many styles, and just set them as a custom style for your widgets. It is very useful for looks. I will attach another URL in the description.</p>
</div>
<div class="post-text" itemprop="text">
<p>What version of Python are you looking at using, and what platform?</p>
<p>A little terminology, if you're not familiar:  in Tk, the objects that make up a GUI (frames, canvases, buttons, text boxes, labels, etc) are all referred to as widgets.  </p>
<p>When a Tk program runs, it essentially does the following:</p>
<ol>
<li>Create a frame (which establishes the borders of the window) </li>
<li>Add a canvas to the frame (which allows the program to draw controls
inside the frame) </li>
<li>Create code to handle any events (code that can be
executed after clicking a button, resizing a frame, selecting a menu
option, etc).</li>
</ol>
<p>This is a very basic example:</p>
<pre><code>from Tkinter import *

    def clicked(): # code to handle the 
        print("Hey. Clicked.")

    if __name__ == "__main__":
        root = Tk() # initializes Tk
        button = Button(root, text="Click Me", command=clicked) # creates the button
        button.pack(pady=20, padx=20) # adds the button to the frame
        root.mainloop() # paint the frame and controls, user can click buttons, etc
</code></pre>
<p>Tk has gone through some extensions over the years.  The original Tk implementation didn't support a Notebook widget.  But you do have a couple of extensions that do:</p>
<p><strong>PMW (Python MegaWidget)</strong>
PMW is John Grayson's extension of Tk's widgets.  The documentation on pmw.Notebook (<a href="http://pmw.sourceforge.net/doc/NoteBook.html" rel="nofollow noreferrer">http://pmw.sourceforge.net/doc/NoteBook.html</a>) provides a good example which I won't repeat here.  </p>
<p>You will need to install PMW in order to run the example.</p>
<p><strong>ttk (Themed TK)</strong>
ttk is similar concept to PMW-- it's an extension of Tk's widgets.  I think this is what you were refering to in your initial post.  There is a nice little example of a Python 2.7 Notebook widget implementation here:  <a href="http://poquitopicante.blogspot.com/2013/06/blog-post.html" rel="nofollow noreferrer">http://poquitopicante.blogspot.com/2013/06/blog-post.html</a></p>
<p>ttk ships with Python 2.7 and 3.4, so unless you're using an old version of Python, you should have ttk available.</p>
<p><strong>wxPython</strong>
wxPython is the Python specific implementation of the cross-platform GUI toolkit wx library.  wxPython also has a Notebook widget, but it a separate installation, and does not use any of Tk's libraries.  I prefer wx as I find the code is cleaner, but that's a matter of taste.  Check out Mike Driscoll's example on his blog: <a href="http://www.blog.pythonlibrary.org/2010/09/15/wxpython-a-simple-notebook-example/" rel="nofollow noreferrer">http://www.blog.pythonlibrary.org/2010/09/15/wxpython-a-simple-notebook-example/</a> </p>
<p>If you want to know more about wxPython, you'll need to download the runtime for your platform at <a href="http://www.wxpython.org/download.php" rel="nofollow noreferrer">http://www.wxpython.org/download.php</a>.  Strongly suggest you also download the Docs and Examples package, which has a great demo for all of the wxPython controls-- source included.</p>
<p><strong>stackoverflow</strong>
There are a few cases here that touch on Notebook controls on stackoverflow:
<a href="https://stackoverflow.com/search?q=python+tk+notebook">https://stackoverflow.com/search?q=python+tk+notebook</a></p>
</div>
<span class="comment-copy">From <a href="https://docs.python.org/3.1/library/tkinter.ttk.html#notebook" rel="nofollow noreferrer">the official Python docs</a> <i>"Ttk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently-displayed window."</i>.  You say "I am new with Python can't figure out how to get this work done." the first step is to read the documentation, isn't it?</span>
<span class="comment-copy">What specifically do you mean by "like sublime"? The color? The square shape? The x on the right? Which of those are important to you?</span>
<span class="comment-copy">@BryanOakley the color and the shape :)</span>
<span class="comment-copy">These are the two links: <a href="http://www.python-course.eu/tkinter_labels.php" rel="nofollow noreferrer">python-course.eu/tkinter_labels.php</a> <a href="http://www.tutorialspoint.com/python/python_gui_programming.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_gui_programming.htm</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/tkinter.ttk.html" rel="nofollow noreferrer">docs.python.org/3/library/tkinter.ttk.html</a></span>
<span class="comment-copy">thank u for ur detail ans but i want to know can i create sublime like tabs with TK if yes then how :)</span>
<span class="comment-copy">Well, I am confused. Sublime is a program to put your code in to. Tkinter can be the result of your code.</span>
<span class="comment-copy">Also, I heard you wanted information about the Notebook widget. The notebook widget comes with TTK. Notebook can be used to create tabs. This link: <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/ttk-Notebook.html" rel="nofollow noreferrer">infohost.nmt.edu/tcc/help/pubs/tkinter/web/ttk-Notebook.html</a> has a decent amount of information on the notebook widget. TTK comes with Python 3, so I would recommend it. It is preinstalled, just imported by this code: from tkinter import ttk More information about TTK can be found here: <a href="https://docs.python.org/3.1/library/tkinter.ttk.html" rel="nofollow noreferrer">docs.python.org/3.1/library/tkinter.ttk.html</a></span>
<span class="comment-copy">thank u for ur detail ans and i know tabs can be achieved with TTK  but i want to know can i create sublime like tabs with TK if yes then how :) and if no then waht should i learn simple :)</span>
