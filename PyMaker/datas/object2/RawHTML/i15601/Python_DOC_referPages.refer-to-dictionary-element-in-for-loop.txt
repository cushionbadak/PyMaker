<div class="post-text" itemprop="text">
<p>If I have a list of dictionaries, is there a way to refer to a specific element within the for loop declaration?</p>
<p>Something like this:</p>
<pre><code>dict_lst = [
  {'a': 1, 'b': 2, 'c': 3},
  {'a': 1, 'b': 2, 'c': 3},
  {'a': 1, 'b': 2, 'c': 3},
]

for d['a'] as dict_elem in dict_lst:
  print dict_elem
</code></pre>
<p>Or something similar?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there's no <code>as</code> clause in <code>for</code> statements.</p>
<p>But it's pretty easy to do this explicitly:</p>
<pre><code>for d in dict_lst:
    dict_elem = d['a']
    print dict_elem
</code></pre>
<p>Or, more simply:</p>
<pre><code>for d in dict_list:
    print d['a']
</code></pre>
<p>Or, if you want to get fancy:</p>
<pre><code>for dict_elem in (d['a'] for d in dict_lst):
    print dict_elem
</code></pre>
<p>Or, just for fun:</p>
<pre><code>for dict_elem in map(operator.itemgetter('a'), dict_lst):
    print dict_elem
</code></pre>
<p>Which you can wrap up as a reusable function:</p>
<pre><code>def itemmap(dicts, key):
    for item in dicts:
        yield item[key]

for dict_elem in itemmap(dict_lst, 'a'):
    print dict_elem
</code></pre>
<hr/>
<p>As a side note, you actually can do <code>for d['a'] in dict_list:</code>, but that just reassigns <code>d['a']</code> (assuming <code>d</code> is already a dictionary) to each new dictionary in the list, which is usually a confusing thing to do. (It can be useful for obfuscated code contestsâ€¦)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a> like so:</p>
<pre><code>&gt;&gt;&gt; dict_lst = [
...   {'a': 1, 'b': 2, 'c': 3},
...   {'a': 1, 'b': 2, 'c': 3},
...   {'a': 1, 'b': 2, 'c': 3},
... ]
&gt;&gt;&gt; for dict_elem in (d['a'] for d in dict_lst):
...     dict_elem
...
1
1
1
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one of the fastest and Pythonic methods to do it, lean on Python 3:</p>
<pre><code>for key, val in d.iteritems():
    print key, val
</code></pre>
<p>There is also a similar method <code>items</code> which does almost the same. <code>items</code> will create a list of tuples with key and value if you call it in the <code>for</code> loop statement. There is also a similar method <code>keys</code> which only returns you a list of keys.</p>
<p><code>iteritems</code> will not generate a list of tuples when you call it in the for loop. <a href="https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems">Each element will be evaluated in each loop cycle.</a> So there is no initial overhead and extensive memory usage. If you break the loop it's better as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use this:</p>
<pre><code>for element in dict_lst:
    print element['some_key']
</code></pre>
</div>
<span class="comment-copy">Ah cool. I've put off learning about generators for awhile - guess it's time to learn about them!</span>
<span class="comment-copy">@vincent: This is one of the better parts of the official tutorial (see <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a> first if you don't know them, then start at <a href="https://docs.python.org/2/tutorial/classes.html#iterators" rel="nofollow noreferrer">Iterators</a> and read the rest of that chapter. Then, once you've got the basics, see <a href="http://www.dabeaz.com/generators-uk/" rel="nofollow noreferrer">David Beazley's presentation</a>.</span>
<span class="comment-copy">I think you meant <code>dict_lst[element]</code></span>
<span class="comment-copy">@FarmerJoe I didn't noticed</span>
<span class="comment-copy">You still have it incorrect.  Should be <code>dict_lst[element]</code>.  When you do <code>for element in some_dictionary: ...</code>  you are iterating through the keys.</span>
<span class="comment-copy">@FarmerJoe no man, <a href="http://ideone.com/2V2fG9" rel="nofollow noreferrer">ideone.com/2V2fG9</a></span>
<span class="comment-copy">Ah sorry, you are correct, I should have looked closer at the sample data, I thought it was a dictionary, not a list of dictionary.</span>
