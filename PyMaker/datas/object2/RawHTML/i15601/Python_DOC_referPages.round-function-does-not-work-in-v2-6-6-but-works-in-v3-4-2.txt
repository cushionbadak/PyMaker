<div class="post-text" itemprop="text">
<p>My round function does not work in linux python 2.6.6, whereas it works fine in Windows 3.4.2
after using the following type of code:</p>
<pre><code>Array[i] = round(math.e ** AnotherArray[i], 4)

v.3.4.2:  0.0025999999999999999 =&gt; 0.0026
v.2.6.6:  0.0025999999999999999 =&gt;  0.0025999999999999999
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>They both work the same, but Python 2.7 and up will round floating point numbers <em>when printing their <code>repr</code>esentations</em>, in order to not confuse users by the (language- and machine-independent) <a href="http://docs.python.org/3/tutorial/floatingpoint.html">limitations of floating point arithmetic</a>.</p>
<p>The decimal number <code>0.0026</code> can't be represented exactly as a binary <code>float</code>, so there will always be some rounding error.</p>
<p>If you want less confusion, just <code>print</code> the numbers:</p>
<pre><code>&gt;&gt;&gt; a = 0.0025999999999999999
&gt;&gt;&gt; b = round(a,5)
&gt;&gt;&gt; b                  # this calls repr(b) 
0.0025999999999999999
&gt;&gt;&gt; print b            # this calls str(b)
0.0026
</code></pre>
<p>In practice, those rounding errors rarely matter, although you need to be aware of them, especially when comparing for equality.</p>
<p>The following loop <em>doesn't stop</em> at 0:</p>
<pre><code>x = 1.0
while x != 0:
    print x
    x -= 0.1
</code></pre>
<p>Why? Let's take a look:</p>
<pre><code>&gt;&gt;&gt; x = 1.0
&gt;&gt;&gt; while x != 0:
...     print repr(x)
...     x -= 0.1
...     if x&lt;0: break
...
1.0
0.90000000000000002
0.80000000000000004
0.70000000000000007
0.60000000000000009
0.50000000000000011
0.40000000000000013
0.30000000000000016
0.20000000000000015
0.10000000000000014
1.3877787807814457e-16
</code></pre>
<p>Therefore, always take <code>sys.float_info.epsilon</code> into account:</p>
<pre><code>&gt;&gt;&gt; x = 1.0
&gt;&gt;&gt; while abs(x) &gt; sys.float_info.epsilon:
...     print x
...     x -= 0.1
...
1.0
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
</code></pre>
</div>
<span class="comment-copy">But my 2.6.6 is not even 'printing' it in the rounded form</span>
<span class="comment-copy">Yes, because that behavior was introduced in Python 2.7 (see above).</span>
<span class="comment-copy">But, shouldn't the explicitly used round() function work?</span>
<span class="comment-copy">Did you read the article I linked to? <code>0.0026</code> <i>cannot</i> be represented exactly as a floating point number. Just like you can't write the result of <code>1/3</code> exactly as a decimal number.</span>
<span class="comment-copy">Hey Hobbit. I had this same argument a while back. Just give up, round does not round as you would expect in excel. I suggest you try using decimal instead of floats.... For more reading this may help... <a href="http://floating-point-gui.de/basic/" rel="nofollow noreferrer">floating-point-gui.de/basic</a></span>
