<div class="post-text" itemprop="text">
<p>If I want to implement this, how can I do that?</p>
<p>I know that every time when we call <code>for i in object:</code></p>
<p>First go <code>def __iter__(self)</code> then go <code>def __next__(self)</code>, but I don't see <code>iter</code> transfer
any argument to next. So, how?</p>
<pre><code>class MyClass(object):
    def __init__(self):
        self.data = {"a":1, "b":2, "c":3, "special":0}


for i in MyClass(): # for i in self.data, if i != "special" yield i
    print(i)
</code></pre>
<p>Expected Output:</p>
<pre><code>a
b
c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another example for a custom iteration:</p>
<pre><code>#!/usr/bin/env python

class Custom(object):
    def __init__(self):
        self.data = {"a":1, "b":2, "c":3, "special":0}
        self.current = 0

    def __iter__(self):
        return self

    def next(self):
        key = [k for k, v in self.data.iteritems() if v == self.current]
        if not key:
            raise StopIteration
        self.current += 1
        return key[0]

if __name__ == '__main__':
    obj = Custom()
    for i in obj:
        print(i)
</code></pre>
<p>Which prints the keys in data sorted by value:</p>
<pre><code>'special'
'a'
'b'
'c'
</code></pre>
<p>As gist: <a href="https://gist.github.com/miku/01d50434b232367f8bfd#file-ex-py" rel="nofollow">https://gist.github.com/miku/01d50434b232367f8bfd#file-ex-py</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The point of creating an iterator class, with <code>__iter__</code> and <code>__next__</code> special methods, is that it's a <em>class</em>, which means it can store state explicitly, in instance attributes.</p>
<p>For example:</p>
<pre><code>class MyClass(object):
    def __init__(self, *filtered_keys):
        self.data = {"a":1, "b":2, "c":3, "special":0}
        self.filtered_keys = set(filtered_keys)
        self.iterator = iter(self.data)
    def __iter__(self):
        return self
    def __next__(self):
        while True:
            key = next(self.iterator)
            if key not in filtered_keys:
                return key

for i in MyClass("special"):
    print(i)
</code></pre>
<hr/>
<p>If you don't want to create an <em>iterator</em>, but just an <em>iterable</em>â€”that is, something whose <code>__iter__</code> method doesn't return <code>self</code>, but instead returns some other object with a <code>__next__</code> (and within an <code>__iter__</code> that returns itself), you can return anything you want in <code>__iter__</code>.</p>
<pre><code>def __iter__(self):
    return (key for key in self.data if key != 'special')
</code></pre>
<p>Or you can even make <code>__iter__</code> itself a generator function, in which case it returns a generator:</p>
<pre><code>def __iter__(self):
    for key in self.data:
        if key != 'special':
            yield key
</code></pre>
<p>Or, if you prefer:</p>
<pre><code>def __iter__(self):
    yield from (key for key in self if key != 'special')
</code></pre>
<p>This way, the state is now inside the <code>__iter__</code> method and/or the thing it returns.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can have the <code>__iter__</code> special method filter out <code>"special"</code> with a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a>:</p>
<pre><code>&gt;&gt;&gt; class MyClass(object):
...     def __init__(self):
...         self.data = {"a":1, "b":2, "c":3, "special":0}
...     def __iter__(self):
...         return (x for x in self.data if x != "special")
...
&gt;&gt;&gt; for i in MyClass():
...     print(i)
...
a
c
b
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't like my own implementation.
I want make something just iterate the dict keys one time.
But this method took all keys out, convert to set, and discard special and iter on the set.
It's too complicate. Any better idea?</p>
<pre><code>def __iter__(self):
    a = set(self.data.keys())
    a.discard("special")
    return iter(a)
</code></pre>
</div>
<span class="comment-copy">informative example <a href="https://mail.python.org/pipermail/tutor/2006-January/044455.html" rel="nofollow noreferrer">mail.python.org/pipermail/tutor/2006-January/044455.html</a></span>
<span class="comment-copy">You awesome! Got a lots of knowledge from you. Thank you!</span>
<span class="comment-copy">Happy to hear that :)</span>
<span class="comment-copy">you goddamn smart! winner!!!</span>
<span class="comment-copy">Happy to have helped! Please do not forget to accept one of the answers given  by clicking the check next to it. Doing so lets people know that this problem is solved.</span>
