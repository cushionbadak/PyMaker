<div class="post-text" itemprop="text">
<p>I'm making an Qt Quick GUI application(for windows), which uses OpenGL and C++ for some computationally intensive stuff. I want to embed python code into the app, for doing some stuff which is comparatively easier in python.</p>
<p>Basically, I just want the c++ code to call a function in a python script and let the script do the job, then store the returned data in a variable(string, or float etc.) for further use. I'm using Qt creator, and I got python3 lib for MinGW compiler. I tried some code, but its looks like python lib is not quite compatible with Qt creator. IS using pyqt for this will be a good idea? What will be the best and easiest way to do this ?</p>
<p><strong>EDIT:</strong> This is the basic code I tried, first it gave me an error saying, cannot find pyconfig.h. Then I added an INCUDEPATH to my python34 include directory.</p>
<pre><code>#include "mainwindow.h"
#include &lt;QApplication&gt;
#include &lt;boost/python.hpp&gt;


int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MainWindow w;
    w.show();
    using namespace boost::python;

    PyObject *pName, *pModule, *pDict, *pFunc, *pValue;

        Py_Initialize();

        pName = PyString_FromString(argv[1]);

        pModule = PyImport_Import(pName);


        pDict = PyModule_GetDict(pModule);


        pFunc = PyDict_GetItemString(pDict, argv[2]);

        if (PyCallable_Check(pFunc))
        {
            PyObject_CallObject(pFunc, NULL);
        } else
        {
            PyErr_Print();
        }

        // Clean up
        Py_DECREF(pModule);
        Py_DECREF(pName);

        Py_Finalize();

    return a.exec();
}
</code></pre>
<p>My .pro file:</p>
<pre><code>QT       += core gui

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

TARGET = TestWidgetApp
TEMPLATE = app

INCLUDEPATH += C:/boost_1_57_0
INCLUDEPATH += C:/Python34/include

SOURCES += main.cpp\
        mainwindow.cpp

HEADERS  += mainwindow.h

FORMS    += mainwindow.ui

OTHER_FILES +=
</code></pre>
<p>Then the following errors:</p>
<p>C:\Python34\include\object.h:435: error: C2059: syntax error : ';'</p>
<p>C:\Python34\include\object.h:435: error: C2238: unexpected token(s) preceding ';'</p>
<p>C:\Users\Amol\Desktop\TestWidgetApp\main.cpp:19: error: C3861: 'PyString_FromString': identifier not found</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that Python 3.4 has a struct member called "slots", (file object.h, in the typedef for <code>PyType_Spec</code>), which Qt defines out from under you so that you can say things like:</p>
<pre><code>public slots:
</code></pre>
<p>in your code. The solution is to add:</p>
<pre><code>#undef slots
</code></pre>
<p>just before you include Python.h, and to redefine it before you include anything that uses "slots" in the way that Qt does:</p>
<pre><code>#undef slots
#include &lt;Python.h&gt;
#define slots

#include "myinclude.h"
#include &lt;QString&gt;
</code></pre>
<p>A bit of a hack (because you're depending on a particular definition of <code>slots</code> in Qt), but it should get you going.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have removed all the Qt code from your example and then I tried to compile it (Qt has nothing to do with your compile error). And it compiles for me. The difference was I used the include files from  <strong>Python 2.7</strong>.</p>
<p>So I did a little search for the string <code>PyString_FromString</code> in the folders: <code>C:\Python33\includes</code> (<em>I noted you use python 3.4 and not 3.3 but I suspect this is a 3.x thing</em>) and <code>C:\Python27\includes</code>.</p>
<p>Results:</p>
<p><strong>Python 3.3</strong></p>
<p><img alt="Searching string PyString_FromString in Python33's include folder" src="https://i.stack.imgur.com/X0waV.png"/></p>
<p><strong>Python 2.7</strong></p>
<p><img alt="Searching string PyString_FromString in Python27's include folder" src="https://i.stack.imgur.com/05CJS.png"/></p>
<p>So, apparently, Python 3.4 is not supported by your BoostPython version.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python3 has no <code>PyString_FromString</code> function. Python3 <code>str</code> type internally is unicode objects with complex structure. </p>
<p>Use <code>PyUnicode_FromString</code> or <code>PyUnicode_FromStringAndSize</code> for constructing <code>str</code> object from <code>UTF-8</code> encoded <code>C</code> string (<code>char*</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Move your </p>
<pre><code>#include "boost/python.hpp" 
</code></pre>
<p>...to be before your other includes and it will resolve your problem.</p>
<p>The actual issue is as Scott Deerwester described in his answer.</p>
</div>
<span class="comment-copy">Can you show the code you tried and explain why it didn't work?</span>
<span class="comment-copy">In my opinion it would be much easier to build the app in PyQt + PyOpenGL and if necessary do the computation in a C++ module. PyQt and PyOpenGL are wrappers around C++ code, so it does not slow down. And if your computations use common routines (e.g. linear approximation, matrix multiplication etc.), that have also Python libraries written in C++, you may skip the whole C++ part.</span>
<span class="comment-copy">RTFM <a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">Embedding Python in Another Application</a></span>
<span class="comment-copy">OK, I edited and added the code I tried, can you guys please remove the hold now? Also where should I place the py file which contains the multiply function? (Code based on the following article: <a href="http://goo.gl/gTnu6" rel="nofollow noreferrer">goo.gl/gTnu6</a> )</span>
<span class="comment-copy">It is still giving me these two errors:<code>C:\Python34\include\object.h:435: error: C2059: syntax error : ';'</code> <code>C:\Python34\include\object.h:435: error: C2238: unexpected token(s) preceding ';'</code></span>
<span class="comment-copy">Are you sure that you use right python version in compilation toolset? Like <code>bjam target-os=windows/python=3.4</code>? Or at least define <code>PY_MAJOR_VERSION=3</code> and <code>PY_MINOR_VERSION=4</code>.</span>
