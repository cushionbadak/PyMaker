<div class="post-text" itemprop="text">
<p>I'm trying to find a short way to check if list elements follow a general distribution like :</p>
<pre><code>list = [1,3,5,7,9,11]
</code></pre>
<p>the difference between list[i] and list[i+1] is clearly 2 , but the function i want needs to take in consideration also list[i+1] - list[i] &gt;= 2 .</p>
<p>One liners or lambdas are welcome !</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>&gt;&gt;&gt; l = [1,3,5,6,8,10]
&gt;&gt;&gt; all(y - x &gt;= 2 for x, y in zip(l, l[1:]))
False

&gt;&gt;&gt; l = [1,3,5,7,9,11]
&gt;&gt;&gt; all(y - x &gt;= 2 for x, y in zip(l, l[1:]))
True
</code></pre>
<p>As usual consider <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow"><code>izip</code></a> instead of <code>zip</code> if memory is a concern.</p>
</div>
<div class="post-text" itemprop="text">
<p>The obvious way to compare <code>list[i]</code> and <code>list[i+1]</code> is to <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> the list with its <code>1:</code> slice, then loop over the pairs:</p>
<pre><code>for i, i1 in zip(lst, lst[1:]):
    # stuff
</code></pre>
<p>For example, to find the maximum difference:</p>
<pre><code>maxdiff = max(i1-i for i, i1 in zip(lst, lst[1:]))
</code></pre>
<p>This has a few disadvantages if the list is gigantic, or if you want your code to work with any iterable rather than just sequences. In that case, you can easily write a function that yields adjacent pairs:</p>
<pre><code>def pairs(i):
    i = iter(i)
    prev = next(i)
    for x in i:
        yield prev, x
        prev = x
</code></pre>
<p>Or:</p>
<pre><code>def pairs(i):
    i1, i2 = tee(iter(i))
    next(i2)
    yield from zip(i1, i2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can i try this way:</p>
<pre><code>&gt;&gt;&gt; lis = [1,3,5,6,8,10]

&gt;&gt;&gt; all(map(lambda x: x[0+1] - x[0] &gt;= 2, enumerate(lis)))
False
&gt;&gt;&gt; all(map(lambda x: x[0+1] - x[0] &gt;= 1, enumerate(lis)))
True
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what you are looking for but if your goal is just a one liner to iterate over the list and check a condition list comprehensions are a good option.</p>
<pre><code>[list[i+1] - list[i] &gt;= 2 for i in range(len(list)-1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the code below</p>
<pre><code>def pairwise(l):
    a,b = itertools.tee(l)
    next(b,None)
    return itertools.izip(a,b)

l = [1,3,5,6,8,10]
pairs = pairwise(iter(l))  
print(list(itertools.ifilter(lambda i: i[1] - i[0] == 2,pairs)))
</code></pre>
<p>This is using itertools.</p>
</div>
<span class="comment-copy">The difference between <code>list[i]</code> and <code>list[i+1]</code> is not always 2; it's <code>[2, 2, 1, 2, 2]</code>.</span>
<span class="comment-copy">What's up with <code>5,6</code>? That's not a difference of 2.</span>
<span class="comment-copy">Could you give a precise description of what you want your function to do? "follow a general distribution like [thing]" has too many possible interpretations.</span>
<span class="comment-copy">Even after your update, what does "take into consideration also list[i+1] - list[i] &gt;= 2" <i>mean</i>? What is the rule you want the function to apply? If you don't know a short way to write it, but do know a clunky and verbose way, then show us that.</span>
<span class="comment-copy">This is needlessly obfuscated, which makes it hard to realize that it's wrong. At each point, you're subtracting <code>lis[i] - i</code>, so you get <code>1, 2, 3, 3, 4, 5</code>, which only happens to have the right result for the two examples by accident.</span>
