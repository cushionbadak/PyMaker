<div class="post-text" itemprop="text">
<p>I have a python code inside which the name of file is received with input command</p>
<p>fileName = input("please enter the file name")</p>
<p>My purpose is to write a script to run this file. But I do not want to sit there and input each file name manually. Is it possible to give the fileName as a command line argument or so while running.</p>
<p>Edit: More explanation: I am given python codes with the above line inside, which I should run on some sample input. I do not want to change the file or sample input only want to run the file on the input automatically. The reason is that there are many files to be checked and many sample inputs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a few options, really.</p>
<h1>Redirect stdin to a file</h1>
<p>One you might not have considered is leaving your program the way it is, creating a text file with a list of file names, and then redirecting the standard input to the file. Let's name the file <code>myfilelist.txt</code>. The file would just be a list:</p>
<pre><code>~/file1.txt
~/file2.txt
</code></pre>
<p>Or on Windows:</p>
<pre><code>C:\file1.txt
C:\file2.txt
</code></pre>
<p>Then you would call your program like so:</p>
<pre><code>python ./myprogram.py &lt; ./myfilelist.txt
</code></pre>
<p>Here, the <code>&lt;</code> character tells the operating system to use the contents of <code>myfilelist.txt</code> instead of waiting for you to type. This does assume that your program loops and continues to prompt for multiple files.</p>
<p>If it only accepts one file at a time, then you might consider...</p>
<h1>Using a script</h1>
<p>You can write a script that calls your program a bunch of times separately, each time with a different file name. A bash script on Linux might look like this:</p>
<pre><code>#!/bin/bash
echo '~/file1.txt' | python ./myprogram.py
echo '~/file2.txt' | python ./myprogram.py
</code></pre>
<p>Or a batch file on Windows:</p>
<pre><code>echo C:\file1.txt | python .\myprogram.py
echo C:\file2.txt | python .\myprogram.py
</code></pre>
<p>Here, we execute the command <code>echo</code> to make the system "print" out some text, and then we use the <code>|</code> (pipe) to tell the system to use <code>echo</code>'s output as the other program's input (instead of printing the text to the screen).</p>
<h1>List file argument</h1>
<p>Another option is to create an argument to your program that accepts a <em>single</em> file path, and then use the contents of that file as a list of files to process. This requires modifying your program.</p>
<p>A quick and dirty way of doing that in code:</p>
<pre><code>import sys
if '__main__' == __name__:
    list_file = sys.argv[1]
    with open(list_file) as f:
        for r in f:
            do_my_other_code(r)
</code></pre>
<p>Then you'd call it like this:</p>
<pre><code>python ./myprogram.py ./myfilelist.txt
</code></pre>
<p>Look into <a href="https://docs.python.org/3.3/library/argparse.html" rel="nofollow"><code>argparse</code></a>, <a href="https://docs.python.org/2/library/getopt.html" rel="nofollow"><code>getopt</code></a>, or similar to make this cleaner.</p>
<h1>Argument list</h1>
<p>You could just list all the files as part of the original command. Your code would look something like this:</p>
<pre><code>import sys
if '__main__' == __name__:
    for a in sys.argv[1:]:
        do_my_other_code(a)
</code></pre>
<p>(Note that <code>sys.argv[1:]</code> is what's called a "slice". Look that up if you're unfamiliar with them.)</p>
<p>Then you would call it like this:</p>
<pre><code>python ./myprogram.py ~/file1.txt ~/file2.txt
</code></pre>
<p>I don't especially like this option for your case because your question suggests you have a fairly large list of files. Typing the command would be tedious and error prone. You also wouldn't have the list saved anywhere if the computer crashed or something. But it'd be fine for just a few files.</p>
<h1>Other</h1>
<p>There are lots of ways to do things like this. These are just a few fairly simple options. The <em>best</em> one will depend on your exact usage.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

if len(sys.argv) &gt; 0
    filename = str(sys.argv[1])
</code></pre>
<p>Or something like that</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a>. for example</p>
<p><strong>test.py</strong></p>
<pre><code>import argparse


def main():

    in_args = _argparse()

    print(in_args)

    for a_file in in_args.file:
        ...
        #do_soomthing_with_a_file(a_file)


def _argparse():

    parser = argparse.ArgumentParser()
    parser.add_argument("file",   help="input files", type=str, nargs='+')

    args = parser.parse_args()

    return args


if __name__ == '__main__':
    main()
</code></pre>
<p>Then from command line:</p>
<pre><code># a single file
marcin:test$ python test.py ./data.csv 
Namespace(file=['./data.csv'])

# multiple files
marcin:test$ python test.py ./*.* 
Namespace(file=['./data.csv', './test.py'])

# other example of multiple input files
marcin:test$ python test.py ./test.py ./data.csv 
Namespace(file=['./test.py', './data.csv'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to take a filename, or 1 or more filenames, as command-line arguments, you can do this manually using <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>argv</code></a>:</p>
<pre><code>import sys

for filename in sys.argv[1:]:
    with open(filename) as f:
        for line in f:
            do_stuff_with(line)
</code></pre>
<p>… or by using <code>argparse</code>, as shown in <a href="https://stackoverflow.com/a/27261925/908494">Marcin's answer</a>—a bit more work, but a lot more flexible.</p>
<p>But if the only thing you're doing with these files is opening them and reading from them line by line, it may be simpler to use <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput</code></a>. For example:</p>
<pre><code>import fileinput

for line in fileinput.input():
    do_stuff_with(line)
</code></pre>
<p>By default, <code>fileinput.input</code> looks at <code>argv</code> and opens each specified file one by one, or reads from stdin if no files are specified. So, when that's pretty much what you want to do, it can simplify your code quite a bit.</p>
</div>
<span class="comment-copy">Some links that explain getting command line args: <a href="http://www.diveintopython.net/scripts_and_streams/command_line_arguments.html" rel="nofollow noreferrer">diveintopython.net/scripts_and_streams/…</a>, <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_command_line_arguments.htm</a>, <a href="https://docs.python.org/3.3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3.3/library/argparse.html</a>, <a href="https://docs.python.org/2/library/getopt.html" rel="nofollow noreferrer">docs.python.org/2/library/getopt.html</a></span>
<span class="comment-copy">Let me see if I understand this correctly. You want to pass a list of files as a command line argument and execute your program on those files?</span>
<span class="comment-copy">The simplest solution is <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv[1]</code></a>. Depending on what you're doing, it may be simpler to use <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput</code></a>, or you may want the extra power and flexibility of <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>, but the basic "get one filename as the command-line argument" is just <code>fileName = sys.argv[1]</code>.</span>
<span class="comment-copy">I am given a file, which I should run on some sample input. I do not want to change the file or sample input only want to run the file on the input automatically.</span>
<span class="comment-copy">What's the <code>str</code> there for?</span>
<span class="comment-copy">Sorry, my C++ cast legacy</span>
<span class="comment-copy">Why would you cast a string to a string in C++ any more than you'd convert a string to a string in Python? (In fact, it seems even <i>less</i> likely to be useful in C++, because you're presumably assigning to a string-typed variable, too…)</span>
