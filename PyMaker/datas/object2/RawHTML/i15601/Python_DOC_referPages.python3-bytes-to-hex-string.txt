<div class="post-text" itemprop="text">
<p>I have a bytes object:</p>
<pre><code>a =  b'067b'
</code></pre>
<p>How do I get a string from it? Like this:</p>
<pre><code>"067b"
</code></pre>
<p>I've tried:</p>
<pre><code>In [3]: str(a)
Out[3]: "b'067b'"

In [4]: import codecs

In [5]: codecs.decode(a,'hex')
Out[5]: b'\x06{'

In [6]: import binascii

In [7]: binascii.b2a_hex(a)
Out[7]: b'30363762'

In [8]: binascii.hexlify(a)
Out[8]: b'30363762'
</code></pre>
<p>Is there <em>no way</em> to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You simply want to decode from ASCII here, your bytestring is <em>already</em> representing hexadecimal numbers, in ASCII characters:</p>
<pre><code>&gt;&gt;&gt; a = b'067b'
&gt;&gt;&gt; a.decode('ascii')
'067b'
</code></pre>
<p>Everything you tried is interpreting the bytes as numeric data instead, either as hexadecimal numbers representing bytes or as bytes representing numeric data.</p>
<p>So your first attempt takes the value <code>06</code> as a hexadecimal number and turns that into the byte value <code>6</code>, and <code>7b</code> is turned into the byte value 123, which is the ASCII codepoint for the <code>{</code> character.</p>
<p>In your second attempt you are converting each byte to a hexadecimal representation of its numeric value. The <code>0</code> byte being interpreted as the integer number 48 (the ASCII codepoint for the <code>'0'</code> character), which is <code>30</code> in hexadecimal. <code>'6'</code> is 54, or <code>36</code> in hex, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>bytes</code> representation can be confusing. <code>b'0607'</code> is not the same as <code>bytes([0x06,0x07]</code>). <code>b'0607'</code> is actually  4 bytes <code>[48,54,48,55]</code> where 48 is the ascii code for <code>0</code>,etc. </p>
<pre><code>[x for x in b'0607'] 
[48, 54, 48, 55]
</code></pre>
<p>as such <code>b'0607'</code> is already an ascii string but represented as <code>bytes</code> if you want it to convert it to <code>str</code> you need to <code>b'0607'.decode("ascii")</code> (so that you construct a str from those bytes interpreting them like ascii code (as they are)).</p>
<p>In general, you convert <code>bytes</code> to hex string like this:</p>
<pre><code>&gt;&gt;&gt; a = binascii.hexlify(bytes([1,10,15,16,255]))
&gt;&gt;&gt; a
b'010a0f10ff'
&gt;&gt;&gt; type(a)
&lt;class 'bytes'&gt;
&gt;&gt;&gt; b = a.decode("ascii")
&gt;&gt;&gt; type(b)
&lt;class 'str'&gt;
</code></pre>
</div>
<span class="comment-copy">This works, but I don't see how <code>b'067b'</code> is ASCII. Isn't it really two bytes, '06' and '7b'? That'd give me indeed '\x06{' if taken as ASCII values. What's really going on here?</span>
<span class="comment-copy">@MightyPork: no, it is <b>four</b> bytes. The characters <code>0</code>, <code>6</code>, <code>7</code> and <code>b</code>. The <code>b'...'</code> literal notation does not take hexadecimal characters, it takes ASCII characters.</span>
<span class="comment-copy">Oh ok, confusing.</span>
<span class="comment-copy">@MightyPork: see the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">literal notation specification</a>; if you meant to specify two bytes, you can use <code>b'\x06\x7b'</code> (e.g. use <code>\xhh</code> hex escapes), or use the <code>bytes()</code> function and pass in a sequence of integers: <code>bytes([0x06, 0x7b])</code>, using integers specified as hex literals.</span>
<span class="comment-copy">I got this from <code>pyudev</code> and wanted to display it. I'm not building it. This was just the first time I've seen the b'blah' notation..</span>
