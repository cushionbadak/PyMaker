<div class="post-text" itemprop="text">
<p>I would like to create a binary puzzle with python.
At the moment I already made a 6x6, 8x8 and 10x10 layout which is shown based on the difficulty that the players wishes to play. The purpose of the puzzle can be compared with a game of sudoku, you want to input either 0 or 1 on a given location by the player. Below you will find what I currently have for the layout. </p>
<pre><code>if graad  == 1:
    easy = [['A', 'B', 'C', 'D', 'E'],
     ['_','_','_','_','_','_','_'],
     [0,1,0,1,0,1,' |1'],
     [1,0,1,0,1,0,' |2'],
     [0,1,0,1,0,1,' |3'],
     [1,0,1,0,1,0,' |4'],
     [0,1,0,1,0,1,' |5'],
     [1,0,1,0,1,0,' |6']]
    i = 0
    while i &lt; len(easy):
        j = 0
        s = ""
        while j &lt; len(easy[i]):
            s = s + str(easy[i][j]) + " "
            j = j + 1
        print (s)
        i = i + 1
</code></pre>
<p>Now the problem that I am facing is, how can I let python know that when a player fills in position 3 on column C and row 5 with a 0 for example? 
I was thinking of an IF statement that checks the input on either a A, B, C D, E... Row 1,2,3,4,5.. but that is going to be a lot of if statements.</p>
<p>Edit1: Ok so to clarify.I wanted to post a picture but need more posts.
For example, I have a game board of 6x6 cells. Some of them are filled with a 1 and some of them are filled with 0 and most of them are empty because the goal is to have it look in the end like my layout in the python code.(That's the solution). So you want the user to fill in those empty cells. 
Now, let's say that the player wants to fill in A-1 with a 1, how will python know that input A-1 is linked to index [0][0] in the list?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to convert your letter indices to numbers is to use the <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow">ord()</a> function, which returns the numerical code of a single character. Since you are using upper-case letters, with 'A' being the label for the column with index 0, you can do</p>
<pre><code>column = ord(letter) - ord('A')
</code></pre>
<p>That will convert 'A' to 0, 'B' to 1, etc.</p>
<hr/>
<p>Here's a short example program vaguely based on the code on your question.</p>
<p>It accepts moves in the form <code>A10</code> to set location A1 to '1', 'B30' to set location B3 to '0'. It accepts lower case letters, too, so 'd11' is the same as 'D11'. Hit Ctrl-C to exit.</p>
<p>Tested on Python 2.6.6, but it should work correctly on Python 3. (To run it on Python 2, change <code>input()</code> to <code>raw_input()</code>).</p>
<pre><code>#! /usr/bin/env python

def print_grid(g):
    gsize = len(g)
    base = ord('A')
    print(' '.join([chr(base + i) for i in range(gsize)]))
    print((gsize * 2) * '-')
    for i, row in enumerate(g, 1):
        print(' '.join(row) + ' | ' + str(i))
    print('\n')


def main():
    gsize = 9
    rowstr = gsize * '_'
    grid = [list(rowstr) for i in range(gsize)]
    print_grid(grid)

    while True:
        move = input('Enter move: ')
        letter, number, bit = move.strip()
        col = ord(letter.upper()) - ord('A')
        row = int(number) - 1

        grid[row][col] = bit
        print_grid(grid)


if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you work with a pandas DataFrame to hold your correct answer of the game you can easily check things. The pandas package has a good documentation (and a lot of Q&amp;A here on stackoverflow).</p>
<p>The setup of your correct answer: </p>
<pre><code>import pandas as pd
data = [[0,1,0,1,0,1],
        [1,0,1,0,1,0],
        [0,1,0,1,0,1],
        [1,0,1,0,1,0],
        [0,1,0,1,0,1],
        [1,0,1,0,1,0]]     
easy = pd.DataFrame(data)
easy.columns = ['A','B','C','D','E','F']
print easy
</code></pre>
<p>The item at position <code>'A',0</code> (python starts to number from 0) is given by <code>easy['A'][0]</code>. For more information about indexing a pandas DataFrame object visit <a href="http://pandas.pydata.org/pandas-docs/dev/indexing.html" rel="nofollow">the documentation</a>.</p>
<p>Another usefull thing, a DataFrame object is printable, making it unnecessary to write a <code>print</code> command yourself.</p>
<hr/>
<p>If using DataFrames is overkill for you, another option is to work with a 'translation' dictionary. This dictionary will use the letters for keys and the corresponding column number as a value. </p>
<pre><code>&gt;&gt;&gt; column = {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5}
&gt;&gt;&gt; print column['A']
0
</code></pre>
</div>
<span class="comment-copy">Te good news is that what you want to do is probably fairly easy and won't require a zillion <code>if</code> statements. But you need to clarify your question a bit. It's not exactly clear what you mean by <code>a player fills in position 3 on column C and row 5 with a 0</code>. Please give us a clear example (or several) of input you expect a player to enter. Also, how come there are 6 columns in the grid but only the first 5 have a letter?</span>
<span class="comment-copy">FWIW, there's a more efficient way to construct and print that grid, but I guess that's not exactly relevant to your question...</span>
<span class="comment-copy">@PM2Ring I edited the post with extra info.</span>
<span class="comment-copy">@Ziplay I think that the answer of your question can be found in the choice of data structure. For example a pandas DataFrame object contains named indices (so you can include the letters).</span>
<span class="comment-copy">@tvandenbrande would you be able to give an example for that? I'm farily new to the python programming and am not sure what pandas dataframe object is.</span>
<span class="comment-copy">Thanks for your answer. But even when it converts A to a 0. Will it be able to find the position in the list?</span>
<span class="comment-copy">@Ziplay: I've added a program that should help you figure out what to do. :) Note that this program has no error checking, so it will give error messages if you give it bad input, and it doesn't test if the <code>bit</code> variable is actually a valid bit.</span>
<span class="comment-copy">Thank you so much for the effort you put in that. Very helpful.</span>
<span class="comment-copy">Yes I'm pretty unfamiliar with pandas Dataframe but it's very helpful either way. Thank you for the effort.</span>
