<div class="post-text" itemprop="text">
<p>I am trying to run a sort of simulations where there are fixed parameters i need to iterate on and find out the combinations which has the least cost.I am using python multiprocessing for this purpose but the time consumed is too high.Is there something wrong with my implementation?Or is there better solution.Thanks in advance</p>
<pre><code>    import multiprocessing
    class Iters(object):
        #parameters for iterations
        iters['cwm']={'min':100,'max':130,'step':5}
        iters['fx']={'min':1.45,'max':1.45,'step':0.01}
        iters['lvt']={'min':106,'max':110,'step':1}
        iters['lvw']={'min':9.2,'max':10,'step':0.1}
        iters['lvk']={'min':3.3,'max':4.3,'step':0.1}
        iters['hvw']={'min':1,'max':2,'step':0.1}
        iters['lvh']={'min':6,'max':7,'step':1}

        def run_mp(self):
            mps=[]
            m=multiprocessing.Manager()
            q=m.list()
            cmain=self.iters['cwm']['min']
            while(cmain&lt;=self.iters['cwm']['max']):
                t2=multiprocessing.Process(target=mp_main,args=(cmain,iters,q))
                mps.append(t2)
                t2.start()
                cmain=cmain+self.iters['cwm']['step']
            for mp in mps:
                mp.join()
            r1=sorted(q,key=lambda x:x['costing'])
            returning=[r1[0],r1[1],r1[2],r1[3],r1[4],r1[5],r1[6],r1[7],r1[8],r1[9],r1[10],r1[11],r1[12],r1[13],r1[14],r1[15],r1[16],r1[17],r1[18],r1[19]]
            self.counter=len(q)
            return returning

    def mp_main(cmain,iters,q):
        fmain=iters['fx']['min']
        while(fmain&lt;=iters['fx']['max']):
            lvtmain=iters['lvt']['min']
            while (lvtmain&lt;=iters['lvt']['max']):
                lvwmain=iters['lvw']['min']
                while (lvwmain&lt;=iters['lvw']['max']):
                    lvkmain=iters['lvk']['min']
                    while (lvkmain&lt;=iters['lvk']['max']):
                        hvwmain=iters['hvw']['min']
                        while (hvwmain&lt;=iters['hvw']['max']):
                            lvhmain=iters['lvh']['min']
                            while (lvhmain&lt;=iters['lvh']['max']):
                                test={'cmain':cmain,'fmain':fmain,'lvtmain':lvtmain,'lvwmain':lvwmain,'lvkmain':lvkmain,'hvwmain':hvwmain,'lvhmain':lvhmain}
                                y=calculations(test,q)
                                lvhmain=lvhmain+iters['lvh']['step']
                            hvwmain=hvwmain+iters['hvw']['step']
                        lvkmain=lvkmain+iters['lvk']['step']
                    lvwmain=lvwmain+iters['lvw']['step']
                lvtmain=lvtmain+iters['lvt']['step']
            fmain=fmain+iters['fx']['step']

    def calculations(test,que):
        #perform huge number of calculations here
        output={}
        output['data']=test
        output['costing']='foo'
        que.append(output)

    x=Iters()
    x.run_thread()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From a theoretical standpoint:</p>
<p>You're iterating every possible combination of 6 different variables. Unless your search space is very small, or you wanted just a very rough solution, there's no way you'll get any meaningful results within reasonable time.</p>
<blockquote>
<p>i need to iterate on and find out the combinations which has the least cost</p>
</blockquote>
<p>This very much sounds like an <a href="https://en.wikipedia.org/wiki/Optimization_problem" rel="nofollow">optimization problem</a>.</p>
<p>There are many different efficient ways of dealing with these problems, depending on the properties of the function you're trying to optimize. If it has a straighforward "shape" (it's <a href="https://en.wikipedia.org/wiki/Injective_function" rel="nofollow">injective</a>), you can use a <a href="https://en.wikipedia.org/wiki/Greedy_algorithm" rel="nofollow">greedy algorithm</a> such as <a href="https://en.wikipedia.org/wiki/Hill_climbing" rel="nofollow">hill climbing</a>, or <a href="https://en.wikipedia.org/wiki/Gradient_descent" rel="nofollow">gradient descent</a>. If it's more complex, you can try <a href="https://en.wikipedia.org/wiki/Hill_climbing#Variants" rel="nofollow">shotgun hill climbing</a>.</p>
<p>There are a lot more complex algorithms, but these are the basic, and will probably help you a lot in this situation.</p>
<hr/>
<p>From a  more practical programming standpoint:</p>
<p>You are using very large steps - so large, in fact, that you'll only probe the function 19,200. If this is what you want, it seems very feasible. In fact, if I comment the <code>y=calculations(test,q)</code>, this returns instantly on my computer.</p>
<p>As you indicate, there's a "huge number of calculations" there - so maybe that is your <em>real</em> problem, and not the code you're asking for help with.</p>
<p>As to multiprocessing, my honest advise is to <em>not use it until you already have your code executing reasonably fast</em>. Unless you're running a supercomputing cluster (you're <em>not</em> programming a supercomputing cluster in python, are you??), parallel processing will get you speedups of 2-4x. That's absolutely negligible, compared to the gains you get by the kind of algorithmic changes I mentioned.</p>
<p>As an aside, I don't think I've ever seen that many nested loops in my life (excluding code jokes). If don't want to switch to another algorithm, you might want to consider using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> together with <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="nofollow"><code>numpy.arange</code></a></p>
</div>
<span class="comment-copy">The calculation isnt straight forward.I need to run all possible combinations.The optimum cost depends on various other params which are taken from the user.If a particular combintation dint give a good cost.But the next step in each might give me a better cost.Moreover the best cost is not the final output.The user selects the combination which is more suitable for him based on the cost</span>
<span class="comment-copy">THe min fx value is 1.40 I changed it on my local system to reduce the time</span>
<span class="comment-copy">@Tyranicangel that's 5x times slower then, not worrying at all. The algorithms I mentioned can be trivially adapted to return multiple candidate solutions. Having parameters taken from the user is no problem at all, if they're abstracted in <code>calculations</code>. Did you read and understand the links I've provided? Why do you think you need to run all combinations?</span>
<span class="comment-copy">The costing varies for each combination.I cant discard any loop saying that the values are not required.The problem i am facing here is that only a single process is being spawned not 7</span>
