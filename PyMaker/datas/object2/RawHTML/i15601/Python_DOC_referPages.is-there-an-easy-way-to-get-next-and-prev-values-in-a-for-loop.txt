<div class="post-text" itemprop="text">
<p>So...is there an easy way to get next and previous values while iterating with a for-loop in Python?</p>
<p>I know this can be easily done if you do something like:</p>
<pre><code>a = [3,4,5,6,3,4,5]
for x in range(len(a)):
    next = a[x+1]
</code></pre>
<p>But what about:</p>
<pre><code>for x in a:
    x.next??
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a common pattern that I use to iterate over pairs of items in a sequence:</p>
<pre><code>&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; for i, j in zip(a, a[1:]):
...  print i, j
... 
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
</code></pre>
<p>If you want three items (prev, item, next) you can do this:</p>
<pre><code>&gt;&gt;&gt; for i, j, k in zip(a, a[1:], a[2:]):
...  print i, j, k
... 
0 1 2
1 2 3
2 3 4
3 4 5
4 5 6
5 6 7
6 7 8
7 8 9
</code></pre>
<p><code>i</code> is the previous element, <code>j</code> is the current element, <code>k</code> is the next element.</p>
<p>Of course, this "starts" at 1 and "ends" at 8. What should you receive as prev/next at the ends? Perhaps <code>None</code>? Probably easiest to just do this:</p>
<pre><code>&gt;&gt;&gt; a = [None] + a + [None]
&gt;&gt;&gt; for i, j, k in zip(a, a[1:], a[2:]):
...  print i, j, k
... 
None 0 1
0 1 2
1 2 3
2 3 4
3 4 5
4 5 6
5 6 7
6 7 8
7 8 9
8 9 None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>easiest way I know of is </p>
<pre><code>for x,next in zip (a, a[1:]):
  # now you have x and next available
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could always convert <code>a</code> into an iterator with <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow"><code>iter</code></a> and then iterate over that.  This will allow you to use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a> inside the loop to advance the iterator that you are iterting over:</p>
<pre><code>&gt;&gt;&gt; a = [3,4,5,6,3,4,5]
&gt;&gt;&gt; it = iter(a)
&gt;&gt;&gt; for i in it:
...     j = next(it, None)
...     print('i={}, j={}'.format(i, j))
...
i=3, j=4
i=5, j=6
i=3, j=4
i=5, j=None
&gt;&gt;&gt;
</code></pre>
<p>Also, the <code>None</code> in there is the default value to return if there is no next item.  You can set it to whatever value you want though.  Omitting the argument will cause a <code>StopIteration</code> exception to be raised:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; it = iter(a)
&gt;&gt;&gt; for i in it:
...     j = next(it)
...     print('i={}, j={}'.format(i, j))
...
i=1, j=2
i=3, j=4
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
StopIteration
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want both the <code>previous</code> and the <code>next</code> element in a circular sequence for each iteration:</p>
<pre><code>a = [3,4,5,6,3,4,5]
l = len(a)

for k, v in enumerate(a):
    print a[(k-1)%l], v, a[(k+1)%l] #prints previous, current, next elements
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is easy too:</p>
<pre><code>&gt;&gt;&gt; a = [3,4,5,6,3,4,5]
&gt;&gt;&gt; for i in range(1,len(a)):
...     print a[i-1],a[i]
... 
3 4
4 5
5 6
6 3
3 4
4 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably overkill but I sometimes use the following more general generator for this, which yields a sequence of 'windows' of any size on a list or other iterable. (The window size must be less than the length of the iterable.)</p>
<pre><code>def sliding_window(iterable, size):
    try:                    # indexed iterable
        for i in range(len(iterable) - size + 1):
            yield iterable[i:i+size]
    except TypeError:       # iterator
        window = [next(iterable) for _ in range(size)]
        yield window
        for item in iterable:
            window = window[1:] + [item]
            yield window

a = [3,4,5,6,3,4,5]
for current, following in sliding_window(a, 2):
    print(current, following)
</code></pre>
</div>
<span class="comment-copy">Could you give an example? If <code>x = 4</code>, what would your expected output be?</span>
<span class="comment-copy">So for the second code snippet, let's say x hits 4 at index 1, is there a built in function that returns back 5?</span>
<span class="comment-copy">@pyramidface: your question is pretty abstract.  What would you like to do with the next and previous values?  How you get them will likely depend on what you want to do with them.</span>
<span class="comment-copy">Useful question. Java implements such streams. Python does not.</span>
<span class="comment-copy">I kept it open-ended on purpose. I just wanted to know if there was a built in function in python that you could easily use to get the next value. One example of usage is to see if the next value in a string is a letter or number.</span>
<span class="comment-copy">I haven't seen this before. Thanks for sharing.</span>
