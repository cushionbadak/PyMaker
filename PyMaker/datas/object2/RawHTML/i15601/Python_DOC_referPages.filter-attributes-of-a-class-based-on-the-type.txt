<div class="post-text" itemprop="text">
<p>I would like to filter the attributes of an object of a class based on their types.</p>
<p>The answer will be something around <code>inspect</code>, “list comprehensions”, <code>type()</code>, <code>__dict__</code> and <code>dict()</code> but I don't get it working.</p>
<pre><code>class A():
    def __init__(self, value):
        self.x = value

    def __str__(self):
        return "value = {}\n".format(self.x)

class T():
    def __init__(self):
        self.a1 = A(1)
        self.a2 = A(2)
        self.b = 4

t = T()
</code></pre>
<p>And I would like to print only the attributes of the type <code>A</code> in the class <code>T</code></p>
<pre><code>class T():
    def __init__(self):
        self.a1 = A(1)
        self.a2 = A(2)
        self.b = 4

    def __str__(self):
         ret = ""
         for i in [*magic*]:
             ret += str(i)
         return ret
</code></pre>
<p>Output should be something like:</p>
<pre><code>value = 10
value = 15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars(self)</code></a> to get a dictionary of the local attributes, then just test the values with <code>isinstance()</code>:</p>
<pre><code>def __str__(self):
    ret = ""
    for i in vars(self).values():
        if isinstance(i, A):
            ret += str(i)
    return ret
</code></pre>
<p><code>vars()</code> essentially returns <code>self.__dict__</code> here but is cleaner.</p>
<p>Turning this into a list comprehension for one-liner appeal:</p>
<pre><code>def __str__(self):
    return ''.join([i for i in vars(self).values() if isinstance(i, A)])
</code></pre>
</div>
