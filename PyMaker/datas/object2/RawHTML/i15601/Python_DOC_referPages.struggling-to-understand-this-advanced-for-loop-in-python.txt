<div class="post-text" itemprop="text">
<p>I know how to do basic for loops but I'm struggling to understand the for loop in this code snippet. I am looking for a way to find a substring within a list and grab the index (so I can take that string and slice it - in this example, extract the value 25 given there is a list item X minute[s]).</p>
<p>This code works and returns 3, but I am struggling to understand i for i etc. - I've only ever worked on for loops that start with for. Note i haven't defined i or s. I do understand the enumeration. </p>
<p>Note theres probably other ways to do this but when I started down this road I realised I didn't understand the many examples I found which are similar to the for loop below, so I'm fixated now on understanding this method. </p>
<p>Much appreciate the explanation in advance</p>
<pre><code>uptime list = ['routerX uptime is 2 weeks', '6 days', '4 hours', '25 minutes']

min_index = [i for i, s in enumerate(uptime_list) if 'minute' in s]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first term here, <code>i</code>, is what gets returned for each iteration of the loop (assuming the condition is true - more on that later).</p>
<p>In the second part, <code>for i, s in enumerate(uptime_list)</code> the <code>enumerate</code> function will make the list of strings into a list of tuples that can be iterated over like this:</p>
<pre><code>&gt;&gt;&gt; for x in enumerate(uptime_list): print(x)
(0, 'routerX uptime is 2 weeks')
(1, '6 days')
(2, '4 hours')
(3, '25 minutes')
</code></pre>
<p>Then, multiple assignment happens for each iteration in the loop. For example, if you do <code>x,y = 0,1</code> then <code>x</code> will be 0 and <code>y</code> will be 1. The only difference is that in this case, the tuples are coming from the <code>enumerate</code> function and are being assigned to <code>i</code> and <code>s</code>.</p>
<p>Finally, the last portion, <code>if 'minute' in s</code> will only cause the first <code>i</code> to be returned when the condition is true (i.e., when "minutes" is in the <code>s</code> variable that is currently being looked at). If you add a second term to <code>uptime_list</code> containing the string "minutes", <code>min_index</code> will then contain multiple numbers because the condition will be true for multiple elements in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>The function <code>enumerate()</code> will return a list of tuples in the form <code>[(0, element1), (1, element2), ...]</code> and a conditional list comprehension is used to filter that list, finally only the indexes are chosen. </p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions can be directly translated to explicit <code>for</code> statements.</p>
<p>You take everything from the first <code>for</code> clause and nest them as separate statements. In the innermost statement, you <code>append</code> the expression before the <code>for</code> clause to the list. That's the entire rule. So, this:</p>
<pre><code>min_index = [i for i, s in enumerate(uptime_list) if 'minute' in s]
</code></pre>
<p>… means:</p>
<pre><code>min_index = []
for i, s in enumerate(uptime_list):
    if 'minute' in s:
        min_index.append(i)
</code></pre>
<p>For a longer explanation, see <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List Comprehensions</a> in the official tutorial.  For the fully gritty details of the syntax and semantics, see <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow">Displays for sets, lists, and dictionaries</a> in the language reference.*</p>
<hr/>
<p>If you don't understand <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a>, that's just a way of getting both the index and value of each element of a list (or other iterable). <code>For example, enumerate(['x', 'y', 'z'])</code> gives you <code>(0, 'x')</code>, then <code>(1, 'y')</code>, then <code>(2, 'z')</code>.</p>
<p>So, each time through the loop, <code>s</code> is one of the values from <code>uptime_list</code>, and <code>i</code> is the index of that value. So at the end, we have a list of all the indices from <code>uptime_list</code> whose corresponding values included the string <code>'minute'</code>. For example, given this:</p>
<pre><code>uptime_list = ['20 seconds', '3 minutes 5 seconds', '17 seconds', '1 minute']
</code></pre>
<p>You'll get <code>[1, 3]</code>, because elements #1 and #3 contain <code>minute</code>.</p>
<hr/>
<p><sub>* Note that some of the details have changed over time, so if you're using an older version, especially a 2.x version, switch to the right version in the docs.</sub></p>
</div>
<span class="comment-copy">This is an example of a list comprehension. It basically has three parts to it: the first <code>i</code>, the <code>for i, s in enumerate(uptime_list)</code>, and the <code>if 'minute' in s</code>. The first part is a sort of mapping, the second defines the domain, and the third is the filter operation.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/14499762/python-basics-for-i-element-in-enumerateseq-why-how-does-this-work">Python Basics: for i, element in enumerate(seq)..why/how does this work?</a></span>
<span class="comment-copy">Oh, it's just another way of writing <code>map(lambda l: l[0], filter(lambda l: 'minute' in l[1], zip(range(len(uptime_list)), uptime_list)))</code> <i>fun fun fun</i>, (I think this is why they put list comprehensions in Python and deprecated <code>map</code> and <code>filter</code>).</span>
<span class="comment-copy">@TessellatingHeckler: Well, the expression <code>i</code> is obviously still less verbose than the function <code>lambda (i, s): i</code>. Personally, I never use <code>map</code> unless I've got a named function (or bound or unbound method, or a <code>partial</code> I've already created for some other reason, etc.) to pass, but I think to some extent it's just a matter of taste; some people who I think understand "Pythonic" better than me use it more often than I do.</span>
<span class="comment-copy">@TessellatingHeckler: As for the "mapzip", I don't really know of a name for it (that's why I used the clumsy term "multi-argument <code>map</code>). A few times I've written <code>map(f, zip(…))</code> and then realized I didn't need the <code>zip</code>. In 2.x (but not 3.x) you can use it as a non-lazy no-fillvalue <code>izip_longest</code>. But the most common use I've seen is actually not that compelling: as an alternative to using <code>partial</code> or <code>lambda</code> to bind in an argument, like the <code>map(pow, a, repeat(2))</code> example in the <code>itertools</code> docs, which would only be your first thought if you were translating from Haskell in your head.</span>
<span class="comment-copy">cheers - where does the append come in? and when you break it down to multiple lines the enumeration is crystal clear - but where is the initial i? (as in 'i for i')EDIT just read <a href="http://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">pythonforbeginners.com/basics/list-comprehensions-in-python</a>, makes sense, thanks</span>
<span class="comment-copy">@wintermute000: To help improve the answer: I wrote "you append the expression before the <code>for</code> clause". In this case, that's the first <code>i</code>. How can I make that clearer?</span>
