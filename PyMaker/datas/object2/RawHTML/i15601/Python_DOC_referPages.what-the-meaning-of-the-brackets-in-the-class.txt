<div class="post-text" itemprop="text">
<p>In python, when I read others' code, I meet this situation where a class is defined and after it there is a pair of brackets.</p>
<pre><code>class AStarFoodSearchAgent(SearchAgent):
     def __init__():
        #....
</code></pre>
<p>I don't know what is the meaning of '(SearchAgent)',because what I usually meet and use doesn't seem that.</p>
</div>
<div class="post-text" itemprop="text">
<p>It indicates that <code>AStarFoodSearchAgent</code> is a <strong>subclass</strong> of <code>SearchAgent</code>. It's part of a concept called <strong>inheritance</strong>.</p>
<h1>What is inheritance?</h1>
<p>Here's an example. You might have a <code>Car</code> class, and a <code>RaceCar</code> class. When implementing the <code>RaceCar</code> class, you may find that it has a lot of behavior that is very similar, or exactly the same, as a <code>Car</code>. In that case, you'd make <code>RaceCar a subclass of</code>Car`.</p>
<pre><code>class Car(object):
    #Car is a subclass of Python's base objeect. The reasons for this, and the reasons why you 
    #see some classes without (object) or any other class between brackets is beyond the scope 
    #of this answer.

    def get_number_of_wheels(self):
        return 4

    def get_engine(self):
        return CarEngine(fuel=30)

class RaceCar(Car):
#Racecar is a subclass of Car
    def get_engine(self):
        return RaceCarEngine(fuel=50)

my_car = Car() #create a new Car instance
desired_car = RaceCar() #create a new RaceCar instance.
my_car.get_engine() #returns a CarEngine instance
desired_car.get_engine() #returns a RaceCarEngine instance

my_car.get_number_of_wheels() #returns 4.
desired_car.get_number_of_wheels() # also returns 4! WHAT?!?!?!
</code></pre>
<p>We didn't define <code>get_number_of_wheels</code> on <code>RaceCar</code>, and still, it exists, and returns 4 when called. That's because <code>RaceCar</code> has inherited <code>get_number_of_wheels</code> from <code>Car</code>. Inheritance is a very nice way to reuse functionality from other classes, and override or add only the functionality that needs to be different.</p>
<h1>Your Example</h1>
<p>In your example, <code>AStarFoodSearchAgent</code> is a subclass of <code>SearchAgent</code>. This means that it inherits some functionality from <code>SearchAgemt</code>. For instance, <code>SearchAgent</code> might implement a method called <code>get_neighbouring_locations()</code>, that returns all the locations reachable from the agent's current location. It's not necessary to reimplement this, just to make an A* agent.</p>
<p>What's also nice about this, is that you can use this when you expect a certain type of object, but you don't care about the implementation. For instance, a <code>find_food</code> function may expect a <code>SearchAgent</code> object, but it wouldn't care about how it searches. You might have an <code>AStarFoodSearchAgent</code> and a <code>DijkstraFoodSearchAgent</code>. As long as both of them inherit from <code>SearchAgent</code>, <code>find_food</code> can use Ã¬sinstance<code>to check that the searcher it expects behaves like a</code>SearchAgent<code>. The</code>find_food`function might look like this:</p>
<pre><code>def find_food(searcher):
    if not isinstance(searcher, SearchAgent):
        raise ValueError("searcher must be a SearchAgent instance.")

    food = searcher.find_food()
    if not food:
        raise Exception("No, food. We'll starve!")
    if food.type == "sprouts":
        raise Exception("Sprouts, Yuk!)
    return food
</code></pre>
<h1>Old/Classic Style Classes</h1>
<p>Upto Python 2.1, old-style classes were the only type that existed. Unless they were a subclass of some other class, they wouldn't have any parenthesis after the class name.</p>
<pre><code>class OldStyleCar:
    ...
</code></pre>
<p>New style classes always inherit from something. If you don't want to inherit from any other class, you inherit from <code>object</code>.</p>
<pre><code>class NewStyleCar(object):
    ...
</code></pre>
<p>New style classes unify python types and classes. For instance, the type of <code>1</code>, which you can obtain by calling <code>type(1)</code> is <code>int</code>, but the type of <code>OldStyleClass()</code> is <code>instance</code>, with new style classes, <code>type(NewStyleCar)</code> is <code>Car</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>SearchAgent</code> is the superclass of the class <code>AStarFoodSearchAgent</code>. This basically means that an <code>AStarFoodSearchAgent</code> is a special kind of <code>SearchAgent</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It means that class <strong>AStarFoodSearchAgent</strong> extends <strong>SearchAgent</strong>.</p>
<p>Check section 9.5 here</p>
<p><a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow">https://docs.python.org/2/tutorial/classes.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is inheritance in python, just like in any other OO language</p>
<p><a href="https://docs.python.org/2/tutorial/classes.html#inheritance" rel="nofollow">https://docs.python.org/2/tutorial/classes.html#inheritance</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It means that <code>SearchAgent</code> is a base class of <code>AStarFoodSearchAgent</code>. In other word, <code>AStarFoodSearchAgent</code> inherits from <code>SearchAgent</code> class.</p>
<p>See <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow">Inheritance - Python tutorial</a>.</p>
</div>
<span class="comment-copy"><code>()</code> == parenthesis <code>{}</code> ==  brackets <code>[]</code> == braces Just for future reference.</span>
<span class="comment-copy">"Brackets" may be the British word for <code>()</code>, but in programming they are called parentheses to avoid confusion with <code>[]</code>.</span>
<span class="comment-copy">@Takendarkk: At least where I'm from, <code>[]</code> are brackets and <code>{}</code> are braces.</span>
<span class="comment-copy">Where I am from these are brackets <code>()</code> these are braces <code>{}</code> and these are square brackets <code>[]</code>.</span>
<span class="comment-copy">Thanks for asking the right question the wrong way ... as how you put it is what I googled for ... now I know the right terminologies :-)</span>
<span class="comment-copy">Thank you,it is what I need.</span>
