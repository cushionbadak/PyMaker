<div class="post-text" itemprop="text">
<p>Please consider the following short Python 2.x script:</p>
<pre><code>#!/usr/bin/env python
class A(object):
    class B(object):
        class C(object):
            pass
        def __init__(self):
            self.c = A.B.C()
    def __init__(self):
        self.b = A.B()

def main():
    a = A()
    print "%s: %r" % (type(a).__name__, type(a))
    print "%s: %r" % (type(a.b).__name__, type(a.b))
    print "%s: %r" % (type(a.b.c).__name__, type(a.b.c))

if __name__ == "__main__":
    main()
</code></pre>
<p>The output of which, when run in Python 2.7.6, is:</p>
<pre><code>A: &lt;class '__main__.A'&gt;
B: &lt;class '__main__.B'&gt;
C: &lt;class '__main__.C'&gt;
</code></pre>
<hr/>
<p>I was expecting a different output here. Something more along the lines of:</p>
<pre><code>A: &lt;class '__main__.A'&gt;
A.B: &lt;class '__main__.A.B'&gt;
A.B.C: &lt;class '__main__.A.B.C'&gt;
</code></pre>
<p>In particular I expected to see the same qualified name that I have to give to instantiate <code>A.B</code> and <code>A.B.C</code> classes respectively.</p>
<p>Could anyone shed any light on why those new type classes identify themselves as rooted in <code>__main__</code> instead of how they were nested in the code?</p>
<p>Also: is there a way to fix this by naming the nested classes explicitly, such that they will identify themselves as <code>A.B</code> and <code>A.B.C</code> respectively (or possibly in the type representation as <code>__main__.A.B</code> and <code>__main__.A.B.C</code> respectively)?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/glossary.html#term-qualified-name" rel="nofollow">Qualified names</a> for classes were introduced in Python 3.3 (see <a href="https://www.python.org/dev/peps/pep-3155" rel="nofollow">PEP 3155</a>) and AFAIK there's no non-hacky way to do this on Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to allow me to get the name of a class I introduced the following functions to introduce the PEP 3155 attribute <code>__qualname__</code>:</p>
<pre><code>def fixup_module_class_names(modname=__name__):
    """
    Fixes the class types of the given module to have an attribute __qualname__
    as stipulated by PEP 3155.
    """
    def fixup_classtype_members(obj, prefix=None):
        """
        Fixes the __qualname__ attribute of the object as well as its contained
        member classes recursively.
        """
        from inspect import getmembers, isclass
        for n, t in getmembers(obj, isclass):
            if (t.__module__ != modname) or n == "__class__":
                continue
            setattr(t, "__qualname__", n if prefix is None else "%s.%s" % (prefix, n))
            fixup_classtype_members(t, getattr(t, "__qualname__"))
    fixup_classtype_members(sys.modules[modname])
</code></pre>
<p>Just call it as <code>fixup_module_class_names()</code> or by passing the module name whose class type members you want to have with <code>__qualname___</code> attributes.</p>
<p>In order to account for the missing <code>__qualname__</code> attributes on other class types I am then using <code>typename(x)</code> instead of <code>type(x).__name__</code> where <code>typename</code> is defined as:</p>
<pre><code>def typename(clsobj):
    "Retrieve the qualified name from an object or the name from anything else."
    return getattr(type(clsobj), "__qualname__", None) or getattr(type(clsobj), "__name__")
</code></pre>
<p><strong>Note:</strong> If you, distinguished reader, find anything wrong with this approach for Python 2.x, please leave a comment or simply edit and fix the code as appropriate.</p>
</div>
<span class="comment-copy">@vaultah: thanks. Much appreciated. So there is no remedy in Python 2.x?</span>
