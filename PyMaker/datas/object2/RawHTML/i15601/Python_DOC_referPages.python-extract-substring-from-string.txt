<div class="post-text" itemprop="text">
<p>I have many rows in a database that contains xml and I'm trying to write a Python script that will go through those rows and count how many instances of a particular node attribute show up. For instance, my tree looks like:</p>
<pre><code>&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar="1"/&gt;
      &lt;type foobar="2"/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
</code></pre>
<p>How can I access the attributes 1 and 2 in the XML using Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest <a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer"><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href="http://lxml.de/" rel="noreferrer"><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>
<p>First build an Element instance <code>root</code> from the XML, e.g. with the <a href="http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML" rel="noreferrer">XML</a> function, or by parsing a file with something like:</p>
<pre><code>import xml.etree.ElementTree as ET
root = ET.parse('thefile.xml').getroot()
</code></pre>
<p>Or any of the many other ways shown at <a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer"><code>ElementTree</code></a>. Then do something like:</p>
<pre><code>for type_tag in root.findall('bar/type'):
    value = type_tag.get('foobar')
    print(value)
</code></pre>
<p>And similar, usually pretty simple, code patterns.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/xml.dom.minidom.html" rel="noreferrer"><code>minidom</code></a> is the quickest and pretty straight forward:</p>
<p>XML:</p>
<pre><code>&lt;data&gt;
    &lt;items&gt;
        &lt;item name="item1"&gt;&lt;/item&gt;
        &lt;item name="item2"&gt;&lt;/item&gt;
        &lt;item name="item3"&gt;&lt;/item&gt;
        &lt;item name="item4"&gt;&lt;/item&gt;
    &lt;/items&gt;
&lt;/data&gt;
</code></pre>
<p>PYTHON:</p>
<pre><code>from xml.dom import minidom
xmldoc = minidom.parse('items.xml')
itemlist = xmldoc.getElementsByTagName('item')
print(len(itemlist))
print(itemlist[0].attributes['name'].value)
for s in itemlist:
    print(s.attributes['name'].value)
</code></pre>
<p>OUTPUT</p>
<pre><code>4
item1
item1
item2
item3
item4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://www.crummy.com/software/BeautifulSoup/" rel="noreferrer">BeautifulSoup</a></p>
<pre><code>from bs4 import BeautifulSoup

x="""&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar="1"/&gt;
      &lt;type foobar="2"/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;"""

y=BeautifulSoup(x)
&gt;&gt;&gt; y.foo.bar.type["foobar"]
u'1'

&gt;&gt;&gt; y.foo.bar.findAll("type")
[&lt;type foobar="1"&gt;&lt;/type&gt;, &lt;type foobar="2"&gt;&lt;/type&gt;]

&gt;&gt;&gt; y.foo.bar.findAll("type")[0]["foobar"]
u'1'
&gt;&gt;&gt; y.foo.bar.findAll("type")[1]["foobar"]
u'2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are many options out there. <a href="http://effbot.org/zone/celementtree.htm" rel="noreferrer">cElementTree</a> looks excellent if speed and memory usage are an issue. It has very little overhead compared to simply reading in the file using <code>readlines</code>.</p>
<p>The relevant metrics can be found in the table below, copied from the <a href="http://effbot.org/zone/celementtree.htm" rel="noreferrer">cElementTree</a> website:</p>
<pre><code>library                         time    space
xml.dom.minidom (Python 2.1)    6.3 s   80000K
gnosis.objectify                2.0 s   22000k
xml.dom.minidom (Python 2.4)    1.4 s   53000k
ElementTree 1.2                 1.6 s   14500k  
ElementTree 1.2.4/1.3           1.1 s   14500k  
cDomlette (C extension)         0.540 s 20500k
PyRXPU (C extension)            0.175 s 10850k
libxml2 (C extension)           0.098 s 16000k
readlines (read as utf-8)       0.093 s 8850k
cElementTree (C extension)  --&gt; 0.047 s 4900K &lt;--
readlines (read as ascii)       0.032 s 5050k   
</code></pre>
<p>As pointed out by <a href="https://stackoverflow.com/questions/1912434/how-do-i-parse-xml-in-python#comment54491266_19302655">@jfs</a>, <code>cElementTree</code> comes bundled with Python:</p>
<ul>
<li>Python 2: <code>from xml.etree import cElementTree as ElementTree</code>.</li>
<li>Python 3: <code>from xml.etree import ElementTree</code> (the accelerated C version is used automatically).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I suggest <a href="https://pypi.python.org/pypi/xmltodict">xmltodict</a> for simplicity.</p>
<p>It parses your xml to an OrderedDict;</p>
<pre><code>&gt;&gt;&gt; e = '&lt;foo&gt;
             &lt;bar&gt;
                 &lt;type foobar="1"/&gt;
                 &lt;type foobar="2"/&gt;
             &lt;/bar&gt;
        &lt;/foo&gt; '

&gt;&gt;&gt; import xmltodict
&gt;&gt;&gt; result = xmltodict.parse(e)
&gt;&gt;&gt; result

OrderedDict([(u'foo', OrderedDict([(u'bar', OrderedDict([(u'type', [OrderedDict([(u'@foobar', u'1')]), OrderedDict([(u'@foobar', u'2')])])]))]))])

&gt;&gt;&gt; result['foo']

OrderedDict([(u'bar', OrderedDict([(u'type', [OrderedDict([(u'@foobar', u'1')]), OrderedDict([(u'@foobar', u'2')])])]))])

&gt;&gt;&gt; result['foo']['bar']

OrderedDict([(u'type', [OrderedDict([(u'@foobar', u'1')]), OrderedDict([(u'@foobar', u'2')])])])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://lxml.de/objectify.html" rel="noreferrer">lxml.objectify</a> is really simple.</p>
<p>Taking your sample text:</p>
<pre><code>from lxml import objectify
from collections import defaultdict

count = defaultdict(int)

root = objectify.fromstring(text)

for item in root.bar.type:
    count[item.attrib.get("foobar")] += 1

print dict(count)
</code></pre>
<p>Output:</p>
<pre><code>{'1': 1, '2': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has an interface to the expat xml parser.</p>
<pre><code>xml.parsers.expat
</code></pre>
<p>It's a non-validating parser, so bad xml will not be caught. But if you know your file is correct, then this is pretty good, and you'll probably <strong>get the exact info you want and you can discard the rest on the fly.</strong></p>
<pre><code>stringofxml = """&lt;foo&gt;
    &lt;bar&gt;
        &lt;type arg="value" /&gt;
        &lt;type arg="value" /&gt;
        &lt;type arg="value" /&gt;
    &lt;/bar&gt;
    &lt;bar&gt;
        &lt;type arg="value" /&gt;
    &lt;/bar&gt;
&lt;/foo&gt;"""
count = 0
def start(name, attr):
    global count
    if name == 'type':
        count += 1

p = expat.ParserCreate()
p.StartElementHandler = start
p.Parse(stringofxml)

print count # prints 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here a very simple but effective code using <code>cElementTree</code>. </p>
<pre><code>try:
    import cElementTree as ET
except ImportError:
  try:
    # Python 2.5 need to import a different module
    import xml.etree.cElementTree as ET
  except ImportError:
    exit_err("Failed to import cElementTree from any known place")      

def find_in_tree(tree, node):
    found = tree.find(node)
    if found == None:
        print "No %s in file" % node
        found = []
    return found  

# Parse a xml file (specify the path)
def_file = "xml_file_name.xml"
try:
    dom = ET.parse(open(def_file, "r"))
    root = dom.getroot()
except:
    exit_err("Unable to open and parse input definition file: " + def_file)

# Parse to find the child nodes list of node 'myNode'
fwdefs = find_in_tree(root,"myNode")
</code></pre>
<p>Source:</p>
<p><b><a href="http://www.snip2code.com/Snippet/991/python-xml-parse?fromPage=1">http://www.snip2code.com/Snippet/991/python-xml-parse?fromPage=1</a></b></p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add another possibility, you can use <em>untangle</em>, as it is a simple xml-to-python-object library. Here you have an example:</p>
<p><strong>Installation</strong></p>
<pre><code>pip install untangle
</code></pre>
<p><strong>Usage</strong></p>
<p>Your xml file (a little bit changed):</p>
<pre><code>&lt;foo&gt;
   &lt;bar name="bar_name"&gt;
      &lt;type foobar="1"/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
</code></pre>
<p>accessing the attributes with <em>untangle</em>:</p>
<pre><code>import untangle

obj = untangle.parse('/path_to_xml_file/file.xml')

print obj.foo.bar['name']
print obj.foo.bar.type['foobar']
</code></pre>
<p>the output will be:</p>
<pre><code>bar_name
1
</code></pre>
<p>More information about untangle can be found <a href="https://github.com/stchris/untangle" rel="noreferrer">here</a>.<br/>Also (if you are curious), you can find a list of tools for working with XML and Python <a href="https://wiki.python.org/moin/PythonXml" rel="noreferrer">here</a> (you will also see that the most common ones were mentioned by previous answers).</p>
</div>
<div class="post-text" itemprop="text">
<p>I might suggest <a href="http://declxml.readthedocs.io/" rel="noreferrer">declxml</a>.</p>
<p>Full disclosure: I wrote this library because I was looking for a way to convert between XML and Python data structures without needing to write dozens of lines of imperative parsing/serialization code with ElementTree.</p>
<p>With declxml, you use <em>processors</em> to declaratively define the structure of your XML document and how to map between XML and Python data structures. Processors are used to for both serialization and parsing as well as for a basic level of validation.</p>
<p>Parsing into Python data structures is straightforward:</p>
<pre><code>import declxml as xml

xml_string = """
&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar="1"/&gt;
      &lt;type foobar="2"/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
"""

processor = xml.dictionary('foo', [
    xml.dictionary('bar', [
        xml.array(xml.integer('type', attribute='foobar'))
    ])
])

xml.parse_from_string(processor, xml_string)
</code></pre>
<p>Which produces the output:</p>
<pre><code>{'bar': {'foobar': [1, 2]}}
</code></pre>
<p>You can also use the same processor to serialize data to XML</p>
<pre><code>data = {'bar': {
    'foobar': [7, 3, 21, 16, 11]
}}

xml.serialize_to_string(processor, data, indent='    ')
</code></pre>
<p>Which produces the following output</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;foo&gt;
    &lt;bar&gt;
        &lt;type foobar="7"/&gt;
        &lt;type foobar="3"/&gt;
        &lt;type foobar="21"/&gt;
        &lt;type foobar="16"/&gt;
        &lt;type foobar="11"/&gt;
    &lt;/bar&gt;
&lt;/foo&gt;
</code></pre>
<p>If you want to work with objects instead of dictionaries, you can define processors to transform data to and from objects as well.</p>
<pre><code>import declxml as xml

class Bar:

    def __init__(self):
        self.foobars = []

    def __repr__(self):
        return 'Bar(foobars={})'.format(self.foobars)


xml_string = """
&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar="1"/&gt;
      &lt;type foobar="2"/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
"""

processor = xml.dictionary('foo', [
    xml.user_object('bar', Bar, [
        xml.array(xml.integer('type', attribute='foobar'), alias='foobars')
    ])
])

xml.parse_from_string(processor, xml_string)
</code></pre>
<p>Which produces the following output</p>
<pre><code>{'bar': Bar(foobars=[1, 2])}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find the Python <strong>xml.dom</strong> and <strong><a href="http://docs.python.org/library/xml.dom.minidom.html" rel="noreferrer">xml.dom.minidom</a></strong> quite easy. Keep in mind that DOM isn't good for large amounts of XML, but if your input is fairly small then this will work fine.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import xml.etree.ElementTree as ET
data = '''&lt;foo&gt;
           &lt;bar&gt;
               &lt;type foobar="1"/&gt;
               &lt;type foobar="2"/&gt;
          &lt;/bar&gt;
       &lt;/foo&gt;'''
tree = ET.fromstring(data)
lst = tree.findall('bar/type')
for item in lst:
    print item.get('foobar')
</code></pre>
<p>This will print the value of foobar attribute.</p>
</div>
<div class="post-text" itemprop="text">
<p>XML</p>
<pre><code>&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar="1"/&gt;
      &lt;type foobar="2"/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
</code></pre>
<p>PYTHON_CODE</p>
<pre><code>import xml.etree.cElementTree as ET

tree = ET.parse("foo.xml")
root = tree.getroot() 
root_tag = root.tag
print(root_tag) 

for form in root.findall("./bar/type"):
    x=(form.attrib)
    z=list(x)
    for i in z:
        print(x[i])
</code></pre>
<p>OUTPUT:</p>
<pre><code>foo
1
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>xml.etree.ElementTree vs. lxml</h1>
<p>These are some pros of the two most used libraries I would have benefit to know before choosing between them.</p>
<h3>xml.etree.ElementTree:</h3>
<ol>
<li>From the <strong>standard library</strong>: no needs of installing any module</li>
</ol>
<h3>lxml</h3>
<ol>
<li>Easily write <strong>XML declaration</strong>:  do you need to add e.g. standalone="no"? </li>
<li><strong>Pretty printing</strong>: you can have a nice <strong>indented</strong> XML without extra code. </li>
<li><strong>Objectify</strong> functionality: It allows you to use XML as if you were dealing with a normal Python object hierarchy.a </li>
</ol>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/647071/3357935">Python xml ElementTree from a string source?</a></span>
<span class="comment-copy">You seem to ignore xml.etree.cElementTree which comes with Python and in some aspects is faster tham lxml ("lxml's iterparse() is slightly slower than the one in cET" -- e-mail from lxml author).</span>
<span class="comment-copy">ElementTree works and is included with Python. There is limited XPath support though and you can't traverse up to the parent of an element, which can slow development down (especially if you don't know this). See <a href="http://stackoverflow.com/questions/5373902/python-xml-query-get-parent">python xml query get parent</a> for details.</span>
<span class="comment-copy"><code>lxml</code> adds more than speed. It provides easy access to information such as parent node, line number in the XML source, etc. that can be very useful in several scenarios.</span>
<span class="comment-copy">Seems that ElementTree has some vulnerability issues, this is a quote from the docs:  <code>Warning The xml.etree.ElementTree module is not secure against maliciously constructed data. If you need to parse untrusted or unauthenticated data see XML vulnerabilities.</code></span>
<span class="comment-copy">@Cristik This seems to be the case with most xml parsers, see the <a href="https://docs.python.org/3.4/library/xml.html#xml-vulnerabilities" rel="nofollow noreferrer">XML vulnerabilities page</a>.</span>
<span class="comment-copy">How do you get the value of "item1"? For example:  &lt;item name="item1"&gt;Value1&lt;/item&gt;</span>
<span class="comment-copy">I figured it out, in case anyone has the same question. It's s.childNodes[0].nodeValue</span>
<span class="comment-copy">I like your example, i want to implement it but where can i find the minidom functions available. The python minidom website sucks in my opinion.</span>
<span class="comment-copy">I am also confused why it finds <code>item</code> straight from the top level of the document?  wouldn't it be cleaner if you supplied it the path (<code>data-&gt;items</code>)?  because, what if you also had <code>data-&gt;secondSetOfItems</code> that also had nodes named <code>item</code> and you wanted to list only one of the two sets of <code>item</code>?</span>
<span class="comment-copy">please see <a href="http://stackoverflow.com/questions/21124018/specific-pathing-for-finding-xml-elements-using-minidom-in-python" title="specific pathing for finding xml elements using minidom in python">stackoverflow.com/questions/21124018/…</a></span>
<span class="comment-copy">Actually, There is <code>BeautifulStoneSoup</code> in BeautifulSoup for XML</span>
<span class="comment-copy">three years later with bs4 this is a great solution, very flexible, especially if the source is not well formed</span>
<span class="comment-copy">@YOU <code>BeautifulStoneSoup</code> is DEPRECIATED. Just use <code>BeautifulSoup(source_xml, features="xml")</code></span>
<span class="comment-copy">Another 3 years later, I just tried to load XML using <code>ElementTree</code>, unfortunately it is unable to parse unless I adjust the source at places but <code>BeautifulSoup</code> worked just right away without any changes!</span>
<span class="comment-copy">@andi You mean "deprecated." "Depreciated" means it decreased in value, usually due to age or wear and tear from normal use.</span>
<span class="comment-copy">Are there any downsides to using cElementTree? It seems to be a no-brainer.</span>
<span class="comment-copy">Apparently they don't want to use the library on OS X as I have spend over 15 minutes trying to figure out where to download it from and no link works. Lack of documentation prevents good projects from thriving, wish more people would realize that.</span>
<span class="comment-copy">@Stunner: it is in stdlib i.e., you don't need to download anything. On Python 2: <code>from xml.etree import cElementTree as ElementTree</code>. On Python 3: <code>from xml.etree import ElementTree</code> (the accelerated C version  is used automatically)</span>
<span class="comment-copy">@mayhewsw It's more effort to figure out how to efficiently use <code>ElementTree</code> for a particular task. For documents that fit in memory, it's a lot easier to use <code>minidom</code>, and it works fine for smaller XML documents.</span>
<span class="comment-copy">Agreed. If you don't need XPath or anything complicated, this is much simpler to use (especially in the interpreter); handy for REST APIs that publish XML instead of JSON</span>
<span class="comment-copy">Remember that OrderedDict does not support duplicate keys. Most XML is chock-full of multiple siblings of the same types (say, all the paragraphs in a section, or all the types in your bar). So this will only work for very limited special cases.</span>
<span class="comment-copy">@TextGeek In this case, <code>result["foo"]["bar"]["type"]</code> is a list of all <code>&lt;type&gt;</code> elements, so it is still working (even though the structure is maybe a bit unexpected).</span>
<span class="comment-copy">Whats count in doing in the code?</span>
<span class="comment-copy"><code>count</code> stores the counts of each item in a dictionary with default keys, so you don't have to check for membership. You can also try looking at <code>collections.Counter</code>.</span>
<span class="comment-copy">+1 because I'm looking for a non-validating parser which will work with wierd source characters.  Hopefully this will give me the results I want.</span>
<span class="comment-copy">The example was made in '09 and this is how it was done.</span>
