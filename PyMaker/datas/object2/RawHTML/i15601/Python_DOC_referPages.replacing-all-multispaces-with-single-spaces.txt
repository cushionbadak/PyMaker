<div class="post-text" itemprop="text">
<p>For example</p>
<pre><code>s = "a b        c d    e                            f  "
</code></pre>
<p>Needs to be reduced to</p>
<pre><code>s = "a b c d e f "
</code></pre>
<p>Right now I do something like this</p>
<pre><code>for i in xrange(arbitrarilyHighNumber,1,-1):
    s = s.replace(" "*i," ")
</code></pre>
<p>But I want to make it more dynamic and Pythonic (and assume any number of spaces, too). How can I replace every contiguous space threshold with a single space?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "a b        c d    e                            f  "
&gt;&gt;&gt; re.sub('\s{2,}', ' ', s)
'a b c d e f '
&gt;&gt;&gt;
</code></pre>
<p><code>\s{2,}</code> matches two or more whitespace characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since the regular expression answer has already been given.  You could also do it with iterative replacements.</p>
<pre><code>while s.find("  ") is not -1:
    s = s.replace("  ", " ")
</code></pre>
<p>My original answer of splitting and rejoining gets rid of the leading and trailing whitespaces</p>
<pre><code>' '.join(s.split())
</code></pre>
</div>
<span class="comment-copy">This is almost correct, but it removes the trailing space that the OP wanted in his example.</span>
<span class="comment-copy">You lose the first/last space: <code>' '.join(' a '.split())</code> -&gt; <code>'a'</code></span>
<span class="comment-copy">True, I usually assume people don't want trailing whitespaces.  I edited my answer to include one that doesn't use regular expressions to add some diversity</span>
