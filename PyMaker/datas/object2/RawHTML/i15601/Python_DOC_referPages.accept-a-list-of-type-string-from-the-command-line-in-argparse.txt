<div class="post-text" itemprop="text">
<p>I've run in to another problem using argparse. </p>
<p>I'm trying to accept and store a list of string arguments from the command line and accept them without error. At some point I had a solution which required me to to do something similar to the following: </p>
<pre><code>backup.py -d C:\blah -d C:\anotherBlah
</code></pre>
<p>What I would like to do is accept arguments simultaneously without having to specify -d after every input. Example:</p>
<pre><code>backup.py -d C:\blah C:\anotherBlah C:\anotherBlahBlah
</code></pre>
<p>And have them stored as a list of type string rather than individual characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow"><code>nargs='+'</code></a>:</p>
<pre><code>parser.add_argument('-d', nargs='+')
</code></pre>
<hr/>
<p>For example,</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-d', nargs='+')
args = parser.parse_args(r'-d C:\blah C:\anotherBlah C:\anotherBlahBlah'.split())
print(args)
</code></pre>
<p>yields</p>
<pre><code>Namespace(d=['C:\\blah', 'C:\\anotherBlah', 'C:\\anotherBlahBlah'])
</code></pre>
</div>
<span class="comment-copy">Thank you for the solution. Could you possibly explain to me what this line means? args = parser.parse_args(r'-d C:\blah C:\anotherBlah C:\anotherBlahBlah'.split())</span>
<span class="comment-copy">Usually (as in your program) you would just call <code>args = parser.parse_args()</code>. Then the parser would parse <code>sys.argv</code>, the arguments passed on the command-line. In order to demonstrate the parser's behaviour, however, instead I passed a list of strings to <code>parse_args</code>, which simulate the arguments one might pass on the command-line.</span>
<span class="comment-copy">When an argument is passed <code>parse_args</code>, it is parsed instead of <code>sys.argv</code>.</span>
