<div class="post-text" itemprop="text">
<p>I have the following list: <code>someList = ['blablahihix', 'somethinghihi']</code> and I'd like to return a list containing the repeated pattern between the two elements of the list (in this case 'hihi').</p>
<p>Here's what I'm doing:</p>
<pre><code>p, r = re.compile(r'(.+?)\1+'), []
for i in strList:
    r.extend(p.findall(i) or [i])
</code></pre>
<p>When I <code>print r</code> it gives me <code>['bla', 'hi', 'hi']</code>. What I'd like to have is <code>['hihi']</code>, only. I don't want 'blabla' to be returned because I don't have 'blabla' in the second element of the list. </p>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow"><code>set</code></a> operations to get intersection of matched groups:</p>
<pre><code>&gt;&gt;&gt; strList = ['blablahihix', 'somethinghihi']
&gt;&gt;&gt; p = re.compile(r'(.+?)\1+')

&gt;&gt;&gt; [set(p.findall(i)) for i in strList]
[{'bla', 'hi'}, {'hi'}]

&gt;&gt;&gt; # from functools import reduce  # In Python 3.x
&gt;&gt;&gt; reduce(lambda a, b: a &amp; b, (set(p.findall(i)) for i in strList))
{'hi'}
</code></pre>
<p>used <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow"><code>set &amp; set</code> or <code>set.intersection</code></a> to get common part that appear both in two matches.</p>
<hr/>
<p>You need to modify the pattern or to use <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow"><code>re.finditer</code></a> because of the way <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow"><code>re.findall</code></a> returns according to whether capturing group(s) is used or not; If one or more groups are present in the pattern, return a list of groups instead of a list of whole matched strings.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; strList = ['blablahihix', 'somethinghihi']
&gt;&gt;&gt; p = re.compile(r'(.+?)\1+')
&gt;&gt;&gt; reduce(lambda a, b: a &amp; b,
           (set(m.group() for m in p.finditer(i)) for i in strList))
{'hihi'}
</code></pre>
<p><strong>UPDATE</strong></p>
<p>As georg suggested, you can use <code>set.intersection(*...)</code>; does not require to use <code>reduce</code>.</p>
<pre><code>&gt;&gt;&gt; set.intersection(*(set(m.group() for m in p.finditer(i)) for i in strList))
{'hihi'}
</code></pre>
</div>
<span class="comment-copy">Is your somdict dictionary or list ?</span>
<span class="comment-copy">Why don't you expect <code>hi</code>, or <code>hih</code>, or <code>ihi</code>, or <code>h</code>, or <code>i</code> to be repeated patterns? Between any two strings of moderate length, there is an <i>explosion</i> of possible shared patterns. You might want to consider if there is an alternative to the question you're asking. Perhaps what you really want is the maximum substrings appearing in both.</span>
<span class="comment-copy">sorry guys, I meant list and not dict.</span>
<span class="comment-copy">What I'd like is <code>someList</code> to be iterated so 'hihi' (which is the repeated pattern between the two elements) is returned</span>
<span class="comment-copy">If by "repeated", you mean "existing in both strings", then <code>hihi</code> isn't the only "repeated pattern". Any substring of <code>hihi</code> such as <code>ihi</code> is also repeated. If that's the case, then I'm guessing that what you really want is the set of repeated patterns which are maximal. But this still may not be what you expect. For example, if your two strings are "axbhihicd" and "efhihixg", then "hihi" is a maximal repeated pattern, and so is "x".</span>
<span class="comment-copy">I guess their wording is incorrect, and they're actually looking for LCS, not "repeated" strings.</span>
<span class="comment-copy">@georg, I think differently because OP used the pattern <code>(.+?)\1+</code>; that requires the sub-string should be repetitive.</span>
<span class="comment-copy">Ah, ok, I see. I'd use <code>set.intersection(*...</code> instead of reduce then ;)</span>
<span class="comment-copy">@georg, Thank you for the suggestion. I added it.</span>
