<div class="post-text" itemprop="text">
<p>I am writing a code that plots data using matplotlib. The data is from thousands of text files. I am able to write the loop that can plot the data. Now, I want to add a label to each plot with a piece of information from another file, which I have made into a list:</p>
<pre><code>import os
import matplotlib.pylab as plt
import numpy as np
from datetime import datetime, timedelta


time = []
t1 = []
t2 = []
t3 = []
t4 = []
t5 = []
t6 = []
newdate = []

temps = open('/Users/datafile_with_temperatures.txt','r')
sepfile = temps.read().replace('\n','').split('\r')
temps.close()

for plotpair in sepfile:
    data = plotpair.split('\t')
    time.append(float(data[0]))
    t1.append(float(data[1]))
    t2.append(float(data[2]))
    t3.append(float(data[3]))
    t4.append(float(data[4]))
    t5.append(float(data[5]))
    t6.append(float(data[6]))

for datapoint in t2,t3,t4,t5,t6:
    temperatures = np.array([t2,t3,t4,t5,t6]).mean(0).tolist()


os.chdir('/Users/datafile')
path = os.listdir('/Users/datafiles')
for file in path and temperature_point in temperatures:
    MtoC = []
    Pressure = []
    readfile = open(file,'r')

    datalines = readfile.read().split("\n")
    useful_data = []

    for line in datalines:
        line = ''.join([x for x in line if x not in [",", "\r"]])
        data = [float(item) for item in line.split()]
        useful_data.append(data)
    combined_data = [MtoC.extend(sub_list) for sub_list in useful_data]
    Mass_to_charge = MtoC[::2]
    Pressure = MtoC[1::2]

    plt.plot(Mass_to_charge,Pressure)
    plt.title(file)
    plt.text(60, 1e-07, temperature_point)
    plt.xlabel('Mass to Charge Ratio')
    plt.ylabel('Pressure (torr)')
    plt.yscale('log')
    plt.ylim([1e-10,1e-05])
    plt.savefig(file+'.jpg')
    plt.close()
</code></pre>
<p>I want the temperature point in the list to be listed on the plot. There is an equal number of temperature points as there are plot text files. There are thousands of text files with the data for making the plots. Each file is a few seconds apart because time is not a variable in the plots. There is one text file with the thousands of times that correspond to each data file, with a temperature for that specific time. I want to run the loop so it will plot the first data file and add the first temperature point as a text on the plot and loop through each file and do the same.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Blockquote</p>
</blockquote>
<p>check out <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow"><code>itertools.izip()</code></a></p>
<pre><code>from itertools import izip

for d2,d3,d4,d5,d6 in izip(t2,t3,t4,t5,t6):
    ...
</code></pre>
<p><code>izip()</code> is like <code>zip()</code> but generates an iterator, whereas <code>zip()</code> parses it's input all at once and passes a single huge object to the loop, which can cause issues with larger data sets, and is slower.</p>
<p>Edit based on @cyber's comment: this is only true in Python 2.x. In Python 3.x the built-in <code>zip()</code> does what <code>izip()</code> does here.</p>
</div>
<div class="post-text" itemprop="text">
<p>This type of behavior can be solved using <code>zip</code> then unpacking elements as needed. See the following simple example:</p>
<pre><code>l1 = [1,3,5,7,9]
l2 = [2,4,6,8,0]

for i1, i2 in zip(l1, l2):
    print('First: {}, Second: {}'.format(i1, i2))
</code></pre>
<p>Output</p>
<pre><code>First: 1, Second: 2
First: 3, Second: 4
First: 5, Second: 6
First: 7, Second: 8
First: 9, Second: 0
</code></pre>
</div>
<span class="comment-copy"><i>"whereas zip() parses it's input all at once"</i>... this is only true of Python 2.x</span>
<span class="comment-copy">This worked! thank you!</span>
<span class="comment-copy">@Cyber this is true, thank you for reminding me</span>
<span class="comment-copy">@jakeowen could you mark the answer you chose as accepted?</span>
<span class="comment-copy">Ha, beat me too it. But seriously you should use <code>izip()</code> instead of <code>zip()</code>.</span>
<span class="comment-copy">@Conslo Actually in Python 3.x <code>zip</code> <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">returns an iterator</a> so it is equivalent to <code>izip</code>.</span>
<span class="comment-copy">I dream of the day when most people are using Python 3.x :p</span>
