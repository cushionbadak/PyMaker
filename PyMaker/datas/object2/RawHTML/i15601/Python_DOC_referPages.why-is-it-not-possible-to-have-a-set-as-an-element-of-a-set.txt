<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5931291/how-can-i-create-a-set-of-sets-in-python">How can I create a Set of Sets in Python?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>It gives me error while creating <code>{{2}, 3, 4}</code> set element inside a set.</p>
<p><strong>Error:</strong></p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
</code></pre>
<p>Is there any alternative way to do that?
Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, in general, mutable types like <code>set</code> are not <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow">hashable</a>. It's not just a coincidence that they can't be used as <code>set</code> elements or <code>dict</code> keys—that's actually the whole point:</p>
<blockquote>
<p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a <code>__hash__()</code> method), and can be compared to other objects (it needs an <code>__eq__()</code> method). Hashable objects which compare equal must have the same hash value.</p>
<p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p>
<p>All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal (except with themselves), and their hash value is derived from their <code>id()</code>.</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow"><code>frozenset</code></a> type exists for pretty much this purpose:</p>
<blockquote>
<p>There are currently two built-in set types, <code>set</code> and <code>frozenset</code>. The <code>set</code> type is mutable — the contents can be changed using methods like <code>add()</code> and <code>remove()</code>. Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The <code>frozenset</code> type is immutable and hashable — its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Sets can only contain hashable objects.  But sets themselves are not hashable.  So a set can't contain another set.</p>
<p>(Aside from that, your code has a syntax error because <code>{2}.3</code> is invalid syntax.  But if you change it to <code>{{2}, 3, 4}</code> it still won't work, for the reason I mentioned above.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Even though their items must all be immutable/hashable types, sets themselves are a mutable/nonhashable type.  You can either add or remove items from a set using methods such as <code>set.add</code>, <code>set.pop</code>, or <code>set.remove</code>.  Thus, you cannot put a set inside another set because the item might be changed at any time.</p>
<p>Instead, you can use a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow"><code>frozenset</code></a>, which is an immutable/hashable set:</p>
<pre><code>&gt;&gt;&gt; {frozenset({2}), 3,4}
set([frozenset([2]), 3, 4])
&gt;&gt;&gt;
</code></pre>
<p>Keep in mind however that this only works because frozensets cannot be changed after they are created (there is no way to add or remove items).</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/5931291/how-can-i-create-a-set-of-sets-in-python" title="how can i create a set of sets in python">stackoverflow.com/questions/5931291/…</a></span>
