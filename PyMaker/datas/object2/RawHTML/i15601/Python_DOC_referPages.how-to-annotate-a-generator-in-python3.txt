<div class="post-text" itemprop="text">
<p>Python 3.x supports (optional) function annotations:</p>
<pre><code>def add_ints(x:int, y:int) -&gt; int :
    return x+y
</code></pre>
<p>I sometimes encounter problems as to how to represent a given "type" can be represented, and this time, I have a function that returns a generator:</p>
<pre><code>def myfunc(x: [int]) -&gt; "generator that returns ints":
    #                     ^~~~~~~~~~~~~~~~~~~~~~~~~~
    return (n for n in x if n%2 == 0)
</code></pre>
<p>How should I annotate the return value? Is there any reference I can consult to?</p>
</div>
<div class="post-text" itemprop="text">
<p>Annotations in Python 3 can be any valid expression, not just a type, and are not actually used for anything internally (for more on annotations, <a href="https://www.python.org/dev/peps/pep-3107" rel="nofollow">https://www.python.org/dev/peps/pep-3107</a>). There are no guidelines or standards as to how to use these annotations so they can be used in whatever way is easiest for the coder (See <a href="https://www.python.org/dev/peps/pep-0008#programming-recommendations" rel="nofollow">https://www.python.org/dev/peps/pep-0008#programming-recommendations</a>). </p>
<p>In your specific case you could use a string or global variable to indicate your type, or perhaps the <code>types.GeneratorType</code>, although there is no way to indicate that the generator produces <code>int</code>s.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">typing module</a> defines the Generator type, which you can use like:</p>
<pre><code>Generator[yield_type, send_type, return_type] 
</code></pre>
<p>See also <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 0484</a>.</p>
</div>
<span class="comment-copy">Specifically what are you trying to accomplish by adding this annotation, Python seems to require nothing save that it be a valid expression, and does not use it internally. There don't seem to be guidelines or standards, so I would just do whatever is easiest for your case.</span>
<span class="comment-copy">@KSab Thank you for the comment. Knowing the absence of guidelines is a good start for me...  Although python does not use annotations internally, invalid expressions are caught, so I can't just <code>-&gt; generator(int)</code> without making it a string.</span>
<span class="comment-copy">I suppose you could use types.GeneratorType (see <a href="https://docs.python.org/2/library/types.html" rel="nofollow noreferrer">docs.python.org/2/library/types.html</a>), but you can't specify that it is a generator of <code>int</code>s (Python's generators can return multiple types anyway). If you are just doing this for your own type-checking I don't see any reason not to use a string identifier or maybe a global variable.</span>
<span class="comment-copy"><code>types.GeneratorType</code> seems to be what I was looking for (Why didn't I search for that!). Thanks for suggesting using string or variables too, I just wasn't certain it can be acceptable at all. Will you spare some more time and post that as an answer, so that I can accept it?</span>
