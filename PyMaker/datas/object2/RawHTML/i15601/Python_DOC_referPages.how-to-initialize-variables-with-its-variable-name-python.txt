<div class="post-text" itemprop="text">
<p>I've been messing around with python's enum library and have come across a conundrum. In the docs, they show an example of an <a href="https://docs.python.org/3/library/enum.html#autonumber" rel="noreferrer">auto-numbering enum</a>, wherein something is defined:</p>
<pre><code>class Color(AutoNumber):
    red = ()
    green = ()
    ...
</code></pre>
<p>I want to make a similar class, but the value would automatically be set from the name of the member AND keep the functionality that you get from doing the <code>str</code> and <code>enum</code> <a href="https://docs.python.org/3/library/enum.html#intenum" rel="noreferrer">mixin stuff</a></p>
<p>So something like:</p>
<pre><code>class Animal(MagicStrEnum):
    horse = ()
    dog = ()

Animal.dog == 'dog' # True
</code></pre>
<p>I've looked at the source code of the enum module and tried a lot of variations messing around with <code>__new__</code> and the <code>EnumMeta</code> class</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Update: 2017-03-01</em></p>
<blockquote>
<p>In Python 3.6 (and <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer"><code>Aenum 2.0</code></a><sup>1</sup>) <a href="https://docs.python.org/3/library/enum.html#flag" rel="noreferrer"><code>Flag</code></a> and <a href="https://docs.python.org/3/library/enum.html#intflag" rel="noreferrer"><code>IntFlag</code></a> classes have been added; part of that was a new <a href="https://docs.python.org/3/library/enum.html#using-automatic-values" rel="noreferrer"><code>auto()</code> helper</a> that makes this trivially easy:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; class AutoName(Enum):
...     def _generate_next_value_(name, start, count, last_values):
...         return name
...
&gt;&gt;&gt; class Ordinal(AutoName):
...     NORTH = auto()
...     SOUTH = auto()
...     EAST = auto()
...     WEST = auto()
...
&gt;&gt;&gt; list(Ordinal)
[&lt;Ordinal.NORTH: 'NORTH'&gt;, &lt;Ordinal.SOUTH: 'SOUTH'&gt;, &lt;Ordinal.EAST: 'EAST'&gt;, &lt;Ordinal.WEST: 'WEST'&gt;]
</code></pre>
<hr/>
<p><em>Original answer</em></p>
<p>The difficulty with an <code>AutoStr</code> class is that the name of the enum member is not passed into the code that creates it, so it is unavailable for use.  Another wrinkle is that <code>str</code> is immutable, so we can't change those types of enums after they have been created (by using a <a href="https://wiki.python.org/moin/PythonDecorators" rel="noreferrer">class decorator</a>, for example).</p>
<p>The easiest thing to do is use the <a href="https://docs.python.org/3/library/enum.html#functional-api" rel="noreferrer">Functional API</a>:</p>
<pre><code>Animal = Enum('Animal', [(a, a) for a in ('horse', 'dog')], type=str)
</code></pre>
<p>which gives us:</p>
<pre><code>&gt;&gt;&gt; list(Animal)
[&lt;Animal.horse: 'horse'&gt;, &lt;Animal.dog: 'dog'&gt;]

&gt;&gt;&gt; Animal.dog == 'dog'
True
</code></pre>
<hr/>
<p>The next easiest thing to do, assuming you want to make a base class for your future enumeration use, would be something like my <code>DocEnem</code>:</p>
<pre><code>class DocEnum(Enum):
    """
    compares equal to all cased versions of its name
    accepts a doctring for each member
    """
    def __new__(cls, *args):
        """Ignores arguments (will be handled in __init__)"""
        obj = object.__new__(cls)
        obj._value_ = None
        return obj

    def __init__(self, doc=None):
        # first, fix _value_
        self._value_ = self._name_.lower()
        self.__doc__ = doc

    def __eq__(self, other):
        if isinstance(other, basestring):
            return self._value_ == other.lower()
        elif not isinstance(other, self.__class__):
            return NotImplemented
        return self is other

    def __ne__(self, other):
        return not self == other
</code></pre>
<p>and in use:</p>
<pre><code>class SpecKind(DocEnum):
    REQUIRED = "required value"
    OPTION = "single value per name"
    MULTI = "multiple values per name (list form)"
    FLAG = "boolean value per name"
    KEYWORD = 'unknown options'
</code></pre>
<p>Note that unlike the first option, <code>DocEnum</code> members are <em>not</em> <code>str</code>s.</p>
<hr/>
<p>If you want to do it the hard way:  subclass <code>EnumMeta</code> and fiddle with the new <code>Enum</code>'s class dictionary <em>before</em> the members are created:</p>
<pre><code>from enum import EnumMeta, Enum, _EnumDict

class StrEnumMeta(EnumMeta):
    def __new__(metacls, cls, bases, oldclassdict):
        """
        Scan through `oldclassdict` and convert any value that is a plain tuple
        into a `str` of the name instead
        """
        newclassdict = _EnumDict()
        for k, v in oldclassdict.items():
            if v == ():
                v = k
            newclassdict[k] = v
        return super().__new__(metacls, cls, bases, newclassdict)

class AutoStrEnum(str, Enum, metaclass=StrEnumMeta):
    "base class for name=value str enums"

class Animal(AutoStrEnum):
    horse = ()
    dog = ()
    whale = ()

print(Animal.horse)
print(Animal.horse == 'horse')
print(Animal.horse.name, Animal.horse.value)
</code></pre>
<p>Which gives us:</p>
<pre><code>Animal.horse
True
horse horse
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you are looking for the <code>name</code> attribute which is automatically provided by the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow"><code>Enum</code></a> class</p>
<pre><code>&gt;&gt;&gt; class Animal(Enum):
...     ant = 1
...     bee = 2
...     cat = 3
...     dog = 4
...

&gt;&gt;&gt; Animal.ant.name == "ant"
True
</code></pre>
<p>Though if you really want to shoot yourself in the foot. And I'm sure this will introduce a whole world of gotchas (I've eliminated the most obvious one).</p>
<pre><code>from enum import Enum, EnumMeta, _EnumDict

class AutoStrEnumDict(_EnumDict):
    def __setitem__(self, key, value):
        super().__setitem__(key, key)

class AutoStrEnumMeta(EnumMeta):
    @classmethod
    def __prepare__(metacls, cls, bases):
        return AutoStrEnumDict()
    def __init__(self, name, bases, attrs):
        super().__init__(name, bases, attrs)
        # override Enum.__str__
        # can't put these on the class directly otherwise EnumMeta overwrites them
        # should also consider resetting __repr__, __format__ and __reduce_ex__
        if self.__str__ is not str.__str__:
            self.__str__ = str.__str__

class AutoStrNameEnum(str, Enum, metaclass=AutoStrEnumMeta):
    pass

class Animal(AutoStrNameEnum):
    horse = ()
    dog = ()

print(Animal.horse)
assert Animal.horse == "horse"
assert str(Animal.horse) == "horse" 
# and not equal to "Animal.horse" (the gotcha mentioned earlier)
</code></pre>
</div>
<span class="comment-copy">do you mean <code>Animal.dog.value == 'dog'</code>?</span>
<span class="comment-copy">related:  <a href="http://www.acooke.org/cute/Pythonssad0.html" rel="nofollow noreferrer">acooke.org/cute/Pythonssad0.html</a></span>
<span class="comment-copy">I think it could be done by modifying EnumMeta._create_() in enum.py (<a href="https://hg.python.org/cpython/file/3.4/Lib/enum.py#l295" rel="nofollow noreferrer">hg.python.org/cpython/file/3.4/Lib/enum.py#l295</a>, however that cannot be immediately overriden due to ValueError on sundered names coming from _is_sunder() to protect the code. However, if names = ['red','green','blue'] and Color = Enum('Color', names=zip(names,names)), then Color.red.value == 'red', Color.green.value == 'green' and Color.blue.value == 'blue'.</span>
<span class="comment-copy">What are you trying to do here?</span>
<span class="comment-copy">@VillasV: Thanks for finding that error!  I'm sorry the reviewers didn't see it was a correct edit.</span>
<span class="comment-copy">Your modification to <code>_EnumDict</code> makes it impossible to add methods as they would also be converted to <code>str</code>s.</span>
<span class="comment-copy">Easy to get around. Either check to see if the value is a function. Or to make it more robust, create a sentinel value and only do the conversion when the value is the sentinel.</span>
