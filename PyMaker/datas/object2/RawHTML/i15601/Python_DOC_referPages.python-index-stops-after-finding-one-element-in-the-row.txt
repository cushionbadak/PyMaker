<div class="post-text" itemprop="text">
<p>I have a map that my program scans and tries to find out where the occurrences of "E" are in the map, then stores them accordingly. But as it stands, if there are two occurrences of "E" in the same row it only indexes the first one? How can I get around this with my current function?</p>
<pre><code>def agent_loc(a_maze):
 coor_list = str()
 for row, i in enumerate(a_maze):
      try:
           column = i.index("E")
      except:
           continue

      coor_list = coor_list + str(row) + ";" + str(column) + "|"
 print (coor_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You only have one loop, over the rows.</p>
<p>And within that loop, you call <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow"><code>index</code></a> only once. So, if there's a second <code>"E"</code> after that first one, you're never going to find it.</p>
<p>What you need is another loop, that loops over all the <code>"E"</code>s. For example:</p>
<pre><code>def agent_loc(a_maze):
    coor_list = str()
    for row, i in enumerate(a_maze):
         column = -1
         try:
             while True:
                  column = i.index("E", column+1)
                  coor_list = coor_list + str(row) + ";" + str(column) + "|"
         except ValueError:
             pass
    print(coor_list)
</code></pre>
<p>This would probably be a lot easier to read if you factored out the inner loop:</p>
<pre><code>def find_all(haystack, needle):
    pos = -1
    try:
        while True:
            yield haystack.index(needle, pos+1)
    except ValueError:
        pass

def agent_loc(a_maze):
    coor_list = str()
    for row, i in enumerate(a_maze):
         for column in find_all(i, "E"):
             coor_list = coor_list + str(row) + ";" + str(column) + "|"
    print(coor_list)
</code></pre>
<p>Or just rewrote it to loop over all characters:</p>
<pre><code>def agent_loc(a_maze):
    coor_list = str()
    for row, i in enumerate(a_maze):
         for column, j in enumerate(i):
             if j == "E":
                 coor_list = coor_list + str(row) + ";" + str(column) + "|"
    print(coor_list)
</code></pre>
<p>Once you do that, you've almost got a comprehension. So, let's rewrite it to use a comprehension:</p>
<pre><code>def agent_loc(a_maze):
    matches = (str(row) + ";" + str(column) 
               for row, i in enumerate(a_maze) 
               for column, j in enumerate(i)
               if j == "E")
    print("|".join(matches) + "|")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you continue next iteration as long as you meet the first occurrence of 'E'. The index() only returns the index of the first occurrence. You need to go through the entire row.</p>
<pre><code>  def agent_loc(a_maze):
    coor_list = str()
    for row, i in enumerate(a_maze):
      cols=""
      for column,j in enumerate(i):
        if j=='E':
          cols+=str(column)     
      if cols:
        coor_list = coor_list + str(row) + ";" + str(cols) + "|"
    print (coor_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add a + </p>
<pre><code>coor_list += coor_list ....
</code></pre>
</div>
<span class="comment-copy">can you show us wt exactly a_maze will look like</span>
<span class="comment-copy">Probably <code>str.index</code> is faster, but my first instinct is to do <code>columns = [col for item, col in enumerate(row) if item == 'E']</code>.</span>
<span class="comment-copy">@StevenRumbalski: Yes, I was getting to that. (If speed is an issue, <code>re.findall</code> may be worth looking at, but I doubt it will be.)</span>
<span class="comment-copy">This would just add coor_list to itself twice.</span>
