<div class="post-text" itemprop="text">
<p>I have a ROS code <code>rostopic pub toggle_led std_msgs/Empty</code> that basically starts once and keeps running until <code>CTRL+C</code> is pressed.<br/>
Now, I would like to automate this command from Python. I checked <a href="https://stackoverflow.com/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a> but it only shows how to start the command.<br/>
How would I start and stop running this process as and when I want?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How would I start and stop running this process as and when I want?</p>
</blockquote>
<p>Well, you already know how to start it, as you said in the previous sentence.</p>
<p>How do you stop it? If you want to stop it exactly like a Ctrl-C,* you do that by calling <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.send_signal" rel="nofollow"><code>send_signal</code></a> on it, using <a href="https://docs.python.org/3/library/signal.html#signal.CTRL_C_EVENT" rel="nofollow"><code>CTRL_C_EVENT</code></a> on Windows, or <code>SIGTERM</code> on Unix.** So:</p>
<pre><code>import signal
import subprocess

try:
    sig = signal.CTRL_C_EVENT
except NameError:
    sig = signal.SIGTERM

p = subprocess.Popen(['/path/to/prog', '-opt', '42', 'arg'])
# ... later
p.send_signal(sig)
</code></pre>
<hr/>
<p>If you only care about Linux (or *nix in general), you can make this even simpler: <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.terminate" rel="nofollow"><code>terminate</code></a> is guaranteed to do the same thing as <code>send_signal(SIGTERM)</code>. So:</p>
<pre><code>import subprocess
p = subprocess.Popen(['/path/to/prog', '-opt', '42', 'arg'])
# ... later
p.terminate()
</code></pre>
<hr/>
<p>Since you asked in a comment "Could you please explain the various parameters to <code>subprocess.Popen()</code>": Well, there are a whole lot of them (see <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow"><code>Popen</code> Constructor</a> and <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow">Frequently Used Arguments</a> in the docs, but I'm only using one, the <code>args</code> parameter.</p>
<p>Normally, you pass a list to <code>args</code>, with the name of the program as the first element in the list, and each separate command-line argument as a separate element. But if you want to use the shell, you pass a string for <code>args</code>, and add a <code>shell=True</code> as another argument.</p>
<hr/>
<p><sub>* Note that "exactly like a Ctrl-C" may not actually be what you want on Windows, unless the program has a console and is a process group owner. This may mean you'll need to add <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_NEW_PROCESS_GROUP" rel="nofollow"><code>creationflags=subprocess.CREATE_NEW_PROCESS_GROUP</code></a> to the <code>Popen</code> call. Or it may not—e.g.., if you use <code>shell=True</code>.</sub></p>
<p><sub>** In Python, you can usually ignore the platform differences between <code>CTRL_C_EVENT</code> and <code>SIGTERM</code> and always use the latter, but <code>subprocess.send_signal</code> is one of the few places you can't. On Windows, <code>send_signal(SIGTERM)</code> will call <code>terminate</code> instead of sending a Ctrl-C. If you don't actually care exactly how the process gets stopped, just that it gets stopped somehow, then of course you can use <code>SIGTERM</code>… but in that case, you might as well just call <code>terminate</code>.</sub></p>
</div>
<span class="comment-copy">check this: <a href="http://stackoverflow.com/questions/4789837/how-to-terminate-a-python-subprocess-launched-with-shell-true" title="how to terminate a python subprocess launched with shell true">stackoverflow.com/questions/4789837/…</a></span>
<span class="comment-copy">There a many ways to do this depending on the details of your requirements (what else is the script doing? do you want to run the script multile times and daemonize rostopic? is it gui or command line?). You really need to post your code if you want something more than a vague description of what to do.</span>
<span class="comment-copy">@tdelaney I just want a generic solution that would work for any command line code.   There are several such commands similar to this that would run until stopped manually. So, code would not be applicable here I believe.</span>
<span class="comment-copy">This is perfect. Thank you @abarnert</span>
<span class="comment-copy">Could you please explain the various parameters to <code>subprocess.Popen()</code>?</span>
<span class="comment-copy">@KanishkaGanguly it is a list of the parameters of the command you want to run with subprocess, consider you want to run <code>ls -l</code> you would do: <code>p  = subprocess.Popen(["ls","-l"])</code>.</span>
<span class="comment-copy">@abarnert This application is for Linux only, so Windows cases are moot. But I do get your point.</span>
<span class="comment-copy">@KanishkaGanguly: Well, that makes things even simpler. See my updated answer; you can just use <code>terminate</code> instead of <code>send_signal</code>, and then you don't even need the <code>signal</code> module.</span>
