<div class="post-text" itemprop="text">
<p>Im a beginner. For the sake of learning, I have to write a class in python which accepts at most 3 different arguments (a,b,c): something like</p>
<pre><code> class random(object):

     def __init__(self,a,b,c):
          blah blah blah
</code></pre>
<p>How do I make it so that:</p>
<ul>
<li><p>if no argument is entered, it does one thing.</p>
<p>for example: </p>
<p>"test=random()", in this case assume a=b=c=0</p></li>
<li><p>if one argument is entered, it does another thing.</p>
<p>for example:</p>
<pre><code>"test=random(2)", in this case a=2 ,b=c=0, 
 and then run some case specific codes/instrutctions
</code></pre></li>
<li><p>and etc</p></li>
</ul>
<p>something like how with the builtin function/class "range", where you can use</p>
<p>range(9)
range(3,9)
range(3,9,2)</p>
<p>if you know what I mean.</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're asking about <a href="https://docs.python.org/3/tutorial/controlflow.html#default-argument-values" rel="nofollow">Default Argument Values</a>.</p>
<p>When defining a function or method, one way to make parameters optional is to give them default values:</p>
<pre><code> def __init__(self, a=0, b=0, c=0):
</code></pre>
<p>Now, if I call your function (or, in the case of an <code>__init__</code> function, construct an instance of your class) with no arguments, <code>a</code>, <code>b</code>, and <code>c</code> will all be 0. If I pass 1 argument, <code>b</code> and <code>c</code> will be 0. And so on.</p>
<p>See <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow">Arbitrary Argument Lists</a> for another way to do something similar.</p>
<hr/>
<p>The way <code>range</code> works is a little funky, because the first argument has a different meaning if there's only 1 argument vs. 2 or more. There are a handful of other builtins like this, but it's not a good idea for you to emulate them; these are basically only there for backward compatibility reasons (to the days when Python didn't have keywords).</p>
<p>To make things more fun, because <code>0</code> is a perfectly valid value for <code>start</code> or <code>stop</code>, and so is even <code>None</code>, you have to construct some special value that nobody could reasonably pass you. (That part, you may actually need to emulate some day.) So, it looks something like this:</p>
<pre><code>class range(object):
    _sentinel = object()
    def __init__(self, start_or_stop, stop=range._sentinel, step=None):
        if stop is range._sentinel:
            start, stop = None, start_or_stop
        else:
            start = start_or_stop
        # Now you can use start, stop, step
</code></pre>
</div>
