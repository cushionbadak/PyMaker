<div class="post-text" itemprop="text">
<p>I often write code that looks like this and am looking for a better suggestion. Basically, I usually create some general function <code>myfuc_general</code> that handles all the cases I need with parameters, usually with optional parameters. However, often I usually run 2 (possibly more) specific functions. Everything is the same except one of the arguments is different, in this case <code>a</code>. I run them so often that I actually prefer to just have two additional functions so I don't have to remember what the optional parameter needs to be. </p>
<p>So for <code>myfunct_specific1</code>, I am running <code>a=10</code> and for <code>myfunct_specific2</code>, <code>a=20</code>. Is there something better to do than this? This seems pretty sloppy and it has the disadvantage in the event that I need to change the <code>myfuct_general</code> call, then I have to change all the other functions.</p>
<pre><code>def myfunc_general(constant, a=1,b=2):
    return constant+a+b

def myfunct_specific1(constant,b=2):
    a=10
    return myfunc_general(constant,a,b=2)

def myfunct_specific2(constant,b=2):
    a=20
    return myfunc_general(constant,a,b=2)

print myfunct_specific1(3) #15
print myfunct_specific2(3) #25
</code></pre>
<p>edit (addition):</p>
<p>iCodez thank you for suggestion. I have this particular situation and it is throwing me an error. Help? Thanks again</p>
<pre><code>def myfunc_general(constant, constant2, a=0,b=2):
    return constant+constant2+b+a

import functools
myfunct_specific=functools.partial(myfunc_general,constant2=30)

print myfunct_specific
print myfunct_specific(3,5,b=3)


Traceback (most recent call last):
  File "C:/Python27/test", line 8, in &lt;module&gt;
    print myfunct_specific(3,5,b=3)
TypeError: myfunc_general() got multiple values for keyword argument 'constant2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="noreferrer"><code>functools.partial</code></a> to make this a lot easier:</p>
<pre><code>from functools import partial

def myfunc_general(constant, a=1, b=2):
    return constant+a+b

myfunct_specific1 = partial(myfunc_general, a=10)
myfunct_specific2 = partial(myfunc_general, a=20)
</code></pre>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt;
&gt;&gt;&gt; def myfunc_general(constant, a=1, b=2):
...     return constant+a+b
...
&gt;&gt;&gt; myfunct_specific1 = partial(myfunc_general, a=10)
&gt;&gt;&gt; myfunct_specific2 = partial(myfunc_general, a=20)
&gt;&gt;&gt;
&gt;&gt;&gt; print myfunct_specific1(3)
15
&gt;&gt;&gt; print myfunct_specific2(3)
25
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Those nested calls are not valid syntax.</span>
<span class="comment-copy">There isn't something wrong with this approach but it does have the advantages / disadvantages that you mentioned.</span>
<span class="comment-copy">Thank you for your suggestion. I tried it on a different example, can you take a look at my edit in my question?</span>
<span class="comment-copy">The purpose of <code>functools.partial</code> is to fill in arguments that should never change.  For example, <code>constant2</code> should never change for calls to <code>myfunct_specific</code>.  If you do want to change this argument, then you should be calling <code>myfunc_general</code> directly: <code>myfunc_general(3,5,b=3)</code></span>
<span class="comment-copy">Hm, I was expecting that constant would be set to 3. a=5,b=3, and constant2=30 from the partial. It seems that it is trying set constant2 equal to 5 and 3...which is not what I would expect. It seems that for any variable after the variable that I set using the partial, I need to use the keyword, which makes it awkward, any way to make this different?</span>
<span class="comment-copy">No, <code>functools.partial</code> cannot do this.  Python would not know what arguments go with what parameters.  You could maybe build a class using <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> and a few other tools that mimics <code>partial</code> to do what you want, but I bet that most people would find it confusing.  The most pythonic solution in this case is to just define new functions like you were originally.</span>
