<div class="post-text" itemprop="text">
<p>I have the following object being returned using <code>response.json</code> within the <code>Requests module</code>:</p>
<pre><code>{u'statColumns': [u'apps', u'subOn', u'minsPlayed', u'tackleWonTotal', u'challengeLost', 
u'tackleTotalAttempted'], u'paging': {u'firstRecordIndex': 1, u'resultsPerPage': 1,     u'lastRecordIndex':
1, u'totalPages': 431, u'currentPage': 1, u'totalResults': 431}, u'playerTableStats': 
[{u'positionText': u'Defender', u'rating': 8.37, u'weight': 77, u'playerId': 22079, u'height': 188, 
u'teamId': 32, u'playedPositions': u'-DC-', u'challengeLost': 0.0, u'isManOfTheMatch': False, u'isOpta':
True, u'subOn': 0, u'tackleWonTotal': 2.0, u'tournamentShortName': u'EPL', u'apps': 1, u'teamName':
u'Manchester United', u'tournamentRegionId': 252, u'regionCode': u'gb-nir', u'tournamentRegionCode':
u'gb-eng', u'playedPositionsShort': u'D(C)', u'seasonId': 4311, u'ranking': 1, u'minsPlayed': 90, 
u'tournamentName': u'Premier League', u'isActive': True, u'name': u'Jonny Evans', u'firstName': 
u'Jonny', u'lastName': u'Evans', u'age': 26, u'seasonName': u'2014/2015', u'tournamentId': 2,
u'tackleTotalAttempted': 2.0}]}
</code></pre>
<p>This object has two elements, <code>playerTableStats</code> and <code>statColumns</code>. These can accessed with the following code:</p>
<pre><code>playerTableStats = response[u'playerTableStats']
statColumns = response[u'statColumns']
</code></pre>
<p>If I convert the contents of <code>statColumns</code> into a string object, I can use it as part of a <code>.format()</code> statement to map <code>playerTableStats</code>. I could do this like so:</p>
<pre><code>var1 = ['one','two','three','four']
var1 = 'u"{',var1[0],'}','{',var1[1],'}','{',var1[2],'}','{',var1[3],'}"'
var1 = ''.join(var1)

var2 = (var1.format(**responser))

print var2
</code></pre>
<p>However that doesn't seem very Pythonic and doesn't take into account the fact that both <code>statColumns</code> and <code>playerTableStats</code> will vary in their number of elements when I am returning different .json objects from the same site.</p>
<p>Is there a cleaner way to get all elements of <code>statColumns</code> into the format:</p>
<pre><code>u"{one}{two}{three}{four}"
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a> with <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a>:</p>
<pre><code>var2 = ''.join('{' + x + '}' for x in var1)
</code></pre>
</div>
<span class="comment-copy">@falsetru...ok that worked great, thanks. could you explain what you mean by a generator expression though please?</span>
<span class="comment-copy">@gdogg371, Generator expression is similar to list comprehension, except it results in generator instead of list. I added a link to the Python tutorial page for generator expression. Follow the link for more detail.</span>
<span class="comment-copy">@gdogg371, If you are not clear, try the following list comprehension: <code>['{' + x + '}' for x in var1]</code>. You will get a list of <code>['one', 'two', ...]</code>. If you use generator expression, it will return a generator which yields each element lazily.</span>
