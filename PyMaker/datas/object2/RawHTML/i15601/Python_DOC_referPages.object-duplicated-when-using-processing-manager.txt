<div class="post-text" itemprop="text">
<p>I'm trying to use processing.Manager to share data between processes (processing.Manager.list, processing.Manager.dict, ...). But, when i use it, object are duplicated:</p>
<pre><code>from multiprocessing import Process, Manager


def manipulate_in_process(objects):
    objs = []
    for obj in objects:
        objs.append(obj)
    print('foo objs', objs)

def do_in_process(objects):
    print('objects', objects)
    manipulate_in_process(objects)

if __name__ == '__main__':
    manager = Manager()
    objects = [object(), object()]
    print('main objects', objects)
    shared_objects = manager.list(objects)
    process = Process(target=do_in_process, args=(shared_objects,))
    process.start()
    process.join()
    print('finish')
</code></pre>
<p>Output:</p>
<pre><code>main objects [&lt;object object at 0xb72a64a8&gt;, &lt;object object at 0xb72a64b0&gt;]
objects [&lt;object object at 0xb72a64a8&gt;, &lt;object object at 0xb72a64b0&gt;]
foo objs [&lt;object object at 0xb72a64e8&gt;, &lt;object object at 0xb72a64c0&gt;]
finish
</code></pre>
<p>Shareds objects are duplicated when used: <strong>0xb72a64a8</strong> != <strong>0xb72a64e8</strong>.</p>
<ol>
<li>I'm doing it wrong ?</li>
<li>Why these objects are duplicated ?</li>
<li>How can i use objects with processing.Manager.list/dict/etc ?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>It's pretty much inherent that objects are copied, not shared, between processes. That's the definition of separate processes: that they have separate heaps with separate objects.</p>
<p>If you want actual shared data, you have to use <code>Value</code>, <code>Array</code>, or <code>sharedctypes</code>â€”but of course in that case, you're limited to "native" values and those you can express in terms of C structs. And, even then, there's no guarantee that the <code>id</code> will be the same across processes, only that the value itself will be.</p>
<p>The point of <code>Manager</code> is that you can put an object like, say, a <code>list</code> in a server process, and a proxy to that object in each child process. The list proxy looks like a real list as far as core list functionality goes (iteration, indexing, <code>append</code>, <code>insert</code>, <code>index</code>, etc.). But the proxy doesn't try to fake "under-the-covers" introspection functionality like <code>id</code>.</p>
<p>The exact list of types that can be proxied by <code>Manager</code> out of the box differs between Python versions, but you can find it in the docs for your version. As of 3.4, it includes <code>list</code>, <code>dict</code>, <code>Namespace</code>, <code>Lock</code>, <code>RLock</code>, <code>Semaphore</code>, <code>BoundedSemaphore</code>, <code>Condition</code>, <code>Event</code>, <code>Barrier</code>, <code>Queue</code>, <code>Value</code> and <code>Array</code>. At any rate, it's never going to include <code>object</code>, because <code>object</code> <em>has</em> no functionality beyond the under-the-covers stuff.</p>
<p>Of course you can register your own types with the <code>Manager</code> with custom proxies. But I'm not sure what you'd want to share with <code>object</code>.</p>
<p>See <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow">Sharing state between processes</a> for an overview and <a href="https://docs.python.org/3/library/multiprocessing.html#managers" rel="nofollow">Managers</a> for full details.</p>
</div>
<span class="comment-copy">This sounds like an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>. What exactly are you trying to do here? You're obviously not just sharing objects to print their IDs. Whatever you're <i>really</i> trying to do may be doable, or even easy, but it's hard to guess without knowing what that is.</span>
