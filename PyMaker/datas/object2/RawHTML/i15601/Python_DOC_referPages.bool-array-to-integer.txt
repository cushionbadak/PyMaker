<div class="post-text" itemprop="text">
<p>Is there any build in function in python to convert a bool array (which represents bits in a byte) like so:</p>
<pre><code>p = [True, True, True, False, True, False, False, True]
</code></pre>
<p>into a byte array like this:</p>
<pre><code>bp = byteArray([233])
</code></pre>
<p>I am aware oh numpy but I was looking for something within python itself</p>
</div>
<div class="post-text" itemprop="text">
<p>This will do what you want:</p>
<pre><code>sum(v&lt;&lt;i for i, v in enumerate(p[::-1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use algebra:</p>
<pre><code>sum(2**i for i, v in enumerate(reversed(p)) if v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert integer strings in different bases, simply use the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int()</code></a> function with an
appropriate base.</p>
<pre><code>&gt;&gt;&gt; int(''.join('1' if i else '0' for i in p), 2)
233
</code></pre>
<p>Using generators (<code>[1 if i else 0 for i in p]</code>) have a more performance than <code>map</code> (<code>map(int, p)</code>)here !  </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int</code></a>, you can convert binary representation to <code>int</code> object (by specifying base 2):</p>
<pre><code>&gt;&gt;&gt; p = [True, True, True, False, True, False, False, True]
&gt;&gt;&gt; int(''.join(map(str, map(int, p))), 2)
233
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; p = [True, True, True, False, True, False, False, True]
&gt;&gt;&gt; int("".join(map(lambda x: x and '1' or '0',p)),2)
233
</code></pre>
<p>int with base 2 give integer from binary</p>
</div>
<span class="comment-copy">@vaultah the boolArray corresponds to <code>11101001</code> in binary which is <code>233</code> in dec</span>
<span class="comment-copy"><code>reversed</code> should be better then slicing <code>[::-1]</code> since you don't need a copy in this case.</span>
<span class="comment-copy">If you choose to use list comprehension or generator expression with conditional expression, why not use string literals: <code>int(''.join('1' if i else '0' for i in p), 2)</code></span>
<span class="comment-copy">@falsetru yep , thanks , i miss <code>''</code> ! good point !</span>
