<div class="post-text" itemprop="text">
<p>This may be a silly question to ask. I know that by definition it means "each of a set of standardized parts or independent units that can be used to construct a more complex structure, such as an item of furniture or a building", but if you put it in python's context, is a module equivalent to a python .py file?</p>
</div>
<div class="post-text" itemprop="text">
<p>The official definition of a Python module can be found on Python's Glossary page under <a href="https://docs.python.org/3/glossary.html#term-module" rel="nofollow">"module"</a>:</p>
<blockquote>
<p>An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules
  are loaded into Python by the process of <a href="https://docs.python.org/3/glossary.html#term-importing" rel="nofollow">importing</a>.</p>
</blockquote>
<p>Similarly, a package is officially defined under <a href="https://docs.python.org/3/glossary.html#term-package" rel="nofollow">"package"</a>:</p>
<blockquote>
<p>A Python module which can contain submodules or recursively, subpackages. Technically, a package is a Python module with an
  <code>__path__</code> attribute.</p>
<p>See also <a href="https://docs.python.org/3/glossary.html#term-regular-package" rel="nofollow">regular package</a> and <a href="https://docs.python.org/3/glossary.html#term-namespace-package" rel="nofollow">namespace package</a>.</p>
</blockquote>
<p>That said, many Python programmers use the term "module" to simply mean a <code>.py</code> file.  Most of the time, going into great detail like this just gets in the way of progress.  So, I'd say its fine to generally associate the term with source files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strictly speaking yes a module is a python file or a class. But. It depends on your design and file structure. I will present you with some scenaria. </p>
<p>You have a mod.py file with 10 classes. You can import them like this </p>
<pre><code>import mod.Class1 as class1
import mod.Class2 as class2
so on..
</code></pre>
<p>However the traditional way we think of a module can be seen in python under this schema where functionality is bundled.</p>
<pre><code>packagename
   __init__.py
   smt.py
   smtelse.py
   packageFunctionalityWrapper.py
</code></pre>
<p>and then you can import in various ways.</p>
<pre><code>from packagename.packageFunctionalityWrapper import aClass
#or whatever way you did this
</code></pre>
<p><strong>In summary:</strong> What we call module (in design) is a sub-component that "bundles" functionality. What python calls a module is something entirely else, but can conform to this definition. It is up to your hand and design to decide how you will call and make modules.</p>
</div>
<span class="comment-copy">Maybe you should read this <a href="https://docs.python.org/2/tutorial/modules.html" rel="nofollow noreferrer">Modules</a></span>
