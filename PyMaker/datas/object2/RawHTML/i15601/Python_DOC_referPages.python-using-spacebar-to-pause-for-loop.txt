<div class="post-text" itemprop="text">
<p>I am looking for a way to pause the for loop below when the user presses [spacebar] and then continue the loop from the most recent iteration when [spacebar] is pressed again. </p>
<p>Currently, the script prompts the user for three values and then prints words from a text file at timed intervals until there are no words remaining.</p>
<p>What would be the best way to go about this? Thanks very much.</p>
<pre><code>import time

with open('Textfile.txt', 'r', encoding='utf8') as file:

    data = file.read()
    data2 = data.split()


def reading(start, speed, chunks):

    for i in range(start, len(data2), chunks):

        print('\r' + (' '.join(data2[i:i+chunks])), end="")

        time.sleep(60 / speed * chunks)

    print ("The End.")


start = int(input('Where would you like to start? (word number) '))
speed = int(input('How many words per minute? '))
chunks = int(input('How many words at a time? '))

reading(start, speed, chunks)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is partial answer to you question (part about space is not answered, however please read to the end, there are some hints).
I adapted answer from here <a href="https://stackoverflow.com/questions/375427/non-blocking-read-on-a-subprocess-pipe-in-python">Non-blocking read on a subprocess.PIPE in python</a> .</p>
<pre><code>import time
import sys
from threading import Thread
try:
    from Queue import Queue, Empty
except ImportError:
    from queue import Queue, Empty  # python 3.x


def enqueue_output(output, queue):
    for line in iter(output, b''):
        queue.put(line)
    out.close()


with open('Textfile.txt', 'r', encoding='utf8') as file:
    data = file.read()
    data2 = data.split()


def reading(start, speed, chunks):
    q = Queue()
    t = Thread(target=enqueue_output, args=(sys.stdin.readline, q))
    t.daemon = True # thread dies with the program
    t.start()

    for i in range(start, len(data2), chunks):
        print('\r' + (' '.join(data2[i:i+chunks])), end="")
        time.sleep(60 / speed * chunks)

        try:
            line = q.get_nowait() # or q.get(timeout=.1)
        except Empty:
            pass
        else:
            print("Pausing")
            while 1:
                time.sleep(0.3) # Adjust frequency of reading user's input
                try:
                    line = q.get_nowait() # or q.get(timeout=.1)
                except Empty:
                    pass
                else:
                    print("Resuming")
                    break

    print ("The End.")


start = int(input('Where would you like to start? (word number) '))
speed = int(input('How many words per minute? '))
chunks = int(input('How many words at a time? '))

reading(start, speed, chunks)
</code></pre>
<p>With this user will be able to pause/resume reading with pressing Enter button.
For space you can try to use recipes from this answer <a href="https://stackoverflow.com/questions/1258566/how-to-get-user-input-during-a-while-loop-without-blocking/1258952#1258952">How to get user input during a while loop without blocking</a></p>
<p>...or use some console ui (curses, urwid, ...) or gui (tkinter, pyqt, ...) modules.</p>
</div>
<span class="comment-copy">Look into <a href="https://docs.python.org/3/howto/curses.html" rel="nofollow noreferrer">curses programming</a>.</span>
