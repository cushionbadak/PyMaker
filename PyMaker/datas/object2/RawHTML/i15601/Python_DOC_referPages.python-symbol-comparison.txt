<div class="post-text" itemprop="text">
<p>I have  <code>st = 'aaaabbсaa'</code>. My task is if in the string characters repeat then I must write the character plus a number counting the repeats.</p>
<p>My code (but it doesn't work):</p>
<pre><code>st = "aaaabbcaa"
cnt = 0
cnt2 = 0
cnt3 = 0

j = len(st)
i = 0


while i &lt; j:
    if st[i] == st[i - 1]:
        cnt += 1
        print("a" + str(cnt), end="")
    elif st[i] == st[i - 1]:
        cnt2 += 1
        print("b" + str(cnt2), end="")
    elif st[i] == st[i - 1]:
        cnt3 += 1
        print("c" + str(cnt3), end="")

    i += 1 
</code></pre>
<p>Sample Input 1: <code>aaaabbcaa</code><br/>
Sample Output 1: <code>a4b2c1a2</code><br/>
Sample Input 2: <code>abc</code><br/>
Sample Output 2: <code>a1b1c1</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You've got three problems with your code.</p>
<p>First, as gnibbler points out, all of your <code>if</code>/<code>elif</code> conditions are the same. And you don't need a separate condition for each letter, you just need to print the variable (like <code>st[i]</code>) instead of a literal (like <code>"a"</code>).</p>
<p>Second, you're trying to print out the current run length for each character in the run, instead of after the entire run. So, if you get this working, instead of <code>a4b2c1a2</code> you're going to get <code>a1a2a3a4b1b2c1a1a2</code>. You need to keep track of the current run length for each character in the run, but then only print it out when you get to a <em>different</em> character.</p>
<p>Finally, you've got two off-by-one errors. First, when <code>i</code> starts at 0, <code>st[i - 1]</code> is <code>st[-1]</code>, which is the last character; you don't want to compare with that. Second, when <code>i</code> finally gets to <code>j-1</code> at the end, you've got a leftover run that you need to deal with.</p>
<p>So, the smallest change to your code is:</p>
<pre><code>st = "aaaabbcaa"
cnt = 0

j = len(st)
i = 0

while i &lt; j:
    if i == 0 or st[i] == st[i - 1]:
        cnt += 1
    else:
        print(st[i - 1] + str(cnt), end="")
        cnt = 1

    i += 1

print(st[i - 1] + str(cnt))
</code></pre>
<hr/>
<p>As a side note, one really easy way to improve this: <code>range(len(st))</code> gives you all the numbers from 0 up to but not including <code>len(st)</code>, so you can get rid of <code>j</code> and the manual <code>i</code> loop and just use <code>for i in range(len(st)):</code>.</p>
<p>But you can improve this even further by looping over an iterable of <code>st[i], st[i-1]</code> pairs; then you don't need the indexes at all. This is pretty easy with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">slicing</a>. And then you don't need the special handling for the edges either either:</p>
<pre><code>st = "aaaabbcaa"
cnt = 1
for current, previous in zip(st[1:]+" ", st):
    if current == previous:
        cnt += 1
    else:
        print(previous + str(cnt), end="")
        cnt = 1
</code></pre>
<hr/>
<p>I think <a href="https://stackoverflow.com/a/27027122/908494">Matthias's <code>groupby</code> solution</a> is more pythonic, and simpler (there's still a lot of things you could get wrong with this, like starting with <code>cnt = 0</code>), but this should be mostly understandable to a novice out of the box. (If you don't understand the <code>zip(st[1:]+" ", st)</code>, try printing out <code>st[1:]</code>, <code>list(zip(st[1:], st))</code>, and <code>list(zip(st[1:]+" ", st)</code> and it should be clearer.)</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks like a task for <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby</a>.</p>
<pre><code>from itertools import groupby
data = 'aaaabbсaa'
compressed = ''.join('{}{}'.format(key, len(list(group))) for key, group in groupby(data))
print(compressed)
</code></pre>
<p>Result</p>
<pre><code>a4b2с1a2
</code></pre>
<p>This might help to understand what's happening here.</p>
<pre><code>data = 'aaaabbсaa'
for key, group in groupby(data):
    print(key, len(list(group)))
</code></pre>
<p>Result</p>
<pre><code>a 4
b 2
с 1
a 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is kind of a silly way to go about it, but:</p>
<pre><code>def encode(s):
    _lastch = s[0]
    out = []
    count = 0
    for ch in s:
        if ch == _lastch:
            count +=1
        else:
            out.append(_lastch + str(count))
            _lastch = ch
            count = 1
    out.append(_lastch + str(count))
    return ''.join(out)
</code></pre>
<p>Example</p>
<pre><code>&gt;&gt;&gt; st = "aaaabbcaa"
&gt;&gt;&gt; encode(st)
'a4b2c1a2'
</code></pre>
</div>
<span class="comment-copy">This is called 'run-length encoding'.</span>
<span class="comment-copy">All your if/elif conditions are the same. Hint: You shouldn't need one for each different letter anyway.</span>
<span class="comment-copy">Nice way to correct the original code.</span>
<span class="comment-copy">@abarnert Please recommend to me book or materials of programming in c# or python. I want to solve my logical to do best and brain work good. Thank's.</span>
<span class="comment-copy">@EldarNecefov: Honestly, I learned Python through the <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">official tutorial</a> and reference guide and inline help. It was a great resource in the late 90s for someone who already knew other languages like C, Perl, ML, and Smalltalk, but I doubt that's going to be much good for you. The official website has a <a href="https://www.python.org/about/gettingstarted/" rel="nofollow noreferrer">Getting Started</a> page with links to all kinds of books and other resources, and there's a <a href="https://mail.python.org/mailman/listinfo/tutor" rel="nofollow noreferrer">python-tutor mailing list</a> which I think has a FAQ.</span>
<span class="comment-copy">@EldarNecefov: I'm probably even less useful for C#. I mainly learned it from a "differences between C# and Java" webpage and Microsoft's "C# for C++/.NET programmers" docs, and never used it that much anyway.</span>
<span class="comment-copy">@EldarNecefov: The only programming books I can definitely recommend aren't for either language you want: Why's Poignant Guide to Ruby is a great first book for anyone, then Learn You a Haskell for Great Good and The C Programming Language will expand your horizons in opposite directions, and after that you should be able to pick up any particular language pretty easily.</span>
<span class="comment-copy">exactly how I'd do it, but I included an answer that's closer to OP's attempted code for completeness.</span>
<span class="comment-copy">Yes this help too, but I needed solutions without any import :) Thnaks for help.</span>
