<div class="post-text" itemprop="text">
<p>I wrote the following program:</p>
<pre><code>def split_and_add(invoer):                              
    rij = invoer.split('=')
    rows = []
    for line in rij:
        rows.append(process_row(line))
    return rows

def process_row(line):                                  
    temp_coordinate_row = CoordinatRow()
    rij = line.split()
    for coordinate in rij:
        coor = process_coordinate(coordinate)
        temp_coordinate_row.add_coordinaterow(coor)
    return temp_coordinate_row

def process_coordinate(coordinate):
   cords = coordinate.split(',')
   return Coordinate(int(cords[0]),int(cords[1]))

bestand = file_input()
rows = split_and_add(bestand)
for row in range(0,len(rows)-1):
    rij = rows[row].weave(rows[row+1])
    print rij
</code></pre>
<p>With this class: </p>
<pre><code>class CoordinatRow(object):

def __init__(self):
    self.coordinaterow = []

def add_coordinaterow(self, coordinate):
    self.coordinaterow.append(coordinate)

def weave(self,other):
    lijst = []
    for i in range(len(self.coordinaterow)):
        lijst.append(self.coordinaterow[i])
        try:
            lijst.append(other.coordinaterow[i])
        except IndexError:
            pass 
    self.coordinaterow = lijst
    return self.coordinaterow
</code></pre>
<p>However there is an error in </p>
<pre><code>for row in range(0,len(rows)-1):
    rij = rows[row].weave(rows[row+1])
    print rij
</code></pre>
<p>The outcome of the print statement is as follows: </p>
<pre><code>[&lt;Coordinates.Coordinate object at 0x021F5630&gt;, &lt;Coordinates.Coordinate object at 0x021F56D0&gt;]
</code></pre>
<p>It seems as if the program doesn't acces the actual object and printing it. What am i doing wrong here ?</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't an error. This is exactly what it means for Python to "access the actual object and print it". This is what the default string representation for a class looks like.</p>
<p>If you want to customize the string representation of your class, you do that by defining a <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code></a> method. The typical way to do it is to write a method that returns something that looks like a constructor call for your class.</p>
<p>Since you haven't shown us the definition of <code>Coordinate</code>, I'll make some assumptions here:</p>
<pre><code>class Coordinate(object):
    def __init__(self, x, y):
        self.x, self.y = x, y
    # your other existing methods
    def __repr__(self):
        return '{}({}, {})'.format(type(self).__name__, self.x, self.y)
</code></pre>
<p>If you don't define this yourself, you end up inheriting <code>__repr__</code> from <code>object</code>, which looks something like:</p>
<pre><code>return '&lt;{} object at {:#010x}&gt;'.format(type(self).__qualname__, id(self))
</code></pre>
<hr/>
<p>Sometimes you <em>also</em> want a more human-readable version of your objects. In that case, you also want to define a <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow"><code>__str__</code></a> method:</p>
<pre><code>    def __str__(self):
        return '&lt;{}, {}&gt;'.format(self.x, self.y)
</code></pre>
<p>Now:</p>
<pre><code>&gt;&gt;&gt; c = Coordinate(1, 2)
&gt;&gt;&gt; c
Coordinate(1, 2)
&gt;&gt;&gt; print(c)
&lt;1, 2&gt;
</code></pre>
<p>But notice that the <code>__str__</code> of a list calls <code>__repr__</code> on all of its members:</p>
<pre><code>&gt;&gt;&gt; cs = [c]
&gt;&gt;&gt; print(cs)
[Coordinate(1, 2)]
</code></pre>
</div>
<span class="comment-copy">What output were you expecting for your <code>Coordinates.Coordinate</code> objects? You've not defined the special method <a href="https://docs.python.org/2/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__()</code></a> (AFAICT).</span>
<span class="comment-copy">how shouldi define such a method in this case?</span>
<span class="comment-copy">@Johnsyweb its actually <code>__repr__</code> that he is seeing</span>
<span class="comment-copy">This has to be a dup of something, but I couldn't find a question that didn't assume prior knowledge of the fact that <code>repr</code> and <code>__repr__</code> exist in the first placeâ€¦</span>
<span class="comment-copy">Ah yes, of course. Thanks @JoranBeasley. My question still stands, regardless :)</span>
