<div class="post-text" itemprop="text">
<p>I recently upgraded to python 3.4 to use continuum tools but many of my scripts are written for 2.7. This can causes some errors; some are simple (like "print" now requires parentheses), but others are more complicated:</p>
<pre><code>if struct.unpack("h", "\0\1")[0] == 1:
  defs.append(("WORDS_BIGENDIAN", None))
</code></pre>
<p>Yields the error:</p>
<pre><code>  File "setup.py", line 302, in build_extensions
    if struct.unpack("h", "\0\1")[0] == 1:
    TypeError: 'str' does not support the buffer interface
</code></pre>
<p>Is there a way to run my python code as 2.x like you can with C++ (-std=c++11 etc) ? It's possible that many more errors will surface if I just solve this one. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 is really a different language than Python 2. There's no way to make the Python 3 interpreter run Python 2 code (unless that code doesn't happen to use any of the features that were changed).</p>
<p>You may want to read the <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow">guide to porting to Python 3</a> in the Python documentation. Here's a brief summary of the current recommendations:</p>
<ul>
<li>If you only need to support Python 3 from now on (you don't need to maintain Python 2 compatibility), use the <code>2to3</code> tool to translate most of your code, then manually fix up whatever it has missed. There is lots of documentation that explains the changes between versions, if you haven't used Python 3 before.</li>
<li>If you're writing new code and need to be able to run it with both Python versions, write for Python 3 (or a common subset of 2 and 3) and backport to Python 2 as necessary.</li>
<li>If you have an existing Python 2 codebase and you want to run it on Python 3 without breaking Python 2 compatibility, use libraries like <code>six</code> and <code>from future</code> imports to help you port your code to a common subset of the two versions of Python. <code>2to3</code> and other tools like <code>modernize</code> will help you find the places you can improve things. Note that it's easier to make this work if you drop support for older version of Python 2.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you have several versions installed, you can change the first line of your python script to explicitly use 2.x or 3.x:</p>
<p>For a python 2.x script:</p>
<pre><code>#!/usr/bin/env python2
</code></pre>
<p>or, for a python 3.x script:</p>
<pre><code>#!/usr/bin/env python3
</code></pre>
</div>
<span class="comment-copy">I think not. You'll have to port it. But there are tools for that.</span>
<span class="comment-copy">There's the <code>2to3.py</code> converter that comes with python 3 that will attempt to update your code for you, for one. But there's probably work you'll have to do yourself as well.</span>
<span class="comment-copy">@ACSutton Please remember to vote up useful answers and comments and to mark the answer that solves your problem as "Accepted".</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/20555517/using-multiple-versions-of-python">Using multiple versions of Python</a></span>
<span class="comment-copy">Thank you for linking to that answer! I had not seen it, but I still think this question is relevant for a few reasons: I need to maintain both versions; this is linux-specific; the answers provided here will be useful to others.</span>
<span class="comment-copy">It's unfortunate that this is the case. 2to3 seems to be a very imperfect tool. I'll play around with 'six' and 'fromfuture' to see if these help.</span>
<span class="comment-copy">Can you confirm that this works? I get an error "bash: ./program_name.py: Permission denied"</span>
<span class="comment-copy">Yes, I have just tried this in my shell. Note that this will only work if you have both python2 and python3 installed on your system. Similarly, when running python from a console you can explicitly run an interactive python session by calling <code>python2</code> or <code>python3</code>.</span>
<span class="comment-copy">Thanks, but I'm still getting the error. I'm trying to add the Image module to my Python 3.4 distribution, but in addition to not being explicitly supported in Python 3.4 it might not work at all...</span>
<span class="comment-copy">Try running <code>which python2</code> in a console and use the returned path in the script's first line.</span>
<span class="comment-copy">Okay, your answer makes me re-think what I was trying to do, and I don't think my original goal is possible -- I can't use python2 to install a module for python3. I need the actual install script to be python3-callable. Does that sound right?</span>
