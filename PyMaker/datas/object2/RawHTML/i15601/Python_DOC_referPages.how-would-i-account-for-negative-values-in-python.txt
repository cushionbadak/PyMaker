<div class="post-text" itemprop="text">
<p>I am trying to see if a string (it has to be a string) is a number.</p>
<p>So far I am using <code>isdigit()</code> but apparently <code>isdigit</code> does not account for negative numbers.</p>
<p>If I do <code>isdigit(a)</code> and <code>a = -1</code> I get False.</p>
<p>If I do <code>isdigit(a)</code> and <code>a = 1</code> I get True.</p>
<p>So far I have,</p>
<pre><code>def rotationKeyValidated(rotationKeyStr):
    if rotationKeyStr.startswith('-') and rotationKeyStr[1:].isdigit():
        int(rotationKeyStr)
    return rotationKeyStr.isdigit()
</code></pre>
<p>I am trying to see if it starts with a negative sign, and the rest is a digit then well.. I don't know because I don't want to use multiple return statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow"><code>try/except</code> block</a> and attempt to convert the string into an integer:</p>
<pre><code>def rotationKeyValidated(rotationKeyStr):
    try:
        int(rotationKeyStr)
    except ValueError:
        return False
    return True
</code></pre>
<p>This style of coding embraces Python's <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP principle</a> and is preferred by most Python programmers.  It is also quite robust, handling any string that can be converted into an <code>int</code>.</p>
<hr/>
<p>Since your assignment requires only one return-statement, you can add an <code>else:</code> block and a flag:</p>
<pre><code>def rotationKeyValidated(rotationKeyStr):
    try:
        int(rotationKeyStr)
    except ValueError:
        flag = False
    else:
        flag = True
   return flag
</code></pre>
<p>The <code>else:</code> block will only be executed if the <code>try:</code> block executes without raising an error.</p>
<hr/>
<p>Well, since you <em>must</em> use <code>str.isdigit</code>, you could always do something like this:</p>
<pre><code>def rotationKeyValidated(rotationKeyStr):
    if rotationKeyStr.startswith('-'):
        rotationKeyStr = rotationKeyStr[1:]
    return rotationKeyStr.isdigit()
</code></pre>
<p>The if-statement checks if the string starts with <code>-</code> and removes that character if so.  After that, we can safely return the result of <code>str.isdigit</code>.</p>
</div>
<span class="comment-copy">why you simply cant use <code>type(n) == int</code></span>
<span class="comment-copy">@Hackaholic - Because <code>rotationKeyStr</code> is a string object.  Also, you should be doing <code>isinstance(n, int)</code> to test the type of <code>n</code>.  <code>type(n) == int</code> does not regard inheritance.</span>
<span class="comment-copy">That would mean if I were to put -5 I would get 5. The end result has to be negative if you input a negative number. I think I'm just going to explain to my teachers why I didn't use it. Last question, in another part of my program I have to remove \n from a string... I can do this with rstrip()... But how would I put them back?</span>
<span class="comment-copy">No, <code>rotationKeyStr[1:]</code> creates a new string and uses that.  It does not mutate (alter) the string you pass in (strings are immutable in Python).  As for <code>str.rstrip</code>, you would need to keep track of how many newlines you removed from the end of the string.  You could do something like <code>len(msytr) - len(mystr.rstrip('\n'))</code>.</span>
