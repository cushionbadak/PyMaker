<div class="post-text" itemprop="text">
<p>Here is a code snippet.</p>
<pre><code>x = {}
x[1] = len(x)

print x
{1: 0}
</code></pre>
<p>Is this well defined? That is, could <code>x == {1: 1}</code> instead?</p>
<p>Because I remember that an equivalent program in C++ '98 (if we use <code>std::map</code>) has undefined behaviour. The output of the program was different when compiled with VS compiler and G++.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I mentioned in a comment, this test case can be reduced to:</p>
<pre><code>x = {}
x[1] = len(x)
</code></pre>
<p>The question then becomes, is <code>x[1] == 0</code>, or is <code>x[1] == 1</code>?</p>
<h3>Let's look at the relevant <a href="https://docs.python.org/2/reference/expressions.html#evaluation-order" rel="noreferrer">2.x documentation</a> and <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="noreferrer">3.x documentation</a>:</h3>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
<p>In the following lines, expressions will be evaluated in the arithmetic order of their suffixes:</p>
<pre><code>expr3, expr4 = expr1, expr2
</code></pre>
</blockquote>
<h3>Therefore...</h3>
<p><code>len(x)</code> will be fully computed before we do <code>x[1]</code>, so <code>x[1] == 0</code> and this is well defined.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it's defined. <code>len()</code> is called before the assignment. However, <code>dict</code>'s are not ordered in Python, which is why you sometimes see 0, 1 and 1, 0 in the output.</p>
</div>
<span class="comment-copy">Since multiple people are closing this as unclear, you might consider reducing your test case to this: <a href="https://gist.github.com/sharth/718d61be22a198dfed67" rel="nofollow noreferrer">gist.github.com/sharth/718d61be22a198dfed67</a></span>
<span class="comment-copy">You need to clarify your question. What is '<i>it</i>' regarding your title. I conclude it has something to do with the concerned about line but beyond that, it is not clear.</span>
<span class="comment-copy">Is this a Python question or a C++ question?  Because the two are not at all related.</span>
<span class="comment-copy">I can't see any reason why this could result in undefined behaviour in Python, have you run a test case?</span>
<span class="comment-copy">@MattCoubrough: Kostya seems to be concerned because of a similar C++ code that does produce variable results: <a href="https://gist.github.com/sharth/d56897dfc6b3ed4e8023" rel="nofollow noreferrer">gist.github.com/sharth/d56897dfc6b3ed4e8023</a></span>
