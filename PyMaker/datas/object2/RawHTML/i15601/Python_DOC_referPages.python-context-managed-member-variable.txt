<div class="post-text" itemprop="text">
<p>Context managers define setup/cleanup functions <code>__enter__</code> and <code>__exit__</code>. Awesome. I want to keep one around as a member variable. When my class object goes out of scope, I want this cleanup performed. This is basically the behavior that I understand happens automatically with C++ constructors/destructors.</p>
<pre><code>class Animal(object):

    def __init__(self): 
        self.datafile = open("file.txt") # This has a cleanup function
        # I wish I could say something like...
        with open("file.txt") as self.datafile: # uh...

    def makeSound(self):
        sound = self.datafile # I'll be using it later

# Usage...
if True:
    animal = Animal()
# file should be cleaned up and closed at this point.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I  give classes a <code>close</code> function if it makes sense and then use the <a href="https://docs.python.org/2/library/contextlib.html#contextlib.closing" rel="nofollow"><code>closing</code></a> context manager:</p>
<pre><code>class MyClass(object):
    def __init__(self):
        self.resource = acquire_resource()

    def close():
        release_resource(self.resource)
</code></pre>
<p>And then use it like:</p>
<pre><code>from contextlib import closing

with closing(MyClass()) as my_object:
    # use my_object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't do C++-style RAII ("Resource Acquisition Is Initialization", meaning anything you acquire in the constructor, you release in the destructor). In fact, almost <em>no</em> languages besides C++ do C++-style RAII. Python's context managers and <code>with</code> statements are a <em>different</em> way to achieve the same thing that C++ does with RAII, and that most other languages do with <code>finally</code> statements, <code>guard</code> statements, etc. (Python also has <code>finally</code>, of course.)</p>
<hr/>
<p>What exactly do you mean by "When my class object goes out of scope"?</p>
<p>Objects don't go out of scope; references (or variables, or names, whatever you prefer) do. Some time after the last reference goes out of scope (for CPython, this is immediately, unless it's involved in a reference cycle; for other implementations, it's usually not), the object will be garbage-collected.</p>
<hr/>
<p>If you want to do some cleanup when your objects are garbage-collected, you use the <code>__del__</code> method for that. But that's rarely what you actually want. (In fact, some classes have a <code>__del__</code> method just to warn users that they forgot to clean up, rather than to silently clean up.)</p>
<hr/>
<p>A better solution is to make <code>Animal</code> <em>itself</em> a context manager, so it can manage other context managersâ€”or just manage things explicitly. Then you can write:</p>
<pre><code>if True:
    with Animal() as animal:
        # do stuff
    # now the file is closed
</code></pre>
<p>Here's an example:</p>
<pre><code>class Animal(object):

    def __init__(self): 
        self.datafile = open("file.txt")

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.datafile.close()

    def makeSound(self):
        sound = self.datafile # I'll be using it later
</code></pre>
<p>(Just falling off the end of <code>__exit__</code> like that means that, after calling <code>self.datafile.close()</code>, we successfully do nothing if there was no exception, or re-raise the same exception if there was one. So, you don't have to write anything explicit to make that happen.)</p>
<hr/>
<p>But usually, if you're going to make a class into a context manager, you also want to add an explicit <code>close</code>. Just like files do. And once you do that, you really don't need to make <code>Animal</code> into a context manager; you can just use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.closing" rel="nofollow"><code>closing</code></a>.</p>
</div>
