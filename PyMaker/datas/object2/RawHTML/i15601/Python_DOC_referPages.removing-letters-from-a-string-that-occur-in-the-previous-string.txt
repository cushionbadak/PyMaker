<div class="post-text" itemprop="text">
<p>I need to define a function called <code>remove_letters(str1,str2)</code> which returns a string obtained by removing from string two every letter occurring in str1</p>
<p>So far I have this but It doesn't remove the duplicate letters, it only removes what you put in for it to remove.</p>
<pre><code>def remove_letters(str1,str2):
    str2_list = list(str2)
    for char in str2:
         str2_list.remove()
         return (str2)
</code></pre>
<p>Update</p>
<p>I now need to test this function for a variety for strings. When called the code only returns the last result and not the first two. This is my code.</p>
<pre><code>def test_remove_letters():
    string_list = [('sop', 'sen'),('dog', 'god'),('lighter', 'darker')]
    for str1,str2 in string_list:
        print('The original words are', str1, 'and', str2)
        return ('The result is', remove_letters(str1,str2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def remove_letters(str1,str2):
    s = set(str1)
    return "".join([char for char in str2 if char not in s])
</code></pre>
<p>Or in a loop:</p>
<pre><code>def remove_letters(str1, str2):
    res = ""  
    s = set(str1)
    for char in str2:
        if char not in s: 
            res += char
    return res
</code></pre>
<p>Both the loop and the list comprehension have the same logic, we keep the chars in str2 that don't appear in str1.</p>
<p>Using your own code, you need to iterate over str2 and remove any char from str2_list that  is in str1 then use join on the list to get a string:</p>
<pre><code>def remove_letters(str1,str2):
    str2_list = list(str2)
    for char in str2:
        if char in str1:
             str2_list.remove(char)
    return "".join(str2_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow"><code>str.maketrans</code></a> for this:</p>
<pre><code>&gt;&gt;&gt; def remove_letters(str1,str2):
...     return str2.translate(str.maketrans('', '', str1))
...
&gt;&gt;&gt; remove_letters('abc', 'aaabbbccc')
''
&gt;&gt;&gt; remove_letters('abc', 'aaaxbbbycccz')
'xyz'
&gt;&gt;&gt;
</code></pre>
<p>If you test this solution with <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow"><code>timeit.timeit</code></a>, you will see it is quite efficient:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt;
&gt;&gt;&gt; def remove_letters(str1,str2):
...     s = set(str1)
...     return "".join([char for char in str2 if char not in s])
...
&gt;&gt;&gt; timeit("remove_letters('abc', 'aaaxbbbycccz')", "from __main__ import remove_letters")
6.056879016746539
&gt;&gt;&gt;
&gt;&gt;&gt; def remove_letters(str1,str2):
...     return str2.translate(str.maketrans('', '', str1))
...
&gt;&gt;&gt; timeit("remove_letters('abc', 'aaaxbbbycccz')", "from __main__ import remove_letters")
5.283739134443065
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy"><code>return ''.join(c for c in str2 if c not in str1)</code></span>
<span class="comment-copy">@wim Best answer</span>
<span class="comment-copy">This is perfect thank you. Extension on question above. I have created a test function for this with multiple strings but when called it only returns the result of the last string and not the first two. The code i have for this i have put in question above. @padraiccunningham</span>
<span class="comment-copy">move your return out of the loop. dedent four spaces</span>
<span class="comment-copy">I tried that before and that achieves printing 'The original words are' for each set of strings but not for the results.</span>
<span class="comment-copy">sorry thought you were returning a list, either store results in a  list and return that or just use print statements in the loop,<code>print ('The result is', remove_letters(str1,str2))</code> instead of return</span>
