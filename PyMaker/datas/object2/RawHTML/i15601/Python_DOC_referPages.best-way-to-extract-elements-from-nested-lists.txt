<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4800811/accessing-a-value-in-a-tuple-that-is-in-a-list">Accessing a value in a tuple that is in a list</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I have a list of lists which look like this:</p>
<pre><code>[[[12, 15, 0], [13, 15, 25], [14, 15, 25], [16, 16, 66], [18, 15, 55]]]
</code></pre>
<p>What would be the best way to extract all elements occurring at index position 1. I know I can use a for loop like;</p>
<pre><code>for i in list:
    for j in i:
        print j[2]
</code></pre>
<p>But is there  a more "pythonic" (short /easy /less code/ efficient) way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; lst = [[[12, 15, 0], [13, 15, 25], [14, 15, 25], [16, 16, 66], [18, 15, 55]]]
&gt;&gt;&gt; [x[1] for x in lst[0]]
[15, 15, 15, 16, 15]
&gt;&gt;&gt;
</code></pre>
<p>The above is equivalent to:</p>
<pre><code>lst = [[[12, 15, 0], [13, 15, 25], [14, 15, 25], [16, 16, 66], [18, 15, 55]]]
final_list = []
for sub_list in lst[0]:
    final_list.append(sub_list[1])
</code></pre>
<p>except that it is a lot more concise and also avoids all those calls to <code>list.append</code> (which means that it is more efficient).</p>
</div>
<div class="post-text" itemprop="text">
<p>use list comprehension:</p>
<pre><code>[ x[1] for x in my_list[0] ]
</code></pre>
<p>this is more general if nested list is moree...</p>
<pre><code>[ y[1] for x in my_list for y in x ]
</code></pre>
</div>
