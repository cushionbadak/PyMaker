<div class="post-text" itemprop="text">
<p>I have read the documentation and there is something I'm still not sure about. Does all the initialisation code for the whole module in <code>__init__.py</code> get run if I do:</p>
<pre><code>from mymodule import mything
</code></pre>
<p>or only if I do </p>
<pre><code>import mymodule
</code></pre>
<p>What gets run from <code>__init__.py</code> and when does it get run?</p>
<p>I'm sure I could also test this fairly easy, but for posterity and helpfulness for others, I thought I'd ask here.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code in <code>__init__.py</code> is run whenever you import <em>anything</em> from the package. That includes importing other modules in that package.</p>
<p>The style of import (<code>import packagename</code> or <code>from packagename import some_name</code>) doesn't matter here.</p>
<p>Like all modules, the code is run just once, and entered into <code>sys.modules</code> under the package name.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/448271/what-is-init-py-for">What is __init__.py for?</a></span>
<span class="comment-copy">@fredtantini: that doesn't answer <i>when</i> <code>__init__.py</code> is run.</span>
<span class="comment-copy">@MartijnPieters for me, <a href="http://stackoverflow.com/a/448311/3336968">this answer</a> did.</span>
<span class="comment-copy">Thanks, I don't think this is explicitly answered in the other question, and it's also not the focus of the question itself.</span>
<span class="comment-copy">hello @Martijn Pieters, I've noticed that if I have a package, say <code>bin</code>, and I have an <code>__init__.py</code> inside and another module, say <code>app.py</code>, and I do <code>python bin\webapp.py</code> from outside the package(directory), the <code>__init__.py</code> is also executed and I can see it in <code>sys.modules</code>, above the <code>__main__</code> which I know is the script's name as being executed directly, is this part of adding that dir to the path?</span>
<span class="comment-copy">@George: you are not being very clear about your situation. Running files inside a package as scripts does not load the package, because that's not what is being imported. See <a href="https://stackoverflow.com/questions/48304317/how-does-implicit-relative-imports-work-in-python/48304390#48304390" title="how does implicit relative imports work in python">stackoverflow.com/questions/48304317/â€¦</a>. If you run a specific module as a script (with <code>python package/module.py</code> it'll be imported as <code>__main__</code>, and then importing <code>package.module</code> will import the same code under a different name so you end up with two separate modules.</span>
<span class="comment-copy">@MartijnPieters thank you for the response. My situation is the following..I have a package <code>bin</code> and inside that I have 2 modules <code>__init__.py</code> and <code>app.py</code>. I'm running it as a script as follows: <code>python bin\app.py</code> (windows) and inside that <code>app.py</code> I have <code>import sys</code> and <code>print(sys.modules)</code>. The first 2 entries after <code>__future__</code> in the sys dict are <code>__init__ : &lt;module __init__ from abspath/to/package/__init__.py</code> and the second is <code>__main__: &lt;module __main__ from bin/app.py</code> And I'm curious why is the <code>__init__</code> there? I replied before reading your link so the answer might be there:)</span>
<span class="comment-copy">@George: and if you see <code>__future__</code> listed in there then some Python code (not part of the initial set of modules) used <code>import __future__</code>, which is very different from <code>from __future__ import ...</code> compiler switches; the latter do not actually ever import the <a href="https://docs.python.org/3/library/__future__.html" rel="nofollow noreferrer"><code>__future__</code> module object</a>.</span>
