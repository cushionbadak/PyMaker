<div class="post-text" itemprop="text">
<p>I looked at previous similar questions and got only more confused.</p>
<p>In python 3.4, I want to read an html page as a string, given the url.</p>
<p>In perl I do this with LWP::Simple, using get().</p>
<p>A matplotlib 1.3.1 example says: <code>import urllib; u1=urllib.urlretrieve(url)</code>.
python3 can't find <code>urlretrieve</code>.</p>
<p>I tried <code>u1 = urllib.request.urlopen(url)</code>, which appears to get an <code>HTTPResponse</code> object, but I can't print it or get a length on it or index it.</p>
<p><code>u1.body</code> doesn't exist. I can't find a description of the <code>HTTPResponse</code> in python3.</p>
<p>Is there an attribute in the <code>HTTPResponse</code> object which will give me the raw bytes of the html page?</p>
<p>(Irrelevant stuff from other questions include <code>urllib2</code>, which doesn't exist in my python, csv parsers, etc.)</p>
<p><strong>Edit:</strong></p>
<p>I found something in a prior question which partially (mostly) does the job:</p>
<pre><code>u2 = urllib.request.urlopen('http://finance.yahoo.com/q?s=aapl&amp;ql=1')

for lines in u2.readlines():
    print (lines)
</code></pre>
<p>I say 'partially' because I don't want to read separate lines, but just one big string.</p>
<p>I could just concatenate the lines, but every line printed has a character 'b' prepended to it.</p>
<p>Where does that come from?</p>
<p>Again, I suppose I could delete the first character before concatenating, but that does get to be a kloodge.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that Python3 does not read the html code as a string but as a <code>bytearray</code>, so you need to convert it to one with <code>decode</code>.</p>
<pre><code>import urllib.request

fp = urllib.request.urlopen("http://www.python.org")
mybytes = fp.read()

mystr = mybytes.decode("utf8")
fp.close()

print(mystr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the 'requests' module, it's a lot more simpler.</p>
<pre><code>#pip install requests for installation

import requests

url = 'https://www.google.com/'
r = requests.get(url)
r.text
</code></pre>
<p>more info here &gt; <a href="http://docs.python-requests.org/en/master/" rel="noreferrer">http://docs.python-requests.org/en/master/</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>urllib.request.urlopen(url).read()</code> should return you the raw HTML page as a string.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import requests

url = requests.get("http://yahoo.com")
htmltext = url.text
print(htmltext)
</code></pre>
<p>This will work similar to <code>urllib.urlopen</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Reading an html page with urllib is fairly simple to do. Since you want to read it as a single string I will show you.</p>
<p><strong>Import urllib.request:</strong></p>
<pre><code>#!/usr/bin/python3.5

import urllib.request
</code></pre>
<p><strong>Prepare our request</strong></p>
<pre><code>request = urllib.request.Request('http://www.w3schools.com')
</code></pre>
<p><strong>Always use a "try/except" when requesting a web page as things can easily go wrong. urlopen() requests the page.</strong></p>
<pre><code>try:
    response = urllib.request.urlopen(request)
except:
    print("something wrong")
</code></pre>
<p><strong>Type is a great function that will tell us what 'type' a variable is. Here, response is a http.response object.</strong></p>
<pre><code>print(type(response))
</code></pre>
<p><strong>The read function for our response object will store the html as bytes to our variable. Again type() will verify this.</strong></p>
<pre><code>htmlBytes = response.read()

print(type(htmlBytes))
</code></pre>
<p><strong>Now we use the decode function for our bytes variable to get a single string.</strong></p>
<pre><code>htmlStr = htmlBytes.decode("utf8")

print(type(htmlStr))
</code></pre>
<p><strong>If you do want to split up this string into separate lines, you can do so with the split() function. In this form we can easily iterate through to print out the entire page or do any other processing.</strong></p>
<pre><code>htmlSplit = htmlStr.split('\n')

print(type(htmlSplit))

for line in htmlSplit:
    print(line)
</code></pre>
<p>Hopefully this provides a little more detailed of an answer. Python documentation and tutorials are great, I would use that as a reference because it will answer most questions you might have.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import urllib
some_url = 'https://docs.python.org/2/library/urllib.html'
filehandle = urllib.urlopen(some_url)
print filehandle.read()
</code></pre>
</div>
<span class="comment-copy">Here's the description of <a href="https://docs.python.org/3/library/http.client.html#httpresponse-objects" rel="nofollow noreferrer"><code>HTTPResponse</code> objects</a> in the Python 3 documentation.</span>
<span class="comment-copy">The <code>fp</code> object has <code>readlines()</code> method, at least in Python version <b>3.6.1</b>.</span>
<span class="comment-copy">not a good idea to assume its UTF-8 encoded. You should try and read the header</span>
<span class="comment-copy">I can't write mystr to text file. I get this error every time I run the program : <code>return codecs.charmap_encode(input,self.errors,encoding_table)[0] UnicodeEncodeError: 'charmap' codec can't encode characters in position 369774-369777: character maps to &lt;undefined&gt;</code></span>
<span class="comment-copy">Attribute error:'function' object has no attribute 'read'</span>
<span class="comment-copy">@user1067305 strange... <code>request.urlopen()</code> <a href="https://docs.python.org/3.4/library/urllib.request.html?highlight=urllib.request#urllib.request.urlopen" rel="nofollow noreferrer">returns an <code>HTTPResponse</code></a>, and <a href="https://docs.python.org/3.4/library/http.client.html#http.client.HTTPResponse.read" rel="nofollow noreferrer">they do have</a> the <code>read()</code> method...</span>
<span class="comment-copy">OK! I tried it this way:u2 = urllib.request.urlopen('<a href="http://finance.yahoo.com/q?s=aapl&amp;ql=1'" rel="nofollow noreferrer">finance.yahoo.com/q?s=aapl&amp;ql=1'</a>) junk =  u2.read() print(junk)</span>
<span class="comment-copy">not a good idea to assume its UTF-8 encoded. You should try and read the header</span>
<span class="comment-copy">@CpILL good catch. I agree, while utf-8 is widely used, you could potentially run into issues.</span>
<span class="comment-copy">this is not python3 code</span>
