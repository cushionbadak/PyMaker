<div class="post-text" itemprop="text">
<p>Can this be made more Pythonic please?</p>
<pre><code>if joyx &gt; 50:
   joyx = 100
elif joyx &lt; -50:
   joyx = -100
else:
   joyx = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can write it using <a href="https://docs.python.org/3/library/math.html#math.copysign" rel="nofollow"><code>math.copysign</code></a> and <a href="https://docs.python.org/3/library/functions.html?highlight=abs#abs" rel="nofollow"><code>abs</code></a> functions:</p>
<pre><code>In [30]: from math import copysign

In [31]: joyx = copysign(100, joyx) if abs(joyx) &gt; 50 else 0
</code></pre>
<p>Example:</p>
<pre><code>In [32]: joyx = lambda x: copysign(100, x) if abs(x) &gt; 50 else 0

In [33]: joyx(51), joyx(-51), joyx(50), joyx(-50), joyx(0)
Out[33]: (100.0, -100.0, 0, 0, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion, what you have is perfectly Pythonic.</p>
<p>Because you are using less-than and greater-than comparisons, we can't really improve this by using a dictionary or any other trick I can think of.</p>
<p>I guess you could factor this out into a function and just call the function:</p>
<pre><code>def clean_up_joystick(x, y, xbound, ybound, on_value):
    if x &gt; xbound:
        x = on_value
    elif x &lt; -xbound:
        x = -on_value
    else:
        x = 0
    if y &gt; ybound:
        y = on_value
    elif y &lt; -ybound:
        y = -on_value
    else:
        y = 0
    return (x, y)
</code></pre>
<p>For an actual program, I suggest you should make a class that manages the joystick, and init the class with the bounds values you want to use with any particular joystick.</p>
<p>Maybe something like this:</p>
<pre><code>class Joystick(object):
    def __init__(self,
            x_low=-50, x_high=50,
            y_low=-50, y_high=50,
            on_value=100):
        self.x_low = x_low
        self.x_high = x_high
        self.y_low = y_low
        self.y_high = y_high
        self.on_value = on_value

    def read(self):
        # do something here that reads the joystick value
        # joystick value saved in x, y variables
        x, y = 0,0  # dummy init for example

        if x &gt; self.x_high:
            x = self.on_value
        elif x &lt; -self.x_low:
            x = -self.on_value
        else:
            x = 0
        if y &gt; self.x_high:
            y = self.on_value
        elif y &lt; self.x_low:
            y = -self.on_value
        else:
            y = 0
        return (x, y)

j = Joystick()
x, y = j.read()
</code></pre>
<p>Then in your actual program, you just use <code>j.read()</code> to read the joystick and clean up the input data.  If you need to change how it works, you have one place (the class).  Just make sure to have a different class instance for each actual joystick so you can clean up different joysticks if you have different ones.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you find this more pythonic:</p>
<pre><code>def get(joyx):
   joyx_min = -200
   joyx_max = 200
   from collections import namedtuple
   wheel_section = namedtuple("wheel_section", "min, max, output_value")
   roulette_wheel = [ wheel_section(joyx_min, -50, -100),  wheel_section(-50,51,0), wheel_section(51, joyx_max,100) ]
   for section in roulette_wheel:
     if  section.min &lt;= joyx &lt;  section.max:
       return section.output_value
   return 255
</code></pre>
<p>your code is a very simplified version of the roulette wheel algorithm. 
I'm not sure you should really do a full scale version of it though.</p>
<h2>Update</h2>
<p>A significantly shorter and prettier version that uses a lower bound algorithm:</p>
<pre><code>from bisect import bisect_left

# an intentionally larger: maps also 50 and -50 for demonstrational purposes.
data = { -200 : -100, -100 : -50, -50 : 0, 50 : 50, 220 : 100 }
keys = list(data.keys())


print data[  keys[ bisect_left(keys, -79)  ]  ] # prints -100
print data[  keys[ bisect_left(keys,  15)  ]  ] # prints 0
print data[  keys[ bisect_left(keys,  67)  ]  ] # prints 50
print data[  keys[ bisect_left(keys,  250) ]  ] # prints 100
</code></pre>
</div>
<span class="comment-copy">Not sure the question is worth loading the math module ...</span>
<span class="comment-copy">I think this is a more elegant way of doing it but the original is clear enough.</span>
<span class="comment-copy">Nice :)  I already have math loaded (its a 2000 line prog!)  Didn't know about copysign - that'll be very useful :)</span>
<span class="comment-copy">:)  I think you know what I meant :) e.g. use an Python feature to make it shorter/sophisitcated.  As you say - the old way I learnt in BBC Basic is still not a bad way of doings things :)</span>
<span class="comment-copy">Like it but really looking for the one liner (if it existed) - ta :)</span>
<span class="comment-copy">@SimpleSi This is an adaptation of the roulette wheel from genetic algorithms. Such things are mainly written in Java/C++. this is mainly usefull if you have more values than 3 (i.e. if you want to convert a float range into 10 distinct integer values). you could also perform binary search (smallest value larger than threshold) and map the found index to a set of discrete values. I could fit this into a (rather unreadable) lambda.</span>
