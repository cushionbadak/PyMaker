<div class="post-text" itemprop="text">
<p>I have custom python library installed on my NAS which has this code:</p>
<pre><code>    try:
        i = open("/volume1/web/python/session.txt")
        try:
            a = str(i.read())
        except Exception as err:
            a = "Exception: {0}".format(err)
        finally:
            i.close()
    except Exception as err:
        a = "Exception: {0}".format(err)
    return a
</code></pre>
<p>This code is invoked by <em>app.py</em> which saves returned text to file.</p>
<p>When <em>app.py</em> is run from SSH, it saves the content of <em>session.txt</em> as intended.
<strong>But</strong> when <em>app.py</em> is run as task (<em>run.sh</em>), it saves exception <em>"'ascii' codec can't decode byte 0xc3 in position 12: ordinal not in range(128)"</em>. Yeah, the file contains "รก" in position 12, so I add <em>encoding="utf-8"</em> to open() function. And <strong>this fails</strong> (does not save anything, so I don't even know if and what error it threw.)</p>
<hr/>
<h2>QUESTION</h2>
<p>Any ideas how to safely open and read text file by python library (when by regular script, runs correctly even if it is run as task)?</p>
<hr/>
<h2>FILES involved</h2>
<p><strong>library</strong>:</p>
<pre><code>class API():
    def __init__(self, dir):
        self.DIR = dir

    def CheckTokens(self):
        print("\nChecking all saved tokens")

        try:
            i = open(os.path.join(self.DIR, "session.txt"), encoding='utf-8')
            try:
                a = i.read()
            except Exception as err:
                a = "Exception: {0}".format(err)
            finally:
                i.close()
        except Exception as err:
            a = "Exception: {0}".format(err)
        return a
</code></pre>
<p><strong>app.py</strong>:</p>
<pre><code>import os.path
from time import localtime, strftime
from APIfile import API

if __name__ == "__main__":
    LOCAL_DIR = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))

    def write(text, type):
        time = localtime()
        time = "%s@%s" % (strftime("%Y%m%d", time), strftime("%H%M%S", time))
        filename = "%s%s.txt" % (time, ("_%s" % type if type != "JSON" else ""))
        f = open(os.path.join(LOCAL_DIR, "logs", filename), "a")
        f.write(str(text))
        f.close()

    INSTANCE = API(LOCAL_DIR)
    tokens = INSTANCE.CheckTokens()
    write(tokens, "DEBUG")
</code></pre>
<p><strong>run.sh</strong>:</p>
<pre><code>python3 /volume1/web/python/app.py
</code></pre>
<p><strong>session.txt</strong> and <strong>logs</strong> folder is located in the same directory as <em>app.py</em></p>
<hr/>
<h2>OUTCOMES</h2>
<ol>
<li>Run from SSH <em>python3 /volume1/web/python/app.py</em> -&gt; saves content of session.txt to log file</li>
<li>Run from SSH /volume1/web/python/run.sh -&gt; does the same as <em>1.</em></li>
<li>Run <em>run.sh</em> file as task (something like cron job) -&gt; does not create log file</li>
<li>When I remove encoding='utf-8' statement from open function, in SSH run correctly, in task throws an exception <em>('ascii' codec can't decode byte 0xc3 in position 12: ordinal not in range(128))</em></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I'm a little puzzled, but here's my guess: <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open()</code> defaults to the shell's preferred encoding</a>, and your NAS's locale is somehow set differently than your local shell's. I think that <code>encoding=utf-8</code> is the fix for your current issue.</p>
<p>Now, you say that doesn't work either. I'm not sure what you mean by "does not save anything" -- my guess here is that your script needs to save its output to a file, and the NAS daemon doesn't have permissions to write to that file. You don't say what the call responsible for the saving to disk actually looks like, but I believe that's a separate issue from the problem with your encoding. </p>
</div>
<span class="comment-copy">Are you sure that SSH is using python3 rather than python 2.7?</span>
<span class="comment-copy">100% sure, I don't even have python 2.7 installed ;) BTW, would that change anything?</span>
<span class="comment-copy">So <code>python3 /your/path/here.py</code> works, but <code>./run.sh</code> doesn't?</span>
<span class="comment-copy">I ask about python 2.7 because there were many changes in the way string encoding was handled between versions.</span>
<span class="comment-copy">@user2781994 Many *nix systems come with some flavor of Python 2 installed for use in system tooling. Even if you never installed it by hand, it may still be on your system.</span>
<span class="comment-copy">The code which saves the response <code>f = open(os.path.join(LOCAL_DIR, "logs", filename), "a") f.write(str(text)) f.close()</code> I creates log file with successful response or with exception (which is sometimes thrown by cron job).. but usually when run as cron job, it doesn't create the file (so I assume something went wrong) :(</span>
<span class="comment-copy">What's <code>LOCAL_DIR</code>? Does <code>LOCAL_DIR/logs</code> exist already? <code>a</code> mode won't create it if it doesn't, I don't think</span>
<span class="comment-copy"><code>LOCAL_DIR</code> is defined in app.py (as I updated the post), <code>logs</code> exists and <code>a</code> should create the file, because it does always when run by SSH. And task is run as <code>root</code>, so it should have all the permissions to create new file.</span>
