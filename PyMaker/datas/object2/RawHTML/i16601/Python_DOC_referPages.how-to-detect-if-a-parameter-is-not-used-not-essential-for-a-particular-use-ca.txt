<div class="post-text" itemprop="text">
<p>I have some working code (library) that, in some situations, I only need a small subset of its functional.</p>
<p>Thinking of a simpler case, the code (library) is a class that takes a few parameters when initializing.<br/>
For my limited use case, many of those parameters are not vital as they are not directly used in the internal calculation (some parameters are only used when I call particular methods of the object), while it is very hard to prepare those parameters properly.</p>
<p>So, I am wondering, if there is any easy way to know what parameters are essential without fully analyzing the library code (which is too complicated). For example, I may pass fake parameters to the api, And it would raise an exception only if they are actually used.</p>
<p>For example, I can pass in <code>some_parameter = None</code> for <code>some_parameter</code> that I guess won't be used. So whenever the library tries to access <code>some_parameter.some_field</code> an exception would be raised thus I can further look into the issue and replace it by the actually parameter. However, it would change the behavior of the library if the code itself accepts <code>None</code> as a parameter.</p>
<p>Are there any established approach to this problem? I don't mind false positive as I can always look into the problem and manually check if the usage of the fake parameters by the library is trivial.</p>
<p>For those suggestions on reading documentation and code, I don't have documentations! And the code is legacy code left by previous developers. </p>
<h3>Update</h3>
<p>@sapi:</p>
<p>Yes I would like to use the proxy pattern / object: I will further investigate on such topic.</p>
<p>"A virtual proxy is a placeholder for "expensive to create" objects. The real object is only created when a client first requests/accesses the object."</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on what you're looking to achieve, you may be able to pass in a proxy object which throws an exception when accessed.</p>
<p>For example:</p>
<pre><code>class ObjectUsedException(Exception):
    pass


class ErrorOnUseProxy(object):
    def __getattr__(self, name):
        raise ObjectUsedException('Tried to access %s'%name)
</code></pre>
<p>Of course, that approach will fail in two pretty common situations:</p>
<ul>
<li>if the library itself checks if the attribute exists (eg, to provide some default value)</li>
<li>if it's treated as a primitive (float, string etc), though you could modify this approach to take that into account</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I am assuming all classes in question are new-style. This is always the case if you are using Python 3; in Python 2, they must extend from <code>object</code>. You can check a class with <code>isinstance(MyClass, type)</code>. For the remainder of my answer, I will assume Python 3, since it was not specified. If you are using Python 2, make sure to extend from <code>object</code> where no other base class is specified.</p>
<p>If those conditions hold, <a href="https://docs.python.org/3/reference/datamodel.html#descriptors" rel="nofollow" title="Implementing Descriptors in the Python documentation">you can write a descriptor</a> that raises an exception whenever it is accessed:</p>
<pre><code>class ParameterUsed(Exception):
    pass

class UsageDescriptor:
    def __init__(self, name):
        super(UsageDescriptor, self).__init__()
        self.name = name

    def __get__(self, instance, owner):
        raise ParameterUsed(self.name)

    def __set__(self, instance, value):
        # Ignore sets if the value is None.
        if value is not None:
            raise ParameterUsed(self.name)

    def __delete__(self, instance):
        # Ignore deletes.
        pass
</code></pre>
<p>I will assume we are using this class as an example:</p>
<pre><code>class Example:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def use_a(self):
        print(self.a)

    def use_b(self):
        print(self.b)
</code></pre>
<p>If we want to see if <code>a</code> is used anywhere, extend the class and put an instance of our descriptor on the class:</p>
<pre><code>class ExtExample(Example):
    a = UsageDescriptor('a')
</code></pre>
<p>Now if we were to try to use the class, we can see which methods use <code>a</code>:</p>
<pre><code>&gt;&gt;&gt; example = ExtExample(None, None)
&gt;&gt;&gt; example.use_a()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ParameterUsed: a
&gt;&gt;&gt; example.use_b()
None
</code></pre>
<p>Here, we can see that <code>use_a</code> tried to use <code>a</code> (raising an exception because it did), but <code>use_b</code> did not (it completed successfully).</p>
<hr/>
<p>This approach works more generally than <a href="https://stackoverflow.com/a/24346768">sapi’s</a> does: in particular, sapi’s approach will only detect an attribute being accessed on the object. But there are plenty of things you can do that <em>do not</em> access attributes on that object. This approach, rather than detecting attributes being accessed on that object, detects the object itself being accessed.</p>
</div>
<div class="post-text" itemprop="text">
<p>I belive the simplest and least intrusive way is to turn the parameters into properties:</p>
<pre><code>class Foo(object):
    def __init__(self):
        pass

    @property
    def a(self):
        print &gt;&gt;sys.stderr, 'Accesing parameter a'
        return 1

 bar = Foo()
 print bar.a == 1
</code></pre>
<p>Will print True in stdout, and <code>Accesing parameter a</code> to stderr. You would have to tweak it to allow the class to change it.</p>
</div>
<span class="comment-copy">Yes, reading the documentation and code.</span>
<span class="comment-copy">Is there no API documentation? Nothing that tells you what each argument is for? You could make a custom class that throws an error for any attempted interaction, but that seems unnecessary.</span>
<span class="comment-copy">Did you write this library yourself?</span>
<span class="comment-copy">Thank you for bring term 'proxy object' to me. I can confirm it is what I would like to achieve: "A virtual proxy is a placeholder for "expensive to create" objects. The real object is only created when a client first requests/accesses the object."</span>
<span class="comment-copy">thank you, very enlightening</span>
