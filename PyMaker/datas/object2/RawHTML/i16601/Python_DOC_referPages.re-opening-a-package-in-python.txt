<div class="post-text" itemprop="text">
<p>Maybe it's not possible (I'm more used to Ruby, where this sort of thing is fine). I'm writing a library that provides additional functionality to docker-py, which provides the <code>docker</code> package, so you just <code>import docker</code> and then you get access to <code>docker.Client</code> etc.</p>
<p>Because it seemed a logical naming scheme, I wanted users to pull in my project with <code>import docker.mymodule</code>, so I've created a directory called <code>docker</code> with an <code>__init__.py</code>, and <code>mymodule.py</code> inside it.</p>
<p>When I try to access <code>docker.Client</code>, Python can't see it, as if my <code>docker</code> package has hidden it:</p>
<pre><code>import docker
import docker.mymodule

docker.Client() # AttributeError: 'module' object has no attribute 'Client'
</code></pre>
<p>Is this possible, or do all top-level package names have to differ between source trees?</p>
</div>
<div class="post-text" itemprop="text">
<p>This would only be possible if <code>docker</code> was set up as a <a href="http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages" rel="nofollow noreferrer">namespace package</a> (which <a href="https://github.com/dotcloud/docker-py/blob/master/setup.py" rel="nofollow noreferrer">it isn't</a>).</p>
<p>See <a href="https://github.com/zopefoundation/zope.schema/blob/master/setup.py#L93" rel="nofollow noreferrer"><code>zope.schema</code></a>, <a href="https://github.com/zopefoundation/zope.interface/blob/master/setup.py#L93" rel="nofollow noreferrer"><code>zope.interface</code></a>, etc. for an example of a namespace package (<code>zope</code> is the namespace package here). Because <code>zope</code> is declared as a namespace package in <code>setup.py</code>, it means that <code>zope</code> doesn't refer to a particular module or directory on the file system, but is a namespace shared by several packages. This also means that the result of <code>import zope</code> is pretty much undefined - it will simply import the top-level module of the first <code>zope.*</code> package found in the import path.</p>
<p>Therefore, when dealing with namespace packages, you need to explicitely import a specific one with <code>import zope.schema</code> or <code>from zope import schema</code>.</p>
<p>Unfortunately, namespace packages aren't that well documented. As noted by <code>@Bakuriu</code> in the comment, these are some resources that contain some helpful information:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1675734/how-do-i-create-a-namespace-package-in-python">Stackoverflow: How do I create a namespace package in Python?</a></li>
<li><a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="nofollow noreferrer">Built-in support for namespace packages in Python 3.3</a></li>
<li><a href="http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages" rel="nofollow noreferrer">Namespace packages in the setuptools documentation</a></li>
<li><a href="http://www.sourceweaver.com/musings/posts/python-namespace-packages" rel="nofollow noreferrer">Post about namespace packages at sourceweaver.com</a></li>
</ul>
</div>
<span class="comment-copy">You could only do that if <code>docker</code> was set up as a namespace package, which it isn't. See <a href="https://github.com/zopefoundation/zope.schema/blob/master/setup.py#L93" rel="nofollow noreferrer"><code>zope.schema</code></a>, <a href="https://github.com/zopefoundation/zope.interface/blob/master/setup.py#L93" rel="nofollow noreferrer"><code>zope.interface</code></a>, etc. for an example of a namespace package (<code>zope</code> is the namespace package here).</span>
<span class="comment-copy">@LukasGraf thank you! If you post that as an answer, I'll accept.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/1675734/how-do-i-create-a-namespace-package-in-python">How do I create a namespace package in Python?</a>. Also note that since python3.3 there is <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="nofollow noreferrer">built-in support for namespace packages</a>.</span>
<span class="comment-copy">This is an awesome answer, thank you!</span>
