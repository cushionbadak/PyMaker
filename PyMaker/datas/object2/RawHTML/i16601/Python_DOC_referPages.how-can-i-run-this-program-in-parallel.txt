<div class="post-text" itemprop="text">
<p>I have a class function in python.
I run the class in many different instances</p>
<pre><code>class worker():
    def__init__(x,x)
    def run():


instance1 = worker(x,x)
instance1.run()
instance2 = worker(x,x)
instance2.run()
</code></pre>
<p>The problem is if first instance1 encounter thread.sleep() it affects the other instance2. How do i make them independent. Better if without multi-process Thank you!</p>
<p>Different example:</p>
<pre><code>__author__ = 'user'
import time


class test():
    def __init__(self, message):
        self.message=message
    def run(self):
        while True:
            print self.message
        time.sleep(5)


if __name__ == '__main__':
    test1 = test("PRINT-1")
    test1.run()
    test2 = test("PRINT-2")
    test2.run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're half-followed a tutorial on parallel code. Nothing in your current <code>test</code> class will cause it to run in parallel, but with just some minor tweaks you can do so with either threads or processes.</p>
<p>Here's a version that makes the class inherit from <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow"><code>threading.Thread</code></a>:</p>
<pre><code>import threading
import time

class TestThreaded(threading.Thread):
    def __init__(self, x, y):
        super().__init__()
        self.x = x
        self.y = y

    def run(self):
        for i in range(self.x):
            time.sleep(self.y)
            print((i+1)*self.y)
</code></pre>
<p>You can use it like this:</p>
<pre><code>t0 = TestThreaded(8, 3)
t1 = TestThreaded(6, 4)

t0.start()
t1.start()

t0.join()
t1.join()
</code></pre>
<p>Both threads in this example will count to 24 over a span of 24 seconds. The first thread will count by threes, the second thread will count by fours. The timings will be closely synched at 12 and 24 seconds (depending on your computer's exact timings they may get printed on the same line).</p>
<p>Note that we're calling the <code>start</code> method inherited from the <code>Thread</code> class, not the run method we defined above. The threading code will call <code>run</code> for us, in the spawned thread.</p>
<p>You can get an equivalent multiprocessing version by using <a href="https://docs.python.org/3/library/multiprocessing.html#the-process-class" rel="nofollow"><code>multiprocessing.Process</code></a> as the base class instead of <code>threading.Thread</code>. The only difference is that you'll spawn child processes instead of child threads. For CPU limited work in Python, processes are better than threads because they're not limited by the Global Interpreter Lock, which makes it impossible for two threads to run Python code at the same time. The downside is higher overhead, both during startup, and when communicating between processes.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use <strong>Celery</strong> for run parallel tasks. It's easy to implement.</p>
<p>See an example:</p>
<pre><code>import time
from celery import task

@task
def make_task():
    time.sleep(5)
    return True

def execute_tasks():
    result = group([make_task.s(), make_task.s()]).apply_async() # Execute tasks
    print result.get() # Print the result
</code></pre>
</div>
<span class="comment-copy">That is not valid Python code. Please provide a <a href="http://stackoverflow.com/help/mcve">minimal working example</a>.</span>
<span class="comment-copy">@jonrsharpe updated thanks!</span>
<span class="comment-copy">Could you please review the indentation - that still won't run as-is</span>
<span class="comment-copy">yeah, +1 for indentation review: class <code>RunBrowserUbuntu</code> and its methods have same indent level, seems wrong</span>
<span class="comment-copy">When pasting code on SO <i>first</i> paste it, then select the block and <i>then</i> click on the <code>{}</code>. It looks like you were first clicking on <code>{}</code>, pasting the code and leaving it as is (which doesn't work, because only the first line is indented).</span>
