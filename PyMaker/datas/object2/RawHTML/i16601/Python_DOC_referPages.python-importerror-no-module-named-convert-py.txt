<div class="post-text" itemprop="text">
<p>I tried searching the site for similar problems, but none seemed to have my exact dilemma.</p>
<p>For a tutorial book on Python, I wrote a program that converts Celsius temperatures to Fahrenheit. When I run it in the IDLE shell, the program works, but returns an error. Here is the code for the program itself:</p>
<pre><code>#convert.py
#converts Celsius temperatures to Farenheit

        def main():
            celsius = input("Type the temperature in degrees Celsius: ")
            farenheit = ((9/5)* int(celsius)) +  32
            print(farenheit)

    main();
</code></pre>
<p>And here's the error.</p>
<pre><code>&gt;&gt;&gt; import convert.py
Type the temperature in degrees Celsius: 59
138.2
Traceback (most recent call last):
  File "&lt;frozen importlib._bootstrap&gt;", line 2218, in _find_and_load_unlocked
AttributeError: 'module' object has no attribute '__path__'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;pyshell#0&gt;", line 1, in &lt;module&gt;
    import convert.py
ImportError: No module named 'convert.py'; 'convert' is not a package
</code></pre>
<p>I am using Python 3.4.1.</p>
</div>
<div class="post-text" itemprop="text">
<p>You do not add the file extension when importing a Python module.  You should do:</p>
<pre><code>&gt;&gt;&gt; import convert
</code></pre>
<p>This code:</p>
<pre><code>&gt;&gt;&gt; import convert.py
</code></pre>
<p>is telling Python to import the nonexistent <code>py</code> module that is located in the <code>convert</code> package.</p>
<p>Here is a <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="noreferrer">reference</a> on importing modules and packages in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to drop the <code>.py</code> extension; Python imports use just the base name:</p>
<pre><code>import convert
</code></pre>
<p>What happens is that Python imported <code>convert</code>, <em>then looks for a nested module named <code>py</code></em>. That part fails, because <code>convert</code> is not a package and cannot contain another module.</p>
</div>
<span class="comment-copy">Without the <code>.py</code>, and you don't need <code>;</code> either.</span>
