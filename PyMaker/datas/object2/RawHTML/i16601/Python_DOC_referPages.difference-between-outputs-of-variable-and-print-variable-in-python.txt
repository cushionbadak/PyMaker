<div class="post-text" itemprop="text">
<p>I am following Exercise 40 from the book "Learn Python the Hard Way." I just noticed the following:</p>
<pre><code>In [15]: stuff
Out[15]: 
{1: 'Wow',
 2: 'Neato',
 'age': 36,
 'city': 'San Francisco',
 'height': 74,
 'name': 'Zed'}

In [16]:  print stuff
{'city': 'San Francisco', 2: 'Neato', 'name': 'Zed', 1: 'Wow', 'age': 36, 'height': 74}
</code></pre>
<p>Why is there a difference in the order of the items of the dictionary in the two outputs?</p>
</div>
<div class="post-text" itemprop="text">
<p>The order of elements in a dictionary is unreliable, unless you use something like <code>OrderedDict</code>. They get shifted around for performance reasons, etc. Python makes no guarantee that the elements come out in any particular order, so you should never rely on it.</p>
<p>Here, there are separate code paths involved -- <code>__repr__</code> vs <code>__str__</code> -- so I'd guess that one of those is looking at the dictionary differently, in some way. But the short version is that, essentially, the ordering of elements in a dictionary is unreliable and you should treat it as such.</p>
<p>EDIT: In fact, as discussed in the comments below this answer, <a href="https://stackoverflow.com/questions/14956313/dictionary-ordering-non-deterministic-in-python3">recent versions of Python effectively randomize the order</a> on a run-to-run basis. The implementation relies on the output of the <code>hash</code> function, which, for security reasons, is <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">seeded with a random value</a>.</p>
</div>
<span class="comment-copy">If you're interested in dictionary internals, you should watch <a href="http://pyvideo.org/video/276/the-mighty-dictionary-55" rel="nofollow noreferrer">the Mighty Dictionary</a>.</span>
<span class="comment-copy">The order is both deterministic (per implementation) and well-defined, it's just not guaranteed.</span>
<span class="comment-copy">@jonrsharpe I've edited to reflect that, I wasn't aware that the implementation gave some guarantees of determinism. Tell me if you think it can be improved.</span>
<span class="comment-copy"><code>__repr__</code> isn't actually what's used here. It would be used in the ordinary Python interactive interpreter, but the OP appears to be using IPython, which uses some sort of pretty-printing system (possibly <code>pprint.pprint</code>, I don't know).</span>
<span class="comment-copy">@jonrsharpe: It's not deterministic. It's guaranteed not to change between modifications to the dict, but it is permitted to be random. With <a href="http://legacy.python.org/dev/peps/pep-0456/" rel="nofollow noreferrer">SipHash</a> or the old hash randomization, there actually is a random component to the dict order.</span>
<span class="comment-copy">@user2357112 <a href="http://stackoverflow.com/questions/12242540/ipython-representation-of-classes">Apparently</a> it uses <code>_repr_pretty_</code>, although I'm tempted to say that that's probably beyond the scope of the OP's question. Two different code paths are involved, which provides a good reason to get two different results from successive calls. I don't know much about dictionary internals -- in my head I treat them as being completely random -- so I'm happy to make whatever edit clarifies this best for the OP.</span>
