<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/41369408/how-to-change-a-variable-after-it-is-already-defined">How to change a variable after it is already defined?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/423379/using-global-variables-in-a-function">Using global variables in a function</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>What am I doing wrong here?</p>
<pre><code>counter = 0

def increment():
  counter += 1

increment()
</code></pre>
<p>The above code throws an <code>UnboundLocalError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have variable declarations, so it has to figure out the <a href="http://docs.python.org/3.3/tutorial/classes.html#python-scopes-and-namespaces">scope</a> of variables itself.  It does so by a simple rule:  If there is an assignment to a variable inside a function, that variable is considered local.<sup><a href="http://docs.python.org/3.3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python">[1]</a></sup>  Thus, the line</p>
<pre><code>counter += 1
</code></pre>
<p>implicitly makes <code>counter</code> local to <code>increment()</code>.  Trying to execute this line, though, will try to read the value of the local variable <code>counter</code> before it is assigned, resulting in an <a href="http://docs.python.org/3.3/library/exceptions.html#UnboundLocalError"><code>UnboundLocalError</code></a>.<sup><a href="http://docs.python.org/3.3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value">[2]</a></sup></p>
<p>If <code>counter</code> is a global variable, the <a href="http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement"><code>global</code></a> keyword will help.  If <code>increment()</code> is a local function and <code>counter</code> a local variable, you can use <a href="http://docs.python.org/3.3/reference/simple_stmts.html#the-nonlocal-statement"><code>nonlocal</code></a> in Python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use the <a href="http://docs.python.org/py3k/reference/simple_stmts.html#the-global-statement">global statement</a> so that you are modifying the global variable counter, instead of a local variable:</p>
<pre><code>counter = 0

def increment():
  global counter
  counter += 1

increment()
</code></pre>
<p>If the enclosing scope that <code>counter</code> is defined in is not the global scope, on Python 3.x you could use the <a href="http://docs.python.org/py3k/reference/simple_stmts.html#the-nonlocal-statement">nonlocal statement</a>.  In the same situation on Python 2.x you would have no way to reassign to the nonlocal name <code>counter</code>, so you would need to make <code>counter</code> mutable and modify it:</p>
<pre><code>counter = [0]

def increment():
  counter[0] += 1

increment()
print counter[0]  # prints '1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer the question in your subject line,* yes, there are closures in Python, except they only apply inside a function, and also (in Python 2.x) they are read-only; you can't re-bind the name to a different object (though if the object is mutable, you can modify its contents). In Python 3.x, you can use the <a href="https://docs.python.org/3/reference/simple_stmts.html?highlight=nonlocal#nonlocal" rel="noreferrer"><code>nonlocal</code></a> keyword to modify a closure variable.</p>
<pre><code>def incrementer():
    counter = 0
    def increment():
        nonlocal counter
        counter += 1
        return counter
    return increment

increment = incrementer()

increment()   # 1
increment()   # 2
</code></pre>
<p>* The original question's title asked about closures in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason of why your code throws an <code>UnboundLocalError</code> is already well explained in other answers.</p>
<p>But it seems to me that you're trying to build something that works like <a href="http://docs.python.org/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count()</code></a>. </p>
<p>So why don't you try it out, and see if it suits your case:</p>
<pre><code>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; counter = count(0)
&gt;&gt;&gt; counter
count(0)
&gt;&gt;&gt; next(counter)
0
&gt;&gt;&gt; counter
count(1)
&gt;&gt;&gt; next(counter)
1
&gt;&gt;&gt; counter
count(2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To modify a global variable inside a function, you must use the global keyword.</p>
<p>When you try to do this without the line</p>
<pre><code>global counter
</code></pre>
<p>inside of the definition of increment, a local variable named counter is created so as to keep you from mucking up the counter variable that the whole program may depend on.</p>
<p>Note that you only need to use global when you are modifying the variable; you could read counter from within increment without the need for the global statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has lexical scoping by default, which means that although an enclosed scope can access values in its enclosing scope, it cannot modify them (unless they're declared global with the <a href="http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement" rel="nofollow"><code>global</code></a> keyword).</p>
<p>A closure binds values in the <em>enclosing</em> environment to names in the <em>local</em> environment. The local environment can then use the bound value, and even reassign that name to something else, but it can't modify the binding in the enclosing environment.</p>
<p>In your case you are trying to treat <code>counter</code> as a local variable rather than a bound value. Note that this code, which binds the value of <code>x</code> assigned in the enclosing environment, works fine:</p>
<pre><code>&gt;&gt;&gt; x = 1

&gt;&gt;&gt; def f():
&gt;&gt;&gt;  return x

&gt;&gt;&gt; f()
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>counter = 0

def increment():
  global counter
  counter += 1

increment()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is not purely lexically scoped.</p>
<p>See this: <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them">Using global variables in a function other than the one that created them</a></p>
<p>and this: <a href="http://www.saltycrane.com/blog/2008/01/python-variable-scope-notes/" rel="nofollow noreferrer">http://www.saltycrane.com/blog/2008/01/python-variable-scope-notes/</a></p>
</div>
<span class="comment-copy">@ZeroPiraeus: why did you hammer a question with 40k+ views, which is the first result for "UnboundLocalError" in Google, as a duplicate of a nearly identical new question that you answered instead of simply posting your answer <i>here</i>?</span>
<span class="comment-copy">This question and the one it's currently marked duplicate of are under discussion in the <a href="http://chat.stackoverflow.com/transcript/message/34899645#34899645">Python chatroom</a>.</span>
<span class="comment-copy">Many of the answers here say to use <code>global</code>, and although that works, using modifiable globals is generally <i>not</i> recommend when other options exist.</span>
<span class="comment-copy">@ZeroPiraeus A question asked in 2012 can't be a duplicate of a question asked in 2016 ... rather the newer one is the duplicate.</span>
<span class="comment-copy">@dsh <a href="http://meta.stackexchange.com/a/147651">That's not true</a>.</span>
<span class="comment-copy">python 3 docs has a <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow noreferrer">faq page on why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value</a> via <a href="http://stackoverflow.com/questions/21456739/unboundlocalerror-local-variable-l-referenced-before-assignment-python">unboundlocalerror-local-variable-l-referenced-before-assignment-python</a></span>
<span class="comment-copy">A note that caught me out, I had a variable declared at the top of the file that I can read inside a function without issue, however to write to a variable that I have declared at the top of the file, I had to use global.</span>
<span class="comment-copy">A more in-depth explanation: <a href="https://docs.python.org/3.3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">docs.python.org/3.3/reference/â€¦</a>. Not only can assignments bind names, so can imports, so you may also get <code>UnboundLocalError</code> from a statement that uses an unbounded imported name. Example: <code>def foo(): bar = deepcopy({'a':1}); from copy import deepcopy; return bar</code>, then <code>from copy import deepcopy; foo()</code>. The call  succeeds if the local import <code>from copy import deepcopy</code> is removed.</span>
<span class="comment-copy">While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - <a href="/review/low-quality-posts/19036082">From Review</a></span>
<span class="comment-copy">@munk Cool, you realise that this is a link to another answer on SO?</span>
