<div class="post-text" itemprop="text">
<p>I need a rolling window (aka sliding window) iterable over a sequence/iterator/generator.  Default Python iteration can be considered a special case, where the window length is 1.  I'm currently using the following code.  Does anyone have a more Pythonic, less verbose, or more efficient method for doing this?</p>
<pre><code>def rolling_window(seq, window_size):
    it = iter(seq)
    win = [it.next() for cnt in xrange(window_size)] # First window
    yield win
    for e in it: # Subsequent windows
        win[:-1] = win[1:]
        win[-1] = e
        yield win

if __name__=="__main__":
    for w in rolling_window(xrange(6), 3):
        print w

"""Example output:

   [0, 1, 2]
   [1, 2, 3]
   [2, 3, 4]
   [3, 4, 5]
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's one in an old version of the Python docs with <a href="http://docs.python.org/release/2.3.5/lib/itertools-example.html" rel="noreferrer"><code>itertools</code> examples</a>:</p>
<pre><code>from itertools import islice

def window(seq, n=2):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result
    for elem in it:
        result = result[1:] + (elem,)
        yield result
</code></pre>
<p>The one from the docs is a little more succinct and uses <code>itertools</code> to greater effect I imagine.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems tailor-made for a <code>collections.deque</code> since you essentially have a FIFO (add to one end, remove from the other). However, even if you use a <code>list</code> you shouldn't be slicing twice; instead, you should probably just <code>pop(0)</code> from the list and <code>append()</code> the new item.</p>
<p>Here is an optimized deque-based implementation patterned after your original:</p>
<pre><code>from collections import deque

def window(seq, n=2):
    it = iter(seq)
    win = deque((next(it, None) for _ in xrange(n)), maxlen=n)
    yield win
    append = win.append
    for e in it:
        append(e)
        yield win
</code></pre>
<p>In my tests it handily beats everything else posted here most of the time, though pillmuncher's <code>tee</code> version beats it for large iterables and small windows. On larger windows, the <code>deque</code> pulls ahead again in raw speed.</p>
<p>Access to individual items in the <code>deque</code> may be faster or slower than with lists or tuples. (Items near the beginning are faster, or items near the end if you use a negative index.) I put a <code>sum(w)</code> in the body of my loop; this plays to the deque's strength (iterating from one item to the next is fast, so this loop ran a a full 20% faster than the next fastest method, pillmuncher's).  When I changed it to individually look up and add items in a window of ten, the tables turned and the <code>tee</code> method was 20% faster. I was able to recover some speed by using negative indexes for the last five terms in the addition, but <code>tee</code> was still a little faster. Overall I would estimate that either one is plenty fast for most uses and if you need a little more performance, profile and pick the one that works best.</p>
</div>
<div class="post-text" itemprop="text">
<p>I like <code>tee()</code>:</p>
<pre><code>from itertools import tee, izip

def window(iterable, size):
    iters = tee(iterable, size)
    for i in xrange(1, size):
        for each in iters[i:]:
            next(each, None)
    return izip(*iters)

for each in window(xrange(6), 3):
    print list(each)
</code></pre>
<p>gives:</p>
<pre><code>[0, 1, 2]
[1, 2, 3]
[2, 3, 4]
[3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a generalization that adds support for <code>step</code>, <code>fillvalue</code> parameters:</p>
<pre><code>from collections import deque
from itertools import islice

def sliding_window(iterable, size=2, step=1, fillvalue=None):
    if size &lt; 0 or step &lt; 1:
        raise ValueError
    it = iter(iterable)
    q = deque(islice(it, size), maxlen=size)
    if not q:
        return  # empty iterable or size == 0
    q.extend(fillvalue for _ in range(size - len(q)))  # pad to size
    while True:
        yield iter(q)  # iter() to avoid accidental outside modifications
        try:
            q.append(next(it))
        except StopIteration: # Python 3.5 pep 479 support
            return
        q.extend(next(it, fillvalue) for _ in range(step - 1))
</code></pre>
<p>It yields in chunks <code>size</code> items at a time rolling <code>step</code> positions per iteration padding each chunk with <code>fillvalue</code> if necessary. Example for <code>size=4, step=3, fillvalue='*'</code>:</p>
<pre><code> [a b c d]e f g h i j k l m n o p q r s t u v w x y z
  a b c[d e f g]h i j k l m n o p q r s t u v w x y z
  a b c d e f[g h i j]k l m n o p q r s t u v w x y z
  a b c d e f g h i[j k l m]n o p q r s t u v w x y z
  a b c d e f g h i j k l[m n o p]q r s t u v w x y z
  a b c d e f g h i j k l m n o[p q r s]t u v w x y z
  a b c d e f g h i j k l m n o p q r[s t u v]w x y z
  a b c d e f g h i j k l m n o p q r s t u[v w x y]z
  a b c d e f g h i j k l m n o p q r s t u v w x[y z * *]
</code></pre>
<p>For an example of use case for the <code>step</code> parameter, see <a href="https://stackoverflow.com/q/13401601/4279">Processing a large .txt file in python efficiently</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just a quick contribution.</p>
<p>Since the current python docs don't have "window" in the itertool examples  (i.e., at the bottom of <a href="http://docs.python.org/library/itertools.html" rel="noreferrer">http://docs.python.org/library/itertools.html</a>), here's an snippet based on the 
code for grouper which is one of the examples given:</p>
<pre><code>import itertools as it
def window(iterable, size):
    shiftedStarts = [it.islice(iterable, s, None) for s in xrange(size)]
    return it.izip(*shiftedStarts)
</code></pre>
<p>Basically, we create a series of sliced iterators, each with a starting point one spot further forward.  Then, we zip these together.  Note, this function returns a generator (it is not directly a generator itself).</p>
<p>Much like the appending-element and advancing-iterator versions above, the performance (i.e., which is best) varies with list size and window size.  I like this one because it is a two-liner (it could be a one-liner, but I prefer naming concepts).</p>
<p>It turns out that the above code is <em>wrong</em>.  It works if the parameter passed to <em>iterable</em> is a sequence but not if it is an iterator.  If it is an iterator, the same iterator is shared (but not tee'd) among the islice calls and this breaks things badly.  </p>
<p>Here is some fixed code:</p>
<pre><code>import itertools as it
def window(iterable, size):
    itrs = it.tee(iterable, size)
    shiftedStarts = [it.islice(anItr, s, None) for s, anItr in enumerate(itrs)]
    return it.izip(*shiftedStarts)
</code></pre>
<p>Also, one more version for the books.  Instead of copying an iterator and then advancing copies many times, this version makes pairwise copies of each iterator as we move the starting position forward.  Thus, iterator t provides both the "complete" iterator with starting point at t and also the basis for creating iterator t + 1:</p>
<pre><code>import itertools as it
def window4(iterable, size):
    complete_itr, incomplete_itr = it.tee(iterable, 2)
    iters = [complete_itr]
    for i in xrange(1, size):
        incomplete_itr.next()
        complete_itr, incomplete_itr = it.tee(incomplete_itr, 2)
        iters.append(complete_itr)
    return it.izip(*iters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to show how you can combine <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipes</a>, I'm extending the <code>pairwise</code> recipe as directly as possible back into the <code>window</code> recipe using the <code>consume</code> recipe:</p>
<pre><code>def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)

def window(iterable, n=2):
    "s -&gt; (s0, ...,s(n-1)), (s1, ...,sn), (s2, ..., s(n+1)), ..."
    iters = tee(iterable, n)
    # Could use enumerate(islice(iters, 1, None), 1) to avoid consume(it, 0), but that's
    # slower for larger window sizes, while saving only small fixed "noop" cost
    for i, it in enumerate(iters):
        consume(it, i)
    return zip(*iters)
</code></pre>
<p>The <code>window</code> recipe is the same as for <code>pairwise</code>, it just replaces the single element "consume" on the second <code>tee</code>-ed iterator with progressively increasing consumes on <code>n - 1</code> iterators. Using <code>consume</code> instead of wrapping each iterator in <code>islice</code> is marginally faster (for sufficiently large iterables) since you only pay the <code>islice</code> wrapping overhead during the <code>consume</code> phase, not during the process of extracting each window-ed value (so it's bounded by <code>n</code>, not the number of items in <code>iterable</code>).</p>
<p>Performance-wise, compared to some other solutions, this is pretty good (and better than any of the other solutions I tested as it scales). Tested on Python 3.5.0, Linux x86-64, using <code>ipython</code> <code>%timeit</code> magic.</p>
<p><a href="https://stackoverflow.com/a/6822761/364696">kindall's the <code>deque</code> solution</a>, tweaked for performance/correctness by using <code>islice</code> instead of a home-rolled generator expression and testing the resulting length so it doesn't yield results when the iterable is shorter than the window, as well as passing the <code>maxlen</code> of the <code>deque</code> positionally instead of by keyword (makes a surprising difference for smaller inputs):</p>
<pre><code>&gt;&gt;&gt; %timeit -r5 deque(windowkindall(range(10), 3), 0)
100000 loops, best of 5: 1.87 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowkindall(range(1000), 3), 0)
10000 loops, best of 5: 72.6 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowkindall(range(1000), 30), 0)
1000 loops, best of 5: 71.6 μs per loop
</code></pre>
<p>Same as previous adapted kindall solution, but with each <code>yield win</code> changed to <code>yield tuple(win)</code> so storing results from the generator works without all stored results really being a view of the most recent result (all other reasonable solutions are safe in this scenario), and adding <code>tuple=tuple</code> to the function definition to move use of <code>tuple</code> from the <code>B</code> in <code>LEGB</code> to the <code>L</code>:</p>
<pre><code>&gt;&gt;&gt; %timeit -r5 deque(windowkindalltupled(range(10), 3), 0)
100000 loops, best of 5: 3.05 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowkindalltupled(range(1000), 3), 0)
10000 loops, best of 5: 207 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowkindalltupled(range(1000), 30), 0)
1000 loops, best of 5: 348 μs per loop
</code></pre>
<p><code>consume</code>-based solution shown above:</p>
<pre><code>&gt;&gt;&gt; %timeit -r5 deque(windowconsume(range(10), 3), 0)
100000 loops, best of 5: 3.92 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowconsume(range(1000), 3), 0)
10000 loops, best of 5: 42.8 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowconsume(range(1000), 30), 0)
1000 loops, best of 5: 232 μs per loop
</code></pre>
<p>Same as <code>consume</code>, but inlining <code>else</code> case of <code>consume</code> to avoid function call and <code>n is None</code> test to reduce runtime, particularly for small inputs where the setup overhead is a meaningful part of the work:</p>
<pre><code>&gt;&gt;&gt; %timeit -r5 deque(windowinlineconsume(range(10), 3), 0)
100000 loops, best of 5: 3.57 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowinlineconsume(range(1000), 3), 0)
10000 loops, best of 5: 40.9 μs per loop
&gt;&gt;&gt; %timeit -r5 deque(windowinlineconsume(range(1000), 30), 0)
1000 loops, best of 5: 211 μs per loop
</code></pre>
<p>(Side-note: A variant on <code>pairwise</code> that uses <code>tee</code> with the default argument of 2 repeatedly to make nested <code>tee</code> objects, so any given iterator is only advanced once, not independently consumed an increasing number of times, similar to <a href="https://stackoverflow.com/a/11249883/364696">MrDrFenner's answer</a> is similar to non-inlined <code>consume</code> and slower than the inlined <code>consume</code> on all tests, so I've omitted it those results for brevity).</p>
<p>As you can see, <strong>if you don't care about the possibility of the caller needing to store results, my optimized version of kindall's solution wins most of the time, except in the "large iterable, small window size case"</strong> (where inlined <code>consume</code> wins); it degrades quickly as the iterable size increases, while not degrading at all as the window size increases (every other solution degrades more slowly for iterable size increases, but also degrades for window size increases). It can even be adapted for the "need tuples" case by wrapping in <code>map(tuple, ...)</code>, which runs ever so slightly slower than putting the tupling in the function, but it's trivial (takes 1-5% longer) and lets you keep the flexibility of running faster when you can tolerate repeatedly returning the same value.</p>
<p><strong>If you need safety against returns being stored, inlined <code>consume</code> wins on all but the smallest input sizes</strong> (with non-inlined <code>consume</code> being slightly slower but scaling similarly). The <code>deque</code> &amp; tupling based solution wins only for the smallest inputs, due to smaller setup costs, and the gain is small; it degrades badly as the iterable gets longer.</p>
<p>For the record, the adapted version of kindall's solution that <code>yield</code>s <code>tuple</code>s I used was:</p>
<pre><code>def windowkindalltupled(iterable, n=2, tuple=tuple):
    it = iter(iterable)
    win = deque(islice(it, n), n)
    if len(win) &lt; n:
        return
    append = win.append
    yield tuple(win)
    for e in it:
        append(e)
        yield tuple(win)
</code></pre>
<p>Drop the caching of <code>tuple</code> in the function definition line and the use of <code>tuple</code> in each <code>yield</code> to get the faster but less safe version.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use the following code as a simple sliding window that uses generators to drastically increase readability.  Its speed has so far been sufficient for use in bioinformatics sequence analysis in my experience.</p>
<p>I include it here because I didn't see this method used yet.  Again, I make no claims about its compared performance.</p>
<pre><code>def slidingWindow(sequence,winSize,step=1):
"""Returns a generator that will iterate through
the defined chunks of input sequence. Input sequence
must be sliceable."""

    # Verify the inputs
    if not ((type(winSize) == type(0)) and (type(step) == type(0))):
        raise Exception("**ERROR** type(winSize) and type(step) must be int.")
    if step &gt; winSize:
        raise Exception("**ERROR** step must not be larger than winSize.")
    if winSize &gt; len(sequence):
        raise Exception("**ERROR** winSize must not be larger than sequence length.")

    # Pre-compute number of chunks to emit
    numOfChunks = ((len(sequence)-winSize)/step)+1

    # Do the work
    for i in range(0,numOfChunks*step,step):
        yield sequence[i:i+winSize]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>a slightly modified version of the deque window, to make it a true rolling window. So that it starts being populated with just one element, then grows to it's maximum window size, and then shrinks as it's left edge comes near the end:</p>
<pre><code>from collections import deque
def window(seq, n=2):
    it = iter(seq)
    win = deque((next(it, None) for _ in xrange(1)), maxlen=n)
    yield win
    append = win.append
    for e in it:
        append(e)
        yield win
    for _ in xrange(len(win)-1):
        win.popleft()
        yield win

for wnd in window(range(5), n=3):
    print(list(wnd))
</code></pre>
<p>this gives</p>
<pre><code>[0]
[0, 1]
[0, 1, 2]
[1, 2, 3]
[2, 3, 4]
[3, 4]
[4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def GetShiftingWindows(thelist, size):
    return [ thelist[x:x+size] for x in range( len(thelist) - size + 1 ) ]

&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt; GetShiftingWindows(a, 3)
[ [1, 2, 3], [2, 3, 4], [3, 4, 5] ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a library which does exactly what you need:</p>
<pre><code>import more_itertools
list(more_itertools.windowed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],n=3, step=3))

Out: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Multiple iterators!</h1>
<pre><code>def window(seq, size, step=1):
    # initialize iterators
    iters = [iter(seq) for i in range(size)]
    # stagger iterators (without yielding)
    [next(iters[i]) for j in range(size) for i in range(-1, -j-1, -1)]
    while(True):
        yield [next(i) for i in iters]
        # next line does nothing for step = 1 (skips iterations for step &gt; 1)
        [next(i) for i in iters for j in range(step-1)]
</code></pre>
<p><code>next(it)</code> raises <code>StopIteration</code> when the sequence is finished, and for some cool reason that's beyond me, the yield statement here excepts it and the function returns, ignoring the leftover values that don't form a full window.</p>
<p>Anyway, this is the least-lines solution yet whose only requirement is that <code>seq</code> implement either <code>__iter__</code> or <code>__getitem__</code> and doesn't rely on <code>itertools</code> or <code>collections</code> besides @dansalmo's solution :)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def rolling_window(list, degree):
    for i in range(len(list)-degree+1):
        yield [list[i+o] for o in range(degree)]
</code></pre>
<p>Made this for a rolling average function</p>
</div>
<div class="post-text" itemprop="text">
<p>why not</p>
<pre><code>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)
</code></pre>
<p>It is documented in Python <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">doc</a> .
You can easily extend it to wider window. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#Importing the numpy library
import numpy as np
arr = np.arange(6) #Sequence
window_size = 3
np.lib.stride_tricks.as_strided(arr, shape= (len(arr) - window_size +1, window_size), 
strides = arr.strides*2)

"""Example output:

  [0, 1, 2]
  [1, 2, 3]
  [2, 3, 4]
  [3, 4, 5]
</code></pre>
<p>"""</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's make it lazy!</p>
<pre><code>from itertools import islice, tee

def window(iterable, size): 
    iterators = tee(iterable, size) 
    iterators = [islice(iterator, i, None) for i, iterator in enumerate(iterators)]  
    yield from zip(*iterators)

list(window(range(5), 3))
# [(0, 1, 2), (1, 2, 3), (2, 3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; n, m = 6, 3
&gt;&gt;&gt; k = n - m+1
&gt;&gt;&gt; print ('{}\n'*(k)).format(*[range(i, i+m) for i in xrange(k)])
[0, 1, 2]
[1, 2, 3]
[2, 3, 4]
[3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using the following:</p>
<pre><code>mylist = [1, 2, 3, 4, 5, 6, 7]

def sliding_window(l, window_size=2):
    if window_size &gt; len(l):
        raise ValueError("Window size must be smaller or equal to the number of elements in the list.")

    t = []
    for i in xrange(0, window_size):
        t.append(l[i:])

    return zip(*t)

print sliding_window(mylist, 3)
</code></pre>
<p>Output:</p>
<pre><code>[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an old question but for those still interested there is a great implementation of a window slider using generators in <a href="http://www.pyimagesearch.com/2015/03/23/sliding-windows-for-object-detection-with-python-and-opencv/" rel="nofollow noreferrer">this</a> page (by Adrian Rosebrock). </p>
<p>It is an implementation for OpenCV however you can easily use it for any other purpose. For the eager ones i'll paste the code here but to understand it better I recommend visiting the original page. </p>
<pre><code>def sliding_window(image, stepSize, windowSize):
    # slide a window across the image
    for y in xrange(0, image.shape[0], stepSize):
        for x in xrange(0, image.shape[1], stepSize):
            # yield the current window
            yield (x, y, image[y:y + windowSize[1], x:x + windowSize[0]])
</code></pre>
<p><strong>Tip:</strong> You can check the <code>.shape</code> of the window when iterating the generator to discard those that do not meet your requirements</p>
<p>Cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>Modified <a href="https://stackoverflow.com/a/6822773/8083313">DiPaolo's answer</a> to allow arbitrary fill and variable step size</p>
<pre><code>import itertools
def window(seq, n=2,step=1,fill=None,keep=0):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(itertools.islice(it, n))    
    if len(result) == n:
        yield result
    while True:        
#         for elem in it:        
        elem = tuple( next(it, fill) for _ in range(step))
        result = result[step:] + elem        
        if elem[-1] is fill:
            if keep:
                yield result
            break
        yield result
</code></pre>
</div>
<span class="comment-copy">If you're looking to perform some kind of operation on each window as you iterate (e.g.  <code>sum()</code> or <code>max()</code>) it is worth bearing in mind that there are efficient algorithms to compute the new value for each window in <i>constant</i> time (irrespective of window size). I have collected some of these algorithms together in a Python library: <a href="https://github.com/ajcr/rolling" rel="nofollow noreferrer">rolling</a>.</span>
<span class="comment-copy">Nice answer, but (and I know you're just reproducing the recipe as linked), I wonder why the default window size should be 2?  Should it have a default at all?</span>
<span class="comment-copy">@TakenMacGuy: I dunno what the author of that recipe's reasoning is, but I'd also choose 2. 2 is the smallest useful window size (otherwise you're just iterating and don't need the window), and it is also common to need to know the previous (or next) item, arguably more so than any other specific n.</span>
<span class="comment-copy">Does anyone know why this example was removed from the docs?  Was there something wrong with it, or there is an easier alternative now?</span>
<span class="comment-copy">got curious about the example removal and found <a href="https://github.com/python/cpython/commit/83d953dc955ef9e948812fefb3f489728f219470#diff-7e59aecf5eb9159dee8fe29ba5d8683f" rel="nofollow noreferrer">rhettinger committed on Oct 26, 2003: Replace the window() example with pairwise() which demonstrates tee().</a></span>
<span class="comment-copy">When would one enter the <code>for elem in it</code> loop?</span>
<span class="comment-copy"><code>yield win</code> should be <code>yield tuple(win)</code> or <code>yield list(win)</code> to prevent returning an iterator of references to the same <code>deque</code> object.</span>
<span class="comment-copy">I submitted this <a href="https://pypi.python.org/pypi/sliding_window" rel="nofollow noreferrer">to PyPI</a>.  Install with <code>pip install sliding_window</code>, and run with <code>from sliding_window import window</code>.</span>
<span class="comment-copy">You're in for a shock if you think <code>list(window(range(10)))</code> should produce something like [[0,1],[1,2],[2,3],...]</span>
<span class="comment-copy">It obviously won't; you'd need to do something like <code>list(list(x) for x in window(range(10)))</code> or else add that to the iterator. For some applications this will matter, for others not, and since I was going for speed I elected <i>not</i> and put the onus on the caller to copy the window if needed.</span>
<span class="comment-copy">If you add back the needed <code>tuple()</code> before yield, this method does not have any advantage over the others.</span>
<span class="comment-copy">From my quick <code>timeit</code> tests, this is much slower than Daniel DePaolo's (by about a 2:1 ratio) and doesn't feel much "nicer".</span>
<span class="comment-copy">@David B.: On my box it's only about 8% slower than Daniel DePaolo's.</span>
<span class="comment-copy">@pillmuncher: Python 2.7 or 3.x?  I was using 2.7.  The ratio is also fairly sensitive to the value of <code>size</code>. If you increase it (e.g., if the iterable is 100000 elements long, make the window size 1000), you may see an increase.</span>
<span class="comment-copy">@David B.: What you say makes sense. In my code the setup time for <code>iters</code> is O(size!), and calling <code>next()</code> many times (in <code>izip()</code>) is probably a lot more time consuming than copying a tuple twice. I was using Python 2.6.5, BTW.</span>
<span class="comment-copy">@pillmuncher: You mean, setup time for <code>iters</code>is O(size^2), right?</span>
<span class="comment-copy">Obviously, this is less efficient than it could be; <code>consume</code> is general purpose (including the ability to do a complete <code>consume</code>) and thus needs an extra import and a per-use test for <code>n is None</code>. In real code, if and only if I'd determined performance was a problem, or I really needed more concise code, I'd consider inlining the <code>else</code> case of <code>consume</code> into <code>window</code>, assuming I wasn't using <code>consume</code> for anything else. But if performance hasn't been shown to be an issue, I'd keep the separate definitions; the named <code>consume</code> function makes the operation less magical/self-documenting.</span>
<span class="comment-copy">The main drawback here is the <code>len(sequence)</code> call.  This won't work if <code>sequence</code> is an iterator or generator.  When the input does fit in memory, this does offer a more readable solution than with iterators.</span>
<span class="comment-copy">Yes, you're right.  This particular case was originally meant for scanning DNA sequences which are usually represented as strings.  It certainly DOES have the limitation you mention.  If you wanted you could simply test each slice to make sure its still the right length and then forget about having to know the length of the whole sequence.  But it would add a bit more overhead (a len() test every iteration).</span>
<span class="comment-copy">Please edit with more information. Code-only and "try this" answers are discouraged, because they contain no searchable content, and don't explain why someone should "try this".</span>
<span class="comment-copy">The instant you see "range(len" in Python it's a code smell.</span>
<span class="comment-copy">@MarkLawrence What makes you think <code>range(len</code> is a bad pattern in python?</span>
<span class="comment-copy">@MarkLawrence duhaime asked a valid clarification question, no need to insult before giving your answer</span>
<span class="comment-copy">note: the stagger step is O(n^2) where n is the size of the window, and only happens on the first call. It could be optimized down to O(n), but it would make the code a little messier :P</span>
<span class="comment-copy">Please write some text about your answer.</span>
<span class="comment-copy">@ keocra what does zip(*t) mean? Where can I find some documentation on that kind of statement?</span>
<span class="comment-copy">Python 2.7: <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#zip</a>, the star unpacks the list and provide the individual elements as input to zip (<a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacking arguments</a>)</span>
<span class="comment-copy">Thanks. I was looking more for the function of the "*" but this lead me to the right place.</span>
