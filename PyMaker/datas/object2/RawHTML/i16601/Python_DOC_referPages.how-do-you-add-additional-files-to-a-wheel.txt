<div class="post-text" itemprop="text">
<p>How do control what files are included in a wheel?  It appears <code>MANIFEST.in</code> isn't used by <code>python setup.py bdist_wheel</code>.</p>
<p><strong>UPDATE</strong>:</p>
<p>I was wrong about the difference between installing from a source tarball vs a wheel.  The source distribution includes files specified in <code>MANIFEST.in</code>, but the installed package only has python files.  Steps are needed to identify additional files that should be installed, whether the install is via source distribution, egg, or wheel.  Namely, <a href="https://docs.python.org/2/distutils/setupscript.html#installing-package-data">package_data</a> is needed for additional package files, and <a href="https://docs.python.org/2/distutils/setupscript.html#installing-additional-files">data_files</a> for files outside your package like command line scripts or system config files.</p>
<h2>Original Question</h2>
<p>I have <a href="https://github.com/tulsawebdevs/django-multi-gtfs">a project</a> where I've been using <code>python setup.py sdist</code> to build my package, <code>MANIFEST.in</code> to control the files included and excluded, and <a href="https://pypi.python.org/pypi/pyroma">pyroma</a> and <a href="https://pypi.python.org/pypi/check-manifest">check-manifest</a> to confirm my settings.</p>
<p>I recently converted it to dual Python 2 / 3 code, and added a setup.cfg with</p>
<pre><code>[bdist_wheel]
universal = 1
</code></pre>
<p>I can build a wheel with <code>python setup.py bdist_wheel</code>, and it appears to be a universal wheel as desired.  However, it doesn't include all of the files specified in <code>MANIFEST.in</code>.  </p>
<h2>What gets installed?</h2>
<p>I dug deeper, and now know more about packaging and wheel.  Here's what I learned:</p>
<p>I upload two package files to the <a href="https://pypi.python.org/pypi/multigtfs/0.4.2">multigtfs project on PyPi</a>:</p>
<ul>
<li><code>multigtfs-0.4.2.tar.gz</code> - the source tar ball, which includes all the files in <code>MANIFEST.in</code>.</li>
<li><code>multigtfs-0.4.2-py2.py3-none-any.whl</code> - The binary distribution in question.</li>
</ul>
<p>I created two new virtual environments, both with Python 2.7.5, and installed each package (<code>pip install multigtfs-0.4.2.tar.gz</code>).  The two environments are almost identical.  They have different <code>.pyc</code> files, which are the "compiled" Python files.  There are log files which record the different paths on disk.  The install from the source tar ball includes a folder <code>multigtfs-0.4.2-py27.egg-info</code>, detailing the installation, and the wheel install has a <code>multigtfs-0.4.2.dist-info</code> folder, with the details of that process.  However, from the point of view of code using the multigtfs project, there is no difference between the two installation methods.</p>
<p>Explicitly, neither has the .zip files used by my test, so the test suite will fail:</p>
<pre><code>$ django-admin startproject demo
$ cd demo
$ pip install psycopg2  # DB driver for PostGIS project
$ createdb demo         # Create PostgreSQL database
$ psql -d demo -c "CREATE EXTENSION postgis" # Make it a PostGIS database 
$ vi demo/settings.py   # Add multigtfs to INSTALLED_APPS,
                        # Update DATABASE to set ENGINE to django.contrib.gis.db.backends.postgis
                        # Update DATABASE to set NAME to test
$ ./manage.py test multigtfs.tests  # Run the tests
...
IOError: [Errno 2] No such file or directory: u'/Users/john/.virtualenvs/test/lib/python2.7/site-packages/multigtfs/tests/fixtures/test3.zip'
</code></pre>
<h2>Specifying additional files</h2>
<p>Using the suggestions from the answers, I added some additional directives to <code>setup.py</code>:</p>
<pre><code>from __future__ import unicode_literals
# setup.py now requires some funky binary strings
...
setup(
    name='multigtfs',
    packages=find_packages(),
    package_data={b'multigtfs': ['test/fixtures/*.zip']},
    include_package_data=True,
    ...
)
</code></pre>
<p>This installs the zip files (as well as the README) to the folder, and tests now run correctly.  Thanks for the suggestions!</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using <code>package_data</code> in your <code>setup.py</code>? <code>MANIFEST.in</code> seems targetted for python versions &lt;= 2.6, I'm not sure if higher versions even look at it.</p>
<p>After exploring <a href="https://github.com/pypa/sampleproject">https://github.com/pypa/sampleproject</a>, their <code>MANIFEST.in</code> says:</p>
<pre><code># If using Python 2.6 or less, then have to include package data, even though
# it's already declared in setup.py
include sample/*.dat
</code></pre>
<p>which seems to imply this method is outdated. Meanwhile, in <code>setup.py</code> they declare:</p>
<pre><code>setup(
    name='sample',
    ...
    # If there are data files included in your packages that need to be
    # installed, specify them here.  If using Python 2.6 or less, then these
    # have to be included in MANIFEST.in as well.
    package_data={
        'sample': ['package_data.dat'],
    },
    ...
)
</code></pre>
<p>(I'm not sure why they chose a wildcard in <code>MANIFEST.in</code> and a filename in <code>setup.py</code>. They refer to the same file)</p>
<p>Which, along with being simpler, again seems to imply that the <code>package_data</code> route is superior to the <code>MANIFEST.in</code> method. Well, unless you have to support 2.6 that is, in which case my prayers go out to you.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Before you make any changes</strong> in <code>MANIFEST.in</code> or <code>setup.py</code> you must remove old output directories. Setuptools is caching some of the data and this can lead to unexpected results.</p>
<pre><code>rm -rf build *.egg-info
</code></pre>
<p><strong>If you don't do this, expect nothing to work correctly.</strong></p>
<p>Now that is out of the way.</p>
<ol>
<li><p>If you are building a <strong>source distribution</strong> (<code>sdist</code>) then you can use any method below.</p></li>
<li><p>If you are building a <strong>wheel</strong> (<code>bdist_wheel</code>), then <code>include_package_data</code> and <code>MANIFEST.in</code> are ignored and you must use <code>package_data</code> and <code>data_files</code>.</p></li>
</ol>
<h3>INCLUDE_PACKAGE_DATA</h3>
<p>This is a good option, but <code>bdist_wheel</code> does not honor it.</p>
<pre><code>setup(
    ...
    include_package_data=True
)

# MANIFEST.in
include package/data.json
</code></pre>
<h3>DATA_FILES for non-package data</h3>
<p>This is most flexible option because you can add any file from your repo to a <code>sdist</code> or <code>bdist_wheel</code></p>
<pre><code>setup(
    ....
    data_files=[
        ('output_dir',['conf/data.json']),
    ]
    # For sdist, output_dir is ignored!
    #
    # For bdist_wheel, data.json from conf dir in root of your repo 
    # and stored at `output_dir/` inside of the sdist package.
)
</code></pre>
<h3>PACKAGE_DATA for non-python files inside of the package</h3>
<p>Similar to above, but for a <code>bdist_wheel</code> let's you put your data files inside of the package. It is identical for <code>sdist</code> but has more limitations than <code>data_files</code> because files can only source from your package subdir.</p>
<pre><code>setup(
    ...
    package_data={'package':'data.json'},
    # data.json must be inside of your actual package
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can specify extra files to install using the <a href="https://docs.python.org/2/distutils/setupscript.html#installing-additional-files" rel="noreferrer">data_files</a> directive. Is that what you're looking for? Here's a small example:</p>
<pre><code>from setuptools import setup
from glob import glob

setup(
    name='extra',
    version='0.0.1',
    py_modules=['extra'],
    data_files=[
        ('images', glob('assets/*.png')),
    ],
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>package_data</code> and <code>data_files</code> in <code>setup.py</code> to specify additional files, but they are <a href="https://github.com/pypa/sampleproject/issues/30" rel="noreferrer">ridiculously hard to get right (and buggy)</a>.</p>
<p>An alternative is to use <code>MANIFEST.in</code> and add <code>include_package_data=True</code> in <code>setup()</code> of your <code>setup.py</code> as <a href="https://github.com/pypa/sampleproject/issues/30" rel="noreferrer">indicated here</a>.</p>
<p>With this directive, the <code>MANIFEST.in</code> will be used to specify the files to include not only in source tarball/zip, but also in wheel and win32 installer. This also works with any python version (i tested on a project from py2.6 to py3.6).</p>
</div>
<div class="post-text" itemprop="text">
<p>I had config/ directory with JSON files in it, which I needed to add to the wheel package. So, I've added these lines to <code>MANIFEST.in</code>:</p>
<pre><code>recursive-include config/ *.json
</code></pre>
<p>The following directive to <code>setup.py</code>:</p>
<pre class="lang-py prettyprint-override"><code>setup(
 ...
 include_package_data=True,
)
</code></pre>
<p>And nothing worked.
Until I've created an empty file called <code>__init__.py</code> inside <code>config/</code> directory.</p>
<p>(Python 3.6.7, wheel 3.6.7, setuptools 39.0.1)</p>
</div>
<div class="post-text" itemprop="text">
<p>"A wheel is a ZIP-format archive ..." (<a href="http://wheel.readthedocs.org/en/latest" rel="nofollow">http://wheel.readthedocs.org/en/latest</a>)</p>
<p>So, treat the .whl file just like a .zip file. Add a file with:</p>
<ul>
<li>Python <a href="https://docs.python.org/3/library/zipfile.html#zipfile-objects" rel="nofollow">ZipFile</a> object</li>
<li>any archive/zip file utility, like 7-zip, Winzip, Ark, file-roller, etc.</li>
</ul>
</div>
<span class="comment-copy">Which files are missing exactly?</span>
<span class="comment-copy">Any non-Python files, such as documentation or test fixtures.  My application include some .zip files used in tests, which some may argue aren't needed in a binary distribution.  Others may have non-Python files that are required at runtime.</span>
<span class="comment-copy">I find hard to understand your question. How is the setup.py supposed to include files in a wheel (The tag description is empty, so I don't know what do you refer to)?</span>
<span class="comment-copy">wheel is a built-package format for Python, and is often preferred over the .egg format if both are available.  To build a wheel, you run <code>python setup.py bdist_wheel</code>.  See the docs at <a href="http://wheel.readthedocs.org" rel="nofollow noreferrer">wheel.readthedocs.org</a> (which don't answer my question), and <a href="http://pythonwheels.com" rel="nofollow noreferrer">pythonwheels.com</a>.</span>
<span class="comment-copy">The magic combination is to specify the files using <code>MANIFEST.in</code>, then add <code>include_package_data=True</code> to setup.py.</span>
<span class="comment-copy">Thank you!  This got me on the right track.  I added details for my own solution to the question.</span>
<span class="comment-copy">Great answer, that's indeed the culprit. Here is also a <a href="http://blog.ionelmc.ro/2015/02/24/the-problem-with-packaging-in-python/" rel="nofollow noreferrer">nice article about this issue</a>.</span>
<span class="comment-copy">Can you add an example of using a <code>glob</code> pattern?  I'm guessing that for <code>data_files</code> this tuple would work: <code>('output_dir': ['conf/*.json'])</code></span>
<span class="comment-copy">@piRSquared globbing is not supported directly but you can use examples from other answers here: <code>glob('conf/*.json')</code></span>
<span class="comment-copy">data_files format is incorrect, should be <code>,</code> not <code>:</code> as in:  <code>data_files=[('my_data', ['data/data_file'])],</code> <a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#data-files" rel="nofollow noreferrer">Reference doc</a>  I would have edited but edits need to be 6 characters...</span>
<span class="comment-copy">@AndrewFraser .. fixed now.</span>
<span class="comment-copy">That looks very promising, but after 2 hours I was unable to get data_files or package_files working.  Do you know of any projects using these features that I could look to for working code?</span>
<span class="comment-copy">This should be the current accepted answer! Using <code>package_data=...</code> as in the other answer is fraught with peril (read the links, and the links behind the links)</span>
<span class="comment-copy">Yes, it's a zip file, but it includes a lot of metadata, including sha256 hashes of data.  It would be very difficult to hack in the files as well as the metadata.  <code>package_files</code> or <code>data_files</code> works with the system.</span>
<span class="comment-copy">I only mentioned it because I've done this exact thing, and it worked fine when I tried it. Maybe your scenario differs from the wheels I've created, which had no hashes of any data files, and no manipulation of metadata.</span>
