<div class="post-text" itemprop="text">
<p>I use the following simple code to parse some arguments; note that one of them is required. Unfortunately, when the user runs the script without providing the argument, the displayed usage/help text does not indicate that there is a non-optional argument, which I find very confusing. How can I get python to indicate that an argument is not optional?</p>
<p>Here is the code:</p>
<pre><code>import argparse
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Foo')
    parser.add_argument('-i','--input', help='Input file name', required=True)
    parser.add_argument('-o','--output', help='Output file name', default="stdout")
    args = parser.parse_args()
    print ("Input file: %s" % args.input )
    print ("Output file: %s" % args.output )
</code></pre>
<p>When running above code without providing the required argument, I get the following output:</p>
<pre><code>usage: foo.py [-h] -i INPUT [-o OUTPUT]

Foo

optional arguments:
    -h, --help            show this help message and exit
    -i INPUT, --input INPUT
                          Input file name
    -o OUTPUT, --output OUTPUT
                          Output file name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Parameters starting with <code>-</code> or <code>--</code> are usually considered optional. All other parameters are positional parameters and as such required by design (like positional function arguments). It is possible to require optional arguments, but this is a bit against their design. Since they are still part of the non-positional arguments, they will still be listed under the confusing header “optional arguments” even if they are required. The missing square brackets in the usage part however show that they are indeed required.</p>
<p>See also the <a href="https://docs.python.org/3/library/argparse.html#required">documentation</a>:</p>
<blockquote>
<p>In general, the argparse module assumes that flags like -f and --bar indicate optional arguments, which can always be omitted at the command line.</p>
<p><strong>Note:</strong> Required options are generally considered bad form because users expect options to be optional, and thus they should be avoided when possible.</p>
</blockquote>
<p>That being said, the headers <em>“positional arguments”</em> and <em>“optional arguments”</em> in the help are generated by two argument groups in which the arguments are automatically separated into. Now, you could “hack into it” and change the name of the optional ones, but a far more elegant solution would be to create another group for “required named arguments” (or whatever you want to call them):</p>
<pre><code>parser = argparse.ArgumentParser(description='Foo')
parser.add_argument('-o', '--output', help='Output file name', default='stdout')
requiredNamed = parser.add_argument_group('required named arguments')
requiredNamed.add_argument('-i', '--input', help='Input file name', required=True)
parser.parse_args(['-h'])
</code></pre>
<pre><code>usage: [-h] [-o OUTPUT] -i INPUT

Foo

optional arguments:
  -h, --help            show this help message and exit
  -o OUTPUT, --output OUTPUT
                        Output file name

required named arguments:
  -i INPUT, --input INPUT
                        Input file name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since I prefer to list required arguments before optional, I hack around it via:</p>
<pre><code>    parser = argparse.ArgumentParser()
    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')
    required.add_argument('--required_arg')
    optional.add_argument('--optional_arg')
    return parser.parse_args()
</code></pre>
<p>and this outputs:</p>
<pre><code>usage: main.py [-h] [--required_arg REQUIRED_ARG]
               [--optional_arg OPTIONAL_ARG]

required arguments:
  --required_arg REQUIRED_ARG

optional arguments:
  --optional_arg OPTIONAL_ARG
</code></pre>
<p>I can live without 'help' showing up in the optional arguments group.</p>
</div>
<div class="post-text" itemprop="text">
<p>Building off of @Karl Rosaen</p>
<pre><code>parser = argparse.ArgumentParser()
optional = parser._action_groups.pop() # Edited this line
required = parser.add_argument_group('required arguments')
# remove this line: optional = parser...
required.add_argument('--required_arg')
optional.add_argument('--optional_arg')
parser._action_groups.append(optional) # added this line
return parser.parse_args()
</code></pre>
<p>and this outputs:</p>
<pre><code>usage: main.py [-h] [--required_arg REQUIRED_ARG]
           [--optional_arg OPTIONAL_ARG]

required arguments:
  --required_arg REQUIRED_ARG

optional arguments:
  -h, --help                    show this help message and exit
  --optional_arg OPTIONAL_ARG
</code></pre>
</div>
<span class="comment-copy">In the usage line, the <code>-i INPUT</code> part is not surrounded by square brackets, which subtlety indicates that is indeed, required. Also, you can manually explain that through the <code>help</code> param</span>
<span class="comment-copy">@JaimeRGP Yes, but that's not sufficient, of course, and it's also less than prominent. The assigned group name <code>optional arguments</code> for the required arguments is still misleading.</span>
<span class="comment-copy">Does this actually force argparse to treat any of the arguments as required?</span>
<span class="comment-copy">I think the 'required' argument still needs to be set when adding an argument.</span>
<span class="comment-copy">That's really nice.</span>
<span class="comment-copy">@Anthony - no you need the 'required=True' in add_argument for that. The above answer just illustrates argument grouping.</span>
<span class="comment-copy">BTW, are there any ways (methods) how to get access to <code>_action_group</code> without accessing protected member? In my case I need to add some argument to already existent (custom) group.</span>
<span class="comment-copy">This is great. Solves the --help item showing up in a second optional list.</span>
<span class="comment-copy">@machin: can you use the already existing group as a parent?</span>
