<div class="post-text" itemprop="text">
<p>I know we can search for a key in Python like this:</p>
<pre><code>if key in myDict:
    #Do something here
</code></pre>
<p>I know we can extend this and search for the key in multiple dictionaries using elif statement</p>
<pre><code>if key in myDict_1:
    #Do something here
elif key in myDict_2:
    #Do something here
</code></pre>
<p>or by doing</p>
<pre><code>if key in (myDict_1.keys() + myDict_2.keys()):
    #Do something here
</code></pre>
<p>But is there a more succinct way to search for key in Python in two different dicts without using if-else or adding the list of keys explicitly ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to your question as written is:</p>
<pre><code>if any(key in d for d in dicts):
    # do something
</code></pre>
<p>If you need to know which dictionary or dictionaries contain the key, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.compress" rel="nofollow"><code>itertools.compress()</code></a>:</p>
<pre><code>&gt;&gt;&gt; d1 = dict(zip("kapow", "squee"))
&gt;&gt;&gt; d2 = dict(zip("bar", "foo"))
&gt;&gt;&gt; d3 = dict(zip("xyz", "abc"))
&gt;&gt;&gt; dicts = d1, d2, d3

&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(dicts)
({'a': 'q', 'k': 's', 'o': 'e', 'p': 'u', 'w': 'e'},
{'a': 'o', 'b': 'f', 'r': 'o'},
{'x': 'a', 'y': 'b', 'z': 'c'})

&gt;&gt;&gt; from itertools import compress
&gt;&gt;&gt; for d_with_key in compress(dicts, ("a" in d for d in dicts)):
...     print(d_with_key)
... 
{'a': 'q', 'p': 'u', 'k': 's', 'w': 'e', 'o': 'e'}
{'a': 'o', 'r': 'o', 'b': 'f'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The correct way would be as Zero wrote:</p>
<pre><code>if any(key in d for d in dicts): # do something
</code></pre>
<p><strong>Fixing after reading comments below, thanks to @jwodder:</strong> </p>
<p>But you can also create a tuple of the keys of both (or more) dictionaries using the <code>itertools.chain</code> function.</p>
<pre><code>&gt;&gt;&gt; a = {1:2}
&gt;&gt;&gt; b = {3:4}
&gt;&gt;&gt; c = {5:6, 7:8}
&gt;&gt;&gt; print(tuple(itertools.chain(a, b, c)))
(1, 3, 5, 7)
</code></pre>
<p>so you also can :</p>
<pre><code>if x in tuple(itertools.chain(a, b, c)):
    # Do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A little list comprehension is also possible here; if you're simply trying to ascertain if a key is in a container of dicts, <code>any()</code> does exactly that; if you want to get the dict (or dicts) back and work with them, perhaps something like this would suffice:</p>
<pre><code>&gt;&gt;&gt; def get_dicts_with_key(some_key, *dicts):
...     return [d for d in dicts if some_key in d]

&gt;&gt;&gt; dict1 = {"hey":123}
&gt;&gt;&gt; dict2 = {"wait":456}
&gt;&gt;&gt; get_dicts_with_key('hey', dict1, dict2)
[{'hey': 123}]
&gt;&gt;&gt; get_dicts_with_key('wait', dict1, dict2)
[{'wait': 456}]
&gt;&gt;&gt; get_dicts_with_key('complaint', dict1, dict2)
[]
</code></pre>
<p>If the keys were present in either dict, both would be returned, as such:</p>
<pre><code>&gt;&gt;&gt; dict1['complaint'] = 777
&gt;&gt;&gt; dict2['complaint'] = 888
&gt;&gt;&gt; get_dicts_with_key('complaint', dict1, dict2)
[{'complaint': 777, 'hey': 123}, {'complaint': 888, 'wait': 456}]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you put your dicts in an iterable like a list and simple loop over then? You can express it as a function like so.</p>
<pre><code>def has_key(key, my_dicts):
    for my_dict in my_dicts:
        if key in my_dict:
            return True
    return False
</code></pre>
<p>It would be used like so.</p>
<pre><code>&gt;&gt;&gt; dict1 = {'a':1, 'b': 2}
&gt;&gt;&gt; dict2 = {'b':10, 'c': 11}
&gt;&gt;&gt; has_key('b', [dict1, dict2])
True
</code></pre>
</div>
<span class="comment-copy"><code>if any(key in d for d in dicts): # do something</code></span>
<span class="comment-copy">or for just two dicts you can keep it simple and do <code>if key in dict1 or key in dict2</code></span>
<span class="comment-copy">I guess not. You have to use <code>if, elif</code> also this will not help <code>if key in (myDict_1.keys() + myDict_2.keys())</code> because you don't know later from which dict keys the condition satisfied.</span>
<span class="comment-copy">You could also write your own helper method: <code>def in_any(x, *iterables): return any(x in i for i in iterables)</code>, then call it like <code>if in_any(key, dic1, dict2)</code></span>
<span class="comment-copy">@AamirAdnan in this particular case I don't need to know which dict() it is in. Zero's answer takes care of that as well.</span>
<span class="comment-copy"><code>print(list(zip(a,b,c))[0])</code> should produce a list, no?</span>
<span class="comment-copy">nop, look at the <code>[0]</code> at the end, just before the closing <code>)</code></span>
<span class="comment-copy">Ooh, sneaky.  Is this 3.x only?  When I run <code>list(zip({5:'a'},{6,'b'}))[0]</code> on 2.7 I get <code>(5, 'b')</code></span>
<span class="comment-copy">@wnnmaw: I believe that's because your second argument to <code>zip</code> is actually a <code>set</code>, not <code>dict</code>, since you used <code>,</code> instead of <code>:</code>.</span>
<span class="comment-copy">Consider changing <code>dict</code> to <code>d</code> in your list comprehension to avoid shadowing the <code>dict</code> type.</span>
<span class="comment-copy">good call, knew it looked wordy</span>
