<div class="post-text" itemprop="text">
<p>I am pretty new to Python (coming from a Java background) so was wondering if someone would have any advice on a data structure design question. I need to create a data structure with default values that would look something like this:</p>
<pre><code>[
(Name=”name1”,  {id=1, val1=”val1”} ),
(Name=”name2”,  {id=2, val1=”val2”} )
]
</code></pre>
<p>i.e a list of tuples where each tuple consists of one string value (Name) and a dictionary of values.</p>
<p>The first piece of functionality I need is to be able to add to or override the above data structure with additional details e.g:</p>
<pre><code>[
(Name=”name2”,  {id=2, val1=”new value”} )  ,
(Name=”name2”,  {id=3, val1=”another value”} )  ,
(Name=”name3”,  {id=3, val1=”val3”} )
]
</code></pre>
<p>Which would ultimately result in a final data structure that looks like this:</p>
<pre><code>[
(Name=”name1”,  {id=1, val1=”val1”} ),
(Name=”name2”,  {id=2, val1=”new value”} )  ,
(Name=”name2”,  {id=3, val1=”another value”} )  ,
(Name=”name3”,  {id=3, val1=”val3”} )
]
</code></pre>
<p>The second piece of functionality I need is to be able to access each tuple in the list according to the id value in the dictionary i.e </p>
<p>Get me tuple where name = “name2” and id=”3” .</p>
<p>Could anybody give me their opinions on how best this could be implemented in Python?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">namedtuple</a> is closest to what you wrote but as others have said, there may be better designs for what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try using dictionaries may be.</p>
<p>A dictionary is mutable and is another container type that can store any number of Python objects, including other container types. Dictionaries consist of pairs (called items) of keys and their corresponding values.</p>
<p>Python dictionaries are also known as associative arrays or hash tables. The general syntax of a dictionary is as follows:</p>
<pre><code>dict = {'Alice': '2341', 'Beth': '9102', 'Cecil': '3258'}
</code></pre>
<p>You can create dictionary in the following way as well:</p>
<pre><code>dict1 = { 'abc': 456 };
dict2 = { 'abc': 123, 98.6: 37 };
</code></pre>
<p>Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this: {}.</p>
<p>Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.</p>
<h1>Accessing Values in Dictionary:</h1>
<p>To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value. Following is a simple example:</p>
<pre><code>#!/usr/bin/python

dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'};

print "dict['Name']: ", dict['Name'];
print "dict['Age']: ", dict['Age'];
When the above code is executed, it produces the following result:

dict['Name']:  Zara
dict['Age']:  7
</code></pre>
<p>Source: <a href="http://www.tutorialspoint.com/python/python_dictionary.htm" rel="nofollow">http://www.tutorialspoint.com/python/python_dictionary.htm</a></p>
</div>
<span class="comment-copy">probably better to use a dictionary to start instead of list of tuples then it is mutable and quickly searchable</span>
<span class="comment-copy">what is the point of such design, where <code>Name</code> nor <code>id</code> value aren't unique?</span>
<span class="comment-copy">I was trying to use the data structure to encapsulate some database records that I need to define for unit tests. eg a Base unit test could define some data for tables that would be created and populated before the unit tests run. More specific unit tests could override the default values and add to them if required in order to test more specific functionality. In this case the 'Name' was the name of a SQL Alchemy mapping class while the dictionary (with id etc) was the data that would be created for that class/DB record. Hope that makes sense...</span>
