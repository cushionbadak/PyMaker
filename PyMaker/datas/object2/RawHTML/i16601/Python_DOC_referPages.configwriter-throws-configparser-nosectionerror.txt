<div class="post-text" itemprop="text">
<p>I want to write a Configwriter that writes data from a dictionary to a config file.</p>
<pre><code>jobstore = {
    'DEFAULT': [
        'foo',
        'bar'
    ],
    'DEFAULT2': [
        'foo',
        'bar'
    ]

}
with open('./config2.txt', 'w') as f:
    conf = ConfigParser()
    for job in jobstore.keys():
        conf.set(job, 'module', jobstore[job][0])
        conf.set(job, 'action', jobstore[job][1])
    conf.write(f)
</code></pre>
<p>If I try to execute this it throws </p>
<pre><code>  File "C:\Python34\lib\configparser.py", line 879, in set
    raise NoSectionError(section)
configparser.NoSectionError: No section: 'DEFAULT2'
</code></pre>
<p>However it works if the dictionary only has 1 entry. What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The constructor for configparser.ConfigParser from  <a href="https://docs.python.org/3/library/configparser.html#configparser-objects" rel="nofollow">https://docs.python.org/3/library/configparser.html#configparser-objects</a></p>
<pre><code>class configparser.ConfigParser(defaults=None, dict_type=collections.OrderedDict,
                                allow_no_value=False, delimiters=('=', ':'), 
                                comment_prefixes=('#', ';'), inline_comment_prefixes=None,
                                strict=True, empty_lines_in_values=True,
                                **default_section=configparser.DEFAULTSECT**, 
                                interpolation=BasicInterpolation())
</code></pre>
<p>It works with the "DEFAULT" key because t has a default_section parameter, which creates a default section called "DEFAULT".
It can be verifed as below</p>
<pre><code>&gt;&gt;&gt; import configparser
&gt;&gt;&gt; configparser.DEFAULTSECT
'DEFAULT'
</code></pre>
<p>So you have to manually create a new section called "DEFAULT2".</p>
<p>If you want to ensure that such an error should never be raised <strong>and</strong> you trust the data, you could do something like:</p>
<pre><code>for job in jobstore.keys():
    if not conf.has_section(job):
        conf.add_section(job)
    conf.set(job, 'module', jobstore[job][0])
    conf.set(job, 'action', jobstore[job][1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to create the section <code>DEFAULT2</code> before trying to add options to it. <code>DEFAULT</code> is automatically created when the <code>ConfigParser</code> object is initialized.</p>
<pre><code>for job, (module, action) in jobstore.items():
    if job != 'DEFAULT':
        conf.add_section(job)
    conf.set(job, 'module', module)
    conf.set(job, 'action', action)
</code></pre>
</div>
<span class="comment-copy">If I use this, I get: Traceback (most recent call last):   File "./test.py", line 20, in &lt;module&gt;     conf.add_section(job)   File "C:\Python34\lib\configparser.py", line 1174, in add_section     super().add_section(section)   File "C:\Python34\lib\configparser.py", line 631, in add_section     raise ValueError('Invalid section name: %r' % section) ValueError: Invalid section name: 'DEFAULT'</span>
<span class="comment-copy">Read <a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.add_section" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">but add_section shouldn't even get executed in this case.</span>
<span class="comment-copy">The solution was right there. Read the docs carefully. <a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.has_section" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
