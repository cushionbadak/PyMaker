<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s = 'Paris is the capital and most populous city of France'
&gt;&gt;&gt; re.search('(Pa.+?)\s', s).group()
'Paris '
&gt;&gt;&gt; re.findall('(Pa.+?)\s', s)
['Paris']
</code></pre>
<p>How come using the two ways to extract the matched string end up with two different results?</p>
<p>EDIT: the space after Paris is what I'm concerned with. Isn't the parenthesis suppose to exclude the space? Blender says there is group(0) and group(1). I tried to match on c- something like <code>r"(c.+?)\s"</code> and group(0) is 'capital ' and group(1) is 'capital', no group(2).</p>
</div>
<div class="post-text" itemprop="text">
<p>Capturing groups in regex match objects are numbered somewhat differently than most things in Python, using 1-based indexing. I think this is done in order to be compatible with the regex codes from other programming languages, where the <code>\1</code> has always been the syntax for a backreference to the first captured group.</p>
<p>The text matched by the capturing group can be accessed by <code>m.group(1)</code>, not <code>m.group(0)</code> like you might expect. If you use <code>m.group(0)</code> (or <code>m.group()</code> with no argument) you'll get the whole matched text, not the captured group. You can read more details <a href="https://docs.python.org/3/library/re.html#re.MatchObject.group" rel="nofollow">in the docs</a>.</p>
<p>Note that if you don't actually want to consume the space with your pattern, you might instead want to use the <code>\b</code> escape sequence instead, to match a zero-length word boundary.</p>
</div>
<span class="comment-copy">Because <code>.group()</code> is <code>.group(0)</code>, which is the entire match. If you want the first group, use <code>.group(1)</code>.</span>
<span class="comment-copy">Avoid using normal strings for regex. Use raw strings, to avoid double-escaping, or escape sequences producing unexpected results. For example: <code>r'(Pa.+?)\s'</code>, in your case.</span>
<span class="comment-copy">Hmm, I don't understand how "Paris" is a match for a regular expression that contains a non-optional white-space at the end.</span>
<span class="comment-copy">Alternatively, just match non space characters; i.e. <code>Pa\S+</code>. I think it's as simple as it can be, and is faster than <code>.+?</code> (of course, the difference in speed is negligible on small strings).</span>
<span class="comment-copy">@huggie: In Python, all unrecognized string literals are left untouched, so it does work <b>here and now</b>. The point is that you likely may not know all escape sequences, and should not induce from your code working now, that it'll work in the future. It's also much more clear that you are doing a regex metacharacter escape, than leave it ambiguous to the reader whether it's a string or regex escape.</span>
<span class="comment-copy">Thanks, for \b as well.</span>
