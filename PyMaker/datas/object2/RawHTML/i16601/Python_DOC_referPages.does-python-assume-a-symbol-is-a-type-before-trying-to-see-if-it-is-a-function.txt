<div class="post-text" itemprop="text">
<p>In Python the symbol <code>int</code> is used both as a type and a built-in function.  But when I use <code>int</code> in the REPL, or ask for its type, the REPL tells me it is a type.</p>
<pre><code>&gt;&gt;&gt; int
&lt;type 'int'&gt;
&gt;&gt;&gt; type(int)
&lt;type 'type'&gt;
</code></pre>
<p>This is fine, but <code>int</code> is also a built-in function: it is listed in the table of built-in functions <a href="https://docs.python.org/3/library/functions.html" rel="noreferrer">right in the Python documentation</a>.</p>
<p>Other built-in functions are reported like this in the REPL:</p>
<pre><code>&gt;&gt;&gt; abs
&lt;built-in function abs&gt;
&gt;&gt;&gt; type(abs)
&lt;type 'builtin_function_or_method'&gt;
</code></pre>
<p>But I can't get <code>type</code> to show me this for <code>int</code>. Now clearly I <em>can</em> use <code>int</code> as a function if I want to (sorry for using <code>map</code> instead of a comprehension, I'm just trying to make a point):</p>
<pre><code>&gt;&gt;&gt; map(int, ["4", "2"])
[4, 2]
</code></pre>
<p>So Python knows to use the function.  But why does <code>type</code> pick the type over the function?  Nothing in <a href="https://docs.python.org/3/library/functions.html#type" rel="noreferrer">the definition of the <code>type</code> function</a> says to expect this.  And then as a follow-up, what is the meaning of this expression:</p>
<pre><code>id(int)
</code></pre>
<p>Is this giving me the <code>id</code> of the type or the function.  I expect the former.  Now if it is the former, how would I get the id of the built-in function <code>int</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is only one thing called <code>int</code> and only one thing called <code>abs</code>.</p>
<p>The difference is that <code>int</code> is a class, and <code>abs</code> is a function. Both, however, are callable. When you call <code>int(42)</code>, that calls the <code>int</code> class's constructor, returning an instance of class <code>int</code>.</p>
<p>It's not really much different to:</p>
<pre><code>class Int(object):

  def __init__(self, init_val=0):
    self.val = init_val

obj = Int(42)
print Int, type(Int), obj, type(obj)
</code></pre>
<p>Here, <code>Int</code> is callable, and can be used to construct instances of the class.</p>
<p>Once you realise this, the rest will follow.</p>
</div>
<span class="comment-copy">All types are callable. For example when doing <code>class Foo: pass</code>, you create a new type <code>Foo</code> but you can also call it <code>Foo()</code> to create a new object of that type.</span>
<span class="comment-copy"><code>REPL</code> means <code>read–eval–print loop</code>?</span>
<span class="comment-copy">@poke Yes, thanks, types (and functions, classes, objects with <code>__call__</code> and many other things are callable); the placement of <code>int</code> in the documentation in the list of built-in functions led me to believe there was some other special object here.  I am beginning to think this is one misleading piece of documentation, and if I were to rewrite the docs, I would remove them.</span>
<span class="comment-copy">Well it <i>is</i> a special object since it’s one of the few types that is natively implemented.</span>
<span class="comment-copy">Nice, that does makes perfect sense! But then one would wonder why the docs have thrown in <code>int</code> and <code>str</code> and <code>float</code> and friends into the section on Built-in Functions, and then described them as if they were functions.  I suspect it might be because they are deferring the more technical details of types until later in the docs; I don't know.  But they sure made it look like there was some overloading going on.  Glad to see there is just one meaning for <code>int</code>. :)</span>
<span class="comment-copy">@RayToal: I am not sure of the exact reasons the docs are organised the way they are, but that could be historic.</span>
<span class="comment-copy">@RayToal It’s because the type creation for those types also includes a fair amount of parsing and type conversion. So it makes sense to list them as built-in functions since they can be used to convert things into common other types.</span>
<span class="comment-copy">I've just followed a few more links in the docs and ended up <a href="https://docs.python.org/3/library/stdtypes.html#typesnumeric" rel="nofollow noreferrer">in this section</a>.  I see the sentence "The constructors int(), float(), and complex() can be used to produce numbers of a specific type." so they do give a nod to the fact that constructors are in play here.  I kind of wish they didn't list those things <i>as functions</i> in Section 2; for a second I thought Python had - gasp - overloading.  Though perhaps it does, as constructors have the same name as their types....</span>
<span class="comment-copy">There's some subtlety with <code>type</code> itself. Historically, <code>type</code> was a function, which took one argument and returned its type (e.g. <code>type(3) -&gt; int</code>. Later, <code>type</code> became a class, but the old usage was not removed for backwards compatibility. Thus, now, <code>type</code> functions as both a plain function <code>type(obj)</code> and as a constructor <code>type(name, bases, dict)</code>.</span>
