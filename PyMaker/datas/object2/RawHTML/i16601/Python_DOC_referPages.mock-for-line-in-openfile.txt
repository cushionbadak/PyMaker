<div class="post-text" itemprop="text">
<p>I am wanting to unittest a component of my application. The code looks a little like below.</p>
<pre><code>def read_content_generator(myfile):
    for line in open(myfile):
        # do some string manipulation.
        yield result
</code></pre>
<p>The problem I am having is that I cannot mock the <code>open()</code> functionality within a <code>for</code> loop.</p>
<p>What I am aiming for is a <code>unittest</code> like this: (I know this code is not right but its just an example of what I am trying to do):</p>
<pre><code>def test_openiteration(self):
    with mock.patch('open') as my_openmock:
        my_openmock.return_value = ['1','2','3']
        response = myfunction()
        self.assertEquals([1,2,3], response)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can mock <code>open()</code> to return StringIO object.</p>
<p><strong>mymodule.py:</strong></p>
<pre><code>def read_content_generator(myfile):
    with open(myfile) as f:
        for line in f:
            yield '&lt;{}&gt;'.format(line)
</code></pre>
<p>Note that I've used <a href="https://stackoverflow.com/a/11555509/3227133">with statement</a> there.</p>
<p><strong>test_mymodule.py:</strong></p>
<pre><code>import io
import unittest
import unittest.mock as mock

import mymodule


class Tests(unittest.TestCase):
    def test_gen(self):
        fake_file = io.StringIO('foo\nbar\n')
        with mock.patch('mymodule.open', return_value=fake_file, create=True):
            result = list(mymodule.read_content_generator('filename'))
        self.assertEqual(result, ['&lt;foo\n&gt;' , '&lt;bar\n&gt;'])
</code></pre>
<p>Works for python3.4.</p>
<p>At first I tried to use <code>mock.mock_open(read_data='1\n2\n3\n')</code> but iteration support seems to be broken.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two easy options available:</p>
<ul>
<li><p>Change <code>read_content_generator</code> to take a file, not a file name, and mock that with an <code>io.StringIO</code>.</p></li>
<li><p>Make a temporary file. There are good modules for this.</p></li>
</ul>
</div>
<span class="comment-copy">I'm really not sure what the goal is here. Can you clarify?</span>
<span class="comment-copy">@veedrac Apologies I have now reworded</span>
<span class="comment-copy">Using python 2.7.13, I had to use <code>StringIO.StringIO</code> instead of <code>io.StringIO</code></span>
<span class="comment-copy">tempfile works. <a href="https://docs.python.org/3/library/tempfile.html#tempfile-examples" rel="nofollow noreferrer">docs.python.org/3/library/tempfile.html#tempfile-examples</a> It's also possible that your function works with a StringIO object.</span>
