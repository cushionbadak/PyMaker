<div class="post-text" itemprop="text">
<p>I have written the code below for finding lines in the infile which matches ANY of the keywords in the keyword file. Problem is, I want to get only those lines of the infile that contain ALL of the keywords. Seems harder than I thought, but I am a beginner so I guess I am just missing something obvious. Regex doesn't seem to have a straightforward 'and' operator however.</p>
<pre><code>import re
infile = open('path/#input.txt', 'r')
outfile = open('path/#output.txt', 'w')

# Read a textfile containing keywords to find
# (and strip the newline character '\n')
keywords = [line.strip() for line in open('path/#keywords.txt')]

# Compile keywords into a regex pattern 
pattern = re.compile('|'.join(keywords))

# See which lines in the infile match any of the keywords
# and write those lines to the outfile
for line in infile:
    if pattern.search(line):
        outfile.write(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are not a Swiss Army knife capable of solving <strong>every</strong> problem. They aren't a good solution for this problem:</p>
<ol>
<li>There is no way to use <strong>one</strong> regexp operation to do the kind of conjuction operation you are looking for.</li>
<li>Regexp shouldn't be used to do plain-text searches, since the "plain-text" keywords can contain characters which trigger different behavior in regexps (such as <code>.</code> or <code>$</code>)</li>
</ol>
<p>Try this, using one <code>for</code> loop inside the other to iterate through all the keywords for each line:</p>
<pre><code>keywords = ...

for line in infile:
    # iterate through ALL the keywords
    found_all = True
    for kw in keywords:
        # if ANY keyword is not found, found_all = False 
        if kw not in line:
            found_all = False

    if found_all:
        outfile.write(line)
</code></pre>
<p><strong>UPDATE:</strong> @Stefano Sanfilippo's solution is a more concise version of the same thing. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Regexes are not meant to be used like that. Instead, you should use <a href="https://docs.python.org/3/library/functions.html#all"><code>all()</code></a>:</p>
<pre><code>infile = open('path/#input.txt', 'r')
outfile = open('path/#output.txt', 'w')

keywords = [line.strip() for line in open('path/#keywords.txt')]

for line in infile:
    if all(k in line for k in keywords):
        outfile.write(line)
</code></pre>
</div>
<span class="comment-copy">Why did you choose to use regular expressions for this task?</span>
<span class="comment-copy">There is no <code>and</code> is regexes because it does not make sense for regexes to have one. They are used to describe patterns (languages) and, most importantly, they have a flow (i.e. <i>"now you could read either Foo or Bar"</i> makes sense, <i>"now you will read Foo <b>and</b> Bar, at the same time"</i> does not).</span>
<span class="comment-copy">The patterns specified by regular expressions define a particular ordering; they are a compact way of describing a state machine. The <code>|</code> "or" allows you to specify two options at a particular location, or two possible states (or sequences of states) the machine can pass through. Since two options can't be in the same location and the machine can't be in two states at the same time, an "and" function isn't very useful.</span>
<span class="comment-copy">His, however, does not note the danger of special characters. +1</span>
