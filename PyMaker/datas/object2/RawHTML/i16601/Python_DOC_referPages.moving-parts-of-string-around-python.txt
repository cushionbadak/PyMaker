<div class="post-text" itemprop="text">
<p>I have a string, well, several actually. The strings are simply:</p>
<pre><code>string.a.is.this
</code></pre>
<p>or</p>
<pre><code>string.a.im
</code></pre>
<p>in that fashion.</p>
<p>and what I want to do is make those stings become:</p>
<pre><code>this.is.a.string
</code></pre>
<p>and</p>
<pre><code>im.a.string
</code></pre>
<p>What I've tried:</p>
<pre><code>new_string = string.split('.')
new_string = (new_string[3] + '.' + new_string[2] + '.' + new_string[1] + '.' + new_string[0])
</code></pre>
<p>Which works fine for making:</p>
<pre><code>string.a.is.this
</code></pre>
<p>into</p>
<pre><code>this.is.a.string
</code></pre>
<p>but gives me a error of 'out of range' if I try it on: </p>
<pre><code>string.a.im
</code></pre>
<p>yet if I do:</p>
<pre><code>new_string = (new_string[2] + '.' + new_string[1] + '.' + new_string[0])
</code></pre>
<p>that works fine to make:</p>
<pre><code>string.a.im
</code></pre>
<p>into</p>
<pre><code> im.a.string
</code></pre>
<p>but obviously does not work for:</p>
<pre><code>string.a.is.this
</code></pre>
<p>since it is not setup for 4 indices.  I was trying to figure out how to make the extra index optional, or any other work around, or, better method.  Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a>, and <a href="https://stackoverflow.com/questions/509211/pythons-slice-notation"><code>[::-1]</code></a>:</p>
<pre><code>&gt;&gt;&gt; mystr = 'string.a.is.this'
&gt;&gt;&gt; '.'.join(mystr.split('.')[::-1])
'this.is.a.string'
&gt;&gt;&gt; mystr = 'string.a.im'
&gt;&gt;&gt; '.'.join(mystr.split('.')[::-1])
'im.a.string'
&gt;&gt;&gt;
</code></pre>
<p>To explain better, here is a step-by-step demonstration with the first string:</p>
<pre><code>&gt;&gt;&gt; mystr = 'string.a.is.this'
&gt;&gt;&gt;
&gt;&gt;&gt; # Split the string on .
&gt;&gt;&gt; mystr.split('.')
['string', 'a', 'is', 'this']
&gt;&gt;&gt;
&gt;&gt;&gt; # Reverse the list returned above
&gt;&gt;&gt; mystr.split('.')[::-1]
['this', 'is', 'a', 'string']
&gt;&gt;&gt;
&gt;&gt;&gt; # Join the strings in the reversed list, separating them by .
&gt;&gt;&gt; '.'.join(mystr.split('.')[::-1])
'this.is.a.string'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do it through python's <code>re</code> module,</p>
<pre><code>import re
mystr = 'string.a.is.this'
regex = re.findall(r'([^.]+)', mystr)
'.'.join(regex[::-1])
'this.is.a.string'
</code></pre>
</div>
<span class="comment-copy">Excellent. Clear and straight forward answer. And thanks for the extra add-on explanation, as well as the fast response, works exactly as needed.</span>
<span class="comment-copy">You can also use reversed() instead of the slice step. e.g. '.'.join(reversed(mystr.split('.')))</span>
<span class="comment-copy">@GoingTharn also a excellent answer. Thanks</span>
<span class="comment-copy">+1 for the step by step demonstration.</span>
