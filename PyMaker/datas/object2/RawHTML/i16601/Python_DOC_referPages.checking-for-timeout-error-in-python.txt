<div class="post-text" itemprop="text">
<p>So I have a pretty generic logging statement after a request:</p>
<pre><code>try:
    r = requests.get(testUrl, timeout=10.0)
except Exception, err:
    logger.error({"message": err.message})
</code></pre>
<p>This works great for everything I've thrown at it except <code>TimeoutError</code>.  When the request times out the err I get back is a tuple that it tries and fails to serialize.</p>
<p>My question is how do I catch just this one type of error?  For starters <code>TimeoutError</code> is not something I have access to.  I have tried adding <code>from exceptions import *</code> but with no luck.  I've also tried importing <code>OSError</code> because the docs say <code>TimeoutError</code> is a subclass, but I was unable to access <code>TimeoutError</code> after importing <code>OSError</code>.</p>
<p><a href="https://docs.python.org/3/library/exceptions.html#TimeoutError" rel="nofollow">TimeoutError docs</a></p>
<p>I plan to either list my exceptions in order:</p>
<pre><code>except TimeoutError, err:
     #handle this specific error
except Exception, err:
     #handle all other errors
</code></pre>
<p>or just check for type:</p>
<pre><code>except Exception, err:
    if isinstance(err, TimeoutError):
        #handle specific error
    #handle all other errors
</code></pre>
<p>Python 2.7.3 &amp; Django 1.5</p>
</div>
<div class="post-text" itemprop="text">
<p>You can handle <a href="https://github.com/kennethreitz/requests/blob/4ecd74693f65821a96180af2859c13560bf84560/requests/exceptions.py#L46" rel="noreferrer"><code>requests.Timeout</code></a> exception:</p>
<pre><code>try:
    r = requests.get(testUrl, timeout=10.0)
except requests.Timeout as err:
    logger.error({"message": err.message})
except requests.RequestException as err:
    # handle other errors
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; url = "http://httpbin.org/delay/2"
&gt;&gt;&gt; try:
...     r = requests.get(url, timeout=1)
... except requests.Timeout as err:
...     print(err.message)
... 
HTTPConnectionPool(host='httpbin.org', port=80): Read timed out. (read timeout=1)
</code></pre>
</div>
<span class="comment-copy"><code>TimeoutError</code> is a custom exception provided by <a href="http://docs.python-requests.org/en/latest/api/#exceptions" rel="nofollow noreferrer">the <code>requests</code> package</a>.</span>
<span class="comment-copy">@MartijnPieters Ahh, I thought it was the one referred to here: <a href="https://docs.python.org/3/library/exceptions.html#TimeoutError" rel="nofollow noreferrer">docs.python.org/3/library/exceptions.html#TimeoutError</a></span>
<span class="comment-copy">When in doubt, print the <code>.__module__</code> attribute of an exception.</span>
<span class="comment-copy">I came here for <code>TimeoutError</code> from <code>concurrent.futures</code>, which is just <code>concurrent.futures.TimeoutError</code>.</span>
<span class="comment-copy">It is a bulletin in Python 3, but not in Python 2.</span>
<span class="comment-copy">Pro tip: use <a href="http://httpbin.org/" rel="nofollow noreferrer">httpbin.org</a> to demonstrate specific response behaviour. There is a <code>http://httpbin.org/delay</code> route that'll respond after a configurable delay.</span>
<span class="comment-copy">@MartijnPieters wow, nice, thank you for the tip!</span>
