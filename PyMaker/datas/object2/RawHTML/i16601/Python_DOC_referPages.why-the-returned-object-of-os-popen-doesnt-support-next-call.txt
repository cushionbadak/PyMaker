<div class="post-text" itemprop="text">
<p>Python Docs: <code>os.popen</code>: </p>
<blockquote>
<p>Open a pipe to or from command. The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'.</p>
</blockquote>
<p>I'm able to use the <code>next</code> method <code>X.__next__()</code> / <code>X.next()</code> (2.X) but not the <code>next(x)</code> call, </p>
<ul>
<li>aren't <code>__next__</code> method and <code>next(x)</code> the same ? </li>
<li>why can't we use <code>next(x)</code> for <code>os.popen</code>'s object ?</li>
</ul>
<p>Last but not least, how do <code>next()</code> and <code>next</code> <em>method</em> really work ? </p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the source code(Python 3.4) it seems the <code>__next__</code> method is not implemented in<code>_wrap_close</code> class, so the <code>next()</code> call fails because it fails to find the <code>__next__</code> method on the class. And the explicit <code>__next__</code> call works because of the overridden <code>__getattr__</code> method.</p>
<p>Related <a href="http://hg.python.org/cpython/file/404dcd29b0a6/Lib/os.py#l931">source code</a>:</p>
<pre><code>def popen(cmd, mode="r", buffering=-1):
    if not isinstance(cmd, str):
        raise TypeError("invalid cmd type (%s, expected string)" % type(cmd))
    if mode not in ("r", "w"):
        raise ValueError("invalid mode %r" % mode)
    if buffering == 0 or buffering is None:
        raise ValueError("popen() does not support unbuffered streams")
    import subprocess, io
    if mode == "r":
        proc = subprocess.Popen(cmd,
                                shell=True,
                                stdout=subprocess.PIPE,
                                bufsize=buffering)
        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)
    else:
        proc = subprocess.Popen(cmd,
                                shell=True,
                                stdin=subprocess.PIPE,
                                bufsize=buffering)
        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)

# Helper for popen() -- a proxy for a file whose close waits for the process
class _wrap_close:
    def __init__(self, stream, proc):
        self._stream = stream
        self._proc = proc
    def close(self):
        self._stream.close()
        returncode = self._proc.wait()
        if returncode == 0:
            return None
        if name == 'nt':
            return returncode
        else:
            return returncode &lt;&lt; 8  # Shift left to match old behavior
    def __enter__(self):
        return self
    def __exit__(self, *args):
        self.close()
    def __getattr__(self, name):
        return getattr(self._stream, name)
    def __iter__(self):
        return iter(self._stream)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#next" rel="nofollow">https://docs.python.org/2/library/functions.html#next</a> says about <code>next</code>:</p>
<blockquote>
<p>Retrieve the next item from the iterator by calling its next() method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised.</p>
</blockquote>
<p>The error message:</p>
<pre><code>TypeError: _wrap_close object is not an iterator
</code></pre>
<p>indicates that it's not an iterator. Most probably the <code>__iter__</code> method is missing.</p>
<p>It's strange that you're getting an error, because this works for me in Python 2.x:</p>
<pre><code>&gt;&gt;&gt; next(os.popen('ls'))
'foo.txt\n'
</code></pre>
</div>
<span class="comment-copy">Are you getting any errors(s) with <code>next()</code>?</span>
<span class="comment-copy">yes, TypeError: _wrap_close object is not an iterator</span>
<span class="comment-copy"><code>next(x)</code> actually works in Python 2, but doesn't work in Python 3 for me (with the exception you show).</span>
<span class="comment-copy"><a href="http://books.google.co.kr/books?id=q8W3WQbNWmkC&amp;pg=PA101&amp;lpg=PA101&amp;dq=_wrap_close+object&amp;source=bl&amp;ots=Y79dfSoyZF&amp;sig=fbpJ4kxmeHKp57sGLc5pk6gmtKw&amp;hl=en&amp;sa=X&amp;ei=Ye-nU9SeMoPPkwXp2IDQDg&amp;ved=0CB0Q6AEwAA#v=onepage&amp;q=_wrap_close%20object&amp;f=false" rel="nofollow noreferrer">books.google.co.kr/â€¦</a></span>
<span class="comment-copy">@vicious_101: then why not call <code>iter()</code> on it <i>first</i>?</span>
<span class="comment-copy">E.g. it is an iterable, not an iterator. Call <code>iter()</code> on it first.</span>
<span class="comment-copy">@eryksun: right, I didn't actually spot the <code>__getattr__</code>; but special methods are looked up directly on the type, always, and <code>__getattr__</code> is not invoked then. <code>hasattr(type(os_open_return_value), 'next')</code> is false, so it the wrapper is not an iterator. If <code>__iter__</code> instead returned <code>self</code> and the proxy offered a <code>next()</code> method too, it'd all work, but I am guessing there is a reason they didn't do this? Is <code>_wrap_close</code> used for something that is only an iterable, not an iterator?</span>
<span class="comment-copy">@eryksun: well, <code>__iter__</code> was not implemented as <code>return self</code>, but rather <code>return iter(self._stream)</code>. The proxy being an iterable instead of an iterator may be a bug here.</span>
<span class="comment-copy">Ok, I get the part about <code>os.popen()</code> returning an <code>os._wrap_close</code> object that has no <code>__next__</code> method.  However, I do not understand your comment about the overwritten <code>__getattr__</code> method because I cannot find it in your code example.  Would you mind explaining that part in a bit more detail?</span>
<span class="comment-copy">@Soong When we call <code>next()</code> on an instance it looks for <code>__next__</code> method in the class(not instance), as there's no <code>__next__</code> method in <code>_wrap_close</code> you'll get an error. On the other hand when you call <code>.__next__()</code> on the instance, Python looks for the <code>__next__</code> method on the instance and then on the class, when it is not found <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a> is invoked and from there they are delegating the call to the underlying <code>io.TextIOWrapper(proc.stdin)</code> object.</span>
<span class="comment-copy">It does work in 2.X, not in 3.X</span>
