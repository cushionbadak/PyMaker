<div class="post-text" itemprop="text">
<p>i have a string in python</p>
<pre><code>text = '(b)'
</code></pre>
<p>i want to extract the 'b'. I could strip the first and the last letter of the string but the reason i wont do that is because the text string may contain '(a)', (iii), 'i)', '(1' or '(2)'. Some times they contain no parenthesis at all. but they will always contain an alphanumeric values. But i equally want to retrieve the alphanumeric values there. </p>
<p>this feat will have to be accomplished in a one line code or block of code that returns justthe value as it will be used in an iteratively on a multiple situations</p>
<p>what is the best way to do that in python,</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this through python's re module,</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '(5a)'
&gt;&gt;&gt; match = re.search(r'\(?([0-9A-Za-z]+)\)?', text)
&gt;&gt;&gt; match.group(1)
'5a'
&gt;&gt;&gt; text = '*(ab2**)'
&gt;&gt;&gt; match = re.search(r'\(?([0-9A-Za-z]+)\)?', text)
&gt;&gt;&gt; match.group(1)
'ab2'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think Regex is needed here.  You can just strip off any parenthesis with <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip</code></a>:</p>
<pre><code>&gt;&gt;&gt; text = '(b)'
&gt;&gt;&gt; text.strip('()')
'b'
&gt;&gt;&gt; text = '(iii)'
&gt;&gt;&gt; text.strip('()')
'iii'
&gt;&gt;&gt; text = 'i)'
&gt;&gt;&gt; text.strip('()')
'i'
&gt;&gt;&gt; text = '(1'
&gt;&gt;&gt; text.strip('()')
'1'
&gt;&gt;&gt; text = '(2)'
&gt;&gt;&gt; text.strip('()')
'2'
&gt;&gt;&gt; text = 'a'
&gt;&gt;&gt; text.strip('()')
'a'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Regarding @MikeMcKerns' comment, a more robust solution would be to pass <a href="https://docs.python.org/3/library/string.html#string.punctuation" rel="nofollow"><code>string.punctuation</code></a> to <code>str.strip</code>:</p>
<pre><code>&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; punctuation  # Just to demonstrate
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
&gt;&gt;&gt;
&gt;&gt;&gt; text = '*(ab2**)'
&gt;&gt;&gt; text.strip(punctuation)
'ab2'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not fancy, but this is pretty generic</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; ''.join(i for i in text if i in string.ascii_letters+'0123456789')
</code></pre>
<p>This works for all sorts of combinations of parenthesis in the middle of the string, and also if you have other non-alphanumeric characters (aside from the parenthesis) present.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>re.match(r'\(?([a-zA-Z0-9]+)', text).group(1)
</code></pre>
<p>for your input provided by exmple it would be:</p>
<pre><code>&gt;&gt;&gt; a=['(a)', '(iii)', 'i)', '(1' , '(2)']
&gt;&gt;&gt; [ re.match(r'\(?([a-zA-Z0-9]+)', text).group(1) for text in a ]
['a', 'iii', 'i', '1', '2']
</code></pre>
</div>
<span class="comment-copy">doesn't handle <code>*(ab2**)</code></span>
<span class="comment-copy">@MikeMcKerns - Well, in that case, you could always do <code>text.strip(string.punctuation)</code>.</span>
<span class="comment-copy">Then that should be your answer.</span>
