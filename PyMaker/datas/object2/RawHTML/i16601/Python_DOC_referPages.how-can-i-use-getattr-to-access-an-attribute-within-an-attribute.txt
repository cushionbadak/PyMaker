<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7778867/python-getattr-and-concatenation">Python - getattr and concatenation</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>What I have is a value found in:</p>
<pre><code>value.number.odd = 7
</code></pre>
<p><code>number.odd</code> is an input by the user, in <code>x</code>.</p>
<p>and so if <code>x='number.odd'</code>, I was hoping that:</p>
<pre><code>getattr(value, x)
</code></pre>
<p>would display what <code>value.number.odd</code> would, but it doesn't. Instead I get:</p>
<pre><code>AttributeError: missing attribute number.odd
</code></pre>
<p>EDIT:</p>
<p>Input x can also be something like X='number', or 'number.negative.prime'</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow"><code>reduce</code></a> for this (<a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce</code></a> in Python 3.x):</p>
<pre><code>reduce(getattr, x.split('.'), value)
</code></pre>
<p>See a demonstration below:</p>
<pre><code>&gt;&gt;&gt; class A:
...     def __init__(self):
...         self.odd = 7
...
&gt;&gt;&gt; class B:
...     def __init__(self):
...         self.number = A()
...
&gt;&gt;&gt; value = B()
&gt;&gt;&gt; value.number.odd
7
&gt;&gt;&gt; x = 'number.odd'
&gt;&gt;&gt; reduce(getattr, x.split('.'), value)
7
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>getattr(getattr(value, 'number'), 'odd')</code></p>
<p>Or taken from <a href="https://stackoverflow.com/questions/7778867/python-getattr-and-concatenation">Python - getattr and concatenation</a> by Cat Plus Plus</p>
<pre><code>def getattr_deep(start, attr):
    obj = start
    for part in attr.split('.'):
        obj = getattr(obj, part)
    return obj

getattr_deep(foo, 'A.bar')
</code></pre>
</div>
<span class="comment-copy">Thank you very much, worked beautifully</span>
<span class="comment-copy">I understand that, but I thought there would be a simpler way without splitting 'number' and 'odd'. The input value x varies from a vast range of values. Some are even value.number.negative.odd</span>
<span class="comment-copy">Ah, that's fair.  I don't believe there's a built-in way, but the duplicate of your question has a solution that will work for you</span>
