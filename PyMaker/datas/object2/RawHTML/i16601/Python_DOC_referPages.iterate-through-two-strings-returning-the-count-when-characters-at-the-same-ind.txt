<div class="post-text" itemprop="text">
<p>I have two words, one is a user input string, the other is a randomly selected word from text file. I would like to return the count values that are equal in both stings and share the same string index. e.g word1 = 'bleed', word2 = slice: similar = 1.</p>
<pre><code>word1 = 'frog'
word2 = 'friend'
correct = 0

if len(word1) &gt; len(word2):
    for i in range(len(word2)):
        if word1[i] == word2[i]:
            correct =+ 1
        else:
            correct == 0

else:
   for i in range(len(word1)):
       if word1[i] == word2[i]:
           correct =+ 1
       else:
           correct == 0
</code></pre>
<p>I'm new to programming and unfortunately My attempt maxes out at correct = 1. For the words i have used in the example frog and friend i would expect to see correct = 2, my code produces correct = 1. How do i add to correct, beyond 1? thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>This is much easier with <code>zip()</code> and the <code>filter()</code> built in function:</p>
<p><em>Python 2.x</em>:</p>
<pre><code>In [23]: word1 = 'frog'
In [24]: word2 = 'friend'
In [25]: print len(filter(lambda (x, y): x == y, zip(word1, word2)))
2
</code></pre>
<p><em>Python 3.x</em> (see comments for pointers re: changes):</p>
<pre><code>&gt;&gt;&gt; word1 = 'frog'
&gt;&gt;&gt; word2 = 'friend'
&gt;&gt;&gt; len(list(filter(lambda xy: xy[0] == xy[1], zip(word1, word2))))
2
</code></pre>
<p><strong>Update</strong>: since you're new to programming, I'll attempt to explain this solution a bit:</p>
<p>Python has support for sequences (commonly thought of as an ordered list of items), such as <code>[1,2,3]</code> or <code>['a', 'b', 'c', 123, 456]</code>. However, Python treats <em>strings</em> as an ordered list of characters as well, so <code>'hello world'</code> is also a list. As a result, you may apply Python's list-related operators/built-in functions on strings as well. Therefore your problem reduces to treat <code>word1</code> and <code>word2</code> as lists and find indexes on these lists where their items match. </p>
<p>So let's use Python's special functions for this.<code>zip</code> is a nifty function that takes more than one sequence, and makes a new list with each item at index X made up of the values at index X in each of the input sequences. For instance, <code>zip([1,2], [3,4])</code> becomes <code>[(1,3), (2,4)]</code> and <code>zip('foo', 'bar')</code> becomes <code>[('f', 'b'), ('o', 'a'), ('o', 'r')]</code>. This last result is very useful for your problem -- now you just need to run a function through each tuple (i.e. a value of the form <code>(x,y)</code>) through a function to check if the values are equal. You could do that in a loop as in other languages, but you can also make Python do the looping for you and provide just a function that returns the result of applying equality to each tuple on a list by using a function such as <code>filter()</code> or <code>map()</code>. In your case, you want <code>filter()</code> which runs through the input list and includes every value in the original list that causes the value of a passed in function (the <code>lambda</code> in the solution) to be <code>True</code>. The length of the "filtered" list is essentially the number of matches.</p>
<p>Hope this helps. Note that if you are new to Python, you will want to look up list/sequences, tuples, zip, filter, and lambda in a good book or the <a href="https://docs.python.org/3/reference/index.html" rel="nofollow">official Python reference</a> to fully understand the solution.</p>
<p>Oh, and welcome to programming :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>zip</code> and for comprehension:</p>
<pre><code>word1 = 'frog'
word2 = 'friend'

sum([1 for (l,r) in zip(word1, word2) if l == r])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>example for 'reduce' .</p>
<pre><code>&gt;&gt;&gt; word1 = 'frog'
&gt;&gt;&gt; word2 = 'friend'
&gt;&gt;&gt; reduce(lambda z,(x,y): (z+1) if x == y else z, zip(word1,word2), 0)
2
</code></pre>
<hr/>
<p>reduce take 3 arguments, </p>
<ul>
<li>function called with accumulator and each item of the list.</li>
<li>list.</li>
<li>initial value of accumulator.</li>
</ul>
<p>Accumulator looks like temporary variable. But the value of the accumulator is taken over.</p>
<p>In my code:</p>
<p>function is    <code>The value of the accumulator is taken over.</code><br/>
list is <code>zip(word1, word2)</code> so <code>[('f', 'f'), ('r', 'r'), ('o', 'i'), ('g', 'e')]</code><br/>
initial value is 0  </p>
<p>Let's see how reduce works.</p>
<p>First time, function called with arguments <code>z := 0, (x,y) := ('f', 'f')</code> and return 1,
because <code>x == y</code> is True and <code>z + 1</code> is 1.  </p>
<p>Next time, function called with arguments <code>z := 1, (x,y) := ('r', 'r')</code>.
<code>z</code> is 1, that is point, please remember accumulator is taken over. so <code>z</code> is last result.
In this time, <code>x == y</code> is True, too. function return 2 (<code>z + 1</code>).</p>
<p>Next time, called with <code>2, ('o', 'i')</code> returns <code>2</code>. ( 'o' is not 'i' ).</p>
<p>And last, called with <code>2, ('g', 'e')</code> returns <code>2</code>.</p>
<p>That's all, result was 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>As user2347112 stated in comments, this task can be easily done with <code>zip()</code> built-in funciton:</p>
<pre><code>word1 = 'frog'
word2 = 'friend'
correct = 0

for i,j in zip(word1,word2):
    if i == j:
        correct+=1

print(correct)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To start with, <code>=+</code> needs to be <code>+=</code> to properly increment <code>correct</code>, and get rid of your <code>else</code> clauses as they do nothing.</p>
<p>As mentioned in the comments you should look into <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow">zip</a></p>
<pre><code>In [1]: word1 = 'frog'

In [2]: word2 = 'friend'

In [3]: sum(1 for a, b in zip(word1, word2) if a == b)
Out[3]: 2
</code></pre>
</div>
<span class="comment-copy"><code>=+</code> isn't <code>+=</code>, <code>==</code> doesn't actually do anything, and if you change it to <code>=</code>, it's going to do the wrong thing.</span>
<span class="comment-copy">You're using the operator <code>+=</code> incorrectly. Your code always make correct receive <code>+1</code> instead of incrementing.</span>
<span class="comment-copy">Instead of range-len iteration, just use <code>zip</code>. It automatically stops at the end of the shortest input sequence, which is exactly what you want.</span>
<span class="comment-copy">Definitely look into the zip() built-in function.</span>
<span class="comment-copy">Thanks for the help!</span>
<span class="comment-copy">thank you for your time, I really appreciate your extensive answer! I tried to put this to use, and got the error 'invalid syntax' with the opening parenthesis after lambda highlighted. Any idea why this would be?</span>
<span class="comment-copy">Hmm, looks like a difference between Python 2.7 which I ran this on, and Python 3 which does give the error you indicate. Not sure what syntax has changed -- let me dig in. Do you happen to have Python 2 installed on your machine? For me on Ubuntu, that's just 'python'.</span>
<span class="comment-copy">Ok, here's the problem: tuple auto-unpacking changed in Python 3: <a href="http://stackoverflow.com/questions/15712210/python-3-2-lambda-syntax-error" title="python 3 2 lambda syntax error">stackoverflow.com/questions/15712210/â€¦</a>. Still seeing an error with the print statement, and filter now returns an iterable but not a straight up list: <a href="http://stackoverflow.com/questions/12319025/filters-in-python">stackoverflow.com/questions/12319025/filters-in-python</a>. I'll update the answer with the correct Python 3 equivalent.</span>
<span class="comment-copy">No need for the inner list, you also don't need the <code>1</code> simply: <code>sum(l == r for l,r in zip('frog','friend'))</code></span>
<span class="comment-copy">this would be a better answer if you explained why it works</span>
<span class="comment-copy">@Kate thanks your advice. I try to write explain.</span>
<span class="comment-copy">You can replace the <code>1</code> with your if statement directly, like this: <code>sum(a == b for a,b in zip('frog','friend'))</code></span>
