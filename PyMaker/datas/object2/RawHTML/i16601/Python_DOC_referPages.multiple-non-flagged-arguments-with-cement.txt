<div class="post-text" itemprop="text">
<p>I am writing a python command line interface tool on top of <a href="http://builtoncement.org/" rel="noreferrer">cement</a>.
Cement is working quite well for standard argument parseing. However, I want to be able to add a specific amount of non-flagged arguments. Let me explain.</p>
<p>Typical command line tool:</p>
<pre><code>cmd subcmd -flag -stored=flag
</code></pre>
<p>Now, lets say I want to add some arguments without flags, for example how cd works</p>
<pre><code>cd my/dir
</code></pre>
<p><code>my/dir</code> is an argument without a flag.</p>
<p>Is there anyway to do this with cement?</p>
<p>My current example cement app:</p>
<pre><code># define application controllers
class MyAppBaseController(controller.CementBaseController):
    class Meta:
        label = 'base'
        interface = controller.IController
        description = "My Application Does Amazing Things"
        arguments = [
            (['--base-opt'], dict(help="option under base controller")),
            ]

    @controller.expose(help="base controller default command", hide=True)
    def default(self):
        self.app.args.parse_args(['--help'])
        print "Inside MyAppBaseController.default()"

    @controller.expose(help="another base controller command")
    def command1(self):
        print "Inside MyAppBaseController.command1()"
</code></pre>
<p>So lets say I wanted to do <code>myapp command1 some/dir some_string</code></p>
<p>is there a way to parse those arguments?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using optional positional arguments in ArgParse.  There is actually an issue open in GitHub for better documentation on this subject:</p>
<p><a href="https://github.com/datafolklabs/cement/issues/256">https://github.com/datafolklabs/cement/issues/256</a></p>
<p>Basically, if you want "command1" to handle the operation, then "some/dir some_string" would be positional arguments.  You could add the following to MyAppBaseController.Meta.arguments:</p>
<p><code>( ['extra_arguments'], dict(action='store', nargs='*') ),</code></p>
<p>And then access those arguments like this inside of the <code>command</code> function:</p>
<p><code>if self.app.pargs.extra_arguments:
    print "Extra Argument 0: %s" % self.app.pargs.extra_arguments[0]
    print "Extra Argument 1: %s" % self.app.pargs.extra_arguments[1]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>As said in the Cement <a href="http://cement.readthedocs.io/en/latest/dev/arguments/" rel="nofollow noreferrer">doc</a>: "Cement defines an argument interface called IArgument, as well as the default ArgParseArgumentHandler that implements the interface. This handler is built on top of the ArgParse module which is included in the Python standard library" </p>
<p>You could achieve this by telling the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> module to consume one argument from the arguments list an store it in the name attribute of the pargs list.</p>
<pre><code># define application controllers
class MyAppBaseController(controller.CementBaseController):
    class Meta:
        label = 'base'
        interface = controller.IController
        description = "My Application Does Amazing Things"
        arguments = [
            (['--base-opt'], dict(help="option under base controller")),
        ]

    @controller.expose(help="base controller default command", hide=True)
    def default(self):
        self.app.args.parse_args(['--help'])
        print "Inside MyAppBaseController.default()"

    @controller.expose(
        help="another base controller command",
        arguments=[
            (['path'],
             dict(type=str, metavar='PATH', nargs='?', action='store', default='.')),
            (['string'],
             dict(type=str, metavar='STRING', nargs='?', action='store', default='')),
        ]
    )
    def command1(self):
        print "Inside MyAppBaseController.command1() path: %s string: %s" % (self.app.pargs.name, self.app.pargs.string)
</code></pre>
</div>
<span class="comment-copy">This is EXACTLY what I wanted!! I was about to make my own framework because I couldn't find an answer. I would upvote this like 10 times if I could.</span>
<span class="comment-copy">Very helpful. Thanks!</span>
