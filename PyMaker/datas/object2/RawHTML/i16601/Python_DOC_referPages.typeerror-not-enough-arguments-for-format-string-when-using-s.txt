<div class="post-text" itemprop="text">
<p>this is my code</p>
<pre><code>import sys
name = input("Enter your name:")
last_name = input("Enter your last name:")
gender = input("Enter your gender:")
age = input("Enter your age:")
print ("So your name is %s, your last name is %s, you are %s and you are %s years old" % name, last_name, gender, age)
</code></pre>
<p>I've searched the topic but I don't understand.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to put your arguments for string formatting in parenthesis:</p>
<pre><code>print (... % (name, last_name, gender, age))
</code></pre>
<p>Otherwise, Python will only see <code>name</code> as an argument for string formatting and the rest as arguments for the <code>print</code> function.</p>
<hr/>
<p>Note however that using <code>%</code> for string formatting operations is frowned upon these days.  The modern approach is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.format"><code>str.format</code></a>:</p>
<pre><code>print ("So your name is {}, your last name is {}, you are {} and you are {} years old".format(name, last_name, gender, age))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a set of parenthesis:</p>
<pre><code>&gt;&gt;&gt; '%s %s' % 'a', 'b'  # what you have
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: not enough arguments for format string
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; '%s %s' % ('a', 'b')  # correct solution
'a b'
</code></pre>
<p><code>'%s %s' % 'a', 'b'</code> is evaluated as <code>('%s %s' % 'a'), 'b'</code>, which produces an error in <code>'%s %s' % 'a'</code> since you have fewer arguments than format specifiers.</p>
<hr/>
<pre><code>print("So your name is %s, your last name is %s, you are %s and you are %s years old" % (name, last_name, gender, age))
</code></pre>
</div>
<span class="comment-copy">It's a good choice, to leave behind the old string format method from Python, and use this approach :). It avoids a lot of headaches and gives you more flexibility when it comes to better format the output, putting blank spaces in order to form columns of data, for example.  Here is the official doc, which has plenty of examples :) -&gt; <a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></span>
