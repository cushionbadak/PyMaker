<div class="post-text" itemprop="text">
<p>I'm learning Python, and I can't figure out how imports in <code>__init__.py</code> work.</p>
<p>I understand from <a href="https://docs.python.org/3/tutorial/modules.html" rel="noreferrer">the Python tutorial</a> that the <code>__init__.py</code> file initializes a package, and that I can import subpackages here.</p>
<p>I'm doing something wrong, though. Could you explain for me (and for future Python-learners) what I'm doing wrong?</p>
<p>Here's a simplified example of what I'm trying to do.</p>
<p>This is my file structure:</p>
<pre><code>package
    __init__.py
    test.py
    subpackage
        __init__.py
        hello_world.py
</code></pre>
<p>The contents of <code>hello_world.py</code>:</p>
<pre><code>def do_something():
    print "Hello, world!"
</code></pre>
<p><code>subpackage/__init__.py</code> is empty.</p>
<p><code>package/__init__.py</code> contains:</p>
<pre><code>import test.submodule.do_something
</code></pre>
<p>And finally, <code>test.py</code> contains:</p>
<pre><code>do_something()
</code></pre>
<p>This is how I attempt to run hello_world.py using OSX terminal and Python 3:</p>
<pre><code>python test.py
</code></pre>
<p>Python then throws the following error:</p>
<pre><code>NameError: name 'do_something' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably already understand that when you import a <em>module</em>, the interpreter creates a new namespace and executes the code of that module with the new namespace as both the local and global namespace. When the code completes execution, the module name (or the name given in any <code>as</code> clause) is bound to the module object just created within the importing namespace and recorded against its <code>__name__</code> in <code>sys.modules</code>.</p>
<p>When a qualified name such as <code>package.subpackage.module</code> is imported the first name (<code>package</code>) is imported into the local namespace, then <code>subpackage</code> is imported into <code>package</code>'s namespace and finally <code>module</code> is imported into <code>package.subpackage</code>'s namespace. Imports using <code>from ... import ... as ...</code> perform the same sequence of operations, but the imported objects are bound directly to names in the importing module's namespace. The fact that the package name isn't bound in your local namespace does not mean it hasn't been imported (as inspection of <code>sys.modules</code> will show).</p>
<p>The <code>__init__.py</code> in a package serves much the same function as a module's <code>.py</code> file. A <em>package</em>, having structure, is written as a directory which can also contain modules (regular <code>.py</code> files) and subdirectories (also containing an <code>__init__.py</code> file) for any sub_packages. When the package is imported a new namespace is created and the package's <code>__init__.py</code> is executed with that namespace as the local and global namespaces. So to answer your problem we can strip your filestore down by omitting the top-level package, which will never be considered by the interpreter when <code>test.py</code> is run as a program. It would then look like this:</p>
<pre><code>test.py
subpackage/
    __init__.py
    hello_world.py
</code></pre>
<p>Now, <code>subpackage</code> is no longer a sub-package, as we have removed the containing package as irrelevant. Focusing on why the <code>do_something</code> name is undefined might help. <code>test.py</code> does not contain any import, and so it's unclear how you are expecting <code>do_something</code> to acquire meaning. You could make it work by  using an empty <code>subpackage/__init__.py</code> and then <code>test.py</code> could read</p>
<pre><code>from subpackage.hello_world import do_something
do_something()
</code></pre>
<p>Alternatively you could us a <code>subpackage/__init__.py</code> that reads</p>
<pre><code>from hello_world import do_something
</code></pre>
<p>which establishes the <code>do_something</code> function inside the <code>subpackage</code> namespace when the package is imported. Then use a <code>test.py</code> that imports the function from the package, like this:</p>
<pre><code>from subpackage import do_something
do_something()
</code></pre>
<p>A final alternative with the same <code>__init__.py</code> is to use a <code>test.py</code> that simply imports the (sub)package and then use relative naming to access the required function:</p>
<pre><code>import subpackage
subpackage.do_something()
</code></pre>
<p>to gain access to it in your local namespace</p>
<p>With the empty <code>__init__.py</code> this could also be achieved with a <code>test.py</code> reading</p>
<pre><code>import subpackage.hello_world
subpackage.hello_world.do_something()
</code></pre>
<p>or even</p>
<pre><code>from subpackage.hello_world import do_something
do_something()
</code></pre>
<p>Ultimately the best tool to keep you straight is a clear understanding of how import works and what effect its various forms have on the importing namespace.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you have to understand how <code>import</code> alone work:</p>
<pre><code>import test.submodule.do_something
</code></pre>
<p>Would try to load <code>do_something</code> from <code>submodule</code> itself loaded from <code>test</code>.</p>
<p>You want to load something from <code>subpackage</code>, so start with that:</p>
<pre><code>import subpackage
</code></pre>
<p>Fine, <code>subpackage/__init__.py</code> is loaded.</p>
<p>Now, you want the <code>do_something()</code> function which is in the file (a "module") <code>hello_world.py</code>. Easy:</p>
<pre><code>from subpackage.hello_world import do_something
</code></pre>
<p>And you are done! Just read this line loud, it does exactly what it says: import <code>do_something</code> from the module <code>hello_world</code> which is in the <code>subpackage</code> package.</p>
<p>Try that in <code>test.py</code></p>
<pre><code>from subpackage.hello_world import do_something

do_something()
</code></pre>
<p>It should work just fine.</p>
<p>Now, the second issue:</p>
<p><code>__init__.py</code> won't be called in <code>package/</code> since you don't use <code>package/</code> as a package. <code>__init__.py</code> will be used if you do an import of <code>package/</code> or anything in it, for eg:</p>
<pre><code>from package import test
</code></pre>
<p>Otherwise, it won't be loaded at all.</p>
<p>However, if you want to load <code>do_something()</code> on the import of subpackage, put <code>from submodule.hello_word import do_something</code> in <code>subpackage/__init__.py</code>, and then, in you <code>test.py</code>, do a <code>import subpackage</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's an absolute hard-and-fast rule in Python that a name must always be defined or imported within the module where you're using it. Here you never import anything inside test.py - so as the error says, <code>do_something</code> is not defined.</p>
<p>Even if your <code>package/__init__.py</code> file was executed (which, as others have pointed out, it isn't), your code still wouldn't work as it is, because the import of <code>do_something</code> has to be done inside test.py if you want to reference it in that file.</p>
</div>
<span class="comment-copy">I presume the <code>test.py</code> you are running is <code>package/test.py</code>? If so there is no need that I can see for it to be in a package, and so <code>package/__init__.py</code> would seem to be completely irrelevant.</span>
<span class="comment-copy">Ah, I think I understand now. My mistake was in thinking that "import" worked similarly to "include" in PHP or C, and that <b>init</b>.py was code that would always run before a package was used. Thanks for the great answer.</span>
<span class="comment-copy">A pleasure, and I am glad it helped. I teach this stuff for a living, but when I'm not too busy it's great to rejoin the community and help people out</span>
<span class="comment-copy">I suspect that importing a module as a sub-package or from a sub-package may result in importing the sub-package twice: import subpackage.hello_world will re-import subpackage even when another import statement imported subpackage.  I guess the Google's Python coding guideline mentions this briefly, <a href="https://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Packages#Packages" rel="nofollow noreferrer">google-styleguide.googlecode.com/svn/trunk/â€¦</a></span>
<span class="comment-copy">This note points out the double-importing danger, <a href="https://utcc.utoronto.ca/~cks/space/blog/python/RelativeImportProblem" rel="nofollow noreferrer">utcc.utoronto.ca/~cks/space/blog/python/RelativeImportProblem</a></span>
<span class="comment-copy">NL;DR it's not a bad approch to use other packages in the package you are creating, but be careful not to externalize them.</span>
<span class="comment-copy">Thanks very much! I think I get it now.</span>
<span class="comment-copy">I don't believe you can import an individual function, which is what <code>import test.submodule.do_something</code> attempts to do. You would instead be forced to use <code>import test.submodule</code> if you wanted the reference <code>test.submodule.do_something</code> to be valid. If you <code>import os.path</code>, you will find that the <code>os</code> module is present in the importing namespace - where else could <code>os.path</code> live?</span>
