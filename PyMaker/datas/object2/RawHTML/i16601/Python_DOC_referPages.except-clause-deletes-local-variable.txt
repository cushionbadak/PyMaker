<div class="post-text" itemprop="text">
<pre><code>exc = None
try:
    raise Exception
except Exception as exc:
    pass

# ...

print(exc)
</code></pre>
<blockquote>
<p>NameError: name 'exc' is not defined</p>
</blockquote>
<p>This used to work in Python2. Why was it changed this way? If I could at least re-assign to <code>exc</code>, similar to class-level attributes</p>
<pre><code>class Foo(object):
    Bar = Bar
</code></pre>
<p>but this does not make it work either:</p>
<pre><code>exc = None
try:
    raise Exception
except Exception as exc:
    exc = exc
</code></pre>
<p>Any good hints to achieve the same? I'd prefer not to write something like this:</p>
<pre><code>exc = None
try:
    raise Exception("foo")
except Exception as e:
    exc = e

# ...

print(exc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>try</code> statement <em>explictily</em> limits the scope of the bound exception, to prevent circular references causing it to leak. See the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow"><code>try</code> statement documentation</a>:</p>
<blockquote>
<p>When an exception has been assigned using as target, <strong>it is cleared at the end of the except clause</strong>.</p>
<p>[...]</p>
<p><strong>This means the exception must be assigned to a different name to be able to refer to it after the except clause</strong>. Exceptions are cleared because with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.</p>
</blockquote>
<p>Emphasis mine; note that your <em>only option</em> is to bind the exception to a new name.</p>
<p>In Python 2, exceptions did not have a reference to the traceback, which is why this was changed.</p>
<p>However, even in Python 2, you are explicitly warned about cleaning up tracebacks, see <a href="https://docs.python.org/2/library/sys.html#sys.exc_info" rel="nofollow"><code>sys.exc_info()</code></a>:</p>
<blockquote>
<p><strong>Warning</strong>: Assigning the <em>traceback</em> return value to a local variable in a function that is handling an exception will cause a circular reference. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. Since most functions donâ€™t need access to the traceback, the best solution is to use something like <code>exctype, value = sys.exc_info()[:2]</code> to extract only the exception type and value. If you do need the traceback, make sure to delete it after use (best done with a <code>try ... finally</code> statement) or to call <code>exc_info()</code> in a function that does not itself handle an exception.</p>
</blockquote>
<p>If you do re-bind the exception, you may want to clear the traceback explicitly:</p>
<pre><code>try:
    raise Exception("foo")
except Exception as e:
    exc = e
    exc.__traceback__ = None
</code></pre>
</div>
