<div class="post-text" itemprop="text">
<p>I recently had a question in a Python exam where we were asked to check for numbers to be ending in 8 and I came across two ways and I was wondering which one was the most efficient or if there was an even better way to do so.</p>
<p>(If n is the desired number)
So, method 1:</p>
<pre><code>if n % 10 == 8:
    //do stuff here
</code></pre>
<p>Method 2:</p>
<pre><code>if str(n)[-1] == 8:
    //do stuff here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could easily test this yourself with Python's built-in <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow"><code>timeit.timeit</code></a> function:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; n = 12345678
&gt;&gt;&gt; timeit("n % 10 == 8", "from __main__ import n")
0.45508130223254284
&gt;&gt;&gt; timeit("str(n)[-1] == '8'", "from __main__ import n")
1.689859186013905
&gt;&gt;&gt;
</code></pre>
<p>As you can see from the results above, the first solution is very efficient and outperforms the second by almost four times.</p>
</div>
<div class="post-text" itemprop="text">
<p>For more fun and excitement in addition to iCodez answer, you can use the <code>dis</code> module to see what the difference in instructions is:</p>
<pre><code>wayne@wango ~ âš˜ python3.4                                                                                                                                                                                                                                               14:24:49
Python 3.4.0 (default, Mar 25 2014, 15:24:33) 
[GCC 4.6.3] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('n % 10 == 8')
  1           0 LOAD_NAME                0 (n)
              3 LOAD_CONST               0 (10)
              6 BINARY_MODULO
              7 LOAD_CONST               1 (8)
             10 COMPARE_OP               2 (==)
             13 RETURN_VALUE
&gt;&gt;&gt; dis.dis('str(n)[-1] == 8')
  1           0 LOAD_NAME                0 (str)
              3 LOAD_NAME                1 (n)
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 LOAD_CONST               2 (-1)
             12 BINARY_SUBSCR
             13 LOAD_CONST               1 (8)
             16 COMPARE_OP               2 (==)
             19 RETURN_VALUE
</code></pre>
<p>If I were to make a guess, I'd say the major time difference has to do with the string conversion. And a quick test:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; n = 12345678
&gt;&gt;&gt; m = "12345678"
&gt;&gt;&gt; timeit("n % 10 == 8", "from __main__ import n")
0.09333206800511107
&gt;&gt;&gt; timeit("m[-1] == '8'", "from __main__ import m")
0.05890634500246961
&gt;&gt;&gt; 
</code></pre>
<p>Shows this to be the case.</p>
<p>Additionally in your code, the second example would always equate to <code>False</code>, since a string will never <code>==</code> a number.</p>
</div>
<span class="comment-copy">A <i>very</i> crude (actually borderline misleading) way to think about it is how many operations are happening. Despite Method 2 being beautifully easily represented in Python, it's nasty! You're first converting an integer to a string, then indexing that string, then comparing the result against 8. Although mod 10 is harder than mod 2^k  (k arbitrary), it's still much cheaper than dealing with the string equivalent.</span>
<span class="comment-copy">Method 2 would need to be <code>str(n)[-1] == '8'</code> since you converted the number to a string.</span>
<span class="comment-copy">Should be <code>== '8'</code> in the string approach.</span>
<span class="comment-copy">what does all the <code>dis</code> output mean?</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/dis.html" rel="nofollow noreferrer"><code>dis</code> "supports the analysis of CPython bytecode by disassembling it."</a> That is what your program gets turned into before the Python interpreter can run it.</span>
<span class="comment-copy">I know what dis is, I meant what is the interpretation for this particular comparison.</span>
