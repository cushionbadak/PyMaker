<div class="post-text" itemprop="text">
<p>In Python, I know it's possible to say something like</p>
<pre><code>&gt;&gt;&gt; class C:
...   def __setattr__(self, name, value):
...     print("Hey, you can't set {0} to {1}!".format(name, value))
...
&gt;&gt;&gt; x = C()
&gt;&gt;&gt; x.y = 5
Hey, you can't set y to 5!
</code></pre>
<p>But the following still works:</p>
<pre><code>&gt;&gt;&gt; C.y = 5
&gt;&gt;&gt; print(C.y)
5
</code></pre>
<p>Is it possible to get functionality like: </p>
<pre><code>&gt;&gt;&gt; C.y = 5
Hey, you can't set y to 5!
</code></pre>
<p>Asking solely out of curiosity, as I can't really think of an example where that'd be genuinely practical.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like all special methods, <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup"><code>__setattr__</code> is accessed <strong>on the type</strong></a>; for instances that is the class, for classes, that is the <em>metaclass</em>.</p>
<p>You'll have to define it on a custom metaclass instead of directly on the class itself:</p>
<pre><code>class SetAttrMeta(type):
    def __setattr__(cls, name, value):
        print("Hey, you can't set {0} to {1}!".format(name, value))

class C(metaclass=SetAttrMeta):
    pass
</code></pre>
<p>Python then looks up <code>__setattr__</code> on the return value of <code>type(C)</code>, which here is <code>SetAttrMeta</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class SetAttrMeta(type):
...     def __setattr__(cls, name, value):
...         print("Hey, you can't set {0} to {1}!".format(name, value))
... 
&gt;&gt;&gt; class C(metaclass=SetAttrMeta):
...     pass
... 
&gt;&gt;&gt; C.spam = 'eggs'
Hey, you can't set spam to eggs!
</code></pre>
</div>
<span class="comment-copy">For python 2: <code>class C(object): __metaclass__ = SetAttrMeta</code></span>
<span class="comment-copy">@MartinKonecny: yup, the <code>object</code> is crucial there, metaclasses only work for new-style classes.</span>
<span class="comment-copy">@Martijn Pieters why does ` C = SetAttrMeta("C",(),{})` work if you need to use  object?</span>
<span class="comment-copy">Because metaclasses can <i>only</i> produce new-style classes. The <code>object</code> baseclass is implicit in that case (just like it is on Python 3).</span>
