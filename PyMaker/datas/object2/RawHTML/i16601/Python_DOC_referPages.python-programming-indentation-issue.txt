<div class="post-text" itemprop="text">
<p>I wonder if some could read this code and tell me why this is happening. I can't be the first one to come across this, but I have looked around and I can't find an answer in a book or elsewhere.</p>
<p>This has to be something minor, but I can't see it.</p>
<pre><code># This program will find and calculte the radius
# area and circumference of a circle.

def main():
    print('Radius\tArea\tCircumference')
    print('----------------------------')
    print()
    for radius in range(1, 11):
        for area in range(1, 11):
            for circumference in range(1, 11):
                pi = 3.14
                diameter = radius * 2
                radius = diameter / 2
                area = pi * radius**2
                circumference = (2 * pi) * radius

        print(radius, '\t', area, '\t',format(circumference, '.2f'))



main()
</code></pre>
<p><strong>Output:</strong></p>
<pre class="lang-none prettyprint-override"><code>Radius  Area    Circumference
----------------------------

1.0      3.14    6.28
2.0      12.56   12.56
3.0      28.26   18.84
4.0      50.24   25.12
5.0      78.5    31.40
6.0      113.04      37.68
7.0      153.86      43.96
8.0      200.96      50.24
9.0      254.34      56.52
10.0     314.0   62.80
&gt;&gt;&gt; 
</code></pre>
<p>The out-put is aligned in the first two columns, but four out of the ten in the third column seem to be tabbed to the right. ??</p>
</div>
<div class="post-text" itemprop="text">
<p>To ensure alignment, you can first make each number a string of fixed width.</p>
<pre><code>def main():
    print('Radius\tArea\tCircumference')
    print('----------------------------')
    print()
    for radius in range(1, 11):
        for area in range(1, 11):
            for circumference in range(1, 11):
                pi = 3.14
                diameter = radius * 2
                radius = diameter / 2
                area = pi * radius**2
                circumference = (2 * pi) * radius

        #print(radius, '\t', area, '\t' , format(circumference, ".2f"))
        radius_str        = "%0.2f" % radius
        area_str          = "%0.2f" % area
        circumference_str = "%0.2f" % circumference
        print("%6s\t%6s\t%6s" % (radius_str, area_str, circumference_str))

main()
</code></pre>
<p>Output:</p>
<pre><code>Radius  Area    Circumference
----------------------------

  1.00    3.14    6.28
  2.00   12.56   12.56
  3.00   28.26   18.84
  4.00   50.24   25.12
  5.00   78.50   31.40
  6.00  113.04   37.68
  7.00  153.86   43.96
  8.00  200.96   50.24
  9.00  254.34   56.52
 10.00  314.00   62.80
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to give alignment to the output <a href="https://docs.python.org/2/library/string.html#format-examples" rel="nofollow">read string formatting</a> <a href="http://repl.it/UZr" rel="nofollow">a demo</a></p>
<pre><code> print('{:&lt;10}{:&lt;10}{:&lt;10}'.format(area,radius,circumference))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a combination of the way that tab (<code>'\t'</code>) works and the way that Python's <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code></a> works.  By default, <code>print</code> inserts a space between each item it prints out, and so what's actually being printed out on (for example) line 6 is:</p>
<pre><code>6.0&lt;SPACE&gt;&lt;TAB&gt;&lt;SPACE&gt;113.04&lt;SPACE&gt;&lt;TAB&gt;&lt;SPACE&gt;37.68
</code></pre>
<p>Tab, on the other hand, advances to the next column that is a multiple of eight spaces from the start of the line.  When the second tab on line 6 is printed, 8 characters have been output since the previous tab, and so the tab ends up printing out a full eight spaces to get to the next tab stop.</p>
<p>The easiest way to fix this is to eliminate the spaces between <code>print</code> items by explicitly specifiying an empty <code>sep</code> value:</p>
<pre><code>    print(radius, '\t', area, '\t',format(circumference, '.2f'), sep='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will want to use a string format to ensure you have consistent spacing between your columns:</p>
<pre><code>line = '{:&gt;12}  {:&gt;12}  {:&gt;12}'.format(radius, area, format(circumference, '.2f'))
print(line)
</code></pre>
<p>The value 12 means each of your columns (including the text in it) will be 12 characters wide.</p>
<p>Here's the official reference to <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow">String formatting in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>i rearranged your code, now it works.</p>
<pre><code>def main():
print('Radius\tArea\tCircumference')
print('----------------------------')
print()
for radius in range(1, 11):
    for area in range(1, 11):
        for circumference in range(1, 11):
            pi = 3.14
            diameter = radius * 2
            radius = diameter / 2
            area = pi * radius**2
            circumference = (2 * pi) * radius

    print(radius, '\t', format(area, '.2f')+'\t ' ,format(circumference, '.2f'))
</code></pre>
</div>
<span class="comment-copy">How are you running it and on what OS?</span>
<span class="comment-copy">I am running on Windows 8.1 and I am using the Python Interpreter.</span>
<span class="comment-copy">why does u used. for lop for circumfrence? is that needed</span>
<span class="comment-copy">There's nothing wrong with the code, that's just how <code>\t</code> works.</span>
<span class="comment-copy">This works, but now only the circumference is formatted '.2f'. Can I make them all like that? I tried, but it did not work the way I tried it, but does work for sure.</span>
<span class="comment-copy">This works perfectly!!!!</span>
<span class="comment-copy">I'm personally a fan of this style of formatting but be aware that this is not the new style python formatting you'll see in the other answers. You could refer to this style as "printf" formatting.</span>
<span class="comment-copy">Or maybe just specifying <code>sep='\t'</code> and getting rid of the explicit <code>'\t'</code> items.</span>
