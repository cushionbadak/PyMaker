<div class="post-text" itemprop="text">
<p>I am trying to make a list that takes in numbers and removes all the old numbers in the list and returns s the result, but it keeps on giving me the error "local variable 's' referenced before assignment" How do I fix it?</p>
<pre><code>def purify(lst):
    for item in lst:
        if item%2 != 0:
            lst.remove(item)
    s.append(lst)
    s = []
    return s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should not remove items while iterating, because the list should not be changed when using iterators (this is what you do with "in").</p>
<pre><code>def purify(lst):
    s = []
    for item in lst:
        if item%2 == 0:
            s += [item]  
    return s
</code></pre>
<p>btw: This can be done very fast with numpy.</p>
<pre><code>import numpy as np
...
def purify(lst):
     indices = np.where(np.mod(lst,2) == 0)
     return np.array(lst)[indices]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It isn't clear why you want to return a list containing a single list. Why not just return the "purified" list?</p>
<pre><code>def purify(lst):
    return [item for item in lst if item % 2 == 0]
</code></pre>
<p>This uses a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. Demo:</p>
<pre><code>&gt;&gt;&gt; purify([1, 2, 3, 4, 5])
[2, 4]
</code></pre>
<hr/>
<p>For more flexibility, you could also make a version where you pass your own rule:</p>
<pre><code>def purify(lst, rule):
    return [item for item in lst if rule(item)]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; purify([1, 2, 3, 4, 5], lambda i: i % 2)
[1, 3, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to assign s to empty list first and then append.</p>
<pre><code>   def purify(lst):
        for item in lst:
            if item%2 != 0:
                lst.remove(item)
        s = []
        s.append(lst)

        return s
</code></pre>
<p>As @jonrsharpe  suggested, don't remove the item while iterating over list. The good approach is using the <strong>list comprehension</strong>:</p>
<pre><code>[i for i in lst if i%2!=0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simplify your life with filter:</p>
<pre><code>filter(lambda x: x % 2 == 0, range(5))
</code></pre>
</div>
<span class="comment-copy">This won't work. Do not modify lists while iterating over them. Copy the list and operate on the copy.</span>
<span class="comment-copy">If you are modifying <code>lst</code> directly, why not just return <code>lst</code>?  You probably either want to initialize <code>s</code> to a copy of <code>lst</code> at the top of the function and then <code>remove</code> from <code>s</code>, or just return <code>lst</code>.  Also, I'd bet you actually want <code>s.extend(lst)</code>, not <code>append</code>.</span>
<span class="comment-copy">You're trying to add to <code>s</code> before you create it. Have you used assignment before? The <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">tutorial</a> may be useful to you.</span>
<span class="comment-copy">Why do you want to return a list containing a single list?</span>
<span class="comment-copy">exactly what the error says... code reads line by line in this case, and s is defined after you append to s. that's like writing before you get a pen.</span>
<span class="comment-copy">I understand but why did you put the [] around  item?</span>
<span class="comment-copy"><code>s.append(item)</code> would be more typical than <code>s += [item]</code>, which creates two new lists</span>
<span class="comment-copy">Or just <code>return [lst]</code> - but note that there is an issue with modifying <code>lst</code>.</span>
<span class="comment-copy">Yes, you are right.</span>
<span class="comment-copy">That's a great attempt at spelling my username!</span>
<span class="comment-copy">Sorry about that mate. Fixed :)</span>
