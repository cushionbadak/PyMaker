<div class="post-text" itemprop="text">
<p>I am trying to find a better way to implement this:</p>
<pre><code>d = {"a": {"b": {"c": 4}}} 
l = ["a", "b", "c"]
for x in l:
    d = d[x]
print (d) # 4 
</code></pre>
<p>I am learning functional programming so I am just trying random example that come to my head :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/2/library/functions.html#reduce" rel="noreferrer"><code>reduce()</code></a>:</p>
<pre><code>reduce(dict.__getitem__, l, d)
</code></pre>
<p>or better still, using <a href="http://docs.python.org/2/library/operator.html#operator.getitem" rel="noreferrer"><code>operator.getitem()</code></a>:</p>
<pre><code>from operator import getitem

reduce(getitem, l, d)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; d = {"a": {"b": {"c": 4}}} 
&gt;&gt;&gt; l = ["a", "b", "c"]
&gt;&gt;&gt; from operator import getitem
&gt;&gt;&gt; reduce(getitem, l, d)
4
</code></pre>
<p>Python 3 moved the <code>reduce()</code> function out of the built-ins and into <a href="http://docs.python.org/3/library/functools.html#functools.reduce" rel="noreferrer"><code>functools.reduce()</code></a>.</p>
</div>
<span class="comment-copy">Your are indirectly calling d = d["c"] which is 4...</span>
<span class="comment-copy">Hi Nilesh, Thanks for replying, but i guess I failed to explain my question correctly to you. Please Martijn Answer below. Anyways thanks for the help :) Cheers!</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/11918852/4279">Python: Change values in dict of nested dicts using items in a list</a></span>
<span class="comment-copy">Wonderful :) Thanks ! This works like a charm.</span>
<span class="comment-copy">Why not simply <code>dict.get</code>?</span>
<span class="comment-copy">@thg435: Both work, both lead to an error if a key is missing, but the <code>dict.__getitem__</code> error would be clearer, I'd say (<code>KeyError</code> vs. <code>AttributeError</code>).</span>
<span class="comment-copy">@Eric: There is a 3rd option: <code>dict.get</code>. I prefer <code>dict.__getitem__</code> here; the error message is clearer when there is a key missing (<code>dict.get</code> will get you a <code>TypeError: 'NoneType' object has no attribute '__getitem__'</code>). The <code>lambda</code> is a lot more verbose and slower.</span>
<span class="comment-copy">@Eric: bah, so I did. <code>operator.getitem()</code> is a great idea, works beautifully, and will get a place in this answer!</span>
