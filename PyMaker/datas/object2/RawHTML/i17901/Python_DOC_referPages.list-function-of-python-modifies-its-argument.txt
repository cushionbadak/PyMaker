<div class="post-text" itemprop="text">
<p>(I am quite a newbie in Python, so lots of things puzzle me even after reading the tutorial...)</p>
<p>Initially, I had the code like the following:</p>
<pre><code>strings = ['&gt;abc', 'qwertyu', '&gt;def', 'zxcvbnm']
matrix  = zip(*strings)
for member in matrix:
    print("".join(member)) # characters are printed as expected
</code></pre>
<p>-- which did what I expected. But then for some reason I wanted to determine the number of members in matrix; as len(matrix) gave an error, I decided to copy it with converting to the list: <code>mtxlist = list(matrix)</code>. Surprisingly, after this line the content of matrix seems to be changed - or at least I cannot use it the same way as above:</p>
<pre><code>strings = ['&gt;abc', 'qwertyu', '&gt;def', 'zxcvbnm']
matrix  = zip(*strings)
mtxlist = list(matrix) # this assignment empties (?) the matrix
for member in matrix:
    print("".join(member)) # nothing printed
</code></pre>
<p>Can anybody explain what is going on there?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're using Python 3, correct?</p>
<p><code>zip</code> returns a generator that can only be iterated once. If you want to use it more than once, then your options are:</p>
<p>Write <code>zip(*strings)</code> each time you need it.</p>
<pre><code>matrix = tuple(zip(*strings))
</code></pre>
<p>(iterate <code>matrix</code> as many times as you like. This is the easy option. The downside is that if <code>zip(*strings)</code> is big then it uses a lot of memory that the generator doesn't.)</p>
<pre><code>matrix1, matrix2 = itertools.tee(zip(*strings))
</code></pre>
<p>(iterate each of <code>matrix1</code> and <code>matrix2</code> once. This is worse than the <code>tuple</code> in your usage, but it's useful if you want to partially consume <code>matrix1</code>, then use some of <code>matrix2</code>, more of <code>matrix1</code>, etc)</p>
<pre><code>def matrix():
    return zip(*strings)
# or
matrix = lambda: zip(*strings)
</code></pre>
<p>(iterate but using <code>matrix()</code>, not <code>matrix</code>, as many times as you like. Doesn't use extra memory for a copy of the result like the <code>tuple</code> solution, but the syntax for using it is a bit annoying)</p>
<pre><code>class ReusableIterable:
    def __init__(self, func):
        self.func = func
    def __iter__(self):
        return iter(self.func())

matrix = ReusableIterable(lambda: zip(*strings))
</code></pre>
<p>(iterate using <code>matrix</code> as many times as you like. Deals with the syntax annoyance, although you still have to beware that if you modify <code>strings</code> between iterations over <code>matrix</code> then you'll get different results.)</p>
</div>
<span class="comment-copy">now I start to understand, thanks a lot! (yes, I am using Python 3.3). Unfortunately I couldn't find much details about such dynamic behavior in standard library at docs.python.org - probably there's some better source to read...  Now I see that my title is not really correct as this case has nothing to do with <code>list()</code> itself</span>
<span class="comment-copy">@VasilyA: I think you're OK. It kind of does have to do with <code>list</code>, and <code>list</code> is the case you encountered it with. But <i>any</i> callable, including <code>list</code>, that iterates over something will modify that thing if the thing is a one-use generator.</span>
<span class="comment-copy">As for documentation: <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#zip</a> says that it returns an "iterator". <a href="http://stackoverflow.com/questions/9884132/">stackoverflow.com/questions/9884132</a> explains the difference between an <i>iterator</i> and an <i>iterable</i>. So the documentation tells you what you need to know, but only if you understand the jargon. <a href="http://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#iterator-types</a> documents the jargon, but perhaps doesn't make the difference as clear as it might be. There's probably more on the subject in the official tutorial.</span>
<span class="comment-copy">great, with these additional links things are much more clear. Thanks!</span>
