<div class="post-text" itemprop="text">
<p>Does anybody know what is the equivalent of batch script's <code>%*</code> in python ?</p>
<p>Clarification: in a batch file <code>%*</code> is all parameters specified in the command line  --  this is very useful if you want to forward the parameters to another program.</p>
<p>My Problem is that I want to convert one batch call to a python call :</p>
<p>Batch call is :</p>
<pre><code>trial.bat %*
</code></pre>
<p><br/>what is the equivalent python call ?(P.S. I know I can just go through the whole <code>sys.argv</code> list and append parameters in some string and pass that to the batch file, but I am looking for a simpler solution here)</p>
<p>I tried following :</p>
<pre><code>os.system('trial.bat '+sys.argv)
os.system('trial.bat '+sys.argv[1:])
</code></pre>
<p>But that is not working. I tried similar thing using <code>argparse</code> as well. Its not working either. Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv[1:]</code> is pretty close. The thing is that <code>argv</code> is a list of arguments, and <code>[1:]</code> is a slice of a list, which is again a list. If you want a string with all arguments combined, you can join them again:</p>
<pre><code>os.system('trial.bat ' + ' '.join(sys.argv[1:]))
</code></pre>
<p>Or even better, you use the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module which method’s accept a list of arguments:</p>
<pre><code>subprocess.check_call(['trial.bat'] + sys.argv[1:])
</code></pre>
<p>Subprocess is much more flexible when handling parameters and will also behave similar to the parsing in <code>argv</code>. As an example, when calling a script with the arguments <code>foo "hello world" bar</code>, argv will contain this:</p>
<pre><code>&gt;&gt;&gt; sys.argv[1:]
['foo', 'hello world', 'bar']
</code></pre>
<p>Now if we were to simply join this list, we would get a single string</p>
<pre><code>&gt;&gt;&gt; ' '.join(sys.argv[1:])
'foo hello world bar'
</code></pre>
<p>As you can see, the information of the compound argument <code>hello world</code> is lost, resulting in a completely different meaning.</p>
<p>When using <code>subprocess</code> however, you keep your list and subprocess will automatically make sure to pass these arguments correctly to the called program. So the called program will be able to get <code>hello world</code> as a combined argument too.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want <code>subprocess.Popen</code> (or one of it's convenience wrappers):</p>
<pre><code>import subprocess
import sys
process = subprocess.Popen(['trial.bat'] + sys.argv[1:])
process.wait()
</code></pre>
<p>It's definitely preferred to <code>os.system</code>.  The advantage here is that commandline arguments which may need to be quoted to keep their meaning effectively stay quoted.  Additionally, this alternative is probably safer than <code>os.system</code> since it avoids creating a subshell.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use <code>os.system</code>, you need to put the command line back together manually. Python has already parsed the command line apart into separate arguments (or MSVCRT has done it on Python's behalf). This means you need to not just concatenate them back together, but also quote them appropriately.</p>
<p>There is nothing in the stdlib that handles the "quote them appropriately" exactly the way MSVCRT wants. That's partly because Windows quoting is actually ambiguous; there are some cases where it is impossible to round-trip things. But, for simple cases, either POSIX-style quoting (with <a href="http://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow"><code>shlex.quote</code></a>) or just sticking explicit quotes around each argument will work. So, either of these:</p>
<pre><code>args = ' '.join(shlex.quote(arg) for arg in [program] + sys.argv[1:])
args = ' '.join('"{}"'.format(arg) for arg in [program] + sys.argv[1:])
</code></pre>
<p>Then:</p>
<pre><code>os.system(args)
</code></pre>
<hr/>
<p>But using <code>subprocess</code> is better than <code>os.system</code>. One reason is that you don't have to fiddle with quoting things; you can just do this:</p>
<pre><code>subprocess.check_call([program] + sys.argv[1:], shell=True)
</code></pre>
<p>Someone still needs to put the list of arguments back together in a string so it can be passed to the shell, but now that "someone" is the <code>subprocess</code> module rather than your code.</p>
</div>
<span class="comment-copy">awesome..os.system('trial.bat ' + ' '.join(sys.argv[1:])) worked for me..thanks.</span>
<span class="comment-copy">You need a shell to run a batch file, so <code>subprocess.check_call</code> will not work.</span>
<span class="comment-copy">@abarnert No, batch files can be executed by the system, they do not need to run through the shell. It definitely works.</span>
<span class="comment-copy">@poke: That's not what <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx" rel="nofollow noreferrer">the <code>CreateProcess</code> documentation</a> says.</span>
<span class="comment-copy">@abarnert The practice prooves otherwise though. Just like you can double click a bat file, you can execute it without a shell with subprocess.</span>
<span class="comment-copy">Except that you can't run a <code>.bat</code> file without a shell.</span>
<span class="comment-copy">Also, why create a <code>Popen</code> just to call <code>wait</code> on it, instead of just doing <code>call</code>?</span>
<span class="comment-copy">"Except that you can't run a .bat file without a shell." can you show the documentation for that?</span>
<span class="comment-copy">@abarnert -- I don't know about the .bat without a shell thing -- I've not used windows for a long time ... Others seem to think it works though.  As far as using Popen and then just waiting on it, I wanted to point to <code>Popen</code> since it is the underlying interface.  All of the other convenience functions are just wrappers around it (as I alluded to in my answer).  Sure, you could use <code>call</code> here.  My main point was just "don't use <code>os.system</code> -- <code>subprocess</code> is better"...</span>
<span class="comment-copy">@nephi12: <code>subprocess.Popen</code> on Windows calls <code>CreateProcess</code>. The <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx" rel="nofollow noreferrer">CreateProcess</a> docs for the <code>lpApplicationName</code> parameter say "This module can be a Windows-based application. It can be some other type of module (for example, MS-DOS or OS/2) if the appropriate subsystem is available on the local computer… To run a batch file, you must start the command interpreter; set lpApplicationName to cmd.exe and set lpCommandLine to the following arguments: /c plus the name of the batch file."</span>
