<div class="post-text" itemprop="text">
<p>I have a list that I want to calculate the average(mean?) of the values for her.
When I do this:</p>
<pre><code>import numpy as np #in the beginning of the code

goodPix = ['96.7958', '97.4333', '96.7938', '96.2792', '97.2292']
PixAvg = np.mean(goodPix)
</code></pre>
<p>I'm getting this error code:</p>
<pre><code>ret = um.add.reduce(arr, axis=axis, dtype=dtype, out=out, keepdims=keepdims)
</code></pre>
<p><code>TypeError: cannot perform reduce with flexible type</code></p>
<p>I tried to find some help but didn't find something that was helpful</p>
<p>Thank you all.</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert you list from strings to np.float:</p>
<pre><code>&gt;&gt;&gt; gp = np.array(goodPix, np.float)
&gt;&gt;&gt; np.mean(gp)
96.906260000000003
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The things are still strings instead of floats. Try the following:</p>
<pre><code>goodPix = ['96.7958', '97.4333', '96.7938', '96.2792', '97.2292']
gp2 = []
for i in goodPix:
    gp2.append(float(i))
numpy.mean(gp2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehension</p>
<pre><code>&gt;&gt;&gt; np.mean([float(n) for n in goodPix])
96.906260000000003
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a statistics library if you are using python &gt;= 3.4</p>
<p><a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer">https://docs.python.org/3/library/statistics.html</a></p>
<p>You may use it's mean method like this. Let's say you have a list of numbers of which you want to find mean:-</p>
<pre><code>list = [11, 13, 12, 15, 17]
import statistics as s
s.mean(list)
</code></pre>
<p>It has other methods too like stdev, variance, mode etc.</p>
</div>
<span class="comment-copy">hmm, i get that your solution might be a bit more pythonic, but why +7 there n +0 on mine?</span>
<span class="comment-copy">@alko Thanks a lot! work great!</span>
<span class="comment-copy">@usethedeathstar: I think you have to accept that having upvoted an answer, people aren't duty-bound to then upvote every other answer that is correct but inferior. If alko's superior answer wasn't here then sure, maybe some of those 7 people would have upvoted yours instead.</span>
<span class="comment-copy">@SteveJessop its more the fact that for a simple answer like this you get +9, while for an answer that is two pages long, people hardly ever get over +3</span>
<span class="comment-copy">@usethedeathstar: the more obviously correct an answer is, the more people are able to judge it. Probably not fair, but pretty inevitable that short answers will tend to win that contest...</span>
<span class="comment-copy">I can't guess why some answers get instantly upvoted so those +8 is a riddle for me too; as for your answer, it is not bad, but me myself won't +1 as it's about two times slower than approach with numpy, and can be rewritten shorter and clearer as <code>np.mean([float(i) for i in goodPix])</code></span>
<span class="comment-copy">true, but two times slower than the numpy approach, i assume that means 2 nanosec instead of 1 nanosec? If it aint slow, dont make it faster?</span>
<span class="comment-copy">@usethedeathstar That depends on the length of the list.</span>
