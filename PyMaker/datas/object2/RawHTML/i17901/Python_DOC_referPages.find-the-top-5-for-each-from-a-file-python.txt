<div class="post-text" itemprop="text">
<p>I have a text file with the top names of each year male and female and i need to  find the top five for each, i have a little bit so far but not enought, can i get a little help.</p>
<pre><code># [import statements]
import q1fun
# [constants]

# [rest of program code]
f = open("customers.txt", "r", encoding="utf-8")
q1fun.names(f)

def names(f):
    """
    -------------------------------------------------------
    [function description]
    -------------------------------------------------------
    Preconditions:
       [parameter name - parameter description (parameter type and constraints)]
    Postconditions:
       [returns: or prints:]
       [return value name - return value description (return value type)] 
    -------------------------------------------------------
    """
    f.seek(0)
    line = f.readline().strip()
    values = line.split(",")
    line_best = float(values[2])
    l = values

    if line_best == "m":
        for line in f:
            values = line.split(",")
            if line_best &lt; float(values[3]):
                line_best = float(values[3])
                l = values

    else:
        for line in f:
            values = line.split(",")
            if line_best &lt; float(values[3]):
                line_best = float(values[3])
                l = values

    return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a> to read your format; it is after all comma-separated. Python uses 0-based indexing, so the count is the column at index 2, not 3.</p>
<p>A <a href="http://docs.python.org/3/library/heapq.html" rel="nofollow"><code>heapq</code></a> is the most efficient method of tracking the top N values of a given sequence</p>
<pre><code>import csv
import heapq

male = []
female = []

with open('customers.txt', newline='') as infile:
    reader = csv.reader(infile)
    for row in reader:
        name, sex, count = row[0], row[1], int(row[2])
        heap = male if sex.lower() == 'm' else female
        if len(heap) &lt; 5:
            heapq.heappush(heap, (count, name))
        else:
            heapq.heappushpop(heap, (count, name))

    # `male` and `female` now hold the 5 most common names
    # each list is a sequence of (count, name) tuples
    return sorted(male), sorted(female)
</code></pre>
</div>
<span class="comment-copy">What is the format of the customers.txt? Can you post a little bit from it?</span>
<span class="comment-copy">This looks like homework, which we're not opposed to helping with, but you'll get a bit further if you post as much information as you have.</span>
<span class="comment-copy">Emma,F,18787 Isabella,F,18590 Emily,F,17415 Olivia,F,17059 Ava,F,17021 Madison,F,17006</span>
<span class="comment-copy">Darius,M,1049 Jerry,M,1044 Jaime,M,1040</span>
<span class="comment-copy">Your code reads <i>one</i> line, sets <code>line_best</code> to the float of the 4th item, and then tries to compare that float to <code>'m'</code>. That will never work..</span>
<span class="comment-copy">i keep getting an error for heapq saying its an unused variable</span>
<span class="comment-copy">Sorry, the <code>import</code> line was missing, added that now.</span>
<span class="comment-copy">i keep getting this error here                                   csv.Error: iterator should return strings, not bytes (did you open the file in text mode?)</span>
<span class="comment-copy">Right, you are using Python 3 then; I've added that information to your question as a tag and updated my answer to work with Python 3 instead.</span>
<span class="comment-copy">how do you have the list the other way around</span>
