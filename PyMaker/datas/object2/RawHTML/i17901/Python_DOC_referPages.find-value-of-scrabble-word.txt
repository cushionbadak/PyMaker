<div class="post-text" itemprop="text">
<p>I have little experience in any higher level language. Fiddled with basic and dos-batch when I was a kid.</p>
<p>I'm trying to find the point value of a word in scrabble. This kind of recursive structure seems slow and inefficient. What would be a better way to address this problem in terms of program structure/concept?</p>
<pre><code>value_list = {'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2, 
              'h': 4, 'i': 1, 'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1, 
              'o': 1, 'p': 3, 'q': 10, 'r': 1, 's': 1, 't': 1, 'u': 1, 
              'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10}

word_index = 0
total = 0

def find_value(word):
     global word_index
     global total
     x = word[word_index]
     total = total + value_list[x]
     if len(word) &gt; word_index + 1:
         word_index = word_index + 1
         find_value(word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'd loop over <code>word</code> directly and use <code>sum()</code>:</p>
<pre><code>def find_value(word):
    return sum(value_list[char] for char in word)
</code></pre>
<p>There is no need to use recursion here; the above needs no globals either. Try to avoid global state, as that easily leads to hard-to-debug problems when you start using functions in multiple locations.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you can use <code>list</code> of values instead of <code>dict</code>, and just count index for the letter <code>x</code> in this <code>list</code> as <code>ord(x) - ord('a')</code></p>
<p>Second, don't use <code>global</code>, it is a bad programming habit. You should accumulate your value in local variable and then <code>return</code> this value from the function.</p>
<p>And third, use loop instead of recursion or, even better, functions like <code>sum</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>
def find_value(word):</code></p>
<pre><code>    return sum(map(lambda x:value_list[x], list(word)))
</code></pre>
<p><br/>
</p></div>
<div class="post-text" itemprop="text">
<p>Yeah, function call is expensive is Python.</p>
<p>Martijn Pieters's method is a good example for beginners to understand <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list-comprehensions</a>.</p>
<p>If you want a more simple and readable way, try this:</p>
<pre><code>sum(value_list.values())
</code></pre>
</div>
<span class="comment-copy">I removed the <code>dict()</code> call, it was entirely redundant.</span>
<span class="comment-copy">Christ, that was fast. Thanks, I see how that is far superior.</span>
<span class="comment-copy">A bit off topic; Can you present an example of when recursion is preferable to drawing values in this manner? Given you can make statements like this, it seems completely unnecessary, and quite a bit of overhead. I only ask because the exercise I was given was to solve this problem in this manner and it seemed cumbersome to me.</span>
<span class="comment-copy">Recursion is useful when you have a problem that is most easily solved by a divide-and-conquer approach; split up the work in smaller bits and apply the same function to those bits, until you have bits small enough to make the answer almost self-evident.</span>
<span class="comment-copy">I can see how using global would become confusing in a larger program. Is there another reason it should be avoided, or just for simplicity?</span>
<span class="comment-copy">The dictionary is actually easier here, as a list would require you to convert each character to an integer index first. The <code>ord(x) - ord('a')</code> costs more than the dictionary hash calculation (in pure C).</span>
<span class="comment-copy">This doesn't sum a specific word, only all the scrabble costs of all the tiles.</span>
