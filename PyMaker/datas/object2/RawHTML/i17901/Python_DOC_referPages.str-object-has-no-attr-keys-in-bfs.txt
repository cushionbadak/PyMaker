<div class="post-text" itemprop="text">
<p>I am trying to implement a Breadth First Search function with my data set. My data is a list filled with dictionaries and have list values. An example of my data would be:</p>
<pre><code>a = [
   {'node1':['node2','node3','node5']},  
   {'node2':['node1','node8','node10']},
   {'node3':['node4','node2']},
   {'node4':['node2','node1','node3']},
   {'node5':['DEADEND']},
   {'node6':['GOAL']}
    ....
    ]
</code></pre>
<p><code>a</code> would be my <code>graph</code> input and my <code>root</code> is the first node in <code>a</code> so <code>a[0]</code> </p>
<p>I'm not sure if my BFS is correct but I am in the process of testing. I will soon have to output the path of the shortest path as well. I was wondering if someone could help me point out where my code is causing this error or how I could fix this problem THANKS!</p>
<p>error:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 72, in &lt;module&gt;
    BFS(a[0], a[0][0])
  File "test.py", line 60, in BFS
    node = t.keys()
AttributeError: 'str' object has no attribute 'keys'
</code></pre>
<p>my BFS:</p>
<pre><code>def BFS(graph, root):
    queue = []
    v = []  # set of vertices
    queue.append(root)
    while queue:
        t = queue.pop()
        node = t.keys()
        if t[node[0]][0] == 'GOAL':
            return t
        elif t[node[0]][0] == 'DEADEND':
            continue
        for edges in t[node[0]]:
            if edges not in v:
                v.append(edges)
                queue.append(edges)
    return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your error comes from <code>queue.append(edges)</code>. This is because <code>edges</code> is a node that the current node connects to, i.e. a <code>str</code>. Thus, when you pop from <code>queue</code> in your while loop, you eventually end up with a <code>str</code> in <code>queue</code>, which causes the error that you see.</p>
<p>I think you could solve your problem by replacing that line with this:</p>
<pre><code>for d in graph:
    if edges in d.keys():
        queue.append(d)
</code></pre>
</div>
<span class="comment-copy">Your <code>root</code> is a <code>str</code> and <code>str</code>s don't have a <code>.keys()</code>. How are you calling <code>BFS</code>?</span>
<span class="comment-copy">@inspectorG4dget sorry jsut made some edits</span>
<span class="comment-copy">as a side note, why not use a single <code>dict</code> as your graph? Why a list of dictionaries?</span>
<span class="comment-copy">@inspectorG4dget I wanted to preserve ordering of each node. I want to find the shortest path to the word <code>GOAL</code>. Maybe there is an easier way to do this but I thought using a list and preserving order would make it easier for me later to find the shortest path to <code>GOAL</code>. I also want to count the number of directed cycles in the graph later. I'm not sure but I thought preserving ordering would also make it easier for me later</span>
<span class="comment-copy">If you want to use a dict, but want to preserve ordering for easier debugging, that's exactly what <a href="http://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> is for.</span>
