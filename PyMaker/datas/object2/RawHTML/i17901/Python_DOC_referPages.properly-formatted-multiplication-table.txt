<div class="post-text" itemprop="text">
<p>How would I make a multiplication table that's organized into a neat table? My current code is:</p>
<pre><code>n=int(input('Please enter a positive integer between 1 and 15: '))
for row in range(1,n+1):
    for col in range(1,n+1):
        print(row*col)
    print()
</code></pre>
<p>This correctly multiplies everything but has it in list form. I know I need to nest it and space properly, but I'm not sure where that goes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Quick way (Probably too much horizontal space though):</p>
<pre><code>n=int(input('Please enter a positive integer between 1 and 15: '))
for row in range(1,n+1):
    for col in range(1,n+1):
        print(row*col, end="\t")
    print()
</code></pre>
<p>Better way:</p>
<pre><code>n=int(input('Please enter a positive integer between 1 and 15: '))
for row in range(1,n+1):
    print(*("{:3}".format(row*col) for col in range(1, n+1)))
</code></pre>
<p>And using f-strings (Python3.6+)</p>
<pre><code>for row in range(1, n + 1):
    print(*(f"{row*col:3}" for col in range(1, n + 1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Gnibbler's approach is quite elegant. I went for the approach of constructing a list of list of integers first, using the range function and taking advantage of the step argument.</p>
<p>for n = 12</p>
<pre><code>import pprint
n = 12
m = list(list(range(1*i,(n+1)*i, i)) for i in range(1,n+1))
pprint.pprint(m)
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24],
 [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36],
 [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48],
 [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60],
 [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72],
 [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84],
 [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96],
 [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108],
 [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120],
 [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132],
 [12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144]]
</code></pre>
<p>Now that we have a list of list of integers that is in the form that we want,
we should convert them into strings that are right justified with a width 
of one larger than the largest integer in the list of lists (the last integer), 
using the default argument of <code>' '</code> for the fillchar.</p>
<pre><code>max_width = len(str(m[-1][-1])) + 1
for i in m:
    i = [str(j).rjust(max_width) for j in i]
    print(''.join(i))

   1   2   3   4   5   6   7   8   9  10  11  12
   2   4   6   8  10  12  14  16  18  20  22  24
   3   6   9  12  15  18  21  24  27  30  33  36
   4   8  12  16  20  24  28  32  36  40  44  48
   5  10  15  20  25  30  35  40  45  50  55  60
   6  12  18  24  30  36  42  48  54  60  66  72
   7  14  21  28  35  42  49  56  63  70  77  84
   8  16  24  32  40  48  56  64  72  80  88  96
   9  18  27  36  45  54  63  72  81  90  99 108
  10  20  30  40  50  60  70  80  90 100 110 120
  11  22  33  44  55  66  77  88  99 110 121 132
  12  24  36  48  60  72  84  96 108 120 132 144
</code></pre>
<p>and demonstrate the elasticity of the spacing with a different size, e.g. <code>n = 9</code></p>
<pre><code>n=9
m = list(list(range(1*i,(n+1)*i, i)) for i in range(1,n+1))
for i in m:
    i = [str(j).rjust(len(str(m[-1][-1]))+1) for j in i]
    print(''.join(i))

  1  2  3  4  5  6  7  8  9
  2  4  6  8 10 12 14 16 18
  3  6  9 12 15 18 21 24 27
  4  8 12 16 20 24 28 32 36
  5 10 15 20 25 30 35 40 45
  6 12 18 24 30 36 42 48 54
  7 14 21 28 35 42 49 56 63
  8 16 24 32 40 48 56 64 72
  9 18 27 36 45 54 63 72 81
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or you could just do this (not as simplistic as the others but it works):</p>
<pre><code>def main():

    rows = int(input("Enter the number of rows that you would like to create a multiplication table for: "))
    counter = 0
    multiplicationTable(rows,counter)

def multiplicationTable(rows,counter):

    size = rows + 1

    for i in range (1,size):
        for nums in range (1,size):
            value = i*nums
            print(value,sep=' ',end="\t")
            counter += 1
            if counter%rows == 0:
                print()
            else:
                counter
main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this one looks pretty neat:</p>
<pre><code>   print '\t\t\t======================================='
   print("\t\t\t\tMultiplication Tables")
   print '\t\t\t=======================================\n'
   for i in range(1,11):
       print '\t', i,
   print
   print("___________________________________________________________________________________________________________________")

   for j in range(1,11):
       print("\n")
       print j, '|',
       for k in range(1,11):
           print '\t', j * k,
   print("\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my take for organizing the output:</p>
<pre><code>for row in range(1, 11):
    for col in range(1, 11):
        num = row * col
        if num &lt; 10: blank = '  '       # 2 blanks
        else:
            if num &lt; 100: blank  = ' '  # 1 blank
        print(blank, num, end = '')     # Empty string
    print()                             # Start a new line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Creating Arithmetic table is much simpler but i thought i should post my answer despite the fact there are so many answers to this question because no one talked about limit of table.</p>
<p><strong>Taking input from user as an integer</strong></p>
<pre><code>num = int(raw_input("Enter your number"))
</code></pre>
<p><strong>Set limit of table, to which extent we wish to calculate table for desired number</strong></p>
<pre><code>lim = int(raw_input("Enter limit of table"))
</code></pre>
<p><strong>Iterative Calculation starting from index 1</strong></p>
<p>In this, i've make use of slicing with format to adjust whitespace between number i.e., {:2} for two space adjust.</p>
<pre><code>for b in range(1, lim+1):
    print'{:2} * {:2} = {:2}'.format(a, b, a*b)
</code></pre>
<p><strong>Final CODE:</strong></p>
<pre><code>num = int(raw_input("Enter your number"))
lim = int(raw_input("Enter limit of table"))
for b in range(1, lim+1):
    print'{:2} * {:2} = {:2}'.format(a, b, a*b)
</code></pre>
<hr/>
<p><strong>OUTPUT:</strong></p>
<pre><code>Enter your number 2
Enter limit of table 20
 2 *  1 =  2
 2 *  2 =  4
 2 *  3 =  6
 2 *  4 =  8
 2 *  5 = 10
 2 *  6 = 12
 2 *  7 = 14
 2 *  8 = 16
 2 *  9 = 18
 2 * 10 = 20
 2 * 11 = 22
 2 * 12 = 24
 2 * 13 = 26
 2 * 14 = 28
 2 * 15 = 30
 2 * 16 = 32
 2 * 17 = 34
 2 * 18 = 36
 2 * 19 = 38
 2 * 20 = 40
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For this print as following</p>
<pre><code> print "%d X %d"%(row, col)
</code></pre>
<p>It will print as 2 X 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish the effect you're looking for much more easily by putting one of the loops inside the <code>print</code> call.</p>
<pre><code>n = int(input('Please enter a positive integer between 1 and 15: '))
for row in range(1, n+1):
    print('\t'.join(str(row * col) for col in range(1, n+1)))
</code></pre>
<p>This creates a generator that yields the string values of <code>row*1</code>, <code>row*2</code>, ... <code>row*n</code>, joins each of those values with a tab character, and passes the resulting string to <code>print()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that print adds a newline, and you don't want all those newlines.</p>
<p>One way to do it is to build a string for each line, and then print out the whole line in one print statement.</p>
<pre><code>n=int(input('Please enter a positive integer between 1 and 15: '))
for row in range(1,n+1):
    s = ''
    for col in range(1,n+1):
        s += '{:3} '.format(row * col)
    print(s)
</code></pre>
<p>The magic is in the <code>'{:3} '.format</code> bit. It's tricky, so here's a tutorial: <a href="http://ebeab.com/2012/10/10/python-string-format/" rel="nofollow">http://ebeab.com/2012/10/10/python-string-format/</a></p>
<p>Here's the code in action:</p>
<pre><code>Please enter a positive integer between 1 and 15: 4
  1   2   3   4 
  2   4   6   8 
  3   6   9  12 
  4   8  12  16 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>n=int(input('Please enter a positive integer between 1 and 15: '))
for row in range(1,n+1):
    for col in range(1,n+1):
        print(row*col, "\t",end = "")      
    print()

#the "\t" adds a tab each time, and the end = "" prints your string horizontally.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works pretty well for a standard multiplication table that is easy to explain in terms of coding for beginners:</p>
<pre><code>x = 12
y = 12
print ' ',
for fact in range(1, x+1):
    str(fact).rjust(6),
for fact in range(1, y+1):
    print
    print fact,
    for i in range(1,y+1):
        product = i * fact
        print str(product).rjust(5),
    print
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for x in range(1, 11):
        for y in range(1, 11):
            z = x * y
            print(z, end="\t")
        print() #creates the space after the loop
</code></pre>
<p>The code above will produce this result:
<img alt="" src="https://i.stack.imgur.com/Xevzd.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>There is plenty of answer to the multiplication table. Here I did by calling the function. Feel free to improve.</p>
<pre><code>    num = int(input('Please enter time tables for printing: '))
    upperLimit = int(input('Please enter upper limit: '))

    def printTable(num, upperLimit):   
        for i in range(0, upperLimit+1):
            print(num, 'x', i, '=', num * i)

    def main():
        printTable(num, upperLimit)

    main()    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also: </p>
<pre><code>table = 12 
for i in range(1,11): 
    print(i*table)
</code></pre>
</div>
<span class="comment-copy">What's going on in that print function -- can you elaborate?</span>
<span class="comment-copy">The (... for ... in ...) generates an iterable. The *(... for ... in ...) turns the iterable into a list of arguments to supply to print. See my answer for a discussion of how the print works. It's a fairly advanced trick, so don't worry if you don't understand it.</span>
<span class="comment-copy">@adsmith: <a href="http://docs.python.org/3/library/functions.html?highlight=print#print" rel="nofollow noreferrer"><code>print()</code></a> is a built-in function and the output string is being formatted using a <a href="http://docs.python.org/3/library/string.html?highlight=string%20formatting#format-specification-mini-language" rel="nofollow noreferrer">format specification</a> that's part of a <a href="http://docs.python.org/3/reference/expressions.html?highlight=string%20formatting#generator-expressions" rel="nofollow noreferrer">generator expression</a>.</span>
<span class="comment-copy">i get a "Syntax error while detecting tuple" on your Better way solution.</span>
<span class="comment-copy">@joeybaruch, are you using Python2? The question is tagged Python-3.x</span>
<span class="comment-copy">are you sure it adds any value to the below answers? I'd say it's far less clean.</span>
<span class="comment-copy">I appreciate your comment. Yehuda</span>
<span class="comment-copy">your code is much simpler but. it would be better if you explain a little bit further.</span>
<span class="comment-copy">@Abhinav Thx for urs insight.</span>
<span class="comment-copy">Your answer is very short and lacks context. When you have a little more reputation, you will be able to suggest improvements using comments.</span>
