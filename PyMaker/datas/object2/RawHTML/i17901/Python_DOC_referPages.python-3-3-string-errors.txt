<div class="post-text" itemprop="text">
<p>I'm trying to make a very basic calculator to familiarize myself with the basics of python. Part of the code involves asking for inputs and setting those as different variables, but the variables put in as inputs are stored as strings, even though they're entered as numbers:</p>
<pre><code>def change_x_a():
    velocity_i = input("Initial Velocity?")
    velocity_f = input("Final Velocity?")
    time = input("Time?")
    float(velocity_i)
    float(velocity_f)
    float(time)
    answer = (0.5*(velocity_i+velocity_f)*time)
    print(answer)
</code></pre>
<p>Is there a fix for this? </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/functions.html#float" rel="nofollow"><code>float()</code></a> doesn't modify the variable you pass it. Instead, it converts the value you give it and <em>returns</em> a <code>float</code>.</p>
<p>So</p>
<pre><code>float(velocity_i)
</code></pre>
<p>by itself does nothing, where</p>
<pre><code>velocity_i = float(velocity_i)
</code></pre>
<p>will give the behavior you're looking for.</p>
<hr/>
<p>Keep in mind that <code>float()</code> (and the other type-conversion functions) will throw an exception if you pass them something they're not expecting.  For a better user experience, you should <a href="http://docs.python.org/3.3/tutorial/errors.html#handling-exceptions" rel="nofollow">handle these exceptions</a><sup>1</sup>.  Typically, one does this in a loop:</p>
<pre><code>while True:
    try:
        velocity_i = float(input("Initial Velocity?"))
        break               # Valid input - stop asking
    except ValueError:
        pass                # Ignore the exception, and ask again
</code></pre>
<p>We can wrap this behavior up into a nice little function to make it more re-usable:</p>
<pre><code>def get_input(prompt, exptype):
    while True:
        try:
            return exptype( input(prompt) )
        except ValueError:
            pass                # Ignore the exception, and ask again
</code></pre>
<p>and call it like this:</p>
<pre><code>val_f = get_input('Give me a floating-point value:', float)
val_i = get_input('Give me an integer value:', int)
</code></pre>
<p><sup>1 - Wow, I just realized that I independently wrote almost the exact same code as the Python tutorial, which I linked to, after the fact.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the inputs to float when you take them from the user.</p>
<p>Try</p>
<pre><code>velocity_i = float(input("Initial Velocity?")
</code></pre>
<p>And so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Simply convert it to a float:</p>
<pre><code>velocity_i = float(input("Initial Velocity?"))
</code></pre>
<p>or an integer:</p>
<pre><code>velocity_f = int(input("Final velocity?"))
</code></pre>
</div>
<span class="comment-copy">Please fix your indentation.</span>
