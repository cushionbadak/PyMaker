<div class="post-text" itemprop="text">
<p>I write a program to weave lists of floats together, for example:</p>
<pre><code>l1 = [5.4, 4.5, 8.7]
l2 = [6.5, 7.8]
l3 = [6.7, 6.9]
</code></pre>
<p>I want to weave l1 into l2:</p>
<pre><code>[5.4, 6.5, 4.5, 7.8, 8.7]
</code></pre>
<p>And now I want it in a class so I can hold this result and weave l3 into it:</p>
<pre><code>[5.4, 6.7, 6.5, 6.9, 4.5, 7.8, 8.7]
</code></pre>
<p>The function I wrote two weave two lines together is:</p>
<pre><code>def Weave_number_rows(row1,row2): #enter 2 rows of numbers as lists
    l1 = row1
    l2 = row2
    woven = sum(zip(l1, l2), ())
    print woven 
</code></pre>
<p>How to hold the result with a class and weave the next line into it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your weave function drops the last element of <code>l2</code>; you need to use <a href="http://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>itertools.zip_longest()</code></a> here:</p>
<pre><code>try:
    from itertools import zip_longest
except ImportError:
    # Python 2
    from itertools import izip_longest as zip_longest

def weave_rows(row1, row2):
    return [v for v in sum(zip_longest(row1, row2), ()) if v is not None]
</code></pre>
<p>Note that you need to <em>return</em>, not print, your output. The <code>izip_longest()</code> call adds <code>None</code> placeholders, which we need to remove again from the <code>sum()</code> output after zipping.</p>
<p>Now you can simply weave in a 3rd list into the output of the previous two:</p>
<pre><code>weave(weave(l1, l2), l3)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; weave_rows(l1, l2)
[5.4, 6.5, 4.5, 7.8, 8.7]
&gt;&gt;&gt; weave_rows(weave_rows(l1, l2), l3)
[5.4, 6.7, 6.5, 6.9, 4.5, 7.8, 8.7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution (based on Martijn Pieters code) which avoids recursion is:</p>
<pre><code>try:
    from itertools import zip_longest
except ImportError:
    # Python 2
    from itertools import izip_longest as zip_longest

def weave_two(row1, row2):
    return [v for v in sum(zip_longest(row1, row2, fillvalue=None), ()) if v is not None]

def weave_rows(*args):
    if len(args) &lt; 2:
        return None
    current = weave_two(args[0], args[1])
    for i in range(2, len(args)):
        current = weave_two(current, args[i])
    return current
</code></pre>
<p>usage:</p>
<pre><code>&gt;&gt;&gt; weave_rows(l1, l2, l3)
[5.4, 6.7, 6.5, 6.9, 4.5, 7.8, 8.7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Function you wrote returns <code>None</code>, as no return statement is present. Replace <code>print</code> with <code>return</code> and chain calls. You might also need <code>izip_longest</code> instead of zip for lists of nonequal size:</p>
<p>With izip_longest:</p>
<pre><code>from itertools import izip_longest
def weave(l1, l2):
    return filter(None, sum(izip_longest(l1, l2), ())
</code></pre>
<p>demo</p>
<pre><code>&gt;&gt;&gt; weave(weave(l1, l2), l3)
(5.4, 6.7, 6.5, 6.9, 4.5, 7.8, 8.7)
</code></pre>
<p>Without, zip breaks on shortest argument:</p>
<pre><code>&gt;&gt;&gt; def weave_shortest(l1, l2):
        return sum(zip(l1, l2), ())
&gt;&gt;&gt; weave_shortest(l3, weave_shortest(l1, l2))
(5.4, 6.7, 6.5, 6.9)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OK, as peoples comments, this seems a strange case to start using classes but something like this should work:</p>
<pre><code>from itertools import zip_longest

class Weaver():
    def __init__(self,data):
        self.result = data

    def weave(data):
        self.result = sum(zip_longest(self.result, data),()) # or whatever version
                                                             # works best from
                                                             # the other answers

w = Weaver(l1)
w.weave(l2)
w.weave(l3)
print(w.result)
</code></pre>
<p>This creates a <code>Weaver</code> object <code>w</code> and initialises it with <code>l1</code>.  Then you weave the other lists in one by one and it stores the result internally and finally you access and print that result.</p>
</div>
<span class="comment-copy">What's wrong with simple loop? How classes/objects fit in here?</span>
<span class="comment-copy">to get familiar with classes I am trying to start out simple, the reason to use a class here is that I want to understand it better</span>
<span class="comment-copy">What should happen when one list is several elements longer or shorter than the others? Also, if you're trying to get familiar with classes, use them only where they belong.</span>
<span class="comment-copy">It seems to be wrong type of problem. I don't see how this problem helps in understanding classes. They just don't fit here.</span>
