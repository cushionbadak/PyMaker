<div class="post-text" itemprop="text">
<p>I'm working with CSV files and here is what I have so far. I get an error that my index is out of range. It finishes the first for loop and then messes up. I am trying to populate a dictionary.</p>
<pre><code>def read_table(file):
    line = file.readline()
    line = line.strip()
    keylist = line.split(',')
    d = {}
    for key in keylist:
        if key not in d:
            d[key] = []
    while line != '':
        line = file.readline()
        line = line.strip()
        val = line.split(',')
        for i in keylist:
            index = keylist.index(i)
            d[keylist[index]].append(val[index])
    return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>while</code> loop isn't going to break as soon as <code>line</code> becomes empty, it's just going to check that at the start of each loop.</p>
<p>So, when you've read all but the last line, you do this:</p>
<pre><code>while line != '': # the last line wasn't empty
    line = file.readline() # but now this one is
    line = line.strip()
    val = line.split(',') # so this returns a single value
    for i in keylist:
        index = keylist.index(i) # so this raises an IndexError
        d[keylist[index]].append(val[index])
</code></pre>
<p>The <em>smallest</em> fix is to put the check directly after each <code>readline</code>:</p>
<pre><code>while True:
    line = file.readline()
    line = line.strip()
    if not line:
        break
    val = line.split(',') # so this returns a single value
    for i in keylist:
        index = keylist.index(i) # so this raises an IndexError
        d[keylist[index]].append(val[index])
</code></pre>
<p>(Note that if there's a blank line in the middle of your file, you will return early instead of raising an error, because you're checking <code>line</code> after the <code>line = line.strip()</code>, so you can no longer distinguish between an empty line, <code>'\n'</code>, and end-of-file, <code>''</code>. If that's a problem, just move the test up one line.)</p>
<p>A <em>better</em> fix would be to just iterate over the file: <code>for line in file:</code> does exactly what you want the loop to do, without having to deal with <code>readline</code> and checking for empty strings and <code>break</code>ing from a loop and so on.</p>
<p>But a <em>much better</em> fix would be to  use the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module and let it do what it does:</p>
<pre><code>d = defaultdict(list)
reader = csv.DictReader(file)
for line in reader:
    for key, value in line.items():
        d[key].append(value)
return d
</code></pre>
<p>Or, alternatively, just build a list of dicts (which you can do with <code>list_o_dicts = list(reader)</code>), then convert it to a dict of lists at the end.</p>
</div>
<span class="comment-copy">Do you use <code>NumPy</code>? If yes, <code>dat = np.genfromtxt('dat.txt', delimiter=',')</code>.</span>
<span class="comment-copy">Opened files are iterable: <a href="http://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a>. The Python tutorials are an excellent investment of your time.</span>
<span class="comment-copy">Thanks a lot. I see where I went wrong.</span>
