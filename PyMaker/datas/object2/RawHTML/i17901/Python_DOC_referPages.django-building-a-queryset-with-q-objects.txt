<div class="post-text" itemprop="text">
<p>I have a form that allows you to pick multiple project types to filter from.  For instance, say you have the project types "Research", "Training", and "Evaluation". </p>
<p>Basically what I'm looking to do is build a queryset using Q objects like:</p>
<pre><code>projects.filter(Q(type__type="Research") | Q(type__type="Training"))
</code></pre>
<p>I'm just not sure how to build this without the filter() input being a string, which produces an error: </p>
<pre><code>querystring = ""
for t in types:
    querystring += " | Q(type__type="+t+")"
projects.filter(querystring) ## produces error: "ValueError: too many values to unpack"
</code></pre>
<p>So what would be a way to iterate over the types to create a queryset with Q objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are just building a string with no relationship to actual <code>Q()</code> query objects; start with the first <code>Q()</code> instance and add more:</p>
<pre><code>query = Q(type__type=types[0])
for t in types[1:]:
    query |= Q(type__type=t)
projects.filter(query)
</code></pre>
<p>You could also use the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code> function</a> to do this:</p>
<pre><code>from functools import reduce
from operator import or_

query = reduce(or_, (Q(type__type=t) for t in types))
projects.filter(query)
</code></pre>
<p>The <code>reduce()</code> call does exactly the same thing as the <code>for</code> loop above; take a series of <code>Q(..)</code> objects and combine them into a larger query with all the parts combined with <code>|</code> or operations.</p>
</div>
