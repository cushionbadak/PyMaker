<div class="post-text" itemprop="text">
<p>I would like to create an empty nested dictionary from an arbitrary tuple/list that holds the keys. I am trying to find a simple way to do this in Python. It looks like something that collections defaultdict should handle but I can't seem to figure it out.</p>
<pre><code>keys = ('a', 'b', 'c')
</code></pre>
<p>And a dictionary that will end up looking like this:</p>
<pre><code>d = {
    'a': {
          'b': {
                'c': {}
               }
          }
     }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suppose you could do it with <code>reduce</code>:</p>
<pre><code>def subdict(sub, key):
    return { key: sub }

d = reduce(subdict, reversed(keys), {})
</code></pre>
<p>(In Python 3, it’s <a href="http://docs.python.org/3/library/functools.html#functools.reduce"><code>functools.reduce</code></a>.)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def nested_dict(keys):
      if len(keys) == 1:
           return {keys[0]: {}}
      return {keys[0]: nested_dict(keys[1:])}
</code></pre>
</div>
<span class="comment-copy">Is the dict supposed to have an entry for keys that weren't in the tuple? If not, <code>defaultdict</code> probably isn't the way to go. If so, check out this brilliant recursive <code>defaultdict</code> constructor: <a href="http://stackoverflow.com/questions/19189274/defaultdict-of-defaultdict-nested" title="defaultdict of defaultdict nested">stackoverflow.com/questions/19189274/…</a></span>
<span class="comment-copy">That is brilliant, but I don't want to do something like <code>d[a][b][c]</code> to create it, I would like to do it as a one-liner comprehension since there will be an arbitrary # of keys.</span>
<span class="comment-copy">I expect there is a one-liner that would prepopulate the recursive <code>defaultdict</code> so that calls like <code>keys</code> would work as you expect - the real question is whether the <code>defaultdict</code> behavior of returning something for <code>d['foobar']</code> is what you want or not.</span>
<span class="comment-copy">This works great. Thx.</span>
