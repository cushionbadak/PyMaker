<div class="post-text" itemprop="text">
<p><strong><em>Background</em></strong>: For those not familiar with it, <a href="http://sublimetext.com" rel="nofollow noreferrer">Sublime Text</a> (and TextMate) provides syntax highlighting and other features through scopes which are defined by <code>.tmLanguage</code> language definition files, basically a bunch of regexes to identify various constructs in a given language, such as function definitions, various types of strings, reserved words, etc.</p>
<p>I'm the maintainer of the <a href="https://github.com/MattDMo/PythonImproved" rel="nofollow noreferrer"><em>Python Improved</em></a> package (available via <a href="https://sublime.wbond.net/packages/Python%20Improved" rel="nofollow noreferrer">Package Control</a> if you're interested) that aims to be a better language definition for Python. You can read about it at GitHub if you want, but one of the key features is that it's actually maintained, unlike many of the Sublime languages that haven't been changed or updated in years.</p>
<p><strong><em>The question</em></strong>: I've been focusing recently on double-underscored <code>__magic__</code> stuff, and after finding <a href="https://web.archive.org/web/20120504021327/http://www.rafekettler.com/magicmethods.html" rel="nofollow noreferrer">this excellent treatise</a> by Rafe Kettler on magic functions I was able to expand that part of the language definition quite a bit. However, I've had a bit less luck on finding a good list of built-in magic variable names, or magic attributes, like <code>__class__</code> or <code>__doc__</code>. I've gone through the <a href="http://docs.python.org/3.3/reference/datamodel.html" rel="nofollow noreferrer">Data Model</a> section of the docs, but it leaves a little bit to be desired for my purposes, and seems to focus mainly on magic method names. </p>
<p>So my question is, what should be included in the <code>support.variable.magic.python</code> scope? This is its definition so far:</p>
<pre class="lang-regex prettyprint-override"><code>\b__(all|bases|class|debug|dict|doc|file|members|metaclass|methods|module|name|slots|weakref)__\b
</code></pre>
<p>One of the reasons I started this project was to teach myself more about Python, and I've definitely been succeeding so far, but I'm kind of stuck at this point.</p>
<p>Just to be clear, I'm not looking for a favorite off-site resource (although if you have a handy link I'd appreciate it) and I'm not trying to start an opinionated discussion. All I'm trying to figure out is if this list looks reasonable as-is, or if there are any glaring errors. If you <em>do</em> want to be opinionated, <a href="https://github.com/MattDMo/PythonImproved/issues" rel="nofollow noreferrer">open an issue</a> and I'd be more than happy to discuss.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Alas, the Data Model document is the most complete thing I can think of, and it's not even really designed as an index.  I'm not entirely clear on what you're looking for, though; <code>__all__</code> is a module global, <code>__slots__</code> is a class attribute, <code>__weakref__</code> only appears as a string inside the slot list, and <code>__module__</code> is a function attribute et al.  I guess any special attribute that's not typically callable, then?</p>
<p>Of course, you can always ask Python.</p>
<pre><code>&gt;&gt;&gt; dir(type)
['__abstractmethods__', '__base__', '__bases__', '__basicsize__', '__call__', '__class__', '__delattr__', '__dict__', '__dictoffset__', '__dir__', '__doc__', '__eq__', '__flags__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__instancecheck__', '__itemsize__', '__le__', '__lt__', '__module__', '__mro__', '__name__', '__ne__', '__new__', '__prepare__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasscheck__', '__subclasses__', '__subclasshook__', '__weakrefoffset__', 'mro']
&gt;&gt;&gt; import sys
&gt;&gt;&gt; dir(type(sys))
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</code></pre>
<p>At a glance you're definitely missing <code>__mro__</code> and <code>__subclasses__</code>.  Complicating this somewhat is that there are some special methods only used by code that happens to be built into Python, rather than by the core language: examples include <code>__format__</code> (used by <code>str.format</code>) and the various ABC methods.</p>
<p>I don't even know what <code>__weakrefoffset__</code> <em>is</em>.</p>
<p>Note that Python 3 has a handful of new things: there's a <code>__prepare__</code> method used by metaclass shenanigans, functions and methods now use magic names for their attributes rather than noise like <code>im_self</code> (see the "User-defined functions" section of Data Model), and there's a <code>__qualname__</code> on both modules and classes.</p>
<p>Also, the <a href="http://www.python.org/dev/peps/pep-0302/#specification-part-1-the-importer-protocol" rel="noreferrer">importing PEP</a> mentions exactly what a module loader should do, including set some magic attributes: <code>__name__</code>, <code>__file__</code>, <code>__path__</code>, <code>__loader__</code>, and <code>__package__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import gc

print("\n".join(sorted({attrname for item in gc.get_objects() for attrname in dir(item) if attrname.startswith("__")})))
#&gt;&gt;&gt; __about__
#&gt;&gt;&gt; __abs__
#&gt;&gt;&gt; __abstractmethods__
#&gt;&gt;&gt; __add__
#&gt;&gt;&gt; __all__
#&gt;&gt;&gt; __and__
#&gt;&gt;&gt; __annotations__
#&gt;&gt;&gt; __author__
#&gt;&gt;&gt; __base__
#&gt;&gt;&gt; __bases__
#&gt;&gt;&gt; __basicsize__
#&gt;&gt;&gt; __bool__
#&gt;&gt;&gt; __build_class__
#&gt;&gt;&gt; __builtins__
#&gt;&gt;&gt; __cached__
#&gt;&gt;&gt; __call__
#&gt;&gt;&gt; __cause__
#&gt;&gt;&gt; __ceil__
#&gt;&gt;&gt; __class__
#&gt;&gt;&gt; __closure__
#&gt;&gt;&gt; __code__
#&gt;&gt;&gt; __complex__
#&gt;&gt;&gt; __concat__
#&gt;&gt;&gt; __contains__
#&gt;&gt;&gt; __context__
#&gt;&gt;&gt; __copy__
#&gt;&gt;&gt; __copyright__
#&gt;&gt;&gt; __credits__
#&gt;&gt;&gt; __date__
#&gt;&gt;&gt; __debug__
#&gt;&gt;&gt; __deepcopy__
#&gt;&gt;&gt; __defaults__
#&gt;&gt;&gt; __del__
#&gt;&gt;&gt; __delattr__
#&gt;&gt;&gt; __delete__
#&gt;&gt;&gt; __delitem__
#&gt;&gt;&gt; __dict__
#&gt;&gt;&gt; __dictoffset__
#&gt;&gt;&gt; __dir__
#&gt;&gt;&gt; __displayhook__
#&gt;&gt;&gt; __divmod__
#&gt;&gt;&gt; __doc__
#&gt;&gt;&gt; __enter__
#&gt;&gt;&gt; __eq__
#&gt;&gt;&gt; __excepthook__
#&gt;&gt;&gt; __exit__
#&gt;&gt;&gt; __file__
#&gt;&gt;&gt; __flags__
#&gt;&gt;&gt; __float__
#&gt;&gt;&gt; __floor__
#&gt;&gt;&gt; __floordiv__
#&gt;&gt;&gt; __format__
#&gt;&gt;&gt; __func__
#&gt;&gt;&gt; __ge__
#&gt;&gt;&gt; __get__
#&gt;&gt;&gt; __getattr__
#&gt;&gt;&gt; __getattribute__
#&gt;&gt;&gt; __getitem__
#&gt;&gt;&gt; __getnewargs__
#&gt;&gt;&gt; __getstate__
#&gt;&gt;&gt; __globals__
#&gt;&gt;&gt; __gt__
#&gt;&gt;&gt; __hash__
#&gt;&gt;&gt; __iadd__
#&gt;&gt;&gt; __iand__
#&gt;&gt;&gt; __iconcat__
#&gt;&gt;&gt; __ifloordiv__
#&gt;&gt;&gt; __ilshift__
#&gt;&gt;&gt; __imod__
#&gt;&gt;&gt; __import__
#&gt;&gt;&gt; __imul__
#&gt;&gt;&gt; __index__
#&gt;&gt;&gt; __init__
#&gt;&gt;&gt; __initializing__
#&gt;&gt;&gt; __instancecheck__
#&gt;&gt;&gt; __int__
#&gt;&gt;&gt; __inv__
#&gt;&gt;&gt; __invert__
#&gt;&gt;&gt; __ior__
#&gt;&gt;&gt; __ipow__
#&gt;&gt;&gt; __irshift__
#&gt;&gt;&gt; __isabstractmethod__
#&gt;&gt;&gt; __isub__
#&gt;&gt;&gt; __itemsize__
#&gt;&gt;&gt; __iter__
#&gt;&gt;&gt; __itruediv__
#&gt;&gt;&gt; __ixor__
#&gt;&gt;&gt; __kwdefaults__
#&gt;&gt;&gt; __le__
#&gt;&gt;&gt; __len__
#&gt;&gt;&gt; __loader__
#&gt;&gt;&gt; __lshift__
#&gt;&gt;&gt; __lt__
#&gt;&gt;&gt; __missing__
#&gt;&gt;&gt; __mod__
#&gt;&gt;&gt; __module__
#&gt;&gt;&gt; __mro__
#&gt;&gt;&gt; __mul__
#&gt;&gt;&gt; __name__
#&gt;&gt;&gt; __ne__
#&gt;&gt;&gt; __neg__
#&gt;&gt;&gt; __new__
#&gt;&gt;&gt; __newobj__
#&gt;&gt;&gt; __next__
#&gt;&gt;&gt; __not__
#&gt;&gt;&gt; __objclass__
#&gt;&gt;&gt; __or__
#&gt;&gt;&gt; __package__
#&gt;&gt;&gt; __path__
#&gt;&gt;&gt; __pos__
#&gt;&gt;&gt; __pow__
#&gt;&gt;&gt; __prepare__
#&gt;&gt;&gt; __qualname__
#&gt;&gt;&gt; __radd__
#&gt;&gt;&gt; __rand__
#&gt;&gt;&gt; __rdivmod__
#&gt;&gt;&gt; __reduce__
#&gt;&gt;&gt; __reduce_ex__
#&gt;&gt;&gt; __repr__
#&gt;&gt;&gt; __reversed__
#&gt;&gt;&gt; __rfloordiv__
#&gt;&gt;&gt; __rlshift__
#&gt;&gt;&gt; __rmod__
#&gt;&gt;&gt; __rmul__
#&gt;&gt;&gt; __ror__
#&gt;&gt;&gt; __round__
#&gt;&gt;&gt; __rpow__
#&gt;&gt;&gt; __rrshift__
#&gt;&gt;&gt; __rshift__
#&gt;&gt;&gt; __rsub__
#&gt;&gt;&gt; __rtruediv__
#&gt;&gt;&gt; __rxor__
#&gt;&gt;&gt; __self__
#&gt;&gt;&gt; __set__
#&gt;&gt;&gt; __setattr__
#&gt;&gt;&gt; __setitem__
#&gt;&gt;&gt; __setstate__
#&gt;&gt;&gt; __sizeof__
#&gt;&gt;&gt; __slots__
#&gt;&gt;&gt; __stderr__
#&gt;&gt;&gt; __stdin__
#&gt;&gt;&gt; __stdout__
#&gt;&gt;&gt; __str__
#&gt;&gt;&gt; __sub__
#&gt;&gt;&gt; __subclasscheck__
#&gt;&gt;&gt; __subclasses__
#&gt;&gt;&gt; __subclasshook__
#&gt;&gt;&gt; __suppress_context__
#&gt;&gt;&gt; __traceback__
#&gt;&gt;&gt; __truediv__
#&gt;&gt;&gt; __trunc__
#&gt;&gt;&gt; __version__
#&gt;&gt;&gt; __weakref__
#&gt;&gt;&gt; __weakrefoffset__
#&gt;&gt;&gt; __wrapped__
#&gt;&gt;&gt; __xor__
</code></pre>
</div>
<span class="comment-copy">what about operators? <code>__eq__,__lt__,etc</code> generic comparisons <code>__cmp__</code> , <code>__str__</code> among others ...</span>
<span class="comment-copy">@JoranBeasley those are defined in <code>support.function.magic.python</code> - everything from those to <code>__delete__</code> to <code>__missing__</code> to <code>__setstate__</code> - it's a pretty long list.</span>
<span class="comment-copy">Possibly <a href="https://docs.python.org/3/library/inspect.html#types-and-members" rel="nofollow noreferrer">docs.python.org/3/library/inspect.html#types-and-members</a> helps a bit</span>
<span class="comment-copy"><a href="http://www.rafekettler.com/magicmethods.html" rel="nofollow noreferrer">rafekettler.com/magicmethods.html</a> Rafe Kettler is probably down now.</span>
<span class="comment-copy">Related post - <a href="https://stackoverflow.com/q/8920341/465053">Finding a list of all double-underscore variables?</a></span>
<span class="comment-copy">Trouble is, I'm not completely clear on what should be in there either - the list is originally from TextMate by way of Sublime Text, and the only comment is <i>"magic variables which a class/module may have"</i>. I guess when I started I was thinking there'd be a clear list of magic functions, and another clear list of magic attributes, but it's not looking that clear-cut.</span>
<span class="comment-copy">Could you expand a little on this? Many of these items are already in the "magic functions" category, but not all, more are in the list I posted in the question, but not all. Additional ones, like <code>__credits__</code> are defined in some classes/modules, but aren't built-ins.</span>
<span class="comment-copy">Honestly I was just trying to make life easier by giving you a complete list of dunder names. Feel free to use it or ignore it.</span>
<span class="comment-copy">Don't get me wrong, I definitely appreciate it :) I was just wondering if there was a way of classifying or sorting them. I'll just use my google-fu to see what they each mean, and then put them in the appropriate category.</span>
