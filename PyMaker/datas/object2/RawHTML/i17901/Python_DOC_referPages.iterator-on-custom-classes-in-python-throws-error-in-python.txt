<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19151/build-a-basic-python-iterator">Build a Basic Python Iterator</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I am a wring a custom class called queue that uses iterator. I have an <code>Iterator class</code> in a seperate file called iterator.py. I get the error below when I try to iterate using for loop.</p>
<pre><code> from iterator import Iterator
    class Abstractstruc(object):
        def __init__(self):
            assert False
        def __str__(self):
            return "&lt;%s: %s&gt;" %(self.__class__.__name__,self.container)

class Queue(Abstractstruc,Iterator):

    def __init__(self, objecttype=object):
        self.container=[]
        self.size=0

    def add(self, data):
        self.container.append(data)


    def  remove(self):
        self.container.pop(0)


    def __getitem__(self,index):
        return self.container[index]


    def __iter__(self):
        return Iterator(self.container)

if __name__=='__main__':

    q=Queue(int)
    q.add(5)
    q.add(4)
    q.add(6)

    for i in q:
       print i
</code></pre>
<p>iterator.py</p>
<pre><code>class Iterator(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped
        self.offset = 0

    def __next__(self):
        if self.offset&gt;=len(self.wrapped):
            raise StopIteration
        else:
            item = self.wrapped[self.offset]
            self.offset+=1
            return item
</code></pre>
<p>I get this error message</p>
<pre><code>&lt;Queue: [5, 4, 6]&gt;
&lt;Queue: [4, 6]&gt;
4
Traceback (most recent call last):
  File "queue.py", line 78, in &lt;module&gt;
    for i in q:
TypeError: iter() returned non-iterator of type 'Iterator'
</code></pre>
<p>I do not understand why it is not returning an iterator. what fixes needed here?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>next()</code> method should not be magic, you don't need double underscores. As mentioned before, Python 3 is different.</p>
<pre><code>def next(self):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterators must themselves implement <code>__iter__</code>.  They can just return <code>self</code>.  From <a href="http://docs.python.org/2/library/stdtypes.html#iterator-types" rel="nofollow">docs</a>, note that custom iterator objects must support <code>__iter__</code> to support <code>for</code> and <code>in</code> statements.  Also, as @Robᵩ noted, since you are using Python 2 instead of 3, you need to implement <code>next()</code>, not <code>__next__()</code>.</p>
</div>
<span class="comment-copy">See <a href="http://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#iterator-types</a>: <i>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol</i>, showing you need to implement <code>__next__</code> and <code>__iter__</code>.</span>
<span class="comment-copy">@MartijnPieters - Did the spelling of <code>__next__</code> change from Python2 to Python3? Never mind, I see that it did. In Python2, one must implement <code>Iterator.next()</code>; in Python3 it is <code>Iterator.__next__()</code>.</span>
<span class="comment-copy">@Robᵩ: it did; it was renamed from <code>.next()</code> to <code>.__next__()</code>.</span>
<span class="comment-copy">Good observation, but there is a subtly here. In Python3 one <i>does</i> need the underscores. Perhaps the OP read some Python3 docs and didn't realize that they were completely applicable.</span>
<span class="comment-copy">I've changed my comment. Thanks for the tip! I should definitely get closer to Python3.</span>
<span class="comment-copy">Also, we can infer from his <code>print</code> statement that he is using Python2. So he needs to rename <code>.__next__()</code> to <code>.next()</code>.</span>
<span class="comment-copy">@Robᵩ Good catch in the inference of Python version.  I added it already, but I'll adjust the addition to account for that.</span>
