<div class="post-text" itemprop="text">
<p>Update 1:</p>
<pre><code>&gt;&gt;&gt; '\e'
'\\e'
</code></pre>
<p>Above shows that Python literal parser treats <code>'\e'</code> as two literals <code>\</code> and <code>e</code>. Am I right?  If so,
<code>re.compile('\e')</code> should also follow this rule <strong>first</strong>. i.e., It should match two lierals <code>\</code> and <code>e</code>. Like this:</p>
<pre><code>&gt;&gt;&gt; re.findall('\e','\e\e')
['\e', '\e']
</code></pre>
<p>If I am wrong, Why?</p>
<p>original question:</p>
<p>For convenience I use <strong>rer</strong> to indicate the mechanism of python standard lib re module.  </p>
<p>I have read related articles in python doc. I know the warning "it’s highly recommended that you use raw strings for all but the simplest expressions". But I just want to know if I don't use raw strings , how will the re.compile work. just take a look at this:</p>
<pre><code>&gt;&gt;&gt; A=re.compile('\e')
&gt;&gt;&gt; B=re.compile('e')
&gt;&gt;&gt; A==B
False
&gt;&gt;&gt; re.findall(A,'eee')
['e', 'e', 'e']
&gt;&gt;&gt; re.findall(B,'eee')
['e', 'e', 'e']
</code></pre>
<p>As you can see, there is nothing different between A and B when performing searching. Then:</p>
<p>Why '\e' can match string literal 'e'?</p>
<p>Can you find a string literals that will make differences?</p>
<p>Another question is why <code>re.compile('\\')</code> will raise errors. Note, this is a question about the re mechanism rather than how the re source code is written. Because I think:</p>
<p>Obviously <code>\\</code> means a literal backslash, why rer doesn't know this?  Why we need a pattern <code>\\\\</code> to match a literal backslash? Just look at this:</p>
<pre><code>&gt;&gt;&gt; re.findall('\n','\n')
['\n']
</code></pre>
<p>Perfectly works. However when you change <code>n</code> to <code>\</code>, rer raises erros. This is really hard for me to understand.</p>
<p>What will happen to rer if rer allow <code>\\</code> to match a literal backslash? Is it something like the basis of re doesn't exist? If so, can you give an example?</p>
<p>Thanks in advance. It has confused me for a long time.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><code>\e</code> and <code>e</code> are the same for the regular expressions. A <code>\</code> in a regular expression is used to indicate that the character following has a special meaning. You can find the list of valid special sequences <a href="http://docs.python.org/2/library/re.html" rel="nofollow">here</a>, and <code>\e</code> is not one of them. So, <code>\</code> in front <code>e</code> is ignored.</li>
<li><p>When you say <code>\\</code> in your code, you actually say <code>\</code> in regular expression. We know that, <code>\</code> gives special meaning to the character following that. But when we say <code>\\</code>, there is no character following that. That's why it gives that error message. To actually match <code>\</code>, you need to escape the <code>\</code> like this <code>\\\\</code>. Or you can use <a href="http://docs.python.org/2/library/re.html#raw-string-notation" rel="nofollow">raw string notation</a> like this</p>
<pre><code>re.compile(r'\\')
print(re.findall(C, "\\"))
</code></pre></li>
</ol>
<p>Quoting from <a href="http://docs.python.org/3/library/re.html" rel="nofollow">http://docs.python.org/3/library/re.html</a></p>
<blockquote>
<p>Regular expressions use the backslash character ('\') to indicate
  special forms or to allow special characters to be used without
  invoking their special meaning. This collides with Python’s usage of
  the same character for the same purpose in string literals; for
  example, to match a literal backslash, one might have to write '\\'
  as the pattern string, because the regular expression must be \, and
  each backslash must be expressed as \ inside a regular Python string
  literal.</p>
<p>The solution is to use Python’s raw string notation for regular
  expression patterns; backslashes are not handled in any special way in
  a string literal prefixed with 'r'. So r"\n" is a two-character string
  containing '\' and 'n', while "\n" is a one-character string
  containing a newline. Usually patterns will be expressed in Python
  code using this raw string notation.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>There are two layers here: first, there's Python string literal syntax, and then there's the regular expression syntax.</p>
<p><code>\e</code> doesn't have any special meaning in a Python string literal, so both characters get passed verbatim to the regular expression engine, where they match an <code>e</code> because that's what <code>\</code> means in that context: it removes any special meaning from the following character. (The fact that <code>e</code> doesn't have any special meaning in regexen to begin with doesn't mattter).</p>
</div>
<span class="comment-copy">I know the rules 'When you say \\ in your code, you actually say \ in regular expression'. I don't know why we can't say 'When you say \\ in your code, you also say \\ in regular expression'.</span>
<span class="comment-copy">@Pythoner The <code>\\ </code> is to actually escape <code>\ </code> in python code. So, we are actually  passing <code>\ </code> to the regular expression.</span>
<span class="comment-copy">Yeah, this is just what I think. According to this logic, <code>re.compile('\\')</code> should match a literal backslash because the first \ removes any special meaning from the following \.</span>
