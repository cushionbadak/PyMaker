<div class="post-text" itemprop="text">
<p>I'm new to Python and blocking on this problem:</p>
<p>trying to go from a string like this:<br/>
    mystring = '[ [10, 20], [20,50], [ [0,400], [50, 328], [22, 32] ], 30, 12 ]'  </p>
<p>to the nested list that is represented by the string. Basically, the reverse of
    str(mylist)  </p>
<p>If I try the obvious option<br/>
    list(mystring)  </p>
<p>it separates each character into a different element and I lose the nesting.</p>
<p>Is there an attribute to the list or str types that does this that I missed in the doc (I use Python 3.3)? Or do I need to code a function that does this?</p>
<p>additionnaly, how would you go about implementing that function? I have no clue what would be required to create nested lists of arbitrary depth...</p>
<p>Thanks,</p>
<p>--Louis H.</p>
</div>
<div class="post-text" itemprop="text">
<p>Call the <a href="http://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow">ast.literal_eval</a> function on the string.</p>
<p>To implement it by oneself, one could use a recursive function which would convert the string into a list of strings which represent lists. Then those strings would be passed to the function and so on.</p>
<blockquote>
<p>If I try the obvious solution <code>list(mystring)</code> it separates each character into a different element and I lose the nesting.</p>
</blockquote>
<p>This is because <code>list()</code> actually generates a list out of an <a href="http://docs.python.org/3/glossary.html#term-iterable" rel="nofollow">iterable</a>, which <code>list()</code> converts into a iterator using the <code>__iter__()</code> method of strings. When a string is converted into an iterator, each character is generated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternately if you're looking to do this for a more general conversion from strings to objects I would suggest using the <code>json</code> module. Works with dictionaries, and returns a tried and true specification that can be readily used throughout the developer and web space.</p>
<pre><code>import json
nested_list = json.reads(mystring)
# You can even go the other way
mystring == json.dumps(nested_list)
&gt;&gt;&gt; True
</code></pre>
<p>Additionally, there are convenient methods for dealing directly with files that contain this kind of string representation:</p>
<pre><code># Instead of
data_structure = json.loads(open(filename).read())
# Just
data_structure = json.load(filename)
</code></pre>
<p>The same works in reverse with <code>dump</code> instead of <code>load</code></p>
<p>If you want to know why you should use json instead of ast.literal_eval(), it's an extremely established point and you should read <a href="https://stackoverflow.com/questions/9949533/python-eval-vs-ast-literal-eval-vs-json-decode">this</a> question.</p>
</div>
<span class="comment-copy">Why do you have this string in the first place? Why do you not already have the corresponding list? What are you <i>really</i> trying to do?</span>
<span class="comment-copy">This is exactly what I was looking for, thanks!</span>
<span class="comment-copy">@hlouis If my answer has solved your question, then please <a href="http://stackoverflow.com/help/accepted-answer">accept</a> my answer.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/9949533/python-eval-vs-ast-literal-eval-vs-json-decode" title="python eval vs ast literal eval vs json decode">stackoverflow.com/questions/9949533/â€¦</a></span>
