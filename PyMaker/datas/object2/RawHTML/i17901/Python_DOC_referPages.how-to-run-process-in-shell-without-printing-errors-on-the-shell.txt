<div class="post-text" itemprop="text">
<p>I`m trying to run a process like this:</p>
<pre><code>cmd = "qry_db -value x &gt; /tmp/somefile"
os.popen(cmd)
</code></pre>
<p>sometimes, the qry_db returns an error, and it's ok. but I don't want the error to be printed on the shell, is there any way to do this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>os.popen()</code>. Use the <code>subprocess</code> module instead:</p>
<pre><code>import subprocess

with open('/tmp/somefile', 'w') as tmpfile:
    subprocess.call(['qry_db', '-value', 'x'], stdout=tmpfile, stderr=subprocess.DEVNULL)
</code></pre>
<p>This redirects <code>stderr</code> to <code>/dev/null</code>, effectively silencing errors. <code>stdout</code> is still redirected to your temporary file. You <em>may</em> want to pipe this instead, using <a href="http://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output()</code></a>, to read the output straight into your Python script. You'd still use <code>stderr=subprocess.DEVNULL</code> to silence the error output.</p>
<p><code>subprocess.DEVNULL</code> was added in Python 3.3. If you are using an earlier version of Python, use:</p>
<pre><code>import subprocess
import os

with open('/tmp/somefile', 'w') as tmpfile, open(os.devnull) as devnull:
    subprocess.call(['qry_db', '-value', 'x'], stdout=tmpfile, stderr=devnull)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>write this in the beginning of your program.</p>
<pre><code>import sys

sys.stderr = open('error.log', 'w')
</code></pre>
<p>this will write all your errors to the file <code>error.log</code>.</p>
<p>or if you don't want to log the error at all, on a Unix system, use the file <code>/dev/null</code></p>
<pre><code>sys.stderr = open('error.log', 'w')
</code></pre>
<p>Similary you can send all the output away from the terminal by using <code>sys.stdout</code></p>
</div>
<span class="comment-copy">I<code>m getting an invalid syntax error at this line: </code>with open('/tmp/somefile', 'w') as tmpfile, open(os.devnull) as devnull:`</span>
<span class="comment-copy">@user2234234: are you using Python 2.6 or older? Then you cannot use multiple context managers with one <code>with</code> line. Use nested <code>with</code> statements in that case: <code>with open(...) as tmpfile:</code> (indent next line) <code>with open(os.devnull) as devnull:</code> (indent again).</span>
<span class="comment-copy">it was my mistake! works exactly as I need! Thanks</span>
