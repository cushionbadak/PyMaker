<div class="post-text" itemprop="text">
<p>Is there a way to inspect source code (or compiled code object) and tell what modules are being imported in Python 3.3?</p>
<p>For instance, in:</p>
<pre><code>import foo

def func():
    from bar import *
    return 42
</code></pre>
<p>I'd like to be able to tell that modules foo and bar were being imported.  I'm hoping to avoid regex or pattern matching.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/3/library/ast.html"><code>ast</code> module</a> to analyse the code.</p>
<pre><code>import ast

class ImportNodeVisitor(ast.NodeVisitor):
    def visit_Import(self, node):
        print(ast.dump(node))
        self.generic_visit(node)

    def visit_ImportFrom(self, node):
        print(ast.dump(node))
        self.generic_visit(node)


with open(sourcefilename) as sf:
    tree = ast.parse(sf.read(), sourcefilename)
    ImportNodeVisitor().visit(tree)
</code></pre>
<p>produces</p>
<pre><code>Import(names=[alias(name='foo', asname=None)])
ImportFrom(module='bar', names=[alias(name='*', asname=None)], level=0)
</code></pre>
</div>
<span class="comment-copy">Did you mean to shadow the imported foo with your function def?</span>
<span class="comment-copy">Er, no.  Just my love affair with foo.  Thanks for catching.</span>
<span class="comment-copy">Excellent.  Thanks Martijn.  Hadn't played around with visiting AST nodes.</span>
