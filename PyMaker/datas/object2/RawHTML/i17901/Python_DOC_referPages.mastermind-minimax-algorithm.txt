<div class="post-text" itemprop="text">
<p>I am trying to implement in python Donald Knuth's algorithm for codebreaking mastermind in not more than 5 moves. I have checked my code several times, and it seems to follow the algorithm, as its stated here:
<a href="http://en.wikipedia.org/wiki/Mastermind_(board_game)#Five-guess_algorithm" rel="nofollow">http://en.wikipedia.org/wiki/Mastermind_(board_game)#Five-guess_algorithm</a></p>
<p>However, I get that some of the secrets take 7 or even 8 moves to accomplish. Here is the code:</p>
<pre><code>#returns how many bulls and cows there are
def HowManyBc(guess,secret):
    invalid=max(guess)+1
    bulls=0
    cows=0
    r=0
    while r&lt;4:
        if guess[r]==secret[r]:
            bulls=bulls+1
            secret[r]=invalid
            guess[r]=invalid
        r=r+1
    r=0
    while r&lt;4:
        p=0
        while p&lt;4:
            if guess[r]==secret[p] and guess[r]!=invalid:
                cows=cows+1
                secret[p]=invalid
                break
            p=p+1
        r=r+1    
    return [bulls,cows]

# sends every BC to its index in HMList
def Adjustment(BC1):
    if BC1==[0,0]:
        return 0
    elif BC1==[0,1]:
        return 1
    elif BC1==[0,2]:
        return 2
    elif BC1==[0,3]:
       return 3
    elif BC1==[0,4]:
        return 4
    elif BC1==[1,0]:
        return 5
    elif BC1==[1,1]:
        return 6
    elif BC1==[1,2]:
        return 7
    elif BC1==[1,3]:
        return 8
    elif BC1==[2,0]:
        return 9
    elif BC1==[2,1]:
        return 10
    elif BC1==[2,2]:
        return 11
    elif BC1==[3,0]:
        return 12
    elif BC1==[4,0]:
    return 13
# sends every index in HMList to its BC
def AdjustmentInverse(place):
    if place==0:
        return [0,0]
    elif place==1:
        return [0,1]
    elif place==2:
        return [0,2]
    elif place==3:
        return [0,3]
    elif place==4:
        return [0,4]
    elif place==5:
        return [1,0]
    elif place==6:
        return [1,1]
    elif place==7:
        return [1,2]
    elif place==8:
        return [1,3]
    elif place==9:
        return [2,0]
    elif place==10:
        return [2,1]
    elif place==11:
        return [2,2]
    elif place==12:
        return [3,0]
    elif place==13:
        return [4,0]   
# gives minimum of positive list without including its zeros    
def MinimumNozeros(List1):
    minimum=max(List1)+1
    for item in List1:
        if item!=0 and item&lt;minimum:
            minimum=item
    return minimum

#list with all possible guesses
allList=[]
for i0 in range(0,6):
    for i1 in range(0,6):
        for i2 in range(0,6):
            for i3 in range(0,6):
                allList.append([i0,i1,i2,i3])
TempList=[[0,0,5,4]]
for secret in TempList:
    guess=[0,0,1,1]
    BC=HowManyBc(guess[:],secret[:])
    counter=1
    optionList=[]
    for i0 in range(0,6):
        for i1 in range(0,6):
            for i2 in range(0,6):
                for i3 in range(0,6):
                    optionList.append([i0,i1,i2,i3])
    while BC!=[4,0]:
        dummyList=[] #list with possible secrets for this guess
        for i0 in range(0,6):
            for i1 in range(0,6):
                for i2 in range(0,6):
                    for i3 in range(0,6):
                        opSecret=[i0,i1,i2,i3]
                        if HowManyBc(guess[:],opSecret[:])==BC:
                            dummyList.append(opSecret)
        List1=[item for item in optionList if item in dummyList]
        optionList=List1[:] # intersection of optionList and dummyList
        item1Max=0
        for item1 in allList:
            ListBC=[] # [list of all [bulls,cows] in optionList
            for item2 in optionList:
                ListBC.append(HowManyBc(item1[:],item2[:]))
            HMList=[0]*14 # counts how many B/C there are for item2 in optionList
            for BC1 in ListBC:
                index=Adjustment(BC1)
                HMList[index]=HMList[index]+1
            m=max(HMList)#maximum [B,C], more left - less eliminated (min in minimax)
            maxList=[i for i, j in enumerate(HMList) if j == m]
            maxElement=maxList[0] #index with max
            possibleGuess=[]
            if m&gt;item1Max: #max of the guesses, the max in minimax
                item1Max=m
                possibleGuess=[i[:] for i in optionList if   AdjustmentInverse(maxElement)==HowManyBc(item1[:],i[:])]
                nextGuess=possibleGuess[0][:]
        guess=nextGuess[:]
        BC=HowManyBc(guess[:],secret[:])
        counter=counter+1
</code></pre>
<p>I get:</p>
<p>for [5, 3, 3, 4] counter is 7</p>
<p>for [5, 4, 4, 5] counter is 8 </p>
<p>If someone could help I would appreciate it very much!</p>
<p>Thanks,mike</p>
</div>
<div class="post-text" itemprop="text">
<h3>1. What's wrong with your implementation</h3>
<p>There are four mistakes.</p>
<ol>
<li><p>The comment is wrong on this line:</p>
<pre><code>m=max(HMList)#maximum [B,C], more left - less eliminated (min in minimax)
</code></pre>
<p>This is actually the "max" in the minimax (which should have been clear from the call to <code>max</code>). You are trying to find the guess that <em>minimizes</em> the <em>maximum size</em> of the groups of possible secrets that yield the same evaluation. Here we are finding the maximum size of the groups, so that's the "max".</p></li>
<li><p>That mistake caused you to make this one:</p>
<pre><code>if m&gt;item1Max: #max of the guesses, the max in minimax
</code></pre>
<p>Here you need to take the min, not the max.</p></li>
<li><p>On the following lines you pick the first item among <code>optionList</code> that would generate the same evaluation as <code>item1</code>:</p>
<pre><code>possibleGuess=[i[:] for i in optionList if   AdjustmentInverse(maxElement)==HowManyBc(item1[:],i[:])]
nextGuess=possibleGuess[0][:]
</code></pre>
<p>But that's not right: the guess we want here is <code>item1</code>, not some other guess that would generate the same evaluation!</p></li>
<li><p>Finally, you don't properly handle the case where <code>optionList</code> has only one remaining item. In this case all possible guesses are equally good at distinguishing among this item, so the minimax procedure doesn't differentiate between the guesses. In this case you should just guess <code>optionList[0]</code>.</p></li>
</ol>
<h3>2. Other comments on your code</h3>
<ol>
<li><p>The variable names are poorly chosen. For example, what is <code>item1</code>? This is the guess that you are evaluating, so surely it should be called something like <code>possible_guess</code>? I suspect that your mistake ยง1.3 above was partly caused by this poor choice of variable name.</p></li>
<li><p>There's vast amounts of needless copying. All of your <code>[:]</code> are pointless and can be removed. The variable <code>List1</code> is also pointless (why not just assign to <code>optionList</code>?), as is <code>nextGuess</code> (which not just assign to <code>guess</code>?)</p></li>
<li><p>You build <code>dummyList</code> consisting of all possible secrets that would match the last guess, but then you throw away all the entries in <code>dummyList</code> that aren't also in <code>optionList</code>. So why not just loop over <code>optionList</code> and keep the entries that match? Like this:</p>
<pre><code>optionList = [item for item in optionList if HowManyBc(guess, item)==BC]
</code></pre></li>
<li><p>You build up a table <code>HMList</code> which counts the number of occurrences of each pattern of bulls and cows. You have noted the fact that there are 14 possible (bull, cow) pairs and so you've written the functions <code>Adjustment</code> and <code>AdjustmentInverse</code> to map back and forth between (bull, cow) pairs and their indices in the list.</p>
<p>These functions could have much simpler implementations if you took a data-driven approach and used the built-in <a href="http://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="noreferrer"><code>list.index</code></a> method:</p>
<pre><code># Note that (3, 1) is not possible.
EVALUATIONS = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1),
               (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (3, 0), (4, 0)]

def Adjustment(evaluation):
    return EVALUATIONS.index(evaluation)

def AdjustmentInverse(index):
    return EVALUATIONS[index]
</code></pre>
<p>But after fixing mistake ยง1.3 above, you don't need <code>AdjustmentInverse</code> any more. And <code>Adjustment</code> could be avoided if you kept the counts in a <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> instead of a list. So instead of:</p>
<pre><code>HMList=[0]*14 # counts how many B/C there are for item2 in optionList
for BC1 in ListBC:
    index=Adjustment(BC1)
    HMList[index]=HMList[index]+1
m=max(HMList)
</code></pre>
<p>you could simply write:</p>
<pre><code>m = max(Counter(ListBC).values())
</code></pre></li>
</ol>
<h3>3. Improved code</h3>
<ol>
<li><p>Evaluating a guess (your function <code>HowManyBc</code>) can be reduced to just three lines using the class <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> from the standard library.</p>
<pre><code>from collections import Counter

def evaluate(guess, secret):
    """Return the pair (bulls, cows) where `bulls` is a count of the
    characters in `guess` that appear at the same position in `secret`
    and `cows` is a count of the characters in `guess` that appear at
    a different position in `secret`.

        &gt;&gt;&gt; evaluate('ABCD', 'ACAD')
        (2, 1)
        &gt;&gt;&gt; evaluate('ABAB', 'AABB')
        (2, 2)
        &gt;&gt;&gt; evaluate('ABCD', 'DCBA')
        (0, 4)

    """
    matches = sum((Counter(secret) &amp; Counter(guess)).values())
    bulls = sum(c == g for c, g in zip(secret, guess))
    return bulls, matches - bulls
</code></pre>
<p>I happen to prefer using letters for the codes in Mastermind. <code>ACDB</code> is so much nicer to read and type than <code>[0, 2, 3, 1]</code>. But my <code>evaluate</code> function is flexible as to how you represent the codes and guesses, as long as you represent them as sequences of comparable items, so you can use lists of numbers if you prefer.</p>
<p>Notice also that I've written some <a href="http://docs.python.org/3/library/doctest.html" rel="noreferrer">doctests</a>: these are a quick way to simultaneously provide examples in the documentation and to test the function.</p></li>
<li><p>The function <a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><code>itertools.product</code></a> provides a convenient way to build the list of codes without having to write four nested loops:</p>
<pre><code>from itertools import product
ALL_CODES = [''.join(c) for c in product('ABCDEF', repeat=4)]
</code></pre></li>
<li><p>Knuth's five-guess algorithm uses the <a href="https://en.wikipedia.org/wiki/Minimax" rel="noreferrer">minimax principle</a>. So why not implement it by taking the <a href="http://docs.python.org/3/library/functions.html#min" rel="noreferrer"><code>min</code></a> of a sequence of calls to <a href="http://docs.python.org/3/library/functions.html#max" rel="noreferrer"><code>max</code></a>?</p>
<pre><code>def knuth(secret):
    """Run Knuth's 5-guess algorithm on the given secret."""
    assert(secret in ALL_CODES)
    codes = ALL_CODES
    key = lambda g: max(Counter(evaluate(g, c) for c in codes).values())
    guess = 'AABB'
    while True:
        feedback = evaluate(guess, secret)
        print("Guess {}: feedback {}".format(guess, feedback))
        if guess == secret:
            break
        codes = [c for c in codes if evaluate(guess, c) == feedback]
        if len(codes) == 1:
            guess = codes[0]
        else:
            guess = min(ALL_CODES, key=key)
</code></pre>
<p>Here's an example run:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; knuth('FEDA')
Guess AABB: feedback (0, 1)
Guess BCDD: feedback (1, 0)
Guess AEAC: feedback (1, 1)
Guess AFCC: feedback (0, 2)
Guess FEDA: feedback (4, 0)
</code></pre></li>
</ol>
</div>
<span class="comment-copy">"I get that some of the secrets take 6 or 7 moves to accomplish" - please post examples</span>
<span class="comment-copy">for [5, 3, 3, 4] counter is 7  for [5, 4, 4, 5] counter is 8</span>
