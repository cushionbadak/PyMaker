<div class="post-text" itemprop="text">
<p>In MacOS, I used to go with the following solution:</p>
<pre><code> import socket
 import time
 server = socket.socket()
 server.bind(('127.0.0.1', 7777))
 time.sleep(5)
 server.listen(1)
</code></pre>
<p>If another socket tries to connect to this address, it will be hung up until <code>server</code> calls <code>listen</code>.</p>
<p>But this is not the case in Linux, trying to connect before the <code>listen</code> call results in <code>Connection Refused</code> immediately.</p>
<p>So is there a better way to emulate connect timeout when testing?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know the specifics of what you're testing, but you perhaps could go ahead and do an accept, and then sleep - you'll appear to get a connection in the client, but it doesn't do anything useful (for a while).  Or play with your firewall settings :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use poll or select. It returns until n seconds , which it is specified by you, or when it is writable, which means connectable for clients.
<a href="http://docs.python.org/3/library/multiprocessing.html?highlight=poll#multiprocessing.Connection.poll" rel="nofollow">http://docs.python.org/3/library/multiprocessing.html?highlight=poll#multiprocessing.Connection.poll</a></p>
</div>
<span class="comment-copy">Are you sure this is a Linux/Mac issue? and not Python versions.</span>
<span class="comment-copy">@CaptainGiraffe The Python version (2.7) is the same in both cases.</span>
<span class="comment-copy">What are you <i>testing</i> - a) the behavior of the client when the server doesn't listen, b) how long the client waits for the connection, or c) something else?</span>
