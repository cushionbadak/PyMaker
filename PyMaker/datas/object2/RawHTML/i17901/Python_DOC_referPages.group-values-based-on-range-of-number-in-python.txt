<div class="post-text" itemprop="text">
<p>I have a list as follows:</p>
<pre><code>[(220921998, 2426),
(220921999, 2427),
(220922000, 2428),
(220922001, 2429),
(220922563, 2991),
(220922564, 2992),
(220922565, 2993),
(220922566, 2994),
(220922575, 3003),
(220923958, 4386),
(220924161, 4589),
(220924170, 4598),
(220924171, 4599),
(220924172, 4600),
(220924173, 4601),
(220924912, 5340),
(220926340, 6768),
(220926341, 6769),
(220926342, 6770),
(220926343, 6771),
(220926344, 6772),
(220927052, 7480),
(220927053, 7481),
(220927054, 7482),
(220927055, 7483),
(220927056, 7484),
(220927069, 7497),
(220927071, 7499)]
</code></pre>
<p>I want to add a string to the list based on the second number. If second number in the list are within 20 or so of other second numbers, they will be assigned same 'project' name. See below:</p>
<pre><code>[(220921998, 2426,project1),
(220921999, 2427,project1),
(220922000, 2428,project1),
(220922001, 2429,project1),
(220922563, 2991,project2),
(220922564, 2992,project2),
(220922565, 2993,project2),
(220922566, 2994,project2),
(220922575, 3003,project3),
(220923958, 4386,project4),
(220924161, 4589,project5),
(220924170, 4598,project5),
(220924171, 4599,project5),
(220924172, 4600,project5),
(220924173, 4601,project5),
(220924912, 5340,project6),
(220926340, 6768,project7),
(220926341, 6769,project7),
(220926342, 6770,project7),
(220926343, 6771,project7),
(220926344, 6772,project7),
(220927052, 7480,project8),
(220927053, 7481,project8),
(220927054, 7482,project8),
(220927055, 7483,project8),
(220927056, 7484,project8),
(220927069, 7497,project8),
(220927071, 7499,project8)]
</code></pre>
<p>I have tried <code>groupby</code>, but couldn't find a way to work it for range.Any help would be great. Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>How about the following simple solution:</strong> </p>
<pre><code>data = [(220921998, 2426),
        (220921999, 2427),
        (220922000, 2428),
        (220922001, 2429),
        ...
        (220922563, 2991),
        (220922564, 2992)]

ref = 0
cnt = 0
out = []
for dt in data:
    if dt[1]-ref &gt; 20:
        cnt += 1
        ref = dt[1]
    out.append((dt[0],dt[1],'project%d'%cnt))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> with a key function that remember the last item and check it with current item.</p>
<pre><code>lst = [(220921998, 2426),
       (220921999, 2427),
       (220922000, 2428),
       (220922001, 2429),
       (220922563, 2991),
       (220922564, 2992),
       (220922565, 2993),
       (220922566, 2994),
       (220922575, 3003),
       (220923958, 4386),
       (220924161, 4589),
       ....]

class Delta:
    def __init__(self, delta):
        self.last = None
        self.delta = delta
        self.key = 1
    def __call__(self, value):
        if self.last is not None and abs(self.last - value[1]) &gt; self.delta:
            # Compare with the last value (`self.last`)
            # If difference is larger than 20, advance to next project
            self.key += 1
        self.last = value[1]  # Remeber the last value.
        return self.key

import itertools
for key, grp in itertools.groupby(lst, key=Delta(20)):
    for tup in grp:
        print(tup + ('project{}'.format(key),))
</code></pre>
<hr/>
<p>If you use Python 3.x, you can use the following function instead (See <a href="http://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow"><code>nonlocal</code></a>):</p>
<pre><code>def Delta(delta):
    last = None
    key = 1
    def keyfunc(value):
        nonlocal last, key
        if last is not None and abs(last - value[1]) &gt; delta:
            key += 1
        last = value[1]
        return key
    return keyfunc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <a href="https://pypi.python.org/pypi/cluster/1.1.0b1" rel="nofollow">https://pypi.python.org/pypi/cluster/1.1.0b1</a></p>
<pre><code>&gt;&gt;&gt; import cluster
&gt;&gt;&gt; cl = cluster.HierarchicalClustering(data, lambda x,y: abs(x[1]-y[1]))
&gt;&gt;&gt; cl.getlevel(20)
[
 [(220926340, 6768), (220926341, 6769), (220926344, 6772), (220926342, 6770), 
  (220926343, 6771)], 

 [(220927052, 7480), (220927053, 7481), (220927056, 7484), 
  (220927054, 7482), (220927055, 7483), (220927069, 7497), (220927071, 7499)], 

 [(220921998, 2426), (220921999, 2427), (220922000, 2428), (220922001, 2429)], 

 [(220922575, 3003), (220922563, 2991), (220922564, 2992), (220922565, 2993), 
  (220922566, 2994)], 

 [(220924912, 5340)], 

 [(220923958, 4386)], 

 [(220924161, 4589), (220924170, 4598), (220924171, 4599), (220924172, 4600), 
  (220924173, 4601)]
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x=[(220921998, 2426), (220921999, 2427), ....    (220927071, 7499)]

start=0
flag=False
num=0
res=[]
for n,t in enumerate(x):
    #if not flag:start=x[n][1]
    if (x[n][1]-start)&lt;20:
        res.append(t+('project%s' %num,))
        flag=True
    else:

        flag=False
        start=x[n][1]
        num+=1
        res.append(t+('project%s' %num,))
print res
</code></pre>
<p>returns</p>
<pre><code>[(220921998, 2426, 'project1'), 
(220921999, 2427, 'project1'),
 (220922000, 2428, 'project1'), 
(220922001, 2429, 'project1'),
 (220922563, 2991, 'project2'),
 (220922564, 2992, 'project2'), 
(220922565, 2993, 'project2'), 
(220922566, 2994, 'project2'), 
(220922575, 3003, 'project2'), 
(220923958, 4386, 'project3'),
 (220924161, 4589, 'project4'), 
(220924170, 4598, 'project4'), 
(220924171, 4599, 'project4'), 
(220924172, 4600, 'project4'),
 (220924173, 4601, 'project4'), 
(220924912, 5340, 'project5'),
 (220926340, 6768, 'project6'),
 (220926341, 6769, 'project6'), 
(220926342, 6770, 'project6'), 
(220926343, 6771, 'project6'), 
(220926344, 6772, 'project6'), 
(220927052, 7480, 'project7'), 
(220927053, 7481, 'project7'),
 (220927054, 7482, 'project7'), 
(220927055, 7483, 'project7'), 
(220927056, 7484, 'project7'), 
(220927069, 7497, 'project7'), 
(220927071, 7499, 'project7')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try looping through your data:</p>
<pre><code>prev = 0
currentProject = 1;
newx = []
for t[1] in x:
    if t - prev &lt;= 20:
        pass
    else:
        currentProject += 1
    newx.append((t[0],t[1],"project"+currentProject))
</code></pre>
<p><strong>Edit:</strong> Sorry, I just realized that <code>prev=None</code> doesn't work. I could have done some checking for whether <code>prev</code> is <code>None</code>, but I decided that for the data given, just doing <code>prev=0</code> works just the same. Thanks for pointing out my mistake!</p>
</div>
<span class="comment-copy">this is definitely the most simple one yet. Thank you much. All of the answers have been phenomenal. Now, I am confused which one to accept :)</span>
<span class="comment-copy">Wow, this works great. Thank you much. But, i do not understand how the <code>Delta</code> class works.</span>
<span class="comment-copy">@microbeatic, <code>__call__</code> is called if the class instance is called. See <a href="http://docs.python.org/2/reference/datamodel.html#object.__call__" rel="nofollow noreferrer"><code>__call__</code></a></span>
<span class="comment-copy">@falsetru +1 nice method\</span>
<span class="comment-copy">Wow, didn't know about this module. It actually creates separate cluster. I will need this in future. Thank you</span>
<span class="comment-copy">+1 cluster is a nice module</span>
<span class="comment-copy">thank you. this is much more intuitive.</span>
<span class="comment-copy">@microbeatic you are welcome :)</span>
<span class="comment-copy">@falsetru -- That's not too hard to fix... <code>x = iter(x); prev = next(x); newx = [prev + ('project1',)]</code> ...</span>
