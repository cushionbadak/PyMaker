<div class="post-text" itemprop="text">
<p>I have a list as below. </p>
<pre><code>list = ['perfect','data1', 'queryda873', 'server187', 'tuplip91', 'time']
</code></pre>
<p>How can I separate tokens and numbers in the list? I want something like:</p>
<pre><code>list = ['perfect','data', '1', 'queryda','873', 'server','187', 'tulip','91', 'time']
</code></pre>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using regular expressions (<a href="http://docs.python.org/3/library/re.html" rel="nofollow"><code>re</code></a>). In particular, <code>\d+|\D+</code>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; L = ['perfect','data1', 'queryda873', 'server187', 'tuplip91', 'time']
&gt;&gt;&gt; 
&gt;&gt;&gt; [s for v in (re.findall(r'\d+|\D+', s) for s in L) for s in v]
['perfect', 'data', '1', 'queryda', '873', 'server', '187', 'tuplip', '91', 'time']
</code></pre>
<p>By the way, you shouldn't name your variables <code>list</code>, since that name is taken by a built-in function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I realize this already has an accepted answer, but I had to add this alternative, simply because I think it's easier to read and understand.</p>
<pre><code>import re
import itertools

lst = ['perfect','data1', 'queryda873', 'server187', 'tuplip91', 'time']
broken = map(lambda s: re.findall(r'\d+|\D+', s), lst)
merged = list(itertools.chain.from_iterable(broken))
# merged is now ['perfect', 'data', '1', 'queryda', '873', 'server', '187', 'tuplip', '91', 'time']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/2.7/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby</a></p>
<pre><code>l = ['perfect','data1', 'queryda873', 'server187', 'tuplip91', 'time']
from itertools import groupby
[''.join(g) for x in l for k,g in groupby(x, key=lambda y: y.isdigit())]
['perfect', 'data', '1', 'queryda', '873', 'server', '187', 'tuplip', '91', 'time']
</code></pre>
</div>
<span class="comment-copy">what do you do about one2three? one, 2, three?</span>
<span class="comment-copy">I am trying to use "match = re.match(r"(....([0-9]+..)"  but have no idea.</span>
<span class="comment-copy">Good point about <code>list</code> as a name, but <a href="http://www.python.org/dev/peps/pep-0008/#names-to-avoid" rel="nofollow noreferrer">Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.</a></span>
<span class="comment-copy">@nmichaels I'd say it's not a big deal for small snippets like this, but I'll change it if you like.</span>
<span class="comment-copy">Oh, I agree. I was just being pedantic.</span>
<span class="comment-copy">That's great, but good lord is that hard to read.</span>
<span class="comment-copy">@theteddyboy Do all the appending first, then print at the end. There's an issue with <code>myList=mylist.append(s)</code>.</span>
<span class="comment-copy">sorry can you explain the itertools.chain.from_iterable(broken)? I tried to run but error alerts.</span>
<span class="comment-copy">What error did you get, and what version of python are you using?</span>
<span class="comment-copy">i'm using 2.7.6</span>
<span class="comment-copy">@theteddyboy <code>chain.from_iterable</code> "flattens" a nested iterable. (i.e., turns <code>[[1,2],[3,4]]</code> into <code>iter([1,2,3,4])</code>)</span>
<span class="comment-copy">I have no warnings or errors with that code on 2.7.3.  I'm not sure what you're seeing, though.</span>
