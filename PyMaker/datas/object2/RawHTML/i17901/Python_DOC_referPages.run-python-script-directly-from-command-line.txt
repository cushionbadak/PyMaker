<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/env python
</code></pre>
<p>I put that at the top of a script.  I've seen that should make the script runnable from the command line without the need for <code>python programname.py</code>.  Unless I'm misunderstanding I should be able to use <code>programname.py</code> as long as I have the above line at the top of the script.  Is this correct?  </p>
<p>It isn't working for me I just get an error indicating that I would have to use <code>python</code> at the beginning of the 'call'.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Universal running of Python scripts</h1>
<p>You can pretty much universally run without the shebang (<code>#!</code>) with</p>
<pre><code>python myscript.py
</code></pre>
<p>Or nearly equivalently (it places the current directory on your path and executes the module named <code>myscript</code>) <strong>(preferably do this!)</strong>:</p>
<pre><code>python -m myscript
</code></pre>
<p>from the command line, as long as you have Python installed and on your path environment variable (i.e. set to run with <code>python</code>, which, if installed, would typically be the case).</p>
<h1>Shebangs (<code>#!</code>) are a Unix thing.</h1>
<p>The shebang, as you're using it, is typically for running on a Unix platform (typically Apple or Linux). Windows would typically require cygwin to use the shebang.</p>
<p>You can usually default to whatever python is available on your system path with:</p>
<pre><code>#!/usr/bin/env python
</code></pre>
<p>Assuming you're on a Unix, you might try other locations for your python setup, like:</p>
<pre><code>#!/usr/bin/python
</code></pre>
<h1>Muddling through</h1>
<p>You can see what python you're currently using by using the unix <code>which</code> command, so if you want to see where your python is coming from, use this command:</p>
<pre><code>which python
</code></pre>
<p>or on Windows (cygwin probably can run the shebang):</p>
<pre><code>where python
</code></pre>
<p>On Linux/Unix, you'll need execution perms to run the file as well, in that manner. Use chmod </p>
<pre><code>chmod +x myscript.py
</code></pre>
<p>(chmod also may apply to Cygwin in Windows)</p>
<p>If you're not running as root, you may require <code>sudo</code>, and that would be </p>
<pre><code>sudo chmod +x myscript.py
</code></pre>
<p>And then attempt to run (within the same directory) with</p>
<pre><code>./myscript.py 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>make the file executable</p>
<pre><code>sudo chmod +x /path/to/file.py
</code></pre>
<p>and then from the same directory as file.py:</p>
<pre><code>./file.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You also can use <a href="https://docs.python.org/3/library/webbrowser.html" rel="nofollow noreferrer">webbrowser</a> module this way:</p>
<pre><code>python -m webbrowser -t "http://www.python.org"
</code></pre>
</div>
