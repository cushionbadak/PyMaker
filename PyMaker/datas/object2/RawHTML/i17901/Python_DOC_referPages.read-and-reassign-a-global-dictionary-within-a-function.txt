<div class="post-text" itemprop="text">
<p>I have run into a bug in my Python code that seems very strange to me, and I now feel confused about how global dictionaries work. </p>
<p>My sample code:</p>
<pre><code>myDict={'two':2,'three':3}

def f():    
    print myDict        
f()
</code></pre>
<p>Provides the output I expect: <code>{'two': 2, 'three': 3}</code></p>
<p>However, if I change the code with one single line:</p>
<pre><code>myDict={'two':2,'three':3}

def f():    
    print myDict        
    myDict={}
f()
</code></pre>
<p>then I get </p>
<pre><code> Traceback (most recent call last):
  File "test.py", line 9, in &lt;module&gt;
    f()
  File "proba.py", line 7, in f
    print myDict        
UnboundLocalError: local variable 'myDict' referenced before assignment
</code></pre>
<p>My questions:</p>
<ol>
<li>If I can print the global <code>myDict</code> in function <code>f</code>, why can't I reassign it?</li>
<li>How can the line <code>myDict={}</code> break the print command, despite that it is executed later?</li>
</ol>
<p>I'm using Python 2.7. 
Thank you for your help!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>1. If I can print the global myDict in function f, why can't I reassign it?</p>
</blockquote>
<p>To assign to a global variable from a function you need to use a <code>global</code> directive. Otherwise Python will create a local variable with the same name instead.</p>
<pre><code>global myDict
</code></pre>
<p>Add that to the top of the function.</p>
<blockquote>
<p>2. How can the line myDict={} break the print command, despite that it is executed later?</p>
</blockquote>
<p>Before it is ever executed, Python analyzes the entire function body to figure out what variables are local and which are global. Adding the assignment changes Python's analysis. It changes <code>myDict</code> from a global to a local variable.</p>
<p>This affects the print statement. Instead of printing the global <code>myDict</code> it prints a local variable. And at the point of printing the variable doesn't yet exist, thus the error.</p>
</div>
<div class="post-text" itemprop="text">
<p>When Python compiles your function, any variables you assign to anywhere are local variables, any variables you never assign to are global variables. The best description of this is <a href="http://docs.python.org/2/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow">What are the rules for local and global variables in Python</a> in the FAQ.</p>
<p>If you want to force a variable to be global even though you assign to it, you need a <a href="http://docs.python.org/3/reference/simple_stmts.html#global" rel="nofollow"><code>global</code></a> statement:</p>
<pre><code>def f():
    global myDict
    print myDict
    myDict = {}
</code></pre>
<p>In fact, any time it's not obvious to you whether Python will make the variable global or not, if you want it to be global, you should use a <code>global</code> statement.</p>
<p>(And of course you should use global variables as sparingly as possible, which means you shouldn't run into this too often.)</p>
</div>
<span class="comment-copy">Try adding <code>global myDict</code> at the top of your code and see what happens</span>
<span class="comment-copy">Thanks! I learned from SO that you do not need the global keyword ford mutable (i.e. dict) objects, but now I see that you do need it for reassigning them. And I would simply never figure out the second one myself...</span>
