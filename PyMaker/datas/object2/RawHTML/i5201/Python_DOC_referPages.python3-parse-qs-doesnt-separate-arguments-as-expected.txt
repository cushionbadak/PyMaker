<div class="post-text" itemprop="text">
<p>I'm using the <code>urllib</code>-library in Python3. The code:</p>
<pre><code>from urllib.parse import parse_qs
parse_qs('https://www.example.com/?api-url=%2Fp%2Ftest-test-test-000761di%3Fajax%3Dtrue&amp;api-params=%3Ft%3Dst-fs%26tc%3Dtrue')
</code></pre>
<p>returns the dictionary:</p>
<pre><code>{
  'https://www.example.com/?api-url': ['/p/test-test-test-000761di?ajax=true'], 
  'api-params': ['?t=st-fs&amp;tc=true']
}
</code></pre>
<p>Can someone explain to me how the dictionary is constructed?</p>
<p>Why is <code>...?api-url</code> and <code>&amp;api-params</code>a key, but <code>?ajax</code>, <code>?t</code>, <code>&amp;tc</code> isn't? Where can I read on the topic?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>parse_qs()</code> expects <em>just the query string</em>. You passed in a full URL.</p>
<p>If you pass in <em>only the query string</em>, you get:</p>
<pre><code>&gt;&gt;&gt; parse_qs('api-url=%2Fp%2Ftest-test-test-000761di%3Fajax%3Dtrue&amp;api-params=%3Ft%3Dst-fs%26tc%3Dtrue')
{'api-url': ['/p/test-test-test-000761di?ajax=true'], 'api-params': ['?t=st-fs&amp;tc=true']}
</code></pre>
<p>This is the correct result for the given query string; the <code>?</code>, <code>=</code> and <code>&amp;</code> characters you see in the output are <em>escaped</em> in the input query string.</p>
<p>For example, the escaped value for <code>api-params</code> is <code>%3Ft%3Dst-fs%26tc%3Dtrue</code>; the correct interpretation is the unquoted value for that string, which is <code>'?t=st-fs&amp;tc=true'</code>.</p>
<p>You could then parse those values <em>again</em>, to remove the second layer of query-string syntax, but you must parse out the query strings:</p>
<pre><code>&gt;&gt;&gt; parsed['api-url'][0].partition('?')[-1]
'ajax=true'
&gt;&gt;&gt; parse_qs(parsed['api-url'][0].partition('?')[-1])
{'ajax': ['true']}
&gt;&gt;&gt; parsed['api-params'][0].partition('?')[-1]
't=st-fs&amp;tc=true'
&gt;&gt;&gt; parse_qs(parsed['api-params'][0].partition('?')[-1])
{'t': ['st-fs'], 'tc': ['true']}
</code></pre>
<p>I used <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer"><code>str.partition()</code></a> to split the strings on the first <code>?</code> character, and to get everything after that first character to be parsed as the query string.</p>
</div>
<span class="comment-copy">Thank you! Can you expand a little on your second paragraph (why this is the expected result)?</span>
<span class="comment-copy">@user9115052: the values may themselves be URLs, but they were properly quoted to protect them from accidentally being interpreted as query parameters.</span>
<span class="comment-copy">@user9115052: so each value for each of the two keys are <i>separate, partial URLs with query strings</i>, those query strings can only be part of another query string if first escaped.</span>
<span class="comment-copy">Oh, so my url contains two query-parameters, which themselves may contain query parameters?</span>
<span class="comment-copy">I'm mainly interested in getting out the <code>/p/test-test-test-000761di</code> out of my url. Can you point me in the right direction, how to extract these information properly?</span>
