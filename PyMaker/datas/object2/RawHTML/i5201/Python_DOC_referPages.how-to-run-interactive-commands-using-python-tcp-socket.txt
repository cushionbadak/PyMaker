<div class="post-text" itemprop="text">
<p>Say if I wanted to run vim ./foo.txt I want to be able to edit foo.txt with my tcp socket client.</p>
<p>But whenever I try to do this it executes on the server but not on my client.</p>
<p>I do not want to use paramiko or any other ssh-like modules I want to stay using the python socket module.</p>
<p>I am using python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest opening a command on the server (where the file is) with the subprocess module. This way to can keep putting information into it. You can have the client send a message which tells the server to send x to the subprocess.</p>
<p>An example would be like this:</p>
<pre><code>import subprocess

# Assuming the variable x is that the socket is sending the server...
editing_foo = subprocess.Popen(['vim', './foo.txt'], stdin=PIPE)  # stdin must be PIPE to communicate
editing_foo.communicate(input=x)  # input is a string which is sent to the subprocess
# x could have been 'i' or ':q!' for example
</code></pre>
</div>
<span class="comment-copy">You'll need to find a way to get your keypresses on the client, over to the server, and then into vim. And to get vim's display output back to the client and display it.</span>
<span class="comment-copy">When I run this it says PIPE is undefined any answer?</span>
<span class="comment-copy">Nevermind fixed it!</span>
<span class="comment-copy">Cool! I'm happy I could help. Check out the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> documentation page on the Python website for more info about the module.</span>
