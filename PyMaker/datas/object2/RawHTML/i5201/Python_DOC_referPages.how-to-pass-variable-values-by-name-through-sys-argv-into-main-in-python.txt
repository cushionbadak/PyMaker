<div class="post-text" itemprop="text">
<p>I need to pass arguments to my python program, something like:</p>
<pre><code>py program.py var1=value var2=value var3=value var4=value

def main(*args):
    variable1 = args[var1]
    ...
</code></pre>
<p>Basically, I need to be able to assign argument value to a variable, however, the user may pass in the arguments in any order, so I need to make sure that the proper argument value is being used in the right place in the code. </p>
<p>Is this possible? If so, how?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to stick with your current format, you could do this by use of a dictionary.</p>
<p>Assumptions: </p>
<p>Every variable passed in will be by the format <code>varname=value</code>.</p>
<p>You know what variable names the user is supposed to put, meaning you're expecting certain variables to be declared to be used in your program and you know what names the user will give them.</p>
<p>The code basically looks like this:</p>
<pre><code>from sys import argv

def main():
    #All possible variables the user could input
    parameter_dict = {}
    for user_input in argv[1:]: #Now we're going to iterate over argv[1:] (argv[0] is the program name)
        if "=" not in user_input: #Then skip this value because it doesn't have the varname=value format
            continue
        varname = user_input.split("=")[0] #Get what's left of the '='
        varvalue = user_input.split("=")[1] #Get what's right of the '='
        parameter_dict[varname] = varvalue

    #Now the dictionary has all the values passed in, and you can reference them by name, but you'll need to check if they're there.

    #Then to access a variable, you do it by name on the dictionary.
    #For example, to access var1, if the user defined it:
    if "var1" in parameter_dict:
        print("var1 was: " + parameter_dict["var1"])
    else: #Or if the user did not define var1 in their list:
        print("User did not give a value for var1")


main()
</code></pre>
<p>Testing (filename is <code>test.py</code>):</p>
<pre><code>$python3 test.py var2=Foo
User did not give a value for var1
$python3 test.py var1=Bar
var1 was: Olaf
$python3 test.py var7=Goose var3=Pig var1=Grape
var1 was: Grape
$python3 test.py hugo=victor var1=Napoleon figs=tasty
var1 was: Napoleon
</code></pre>
<p>Doing this, you could also iterate over all the user's inputs, albeit dictionaries don't preserve order:</p>
<pre><code>#Inside main() after previous items    
    for varname in parameter_dict:
        print(varname + "=" + parameter_dict[varname]) 
</code></pre>
<p>Output:</p>
<pre><code>$python3 test.py frying=pan Panel=Executive Yoke=Oxen
User did not give a value for var1
frying=pan
Yoke=Oxen
Panel=Executive
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Personally, I would use <code>argparse.ArgumentParser</code>. See <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html</a> for details.</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--var1', action="store");
parser.add_argument('--var2', action="store");

args = parser.parse_args();
print("var1 = %s" % args.var1);
print("var2 = %s" % args.var2);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could always use <code>os.environ</code> if you want to do this.</p>
<pre><code>from os import environ

def main():
    variable1 = environ.get("var1", False)
    variable2 = environ.get("var2", False)
    print(variable1, variable2)

main()
</code></pre>
<p>Then you would do <code>var1=value1 var2=value2 python test.py</code> to pass the values, instead of passing them as arguments. This sets them as environment variables, and executes your program which picks up the variables from the shell environment. This code also uses the <code>.get()</code> method to provide a default value (False in this case), so you can easily check if a variable is present or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to look at <a href="https://docs.python.org/3.6/library/sys.html" rel="nofollow noreferrer">sys.argv</a>. </p>
<p>In your example...</p>
<pre><code>py program.py var1=value var2=value var3=value var4=value

def main(*args):
    variable1 = args[var1]
    ....
</code></pre>
<p><code>argv[0]</code> = <code>program.py</code></p>
<p><code>argv[1]</code> = <code>var1=value</code></p>
<p>etc</p>
<p>Then you could parse it out with <code>split()</code>...</p>
<p><code>variable1 = argv[1].split('=')[1]</code></p>
</div>
<span class="comment-copy">Basically I need to be able to assign argument value to a variable. I tried typles and dict without success</span>
<span class="comment-copy">Does it have to be that format? Because a more common approach would be <code>program.py --var1 value --var2 value</code> using <code>argparse.ArgumentParser</code> <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a></span>
<span class="comment-copy">Hi Paul, I was just reading about argparser. Yes the arguments can be --var1 value. But how do I reference then in the main. The user can pass arguments in any order so i need to make sure that the proper argument value is being used in the right place in the code.</span>
<span class="comment-copy">perfect. this is exactly what i need. Much appreciate it. Thanks to everyone who took the time to respond. They were all good suggestions, but this fits my needs the best.</span>
<span class="comment-copy">I thought I did</span>
<span class="comment-copy">@user1082748 There's a greyed out check mark below where you vote for the answer -- When you click the check, it turns green, and that's what he means by "Selecting the Answer"</span>
<span class="comment-copy">Ok, I enabled the top one. Thanks</span>
