<div class="post-text" itemprop="text">
<p>As a "clean up" after my script's main purpose is complete, a function is called to recursively look through each folder and remove all files that end in a pre-determined set of extensions.</p>
<p>I during my testing, I discovered that some files with a file extension in the list of ones to delete actually throw an error: <code>[Errno 1] Operation not permitted: '/location/of/locked/file.png</code>. Looking at the file itself, it appears to be <em>Locked</em> (on mac).</p>
<ol>
<li><strong>How would I go about removing the locked attribute (should it exist) from every file/folder using Python, then delete the file if it ends in the extension?</strong><br/>
Preferably this can all be done in the same function below, as it takes a long time to traverse the input directory - handling each only once is the way to go.</li>
<li><strong>How does this affect the script's integrity on Windows?</strong><br/>
I have taken care of programming it in a way that makes it compatible between the OSs but (to my knowledge) the <em>locked</em> attribute does not exist on Windows the way it does on mac and could cause unknown side-effects.</li>
</ol>
<hr/>
<pre><code>REMOVE_FILETYPES = ('.png', '.jpg', '.jpeg', '.pdf')

def cleaner(currentPath):
  if not os.path.isdir(currentPath):
    if currentPath.endswith(REMOVE_FILETYPES) or os.path.basename(currentPath).startswith('.'):
      try:
        os.remove(currentPath)
        print('REMOVED: \"{removed}\"'.format(removed = currentPath))
      except BaseException as e:
        print('ERROR: Could not remove: \"{failed}\"'.format(failed = str(e)))
      finally:
        return True
    return False

  if all([cleaner(os.path.join(currentPath, file)) for file in os.listdir(currentPath)]):
    try:
      os.rmdir(currentPath)
      print('REMOVED: \"{removed}\"'.format(removed = currentPath))
    except:
      print('ERROR: Could not remove: \"{failed}\"'.format(failed = currentPath))
    finally:
      return True
  return False

cleaner(r'/path/to/parent/dir')
</code></pre>
<p>I would really appreciate if somebody could show me how to integrate such functionality into the sub-routine. Cheers.</p>
<hr/>
<p><strong>EDIT:</strong> Removed error handling as per request </p>
<pre><code>def cleaner(currentPath):
if sys.platform == 'darwin':
    os.system('chflags nouchg {}'.format(currentPath))
if not os.path.isdir(currentPath):
    if currentPath.endswith(REMOVE_FILETYPES) or os.path.basename(currentPath).startswith('.'):
        try:
            os.remove(currentPath)
            print('REMOVED: \"{removed}\"'.format(removed=currentPath))
        except PermissionError:
            if sys.platform == 'darwin':
                os.system('chflags nouchg {}'.format(currentPath))
                os.remove(currentPath)
if all([cleaner(os.path.join(currentPath, file)) for file in os.listdir(currentPath)]) and not currentPath == SOURCE_DIR:
    os.rmdir(currentPath)
    print('REMOVED: \"{removed}\"'.format(removed=currentPath))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can unlock the file with the <code>chflags</code> command:</p>
<pre><code>os.system('chflags nouchg {}'.format(filename))
</code></pre>
<p>(There is a function <code>os.chflags</code>, but the flag associated with the locked status is not a regular one, but what the <a href="https://docs.python.org/3/library/os.html#os.stat_result" rel="nofollow noreferrer"><code>os</code> module documentation</a> calls a "user-defined" flag, as you can see by looking at <code>os.stat(locked_filename).st_flags</code>.)</p>
<p>To solve your problem I'd add the <code>chflags</code> command above to a specific <code>except:</code> for the error you get trying to remove a locked file, along with a platform check:</p>
<pre><code>try:
    os.remove(currentPath)
    print('REMOVED: \"{removed}\"'.format(removed = currentPath))
except PermissionError:
    if sys.platform == 'darwin':
        os.system('chflags nouchg {}'.format(currentPath))
        os.remove(currentPath)
    else:
        raise
except BaseException as e:
    ...
</code></pre>
</div>
<span class="comment-copy">I suppose it's possible you're getting a different exception? What exception do you see when trying to remove the files?</span>
<span class="comment-copy">The exception <code>"[Errno 66] Directory not empty: '/path/to/folder"</code> is thrown (in the last <code>if</code>) my test directory is still set up the way I mentioned it above with a locked file and the folder on the same level, and a locked file inside the folder. Being recursive, I expect the file in the folder to unlock, deeming the folder empty (as the file extension is in the list), hence deleting the folder, going up a level to the starting directory and unlocking then deleting the other locked file - essentially leaving nothing behind. Yet, none of the files unlock, its as though nothing happened.</span>
<span class="comment-copy">I think you must be missing some exceptions somewhere. The <code>finally: return True</code> you're doing is pretty weird: it's basically saying that a file was removed when it wasn't. And it suppresses any exceptions that happen. This makes it awfully hard to debug! I'd suggest getting rid of that, in fact, getting rid of all your <code>try:</code>/<code>except:</code> handling except for the unlocking. This should help you find the root problem.</span>
<span class="comment-copy">Just added what the code looks like now. Throws <code>[Errno 1] Operation not permitted: /path/to/image.png</code> on the locked image and breaks. Does the fact that the server that hosts this directory is on a Windows share have anything to do with it? I am lost here because it works from Terminal using: <code>chflags -R nouchg /PATH/TO/DIRECTORY/WITH/LOCKED/FILES/</code> which unlocks all at once. Could you look at the edit I made. If all else fails, is there a way to translate this into the code so that it just unlocks all before the main part of the script starts, then by the time it ends, none are looked?</span>
<span class="comment-copy">You certainly could do that <code>-R</code> when you do <code>chflags</code> at the beginning. As it stands, it sounds like you're getting an <code>IOError</code> rather than the <code>PermissionError</code> I got? You could just try replacing <code>PermissionError</code> with <code>IOError</code> in the <code>except PermissionError:</code> part.</span>
