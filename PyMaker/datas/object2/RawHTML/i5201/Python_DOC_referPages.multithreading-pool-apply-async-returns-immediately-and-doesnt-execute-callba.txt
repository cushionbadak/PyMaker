<div class="post-text" itemprop="text">
<p>Console output from function <code>sync_lister()</code>:</p>
<pre><code>20203.161 ms
19930.7166 ms
21279.1429 ms
18988.5079 ms
17724.5125 ms
11358.8549 ms
36164.6077 ms
20183.306099999998 ms
14238.174599999998 ms
20383.551 ms

Process finished with exit code 0
</code></pre>
<p>Good, that's what I expect. Now I want to put this in a worker pool and get it done about 4x as fast.</p>
<p>I thought I did exactly that and correctly. Why do I not have any output?</p>
<p>There is no console output when running <code>async_lister()</code> and the application returns immediately.</p>
<p>Complete code below. Let me know if you need the source to the <code>ffprobe</code> wrapper or anything else.</p>
<pre><code>#! /usr/bin/env python3
# -*- coding: utf-8 -*-
import os

from utilities import glob_from
from controller import run_ffprobe
from multiprocessing import Pool

INPUT_DIR = "C:/Users/spike/Music/Deezloader"


def get_duration(metadata):
    return float(metadata.get("format", {}).get("duration", 0)) * 100


def example_callback(metadata):
    print(get_duration(metadata), "ms")


args_list = [(os.path.join(INPUT_DIR, path),) for path in glob_from(INPUT_DIR, "flac")[0:10]]
# Example: [('C:/Users/spike/Music/Deezloader\\AWOLNATION - Handyman\\1 - AWOLNATION - Handyman.flac',), ...]


def sync_lister():
    for args in args_list:
        example_callback(run_ffprobe(*args))


def async_lister():
    pool = Pool(4)  # Creates four threads, four items from "args" will be run with "run_ffprobe" at a time

    pool.apply_async(run_ffprobe, args=args_list, callback=example_callback)
    # Set the target to "run_ffprobe", and each item in "args_list" will be unpacked as arguments
    # and sent to that function when a pool worker is free

    pool.close()  # Close the pool, no more process can be added
    pool.join()  # Wait for all of the processes to complete


if __name__ == "__main__":
    sync_lister()  # Working
    async_lister()  # Not working
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As it states in the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply" rel="nofollow noreferrer"><code>apply()</code>/<code>apply_async()</code> documentation</a>, each call to <code>apply()</code> or <code>apply_async()</code> is equivalent to <em>one</em> call to the function you pass as the first argument (i.e. <code>run_ffprobe</code>).</p>
<p>In your synchronous code, you are passing each element of <code>args_list</code> to a separate <code>run_ffprobe()</code> call:</p>
<pre><code>for args in args_list:
    example_callback(run_ffprobe(*args))
</code></pre>
<p>In your async code, you are asking the pool to compute this:</p>
<pre><code>example_callback(run_ffprobe(args_list))
</code></pre>
<p>This is not what you want it to do.  You need to call <code>apply_async()</code> in a loop, just like you called <code>run_ffprobe()</code> in a loop.  Alternatively, you could use <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map_async" rel="nofollow noreferrer"><code>map_async()</code></a>, but this only calls your callback once, with the entire list of results.  That does not appear to match what you are doing in the synchronous code, but you could rewrite your callback to fit this pattern, or use something like <code>functools.partial(map, example_callback)</code> as your callback for <code>map_async()</code>.</p>
</div>
<span class="comment-copy">use <code>apply</code> instead of <code>apply_async</code> to debug. There maybe an exception raised.</span>
<span class="comment-copy">@Sraw For some reason <code>apply</code> seems to send the whole <code>args_list</code> to the process. Shouldn't it lust send the tuple at the index matching the process number?</span>
<span class="comment-copy">I think what you want is <code>pool.map/pool.map_async</code>.</span>
<span class="comment-copy">@Sraw <code>pool.map_async(run_ffprobe, iterable=args_list, callback=example_callback)</code> still shows no output.  Edit: using <code>map</code> errors, same problem as with <code>apply</code>.</span>
