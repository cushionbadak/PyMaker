<div class="post-text" itemprop="text">
<p>I have a function of the sort:</p>
<pre><code>def GetMapping(mappings, key):
    mapping = mappings.get(key)

    if mapping is None:
        currentMax = mappings.get("max", 0)
        mapping = currentMax + 1
        mappings["max"] = mapping
        mappings[key] = mapping

    return mapping, mappings
</code></pre>
<p>Basically, given a dictionary <code>mappings</code> and a key <code>key</code>, the function returns the value associated to the key if this exists.</p>
<p>If not, it finds the current maximum id in the dictionary, stored under the key 'max', assigns it to this key, and updates the value of max.</p>
<p>I was wondering if there was a built-in/less verbose way of achieving this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can subclass <code>dict</code> and override the <a href="https://docs.python.org/3/reference/datamodel.html#object.__missing__" rel="nofollow noreferrer"><code>__missing__</code></a> method.</p>
<pre><code>class CustomMapping(dict):
     def __missing__(self, key):
         self[key] = self['max'] = self.get('max', 0) + 1
         return self[key]

d = CustomMapping()
d['a']  # 1
d['b']  # 2
d['a']  # 1
d       # {'a': 1, 'b': 2, 'max': 2}
</code></pre>
<p>As @Code-Apprentice points out it would be better to set a <code>max</code> attribute in the <code>__init__</code> method. This avoids a potential key collision (i.e. a key that happens to be named <code>"max"</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you don't actually need/want a <code>'max'</code> item controllable from the outside but just auto-incrementing ids:</p>
<pre><code>    defaultdict(count(1).next)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; d = defaultdict(count(1).next)
&gt;&gt;&gt; d['foo']
1
&gt;&gt;&gt; d['bar']
2
&gt;&gt;&gt; d['qux']
3
&gt;&gt;&gt; d['foo']
1
</code></pre>
</div>
<span class="comment-copy">You don't need to return <code>mappings</code> since dicts are mutable.</span>
<span class="comment-copy">Does the 'max' really have to be there, so other code can change it, or is it ok if the first new value gets assigned 1, the second gets 2, etc?</span>
<span class="comment-copy">Instead of <code>self['max']</code>, you could just do <code>self.max</code>, assuming you also set the field to 0 in <code>__init__()</code>.</span>
<span class="comment-copy">@Code-Apprentice Yeah that's better to avoid random collision with another key named <code>"max"</code>. OP says the value should be "stored under the key <code>'max'</code>". Will make note of it in the answer - thanks.</span>
<span class="comment-copy">Note: This assumes keys are never deleted, or if they are, holes should be left in the <code>dict</code> where the key used to be (the original code does the same). Also, on Python 3, it would need to be <code>itertools.count(1).__next__</code>, not <code>itertools.count(1).next</code>. That said, this is by far the most efficient solution if it applies, and on CPython, should actually be thread-safe if the <code>dict</code>s keys are built-in types implemented in C (because the entire generation process occurs at the C layer, so the GIL prevents race conditions that might insert two keys with the same value from multiple threads).</span>
<span class="comment-copy">@ShadowRanger The OP's original would leave holes as well, so I think that's intended. I knew about the name, am somewhat hoping the OP is still using Python 2 so I can get away with the pretty one :-). Didn't know that about thread-safety, thanks. Reminds me to continue watching Raymond's concurrency talk...</span>
<span class="comment-copy">Yar. Oh, one additional note: The <code>max</code> value would still be slightly controllable from the outside, since <code>collections.defaultdict</code> exposes the factory as an attribute, <code>.default_factory</code>, and it's mutable. While not thread-safe, you could inspect it and restore it via <code>curmax = d.default_factory()</code>, <code>d.default_factory = count(curmax).__next__</code>, leaving the next value unchanged (assuming no races), while storing off the value that would have been generated next, or explicitly advance it to skip values, etc.</span>
<span class="comment-copy">@ShadowRanger Hmm, thanks, never thought of that. Do you think it's a good idea? It somehow feels wrong, but maybe that's just because I haven't done it before. The documentation does say "The first argument provides the <b>initial</b> value for the default_factory attribute" (emphasis mine) as if it's normal to get changed. Also, I guess they wouldn't make it changeable if I wasn't supposed to change it...</span>
<span class="comment-copy">Yar. You have to go out of your way to make attributes of built-in types accessible at the Python level. They not only made it accessible and read/write, but gave it a non-underscore prefixed name and documented it explicitly in the module documentation (not just something you can find by grubbing around with <code>dir()</code> or the like); it's part of the public API.</span>
