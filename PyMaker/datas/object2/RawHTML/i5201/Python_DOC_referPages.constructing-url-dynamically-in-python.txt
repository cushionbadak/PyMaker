<div class="post-text" itemprop="text">
<p>I have an URL template of the form</p>
<pre><code>https://farm{farm-id}.staticflickr.com/{server-id}/{photo-id}_{secret}.jpg
</code></pre>
<p>I have retrieved the following fields and there around 1000000 of these records. After retrieving the record below</p>
<pre><code>farm-id: 1
server-id: 2
photo-id: 1418878
secret: 1e92283336
size: m
</code></pre>
<p>I need to construct this URL</p>
<pre><code>https://farm1.staticflickr.com/2/1418878_1e92283336_m.jpg
</code></pre>
<p>I am thinking of some approaches, should I construct a dictionary for this one?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <code>str.format(*args, **kwargs)</code>:</p>
<pre><code>fmt = 'https://farm{farm-id}.staticflickr.com/{server-id}/{photo-id}_{secret}.jpg'
values = { 'farm-id': '1', 'server-id': 2, 'photo-id': '1418878', 'secret': '1e92283336', 'size': 'm' }
fmt.format(**values)
</code></pre>
<p>Everything surrounded with <code>{</code> and <code>}</code> in format string is called "replacement field". It ca be used with <code>kwargs</code> for such formatting. More info <a href="https://docs.python.org/2/library/string.html#formatstrings" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A dictionary would probably be your best bet. As an alternative, check out <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">named tuples</a>.</p>
<pre><code>Data = namedtuple('farm-id', 'server-id', 'photo-id', 'secret', 'size')
d = Data(1 ,2 ,1418878, 1e92283336, m)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have managed to extract the data from the file and now I have two things, a fixed set of keys and a list of different values.</p>
<p>keys</p>
<p>['farm-id', 'server-id', 'photo-id', 'secret', 'originalformat', 'originalsecret']</p>
<p>values</p>
<p>['3', '2287', '2109698205', '20fbbcc947', 'jpg', '7a57411545']</p>
<p>['3', '2063', '2172469872', '8ddb85aedd', 'jpg', 'e12b952909']</p>
<p>['2', '1079', '830593398', '9ddca27ab0', 'jpg', 'bb91586e56']</p>
<p>['3', '2371', '2226919732', '248f23c5ff', 'jpg', '29f35fb0ca']</p>
<p>['2', '1014', '798067744', '4f043d2ea6', 'jpg', 'd739cc870b']</p>
<p>Is there a smarter way of merging these two lists into a dictionary after which I can use the formatting required to create the url</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, if your data is in the format you indicated you should make sure that numbers such as <code>1e92283336</code> can be interpreted are not interpreted in different way than you intended. For example with <code>json</code></p>
<pre><code>&gt;&gt;&gt; json.loads('{"secret" : 1e92283336, "server_id" : 2, "farm_id": 1, "size" : "m"}')
{u'secret': inf, u'farm_id': 1, u'server_id': 2, u'size': u'm'}
</code></pre>
<p>After you successfully imported the fields to a dictionary there are multiple ways you can use string interpolation and formatting. Apart from the <code>str.format</code> specifier mentioned in previous answer you can use the traditional <code>%</code> style formatting as below (note the format specifier <code>s</code> after the closing parentheses)</p>
<pre><code>&gt;&gt;&gt; url = "https://farm%(farm-id)s.staticflickr.com/%(server-id)s/%(photo-id)s_%(secret)s.jpg"
&gt;&gt;&gt; print url % {'secret': '1e92283336', 'server-id': '2', 'farm-id': '1', 'size': 'm', 'photo-id' : '1418878'}
https://farm1.staticflickr.com/2/1418878_1e92283336.jpg
</code></pre>
<p>You can also use <a href="https://docs.python.org/2/library/string.html#template-strings" rel="nofollow noreferrer">Template Strings</a> which uses the <code>Template</code> class from the <code>string</code> module. This would be more familiar to bash/perl programmers. The template string is of the form below. The placeholders (within optional braces) must be valid python <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">identifiers</a> so it cannot contain characters such as <code>-</code>. The first non-identifier character terminates the placeholder. With <code>safe_substitute</code> method if any placeholder value is missing it will put the original placeholder instead of raising a key error.</p>
<pre><code>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; s = Template("https://farm${farm_id}.staticflickr.com/${server_id}/${photo_id}_${secret}.jpg")
&gt;&gt;&gt; s.substitute({'secret': '1e92283336', 'server_id': '2', 'farm_id': '1', 'size': 'm', 'photo_id' : '1418878'})
'https://farm1.staticflickr.com/2/1418878_1e92283336.jpg'
&gt;&gt;&gt; s.safe_substitute({'server_id': '2', 'farm_id': '1', 'size': 'm', 'photo_id' : '1418878'})
'https://farm1.staticflickr.com/2/1418878_${secret}.jpg'
</code></pre>
</div>
<span class="comment-copy">Thankyou Ivan. I started by using dictionaries. This information about kwargs is something new I learnt. Thanks!</span>
<span class="comment-copy">Thanks Josh, yes I did start with a dictionary. I have to traverse through a huge file first extracting the farmids, serverids etc and then construct a url for each of them and I started by storing them into a dictionary.</span>
