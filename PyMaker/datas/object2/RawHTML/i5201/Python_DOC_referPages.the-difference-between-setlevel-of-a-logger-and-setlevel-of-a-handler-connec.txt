<div class="post-text" itemprop="text">
<p>I am trying to grasp the difference between the impact of <code>logger.setLevel</code> and the impact of <code>handler.setLevel</code>, where the <code>logger</code> and the <code>handler</code> are created as follows:</p>
<pre><code>import logging

def getLogger(name, loggerLevel, handlerLevel):
    formatter = logging.Formatter('%(message)s')

    handler = logging.StreamHandler()
    handler.setLevel(handlerLevel)
    handler.setFormatter(formatter)

    logger = logging.getLogger(name)
    logger.setLevel(loggerLevel)
    logger.addHandler(handler)

    return logger
</code></pre>
<p>Note that the <code>handler</code> is connected to the <code>logger</code>.</p>
<p>Here is what the <a href="https://docs.python.org/3/library/logging.html#logging.Logger.setLevel" rel="nofollow noreferrer">official doc</a> says about <code>setLevel</code>:</p>
<blockquote>
<p>Sets the threshold for this logger to <code>level</code>. Logging messages which are less severe than <code>level</code> will be ignored; logging messages which have severity <code>level</code> or higher will be emitted by whichever handler or handlers service this logger, unless a handlerâ€™s <code>level</code> has been set to a higher severity level than <code>level</code>.</p>
</blockquote>
<p>I didn't quite fully understand this, so I implemented the following script to test all possible combinations:</p>
<pre><code>for loggerLevel in ['DEBUG', 'INFO', 'WARNING', 'ERROR']:
    for handlerLevel in ['DEBUG', 'INFO', 'WARNING', 'ERROR']:
        name = loggerLevel + '_' + handlerLevel
        print('{}:'.format(name))
        logger = getLogger(name,eval('logging.'+loggerLevel),eval('logging.'+handlerLevel))
        logger.debug  ('    debug  ')
        logger.info   ('    info   ')
        logger.warning('    warning')
        logger.error  ('    error  ')
</code></pre>
<p>And the output (see below) proves one thing - the higher level out of the two is the one to determine the course of action, <strong>regardless</strong> of which entity was set to that level.</p>
<p>So my question is - why on earth do we need more than one level to begin with???</p>
<p>Thank you.</p>
<pre><code>DEBUG_DEBUG:
    debug
    info
    warning
    error
DEBUG_INFO:
    info
    warning
    error
DEBUG_WARNING:
    warning
    error
DEBUG_ERROR:
    error
INFO_DEBUG:
    info
    warning
    error
INFO_INFO:
    info
    warning
    error
INFO_WARNING:
    warning
    error
INFO_ERROR:
    error
WARNING_DEBUG:
    warning
    error
WARNING_INFO:
    warning
    error
WARNING_WARNING:
    warning
    error
WARNING_ERROR:
    error
ERROR_DEBUG:
    error
ERROR_INFO:
    error
ERROR_WARNING:
    error
ERROR_ERROR:
    error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can attach more than one <em>handler</em> to a logger, and logger levels matter when <em>propagating</em> messages in a hierarchy.</p>
<p>Using multiple handlers lets you direct different severity levels to different outputs. You can put <code>WARNING</code> messages to the console, <code>INFO</code> and better go to the system log, and <code>DEBUG</code> messages go to an application-specific log file. This is what setting the log level on a handler is for, to configure what messages each handler will process, independently.</p>
<p>Logger levels matter in a hierarchy; all loggers are children of the root logger, and you can create further levels by using <code>.</code> dots in the name. You can then pick and choose what loggers produce what levels of output; setting a more strict log level means the logger will not process a message (including not handing it to the parent logger).</p>
<p>For example, many third-party libraries will produce log output at various levels. So, for a specific application, it could be quite helpful to see the <code>ERROR</code> level messages produced by the <code>urllib3</code> library, but for SQLAlchemy you only want to see <code>WARNING</code> messages. You just configure the levels for these library loggers with a <code>getLogger(name_of_library)</code> call to stop them propagating lower level messages to the root logger, where the handlers typically live. </p>
</div>
<span class="comment-copy">OK, but in that case, what's the point in setting the logging-level of the logger itself? Shouldn't it be enough to set the logging level of each handler?</span>
<span class="comment-copy">@goodvibration: Sure, unless you have a collection of different loggers. Like those in third-party libraries, or in your own larger application.</span>
<span class="comment-copy">@goodvibration: in a small script or application, sure, there is little point. But the library can handle far more complex use cases.</span>
