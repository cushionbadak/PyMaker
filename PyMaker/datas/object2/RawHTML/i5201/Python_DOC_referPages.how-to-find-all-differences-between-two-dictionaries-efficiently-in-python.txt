<div class="post-text" itemprop="text">
<p>So, I have 2 dictionaries, I have to check for missing keys and for matching keys, check if they have same or different values.  </p>
<pre><code>dict1 = {..}
dict2 = {..}
#key values in a list that are missing in each
missing_in_dict1_but_in_dict2 = []
missing_in_dict2_but_in_dict1 = []
#key values in a list that are mismatched between the 2 dictionaries
mismatch = []
</code></pre>
<p>What's the most efficient way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary view objects</a>, which act as <em>sets</em>. Subtract sets to get the difference:</p>
<pre><code>missing_in_dict1_but_in_dict2 = dict2.keys() - dict1
missing_in_dict2_but_in_dict1 = dict1.keys() - dict2
</code></pre>
<p>For the keys that are the same, use the intersection, with the <code>&amp;</code> operator:</p>
<pre><code>mismatch = {key for key in dict1.keys() &amp; dict2 if dict1[key] != dict2[key]}
</code></pre>
<p>If you are still using Python 2, use <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow noreferrer"><code>dict.viewkeys()</code></a>.</p>
<p>Using dictionary views to produce intersections and differences is very efficient,  the view objects themselves are very lightweight the algorithms to create the new sets from the set operations can make direct use of the O(1) lookup behaviour of the underlying dictionaries.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; dict1 = {'foo': 42, 'bar': 81}
&gt;&gt;&gt; dict2 = {'bar': 117, 'spam': 'ham'}
&gt;&gt;&gt; dict2.keys() - dict1
{'spam'}
&gt;&gt;&gt; dict1.keys() - dict2
{'foo'}
&gt;&gt;&gt; [key for key in dict1.keys() &amp; dict2 if dict1[key] != dict2[key]]
{'bar'}
</code></pre>
<p>and a performance comparison with creating separate <code>set()</code> objects:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; import random
&gt;&gt;&gt; def difference_views(d1, d2):
...     missing1 = d2.keys() - d1
...     missing2 = d1.keys() - d2
...     mismatch = {k for k in d1.keys() &amp; d2 if d1[k] != d2[k]}
...     return missing1, missing2, mismatch
...
&gt;&gt;&gt; def difference_sets(d1, d2):
...     missing1 = set(d2) - set(d1)
...     missing2 = set(d1) - set(d2)
...     mismatch = {k for k in set(d1) &amp; set(d2) if d1[k] != d2[k]}
...     return missing1, missing2, mismatch
...
&gt;&gt;&gt; testd1 = {random.randrange(1000000): random.randrange(1000000) for _ in range(10000)}
&gt;&gt;&gt; testd2 = {random.randrange(1000000): random.randrange(1000000) for _ in range(10000)}
&gt;&gt;&gt; timeit.timeit('d(d1, d2)', 'from __main__ import testd1 as d1, testd2 as d2, difference_views as d', number=1000)
1.8643521590274759
&gt;&gt;&gt; timeit.timeit('d(d1, d2)', 'from __main__ import testd1 as d1, testd2 as d2, difference_sets as d', number=1000)
2.811345119960606
</code></pre>
<p>Using <code>set()</code> objects is slower, especially when your input dictionaries get larger.</p>
</div>
<div class="post-text" itemprop="text">
<p>One easy way is to create sets from the <code>dict</code> keys and subtract them:</p>
<pre><code>&gt;&gt;&gt; dict1 = { 'a': 1, 'b': 1 }
&gt;&gt;&gt; dict2 = { 'b': 1, 'c': 1 }
&gt;&gt;&gt; missing_in_dict1_but_in_dict2 = set(dict2) - set(dict1)
&gt;&gt;&gt; missing_in_dict1_but_in_dict2
set(['c'])
&gt;&gt;&gt; missing_in_dict2_but_in_dict1 = set(dict1) - set(dict2)
&gt;&gt;&gt; missing_in_dict2_but_in_dict1
set(['a'])
</code></pre>
<p>Or you can avoid casting the second <code>dict</code> to a <code>set</code> by using <code>.difference()</code>:</p>
<pre><code>&gt;&gt;&gt; set(dict1).difference(dict2)
set(['a'])
&gt;&gt;&gt; set(dict2).difference(dict1)
set(['c'])
</code></pre>
</div>
<span class="comment-copy">Only available in Python 3.x?</span>
<span class="comment-copy">@Duncan: no, also in Python 2, as <code>dict.viewkeys()</code>.</span>
<span class="comment-copy">Ah thanks, I forgot about that</span>
<span class="comment-copy"><code>[key for key in dict1.keys() &amp; dict2 if dict1[key] != dict2[key]]</code>  Just curious, what does the <code>&amp; dict2</code> accomplish?</span>
<span class="comment-copy">@jo2083248: it creates the <i>intersection</i> of the two sets of keys, so the keys both dictionaries have in common.</span>
<span class="comment-copy">I am assuming, set().difference() is more efficient because no casting is needed?</span>
<span class="comment-copy">I've no idea if it makes any difference. Besides Martijn's answer is better.</span>
<span class="comment-copy"><code>set().difference()</code> and <code>set().intersection()</code> are slightly faster because you can avoid creating a second <code>set()</code> object. Still, dictionary views are faster again by the same factor.</span>
