<div class="post-text" itemprop="text">
<p>I can add additional quotes to the beginning of a triple-quoted string, but not to the end. Why is that? This block of code:</p>
<pre><code>print(""""
String that starts with quadruple quotes and ends with triple quotes
""")
</code></pre>
<p>Produces this output:</p>
<pre><code>"
String that starts with quadruple quotes and ends with triple quotes
</code></pre>
<p>Yet this code block doesn't work:</p>
<pre><code>print(""""
String that starts with quadruple quotes and ends with quadruple quotes
"""")
</code></pre>
<p>It produces this error:</p>
<pre><code>  File "example.py", line 3
    """")
        ^
SyntaxError: EOL while scanning string literal
</code></pre>
<p>I don't ever need to use a quadruple-quote string, but I'm curious why Python won't let me do it. Can anyone help me understand?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use <code>"""</code> <em>anywhere</em> in the value of a triple-quoted string. Not at the start, and not at the end.</p>
<p>That's because, after the first three <code>"""</code> opening characters denoting the start of such a string, <em>another</em> sequence of <code>"""</code> is <strong>always</strong> going to be the end of the string. Your fourth <code>"</code> lies outside of the string object you created, and a single <code>"</code> without a closing <code>"</code> is not a valid string.</p>
<p>Python has no other method of knowing when such a string ends. You can't arbitrarily extend the string 'inwards' with additional <code>"</code> characters before the final <code>"""</code>, because that'd be indistinguishable from the valid and legal<sup>*</sup>:</p>
<pre><code>&gt;&gt;&gt; """string 1"""" string 2"
'string 1 string 2'
</code></pre>
<p>If you must include a <code>"</code> before the closing <code>"""</code>, escape it. You can do so by preceding it with a backslash:</p>
<pre><code>&gt;&gt;&gt; """This is triple-quoted string that
... ends in a single double quote: \""""
'This is triple-quoted string that\nends in a single double quote: "'
</code></pre>
<p>Note that there is no such thing as a <em>quadruple-quote string</em>. Python doesn't let you combine <code>"</code> quotes into longer sequences arbitrarily. Only <code>"single quoted"</code> and <code>"""triple-quoted"""</code> syntax exists (using <code>"</code> or <code>'</code>). The rules for a triple-quoted string differ from a single-quoted string; newlines are allowed in the former, not in the latter.</p>
<p>See the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer"><em>String and Bytes literals</em> section</a> of the reference documentation for more details, which defines the grammar as:</p>
<blockquote>
<pre><code>shortstring     ::=  "'" shortstringitem* "'" | '"' shortstringitem* '"'
longstring      ::=  "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
</code></pre>
</blockquote>
<p>and explicitly mentions:</p>
<blockquote>
<p>In triple-quoted literals, unescaped newlines and quotes are allowed (and are retained), <strong>except that three unescaped quotes in a row terminate the literal</strong>. (A “quote” is the character used to open the literal, i.e. either <code>'</code> or <code>"</code>.)</p>
</blockquote>
<p>(bold emphasis mine).</p>
<hr/>
<p><sup>*</sup> The expression is legal because it consists of two string literals, one with <code>"""</code> quoting, the next with <code>"</code> quoting. Consecutive string literals are automatically concatenated, just like they would in C. See <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="noreferrer"><em>String literal concatenation</em></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's parsed as <code>triple-quote text triple-quote quote</code> (<code>triple-quote</code> first by the maximal munch rule). You can escape the first of the four quotes to fix this.</p>
</div>
<div class="post-text" itemprop="text">
<p>A triple-quoted string literal ends on a series of 3 unescaped matching quotation marks.</p>
<p>When a string literal starts with 4 quotes, the first 3 begin a triple-quoted string literal, and the next quote is just part of the string, since there would have to be three quotes in a row to end the string.</p>
<p>When you try to end a string literal with 4 quotes, the first three end the string literal and the 4th begins a new one. The new string literal doesn't have an ending quotation mark, making it a syntax error.</p>
</div>
<div class="post-text" itemprop="text">
<p>You get an error because you haven't closed a second set of quotes.</p>
<p>At the beginning of the string, you have four quotes. Three of these open the string. The next quote is included in the string, because there aren't another two quotes following it.</p>
<p>At the end of the string, you have four quotes. The first three of these end the string. The fourth opens a new single-quoted string. You don't close that string by the end of the line, so you get an error.</p>
<p>(It isn't an error, in fact, to have two string literals right next to them like that. Python will concatenate them at compile time.)</p>
<blockquote>
<p>I don't ever need to use a quadruple-quote string, but I'm curious why Python won't let me do it.</p>
</blockquote>
<p>Because quadruple-quoted strings aren't a thing. Python doesn't let you do it because it wasn't designed to do it. You can have single-quoted strings, and you can have triple-quoted strings. Any other number of quotes is <em>right out.</em></p>
</div>
<span class="comment-copy">So how would Python know that you wanted that the first <code>"</code> of the four <code>""""</code>characters there at the end to be part of the value and not as part of the delimiter ending the string?</span>
<span class="comment-copy">This was a phenomenal answer. Thank you.</span>
<span class="comment-copy">Thanks, this response clicked in my brain. And your solution worked for me.</span>
<span class="comment-copy">Thanks for the in-depth explanation. That makes a lot of sense</span>
