<div class="post-text" itemprop="text">
<p>Suppose I have a nested tuple as follows:</p>
<pre><code>a = (((1, 2), 2), 3)
</code></pre>
<p>I know we could use <code>a[0][0][1]</code> to acquire the second element 2. However, this method might be inefficient with a long tuple. Is there any more efficient way to acquire the tuple element in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to be able to do this dynamically and know that your indices are valid you can use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> to write this compactly:</p>
<pre><code>from functools import reduce
reduce(lambda it, idx: it[idx], [0, 0, 1], a)  # returns 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may write function for access tuple value</p>
<pre><code>a = (((1, 2), 2), 3)
def access(obj, indexes):
    a = obj
    for i in indexes:
       try: 
           a = a[i]
       except IndexError:
           return None
       # except TypeError:
           # when you try to index deeper than the object supports

    # a  is not constrained to be a scalar, it may still be dimensional
    # if insufficient indexes were passed.
    return a  
print(access(a,(0,0,0)))
print(access(a,(0,0)))
</code></pre>
<p>Output</p>
<blockquote>
<p>1</p>
<p>(1, 2)</p>
</blockquote>
</div>
<span class="comment-copy">there's nothing more efficient than accessing it by index</span>
<span class="comment-copy">You need more efficiency than O(1) for each of the indexing operations? Interesting...</span>
<span class="comment-copy">Do you mean <i>efficient</i> or <i>easy to type</i>?</span>
<span class="comment-copy">Why do you have such a data structure? Did you create this yourself? What is the main problem you are trying to solve that lead you to get to this type of data structure?</span>
<span class="comment-copy">in terms of accessing the element, <code>list</code> v/s <code>tuple</code> won't make much difference. In fact, since tuple as immutable, accessing it will be little more efficient. You need to share more information on your use-case with the example, then may be we would be able to help more</span>
<span class="comment-copy">Good, a new thought. Thx Alex.</span>
<span class="comment-copy">What's the point of having a function here? Just to access value based on index? How is <code>access(a,(0,0,0))</code> better than <code>a[0][0][0]</code>?</span>
<span class="comment-copy">its just mean, index replacement is this function</span>
<span class="comment-copy">@Moinuddin presumably because one could do <code>access(a, [0] * 99)</code> if wanted...</span>
