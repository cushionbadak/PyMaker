<div class="post-text" itemprop="text">
<p>I am altering a state dictionary in a for loop and appending the new states to a list every iteration. </p>
<p>In Python, dictionaries are of course mutable so what gets appended to the list is a reference to the continuously mutating dictionary object. So at the end I just get a list of the same duplicated reference, pointing to the final version of the state.</p>
<pre><code>state = {'temp': 21.6, 'wind': 44.0}
state_list = []
for i in range(10):
    state['temp'] += 0.5
    state['wind'] -= 0.5
    state_list.append(state)
</code></pre>
<p>Is there a way to tell the interpreter that I wish to 'pass by value'? I am capable of constructing a tuple or something mutable from the state the line before the append, and appending the list with say tuples. I just want to check this is the best solution. </p>
</div>
<div class="post-text" itemprop="text">
<p>Its not "passing by value", as lists actually holds the references to objects.
You need to create <a href="https://docs.python.org/3/library/stdtypes.html#dict.copy" rel="nofollow noreferrer">copy</a> and append to list, i.e.:</p>
<pre><code>state_list.append(state.copy())
</code></pre>
<p>Note, tho, that <code>.copy</code> creates a shallow copy of object. For containers, this means that <em>container</em> is new, but it will hold the same references. As your state is described by floats, and floats is immutable, this will cause no issues whatsoever.</p>
<p>In case if you need to copy container with mutable objects inside and have this objects copied too, you can use <a href="https://docs.python.org/3.6/library/copy.html#copy.deepcopy" rel="nofollow noreferrer">deepcopy</a></p>
</div>
<span class="comment-copy">No. You must explicitly copy.</span>
<span class="comment-copy">"So at the end I just get a list of the same duplicated reference, pointing to the final version of the state" Actually, all the elements in your list <b>are</b> the <b>same</b> dict, period.</span>
<span class="comment-copy">Just in case the dictionary object is a simplified representation of what OP is actually doing, it's worth noting the difference between <code>copy</code> and <code>deepcopy</code>: <a href="https://docs.python.org/2/library/copy.html" rel="nofollow noreferrer">docs.python.org/2/library/copy.html</a></span>
