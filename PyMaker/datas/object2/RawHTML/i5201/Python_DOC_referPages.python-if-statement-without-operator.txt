<div class="post-text" itemprop="text">
<p>Can someone explain to me how this function works? I don't get how the for loop keeps going while there is <code>return False</code> after the if statement, which is also unclear to me.</p>
<pre><code>def IsPrime(n):
    for x in range(2, int(n/2+1)):
        if not n % x:
            return False;
    return True
</code></pre>
<p>I don't understand what is happening in line 3 of this code.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>In short:</strong> the <code>if</code> fires when <code>n</code> is <em>dividable</em> by <code>x</code>.</p>
<p><strong>Background</strong>:</p>
<p>If you write something with:</p>
<pre><code>if &lt;expr&gt;:
    pass
</code></pre>
<p>The <code>not</code> keyword also evaluates the <em>truthiness</em>, and in case the truthiness is <code>True</code> of the expression, then <code>not expression</code> is <code>False</code> and vice versa.</p>
<p>Python checks the <a href="https://www.udacity.com/wiki/cs258/truthiness-in-python" rel="nofollow noreferrer"><strong><em>truthiness</em></strong></a> of the <code>&lt;expr&gt;</code>. The truthiness is a boolean value that is associated with objects.</p>
<p><code>True</code> and <code>False</code> have as truthiness respectively <code>True</code> and <code>False</code>, and <code>None</code> has truthiness <code>False</code> (so we can check <code>if someobject</code> usually to do an implicit <code>None</code> check).</p>
<p>Collections like <code>list</code>s, <code>set</code>s, <code>dict</code>s, <code>tuple</code>s, etc. usually have truthiness <code>True</code> if and <em>only</em> if these collections contain at <em>least</em> one element. So empty collections have truthiness <code>False</code>. What these collections contain is of no importance for the truthiness of the collection itself.</p>
<p>Then there are also numerical types. Usually a number has truthiness <code>False</code> if and only if it is equal to zero, so negative and strictly positive numbers have truthiness <code>True</code>.</p>
<p>Generic objects have by default truthiness <code>True</code>, but you can override the <code>__bool__</code> magic function to return a different truthiness, or if you override <code>__len__</code> (and not <code>__bool__</code>), it will check if <code>__len__</code> is greater than zero.</p>
<p>So if <code>n</code> and <code>x</code> are integers, then we calculate <code>n % x</code>, this thus performs a <em>modulo</em> check, and <code>n % x</code> is zero if and only if <code>n</code> is dividable by <code>x</code>.</p>
<p>Now the <code>not</code> operator will thus evaluate the truthiness. In case <code>n</code> is dividable by <code>x</code>, then <code>not n % x</code> is <code>True</code>, otherwise <code>not n % x</code> is <code>False</code>.</p>
<p>So the <code>if</code> is fired if <code>n</code> is dividable by <code>x</code>. The prime test thus checks if <code>n</code> is dividable by all numbers between <code>2</code> and <code>n/2+1</code>, and if not, it returns <code>True</code>, from the moment one is dividable, it returns <code>False</code>.</p>
<p>We can however speed up the calculations by iterating up to the <em>square root</em> of <code>n</code>, and make hops of two:</p>
<pre><code>from math import sqrt

def IsPrime(n):
    if not n % 2:
        return False
    for x in range(3, int(sqrt(n)), 2):
        if not n % x:
            return False
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What follows after <code>if</code>, will be casted to type <code>bool</code>, i.e. even though you put an integer in, python will have to cast it to <code>bool</code>, because <code>if</code> can only branch on the boolean values <code>True</code> or <code>False</code>.<br/>
Now python evaluates all numbers except 0 to <code>True</code> in the <code>bool(number)</code> function. So basically <code>if not n%x</code> is the same thing as <code>if not ((n%x) != 0)</code>.</p>
<p>Example <code>x=2</code>: code inside the loop will be executed for even values of <code>n</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In line 3, you divide <code>n</code> by integers between <code>2 to n/2</code>,now lets look at <code>if not n%x:</code>,here if x divides n completely then <code>n%x</code> returns <code>0</code> which is interpreted as <code>False</code>.Now <code>not</code> of <code>False</code> is <code>True</code> therefore condition evaluates to True and your <code>IsPrime(n)</code> function returns <code>False</code>.So,any number <code>n</code> which has a factor between <code>2</code> and <code>n-1</code> or more precisely between <code>2 and n/2</code> is Not a Prime Number,So your function returned false else your function will evaluate to <code>True</code>.</p>
</div>
<span class="comment-copy">It checks the <i>truthiness</i> of the expression.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">Truth Value testing</a></span>
<span class="comment-copy">n % x returns a number. Try <code>bool(6)</code> and <code>bool(0)</code> in the Python shell</span>
<span class="comment-copy">Please indent your code properly.</span>
