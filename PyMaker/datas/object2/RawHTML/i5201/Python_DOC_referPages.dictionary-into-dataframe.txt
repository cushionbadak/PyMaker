<div class="post-text" itemprop="text">
<p>I am converting a dict into a dataframe:</p>
<pre><code>states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}

myStates = pd.DataFrame(states.items(), columns=['a','b'])
</code></pre>
<p>Jupyter Notebook throws following error:</p>
<pre><code>     13 
---&gt; 14     myStates = pd.DataFrame(states.items(), columns=['a','b'])

PandasError: DataFrame constructor not properly called!
</code></pre>
<p>But I am getting no error on PyCharm/Python2.7, output looks like:</p>
<pre><code>     a                         b 
 0   WA                Washington
 1   WI                 Wisconsin
 2   WV             West Virginia
 3   FL                   Florida
 4   WY                   Wyoming
 5   NH             New Hampshire
</code></pre>
<p>Any other workaround to that?</p>
<p>Thanks,
P</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_dict.html" rel="nofollow noreferrer"><code>pd.DataFrame.from_dict</code></a> is likely what you need.</p>
<pre><code>myStates = pd.DataFrame.from_dict(states, orient='index').reset_index()
myStates.columns = ['a', 'b']

myStates.head(5)

#     a               b
# 0  OH            Ohio
# 1  KY        Kentucky
# 2  AS  American Samoa
# 3  NV          Nevada
# 4  WY         Wyoming
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using Python3 when in Jupyter and Python2 in PyCharm. Python2 <code>dict.items</code> returns a <code>list</code> whereas Python3 <code>dict.items</code> returns a <s>generator</s> <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary view object</a> (thanks for the correction @juanpa.arrivillaga). Here's <a href="https://stackoverflow.com/a/8960727/1953800">a SO answer</a> that gives a bit more detail, but by and large this is to conserve memory and speed up computation time.</p>
<p><a href="https://docs.python.org/2/library/2to3.html#2to3fixer-dict" rel="nofollow noreferrer">Here is a reference</a> to the <code>2to3</code> docs that specifically calls out that <code>dict.items()</code> in Python2 is logically equivalent to <code>list(dict.items())</code> in Python3.</p>
<p>So all you need to do is to make a call to the <code>list</code> constructor when running in Python3:</p>
<pre><code>myStates = pd.DataFrame(list(states.items()), columns=['a','b'])
</code></pre>
<p>You can check what version of python you are running dynamically with <code>sys</code>:</p>
<pre><code>import sys
print(sys.version)  # '3.6.3 ...'
</code></pre>
<p><strong>Note</strong>: See @jp_data_analysis answer for how to handle this in a version agnostic way.</p>
</div>
<div class="post-text" itemprop="text">
<p>By using <code>Series</code> </p>
<pre><code>pd.Series(states).to_frame('State').head()
Out[471]: 
             State
AK          Alaska
AL         Alabama
AR        Arkansas
AS  American Samoa
AZ         Arizona
</code></pre>
</div>
<span class="comment-copy">what sort of <code>DataFrame</code> is this <i>suppose</i> to result in? What would columns <code>a</code> and <code>b</code> be? This <code>dict</code> looks like it should make a <code>pd.Series</code>: <code>my_states = pd.Series(states)</code></span>
<span class="comment-copy">That works. What's wrong with my approach and why is it not throwing errors in PyCharm but in Jupyter?</span>
<span class="comment-copy">@Peter, see Alex's answer for PyCharm vs Jupyter. Looks like different python versions.</span>
<span class="comment-copy">nitpick: <code>dict.items</code> does not return a generator, heck, it doesn't even return an iterator. It returns an iterable <i>view</i>.</span>
<span class="comment-copy">@juanpa.arrivillaga TIL - thanks! Updated answer.</span>
