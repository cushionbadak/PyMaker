<div class="post-text" itemprop="text">
<p>I wanted to return a output which is the number of rows with all zero in its elements. Here is my python code, and I couldn't identify where is the bug. </p>
<pre><code>def find_bully_1(A):

    n = len(A)
    candidate = 0
    count = 0


    for i in range(n):
        for j in range(n):
            if A[i][j] == 0:
                count = count + 1
        if count == n:
            candidate = candidate + 1
    return candidate




x = [[1,1,1,1],
 [0,0,0,0],
 [0,0,0,0],
 [0,1,0,0]]


find_bully_1(x)

The output should be 2 but it keeps return 1. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code counts <em>every</em> zero that it's seen so far, but it should be just counting the zeros in the current row. To fix that you need to reset <code>count</code> to zero before you enter the <code>for j in range(n):</code> loop.</p>
<p>However, counting all-zero rows this way is inefficient. A much better way is to use the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function in conjunction with <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> or <code>all</code>. For example:</p>
<pre><code>def find_bully_1(a):
    return sum(not any(u) for u in a)

x = [
    [1,1,1,1],
    [0,0,0,0],
    [0,0,0,0],
    [0,1,0,0],
]

print(find_bully_1(x))
</code></pre>
<p><strong>output</strong></p>
<pre><code>2
</code></pre>
<hr/>
<p>FWIW, I wouldn't bother putting that code into a function, since Python function calls are relatively slow, and the code required to call the function isn't much shorter than just writing the code itself:</p>
<pre><code>print(sum(not any(u) for u in x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sum</code>:</p>
<pre><code>x = [[1,1,1,1], [0,0,0,0], [0,0,0,0], [0,1,0,0]]
new_x = sum(all(not b for b in i) for i in x)
</code></pre>
<p>Output:</p>
<pre><code>2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your example the count just gets incremented for every 0 forever and never gets reset</p>
<p>You just need to reset your count at the start of the for loop</p>
<pre><code>def find_bully_1(A):

n = len(A)
candidate = 0


for i in range(n):
    count = 0 
    for j in range(n):
        if A[i][j] == 0:
            count = count + 1
    if count == n:
        candidate = candidate + 1
return candidate




x = [[1,1,1,1],
     [0,0,0,0],
     [0,0,0,0],
     [0,1,0,0]]


print(find_bully_1(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a vectorised <code>numpy</code> solution. See <a href="https://stackoverflow.com/users/4014959/pm-2ring">@PM 2Ring's explanation</a> for why your logic does not work.</p>
<pre><code>import numpy as np

x = np.array([[1,1,1,1],
             [0,0,0,0],
             [0,0,0,0],
             [0,1,0,0],
             [0,1,0,1],
             [0,0,0,0],
             [0,1,0,0]])

np.sum(~x.any(axis=1))  # 3
</code></pre>
</div>
<span class="comment-copy">You need to reset <code>count</code> inside your outer loop before the start of the inner loop. But there are better ways to do this task.</span>
<span class="comment-copy">If one of the answers below fixes your issue, you should accept it (click the check mark next to the appropriate answer). That does two things. It lets everyone know your issue has been resolved to your satisfaction, and it gives the person that helps you credit for the assist. See <a href="http://meta.stackexchange.com/a/5235">here</a> for a full explanation.</span>
<span class="comment-copy">This is certainly very fast compared to the other approaches; OTOH, not everyone has (or wants to use) Numpy.</span>
<span class="comment-copy">@PM2Ring. this is true. however, I would suggest that numeric arrays should be handled with <code>numpy</code> where viable, especially if the workflow involves further numeric array manipulation.</span>
<span class="comment-copy">Sure, especially if the array size is large, or you're doing a <i>lot</i> of calculations. For small arrays, with only a few calculations, the Numpy overheads may end up making the code slower. You need to profile to be sure.</span>
