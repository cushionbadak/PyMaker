<div class="post-text" itemprop="text">
<p>While messing around with overloading operators and namedtuples, I've stumbled on some weird behavior which works, for some reason or another:</p>
<p><a href="https://repl.it/repls/RemorsefulFlawlessAfricanwildcat" rel="nofollow noreferrer">https://repl.it/repls/RemorsefulFlawlessAfricanwildcat</a></p>
<pre><code>import collections, math

Point = collections.namedtuple("Point", ["x", "y"])
Point.__floor__ = lambda self: Point(int(math.floor(self.x)), int(math.floor(self.y)))
print(math.floor(Point(1.4, -5.9)))
#prints: Point(x=1, y=-6)
</code></pre>
<p>Does anyone have any insight into this? Why does it work?<br/>
If I remove the <code>Point.__floor__</code> line, it doesn't work.</p>
<hr/>
<p>Did the math package define a <code>__floor__</code> operator somewhere?<br/>
OR<br/>
Does Python parse <code>Point.__XXX__</code> to extract <code>XXX</code> and compare with the name of the thing (function/operator) that acts on the argument?</p>
<p>I'm confused, probably because I don't know how exactly these things work deep down.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the docs (emphasis mine):</p>
<blockquote>
<p><code>math.floor(x)</code></p>
<p>Return the floor of <code>x</code>, the largest integer less than or equal to x. <strong>If x is not a float, delegates to <code>x.__floor__()</code></strong>, which should return an Integral value.</p>
</blockquote>
</div>
<span class="comment-copy">Thanks! I found it myself just before I read your answer. I looked in <a href="https://docs.python.org/3/reference/datamodel.html#data-model" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#data-model</a> , but couldn't find it. Later found it where you linked. In hindsight, I should have checked math.floor documentation, but I thought all __ XXX __ are listed in the datamodel.html page.</span>
