<div class="post-text" itemprop="text">
<p>Given a set of N elements, I want to choose m random, non-repeating subsets of k elements.</p>
<p>If I was looking to generate <strong>all</strong> the N choose k combinations, I could 
have used <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combination</a>, so one way to do what I m asking would be:</p>
<pre><code>import numpy as np
import itertools
n=10
A = np.arange(n)
k=4
m=5
result = np.random.permutation([x for x in itertools.permutations(A,k)])[:m]
print(result)
</code></pre>
<p>The problem is of course that this code first generates <strong>all</strong> the possible permutations, and that this can be quite expensive. </p>
<p>Another suboptimal solution would be to choose each time a single permutation at random (<a href="https://stackoverflow.com/questions/22229796/choose-at-random-from-combinations">e.g. choose-at-random-from-combinations</a>, then sort to get permutation), and discard it if it has already been selected.</p>
<p>Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your second solution seems to be the only practical way to do it. It will work well unless k is close to n and m is "large", in which case there will be more repetitions.</p>
<p>I added a count of the tries needed to get the samples we need. For m=50, with n=10 and k=4, it takes usually less than 60 tries. You can see how it goes with the size of your population and your samples.</p>
<p>You can use <code>random.sample</code> to get a list of k values without replacement, then sort it and turn it into a tuple. So, we can use a <code>set</code> for keeping only unique results.</p>
<pre><code>import random

n = 10
A = list(range(n))
k = 4
m = 5

samples = set()
tries = 0
while len(samples) &lt; m:
    samples.add(tuple(sorted(random.sample(A, k))))
    tries += 1

print(samples)
print(tries)

# {(1, 4, 5, 9), (0, 3, 6, 8), (0, 4, 7, 8), (3, 5, 7, 9), (1, 2, 3, 4)}
# 6
# 6 tries this time !
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to do it is to <code>random.shuffle(range)</code> then take first k elements (need to be repeated until m valid samples are collected).</p>
<p>Of course this procedure cannot guarantee unique samples. You are to check a new sample against your historical hash if you really need it.</p>
<p>Since Pyton2.3, <code>random.sample(range, k)</code> can be used to produce a sample in a more efficient way</p>
</div>
<span class="comment-copy">Make a list of indices, pick one at random, remove from the list, repeat k times</span>
<span class="comment-copy">@Tobias that would be exactly the same as picking random permutations, you would still have to check if you picked the same twice and discard it</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/15512058/python-shuffle-such-that-position-will-never-repeat" title="python shuffle such that position will never repeat">stackoverflow.com/questions/15512058/â€¦</a></span>
<span class="comment-copy">+1 for the code and the study. Quite smart using <b>samples=set()</b> etc.I m going with your code in my real life I think.</span>
<span class="comment-copy">Right. But dealing with all combinations is much more costly indeed.</span>
<span class="comment-copy">I agree, just asking if there is a better way...</span>
