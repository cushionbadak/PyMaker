<div class="post-text" itemprop="text">
<p>Need help understanding what exactly this code does. I understand what the join functions does. I am just struggling a bit with understanding what the format function is doing and what the lambda function is doing.</p>
<pre><code>t = ''.join('{0}'.format(key, val) for key, val in sorted(c.items(), key = lambda x:x[-1], reverse = True))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR:</strong></p>
<p><code>lambda</code> is just a good way at specifying (before-hand) what to look at or use. Otherwise you wouldn't be able to specify:</p>
<p><em>"I want to sort on index 1 of each element in the iterable"</em></p>
<p><strong>Stepwise:</strong></p>
<p>The <code>lambda</code> is setting the <code>key</code> as the last element (<code>x[-1]</code>) of <code>x</code>, where <code>x</code> is an element inside <code>c.items()</code>. </p>
<p>So essentially, the flow is this:</p>
<p><code>sorted()</code> gets executed first; it is going to sort the contents of <code>c.items()</code></p>
<p>But what does it sort on? <code>lambda x:x[-1]</code> says the <code>key</code> is the last element of each element in the iterable <code>c.items()</code>. So if:</p>
<p><code>c.items() == ['123', '456', '789']</code></p>
<p>Then the <code>key</code> for the <code>sorted()</code> is going to be the <code>'3', '6', '9'</code> and the will be sorted in <code>reverse = True</code>.</p>
<p>But since <code>c.items()</code> likely represents a <code>dict</code> contents, the <code>for key, val</code> means that each element will <em>unpack</em> into 2 distinct variables: <code>key, val</code>. So my example before is more like:</p>
<p><code>c.items() == [['this', 1], ['that', 2], ['thus', 0]</code></p>
<p>And the <code>lambda</code> allows for sorting on <code>1, 2, and 0</code>.</p>
<p>You already said you understand the <code>join</code>, but the <code>format</code> is only using the value of <code>key</code>; hence the <code>{0}</code>.</p>
<p>So here is an example with what you've got going on:</p>
<pre><code>&gt;&gt;&gt; c = {'this': 136, 'that': 133, 'thus': 156}
&gt;&gt;&gt; c.items()
dict_items([('this', 136), ('that', 133), ('thus', 156)])
&gt;&gt;&gt; t = ''.join('{0}'.format(key, val) for key, val in sorted(c.items(), key = lambda x:x[-1], reverse = True))
&gt;&gt;&gt; t
'thusthisthat'
</code></pre>
<p>Since the <code>sorted()</code> takes the <code>lambda</code> return as the <code>key</code>, we know that the <code>key</code> will be the last (<code>[-1]</code>) element for each element in the iterable (<code>c.items()</code>). That means we are going to automatically sort <strong>ascending</strong>, but since we have <code>reversed = True</code> we are going to sort <strong>descending</strong>. </p>
<p>As such, the above is what you get!</p>
</div>
<div class="post-text" itemprop="text">
<p>That is a fun one. People shouldn't write stuff like that professionally, especially without comments to explain what it does. </p>
<p>A counter is an iterable made from another iterable, with keys which are unique elements in the original iterable and values which are the number of times each element appears in the original iterable. For example:</p>
<pre><code>l1 = ["a"] * 4 + ["b"] * 2 + ["c"] * c + ["d"]
c1 = Counter(l1)
print c1
#Counter({'a': 4, 'c': 3, 'b': 2, 'd': 1})
</code></pre>
<p>Counter.items() converts the counter into a list of tuples of the form (key, value). The </p>
<pre><code>sorted(c.items(), key = lambda x:x[-1], reverse = True)
</code></pre>
<p>line takes that list of tuples and sorts them in descending order by the value element of the iterable. From the example above:</p>
<pre><code>l2 = sorted(c1.items(), key = lambda x:x[-1], reverse = True)
print l2
#[('a', 4), ('c', 3), ('b', 2), ('d', 1)]
</code></pre>
<p>Now that the list is sorted, it iterates over each key, value pair in the list. String.format in this case replaces the {0} with the first argument passed. They probably passed two elements to confuse you. All it ends up doing is appending each key in descending order of the number of occurrences in the original iterable.</p>
<pre><code>s1 = ''.join('{0}'.format(key, val) for key, val in l2)
print s1
#acbd
</code></pre>
<p>This is functionally equivalent to</p>
<pre><code>''.join(p[0] for p in sorted(c1.items(), key = lambda x:x[-1], reverse = True))
</code></pre>
<p>The String.format does basically nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>format is a method for string type for example:</p>
<pre><code>a = '{0} is very {1}'.format('Tom','tall')
</code></pre>
<p>output of a will be 'Tom is very tall'
and what lambda do is using a one time function</p>
<p><code>lambda x : x[-1]</code> actually is do the same thing with</p>
<pre><code>def function (x):
  return x
</code></pre>
<p>in your code <code>sorted(c.items(), key = lambda x:x[-1], reverse = True)</code>
mean sort c.items by the ( last item in c.item ) and reverse 
for example 
<code>c.items = [['a','1'],['b','0'],['c','3']]</code> after sort will be</p>
<pre><code>[['c', '3'], ['a', '1'], ['b', '0']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">documentation for format string syntax</a>:
The format string <code>"{0}"</code> contains one replacement field. The <code>0</code> references the first (zero-indexed) positional argument (this is <code>key</code> in <code>'{0}'.format(key, val)</code>). As ShadowRanger mentioned in a comment, the second positional argument <code>val</code> is not used. </p>
<p>See the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">documentation for <code>sorted</code></a>:
The lambda function is passed as the <code>key</code> argument. Basically, this is a way to control how <code>sorted</code> sorts the iterable. From the documentation:</p>
<blockquote>
<p><code>key</code> specifies a function of one argument that is used to extract a comparison key from each list element: <code>key=str.lower</code>. The default value is <code>None</code> (compare the elements directly).</p>
</blockquote>
</div>
<span class="comment-copy"><a href="https://github.com/lbonillaii/Practice/tree/temp/Python/Fog%20Creek%20problem" rel="nofollow noreferrer">Full code found here</a></span>
<span class="comment-copy">The <code>format</code> call is kinda needlessly confusing; it only uses <code>key</code>, but passes <code>value</code> too (it's effectively equivalent to <code>str(key)</code> for most, possibly all, key values)... I'd suggest reading the <code>str</code> documentation and <code>sorted</code>/<code>list.sort</code> docs.</span>
<span class="comment-copy">I only wanted the key to show up. Originally it was {0}{0}.format. I will definitely take a look at that. Now that I got it to work in my favor, I wanna make is cleaner while understanding what I am doing.</span>
<span class="comment-copy">Thank you very much for the explanations. I'm am very new at Python and I was answering a challenge using a language I've never used. I noticed the output of the counter function and it wasn't exactly what I was looking for. My results needed to be letters only and that is why I used format. Well I used format because I found code using it, so I adjusted it to fit my needs. I asked this question for the fact I did not fully understand what the code was doing. Now that I got my answer, I wanted to fully understand how I got there and a better way to do it.</span>
<span class="comment-copy">If you were curious about the challenge. I had to sort <code>abcdefghijklmnopqrstuvwxyz_</code> in descending order based on how many times that letter occurred in the provided text file. From there I had to remove the '_' and anything after to get my answer.</span>
