<div class="post-text" itemprop="text">
<p>I have built a huffman encoder in Python, but because I'm storing the bits (which represent the characters) as strings, the encoded text is larger than the original. How can I use actual bits to compress text properly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert a <code>str</code> of 1s and 0s to an <code>int</code> type variable like this:</p>
<pre><code>&gt;&gt;&gt; int('10110001',2)
177
</code></pre>
<p>And you can convert <code>int</code>s back to <code>str</code>s of 1s and 0s like this:</p>
<pre><code>&gt;&gt;&gt; format(177,'b')
'10110001'
</code></pre>
<p>Also, note that you can write <code>int</code> literals in binary using a leading <code>0b</code>, like this:</p>
<pre><code>&gt;&gt;&gt; foo = 0b10110001
&gt;&gt;&gt; foo
177
</code></pre>
<p>Now, before you say "No, I asked for bits, not ints!" think about that for a second. An <code>int</code> variable isn't stored in the computer's hardware as a base-10 representation of the number; it's stored directly as bits.</p>
<hr/>
<p>EDIT: Stefan Pochmann points out that this will drop leading zeros. Consider:</p>
<pre><code>&gt;&gt;&gt; code = '000010110001'
&gt;&gt;&gt; bitcode = int(code, 2)
&gt;&gt;&gt; format(bitcode, 'b')
'10110001'
</code></pre>
<p>So how do you keep the leading zeros? There are a few ways. How you go about it will likely depend on whether you want to type cast each character into an <code>int</code> first and then concatenate them, or concatenate the strings of 1s and 0s before type casting the whole thing as an <code>int</code>. The latter will probably be much simpler. One way that will work well for the latter is to store the length of the code and then use that with this syntax:</p>
<pre><code>&gt;&gt;&gt; format(bitcode, '012b')
'000010110001'
</code></pre>
<p>where <code>'012b'</code> tells the format function to pad the left of the string with enough zeros to ensure a minimum length of 12.  So you can use it in this way:</p>
<pre><code>&gt;&gt;&gt; code = '000010110001'
&gt;&gt;&gt; code_length = len(code)
&gt;&gt;&gt; bitcode = int(code, 2)
&gt;&gt;&gt; format(bitcode, '0{}b'.format(code_length))
'000010110001'
</code></pre>
<p>Finally, if that <code>{}</code> and second <code>format</code> is unfamiliar to you, read up on <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">string formatting</a>.</p>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/on-topic">on topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here. StackOverflow is not a design, coding, research, or tutorial service. Python has built-in bit operations; where are you stuck with those?</span>
<span class="comment-copy">If the string starts with zeros then you lose them.</span>
<span class="comment-copy">Most of them begin with 0 - how do I remedy this?</span>
