<div class="post-text" itemprop="text">
<p>I learned that "<code>r"\n"</code> is a two-character string containing <code>'\'</code> and <code>'n'</code>, while <code>"\n"</code> is a one-character string containing a newline. Regular expressions will often be written in Python code using this raw string notation." And the <code>r"\n"</code> is equivalent to <code>"\\n"</code> to denotes two-character string <code>'\'</code> and <code>'n'</code>.</p>
<p>I test it by printing and it works</p>
<pre><code>&gt;&gt;&gt;print(r"\n") or print("\\n")
'\n'
</code></pre>
<p>However, when I tested in regex</p>
<pre><code>&gt;&gt;&gt;import re
&gt;&gt;&gt;re.findall("\d+", '12 cats, 10 dogs, 30 rabits, \d is here')
['12', '10', '30']
&gt;&gt;&gt;re.findall(r"\d+", '12 cats, 10 dogs, 30 rabits, \d is here')
['12', '10', '30']  # Still the same as before, seems 'r' doesn't work at all
&gt;&gt;&gt;re.findall("\\d+", '12 cats, 10 dogs, 30 rabits, \d is here')
['12', '10', '30']  # Doesn't work yet
</code></pre>
<p>When I tried this, it works though</p>
<pre><code>&gt;&gt;&gt;re.findall(r"\\d+", '12 cats, 10 dogs, 30 rabits, \d is here')
['\\d']
&gt;&gt;&gt;re.findall("\\\d+", '12 cats, 10 dogs, 30 rabits, \d is here')
['\\d']
&gt;&gt;&gt;re.findall("\\\\d+", '12 cats, 10 dogs, 30 rabits, \d is here')
['\\d']  # Even four backslashes
</code></pre>
<p>Why? Does this mean I have to add one more backslash when using regex to make sure it is a raw string?</p>
<p>Reference: <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/regex.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The reason that <code>"\d+"</code> works is that <code>"\d"</code> is not a proper escape sequence in Python strings and Python simply treats it as a backslash followed by a "d" instead of producing a syntax error.</p>
<p>So <code>"\d"</code>, <code>"\\d"</code> and <code>r"\d"</code> are all equivalent and represent a string containing one backslash and one d. The regex engine than sees this backslash + "d" and interprets it as "match any digit".</p>
<p><code>"\\\d"</code>, <code>"\\\\d"</code> and <code>r"\\d"</code>, on the other hand, all contain two backslashes followed by a "d". This tells the regex engine to match a backslash followed by a "d".</p>
</div>
<span class="comment-copy"><code>"\d+"</code> isn't a string where the backslash has any non-literal meaning, so it works whether or not it's specified with raw syntax. However, the raw syntax is clearer to a human reader -- they don't have to think about whether <code>"\d"</code> is parsed differently, as <code>"\t"</code> or <code>"\n"</code> or such are.</span>
<span class="comment-copy">Raw strings disable Python's backslash processing. They do not disable the regex engine's backslash processing; that would completely defeat the purpose of raw strings.</span>
