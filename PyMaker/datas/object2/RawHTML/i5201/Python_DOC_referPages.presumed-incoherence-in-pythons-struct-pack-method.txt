<div class="post-text" itemprop="text">
<p>I am very confused right now.</p>
<p>If I pack a 7-length binary string, the result is the following:</p>
<pre><code>&gt;&gt;&gt; struct.pack('7s',b'\x1fBLOCK\n')
b'\x1fBLOCK\n'
</code></pre>
<p>Moreover, if I pack an unsigned long long, the result is:</p>
<pre><code>&gt;&gt;&gt; struct.pack('1Q',126208)
b'\x00\xed\x01\x00\x00\x00\x00\x00'
</code></pre>
<p>But, if I pack both together, the reuslt adds an extra byte:</p>
<pre><code>&gt;&gt;&gt; struct.pack('7s1Q',b'\x1fBLOCK\n',126208)
b'\x1fBLOCK\n\x00\x00\xed\x01\x00\x00\x00\x00\x00'
</code></pre>
<p>Anyone knows why this extra byte appears? </p>
<blockquote>
<p>b'\x1fBLOCK\n <strong>\x00</strong>\x00\xed\x01\x00\x00\x00\x00\x00'</p>
</blockquote>
<p>This fact is ruining the binary reading of a custom file...</p>
</div>
<div class="post-text" itemprop="text">
<p>The layout of bytes produced by <code>struct.pack</code> will (by default) match that produced by your platforms C compiler, which may include pad bytes between fields. You can disable this behaviour by adding a <code>=</code> to the start of your format string:</p>
<pre><code>&gt; struct.pack('7s1Q',b'\x1fBLOCK\n',126208) # C-style layout with padding bytes
'\x1fBLOCK\n\x00\x00\xed\x01\x00\x00\x00\x00\x00'
&gt; struct.pack('=7s1Q',b'\x1fBLOCK\n',126208) # No padding
'\x1fBLOCK\n\x00\xed\x01\x00\x00\x00\x00\x00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems that I have used the <code>@</code> flag, which means that the byte order is the native one, and the final size is thus variable.</p>
<p>The solution lies on using a fixed size flag, such as <code>&lt;</code>, <code>&gt;</code>, <code>!</code> or <code>=</code>:</p>
<pre><code>&gt;&gt;&gt; struct.pack('&lt;7s1Q',b'\x1fBLOCK\n',126208)
b'\x1fBLOCK\n\x00\xed\x01\x00\x00\x00\x00\x00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The additional <code>\x00</code> is the string termination byte - in C a string is ended by  <code>\x00</code>. </p>
<p>You concattenate a string to a unsigned long long, so </p>
<blockquote>
<p>Note By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/struct.html#module-struct" rel="nofollow noreferrer">applies</a>.</p>
<p><a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html#format-characters</a></p>
<pre><code>b'\x1fBLOCK\n\x00   \x00\xed\x01\x00\x00\x00\x00\x00'  
    1 23456 7  8th   1   2   3   4   5   6    7   8
</code></pre>
</div>
