<div class="post-text" itemprop="text">
<p>Given an input list as:</p>
<pre><code>l=[["A","B"],["C","D","E"],["F","G"]]
</code></pre>
<p>What I wanted to make with this list is:</p>
<pre><code>o = ["ACF", "ACG", "ADF", "ADG", "AEF", "AEG",
     "BCF", "BCG", "BDF", "BDG", "BEF", "BEG"]
</code></pre>
<p>At first, I tried to generate a list of <code>len</code>, and multiple with standard function <code>reduce</code> and functools's <code>mul</code>.</p>
<pre><code>ls = list(map(len,l))
ll = ["" for i in range(reduce(mul, ls, 1))]
</code></pre>
<p>Next, I don't have efficient or "pythonic" idea to solve this.</p>
<p>By the way, this seems to be similar problem with tree traversal, but I thought this is multiple-parent tree or problem related to graph implementation.</p>
<p>For efficiency in memory issue to deal with a huge list of lists, how can I solve this with python generator by using directed graph or any other algorithm?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l=[["A","B"],["C","D","E"],["F","G"]]
&gt;&gt;&gt; list(map(''.join,itertools.product(*l)))
['ACF', 'ACG', 'ADF', 'ADG', 'AEF', 'AEG', 'BCF', 'BCG', 'BDF', 'BDG', 'BEF', 'BEG']
</code></pre>
<p>From the documentation:</p>
<blockquote>
<p>Cartesian product of input iterables.
  Roughly equivalent to nested for-loops in a generator expression. For example, product(A, B) returns the same as ((x,y) for x in A for y in B).</p>
</blockquote>
</div>
