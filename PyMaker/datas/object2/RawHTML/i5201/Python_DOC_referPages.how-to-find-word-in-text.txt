<div class="post-text" itemprop="text">
<p>I have to find if word is present in text.I have to do <code>FPS</code> present in <code>PS 18 26888 12345</code>. In this it should detect PS though <code>'F'</code> is not present in <code>'PS 18 26888 12345'</code>. I have tried </p>
<pre><code>if "FPS" in "PS 18 26888 12345":
    --executing following code
</code></pre>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if "FPS" in "PS 18 26888 12345":
</code></pre>
<p>This looks for the substring <code>"FPS"</code> in full (so <code>'ab' in 'abba'</code> is <code>True</code> but <code>'abc' in 'abba'</code> is <code>False</code>), but I think you want to find if any of <code>"F"</code> or <code>"P"</code> or <code>"S"</code> are in the string. In which case you should use:</p>
<pre><code>if any(char in "PS 18 26888 12345" for char in "FPS"):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>A = "FPS"
S = 'PS 18 26888 12345'

def checkValue(A, S):
    has_value = False
    while A:
        if A in S:
            has_value = True
            break
        else:
            A = A[1:]
    return has_value

if checkValue(A, S):
    print "Ok!!!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find all that are contained in your text:</p>
<pre><code>from itertools import  combinations,chain

text =  "PS 18 26888 12345"
sear = "FPS"

comb = chain.from_iterable( combinations(sear, r = length) 
                            for length in range(1,len(sear)+1))

for f in comb:
    lu = ''.join(f)
    if ''.join(lu) in text:
        print(text, " contains ", lu)
</code></pre>
<p>Output:</p>
<pre><code>PS 18 26888 12345  contains  P
PS 18 26888 12345  contains  S
PS 18 26888 12345  contains  PS
</code></pre>
<p>This</p>
<pre><code>comb = chain.from_iterable( combinations(sear, r = length) 
                            for length in range(1,len(sear)+1))
</code></pre>
<p>creates all combinations from <code>sear</code> of length <code>[1, 2, 3, ..., len(sear)]</code>. 
For <code>FPS</code> this is</p>
<pre><code>('F',) ('P',) ('S',) ('F', 'P') ('F', 'S') ('P', 'S') ('F', 'P', 'S')
</code></pre>
<p>which are joined back to a string with ''.join(..) and each checked against your big string.</p>
<p>Doku:</p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer">itertools.chain.from_iterable</a><br/>
<a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a></p>
<p>The "mechanism" is documented in <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">power-recipies</a> on the itertools-page as <code>powerset</code>:</p>
<pre><code>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</code></pre>
<p>which I modified to not contain the empty tuple</p>
<p><code>comb</code> itself is an iterables so you can "use" it only once, persist it into a list if you need it more then once:</p>
<pre><code>combList = list(comb)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this approach if you want:</p>
<pre><code>data_1='PS 18 26888 12345'
data_2='FPS'


print(list(map(lambda x:" ".join(list(filter(lambda y:x in data_1,x))),data_2)))
</code></pre>
<p>output:</p>
<pre><code>['', 'P', 'S']
</code></pre>
</div>
<span class="comment-copy">I don't understand -- why should a test if <code>FPS</code> is in a string return <code>True</code> when <code>FPS</code> is <i>not</i> in the string?</span>
<span class="comment-copy">Are you looking for ´F´ or ´P´ or ´S´ in text?</span>
<span class="comment-copy">That is a reasonable guess (so I won't downvote it) but an obscure question should be closed if not clarified rather than answered based on a guess of their meaning.</span>
<span class="comment-copy">@JohnColeman I'm like 99% sure that's what OP means from their question "In this it should detect PS". I agree, we shouldn't guess but I think we can allow a reasonable amount of leeway for non-native english speakers who have trouble conveying what they want.</span>
<span class="comment-copy">As I said, it is a reasonable guess, but my certainty is considerably less than 99% -- perhaps they want to know if a <i>substring</i> of <code>FPS</code> is in it so that <code>PS</code> is okay but <code>SP</code> isn't.</span>
<span class="comment-copy">Thank you so much.</span>
<span class="comment-copy">@JohnColeman Just in case I provided that one ;)</span>
<span class="comment-copy">Thank you..It work as i want.</span>
