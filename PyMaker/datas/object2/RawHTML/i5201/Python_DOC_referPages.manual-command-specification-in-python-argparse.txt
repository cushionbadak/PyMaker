<div class="post-text" itemprop="text">
<p>An example would be better, consider this silly one:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--foo', nargs='+', help='Spam egg')

parser.parse_args()
</code></pre>
<p>When I run the <code>---help</code>:</p>
<pre><code>usage: foos.py [-h] [-f FOO [FOO ...]]

optional arguments:
  -h, --help            show this help message and exit
  -f FOO [FOO ...], --foo FOO [FOO ...]
                        Spam egg
</code></pre>
<p>As i have used <code>nargs ='+'</code>, i am getting <code>-f FOO [FOO ...]</code> and similarly <code>-foo FOO [FOO ...]</code>, but i want just one <code>FOO</code> to  be shown in the <code>--help</code> i.e. i want:</p>
<pre><code>usage: foos.py [-h] [-f FOO]

optional arguments:
  -h, --help            show this help message and exit
  -f FOO, --foo FOO
                        Spam egg
</code></pre>
<p>I have taken a look at the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse doc</a> but could not find anything similar. How can i do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>you could implement your own formatter:</p>
<pre><code>import argparse

class MyFormatter(argparse.HelpFormatter):

    def _format_args(self, action, default_metavar):
        get_metavar = self._metavar_formatter(action, default_metavar)
        if action.nargs is None:
            result = '%s' % get_metavar(1)
        elif action.nargs == argparse.OPTIONAL:
            result = '[%s]' % get_metavar(1)
        elif action.nargs == argparse.ZERO_OR_MORE:
            result = '[%s [%s ...]]' % get_metavar(2)

        #let's customize this part
        elif action.nargs == argparse.ONE_OR_MORE:
            #result = '%s [%s ...]' % get_metavar(2)
            result = '%s' % get_metavar(1)

        elif action.nargs == argparse.REMAINDER:
            result = '...'
        elif action.nargs == argparse.PARSER:
            result = '%s ...' % get_metavar(1)
        else:
            formats = ['%s' for _ in range(action.nargs)]
            result = ' '.join(formats) % get_metavar(action.nargs)
        return result

parser = argparse.ArgumentParser(formatter_class = MyFormatter)

parser.add_argument('-f', '--foo', nargs='+', help='Spam egg')
parser.parse_args()
</code></pre>
<p>this would give:</p>
<pre><code>usage: test.py [-h] [-f FOO]

optional arguments:
  -h, --help         show this help message and exit
  -f FOO, --foo FOO  Spam egg
</code></pre>
</div>
<span class="comment-copy">Well, <code>FOO [FOO ...]</code> is just the syntax for at least one, but possibly more, arguments.</span>
<span class="comment-copy">@Graipher Yes, as I have used <code>nargs='+'</code>, but can I drop that reference from help?</span>
