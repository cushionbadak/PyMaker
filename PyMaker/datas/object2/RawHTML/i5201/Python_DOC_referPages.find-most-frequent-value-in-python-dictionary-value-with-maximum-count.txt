<div class="post-text" itemprop="text">
<p>I am trying to write a function that returns the most frequent value in a dictionary in Python. <strong>I do not want to import anything</strong>, just simple code.</p>
<p>Any ideas? For example, if my dictionary is:</p>
<pre><code>input_dict = {'A': 1963, 'B': 1963, 
    'C': 1964, 'D': 1964, 'E': 1964,
    'F': 1965, 'G': 1965, 'H': 1966,
    'I': 1967, 'J': 1967, 'K': 1968,
    'L': 1969 ,'M': 1969,
    'N': 1970}
</code></pre>
<p>The expected result is <strong>1964</strong>
<em>(because it is present as the value in the <code>dict</code> 3 times (maximum count))</em>.</p>
<p>This was my last attempt:</p>
<pre><code>def most_prolific(input_dict):

    values = []
    for year in input_dict.values():
        if year in input_dict.values():
            values.append(year)


    for most in values:
        if most in values:
         return max(values.count(most))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even i suggest you don't need to import anything , its simple task :</p>
<pre><code>input_dict = {'A': 1963, 'B': 1963,
    'C': 1964, 'D': 1964, 'E': 1964,
    'F': 1965, 'G': 1965, 'H': 1966,
    'I': 1967, 'J': 1967, 'K': 1968,
    'L': 1969 ,'M': 1969,
    'N': 1970}


track={}

for key,value in input_dict.items():
    if value not in track:
        track[value]=0
    else:
        track[value]+=1

print(max(track,key=track.get))
</code></pre>
<p>output:</p>
<pre><code>1964
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Using <a href="https://docs.python.org/3.1/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</h1>
<p>Simplest way to achieve this is via using Python's builtin <a href="https://docs.python.org/3.1/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> which is created for the same purpose. Here's the sample code for your example:</p>
<pre><code>from collections import Counter 
input_dict = {'A': 1963, 'B': 1963, 'C': 1964, 'D': 1964, 'E': 1964, 'F': 1965, 'G': 1965, 'H': 1966, 'I': 1967, 'J': 1967, 'K': 1968, 'L': 1969 ,'M': 1969, 'N': 1970}

value, count = Counter(input_dict.values()).most_common(1)[0]
# in above code, `value` will hold value `1964`  &lt;--- one you desire
#            and `count` will hold value `3`
</code></pre>
<h1>Using intermediate dict (with no imports)</h1>
<p>Here's another one <strong>without importing any module</strong>. Here I am creating my own counter using <code>dict</code> as:</p>
<pre><code>my_counter_dict = {}
for v in input_dict.values():
    my_counter_dict[v] = my_counter_dict.get(v, 0)+1

# Value hold by `my_counter_dict`:
#  {1963: 2, 1964: 3, 1965: 2, 1966: 1, 1967: 2, 1968: 1, 1969: 2, 1970: 1}
</code></pre>
<p>From the above <code>dict</code>, extract the key with maximum value using <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> function as:</p>
<pre><code>&gt;&gt;&gt; max(my_counter_dict.iterkeys(), key=my_counter_dict.get)
1964
</code></pre>
<h1>Without using intermediate dict (with no imports)</h1>
<p>Here's another alternative without creating the intermediate dictionary, but it is relatively less efficient because of one complete iteration of the list due to the <code>list.count</code> for each element in list:</p>
<pre><code>&gt;&gt;&gt; values_list = list(input_dict.values())
&gt;&gt;&gt; max(set(values_list), key=values_list.count)
1964
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really insist on not importing anything. Consider this:</p>
<pre><code>input_dict = {'A': 1963, 'B': 1963,
    'C': 1964, 'D': 1964, 'E': 1964,
    'F': 1965, 'G': 1965, 'H': 1966,
    'I': 1967, 'J': 1967, 'K': 1968,
    'L': 1969 ,'M': 1969,
    'N': 1970}

def most_prolific(input_dict):
    value_list = list(input_dict.values())

    #for each uniqute value in value_list, count the frequency, and return the max
    return max([(value_list.count(x),x) for x in set(value_list)])

print(most_prolific(input_dict)[1]) #returns 1964 in your example
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can utilize the <code>max</code> function with <code>key</code> parameter:</p>
<pre><code>input_dict = {'A': 1963, 'B': 1963, 
'C': 1964, 'D': 1964, 'E': 1964,
'F': 1965, 'G': 1965, 'H': 1966,
'I': 1967, 'J': 1967, 'K': 1968,
'L': 1969 ,'M': 1969,
'N': 1970}
max_recurrence = max(input_dict.values(), key=lambda x:input_dict.values().count(x))
</code></pre>
<p>Output:</p>
<pre><code>1964
</code></pre>
</div>
<span class="comment-copy">Format code as code please. And what was wrong with your code?</span>
<span class="comment-copy"><a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">How to debug small programs</a>.</span>
<span class="comment-copy"><code>for year in input_dict.values():  if year in input_dict.values():</code> always <code>true</code>...</span>
<span class="comment-copy">Thanks, for the remarks about formatting as code. It was my first post ever ;)</span>
<span class="comment-copy">Given my current kwnowledge I've implemented this solution which is more in line with what is being requested. Thanks once again :)</span>
<span class="comment-copy">@MarceloTaube you mean you have already implemented this ?</span>
<span class="comment-copy">@Martjin, yes. Thanks again!</span>
