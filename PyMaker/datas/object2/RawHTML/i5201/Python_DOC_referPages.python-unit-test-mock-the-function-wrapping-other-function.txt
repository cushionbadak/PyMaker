<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16134281/python-mocking-a-function-from-an-imported-module">Python Mocking a function from an imported module</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Here is what I want to test:</p>
<p><strong>test.py</strong></p>
<pre><code>class MyTest(TestCase)

    def test1(self):
        data = crawl_data()

        Check data lengh and current data in DB...

        function2()

        Again, Check data lengh and current data in DB...
</code></pre>
<p>And program code:</p>
<p><strong>a.py</strong></p>
<pre><code>def crawl_data():
    """
    crawl data from web
    """
    .
    .
    return web_crawled_data
</code></pre>
<p><strong>b.py</strong></p>
<pre><code>from a import crawl_data

def function2():
    """
    crawl data and store new data in database
    """
    .
    .
    result = crawl_data()
    .
    .
    update data and update Database
    .
    . 
</code></pre>
<p>What I want to do is testing <code>function2()</code>. Problem is though <code>function2()</code> call <code>crawl_data()</code> inside. </p>
<p>I don't want <code>crawl_data()</code> to crawl data from web in the test, So I tried mocking this function.</p>
<pre><code>@patch("a.crawl_data")
def test1(self, crawl_data):
    crawl_data.return_value = [("112233", "ABCDEF"), ("222233", "EFGHIJ")]

    data = crawl_data()

    Check data length and current data in DB

    function2()

    Check the database whether new data stored in DB
</code></pre>
<p>When I run the test, <code>function2()</code> still crawl data from the web in real!</p>
<p>The reason that I don't want to mock function2 is that, when I start the test, test framework use virtual database (provided by <code>django</code>)!</p>
<p>So, What I want to do is make <code>crawl_data()</code> as a mock when the <code>function2()</code> call it inside.</p>
<p>How can I do that?</p>
<p><br/>
<br/>
<br/>
<br/>
<strong>EDIT</strong></p>
<p>I followed the solution "Martijn Pietersâ™¦" gave, and implement code like below:</p>
<p><strong>a.py</strong></p>
<pre><code>def sum():
    return 1
</code></pre>
<p><strong>b.py</strong></p>
<pre><code>from a import sum

def calling_sum():
    return sum()
</code></pre>
<p><strong>test1.py</strong></p>
<pre><code>@patch("b.sum")
def test_sum(self, sum):
    sum.return_value = 10
    print(calling_sum())
</code></pre>
<p><strong>result</strong></p>
<p>It print out "1", not 10....</p>
<p>I tried to change <code>@patch("b.sum")</code> to <code>@patch("b.fake_sum")</code> to check whether it import correctly, and <code>@patch("b.fake_sum")</code> occured error(something like <code>fake_sum not exsits</code>) so I think <code>importing module</code> works well </p>
<p>Still doesn't work..</p>
</div>
<div class="post-text" itemprop="text">
<p>You are patching the wrong reference to <code>crawl_data</code>; the <code>b</code> module has a direct reference to the function, which patching <code>a.crawl_data</code> won't touch. Patch it in <code>b</code>:</p>
<pre><code>@patch("b.crawl_data")
def test1(self, crawl_data):
    crawl_data.return_value = [("112233", "ABCDEF"), ("222233", "EFGHIJ")]
</code></pre>
<p>Also see the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer"><em>Where to patch</em> section</a> of the <code>mock</code> module documentation. </p>
<p>There is no point in using <code>data = crawl_data()</code> in your test, there is little point in testing your mock.</p>
</div>
<span class="comment-copy">Your edit has both the original and the mock return 10. If you are seeing <code>1</code> then you are not running the code posted.</span>
<span class="comment-copy">@MartijnPieters I edited it!</span>
<span class="comment-copy">What is <code>b()</code>? Please, post a proper MCVE, code you actually can copy and run.</span>
<span class="comment-copy">@MartijnPieters Really sorry about making such a mistake T_T</span>
<span class="comment-copy">See <a href="https://gist.github.com/mjpieters/f88ee12a72f876f2b52a3983b58287d2" rel="nofollow noreferrer">gist.github.com/mjpieters/f88ee12a72f876f2b52a3983b58287d2</a> for what your test does. I renamed <code>a.py</code> to <code>foo.py</code>, and <code>b.py</code> to <code>ham.py</code> to create a more distinct difference. I also used <code>mock_foo_bar</code> as the name for the mock object to be clear that the argument passed in by <code>patch()</code> is a mock, not the original. The test shows that the mock is applied correctly. That's because the <code>ham.bar</code> reference is the global that <code>calling_foo_bar()</code> sees at the time it is called. Your MCVE <b>can't work differently</b>. It really does not reproduce.</span>
<span class="comment-copy">Thanks! but what is the meaning of "There is no point in using <code>data = crawl_data()</code> in your test, there is little point in testing your mock."? I'm not native english speaker, so hope explain in easy way please?</span>
<span class="comment-copy">When I follow your advices and run test, mocked <code>crawled_data.called()</code> return <code>False</code> after calling <code>function2()</code> in the test code...and it still crawl data from web.. not mocked!!</span>
<span class="comment-copy">@user3595632: in your question, you have <code>data = crawl_data()</code> in your <code>test1</code> method, right after the <code>crawl_data.return_value = [...]</code> assignment. Why do you call <code>crawl_data()</code> there? That's a call to the mock, and that call will always return the list you just assigned to <code>crawl_data.return_value</code>. That's not a useful test.</span>
<span class="comment-copy">@user3595632: for your <code>b.py</code> module, as shown in the question, <code>@patch("b.crawl_data")</code> <b>does work</b>, and for the duration of <code>test1()</code>, using the name <code>crawl_data()</code> in <code>function2()</code> <b>will</b> call the mock. Perhaps you have not accurately recreated your actual situation?</span>
<span class="comment-copy">@Martjin Pieters : I edited the post. Please check that out</span>
