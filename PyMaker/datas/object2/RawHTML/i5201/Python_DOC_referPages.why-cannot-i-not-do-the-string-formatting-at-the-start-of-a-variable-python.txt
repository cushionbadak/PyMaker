<div class="post-text" itemprop="text">
<p>Why does this work:</p>
<pre><code>with open(filename+'%s' % i, "w")
</code></pre>
<p>But this doesn't:</p>
<pre><code>with open('%s'+filename % i, "w")
</code></pre>
<p>I want to add the number of i to the start of the filename each time it loops through. But adding it at the end adds the number to the extension example - filname.xml0 </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>%</code> operator has a <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher operator precedence</a> than the <code>+</code> operator, and it is applied <em>first</em>.</p>
<p>Python executes:</p>
<pre><code>filename + ('%s' % i)
</code></pre>
<p>in the first case, and</p>
<pre><code>'%s' + (filename % i)
</code></pre>
<p>in the second.</p>
<p>You could add parentheses to override this:</p>
<pre><code>('%s' + filename) % i
</code></pre>
<p>Or you could interpolate both <code>filename</code> and <code>i</code> into a template:</p>
<pre><code>'%s%s' % (i, filename)
</code></pre>
<p>This has the added advantage that any <code>%</code> characters <em>in the filename</em> are not seen as special (which would cause problems).</p>
<p>If you are using Python 3.6 or newer, you should really use a <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literal</a> to do the same work; these expressions are way faster:</p>
<pre><code>with open(f'{i}{filename}', 'w') as fileobj:
</code></pre>
<p>Note the <code>f</code> prefix to the string, the <code>{}</code> slots are filled with the results of the expressions contained within them. This is also clearer and more readable, I think.</p>
</div>
<div class="post-text" itemprop="text">
<p>Operator priority means the <code>%</code> has higher precedence than the <code>+</code>.</p>
<p>So</p>
<pre><code>with open('%s'+filename % i, "w")
</code></pre>
<p>is equivalent to:</p>
<pre><code>with open('%s' + (filename % i), "w")
</code></pre>
<p>You could parenthesise:</p>
<pre><code>with open(('%s'+filename) % i, "w")
</code></pre>
<p>but that will go horribly wrong if the filename contains a literal <code>%</code> character.</p>
<p>So use string formatting for both:</p>
<pre><code>with open('%s%s' % (filename, i), "w")
</code></pre>
<p>or</p>
<pre><code>with open('{}{}'.format(filename, i), "w")
</code></pre>
<p>or just concatenate strings:</p>
<pre><code>with open(str(i) + filename, "w")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The operations priority is the problem Simply add brackets like so:</p>
<pre><code>with open(('%s'+filename) % i, "w")
</code></pre>
<p>Otherwise you are first trying to format <code>filename</code> using <code>i</code> and only after that add the result to <code>%s</code>. </p>
</div>
<span class="comment-copy">The multiplicative operators <code>*</code>, <code>/</code>, <code>//</code> &amp; <code>%</code> have higher precedence than the additive operators <code>+</code> &amp; <code>-</code>. The <code>%</code> is still essentially the modulus operator, even though it does a different job when you use it for string interpolation, so it still has it's usual precedence.</span>
