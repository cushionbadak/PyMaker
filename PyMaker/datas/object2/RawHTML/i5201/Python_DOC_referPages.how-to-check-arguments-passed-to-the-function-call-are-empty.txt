<div class="post-text" itemprop="text">
<p>I want the function to simply check if an argument is passed or not. If not, print something, else say some hello and that argument.</p>
<p>Here is sample of my code:</p>
<pre><code>def say_name(name):
  if name is None:
    print("Hello there")
  else:
    print("Hello, "+ name + "!")
</code></pre>
<p>run code:</p>
<pre><code>class Test(unittest.TestCase):
  def test_should_say_hello(self):
    self.assertEqual(say_name("Michael"), "Hello, Michael!")
</code></pre>
<p>I have tried using <code>None</code>, Kwargs and still not working. <strong>How can I check whether argument is passed to the function?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>To make a parameter optional assign it a default value:</p>
<pre><code>def say_name(name=None):
    if name is None:
        print("Hello there")
    else:
        print("Hello, "+ name + "!")
</code></pre>
<p><strong>Addendum:</strong> As Barmar pointed out in the comments to your question, your function needs to <a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer">return</a> a string to make your check work.</p>
<pre><code>def say_name(name=None):
    if name is None:
        return "Hello there"
    else:
        return "Hello, "+ name + "!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>To check whether "any" of the argument is passed with the function call</strong></p>
<p>In general, in order to check whether any argument is passed or not, you may create your function using <code>*args</code> <em>(for non-keyworded variable length argument list)</em> and <code>**kwargs</code> <em>(for keyworded variable length argument list)</em>. For example:</p>
<pre><code>def check_argument(*args, **kwargs):
    if args or kwargs:   # check if any among the `args` or `kwargs` is present
        return "Argument Passed!"
    else:
        return "Argument Not passed!"
</code></pre>
<p>Sample Run:</p>
<pre><code># For "non-keyworded" argument
&gt;&gt;&gt; check_argument('something')
'Argument Passed!'

# For "keyworded" argument
&gt;&gt;&gt; check_argument(some_param='some_value')
'Argument Passed!'

# For no argumenet    
&gt;&gt;&gt; check_argument()
'Argument Not passed!'
</code></pre>
<p><strong>To check if any "specific" argument is passed with the function call</strong></p>
<p>For your scenario, since you only care about one specific parameter <code>name</code> and perform operation based on the value passed, you may assign a <code>default</code> value to it's function definition as:</p>
<pre><code>#                  v Default value as `None`
def say_name(name=None):
    if name is None:
        return "Hello, there!"
    else:
        return "Hello, "+ name + "!"
</code></pre>
<p>Above function could be simplified as:</p>
<pre><code>#                    v setting default name as "there"
def say_name(name="there"):
    return "Hello, {}!".format(name)

# Or you may also check it within the format as
def say_name(name=None):
    return "Hello, {}!".format(name or "there")
</code></pre>
<p>Sample Run:</p>
<pre><code>&gt;&gt;&gt; say_name()
Hello, there!
&gt;&gt;&gt; say_name('StackOverflow')
Hello, StackOverflow!
</code></pre>
</div>
<span class="comment-copy">Your current code won't work if there is no parameter passed, the argument isn't optional.</span>
<span class="comment-copy">Your function doesn't return anything, the test will never succeed.</span>
<span class="comment-copy">You need to learn the difference between returning a value and printing.</span>
<span class="comment-copy">You might also want to consider the case that an empty string is passed as an argument. <code>"" is not None</code>, but it also doesn't contain any characters.</span>
<span class="comment-copy">thanks Barmar and Ansgar,  tried on actual code it works....</span>
