<div class="post-text" itemprop="text">
<p>I want to create a function <code>my_sum_div(a, b, div=10)</code> which will compute the sum of numbers from <code>a</code> to <code>b</code>, prints out this sum, but also all intermediate sums of type <code>a+(a+1)+(a+2)+(a+3)</code> that are divisible by <code>div</code>.
I want the program to work as follows:</p>
<pre><code>    my_sum_div(1, 10, 2)
</code></pre>
<p>The output should look like:</p>
<pre><code>sums divisible by 2:
6
10
28
36
sum of numbers between 1 and 10 is: 55
</code></pre>
<p>Now I have already done this:</p>
<pre><code>    def my_sum(a, b):
    print("sum of numbers between", a," and", b," is", sum(i for i in 
    range(a, b+1)))

    def my_sum_div(a, b, div = 3):
    print("sums divisible by", div,":")

    l = []
    s = ","
    x = sum(i for i in range(a, b+1)
    for i in range(a, b+1):
        if (i%div==0):
            l.append(str(i))

    print(s.join(l))

    print("sum of numbers between", a, " and", b, " is", sum(i for i in 
    range(a, b + 1))
</code></pre>
<p>Ive been trying for hours. I know my code only checks what numbers between <code>(a, b+1)</code> are divisible by <code>div</code>, but how do I make it so that the function computes and prints all the intermediate sums that are divisible by <code>div</code>? My first function only computes the sum of all integers in the given interval. I now want the subsequent function to compute all intermediate sums that are divisible by div in a given interval and print all of these. </p>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def my_sum_div(a,b,div):
        sum = 0
        for i in range(a, b + 1):
            sum += i
            if sum % div == 0:
                print(sum)
        return sum

print(my_sum_div(1,10,2))
</code></pre>
<p>Output:</p>
<pre><code>6
10
28
36
55
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may create your custom <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer"><em>generator</em></a> to <a href="https://docs.python.org/3/reference/simple_stmts.html#yield" rel="nofollow noreferrer"><code>yield</code></a> the results as:</p>
<pre><code>def my_sum_div(start, end, d):
    my_sum = 0
    for x in range(start, end+1):
        my_sum += x 
        if my_sum % d == 0:
            yield my_sum
    # yield my_sum     # &lt;-- uncomment this if you want the total 
                       #     sum to be returned at the end
</code></pre>
<p>Using above generator, you may yield one result at a time with <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><strong><code>next()</code></strong></a> as:</p>
<pre><code>&gt;&gt;&gt; my_generator = my_sum_div(1, 10, 2)
&gt;&gt;&gt; next(my_generator)
6
&gt;&gt;&gt; next(my_generator)
10
&gt;&gt;&gt; next(my_generator)
28
</code></pre>
<p>OR you may get the list of all the results in one go as:</p>
<pre><code>&gt;&gt;&gt; list(my_sum_div(1, 10, 2))
[6, 10, 28, 36]
</code></pre>
<hr/>
<p>Result with commented version of code to yield total <code>my_sum</code> at last:</p>
<pre><code>&gt;&gt;&gt; list(my_sum_div(1, 10, 2))
[6, 10, 28, 36, 55]
</code></pre>
<p>In Python 3, you can simply store the sum of intermediate values and the total sum at the end in two variables as:</p>
<pre><code>&gt;&gt;&gt; *intermediate_sum, total_sum = list(my_sum_div(1, 10, 2))
# where: 
#  - `intermediate_sum` will hold the value `[6, 10, 28, 36]`
#  - `total_sum` will hold the value `55`
</code></pre>
<p>For older versions of Python, you need to do:</p>
<pre><code>&gt;&gt;&gt; sum_list = list(my_sum_div(1, 10, 2))
&gt;&gt;&gt; intermediate_sum, total_sum = sum_list[:-1], sum_list[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hereâ€™s my implementation</p>
<pre><code>def my_sum(a, b):
    return sum(i for i in range(a, b+1)))

def my_sum_div(a, b, div = 3):
    print("sums divisible by", div,":")

    l = []
    s = ","
    test = 0
    for i in range(a, b+1):
        test += i
        if (test%div==0):
            l.append(str(test))

    print(s.join(l))

    print("sum of numbers between", a, " and", b, " is", my_sum(a, b))
</code></pre>
</div>
<span class="comment-copy">By the way, there is a common formula just using the value of <code>b</code>.  For the sum of all values <code>1..b</code> <a href="https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF" rel="nofollow noreferrer">en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF</a></span>
<span class="comment-copy">Tip: it'd be easier to follow if your code blocks were properly indented -- e.g. is <code>my_sum_div()</code> defined <i>inside</i> of <code>my_sum()</code>? (I think not, but looks that way as is) After indenting four spaces to start a code block, be sure to indent an additional four (or two) on the line after a <code>def ...</code>, just as you would when writing python into your editor/IDE. :)</span>
