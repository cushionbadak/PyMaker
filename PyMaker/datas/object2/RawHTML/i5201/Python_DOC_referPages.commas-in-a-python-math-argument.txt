<div class="post-text" itemprop="text">
<p>I noticed by accident that Python's primitive math operators support commas in both numeric arguments. A tuple is returned. What is it doing and why is this syntax supported?</p>
<p>Here are a few examples:</p>
<pre><code>&gt;&gt;&gt; 2,10,2 / 2
(2, 10, 1)

&gt;&gt;&gt; 2,10,2 * 2
(2, 10, 4)

&gt;&gt;&gt; 2,10,2 % 2,3
(2, 10, 0, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>2,10,2 / 2</code>, the operation performed actually is:</p>
<pre><code>2, 10, (2 / 2)
</code></pre>
<p>Hence you get the <code>(2, 10, 1)</code> as output.</p>
<p>In Python, tuples are actually a collection of values separated by commas, the surrounding parentheses are to avoid ambiguity.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are actually using a tuple (which is why the output is surrounded by the parenthesis.) The math is only happening on one element of the tuple.</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is especially visible in interactive mode.  Python semantics turn a comma-separated sequence into a tuple.  This underlies the "tuple unpacking" you know from function returns, such as</p>
<pre><code>value, status = my_func(args)
</code></pre>
<p>If you write</p>
<p>a, b, c = 1, 2, 3</p>
<p>You get the corresponding assignments just as if you'd put <code>(1, 2, 3)</code> on the RHS.  Similarly,</p>
<pre><code>a = 1, 2, 3
</code></pre>
<p>Gets you an <code>a</code> value of the entire tuple, <code>(1, 2, 3)</code>.</p>
<p>Note that you need an all-or-none approach: one variable on the LHS, or exactly the correct quantity for the tuple length.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are just defining a tuple, it's not that math operators supports commas. What python is doing there, is assuming you are doing a tuple (because of the commas), so it evaluate each value between the comas, and then store it to the tuple. Not a thing about primitive math operator, it's just how python interprets commas.
You could do <code>1,"a","a"+"b",2+5</code>, and that would give you the tuple <code>(1, "a", "ab", 7)</code>.</p>
<p>An easy and simplist way of giving an answer is: If python finds a comma in your code, it assumes you put it there for separating data. Then, if he finds <code>1, 1+1</code>, you are giving two data, a number one, and an expresion 1+1. Python evaluates the expresion and says "Oh, its 2". Then, he returns you the <code>(1,2)</code> tuple.</p>
<p>Im not an expert at python compiler, so don't rely 100% on my answer, but I'm quite sure that's the reason.</p>
</div>
<span class="comment-copy">Is this an order of operations question?</span>
<span class="comment-copy">I think this is equivalent to <code>(2, 10, (2/2))</code>, <code>(2, 10, (2*2))</code>, and <code>(2, 10, (2%2), 3)</code>.</span>
<span class="comment-copy">Ah, that's it! Should have noticed, thanks</span>
