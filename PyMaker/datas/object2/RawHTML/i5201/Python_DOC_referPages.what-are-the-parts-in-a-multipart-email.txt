<div class="post-text" itemprop="text">
<h1>A bit of context...</h1>
<p>Some time ago, I wrote Python a program that deals with email messages, one thing that always comes across is to know whether an email is "multipart" or not.</p>
<p>After a bit of research, I knew that it has something to do with emails containing HTML, or attachments etc... But I didn't really understand it.</p>
<h3>My usage of it was limited to 2 instances:</h3>
<p><strong>1. When I had to save the attachment from the raw email</strong> </p>
<p>I just found this on the internet (probably on here - Sorry for not crediting the person who wrote it but I can't seem to find him again :/) and pasted it in my code</p>
<pre><code>def downloadAttachments(emailMsg, pathToSaveFile):
    """
    Save Attachments to pathToSaveFile (Example: pathToSaveFile = "C:\\Program Files\\")
    """
    att_path_list = []
    for part in emailMsg.walk():
        # multipart are just containers, so we skip them
        if part.get_content_maintype() == 'multipart':
            continue

        # is this part an attachment ?
        if part.get('Content-Disposition') is None:
            continue

        filename = part.get_filename()

        att_path = os.path.join(pathToSaveFile, filename)

        #Check if its already there
        if not os.path.isfile(att_path) :
            # finally write the stuff
            fp = open(att_path, 'wb')
            fp.write(part.get_payload(decode=True))
            fp.close()
        att_path_list.append(att_path)
    return att_path_list
</code></pre>
<p><strong>2. When I had to get the text from the raw email</strong></p>
<p>Also pasted from someone on the internet without really understanding how it works.</p>
<pre><code>def get_text(emailMsg):
    """
    Output: body of the email (text content)
    """
    if emailMsg.is_multipart():
        return get_text(emailMsg.get_payload(0))
    else:
        return emailMsg.get_payload(None, True)
</code></pre>
<h2>What I do understand...</h2>
<p>Is that if the email message is multipart, the parts can be iterated over. </p>
<h1>My question is</h1>
<p>What <strong>exactly</strong> are these parts? How do you know which one is html for example? Or which one is an attachment? Or just the body?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no strict hierarchy or guidance for how exactly to use multipart messages. MIME simply defines a way to collect multiple payloads into a single email message. One of the original motivations I believe was to be able to embed pictures in text; but being able to attach binaries to a text message, and more generally, being able to create structured messages with payloads which are related in arbitrary ways is something which has simply been there for applications to use in whatever way they see fit.</p>
<p>A common misunderstanding is <em>postulating</em> a hierarchy into a "main part" and "subordinate" parts. It's certainly possible to create this structure, but it is by no means universally done. In fact, most multipart messages simply have a sequence of parts without any hierarchy. The user's email client will commonly pick one of the "inline" parts as the preferred "main" part to display in a message pane, but this is by no means dictated by the standard, or possible to enforce by the sending party.</p>
<p>Each MIME part has a set of headers which tell you the type, encoding, and disposition; for parts of type <code>text/*</code> the default disposition is "inline" (so it is often not explicitly spelled out) whereas most other parts have a default disposition of "attachment". You'll need to refer to the pertinent standards for a strict definition, but probably take it with a grain of salt, because many real-world applications are not particularly RFC-conformant.</p>
<p>For your concrete question, find the topmost leaf parts which are (implicitly or explicitly) inline, and display one which supports your use case as the "main" one. If you want to enforce HTML as the preferred format, you can do that; but many email applications defer this to the user to decide, and some users will definitely -- because of technical necessity, physical disabilities, or personal taste -- prefer plain-text when it's available.</p>
<p>Unfortunately, common practice by message producers recently has been to create a <code>multipart/alternative</code> container with <code>text/plain</code> and <code>text/html</code> members, but then provide a completely useless <code>text/plain</code> part and have all the actual content in a <code>text/html</code> part. The correct arrangement in this situation would be to simply not supply a <code>text/plain</code> part if you can't put anything useful in it (but I guess they only care about getting past some misguided spam filter, not about actually accommodating the preferences of the recipients).</p>
</div>
<div class="post-text" itemprop="text">
<p>The answers that you're looking for are all in the MIME standard, especially:</p>
<ul>
<li><a href="https://tools.ietf.org/html/rfc2045" rel="nofollow noreferrer">RFC2045</a></li>
<li><a href="https://tools.ietf.org/html/rfc2046" rel="nofollow noreferrer">RFC2046</a></li>
</ul>
<p>These standards together transformed e-mails from plaintext, English-only state to its current status where we have interesting ways of sending Unicode poo, properietary bitmaps with cute kittens, and also dozens of ways for non-conformant software and middleboxes along the path to corrupt the message in subtle and non-subtle ways. More details for these features are in:</p>
<ul>
<li><a href="https://tools.ietf.org/html/rfc2047" rel="nofollow noreferrer">RFC2047</a></li>
<li><a href="https://tools.ietf.org/html/rfc2048" rel="nofollow noreferrer">RFC2048</a>, now <a href="https://tools.ietf.org/html/rfc4288" rel="nofollow noreferrer">RFC4288</a>, <a href="https://tools.ietf.org/html/rfc4289" rel="nofollow noreferrer">RFC4299</a></li>
<li><a href="https://tools.ietf.org/html/rfc2049" rel="nofollow noreferrer">RFC2049</a> for examples and what not</li>
</ul>
<p>For the IMAP-specific part of your question, i.e., how to best access the MIME tree of these parts via IMAP, see <a href="https://tools.ietf.org/html/rfc3501" rel="nofollow noreferrer">RFC3501</a>, especially chapters which speak about <code>BODY</code> and <code>BODYSTRUCTURE</code> constructs.</p>
<p>If you would like to marvel at the beauty of MIME in action, take a look at the "MIME torture test". It is a bit tricky to find, because <a href="https://github.com/antoviaque/mail/blob/master/test/mime/rf-mime-torture-test-1.0.mbox" rel="nofollow noreferrer">this random item on github</a> is definitely not what I meant. Here's the original from Mark Crispin, an engineer who created IMAP:</p>
<ul>
<li><a href="http://gd.tuwien.ac.at/infosys/mail/imap/mime-examples/torture-test.mbox" rel="nofollow noreferrer">Mark Crispin's MIME torture test</a></li>
</ul>
<p>Yes, that's a lot of reading. Unfortunately, you will really need to <strong>understand</strong> all of the above to handle MIME properly and safely. Please, do not skip these resources and standards unless you want to create abominations such as a random bulk-mailer which consistently splits non-ASCII codepoints in UTF-8 into several adjacent MIME encoded chunks, etc. Thank you.</p>
</div>
<span class="comment-copy">Multipart is a way of encoding (possibly) multiple data elements inside a single body. It may mean that there are attachments or other items along with the text body but that is not necessary. You can also just encode a single message body in a multipart message.</span>
<span class="comment-copy"><code>if part.get('Content-Disposition') is None:</code> is incorrect. This simply tells you that this part doesn't have an explicit disposition; so you have to infer an implicit disposition, which depends on the part's type. <code>text/*</code> are commonly implicitly inline, while most other types are implicitly attachment.</span>
<span class="comment-copy">The <code>get_text()</code> is similarly naive. If you want to decide what to display as "the message", you want to avoid parts which are explicitly <code>Content-Disposition: attachment</code> or embedded in e.g. a bounce message. If there is a <code>multipart/alternative</code> (which might in practice be labelled <code>multipart/mixed</code> or <code>multipart/related</code> just as well) there are probably multiple renderings of the message body, and you pick the one which is suitable for your use case.</span>
<span class="comment-copy">The question is based on an inaccurate mental model. The designers of this had a different model: A message (or a part) may have several parts, which may be alternatives ('multipart/alternative'), serial etc. Each of the 0-n parts must have a type, such as HTML, JPEG, text, Wordstar Document, audio/mp3, or many others. Each part may be specified as being inline or an attachment, and if it's not specified the receiver gets to guess. This model gives senders a lot of flexibility... which is IMO good because real-world senders aren't very disciplined anyway and will break whatever rules are made.</span>
<span class="comment-copy">@arnt "Gets to guess" is incorrect; the default disposition is defined for each type.</span>
<span class="comment-copy">Wonderful answer. This should be upvoted way more.</span>
<span class="comment-copy">Python 3.6+ has a revamped <code>email</code> library with a method <a href="https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_body" rel="nofollow noreferrer"><code>get_body</code></a> which attempts to guess the "main body part" for you.</span>
