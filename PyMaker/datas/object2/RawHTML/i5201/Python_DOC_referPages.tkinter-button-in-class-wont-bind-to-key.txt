<div class="post-text" itemprop="text">
<p>Total noob can't make tkinter button bind to keyboard.</p>
<p>I've tried to bind they  both in main() and in the <strong>init</strong>().</p>
<p>I've tried bunches of permutations of syntax. Nothing works.</p>
<p>I've tried  around until the button(s) get focus and hitting  then. NOTHING HAPPENS.</p>
<p>Anyone have the secret insider information on how to do it?</p>
<pre><code>from tkinter import *
from tkinter.ttk import Frame, Button, Style

class Example(Frame):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.btn_convert.bind("&lt;Return&gt;", self.convert)
    # -----------------------------------------------

    def convert(self):
        print("enter pressed")
    # -----------------------------------------------

    def quit(self):
        self.root.destroy()
        exit()
    # -----------------------------------------------

    def initUI(self):

        self.master.title("Weight Converter")
        self.pack(fill=BOTH, expand=True)
        self.frame_btn = Frame(self)
        self.frame_btn.pack(fill=BOTH, expand=True, padx=20, pady=5)
        self.btn_convert=Button(self.frame_btn, text="Convert", command=self.convert)
        self.btn_convert.pack(side=LEFT, padx=5, pady=5)

        self.btn_close1=Button(self.frame_btn, text="Close", command=quit)
        self.btn_close1.pack(side=LEFT, padx=5, pady=5)

def main():

    root = Tk()
    root.geometry("300x250+300+200")
    app = Example()
    root.bind("&lt;Return&gt;", lambda event: root.convert())
    root.mainloop()


if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Replace:</p>
<pre><code>root.bind("&lt;Return&gt;", lambda event: root.convert())
</code></pre>
<p>with:</p>
<pre><code>root.bind("&lt;Return&gt;", lambda event: app.convert())
</code></pre>
<p>or:</p>
<pre><code>#in case you have multiple instances of Tk
app.bind("&lt;Return&gt;", lambda event: app.convert())
app.focus_set()
</code></pre>
<p>As <code>convert</code> is a method for <code>Example</code> instance(<code>app</code>) as opposed to <code>Tk</code> instance(<code>root</code>). Also, make sure that the <code>object.bind</code> is used on(<code>root</code> in above two lines and <code>app</code> onthe last line) <em>has</em> the focus by either manually focusing or calling <code>object.focus_set()</code>.</p>
<hr/>
<p>Below is an example that <code>print</code>s "Enter" or "Escape" based on the keypress:</p>
<pre><code>import tkinter as tk


class App(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.button = tk.Button(self, text="Event")
        self.button.bind('&lt;Return&gt;', lambda evt : self.event_handler(True))
        self.button.focus_set()             # ensure initial focus is on the button
        self.button.pack()


    def event_handler(self, is_enter):
        if is_enter:
            my_string = "Enter"
        else:
            my_string = "Escape"
        print(my_string)


if __name__ == '__main__':
    root = tk.Tk()
    app = App(root)
    app.button.bind('&lt;Escape&gt;', lambda evt : app.event_handler(False))
    app.pack()
    root.mainloop()
</code></pre>
<hr/>
<h1>Demo Example for all keys</h1>
<p>Below demo should be displaying the pressed key for all keys:</p>
<pre><code>try:                        # In order to be able to import tkinter for
    import tkinter as tk    # either in python 2 or in python 3
except ImportError:
    import Tkinter as tk


def on_key_press(event):
    global label
    label['text'] = event.keysym


if __name__ == '__main__':
    root = tk.Tk()
    label = tk.Label(root)
    root.bind('&lt;KeyPress&gt;', on_key_press)
    label.pack()
    root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add a general "press Enter to run <code>convert</code>" binding, you should apply it to <code>root</code>. To add further focus-based bindings, you should apply them on a per-button basis, like so:</p>
<pre><code>from tkinter import *
from tkinter.ttk import Frame, Button, Style

class Example(Frame):
    def __init__(self):
        super().__init__()
        self.initUI()
    # -----------------------------------------------

    def convert(self):
        print("enter pressed")
    # -----------------------------------------------

    def quit(self):
        print("quit pressed")
        self.destroy()
        exit()
    # -----------------------------------------------

    def initUI(self):
        self.master.title("Weight Converter")
        self.pack(fill=BOTH, expand=True)
        self.frame_btn = Frame(self)
        self.frame_btn.pack(fill=BOTH, expand=True, padx=20, pady=5)
        self.btn_convert=Button(self.frame_btn, text="Convert", command=self.convert)
        self.btn_convert.pack(side=LEFT, padx=5, pady=5)

        self.btn_close1=Button(self.frame_btn, text="Close", command=quit)
        self.btn_close1.pack(side=LEFT, padx=5, pady=5)
        # When tab focus is on the "Close" button, change Return behaviour.
        self.btn_close1.bind("&lt;Return&gt;", lambda event: self.quit())

def main():
    root = Tk()
    root.geometry("300x250+300+200")
    app = Example()
    root.bind("&lt;Return&gt;", lambda event: app.convert())
    root.mainloop()


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Twenty years ago I was developing in M$ Visual Studio. I can't fathom that in 20 years, coding has become less sensible; less straightforward; less-well documented; and less-efficient. In a very short time I'm developing a serious HATRED for Python...</span>
<span class="comment-copy">Is sure looks like Python hates you too!</span>
<span class="comment-copy">@ReblochonMasque it's really kicking my ass...</span>
<span class="comment-copy">Same happens when you replace <code>bind</code> with <code>bind_all</code>?</span>
<span class="comment-copy">Do you mean like this?        root.bind_all("&lt;Return&gt;", lambda event: app.convert())</span>
<span class="comment-copy">I changed it in main() and behavior still the same. No response to &lt;Return&gt;, even if I tab focus to the button.  I changed it in the <b>init</b> and it throws NameError: name 'app' is not defined.  Any other ideas?</span>
<span class="comment-copy">Are you using IDLE?</span>
<span class="comment-copy">@JohnBailey not sure what documentation you're missing - Python is fairly well covered by <a href="https://docs.python.org/3/" rel="nofollow noreferrer">the official docs</a> and Tkinter is at least partially covered at <a href="http://effbot.org/tkinterbook/tkinter-index.htm" rel="nofollow noreferrer">effbot</a> in addition to its <a href="https://docs.python.org/3/library/tk.html" rel="nofollow noreferrer">section</a> in the main docs.</span>
<span class="comment-copy">@Nae I think you are asking about an IDE called IDLE? No. I'm using Atom editor and a terminal command line.</span>
<span class="comment-copy">@Nae, it now works, but the path to that is totally bizarre. I'm going to post an answer. Much, MUCH gratitude to everyone for your help. I'm deeply impressed by this community.</span>
<span class="comment-copy">OK. Something is wrong. I cut and pasted that code exactly. It does exactly what my other one does. It loads. If I MOUSE CLICK on the button, the function runs. If I hit &lt;Return&gt; nothing happens, even if I tab the focus to the button. My platform is Ubuntu 16.04 gnome, with python 3.6.3 and tkinter 8.6. I'm running this thing from terminal, not an IDE. I can click onto the frame - anything - and it doesn't work. ONLY a mouse click on the actual button works.</span>
<span class="comment-copy">THANK YOU TO EVERYONE for your attempts to help. I'm starting to think I've found a bug in some combination of Python and tkinter. If @asongtoruin is running the code successfully, I don't know what else to think. Thanks again for the generous help.</span>
<span class="comment-copy">@JohnBailey: you haven't found a bug in tkinter.</span>
<span class="comment-copy">Also, add this right before calling mainloop: <code>root.bind("&lt;Any-KeyPress&gt;", lambda event: print(event.keysym))</code>. Press a few letter keys and it should print out each letter. Press the return key and it should print out <code>Return</code>.</span>
<span class="comment-copy">@BryanOakley, it now works, but the path to that is totally bizarre. I'm going to post an answer. Much, MUCH gratitude to everyone for your help. I'm deeply impressed by this community.</span>
