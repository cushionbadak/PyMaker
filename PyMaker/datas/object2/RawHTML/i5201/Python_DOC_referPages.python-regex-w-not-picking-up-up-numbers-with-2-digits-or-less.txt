<div class="post-text" itemprop="text">
<p>I am trying to use python's regex to recognize 3 tokens from the user which can all be composed of either letters or numbers.</p>
<p>Here is the code I was using:</p>
<pre><code>    match = re.search(r'(\w+)(\w+)(\w+)', inputStr)
    if not match:
        print("Not valid")
    else:
        numWord1 = match.group(0)
        numword2 = match.group(1)
        numWord3 = match.group(2)

    print(num1)
</code></pre>
<p>where inputStr comes from raw_input(). I ran my code, and here's what I get for each input</p>
<pre><code>      I typed: 1 2 3
      I got: Not valid

      I typed: 11 22 33
      I got: Not valid

      I typed: 111 222 333
      I got: 111

      I typed: 1 hello 3
      I got: hello

      I typed: hello 2 3
      I got: hello
</code></pre>
<p>I thought \w matched any letter, digit, or underscore, and by including the + I would get 1 or more instances of it in my group.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\w</code> does not match the spaces between the numbers â€” as you correctly pointed out, <code>\w</code> matches a letter, digit, or underscore, <em>but not a space</em>.  Try:</p>
<pre><code>match = re.search(r'(\w+)\s+(\w+)\s+(\w+)', inputStr)
</code></pre>
<p><code>\s+</code> matches one or more whitespace characters between the groups of digits.</p>
<p><strong>Example</strong> as tested in Python 3:</p>
<pre><code>&gt;&gt;&gt; print(re.search(r'(\w+)\s+(\w+)\s+(\w+)',input('? ')).group(1))
? 1 2 3
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>thought \w matched any letter, digit, or underscore</p>
</blockquote>
<p>Yes but <code>\w</code> does not match spaces eg.</p>
<p><code>1 2 3</code></p>
<p><code>r'(\w+)(\w+)(\w+)'</code></p>
<p>Your pattern is looking for any letter digit or underscore, 3 times or more </p>
</div>
<span class="comment-copy">You have spaces in your strings but it's not in your regex. Your regex, right now, will only match words that consist of 3 or more characters.</span>
<span class="comment-copy">Try <code>(\w+)\s+(\w+)\s+(\w+)</code></span>
<span class="comment-copy">You're all right, thanks! I forgot that the whitespace needed to be matched (guess I was thinking about the scanner in C). Also, match.group(0) returns the whole string I typed in, whereas math.group(1) returns the first grouping. Are the match groupings not zero indexed?</span>
<span class="comment-copy">Anna, no, <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow noreferrer">groups are one-indexed</a>.  This is consistent with the notation for backreferences (<code>\1</code>, <code>\2</code>, ...) in the replacement text of a regex substitution.  See also <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> - <code>\g&lt;0&gt;</code> refers to the whole matched string, just like <code>match.group(0)</code>.</span>
