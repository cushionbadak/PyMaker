<div class="post-text" itemprop="text">
<p>I am trying to create a regex filter that will be used to sanitize domains that are processed by a python script.  </p>
<p>The domains could possibly be just regular domain names</p>
<ul>
<li>something.com, some.something.com</li>
</ul>
<p>or could have a url structure</p>
<ul>
<li><a href="https://some.something.com" rel="nofollow noreferrer">https://some.something.com</a></li>
</ul>
<p>or could have url structure with www</p>
<ul>
<li><a href="https://www.something.com" rel="nofollow noreferrer">https://www.something.com</a></li>
</ul>
<p>I currently have a crude regex to pull out domains out of these structures except I have not figured out a way to filter out the www. out.</p>
<pre><code>(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-@]{,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,11}
</code></pre>
<p>This regex does a decent job grabbing domains out of urls, but when I try to do any kind of negative lookahead to remove the www.,I can't seem to get the desired result.  I've tried (?!www.) which only took away one w not all 3 and the ., any help figuring this out would be most appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless you absolutely have to use regex, it's better to use something designed for this - like the built-in <code>urlparse</code>. For one thing, your regex (and the one linked in the comments) won't match domains with non-ASCII characters.</p>
<pre><code>&gt;&gt;&gt; from urlparse import urlparse # Python 2
&gt;&gt;&gt; # from urllib.parse import urlparse # Python 3

&gt;&gt;&gt; urlparse('http://www.some.domain/the/path')
ParseResult(scheme='http', netloc='www.some.domain', path='/the/path', params='', query='', fragment='')
&gt;&gt;&gt; urlparse('http://www.some.domain/the/path').netloc
'www.some.domain'
</code></pre>
<p>Note that you might want to detect strings without <code>scheme</code> and add it:</p>
<pre><code>&gt;&gt;&gt; url = 'www.other.domain'
&gt;&gt;&gt; urlparse(url)
ParseResult(scheme='', netloc='', path='www.other.domain', params='', query='', fragment='')
&gt;&gt;&gt; if not urlparse(url).scheme:
...     print urlparse('http://' + url)
ParseResult(scheme='http', netloc='www.other.domain', path='', params='', query='', fragment='')
</code></pre>
<p>so you always get the domain in the <code>netloc</code> attribute of the <code>ParseResult</code>.</p>
<p>Once you have the domain separated out, if you want to remove the 'www.', there are any number of simple ways to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>((?:[a-z][a-z0-9-]*[a-z0-9]\.|[a-z]\.)(?&lt;!\bwww\.)
 (?:[a-z][a-z0-9-]*[a-z0-9]\.|[a-z]\.)*
 (?:[a-z][a-z0-9-]*[a-z0-9]|[a-z]))
</code></pre>
<p>And <a href="https://regex101.com/r/TmLhIa/4" rel="nofollow noreferrer">examples</a></p>
<p>Explain:</p>
<ul>
<li><code>[a-z][a-z0-9-]*[a-z0-9]\.|[a-z]\.</code> match a label as described by <a href="https://tools.ietf.org/html/rfc1034#section-3.5" rel="nofollow noreferrer">RFC 1034</a></li>
<li><code>(?&lt;!\bwww\.)</code> assert that the domain does not begin with <code>www.</code>. The part matched by <code>(?:[a-z][a-z0-9-]*[a-z0-9]\.|[a-z]\.)</code> on the first line.</li>
</ul>
<p>To match the simplest URL scheme (no auth part) as well, use <a href="https://regex101.com/r/7bDX6h/3" rel="nofollow noreferrer">this</a>:</p>
<pre><code>https?://
(?:www\.)?
((?:[a-z][a-z0-9-]*[a-z0-9]\.|[a-z]\.)+
 (?:[a-z][a-z0-9-]*[a-z0-9]|[a-z]))
</code></pre>
<p>Note that <a href="https://docs.python.org/3.6/library/re.html?highlight=re%20verbose#re.VERBOSE" rel="nofollow noreferrer"><code>re.VERBOSE</code></a> is used to ignore whitespace in the pattern so it look like more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>urlparse</code>. Below is a sample of using it. I find it easy using <code>urlparse</code> over <code>regex</code>. urlparse gives you a class of parse results, and we can choose to extract the item we want and then do desired logical operations to extract the required host.</p>
<pre><code>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; u1 = "https://example.com"
&gt;&gt;&gt; d1 = urlparse(u1)
&gt;&gt;&gt; d1.hostname
'example.com'

&gt;&gt;&gt; u2 = 'https://www.123.com'
&gt;&gt;&gt; h = urlparse(u2)
&gt;&gt;&gt; host = h.hostname
&gt;&gt;&gt; host[4:]
'123.com'

&gt;&gt;&gt; u3 = 'something.com'
&gt;&gt;&gt; d3 = urlparse(u3)
&gt;&gt;&gt; if bool(d3.netloc):
...     print(d3)
... else:
...     print d3.path
... 
something.com

&gt;&gt;&gt; d4 = 'somenew.net/pathis/123'
&gt;&gt;&gt; u4 = urlparse(d4)
'somenew.net/pathis/123'
&gt;&gt;&gt; u4.path.split('/')[0]
'somenew.net'
</code></pre>
</div>
<span class="comment-copy">Does it have to be regex? Why not use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse" rel="nofollow noreferrer"><code>urlparse</code></a>?</span>
<span class="comment-copy">Is <a href="https://regex101.com/r/NZsPze/1" rel="nofollow noreferrer">this</a> what you're looking for?</span>
<span class="comment-copy">That one pulls out the domains that do not have the www. in them.  I want the domains with the www., but with the www. removed and just the second level domain "something.com" as the match.</span>
<span class="comment-copy">Note that this doesn't correctly handle domains that start with numbers, or that contain underscores or non-ascii characters, all of which are allowed. This is why it's not a good idea to write your own one-off parsing: there are so many subtleties.</span>
<span class="comment-copy">It may not be a good idea to use regex to match URLs. See <a href="https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url" title="what is the best regular expression to check if a string is a valid url">stackoverflow.com/questions/161738/â€¦</a></span>
<span class="comment-copy">Down vote? Please explain the reason. That would help</span>
<span class="comment-copy">I did not downvote your answer, but in general answers with just code are not as well received as answers that explain <i>why</i> the approach you suggest is good. Also, your answer doesn't address the question fully, since it doesn't work for urls without a scheme (eg. <code>http://</code>) at the beginning, which the asker specifically mentions.</span>
<span class="comment-copy">Appreciate your concern and Thanks for the comment. I am now thinking I would have written some theory for choosing urlparse oevr regex. I will address leftover part of the actual question. Again, Thanks a lot.</span>
