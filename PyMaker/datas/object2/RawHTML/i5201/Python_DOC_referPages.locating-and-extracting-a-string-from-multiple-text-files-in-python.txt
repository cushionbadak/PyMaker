<div class="post-text" itemprop="text">
<p>I am just picking up and learning Python, For work i go through a lot of pdfs and so I found a PDFMINER tool that converts a directory to a text file. I then made the below code to tell me whether the pdf file is an approved claim or a denied claim. I dont understand how I can say find me the string that starts with "Tracking Identification Number..." AND is the 18 characters after that and stuff it into an array?</p>
<pre><code>import os
import glob
import csv
def check(filename):
    if 'DELIVERY NOTIFICATION' in open(filename).read():
        isDenied = True
        print ("This claim was Denied")
        print (isDenied)
    elif 'Dear Customer:' in open(filename).read():
        isDenied = False
        print("This claim was Approved")
        print (isDenied)
    else:
        print("I don't know if this is approved or denied")

def iterate():

    path = 'text/'
    for infile in glob.glob(os.path.join(path, '*.txt')):
        print ('current file is:' + infile)
        filename = infile
        check(filename)


iterate()
</code></pre>
<p>Any help would be appreciated. this is what the text file looks like</p>
<pre><code>Shipper Number............................577140Pickup Date....................................06/27/17
Number of Parcels........................1Weight.............................................1 LBS
Shipper Invoice Number..............30057010Tracking Identification Number...1Z000000YW00000000
Merchandise..................................1 S NIKE EQUALS EVERYWHERE T BK B
WE HAVE BEEN UNABLE TO PROVIDE SATISFACTORY PROOF OF DELIVERY FOR THE ABOVE
SHIPMENT.  WE APOLOGIZE FOR THE INCONVENIENCE THIS CAUSES.
NPT8AEQ:000A0000LDI 07
----------------Page (1) Break----------------
</code></pre>
<p>update: Many helpful answers, here is the route I took, and is working quite nicely if I do say so myself. this is gonna save tons of time!! Here is my the entire code for any future viewers.</p>
<pre><code>import os
import glob

arrayDenied = []

def iterate():
    path = 'text/'
    for infile in glob.glob(os.path.join(path, '*.txt')):
        print ('current file is:' + infile)
        check(infile)

def check(filename):
    with open(filename, 'rt') as file_contents:
        myText = file_contents.read()
        if 'DELIVERY NOTIFICATION' in myText:
            start = myText.index("Tracking Identification Number...") + len("Tracking Identification Number...")
            myNumber = myText[start : start+18]
            print("Denied: " + myNumber)
            arrayDenied.append(myNumber)
        elif 'Dear Customer:' in open(filename).read():
print("This claim was Approved")

startTrackingNum = myText.index("Tracking Identification Number...") + len("Tracking Identification Number...")
myNumber = myText[startTrackingNum : startTrackingNum+18]

startClaimNumberIndex = myText.index("Claim Number ") + len("Claim Number ")
myClaimNumber = myText[startClaimNumberIndex : startClaimNumberIndex+11]

arrayApproved.append(myNumber + " - " + myClaimNumber)
        else:
            print("I don't know if this is approved or denied")   
iterate()
with open('Approved.csv', "w") as output:
    writer = csv.writer(output, lineterminator='\n')
    for val in arrayApproved:
        writer.writerow([val])
with open('Denied.csv', "w") as output:
    writer = csv.writer(output, lineterminator='\n')
    for val in arrayDenied:
        writer.writerow([val])
print(arrayDenied) 
print(arrayApproved)
</code></pre>
<p>Update: Added the rest of my finished code, Writes the lists to a CSV file where i go execute  some =left()'s and such and boom I have 1000 tracking numbers in a matter of minutes. This is why programming is great.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your goal is just to find the "Tracking Identification Number..." string and the subsequent 18 characters; you can just find the index of that string, then reach where it ends, and slice from that point until the end of the subsequent 18 characters.</p>
<pre><code># Read the text file into memory:
with open(filename, 'rt') as txt_file:
    myText = txt_file.read()
    if 'DELIVERY NOTIFICATION' in myText:
        # Find the desired string and get the subsequent 18 characters:
        start = myText.index("Tracking Identification Number...") + len("Tracking Identification Number...")
        myNumber = myText[start : start+18]
        arrayDenied.append(myNumber)
</code></pre>
<p>You can also modify the append line into <code>arrayDenied.append(myText + ' ' + myNumber)</code> or things like that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are the way to go for your task. Here is a way to modify your code to search for the pattern. </p>
<pre><code>import re
pattern = r"(?&lt;=Tracking Identification Number)(?:(\.+))[A-Z-a-z0-9]{18}"

def check(filename):
    file_contents = open(filename, 'r').read()
    if 'DELIVERY NOTIFICATION' in file_contents:
        isDenied = True
        print ("This claim was Denied")
        print (isDenied)
        matches = re.finditer(pattern, test_str)
        for match in matches:
            print("Tracking Number = %s" % match.group().strip("."))
    elif 'Dear Customer:' in file_contents:
        isDenied = False
        print("This claim was Approved")
        print (isDenied)
    else:
        print("I don't know if this is approved or denied")
</code></pre>
<p><strong>Explanation</strong>:</p>
<p><code>r"(?&lt;=Tracking Identification Number)(?:(\.+))[A-Z-a-z0-9]{18}"</code></p>
<ul>
<li><code>(?&lt;=Tracking Identification Number)</code> Looks behind the capturing group to find the string "Tracking Identification Number"</li>
<li><code>(?:(\.+))</code> matches one or more dots (<code>.</code>) (we strip these out after)</li>
<li><code>[A-Z-a-z0-9]{18}</code> matches 18 instances of (capital or lowercase) letters or numbers </li>
</ul>
<p>More on <a href="https://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean/22944075">Regex</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this solves your issue, just turn it into a function. </p>
<pre><code>import re

string = 'Tracking Identification Number...1Z000000YW00000000'

no_dots = re.sub('\.', '', string) #Removes all dots from the string

matchObj = re.search('^Tracking Identification Number(.*)', no_dots) #Matches anything after the "Tracking Identification Number"

try:
   print (matchObj.group(1))
except:
    print("No match!")
</code></pre>
<p>If you want to read the documentation it is here: <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html#re.search</a></p>
</div>
<span class="comment-copy">Are the dots really in the file? Is the tracking number always 18 characters starting with 1Z?</span>
<span class="comment-copy">Yes, I have 1000's of pdfs to go through and typically I copy and paste them into an excel sheet so I am trying to automate this painful process.  The approval pdfs are a little different but yes essentially they are all structured the same,</span>
<span class="comment-copy"><a href="https://www.computerhope.com/issues/ch001721.htm" rel="nofollow noreferrer">computerhope.com/issues/ch001721.htm</a></span>
<span class="comment-copy">It does, the syntax is off. Please see my answer and let me know if this solves the issue.</span>
<span class="comment-copy">@Bluestreak22 also you should in general avoid manually opening files such as <code>open(filename).read()</code>. You can open the file once with <code>with open()</code>, and do your <code>if</code> check and all the rest of the operations in it. I cover that in the answer.</span>
<span class="comment-copy">I just took a swing at this. I am getting an traceback error staying that Tracking Identification Number... is not in the list. which I would assum is because its not reading the text file right or maybe because there is a string bunched up against that without a space in the original text file?</span>
<span class="comment-copy">Actually all I did was remove .splitlines() and boom it worked :)</span>
<span class="comment-copy">@Bluestreak22 Oh awesome, that is right! Glad it worked! :) Edited the answer accordingly.</span>
<span class="comment-copy">Could you maybe explain what the index of the string is? To me an index would be a value in an array but to my knowledge a string or text file is not an array?</span>
<span class="comment-copy">index is the starting location of a substring in a string. Say your string is <code>myText = "helloabc1234hello"</code>, then <code>start=myText.index("abc")</code> gives you 5 because it starts at 5th index of <code>myText</code>. Then you add length of <code>abc</code> to reach where it ends. That index is where <code>1234</code> starts, which you are interested in, hence you do <code>myText[start : start+4]</code> to get those 4 characters.</span>
<span class="comment-copy">I am not gonna lie whenever I see something like this "(?:(\.+))[A-Z-a-z0-9]{18" I get the heeby jeebies and think like holy crap lol I will try this out though along with other answers just to know two ways of doing something.</span>
<span class="comment-copy">@Bluestreak22 I am by no means an expert in regex, but I find this site  <a href="http://www.regex101.com" rel="nofollow noreferrer">regex101.com</a> to be extremely useful in testing patterns. Paste your text in there, select your programming language, and try to make your own pattern.</span>
<span class="comment-copy">What if there were extra stuff after the tracking number as in <code>s = 'Tracking Identification Number...1Z000000YW00000000...Extra Stuff'</code></span>
<span class="comment-copy">@pault The file he showed has a line break at the end of that number, so it should stop there.</span>
