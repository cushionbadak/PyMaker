<div class="post-text" itemprop="text">
<p>I'm currently working through a format string exploit (<a href="https://0x00sec.org/t/picoctf-write-up-bypassing-aslr-via-format-string-bug/1920" rel="nofollow noreferrer">writeUp config console picoctf</a>) and came across that weird syntax (as part of the python script used for the pwn):</p>
<pre><code>payload += ("%%%du|%%17$hn|" % 2493).rjust(16)
</code></pre>
<p>I know that the author intends to achieve to override a memory address with the above value (2493). I can achieve the same goal using the following syntax:</p>
<pre><code>payload += "%2493x%17$hn".rjust(16)
</code></pre>
<p>So I do know about what the $ and hn means in the second part.</p>
<p>I'm mainly confused by the multiple '%' in the first version above and that the ' % 2493' appears outside the hyphens.
I tried to google that but it will only lead to the standard format string explanations.</p>
<p>Someone can explain the first version above or perhaps has a link where the same is explained.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>%</code> you see outside of the quotation marks is an operator (the same operator that takes a modulus for numbers). When its left argument is a string, it does "old style" string formatting. This was the main kind of string formatting until Python 2.6 introduced <code>str.format</code>, so you'll see it a lot in older code. The formatting language used by the <code>%</code> operator is very closely inspired by C's <code>printf</code>, so some programmers who are more used to C may also prefer it over the newer and perhaps more "Pythonic" formatting methods.</p>
<p>In your example, the most relevant part of the format string is <code>%d</code>, which formats an argument as an integer. <code>%</code> is the character used to introduce substitutions in a format string, which is why you have another funny feature in the format string in two other places. If you want a single percent sign in the output, you need to put two in the format string: <code>%%</code>. You have that twice, once just before the <code>%d</code> and once later.</p>
<p>The string you get at the end, <code>"%2493x%17$hn"</code> doesn't mean anything special to Python, but it might in some other language or in some special context. It would not work as a format string again, since <code>%17$</code> is not a valid format specifier (<code>%2493x</code> is valid, though probably only by coincidence).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>$</code> and <code>hm</code> means nothing special, they are just characters within you string. Simply run the string formatting code and you'll see:</p>
<pre><code>&gt;&gt;&gt; "%%%du|%%17$hn|" % 2493
'%2493u|%17$hn|'
</code></pre>
<p>In the above string <code>%d</code> is getting replaced by your number <code>2493</code> and <code>%%</code> is used to display <code>%</code> in your string as single <code>%</code> carries a special meaning in <em>%-string formatting</em>. Rest are normal string character.</p>
<p><em>%-formatting</em> (also known as <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><em>printf-style</em> string formatting</a>) is a old style of Python's string formatting which is these days is generally done by using <a href="https://docs.python.org/3.4/library/string.html#format-examples" rel="nofollow noreferrer"><code>str.format</code></a> function. <a href="http://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101</a> proposed the replacement of the <code>%</code> operator with the new, advanced string formatting.</p>
<p>A very nice comparison between both is available at: <a href="https://stackoverflow.com/questions/5082452/python-string-formatting-vs-format"><em>"Python string formatting: % vs. .format"</em></a></p>
<hr/>
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">"printf-style String Formatting" document</a>, it allows following <strong><em>conversion types</em></strong>:</p>
<pre><code>Conversion   Meaning
'd'          Signed integer decimal.     
'i'          Signed integer decimal.     
'o'          Signed octal value.
'u'          Obsolete type – it is identical to 'd'.    
'x'          Signed hexadecimal (lowercase).    
'X'          Signed hexadecimal (uppercase).    
'e'          Floating point exponential format (lowercase).
'E'          Floating point exponential format (uppercase).
'f'          Floating point decimal format.
'F'          Floating point decimal format. 
'g'          Floating point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.
'G'          Floating point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise.
'c'          Single character (accepts integer or single character string).  
'r'          String (converts any Python object using repr()).  
's'          String (converts any Python object using str()).   
'a'          String (converts any Python object using ascii()). 
'%'          No argument is converted, results in a '%' character in the result.
</code></pre>
<p>and has <strong><em>conversion flags</em></strong> characters as:</p>
<pre><code>+------+--------------------------------------------------------------------------------------------------------------+
| Flag | Meaning                                                                                                      |
+------+--------------------------------------------------------------------------------------------------------------+
| '#'  | The value conversion will use the “alternate form” (where defined below).                                    |
+------+--------------------------------------------------------------------------------------------------------------+
| '0'  | The conversion will be zero padded for numeric values.                                                       |
+------+--------------------------------------------------------------------------------------------------------------+
| '-'  | The converted value is left adjusted (overrides the '0' conversion if both are given).                       |
+------+--------------------------------------------------------------------------------------------------------------+
| ' '  | (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion. |
+------+--------------------------------------------------------------------------------------------------------------+
| '+'  | A sign character ('+' or '-') will precede the conversion (overrides a “space” flag).                        |
+------+--------------------------------------------------------------------------------------------------------------+
</code></pre>
</div>
<span class="comment-copy">Probably the author of the code (I'm not going to read this long article) wants to use <code>payload</code> later like this: <code>real_payload = payload % (val1, val2, val3,...)</code>. I'm not sure about that because <code>%17$hn</code> would lead to a <code>unsupported format character '$' (0x24)...</code> exception. Anyway from the snippet you've posted, they are meaningless.</span>
<span class="comment-copy">hi all, i just realised that it might actually be a python formatting thing i wasnt aware of as I typically use python3 and the .format() syntax instead of the old python2 % syntax. So "%d" % 5 will replace %d with with the value 5 and %% will place a single %. Mystery solved. Thanks for your support people.</span>
