<div class="post-text" itemprop="text">
<p>I am trying to make a script that takes all errors and logs them to a log file.  I want to include any <code>argparse</code> errors to this file.  I already use the <code>logging</code> package and a <code>sys.excepthook</code> to drive unexpected exceptions to the log file.  </p>
<p>Here's an example code:</p>
<pre><code>import argparse
import logging
import sys
import traceback

def log_uncaught_exceptions(ex_cls, ex, tb):
    logging.critical(''.join(traceback.format_tb(tb)))
    logging.critical('{0}: {1}'.format(ex_cls, ex))

logging.basicConfig(
    level=logging.DEBUG,
    filename='foo.log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s')

sys.excepthook = log_uncaught_exceptions

logging.debug('This is a typical debug line')

parser = argparse.ArgumentParser(description='Foo String')
parser.add_argument('foo',type=int)
args = parser.parse_args()
logging.debug('Input was %i'%(args.foo))
</code></pre>
<p>When I run it with <code>python logger_argparse.py 1</code> everything works great.  If I run <code>python logger_argparse.py a</code> I get the output in the console and not the log file:</p>
<pre><code>usage: logger_argparse.py [-h] foo
logger_argparse.py: error: argument foo: invalid int value: 'a'
</code></pre>
<p>How do I get that information to go to the log file?</p>
</div>
<div class="post-text" itemprop="text">
<p>I found a workaround that I don't believe is very good.  But it seems to be working:</p>
<pre><code>import argparse
import logging
import sys
import traceback

class argparse_logger(argparse.ArgumentParser):
    def _print_message(self, message, file=None):
        if file is sys.stderr:
            logger.error('Arg Parse did something bad...see below:')
            logger.error(message)
        else:
            super()._print_message(message,file=file)

def log_uncaught_exceptions(ex_cls, ex, tb):
    logging.critical(''.join(traceback.format_tb(tb)))
    logging.critical('{0}: {1}'.format(ex_cls, ex))

logging.basicConfig(
    level=logging.DEBUG,
    filename='foo.log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s')

# logging.getLogger('root')
logger = logging.getLogger('root')

sys.excepthook = log_uncaught_exceptions

logger.debug('This is a typical debug line')

parser = argparse_logger(description='Foo String')
parser.add_argument('foo',type=int)
args = parser.parse_args()
logger.debug('Input was %i'%(args.foo))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can you use <a href="https://docs.python.org/3/library/logging.html#logging.Logger.exception" rel="nofollow noreferrer">logging.exception</a> in an exception handler? 
Edit: so how about just logging from <code>ArgumentParser.error()</code>?</p>
<pre><code>import sys
import logging
import argparse

class argparse_logger(argparse.ArgumentParser):
    def error(self, message):
        logging.error(message)
        super().error(message)

logging.basicConfig(
    level=logging.DEBUG,
    filename='foo.log',
    filemode='w',
    format='%(asctime)s - %(levelname)s - %(message)s')

# parser = argparse.ArgumentParser(description="Foo")
parser = argparse_logger(description="Foo")
parser.add_argument('foo',type=int)
logging.debug("Start")

try:
    args = parser.parse_args(sys.argv[1:])
except:
    print("Error handling arguments")
    raise
logging.debug(f"Finish - {args.foo}")
print(f"Exiting! - {args.foo}")
</code></pre>
<p>This will show the following:</p>
<pre><code>J:\&gt;python arg_parse_log.py 5
Exiting! - 5

J:\&gt;more foo.log
2018-02-07 11:34:45,647 - DEBUG - Start
2018-02-07 11:34:45,648 - DEBUG - Finish - 5

J:\&gt;python arg_parse_log.py
usage: arg_parse_log.py [-h] foo
arg_parse_log.py: error: the following arguments are required: foo
Error handling arguments

J:\&gt;more foo.log
2018-02-07 11:34:54,577 - DEBUG - Start
2018-02-07 11:34:54,578 - ERROR - the following arguments are required: foo
</code></pre>
</div>
<span class="comment-copy">It doesn't work because <code>logger_argparse.py: error: argument foo: invalid int value: 'a'</code> is not a raised exception, it is just a printout from <code>argparse</code>.</span>
<span class="comment-copy">Is there a good way to interupt that print to get it to go to the file?</span>
<span class="comment-copy">In the <code>argparse.py</code> file, look at methods like <code>error</code> and <code>exit</code> (they are mentioned in the docs as well).  Most parsing errors raise <code>ArgumentError</code>, which is then captured by these, a message is printed to <code>stderr</code>, and then it calls <code>sys.exit</code>.</span>
<span class="comment-copy">As search on [argparse] [logging] turned up this: <a href="https://stackoverflow.com/questions/29935283/how-to-set-custom-output-handlers-for-argparse-in-python" title="how to set custom output handlers for argparse in python">stackoverflow.com/questions/29935283/â€¦</a></span>
<span class="comment-copy">I would have modified <code>parser.error</code>.  But since everything that it writes goes through <code>_print_message</code> your approach is just as good.</span>
<span class="comment-copy">Yes...but I wanted to capture the argparse printed errors to have a log of what was entered or missed.  The error just states that something went wrong...where the console output tells me what went wrong.</span>
<span class="comment-copy">Thanks for the clarification, I've updated the code.</span>
