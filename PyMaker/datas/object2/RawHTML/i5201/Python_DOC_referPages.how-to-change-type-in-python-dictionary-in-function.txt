<div class="post-text" itemprop="text">
<p>I have a really large group of pandas dataframe.
and transfer own column from json format string to dictionary.</p>
<pre><code>import pandas as pd
import pymysql
db = pymysql.connect(XXXX)
df = pd.read_sql(balabal).to_dict(orient='records')
</code></pre>
<p>After we get dictionary, we need transfer one entity says df[0]['paragraphs'] from string to dictionary. Here is the code. i['t'] is key and i['p'] is value.</p>
<pre><code>import json
def str2dict(input_str):
    j = json.loads(input)
    ret = {}
    for i in j:
        ret[i['t']] = i['p']
    return ret
</code></pre>
<p>And I call this function by:</p>
<pre><code>for i in df:
    i['paragraphs'] = preprocess.str2dict(i['paragraphs'])
</code></pre>
<p>It works fine. 
but at this part <code>i['paragraphs'] = preprocess.str2dict(i['paragraphs'])</code> it did unnecessary copy.
I want my str2dict function be like this:</p>
<pre><code>def str2dict(input_str):
    j = json.loads(inputs)
    clear memory where input_str pointed. and let it be a new dictionary
    for i in j:
        input_str[i['t']] = i['p']
</code></pre>
<p>so that we can reduce the copy assignment.</p>
<p>And I'm confused that
in Python everything is object, so the variable are like shared_pointer in C++.
But where does there object be implement(initialized). 
Does all objects' pointee store in heap, and in stack of function all variable are pointer.  </p>
<p>when we do this</p>
<pre><code>a = 1
a = {'a':1}
a = 2
</code></pre>
<p>Python will new a dictionary and let a point to it. 
and when a = 2, program will delete dictionary on heap and point to 2.</p>
<p>but how about in function?</p>
<pre><code>def test(a):
    a = {}
    return
s = 1
test(s)
</code></pre>
<p>s is still 1. I think <code>a = {}</code> create a dict and create a local variable a to point it, this a have no relation to parameter a. So how can I use parameter a to let output s = {}.</p>
<p>And in the end, where can I learn how Python implement (where the variable store, what happens when it type changed)and memory staff? I think I should learn something about Cpython. Do you guys have any suggestion about what books or videos should I read? 
thx :)  </p>
</div>
<div class="post-text" itemprop="text">
<p>CPython works very differently from C++. Everything is on the heap. Memory is managed automatically by reference counting (cycles are dealt with a garbage collector). Variables are not typed. Python does not support pass by reference semantics. <code>i['paragraphs'] = preprocess.str2dict(i['paragraphs'])</code> does <em>not</em> make a copy. If no other reference to the string referenced by <code>i['paragraphs']</code> exists, that string's reference count will go to zero once <code>str2dict</code> terminates, and the memory will be reclaimed.</p>
<p>This function:</p>
<pre><code>def test(a):
    a = {}
    return
</code></pre>
<p>creates a <code>dict</code> object, it gets assigned to the <em>local name</em> <code>a</code>. Once the function returns, no other references to that <code>dict</code> exist, and the <code>dict</code> object is deallocated. This is handled by the Python runtime, and generally, you do not worry about these things. </p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want to free RAM while runnig your program?
I am not sure that you can do that,at least not in a way similar to C++.
With CPython you have <a href="https://docs.python.org/3/library/gc.html" rel="nofollow noreferrer">gc</a></p>
<p>It says</p>
<pre><code>This module provides an interface to the optional garbage collector. It provides the ability to disable the collector, tune the collection frequency, and set debugging options
</code></pre>
<p>Anyway,gc could reclaim memory but it doesn't necessarily return it to the OS.</p>
</div>
<span class="comment-copy">thank you so much! Now I know it.</span>
<span class="comment-copy">The garbage collector only handles reference cycles. If object reference counts go to zero, they are reclaimed, regardless of whether you enable or disable <code>gc</code></span>
<span class="comment-copy">I want to free a element in dict and reassign it into a new type.</span>
