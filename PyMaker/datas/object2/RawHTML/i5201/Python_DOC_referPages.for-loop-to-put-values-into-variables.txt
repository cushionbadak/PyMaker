<div class="post-text" itemprop="text">
<p>How can I use a for loop to get values that I've already got into variables?</p>
<p>I currently have this code, that works the way I want it to:</p>
<pre><code>var1 = 25
var2 = 22
var3 = 1
var4 = 23
my_list = [7, 8, 11, 11]
for n, val in enumerate(my_list):
    globals()["value%d"%n] = val
</code></pre>
<p>But I also need to be able to get these values from the variables this makes into another for loop to be able to do calculations with them, but I'm not sure how to do that.</p>
<p>I want it to loop through each value in the list and do either of two things, alternating, so I'm using this:</p>
<pre><code>for n, val in enumerate(my_list):
    if n % 2 == 0:
        answer1 = ((25*7)+(22*8)%26)
    else:
        answer2 = ((1*11)+(23*11)%26)
</code></pre>
<p>So when I print answer1 and answer2, they come out as 13 and 9 respectively.</p>
<p>That's what I want it to output, but I want it to do it for each value in my_list, even if my_list has more than 4 items in it, I need it to loop through every item in it and store the answers separately.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>  values = {} # this is a dictionary
  for n, val in enumerate(list):
        values[n] = val



 for n, val in enumerate(list):
    value = values[n]
    if n % 2 == 0:
         # do something with value
         #do A
    else:
         # do something with value
         #do B
</code></pre>
<p>the values saved within the dictionary named "values" are accessed like this:</p>
<pre><code>num = values["key"]
</code></pre>
<p>where the key is the string you associate with the value</p>
<p>to initialize the dictionary you can do something like what was done in the above for loop (the first one)
or something like this</p>
<pre><code>values["some_key"] = some_value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, rather than trying to assign lots of different variables, it is always better to think of your problem in terms of processing a list of values and producing a list of answers.</p>
<p>For your problem, you appear to want to process <code>4</code> values in <code>my_list</code>, two at a time. There is a trick to do this based on the <a href="https://docs.python.org/3.6/library/itertools.html?highlight=pairwise#itertools-recipes" rel="nofollow noreferrer"><code>grouper()</code></a> recipe in the Python documentation:</p>
<pre><code>var1 = 25
var2 = 22
var3 = 1
var4 = 23

my_list = [7, 8, 11, 11]
output = []

for index, (v1, v2) in enumerate(zip(*[iter(my_list)] * 2)):
    if index % 2 == 0:
        output.append(((var1 * v1) + (var2 * v2) % 26))
    else:
        output.append(((var3 * v1) + (var4 * v2) % 26))   

print(output)   
</code></pre>
<p>This would create an <code>output</code> list containing two answers:</p>
<pre><code>[195, 30]
</code></pre>
<p>So for example, the first time around the loop, <code>v1</code> is <code>7</code> and <code>v2</code> is 8.</p>
<hr/>
<p>An alternative way to get two values at a time would be as follows:</p>
<pre><code>var1 = 25
var2 = 22
var3 = 1
var4 = 23

my_list = [7, 8, 11, 11]
i_my_list = iter(my_list)
output = []

for index, v1 in enumerate(i_my_list):
    v2 = next(i_my_list)

    if index % 2 == 0:
        output.append(((var1 * v1) + (var2 * v2) % 26))
    else:
        output.append(((var3 * v1) + (var4 * v2) % 26))   

print(output)        
</code></pre>
</div>
<span class="comment-copy">Just don't. Use a <code>dict</code></span>
<span class="comment-copy">You should explain it better how you expect that expression to scale. Showing a loop which practically does not use the loop variables is a bit hard to interpret. The <code>dict</code> thing itself is here: <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#typesmapping</a> - you are using it actually (as <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#globals</a> says, it is a dictionary), just it is far nicer to have your own one.</span>
<span class="comment-copy">Do not use <code>list</code> as a variable name, by doing so you overwrite the Python <code>list()</code> function. Please edit the question to show an example of the contents of your <code>list</code> and what output you are trying to achieve.</span>
<span class="comment-copy">@MartinEvans   I have edited the question with examples of the contents of the list and the desired output</span>
<span class="comment-copy">@JoshuaPeacham Okay, I simply assumed. It's kind of crazy that you found <code>globals()["value%d"%n] = val</code> without learning dicts first. (<code>globals()</code> actually returns a dictionary!)</span>
