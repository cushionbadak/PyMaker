<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10573485/slicing-a-list-using-a-variable-in-python">Slicing a list using a variable, in Python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I want to create a list containing indices that would be used to get elements from another list.</p>
<p>A simple case:</p>
<pre><code>A = [5,6,7,8,9,10]    
b = 2:4  
</code></pre>
<p>I want to then do something like</p>
<pre><code>C = A[b]
</code></pre>
<p>Which would be like saying C = A[2:4]</p>
<p>I want to later extend this to multidimensional arrays, where e.g b = [2:4, 5:6] and I can simply call A[b] to extract a multidimensional array out of A.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define <code>b</code> as a <a href="https://docs.python.org/3/library/functions.html#slice" rel="noreferrer"><code>slice</code></a> object to achieve this:</p>
<pre><code>In[9]:
A = [5,6,7,8,9,10]    
b = slice(2,4)
A[b]

Out[9]: [7, 8]
</code></pre>
<p>Regarding your other requirement I think if you create a list object containing 2 <code>slice</code> objects then it should achieve what you want:</p>
<pre><code>In[18]:
import numpy as np
a = np.arange(100).reshape(10,10)
b = [slice(1,3), slice(3,4)]
a[b]

Out[18]: 
array([[13],
       [23]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can either use straight python using e.g. slice:</p>
<pre><code>&gt;&gt;&gt; A = [5,6,7,8,9,10]    
&gt;&gt;&gt; b = slice(2,4)
&gt;&gt;&gt; A[b]
[7, 8]
</code></pre>
<p>But this does not scale very well to nd-arrays. To do this, I'd recommend using numpy's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.s_.html#numpy.s_" rel="noreferrer"><code>np.s_</code></a> function which does exactly what you are looking for, without the need of explicitly constructing a <code>slice</code> for each axis.</p>
<pre><code>&gt;&gt;&gt; b = np.s_[2:4]
&gt;&gt;&gt; A[b]
[7, 8]
</code></pre>
<p>This extends nicely to e.g. 2d arrays:</p>
<pre><code>&gt;&gt;&gt; A = np.ones(10, 10)
&gt;&gt;&gt; b = np.s_[2:4, 5:6]
&gt;&gt;&gt; A[b]
array([[ 1.],
       [ 1.]])
</code></pre>
</div>
<span class="comment-copy">The second case would be a bit closer to <code>A[1:3, 3:4]</code> if <code>b</code> is a tuple instead of a list. There may be types that react different when indexed with a list.</span>
<span class="comment-copy">@BlackJack indexing with a list using a list of <code>slices</code>s won't work in this case but the OP didn't present an example so I assumed a np array</span>
