<div class="post-text" itemprop="text">
<p>I'm new to Django and have been playing with logging.  It seems to me that the following <code>info()</code> statements are essentially equivalent:</p>
<pre><code>log = logging.getLogger(__name__)
.
.
.
    log.info("This is a %s" % "test")  # Python style
    log.info("This is a %s", "test")   # C style
</code></pre>
<p>Is there any difference?  Personally, I've always loved being able to use the Python-style formatting anywhere and I'm inclined to stick with that method.  There's a lot more to Python formatting so it seems much more powerful.  Why does Django give us the choice?  Is there any advantage to using C-style?</p>
</div>
<div class="post-text" itemprop="text">
<p>The multi-argument style delays the moment of formatting. This gives other parts of the logging module a chance to operate on those arguments  before it is ultimately formatted or even just choose to ignore the call.</p>
<p>As Charles Duffy <a href="https://stackoverflow.com/questions/48671699/c-style-vs-python-style-string-formatting-for-the-python-logger/48672755?noredirect=1#comment84344113_48672755">points out</a>, the very first step in the <a href="https://docs.python.org/3.6/howto/logging.html#logging-flow" rel="nofollow noreferrer">logging flow diagram</a> is to check if the logger is enabled for the level of the call. If the logging level is not enabled, no LogRecord is even created. So delayed formatting saves your program compute cycles in these situations.</p>
<hr/>
<p>Another possible use for this delay is that <a href="https://docs.python.org/3.6/howto/logging-cookbook.html#using-filters-to-impart-contextual-information" rel="nofollow noreferrer"><code>logging.Filter</code>s</a> can process the arguments before they get formatted:</p>
<pre><code>import logging

class ContextFilter(logging.Filter):
    def filter(self, record):
        for key in record.args:
            record.args[key] = ' '.join(record.args[key].upper())
        return True

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
filt = ContextFilter()
logger.addFilter(filt)

logger.info("'Twas %(adj)s, and the slithy %(noun)s", {'adj': 'brillig', 'noun': 'toves'})
</code></pre>
<p>logs</p>
<pre><code>INFO:__main__:'Twas B R I L L I G, and the slithy T O V E S
</code></pre>
<p>Notice that the arguments <code>brillig</code> and <code>toves</code> got capitalized and spaced by the <code>ContextFilter</code>. If <code>logger.info</code> merely accepted pre-formatted strings, you wouldn't be able to do that (without forcing the user to do the work of <code>ContextFilter</code> <em>before</em> calling <code>logger.info</code>).</p>
<hr/>
<p>Filters can also used to (surprise!) filter out records before they get emitted (by returning <code>False</code> instead of <code>True</code>). Delayed formatting allows <code>Filter</code>s to examine and possibly filter out records based on the argument values. So string formatting may be avoided entirely when not needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not really about string formatting, but about passing arguments to a method.</p>
<p>The method <code>logging.info</code>, as its related methods <code>logging.debug</code>, <code>logging.warning</code>, <code>logging.error</code>, etc., takes the following arguments:</p>
<pre><code>logging.info(msg, *args, **kwargs)
</code></pre>
<p>That means <code>msg</code> is a required positional argument. In your first example you pass only one single argument:</p>
<pre><code>"This is a %s" % "test" # msg
</code></pre>
<p>In your other example you're passing two arguments:</p>
<pre><code>"This is a %s" # msg
"test" # *args
</code></pre>
<p>In the first example you're manually doing the work that the method could do for you.</p>
</div>
<span class="comment-copy">This has nothing to do with Django; <code>logging</code>is a Python standard library module.</span>
<span class="comment-copy">You may want to google &amp; read about f-strings and the string formatting mini language.</span>
<span class="comment-copy">Or just read the python docs for <a href="https://docs.python.org/3/library/logging.html#logging.Logger.debug" rel="nofollow noreferrer">Logger.debug</a>.</span>
<span class="comment-copy">Note, the <code>%</code> style formatting in Python is old. You should prefer <code>.format</code> or, in Python &gt;= 3.6, f-strings.</span>
<span class="comment-copy">Also, ironically, <code>%</code> - style formatting is the closes to C-style formatting of the available options in Python.</span>
<span class="comment-copy">It's not just letting the logging module do other operations -- it's about letting the logging module <b>not do the work at all</b> of string-formatting something if the log level doesn't call for the content to ever be used. Expanding format strings can be expensive; no point to doing it for a DEBUG-level log message if the log level is currently WARNING.</span>
<span class="comment-copy">The last two examples won't work with new-style string formatting. See <a href="https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles" rel="nofollow noreferrer">this section</a> in the logging docs for why this is. Also, you can't simply pass arbitrary keyword arguments like that. I suggest you experiment a bit in an interactive session, because these logging apis are not a simple as they sometimes look. (PS: use <code>logging.warning</code>, because <code>logging.info</code> is a no-op by default).</span>
<span class="comment-copy">@ekhumoro Thanks for the comment. You're right! Indeed I wrote nonsense  with the last two examples. However I used <code>info</code> only to reflect the example from the question.</span>
