<div class="post-text" itemprop="text">
<p>I want to call a command like</p>
<pre><code>scp username@hostname:/dir/to/files/\{a,b,c\} /target/dir
</code></pre>
<p>from Python to copy many files in one command.
The command works perfectly if entered directly into the shell.</p>
<p>But if I use</p>
<pre><code>import subprocess
p = subprocess.Popen(['scp', 'username@hostname:/dir/to/files/\{a,b,c\}',
                      '/target/dir'])
sts = os.waitpid(p.pid, 0)
</code></pre>
<p>I get the error</p>
<pre><code>scp: /dir/to/files/{a,b,c}: No such file or directory
</code></pre>
<p>Obviously, the backslashes are missing. And if I use double backslashes in the Popen arguments like</p>
<pre><code>\\{a,b,c,d\\}
</code></pre>
<p>I get the error</p>
<pre><code>scp: /dir/to/target/\a: No such file or directory
scp: /dir/to/target/\b: No such file or directory
scp: /dir/to/target/\c\: No such file or directory
</code></pre>
<p>Nothing changes if I use raw strings like <code>r'\{' + r'\}'</code></p>
<p>How can I call the scp command from Python with the correctly escaped curly braces <code>'\\{a,b,c\\}'</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>cannot test, but I would remove all blackslashes altogether since they're just here to protect the expansion from the shell on the local machine:</p>
<pre><code>import subprocess
p = subprocess.Popen(['scp', 'username@hostname:/dir/to/files/{a,b,c}',
                      '/target/dir'])
sts = p.wait()
</code></pre>
<p>also note that <code>p.wait()</code> is way better than the wait command you performed (more portable!)</p>
</div>
<div class="post-text" itemprop="text">
<p>If I'm getting it correctly, you need to have the "\" and the "{". Since you need to escape both of them, what about <code>'username@hostname:/dir/to/files/\\\{a,b,c\\\}'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use a shell feature unnecessarily in a script; you have your text editor to make typing easier. Just pass the three file names individually:</p>
<pre><code>p = subprocess.Popen(['scp',
                      'username@hostname:/dir/to/files/a',
                      'username@hostname:/dir/to/files/b',
                      'username@hostname:/dir/to/files/c',
                      '/target/dir'])
</code></pre>
<p>Alternatively, let <em>Python</em> build the list of files for you.</p>
<pre><code>file_list = ['username@hostname:/dir/to/files/%s' % (s,)
             for f in ['a', 'b', 'c']]
p = subprocess.Popen(['scp'] + file_list + ['/target/dir'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Jean-Francois Fabre got me on the right track:</p>
<pre><code>import subprocess
p = subprocess.Popen('scp username@hostname:/dir/to/files/\{a,b,c\} /target/dir',
shell=True)
sts = p.wait()
</code></pre>
<p>The</p>
<pre><code>shell=True
</code></pre>
<p>argument was the missing bit. It is a solution that is not <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">recommended</a>, but at least it's working.</p>
</div>
<span class="comment-copy">note that you can change <code>sts = os.waitpid(p.pid, 0)</code> =&gt; <code>sts = p.wait()</code></span>
<span class="comment-copy">also try with <code>shell=True</code>. It's ugly, but it emulates the shell better.</span>
<span class="comment-copy">This would be very cumbersome, as I would have to enter a password for each file and in general the number of files is greater than 3.</span>
<span class="comment-copy">Then just use Jean-Francois Fabre's answer, as <i>locally</i> there is nothing special about the braces. Or even better, set up public-key authentication so that you don't need to type a password any of the files.</span>
<span class="comment-copy">Braces are intended to shorten interactive use. You are typing this into a text editor, so you have easy access to copy-and-paste; just pass the three file names separately rather than unnecessarily using the shell to expand the brace expression.</span>
<span class="comment-copy">If you are using <code>shell=True</code>, there is no need for the list; the first argument should just be the single string in the list.</span>
