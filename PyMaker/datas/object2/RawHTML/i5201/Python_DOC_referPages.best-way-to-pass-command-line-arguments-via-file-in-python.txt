<div class="post-text" itemprop="text">
<p>I have a lot of arguments to pass to my <code>main.py</code>. It's easier to store them in a txt file. So, i would like to know best way of using "config" files to pass CL args.
Shell script is not what i need, unfortunatly.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you plan to use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>, then <a href="https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars" rel="nofollow noreferrer"><code>fromfile_prefix_chars</code></a> is designed to solve exactly this problem.</p>
<p>In your launching program, put all of the arguments, one per line, into a file. Pass <code>@file.txt</code> to your child program. In your child program, pass a <code>fromfile_prefix_chars</code> parameter to the <code>ArgumentParser()</code> constructor:</p>
<pre><code>parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
</code></pre>
<p><code>argparse</code> takes care of the rest for you.</p>
<p>Here is an example:</p>
<pre><code>from argparse import ArgumentParser

parser = ArgumentParser(fromfile_prefix_chars='@')
parser.add_argument('-f', '--foo')
parser.add_argument('--bar')
parser.add_argument('q', nargs='*')

ns = parser.parse_args()
print(ns)
</code></pre>
<p>The contents of <code>foo.txt</code>:</p>
<pre class="lang-none prettyprint-override"><code>-f
1
--bar=2
q one
q two
</code></pre>
<p>The command line and the output:</p>
<pre class="lang-none prettyprint-override"><code>$ python zz.py @foo.txt
Namespace(bar='2', foo='1', q=['q one', 'q two'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3.3/library/configparser.html" rel="nofollow noreferrer">configparser.</a>  It uses .ini files and it's really easy to use.</p>
<p>Config file:</p>
<pre><code>[DEFAULT]
KeepAlive = 45
ForwardX11 = yes
</code></pre>
<p>Example Code:</p>
<pre><code>&gt;&gt;&gt; config = configparser.ConfigParser()
&gt;&gt;&gt; config.sections()
[]
&gt;&gt;&gt; config.read('example.ini')
&gt;&gt;&gt; for key in config['bitbucket.org']: print(key)
...
keepalive
forwardx11
&gt;&gt;&gt; default = config['default']
&gt;&gt;&gt; default['keepalive']
'45'
&gt;&gt;&gt; default['ForwardX11']
'yes'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple function that converts any <code>@foo</code> argument into the contents of <code>foo</code>, one argument per line. After the conversion, you may use <code>sys.argv</code> in any of the normal ways.</p>
<pre><code>import sys

def expand_arg_files(args):
    for arg in args:
       if arg.startswith('@'):
           with open(arg[1:]) as f:
               file_args = f.read().splitlines()
           yield from expand_arg_files(file_args)
       else:
           yield arg


sys.argv[:] = expand_arg_files(sys.argv[:])
print(sys.argv)
</code></pre>
<p>Notes: </p>
<ul>
<li>The generator delegation syntax requires Python3.3 or higher.</li>
<li>You may have <code>@</code> args inside the argument file. The expansion is recursive.</li>
</ul>
</div>
<span class="comment-copy">... Other than a shell script?</span>
<span class="comment-copy">How is your current <code>main.py</code> parsing its args?</span>
<span class="comment-copy">@Robᵩ I don't know yet. I'am able to implement it as i need it</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/27433316/how-to-get-argparse-to-read-arguments-from-a-file-with-an-option-rather-than-pre" title="how to get argparse to read arguments from a file with an option rather than pre">stackoverflow.com/questions/27433316/…</a></span>
<span class="comment-copy">Even more related: <a href="https://docs.python.org/2/library/argparse.html#fromfile-prefix-chars" rel="nofollow noreferrer">docs.python.org/2/library/argparse.html#fromfile-prefix-chars</a></span>
<span class="comment-copy">actually, i have been expecting diffuculties when putting more than one arg in the file. Can you please give an example of a file and argument parsing with 2 arguments</span>
<span class="comment-copy">I've added an example. Hope that helps!</span>
<span class="comment-copy">That's very good. But i expected something more simple and beautiful, anyway</span>
<span class="comment-copy">You should add a direct answer in here, as the content of link could be changed.</span>
<span class="comment-copy">I can try this lib and edit the answer after</span>
<span class="comment-copy">@LadenkovVladislav edited.</span>
