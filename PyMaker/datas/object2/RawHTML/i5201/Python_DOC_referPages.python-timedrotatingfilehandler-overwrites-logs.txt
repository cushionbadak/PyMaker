<div class="post-text" itemprop="text">
<p>I setup <code>TimedRotatingFileHandler</code> like that:</p>
<pre><code>import logging as logging
from logging.handlers import TimedRotatingFileHandler
import os
import time

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# new file every minute
rotation_logging_handler = TimedRotatingFileHandler('logs/log', 
                               when='m', 
                               interval=1, 
                               backupCount=5)
rotation_logging_handler.setLevel(logging.DEBUG)

format = u'%(asctime)s\t%(levelname)s\t%(filename)s:%(lineno)d\t%(message)s'
rotation_logging_handler.setFormatter(logging.Formatter(format))
rotation_logging_handler.suffix = '%Y-%m-%d'

logger.addHandler(rotation_logging_handler)
</code></pre>
<p>Usage:</p>
<pre><code>logger.logging.info('Service started at port %s', config.get_param('port'))

while True:
    time.sleep(21)
    logger.logging.info('Now time is {}'.format(time.time()))
</code></pre>
<p>I expected that every minute new messages from <code>logs/log</code> had to append to existing log file for current date. Instead it every minute messages from <code>logs/log</code> overwrote existing log file for current date.</p>
<p>What should I do to reach that behaviour?</p>
<p>PS: After small research I found that <code>TimedRotatingFileHandler</code> in the <code>doRollover</code> method deletes existing log file and creates new file. So first solution is to create new handler derived from <code>TimedRotatingFileHandler</code> 
 which creates new file (with some index for example) insted of deleting existing log file.</p>
</div>
<div class="post-text" itemprop="text">
<p>After little bit more researching I found <code>BaseRotatingHandler.namer</code> attribute usage in the <a href="https://github.com/python/cpython/blame/aa0735f597b072c0eb00404c4d7df359ddc26755/Lib/logging/handlers.py#L74" rel="nofollow noreferrer"><code>BaseRotatingHandler.rotation_filename</code> method</a>:</p>
<blockquote>
<p>The default implementation calls the 'namer' attribute of the handler, if it's callable, passing the default name to it. If the attribute isn't callable (the default is None), the name is returned unchanged.</p>
</blockquote>
<p>So as a solution I implemented my own <code>namer</code> function that got <code>filename</code> and returned new <code>filename</code> with my template:</p>
<ul>
<li><code>20181231.log</code></li>
<li><code>20181231.0.log</code></li>
<li><code>20181231.1.log</code></li>
<li>etc.</li>
</ul>
<p>Full example:</p>
<pre><code>import logging as logging
from logging.handlers import TimedRotatingFileHandler
import os
import time


def get_filename(filename):
    # Get logs directory
    log_directory = os.path.split(filename)[0]

    # Get file extension (also it's a suffix's value (i.e. ".20181231")) without dot
    date = os.path.splitext(filename)[1][1:]

    # Create new file name
    filename = os.path.join(log_directory, date)

    # I don't want to add index if only one log file will exists for date
    if not os.path.exists('{}.log'.format(filename)):
        return '{}.log'.format(filename)

    # Create new file name with index
    index = 0
    f = '{}.{}.log'.format(filename, index)
    while os.path.exists(f):
        index += 1
        f = '{}.{}.log'.format(filename, index)
    return f


format = u'%(asctime)s\t%(levelname)s\t%(filename)s:%(lineno)d\t%(message)s'
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# new file every minute
rotation_logging_handler = TimedRotatingFileHandler('logs/log', 
                               when='m', 
                               interval=1, 
                               backupCount=5)
rotation_logging_handler.setLevel(logging.DEBUG)
rotation_logging_handler.setFormatter(logging.Formatter(format))
rotation_logging_handler.suffix = '%Y%m%d'
rotation_logging_handler.namer = get_filename

logger.addHandler(rotation_logging_handler)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation of <a href="https://docs.python.org/2/library/logging.handlers.html#logging.handlers.TimedRotatingFileHandler" rel="nofollow noreferrer">TimedRotatingFileHandler</a>:</p>
<blockquote>
<p>The system will save old log files by appending extensions to the
  filename. The extensions are date-and-time based, using the strftime
  format <code>%Y-%m-%d_%H-%M-%S</code> or a leading portion thereof, depending on
  the rollover interval.</p>
</blockquote>
<p>In other words: <strong>by modifying suffix <em>you</em> are breaking the rollover</strong>. Just leave it at default and python will create the files called:</p>
<ul>
<li><code>logs/log2018-02-02-01-30</code> </li>
<li><code>logs/log2018-02-02-01-31</code> </li>
<li><code>logs/log2018-02-02-01-32</code> </li>
<li><code>logs/log2018-02-02-01-33</code> </li>
<li><code>logs/log2018-02-02-01-34</code></li>
</ul>
<p>And after this (if <code>backupCount=5</code>) it will delete the <code>-30</code> one and create the <code>-35</code>.</p>
<p>If you instead want to have names like :</p>
<ul>
<li><code>logs/log2018-02-02-01.0</code> </li>
<li><code>logs/log2018-02-02-01.1</code> </li>
<li><code>logs/log2018-02-02-01.2</code> </li>
<li><code>logs/log2018-02-02-01.3</code> </li>
<li><code>logs/log2018-02-02-01.4</code></li>
</ul>
<p>Where <code>0</code> is the newest one and <code>.4</code> is the oldest one, then yes, that handler has not been designed to do that.</p>
</div>
<span class="comment-copy">It's one of the possible solutions but I need indexed files so it's not working for me. As you can see in the my answer I found another possible solution for that.</span>
<span class="comment-copy">@feeeper Trying to abuse a class to do something that it was not designed to do is usually not the right way forward.</span>
<span class="comment-copy">As I can see at Python's Docs it is a right way to do this <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-a-rotator-and-namer-to-customize-log-rotation-processing" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a></span>
