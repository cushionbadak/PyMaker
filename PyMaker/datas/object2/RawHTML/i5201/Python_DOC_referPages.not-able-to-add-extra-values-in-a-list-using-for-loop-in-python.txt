<div class="post-text" itemprop="text">
<p>I need to write a function takes one argument, a list of strings, and returns a single string which is an HTML list. For example, if the function should produce the following string when provided the list ['first string]', 'second string'], the result should be like this</p>
<pre><code>&lt;ul&gt;
  &lt;li&gt;first string&lt;/li&gt;
  &lt;li&gt;second string&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>Code that i am using is</p>
<pre><code>def new_func(value):
    capitalized_names = [] 
    capitalized_names.append("&lt;ul&gt;") 
    for values in value:
        capitalized_names.append("&lt;li&gt;" + values + "&lt;/li&gt;") 
    capitalized_names.append("&lt;/ul&gt;") 
    return capitalized_names

print(new_func(['first string', 'second string']))
</code></pre>
<p>It is throwing the error</p>
<blockquote>
<p>code raised an exception, "'list' object has no attribute 'strip'".</p>
</blockquote>
<p>Can anyone please tell the correct way to achieve result</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code doesn't run with any errors when I try it. It outputs this:</p>
<pre><code>['&lt;ul&gt;', '&lt;li&gt;first string&lt;/li&gt;', '&lt;li&gt;second string&lt;/li&gt;', '&lt;/ul&gt;']
</code></pre>
<p>Have you tried isolating just this function from everything else in its environment and testing it all by itself? The error is probably coming from somewhere else besides this script.</p>
<p>If you want a html list, then using a python list won't work, instead use python strings.</p>
<pre><code>def new_func(value):
capitalized_names = ""
capitalized_names+="&lt;ul&gt;" 
for values in value:
    capitalized_names+="&lt;li&gt;" + values + "&lt;/li&gt;"
capitalized_names+="&lt;/ul&gt;"
return capitalized_names
</code></pre>
<p>This should output</p>
<pre><code>&lt;ul&gt;&lt;li&gt;first string&lt;/li&gt;&lt;li&gt;second string&lt;/li&gt;&lt;/ul&gt;
</code></pre>
<p>If you want your whitespace (new lines, indents) to look nice, then you can add "\n" for a new line, and spaces to indent:</p>
<pre><code>for values in value:
    capitalized_names+="\n  &lt;li&gt;" + values + "&lt;/li&gt;"
capitalized_names+="\n&lt;/ul&gt;"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code cannot throw that error.Please check again... You have not used strip() in the code anywhere.For more neatness to get every list item in new line, modify your code as:</p>
<pre><code>def new_func(value):
capitalized_names = [] 
capitalized_names.append("&lt;ul&gt;") 
for values in value:
    capitalized_names.append("    &lt;li&gt;" + values + "&lt;/li&gt;") 
capitalized_names.append("&lt;/ul&gt;") 
return '\n'.join(capitalized_names)

print(new_func(['first string', 'second string']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code does not throw an error (you aren't even calling <code>strip</code>), however it does return a <code>list</code> of the lines, rather than one <code>string</code> as you asked for.</p>
<p>To get the <code>string</code>, you can do it in one line:</p>
<pre><code>def html_list(l):
    return '&lt;ul&gt;\n\t' + '\n\t'.join('&lt;li&gt;'+s+'&lt;/li&gt;' for s in l) + '\n&lt;/ul&gt;'
</code></pre>
<p>which you should be able to see, works:</p>
<pre><code>&gt;&gt;&gt; html_list(['first string', 'second string'])
'&lt;ul&gt;\n\t&lt;li&gt;first string&lt;/li&gt;\n\t&lt;li&gt;second string&lt;/li&gt;\n&lt;/ul&gt;'
&gt;&gt;&gt; print(html_list(['first string', 'second string']))
&lt;ul&gt;
    &lt;li&gt;first string&lt;/li&gt;
    &lt;li&gt;second string&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<hr/>
<p><strong>why?</strong></p>
<p>The first step is to create a <code>generator</code> that will yield each string in <code>l</code> - surrounded with <code>&lt;li&gt;</code> tags. This can be done really simply using a <code>comprehension</code>:</p>
<pre><code>&gt;&gt;&gt; ['&lt;li&gt;'+s+'&lt;/li&gt;' for s in l]
['&lt;li&gt;first string&lt;/li&gt;', '&lt;li&gt;second string&lt;/li&gt;']
</code></pre>
<p><em>Note that I have used a <code>list-comprehension</code> for this example, but the solution uses a <code>generator</code> as they are more efficient in terms of memory.</em></p>
<p>We then want to join each of these modified strings together with one new-line (<code>\n</code>) and a tab (<code>\t</code>) between each element. This can be done really easily with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> which works in the following way:</p>
<pre><code>&gt;&gt;&gt; 'sep'.join(map(str, range(8)))
'0sep1sep2sep3sep4sep5sep6sep7'
</code></pre>
<p>The final step is to add the <code>&lt;ul&gt;</code> tags around this string which is formed and that gives us the final result of something like:</p>
<pre><code>'&lt;ul&gt;\n\t&lt;li&gt;first string&lt;/li&gt;\n\t&lt;li&gt;second string&lt;/li&gt;\n&lt;/ul&gt;'
</code></pre>
<p>which, when passed into <code>print()</code>, will give you the right output.</p>
</div>
<span class="comment-copy">Nothing seems out of place, but why is your error raised from <code>strip</code> when it's not in your code? Are there relevant codes not shown? What are you stripping?</span>
<span class="comment-copy">The traceback should tell you which line the error happened on. But it won't be any of the lines you posted.</span>
<span class="comment-copy">can you please tell the reason of using dot before join(l), and also there is no opening and closing &lt;li&gt; tag before and after first string and last string</span>
<span class="comment-copy">@user3732711 My bad! I forgot about the <code>&lt;li&gt;</code> tags, I have updated the code now and it is still one nice line</span>
