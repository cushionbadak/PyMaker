<div class="post-text" itemprop="text">
<p>I'm building a function that takes a list which contains three different types of elements: integers, floats, and strings. The function converts the list to a dictionary with keys for each of these three different categories. Then each element in that original list is placed into the appropriate key-value pair (e.g. all string elements in the list get assigned to the "string" key). I'm able to get this working correctly, however I'm unable to sort the values inside the dictionary values (which are lists). Here's what I have:</p>
<pre><code>def list_dict_sort(input_list): 
    mixed_list =['asdf', 33, 'qwerty', 123.45, 890, 3.0, 'hi', 0, 'yes', 98765., '', 25]
    sorted_dict = {}                 
    sorted_dict['integer'] = []       
    sorted_dict['float'] = []
    sorted_dict['string'] = []
    for x in mixed_list:           
        if "int" in str(type(x)):  
            sorted_dict['integer'].append(x) 
        elif "float" in str(type(x)):
            sorted_dict['float'].append(x)
        elif "str" in str(type(x)):
            sorted_dict['string'].append(x)
    sorted_dict.sort
    return(sorted_dict)

list_dict_sort(mixed_list)
</code></pre>
<p>this returns:</p>
<pre><code>{'float': [123.45, 3.0, 98765.0],
 'integer': [33, 890, 0, 25],
 'string': ['asdf', 'qwerty', 'hi', 'yes', '']}
</code></pre>
<p>so structurally the function gets me what I want, except that the value-lists are sorted. The exact output that I'd like is:</p>
<pre><code>{'float': [3.0, 123.45, 98765.0],
 'integer': [0, 25, 33, 890],
 'string': ['asdf', 'hi', 'qwerty',  'yes', '']}
</code></pre>
<p>Ideally I want to avoid doing an import here (e.g. operator), I'm just looking for a simple/basic way of sorting the value-lists. I tried using <code>sort</code> and <code>sorted()</code> but couldn't figure out how to build them in to what I already have.
Is there a clean way of doing this or is there a more efficient way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just go over the values and sort them:</p>
<pre><code>for v in sorted_dict.values():
    v.sort();
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that you could also use the <code>type</code> of the mixed elements as the dictionary key, so it can be calculated directly from the elements as they are inserted, and so that when retrieving later, you don't need to know a special string (e.g. "wait, did I use 'integer' or 'int' for the key?")...</p>
<pre><code>In [4]: from collections import defaultdict

In [5]: d = defaultdict(list)

In [6]: mixed_list = ['asdf', 33, 'qwerty', 123.45, 890, 3.0, 'hi', 0, 'yes', 98765., '', 25]

In [7]: for value in mixed_list:
   ...:     d[type(value)].append(value)
   ...:     

In [8]: d
Out[8]: 
defaultdict(list,
            {str: ['asdf', 'qwerty', 'hi', 'yes', ''],
             int: [33, 890, 0, 25],
             float: [123.45, 3.0, 98765.0]})

In [9]: for k, v in d.items():
   ...:     v.sort()
   ...:     

In [10]: d
Out[10]: 
defaultdict(list,
            {str: ['', 'asdf', 'hi', 'qwerty', 'yes'],
             int: [0, 25, 33, 890],
             float: [3.0, 123.45, 98765.0]})
</code></pre>
<p>In the last result, note that default string sorting is going to put <code>''</code> at the front. You'd need to write your own string comparator that would evaluate any string as less than the empty string if you need it to be sorted to the final position.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a minimalist solution via <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> and <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow noreferrer"><code>sortedcontainers.SortedList</code></a>. With <code>SortedList</code>, your list is <em>guaranteed</em> to be always sorted.</p>
<p>Note I have also replaced your type-checking with <a href="https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> and added a dictionary mapping types to keys. The purpose of this is to separate logic from configuration / variables.</p>
<pre><code>from collections import defaultdict
from sortedcontainers import SortedList

mixed_list = ['asdf', 33, 'qwerty', 123.45, 890, 3.0, 'hi', 0, 'yes', 98765., '', 25]

def list_dict_sort(input_list): 

    sorted_dict = defaultdict(SortedList)

    mapper = {int: 'integer',
              float: 'float',
              str: 'string'}

    for x in mixed_list:
        for k, v in mapper.items():
            if isinstance(x, k):
                sorted_dict[v].add(x)
                break

    return(sorted_dict)

list_dict_sort(mixed_list)

# defaultdict(sortedcontainers.sortedlist.SortedList,
#             {'float': SortedList([3.0, 123.45, 98765.0], load=1000),
#              'integer': SortedList([0, 25, 33, 890], load=1000),
#              'string': SortedList(['', 'asdf', 'hi', 'qwerty', 'yes'], load=1000)})
</code></pre>
</div>
<span class="comment-copy">You could use <code>bisect.insort</code> when you inserting each element. However, you will have to do <code>import bisect</code>. See <a href="https://stackoverflow.com/a/18001030/1586200">here</a> for more details.</span>
<span class="comment-copy">is there a way to add sorted or sort() into my current script?</span>
<span class="comment-copy">See if this works (not tested). Replace <code>sorted_dict['integer'].append(x) </code> by <code>bisect.insort(sorted_dict['integer'], x)</code>. Same for floats and strings. Then remove the line <code>sorted_dict.sort</code>.</span>
<span class="comment-copy">I tried this and it returns {'float': [], 'integer': [], 'string': []}</span>
<span class="comment-copy">@David this definitely does work. Please edit your question to show how you integrated this snippet to you code and I'll try to see what went wrong.</span>
<span class="comment-copy">In my option, using <code>type(value)</code> as a key is not a good idea. Consider <code>numpy.float64(5.1321)</code>, the type will come out as <code>numpy.float64</code>. Use <code>isinstance</code> always and maintain an explicit mapping.</span>
<span class="comment-copy">@jp_data_analysis But what if you want a key for <code>np.float64</code> that is a different key than <code>float</code>? And if you don't want these to be two different keys, then the burden is on you to first do type conversions on the elements on the mixed list. I agree it could be application-specific as to which way is better. But there's nothing inherently better about resolving the type value with <code>isinstance</code> ... especially given that instance and subclass checking are also overrideable with metaclasses. So if someone is relying on keys that came from isinstance, the actual element might fail duck typing.</span>
<span class="comment-copy">My point is that you should be explicit. I'm not making assumption on what user wants. There are many answers, e.g. <a href="https://stackoverflow.com/a/1549854/9209546">here</a>, which explain why it is a good assumption to incorporate inheritance in type checking. <code>isinstance</code> isn't perfect, nothing is, but it is considered better than <code>type()</code>. Is your point that a subclass of <code>float</code> or <code>int</code> should not be considered <code>float</code> or <code>int</code>?</span>
<span class="comment-copy">@jp_data_analysis My view is that using <code>isinstance</code> as the means to check if a type is <code>int</code> is <i>less explicit</i>, because a custom object could have overridden instance checking in a way that breaks things. For example, if you plan to process the <code>int</code> elements later on, but one of them is a custom class that doesn't support all <code>int</code> operations (but was customized to return <code>True</code> for <code>isinstance(..., int)</code>, then it all becomes a huge black box problem. But if the entries are stored according to <code>type</code> only, then it is explicit, because a user must convert types explicitly ahead of time.</span>
