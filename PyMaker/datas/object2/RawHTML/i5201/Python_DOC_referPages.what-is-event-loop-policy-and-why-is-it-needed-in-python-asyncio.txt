<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/asyncio-eventloops.html" rel="nofollow noreferrer">event loops documentation</a> mentions <code>event_loop_policy</code> but doesnâ€™t describe what it is and why this abstract layer is needed in detail.
(the documentation even says one can customize this layer).</p>
<p>In addition, <code>help(asyncio.get_event_loop_policy())</code> is just saying...</p>
<blockquote>
<p>UNIX event loop policy with a watcher for child processes.</p>
</blockquote>
<p>Then, I come to be more confused. What is <code>watcher</code>? What are <code>child processes</code> in <code>event loop</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Event loop policy is an object <a href="https://docs.python.org/3/library/asyncio-eventloops.html#event-loop-policy-interface" rel="nofollow noreferrer">that is uses</a> to create, set or get event loops. For example, when you call <code>asyncio.new_event_loop()</code> it is policy who will determine concrete returned event loop's class.</p>
<p>Policy is needed if you for some reason would want to change default event loop type. Encapsulating logic of creating loops inside a separate replaceable (what is convenient) policy object is a <a href="https://stackoverflow.com/q/963965/1113207">strategy programming pattern</a>.</p>
<p><code>help(asyncio.get_event_loop_policy())</code> gives you docs for concrete policy used in your OS, in your case for <a href="https://github.com/python/cpython/blob/2a2247ce5e1984eb2f2c41b269b38dbb795a60cf/Lib/asyncio/unix_events.py#L1085" rel="nofollow noreferrer">_UnixDefaultEventLoopPolicy</a>.</p>
<p>By the link you can see how things implemented there, find <a href="https://github.com/python/cpython/blob/2a2247ce5e1984eb2f2c41b269b38dbb795a60cf/Lib/asyncio/unix_events.py#L1096" rel="nofollow noreferrer">what watcher is</a> and read it's <a href="https://github.com/python/cpython/blob/2a2247ce5e1984eb2f2c41b269b38dbb795a60cf/Lib/asyncio/unix_events.py#L896" rel="nofollow noreferrer">docs</a>:</p>
<pre><code> class SafeChildWatcher(BaseChildWatcher):
    """'Safe' child watcher implementation.

    This implementation avoids disrupting other code spawning processes by
    polling explicitly each process in the SIGCHLD handler instead of calling
    os.waitpid(-1).

    This is a safe solution but it has a significant overhead when handling a
    big number of children (O(n) each time SIGCHLD is raised)
    """
</code></pre>
<p>As you can see it's pretty low-level, OS-specific stuff and you usually don't need it to use <code>asyncio</code>.</p>
<p>I think you may need investigate in policies only if you're going to write your event loops and/or policies that manages them.</p>
</div>
