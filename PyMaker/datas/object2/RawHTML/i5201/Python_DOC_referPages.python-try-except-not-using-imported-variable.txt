<div class="post-text" itemprop="text">
<p>Imported module, connection_status_message.py:</p>
<pre><code>connection_status_message = "Not Connected"
</code></pre>
<p>Try Except file, connect_to_server.py:</p>
<pre><code>from Server.connection_status_message import connection_status_message

def connect_to_server(host,user,password):
    try:
        connect(host,user,password)
    except NoConnection:
        connection_status_message = "Could not reach host..."
        return
...
</code></pre>
<p>The issue is the variable is trying to be made local. So I read up on the issue and saw how to reference a global variable:</p>
<pre><code>def connect_to_server(host,user,password):
    try:
        connect(host,user,password)
    except NoConnection:
        global connection_status_message
        connection_status_message = "Could not reach host..."
        return
...
</code></pre>
<p>But now PyCharm is stating the import statement at the top is no longer being used.</p>
<p>How can I get this Try/Except to use the imported variable? </p>
</div>
<div class="post-text" itemprop="text">
<p>I couldn't replicate your issue, but if your <code>import</code> line is stored under a function, the variable is <a href="https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example" rel="nofollow noreferrer"><code>nonlocal</code> instead of <code>global</code></a>:</p>
<pre><code>def connect_to_server(host,user,password):
    try:
        connect(host,user,password)
    except NoConnection:
        nonlocal connection_status_message
        connection_status_message = "Could not reach host..."
</code></pre>
<p>Another way is to not load the variable directly into your namespace so you have reference of where it came from to avoid local variables being created:</p>
<pre><code>from Server import connection_status_message as csm
csm.connection_status_message

# "No Connection"

def func():    
    csm.connection_status_message = "Could not reach host..."

csm.connection_status_message

# "Could not reach host..."
</code></pre>
<p>You might also consider creating a class to handle all these as an object:</p>
<pre><code>class Connection(object):
    def __init__(self):
        self.connection_status_message = "No Connection"
        # TODO: initialize your class

    def connect(self, host, user, password):
        # TODO code connect criteria stuff here

    def connect_to_server(self, host, user, password):
        try:
            self.connect(host,user,password)
        except NoConnection:
            self.connection_status_message = "Could not reach host..."
            # ... return whatever ...#
</code></pre>
<p>Now you can do <code>from Server import Connection</code> and create a local <code>Connection</code> object to manipulate:</p>
<pre><code>conn = Connection()
conn.connect_to_server(host, user, password)
</code></pre>
<p>This might be obvious, but in any case the value is only stored in memory during this execution.  The actual <code>connection_status_message.py</code> is never updated with this value.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/12496089/how-can-i-override-a-constant-in-an-imported-python-module">How can I override a constant in an imported Python module?</a></span>
<span class="comment-copy">Consider using a OOP approach, creating a class called <code>Connection</code> that handles the <code>connect()</code> and have an attribute of <code>connection_status_message</code>.</span>
<span class="comment-copy"><code>pass</code> is a keyword. You can't use it as a variable name.</span>
<span class="comment-copy"><code>pass</code> was just an abbreviation. I was unaware that it was a keyword so I changed it to <code>password</code> in the question to avoid confusion. Sorry.</span>
