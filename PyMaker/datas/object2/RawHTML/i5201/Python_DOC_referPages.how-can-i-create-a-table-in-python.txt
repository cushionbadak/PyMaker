<div class="post-text" itemprop="text">
<p>I have found a way to list all the alt codes but I want to put them in a
<a href="https://i.stack.imgur.com/hp3Ng.png" rel="nofollow noreferrer">table so it looks something like this</a>. </p>
<p>This is what I have tried:</p>
<pre><code>variable = -1
for i in range(55295):
     print("---------")
     variable = variable + 1
     print(str(variable) + "   " + chr(variable))
</code></pre>
<p>This code will print all the alt codes.
To get it into a table I tried this. (It has a time delay)</p>
<pre><code>import time
variable = -1
#for i in range(55295):
for i in range(15):
     print("---------")
     variable = variable + 1
     print(" | "+ str(variable) + " |  " + chr(variable) + " | ")
     time.sleep(0.0001)
print("---------------------------------------------------")
</code></pre>
<p>I have run out of ideas, can you help please?</p>
<p>(This is the first time i've asked a question on here.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot print characters with such low codes on a 21st century system. The characters in the image are those that appeared on old MS-DOS systems (according to Wikipedia: <a href="https://en.wikipedia.org/wiki/Code_page_437" rel="nofollow noreferrer">Code Page 437</a>). However, modern systems work with Unicode fonts, and the codes below 32 (<code>space</code>) are <em>control codes</em>, reserved for special purposes. The code <code>9</code>, for example, inserts a Tab, and <code>10</code> puts the text cursor on a new line.</p>
<p>(This was also the case on those old systems but you could circumvent this by writing immediately into the video buffer. Nowadays, that is no longer an option on most computers.)</p>
<p>To get the <em>modern</em> equivalent of the old characters, you need a lookup list that translates them. I copied mine from the wiki page linked to above. Note that there is no official representation of the code <code>0000</code>; I changed it to a space. This is only for the control codes below 32. There are a few codes above 126 that also may not show "correctly" (as in "not as on antique computers" ðŸ˜„), but you can look them up on the wiki page.</p>
<p>To correctly align one- and two-digit numbers, use <code>print</code> formatting. Aligning can be done with functions such as <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer"><code>rjust</code> and <code>.format</code></a>; but, coming from a C background, I prefer what the documentation calls "Old style formatting" (<a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#old-string-formatting</a>).</p>
<pre><code>cp437 = [0x0020, 0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022, 0x25D8, 0x25CB,
         0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C, 0x25BA, 0x25C4, 0x2195, 0x203C,
         0x00B6, 0x00A7, 0x25AC, 0x21A8, 0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194,
         0x25B2, 0x25BC]

for i in range(15):
     print("+----+-----+")
     print("| %2d |  %s  |" % (i, chr(cp437[i])))
print("+----+-----+")
</code></pre>
<p>This produces the following table:</p>
<pre><code>+----+-----+
|  0 |     |
+----+-----+
|  1 |  â˜º  |
+----+-----+
|  2 |  â˜»  |
+----+-----+
|  3 |  â™¥  |
+----+-----+
|  4 |  â™¦  |
+----+-----+
|  5 |  â™£  |
+----+-----+
|  6 |  â™   |
+----+-----+
|  7 |  â€¢  |
+----+-----+
|  8 |  â—˜  |
+----+-----+
|  9 |  â—‹  |
+----+-----+
| 10 |  â—™  |
+----+-----+
| 11 |  â™‚  |
+----+-----+
| 12 |  â™€  |
+----+-----+
| 13 |  â™ª  |
+----+-----+
| 14 |  â™«  |
+----+-----+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try to use the pyplot table method: I have modified and extended your example code so that it looks like:
    import matplotlib.pyplot as plt</p>
<pre><code>import time
variable = 96
chars = []

#for i in range(55295):
for i in range(26):
   print("---------")
   variable = variable + 1
   chars.append([str(variable), chr(variable)])
   print(" | "+ str(variable) + " |  " + chr(variable) + " | ")
   time.sleep(0.0001)

print("---------------------------------------------------")

plt.figure('Table')
plt.axis('off')

columns=['Alt Codes','Characters']

tab = plt.table(cellText=chars,loc='center',cellLoc='center',colLabels=columns)

plt.show()
</code></pre>
<p>The result looks like:
<a href="https://i.stack.imgur.com/R8gFp.png" rel="nofollow noreferrer">png file of the table saved with matplotlib</a></p>
<p>I did not succeed to make the characters with alt-code starting from 0 visible in the table (only in the console).</p>
</div>
<span class="comment-copy">read <a href="https://stackoverflow.com/questions/12453799/how-to-create-a-table-using-python" title="how to create a table using python">stackoverflow.com/questions/12453799/â€¦</a></span>
<span class="comment-copy">Creating a table in python is probably not what you want. You want your output to be formatted like a table. Do a google search for "print table python". Or use additional packages to create an image of the table, save it to excel, etc....</span>
<span class="comment-copy">Where do you want to display this table? Python console or somewhere else?</span>
<span class="comment-copy">Those old MS-DOS character codes cannot be printed the same way they could in the 1980s... If you really want to see them as they appear in your image, then look up the 21st century Unicode value for each one of them and use that code instead.</span>
<span class="comment-copy">Would <a href="https://stackoverflow.com/a/35731012/8881141">tabulate be sufficient</a> or does it have to be a GUI?</span>
