<div class="post-text" itemprop="text">
<p>I want to reverse sort a dictionary of lists based on <strong>the number of items in each list</strong>, and keep the keys for further processing. I.e. I do not want a list returned.</p>
<p><strong>Example:</strong></p>
<pre><code>test = {346: [235, 238], 347: [129, 277], 348: [115, 191, 226], 349: [194, 328], 351: [150, 70, 118], 352: [123, 334], 353: [161, 196]}
</code></pre>
<p>After sorting the dict the desired output should be something like:</p>
<pre><code>test = {348: [115, 191, 226], 351: [150, 70, 118], 346: [235, 238], 347: [129, 277], 349: [194, 328], 352: [123, 334], 353: [161, 196]}
</code></pre>
<p>What I have come up with so far is:</p>
<pre><code>def get_length(element):
    return len(element)


test = {346: [235, 238], 347: [129, 277], 348: [115, 191, 226], 349: [194, 328], 351: [150, 70, 118], 352: [123, 334], 353: [161, 196]}

s = sorted(test.values(), key=get_length, reverse=True)
</code></pre>
<p>It correctly sorted as desired, but this breaks my dictionary and results in:</p>
<pre><code>s = [[115, 191, 226], [150, 70, 118], [235, 238], [129, 277], [194, 328], [123, 334], [161, 196]]
</code></pre>
<p>As you can see the keys are gone, and the data is useless for further processing.</p>
<p>What am I missing?
Big thanks to anyone who can help me sort this out.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you have 2 levels of processing: first by key, then by length of value.</p>
<p>As per my comment above, the output is a list of tuples, as currently ordered dictionaries are considered an implementation detail.</p>
<p>If you wish to use an ordered dictionary, use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> as below.</p>
<pre><code>from collections import OrderedDict

test = {346: [235, 238], 347: [129, 277], 348: [115, 191, 226], 349: [194, 328], 351: [150, 70, 118], 352: [123, 334], 353: [161, 196]}

s1 = OrderedDict(sorted(test.items()))
s2 = sorted(s1.items(), key=lambda k: len(s1[k[0]]), reverse=True)

# [(348, [115, 191, 226]),
#  (351, [150, 70, 118]),
#  (346, [235, 238]),
#  (347, [129, 277]),
#  (349, [194, 328]),
#  (352, [123, 334]),
#  (353, [161, 196])]

d = OrderedDict(s2)

# OrderedDict([(348, [115, 191, 226]),
#              (351, [150, 70, 118]),
#              (346, [235, 238]),
#              (347, [129, 277]),
#              (349, [194, 328]),
#              (352, [123, 334]),
#              (353, [161, 196])])
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value">How do I sort a dictionary by value?</a></span>
<span class="comment-copy">Dictionaries are not deemed to be sorted, although they may be in the future. Therefore, your desired output should be a list of tuples.</span>
<span class="comment-copy">OK, thanks. I guess it is time for a less elegant solution. Will try and get this question closed.</span>
<span class="comment-copy">@greatwhitehat, I've provided a solution below using <code>collections.OrderedDict</code>.</span>
