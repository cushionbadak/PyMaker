<div class="post-text" itemprop="text">
<p>I'm trying to write a code that randomly chooses numbers and adds them to the list <code>random_numbers</code>, but if a random number was already generated, the code detects that and replaces the number with another, until every number is different.</p>
<pre><code>import random
random_numbers = []
for x in range(11):
</code></pre>
<p>This part generates a random integer and appends it to the list <code>random_numbers</code>:</p>
<pre><code>    random_numbers.append('[q' + str(random.randint(1, 11)) + ']')
</code></pre>
<p>This part is supposed to iterate over the list and check if the random number generated was already generated, and replace it:</p>
<pre><code>    for item in range(len(random_numbers)):
        if random_numbers[x] == random_numbers[item]:
            random_numbers[x] = '[q' + str(random.randint(1, num_of_qs_in_file)) + ']'

print(random_numbers)
</code></pre>
<p>The output varies, but almost always the list has the same integer more than once. Can anybody help?</p>
</div>
<div class="post-text" itemprop="text">
<p>One straightforward way to do non-repeating 'random' (psudeorandom) whole numbers in a modest range is to create a list using <code>range(1, n)</code>, then <code>random.shuffle()</code> the list, and then take as many numbers as you want from the list using <code>pop()</code> or a slice.</p>
<pre><code>import random

max = 11
l = list(range(1, max))  # the cast to list is optional in Python 2
random.shuffle(l)
</code></pre>
<p>Now every time you want a random number, just <code>l.pop()</code>.</p>
<p>Another is to use <code>random.sample()</code> -- see <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">https://docs.python.org/3/library/random.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is one forceful way</p>
<pre><code>import random as rd
random = rd.randint(1,20)
rdlist = []
for _ in range(10):
    while random not in rdlist:
        rdlist.append(random)
    while random in rdlist:
        random = rd.randint(1,20)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Randomness is a concept that most people assume means "different every time" or some understanding like that.</p>
<p>In reality, randomness is pretty hard to define and generally, it's safe to assume anyway that you will see repetition. If something is truly random, it (the algorithm) does not care if it repeats or not. It pays no attention to previous values when it creates new ones. This is the gist of what 'random' means in the programming world.</p>
<p>If you roll a die and you get a 4 (1/6 chance), what are the chances you will get a 4 again? It's still 1/6. Getting a 4 once does not change the likelihood of getting it again.</p>
<p>So you don't actually want randomness. You want to somewhat control the behavior of your output.</p>
<p>What I would suggest is keeping another list of integers you have already inserted into the array and if the newest one generated is something you already have, produce another random number in order to hopefully get a different one this time.</p>
</div>
<span class="comment-copy">Try <code>random.sample(range(100), 10)</code>. Or <code>random.sample(['aa', 'bbb', 'vccc'], 2)</code>. This topic is definitely a duplicate.</span>
<span class="comment-copy">what's the purpose of filling your list with strings?</span>
<span class="comment-copy">If the greatest number is not too big, you can construct a list 1, 2, 3, ... n and then permute it randomly, and then output the elements of the permutation one at a time. I think there is a function named 'shuffle' to do that.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/196017/unique-non-repeating-random-numbers-in-o1#196065" title="unique non repeating random numbers in o1%23196065">stackoverflow.com/questions/196017/…</a></span>
<span class="comment-copy">It looks like you want a permutation of the numbers in <code>range(1, 12)</code>, so you should use the <code>random.shuffle</code> function to do that. Matteo has hinted at the problem with your current approach. You <i>could</i> fix that, but your code will still be slow due to the nested loops. If you want to learn how <code>random.shuffle</code> works, do a search for "Fisher–Yates shuffle".</span>
<span class="comment-copy">There is such a thing as random draws without repetition. Imagine drawing differently coloured balls from a bag and not putting them back.</span>
<span class="comment-copy">Of course, but this is not the context provided.</span>
<span class="comment-copy">Keeping a list and redrawing if you get an item already on the list is a reasonable place to start, but it becomes increasingly inefficient as the set of possibilities is exhausted. To get the last item in the set, the probability that you have to draw again is (n - 1)/n and the expected number of times you have to draw is n^2 - n (if I've done my arithmetic correctly). But when n is large and the number of samples needed is much less than n (so the probability of collision is low) then the approach you suggest is more attractive.</span>
