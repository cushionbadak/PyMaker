<div class="post-text" itemprop="text">
<p>I have a module which has a function that will generate a sequence 'n' items long. I then have specific sequence names that will generate a specific set of items associated with that name. My issue is that I don't want the module to actually build all the sequences during definition, but only build it once that name is called. My current scheme is like so (the actual <code>gen_sequence</code> function is much more complicated but the idea remains the same) :</p>
<pre><code>def gen_sequence(start, end):
    return list(range(start, end))

def gen_sequence_scalar(start, end, scalar):
    return [x * scalar for x in range(start, end)]

def SEQUENCE_10():
    return gen_sequence(0, 10)

def SEQUENCE_100():
    return gen_sequence(0, 100)

def BIG_SEQUENCE():
    return gen_sequence(0, 1000) + gen_sequence_scalar(10000, 50000, 3)

mapper = {
    'Small Sequence': SEQUENCE_10,
    'Medium Sequence': SEQUENCE_100,
    'Big Sequence': BIG_SEQUENCE,
    }
</code></pre>
<p>Now the user can use the sequence name to retrieve the generator, which then can be evaluated for the actual sequence.</p>
<pre><code>s = mapper['Big Sequence']()
</code></pre>
<p>The main problem with this approach is that for every new named sequence in the named <code>mapper</code>, I have to create a function specifically for that generator. Some sequences like <code>'Big Sequence'</code> are a concatenation of multiple sequence generators, so if I put those in the mapper dictionary, it will evaluate them at definition time, which I do not want. Is there a better approach to this, or is making a function for each named generator and then a mapping dictionary like I have the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use lambdas instead of creating lots of named functions that are only used in this one place.</p>
<pre><code>mapper = {
    'Small Sequence': lambda: gen_sequence(10),
    'Medium Sequence': lambda: gen_sequence(100),
    'Big Sequence': lambda: gen_sequence(1000) + gen_sequence(1000000)
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you really need those sequences to be actual lists? In many cases, all you really need is a generator which will yield the desired numbers. That's a lot more compact than constructing actual lists, and if you <em>do</em> need an actual list you can just pass the generator to the <code>list</code> constructor.</p>
<p>I've modified your <code>mapper</code> dict so that instead of storing functions it now stores lists of args to pass to the <code>range</code> constructor. My <code>sequence</code> function uses those args to construct a matching generator, with the help of <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain</code></a>.</p>
<pre><code>from itertools import chain

mapper = {
    'Small Sequence': [(5,)], 
    'Medium Sequence': [(10, 20, 2)], 
    'Big Sequence': [(30, 40), (50, 60)],
}

def sequence(name):
    args = mapper[name]
    return chain.from_iterable(range(*a) for a in args)

# test

for u in sequence('Small Sequence'):
    print(u)

for k in mapper:
    print(k, list(sequence(k)))
</code></pre>
<p><strong>output</strong></p>
<pre><code>0
1
2
3
4
Small Sequence [0, 1, 2, 3, 4]
Medium Sequence [10, 12, 14, 16, 18]
Big Sequence [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
</code></pre>
</div>
<span class="comment-copy"><code>gen_sequence</code> <b>isn't</b> a generator in the Python sense. Look into generators, iterators and <code>itertools</code>.</span>
<span class="comment-copy">to reiterate jonrsharpe's comment, <code>gen_sequence</code> returns a list, rather than yielding items which form the list. therefore, it is not a generator.</span>
<span class="comment-copy">You have some errors in that code. First, you are missing the comma separators in your assignment to <code>mapper</code>, so running that code will result in a <code>SyntaxError: invalid syntax</code> message. Second,  you have a expression <code>gen_sequence(10000, 1000000)</code>, but the function <code>gen_sequence</code> expects only one parameter. Running that code then running your assignment to <code>s</code> will result in the message <code>TypeError: gen_sequence() takes 1 positional argument but 2 were given</code>.</span>
<span class="comment-copy">But more to your question, Python (especially Python 3) does have lazy evaluation--you just do not use it in your code. Research the terms given in the first comment.</span>
<span class="comment-copy">I understand this isn't a "generator" in the Python sense, I was using the term (probably incorrectly) in the general sense that I have a function that generates a set of results.  I also realize this sample code has a few syntax errors that I will fix for clarity.</span>
<span class="comment-copy">This appears to be the best answer. I'd like to clarify though, these lambdas would not actually be evaluated at all until I would call mapper['Big Sequence'], correct?</span>
<span class="comment-copy">A lambda is just a simple, anonymous function definition. Evaluating the lambda doesn't execute the body.</span>
<span class="comment-copy">This has some good points in it, but I've updated my question for clarity, because my actual code is a bit more complicated than just making ranges. The functions I use to generate the sequences take 4 arguments, and return tuples of three floats. In some cases, the sequences concatenate the results of different functions.  I had thought of using lists of arguments as you've shown, but I don't think it will work if using multiple functions. I'll upvote either way since it does provide a great answer to the simpler original question.</span>
<span class="comment-copy">@iceblueorbitz Ah, ok. However, you shouldn't change a question after it's received valid answers if those changes invalidate those answers. OTOH, it's pretty easy to modify my approach to use your new <code>gen_sequence_scalar</code> function.</span>
<span class="comment-copy">My apologies - I realized by the comments that perhaps it wasn't clear that I wanted to be able to combine multiple functions, and possibly different functions for each sequence name. This answer still provides a really good insight to a simpler case of my question where you are only using a single function and need to chain multiple sets of parameters to the same function, and I will likely use this in the future, so thank you!</span>
