<div class="post-text" itemprop="text">
<p>I don't know what to call this but I've done it in TCL and Elixir. It's when you substitute a variable to make the code simpler. That's a terrible way of explaining it. The example will make it clear:</p>
<p>Here's regular code:</p>
<pre><code>def get(self, item):
    if item == 'name':
        return self.name
    elif item == 'age':
        return self.age
</code></pre>
<p>I'd like to turn that into something like this:</p>
<pre><code>def get(self, item):
    return self.%{item}
</code></pre>
<p>Where it interprets the value in the variable <code>item</code> as the name of a variable. like I said, I've done stuff like this in other languages but I don't know what it's called and I don't know how to do it in python.</p>
<p>Can you help me? What is this ability/style called? Also, how do you do it in Python?</p>
<p>PS. Here's a trivial example from TCL</p>
<pre><code>c:\repos\flow&gt;tclsh
% set foo bar
bar
% set bar baz
baz
% puts $foo
bar
% puts [set $foo]
baz
</code></pre>
<p>See how <code>[set $foo]</code> essentially told the interpreter to interpret <code>$foo</code>'s value as a variable name which was the variable <code>bar</code> then the command <code>puts</code> took <code>bar</code> as a variable and printed out its value which was the string <code>baz</code> </p>
<p>You can even do this kind of thing with commands in Tcl</p>
<pre><code>% set a puts
puts
% $a hello\ world
hello world
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>getattr</code>:</p>
<pre><code>def get(self, item):
  return getattr(self, item)
</code></pre>
<p><code>getattr</code> can also be used like <code>getattr(object, attrname)</code>, and it behaves in the same way.</p>
<p>However, having to do this is usually bad practice. You should probably be using a dictionary instead.
An example with a dictionary:</p>
<pre><code>def __init__(self, whatever):
  self.stuff = {"name": "bob", "age": 40}

def get(self, item):
  return self.stuff[item]
</code></pre>
<p>See also: <a href="https://stackoverflow.com/questions/4075190/what-is-getattr-exactly-and-how-do-i-use-it">this</a></p>
<p>If you want to get variables from the global or local scopes, you can use:</p>
<pre><code>a = 1
def f():
  b = 2
  print(globals()["a"])
  #print(globals()["b"]) fails, b is not global
  print(locals["b"]) # works, b is in the local scope
</code></pre>
<p>There is also a very general way (also very ugly and insecure):</p>
<pre><code>foo="bar"
bar="baz"
baz = ""
obj=None
eval(f"obj.{foo}") # obj.bar
eval(f"obj.{eval(f'{foo}')}") # obj.baz
eval(f"{foo}") # bar / "baz"
eval(f"{eval(f'{foo}')}") # baz / ""
</code></pre>
<p>Please never use this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this approach:</p>
<pre><code>class foo():
    cls_attr = "hello"
    def __init__(self):
        self.name = "i am foo"
        self.age = 0
        self.gender = None
        self.bar = "this is bar"
    def get(self, item):
        if item in foo.__dict__:
            return foo.__dict__[item]
        elif item in self.__dict__:
            return self.__dict__[item]
        else:
            return None

&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.get('gender')
&gt;&gt;&gt; f.get('bar')
'this is bar'
&gt;&gt;&gt; f.get('name')
'i am foo'
&gt;&gt;&gt; f.get('nothing')
&gt;&gt;&gt; f.get('age')
0
&gt;&gt;&gt; f.get('cls_attr')
'hello'
</code></pre>
<p>Updated my answer based on internet_user's comment.  Now it should return both instance and class attributes.</p>
<p>Edit: Okay I don't know how to do the superclass attributes (I mean I can probably guess it's <code>super().__dict__</code>), but at the end of the day internet_user's answer is a better version.  I'll leave this answer here for future viewers to see the inefficient approach for comparison.</p>
</div>
<span class="comment-copy">What's wrong with accessing <code>self.name</code> directly?</span>
<span class="comment-copy">I don't know if it matters, but in this example I guess. <code>item</code> would be a variable passed into the <code>def</code> so it wouldn't be part of the instance of the class object but in this case, what its referring to would be an instance variable such as <code>name</code> as in <code>myInstance.get('name')</code></span>
<span class="comment-copy">there's nothing wrong with it, I'm just trying to learn another way to do it. is it not possible to do such things in Python?</span>
<span class="comment-copy">Basically, I'm looking for the syntax that says to the python interpreter, "I'm giving you a variable but I want to look at the value of this variable and then interpret that value as the name of a variable instead of as a string or something else."</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python">This</a> might be what you're looking for but I'm not entirely sure. Can you post a TCL or Elixir equivalent?</span>
<span class="comment-copy">That's awesome for this case, but is there a more generalized approach. I just used the case of Class attribute because that's what I am working on but I really care about learning the general ability in python if it's possible. How could I use a dictionary in this case? How do I do it generally?</span>
<span class="comment-copy">What do you mean generally? Like for any object, not just one with a <code>.get</code>?</span>
<span class="comment-copy">I think that's exactly what I mean</span>
<span class="comment-copy">what does <code>__dict__[]</code> do? it looks like what I want...</span>
<span class="comment-copy">This won't work with class attributes. (i.e. <code>foo.a = 1</code>)</span>
<span class="comment-copy">@LegitStack it lists the objectâ€™s (writable) attributes.  The <code>[]</code> is just requesting the key <code>item</code> of the returned dictionary to get the value if it exists.  You can use <a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="nofollow noreferrer"><code>__dict__</code></a> on most objects.</span>
<span class="comment-copy">Yeah, this is why you use <code>getattr</code>. It gets pretty messy otherwise.</span>
<span class="comment-copy">@LegitStack in response to your question, you can use do <code>def set(self, item, value): return setattr(self, item, value)</code> in the vein of internet_user's answer.</span>
