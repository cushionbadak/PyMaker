<div class="post-text" itemprop="text">
<p>I am trying to call a function <code>passvalue</code> from another file named "File1" as module to the "Main File". I expect the value of <code>x</code> in "Main File" to be 4 instead of 1 and the value of <code>y</code> to be 3 instead of 2 after calling the function. </p>
<p>Question: How do I ensure the value from the module's function from "File1" is passed onto the "Main File"? For this case, <code>x=4</code> and <code>y=3</code>.</p>
<p>My thoughts: I tried using global value but it does not seem to work, return in this case is only going to return either <code>x</code> or <code>y</code> value back to the function itself which probably defeat the purpose. </p>
<p>Felt like I am missing out something simple but can't seem to get it. </p>
<h3>File1:</h3>
<pre><code>def passvalue(a,b)
  b=b+a
  a=b+b
</code></pre>
<h3>Main:</h3>
<pre><code>import File1
x=1
y=2
File1.passvalue(x,y)
print(x)
print(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple reasons it doesn't work:</p>
<p>First, objects <em>assigned</em> in a function are created <em>locally</em>. When you do <code>a=...</code> and <code>b=...</code>, <code>a</code> and <code>b</code> are <em>local</em> objects that you created within the function that assigned to the parameter values.  Once the function exits, <code>a</code> and <code>b</code> no longer hold any relevance to code outside of the immediate function's scope.</p>
<p>Second, while objects are passed <em>in reference</em> in Python, what remains immutable are immutable.  Since <code>x</code> and <code>y</code> are integers, they are immutable to change, i.e. each time you perform any operation on them, a new value is being <em>assigned</em> to the object instead of it changed.</p>
<p>To understand this, consider the following function:</p>
<pre><code>def mod_lists(list_1, list_2, list_3):
    print("obj ID of rlst_1 = {0}\n"
          "obj ID of rlst_2 = {1}\n"
          "obj ID of rlst_3 = {2}\n".format(id(rlst_1), id(rlst_2), id(rlst_3)))
    print("Before change:\n"
          "obj ID of list_1 = {0}\n"
          "obj ID of list_2 = {1}\n"
          "obj ID of list_3 = {2}\n".format(id(list_1), id(list_2), id(list_3)))
    list_1.append("hello")
    list_2 = list_1 + ["world"]
    list_3 = list_1 + ["world"]
    print("After change:\n"
          "obj ID of list_1 = {0}\n"
          "obj ID of list_2 = {1}\n"
          "obj ID of list_3 = {2}\n".format(id(list_1), id(list_2), id(list_3)))
    return list_3
</code></pre>
<p>Now consider I have three <code>list</code>s I want to pass:</p>
<pre><code>rlst_1 = list()
rlst_2 = list()
rlst_3 = list()
</code></pre>
<p>And I call the function as follows:</p>
<pre><code>rlst_3 = mod_lists(rlst_1, rlst_2, rlst_3)
</code></pre>
<p>Now you might expect <code>rlst_1 = ['hello']</code>, <code>rlst_2 = ['hello', 'world']</code> and <code>rlst_3 = ['hello', 'world']</code>, but that is wrong.  If you ran it, you'll notice <code>rlst_2</code> will actually be an empty <code>list</code> (unchanged).</p>
<p>So what makes <code>rlst_1</code> and <code>rlst_3</code> changes? Let's take a look at the object IDs printed out and compare:</p>
<pre><code># NOTE: You will see different numbers on your system.
obj ID of rlst_1 = 52178816
obj ID of rlst_2 = 52337240
obj ID of rlst_3 = 51607312

Before change:
obj ID of list_1 = 52178816
obj ID of list_2 = 52337240
obj ID of list_3 = 51607312

After change:
obj ID of list_1 = 52178816
obj ID of list_2 = 52336920
obj ID of list_3 = 52336840
</code></pre>
<p>Before any changes were made in the function, you can see the object IDs are <em>exactly</em> the same respectively, that means <code>list_1</code> is an exact reference of <code>rlst_1</code>, etc.  Now after the changes were done is where you notice the changes.  You can see that <code>list_2</code> and <code>list_3</code> now have a different object ID.  Why is that? That's because in the lines <code>list_2=...</code> and <code>list_3=...</code> you are effectively <em>reassigning</em> both objects to a new reference, which is <code>list_1 + ['world']</code>.  You might also wonder why they both have a different ID because the value should be the same.  While <code>list_1</code> is the same reference, each <code>['world']</code> is a <em>new instance</em> of the <code>list</code> object containing the word <code>"world"</code> as an item, so they are different objects even though they have the same values.</p>
<p>Why doesn't <code>list_1</code>'s object reference get affected though? That's because when you call the <code>append</code> function on <code>list_1</code>, it doesn't <em>reassign</em> but is changing the object in reference, appending the value <code>"hello"</code> into the same object.</p>
<p>Now after the function call, when you print the <code>rlst</code>s, you will see:</p>
<pre><code># rlst_1
# ['hello']
# rlst_2
# []
# rlst_3
# ['hello', 'world']
</code></pre>
<p><code>rlst_1</code> is changed, as expected, because the same object in reference was modified.  <code>rlst_2</code> is unchanged, because even though <code>list_2</code> was reassigned a new list, it was a <em>local</em> object created within the function, and lost after function exits.</p>
<p>Why did <code>rlst_3</code> get updated? You might think it's updated, but it's actually a <em>NEW</em> object with the same name.  Note the last part of the function <em>returns</em> the locally created <code>list_3</code> which has the value of <code>list_1 + ['world']</code>.  So the function call evaluates as follows:</p>
<pre><code>rlst_3 = mod_lists(rlst_1, rlst_2, rlst_3)
    (local) list_1 = ['hello']
    (local) list_3 = list_1 + ['world']
    (local) list_3 = ['hello', 'world']
rlst_3 = list_3
rlst_3 = ['hello', 'world']
</code></pre>
<p>If that's still confusing, run a <code>id(rlst_3)</code>, and you'll see <code>52336840</code>, which is <em>exactly</em> the object ID of the locally created <code>list_3</code> (again, you'll probably see a different number, but the <code>id(rlst_3)</code> will always equal <code>id(list_3)</code>).</p>
<p>Applying this logic, now you can understand why it is impossible to pass immutable integers in reference and hoping to modify them in the function.  The only way you can change the outside object is reassign them to the newly created local objects being returned by the function.</p>
<p>This answer is obviously much more long winded than Stephen Rauch's, but it gives a little bit more background to why it doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to <code>return</code> the values like:</p>
<pre><code>def passvalue(a,b)
    b=b+a
    a=b+b
    return a, b
</code></pre>
<p>This returns a <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer"><code>tuple</code></a>.  The <code>tuple</code> can the <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">unpacked</a> like:</p>
<pre><code># Main File
import File1
x=1
y=2
x, y = File1.passvalue(x,y)
print(x)
print(y)
</code></pre>
</div>
<span class="comment-copy">Integer objects are immutable, which is why the change does not propagate outside the function.</span>
<span class="comment-copy">That's interesting to know! In case anyone come across this check out &gt;&gt; <a href="https://stackoverflow.com/q/37535694/6480676">stackoverflow.com/q/37535694/6480676</a>. Thanks for the edit!</span>
<span class="comment-copy">you are not returning</span>
<span class="comment-copy">Hi Stephen, thank you so much for the simple solution, can't believe i missed this out. Appreciate your effort and time! Cheers! In case anyone come across this check out [<a href="https://stackoverflow.com/questions/354883/how-do-you-return-multiple-values-in-python]" title="how do you return multiple values in python%5d">stackoverflow.com/questions/354883/â€¦</a></span>
