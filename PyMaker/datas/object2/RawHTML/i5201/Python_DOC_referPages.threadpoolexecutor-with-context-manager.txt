<div class="post-text" itemprop="text">
<p>I don't understand why this code is behaving in different way. In the first case, the code will print 'elo' and after 19 seconds we will see '3'. </p>
<p>In other case we will be first wait 19 seconds, and after that we will see 'elo'. </p>
<p>Could you explain me that? </p>
<pre><code>from concurrent.futures import ThreadPoolExecutor

def wait_on_future():
    f = 3
    import time
    time.sleep(19)
    print(f)

executor = ThreadPoolExecutor(max_workers=2)
executor.submit(wait_on_future)
print("elo")
</code></pre>
<p>vs</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor

def wait_on_future():
    f = 3
    import time
    time.sleep(19)
    print(f)

with ThreadPoolExecutor(max_workers=2) as executor:      
    executor.submit(wait_on_future)
print("elo")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your first program does not explicitly close the pool. You submit your task with <code>executor.submit()</code>, which is a non-blocking call. Your main program processes to print statement immediately and just hangs there until all threads have finished after 19 seconds. </p>
<p>Your second program uses with statement, which in this context is blocking.  <code>with ThreadPoolExecutor()</code> has an implicit <code>shutdown(wait=True)</code>, and it blocks there until all threads have completed processing. See <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a> </p>
<p>This makes your program1 identical in functionality as is your program 2:</p>
<pre><code>executor = ThreadPoolExecutor(max_workers=2)
executor.submit(wait_on_future)
executor.shutdown(wait=True)
print("elo")
</code></pre>
<p>Hope this helps. </p>
</div>
<span class="comment-copy">Great! Thanks :)</span>
