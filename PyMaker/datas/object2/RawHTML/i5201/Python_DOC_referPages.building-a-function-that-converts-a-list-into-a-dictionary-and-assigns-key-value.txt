<div class="post-text" itemprop="text">
<p>I'm working with a list that contains three different categories that I'm interested in: integers, floats, and strings. I want to convert that list into a dictionary and make each of these three categories into a key, then assign each element of that list to the appropriate key-value (e.g. if an element in the list is a string, then it will be assigned to the value for the "string" key). So for instance:</p>
<pre><code>sample_list = [1.23, 34.34, 'abc', 'xyz', 22, 104]
</code></pre>
<p>the structure of the dictionary should be something like this:</p>
<pre><code>new_dict = {"integers" : [list of all ints],
            "floats" : [list of all floats],
            "strings" : [list of all strings],
            }
</code></pre>
<p>From the sample list above, the output would look like this:</p>
<pre><code>list_to_dict = {'float': [1.23, 34.34], 
                'integer', [22, 104], 
                'string', ['abc', 'xyz']
                }
</code></pre>
<p>I'm using dict() and zip() to convert the dictionary into a list, but I'm not sure how to build in the conditionals to place each element of the original list into the correct key-value pair. Here's what I have so far:</p>
<pre><code>keys = ['integers', 'floats', 'strings']
values = [1.23, 34.34, 'abc', 'xyz', 22, 104]
mixed_dictionary = dict(zip(keys,values))
</code></pre>
<p>Is this the correct approach or should I be doing something differently? If it is the correct approach, how can I add conditionals to place all of the list elements into the appropriate key value? I tried working with a for loop and .append(), but neither worked. </p>
</div>
<div class="post-text" itemprop="text">
<p>You want to <em>group</em> your data based on some predicate. The essential steps are:</p>
<ol>
<li>Identify what group the item belongs to</li>
<li>Place the item into the corresponding "bucket" for that group.</li>
</ol>
<p>There are quite a few ways of achieving this. Some more direct than others. </p>
<p><strong>Option 1</strong><br/>
This is a good use case for <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. The predicate here is the <code>type</code> of an element.</p>
<p>Note, however, that this won't work if your data isn't sorted by type to begin with. This could cause problems, so pre-sort your data first:</p>
<pre><code>sample_list.sort(key=lambda x: id(type(x)))
</code></pre>
<p>Now, call <code>groupby</code>, and unpack each group as a list inside a <em>dict comprehension</em>:</p>
<pre><code>from itertools import groupby
{i.__name__ : list(g) for i, g in groupby(sample_list, key=type)}
</code></pre>
<p></p>
<pre><code>{
    "float": [
        1.23,
        34.34
    ],
    "str": [
        "abc",
        "xyz"
    ],
    "int": [
        22,
        104
    ]
}
</code></pre>
<hr/>
<p><strong>Option 2</strong><br/>
Here's an alternative approach using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.groupby.html" rel="nofollow noreferrer"><code>groupby</code></a> from the <code>pandas</code> API. This does not require a pre-sorting step.</p>
<pre><code>import pandas as pd

s = pd.Series(sample_list)   
s.groupby(s.map(lambda x: type(x).__name__)).apply(list).to_dict()
</code></pre>
<p></p>
<pre><code>{
    "float": [
        1.23,
        34.34
    ],
    "str": [
        "abc",
        "xyz"
    ],
    "int": [
        22,
        104
    ]
}
</code></pre>
<hr/>
<p><strong>Option 3</strong><br/>
Here's a third option using a dictionary with <code>setdefault</code> (similar to the other answer with a <code>defaultdict</code>):</p>
<pre><code>gps = {}
for s in sample_list:
    gps.setdefault(type(s).__name__, []).append(s)
</code></pre>
<p></p>
<pre><code>gps

{
    "float": [
        1.23,
        34.34
    ],
    "str": [
        "abc",
        "xyz"
    ],
    "int": [
        22,
        104
    ]
}
</code></pre>
<p>If we're talking efficiency, however, the <code>defaultdict</code> approach in the other answer is slightly more efficient compared to <code>dict</code> + <code>setdefault</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>defaultdict</code> from <code>collections</code> module:</p>
<pre><code>from collections import defaultdict
sample_list = [1.23, 34.34, 'abc', 'xyz', 22, 104]
final = defaultdict(list)
for elm in sample_list:
    final[type(elm).__name__].append(elm)

print(final)
</code></pre>
<p>Output:</p>
<pre><code>defaultdict(&lt;type 'list'&gt;, {'int': [22, 104], 'float': [1.23, 34.34], 'str': ['abc', 'xyz']})
</code></pre>
<p>And you can convert <code>final</code> into a regular <code>dict</code>:</p>
<pre><code>print(dict(final))
{'int': [22, 104], 'float': [1.23, 34.34], 'str': ['abc', 'xyz']}
</code></pre>
</div>
<span class="comment-copy">@Rawing Appreciate the improvements :)</span>
<span class="comment-copy">thanks for the quick response, this is helpful. I'm pretty new to python and this is a bit over my head though. Your solution works and is super elegant, but I was wondering if you might know a more basic way of going about this without doing an import. I'd like to learn and not just copy your code. Or is this approach pretty much necessary?</span>
<span class="comment-copy">@David Honestly, you just need to understand what's going on here. There are a lot of ways to do it. The essential thing is 1. Identify the group that the element belongs to, and 2. Place it in the bucket for that group. You can either do it yourself or use an API to do it. If you're interested, I've added a 3rd method using a vanilla dictionary.</span>
<span class="comment-copy">thank you so much! this is all great info to have and spells everything out clearly</span>
<span class="comment-copy">also what exactly/how exactly does <b>name</b> work here? I looked around for info on the topic but couldn't find much about how it was used here</span>
