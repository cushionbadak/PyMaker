<div class="post-text" itemprop="text">
<p>I'd like to create n random 10-number-lists using python, and put these lists in a single variable(ran). </p>
<p>Below is my code: </p>
<pre><code>from random import shuffle

def gen_random_list (num):
    ran = []
    k = [n for n in range(1, 11)]
    for i in range(num):
        shuffle(k)
        ran.append(k)
    return ran 
</code></pre>
<p>The expected output should be something like: </p>
<pre><code>[[4, 3, 10, 2, 8, 5, 7, 9, 6, 1],
[1, 3, 9, 6, 10, 4, 2, 8, 5, 7],
[4, 1, 3, 2, 9, 7, 8, 5, 6, 10]]
</code></pre>
<p>However, when I ran it in jupyter notebook, I got this: </p>
<pre><code>[[4, 1, 3, 2, 9, 7, 8, 5, 6, 10],
[4, 1, 3, 2, 9, 7, 8, 5, 6, 10],
[4, 1, 3, 2, 9, 7, 8, 5, 6, 10]]
</code></pre>
<p>Which is just the repeatings of last random list. I've attached a <strong>screenshot</strong> of the output below.</p>
<p><a href="https://i.stack.imgur.com/d9PKL.png" rel="nofollow noreferrer">screenshot in jupyter notebook</a></p>
<p>Could someone tell me where the problem is? </p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer">Shuffle</a> is shuffling the list <code>l</code> in place. You have multiple instances of that same list in the list of lists so they all get shuffled at the same time.</p>
<p>To demonstrate, add a <code>print</code> in your loop:</p>
<pre><code>def init_par (pop_size):
    ''' generate the 1st generation of parents
    pop_size should be an positive integer number'''
    if not (isinstance(pop_size, int) and pop_size&gt;1):
        raise TypeError('bad operand type')
    else:
        par = []
        l=list(range(1,11))
        for i in range(pop_size):
            print i,l, par
            shuffle(l)
            par.append(l)
    return par
</code></pre>
<p>Prints:</p>
<pre><code>0 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] []
1 [9, 6, 5, 7, 2, 4, 3, 1, 8, 10] [[9, 6, 5, 7, 2, 4, 3, 1, 8, 10]]
2 [4, 5, 6, 2, 9, 3, 7, 8, 1, 10] [[4, 5, 6, 2, 9, 3, 7, 8, 1, 10], [4, 5, 6, 2, 9, 3, 7, 8, 1, 10]]
[[6, 8, 7, 1, 5, 4, 9, 3, 2, 10], [6, 8, 7, 1, 5, 4, 9, 3, 2, 10], [6, 8, 7, 1, 5, 4, 9, 3, 2, 10]]
</code></pre>
<p>Since each entry in <code>par</code> is just a view of the same list, when you shuffle one it <em>seems</em> to shuffle all of them. </p>
<p>To fix, make a new list each time through the loop:</p>
<pre><code>def init_par (pop_size):
    ''' generate the 1st generation of parents
    pop_size should be an positive integer number'''
    if not (isinstance(pop_size, int) and pop_size&gt;1):
        raise TypeError('bad operand type')
    else:
        par = []
        for i in range(pop_size):
            l=list(range(1,11)) # each one is a new list
            shuffle(l)
            par.append(l)
    return par
</code></pre>
<p>The <em>faster</em> way would be to use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer">sample</a> vs shuffle like so:</p>
<pre><code>def init_par (pop_size):
    ''' generate the 1st generation of parents
    pop_size should be an positive integer number'''
    if not (isinstance(pop_size, int) and pop_size&gt;1):
        raise TypeError('bad operand type')
    else:
        l=range(1,11)
        return [sample(l, k=len(l)) for _ in range(pop_size)]
</code></pre>
</div>
<span class="comment-copy">Could you please tell me why the "append" only appends the last random list three times?</span>
<span class="comment-copy">Shouldn't you change <code>[n for n in range(1, 11)]</code> to <code>list(range(1, 11))</code> and <code>l[:]</code> to <code>l.copy()</code> for simplicity? Or would that be a bad answer to a beginner?</span>
<span class="comment-copy">@MegaIng: Great suggestion! Added.</span>
<span class="comment-copy">@Dyckia: Because <code>l</code> is the same list the way you wrote the function. If you shuffle 1 <code>l</code> instance you shuffle them all.</span>
<span class="comment-copy">@dawg Understood. Much appreciated!</span>
